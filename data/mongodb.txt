TITLE: Basic MongoDB Backup Using mongodump
DESCRIPTION: Simple command to backup a MongoDB database running on localhost port 27017. Creates a backup in the current directory under 'dump/'.

LANGUAGE: bash
CODE:
mongodump

----------------------------------------

TITLE: Querying MongoDB Current Operations
DESCRIPTION: The $currentOp aggregation stage retrieves information about active operations and cursors to identify performance issues.

LANGUAGE: mongodb
CODE:
$currentOp

----------------------------------------

TITLE: Query Using Operators in MongoDB
DESCRIPTION: Returns documents where _id equals either 5 or ObjectId("507c35dd8fada716c89d0013") using the $in operator.

LANGUAGE: javascript
CODE:
db.bios.find(
   { _id: { $in: [ 5, ObjectId("507c35dd8fada716c89d0013") ] } }
)

----------------------------------------

TITLE: Counting Joins per Month in MongoDB
DESCRIPTION: This aggregation operation shows how many people joined each month of the year. It uses $project, $group, and $sort to transform and summarize the data.

LANGUAGE: javascript
CODE:
db.members.aggregate( [
   { $project: { month_joined: { $month: "$joined" } } } ,
   { $group: { _id: { month_joined: "$month_joined" } , number: { $sum: 1 } } },
   { $sort: { "_id.month_joined": 1 } }
] )

----------------------------------------

TITLE: Inserting Invalid Document into MongoDB Collection
DESCRIPTION: This snippet shows an attempt to insert an invalid document into the 'students' collection. The operation fails because the 'gpa' field is an integer when the validator requires a double.

LANGUAGE: javascript
CODE:
db.students.insertOne( {
   name: "Alice",
   year: Int32( 2019 ),
   major: "History",
   gpa: Int32(3),
   address: {
      city: "NYC",
      street: "33rd Street"
   }
} )

----------------------------------------

TITLE: Practical Example of $center Query in MongoDB
DESCRIPTION: Example query that finds all documents in the 'places' collection where the 'loc' field contains coordinates within a circle centered at [-74, 40.74] with radius 10.

LANGUAGE: javascript
CODE:
db.places.find(
   { loc: { $geoWithin: { $center: [ [-74, 40.74], 10 ] } } }
)

----------------------------------------

TITLE: Creating User with Roles in MongoDB
DESCRIPTION: This example demonstrates creating a user named 'accountAdmin01' with specific roles and custom data. It also shows how to specify write concern for the operation.

LANGUAGE: javascript
CODE:
use products
db.createUser( { user: "accountAdmin01",
                 pwd: passwordPrompt(),  // Or  "<cleartext password>"
                 customData: { employeeId: 12345 },
                 roles: [ { role: "clusterAdmin", db: "admin" },
                          { role: "readAnyDatabase", db: "admin" },
                          "readWrite"] },
               { w: "majority" , wtimeout: 5000 } )

----------------------------------------

TITLE: Retrieving Encrypted Documents in Java with CSFLE
DESCRIPTION: Java code for querying documents with encrypted fields using MongoDB's Client-Side Field Level Encryption. Demonstrates using both encrypted and non-encrypted clients to show the difference in data handling.

LANGUAGE: java
CODE:
## Placeholder for Java code - actual implementation details not shown in source ##

----------------------------------------

TITLE: Inserting Multiple Documents in MongoDB using JavaScript Shell
DESCRIPTION: This snippet demonstrates how to insert multiple documents into the 'inventory' collection using the MongoDB shell. It uses the insertMany() method to add an array of documents with various item details.

LANGUAGE: javascript
CODE:
db.inventory.insertMany( [
   { item: "journal", qty: 25, size: { h: 14, w: 21, uom: "cm" }, status: "A" },
   { item: "notebook", qty: 50, size: { h: 8.5, w: 11, uom: "in" }, status: "A" },
   { item: "paper", qty: 100, size: { h: 8.5, w: 11, uom: "in" }, status: "D" },
   { item: "planner", qty: 75, size: { h: 22.85, w: 30, uom: "cm" }, status: "D" },
   { item: "postcard", qty: 45, size: { h: 10, w: 15.25, uom: "cm" }, status: "A" }
]);

----------------------------------------

TITLE: Using Comments in MongoDB Aggregation
DESCRIPTION: Demonstrates how to add a comment to an aggregation operation for easier tracking and profiling.

LANGUAGE: javascript
CODE:
db.movies.aggregate( [ { $match: { year : 1995 } } ], { comment : "match_all_movies_from_1995" } ).pretty()

----------------------------------------

TITLE: Querying Encrypted Documents with CSFLE (Python)
DESCRIPTION: Implements encrypted document retrieval using Python MongoDB driver with CSFLE. Demonstrates difference between encrypted and non-encrypted query results.

LANGUAGE: python
CODE:
start-find
end-find

----------------------------------------

TITLE: Creating User with Simple Roles in MongoDB
DESCRIPTION: This example shows how to create a user named 'accountUser' with readWrite and dbAdmin roles on the products database.

LANGUAGE: javascript
CODE:
use products
db.createUser(
   {
     user: "accountUser",
     pwd: passwordPrompt(),  // Or  "<cleartext password>"
     roles: [ "readWrite", "dbAdmin" ]
   }
)

----------------------------------------

TITLE: Opening Basic Change Stream - Python
DESCRIPTION: Example of opening a basic change stream to monitor collection changes in Python using PyMongo

LANGUAGE: python
CODE:
try:
    resume_token = None
    pipeline = []
    with collection.watch(pipeline) as stream:
        for change_document in stream:
            print(change_document)
            resume_token = change_document['_id']
except pymongo.errors.PyMongoError:
    if resume_token is None:
        logging.error('Unable to open change stream')
    else:
        with collection.watch(
                pipeline, resume_after=resume_token) as stream:
            for change_document in stream:
                print(change_document)
                resume_token = change_document['_id']

----------------------------------------

TITLE: Calculating Average City Population by State in MongoDB
DESCRIPTION: Demonstrates a two-stage aggregation pipeline using $group to calculate the average population of cities for each state.

LANGUAGE: javascript
CODE:
db.zipcodes.aggregate( [
   { $group: { _id: { state: "$state", city: "$city" }, pop: { $sum: "$pop" } } },
   { $group: { _id: "$_id.state", avgCityPop: { $avg: "$pop" } } }
] )

----------------------------------------

TITLE: MongoDB createUser Command Syntax
DESCRIPTION: Syntax for the createUser command in MongoDB. It includes fields for specifying the username, password, custom data, roles, write concern, authentication restrictions, and SCRAM mechanisms.

LANGUAGE: javascript
CODE:
db.runCommand(
   {
     createUser: "<name>",
     pwd: passwordPrompt(),      // Or  "<cleartext password>"
     customData: { <any information> },
     roles: [
       { role: "<role>", db: "<database>" } | "<role>",
       ...
     ],
     writeConcern: { <write concern> },
     authenticationRestrictions: [
        { clientSource: [ "<IP|CIDR range>", ... ], serverAddress: [ "<IP|CIDR range>", ... ] }, 
        ...
     ],
     mechanisms: [ "<scram-mechanism>", ... ], 
     digestPassword: <boolean>,
     comment: <any>
   }
)

----------------------------------------

TITLE: Querying Documents with $gt Operator
DESCRIPTION: Example showing how to query the inventory collection to find documents where the quantity field is greater than 20.

LANGUAGE: javascript
CODE:
db.inventory.find( { quantity: { $gt: 20 } } )

----------------------------------------

TITLE: Basic Find Operation in MongoDB
DESCRIPTION: Selects documents in a collection and returns a cursor to the selected documents.

LANGUAGE: javascript
CODE:
db.collection.find( <query>, <projection>, <options> )

----------------------------------------

TITLE: Executing a Transaction with Python Callback API
DESCRIPTION: This example demonstrates using the Python driver's callback API to execute a transaction that inserts documents into two different collections. It includes retry logic for transient errors and unknown commit results.

LANGUAGE: python
CODE:
def callback(session):
    collection_one = session.client.mydb1.foo
    collection_two = session.client.mydb2.bar
    
    collection_one.insert_one({"abc": 1}, session=session)
    collection_two.insert_one({"xyz": 999}, session=session)

with client.start_session() as session:
    session.with_transaction(callback)

----------------------------------------

TITLE: Creating and Populating MongoDB Inventory Collection
DESCRIPTION: This snippet demonstrates how to create an inventory collection in MongoDB and insert sample documents. It connects to a test database, creates the collection, and inserts multiple documents representing various inventory items.

LANGUAGE: javascript
CODE:
db = db.getSiblingDB("test");
db.inventory.insertMany([
   { item: "journal", qty: 25, size: { h: 14, w: 21, uom: "cm" }, status: "A" },
   { item: "notebook", qty: 50, size: { h: 8.5, w: 11, uom: "in" }, status: "A" },
   { item: "paper", qty: 100, size: { h: 8.5, w: 11, uom: "in" }, status: "D" },
   { item: "planner", qty: 75, size: { h: 22.85, w: 30, uom: "cm" }, status: "D" },
   { item: "postcard", qty: 45, size: { h: 10, w: 15.25, uom: "cm" }, status: "A" }
]);

----------------------------------------

TITLE: Basic Find Operation in MongoDB
DESCRIPTION: Selects documents in a collection and returns a cursor to the selected documents.

LANGUAGE: javascript
CODE:
db.collection.find( <query>, <projection>, <options> )

----------------------------------------

TITLE: Executing Money Transfer Transaction in MongoDB
DESCRIPTION: Implements a transaction that safely transfers money between two accounts with validation checks. Uses session.withTransaction() to handle the transaction lifecycle including automatic commit and rollback.

LANGUAGE: javascript
CODE:
var session = db.getMongo().startSession( { readPreference: { mode: "primary" } } );
session.withTransaction( async() => {  

   const sessionCollection = session.getDatabase(dbName).getCollection(collectionName);

   // Check needed values
   var checkFromAccount = sessionCollection.findOne(
      {
         "customer": fromAccount,
         "balance": { $gte: transferAmount }
      }
   )
   if( checkFromAccount === null ){
      throw new Error( "Problem with sender account" )
   } 

   var checkToAccount = sessionCollection.findOne(
      { "customer": toAccount }
   )
   if( checkToAccount === null ){
      throw new Error( "Problem with receiver account" )
   } 

   // Transfer the funds
   sessionCollection.updateOne(
      { "customer": toAccount },
      { $inc: { "balance": transferAmount } }
   )
   sessionCollection.updateOne(
      { "customer": fromAccount },
      { $inc: { "balance": -1 * transferAmount } }
   )

 } )

----------------------------------------

TITLE: Using MongoDB Aggregate Method
DESCRIPTION: The db.collection.aggregate() method provides access to the aggregation pipeline. It allows for chaining multiple stages of data transformation and analysis.

LANGUAGE: mongodb
CODE:
db.collection.aggregate([
  { $match: { status: "active" } },
  { $group: { _id: "$category", total: { $sum: "$amount" } } },
  { $sort: { total: -1 } }
])

----------------------------------------

TITLE: Creating MongoDB Collection with JSON Schema Validation
DESCRIPTION: This snippet demonstrates how to create a 'students' collection with JSON Schema validation rules using the $jsonSchema operator. It defines constraints for various fields including name, year, major, gpa, and address.

LANGUAGE: javascript
CODE:
db.createCollection("students", {
   validator: {
      $jsonSchema: {
         bsonType: "object",
         title: "Student Object Validation",
         required: [ "name", "year", "major", "address" ],
         properties: {
            name: {
               bsonType: "string",
               description: "'name' must be a string and is required"
            },
            year: {
               bsonType: "int",
               minimum: 2017,
               maximum: 3017,
               description: "'year' must be an integer in [ 2017, 3017 ] and is required"
            },
            major: {
               enum: [ "Math", "English", "Computer Science", "History", null ],
               description: "'major' can only be one of the enum values and is required"
            },
            gpa: {
               bsonType: [ "double" ],
               description: "'gpa' must be a double if the field exists"
            },
            address: {
               bsonType: "object",
               required: [ "city", "street" ],
               properties: {
                  street: {
                     bsonType: "string",
                     description: "'street' must be a string and is required"
                  },
                  city: {
                     bsonType: "string",
                     description: "'city' must be a string and is required"
                  }
               }
            }
         }
      }
   }
})

----------------------------------------

TITLE: Basic $lookup Syntax for Single Equality Join
DESCRIPTION: Syntax for performing a simple equality join between two collections using $lookup.

LANGUAGE: javascript
CODE:
{
   $lookup:
     {
       from: <collection to join>,
       localField: <field from the input documents>,
       foreignField: <field from the documents of the "from" collection>,
       as: <output array field>
     }
}

----------------------------------------

TITLE: Selecting All Documents in a MongoDB Collection
DESCRIPTION: This example demonstrates how to select all documents in a MongoDB collection using an empty query predicate.

LANGUAGE: javascript
CODE:
db.collection.find({})

----------------------------------------

TITLE: Complex Grouping and Calculation in MongoDB Aggregation
DESCRIPTION: Demonstrates grouping by date, calculating multiple aggregates, and sorting results using $group, $match, and $sort stages.

LANGUAGE: javascript
CODE:
db.sales.aggregate([
  // First Stage
  {
    $match : { "date": { $gte: new ISODate("2014-01-01"), $lt: new ISODate("2015-01-01") } }
  },
  // Second Stage
  {
    $group : {
       _id : { $dateToString: { format: "%Y-%m-%d", date: "$date" } },
       totalSaleAmount: { $sum: { $multiply: [ "$price", "$quantity" ] } },
       averageQuantity: { $avg: "$quantity" },
       count: { $sum: 1 }
    }
  },
  // Third Stage
  {
    $sort : { totalSaleAmount: -1 }
  }
 ])

LANGUAGE: sql
CODE:
SELECT date,
       Sum(( price * quantity )) AS totalSaleAmount,
       Avg(quantity)             AS averageQuantity,
       Count(*)                  AS Count
FROM   sales
WHERE  date >= '01/01/2014' AND date < '01/01/2015'
GROUP  BY date
ORDER  BY totalSaleAmount DESC

----------------------------------------

TITLE: Querying and Sorting Using Index Prefixes in MongoDB
DESCRIPTION: These examples show various ways to query and sort data using prefixes of the compound index created earlier. They demonstrate how MongoDB can use the index efficiently for different query and sort combinations.

LANGUAGE: javascript
CODE:
db.data.find().sort( { a: 1 } )

LANGUAGE: javascript
CODE:
db.data.find().sort( { a: -1 } )

LANGUAGE: javascript
CODE:
db.data.find().sort( { a: 1, b: 1 } )

LANGUAGE: javascript
CODE:
db.data.find().sort( { a: -1, b: -1 } )

LANGUAGE: javascript
CODE:
db.data.find().sort( { a: 1, b: 1, c: 1 } )

LANGUAGE: javascript
CODE:
db.data.find( { a: { $gt: 4 } } ).sort( { a: 1, b: 1 } )

----------------------------------------

TITLE: Creating Index for Author Name in MongoDB
DESCRIPTION: This snippet demonstrates how to create an index on the 'author_name' field in a 'posts' collection to optimize queries that search or sort by author name.

LANGUAGE: javascript
CODE:
db.posts.createIndex( { author_name : 1 } )

----------------------------------------

TITLE: Selecting a Database in MongoDB Shell
DESCRIPTION: This snippet demonstrates how to select a database to use in the MongoDB shell (mongosh) using the 'use' command.

LANGUAGE: javascript
CODE:
use myDB

----------------------------------------

TITLE: Updating Multiple Documents in MongoDB Shell
DESCRIPTION: Uses db.collection.updateMany() to update all documents where qty is less than 50 in the inventory collection.

LANGUAGE: javascript
CODE:
db.inventory.updateMany(
   { "qty": { $lt: 50 } },
   {
     $set: { "size.uom": "in", status: "P" },
     $currentDate: { lastModified: true }
   }
)

----------------------------------------

TITLE: Creating a Database and Collection in MongoDB Shell
DESCRIPTION: This snippet shows how to create a new database and collection in MongoDB by inserting a document. If the database and collection don't exist, MongoDB creates them automatically.

LANGUAGE: javascript
CODE:
use myNewDB

db.myNewCollection1.insertOne( { x: 1 } )

----------------------------------------

TITLE: Using Projections in MongoDB Queries
DESCRIPTION: This snippet demonstrates how to use projections to return only specific fields (timestamp, title, author, and abstract) from documents in the 'posts' collection, improving query performance.

LANGUAGE: javascript
CODE:
db.posts.find( {}, { timestamp : 1 , title : 1 , author : 1 , abstract : 1} ).sort( { timestamp : -1 } )

----------------------------------------

TITLE: MongoDB User Management Methods Reference
DESCRIPTION: A collection of essential MongoDB shell methods for user management, including authentication (db.auth()), user creation (db.createUser()), password management (db.changeUserPassword()), and role management (db.grantRolesToUser(), db.revokeRolesFromUser()).

LANGUAGE: mongodb
CODE:
db.auth()
db.changeUserPassword()
db.createUser()
db.dropUser()
db.dropAllUsers()
db.getUser()
db.getUsers()
db.grantRolesToUser()
db.removeUser()
db.revokeRolesFromUser()
db.updateUser()
passwordPrompt()

----------------------------------------

TITLE: Basic $bucket Syntax in MongoDB Aggregation
DESCRIPTION: Demonstrates the basic syntax for using the $bucket stage in a MongoDB aggregation pipeline. It shows the structure including groupBy, boundaries, default, and output fields.

LANGUAGE: javascript
CODE:
{ 
  $bucket: {
      groupBy: <expression>,
      boundaries: [ <lowerbound1>, <lowerbound2>, ... ],
      default: <literal>,
      output: {
         <output1>: { <$accumulator expression> },
         ...
         <outputN>: { <$accumulator expression> }
      }
   }
}

----------------------------------------

TITLE: Inserting Encrypted Document with MongoDB CSFLE (Multiple Languages)
DESCRIPTION: Demonstrates how to insert an encrypted document into the medicalRecords.patients collection using a CSFLE-enabled MongoClient. The operation automatically encrypts specified fields before insertion. Each implementation shows language-specific patterns for document insertion with encryption.

LANGUAGE: json
CODE:
// Note: Actual code snippets not provided in the original content, but referenced as included files:
// - Java: InsertEncryptedDocument.java
// - Node.js: insert_encrypted_document.js
// - Python: insert_encrypted_document.py
// - C#: InsertEncryptedDocument.cs
// - Go: insert-encrypted-document.go
// - JSON: inserted-doc-enc.json

----------------------------------------

TITLE: Sort, Skip and Limit Stage Optimization Example
DESCRIPTION: Demonstrates optimization of a pipeline containing $sort, $skip and $limit stages through stage coalescence and limit adjustment.

LANGUAGE: javascript
CODE:
{ $sort: { age : -1 } },
{ $skip: 10 },
{ $limit: 5 }

----------------------------------------

TITLE: MongoDB Basic Document Structure
DESCRIPTION: Example showing separate documents for a patron and their addresses before embedding.

LANGUAGE: javascript
CODE:
// patron document
{
   _id: "joe",
   name: "Joe Bookreader"
}

// address one
{
   street: "123 Fake Street",
   city: "Faketon",
   state: "MA",
   zip: "12345"
}

// address two
{
   street: "1 Some Other Street",
   city: "Boston",
   state: "MA",
   zip: "12345"
}

----------------------------------------

TITLE: Inserting Polymorphic Athlete Data in MongoDB
DESCRIPTION: This code snippet demonstrates how to insert multiple documents with different structures into a single MongoDB collection named 'athletes'. It includes data for athletes from bowling, tennis, and cricket, each with sport-specific attributes.

LANGUAGE: javascript
CODE:
db.athletes.insertMany( [
   {
      sport: "bowling",
      name: "Earl Anthony",
      career_earnings: 1440000,
      perfect_games: 25,
      pba_championships: 43,
      events: [
         {
            name: "japan_pba",
            score: 300,
            year: 1972
         }
      ]
   },
   {
      sport: "tennis",
      name: "Steffi Graf",
      career_earnings: 21000000,
      grand_slam_wins: 22,
      surfaces: [ "grass", "clay", "hard court" ]
   },
   {
      sport: "cricket",
      name: "Sachin Tendulkar",
      career_earnings: 8000000,
      runs: 15921,
      centuries: 51,
      teammates: [ "Arshad Ayub", "Kapil Dev" ]
   }
] )

----------------------------------------

TITLE: Inserting Encrypted Document with Node.js MongoDB Driver
DESCRIPTION: This snippet shows how to insert an encrypted document into the 'medicalRecords.patients' namespace using the Node.js MongoDB driver with Queryable Encryption enabled.

LANGUAGE: javascript
CODE:
// Code snippet not provided in the input text

----------------------------------------

TITLE: Creating an Ascending Index on a Single Field in MongoDB
DESCRIPTION: Creates an ascending index on the orderDate field of a collection.

LANGUAGE: javascript
CODE:
db.collection.createIndex( { orderDate: 1 } )

----------------------------------------

TITLE: Basic $match Syntax in MongoDB Aggregation
DESCRIPTION: Demonstrates the basic syntax structure for the $match aggregation operator in MongoDB.

LANGUAGE: javascript
CODE:
{ $match: { <query predicate> } }

----------------------------------------

TITLE: Checking MongoDB Collection Indexes
DESCRIPTION: Shows how to view existing indexes on a MongoDB collection using the getIndexes() method in the mongo shell. Returns an array of index specifications including the _id index and any custom indexes.

LANGUAGE: javascript
CODE:
db.collection.getIndexes()

----------------------------------------

TITLE: Initializing MongoDB Replica Set in Shell
DESCRIPTION: This snippet shows how to initialize a MongoDB replica set using the rs.initiate() method in the MongoDB shell. It configures a three-member replica set with specified hostnames and ports.

LANGUAGE: javascript
CODE:
rs.initiate(
  {
    _id : "myReplSet",
    members: [
      { _id : 0, host : "mongodb0.example.net:27017" },
      { _id : 1, host : "mongodb1.example.net:27017" },
      { _id : 2, host : "mongodb2.example.net:27017" }
    ]
  }
)

----------------------------------------

TITLE: Inserting Encrypted Document with CSFLE in Python
DESCRIPTION: This snippet illustrates how to insert an encrypted document using a CSFLE-enabled MongoClient in Python. It inserts a document into the 'medicalRecords.patients' collection with encrypted fields.

LANGUAGE: python
CODE:
# Code snippet not provided in the given text

----------------------------------------

TITLE: Using Query Operator on Nested Field in MongoDB
DESCRIPTION: This example shows how to use a query operator (less than) on a nested field. It selects documents where the 'h' field embedded in the 'size' field is less than 15.

LANGUAGE: javascript
CODE:
db.inventory.find( { "size.h": { $lt: 15 } } )

----------------------------------------

TITLE: Querying Encrypted Documents in Java
DESCRIPTION: This Java code snippet illustrates how to query a document with encrypted fields. It demonstrates the difference in query results between a client configured for automatic Queryable Encryption and one that is not.

LANGUAGE: java
CODE:
start-find
end-find

----------------------------------------

TITLE: Setting Up MongoDB Atlas Cluster and Connecting with mongosh
DESCRIPTION: This RST-formatted procedure outlines the steps to create a MongoDB Atlas cluster, set up access, and connect using mongosh. It includes creating an account, setting up a free M0 cluster, and obtaining the connection string.

LANGUAGE: rst
CODE:
.. procedure::
   :style: normal

   .. step:: Set up your |service| {+cluster+}.

      a. `Create a free Atlas account or sign in to an existing account <https://account.mongodb.com/account/register?tck=docs_atlas>`__.

      #. If you don't yet have an |service| cluster, `create a free M0 cluster <https://cloud.mongodb.com/go?l=https%3A%2F%2Fcloud.mongodb.com%2Fv2%2F%3Cproject%3E%23clusters%2Fedit%3Ffrom%3DctaClusterHeader>`__.
         To learn more about creating an |service| cluster, see :ref:`Create a Cluster <create-new-cluster>`.

         .. note::

            If you are working with an existing cluster, you must have
            :authrole:`Project Data Access Admin` or higher :ref:`access <who-can-access-project>` to your
            |service| project.

            If you create a new cluster, you have the necessary permissions by default.

         You can create only one ``M0`` {+Free-cluster+} per :ref:`project. <atlas-ui-auth-projects>`

      #. In the left sidebar, click `Overview <https://cloud.mongodb.com/go?l=https%3A%2F%2Fcloud.mongodb.com%2Fv2%2F%3Cproject%3E%23%2Foverview>`__.
         Choose your cluster and click :guilabel:`Connect`.

      #. Under Access your data through tools, click :guilabel:`Shell`.

         If you haven't already, follow the steps provided to download and
         install :binary:`mongosh`.
         
      #. Copy your connection string and click :guilabel:`Done`.

   .. include:: /includes/steps-ts-quick-start-mongosh.rst

----------------------------------------

TITLE: Updating and Returning a Document with findAndModify
DESCRIPTION: Example of using findAndModify to update a document in the 'people' collection, incrementing the 'score' field by 1 for a document matching specific criteria.

LANGUAGE: javascript
CODE:
db.people.findAndModify({
    query: { name: "Tom", state: "active", rating: { $gt: 10 } },
    sort: { rating: 1 },
    update: { $inc: { score: 1 } }
})

----------------------------------------

TITLE: Projection in MongoDB Find Operation
DESCRIPTION: Returns only the name field, contribs field and _id field from all documents in the 'bios' collection.

LANGUAGE: javascript
CODE:
db.bios.find( { }, { name: 1, contribs: 1 } )

----------------------------------------

TITLE: Updating Multiple Documents in MongoDB using JavaScript Shell
DESCRIPTION: This snippet demonstrates how to update multiple documents in a MongoDB collection using the updateMany() method. It updates documents where the quantity is less than 50, setting the size unit of measure to inches, status to 'P', and updating the lastModified field with the current date.

LANGUAGE: javascript
CODE:
db.inventory.updateMany(
   { "qty": { $lt: 50 } },
   {
     $set: { "size.uom": "in", status: "P" },
     $currentDate: { lastModified: true }
   }
)

----------------------------------------

TITLE: Using WriteConcern with findOneAndDelete() in MongoDB
DESCRIPTION: Shows how to use the writeConcern option with findOneAndDelete() to ensure write operations are acknowledged and journaled.

LANGUAGE: javascript
CODE:
db.scores.findOneAndDelete(
   { name: "A. MacDyver" },
   { 
      writeConcern: {  
         w : 1,
         j : true,
         wtimeout : 1000
      } 
   }
)

----------------------------------------

TITLE: Basic $in Operator Syntax in MongoDB
DESCRIPTION: Demonstrates the basic syntax for using the $in operator in MongoDB queries to match field values against an array of possible values.

LANGUAGE: javascript
CODE:
{ field: { $in: [<value1>, <value2>, ... <valueN> ] } }

----------------------------------------

TITLE: Retrieving Encrypted Documents in C# with CSFLE
DESCRIPTION: C# implementation for querying documents with encrypted fields using MongoDB's Client-Side Field Level Encryption. Shows both encrypted and non-encrypted client query patterns.

LANGUAGE: csharp
CODE:
## Placeholder for C# code - actual implementation details not shown in source ##

----------------------------------------

TITLE: MongoDB Find Command Basic Syntax
DESCRIPTION: Basic syntax for the MongoDB find command showing all available command fields and options.

LANGUAGE: javascript
CODE:
db.runCommand(
   {
      find: <string>,
      filter: <document>,
      sort: <document>,
      projection: <document>,
      hint: <document or string>,
      skip: <int>,
      limit: <int>,
      batchSize: <int>,
      singleBatch: <bool>,
      comment: <any>,
      maxTimeMS: <int>,
      readConcern: <document>,
      max: <document>,
      min: <document>,
      returnKey: <bool>,
      showRecordId: <bool>,
      tailable: <bool>,
      oplogReplay: <bool>,
      noCursorTimeout: <bool>,
      awaitData: <bool>,
      allowPartialResults: <bool>,
      collation: <document>,
      allowDiskUse : <bool>,
      let: <document> // Added in MongoDB 5.0
   }
)

----------------------------------------

TITLE: Querying Encrypted Documents with CSFLE (Java)
DESCRIPTION: Demonstrates retrieving documents with automatic encryption using MongoDB Java driver with CSFLE configuration. Shows comparison between encrypted and non-encrypted document retrieval.

LANGUAGE: java
CODE:
start-find
end-find

----------------------------------------

TITLE: Adding Fields to Embedded Documents
DESCRIPTION: Demonstrates how to add new fields to embedded documents using dot notation.

LANGUAGE: javascript
CODE:
db.vehicles.aggregate( [
      { $addFields: { "specs.fuel_type": "unleaded" } }
   ] )

----------------------------------------

TITLE: Query for Equality in MongoDB
DESCRIPTION: Returns documents where _id equals 5 from the 'bios' collection.

LANGUAGE: javascript
CODE:
db.bios.find( { _id: 5 } )

----------------------------------------

TITLE: Query for Equality in MongoDB
DESCRIPTION: Returns documents where _id equals 5 from the 'bios' collection.

LANGUAGE: javascript
CODE:
db.bios.find( { _id: 5 } )

----------------------------------------

TITLE: Aggregation Command Syntax in MongoDB
DESCRIPTION: The syntax for the aggregate command in MongoDB, showing all available fields and their types.

LANGUAGE: javascript
CODE:
db.runCommand(
   {
     aggregate: "<collection>" || 1,
     pipeline: [ <stage>, <...> ],
     explain: <boolean>,
     allowDiskUse: <boolean>,
     cursor: <document>,
     maxTimeMS: <int>,
     bypassDocumentValidation: <boolean>,
     readConcern: <document>,
     collation: <document>,
     hint: <string or document>,
     comment: <any>,
     writeConcern: <document>,
     let: <document> // Added in MongoDB 5.0
   }
)

----------------------------------------

TITLE: Basic $group Syntax in MongoDB Aggregation
DESCRIPTION: Demonstrates the prototype form of the $group stage, showing how to specify the group key and accumulator expressions.

LANGUAGE: javascript
CODE:
{ 
 $group: 
   { 
     _id: <expression>, // Group key
     <field1>: { <accumulator1> : <expression1> }, 
     ... 
   } 
 }

----------------------------------------

TITLE: Query for Equality in MongoDB
DESCRIPTION: Returns documents where _id equals 5 from the 'bios' collection.

LANGUAGE: javascript
CODE:
db.bios.find( { _id: 5 } )

----------------------------------------

TITLE: Inserting Data and Running Aggregation Pipeline in MongoDB
DESCRIPTION: This snippet shows how to insert data into MongoDB collections and run an aggregation pipeline. It demonstrates inserting documents into 'orders' and 'inventory' collections, then performs a multi-stage aggregation including $match, $lookup, and $sort operations.

LANGUAGE: javascript
CODE:
test> db.orders.insertMany([
   { "item" : "almonds", "price" : 12, "quantity" : 2 },
   { "item" : "pecans", "price" : 20, "quantity" : 1 },
])

test> db.inventory.insertMany([
   { "sku" : "almonds", "description": "product 1", "instock" : 120 },
   { "sku" : "cashews", "description": "product 3", "instock" : 60 },
   { "sku" : "pecans", "description": "product 4", "instock" : 70 }
])

test> db.orders.aggregate([
   { $match: { price: { $lt: 15 } } },
   { $lookup: {
         from: "inventory",
         localField: "item",
         foreignField: "sku",
         as: "inventory_docs"
   } },
   { $sort: { price: 1 } },
])

----------------------------------------

TITLE: Group, Count, and Filter in MongoDB
DESCRIPTION: MongoDB aggregation pipeline to group by customer ID, count the documents, and filter for groups with more than one document, equivalent to SQL's GROUP BY, COUNT(*), and HAVING operations.

LANGUAGE: javascript
CODE:
db.orders.aggregate( [
   {
     $group: {
        _id: "$cust_id",
        count: { $sum: 1 }
     }
   },
   { $match: { count: { $gt: 1 } } }
] )

----------------------------------------

TITLE: MongoDB Embedded Document Pattern
DESCRIPTION: Example showing how to embed multiple addresses within a patron document to enable single-query data retrieval.

LANGUAGE: javascript
CODE:
{
   "_id": "joe",
   "name": "Joe Bookreader",
   "addresses": [
      {
         "street": "123 Fake Street",
         "city": "Faketon",
         "state": "MA",
         "zip": "12345"
      },
      {
         "street": "1 Some Other Street",
         "city": "Boston",
         "state": "MA",
         "zip": "12345"
      }
   ]
}

----------------------------------------

TITLE: Concise Correlated Subquery Syntax
DESCRIPTION: Syntax for performing correlated subqueries using a more concise format introduced in MongoDB 5.0.

LANGUAGE: javascript
CODE:
{
   $lookup:
      {
         from: <foreign collection>,
         localField: <field from local collection's documents>,
         foreignField: <field from foreign collection's documents>,
         let: { <var_1>: <expression>, …, <var_n>: <expression> },
         pipeline: [ <pipeline to run> ],
         as: <output array field>
      }
}

----------------------------------------

TITLE: Concise Correlated Subquery Syntax
DESCRIPTION: Syntax for performing correlated subqueries using a more concise format introduced in MongoDB 5.0.

LANGUAGE: javascript
CODE:
{
   $lookup:
      {
         from: <foreign collection>,
         localField: <field from local collection's documents>,
         foreignField: <field from foreign collection's documents>,
         let: { <var_1>: <expression>, …, <var_n>: <expression> },
         pipeline: [ <pipeline to run> ],
         as: <output array field>
      }
}

----------------------------------------

TITLE: Querying Unique Fields in MongoDB Inheritance Pattern
DESCRIPTION: This snippet demonstrates how to query fields specific to a particular book type within the inheritance pattern. It shows a query that returns audiobooks with a duration longer than 20 hours, illustrating how unique fields can be queried without additional logic.

LANGUAGE: javascript
CODE:
db.books.find(
   {
      "duration.hours": { $gt: 20 }
   }
)

----------------------------------------

TITLE: Aggregation with Batch Size Specification in MongoDB
DESCRIPTION: An example of an aggregation operation that specifies an initial batch size using the cursor field.

LANGUAGE: javascript
CODE:
db.orders.aggregate( [
      { $match: { status: "A" } },
      { $group: { _id: "$cust_id", total: { $sum: "$amount" } } },
      { $sort: { total: -1 } },
      { $limit: 2 }
   ],
   { cursor: { batchSize: 0 } }
)

----------------------------------------

TITLE: Defining the db.collection.aggregate() Method in MongoDB
DESCRIPTION: Defines the aggregate() method for MongoDB collections, which calculates aggregate values for the data in a collection or view.

LANGUAGE: javascript
CODE:
db.collection.aggregate( <pipeline>, <options> )

----------------------------------------

TITLE: Querying Arrays with $elemMatch in MongoDB
DESCRIPTION: This snippet demonstrates the basic syntax for using the $elemMatch operator to query array fields in MongoDB documents.

LANGUAGE: javascript
CODE:
{ <field>: { $elemMatch: { <query1>, <query2>, ... } } }

----------------------------------------

TITLE: Creating Data Directories for MongoDB Replica Set Members
DESCRIPTION: This command creates the necessary data directories for each member of the replica set.

LANGUAGE: bash
CODE:
mkdir -p /srv/mongodb/rs0-0  /srv/mongodb/rs0-1 /srv/mongodb/rs0-2

----------------------------------------

TITLE: Configuring Encrypted Fields for Range Queries
DESCRIPTION: Shows how to configure an encrypted field to support range queries by setting the queryType to 'range'. Example adds a billAmount field with range query capability.

LANGUAGE: javascript
CODE:
const encryptedFields = {
  keyId: [keyVaultKey],
  fields: [{
    path: "billAmount",
    bsonType: "decimal",
    queryType: "range"
  }]
};

----------------------------------------

TITLE: Viewing Validation Rules with db.getCollectionInfos()
DESCRIPTION: Command to retrieve validation rules for a specific collection using db.getCollectionInfos(). Returns a validation object containing JSON Schema rules for document validation.

LANGUAGE: javascript
CODE:
db.getCollectionInfos( { name: "students" } )[0].options.validator

----------------------------------------

TITLE: Defining Time Series Collection Fields in MongoDB
DESCRIPTION: Defines the timeField and metaField for a time series collection. The timeField contains time data and must be a date type, while the metaField contains metadata.

LANGUAGE: javascript
CODE:
{
   timeField: "timestamp",
   metaField: "metadata"
}

----------------------------------------

TITLE: Inserting Multiple Documents in MongoDB Compass
DESCRIPTION: This snippet shows the JSON format for inserting multiple documents into MongoDB using Compass. It represents an array of documents with various item details that can be inserted into the 'inventory' collection.

LANGUAGE: javascript
CODE:
[
    { "item": "journal", "qty": 25, "size": { "h": 14, "w": 21, "uom": "cm" }, "status": "A" },
    { "item": "notebook", "qty": 50, "size": { "h": 8.5, "w": 11, "uom": "in" }, "status": "A" },
    { "item": "paper", "qty": 100, "size": { "h": 8.5, "w": 11, "uom": "in" }, "status": "D" },
    { "item": "planner", "qty": 75, "size": { "h": 22.85, "w": 30, "uom": "cm" }, "status": "D" },
    { "item": "postcard", "qty": 45, "size": { "h": 10, "w": 15.25, "uom": "cm" }, "status": "A" }
]

----------------------------------------

TITLE: Combining AND and OR Conditions in MongoDB Query
DESCRIPTION: This example shows how to create a complex query combining both AND and OR conditions.

LANGUAGE: javascript
CODE:
db.inventory.find({
   status: 'A',
   $or: [
     { qty: { $lt: 30 } },
     { item: { $regex: '^p' } }
   ]
})

----------------------------------------

TITLE: Creating a TTL Index in MongoDB Shell
DESCRIPTION: Creates a TTL index on the 'createdAt' field of the 'log_events' collection, setting documents to expire 10 seconds after the time specified in 'createdAt'.

LANGUAGE: javascript
CODE:
db.log_events.createIndex( { "createdAt": 1 }, { expireAfterSeconds: 10 } )

----------------------------------------

TITLE: Covered Query Example in MongoDB
DESCRIPTION: This example demonstrates a covered query on the 'inventory' collection. It queries on 'type' and 'item' fields and returns only the 'item' field, excluding '_id'. This query can be satisfied entirely using the index.

LANGUAGE: javascript
CODE:
db.inventory.find(
   { type: "food", item:/^c/ },
   { item: 1, _id: 0 }
)

----------------------------------------

TITLE: Performing updateOne with let Variables in MongoDB
DESCRIPTION: This snippet demonstrates how to use updateOne with let variables to specify match filters and update values.

LANGUAGE: javascript
CODE:
db.cakeFlavors.updateOne(
   { 
      $expr: { $eq: [ "$flavor", "$$targetFlavor" ] }
   },
   [
      { 
         $set: { flavor: "$$newFlavor" }
      }
   ],
   { 
      let: { targetFlavor: "cherry", newFlavor: "orange" }
   }
)

----------------------------------------

TITLE: MongoDB FindOne with Complex Query
DESCRIPTION: FindOne query using $or operator to match documents based on multiple conditions.

LANGUAGE: javascript
CODE:
db.bios.findOne(
   {
     $or: [
            { 'name.first' : /^G/ },
            { birth: { $lt: new Date('01/01/1945') } }
          ]
   }
)

----------------------------------------

TITLE: Sharding Collections in MongoDB
DESCRIPTION: JavaScript commands for enabling sharding on a collection using either hashed or ranged sharding strategies.

LANGUAGE: javascript
CODE:
sh.shardCollection("<database>.<collection>", { <shard key field> : "hashed" } )
sh.shardCollection("<database>.<collection>", { <shard key field> : 1, ... } )

----------------------------------------

TITLE: Creating User with Roles and Custom Data in MongoDB
DESCRIPTION: Example of creating a user 'accountAdmin01' on the 'products' database with specific roles and custom data. It demonstrates setting multiple roles across different databases and using the passwordPrompt() function for secure password input.

LANGUAGE: javascript
CODE:
db.getSiblingDB("products").runCommand( {
      createUser: "accountAdmin01",
      pwd: passwordPrompt(), 
      customData: { employeeId: 12345 },
      roles: [
               { role: "clusterAdmin", db: "admin" },
               { role: "readAnyDatabase", db: "admin" },
               "readWrite"
             ],
      writeConcern: { w: "majority" , wtimeout: 5000 }
} )

----------------------------------------

TITLE: Querying MongoDB with Condition and Comparison in JavaScript (Shell)
DESCRIPTION: This snippet demonstrates how to query the 'inventory' collection in MongoDB using the shell. It filters documents where the status is 'A' and the quantity is less than 30.

LANGUAGE: javascript
CODE:
db.inventory.find( { status: "A", qty: { $lt: 30 } } )

----------------------------------------

TITLE: Creating a Unique Index in MongoDB
DESCRIPTION: Creates a unique index on a single field using the createIndex() method with the unique option set to true.

LANGUAGE: javascript
CODE:
db.collection.createIndex( <key and index type specification>, { unique: true } )

----------------------------------------

TITLE: Retrieving Index Names in MongoDB
DESCRIPTION: Gets a list of all indexes in a collection using the getIndexes() method.

LANGUAGE: javascript
CODE:
db.<collection>.getIndexes()

----------------------------------------

TITLE: Authenticating after MongoDB Connection using JavaScript
DESCRIPTION: This JavaScript snippet demonstrates how to authenticate a user after connecting to MongoDB. It switches to the authentication database (admin) and uses the db.auth() method to provide credentials.

LANGUAGE: javascript
CODE:
use admin
db.auth("myUserAdmin", passwordPrompt()) // or cleartext password

----------------------------------------

TITLE: RST Table Structure for Time Series Data Examples
DESCRIPTION: ReStructuredText table showing example time series data components including measurements and metadata for different use cases like stock data, weather data, and website visitors.

LANGUAGE: restructuredtext
CODE:
.. list-table::
   :header-rows: 1
   :widths: 30, 30, 40

   * - **Example**
     - **Measurement**
     - **Metadata**

   * - Stock data
     - Stock price
     - Stock ticker, exchange

   * - Weather data
     - Temperature
     - Sensor identifier, location
     
   * - Website visitors
     - View count
     - URL

----------------------------------------

TITLE: Updating a Document with findOneAndUpdate()
DESCRIPTION: Example of using findOneAndUpdate() to increment the 'points' field for a document matching the 'name' filter.

LANGUAGE: javascript
CODE:
db.grades.findOneAndUpdate(
   { "name" : "R. Stiles" },
   { $inc: { "points" : 5 } }
)

----------------------------------------

TITLE: Replacing a Document in MongoDB Shell
DESCRIPTION: Uses db.collection.replaceOne() to replace an entire document except for the _id field in the inventory collection.

LANGUAGE: javascript
CODE:
db.inventory.replaceOne(
   { item: "paper" },
   { item: "paper", instock: [ { warehouse: "A", qty: 60 }, { warehouse: "B", qty: 40 } ] }
)

----------------------------------------

TITLE: Excluding Fields from MongoDB Aggregation Output
DESCRIPTION: Illustrates how to use $project to exclude specific fields (lastModified) from the output documents.

LANGUAGE: javascript
CODE:
db.books.aggregate( [ { $project : { "lastModified": 0 } } ] )

----------------------------------------

TITLE: MongoDB Aggregation Pipeline Using $toObjectId
DESCRIPTION: Demonstrates a complete aggregation pipeline that uses $toObjectId to convert string _id values to ObjectId, then sorts the documents based on the converted values. This example shows practical usage of $toObjectId in a real-world scenario.

LANGUAGE: javascript
CODE:
// Define stage to add convertedId field with converted _id value

idConversionStage = { 
   $addFields: { 
      convertedId: { $toObjectId: "$_id" }
   }
};

// Define stage to sort documents by the converted qty values

sortStage = {
   $sort: { "convertedId": -1 }
};


db.orders.aggregate( [
   idConversionStage,
   sortStage
] )

----------------------------------------

TITLE: Inserting Documents with Encrypted Fields
DESCRIPTION: Example of inserting a document containing fields that will be automatically encrypted based on the encryption schema configuration.

LANGUAGE: javascript
CODE:
await encryptedCollection.insertOne({
  firstName: "Jon",
  lastName: "Doe",
  ssn: "987-65-4320",
  billing: {
    type: "credit-card",
    number: "3333-2222-1111-0000"
  }
});

----------------------------------------

TITLE: Querying Length Using Wildcard Index
DESCRIPTION: Example query using the wildcard index to find products with length greater than 60 inches.

LANGUAGE: javascript
CODE:
db.products.find( { "attributes.size.length" : { $gt : 60 } } )

----------------------------------------

TITLE: Creating Single-Key Index in MongoDB
DESCRIPTION: Creates a basic single-key ascending index on the 'category' field in the products collection to support simple category-based queries.

LANGUAGE: javascript
CODE:
db.products.createIndex( { category: 1 } )

----------------------------------------

TITLE: Creating Unique Index for Queryable Encryption in MongoDB Shell
DESCRIPTION: This snippet shows how to create a unique index on the 'keyAltNames' field in the 'encryption.__keyVault' namespace using the MongoDB Shell. It uses the createIndex method with options to set the index as unique and apply a partial filter expression.

LANGUAGE: javascript
CODE:
db.getSiblingDB("__keyVault").getCollection("__keyVault").createIndex(
  { keyAltNames: 1 },
  {
    unique: true,
    partialFilterExpression: { keyAltNames: { $exists: true } }
  }
);

----------------------------------------

TITLE: Querying Encrypted Documents with Java
DESCRIPTION: This snippet demonstrates how to query for a document with encrypted fields using Java. It shows the query process with and without automatic Queryable Encryption configuration.

LANGUAGE: java
CODE:
// Find the document with automatic encryption
Document encryptedResult = encryptedCollection.find(eq("encryptedField", "123456789")).first();
System.out.println("Document retrieved with automatic encryption:" + encryptedResult.toJson());

// Find the document without automatic encryption
Document unencryptedResult = unencryptedCollection.find(eq("encryptedField", "123456789")).first();
System.out.println("Document retrieved without automatic encryption:" + unencryptedResult.toJson());

----------------------------------------

TITLE: Defining MongoDB $gte Operator Syntax in JavaScript
DESCRIPTION: This snippet demonstrates the basic syntax for using the $gte operator in a MongoDB query. It shows how to structure a query to find documents where a field's value is greater than or equal to a specified value.

LANGUAGE: javascript
CODE:
{ field: { $gte: value } }

----------------------------------------

TITLE: Creating a Unique Compound Index in MongoDB
DESCRIPTION: Creates a unique compound index on groupNumber, lastname, and firstname fields of the members collection to enforce uniqueness on the combination of these values.

LANGUAGE: javascript
CODE:
db.members.createIndex( { groupNumber: 1, lastname: 1, firstname: 1 }, { unique: true } )

----------------------------------------

TITLE: Connecting to a Replica Set with High Write Concern
DESCRIPTION: Shows how to connect to a replica set with a high level of write concern. This example includes write concern parameters in the connection string to ensure majority writes with a timeout.

LANGUAGE: shell
CODE:
mongodb://myDatabaseUser:D1fficultP%40ssw0rd@db1.example.net,db2.example.net,db3.example.net/?replicaSet=myReplicaSet&w=majority&wtimeoutMS=2000

----------------------------------------

TITLE: Creating a TTL Index for Specific Clock Time Expiration in MongoDB
DESCRIPTION: Creates a TTL index on the 'expireAt' field of the 'log_events' collection, setting documents to expire at the exact time specified in 'expireAt'.

LANGUAGE: javascript
CODE:
db.log_events.createIndex( { "expireAt": 1 }, { expireAfterSeconds: 0 } )

----------------------------------------

TITLE: Specifying Key Vault Namespace for MongoDB CSFLE
DESCRIPTION: This snippet demonstrates how to specify the key vault namespace for Client-Side Field Level Encryption in MongoDB. It sets the 'encryption.__keyVault' as the namespace for storing encryption keys.

LANGUAGE: java
CODE:
String keyVaultNamespace = "encryption.__keyVault";

LANGUAGE: javascript
CODE:
const keyVaultNamespace = "encryption.__keyVault";

LANGUAGE: python
CODE:
key_vault_namespace = "encryption.__keyVault"

LANGUAGE: csharp
CODE:
var keyVaultNamespace = "encryption.__keyVault";

LANGUAGE: go
CODE:
keyVaultNamespace := "encryption.__keyVault"

----------------------------------------

TITLE: Adding Member to MongoDB Replica Set
DESCRIPTION: JavaScript command executed from mongo shell to add a new member to an existing replica set using rs.add() method with member configuration.

LANGUAGE: javascript
CODE:
rs.add( { host: "mongodb3.example.net:27017" } )

----------------------------------------

TITLE: MongoDB Time Series Collection Schema Example
DESCRIPTION: Example schema for a time series collection storing stock market data with ticker symbol, timestamp, price and volume fields.

LANGUAGE: javascript
CODE:
{
   _id: 573a1397f29313caabce8347,

   "ticker": "MDB",
   "timestamp": ISODate("2024-07-24T13:45:00.000Z"),
   "price": 248.21,
   "volume": 6930
}

----------------------------------------

TITLE: Querying and Sorting Posts by Timestamp in MongoDB
DESCRIPTION: This snippet demonstrates how to query the 'posts' collection and sort the results by timestamp in descending order, which is optimized by the previously created index.

LANGUAGE: javascript
CODE:
db.posts.find().sort( { timestamp : -1 } )

----------------------------------------

TITLE: Inserting New Data with Bucket Pattern in MongoDB
DESCRIPTION: Example of inserting new trade data using the bucket pattern, including logic to maintain bucket size limits and handle document creation.

LANGUAGE: javascript
CODE:
db.trades.updateOne( { "_id": /^123_/, "count": { $lt: 10 } },
  { 
     "$push": { 
        "history": {
        "type": "buy",
        "ticker": "MSFT",
        "qty": 42,
        "date": ISODate("2023-11-02T11:43:10")
      }
   },
   "$inc": { "count": 1 },
   "$setOnInsert": { "_id": "123_1698939791", "customerId": 123 }
  },
  { upsert: true }
)

----------------------------------------

TITLE: MongoDB $inc Operator Syntax
DESCRIPTION: Demonstrates the basic syntax for using the $inc operator in MongoDB update operations.

LANGUAGE: javascript
CODE:
{ $inc: { <field1>: <amount1>, <field2>: <amount2>, ... } }

----------------------------------------

TITLE: Creating a Unique Index on User ID in MongoDB
DESCRIPTION: Creates a unique index on the user_id field of the members collection to ensure each user_id is unique.

LANGUAGE: javascript
CODE:
db.members.createIndex( { "user_id": 1 }, { unique: true } )

----------------------------------------

TITLE: Basic $eq Operator Syntax in MongoDB
DESCRIPTION: Demonstrates the basic syntax for using the $eq operator in MongoDB queries.

LANGUAGE: javascript
CODE:
{ <field>: { $eq: <value> } }

----------------------------------------

TITLE: Create Command Basic Syntax
DESCRIPTION: Basic syntax structure for the MongoDB create command showing all available fields and options.

LANGUAGE: javascript
CODE:
db.runCommand(
   {
     create: <collection or view name>,
     capped: <true|false>,
     timeseries: {
        timeField: <string>,
        metaField: <string>,
        granularity: <string>,
        bucketMaxSpanSeconds: <timespan>,  // Added in MongoDB 6.3
        bucketRoundingSeconds: <timespan>  // Added in MongoDB 6.3
     },
     expireAfterSeconds: <number>,
     clusteredIndex: <document>,  // Added in MongoDB 5.3
     changeStreamPreAndPostImages: <document>,  // Added in MongoDB 6.0
     autoIndexId: <true|false>,
     size: <max_size>,
     max: <max_documents>,
     storageEngine: <document>,
     validator: <document>,
     validationLevel: <string>,
     validationAction: <string>,
     indexOptionDefaults: <document>,
     viewOn: <source>,
     pipeline: <pipeline>,
     collation: <document>,
     writeConcern: <document>,
     encryptedFields: <document>,
     comment: <any>
   }


----------------------------------------

TITLE: Equality Query on Encrypted Fields - Multiple Languages
DESCRIPTION: Demonstrates how to perform an equality query on encrypted fields in MongoDB and decrypt the results. The examples show the implementation across different programming languages.

LANGUAGE: javascript
CODE:
const result = await collection.findOne({
    encryptedField: "123-45-6789"
});
console.log("Found document:", result);

LANGUAGE: python
CODE:
result = collection.find_one({
    "encryptedField": "123-45-6789"
})
print("Found document:", result)

LANGUAGE: java
CODE:
Document result = collection.find(eq("encryptedField", "123-45-6789")).first();
System.out.println("Found document: " + result.toJson());

LANGUAGE: go
CODE:
var result bson.D
err = collection.FindOne(context.TODO(), bson.D{{"encryptedField", "123-45-6789"}}).Decode(&result)
if err != nil {
    panic(err)
}
fmt.Printf("Found document: %v\n", result)

LANGUAGE: csharp
CODE:
var result = await collection.Find(Builders<BsonDocument>.Filter.Eq("encryptedField", "123-45-6789")).FirstOrDefaultAsync();
Console.WriteLine($"Found document: {result}");

----------------------------------------

TITLE: Restoring MongoDB Primary from Backup
DESCRIPTION: Steps to restore a MongoDB primary node from a backup, including stopping the mongod process, copying data files, and restarting the server as a single-node replica set.

LANGUAGE: shell
CODE:
mongod --port 27017 --dbpath /data/db1 --replSet rs0

LANGUAGE: shell
CODE:
rs.initiate()

----------------------------------------

TITLE: Implementing Causal Consistency in MongoDB with Python
DESCRIPTION: This code snippet demonstrates how to use a causally consistent session in MongoDB to ensure that an update operation occurs before an insert operation when modifying SKU values for items. It uses the PyMongo driver to create a client session and perform the operations with majority read and write concerns.

LANGUAGE: python
CODE:
with client.start_session(causal_consistency=True) as session:
    collection = client.get_database("test").get_collection("items")
    
    # Update old SKU
    collection.update_one(
        {"sku": "111", "end": None},
        {"$set": {"end": datetime.now()}},
        session=session
    )
    
    # Insert new SKU
    collection.insert_one(
        {"sku": "222", "end": None},
        session=session
    )

----------------------------------------

TITLE: Using $regexMatch to Validate Email Addresses in MongoDB
DESCRIPTION: An example of using $regexMatch in an aggregation pipeline to check for email addresses and categorize feedback as 'Employee' or 'External'.

LANGUAGE: javascript
CODE:
db.feedback.aggregate( [ 
    { $addFields: { 
       "category": { $cond: { if:  { $regexMatch: { input: "$comment", regex: /[a-z0-9_.+-]+@mongodb.com/i } },
                              then: "Employee",
                              else: "External" } }
    } }

----------------------------------------

TITLE: Creating MongoDB View with db.createView()
DESCRIPTION: Alternative syntax for creating a MongoDB view using db.createView() method. Takes view name, source collection, pipeline array, and optional settings as parameters.

LANGUAGE: javascript
CODE:
db.createView(
  "<viewName>",
  "<source>",
  [<pipeline>],
  {
    "collation" : { <collation> }
  }
)

----------------------------------------

TITLE: Querying with $nor and Two Expressions in MongoDB
DESCRIPTION: Illustrates a MongoDB query using the $nor operator with two expressions. This query returns documents where the price is not 1.99 and the sale is not true, or documents missing either or both fields.

LANGUAGE: javascript
CODE:
db.inventory.find( { $nor: [ { price: 1.99 }, { sale: true } ]  } )

----------------------------------------

TITLE: Creating a TTL Index in MongoDB Shell
DESCRIPTION: This snippet demonstrates how to create a TTL index on the 'lastModifiedDate' field of the 'eventlog' collection with an expiration time of 3600 seconds (1 hour).

LANGUAGE: javascript
CODE:
db.eventlog.createIndex(
   { "lastModifiedDate": 1 },
   { expireAfterSeconds: 3600 }
)

----------------------------------------

TITLE: Creating MongoClient Instance in Node.js for MongoDB Encrypted Data Access
DESCRIPTION: This code snippet shows how to create a MongoClient instance in Node.js for accessing a key vault and handling encrypted data in MongoDB. It uses the MongoClient.connect method with a connection string.

LANGUAGE: javascript
CODE:
const client = new MongoClient("<Your MongoDB URI>");
await client.connect();

----------------------------------------

TITLE: Updating Policy and Retrieving Version History in MongoDB
DESCRIPTION: This snippet demonstrates how to update a policy by removing an item, increment the revision, and then retrieve the complete version history of the policy. It showcases the full cycle of the Document Versioning Pattern.

LANGUAGE: javascript
CODE:
db.currentPolicies.updateOne(
   { policyId: 1 },
   {
      $pull: {
         itemsInsured: "golf clubs"
      },
      $inc: {
         revision: 1
      },
      $currentDate: {
         dateSet: true
      }
   }
)

LANGUAGE: javascript
CODE:
db.currentPolicies.aggregate( [
   {
      $match: { policyId: 1 }
   },
   {
      $set: { _id: new ObjectId() }
   },
   {
      $merge: {
         into: { db: "test", coll: "policyRevisions" },
         on: "_id",
         whenNotMatched: "insert"
      }
   }
] )

LANGUAGE: javascript
CODE:
db.policyRevisions.find( { policyId: 1 } ).sort( { revision: 1 } )

----------------------------------------

TITLE: Creating Indexes with Collation
DESCRIPTION: Example showing how to create indexes with custom collation rules for string comparison.

LANGUAGE: javascript
CODE:
db.products.createIndexes( [ { "manufacturer": 1}, { "category": 1 } ],
   { collation: { locale: "fr", strength: 2 } })

----------------------------------------

TITLE: Configuring Named GCP KMS Provider for MongoDB Encryption in Java
DESCRIPTION: This snippet shows how to set up a named GCP KMS provider for MongoDB Client-Side Field Level Encryption in Java. It demonstrates creating a map with the provider details including the project ID, location, and key ring.

LANGUAGE: java
CODE:
Map<String, Map<String, Object>> kmsProviders = new HashMap<>();
Map<String, Object> gcpKmsOptions = new HashMap<>();
gcpKmsOptions.put("projectId", "my-project");
gcpKmsOptions.put("location", "global");
gcpKmsOptions.put("keyRing", "my-key-ring");
gcpKmsOptions.put("keyName", "my-key-name");
kmsProviders.put("my_gcp_provider", gcpKmsOptions);

----------------------------------------

TITLE: Retrieving Distinct Values using MongoDB Aggregation
DESCRIPTION: Demonstrates how to use $group to retrieve distinct values from a field, similar to DISTINCT in SQL.

LANGUAGE: javascript
CODE:
db.sales.aggregate( [ { $group : { _id : "$item" } } ] )

----------------------------------------

TITLE: Text Search with Relevance Score Sorting in MongoDB
DESCRIPTION: Performs a text search and sorts the results by text relevance score and then by the 'posts' field. This example uses $text for matching and $meta for sorting by text score.

LANGUAGE: javascript
CODE:
db.users.aggregate(
   [
     { $match: { $text: { $search: "operating" } } },
     { $sort: { score: { $meta: "textScore" }, posts: -1 } }
   ]
)

----------------------------------------

TITLE: Replace Document Example
DESCRIPTION: Example showing how to replace a document with a score less than 20000 in a collection of game scores.

LANGUAGE: javascript
CODE:
db.scores.findOneAndReplace( 
   { "score" : { $lt : 20000 } },  
   { "team" : "Observant Badgers", "score" : 20000 }
)

----------------------------------------

TITLE: Creating a Time Series Collection with Automatic Removal in MongoDB
DESCRIPTION: This snippet demonstrates how to create a time series collection named 'weather24h' with automatic removal of documents after 24 hours (86400 seconds). It specifies the timeField, metaField, and granularity for the time series data.

LANGUAGE: javascript
CODE:
db.createCollection(
    "weather24h",
    {
       timeseries: {
          timeField: "timestamp",
          metaField: "metadata",
          granularity: "hours"
       },
       expireAfterSeconds: 86400
    }
)

----------------------------------------

TITLE: Type Check for Null Values in MongoDB Shell
DESCRIPTION: Query that matches only documents where the 'item' field has a BSON Type of Null (type 10).

LANGUAGE: javascript
CODE:
db.inventory.find( { item: { $type: 10 } } )

----------------------------------------

TITLE: Retrieving Distinct Values using MongoDB Aggregation
DESCRIPTION: Demonstrates how to use $group to retrieve distinct values from a field, similar to DISTINCT in SQL.

LANGUAGE: javascript
CODE:
db.sales.aggregate( [ { $group : { _id : "$item" } } ] )

----------------------------------------

TITLE: Shard Key Prefixes for Targeted Queries
DESCRIPTION: These code snippets demonstrate the shard key prefixes that can be used for targeted queries in a sharded cluster. They show how partial shard keys can be used to route queries to specific shards.

LANGUAGE: javascript
CODE:
{ a: 1 }

LANGUAGE: javascript
CODE:
{ a: 1, b: 1 }

----------------------------------------

TITLE: Creating Average Score Materialized View with $set Stage
DESCRIPTION: Example of creating a materialized view that calculates average scores from a grades collection using the $set aggregation stage.

LANGUAGE: javascript
CODE:
{
  averageScore: { $avg: "$scores.score" }
}

----------------------------------------

TITLE: Basic $push Syntax in MongoDB
DESCRIPTION: Shows the basic syntax for using the $push operator to append values to an array field.

LANGUAGE: javascript
CODE:
{ $push: { <field1>: <value1>, ... } }

----------------------------------------

TITLE: Creating a MongoDB Collection with Schema Validation
DESCRIPTION: This snippet demonstrates how to create a 'users' collection with initial schema validation rules. It requires 'username' and 'password' fields, with the password having a minimum length of 8 characters.

LANGUAGE: javascript
CODE:
db.createCollection("users", {
   validator: {
      $jsonSchema: {
         bsonType: "object",
         required: [ "username", "password" ],
         properties: {
            username: {
               bsonType: "string",
               description: "must be a string and is required"
            },
            password: {
               bsonType: "string",
               minLength: 8,
               description: "must be a string at least 8 characters long, and is required"
            }
         }
      }
   }
} )

----------------------------------------

TITLE: Monitoring Index Build Progress
DESCRIPTION: Demonstrates how to check active index building operations using the $currentOp aggregation pipeline. Uses $match to filter for createIndexes operations and shows detailed operation status.

LANGUAGE: javascript
CODE:
db.getSiblingDB("admin").aggregate( [
   { $currentOp : { idleConnections: true } },
   { $match : {"command.createIndexes": { $exists: true } } }
] )

----------------------------------------

TITLE: Change Stream with Aggregation Pipeline Filter in MongoDB
DESCRIPTION: This snippet demonstrates how to use an aggregation pipeline to filter change stream events, in this case only showing 'insert' operations.

LANGUAGE: javascript
CODE:
watchCursor = db.getSiblingDB("data").sensors.watch(
   [
      { $match : {"operationType" : "insert" } }
   ]
)

while (!watchCursor.isClosed()){
   if (watchCursor.hasNext()){
      printjson(watchCursor.next());
   }
}

----------------------------------------

TITLE: Querying Encrypted Documents with CSFLE in C#
DESCRIPTION: This snippet demonstrates how to query a document with encrypted fields using a MongoDB client configured for automatic Client-Side Field Level Encryption (CSFLE) in C#. It also shows querying with a non-CSFLE client for comparison.

LANGUAGE: csharp
CODE:
// Find the document using a MongoClient configured with CSFLE
var docWithAutoEncryption = csfleCollection.Find(Builders<BsonDocument>.Filter.Eq("firstName", "Jon")).First();
Console.WriteLine("Document retrieved with CSFLE-enabled client:");
Console.WriteLine(docWithAutoEncryption);

// Find the document using a MongoClient not configured with CSFLE
var docWithoutAutoEncryption = standardCollection.Find(Builders<BsonDocument>.Filter.Eq("firstName", "Jon")).First();
Console.WriteLine("Document retrieved without CSFLE-enabled client:");
Console.WriteLine(docWithoutAutoEncryption);

----------------------------------------

TITLE: Complex $expr Query with Conditional Logic
DESCRIPTION: Shows how to use $expr with $cond operator to filter documents based on calculated discounted prices using conditional logic.

LANGUAGE: javascript
CODE:
let discountedPrice = { 
   $cond: { 
      if: { $gte: ["$qty", 100] }, 
      then: { $multiply: ["$price", NumberDecimal("0.50")] }, 
      else: { $multiply: ["$price", NumberDecimal("0.75")] } 
   } 
};

db.supplies.find( { $expr: { $lt:[ discountedPrice,  NumberDecimal("5") ] } });

----------------------------------------

TITLE: Creating MongoDB Encryption Schema
DESCRIPTION: Defines the encryption schema for the collection, specifying which fields should be encrypted and their encryption settings. Requires a Base64-encoded Data Encryption Key (DEK) ID.



----------------------------------------

TITLE: Using $multiply in MongoDB Aggregation Pipeline
DESCRIPTION: Demonstrates how to use the $multiply operator within a $project stage of an aggregation pipeline to calculate the total by multiplying 'price' and 'quantity' fields.

LANGUAGE: javascript
CODE:
db.sales.aggregate(
   [
     { $project: { date: 1, item: 1, total: { $multiply: [ "$price", "$quantity" ] } } }
   ]
)

----------------------------------------

TITLE: Configuring Replica Set Name in YAML
DESCRIPTION: Updates the MongoDB configuration file to set the replica set name for each server.

LANGUAGE: yaml
CODE:
replication:
  replSetName: "rs0"

----------------------------------------

TITLE: Creating Encryption Schema for MongoDB Collection
DESCRIPTION: This snippet shows how to create an encryption schema for a MongoDB collection. It defines the structure and encryption settings for the 'medicalRecords' collection, specifying encryption types and keys for different fields.

LANGUAGE: javascript
CODE:
const schema = {
  "bsonType": "object",
  "encryptMetadata": {
    "keyId": [
      {
        "$binary": {
          "base64": "<your-key-id>",
          "subType": "04"
        }
      }
    ]
  },
  "properties": {
    "firstName": {
      "encrypt": {
        "bsonType": "string",
        "algorithm": "AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic"
      }
    },
    "lastName": {
      "encrypt": {
        "bsonType": "string",
        "algorithm": "AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic"
      }
    },
    "patientId": {
      "encrypt": {
        "bsonType": "int",
        "algorithm": "AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic"
      }
    },
    "address": {
      "encrypt": {
        "bsonType": "string",
        "algorithm": "AEAD_AES_256_CBC_HMAC_SHA_512-Random"
      }
    },
    "medications": {
      "encrypt": {
        "bsonType": "array",
        "algorithm": "AEAD_AES_256_CBC_HMAC_SHA_512-Random"
      }
    },
    "bloodType": {
      "encrypt": {
        "bsonType": "string",
        "algorithm": "AEAD_AES_256_CBC_HMAC_SHA_512-Random"
      }
    },
    "medicalNotes": {
      "encrypt": {
        "bsonType": "string",
        "algorithm": "AEAD_AES_256_CBC_HMAC_SHA_512-Random"
      }
    }
  }
};

----------------------------------------

TITLE: Defining $reverseArray Operator in MongoDB Aggregation
DESCRIPTION: Shows the syntax for using the $reverseArray operator in MongoDB aggregation pipelines. It accepts an array expression as an argument and returns an array with the elements in reverse order.

LANGUAGE: javascript
CODE:
{ $reverseArray: <array expression> }

----------------------------------------

TITLE: Creating and Using Case-Insensitive Index Example - MongoDB JavaScript
DESCRIPTION: Complete example showing creation of a collection, adding a case-insensitive index, inserting test data, and performing queries with different collation settings.

LANGUAGE: javascript
CODE:
db.createCollection("fruit")

db.fruit.createIndex(
   { type: 1 },
   { collation: { locale: 'en', strength: 2 } }
)

LANGUAGE: javascript
CODE:
db.fruit.insertMany( [
   { type: "apple" },
   { type: "Apple" },
   { type: "APPLE" }
] )

db.fruit.find( { type: "apple" } ) // does not use index, finds one result

db.fruit.find( { type: "apple" } ).collation( { locale: 'en', strength: 2 } )
// uses the index, finds three results

db.fruit.find( { type: "apple" } ).collation( { locale: 'en', strength: 1 } )
// does not use the index, finds three results

----------------------------------------

TITLE: Using $[] Operator with Negation Query
DESCRIPTION: Demonstrates how to use the $[] operator to update array elements for documents that do not match a specific condition.

LANGUAGE: javascript
CODE:
db.results.updateMany(
   { "grades" : { $ne: 100 } },
   { $inc: { "grades.$[]":  10 } },
)

----------------------------------------

TITLE: Updating Nested Document Fields with $[] Operator
DESCRIPTION: Illustrates how to use the $[] operator with dot notation to update fields in embedded documents within an array.

LANGUAGE: javascript
CODE:
db.students2.updateMany(
   { },
   { $inc: { "grades.$[].std" : -2 } },
)

----------------------------------------

TITLE: Basic findOneAndReplace Syntax
DESCRIPTION: Basic syntax structure for the findOneAndReplace() method showing all available options including writeConcern, projection, sort, and other parameters.

LANGUAGE: javascript
CODE:
db.collection.findOneAndReplace(
   <filter>,
   <replacement>,
   {
     writeConcern: <document>,
     projection: <document>,
     sort: <document>,
     maxTimeMS: <number>,
     upsert: <boolean>,
     returnDocument: <string>,
     returnNewDocument: <boolean>,
     collation: <document>
   }
)

----------------------------------------

TITLE: Inserting Tree Structure Data in MongoDB
DESCRIPTION: This snippet demonstrates how to insert multiple documents representing a tree structure into a MongoDB collection. Each document contains an _id field and a children array holding references to child nodes.

LANGUAGE: javascript
CODE:
db.categories.insertMany( [
   { _id: "MongoDB", children: [] },
   { _id: "dbm", children: [] },
   { _id: "Databases", children: [ "MongoDB", "dbm" ] },
   { _id: "Languages", children: [] },
   { _id: "Programming", children: [ "Databases", "Languages" ] },
   { _id: "Books", children: [ "Programming" ] }
] )

----------------------------------------

TITLE: Executing Compact Structured Encryption Data Method in MongoDB
DESCRIPTION: This method provides a wrapper around the compactStructuredEncryptionData command. It only works on connections with automatic encryption enabled and returns a failure or success object.

LANGUAGE: javascript
CODE:
db.collection.compactStructuredEncryptionData()

----------------------------------------

TITLE: Using $bucket with $match in MongoDB Aggregation
DESCRIPTION: Demonstrates using $bucket to group artists by birth year, then applying $match to filter results. The example groups artists into buckets by year_born and filters buckets with more than 3 documents.

LANGUAGE: javascript
CODE:
db.artists.aggregate( [
  // First Stage
  {
    $bucket: { 
      groupBy: "$year_born",                        // Field to group by
      boundaries: [ 1840, 1850, 1860, 1870, 1880 ], // Boundaries for the buckets
      default: "Other",                             // Bucket ID for documents which do not fall into a bucket
      output: {                                     // Output for each bucket
        "count": { $sum: 1 },
        "artists" : 
          { 
            $push: { 
              "name": { $concat: [ "$first_name", " ", "$last_name"] }, 
              "year_born": "$year_born"
            } 
          }
      }
    }
  },
  // Second Stage
  {
    $match: { count: {$gt: 3} }
  }
] )

----------------------------------------

TITLE: Validating MongoDB Collection with Optional Parameters
DESCRIPTION: Syntax for the db.collection.validate() method, showing optional parameters for full validation, repair, and BSON conformance checking.

LANGUAGE: javascript
CODE:
db.collection.validate( { 
   full: <boolean>,  // Optional
   repair: <boolean>,  // Optional, added in MongoDB 5.0
   checkBSONConformance: <boolean>  // Optional, added in MongoDB 6.2
} )

----------------------------------------

TITLE: Creating Index Using MongoDB Shell
DESCRIPTION: Creates an index in MongoDB using the mongosh shell command. Accepts key and index type specification along with optional parameters.

LANGUAGE: javascript
CODE:
db.collection.createIndex( <key and index type specification>, <options> )

----------------------------------------

TITLE: Configuring GCP KMS Provider for MongoDB Encryption in Go
DESCRIPTION: This code configures the GCP KMS provider for MongoDB Client-Side Field Level Encryption in Go. It includes the GCP project ID and the path to the service account key file.

LANGUAGE: go
CODE:
kmsProviders := map[string]map[string]interface{}{
    "gcp": {
        "email":      "my-email@my-project.iam.gserviceaccount.com",
        "privateKey": "-----BEGIN PRIVATE KEY-----\n<your GCP service account private key>\n-----END PRIVATE KEY-----\n",
    },
}

----------------------------------------

TITLE: Aggregation with Collation Option in MongoDB
DESCRIPTION: An example of an aggregation operation that includes a collation option for language-specific string comparison.

LANGUAGE: javascript
CODE:
db.myColl.aggregate(
   [ { $match: { status: "A" } }, { $group: { _id: "$category", count: { $sum: 1 } } } ],
   { collation: { locale: "fr", strength: 1 } }
);

----------------------------------------

TITLE: Unordered Execution of Operations with bulkWrite() in MongoDB
DESCRIPTION: Shows how to execute bulkWrite() operations in an unordered fashion by setting the ordered option to false.

LANGUAGE: javascript
CODE:
db.collection.bulkWrite(
   [
      { insertOne : <document> },
      { updateOne : <document> },
      { updateMany : <document> },
      { replaceOne : <document> },
      { deleteOne : <document> },
      { deleteMany : <document> }
   ],
   { ordered : false }
)

----------------------------------------

TITLE: Creating CMK in Node.js
DESCRIPTION: Code to generate a 96-byte Customer Master Key and save it to master-key.txt using Node.js

LANGUAGE: javascript
CODE:
const fs = require('fs');
const crypto = require('crypto');

const key = crypto.randomBytes(96);
fs.writeFileSync('master-key.txt', key);

----------------------------------------

TITLE: Starting mongod Process with Custom Data Directory
DESCRIPTION: Starts a MongoDB server with a custom data directory specified using the --dbpath option.

LANGUAGE: bash
CODE:
mongod --dbpath /srv/mongodb/

----------------------------------------

TITLE: Inserting Document in MongoDB using JavaScript Shell
DESCRIPTION: This snippet demonstrates how to insert a single document into the 'inventory' collection using the MongoDB shell. It inserts a document with item details including quantity, tags, and size.

LANGUAGE: javascript
CODE:
db.inventory.insertOne(
   { item: "canvas", qty: 100, tags: ["cotton"], size: { h: 28, w: 35.5, uom: "cm" } }
)

----------------------------------------

TITLE: Price-Based Filtering with MongoDB $filter
DESCRIPTION: Filters items array to include only documents with price greater than or equal to 100 using $filter and $project stages.

LANGUAGE: javascript
CODE:
db.sales.aggregate( [
   {
      $project: {
         items: {
            $filter: {
               input: "$items", 
               as: "item", 
               cond: { $gte: [ "$$item.price", 100 ] } 
            }
         }
      }
   }
] )

----------------------------------------

TITLE: Using Multiple $addFields Stages with Score Calculations
DESCRIPTION: Shows how to use multiple $addFields stages to calculate total scores from homework and quiz arrays.

LANGUAGE: javascript
CODE:
db.scores.aggregate( [
      {
        $addFields: {
          totalHomework: { $sum: "$homework" } ,
          totalQuiz: { $sum: "$quiz" }
        }
      },
      {
        $addFields: { totalScore: 
          { $add: [ "$totalHomework", "$totalQuiz", "$extraCredit" ] } }
      }
   ] )

----------------------------------------

TITLE: $addToSet with $group Stage Example
DESCRIPTION: Demonstrates using $addToSet within a $group stage to get unique items sold grouped by date.

LANGUAGE: javascript
CODE:
db.sales.aggregate([
  {
    $group:
      {
        _id: { day: { $dayOfYear: "$date"}, year: { $year: "$date" } },
        itemsSold: { $addToSet: "$item" }
      }
  }
])

----------------------------------------

TITLE: Inserting Multiple Documents with db.collection.insertMany()
DESCRIPTION: Basic syntax for the insertMany() method, which inserts an array of documents into a collection. It accepts optional parameters for write concern and ordering.

LANGUAGE: javascript
CODE:
db.collection.insertMany(
   [ <document 1> , <document 2>, ... ],
   {
      writeConcern: <document>,
      ordered: <boolean>
   }
)

----------------------------------------

TITLE: Basic getIndexes Method Usage
DESCRIPTION: Basic example of calling getIndexes() on a collection to retrieve index information.

LANGUAGE: javascript
CODE:
db.collection.getIndexes()

----------------------------------------

TITLE: Update Specific Fields Example
DESCRIPTION: Example showing how to update specific fields in a document using update operators

LANGUAGE: javascript
CODE:
db.runCommand(
   {
      update: "members",
      updates: [
         {
           q: { member: "abc123" }, 
           u: { $set: { status: "A" }, $inc: { points: 1 } }
         }
      ],
      ordered: false,
      writeConcern: { w: "majority", wtimeout: 5000 }
   }
)

----------------------------------------

TITLE: Querying Encrypted Documents in MongoDB Shell
DESCRIPTION: This snippet demonstrates how to query for a document with encrypted fields using the MongoDB Shell. It shows queries with both an encrypted client and a non-encrypted client.

LANGUAGE: javascript
CODE:
// start-find
console.log("Finding a document with regular (non-encrypted) client:");
const regularClientResult = await db.encryptedCollection.findOne({ "firstName": "Lily" });
console.log(regularClientResult);

console.log("\nFinding a document with encrypted client:");
const encryptedClientResult = await encryptedClient.db("medicalRecords").collection("patients").findOne({ "firstName": "Lily" });
console.log(encryptedClientResult);
// end-find

----------------------------------------

TITLE: Demonstrating Index Prefixes in MongoDB Compound Indexes
DESCRIPTION: This example illustrates the concept of index prefixes in compound indexes. It shows a compound index on three fields and explains which field combinations can be efficiently queried using this index structure.

LANGUAGE: javascript
CODE:
{ "item": 1, "location": 1, "stock": 1 }

----------------------------------------

TITLE: Querying Encrypted Documents in Node.js with MongoDB Queryable Encryption
DESCRIPTION: This code snippet demonstrates how to query a document with encrypted fields using both a client configured for automatic Queryable Encryption and a standard client in Node.js. It shows the difference in query results when accessing encrypted data.

LANGUAGE: javascript
CODE:
const result = await collection.findOne({ encryptedField: "123456789" });
console.log("\nRetrieved document with encrypted client:");
console.log(
  await encryptedClient
    .db("test")
    .collection("coll")
    .findOne({ encryptedField: "123456789" })
);
console.log("\nRetrieved document with regular client:");
console.log(
  await regularClient
    .db("test")
    .collection("coll")
    .findOne({ encryptedField: "123456789" })
);

----------------------------------------

TITLE: Querying Array Element by Index Position
DESCRIPTION: Example demonstrating how to query a field in an embedded document at a specific array index using dot notation.

LANGUAGE: mongodb
CODE:
{"instock.0.qty": { "$lte": 20 }}

----------------------------------------

TITLE: Counting Restaurants in a Neighborhood
DESCRIPTION: Finds all restaurants within the user's current neighborhood using $geoWithin

LANGUAGE: javascript
CODE:
var neighborhood = db.neighborhoods.findOne( { geometry: { $geoIntersects: { $geometry: { type: "Point", coordinates: [ -73.93414657, 40.82302903 ] } } } } )
db.restaurants.find( { location: { $geoWithin: { $geometry: neighborhood.geometry } } } ).count()

----------------------------------------

TITLE: Querying Encrypted Documents in Node.js with MongoDB Queryable Encryption
DESCRIPTION: This code snippet demonstrates how to query a document with encrypted fields using both a client configured for automatic Queryable Encryption and a standard client in Node.js. It shows the difference in query results when accessing encrypted data.

LANGUAGE: javascript
CODE:
const result = await collection.findOne({ encryptedField: "123456789" });
console.log("\nRetrieved document with encrypted client:");
console.log(
  await encryptedClient
    .db("test")
    .collection("coll")
    .findOne({ encryptedField: "123456789" })
);
console.log("\nRetrieved document with regular client:");
console.log(
  await regularClient
    .db("test")
    .collection("coll")
    .findOne({ encryptedField: "123456789" })
);

----------------------------------------

TITLE: Modifying Cursor Behavior in MongoDB
DESCRIPTION: Returns documents from the 'bios' collection sorted in ascending order by the name field.

LANGUAGE: javascript
CODE:
db.bios.find().sort( { name: 1 } )

----------------------------------------

TITLE: Deleting All Documents in MongoDB Collection using JavaScript Shell
DESCRIPTION: This snippet demonstrates how to delete all documents from the 'inventory' collection using the MongoDB shell. It uses the deleteMany() method without any filter, which removes all documents in the collection.

LANGUAGE: javascript
CODE:
db.inventory.deleteMany({})

----------------------------------------

TITLE: Finding All Documents in a Collection
DESCRIPTION: Returns all documents from the 'bios' collection with all fields.

LANGUAGE: javascript
CODE:
db.bios.find()

----------------------------------------

TITLE: Shutting Down MongoDB Instance
DESCRIPTION: Switches to the admin database and runs the shutdown command to stop the MongoDB instance.

LANGUAGE: javascript
CODE:
use admin
db.adminCommand( 
   {
      shutdown: 1,
      comment: "Convert to cluster"
   }
)

----------------------------------------

TITLE: Setting Document Expiration for Time Series Collection in MongoDB
DESCRIPTION: Sets the expireAfterSeconds option to automatically delete documents when the value of the timeField is at least that old.

LANGUAGE: javascript
CODE:
{
   expireAfterSeconds: 86400
}

----------------------------------------

TITLE: Performing Full Validation of MongoDB Collection
DESCRIPTION: Example of performing a full validation of a collection named 'myCollection' by specifying full: true.

LANGUAGE: javascript
CODE:
db.myCollection.validate( { full: true } )

----------------------------------------

TITLE: Updating a Single Document in MongoDB Shell
DESCRIPTION: Uses db.collection.updateOne() to update the first document where item equals 'paper' in the inventory collection.

LANGUAGE: javascript
CODE:
db.inventory.updateOne(
   { item: "paper" },
   {
     $set: { "size.uom": "cm", status: "P" },
     $currentDate: { lastModified: true }
   }
)

----------------------------------------

TITLE: Querying a Clustered Collection in MongoDB
DESCRIPTION: Example of querying the 'orders' clustered collection using a range query on the _id field. This query benefits from the clustered index for improved performance.

LANGUAGE: javascript
CODE:
db.orders.find( { _id: { $gt: ISODate( "2022-03-18T12:47:00.000Z" ) } } )

----------------------------------------

TITLE: Document with Randomly Encrypted SSN Field in MongoDB
DESCRIPTION: Example of a document structure where the SSN field is randomly encrypted, demonstrating the need for alternative querying strategies in MongoDB CSFLE.

LANGUAGE: json
CODE:
{
   "_id": "5d6ecdce70401f03b27448fc",
   "name": "Jon Doe",
   "ssn": 241014209,
   "bloodType": "AB+",
   "medicalRecords": [
       {
           "weight": 180,
           "bloodPressure": "120/80"
       }
   ],
   "insurance": {
       "provider": "MaestCare",
       "policyNumber": 123142
   }
}

----------------------------------------

TITLE: Finding Restaurants Within Distance (Unsorted)
DESCRIPTION: Finds restaurants within 5 miles of a point using $geoWithin and $centerSphere

LANGUAGE: javascript
CODE:
db.restaurants.find({ location:
   { $geoWithin:
      { $centerSphere: [ [ -73.93414657, 40.82302903 ], 5 / 3963.2 ] } } })

----------------------------------------

TITLE: Insert Single Document in MongoDB Atlas UI
DESCRIPTION: Example showing how to insert a document array containing product information through the Atlas UI

LANGUAGE: json
CODE:
[
   { "prodId": 100, "price": 20, "quantity": 125 },
   { "prodId": 101, "price": 10, "quantity": 234 },
   { "prodId": 102, "price": 15, "quantity": 432 },
   { "prodId": 103, "price": 17, "quantity": 320 }
]

----------------------------------------

TITLE: Filtering and Sorting by Array Field in MongoDB
DESCRIPTION: Combines $match and $sort stages to filter shoes by size greater than 9 and then sort the results. This example shows how to filter and sort on the same array field.

LANGUAGE: javascript
CODE:
db.shoes.aggregate( [
   {
      $match: { sizes: { $gt: 9 } }
   },
   {
      $sort: { sizes: 1 }
   }
] )

----------------------------------------

TITLE: Initiating MongoDB Replica Set with Configuration
DESCRIPTION: This snippet demonstrates how to use rs.initiate() to initiate a new replica set with three members. It specifies the replica set ID, version, and member configurations including their IDs and hostnames.

LANGUAGE: javascript
CODE:
rs.initiate(
   {
      _id: "myReplSet",
      version: 1,
      members: [
         { _id: 0, host : "mongodb0.example.net:27017" },
         { _id: 1, host : "mongodb1.example.net:27017" },
         { _id: 2, host : "mongodb2.example.net:27017" }
      ]
   }
)

----------------------------------------

TITLE: Concurrent Score Updates with Field Match
DESCRIPTION: Example of two concurrent update operations that modify a score field, demonstrating MongoDB's atomic behavior when the query filter matches the field being updated.

LANGUAGE: javascript
CODE:
// Update A
db.games.updateOne(
   { score: 80 },
   {
      $set: { score: 90 }
   }
)

// Update B
db.games.updateOne(
   { score: 80 },
   {
      $set: { score: 100 }
   }
)

----------------------------------------

TITLE: Generating Data Encryption Key with GCP KMS in C#
DESCRIPTION: This snippet demonstrates how to generate a Data Encryption Key (DEK) using GCP KMS in C#. It uses the previously defined KMS providers and data key options to create the DEK.

LANGUAGE: csharp
CODE:
var dataKeyId = clientEncryption.CreateDataKey("gcp", dataKeyOptions);
var base64DataKeyId = Convert.ToBase64String(dataKeyId.AsBinary.Bytes);
Console.WriteLine($"DataKeyId [base64]: {base64DataKeyId}");

----------------------------------------

TITLE: MongoDB Collection Latency Stats Usage Example
DESCRIPTION: Example of calling latencyStats() with histograms enabled on a collection named 'data'.

LANGUAGE: javascript
CODE:
db.data.latencyStats( { histograms: true } ).pretty()

----------------------------------------

TITLE: Querying Encrypted Documents in Python with MongoDB Queryable Encryption
DESCRIPTION: This code snippet shows how to retrieve a document with encrypted fields using both a client configured for automatic Queryable Encryption and a regular client in Python. It demonstrates the difference in query results when accessing encrypted data.

LANGUAGE: python
CODE:
print("\nRetrieved document with encrypted client:")
print(
    encrypted_client.test.coll.find_one({"encryptedField": "123456789"})
)
print("\nRetrieved document with regular client:")
print(
    regular_client.test.coll.find_one({"encryptedField": "123456789"})
)

----------------------------------------

TITLE: Querying Encrypted Documents in Python with MongoDB Queryable Encryption
DESCRIPTION: This code snippet shows how to retrieve a document with encrypted fields using both a client configured for automatic Queryable Encryption and a regular client in Python. It demonstrates the difference in query results when accessing encrypted data.

LANGUAGE: python
CODE:
print("\nRetrieved document with encrypted client:")
print(
    encrypted_client.test.coll.find_one({"encryptedField": "123456789"})
)
print("\nRetrieved document with regular client:")
print(
    regular_client.test.coll.find_one({"encryptedField": "123456789"})
)

----------------------------------------

TITLE: Complex $jsonSchema Example in MongoDB
DESCRIPTION: Shows a more complex example of $jsonSchema usage, including nested object validation, required fields, and specific property types for name, address, and zipcode fields.

LANGUAGE: javascript
CODE:
{
  $jsonSchema: {
     required: [ "name", "major", "gpa", "address" ],
     properties: {
        name: {
           bsonType: "string",
           description: "must be a string and is required"
        },
        address: {
           bsonType: "object",
           required: [ "zipcode" ],
           properties: {
               "street": { bsonType: "string" },
               "zipcode": { bsonType: "string" } 
           }
        }
     }
  }
}

----------------------------------------

TITLE: Retrieving Search Indexes in MongoDB Atlas
DESCRIPTION: This snippet demonstrates the syntax for using the getSearchIndexes() method. It can be called on a collection object and optionally takes an index name parameter to retrieve information about a specific index.

LANGUAGE: javascript
CODE:
db.<collection>.getSearchIndexes(<indexName>)

----------------------------------------

TITLE: Connecting to a Sharded Cluster
DESCRIPTION: Demonstrates how to connect to a sharded MongoDB cluster. This example includes multiple mongos instances in the connection string with authentication.

LANGUAGE: shell
CODE:
mongodb://myDatabaseUser:D1fficultP%40ssw0rd@router1.example.com:27017,router2.example2.com:27017,router3.example3.com:27017/

----------------------------------------

TITLE: Querying MongoDB with Projection in JavaScript Shell
DESCRIPTION: This snippet shows how to use the find() method with a query filter and projection in the MongoDB shell. It queries for documents with status 'A' and returns only the specified fields.

LANGUAGE: javascript
CODE:
db.inventory.find( { status: "A" }, { item: 1, status: 1, "instock.qty": 1 } )

----------------------------------------

TITLE: Counting Documents with Query in MongoDB Collection
DESCRIPTION: This example shows how to count documents in the 'orders' collection that match a specific query criteria using the deprecated count() method.

LANGUAGE: javascript
CODE:
db.orders.count( { ord_dt: { $gt: new Date('01/01/2012') } } )

----------------------------------------

TITLE: Updating Computed Data in MongoDB using Aggregation
DESCRIPTION: This aggregation pipeline updates the computed data in the 'movies' collection based on the current data in the 'screenings' collection. It groups screenings by movie ID and calculates total viewers and revenue.

LANGUAGE: javascript
CODE:
db.screenings.aggregate( [
   {
      $group: {
         _id: "$movie_id",
         total_viewers: {
            $sum: "$num_viewers"
         },
         total_revenue: {
            $sum: "$revenue"
         }
      }
   },
   {
      $merge: {
         into: { db: "test", coll: "movies" },
         on: "_id",
         whenMatched: "merge"
      }
   }
] )

----------------------------------------

TITLE: Sorting by Array Field in MongoDB Aggregation
DESCRIPTION: Demonstrates sorting documents by an array field 'sizes' in both ascending and descending order. This shows how MongoDB handles sorting on array fields.

LANGUAGE: javascript
CODE:
// Ascending sort
db.shoes.aggregate( [
   {
      $sort: { sizes: 1 }
   }
] )

// Descending sort
db.shoes.aggregate( [
   {
      $sort: { sizes: -1 }
   }
] )

----------------------------------------

TITLE: Update Using Update Operator Expressions
DESCRIPTION: An example of updating a single document using update operator expressions.

LANGUAGE: javascript
CODE:
try {
   db.restaurant.updateOne( 
      { "name" : "Central Perk Cafe" }, 
      { $set: { "violations" : 3 } } 
   );
} catch (e) {
   print(e);
}

----------------------------------------

TITLE: Creating Database for Sharding in MongoDB
DESCRIPTION: Basic syntax for enabling sharding on a database using the enableSharding command. This command must be run on the admin database from a mongos instance.

LANGUAGE: javascript
CODE:
db.adminCommand( 
   { 
     enableSharding: "<database name>"
   } 
)

----------------------------------------

TITLE: Inserting Tree Nodes with Array of Ancestors in MongoDB
DESCRIPTION: This snippet demonstrates how to insert documents representing tree nodes using the Array of Ancestors pattern. Each document contains an _id, an array of ancestors, and a reference to the immediate parent.

LANGUAGE: javascript
CODE:
db.categories.insertMany( [
  { _id: "MongoDB", ancestors: [ "Books", "Programming", "Databases" ], parent: "Databases" },
  { _id: "dbm", ancestors: [ "Books", "Programming", "Databases" ], parent: "Databases" },
  { _id: "Databases", ancestors: [ "Books", "Programming" ], parent: "Programming" },
  { _id: "Languages", ancestors: [ "Books", "Programming" ], parent: "Programming" },
  { _id: "Programming", ancestors: [ "Books" ], parent: "Books" },
  { _id: "Books", ancestors: [ ], parent: null }
] )

----------------------------------------

TITLE: Basic $merge Syntax Example
DESCRIPTION: Basic syntax example showing the structure of a $merge stage with its core options including into, on, whenMatched and whenNotMatched.

LANGUAGE: javascript
CODE:
{ $merge: { into: "myOutput", on: "_id", whenMatched: "replace", whenNotMatched: "insert" } }

----------------------------------------

TITLE: Performing Text Search Query in MongoDB
DESCRIPTION: Demonstrates how to perform a text search query using the $text operator to find documents containing specific text.

LANGUAGE: javascript
CODE:
db.blog.find(
   {
      $text: { $search: "coffee" }
   }
)

----------------------------------------

TITLE: Querying and Sorting the keyTypes Collection in MongoDB
DESCRIPTION: These snippets demonstrate querying and sorting the 'keyTypes' collection using different fields and indexes, showcasing the sorting behavior with various data types.

LANGUAGE: javascript
CODE:
db.keyTypes.find( {}, { _id: 0 } )

LANGUAGE: javascript
CODE:
db.keyTypes.find( {}, { _id: 0 } ).sort( { seqNum: 1} )

LANGUAGE: javascript
CODE:
db.keyTypes.find( {}, { _id: 0 } ).sort( { seqType: 1} )

----------------------------------------

TITLE: MongoDB Document Structure Example
DESCRIPTION: Example documents showing the structure of user records in the gamify database with client and score information.

LANGUAGE: javascript
CODE:
{
  "_id" : ObjectId("56f08c447fe58b2e96f595fa"),
  "client" : "robot",
  "userid" : 123,
  "high_score" : 181,
  ...,
}
{
  "_id" : ObjectId("56f08c447fe58b2e96f595fb"),
  "client" : "fruitos",
  "userid" : 456,
  "high_score" : 210,
  ...,
}

----------------------------------------

TITLE: Creating Wildcard Index
DESCRIPTION: Example demonstrating creation of a wildcard index on a specific field path.

LANGUAGE: javascript
CODE:
db.products_catalog.createIndexes( 
  [ { "product_attributes.$**" : 1 } ] 
)

----------------------------------------

TITLE: Querying Encrypted Documents with CSFLE in Java
DESCRIPTION: This snippet demonstrates how to query a document with encrypted fields using a MongoDB client configured for automatic Client-Side Field Level Encryption (CSFLE) in Java. It also shows querying with a non-CSFLE client for comparison.

LANGUAGE: java
CODE:
// Find the document using a MongoClient configured with CSFLE
Document docWithAutoEncryption = csfleCollection.find(eq("firstName", "Jon")).first();
System.out.println("Document retrieved with CSFLE-enabled client:");
System.out.println(docWithAutoEncryption.toJson());

// Find the document using a MongoClient not configured with CSFLE
Document docWithoutAutoEncryption = standardCollection.find(eq("firstName", "Jon")).first();
System.out.println("Document retrieved without CSFLE-enabled client:");
System.out.println(docWithoutAutoEncryption.toJson());

----------------------------------------

TITLE: Logging Document Structure in MongoDB
DESCRIPTION: This snippet demonstrates the structure of log documents in a MongoDB collection. It shows how log entries for different environments (dev and debug) are stored with timestamps and additional information.

LANGUAGE: javascript
CODE:
{ log: "dev", ts: ..., info: ... }
{ log: "debug", ts: ..., info: ...}

----------------------------------------

TITLE: Explain Find Help Command
DESCRIPTION: Command to show available query modifiers for explain().find().

LANGUAGE: javascript
CODE:
db.collection.explain().find().help()

----------------------------------------

TITLE: Group and Sum by Customer ID in MongoDB
DESCRIPTION: MongoDB aggregation pipeline to group documents by customer ID and sum the 'price' field for each group, equivalent to SQL's GROUP BY and SUM() operations.

LANGUAGE: javascript
CODE:
db.orders.aggregate( [
   {
     $group: {
        _id: "$cust_id",
        total: { $sum: "$price" }
     }
   }
] )

----------------------------------------

TITLE: Querying with $exists and $nin Operators
DESCRIPTION: Example showing how to combine $exists with $nin operator to find documents where a field exists but doesn't match certain values.

LANGUAGE: javascript
CODE:
db.inventory.find( { qty: { $exists: true, $nin: [ 5, 15 ] } } )

----------------------------------------

TITLE: Creating ClientEncryption Instance in Go
DESCRIPTION: This snippet shows how to create a ClientEncryption instance in Go for MongoDB. It includes the necessary configuration options and initialization steps.

LANGUAGE: go
CODE:
clientEncryption, err := mongo.NewClientEncryption(
    client,
    options.ClientEncryption().SetKeyVaultNamespace("encryption.__keyVault").SetKmsProviders(kmsProviders),
)

----------------------------------------

TITLE: Advanced $lookup Syntax with Pipeline
DESCRIPTION: Syntax for performing more complex joins with a pipeline, allowing for multiple join conditions and subqueries.

LANGUAGE: javascript
CODE:
{
   $lookup:
      {
         from: <joined collection>,
         let: { <var_1>: <expression>, …, <var_n>: <expression> },
         pipeline: [ <pipeline to run on joined collection> ],
         as: <output array field>
      }
}

----------------------------------------

TITLE: MongoDB Collection Sample Data
DESCRIPTION: Sample collection data used for demonstrating $match aggregation examples.

LANGUAGE: javascript
CODE:
{ "_id" : ObjectId("512bc95fe835e68f199c8686"), "author" : "dave", "score" : 80, "views" : 100 }
{ "_id" : ObjectId("512bc962e835e68f199c8687"), "author" : "dave", "score" : 85, "views" : 521 }
{ "_id" : ObjectId("55f5a192d4bede9ac365b257"), "author" : "ahn", "score" : 60, "views" : 1000 }
{ "_id" : ObjectId("55f5a192d4bede9ac365b258"), "author" : "li", "score" : 55, "views" : 5000 }
{ "_id" : ObjectId("55f5a1d3d4bede9ac365b259"), "author" : "annT", "score" : 60, "views" : 50 }
{ "_id" : ObjectId("55f5a1d3d4bede9ac365b25a"), "author" : "li", "score" : 94, "views" : 999 }
{ "_id" : ObjectId("55f5a1d3d4bede9ac365b25b"), "author" : "ty", "score" : 95, "views" : 1000 }

----------------------------------------

TITLE: Importing Geospatial Data into MongoDB
DESCRIPTION: Commands to import restaurant and neighborhood datasets into MongoDB collections using mongoimport

LANGUAGE: javascript
CODE:
mongoimport <path to restaurants.json> -c=restaurants
mongoimport <path to neighborhoods.json> -c=neighborhoods

----------------------------------------

TITLE: Connecting to Local Database with Authentication
DESCRIPTION: Demonstrates connecting to a specific database (records) on a local MongoDB instance with authentication. This example includes a username, password, and database name in the connection string.

LANGUAGE: shell
CODE:
mongodb://myDatabaseUser:D1fficultP%40ssw0rd@localhost/records

----------------------------------------

TITLE: C Driver Query Operations
DESCRIPTION: Documentation for performing query operations using mongoc_collection_find_with_opts in the C driver



----------------------------------------

TITLE: Calculating Average Price per Month in MongoDB
DESCRIPTION: This aggregation pipeline groups documents by month and symbol, then calculates the average closing price for each group using $dateTrunc and $group stages.

LANGUAGE: javascript
CODE:
db.dowJonesTickerData.aggregate( [ {
   $group: {
      _id: {
         firstDayOfMonth: {
            $dateTrunc: {
               date: "$date",
               unit: "month"
            }
         },
         symbol: "$symbol"
      },
      avgMonthClose: {
         $avg: "$close"
      }
   }
} ] )

----------------------------------------

TITLE: Basic $unionWith Syntax in MongoDB Aggregation
DESCRIPTION: Demonstrates the basic syntax for the $unionWith stage in a MongoDB aggregation pipeline. It shows how to combine results from another collection, optionally with an additional pipeline.

LANGUAGE: javascript
CODE:
{ $unionWith: { coll: "<collection>", pipeline: [ <stage1>, ... ] } }

LANGUAGE: javascript
CODE:
{ $unionWith: "<collection>" }  // Include all documents from the specified collection

----------------------------------------

TITLE: Querying MongoDB Collection Using GPA Index
DESCRIPTION: Demonstrates queries that can benefit from the GPA index, including exact match and range queries.

LANGUAGE: javascript
CODE:
db.students.find( { gpa: 3.6 } )

db.students.find( { gpa: { $lt: 3.4 } } )

----------------------------------------

TITLE: Updating Multiple Documents with a Condition
DESCRIPTION: An example of updating multiple documents that match a specific condition.

LANGUAGE: javascript
CODE:
try {
   db.restaurant.updateMany( 
      { violations: { $gt: 4 } }, 
      { $set: { "Review" : true } } 
   );
} catch (e) {
   print(e);
}

----------------------------------------

TITLE: Confirming Resolution of Conflicts in MongoDB
DESCRIPTION: This code re-runs the collMod command with 'dryRun: true' to confirm that all conflicts have been resolved and the index can be converted to unique.

LANGUAGE: javascript
CODE:
db.runCommand( {
   collMod: "apples",
   index: {
      keyPattern: { type: 1 },
      unique: true
   },
   dryRun: true
} )

----------------------------------------

TITLE: Basic Syntax for updateMany() Method
DESCRIPTION: The basic syntax for the updateMany() method, showing its parameters and structure.

LANGUAGE: javascript
CODE:
db.collection.updateMany(
   <filter>,
   <update>,
   {
     upsert: <boolean>,
     writeConcern: <document>,
     collation: <document>,
     arrayFilters: [ <filterdocument1>, ... ],
     hint:  <document|string>,
     let: <document>
   }
)

----------------------------------------

TITLE: Querying Array Elements with $elemMatch in MongoDB Shell
DESCRIPTION: Uses the MongoDB shell to query the inventory collection for documents where the instock array contains at least one element with qty=5 and warehouse='A'

LANGUAGE: javascript
CODE:
db.inventory.find( { "instock": { $elemMatch: { qty: 5, warehouse: "A" } } } )

----------------------------------------

TITLE: Querying Array Element with Exact Document Match
DESCRIPTION: Example showing how to query for an exact match of a document within the instock array. The query requires an exact match including field order.

LANGUAGE: mongodb
CODE:
{"instock": { "warehouse": "A", "qty": 5 }}

----------------------------------------

TITLE: Remove Elements from Array of Documents
DESCRIPTION: Shows how to remove elements from an array of documents based on multiple field conditions.

LANGUAGE: javascript
CODE:
db.survey.updateMany(
  { },
  { $pull: { results: { score: 8 , item: "B" } } }
)

----------------------------------------

TITLE: Geospatial Aggregation with $geoNear
DESCRIPTION: Aggregation pipeline using $geoNear to find parks near a specific location, calculating distances and applying category filters.

LANGUAGE: javascript
CODE:
db.places.aggregate( [
   {
      $geoNear: {
         near: { type: "Point", coordinates: [ -73.9667, 40.78 ] },
         spherical: true,
         query: { category: "Parks" },
         distanceField: "calcDistance"
      }
   }
] )

----------------------------------------

TITLE: Implementing $redact in MongoDB Aggregation Pipeline
DESCRIPTION: This snippet demonstrates how to use the $redact operator in a MongoDB aggregation pipeline to filter documents based on user access levels. It uses $map, $setIsSubset, and $anyElementTrue to determine which parts of the document should be visible to the user.

LANGUAGE: javascript
CODE:
var userAccess = [ "FDW", "TGE" ];
db.forecasts.aggregate(
   [
     { $match: { year: 2014 } },
     { $redact:
         {
           $cond: {
                    if: { $anyElementTrue:
                           {
                             $map: {
                                     input: "$tags" ,
                                     as: "fieldTag",
                                     in: { $setIsSubset: [ "$$fieldTag", userAccess ] }
                                   }
                           }
                        },
                     then: "$$DESCEND",
                     else: "$$PRUNE"
                  }
         }
     }
   ]
)

----------------------------------------

TITLE: Adding Arbiter to Replica Set
DESCRIPTION: JavaScript command to add the arbiter to the existing replica set using rs.addArb(). This command must be run on the primary node of the replica set.

LANGUAGE: javascript
CODE:
rs.addArb("m1.example.net:27017")

----------------------------------------

TITLE: Creating Text Index on Multiple Fields in MongoDB using JavaScript
DESCRIPTION: This code snippet demonstrates how to create a text index on multiple fields in a MongoDB collection. The createIndex method is used on a specific collection, with an object specifying the fields to be indexed as "text".

LANGUAGE: javascript
CODE:
db.<collection>.createIndex(
   {
      <field1>: "text",
      <field2>: "text",
      ...
   }
)

----------------------------------------

TITLE: Inserting Multiple Documents using MongoDB Shell
DESCRIPTION: Example of using insertMany() to add multiple inventory items with nested size objects to a MongoDB collection. Each document contains item details including quantity, dimensions (height and width) with units of measure, and status.

LANGUAGE: javascript
CODE:
db.inventory.insertMany( [
   { item: "canvas", qty: 100, size: { h: 28, w: 35.5, uom: "cm" }, status: "A" },
   { item: "journal", qty: 25, size: { h: 14, w: 21, uom: "cm" }, status: "A" },
   { item: "mat", qty: 85, size: { h: 27.9, w: 35.5, uom: "cm" }, status: "A" },
   { item: "mousepad", qty: 25, size: { h: 19, w: 22.85, uom: "cm" }, status: "P" },
   { item: "notebook", qty: 50, size: { h: 8.5, w: 11, uom: "in" }, status: "P" },
   { item: "paper", qty: 100, size: { h: 8.5, w: 11, uom: "in" }, status: "D" },
   { item: "planner", qty: 75, size: { h: 22.85, w: 30, uom: "cm" }, status: "D" },
   { item: "postcard", qty: 45, size: { h: 10, w: 15.25, uom: "cm" }, status: "A" },
   { item: "sketchbook", qty: 80, size: { h: 14, w: 21, uom: "cm" }, status: "A" },
   { item: "sketch pad", qty: 95, size: { h: 22.85, w: 30.5, uom: "cm" }, status: "A" }
] );

----------------------------------------

TITLE: Defining findAndModify Method in MongoDB
DESCRIPTION: Syntax for the db.collection.findAndModify() method, showing the structure of the document parameter with various fields like query, sort, remove, update, etc.

LANGUAGE: javascript
CODE:
db.collection.findAndModify({
    query: <document>,
    sort: <document>,
    remove: <boolean>,
    update: <document or aggregation pipeline>,
    new: <boolean>,
    fields: <document>,
    upsert: <boolean>,
    bypassDocumentValidation: <boolean>,
    writeConcern: <document>,
    maxTimeMS: <integer>,
    collation: <document>,
    arrayFilters: [ <filterdocument1>, ... ],
    let: <document> // Added in MongoDB 5.0
});

----------------------------------------

TITLE: Inserting Sample Data into MongoDB Collection
DESCRIPTION: Inserts sample order data into a MongoDB collection named 'orders' for use in aggregation examples.

LANGUAGE: javascript
CODE:
db.orders.insertMany( [
   { _id: 1, cust_id: "abc1", ord_date: ISODate("2012-11-02T17:04:11.102Z"), status: "A", amount: 50 },
   { _id: 2, cust_id: "xyz1", ord_date: ISODate("2013-10-01T17:04:11.102Z"), status: "A", amount: 100 },
   { _id: 3, cust_id: "xyz1", ord_date: ISODate("2013-10-12T17:04:11.102Z"), status: "D", amount: 25 },
   { _id: 4, cust_id: "xyz1", ord_date: ISODate("2013-10-11T17:04:11.102Z"), status: "D", amount: 125 },
   { _id: 5, cust_id: "abc1", ord_date: ISODate("2013-11-12T17:04:11.102Z"), status: "A", amount: 25 }
] )

----------------------------------------

TITLE: Update with Aggregation Pipeline Example
DESCRIPTION: Example using an aggregation pipeline to perform more complex document updates

LANGUAGE: javascript
CODE:
db.runCommand(
   {
      update: "members",
      updates: [
         { 
           q: { },  
           u: [ 
              { $set: { status: "Modified", comments: [ "$misc1", "$misc2" ] } },
              { $unset: [ "misc1", "misc2" ] }
           ], 
           multi: true
         }
      ],
      ordered: false,
      writeConcern: { w: "majority", wtimeout: 5000 }
   }
)

----------------------------------------

TITLE: Connecting with Read Preference Options
DESCRIPTION: Example connection string specifying secondary read preference with max staleness of 120 seconds.

LANGUAGE: none
CODE:
mongodb://myDatabaseUser:D1fficultP%40ssw0rd@db0.example.com,db1.example.com,db2.example.com/?replicaSet=myRepl&readPreference=secondary&maxStalenessSeconds=120

----------------------------------------

TITLE: MongoDB Connection String for Various Drivers
DESCRIPTION: This snippet shows the basic MongoDB connection string format used across multiple programming languages and drivers. It connects to a local MongoDB instance.

LANGUAGE: bash
CODE:
mongodb://localhost

----------------------------------------

TITLE: Executing MongoDB Explain Command in JavaScript
DESCRIPTION: Basic syntax for running the explain command in MongoDB. The command takes an operation to explain, verbosity level, and an optional comment.

LANGUAGE: javascript
CODE:
db.runCommand(
   {
     explain: <command>,
     verbosity: <string>,
     comment: <any>
   }
)

----------------------------------------

TITLE: Performing updateMany with Complex $set Operations in MongoDB
DESCRIPTION: This example demonstrates updateMany using $set to calculate average grades and assign letter grades based on the average.

LANGUAGE: javascript
CODE:
db.students3.updateMany(
   { },
   [
     { $set: { average : { $trunc: [ { $avg: "$tests" }, 0 ] }, modified: "$$NOW" } },
     { $set: { grade: { $switch: {
                           branches: [
                               { case: { $gte: [ "$average", 90 ] }, then: "A" },
                               { case: { $gte: [ "$average", 80 ] }, then: "B" },
                               { case: { $gte: [ "$average", 70 ] }, then: "C" },
                               { case: { $gte: [ "$average", 60 ] }, then: "D" }
                           ],
                           default: "F"
     } } } }
   ]
)

----------------------------------------

TITLE: Sort and Match Stage Optimization Example
DESCRIPTION: Shows how MongoDB optimizes a pipeline containing $sort followed by $match by reordering the stages to perform filtering before sorting.

LANGUAGE: javascript
CODE:
{ $sort: { age : -1 } },
{ $match: { status: 'A' } }

----------------------------------------

TITLE: Querying with Linearizable Read Concern in MongoDB JavaScript
DESCRIPTION: Demonstrates how to use the linearizable read concern with maxTimeMS in a MongoDB query. This ensures the operation doesn't block indefinitely if a majority of data-bearing members are unavailable.

LANGUAGE: javascript
CODE:
db.restaurants.find( { _id: 5 } ).readConcern("linearizable").maxTimeMS(10000)

LANGUAGE: javascript
CODE:
db.runCommand( {
     find: "restaurants",
     filter: { _id: 5 },
     readConcern: { level: "linearizable" },
     maxTimeMS: 10000
} )

----------------------------------------

TITLE: Basic Encryption Schema with encrypt Keyword
DESCRIPTION: Example showing the structure of an encryption rule using the encrypt keyword to define encryption for a single field.

LANGUAGE: json
CODE:
{
  "encrypt": {
    "keyId": [],
    "bsonType": "string",
    "algorithm": "AEAD_AES_256_CBC_HMAC_SHA_512_Deterministic"
  }
}

----------------------------------------

TITLE: Stopping the Balancer in MongoDB Sharded Cluster
DESCRIPTION: The sh.stopBalancer() method disables the balancer in a MongoDB sharded cluster. It can take optional timeout and interval parameters to control the stopping process. This method must be run on a mongos instance.

LANGUAGE: javascript
CODE:
sh.stopBalancer(timeout, interval)

----------------------------------------

TITLE: Creating Index Using Python PyMongo
DESCRIPTION: Creates an index using the PyMongo driver's Collection.create_index() method. Takes a list of key and index specifications plus optional parameters.

LANGUAGE: python
CODE:
db.collection.create_index([(<key and index type specification>)], <options> )

----------------------------------------

TITLE: Inserting Geospatial Documents into MongoDB Collection
DESCRIPTION: This snippet demonstrates how to insert multiple documents containing geospatial data into a MongoDB collection named 'places'. Each document includes a name, location (as a GeoJSON Point), and category.

LANGUAGE: javascript
CODE:
db.places.insertMany( [
   {
      name: "Central Park",
      location: { type: "Point", coordinates: [ -73.97, 40.77 ] },
      category: "Parks"
   },
   {
      name: "Sara D. Roosevelt Park",
      location: { type: "Point", coordinates: [ -73.9928, 40.7193 ] },
      category: "Parks"
   },
   {
      name: "Polo Grounds",
      location: { type: "Point", coordinates: [ -73.9375, 40.8303 ] },
      category: "Stadiums"
   }
] )

----------------------------------------

TITLE: Syntax for MongoDB $rename Operator
DESCRIPTION: Demonstrates the basic syntax for using the $rename operator in MongoDB to rename one or more fields in a document.

LANGUAGE: javascript
CODE:
{ $rename: { <field1>: <newName1>, <field2>: <newName2>, ... } }

----------------------------------------

TITLE: Running Aggregations on Time Series Collection in MongoDB
DESCRIPTION: Performs an aggregation pipeline on the 'weather' collection to group documents by date and calculate the average temperature for each day.

LANGUAGE: javascript
CODE:
db.weather.aggregate( [
   {
      $project: {
         date: {
            $dateToParts: { date: "$timestamp" }
         },
         temp: 1
      }
   },
   {
      $group: {
         _id: {
            date: {
               year: "$date.year",
               month: "$date.month",
               day: "$date.day"
            }
         },
         avgTmp: { $avg: "$temp" }
      }
   }
] )

----------------------------------------

TITLE: Starting mongod Process with Default Settings
DESCRIPTION: Starts a MongoDB server using default settings, listening on port 27017 and storing data in /data/db.

LANGUAGE: bash
CODE:
mongod

----------------------------------------

TITLE: Inserting Documents with Unique Compound Multikey Index in MongoDB
DESCRIPTION: Inserts multiple documents into a collection with a unique compound multikey index, demonstrating how uniqueness is enforced for combinations of values.

LANGUAGE: javascript
CODE:
db.collection.insertMany( [
   { _id: 2, a: [ { loc: "A" }, { qty: 5 } ] },
   { _id: 3, a: [ { loc: "A", qty: 10 } ] }
] )

----------------------------------------

TITLE: Sharding and Distributing a Collection with Options in MongoDB
DESCRIPTION: This example shows how to shard and redistribute the 'contacts' collection in the 'phonebook' database using a hashed shard key on the 'last_name' field, with 5 initial chunks and simple collation.

LANGUAGE: javascript
CODE:
sh.shardAndDistributeCollection(
  "phonebook.contacts",
  { last_name: "hashed" },
  false,
  {
    numInitialChunks: 5,
    collation: { locale: "simple" }
  }
)

----------------------------------------

TITLE: Creating Index for Timestamp in MongoDB
DESCRIPTION: This example shows how to create an index on the 'timestamp' field in a 'posts' collection to optimize queries that sort by timestamp.

LANGUAGE: javascript
CODE:
db.posts.createIndex( { timestamp : 1 } )

----------------------------------------

TITLE: Defining findOneAndUpdate() Method in MongoDB
DESCRIPTION: Defines the findOneAndUpdate() method syntax with filter, update, and options parameters.

LANGUAGE: javascript
CODE:
db.collection.findOneAndUpdate(
    <filter>,
    <update document or aggregation pipeline>,
    {
      writeConcern: <document>,
      projection: <document>,
      sort: <document>,
      maxTimeMS: <number>,
      upsert: <boolean>,
      returnDocument: <string>,
      returnNewDocument: <boolean>,
      collation: <document>,
      arrayFilters: [ <filterdocument1>, ... ]
    }
)

----------------------------------------

TITLE: Configuring a Simple 3-Member Replica Set in MongoDB
DESCRIPTION: This example demonstrates how to create a configuration document for a simple 3-member replica set. The document specifies the set name and the host information for each member.

LANGUAGE: javascript
CODE:
{
    _id : <setname>,
     members : [
         {_id : 0, host : <host0>},
         {_id : 1, host : <host1>},
         {_id : 2, host : <host2>},
     ]
}

----------------------------------------

TITLE: Updating Fields and Adding Timestamp in MongoDB
DESCRIPTION: This snippet demonstrates how to use the $set operator to update specific field values and the $currentDate operator to update or create a timestamp field in MongoDB. It modifies the 'size.uom' and 'status' fields, and updates or creates the 'lastModified' field with the current date.

LANGUAGE: mongodb
CODE:
{
  $set: {
    "size.uom": "in",
    "status": "P"
  },
  $currentDate: { lastModified: true }
}

----------------------------------------

TITLE: MongoDB Platform Support Table in RST
DESCRIPTION: RST markup defining tables that document MongoDB platform support status and EOL notices for Docker containers on RHEL and Ubuntu platforms.

LANGUAGE: rst
CODE:
.. note:: Platform Support EOL Notice

   .. list-table::
      :widths: 40 60
      :class: border-table

      * - RHEL 7 UBI on Docker
        - Support removed in MongoDB 5.0+.

      * - Ubuntu 16.04 on Docker
        - Support removed in MongoDB 5.0+.

   |

.. list-table::
   :header-rows: 1
   :stub-columns: 1
   :class: compatibility
   :widths: 40 30 30

   * - Platform
     - 5.0 Community & Enterprise
     - 4.4 Community & Enterprise

   * - RHEL :abbr:`UBI (Universal Base Image)` 8 on Docker 19.03+
     - |checkmark|
     -

   * - RHEL :abbr:`UBI (Universal Base Image)` 7 on Docker 19.03+
     -
     - |checkmark|

   * - Ubuntu 18.04 on Docker 19.03+
     - |checkmark|
     -

   * - Ubuntu 16.04 on Docker 19.03+
     -
     - |checkmark|

----------------------------------------

TITLE: Filtering and Grouping Pizza Orders with MongoDB Aggregation Pipeline
DESCRIPTION: This aggregation pipeline filters pizza orders by size and groups them by name to calculate total quantities. It uses $match to filter for medium pizzas and $group to sum quantities for each pizza name.

LANGUAGE: javascript
CODE:
db.orders.aggregate( [

   // Stage 1: Filter pizza order documents by pizza size
   {
      $match: { size: "medium" }
   },

   // Stage 2: Group remaining documents by pizza name and calculate total quantity
   {
      $group: { _id: "$name", totalQuantity: { $sum: "$quantity" } }
   }

] )

----------------------------------------

TITLE: Creating GridFS Files Index in MongoDB
DESCRIPTION: Command to create an index on the files collection using filename and uploadDate fields for efficient file retrieval.

LANGUAGE: javascript
CODE:
db.fs.files.createIndex( { filename: 1, uploadDate: 1 } );

----------------------------------------

TITLE: Comprehensive MongoDB $switch Aggregation Example
DESCRIPTION: Complete example showing how to use $switch in an aggregation pipeline to categorize students based on their average scores.

LANGUAGE: javascript
CODE:
db.grades.aggregate( [
  {
    $project: 
      {
        "name" : 1,
        "summary" : 
        {
          $switch:
            {
              branches: [
                {
                  case: { $gte : [ { $avg : "$scores" }, 90 ] },
                  then: "Doing great!"
                },
                {
                  case: { $and : [ { $gte : [ { $avg : "$scores" }, 80 ] }, 
                                   { $lt : [ { $avg : "$scores" }, 90 ] } ] },
                  then: "Doing pretty well."
                },
                {
                  case: { $lt : [ { $avg : "$scores" }, 80 ] },
                  then: "Needs improvement."
                }
              ],
              default: "No scores found."
            }
         }
      }
   }
] )

LANGUAGE: javascript
CODE:
{ "_id" : 1, "name" : "Susan Wilkes", "summary" : "Doing pretty well." }
{ "_id" : 2, "name" : "Bob Hanna", "summary" : "Needs improvement." }
{ "_id" : 3, "name" : "James Torrelio", "summary" : "Doing great!" }

----------------------------------------

TITLE: Querying Encrypted Documents with Python
DESCRIPTION: This Python snippet demonstrates how to query encrypted documents using both a Queryable Encryption-enabled client and a standard client. It showcases the difference in results when querying encrypted fields.

LANGUAGE: python
CODE:
start-find
# Query for the document with a QE-enabled client
qe_result = encrypted_collection.find_one({"encryptedField": "123456789"})
print("Document retrieved with QE-enabled client:")
print(json.dumps(qe_result, indent=2))

# Query for the document with a standard client
standard_result = standard_collection.find_one({"encryptedField": "123456789"})
print("\nDocument retrieved with standard client:")
print(json.dumps(standard_result, indent=2))
end-find

----------------------------------------

TITLE: Inserting Sample Data for cursor.max() Examples in MongoDB
DESCRIPTION: Inserts sample documents into a 'products' collection to demonstrate the use of cursor.max(). The documents include various fruits with different types and prices.

LANGUAGE: javascript
CODE:
db.products.insertMany([
   { "_id" : 1, "item" : "apple", "type" : "honey crisp", "price" : NumberDecimal("1.99") },
   { "_id" : 2, "item" : "apple", "type" : "fuji", "price" : NumberDecimal("1.99") },
   { "_id" : 3, "item" : "apple", "type" : "jonagold", "price" : NumberDecimal("1.29") },
   { "_id" : 4, "item" : "apple", "type" : "jonathan", "price" : NumberDecimal("1.29") },
   { "_id" : 5, "item" : "apple", "type" : "mcintosh", "price" : NumberDecimal("1.29") },
   { "_id" : 6, "item" : "apple", "type" : "cortland", "price" : NumberDecimal("1.29") },
   { "_id" : 7, "item" : "orange", "type" : "cara cara", "price" : NumberDecimal("2.99") },
   { "_id" : 9, "item" : "orange", "type" : "satsuma", "price" : NumberDecimal("1.99") },
   { "_id" : 8, "item" : "orange", "type" : "valencia", "price" : NumberDecimal("0.99") },
   { "_id" : 10, "item" : "orange", "type" : "navel", "price" : NumberDecimal("1.39") }
])

----------------------------------------

TITLE: Querying MongoDB Collection in Python
DESCRIPTION: This snippet demonstrates how to query a MongoDB collection using the Python driver. The actual code is not provided in the excerpt, but it references an external file containing the implementation.

LANGUAGE: python
CODE:
# Code is referenced from an external file: /driver-examples/test_examples.py

----------------------------------------

TITLE: Reading Causally Consistent Data in MongoDB with Python
DESCRIPTION: This code snippet shows how to read causally consistent data in MongoDB by advancing the cluster time and operation time of a session to match another session. It ensures that the client reads data after specific write operations have been performed.

LANGUAGE: python
CODE:
with client.start_session(causal_consistency=True) as session2:
    # Advance cluster time
    session2.advance_cluster_time(session.cluster_time)
    # Advance operation time
    session2.advance_operation_time(session.operation_time)

    collection = client.get_database("test").get_collection("items")
    
    # Read all current SKUs
    results = collection.find({"end": None}, session=session2)
    for doc in results:
        print(doc)

----------------------------------------

TITLE: Creating 2dsphere Index in MongoDB using JavaScript
DESCRIPTION: This snippet demonstrates how to create a 2dsphere index on the 'loc' field of the 'places' collection in MongoDB. The 2dsphere index is used for geospatial queries on GeoJSON objects or legacy coordinate pairs.

LANGUAGE: javascript
CODE:
db.places.createIndex( { loc : "2dsphere" } )

----------------------------------------

TITLE: Assigning Tag Range for Persisted Shards in MongoDB (JavaScript)
DESCRIPTION: JavaScript command to assign a tag range for persisted shards in MongoDB. This assigns the 'persisted' tag to the entire chunk range of a collection.

LANGUAGE: javascript
CODE:
sh.addTagRange("salesdb.orders", { shardKey: MinKey }, { shardKey: MaxKey }, "persisted")

----------------------------------------

TITLE: Insert Single Document with Java Async
DESCRIPTION: Example showing how to insert a single document with product details using the Java Reactive Streams Driver

LANGUAGE: json
CODE:
{ item: "canvas", qty: 100, tags: ["cotton"], size: { h: 28, w: 35.5, uom: "cm" } }

----------------------------------------

TITLE: Manually Iterating a MongoDB Cursor in JavaScript
DESCRIPTION: This snippet demonstrates how to manually iterate a cursor returned by a MongoDB query using the next() method and a while loop.

LANGUAGE: javascript
CODE:
var myCursor = db.users.find( { type: 2 } );

while (myCursor.hasNext()) {
   print(tojson(myCursor.next()));
}

----------------------------------------

TITLE: Updating Shard Key Value Using updateOne() in MongoDB
DESCRIPTION: This snippet demonstrates how to update a shard key value for a document in a sharded collection named 'sales'. It updates the 'location' field, which is the shard key, from an empty string to 'New York' for a document with a specific _id.

LANGUAGE: javascript
CODE:
db.sales.updateOne(
  { _id: 12345, location: "" },
  { $set: { location: "New York"} }
)

----------------------------------------

TITLE: MongoDB $sample Aggregation Example
DESCRIPTION: Example demonstrating how to use the $sample operator to randomly select 3 documents from a collection.

LANGUAGE: javascript
CODE:
db.users.aggregate(
   [ { $sample: { size: 3 } } ]
)

----------------------------------------

TITLE: Disabling the Balancer in MongoDB Sharded Cluster
DESCRIPTION: This snippet shows how to disable the balancer in a MongoDB sharded cluster to stop chunk migration. It connects to a mongos instance and uses the sh.stopBalancer() command.

LANGUAGE: javascript
CODE:
sh.stopBalancer()

----------------------------------------

TITLE: Initiating MongoDB Replica Set Configuration
DESCRIPTION: This JavaScript code creates a replica set configuration object and initiates the replica set using rs.initiate().

LANGUAGE: javascript
CODE:
rsconf = {
  _id: "rs0",
  members: [
    {
     _id: 0,
     host: "<hostname>:27017"
    },
    {
     _id: 1,
     host: "<hostname>:27018"
    },
    {
     _id: 2,
     host: "<hostname>:27019"
    }
   ]
}

rs.initiate( rsconf )

----------------------------------------

TITLE: Querying MongoDB Collection With Index
DESCRIPTION: Demonstrates the same query on the 'quantity' field after creating an index and analyzes performance improvements.

LANGUAGE: javascript
CODE:
db.inventory.find(
   { quantity: { $gte: 100, $lte: 200 } }
).explain("executionStats")

----------------------------------------

TITLE: Analyzing MongoDB Plan Cache
DESCRIPTION: The $planCacheStats aggregation stage returns information about cached query plans.

LANGUAGE: mongodb
CODE:
$planCacheStats

----------------------------------------

TITLE: Basic MongoDB FindOne Syntax
DESCRIPTION: Basic syntax structure for the findOne() method showing the query, projection, and options parameters.

LANGUAGE: javascript
CODE:
db.collection.findOne( <query>, <projection>, <options> )

----------------------------------------

TITLE: MongoDB FindOne with Field Projection
DESCRIPTION: Query demonstrating field projection to return specific fields from the matching document.

LANGUAGE: javascript
CODE:
db.bios.findOne(
    { },
    { name: 1, contribs: 1 }
)

----------------------------------------

TITLE: Executing a Transaction with mongosh
DESCRIPTION: This example shows how to use mongosh to start a transaction, perform operations, and commit or abort the transaction. It demonstrates basic transaction flow without incorporating retry logic.

LANGUAGE: javascript
CODE:
session = db.getMongo().startSession( { readPreference: { mode: "primary" } } );

coll1 = session.getDatabase("mydb1").foo;
coll2 = session.getDatabase("mydb2").bar;

session.startTransaction( { readConcern: { level: "local" }, writeConcern: { w: "majority" } } );

try {
    coll1.insertOne( { abc: 1 } );
    coll2.insertOne( { xyz: 999 } );
} catch (error) {
    session.abortTransaction();
    throw error;
}

session.commitTransaction();

session.endSession();

----------------------------------------

TITLE: Configuring MongoDB Sharded Cluster with YAML
DESCRIPTION: YAML configuration for mongos router specifying the config server replica set connection and network binding settings.

LANGUAGE: yaml
CODE:
sharding:
  configDB: <configReplSetName>/cfg1.example.net:27019,cfg2.example.net:27019
net:
  bindIp: localhost,<hostname(s)|ip address(es)>

----------------------------------------

TITLE: Creating User with SCRAM-SHA-256 Credentials Only in MongoDB
DESCRIPTION: This example shows how to create a user with only SCRAM-SHA-256 credentials, which requires featureCompatibilityVersion to be set to 4.0.

LANGUAGE: javascript
CODE:
use reporting
db.createUser(
   {
     user: "reportUser256",
     pwd: passwordPrompt(),   // Or  "<cleartext password>"
     roles: [ { role: "readWrite", db: "reporting" } ],
     mechanisms: [ "SCRAM-SHA-256" ]
   }
)

----------------------------------------

TITLE: Creating a Capped Collection with Maximum Size in MongoDB
DESCRIPTION: This snippet demonstrates how to create a capped collection named 'log' with a maximum size of 100,000 bytes using the db.createCollection() method.

LANGUAGE: javascript
CODE:
db.createCollection( "log", { capped: true, size: 100000 } )

----------------------------------------

TITLE: Creating Index on Ancestors Array in MongoDB
DESCRIPTION: This command creates an index on the 'ancestors' field to enable fast searches by ancestor nodes. This is crucial for efficient querying of the tree structure.

LANGUAGE: javascript
CODE:
db.categories.createIndex( { ancestors: 1 } )

----------------------------------------

TITLE: Suppressing _id Field in MongoDB Aggregation Output
DESCRIPTION: Shows how to exclude the _id field from the output documents while including other specified fields (title and author).

LANGUAGE: javascript
CODE:
db.books.aggregate( [ { $project : { _id: 0, title : 1 , author : 1 } } ] )

----------------------------------------

TITLE: Connecting to a Replica Set with Read Distribution
DESCRIPTION: Demonstrates connecting to a replica set with read distribution to secondaries. This example includes the readPreference parameter in the connection string.

LANGUAGE: shell
CODE:
mongodb://myDatabaseUser:D1fficultP%40ssw0rd@db1.example.net,db2.example.net,db3.example.net/?replicaSet=myReplicaSet&readPreference=secondary

----------------------------------------

TITLE: Executing a Transaction with Node.js Callback API
DESCRIPTION: This example demonstrates using the Node.js driver's callback API to execute a transaction that inserts documents into two different collections. It includes retry logic for transient errors and unknown commit results.

LANGUAGE: javascript
CODE:
await session.withTransaction(async () => {
    const coll1 = client.db("mydb1").collection("foo");
    const coll2 = client.db("mydb2").collection("bar");
    
    await coll1.insertOne({ abc: 1 }, { session });
    await coll2.insertOne({ xyz: 999 }, { session });
});

----------------------------------------

TITLE: Creating Encrypted MongoDB Client
DESCRIPTION: Establishes an encrypted database connection using the Mongo() constructor with the configured encryption options.

LANGUAGE: javascript
CODE:
encryptedClient = Mongo( 
   "mongodb://myMongo.example.net:27017/?replSetName=myMongo", 
   autoEncryptionOpts
)

----------------------------------------

TITLE: Querying Encrypted Documents in Node.js
DESCRIPTION: This snippet shows how to query for a document with encrypted fields using Node.js. It demonstrates queries with both an encrypted client and a non-encrypted client.

LANGUAGE: javascript
CODE:
// start-find
console.log("Finding a document with regular (non-encrypted) client:");
const regularClientResult = await regularClient
  .db("medicalRecords")
  .collection("patients")
  .findOne({ firstName: "Lily" });
console.log(regularClientResult);

console.log("\nFinding a document with encrypted client:");
const encryptedClientResult = await encryptedClient
  .db("medicalRecords")
  .collection("patients")
  .findOne({ firstName: "Lily" });
console.log(encryptedClientResult);
// end-find

----------------------------------------

TITLE: Creating Text Index in MongoDB
DESCRIPTION: Template for creating a text index on a MongoDB collection. A collection can have only one text index, but it may include multiple fields.

LANGUAGE: mongodb
CODE:
/includes/indexes/code-examples/create-text-index.rst

----------------------------------------

TITLE: Inserting Invalid Document in MongoDB Collection in JavaScript
DESCRIPTION: This snippet shows an attempt to insert a document with an invalid 'country' value into the 'shipping' collection. The operation fails due to schema validation.

LANGUAGE: javascript
CODE:
db.shipping.insertOne( {
   item: "sweater",
   size: "medium",
   country: "Germany"
} )

----------------------------------------

TITLE: Inserting Encrypted Document with CSFLE in Go
DESCRIPTION: This snippet shows how to insert an encrypted document using a CSFLE-enabled MongoClient in Go. It inserts a document into the 'medicalRecords.patients' collection with encrypted fields.

LANGUAGE: go
CODE:
_, err = collection.InsertOne(
    context.TODO(),
    bson.M{
        "name":       "Jon Doe",
        "ssn":        241014209,
        "bloodType":  "AB+",
        "medicalRecords": bson.A{
            bson.M{
                "weight":        180,
                "bloodPressure": "120/80",
            },
        },
        "insurance": bson.M{
            "policyNumber": 123142,
            "provider":     "MaestCare",
        },
    },
)

----------------------------------------

TITLE: Connecting to MongoDB using mongosh
DESCRIPTION: This snippet demonstrates how to connect to a MongoDB cluster using the mongosh shell. It includes authentication, multiple mongos instances, and specifies the API version.

LANGUAGE: bash
CODE:
mongosh "mongodb://mongos0.example.com:27017,mongos1.example.com:27017,mongos2.example.com:27017/?authSource=admin" --apiVersion 1 --username myDatabaseUser

----------------------------------------

TITLE: Cursor Iteration in MongoDB
DESCRIPTION: Demonstrates how to iterate over the cursor returned by find() using the forEach() method.

LANGUAGE: javascript
CODE:
var myCursor = db.bios.find( );

myCursor.forEach(printjson);

----------------------------------------

TITLE: Creating Indexes in MongoDB
DESCRIPTION: This snippet demonstrates creating three indexes on a collection named 'foo'. It includes a simple index, a compound index, and a partial index with a filter expression.

LANGUAGE: javascript
CODE:
db.foo.createIndex( { x: 1 } )
db.foo.createIndex( { x: 1, y: 1 } )
db.foo.createIndex( { x: 1, z: 1 }, { partialFilterExpression: { x: { $gt: 10 } } } )

----------------------------------------

TITLE: Adding Alternate Key Name in MongoDB KeyVault
DESCRIPTION: The KeyVault.addKeyAltName() method adds a keyAltName to the keyAltNames array of a data encryption key identified by UUID. The keyAltName must be unique among all keys in the key vault. It's recommended to use getKeyVault() method with a partial index filter to create a unique index on the keyAltNames field.

LANGUAGE: mongodb
CODE:
KeyVault.addKeyAltName(UUID, keyAltName)

----------------------------------------

TITLE: Renaming a MongoDB Collection using JavaScript
DESCRIPTION: This snippet demonstrates how to use the db.collection.renameCollection() method to rename a collection from 'rrecord' to 'record'. The method is called on the collection object and takes the new name as a parameter.

LANGUAGE: javascript
CODE:
db.rrecord.renameCollection("record")

----------------------------------------

TITLE: Projecting Single Field in MongoDB Aggregation
DESCRIPTION: This aggregation operation uses $project to return only the '_id' field for all documents in the 'members' collection.

LANGUAGE: javascript
CODE:
db.members.aggregate(
   [
      { $project: { _id: 1 } }
   ]
)

----------------------------------------

TITLE: Using $expr and $function as Alternative to $where in MongoDB Query
DESCRIPTION: Demonstrates how to use $expr and $function operators to replace a $where query, providing a more efficient way to execute custom JavaScript functions in queries.

LANGUAGE: javascript
CODE:
db.players.find( {$expr: { $function: {
      body: function(name) { return hex_md5(name) == "15b0a220baa16331e8d80e15367677ad"; },
      args: [ "$name" ],
      lang: "js"
} } } )

----------------------------------------

TITLE: Storing Additional Sales Data in MongoDB
DESCRIPTION: Example of inserting additional sales data for an outlier document into a separate 'extra_sales' collection. This demonstrates how to handle data exceeding the threshold defined by the outlier pattern.

LANGUAGE: javascript
CODE:
db.extra_sales.insertOne(
   {
      "book_id": 2,
      "customers_purchased_extra": [ "user50", "user51", "user52", ... "user999" ]
   }
)

----------------------------------------

TITLE: Creating User with Kerberos Authentication in MongoDB
DESCRIPTION: This example shows how to add a user with Kerberos authentication, specifying the Kerberos principal as the username and assigning read-only access to a specific database.

LANGUAGE: javascript
CODE:
use $external
db.createUser(
    {
      user: "reportingapp@EXAMPLE.NET",
      roles: [
         { role: "read", db: "records" }
      ]
    }
)

----------------------------------------

TITLE: Inserting Encrypted Document with MongoDB Queryable Encryption in Go
DESCRIPTION: This Go code example shows how to insert an encrypted document using MongoDB's Queryable Encryption feature. It uses a pre-configured MongoClient instance with Queryable Encryption enabled.

LANGUAGE: go
CODE:
// Requires a MongoClient configured with Queryable Encryption support
// Insert an encrypted document


----------------------------------------

TITLE: Retrieving Timestamp from ObjectId in MongoDB JavaScript
DESCRIPTION: Demonstrates how to extract the timestamp portion from a MongoDB ObjectId using the getTimestamp() method. Returns an ISODate object representing when the ObjectId was created.

LANGUAGE: javascript
CODE:
ObjectId("507c7f79bcf86cd7994f6c0e").getTimestamp()

LANGUAGE: javascript
CODE:
ISODate("2012-10-15T21:26:17Z")

----------------------------------------

TITLE: Retrieving All Collections Info in MongoDB
DESCRIPTION: Basic example showing how to retrieve information for all collections in the 'example' database.

LANGUAGE: javascript
CODE:
use example
db.getCollectionInfos()

----------------------------------------

TITLE: Inserting Documents for Multikey Index Example in MongoDB
DESCRIPTION: Example of inserting documents into an 'inventory' collection to demonstrate querying on an array field as a whole using a multikey index.

LANGUAGE: javascript
CODE:
db.inventory.insertMany( [
   { _id: 5, type: "food", item: "apple", ratings: [ 5, 8, 9 ] },
   { _id: 6, type: "food", item: "banana", ratings: [ 5, 9 ] },
   { _id: 7, type: "food", item: "chocolate", ratings: [ 9, 5, 8 ] },
   { _id: 8, type: "food", item: "fish", ratings: [ 9, 5 ] },
   { _id: 9, type: "food", item: "grapes", ratings: [ 5, 9, 5 ] }
] )

----------------------------------------

TITLE: Querying Points within a GeoJSON Polygon in MongoDB
DESCRIPTION: Demonstrates how to use $geoWithin to find all locations within a specified GeoJSON polygon. This example uses a polygon with an area less than a single hemisphere.

LANGUAGE: javascript
CODE:
db.places.find(
   {
     loc: {
       $geoWithin: {
          $geometry: {
             type : "Polygon" ,
             coordinates: [ [ [ 0, 0 ], [ 3, 6 ], [ 6, 1 ], [ 0, 0 ] ] ]
          }
       }
     }
   }
)

----------------------------------------

TITLE: Structuring Change Stream Event Identifier in MongoDB
DESCRIPTION: Demonstrates the structure of the _id field in a MongoDB change stream event. The _id is a BSON object containing a _data field with either BinData or a hex string value. This structure is used as the resumeToken for resuming change streams.

LANGUAGE: none
CODE:
{
   "_data" : <BinData|hex string>
}

----------------------------------------

TITLE: Counting All Documents in a MongoDB Collection
DESCRIPTION: Demonstrates how to count all documents in the 'orders' collection using db.collection.countDocuments() with an empty query and a hint for performance.

LANGUAGE: javascript
CODE:
db.orders.countDocuments( {}, { hint: "_id_"} )

----------------------------------------

TITLE: Using $max in MongoDB $group Stage
DESCRIPTION: This example demonstrates how to use the $max operator in a $group stage to compute the maximum total amount and maximum quantity for each group of documents in a sales collection.

LANGUAGE: javascript
CODE:
db.sales.aggregate(
   [
     {
       $group:
         {
           _id: "$item",
           maxTotalAmount: { $max: { $multiply: [ "$price", "$quantity" ] } },
           maxQuantity: { $max: "$quantity" }
         }
     }
   ]
)

----------------------------------------

TITLE: Filtered GraphLookup with Match Condition
DESCRIPTION: Shows how to use restrictSearchWithMatch to filter the recursive search results, finding connections who share a specific hobby (golf) in a social network.

LANGUAGE: javascript
CODE:
db.people.aggregate( [
  { $match: { "name": "Tanya Jordan" } },
  { $graphLookup: {
      from: "people",
      startWith: "$friends",
      connectFromField: "friends",
      connectToField: "name",
      as: "golfers",
      restrictSearchWithMatch: { "hobbies" : "golf" }
    }
  },
  { $project: {
      "name": 1,
      "friends": 1,
      "connections who play golf": "$golfers.name"
    }
  }
] )

----------------------------------------

TITLE: MongoDB $topN with Dynamic n Value Based on Group Key
DESCRIPTION: Illustrates how to dynamically assign the value of n in $topN using a conditional expression based on the group key in a MongoDB aggregation pipeline.

LANGUAGE: javascript
CODE:
db.gamescores.aggregate([
   {
      $group:
      {
         _id: {"gameId": "$gameId"},
         gamescores:
            {
               $topN:
                  {
                     output: "$score",
                     n: { $cond: { if: {$eq: ["$gameId","G2"] }, then: 1, else: 3 } },
                     sortBy: { "score": -1 }
                  }
            }
      }
   }
] )

----------------------------------------

TITLE: Implementing Transaction Retry Logic in Java
DESCRIPTION: Java implementation of MongoDB transaction retry pattern including error handling and commit retries. The code demonstrates updating employee information across multiple collections within a transaction, with proper session management and retry logic for both transaction execution and commit operations.

LANGUAGE: java
CODE:
void runTransactionWithRetry(Runnable transactional) {
    while (true) {
        try {
            transactional.run();
            break;
        } catch (MongoException e) {
            System.out.println("Transaction aborted. Caught exception during transaction.");

            if (e.hasErrorLabel(MongoException.TRANSIENT_TRANSACTION_ERROR_LABEL)) {
                System.out.println("TransientTransactionError, aborting transaction and retrying ...");
                continue;
            } else {
                throw e;
            }
        }
    }
}

void commitWithRetry(ClientSession clientSession) {
    while (true) {
        try {
            clientSession.commitTransaction();
            System.out.println("Transaction committed");
            break;
        } catch (MongoException e) {
            // can retry commit
            if (e.hasErrorLabel(MongoException.UNKNOWN_TRANSACTION_COMMIT_RESULT_LABEL)) {
                System.out.println("UnknownTransactionCommitResult, retrying commit operation ...");
                continue;
            } else {
                System.out.println("Exception during commit ...");
                throw e;
            }
        }
    }
}

void updateEmployeeInfo() {

    MongoCollection<Document> employeesCollection = client.getDatabase("hr").getCollection("employees");
    MongoCollection<Document> eventsCollection = client.getDatabase("reporting").getCollection("events");

    TransactionOptions txnOptions = TransactionOptions.builder()
            .readPreference(ReadPreference.primary())
            .readConcern(ReadConcern.MAJORITY)
            .writeConcern(WriteConcern.MAJORITY)
            .build();

    try (ClientSession clientSession = client.startSession()) {
        clientSession.startTransaction(txnOptions);

        employeesCollection.updateOne(clientSession,
                Filters.eq("employee", 3),
                Updates.set("status", "Inactive"));
        eventsCollection.insertOne(clientSession,
                new Document("employee", 3).append("status", new Document("new", "Inactive").append("old", "Active")));

        commitWithRetry(clientSession);
    }
}

void updateEmployeeInfoWithRetry() {
    runTransactionWithRetry(this::updateEmployeeInfo);
}

----------------------------------------

TITLE: Querying Embedded Documents in MongoDB Shell
DESCRIPTION: This snippet demonstrates how to query MongoDB for documents with specific conditions on embedded fields using the MongoDB shell. It searches for inventory items with a height less than 15 inches, unit of measure in inches, and a status of 'D'.

LANGUAGE: javascript
CODE:
db.inventory.find( { "size.h": { $lt: 15 }, "size.uom": "in", status: "D" } )

----------------------------------------

TITLE: Inserting Single Document in MongoDB
DESCRIPTION: Basic document insertion example showing the structure of a simple game document with score field.

LANGUAGE: javascript
CODE:
db.games.insertOne( { _id: 1, score: 80 } )

----------------------------------------

TITLE: Field Order Optimization in MongoDB Time Series Documents
DESCRIPTION: Examples demonstrating proper and improper field ordering in documents. Shows how consistent field order improves insert performance.

LANGUAGE: javascript
CODE:
// Optimal field order
{
   _id: ObjectId("6250a0ef02a1877734a9df57"),
   timestamp: ISODate("2020-01-23T00:00:00.441Z"),
   name: "sensor1",
   range: 1
},
{
   _id: ObjectId("6560a0ef02a1877734a9df66"),
   timestamp: ISODate("2020-01-23T01:00:00.441Z"),
   name: "sensor1",
   range: 5
}

----------------------------------------

TITLE: Inserting Sample Data into MongoDB Screenings Collection
DESCRIPTION: This snippet demonstrates how to insert sample movie screening data into a MongoDB collection named 'screenings'. It includes information about theaters, movie titles, viewer counts, and revenue.

LANGUAGE: javascript
CODE:
db.screenings.insertMany( [
   {
      theater: "Alger Cinema",
      location: "Lakeview, OR",
      movie_title: "Lost in the Shadows",
      movie_id: 1,
      num_viewers: 344,
      revenue: 3440
   },
   {
      theater: "City Cinema",
      location: "New York, NY",
      movie_title: "Lost in the Shadows",
      movie_id: 1,
      num_viewers: 1496,
      revenue: 22440
   },
   
] )

----------------------------------------

TITLE: Updating Employee Information Using MongoDB Transaction
DESCRIPTION: This function demonstrates how to use a transaction to update an employee's status in one collection and insert a corresponding event in another collection atomically.

LANGUAGE: javascript
CODE:
function updateEmployeeInfo(session) {
    employeesCollection = session.getDatabase("hr").employees;
    eventsCollection = session.getDatabase("reporting").events;

    session.startTransaction( { readConcern: { level: "snapshot" }, writeConcern: { w: "majority" } } );

    try{
        employeesCollection.updateOne( { employee: 3 }, { $set: { status: "Inactive" } } );
        eventsCollection.insertOne( { employee: 3, status: { new: "Inactive", old: "Active" } } );
    } catch (error) {
        print("Caught exception during transaction, aborting.");
        session.abortTransaction();
        throw error;
    }

    commitWithRetry(session);
}

----------------------------------------

TITLE: Calculating Sum and Product with $reduce in MongoDB
DESCRIPTION: Shows how to use $reduce to calculate both the sum and product of an array of numbers simultaneously.

LANGUAGE: javascript
CODE:
{
   $reduce: {
      input: [ 1, 2, 3, 4 ],
      initialValue: { sum: 5, product: 2 },
      in: {
         sum: { $add : ["$$value.sum", "$$this"] },
         product: { $multiply: [ "$$value.product", "$$this" ] }
      }
   }
}

----------------------------------------

TITLE: Enabling MongoDB Database Sharding - Syntax
DESCRIPTION: Demonstrates the syntax for enabling sharding on a MongoDB database. The method accepts a required database name parameter and an optional primary shard parameter.

LANGUAGE: javascript
CODE:
sh.enableSharding( 
   <database>,
   <primary shard>  // Optional. 
)

----------------------------------------

TITLE: RST Wayfinding Map for MongoDB Drivers
DESCRIPTION: ReStructuredText markup defining a wayfinding navigation component that links to MongoDB index documentation across different programming language drivers.

LANGUAGE: rst
CODE:
.. wayfinding:: MongoDB with drivers
   
   .. wayfinding-description::

      .. include:: /includes/wayfinding-description.rst

   .. wayfinding-option:: https://www.mongodb.com/docs/drivers/java/sync/current/fundamentals/indexes/
      :id: java-sync

   .. wayfinding-option:: https://www.mongodb.com/docs/drivers/csharp/current/fundamentals/indexes/
      :id: csharp

   .. wayfinding-option:: https://www.mongodb.com/docs/languages/python/pymongo-driver/current/work-with-indexes/
      :id: pymongo

   .. wayfinding-option:: https://www.mongodb.com/docs/drivers/node/current/fundamentals/indexes/
      :id: nodejs

   .. wayfinding-option:: https://www.mongodb.com/docs/drivers/go/current/fundamentals/indexes/
      :id: go

----------------------------------------

TITLE: Multi-Stage Aggregation Pipeline Example in MongoDB
DESCRIPTION: An example of an aggregation operation on the 'articles' collection to calculate the count of distinct elements in the 'tags' array.

LANGUAGE: javascript
CODE:
db.runCommand( {
   aggregate: "articles", 
   pipeline: [
      { $project: { tags: 1 } },
      { $unwind: "$tags" },
      { $group: { _id: "$tags", count: { $sum : 1 } } }
   ],
   cursor: { }
} )

----------------------------------------

TITLE: Connecting to a Replica Set with TLS Enabled
DESCRIPTION: Example connection string for connecting to a replica set named 'myRepl' with TLS enabled and user authentication.

LANGUAGE: none
CODE:
mongodb://myDatabaseUser:D1fficultP%40ssw0rd@db0.example.com,db1.example.com,db2.example.com/?replicaSet=myRepl&tls=true

----------------------------------------

TITLE: Querying Collection After TTL Expiration in MongoDB
DESCRIPTION: Queries the 'foo' collection to check which documents remain after the TTL index has processed expirations.

LANGUAGE: javascript
CODE:
db.foo.find({}, {_id: 0, F: 1, D: 1})

----------------------------------------

TITLE: Syntax for MongoDB $facet Aggregation Stage
DESCRIPTION: Demonstrates the basic syntax for using the $facet stage in a MongoDB aggregation pipeline. Each output field is associated with its own sub-pipeline of stages.

LANGUAGE: javascript
CODE:
{ $facet:
   {
     <outputField1>: [ <stage1>, <stage2>, ... ],
     <outputField2>: [ <stage1>, <stage2>, ... ],
     ...
   }
}

----------------------------------------

TITLE: Multi-Faceted Aggregation with $bucketAuto in MongoDB
DESCRIPTION: Shows how to use $bucketAuto within a $facet stage to perform multiple aggregations on the same set of input documents, grouping by price, year, and calculated area.

LANGUAGE: javascript
CODE:
db.artwork.aggregate( [
  {
    $facet: {
      "price": [
        {
          $bucketAuto: {
            groupBy: "$price",
            buckets: 4
          }
        }
      ],
      "year": [
        { 
          $bucketAuto: {
            groupBy: "$year",
            buckets: 3,
            output: {
              "count": { $sum: 1 },
              "years": { $push: "$year" }
            }
          }
        }
      ],
      "area": [
        {
          $bucketAuto: {
            groupBy: {
              $multiply: [ "$dimensions.height", "$dimensions.width" ] 
            },
            buckets: 4,
            output: {
              "count": { $sum: 1 },
              "titles": { $push: "$title" }
            }
          }
        }
      ]
    }
  }
] )

----------------------------------------

TITLE: DeleteMany with Write Concern in MongoDB
DESCRIPTION: Example showing deleteMany() with write concern configuration for replica set deployments

LANGUAGE: javascript
CODE:
try {
   db.orders.deleteMany(
       { "client" : "Crude Traders Inc." },
       { writeConcern: { w : "majority", wtimeout : 100 }}
   );
} catch (e) {
   print (e);
}

----------------------------------------

TITLE: Using $regex with mongodump
DESCRIPTION: Shows how to use $regex with mongodump command, emphasizing the need for proper quoting and Extended JSON v2 format.

LANGUAGE: shell
CODE:
mongodump -d=sample_mflix -c=movies  -q='{"year": {"$regex": "20"}}'

----------------------------------------

TITLE: Creating a Compound Index in MongoDB
DESCRIPTION: This snippet shows how to create a compound index on the 'name' and 'gpa' fields of the 'students' collection. The 'name' field is indexed in ascending order, while the 'gpa' field is indexed in descending order.

LANGUAGE: javascript
CODE:
db.students.createIndex( {
   name: 1, 
   gpa: -1
} )

----------------------------------------

TITLE: Update with Aggregation Pipeline
DESCRIPTION: Example of using an aggregation pipeline to perform conditional updates based on current field values.

LANGUAGE: javascript
CODE:
db.students3.update(
   { },
   [
     { $set: { average : { $trunc: [ { $avg: "$tests" }, 0 ] }, lastUpdate: "$$NOW" } },
     { $set: { grade: { $switch: {
                           branches: [
                               { case: { $gte: [ "$average", 90 ] }, then: "A" },
                               { case: { $gte: [ "$average", 80 ] }, then: "B" },
                               { case: { $gte: [ "$average", 70 ] }, then: "C" },
                               { case: { $gte: [ "$average", 60 ] }, then: "D" }
                           ],
                           default: "F"
     } } } }
   ],
   { multi: true }
)

----------------------------------------

TITLE: Removing Fields with $addFields and $$REMOVE
DESCRIPTION: Demonstrates how to remove fields using $addFields with the $$REMOVE variable.

LANGUAGE: javascript
CODE:
db.labReadings.aggregate( [
      {
         $addFields: { date: "$$REMOVE" }
      }
   ] )

----------------------------------------

TITLE: Overriding Read Concern in MongoDB Aggregation
DESCRIPTION: Shows how to specify a read concern for an aggregation operation to control the consistency and isolation of the data read.

LANGUAGE: javascript
CODE:
db.restaurants.aggregate(
   [ { $match: { rating: { $lt: 5 } } } ],
   { readConcern: { level: "majority" } }
)

----------------------------------------

TITLE: Deleting a Single Document Matching a Condition in MongoDB
DESCRIPTION: This snippet demonstrates how to delete at most one document that matches a specified filter using the deleteOne() method.

LANGUAGE: javascript
CODE:
db.inventory.deleteOne({ status: "D" })

----------------------------------------

TITLE: Querying Nested Field with Dot Notation in MongoDB
DESCRIPTION: This snippet demonstrates how to query a nested field using dot notation. It selects all documents where the 'uom' field nested in the 'size' field equals 'in'.

LANGUAGE: javascript
CODE:
db.inventory.find( { "size.uom": "in" } )

----------------------------------------

TITLE: Converting MongoDB Cursor to Array using JavaScript
DESCRIPTION: Demonstrates how to convert a MongoDB cursor to an array using the toArray() method. The example queries a products collection and checks if any results were returned. Note that this loads all documents into RAM.

LANGUAGE: javascript
CODE:
var allProductsArray = db.products.find().toArray();

if (allProductsArray.length > 0) { printjson (allProductsArray[0]); }

----------------------------------------

TITLE: Viewing MongoDB Collection Indexes
DESCRIPTION: Example showing the output of getIndexes() method displaying various indexes including _id, single field, and compound indexes.

LANGUAGE: javascript
CODE:
[
   {
      "v" : 2,
      "key" : {
         "_id" : 1
      },
      "name" : "_id_"
   },
   {
      "v" : 2,
      "key" : {
         "cat" : -1
      },
      "name" : "catIdx"
   },
   {
      "v" : 2,
      "key" : {
         "cat" : 1,
         "dog" : -1
      },
      "name" : "cat_1_dog_-1"
   }
]

----------------------------------------

TITLE: Write Concern Specification in MongoDB
DESCRIPTION: Example of write concern specification object showing the three main options: w for write propagation, j for journal acknowledgment, and wtimeout for time limits.

LANGUAGE: javascript
CODE:
{ w: <value>, j: <boolean>, wtimeout: <number> }

----------------------------------------

TITLE: Creating Indexes for $or Query in MongoDB
DESCRIPTION: Shows how to create separate indexes to support clauses in an $or query. This is more efficient than using a compound index for $or operations.

LANGUAGE: javascript
CODE:
db.inventory.createIndex( { quantity: 1 } )
db.inventory.createIndex( { price: 1 } )

----------------------------------------

TITLE: Querying MongoDB with $gt Operator in Shell
DESCRIPTION: This snippet shows how to use the $gt operator in the MongoDB shell to find documents where 'dim_cm' is greater than 25.

LANGUAGE: javascript
CODE:
db.inventory.find( { dim_cm: { $gt: 25 } } )

----------------------------------------

TITLE: Updating Embedded Documents in Arrays with MongoDB $ Operator
DESCRIPTION: Demonstrates how to use the positional $ operator to update fields in embedded documents within an array. This example updates the standard deviation of a specific grade.

LANGUAGE: javascript
CODE:
db.students.updateOne(
   { _id: 4, "grades.grade": 85 },
   { $set: { "grades.$.std" : 6 } }
)

----------------------------------------

TITLE: Basic $project Stage Syntax in MongoDB Aggregation
DESCRIPTION: Shows the prototype form of the $project stage, which specifies how to transform documents in the aggregation pipeline.

LANGUAGE: javascript
CODE:
{ $project: { <specification(s)> } }

----------------------------------------

TITLE: Creating Partial Index with Cross-Field Filter
DESCRIPTION: Shows how to create a partial index where the indexed field differs from the filter expression field.

LANGUAGE: javascript
CODE:
db.contacts.createIndex(
   { name: 1 },
   { partialFilterExpression: { email: { $exists: true } } }
)

----------------------------------------

TITLE: Basic $ceil Syntax
DESCRIPTION: Basic syntax for using the $ceil operator in MongoDB aggregation pipeline.

LANGUAGE: javascript
CODE:
{ $ceil: <number> }

----------------------------------------

TITLE: Generating Shard Key Ranges for Email Prefixes in MongoDB
DESCRIPTION: This function generates shard key ranges based on two-character email prefixes. It calculates ranges to evenly distribute across the available shards.

LANGUAGE: javascript
CODE:
function getRanges(shards) {
   let ranges = [];

   // The total number of prefix possibilities is 26 * 26 (aa to zz).
   // We calculate the number of combinations to add in a range.
   const totalCombinationsPerShard = 26 * 26 / shards.length;
   let minKey = {
      email: MinKey
   };
   let maxKey = {
      email: MinKey
   };

   for(let i = 1; i <= shards.length; ++i) {
      // 97 is lower case 'a' in ASCII.
      let prefix = 97 + ((totalCombinationsPerShard*i)/26);
      let suffix = 97 + ((totalCombinationsPerShard*i)%26);
      let initialChars = String.fromCharCode(prefix) + String.fromCharCode(suffix);
      
      minKey = maxKey;
      maxKey = {
         email: i !== shards.length ? initialChars : MaxKey
      };

      ranges.push({
         min: minKey,
         max: maxKey
      });
   }

   return ranges;
}

----------------------------------------

TITLE: Updating Multiple Documents with bulkWrite() in MongoDB
DESCRIPTION: Demonstrates using the updateMany operation within bulkWrite() to update all documents matching a filter.

LANGUAGE: javascript
CODE:
db.collection.bulkWrite( [
   { updateMany :
      {
         "filter" : <document>,
         "update" : <document or pipeline>, 
         "upsert" : <boolean>,
         "collation": <document>,                  
         "arrayFilters": [ <filterdocument1>, ... ],
         "hint": <document|string>
      }
   }
] )

----------------------------------------

TITLE: Creating a Secondary Index on Timestamp Field in MongoDB
DESCRIPTION: Shows how to create a secondary single-field index on the 'timestamp' field in the sensorData collection.

LANGUAGE: javascript
CODE:
db.sensorData.createIndex( { "timestamp": 1 } )

----------------------------------------

TITLE: MongoDB $match with Complex Conditions and Count
DESCRIPTION: Advanced example combining $match with $group to filter and count documents based on complex conditions.

LANGUAGE: javascript
CODE:
db.articles.aggregate( [
  { $match: { $or: [ { score: { $gt: 70, $lt: 90 } }, { views: { $gte: 1000 } } ] } },
  { $group: { _id: null, count: { $sum: 1 } } }
] );

----------------------------------------

TITLE: Configuring Encrypted Fields for Equality Queries
DESCRIPTION: Configuration code showing how to set up encrypted fields with equality query support in the encryption schema. Demonstrates encrypting SSN and billing fields with SSN being queryable.

LANGUAGE: javascript
CODE:
const encryptedFields = {
  keyId: [keyVaultKey],
  fields: [{
    path: "ssn",
    bsonType: "string",
    queryType: "equality"
  }, {
    path: "billing",
    bsonType: "object"
  }]
};

----------------------------------------

TITLE: Querying MongoDB using $in operator with Shell
DESCRIPTION: This snippet demonstrates how to use the $in operator to query the inventory collection for documents where the status field is either 'A' or 'D'.

LANGUAGE: javascript
CODE:
db.inventory.find( { status: { $in: [ "A", "D" ] } } )

----------------------------------------

TITLE: Creating MongoDB Client with Automatic Encryption for CSFLE
DESCRIPTION: This snippet demonstrates how to create a MongoDB client with automatic encryption settings for client-side field level encryption. It uses the previously defined variables for key vault, KMS providers, schema, and extra options.

LANGUAGE: java
CODE:
MongoClientSettings clientSettings = MongoClientSettings.builder()
    .autoEncryptionSettings(AutoEncryptionSettings.builder()
        .keyVaultNamespace(keyVaultNamespace)
        .kmsProviders(kmsProviders)
        .schemaMap(schemaMap)
        .extraOptions(extraOptions)
        .build())
    .build();
MongoClient mongoClient = MongoClients.create(clientSettings);

LANGUAGE: javascript
CODE:
const client = new MongoClient(uri, {
  autoEncryption: {
    keyVaultNamespace,
    kmsProviders,
    schemaMap: schema,
    extraOptions
  }
});

LANGUAGE: python
CODE:
client = MongoClient(uri, auto_encryption_opts=AutoEncryptionOpts(
    kms_providers=kms_providers,
    key_vault_namespace=key_vault_namespace,
    schema_map=schema,
    **extra_options
))

LANGUAGE: csharp
CODE:
var clientSettings = MongoClientSettings.FromConnectionString(connectionString);
clientSettings.AutoEncryptionOptions = new AutoEncryptionOptions(
    keyVaultNamespace: keyVaultNamespace,
    kmsProviders: kmsProviders,
    schemaMap: schema,
    extraOptions: extraOptions
);
var mongoClient = new MongoClient(clientSettings);

LANGUAGE: go
CODE:
autoEncryptionOpts := options.AutoEncryption().SetKeyVaultNamespace(keyVaultNamespace).
    SetKmsProviders(kmsProviders).SetSchemaMap(schema).SetExtraOptions(extraOptions)
client, err := mongo.Connect(context.TODO(), options.Client().ApplyURI(uri).
    SetAutoEncryptionOptions(autoEncryptionOpts))

----------------------------------------

TITLE: Creating Time Series Collection with Custom Bucketing
DESCRIPTION: Shows how to create a time series collection using custom bucketing parameters instead of granularity, with 4-hour intervals.

LANGUAGE: javascript
CODE:
db.createCollection(
   "weather24h", 
   {
      timeseries: {
         timeField: "timestamp",
         metaField: "metadata",
         bucketMaxSpanSeconds: 14400,
         bucketRoundingSeconds: 14400
      }
   }   
)

----------------------------------------

TITLE: First Three Scores Query with $firstN
DESCRIPTION: Aggregation pipeline using $firstN to find the first three scores for a single game

LANGUAGE: javascript
CODE:
db.gamescores.aggregate( [
   {
      $match : { gameId : "G1" }
   },
   {
      $group:
         {
            _id: "$gameId",
            firstThreeScores:
               {
                  $firstN:
                  {
                     input: ["$playerId", "$score"],
                     n:3
                  }
               }
         }
   }
] )

----------------------------------------

TITLE: Creating a 2dsphere Index on MongoDB Collection
DESCRIPTION: This snippet shows how to create a 2dsphere index on the 'location' field of the 'places' collection. This index is essential for efficient geospatial queries on the collection.

LANGUAGE: javascript
CODE:
db.places.createIndex( { location: "2dsphere" } )

----------------------------------------

TITLE: Executing Sample Queries in MongoDB
DESCRIPTION: Sample queries that utilize different indexes to demonstrate index usage statistics.

LANGUAGE: javascript
CODE:
db.orders.find( { type: "apparel"} )
db.orders.find( { item: "abc" } ).sort( { quantity: 1 } )
db.orders.find( { price: { $gt: 10 } } )

----------------------------------------

TITLE: Creating a Capped Collection in MongoDB
DESCRIPTION: This snippet demonstrates how to create a capped collection named 'log' with a maximum size of 100,000 bytes using the db.createCollection() method.

LANGUAGE: javascript
CODE:
db.createCollection( "log", { capped: true, size: 100000 } )

----------------------------------------

TITLE: Using $avg in $setWindowFields Stage with MongoDB Aggregation
DESCRIPTION: This example demonstrates the use of $avg in the $setWindowFields stage to calculate a moving average of cake sale quantities for each state. It uses partitioning and sorting to group and order the data.

LANGUAGE: javascript
CODE:
db.cakeSales.aggregate( [
   {
      $setWindowFields: {
         partitionBy: "$state",
         sortBy: { orderDate: 1 },
         output: {
            averageQuantityForState: {
               $avg: "$quantity",
               window: {
                  documents: [ "unbounded", "current" ]
               }         
            }
         }
      }
   }
] )

----------------------------------------

TITLE: Basic $setField Syntax in MongoDB
DESCRIPTION: Basic syntax structure for the $setField operator showing required fields including field name, input object, and value expression.

LANGUAGE: javascript
CODE:
{ 
  $setField: {
    field: <String>,
    input: <Object>,
    value: <Expression>
  }
}

----------------------------------------

TITLE: Using $dateToString in MongoDB Aggregation Pipeline
DESCRIPTION: This snippet demonstrates how to use the $dateToString operator in a MongoDB aggregation pipeline. It shows various formatting options and timezone manipulations.

LANGUAGE: javascript
CODE:
db.sales.aggregate(
   [
     {
       $project: {
          yearMonthDayUTC: { $dateToString: { format: "%Y-%m-%d", date: "$date" } },
          timewithOffsetNY: { $dateToString: { format: "%H:%M:%S:%L%z", date: "$date", timezone: "America/New_York"} },
          timewithOffset430: { $dateToString: { format: "%H:%M:%S:%L%z", date: "$date", timezone: "+04:30" } },
          minutesOffsetNY: { $dateToString: { format: "%Z", date: "$date", timezone: "America/New_York" } },
          minutesOffset430: { $dateToString: { format: "%Z", date: "$date", timezone: "+04:30" } },
          abbreviated_month: { $dateToString: {format: "%b", date: "$date", timezone: "+04:30" } },
          full_month: { $dateToString: { format: "%B", date: "$date", timezone: "+04:30" } }
       }
     }
   ]
)

----------------------------------------

TITLE: Embedding Related Data in MongoDB Article Document
DESCRIPTION: Example of embedding author, tags, and comments data within an article document for optimized single-query access. Shows how to structure a document with nested arrays and subdocuments.

LANGUAGE: javascript
CODE:
db.articles.insertOne(
   {
      title: "My Favorite Vacation",
      date: ISODate("2023-06-02"),
      text: "We spent seven days in Italy...",
      tags: [
         {
            name: "travel",
            url: "<blog-site>/tags/travel"
         },
         {
            name: "adventure",
            url: "<blog-site>/tags/adventure"
         }
      ],
      comments: [
         {
            name: "pedro123",
            text: "Great article!"
         }
      ],
      author: {
         name: "alice123",
         email: "alice@mycompany.com",
         avatar: "photo1.jpg"
      }
   }
)

----------------------------------------

TITLE: Inserting Tree Structure Data with Parent References in MongoDB
DESCRIPTION: This snippet demonstrates how to insert multiple documents representing a tree structure using parent references. Each document contains an _id field and a parent field that references its parent category.

LANGUAGE: javascript
CODE:
db.categories.insertMany( [
   { _id: "MongoDB", parent: "Databases" },
   { _id: "dbm", parent: "Databases" },
   { _id: "Databases", parent: "Programming" },
   { _id: "Languages", parent: "Programming" },
   { _id: "Programming", parent: "Books" },
   { _id: "Books", parent: null }
] )

----------------------------------------

TITLE: Viewing Shard Status in MongoDB Shell
DESCRIPTION: This snippet demonstrates how to use the sh.status() method in the MongoDB shell to view an overview of the sharded cluster, including primary shard information and chunk distribution.

LANGUAGE: javascript
CODE:
sh.status()

----------------------------------------

TITLE: Querying MongoDB with Compound Index
DESCRIPTION: These snippets demonstrate how to use the created compound index for querying the 'students' collection. They show examples of queries that the index supports, including queries on both indexed fields and queries on the prefix field.

LANGUAGE: javascript
CODE:
db.students.find( { name: "Alice", gpa: 3.6 } )

db.students.find( { name: "Bob" } )

----------------------------------------

TITLE: Adjusting Dates for Daylight Savings Time with $dateSubtract
DESCRIPTION: Illustrates a complex aggregation pipeline that uses $dateSubtract to adjust dates for daylight savings time. It subtracts 1 day and 24 hours from login times, considering different timezones.

LANGUAGE: javascript
CODE:
db.billing.aggregate(
   [ 
      {
         $project:
            {
               _id: 0,
               location: 1,
               start:
                  {
                     $dateToString:
                        {
                           format: "%Y-%m-%d %H:%M",
                           date: "$login"
                        }
                  },
               days:
                  {
                     $dateToString: 
                        {
                           format: "%Y-%m-%d %H:%M", 
                           date: 
                              {
                                 $dateSubtract:
                                    {
                                       startDate: "$login",
                                       unit: "day",
                                       amount: 1,
                                       timezone: "$location"
                                    }
                              }
                        }
                  },
               hours:
                  {
                     $dateToString:
                        {
                           format: "%Y-%m-%d %H:%M",
                           date:
                              {
                                 $dateSubtract:
                                 {
                                    startDate: "$login",
                                    unit: "hour",
                                    amount: 24,
                                    timezone: "$location"
                                 }
                              }
                        }
                  },
               startTZInfo:
                  {
                     $dateToString:
                        {
                           format: "%Y-%m-%d %H:%M",
                           date: "$login",
                           timezone: "$location"
                        }
                  },
               daysTZInfo:
                  {
                     $dateToString:
                        {
                           format: "%Y-%m-%d %H:%M",
                           date:
                              {
                                 $dateSubtract:
                                    {
                                       startDate: "$login",
                                       unit: "day",
                                       amount: 1,
                                       timezone: "$location"
                                    }
                              },
                           timezone: "$location"
                        }
                  },
               hoursTZInfo:
                  {
                     $dateToString:
                        {
                           format: "%Y-%m-%d %H:%M",
                           date:
                              {
                                 $dateSubtract:
                                    {
                                       startDate: "$login",
                                       unit: "hour",
                                       amount: 24,
                                       timezone: "$location"
                                    }
                              },
                           timezone: "$location"
                        }
                  },
            }
      }
   ]
).pretty()

----------------------------------------

TITLE: Unordered Insert Multiple Documents
DESCRIPTION: Example of performing an unordered bulk insert of multiple documents, which continues processing remaining documents even if an error occurs.

LANGUAGE: javascript
CODE:
db.products.insert(
   [
     { _id: 20, item: "lamp", qty: 50, type: "desk" },
     { _id: 21, item: "lamp", qty: 20, type: "floor" },
     { _id: 22, item: "bulk", qty: 100 }
   ],
   { ordered: false }
)

----------------------------------------

TITLE: Specifying resource document for database and collection in MongoDB
DESCRIPTION: This snippet demonstrates how to specify a resource document for a specific database and collection in a MongoDB role privilege.

LANGUAGE: javascript
CODE:
{ db: <database>, collection: <collection> }

----------------------------------------

TITLE: Specifying Read Concern and Write Concern for MongoDB Transaction
DESCRIPTION: This snippet shows the options that can be passed to Session.startTransaction() to specify read concern and write concern for the transaction.

LANGUAGE: javascript
CODE:
{ readConcern: { level: <level>}, writeConcern: { w: <value>, j: <boolean>, wtimeout: <number> } }

----------------------------------------

TITLE: Using Aggregation Pipeline for Updates in findOneAndUpdate()
DESCRIPTION: Example of using an aggregation pipeline in findOneAndUpdate() to calculate a new field based on existing data.

LANGUAGE: javascript
CODE:
db.students2.findOneAndUpdate(
   { _id : 1 },
   [ { $set: { "total" : { $sum: "$grades.grade" } } } ],
   { returnNewDocument: true }
)

----------------------------------------

TITLE: Performing a Last Point Query Using Secondary Index in MongoDB
DESCRIPTION: Shows an example of a last point query that utilizes the descending timeField compound secondary index for improved performance.

LANGUAGE: javascript
CODE:
db.sensorData.aggregate( [
   { 
      $sort: { "metadata.sensorId": 1, "timestamp": -1 } 
   },
   { 
      $group: {
         _id: "$metadata.sensorId",
         ts: { $first: "$timestamp" },
         temperatureF: { $first: "$currentConditions.tempF" }
      }  
   }
] )

----------------------------------------

TITLE: Retrieving Documents with Binary Data in MongoDB
DESCRIPTION: This snippet shows how to retrieve a document containing binary data created with HexData(). The output displays the binary data as a base64 number using Binary.createFromBase64().

LANGUAGE: javascript
CODE:
db.hexCollection.find()

LANGUAGE: javascript
CODE:
[ { _id: 0, hexField: Binary.createFromBase64('EjRWq83v', 0) } ]

----------------------------------------

TITLE: Querying with Projection in MongoDB Shell
DESCRIPTION: This snippet demonstrates how to use the find() method with projection in the MongoDB shell. It queries documents with status 'A' and excludes the 'size.uom' field from the results.

LANGUAGE: javascript
CODE:
db.inventory.find(
   { status: "A" },
   { "size.uom": 0 }
)

----------------------------------------

TITLE: Inserting Multiple Documents with MongoDB Shell
DESCRIPTION: Uses the MongoDB shell insertMany() method to insert multiple inventory documents with varying properties including item details, quantities, dimensions, and status flags.

LANGUAGE: javascript
CODE:
db.inventory.insertMany([
   { item: "journal", qty: 25, size: { h: 14, w: 21, uom: "cm" }, status: "A" },
   { item: "notebook", qty: 50, size: { h: 8.5, w: 11, uom: "in" }, status: "A" },
   { item: "paper", qty: 100, size: { h: 8.5, w: 11, uom: "in" }, status: "D" },
   { item: "planner", qty: 75, size: { h: 22.85, w: 30, uom: "cm" }, status: "D" },
   { item: "postcard", qty: 45, size: { h: 10, w: 15.25, uom: "cm" }, status: "A" }
]);

----------------------------------------

TITLE: Querying with Projection in MongoDB Compass
DESCRIPTION: This snippet demonstrates how to use projection in MongoDB Compass GUI. It shows the steps to set up a filter for status "A" and project only specific fields.

LANGUAGE: javascript
CODE:
{ status: "A" }

LANGUAGE: javascript
CODE:
{ item: 1, status: 1, "size.uom": 1 }

----------------------------------------

TITLE: MongoDB moveCollection Command Syntax
DESCRIPTION: Basic syntax for the moveCollection command showing how to move a collection to a specific shard. Takes database.collection name and target shard ID as parameters.

LANGUAGE: javascript
CODE:
db.adminCommand( 
  { 
    moveCollection: "<database>.<collection>",
    toShard: "<ID of the recipient shard>",
  } 
)

----------------------------------------

TITLE: Defining GridFS Files Collection Schema in MongoDB
DESCRIPTION: Schema definition for the files collection that stores file metadata in GridFS. Contains fields for file identification, size, chunking details, upload date, and optional metadata.

LANGUAGE: javascript
CODE:
{
  "_id" : <ObjectId>,
  "length" : <num>,
  "chunkSize" : <num>,
  "uploadDate" : <timestamp>,
  "md5" : <hash>,
  "filename" : <string>,
  "contentType" : <string>,
  "aliases" : <string array>,
  "metadata" : <any>,
}

----------------------------------------

TITLE: MongoDB $concat Aggregation Example
DESCRIPTION: Demonstrates using $concat in an aggregation pipeline to combine 'item' and 'description' fields with a delimiter.

LANGUAGE: javascript
CODE:
db.inventory.aggregate(
   [
      { $project: { itemDescription: { $concat: [ "$item", " - ", "$description" ] } } }
   ]
)

----------------------------------------

TITLE: Updating MongoDB Replica Set Configuration Manually
DESCRIPTION: JavaScript code to manually update the replica set configuration stored in the system.replset collection of the local database.

LANGUAGE: javascript
CODE:
use local
cfg = db.system.replset.findOne( { "_id": "rs0" } )
cfg.members[0].host = "mongodb0.example.net:27017"
cfg.members[1].host = "mongodb1.example.net:27017"
cfg.members[2].host = "mongodb2.example.net:27017"
db.system.replset.updateOne( { "_id": "rs0" }, { $set: cfg } )
db.system.replset.find( {}, { "members.host": 1 } )

----------------------------------------

TITLE: Querying with $expr in MongoDB
DESCRIPTION: Uses the $expr operator with $gt to find documents where the spent amount is greater than the budget amount.

LANGUAGE: javascript
CODE:
db.monthlyBudget.find( { $expr: { $gt: [ "$spent" , "$budget" ] } } )

----------------------------------------

TITLE: Basic $regex Syntax in MongoDB Queries
DESCRIPTION: Demonstrates different syntaxes for using the $regex operator in MongoDB queries, including options for case sensitivity and multiline matching.

LANGUAGE: javascript
CODE:
{ <field>: { $regex: /pattern/, $options: '<options>' } }
{ "<field>": { "$regex": "pattern", "$options": "<options>" } }
{ <field>: { $regex: /pattern/<options> } }

----------------------------------------

TITLE: Granting Privileges to a Role in MongoDB
DESCRIPTION: This example shows how to use db.grantPrivilegesToRole() to grant two additional privileges to the 'inventoryCntrl01' role in the 'products' database. It demonstrates granting insert access on all collections and find access on a specific system collection.

LANGUAGE: javascript
CODE:
use products
db.grantPrivilegesToRole(
  "inventoryCntrl01",
  [
    {
      resource: { db: "products", collection: "" },
      actions: [ "insert" ]
    },
    {
      resource: { db: "products", collection: "system.js" },
      actions: [ "find" ]
    }
  ],
  { w: "majority" }
)

----------------------------------------

TITLE: Storing Timezone Data in MongoDB
DESCRIPTION: Examples showing how to store and handle timezone information alongside UTC timestamps in MongoDB, including storing the current date and timezone offset.

LANGUAGE: javascript
CODE:
var now = new Date();
db.data.insertOne( { date: now,
                offset: now.getTimezoneOffset() } );

----------------------------------------

TITLE: MongoDB $text Operator Basic Syntax
DESCRIPTION: Basic syntax structure for the $text operator showing the available fields and options.

LANGUAGE: javascript
CODE:
{
  $text: {
    $search: <string>,
    $language: <string>,
    $caseSensitive: <boolean>,
    $diacriticSensitive: <boolean>
  }
}

----------------------------------------

TITLE: MongoDB Collection Example Data
DESCRIPTION: This snippet shows example documents in a MongoDB collection named 'users' with arrays of favorite items.

LANGUAGE: javascript
CODE:
{ "_id" : 1, "name" : "dave123", favorites: [ "chocolate", "cake", "butter", "apples" ] }
{ "_id" : 2, "name" : "li", favorites: [ "apples", "pudding", "pie" ] }
{ "_id" : 3, "name" : "ahn", favorites: [ "pears", "pecans", "chocolate", "cherries" ] }
{ "_id" : 4, "name" : "ty", favorites: [ "ice cream" ] }

----------------------------------------

TITLE: Creating MongoDB Collection with Enum Validation in JavaScript
DESCRIPTION: This snippet demonstrates how to create a MongoDB collection named 'shipping' with JSON Schema validation. It uses the 'enum' keyword to restrict the 'country' field to specific values.

LANGUAGE: javascript
CODE:
db.createCollection("shipping", {
   validator: {
      $jsonSchema: {
         bsonType: "object",
         title: "Shipping Country Validation",
         properties: {
            country: {
               enum: [ "France", "United Kingdom", "United States" ],
               description: "Must be either France, United Kingdom, or United States"
            }
         }
      }
   }
} )

----------------------------------------

TITLE: Setting Bucket Span for Time Series Collection in MongoDB
DESCRIPTION: Defines bucketMaxSpanSeconds and bucketRoundingSeconds for a time series collection in MongoDB 6.3 and later. Both values must be the same.

LANGUAGE: javascript
CODE:
{
   bucketMaxSpanSeconds: "300",
   bucketRoundingSeconds: "300"
}

----------------------------------------

TITLE: DeleteMany Basic Syntax in MongoDB
DESCRIPTION: Basic syntax structure for the deleteMany() method showing required filter parameter and optional configuration options

LANGUAGE: javascript
CODE:
db.collection.deleteMany(
   <filter>,
   {
      writeConcern: <document>,
      collation: <document>
   }
)

----------------------------------------

TITLE: Including Specific Fields in MongoDB Aggregation Output
DESCRIPTION: Demonstrates how to use $project to include only specific fields (title and author) in the output documents of an aggregation pipeline.

LANGUAGE: javascript
CODE:
db.books.aggregate( [ { $project : { title : 1 , author : 1 } } ] )

----------------------------------------

TITLE: Creating User with X.509 Client Certificate Authentication in MongoDB
DESCRIPTION: This example demonstrates how to add a user for X.509 client certificate authentication, using the certificate subject as the username and assigning read-only access to a specific database.

LANGUAGE: javascript
CODE:
use $external
db.createUser(
    {
      user: "CN=myName,OU=myOrgUnit,O=myOrg,L=myLocality,ST=myState,C=myCountry",
      roles: [
         { role: "read", db: "records" }
      ]
    }
)

----------------------------------------

TITLE: Running Distinct Command in MongoDB
DESCRIPTION: This snippet shows a potentially long-running operation using the 'distinct' command to return each distinct 'collection' field that has a 'city' key in MongoDB.

LANGUAGE: javascript
CODE:
db.runCommand( { distinct: "collection",
                    key: "city" } )

----------------------------------------

TITLE: MongoDB Find Command Example Output
DESCRIPTION: Example output document returned by the find command when run against a sharded collection, showing cursor metadata and results.

LANGUAGE: javascript
CODE:
{
   "cursor" : {
      "firstBatch" : [
         {
            "_id" : ObjectId("5e8e2ca217b5324fa9847435"),
            "zipcode" : "20001",
            "x" : 1
         },
         {
            "_id" : ObjectId("5e8e2ca517b5324fa9847436"),
            "zipcode" : "30001",
            "x" : 1
         }
      ],
      "partialResultsReturned" : true,
      "id" : NumberLong("668860441858272439"),
      "ns" : "test.contacts"
   },
   "ok" : 1,
   "operationTime" : Timestamp(1586380205, 1),
   "$clusterTime" : {
      "clusterTime" : Timestamp(1586380225, 2),
      "signature" : {
         "hash" : BinData(0,"aI/jWsUVUSkMw8id+A+AVVTQh9Y="),
         "keyId" : NumberLong("6813364731999420435")
      }
   }
}

----------------------------------------

TITLE: Creating MongoDB Client with Encryption
DESCRIPTION: Initializes a MongoDB client with automatic encryption settings including key vault namespace and KMS configuration.

LANGUAGE: javascript
CODE:
const mongoClient = new MongoClient(uri, {
  autoEncryption: {
    keyVaultNamespace: keyVaultCollection,
    kmsProviders: kmsProviders,
    extraOptions: extraOptions
  }
});

LANGUAGE: python
CODE:
auto_encryption_opts = AutoEncryptionOpts(
    kms_providers=kms_providers,
    key_vault_namespace=key_vault_namespace,
    extra_options=extra_options
)

client = MongoClient(connection_string, auto_encryption_opts=auto_encryption_opts)

----------------------------------------

TITLE: Using PCRE Features in MongoDB Regex Queries
DESCRIPTION: Demonstrates how to use PCRE-specific features like case-sensitive matching within a pattern in MongoDB queries.

LANGUAGE: javascript
CODE:
db.products.find( { sku: { $regex: "(?i)a(?-i)bc" } } )

----------------------------------------

TITLE: Deleting Single Document Using MongoDB Shell
DESCRIPTION: Demonstrates how to delete a single document from the inventory collection that matches the status 'D' criteria using the MongoDB Shell.

LANGUAGE: javascript
CODE:
db.inventory.deleteOne( { status: "D" } )

----------------------------------------

TITLE: Sample Data Insertion for MongoDB Collection
DESCRIPTION: Creates sample sales collection data with nested arrays of items containing various properties like item_id, quantity, price, and name.

LANGUAGE: javascript
CODE:
db.sales.insertMany( [
   {
      _id: 0,
      items: [
         { item_id: 43, quantity: 2, price: 10, name: "pen" },
         { item_id: 2, quantity: 1, price: 240, name: "briefcase" }
      ]
   },
   {
      _id: 1,
      items: [
         { item_id: 23, quantity: 3, price: 110, name: "notebook" },
         { item_id: 103, quantity: 4, price: 5, name: "pen" },
         { item_id: 38, quantity: 1, price: 300, name: "printer" }
      ]
   },
   {
      _id: 2,
      items: [
         { item_id: 4, quantity: 1, price: 23, name: "paper" }
      ]
   }
] )

----------------------------------------

TITLE: Basic Update Operation Syntax
DESCRIPTION: Shows the basic syntax for the update() method with query, update and options parameters.

LANGUAGE: javascript
CODE:
db.collection.update(
   <query>,
   <update>,
   {
     upsert: <boolean>,
     multi: <boolean>,
     writeConcern: <document>,
     collation: <document>,
     arrayFilters: [ <filterdocument1>, ... ],
     hint:  <document|string>,
     let: <document> // Added in MongoDB 5.0
   }
)

----------------------------------------

TITLE: Connecting to a Replica Set on Different Machines
DESCRIPTION: Demonstrates how to connect to a replica set with members on different machines. This example includes multiple hostnames in the connection string with authentication.

LANGUAGE: shell
CODE:
mongodb://myDatabaseUser:D1fficultP%40ssw0rd@db1.example.net,db2.example.net/?replicaSet=myReplicaSet

----------------------------------------

TITLE: Basic Collection Creation Syntax
DESCRIPTION: The base syntax for creating a MongoDB collection with optional configuration parameters.

LANGUAGE: javascript
CODE:
db.createCollection( <name>,
    {
      capped: <boolean>,
      timeseries: {                  // Added in MongoDB 5.0
         timeField: <string>,        // required for time series collections
         metaField: <string>,
         granularity: <string>,
         bucketMaxSpanSeconds: <number>,  // Added in MongoDB 6.3
         bucketRoundingSeconds: <number>  // Added in MongoDB 6.3
      },
      expireAfterSeconds: <number>,
      clusteredIndex: <document>,  // Added in MongoDB 5.3
      changeStreamPreAndPostImages: <document>,  // Added in MongoDB 6.0
      size: <number>,
      max: <number>,
      storageEngine: <document>,
      validator: <document>,
      validationLevel: <string>,
      validationAction: <string>,
      indexOptionDefaults: <document>,
      viewOn: <string>,
      pipeline: <pipeline>,
      collation: <document>,
      writeConcern: <document>
    }
  )

----------------------------------------

TITLE: Deleting Multiple Documents in MongoDB using PHP Driver
DESCRIPTION: This snippet demonstrates how to delete multiple documents using the MongoDB PHP driver. The actual code is not provided in the snippet, but it references an external file.

LANGUAGE: php
CODE:
// Code is referenced from an external file:
// /driver-examples/DocumentationExamplesTest.php

----------------------------------------

TITLE: Count with Limit
DESCRIPTION: Counts documents with a date condition and applies a limit of 5 documents.

LANGUAGE: javascript
CODE:
db.orders.find( { ord_dt: { $gt: new Date('01/01/2012') } } ).limit(5).count(true)

----------------------------------------

TITLE: Basic Stats Example
DESCRIPTION: Example of retrieving basic statistics for a restaurants collection with default scaling.

LANGUAGE: javascript
CODE:
db.restaurants.stats()

----------------------------------------

TITLE: Specifying Data Key Options for GCP KMS in C#
DESCRIPTION: This code defines the options for creating a Data Encryption Key (DEK) using GCP KMS in C#. It specifies the master key's project ID, location, key ring, and key name.

LANGUAGE: csharp
CODE:
var dataKeyOptions = new DataKeyOptions(
    masterKey: new BsonDocument
    {
        { "projectId", "<Your Google Project ID>" },
        { "location", "<Your Google Cloud location>" },
        { "keyRing", "<Your Key Ring name>" },
        { "keyName", "<Your Key name>" }
    });

----------------------------------------

TITLE: MongoDB Compass Document Format
DESCRIPTION: JSON format showing the structure of documents to be inserted through MongoDB Compass interface.

LANGUAGE: javascript
CODE:
[
   { "_id": 1, "item": null },
   { "_id": 2 }
]

----------------------------------------

TITLE: Inserting New Screening Data into MongoDB Screenings Collection
DESCRIPTION: This snippet shows how to insert a new screening record into the 'screenings' collection, which will affect the computed data in the 'movies' collection.

LANGUAGE: javascript
CODE:
db.screenings.insertOne(
   {
      theater: "Overland Park Cinema",
      location: "Boise, ID",
      movie_title: "Lost in the Shadows",
      movie_id: 1,
      num_viewers: 760,
      revenue: 7600
   }
)

----------------------------------------

TITLE: Safe Concurrent Updates Using $inc Operator
DESCRIPTION: Example showing how to safely handle concurrent updates using the $inc operator, which properly accumulates changes from multiple operations.

LANGUAGE: javascript
CODE:
// Update A
db.games.updateOne(
   { _id: 1 },
   {
      $inc: { score: 10 }
   }
)

// Update B
db.games.updateOne(
   { _id: 1 },
   {
      $inc: { score: 20 }
   }
)

----------------------------------------

TITLE: Querying Documents with MongoDB $ne Operator
DESCRIPTION: Example of using the $ne operator to find documents where the quantity field is not equal to 20.

LANGUAGE: javascript
CODE:
db.inventory.find( { quantity: { $ne: 20 } } )

----------------------------------------

TITLE: Creating MongoClient Instance in C# for MongoDB Encrypted Data Access
DESCRIPTION: This code snippet demonstrates how to create a MongoClient instance in C# for accessing a key vault and handling encrypted data in MongoDB. It uses the MongoClient constructor with a connection string.

LANGUAGE: csharp
CODE:
var client = new MongoClient("<Your MongoDB URI>");

----------------------------------------

TITLE: Query Examples Using $eq Operator
DESCRIPTION: Various examples demonstrating different ways to use the $eq operator including field matching, embedded document querying, and array matching.

LANGUAGE: javascript
CODE:
db.inventory.find( { qty: { $eq: 20 } } )
db.inventory.find( { "item.name": { $eq: "ab" } } )
db.inventory.find( { tags: { $eq: "B" } } )
db.inventory.find( { tags: { $eq: [ "A", "B" ] } } )

----------------------------------------

TITLE: Using $redact for Document-Level Access Control in MongoDB
DESCRIPTION: Demonstrates how to use $redact in an aggregation pipeline to filter document content based on user access tags. It includes $match to filter by year and $redact to evaluate access at every document level.

LANGUAGE: javascript
CODE:
var userAccess = [ "STLW", "G" ];
db.forecasts.aggregate(
   [
     { $match: { year: 2014 } },
     { $redact: {
        $cond: {
           if: { $gt: [ { $size: { $setIntersection: [ "$tags", userAccess ] } }, 0 ] },
           then: "$$DESCEND",
           else: "$$PRUNE"
         }
       }
     }
   ]
);

----------------------------------------

TITLE: Rotating MongoDB Logs Using SIGUSR1 Signal in Linux
DESCRIPTION: This command demonstrates how to force log rotation for a MongoDB instance using the SIGUSR1 signal on a Linux system. It requires the process ID (PID) of the running mongod instance.

LANGUAGE: bash
CODE:
kill -SIGUSR1 2200

----------------------------------------

TITLE: Querying for Immediate Children in MongoDB
DESCRIPTION: This query retrieves the immediate children of a specific node in the tree structure. It uses the findOne method to locate the document and returns the children array.

LANGUAGE: javascript
CODE:
db.categories.findOne( { _id: "Databases" } ).children

----------------------------------------

TITLE: Creating Daily Temperature Averages Materialized View in MongoDB
DESCRIPTION: Aggregation pipeline that creates a materialized view of daily temperature averages from a weather time series collection. Uses $dateToParts to break down timestamps, groups data by date components, and saves results using $merge operator.

LANGUAGE: javascript
CODE:
db.weather.aggregate([
     {
        $project: {
           date: {
              $dateToParts: { date: "$timestamp" }
           },
           temp: 1
        }
     },
     {
        $group: {
           _id: {
              date: {
                 year: "$date.year",
                 month: "$date.month",
                 day: "$date.day"
              }
           },
           avgTmp: { $avg: "$temp" }
        }
     }, {
        $merge: { into: "dailytemperatureaverages", whenMatched: "replace" }
     }
   ])

----------------------------------------

TITLE: Defining $millisecond Operator in MongoDB Aggregation
DESCRIPTION: Shows the syntax for using the $millisecond operator in MongoDB aggregation. The operator returns the millisecond portion of a date as an integer between 0 and 999.

LANGUAGE: javascript
CODE:
{ $millisecond: <dateExpression> }

----------------------------------------

TITLE: Using Variables with 'let' in MongoDB Aggregation
DESCRIPTION: Shows how to use the 'let' option to define variables that can be used in the aggregation pipeline stages.

LANGUAGE: javascript
CODE:
db.cakeSales.aggregate(
   [
      { $match: {
         $expr: { $gt: [ "$salesTotal", "$$targetTotal" ] }
      } }
   ],
   { let: { targetTotal: 3000 } }
)

----------------------------------------

TITLE: Creating a Multikey Index in MongoDB
DESCRIPTION: Example of creating a multikey index on the 'addr.zip' field. MongoDB automatically detects and creates a multikey index when indexing a field containing array values.

LANGUAGE: javascript
CODE:
db.collection.createIndex( { "addr.zip": 1 } )

----------------------------------------

TITLE: Sample Output of MongoDB Metadata Consistency Check (JSON)
DESCRIPTION: Illustrates the JSON output format of the db.checkMetadataConsistency() method, showing an example of a MisplacedCollection inconsistency.

LANGUAGE: json
CODE:
{
   cursorHasMore: false,
   documents: [
      {
         type: "MisplacedCollection",
         description: "Unsharded collection found on shard different from database primary shard",
         details: {
            namespace: "library.authors",
            shard: "shard02",
            localUUID: new UUID("1ad56770-61e2-48e9-83c6-8ecefe73cfc4")
         }
      }
   ],
}

----------------------------------------

TITLE: Bucketed Temperature Data Schema in MongoDB
DESCRIPTION: Demonstrates the bucket pattern implementation for temperature data, grouping readings into hour-long buckets with pre-computed aggregates for better scalability and query performance.

LANGUAGE: javascript
CODE:
{
  "_id": 1,
  "sensor_id": 12345,
  "start_date": ISODate("2019-01-31T10:00:00.000Z"),
  "end_date": ISODate("2019-01-31T10:59:59.000Z"),
  "measurements": [
    {
      "timestamp": ISODate("2019-01-31T10:00:00.000Z"),
      "temperature": 40
    },
    {
      "timestamp": ISODate("2019-01-31T10:01:00.000Z"),
      "temperature": 40
    },
    ...,
    {
      "timestamp": ISODate("2019-01-31T10:42:00.000Z"),
      "temperature": 42
    }
  ],
  "transaction_count": 42,
  "sum_temperature": 1783
}

----------------------------------------

TITLE: Configuring AWS KMS Providers in Java
DESCRIPTION: This snippet demonstrates how to set up the KMS providers for AWS in a Java application. It includes the AWS access key ID and secret access key, which are required for authenticating with AWS KMS.

LANGUAGE: java
CODE:
Map<String, Map<String, Object>> kmsProviders = new HashMap<String, Map<String, Object>>();
Map<String, Object> awsKmsOptions = new HashMap<String, Object>();
awsKmsOptions.put("accessKeyId", "<Your AWS Access Key ID>");
awsKmsOptions.put("secretAccessKey", "<Your AWS Secret Access Key>");
kmsProviders.put("aws", awsKmsOptions);

----------------------------------------

TITLE: Creating a Clustered Collection in MongoDB
DESCRIPTION: Example of creating a clustered collection named 'orders' using the db.createCollection() method. The clustered index is defined on the _id field with a unique constraint and a custom name.

LANGUAGE: javascript
CODE:
db.createCollection(
   "orders",
   { clusteredIndex: { "key": { _id: 1 }, "unique": true, "name": "orders clustered key" } }
)

----------------------------------------

TITLE: Creating MongoDB Change Stream Cursor
DESCRIPTION: Shows how to create a change stream cursor using the aggregation pipeline on a collection named 'names'.

LANGUAGE: javascript
CODE:
var cur = db.names.aggregate( [
   { $changeStream: {} }
] )

----------------------------------------

TITLE: Querying with $nearSphere and $minDistance using 2dsphere Index in MongoDB
DESCRIPTION: Example of using $nearSphere with a 2dsphere index to find documents at least 0.0004 radians away from a specified point, ordered from nearest to farthest.

LANGUAGE: javascript
CODE:
db.legacyPlaces.find(
   { location : { $nearSphere : [ -73.9667, 40.78 ], $minDistance: 0.0004 } }
)

----------------------------------------

TITLE: Variable Reference Example in MongoDB $let
DESCRIPTION: Demonstrates how variable references work in the $let expression, showing potential pitfalls when referencing variables within the vars block.

LANGUAGE: none
CODE:
{
  $let:
    {
      vars: { low: 1, high: "$$low" },
      in: { $gt: [ "$$low", "$$high" ] }
    }
}

----------------------------------------

TITLE: Using $skip in MongoDB Aggregation Pipeline (JavaScript)
DESCRIPTION: Shows an example of using the $skip stage in a MongoDB aggregation pipeline. This operation skips the first 5 documents passed to it by the pipeline.

LANGUAGE: javascript
CODE:
db.article.aggregate([
    { $skip : 5 }
]);

----------------------------------------

TITLE: Using $strLenBytes in MongoDB Aggregation Pipeline
DESCRIPTION: Illustrates how to use the $strLenBytes operator in a MongoDB aggregation pipeline to calculate the byte length of each 'name' field in the 'food' collection.

LANGUAGE: javascript
CODE:
db.food.aggregate(
  [
    {
      $project: {
        "name": 1,
        "length": { $strLenBytes: "$name" }
      }
    }
  ]
)

----------------------------------------

TITLE: Stopping the Balancer in MongoDB Sharded Cluster
DESCRIPTION: This snippet demonstrates how to stop the balancer in a MongoDB sharded cluster using the sh.stopBalancer() method and verify its state using sh.getBalancerState().

LANGUAGE: javascript
CODE:
sh.stopBalancer()

sh.getBalancerState()

----------------------------------------

TITLE: Querying Multiple Data Types
DESCRIPTION: Shows how to query for multiple BSON types using the grades collection with classAverage fields of different types.

LANGUAGE: javascript
CODE:
db.grades.insertMany( [
    { _id : 1, name : "Alice King" , classAverage : 87.333333333333333 },
    { _id : 2, name : "Bob Jenkins", classAverage : "83.52" },
    { _id : 3, name : "Cathy Hart", classAverage: "94.06" },
    { _id : 4, name : "Drew Williams" , classAverage : NumberInt("93") }
] )

----------------------------------------

TITLE: Defining $indexOfBytes Operator Syntax in MongoDB Aggregation
DESCRIPTION: Demonstrates the syntax for using the $indexOfBytes operator in MongoDB aggregation pipelines. It shows how to specify the string expression, substring expression, and optional start and end positions.

LANGUAGE: javascript
CODE:
{ $indexOfBytes: [ <string expression>, <substring expression>, <start>, <end> ] }

----------------------------------------

TITLE: Combining Multiple Collections with $unionWith in MongoDB
DESCRIPTION: Demonstrates how to use $unionWith to combine data from multiple collections (sales_2017, sales_2018, sales_2019, sales_2020) into a single result set, setting the year in the _id field and sorting the results.

LANGUAGE: javascript
CODE:
db.sales_2017.aggregate( [ 
   { $set: { _id: "2017" } },
   { $unionWith: { coll: "sales_2018", pipeline: [ { $set: { _id: "2018" } } ] } },
   { $unionWith: { coll: "sales_2019", pipeline: [ { $set: { _id: "2019" } } ] } },
   { $unionWith: { coll: "sales_2020", pipeline: [ { $set: { _id: "2020" } } ] } },
   { $sort: { _id: 1, store: 1, item: 1 } }
] )

----------------------------------------

TITLE: Generating a Base64 Encoded Keyfile for MongoDB Encryption
DESCRIPTION: This command uses OpenSSL to generate a 32-byte random string and base64 encode it, saving the result to a keyfile for use with MongoDB's local key management encryption.

LANGUAGE: bash
CODE:
openssl rand -base64 32 > mongodb-keyfile

----------------------------------------

TITLE: Updating Nested Arrays with $[<identifier>] and $[]
DESCRIPTION: Shows how to use $[<identifier>] in combination with $[] to update elements in nested arrays based on multiple conditions.

LANGUAGE: javascript
CODE:
db.students4.updateMany(
   {},
   { $inc: { "grades.$[t].questions.$[score]": 2 } },
   { arrayFilters: [ { "t.type": "quiz" }, { "score": { $gte: 8 } } ] }
)

----------------------------------------

TITLE: Using $cond in MongoDB Aggregation Pipeline (JavaScript)
DESCRIPTION: Demonstrates the use of $cond operator in a MongoDB aggregation pipeline. It projects the 'item' field and adds a 'discount' field based on the 'qty' value, using the object syntax of $cond.

LANGUAGE: javascript
CODE:
db.inventory.aggregate(
   [
      {
         $project:
           {
             item: 1,
             discount:
               {
                 $cond: { if: { $gte: [ "$qty", 250 ] }, then: 30, else: 20 }
               }
           }
      }
   ]
)

----------------------------------------

TITLE: ReStructuredText Document Structure and Variables
DESCRIPTION: Defines document metadata, variables, and includes for a MongoDB installation guide using reStructuredText markup. Sets up page structure and common replacement variables for the documentation.

LANGUAGE: rst
CODE:
.. _install-enterprise-windows-msiexec:

===========================================================
Install MongoDB Enterprise on Windows using ``msiexec.exe``
===========================================================

.. meta::
   :keywords: on-prem

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. |arrow| unicode:: U+27A4
.. |edition| replace:: Enterprise
.. |distro-name| replace:: Windows
.. |executable-name| replace:: ``mongod.exe``
.. |mdb-download-link| replace:: `MongoDB Download Center <https://www.mongodb.com/try/download/enterprise?tck=docs_server>`__

.. include:: /includes/in-dev.rst

.. include:: /includes/rapid-release.rst

----------------------------------------

TITLE: Monthly Sales Materialized View Function
DESCRIPTION: Function to create and update a materialized view of monthly sales data using aggregation pipeline with $match, $group, and $merge stages.

LANGUAGE: javascript
CODE:
updateMonthlySales = function(startDate) {
  db.bakesales.aggregate( [
    { $match: { date: { $gte: startDate } } },
    { $group: { _id: { $dateToString: { format: "%Y-%m", date: "$date" } }, sales_quantity: { $sum: "$quantity"}, sales_amount: { $sum: "$amount" } } },
    { $merge: { into: "monthlybakesales", whenMatched: "replace" } } 
  ] );   
};

----------------------------------------

TITLE: Insert Multiple Documents Example
DESCRIPTION: Example showing how to insert multiple documents with score arrays.

LANGUAGE: javascript
CODE:
db.students.insertMany( [
   { _id: 2, scores: [ 45, 78, 38, 80, 89 ] } ,
   { _id: 3, scores: [ 46, 78, 38, 80, 89 ] } ,
   { _id: 4, scores: [ 47, 78, 38, 80, 89 ] } 
] )

----------------------------------------

TITLE: Inserting Multiple Documents into MongoDB Collection
DESCRIPTION: Uses insertMany() to insert 5 inventory documents with _id, item, description and qty fields into the inventory collection. Each document represents a product with unique identifiers and quantity values.

LANGUAGE: javascript
CODE:
db.inventory.insertMany( [
   { _id : 1, item : "abc1", description: "product 1", qty: 300 },
   { _id : 2, item : "abc2", description: "product 2", qty: 200 },
   { _id : 3, item : "xyz1", description: "product 3", qty: 250 },
   { _id : 4, item : "VWZ1", description: "product 4", qty: 300 },
   { _id : 5, item : "VWZ2", description: "product 5", qty: 180 }
] )

----------------------------------------

TITLE: Updating Nested Array Elements with $[<identifier>]
DESCRIPTION: Shows how to use $[<identifier>] with dot notation to update fields in embedded documents within an array.

LANGUAGE: javascript
CODE:
db.students2.updateMany(
   { },
   { $set: { "grades.$[elem].mean" : 100 } },
   { arrayFilters: [ { "elem.grade": { $gte: 85 } } ] }
)

----------------------------------------

TITLE: Enabling Multiple Authentication Mechanisms
DESCRIPTION: Command-line option to enable multiple authentication mechanisms including Kerberos (GSSAPI) and SCRAM-SHA-256.

LANGUAGE: bash
CODE:
--setParameter authenticationMechanisms=GSSAPI,SCRAM-SHA-256

----------------------------------------

TITLE: Specifying Geospatial Index in $geoNear with 'key' Option
DESCRIPTION: Demonstrates how to use the 'key' option in $geoNear to specify which geospatial index to use when a collection has multiple geospatial indexes. It also includes a $limit stage to restrict the number of results.

LANGUAGE: javascript
CODE:
db.places.aggregate([
   {
     $geoNear: {
        near: { type: "Point", coordinates: [ -73.98142 , 40.71782 ] },
        key: "location",
        distanceField: "dist.calculated",
        query: { "category": "Parks" }
     }
   },
   { $limit: 5 }
])

----------------------------------------

TITLE: Counting Documents with $match and $count
DESCRIPTION: Demonstrates combining $match and $count stages to count documents meeting specific criteria. This example counts documents with scores greater than 80.

LANGUAGE: javascript
CODE:
db.scores.aggregate( [
   { $match: { score: { $gt: 80 } } },
   { $count: "passing_scores" }
] )

----------------------------------------

TITLE: MongoDB Find with Let Variables Example
DESCRIPTION: Example demonstrating find command using let option to define variables for use in the query.

LANGUAGE: javascript
CODE:
db.cakeFlavors.runCommand( {
   find: db.cakeFlavors.getName(),
   filter: { $expr: { $eq: [ "$flavor", "$$targetFlavor" ] } },
   let : { targetFlavor: "chocolate" }
} )

----------------------------------------

TITLE: Dropping a Specific Index by Specification in MongoDB (JavaScript)
DESCRIPTION: This snippet shows how to drop a specific index from a MongoDB collection by providing the index specification document to the db.collection.dropIndexes() method.

LANGUAGE: javascript
CODE:
db.collection.dropIndexes( { a: 1, b: 1 } )

----------------------------------------

TITLE: Unordered Insert with Duplicate _id Fields
DESCRIPTION: Example of an unordered insert operation with duplicate _id fields. The operation continues processing remaining documents even if some inserts fail due to duplicate keys.

LANGUAGE: javascript
CODE:
try {
   db.products.insertMany( [
      { _id: 10, item: "large box", qty: 20 },
      { _id: 11, item: "small box", qty: 55 },
      { _id: 11, item: "medium box", qty: 30 },
      { _id: 12, item: "envelope", qty: 100},
      { _id: 13, item: "stamps", qty: 125 },
      { _id: 13, item: "tape", qty: 20},
      { _id: 14, item: "bubble wrap", qty: 30}
   ], { ordered: false } );
} catch (e) {
   print (e);
}

----------------------------------------

TITLE: Using Hint with Distinct Command in MongoDB
DESCRIPTION: Examples of specifying an index hint for the distinct command, using both index name and index pattern.

LANGUAGE: javascript
CODE:
db.runCommand ( { distinct: "inventory", key: "dept", hint: "sizes" } )

db.runCommand ( { distinct: "inventory", key: "dept", hint: { sizes: 1 } } )

----------------------------------------

TITLE: Defining MongoDB Change Stream Syntax
DESCRIPTION: Demonstrates the syntax structure for the $changeStream aggregation stage with all available configuration options.

LANGUAGE: text
CODE:
{
  $changeStream: {
    allChangesForCluster: <boolean>,
    fullDocument: <string>,
    fullDocumentBeforeChange: <string>,
    resumeAfter: <document>
    showExpandedEvents: <boolean>,
    startAfter: <document>
    startAtOperationTime: <timestamp>
  }
}

----------------------------------------

TITLE: MongoDB SRV Connection String Format
DESCRIPTION: Basic format for MongoDB SRV connection strings used to connect to MongoDB instances.

LANGUAGE: text
CODE:
mongodb+srv://[username:password@]host[/[defaultauthdb][?options]]

----------------------------------------

TITLE: Creating MongoClient Instance for Queryable Encryption in Go
DESCRIPTION: This code snippet demonstrates how to create a MongoClient instance in Go for queryable encryption. It configures the client with the necessary auto-encryption options.

LANGUAGE: go
CODE:
clientOpts := options.Client().ApplyURI("<Your MongoDB URI>")
clientOpts.SetAutoEncryption(&options.AutoEncryptionOptions{
    KeyVaultNamespace: "encryption.__keyVault",
    KmsProviders:      kmsProviders,
})
client, err := mongo.Connect(context.TODO(), clientOpts)

----------------------------------------

TITLE: Field Inclusion SQL Example
DESCRIPTION: SQL example showing specific field selection equivalent to MongoDB field inclusion

LANGUAGE: sql
CODE:
SELECT _id, item, status from inventory WHERE status = "A"

----------------------------------------

TITLE: Querying Documents using MongoDB $box Operator Syntax
DESCRIPTION: Basic syntax template for using the $box operator within a $geoWithin query. Requires specifying bottom left and top right coordinates of the rectangle in an array format.

LANGUAGE: javascript
CODE:
{
  <location field>: {
     $geoWithin: {
        $box: [
          [ <bottom left coordinates> ],
          [ <upper right coordinates> ]
        ]
     }
  }
}

----------------------------------------

TITLE: Using MongoDB Cursor Limit Method in JavaScript
DESCRIPTION: Basic syntax for applying a limit to a MongoDB query using the cursor.limit() method. The method takes a numeric value to specify the maximum number of documents to return from the query.

LANGUAGE: javascript
CODE:
db.collection.find(<query>).limit(<number>)

----------------------------------------

TITLE: MongoDB Compass Query Filter
DESCRIPTION: Query filter for MongoDB Compass GUI that finds documents with status 'A' AND either quantity less than 30 OR item name starting with 'p'

LANGUAGE: javascript
CODE:
{ status: "A", $or: [ { qty: { $lt: 30 } }, { item: /^p/ } ] }

----------------------------------------

TITLE: Check Current Balancing Window
DESCRIPTION: Queries the config database to view the current balancing window configuration.

LANGUAGE: javascript
CODE:
use config
db.settings.find( { _id: "balancer" } )

----------------------------------------

TITLE: Querying Embedded Documents Using MongoDB Shell
DESCRIPTION: Demonstrates how to query documents in the inventory collection where the embedded field 'size.h' is less than 15 using the MongoDB shell.

LANGUAGE: javascript
CODE:
db.inventory.find( { "size.h": { $lt: 15 } } )

----------------------------------------

TITLE: Bulk Insert Example in MongoDB
DESCRIPTION: Example demonstrating how to insert multiple documents in a single command with write concern settings and unordered execution.

LANGUAGE: javascript
CODE:
db.runCommand(
   {
      insert: "users",
      documents: [
         { _id: 2, user: "ijk123", status: "A" },
         { _id: 3, user: "xyz123", status: "P" },
         { _id: 4, user: "mop123", status: "P" }
      ],
      ordered: false,
      writeConcern: { w: "majority", wtimeout: 5000 }
   }
)

----------------------------------------

TITLE: Standard MongoDB Connection String
DESCRIPTION: Standard MongoDB connection string format with authentication credentials and connection options used by most drivers.

LANGUAGE: bash
CODE:
mongodb+srv://myDatabaseUser:D1fficultP%40ssw0rd@cluster0.example.mongodb.net/?retryWrites=true&w=majority

----------------------------------------

TITLE: Querying Field with Period Using $getField in MongoDB
DESCRIPTION: This example shows how to query for documents where a field with a period ('price.usd') is greater than a certain value. It uses the $getField operator to correctly reference the field name containing a period.

LANGUAGE: javascript
CODE:
db.inventory.find(
   { 
      $expr: 
         { 
            $gt: [ { $getField: "price.usd" }, 40 ]
         }
   }
)

----------------------------------------

TITLE: Creating a Compound Wildcard Index in MongoDB
DESCRIPTION: This snippet demonstrates how to create a compound wildcard index on the salesData collection, indexing the tenantId field and all sub-fields of customFields.

LANGUAGE: javascript
CODE:
db.runCommand(
   {
       createIndexes: "salesData",
       indexes: [
          {
             key: {
                tenantId: 1,
                "customFields.$**": 1
             },
             name: "tenant_customFields"
          }
       ]
   }
)

----------------------------------------

TITLE: MongoDB Insert Document with Angle in Degrees
DESCRIPTION: Example showing how to insert a document containing an angle value stored as a decimal.

LANGUAGE: javascript
CODE:
db.trigonometry.insertOne(
   {
      "_id" : ObjectId( "5c50782193f833234ba90d25" ),
      "angle" : NumberDecimal( "53.1301023541559787031443874490659" )
   }
)

----------------------------------------

TITLE: Executing count Command in MongoDB
DESCRIPTION: Syntax for running the count command in MongoDB. It specifies the collection or view to count, optional query criteria, limit, skip, hint, read concern, max time, collation, and comment.

LANGUAGE: javascript
CODE:
db.runCommand(
   {
     count: <collection or view>,
     query: <document>,
     limit: <integer>,
     skip: <integer>,
     hint: <hint>,
     readConcern: <document>,
     maxTimeMS: <integer>,
     collation: <document>,
     comment: <any>
   }
)

----------------------------------------

TITLE: Inserting Document with Period in Field Name in MongoDB
DESCRIPTION: This snippet demonstrates how to insert a document containing a field name with a period ('price.usd') into a MongoDB collection. The field name is enclosed in quotes to ensure proper handling.

LANGUAGE: javascript
CODE:
db.inventory.insertOne(
   { 
      "item" : "sweatshirt", 
      "price.usd": 45.99,
      "quantity": 20
   }
)

----------------------------------------

TITLE: Random Document Selection in MongoDB Using $rand
DESCRIPTION: Shows how to use $rand to randomly select documents from a collection of voter records. The example demonstrates filtering by district and using $rand with $expr to randomly select approximately half of the matching documents.

LANGUAGE: javascript
CODE:
db.voters.insertMany(
   [
     { name: "Archibald", voterId: 4321, district: 3, registered: true },
     { name: "Beckham", voterId: 4331, district: 3, registered: true },
     { name: "Carolin", voterId: 5321, district: 4, registered: true },
     { name: "Debarge", voterId: 4343, district: 3, registered: false },
     { name: "Eckhard", voterId: 4161, district: 3, registered: false },
     { name: "Faberge", voterId: 4300, district: 1, registered: true },
     { name: "Grimwald", voterId: 4111, district: 3, registered: true },
     { name: "Humphrey", voterId: 2021, district: 3, registered: true },
     { name: "Idelfon", voterId: 1021, district: 4, registered: true },
     { name: "Justo", voterId: 9891, district: 3, registered: false }
   ]
)

LANGUAGE: javascript
CODE:
db.voters.aggregate(
   [
      { $match: { district: 3 } },
      { $match: { $expr: { $lt: [0.5, {$rand: {} } ] } } },
      { $project: { _id: 0, name: 1, registered: 1 } }
   ]
)

----------------------------------------

TITLE: Checking MongoDB Cursor Status using isClosed()
DESCRIPTION: Method that returns a boolean indicating whether the server has closed the cursor. A true value means the cursor is closed, though it may still have documents in its last received batch. Use isExhausted() or hasNext() to check if the cursor is fully exhausted.

LANGUAGE: javascript
CODE:
cursor.isClosed()

----------------------------------------

TITLE: Updating with Collation
DESCRIPTION: An example of using collation to perform language-specific string comparisons during the update.

LANGUAGE: javascript
CODE:
db.myColl.updateMany(
   { category: "cafe" },
   { $set: { status: "Updated" } },
   { collation: { locale: "fr", strength: 1 } }
);

----------------------------------------

TITLE: Querying MongoDB with Condition and Comparison in MongoDB Compass
DESCRIPTION: This snippet shows the filter to be used in MongoDB Compass for querying documents where the status is 'A' and the quantity is less than 30.

LANGUAGE: javascript
CODE:
{ status: "A", qty: { $lt: 30 } }

----------------------------------------

TITLE: Changing User Password Directly in MongoDB JavaScript Shell
DESCRIPTION: This example shows how to change the password for a user named 'accountUser' in the 'products' database by directly passing the new password as a string.

LANGUAGE: javascript
CODE:
use products
db.changeUserPassword("accountUser", "SOh3TbYhx8ypJPxmt1oOfL")

----------------------------------------

TITLE: Creating 2dsphere Index in MongoDB using JavaScript
DESCRIPTION: This snippet demonstrates how to create a 2dsphere index using the db.collection.createIndex() method. The index is created on a location field that contains either a GeoJSON object or legacy coordinates pair. This index type is essential for efficient geospatial queries in MongoDB.

LANGUAGE: javascript
CODE:
db.collection.createIndex( { <location field> : "2dsphere" } )

----------------------------------------

TITLE: Basic Geospatial Query using $geoWithin
DESCRIPTION: Example of a geospatial query using $geoWithin operator to find documents within a specified polygon boundary.

LANGUAGE: javascript
CODE:
{ 
  "coordinates": { 
    $geoWithin: { 
      $geometry: { 
        type: "Polygon", 
        coordinates: [ 
          [ 
            [-80.0, 10.00], [ -80.0, 9.00], [ -79.0, 9.0], [ -79.0, 10.00 ], [ -80.0, 10.0 ] 
          ] 
        ] 
      } 
    } 
  } 
}

----------------------------------------

TITLE: Densifying Data with Partitions in MongoDB
DESCRIPTION: Example of using $densify with partitions to densify data for different coffee varieties. It demonstrates densifying the full range of values and densifying values within each partition.

LANGUAGE: javascript
CODE:
db.coffee.insertMany( [ 
   {
      "altitude": 600,
      "variety": "Arabica Typica",
      "score": 68.3
   },
   {
      "altitude": 750,
      "variety": "Arabica Typica",
      "score": 69.5
   },
   {
      "altitude": 950,
      "variety": "Arabica Typica",
      "score": 70.5
   },
   {
      "altitude": 1250,
      "variety": "Gesha",
      "score": 88.15
   },
   {
     "altitude": 1700,
     "variety": "Gesha",
     "score": 95.5,
     "price": 1029
   }
] )

db.coffee.aggregate( [
   {
      $densify: {
         field: "altitude",
         partitionByFields: [ "variety" ],
         range: {
            bounds: "full",
            step: 200
         }
      }
   }
] )

db.coffee.aggregate( [
   {
      $densify: {
         field: "altitude",
         partitionByFields: [ "variety" ],
         range: {
            bounds: "partition",
            step: 200
         }
      }
   }
] )

----------------------------------------

TITLE: Creating a Time Series Collection in MongoDB
DESCRIPTION: Uses db.createCollection() to create a 'weather' time series collection with specified timeField, metaField, granularity, and expiration settings.

LANGUAGE: javascript
CODE:
db.createCollection(
   "weather",
   {
      timeseries: {
         timeField: "timestamp",
         metaField: "metadata",
         granularity: "seconds"
      },
      expireAfterSeconds: 86400
   }
)

----------------------------------------

TITLE: Interpreting balancerCollectionStatus Output in MongoDB
DESCRIPTION: This snippet shows an example output of the balancerCollectionStatus command during defragmentation. It includes information about the balancer compliance, current phase, and remaining work to be done.

LANGUAGE: javascript
CODE:
{
   "balancerCompliant": false,
   "firstComplianceViolation": "defragmentingChunks",
   "details": {
      "currentPhase": "moveAndMergeChunks",
      "progress": { "remainingChunksToProcess": 1 }
   }
}

----------------------------------------

TITLE: Configuring MongoDB Config Server with YAML
DESCRIPTION: YAML configuration for setting up a MongoDB config server. It specifies the cluster role, replica set name, and network binding options.

LANGUAGE: yaml
CODE:
sharding:
  clusterRole: configsvr
replication:
  replSetName: <replica set name>
net:
  bindIp: localhost,<hostname(s)|ip address(es)>

----------------------------------------

TITLE: Updating All Array Elements with $[] Operator
DESCRIPTION: Shows how to use the $[] operator to increment all elements in the 'grades' array by 10 for all documents in a collection.

LANGUAGE: javascript
CODE:
db.students.updateMany(
   { },
   { $inc: { "grades.$[]":  10 } },
)

----------------------------------------

TITLE: Creating MongoDB Role with IdP Group Mapping
DESCRIPTION: Creates a MongoDB role that maps an identity provider group (e.g., Okta) to MongoDB database permissions. This example grants readWriteAnyDatabase access to members of the 'Everyone' group.

LANGUAGE: javascript
CODE:
db.createRole( { 
   role: "okta/Everyone", 
   privileges: [ ], 
   roles: [ "readWriteAnyDatabase" ] 
} )

----------------------------------------

TITLE: Adding a Shard to a Zone in MongoDB
DESCRIPTION: This snippet demonstrates how to add a shard to a zone called 'NYC' using the sh.addShardToZone() method.

LANGUAGE: javascript
CODE:
sh.addShardToZone(<shard name>, "NYC")

----------------------------------------

TITLE: Querying GeoJSON Polygons with $geoWithin in MongoDB
DESCRIPTION: Demonstrates the syntax for using $geoWithin with GeoJSON polygons or multipolygons using the default coordinate reference system (CRS) in MongoDB.

LANGUAGE: javascript
CODE:
{
   <location field>: {
      $geoWithin: {
         $geometry: {
            type: <"Polygon" or "MultiPolygon"> ,
            coordinates: [ <coordinates> ]
         }
      }
   }
}

----------------------------------------

TITLE: Dropping MongoDB Index by Specification
DESCRIPTION: Example showing how to drop an index using its specification document.

LANGUAGE: javascript
CODE:
db.pets.dropIndex( { "cat" : -1 } )

----------------------------------------

TITLE: Defining $exp Operator in MongoDB Aggregation
DESCRIPTION: Shows the syntax for using the $exp operator in a MongoDB aggregation pipeline. The operator takes an exponent expression as its argument.

LANGUAGE: javascript
CODE:
{ $exp: <exponent> }

----------------------------------------

TITLE: Inserting Document with Majority Write Concern in MongoDB
DESCRIPTION: Demonstrates how to insert a document into MongoDB with majority write concern and timeout settings. The operation waits for acknowledgment from a majority of replica set members with a 5-second timeout limit.

LANGUAGE: javascript
CODE:
db.products.insertOne(
   { item: "envelopes", qty : 100, type: "Clasp" },
   { writeConcern: { w: "majority" , wtimeout: 5000 } }
)

----------------------------------------

TITLE: Creating MongoDB View with $lookup Join
DESCRIPTION: Creates a view named 'sales' that joins the orders and inventory collections using $lookup, with projection and unwinding of the joined fields.

LANGUAGE: javascript
CODE:
db.createView( "sales", "orders", [ 
   {
      $lookup:
         {
            from: "inventory",
            localField: "prodId",
            foreignField: "prodId",
            as: "inventoryDocs"
         }
   },
   {
      $project:
         {
           _id: 0, 
           prodId: 1, 
           orderId: 1,
           numPurchased: 1,
           price: "$inventoryDocs.price"
         }
   },
      { $unwind: "$price" }
] )

----------------------------------------

TITLE: Querying Polygon Intersection in MongoDB using JavaScript
DESCRIPTION: This example demonstrates how to use $geoIntersects to select all 'loc' data that intersects with a specified GeoJSON polygon. The polygon area is less than a single hemisphere.

LANGUAGE: javascript
CODE:
db.places.find(
   {
     loc: {
       $geoIntersects: {
          $geometry: {
             type: "Polygon" ,
             coordinates: [
               [ [ 0, 0 ], [ 3, 6 ], [ 6, 1 ], [ 0, 0 ] ]
             ]
          }
       }
     }
   }
)

----------------------------------------

TITLE: Creating Encryption Schema for MongoDB Queryable Encryption
DESCRIPTION: This snippet demonstrates how to create an encryption schema for a MongoDB collection. The schema defines which fields should be encrypted and specifies the encryption algorithms to be used.

LANGUAGE: javascript
CODE:
const encryptedFields = {
  "medicalRecords.patients": {
    fields: [
      {
        keyId: UUID("68b39915-1b48-4ef2-9a79-686968f3e751"),
        path: "ssn",
        bsonType: "string",
        queries: { queryType: "equality" }
      },
      {
        keyId: UUID("9a7f82af-f647-4cd2-8fd6-82d64aa49d31"),
        path: "bloodType",
        bsonType: "string",
        queries: { queryType: "equality" }
      }
    ]
  }
};

LANGUAGE: python
CODE:
encrypted_fields = {
    "medicalRecords.patients": {
        "fields": [
            {
                "keyId": UUID("68b39915-1b48-4ef2-9a79-686968f3e751"),
                "path": "ssn",
                "bsonType": "string",
                "queries": {"queryType": "equality"}
            },
            {
                "keyId": UUID("9a7f82af-f647-4cd2-8fd6-82d64aa49d31"),
                "path": "bloodType",
                "bsonType": "string",
                "queries": {"queryType": "equality"}
            }
        ]
    }
}

LANGUAGE: java
CODE:
String jsonSchema = """
    {
        "medicalRecords.patients": {
            "fields": [
                {
                    "keyId": {
                        "$binary": {
                            "base64": "aLOZFRtIT+KaeWaJaG8+dQ==",
                            "subType": "04"
                        }
                    },
                    "path": "ssn",
                    "bsonType": "string",
                    "queries": { "queryType": "equality" }
                },
                {
                    "keyId": {
                        "$binary": {
                            "base64": "mn+Cr/ZHTNKv1oLWSqSdMQ==",
                            "subType": "04"
                        }
                    },
                    "path": "bloodType",
                    "bsonType": "string",
                    "queries": { "queryType": "equality" }
                }
            ]
        }
    }
""";
BsonDocument encryptedFields = BsonDocument.parse(jsonSchema);

LANGUAGE: go
CODE:
encryptedFields := bson.M{
    "medicalRecords.patients": bson.M{
        "fields": []bson.M{
            {
                "keyId":    primitive.Binary{Subtype: 4, Data: []byte{104, 179, 153, 21, 27, 72, 79, 226, 154, 121, 102, 137, 104, 111, 62, 117}},
                "path":     "ssn",
                "bsonType": "string",
                "queries":  bson.M{"queryType": "equality"},
            },
            {
                "keyId":    primitive.Binary{Subtype: 4, Data: []byte{154, 127, 130, 175, 246, 71, 76, 210, 175, 214, 130, 214, 74, 164, 157, 49}},
                "path":     "bloodType",
                "bsonType": "string",
                "queries":  bson.M{"queryType": "equality"},
            },
        },
    },
}

LANGUAGE: csharp
CODE:
var encryptedFields = new BsonDocument
{
    {
        "medicalRecords.patients", new BsonDocument
        {
            {
                "fields", new BsonArray
                {
                    new BsonDocument
                    {
                        { "keyId", new Guid("68b39915-1b48-4ef2-9a79-686968f3e751") },
                        { "path", "ssn" },
                        { "bsonType", "string" },
                        { "queries", new BsonDocument { { "queryType", "equality" } } }
                    },
                    new BsonDocument
                    {
                        { "keyId", new Guid("9a7f82af-f647-4cd2-8fd6-82d64aa49d31") },
                        { "path", "bloodType" },
                        { "bsonType", "string" },
                        { "queries", new BsonDocument { { "queryType", "equality" } } }
                    }
                }
            }
        }
    }
};

----------------------------------------

TITLE: Configuring MongoDB Server with X.509 Certificates
DESCRIPTION: Example configuration file for a MongoDB server using X.509 certificates for TLS and cluster authentication. It specifies paths for certificate files and sets the cluster authentication mode to x509.

LANGUAGE: yaml
CODE:
net.tls.mode: requireTLS
net.tls.certificateKeyFile: "./mycerts/10gen-server1.pem"
net.tls.CAFile: "./mycerts/ca.pem"

security.clusterAuthMode: x509
net.tls.clusterFile:  "./mycerts/10gen-cluster1.pem"
net.tls.clusterCAFile: "./mycerts/ca.pem"

----------------------------------------

TITLE: Case-Insensitive Regular Expression Match in MongoDB
DESCRIPTION: Shows how to perform a case-insensitive match using the 'i' option with $regex.

LANGUAGE: javascript
CODE:
db.products.find( { sku: { $regex: /^ABC/i } } )

----------------------------------------

TITLE: Checking Secondary Replication Info in MongoDB
DESCRIPTION: Uses the rs.printSecondaryReplicationInfo() method to display the syncedTo value for each replica set member, showing the time of the last oplog entry written to the secondary.

LANGUAGE: javascript
CODE:
rs.printSecondaryReplicationInfo()

----------------------------------------

TITLE: Calculating Discounted Price with $reduce in MongoDB
DESCRIPTION: Uses $reduce to apply multiple discounts to a product's price, calculating the final discounted price.

LANGUAGE: javascript
CODE:
db.clothes.aggregate(
  [
    {
      $project: {
        discountedPrice: {
          $reduce: {
            input: "$discounts",
            initialValue: "$price",
            in: { $multiply: [ "$$value", { $subtract: [ 1, "$$this" ] } ] }
          }
        }
      }
    }
  ]
)

----------------------------------------

TITLE: Creating New Fields Based on Existing Fields with $set in MongoDB
DESCRIPTION: Shows how to use $set to create a new field that contains a calculated value based on existing fields, such as computing an average from an array.

LANGUAGE: javascript
CODE:
db.scores.aggregate( [
  {
    $set: {
      quizAverage: { $avg: "$quiz" } 
    }
  }
] )

----------------------------------------

TITLE: Connecting to MongoDB with Client Certificate
DESCRIPTION: Command to connect to a MongoDB instance using mongosh with TLS/SSL, presenting a client certificate and validating the server certificate.

LANGUAGE: bash
CODE:
mongosh --tls --host hostname.example.com --tlsCertificateKeyFile /etc/ssl/client.pem --tlsCAFile /etc/ssl/caToValidateServerCertificates.pem

----------------------------------------

TITLE: Calling db.help() Method in MongoDB
DESCRIPTION: This snippet demonstrates how to call the db.help() method in MongoDB. The method returns text output listing common methods available on the db object.

LANGUAGE: javascript
CODE:
db.help()

----------------------------------------

TITLE: Example removeShard Command Execution
DESCRIPTION: Demonstrates executing the removeShard command to remove a shard named 'bristol01' and shows the initial response indicating the draining process has started.

LANGUAGE: javascript
CODE:
db.adminCommand( { removeShard : "bristol01" } )

----------------------------------------

TITLE: Update Command Basic Syntax
DESCRIPTION: Basic syntax for the MongoDB update command showing the core structure and required fields

LANGUAGE: javascript
CODE:
db.runCommand(
   {
      update: <collection>,
      updates: [
         {
           q: <query>,
           u: <document or pipeline>,
           c: <document>, // Added in MongoDB 5.0
           upsert: <boolean>,
           multi: <boolean>,
           collation: <document>,
           arrayFilters: <array>,
           hint: <document|string>,
           sort: <document>
         },
         ...
      ],
      ordered: <boolean>,
      maxTimeMS: <integer>,
      writeConcern: { <write concern> },
      bypassDocumentValidation: <boolean>,
      comment: <any>,
      let: <document> // Added in MongoDB 5.0
   }
)

----------------------------------------

TITLE: Group and Sum by Multiple Fields in MongoDB
DESCRIPTION: MongoDB aggregation pipeline to group by customer ID and order date, summing the 'price' field for each group, equivalent to SQL's GROUP BY on multiple columns and SUM() operation.

LANGUAGE: javascript
CODE:
db.orders.aggregate( [
   {
     $group: {
        _id: {
           cust_id: "$cust_id",
           ord_date: { $dateToString: {
              format: "%Y-%m-%d",
              date: "$ord_date"
           }}
        },
        total: { $sum: "$price" }
     }
   }
] )

----------------------------------------

TITLE: Creating a Compound Index in MongoDB
DESCRIPTION: This snippet demonstrates the prototype for creating a compound index in MongoDB. Compound indexes can include up to 32 fields and are useful for optimizing queries that frequently use multiple fields.

LANGUAGE: javascript
CODE:
{ "item": 1, "location": 1, "stock": 1 }

----------------------------------------

TITLE: MongoDB Collection Initialization Example
DESCRIPTION: Example showing how to insert multiple documents into an inventory collection for demonstration purposes.

LANGUAGE: javascript
CODE:
db.inventory.insertMany( [
   { _id: 1, item: { name: "ab", code: "123" }, qty: 15, tags: [ "A", "B", "C" ] },
   { _id: 2, item: { name: "cd", code: "123" }, qty: 20, tags: [ "B" ] },
   { _id: 3, item: { name: "ij", code: "456" }, qty: 25, tags: [ "A", "B" ] },
   { _id: 4, item: { name: "xy", code: "456" }, qty: 30, tags: [ "B", "A" ] },
   { _id: 5, item: { name: "mn", code: "000" }, qty: 20, tags: [ [ "A", "B" ], "C" ] }
] )

----------------------------------------

TITLE: Creating an Index with Collation in MongoDB
DESCRIPTION: Creates an index named category_fr with a collation specifying the French locale and strength 2.

LANGUAGE: javascript
CODE:
db.collection.createIndex(
   { category: 1 },
   { name: "category_fr", collation: { locale: "fr", strength: 2 } }
)

----------------------------------------

TITLE: Creating MongoDB User with OIDC Identity
DESCRIPTION: Creates a MongoDB user mapped to an OIDC identity with specific role permissions. This example creates a user with readWriteAnyDatabase access using Okta as the identity provider.

LANGUAGE: javascript
CODE:
db.createUser( {
   user: "okta/jane.doe", 
   roles: [
      {
         role: "readWriteAnyDatabase", 
         db: "admin"
      }
   ]
} )

----------------------------------------

TITLE: Adding Moderate Validation to MongoDB Collection
DESCRIPTION: This snippet shows how to add a validator with moderate validation level to the 'contacts' collection. It uses the same JSON Schema as the strict validation example but with different behavior for existing documents.

LANGUAGE: javascript
CODE:
db.runCommand( {
   collMod: "contacts", 
   validator: { $jsonSchema: {
      bsonType: "object",
      required: [ "phone", "name" ],
      properties: {
         phone: {
            bsonType: "string",
            description: "phone must be a string and is required"
         },
         name: {
            bsonType: "string",
            description: "name must be a string and is required"
         }
      }
   } },
   validationLevel: "moderate"
} )

----------------------------------------

TITLE: Executing MongoDB Ping Command
DESCRIPTION: The ping command is a simple diagnostic tool that tests if a MongoDB server is responding. It returns immediately even if the server is write-locked. The numeric value passed to the ping command does not affect its behavior.

LANGUAGE: javascript
CODE:
db.runCommand(
   { 
     ping: 1 
   }
)

----------------------------------------

TITLE: Inserting Document with Date and Serializing
DESCRIPTION: Demonstrates inserting a document with a Date field and then serializing it to Extended JSON format.

LANGUAGE: javascript
CODE:
db.conversions.insertOne( { insertDate: new Date() } )

serialized = EJSON.serialize( db.conversions.findOne() )

----------------------------------------

TITLE: Creating Basic Wildcard Index in MongoDB
DESCRIPTION: Creates a basic wildcard index using the $** specifier as the index key. The sortOrder parameter determines the index sort direction.

LANGUAGE: javascript
CODE:
db.collection.createIndex( { "$**": <sortOrder> } )

----------------------------------------

TITLE: Resizing MongoDB Oplog with replSetResizeOplog Command
DESCRIPTION: JavaScript command to change the oplog size using the replSetResizeOplog command. This example sets the oplog size to 16 gigabytes (16000 megabytes). The size must be greater than 990 megabytes and is specified as a Double.

LANGUAGE: javascript
CODE:
db.adminCommand({replSetResizeOplog: 1, size: Double(16000)})

----------------------------------------

TITLE: Creating Index Using MongoDB Shell
DESCRIPTION: Creates an ascending index on the 'name' field using the MongoDB shell command

LANGUAGE: javascript
CODE:
db.collection.createIndex( { name: 1 } )

----------------------------------------

TITLE: Subtracting Numbers in MongoDB Aggregation
DESCRIPTION: Aggregation pipeline using $subtract to compute total by subtracting discount from sum of price and fee.

LANGUAGE: javascript
CODE:
db.sales.aggregate( [ { $project: { item: 1, total: { $subtract: [ { $add: [ "$price", "$fee" ] }, "$discount" ] } } } ] )

----------------------------------------

TITLE: Updating Top-Level Fields with $set in MongoDB JavaScript
DESCRIPTION: Uses $set to update multiple top-level fields in a document, including a scalar value, an embedded document, and an array.

LANGUAGE: javascript
CODE:
db.products.updateOne(
   { _id: 100 },
   { $set:
      {
        quantity: 500,
        details: { model: "2600", make: "Fashionaires" },
        tags: [ "coats", "outerwear", "clothing" ]
      }
   }
)

----------------------------------------

TITLE: Calculating Total Size of MongoDB Collection
DESCRIPTION: The db.collection.totalSize() method returns the total size in bytes of the data in the collection plus the size of every index on the collection. This includes compressed sizes for both data and indexes if compression is enabled.

LANGUAGE: mongodb
CODE:
db.collection.totalSize()

----------------------------------------

TITLE: Basic MongoDB $gt Operator Syntax
DESCRIPTION: Demonstrates the basic syntax for using the $gt operator in MongoDB queries. The operator selects documents where a field value is greater than the specified value.

LANGUAGE: javascript
CODE:
{ field: { $gt: value } }

----------------------------------------

TITLE: Connecting to a Local Replica Set
DESCRIPTION: Shows how to connect to a replica set with all members running on localhost but on different ports. This example includes multiple host:port combinations in the connection string with authentication.

LANGUAGE: shell
CODE:
mongodb://myDatabaseUser:D1fficultP%40ssw0rd@localhost:27017,localhost:27018,localhost:27019/?replicaSet=myReplicaSet

----------------------------------------

TITLE: Creating Case-Insensitive Index Basic Syntax - MongoDB JavaScript
DESCRIPTION: Basic syntax for creating a case-insensitive index using db.collection.createIndex() with collation options. The collation object specifies locale and strength parameters for case sensitivity control.

LANGUAGE: javascript
CODE:
db.collection.createIndex(
   {
      <field>: <sortOrder>
   },
   {
      collation:
         {
            locale : <locale>,
            strength : < 1 | 2 >
         }
   }
)

----------------------------------------

TITLE: Unlocking a MongoDB Sharded Cluster
DESCRIPTION: This snippet shows how to unlock a MongoDB sharded cluster using the db.fsyncUnlock() method and verify the unlock status using an aggregation pipeline.

LANGUAGE: javascript
CODE:
db.getSibling("admin").fsyncUnlock()

db.getSiblingDB("admin").aggregate( [
   {  $currentOp: { } },
   {  $facet: {
      "locked": [
         { $match: { $and: [
            { fsyncLock: { $exists: true } }
         ] } }],
       "unlocked": [
         { $match: { fsyncLock: { $exists: false } } }
       ]
   } },
   { $project: {
      "fsyncLocked": { $gt: [ { $size: "$locked" }, 0 ] },
      "fsyncUnlocked": { $gt: [ { $size: "$unlocked" }, 0 ] }
   } }
 ] )

----------------------------------------

TITLE: Creating an Index with Collation in MongoDB
DESCRIPTION: Creates an index named category_fr with a collation specifying the French locale and strength 2.

LANGUAGE: javascript
CODE:
db.collection.createIndex(
   { category: 1 },
   { name: "category_fr", collation: { locale: "fr", strength: 2 } }
)

----------------------------------------

TITLE: Retrieving a Specific Search Index in MongoDB Atlas
DESCRIPTION: This example demonstrates how to retrieve information about a specific Atlas Search index named 'synonym_mappings' on the 'movies' collection. It shows calling getSearchIndexes() with an index name parameter.

LANGUAGE: javascript
CODE:
db.movies.getSearchIndexes("synonym_mappings")

----------------------------------------

TITLE: Delete with Write Concern
DESCRIPTION: Example demonstrating deleteOne() with write concern options for replica set deployments.

LANGUAGE: javascript
CODE:
try {
   db.orders.deleteOne(
       { _id: ObjectId("563237a41a4d68582c2509da") },
       { w: "majority", wtimeout: 100 }
   );
} catch (e) {
   print (e);
}

----------------------------------------

TITLE: Complex MongoDB Query Using $and with Multiple $or Conditions in JavaScript
DESCRIPTION: Illustrates a more complex query using $and to combine multiple $or conditions. This query finds documents where qty is less than 10 or greater than 50, AND either sale is true or price is less than 5.

LANGUAGE: javascript
CODE:
db.inventory.find( {
    $and: [
        { $or: [ { qty: { $lt : 10 } }, { qty : { $gt: 50 } } ] },
        { $or: [ { sale: true }, { price : { $lt : 5 } } ] }
    ]
} )

----------------------------------------

TITLE: Creating Indexes on the keyTypes Collection in MongoDB
DESCRIPTION: This snippet creates two indexes on the 'keyTypes' collection: one on the 'seqNum' field and another on the 'seqType' field.

LANGUAGE: javascript
CODE:
db.keyTypes.createIndex( { seqNum: 1 } )

db.keyTypes.createIndex( { seqType: 1 } )

----------------------------------------

TITLE: Creating 2dsphere Indexes
DESCRIPTION: Creates geospatial indexes on the location and geometry fields of the restaurants and neighborhoods collections

LANGUAGE: javascript
CODE:
db.restaurants.createIndex({ location: "2dsphere" })
db.neighborhoods.createIndex({ geometry: "2dsphere" })

----------------------------------------

TITLE: Creating Single Field Index on GPA in MongoDB
DESCRIPTION: Creates an ascending index on the 'gpa' field to improve query performance for GPA-based lookups.

LANGUAGE: javascript
CODE:
db.students.createIndex( { gpa: 1 } )

----------------------------------------

TITLE: Connecting to MongoDB Instance on Custom Port
DESCRIPTION: Command to connect to a MongoDB instance running on a temporary port (37017) using mongosh.

LANGUAGE: bash
CODE:
mongosh --port 37017

----------------------------------------

TITLE: Multiple Privileges Revocation Example
DESCRIPTION: Demonstrates revoking multiple privileges from the 'associate' role with different resource and action combinations.

LANGUAGE: javascript
CODE:
db.revokePrivilegesFromRole(
   "associate",
   [
     {
       resource: { db: "products", collection: "" },
       actions: [ "createCollection", "createIndex", "find" ]
     },
     {
       resource: { db: "products", collection: "orders" },
       actions: [ "insert" ]
     }
   ],
   { w: "majority" }
)

----------------------------------------

TITLE: Querying MongoDB Time Series Collection by Time Range
DESCRIPTION: Demonstrates how to perform a range query on the time field of a time series collection to retrieve data for a specific time span.

LANGUAGE: bash
CODE:
db.stocks.find({ date : {
   $gte : ISODate("2021-12-18T15:50:00.000Z"), 
   $lte : ISODate("2021-12-18T15:56:00.000Z")}
});

----------------------------------------

TITLE: Dropping MongoDB Index by Name
DESCRIPTION: Example showing how to drop an index using its name parameter.

LANGUAGE: javascript
CODE:
db.pets.dropIndex( "catIdx" )

----------------------------------------

TITLE: Using $not with Equality Check in MongoDB Query (JavaScript)
DESCRIPTION: Shows how to use $not with an equality check. This query selects documents where the price is not equal to 1.99.

LANGUAGE: javascript
CODE:
{ price: { $not: { $eq: 1.99 } } }

----------------------------------------

TITLE: Generating Secure Password with OpenSSL
DESCRIPTION: Uses the OpenSSL utility to generate a strong password by creating a base64-encoded string of 48 pseudo-random bytes. This command provides a secure method for creating random passwords for MongoDB authentication.

LANGUAGE: bash
CODE:
openssl rand -base64 48

----------------------------------------

TITLE: MongoDB Atomic Update Operation for Book Checkout
DESCRIPTION: Example of an atomic update operation that decrements the available count and adds a new checkout record in a single operation.

LANGUAGE: javascript
CODE:
db.books.updateOne(
   { _id: 123456789, available: { $gt: 0 } },
   {
     $inc: { available: -1 },
     $push: { checkout: { by: "abc", date: new Date() } }
   }
)

----------------------------------------

TITLE: Inserting Multiple Documents into MongoDB Collection
DESCRIPTION: This code uses the insertMany() method to insert multiple documents into the 'inventory' collection. Each document contains an item name, quantity, and a nested 'carrier' object with name and fee details.

LANGUAGE: javascript
CODE:
db.inventory.insertMany( [
   {
      "item": "nuts", "quantity": 30,
      "carrier": { "name": "Shipit", "fee": 3 }
   },
   {
      "item": "bolts", "quantity": 50,
      "carrier": { "name": "Shipit", "fee": 4 }
   },
   {
      "item": "washers", "quantity": 10,
      "carrier": { "name": "Shipit", "fee": 1 }
   }
] )

----------------------------------------

TITLE: Querying Arrays with Compound Filter in MongoDB Compass
DESCRIPTION: Shows the filter to be used in MongoDB Compass to query documents where the 'dim_cm' field is an array with values between 15 and 20.

LANGUAGE: javascript
CODE:
{ dim_cm: { $gt: 15, $lt: 20 } }

----------------------------------------

TITLE: Basic $firstN Accumulator Syntax
DESCRIPTION: Basic syntax pattern for using $firstN as an aggregation accumulator to return the first n elements within a group

LANGUAGE: none
CODE:
{
   $firstN:
      {
         input: <expression>,
         n: <expression>
      }
}

----------------------------------------

TITLE: Executing Bulk Write Operations in MongoDB using JavaScript
DESCRIPTION: This snippet demonstrates how to use the bulkWrite() method to perform multiple write operations on a MongoDB collection. It includes insertOne, updateOne, deleteOne, and replaceOne operations within a single call.

LANGUAGE: javascript
CODE:
try {
   db.pizzas.bulkWrite( [
      { insertOne: { document: { _id: 3, type: "beef", size: "medium", price: 6 } } },
      { insertOne: { document: { _id: 4, type: "sausage", size: "large", price: 10 } } },
      { updateOne: {
         filter: { type: "cheese" },
         update: { $set: { price: 8 } }
      } },
      { deleteOne: { filter: { type: "pepperoni"} } },
      { replaceOne: {
         filter: { type: "vegan" },
         replacement: { type: "tofu", size: "small", price: 4 }
      } }
   ] )
} catch( error ) {
   print( error )
}

----------------------------------------

TITLE: Creating 2D Index in MongoDB using JavaScript
DESCRIPTION: Creates a 2D geospatial index on a specified location field in a MongoDB collection. The location field must contain legacy coordinate pairs. The index type is specified as '2d' to enable geospatial queries on two-dimensional coordinate data.

LANGUAGE: javascript
CODE:
db.collection.createIndex( { <location field> : "2d" } )

----------------------------------------

TITLE: Complex MongoDB Document Example in JavaScript
DESCRIPTION: Shows a complete document example with various BSON data types including ObjectId, embedded documents, dates, arrays, and NumberLong.

LANGUAGE: javascript
CODE:
var mydoc = {
               _id: ObjectId("5099803df3f4948bd2f98391"),
               name: { first: "Alan", last: "Turing" },
               birth: new Date('Jun 23, 1912'),
               death: new Date('Jun 07, 1954'),
               contribs: [ "Turing machine", "Turing test", "Turingery" ],
               views : NumberLong(1250000)
            }

----------------------------------------

TITLE: Date Conversion with Dynamic Timezone
DESCRIPTION: Aggregation example demonstrating date conversion using timezone values from document fields.

LANGUAGE: javascript
CODE:
db.logmessages.aggregate( [ {
   $project: {
      date: {
         $dateFromString: {
            dateString: '$date',
            timezone: '$timezone'
         }
      }
   }
} ] )

----------------------------------------

TITLE: Querying Embedded Documents in MongoDB Shell
DESCRIPTION: This snippet demonstrates how to query for documents with a specific value in an embedded field using the MongoDB shell. It searches for documents where the 'size.uom' field is equal to 'in'.

LANGUAGE: javascript
CODE:
db.inventory.find( { "size.uom": "in" } )

----------------------------------------

TITLE: Ranking Documents by Quantity Field
DESCRIPTION: Example showing how to rank cake sales by quantity within each state partition using $setWindowFields and $rank operator.

LANGUAGE: javascript
CODE:
db.cakeSales.aggregate( [
   {
      $setWindowFields: {
         partitionBy: "$state",
         sortBy: { quantity: -1 },
         output: {
            rankQuantityForState: {
               $rank: {}
            }
         }
      }
   }
] )

----------------------------------------

TITLE: Listing Shards in MongoDB Cluster
DESCRIPTION: This snippet shows how to list the current set of configured shards in a MongoDB cluster using the listShards command. It provides an overview of all shards in the cluster.

LANGUAGE: javascript
CODE:
db.adminCommand( { listShards : 1 } )

----------------------------------------

TITLE: Opening MongoDB Shard Port in Windows Firewall
DESCRIPTION: This command adds a rule to allow incoming traffic on port 27018 for MongoDB shard connections.

LANGUAGE: bat
CODE:
netsh advfirewall firewall add rule name="Open mongod shard port 27018" dir=in action=allow protocol=TCP localport=27018

----------------------------------------

TITLE: Checking Capped Collection Status in MongoDB
DESCRIPTION: Method to determine if a MongoDB collection is capped. Returns true if the collection is a capped collection, false otherwise. Compatible with MongoDB Atlas and on-premises deployments.

LANGUAGE: javascript
CODE:
db.collection.isCapped()

----------------------------------------

TITLE: Result of MongoDB Aggregation with $millisecond
DESCRIPTION: Shows the output of the aggregation pipeline that uses the $millisecond operator along with other date operators to break down a date field.

LANGUAGE: javascript
CODE:
{
  "_id" : 1,
  "year" : 2014,
  "month" : 1,
  "day" : 1,
  "hour" : 8,
  "minutes" : 15,
  "seconds" : 39,
  "milliseconds" : 736,
  "dayOfYear" : 1,
  "dayOfWeek" : 4,
  "week" : 0
}

----------------------------------------

TITLE: Distinct Values for Embedded Field
DESCRIPTION: Example demonstrating how to get distinct values from an embedded document field (item.sku).

LANGUAGE: javascript
CODE:
db.inventory.distinct( "item.sku" )

----------------------------------------

TITLE: Querying with $geoIntersects in MongoDB using JavaScript
DESCRIPTION: This snippet demonstrates the basic syntax for using the $geoIntersects operator with a GeoJSON polygon. It specifies a location field and uses the $geometry operator to define the GeoJSON object for intersection.

LANGUAGE: javascript
CODE:
{
  <location field>: {
     $geoIntersects: {
        $geometry: {
           type: "<GeoJSON object type>" ,
           coordinates: [ <coordinates> ]
        }
     }
  }
}

----------------------------------------

TITLE: Disabling ECDHE and DHE Cipher Suites in MongoDB
DESCRIPTION: Command to disable both ECDHE and DHE cipher suites using the opensslCipherConfig parameter for better performance at the cost of forward secrecy.

LANGUAGE: bash
CODE:
mongod --setParameter opensslCipherConfig='HIGH:!EXPORT:!aNULL:!kECDHE:!ECDHE:!DHE:!kDHE@STRENGTH'

----------------------------------------

TITLE: Querying with Single-Key Index in MongoDB
DESCRIPTION: Example of querying the products collection using the category field that is supported by the single-key index.

LANGUAGE: javascript
CODE:
db.products.find( { category: "electronics" } )

----------------------------------------

TITLE: MongoDB Aggregation Projection Example
DESCRIPTION: Example of using aggregation expressions in a MongoDB projection to transform field values and add computed fields

LANGUAGE: javascript
CODE:
db.inventory.find(
   { },
   {
      _id: 0,
      item: 1,
      status: {
         $switch: {
            branches: [
               {
                  case: { $eq: [ "$status", "A" ] },
                  then: "Available"
               },
               {
                  case: { $eq: [ "$status", "D" ] },
                  then: "Discontinued"
               }
            ],
            default: "No status found"
         }
      },
      area: {
         $concat: [
            { $toString: { $multiply: [ "$size.h", "$size.w" ] } },
            " ",
            "$size.uom"
         ]
      },
      reportNumber: { $literal: 1 }
   }
)

----------------------------------------

TITLE: Optimizing Compression in MongoDB Time Series Data
DESCRIPTION: Example showing how to improve compression by omitting empty fields from documents in time series collections. Demonstrates the difference between including and excluding empty arrays.

LANGUAGE: javascript
CODE:
{
   timestamp: ISODate("2020-01-23T00:00:00.441Z"),
   coordinates: [1.0, 2.0]
},
{
   timestamp: ISODate("2020-01-23T00:00:10.441Z")
},
{
   timestamp: ISODate("2020-01-23T00:00:20.441Z"),
   coordinates: [3.0, 5.0]
}

----------------------------------------

TITLE: Creating Index Using Java Async Driver
DESCRIPTION: Creates an ascending index on the 'name' field using the asynchronous Java MongoDB driver with callback

LANGUAGE: java
CODE:
collection.createIndex(Indexes.ascending("name"), someCallbackFunction());

----------------------------------------

TITLE: MongoDB Connection String for Various Drivers
DESCRIPTION: This snippet shows the standard MongoDB connection string used by most drivers. It includes the username, password, host, and authentication source.

LANGUAGE: bash
CODE:
mongodb+srv://myDatabaseUser:D1fficultP%40ssw0rd@mongos0.example.com/?authSource=admin

----------------------------------------

TITLE: Aggregation with Index Hint in MongoDB
DESCRIPTION: An example of an aggregation operation that uses the hint option to force the usage of a specific index.

LANGUAGE: javascript
CODE:
db.foodColl.aggregate(
   [ { $sort: { qty: 1 }}, { $match: { category: "cake", qty: 10  } }, { $sort: { type: -1 } } ],
   { hint: { qty: 1, category: 1 } }
)

----------------------------------------

TITLE: Unsetting MongoDB Profiler Filter
DESCRIPTION: Example showing how to clear/unset a previously configured profiler filter.

LANGUAGE: javascript
CODE:
db.setProfilingLevel( 1, { filter: "unset" } )

----------------------------------------

TITLE: Regex Pattern Matching with MongoDB $filter
DESCRIPTION: Shows how to filter array elements using regex pattern matching with $regexMatch operator within $filter.

LANGUAGE: javascript
CODE:
db.sales.aggregate( [
   {
      $project: {
         items: {
            $filter: {
               input: "$items",
               as: "item",
               cond: {
                  $regexMatch: { input: "$$item.name", regex: /^p/ }
               } 
            }
         }
      }
   }
] )

----------------------------------------

TITLE: Configuring Range Queries for Encrypted Fields
DESCRIPTION: Shows how to enable range queries on encrypted fields, supporting $lt, $lte, $gt, and $gte operators, with optional min and max values.

LANGUAGE: javascript
CODE:
{
   path: "myDocumentRangeField",
   bsonType: "int",
   queries: { queryType: "range",
             min: 0,
             max: 1200
   }
}

----------------------------------------

TITLE: Basic $type Query Syntax
DESCRIPTION: Shows the basic syntax for querying documents using the $type operator for a single BSON type or an array of BSON types.

LANGUAGE: javascript
CODE:
{ field: { $type: <BSON type> } }

LANGUAGE: javascript
CODE:
{ field: { $type: [ <BSON type1> , <BSON type2>, ... ] } }

----------------------------------------

TITLE: Creating Sample Inventory Collection in MongoDB
DESCRIPTION: Inserts sample documents into an 'inventory' collection to demonstrate query analysis.

LANGUAGE: javascript
CODE:
{ "_id" : 1, "item" : "f1", type: "food", quantity: 500 }
{ "_id" : 2, "item" : "f2", type: "food", quantity: 100 }
{ "_id" : 3, "item" : "p1", type: "paper", quantity: 200 }
{ "_id" : 4, "item" : "p2", type: "paper", quantity: 150 }
{ "_id" : 5, "item" : "f3", type: "food", quantity: 300 }
{ "_id" : 6, "item" : "t1", type: "toys", quantity: 500 }
{ "_id" : 7, "item" : "a1", type: "apparel", quantity: 250 }
{ "_id" : 8, "item" : "a2", type: "apparel", quantity: 400 }
{ "_id" : 9, "item" : "t2", type: "toys", quantity: 50 }
{ "_id" : 10, "item" : "f4", type: "food", quantity: 75 }

----------------------------------------

TITLE: Executing updateMany with $replaceRoot and $set in MongoDB
DESCRIPTION: This snippet shows how to use updateMany with $replaceRoot to standardize document fields and $set to update the modified date.

LANGUAGE: javascript
CODE:
db.students2.updateMany( {}, 
  [
    { $replaceRoot: { newRoot: 
       { $mergeObjects: [ { quiz1: 0, quiz2: 0, test1: 0, test2: 0 }, "$$ROOT" ] }
    } },
    { $set: { modified: "$$NOW"}  }
  ]
)

----------------------------------------

TITLE: Updating Array Elements with arrayFilters
DESCRIPTION: An example of using arrayFilters to update specific elements within an array.

LANGUAGE: javascript
CODE:
db.students.updateMany(
   { grades: { $gte: 100 } },
   { $set: { "grades.$[element]" : 100 } },
   { arrayFilters: [ { "element": { $gte: 100 } } ] }
)

----------------------------------------

TITLE: Extracting Email with $regexFind in MongoDB Aggregation
DESCRIPTION: Shows how to use $regexFind to extract email addresses from a string field in MongoDB documents.

LANGUAGE: javascript
CODE:
db.feedback.aggregate( [ 
    { $addFields: { 
       "email": { $regexFind: { input: "$comment", regex: /[a-z0-9_.+-]+@[a-z0-9_.+-]+\.[a-z0-9_.+-]+/i } }
    } },
    { $set: { email: "$email.match"} }
] )

----------------------------------------

TITLE: Removing a Single Document in MongoDB
DESCRIPTION: This snippet shows how to remove only the first document that matches the query criteria by setting the justOne parameter to true.

LANGUAGE: javascript
CODE:
db.products.remove( { qty: { $gt: 20 } }, true )

----------------------------------------

TITLE: Initializing MongoDB Replica Set Using rs.initiate()
DESCRIPTION: Method to initialize a MongoDB replica set with an optional configuration document that specifies the replica set name and member details. Configuration requires _id field for replica set name and members array containing documents for each replica set member.

LANGUAGE: javascript
CODE:
rs.initiate()

----------------------------------------

TITLE: Aggregation Pipeline Alternative for Total Price Per Customer
DESCRIPTION: Performs the same total price per customer calculation using MongoDB's aggregation pipeline operators instead of map-reduce.

LANGUAGE: javascript
CODE:
db.orders.aggregate([
   { $group: { _id: "$cust_id", value: { $sum: "$price" } } },
   { $out: "agg_alternative_1" }
])

----------------------------------------

TITLE: Creating and Converting ObjectId to String in MongoDB
DESCRIPTION: Example showing how to create a new ObjectId and convert it to a string representation using the toString() method. The example demonstrates object creation, string conversion, and type verification.

LANGUAGE: javascript
CODE:
myObjectId = ObjectId("507c7f79bcf86cd7994f6c0e")
myObjectIdString = myObjectId.toString()

LANGUAGE: javascript
CODE:
507c7f79bcf86cd7994f6c0e

LANGUAGE: javascript
CODE:
typeof myObjectIdString

LANGUAGE: javascript
CODE:
string

----------------------------------------

TITLE: Map-Reduce Operation for Order Statistics by SKU
DESCRIPTION: A map-reduce operation that calculates order count, total quantity, and average quantity per order for each SKU, with date filtering and result merging.

LANGUAGE: javascript
CODE:
var mapFunction2 = function() {
      for (var idx = 0; idx < this.items.length; idx++) {
         var key = this.items[idx].sku;
         var value = { count: 1, qty: this.items[idx].qty };

         emit(key, value);
      }
};

var reduceFunction2 = function(keySKU, countObjVals) {
   reducedVal = { count: 0, qty: 0 };

   for (var idx = 0; idx < countObjVals.length; idx++) {
         reducedVal.count += countObjVals[idx].count;
         reducedVal.qty += countObjVals[idx].qty;
   }

   return reducedVal;
};

var finalizeFunction2 = function (key, reducedVal) {
   reducedVal.avg = reducedVal.qty/reducedVal.count;
   return reducedVal;
};

db.orders.mapReduce(
   mapFunction2,
   reduceFunction2,
   {
      out: { merge: "map_reduce_example2" },
      query: { ord_date: { $gte: new Date("2020-03-01") } },
      finalize: finalizeFunction2
   }
   );

----------------------------------------

TITLE: Applying MongoDB SELinux Policy
DESCRIPTION: Applies the built SELinux policy using sudo make install command.

LANGUAGE: bash
CODE:
sudo make install

----------------------------------------

TITLE: Remove Elements Based on Comparison Condition
DESCRIPTION: Example of using $pull with a comparison operator ($gte) to remove array elements greater than or equal to a value.

LANGUAGE: javascript
CODE:
db.profiles.updateOne( { _id: 1 }, { $pull: { votes: { $gte: 6 } } } )

----------------------------------------

TITLE: Querying MongoDB with Projection in Go
DESCRIPTION: This snippet shows how to query MongoDB with projection using the Go driver.

LANGUAGE: go
CODE:
// Start Example 45
// End Example 45

----------------------------------------

TITLE: Creating Compound Hashed Index in MongoDB
DESCRIPTION: Creates a compound index where one field is hashed and others use regular sorting. Allows combining hashed and regular index fields.

LANGUAGE: javascript
CODE:
db.<collection>.createIndex(
   {
      <field1>: "hashed",
      <field2>: "<sort order>",
      <field3>: "<sort order>",
      ...
   }
)

----------------------------------------

TITLE: Updating a Document with $mul Operator in MongoDB
DESCRIPTION: Demonstrates how to use the $mul operator with updateOne() to multiply the 'price' and 'quantity' fields of a document.

LANGUAGE: javascript
CODE:
db.products.updateOne(
   { _id: 1 },
   { $mul: 
      {
         price: Decimal128( "1.25" ),
         quantity: 2
       }
   }
)

----------------------------------------

TITLE: Creating User with Authentication and Access Information in MongoDB
DESCRIPTION: This snippet shows the structure of the user document used to create a new user. It includes fields for username, password, custom data, roles, authentication restrictions, and authentication mechanisms.

LANGUAGE: javascript
CODE:
{ 
  user: "<name>",
  pwd: passwordPrompt(),      // Or  "<cleartext password>"
  customData: { <any information> },
  roles: [
    { role: "<role>", db: "<database>" } | "<role>",
    ...
  ],
  authenticationRestrictions: [ 
     { 
       clientSource: ["<IP>" | "<CIDR range>", ...],
       serverAddress: ["<IP>" | "<CIDR range>", ...]
     },
     ...
  ],
  mechanisms: [ "<SCRAM-SHA-1|SCRAM-SHA-256>", ... ],
  passwordDigestor: "<server|client>"
}

----------------------------------------

TITLE: Using for-of Loop to Iterate MongoDB Cursor (mongosh 2.1.0+)
DESCRIPTION: Shows an alternative way to iterate over a cursor using a for-of loop, available in mongosh version 2.1.0 and later. This achieves the same result as the forEach() method.

LANGUAGE: javascript
CODE:
for ( const myDoc of db.users.find() ) {
   print( "User name: " + myDoc.name )
}

----------------------------------------

TITLE: Inserting Sample Data for MongoDB Inheritance Pattern
DESCRIPTION: This snippet demonstrates how to insert sample data for different types of books (ebook, audiobook, physical book) using the inheritance pattern in MongoDB. It shows how common fields are shared across all types, while specific fields are included for each book type.

LANGUAGE: javascript
CODE:
db.books.insertMany( [
   {
      product_type: "ebook",
      title: "Practical MongoDB Aggregations",
      author: "Paul Done",
      rating: 4.8,
      genres: [ "programming" ],
      pages: 338,
      download_url: "<url>"
   },
   {
      product_type: "audiobook",
      title: "Practical MongoDB Aggregations",
      author: "Paul Done",
      rating: 4.6,
      genres: [ "programming" ],
      narrators: [ "Paul Done" ],
      duration: {
         hours: 21,
         minutes: 8
      },
      time_by_chapter: [
         {
            chapter: 1,
            start: "00:00:00",
            end: "01:00:00"
         },
         {
            chapter: 2,
            start: "01:00:00",
            end: "01:55:00"
         }
      ]
   },
   {
      product_type: "physical_book",
      title: "Practical MongoDB Aggregations",
      author: "Paul Done",
      rating: 4.9,
      genres: [ "programming" ],
      pages: 338,
      stock: 12,
      delivery_time: 2
   }
] )

----------------------------------------

TITLE: Force Step Down with Custom Settings
DESCRIPTION: Example showing how to force step down the primary with a 120-second duration, 15-second secondary catch-up period, and force flag enabled.

LANGUAGE: javascript
CODE:
db.adminCommand( { replSetStepDown: 120, secondaryCatchUpPeriodSecs: 15, force: true } )

----------------------------------------

TITLE: Querying with $or Operator in MongoDB
DESCRIPTION: Demonstrates the basic syntax of the $or operator in a MongoDB query. This example selects documents where either the quantity is less than 20 or the price is 10.

LANGUAGE: javascript
CODE:
{ $or: [ { <expression1> }, { <expression2> }, ... , { <expressionN> } ] }

LANGUAGE: javascript
CODE:
db.inventory.find( { $or: [ { quantity: { $lt: 20 } }, { price: 10 } ] } )

----------------------------------------

TITLE: Using $strcasecmp in MongoDB Aggregation Pipeline
DESCRIPTION: Illustrates how to use $strcasecmp in a $project stage of an aggregation pipeline to compare the 'quarter' field with a string value '13q4'.

LANGUAGE: javascript
CODE:
db.inventory.aggregate(
   [
     {
       $project:
          {
            item: 1,
            comparisonResult: { $strcasecmp: [ "$quarter", "13q4" ] }
          }
      }
   ]
)

----------------------------------------

TITLE: Implementing Transaction Retry Logic in Java for MongoDB
DESCRIPTION: This Java method implements a retry mechanism for MongoDB transactions. It uses a while loop to continuously attempt the transaction, catching MongoExceptions and retrying if a TransientTransactionError is encountered.

LANGUAGE: javascript
CODE:
void runTransactionWithRetry(Runnable transactional) {
    while (true) {
        try {
            transactional.run();
            break;
        } catch (MongoException e) {
            System.out.println("Transaction aborted. Caught exception during transaction.");

            if (e.hasErrorLabel(MongoException.TRANSIENT_TRANSACTION_ERROR_LABEL)) {
                System.out.println("TransientTransactionError, aborting transaction and retrying ...");
                continue;
            } else {
                throw e;
            }
        }
    }
}

----------------------------------------

TITLE: Creating Manual Reference Documents in MongoDB
DESCRIPTION: Example showing how to create two documents with a manual reference using the _id field of the first document as a reference in the second document.

LANGUAGE: javascript
CODE:
original_id = ObjectId()

db.places.insertOne({
    "_id": original_id,
    "name": "Broadway Center",
    "url": "bc.example.net"
})

db.people.insertOne({
    "name": "Erin",
    "places_id": original_id,
    "url":  "bc.example.net/Erin"
})

----------------------------------------

TITLE: Using $week in MongoDB Aggregation Pipeline
DESCRIPTION: Illustrates how to use the $week operator along with other date operators in a $project stage of an aggregation pipeline to break down a date field into its components.

LANGUAGE: javascript
CODE:
db.sales.aggregate(
   [
     {
       $project:
         {
           year: { $year: "$date" },
           month: { $month: "$date" },
           day: { $dayOfMonth: "$date" },
           hour: { $hour: "$date" },
           minutes: { $minute: "$date" },
           seconds: { $second: "$date" },
           milliseconds: { $millisecond: "$date" },
           dayOfYear: { $dayOfYear: "$date" },
           dayOfWeek: { $dayOfWeek: "$date" },
           week: { $week: "$date" }
         }
     }
   ]
)

----------------------------------------

TITLE: Basic MongoDB Restore Operation
DESCRIPTION: Restore MongoDB backup data from a specified directory to a local MongoDB instance.

LANGUAGE: bash
CODE:
mongorestore /opt/backup/mongodump-1

----------------------------------------

TITLE: Creating Unique Index on Proxy Collection in MongoDB
DESCRIPTION: Shows how to create a unique index on the 'email' field in the proxy collection to enforce uniqueness.

LANGUAGE: javascript
CODE:
db.proxy.createIndex( { "email" : 1 }, { unique : true } )

----------------------------------------

TITLE: Updating Array Elements with $[<identifier>] and arrayFilters
DESCRIPTION: Example of using updateMany() with $[<identifier>] and arrayFilters to update all elements in the grades array that are greater than or equal to 100.

LANGUAGE: javascript
CODE:
db.students.updateMany(
   { },
   { $set: { "grades.$[element]" : 100 } },
   { arrayFilters: [ { "element": { $gte: 100 } } ] }
)

----------------------------------------

TITLE: Performing DeleteMany Operation in Python MongoDB Driver
DESCRIPTION: The delete_many() method in the Python driver returns a DeleteResult object containing the status of the operation, including the number of documents deleted.

LANGUAGE: python
CODE:
collection.delete_many()

----------------------------------------

TITLE: Storing Publisher References in Book Documents (MongoDB JavaScript)
DESCRIPTION: This snippet demonstrates the recommended approach of storing publisher references within book documents. This method avoids mutable, growing arrays and is suitable for unbounded one-to-many relationships between publishers and books.

LANGUAGE: javascript
CODE:
{
   _id: "oreilly",
   name: "O'Reilly Media",
   founded: 1980,
   location: "CA"
}

{
   _id: 123456789,
   title: "MongoDB: The Definitive Guide",
   author: [ "Kristina Chodorow", "Mike Dirolf" ],
   published_date: ISODate("2010-09-24"),
   pages: 216,
   language: "English",
   publisher_id: "oreilly"
}

{
   _id: 234567890,
   title: "50 Tips and Tricks for MongoDB Developer",
   author: "Kristina Chodorow",
   published_date: ISODate("2011-05-06"),
   pages: 68,
   language: "English",
   publisher_id: "oreilly"
}

----------------------------------------

TITLE: Configuring MongoDB Shard Member as Standalone
DESCRIPTION: This YAML configuration demonstrates how to modify a MongoDB shard member's configuration to run as a standalone instance for index building, including port changes and disabling replication and sharding checks.

LANGUAGE: yaml
CODE:
net:
   bindIp: localhost,<hostname(s)|ip address(es)>
   port: 27218
#   port: 27018
#replication:
#   replSetName: shardA
#sharding:
#   clusterRole: shardsvr
setParameter:
   skipShardingConfigurationChecks: true
   disableLogicalSessionCacheRefresh: true

----------------------------------------

TITLE: Querying MongoDB Using $bitsAllSet with Bit Position Array
DESCRIPTION: Demonstrates how to use $bitsAllSet operator to find documents where specific bit positions (1 and 5) are set to 1 in field 'a'.

LANGUAGE: javascript
CODE:
db.collection.find( { a: { $bitsAllSet: [ 1, 5 ] } } )

----------------------------------------

TITLE: Query Using $all with Array Values
DESCRIPTION: Example showing how to query documents where the tags field contains multiple specific values.

LANGUAGE: javascript
CODE:
db.inventory.find( { tags: { $all: [ "appliance", "school", "book" ] } } )

----------------------------------------

TITLE: Creating User with Authentication Restrictions in MongoDB
DESCRIPTION: This example demonstrates creating a user with authentication restrictions, allowing connections only from specific IP addresses.

LANGUAGE: javascript
CODE:
use admin
db.createUser(
   {
     user: "restricted",
     pwd: passwordPrompt(),      // Or  "<cleartext password>"
     roles: [ { role: "readWrite", db: "reporting" } ],
     authenticationRestrictions: [ {
        clientSource: ["192.0.2.0"],
        serverAddress: ["198.51.100.0"]
     } ]
   }
)

----------------------------------------

TITLE: Inserting Array Documents using MongoDB Shell
DESCRIPTION: Demonstrates how to insert multiple documents containing array fields using the MongoDB shell. The documents include inventory items with properties like quantity, tags array, and dimensions array.

LANGUAGE: javascript
CODE:
db.inventory.insertMany([
   { item: "journal", qty: 25, tags: ["blank", "red"], dim_cm: [ 14, 21 ] },
   { item: "notebook", qty: 50, tags: ["red", "blank"], dim_cm: [ 14, 21 ] },
   { item: "paper", qty: 100, tags: ["red", "blank", "plain"], dim_cm: [ 14, 21 ] },
   { item: "planner", qty: 75, tags: ["blank", "red"], dim_cm: [ 22.85, 30 ] },
   { item: "postcard", qty: 45, tags: ["blue"], dim_cm: [ 10, 15.25 ] }
]);

----------------------------------------

TITLE: Using Collation in MongoDB Aggregation
DESCRIPTION: Shows how to use collation in an aggregation pipeline to perform language-specific string comparisons.

LANGUAGE: javascript
CODE:
db.restaurants.aggregate(
   [ { $match: { status: "A" } }, { $group: { _id: "$category", count: { $sum: 1 } } } ],
   { collation: { locale: "fr", strength: 1 } }
);

----------------------------------------

TITLE: Basic Distinct Field Query
DESCRIPTION: Example showing how to get distinct values for the dept field.

LANGUAGE: javascript
CODE:
db.inventory.distinct( "dept" )

----------------------------------------

TITLE: Complex Grouping and Filtering in MongoDB
DESCRIPTION: MongoDB aggregation pipeline to group by customer ID and order date, sum the 'price' field, and filter for totals greater than 250, equivalent to SQL's GROUP BY, SUM(), and HAVING operations.

LANGUAGE: javascript
CODE:
db.orders.aggregate( [
   {
     $group: {
        _id: {
           cust_id: "$cust_id",
           ord_date: { $dateToString: {
              format: "%Y-%m-%d",
              date: "$ord_date"
           }}
        },
        total: { $sum: "$price" }
     }
   },
   { $match: { total: { $gt: 250 } } }
] )

----------------------------------------

TITLE: Basic $querySettings Pipeline Syntax in MongoDB
DESCRIPTION: Shows the basic syntax for using $querySettings in an aggregation pipeline, with the showDebugQueryShape boolean parameter.

LANGUAGE: javascript
CODE:
db.aggregate( [
   { $querySettings: { showDebugQueryShape: <boolean> } },
   // Add any additional pipeline stages after $querySettings
   ... 
] )

----------------------------------------

TITLE: Updating MongoDB SSL Mode to Prefer SSL
DESCRIPTION: MongoDB command to update the SSL mode to 'preferSSL' using the setParameter command. This allows the node to accept both SSL and non-SSL connections, but use SSL for outgoing connections.

LANGUAGE: bash
CODE:
db.adminCommand( { setParameter: 1, sslMode: "preferSSL" } )

----------------------------------------

TITLE: MongoDB Command Response Field Structure
DESCRIPTION: A list table structure defining MongoDB command response fields, covering command result, operation status, operation time, and cluster time information. These fields provide operation status, timing, and cluster synchronization details.

LANGUAGE: text
CODE:
* command result - Result fields specific to the command that ran
* ok - A number that indicates if the command succeeded (1) or failed (0)
* operationTime - The logical time of the operation used for ordering
* $clusterTime - A document containing signed cluster time with clusterTime and signature fields

----------------------------------------

TITLE: Executing shardCollection Command in MongoDB
DESCRIPTION: This snippet demonstrates the syntax for the shardCollection command, which is used to shard a collection in MongoDB. It includes various optional parameters such as the shard key, uniqueness constraint, and time series options.

LANGUAGE: javascript
CODE:
db.adminCommand(
   {
     shardCollection: "<database>.<collection>",
     key: { <field1>: <1|"hashed">, ... },
     unique: <boolean>,
     numInitialChunks: <integer>,
     presplitHashedZones: <boolean>,
     collation: { locale: "simple" },
     timeseries: <object>
   }
 )

----------------------------------------

TITLE: MongoDB LDAP Authentication Example
DESCRIPTION: Example of authenticating to MongoDB using LDAP credentials via the db.auth() method on the $external database

LANGUAGE: javascript
CODE:
db.auth({
  username: "<username>",
  password: "<password>",
  mechanism: "PLAIN"
})

----------------------------------------

TITLE: Implementing MongoDB Transaction Commit Retry in Java
DESCRIPTION: This method shows how to commit a MongoDB transaction with retry logic in Java. It uses a while loop to attempt the commit and handles the UnknownTransactionCommitResult error by retrying.

LANGUAGE: java
CODE:
void commitWithRetry(ClientSession clientSession) {
    while (true) {
        try {
            clientSession.commitTransaction();
            System.out.println("Transaction committed");
            break;
        } catch (MongoException e) {
            // can retry commit
            if (e.hasErrorLabel(MongoException.UNKNOWN_TRANSACTION_COMMIT_RESULT_LABEL)) {
                System.out.println("UnknownTransactionCommitResult, retrying commit operation ...");
                continue;
            } else {
                System.out.println("Exception during commit ...");
                throw e;
            }
        }
    }
}

----------------------------------------

TITLE: Defining $function Operator in MongoDB Aggregation Pipeline
DESCRIPTION: Syntax for using the $function operator to define a custom JavaScript function within a MongoDB aggregation pipeline. Specifies the function body, arguments, and language.

LANGUAGE: javascript
CODE:
{ 
  $function: {
    body: <code>,
    args: <array expression>,
    lang: "js"
  }
}

----------------------------------------

TITLE: Iterating a Change Stream Cursor in MongoDB
DESCRIPTION: This code shows how to iterate over a change stream cursor to process change events. It uses a while loop with isClosed() and tryNext() methods to handle cursor exhaustion and retrieve new events.

LANGUAGE: javascript
CODE:
while (!watchCursor.isClosed()) {
  let next = watchCursor.tryNext()
  while (next !== null) {
    printjson(next);
    next = watchCursor.tryNext()
  }
}

----------------------------------------

TITLE: Deleting All Documents in MongoDB Collection
DESCRIPTION: This snippet demonstrates how to delete all documents from a MongoDB collection using the deleteMany() method with an empty filter.

LANGUAGE: javascript
CODE:
db.inventory.deleteMany({})

----------------------------------------

TITLE: Syntax for MongoDB $and Operator in JavaScript
DESCRIPTION: Demonstrates the basic syntax for using the $and operator in a MongoDB query. The operator takes an array of expressions, all of which must be satisfied for a document to be selected.

LANGUAGE: javascript
CODE:
{ $and: [ { <expression1> }, { <expression2> } , ... , { <expressionN> } ] }

----------------------------------------

TITLE: Creating Weighted Text Index for Blog Posts
DESCRIPTION: Creates a text index on content, keywords, and about fields with different weights. Content has highest weight (10), keywords medium weight (5), and about field uses default weight (1).

LANGUAGE: javascript
CODE:
db.blog.createIndex(
   {
     content: "text",
     keywords: "text",
     about: "text"
   },
   {
     weights: {
       content: 10,
       keywords: 5
     },
     name: "BlogTextIndex"
   }
 )

----------------------------------------

TITLE: Bulk Write Operations including Deletions with db.collection.bulkWrite() in MongoDB
DESCRIPTION: Performs multiple write operations, including deletions, in bulk. This method is used for efficient execution of multiple database operations in a single call.

LANGUAGE: mongodb
CODE:
db.collection.bulkWrite()

----------------------------------------

TITLE: Complete $let Aggregation Pipeline Example
DESCRIPTION: Demonstrates a practical use of $let in a $project stage to calculate final totals with conditional discounts based on document fields.

LANGUAGE: none
CODE:
db.sales.aggregate( [
   {
      $project: {
         finalTotal: {
            $let: {
               vars: {
                  total: { $add: [ '$price', '$tax' ] },
                  discounted: { $cond: { if: '$applyDiscount', then: 0.9, else: 1 } }
               },
               in: { $multiply: [ "$$total", "$$discounted" ] }
            }
         }
      }
   }
] )

----------------------------------------

TITLE: MongoDB $switch Comparison Examples
DESCRIPTION: Shows three different examples of $switch usage with comparison operators.

LANGUAGE: javascript
CODE:
{
   $switch: {
      branches: [
         { case: { $eq: [ 0, 5 ] }, then: "equals" },
         { case: { $gt: [ 0, 5 ] }, then: "greater than" },
         { case: { $lt: [ 0, 5 ] }, then: "less than" }
      ]
   }
}

LANGUAGE: javascript
CODE:
{
   $switch: {
      branches: [
         { case: { $eq: [ 0, 5 ] }, then: "equals" },
         { case: { $gt: [ 0, 5 ] }, then: "greater than" }
      ],
      default: "Did not match"
   }
}

LANGUAGE: javascript
CODE:
{
   $switch: {
      branches: [
         { case: "this is true", then: "first case" },
         { case: false, then: "second case" }
      ],
      default: "Did not match"
   }
}

----------------------------------------

TITLE: Querying MongoDB with $bitsAllClear using Bit Position Array
DESCRIPTION: This snippet demonstrates how to use the $bitsAllClear operator to test whether field 'a' has bits clear at positions 1 and 5, where the least significant bit is position 0.

LANGUAGE: javascript
CODE:
db.collection.find( { a: { $bitsAllClear: [ 1, 5 ] } } )

----------------------------------------

TITLE: Basic listCollections Command Syntax
DESCRIPTION: Demonstrates the basic syntax for the listCollections command with optional fields including filter, nameOnly, authorizedCollections, and comment parameters.

LANGUAGE: javascript
CODE:
db.runCommand(
   { 
     listCollections: 1, 
     filter: <document>, 
     nameOnly: <boolean>, 
     authorizedCollections: <boolean>, 
     comment: <any> 
   }
)

----------------------------------------

TITLE: Aggregating Documents with $meta Operator for Text Score
DESCRIPTION: Performs a text search and uses the $meta operator to group by the text search score in an aggregation pipeline.

LANGUAGE: javascript
CODE:
db.articles.aggregate(
   [
     { $match: { $text: { $search: "cake" } } },
     { $group: { _id: { $meta: "textScore" }, count: { $sum: 1 } } }
   ]
)

----------------------------------------

TITLE: Setting Granularity for Time Series Collection in MongoDB
DESCRIPTION: Defines the granularity field for a time series collection, which determines the time interval for each bucket of data.

LANGUAGE: javascript
CODE:
{
   granularity: "seconds"
}

----------------------------------------

TITLE: Disabling Retryable Writes in MongoDB Shell
DESCRIPTION: Command to disable retryable writes when launching the MongoDB shell (mongosh). The --retryWrites flag is set to false to explicitly disable the retryable writes feature.

LANGUAGE: bash
CODE:
mongosh --retryWrites=false

----------------------------------------

TITLE: Setting up Query Projection in MongoDB Compass
DESCRIPTION: This snippet shows how to set up a query with projection in MongoDB Compass GUI. It filters documents with status 'A' and excludes the 'size.uom' field from the results.

LANGUAGE: javascript
CODE:
{ status: "A" }

LANGUAGE: javascript
CODE:
{ "size.uom": 0 }

----------------------------------------

TITLE: Enabling Disk Usage in MongoDB Queries
DESCRIPTION: Demonstrates how to enable or disable disk usage for temporary files in MongoDB find and aggregate commands. This can override the default behavior set by the allowDiskUseByDefault parameter.

LANGUAGE: javascript
CODE:
{ allowDiskUse: true }

LANGUAGE: javascript
CODE:
{ allowDiskUse: false }

----------------------------------------

TITLE: Executing bulkWrite Command Syntax in MongoDB
DESCRIPTION: Example syntax for executing the bulkWrite command, including insert, update, and delete operations across multiple namespaces.

LANGUAGE: javascript
CODE:
db.adminCommand( {
   bulkWrite: 1,

   // Include the insert, update, and delete operations
   // in the ops array
   ops: [
      {
         insert: <integer>,  // Namespace ID index for insert operation.
                             // Must match a namespace ID index in
                             // ns specified later in the nsInfo array.
         document: <document>
      },
      {
         update: <integer>,  // Namespace ID index for update operation
         filter: <document>,
         updateMods: <document>,
         arrayFilters: [ <filterDocument0>, <filterDocument1>, ...  ],
         multi: <bolean>,
         hint: <document>,
         constants: <document>,
         collation: <document>
      },
      {
         delete: <integer>,  // Namespace ID index for delete operation
         filter: <document>,
         multi: <boolean>,
         hint: <document>,
         collation: <document>
      },
      ...
      // Additional insert, update, and delete operations in any order
      ...
   ],

   // Include the namespaces with collections to modify
   // in the nsInfo array. You can add multiple namespaces here.
   nsInfo: [
      {
         ns: <string>,  // Namespace (database and collection name) to modify.
                        // Each operation namespace ID index
                        // specified in the earlier ops array must
                        // match a namespace ID index here.
         collectionUUID: <string>,
         encryptionInformation: <document>
      },
      ...
      // Additional namespaces
      ...
   ],

   // Additional fields
   ordered: <boolean>,
   bypassDocumentValidation: <boolean>,
   comment: <string>,
   let: <document>,
   errorsOnly: <boolean>,
   cursor: { batchSize: <integer> },
   writeConcern: <string>
} )

----------------------------------------

TITLE: NumberDecimal Insert and Query Examples in MongoDB
DESCRIPTION: Examples showing how to insert and query NumberDecimal values in MongoDB, demonstrating precision handling with quoted and unquoted values.

LANGUAGE: bash
CODE:
db.json.insertOne( { decimalQuoted : NumberDecimal("123.40") } )
db.json.insertOne( { decimalUnQuoted : NumberDecimal(123.40) } )

db.json.find()

----------------------------------------

TITLE: Deleting a Single Document with bulkWrite() in MongoDB
DESCRIPTION: Demonstrates using the deleteOne operation within bulkWrite() to delete a single document matching a filter.

LANGUAGE: javascript
CODE:
db.collection.bulkWrite([
   { deleteOne : {
      "filter" : <document>,
      "collation" : <document>                   // Available starting in 3.4
   } }
] )

----------------------------------------

TITLE: Inserting Initial Policy Document in MongoDB
DESCRIPTION: This snippet demonstrates how to insert an initial policy document into both the currentPolicies and policyRevisions collections in MongoDB. It sets up the base data for the versioning example.

LANGUAGE: javascript
CODE:
db.currentPolicies.insertOne(
   {
      policyId: 1,
      customerName: "Michelle",
      revision: 1,
      itemsInsured: [
         "golf clubs",
         "car"
      ],
      dateSet: new Date()
   }
)

LANGUAGE: javascript
CODE:
db.policyRevisions.insertOne(
   {
      policyId: 1,
      customerName: "Michelle",
      revision: 1,
      itemsInsured: [
         "golf clubs",
         "car"
      ],
      dateSet: new Date()
   }
)

----------------------------------------

TITLE: Successful updateSearchIndex Command Output in MongoDB
DESCRIPTION: This snippet shows the expected output of a successful updateSearchIndex command execution. It returns an 'ok' status of 1.

LANGUAGE: javascript
CODE:
{
   ok: 1
}

----------------------------------------

TITLE: Creating a Collection with Storage Engine Options
DESCRIPTION: Example of creating a collection with specific WiredTiger storage engine configuration.

LANGUAGE: javascript
CODE:
db.createCollection(
   "users",
   { storageEngine: { wiredTiger: { configString: "block_compressor=zlib" } } }
)

----------------------------------------

TITLE: Case-Insensitive Text Search in MongoDB
DESCRIPTION: Shows how text search handles case and diacritic insensitive searches using the $text operator.

LANGUAGE: javascript
CODE:
db.stores.find( { $text: { $search: "\"COFFEé SHOP\"" } } )

----------------------------------------

TITLE: Adding a Priority 0 Member to a Replica Set in MongoDB
DESCRIPTION: Demonstrates how to add a mongod instance as a priority 0 secondary member to a replica set using a member configuration document.

LANGUAGE: javascript
CODE:
rs.add( { host: "mongodbd4.example.net:27017", priority: 0 } )

----------------------------------------

TITLE: Defining $sqrt Operator in MongoDB Aggregation
DESCRIPTION: Demonstrates the syntax for using the $sqrt operator in MongoDB aggregation. The operator calculates the square root of a positive number and returns the result as a double.

LANGUAGE: javascript
CODE:
{ $sqrt: <number> }

----------------------------------------

TITLE: Insert Game Scores Sample Data
DESCRIPTION: Sample data insertion for demonstrating $firstN functionality with game scores

LANGUAGE: javascript
CODE:
db.gamescores.insertMany([
   { playerId: "PlayerA", gameId: "G1", score: 31 },
   { playerId: "PlayerB", gameId: "G1", score: 33 },
   { playerId: "PlayerC", gameId: "G1", score: 99 },
   { playerId: "PlayerD", gameId: "G1", score: 1 },
   { playerId: "PlayerA", gameId: "G2", score: 10 },
   { playerId: "PlayerB", gameId: "G2", score: 14 },
   { playerId: "PlayerC", gameId: "G2", score: 66 },
   { playerId: "PlayerD", gameId: "G2", score: 80 }
])

----------------------------------------

TITLE: Authenticating with MongoDB Using Password Prompt
DESCRIPTION: Example showing how to authenticate in MongoDB using the db.auth() method with passwordPrompt() for secure password entry.

LANGUAGE: javascript
CODE:
db.auth( "username", passwordPrompt() )

----------------------------------------

TITLE: Defining $top Accumulator Syntax in MongoDB
DESCRIPTION: Demonstrates the syntax for using the $top accumulator in MongoDB aggregation pipelines. It specifies the required fields 'sortBy' for ordering and 'output' for the result expression.

LANGUAGE: javascript
CODE:
{
   $top:
      {
         sortBy: { <field1>: <sort order>, <field2>: <sort order> ... },
         output: <expression>
      }
}

----------------------------------------

TITLE: Basic Insert Command Syntax in MongoDB
DESCRIPTION: The basic syntax structure for the MongoDB insert command, showing all available fields including collection name, documents array, ordering, timeout, write concern, validation bypass, and comment.

LANGUAGE: javascript
CODE:
db.runCommand(
   {
      insert: <collection>,
      documents: [ <document>, <document>, <document>, ... ],
      ordered: <boolean>,
      maxTimeMS: <integer>,
      writeConcern: { <write concern> },
      bypassDocumentValidation: <boolean>,
      comment: <any>
   }
)

----------------------------------------

TITLE: Verifying Operation Rejection Filter with Explain Command in MongoDB
DESCRIPTION: This snippet demonstrates how to use the explain() method to confirm that the operation rejection filter has been applied to a specific query in MongoDB.

LANGUAGE: javascript
CODE:
db.pizzaOrders.explain().find( { orderDate: { $gt: ISODate(
"2023-01-20T00:00:00Z" ) } } ).sort( { totalNumber: 1 } )

----------------------------------------

TITLE: $unwind with Options Example
DESCRIPTION: Shows how to use $unwind with preserveNullAndEmptyArrays and includeArrayIndex options.

LANGUAGE: javascript
CODE:
db.inventory2.aggregate( [ 
  { 
    $unwind: 
      { 
        path: "$sizes", 
        includeArrayIndex: "arrayIndex" 
      } 
   }])

----------------------------------------

TITLE: Stepping Down Primary in MongoDB Replica Set
DESCRIPTION: The rs.stepDown() method is used to step down the primary node in a MongoDB replica set. It takes two optional parameters: stepDownSecs (the number of seconds to step down) and secondaryCatchUpPeriodSecs (the number of seconds to wait for a secondary to catch up).

LANGUAGE: javascript
CODE:
rs.stepDown(stepDownSecs, secondaryCatchUpPeriodSecs)

----------------------------------------

TITLE: Creating Hidden Index in MongoDB
DESCRIPTION: Example of creating a new hidden index on the borough field using createIndex() method with the hidden option set to true.

LANGUAGE: javascript
CODE:
db.addresses.createIndex(
   { borough: 1 },
   { hidden: true }
);

----------------------------------------

TITLE: Querying MongoDB for Array Element in JavaScript Shell
DESCRIPTION: This snippet demonstrates how to query MongoDB for documents where the 'instock' array contains a specific document with 'warehouse' and 'qty' fields.

LANGUAGE: javascript
CODE:
db.inventory.find( { "instock": { warehouse: "A", qty: 5 } } )

----------------------------------------

TITLE: Defining Collection-Level Privileges in MongoDB
DESCRIPTION: Example of defining collection-specific privileges in a user-defined role. Shows how to scope different actions to specific collections within a database using resource documents.

LANGUAGE: javascript
CODE:
privileges: [
  { resource: { db: "products", collection: "inventory" }, actions: [ "find", "update", "insert" ] },
  { resource: { db: "products", collection: "orders" },  actions: [ "find" ] }
]

----------------------------------------

TITLE: Inserting Sample Sales Data in MongoDB
DESCRIPTION: Creates a sample collection of sales data using insertMany() operation. The documents include fields for _id, item name, price (as Decimal128), quantity (as Int32), and date (as ISODate). The sample data spans multiple dates from 2014 to 2016.

LANGUAGE: javascript
CODE:
db.sales.insertMany([
  { "_id" : 1, "item" : "abc", "price" : Decimal128("10"), "quantity" : Int32("2"), "date" : ISODate("2014-03-01T08:00:00Z") },
  { "_id" : 2, "item" : "jkl", "price" : Decimal128("20"), "quantity" : Int32("1"), "date" : ISODate("2014-03-01T09:00:00Z") },
  { "_id" : 3, "item" : "xyz", "price" : Decimal128("5"), "quantity" : Int32( "10"), "date" : ISODate("2014-03-15T09:00:00Z") },
  { "_id" : 4, "item" : "xyz", "price" : Decimal128("5"), "quantity" :  Int32("20") , "date" : ISODate("2014-04-04T11:21:39.736Z") },
  { "_id" : 5, "item" : "abc", "price" : Decimal128("10"), "quantity" : Int32("10") , "date" : ISODate("2014-04-04T21:23:13.331Z") },
  { "_id" : 6, "item" : "def", "price" : Decimal128("7.5"), "quantity": Int32("5" ) , "date" : ISODate("2015-06-04T05:08:13Z") },
  { "_id" : 7, "item" : "def", "price" : Decimal128("7.5"), "quantity": Int32("10") , "date" : ISODate("2015-09-10T08:43:00Z") },
  { "_id" : 8, "item" : "abc", "price" : Decimal128("10"), "quantity" : Int32("5" ) , "date" : ISODate("2016-02-06T20:20:13Z") },
])

----------------------------------------

TITLE: Syntax for $documentNumber in MongoDB Aggregation
DESCRIPTION: The basic syntax for using the $documentNumber operator in a MongoDB aggregation pipeline. It does not accept any parameters.

LANGUAGE: none
CODE:
{ $documentNumber: { } }

----------------------------------------

TITLE: Restaurant Collection Data Insert
DESCRIPTION: Example of inserting multiple restaurant documents into a collection for sorting demonstration.

LANGUAGE: javascript
CODE:
db.restaurants.insertMany( [
   { "_id" : 1, "name" : "Central Park Cafe", "borough" : "Manhattan"},
   { "_id" : 2, "name" : "Rock A Feller Bar and Grill", "borough" : "Queens"},
   { "_id" : 3, "name" : "Empire State Pub", "borough" : "Brooklyn"},
   { "_id" : 4, "name" : "Stan's Pizzaria", "borough" : "Manhattan"},
   { "_id" : 5, "name" : "Jane's Deli", "borough" : "Brooklyn"},
] );

----------------------------------------

TITLE: Using $range in MongoDB Aggregation Pipeline
DESCRIPTION: Demonstrates the use of $range operator in an aggregation pipeline to calculate rest stops for a bicyclist. The $range operator generates an array of stopping points every 25 miles for each city.

LANGUAGE: javascript
CODE:
db.distances.aggregate([{
    $project: {
        _id: 0,
        city: 1,
        "Rest stops": { $range: [ 0, "$distance", 25 ] }
    }
}])

----------------------------------------

TITLE: Check if Balancer is Running
DESCRIPTION: Determines if the balancer process is currently active in the cluster.

LANGUAGE: javascript
CODE:
sh.isBalancerRunning()

----------------------------------------

TITLE: Upserting with findAndModify in MongoDB
DESCRIPTION: Example of using findAndModify with the upsert option to either update an existing document or insert a new one if no match is found.

LANGUAGE: javascript
CODE:
db.people.findAndModify({
    query: { name: "Gus", state: "active", rating: 100 },
    sort: { rating: 1 },
    update: { $inc: { score: 1 } },
    upsert: true
})

----------------------------------------

TITLE: Creating ClientEncryption in Python
DESCRIPTION: Example showing how to instantiate a ClientEncryption object using the Python MongoDB driver. Requires specifying CodecOptions configured on MongoClient, Database, or Collection for encrypting and decrypting documents.

LANGUAGE: python
CODE:
# Code reference: /includes/queryable-encryption/fundamentals/manual-encryption/manual-enc.py

----------------------------------------

TITLE: Inserting an Invalid Document After Schema Validation Update
DESCRIPTION: This snippet attempts to insert a document that violates the updated schema validation rules. The password is only 10 characters long, which is less than the new minimum of 12 characters.

LANGUAGE: javascript
CODE:
db.users.insertOne(
   {
      "username": "salesAdmin01",
      "password": "kT9$j4wg#M"
   }
)

----------------------------------------

TITLE: MongoDB $push with Modifiers Syntax
DESCRIPTION: Demonstrates the syntax for using $push with modifiers like $each, $slice, $sort, and $position.

LANGUAGE: javascript
CODE:
{ $push: { <field1>: { <modifier1>: <value1>, ... }, ... } }

----------------------------------------

TITLE: Sharding a Collection
DESCRIPTION: MongoDB shell command to enable sharding on a specific collection by specifying the namespace and shard key. Requires prior index creation if collection has existing data.

LANGUAGE: javascript
CODE:
sh.shardCollection("<database>.<collection>", { <key> : <direction> } )

----------------------------------------

TITLE: Creating a GeoJSON MultiPoint in MongoDB
DESCRIPTION: Defines a GeoJSON MultiPoint object with an array of point coordinates. Used for representing multiple discrete locations. Requires 2dsphere index version 2 or later.

LANGUAGE: javascript
CODE:
{
  type: "MultiPoint",
  coordinates: [
     [ -73.9580, 40.8003 ],
     [ -73.9498, 40.7968 ],
     [ -73.9737, 40.7648 ],
     [ -73.9814, 40.7681 ]
  ]
}

----------------------------------------

TITLE: Sharding and Distributing a Collection in MongoDB
DESCRIPTION: This snippet demonstrates how to shard the 'people' collection in the 'records' database using the 'zipcode' field as the shard key.

LANGUAGE: javascript
CODE:
sh.shardAndDistributeCollection("records.people", { zipcode: 1 } )

----------------------------------------

TITLE: Querying Encrypted Documents in C# with MongoDB Queryable Encryption
DESCRIPTION: This code snippet demonstrates how to query a document with encrypted fields using both a client configured for automatic Queryable Encryption and a standard client in C#. It illustrates the difference in query results when accessing encrypted data.

LANGUAGE: csharp
CODE:
var doc = collection.Find(Builders<BsonDocument>.Filter.Eq("encryptedField", "123456789")).First();
Console.WriteLine("\nRetrieved document with encrypted client:");
Console.WriteLine(
    encryptedClient.GetDatabase("test")
        .GetCollection<BsonDocument>("coll")
        .Find(Builders<BsonDocument>.Filter.Eq("encryptedField", "123456789"))
        .First()
);
Console.WriteLine("\nRetrieved document with regular client:");
Console.WriteLine(
    regularClient.GetDatabase("test")
        .GetCollection<BsonDocument>("coll")
        .Find(Builders<BsonDocument>.Filter.Eq("encryptedField", "123456789"))
        .First()
);

----------------------------------------

TITLE: Basic $addToSet Syntax in MongoDB
DESCRIPTION: Demonstrates the basic syntax for using the $addToSet operator to add unique values to an array field.

LANGUAGE: javascript
CODE:
{ $addToSet: { <field1>: <value1>, ... } }

----------------------------------------

TITLE: Calculating Rolling Average Over 30 Days in MongoDB
DESCRIPTION: This aggregation pipeline uses $setWindowFields to calculate a rolling average of the closing price over the last 30 days for each stock symbol.

LANGUAGE: javascript
CODE:
db.dowJonesTickerData.aggregate( [
   { $setWindowFields: {
      partitionBy: { symbol : "$symbol" } ,
      sortBy: { date: 1 },
      output: {
         averageMonthClosingPrice: {
            $avg : "$close",
            window : { range : [-1, "current"], unit : "month" }

         } 
      } 
   } }
] )

----------------------------------------

TITLE: $push with $group Stage Example
DESCRIPTION: Aggregation pipeline using $push within a $group stage to group sales by date and create arrays of items sold.

LANGUAGE: javascript
CODE:
db.sales.aggregate([
   { $sort: { date: 1, item: 1 } },
   {
       $group:
         {
           _id: { day: { $dayOfYear: "$date"}, year: { $year: "$date" } },
           itemsSold: { $push:  { item: "$item", quantity: "$quantity" } }
         }
     }
   ])

----------------------------------------

TITLE: List Collections with Full Details
DESCRIPTION: Demonstrates how to get detailed information about collections including options, UUID, and index information.

LANGUAGE: javascript
CODE:
db.runCommand(
   {
      listCollections: 1.0
   }
)

----------------------------------------

TITLE: Insert Document With _id Field
DESCRIPTION: Example of inserting a single document with a specified _id field value.

LANGUAGE: javascript
CODE:
db.products.insert( { _id: 10, item: "box", qty: 20 } )

----------------------------------------

TITLE: Using itcount() Method with MongoDB Cursor in JavaScript
DESCRIPTION: Demonstrates how to use the itcount() method on a MongoDB cursor to count the number of documents remaining. This method executes the query on an existing iterator, exhausting its contents in the process.

LANGUAGE: javascript
CODE:
db.collection.find(<query>).itcount()

----------------------------------------

TITLE: Inserting Sample Documents into MongoDB Collection
DESCRIPTION: This code inserts multiple documents into the 'survey' collection to demonstrate $elemMatch queries on arrays of embedded documents.

LANGUAGE: javascript
CODE:
db.survey.insertMany( [
   { "_id": 1, "results": [ { "product": "abc", "score": 10 },
                            { "product": "xyz", "score": 5 } ] },
   { "_id": 2, "results": [ { "product": "abc", "score": 8 },
                            { "product": "xyz", "score": 7 } ] },
   { "_id": 3, "results": [ { "product": "abc", "score": 7 },
                            { "product": "xyz", "score": 8 } ] },
   { "_id": 4, "results": [ { "product": "abc", "score": 7 },
                            { "product": "def", "score": 8 } ] },
   { "_id": 5, "results": { "product": "xyz", "score": 7 } }                               
] )

----------------------------------------

TITLE: Creating MongoDB Capped Collection
DESCRIPTION: Creates a capped collection named 'log' with a maximum size of 2,621,440 bytes using the createCollection command.

LANGUAGE: javascript
CODE:
db.createCollection( "log", { capped: true, size: 2621440 } )

----------------------------------------

TITLE: Defining Zone Ranges for MongoDB Sharded Cluster
DESCRIPTION: This snippet demonstrates how to define zone ranges for a sharded cluster using a shard key on the 'x' field. It shows two zones, A and B, covering different ranges of the shard key.

LANGUAGE: javascript
CODE:
{ "x" : 5 } --> { "x" : 10 } // Zone A
{ "x" : 10} --> { "x" : 20 } // Zone B

----------------------------------------

TITLE: Extracting Private Key for GCP KMS Configuration
DESCRIPTION: Command to extract and format a private key from a user-key.json credential file using OpenSSL. This transforms the key into the required base64 format without PEM markers.

LANGUAGE: shell
CODE:
cat user-key.json | jq -r .private_key | openssl pkcs8 -topk8 -nocrypt -inform PEM -outform DER | base64 -w 0

----------------------------------------

TITLE: Multi-field Sorting in MongoDB Aggregation
DESCRIPTION: Demonstrates sorting documents by multiple fields with different sort orders. In this example, documents are sorted by 'age' in descending order and then by 'posts' in ascending order.

LANGUAGE: javascript
CODE:
db.users.aggregate(
   [
     { $sort : { age : -1, posts: 1 } }
   ]
)

----------------------------------------

TITLE: Creating a Collection with Collation
DESCRIPTION: Example of creating a collection with French language collation settings.

LANGUAGE: javascript
CODE:
db.createCollection( "myColl", { collation: { locale: "fr" } } );

----------------------------------------

TITLE: Using $function in MongoDB Aggregation Pipeline
DESCRIPTION: Demonstrates using $function within a $addFields stage to add custom fields to documents. Includes functions for checking MD5 hash and formatting a message string.

LANGUAGE: javascript
CODE:
db.players.aggregate( [
   { $addFields:
      {
        isFound:
            { $function:
               {
                  body: function(name) { 
                     return hex_md5(name) == "15b0a220baa16331e8d80e15367677ad"
                  },
                  args: [ "$name" ],
                  lang: "js"
               }
            },
         message: 
            { $function:
               {
                  body: function(name, scores) {
                     let total = Array.sum(scores);
                     return `Hello ${name}.  Your total score is ${total}.`
                  },
                  args: [ "$name", "$scores"],
                  lang: "js"
               }
            }
       }
    }
] )

----------------------------------------

TITLE: Inserting Sample Data into MongoDB Collection
DESCRIPTION: Creates a sample 'warehouses' collection with documents containing array fields for demonstration.

LANGUAGE: javascript
CODE:
db.warehouses.insertMany( [
   { _id : 1, instock: [ "chocolate" ], ordered: [ "butter", "apples" ] },
   { _id : 2, instock: [ "apples", "pudding", "pie" ] },
   { _id : 3, instock: [ "pears", "pecans" ], ordered: [ "cherries" ] },
   { _id : 4, instock: [ "ice cream" ], ordered: [ ] }
] )

----------------------------------------

TITLE: Including Specific Fields in MongoDB Wildcard Index
DESCRIPTION: Creates a wildcard index that includes only attributes.size and attributes.color fields, demonstrating field inclusion in wildcardProjection.

LANGUAGE: javascript
CODE:
db.products.createIndex(
   {
      "$**" : 1
   },
   {
      "wildcardProjection" : {
         "attributes.size" : 1, 
         "attributes.color" : 1
      }
   }
)

----------------------------------------

TITLE: Syntax for MongoDB $nin Operator in JavaScript
DESCRIPTION: Demonstrates the basic syntax for using the $nin operator in a MongoDB query. It shows how to specify a field and an array of values to exclude.

LANGUAGE: javascript
CODE:
{ field: { $nin: [ <value1>, <value2> ... <valueN> ] } }

----------------------------------------

TITLE: Embedded Fields Removal Example in MongoDB Aggregation
DESCRIPTION: Example showing how to remove both top-level and nested fields using dot notation in $unset.

LANGUAGE: javascript
CODE:
db.books.aggregate([
   { $unset: [ "isbn", "author.first", "copies.warehouse" ] }
])

----------------------------------------

TITLE: Updating Current Policy and Adding Revision in MongoDB
DESCRIPTION: This snippet shows how to update a policy in the currentPolicies collection and add a new revision to the policyRevisions collection. It demonstrates adding a new item to the policy and incrementing the revision number.

LANGUAGE: javascript
CODE:
db.currentPolicies.updateOne(
   { policyId: 1 },
   {
      $push: {
         itemsInsured: "watch"
      },
      $inc: {
         revision: 1
      },
      $currentDate: {
         dateSet: true
      }
   }
)

LANGUAGE: javascript
CODE:
db.currentPolicies.aggregate( [
   {
      $match: { policyId: 1 }
   },
   {
      $set: { _id: new ObjectId() }
   },
   {
      $merge: {
         into: { db: "test", coll: "policyRevisions" },
         on: "_id",
         whenNotMatched: "insert"
      }
   }
] )

----------------------------------------

TITLE: Retrieving Database Connection in MongoDB Shell
DESCRIPTION: Method to get the current database connection. Used to verify that mongosh has successfully connected to the intended database instance. Returns a connection object representing the active MongoDB connection.

LANGUAGE: javascript
CODE:
db.getMongo()

----------------------------------------

TITLE: MongoDB Shell Query Operations
DESCRIPTION: Documentation for performing query operations using db.collection.find() method in mongosh shell



----------------------------------------

TITLE: Defining $sort Stage in MongoDB Aggregation Pipeline
DESCRIPTION: Demonstrates the basic syntax for using the $sort operator in a MongoDB aggregation pipeline. The operator takes a document specifying fields to sort by and their respective sort orders.

LANGUAGE: javascript
CODE:
{ $sort: { <field1>: <sort order>, <field2>: <sort order> ... } }

----------------------------------------

TITLE: Projecting Deleted Document with findOneAndDelete() in MongoDB
DESCRIPTION: Shows how to use the projection option with findOneAndDelete() to return only specific fields of the deleted document.

LANGUAGE: javascript
CODE:
db.scores.findOneAndDelete(
   { "name" : "A. MacDyver" },
   { sort : { "points" : 1 }, projection: { "assignment" : 1 } }
)

----------------------------------------

TITLE: Simple $merge Collection Reference
DESCRIPTION: Simplified form of $merge when writing to a collection in the same database.

LANGUAGE: javascript
CODE:
{ $merge: <collection> }

----------------------------------------

TITLE: Changed Read Concern Value in MongoDB
DESCRIPTION: This snippet shows the value of the read concern after it has been set using the setDefaultRWConcern command.

LANGUAGE: mongodb
CODE:
"global"

----------------------------------------

TITLE: Configuring KMS Provider Settings for MongoDB Encryption
DESCRIPTION: Sets up the KMS provider configuration for local key management. This code specifies the master key and configures the local KMS provider for MongoDB's queryable encryption feature.

LANGUAGE: javascript
CODE:
const kmsProviders = {
  local: {
    key: localMasterKey
  }
};

----------------------------------------

TITLE: MongoDB Compass Query with $elemMatch
DESCRIPTION: Provides a query filter for MongoDB Compass to find documents in the 'inventory' collection where 'instock' array elements meet specific quantity criteria.

LANGUAGE: javascript
CODE:
{ "instock": { $elemMatch: { qty: { $gt: 10, $lte: 20 } } } }

----------------------------------------

TITLE: Querying Array Elements - MongoDB
DESCRIPTION: Examples of MongoDB query operations for arrays, including exact matching, element matching, and compound conditions using filter expressions.

LANGUAGE: mongodb
CODE:
{ genres: ["Action", "Comedy"] }

LANGUAGE: mongodb
CODE:
{ genres: { $all: ["Action", "Comedy"] } }

LANGUAGE: mongodb
CODE:
{ genres: "Short" }

LANGUAGE: mongodb
CODE:
{ genres: { $nin: ["Drama"] } }

LANGUAGE: mongodb
CODE:
{ cast: { $regex: "Olsen$", $eq: "Mary-Kate Olsen" } }

LANGUAGE: mongodb
CODE:
{ languages: { $elemMatch: { $ne: null, $ne: "English" } } }

LANGUAGE: mongodb
CODE:
{ "countries.0": { $ne: "USA" } }

LANGUAGE: mongodb
CODE:
{ genres: { $size: 3 } }

----------------------------------------

TITLE: Computing New Fields in MongoDB Aggregation
DESCRIPTION: Shows how to use $project to add new computed fields (isbn parts, lastName, copiesSold) based on existing fields in the documents.

LANGUAGE: javascript
CODE:
db.books.aggregate(
   [
      {
         $project: {
            title: 1,
            isbn: {
               prefix: { $substr: [ "$isbn", 0, 3 ] },
               group: { $substr: [ "$isbn", 3, 2 ] },
               publisher: { $substr: [ "$isbn", 5, 4 ] },
               title: { $substr: [ "$isbn", 9, 3 ] },
               checkDigit: { $substr: [ "$isbn", 12, 1] }
            },
            lastName: "$author.last",
            copiesSold: "$copies"
         }
      }
   ]
)

----------------------------------------

TITLE: Simplified MongoDB Query Using Implicit AND in JavaScript
DESCRIPTION: Shows how the previous query can be simplified using MongoDB's implicit AND operation, combining multiple conditions on the same field without explicitly using $and.

LANGUAGE: javascript
CODE:
db.inventory.find( { price: { $ne: 1.99, $exists: true } } )

----------------------------------------

TITLE: Basic Sharded Data Distribution Query in MongoDB
DESCRIPTION: Basic syntax for using the $shardedDataDistribution aggregation stage. Must be run on the admin database by a user with shardedDataDistribution privilege.

LANGUAGE: javascript
CODE:
db.aggregate( [
   { $shardedDataDistribution: { } }
] )

----------------------------------------

TITLE: Configuring Query Analyzer for MongoDB Collection
DESCRIPTION: This snippet demonstrates how to use db.collection.configureQueryAnalyzer() to enable query sampling on the social.post collection. It sets the mode to 'full' and samples 5 queries per second.

LANGUAGE: javascript
CODE:
use social
db.post.configureQueryAnalyzer( 
   {
      mode: full,
      samplesPerSecond: 5
   } 
)

----------------------------------------

TITLE: Authentication Example with Database Selection
DESCRIPTION: Example showing database selection and authentication with password prompt.

LANGUAGE: javascript
CODE:
use test
db.auth( "myTestDBUser", passwordPrompt() )

----------------------------------------

TITLE: Updating Document Fields with $set and $currentDate in MongoDB
DESCRIPTION: Demonstrates how to update document fields using the $set operator to modify size.uom and status fields, while using $currentDate to update or create a lastModified timestamp field.

LANGUAGE: javascript
CODE:
db.collection.update(
  { },
  {
    $set: {
      "size.uom": "cm",
      "status": "P"
    },
    $currentDate: { lastModified: true }
  }
)

----------------------------------------

TITLE: Running mongokerberos in Server Mode
DESCRIPTION: Executes mongokerberos in server mode to analyze Kerberos-related configurations on the server and generate a report on any problematic settings.

LANGUAGE: bash
CODE:
mongokerberos --server

----------------------------------------

TITLE: Replacing a Document with bulkWrite() in MongoDB
DESCRIPTION: Shows how to use the replaceOne operation within bulkWrite() to replace a single document matching a filter.

LANGUAGE: javascript
CODE:
db.collection.bulkWrite([
   { replaceOne :
      {
         "filter" : <document>,
         "replacement" : <document>,
         "upsert" : <boolean>,
         "collation": <document>, 
         "hint": <document|string> 
      }
   }
] )

----------------------------------------

TITLE: MongoDB GetMore Operation Profile Document
DESCRIPTION: Example profile document showing metrics for a getMore operation that retrieves additional documents from a cursor, including the originating command and execution details.

LANGUAGE: javascript
CODE:
{
  "op" : "getmore",
  "ns" : "test.report",
  "command" : {
     "getMore" : Long("33629063128"),
     "collection" : "report",
     "batchSize": 3,
     "lsid" : {
        "id": new UUID("3148c569-425c-4498-9168-5b7ee260bf27")
     },
     "$db" : "test"
  },
  "originatingCommand": {
     "find: "report",
     "filter" : { "a" : { "$lte" : 500 } },
     "lsid" : {
        "id" : UUID("5ccd5b81-b023-41f3-8959-bf99ed696ce9")
     },
     "$db" : "test"
  }
}

----------------------------------------

TITLE: MongoDB Data Migration Command
DESCRIPTION: mongorestore command to migrate data from sharded cluster to new replica set, excluding config database

LANGUAGE: shell
CODE:
mongorestore --nsExclude="config.*" <connection-string> /data/backup

----------------------------------------

TITLE: Initializing MongoDB Replica Set
DESCRIPTION: Uses the rs.initiate() method to initialize the replica set after reconnecting to the server instance.

LANGUAGE: javascript
CODE:
rs.initiate()

----------------------------------------

TITLE: Querying Zone Ranges in MongoDB
DESCRIPTION: Example demonstrating how to query the config database to find ranges associated with a specific zone.

LANGUAGE: javascript
CODE:
use config
db.tags.find({ tag: "NYC" })

----------------------------------------

TITLE: Calculating Exponential Moving Average Using N Parameter in MongoDB
DESCRIPTION: This example uses the $expMovingAvg operator within the $setWindowFields stage to calculate the exponential moving average of stock prices. It partitions the data by stock, sorts by date, and uses N=2 for the calculation.

LANGUAGE: javascript
CODE:
db.stockPrices.aggregate( [
   {
      $setWindowFields: {
         partitionBy: "$stock",
         sortBy: { date: 1 },
         output: {
            expMovingAvgForStock: {
               $expMovingAvg: { input: "$price", N: 2 }
            }
         }
      }
   }
] )

----------------------------------------

TITLE: Deleting Multiple Documents in MongoDB using C# Driver
DESCRIPTION: This snippet shows how to delete multiple documents using the MongoDB C# driver. The actual code is not provided in the snippet, but it references an external file.

LANGUAGE: csharp
CODE:
// Code is referenced from an external file:
// /driver-examples/DocumentationExamples.cs

----------------------------------------

TITLE: MongoDB DNS Configuration Example
DESCRIPTION: Example DNS record configuration for MongoDB SRV connection strings.

LANGUAGE: text
CODE:
Record                            TTL   Class    Priority Weight Port  Target
_mongodb._tcp.server.example.com. 86400 IN SRV   0        5      27317 mongodb1.example.com.
_mongodb._tcp.server.example.com. 86400 IN SRV   0        5      27017 mongodb2.example.com.

----------------------------------------

TITLE: MongoDB $eq Operator Syntax
DESCRIPTION: Basic syntax definition for the MongoDB $eq operator that compares two expressions for equality.

LANGUAGE: javascript
CODE:
{ $eq: [ <expression1>, <expression2> ] }

----------------------------------------

TITLE: MongoDB Shell Query Projection
DESCRIPTION: Demonstrates how to query documents with status 'A' while projecting only the item and status fields, plus the last element of the instock array using the MongoDB shell.

LANGUAGE: javascript
CODE:
db.inventory.find( { status: "A" }, { item: 1, status: 1, instock: { $slice: -1 } } )

----------------------------------------

TITLE: Deleting Multiple Documents with db.collection.deleteMany() in MongoDB
DESCRIPTION: Deletes all documents that match a specified filter. This method is used for bulk deletion of documents based on a filter condition.

LANGUAGE: mongodb
CODE:
db.collection.deleteMany()

----------------------------------------

TITLE: Embedding Publisher Data in Book Documents (MongoDB JavaScript)
DESCRIPTION: This snippet shows how embedding publisher information within book documents leads to data repetition. It demonstrates the drawback of the embedding approach in a one-to-many relationship between publishers and books.

LANGUAGE: javascript
CODE:
{
   title: "MongoDB: The Definitive Guide",
   author: [ "Kristina Chodorow", "Mike Dirolf" ],
   published_date: ISODate("2010-09-24"),
   pages: 216,
   language: "English",
   publisher: {
              name: "O'Reilly Media",
              founded: 1980,
              location: "CA"
            }
}

{
   title: "50 Tips and Tricks for MongoDB Developer",
   author: "Kristina Chodorow",
   published_date: ISODate("2011-05-06"),
   pages: 68,
   language: "English",
   publisher: {
              name: "O'Reilly Media",
              founded: 1980,
              location: "CA"
            }
}

----------------------------------------

TITLE: Enabling MongoDB Database Sharding - Example
DESCRIPTION: Shows a practical example of enabling sharding on a database named 'shardTest' using the sh.enableSharding() method.

LANGUAGE: javascript
CODE:
sh.enableSharding("shardTest")

----------------------------------------

TITLE: Counting All Documents in a MongoDB Collection
DESCRIPTION: This snippet demonstrates how to count all documents in a MongoDB collection named 'orders' using the deprecated count() method.

LANGUAGE: javascript
CODE:
db.orders.count()

----------------------------------------

TITLE: Adding Fields to Embedded Documents with $set in MongoDB
DESCRIPTION: Shows how to use dot notation with $set to add new fields to embedded documents within a MongoDB collection.

LANGUAGE: javascript
CODE:
db.vehicles.aggregate( [
  { $set: { "specs.fuel_type": "unleaded" } }
] )

----------------------------------------

TITLE: Using Two $set Stages in MongoDB Aggregation
DESCRIPTION: Illustrates the use of multiple $set stages in a single aggregation pipeline. This example calculates total scores for homework, quizzes, and overall performance.

LANGUAGE: javascript
CODE:
db.scores.aggregate( [
  {
    $set: {
       totalHomework: { $sum: "$homework" },
       totalQuiz: { $sum: "$quiz" }
    }
  },
  {
    $set: { 
       totalScore: { $add: [ "$totalHomework", "$totalQuiz", "$extraCredit" ] } }
  }
] )

----------------------------------------

TITLE: Query Index Creation Operations
DESCRIPTION: Example showing how to find active index creation operations using aggregation pipeline.

LANGUAGE: javascript
CODE:
db.getSiblingDB("admin").aggregate( [
   { $currentOp : { idleConnections: true } },
   { $match: {
         $or: [
            { "op": "command", "command.createIndexes": { $exists: true } },
            { "op": "none", "msg": /^Index Build/ }
         ]
      }
   }
] )

----------------------------------------

TITLE: Using $geoNear with Minimum Distance
DESCRIPTION: Shows how to use the minDistance option in $geoNear to find documents with locations at least 2 meters away from a specified point, filtered by category.

LANGUAGE: javascript
CODE:
db.places.aggregate([ 
   {
     $geoNear: {
        near: { type: "Point", coordinates: [ -73.99279 , 40.719296 ] },
        distanceField: "dist.calculated",
        minDistance: 2,
        query: { category: "Parks" },
        includeLocs: "dist.location",
        spherical: true
     }
   }
])

----------------------------------------

TITLE: Aggregation Pipeline with $objectToArray
DESCRIPTION: Pipeline that projects the dimensions field as an array using $objectToArray.

LANGUAGE: javascript
CODE:
db.inventory.aggregate([
   {
      $project: {
         item: 1,
         dimensions: { $objectToArray: "$dimensions" }
      }
   }
])

----------------------------------------

TITLE: Querying Parent Node in MongoDB Tree Structure
DESCRIPTION: This query retrieves the parent of a specific node in the tree structure. It demonstrates how to quickly access the parent reference stored in each document.

LANGUAGE: javascript
CODE:
db.categories.findOne( { _id: "MongoDB" } ).parent

----------------------------------------

TITLE: Connecting to MongoDB Cluster via mongosh
DESCRIPTION: Command to connect to a mongos instance using mongosh CLI. Demonstrates connecting to a specific host and port.

LANGUAGE: bash
CODE:
mongosh --host mongos0.example.net --port 27017

----------------------------------------

TITLE: Querying MongoDB with Projection in Ruby
DESCRIPTION: This snippet demonstrates how to query MongoDB with projection using the Ruby driver.

LANGUAGE: ruby
CODE:
# Start Example 45
# End Example 45

----------------------------------------

TITLE: Initializing Unordered Bulk Operations in MongoDB
DESCRIPTION: Describes the execution behavior of unordered bulk operations in MongoDB. Operations may be reordered by MongoDB to optimize performance, so applications should not rely on operation ordering when using unordered bulk operations.

LANGUAGE: mongodb
CODE:
db.collection.initializeUnorderedBulkOp()

----------------------------------------

TITLE: Creating Capped Collection in MongoDB
DESCRIPTION: Creates a capped collection named 'log' with a maximum size of 100000 bytes. Capped collections maintain insertion order and automatically remove old documents when size limit is reached.

LANGUAGE: javascript
CODE:
db.createCollection("log", { capped: true, size: 100000 } )

----------------------------------------

TITLE: Querying MongoDB with $bitsAnyClear using Integer Bitmask
DESCRIPTION: This example shows how to use the $bitsAnyClear operator to test whether field 'a' has any bits clear at positions 0, 1, and 5 using an integer bitmask of 35 (binary 00100011).

LANGUAGE: javascript
CODE:
db.collection.find( { a: { $bitsAnyClear: 35 } } )

----------------------------------------

TITLE: Creating Custom Compact Role in MongoDB
DESCRIPTION: Example of creating a custom role with compact privileges for a specific database and collection.

LANGUAGE: javascript
CODE:
use admin
db.createRole(
  {
    role: "myCustomCompactRole",
    privileges: [
      {
        resource: { "db" : "<database>" , "collection" : "<collection>" },
        actions: [ "compact" ]
      }
    ],
    roles: []
  }
)

----------------------------------------

TITLE: Basic Explain Usage with Remove Operation
DESCRIPTION: Example showing how to use explain() to analyze a remove operation on a collection.

LANGUAGE: javascript
CODE:
db.products.explain().remove( { category: "apparel" }, { justOne: true } )

----------------------------------------

TITLE: Creating MongoDB Text Index with Language Option
DESCRIPTION: Generic pattern for creating a text index with a specified default language. This affects stemming rules and stop word handling for the indexed content.

LANGUAGE: javascript
CODE:
db.<collection>.createIndex( 
   { <field>: "text" }, 
   { default_language: <language> } 
)

----------------------------------------

TITLE: List Current User Sessions
DESCRIPTION: Aggregation pipeline that lists all sessions for the current authenticated user, or all sessions if run without access control.

LANGUAGE: javascript
CODE:
use config

db.system.sessions.aggregate( [ { $listSessions: { } } ] )

----------------------------------------

TITLE: Creating Client-Side Field Level Encryption Options in MongoDB
DESCRIPTION: This snippet creates the options object for client-side field level encryption, including the key vault namespace and the local key provider configuration.

LANGUAGE: javascript
CODE:
var autoEncryptionOpts = {
  "keyVaultNamespace" : "encryption.__dataKeys",
  "kmsProviders" : {
    "local" : {
      "key" : BinData(0, TEST_LOCAL_KEY)
    }
  }
}

----------------------------------------

TITLE: Using $ifNull with Single Input Expression in MongoDB Aggregation
DESCRIPTION: This example demonstrates the use of $ifNull with a single input expression. It returns the 'description' field if non-null, otherwise it returns the string 'Unspecified'. This is useful for handling null or missing description fields.

LANGUAGE: javascript
CODE:
db.inventory.aggregate(
   [
      {
         $project: {
            item: 1,
            description: { $ifNull: [ "$description", "Unspecified" ] }
         }
      }
   ]
)

----------------------------------------

TITLE: Unhiding Secondary Node
DESCRIPTION: MongoDB shell commands to restore secondary node visibility and priority after index building.

LANGUAGE: bash
CODE:
var cfg = rs.conf();
cfg.members[2].priority = originalPriority;
cfg.members[2].hidden = false;
rs.reconfig(cfg);

----------------------------------------

TITLE: Clearing Specific Index Filter on Collection in MongoDB
DESCRIPTION: This example demonstrates how to remove a specific index filter from the 'orders' collection based on a query predicate.

LANGUAGE: javascript
CODE:
db.runCommand(
   {
      planCacheClearFilters: "orders",
      query: { "status" : "A" }
   }
)

----------------------------------------

TITLE: Creating a Wildcard Index on a Single Field Path in MongoDB
DESCRIPTION: Creates a wildcard index on the product_attributes field and its nested fields.

LANGUAGE: javascript
CODE:
use inventory
db.products_catalog.createIndex( { "product_attributes.$**" : 1 } )

----------------------------------------

TITLE: Updating Field with Period Using $setField in MongoDB
DESCRIPTION: This snippet demonstrates how to update a field with a period in its name using an aggregation pipeline with the $setField operator. It sets the 'price.usd' field to a new value.

LANGUAGE: javascript
CODE:
db.inventory.updateOne(
   { "item": "sweatshirt" },
   [
      { 
         $replaceWith: {
            $setField: {
               field: "price.usd",
               input: "$$ROOT",
               value: 29.99
            }
         }
      }
   ]
)

----------------------------------------

TITLE: Defining Tags for MongoDB Replica Set Members in JavaScript
DESCRIPTION: Demonstrates the structure of a tags document for MongoDB replica set members. Each tag consists of a key-value pair where both the tag name and value are strings.

LANGUAGE: javascript
CODE:
{ "<tag1>": "<string1>", "<tag2>": "<string2>",... }

----------------------------------------

TITLE: Restarting the MongoDB Balancer
DESCRIPTION: This snippet shows how to restart the MongoDB balancer after operations that require it to be stopped, using the sh.startBalancer() command.

LANGUAGE: javascript
CODE:
sh.startBalancer()

----------------------------------------

TITLE: Updating highScore with $max in MongoDB
DESCRIPTION: This example shows how to use the $max operator to update the highScore field if the specified value is greater than the current value.

LANGUAGE: javascript
CODE:
db.scores.updateOne( { _id: 1 }, { $max: { highScore: 950 } } )

----------------------------------------

TITLE: Aggregation Equivalent of db.collection.countDocuments() in MongoDB
DESCRIPTION: Shows the aggregation operation that db.collection.countDocuments() wraps to return an accurate count.

LANGUAGE: javascript
CODE:
db.collection.aggregate([
   { $match: <query> },
   { $group: { _id: null, n: { $sum: 1 } } }
])

----------------------------------------

TITLE: Example of Revoking Roles from User in MongoDB (JavaScript)
DESCRIPTION: Shows a practical example of using db.revokeRolesFromUser() to remove the 'read' role on the 'stock' database and the 'readWrite' role on the 'products' database from the user 'accountUser01'.

LANGUAGE: javascript
CODE:
use products
db.revokeRolesFromUser( "accountUser01",
                           [ { role: "read", db: "stock" }, "readWrite" ],
                           { w: "majority" }
                         )

----------------------------------------

TITLE: Using Multiple Databases with db.getSiblingDB() in MongoDB
DESCRIPTION: This example shows how to create multiple db objects referring to different databases using db.getSiblingDB(), and then perform operations on collections within those databases.

LANGUAGE: javascript
CODE:
users = db.getSiblingDB('users')
records = db.getSiblingDB('records')

users.active.countDocuments()
users.active.findOne()

records.requests.countDocuments()
records.requests.findOne()

----------------------------------------

TITLE: MongoDB Text Index Creation
DESCRIPTION: Example of creating a text index on a collection's field.

LANGUAGE: javascript
CODE:
db.articles.createIndex( { subject: "text" } )

----------------------------------------

TITLE: Aggregation Pipeline Update Example
DESCRIPTION: An example of using findAndModify with an aggregation pipeline for more complex updates.

LANGUAGE: javascript
CODE:
db.runCommand(
   {
     findAndModify: "students2",
     query: {  "_id" : 1 },
     update: [ { $set: { "total" : { $sum: "$grades.grade" } } } ],
     new: true
   }
)

----------------------------------------

TITLE: Group by Unwound Values Example
DESCRIPTION: Complex example showing how to unwind arrays and group by the resulting values with price averaging.

LANGUAGE: javascript
CODE:
db.inventory2.aggregate( [ 
   { 
     $unwind: { path: "$sizes", preserveNullAndEmptyArrays: true }
   },
   { 
     $group: 
       { 
         _id: "$sizes",
         averagePrice: { $avg: "$price" }
       }
   },
   {
     $sort: { "averagePrice": -1 }
   }
] )

----------------------------------------

TITLE: Creating Clusterwide Admin Role Example in MongoDB
DESCRIPTION: Example showing how to create a custom clusterwide admin role with specific privileges including addShard capability and various CRUD operations across different databases.

LANGUAGE: javascript
CODE:
db.adminCommand({ createRole: "myClusterwideAdmin",
  privileges: [
    { resource: { cluster: true }, actions: [ "addShard" ] },
    { resource: { db: "config", collection: "" }, actions: [ "find", "update", "insert", "remove" ] },
    { resource: { db: "users", collection: "usersCollection" }, actions: [ "update", "insert", "remove" ] },
    { resource: { db: "", collection: "" }, actions: [ "find" ] }
  ],
  roles: [
    { role: "read", db: "admin" }
  ],
  writeConcern: { w: "majority" , wtimeout: 5000 }
})

----------------------------------------

TITLE: Calculating Multiple Percentile Values as Accumulator in MongoDB
DESCRIPTION: An example demonstrating how to use $percentile to calculate multiple percentile values (50th, 75th, 90th, and 95th) for multiple test score fields in a single aggregation pipeline.

LANGUAGE: javascript
CODE:
db.testScores.aggregate( [
   {
       $group: {
          _id: null,
          test01_percentiles: {
             $percentile: {
                input: "$test01",
                p: [ 0.5, 0.75, 0.9, 0.95 ],
                method: 'approximate'
             }
          },
          test02_percentiles: {
             $percentile: {
                input: "$test02",
                p: [ 0.5, 0.75, 0.9, 0.95 ],
                method: 'approximate'
             }
          },
          test03_percentiles: {
             $percentile: {
                input: "$test03",
                p: [ 0.5, 0.75, 0.9, 0.95 ],
                method: 'approximate'
             }
          },
          test03_percent_alt: {
             $percentile: {
                input: "$test03",
                p: [ 0.9, 0.5, 0.75, 0.95 ],
                method: 'approximate'
             }
          }
       }
    }
] )

----------------------------------------

TITLE: Example of User Info Before updateUser Command
DESCRIPTION: This snippet shows an example of a user's information before applying the updateUser command. It includes the user's ID, custom data, roles, and authentication mechanisms.

LANGUAGE: javascript
CODE:
{
   "_id" : "products.appClient01",
   "userId" : UUID("c5d88855-3f1e-46cb-9c8b-269bef957986"),
   "user" : "appClient01",
   "db" : "products",
   "customData" : { "empID" : "12345", "badge" : "9156" },
   "roles" : [
       { "role" : "readWrite",
         "db" : "products"
       },
       { "role" : "read",
         "db" : "inventory"
       }
   ],
   "mechanisms" : [
      "SCRAM-SHA-1",
      "SCRAM-SHA-256"
   ]
}

----------------------------------------

TITLE: Sharding Collection Using Range-Based Strategy in MongoDB
DESCRIPTION: Method to shard a collection using the sh.shardCollection() command. This command requires specifying the full namespace of the collection and the index to use as the shard key.

LANGUAGE: javascript
CODE:
sh.shardCollection( "database.collection", { <shard key> } )

----------------------------------------

TITLE: Querying Encrypted Documents with MongoDB Shell
DESCRIPTION: This snippet demonstrates how to query for a document with encrypted fields using the MongoDB shell. It shows the query with and without automatic Queryable Encryption configuration.

LANGUAGE: javascript
CODE:
// Finds the document with automatic encryption
const encryptedResult = await encryptedCollection.findOne({ "encryptedField": "123456789" });
console.log("Document retrieved with automatic encryption:", encryptedResult);

// Finds the document without automatic encryption
const unencryptedResult = await unencryptedCollection.findOne({ "encryptedField": "123456789" });
console.log("Document retrieved without automatic encryption:", unencryptedResult);

----------------------------------------

TITLE: Running Sample Queries
DESCRIPTION: Executes sample find and aggregate queries on the products collection.

LANGUAGE: javascript
CODE:
db.products.find( { item: "card" } )

db.products.aggregate( [
   {
      $match: { qty: { $gt: 20 } }
   }
] )

----------------------------------------

TITLE: Creating Encryption Schema for MongoDB Collection with CSFLE
DESCRIPTION: This snippet demonstrates how to create an encryption schema for a MongoDB collection using Client-Side Field Level Encryption. It includes specifying the algorithm and key ID for encrypting specific fields.

LANGUAGE: java
CODE:
String jsonSchema = "{\n" +
    "  'bsonType': 'object',\n" +
    "  'properties': {\n" +
    "    'ssn': {\n" +
    "      'encrypt': {\n" +
    "        'bsonType': 'string',\n" +
    "        'algorithm': 'AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic',\n" +
    "        'keyId': [{'$binary': {'base64': '<Your-Base64-Key-Id-Here>', 'subType': '04'}}]\n" +
    "      }\n" +
    "    }\n" +
    "  }\n" +
    "}";
BsonDocument schemaDocument = BsonDocument.parse(jsonSchema);
Map<String, BsonDocument> schemaMap = new HashMap<String, BsonDocument>();
schemaMap.put("medicalRecords.patients", schemaDocument);

LANGUAGE: javascript
CODE:
const schema = {
  "medicalRecords.patients": {
    "bsonType": "object",
    "properties": {
      "ssn": {
        "encrypt": {
          "bsonType": "string",
          "algorithm": "AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic",
          "keyId": [{
            "$binary": {
              "base64": "<Your-Base64-Key-Id-Here>",
              "subType": "04"
            }
          }]
        }
      }
    }
  }
};

LANGUAGE: python
CODE:
schema = {
    "medicalRecords.patients": {
        "bsonType": "object",
        "properties": {
            "ssn": {
                "encrypt": {
                    "bsonType": "string",
                    "algorithm": "AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic",
                    "keyId": [{
                        "$binary": {
                            "base64": "<Your-Base64-Key-Id-Here>",
                            "subType": "04"
                        }
                    }]
                }
            }
        }
    }
}

LANGUAGE: csharp
CODE:
var schema = "{
    'bsonType': 'object',
    'properties': {
        'ssn': {
            'encrypt': {
                'bsonType': 'string',
                'algorithm': 'AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic',
                'keyId': [{'$binary': {'base64': '<Your-Base64-Key-Id-Here>', 'subType': '04'}}]
            }
        }
    }
}";
var schemaMap = new Dictionary<string, BsonDocument>()
{
    { "medicalRecords.patients", BsonDocument.Parse(schema) }
};

LANGUAGE: go
CODE:
schema := bson.M{
	"medicalRecords.patients": bson.M{
		"bsonType": "object",
		"properties": bson.M{
			"ssn": bson.M{
				"encrypt": bson.M{
					"bsonType": "string",
					"algorithm": "AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic",
					"keyId": []interface{}{
						bson.M{
							"$binary": bson.M{
								"base64": "<Your-Base64-Key-Id-Here>",
								"subType": "04",
							},
						},
					},
				},
			},
		},
	},
}

----------------------------------------

TITLE: Syntax for $arrayElemAt Operator in MongoDB Aggregation
DESCRIPTION: Demonstrates the basic syntax for using the $arrayElemAt operator in MongoDB aggregation pipelines. The operator takes an array and an index as arguments to return the element at the specified position.

LANGUAGE: javascript
CODE:
{ $arrayElemAt: [ <array>, <idx> ] }

----------------------------------------

TITLE: Calculating Average Delivery Time Using $dateDiff in MongoDB Aggregation
DESCRIPTION: Uses the $dateDiff operator within a MongoDB aggregation pipeline to calculate the average number of days for order delivery. It demonstrates grouping, averaging, and result formatting.

LANGUAGE: javascript
CODE:
db.orders.aggregate(
   [
      { 
         $group: 
            { 
                _id: null, 
                averageTime: 
                   { 
                      $avg:
                         { 
                            $dateDiff: 
                               { 
                                   startDate: "$purchased",
                                   endDate: "$delivered",
                                   unit: "day"
                               } 
                          }
                   }
            }
      },
      {
         $project:
            { 
               _id: 0,
               numDays: 
                  { 
                     $trunc: 
                        [ "$averageTime", 1 ]
                  }
            }
       }
   ]
)

----------------------------------------

TITLE: Basic $exists Operator Syntax in MongoDB
DESCRIPTION: Demonstrates the basic syntax for using the $exists operator in MongoDB queries to match documents based on field presence.

LANGUAGE: javascript
CODE:
{ field: { $exists: <boolean> } }

----------------------------------------

TITLE: Using $first in $group Stage
DESCRIPTION: Shows how to use $first with $group to find the first sales date for each item after sorting.

LANGUAGE: javascript
CODE:
db.sales.aggregate([
   { $sort: { item: 1, date: 1 } },
   {
     $group:
       {
         _id: "$item",
         firstSale: { $first: "$date" }
       }
   }
])

----------------------------------------

TITLE: Defining $isoWeekYear Operator in MongoDB Aggregation
DESCRIPTION: This snippet shows the syntax for using the $isoWeekYear operator in a MongoDB aggregation pipeline. It takes a date expression as an argument and returns the ISO 8601 year number.

LANGUAGE: javascript
CODE:
{ $isoWeekYear: <dateExpression> }

----------------------------------------

TITLE: Failed Zone Range Removal Using Admin Command in MongoDB
DESCRIPTION: Example demonstrating an unsuccessful attempt to remove a zone range using incorrect minimum bounds through admin command.

LANGUAGE: javascript
CODE:
admin = db.getSiblingDB("admin")
admin.runCommand(
   {
      updateZoneKeyRange : "exampledb.collection",
      min : { a : 0 },
      max : { a : 10 },
      zone : null
   }
)

----------------------------------------

TITLE: Inserting Sample Data for MongoDB $range Example
DESCRIPTION: Inserts sample data into a 'distances' collection, which will be used to demonstrate the $range operator. The data includes cities and their distances from San Francisco.

LANGUAGE: javascript
CODE:
db.distances.insertMany([
   { _id: 0, city: "San Jose", distance: 42 },
   { _id: 1, city: "Sacramento", distance: 88 },
   { _id: 2, city: "Reno", distance: 218 },
   { _id: 3, city: "Los Angeles", distance: 383 }
]);

----------------------------------------

TITLE: Connecting to MongoDB Primary with mongosh
DESCRIPTION: This command connects to the primary of a MongoDB replica set using mongosh, specifying the host and port.

LANGUAGE: sh
CODE:
mongosh --host mongodb0.example.com --port 28015

----------------------------------------

TITLE: MongoDB $ln Operator Syntax
DESCRIPTION: Basic syntax for using the $ln operator in MongoDB aggregation pipeline.

LANGUAGE: javascript
CODE:
{ $ln: <number> }

----------------------------------------

TITLE: Creating Sample Collection for $expr Examples
DESCRIPTION: Creates a sample supplies collection with various items, quantities, and prices to demonstrate $expr usage with conditional statements.

LANGUAGE: javascript
CODE:
db.supplies.insertMany( [
   { _id : 1, item : "binder", qty : NumberInt("100"), price : NumberDecimal("12") },
   { _id : 2, item : "notebook", qty : NumberInt("200"), price : NumberDecimal("8") },
   { _id : 3, item : "pencil", qty : NumberInt("50"), price : NumberDecimal("6") },
   { _id : 4, item : "eraser", qty : NumberInt("150"), price : NumberDecimal("3") },
   { _id : 5, item : "legal pad", qty : NumberInt("42"), price : NumberDecimal("10") }
] )

----------------------------------------

TITLE: Using $ne Operator in MongoDB Aggregation Pipeline
DESCRIPTION: Demonstrates how to use the $ne operator in a MongoDB aggregation pipeline. This example projects the item and qty fields, and adds a new field 'qtyNe250' that checks if qty is not equal to 250.

LANGUAGE: javascript
CODE:
db.inventory.aggregate(
   [
     {
       $project:
          {
            item: 1,
            qty: 1,
            qtyNe250: { $ne: [ "$qty", 250 ] },
            _id: 0
          }
     }
   ]
)

----------------------------------------

TITLE: Finding Largest and Smallest Cities by Population for Each State in MongoDB
DESCRIPTION: Uses a complex aggregation pipeline with $group, $sort, and $project stages to determine the largest and smallest cities by population for each state.

LANGUAGE: javascript
CODE:
db.zipcodes.aggregate( [
   { $group: 
      {
        _id: { state: "$state", city: "$city" },
        pop: { $sum: "$pop" }
      }
   },
   { $sort: { pop: 1 } },
   { $group:
      {
        _id : "$_id.state",
        biggestCity:  { $last: "$_id.city" },
        biggestPop:   { $last: "$pop" },
        smallestCity: { $first: "$_id.city" },
        smallestPop:  { $first: "$pop" }
      }
   },

  // the following $project is optional, and
  // modifies the output format.

  { $project:
    { _id: 0,
      state: "$_id",
      biggestCity:  { name: "$biggestCity",  pop: "$biggestPop" },
      smallestCity: { name: "$smallestCity", pop: "$smallestPop" }
    }
  }
] )

----------------------------------------

TITLE: Legacy Scale Format
DESCRIPTION: Shows the legacy format for specifying just the scale factor as a number parameter.

LANGUAGE: javascript
CODE:
db.collection.stats(<number>)

----------------------------------------

TITLE: Defining $strLenCP Operator in MongoDB Aggregation
DESCRIPTION: This snippet shows the syntax for using the $strLenCP operator in MongoDB aggregation. It returns the number of UTF-8 code points in the specified string.

LANGUAGE: javascript
CODE:
{ $strLenCP: <string expression> }

----------------------------------------

TITLE: Querying Nested Document Field Using Dot Notation
DESCRIPTION: Query that selects documents where the instock array contains at least one document with qty less than or equal to 20.

LANGUAGE: mongodb
CODE:
{"instock.qty": { "$lte": 20 }}

----------------------------------------

TITLE: Inserting Multiple Documents with Arrays using MongoDB Shell
DESCRIPTION: This snippet demonstrates how to insert multiple documents containing array fields into the 'inventory' collection using the MongoDB shell. Each document represents an item with an 'instock' array containing warehouse and quantity information.

LANGUAGE: javascript
CODE:
db.inventory.insertMany( [
   { item: "journal", instock: [ { warehouse: "A", qty: 5 }, { warehouse: "C", qty: 15 } ] },
   { item: "notebook", instock: [ { warehouse: "C", qty: 5 } ] },
   { item: "paper", instock: [ { warehouse: "A", qty: 60 }, { warehouse: "B", qty: 15 } ] },
   { item: "planner", instock: [ { warehouse: "A", qty: 40 }, { warehouse: "B", qty: 5 } ] },
   { item: "postcard", instock: [ { warehouse: "B", qty: 15 }, { warehouse: "C", qty: 35 } ] }
]);

----------------------------------------

TITLE: Querying MongoDB with $or Operator and $expr
DESCRIPTION: Shows an example of using the $or operator in a MongoDB find query. This query combines a simple equality check with a more complex expression using $expr to perform a division operation.

LANGUAGE: javascript
CODE:
db.example.find( {
   $or: [
      { x: { $eq: 0 } },
      { $expr: { $eq: [ { $divide: [ 1, "$x" ] }, 3 ] } }
   ]
} )

----------------------------------------

TITLE: Stepping Down Primary Member in MongoDB Cluster
DESCRIPTION: This snippet demonstrates how to use the rs.stepDown() method to step down the current primary member in a MongoDB replica set. This action promotes a secondary with the new certificate to serve as the new primary.

LANGUAGE: javascript
CODE:
rs.stepDown()

----------------------------------------

TITLE: MongoDB Compass Query Projection
DESCRIPTION: Shows how to use MongoDB Compass UI to apply a filter and projection to return only specific fields

LANGUAGE: javascript
CODE:
{ status: "A" }

LANGUAGE: javascript
CODE:
{ item: 1, status: 1 }

----------------------------------------

TITLE: Removing Database User in MongoDB (Deprecated)
DESCRIPTION: Removes a specified user from the MongoDB database. This method accepts a username string parameter and is deprecated as of MongoDB 2.6 in favor of db.dropUser(). This method is only available in on-premises deployments.

LANGUAGE: javascript
CODE:
db.removeUser(username)

----------------------------------------

TITLE: Basic $filter Syntax in MongoDB
DESCRIPTION: Demonstrates the basic syntax structure for the $filter operator including input array, variable name, condition, and optional limit field.

LANGUAGE: javascript
CODE:
{ 
    $filter: 
      { 
         input: <array>, 
         as: <string>,  
         cond: <expression>,
         limit: <number expression> 
      } 
}

----------------------------------------

TITLE: Verifying Collection Location using $collStats in MongoDB
DESCRIPTION: Shows how to verify the current shard location of a collection using the $collStats aggregation pipeline stage and project operator to confirm the collection movement was successfully aborted.

LANGUAGE: javascript
CODE:
db.inventory.aggregate( [ 
  { $collStats: {} }, 
  { $project: { "shard": 1 } } 
] )

LANGUAGE: javascript
CODE:
[ { shard: 'shard01' } ]

----------------------------------------

TITLE: Defining $percentile Syntax in MongoDB Aggregation
DESCRIPTION: The basic syntax structure for using the $percentile operator in MongoDB aggregation pipelines. It specifies the required fields: input, p (percentiles), and method.

LANGUAGE: javascript
CODE:
{
   $percentile: {
      input: <expression>,
      p: [ <expression1>, <expression2>, ... ],
      method: <string>
   }
}

----------------------------------------

TITLE: MongoDB Restore to Remote Host with Authentication
DESCRIPTION: Restore MongoDB backup to a remote host with authentication credentials.

LANGUAGE: bash
CODE:
mongorestore \
      --host=mongodb1.example.net \
      --port=3017 \
      --username=user \
      --authenticationDatabase=admin \
      /opt/backup/mongodump-1

----------------------------------------

TITLE: Displaying Updated Restaurant Data in MongoDB
DESCRIPTION: This code block shows the output of the query, demonstrating that 'Pizza Place' has been replaced with 'Clean Eats'. It includes the updated restaurant data with their ratings and violation counts.

LANGUAGE: javascript
CODE:
[
   { _id: 1, name: 'Clean Eats', rating: 4, violations: 2 },
   { _id: 2, name: 'Burger Joint', rating: 3, violations: 5 },
   { _id: 3, name: 'Taco Shop', rating: 4, violations: 1 }
]

----------------------------------------

TITLE: Getting Distinct Values for an Embedded Field in MongoDB
DESCRIPTION: Demonstrates how to use the distinct command to retrieve unique values for the 'sku' field nested within the 'item' field.

LANGUAGE: javascript
CODE:
db.runCommand ( { distinct: "inventory", key: "item.sku" } )

----------------------------------------

TITLE: Using $slice Projection Operator in MongoDB Query
DESCRIPTION: Shows how to use the $slice projection operator to return only the last element from an 'instock' array field in a MongoDB document. The projection operator helps optimize query results by retrieving only needed array elements.



----------------------------------------

TITLE: Using $in Instead of $or for Equality Checks in MongoDB
DESCRIPTION: Demonstrates the use of $in operator as a more efficient alternative to $or when checking for multiple possible values of the same field.

LANGUAGE: javascript
CODE:
db.inventory.find ( { quantity: { $in: [20, 50] } } )

----------------------------------------

TITLE: Inserting Encrypted Document with CSFLE in Java
DESCRIPTION: Java code snippet for inserting a Client-Side Field Level Encrypted document into MongoDB. Uses a CSFLE-enabled MongoClient to insert the document into the 'medicalRecords.patients' namespace.

LANGUAGE: java
CODE:
collection.insertOne(new Document()
    .append("firstName", "Jon")
    .append("lastName", "Doe")
    .append("patientId", 12345678)
    .append("address", "157 Electric Ave.")
    .append("patientRecord", new Document()
        .append("ssn", 987654321)
        .append("billing", new Document()
            .append("type", "Visa")
            .append("number", "4111111111111111"))));

----------------------------------------

TITLE: Enabling Change Stream Pre and Post Images
DESCRIPTION: Configuration command to enable change stream pre and post image capture for a collection.

LANGUAGE: javascript
CODE:
db.runCommand( {
   collMod: "myCollection",
   changeStreamPreAndPostImages: { enabled: true }
} )

----------------------------------------

TITLE: MongoDB User Update Method Syntax
DESCRIPTION: Basic syntax for updating a MongoDB user profile including customData, roles, password, authentication restrictions, and SCRAM mechanisms.

LANGUAGE: javascript
CODE:
db.updateUser(
   "<username>",
   {
     customData : { <any information> },
     roles : [
       { role: "<role>", db: "<database>" } | "<role>",
       ...
     ],
     pwd: passwordPrompt(),      // Or  "<cleartext password>",
     authenticationRestrictions: [
        {
          clientSource: ["<IP>" | "<CIDR range>", ...],
          serverAddress: ["<IP>", | "<CIDR range>", ...]
        },
        ...
     ],
     mechanisms: [ "<SCRAM-SHA-1|SCRAM-SHA-256>", ... ],
     passwordDigestor: "<server|client>"
   },
   writeConcern: { <write concern> }
)

----------------------------------------

TITLE: Using $year Operator in MongoDB Aggregation
DESCRIPTION: Demonstrates the basic syntax of the $year operator in MongoDB aggregation. It takes a date expression as input and returns the year portion of the date.

LANGUAGE: javascript
CODE:
{ $year: <dateExpression> }

----------------------------------------

TITLE: List Databases with Full Statistics
DESCRIPTION: Example of listing databases with their complete statistics including size information.

LANGUAGE: json
CODE:
{
   "databases" : [
      {
         "name" : "admin",
         "sizeOnDisk" : 83886080,
         "empty" : false
      },
      {
         "name" : "local",
         "sizeOnDisk" : 83886080,
         "empty" : false
      },
      {
         "name" : "test",
         "sizeOnDisk" : 83886080,
         "empty" : false
      }
   ],
   "totalSize" : 251658240,
   "totalSizeMb" : 251,
   "ok" : 1
}

----------------------------------------

TITLE: Employee Hierarchy GraphLookup Example
DESCRIPTION: Example showing how to use $graphLookup to build an employee reporting hierarchy by recursively traversing the reportsTo relationships.

LANGUAGE: javascript
CODE:
db.employees.aggregate( [
   {
      $graphLookup: {
         from: "employees",
         startWith: "$reportsTo",
         connectFromField: "reportsTo",
         connectToField: "name",
         as: "reportingHierarchy"
      }
   }
] )

----------------------------------------

TITLE: Disabling IP Forwarding on Linux using sysctl
DESCRIPTION: This command disables IP forwarding on Linux systems using the sysctl utility. It prevents the server from forwarding packets to other systems, enhancing security for MongoDB hosts.

LANGUAGE: bash
CODE:
sudo sysctl -w net.ipv4.ip_forward=0

----------------------------------------

TITLE: Specify Collation Example
DESCRIPTION: An example of using findAndModify with a collation option for language-specific string comparison.

LANGUAGE: javascript
CODE:
db.runCommand(
   {
     findAndModify: "myColl",
     query: { category: "cafe", status: "a" },
     sort: { category: 1 },
     update: { $set: { status: "Updated" } },
     collation: { locale: "fr", strength: 1 }
   }
)

----------------------------------------

TITLE: Using $mod with Negative Dividend in MongoDB Aggregation
DESCRIPTION: Demonstrates the use of $mod operator with a negative dividend in a MongoDB aggregation pipeline. This example calculates the remainder when a negative number is divided.

LANGUAGE: javascript
CODE:
db.modExample.aggregate( [
  { $project: { remainder: { $mod: [ "$dividend", "$divisor" ] } } }
] )

----------------------------------------

TITLE: Finding Top Score in a Single Game using $top in MongoDB
DESCRIPTION: Demonstrates an aggregation pipeline that uses $match to filter for a specific game, then uses $group and $top to find the highest score for that game. It returns the player ID and score of the top player.

LANGUAGE: javascript
CODE:
db.gamescores.aggregate( [
   {
      $match : { gameId : "G1" }
   },
   {
      $group:
         {
            _id: "$gameId",
            playerId:
               {
                  $top:
                  {
                     output: [ "$playerId", "$score" ],
                     sortBy: { "score": -1 }
                  }
               }
         }
   }
] )

----------------------------------------

TITLE: MongoDB Collection Bulk Write Method Reference
DESCRIPTION: Reference to MongoDB's db.collection.bulkWrite() method used for performing bulk write operations on collections. The method allows for efficient batch processing of multiple write operations.

LANGUAGE: javascript
CODE:
db.collection.bulkWrite()

----------------------------------------

TITLE: Starting MongoDB with Local Key Management Encryption
DESCRIPTION: This command starts mongod with encryption enabled using a local keyfile for key management. It specifies the path to the keyfile containing the encryption key.

LANGUAGE: bash
CODE:
mongod --enableEncryption --encryptionKeyFile  mongodb-keyfile

----------------------------------------

TITLE: Sample getShardMap Command Output
DESCRIPTION: Example output showing the map of shards, hosts, and connection strings returned by getShardMap command. Includes mappings for three shards and a config server replica set.

LANGUAGE: json
CODE:
{
  map: {
    shard01: 'shard01/localhost:27018,localhost:27019,localhost:27020,localhost:27021,localhost:27022',
    shard02: 'shard02/localhost:27023,localhost:27024,localhost:27025,localhost:27026,localhost:27027',
    shard03: 'shard03/localhost:27028,localhost:27029,localhost:27030,localhost:27031,localhost:27032',
    config: 'configRepl/localhost:27033',localhost:27034,localhost:27035,localhost:27036,localhost:27037'
  },
  hosts: {
    'localhost:27021': 'shard01',
    'localhost:27022': 'shard01',
    'localhost:27028': 'shard03',
    'localhost:27026': 'shard02',
    'localhost:27020': 'shard01',
    'localhost:27032': 'shard03',
    'localhost:27027': 'shard02',
    'localhost:27024': 'shard02',
    'localhost:27018': 'shard01',
    'localhost:27019': 'shard01',
    'localhost:27031': 'shard03',
    'localhost:27025': 'shard02',
    'localhost:27029': 'shard03',
    'localhost:27023': 'shard02',
    'localhost:27030': 'shard03',
    'localhost:27033': 'config'
    'localhost:27036': 'config'
    'localhost:27034': 'config'
    'localhost:27037': 'config'
    'localhost:27035': 'config'
  },
  connStrings: {
    'shard01/localhost:27018,localhost:27019,localhost:27020,localhost:27021,localhost:27022': 'shard01',
    'shard01/localhost:27019,localhost:27020,localhost:27021': 'shard01',
    'shard01/localhost:27020,localhost:27021': 'shard01',
    'shard01/localhost:27021': 'shard01',
    'shard02/localhost:27023,localhost:27024,localhost:27025,localhost:27026,localhost:27027': 'shard02',
    'shard02/localhost:27025,localhost:27026,localhost:27027': 'shard02',
    'shard02/localhost:27025,localhost:27027': 'shard02',
    'shard03/localhost:27028,localhost:27029,localhost:27030,localhost:27031,localhost:27032': 'shard03',
    'shard03/localhost:27032': 'shard03',
    'configRepl/localhost:27033',localhost:27036,localhost:27034,localhost:27037,localhost:27035': 'config'
  },
  ok: 1
}

----------------------------------------

TITLE: Retrieving an Encrypted Document from MongoDB using CSFLE
DESCRIPTION: This code demonstrates how to retrieve and decrypt a document with encrypted fields using a CSFLE-enabled MongoDB client. The encrypted fields are automatically decrypted when read.

LANGUAGE: javascript
CODE:
const patient = await collection.findOne({ name: "Jon Doe" });
console.log(patient);

----------------------------------------

TITLE: Dropping All Indexes Except _id in MongoDB (JavaScript)
DESCRIPTION: This snippet demonstrates how to drop all indexes from a MongoDB collection except for the _id index. It uses the db.collection.dropIndexes() method without any parameters.

LANGUAGE: javascript
CODE:
db.collection.dropIndexes()

----------------------------------------

TITLE: Example of MongoDB Change Stream Replace Event
DESCRIPTION: This JSON snippet illustrates a 'replace' event in a MongoDB change stream. It shows the structure and content of the event document, including the operation type, cluster time, namespace, document key, and the full replacement document.

LANGUAGE: json
CODE:
{
   "_id": { <Resume Token> },
   "operationType": "replace",
   "clusterTime": <Timestamp>,
   "wallTime": <ISODate>,
   "ns": {
      "db": "engineering",
      "coll": "users"
   },
   "documentKey": {
      "_id": ObjectId("599af247bb69cd89961c986d")
   },
   "fullDocument": {
      "_id": ObjectId("599af247bb69cd89961c986d"),
      "userName": "alice123",
      "name": "Alice"
   }
}

----------------------------------------

TITLE: Document and Array Equality Queries with MongoDB Wildcard Index
DESCRIPTION: Shows queries that wildcard indexes cannot support for exact document or array equality matches. These queries attempt to match exact structures of 'product_attributes' and 'product_attributes.tags'.

LANGUAGE: javascript
CODE:
db.inventory.find({ "product_attributes" : { "price" : 29.99 } } )
db.inventory.find({ "product_attributes.tags" : [ "waterproof", "fireproof" ] } )

db.inventory.aggregate([{ 
  $match : { "product_attributes" : { "price" : 29.99 } }
}])

db.inventory.aggregate([{ 
  $match : { "product_attributes.tags" : ["waterproof", "fireproof" ] } }
}])

----------------------------------------

TITLE: Including MongoDB Flavor Examples
DESCRIPTION: Reference to include external MongoDB example file containing flavor-related operations.

LANGUAGE: rst
CODE:
.. include:: /includes/let-example-create-flavors.rst

----------------------------------------

TITLE: Creating New Array Fields in MongoDB Aggregation
DESCRIPTION: Demonstrates how to use $project to create a new array field (myArray) containing values from existing fields (x and y).

LANGUAGE: javascript
CODE:
db.collection.aggregate( [ { $project: { myArray: [ "$x", "$y" ] } } ] )

----------------------------------------

TITLE: $push with $setWindowFields Stage Example
DESCRIPTION: Advanced example using $push within $setWindowFields to create running arrays of quantities by state.

LANGUAGE: javascript
CODE:
db.cakeSales.aggregate( [
   {
      $setWindowFields: {
         partitionBy: "$state",
         sortBy: { orderDate: 1 },
         output: {
            quantitiesForState: {
               $push: "$quantity",
               window: {
                  documents: [ "unbounded", "current" ]
               }         
            }
         }
      }
   }
] )

----------------------------------------

TITLE: Creating Compound Index in MongoDB
DESCRIPTION: Creates a compound index on multiple fields (category, item, and location) to support queries involving combinations of these fields.

LANGUAGE: javascript
CODE:
db.products.createIndex( { category: 1, item: 1, location: 1 } )

----------------------------------------

TITLE: Executing DeleteMany Operation in Ruby MongoDB Driver
DESCRIPTION: The delete_many() method in the Ruby driver returns a Mongo::Operation::Result object. The deleted_count attribute of this object contains the number of documents that matched the filter.

LANGUAGE: ruby
CODE:
collection.delete_many()

----------------------------------------

TITLE: Creating Partial Index with Exists Condition
DESCRIPTION: Demonstrates creating partial indexes that replicate sparse index functionality by checking field existence.

LANGUAGE: javascript
CODE:
db.contacts.createIndex(
   { name: 1 },
   { partialFilterExpression: { name: { $exists: true } } }
)

----------------------------------------

TITLE: Clearing All Index Filters on a Collection in MongoDB
DESCRIPTION: This example shows how to remove all index filters from the 'orders' collection by omitting the query field.

LANGUAGE: javascript
CODE:
db.runCommand(
   {
      planCacheClearFilters: "orders"
   }
)

----------------------------------------

TITLE: Creating a Partial Compound Wildcard Index in MongoDB
DESCRIPTION: This example demonstrates how to create a partial compound wildcard index using the partialFilterExpression option to specify a filter condition for index inclusion.

LANGUAGE: javascript
CODE:
db.runCommand(
   {
      createIndexes: "salesData",
      indexes: [
         {
            key: {
               tenantId: 1,
               "customFields.$**": 1
            },
            name: "tenant_customFields_partial",
            partialFilterExpression: { tenantRegion: 1 }
         }
      ]
   }
)

----------------------------------------

TITLE: Basic $lte Operator Syntax in MongoDB Aggregation
DESCRIPTION: Shows the basic syntax for using the $lte operator in MongoDB aggregation framework. The operator takes two expressions as arguments and returns a boolean result.

LANGUAGE: javascript
CODE:
{ $lte: [ <expression1>, <expression2> ] }

----------------------------------------

TITLE: Filter Databases by Name Pattern
DESCRIPTION: Example demonstrating how to filter databases using a regular expression pattern.

LANGUAGE: javascript
CODE:
db.adminCommand( { listDatabases: 1, filter: { "name": /^rep/ } } )

----------------------------------------

TITLE: Basic $listClusterCatalog Syntax
DESCRIPTION: Shows the basic syntax structure for the $listClusterCatalog aggregation stage with optional configuration fields.

LANGUAGE: javascript
CODE:
{ 
  $listClusterCatalog: {
     shards: true,
     balancingConfiguration: true
  }
}

----------------------------------------

TITLE: Projection and Match Stage Optimization Example
DESCRIPTION: Demonstrates how MongoDB optimizes a pipeline containing $addFields, $project and $match stages by reordering match filters to improve performance.

LANGUAGE: javascript
CODE:
{
   $addFields: {
      maxTime: { $max: "$times" },
      minTime: { $min: "$times" }
   }
},
{
   $project: {
      _id: 1,
      name: 1,
      times: 1,
      maxTime: 1,
      minTime: 1,
      avgTime: { $avg: ["$maxTime", "$minTime"] }
   }
},
{
   $match: {
      name: "Joe Schmoe",
      maxTime: { $lt: 20 },
      minTime: { $gt: 5 },
      avgTime: { $gt: 7 }
   }
}

----------------------------------------

TITLE: Using Projection in MongoDB Compass
DESCRIPTION: This snippet demonstrates how to use projection in MongoDB Compass. It shows the steps to filter documents with status 'A' and exclude the 'status' and 'instock' fields from the results.

LANGUAGE: javascript
CODE:
{ status: "A" }

LANGUAGE: javascript
CODE:
{ status: 0, instock: 0 }

----------------------------------------

TITLE: Checking Array Type of Results
DESCRIPTION: Shows how to verify the type of the returned results from cursor.map()

LANGUAGE: javascript
CODE:
salePrices.constructor.name

----------------------------------------

TITLE: Locking MongoDB Cluster
DESCRIPTION: Commands to lock the sharded cluster and prevent writes using fsyncLock

LANGUAGE: javascript
CODE:
db.getSiblingDB("admin").fsyncLock()

----------------------------------------

TITLE: Sample Document in MongoDB sales Collection
DESCRIPTION: Provides an example of a document structure in the sales collection, which is used in the aggregation example.

LANGUAGE: javascript
CODE:
{
  "_id" : 1,
  "item" : "abc",
  "price" : 10,
  "quantity" : 2,
  "date" : ISODate("2014-01-01T08:15:39.736Z")
}

----------------------------------------

TITLE: Executing MongoDB Transaction with Session Management
DESCRIPTION: This snippet shows how to start a session, execute a transaction function with retry logic, and properly end the session.

LANGUAGE: javascript
CODE:
session = db.getMongo().startSession( { readPreference: { mode: "primary" } } );

try{
   runTransactionWithRetry(updateEmployeeInfo, session);
} catch (error) {
   // Do something with error
} finally {
   session.endSession();
}

----------------------------------------

TITLE: Using $last with $group in MongoDB Aggregation
DESCRIPTION: Example showing how to use $last with $group to find the last sales date for each item after sorting.

LANGUAGE: javascript
CODE:
db.sales.aggregate([
  { $sort: { item: 1, date: 1 } },
  {
    $group:
      {
        _id: "$item",
        lastSalesDate: { $last: "$date" }
      }
  }
])

----------------------------------------

TITLE: Range Query on Encrypted Fields - Multiple Languages
DESCRIPTION: Shows how to execute range queries on encrypted fields in MongoDB and process the decrypted results. Includes implementations for various programming languages.

LANGUAGE: javascript
CODE:
const result = await collection.findOne({
    encryptedField: { $gt: "123-45-6789" }
});
console.log("Found document:", result);

LANGUAGE: python
CODE:
result = collection.find_one({
    "encryptedField": { "$gt": "123-45-6789" }
})
print("Found document:", result)

LANGUAGE: java
CODE:
Document result = collection.find(gt("encryptedField", "123-45-6789")).first();
System.out.println("Found document: " + result.toJson());

LANGUAGE: go
CODE:
var result bson.D
err = collection.FindOne(context.TODO(), bson.D{{"encryptedField", bson.D{{"$gt", "123-45-6789"}}}}}).Decode(&result)
if err != nil {
    panic(err)
}
fmt.Printf("Found document: %v\n", result)

LANGUAGE: csharp
CODE:
var result = await collection.Find(Builders<BsonDocument>.Filter.Gt("encryptedField", "123-45-6789")).FirstOrDefaultAsync();
Console.WriteLine($"Found document: {result}");

----------------------------------------

TITLE: Using Distinct Command with Collation in MongoDB
DESCRIPTION: Example of using the distinct command with a collation option for case-insensitive comparison on the 'category' field.

LANGUAGE: javascript
CODE:
db.runCommand( 
   { 
      distinct: "myColl",
      key: "category",
      collation: { locale: "fr", strength: 1 } 
   }
)

----------------------------------------

TITLE: Iterating MongoDB Cursor with tryNext() in JavaScript
DESCRIPTION: This snippet shows how to use the non-blocking tryNext() method to iterate over a watchCursor in MongoDB. It continuously checks for new events and prints them until the cursor is closed.

LANGUAGE: javascript
CODE:
while (!watchCursor.isClosed()) {
  let next = watchCursor.tryNext()
  while (next !== null) {
    printjson(next);
    next = watchCursor.tryNext()
  }
}

----------------------------------------

TITLE: Connecting with Write Concern Options
DESCRIPTION: Example connection string specifying 'majority' write concern with a 5 second timeout.

LANGUAGE: none
CODE:
mongodb://myDatabaseUser:D1fficultP%40ssw0rd@db0.example.com,db1.example.com,db2.example.com/?replicaSet=myRepl&w=majority&wtimeoutMS=5000

----------------------------------------

TITLE: Creating Collection with Collation Example
DESCRIPTION: Shows how to create a collection with French locale collation and strength 1 settings.

LANGUAGE: javascript
CODE:
db.createCollection( "myColl", { collation: { locale: "fr", strength: 1 } } )

----------------------------------------

TITLE: Inserting Multi-Location Document in MongoDB
DESCRIPTION: This example shows how to insert a document with multiple location pairs into MongoDB. The 'locs' field contains an array of coordinate pairs in different formats.

LANGUAGE: javascript
CODE:
db.places.insertOne( {
   locs : [
      [ 55.5 , 42.3 ],
      [ -74 , 44.74 ],
      { long : 55.5 , lat : 42.3 }
   ]
} )

----------------------------------------

TITLE: MongoDB Connection String for Multiple Drivers
DESCRIPTION: This connection string is used for connecting to a MongoDB cluster across various drivers and languages. It includes authentication credentials and multiple router addresses for high availability.

LANGUAGE: bash
CODE:
mongodb://myDatabaseUser:D1fficultP%40ssw0rd@router1.example.com:27017,router2.example2.com:27017,router3.example3.com:27017/

----------------------------------------

TITLE: Starting MongoDB Instance for Replica Set
DESCRIPTION: Command to start a new mongod instance that will join a replica set, specifying the data directory, replica set name, and binding IP addresses.

LANGUAGE: bash
CODE:
mongod --dbpath /srv/mongodb/db0 --replSet rs0  --bind_ip localhost,<hostname(s)|ip address(es)>

----------------------------------------

TITLE: Basic $let Expression Syntax in MongoDB
DESCRIPTION: Shows the basic syntax structure for the $let expression in MongoDB aggregation pipeline. The expression contains vars block for variable assignments and in block for the evaluation expression.

LANGUAGE: none
CODE:
{
  $let:
     {
       vars: { <var1>: <expression>, ... },
       in: <expression>
     }
}

----------------------------------------

TITLE: Executing dataSize Command in MongoDB
DESCRIPTION: Basic syntax for the dataSize command showing all possible parameters including the collection name, keyPattern for indexing, min/max range values, and an estimation flag.

LANGUAGE: javascript
CODE:
db.runCommand(
   {
     dataSize: <string>,
     keyPattern: <document>,
     min: <document>,
     max: <document>,
     estimate: <boolean>
   }
)

----------------------------------------

TITLE: Adding Shard Basic Syntax in MongoDB
DESCRIPTION: Basic command syntax for adding a shard to a MongoDB cluster. The command requires the replica set name and at least one hostname with optional port number.

LANGUAGE: javascript
CODE:
db.adminCommand(
   { 
     addShard: "<replica_set>/<hostname><:port>", 
     name: "<shard_name>" 
   } 
)

----------------------------------------

TITLE: Limiting Query Results in MongoDB
DESCRIPTION: This example shows how to limit the number of results returned by a query to 10, while also sorting by timestamp. This helps reduce network demand for large result sets.

LANGUAGE: javascript
CODE:
db.posts.find().sort( { timestamp : -1 } ).limit(10)

----------------------------------------

TITLE: Using $literal with $eq in MongoDB Aggregation
DESCRIPTION: Aggregation pipeline using $literal to compare price field with literal string "$1" value.

LANGUAGE: javascript
CODE:
db.storeInventory.aggregate( [
   { $project: { costsOneDollar: { $eq: [ "$price", { $literal: "$1" } ] } } }
] )

----------------------------------------

TITLE: Creating MongoDB Collection with Strict Validation
DESCRIPTION: This snippet demonstrates how to create a 'contacts' collection with a JSON schema validator that rejects invalid documents. It sets 'validationAction' to 'error' to enforce strict validation rules.

LANGUAGE: javascript
CODE:
db.createCollection( "contacts", {
   validator: { $jsonSchema: {
      bsonType: "object",
      required: [ "phone" ],
      properties: {
         phone: {
            bsonType: "string",
            description: "must be a string and is required"
         },
         email: {
            bsonType : "string",
            pattern : "@mongodb\\.com$",
            description: "must be a string and end with '@mongodb.com'"
         }
      }
   } },
   validationAction: "error" 
} )

----------------------------------------

TITLE: Sorted Document Deletion with db.collection.findOneAndDelete() in MongoDB
DESCRIPTION: Deletes a single document based on a filter and sort order. This method allows for more precise control over which document is deleted when multiple documents match the filter.

LANGUAGE: mongodb
CODE:
db.collection.findOneAndDelete()

----------------------------------------

TITLE: Querying MongoDB with Projection in Java (Asynchronous)
DESCRIPTION: This snippet demonstrates how to query MongoDB with projection using the asynchronous Java driver.

LANGUAGE: java
CODE:
// Start Example 45
// End Example 45

----------------------------------------

TITLE: Inserting Encrypted Document with Java MongoDB Driver
DESCRIPTION: This snippet demonstrates how to insert an encrypted document into the 'medicalRecords.patients' namespace using the Java MongoDB driver with Queryable Encryption enabled.

LANGUAGE: java
CODE:
// Code snippet not provided in the input text

----------------------------------------

TITLE: Using $ifNull with Multiple Input Expressions in MongoDB Aggregation
DESCRIPTION: This example shows how to use $ifNull with multiple input expressions. It returns the first non-null value among 'description', 'quantity', or the string 'Unspecified'. This allows for more complex null-handling logic in aggregation pipelines.

LANGUAGE: javascript
CODE:
db.inventory.aggregate(
   [
      {
         $project: {
            item: 1,
            value: { $ifNull: [ "$description", "$quantity", "Unspecified" ] }
         }
      }
   ]
)

----------------------------------------

TITLE: Creating Index on Embedded Array Field in MongoDB
DESCRIPTION: This snippet demonstrates the syntax for creating an index on an embedded field within an array. It uses the db.collection.createIndex() method to create an ascending index on the 'stock.quantity' field.

LANGUAGE: javascript
CODE:
db.<collection>.createIndex( { <field>: <sortOrder> } )

----------------------------------------

TITLE: MongoDB $size Aggregation Pipeline Example
DESCRIPTION: Complete aggregation pipeline example using $size operator with $cond and $isArray to handle array counting with error cases.

LANGUAGE: javascript
CODE:
db.inventory.aggregate([
   {
      $project: {
         item: 1,
         numberOfColors: { $cond: { if: { $isArray: "$colors" }, then: { $size: "$colors" }, else: "NA"} }
      } 
   }
] )

----------------------------------------

TITLE: Querying Config Database Collections in MongoDB
DESCRIPTION: Example of how to access the config database and view its collections using the MongoDB shell. This snippet demonstrates connecting to a mongos instance and listing the collections in the config database.

LANGUAGE: javascript
CODE:
use config

show collections

----------------------------------------

TITLE: MongoDB Session Database Access Example
DESCRIPTION: Demonstrates how to start a new session using the Mongo connection object and access a database within that session context. Shows the basic session initialization workflow.

LANGUAGE: javascript
CODE:
var session = db.getMongo().startSession();
db = session.getDatabase(db.getName());

----------------------------------------

TITLE: Using $min in $group Stage for MongoDB Aggregation
DESCRIPTION: This example demonstrates how to use the $min operator in the $group stage of a MongoDB aggregation pipeline to find the minimum quantity for each item in a sales collection.

LANGUAGE: javascript
CODE:
db.sales.aggregate(
   [
     {
       $group:
         {
           _id: "$item",
           minQuantity: { $min: "$quantity" }
         }
     }
   ]
)

----------------------------------------

TITLE: Java Synchronous Driver Query Operations
DESCRIPTION: Documentation for performing query operations using MongoCollection.find() method in Java Synchronous driver, utilizing Filters helper methods for creating filter documents



----------------------------------------

TITLE: Accessing Variables in MongoDB Pipeline Stages
DESCRIPTION: Shows the syntax for referencing variables in MongoDB pipeline stages. Variables are referenced using the $$<variable> syntax. In $match stages, variables must be accessed through the $expr operator, while other pipeline stages can access variables directly.

LANGUAGE: mongodb
CODE:
"$$<variable>"

----------------------------------------

TITLE: Warning Block for MongoDB directShardOperations Role Usage
DESCRIPTION: ReStructuredText warning block explaining the risks associated with using the directShardOperations role in MongoDB, including potential cluster malfunction and data corruption risks. Emphasizes that the role should only be used for maintenance under MongoDB support guidance.

LANGUAGE: rst
CODE:
.. warning::

   Running commands using the ``directShardOperations`` role can cause 
   your cluster to stop working correctly and may cause data corruption. 
   Only use the ``directShardOperations`` role for maintenance purposes 
   or under the guidance of MongoDB support. Once you are done 
   performing maintenance operations, stop using the 
   ``directShardOperations`` role.

----------------------------------------

TITLE: Executing fsyncUnlock in MongoDB Shell
DESCRIPTION: This snippet demonstrates the basic syntax for calling the fsyncUnlock method in the MongoDB shell. It reduces the lock count on the server by 1, potentially re-enabling write operations if the lock count reaches zero.

LANGUAGE: javascript
CODE:
db.fsyncUnlock()

----------------------------------------

TITLE: Executing killSessions Command in MongoDB
DESCRIPTION: Basic syntax for the killSessions command that accepts an array of session IDs to terminate. Each session ID is specified using its UUID portion.

LANGUAGE: javascript
CODE:
db.runCommand( 
      { 
        killSessions: [ { id : <UUID> }, ... ] 
      } 
   )

----------------------------------------

TITLE: Using $toUpper in MongoDB Aggregation Pipeline
DESCRIPTION: Shows how to use the $toUpper operator in a MongoDB aggregation pipeline to convert the 'item' and 'description' fields to uppercase. This example demonstrates the operator's usage within a $project stage.

LANGUAGE: javascript
CODE:
db.inventory.aggregate(
   [
     {
       $project:
         {
           item: { $toUpper: "$item" },
           description: { $toUpper: "$description" }
         }
     }
   ]
)

----------------------------------------

TITLE: Basic findAndModify Command Syntax
DESCRIPTION: The basic syntax for the findAndModify command, showing all possible fields.

LANGUAGE: javascript
CODE:
db.runCommand(
   {
     findAndModify: <collection-name>,
     query: <document>,
     sort: <document>,
     remove: <boolean>,
     update: <document or aggregation pipeline>,
     new: <boolean>,
     fields: <document>,
     upsert: <boolean>,
     bypassDocumentValidation: <boolean>,
     writeConcern: <document>,
     maxTimeMS: <integer>, 
     collation: <document>,
     arrayFilters: <array>,
     hint: <document|string>,
     comment: <any>,
     let: <document> // Added in MongoDB 5.0
   } 
)

----------------------------------------

TITLE: Densifying Time Series Data in MongoDB
DESCRIPTION: Example of using $densify to fill gaps in time series data. It creates a weather collection with temperature readings at 4-hour intervals, then uses $densify to achieve hourly granularity.

LANGUAGE: javascript
CODE:
db.weather.insertMany( [
   {
       "metadata": { "sensorId": 5578, "type": "temperature" },
       "timestamp": ISODate("2021-05-18T00:00:00.000Z"),
       "temp": 12
   }, 
   {
       "metadata": { "sensorId": 5578, "type": "temperature" },
       "timestamp": ISODate("2021-05-18T04:00:00.000Z"),
       "temp": 11
   }, 
   {
       "metadata": { "sensorId": 5578, "type": "temperature" },
       "timestamp": ISODate("2021-05-18T08:00:00.000Z"),
       "temp": 11
   }, 
   {
       "metadata": { "sensorId": 5578, "type": "temperature" },
       "timestamp": ISODate("2021-05-18T12:00:00.000Z"),
       "temp": 12
   }
] )

db.weather.aggregate( [
   {
      $densify: {
         field: "timestamp",
         range: {
            step: 1, 
            unit: "hour",
            bounds:[ ISODate("2021-05-18T00:00:00.000Z"), ISODate("2021-05-18T08:00:00.000Z") ]
         }
      }
   }
] )

----------------------------------------

TITLE: Accessing PlanCache.clearPlansByQuery() in MongoDB JavaScript
DESCRIPTION: Demonstrates how to access and use the PlanCache.clearPlansByQuery() method for a specific collection in MongoDB.

LANGUAGE: javascript
CODE:
db.collection.getPlanCache().clearPlansByQuery( <query>, <projection>, <sort> )

----------------------------------------

TITLE: Defining $toUpper Aggregation Operator in MongoDB
DESCRIPTION: Demonstrates the syntax for using the $toUpper operator in a MongoDB aggregation pipeline. The operator takes an expression as its argument, which should resolve to a string.

LANGUAGE: javascript
CODE:
{ $toUpper: <expression> }

----------------------------------------

TITLE: Append Single Value to Array Example
DESCRIPTION: Example showing how to append a single value to an existing array using $push.

LANGUAGE: javascript
CODE:
db.students.updateOne(
   { _id: 1 },
   { $push: { scores: 89 } }
)

----------------------------------------

TITLE: Attempting to Add Existing Value
DESCRIPTION: Shows how $addToSet handles attempting to add a value that already exists in the array.

LANGUAGE: javascript
CODE:
db.inventory.updateOne(
   { _id: 1 },
   { $addToSet: { tags: "camera"  } }
)

----------------------------------------

TITLE: Creating Sample Data for MongoDB $rename Examples
DESCRIPTION: Inserts sample documents into the 'students' collection to demonstrate $rename operations in subsequent examples.

LANGUAGE: javascript
CODE:
db.students.insertMany( [
   {
     "_id": 1,
     "alias": [ "The American Cincinnatus", "The American Fabius" ],
     "mobile": "555-555-5555",
     "nmae": { "first" : "george", "last" : "washington" }
   },
   {
     "_id": 2,
     "alias": [ "My dearest friend" ],
     "mobile": "222-222-2222",
     "nmae": { "first" : "abigail", "last" : "adams" }
   },
   {
     "_id": 3,
     "alias": [ "Amazing grace" ],
     "mobile": "111-111-1111",
     "nmae": { "first" : "grace", "last" : "hopper" }
   }
] )

----------------------------------------

TITLE: Restoring Node to Replica Set
DESCRIPTION: Command line options for restarting MongoDB instance as a replica set member with original configuration.

LANGUAGE: bash
CODE:
mongod --port 27017 --replSet myRepl

----------------------------------------

TITLE: Installing MongoDB Enterprise using yum
DESCRIPTION: Command to install the latest stable version of MongoDB Enterprise using yum package manager. The {+package-name-enterprise+} placeholder should be replaced with the actual package name.

LANGUAGE: sh
CODE:
sudo yum install -y {+package-name-enterprise+}

----------------------------------------

TITLE: Configuring MongoDB Authentication in YAML
DESCRIPTION: This snippet shows how to enable authorization and configure SASL authentication parameters in a YAML configuration file for MongoDB. It sets the security.authorization to enabled and specifies empty saslauthdPath and PLAIN authentication mechanism.

LANGUAGE: yaml
CODE:
security:
   authorization: enabled

setParameter:
   saslauthdPath: ""
   authenticationMechanisms: PLAIN

----------------------------------------

TITLE: Creating Multiple Indexes Example
DESCRIPTION: Example showing how to create two unique compound indexes on an inventory collection using the createIndexes command with write concern majority.

LANGUAGE: javascript
CODE:
db.getSiblingDB("products").runCommand(
     {
       createIndexes: "inventory",
       indexes: [
           {
               key: {
                   item: 1,
                   manufacturer: 1,
                   model: 1
               },
               name: "item_manufacturer_model",
               unique: true
           },
           {
               key: {
                   item: 1,
                   supplier: 1,
                   model: 1
               },
               name: "item_supplier_model",
               unique: true
           }
       ],
       writeConcern: { w: "majority" }
     }
   )

----------------------------------------

TITLE: Syntax of $setDifference Operator in MongoDB Aggregation
DESCRIPTION: Demonstrates the basic syntax of the $setDifference operator, which takes two array expressions as arguments and returns an array containing elements that exist only in the first set.

LANGUAGE: javascript
CODE:
{ $setDifference: [ <expression1>, <expression2> ] }

----------------------------------------

TITLE: Filtering MongoDB Results with $expr Operator
DESCRIPTION: This snippet demonstrates how to use the $expr operator in MongoDB to access variables for filtering query results. The $expr operator allows the use of aggregation expressions within the query language.

LANGUAGE: mongodb
CODE:
:query:`$expr`

----------------------------------------

TITLE: Configuring Keyfile Authentication for MongoDB Replica Set
DESCRIPTION: YAML configuration for implementing keyfile-based authentication in a MongoDB replica set. Specifies the replica set name and path to the shared keyfile.

LANGUAGE: yaml
CODE:
replication:
   replSetName: "rs0"
security:
    keyFile: /etc/mongodb/keyfile

----------------------------------------

TITLE: Connecting to MongoDB Primary with mongosh
DESCRIPTION: Command to connect to the primary node of a MongoDB replica set using mongosh on port 27017.

LANGUAGE: bash
CODE:
mongosh --port 27017

----------------------------------------

TITLE: Query Active Indexing Operations
DESCRIPTION: Example showing how to find active index creation operations using aggregation

LANGUAGE: javascript
CODE:
db.getSiblingDB("admin").aggregate( [
   { $currentOp : { idleConnections: true } },
   { $match: {
         $or: [
            { "op": "command", "command.createIndexes": { $exists: true } },
            { "op": "none", "msg": /^Index Build/ }
         ]
     }
   }
] )

----------------------------------------

TITLE: Retrieving Recent Global Events from MongoDB Log
DESCRIPTION: This example demonstrates how to retrieve the most recent global events from the MongoDB log using the getLog command.

LANGUAGE: javascript
CODE:
db.adminCommand( { getLog : "global" } )

----------------------------------------

TITLE: Adding Elements to Arrays using $addFields
DESCRIPTION: Shows how to add new elements to existing arrays using $addFields with $concatArrays.

LANGUAGE: javascript
CODE:
db.scores.aggregate( [
      { $match: { _id: 1 } },
      { $addFields: { homework: { $concatArrays: [ "$homework", [ 7 ] ] } } }
   ] )

----------------------------------------

TITLE: Query MongoDB Using Language Drivers
DESCRIPTION: Example code showing how to query MongoDB collections using various language-specific drivers. Each implementation uses the official MongoDB driver for that language.

LANGUAGE: multiple
CODE:
// Examples referenced from external files:
// C: test-mongoc-sample-commands.c
// Python: test_examples.py
// Java: DocumentationSamples.java
// Node.js: node_query.js
// PHP: DocumentationExamplesTest.php
// Ruby: shell_examples_spec.rb
// Scala: DocumentationExampleSpec.scala
// C#: DocumentationExamples.cs
// Go: go_examples.go

----------------------------------------

TITLE: Replacing MongoDB Shell with OpenSSL 1.1 Version
DESCRIPTION: This command removes the existing MongoDB Shell and installs the version that uses the system's OpenSSL 1.1.

LANGUAGE: sh
CODE:
sudo apt-get remove -y mongodb-mongosh && sudo apt-get install -y mongodb-mongosh-shared-openssl11

----------------------------------------

TITLE: Retrieving Ancestors of a Node in MongoDB
DESCRIPTION: This query retrieves the ancestors or path of a specific node using the Array of Ancestors pattern. It demonstrates how to quickly access the full path of a node.

LANGUAGE: javascript
CODE:
db.categories.findOne( { _id: "MongoDB" } ).ancestors

----------------------------------------

TITLE: Deserializing and Stringifying Extended JSON
DESCRIPTION: Shows how to deserialize an Extended JSON object and then stringify it back to a JSON string.

LANGUAGE: javascript
CODE:
EJSON.deserialize( serialized )

stringified = EJSON.stringify( db.conversions.findOne() )

----------------------------------------

TITLE: Basic $regexFindAll Syntax
DESCRIPTION: Shows the basic syntax structure for using the $regexFindAll operator in MongoDB aggregations

LANGUAGE: javascript
CODE:
{ $regexFindAll: { input: <expression> , regex: <expression>, options: <expression> } }

----------------------------------------

TITLE: Retrieving KeyVault Object and Calling getKeys() Method in MongoDB
DESCRIPTION: This snippet demonstrates how to retrieve the KeyVault object and use the getKeys() method to fetch all data encryption keys from the key vault.

LANGUAGE: javascript
CODE:
keyVault.getKeys()

----------------------------------------

TITLE: Adding Multi Update Operations to Bulk Operations List in MongoDB
DESCRIPTION: This snippet demonstrates how to initialize a Bulk operations builder for the 'items' collection and add various multi update operations to the list of operations.

LANGUAGE: javascript
CODE:
var bulk = db.items.initializeUnorderedBulkOp();
bulk.find( { status: "D" } ).update( { $set: { status: "I", points: "0" } } );
bulk.find( { item: null } ).update( { $set: { item: "TBD" } } );
bulk.execute();

----------------------------------------

TITLE: MongoDB Bitwise OR Operation Example
DESCRIPTION: Shows how to use the $bit operator with OR operation to update a document's integer field.

LANGUAGE: javascript
CODE:
db.switches.updateOne(
   { _id: 2 },
   { $bit: { expdata: { or: Int32( 5 ) } } }
)

----------------------------------------

TITLE: Setting up KMIP Provider Configuration
DESCRIPTION: Configures the KMIP (Key Management Interoperability Protocol) provider settings with the endpoint URI for key management operations.

LANGUAGE: java
CODE:
Map<String, Map<String, Object>> kmsProviders = new HashMap<String, Map<String, Object>>() {{
    put("kmip", new HashMap<String, Object>() {{
        put("endpoint", "localhost:5698");
    }});
}};

LANGUAGE: javascript
CODE:
const kmsProviders = {
    kmip: {
        endpoint: "localhost:5698"
    }
};

----------------------------------------

TITLE: Executing replSetInitiate Command in MongoDB
DESCRIPTION: This snippet shows the basic syntax for running the replSetInitiate command in MongoDB. It takes a configuration document as a parameter to specify the replica set's configuration.

LANGUAGE: javascript
CODE:
db.runCommand(
   { 
     replSetInitiate : <config_document> 
   }
)

----------------------------------------

TITLE: MongoDB Connection String for Motor Driver
DESCRIPTION: This snippet demonstrates the connection string for the Motor driver, which includes multiple host addresses for a replica set or sharded cluster.

LANGUAGE: bash
CODE:
mongodb+srv://myDatabaseUser:D1fficultP%40ssw0rd@mongos0.example.com:27017,mongos1.example.com:27017,mongos2.example.com:27017/?authSource=admin

----------------------------------------

TITLE: Dropping a Database Example
DESCRIPTION: Complete example showing how to switch to a database and drop it using the dropDatabase command in the MongoDB shell.

LANGUAGE: javascript
CODE:
use temp
db.runCommand( { dropDatabase: 1 } )

----------------------------------------

TITLE: Basic $minN Syntax in MongoDB Aggregation
DESCRIPTION: Shows the basic syntax structure for using the $minN accumulator operator in MongoDB aggregations.

LANGUAGE: none
CODE:
{
   $minN:
      {
         input: <expression>,
         n: <expression>
      }
}

----------------------------------------

TITLE: Bitwise OR with a Long and Integer Using $bitOr in MongoDB Aggregation
DESCRIPTION: Shows how to use $bitOr to perform a bitwise OR operation between field 'a' and a long value (63) in a $project stage of an aggregation pipeline.

LANGUAGE: javascript
CODE:
db.switches.aggregate( [
  { 
    $project: { 
      result: { 
        $bitOr: [ "$a", NumberLong("63") ]
      }
    }
  }
])

----------------------------------------

TITLE: Searching MongoDB Logs in Unix-Based Systems
DESCRIPTION: Commands to search system logs for MongoDB-related messages when mongod shuts down unexpectedly without logging a message.

LANGUAGE: bash
CODE:
sudo grep mongod /var/log/messages
sudo grep score /var/log/messages

----------------------------------------

TITLE: Retrieving Encrypted Documents in Go with CSFLE
DESCRIPTION: Go code example for querying encrypted documents using MongoDB's Client-Side Field Level Encryption. Demonstrates encrypted and non-encrypted client query functionality.

LANGUAGE: go
CODE:
## Placeholder for Go code - actual implementation details not shown in source ##

----------------------------------------

TITLE: Basic $addToSet Syntax in MongoDB
DESCRIPTION: Shows the basic syntax structure for using the $addToSet operator in MongoDB aggregation pipelines.

LANGUAGE: none
CODE:
{ $addToSet: <expression> }

----------------------------------------

TITLE: Extending Regex Options for UTF-8 Character Matching in MongoDB
DESCRIPTION: Shows how to use the *UCP option to match UTF-8 characters in MongoDB regex queries (MongoDB 6.1+).

LANGUAGE: javascript
CODE:
db.songs.insertMany( [
   { _id: 0, "artist" : "Blue Öyster Cult", "title": "The Reaper" },
   { _id: 1, "artist": "Blue Öyster Cult", "title": "Godzilla" },
   { _id: 2, "artist" : "Blue Oyster Cult", "title": "Take Me Away" }
] )

db.songs.find( { artist: { $regex: "(*UCP)/\byster/" } } )

----------------------------------------

TITLE: Check Feature Compatibility Version
DESCRIPTION: MongoDB shell command to check the feature compatibility version before upgrading to MongoDB 6.0

LANGUAGE: javascript
CODE:
db.adminCommand( { getParameter: 1, featureCompatibilityVersion: 1 } )

----------------------------------------

TITLE: Python PyMongo Query Operations
DESCRIPTION: Documentation for performing query operations using Collection.find() method in PyMongo driver



----------------------------------------

TITLE: Sample Output for Balanced Collection
DESCRIPTION: Example output of the balancerCollectionStatus command when the chunks for the queried collection do not need to be moved.

LANGUAGE: javascript
CODE:
{
   "chunkSize": Long("128"),
   "balancerCompliant" : true,
   "ok" : 1,
   "operationTime" : Timestamp(1583193238, 1),
   "$clusterTime" : {
      "clusterTime" : Timestamp(1583193238, 1),
      "signature" : {
         "hash" : BinData(0,"AAAAAAAAAAAAAAAAAAAAAAAAAAA="),
         "keyId" : NumberLong(0)
      }
   }
}

----------------------------------------

TITLE: Enabling MongoDB 6.0 Features
DESCRIPTION: Command to enable MongoDB 6.0 features after upgrading by setting featureCompatibilityVersion to 6.0 on the primary node.

LANGUAGE: javascript
CODE:
db.adminCommand( { setFeatureCompatibilityVersion: "6.0" } )

----------------------------------------

TITLE: Executing isdbgrid Command in MongoDB
DESCRIPTION: Command syntax for running the isdbgrid command to verify if a process is a mongos instance.

LANGUAGE: javascript
CODE:
db.runCommand(
   {
     isdbgrid: 1
   }
)

----------------------------------------

TITLE: Case-Sensitive Regex Pattern Matching
DESCRIPTION: Example showing case-sensitive pattern matching using $regexFindAll without any options

LANGUAGE: javascript
CODE:
db.products.aggregate([
   { $addFields: { returnObject: { $regexFindAll: { input: "$description", regex: /line/ } } } }
])

----------------------------------------

TITLE: Defining $multiply Operator Syntax in MongoDB Aggregation
DESCRIPTION: Demonstrates the syntax for using the $multiply operator in MongoDB aggregation pipelines. The operator takes an array of expressions as arguments and multiplies them together.

LANGUAGE: javascript
CODE:
{ $multiply: [ <expression1>, <expression2>, ... ] }

----------------------------------------

TITLE: Replacement with Write Concern Example
DESCRIPTION: Example showing document replacement with specific write concern options for replica set deployments.

LANGUAGE: javascript
CODE:
try {
   db.restaurant.replaceOne(
       { "name" : "Pizza Rat's Pizzaria" },
       { "name" : "Pizza Rat's Pub", "Borough" : "Manhattan", "violations" : 3 },
       { w: "majority", wtimeout: 100 }
   );
} catch (e) {
   print(e);
}

----------------------------------------

TITLE: Querying Embedded Documents with $elemMatch in MongoDB
DESCRIPTION: This query uses $elemMatch to match documents where the 'results' array contains at least one element with 'product' equal to 'xyz' and 'score' greater than or equal to 8.

LANGUAGE: javascript
CODE:
db.survey.find(
   { results: { $elemMatch: { product: "xyz", score: { $gte: 8 } } } }
)

----------------------------------------

TITLE: KeyVault Method Syntax - MongoDB
DESCRIPTION: Basic syntax demonstration for initializing a KeyVault instance and using the getKey() method with a UUID string parameter.

LANGUAGE: none
CODE:
keyVault = db.getMongo().getKeyVault()

keyVault.getKey(UUID("<UUID String>"))

----------------------------------------

TITLE: Querying MongoDB using Shell
DESCRIPTION: Demonstrates how to query documents with status 'D' using the MongoDB shell.

LANGUAGE: javascript
CODE:
db.inventory.find( { status: "D" } )

----------------------------------------

TITLE: Inserting Encrypted Document with CSFLE in C#
DESCRIPTION: This snippet demonstrates how to insert an encrypted document using a CSFLE-enabled MongoClient in C#. It inserts a document into the 'medicalRecords.patients' collection with encrypted fields.

LANGUAGE: csharp
CODE:
// Code snippet not provided in the given text

----------------------------------------

TITLE: Converting Temperature Units Using $map
DESCRIPTION: Complex example showing how to use $map with multiple operators to convert temperatures from Celsius to Fahrenheit.

LANGUAGE: javascript
CODE:
db.temperatures.insertMany( [
  { 
    "date" : ISODate("2019-06-23"),
    "tempsC" : [ 4, 12, 17 ]
  },
  {
    "date" : ISODate("2019-07-07"),
    "tempsC" : [ 14, 24, 11 ]
  },
  {
    "date" : ISODate("2019-10-30"),
    "tempsC" : [ 18, 6, 8 ]
  }
] )

LANGUAGE: javascript
CODE:
db.temperatures.aggregate( [
  { 
     $addFields: {
        "tempsF": {
           $map: {
              input: "$tempsC",
              as: "tempInCelsius",
              in: {
                 $add: [ { $multiply: [ "$$tempInCelsius", 9/5 ] }, 32 ]
              }
           }
         }
     }
   }
] )

----------------------------------------

TITLE: MongoDB FindOne with Sort Option
DESCRIPTION: Example showing how to use the sort option to control which document is returned when multiple documents match.

LANGUAGE: javascript
CODE:
db.bios.findOne(
   { },
   { },
   { sort: { birth: 1 } }
)

----------------------------------------

TITLE: Basic dropIndexes Command Syntax in MongoDB
DESCRIPTION: Demonstrates the basic syntax structure for the dropIndexes command with all available fields including the collection name, index specification, write concern, and comment.

LANGUAGE: javascript
CODE:
db.runCommand(
   { 
     dropIndexes: <string>, 
     index: <string|document|arrayofstrings>, 
     writeConcern: <document>, comment: <any> 
   }
)

----------------------------------------

TITLE: Querying Arrays with Single Element in MongoDB
DESCRIPTION: This example shows how to use the $size operator to find documents where a field is an array containing exactly one element. It's useful for distinguishing between single-element arrays and scalar values.

LANGUAGE: javascript
CODE:
db.collection.find( { field: { $size: 1 } } );

----------------------------------------

TITLE: Finding Lowest Scores Across Multiple Games
DESCRIPTION: Example showing how to use $bottomN to find the lowest scoring players across multiple games.

LANGUAGE: javascript
CODE:
db.gamescores.aggregate([
      {
         $group:
         { _id: "$gameId", playerId:
            {
               $bottomN:
                  {
                     output: [ "$playerId","$score" ],
                     sortBy: { "score": -1 },
                     n: 3
                  }
            }
         }
      }
])

----------------------------------------

TITLE: Basic $rank Operator Syntax
DESCRIPTION: Shows the basic syntax for using the $rank operator within MongoDB aggregation pipeline. The operator doesn't accept any parameters.

LANGUAGE: javascript
CODE:
{ $rank: { } }

----------------------------------------

TITLE: MongoDB Role Management Methods
DESCRIPTION: Collection of methods for managing MongoDB roles, including role creation, modification, privilege assignment, and role inheritance

LANGUAGE: mongodb
CODE:
db.createRole()
db.dropRole()
db.dropAllRoles()
db.getRole()
db.getRoles()
db.grantPrivilegesToRole()
db.revokePrivilegesFromRole()
db.grantRolesToRole()
db.revokeRolesFromRole()
db.updateRole()

----------------------------------------

TITLE: Creating Index Using Motor (Async Python)
DESCRIPTION: Creates an ascending index on the 'name' field using Motor, the async Python MongoDB driver

LANGUAGE: python
CODE:
await collection.create_index([("name", pymongo.ASCENDING)])

----------------------------------------

TITLE: MongoDB Process Startup with Logging Configuration
DESCRIPTION: Command line example showing how to start mongod with verbose logging and log file configuration

LANGUAGE: javascript
CODE:
mongod -v --logpath /var/log/mongodb/server1.log --logappend

----------------------------------------

TITLE: Basic $addFields Syntax in MongoDB
DESCRIPTION: Demonstrates the basic syntax for using the $addFields stage in MongoDB aggregation pipeline.

LANGUAGE: javascript
CODE:
{ $addFields: { <newField>: <expression>, ... } }

----------------------------------------

TITLE: Retrieving All Startup Parameters in MongoDB
DESCRIPTION: This example demonstrates how to retrieve all startup parameters using the getParameter command with the allParameters and setAt options in MongoDB version 8.0 and later.

LANGUAGE: javascript
CODE:
db.adminCommand( {
   getParameters: {
      allParameters: true,
      setAt: "startup"
   }
} )

----------------------------------------

TITLE: MongoDB $sum in $setWindowFields Stage
DESCRIPTION: Illustrates using $sum with $setWindowFields to calculate running totals partitioned by state.

LANGUAGE: javascript
CODE:
db.cakeSales.aggregate( [
   {
      $setWindowFields: {
         partitionBy: "$state",
         sortBy: { orderDate: 1 },
         output: {
            sumQuantityForState: {
               $sum: "$quantity",
               window: {
                  documents: [ "unbounded", "current" ]
               }         
            }
         }
      }
   }
] )

----------------------------------------

TITLE: Executing mapReduce Command in MongoDB
DESCRIPTION: Example syntax for running the mapReduce command in MongoDB. It specifies the collection, map and reduce functions, output destination, and optional query filter.

LANGUAGE: javascript
CODE:
db.runCommand( 
   {
     mapReduce: <string>,
     map: <string or JavaScript>,
     reduce: <string or JavaScript>,
     finalize: <string or JavaScript>,
     out: <output>,
     query: <document>,
     sort: <document>,
     limit: <number>,
     scope: <document>,
     jsMode: <boolean>,
     verbose: <boolean>,
     bypassDocumentValidation: <boolean>,
     collation: <document>,
     maxTimeMS: <integer>,
     writeConcern: <document>,
     comment: <any>
   }
)

----------------------------------------

TITLE: Force Shutting Down a MongoDB Instance
DESCRIPTION: This example demonstrates how to force shut down a MongoDB instance, which may interrupt ongoing operations.

LANGUAGE: javascript
CODE:
db.adminCommand({ "shutdown" : 1, "force" : true })

----------------------------------------

TITLE: Example Usage of killOp Command in MongoDB
DESCRIPTION: This example shows how to use the killOp command to terminate a specific operation with ID 3478. It also includes the expected response from the database after executing the command.

LANGUAGE: javascript
CODE:
db.adminCommand( { "killOp": 1, "op": 3478 } )

LANGUAGE: javascript
CODE:
{ "info" : "attempting to kill op", "ok" : 1 }

----------------------------------------

TITLE: Using $not Operator in MongoDB Query (JavaScript)
DESCRIPTION: Demonstrates the basic syntax of the $not operator in a MongoDB query. This example selects documents where the price field is not greater than 1.99 or does not exist.

LANGUAGE: javascript
CODE:
db.inventory.find( { price: { $not: { $gt: 1.99 } } } )

----------------------------------------

TITLE: Defining $ltrim Aggregation Operator in MongoDB
DESCRIPTION: Syntax for using the $ltrim operator in MongoDB aggregation pipeline. It takes an input string and optional chars to trim.

LANGUAGE: javascript
CODE:
{ $ltrim: { input: <string>,  chars: <string> } }

----------------------------------------

TITLE: Drop Collection with Default Write Concern
DESCRIPTION: Example showing how to drop a 'students' collection using default write concern settings.

LANGUAGE: javascript
CODE:
db.students.drop()

----------------------------------------

TITLE: Syntax for MongoDB $unset Operator in JavaScript
DESCRIPTION: Demonstrates the basic syntax for using the $unset operator in MongoDB update operations. The operator is used to specify one or more fields to be removed from a document.

LANGUAGE: javascript
CODE:
{ $unset: { <field1>: "", ... } }

----------------------------------------

TITLE: Scaling Output Values in MongoDB db.stats()
DESCRIPTION: This example demonstrates how to use the scale parameter to return values in kilobytes instead of bytes. The scale factor is set to 1024 to convert bytes to kilobytes.

LANGUAGE: javascript
CODE:
db.stats(1024)

----------------------------------------

TITLE: Building MongoDB SELinux Policy
DESCRIPTION: Changes to the mongodb-selinux directory and builds the SELinux policy using the make command.

LANGUAGE: bash
CODE:
cd mongodb-selinux
make

----------------------------------------

TITLE: Using maxTimeMS() in MongoDB Query
DESCRIPTION: Shows an example of using the maxTimeMS() method to set a time limit of 50 milliseconds for a MongoDB find operation.

LANGUAGE: javascript
CODE:
db.collection.find({description: /August [0-9]+, 1969/}).maxTimeMS(50)

----------------------------------------

TITLE: Querying MongoDB with $size Operator in Compass
DESCRIPTION: Demonstrates the filter syntax for MongoDB Compass to find documents where the 'tags' array has exactly 3 elements.

LANGUAGE: javascript
CODE:
{ "tags": { $size: 3 } }

----------------------------------------

TITLE: Querying MongoDB View with Aggregation
DESCRIPTION: Demonstrates how to query the created view using aggregation pipeline to calculate total amount sold per product.

LANGUAGE: javascript
CODE:
db.sales.aggregate( [ 
   { 
      $group: 
         {
            _id: "$prodId",
            amountSold: { $sum: { $multiply: [ "$price", "$numPurchased" ] } }
         }
   }
] )

----------------------------------------

TITLE: MongoDB Shard Key Example
DESCRIPTION: This snippet demonstrates two different shard key configurations in MongoDB. The first shows a simple range-based shard key, while the second shows an invalid modification that includes both a hashed field and a range-based field.

LANGUAGE: json
CODE:
{ "customer_id": 1 }

LANGUAGE: json
CODE:
{ "customer_id": "hashed", "order_id": 1 }

----------------------------------------

TITLE: Executing logApplicationMessage Command in MongoDB
DESCRIPTION: Command syntax for posting a custom message to MongoDB's audit log. Requires clusterAdmin role privileges. The message parameter takes a string value that will be recorded in the audit log under the 'applicationMessage' operation type.

LANGUAGE: javascript
CODE:
db.runCommand(
   {  
     logApplicationMessage: <string> 
   }
)

----------------------------------------

TITLE: Querying MongoDB Collection by Type
DESCRIPTION: Queries the log collection to find all documents where type is 'info'. Returns results in natural insertion order.

LANGUAGE: javascript
CODE:
db.log.find( { type: "info" } )

----------------------------------------

TITLE: MongoDB Replica Set Configuration Object
DESCRIPTION: This JSON object represents the replica set configuration, including details about each member and various settings.

LANGUAGE: json
CODE:
{
   "_id" : "rs0",
   "version" : 1,
   "protocolVersion" : NumberLong(1),
   "members" : [
      {
         "_id" : 0,
         "host" : "<hostname>:27017",
         "arbiterOnly" : false,
         "buildIndexes" : true,
         "hidden" : false,
         "priority" : 1,
         "tags" : {
      
         },
         "secondaryDelaySecs" : NumberLong(0),
         "votes" : 1
      },
      {
         "_id" : 1,
         "host" : "<hostname>:27018",
         "arbiterOnly" : false,
         "buildIndexes" : true,
         "hidden" : false,
         "priority" : 1,
         "tags" : {
      
         },
         "secondaryDelaySecs" : NumberLong(0),
         "votes" : 1
      },
      {
         "_id" : 2,
         "host" : "<hostname>:27019",
         "arbiterOnly" : false,
         "buildIndexes" : true,
         "hidden" : false,
         "priority" : 1,
         "tags" : {
      
         },
         "secondaryDelaySecs" : NumberLong(0),
         "votes" : 1
      }
   ],
   "settings" : {
      "chainingAllowed" : true,
      "heartbeatIntervalMillis" : 2000,
      "heartbeatTimeoutSecs" : 10,
      "electionTimeoutMillis" : 10000,
      "catchUpTimeoutMillis" : -1,
      "getLastErrorModes" : {
   
      },
      "getLastErrorDefaults" : {
         "w" : 1,
         "wtimeout" : 0
      },
      "replicaSetId" : ObjectId("598f630adc9053c6ee6d5f38")
   }
}

----------------------------------------

TITLE: Performing DeleteMany Operation in Go MongoDB Driver
DESCRIPTION: The DeleteMany() function in the Go driver returns a DeleteResult object. The DeletedCount property of this object contains the number of documents that matched the filter.

LANGUAGE: go
CODE:
collection.DeleteMany()

----------------------------------------

TITLE: MongoDB setWindowFields Configuration
DESCRIPTION: Configuration example showing how to partition documents by state, sort by orderDate, and output arrays of orderDate values using MongoDB's setWindowFields operator.

LANGUAGE: mongodb
CODE:
{
  partitionBy: "$state",
  sortBy: { orderDate: 1 },
  output: {
    orderDateArrayForState: {
      $push: "$orderDate"
    }
  }
}

----------------------------------------

TITLE: Configuring MongoDB Replica Set with No Authentication
DESCRIPTION: YAML configuration for a MongoDB replica set without authentication, intended for internal networks only. Includes replica set name and binds connections to localhost for security.

LANGUAGE: yaml
CODE:
replication:
   replSetName: "rs0"
net:
    bindIp: localhost

----------------------------------------

TITLE: Calculating Truck Speed Using $derivative
DESCRIPTION: Aggregation pipeline using $derivative to calculate average truck speed and filter for speeds over 50 mph.

LANGUAGE: javascript
CODE:
db.deliveryFleet.aggregate( [
   {
      $setWindowFields: {
         partitionBy: "$truckID",
         sortBy: { timeStamp: 1 },
         output: {
            truckAverageSpeed: {
               $derivative: {
                  input: "$miles",
                  unit: "hour"
               },
               window: {
                  range: [ -30, 0 ],
                  unit: "second"
               }
            }
         }
      }
   },
   {
      $match: {
         truckAverageSpeed: {
            $gt: 50
         }
      }
   }
] )

----------------------------------------

TITLE: Updating Chunk Size Configuration in MongoDB
DESCRIPTION: Command to update the global chunk size configuration in MongoDB. The sizeInMB parameter must be between 1 and 1024 megabytes.

LANGUAGE: javascript
CODE:
db.settings.updateOne(
   { _id: "chunksize" },
   { $set: { _id: "chunksize", value: <sizeInMB> } },  
   { upsert: true }
)

----------------------------------------

TITLE: Explaining Last Point Query Execution in MongoDB
DESCRIPTION: Demonstrates how to use the explain method to verify that a last point query is using the secondary index and the DISTINCT_SCAN optimization.

LANGUAGE: javascript
CODE:
db.getCollection( 'sensorData' ).explain( "executionStats" ).aggregate( [
   {
      $sort: { "metadata.sensorId": 1, "timestamp": -1 }
   },
   {
      $group: {
         _id: "$metadata.sensorId",
         ts: { $first: "$timestamp" },
         temperatureF: { $first: "$currentConditions.tempF" }
      }
   }
] )

----------------------------------------

TITLE: Resulting Document After $pullAll Operation
DESCRIPTION: Shows the final state of the document after applying the $pullAll operation, with values 0 and 5 removed.

LANGUAGE: javascript
CODE:
{ "_id" : 1, "scores" : [ 2, 1 ] }

----------------------------------------

TITLE: Joining Book Collections with $lookup in MongoDB
DESCRIPTION: Aggregation pipeline that joins the 'mainBookInfo' and 'additionalBookDetails' collections using $lookup, and merges the results into a single document.

LANGUAGE: javascript
CODE:
db.mainBookInfo.aggregate( [ 
   {
      $lookup: {
         from: "additionalBookDetails",
         localField: "_id", 
         foreignField: "bookId",
         as: "details"
      }
   },
   {
      $replaceRoot: {
         newRoot: { $mergeObjects: [ { $arrayElemAt: [ "$details", 0 ] }, "$$ROOT" ] }
      }
   },
   {
      $project: { details: 0 }
   }
 ] )

----------------------------------------

TITLE: Updating Documents Based on Embedded Field Comparison with $ne
DESCRIPTION: Example of using $ne in an update operation to set the price field based on a comparison with an embedded document field.

LANGUAGE: javascript
CODE:
db.inventory.updateMany( 
   { "carrier.fee" : { $ne: 1 } }, 
   { $set: { "price": 9.99 } } 
)

----------------------------------------

TITLE: MongoDB Log Output with Redaction
DESCRIPTION: This snippet demonstrates the log output produced by MongoDB when the redactClientLogData parameter is enabled. Sensitive information is replaced with '###' to protect data privacy.

LANGUAGE: javascript
CODE:
{
   "t": { "$date": "2024-07-19T15:36:55.024-07:00" },
   "s": "I",
   "c": "COMMAND",
   ...
   "attr": {
      "type": "command",
      ...
      "appName": "mongosh 2.2.10",
      "command": {
         "insert": "###",
         "documents": [
            {
               "name": "###",
               "PII": "###",
               "_id": "###"
            }
         ],
         "ordered": "###",
         ...
      }
      ...
   }
}

----------------------------------------

TITLE: MongoDB $topN Example with Different Data Types
DESCRIPTION: Shows how $topN handles sorting of different BSON data types, including strings and numbers, in a MongoDB aggregation pipeline.

LANGUAGE: javascript
CODE:
db.aggregate( [
   {
      $documents: [
         { playerId: "PlayerA", gameId: "G1", score: 1 },
         { playerId: "PlayerB", gameId: "G1", score: "2" },
         { playerId: "PlayerC", gameId: "G1", score: "" }
      ]
   },
   {
      $group:
         {
            _id: "$gameId",
            playerId: {
               $topN:
               {
                  output: ["$playerId","$score"],
                  sortBy: {"score": -1},
                  n: 3
               }
            }
         }
   }
] )

----------------------------------------

TITLE: Using forEach() to Print User Names from MongoDB Collection
DESCRIPTION: Demonstrates how to use the forEach() method with find() to iterate over documents in the 'users' collection and print each user's name.

LANGUAGE: javascript
CODE:
db.users.find().forEach( function( myDoc ) {
   print( "User name: " + myDoc.name )
} )

----------------------------------------

TITLE: Defining db.grantPrivilegesToRole() Method Syntax in MongoDB
DESCRIPTION: This snippet shows the syntax for the db.grantPrivilegesToRole() method, which is used to grant additional privileges to a user-defined role in MongoDB. It specifies the rolename, an array of privileges, and optional write concern.

LANGUAGE: javascript
CODE:
db.grantPrivilegesToRole(
    "< rolename >",
    [
        { resource: { <resource> }, actions: [ "<action>", ... ] },
        ...
    ],
    { < writeConcern > }
)

----------------------------------------

TITLE: Sample Data Insertion - MongoDB JavaScript
DESCRIPTION: Example showing how to insert sample weather data into a MongoDB collection.

LANGUAGE: javascript
CODE:
db.weather.insertMany( [
   { _id: 1, date: new Date("2018-06-01"), temp: "26.1C" },
   { _id: 2,  date: new Date("2018-06-02"), temp: "25.1C" },
   { _id: 3,  date: new Date("2018-06-03"), temp: "25.4C" },
] )

----------------------------------------

TITLE: Basic $first Syntax in MongoDB
DESCRIPTION: Shows the basic syntax structure for using the $first operator in MongoDB aggregation pipeline.

LANGUAGE: javascript
CODE:
{ $first: <expression> }

----------------------------------------

TITLE: Defining RoutingTableMissingMinKey Format in JSON
DESCRIPTION: Shows the expected format of a RoutingTableMissingMinKey inconsistency document, including the type, description, and details fields with namespace, collectionUUID, minKeyObj, and globalMin properties.

LANGUAGE: json
CODE:
{
   type: "RoutingTableMissingMinKey",
   description: "<string>",
   details: {
      namespace: "<string>",
      collectionUUID: <string>,
      minKeyObj: { <document> },
      globalMin: { <document> }
   }
}

----------------------------------------

TITLE: Adding Arbiter to MongoDB Replica Set
DESCRIPTION: The rs.addArb() method adds a new arbiter to an existing replica set. It accepts a host parameter specifying the hostname and optional port number of the arbiter member. This method is equivalent to rs.add(<host>, true).

LANGUAGE: javascript
CODE:
rs.addArb(host)

----------------------------------------

TITLE: Find Minimum Scores Across Multiple Games
DESCRIPTION: Shows how to use $minN to find minimum scores across multiple games using MongoDB aggregation.

LANGUAGE: javascript
CODE:
db.gamescores.aggregate( [
   {
      $group:
      { 
         _id: "$gameId", 
         minScores:
            {
               $minN:
                  {
                     input: ["$score","$playerId"],
                     n: 3
                  }
            }
      }
   }
] )

----------------------------------------

TITLE: Aggregation Pipeline Using $split for State-wise Delivery Analysis
DESCRIPTION: Complex aggregation pipeline that uses $split to separate city and state, then groups and sorts delivery quantities by state.

LANGUAGE: javascript
CODE:
db.deliveries.aggregate( [
  { $project: { city_state: { $split: ["$city", ", "] }, qty: 1 } },
  { $unwind: "$city_state" },
  { $match: { city_state: /[A-Z]{2}/ } },
  { $group: { _id: { state: "$city_state" }, total_qty: { $sum: "$qty" } } },
  { $sort: { total_qty: -1 } }
] )

----------------------------------------

TITLE: Disabling DHE Cipher Suites in MongoDB
DESCRIPTION: Command to disable only DHE cipher suites using the opensslCipherConfig parameter while maintaining ECDHE support for better performance.

LANGUAGE: bash
CODE:
mongod --setParameter opensslCipherConfig='HIGH:!EXPORT:!aNULL:!DHE:!kDHE@STRENGTH'

----------------------------------------

TITLE: Creating a GeoJSON LineString in MongoDB
DESCRIPTION: Defines a GeoJSON LineString object with an array of coordinate pairs. Used for representing paths or routes in geospatial data.

LANGUAGE: javascript
CODE:
{ type: "LineString", coordinates: [ [ 40, 5 ], [ 41, 6 ] ] }

----------------------------------------

TITLE: Sample Data Insertion for MongoDB Products Collection
DESCRIPTION: Example of inserting sample product data into a MongoDB collection with nested attributes containing various product details.

LANGUAGE: javascript
CODE:
db.products.insertMany( [
   {
      "item": "t-shirt",
      "price": "29.99",
      "attributes": {
         "material": "cotton",
         "color": "blue",
         "size": {
            "units": "cm",
            "length": 74
         }
      }
   },
   {
      "item": "milk",
      "price": "3.99",
      "attributes": {
         "sellBy": "02-06-2023",
         "type": "oat"
      }
   },
   {
      "item": "laptop",
      "price": "339.99",
      "attributes": {
         "memory": "8GB",
         "size": {
            "units": "inches",
            "height": 10,
            "width": 15
         }
      }
   }
] )

----------------------------------------

TITLE: Clearing Plan Cache for a Collection in MongoDB using JavaScript
DESCRIPTION: This snippet demonstrates how to use the PlanCache.clear() method to remove all cached query plans for a specific collection. It shows the general syntax and a specific example for the 'orders' collection.

LANGUAGE: javascript
CODE:
db.collection.getPlanCache().clear()

LANGUAGE: javascript
CODE:
db.orders.getPlanCache().clear()

----------------------------------------

TITLE: MongoDB currentOp() Output Example
DESCRIPTION: Demonstrates how the comment appears in the output of db.currentOp() method. This is useful for identifying and tracking specific operations that are currently running on a MongoDB instance.

LANGUAGE: javascript
CODE:
{
   "inprog" : [
      {
         "host" : "198.51.100.1:27017",
         "desc" : "conn3",
         "connectionId" : 3,
         ...

         "op" : "query",
         "ns" : "test.$cmd",
         "command" : {
            "find" : "restaurants",
            "filter" : {
               "borough" : "Manhattan"
            },
            "comment" : "Find all Manhattan restaurants",
            "$db" : "test"
         },
         "numYields" : 0,
         ...
      }
   ],
   "ok" : 1
}

----------------------------------------

TITLE: Initializing MongoDB Books Collection via mongosh
DESCRIPTION: This code first removes any existing documents from the books collection and prepares it for new document insertion. This is typically used at the start of a data setup or testing process.



----------------------------------------

TITLE: Retrieving Distinct Values for a Field in MongoDB
DESCRIPTION: Example of using the distinct command to get unique values for the 'dept' field from the 'inventory' collection.

LANGUAGE: javascript
CODE:
db.runCommand ( { distinct: "inventory", key: "dept" } )

----------------------------------------

TITLE: Querying Nested Fields in MongoDB
DESCRIPTION: Complex example showing how to query nested fields within subdocuments using $getField with explicit field and input parameters.

LANGUAGE: javascript
CODE:
db.inventory.aggregate( [
   { $match: 
      { $expr:
         { $lte:
            [
               { $getField: 
                  { field: { $literal: "$small" },
                    input: "$quantity"
                  }
               },
               20
            ]
         }
      }
   }
] )

----------------------------------------

TITLE: Mapping Product Names using cursor.map()
DESCRIPTION: Example showing how to extract product names from documents using cursor.map()

LANGUAGE: javascript
CODE:
db.products.find().map( function(p) { return p.name; } )

----------------------------------------

TITLE: Creating a Unique Compound Multikey Index in MongoDB
DESCRIPTION: Creates a unique compound multikey index on a.loc and a.qty fields, enforcing uniqueness for the combination of these values in array elements.

LANGUAGE: javascript
CODE:
db.collection.createIndex( { "a.loc": 1, "a.qty": 1 }, { unique: true } )

----------------------------------------

TITLE: Sample MongoDB Collection Data for $cond Example (JavaScript)
DESCRIPTION: Provides sample document data for the 'inventory' collection used in the $cond operator examples. The documents contain '_id', 'item', and 'qty' fields.

LANGUAGE: javascript
CODE:
{ "_id" : 1, "item" : "abc1", qty: 300 }
{ "_id" : 2, "item" : "abc2", qty: 200 }
{ "_id" : 3, "item" : "xyz1", qty: 250 }

----------------------------------------

TITLE: Sample Output of Shards Information
DESCRIPTION: Illustrates the format of shard information in the sh.status() output. Each shard entry includes the shard ID, host, tags, and state.

LANGUAGE: javascript
CODE:
  shards:
   { "_id" : <shard name1>, "host" : <string>, "tags" : [ <string> ... ], "state" : <num> }
   { "_id" : <shard name2>, "host" : <string>, "tags" : [ <string> ... ], "state" : <num> }
   ...

----------------------------------------

TITLE: Inserting Sample Data for MongoDB cursor.min() Examples
DESCRIPTION: Inserts sample documents into a 'products' collection to be used in subsequent examples demonstrating the cursor.min() method.

LANGUAGE: javascript
CODE:
db.products.insertMany([
   { "_id" : 1, "item" : "apple", "type" : "honey crisp", "price" : NumberDecimal("1.99") },
   { "_id" : 2, "item" : "apple", "type" : "fuji", "price" : NumberDecimal("1.99") },
   { "_id" : 3, "item" : "apple", "type" : "jonagold", "price" : NumberDecimal("1.29") },
   { "_id" : 4, "item" : "apple", "type" : "jonathan", "price" : NumberDecimal("1.29") },
   { "_id" : 5, "item" : "apple", "type" : "mcintosh", "price" : NumberDecimal("1.29") },
   { "_id" : 6, "item" : "apple", "type" : "cortland", "price" : NumberDecimal("1.29") },
   { "_id" : 7, "item" : "orange", "type" : "cara cara", "price" : NumberDecimal("2.99") },
   { "_id" : 9, "item" : "orange", "type" : "satsuma", "price" : NumberDecimal("1.99") },
   { "_id" : 8, "item" : "orange", "type" : "valencia", "price" : NumberDecimal("0.99") },
   { "_id" : 10, "item" : "orange", "type" : "navel", "price" : NumberDecimal("1.39") }
])

----------------------------------------

TITLE: Finding Restaurants Within Distance (Sorted)
DESCRIPTION: Finds restaurants within 5 miles of a point using $nearSphere, sorted by distance

LANGUAGE: javascript
CODE:
var METERS_PER_MILE = 1609.34
db.restaurants.find({ location: { $nearSphere: { $geometry: { type: "Point", coordinates: [ -73.93414657, 40.82302903 ] }, $maxDistance: 5 * METERS_PER_MILE } } })

----------------------------------------

TITLE: Updating with Write Concern
DESCRIPTION: An example of specifying write concern options for the update operation.

LANGUAGE: javascript
CODE:
try {
   db.restaurant.updateMany(
       { "name" : "Pizza Rat's Pizzaria" },
       { $inc: { "violations" : 3}, $set: { "Closed" : true } },
       { w: "majority", wtimeout: 100 }
   );
} catch (e) {
   print(e);
}

----------------------------------------

TITLE: Defining $dateSubtract Syntax in MongoDB Aggregation
DESCRIPTION: Shows the basic syntax for using the $dateSubtract operator in a MongoDB aggregation pipeline. The operator takes a startDate, unit, amount, and optional timezone as parameters.

LANGUAGE: javascript
CODE:
{ 
   $dateSubtract: { 
      startDate: <Expression>, 
      unit: <Expression>, 
      amount: <Expression>, 
      timezone: <tzExpression>
   }
}

----------------------------------------

TITLE: Defining system.users Collection Schema in MongoDB
DESCRIPTION: This snippet outlines the schema for documents in the system.users collection. It includes fields for user identification, authentication credentials, roles, custom data, and authentication restrictions.

LANGUAGE: javascript
CODE:
{
  _id: <system defined id>,
  userId : <system assigned UUID>, 
  user: "<name>",
  db: "<database>",
  credentials: { <authentication credentials> },
  roles: [
           { role: "<role name>", db: "<database>" },
           ...
         ],
  customData: <custom information>,
  authenticationRestrictions : [ <documents> ]
 }

----------------------------------------

TITLE: Inventory Collection Example with $replaceAll
DESCRIPTION: Complete example showing document insertion and string replacement using $replaceAll in a practical scenario.

LANGUAGE: javascript
CODE:
db.inventory.insertMany([
   { "_id" : 1, "item" : "blue paint" },
   { "_id" : 2, "item" : "blue and green paint" },
   { "_id" : 3, "item" : "blue paint with blue paintbrush" },
   { "_id" : 4, "item" : "blue paint with green paintbrush" },
])

LANGUAGE: javascript
CODE:
db.inventory.aggregate([
   {
     $project:
      {
         item: { $replaceAll: { input: "$item", find: "blue paint", replacement: "red paint" } }
      }
   }
])

----------------------------------------

TITLE: Configuring mongod with TLS/SSL using system certificate store
DESCRIPTION: Example configuration for a mongod instance using TLS/SSL with the system certificate store on Windows or macOS. This sets up required TLS encryption and specifies the certificate selector.

LANGUAGE: yaml
CODE:
net:
   tls:
      mode: requireTLS
      certificateSelector: subject="<CertificateCommonName>"
systemLog:
   destination: file
   path: "/var/log/mongodb/mongod.log"
   logAppend: true
storage:
   dbPath: "/var/lib/mongodb"
processManagement:
   fork: true
net:
   bindIp: localhost,mongodb0.example.net
   port: 27017

----------------------------------------

TITLE: Retrieving Distinct Values with a Query in MongoDB
DESCRIPTION: Shows how to use the distinct command with a query to get unique 'sku' values for items in department 'A'.

LANGUAGE: javascript
CODE:
db.runCommand ( { distinct: "inventory", key: "item.sku", query: { dept: "A"} } )

----------------------------------------

TITLE: Executing db.hostInfo() in MongoDB Shell
DESCRIPTION: This snippet demonstrates the output of the db.hostInfo() method when executed in the MongoDB shell. It returns a document containing detailed information about the system, including CPU, memory, operating system, and other hardware details.

LANGUAGE: javascript
CODE:
{
   "system" : {
          "currentTime" : ISODate("<timestamp>"),
          "hostname" : "<hostname>",
          "cpuAddrSize" : <number>,
          "memSizeMB" : <number>, 
          "memLimitMB" : <number>,  
          "numCores" : <number>,
          "cpuArch" : "<identifier>",
          "numaEnabled" : <boolean>
   },
   "os" : {
          "type" : "<string>",
          "name" : "<string>",
          "version" : "<string>"
   },
   "extra" : {
          "versionString" : "<string>",
          "libcVersion" : "<string>",
          "kernelVersion" : "<string>",
          "cpuFrequencyMHz" : "<string>",
          "cpuFeatures" : "<string>",
          "pageSize" : <number>,
          "numPages" : <number>,
          "maxOpenFiles" : <number>
   },
   "ok" : <return>
}

----------------------------------------

TITLE: Syntax for MongoDB $topN Aggregation Accumulator
DESCRIPTION: Demonstrates the basic syntax structure for using the $topN accumulator in a MongoDB aggregation pipeline.

LANGUAGE: javascript
CODE:
{
   $topN:
      {
         n: <expression>,
         sortBy: { <field1>: <sort order>, <field2>: <sort order> ... },
         output: <expression>
      }
}

----------------------------------------

TITLE: Creating TTL Index with MongoDB createIndex()
DESCRIPTION: Creates a Time-To-Live (TTL) index on a date field or array containing date values. The index automatically removes documents after the specified number of seconds from the indexed timestamp field.

LANGUAGE: javascript
CODE:
db.collection.createIndex({ "fieldName": 1 }, { expireAfterSeconds: seconds })

----------------------------------------

TITLE: Connecting to MongoDB with AWS Authentication
DESCRIPTION: This code snippet demonstrates the connection string format for connecting to a MongoDB Atlas cluster using AWS authentication. It includes the mongodb+srv protocol, cluster address, database name, and authentication parameters.

LANGUAGE: bash
CODE:
mongodb+srv://cluster0.example.com/testdb?authSource=$external&authMechanism=MONGODB-AWS

----------------------------------------

TITLE: MongoDB User Update Example
DESCRIPTION: Example showing how to update a user's customData and roles, demonstrating the complete replacement of existing values.

LANGUAGE: javascript
CODE:
use products
db.updateUser( "appClient01",
{
   customData : { employeeId : "0x3039" },
   roles : [
      { role : "read", db : "assets"  }
   ]
} )

----------------------------------------

TITLE: Creating Orders Collection in MongoDB
DESCRIPTION: Inserts sample order documents into a MongoDB collection with item, price and quantity ordered.

LANGUAGE: javascript
CODE:
db.orders.insertMany( [
  { "_id" : 1, "item" : "abc", "price" : 12, "ordered" : 2 },
  { "_id" : 2, "item" : "jkl", "price" : 20, "ordered" : 1 }
] )

----------------------------------------

TITLE: Counting All Documents in MongoDB Collection
DESCRIPTION: Example of using the count command to count all documents in the 'orders' collection.

LANGUAGE: javascript
CODE:
db.runCommand( { count: 'orders' } )

----------------------------------------

TITLE: Sample MongoDB Collection Data for $multiply Example
DESCRIPTION: Provides sample document data for a 'sales' collection to be used in the $multiply aggregation example.

LANGUAGE: javascript
CODE:
{ "_id" : 1, "item" : "abc", "price" : 10, "quantity": 2, date: ISODate("2014-03-01T08:00:00Z") }
{ "_id" : 2, "item" : "jkl", "price" : 20, "quantity": 1, date: ISODate("2014-03-01T09:00:00Z") }
{ "_id" : 3, "item" : "xyz", "price" : 5, "quantity": 10, date: ISODate("2014-03-15T09:00:00Z") }

----------------------------------------

TITLE: Disabling MongoDB 6.0 Backwards Incompatible Features
DESCRIPTION: Example of using the setFeatureCompatibilityVersion command to disable MongoDB 6.0 features and set compatibility to version 5.0. This is typically done as part of a downgrade process.

LANGUAGE: javascript
CODE:
db.adminCommand( { setFeatureCompatibilityVersion: "5.0" } )

----------------------------------------

TITLE: Defining cursor.maxTimeMS() Method in MongoDB
DESCRIPTION: Demonstrates the prototype form of the cursor.maxTimeMS() method, which specifies a cumulative time limit in milliseconds for processing operations on a cursor.

LANGUAGE: javascript
CODE:
db.collection.find(
   { <query> },
   { <projection> }
).maxTimeMS( <milliseconds> )

----------------------------------------

TITLE: Shuffling ObjectIDs for Distributed Sharding in C++
DESCRIPTION: Implementation of a function that modifies BSON ObjectIDs by swapping their first and last 16-bit words to prevent monotonic increases and improve sharding distribution.

LANGUAGE: cpp
CODE:
using namespace mongo;
OID make_an_id() {
  OID x = OID::gen();
  const unsigned char *p = x.getData();
  swap( (unsigned short&) p[0], (unsigned short&) p[10] );
  return x;
}

void foo() {
  // create an object
  BSONObj o = BSON( "_id" << make_an_id() << "x" << 3 << "name" << "jane" );
  // now we may insert o into a sharded collection
}

----------------------------------------

TITLE: Configuring KMIP TLS Options in C#
DESCRIPTION: C# implementation for setting up TLS options for KMIP connections. Requires certificates to be in PKCS12 format.

LANGUAGE: shell
CODE:
openssl pcks12 -export -out "<new pcks12 certificate>" -in "<certificate to convert>" \
-name "<new certificate name>" -password "<new certificate password>"

----------------------------------------

TITLE: Reloading systemd Configuration
DESCRIPTION: Command to reload systemd unit files after creating the THP service configuration.

LANGUAGE: sh
CODE:
sudo systemctl daemon-reload

----------------------------------------

TITLE: Counting Documents Matching a Query in MongoDB
DESCRIPTION: Shows how to count documents in the 'orders' collection with a date field greater than a specific value, using a limit option.

LANGUAGE: javascript
CODE:
db.orders.countDocuments( { ord_dt: { $gt: new Date('01/01/2012') } }, { limit: 100 } )

----------------------------------------

TITLE: Inserting Sample Shipping Data
DESCRIPTION: Creates a collection of customer orders with purchase dates for demonstration.

LANGUAGE: javascript
CODE:
db.shipping.insertMany(
  [
     { custId: 456, purchaseDate: ISODate("2020-12-31") },
     { custId: 457, purchaseDate: ISODate("2021-02-28") },
     { custId: 458, purchaseDate: ISODate("2021-02-26") }
  ]
)

----------------------------------------

TITLE: Inserting Multiple Cake Sales Records in MongoDB
DESCRIPTION: Creates a collection named 'cakeSales' and inserts multiple documents containing cake sale records. Each document includes fields for _id, type of cake, order date, state, price, and quantity. The data spans different cake types (chocolate, vanilla, strawberry) across CA and WA states.

LANGUAGE: javascript
CODE:
db.cakeSales.insertMany( [
   { _id: 0, type: "chocolate", orderDate: new Date("2020-05-18T14:10:30Z"),
     state: "CA", price: 13, quantity: 120 },
   { _id: 1, type: "chocolate", orderDate: new Date("2021-03-20T11:30:05Z"),
     state: "WA", price: 14, quantity: 140 },
   { _id: 2, type: "vanilla", orderDate: new Date("2021-01-11T06:31:15Z"),
     state: "CA", price: 12, quantity: 145 },
   { _id: 3, type: "vanilla", orderDate: new Date("2020-02-08T13:13:23Z"),
     state: "WA", price: 13, quantity: 104 },
   { _id: 4, type: "strawberry", orderDate: new Date("2019-05-18T16:09:01Z"),
     state: "CA", price: 41, quantity: 162 },
   { _id: 5, type: "strawberry", orderDate: new Date("2019-01-08T06:12:03Z"),
     state: "WA", price: 43, quantity: 134 }
] )

----------------------------------------

TITLE: Creating Basic Hashed Index in MongoDB
DESCRIPTION: Creates a single-field hashed index on a collection. The field value is hashed to create the index key.

LANGUAGE: javascript
CODE:
db.<collection>.createIndex(
   {
      <field>: "hashed"
   }
)

----------------------------------------

TITLE: Running listShards Command in MongoDB JavaScript
DESCRIPTION: Demonstrates the syntax for running the listShards command in MongoDB. This command must be executed against the admin database on a mongos instance.

LANGUAGE: javascript
CODE:
db.runCommand(
  { 
    listShards: 1 
  }
)

----------------------------------------

TITLE: Using $max with Dates in MongoDB
DESCRIPTION: This example demonstrates how to use the $max operator with date fields, comparing the current value with a specified date.

LANGUAGE: javascript
CODE:
db.tags.updateOne(
   { _id: 1 },
   { $max: { dateExpired: new Date("2013-09-30") } }
)

----------------------------------------

TITLE: Inserting Sample Data into MongoDB Collection
DESCRIPTION: Demonstrates how to insert multiple documents into a MongoDB collection named 'inventory' using the insertMany method.

LANGUAGE: javascript
CODE:
db.inventory.insertMany([
   { "_id" : 1, "item" : "abc1", description: "product 1", qty: 300 },
   { "_id" : 2, "item" : "abc2", description: "product 2", qty: 200 },
   { "_id" : 3, "item" : "xyz1", description: "product 3", qty: 250 },
   { "_id" : 4, "item" : "VWZ1", description: "product 4", qty: 300 },
   { "_id" : 5, "item" : "VWZ2", description: "product 5", qty: 180 }
])

----------------------------------------

TITLE: Creating Index on Parent Field in MongoDB
DESCRIPTION: This command creates an index on the 'parent' field to enable fast searches by parent node in the tree structure.

LANGUAGE: javascript
CODE:
db.categories.createIndex( { parent: 1 } )

----------------------------------------

TITLE: MongoDB getMore Command Output Example
DESCRIPTION: Example output from running getMore on a cursor created by a find operation on a sharded cluster, showing cursor details, next batch of documents, and cluster metadata.

LANGUAGE: javascript
CODE:
{
   "cursor" : {
      "id" : NumberLong("678960441858272731"),
      "ns" : "test.contacts",
      "nextBatch" : [
         {
            "_id" : ObjectId("5e8e501e1a32d227f9085857"),
            "zipcode" : "220000"
         }
      ],
      "partialResultsReturned" : true,
      "postBatchResumeToken": "< Resume Token >"
   },
   "ok" : 1,
   "operationTime" : Timestamp(1586385239, 2),
   "$clusterTime" : {
      "clusterTime" : Timestamp(1586385239, 2),
      "signature" : {
         "hash" : BinData(0,"lLjejeW6AQGReR9x1PD8xU+tP+A="),
         "keyId" : NumberLong("6813467763969884181")
      }
   }
}

----------------------------------------

TITLE: Attempting to Rename a Non-existent Field in MongoDB
DESCRIPTION: Demonstrates that the $rename operator does nothing when trying to rename a field that doesn't exist in the document.

LANGUAGE: javascript
CODE:
db.students.updateOne( { _id: 1 }, { $rename: { 'wife': 'spouse' } } )

----------------------------------------

TITLE: Using $replaceOne in MongoDB Aggregation Pipeline with $project
DESCRIPTION: This aggregation pipeline uses $replaceOne within $project to replace the first instance of 'blue paint' with 'red paint' in the item field of each document in the 'inventory' collection.

LANGUAGE: javascript
CODE:
db.inventory.aggregate([
   {
     $project:
      {
         item: { $replaceOne: { input: "$item", find: "blue paint", replacement: "red paint" } }
      }
   }
])

----------------------------------------

TITLE: Clearing Cached Plans for a Specific Query Shape in MongoDB
DESCRIPTION: This example demonstrates how to clear the cached query plan for a specific plan cache query shape in the 'orders' collection. It targets queries with a 'qty' greater than 10, sorted by 'ord_date'.

LANGUAGE: javascript
CODE:
db.runCommand(
   {
      planCacheClear: "orders",
      query: { "qty" : { "$gt" : 10 } },
      sort: { "ord_date" : 1 }
   }
)

----------------------------------------

TITLE: Sample Output of getCmdLineOpts Command in MongoDB
DESCRIPTION: This snippet shows an example of the output returned by the getCmdLineOpts command. It includes the 'argv' field with the command used to invoke mongod, and the 'parsed' field with all runtime options from both command line and configuration file.

LANGUAGE: javascript
CODE:
{
   "argv" : [
      "/usr/bin/mongod",
      "--config",
      "/etc/mongod.conf"
   ],
   "parsed" : {
      "config" : "/etc/mongod.conf",
      "net" : {
         "bindIp" : "127.0.0.1",
         "port" : 27017
      },
      "processManagement" : {
         "fork" : true
      },
      "storage" : {
         "dbPath" : "/data/db"
      },
      "systemLog" : {
         "destination" : "file",
         "logAppend" : true,
         "path" : "/var/log/mongodb/mongod.log"
      }
   },
   "ok" : 1
}

----------------------------------------

TITLE: Defining $divide Operator Syntax in MongoDB Aggregation
DESCRIPTION: This snippet demonstrates the basic syntax for using the $divide operator in MongoDB aggregation pipelines. It shows how to structure the operator with two expressions as arguments.

LANGUAGE: javascript
CODE:
{ $divide: [ <expression1>, <expression2> ] }

----------------------------------------

TITLE: MongoDB Window Function Value Types and Precedence
DESCRIPTION: Detailed explanation of how MongoDB window functions handle different value types and edge cases, including the precedence order of returned values. Covers handling of null values, single documents, empty windows, NaN, Infinity, decimal, and double values.

LANGUAGE: markdown
CODE:
- Ignores non-numeric values, ``null`` values, and missing fields in a\n  window.\n\n- If the window contains one document, returns ``null``.\n\n- If the window is empty, returns ``null``.\n\n- If the window contains a ``NaN`` value, returns ``NaN``.\n\n- If the window contains one or more ``Infinity`` value(s) that are\n  all positive or all negative, returns ``Infinity``. The returned\n  ``Infinity`` value has the same sign as the ``Infinity`` values in the\n  window.\n\n- If the window contains ``Infinity`` values with different signs,\n  returns ``NaN``.\n\n- If the window contains a ``decimal`` value, returns a ``decimal``\n  value.\n\n- If none of the previous points apply, returns a ``double`` value.\n\nThe returned values in order of precedence are as follows:\n\n- ``NaN``\n\n- ``Infinity``\n\n- ``decimal``\n\n- ``double``

----------------------------------------

TITLE: Inserting Sample Data
DESCRIPTION: Inserts sample data into a products collection for demonstration purposes.

LANGUAGE: javascript
CODE:
db.products.insertMany(
  [
    { item: "card", qty: 15 },
    { item: "envelope", qty: 20 },
    { item: "stamps" , qty: 30 }
  ]
)

----------------------------------------

TITLE: Structuring MongoDB 7.3 Changelog in reStructuredText
DESCRIPTION: This snippet defines the structure of the MongoDB 7.3 changelog document using reStructuredText directives. It sets up the page title, table of contents, and includes changelog files for specific minor releases.

LANGUAGE: rst
CODE:
:orphan:

=============
7.3 Changelog
=============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. include:: /includes/rapid-release-short.rst

.. include:: /includes/changelogs/releases/7.3.4.rst

.. include:: /includes/changelogs/releases/7.3.3.rst

.. include:: /includes/changelogs/releases/7.3.2.rst

.. include:: /includes/changelogs/releases/7.3.1.rst

----------------------------------------

TITLE: Querying Encrypted Documents with MongoDB CSFLE
DESCRIPTION: Code examples showing how to query documents with automatic client-side field level encryption enabled and disabled. Demonstrates the difference in document access between encrypted and unencrypted clients across multiple programming languages.

LANGUAGE: java
CODE:
// ... start-find ... code snippet for Java
// Actual code not shown in provided text

LANGUAGE: javascript
CODE:
// ... start-find ... code snippet for Node.js
// Actual code not shown in provided text

LANGUAGE: python
CODE:
# ... start-find ... code snippet for Python
# Actual code not shown in provided text

LANGUAGE: csharp
CODE:
// ... start-find ... code snippet for C#
// Actual code not shown in provided text

LANGUAGE: go
CODE:
// ... start-find ... code snippet for Go
// Actual code not shown in provided text

LANGUAGE: json
CODE:
// Output format example
// Actual output not shown in provided text

----------------------------------------

TITLE: Basic $replaceAll Syntax in MongoDB Aggregation
DESCRIPTION: Demonstrates the basic syntax structure for the $replaceAll operator in MongoDB aggregation pipeline.

LANGUAGE: javascript
CODE:
{ $replaceAll: { input: <expression>, find: <expression>, replacement: <expression> } }

----------------------------------------

TITLE: Creating 2D Index with Custom Location Range in MongoDB
DESCRIPTION: Creates a 2D geospatial index with custom minimum and maximum boundary values. The bounds are inclusive and apply to both longitude and latitude coordinates.

LANGUAGE: javascript
CODE:
db.<collection>.createIndex(
   {
      <location field>: "2d"
   },
   {
      min: <lower bound>,
      max: <upper bound>
   }
)

----------------------------------------

TITLE: $median as Accumulator Example
DESCRIPTION: Example showing how to use $median as an accumulator in a $group stage to calculate the median value of test scores.

LANGUAGE: javascript
CODE:
db.testScores.aggregate( [
   {
      $group: {
         _id: null,
         test01_median: {
            $median: {
               input: "$test01",
               method: 'approximate'
            }
         }
      }
   }
] )

----------------------------------------

TITLE: MongoDB Start Command with Config Expansion
DESCRIPTION: Command to start mongod with configuration expansion enabled for both rest and exec directives.

LANGUAGE: bash
CODE:
mongod --config "/path/to/config/mongod.conf" --configExpand "rest,exec"

----------------------------------------

TITLE: Inserting Sample Data for $setUnion Example in MongoDB
DESCRIPTION: Inserts sample documents into a 'flowers' collection to demonstrate $setUnion usage.

LANGUAGE: javascript
CODE:
db.flowers.insertMany( [
   { "_id" : 1, "flowerFieldA" : [ "rose", "orchid" ], "flowerFieldB" : [ "rose", "orchid" ] },
   { "_id" : 2, "flowerFieldA" : [ "rose", "orchid" ], "flowerFieldB" : [ "orchid", "rose", "orchid" ] },
   { "_id" : 3, "flowerFieldA" : [ "rose", "orchid" ], "flowerFieldB" : [ "rose", "orchid", "jasmine" ] },
   { "_id" : 4, "flowerFieldA" : [ "rose", "orchid" ], "flowerFieldB" : [ "jasmine", "rose" ] },
   { "_id" : 5, "flowerFieldA" : [ "rose", "orchid" ], "flowerFieldB" : [ ] },
   { "_id" : 6, "flowerFieldA" : [ "rose", "orchid" ], "flowerFieldB" : [ [ "rose" ], [ "orchid" ] ] },
   { "_id" : 7, "flowerFieldA" : [ "rose", "orchid" ], "flowerFieldB" : [ [ "rose", "orchid" ] ] },
   { "_id" : 8, "flowerFieldA" : [ ], "flowerFieldB" : [ ] },
   { "_id" : 9, "flowerFieldA" : [ ], "flowerFieldB" : [ "rose" ] }
] )

----------------------------------------

TITLE: Delete Single Document Example
DESCRIPTION: Example showing how to delete a single document matching a specific status condition using limit:1.

LANGUAGE: javascript
CODE:
db.runCommand(
   {
      delete: "orders",
      deletes: [ { q: { status: "D" }, limit: 1 } ]
   }
)

----------------------------------------

TITLE: Starting MongoDB Balancer with JavaScript
DESCRIPTION: This snippet demonstrates how to call the sh.startBalancer() method to start the balancer in a MongoDB sharded cluster. The method can optionally take timeout and interval parameters.

LANGUAGE: javascript
CODE:
sh.startBalancer(timeout, interval)

----------------------------------------

TITLE: Configuring Extended Key Usage for certificateKeyFile in MongoDB
DESCRIPTION: This snippet shows the required extendedKeyUsage configuration for the certificateKeyFile in MongoDB. It must include both clientAuth and serverAuth for TLS Web Client and Server Authentication.

LANGUAGE: none
CODE:
extendedKeyUsage = clientAuth, serverAuth

----------------------------------------

TITLE: MongoDB Linearizable Read with Timeout
DESCRIPTION: Example of using linearizable read concern with maxTimeMS to prevent indefinite blocking. Sets a 10-second timeout for the operation to complete.

LANGUAGE: javascript
CODE:
db.restaurants.find( { _id: 5 } ).readConcern("linearizable").maxTimeMS(10000)

----------------------------------------

TITLE: Replacing Documents in MongoDB with Field-Value Pairs
DESCRIPTION: Demonstrates how to replace a document in MongoDB's inventory collection. The example shows replacing a document that matches the query criteria 'item: paper' with a new document structure.



----------------------------------------

TITLE: Extracting Increment Value from Timestamp Field
DESCRIPTION: Example showing how to use $tsIncrement in a $project stage to extract the incrementing ordinal from a timestamp field.

LANGUAGE: javascript
CODE:
db.stockSales.aggregate( [
   {
      $project:
      {
         _id: 0, saleTimestamp: 1, saleIncrement: { $tsIncrement: "$saleTimestamp" }
      }
   }
] )

----------------------------------------

TITLE: Querying Encrypted Documents with MongoDB CSFLE in Node.js
DESCRIPTION: This Node.js code snippet shows how to query a MongoDB collection for an encrypted document using both a CSFLE-configured client and a standard client. It demonstrates the difference in query results when using automatic encryption.

LANGUAGE: javascript
CODE:
const encryptedDoc = await encryptedColl.findOne({ firstName: "Jon" });
console.log("Document retrieved with CSFLE-enabled client:");
console.log(encryptedDoc);

const doc = await standardColl.findOne({ firstName: "Jon" });
console.log("\nDocument retrieved with standard client:");
console.log(doc);

----------------------------------------

TITLE: Query Active Operations with No Yields
DESCRIPTION: Example showing how to find active operations that have never yielded

LANGUAGE: javascript
CODE:
db.adminCommand(
   {
     currentOp: true,
     "active" : true,
     "numYields" : 0,
     "waitingForLock" : false
   }
)

----------------------------------------

TITLE: Using $lastN as an Array Operator in MongoDB
DESCRIPTION: Example of using $lastN as an array operator to retrieve the last three scores for each player in MongoDB.

LANGUAGE: javascript
CODE:
db.games.aggregate([
   { $addFields: { lastScores: { $lastN: { n: 3, input: "$score" } } } }
])

----------------------------------------

TITLE: Dropping a User in MongoDB using db.dropUser()
DESCRIPTION: This example demonstrates how to use the db.dropUser() method to remove a user named 'reportUser1' from the 'products' database with specific write concern options.

LANGUAGE: javascript
CODE:
use products
db.dropUser("reportUser1", {w: "majority", wtimeout: 5000})

----------------------------------------

TITLE: Disabling User Write Block Mode in MongoDB
DESCRIPTION: This example shows how to disable user write block mode by setting the global field to false. This allows writes on the cluster to resume.

LANGUAGE: javascript
CODE:
db.adminCommand( {
   setUserWriteBlockMode: 1,
   global: false 
} )

----------------------------------------

TITLE: Connecting to Atlas Cluster with AWS IAM Credentials
DESCRIPTION: Demonstrates how to connect to a MongoDB Atlas cluster using AWS IAM credentials. This example uses the MONGODB-AWS authentication mechanism and the $external authSource.

LANGUAGE: shell
CODE:
mongodb+srv://<aws_access_key_id>:<aws_secret_access_key>@cluster0.example.com/test?authSource=$external&authMechanism=MONGODB-AWS

----------------------------------------

TITLE: Querying MongoDB with $near Operator for Geospatial Data in JavaScript
DESCRIPTION: This snippet demonstrates how to use the $near operator in MongoDB to find documents within a specified distance range from a given GeoJSON point. It queries the 'places' collection, which has a 2dsphere index, and returns documents between 1000 and 5000 meters from the specified coordinates, sorted by distance.

LANGUAGE: javascript
CODE:
db.places.find(
   {
     location:
       { $near :
          {
            $geometry: { type: "Point",  coordinates: [ -73.9667, 40.78 ] },
            $minDistance: 1000,
            $maxDistance: 5000
          }
       }
   }
)

----------------------------------------

TITLE: mergeChunks Command Error: Chunks on Different Shards in MongoDB
DESCRIPTION: Example of the error message returned when the input chunks are not on the same shard.

LANGUAGE: javascript
CODE:
{
  "ok" : 0,
  "errmsg" : "could not merge chunks, collection test.users does not contain a chunk ending at { username: \"user63169\" }",
  "$clusterTime" : {
     "clusterTime" : Timestamp(1510767081, 1),
     "signature" : {
         "hash" : BinData(0,"okKHD0QuzcpbVQg7mP2YFw6lM04="),
         "keyId" : NumberLong("6488693018630029321")
      }
  },
  "operationTime" : Timestamp(1510767081, 1)
}

----------------------------------------

TITLE: Configuring AWS Credentials for MongoDB CSFLE
DESCRIPTION: This snippet shows how to specify AWS credentials for the KMS provider in MongoDB's Client-Side Field Level Encryption. It includes setting up the 'aws' KMS provider with IAM user credentials.

LANGUAGE: java
CODE:
Map<String, Map<String, Object>> kmsProviders = new HashMap<String, Map<String, Object>>();
Map<String, Object> awsKmsOptions = new HashMap<String, Object>();
awsKmsOptions.put("accessKeyId", "<YOUR-AWS-ACCESS-KEY-ID>");
awsKmsOptions.put("secretAccessKey", "<YOUR-AWS-SECRET-ACCESS-KEY>");
kmsProviders.put("aws", awsKmsOptions);

LANGUAGE: javascript
CODE:
const kmsProviders = {
  aws: {
    accessKeyId: "<YOUR-AWS-ACCESS-KEY-ID>",
    secretAccessKey: "<YOUR-AWS-SECRET-ACCESS-KEY>"
  }
};

LANGUAGE: python
CODE:
kms_providers = {
    "aws": {
        "accessKeyId": "<YOUR-AWS-ACCESS-KEY-ID>",
        "secretAccessKey": "<YOUR-AWS-SECRET-ACCESS-KEY>"
    }
}

LANGUAGE: csharp
CODE:
var kmsProviders = new Dictionary<string, IReadOnlyDictionary<string, object>>
{
    { "aws", new Dictionary<string, object>
        {
            { "accessKeyId", "<YOUR-AWS-ACCESS-KEY-ID>" },
            { "secretAccessKey", "<YOUR-AWS-SECRET-ACCESS-KEY>" }
        }
    }
};

LANGUAGE: go
CODE:
kmsProviders := map[string]map[string]interface{}{
	"aws": {
		"accessKeyId":     "<YOUR-AWS-ACCESS-KEY-ID>",
		"secretAccessKey": "<YOUR-AWS-SECRET-ACCESS-KEY>",
	},
}

----------------------------------------

TITLE: Aggregation Results
DESCRIPTION: Shows the output documents after applying the $let expression in the aggregation pipeline.

LANGUAGE: javascript
CODE:
{ "_id" : 1, "finalTotal" : 9.450000000000001 }
{ "_id" : 2, "finalTotal" : 10.25 }

----------------------------------------

TITLE: Creating TuneD Profile Directory
DESCRIPTION: Creates a new directory to store the custom TuneD profile named virtual-guest-thp

LANGUAGE: sh
CODE:
sudo mkdir /etc/tuned/virtual-guest-thp

----------------------------------------

TITLE: Using cursor.min() and cursor.max() for Explicit Index Scans in MongoDB
DESCRIPTION: The cursor.min() and cursor.max() methods are used to construct an index scan with explicitly specified index bounds, bypassing normal query planning. These methods can potentially improve query performance when used correctly to constrain both sides of an index scan.

LANGUAGE: mongodb
CODE:
cursor.min()
cursor.max()

----------------------------------------

TITLE: Querying Replica Set Configuration in MongoDB JavaScript Shell
DESCRIPTION: Method to retrieve the current replica set configuration document. Returns a document containing all replica set configuration settings including member information, settings, and configuration version.

LANGUAGE: javascript
CODE:
rs.conf()

LANGUAGE: javascript
CODE:
rs.config()

----------------------------------------

TITLE: Array Input Syntax for $median in $project Stage
DESCRIPTION: Demonstrates how to use an array as input for the $median operator when used in a $project stage.

LANGUAGE: javascript
CODE:
{
   $median:
      {
         input: [ <expression1, <expression2>, ..., <expressionN> ], 
         method: <string>
      }
}

----------------------------------------

TITLE: MongoDB $topN Example: Highest Scores Across Multiple Games
DESCRIPTION: Shows how to use $topN to find the three highest scoring players in each game across multiple games in a MongoDB collection.

LANGUAGE: javascript
CODE:
db.gamescores.aggregate( [
      {
         $group:
         { _id: "$gameId", playerId:
            {
               $topN:
                  {
                     output: [ "$playerId","$score" ],
                     sortBy: { "score": -1 },
                     n: 3
                  }
            }
         }
      }
] )

----------------------------------------

TITLE: Creating Temporary Index in MongoDB
DESCRIPTION: Creates a temporary index with url and dummyField to maintain performance during index modifications.

LANGUAGE: javascript
CODE:
db.siteAnalytics.createIndex( { "url": 1, "dummyField": 1 } )

----------------------------------------

TITLE: Sort Array by Field - JavaScript
DESCRIPTION: Demonstrates sorting an array of documents by a specific field name in ascending order.

LANGUAGE: javascript
CODE:
db.engineers.aggregate( [
   { $project: 
      {
          _id: 0,
          result:
            {
               $sortArray: { input: "$team", sortBy: { name: 1 } }
            }
      }
   }
] )

----------------------------------------

TITLE: Enabling MongoDB Auditing with Console Output
DESCRIPTION: Command to start mongod with auditing enabled and output directed to the console.

LANGUAGE: bash
CODE:
mongod --dbpath data/db --auditDestination console

----------------------------------------

TITLE: Checking System Limits with ulimit Command
DESCRIPTION: Command to display current system resource limits including CPU time, file size, stack size, and other constraints.

LANGUAGE: bash
CODE:
$ ulimit -a

----------------------------------------

TITLE: Retrieving Explain Results in MongoDB Scripts
DESCRIPTION: This snippet shows how to retrieve explain results in MongoDB scripts. It demonstrates the use of .next() or .finish() methods to obtain the explain results when not in an interactive shell.

LANGUAGE: javascript
CODE:
.next()

LANGUAGE: javascript
CODE:
.finish()

----------------------------------------

TITLE: Validating Specific Collection with validateDBMetadata
DESCRIPTION: This snippet shows how to validate a specific collection (sales) in a particular database (inventory) using the validateDBMetadata command.

LANGUAGE: javascript
CODE:
db.runCommand( { 
  validateDBMetadata: 1, 
  apiParameters: { 
    version: "1", 
    strict: true, 
    deprecationErrors: true 
  }, 
  db: "inventory",
  collection: "sales",
})

----------------------------------------

TITLE: Inserting Encrypted Document with MongoDB Queryable Encryption in Python
DESCRIPTION: This Python code demonstrates how to insert an encrypted document using MongoDB's Queryable Encryption feature. It uses a pre-configured MongoClient instance with Queryable Encryption enabled.

LANGUAGE: python
CODE:
# Requires a MongoClient configured with Queryable Encryption support
# Insert an encrypted document


----------------------------------------

TITLE: Analyzing Shard Key { _id: 1 } with MongoDB analyzeShardKey()
DESCRIPTION: This snippet uses analyzeShardKey() to evaluate the { _id: 1 } shard key on the social.post collection. It analyzes key characteristics, ignores read/write distribution, and samples 10,000 documents.

LANGUAGE: javascript
CODE:
use social
db.post.analyzeShardKey(
   { _id: 1 },
   {
      keyCharacteristics: true,
      readWriteDistribution: false
      sampleSize: 10000
   }
)

----------------------------------------

TITLE: MongoDB $limit Stage Syntax Definition
DESCRIPTION: Demonstrates the basic syntax for the $limit aggregation pipeline stage. Takes a positive 64-bit integer as the parameter to specify maximum number of documents to pass through.

LANGUAGE: javascript
CODE:
{ $limit: <positive 64-bit integer> }

----------------------------------------

TITLE: MongoDB $mod Operator with Negative Divisor
DESCRIPTION: Shows the behavior of the $mod operator with a negative divisor, which can produce negative results.

LANGUAGE: javascript
CODE:
db.inventory.find( { qty: { $mod: [ -4, -0 ] } } )

----------------------------------------

TITLE: MongoDB $concat Output Example
DESCRIPTION: Shows the expected output from the $concat aggregation operation, including null handling.

LANGUAGE: javascript
CODE:
{ _id : 1, itemDescription : "ABC1 - product 1" }
{ _id : 2, itemDescription : "ABC2 - product 2" }
{ _id : 3, itemDescription : null }

----------------------------------------

TITLE: Modifying Time Series Collection Properties
DESCRIPTION: Shows how to modify time series collection properties like granularity and bucketing settings

LANGUAGE: javascript
CODE:
db.runCommand( {
   collMod: "weather24h",
   timeseries: { 
      bucketRoundingSeconds: 86400,
      bucketMaxSpanSeconds: 86400 
   }
} )

----------------------------------------

TITLE: Creating Basic Search Index Example
DESCRIPTION: Example of creating a search index named searchIndex01 on the contacts collection with dynamic mapping for all fields.

LANGUAGE: javascript
CODE:
db.runCommand( {
   createSearchIndexes: "contacts",
   indexes: [
      {
         name: "searchIndex01",
         definition: { mappings: { dynamic: true } }
      }
   ]
} )

----------------------------------------

TITLE: Disabling Auto-Split in MongoDB Sharded Cluster
DESCRIPTION: The sh.disableAutoSplit() method disables the autosplit flag in the config.settings collection. This prevents MongoDB from automatically splitting chunks based on shard key values. It must be run from a mongosh session connected to a mongos instance.

LANGUAGE: javascript
CODE:
sh.disableAutoSplit()

----------------------------------------

TITLE: Initializing MongoDB Replica Set Using mtools
DESCRIPTION: Command to create a MongoDB replica set with three nodes using mtools utility. This is a prerequisite for running the queryable encryption example.

LANGUAGE: sh
CODE:
mlaunch init --replicaset --nodes 3

----------------------------------------

TITLE: Simple Certificate Rotation Example in MongoDB
DESCRIPTION: Example of executing the rotateCertificates command without a custom message.

LANGUAGE: javascript
CODE:
db.adminCommand( { rotateCertificates: 1 } )

----------------------------------------

TITLE: Results of $gt Comparison in MongoDB Aggregation
DESCRIPTION: Shows the output documents after applying the $gt operator comparison, demonstrating true/false results based on qty values compared to 250.

LANGUAGE: javascript
CODE:
{ item : "abc1", qty : 300, qtyGt250 : true }
{ item : "abc2", qty : 200, qtyGt250 : false }
{ item : "xyz1", qty : 250, qtyGt250 : false }
{ item : "VWZ1", qty : 300, qtyGt250 : true }
{ item : "VWZ2", qty : 180, qtyGt250 : false }

----------------------------------------

TITLE: ReStructuredText Documentation Structure
DESCRIPTION: ReStructuredText markup defining the documentation structure for MongoDB text search, including sections for indexing, operators, aggregation, languages, and text indexes.

LANGUAGE: restructuredtext
CODE:
.. _text-search-on-prem:

=======================================
Text Search on Self-Managed Deployments
=======================================

.. default-domain:: mongodb

.. facet::
   :name: genre
   :values: reference

.. meta:: 
   :description: MongoDB offers robust text search capabilities for self-managed deployments, include fine-grained indexing and a rich query language.
   :keywords: on-prem

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. toctree::
   :titlesonly:

   Perform a Text Search </core/link-text-indexes>
   Text Search Operators </core/text-search-operators>
   Aggregation Pipeline </tutorial/text-search-in-aggregation>
   Languages </reference/text-search-languages>
   Text Indexes </core/indexes/index-types/index-text>

----------------------------------------

TITLE: Interrupting Running Operation Using db.killOp() in MongoDB
DESCRIPTION: This snippet shows how to use the db.killOp() method to interrupt a running operation in MongoDB. The method takes an operation ID as an argument to identify the target operation.

LANGUAGE: javascript
CODE:
db.killOp(<opId>)

----------------------------------------

TITLE: Defining Service Principal Format in Kerberos
DESCRIPTION: Demonstrates the format for service principal names used by MongoDB instances for Kerberos authentication.

LANGUAGE: none
CODE:
<service>/<fully qualified domain name>@<KERBEROS REALM>

----------------------------------------

TITLE: Sample Document Structure for Weather Data in MongoDB
DESCRIPTION: Illustrates the structure of a document in the weather time series collection, including timestamp, metadata, and temperature fields.

LANGUAGE: javascript
CODE:
{
   "timestamp": ISODate("2021-05-18T00:00:00.000Z"),
   "metadata": { 
     "sensorId": 5578, 
     "type": "temperature" 
   },
   "temp": 12
}

----------------------------------------

TITLE: Configuring Extended Key Usage for clusterFile in MongoDB
DESCRIPTION: This snippet demonstrates the necessary extendedKeyUsage configuration for the clusterFile in MongoDB. It must include clientAuth for TLS Web Client Authentication.

LANGUAGE: none
CODE:
extendedKeyUsage = clientAuth

----------------------------------------

TITLE: Sample Data for MongoDB $sqrt Example
DESCRIPTION: Provides sample documents in a 'points' collection to be used in the $sqrt aggregation example. Each document contains two points with x and y coordinates.

LANGUAGE: javascript
CODE:
{ _id: 1, p1: { x: 5, y: 8 }, p2: { x: 0, y: 5} }
{ _id: 2, p1: { x: -2, y: 1 }, p2: { x: 1, y: 5} }
{ _id: 3, p1: { x: 4, y: 4 }, p2: { x: 4, y: 0} }

----------------------------------------

TITLE: Specifying Multiple Replica Set Members in MongoDB
DESCRIPTION: This snippet shows the format for specifying multiple replica set members when adding a shard. The hostnames and ports are comma-separated within the string parameter.

LANGUAGE: bash
CODE:
<replica_set>/<hostname><:port>,<hostname><:port>, ...

----------------------------------------

TITLE: Creating Basic Multiple Indexes
DESCRIPTION: Example showing how to create multiple basic indexes on a collection with different key patterns.

LANGUAGE: javascript
CODE:
db.restaurants.createIndexes([{"borough": 1}, {"location": "2dsphere"}])

----------------------------------------

TITLE: Specifying Olson Timezone Identifiers in MongoDB
DESCRIPTION: Examples of valid Olson Timezone Identifier expressions for use in MongoDB timezone configurations. These identifiers represent specific geographical locations and their time offsets.

LANGUAGE: bash
CODE:
"America/New_York"
"Europe/London"
"GMT"

----------------------------------------

TITLE: Querying MongoDB using $bitsAnySet with BinData Bitmask
DESCRIPTION: This query demonstrates the use of $bitsAnySet operator to test whether field 'a' has any bits set at positions 4 and 5 using a BinData bitmask (BinData(0, "MA=="), which is 00110000 in binary).

LANGUAGE: javascript
CODE:
db.collection.find( { a: { $bitsAnySet: BinData(0, "MA==") } } )

----------------------------------------

TITLE: Filtering ServerStatus Output
DESCRIPTION: Example showing how to filter specific fields from serverStatus output

LANGUAGE: javascript
CODE:
db.runCommand( { serverStatus: 1, repl: 0, metrics: 0, locks: 0 } )

----------------------------------------

TITLE: Syntax for MongoDB Positional $ Update Operator
DESCRIPTION: Demonstrates the basic syntax for using the positional $ operator in MongoDB update operations. It shows how to use the operator as a placeholder for the first element that matches the query document.

LANGUAGE: javascript
CODE:
{ "<array>.$" : value }

LANGUAGE: javascript
CODE:
db.collection.updateOne(
   { <array>: value ... },
   { <update operator>: { "<array>.$" : value } }
)

----------------------------------------

TITLE: Setting In-Memory Size for MongoDB (YAML)
DESCRIPTION: YAML configuration to set the in-memory size for MongoDB. This specifies the storage engine, database path, and the memory size limit.

LANGUAGE: yaml
CODE:
storage:
   engine: inMemory
   dbPath: <path>
   inMemory:
      engineConfig:
         inMemorySizeGB: <newSize>

----------------------------------------

TITLE: MongoDB dropSearchIndex Command Syntax
DESCRIPTION: Basic syntax for running the dropSearchIndex command. Takes collection name and either index ID or name as parameters.

LANGUAGE: javascript
CODE:
db.runCommand(
   {
      dropSearchIndex: "<collection name>",
      id: "<index Id>",
      name: "<index name>"
   }
)

----------------------------------------

TITLE: Querying with $in Operator for Specific Values
DESCRIPTION: Example of using $in operator to find documents where quantity field matches either 5 or 15.

LANGUAGE: javascript
CODE:
db.inventory.find( { quantity: { $in: [ 5, 15 ] } }, { _id: 0 } )

----------------------------------------

TITLE: Splitting MongoDB Chunk at Specific Shard Key Value
DESCRIPTION: Example demonstrating how to split a chunk in the sharded collection test.foo at the shard key value x: 70. This creates two chunks: one from the original lower bound to x: 70 (exclusive), and another from x: 70 (inclusive) to the original upper bound.

LANGUAGE: javascript
CODE:
sh.splitAt( "test.foo", { x: 70 } )

----------------------------------------

TITLE: Initial MongoDB TLS Configuration with DN Attributes
DESCRIPTION: Example configuration showing initial TLS settings using Distinguished Name attributes for cluster authentication

LANGUAGE: yaml
CODE:
security:
  clusterAuthMode:      x509
net:
  tls:
    mode:               requireTLS
    certificateKeyFile: /etc/mycerts/10gen-server1.pem
    CAFile:             /etc/mycerts/ca.pem
    clusterFile:        /etc/mycerts/10gen-cluster1.pem
    clusterCAFile:      /etc/mycerts/ca.pem
    clusterAuthX509:
       attributes:      O=MongoDB, OU=MongoDB Server

----------------------------------------

TITLE: Basic createIndexes Command Syntax
DESCRIPTION: Shows the basic structure and syntax for using the createIndexes command to build indexes on a MongoDB collection. Demonstrates the core command fields including collection name, index specifications, write concern, and commit quorum.

LANGUAGE: javascript
CODE:
db.runCommand(
      {
        createIndexes: <collection>,
        indexes: [
            {
                key: {
                    <key-value_pair>,
                    <key-value_pair>,
                    ...
                },
                name: <index_name>,
                <option1>,
                <option2>,
                ...
            },
            { ... },
            { ... }
        ],
        writeConcern: { <write concern> },
        commitQuorum: <int|string>,
        comment: <any>
      }
    )

----------------------------------------

TITLE: MongoDB $bit Operator Syntax
DESCRIPTION: Basic syntax structure for using the $bit operator in MongoDB updates. Shows how to specify bitwise AND, OR, or XOR operations on a field.

LANGUAGE: javascript
CODE:
{ $bit: { <field>: { <and|or|xor>: <int> } } }

----------------------------------------

TITLE: Enabling Change Stream Pre/Post Images
DESCRIPTION: Examples showing how to enable and disable change stream pre and post images for a collection

LANGUAGE: javascript
CODE:
db.runCommand( {
   collMod: "orders",
   changeStreamPreAndPostImages: { enabled: true }
} )

LANGUAGE: javascript
CODE:
db.runCommand( {
   collMod: "orders",
   changeStreamPreAndPostImages: { enabled: false }
} )

----------------------------------------

TITLE: Equivalent $convert Expression for $toObjectId in MongoDB
DESCRIPTION: Shows the equivalent $convert expression that $toObjectId is a shorthand for. This demonstrates how $toObjectId can be expressed using the more general $convert operator.

LANGUAGE: javascript
CODE:
{ $convert: { input: <expression>, to: "objectId" } }

----------------------------------------

TITLE: Executing cleanupOrphaned Command in MongoDB
DESCRIPTION: This code snippet demonstrates the syntax for running the cleanupOrphaned command in MongoDB. It specifies the namespace of the sharded collection and includes deprecated options for starting key, secondary throttle, and write concern.

LANGUAGE: javascript
CODE:
db.runCommand( 
  {
    cleanupOrphaned: "<database>.<collection>",
    startingFromKey: <minimumShardKeyValue>, // deprecated
    secondaryThrottle: <boolean>, // deprecated
    writeConcern: <document> // deprecated
  } 
)

----------------------------------------

TITLE: MongoDB Sort Query with Index Creation
DESCRIPTION: Example of querying with sort operation and creating a supporting compound index on manufacturer and model fields.

LANGUAGE: javascript
CODE:
db.cars.find( { manufacturer: "GM" } ).sort( { model: 1 } )

LANGUAGE: javascript
CODE:
db.cars.createIndex( { manufacturer: 1, model: 1 } )

----------------------------------------

TITLE: Finding Places within a Radius using $centerSphere in MongoDB
DESCRIPTION: Illustrates a practical example of using $centerSphere to find documents within a 10-mile radius of a specific longitude and latitude. The radius is converted to radians by dividing by the earth's approximate equatorial radius.

LANGUAGE: javascript
CODE:
db.places.find( {
  loc: { $geoWithin: { $centerSphere: [ [ -88, 30 ], 10/3963.2 ] } }
} )

----------------------------------------

TITLE: Single Namespace bulkWrite Example in MongoDB
DESCRIPTION: Example of using the bulkWrite command to perform insert, update, and delete operations on a single collection (pizzas).

LANGUAGE: javascript
CODE:
db.adminCommand( {
   bulkWrite: 1,

   // The ops array contains the insert, update, and delete
   // operations.
   ops: [

      // Specify the namespace ID index immediately after
      // the insert, update, and delete text.
      // For example, "insert: 0" specifies the 0 namespace ID index,
      // which is the "test.pizzas" namespace in nsInfo at the end
      // of the example.

      // Insert a pizza.
      { insert: 0, document: { _id: 4, type: "sausage",
        size: "small", price: 12 } },

      // Update the price for medium pizzas.
      { update: 0, filter: { size: "medium" },
        updateMods: { $set: { price: 15 } } },

      // Delete the pizza with an _id of 2.
      { delete: 0, filter: { _id: 2 } }
   ],

   // The nsInfo array contains the namespace to apply the
   // previous operations to.
   nsInfo: [
      { ns: "test.pizzas" }  // Namespace ID index is 0.
   ]
} )

----------------------------------------

TITLE: Referencing Write Concern in MongoDB Documentation
DESCRIPTION: This snippet demonstrates how to reference the write concern concept in MongoDB documentation using reStructuredText syntax.

LANGUAGE: restructuredtext
CODE:
:ref:`write-concern <write-concern>`

----------------------------------------

TITLE: MongoDB Query Operation Profile Document
DESCRIPTION: Example profile document showing metrics for a query operation on a collection, including execution stats, locks, and timing information.

LANGUAGE: javascript
CODE:
{
  "op" : "query",
  "ns" : "test.report",
  "command" : {
     "find" : "report",
     "filter" : { "a" : { "$lte" : 500 } },
     "lsid" : {
        "id" : UUID("5ccd5b81-b023-41f3-8959-bf99ed696ce9")
     },
     "$db" : "test"
  },
  "cursorid" : 33629063128,
  "keysExamined" : 101,
  "docsExamined" : 101,
  "fromMultiPlanner" : true,
  "numYield" : 2,
  "nreturned" : 101,
  "planCacheShapeHash" : "811451DD",
  "planCacheKey" : "759981BA",
  "queryFramework" : "classic",
  "locks" : {
     "Global" : {
        "acquireCount" : {
           "r" : NumberLong(3),
           "w" : NumberLong(3)
        }
     },
     "Database" : {
        "acquireCount" : { "r" : NumberLong(3) },
        "acquireWaitCount" : { "r" : NumberLong(1) },
        "timeAcquiringMicros" : { "r" : NumberLong(69130694) }
     },
     "Collection" : {
        "acquireCount" : { "r" : NumberLong(3) }
     }
  },
  "storage" : {
     "data" : {
        "bytesRead" : NumberLong(14736),
        "timeReadingMicros" : NumberLong(17)
     }
  },
  "responseLength" : 1305014,
  "protocol" : "op_msg",
  "millis" : 69132,
  "planningTimeMicros" : 129,
  "planSummary" : "IXSCAN { a: 1, _id: -1 }"
}

----------------------------------------

TITLE: Concatenating Strings with Conditional Separators using $reduce in MongoDB
DESCRIPTION: Demonstrates using $reduce to concatenate an array of strings into a single string, with conditional separators based on position.

LANGUAGE: javascript
CODE:
db.people.aggregate(
   [
     { $match: { "hobbies": { $gt: [ ] } } },
     {
       $project: {
         name: 1,
         bio: {
           $reduce: {
             input: "$hobbies",
             initialValue: "My hobbies include:",
             in: {
               $concat: [
                 "$$value",
                 {
                   $cond: {
                     if: { $eq: [ "$$value", "My hobbies include:" ] },
                     then: " ",
                     else: ", "
                   }
                 },
                 "$$this"
               ]
             }
           }
         }
       }
     }
   ]
)

----------------------------------------

TITLE: Restarting the Balancer in MongoDB Sharded Cluster
DESCRIPTION: This code demonstrates how to restart the balancer in a MongoDB sharded cluster using the sh.startBalancer() method and verify its state using sh.getBalancerState().

LANGUAGE: javascript
CODE:
sh.startBalancer()

sh.getBalancerState()

----------------------------------------

TITLE: Creating ClientEncryption Instance in Python
DESCRIPTION: This snippet illustrates how to create a ClientEncryption instance in Python for MongoDB. It includes the necessary configuration and initialization steps, along with a note about required CodecOptions.

LANGUAGE: python
CODE:
client_encryption = ClientEncryption(
    kms_providers,
    "encryption.__keyVault",
    client,
    CodecOptions(uuid_representation=STANDARD)
)

----------------------------------------

TITLE: Initializing KeyVault and Retrieving Key - MongoDB JavaScript
DESCRIPTION: Example showing how to initialize a KeyVault instance and retrieve a data encryption key using its UUID. This is used in the context of client-side field level encryption.

LANGUAGE: javascript
CODE:
keyVault = encryptedClient.getKeyVault()
keyVault.getKey(UUID("b4b41b33-5c97-412e-a02b-743498346079"))

----------------------------------------

TITLE: List All Search Indexes Example
DESCRIPTION: Demonstrates how to retrieve all Atlas Search indexes on a collection using an empty $listSearchIndexes stage.

LANGUAGE: javascript
CODE:
db.movies.aggregate(
   [
      {
         $listSearchIndexes: { }
      }
   ]
)

----------------------------------------

TITLE: Querying MongoDB Documents with Role-Based Access Control in JavaScript
DESCRIPTION: This code snippet demonstrates the documents visible to a user named Jane who has both 'Sales' and 'Operations' roles in a MongoDB database. It shows how document access is controlled based on the 'allowedRoles' field.

LANGUAGE: javascript
CODE:
[
   {
      _id: 1,
      allowedRoles: [ 'Sales' ],
      comment: 'For sales team',
      yearlyBudget: 17000,
      salesEventsBudget: 1000
   },
   {
      _id: 2,
      allowedRoles: [ 'Operations' ],
      comment: 'For operations team',
      yearlyBudget: 19000,
      cloudBudget: 12000
   }
]

----------------------------------------

TITLE: Querying MongoDB for Exact Subdocument Match in JavaScript
DESCRIPTION: This snippet demonstrates how to query the 'inventory' collection in MongoDB for documents where the 'instock' field exactly matches a subdocument with 'qty' of 5 and 'warehouse' of 'A'.

LANGUAGE: javascript
CODE:
db.inventory.find( { "instock": { qty: 5, warehouse: "A" } } )

----------------------------------------

TITLE: Executing usersInfo Command in MongoDB
DESCRIPTION: This snippet shows the basic syntax for running the usersInfo command in MongoDB. It demonstrates the various optional fields that can be included in the command.

LANGUAGE: javascript
CODE:
db.runCommand(
   {
     usersInfo: <various>,
     showCredentials: <Boolean>,
     showCustomData: <Boolean>,
     showPrivileges: <Boolean>,
     showAuthenticationRestrictions: <Boolean>,
     filter: <document>,
     comment: <any>
   }
)

----------------------------------------

TITLE: Creating Encrypted Collection
DESCRIPTION: Configures and creates a collection with encrypted fields using the generated data encryption keys and encryption schema.

LANGUAGE: javascript
CODE:
const encryptedFields = {
  fields: [{
    path: "encryptedField",
    bsonType: "string",
    keyId: dataKey,
    queries: { "queryType": "equality" }
  }]
};

await client.getCollection("test").createEncryptedCollection(
  "encrypted",
  { "encryptedFields": encryptedFields }
);

LANGUAGE: python
CODE:
encrypted_fields = {
    "fields": [{
        "path": "encryptedField",
        "bsonType": "string",
        "keyId": data_key,
        "queries": {"queryType": "equality"}
    }]
}

client["test"].create_encrypted_collection(
    "encrypted",
    encrypted_fields=encrypted_fields
)

----------------------------------------

TITLE: Stopping MongoDB Balancer - Command Syntax
DESCRIPTION: Syntax for the balancerStop command that accepts an optional maxTimeMS parameter to specify the time limit for disabling the balancer. The command must be run against the admin database on a mongos instance.

LANGUAGE: javascript
CODE:
db.adminCommand( 
   { 
     balancerStop: 1, 
     maxTimeMS: <number> 
   }
)

----------------------------------------

TITLE: Array Update with arrayFilters Example
DESCRIPTION: An example of using findAndModify with arrayFilters to update specific elements in an array.

LANGUAGE: javascript
CODE:
db.runCommand(
   {
     findAndModify: "students",
     query: { grades: { $gte: 100 } },
     update:  { $set: { "grades.$[element]" : 100 } },
     arrayFilters: [ { "element": { $gte: 100 } } ]
   }
)

----------------------------------------

TITLE: MongoDB Aggregation Pipeline with $gt Operator
DESCRIPTION: Example showing how to use $gt operator in a $project stage to compare qty field with value 250. The pipeline creates a new field qtyGt250 containing the comparison result.

LANGUAGE: javascript
CODE:
db.inventory.aggregate(
      [
        {
          $project:
             {
               item: 1,
               qty: 1,
               qtyGt250: { $gt: [ "$qty", 250 ] },
               _id: 0
             }
        }
      ]
   )

----------------------------------------

TITLE: Calculating Effective Interest Rate Using $exp in MongoDB Aggregation
DESCRIPTION: Illustrates an aggregation pipeline that uses the $exp operator to calculate the effective interest rate for continuous compounding. It subtracts 1 from the result of $exp to get the final rate.

LANGUAGE: javascript
CODE:
db.accounts.aggregate( [ { $project: { effectiveRate: { $subtract: [ { $exp: "$interestRate"}, 1 ] } } } ] )

----------------------------------------

TITLE: Basic $split Operator Syntax in MongoDB
DESCRIPTION: Demonstrates the basic syntax of the $split operator in MongoDB aggregation pipeline. Takes a string expression and delimiter as arguments.

LANGUAGE: javascript
CODE:
{ $split: [ <string expression>, <delimiter> ] }

----------------------------------------

TITLE: Count with Index Hint
DESCRIPTION: Counts documents using a specific index hint for query optimization.

LANGUAGE: javascript
CODE:
db.orders.find(
   { ord_dt: { $gt: new Date('01/01/2012') }, status: "D" }
).hint( "status_1" ).count()

----------------------------------------

TITLE: Complex Document Conversion Example
DESCRIPTION: Shows conversion of a document containing nested objects into array format.

LANGUAGE: json
CODE:
{ $objectToArray: { item: "foo", qty: 25, size: { len: 25, w: 10, uom: "cm" } } }

----------------------------------------

TITLE: Querying with $nearSphere using Legacy Coordinates in MongoDB
DESCRIPTION: Shows the syntax for using $nearSphere with legacy coordinate pairs. This query finds documents based on their proximity to a specified point, with optional minimum and maximum distance constraints in radians.

LANGUAGE: javascript
CODE:
{
  $nearSphere: [ <x>, <y> ],
  $minDistance: <distance in radians>,
  $maxDistance: <distance in radians>
}

----------------------------------------

TITLE: Retrieving User Information with db.getUser()
DESCRIPTION: Basic syntax and parameters for the db.getUser() method. Shows the method signature with optional arguments for controlling the output of user information.

LANGUAGE: none
CODE:
db.getUser( "<username>", { 
   showCredentials: <Boolean>,
   showCustomData: <Boolean>,
   showPrivileges: <Boolean>,
   showAuthenticationRestrictions: <Boolean>,
   filter: <document>
} )

----------------------------------------

TITLE: Querying MongoDB Collection with $substrBytes
DESCRIPTION: Example of using $substrBytes to extract year and quarter substrings from a 'quarter' field in an inventory collection.

LANGUAGE: javascript
CODE:
db.inventory.aggregate(
  [
    {
      $project: {
        item: 1,
        yearSubstring: { $substrBytes: [ "$quarter", 0, 2 ] },
        quarterSubtring: { 
          $substrBytes: [ 
            "$quarter", 2, { $subtract: [ { $strLenBytes: "$quarter" }, 2 ] }
          ]
        }
      }
    }
  ]
)

----------------------------------------

TITLE: Inserting Document with Reserved Words as Dollar-Prefixed Fields
DESCRIPTION: Shows how to insert a document using reserved words like $id, $db, and $ref as field names when prefixed with a dollar sign.

LANGUAGE: javascript
CODE:
db.books.insertOne( {
   "$id": "h1961-01",
   "location": {
      "$db": "novels",
      "$ref": "2007042768",
      "$inc": true
} } )

----------------------------------------

TITLE: Adding Multiple Zones to Different Shards in MongoDB
DESCRIPTION: Example demonstrating how to add three different zones (NYC, LAX, NRT) to different shards using sh.addShardToZone().

LANGUAGE: javascript
CODE:
sh.addShardToZone("shard0000", "JFK")
sh.addShardToZone("shard0001", "LAX")
sh.addShardToZone("shard0002", "NRT")

----------------------------------------

TITLE: Complex Grade Calculation Using $isNumber
DESCRIPTION: Demonstrates a complex aggregation pipeline that uses $isNumber to conditionally process grade data and calculate GPAs.

LANGUAGE: javascript
CODE:
db.getSiblingDB("examples").grades.aggregate([
  {
    $addFields: {
      "points" : {
        $cond : {
          if : { $isNumber : "$grade" },
          then: "$grade" ,
          else: {
            $switch : {
              branches: [
                { case: {$eq : ["$grade" , "A"]}, then : 4.0 },
                { case: {$eq : ["$grade" , "B"]}, then : 3.0 },
                { case: {$eq : ["$grade" , "C"]}, then : 2.0 },
                { case: {$eq : ["$grade" , "D"]}, then : 1.0 },
                { case: {$eq : ["$grade" , "F"]}, then : 0.0 }
              ]
            }
          }
        }
      }
    }
  },
  {
    $group : {
      _id : "$student_id",
      GPA : {
        $avg : "$points"
      }
    }
  }
])

----------------------------------------

TITLE: Example dropConnections Usage
DESCRIPTION: Example showing how to use dropConnections to remove connections to a specific host and port, along with the expected command output.

LANGUAGE: javascript
CODE:
db.adminCommand( 
  {
    "dropConnections" : 1,
    "hostAndPort" : [
      "oldhost.example.com:27017"
    ] 
  }
)

LANGUAGE: javascript
CODE:
{
 "ok" : 1,
 "$clusterTime" : {
   "clusterTime" : Timestamp(1551375968, 1),
   "signature" : {
     "hash" : BinData(0,"AAAAAAAAAAAAAAAAAAAAAAAAAAA="),
     "keyId" : NumberLong(0)
   }
 },
 "operationTime" : Timestamp(1551375968, 1)
}

----------------------------------------

TITLE: Using $each with $push in MongoDB
DESCRIPTION: Shows how to use the $each modifier with $push to append multiple values to an array field. This operation adds all values to the array regardless of whether they already exist.

LANGUAGE: javascript
CODE:
{ $push: { <field>: { $each: [ <value1>, <value2> ... ] } } }

----------------------------------------

TITLE: Inserting Encrypted Document with Go
DESCRIPTION: This Go code example demonstrates inserting an encrypted document using MongoDB's Queryable Encryption feature. It uses a pre-configured MongoClient to insert a document into the 'medicalRecords.patients' namespace with encryption applied.

LANGUAGE: go
CODE:
// Code snippet not provided in the given content

----------------------------------------

TITLE: MongoDB Role Update Example
DESCRIPTION: Demonstrates updating the inventoryControl role in the products database with specific privileges and roles. Shows practical usage with write concern.

LANGUAGE: javascript
CODE:
use products
db.updateRole(
    "inventoryControl",
    {
      privileges:
          [
            {
              resource: { db:"products", collection:"clothing" },
              actions: [ "update", "createCollection", "createIndex"]
            }
          ],
      roles:
          [
            {
              role: "read",
              db: "products"
            }
          ]
    },
    { w:"majority" }
)

----------------------------------------

TITLE: Updating MongoDB Documents Based on $gte Comparison in JavaScript
DESCRIPTION: This snippet demonstrates how to use the $gte operator in an update operation. It updates multiple documents in the 'inventory' collection, setting the 'price' field to 9.99 where the 'carrier.fee' is greater than or equal to 2.

LANGUAGE: javascript
CODE:
db.inventory.updateMany(
   { "carrier.fee": { $gte: 2 } }, { $set: { "price": 9.99 } }
)

----------------------------------------

TITLE: Removing Documents with Query and Options in MongoDB
DESCRIPTION: This snippet shows the syntax for the db.collection.remove() method, which can take a query document and optional parameters for fine-tuning the removal operation.

LANGUAGE: javascript
CODE:
db.collection.remove(
    <query>,
    {
      justOne: <boolean>,
      writeConcern: <document>,
      collation: <document>,
      let: <document> // Added in MongoDB 5.0
    }
)

----------------------------------------

TITLE: Adding a Replica Set Shard in MongoDB
DESCRIPTION: This example demonstrates how to add a replica set named 'repl0' as a shard, specifying one member of the replica set with its hostname and port.

LANGUAGE: javascript
CODE:
sh.addShard("repl0/mongodb3.example.net:27327")

----------------------------------------

TITLE: Querying with $near Operator in MongoDB JavaScript
DESCRIPTION: This code snippet represents a query using the $near operator in MongoDB, which was causing a NULL pointer crash in the QueryPlanner::plan function. The issue has been fixed in this version.

LANGUAGE: javascript
CODE:
{$near: /* ... */}

----------------------------------------

TITLE: Aggregation Output Example
DESCRIPTION: Shows the output of the aggregation pipeline where the string UUID has been converted to a proper UUID type.

LANGUAGE: javascript
CODE:
[
   {
      _id: ObjectId('669945ab610b080391a8e2f5'),
      name: 'laptop',
      price: 400,
      UUID: UUID('0e3b9063-8abd-4eb3-9f9f-f4c59fd30a60')
   }
]

----------------------------------------

TITLE: MongoDB FindOne Projection Example
DESCRIPTION: Example showing the structure of a projection document used to specify which fields to return in the query result.

LANGUAGE: javascript
CODE:
{ field1: <value>, field2: <value> ... }

----------------------------------------

TITLE: MongoDB FindOne Projection Example
DESCRIPTION: Example showing the structure of a projection document used to specify which fields to return in the query result.

LANGUAGE: javascript
CODE:
{ field1: <value>, field2: <value> ... }

----------------------------------------

TITLE: Creating Wildcard Index - MongoDB Shell
DESCRIPTION: Command to create a wildcard index on the userMetadata field, which enables querying against any subfield of userMetadata.

LANGUAGE: bash
CODE:
db.userData.createIndex( { "userMetadata.$**" : 1 } )

----------------------------------------

TITLE: MongoDB $not Operator Result Example
DESCRIPTION: Result documents showing the output of the $not operator aggregation.

LANGUAGE: javascript
CODE:
{ "_id" : 1, "item" : "abc1", "result" : false }
{ "_id" : 2, "item" : "abc2", "result" : true }
{ "_id" : 3, "item" : "xyz1", "result" : true }
{ "_id" : 4, "item" : "VWZ1", "result" : false }
{ "_id" : 5, "item" : "VWZ2", "result" : true }

----------------------------------------

TITLE: Retrieving Free Storage Information in MongoDB db.stats()
DESCRIPTION: This example demonstrates how to use the freeStorage parameter to return information on free space allocated to collections. It specifically returns the indexFreeStorageSize in kilobytes.

LANGUAGE: javascript
CODE:
db.stats( { freeStorage: 1, scale: 1024 } ).indexFreeStorageSize

----------------------------------------

TITLE: Querying Non-Existent Fields in MongoDB Shell
DESCRIPTION: Demonstrates how to use the MongoDB shell to find documents where the 'item' field does not exist using the $exists operator.

LANGUAGE: javascript
CODE:
db.inventory.find( { item : { $exists: false } } )

----------------------------------------

TITLE: Dropping MongoDB Index
DESCRIPTION: Removes the original url index from the siteAnalytics collection.

LANGUAGE: javascript
CODE:
db.siteAnalytics.dropIndex( { "url_1" } )

----------------------------------------

TITLE: Sort and Remove Example
DESCRIPTION: An example of using findAndModify to remove a document based on a sort order.

LANGUAGE: javascript
CODE:
db.runCommand(
   {
     findAndModify: "people",
     query: { state: "active" },
     sort: { rating: 1 },
     remove: true
   }
)

----------------------------------------

TITLE: Authenticating User in MongoDB using JavaScript
DESCRIPTION: This code snippet demonstrates how to authenticate a user in MongoDB using the db.auth() method. It takes the username and password as parameters to authenticate the user Michelle.

LANGUAGE: javascript
CODE:
db.auth( "Michelle", "me009" )

----------------------------------------

TITLE: Basic ServerStatus Command Syntax
DESCRIPTION: Basic syntax for running the serverStatus command

LANGUAGE: javascript
CODE:
db.runCommand( 
   { 
     serverStatus: 1 
   } 
)

----------------------------------------

TITLE: Inserting a Document Using db.getCollection() in MongoDB
DESCRIPTION: This example demonstrates how to use db.getCollection() to access the 'auth' collection and insert a document into it. The method is useful for collections whose names might conflict with database shell methods.

LANGUAGE: javascript
CODE:
var authColl = db.getCollection("auth")

authColl.insertOne(
   {
       usrName : "John Doe",
       usrDept : "Sales",
       usrTitle : "Executive Account Manager",
       authLevel : 4,
       authDept : [ "Sales", "Customers"]
   }
)

----------------------------------------

TITLE: Using $month in MongoDB Aggregation Pipeline
DESCRIPTION: Demonstrates how to use the $month operator along with other date operators in a $project stage of an aggregation pipeline to break down a date field into its components.

LANGUAGE: javascript
CODE:
db.sales.aggregate(
   [
     {
       $project:
         {
           year: { $year: "$date" },
           month: { $month: "$date" },
           day: { $dayOfMonth: "$date" },
           hour: { $hour: "$date" },
           minutes: { $minute: "$date" },
           seconds: { $second: "$date" },
           milliseconds: { $millisecond: "$date" },
           dayOfYear: { $dayOfYear: "$date" },
           dayOfWeek: { $dayOfWeek: "$date" },
           week: { $week: "$date" }
         }
     }
   ]
)

----------------------------------------

TITLE: RST Directive Definitions
DESCRIPTION: Sphinx RST directives defining variables and settings for the MongoDB Windows installation documentation

LANGUAGE: rst
CODE:
.. |arrow| unicode:: U+27A4
.. |edition| replace:: Community
.. |distro-name| replace:: Windows
.. |executable-name| replace:: ``mongod.exe``
.. |mdb-download-link| replace:: `MongoDB Download Center <https://www.mongodb.com/try/download/community?tck=docs_server>`__

----------------------------------------

TITLE: Defining $trim Syntax in MongoDB Aggregation
DESCRIPTION: Demonstrates the syntax for using the $trim operator in MongoDB aggregation. The operator takes an input string and optionally a set of characters to trim.

LANGUAGE: javascript
CODE:
{ $trim: { input: <string>,  chars: <string> } }

----------------------------------------

TITLE: Getting KeyVault from Encrypted Client
DESCRIPTION: Example showing how to retrieve the KeyVault object from an encrypted MongoDB client connection that has CSFLE enabled.

LANGUAGE: javascript
CODE:
keyVault = encryptedClient.getKeyVault()

----------------------------------------

TITLE: Creating Zone Ranges for ZIP Codes in MongoDB
DESCRIPTION: Example showing how to create zone ranges for a sharded collection based on ZIP codes using sh.updateZoneKeyRange() method.

LANGUAGE: javascript
CODE:
sh.updateZoneKeyRange("records.users", { zipcode: "10001" }, { zipcode: "10281" }, "NYC")
sh.updateZoneKeyRange("records.users", { zipcode: "11201" }, { zipcode: "11240" }, "NYC")
sh.updateZoneKeyRange("records.users", { zipcode: "94102" }, { zipcode: "94135" }, "SFO")

----------------------------------------

TITLE: Parsing JSON String to BSON Object
DESCRIPTION: Converts a JSON string with Extended JSON type representations back to a BSON object using EJSON.parse().

LANGUAGE: javascript
CODE:
EJSON.parse( <string> )

----------------------------------------

TITLE: Process Limits Checking Function
DESCRIPTION: Bash function to display resource limits for specified processes using the /proc filesystem.

LANGUAGE: bash
CODE:
return-limits(){

     for process in $@; do
          process_pids=`ps -C $process -o pid --no-headers | cut -d " " -f 2`

          if [ -z $@ ]; then
             echo "[no $process running]"
          else
             for pid in $process_pids; do
                   echo "[$process #$pid -- limits]"
                   cat /proc/$pid/limits
             done
          fi

     done

}

----------------------------------------

TITLE: Case-Insensitive $regexFind in MongoDB Aggregation
DESCRIPTION: Shows how to perform a case-insensitive regex search using the 'i' option in $regexFind.

LANGUAGE: javascript
CODE:
db.products.aggregate([
   { $addFields: { returnObject: { $regexFind: { input: "$description", regex: /line/i } } } }
])

----------------------------------------

TITLE: Syntax for $mod Operator in MongoDB Query
DESCRIPTION: Demonstrates the basic syntax for using the $mod operator in a MongoDB query. The operator takes an array with two elements: the divisor and the remainder.

LANGUAGE: javascript
CODE:
{ field: { $mod: [ divisor, remainder ] } }

----------------------------------------

TITLE: Validating MongoDB Collection with Default Settings
DESCRIPTION: Examples of validating a collection named 'myCollection' using default validation settings (full: false).

LANGUAGE: javascript
CODE:
db.myCollection.validate()

LANGUAGE: javascript
CODE:
db.myCollection.validate({ })

LANGUAGE: javascript
CODE:
db.myCollection.validate( { full: false } )

----------------------------------------

TITLE: Calling sh.status() Method in MongoDB
DESCRIPTION: Demonstrates how to call the sh.status() method on a mongos instance to get a sharding status report. The method accepts an optional boolean parameter 'verbose' to control the level of detail in the output.

LANGUAGE: javascript
CODE:
sh.status()

----------------------------------------

TITLE: Basic $queryStats Usage
DESCRIPTION: Example of using $queryStats on the admin database to retrieve query statistics.

LANGUAGE: javascript
CODE:
db.adminCommand( {
   aggregate: 1,
   pipeline: [
      {
         $queryStats: {
            transformIdentifiers: {
               algorithm: <string>,
               hmacKey: <binData> /* subtype 8 - used for sensitive data */
            }
         }
      }
   ],
   cursor: { }
} )

----------------------------------------

TITLE: Querying MongoDB with Projection in Kotlin (Coroutine)
DESCRIPTION: This snippet shows how to query MongoDB with projection using Kotlin coroutines.

LANGUAGE: kotlin
CODE:
// Start Example 45
// End Example 45

----------------------------------------

TITLE: Advanced Grouping with MongoDB Aggregation
DESCRIPTION: Demonstrates complex grouping using $$ROOT variable to group entire documents, followed by adding a calculated field.

LANGUAGE: javascript
CODE:
db.books.aggregate([
   // First Stage
   { 
     $group : { _id : "$author", books: { $push: "$$ROOT" } } 
   },
   // Second Stage
   { 
     $addFields:
       {
         totalCopies : { $sum: "$books.copies" }
       }
   }
 ])

----------------------------------------

TITLE: Using $floor in MongoDB Aggregation Pipeline
DESCRIPTION: Illustrates how to use the $floor operator within a $project stage of an aggregation pipeline. This example calculates the floor value for each document's 'value' field and adds it as a new field 'floorValue'.

LANGUAGE: javascript
CODE:
db.samples.aggregate([
   { $project: { value: 1, floorValue: { $floor: "$value" } } }
])

----------------------------------------

TITLE: Converting BSON Audit Log to Readable Format
DESCRIPTION: Command to convert a BSON audit log file to a readable format using bsondump.

LANGUAGE: bash
CODE:
bsondump data/db/auditLog.bson

----------------------------------------

TITLE: Aggregation Pipeline with $unwind and $sortByCount
DESCRIPTION: Complete example showing how to unwind an array and use $sortByCount to count tag occurrences.

LANGUAGE: javascript
CODE:
db.exhibits.aggregate( [ { $unwind: "$tags" },  { $sortByCount: "$tags" } ] )

----------------------------------------

TITLE: Using $minute in MongoDB Aggregation Pipeline
DESCRIPTION: Shows a complete MongoDB aggregation pipeline that uses $minute along with other date operators to break down a date field into its components.

LANGUAGE: javascript
CODE:
db.sales.aggregate(
   [
     {
       $project:
         {
           year: { $year: "$date" },
           month: { $month: "$date" },
           day: { $dayOfMonth: "$date" },
           hour: { $hour: "$date" },
           minutes: { $minute: "$date" },
           seconds: { $second: "$date" },
           milliseconds: { $millisecond: "$date" },
           dayOfYear: { $dayOfYear: "$date" },
           dayOfWeek: { $dayOfWeek: "$date" },
           week: { $week: "$date" }
         }
     }
   ]
)

----------------------------------------

TITLE: Creating Sample Collection and Indexes in MongoDB
DESCRIPTION: Creates a sample pizzaOrders collection with test data and creates two indexes on orderDate and totalNumber fields.

LANGUAGE: javascript
CODE:
// Create pizzaOrders collection
db.pizzaOrders.insertMany( [
   { _id: 0, type: "pepperoni", totalNumber: 5,
     orderDate: new Date( "2024-01-15T12:00:00Z" ) },
   { _id: 1, type: "cheese", totalNumber: 15,
     orderDate: new Date( "2024-01-23T11:12:32Z" ) },
   { _id: 2, type: "vegan", totalNumber: 20,
     orderDate: new Date( "2024-03-20T10:01:12Z" ) }
] )

// Create ascending index on orderDate field
db.pizzaOrders.createIndex( { orderDate: 1 } )

// Create ascending index on totalNumber field
db.pizzaOrders.createIndex( { totalNumber: 1 } )

----------------------------------------

TITLE: Restarting the Balancer in MongoDB Sharded Cluster
DESCRIPTION: This code demonstrates how to restart the balancer in a MongoDB sharded cluster using sh.startBalancer() and verify its state using sh.getBalancerState().

LANGUAGE: javascript
CODE:
sh.startBalancer()

sh.getBalancerState()

----------------------------------------

TITLE: Connecting to Local Admin Database with Authentication
DESCRIPTION: Shows how to connect to the admin database on a local MongoDB instance with authentication. This example includes a username and password in the connection string.

LANGUAGE: shell
CODE:
mongodb://myDatabaseUser:D1fficultP%40ssw0rd@localhost/admin

----------------------------------------

TITLE: Equivalent SQL Query for MongoDB $ne Operator
DESCRIPTION: The SQL equivalent of the MongoDB $ne query shown above.

LANGUAGE: sql
CODE:
SELECT * FROM INVENTORY WHERE QUANTITIY != 20

----------------------------------------

TITLE: Query Write Operations Waiting for Lock
DESCRIPTION: Example of filtering currentOp results to show only write operations waiting for a lock

LANGUAGE: javascript
CODE:
db.adminCommand(
   {
     currentOp: true,
     "waitingForLock" : true,
     $or: [
        { "op" : { "$in" : [ "insert", "update", "remove" ] } },
        { "command.findandmodify": { $exists: true } }
    ]  
   }
)

----------------------------------------

TITLE: MongoDB $text Operator Rules
DESCRIPTION: Lists the critical rules for using the $text operator in MongoDB aggregation pipelines. The $match stage with $text must be first in the pipeline, $text can only be used once per stage, cannot be used within $or or $not expressions, and requires special handling for score-based sorting.

LANGUAGE: mongodb
CODE:
$text                 // text search operator
$meta                 // used for sorting by text score
$match                // must be first stage with $text
$sort                 // used with $meta for score sorting

----------------------------------------

TITLE: Querying GeoJSON Points with $near in MongoDB
DESCRIPTION: This snippet demonstrates the syntax for using $near with GeoJSON points. It requires a 2dsphere index and allows for optional $maxDistance and $minDistance specifications in meters.

LANGUAGE: javascript
CODE:
{
   <location field>: {
     $near: {
       $geometry: {
          type: "Point" ,
          coordinates: [ <longitude> , <latitude> ]
       },
       $maxDistance: <distance in meters>,
       $minDistance: <distance in meters>
     }
   }
}

----------------------------------------

TITLE: Insert Game Scores Data in MongoDB
DESCRIPTION: Shows how to insert sample game score data into a MongoDB collection for testing $minN functionality.

LANGUAGE: javascript
CODE:
db.gamescores.insertMany([
   { playerId: "PlayerA", gameId: "G1", score: 31 },
   { playerId: "PlayerB", gameId: "G1", score: 33 },
   { playerId: "PlayerC", gameId: "G1", score: 99 },
   { playerId: "PlayerD", gameId: "G1", score: 1 },
   { playerId: "PlayerA", gameId: "G2", score: 10 },
   { playerId: "PlayerB", gameId: "G2", score: 14 },
   { playerId: "PlayerC", gameId: "G2", score: 66 },
   { playerId: "PlayerD", gameId: "G2", score: 80 }
])

----------------------------------------

TITLE: MongoDB Driver Links RST Navigation
DESCRIPTION: ReStructuredText markup defining a wayfinding navigation section with links to MongoDB driver documentation for count operations across different programming languages.

LANGUAGE: rst
CODE:
.. wayfinding:: MongoDB with drivers
   
   .. wayfinding-description::

      .. include:: /includes/wayfinding-description.rst

   .. wayfinding-option:: https://www.mongodb.com/docs/drivers/java/sync/current/usage-examples/count/
      :id: java-sync

   .. wayfinding-option:: https://mongodb.github.io/mongo-java-driver/5.2/apidocs/mongodb-driver-reactivestreams/com/mongodb/reactivestreams/client/MongoCollection.html#estimatedDocumentCount()
      :id: java-rs

   .. wayfinding-option:: https://www.mongodb.com/docs/drivers/csharp/current/fundamentals/crud/read-operations/count/#estimated-count
      :id: csharp

   .. wayfinding-option:: https://mongoc.org/libmongoc/current/mongoc_collection_estimated_document_count.html
      :id: c

   .. wayfinding-option:: https://www.mongodb.com/docs/languages/cpp/cpp-driver/upcoming/read/count/#retrieve-an-estimated-count
      :id: cpp

   .. wayfinding-option:: https://www.mongodb.com/docs/languages/python/pymongo-driver/current/read/count/#retrieve-an-estimated-count
      :id: pymongo

   .. wayfinding-option:: https://www.mongodb.com/docs/drivers/node/current/usage-examples/count/
      :id: nodejs

   .. wayfinding-option:: https://www.mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/count/#estimated-count
      :id: go

   .. wayfinding-option:: https://www.mongodb.com/docs/php-library/current/read/count/#retrieve-an-estimated-count 
      :id: php

   .. wayfinding-option:: https://mongodb.github.io/mongo-java-driver/5.2/apidocs/mongo-scala-driver/org/mongodb/scala/MongoCollection.html#estimatedDocumentCount():org.mongodb.scala.SingleObservable[Long]
      :id: scala
   
   .. wayfinding-option:: https://www.mongodb.com/docs/drivers/kotlin/coroutine/current/usage-examples/count/
      :id: kotlin-coroutine

   .. wayfinding-option:: https://www.mongodb.com/docs/languages/kotlin/kotlin-sync-driver/current/read/count/#retrieve-an-estimated-count
      :id: kotlin-sync

   .. wayfinding-option:: https://www.mongodb.com/docs/mongoid/current/reference/queries/#additional-query-methods
      :id: mongoid

   .. wayfinding-option:: https://www.mongodb.com/docs/drivers/rust/current/usage-examples/count/
      :id: rust

----------------------------------------

TITLE: Configuring tuned/ktune for MongoDB
DESCRIPTION: Important note about the sequence of steps when using tuned or ktune performance optimization tools with MongoDB. The configuration must be done after creating the MongoDB service file.

LANGUAGE: plaintext
CODE:
tuned

LANGUAGE: plaintext
CODE:
ktune

----------------------------------------

TITLE: Restoring MongoDB Backup to Sharded Cluster
DESCRIPTION: This command uses mongorestore to restore a backup to a MongoDB sharded cluster, excluding the config database to prevent overwriting existing cluster configuration.

LANGUAGE: bash
CODE:
mongorestore --nsExclude='config.*' /data/backup

----------------------------------------

TITLE: Defining $or Operator Syntax in MongoDB Aggregation
DESCRIPTION: Demonstrates the basic syntax for using the $or operator in MongoDB aggregation pipelines. The $or operator evaluates one or more expressions and returns true if any of the expressions are true.

LANGUAGE: javascript
CODE:
{ $or: [ <expression1>, <expression2>, ... ] }

----------------------------------------

TITLE: Executing MongoDB Explain Command in AllPlansExecution Mode
DESCRIPTION: Example of running the explain command in allPlansExecution verbosity mode (default) for an update operation. This returns queryPlanner and executionStats for all considered plans.

LANGUAGE: javascript
CODE:
db.runCommand(
   {
     explain: {
        update: "products",
        updates: [
           {
               q: { quantity: 1057, category: "apparel" },
               u: { $set: { reorder: true } }
           }
        ]
     }
   }
)

----------------------------------------

TITLE: MongoDB $dateToParts Operator Syntax
DESCRIPTION: Basic syntax for the $dateToParts operator showing the structure with date, timezone, and iso8601 parameters.

LANGUAGE: javascript
CODE:
{ 
    $dateToParts: {
        'date' : <dateExpression>,
        'timezone' : <timezone>,
        'iso8601' : <boolean>
    }
}

----------------------------------------

TITLE: Using cursor.min() with Compound Index in MongoDB
DESCRIPTION: Demonstrates using cursor.min() with a compound index to limit query results based on multiple fields. The query returns documents at or above the specified index key bound.

LANGUAGE: javascript
CODE:
db.products.find().min( { item: 'apple', type: 'jonagold' } ).hint( { item: 1, type: 1 } )

----------------------------------------

TITLE: Changing Replica Set Member Priority in MongoDB
DESCRIPTION: Illustrates how to change the priority of a replica set member using rs.reconfig(). It retrieves the current configuration, modifies the priority, and applies the new configuration.

LANGUAGE: javascript
CODE:
cfg = rs.conf();
cfg.members[1].priority = 2;
rs.reconfig(cfg);

----------------------------------------

TITLE: MongoDB Aggregation Pipeline Using $year and Other Date Operators
DESCRIPTION: Demonstrates an aggregation pipeline that uses $year along with other date operators to break down the 'date' field into various components such as year, month, day, hour, minutes, seconds, milliseconds, dayOfYear, dayOfWeek, and week.

LANGUAGE: javascript
CODE:
db.sales.aggregate(
  [
    {
      $project:
        {
          year: { $year: "$date" },
          month: { $month: "$date" },
          day: { $dayOfMonth: "$date" },
          hour: { $hour: "$date" },
          minutes: { $minute: "$date" },
          seconds: { $second: "$date" },
          milliseconds: { $millisecond: "$date" },
          dayOfYear: { $dayOfYear: "$date" },
          dayOfWeek: { $dayOfWeek: "$date" },
          week: { $week: "$date" }
        }
    }
  ]
)

----------------------------------------

TITLE: Creating a Partial TTL Index in MongoDB
DESCRIPTION: Creates a partial TTL index on the 'F' field of the 'foo' collection, with a filter expression on the 'D' field and expiration set to 10 seconds.

LANGUAGE: javascript
CODE:
db.foo.createIndex( 
   { F: 1 }, 
   { 
      name: "Partial-TTL-Index", 
      partialFilterExpression: { D : 1 }, 
      expireAfterSeconds: 10 
   }
)

----------------------------------------

TITLE: Unhiding Index by Name
DESCRIPTION: Shows how to unhide a hidden index using the index name.

LANGUAGE: javascript
CODE:
db.restaurants.unhideIndex( "borough_1_ratings_1" );

----------------------------------------

TITLE: Querying Collection Storage Size in MongoDB Shell
DESCRIPTION: Method to retrieve the total allocated storage size in bytes for a MongoDB collection. Returns compressed size when using WiredTiger storage engine with compression enabled. The result may be smaller than dataSize() if compression is used.

LANGUAGE: javascript
CODE:
db.collection.storageSize()

----------------------------------------

TITLE: Sample Artwork Collection Data for MongoDB Aggregation
DESCRIPTION: Provides sample data for an artwork collection used in the $facet aggregation example. Each document represents an artwork with properties like title, artist, year, price, and tags.

LANGUAGE: javascript
CODE:
{ "_id" : 1, "title" : "The Pillars of Society", "artist" : "Grosz", "year" : 1926,
  "price" : NumberDecimal("199.99"),
  "tags" : [ "painting", "satire", "Expressionism", "caricature" ] }
{ "_id" : 2, "title" : "Melancholy III", "artist" : "Munch", "year" : 1902,
  "price" : NumberDecimal("280.00"),
  "tags" : [ "woodcut", "Expressionism" ] }
{ "_id" : 3, "title" : "Dancer", "artist" : "Miro", "year" : 1925,
  "price" : NumberDecimal("76.04"),
  "tags" : [ "oil", "Surrealism", "painting" ] }
{ "_id" : 4, "title" : "The Great Wave off Kanagawa", "artist" : "Hokusai",
  "price" : NumberDecimal("167.30"),
  "tags" : [ "woodblock", "ukiyo-e" ] }
{ "_id" : 5, "title" : "The Persistence of Memory", "artist" : "Dali", "year" : 1931,
  "price" : NumberDecimal("483.00"),
  "tags" : [ "Surrealism", "painting", "oil" ] }
{ "_id" : 6, "title" : "Composition VII", "artist" : "Kandinsky", "year" : 1913,
  "price" : NumberDecimal("385.00"),
  "tags" : [ "oil", "painting", "abstract" ] }
{ "_id" : 7, "title" : "The Scream", "artist" : "Munch", "year" : 1893,
  "tags" : [ "Expressionism", "painting", "oil" ] }
{ "_id" : 8, "title" : "Blue Flower", "artist" : "O'Keefe", "year" : 1918,
  "price" : NumberDecimal("118.42"),
  "tags" : [ "abstract", "painting" ] }

----------------------------------------

TITLE: Sample connPoolStats Command Output
DESCRIPTION: Example output structure of the connPoolStats command, showing various statistics about connection pools, hosts, and replica sets.

LANGUAGE: javascript
CODE:
{
   "numClientConnections" : <num>,
   "numAScopedConnections" : <num>,
   "totalInUse" : <num>,
   "totalAvailable" : <num>,
   "totalLeased" : <num>,
   "totalCreated" : <num>,
   "totalRefreshing" : <num>,
   "replicaSetMatchingStrategy" : <string>,
   "acquisitionWaitTimes" : {
      "(-inf, 0ms)" : { "count" : <num> },
      "[0ms, 50ms)" : { "count" : <num> },
      // ... more time ranges ...
      "[1000ms, inf)" : { "count" : <num> },
      "totalCount" : <num>
   },
   "pools" : {
      // ... pool details ...
   },
   "hosts" : {
      // ... host details ...
   },
   "replicaSets" : {
      // ... replica set details ...
   },
   "ok" : 1,
   "$clusterTime" : {
      "clusterTime" : <timestamp>,
      "signature" : <document>
   },
   "operationTime" : <timestamp>
}

----------------------------------------

TITLE: Installing MongoDB Atlas CLI via Homebrew
DESCRIPTION: Command to install the MongoDB Atlas CLI tool using the Homebrew package manager on macOS.

LANGUAGE: bash
CODE:
brew install mongodb-atlas-cli

----------------------------------------

TITLE: Checking if Collections are Capped in MongoDB
DESCRIPTION: This snippet demonstrates how to use the isCapped() method to check if collections are capped. It shows the method being applied to both a non-capped and a capped collection, returning boolean results.

LANGUAGE: javascript
CODE:
db.nonCappedCollection1.isCapped()

db.cappedCollection1.isCapped()

----------------------------------------

TITLE: MongoDB Add Elements at Array Start
DESCRIPTION: Example showing how to add multiple elements at the beginning of an array using $position: 0

LANGUAGE: javascript
CODE:
db.students.insertOne( { "_id" : 1, "scores" : [ 100 ] } )

LANGUAGE: javascript
CODE:
db.students.updateOne(
   { _id: 1 },
   {
     $push: {
        scores: {
           $each: [ 50, 60, 70 ],
           $position: 0
        }
     }
   }
)

----------------------------------------

TITLE: Using allowPartialResults() with MongoDB find() in JavaScript
DESCRIPTION: This snippet demonstrates the syntax for using the allowPartialResults() method with a MongoDB find() operation. It allows the query to return partial results from available shards in a sharded collection, even if some shards are unavailable.

LANGUAGE: javascript
CODE:
db.collection.find(<query>, <projection>).allowPartialResults()

----------------------------------------

TITLE: Deleting Multiple Documents in MongoDB using Scala Driver
DESCRIPTION: This snippet demonstrates how to delete multiple documents using the MongoDB Scala driver. The actual code is not provided in the snippet, but it references an external file.

LANGUAGE: scala
CODE:
// Code is referenced from an external file:
// /driver-examples/DocumentationExampleSpec.scala

----------------------------------------

TITLE: Defining GridFS Chunks Collection Schema in MongoDB
DESCRIPTION: Schema definition for the chunks collection that stores binary file chunks in GridFS. Each document represents a distinct chunk of a file with fields for chunk identification, sequencing and binary data.

LANGUAGE: javascript
CODE:
{
  "_id" : <ObjectId>,
  "files_id" : <ObjectId>,
  "n" : <num>,
  "data" : <binary>
}

----------------------------------------

TITLE: Specifying MongoDB Hello Command in BSON
DESCRIPTION: This snippet demonstrates how to construct a BSON document to specify the 'hello' command in MongoDB.

LANGUAGE: javascript
CODE:
{ hello: 1 }

----------------------------------------

TITLE: Basic $toUUID Syntax
DESCRIPTION: Shows the basic syntax for using the $toUUID operator in MongoDB aggregation pipeline.

LANGUAGE: javascript
CODE:
{
   $toUUID: <expression>
}

----------------------------------------

TITLE: Basic Sort Document Structure
DESCRIPTION: Shows the basic structure of a sort document with field and value pair.

LANGUAGE: javascript
CODE:
{ field: value }

----------------------------------------

TITLE: Using $setDifference in MongoDB Aggregation Pipeline
DESCRIPTION: Demonstrates the use of $setDifference operator in an aggregation pipeline. It projects the original fields and a new field 'inBOnly' that contains elements present in flowerFieldB but not in flowerFieldA.

LANGUAGE: javascript
CODE:
db.flowers.aggregate(
   [
     { $project: { flowerFieldA: 1, flowerFieldB: 1, inBOnly: { $setDifference: [ "$flowerFieldB", "$flowerFieldA" ] }, _id: 0 } }
   ]
)

----------------------------------------

TITLE: Using $setDifference in MongoDB Aggregation Pipeline
DESCRIPTION: Demonstrates the use of $setDifference operator in an aggregation pipeline. It projects the original fields and a new field 'inBOnly' that contains elements present in flowerFieldB but not in flowerFieldA.

LANGUAGE: javascript
CODE:
db.flowers.aggregate(
   [
     { $project: { flowerFieldA: 1, flowerFieldB: 1, inBOnly: { $setDifference: [ "$flowerFieldB", "$flowerFieldA" ] }, _id: 0 } }
   ]
)

----------------------------------------

TITLE: Using $toDecimal in MongoDB Aggregation Pipeline
DESCRIPTION: Demonstrates a complete aggregation pipeline that uses $toDecimal to convert prices to decimal type, $toInt to convert quantities to integer type, and calculates the total price.

LANGUAGE: javascript
CODE:
// Define stage to add convertedPrice and convertedQty fields with the converted price and qty values

priceQtyConversionStage = { 
   $addFields: { 
      convertedPrice: { $toDecimal: "$price" },
      convertedQty: { $toInt: "$qty" },
   }
};

// Define stage to calculate total price by multiplying convertedPrice and convertedQty fields 


totalPriceCalculationStage = { 
   $project: { item: 1, totalPrice: { $multiply: [ "$convertedPrice", "$convertedQty" ] } }
};

db.orders.aggregate( [
   priceQtyConversionStage,
   totalPriceCalculationStage
] )

----------------------------------------

TITLE: Example Cluster Resource with Action in MongoDB
DESCRIPTION: Example showing how to grant a shutdown action on the cluster resource.

LANGUAGE: javascript
CODE:
{ resource: { cluster : true }, actions: [ "shutdown" ] }

----------------------------------------

TITLE: Ranking Documents by Date Field
DESCRIPTION: Example demonstrating how to rank cake sales by order date within each state partition using $setWindowFields and $rank operator.

LANGUAGE: javascript
CODE:
db.cakeSales.aggregate( [
   {
      $setWindowFields: {
         partitionBy: "$state",
         sortBy: { orderDate: 1 },
         output: {
            rankOrderDateForState: {
               $rank: {}
            }
         }
      }
   }
] )

----------------------------------------

TITLE: Syntax for $asinh Aggregation Operator in MongoDB
DESCRIPTION: Demonstrates the basic syntax for using the $asinh operator in a MongoDB aggregation pipeline. The operator takes an expression that resolves to a number and returns the inverse hyperbolic sine of that value.

LANGUAGE: javascript
CODE:
{ $asinh: <expression> }

----------------------------------------

TITLE: Unsuccessful Document Insertion Without db.getCollection() in MongoDB
DESCRIPTION: This example shows an unsuccessful attempt to insert a document into the 'auth' collection without using db.getCollection(). It results in an error because db.auth is a method and doesn't have an insertOne function.

LANGUAGE: javascript
CODE:
db.auth.insertOne(
   {
       usrName : "John Doe",
       usrDept : "Sales",
       usrTitle : "Executive Account Manager",
       authLevel : 4,
       authDept : [ "Sales", "Customers"]
   }
)

----------------------------------------

TITLE: Printing Database Statistics in MongoDB using JavaScript
DESCRIPTION: Script to iterate through all databases and print their statistics using the db.stats() command.

LANGUAGE: javascript
CODE:
db.adminCommand("listDatabases").databases.forEach(function (d) {
   mdb = db.getSiblingDB(d.name);
   printjson(mdb.stats());
})

----------------------------------------

TITLE: Specifying Read Concern Level in MongoDB Query
DESCRIPTION: This snippet demonstrates how to specify a read concern level as an option in a MongoDB query. It shows the general syntax for setting the read concern option.

LANGUAGE: javascript
CODE:
readConcern: { level: <level> }

----------------------------------------

TITLE: Starting a MongoDB Stream Processor
DESCRIPTION: The sp.processor.start() method is used to start a named Stream Processor. It takes no arguments and can only be used on processors in a STOPPED state. The user must have the atlasAdmin role to execute this command.

LANGUAGE: json
CODE:
sp.processor.start()

----------------------------------------

TITLE: Enable Instance-Wide Profiling via Command Line
DESCRIPTION: Starts mongod with profiling enabled for all databases with specific thresholds and sample rate

LANGUAGE: bash
CODE:
mongod --profile 1 --slowms 15 --slowOpSampleRate 0.5

----------------------------------------

TITLE: Executing Find Operation with Snapshot Read Concern and atClusterTime in MongoDB
DESCRIPTION: This snippet demonstrates how to perform a find operation using read concern "snapshot" and specifying a timestamp with atClusterTime. It queries the "restaurants" collection for a document with _id of 5, using a snapshot from the specified cluster time.

LANGUAGE: javascript
CODE:
db.runCommand( {
    find: "restaurants",
    filter: { _id: 5 },
    readConcern: {
        level: "snapshot",
        atClusterTime: Timestamp(1613577600, 1)
    },
} )

----------------------------------------

TITLE: Adding Milliseconds to Date in MongoDB
DESCRIPTION: Shows how to use $add to perform date arithmetic by adding milliseconds (3 days) to a date field.

LANGUAGE: javascript
CODE:
db.sales.aggregate([
  { $project: { item: 1, billing_date: { $add: [ "$date", 3*24*60*60000 ] } } }
])

----------------------------------------

TITLE: Defining $minN Operator Syntax in MongoDB
DESCRIPTION: Shows the basic syntax structure for the $minN operator which requires 'n' (number of elements to return) and 'input' (source array) parameters.

LANGUAGE: javascript
CODE:
{ $minN: { n: <expression>, input: <expression> } }

----------------------------------------

TITLE: Results of $toUpper MongoDB Aggregation
DESCRIPTION: Displays the expected results after applying the $toUpper operator to the 'item' and 'description' fields in the aggregation pipeline. Note that null values are converted to empty strings.

LANGUAGE: javascript
CODE:
{ "_id" : 1, "item" : "ABC1", "description" : "PRODUCT 1" }
{ "_id" : 2, "item" : "ABC2", "description" : "PRODUCT 2" }
{ "_id" : 3, "item" : "XYZ1", "description" : "" }

----------------------------------------

TITLE: Change Stream with Full Document Update Lookup in MongoDB
DESCRIPTION: This example shows how to open a change stream cursor with the 'fullDocument' option set to 'updateLookup', which provides the full updated document for update operations.

LANGUAGE: javascript
CODE:
watchCursor = db.getSiblingDB("data").sensors.watch(
   [],
   { fullDocument : "updateLookup" }
)

while (!watchCursor.isClosed()) {
  let next = watchCursor.tryNext()
  while (next !== null) {
    printjson(next);
    next = watchCursor.tryNext()
  }
}

----------------------------------------

TITLE: Calculating pH Values Using $log10
DESCRIPTION: Demonstrates using $log10 in an aggregation pipeline to calculate pH values from H3O concentrations. The calculation multiplies the log10 of H3O by -1 to get the pH value.

LANGUAGE: javascript
CODE:
db.samples.aggregate( [ 
   { $project: { pH: { $multiply: [ -1, { $log10: "$H3O" } ] } } }
] )

----------------------------------------

TITLE: Multiline Regex Matching with $regexMatch in MongoDB
DESCRIPTION: Shows how to use the 'm' option for multiline regex matching, along with the 'i' option for case-insensitivity.

LANGUAGE: javascript
CODE:
db.products.aggregate([
   { $addFields: { result: { $regexMatch: { input: "$description", regex: /^s/im } } } }
])

----------------------------------------

TITLE: Executing dropAllRolesFromDatabase Command in MongoDB
DESCRIPTION: This snippet demonstrates the syntax for running the dropAllRolesFromDatabase command. It specifies the command name, write concern, and an optional comment field.

LANGUAGE: javascript
CODE:
db.runCommand(
   {
     dropAllRolesFromDatabase: 1,
     writeConcern: { <write concern> },
     comment: <any>
   }
)

----------------------------------------

TITLE: Updating with Aggregation Pipeline
DESCRIPTION: An example of using an aggregation pipeline to perform more complex updates.

LANGUAGE: javascript
CODE:
db.students.updateMany(
   { },
   [
      { $set: { comments: [ "$commentsSemester1", "$commentsSemester2" ], lastUpdate: "$$NOW" } },
      { $unset: [ "commentsSemester1", "commentsSemester2" ] }
   ]
)

----------------------------------------

TITLE: Basic $degreesToRadians Syntax in MongoDB
DESCRIPTION: Demonstrates the basic syntax for the $degreesToRadians operator in MongoDB aggregation framework.

LANGUAGE: javascript
CODE:
{ $degreesToRadians: <expression> }

----------------------------------------

TITLE: Performing BSON Conformance Checks During MongoDB Collection Validation
DESCRIPTION: Example of performing additional BSON conformance checks on a collection named 'myCollection' by specifying checkBSONConformance: true.

LANGUAGE: javascript
CODE:
db.myCollection.validate( { checkBSONConformance: true } )

----------------------------------------

TITLE: Specifying AWS CMK Information in Go
DESCRIPTION: This code demonstrates how to specify the AWS Customer Master Key (CMK) information in Go. It sets the key ARN and the AWS region for the CMK.

LANGUAGE: go
CODE:
dataKeyOpts := options.DataKey().SetMasterKey(bson.M{
    "key":    "<Your AWS ARN>",
    "region": "<Your AWS Region>",
})

----------------------------------------

TITLE: MongoDB Compass Array Query Filter
DESCRIPTION: Demonstrates the query filter syntax for MongoDB Compass to find documents where the instock array contains elements matching multiple criteria

LANGUAGE: javascript
CODE:
{ "instock": { $elemMatch: { qty: 5, warehouse: "A" } } }

----------------------------------------

TITLE: Using $avg in $project Stage with MongoDB Aggregation
DESCRIPTION: This example shows how to use the $avg operator in the $project stage of a MongoDB aggregation pipeline. It calculates average quiz scores, lab scores, and exam scores for student documents.

LANGUAGE: javascript
CODE:
db.students.aggregate([
   { $project: { quizAvg: { $avg: "$quizzes"}, labAvg: { $avg: "$labs" }, examAvg: { $avg: [ "$final", "$midterm" ] } } }
])

----------------------------------------

TITLE: Comparing Index Performance in MongoDB
DESCRIPTION: Creates two compound indexes and compares their performance for a specific query using hint() and explain().

LANGUAGE: javascript
CODE:
db.inventory.createIndex( { quantity: 1, type: 1 } )
db.inventory.createIndex( { type: 1, quantity: 1 } )

LANGUAGE: javascript
CODE:
db.inventory.find(
   { quantity: { $gte: 100, $lte: 300 }, type: "food" }
).hint({ quantity: 1, type: 1 }).explain("executionStats")

LANGUAGE: javascript
CODE:
db.inventory.find(
   { quantity: { $gte: 100, $lte: 300 }, type: "food" }
).hint({ type: 1, quantity: 1 }).explain("executionStats")

----------------------------------------

TITLE: Setting MongoDB Clustered Index Name
DESCRIPTION: Specifies the name for the clustered index using a placeholder variable.

LANGUAGE: javascript
CODE:
|clustered-index-name|

----------------------------------------

TITLE: Inserting Document with Embedded Fields in MongoDB
DESCRIPTION: This snippet shows how to insert a document with an embedded 'user' object into the 'userdata' collection. It demonstrates the structure for documents with nested fields.

LANGUAGE: javascript
CODE:
db.userdata.insertOne(
   { _id: 1, user: { login: "tester" } }
)

----------------------------------------

TITLE: Shutting Down MongoDB Server
DESCRIPTION: Command to properly shutdown a MongoDB server instance using mongosh shell

LANGUAGE: javascript
CODE:
db.getSiblingDB('admin').shutdownServer()

----------------------------------------

TITLE: Configuring TCP Fast Open
DESCRIPTION: Sets up TCP Fast Open settings for inbound connections

LANGUAGE: bash
CODE:
mongod --setParameter tcpFastOpenServer=true

----------------------------------------

TITLE: Retrieving KeyVault Object in MongoDB
DESCRIPTION: Basic syntax for retrieving the KeyVault object from a MongoDB database connection. This object provides access to various data encryption key management methods.

LANGUAGE: javascript
CODE:
keyVault = db.getMongo().getKeyVault();

----------------------------------------

TITLE: Counting Weeks per Month with Different Start Days Using $dateDiff in MongoDB
DESCRIPTION: Demonstrates using $dateDiff in a MongoDB aggregation pipeline to count weeks per month with different start-of-week settings. It shows how changing the startOfWeek parameter affects the week count.

LANGUAGE: javascript
CODE:
db.months.aggregate(
   [
      {
         $project:
            { 
               wks_default:
                  {
                     $dateDiff:
                        { 
                           startDate: "$start",  
                           endDate: "$end", 
                           unit: "week"
                        }
                  }, 
               wks_monday:
                  {
                     $dateDiff:
                        { 
                           startDate: "$start",
                           endDate: "$end", 
                           unit: "week", 
                           startOfWeek: "Monday"
                        }
                  },
               wks_friday:
                  {
                     $dateDiff:
                        { 
                           startDate: "$start",
                           endDate: "$end",
                           unit: "week",
                           startOfWeek: "fri" 
                        }
                  },
               _id: 0 
            }
       }
   ]
 )

----------------------------------------

TITLE: Specifying MongoDB Query Filter Document
DESCRIPTION: This code snippet demonstrates how to create a query filter document in MongoDB. It uses query operators to define search conditions for querying the database.

LANGUAGE: json
CODE:
{
  "cuisine": "Italian",
  "borough": "Manhattan",
  "grades.grade": "A"
}

----------------------------------------

TITLE: Adding Values to Array Elements Using $map
DESCRIPTION: Example showing how to use $map to increment each element in an array by 2. Includes data insertion and aggregation pipeline.

LANGUAGE: javascript
CODE:
db.grades.insertMany( [
  { quizzes: [ 5, 6, 7 ] },
  { quizzes: [ ] },
  { quizzes: [ 3, 8, 9 ] }
] )

LANGUAGE: javascript
CODE:
db.grades.aggregate( [
   {
      $project: {
         adjustedGrades: {
           $map: {
             input: "$quizzes",
             as: "grade",
             in: { $add: [ "$$grade", 2 ] }
           }
         }
      }
   }
 ] )

----------------------------------------

TITLE: Initializing MongoDB Cart Collection with Sample Data
DESCRIPTION: This snippet demonstrates how to insert sample cart data into a MongoDB collection. Each document contains a cart ID, last change timestamp, and a list of products.

LANGUAGE: javascript
CODE:
db.carts.insert( { cartID: 100, lastChange: new ISODate(), products: [ "soap", "sugar", "milk" ] })
db.carts.insert( { cartID: 101, lastChange: new ISODate(), products: [ "milk", "bread", "eggs" ] } ) 
db.carts.insert( { cartID: 102, lastChange: new ISODate(), products: [ "sugar", "flour", "eggs" ] } )

----------------------------------------

TITLE: Specifying Collection in Database Resource in MongoDB
DESCRIPTION: Example showing how to specify a particular collection within a specific database as a resource.

LANGUAGE: javascript
CODE:
{ db: "products", collection: "inventory" }

----------------------------------------

TITLE: Defining $strLenBytes Operator in MongoDB Aggregation
DESCRIPTION: Shows the syntax for using the $strLenBytes operator in a MongoDB aggregation pipeline. The operator takes a string expression as its argument.

LANGUAGE: javascript
CODE:
{ $strLenBytes: <string expression> }

----------------------------------------

TITLE: Basic $getField Syntax in MongoDB
DESCRIPTION: Demonstrates the standard and shorthand syntax for the $getField operator. The operator accepts a field name and optional input object to retrieve field values.

LANGUAGE: javascript
CODE:
{ 
  $getField: {
    field: <String>,
    input: <Object> 
  }
}

LANGUAGE: javascript
CODE:
{ 
  $getField: <String>
}

----------------------------------------

TITLE: Deleting a Search Index from a MongoDB Collection
DESCRIPTION: This example demonstrates how to delete a search index named 'searchIndex01' from the 'movies' collection using the dropSearchIndex() method.

LANGUAGE: javascript
CODE:
db.movies.dropSearchIndex("searchIndex01")

----------------------------------------

TITLE: Setting Read Concern for MongoDB Query
DESCRIPTION: Basic syntax for applying a read concern level to a MongoDB find operation using the cursor.readConcern() method. The method takes a single string parameter specifying the desired read concern level.

LANGUAGE: javascript
CODE:
db.collection.find().readConcern(<level>)

----------------------------------------

TITLE: Result of $hour Aggregation in MongoDB
DESCRIPTION: Shows the output of the aggregation pipeline that uses $hour and other date operators to extract various components of the date field.

LANGUAGE: javascript
CODE:
{
  "_id" : 1,
  "year" : 2014,
  "month" : 1,
  "day" : 1,
  "hour" : 8,
  "minutes" : 15,
  "seconds" : 39,
  "milliseconds" : 736,
  "dayOfYear" : 1,
  "dayOfWeek" : 4,
  "week" : 0
}

----------------------------------------

TITLE: Disabling Auto-Merger for MongoDB Collection
DESCRIPTION: Example showing how to disable the auto-merger functionality for a specific collection.

LANGUAGE: javascript
CODE:
db.adminCommand( {
   configureCollectionBalancing: "test.students",
   enableAutoMerger: false
} )

----------------------------------------

TITLE: Calculate Angle in Degrees Using $acos
DESCRIPTION: Aggregation pipeline that calculates an angle using $acos and converts the result from radians to degrees.

LANGUAGE: bash
CODE:
db.trigonometry.aggregate([
  { 
    $addFields : {
      "angle_a" : {
        $radiansToDegrees : {
          $acos : {
            $divide : [ "$side_b", "$hypotenuse" ]
          }
        }
      }
    }
  }
])

----------------------------------------

TITLE: Basic $type Operator Syntax
DESCRIPTION: Shows the basic syntax for using the $type operator in MongoDB aggregation pipeline.

LANGUAGE: javascript
CODE:
{ $type: <expression> }

----------------------------------------

TITLE: Using $reverseArray in MongoDB Aggregation Pipeline
DESCRIPTION: Illustrates how to use the $reverseArray operator in a MongoDB aggregation pipeline. This example projects the 'name' field and reverses the 'favorites' array for each document in the 'users' collection.

LANGUAGE: javascript
CODE:
db.users.aggregate([
   {
     $project:
      {
         name: 1,
         reverseFavorites: { $reverseArray: "$favorites" }
      }
   }
])

----------------------------------------

TITLE: Executing sh.balancerCollectionStatus() in MongoDB Shell
DESCRIPTION: Syntax for calling the sh.balancerCollectionStatus() method with a namespace parameter. This method returns information about the balance status of chunks in a sharded collection.

LANGUAGE: javascript
CODE:
sh.balancerCollectionStatus( <namespace> )

----------------------------------------

TITLE: Syntax for MongoDB $ne Operator
DESCRIPTION: The basic syntax for using the $ne operator in MongoDB queries.

LANGUAGE: javascript
CODE:
{ field: { $ne: value } }

----------------------------------------

TITLE: Complex Document Transformation
DESCRIPTION: Advanced example showing how to transform sales data using $replaceWith with calculated fields.

LANGUAGE: javascript
CODE:
db.sales.aggregate([
   { $match: { status: "C" } },
   { $replaceWith: { _id: "$_id", item: "$item", amount: { $multiply: [ "$price", "$quantity"]}, status: "Complete", asofDate: "$$NOW" } }
])

----------------------------------------

TITLE: Implementing Retry Logic for MongoDB Transactions
DESCRIPTION: This code defines functions to handle retrying transactions in case of transient errors and unknown commit results.

LANGUAGE: javascript
CODE:
function runTransactionWithRetry(txnFunc, session) {
    while (true) {
        try {
            txnFunc(session);  // performs transaction
            break;
        } catch (error) {
            // If transient error, retry the whole transaction
            if (error?.errorLabels?.includes("TransientTransactionError")  ) {
                print("TransientTransactionError, retrying transaction ...");
                continue;
            } else {
                throw error;
            }
        }
    }   
}

function commitWithRetry(session) {
    while (true) {
        try {
            session.commitTransaction(); // Uses write concern set at transaction start.
            print("Transaction committed.");
            break;
        } catch (error) {
            // Can retry commit
            if (error?.errorLabels?.includes("UnknownTransactionCommitResult") ) {
                print("UnknownTransactionCommitResult, retrying commit operation ...");
                continue;
            } else {
                print("Error during commit ...");
                throw error;
            }
       }
    }
}

----------------------------------------

TITLE: Basic MongoDB noCursorTimeout Usage
DESCRIPTION: Basic syntax for using noCursorTimeout with a find operation to prevent automatic cursor closure.

LANGUAGE: javascript
CODE:
db.collection.find(<query>).noCursorTimeout()

----------------------------------------

TITLE: Dense Ranking by Order Date Partitioned by State
DESCRIPTION: Example demonstrating $denseRank usage with date fields to rank cake sales by order date within state partitions.

LANGUAGE: javascript
CODE:
db.cakeSales.aggregate( [
   {
      $setWindowFields: {
         partitionBy: "$state",
         sortBy: { orderDate: 1 },
         output: {
            denseRankOrderDateForState: {
               $denseRank: {}
            }
         }
      }
   }
] )

----------------------------------------

TITLE: Inserting a Single Document with bulkWrite() in MongoDB
DESCRIPTION: Demonstrates how to use the insertOne operation within a bulkWrite() call to insert a single document into a collection.

LANGUAGE: javascript
CODE:
db.collection.bulkWrite( [
   { insertOne : { "document" : <document> } }
] )

----------------------------------------

TITLE: Defining Version and Series Variables in reStructuredText for MongoDB 4.2 Documentation
DESCRIPTION: This snippet defines reStructuredText replacement variables for MongoDB version numbers and series names. It includes references to the current version (4.2), previous versions (4.0 and 3.6), and related documentation links.

LANGUAGE: reStructuredText
CODE:
.. |newversion| replace:: 4.2
.. |newseries| replace:: 4.2-series
.. |oldversion| replace:: 4.0
.. |oldseries| replace:: 4.0-series
.. |olderseries| replace:: 3.6-series
.. |compatibility| replace:: 4.2 Compatibility Notes
.. |upgradefirst| replace:: :ref:`upgrade first to 4.0 <4.0-upgrade>`
.. |downgradepath| replace:: Once upgraded to |newversion|, if you need to downgrade, we recommend |downgrading| to the latest patch release of |downgradeversion|.
.. |features| replace:: features 
.. |downgradeversion| replace:: 4.0

.. |installationdoc| replace:: :ref:`4.2 installation instructions <tutorial-installation>`

----------------------------------------

TITLE: Specifying Read Preference Mode in MongoDB Query
DESCRIPTION: This example demonstrates how to use the readPref() method to target a read operation to a secondary member of a MongoDB replica set.

LANGUAGE: javascript
CODE:
db.collection.find({ }).readPref( "secondary")

----------------------------------------

TITLE: Defining and Testing Reduce Function for Object Aggregation in JavaScript
DESCRIPTION: This snippet defines a reduce function that aggregates an array of objects with count and qty fields. It demonstrates how to verify that the function returns the correct output type and structure.

LANGUAGE: javascript
CODE:
var reduceFunction2 = function(keySKU, valuesCountObjects) {
    reducedValue = { count: 0, qty: 0 };

    for (var idx = 0; idx < valuesCountObjects.length; idx++) {
        reducedValue.count += valuesCountObjects[idx].count;
        reducedValue.qty += valuesCountObjects[idx].qty;
    }

    return reducedValue;
};

var myTestObjects = [
    { count: 1, qty: 5 },
    { count: 2, qty: 10 },
    { count: 3, qty: 15 }
];

reduceFunction2('myKey', myTestObjects);

{ "count" : 6, "qty" : 30 }

----------------------------------------

TITLE: Using Variables in 'let' Option in MongoDB Find
DESCRIPTION: Defines a targetFlavor variable in let and uses it to retrieve the chocolate cake flavor.

LANGUAGE: javascript
CODE:
db.cakeFlavors.find(
   { $expr: { $eq: [ "$flavor", "$$targetFlavor" ] } },
   { _id: 0 },
   { let : { targetFlavor: "chocolate" }
} )

----------------------------------------

TITLE: Defining Standard Message Header Structure in C
DESCRIPTION: Defines the structure of the standard message header used in MongoDB wire protocol messages. It includes fields for message length, request ID, response ID, and opcode.

LANGUAGE: c
CODE:
struct MsgHeader {
    int32   messageLength; // total message size, including this
    int32   requestID;     // identifier for this message
    int32   responseTo;    // requestID from the original request
                           //   (used in responses from the database)
    int32   opCode;        // message type
}

----------------------------------------

TITLE: Basic collMod Command Syntax
DESCRIPTION: Basic syntax for running the collMod command to modify collection options

LANGUAGE: javascript
CODE:
db.runCommand( 
   { 
     collMod: <collection or view>, 
     <option1>: <value1>, 
     <option2>: <value2>,
     ... 
   } 
)

----------------------------------------

TITLE: Collection Insert Example
DESCRIPTION: Example showing how to insert sample documents into a collection for demonstrating $replaceWith functionality.

LANGUAGE: javascript
CODE:
db.collection.insertMany([
   { "_id": 1, "name" : { "first" : "John", "last" : "Backus" } },
   { "_id": 2, "name" : { "first" : "John", "last" : "McCarthy" } },
   { "_id": 3, "name": { "first" : "Grace", "last" : "Hopper" } },
   { "_id": 4, "firstname": "Ole-Johan", "lastname" : "Dahl" },
])

----------------------------------------

TITLE: Executing dropRole Command in MongoDB
DESCRIPTION: This snippet demonstrates the syntax for running the dropRole command in MongoDB. It includes the required fields and optional parameters such as writeConcern and comment.

LANGUAGE: javascript
CODE:
db.runCommand(
   {
     dropRole: "<role>",
     writeConcern: { <write concern> },
     comment: <any>
   }
)

----------------------------------------

TITLE: Rounding to Whole Numbers
DESCRIPTION: Aggregation pipeline that rounds values to whole numbers

LANGUAGE: javascript
CODE:
db.samples.aggregate([
   { $project: { roundedValue: { $round: [ "$value", 0 ] } } }
])

----------------------------------------

TITLE: User Roles After grantRolesToUser Execution
DESCRIPTION: This snippet shows the updated roles of the user 'accountUser01' after executing the grantRolesToUser command, including the newly granted roles.

LANGUAGE: javascript
CODE:
"roles" : [
    { "role" : "assetsReader",
      "db" : "assets"
    },
    { "role" : "read",
      "db" : "stock"
    },
    { "role" : "readWrite",
      "db" : "products"
    }
]

----------------------------------------

TITLE: Configuring KMIP TLS Options in Java
DESCRIPTION: Java configuration for KMIP TLS certificates using virtual machine options for keystore and truststore. Alternatively can use SSLContext through kmsProviderSslContextMap method.



----------------------------------------

TITLE: Creating a Compound Multikey Index in MongoDB
DESCRIPTION: Example of creating a compound multikey index on the 'event' and 'name' fields. This index is multikey because the 'event' field contains array values.

LANGUAGE: javascript
CODE:
db.matches.createIndex( { event: 1, name: 1 } )

----------------------------------------

TITLE: List Sampled Queries for All Collections
DESCRIPTION: Example aggregation operation that lists all sampled queries across all collections in a replica set.

LANGUAGE: javascript
CODE:
db.aggregate( [  { $listSampledQueries: {  } } ] )

----------------------------------------

TITLE: Complex $isArray Usage with Conditional Array Concatenation
DESCRIPTION: Demonstrates using $isArray with $and and $cond operators to check multiple fields and concatenate arrays conditionally.

LANGUAGE: javascript
CODE:
db.warehouses.aggregate( [
   { $project:
      { items: 
          { $cond:
            {
              if: { $and: [ { $isArray: "$instock" },
                            { $isArray: "$ordered" } 
                          ] },
              then: { $concatArrays: [ "$instock", "$ordered" ] },
              else: "One or more fields is not an array."
            }
          }
      }
   }
] )

----------------------------------------

TITLE: Checking Minimum Oplog Retention Period in MongoDB
DESCRIPTION: This snippet demonstrates how to check the current minimum oplog retention period using the db.serverStatus() method in MongoDB.

LANGUAGE: javascript
CODE:
db.getSiblingDB("admin").serverStatus().oplogTruncation.oplogMinRetentionHours

----------------------------------------

TITLE: Basic $round Syntax
DESCRIPTION: Demonstrates the basic syntax for the $round operator in MongoDB aggregation pipeline.

LANGUAGE: javascript
CODE:
{ $round : [ <number>, <place> ] }

----------------------------------------

TITLE: Enabling Balancing for MongoDB Sharded Collection
DESCRIPTION: Enables the balancer for the specified namespace of the sharded collection. This method takes a single parameter 'namespace' of type string, which represents the namespace of the collection. It's important to note that this method only enables balancing and does not start the balancing process immediately.

LANGUAGE: javascript
CODE:
sh.enableBalancing(namespace)

----------------------------------------

TITLE: MongoDB Collection Initialization for $toDate Example
DESCRIPTION: Creates a sample collection with different date formats to demonstrate $toDate usage.

LANGUAGE: javascript
CODE:
db.orders.insertMany( [
   { _id: 1, item: "apple", qty: 5, price: 2, order_date: new Date( "2018-03-20" ) },
   { _id: 2, item: "pie", qty: 10, price: 3, order_date: new Date( "2018-03-22" ) },
   { _id: 3, item: "ice cream", qty: 2, price: 4, order_date: "2018-03-15" },
   { _id: 4, item: "almonds" , qty: 5, price: 7, order_date: "2018-03-15 +10:00" }
] )

----------------------------------------

TITLE: Pagination Using Range Queries - Descending Order
DESCRIPTION: Implementation of pagination using range queries with $lt operator and descending sort order. More efficient than skip() for large offsets.

LANGUAGE: javascript
CODE:
function printStudents(startValue, nPerPage) {
  let endValue = null;
  db.students.find( { _id: { $lt: startValue } } )
             .sort( { _id: -1 } )
             .limit( nPerPage )
             .forEach( student => {
               print( student.name );
               endValue = student._id;
             } );

  return endValue;
}

LANGUAGE: javascript
CODE:
let currentKey = MaxKey;
while (currentKey !== null) {
  currentKey = printStudents(currentKey, 10);
}

----------------------------------------

TITLE: Map Function with Conditional Emit
DESCRIPTION: Example map function that emits a key-value pair only when the status field equals 'A'.

LANGUAGE: javascript
CODE:
function() {
    if (this.status == 'A')
        emit(this.cust_id, 1);
}

----------------------------------------

TITLE: Basic UpdateSearchIndex Command Syntax
DESCRIPTION: Shows the basic syntax for updating a search index on a collection using the updateSearchIndex method. Requires collection name, index name, and definition document.

LANGUAGE: javascript
CODE:
db.<collection>.updateSearchIndex(
   <name>,
   {
      <definition>
   }
)

----------------------------------------

TITLE: LDAP Query Template
DESCRIPTION: Sample LDAP query with username placeholder for retrieving user DN from LDAP directory.

LANGUAGE: javascript
CODE:
"ou=engineering,dc=example,dc=com??one?(user={0})"

----------------------------------------

TITLE: Preparing Index for Unique Conversion in MongoDB
DESCRIPTION: This code uses the collMod command to prepare the 'type' field index for conversion to a unique index by setting prepareUnique to true.

LANGUAGE: javascript
CODE:
db.runCommand( {
   collMod: "apples",
   index: {
      keyPattern: { type: 1 },
      prepareUnique: true
   }
} )

----------------------------------------

TITLE: Creating Items Collection in MongoDB
DESCRIPTION: Inserts sample item documents into a MongoDB collection with item details and inventory information.

LANGUAGE: javascript
CODE:
db.items.insertMany( [
  { "_id" : 1, "item" : "abc", description: "product 1", "instock" : 120 },
  { "_id" : 2, "item" : "def", description: "product 2", "instock" : 80 },
  { "_id" : 3, "item" : "jkl", description: "product 3", "instock" : 60 }
] )

----------------------------------------

TITLE: Inserting Multiple Documents into MongoDB Collection
DESCRIPTION: Creates a new collection called 'cakeSales' and inserts multiple documents containing cake flavor and sales data. Each document has a unique _id, flavor name, and salesTotal field.

LANGUAGE: javascript
CODE:
db.cakeSales.insertMany( [
   { _id: 1, flavor: "chocolate", salesTotal: 1580 },
   { _id: 2, flavor: "strawberry", salesTotal: 4350 },
   { _id: 3, flavor: "cherry", salesTotal: 2150 }
] )

----------------------------------------

TITLE: Creating MongoDB Application User
DESCRIPTION: This MongoDB shell command creates a user for a specific application with read and write permissions on the application database.

LANGUAGE: shell
CODE:
use <database>\ndb.createUser(\n  {\n    user: "<username>",\n    pwd: "<password>",\n    roles: [ { role: "readWrite", db: "<database>" } ]\n  }\n)

----------------------------------------

TITLE: Using $covarianceSamp in $setWindowFields Stage for MongoDB Aggregation
DESCRIPTION: Example of using $covarianceSamp within the $setWindowFields stage to calculate sample covariance of order date year and quantity for cake sales, partitioned by state and sorted by order date.

LANGUAGE: javascript
CODE:
db.cakeSales.aggregate( [
   {
      $setWindowFields: {
         partitionBy: "$state",
         sortBy: { orderDate: 1 },
         output: {
            covarianceSampForState: {
               $covarianceSamp: [ { $year: "$orderDate" }, "$quantity" ],
               window: {
                  documents: [ "unbounded", "current" ]
               }
            }
         }
      }
   }
] )

----------------------------------------

TITLE: Using $tsIncrement in Change Stream Cursor
DESCRIPTION: Demonstrates how to use $tsIncrement in a change stream cursor to monitor collection changes, specifically filtering for every other change within the same second.

LANGUAGE: javascript
CODE:
cakeSalesCursor = db.cakeSales.watch( [
   {
      $match: {
         $expr: {
            $eq: [
               { $mod: [ { $tsIncrement: "$clusterTime" } , 2 ] },
               0
            ]
         }
      }
   }
] )

----------------------------------------

TITLE: Disabling the MongoDB Balancer
DESCRIPTION: Commands to disable the balancer in a MongoDB sharded cluster and verify its state. This is a necessary step before beginning the upgrade process.

LANGUAGE: javascript
CODE:
sh.stopBalancer()

sh.getBalancerState()

----------------------------------------

TITLE: Starting a MongoDB Session with Options in JavaScript
DESCRIPTION: This snippet demonstrates how to start a MongoDB session with causal consistency and retryable writes enabled. It uses the Mongo.startSession() method and associates the session with the global db variable in mongosh.

LANGUAGE: javascript
CODE:
db = db.getMongo().startSession({retryWrites: true, causalConsistency: true}).getDatabase(db.getName());

----------------------------------------

TITLE: MongoDB User Variable Naming Rules
DESCRIPTION: Specifies the allowed characters and rules for naming user variables in MongoDB aggregation expressions. Names must begin with a lowercase ASCII letter or non-ASCII character.

LANGUAGE: mongodb
CODE:
[_a-zA-Z0-9]

LANGUAGE: mongodb
CODE:
[a-z]

----------------------------------------

TITLE: Inserting Encrypted Document with CSFLE in Go
DESCRIPTION: Go code snippet for inserting a Client-Side Field Level Encrypted document into MongoDB. Uses a CSFLE-enabled MongoClient to insert the document into the 'medicalRecords.patients' namespace.

LANGUAGE: go
CODE:
_, err = collection.InsertOne(context.TODO(), bson.M{
    "firstName":    "Jon",
    "lastName":     "Doe",
    "patientId":    12345678,
    "address":      "157 Electric Ave.",
    "patientRecord": bson.M{
        "ssn": 987654321,
        "billing": bson.M{
            "type":   "Visa",
            "number": "4111111111111111",
        },
    },
})

----------------------------------------

TITLE: Starting a MongoDB 8.0 Shard Server
DESCRIPTION: Command line and configuration file examples for starting a MongoDB 8.0 shard server. This includes necessary options like shardsvr, replSet, port, and bind_ip.

LANGUAGE: bash
CODE:
mongod --shardsvr --replSet <replSetName> --port <port> --dbpath <path> --bind_ip localhost,<ip address>

LANGUAGE: yaml
CODE:
sharding:
  clusterRole: shardsvr
replication:
  replSetName: <string>
net:
  port: <port>
  bindIp: localhost,<ip address>
storage:
  dbpath: <path>

----------------------------------------

TITLE: Creating a 2d Index with Simple Collation in MongoDB
DESCRIPTION: This code shows how to create a 2d index on the 'loc' field of the 'collationTest' collection, explicitly specifying a simple collation. This is necessary because 2d indexes do not support non-simple collations.

LANGUAGE: javascript
CODE:
db.collationTest.createIndex(
   {
      loc: "2d"
   },
   {
      collation: { locale: "simple" }
   }
)

----------------------------------------

TITLE: MongoDB Balancer Status Command Example
DESCRIPTION: Example showing how to execute the balancerStatus command against a mongos instance.

LANGUAGE: javascript
CODE:
db.adminCommand( { balancerStatus: 1 } )

----------------------------------------

TITLE: Basic MongoDB Compact Command Syntax
DESCRIPTION: Core syntax for the compact command showing all available parameters including dryRun, force, freeSpaceTargetMB and comment options.

LANGUAGE: javascript
CODE:
db.runCommand(
   { 
     compact: <string>, 
     dryRun: <boolean>,
     force: <boolean>, // Optional
     freeSpaceTargetMB: <int>, // Optional 
     comment: <any>, // Optional
   }
)

----------------------------------------

TITLE: Consistent Sorting of Restaurants by Borough and ID
DESCRIPTION: Achieves a consistent sort by including both the 'borough' and '_id' fields in the $sort stage. This ensures a stable sort order across multiple executions.

LANGUAGE: javascript
CODE:
db.restaurants.aggregate(
   [
     { $sort : { borough : 1, _id: 1 } }
   ]
)

----------------------------------------

TITLE: Configuring MongoDB Shard Member for Normal Operation
DESCRIPTION: This YAML configuration shows how to revert a MongoDB shard member's configuration back to normal operation after index building, including restoring the original port and re-enabling replication and sharding.

LANGUAGE: yaml
CODE:
net:
   bindIp: localhost,<hostname(s)|ip address(es)>
   port: 27018
replication:
   replSetName: shardA
sharding:
   clusterRole: shardsvr

----------------------------------------

TITLE: Syntax for $densify Aggregation Stage in MongoDB
DESCRIPTION: Demonstrates the basic syntax structure for using the $densify stage in a MongoDB aggregation pipeline. It shows the required and optional fields for configuring the densification process.

LANGUAGE: javascript
CODE:
{
   $densify: {
      field: <fieldName>,
      partitionByFields: [ <field 1>, <field 2> ... <field n> ],
      range: {
         step: <number>,
         unit: <time unit>,
         bounds: < "full" || "partition" > || [ < lower bound >, < upper bound > ]
      }
   }
}

----------------------------------------

TITLE: Creating Sample Collection in MongoDB
DESCRIPTION: Script to create a test collection with 100 documents using bulk operations.

LANGUAGE: javascript
CODE:
N = 100
bulk = db.collection.initializeUnorderedBulkOp()
for ( i = 0; i < N; i++) { bulk.insert( {_id: i, r: 0} ) }
bulk.execute()

----------------------------------------

TITLE: Basic $rand Syntax in MongoDB Aggregation
DESCRIPTION: Shows the basic syntax for using the $rand operator in MongoDB aggregation pipelines. The operator takes no arguments and returns a random float between 0 and 1.

LANGUAGE: javascript
CODE:
{ $rand: {} }

----------------------------------------

TITLE: MongoDB Locale Collation Settings Table Definition
DESCRIPTION: ReStructuredText table defining collation settings for MongoDB locales including language codes and their parameters like caseFirst, alternate, normalization and backwards settings.

LANGUAGE: rst
CODE:
.. list-table::
   :header-rows: 1

   * - Locale
     - caseFirst
     - alternate
     - normalization
     - backwards

   * - ``af``
     - ``off``
     - ``non-ignorable``
     - ``FALSE``
     - ``FALSE``

----------------------------------------

TITLE: Syntax for $currentDate Operator in MongoDB
DESCRIPTION: Demonstrates the basic syntax for using the $currentDate operator in MongoDB update operations. The operator can set fields to the current date or timestamp.

LANGUAGE: javascript
CODE:
{ $currentDate: { <field1>: <typeSpecification1>, ... } }

----------------------------------------

TITLE: Creating Unique Index in MongoDB (JavaScript)
DESCRIPTION: Creates a unique index on the 'employee' field in the 'employees' collection.

LANGUAGE: javascript
CODE:
db.employees.createIndex( { employee: 1 }, { unique: true } )

----------------------------------------

TITLE: Inserting Sample Delivery Fleet Data in MongoDB
DESCRIPTION: Example of inserting truck odometer readings with timestamps into a MongoDB collection.

LANGUAGE: javascript
CODE:
db.deliveryFleet.insertMany( [
   { truckID: "1", timeStamp: new Date( "2020-05-18T14:10:30Z" ), miles: 1295.1 },
   { truckID: "1", timeStamp: new Date( "2020-05-18T14:11:00Z" ), miles: 1295.63 },
   { truckID: "1", timeStamp: new Date( "2020-05-18T14:11:30Z" ), miles: 1296.25 },
   { truckID: "1", timeStamp: new Date( "2020-05-18T14:12:00Z" ), miles: 1296.76 },
   { truckID: "2", timeStamp: new Date( "2020-05-18T14:10:30Z" ), miles: 10234.1 },
   { truckID: "2", timeStamp: new Date( "2020-05-18T14:11:00Z" ), miles: 10234.33 },
   { truckID: "2", timeStamp: new Date( "2020-05-18T14:11:30Z" ), miles: 10234.73 },
   { truckID: "2", timeStamp: new Date( "2020-05-18T14:12:00Z" ), miles: 10235.13 }
] )

----------------------------------------

TITLE: Using $regexMatch in MongoDB Aggregation Pipeline
DESCRIPTION: Example of using $regexMatch in an aggregation pipeline to perform case-sensitive pattern matching on a field.

LANGUAGE: javascript
CODE:
db.myColl.aggregate( [ { $addFields: { results: { $regexMatch: { input: "$category", regex: /cafe/ }  } } } ] )

----------------------------------------

TITLE: Filtering Users by Role in MongoDB
DESCRIPTION: This snippet shows how to use a filter to view all users in the current database who have a specific role (in this case, the 'root' role in the 'admin' database).

LANGUAGE: javascript
CODE:
db.runCommand( { usersInfo: 1, filter: { roles: { role: "root", db: "admin" } } } )

----------------------------------------

TITLE: Querying MongoDB with Projection in MongoDB Compass
DESCRIPTION: This snippet demonstrates how to use MongoDB Compass to query documents with a status filter and project specific fields.

LANGUAGE: javascript
CODE:
{ status: "A" }

LANGUAGE: javascript
CODE:
{ item: 1, status: 1, _id: 0 }

----------------------------------------

TITLE: Validating All Collections in All Databases with validateDBMetadata
DESCRIPTION: This example demonstrates how to use validateDBMetadata to validate all collections in all databases, reporting APIStrictError and APIVersionError responses.

LANGUAGE: javascript
CODE:
db.runCommand( { 
  validateDBMetadata: 1, 
  apiParameters: { 
    version: "1", 
    strict: true, 
    deprecationErrors: true 
  }, 
})

----------------------------------------

TITLE: Using $mod in MongoDB Aggregation Pipeline
DESCRIPTION: Demonstrates how to use the $mod operator in a MongoDB aggregation pipeline. This example calculates the remainder of hours divided by tasks for each document in the conferencePlanning collection.

LANGUAGE: javascript
CODE:
db.conferencePlanning.aggregate( [
  { $project: { remainder: { $mod: [ "$hours", "$tasks" ] } } }
] )

----------------------------------------

TITLE: Printing Read Preference Mode in MongoDB using JavaScript
DESCRIPTION: This snippet shows how to retrieve and print the current read preference mode for a MongoDB connection. It uses the print() function to output the result of getReadPrefMode().

LANGUAGE: javascript
CODE:
print(db.getMongo().getReadPrefMode());

----------------------------------------

TITLE: Defining $log Operator in MongoDB Aggregation
DESCRIPTION: This snippet shows the syntax for using the $log operator in MongoDB aggregation. It calculates the log of a number in a specified base and returns the result as a double.

LANGUAGE: javascript
CODE:
{ $log: [ <number>, <base> ] }

----------------------------------------

TITLE: Using cursor.max() with Compound Index in MongoDB
DESCRIPTION: Demonstrates using cursor.max() with a compound index on item and type. This query limits results to documents below the specified upper bound.

LANGUAGE: javascript
CODE:
db.products.find().max( { item: 'apple', type: 'jonagold' } ).hint( { item: 1, type: 1 } )

----------------------------------------

TITLE: MongoDB $atan2 Radians Calculation
DESCRIPTION: Aggregation pipeline using $atan2 to calculate angle in radians without conversion.

LANGUAGE: bash
CODE:
db.trigonometry.aggregate([
  { 
    $addFields : {
      "angle_a" : {
        $atan2 : [ "$side_b", "$side_a" ]
      }
    }
  }
])

----------------------------------------

TITLE: Attempting to Update highScore with Lower Value in MongoDB
DESCRIPTION: This operation demonstrates that $max does not update the field when the specified value is less than the current value.

LANGUAGE: javascript
CODE:
db.scores.updateOne( { _id: 1 }, { $max: { highScore: 870 } } )

----------------------------------------

TITLE: MongoDB Update Operation Profile Document
DESCRIPTION: Example profile document showing metrics for an update operation, including matching and modification counts, lock information, and storage statistics.

LANGUAGE: javascript
CODE:
{
  "op" : "update",
  "ns" : "test.report",
  "command" : {
     "q" : { },
     "u" : { "$rename" : { "a" : "b" } },
     "multi" : true,
     "upsert" : false
  },
  "keysExamined" : 0,
  "docsExamined" : 25000,
  "nMatched" : 25000,
  "nModified" : 25000,
  "keysInserted" : 25000,
  "keysDeleted" : 25000000,
  "numYield" : 6985,
  "locks" : {
     "Global" : {
        "acquireCount" : { "r" : NumberLong(6986), "w" : NumberLong(13972) }
     },
     "Database" : {
        "acquireCount" : { "w" : NumberLong(6986) },
        "acquireWaitCount" : { "w" : NumberLong(1) },
        "timeAcquiringMicros" : { "w" : NumberLong(60899375) }
     }
  }
}

----------------------------------------

TITLE: Creating 2D Index in MongoDB
DESCRIPTION: Creates a 2D geospatial index on the 'address' field in a MongoDB collection. The index supports queries on location data using legacy coordinate pairs where longitude must be between -180 and 180, and latitude between -90 and 90.

LANGUAGE: javascript
CODE:
db.contacts.createIndex( { address : "2d" } )

----------------------------------------

TITLE: Specify Hint Example
DESCRIPTION: An example of using findAndModify with a hint to specify which index to use.

LANGUAGE: javascript
CODE:
db.runCommand({
   findAndModify: "members",
   query: { "points": { $lte: 20 }, "status": "P" },
   remove: true,
   hint: { status: 1 }
})

----------------------------------------

TITLE: Direct Restore from MongoDB LVM Snapshot
DESCRIPTION: Restores directly from the LVM snapshot without using compressed intermediary files. Creates new volume and copies data directly from snapshot.

LANGUAGE: bash
CODE:
umount /dev/vg0/mdb-snap01
lvcreate --size 1G --name mdb-new vg0
dd if=/dev/vg0/mdb-snap01 of=/dev/vg0/mdb-new
mount /dev/vg0/mdb-new /srv/mongodb

----------------------------------------

TITLE: Defining privilege document structure in MongoDB roles
DESCRIPTION: This snippet shows the structure of a privilege document within the privileges array of a role. It specifies the resource and actions for a privilege.

LANGUAGE: javascript
CODE:
{
  resource: { <resource> },
  actions: [ "<action>", ... ]
}

----------------------------------------

TITLE: Allowing MongoDB Application in Windows Firewall
DESCRIPTION: This command adds a rule to allow network access for the MongoDB application executable.

LANGUAGE: bat
CODE:
netsh advfirewall firewall add rule name="Allowing mongod" dir=in action=allow program=" C:\Program Files\MongoDB\Server\3.4\bin\mongod.exe"

----------------------------------------

TITLE: Opening MongoDB Config Server Port in Windows Firewall
DESCRIPTION: This command adds a rule to allow incoming traffic on port 27019 for MongoDB config server connections.

LANGUAGE: bat
CODE:
netsh advfirewall firewall add rule name="Open mongod config svr port 27019" dir=in action=allow protocol=TCP localport=27019

----------------------------------------

TITLE: Defining $setEquals Operator in MongoDB Aggregation
DESCRIPTION: Demonstrates the syntax for using the $setEquals operator in a MongoDB aggregation pipeline. It compares two or more arrays for equality of distinct elements.

LANGUAGE: javascript
CODE:
{ $setEquals: [ <expression1>, <expression2>, ... ] }

----------------------------------------

TITLE: Pivoting Data with MongoDB Aggregation
DESCRIPTION: Shows how to pivot data by grouping book titles by author using $group and $push operators.

LANGUAGE: javascript
CODE:
db.books.aggregate([
   { $group : { _id : "$author", books: { $push: "$title" } } }
 ])

----------------------------------------

TITLE: Pivoting Data with MongoDB Aggregation
DESCRIPTION: Shows how to pivot data by grouping book titles by author using $group and $push operators.

LANGUAGE: javascript
CODE:
db.books.aggregate([
   { $group : { _id : "$author", books: { $push: "$title" } } }
 ])

----------------------------------------

TITLE: Specifying Shared Library Location for MongoDB Queryable Encryption
DESCRIPTION: This code specifies the location of the shared library required for MongoDB Queryable Encryption. The shared library is crucial for the encryption operations.

LANGUAGE: javascript
CODE:
const extraOptions = {
  cryptSharedLibPath: "<path to your crypt_shared library>"
};

----------------------------------------

TITLE: MongoDB Bitwise XOR Operation Example
DESCRIPTION: Illustrates using the $bit operator with XOR operation to update a document's integer field.

LANGUAGE: javascript
CODE:
db.switches.updateOne(
   { _id: 3 },
   { $bit: { expdata: { xor: Int32( 5 ) } } }
)

----------------------------------------

TITLE: Inserting Documents Using MongoDB Shell
DESCRIPTION: Example of inserting multiple documents into a MongoDB collection using the MongoDB shell. The documents contain nested objects and arrays with various data types.

LANGUAGE: javascript
CODE:
db.inventory.insertMany([
   { item: "journal", qty: 25, tags: ["blank", "red"], size: { h: 14, w: 21, uom: "cm" } },
   { item: "mat", qty: 85, tags: ["gray"], size: { h: 27.9, w: 35.5, uom: "cm" } },
   { item: "mousepad", qty: 25, tags: ["gel", "blue"], size: { h: 19, w: 22.85, uom: "cm" } }
])

----------------------------------------

TITLE: Adding a Secondary to a New Replica Set in MongoDB
DESCRIPTION: Demonstrates how to add a new secondary member with default vote and priority settings to a new replica set using either a member configuration document or a hostname.

LANGUAGE: javascript
CODE:
rs.add( { host: "mongodbd4.example.net:27017" } )

LANGUAGE: javascript
CODE:
rs.add( "mongodbd4.example.net:27017" )

----------------------------------------

TITLE: Basic Update Operator Syntax in MongoDB
DESCRIPTION: Demonstrates the basic syntax structure for using update operators in MongoDB operations. Shows how to specify multiple operators and their field-value pairs.

LANGUAGE: javascript
CODE:
{
   <operator1>: { <field1>: <value1>, ... },
   <operator2>: { <field2>: <value2>, ... },
   ...
}

----------------------------------------

TITLE: Creating Sparse Index for Performance
DESCRIPTION: Shows how to create a sparse index on the auditDate field to improve $exists query performance.

LANGUAGE: javascript
CODE:
db.getCollection( "stockSales" ).createIndex( 
   { auditDate: 1 },
   { name: "auditDateSparseIndex", sparse: true }
)

----------------------------------------

TITLE: Companies Collection Example for Regex Matching
DESCRIPTION: Example showing how to insert documents into a companies collection to demonstrate regex matching behavior.

LANGUAGE: javascript
CODE:
db.companies.insertMany( [
   { _id: 001, company: "MongoDB" },
   { _id: 002, company: "MongoDB2" }
] )

----------------------------------------

TITLE: MongoDB Collection Initialization
DESCRIPTION: Example showing how to create and populate an inventory collection with sample documents for demonstrating $concat usage.

LANGUAGE: javascript
CODE:
db.inventory.insertMany( [
   { _id : 1, item : "ABC1", quarter: "13Q1", description : "product 1" },
   { _id : 2, item : "ABC2", quarter: "13Q4", description : "product 2" },
   { _id : 3, item : "XYZ1", quarter: "14Q2", description : null }
] )

----------------------------------------

TITLE: MongoDB dropSearchIndex Success Response
DESCRIPTION: Example of successful response from dropSearchIndex command indicating operation completed.

LANGUAGE: javascript
CODE:
{
   ok: 1
}

----------------------------------------

TITLE: Inserting Subscription Data for $dateDiff Precision Example in MongoDB
DESCRIPTION: Inserts sample subscription data into a MongoDB collection. This data is used to demonstrate how $dateDiff handles different time units and precision levels.

LANGUAGE: javascript
CODE:
db.subscriptions.insertMany(
   [
      { 
         custId: 456,
         start: ISODate("2010-01-01"),
         end: ISODate("2011-01-01")
      },
      {
         custId: 457,
         start: ISODate("2010-01-01"),
         end: ISODate("2011-06-31")
      },
      {
         custId: 458, 
         start: ISODate("2010-03-01"),
         end: ISODate("2010-04-30")
      }
   ]
)

----------------------------------------

TITLE: Sharding Collections with Hashed Shard Key in MongoDB
DESCRIPTION: This snippet shows how to shard the bigData and manyIndexes collections using a hashed shard key on the _id field. This ensures even distribution of data across the shards within their respective zones.

LANGUAGE: javascript
CODE:
sh.shardCollection(
   "shardDistributionDB.bigData", { _id: "hashed" }
)

sh.shardCollection(
   "shardDistributionDB.manyIndexes", { _id: "hashed" }
)

----------------------------------------

TITLE: Setting Secondary Read Preference in MongoDB
DESCRIPTION: Demonstrates how to set the read preference mode to target read operations to secondary members in a replica set.

LANGUAGE: javascript
CODE:
db.getMongo().setReadPref('secondary')

----------------------------------------

TITLE: Equivalent $convert Expression for $toLong in MongoDB
DESCRIPTION: Demonstrates the equivalent $convert expression that $toLong is a shorthand for in MongoDB aggregations.

LANGUAGE: javascript
CODE:
{ $convert: { input: <expression>, to: "long" } }

----------------------------------------

TITLE: Configuring MongoDB with TLS for X.509 Membership Authentication (Config File)
DESCRIPTION: YAML configuration file settings to configure a MongoDB instance to use X.509 certificates for cluster membership authentication with TLS. Includes settings for security, network, TLS mode, certificate files, and binding IP addresses.

LANGUAGE: yaml
CODE:
security:
   clusterAuthMode: x509
net:
   tls:
      mode: requireTLS
      certificateKeyFile: <path to its TLS/SSL certificate and key file>
      CAFile: <path to root CA PEM file to verify received certificate>
      clusterFile: <path to its certificate key file for membership authentication>
   bindIp: localhost,<hostname(s)|ip address(es)>

----------------------------------------

TITLE: Configuring Named GCP KMS Provider for MongoDB Encryption in Node.js
DESCRIPTION: This snippet demonstrates setting up a named GCP KMS provider for MongoDB Client-Side Field Level Encryption in Node.js. It shows how to create an object with the provider details.

LANGUAGE: javascript
CODE:
const kmsProviders = {
  my_gcp_provider: {
    projectId: "my-project",
    location: "global",
    keyRing: "my-key-ring",
    keyName: "my-key-name"
  }
};

----------------------------------------

TITLE: Running hello Command with secondaryPreferred Read Preference in MongoDB
DESCRIPTION: This example shows how to use db.runCommand() to run the hello command in MongoDB with the secondaryPreferred read preference. This setting allows the command to be executed on a secondary node if possible.

LANGUAGE: javascript
CODE:
db.runCommand( { hello: 1 }, { readPreference: "secondaryPreferred" } )

----------------------------------------

TITLE: Initializing DEK ID Variable in Go for MongoDB
DESCRIPTION: This snippet demonstrates how to initialize a variable for a Data Encryption Key (DEK) ID using placeholder text. It shows both the placeholder version and an example of how it should be replaced with an actual value.

LANGUAGE: go
CODE:
dek_id := "<Your Base64 DEK ID>"

LANGUAGE: go
CODE:
dek_id := "abc123"

----------------------------------------

TITLE: Creating a Single Field Index in MongoDB
DESCRIPTION: This snippet shows how to create a single field index on the 'type' field of the 'apples' collection using the createIndex() method.

LANGUAGE: javascript
CODE:
db.apples.createIndex( { type: 1 } )

----------------------------------------

TITLE: Deleting Query Settings with Query Shape in MongoDB
DESCRIPTION: This snippet demonstrates how to delete query settings by providing a query shape to the removeQuerySettings command, including fields for find, distinct, or aggregate commands and a $db field for the database name.

LANGUAGE: javascript
CODE:
db.adminCommand( {
   removeQuerySettings: {
      <fields>,  // Provide fields for 
                // find, distinct, or aggregate command
      $db: <string>  // Provide a database name
   }
} )

----------------------------------------

TITLE: Executing endSessions Command in MongoDB JavaScript
DESCRIPTION: This snippet demonstrates the syntax for running the endSessions command in MongoDB. It takes an array of session IDs (UUIDs) to mark as expired.

LANGUAGE: javascript
CODE:
db.runCommand( 
   { 
     endSessions: [ { id : <UUID> }, ... ] 
   }
)

----------------------------------------

TITLE: MongoDB $not Operator Aggregation Example
DESCRIPTION: Aggregation pipeline example using $not operator to check if quantity is not greater than 250.

LANGUAGE: javascript
CODE:
db.inventory.aggregate(
   [
     {
       $project:
          {
            item: 1,
            result: { $not: [ { $gt: [ "$qty", 250 ] } ] }
          }
     }
   ]
)

----------------------------------------

TITLE: Basic $out Collection Output Syntax
DESCRIPTION: Basic syntax for $out operator to output to a collection in the same database

LANGUAGE: javascript
CODE:
{ $out: "<output-collection>" }

----------------------------------------

TITLE: Creating an Index in MongoDB
DESCRIPTION: This JavaScript code demonstrates how to create an ascending index on the 'username' field of the 'records' collection in MongoDB using the createIndex() method.

LANGUAGE: javascript
CODE:
db.records.createIndex( { username: 1 } )

----------------------------------------

TITLE: $median with Window Functions Example
DESCRIPTION: Demonstrates using $median within a $setWindowFields stage to calculate median values based on local data trends.

LANGUAGE: javascript
CODE:
db.testScores.aggregate( [
   {
      $setWindowFields: {
         sortBy: { test01: 1 },
         output: {
            test01_median: {
               $median: {
                  input: "$test01",
                  method: 'approximate'
               },
               window: {
                  range: [ -3, 3 ]
               }
            }
         }
      }
   },
   {
      $project: {
         _id: 0,
         studentId: 1,
         test01_median: 1
      }
   }
] )

----------------------------------------

TITLE: Sample Output of $covarianceSamp in MongoDB Aggregation
DESCRIPTION: Example output showing the result of using $covarianceSamp in the aggregation pipeline, displaying the sample covariance values in the covarianceSampForState field for each document.

LANGUAGE: javascript
CODE:
{ "_id" : 4, "type" : "strawberry", "orderDate" : ISODate("2019-05-18T16:09:01Z"),
  "state" : "CA", "price" : 41, "quantity" : 162, "covarianceSampForState" : null }
{ "_id" : 0, "type" : "chocolate", "orderDate" : ISODate("2020-05-18T14:10:30Z"),
  "state" : "CA", "price" : 13, "quantity" : 120, "covarianceSampForState" : -21 }
{ "_id" : 2, "type" : "vanilla", "orderDate" : ISODate("2021-01-11T06:31:15Z"),
  "state" : "CA", "price" : 12, "quantity" : 145, "covarianceSampForState" : -8.500000000000007 }
{ "_id" : 5, "type" : "strawberry", "orderDate" : ISODate("2019-01-08T06:12:03Z"),
  "state" : "WA", "price" : 43, "quantity" : 134, "covarianceSampForState" : null }
{ "_id" : 3, "type" : "vanilla", "orderDate" : ISODate("2020-02-08T13:13:23Z"),
  "state" : "WA", "price" : 13, "quantity" : 104, "covarianceSampForState" : -15 }
{ "_id" : 1, "type" : "chocolate", "orderDate" : ISODate("2021-03-20T11:30:05Z"),
  "state" : "WA", "price" : 14, "quantity" : 140, "covarianceSampForState" : 3 }

----------------------------------------

TITLE: Checking if a Collection is Clustered in MongoDB
DESCRIPTION: Example of using the listCollections command to determine if a collection is clustered. The output will include clusteredIndex details for clustered collections.

LANGUAGE: javascript
CODE:
db.runCommand( { listCollections: 1 } )

----------------------------------------

TITLE: Basic Certificate Rotation in MongoDB
DESCRIPTION: This example shows how to perform a basic certificate rotation on a running mongod instance without any custom message.

LANGUAGE: javascript
CODE:
db.rotateCertificates()

----------------------------------------

TITLE: Basic $fill Stage Syntax Structure
DESCRIPTION: Shows the basic syntax structure for the $fill aggregation pipeline stage with all possible fields.

LANGUAGE: none
CODE:
{
   $fill: {
      partitionBy: <expression>,
      partitionByFields: [ <field 1>, <field 2>, ... , <field n> ],
      sortBy: {
         <sort field 1>: <sort order>,
         <sort field 2>: <sort order>,
         ...,
         <sort field n>: <sort order>
      },
      output: {
         <field 1>: { value: <expression> },
         <field 2>: { method: <string> },
         ...
      }
   }
}

----------------------------------------

TITLE: Updating MongoDB Documents Not Matching JSON Schema
DESCRIPTION: Updates documents that don't match the schema by setting an 'isValid' field to false using the updateMany() method.

LANGUAGE: javascript
CODE:
db.inventory.updateMany(
   { 
      $nor: [ myschema ]
   },
   {
      $set: { isValid: false }
   }
)

----------------------------------------

TITLE: Computing Combined Document Sizes
DESCRIPTION: Aggregation that calculates the total size of all documents in the collection by grouping and summing individual BSON sizes.

LANGUAGE: javascript
CODE:
db.employees.aggregate([
  {
    "$group": {
      "_id": null,
      "combined_object_size": { $sum: { $bsonSize: "$$ROOT" } } 
    } 
  }
]);

----------------------------------------

TITLE: Viewing Updated defaultMaxTimeMS Value in MongoDB
DESCRIPTION: This snippet shows how to check the updated value of defaultMaxTimeMS after setting it. It uses the getClusterParameter command and includes an example of the expected output.

LANGUAGE: javascript
CODE:
db.adminCommand( { getClusterParameter: "defaultMaxTimeMS" } )

----------------------------------------

TITLE: Querying Fields with Periods in MongoDB
DESCRIPTION: Example showing how to query documents where price.usd field is greater than 200 using $getField operator.

LANGUAGE: javascript
CODE:
db.inventory.aggregate( [
  {
    $match: 
      { $expr: 
        { $gt: [ { $getField: "price.usd" }, 200 ] }
      }
   }
] )

----------------------------------------

TITLE: Running MongoDB Queryable Encryption Tutorial Script
DESCRIPTION: Command to execute the queryable-encryption-tutorial.js script using mongosh. This runs the sample application for the Queryable Encryption tutorial.

LANGUAGE: bash
CODE:
mongosh -f queryable-encryption-tutorial.js

----------------------------------------

TITLE: Defining cursor.comment() Method in MongoDB
DESCRIPTION: Demonstrates the syntax for the cursor.comment() method, which adds a comment field to a MongoDB query. The method takes a single string parameter representing the comment to be applied.

LANGUAGE: javascript
CODE:
cursor.comment( <string> )

----------------------------------------

TITLE: Creating an Index on Child References in MongoDB
DESCRIPTION: This command creates an index on the children field to enable fast searches by child nodes in the tree structure.

LANGUAGE: javascript
CODE:
db.categories.createIndex( { children: 1 } )

----------------------------------------

TITLE: Sample Triangle Document Structure
DESCRIPTION: Example document structure storing triangle dimensions in the trigonometry collection.

LANGUAGE: bash
CODE:
{
  "_id" : ObjectId("5c50782193f833234ba90d85"),
  "side_a" : NumberDecimal("3"),
  "side_b" : NumberDecimal("4"),
  "hypotenuse" : NumberDecimal("5")
}

----------------------------------------

TITLE: Using $slice Alone in MongoDB Array Update
DESCRIPTION: Demonstrates how to use $slice modifier alone by specifying an empty array for $each. This operation trims the 'scores' array to the last three elements without adding new elements.

LANGUAGE: javascript
CODE:
db.students.updateOne(
  { _id: 3 },
  {
    $push: {
      scores: {
         $each: [ ],
         $slice: -3
      }
    }
  }
)

----------------------------------------

TITLE: Converting mongos Command-Line Options to YAML Configuration
DESCRIPTION: This snippet demonstrates using the --outputConfig option with mongos to generate a YAML configuration from command-line arguments. It includes options for sharding, networking, security, and logging.

LANGUAGE: bash
CODE:
mongos --configdb myCSRS/cfg1.example.net:27019,cfg2.example.net:27019 --bind_ip localhost,My-Example-MONGOS-Hostname --fork --logpath /var/log/mongodb/mongos.log --clusterAuthMode x509 --tlsMode requireTLS  --tlsCAFile /path/to/my/CA/file  --tlsCertificateKeyFile /path/to/my/certificate/file --tlsClusterFile /path/to/my/cluster/membership/file --outputConfig

----------------------------------------

TITLE: Inserting Sample Document in MongoDB
DESCRIPTION: Example of inserting a document into a MongoDB collection using insertOne(). The document contains book information including title, text, and authorship.

LANGUAGE: javascript
CODE:
db.books.insertOne({
    "_id" : ObjectId("54f612b6029b47909a90ce8d"),
    "title" : "A Tale of Two Cities",
    "text" : "It was the best of times, it was the worst of times, it was the age of wisdom, it was the age of foolishness...",
    "authorship" : "Charles Dickens"})

----------------------------------------

TITLE: Document Structure for Distributed Writes in MongoDB
DESCRIPTION: Example document structure showing the format used for distributed writes across datacenters, including message_id, datacenter, and userid fields.

LANGUAGE: javascript
CODE:
{
   "_id" : ObjectId("56f08c447fe58b2e96f595fa"),
   "message_id" : 329620,
   "datacenter" : "alfa",
   "userid" : 123,
   ...
}
{
   "_id" : ObjectId("56f08c447fe58b2e96f595fb"),
   "message_id" : 578494,
   "datacenter" : "bravo",
   "userid" : 456,
   ...
}
{
   "_id" : ObjectId("56f08c447fe58b2e96f595fc"),
   "message_id" : 689979,
   "datacenter" : "bravo",
   "userid" : 789,
   ...
}

----------------------------------------

TITLE: Calculating Cosine of Angle in Degrees in MongoDB Aggregation
DESCRIPTION: Shows how to use $cos along with $degreesToRadians to calculate the adjacent side of a right-angle triangle given the hypotenuse and an angle in degrees.

LANGUAGE: bash
CODE:
db.trigonometry.aggregate([
  {
    $addFields : {
      "side_a" : {
        $multiply : [
          { $cos : {$degreesToRadians : "$angle_a"} },
          "$hypotenuse"
        ]
      }
    }
  }
])

----------------------------------------

TITLE: Syntax for KeyVault.addKeyAlternateName() in MongoDB
DESCRIPTION: Demonstrates the basic syntax for calling the KeyVault.addKeyAlternateName() method. It requires obtaining the KeyVault object and then calling the method with a UUID and the new alternate name.

LANGUAGE: javascript
CODE:
keyVault = db.getMongo().getKeyVault()

keyVault.addKeyAlternateName(
   UUID("<UUID string>"),
   "keyAlternateName"
)

----------------------------------------

TITLE: Updating MongoDB Documents Using $nin Operator
DESCRIPTION: Shows how to use the $nin operator with updateMany to set an 'exclude' field to true for documents that don't have the 'school' tag in their tags array.

LANGUAGE: javascript
CODE:
db.inventory.updateMany(
    { tags: { $nin: [ "school" ] } },
    { $set: { exclude: true } }
)

----------------------------------------

TITLE: Example Usage of checkMetadataConsistency in MongoDB
DESCRIPTION: This example shows how to use the checkMetadataConsistency() method on the 'authors' collection. It demonstrates the method call and the expected JSON output format, including the type and details of any inconsistencies found.

LANGUAGE: javascript
CODE:
db.authors.checkMetadataConsistency()

LANGUAGE: json
CODE:
{
   cursorHasMore: false,
   documents: [
      {
         type: "MisplacedCollection",
         description: "Unsharded collection found on shard different from database primary shard",
         details: {
            namespace: "test.authors",
            shard: "shard02",
            localUUID: new UUID("1ad56770-61e2-48e9-83c6-8ecefe73cfc4")
         }
      }
   ],
}

----------------------------------------

TITLE: Deleting Encryption Key Example - MongoDB JavaScript
DESCRIPTION: Complete example demonstrating how to delete a data encryption key using a specific UUID with the encrypted client.

LANGUAGE: javascript
CODE:
keyVault = encryptedClient.getKeyVault()
keyVault.deleteKey(UUID("b4b41b33-5c97-412e-a02b-743498346079"))

----------------------------------------

TITLE: Sample Data Insertion for MongoDB Deliveries Collection
DESCRIPTION: Inserts sample delivery data into a MongoDB collection with city and quantity information.

LANGUAGE: javascript
CODE:
db.deliveries.insertMany( [
   { _id: 1, city: "Berkeley, CA", qty: 648 },
   { _id: 2, city: "Bend, OR", qty: 491 },
   { _id: 3, city: "Kensington, CA", qty: 233 },
   { _id: 4, city: "Eugene, OR", qty: 842 },
   { _id: 5, city: "Reno, NV", qty: 655 },
   { _id: 6, city: "Portland, OR", qty: 408 },
   { _id: 7, city: "Sacramento, CA", qty: 574 }
] )

----------------------------------------

TITLE: Basic Certificate Rotation Command in MongoDB
DESCRIPTION: Basic syntax for the rotateCertificates command that rotates TLS certificates on a running MongoDB instance.

LANGUAGE: javascript
CODE:
db.runCommand(
   { 
     rotateCertificates: 1,
     message: "<optional log message>" 
   }
)

----------------------------------------

TITLE: Deleting Multiple Documents in MongoDB using C Driver
DESCRIPTION: This snippet shows how to delete multiple documents using the MongoDB C driver. The actual code is not provided in the snippet, but it references an external file.

LANGUAGE: c
CODE:
// Code is referenced from an external file:
// /driver-examples/test-mongoc-sample-commands.c

----------------------------------------

TITLE: Sample Trigonometry Collection Document
DESCRIPTION: Example document structure showing angles stored in radians using NumberDecimal type.

LANGUAGE: json
CODE:
{
  "angle_a" : NumberDecimal("0.9272952180016122324285124629224290"),
  "angle_b" : NumberDecimal("0.6435011087932843868028092287173227"),
  "angle_c" : NumberDecimal("1.570796326794896619231321691639752")
}

----------------------------------------

TITLE: MongoDB $asin Example with Degrees Conversion
DESCRIPTION: Demonstrates calculating the inverse sine of a triangle's side ratio and converting the result from radians to degrees using $radiansToDegrees.

LANGUAGE: bash
CODE:
{
  "_id" : ObjectId("5c50782193f833234ba90d85"),
  "side_a" : NumberDecimal("3"),
  "side_b" : NumberDecimal("4"),
  "hypotenuse" : NumberDecimal("5")
}

LANGUAGE: bash
CODE:
db.trigonometry.aggregate([
  { 
    $addFields : {
      "angle_a" : {
        $radiansToDegrees : {
          $asin : {
            $divide : [ "$side_a", "$hypotenuse" ]
          }
        }
      }
    }
  }
])

----------------------------------------

TITLE: Remote MongoDB Backup via SSH
DESCRIPTION: Performs remote backup by sending compressed snapshot data over SSH to remote storage location. Includes snapshot creation, remote transfer and restore steps.

LANGUAGE: bash
CODE:
umount /dev/vg0/mdb-snap01
dd if=/dev/vg0/mdb-snap01 | ssh username@example.com gzip > /opt/backup/mdb-snap01.gz
lvcreate --size 1G --name mdb-new vg0
ssh username@example.com gzip -d -c /opt/backup/mdb-snap01.gz | dd of=/dev/vg0/mdb-new
mount /dev/vg0/mdb-new /srv/mongodb

----------------------------------------

TITLE: Disabling Mirrored Reads in MongoDB
DESCRIPTION: This JavaScript code snippet demonstrates how to disable mirrored reads in MongoDB by setting the mirrorReads parameter to a sampling rate of 0.0 using the db.adminCommand method.

LANGUAGE: javascript
CODE:
db.adminCommand( {
  setParameter: 1,
  mirrorReads: { samplingRate: 0.0 }
} )

----------------------------------------

TITLE: Inserting Encrypted Document with MongoClient
DESCRIPTION: Code examples showing how to insert a document with encrypted fields into the medicalRecords.patients namespace using a Queryable Encryption enabled MongoClient. The client automatically handles field encryption before sending data to the server.

LANGUAGE: json
CODE:
{
  "note": "Code snippets reference external files and are not directly embedded in the documentation.
  Paths referenced include:
  - /includes/generated/in-use-encryption/queryable-encryption/node/exp/reader/insert_encrypted_document.js
  - /includes/generated/in-use-encryption/queryable-encryption/python/exp/reader/insert_encrypted_document.py
  - /includes/generated/in-use-encryption/queryable-encryption/java/exp/reader/src/main/java/com/mongodb/qe/InsertEncryptedDocument.java
  - /includes/generated/in-use-encryption/queryable-encryption/go/exp/reader/insert-encrypted-document.go
  - /includes/generated/in-use-encryption/queryable-encryption/dotnet/exp/reader/QueryableEncryption/InsertEncryptedDocument.cs
  - /includes/queryable-encryption/tutorials/exp/inserted-doc-enc.json"
}

----------------------------------------

TITLE: MongoDB $in Operator Result Example
DESCRIPTION: Example results from the aggregation pipeline showing boolean values indicating presence of 'bananas' in each store.

LANGUAGE: javascript
CODE:
{ "_id" : 1, "store location" : "24th Street", "has bananas" : true }
{ "_id" : 2, "store location" : "36th Street", "has bananas" : true }
{ "_id" : 3, "store location" : "82nd Street", "has bananas" : false }

----------------------------------------

TITLE: Defining MongoDB Client Encryption Dependency in RST
DESCRIPTION: This RST code snippet defines a list table with header rows and column widths to document the MongoDB client encryption dependency. It includes the dependency name and a description of its functionality.

LANGUAGE: rst
CODE:
.. list-table::
    :header-rows: 1
    :widths: 30 70

    * - Dependency Name
      - Description

    * - `mongodb-client-encryption
        <https://www.npmjs.com/package/mongodb-client-encryption>`_
      
      - NodeJS wrapper for the ``libmongocrypt`` encryption library.
        The ``libmongocrypt`` library contains bindings to communicate
        with the native library that manages the encryption.

        .. include:: /includes/in-use-encryption/node-mongodb-client-encryption-note.rst

----------------------------------------

TITLE: Certificate Rotation with Custom Log Message in MongoDB
DESCRIPTION: Example of executing the rotateCertificates command with a custom message that will be written to the log and audit files.

LANGUAGE: javascript
CODE:
db.adminCommand( { rotateCertificates: 1, message: "Rotating certificates" } )

----------------------------------------

TITLE: Configuring GCP KMS Provider for MongoDB Encryption in Node.js
DESCRIPTION: This code sets up the GCP KMS provider for MongoDB Client-Side Field Level Encryption in Node.js. It includes the GCP project ID and the path to the service account key file.

LANGUAGE: javascript
CODE:
const kmsProviders = {
  gcp: {
    email: "my-email@my-project.iam.gserviceaccount.com",
    privateKey: "-----BEGIN PRIVATE KEY-----\n<your GCP service account private key>\n-----END PRIVATE KEY-----\n",
  },
};

----------------------------------------

TITLE: Sample MongoDB Configuration File
DESCRIPTION: A basic sample configuration file for MongoDB showing some common options

LANGUAGE: yaml
CODE:
systemLog:
   destination: file
   path: "/var/log/mongodb/mongod.log"
   logAppend: true
processManagement:
   fork: true
net:
   bindIp: 127.0.0.1
   port: 27017
setParameter:
   enableLocalhostAuthBypass: false
storage:
   dbPath: "/var/lib/mongo"
   journal:
      enabled: true
security:
   authorization: enabled

----------------------------------------

TITLE: Sample Output for Non-Sharded Instance in MongoDB
DESCRIPTION: This code block shows the expected output when shardingState is run on a mongod instance that is not part of a sharded cluster. It includes a simplified response with the enabled status set to false.

LANGUAGE: javascript
CODE:
{
  "enabled" : false,
  "ok" : 1,
  "$clusterTime" : {
     "clusterTime" : Timestamp({t:1510716515, i: 1}),
     "signature" : {
        "hash" : BinData(0,"B2ViX7XLzFLS5Fl9XEuFXbwKIM4="),
        "keyId" : NumberLong("6488045157173166092")
     }
  },
  "operationTime" : Timestamp({t: 1510716515, i: 1})
}

----------------------------------------

TITLE: Adding Query Settings in MongoDB
DESCRIPTION: This snippet demonstrates how to add query settings using the setQuerySettings command, including index hints and query framework settings.

LANGUAGE: javascript
CODE:
db.adminCommand( {
   setQuerySettings: {
      find: "pizzaOrders",
      filter: {
         orderDate: { $gt: ISODate( "2024-01-20T00:00:00Z" ) }
      },
      sort: {
         totalNumber: 1
      },
      $db: "test"
   },
   settings: {
      indexHints: {
         ns: { db: "test", coll: "pizzaOrders" },
         allowedIndexes: [ "orderDate_1" ]
      },
      queryFramework: "classic",
      comment: "Index hint for orderDate_1 index to improve query performance"
   }
} )

----------------------------------------

TITLE: Updating Replica Set Configuration with New Hostname
DESCRIPTION: JavaScript code to update the hostname of a secondary member in the replica set configuration using rs.reconfig() method.

LANGUAGE: javascript
CODE:
cfg = rs.conf()
cfg.members[1].host = "mongodb1.example.net:27017"
rs.reconfig(cfg)

----------------------------------------

TITLE: $geoNear with Bound 'let' Option in $lookup
DESCRIPTION: Shows how to use a bound 'let' variable in a $lookup stage to perform a $geoNear operation on a related collection, using the location from the main document as the center point.

LANGUAGE: javascript
CODE:
db.places.aggregate( [
   {
      $lookup: {
         from: "places",
         let: { pt: "$location" },
         pipeline: [
            {
               $geoNear: {
                  near: "$$pt",
                  distanceField: "distance"
               }
            }
         ],
         as: "joinedField"
      }
   },
   { 
      $match: { name: "Sara D. Roosevelt Park" }
   }
] )

----------------------------------------

TITLE: Example Plan Cache Query Shape in MongoDB JavaScript
DESCRIPTION: Shows an example of a plan cache query shape in MongoDB, including query, sort, projection, and planCacheShapeHash.

LANGUAGE: javascript
CODE:
{
  "query" : { "qty" : { "$gt" : 10 } },
  "sort" : { "ord_date" : 1 },
  "projection" : { },
  "planCacheShapeHash" : "9AAD95BE" 
}

----------------------------------------

TITLE: Sample Data for MongoDB $switch Example
DESCRIPTION: Example collection data showing student grades used in the comprehensive example.

LANGUAGE: javascript
CODE:
{ "_id" : 1, "name" : "Susan Wilkes", "scores" : [ 87, 86, 78 ] }
{ "_id" : 2, "name" : "Bob Hanna", "scores" : [ 71, 64, 81 ] }
{ "_id" : 3, "name" : "James Torrelio", "scores" : [ 91, 84, 97 ] }

----------------------------------------

TITLE: Example Document in MongoDB system.users Collection
DESCRIPTION: This snippet provides a comprehensive example of a document in the system.users collection. It demonstrates the structure with actual values, including user details, credentials, authentication restrictions, custom data, and roles.

LANGUAGE: javascript
CODE:
{
   "_id" : "home.Kari",
   "userId" : UUID("ec1eced7-055a-4ca8-8737-60dd02c52793"), 
   "user" : "Kari",
   "db" : "home",
   "credentials" : {
      "SCRAM-SHA-1" : {
         "iterationCount" : 10000,
         "salt" : "S/xM2yXFosynbCu4GzFDgQ==",
         "storedKey" : "Ist4cgpEd1vTbnRnQLdobgmOsBA=",
         "serverKey" : "e/0DyzS6GPboAA2YNBkGYm87+cg="
      },
      "SCRAM-SHA-256" : {
         "iterationCount" : 15000,
         "salt" : "p1G+fZadAeYAbECN8F/6TMzXGYWBaZ3DtWM0ig==",
         "storedKey" : "LEgLOqZQmkGhd0owm/+6V7VdJUYJcXBhPUvi9z+GBfk=",
         "serverKey" : "JKfnkVv9iXwxyc8JaapKVwLPy6SfnmB8gMb1Pr15T+s="
      }
   },
   "authenticationRestrictions" : [  
      { "clientSource" : [ "69.89.31.226" ], "serverAddress" : [ "172.16.254.1" ] }
   ], 
   "customData" : {
      "zipCode" : "64157"
   },
   "roles" : [
      {
         "role" : "read",
         "db" : "home"
      },
      {
         "role" : "readWrite",
         "db" : "test"
      }
   ]
}

----------------------------------------

TITLE: Example Output of getUsers
DESCRIPTION: Sample output showing the structure of the response when retrieving user information without custom data.

LANGUAGE: javascript
CODE:
{
   users: [
     {
       _id: 'products.accountAdmin01',
       userId: UUID("0955afc1-303c-4683-a029-8e17dd5501f4"),
       user: 'accountAdmin01',
       db: 'products',
       roles: [ { role: 'readWrite', db: 'products' } ],
       mechanisms: [ 'SCRAM-SHA-1', 'SCRAM-SHA-256' ]
     }
   ],
   ok: 1
}

----------------------------------------

TITLE: MongoDB $bottom Multiple Games Query
DESCRIPTION: Aggregation pipeline showing how to find bottom scores across multiple games.

LANGUAGE: javascript
CODE:
db.gamescores.aggregate( [
      {
         $group:
         { _id: "$gameId", playerId:
            {
               $bottom:
                  {
                     output: [ "$playerId", "$score" ],
                     sortBy: { "score": -1 }
                  }
            }
         }
      }
] )

----------------------------------------

TITLE: Importing Windows Firewall Rules
DESCRIPTION: This command imports Windows Firewall rules from a previously exported file.

LANGUAGE: bat
CODE:
netsh advfirewall import "C:\temp\MongoDBfw.wfw"

----------------------------------------

TITLE: Enabling Internal Authorization via Command Line
DESCRIPTION: This snippet demonstrates how to enable internal authorization by setting useAuthorizationClaim to false using command line parameters. This configuration relies on user documents for authorization rights.

LANGUAGE: shell
CODE:
mongod --auth --setParameter authenticationMechanisms=MONGODB-OIDC --setParameter \ 
'oidcIdentityProviders=[ { 
   "issuer": "https://okta-test.okta.com", 
        "audience": "example@kernel.mongodb.com",
        "authNamePrefix": "okta-issuer",
        "matchPattern": "@mongodb.com$",
        "useAuthorizationClaim": "false",
        "JWKSPollSecs": 86400
   } ]'

----------------------------------------

TITLE: Sample MongoDB Collection Data for $ne Operator Example
DESCRIPTION: Provides sample document data for an 'inventory' collection to be used in the $ne operator example. Each document contains an _id, item, description, and qty field.

LANGUAGE: javascript
CODE:
{ "_id" : 1, "item" : "abc1", description: "product 1", qty: 300 }
{ "_id" : 2, "item" : "abc2", description: "product 2", qty: 200 }
{ "_id" : 3, "item" : "xyz1", description: "product 3", qty: 250 }
{ "_id" : 4, "item" : "VWZ1", description: "product 4", qty: 300 }
{ "_id" : 5, "item" : "VWZ2", description: "product 5", qty: 180 }

----------------------------------------

TITLE: Basic $binarySize Syntax in MongoDB Aggregation
DESCRIPTION: Demonstrates the basic syntax for using the $binarySize operator in MongoDB aggregation pipeline.

LANGUAGE: javascript
CODE:
{ $binarySize: <string or binData> }

----------------------------------------

TITLE: Count All Records in MongoDB
DESCRIPTION: MongoDB aggregation pipeline to count all records in the 'orders' collection, equivalent to SQL's COUNT(*) operation.

LANGUAGE: javascript
CODE:
db.orders.aggregate( [
   {
     $group: {
        _id: null,
        count: { $sum: 1 }
     }
   }
] )

----------------------------------------

TITLE: Configuring AWS KMS Providers in Go
DESCRIPTION: This snippet illustrates how to set up KMS providers for AWS in a Go application. It creates a map with the AWS access key ID and secret access key needed for AWS KMS authentication.

LANGUAGE: go
CODE:
kmsProviders := map[string]map[string]interface{}{
    "aws": {
        "accessKeyId":     "<Your AWS Access Key ID>",
        "secretAccessKey": "<Your AWS Secret Access Key>",
    },
}

----------------------------------------

TITLE: Creating MongoDB Collection with Price Validation
DESCRIPTION: Creates a collection with schema validation that ensures totalWithVAT field equals total * (1 + VAT). Uses $expr operator to compare calculated values.

LANGUAGE: javascript
CODE:
db.createCollection( "orders",
   {
      validator: { 
         $expr:
            { 
               $eq: [
                  "$totalWithVAT",
                  { $multiply: [ "$total", { $sum:[ 1, "$VAT" ] } ] }
               ]
            }
      }
   }
)

----------------------------------------

TITLE: Inserting Cake Sales Data with Duplicates in MongoDB (JavaScript)
DESCRIPTION: This code snippet uses the insertMany() method to create a new collection called 'cakeSalesWithDuplicates' in MongoDB. It inserts 12 documents with various cake sale details, including some with duplicate quantities and states, a null quantity, and a missing quantity field.

LANGUAGE: javascript
CODE:
db.cakeSalesWithDuplicates.insertMany( [
   { _id: 0, type: "chocolate", orderDate: new Date("2020-05-18T14:10:30Z"),
     state: "CA", price: 13, quantity: 120 },
   { _id: 1, type: "chocolate", orderDate: new Date("2021-03-20T11:30:05Z"),
     state: "WA", price: 14, quantity: 140 },
   { _id: 2, type: "vanilla", orderDate: new Date("2021-01-11T06:31:15Z"),
     state: "CA", price: 12, quantity: 145 },
   { _id: 3, type: "vanilla", orderDate: new Date("2020-02-08T13:13:23Z"),
     state: "WA", price: 13, quantity: 104 },
   { _id: 4, type: "strawberry", orderDate: new Date("2019-05-18T16:09:01Z"),
     state: "CA", price: 41, quantity: 162 },
   { _id: 5, type: "strawberry", orderDate: new Date("2019-01-08T06:12:03Z"),
     state: "WA", price: 43, quantity: 134 },
   { _id: 6, type: "strawberry", orderDate: new Date("2020-01-08T06:12:03Z"),
     state: "WA", price: 41, quantity: 134 },
   { _id: 7, type: "strawberry", orderDate: new Date("2020-01-01T06:12:03Z"),
     state: "WA", price: 34, quantity: 134 },
   { _id: 8, type: "strawberry", orderDate: new Date("2020-01-02T06:12:03Z"),
     state: "WA", price: 40, quantity: 134 },
   { _id: 9, type: "strawberry", orderDate: new Date("2020-05-11T16:09:01Z"),
     state: "CA", price: 39, quantity: 162 },
   { _id: 10, type: "strawberry", orderDate: new Date("2020-05-11T16:09:01Z"),
     state: "CA", price: 39, quantity: null },
   { _id: 11, type: "strawberry", orderDate: new Date("2020-05-11T16:09:01Z"),
     state: "CA", price: 39 }
] )

----------------------------------------

TITLE: Inserting User Data for StdDevPop Example
DESCRIPTION: Creates a users collection with sample quiz scores to demonstrate $stdDevPop usage in $group stage.

LANGUAGE: javascript
CODE:
db.users.insertMany( [
   { _id : 1, name : "dave123", quiz : 1, score : 85 },
   { _id : 2, name : "dave2", quiz : 1, score : 90 },
   { _id : 3, name : "ahn", quiz : 1, score : 71 },
   { _id : 4, name : "li", quiz : 2, score : 96 },
   { _id : 5, name : "annT", quiz : 2, score : 77 },
   { _id : 6, name : "ty", quiz : 2, score : 82 }
] )

----------------------------------------

TITLE: Inserting Sample Spice Collection Data
DESCRIPTION: Example showing how to insert multiple documents into a spices collection for demonstrating $exists queries.

LANGUAGE: javascript
CODE:
db.spices.insertMany( [
   { saffron: 5, cinnamon: 5, mustard: null },
   { saffron: 3, cinnamon: null, mustard: 8 },
   { saffron: null, cinnamon: 3, mustard: 9 },
   { saffron: 1, cinnamon: 2, mustard: 3 },
   { saffron: 2, mustard: 5 },
   { saffron: 3, cinnamon: 2 },
   { saffron: 4 },
   { cinnamon: 2, mustard: 4 },
   { cinnamon: 2 },
   { mustard: 6 }
] )

----------------------------------------

TITLE: Unsharding MongoDB Collection Example
DESCRIPTION: Shows a practical example of unsharding an 'inventory' collection from the 'app' database and moving its data to 'shard02'.

LANGUAGE: javascript
CODE:
sh.unshardCollection( "app.inventory", "shard02" )

----------------------------------------

TITLE: Querying Array Elements with Range Conditions in MongoDB Shell
DESCRIPTION: Demonstrates how to query documents where the qty field within the instock array matches specific range conditions using the MongoDB shell.

LANGUAGE: javascript
CODE:
db.inventory.find( { "instock.qty": { $gt: 10,  $lte: 20 } } )

----------------------------------------

TITLE: MongoDB Collection Data Example
DESCRIPTION: Sample collection data showing sales records across different years.

LANGUAGE: javascript
CODE:
{ _id: 1, year: "2000", sales: 8700000 }
{ _id: 2, year: "2005", sales: 5000000 }
{ _id: 3, year: "2010", sales: 6250000 }

----------------------------------------

TITLE: Executing MongoDB Balancer Status Command in JavaScript
DESCRIPTION: Command syntax for checking the status of the MongoDB balancer. Must be run against the admin database through a mongos instance.

LANGUAGE: javascript
CODE:
db.adminCommand( 
   { 
     balancerStatus: 1 
   } 
)

----------------------------------------

TITLE: Creating GridFS Chunks Index in MongoDB
DESCRIPTION: Command to create a unique compound index on the chunks collection using files_id and n fields for efficient chunk retrieval.

LANGUAGE: javascript
CODE:
db.fs.chunks.createIndex( { files_id: 1, n: 1 }, { unique: true } );

----------------------------------------

TITLE: DeleteMany with Index Hint in MongoDB
DESCRIPTION: Example demonstrating the use of index hints with deleteMany() operations

LANGUAGE: javascript
CODE:
db.members.deleteMany(
   { "points": { $lte: 20 }, "status": "P" }, 
   { hint: { status: 1 } }
)

----------------------------------------

TITLE: Querying MongoDB with Projection in C#
DESCRIPTION: This snippet demonstrates how to query MongoDB with projection using the C# driver.

LANGUAGE: csharp
CODE:
// Start Example 45
// End Example 45

----------------------------------------

TITLE: Example Output of MongoDB top Command
DESCRIPTION: This snippet shows an example of the output returned by the top command. It includes usage statistics for various operations on a collection named 'records.users'.

LANGUAGE: javascript
CODE:
{
  "totals" : {
     note: "all times in microseconds",
     "records.users" : {
                  "total" : {
                          "time" : 305277,
                          "count" : 2825
                  },
                  "readLock" : {
                          "time" : 305264,
                          "count" : 2824
                  },
                  "writeLock" : {
                          "time" : 13,
                          "count" : 1
                  },
                  "queries" : {
                          "time" : 305264,
                          "count" : 2824
                  },
                  "getmore" : {
                          "time" : 0,
                          "count" : 0
                  },
                  "insert" : {
                          "time" : 0,
                          "count" : 0
                  },
                  "update" : {
                          "time" : 0,
                          "count" : 0
                  },
                  "remove" : {
                          "time" : 0,
                          "count" : 0
                  },
                  "commands" : {
                          "time" : 0,
                          "count" : 0
                  }
          }
}

----------------------------------------

TITLE: Using $shift with Positive Integer in MongoDB Aggregation
DESCRIPTION: Example of using $shift in a $setWindowFields stage to output the quantity of cake sales from each document following the current document for each state. It demonstrates partitioning by state and sorting by quantity.

LANGUAGE: javascript
CODE:
db.cakeSales.aggregate( [
   {
      $setWindowFields: {
         partitionBy: "$state",
         sortBy: { quantity: -1 },
         output: {
            shiftQuantityForState: {
               $shift: {
                  output: "$quantity",
                  by: 1,
                  default: "Not available"
               }
            }
         }
      }
   }
] )

----------------------------------------

TITLE: Executing checkMetadataConsistency Method in MongoDB
DESCRIPTION: This snippet demonstrates the syntax for calling the checkMetadataConsistency() method on a MongoDB collection. It takes an options document as a parameter and returns a cursor with inconsistency results.

LANGUAGE: javascript
CODE:
db.collection.checkMetadataConsistency( { <options> } )

----------------------------------------

TITLE: Executing db.shutdownServer() Method in MongoDB
DESCRIPTION: This snippet demonstrates the basic syntax for the db.shutdownServer() method. It takes optional parameters for force shutdown and timeout duration.

LANGUAGE: javascript
CODE:
db.shutdownServer({ 
  force: <boolean>,
  timeoutSecs: <int> 
})

----------------------------------------

TITLE: Viewing MongoDB Profiling Status in JavaScript
DESCRIPTION: This snippet demonstrates how to retrieve the current profiling level in MongoDB using the db.getProfilingStatus() method. It's used to check the current profiling configuration for performance monitoring and diagnostics.

LANGUAGE: javascript
CODE:
db.getProfilingStatus()

----------------------------------------

TITLE: MongoDB $size Operator Basic Syntax
DESCRIPTION: Basic syntax example for the MongoDB $size operator used in aggregation pipelines.

LANGUAGE: javascript
CODE:
{ $size: <expression> }

----------------------------------------

TITLE: Inserting Sample Data into MongoDB Collection
DESCRIPTION: Demonstrates inserting multiple documents into an 'inventory' collection using the insertMany() method.

LANGUAGE: javascript
CODE:
db.inventory.insertMany( [
   { "_id" : 1, "item" : "ABC1", quarter: "13Q1", "description" : "product 1" },
   { "_id" : 2, "item" : "ABC2", quarter: "13Q4", "description" : "product 2" },
   { "_id" : 3, "item" : "XYZ1", quarter: "14Q2", "description" : null } 
] )

----------------------------------------

TITLE: Specifying a Database with db.getSiblingDB() in MongoDB
DESCRIPTION: This snippet demonstrates how to use db.getSiblingDB() to set the db object to point to a specific database and then perform an operation on a collection within that database.

LANGUAGE: javascript
CODE:
db = db.getSiblingDB('users')
db.active.countDocuments()

----------------------------------------

TITLE: Simple Document Replacement Example
DESCRIPTION: Example showing how to replace a document matching a specific name criteria.

LANGUAGE: javascript
CODE:
try {
   db.restaurant.replaceOne(
      { "name" : "Central Perk Cafe" },
      { "name" : "Central Pork Cafe", "Borough" : "Manhattan" }
   );
} catch (e){
   print(e);
}

----------------------------------------

TITLE: Sample Documents for Rounding Behavior
DESCRIPTION: Example documents demonstrating rounding behavior with values ending in .5

LANGUAGE: javascript
CODE:
{_id : 1, "value" : 10.5},
{_id : 2, "value" : 11.5},
{_id : 3, "value" : 12.5},
{_id : 4, "value" : 13.5}

----------------------------------------

TITLE: Granting Access Control for Dropping Search Indexes in MongoDB
DESCRIPTION: This example shows how to grant the readWrite role on a specific database, which includes the necessary dropSearchIndex privilege for deleting search indexes.

LANGUAGE: javascript
CODE:
db.grantRolesToUser(
   "<user>",
   [ { role: "readWrite", db: "qa" } ]
)

----------------------------------------

TITLE: Killing All MongoDB Sessions
DESCRIPTION: This example shows how to use the killAllSessionsByPattern command to terminate all sessions by passing an empty array as the pattern.

LANGUAGE: javascript
CODE:
db.runCommand( { killAllSessionsByPattern: [ ] } )

----------------------------------------

TITLE: Removing Zone Range with Simple Shard Key in MongoDB
DESCRIPTION: Example showing how to remove a range from a zone using a simple shard key {a: 1} with specific bounds from 1 to 10.

LANGUAGE: javascript
CODE:
sh.removeRangeFromZone( "exampledb.collection",
                   { a : 1 },
                   { a : 10 }
                 )

----------------------------------------

TITLE: Defining $substrBytes Operator in MongoDB Aggregation
DESCRIPTION: Syntax for using the $substrBytes operator in MongoDB aggregation pipelines. It takes a string expression, byte index, and byte count as parameters.

LANGUAGE: javascript
CODE:
{ $substrBytes: [ <string expression>, <byte index>, <byte count> ] }

----------------------------------------

TITLE: Basic $tan Operator Syntax
DESCRIPTION: Shows the basic syntax for using the $tan operator in MongoDB aggregation pipeline.

LANGUAGE: javascript
CODE:
{ $tan: <expression> }

----------------------------------------

TITLE: Printing MongoDB Secondary Replication Status
DESCRIPTION: Method to print a formatted report of the replica set status from the perspective of the secondary member. Provides identical output to rs.printSecondaryReplicationInfo().

LANGUAGE: javascript
CODE:
db.printSecondaryReplicationInfo()

----------------------------------------

TITLE: MongoDB fsyncLock Success Response
DESCRIPTION: Example response document returned when the fsyncLock operation succeeds, showing lock count and status information.

LANGUAGE: javascript
CODE:
{
   "info" : "now locked against writes, use db.fsyncUnlock() to unlock",
   "lockCount" : NumberLong(1),
   "seeAlso" : "http://dochub.mongodb.org/core/fsynccommand",
   "ok" : 1
}

----------------------------------------

TITLE: Querying Encrypted Documents with C#
DESCRIPTION: This snippet illustrates how to query for a document with encrypted fields using C#. It shows the query process with and without automatic Queryable Encryption configuration.

LANGUAGE: csharp
CODE:
// Find the document with automatic encryption
var encryptedResult = await encryptedCollection.Find(Builders<BsonDocument>.Filter.Eq("encryptedField", "123456789")).FirstOrDefaultAsync();
Console.WriteLine($"Document retrieved with automatic encryption: {encryptedResult}");

// Find the document without automatic encryption
var unencryptedResult = await unencryptedCollection.Find(Builders<BsonDocument>.Filter.Eq("encryptedField", "123456789")).FirstOrDefaultAsync();
Console.WriteLine($"Document retrieved without automatic encryption: {unencryptedResult}");

----------------------------------------

TITLE: Results of $floor Operation in MongoDB Aggregation
DESCRIPTION: Shows the expected output from the previous aggregation pipeline example. Each document now includes both the original 'value' and the new 'floorValue' field, which is the result of applying the $floor operator.

LANGUAGE: javascript
CODE:
{ "_id" : 1, "value" : 9.25, "floorValue" : 9 }
{ "_id" : 2, "value" : 8.73, "floorValue" : 8 }
{ "_id" : 3, "value" : 4.32, "floorValue" : 4 }
{ "_id" : 4, "value" : -5.34, "floorValue" : -6 }

----------------------------------------

TITLE: Alternative $cond Syntax in MongoDB Aggregation (JavaScript)
DESCRIPTION: Shows an alternative way to use the $cond operator in a MongoDB aggregation pipeline, using the array syntax. This example produces the same result as the previous one.

LANGUAGE: javascript
CODE:
db.inventory.aggregate(
   [
      {
         $project:
           {
             item: 1,
             discount:
               {
                 $cond: [ { $gte: [ "$qty", 250 ] }, 30, 20 ]
               }
           }
      }
   ]
)

----------------------------------------

TITLE: Role Definition Structure in MongoDB
DESCRIPTION: Demonstrates the structure for defining a new role including privileges, inherited roles, and authentication restrictions.

LANGUAGE: javascript
CODE:
{
  role: "<name>",
  privileges: [
     { resource: { <resource> }, actions: [ "<action>", ... ] },
     ...
  ],
  roles: [
     { role: "<role>", db: "<database>" } | "<role>",
      ...
  ],
  authenticationRestrictions: [
    {
      clientSource: ["<IP>" | "<CIDR range>", ...],
      serverAddress: ["<IP>" | "<CIDR range>", ...]
    },
    ...
  ]
}

----------------------------------------

TITLE: Executing dropDatabase Command Syntax
DESCRIPTION: Basic syntax for the dropDatabase command showing optional fields for writeConcern and comment parameters. The command deletes the current database and its data files.

LANGUAGE: javascript
CODE:
db.runCommand(
   {   
     dropDatabase: 1, 
     writeConcern: <document>, 
     comment: <any> 
   }
)

----------------------------------------

TITLE: Example Document in MongoDB Config Changelog Collection
DESCRIPTION: Sample document structure from the config.changelog collection, which stores records of changes to sharded collection metadata. This example shows a chunk split operation.

LANGUAGE: javascript
CODE:
{
 "_id" : "<hostname>-<timestamp>-<increment>",
 "server" : "<hostname><:port>",
 "clientAddr" : "127.0.0.1:63381",
 "time" : ISODate("2012-12-11T14:09:21.039Z"),
 "what" : "split",
 "ns" : "<database>.<collection>",
 "details" : {
    "before" : {
       "min" : {
          "<database>" : { $minKey : 1 }
       },
       "max" : {
          "<database>" : { $maxKey : 1 }
       },
       "lastmod" : Timestamp(1000, 0),
       "lastmodEpoch" : ObjectId("000000000000000000000000")
    },
    "left" : {
       "min" : {
          "<database>" : { $minKey : 1 }
       },
       "max" : {
          "<database>" : "<value>"
       },
       "lastmod" : Timestamp(1000, 1),
       "lastmodEpoch" : ObjectId(<...>)
    },
    "right" : {
       "min" : {
          "<database>" : "<value>"
       },
       "max" : {
          "<database>" : { $maxKey : 1 }
       },
       "lastmod" : Timestamp(1000, 2),
       "lastmodEpoch" : ObjectId("<...>")
    },
    "owningShard" : "<value>"
 }
}

----------------------------------------

TITLE: Distinct Values for Array Field
DESCRIPTION: Example showing how to get distinct values from an array field (sizes).

LANGUAGE: javascript
CODE:
db.inventory.distinct( "sizes" )

----------------------------------------

TITLE: Sample Pages Data Insertion
DESCRIPTION: Inserting sample page data into MongoDB for filtering example.

LANGUAGE: javascript
CODE:
db.pages.insertOne( {
  "category": "unix",
  "pages": [
    { "title": "awk for beginners", reviews: 5 },
    { "title": "sed for newbies", reviews: 0 },
    { "title": "grep made simple", reviews: 2 },
] } )

----------------------------------------

TITLE: Specifying Data Key Options for GCP KMS in Go
DESCRIPTION: This code defines the options for creating a Data Encryption Key (DEK) using GCP KMS in Go. It specifies the master key's project ID, location, key ring, and key name.

LANGUAGE: go
CODE:
dataKeyOpts := options.DataKey().SetMasterKey(bson.M{
    "projectId": "<Your Google Project ID>",
    "location":  "<Your Google Cloud location>",
    "keyRing":   "<Your Key Ring name>",
    "keyName":   "<Your Key name>",
})

----------------------------------------

TITLE: MongoDB Balancer Lock Query
DESCRIPTION: Command to check the balancer lock status in a sharded cluster's config database

LANGUAGE: javascript
CODE:
db.locks.find( { _id : "balancer" } )

----------------------------------------

TITLE: Update with Write Concern
DESCRIPTION: An example of specifying write concern options when performing an update.

LANGUAGE: javascript
CODE:
try {
   db.restaurant.updateOne(
       { "name" : "Pizza Rat's Pizzaria" },
       { $inc: { "violations" : 3}, $set: { "Closed" : true } },
       { w: "majority", wtimeout: 100 }
   );
} catch (e) {
   print(e);
}

----------------------------------------

TITLE: Single Argument MongoDB Expression Operator Syntax
DESCRIPTION: Demonstrates the simplified syntax for MongoDB expression operators that accept a single argument, where the outer array can be omitted.

LANGUAGE: javascript
CODE:
{ <operator>: <argument> }

----------------------------------------

TITLE: Sample Data Insertion
DESCRIPTION: Creates a sample 'orders' collection with various shipped status values to demonstrate boolean conversion

LANGUAGE: javascript
CODE:
db.orders.insertMany( [
   { _id: 1, item: "apple",  qty: 5, shipped: true },
   { _id: 2, item: "pie",  qty: 10, shipped: 0  },
   { _id: 3, item: "ice cream", shipped: 1 },
   { _id: 4, item: "almonds", qty: 2, shipped: "true" },
   { _id: 5, item: "pecans", shipped: "false" },  // Note: All strings convert to true
   { _id: 6, item: "nougat", shipped: ""  }       // Note: All strings convert to true
] )

----------------------------------------

TITLE: Setting mongocryptd Port Configuration - Go
DESCRIPTION: Shows how to set the mongocryptd listening port in Go using a map of extra options.

LANGUAGE: go
CODE:
extraOptions := map[string]interface{}{
    "mongocryptdSpawnArgs": []string{
        "--port=30000",
    },
}

----------------------------------------

TITLE: Inefficient Distinct Query for Time Series Collections
DESCRIPTION: Example of a discouraged approach using distinct command to query unique meta.type values filtered by meta.project.

LANGUAGE: javascript
CODE:
db.foo.distinct("meta.type", {"meta.project": 10})

----------------------------------------

TITLE: Checking Config Shard Status in MongoDB
DESCRIPTION: Method syntax for checking config shard status. Takes no parameters and returns a status object.

LANGUAGE: javascript
CODE:
sh.isConfigShardEnabled()

----------------------------------------

TITLE: Adding Custom MongoDB Port to SELinux Policy (Bash)
DESCRIPTION: This command adds a custom MongoDB port to the SELinux policy, allowing MongoDB to use a non-default port number.

LANGUAGE: bash
CODE:
sudo semanage port -a -t mongod_port_t -p tcp <portnumber>

----------------------------------------

TITLE: Creating Data Encryption Key with Alternate Name
DESCRIPTION: Examples showing how to create a Data Encryption Key (DEK) with an alternate name across different programming languages. Requires creating a partial unique index on keyAltNames field before execution.

LANGUAGE: python
CODE:
# Example implementation not shown in provided text

LANGUAGE: java
CODE:
# Example implementation not shown in provided text

LANGUAGE: javascript
CODE:
# Example implementation not shown in provided text

LANGUAGE: csharp
CODE:
# Example implementation not shown in provided text

LANGUAGE: go
CODE:
# Example implementation not shown in provided text

----------------------------------------

TITLE: Aggregation Pipeline for Order Statistics by SKU
DESCRIPTION: An aggregation pipeline that calculates order count, total quantity, and average quantity per order for each SKU, equivalent to the map-reduce operation, with date filtering and result merging.

LANGUAGE: javascript
CODE:
db.orders.aggregate( [
   { $match: { ord_date: { $gte: new Date("2020-03-01") } } },
   { $unwind: "$items" },
   { $group: { _id: "$items.sku", qty: { $sum: "$items.qty" }, orders_ids: { $addToSet: "$_id" } }  },
   { $project: { value: { count: { $size: "$orders_ids" }, qty: "$qty", avg: { $divide: [ "$qty", { $size: "$orders_ids" } ] } } } },
   { $merge: { into: "agg_alternative_3", on: "_id", whenMatched: "replace",  whenNotMatched: "insert" } }
] )

----------------------------------------

TITLE: Creating Sample Collection for $inc Example
DESCRIPTION: Creates a sample products collection with initial document to demonstrate $inc operation.

LANGUAGE: javascript
CODE:
db.products.insertOne(
   {
     _id: 1,
     sku: "abc123",
     quantity: 10,
     metrics: { orders: 2, ratings: 3.5 }
   }
)

----------------------------------------

TITLE: Sample Return Value of KeyVault.addKeyAlternateName() in MongoDB
DESCRIPTION: Illustrates the JSON structure returned by a successful call to KeyVault.addKeyAlternateName(). It shows the previous version of the data encryption key document, including fields like keyMaterial, creationDate, and masterKey.

LANGUAGE: json
CODE:
{
    "_id" : UUID("b4b41b33-5c97-412e-a02b-743498346079"),
    "keyMaterial" : BinData(0,"PXRsLOAYxhzTS/mFQAI8486da7BwZgqA91UI7NKz/T/AjB0uJZxTvhvmQQsKbCJYsWVS/cp5Rqy/FUX2zZwxJOJmI3rosPhzV0OI5y1cuXhAlLWlj03CnTcOSRzE/YIrsCjMB0/NyiZ7MRWUYzLAEQnE30d947XCiiHIb8a0kt2SD0so8vZvSuP2n0Vtz4NYqnzF0CkhZSWFa2e2yA=="),
    "creationDate" : ISODate("2019-08-12T21:21:30.569Z"),
    "updateDate" : ISODate("2019-08-12T21:21:30.569Z"),
    "status" : 0,
    "version" : NumberLong(0),
    "masterKey" : {
        "provider" : "local"
    },
    "keyAltNames" : [
    ]
}

----------------------------------------

TITLE: Creating a Zone Range in MongoDB
DESCRIPTION: This example demonstrates how to create a zone range for a sharded collection named 'exampledb.collection' with a shard key of { a : 1 }, associating the range [1, 10) with the 'alpha' zone.

LANGUAGE: javascript
CODE:
admin = db.getSiblingDB("admin")
admin.runCommand(
   {
      updateZoneKeyRange : "exampledb.collection",
      min : { a : 1 },
      max : { a : 10 },
      zone : "alpha"
   }
)

----------------------------------------

TITLE: Executing MongoDB profile Command
DESCRIPTION: Demonstrates the basic syntax for running the profile command to configure profiling settings.

LANGUAGE: javascript
CODE:
db.runCommand(
  {
    profile: <level>,
    slowms: <threshold>,
    sampleRate: <rate>,
    filter: <filter expression>
  }
)

----------------------------------------

TITLE: Updating Embedded Documents with Multiple Field Matches in MongoDB
DESCRIPTION: Shows how to use the positional $ operator in combination with $elemMatch to update an embedded document that matches multiple criteria. This example updates the standard deviation of a grade based on grade and mean values.

LANGUAGE: javascript
CODE:
db.students.updateOne(
   {
     _id: 5,
     grades: { $elemMatch: { grade: { $lte: 90 }, mean: { $gt: 80 } } }
   },
   { $set: { "grades.$.std" : 6 } }
)

----------------------------------------

TITLE: Initializing ClientEncryption and Decrypting Data in MongoDB
DESCRIPTION: This snippet demonstrates how to retrieve the ClientEncryption object and use the decrypt() method to decrypt a value that was previously encrypted using ClientEncryption.encrypt().

LANGUAGE: javascript
CODE:
clientEncryption = encryptedClient.getClientEncryption();

clientEncryption.decrypt(BinData(6,"AmTi2H3xaEk8u9+jlFNaLLkC3Q/+kmwDbbWrq+h9nuv9W+u7A5a0UnpULBNZH+Q21fAztPpU09wpKPrju9dKfpN1Afpj1/ZhFcH6LYZOWSBBOAuUNjPLxMNSYOOuITuuYWo="))

----------------------------------------

TITLE: Initial MongoDB Collection Data
DESCRIPTION: Sample inventory collection documents showing items with warehouse stock levels in embedded documents.

LANGUAGE: javascript
CODE:
{ "_id" : 1, "item" : "ABC1", instock: { warehouse1: 2500, warehouse2: 500 } }
{ "_id" : 2, "item" : "ABC2", instock: { warehouse2: 500, warehouse3: 200} }

----------------------------------------

TITLE: Sort and Replace Example
DESCRIPTION: Example demonstrating how to sort documents before replacing, replacing the document with the lowest score among those matching the filter.

LANGUAGE: javascript
CODE:
db.scores.findOneAndReplace(
   { "score" : { $lt : 20000 } },
   { "team" : "Observant Badgers", "score" : 20000 },
   { sort: { "score" : 1 } }
)

----------------------------------------

TITLE: Configuring Encrypted Fields in MongoDB Collections
DESCRIPTION: Configuration object that specifies encrypted fields in a MongoDB collection. Includes required fields like keyId, path, and bsonType, along with optional query settings. The configuration enables field-level encryption with support for specific query types.

LANGUAGE: javascript
CODE:
encryptedFieldsConfig = {
    "fields": [
      {
        "keyId": UUID,                    // required
        "path": String,                   // path to field, required
        "bsonType": "string" | "int" ..., // required
        "queries":                        // optional
        [ 
          { "queryType": "equality" },
        ]
      }
    ],
    "queryPatterns": [                    // optional
       {"fieldName": queryType, "fieldName": queryType, … }
    ]
}

----------------------------------------

TITLE: Attempting to Insert a Record with Write Block Enabled
DESCRIPTION: This snippet shows an attempt to insert a record into a collection when user write block is enabled. The operation will be blocked and result in an error.

LANGUAGE: javascript
CODE:
db.names.insertOne( { name: "George Washington Cable" } )

----------------------------------------

TITLE: Updating MongoDB Replica Set Member Configuration
DESCRIPTION: This JavaScript code snippet demonstrates how to update the priority and votes of a newly added replica set member using rs.conf() and rs.reconfig().

LANGUAGE: javascript
CODE:
var cfg = rs.conf();
cfg.members[4].priority = 1
cfg.members[4].votes = 1
rs.reconfig(cfg)

----------------------------------------

TITLE: Inserting Nested Arrays in MongoDB
DESCRIPTION: Example showing how to insert a document containing nested arrays of fruit inventories.

LANGUAGE: javascript
CODE:
db.fruits.insertOne(
   {
      _id: ObjectId("5ba53172ce6fa2fcfc58e0ac"),
      inventory: [
         {
            apples: [
               "macintosh",
               "golden delicious",
            ]
         },
         {
            oranges: [
               "mandarin",
            ]
         },
         {
            apples: [
               "braeburn",
               "honeycrisp",
            ]
         }
      ]
   }
)

----------------------------------------

TITLE: Sum Price Field in MongoDB
DESCRIPTION: MongoDB aggregation pipeline to sum the 'price' field across all documents in the 'orders' collection, equivalent to SQL's SUM() operation.

LANGUAGE: javascript
CODE:
db.orders.aggregate( [
   {
     $group: {
        _id: null,
        total: { $sum: "$price" }
     }
   }
] )

----------------------------------------

TITLE: Inserting Sample Data for MongoDB $pow Example
DESCRIPTION: Inserts sample quiz data into a MongoDB collection named 'quizzes'. This data will be used to demonstrate the $pow operator in an aggregation pipeline.

LANGUAGE: javascript
CODE:
db.quizzes.insertMany( [
   { 
      _id : 1, 
      scores : [
         { name : "dave123", score : 85 },
         { name : "dave2", score : 90 },
         { name : "ahn", score : 71 }
      ]
   },
   {
      _id : 2,
      scores : [
         { name : "li", quiz : 2, score : 96 },
         { name : "annT", score : 77 },
         { name : "ty", score : 82 }
      ]
   }
] )

----------------------------------------

TITLE: Specifying Shared Library Location for MongoDB CSFLE
DESCRIPTION: This snippet shows how to specify the location of the shared library for Client-Side Field Level Encryption across different programming languages.

LANGUAGE: java
CODE:
Map<String, Object> extraOptions = new HashMap<String, Object>();
extraOptions.put("cryptSharedLibPath", "/path/to/shared/library");

LANGUAGE: javascript
CODE:
const extraOptions = {
  cryptSharedLibPath: "/path/to/shared/library",
};

LANGUAGE: python
CODE:
extra_options = {
    "cryptSharedLibPath": "/path/to/shared/library"
}

LANGUAGE: csharp
CODE:
var extraOptions = new Dictionary<string, object>
{
    { "cryptSharedLibPath", "/path/to/shared/library" }
};

LANGUAGE: go
CODE:
extraOptions := map[string]interface{}{
	"cryptSharedLibPath": "/path/to/shared/library",
}

----------------------------------------

TITLE: Combining $match and $replaceRoot in MongoDB Aggregation
DESCRIPTION: Demonstrates using $match to filter documents before applying $replaceRoot, ensuring that only documents with a valid 'name' field are processed.

LANGUAGE: javascript
CODE:
db.collection.aggregate([
   { $match: { name : { $exists: true, $not: { $type: "array" }, $type: "object" } } },
   { $replaceRoot: { newRoot: "$name" } }
])

----------------------------------------

TITLE: Syntax for Aborting Resharding Collection in MongoDB
DESCRIPTION: Demonstrates the syntax for using the sh.abortReshardCollection() method to abort a resharding operation on a specified namespace.

LANGUAGE: javascript
CODE:
sh.abortReshardCollection( <namespace> )

----------------------------------------

TITLE: Checking Feature Compatibility Version in MongoDB
DESCRIPTION: Command to verify the current feature compatibility version setting before upgrading to MongoDB 8.0. Should return version 7.0 for successful upgrade.

LANGUAGE: javascript
CODE:
db.adminCommand( { getParameter: 1, featureCompatibilityVersion: 1 } )

----------------------------------------

TITLE: MongoDB $limit Stage Usage Example
DESCRIPTION: Shows a practical example of using the $limit stage in an aggregation pipeline to return only the first 5 documents from a collection named 'article'.

LANGUAGE: javascript
CODE:
db.article.aggregate([
   { $limit : 5 }
]);

----------------------------------------

TITLE: Unsupported Query Example for MongoDB Compound Index
DESCRIPTION: This snippet shows an example of a query that is not supported by the created compound index. It demonstrates that querying only on the 'gpa' field, which is not a prefix of the index, does not benefit from the index.

LANGUAGE: javascript
CODE:
db.students.find( { gpa: { $gt: 3.5 } } )

----------------------------------------

TITLE: Executing sh.abortMoveCollection() in MongoDB Shell
DESCRIPTION: This snippet demonstrates the syntax for calling the sh.abortMoveCollection() method to abort a collection movement operation. It requires specifying the namespace (database and collection) of the collection being moved.

LANGUAGE: javascript
CODE:
sh.abortMoveCollection( "<namespace>.<collection>" )

----------------------------------------

TITLE: Creating Single-Field Text Index in MongoDB
DESCRIPTION: Creates a text index on the 'content' field of the blog collection to enable text search functionality.

LANGUAGE: javascript
CODE:
db.blog.createIndex( { "content": "text" } )

----------------------------------------

TITLE: Renaming a Field Using MongoDB $rename
DESCRIPTION: Updates all documents where 'nmae' is not null, renaming the 'nmae' field to 'name' using the $rename operator.

LANGUAGE: javascript
CODE:
db.students.updateMany(
   { "nmae": { $ne: null } },
   { $rename: { "nmae": "name" } }
)

----------------------------------------

TITLE: Inserting Tree Nodes with Materialized Paths in MongoDB
DESCRIPTION: This snippet demonstrates how to insert multiple documents representing a tree structure using the Materialized Paths pattern. Each document contains an _id and a path field that stores the full ancestry path.

LANGUAGE: javascript
CODE:
db.categories.insertMany( [
   { _id: "Books", path: null },
   { _id: "Programming", path: ",Books," },
   { _id: "Databases", path: ",Books,Programming," },
   { _id: "Languages", path: ",Books,Programming," },
   { _id: "MongoDB", path: ",Books,Programming,Databases," },
   { _id: "dbm", path: ",Books,Programming,Databases," }
] )

----------------------------------------

TITLE: Defining a GeoJSON Polygon with Interior Ring in MongoDB
DESCRIPTION: Specifies a GeoJSON Polygon object with an exterior ring and an interior ring (hole). The first ring is the exterior, and subsequent rings define interior holes.

LANGUAGE: javascript
CODE:
{
  type : "Polygon",
  coordinates : [
     [ [ 0 , 0 ] , [ 3 , 6 ] , [ 6 , 1 ] , [ 0 , 0 ] ],
     [ [ 2 , 2 ] , [ 3 , 3 ] , [ 4 , 2 ] , [ 2 , 2 ] ]
  ]
}

----------------------------------------

TITLE: Invalid wildcardProjection Specification in MongoDB
DESCRIPTION: Shows an invalid wildcardProjection specification in MongoDB. This example attempts to use a wildcard within a nested field path, which is not supported.

LANGUAGE: javascript
CODE:
{ "path.to.field.$**" : 1 }

----------------------------------------

TITLE: Sample Trigonometry Document Structure
DESCRIPTION: Shows the structure of a document containing angle measurements in degrees using NumberDecimal type.

LANGUAGE: json
CODE:
{
  "angle_a" : NumberDecimal("53.13010235415597870314438744090659"),
  "angle_b" : NumberDecimal("36.86989764584402129685561255909341"),
  "angle_c" : NumberDecimal("90")
}

----------------------------------------

TITLE: Example getDefaultRWConcern Command Usage
DESCRIPTION: Demonstrates how to retrieve the currently configured global default read and write concern settings.

LANGUAGE: javascript
CODE:
db.adminCommand({
  "getDefaultRWConcern": 1
})

----------------------------------------

TITLE: Inserting a New Document with $setOnInsert in MongoDB
DESCRIPTION: This example shows how to use $setOnInsert to insert a new document when no matching document is found. It demonstrates setting a default quantity for a product while also using $set to specify other fields. The upsert option is set to true to allow document creation.

LANGUAGE: javascript
CODE:
db.products.updateOne(
  { _id: 1 },
  {
     $set: { item: "apple" },
     $setOnInsert: { defaultQty: 100 }
  },
  { upsert: true }
)

----------------------------------------

TITLE: Retrieving MongoDB Profiling Status
DESCRIPTION: Gets the current profiling configuration including profile level, slowOpThresholdMs, and slowOpSampleRate settings. Can also return any configured profiling filters if set through db.setProfilingLevel() or operationProfiling.filter configuration.

LANGUAGE: mongodb
CODE:
db.getProfilingStatus()

----------------------------------------

TITLE: Sample Results
DESCRIPTION: Example output showing original values and their corresponding ceiling values.

LANGUAGE: javascript
CODE:
{ "_id" : 1, "value" : 9.25, "ceilingValue" : 10 }
{ "_id" : 2, "value" : 8.73, "ceilingValue" : 9 }
{ "_id" : 3, "value" : 4.32, "ceilingValue" : 5 }
{ "_id" : 4, "value" : -5.34, "ceilingValue" : -5 }

----------------------------------------

TITLE: Deleting a Document in MongoDB using JavaScript
DESCRIPTION: This code snippet demonstrates how to delete the first document in a MongoDB collection where the 'status' field is equal to 'D'. It uses the deleteOne() method to perform the deletion operation.

LANGUAGE: javascript
CODE:
db.collection.deleteOne( { status: "D" } )

----------------------------------------

TITLE: Killing MongoDB Sessions for Specific Users and Roles
DESCRIPTION: This snippet demonstrates how to use the killAllSessionsByPattern command to terminate sessions based on a specific user ID (uid) and role. It combines multiple patterns in the array.

LANGUAGE: javascript
CODE:
db.runCommand( { killAllSessionsByPattern: [ 
   { "uid" : BinData(0,"oBRA45vMY78p1tv6kChjQPTdYsnCHi/kA/fFMZTIV1o=") },
   { roles: [ { role: "readWrite", db: "test" } ] }
] } )

----------------------------------------

TITLE: Checking Feature Compatibility Version
DESCRIPTION: Command to verify the feature compatibility version of cluster members is set to 6.0 before upgrade.

LANGUAGE: javascript
CODE:
db.adminCommand( { getParameter: 1, featureCompatibilityVersion: 1 } )

----------------------------------------

TITLE: Creating Unique Index for MongoDB Encryption Key Vault in Go
DESCRIPTION: This snippet shows how to create a unique index on the 'keyAltNames' field in the 'encryption.__keyVault' namespace using Go. It ensures that each key alternate name is unique within the key vault.

LANGUAGE: go
CODE:
_, err = keyVaultColl.Indexes().CreateOne(
	context.TODO(),
	mongo.IndexModel{
		Keys: bson.D{{Key: "keyAltNames", Value: 1}},
		Options: options.Index().
			Unique(true).
			PartialFilterExpression(bson.D{{Key: "keyAltNames", Value: bson.D{{Key: "$exists", Value: true}}}}),
	},
)

----------------------------------------

TITLE: Sample Output of $strcasecmp Aggregation in MongoDB
DESCRIPTION: Shows the expected output from the $strcasecmp aggregation operation, demonstrating the comparison results for different values.

LANGUAGE: javascript
CODE:
{ "_id" : 1, "item" : "ABC1", "comparisonResult" : -1 }
{ "_id" : 2, "item" : "ABC2", "comparisonResult" : 0 }
{ "_id" : 3, "item" : "XYZ1", "comparisonResult" : 1 }

----------------------------------------

TITLE: Defining RoutingTableRangeGap Inconsistency Format in MongoDB
DESCRIPTION: This snippet shows the format of a RoutingTableRangeGap inconsistency document in MongoDB. It includes the type, description, and details fields, with the details containing namespace, collectionUUID, and information about two chunks with a gap between them.

LANGUAGE: json
CODE:
{
   type: "RoutingTableRangeGap",
   description: "<string>",
   details: {
      namespace: "<string>",
      collectionUUID: <string>,
      chunkA: {<document>},
      chunkB: {<document>}
   }
}

----------------------------------------

TITLE: Example Output for $lte Query in MongoDB
DESCRIPTION: Shows the result document from the $lte query where quantity is less than or equal to 20.

LANGUAGE: javascript
CODE:
{
  _id: ObjectId("61ba453ffe687fce2f04241c"),
  item: 'washers',
  quantity: 10,
  carrier: { name: 'Shipit', fee: 1 }
}

----------------------------------------

TITLE: Using $currentOp Aggregation Stage in MongoDB
DESCRIPTION: Example of using the $currentOp aggregation stage with options. It takes an options document as its operand to control what information is returned.

LANGUAGE: javascript
CODE:
{ $currentOp: { allUsers: <boolean>, idleConnections: <boolean>, idleCursors: <boolean>, idleSessions: <boolean>, localOps: <boolean> } }

----------------------------------------

TITLE: Creating a Compound Secondary Index for Last Point Queries in MongoDB
DESCRIPTION: Demonstrates creating a compound secondary index on the metaField (ascending) and timeField (descending) for optimizing last point queries.

LANGUAGE: javascript
CODE:
db.sensorData.createIndex( { "metadata.sensorId": 1,  "timestamp": -1 } )

----------------------------------------

TITLE: Counting Documents with Query in MongoDB
DESCRIPTION: Example of using the count command with a query to count documents in the 'orders' collection where ord_dt is greater than a specific date.

LANGUAGE: javascript
CODE:
db.runCommand( { count:'orders',
                 query: { ord_dt: { $gt: new Date('01/01/2012') } }
               } )

----------------------------------------

TITLE: Sample Role Definition in RST Format
DESCRIPTION: Example of how a built-in role is documented in ReStructured Text format, showing privileges and actions

LANGUAGE: rst
CODE:
.. authrole:: read

   .. include:: /includes/extracts/built-in-roles-read.rst

   The role provides read access by granting the following :ref:`actions
   <security-user-actions>`:

   - :authaction:`changeStream`
   - :authaction:`collStats`
   - :authaction:`dbHash`
   - :authaction:`dbStats`
   - :authaction:`find`
   - :authaction:`killCursors`
   - :authaction:`listCollections`
   - :authaction:`listIndexes`
   - :authaction:`listSearchIndexes`

----------------------------------------

TITLE: Validating Sales Collection with validateDBMetadata
DESCRIPTION: This example demonstrates how to validate the 'sales' collection for strict compliance with API version 1, including deprecation errors in the output.

LANGUAGE: javascript
CODE:
db.runCommand( { 
  validateDBMetadata: 1, 
  apiParameters: { 
    version: "1", 
    strict: true, 
    deprecationErrors: true 
  }, 
  collection: "sales",
})

----------------------------------------

TITLE: Querying with Equality Expressions in MongoDB
DESCRIPTION: Demonstrates how to use equality expressions in MongoDB queries. This can be done using either the field:value syntax or the $eq operator.

LANGUAGE: mongodb
CODE:
field: value

LANGUAGE: mongodb
CODE:
{ field: { $eq: value } }

----------------------------------------

TITLE: Killing All Sessions for All Users in MongoDB
DESCRIPTION: This example shows how to use the killAllSessions command to terminate all sessions for all users in the system by passing an empty array.

LANGUAGE: javascript
CODE:
db.runCommand( { killAllSessions: [ ] } )

----------------------------------------

TITLE: MongoDB Document Schema Example
DESCRIPTION: Illustrates the schema of a document in the 'restaurants' collection, including fields for address, borough, cuisine, grades, and restaurant information.

LANGUAGE: javascript
CODE:
{
   "_id" : ObjectId("564f3a35b385149fc7e3fab9"),
   "address" : {
      "building" : "2780",
      "coord" : [
         -73.98241999999999,
         40.579505
      ],
      "street" : "Stillwell Avenue",
      "zipcode" : "11224"
   },
   "borough" : "Brooklyn",
   "cuisine" : "American ",
   "grades" : [
      {
         "date" : ISODate("2014-06-10T00:00:00Z"),
         "grade" : "A",
         "score" : 5
      },
      {
         "date" : ISODate("2013-06-05T00:00:00Z"),
         "grade" : "A",
         "score" : 7
      }
   ],
   "name" : "Riviera Caterer",
   "restaurant_id" : "40356018"
}

----------------------------------------

TITLE: MongoDB Collection Sample Data
DESCRIPTION: Sample document structure showing a fruit inventory collection with location and in_stock array fields.

LANGUAGE: javascript
CODE:
{ "_id" : 1, "location" : "24th Street",
  "in_stock" : [ "apples", "oranges", "bananas" ] }
{ "_id" : 2, "location" : "36th Street",
  "in_stock" : [ "bananas", "pears", "grapes" ] }
{ "_id" : 3, "location" : "82nd Street",
  "in_stock" : [ "cantaloupes", "watermelons", "apples" ] }

----------------------------------------

TITLE: Executing MongoDB Transaction with Error Handling (JavaScript)
DESCRIPTION: Demonstrates a complete transaction flow including starting a session, executing operations within a transaction, and handling potential errors including transaction abort.

LANGUAGE: javascript
CODE:
function updateEmployeeInfo(session) {
   employeesCollection = session.getDatabase("hr").employees;
   eventsCollection = session.getDatabase("reporting").events;

   session.startTransaction( { readConcern: { level: "snapshot" }, writeConcern: { w: "majority" } } );

   try{
      eventsCollection.insertOne( 
         { employee: 3, status: { new: "Active", old: null },  department: { new: "XYZ", old: null } }
      );

      var countDoc = eventsCollection.aggregate( [ { $match:  { employee: 3 } }, { $count: "eventCounts" } ] ).next();

      print( "events count (in active transaction): " + countDoc.eventCounts );

      employeesCollection.insertOne( 
         { employee: 3, name: { title: "Miss", name: "Terri Bachs" }, status: "Active", department: "XYZ" }
      ); 
   } catch (error) {
      print("Caught exception during transaction, aborting.");
      session.abortTransaction();
      throw error;
   }

   commitWithRetry(session);
}

session = db.getMongo().startSession( { readPreference: { mode: "primary" } } );

try{
   runTransactionWithRetry(updateEmployeeInfo, session);
} catch (error) {
   // Do something with error
} finally {
   session.endSession();
}

----------------------------------------

TITLE: Adding an Arbiter to a Replica Set in MongoDB
DESCRIPTION: Shows how to add a mongod instance as an arbiter to a replica set using either a member configuration document or a hostname with the arbiterOnly flag.

LANGUAGE: javascript
CODE:
rs.add( { host: "mongodb3.example.net:27017", arbiterOnly: true } )

LANGUAGE: javascript
CODE:
rs.add("mongodb3.example.net:27017", true)

----------------------------------------

TITLE: Inserting Sample Data into MongoDB Inventory Collection
DESCRIPTION: This snippet demonstrates how to insert multiple documents into a MongoDB collection named 'inventory'. Each document represents an item with an ID, department, and description.

LANGUAGE: javascript
CODE:
db.inventory.insertMany( [ 
   { _id: 1, department: "tech", description: "lime green computer" },
   { _id: 2, department: "tech", description: "wireless red mouse" },
   { _id: 3, department: "kitchen", description: "green placemat" },
   { _id: 4, department: "kitchen", description: "red peeler" },
   { _id: 5, department: "food", description: "green apple" },
   { _id: 6, department: "food", description: "red potato" }
] )

----------------------------------------

TITLE: Specifying AWS CMK Information in Node.js
DESCRIPTION: This snippet demonstrates how to specify the AWS Customer Master Key (CMK) information in Node.js. It sets the key ARN and the AWS region for the CMK.

LANGUAGE: javascript
CODE:
const dataKeyOptions = {
  masterKey: {
    key: '<Your AWS ARN>',
    region: '<Your AWS Region>'
  }
};

----------------------------------------

TITLE: Starting AutoMerger in MongoDB using JavaScript
DESCRIPTION: This snippet demonstrates how to enable the AutoMerger feature in MongoDB. It should be run from the mongos binary. The method does not take any parameters and is used to start the automatic merging of chunks in a sharded cluster.

LANGUAGE: javascript
CODE:
sh.startAutoMerger()

----------------------------------------

TITLE: MongoDB Aggregation Pipeline for Inverse Hyperbolic Sine in Radians
DESCRIPTION: Shows an aggregation pipeline that calculates the inverse hyperbolic sine of the x-coordinate in radians. The result is added as a new field 'y-coordinate' using $addFields.

LANGUAGE: bash
CODE:
db.trigonometry.aggregate([
  { 
    $addFields : {
      "y-coordinate" : {
        $asinh : "$x-coordinate"
      }
    }
  }
])

----------------------------------------

TITLE: MongoDB Configuration with Kerberos and AD Authorization
DESCRIPTION: YAML configuration file for MongoDB showing security settings for Kerberos authentication and Active Directory authorization including LDAP server connection, binding, and query templates.

LANGUAGE: yaml
CODE:
security:
   authorization: "enabled"
   ldap:
      servers: activedirectory.example.net"
      bind:
         queryUser: "mongodbadmin@dba.example.com"
         queryPassword: "secret123"
      userToDNMapping:
         '[
            {
               match: "(.+)"
               ldapQuery: "DC=example,DC=com??sub?(userPrincipalName={0})"
            }
         ]'
      authz:
         queryTemplate: "DC=example,DC=com??sub?(&(objectClass=group)(member:1.2.840.113556.1.4.1941:={USER}))"
   setParameter:
      authenticationMechanisms: "GSSAPI"

----------------------------------------

TITLE: Performing Sort-Only Update on Array in MongoDB
DESCRIPTION: Updates the 'tests' array by sorting its elements in descending order without adding new elements.

LANGUAGE: javascript
CODE:
db.students.updateOne(
   { _id: 3 },
   { $push: { tests: { $each: [ ], $sort: -1 } } }
)

----------------------------------------

TITLE: Aggregation Pipeline Using $isoWeek
DESCRIPTION: Shows how to use $isoWeek in an aggregation pipeline to extract week numbers from dates in a collection.

LANGUAGE: javascript
CODE:
db.deliveries.aggregate( [
  {
    $project: {
      _id: 0,
      city: "$city",
      weekNumber: { $isoWeek: "$date" }
    }
  }
] )

----------------------------------------

TITLE: Constructing a GeoJSON Polygon with Single Ring in MongoDB
DESCRIPTION: Creates a GeoJSON Polygon object with a single exterior ring. The first and last coordinates must match to close the polygon. Used for representing areas or boundaries.

LANGUAGE: javascript
CODE:
{
  type: "Polygon",
  coordinates: [ [ [ 0 , 0 ] , [ 3 , 6 ] , [ 6 , 1 ] , [ 0 , 0  ] ] ]
}

----------------------------------------

TITLE: Running $indexStats Aggregation in MongoDB
DESCRIPTION: Example aggregation pipeline using $indexStats to view statistics for all indexes in the collection.

LANGUAGE: javascript
CODE:
db.orders.aggregate( [ { $indexStats: { } } ] )

----------------------------------------

TITLE: Verifying MongoDB Version
DESCRIPTION: Shell command to verify the installed MongoDB binary version after upgrade.

LANGUAGE: bash
CODE:
mongod --version

----------------------------------------

TITLE: Defining CorruptedChunkShardKey Format in MongoDB
DESCRIPTION: Shows the expected format of a CorruptedChunkShardKey inconsistency document, including all required fields and their types.

LANGUAGE: json
CODE:
{
   type: "CorruptedChunkShardKey",
   description: "<string>",
   details: {
      namespace: "<string>",
      collectionUUID: UUID("<uuid>"),
      chunk: <chunk>,
      shardKeyPattern: <pattern>
   }
}

----------------------------------------

TITLE: MongoDB Query with $and for Multiple Expressions on Same Field in JavaScript
DESCRIPTION: Demonstrates how to use $and to combine multiple conditions on the same field. This query finds documents where the price is not 1.99 and the price field exists.

LANGUAGE: javascript
CODE:
db.inventory.find( { $and: [ { price: { $ne: 1.99 } }, { price: { $exists: true } } ] } )

----------------------------------------

TITLE: MongoDB Connection String for Multiple Languages
DESCRIPTION: This snippet shows the MongoDB connection string format used for multiple programming languages and drivers. It includes the username, password, host, and authentication source.

LANGUAGE: bash
CODE:
mongodb+srv://myDatabaseUser:D1fficultP%40ssw0rd@mongodb0.example.com/?authSource=admin

----------------------------------------

TITLE: Successful isdbgrid Command Response
DESCRIPTION: Example of a successful response when the command is run against a mongos instance, showing the isdbgrid flag and hostname.

LANGUAGE: javascript
CODE:
{ "isdbgrid" : 1, "hostname" : "app.example.net", "ok" : 1 }

----------------------------------------

TITLE: Inserting Power Consumption Data in MongoDB
DESCRIPTION: This snippet demonstrates how to insert multiple documents into a 'powerConsumption' collection, containing electrical power usage data measured by meter devices at 30-second intervals.

LANGUAGE: javascript
CODE:
db.powerConsumption.insertMany( [
   { powerMeterID: "1", timeStamp: new Date( "2020-05-18T14:10:30Z" ),
     kilowatts: 2.95 },
   { powerMeterID: "1", timeStamp: new Date( "2020-05-18T14:11:00Z" ),
     kilowatts: 2.7 },
   { powerMeterID: "1", timeStamp: new Date( "2020-05-18T14:11:30Z" ),
     kilowatts: 2.6 },
   { powerMeterID: "1", timeStamp: new Date( "2020-05-18T14:12:00Z" ),
     kilowatts: 2.98 },
   { powerMeterID: "2", timeStamp: new Date( "2020-05-18T14:10:30Z" ),
     kilowatts: 2.5 },
   { powerMeterID: "2", timeStamp: new Date( "2020-05-18T14:11:00Z" ),
     kilowatts: 2.25 },
   { powerMeterID: "2", timeStamp: new Date( "2020-05-18T14:11:30Z" ),
     kilowatts: 2.75 },
   { powerMeterID: "2", timeStamp: new Date( "2020-05-18T14:12:00Z" ),
     kilowatts: 2.82 }
] )

----------------------------------------

TITLE: Querying MongoDB with $mod Operator
DESCRIPTION: Demonstrates a query using the $mod operator to select documents where the 'qty' field modulo 4 equals 0.

LANGUAGE: javascript
CODE:
db.inventory.find( { qty: { $mod: [ 4, 0 ] } } )

----------------------------------------

TITLE: OP_KILL_CURSORS Structure Definition in Bash
DESCRIPTION: Structure definition for the OP_KILL_CURSORS message used to close active cursors in MongoDB.

LANGUAGE: bash
CODE:
struct {
    MsgHeader header;            // standard message header
    int32     ZERO;              // 0 - reserved for future use
    int32     numberOfCursorIDs; // number of cursorIDs in message
    int64*    cursorIDs;         // sequence of cursorIDs to close
}

----------------------------------------

TITLE: Query Examples with defaultMaxTimeMS in MongoDB
DESCRIPTION: These examples demonstrate how defaultMaxTimeMS affects queries. The first query uses the default timeout, while the second query overrides it with a specific maxTimeMS value.

LANGUAGE: javascript
CODE:
db.test.find( { name: "Carol" } )

db.test.find( { name: "Carol" } ).maxTimeMS( 8000 )

----------------------------------------

TITLE: MongoDB $geoWithin Query Template
DESCRIPTION: Generic template for performing a $geoWithin query in MongoDB. Shows the basic structure for querying locations within a shape on a flat surface.

LANGUAGE: javascript
CODE:
db.<collection>.find( {
   <location field> : {
      $geoWithin : {
         <shape operator> : <coordinates>
      }
    }
 } )

----------------------------------------

TITLE: Aggregating Sales Data with $unionWith and $group in MongoDB
DESCRIPTION: Shows how to use $unionWith to combine data from multiple collections, then use $group to aggregate sales quantities by item, and finally sort the results.

LANGUAGE: javascript
CODE:
db.sales_2017.aggregate( [ 
   { $unionWith: "sales_2018" }, 
   { $unionWith: "sales_2019" },
   { $unionWith: "sales_2020" },
   { $group: { _id: "$item", total: { $sum: "$quantity" } } },
   { $sort: { total: -1 } }
] )

----------------------------------------

TITLE: Timezone Conversion Result Document
DESCRIPTION: Result document showing the hour and minute values after timezone conversion, demonstrating the differences between fixed offset and Olson Timezone handling

LANGUAGE: javascript
CODE:
{
   "_id": 1,
   "nycHour" : 5,
   "nycMinute" : 24,
   "gmtHour" : 10,
   "gmtMinute" : 24,
   "nycOlsonHour" : 6,
   "nycOlsonMinute" : 24
}

----------------------------------------

TITLE: MongoDB Update Operators RST Documentation
DESCRIPTION: ReStructuredText formatted documentation defining MongoDB's field update operators including $currentDate, $inc, $min, $max, $mul, $rename, $set, $setOnInsert, and $unset.

LANGUAGE: rst
CODE:
.. _field-update-operators:

======================
Field Update Operators
======================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. include:: /includes/extracts/operators-toc-explanation.rst

.. list-table::
   :widths: 30,70
   :header-rows: 1

   * - Name
     - Description

   * - :update:`$currentDate`
     - Sets the value of a field to current date, either as a Date or a Timestamp.

   * - :update:`$inc`
     - Increments the value of the field by the specified amount.

   * - :update:`$min`
     - Only updates the field if the specified value is less than the existing field value.

   * - :update:`$max`
     - Only updates the field if the specified value is greater than the existing field value.

   * - :update:`$mul`
     - Multiplies the value of the field by the specified amount.

   * - :update:`$rename`
     - Renames a field.

   * - :update:`$set`
     - Sets the value of a field in a document.

   * - :update:`$setOnInsert`
     - Sets the value of a field if an update results in an insert of a document. Has no effect on update operations that modify existing documents.

   * - :update:`$unset`
     - Removes the specified field from a document.

----------------------------------------

TITLE: Executing killCursors Command in MongoDB
DESCRIPTION: This snippet demonstrates the syntax for running the killCursors command. It specifies the collection name and an array of cursor IDs to terminate. An optional comment can be included.

LANGUAGE: javascript
CODE:
db.runCommand( 
   { 
     killCursors: <collection>, 
     cursors: [ <cursor id1>, ... ], comment: <any> 
   } 
)

----------------------------------------

TITLE: Aggregation with Read Concern Override in MongoDB
DESCRIPTION: An example of an aggregation operation that specifies a read concern of 'majority' to read the most recent data confirmed as written to a majority of nodes.

LANGUAGE: javascript
CODE:
db.restaurants.aggregate(
   [ { $match: { rating: { $lt: 5 } } } ],
   { readConcern: { level: "majority" } }
)

----------------------------------------

TITLE: MongoDB Update Operation Result
DESCRIPTION: Example response showing the result of a successful atomic update operation with matched and modified document counts.

LANGUAGE: javascript
CODE:
{ "acknowledged" : true, "matchedCount" : 1, "modifiedCount" : 1 }

----------------------------------------

TITLE: Calculate Image Sizes Using $binarySize
DESCRIPTION: Aggregation pipeline that projects image names and their binary sizes using $binarySize operator.

LANGUAGE: javascript
CODE:
db.images.aggregate([
  {
    $project: {
      "name": "$name",
      "imageSize": { $binarySize: "$binary" }
    }
  }
])

----------------------------------------

TITLE: Calculating Sale Prices with cursor.map()
DESCRIPTION: Demonstrates calculating discounted prices and converting results to an array using cursor.map() and toArray()

LANGUAGE: javascript
CODE:
var salePrices = db.products.find().map( function(p) { return p.price * .9 } ).toArray()

----------------------------------------

TITLE: Querying MongoDB with $size Operator in Shell
DESCRIPTION: Uses the MongoDB shell to find documents where the 'tags' array has exactly 3 elements.

LANGUAGE: javascript
CODE:
db.inventory.find( { "tags": { $size: 3 } } )

----------------------------------------

TITLE: Setting MongoDB Feature Compatibility Version
DESCRIPTION: This command sets the feature compatibility version of the MongoDB cluster to a specified version, in this case, '7.0'.

LANGUAGE: javascript
CODE:
db.adminCommand( { setFeatureCompatibilityVersion: "7.0" } )

----------------------------------------

TITLE: Using $concatArrays in $project Stage
DESCRIPTION: Demonstrates using $concatArrays to combine 'instock' and 'ordered' arrays within a $project stage of an aggregation pipeline.

LANGUAGE: javascript
CODE:
db.warehouses.aggregate( [
   { $project: { items: { $concatArrays: [ "$instock", "$ordered" ] } } }
] )

----------------------------------------

TITLE: Moving a Chunk in MongoDB using sh.moveChunk()
DESCRIPTION: This example demonstrates how to use sh.moveChunk() to move a chunk containing documents with a specific zipcode to a designated shard. It operates on the 'people' collection in the 'records' database.

LANGUAGE: javascript
CODE:
sh.moveChunk("records.people", { zipcode: "53187" }, "shard0019")

----------------------------------------

TITLE: Result of dropAllRolesFromDatabase Command in MongoDB
DESCRIPTION: This snippet shows the expected result of the dropAllRolesFromDatabase command, where 'n' indicates the number of roles dropped.

LANGUAGE: javascript
CODE:
{ "n" : 4, "ok" : 1 }

----------------------------------------

TITLE: Finding Collection Name by UUID in MongoDB
DESCRIPTION: JavaScript function to loop through all databases and collections to find a collection name matching a specific UUID, useful for identifying rolled back collections.

LANGUAGE: javascript
CODE:
var mydatabases=db.adminCommand("listDatabases").databases;
var foundcollection=false;

for (var i = 0; i < mydatabases.length; i++) {
   let mdb = db.getSiblingDB(mydatabases[i].name);
   collections = mdb.getCollectionInfos( { "info.uuid": UUID("20f74796-d5ea-42f5-8c95-f79b39bad190") } );

   for (var j = 0; j < collections.length; j++) {   // Array of 1 element
      foundcollection=true;
      print(mydatabases[i].name + '.' + collections[j].name);
      break;
   }

   if (foundcollection) { break; }
}

----------------------------------------

TITLE: Document Structure Example (MongoDB)
DESCRIPTION: Sample document structure showing typical MongoDB document format with ObjectId and fields.

LANGUAGE: javascript
CODE:
{
  _id: ObjectId("509a8fb2f3f4948bd2f983a0"),
  user_id: "abc123",
  age: 55,
  status: 'A'
}

----------------------------------------

TITLE: Specifying Cursor for MongoDB Aggregate Command in JavaScript
DESCRIPTION: This snippet demonstrates how to specify a cursor for the MongoDB aggregate command. It shows two options: using the default batch size and specifying a custom batch size.

LANGUAGE: javascript
CODE:
cursor: {}

LANGUAGE: javascript
CODE:
cursor: { batchSize: <num> }

----------------------------------------

TITLE: Syntax for rs.reconfig() Method in MongoDB
DESCRIPTION: Demonstrates the basic syntax for using the rs.reconfig() method to reconfigure a MongoDB replica set. It includes parameters for the configuration document and options like force and maxTimeMS.

LANGUAGE: bash
CODE:
rs.reconfig(
  <configuration>,
  {
    "force" : <boolean>,
    "maxTimeMS" : <int>
  }
)

----------------------------------------

TITLE: Updating Document with $currentDate in MongoDB
DESCRIPTION: Updates a document using $currentDate to set the current date and timestamp, along with $set to update other fields.

LANGUAGE: javascript
CODE:
db.customers.updateOne(
   { _id: 1 },
   {
     $currentDate: {
        lastModified: true,
        "cancellation.date": { $type: "timestamp" }
     },
     $set: {
        "cancellation.reason": "user request",
        status: "D"
     }
   }
)

----------------------------------------

TITLE: File System Operations in MongoDB Shell
DESCRIPTION: Methods for file system operations like listing files, creating directories, and removing files

LANGUAGE: javascript
CODE:
fs.readdirSync( <path>, { withFileTypes: true } )

LANGUAGE: javascript
CODE:
fs.mkdirSync( <path>, { recursive: true } )

LANGUAGE: javascript
CODE:
fs.unlinkSync( <filename> )

----------------------------------------

TITLE: Example Document for Level-Based Access Control in MongoDB
DESCRIPTION: Shows the structure of a document in the 'accounts' collection with nested fields and level-based access control.

LANGUAGE: json
CODE:
{
  _id: 1,
  level: 1,
  acct_id: "xyz123",
  cc: {
    level: 5,
    type: "yy",
    num: 000000000000,
    exp_date: ISODate("2015-11-01T00:00:00.000Z"),
    billing_addr: {
      level: 5,
      addr1: "123 ABC Street",
      city: "Some City"
    },
    shipping_addr: [
      {
        level: 3,
        addr1: "987 XYZ Ave",
        city: "Some City"
      },
      {
        level: 3,
        addr1: "PO Box 0123",
        city: "Some City"
      }
    ]
  },
  status: "A"
}

----------------------------------------

TITLE: Using cursor.returnKey() in MongoDB JavaScript
DESCRIPTION: Demonstrates how to use the cursor.returnKey() method to modify a cursor to return only index keys. The example queries a 'restaurants' collection for Japanese cuisine and returns only the indexed 'cuisine' field.

LANGUAGE: javascript
CODE:
var csr = db.restaurant.find( { "cuisine" : "Japanese" } )
csr.returnKey()

----------------------------------------

TITLE: Setting Feature Compatibility Version to 8.0
DESCRIPTION: Command to set the feature compatibility version of a MongoDB cluster to 8.0 after the upgrade process is complete. This enables new 8.0 features.

LANGUAGE: javascript
CODE:
db.adminCommand( { setFeatureCompatibilityVersion: "8.0" } )

----------------------------------------

TITLE: Updated MongoDB Replica Set Configuration After Member Removal
DESCRIPTION: This snippet shows the updated replica set configuration after removing a member using rs.reconfig(). The configuration now has a new version number and one less member in the members array.

LANGUAGE: javascript
CODE:
{
    "_id" : "rs",
    "version" : 8,
    "members" : [
        {
            "_id" : 0,
            "host" : "mongod_A.example.net:27017"
        },
        {
            "_id" : 1,
            "host" : "mongod_B.example.net:27017"
        }
    ]
}

----------------------------------------

TITLE: Querying MongoDB View with Collation
DESCRIPTION: Demonstrates querying the view with collation settings by counting documents matching 'cafe', which returns 3 due to case-insensitive comparison.

LANGUAGE: javascript
CODE:
db.placesView.countDocuments( { category: "cafe" } )

----------------------------------------

TITLE: Defining schema for system.roles collection in MongoDB
DESCRIPTION: This snippet outlines the schema for documents in the system.roles collection. It includes fields for role name, database, privileges (with resource and actions), and inherited roles.

LANGUAGE: javascript
CODE:
{
   _id: <system-defined id>,
   role: "<role name>",
   db: "<database>",
   privileges:
       [
           {
               resource: { <resource> },
               actions: [ "<action>", ... ]
           },
           ...
       ],
   roles:
       [
           { role: "<role name>", db: "<database>" },
           ...
       ]
}

----------------------------------------

TITLE: Executing renameCollection Command in MongoDB
DESCRIPTION: Basic syntax for the renameCollection command showing all available fields including the source namespace, target namespace, dropTarget flag, writeConcern, and comment options.

LANGUAGE: javascript
CODE:
db.runCommand(
   { 
     renameCollection: "<source_namespace>",
     to: "<target_namespace>",
     dropTarget: <true|false>,
     writeConcern: <document>,
     comment: <any> 
   }
)

----------------------------------------

TITLE: MongoDB Aggregation Pipeline with $slice
DESCRIPTION: This example demonstrates using $slice in a MongoDB aggregation pipeline to return the first three elements of the 'favorites' array for each user.

LANGUAGE: javascript
CODE:
db.users.aggregate([
   { $project: { name: 1, threeFavorites: { $slice: [ "$favorites", 3 ] } } }
])

----------------------------------------

TITLE: MongoDB Collection Insert Example
DESCRIPTION: Shows how to insert sample player documents into a MongoDB collection.

LANGUAGE: javascript
CODE:
db.players.insertMany([
   { _id: 12378, name: "Steve", username: "steveisawesome", first_login: "2017-01-01" },
   { _id: 2, name: "Anya", username: "anya", first_login: "2001-02-02" }
])

----------------------------------------

TITLE: Display All Current Operations
DESCRIPTION: Example of running currentOp to display all operations including idle ones

LANGUAGE: javascript
CODE:
db.adminCommand(
   {
     currentOp: true,
     "$all": true
   }
)

----------------------------------------

TITLE: Date Field Breakdown Aggregation
DESCRIPTION: Aggregation pipeline that demonstrates breaking down a date field into various components including dayOfYear.

LANGUAGE: javascript
CODE:
db.sales.aggregate(
   [
     {
       $project:
         {
           year: { $year: "$date" },
           month: { $month: "$date" },
           day: { $dayOfMonth: "$date" },
           hour: { $hour: "$date" },
           minutes: { $minute: "$date" },
           seconds: { $second: "$date" },
           milliseconds: { $millisecond: "$date" },
           dayOfYear: { $dayOfYear: "$date" },
           dayOfWeek: { $dayOfWeek: "$date" },
           week: { $week: "$date" }
         }
     }
   ]
)

----------------------------------------

TITLE: Deleting All Documents in MongoDB Collection
DESCRIPTION: Shows how to delete all documents from a MongoDB collection named 'inventory'. This operation completely removes all documents but keeps the collection itself.



----------------------------------------

TITLE: Calculating Variance Using $pow in MongoDB Aggregation
DESCRIPTION: Demonstrates how to use the $pow operator in a MongoDB aggregation pipeline to calculate the variance of quiz scores. It uses $stdDevPop to get the standard deviation and then squares it using $pow.

LANGUAGE: javascript
CODE:
db.quizzes.aggregate( [
   { $project: { variance: { $pow: [ { $stdDevPop: "$scores.score" }, 2 ] } } }
] )

----------------------------------------

TITLE: Querying MongoDB Collection with User Input
DESCRIPTION: This example shows how to query the 'inventory' collection based on a user-provided value for the 'type' field. It demonstrates a basic find operation in MongoDB.

LANGUAGE: javascript
CODE:
var typeValue = <someUserInput>;
db.inventory.find( { type: typeValue } );

----------------------------------------

TITLE: Disabling MongoDB Profiler with Custom Settings
DESCRIPTION: Example showing how to disable profiling (level 0) while setting slow operation threshold and sample rate.

LANGUAGE: javascript
CODE:
db.setProfilingLevel(0, { slowms: 20, sampleRate: 0.42 })

----------------------------------------

TITLE: Starting MongoDB Instances for Replica Set
DESCRIPTION: These commands start three mongod instances as members of a replica set named 'rs0', each running on a distinct port and specifying the path to the data directory.

LANGUAGE: bash
CODE:
mongod --replSet rs0 --port 27017 --bind_ip localhost,<hostname(s)|ip address(es)> --dbpath /srv/mongodb/rs0-0  --oplogSize 128

LANGUAGE: bash
CODE:
mongod --replSet rs0 --port 27018 --bind_ip localhost,<hostname(s)|ip address(es)> --dbpath /srv/mongodb/rs0-1  --oplogSize 128

LANGUAGE: bash
CODE:
mongod --replSet rs0 --port 27019 --bind_ip localhost,<hostname(s)|ip address(es)> --dbpath /srv/mongodb/rs0-2 --oplogSize 128

----------------------------------------

TITLE: Querying Points within a Large GeoJSON Polygon in MongoDB
DESCRIPTION: Shows how to use $geoWithin with a custom MongoDB coordinate reference system to query with a single-ringed GeoJSON polygon covering an area greater than a single hemisphere.

LANGUAGE: javascript
CODE:
db.places.find(
   {
     loc: {
       $geoWithin: {
          $geometry: {
             type : "Polygon" ,
             coordinates: [
               [
                 [ -100, 60 ], [ -100, 0 ], [ -100, -60 ], [ 100, -60 ], [ 100, 60 ], [ -100, 60 ]
               ]
             ],
             crs: {
                type: "name",
                properties: { name: "urn:x-mongodb:crs:strictwinding:EPSG:4326" }
             }
          }
       }
     }
   }
)

----------------------------------------

TITLE: Inserting Documents into MongoDB Collection for Index Key Example
DESCRIPTION: Inserts multiple documents into the 'orders' collection using the insertMany() method for demonstrating index key metadata.

LANGUAGE: javascript
CODE:
db.orders.insertMany([
   { "item" : "abc", "price" : NumberDecimal("12"), "quantity" : 2, "type": "apparel" },
   { "item" : "jkl", "price" : NumberDecimal("20"), "quantity" : 1, "type": "electronics" },
   { "item" : "abc", "price" : NumberDecimal("10"), "quantity" : 5, "type": "apparel" }
])

----------------------------------------

TITLE: Modifying TCP Retries Setting at Runtime in Linux
DESCRIPTION: This snippet shows how to change the net.ipv4.tcp_retries2 setting temporarily at runtime using the sysctl command. The new value is set to 8 retries.

LANGUAGE: bash
CODE:
sysctl -w net.ipv4.tcp_retries2=8

----------------------------------------

TITLE: Setting Up Automatic Encryption Options in Node.js for MongoDB
DESCRIPTION: This code snippet shows how to configure automatic encryption options for MongoDB using the Node.js driver. It sets up the key vault namespace, KMS provider, and schema map.

LANGUAGE: javascript
CODE:
const client = new MongoClient(uri, {
  autoEncryption: {
    keyVaultNamespace: 'admin.datakeys',
    kmsProviders: kmsProviders,
    schemaMap: schemaMap,
    extraOptions: extraOptions
  }
});

----------------------------------------

TITLE: Converting Deserialized Object to JSON String
DESCRIPTION: Uses EJSON.stringify() to convert a deserialized object with BSON types to a JSON string representation.

LANGUAGE: javascript
CODE:
EJSON.stringify( <deserialized object> )

----------------------------------------

TITLE: Manual Field Encryption in Go
DESCRIPTION: Go implementation for manually encrypting document fields before insertion into MongoDB using the Go driver. Demonstrates field-level encryption patterns.

LANGUAGE: go
CODE:
// Code not visible in provided input

----------------------------------------

TITLE: Creating Wildcard Index with Field Projection in MongoDB
DESCRIPTION: Basic syntax for creating a wildcard index with field projections using wildcardProjection option. The option allows specifying which fields to include (1) or exclude (0) from the index.

LANGUAGE: javascript
CODE:
db.<collection>.createIndex(
   {
      "$**" : <sortOrder>
   },
   {
      "wildcardProjection" : {
         "<field1>" : < 0 | 1 >, 
         "<field2>" : < 0 | 1 >,
         ...
         "<fieldN>" : < 0 | 1 >
      }
   }
)

----------------------------------------

TITLE: Generating Data Encryption Key in Go
DESCRIPTION: This snippet demonstrates how to generate a Data Encryption Key (DEK) using the AWS KMS in Go. It uses the ClientEncryption instance to create the DEK with the specified options.

LANGUAGE: go
CODE:
dataKeyID, err := clientEncryption.CreateDataKey(context.TODO(), "aws", dataKeyOpts)
if err != nil {
    log.Fatal(err)
}
base64DataKeyID := base64.StdEncoding.EncodeToString(dataKeyID.Data)
fmt.Printf("DataKeyId [base64]: %s\n", base64DataKeyID)

----------------------------------------

TITLE: Basic $dateAdd Syntax
DESCRIPTION: Shows the basic syntax structure for the $dateAdd operator with its required and optional fields.

LANGUAGE: javascript
CODE:
{
   $dateAdd: {
      startDate: <Expression>,
      unit: <Expression>,
      amount: <Expression>,
      timezone: <tzExpression>
   }
}

----------------------------------------

TITLE: Using $mergeObjects as Accumulator in $group Stage
DESCRIPTION: Shows how to use $mergeObjects as an accumulator to combine quantity objects when grouping by item.

LANGUAGE: javascript
CODE:
db.sales.aggregate( [
   { $group: { _id: "$item", mergedSales: { $mergeObjects: "$quantity" } } }
] )

----------------------------------------

TITLE: Returning Last N Array Elements with $slice
DESCRIPTION: Example query showing how to return the last three elements of the comments array using negative slice value.

LANGUAGE: javascript
CODE:
db.posts.find( {}, { comments: { $slice: -3 } } )

----------------------------------------

TITLE: Finding User's Current Neighborhood
DESCRIPTION: Query to find which neighborhood contains a given point using $geoIntersects

LANGUAGE: javascript
CODE:
db.neighborhoods.findOne({ geometry: { $geoIntersects: { $geometry: { type: "Point", coordinates: [ -73.93414657, 40.82302903 ] } } } })

----------------------------------------

TITLE: MongoDB Replica Set Connection String Format
DESCRIPTION: Format for specifying multiple replica set members in the connection string when adding a shard.

LANGUAGE: bash
CODE:
<replica_set>/<hostname><:port>,<hostname><:port>, ...

----------------------------------------

TITLE: Configuring MongoDB Search Index Update Privilege
DESCRIPTION: Defines the resource and action permissions required for updating search indexes. Specifies the database and collection level authorization configuration.

LANGUAGE: javascript
CODE:
{
   resource: {
      db : <database>,
      collection: <collection>
   },
   actions: [ "updateSearchIndex" ]
}

----------------------------------------

TITLE: Basic Command Syntax for Config Server Transition
DESCRIPTION: Basic syntax for the transitionFromDedicatedConfigServer command that must be run from the admin database via mongos.

LANGUAGE: javascript
CODE:
db.adminCommand( { 
   transitionFromDedicatedConfigServer: 1
} )

----------------------------------------

TITLE: Syntax for Bulk.find.delete() in MongoDB
DESCRIPTION: Shows the basic syntax for using the Bulk.find.delete() method. It requires a filter document to specify which documents to delete.

LANGUAGE: javascript
CODE:
Bulk.find( <filter document> ).delete()

----------------------------------------

TITLE: Removing All Indexes in MongoDB Shell
DESCRIPTION: This snippet shows how to remove all indexes except for the _id index from the 'accounts' collection using the db.collection.dropIndexes() method.

LANGUAGE: javascript
CODE:
db.accounts.dropIndexes()

----------------------------------------

TITLE: Checking Feature Compatibility Version
DESCRIPTION: Command to verify the feature compatibility version is set to 5.0 across all cluster members.

LANGUAGE: javascript
CODE:
db.adminCommand( { getParameter: 1, featureCompatibilityVersion: 1 } )

----------------------------------------

TITLE: MongoDB Shell Method Definition
DESCRIPTION: Method signature for waitForPingChange that monitors ping state changes in mongos instances. Takes arrays of active pings, timeout duration, and checking interval as parameters.

LANGUAGE: javascript
CODE:
sh.waitForPingChange(activePings, timeout, interval)

----------------------------------------

TITLE: MongoDB Shell Authentication with Clear Password
DESCRIPTION: Demonstrates authentication with username and cleartext password.

LANGUAGE: javascript
CODE:
db.auth( <username>, <password> )

----------------------------------------

TITLE: Configuring MongoDB Node Audit Settings
DESCRIPTION: Configuration settings required to enable runtime audit configuration for MongoDB nodes. The configuration requires setting auditLog.runtimeConfiguration to true while leaving auditLog.filter and auditAuthorizationSuccess unset.

LANGUAGE: yaml
CODE:
auditLog:
  runtimeConfiguration: true
  filter: null
auditAuthorizationSuccess: null

----------------------------------------

TITLE: Connecting to MongoDB Instance via mongosh
DESCRIPTION: This command connects to one of the mongod instances through mongosh by specifying its port number.

LANGUAGE: bash
CODE:
mongosh --port 27017

----------------------------------------

TITLE: Sample MongoDB Collection Data
DESCRIPTION: Example data in the 'inventory' collection used for demonstrating distinct command examples.

LANGUAGE: javascript
CODE:
{ "_id": 1, "dept": "A", "item": { "sku": "111", "color": "red" }, "sizes": [ "S", "M" ] }
{ "_id": 2, "dept": "A", "item": { "sku": "111", "color": "blue" }, "sizes": [ "M", "L" ] }
{ "_id": 3, "dept": "B", "item": { "sku": "222", "color": "blue" }, "sizes": "S" }
{ "_id": 4, "dept": "A", "item": { "sku": "333", "color": "black" }, "sizes": [ "S" ] }

----------------------------------------

TITLE: Setting Feature Compatibility Version in MongoDB
DESCRIPTION: Command to set or update the feature compatibility version to 4.4 on the mongos instance before performing the upgrade to 5.0.

LANGUAGE: javascript
CODE:
db.adminCommand( { setFeatureCompatibilityVersion: "4.4" } )

----------------------------------------

TITLE: Inserting Stock Price Data in MongoDB
DESCRIPTION: This snippet demonstrates how to insert multiple stock price documents into a MongoDB collection named 'stockPrices'. It includes data for two stocks (MDB and MSFT) with dates and prices.

LANGUAGE: javascript
CODE:
db.stockPrices.insertMany( [
   { stock: "MDB", date: new Date( "2020-05-18T20:00:00Z" ), price: 13 },
   { stock: "MDB", date: new Date( "2020-05-19T20:00:00Z" ), price: 15.4 },
   { stock: "MDB", date: new Date( "2020-05-20T20:00:00Z" ), price: 12 },
   { stock: "MDB", date: new Date( "2020-05-21T20:00:00Z" ), price: 11.7 },
   { stock: "MSFT", date: new Date( "2020-05-18T20:00:00Z" ), price: 82 },
   { stock: "MSFT", date: new Date( "2020-05-19T20:00:00Z" ), price: 94 },
   { stock: "MSFT", date: new Date( "2020-05-20T20:00:00Z" ), price: 112 },
   { stock: "MSFT", date: new Date( "2020-05-21T20:00:00Z" ), price: 97.3 }
] )

----------------------------------------

TITLE: Executing dbStats with Free Storage and Scale Options in MongoDB
DESCRIPTION: This snippet shows how to run dbStats with the freeStorage option enabled and a scale factor applied to display values in kilobytes.

LANGUAGE: javascript
CODE:
db.runCommand( { dbStats: 1, scale: 1024, freeStorage: 1 } )

----------------------------------------

TITLE: Creating Text Index with Weights in MongoDB
DESCRIPTION: Shows the basic structure for creating a text index with custom weights for different fields. The weights parameter allows specifying relative importance of different indexed fields for text search scoring.

LANGUAGE: javascript
CODE:
db.<collection>.createIndex(
   {
     <field1>: "text",
     <field2>: "text",
     ...
   },
   {
     weights: {
       <field1>: <weight>,
       <field2>: <weight>,
       ...
     },
     name: <indexName>
   }
 )

----------------------------------------

TITLE: Final MongoDB X.509 Configuration
DESCRIPTION: Final configuration file with new X.509 certificate settings and removed override parameter.

LANGUAGE: yaml
CODE:
net:
  tls:
    mode:               requireTLS
    certificateKeyFile: /etc/mycerts/mongodb-server1.pem
    CAFile:             /etc/mycerts/ca.pem
    clusterFile:        /etc/mycerts/mongodb-cluster1.pem
    clusterCAFile:      /etc/mycerts/ca.pem
    clusterAuthX509:
       attributes:      O=MongoDB, OU=MongoDB Server
security:
  clusterAuthMode: x509

----------------------------------------

TITLE: Adding Numbers in MongoDB Aggregation
DESCRIPTION: Demonstrates using $add to calculate total cost by adding price and fee fields in a $project stage.

LANGUAGE: javascript
CODE:
db.sales.aggregate([
  { $project: { item: 1, total: { $add: [ "$price", "$fee" ] } } }
])

----------------------------------------

TITLE: Dropping MongoDB View using JavaScript
DESCRIPTION: Demonstrates how to remove a view named 'productView01' from a MongoDB database using the drop() method. This operation permanently removes the view definition from the database.

LANGUAGE: javascript
CODE:
db.productView01.drop()

----------------------------------------

TITLE: List Sampled Queries for Specific Collection
DESCRIPTION: Example aggregation operation that lists sampled queries for a specific collection named 'post' in the 'social' database.

LANGUAGE: javascript
CODE:
db.aggregate( [  { $listSampledQueries: { namespace: "social.post" } } ] )

----------------------------------------

TITLE: Executing abortTransaction Command in MongoDB JavaScript
DESCRIPTION: This snippet demonstrates the syntax for running the abortTransaction command against the admin database within a Session. It includes parameters for transaction number, write concern, autocommit, and an optional comment.

LANGUAGE: javascript
CODE:
db.adminCommand(
   {      
     abortTransaction: 1, 
     txnNumber: <long>,
     writeConcern: <document>,
     autocommit: false,
     comment: <any>
   }
)

----------------------------------------

TITLE: Killing Session-based Operations in MongoDB
DESCRIPTION: Shows how to terminate operations associated with a session using the killSessions command.

LANGUAGE: javascript
CODE:
use admin
db.aggregate( [
   { $currentOp : { allUsers: true, localOps: true } },
   { $match : <filter condition> }
] )

db.adminCommand( { killSessions: [
   { "id" : UUID("80e48c5a-f7fb-4541-8ac0-9e3a1ed224a4"), "uid" : BinData(0,"47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=") }
] } )

----------------------------------------

TITLE: Copying Base Tuned Profile
DESCRIPTION: Creates a new tuned profile directory by copying the virtual-guest profile to create virtual-guest-thp profile.

LANGUAGE: sh
CODE:
sudo cp -r /etc/tune-profiles/virtual-guest /etc/tune-profiles/virtual-guest-thp

----------------------------------------

TITLE: Connecting to Local MongoDB Instance
DESCRIPTION: Demonstrates how to connect to a MongoDB instance running locally on the default port. This example uses a simple connection string without authentication.

LANGUAGE: shell
CODE:
mongodb://localhost:27017

----------------------------------------

TITLE: Config Shard Status Return Document Structure
DESCRIPTION: Structure of the return document containing enabled status, host information, and associated tags.

LANGUAGE: javascript
CODE:
{
   enabled: <boolean>,
   host: <string>,
   tags: [<string>]
}

----------------------------------------

TITLE: MongoDB Log Output Example
DESCRIPTION: Shows how the comment appears in the MongoDB log output. This example demonstrates the format of the log entry, including the comment field.

LANGUAGE: javascript
CODE:
2015-11-23T13:09:16.202-05:00 I COMMAND  [conn1]
   command guidebook.restaurant command: find {
      find: "restaurant",
      filter: { "borough" : "Manhattan" },
      comment: "Find all Manhattan restaurants"
   }
   ...

----------------------------------------

TITLE: MongoDB Temperature Delta Calculation
DESCRIPTION: Aggregation pipeline using $abs to calculate the absolute difference between start and end temperatures.

LANGUAGE: javascript
CODE:
db.temperatureChange.aggregate([
   {
      $project: { delta: { $abs: { $subtract: [ "$startTemp", "$endTemp" ] } } }
   }
])

----------------------------------------

TITLE: Basic MongoDB currentOp Syntax
DESCRIPTION: Shows the basic syntax for calling the db.currentOp() method with optional operations argument.

LANGUAGE: javascript
CODE:
db.currentOp(<operations>)

----------------------------------------

TITLE: Basic Collection Validation Command Syntax
DESCRIPTION: Defines the core syntax for the validate command with all available options including full validation, repair, metadata checks, and BSON conformance verification.

LANGUAGE: javascript
CODE:
db.runCommand( 
   { 
     validate: <string>,  // Collection name
     full: <boolean>,  // Optional
     repair: <boolean>,  // Optional, added in MongoDB 5.0
     metadata: <boolean>,  // Optional, added in MongoDB 5.0.4
     checkBSONConformance: <boolean>  // Optional, added in MongoDB 6.2
     background: <boolean> // Optional
   } 
)

----------------------------------------

TITLE: MongoDB Aggregation $slice Examples
DESCRIPTION: These examples demonstrate various uses of the $slice operator in MongoDB aggregation, including slicing from the middle, end, and handling out-of-bounds positions.

LANGUAGE: javascript
CODE:
{ $slice: [ [ 1, 2, 3 ], 1, 1 ] }

LANGUAGE: javascript
CODE:
{ $slice: [ [ 1, 2, 3 ], -2 ] }

LANGUAGE: javascript
CODE:
{ $slice: [ [ 1, 2, 3 ], 15, 2 ] }

LANGUAGE: javascript
CODE:
{ $slice: [ [ 1, 2, 3 ], -15, 2 ] }

----------------------------------------

TITLE: Shutting Down a MongoDB Server
DESCRIPTION: This example shows how to shut down a MongoDB server by calling the shutdownServer() method on the admin database.

LANGUAGE: javascript
CODE:
db.getSiblingDB("admin").shutdownServer()

----------------------------------------

TITLE: Viewing TCP Keepalive Time in Linux
DESCRIPTION: Commands to check the current TCP keepalive time setting on Linux systems. These commands display the keepalive timeout value in seconds, which applies to both IPv4 and IPv6 connections.

LANGUAGE: bash
CODE:
sysctl net.ipv4.tcp_keepalive_time

LANGUAGE: bash
CODE:
cat /proc/sys/net/ipv4/tcp_keepalive_time

----------------------------------------

TITLE: Setting Runtime Parameters in MongoDB using setParameter Command
DESCRIPTION: This snippet demonstrates how to use the setParameter database command to configure MongoDB parameters that are only available at runtime. The setParameter command allows dynamic modification of certain database settings without requiring a server restart.

LANGUAGE: mongodb
CODE:
:dbcommand:`setParameter`

----------------------------------------

TITLE: Using $bitAnd with Long and Integer in MongoDB Aggregation
DESCRIPTION: Shows an aggregation pipeline that uses $bitAnd to perform a bitwise AND operation between an integer field ('a') and a long value (63) for each document in the 'switches' collection.

LANGUAGE: javascript
CODE:
db.switches.aggregate( [
  { 
    $project: { 
      result: { 
        $bitAnd: [ "$a", NumberLong("63") ]
      }
    }
  }
])

----------------------------------------

TITLE: TrackedUnshardedCollectionHasInvalidKey Example Document
DESCRIPTION: Example of a complete MongoDB response containing a TrackedUnshardedCollectionHasInvalidKey inconsistency document, showing how the inconsistency appears in practice with actual values.

LANGUAGE: json
CODE:
{
   cursor: {
      id: Long("0"),
      ns: "test.$cmd.aggregate",
      firstBatch: [
         {
            type: "TrackedUnshardedCollectionHasInvalidKey",
            description: "Found tracked unsharded collection with invalid shard-key",
            details: {
               namespace: "test.authors",
               uuid: UUID("ebfba414-b576-4f77-bb0e-0d56f3a53c55"),
               shardKey: { "name": 1 }
            }
         }
      ],
   },
   ok: 1
}

----------------------------------------

TITLE: Email Address Pattern Matching
DESCRIPTION: Example showing how to extract email addresses from text using $regexFindAll

LANGUAGE: javascript
CODE:
db.feedback.aggregate( [ 
    { $addFields: { 
       "email": { $regexFindAll: { input: "$comment", regex: /[a-z0-9_.+-]+@[a-z0-9_.+-]+\.[a-z0-9_.+-]+/i } }
    } },
    { $set: { email: "$email.match"} }
] )

----------------------------------------

TITLE: Removing Subfields Using Nested $unsetField in MongoDB
DESCRIPTION: Shows how to remove a subfield ('euro') from a nested document structure using a combination of $replaceWith, $setField, and $unsetField operators in MongoDB aggregation.

LANGUAGE: javascript
CODE:
db.inventory.aggregate( [
   { $replaceWith: {
        $setField: {
           field: "price",
           input: "$$ROOT",
           value: {
              $unsetField: {
                 field: "euro",
                 input: { $getField: "price" }
   } } } } }
] )

----------------------------------------

TITLE: MongoDB Retryable Read Operations
DESCRIPTION: List of MongoDB read operations that support automatic retrying, including Collection and Database operations. These operations can be retried once in case of network errors or replica set elections.

LANGUAGE: mongodb
CODE:
Collection.aggregate
Collection.count
Collection.countDocuments
Collection.distinct
Collection.estimatedDocumentCount
Collection.find
Database.aggregate
Collection.watch
Database.watch
MongoClient.watch
MongoClient.listDatabases
Database.listCollections
Collection.listIndexes

----------------------------------------

TITLE: Multiple Fields Removal Example in MongoDB Aggregation
DESCRIPTION: Example demonstrating removal of multiple top-level fields ('isbn' and 'copies') using $unset.

LANGUAGE: javascript
CODE:
db.books.aggregate([
   { $unset: [ "isbn", "copies" ] }
])

----------------------------------------

TITLE: Handling Null Values with $bottomN
DESCRIPTION: Demonstrates how $bottomN handles null and missing values in the aggregation pipeline.

LANGUAGE: javascript
CODE:
db.aggregate([
   {
      $documents: [
         { playerId: "PlayerA", gameId: "G1", score: 1 },
         { playerId: "PlayerB", gameId: "G1", score: 2 },
         { playerId: "PlayerC", gameId: "G1", score: 3 },
         { playerId: "PlayerD", gameId: "G1"},
         { playerId: "PlayerE", gameId: "G1", score: null }
      ]
   },
   {
      $group:
      {  
            _id: "$gameId",
            playerId:
               { 
                  $bottomN:
                     {    
                        output: [ "$playerId", "$score" ],
                        sortBy: { "score": -1 },
                        n: 3
                     }
               }
      }
   }
])

----------------------------------------

TITLE: MongoDB $acos Error Message Format
DESCRIPTION: Shows the error message format when $acos receives an invalid input outside the [-1,1] range.

LANGUAGE: bash
CODE:
"errmsg" : 
  "Failed to optimize pipeline :: caused by :: cannot 
  apply $acos to -inf, value must in [-1,1]"

----------------------------------------

TITLE: Sample MongoDB Index Build Check Response
DESCRIPTION: Example response showing no index builds in progress, with an empty inprog array indicating no ongoing index operations.

LANGUAGE: javascript
CODE:
{
   inprog: [],
   ok: 1,
   '$clusterTime': { ... },
   operationTime: <timestamp>
}

----------------------------------------

TITLE: Configuring File Copy Based Initial Sync in MongoDB
DESCRIPTION: Example of setting the initialSyncMethod parameter to enable file copy based initial sync on the destination member. This parameter must be set at startup.

LANGUAGE: plaintext
CODE:
initialSyncMethod="fileCopyBased"

----------------------------------------

TITLE: Checking for Orphaned Documents in MongoDB
DESCRIPTION: This aggregation pipeline uses the $shardedDataDistribution stage to check for orphaned documents in a specific collection. It's available from MongoDB 6.0.3 onwards.

LANGUAGE: javascript
CODE:
db.aggregate([ 
   { $shardedDataDistribution: {} },
   { $match: { "ns": "<database>.<collection>" } }
])

----------------------------------------

TITLE: Aggregation Pipeline Using $arrayToObject
DESCRIPTION: Complete aggregation pipeline example that transforms the dimensions array into a document structure.

LANGUAGE: javascript
CODE:
db.inventory.aggregate(
   [
      {
         $project: {
            item: 1,
            dimensions: { $arrayToObject: "$dimensions" }
         }
      }
   ]
)

----------------------------------------

TITLE: Updated MongoDB TLS Configuration with Extension Value
DESCRIPTION: Configuration showing the transition to using extension values with override for backward compatibility

LANGUAGE: yaml
CODE:
net:
  tls:
    mode:               requireTLS
    certificateKeyFile: /etc/mycerts/mongodb-server1.pem
    CAFile:             /etc/mycerts/ca.pem
    clusterFile:        /etc/mycerts/mongodb-cluster1.pem
    clusterCAFile:      /etc/mycerts/ca.pem
    clusterAuthX509:
       extensionValue:  mongodb://example.mongodb.net
security:
  clusterAuthMode: x509
setParameter:
   tlsClusterAuthX509Override: { attributes: O=MongoDB, OU=MongoDBServer }

----------------------------------------

TITLE: Final MongoDB Configuration After Certificate Rotation
DESCRIPTION: Final MongoDB configuration file after completing the certificate rotation process. The tlsX509ClusterAuthDNOverride parameter has been removed, and the server now only uses the new certificates.

LANGUAGE: yaml
CODE:
net.tls.mode: requireTLS
net.tls.certificateKeyFile: "./mycerts/mongodb-server1.pem"
net.tls.CAFile: "./mycerts/ca.pem"

security.clusterAuthMode: x509

net.tls.clusterFile:  "./mycerts/mongodb-cluster1.pem"
net.tls.clusterCAFile: "./mycerts/ca.pem"

----------------------------------------

TITLE: Using cursor.max() with Query and Hint in MongoDB
DESCRIPTION: Shows an example of using cursor.max() with a query and hint. This query uses the price index even if the _id index might be more efficient.

LANGUAGE: javascript
CODE:
db.products.find( { _id: { $in: [ 6, 7 ] } } ).max( { price: NumberDecimal("1.39") } ).hint( { price: 1 } )

----------------------------------------

TITLE: Modifying TCP Keepalive Settings in Windows Registry
DESCRIPTION: PowerShell command to set a new KeepAliveTime value in Windows registry. Must be run as Administrator. Values >= 600000ms (10 minutes) will be ignored by mongod and mongos.

LANGUAGE: powershell
CODE:
reg add HKLM\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\ /t REG_DWORD /v KeepAliveTime /d <value>

----------------------------------------

TITLE: Stopping the Balancer in MongoDB Sharded Cluster
DESCRIPTION: This snippet demonstrates how to stop the balancer in a MongoDB sharded cluster using the sh.stopBalancer() method and verify its state using sh.getBalancerState().

LANGUAGE: javascript
CODE:
sh.stopBalancer()

use config
while( sh.isBalancerRunning().mode != "off" ) {
   print( "Waiting for Balancer to stop..." );
   sleep( 1000 );
}

----------------------------------------

TITLE: Collection Repair Example
DESCRIPTION: Example showing how to repair a collection using the repair option introduced in MongoDB 5.0.

LANGUAGE: javascript
CODE:
db.runCommand( { validate: "myCollection", repair: true } )

----------------------------------------

TITLE: Modifying TCP Keepalive Idle Time on macOS
DESCRIPTION: This command changes the TCP keepalive idle time on macOS. Replace <value> with the desired time in milliseconds. Note that this change is not persistent across reboots and values >= 600000 ms are ignored by mongod and mongos.

LANGUAGE: bash
CODE:
sudo sysctl net.inet.tcp.keepidle=<value>

----------------------------------------

TITLE: Updating with Multiple Array Matches in MongoDB
DESCRIPTION: Illustrates a case where the positional $ operator behaves ambiguously when filtering on multiple array fields. This example attempts to update a value in the deans_list array but may produce unexpected results.

LANGUAGE: javascript
CODE:
db.students_deans_list.insertMany( [
   {
      _id: 8,
      activity_ids: [ 1, 2 ],
      grades: [ 90, 95 ],
      deans_list: [ 2021, 2020 ]
   }
] )

LANGUAGE: javascript
CODE:
db.students_deans_list.updateOne(
   { activity_ids: 1, grades: 95, deans_list: 2021 },
   { $set: { "deans_list.$": 2022 } }
)

----------------------------------------

TITLE: Querying Embedded Documents in MongoDB Shell
DESCRIPTION: Demonstrates how to query documents in MongoDB that exactly match an embedded document structure with specific width, height and unit of measure values.

LANGUAGE: javascript
CODE:
db.inventory.find(  { size: { w: 21, h: 14, uom: "cm" } }  )

----------------------------------------

TITLE: Query Write Operations Waiting for Lock
DESCRIPTION: Example showing how to query for write operations that are currently waiting for a lock.

LANGUAGE: javascript
CODE:
db.currentOp(
   {
     "waitingForLock" : true,
     $or: [
        { "op" : { "$in" : [ "insert", "update", "remove" ] } },
        { "command.findandmodify": { $exists: true } }
    ]  
   }
)

----------------------------------------

TITLE: Updating Array Elements with Multiple Conditions
DESCRIPTION: Demonstrates using $[<identifier>] with multiple conditions in arrayFilters to update specific array elements.

LANGUAGE: javascript
CODE:
db.students3.updateMany(
   { },
   { $inc: { "grades.$[elem].std" : -1 } },
   { arrayFilters: [ { "elem.grade": { $gte: 80 }, "elem.std": { $gte: 5 } } ] }
)

----------------------------------------

TITLE: Basic MongoDB Shell Authentication
DESCRIPTION: Demonstrates basic authentication with username only, prompting for password input.

LANGUAGE: javascript
CODE:
db.auth( <username> )

----------------------------------------

TITLE: Config Server MongoDB Launch Configuration
DESCRIPTION: YAML configuration for launching a config server instance with required settings.

LANGUAGE: yaml
CODE:
sharding:
   clusterRole: configsvr
replication:
   replSetName: <string>
net:
   port: <port>
   bindIp: localhost,<ip address>
storage:
   dbpath: <path>

----------------------------------------

TITLE: MongoDB $elemMatch Projection with Multiple Field Criteria
DESCRIPTION: Advanced query using $elemMatch projection to filter students by both school and age criteria.

LANGUAGE: javascript
CODE:
db.schools.find( { zipcode: "63109" },
                 { students: { $elemMatch: { school: 102, age: { $gt: 10} } } } )

----------------------------------------

TITLE: Sample MongoDB Collection for $year Operator Example
DESCRIPTION: Provides a sample document structure for the 'sales' collection used in the $year operator example. The document includes fields for item, price, quantity, and date.

LANGUAGE: javascript
CODE:
{
  "_id" : 1,
  "item" : "abc",
  "price" : 10,
  "quantity" : 2,
  "date" : ISODate("2014-01-01T08:15:39.736Z")
}

----------------------------------------

TITLE: Disabling MongoDB Balancer and Checking State
DESCRIPTION: Commands to stop the balancer and verify its disabled state using mongosh shell

LANGUAGE: javascript
CODE:
sh.stopBalancer()

sh.getBalancerState()

----------------------------------------

TITLE: Configuring Automatic Encryption Options in Java for MongoDB
DESCRIPTION: This snippet demonstrates how to set up automatic encryption options for MongoDB using the Java driver. It includes configuration for the key vault namespace, KMS provider, and schema map.

LANGUAGE: java
CODE:
AutoEncryptionSettings autoEncryptionSettings = AutoEncryptionSettings.builder()
    .keyVaultNamespace("admin.datakeys")
    .kmsProviders(kmsProviders)
    .schemaMap(schemaMap)
    .extraOptions(extraOptions)
    .build();

MongoClientSettings clientSettings = MongoClientSettings.builder()
    .autoEncryptionSettings(autoEncryptionSettings)
    .build();

----------------------------------------

TITLE: MongoDB dropUser Command Example
DESCRIPTION: Example showing how to remove a user named 'reportUser1' from the products database with majority write concern and timeout.

LANGUAGE: javascript
CODE:
use products
db.runCommand( { 
   dropUser: "reportUser1",
   writeConcern: { w: "majority", wtimeout: 5000 }
} )

----------------------------------------

TITLE: MongoDB $topN Example: Finding Highest Scores in a Single Game
DESCRIPTION: Demonstrates using $topN to find the three highest scoring players in a single game, including document insertion and aggregation pipeline.

LANGUAGE: javascript
CODE:
db.gamescores.insertMany([
   { playerId: "PlayerA", gameId: "G1", score: 31 },
   { playerId: "PlayerB", gameId: "G1", score: 33 },
   { playerId: "PlayerC", gameId: "G1", score: 99 },
   { playerId: "PlayerD", gameId: "G1", score: 1 },
   { playerId: "PlayerA", gameId: "G2", score: 10 },
   { playerId: "PlayerB", gameId: "G2", score: 14 },
   { playerId: "PlayerC", gameId: "G2", score: 66 },
   { playerId: "PlayerD", gameId: "G2", score: 80 }
])

db.gamescores.aggregate( [
   {
      $match : { gameId : "G1" }
   },
   {
      $group:
         {
            _id: "$gameId",
            playerId:
               {
                  $topN:
                  {
                     output: ["$playerId", "$score"],
                     sortBy: { "score": -1 },
                     n:3
                  }
               }
         }
   }
] )

----------------------------------------

TITLE: Creating a Unique Index on Key Vault Collection in MongoDB
DESCRIPTION: This snippet demonstrates how to create a unique index on the 'keyAltNames' field of the key vault collection to ensure key name uniqueness.

LANGUAGE: javascript
CODE:
keyVault.createIndex(
    { "keyAltNames": 1 },
    { unique: true, partialFilterExpression: { "keyAltNames": { $exists: true } } }
);

----------------------------------------

TITLE: Listing Special Characters Requiring Percent Encoding for AWS Credentials
DESCRIPTION: This code block lists the special characters that must be percent-encoded when present in AWS access key ID, secret access key, or session token for use with MongoDB.

LANGUAGE: none
CODE:
$ : / ? # [ ] @

----------------------------------------

TITLE: Configuring MongoDB Atlas Search Indexes with Mappings and Synonyms
DESCRIPTION: This snippet defines two search indexes for a MongoDB Atlas cluster. It includes configurations for dynamic mappings, stored source fields, synonym mappings, and detailed status information for each shard in the cluster.

LANGUAGE: javascript
CODE:
[
  {
    id: '6524096020da840844a4c4a7',
    name: 'default',
    status: 'BUILDING',
    queryable: true,
    latestDefinitionVersion: {
      version: 2,
      createdAt: ISODate("2023-10-09T14:51:57.355Z")
    },
    latestDefinition: {
      mappings: { dynamic: true },
      storedSource: { include: [ 'awards.text' ] }
    },
    statusDetail: [
      {
        hostname: 'atlas-n1cm1j-shard-00-02',
        status: 'BUILDING',
        queryable: true,
        mainIndex: {
          status: 'READY',
          queryable: true,
          definitionVersion: {
            version: 0,
            createdAt: ISODate("2023-10-09T14:08:32.000Z")
          },
          definition: { mappings: { dynamic: true, fields: {} } }
        },
        stagedIndex: {
          status: 'PENDING',
          queryable: false,
          definitionVersion: {
            version: 1,
            createdAt: ISODate("2023-10-09T14:51:29.000Z")
          },
          definition: {
            mappings: { dynamic: true, fields: {} },
            storedSource: true
          }
        }
      },
      {
        hostname: 'atlas-n1cm1j-shard-00-01',
        status: 'BUILDING',
        queryable: true,
        mainIndex: {
          status: 'READY',
          queryable: true,
          definitionVersion: {
            version: 0,
            createdAt: ISODate("2023-10-09T14:08:32.000Z")
          },
          definition: { mappings: { dynamic: true, fields: {} } }
        },
        stagedIndex: {
          status: 'PENDING',
          queryable: false,
          definitionVersion: {
            version: 1,
            createdAt: ISODate("2023-10-09T14:51:29.000Z")
          },
          definition: {
            mappings: { dynamic: true, fields: {} },
            storedSource: true
          }
        }
      },
      {
        hostname: 'atlas-n1cm1j-shard-00-00',
        status: 'BUILDING',
        queryable: true,
        mainIndex: {
          status: 'READY',
          queryable: true,
          definitionVersion: {
            version: 0,
            createdAt: ISODate("2023-10-09T14:08:32.000Z")
          },
          definition: { mappings: { dynamic: true, fields: {} } }
        }
      }
    ]
  },
  {
    id: '65240be420da840844a4d077',
    name: 'synonym_mappings',
    status: 'READY',
    queryable: true,
    latestDefinitionVersion: {
      version: 0,
      createdAt: ISODate("2023-10-09T14:19:16.305Z")
    },
    latestDefinition: {
      mappings: {
        dynamic: true,
        fields: {
          fullplot: { type: 'string' }
        }
      },
      synonyms: [
        {
          name: 'synonym_mapping',
          analyzer: 'lucene.english',
          source: { collection: 'synonyms' }
        }
      ]
    },
    synonymMappingStatus: 'READY',
    synonymMappingStatusDetail: [
      {
        synonym_mapping: {
          status: 'READY',
          queryable: true
        }
      }
    ],
    statusDetail: [
      {
        hostname: 'atlas-n1cm1j-shard-00-02',
        status: 'READY',
        queryable: true,
        mainIndex: {
          status: 'READY',
          queryable: true,
          definitionVersion: {
            version: 0,
            createdAt: ISODate("2023-10-09T14:19:16.000Z")
          },
          definition: {
            mappings: {
              dynamic: true,
              fields: {
                fullplot: {
                  type: 'string',
                  indexOptions: 'offsets',
                  store: true,
                  norms: 'include'
                }
              }
            },
            synonyms: [
              {
                name: 'synonym_mapping',
                analyzer: 'lucene.english',
                source: { collection: 'synonyms' }
              }
            ]
          },
          synonymMappingStatus: 'READY',
          synonymMappingStatusDetail: [
            {
              synonym_mapping: {
                status: 'READY',
                queryable: true
              }
            }
          ]
        }
      },
      {
        hostname: 'atlas-n1cm1j-shard-00-01',
        status: 'READY',
        queryable: true,
        mainIndex: {
          status: 'READY',
          queryable: true,
          definitionVersion: {
            version: 0,
            createdAt: ISODate("2023-10-09T14:19:16.000Z")
          },
          definition: {
            mappings: {
              dynamic: true,
              fields: {
                fullplot: {
                  type: 'string',
                  indexOptions: 'offsets',
                  store: true,
                  norms: 'include'
                }
              }
            },
            synonyms: [
              {
                name: 'synonym_mapping',
                analyzer: 'lucene.english',
                source: { collection: 'synonyms' }
              }
            ]
          },
          synonymMappingStatus: 'READY',
          synonymMappingStatusDetail: [
            {
              synonym_mapping: {
                status: 'READY',
                queryable: true
              }
            }
          ]
        }
      },
      {
        hostname: 'atlas-n1cm1j-shard-00-00',
        status: 'READY',
        queryable: true,
        mainIndex: {
          status: 'READY',
          queryable: true,
          definitionVersion: {
            version: 0,
            createdAt: ISODate("2023-10-09T14:19:16.000Z")
          },
          definition: {
            mappings: {
              dynamic: true,
              fields: {
                fullplot: {
                  type: 'string',
                  indexOptions: 'offsets',
                  store: true,
                  norms: 'include'
                }
              }
            },
            synonyms: [
              {
                name: 'synonym_mapping',
                analyzer: 'lucene.english',
                source: { collection: 'synonyms' }
              }
            ]
          },
          synonymMappingStatus: 'READY',
          synonymMappingStatusDetail: [
            {
              synonym_mapping: {
                status: 'READY',
                queryable: true
              }
            }
          ]
        }
      }
    ]
  }
]

----------------------------------------

TITLE: Checking Balance Status of a Sharded Collection
DESCRIPTION: Example of using sh.balancerCollectionStatus() to check the balance status of chunks in the 'test.contacts' sharded collection. This is typically executed on a mongos instance.

LANGUAGE: javascript
CODE:
sh.balancerCollectionStatus("test.contacts")

----------------------------------------

TITLE: Creating Index for MongoDB Queryable Encryption
DESCRIPTION: Code samples showing how to create a unique index on the keyAltNames field in the encryption.__keyVault namespace across different programming languages. This index is essential for queryable encryption functionality in MongoDB.

LANGUAGE: javascript
CODE:
await keyVaultClient.createIndex(
  {
    "keyAltNames": 1
  },
  {
    "unique": true,
    "partialFilterExpression": {
      "keyAltNames": {
        "$exists": true
      }
    }
  }
);

LANGUAGE: python
CODE:
key_vault.create_index(
    "keyAltNames",
    unique=True,
    partialFilterExpression={"keyAltNames": {"$exists": True}}
)

LANGUAGE: java
CODE:
keyVault.createIndex(
    Indexes.ascending("keyAltNames"),
    new IndexOptions()
        .unique(true)
        .partialFilterExpression(Filters.exists("keyAltNames"))
);

LANGUAGE: go
CODE:
_, err = keyVault.Indexes().CreateOne(
    context.TODO(),
    mongo.IndexModel{
        Keys:    bson.D{{"keyAltNames", 1}},
        Options: options.Index().SetUnique(true).SetPartialFilterExpression(bson.D{{"keyAltNames", bson.D{{"$exists", true}}}}),
    },
)

LANGUAGE: csharp
CODE:
var indexKeysDefinition = Builders<BsonDocument>.IndexKeys.Ascending("keyAltNames");
var partialFilterDefinition = Builders<BsonDocument>.Filter.Exists("keyAltNames");
var indexOptions = new CreateIndexOptions
{
    Unique = true,
    PartialFilterExpression = partialFilterDefinition
};
var indexModel = new CreateIndexModel<BsonDocument>(indexKeysDefinition, indexOptions);
keyVault.Indexes.CreateOne(indexModel);

----------------------------------------

TITLE: Retrieving Replication Help in MongoDB Shell
DESCRIPTION: This function returns help text for replication-related shell functions in MongoDB. It is used to get information about replica set operations and commands.

LANGUAGE: javascript
CODE:
rs.help()

----------------------------------------

TITLE: Modifying Indexes in MongoDB Shell
DESCRIPTION: To modify an existing index in MongoDB Shell, the index must be dropped and recreated. TTL indexes are an exception and can be modified using the collMod command with the index collection flag.



----------------------------------------

TITLE: Connecting to MongoDB Replica Set with Various Drivers
DESCRIPTION: This snippet shows the connection string format for connecting to a MongoDB replica set with authentication. It is applicable to multiple drivers and programming languages.

LANGUAGE: bash
CODE:
mongodb://myDatabaseUser:D1fficultP%40ssw0rd@localhost,localhost:27018,localhost:27019/?replicaSet=test

----------------------------------------

TITLE: Sample Output for $lt Query in MongoDB
DESCRIPTION: Example output showing a document that matches the less than condition where quantity is less than 20.

LANGUAGE: javascript
CODE:
{
  _id: ObjectId("61ba634dfe687fce2f04241f"),
  item: 'washers',
  quantity: 10,
  carrier: { name: 'Shipit', fee: 1 }
}

----------------------------------------

TITLE: Checking Lock Status
DESCRIPTION: Example showing how to call the serverIsLocked function to check database lock status.

LANGUAGE: javascript
CODE:
serverIsLocked()

----------------------------------------

TITLE: MongoDB Health Observer Configuration Table in RST
DESCRIPTION: ReStructuredText table defining the health observer facets and their monitoring responsibilities

LANGUAGE: rst
CODE:
.. list-table::
  :header-rows: 1
  :widths: 25 75

  * - Facet

    - What the Health Observer Checks

  * - ``configServer``

    - Cluster health issues related to connectivity to the config server.

  * - ``dns``

    - Cluster health issues related to DNS availability and functionality.

  * - ``ldap``

    - Cluster health issues related to LDAP availability and functionality.

----------------------------------------

TITLE: Executing FileMD5 Command in MongoDB
DESCRIPTION: This snippet demonstrates how to use the filemd5 command in MongoDB. It takes the files_id of the file and the name of the GridFS root collection as arguments. The command returns the MD5 hash of the specified GridFS file.

LANGUAGE: javascript
CODE:
db.runCommand(
   { 
     filemd5: ObjectId("4f1f10e37671b50e4ecd2776"), 
     root: "fs" 
   }
)

----------------------------------------

TITLE: Initializing KeyVault and Calling getKeyByAltName() in MongoDB
DESCRIPTION: This snippet demonstrates how to initialize a KeyVault object and use the getKeyByAltName() method to retrieve a data encryption key by its alternate name.

LANGUAGE: javascript
CODE:
keyVault = db.getMongo().getKeyVault()

keyVault.getKeyByAltName("keyAltName")

----------------------------------------

TITLE: Retrieving System Hostname in MongoDB Shell
DESCRIPTION: The hostname() method returns the hostname of the system running the mongosh binary. It takes no parameters and returns a string value representing the system's hostname.

LANGUAGE: javascript
CODE:
hostname()

----------------------------------------

TITLE: Verifying Aggregation Update in MongoDB
DESCRIPTION: Queries the 'customers' collection to verify the update performed by the aggregation pipeline alternative to $currentDate.

LANGUAGE: javascript
CODE:
db.customers.find().pretty()

----------------------------------------

TITLE: Example of MissingLocalCollection Inconsistency in MongoDB Cursor Result
DESCRIPTION: Demonstrates a MongoDB cursor result containing a MissingLocalCollection inconsistency. The example shows the inconsistency within the firstBatch array of the cursor object.

LANGUAGE: json
CODE:
{
   cursor: {
      id: Long("0"),
      ns: "test.$cmd.aggregate",
      firstBatch: [
         {
            type: "MissingLocalCollection",
            description: "Collection registered on the sharding catalog not found on the given shards",
            details: {
               namespace: "test.authors",
               uuid: UUID("1ad56770-61e2-48e9-83c6-8ecefe73cfc4"),
               shard: "shard02"
            }
         }
      ],
   },
   ok: 1
}

----------------------------------------

TITLE: Executing movePrimary Command in MongoDB
DESCRIPTION: Command syntax for reassigning the primary shard that holds unsharded collections in a database. Requires specification of the database name and the new primary shard target.

LANGUAGE: javascript
CODE:
db.adminCommand( { movePrimary: <databaseName>, to: <newPrimaryShard> } )

----------------------------------------

TITLE: MongoDB $eq Operator Aggregation Example
DESCRIPTION: Example showing how to use the $eq operator in a MongoDB aggregation pipeline to compare quantity values against 250. The example uses $project stage to output the comparison results.

LANGUAGE: javascript
CODE:
db.inventory.aggregate(
      [
        {
          $project:
             {
               item: 1,
               qty: 1,
               qtyEq250: { $eq: [ "$qty", 250 ] },
               _id: 0
             }
        }
      ]
   )

----------------------------------------

TITLE: Configuring a Delayed Replica Set Member in MongoDB
DESCRIPTION: This snippet shows the configuration object for a delayed replica set member. It sets the priority to 0, enables the hidden flag, and specifies the delay in seconds.

LANGUAGE: javascript
CODE:
{
   "_id" : <num>,
   "host" : <hostname:port>,
   "priority" : 0,
   "secondaryDelaySecs" : <seconds>,
   "hidden" : true
}

----------------------------------------

TITLE: Manual Field Encryption in Python
DESCRIPTION: Implementation of document field encryption using Python MongoDB driver, showing how to encrypt specific fields before document insertion.

LANGUAGE: python
CODE:
// Code not visible in provided input

----------------------------------------

TITLE: Basic reshardCollection Command Syntax
DESCRIPTION: Shows the complete syntax structure for the reshardCollection command with all possible fields and options.

LANGUAGE: javascript
CODE:
db.adminCommand({
   reshardCollection: "<database>.<collection>",
   key: <shardkey>,
   unique: <boolean>,
   numInitialChunks: <integer>,
   collation: { locale: "simple" },
   zones: [
       {
           min: <document with same shape as shardkey>,
           max: <document with same shape as shardkey>,
           zone: <string> | null
       },
       ...
   ],
   forceRedistribution: <bool>
})

----------------------------------------

TITLE: MongoDB Explain Output Fields
DESCRIPTION: References to MongoDB explain output data fields that contain query planner and execution statistics information.

LANGUAGE: rst
CODE:
~explain.queryPlanner
~explain.executionStats

----------------------------------------

TITLE: Querying and Projecting with $meta Operator for Index Key
DESCRIPTION: Finds documents with a specific type and uses the $meta operator to include the index key value if an index was used in a find operation.

LANGUAGE: javascript
CODE:
db.orders.find( { type: "apparel" }, { idxKey: { $meta: "indexKey" } } )

----------------------------------------

TITLE: Querying Encrypted Documents in Go with MongoDB Queryable Encryption
DESCRIPTION: This code snippet shows how to retrieve a document with encrypted fields using both a client configured for automatic Queryable Encryption and a regular client in Go. It demonstrates the difference in query results when accessing encrypted data.

LANGUAGE: go
CODE:
var doc bson.M
err = collection.FindOne(context.TODO(), bson.D{{"encryptedField", "123456789"}}).Decode(&doc)
fmt.Println("\nRetrieved document with encrypted client:")
result, err := encryptedClient.Database("test").Collection("coll").FindOne(context.TODO(), bson.D{{"encryptedField", "123456789"}}).DecodeBytes()
fmt.Println(result)
fmt.Println("\nRetrieved document with regular client:")
result, err = regularClient.Database("test").Collection("coll").FindOne(context.TODO(), bson.D{{"encryptedField", "123456789"}}).DecodeBytes()
fmt.Println(result)

----------------------------------------

TITLE: MongoDB Sample Data Insertion
DESCRIPTION: Example showing how to insert sample game score data into a collection.

LANGUAGE: javascript
CODE:
db.gamescores.insertMany([
   { playerId: "PlayerA", gameId: "G1", score: 31 },
   { playerId: "PlayerB", gameId: "G1", score: 33 },
   { playerId: "PlayerC", gameId: "G1", score: 99 },
   { playerId: "PlayerD", gameId: "G1", score: 1 },
   { playerId: "PlayerA", gameId: "G2", score: 10 },
   { playerId: "PlayerB", gameId: "G2", score: 14 },
   { playerId: "PlayerC", gameId: "G2", score: 66 },
   { playerId: "PlayerD", gameId: "G2", score: 80 }
])

----------------------------------------

TITLE: Projecting Nested Array Fields in MongoDB
DESCRIPTION: Aggregation pipeline demonstrating how to project nested warehouse fields from an array.

LANGUAGE: javascript
CODE:
db.products.aggregate( [
   {
      $project: {
         item: 1,
         warehouses: "$instock.warehouse"
      }
   }
] )

----------------------------------------

TITLE: Creating Basic and Sparse Indexes in MongoDB
DESCRIPTION: Creates two non-unique indexes on the score field - one basic index and one sparse index. Shows how to create standard indexes with different sparse options on the same key pattern.

LANGUAGE: javascript
CODE:
db.scoreHistory.createIndex( { score : 1 }, { name: "sparse_index", sparse: true } )
db.scoreHistory.createIndex( { score : 1 }, { name: "basic_index" } )

----------------------------------------

TITLE: Multiple Fields Removal Syntax in MongoDB Aggregation
DESCRIPTION: Syntax for removing multiple fields using $unset aggregation stage with an array of field names.

LANGUAGE: javascript
CODE:
{ $unset: [ "<field1>", "<field2>", ... ] }

----------------------------------------

TITLE: Configuring Initial Batch Size for MongoDB Cursor
DESCRIPTION: Demonstrates how to set an empty initial batch size for a MongoDB cursor. This is useful for quickly returning a cursor or failure message without significant server-side processing.

LANGUAGE: json
CODE:
{ "cursor": { "batchSize": 0 } }

----------------------------------------

TITLE: Testing LDAP Configuration with mongoldap
DESCRIPTION: Example command showing how to validate LDAP settings using mongoldap with sample successful output

LANGUAGE: bash
CODE:
mongoldap --config=<path-to-config> --user="bob@dba.example.com" --password="secret123"

LANGUAGE: bash
CODE:
Checking that an LDAP server has been specified...
[OK] LDAP server found

Connecting to LDAP server...
[OK] Connected to LDAP server

Parsing MongoDB to LDAP DN mappings..
[OK] MongoDB to LDAP DN mappings appear to be valid

Attempting to authenticate against the LDAP server...
[OK] Successful authentication performed

Checking if LDAP authorization has been enabled by configuration...
[OK] LDAP authorization enabled

Parsing LDAP query template..
[OK] LDAP query configuration template appears valid

Executing query against LDAP server...
[OK] Successfully acquired the following roles:

----------------------------------------

TITLE: Grouping and Calculating Sum in MongoDB Aggregation
DESCRIPTION: Demonstrates an aggregation pipeline that matches documents, groups by customer ID, calculates total amount, and sorts the results.

LANGUAGE: javascript
CODE:
db.orders.aggregate( [
   { $match: { status: "A" } },
   { $group: { _id: "$cust_id", total: { $sum: "$amount" } } },
   { $sort: { total: -1 } }
] )

----------------------------------------

TITLE: Grouping and Calculating Sum in MongoDB Aggregation
DESCRIPTION: Demonstrates an aggregation pipeline that matches documents, groups by customer ID, calculates total amount, and sorts the results.

LANGUAGE: javascript
CODE:
db.orders.aggregate( [
   { $match: { status: "A" } },
   { $group: { _id: "$cust_id", total: { $sum: "$amount" } } },
   { $sort: { total: -1 } }
] )

----------------------------------------

TITLE: MongoDB $bottom Null Handling Example
DESCRIPTION: Example demonstrating how $bottom handles null and missing values in aggregation pipeline.

LANGUAGE: javascript
CODE:
db.aggregate( [
   {
      $documents: [
         { playerId: "PlayerA", gameId: "G1", score: 1 },
         { playerId: "PlayerB", gameId: "G1", score: 2 },
         { playerId: "PlayerC", gameId: "G1", score: 3 },
         { playerId: "PlayerD", gameId: "G1"},
         { playerId: "PlayerE", gameId: "G1", score: null }
      ]
   },
   {
      $group:
      {  
         _id: "$gameId",
         playerId:
            { 
               $bottom:
                  {    
                     output: [ "$playerId", "$score" ],
                     sortBy: { "score": -1 }
                  }
            }
      }
   }
] )

----------------------------------------

TITLE: Query Results
DESCRIPTION: Results showing the BSON types returned by the $type operator for different values.

LANGUAGE: javascript
CODE:
{ _id: 0, "a" : "double" }
{ _id: 1, "a" : "array" }
{ _id: 2, "a" : "object" }
{ _id: 3, "a" : "string" }
{ _id: 4, "a" : "long" }
{ _id: 5, "a" : "missing" }

----------------------------------------

TITLE: Stopping In-Progress Shard Move in MongoDB Shell
DESCRIPTION: This command stops the ongoing migration of the 'sales.us_accounts' collection to a new shard. It uses the abortBalancerMove command in the MongoDB shell to halt the shard balancing operation.

LANGUAGE: shell
CODE:
db.adminCommand( { abortBalancerMove : "sales.us_accounts" } )

----------------------------------------

TITLE: Creating a Capped Collection Example
DESCRIPTION: Example showing how to create a capped collection limited to 64 kilobytes.

LANGUAGE: javascript
CODE:
db.runCommand( { create: "collection", capped: true, size: 64 * 1024 } )

----------------------------------------

TITLE: Result of MongoDB Aggregation with $second Operator
DESCRIPTION: Shows the output document resulting from the aggregation pipeline that uses $second and other date operators to extract various components of the date field.

LANGUAGE: javascript
CODE:
{
  "_id" : 1,
  "year" : 2014,
  "month" : 1,
  "day" : 1,
  "hour" : 8,
  "minutes" : 15,
  "seconds" : 39,
  "milliseconds" : 736,
  "dayOfYear" : 1,
  "dayOfWeek" : 4,
  "week" : 0
}

----------------------------------------

TITLE: Querying Encrypted Documents with MongoDB CSFLE in Java
DESCRIPTION: This Java code snippet demonstrates how to query a MongoDB collection for an encrypted document using both a CSFLE-configured client and a standard client. It showcases the difference in query results when using automatic encryption.

LANGUAGE: java
CODE:
Document doc = encryptedCollection.find(eq("firstName", "Jon")).first();
System.out.println("Document retrieved with CSFLE-enabled client:");
System.out.println(doc != null ? doc.toJson() : null);

doc = standardCollection.find(eq("firstName", "Jon")).first();
System.out.println("\nDocument retrieved with standard client:");
System.out.println(doc != null ? doc.toJson() : null);

----------------------------------------

TITLE: Printing Secondary Replication Info in MongoDB
DESCRIPTION: This method prints a formatted report of the replica set status from the perspective of the secondary member. It is identical to db.printSecondaryReplicationInfo() and is available in Atlas (excluding free tier) and on-premises deployments.

LANGUAGE: javascript
CODE:
rs.printSecondaryReplicationInfo()

----------------------------------------

TITLE: Removing mongos.exe Windows Service
DESCRIPTION: Command line options for removing the mongos.exe Windows Service, which will stop the service if running before removal.

LANGUAGE: shell
CODE:
--remove
--serviceName <name>

----------------------------------------

TITLE: Executing JavaScript Test for Transaction Recovery
DESCRIPTION: References a JavaScript test file that checks transaction recovery using a recovery router, which was made more robust to spurious shard version refreshes.

LANGUAGE: javascript
CODE:
txn_recover_decision_using_recovery_router.js

----------------------------------------

TITLE: Creating Customer Master Key for Queryable Encryption in Python
DESCRIPTION: This Python code snippet demonstrates the creation of a 96-byte Customer Master Key (CMK) and saving it to the filesystem as 'master-key.txt'.

LANGUAGE: python
CODE:
import os

key = os.urandom(96)
with open("master-key.txt", "wb") as f:
    f.write(key)

----------------------------------------

TITLE: Returning First N Array Elements with $slice
DESCRIPTION: Example query showing how to return the first three elements of the comments array using positive slice value.

LANGUAGE: javascript
CODE:
db.posts.find( {}, { comments: { $slice: 3 } } )

----------------------------------------

TITLE: Inserting Documents with Array Fields in MongoDB
DESCRIPTION: This code snippet demonstrates how to insert multiple documents into a 'shoes' collection in MongoDB. Each document contains an '_id' field and a 'sizes' field with an array of numeric values.

LANGUAGE: javascript
CODE:
db.shoes.insertMany( [
   { _id: 'A', sizes: [ 7, 11 ] }, 
   { _id: 'B', sizes: [ 8, 9, 10 ] }
] )

----------------------------------------

TITLE: Defining ReStructuredText Variables and Substitutions
DESCRIPTION: Defines text substitution variables and Unicode characters for use throughout the documentation. These include references to MongoDB edition, platform name, package manager, and executable names.

LANGUAGE: restructuredtext
CODE:
.. |arrow| unicode:: U+27A4
.. |edition| replace:: Community
.. |distro-name| replace:: macOS
.. |package-manager| replace:: ``brew``
.. |executable-name| replace:: ``mongod``
.. |mdb-download-link| replace:: `MongoDB Download Center <https://www.mongodb.com/try/download/community?tck=docs_server>`__

----------------------------------------

TITLE: Configuring TuneD Profile Settings
DESCRIPTION: Configuration file that inherits from virtual-guest profile and sets transparent huge pages to always be enabled

LANGUAGE: ini
CODE:
[main] 
include=virtual-guest

[vm]
transparent_hugepages=always

----------------------------------------

TITLE: Specifying Collation Locale Variants in MongoDB (JavaScript)
DESCRIPTION: Demonstrates the syntax for specifying a collation locale variant in MongoDB. This is used when a locale has special language-specific rules that need to be applied. The syntax involves adding the variant after the locale code, separated by '@collation='.

LANGUAGE: javascript
CODE:
{ "locale" : "<locale code>@collation=<variant>" }

----------------------------------------

TITLE: Running Compact Command on MongoDB Collection
DESCRIPTION: Example of executing the compact command on a collection named 'movies'.

LANGUAGE: javascript
CODE:
db.runCommand( { compact: "movies" } )

----------------------------------------

TITLE: Inserting Sample Data into MongoDB inventory Collection
DESCRIPTION: Shows how to insert multiple documents into the 'inventory' collection using the insertMany method. This data is used for subsequent query examples.

LANGUAGE: javascript
CODE:
db.inventory.insertMany( [
   { "item": "Pens", "quantity": 350, "tags": [ "school", "office" ] },
   { "item": "Erasers", "quantity": 15, "tags": [ "school", "home" ] },
   { "item": "Maps", "tags": [ "office", "storage" ] },
   { "item": "Books", "quantity": 5, "tags": [ "school", "storage", "home" ] }
] )

----------------------------------------

TITLE: Calculate Expected Delivery Dates
DESCRIPTION: Aggregation pipeline that adds 3 days to purchase dates to calculate expected delivery dates.

LANGUAGE: javascript
CODE:
db.shipping.aggregate(
   [
      {
         $project:
            {
               expectedDeliveryDate:
                  {
                     $dateAdd:
                        {
                           startDate: "$purchaseDate",
                           unit: "day",
                           amount: 3
                        }
                  }
            }
       },
       { 
          $merge: "shipping" 
       }
    ]
 )

----------------------------------------

TITLE: Removing Shard Tag in MongoDB
DESCRIPTION: The sh.removeShardTag() method removes the association between a tag and a shard. It takes two parameters: the shard name and the tag to remove. This method should only be executed when connected to a mongos instance.

LANGUAGE: javascript
CODE:
sh.removeShardTag(shard, tag)

----------------------------------------

TITLE: Using $ceil in Aggregation Pipeline
DESCRIPTION: Example of using $ceil in a $project stage to calculate ceiling values for decimal numbers.

LANGUAGE: javascript
CODE:
db.samples.aggregate([
   { $project: { value: 1, ceilingValue: { $ceil: "$value" } } }
])

----------------------------------------

TITLE: Count All Documents Example
DESCRIPTION: Counts all documents in the orders collection.

LANGUAGE: javascript
CODE:
db.orders.find().count()

----------------------------------------

TITLE: Index Key Exceed Limit Error Message
DESCRIPTION: Error message format when an index key exceeds the maximum allowed length for a document.

LANGUAGE: none
CODE:
Document Error: key for index '<indexName>' (<indexSpec>) too long on document: <doc>

----------------------------------------

TITLE: Inserting Multiple Documents into Time Series Collection in MongoDB
DESCRIPTION: Inserts multiple temperature measurements into the 'weather' time series collection using insertMany(). Each document contains a single measurement with timestamp, metadata, and temperature value.

LANGUAGE: javascript
CODE:
db.weather.insertMany( [
   {
      metadata: { sensorId: 5578, type: "temperature" },
      timestamp: ISODate("2021-05-18T00:00:00.000Z"),
      temp: 12
   },
   {
      metadata: { sensorId: 5578, type: "temperature" },
      timestamp: ISODate("2021-05-18T04:00:00.000Z"),
      temp: 11
   },
   // ... more documents ...
] )

----------------------------------------

TITLE: MongoDB Bitwise AND Operation Example
DESCRIPTION: Demonstrates using the $bit operator with AND operation to update a document's integer field.

LANGUAGE: javascript
CODE:
db.switches.updateOne(
   { _id: 1 },
   { $bit: { expdata: { and: Int32( 10 ) } } }
)

----------------------------------------

TITLE: Referencing MongoDB Read Concern
DESCRIPTION: This snippet demonstrates how to reference the read concern documentation in MongoDB.

LANGUAGE: mongodb
CODE:
:ref:`read-concern <read-concern>`

----------------------------------------

TITLE: Converting Events Collection to Capped Format in MongoDB
DESCRIPTION: Example demonstrating how to convert an 'events' collection to a capped collection with 8192 bytes size limit.

LANGUAGE: javascript
CODE:
db.runCommand( { convertToCapped: 'events', size: 8192 } )
db.events.stats()

----------------------------------------

TITLE: Suppressing Specific Output in MongoDB Server Status
DESCRIPTION: This snippet demonstrates how to suppress repl, metrics, and locks information in the db.serverStatus() output. It uses a projection object to exclude these fields.

LANGUAGE: javascript
CODE:
db.serverStatus( { repl: 0,  metrics: 0, locks: 0 } )

----------------------------------------

TITLE: Creating an Index on Embedded Product Color in MongoDB
DESCRIPTION: Example of how to create an index on the color field of embedded products to support efficient queries. This operation uses the createIndex method to create an ascending index on the products.color field.

LANGUAGE: javascript
CODE:
db.sellers.createIndex( { "products.color": 1 } )

----------------------------------------

TITLE: Query Construction in C++ with BSON to Prevent Injection
DESCRIPTION: Demonstrates secure query construction in C++ using BSON objects to prevent SQL injection attacks. Shows how queries are built as objects rather than strings.

LANGUAGE: cpp
CODE:
BSONObj my_query = BSON( "name" << a_name );
auto_ptr<DBClientCursor> cursor = c.query("tutorial.persons", my_query);

----------------------------------------

TITLE: Initializing Encrypted MongoDB Client
DESCRIPTION: Creates a MongoDB client instance with automatic encryption settings enabled, incorporating all previously configured encryption parameters and settings.



----------------------------------------

TITLE: Initializing Encrypted MongoDB Client
DESCRIPTION: Creates a MongoDB client instance with automatic encryption settings enabled, incorporating all previously configured encryption parameters and settings.



----------------------------------------

TITLE: Specifying Single-Ringed GeoJSON Polygon with Custom CRS in MongoDB $geometry
DESCRIPTION: This snippet shows how to use $geometry to specify a single-ringed GeoJSON polygon with a custom MongoDB coordinate reference system. This is only available for $geoWithin and $geoIntersects operators.

LANGUAGE: javascript
CODE:
$geometry: {
   type: "Polygon",
   coordinates: [ <coordinates> ],
   crs: {
      type: "name",
      properties: { name: "urn:x-mongodb:crs:strictwinding:EPSG:4326" }
   }
}

----------------------------------------

TITLE: MongoDB $substr Aggregation Example
DESCRIPTION: Aggregation pipeline example that uses $substr to split quarter values into year and quarter components using substring extraction.

LANGUAGE: javascript
CODE:
db.inventory.aggregate(
   [
     {
       $project:
          {
            item: 1,
            yearSubstring: { $substr: [ "$quarter", 0, 2 ] },
            quarterSubtring: { $substr: [ "$quarter", 2, -1 ] }
          }
      }
   ]
)

----------------------------------------

TITLE: Configuring Query Analyzer Basic Syntax
DESCRIPTION: Basic syntax for the configureQueryAnalyzer command showing the required fields: configureQueryAnalyzer (namespace), mode (full/off), and optional samplesPerSecond parameter.

LANGUAGE: javascript
CODE:
db.adminCommand( 
   {
     configureQueryAnalyzer: <string>,
     mode: <string>,
     samplesPerSecond: <double>
   } 
)

----------------------------------------

TITLE: Defining Index Bounds for cursor.max() in MongoDB
DESCRIPTION: Demonstrates the prototype form for the indexBounds parameter in the cursor.max() method. This structure defines the exclusive upper bound for index keys.

LANGUAGE: javascript
CODE:
{ field1: <max value>, field2: <max value2> ... fieldN:<max valueN> }

----------------------------------------

TITLE: Inserting Sample Artwork Documents in MongoDB
DESCRIPTION: Example of inserting multiple artwork documents with varying field structures into a MongoDB collection.

LANGUAGE: javascript
CODE:
db.artwork.insertMany( [
   {
      "name": "The Scream",
      "artist": "Edvard Munch",
      "style": "modern",
      "themes": [ "humanity", "horror" ]
   },
   {
      "name": "Acrobats",
      "artist": {
         "name": "Raoul Dufy",
         "nationality": "French",
         "yearBorn": 1877
      },
      "originalTitle": "Les acrobates",
      "dimensions": [ 65, 49 ] 
   },
   {
      "name": "The Thinker",
      "type": "sculpture",
      "materials": [ "bronze" ],
      "year": 1904
   }
] )

----------------------------------------

TITLE: Updating Array with Push, Sort, and Slice in MongoDB
DESCRIPTION: Shows how to update an array using $push with $each to add multiple elements, $sort to order by score, and $slice to limit results to top 3 scores.

LANGUAGE: javascript
CODE:
db.students.updateOne(
   { _id: 5 },
   {
     $push: { 
       quizzes: { 
          $each: [ { wk: 5, score: 8 }, { wk: 6, score: 7 }, { wk: 7, score: 6 } ],
          $sort: { score: -1 },
          $slice: 3
       }
     }
   }
)

----------------------------------------

TITLE: Result of $isoWeekYear Aggregation in MongoDB
DESCRIPTION: This snippet shows the expected output of the $isoWeekYear aggregation operation on the 'anniversaries' collection. It displays the '_id' and the calculated 'yearNumber' for each document.

LANGUAGE: javascript
CODE:
{ "_id" : 1, "yearNumber" : 2015 }
{ "_id" : 2, "yearNumber" : 2016 }
{ "_id" : 3, "yearNumber" : 2015 }
{ "_id" : 4, "yearNumber" : 2014 }

----------------------------------------

TITLE: Executing logout Command in MongoDB
DESCRIPTION: This snippet demonstrates the syntax for running the logout command in MongoDB. The command is executed using the db.runCommand() method with the logout parameter set to 1.

LANGUAGE: javascript
CODE:
db.runCommand(
   { 
     logout: 1 
   }
)

----------------------------------------

TITLE: Stopping MongoDB Auto-Merger - Example Usage
DESCRIPTION: Demonstrates a practical example of disabling the auto-merger functionality in a MongoDB sharded cluster. Must be executed from a mongos instance.

LANGUAGE: javascript
CODE:
sh.stopAutoMerger()

----------------------------------------

TITLE: Deserializing Extended JSON to BSON Document
DESCRIPTION: Converts a serialized Extended JSON document back to a BSON document with proper types using EJSON.deserialize().

LANGUAGE: javascript
CODE:
EJSON.deserialize( <serialized object> )

----------------------------------------

TITLE: Enabling Custom Tuned Profile
DESCRIPTION: Activates the newly created virtual-guest-thp profile using the tuned-adm command.

LANGUAGE: sh
CODE:
sudo tuned-adm profile virtual-guest-thp

----------------------------------------

TITLE: MongoDB Connection String Format
DESCRIPTION: Standard MongoDB connection string format using authentication credentials and Unix domain socket path. This format is used across multiple drivers and programming languages.

LANGUAGE: bash
CODE:
mongodb://myDatabaseUser:D1fficultP%40ssw0rd@%2Ftmp%2Fmongodb-27017.sock

----------------------------------------

TITLE: Querying with $center Operator in MongoDB
DESCRIPTION: Basic syntax for using the $center operator with $geoWithin to query for points within a circular area. The query requires specifying the center point coordinates [x, y] and the radius of the circle.

LANGUAGE: javascript
CODE:
{
   <location field>: {
      $geoWithin: { $center: [ [ <x>, <y> ] , <radius> ] }
   }
}

----------------------------------------

TITLE: Syntax for MongoDB abortUnshardCollection Method
DESCRIPTION: Demonstrates the syntax for calling the sh.abortUnshardCollection() method. It requires the namespace of the collection to be specified as a string in the format 'database.collection'.

LANGUAGE: javascript
CODE:
sh.abortUnshardCollection( "<database>.<collection>" )

----------------------------------------

TITLE: MongoDB $rand Equivalent Expression
DESCRIPTION: Demonstrates the equivalent expression using $rand operator instead of $sampleRate.

LANGUAGE: javascript
CODE:
{ $match: { $expr: { $lt: [ { $rand: {} }, 0.33 ] } } }

----------------------------------------

TITLE: MongoDB moveChunk Bounds Array Format
DESCRIPTION: Format specification for the bounds array parameter used to define the chunk's shard key range for migration.

LANGUAGE: javascript
CODE:
[ { hashedField : <minValue> } ,
  { hashedField : <maxValue> } ]

----------------------------------------

TITLE: Basic $isNumber Syntax Example in MongoDB
DESCRIPTION: Demonstrates the basic syntax for using the $isNumber operator in a MongoDB aggregation expression.

LANGUAGE: javascript
CODE:
{ $isNumber: <expression> }

----------------------------------------

TITLE: Example Results of $minN Operation in MongoDB
DESCRIPTION: Shows the complete output of the $minN aggregation operation, displaying the original scores and the computed minimum values for each player.

LANGUAGE: javascript
CODE:
[
  {
    "playerId": 1,
    "score": [ 1, 2, 3 ],
    "minScores": [ 1, 2 ]
  },
  {
    "playerId": 2,
    "score": [ 12, 90, 7, 89, 8 ],
    "minScores": [ 7, 8 ]
  },
  {
    "playerId": 3,
    "score": [ null ],
    "minScores": [ ]
  },
  {
    "playerId": 4,
    "score": [ ],
    "minScores": [ ]
  },
  {
    "playerId": 5,
    "score": [ 1293, "2", 3489, 9 ],
    "minScores": [ 9, 1293 ]
  }]

----------------------------------------

TITLE: User Profile Schema for Frequency Capping
DESCRIPTION: Schema definition for storing user profiles with impression and click tracking, organized by advertiser.

LANGUAGE: javascript
CODE:
{
  _id: 'cookie_value',
  advertisers: {
    mercedes: {
      impressions: [
        { date: ISODateTime(...),
          campaign: 'c201204_sclass_4',
          ad_unit_id: 'banner23a',
          site_id: 'cnn',
          zone_id: 'banner' } },
        ... ],
      clicks: [
        { date: ISODateTime(...),
          campaign: 'c201204_sclass_4',
          ad_unit_id: 'banner23a',
          site_id: 'cnn',
          zone_id: 'banner' } },
      ... ],
    bmw: [ ... ],
    ...
  }
}

----------------------------------------

TITLE: Updating MongoDB TLS Mode to Require TLS
DESCRIPTION: MongoDB command to update the TLS mode to 'requireTLS' using the setParameter command. This configuration rejects any non-TLS/non-SSL connections to the node.

LANGUAGE: bash
CODE:
db.adminCommand( { setParameter: 1, tlsMode: "requireTLS" } )

----------------------------------------

TITLE: Basic $asin Operator Syntax in MongoDB
DESCRIPTION: Shows the basic syntax for using the $asin operator in MongoDB aggregation pipeline. The operator accepts an expression that resolves to a number between -1 and 1.

LANGUAGE: javascript
CODE:
{ $asin: <expression> }

----------------------------------------

TITLE: CollectionOptionsMismatch Format Definition in JSON
DESCRIPTION: Defines the JSON schema for CollectionOptionsMismatch inconsistency documents, showing the required fields and their types.

LANGUAGE: json
CODE:
{
   type: "CollectionOptionsMismatch",
   description: "<string>",
   details: {
      namespace: "<string>",
      options: <array>
   }
}

----------------------------------------

TITLE: Querying Array Element in MongoDB Compass
DESCRIPTION: MongoDB Compass filter to find documents where the quantity of the first element in the 'instock' array is less than or equal to 20.

LANGUAGE: javascript
CODE:
{ 'instock.0.qty': { $lte: 20 } }

----------------------------------------

TITLE: Using Resume Token Decoder via NPM
DESCRIPTION: Shows how to decode resume tokens directly from the command line using the npm package mongodb-resumetoken-decoder. This method requires npm to be installed on the system.

LANGUAGE: javascript
CODE:
npx mongodb-resumetoken-decoder <RESUME TOKEN>

----------------------------------------

TITLE: Inserting a Single Document into MongoDB Collection using JavaScript
DESCRIPTION: This code snippet demonstrates how to insert a single document into the 'sales' collection using the insertOne() method. The document includes fields for _id, item, price, quantity, and date, with the date field using the ISODate() function for timestamp creation.

LANGUAGE: javascript
CODE:
db.sales.insertOne(
   {
     "_id" : 1,
     "item" : "abc",
     "price" : 10,
     "quantity" : 2,
     "date" : ISODate("2014-01-01T08:15:39.736Z")
   }
)

----------------------------------------

TITLE: Removing Fields Starting with Dollar Sign Using $unsetField in MongoDB
DESCRIPTION: Demonstrates how to use $unsetField with $literal to remove fields that start with a dollar sign, such as '$price', from documents in an inventory collection.

LANGUAGE: javascript
CODE:
db.inventory.aggregate( [
   { $replaceWith: {
        $unsetField: { 
           field: { $literal: "$price" },
           input: "$$ROOT"
   } } }
] )

----------------------------------------

TITLE: Sorting with Sparse Index Using Hint
DESCRIPTION: Demonstrates how to explicitly use a sparse index for sorting with hint() to handle incomplete results.

LANGUAGE: javascript
CODE:
db.scores.find().sort( { score: -1 } ).hint( { score: 1 } )

----------------------------------------

TITLE: Creating MongoDB Enterprise Repository Configuration for RHEL 9
DESCRIPTION: This snippet contains the yum repository configuration for MongoDB Enterprise on RHEL 9 systems. It specifies the repository name, base URL, GPG key, and enables the repository.

LANGUAGE: yaml
CODE:
[mongodb-enterprise-{+version+}]
name=MongoDB Enterprise Repository
baseurl=https://repo.mongodb.com/yum/redhat/$releasever/mongodb-enterprise/{+version+}/x86_64/
gpgcheck=1
enabled=1
gpgkey=https://www.mongodb.org/static/pgp/server-{+version+}.asc

----------------------------------------

TITLE: Using $dayOfMonth in MongoDB Aggregation Pipeline
DESCRIPTION: Demonstrates how to use $dayOfMonth along with other date operators in an aggregation pipeline to break down the components of a date field.

LANGUAGE: javascript
CODE:
db.sales.aggregate(
   [
     {
       $project:
         {
           year: { $year: "$date" },
           month: { $month: "$date" },
           day: { $dayOfMonth: "$date" },
           hour: { $hour: "$date" },
           minutes: { $minute: "$date" },
           seconds: { $second: "$date" },
           milliseconds: { $millisecond: "$date" },
           dayOfYear: { $dayOfYear: "$date" },
           dayOfWeek: { $dayOfWeek: "$date" },
           week: { $week: "$date" }
         }
     }
   ]
)

----------------------------------------

TITLE: Inserting Initial Stock Trade Data in MongoDB
DESCRIPTION: Example of inserting individual stock trade documents without using the bucket pattern. Each trade is stored as a separate document with ticker, customerId, type, quantity, and date fields.

LANGUAGE: javascript
CODE:
db.trades.insertMany([
  {
    "ticker" : "MDB", 
    "customerId": 123,
    "type" : "buy", 
    "quantity" : 419, 
    "date" : ISODate("2023-10-26T15:47:03.434Z") 
  },
  { 
    "ticker" : "MDB",
    "customerId": 123, 
    "type" : "sell", 
    "quantity" : 29, 
    "date" : ISODate("2023-10-30T09:32:57.765Z") 
  },
  { 
    "ticker" : "GOOG",
    "customerId": 456, 
    "type" : "buy", 
    "quantity" : 50, 
    "date" : ISODate("2023-10-31T11:16:02.120Z") 
  }
])

----------------------------------------

TITLE: Using $redact for Level-Based Access Control in MongoDB
DESCRIPTION: Demonstrates how to use $redact in an aggregation pipeline to exclude all fields at a specific access level. It includes $match to filter by status and $redact to evaluate the level field.

LANGUAGE: javascript
CODE:
db.accounts.aggregate(
  [
    { $match: { status: "A" } },
    {
      $redact: {
        $cond: {
          if: { $eq: [ "$level", 5 ] },
          then: "$$PRUNE",
          else: "$$DESCEND"
        }
      }
    }
  ]
);

----------------------------------------

TITLE: Setting Index Filter Basic Syntax
DESCRIPTION: Basic syntax structure for the planCacheSetFilter command showing all possible fields including collection, query, sort, projection, collation, indexes and comment.

LANGUAGE: javascript
CODE:
db.runCommand(
   {
      planCacheSetFilter: <collection>,
      query: <query>,
      sort: <sort>,
      projection: <projection>,
      collation: { <collation> },
      indexes: [ <index1>, <index2>, ...],
      comment: <any>
   }
)

----------------------------------------

TITLE: Referencing MongoDB Distinct Command
DESCRIPTION: This snippet demonstrates how to reference the distinct command in MongoDB documentation. It also mentions the concept of views, which are read-only queryable objects in MongoDB.

LANGUAGE: mongodb
CODE:
:dbcommand:`distinct`

LANGUAGE: mongodb
CODE:
:ref:`views <views-landing-page>`

----------------------------------------

TITLE: CorruptedZoneShardKey Format Definition in MongoDB
DESCRIPTION: Defines the JSON structure for reporting corrupted zone shard key inconsistencies. The format includes type identification, description, and detailed information about the affected namespace, collection UUID, zone, and shard key pattern.

LANGUAGE: json
CODE:
{
   type: "CorruptedZoneShardKey",
   description: "<string>",
   details: {
      namespace: "<string>",
      collectionUUID: UUID("<uuid>"),
      zone: <zone>,
      shardKeyPattern: <pattern>
   }
}

----------------------------------------

TITLE: MongoDB Connection String for Multiple Languages
DESCRIPTION: Standard MongoDB connection string format including username, password, multiple hosts, and replica set configuration. This format is used across multiple drivers including Python, Java, Node.js, PHP, Ruby, and others.

LANGUAGE: bash
CODE:
mongodb://myDatabaseUser:D1fficultP%40ssw0rd@db1.example.net,db2.example.com/?replicaSet=test

----------------------------------------

TITLE: Executing lockInfo Command in MongoDB
DESCRIPTION: Basic syntax for running the lockInfo command from the MongoDB shell to retrieve information about current locks.

LANGUAGE: javascript
CODE:
db.adminCommand( 
   { 
     lockInfo: 1 
   } 
)

----------------------------------------

TITLE: Creating Partial Index with Single Field
DESCRIPTION: Creates a partial index on the cuisine field for documents with rating greater than 5.

LANGUAGE: javascript
CODE:
db.restaurants.createIndex(
   { cuisine: 1 },
   { partialFilterExpression: { rating: { $gt: 5 } } }
)

----------------------------------------

TITLE: Calculating Hyperbolic Cosine with Radian Input
DESCRIPTION: Example showing how to insert data and calculate hyperbolic cosine for an angle already stored in radians.

LANGUAGE: javascript
CODE:
db.trigonometry.insertOne(
   {
      "_id" : ObjectId( "5c50782193f833234ba90d15" ),
      "angle" : NumberDecimal( "1.6301023541559787031443874490659" )
   }
)

LANGUAGE: javascript
CODE:
db.trigonometry.aggregate( [
   {
      $addFields : {
         "cosh_output" : { $cosh : "$angle" }
      }
   }
] )

----------------------------------------

TITLE: Inserting Sample Medical Data in MongoDB
DESCRIPTION: Creates a medical collection with sample patient data including patient names, diagnosis codes, and credit card information using insertMany operation.

LANGUAGE: javascript
CODE:
db.medical.insertMany( [
   {
      _id: 0,
      patientName: "Jack Jones",
      diagnosisCode: "CAS 17",
      creditCard: "1234-5678-9012-3456"
   },
   {
      _id: 1,
      patientName: "Mary Smith",
      diagnosisCode: "ACH 01",
      creditCard: "6541-7534-9637-3456"
   }
] )

----------------------------------------

TITLE: Structuring MongoDB 6.0 Changelog in reStructuredText
DESCRIPTION: This snippet demonstrates how to structure a changelog document for MongoDB 6.0 using reStructuredText. It sets up the document title, table of contents, and includes separate changelog files for each minor release.

LANGUAGE: reStructuredText
CODE:
=============
6.0 Changelog
=============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. include:: /includes/changelogs/releases/6.0.20.rst

.. include:: /includes/changelogs/releases/6.0.19.rst   

.. include:: /includes/changelogs/releases/6.0.18.rst

.. include:: /includes/changelogs/releases/6.0.17.rst

.. include:: /includes/changelogs/releases/6.0.16.rst

.. include:: /includes/changelogs/releases/6.0.15.rst

.. include:: /includes/changelogs/releases/6.0.14.rst

.. include:: /includes/changelogs/releases/6.0.13.rst

.. include:: /includes/changelogs/releases/6.0.12.txt 

.. include:: /includes/changelogs/releases/6.0.11.txt 

.. include:: /includes/changelogs/releases/6.0.10.txt 

.. include:: /includes/changelogs/releases/6.0.9.txt

.. include:: /includes/changelogs/releases/6.0.8.txt

.. include:: /includes/changelogs/releases/6.0.7.txt

.. include:: /includes/changelogs/releases/6.0.6.txt

.. include:: /includes/changelogs/releases/6.0.5.txt

.. include:: /includes/changelogs/releases/6.0.4.txt

.. include:: /includes/changelogs/releases/6.0.3.txt

.. include:: /includes/changelogs/releases/6.0.2.txt

.. include:: /includes/changelogs/releases/6.0.1.txt

----------------------------------------

TITLE: Subtracting Milliseconds from Date in MongoDB
DESCRIPTION: Aggregation example showing how to subtract milliseconds from a date field.

LANGUAGE: javascript
CODE:
db.sales.aggregate( [ { $project: { item: 1, dateDifference: { $subtract: [ "$date", 5 * 60 * 1000 ] } } } ] )

----------------------------------------

TITLE: Deleting Multiple Documents in MongoDB using Java Asynchronous Driver
DESCRIPTION: This snippet shows how to delete multiple documents using the MongoDB Java asynchronous driver. The actual code is not provided in the snippet, but it references an external file.

LANGUAGE: java
CODE:
// Code is referenced from an external file:
// /driver-examples/AsyncDocumentationSamples.java

----------------------------------------

TITLE: Executing mergeChunks Command in MongoDB
DESCRIPTION: Example of using the mergeChunks command to combine contiguous chunk ranges on a shard into a single chunk. The command is executed on the admin database from a mongos instance.

LANGUAGE: javascript
CODE:
db.adminCommand( 
   { 
     mergeChunks: <namespace>,
     bounds : [ 
       { <shardKeyField>: <minFieldValue> },
       { <shardKeyField>: <maxFieldValue> } 
     ] 
   } 
)

----------------------------------------

TITLE: Verifying Collection Location using $collStats
DESCRIPTION: Aggregation pipeline to confirm the target shard location of a moved collection by using the $collStats operator.

LANGUAGE: javascript
CODE:
db.inventory.aggregate( [ 
   { $collStats: {} }, 
   { $project: { "shard": 1 } } 
] )

----------------------------------------

TITLE: Enabling or Disabling MongoDB Balancer with sh.setBalancerState()
DESCRIPTION: This method enables or disables the MongoDB balancer. It takes a boolean parameter 'state' where true enables the balancer and false disables it. The method must be run on a mongos instance and will error if run on a mongod instance.

LANGUAGE: javascript
CODE:
sh.setBalancerState(state)

----------------------------------------

TITLE: MongoDB Additional Update Methods
DESCRIPTION: Supplementary methods for updating documents with additional functionality like atomic operations and bulk writes. These methods provide more specialized update operations with different guarantees and capabilities.

LANGUAGE: mongodb
CODE:
db.collection.findOneAndReplace()
db.collection.findOneAndUpdate()
db.collection.findAndModify()
db.collection.bulkWrite()

----------------------------------------

TITLE: Moving a Collection to a Different Shard in MongoDB
DESCRIPTION: This snippet shows how to move a collection from one shard to another using the sh.moveCollection() method in MongoDB.

LANGUAGE: javascript
CODE:
sh.moveCollection( "<database>.<collection>", "<ID of recipient shard>" )

----------------------------------------

TITLE: Viewing TCP Retries Setting in Linux
DESCRIPTION: This snippet demonstrates how to view the current net.ipv4.tcp_retries2 setting using the sysctl command. The command displays the current value of the TCP retransmission attempts.

LANGUAGE: bash
CODE:
sysctl net.ipv4.tcp_retries2

LANGUAGE: bash
CODE:
net.ipv4.tcp_retries = 15

----------------------------------------

TITLE: Creating a Compound Index on Multiple Fields in MongoDB
DESCRIPTION: Creates a compound index on the orderDate field (ascending) and zipcode field (descending).

LANGUAGE: javascript
CODE:
db.collection.createIndex( { orderDate: 1, zipcode: -1 } )

----------------------------------------

TITLE: MongoDB Role Management Method References
DESCRIPTION: A collection of MongoDB shell methods for managing database roles and privileges. These methods allow administrators to create, modify, and control user-defined roles and their associated privileges within a MongoDB database.

LANGUAGE: javascript
CODE:
db.createRole()          // Creates a role and specifies its privileges
db.dropRole()           // Deletes a user-defined role
db.dropAllRoles()       // Deletes all user-defined roles in a database
db.getRole()            // Returns information for the specified role
db.getRoles()           // Returns information for all user-defined roles
db.grantPrivilegesToRole()    // Assigns privileges to a user-defined role
db.revokePrivilegesFromRole() // Removes privileges from a user-defined role
db.grantRolesToRole()         // Specifies roles from which a role inherits privileges
db.revokeRolesFromRole()      // Removes inherited roles from a role
db.updateRole()               // Updates a user-defined role

----------------------------------------

TITLE: Starting MongoDB in Standalone Mode
DESCRIPTION: Command line options for starting MongoDB instance in standalone mode with modified port and parameters.

LANGUAGE: bash
CODE:
mongod --port 27217 --setParameter disableLogicalSessionCacheRefresh=true

----------------------------------------

TITLE: Including Mirrored Reads in MongoDB Server Status
DESCRIPTION: This example shows how to explicitly include mirroredReads information in the db.serverStatus() output, which is not included by default.

LANGUAGE: javascript
CODE:
db.serverStatus( { mirroredReads: 1 } )

----------------------------------------

TITLE: Executing buildInfo Command Syntax in MongoDB
DESCRIPTION: Basic syntax for running the buildInfo command to get build information about the mongod instance.

LANGUAGE: javascript
CODE:
db.runCommand(
   { 
     buildInfo: 1 
   }
)

----------------------------------------

TITLE: MongoDB Slow Oplog Application Log Example
DESCRIPTION: Example log entry showing a slow oplog operation application on a secondary node. The log entry includes the timestamp, component, worker thread, and operation duration.

LANGUAGE: text
CODE:
2018-11-16T12:31:35.886-05:00 I REPL   [repl writer worker 13] applied op: command { ... }, took 112ms

----------------------------------------

TITLE: JSON Output of Bulk.toJSON() in MongoDB
DESCRIPTION: This snippet shows the expected JSON output from calling Bulk.toJSON() after executing bulk operations. It includes counts for inserted, matched, modified, deleted, and upserted documents, as well as inserted and upserted IDs.

LANGUAGE: javascript
CODE:
{
  acknowledged: true,
  insertedCount: 2,
  insertedIds: [
    { index: 0, _id: ObjectId("627bf77e5e19ff3518448887") },
    { index: 1, _id: ObjectId("627bf77e5e19ff3518448888") }
  ],
  matchedCount: 0,
  modifiedCount: 0,
  deletedCount: 0,
  upsertedCount: 0,
  upsertedIds: []
}

----------------------------------------

TITLE: Defining $pow Operator in MongoDB Aggregation
DESCRIPTION: Demonstrates the syntax for using the $pow operator in MongoDB aggregation. It takes two parameters: the number to be raised and the exponent.

LANGUAGE: javascript
CODE:
{ $pow: [ <number>, <exponent> ] }

----------------------------------------

TITLE: Connecting to MongoDB Replica Set using Shell
DESCRIPTION: MongoDB shell connection command with API version specification and username authentication for connecting to a replica set across multiple hosts.

LANGUAGE: bash
CODE:
mongosh "mongodb://db1.example.net,db2.example.com/?replicaSet=test" --apiVersion 1 --username myDatabaseUser

----------------------------------------

TITLE: MongoDB addShardToZone Command Syntax
DESCRIPTION: Basic syntax for the addShardToZone command that takes a shard name and zone name as parameters. Must be run on admin database from mongos.

LANGUAGE: javascript
CODE:
db.adminCommand(
   {
     addShardToZone: <string>,
     zone: <string>
   }
)

----------------------------------------

TITLE: Executing hello Command in MongoDB
DESCRIPTION: Basic syntax for running the hello command in MongoDB. This command returns information about the role and status of the MongoDB instance.

LANGUAGE: javascript
CODE:
db.runCommand( 
   { 
     hello: 1 
   } 
)

----------------------------------------

TITLE: Supported Query Expression Example
DESCRIPTION: Shows a supported query expression comparing an encrypted field to a plaintext value.

LANGUAGE: json
CODE:
{$expr: {$eq: ["$encrypted1", "plaintext_value"]}}

----------------------------------------

TITLE: Associating Shard with Single Zone Example
DESCRIPTION: Example showing how to associate shard0000 with the JFK zone using the addShardToZone command.

LANGUAGE: javascript
CODE:
db.adminCommand( { addShardToZone : "shard0000" , zone : "JFK" } )

----------------------------------------

TITLE: Results of $bitNot Operation in MongoDB Aggregation
DESCRIPTION: Shows the expected results of applying the $bitNot operator to the 'a' field in the 'switches' collection.

LANGUAGE: javascript
CODE:
[
  { _id: 0, result: -1 },
  { _id: 1, result: -3 },
  { _id: 2, result: -4 }
]

----------------------------------------

TITLE: Listing Collections in MongoDB Database
DESCRIPTION: This command lists all collections in a MongoDB database using the listCollections command, excluding views and filtering by type.

LANGUAGE: javascript
CODE:
db.adminCommand(
   { 
      listCollections: 1, 
      nameOnly: true,
      filter: { type: { $ne: "view" } }
   }
)

----------------------------------------

TITLE: Converting to BinData in MongoDB
DESCRIPTION: Shows examples of converting strings to BinData using the $convert operator. Includes various formats and subtypes.

LANGUAGE: javascript
CODE:
{
   input: "hn3uUsMxSE6S0cVkebjmfg==",
   to: {
      type: "binData",
      subtype: 0
   },
   format: "base64"
}

LANGUAGE: javascript
CODE:
{
   input: "867dee52-c331-484e-92d1-c56479b8e67e",
   to: {
      type: "binData",
      subtype: 4
   },
   format: "uuid"
}

----------------------------------------

TITLE: Querying MongoDB for Exact Array Match in JavaScript (Shell)
DESCRIPTION: This snippet shows how to query the 'inventory' collection for documents where the 'tags' field exactly matches the array ["red", "blank"] using the MongoDB shell.

LANGUAGE: javascript
CODE:
db.inventory.find( { tags: ["red", "blank"] } )

----------------------------------------

TITLE: Inserting Binary Data using HexData() in MongoDB
DESCRIPTION: This snippet demonstrates how to use the HexData() method to insert a document with binary data created from a hexadecimal string into a test collection.

LANGUAGE: javascript
CODE:
db.hexCollection.insertOne( {
   _id: 0, hexField: HexData( 0, "123456abcdef" )
} )

----------------------------------------

TITLE: CorruptedZoneShardKey Example Response
DESCRIPTION: Shows a complete example of a corrupted zone shard key inconsistency response, including cursor information and the detailed inconsistency report for a collection with mismatched shard key patterns.

LANGUAGE: json
CODE:
{
   cursor: {
      id: Long("0"),
      ns: "test.$cmd.aggregate",
      firstBatch: [ 
         {
            type: "CorruptedZoneShardKey",
            description: "Found zone with a shard key pattern violation",
            details: { 
               namespace: "test.authors",
               collection: { 
                  collectionUUID : new UUID("1ad56770-61e2-48e9-83c6-8ecefe73cfc4"),
                  zone : { 
                     ns : "test.authors",
                     tag: "64ddd81656be208c6685da21", 
                     min: { 
                        y: 0 
                     }, 
                     max: { 
                        x: MaxKey 
                     } 
                  }, 
                  shardKeyPattern: { 
                     x: 1 
                  }
               }
            }
         }
      ],
   },
   ok: 1
}

----------------------------------------

TITLE: Dropping Connections to Removed Replica Set Member in MongoDB
DESCRIPTION: Demonstrates how to use the dropConnections command to immediately drop connections to a removed replica set member after reconfiguration.

LANGUAGE: javascript
CODE:
db.adminCommand( 
  {
    "dropConnections" : 1,
    "hostAndPort" : [
      "<hostname>:<port>"
    ] 
  } 
)

----------------------------------------

TITLE: Aggregation Results - MongoDB JavaScript
DESCRIPTION: Shows the expected output documents after running the temperature conversion aggregation.

LANGUAGE: javascript
CODE:
{ "_id" : 1, "date" : ISODate("2018-06-01T00:00:00Z"), "temp" : "26.1C", "degrees" : 26.1 }
{ "_id" : 2, "date" : ISODate("2018-06-02T00:00:00Z"), "temp" : "25.1C", "degrees" : 25.1 }
{ "_id" : 3, "date" : ISODate("2018-06-03T00:00:00Z"), "temp" : "25.4C", "degrees" : 25.4 }

----------------------------------------

TITLE: Filtering getLog Output in MongoDB Shell
DESCRIPTION: This snippet shows how to filter the getLog output within the MongoDB shell to display only the log messages, removing character escaping for improved readability.

LANGUAGE: javascript
CODE:
db.adminCommand( { getLog:'global'} ).log.forEach(x => {print(x)})

----------------------------------------

TITLE: Inserting Test Data for $minN Example in MongoDB
DESCRIPTION: Creates a sample 'scores' collection with various test cases including numeric arrays, null values, empty arrays, and mixed type arrays.

LANGUAGE: javascript
CODE:
db.scores.insertMany([
    { "playerId" : 1, "score" : [ 1, 2, 3 ] },
    { "playerId" : 2, "score" : [ 12, 90, 7, 89, 8 ] },
    { "playerId" : 3, "score" : [ null ] },
    { "playerId" : 4, "score" : [ ] },
    { "playerId" : 5, "score" : [ 1293, "2", 3489, 9 ]}
])

----------------------------------------

TITLE: MongoDB Change Stream Event Example
DESCRIPTION: Example of a change event notification document returned by the change stream after detecting an insert operation.

LANGUAGE: json
CODE:
{
   "_id": {
      _data: "8262E2EE54000000022B022C0100296E5A100448E5E3DD01364019AE8FE8C6859527E046645F6964006462E2EE54C8756C0D5CF6F0720004"
   },
   "operationType": "insert",
   "clusterTime": Timestamp({ t: 1659039316, i: 2 }),
   "wallTime": ISODate("2022-07-28T20:15:16.148Z"),
   "fullDocument": { 
      "_id": ObjectId("62e2ee54c8756c0d5cf6f072"), 
      "name": "Walker Percy" 
   },
   "ns": { 
      "db": "test", 
      "coll": "names" 
   },
   "documentKey": { _id: ObjectId("62e2ee54c8756c0d5cf6f072") }
}

----------------------------------------

TITLE: Defining Custom Emit Function for Debugging
DESCRIPTION: Creates a custom emit function that prints the key and value pairs for debugging purposes during map function execution.

LANGUAGE: javascript
CODE:
var emit = function(key, value) {
    print("emit");
    print("key: " + key + "  value: " + tojson(value));
}

----------------------------------------

TITLE: Creating a Compound Index on Multiple Fields in MongoDB
DESCRIPTION: Creates a compound index on the orderDate field (ascending) and zipcode field (descending).

LANGUAGE: javascript
CODE:
db.collection.createIndex( { orderDate: 1, zipcode: -1 } )

----------------------------------------

TITLE: Checking TLS/SSL Library Versions on Linux
DESCRIPTION: Commands to check TLS/SSL library versions and symbols used by MongoDB on Linux systems.

LANGUAGE: bash
CODE:
objdump -T <path to mongod>/mongod | grep " SSL_"
objdump -T <path to mongod>/mongod | grep " CRYPTO_"

LANGUAGE: bash
CODE:
objdump -T <path to TLS/SSL libs>/libssl.so.1*
objdump -T <path to TLS/SSL libs>/libcrypto.so.1*

----------------------------------------

TITLE: Updating MongoDB Replica Set Member Priority in JavaScript
DESCRIPTION: This snippet demonstrates how to modify the priority of a specific member in a MongoDB replica set. It involves copying the configuration, modifying the priority, and applying the changes using rs.reconfig(). Note that this operation may cause a primary step down and temporary client disconnections.

LANGUAGE: javascript
CODE:
cfg = rs.conf()
cfg.members[2].priority = 0.5
rs.reconfig(cfg)

----------------------------------------

TITLE: Inserting Sample Flower Data in MongoDB
DESCRIPTION: Example showing how to insert multiple documents into a flowers collection to demonstrate $setIsSubset usage.

LANGUAGE: javascript
CODE:
db.flowers.insertMany( [
   { "_id" : 1, "flowerFieldA" : [ "rose", "orchid" ], "flowerFieldB" : [ "rose", "orchid" ] },
   { "_id" : 2, "flowerFieldA" : [ "rose", "orchid" ], "flowerFieldB" : [ "orchid", "rose", "orchid" ] },
   { "_id" : 3, "flowerFieldA" : [ "rose", "orchid" ], "flowerFieldB" : [ "rose", "orchid", "jasmine" ] },
   { "_id" : 4, "flowerFieldA" : [ "rose", "orchid" ], "flowerFieldB" : [ "jasmine", "rose" ] },
   { "_id" : 5, "flowerFieldA" : [ "rose", "orchid" ], "flowerFieldB" : [ ] },
   { "_id" : 6, "flowerFieldA" : [ "rose", "orchid" ], "flowerFieldB" : [ [ "rose" ], [ "orchid" ] ] },
   { "_id" : 7, "flowerFieldA" : [ "rose", "orchid" ], "flowerFieldB" : [ [ "rose", "orchid" ] ] },
   { "_id" : 8, "flowerFieldA" : [ ], "flowerFieldB" : [ ] },
   { "_id" : 9, "flowerFieldA" : [ ], "flowerFieldB" : [ "rose" ] }
] )

----------------------------------------

TITLE: Creating Hashed Index on _id Field Example
DESCRIPTION: Example of creating a hashed index on the _id field in an orders collection, followed by sharding the collection.

LANGUAGE: javascript
CODE:
db.orders.createIndex( { _id: "hashed" } )

LANGUAGE: javascript
CODE:
sh.shardCollection(
   "<database>.orders",
   { _id: "hashed" }
)

----------------------------------------

TITLE: Inline Output Specification
DESCRIPTION: Configuration for returning MapReduce results inline instead of writing to a collection.

LANGUAGE: javascript
CODE:
out: { inline: 1 }

----------------------------------------

TITLE: Creating User with db.adminCommand() in MongoDB
DESCRIPTION: This snippet demonstrates using db.adminCommand() to create a new user named 'bruce' with the dbOwner role on the admin database. It uses the passwordPrompt() function for secure password input.

LANGUAGE: javascript
CODE:
db.adminCommand(
  {
    createUser: "bruce",
    pwd: passwordPrompt(),  // or <cleartext password>
    roles: [
      { role: "dbOwner", db: "admin" }
    ]
  }
)

----------------------------------------

TITLE: Retrieving Shard Version in MongoDB Shell
DESCRIPTION: Method to get shard version information from a MongoDB collection. This is a diagnostic tool for examining data state in sharded clusters. For internal use only.

LANGUAGE: javascript
CODE:
db.collection.getShardVersion()

----------------------------------------

TITLE: Querying MongoDB Collection with Comment
DESCRIPTION: Shows how to use the cursor.comment() method in a practical example. This snippet queries the 'restaurants' collection for documents where the 'borough' field is 'Manhattan' and attaches a comment to the query.

LANGUAGE: javascript
CODE:
db.restaurants.find(
   { "borough" : "Manhattan" }
).comment( "Find all Manhattan restaurants" )

----------------------------------------

TITLE: Disabling JavaScript via Configuration in MongoDB
DESCRIPTION: Configuration setting to disable server-side JavaScript execution in MongoDB by modifying the security settings in the configuration file.

LANGUAGE: shell
CODE:
security.javascriptEnabled: false

----------------------------------------

TITLE: Query Analyzer Output for MongoDB Sharded Cluster (mongos)
DESCRIPTION: Displays the query analyzer output format when run on a mongos router in a sharded cluster. Includes basic sampling metrics without byte counts.

LANGUAGE: javascript
CODE:
{
   "desc" : "query analyzer",
   "ns" : "testDb.testColl",
   "collUuid" : UUID("5130b4df-5966-434f-85f0-f8956b5ca74e"),
   "samplesPerSecond" : 5,
   "startTime" : ISODate("2023-08-08T16:15:07.427Z"),
   "sampledReadsCount" : NumberLong(2),
   "sampledWritesCount" : NumberLong(3)
}

----------------------------------------

TITLE: Syntax for $mod Operator in MongoDB Aggregation
DESCRIPTION: Demonstrates the basic syntax for using the $mod operator in MongoDB aggregation pipelines. The operator takes two expressions as arguments, where the first is the dividend and the second is the divisor.

LANGUAGE: javascript
CODE:
{ $mod: [ <expression1>, <expression2> ] }

----------------------------------------

TITLE: Connecting to MongoDB with AWS Authentication using mongosh
DESCRIPTION: This code snippet shows how to connect to a MongoDB Atlas cluster using the mongosh shell with AWS authentication. It includes the full connection string with the mongodb+srv protocol, cluster address, database name, and authentication parameters.

LANGUAGE: bash
CODE:
mongosh 'mongodb+srv://cluster0.example.com/testdb?authSource=$external&authMechanism=MONGODB-AWS'

----------------------------------------

TITLE: Verifying THP Settings
DESCRIPTION: Commands to verify the applied THP configuration settings on standard Linux and Red Hat systems.

LANGUAGE: sh
CODE:
cat /sys/kernel/mm/transparent_hugepage/enabled && cat /sys/kernel/mm/transparent_hugepage/defrag && cat /sys/kernel/mm/transparent_hugepage/khugepaged/max_ptes_none && cat /proc/sys/vm/overcommit_memory

LANGUAGE: sh
CODE:
cat /sys/kernel/mm/redhat_transparent_hugepage/enabled && cat /sys/kernel/mm/redhat_transparent_hugepage/defrag && cat /sys/kernel/mm/redhat_transparent_hugepage/khugepaged/max_ptes_none && cat /proc/sys/vm/overcommit_memory

----------------------------------------

TITLE: Complete Encryption Schema Example for Hospital Data
DESCRIPTION: Provides a comprehensive example of an encryption schema for hospital patient data, including various field types and query configurations.

LANGUAGE: javascript
CODE:
const encryptedFieldsObject = {
   fields: [
      {
         path: "patientId",
         bsonType: "int",
         queries: { queryType: "equality" }
      },
      {
         path: "patientInfo.ssn",
         bsonType: "string",
         queries: { queryType: "equality" }
      },
      {
         path: "medications",
         bsonType: "array"
      },
      {
         path: "patientInfo.billing",
         bsonType: "object"
      },
   ]
}

----------------------------------------

TITLE: MongoDB Driver Changes - Configuration Example
DESCRIPTION: Example showing the getLastError operation without arguments, which is equivalent to w: 1 option. This was used for write concern acknowledgment but has been removed in MongoDB 5.1.

LANGUAGE: plaintext
CODE:
getLastError

----------------------------------------

TITLE: Importing MongoDB Public GPG Key on Linux
DESCRIPTION: Downloads the MongoDB public GPG key and imports it into the system's keyring. This step is crucial for verifying the authenticity of MongoDB packages during installation.

LANGUAGE: bash
CODE:
curl -fsSL https://www.mongodb.org/static/pgp/server-{+version+}.asc | \
   sudo gpg -o /usr/share/keyrings/mongodb-server-{+version+}.gpg \
   --dearmor

----------------------------------------

TITLE: Example of MissingRoutingTable Inconsistency in MongoDB Query Result
DESCRIPTION: This example demonstrates a MongoDB query result containing a MissingRoutingTable inconsistency. It shows the cursor structure with the inconsistency details embedded in the firstBatch array.

LANGUAGE: json
CODE:
{
   "cursor": {
      "id": Long("0"),
      "ns": "test.$cmd.aggregate",
      "firstBatch": [
         {
            "type": "MissingRoutingTable",
            "description": "There is a sharded collection without routing table",
            "details": {
               "namespace": "test.authors",
               "collectionUUID": new UUID("1ad56770-61e2-48e9-83c6-8ecefe73cfc4")
            }
         }
      ],
   },
   "ok": 1
}

----------------------------------------

TITLE: Connecting to Atlas Cluster with AWS Session Token
DESCRIPTION: Shows how to connect to a MongoDB Atlas cluster using AWS IAM credentials including a session token. This example adds the AWS_SESSION_TOKEN to the authMechanismProperties.

LANGUAGE: shell
CODE:
mongodb+srv://<aws_access_key_id>:<aws_secret_access_key>@cluster0.example.com/test?authSource=$external&authMechanism=MONGODB-AWS&authMechanismProperties=AWS_SESSION_TOKEN:<aws_session_token>

----------------------------------------

TITLE: Querying MongoDB with $bitsAnyClear using Bit Position Array
DESCRIPTION: This snippet demonstrates how to use the $bitsAnyClear operator to test whether field 'a' has either bit position 1 or 5 clear, where the least significant bit is position 0.

LANGUAGE: javascript
CODE:
db.collection.find( { a: { $bitsAnyClear: [ 1, 5 ] } } )

----------------------------------------

TITLE: MongoDB $cmp Aggregation Example
DESCRIPTION: Example aggregation pipeline that uses $cmp to compare inventory quantities with the value 250. Projects the item, quantity, and comparison result.

LANGUAGE: javascript
CODE:
db.inventory.aggregate(
      [
        {
          $project:
             {
               item: 1,
               qty: 1,
               cmpTo250: { $cmp: [ "$qty", 250 ] },
               _id: 0
             }
        }
      ]
   )

----------------------------------------

TITLE: Starting mongosh Client in MongoDB
DESCRIPTION: This snippet demonstrates how to start the mongosh client without connecting to a database.

LANGUAGE: bash
CODE:
mongosh --nodb

----------------------------------------

TITLE: Defining $strcasecmp Operator in MongoDB Aggregation
DESCRIPTION: Shows the syntax for using the $strcasecmp operator in MongoDB aggregation. It compares two string expressions case-insensitively.

LANGUAGE: javascript
CODE:
{ $strcasecmp: [ <expression1>, <expression2> ] }

----------------------------------------

TITLE: Creating Sample Image Collection with Binary Data
DESCRIPTION: Creates a sample collection containing image documents with binary data for testing $binarySize operator.

LANGUAGE: javascript
CODE:
db.images.insertMany([
  { _id: 1, name: "cat.jpg", binary: new BinData(0, "OEJTfmD8twzaj/LPKLIVkA==")},
  { _id: 2, name: "big_ben.jpg", binary: new BinData(0, "aGVsZmRqYWZqYmxhaGJsYXJnYWZkYXJlcTU1NDE1Z2FmZCBmZGFmZGE=")},
  { _id: 3, name: "tea_set.jpg", binary: new BinData(0, "MyIRAFVEd2aImaq7zN3u/w==")},
  { _id: 4, name: "concert.jpg", binary: new BinData(0, "TWFuIGlzIGRpc3Rpbmd1aXNoZWQsIG5vdCBvbmx5IGJ5IGhpcyByZWFzb24sIGJ1dCBieSB0aGlzIHNpbmd1bGFyIHBhc3Npb24gZnJvbSBvdGhlciBhbmltYWxzLCB3aGljaCBpcyBhIGx1c3Qgb2YgdGhlIG1pbmQsIHRoYXQgYnkgYSBwZXJzZXZlcmFuY2Ugb2YgZGVsaWdodCBpbiB0aGUgY29udGludWVkIGFuZCBpbmRlZmF0aWdhYmxlIGdlbmVyYXRpb24gb2Yga25vd2xlZGdlLCBleGNlZWRzIHRoZSBzaG9ydCB2ZWhlbWVuY2Ugb2YgYW55IGNhcm5hbCBwbGVhc3VyZS4=")},
  { _id: 5, name: "empty.jpg", binary: new BinData(0, "") }
])

----------------------------------------

TITLE: Shutting Down MongoDB Instance
DESCRIPTION: Command to safely shut down a running MongoDB instance before performing the version upgrade.

LANGUAGE: javascript
CODE:
db.adminCommand( { shutdown: 1 } )

----------------------------------------

TITLE: Binding MongoDB to Both IPv4 and IPv6 Addresses
DESCRIPTION: Configuration snippet showing how to bind MongoDB to both IPv4 and IPv6 addresses using combined bind_ip setting.

LANGUAGE: shell
CODE:
::,0.0.0.0

----------------------------------------

TITLE: Retrieving a Document from MongoDB Time Series Collection
DESCRIPTION: This command uses the findOne() method to retrieve and display a single document from the newly created 'weathernew' time series collection.

LANGUAGE: javascript
CODE:
db.weathernew.findOne()

----------------------------------------

TITLE: Running Sample Queries on MongoDB Collection
DESCRIPTION: Executes several sample queries on the 'orders' collection to populate the plan cache for the $planCacheStats examples.

LANGUAGE: javascript
CODE:
db.orders.find( { item: "abc", price: { $gte: NumberDecimal("10") } } )
db.orders.find( { item: "abc", price: { $gte: NumberDecimal("5") } } )
db.orders.find( { quantity: { $gte: 20 } } )
db.orders.find( { quantity: { $gte: 5 }, type: "apparel" } )

----------------------------------------

TITLE: Sample Documents in inventory Collection
DESCRIPTION: Example documents showing different array formats that can be converted using $arrayToObject.

LANGUAGE: javascript
CODE:
{ "_id" : 1, "item" : "ABC1",  dimensions: [ { "k": "l", "v": 25} , { "k": "w", "v": 10 }, { "k": "uom", "v": "cm" } ] }
{ "_id" : 2, "item" : "ABC2",  dimensions: [ [ "l", 50 ], [ "w",  25 ], [ "uom", "cm" ] ] }
{ "_id" : 3, "item" : "ABC3",  dimensions: [ [ "l", 25 ], [ "l",  "cm" ], [ "l", 50 ] ] }

----------------------------------------

TITLE: Querying with $minDistance in MongoDB $nearSphere Geospatial Query
DESCRIPTION: Example of using $minDistance with a $nearSphere query in MongoDB. This snippet shows how to filter results to include only documents that are at least 1000 meters away from a specified point using a spherical geometry calculation.

LANGUAGE: javascript
CODE:
db.places.find(
   {
     location: {
       $nearSphere: {
         $geometry: { type: "Point", coordinates: [ -73.9667, 40.78 ] },
         $minDistance: 1000,
         $maxDistance: 5000
       }
     }
   }
)

----------------------------------------

TITLE: Defining $mul Update Operator in MongoDB
DESCRIPTION: Demonstrates the syntax for using the $mul operator to multiply the value of a field by a number.

LANGUAGE: javascript
CODE:
{ $mul: { <field1>: <number1>, ... } }

----------------------------------------

TITLE: Querying MongoDB Collection Using Multikey Index
DESCRIPTION: This query demonstrates how to use the multikey index to find documents where at least one element in the 'stock' array has a 'quantity' less than 5.

LANGUAGE: javascript
CODE:
db.inventory.find(
   {
      "stock.quantity": { $lt: 5 }
   }
)

----------------------------------------

TITLE: Retrieving Multiple Cluster Parameters - MongoDB JavaScript
DESCRIPTION: Example demonstrating how to retrieve multiple cluster parameters ('hostName' and 'testParameter') simultaneously.

LANGUAGE: javascript
CODE:
use admin
db.adminCommand( { getClusterParameter: [ "hostName", "testParameter" ] } )

----------------------------------------

TITLE: Creating a Zone Range with Compound Shard Key in MongoDB
DESCRIPTION: This example demonstrates creating a zone range for a sharded collection with a compound shard key { a : 1, b : 1 }, associating the range [{a: 1, b: 1}, {a: 10, b: 10}) with the 'alpha' zone.

LANGUAGE: javascript
CODE:
admin = db.getSiblingDB("admin")
admin.runCommand( 
   {
      updateZoneKeyRange : "exampledb.collection",
      min : { a : 1, b : 1 },
      max : { a : 10, b : 10 },
      zone : "alpha"
      
   }
)

----------------------------------------

TITLE: Deprecated MongoDB Error Handling Methods
DESCRIPTION: List of deprecated MongoDB methods for handling write operation errors that should be replaced with the CRUD API and write concerns.

LANGUAGE: javascript
CODE:
getLastError
db.getLastError()
db.getLastErrorObj()

----------------------------------------

TITLE: MongoDB logRotate Command Syntax
DESCRIPTION: Basic syntax for the logRotate command which must be executed against the admin database. Supports rotating server logs, audit logs, or both with an optional comment field.

LANGUAGE: javascript
CODE:
db.adminCommand(
   {
     logRotate: <integer or string>,
     comment: <string>
   }
)

----------------------------------------

TITLE: Multiple Namespaces bulkWrite Example in MongoDB
DESCRIPTION: Example of using the bulkWrite command to perform insert, update, and delete operations across multiple collections (pizzas and pizzaOrders).

LANGUAGE: javascript
CODE:
db.adminCommand( {
   bulkWrite: 1,

   // The ops array contains the insert, update, and delete
   // operations.
   ops: [

      // Specify the namespace ID indexes immediately after
      // the insert, update, and delete. For example, "insert: 0"
      // specifies the 0 namespace ID index, which is the "test.pizzas"
      // namespace. And, "insert: 1" specifies "test.pizzaOrders".

      // Insert pizzas.
      // Namespace ID is 0 for "test.pizzas", which
      // is specified as "insert: 0".
      { insert: 0, document: { _id: 5, type: "sausage",
        size: "small", price: 12 } },
      { insert: 0, document: { _id: 6, type: "vegan cheese",
        size: "large", price: 25 } },

      // Update the price for cheese pizzas.
      { update: 0, filter: { type: "cheese" },
        updateMods: { $set: { price: 15 } } },

      // Delete pizzas with a price less than 7.
      { delete: 0, filter: { price: { $lt: 7 } } },

      // Insert pizza orders.
      // Namespace ID is 1 for "test.pizzaOrders".
      { insert: 1, document: { _id: 3, type: "sausage", number: 7,
        orderDate: new Date( "2023-04-15T12:02:15Z" ) } },
      { insert: 1, document: { _id: 4, type: "vegan", number: 16,
        orderDate: new Date( "2023-05-12T11:03:11Z" ) } },

      // Update the number of pizza orders for cheese pizzas.
      { update: 1, filter: { type: "cheese" },
        updateMods: { $set: { number: 50 } } },

      // Delete the pizza order with an _id of 2.
      { delete: 1, filter: { _id: 2 } },

      // Delete pizza orders placed before March 15, 2023.
      { delete: 1, filter: { orderDate:
        { $lte: ISODate( "2023-03-15T00:00:00Z" ) } } }
   ],

   // Namespaces
   nsInfo: [
      { ns: "test.pizzas" }, // Namespace ID index is 0.
      { ns: "test.pizzaOrders" }  // Namespace ID index is 1.
   ]
} )

----------------------------------------

TITLE: Embedded Document Access Using Dot Notation in JavaScript
DESCRIPTION: Example showing nested document structure for dot notation access in MongoDB.

LANGUAGE: javascript
CODE:
{
   ...
   name: { first: "Alan", last: "Turing" },
   contact: { phone: { type: "cell", number: "111-222-3333" } },
   ...
}

----------------------------------------

TITLE: Splitting Chunks Using sh.splitFind() in MongoDB
DESCRIPTION: This snippet demonstrates how to use the sh.splitFind() method to split a chunk in a MongoDB sharded cluster. It splits the chunk containing the first document that matches the query into two equally sized chunks.

LANGUAGE: javascript
CODE:
sh.splitFind( "records.people", { "zipcode": "63109" } )

----------------------------------------

TITLE: MongoDB $sin Example with Radian Input
DESCRIPTION: Example demonstrating the use of $sin operator directly with radian input to calculate the sine value in a right-angle triangle calculation.

LANGUAGE: bash
CODE:
{
  "_id" : ObjectId("5c50782193f833234ba90d85"),
  "angle_a" : NumberDecimal("0.9272952180016122324285124629224288"),
  "hypotenuse" : NumberDecimal("5")
}

LANGUAGE: bash
CODE:
db.trigonometry.aggregate([
  {
    $addFields : {
      "side_b" : {
        $multiply : [
          { $sin : "$angle_a" },
          "$hypotenuse"
        ]
      }
    }
  }
])

----------------------------------------

TITLE: Data Encryption Key Response Format - MongoDB JSON
DESCRIPTION: Example of the JSON response structure returned when retrieving a data encryption key, showing all fields including key material, creation date, status, and master key information.

LANGUAGE: json
CODE:
{
  "_id" : UUID("b4b41b33-5c97-412e-a02b-743498346079"),
  "keyMaterial" : BinData(0,"E+0jZKzA4YuE1lGmSVIy2mivqH4JxFo0yFATdxYX/s0YtMFsgVXyu7Bbn4IQ2gn7F/9JAPJFOxdQc5lN3AR+oX33ewVZsd63f3DN1zzcukqdR2Y+EeO7ekRxyRjdzMaNNrBNIv9Gn5LEJgWPSYkG8VczF7cNZnc1YmnR0tuDPNYfm0J7dCZuZUNWW3FCGRcdFx6AlXiCtXKNR97hJ216pQ=="),
  "creationDate" : ISODate("2021-03-16T18:22:43.733Z"),
  "updateDate" : ISODate("2021-03-16T18:22:43.733Z"),
  "status" : 0, "version" : NumberLong(0),
  "masterKey" : {
    "provider" : "local"
  },
  "keyAltNames" : [
     "alpha"
  ]
}

----------------------------------------

TITLE: Executing hello Command with Additional Parameters
DESCRIPTION: Extended syntax for the hello command, including optional fields for SASL mechanism support and command logging. The saslSupportedMechs field returns supported SASL mechanisms, while the comment field adds a log comment.

LANGUAGE: javascript
CODE:
db.runCommand( 
   { 
     hello: 1, 
     saslSupportedMechs: "<db.username>", 
     comment: <any> 
   } 
)

----------------------------------------

TITLE: Creating Sample Documents in MongoDB Inventory Collection
DESCRIPTION: Provides example documents for an inventory collection in MongoDB. These documents are used to demonstrate the $rtrim operator in subsequent examples.

LANGUAGE: javascript
CODE:
{ "_id" : 1, "item" : "ABC1", quarter: "13Q1", "description" : " product 1" }
{ "_id" : 2, "item" : "ABC2", quarter: "13Q4", "description" : "product 2 \n The product is in stock.  \n\n  " }
{ "_id" : 3, "item" : "XYZ1", quarter: "14Q2", "description" : null }

----------------------------------------

TITLE: Viewing Golang Driver Code Examples
DESCRIPTION: This snippet indicates that the user is viewing Golang driver code examples and instructs how to switch to a different driver. It also includes an important note about using the 'cse' build constraint.

LANGUAGE: go
CODE:
// You are viewing the Golang driver code examples.
// Use the dropdown menu to select a different driver.

LANGUAGE: bash
CODE:
go run -tags cse insert-encrypted-document.go

----------------------------------------

TITLE: Delete Operation Using Let Variable in MongoDB
DESCRIPTION: Example showing how to define a targetFlavor variable using let and use it to delete a specific flavor (strawberry cake) from the collection.

LANGUAGE: mongodb
CODE:
db.flavors.deleteOne({
  $let: {
    vars: {
      targetFlavor: "strawberry cake"
    },
    in: {
      flavor: "$$targetFlavor"
    }
  }
})

----------------------------------------

TITLE: Example Document for MongoDB $asinh Aggregation
DESCRIPTION: Shows a sample document in the 'trigonometry' collection used for demonstrating the $asinh operator. The document contains an x-coordinate value stored as a NumberDecimal.

LANGUAGE: bash
CODE:
{
  "_id" : ObjectId("5c50782193f833234ba90d85"),
  "x-coordinate" : NumberDecimal("1")
}

----------------------------------------

TITLE: MongoDB Balancer Status Response Example
DESCRIPTION: Example output document returned by the sh.isBalancerRunning() method showing the balancer's status including mode, active state, number of rounds, and cluster time information.

LANGUAGE: json
CODE:
{
  mode: 'full',
  inBalancerRound: false,
  numBalancerRounds: Long("1143"),
  ok: 1,
  '$clusterTime': {
    clusterTime: Timestamp({ t: 1639753724, i: 3 }),
    signature: {
      hash: Binary(Buffer.from("0000000000000000000000000000000000000000", "hex"), 0),
      keyId: Long("0")
    }
  },
  operationTime: Timestamp({ t: 1639753724, i: 3 })
}

----------------------------------------

TITLE: Defining $pullAll Operator Syntax in MongoDB
DESCRIPTION: Shows the basic syntax structure for the $pullAll operator which specifies the field and array of values to remove.

LANGUAGE: javascript
CODE:
{ $pullAll: { <field1>: [ <value1>, <value2> ... ], ... } }

----------------------------------------

TITLE: Configuring MongoDB with SSL for X.509 Membership Authentication (Command-Line)
DESCRIPTION: Command-line options to configure a MongoDB instance to use X.509 certificates for cluster membership authentication with SSL (deprecated). Includes settings for SSL mode, cluster authentication mode, certificate files, and binding IP addresses.

LANGUAGE: bash
CODE:
mongod --replSet <name> --sslMode requireSSL --clusterAuthMode x509 --sslClusterFile <path to membership certificate and key PEM file> --sslPEMKeyFile <path to TLS/SSL certificate and key PEM file> --sslCAFile <path to root CA PEM file> --bind_ip localhost,<hostname(s)|ip address(es)>

----------------------------------------

TITLE: Using $slice with $push in MongoDB Update Operation
DESCRIPTION: Demonstrates the syntax for using the $slice modifier with $push to limit array elements during an update operation. The $slice modifier must be used with the $each modifier.

LANGUAGE: javascript
CODE:
{
  $push: {
     <field>: {
       $each: [ <value1>, <value2>, ... ],
       $slice: <num>
     }
  }
}

----------------------------------------

TITLE: Sample Output of Sharding Version Information
DESCRIPTION: Shows the structure of the sharding version information returned by sh.status(). This includes the version ID, minimum compatible version, current version, and cluster ID.

LANGUAGE: javascript
CODE:
--- Sharding Status ---
  sharding version: {
   "_id" : <num>,
   "minCompatibleVersion" : <num>,
   "currentVersion" : <num>,
   "clusterId" : <ObjectId>
}

----------------------------------------

TITLE: Starting MongoDB with New Encryption Key
DESCRIPTION: Command to start a new mongod instance configured to use a new encryption key. It includes options for replica set name, encryption enablement, and KMIP server configuration.

LANGUAGE: bash
CODE:
mongod --replSet myReplSet --enableEncryption \
--kmipServerName <KMIP Server HostName> \
--kmipServerCAFile ca.pem --kmipClientCertificateFile client.pem

----------------------------------------

TITLE: Calculate Hyperbolic Sine of Angle in Radians
DESCRIPTION: Aggregation pipeline that calculates the hyperbolic sine of an angle already in radians.

LANGUAGE: javascript
CODE:
db.trigonometry.aggregate( [
   {
      $addFields : {
         "sinh_output" : { $sinh : "$angle" }
      }
   }
] )

----------------------------------------

TITLE: Creating a Wildcard Text Index on the 'blog' Collection
DESCRIPTION: This snippet shows the creation of a wildcard text index specifically on the 'blog' collection in MongoDB. This index enables text search queries on all fields in the blog documents.

LANGUAGE: javascript
CODE:
db.blog.createIndex( { "$**": "text" } )

----------------------------------------

TITLE: Using $min in $project Stage for MongoDB Aggregation
DESCRIPTION: This example shows how to use the $min operator in the $project stage of a MongoDB aggregation pipeline to calculate minimum values for quiz scores, lab scores, and exam scores in a students collection.

LANGUAGE: javascript
CODE:
db.students.aggregate([
   { $project: { quizMin: { $min: "$quizzes"}, labMin: { $min: "$labs" }, examMin: { $min: [ "$final", "$midterm" ] } } }
])

----------------------------------------

TITLE: Using $strLenCP in MongoDB Aggregation Pipeline
DESCRIPTION: This example demonstrates how to use the $strLenCP operator in a MongoDB aggregation pipeline. It calculates the length of each 'name' value in the 'food' collection.

LANGUAGE: javascript
CODE:
db.food.aggregate( [
   {
      $project: {
         name: 1,
         length: { $strLenCP: "$name" }
      }
   }
] )

----------------------------------------

TITLE: Setting Script Permissions
DESCRIPTION: Command to make the THP disable script executable.

LANGUAGE: sh
CODE:
sudo chmod 755 /etc/init.d/disable-transparent-hugepages

----------------------------------------

TITLE: Performing MapReduce in MongoDB
DESCRIPTION: The mapReduce command performs map-reduce aggregation for large data sets. It's used for complex data processing tasks that require custom JavaScript functions.

LANGUAGE: mongodb
CODE:
db.runCommand({
  mapReduce: "collection",
  map: function() { emit(this.key, this.value); },
  reduce: function(key, values) { return Array.sum(values); },
  out: "output_collection"
})

----------------------------------------

TITLE: MongoDB currentOp Output Structure for Sharded Cluster (mongos)
DESCRIPTION: Shows the complete JSON structure returned by the currentOp command when executed on a mongos instance in a sharded cluster. Includes additional fields for sharding-specific information and cluster coordination.

LANGUAGE: javascript
CODE:
{
  "inprog": [
       {
         "shard": <string>,
         "type" : <string>,
         "host" : <string>,
         "desc" : <string>,
         "connectionId" : <number>,
         "client_s" : <string>,
         "appName" : <string>,
         "clientMetadata" : <document>,
         "lsid" : {
            "id" : <UUID>,
            "uid" : <BinData>
         },
         "transaction" : {
            "parameters" : {
               "txnNumber" : <NumberLong()>,
               "autocommit" : <boolean>,
               "readConcern" : {
                  "level" : <string>
               }
            },
            "readTimestamp" : <Timestamp>,
            "startWallClockTime" : <string>,
            "timeOpenMicros" : <NumberLong()>,
            "timeActiveMicros" : <NumberLong()>,
            "timeInactiveMicros" : <NumberLong()>,
            "expiryTime" : <string>,
         },
         "active" : <boolean>,
         "currentOpTime" : <string>,
         "effectiveUsers" : [
            {
               "user" : <string>,
               "db" : <string>
            }
         ],
         "runBy" : [
            {
               "user" : <string>,
               "db" : <string>
            }
         ],
         "twoPhaseCommitCoordinator" : {
            "lsid" : {
               "id" : <UUID>,
               "uid" : <BinData>
            },
            "txnNumber" : <NumberLong>,
            "numParticipants" : <NumberLong>,
            "state" : <string>,
            "commitStartTime" : <ISODate>,
            "hasRecoveredFromFailover" : <boolean>,
            "stepDurations" : <document>,
            "decision" : <document>,
            "deadline" : <ISODate>
         }
         "opid" : <string>,
         "secs_running" : <NumberLong()>,
         "microsecs_running" : <number>,
         "op" : <string>,
         "ns" : <string>,
         "command" : <document>,
         "configTime" : <Timestamp>,
         "topologyTime" : <Timestamp>,
         "queryFramework" : <string>,
         "planSummary": <string>,
         "prepareReadConflicts" : <NumberLong()>,
         "writeConflicts" : <NumberLong()>,
         "cursor" : {
            "cursorId" : <NumberLong()>,
            "createdDate" : <ISODate()>,
            "lastAccessDate" : <ISODate()>,
            "nDocsReturned" : <NumberLong()>,
            "nBatchesReturned" : <NumberLong()>,
            "noCursorTimeout" : <boolean>,
            "tailable" : <boolean>,
            "awaitData" : <boolean>,
            "originatingCommand" : <document>,
            "planSummary" : <string>,
            "operationUsingCursorId" : <NumberLong()>
         },
         "msg": <string>,
         "progress" : {
             "done" : <number>,
             "total" : <number>
         },
         "killPending" : <boolean>,
         "numYields" : <number>,
         "dataThroughputLastSecond" : <number>, 
         "dataThroughputAverage" : <number>, 
         "locks" : {
             "ParallelBatchWriterMode" : <string>,
             "ReplicationStateTransition" : <string>,
             "Global" : <string>,
             "Database" : <string>,
             "Collection" : <string>,
             "Metadata" : <string>,
             "DDLDatabase" : <string>,
             "DDLCollection" : <string>, 
             "oplog" : <string>
         },
         "waitingForLock" : <boolean>,
         "lockStats" : {
             "ParallelBatchWriterMode": {
                "acquireCount": {
                   "r": <NumberLong>,
                   "w": <NumberLong>,
                   "R": <NumberLong>,
                   "W": <NumberLong>
                },
                "acquireWaitCount": {
                   "r": <NumberLong>,
                   "w": <NumberLong>,
                   "R": <NumberLong>,
                   "W": <NumberLong>
                },
                "timeAcquiringMicros" : {
                   "r" : NumberLong(0),
                   "w" : NumberLong(0),
                   "R" : NumberLong(0),
                   "W" : NumberLong(0)
                },
                "deadlockCount" : {
                   "r" : NumberLong(0),
                   "w" : NumberLong(0),
                   "R" : NumberLong(0),
                   "W" : NumberLong(0)
                }
             },
             "ReplicationStateTransition" : {
                ...
             },
             "Global" : {
                ...
             },
             "Database" : {
                ...
             },
             ...
         }
       },
       ...
   ],
  "ok": <num>,
  "operationTime": <timestamp>,
  "$clusterTime": <document>
}

----------------------------------------

TITLE: Optimizing $multiply Operation in MongoDB 6.1+
DESCRIPTION: Shows how to optimize the $multiply operation in MongoDB 6.1 and later versions by grouping references at the end of the argument list for improved performance.

LANGUAGE: javascript
CODE:
$multiply: [ 1, 2, 3, '$a', '$b', '$c' ]

----------------------------------------

TITLE: Connecting to MongoDB Deployment using mongosh
DESCRIPTION: Demonstrates how to connect to a MongoDB deployment using the mongosh shell. It includes the connection string format for connecting to an Atlas cluster.

LANGUAGE: bash
CODE:
mongosh "mongodb+srv://my-test-cluster.1twap.mongodb.net/" --apiVersion 1 --username <user>

----------------------------------------

TITLE: Undefined Type Query Example in MongoDB
DESCRIPTION: Examples showing how to insert and query documents with undefined values in MongoDB. Demonstrates proper query syntax using $type operator.

LANGUAGE: bash
CODE:
db.people.insertOne( { name : "Sally", age : undefined } )

db.people.find( { age : undefined } )
db.people.find( { age : { $gte : undefined } } )

db.people.find( { age : { $type : 6 } } )

----------------------------------------

TITLE: Inserting Documents with Array Fields in MongoDB
DESCRIPTION: Example of inserting documents with array fields into a MongoDB collection. This demonstrates the structure of documents that can benefit from multikey indexing.

LANGUAGE: javascript
CODE:
db.matches.insertMany( [
   { name: "Joe", event: [ "open", "tournament" ] },
   { name: "Bill", event: [ "match", "championship" ] }
] )

----------------------------------------

TITLE: Creating Time Series Collection with MongoDB $out Aggregation Stage
DESCRIPTION: This $out aggregation stage creates a new time series collection named 'weathernew' in the 'mydatabase' database, defining metaData as the metaField and ts as the timeField.

LANGUAGE: javascript
CODE:
{
   $out: {
      db: "mydatabase",
      coll: "weathernew",
      timeseries: {
         timeField: "ts",
         metaField: "metaData",
         granularity: "seconds"
      }
   }
}

----------------------------------------

TITLE: Creating Time Series Collection with MongoDB $out Aggregation Stage
DESCRIPTION: This $out aggregation stage creates a new time series collection named 'weathernew' in the 'mydatabase' database, defining metaData as the metaField and ts as the timeField.

LANGUAGE: javascript
CODE:
{
   $out: {
      db: "mydatabase",
      coll: "weathernew",
      timeseries: {
         timeField: "ts",
         metaField: "metaData",
         granularity: "seconds"
      }
   }
}

----------------------------------------

TITLE: Querying Specific Metrics in MongoDB Server Status
DESCRIPTION: This snippet demonstrates how to query specific metrics from the db.serverStatus() output. It shows accessing the findAndModify metrics under the commands section.

LANGUAGE: javascript
CODE:
db.serverStatus().metrics.commands.findAndModify

----------------------------------------

TITLE: Go MongoDB Driver Setup
DESCRIPTION: Basic Golang driver code example setup with build constraint requirements for CSFLE functionality.

LANGUAGE: go
CODE:
// You are viewing the Golang driver code examples.
// Use the dropdown menu to select a different driver.

----------------------------------------

TITLE: CollectionUUIDMismatch Example Response
DESCRIPTION: Shows a complete example of a CollectionUUIDMismatch inconsistency response from MongoDB, including cursor information and detail fields.

LANGUAGE: json
CODE:
{
   cursor: {
      id: Long("0"),
      ns: "test.$cmd.aggregate",
      firstBatch: [
         {
            type: "CollectionUUIIDMismatch",
            description: "Found collection on non primary shard with mismatching UUID",
            details: {
               namespace: "test.authors",
               shard: "shard02",
               localUUID: new UUID("1ad56770-61e2-48e9-83c6-8ecefe73cfc4"),
               uuid: new UUID("a3153e8a-3544-43ec-928f-37f72b48dee9")
            }
         }
      ],
   },
   ok: 1
}

----------------------------------------

TITLE: Example Command Implementation
DESCRIPTION: Complete example showing how to execute the transitionFromDedicatedConfigServer command.

LANGUAGE: javascript
CODE:
db.adminCommand( { 
   transitionFromDedicatedConfigServer: 1
} )

----------------------------------------

TITLE: Shutting Down a Primary MongoDB Server with Extended Timeout
DESCRIPTION: This example shows how to shut down a primary MongoDB server with a longer timeout period of 60 seconds.

LANGUAGE: javascript
CODE:
db.getSiblingDB("admin").shutdownServer({ "timeoutSecs": 60 })

----------------------------------------

TITLE: MongoDB Temperature Calculation Results
DESCRIPTION: Example output showing the calculated absolute temperature differences.

LANGUAGE: javascript
CODE:
{ "_id" : 1, "delta" : 30 }
{ "_id" : 2, "delta" : 0 }
{ "_id" : 3, "delta" : 20 }
{ "_id" : 4, "delta" : 10 }

----------------------------------------

TITLE: MongoDB $sample Pipeline Syntax
DESCRIPTION: Basic syntax for using the $sample aggregation pipeline operator to randomly select documents.

LANGUAGE: javascript
CODE:
{ $sample: { size: <positive integer N> } }

----------------------------------------

TITLE: Defining Document Structure for MongoDB Employee Collection
DESCRIPTION: JSON structure defining the fields and their types for documents in the 'employees' collection of the 'hr' database. It includes fields for '_id', 'name', 'age', and 'salary'.

LANGUAGE: json
CODE:
{
  "_id": "<ObjectId>",
  "name": "<Encrypted string>",
  "age": "<Encrypted integer>",
  "salary": 50000
}

----------------------------------------

TITLE: Assigning Tag Range for In-Memory Shard in MongoDB (JavaScript)
DESCRIPTION: JavaScript command to assign a tag range for an in-memory shard in MongoDB. This assigns the 'inmem' tag to the entire chunk range of a collection.

LANGUAGE: javascript
CODE:
sh.addTagRange("test.analytics", { shardKey: MinKey }, { shardKey: MaxKey }, "inmem")

----------------------------------------

TITLE: pH Calculation Results
DESCRIPTION: Shows the results of the pH calculation aggregation pipeline.

LANGUAGE: javascript
CODE:
{ "_id" : 1, "pH" : 2.6020599913279625 }
{ "_id" : 2, "pH" : 3 }
{ "_id" : 3, "pH" : 1.6989700043360187 }

----------------------------------------

TITLE: MongoDB Document Structure Example
DESCRIPTION: Example of a MongoDB document structure used in the aggregation examples. Shows a sample order document with customer ID, order date, status, price, and line items.

LANGUAGE: javascript
CODE:
{
  cust_id: "abc123",
  ord_date: ISODate("2012-11-02T17:04:11.102Z"),
  status: 'A',
  price: 50,
  items: [ { sku: "xxx", qty: 25, price: 1 },
           { sku: "yyy", qty: 25, price: 1 } ]
}

----------------------------------------

TITLE: Specifying All Non-System Collections Resource in MongoDB
DESCRIPTION: Example showing how to specify all non-system collections across all databases as a resource.

LANGUAGE: javascript
CODE:
{ db: "", collection: "" }

----------------------------------------

TITLE: Converting Long to Decimal Using Aggregation Pipeline
DESCRIPTION: Aggregation pipeline that converts price values from long integers (cents) to Decimal128 format by multiplying by 0.01.

LANGUAGE: javascript
CODE:
db.clothes.aggregate(
  [
    { $match: { price: { $type: "long" }, priceDec: { $exists: 0 } } }, 
    {
      $addFields: {
        priceDec: {
          $multiply: [ "$price", NumberDecimal( "0.01" ) ]
        }
      }
    }
  ]
).forEach( ( function( doc ) {
  db.clothes.replaceOne( doc );
} ) )

----------------------------------------

TITLE: Creating MongoDB Netstat Access Policy
DESCRIPTION: Creates a custom SELinux policy file to allow MongoDB access to netstat data for Full Time Diagnostic Data Capture (FTDC). This policy enables MongoDB to read network statistics while running with SELinux enforcing mode.

LANGUAGE: bash
CODE:
cat > mongodb_proc_net.te <<EOF
module mongodb_proc_net 1.0;

require {
    type cgroup_t;
    type configfs_t;
    type file_type;
    type mongod_t;
    type proc_net_t;
    type sysctl_fs_t;
    type var_lib_nfs_t;

    class dir { search getattr };
    class file { getattr open read };
}

#============= mongod_t ==============
allow mongod_t cgroup_t:dir { search getattr } ;
allow mongod_t cgroup_t:file { getattr open read };
allow mongod_t configfs_t:dir getattr;
allow mongod_t file_type:dir { getattr search };
allow mongod_t file_type:file getattr;
allow mongod_t proc_net_t:file { open read };
allow mongod_t sysctl_fs_t:dir search;
allow mongod_t var_lib_nfs_t:dir search;
EOF

----------------------------------------

TITLE: Setting Write Concern Timeout for Feature Compatibility Version Change
DESCRIPTION: Example of using the setFeatureCompatibilityVersion command with a custom write concern timeout of 5 seconds (5000 milliseconds).

LANGUAGE: javascript
CODE:
db.adminCommand( {
   setFeatureCompatibilityVersion: "5.0",
   writeConcern: { wtimeout: 5000 }
} )

----------------------------------------

TITLE: Error Handling with $or in MongoDB Queries
DESCRIPTION: Illustrates a complex query using $or with both a simple equality check and an $expr operator, demonstrating how MongoDB handles potential errors in $or clauses.

LANGUAGE: javascript
CODE:
db.example.find( {
   $or: [
      { x: { $eq: 0 } },
      { $expr: { $eq: [ { $divide: [ 1, "$x" ] }, 3 ] } }
   ]
} )

----------------------------------------

TITLE: MongoDB Olson Timezone Identifier Examples
DESCRIPTION: Examples showing valid Olson Timezone Identifier formats for MongoDB timezone configuration.

LANGUAGE: none
CODE:
"America/New_York"
"Europe/London"
"GMT"

----------------------------------------

TITLE: Creating a Sample Collection with Collation in MongoDB
DESCRIPTION: Example of creating a collection with a specific collation setting for case and diacritic insensitive comparisons.

LANGUAGE: javascript
CODE:
db.createCollection( "myColl", { collation: { locale: "fr", strength: 1 } } )

----------------------------------------

TITLE: Running connPoolStats Command in MongoDB
DESCRIPTION: Example of running the connPoolStats command using the db.runCommand() method in MongoDB.

LANGUAGE: javascript
CODE:
db.runCommand( { "connPoolStats" : 1 } )

----------------------------------------

TITLE: Defining $derivative Syntax in MongoDB Aggregation
DESCRIPTION: Basic syntax structure for the $derivative operator showing required input and unit fields.

LANGUAGE: none
CODE:
{
   $derivative: {
      input: <expression>,
      unit: <time unit>
   }
}

----------------------------------------

TITLE: Executing split Command in MongoDB
DESCRIPTION: Basic syntax for the split command in MongoDB. It must be run in the admin database and requires specifying the namespace and a method for determining the split point.

LANGUAGE: javascript
CODE:
db.adminCommand( 
   { 
     split: <database>.<collection>, <find|middle|bounds> 
   } 
)

----------------------------------------

TITLE: MongoDB $cmp Operator Syntax
DESCRIPTION: Basic syntax for the $cmp operator that compares two expressions and returns -1, 0, or 1 based on whether the first value is less than, equal to, or greater than the second value.

LANGUAGE: javascript
CODE:
{ $cmp: [ <expression1>, <expression2> ] }

----------------------------------------

TITLE: Defining $floor Syntax in MongoDB Aggregation
DESCRIPTION: Shows the basic syntax for using the $floor operator in a MongoDB aggregation pipeline. The operator takes a single numeric argument and returns the largest integer less than or equal to that number.

LANGUAGE: javascript
CODE:
{ $floor: <number> }

----------------------------------------

TITLE: Sample Time Series Document Structure in MongoDB
DESCRIPTION: Demonstrates the structure of a document in the 'stocks' time series collection. Each document includes fields for _id, ticker, date, close price, and volume.

LANGUAGE: javascript
CODE:
{ 
   _id: ObjectId(...),
   ticker: <string>, 
   date: ISODate(...), 
   close: <double>,
   volume: <double>
}

----------------------------------------

TITLE: File Reading Operations in MongoDB Shell
DESCRIPTION: Methods for reading file contents with and without binary mode handling

LANGUAGE: javascript
CODE:
fs.readFileSync( <filename>, 'utf8' )

LANGUAGE: javascript
CODE:
fs.readFileSync( <filename>, 'utf8' ).replace( /\r\n/g, '\n' )

----------------------------------------

TITLE: MongoDB $mod Operator with Excess Elements
DESCRIPTION: Illustrates an error case where the $mod operator is provided with more than two elements.

LANGUAGE: javascript
CODE:
db.inventory.find( { qty: { $mod: [ 4, 1, 2, 3 ] } } )

----------------------------------------

TITLE: Inserting Documents with Unique Constraint in MongoDB
DESCRIPTION: Illustrates the process of inserting a document while enforcing uniqueness. It first inserts into the proxy collection, then into the main collection if successful.

LANGUAGE: javascript
CODE:
records = db.getSiblingDB('records');
proxy = db.getSiblingDB('proxy');

var primary_id = ObjectId();

proxy.insertOne({
   "_id" : primary_id
   "email" : "example@example.net"
})

// if: the above operation returns successfully,
// then continue:

records.insertOne({
   "_id" : primary_id
   "email": "example@example.net"
   // additional information...
})

----------------------------------------

TITLE: Basic Usage of $[<identifier>] Operator in MongoDB Update
DESCRIPTION: Demonstrates the basic syntax for using the $[<identifier>] operator in conjunction with arrayFilters to update specific array elements.

LANGUAGE: javascript
CODE:
{ <update operator>: { "<array>.$[<identifier>]" : value } },
{ arrayFilters: [ { <identifier>: <condition> } ] }

----------------------------------------

TITLE: Specifying Read Preference in MongoDB Session Options
DESCRIPTION: This code snippet shows the structure of the readPreference option when starting a MongoDB session. It includes the mode and optional tags fields.

LANGUAGE: javascript
CODE:
{ mode: <string>, tags: <array> }

----------------------------------------

TITLE: MongoDB dropUser Command Syntax
DESCRIPTION: Demonstrates the basic syntax for the dropUser command including optional writeConcern and comment fields.

LANGUAGE: javascript
CODE:
db.runCommand(
   {
     dropUser: "<user>",
     writeConcern: { <write concern> },
     comment: <any>
   }
)

----------------------------------------

TITLE: Equivalent $group and $project Implementation
DESCRIPTION: Demonstrates how the $count stage can be implemented using equivalent $group and $project stages. This shows the underlying operation that $count performs.

LANGUAGE: javascript
CODE:
db.collection.aggregate( [
   { $group: { _id: null, myCount: { $sum: 1 } } },
   { $project: { _id: 0 } }
] )

----------------------------------------

TITLE: Stopping Collection Movement in MongoDB using abortMoveCollection
DESCRIPTION: Demonstrates how to stop an in-progress collection movement from one shard to another using the abortMoveCollection command on the admin database. Shows the command usage and expected output format.

LANGUAGE: javascript
CODE:
db.adminCommand( {
   abortMoveCollection: "app.inventory"
} )

LANGUAGE: javascript
CODE:
{
   ok: 1,
   '$clusterTime': {
      clusterTime: Timestamp( { t: 1726524884, i: 28 } ),
      signature: {
         hash: Binary.createFromBase64('AAAAAAAAAAAAAAAAAAAAAAAAAAA=', 0),
         keyId: Long('0')
      }
   },
   operationTime: Timestamp({ t: 1726524884, i: 28 })
}

----------------------------------------

TITLE: Executing refreshSessions Command in MongoDB JavaScript
DESCRIPTION: This snippet demonstrates the syntax for running the refreshSessions command in MongoDB. It updates the last use time for specified sessions, extending their active state. The command takes an array of session IDs (UUIDs) as input.

LANGUAGE: javascript
CODE:
db.runCommand(
   { 
     refreshSessions: [ 
       { id : <UUID> }, ... 
     ] 
   } 
 )

----------------------------------------

TITLE: Resulting Document After $setOnInsert Operation in MongoDB
DESCRIPTION: This snippet shows the structure of the document created in the products collection after the $setOnInsert operation. It includes the _id field, the item field set by $set, and the defaultQty field set by $setOnInsert.

LANGUAGE: javascript
CODE:
{ "_id" : 1, "item" : "apple", "defaultQty" : 100 }

----------------------------------------

TITLE: Defining MissingLocalCollection Format in MongoDB JSON
DESCRIPTION: Specifies the JSON format for the MissingLocalCollection inconsistency type. It includes the type, description, and details fields with namespace, UUID, and shard information.

LANGUAGE: json
CODE:
{
   type: "MissingLocalCollection",
   description: "<string>",
   details: {
      namespace: "<string>",
      uuid: UUID("<uuid>"),
      shard: "<string>"
   }
}

----------------------------------------

TITLE: Counting Unique Messages with jq
DESCRIPTION: A bash command using jq to count and sort the top 10 unique message values in a MongoDB log file.

LANGUAGE: bash
CODE:
jq -r ".msg" /var/log/mongodb/mongod.log | sort | uniq -c | sort -rn | head -10

----------------------------------------

TITLE: Inserting Sample Data for MongoDB $allElementsTrue Example
DESCRIPTION: Demonstrates inserting multiple documents into a 'survey' collection to be used in a $allElementsTrue example. Each document contains a 'responses' array with various values.

LANGUAGE: javascript
CODE:
db.survey.insertMany([
   { "_id" : 1, "responses" : [ true ] },
   { "_id" : 2, "responses" : [ true, false ] },
   { "_id" : 3, "responses" : [ ] },
   { "_id" : 4, "responses" : [ 1, true, "seven" ] },
   { "_id" : 5, "responses" : [ 0 ] },
   { "_id" : 6, "responses" : [ [ ] ] },
   { "_id" : 7, "responses" : [ [ 0 ] ] },
   { "_id" : 8, "responses" : [ [ false ] ] },
   { "_id" : 9, "responses" : [ null ] },
   { "_id" : 10, "responses" : [ undefined ] }
])

----------------------------------------

TITLE: Example Usage of transitionToDedicatedConfigServer in MongoDB
DESCRIPTION: This code snippet demonstrates how to use the transitionToDedicatedConfigServer command in practice. It configures a config shard to run as a dedicated config server in a MongoDB sharded cluster.

LANGUAGE: javascript
CODE:
db.adminCommand( { 
   transitionToDedicatedConfigServer: 1
} )

----------------------------------------

TITLE: Example Document in MongoDB Config Collections Collection
DESCRIPTION: Sample document structure from the config.collections collection, which stores metadata for sharded collections. This example shows the fields for a single collection document.

LANGUAGE: javascript
CODE:
{
 "_id" : "records.pets",
 "lastmod" : ISODate("2021-07-21T15:48:15.193Z"),
 "timestamp": Timestamp(1626882495, 1),
 "key" : {
       "a" : 1
 },
 "unique" : false,
 "lastmodEpoch" : ObjectId("5078407bd58b175c5c225fdc"),
 "uuid" :  UUID("f8669e52-5c1b-4ea2-bbdc-a00189b341da")
}

----------------------------------------

TITLE: Retrieving Next Document from MongoDB Cursor in JavaScript
DESCRIPTION: The cursor.tryNext() method attempts to retrieve the next document from a MongoDB cursor. It returns the next document if available, or null if there are no more documents. This method is a special case of cursor.next() that doesn't throw an error when the cursor is exhausted.

LANGUAGE: javascript
CODE:
cursor.tryNext()

----------------------------------------

TITLE: MongoDB Tailable Cursor with MaxAwaitTimeMS Example
DESCRIPTION: Demonstrates querying a capped collection named 'sales' to find Mary Kay's weekly sales totals using a tailable cursor with a 1-second maximum wait time.

LANGUAGE: javascript
CODE:
db.sales.find( 
   { agent: "Mary Kay" },
   { _id: 0, agent: 1, weeklyTotal: 1  }
).tailable( { awaitData: true } ).maxAwaitTimeMS( 1000 )

----------------------------------------

TITLE: MongoDB $mod Operator with Floating Point Divisor
DESCRIPTION: Demonstrates using the $mod operator with a floating-point divisor, which is rounded towards zero.

LANGUAGE: javascript
CODE:
db.inventory.find( { qty: { $mod: [ 4.0, 0 ] } } )

----------------------------------------

TITLE: Counting Documents in a Collection using MongoDB Aggregation
DESCRIPTION: Shows how to use $group to count the total number of documents in a collection, equivalent to COUNT(*) in SQL.

LANGUAGE: javascript
CODE:
db.sales.aggregate( [
  {
    $group: {
       _id: null,
       count: { $count: { } }
    }
  }
] )

LANGUAGE: sql
CODE:
SELECT COUNT(*) AS count FROM sales

----------------------------------------

TITLE: Counting Documents in a Collection using MongoDB Aggregation
DESCRIPTION: Shows how to use $group to count the total number of documents in a collection, equivalent to COUNT(*) in SQL.

LANGUAGE: javascript
CODE:
db.sales.aggregate( [
  {
    $group: {
       _id: null,
       count: { $count: { } }
    }
  }
] )

LANGUAGE: sql
CODE:
SELECT COUNT(*) AS count FROM sales

----------------------------------------

TITLE: Equivalent $convert Expression for $toString in MongoDB
DESCRIPTION: Demonstrates that $toString is a shorthand for the $convert expression with the 'to' parameter set to 'string'.

LANGUAGE: javascript
CODE:
{ $convert: { input: <expression>, to: "string" } }

----------------------------------------

TITLE: Sample Collection Document
DESCRIPTION: Example document structure in the sales collection showing date field usage.

LANGUAGE: javascript
CODE:
{
  "_id" : 1,
  "item" : "abc",
  "price" : 10,
  "quantity" : 2,
  "date" : ISODate("2014-01-01T08:15:39.736Z")
}

----------------------------------------

TITLE: Defining reStructuredText Variables for MongoDB Installation Guide
DESCRIPTION: This snippet defines several reStructuredText substitution variables used throughout the document for consistent terminology and easier maintenance.

LANGUAGE: reStructuredText
CODE:
.. |arrow| unicode:: U+27A4
.. |edition| replace:: Enterprise
.. |package-name| replace:: ``{+package-name-enterprise+}``
.. |distro-name| replace:: Amazon
.. |package-manager| replace:: ``yum``
.. |executable-name| replace:: ``mongod``

----------------------------------------

TITLE: Checking Client API Versions with serverStatus Command
DESCRIPTION: Example of how to use the serverStatus command to check configured API versions for connected clients

LANGUAGE: javascript
CODE:
db.runCommand( { serverStatus: 1 } ).metrics.apiVersions

----------------------------------------

TITLE: Sample MongoDB Document with ISODate
DESCRIPTION: Example document structure in a sales collection containing a timestamp in ISODate format

LANGUAGE: javascript
CODE:
{
   "_id" : 1,
   "item" : "abc",
   "price" : 20,
   "quantity" : 5,
   "date" : ISODate("2017-05-20T10:24:51.303Z")
}

----------------------------------------

TITLE: Defining Access Control for transitionToDedicatedConfigServer in MongoDB
DESCRIPTION: This snippet illustrates the required access control configuration for the transitionToDedicatedConfigServer command. It specifies the necessary authorization action and resource scope for executing the command when access control is enabled.

LANGUAGE: javascript
CODE:
{
   resource: { cluster : true },
   actions: [ "transitionToDedicatedConfigServer" ]
}

----------------------------------------

TITLE: Granting Read Role to User in MongoDB
DESCRIPTION: This snippet demonstrates how to grant the 'read' role to a user for a specific database in MongoDB. The 'read' role includes the listSearchIndexes privilege, allowing the user to list search indexes on the specified database.

LANGUAGE: javascript
CODE:
db.grantRolesToUser(
   "<user>",
   [ { role: "read", db: "qa" } ]
)

----------------------------------------

TITLE: Inserting Multiple Documents into MongoDB Collection
DESCRIPTION: This snippet demonstrates how to create a new collection called 'restaurantsSort' and insert multiple documents into it using the insertMany() method. Each document contains information about a restaurant, including an ID, name, rating, and number of violations.

LANGUAGE: javascript
CODE:
db.restaurantsSort.insertMany( [
   { _id: 1, name: "Pizza Place", rating: 4, violations: 2 },
   { _id: 2, name: "Burger Joint", rating: 3, violations: 5 },
   { _id: 3, name: "Taco Shop", rating: 4, violations: 1 }
] )

----------------------------------------

TITLE: Configuring MongoDB Auditing with Syslog Output in YAML
DESCRIPTION: YAML configuration for enabling MongoDB auditing with output to syslog.

LANGUAGE: yaml
CODE:
storage:
   dbPath: data/db
auditLog:
   destination: syslog

----------------------------------------

TITLE: MongoDB Collection Operations - Remove and Insert Documents
DESCRIPTION: Demonstrates clearing a collection using remove() and inserting multiple documents with insertMany(). The documents contain various data types including nested objects, arrays, and different field types.

LANGUAGE: javascript
CODE:
db.books.remove({});

db.books.insertMany([
  {
    "_id" : 1,
    "item" : "TBD",
    "stock" : 0,
    "info" : { "publisher" : "1111", "pages" : 430 },
    "tags" : [ "technology", "computer" ],
    "ratings" : [ { "by" : "ijk", "rating" : 4 }, { "by" : "lmn", "rating" : 5 } ],
    "reorder" : false
   },
   {
    "_id" : 2,
    "item" : "XYZ123",
    "stock" : 15,
    "info" : { "publisher" : "5555", "pages" : 150 },
    "tags" : [ ],
    "ratings" : [ { "by" : "xyz", "rating" : 5 } ],
    "reorder" : false
   }
]);

----------------------------------------

TITLE: Example of RoutingTableRangeGap Inconsistency in MongoDB
DESCRIPTION: This example demonstrates a RoutingTableRangeGap inconsistency in MongoDB. It shows a gap between two consecutive chunks in the 'test.authors' namespace, with detailed information about each chunk including their range, shard, and history.

LANGUAGE: json
CODE:
{
   cursor: {
      id: Long("0"),
      ns: "test.$cmd.aggregate",
      firstBatch: [
         {
            type: "RoutingTableRangeGap",
            description: "Found a gap between two consecutive chunks",
            details: {
               namespace: "test.authors",
               collectionUUID: new UUID("62ebdb7e-a7bb-4151-a620-49d44cef097f"),
               chunkA: { 
                 _id: ObjectId("64dde749ac6045c92ef3b9ad"), 
                 uuid: new UUID("8c83ea89-ab6b-4ae4-91ab-813cf781284d"), 
                 min: { 
                    x: MinKey 
                 }, 
                 max: { 
                    x: 0 
                 }, 
                 shard: "shard0000", 
                 lastmod: Timestamp(1, 0), 
                 onCurrentShardSince: Timestamp(1, 0), 
                  history: [ 
                     { 
                        validAfter: Timestamp(1, 0), 
                        shard: "shard0000" 
                     } 
                  ] 
               },
               chunkB: { 
                  _id: ObjectId("64dde749ac6045c92ef3b9af"), 
                  uuid: new UUID("8c83ea89-ab6b-4ae4-91ab-813cf781284d"), 
                  min: { 
                     x: 10
                  }, 
                  max: { 
                     x: MaxKey
                  }, 
                  shard: "shard0000", 
                  lastmod: Timestamp(1, 0), 
                  onCurrentShardSince: Timestamp(1, 0), 
                  history: [ 
                     { 
                        validAfter: Timestamp(1, 0), 
                        shard: "shard0000" 
                     } 
                  ] 
               }
            }
         }
      ],
   },
   ok: 1
}

----------------------------------------

TITLE: Confirming Completed Defragmentation in MongoDB
DESCRIPTION: This snippet illustrates the output of the balancerCollectionStatus command when defragmentation is complete and the collection is balanced. It shows the balancerCompliant field set to true.

LANGUAGE: javascript
CODE:
{
   chunkSize: 0.2,
   balancerCompliant: true,
   ok: 1,
   '$clusterTime': {
      clusterTime: Timestamp({ t: 1677543079, i: 1 }),
      signature: {
         hash: Binary(Buffer.from("0000000000000000000000000000000000000000", "hex"), 0),
         keyId: Long("0")
      }
   },
   operationTime: Timestamp({ t: 1677543079, i: 1 })
}

----------------------------------------

TITLE: Confirming Completed Defragmentation in MongoDB
DESCRIPTION: This snippet illustrates the output of the balancerCollectionStatus command when defragmentation is complete and the collection is balanced. It shows the balancerCompliant field set to true.

LANGUAGE: javascript
CODE:
{
   chunkSize: 0.2,
   balancerCompliant: true,
   ok: 1,
   '$clusterTime': {
      clusterTime: Timestamp({ t: 1677543079, i: 1 }),
      signature: {
         hash: Binary(Buffer.from("0000000000000000000000000000000000000000", "hex"), 0),
         keyId: Long("0")
      }
   },
   operationTime: Timestamp({ t: 1677543079, i: 1 })
}

----------------------------------------

TITLE: Confirming Completed Defragmentation in MongoDB
DESCRIPTION: This snippet illustrates the output of the balancerCollectionStatus command when defragmentation is complete and the collection is balanced. It shows the balancerCompliant field set to true.

LANGUAGE: javascript
CODE:
{
   chunkSize: 0.2,
   balancerCompliant: true,
   ok: 1,
   '$clusterTime': {
      clusterTime: Timestamp({ t: 1677543079, i: 1 }),
      signature: {
         hash: Binary(Buffer.from("0000000000000000000000000000000000000000", "hex"), 0),
         keyId: Long("0")
      }
   },
   operationTime: Timestamp({ t: 1677543079, i: 1 })
}

----------------------------------------

TITLE: Starting MongoDB with Kerberos Trace Logging
DESCRIPTION: Command to start a MongoDB instance with Kerberos authentication enabled and trace logging configured. Includes keytab path specification and GSSAPI authentication mechanism.

LANGUAGE: bash
CODE:
env KRB5_KTNAME=/etc/krb5.keytab \
    KRB5_TRACE=/logs/mongodb-kerberos.log \
    mongod --dbpath /data/db --logpath /data/db/mongodb.log \
    --auth --setParameter authenticationMechanisms=GSSAPI \
    --bind_ip localhost,<hostname(s)|ip address(es)> --fork

----------------------------------------

TITLE: Inequality Matches on Documents and Arrays in MongoDB
DESCRIPTION: Examples of inequality queries that cannot be supported by wildcard indexes on documents and arrays. These queries use the $ne operator in an aggregation pipeline.

LANGUAGE: javascript
CODE:
db.inventory.aggregate( [
   { 
      $match : { 
         $ne : [ "product_attributes", { "price" : 29.99 } ]
      }
   }
] )

db.inventory.aggregate( [
   { 
      $match : {
         $ne : [ "product_attributes.tags", [ "waterproof", "fireproof" ] ]
      }
   }
] )

----------------------------------------

TITLE: Creating THP Init Script
DESCRIPTION: Init.d script for enabling and configuring Transparent Hugepages on Linux systems. The script sets appropriate THP parameters and memory overcommit settings to improve database performance.

LANGUAGE: sh
CODE:
#!/bin/bash
### BEGIN INIT INFO
# Provides:          enable-transparent-hugepages
# Required-Start:    $local_fs
# Required-Stop:
# X-Start-Before:    mongod mongodb-mms-automation-agent
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Enable Linux Transparent Hugepages
# Description:       Enable Linux Transparent Hugepages, to improve
#                    database performance.
### END INIT INFO

case $1 in
  start)
    if [ -d /sys/kernel/mm/transparent_hugepage ]; then
      thp_path=/sys/kernel/mm/transparent_hugepage
    elif [ -d /sys/kernel/mm/redhat_transparent_hugepage ]; then
      thp_path=/sys/kernel/mm/redhat_transparent_hugepage
    else
      return 0
    fi

    echo 'always' | tee ${thp_path}/enabled > /dev/null && echo defer+madvise | tee ${thp_path}/defrag > /dev/null && echo 0 | tee ${thp_path}/khugepaged/max_ptes_none > /dev/null && echo 1 | tee /proc/sys/vm/overcommit_memory > /dev/null'

    unset thp_path
    ;;
esac

----------------------------------------

TITLE: Executing commitTransaction Command in MongoDB
DESCRIPTION: This code snippet demonstrates the syntax for running the commitTransaction command against the admin database within a session. It includes options for specifying the transaction number, write concern, autocommit, and a comment.

LANGUAGE: javascript
CODE:
db.adminCommand(
   {
     commitTransaction: 1, 
     txnNumber: <long>,
     writeConcern: <document>,
     autocommit: false,
     comment: <any>
   }
)

----------------------------------------

TITLE: Creating Index Using Node.js Driver
DESCRIPTION: Creates an ascending index on the 'name' field using the Node.js MongoDB driver with callback

LANGUAGE: javascript
CODE:
collection.createIndex( { name : 1 }, function(err, result) {
  console.log(result);
  callback(result);
} )

----------------------------------------

TITLE: Querying MongoDB using $bitsAnySet with Bit Position Array
DESCRIPTION: This snippet demonstrates how to use the $bitsAnySet operator to test whether field 'a' has either bit position 1 or 5 set, where the least significant bit is position 0.

LANGUAGE: javascript
CODE:
db.collection.find( { a: { $bitsAnySet: [ 1, 5 ] } } )

----------------------------------------

TITLE: Executing DeleteMany Operation in Java MongoDB Driver
DESCRIPTION: The deleteMany() method in the Java driver returns a DeleteResult object containing the status of the operation, including the number of documents deleted.

LANGUAGE: java
CODE:
collection.deleteMany()

----------------------------------------

TITLE: Initializing MongoDB Collection with Sample Data
DESCRIPTION: Example of initializing a MongoDB collection named 'inventory' with sample documents containing product information.

LANGUAGE: javascript
CODE:
{ "_id" : 1, "item" : "ABC1", quarter: "13Q1", "description" : " product 1" }
{ "_id" : 2, "item" : "ABC2", quarter: "13Q4", "description" : "product 2 \n The product is in stock.  \n\n  " }
{ "_id" : 3, "item" : "XYZ1", quarter: "14Q2", "description" : null }

----------------------------------------

TITLE: MongoDB Document Structure for Trigonometry Example
DESCRIPTION: Illustrates the structure of a document in the 'trigonometry' collection used in the examples.

LANGUAGE: javascript
CODE:
{
  "_id" : ObjectId("5c50782193f833234ba90d85"),
  "x-coordinate" : NumberDecimal("3")
}

----------------------------------------

TITLE: Example of Encrypted Document Structure in MongoDB
DESCRIPTION: JSON representation of an encrypted document after insertion into MongoDB using CSFLE. Shows the structure with encrypted fields.

LANGUAGE: json
CODE:
{
  "_id": { "$oid": "<ObjectId>" },
  "firstName": "Jon",
  "lastName": "Doe",
  "patientId": 12345678,
  "address": "157 Electric Ave.",
  "patientRecord": {
    "$binary": {
      "base64": "AUoAAAJ9FFF...",
      "subType": "06"
    }
  }
}

----------------------------------------

TITLE: Error Message for Unsupported Index Usage in MongoDB Stable API V1
DESCRIPTION: This snippet demonstrates the error message returned when attempting to use an unsupported index type (such as a sparse index) with cursor.hint() in MongoDB Stable API V1 strict mode. The query planner ignores unsupported index types and returns a BadValue error.

LANGUAGE: plaintext
CODE:
planner returned error :: caused by :: hint provided does not 
correspond to an existing index

----------------------------------------

TITLE: MongoDB $cmp Example Output
DESCRIPTION: Sample output showing the results of comparing inventory quantities to 250, demonstrating all three possible return values (-1, 0, 1).

LANGUAGE: javascript
CODE:
{ item : "abc1", qty : 300, cmpTo250 : 1 }
{ item : "abc2", qty : 200, cmpTo250 : -1 }
{ item : "xyz1", qty : 250, cmpTo250 : 0 }
{ item : "VWZ1", qty : 300, cmpTo250 : 1 }
{ item : "VWZ2", qty : 180, cmpTo250 : -1 }

----------------------------------------

TITLE: Inserting a BSONRegExp Object into MongoDB Collection
DESCRIPTION: This example shows how to insert a document containing a BSONRegExp object into a MongoDB collection named 'testbson'.

LANGUAGE: javascript
CODE:
db.testbson.insertOne( { foo: bsonRegExp } )

----------------------------------------

TITLE: Snapshot Parameter Configuration
DESCRIPTION: Command to modify the snapshot history retention window duration using setParameter command.

LANGUAGE: javascript
CODE:
db.adminCommand( { setParameter: 1, minSnapshotHistoryWindowInSeconds: 600 } )

----------------------------------------

TITLE: Basic $sin Operator Syntax in MongoDB
DESCRIPTION: Shows the basic syntax for using the $sin operator in MongoDB aggregation pipelines.

LANGUAGE: javascript
CODE:
{ $sin: <expression> }

----------------------------------------

TITLE: Querying Encrypted Documents with Go
DESCRIPTION: This Go snippet demonstrates how to query encrypted documents using both a Queryable Encryption-enabled client and a standard client. It showcases the difference in results when querying encrypted fields in MongoDB.

LANGUAGE: go
CODE:
start-find
// Query for the document with a QE-enabled client
var qeResult bson.M
err = encryptedColl.FindOne(context.TODO(), bson.D{{"encryptedField", "123456789"}}).Decode(&qeResult)
if err != nil {
    log.Fatal(err)
}
fmt.Println("Document retrieved with QE-enabled client:")
output, err := json.MarshalIndent(qeResult, "", "    ")
if err != nil {
    log.Fatal(err)
}
fmt.Printf("%s\n", output)

// Query for the document with a standard client
var standardResult bson.M
err = standardColl.FindOne(context.TODO(), bson.D{{"encryptedField", "123456789"}}).Decode(&standardResult)
if err != nil {
    log.Fatal(err)
}
fmt.Println("\nDocument retrieved with standard client:")
output, err = json.MarshalIndent(standardResult, "", "    ")
if err != nil {
    log.Fatal(err)
}
fmt.Printf("%s\n", output)
end-find

----------------------------------------

TITLE: Inserting Multiple Documents in MongoDB using Shell
DESCRIPTION: This snippet demonstrates how to insert multiple documents into the 'inventory' collection using the MongoDB shell. It uses the insertMany() method to add an array of documents with various properties.

LANGUAGE: javascript
CODE:
db.inventory.insertMany( [
   { item: "journal", qty: 25, size: { h: 14, w: 21, uom: "cm" }, status: "A" },
   { item: "notebook", qty: 50, size: { h: 8.5, w: 11, uom: "in" }, status: "P" },
   { item: "paper", qty: 100, size: { h: 8.5, w: 11, uom: "in" }, status: "D" },
   { item: "planner", qty: 75, size: { h: 22.85, w: 30, uom: "cm" }, status: "D" },
   { item: "postcard", qty: 45, size: { h: 10, w: 15.25, uom: "cm" }, status: "A" },
] );

----------------------------------------

TITLE: MongoDB Collection Sample Data
DESCRIPTION: Example document structure showing various array scenarios in a MongoDB collection.

LANGUAGE: javascript
CODE:
{ "_id" : 1, "item" : "ABC1", "description" : "product 1", colors: [ "blue", "black", "red" ] }
{ "_id" : 2, "item" : "ABC2", "description" : "product 2", colors: [ "purple" ] }
{ "_id" : 3, "item" : "XYZ1", "description" : "product 3", colors: [ ] }
{ "_id" : 4, "item" : "ZZZ1", "description" : "product 4 - missing colors" }
{ "_id" : 5, "item" : "ZZZ2", "description" : "product 5 - colors is string", colors: "blue,red" }

----------------------------------------

TITLE: Adding Replica Set as Shard Example
DESCRIPTION: Practical example of adding a replica set as a shard to a MongoDB cluster using the admin database.

LANGUAGE: javascript
CODE:
use admin
db.runCommand( { addShard: "repl0/mongodb3.example.net:27327"} )

----------------------------------------

TITLE: Equivalent $convert Expression
DESCRIPTION: Demonstrates the equivalent $convert expression that $toUUID uses internally to convert strings to UUID format.

LANGUAGE: javascript
CODE:
{
   $convert: {
      input: <expression>,
      to: {
         type: "binData",
         subtype: 4 // UUID
      },
      format: "uuid"
   }
}

----------------------------------------

TITLE: Inserting Document with Dates into tags Collection in MongoDB
DESCRIPTION: This snippet shows how to insert a document with date fields into the tags collection for demonstrating date comparisons with $min.

LANGUAGE: javascript
CODE:
db.tags.insertOne(
   {
     _id: 1,
     desc: "crafts",
     dateEntered: ISODate("2013-10-01T05:00:00Z"),
     dateExpired: ISODate("2013-10-01T16:38:16Z")
   }
)

----------------------------------------

TITLE: Starting mongod Process on Custom Port
DESCRIPTION: Starts a MongoDB server listening on a custom port specified using the --port option.

LANGUAGE: bash
CODE:
mongod --port 12345

----------------------------------------

TITLE: Unsharding a Collection using MongoDB Command
DESCRIPTION: This command unshards a collection in MongoDB. It moves the collection data to a single shard and updates the metadata. The 'toShard' parameter is optional; if not specified, MongoDB selects the shard with the least data.

LANGUAGE: javascript
CODE:
db.adminCommand({
   unshardCollection : "<database>.<collection>",
   toShard : "<recipient shard ID>"
})

----------------------------------------

TITLE: Including Replication Information in MongoDB Server Status
DESCRIPTION: This example shows how to include all replication (repl) information in the db.serverStatus() output by setting the repl field to 1 in the projection object.

LANGUAGE: javascript
CODE:
db.serverStatus( { repl: 1 } )

----------------------------------------

TITLE: Defining Variable Document in MongoDB JavaScript
DESCRIPTION: Demonstrates the syntax for creating a document with multiple variables in MongoDB. Each variable is assigned an expression, and the structure allows for improved command readability by separating variables from query text.

LANGUAGE: javascript
CODE:
{ 
  <variable_name_1>: <expression_1>,
  ...,
  <variable_name_n>: <expression_n>
}

----------------------------------------

TITLE: Parsing Stringified Extended JSON
DESCRIPTION: Demonstrates parsing a stringified Extended JSON representation back into a BSON object.

LANGUAGE: javascript
CODE:
EJSON.parse( stringified )

----------------------------------------

TITLE: Splitting Chunks Using sh.splitAt() in MongoDB
DESCRIPTION: This snippet shows how to use the sh.splitAt() method to split a chunk in a MongoDB sharded cluster. It splits the chunk at the location of the document matching the query, with the queried document becoming the lower bound of the new chunk.

LANGUAGE: javascript
CODE:
sh.splitAt( "records.people", { "zipcode": "63109" } )

----------------------------------------

TITLE: Example Document Structure for $redact Operation
DESCRIPTION: Demonstrates the structure of a document in the 'forecasts' collection, showing nested fields and tags used for access control.

LANGUAGE: json
CODE:
{
  _id: 1,
  title: "123 Department Report",
  tags: [ "G", "STLW" ],
  year: 2014,
  subsections: [
    {
      subtitle: "Section 1: Overview",
      tags: [ "SI", "G" ],
      content:  "Section 1: This is the content of section 1."
    },
    {
      subtitle: "Section 2: Analysis",
      tags: [ "STLW" ],
      content: "Section 2: This is the content of section 2."
    },
    {
      subtitle: "Section 3: Budgeting",
      tags: [ "TK" ],
      content: {
        text: "Section 3: This is the content of section 3.",
        tags: [ "HCS" ]
      }
    }
  ]
}

----------------------------------------

TITLE: Creating an Index on Materialized Paths in MongoDB
DESCRIPTION: This snippet demonstrates how to create an index on the path field to potentially improve query performance. The effectiveness of the index depends on the specific query patterns used.

LANGUAGE: javascript
CODE:
db.categories.createIndex( { path: 1 } )

----------------------------------------

TITLE: Example removeShardFromZone Command Usage
DESCRIPTION: Demonstrates a practical example of using the removeShardFromZone command to remove the association between shard0000 and the NYC zone.

LANGUAGE: javascript
CODE:
db.adminCommand( { removeShardFromZone : "shard0000" , zone : "NYC" } )

----------------------------------------

TITLE: $where Query with MD5 Hash Comparison
DESCRIPTION: Example of using $where with a JavaScript function to compare an MD5 hash of the name field.

LANGUAGE: bash
CODE:
db.players.find( { $where: function() { 
   return (hex_md5(this.name) == "9b53e667f30cd329dca1ec9e6a83e994") 
} } );

----------------------------------------

TITLE: Unsetting Global Default Read Concern
DESCRIPTION: Example showing how to unset the global default read concern using an empty document.

LANGUAGE: javascript
CODE:
db.adminCommand( {
   "setDefaultRWConcern" : 1, 
   "defaultReadConcern" : {}
} )

----------------------------------------

TITLE: Configuring TaskExecutor Connection Pool Limits in MongoDB
DESCRIPTION: Specifies the configuration options for controlling the maximum or minimum number of outbound connections in TaskExecutor connection pools to config servers. A value of -1 uses the default parameter value, while any positive integer overrides the default limit.

LANGUAGE: yaml
CODE:
-1            # Use default parameter value\npositive_integer # Override default connection limit

----------------------------------------

TITLE: Resetting Windows Firewall
DESCRIPTION: This command resets all Windows Firewall rules to their default state.

LANGUAGE: bat
CODE:
netsh advfirewall reset

----------------------------------------

TITLE: Listing Indexes for MongoDB Collection
DESCRIPTION: This example shows how to list indexes for the 'contacts' collection without specifying a cursor batch size. It demonstrates the basic usage of the listIndexes command.

LANGUAGE: json
CODE:
db.runCommand ( 
  { 
     listIndexes: "contacts"
  } 
)

----------------------------------------

TITLE: Using cursor.pretty() Method in MongoDB
DESCRIPTION: Basic syntax for using the pretty() method with MongoDB find queries. This method can be chained to find() operations to format the output in a more readable way.

LANGUAGE: javascript
CODE:
db.collection.find(<query>).pretty()

----------------------------------------

TITLE: Creating OpenSSL Configuration File for MongoDB Server Certificate
DESCRIPTION: This code snippet shows the content of an OpenSSL configuration file (openssl-test-server.cnf) used for generating test server certificates. It includes settings for certificate properties, extensions, and distinguished name fields.

LANGUAGE: cfg
CODE:
# NOT FOR PRODUCTION USE. OpenSSL configuration file for testing.

[ req ]
default_bits = 4096
default_keyfile = myTestServerCertificateKey.pem    ## The default private key file name.
default_md = sha256
distinguished_name = req_dn
req_extensions = v3_req

[ v3_req ]
subjectKeyIdentifier  = hash
basicConstraints = CA:FALSE
keyUsage = critical, digitalSignature, keyEncipherment
nsComment = "OpenSSL Generated Certificate for TESTING only.  NOT FOR PRODUCTION USE."
extendedKeyUsage  = serverAuth, clientAuth
subjectAltName = @alt_names

[ alt_names ]
DNS.1 =         ##TODO: Enter the DNS names. The DNS names should match the server names.
DNS.2 =         ##TODO: Enter the DNS names. The DNS names should match the server names.
IP.1 =          ##TODO: Enter the IP address.
IP.2 =          ##TODO: Enter the IP address. 

[ req_dn ]
countryName = Country Name (2 letter code)
countryName_default = TestServerCertificateCountry
countryName_min = 2
countryName_max = 2

stateOrProvinceName = State or Province Name (full name)
stateOrProvinceName_default = TestServerCertificateState
stateOrProvinceName_max = 64

localityName = Locality Name (eg, city)
localityName_default = TestServerCertificateLocality
localityName_max = 64

organizationName = Organization Name (eg, company)
organizationName_default = TestServerCertificateOrg
organizationName_max = 64

organizationalUnitName = Organizational Unit Name (eg, section)
organizationalUnitName_default = TestServerCertificateOrgUnit
organizationalUnitName_max = 64

commonName = Common Name (eg, YOUR name)
commonName_max = 64

----------------------------------------

TITLE: Inserting Sample Data into MongoDB Collection
DESCRIPTION: Creates a collection named 'orders' with sample documents containing various data types for the 'zipcode' field.

LANGUAGE: javascript
CODE:
db.orders.insertMany( [
   { _id: 1, item: "apple",  qty: 5, zipcode: 93445 },
   { _id: 2, item: "almonds", qty: 2, zipcode: "12345-0030" },
   { _id: 3, item: "peaches",  qty: 5, zipcode: 12345 },
] )

----------------------------------------

TITLE: Querying MongoDB Using $bitsAllSet with Integer Bitmask
DESCRIPTION: Shows how to use $bitsAllSet with an integer bitmask (50) to find documents where bits at positions 1, 4, and 5 are set to 1 in field 'a'.

LANGUAGE: javascript
CODE:
db.collection.find( { a: { $bitsAllSet: 50 } } )

----------------------------------------

TITLE: Equivalent Group and Sort Operation
DESCRIPTION: Shows the equivalent $group and $sort operations that $sortByCount performs internally.

LANGUAGE: javascript
CODE:
{ $group: { _id: <expression>, count: { $sum: 1 } } },
{ $sort: { count: -1 } }

----------------------------------------

TITLE: ReStructuredText Directives and Substitutions for MongoDB Docs
DESCRIPTION: ReStructuredText markup defining page structure, metadata, and text substitutions for MongoDB Enterprise installation documentation. Includes variable definitions for package names, distribution details, and external links.

LANGUAGE: rst
CODE:
.. _install-mdb-enterprise-ubuntu-tgz:

=======================================================
Install MongoDB Enterprise on Ubuntu using .tgz Tarball
=======================================================

.. default-domain:: mongodb

.. meta::
   :keywords: on-prem

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: twocols

.. |arrow| unicode:: U+27A4
.. |edition| replace:: Enterprise
.. |package-name| replace:: ``{+package-name-enterprise+}``
.. |distro-name| replace:: Ubuntu
.. |package-manager| replace:: ``apt``
.. |executable-name| replace:: ``mongod``
.. |mdb-download-link| replace:: `MongoDB Download Center <https://www.mongodb.com/try/download/enterprise?tck=docs_server>`__

.. include:: /includes/in-dev.rst

.. include:: /includes/rapid-release.rst

----------------------------------------

TITLE: Results of MongoDB $sqrt Aggregation Example
DESCRIPTION: Shows the output of the $sqrt aggregation example, displaying the calculated distances between points for each document in the collection.

LANGUAGE: javascript
CODE:
{ "_id" : 1, "distance" : 5.830951894845301 }
{ "_id" : 2, "distance" : 5 }
{ "_id" : 3, "distance" : 4 }

----------------------------------------

TITLE: Using MongoDB max() Method with Indexes
DESCRIPTION: When using the max() method with an index in MongoDB, you must explicitly specify the index using hint(), unless the query is an equality match on the _id field. This ensures proper index selection for query optimization.

LANGUAGE: javascript
CODE:
cursor.max().hint()

----------------------------------------

TITLE: Identifying Chunk Ranges in MongoDB Sharded Cluster
DESCRIPTION: This command displays the sharding status, including chunk ranges for each sharded collection. It helps identify candidates for chunk merging.

LANGUAGE: javascript
CODE:
sh.status()

----------------------------------------

TITLE: Querying Encrypted Documents in Go
DESCRIPTION: This snippet shows how to query for a document with encrypted fields using Go. It demonstrates queries with both an encrypted client and a non-encrypted client.

LANGUAGE: go
CODE:
// start-find
fmt.Println("Finding a document with regular (non-encrypted) client:")
var regularResult bson.M
err = regularClient.Database("medicalRecords").Collection("patients").FindOne(context.TODO(), bson.D{{"firstName", "Lily"}}).Decode(&regularResult)
if err != nil {
	log.Fatal(err)
}
output, err := json.MarshalIndent(regularResult, "", "    ")
if err != nil {
	log.Fatal(err)
}
fmt.Printf("%s\n", output)

fmt.Println("\nFinding a document with encrypted client:")
var encryptedResult bson.M
err = encryptedClient.Database("medicalRecords").Collection("patients").FindOne(context.TODO(), bson.D{{"firstName", "Lily"}}).Decode(&encryptedResult)
if err != nil {
	log.Fatal(err)
}
output, err = json.MarshalIndent(encryptedResult, "", "    ")
if err != nil {
	log.Fatal(err)
}
fmt.Printf("%s\n", output)
// end-find

----------------------------------------

TITLE: Calculating Inverse Hyperbolic Cosine in Radians with MongoDB
DESCRIPTION: Demonstrates using $acosh to calculate the inverse hyperbolic cosine in radians and add it to the document.

LANGUAGE: javascript
CODE:
db.trigonometry.aggregate([
  { 
    $addFields : {
      "y-coordinate" : {
        $acosh : "$x-coordinate"
      }
    }
  }
])

----------------------------------------

TITLE: Updating Package Database with apt-get
DESCRIPTION: Command to refresh the local package database on Debian-based systems using apt-get. This ensures the package lists are up to date before installing or upgrading software.

LANGUAGE: bash
CODE:
sudo apt-get update

----------------------------------------

TITLE: Query MongoDB Collection Using Shell
DESCRIPTION: Basic MongoDB shell command to find all documents in a collection using an empty query criteria.

LANGUAGE: javascript
CODE:
db.inventory.find( {} )

----------------------------------------

TITLE: Query MongoDB Collection Using Shell
DESCRIPTION: Basic MongoDB shell command to find all documents in a collection using an empty query criteria.

LANGUAGE: javascript
CODE:
db.inventory.find( {} )

----------------------------------------

TITLE: Inserting Document into scores Collection in MongoDB
DESCRIPTION: This snippet demonstrates how to insert a document with highScore and lowScore fields into the scores collection.

LANGUAGE: javascript
CODE:
db.scores.insertOne( { _id: 1, highScore: 800, lowScore: 200 } )

----------------------------------------

TITLE: Basic MongoDB Document Structure Example
DESCRIPTION: Example document structure from a pets collection showing basic MongoDB document format with scalar fields.

LANGUAGE: javascript
CODE:
{
   "name": "Whiskers",
   "color": "white",
   "age": 10,
   "adoptable": true
}

----------------------------------------

TITLE: Unsupported $eq Expression in MongoDB Aggregation with Encrypted Fields
DESCRIPTION: This example shows an unsupported use of the $eq expression in a MongoDB aggregation pipeline when working with encrypted fields. The expression creates a new field referencing an encrypted field and then operates on that new field in the same expression.

LANGUAGE: javascript
CODE:
{
  $eq : [
    {"newField" : "$encryptedField"},
    {"newField" : "value"
  ]
}

----------------------------------------

TITLE: Example Config Shard Status With Tags
DESCRIPTION: Example output when checking config shard status on a cluster with an enabled config shard and associated tags.

LANGUAGE: javascript
CODE:
{ 
  enabled: true, 
  host: 'shard3/localhost:27017',
  tags: ['tag1', 'tag2'] 
}

----------------------------------------

TITLE: Adding a Shard with sh.addShard() in MongoDB
DESCRIPTION: This snippet demonstrates the prototype form of the sh.addShard() method. It takes a string parameter specifying the replica set name, hostname, and port of at least one member of the shard's replica set.

LANGUAGE: javascript
CODE:
sh.addShard("<replica_set>/<hostname><:port>")

----------------------------------------

TITLE: Using $ne with Arrays in MongoDB
DESCRIPTION: Example of using $ne to query documents where the type array differs from a specified array.

LANGUAGE: javascript
CODE:
db.inventory.find( { type: { $ne: [ "hardware", "fasteners" ] } } )

----------------------------------------

TITLE: Querying Collection Size in MongoDB Shell
DESCRIPTION: A MongoDB shell method that returns the size of a collection in bytes. This value represents the raw size and is not affected by data compression settings. Compatible with MongoDB Atlas and on-premises deployments.

LANGUAGE: javascript
CODE:
db.collection.dataSize()

----------------------------------------

TITLE: Inserting Documents with Coordinate Pairs in MongoDB
DESCRIPTION: This snippet demonstrates inserting multiple documents into a 'contacts' collection, each containing a name, phone number, and address field with coordinate pairs. This example is used to illustrate limitations of 2d indexes for exact matches on flat surfaces.

LANGUAGE: javascript
CODE:
db.contacts.insertMany( [
   {
      name: "Evander Otylia",
      phone: "202-555-0193",
      address: [ 55.5, 42.3 ]
   },
   {
      name: "Georgine Lestaw",
      phone: "714-555-0107",
      address: [ -74, 44.74 ]
   }
] )

----------------------------------------

TITLE: ReStructuredText Variable Declarations
DESCRIPTION: Defines reusable text variables and unicode characters for the documentation using ReStructuredText substitutions. These variables are used throughout the document for consistent terminology and links.

LANGUAGE: rst
CODE:
.. |arrow| unicode:: U+27A4
.. |edition| replace:: Community
.. |package-name| replace:: ``{+package-name-org+}``
.. |distro-name| replace:: Debian
.. |package-manager| replace:: ``apt``
.. |executable-name| replace:: ``mongod``
.. |mdb-download-link| replace:: `MongoDB Download Center <https://www.mongodb.com/try/download/community?tck=docs_server>`__

----------------------------------------

TITLE: Using $hour in MongoDB Aggregation Pipeline
DESCRIPTION: Shows how to use the $hour operator along with other date operators in a $project stage of an aggregation pipeline. It extracts various components of a date field.

LANGUAGE: javascript
CODE:
db.sales.aggregate(
   [
     {
       $project:
         {
           year: { $year: "$date" },
           month: { $month: "$date" },
           day: { $dayOfMonth: "$date" },
           hour: { $hour: "$date" },
           minutes: { $minute: "$date" },
           seconds: { $second: "$date" },
           milliseconds: { $millisecond: "$date" },
           dayOfYear: { $dayOfYear: "$date" },
           dayOfWeek: { $dayOfWeek: "$date" }
         }
     }
   ]
)

----------------------------------------

TITLE: Finalize Function Structure
DESCRIPTION: Structure of a finalize function that processes the output of reduce operations. Receives a key and reducedValue as arguments.

LANGUAGE: javascript
CODE:
function(key, reducedValue) {
   ...
   return modifiedObject;
}

----------------------------------------

TITLE: Defining $reduce Syntax in MongoDB Aggregation
DESCRIPTION: Shows the basic syntax structure for the $reduce operator in MongoDB aggregation pipelines. It includes the input array, initial value, and the 'in' expression.

LANGUAGE: javascript
CODE:
{
    $reduce: {
        input: <array>,
        initialValue: <expression>,
        in: <expression>
    }
}

----------------------------------------

TITLE: Retrieving Query Settings with Debug Information
DESCRIPTION: Shows how to retrieve query settings with debug information enabled using the $querySettings aggregation stage.

LANGUAGE: javascript
CODE:
db.aggregate( [ {
   $querySettings: { showDebugQueryShape: true }
} ] )

----------------------------------------

TITLE: MongoDB Global Index Operation Document Structure
DESCRIPTION: Example document structure showing the output of currentOp command during global index operations. Includes operation metadata, state information, and various performance metrics such as document counts, byte counts, and timing estimates.

LANGUAGE: javascript
CODE:
{
       type: "op",
       desc: "GlobalIndex{Donor, Recipient, Coordinator}Service <globalIndexUUID}",
       op: "command",
       ns: "<database>.<collection>",
       originatingCommand: {
           createIndexes: "<database>.<collection>",
           key: <indexkeypattern>,
           unique: <boolean>,
           <Additional createIndexes options>
       },
      {donor, coordinator, recipient}State : "<service state>",
      approxDocumentsToScan: NumberLong(<count>),
      approxBytesToScan: NumberLong(<count>),
      bytesWrittenFromScan: NumberLong(<count>),
      countWritesToStashCollections: NumberLong(<count>),
      countWritesDuringCriticalSection : NumberLong(<count>),
      countReadsDuringCriticalSection: NumberLong(<count>),
      keysWrittenFromScan: NumberLong(<count>),
      remainingOperationTimeEstimatedSecs: NumberLong(<count>),
      allShardsLowestRemainingOperationTimeEstimatedSecs: NumberLong(<estimate>),
      allShardsHighestRemainingOperationTimeEstimatedSecs: NumberLong(<estimate>),
      totalCopyTimeElapsedSecs: NumberLong(<count>),
      totalCriticalSectionTimeElapsedSecs : NumberLong(<count>),
      totalOperationTimeElapsedSecs: NumberLong(<count>),
   }

----------------------------------------

TITLE: Opening sysctl.conf File for Editing in Linux
DESCRIPTION: This snippet demonstrates how to open the /etc/sysctl.conf file for editing using the vi text editor. This file is used to make permanent changes to system control parameters.

LANGUAGE: bash
CODE:
vi /etc/sysctl.conf

----------------------------------------

TITLE: Handling Multiple fsyncLock Calls in MongoDB
DESCRIPTION: This example shows how to handle a situation where db.fsyncLock() has been called multiple times. It demonstrates calling db.fsyncUnlock() twice to fully unlock the server for write operations.

LANGUAGE: javascript
CODE:
db.fsyncUnlock()

LANGUAGE: javascript
CODE:
{ "info" : "fsyncUnlock completed", "lockCount" : NumberLong(1), "ok" : 1 }

LANGUAGE: javascript
CODE:
db.fsyncUnlock()

LANGUAGE: javascript
CODE:
{ "info" : "fsyncUnlock completed", "lockCount" : NumberLong(0), "ok" : 1 }

----------------------------------------

TITLE: Replacing MongoDB Shell with OpenSSL 3 Version
DESCRIPTION: Commands to remove existing MongoDB Shell and install version that uses system's OpenSSL 3

LANGUAGE: sh
CODE:
sudo yum remove -y mongodb-mongosh && sudo yum install -y mongodb-mongosh-shared-openssl3

----------------------------------------

TITLE: Filtering Arrays with Index Preservation using $zip
DESCRIPTION: Complex aggregation pipeline that combines $zip with $filter to filter array elements while preserving their original indices.

LANGUAGE: javascript
CODE:
db.pages.aggregate([{
  $project: {
    _id: false,
    pages: {
      $filter: {
        input: {
          $zip: {
            inputs: [ "$pages", { $range: [0, { $size: "$pages" }] } ]
          }
        },
        as: "pageWithIndex",
        cond: {
          $let: {
            vars: {
              page: { $arrayElemAt: [ "$$pageWithIndex", 0 ] }
            },
            in: { $gte: [ "$$page.reviews", 1 ] }
          }
        }
      }
    }
  }
}])

----------------------------------------

TITLE: Defining a GeoJSON MultiPolygon in MongoDB
DESCRIPTION: Specifies a GeoJSON MultiPolygon object with an array of Polygon coordinate arrays. Used for representing multiple polygonal areas. Requires 2dsphere index version 2 or later.

LANGUAGE: javascript
CODE:
{
  type: "MultiPolygon",
  coordinates: [
     [ [ [ -73.958, 40.8003 ], [ -73.9498, 40.7968 ], [ -73.9737, 40.7648 ], [ -73.9814, 40.7681 ], [ -73.958, 40.8003 ] ] ],
     [ [ [ -73.958, 40.8003 ], [ -73.9498, 40.7968 ], [ -73.9737, 40.7648 ], [ -73.958, 40.8003 ] ] ]
  ]
}

----------------------------------------

TITLE: Slicing Arrays from Specific Position in MongoDB Aggregation
DESCRIPTION: This snippet shows the syntax for using $slice to return elements from a specified position in an array during MongoDB aggregation.

LANGUAGE: javascript
CODE:
{ $slice: [ <array>, <position>, <n> ] }

----------------------------------------

TITLE: Client Metadata Audit Message
DESCRIPTION: Detailed client connection metadata including driver, OS, and application information.

LANGUAGE: none
CODE:
{
   localEndpoint : {
      ip : <IP address of running instance>,
      port : <port of running instance>
   } || {
      unix : <MongoDB socket file path if connecting through a Unix domain socket>
   },
   clientMetadata : {
      driver : {
         name : <client driver name>,
         version : <client driver version>
      },
      os : {
         type : <client operating system type>,
         name : <client operating system name>,
         architecture : <client operating system architecture>,
         version : <client operating system version>
      },
      platform : <client platform name>,
      application : {
         name : <client application name>
      }
   }
}

----------------------------------------

TITLE: Querying Non-existent Lower Case Database in MongoDB
DESCRIPTION: This snippet demonstrates querying a non-existent 'salesdb' database. The operation doesn't return results or create a new database, showcasing MongoDB's case sensitivity in database names.

LANGUAGE: javascript
CODE:
lowerCase.retail.find()

----------------------------------------

TITLE: Configuring Config Shard as Dedicated Config Server in MongoDB
DESCRIPTION: This command transitions a config shard to run as a dedicated config server using the transitionToDedicatedConfigServer command.

LANGUAGE: javascript
CODE:
db.adminCommand( { 
   transitionToDedicatedConfigServer: 1
} )

----------------------------------------

TITLE: MongoDB abortReshardCollection Command Syntax
DESCRIPTION: Basic syntax for the abortReshardCollection command that is run through the admin database. Takes a database.collection string parameter identifying the collection being resharded.

LANGUAGE: javascript
CODE:
db.adminCommand(
   {
     abortReshardCollection: "<database>.<collection>"
   } 
)

----------------------------------------

TITLE: Creating a BSONRegExp Object in MongoDB
DESCRIPTION: This snippet demonstrates how to create a BSONRegExp object using the BSONRegExp() constructor. It specifies a pattern and a flag for the regular expression.

LANGUAGE: javascript
CODE:
var bsonRegExp = BSONRegExp("(?-i)AA_", "i")

----------------------------------------

TITLE: Creating Initial Collection Example
DESCRIPTION: Example showing how to create a students collection with an initial document containing scores array.

LANGUAGE: javascript
CODE:
db.students.insertOne( { _id: 1, scores: [ 44, 78, 38, 80 ] } )

----------------------------------------

TITLE: Starting MongoDB with Journal Compression Options
DESCRIPTION: Command to start MongoDB with specific journal compression settings

LANGUAGE: bash
CODE:
mongod --wiredTigerJournalCompressor <differentCompressor|none>  ...

----------------------------------------

TITLE: DBRef Document Structure Example
DESCRIPTION: Example showing the structure of a document containing a DBRef with optional fields, demonstrating the standard format for database references.

LANGUAGE: javascript
CODE:
{
  "_id" : ObjectId("5126bbf64aed4daf9e2ab771"),
  "creator" : {
                  "$ref" : "creators",
                  "$id" : ObjectId("5126bc054aed4daf9e2ab772"),
                  "$db" : "users",
                  "extraField" : "anything"
               }
}

----------------------------------------

TITLE: Sample Output of balancerCollectionStatus Command
DESCRIPTION: Example of the JSON document returned by the balancerCollectionStatus command, showing fields like chunkSize, balancerCompliant, and firstComplianceViolation.

LANGUAGE: json
CODE:
{
   "chunkSize": Long("128"),
   "balancerCompliant" : false,
   "firstComplianceViolation" : "chunksImbalance",
   "ok" : 1,
   "operationTime" : Timestamp(1583192967, 16),
   "$clusterTime" : {
      "clusterTime" : Timestamp(1583192967, 16),
      "signature" : {
         "hash" : BinData(0,"AAAAAAAAAAAAAAAAAAAAAAAAAAA="),
         "keyId" : NumberLong(0)
      }
   }
}

----------------------------------------

TITLE: Creating Text Index in MongoDB
DESCRIPTION: Creates a text index on the 'title' field of the 'articles' collection.

LANGUAGE: javascript
CODE:
db.articles.createIndex( { title: "text"} )

----------------------------------------

TITLE: Sample Data Insertion for Bakery Sales
DESCRIPTION: Inserting sample bakery sales data into MongoDB collection with dates, items, quantities, and amounts.

LANGUAGE: javascript
CODE:
db.bakesales.insertMany( [
  { date: new ISODate("2018-12-01"), item: "Cake - Chocolate", quantity: 2, amount: new NumberDecimal("60") },
  { date: new ISODate("2018-12-02"), item: "Cake - Peanut Butter", quantity: 5, amount: new NumberDecimal("90") },
  // ... additional entries
] );

----------------------------------------

TITLE: Granting ClusterManager Role in MongoDB using JavaScript
DESCRIPTION: Shows how to use the db.grantRolesToUser() method to assign the clusterManager role to a user named testUser. This operation grants cluster-wide administrative capabilities to the specified user.

LANGUAGE: javascript
CODE:
db.grantRolesToUser(
   "testUser",
   [ "clusterManager" ]
)

----------------------------------------

TITLE: Setting Persistent TCP Keepalive Time
DESCRIPTION: Configuration line to add to /etc/sysctl.conf for persistent TCP keepalive time settings across system reboots. Note that values greater than 300 seconds will be overridden to 300 seconds for MongoDB processes.

LANGUAGE: bash
CODE:
net.ipv4.tcp_keepalive_time = <value>

----------------------------------------

TITLE: Force Step Down Command
DESCRIPTION: Command to force the current primary to step down for 24 hours, allowing another member to become primary.

LANGUAGE: javascript
CODE:
db.adminCommand({replSetStepDown: 86400, force: 1})

----------------------------------------

TITLE: MongoDB Query for Duplicate Resolution
DESCRIPTION: Example query to find documents by userid, demonstrating how to retrieve potential duplicates across datacenters for resolution.

LANGUAGE: javascript
CODE:
db.collection.find( { "userid" : 123 } )

----------------------------------------

TITLE: Invalid Wildcard Index with Projection in MongoDB
DESCRIPTION: This snippet illustrates an invalid wildcard index definition where wildcardProjection is used with a specific field path wildcard, which is not allowed in MongoDB.

LANGUAGE: javascript
CODE:
{
    key: { "someFields.$**": 1 },
    name: "invalid_index",
    wildcardProjection: {
       "someFields.name": 1,
       "otherFields.values": 1
    }
}

----------------------------------------

TITLE: Stream Processor Stop Example
DESCRIPTION: Demonstrates stopping a specific stream processor named 'solarDemo'. The processor must be in a running state for this command to succeed.

LANGUAGE: shell
CODE:
sp.solarDemo.stop()

----------------------------------------

TITLE: Including RST Parameter Documentation
DESCRIPTION: RST directives for defining and including documentation about the ShardingTaskExecutorPoolMinSize parameter for config servers

LANGUAGE: rst
CODE:
.. |parameter| replace:: :parameter:`ShardingTaskExecutorPoolMinSize`
.. |maximum-or-minimum| replace:: minimum

.. include:: /includes/ShardingTaskExecutorPoolSizeForConfigServers-parameter.rst

----------------------------------------

TITLE: Updating Medical Records with Role-Based Access in MongoDB
DESCRIPTION: Performs a findAndModify operation on a medical collection with role-based access control. Updates patient diagnosis and credit card information for 'Mary Smith', but only allows users with the 'Provider' role to perform the update.

LANGUAGE: javascript
CODE:
db.medical.findAndModify( {
   query:
      { $and: [
         {
            // Only update the document for Mary Smith
            patientName: { $eq: "Mary Smith" }
         },
         {
            // User must have the Provider role to perform the update
            $expr: { $ne: [ {
               $setIntersection: [ [ "Provider" ], "$$USER_ROLES.role" ]
            }, [] ] }
         }
      ]
   },
   // Update document
   update: {
      patientName: "Mary Smith",
      diagnosisCode: "ACH 03",
      creditCard: "6541-7534-9637-3456"
   }
} )

----------------------------------------

TITLE: Metadata Validation Example
DESCRIPTION: Example demonstrating how to validate collection metadata only.

LANGUAGE: javascript
CODE:
db.runCommand( { validate: "myCollection", metadata: true } )

----------------------------------------

TITLE: Creating MongoDB Index Basic Syntax
DESCRIPTION: Basic syntax template for creating an index on a collection field in MongoDB.

LANGUAGE: javascript
CODE:
db.<collection>.createIndex( { <field>: <sortOrder> } )

----------------------------------------

TITLE: Basic $map Operator Syntax in MongoDB
DESCRIPTION: Demonstrates the basic syntax structure of the $map operator with its required fields: input, as (optional), and in.

LANGUAGE: javascript
CODE:
{ $map: { input: <expression>, as: <string>, in: <expression> } }

----------------------------------------

TITLE: Navigating to MongoDB bin Directory on Windows
DESCRIPTION: Changes the current directory to the bin folder under the MongoDB installation directory on Windows systems.

LANGUAGE: powershell
CODE:
cd <installDirectory>\bin

----------------------------------------

TITLE: Navigating to MongoDB bin Directory on Windows
DESCRIPTION: Changes the current directory to the bin folder under the MongoDB installation directory on Windows systems.

LANGUAGE: powershell
CODE:
cd <installDirectory>\bin

----------------------------------------

TITLE: Configuring MongoDB Health Monitoring Intensities
DESCRIPTION: Example configuration for setting health monitoring intensity levels for different facets in a MongoDB sharded cluster. Defines monitoring levels as critical, warning, or info.

LANGUAGE: yaml
CODE:
healthMonitoringIntensities:
  balancer: critical
  config: warning
  mongos: info
  shard: warning

----------------------------------------

TITLE: Syntax for $unsetField Operator in MongoDB Aggregation
DESCRIPTION: Demonstrates the basic syntax for using the $unsetField operator in MongoDB aggregation pipelines. It specifies the field to remove and the input object to operate on.

LANGUAGE: javascript
CODE:
{ 
   $unsetField: {
      field: <String>,
      input: <Object>,
   }
}

----------------------------------------

TITLE: Window Function Pipeline Process in MongoDB
DESCRIPTION: The $setWindowFields stage processes documents by recomputing the window set, calculating values for all documents in the set, and returning a single value per document. This is particularly useful for calculating rolling statistics in time series data. The input must be a field name, not an array.

LANGUAGE: mongodb
CODE:
$setWindowFields

----------------------------------------

TITLE: Creating First Year Students View
DESCRIPTION: Creates a view that filters student records to show only first-year students using a $match pipeline stage.

LANGUAGE: javascript
CODE:
db.createView(
   "firstYears",
   "students",
   [ { $match: { year: 1 } } ]
)

----------------------------------------

TITLE: MongoDB dropAllUsersFromDatabase Command Example
DESCRIPTION: Example showing how to drop all users from the 'products' database with majority write concern, followed by the expected response showing number of users removed.

LANGUAGE: javascript
CODE:
use products
db.runCommand( { dropAllUsersFromDatabase: 1, writeConcern: { w: "majority" } } )

LANGUAGE: javascript
CODE:
{ "n" : 12, "ok" : 1 }

----------------------------------------

TITLE: Querying MongoDB Collection in JavaScript Shell
DESCRIPTION: This snippet demonstrates how to query a MongoDB collection named 'inventory' to find documents where the 'item' field is equal to 'canvas' using the MongoDB shell.

LANGUAGE: javascript
CODE:
db.inventory.find( { item: "canvas" } )

----------------------------------------

TITLE: Inserting Sample Data for pH Calculation
DESCRIPTION: Creates a collection named 'samples' with H3O concentration values for pH calculation demonstration.

LANGUAGE: javascript
CODE:
db.samples.insertMany(
   [
      { _id: 1, H3O: 0.0025 },
      { _id: 2, H3O: 0.001 },
      { _id: 3, H3O: 0.02 }
   ]
)

----------------------------------------

TITLE: Extracting MongoDB Files from Tarball on macOS
DESCRIPTION: This command extracts the contents of the downloaded MongoDB tarball. The {+version+} placeholder should be replaced with the actual version number of MongoDB being installed.

LANGUAGE: sh
CODE:
tar -zxvf mongodb-macos-x86_64-{+version+}.tgz

----------------------------------------

TITLE: Querying TcpMaxDataRetransmissions Registry Setting in Windows
DESCRIPTION: PowerShell command to view the current TcpMaxDataRetransmissions setting from the Windows registry. The default value if not set is 5 retries.

LANGUAGE: powershell
CODE:
reg query HKLM\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters /v TcpMaxDataRetransmissions

----------------------------------------

TITLE: Querying Arrays by Index in MongoDB Compass
DESCRIPTION: Filter syntax for MongoDB Compass GUI to query documents where the second element of dim_cm array is greater than 25

LANGUAGE: javascript
CODE:
{ "dim_cm.1": { $gt: 25 } }

----------------------------------------

TITLE: Refining Shard Key using refineCollectionShardKey Command in MongoDB
DESCRIPTION: This snippet demonstrates how to use the refineCollectionShardKey command to add a suffix field to an existing shard key. It refines the shard key of the 'orders' collection in the 'test' database from { customer_id: 1 } to { customer_id: 1, order_id: 1 }.

LANGUAGE: javascript
CODE:
db.adminCommand( {
   refineCollectionShardKey: "test.orders",
   key: { customer_id: 1, order_id: 1 }
} )

----------------------------------------

TITLE: Complex $all Query with $elemMatch
DESCRIPTION: Advanced example showing how to use $all with $elemMatch to query arrays of documents with specific criteria.

LANGUAGE: javascript
CODE:
db.inventory.find( {
                        qty: { $all: [
                                       { "$elemMatch" : { size: "M", num: { $gt: 50} } },
                                       { "$elemMatch" : { num : 100, color: "green" } }
                                     ] }
                      } )

----------------------------------------

TITLE: Verifying Replica Set Configuration in MongoDB
DESCRIPTION: Use the rs.conf() method in mongosh to verify the current configuration of the replica set, including member status.

LANGUAGE: javascript
CODE:
rs.conf()

----------------------------------------

TITLE: Starting MongoDB Instance with Replica Set Configuration
DESCRIPTION: Bash command to start a MongoDB instance with normal configuration, including replica set name and port.

LANGUAGE: bash
CODE:
mongod --dbpath /data/db1/ --port 27017 --replSet rs0 --bind_ip localhost,<hostname(s)|ip address(es)>

----------------------------------------

TITLE: MongoDB Array Comparison Examples
DESCRIPTION: Examples demonstrating various array comparison scenarios in MongoDB, including ascending/descending sorts, single element arrays vs scalar values, empty arrays, and nested arrays.

LANGUAGE: mongodb
CODE:
[ 1 ]  // One element array
2      // Non-array value
[ ]    // Empty array
[[1, 2], [3, 4]]  // Nested array

----------------------------------------

TITLE: Checking Feature Compatibility Version
DESCRIPTION: Use this command to check the feature compatibility version before upgrading to MongoDB 8.0.

LANGUAGE: javascript
CODE:
db.adminCommand( { getParameter: 1, featureCompatibilityVersion: 1 } )

----------------------------------------

TITLE: Example Query on Legacy Coordinates with $near in MongoDB
DESCRIPTION: This example demonstrates a query using $near with legacy coordinates. It finds documents within 0.10 radians of the specified point, sorted from nearest to farthest.

LANGUAGE: javascript
CODE:
db.legacy2d.find(
   { location : { $near : [ -73.9667, 40.78 ], $maxDistance: 0.10 } }
)

----------------------------------------

TITLE: Basic $anyElementTrue Syntax in MongoDB
DESCRIPTION: Demonstrates the basic syntax for using the $anyElementTrue operator in MongoDB aggregation pipeline.

LANGUAGE: javascript
CODE:
{ $anyElementTrue: [ <expression> ] }

----------------------------------------

TITLE: Displaying MongoDB Oplog Information Output in Plain Text
DESCRIPTION: This snippet shows the sample output from the oplog information method run on the primary MongoDB instance. It displays key metrics about the oplog size, duration, and timestamps.

LANGUAGE: none
CODE:
configured oplog size:   192MB
log length start to end: 65422secs (18.17hrs)
oplog first event time:  Mon Jun 23 2014 17:47:18 GMT-0400 (EDT)
oplog last event time:   Tue Jun 24 2014 11:57:40 GMT-0400 (EDT)
now:                     Thu Jun 26 2014 14:24:39 GMT-0400 (EDT)

----------------------------------------

TITLE: MongoDB buildInfo Command Output Format
DESCRIPTION: Example output structure returned by the buildInfo command showing all possible fields and their data types.

LANGUAGE: javascript
CODE:
{
  "version" : "<string>",
  "gitVersion" : "<string>",
  "sysInfo" : "<string>",
  "loaderFlags" : "<string>",
  "compilerFlags" : "<string>",
  "allocator" : "<string>",
  "versionArray" : [ <num>, <num>, <...> ],
  "openssl" : <document>,
  "javascriptEngine" : "<string>",
  "bits" : <num>,
  "debug" : <boolean>,
  "maxBsonObjectSize" : <num>,
  "storageEngines" : [ "<string>", "<string>", "<...>" ],
  "ok" : <num>
}

----------------------------------------

TITLE: MongoDB $in Operator Aggregation Example
DESCRIPTION: Aggregation pipeline example that uses $in operator to check for 'bananas' in the in_stock array of each document.

LANGUAGE: javascript
CODE:
db.fruit.aggregate([
  {
    $project: {
      "store location" : "$location",
      "has bananas" : {
        $in: [ "bananas", "$in_stock" ]
      }
    }
  }
])

----------------------------------------

TITLE: Creating Multiple Search Indexes
DESCRIPTION: Example showing how to create multiple search indexes in a single command with different configurations.

LANGUAGE: javascript
CODE:
db.runCommand( {
   createSearchIndexes: "products",
   indexes: [
      {
         name: "searchIndex02",
         definition: {
            mappings: {
               fields: {
                  title: {
                     type: "string",
                     analyzer: "lucene.simple"
                  }
               }
            }
         }
      },
      {
         name: "searchIndex03",
         definition:
            {
               mappings: { dynamic: true }
            }
      }
   ]
} )

----------------------------------------

TITLE: Specifying UTC Offsets in MongoDB
DESCRIPTION: Examples of valid UTC Offset expressions for use in MongoDB timezone configurations. These offsets represent the difference from Coordinated Universal Time (UTC) in various formats.

LANGUAGE: bash
CODE:
+/-[hh]:[mm], e.g. "+04:45"
+/-[hh][mm], e.g. "-0530"
+/-[hh], e.g. "+03"

----------------------------------------

TITLE: Query Active Operations on Specific Database
DESCRIPTION: Example showing how to find operations running longer than 3 seconds on a specific database

LANGUAGE: javascript
CODE:
db.adminCommand(
   {
     currentOp: true,
     "active" : true,
     "secs_running" : { "$gt" : 3 },
     "ns" : /^db1\./
   }
)

----------------------------------------

TITLE: Merging Chunks on Shard1 in MongoDB
DESCRIPTION: Command to merge all mergeable chunks on Shard1, which will combine chunks E-F into a single chunk. This operation works on non-jumbo chunks with empty history.

LANGUAGE: javascript
CODE:
db.adminCommand( { mergeAllChunksOnShard: "db.coll", shard: "Shard1" } )

----------------------------------------

TITLE: Example of $bucketAuto Usage in MongoDB Aggregation
DESCRIPTION: Demonstrates how to use $bucketAuto to group documents from an 'artwork' collection into four buckets based on price.

LANGUAGE: javascript
CODE:
db.artwork.aggregate( [ 
  { 
    $bucketAuto: { 
        groupBy: "$price",
        buckets: 4
    }
  }
] )

----------------------------------------

TITLE: MongoDB Aggregation with $maxN Example
DESCRIPTION: Demonstrates using $maxN in an aggregation pipeline to find the two highest scores for each player using $addFields.

LANGUAGE: javascript
CODE:
db.scores.aggregate([
   { $addFields: { maxScores: { $maxN: { n: 2, input: "$score" } } } }
])

----------------------------------------

TITLE: ReStructuredText Documentation Structure
DESCRIPTION: Defines the structure and navigation for MongoDB Queryable Encryption reference documentation using reStructuredText directives and formatting.

LANGUAGE: rst
CODE:
.. _qe-reference:

=========
Reference
=========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Read the following sections to learn about components
of {+qe+}:

- :ref:`qe-reference-automatic-encryption-supported-operations`
- :ref:`qe-reference-mongo-client`

.. toctree::
   :titlesonly:

   Supported Operations </core/queryable-encryption/reference/supported-operations>
   MongoClient Options </core/queryable-encryption/reference/qe-options-clients>

----------------------------------------

TITLE: Final MongoDB TLS Configuration
DESCRIPTION: Final configuration using only extension values with DN override removed

LANGUAGE: yaml
CODE:
net:
  tls:
    mode:               requireTLS
    certificateKeyFile: /etc/mycerts/mongodb-server1.pem
    CAFile:             /etc/mycerts/ca.pem
    clusterFile:        /etc/mycerts/mongodb-cluster1.pem
    clusterCAFile:      /etc/mycerts/ca.pem
    clusterAuthX509:
       extensionValue:  mongodb://example.mongodb.net
security:
  clusterAuthMode: x509

----------------------------------------

TITLE: Executing mergeChunks Command with Compound Shard Key in MongoDB
DESCRIPTION: Example of using the mergeChunks command with a compound shard key. The full shard key must be included in the bounds specification.

LANGUAGE: javascript
CODE:
db.adminCommand( 
   { 
     mergeChunks: <namespace>,
     bounds: [ 
       { x: <minValue>, y: <minValue> },
       { x: <maxValue>, y: <maxValue> } 
     ] 
   } 
 )

----------------------------------------

TITLE: Listing Available Databases in MongoDB using Mongo.getDBs()
DESCRIPTION: This snippet demonstrates how to use the Mongo.getDBs() method to list all available databases and their metadata for the local MongoDB instance. It returns information such as database names, sizes, and other metadata.

LANGUAGE: javascript
CODE:
db.getMongo().getDBs()

LANGUAGE: javascript
CODE:
{
 databases: [
   { name: 'admin', sizeOnDisk: Long("225280"), empty: false },
   { name: 'config', sizeOnDisk: Long("212992"), empty: false },
   { name: 'local', sizeOnDisk: Long("2400256"), empty: false },
   { name: 'test', sizeOnDisk: Long("303104"), empty: false }
 ],
 totalSize: Long("3141632"),
 totalSizeMb: Long("2"),
 ok: 1,
 '$clusterTime': {
   clusterTime: Timestamp({ t: 1640186473, i: 1 }),
   signature: {
     hash: Binary(Buffer.from("0000000000000000000000000000000000000000", "hex"), 0),
     keyId: Long("0")
   }
 },
 operationTime: Timestamp({ t: 1640186473, i: 1 })
}

----------------------------------------

TITLE: Map Function Basic Structure
DESCRIPTION: Basic structure of a map function that emits key-value pairs. The function runs for each document and can emit zero or more times.

LANGUAGE: javascript
CODE:
function() {
   ...
   emit(key, value);
}

----------------------------------------

TITLE: Sharding a MongoDB Collection using sh.shardCollection()
DESCRIPTION: This snippet demonstrates how to use the sh.shardCollection() method to shard a MongoDB collection. It requires specifying the full namespace of the collection and the shard key.

LANGUAGE: javascript
CODE:
sh.shardCollection(<namespace>, <key>) // Optional parameters omitted

----------------------------------------

TITLE: Query Active Operations with No Yields
DESCRIPTION: Example showing how to find active operations that have never yielded.

LANGUAGE: javascript
CODE:
db.currentOp(
   {
     "active" : true,
     "numYields" : 0,
     "waitingForLock" : false
   }
)

----------------------------------------

TITLE: Defining db.aggregate() Method in MongoDB
DESCRIPTION: Demonstrates the basic syntax for the db.aggregate() method, which runs a specified admin/diagnostic pipeline that doesn't require an underlying collection.

LANGUAGE: javascript
CODE:
db.aggregate( [ <pipeline> ], { <options> } )

----------------------------------------

TITLE: Running dbHash for Specific Collections in MongoDB JavaScript
DESCRIPTION: This example demonstrates how to use the dbHash command to return hash values for specific collections ('inventory' and 'orders') in the 'test' database.

LANGUAGE: javascript
CODE:
use test
db.runCommand( { dbHash: 1, collections: [ "inventory", "orders" ] } )

----------------------------------------

TITLE: MongoDB $sum in $project Stage
DESCRIPTION: Shows how to use $sum in a $project stage to calculate totals from arrays and multiple fields.

LANGUAGE: javascript
CODE:
db.students.aggregate([
   {
     $project: {
       quizTotal: { $sum: "$quizzes"},
       labTotal: { $sum: "$labs" },
       examTotal: { $sum: [ "$final", "$midterm" ] }
     }
   }
])

----------------------------------------

TITLE: Handling Exceptions in MongoDB Aggregation (JavaScript)
DESCRIPTION: When using the db.collection.aggregate() method in MongoDB, it's important to note that if an error occurs during the aggregation operation, the method will throw an exception. This behavior allows for error handling and debugging in MongoDB aggregation pipelines.

LANGUAGE: javascript
CODE:
try {
  db.collection.aggregate([ /* aggregation pipeline */ ]);
} catch (error) {
  // Handle the exception
  console.error("An error occurred during aggregation:", error);
}

----------------------------------------

TITLE: Inserting Store Inventory Data in MongoDB
DESCRIPTION: Example showing how to insert sample store inventory data containing items with prices.

LANGUAGE: javascript
CODE:
db.storeInventory.insertMany( [
   { "_id" : 1, "item" : "napkins", price: "$2.50" },
   { "_id" : 2, "item" : "coffee", price: "1" },
   { "_id" : 3, "item" : "soap", price: "$1" }
] )

----------------------------------------

TITLE: Installing SELinux Policy Compiler
DESCRIPTION: Command to install the checkpolicy package required for compiling custom SELinux policies.

LANGUAGE: bash
CODE:
sudo yum install checkpolicy

----------------------------------------

TITLE: Launching mongod with Client Certificate Validation
DESCRIPTION: Command to start a mongod instance that requires TLS/SSL and validates client certificates using a specified CA file.

LANGUAGE: bash
CODE:
mongod --tlsMode requireTLS --tlsCertificateKeyFile /etc/ssl/mongodb.pem --tlsCAFile /etc/ssl/caToValidateClientCertificates.pem

----------------------------------------

TITLE: Deleting Multiple Documents in MongoDB using Node.js Driver
DESCRIPTION: This snippet shows how to delete multiple documents using the MongoDB Node.js driver. The actual code is not provided in the snippet, but it references an external file.

LANGUAGE: javascript
CODE:
// Code is referenced from an external file:
// /driver-examples/node_remove.js

----------------------------------------

TITLE: List All Collections Example
DESCRIPTION: Example showing how to retrieve default information from all collections in a database.

LANGUAGE: bash
CODE:
use sample_mflix

db.aggregate([
 {
   $listClusterCatalog: {}
 }
])

LANGUAGE: json
CODE:
[
  {
    ns: "sample_mflix.movies",
    db: "sample_mflix",
    type: "collection",
    idIndex: { v: 2, key: { _id: 1 }, name: '_id' },
    options: { ... },
    sharded: false,
    info: {
       readOnly: false,
       uuid: new UUID("6c46c8b9-4999-4213-bcef-9a36b0cff228")
    }
  },
  {
    ns: "sample_mflix.comments",
    db: "sample_mflix",
    type: "collection",
    options: { ... },
    sharded: true,
    info: {
       readOnly: true,
       uuid: new UUID("6c448eb9-4090-4213-bbaf-9a36bb7fc98e")
    }
    shardKey: { _id: 1}
  },
  ...
]

----------------------------------------

TITLE: Checking Database-level Sharding Metadata Consistency in MongoDB
DESCRIPTION: Runs the checkMetadataConsistency command on a specific database to check for sharding metadata inconsistencies within that database.

LANGUAGE: javascript
CODE:
use cars
db.runCommand( {
   checkMetadataConsistency: 1
} )

----------------------------------------

TITLE: MongoDB Listen Backlog Parameter Usage
DESCRIPTION: The --listenBacklog parameter controls the maximum number of connections in MongoDB's listen queue. It defaults to the system's SOMAXCONN constant and should be set between 1 and SOMAXCONN to prevent undefined behavior. The actual applied backlog may be affected by system settings like net.core.somaxconn on Linux.

LANGUAGE: plaintext
CODE:
--listenBacklog <number>

----------------------------------------

TITLE: Reduce Function Structure
DESCRIPTION: Basic structure of a reduce function that processes key-value pairs emitted by the map function. Must be associative and idempotent.

LANGUAGE: javascript
CODE:
function(key, values) {
   ...
   return result;
}

----------------------------------------

TITLE: Checking Feature Compatibility Version in MongoDB
DESCRIPTION: This snippet demonstrates how to check the featureCompatibilityVersion of a MongoDB instance using the db.adminCommand() method. It's a crucial step before upgrading to ensure compatibility.

LANGUAGE: javascript
CODE:
db.adminCommand( { getParameter: 1, featureCompatibilityVersion: 1 } )

----------------------------------------

TITLE: Creating MongoDB Collection with Sample Documents
DESCRIPTION: Shows the creation of an 'inventory' collection with sample documents containing product descriptions that will be trimmed.

LANGUAGE: javascript
CODE:
{ "_id" : 1, "item" : "ABC1", quarter: "13Q1", "description" : " product 1" }
{ "_id" : 2, "item" : "ABC2", quarter: "13Q4", "description" : "product 2 \n The product is in stock.  \n\n  " }
{ "_id" : 3, "item" : "XYZ1", quarter: "14Q2", "description" : null }

----------------------------------------

TITLE: Performing MongoDB Count Operations Using Only Index in JavaScript
DESCRIPTION: These examples demonstrate MongoDB count operations that can be executed using only the index, without reading documents. They include exact matches and range queries on indexed fields.

LANGUAGE: javascript
CODE:
db.collection.find( { a: 5, b: 5 } ).count()
db.collection.find( { a: { $gt: 5 } } ).count()
db.collection.find( { a: 5, b: { $gt: 10 } } ).count()

----------------------------------------

TITLE: Querying Documents with $lte Operator in MongoDB
DESCRIPTION: Demonstrates how to use the $lte operator to find documents where the quantity field is less than or equal to 20.

LANGUAGE: javascript
CODE:
db.inventory.find( { quantity: { $lte: 20 } } )

----------------------------------------

TITLE: Explicit Collection Creation in MongoDB using JavaScript
DESCRIPTION: Shows how to explicitly create a collection using db.createCollection() method when specific collection options need to be specified.

LANGUAGE: javascript
CODE:
use myNewDB;

db.createCollection("myNewCollection1");

----------------------------------------

TITLE: MongoDB dropDatabase Change Event Example
DESCRIPTION: Example showing the structure of a dropDatabase event in MongoDB's change streams. The event includes fields like _id (resume token), operationType, clusterTime, wallTime, and namespace information.

LANGUAGE: json
CODE:
{
   "_id": { <Resume Token> },
   "operationType": "dropDatabase",
   "clusterTime": <Timestamp>,
   "wallTime": <ISODate>,
   "ns": {
      "db": "engineering"
   }
}

----------------------------------------

TITLE: Defining User Principal Format in Kerberos
DESCRIPTION: Shows the format for Kerberos user principal names used for authentication in MongoDB's $external database.

LANGUAGE: none
CODE:
<username>@<KERBEROS REALM>

----------------------------------------

TITLE: Defining MongoDB Search Index Structure in JavaScript
DESCRIPTION: Complete schema definition for MongoDB search index configuration. Includes fields for specifying analyzers, search analyzers, field mappings, custom analyzers, stored source settings, and synonym mappings. Each field serves specific functionality in how the search index processes and stores data.

LANGUAGE: javascript
CODE:
{
   analyzer: "<analyzer-for-index>", 
   searchAnalyzer: "<analyzer-for-query>", 
   mappings: { 
      dynamic: <boolean>,
      fields: { <field-definition> } 
   },
   analyzers: [ <custom-analyzer> ],
   storedSource: <boolean> | {
      <stored-source-definition>
   },
   synonyms: [ {
      name: "<synonym-mapping-name>",
      source: {
         collection: "<source-collection-name>"
      },
      analyzer: "<synonym-mapping-analyzer>"
   } ]
}

----------------------------------------

TITLE: Installing MongoDB Enterprise Server on Debian
DESCRIPTION: This snippet installs the MongoDB Enterprise Server package on Debian systems. It uses the apt-get install command with the -y flag for automatic confirmation.

LANGUAGE: bash
CODE:
sudo apt-get install -y mongodb-enterprise

----------------------------------------

TITLE: MongoDB Aggregation Pipeline for Timezone Conversion
DESCRIPTION: Aggregation pipeline that demonstrates timezone handling using fixed offsets (-05:00), GMT, and Olson Timezone Identifier (America/New_York). Shows how $hour and $minute operators process the date field with different timezone specifications.

LANGUAGE: javascript
CODE:
db.sales.aggregate([
{
   $project: { 
      "nycHour": { 
         $hour: { date: "$date", timezone: "-05:00" }
       }, 
       "nycMinute": { 
          $minute: { date: "$date", timezone: "-05:00" }
       },
       "gmtHour": {
          $hour: { date: "$date", timezone: "GMT" }
       },
       "gmtMinute": {
          $minute: { date: "$date", timezone: "GMT" } },
       "nycOlsonHour": {
          $hour: { date: "$date", timezone: "America/New_York" }
       },
       "nycOlsonMinute": {
          $minute: { date: "$date", timezone: "America/New_York" }
       }
   }
}])

----------------------------------------

TITLE: Inserting Figure Reference in RST Documentation
DESCRIPTION: ReStructuredText directive for embedding a MongoDB document structure diagram with specified width and alt text.

LANGUAGE: rst
CODE:
.. figure:: /images/crud-annotated-document.svg
   :alt: A MongoDB document.
   :figwidth: 570px

----------------------------------------

TITLE: Querying MongoDB with $elemMatch in JavaScript Shell
DESCRIPTION: Uses the MongoDB shell to query the 'inventory' collection for documents where the 'instock' array contains elements with 'qty' greater than 10 and less than or equal to 20.

LANGUAGE: javascript
CODE:
db.inventory.find( { "instock": { $elemMatch: { qty: { $gt: 10, $lte: 20 } } } } )

----------------------------------------

TITLE: Querying MongoDB with Equality Matches
DESCRIPTION: Examples of exact match queries on the cars collection using both direct equality and $eq operator.

LANGUAGE: javascript
CODE:
db.cars.find( { model: "Cordoba" } )
db.cars.find( { model: { $eq: "Cordoba" } } )

----------------------------------------

TITLE: Sample Output of Autosplit Status
DESCRIPTION: Shows the format of the autosplit status information in the sh.status() output, indicating whether autosplit is currently enabled.

LANGUAGE: javascript
CODE:
autosplit:
  Currently enabled: <yes|no>

----------------------------------------

TITLE: Binding MongoDB Using Command Line Option
DESCRIPTION: Command line option to bind MongoDB to all IP addresses.

LANGUAGE: shell
CODE:
--bind_ip_all

----------------------------------------

TITLE: Enabling MongoDB Auditing with BSON File Output
DESCRIPTION: Command to start mongod with auditing enabled and output directed to a BSON file.

LANGUAGE: bash
CODE:
mongod --dbpath data/db --auditDestination file --auditFormat BSON --auditPath data/db/auditLog.bson

----------------------------------------

TITLE: Sales Collection Document Example
DESCRIPTION: Sample document structure for a sales collection showing timestamp usage with ISODate.

LANGUAGE: javascript
CODE:
{
   "shoeType": "boot",
   "price": 30,
   "saleDate": ISODate("2022-02-02T06:01:17.171Z")  
}

----------------------------------------

TITLE: Untransformed $queryStats Example
DESCRIPTION: Runs $queryStats without data transformation to retrieve query statistics.

LANGUAGE: javascript
CODE:
db.getSiblingDB("admin").aggregate( [
   { 
      $queryStats: { }
   }
] )

----------------------------------------

TITLE: Dropping MongoDB Index
DESCRIPTION: Terminates an in-progress index build by dropping the index using dropIndex() method.

LANGUAGE: javascript
CODE:
db.collection.dropIndex()

----------------------------------------

TITLE: Inserting Sample Data for $maxN Example
DESCRIPTION: Creates a sample scores collection with various test cases including empty arrays, null values, and mixed numeric/string values.

LANGUAGE: javascript
CODE:
db.scores.insertMany([
    { "playerId" : 1, "score" : [ 1, 2, 3 ] },
    { "playerId" : 2, "score" : [ 12, 90, 7, 89, 8 ] },
    { "playerId" : 3, "score" : [ null ] },
    { "playerId" : 4, "score" : [ ] }
    { "playerId" : 5, "score" : [ 1293, "2", 3489, 9 ]}
])

----------------------------------------

TITLE: MongoDB getUsers Method Definition
DESCRIPTION: Basic structure of the db.getUsers() method with its available options including showCredentials, showCustomData, and filter parameters.

LANGUAGE: none
CODE:
db.getUsers( { 
   showCredentials: <Boolean>,
   showCustomData: <Boolean>,
   filter: <document>
} )

----------------------------------------

TITLE: Creating Wildcard Index on Attributes Field
DESCRIPTION: Creating a wildcard index specifically on the attributes field with ascending sort order.

LANGUAGE: javascript
CODE:
db.products.createIndex( { "attributes.$**" : 1 } )

----------------------------------------

TITLE: Creating Partial Unique Index in Python
DESCRIPTION: Creates a partial unique index on the keyAltNames field in the encryption.__keyVault collection using Python MongoDB driver.

LANGUAGE: python
CODE:
key_vault.create_index(
    "keyAltNames",
    unique=True,
    partialFilterExpression={"keyAltNames": {"$exists": True}}
)

----------------------------------------

TITLE: Querying MongoDB moveChunk Command with bounds Parameter
DESCRIPTION: Alternative command syntax for moving a chunk using the bounds parameter to specify the chunk by its shard key range. Used particularly for collections with hashed shard keys.

LANGUAGE: javascript
CODE:
db.adminCommand( { moveChunk : <namespace> ,
                       bounds : <array> ,
                       to : <string>,
                       forceJumbo: <boolean>, 
                       _secondaryThrottle : <boolean>,
                       writeConcern: <document>,
                       _waitForDelete : <boolean> } )

----------------------------------------

TITLE: Creating MongoClient Instance in Python for MongoDB Encrypted Data Access
DESCRIPTION: This code snippet illustrates how to create a MongoClient instance in Python for accessing a key vault and handling encrypted data in MongoDB. It uses the MongoClient constructor with a connection string.

LANGUAGE: python
CODE:
client = MongoClient("<Your MongoDB URI>")

----------------------------------------

TITLE: Defining MongoDB Feature Compatibility Version Strings in reStructuredText
DESCRIPTION: Sets up substitution variables for feature compatibility version (FCV) strings. These variables are used to consistently represent the FCV values in the documentation.

LANGUAGE: reStructuredText
CODE:
.. |newfcv| replace:: ``"7.0"``
.. |oldfcv| replace:: ``"6.0"``

----------------------------------------

TITLE: Creating ClientEncryption Instance in Java
DESCRIPTION: This snippet demonstrates how to create a ClientEncryption instance in Java for MongoDB. It includes the necessary configuration and initialization steps.

LANGUAGE: java
CODE:
ClientEncryption clientEncryption = ClientEncryptions.create(ClientEncryptionSettings.builder()
    .keyVaultMongoClientSettings(MongoClientSettings.builder()
        .applyConnectionString(new ConnectionString("mongodb://localhost:27017"))
        .build())
    .keyVaultNamespace(new MongoNamespace("encryption.__keyVault"))
    .kmsProviders(kmsProviders)
    .build());

----------------------------------------

TITLE: Setting Up Automatic Encryption Options in MongoDB Shell
DESCRIPTION: This code snippet demonstrates how to configure automatic encryption options directly in the MongoDB Shell. It includes setup for the key vault namespace, KMS provider, and schema map.

LANGUAGE: javascript
CODE:
const autoEncryptionOpts = {
  keyVaultNamespace: "admin.datakeys",
  kmsProviders: <KMS_PROVIDERS>,
  schemaMap: <SCHEMA_MAP>,
  extraOptions: <EXTRA_OPTIONS>
};

const encryptedClient = Mongo(uri, autoEncryptionOpts);

----------------------------------------

TITLE: Executing MongoDB Explain Command in ExecutionStats Mode
DESCRIPTION: Example of running the explain command in executionStats verbosity mode for a count operation. This returns both query planning and execution information.

LANGUAGE: javascript
CODE:
db.runCommand(
   {
      explain: { count: "products", query: { quantity: { $gt: 50 } } },
      verbosity: "executionStats"
   }
)

----------------------------------------

TITLE: Updating and Sorting Array of Documents in MongoDB
DESCRIPTION: Updates the 'quizzes' array by appending new documents and sorting all elements by the 'score' field in ascending order.

LANGUAGE: javascript
CODE:
db.students.updateOne(
   { _id: 1 },
   {
     $push: {
       quizzes: {
         $each: [ { id: 3, score: 8 }, { id: 4, score: 7 }, { id: 5, score: 6 } ],
         $sort: { score: 1 }
       }
     }
   }
)

----------------------------------------

TITLE: OP_GET_MORE Structure Definition in C
DESCRIPTION: C struct defining the wire protocol format for the OP_GET_MORE message used to retrieve additional documents from a cursor.

LANGUAGE: c
CODE:
struct {
    MsgHeader header;             // standard message header
    int32     ZERO;               // 0 - reserved for future use
    cstring   fullCollectionName; // "dbname.collectionname"
    int32     numberToReturn;     // number of documents to return
    int64     cursorID;           // cursorID from the OP_REPLY
}

----------------------------------------

TITLE: Executing grantRolesToUser Command in MongoDB
DESCRIPTION: This snippet demonstrates the syntax for running the grantRolesToUser command. It specifies the user, roles to grant, write concern, and an optional comment.

LANGUAGE: javascript
CODE:
db.runCommand(
   {  
     grantRolesToUser: "<user>",
     roles: [ <roles> ],
     writeConcern: { <write concern> },
     comment: <any>
   }
)

----------------------------------------

TITLE: Retrieving Encrypted Documents in Node.js with CSFLE
DESCRIPTION: Node.js implementation for querying documents with encrypted fields using MongoDB's Client-Side Field Level Encryption. Shows comparison between encrypted and non-encrypted client queries.

LANGUAGE: javascript
CODE:
## Placeholder for Node.js code - actual implementation details not shown in source ##

----------------------------------------

TITLE: Concatenating Arrays with $reduce in MongoDB
DESCRIPTION: Illustrates using $reduce to concatenate multiple arrays into a single array.

LANGUAGE: javascript
CODE:
{
   $reduce: {
      input: [ [ 3, 4 ], [ 5, 6 ] ],
      initialValue: [ 1, 2 ],
      in: { $concatArrays : ["$$value", "$$this"] }
   }
}

----------------------------------------

TITLE: Directory Navigation in MongoDB Shell
DESCRIPTION: Example of changing the current working directory using process.chdir()

LANGUAGE: javascript
CODE:
process.chdir( "./data/incoming" )

----------------------------------------

TITLE: Verifying Arbiter Configuration in MongoDB
DESCRIPTION: JavaScript code snippet showing the expected configuration for an arbiter member in a replica set.

LANGUAGE: javascript
CODE:
"arbiterOnly" : true

----------------------------------------

TITLE: Sharding a Collection with a Simple Shard Key in MongoDB
DESCRIPTION: This example shows how to shard the 'people' collection in the 'records' database using the 'zipcode' field as the shard key. It demonstrates a basic usage of the shardCollection command.

LANGUAGE: javascript
CODE:
db.adminCommand( { shardCollection: "records.people", key: { zipcode: 1 } } )

----------------------------------------

TITLE: Sharding a Collection with a Simple Shard Key in MongoDB
DESCRIPTION: This example shows how to shard the 'people' collection in the 'records' database using the 'zipcode' field as the shard key. It demonstrates a basic usage of the shardCollection command.

LANGUAGE: javascript
CODE:
db.adminCommand( { shardCollection: "records.people", key: { zipcode: 1 } } )

----------------------------------------

TITLE: Counting Documents with Index Hint in MongoDB
DESCRIPTION: Example of using the count command with a query and index hint to count documents in the 'orders' collection using a specific index.

LANGUAGE: javascript
CODE:
db.runCommand(
   {
     count:'orders',
     query: {
              ord_dt: { $gt: new Date('01/01/2012') },
              status: "D"
            },
     hint: { status: 1 }
   }
)

----------------------------------------

TITLE: MongoDB Aggregation $lte Results Example
DESCRIPTION: Shows the output of the $lte comparison operation, displaying the original item and quantity fields along with the boolean result of the comparison.

LANGUAGE: javascript
CODE:
{ "item" : "abc1", "qty" : 300, "qtyLte250" : false }
{ "item" : "abc2", "qty" : 200, "qtyLte250" : true }
{ "item" : "xyz1", "qty" : 250, "qtyLte250" : true }
{ "item" : "VWZ1", "qty" : 300, "qtyLte250" : false }
{ "item" : "VWZ2", "qty" : 180, "qtyLte250" : true }

----------------------------------------

TITLE: Using $locf in $setWindowFields Pipeline
DESCRIPTION: Shows how to use $locf within a $setWindowFields stage to fill missing price values with the last observed non-null value.

LANGUAGE: javascript
CODE:
db.stock.aggregate( [
   {
      $setWindowFields: {
        sortBy: { time: 1 },
        output: {
           price: { $locf: "$price" }
        }
      }
    }
] )

----------------------------------------

TITLE: Defining $hour Operator in MongoDB Aggregation
DESCRIPTION: Demonstrates the syntax for using the $hour operator in a MongoDB aggregation pipeline. It extracts the hour (0-23) from a date expression.

LANGUAGE: javascript
CODE:
{ $hour: <dateExpression> }

----------------------------------------

TITLE: Accessing Nested Fields in MongoDB Document Structure
DESCRIPTION: Example document structure showing nested fields including arrays and nested objects for a planets collection.

LANGUAGE: javascript
CODE:
{
   _id: new ObjectId("6220f6b78a733c51b416c80e"),
   name: "Uranus",
   orderFromSun: 7,
   hasRings: true,
   mainAtmosphere: [ "H2", "He", "CH4" ],
   surfaceTemperatureC: { min: null, max: null, mean: -197.2 }
}

----------------------------------------

TITLE: Inserting Encrypted Document with Go MongoDB Driver
DESCRIPTION: This snippet shows how to insert an encrypted document into the 'medicalRecords.patients' namespace using the Go MongoDB driver with Queryable Encryption enabled.

LANGUAGE: go
CODE:
// Code snippet not provided in the input text

----------------------------------------

TITLE: Defining $covariancePop Syntax in MongoDB Aggregation
DESCRIPTION: Shows the basic syntax structure for the $covariancePop operator that takes two numeric expressions as arguments.

LANGUAGE: none
CODE:
{
   $covariancePop: 
   [
      <numeric expression 1>,
      <numeric expression 2>
   ]
}

----------------------------------------

TITLE: MongoDB Shard Connection Error Message
DESCRIPTION: Error message displayed when attempting to run unsupported commands by connecting directly to a shard instead of through mongos router.

LANGUAGE: none
CODE:
"You are connecting to a sharded cluster improperly by connecting directly to a shard. Please connect to the cluster via a router (mongos)."

----------------------------------------

TITLE: Storing Echo Function in system.js
DESCRIPTION: Stores a simple echo function in the system.js collection that returns its input parameter.

LANGUAGE: javascript
CODE:
db.system.js.insertOne(
   {
      _id: "echo",
      value : function(x) { return x; }
   }
)

----------------------------------------

TITLE: Inserting Sample Documents in MongoDB
DESCRIPTION: This code snippet demonstrates how to insert multiple documents into a MongoDB collection named 'people'. The documents contain various combinations of null, undefined, and array values to illustrate different scenarios for the subsequent query.

LANGUAGE: javascript
CODE:
// create the people collection

db.people.insertMany( [
   { _id: 1, name: null },
   { _id: 2, name: undefined },
   { _id: 3, name: [ "Gabriel", undefined ] },
   { _id: 4, names: [ "Alice", "Charu" ] }
] )

----------------------------------------

TITLE: Verifying Current Oplog Size in MongoDB
DESCRIPTION: JavaScript commands to switch to the local database and retrieve the current oplog size using the db.collection.stats() method. The maxSize field displays the collection size in bytes.

LANGUAGE: javascript
CODE:
use local
db.oplog.rs.stats().maxSize

----------------------------------------

TITLE: Sample Collection Data
DESCRIPTION: Example documents showing the structure of the exhibits collection used in the examples.

LANGUAGE: javascript
CODE:
{ "_id" : 1, "title" : "The Pillars of Society", "artist" : "Grosz", "year" : 1926, "tags" : [ "painting", "satire", "Expressionism", "caricature" ] }
{ "_id" : 2, "title" : "Melancholy III", "artist" : "Munch", "year" : 1902, "tags" : [ "woodcut", "Expressionism" ] }
{ "_id" : 3, "title" : "Dancer", "artist" : "Miro", "year" : 1925, "tags" : [ "oil", "Surrealism", "painting" ] }

----------------------------------------

TITLE: Set Profiling with Slow Operation Threshold
DESCRIPTION: Configures profiling level 1 with a 20ms threshold for slow operations using db.setProfilingLevel()

LANGUAGE: javascript
CODE:
db.setProfilingLevel( 1, { slowms: 20 } )

----------------------------------------

TITLE: Removing Operation Rejection Filter in MongoDB
DESCRIPTION: This snippet demonstrates how to use the removeQuerySettings command to remove an operation rejection filter using its queryShapeHash in MongoDB.

LANGUAGE: javascript
CODE:
db.adminCommand( {
   removeQuerySettings: "AB8ECADEE8F0EB0F447A30744EB4813AE7E0BFEF523B0870CA10FCBC87F5D8F1"
} )

----------------------------------------

TITLE: Basic $listSearchIndexes Syntax in MongoDB
DESCRIPTION: Shows the basic command syntax for listing search indexes on a collection using the $listSearchIndexes aggregation stage.

LANGUAGE: javascript
CODE:
db.<collection>.aggregate(
   [
      {
         $listSearchIndexes:
            {
               id: <indexId>,
               name: <indexName>
            }
      }
   ]
)

----------------------------------------

TITLE: Creating Products Collection in MongoDB using JavaScript
DESCRIPTION: Inserts multiple documents into a 'products' collection using the insertMany() method. Each document represents a product with various fields such as item, sku, quantity, and instock status.

LANGUAGE: javascript
CODE:
db.products.insertMany( [
   { "item": "chisel", "sku": "C001", "quantity": 4, "instock": true },
   { "item": "hammer", "sku": "unknown", "quantity": 3, "instock": true },
   { "item": "nails", "sku": "unknown", "quantity": 100, "instock": true }
] )

----------------------------------------

TITLE: Matrix Data Insertion in MongoDB
DESCRIPTION: Example of inserting matrix data into a MongoDB collection for transformation.

LANGUAGE: javascript
CODE:
db.matrices.insertMany([
  { matrix: [[1, 2], [2, 3], [3, 4]] },
  { matrix: [[8, 7], [7, 6], [5, 4]] },
])

----------------------------------------

TITLE: Querying with $nearSphere and $maxDistance using 2d Index in MongoDB
DESCRIPTION: Example of using $nearSphere with a 2d index to find documents within a maximum distance of 0.10 radians from a specified point, ordered from nearest to farthest.

LANGUAGE: javascript
CODE:
db.legacyPlaces.find(
   { location : { $nearSphere : [ -73.9667, 40.78 ], $maxDistance: 0.10 } }
)

----------------------------------------

TITLE: Implementing $percentile in $setWindowFields Stage in MongoDB
DESCRIPTION: An example demonstrating the use of $percentile within a $setWindowFields stage to calculate percentiles based on local data trends, using a sliding window of test scores.

LANGUAGE: javascript
CODE:
db.testScores.aggregate( [
   {
      $setWindowFields: {
         sortBy: { test01: 1 },
         output: {
            test01_95percentile: {
               $percentile: {
                  input: "$test01",
                  p: [ 0.95 ],
                  method: 'approximate'
               },
               window: {
                  range: [ -3, 3 ]
               }
            }
         }
      }
   },
   {
      $project: {
         _id: 0,
         studentId: 1,
         test01_95percentile: 1
      }
   }
] )

----------------------------------------

TITLE: Result of MongoDB Aggregation Using $year and Other Date Operators
DESCRIPTION: Shows the output of the aggregation pipeline that uses $year and other date operators. The result includes various components of the date field extracted into separate fields.

LANGUAGE: javascript
CODE:
{
  "_id" : 1,
  "year" : 2014,
  "month" : 1,
  "day" : 1,
  "hour" : 8,
  "minutes" : 15,
  "seconds" : 39,
  "milliseconds" : 736,
  "dayOfYear" : 1,
  "dayOfWeek" : 4,
  "week" : 0
}

----------------------------------------

TITLE: Configuring reStructuredText Document Settings
DESCRIPTION: Configuration blocks that set up the document metadata, keywords, table of contents, and included content for a MongoDB upgrade guide.

LANGUAGE: rst
CODE:
.. meta::
   :keywords: on-prem

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. include:: /includes/in-dev.rst

.. include:: /includes/rapid-release.rst

----------------------------------------

TITLE: Initializing and Executing Ordered Bulk Operations in MongoDB (JavaScript)
DESCRIPTION: This snippet demonstrates how to initialize a Bulk() operations builder on the 'users' collection, add a series of write operations including inserts, deletes, and updates, and then execute the operations in order.

LANGUAGE: javascript
CODE:
var bulk = db.users.initializeOrderedBulkOp();
bulk.insert( { user: "abc123", status: "A", points: 0 } );
bulk.insert( { user: "ijk123", status: "A", points: 0 } );
bulk.insert( { user: "mop123", status: "P", points: 0 } );
bulk.find( { status: "D" } ).delete();
bulk.find( { status: "P" } ).update( { $set: { comment: "Pending" } } );
bulk.execute();

----------------------------------------

TITLE: MongoDB $mod Operator with Insufficient Elements
DESCRIPTION: Demonstrates an error case where the $mod operator is provided with fewer than two elements.

LANGUAGE: javascript
CODE:
db.inventory.find( { qty: { $mod: [ 4 ] } } )

----------------------------------------

TITLE: Drop Collection with Write Concern Level 1
DESCRIPTION: Example demonstrating how to drop a 'students' collection with write concern level 1 for acknowledgment.

LANGUAGE: javascript
CODE:
db.students.drop( { writeConcern: { w: 1 } } )

----------------------------------------

TITLE: Manual Field Encryption in Node.js
DESCRIPTION: Demonstrates document field encryption and insertion using Node.js MongoDB driver. Includes implementation of field-level encryption using specified encryption algorithms.

LANGUAGE: javascript
CODE:
// Code not visible in provided input

----------------------------------------

TITLE: Converting Numbers to Integers in MongoDB Shell
DESCRIPTION: Examples of constructors used to create integer types in mongosh. NumberInt() creates 32-bit integers while NumberLong() creates 64-bit integers.

LANGUAGE: javascript
CODE:
NumberInt()

LANGUAGE: javascript
CODE:
NumberLong()

----------------------------------------

TITLE: Sample Output for Sharded Cluster Member in MongoDB
DESCRIPTION: This code block demonstrates the expected output when shardingState is run on a mongod instance that is part of a sharded cluster. It includes various fields such as enabled status, config server, shard name, and version information.

LANGUAGE: javascript
CODE:
{
  "enabled" : true,
  "configServer" : "<configdb-string>",
  "shardName" : "<string>",
  "shardHost" : "string:",
  "versions" : {
    "<database>.<collection>" : {
      "placementVersion": Timestamp({ t: 1, i: 1024 }),
      "timestamp": Timestamp({ t: 1682444810, i: 8 })
    }, 
    "<database>.<collection>" : {
      "placementVersion": Timestamp({ t: 0, i: 0 }),
      "timestamp": Timestamp({ t: 0, i: 0 })
    } 
  },
  "ok" : 1,
  "$clusterTime" : {
     "clusterTime" : Timestamp({ t: 1682457265, i: 1 }),
     "signature" : {
        "hash" : BinData(0,"B2ViX7XLzFLS5Fl9XEuFXbwKIM4="),
        "keyId" : NumberLong("6488045157173166092")
     }
  },
  "operationTime" : Timestamp({ t: 1682457260, i: 1 })
}

----------------------------------------

TITLE: MongoDB Cluster Parameter Update Document Structure
DESCRIPTION: Illustrates the JSON document structure used to record both original and updated values when modifying MongoDB cluster server parameters. The document contains two fields to track the parameter state before and after modification.

LANGUAGE: none
CODE:
{ 
    originalClusterServerParameter: <original parameter value>,
    updatedClusterServerParameter": <new parameter value> 
}

----------------------------------------

TITLE: Calculating Inverse Tangent in Degrees using MongoDB Aggregation
DESCRIPTION: Demonstrates an aggregation pipeline that uses $atan to calculate the angle adjacent to side_a of a triangle. The result is converted from radians to degrees using $radiansToDegrees.

LANGUAGE: bash
CODE:
db.trigonometry.aggregate([
  { 
    $addFields : {
      "angle_a" : {
        $radiansToDegrees : {
          $atan : {
            $divide : [ "$side_b", "$side_a" ]
          }
        }
      }
    }
  }
])

----------------------------------------

TITLE: Querying Encrypted Documents with MongoDB CSFLE in Go
DESCRIPTION: This Go code snippet shows how to query a MongoDB collection for an encrypted document using both a CSFLE-configured client and a standard client. It demonstrates the difference in query results when using automatic encryption.

LANGUAGE: go
CODE:
var resultWithEncryption bson.M
err = encryptedColl.FindOne(context.TODO(), bson.D{{"firstName", "Jon"}}).Decode(&resultWithEncryption)
if err != nil {
    panic(err)
}
fmt.Println("Document retrieved with CSFLE-enabled client:")
output, err := json.MarshalIndent(resultWithEncryption, "", "    ")
if err != nil {
    panic(err)
}
fmt.Printf("%s\n", output)

var resultWithoutEncryption bson.M
err = standardColl.FindOne(context.TODO(), bson.D{{"firstName", "Jon"}}).Decode(&resultWithoutEncryption)
if err != nil {
    panic(err)
}
fmt.Println("\nDocument retrieved with standard client:")
output, err = json.MarshalIndent(resultWithoutEncryption, "", "    ")
if err != nil {
    panic(err)
}
fmt.Printf("%s\n", output)

----------------------------------------

TITLE: Updating Documents Using $lte with Embedded Documents in MongoDB
DESCRIPTION: Shows how to use updateMany() with $lte to update documents based on a field in an embedded document, setting a price field where carrier.fee is less than or equal to 5.

LANGUAGE: javascript
CODE:
db.inventory.updateMany(
   { "carrier.fee": { $lte: 5 } }, { $set: { price: 9.99 } }
)

----------------------------------------

TITLE: Checking MongoDB Version in Shell
DESCRIPTION: Command to verify the installed MongoDB version after downgrading binaries.

LANGUAGE: shell
CODE:
mongod --version

----------------------------------------

TITLE: Creating Index Using Ruby Driver
DESCRIPTION: Creates an index using the Ruby driver's Index::View#create_one method.

LANGUAGE: ruby
CODE:
client[:collection].indexes.create_one({ <key and index type specification> }, {options})

----------------------------------------

TITLE: Adding Arbiter to MongoDB Replica Set
DESCRIPTION: Use the rs.addArb() method in mongosh to add the converted instance as an arbiter to the replica set.

LANGUAGE: javascript
CODE:
rs.addArb("<hostname><:port>")

----------------------------------------

TITLE: Locating Rollback Files in MongoDB
DESCRIPTION: Shows the file path structure for rollback data files in MongoDB, which are created for each collection whose data is rolled back.

LANGUAGE: none
CODE:
<dbpath>/rollback/<collectionUUID>/removed.<timestamp>.bson

----------------------------------------

TITLE: Shutting Down a MongoDB Instance
DESCRIPTION: Command to safely shut down a MongoDB instance. This is used during the upgrade process when replacing binaries.

LANGUAGE: javascript
CODE:
db.adminCommand( { shutdown: 1 } )

----------------------------------------

TITLE: Retrieving Details for All Parameters in MongoDB
DESCRIPTION: This example shows how to retrieve detailed information for all parameters using the getParameter command with both showDetails and allParameters options in MongoDB.

LANGUAGE: javascript
CODE:
db.adminCommand( { getParameter : { showDetails: true, allParameters: true } } )

----------------------------------------

TITLE: Query Embedded Document using MongoDB Shell
DESCRIPTION: Demonstrates how to query documents with an exact match on an embedded document structure in the MongoDB shell. The query matches documents where the size field exactly matches the specified document with height 14, width 21, and unit of measure in centimeters.

LANGUAGE: javascript
CODE:
db.inventory.find( { size: { h: 14, w: 21, uom: "cm" } } )

----------------------------------------

TITLE: Basic Syntax for revokePrivilegesFromRole Method
DESCRIPTION: Shows the basic syntax structure for using db.revokePrivilegesFromRole() method to remove privileges from a role. Takes rolename, privileges array, and writeConcern as parameters.

LANGUAGE: javascript
CODE:
db.revokePrivilegesFromRole(
    "<rolename>",
    [
        { resource: { <resource> }, actions: [ "<action>", ... ] },
        ...
    ],
    { <writeConcern> }
)

----------------------------------------

TITLE: Setting AWS IAM Environment Variables
DESCRIPTION: Demonstrates how to set AWS IAM credentials as environment variables in a bash shell. These variables can be used for authentication when connecting to an Atlas cluster.

LANGUAGE: shell
CODE:
export AWS_ACCESS_KEY_ID='<aws access key id>'
export AWS_SECRET_ACCESS_KEY='<aws secret access key>'
export AWS_SESSION_TOKEN='<aws session token>'

----------------------------------------

TITLE: Inserting Encrypted Document with CSFLE in Node.js
DESCRIPTION: This snippet shows how to insert an encrypted document using a CSFLE-enabled MongoClient in Node.js. It inserts a document into the 'medicalRecords.patients' collection with encrypted fields.

LANGUAGE: javascript
CODE:
// Code snippet not provided in the given text

----------------------------------------

TITLE: Force Shutting Down a MongoDB Server
DESCRIPTION: This example demonstrates how to force shut down a MongoDB server by setting the 'force' parameter to true.

LANGUAGE: javascript
CODE:
db.getSiblingDB("admin").shutdownServer({ "force" : true })

----------------------------------------

TITLE: Inserting Encrypted Document with CSFLE in Node.js
DESCRIPTION: This snippet shows how to insert an encrypted document using a CSFLE-enabled MongoClient in Node.js. It inserts a document into the 'medicalRecords.patients' collection with encrypted fields.

LANGUAGE: javascript
CODE:
// Code snippet not provided in the given text

----------------------------------------

TITLE: Invalid JSON Schema Validation with additionalProperties: false in MongoDB
DESCRIPTION: This schema validation is invalid because it sets additionalProperties to false without including the _id field in the properties object, which would cause all documents to be rejected.

LANGUAGE: javascript
CODE:
{
  "$jsonSchema": {
    "required": [ "_id", "storeLocation" ],
    "properties": {
      "storeLocation": { "bsonType": "string" }
    },
    "additionalProperties": false
  }
}

----------------------------------------

TITLE: Basic Search Index Creation in MongoDB
DESCRIPTION: Creates a search index named 'searchIndex01' on the movies collection with dynamic mapping enabled for all supported field types.

LANGUAGE: javascript
CODE:
db.movies.createSearchIndex(
   "searchIndex01",
   { mappings: { dynamic: true } }
)

----------------------------------------

TITLE: Updating Known Fields from Undefined to Null in MongoDB
DESCRIPTION: MongoDB update operation to convert known fields containing undefined values to null, handling both scalar undefined values and undefined array elements.

LANGUAGE: javascript
CODE:
db.people.updateMany(
   { name: { $type: "undefined" } },
   [ {
      $set: {
         "name": {
            $cond: {
               if: {
                  $eq: [ { $type: "$name" }, "array" ]
               },
               then: {
                  $map: {
                     input: "$name",
                     in: { 
                        $cond: {
                           if: { $eq: [ { $type: "$$this" }, "undefined" ] },
                           then: null,
                           else: "$$this"
                        }
                     }
                  },
               },
               else: null
            }
         }
      }
   } ]
)

----------------------------------------

TITLE: Setting Filter with Predicate and Collation
DESCRIPTION: Example demonstrating how to create an index filter that includes collation settings for string comparison in different locales.

LANGUAGE: javascript
CODE:
db.runCommand(
   {
      planCacheSetFilter: "orders",
      query: { item: "Movie" },
      collation: { locale: "en_US" },
      indexes: [
         { item: 1, order_date: 1 , quantity: 1 }
      ]
   }
)

----------------------------------------

TITLE: Dropping All Users in MongoDB JavaScript Shell
DESCRIPTION: This snippet demonstrates how to use the db.dropAllUsers() method to remove all users from the 'products' database with a specific write concern.

LANGUAGE: javascript
CODE:
use products
db.dropAllUsers( {w: "majority", wtimeout: 5000} )

----------------------------------------

TITLE: Creating CMK in Python
DESCRIPTION: Code to generate a 96-byte Customer Master Key and save it to master-key.txt using Python

LANGUAGE: python
CODE:
import os

key = os.urandom(96)
with open('master-key.txt', 'wb') as f:
    f.write(key)

----------------------------------------

TITLE: Querying Embedded Documents in MongoDB Compass
DESCRIPTION: This snippet shows the query filter to be used in MongoDB Compass for finding documents with specific embedded field conditions. It searches for inventory items with a height less than 15 inches, unit of measure in inches, and a status of 'D'.

LANGUAGE: javascript
CODE:
{ "size.h": { $lt: 15 }, "size.uom": "in", status: "D" }

----------------------------------------

TITLE: Executing a Transaction with Java Callback API
DESCRIPTION: This example shows how to use the Java driver's callback API to perform a transaction that inserts documents into two different collections. It includes error handling and session management.

LANGUAGE: java
CODE:
TransactionBody txnBody = new TransactionBody<String>() {
    public String execute() {
        MongoCollection<Document> coll1 = client.getDatabase("mydb1").getCollection("foo");
        MongoCollection<Document> coll2 = client.getDatabase("mydb2").getCollection("bar");
        coll1.insertOne(clientSession, new Document("abc", 1));
        coll2.insertOne(clientSession, new Document("xyz", 999));
        return "Inserted into collections in different databases";
    }
};

try {
    clientSession.withTransaction(txnBody, txnOptions);
} catch (RuntimeException e) {
    // error handling
} finally {
    clientSession.close();
}

----------------------------------------

TITLE: MongoDB $atan2 Basic Syntax
DESCRIPTION: Basic syntax for the $atan2 operator in MongoDB aggregation pipeline that takes two expressions as arguments.

LANGUAGE: javascript
CODE:
{ $atan2: [ <expression 1>, <expression 2> ] }

----------------------------------------

TITLE: Configuring X.509 Authentication for MongoDB Replica Set
DESCRIPTION: YAML configuration for setting up X.509 certificate-based authentication in a MongoDB replica set. Includes TLS settings, certificate paths, and cluster authentication mode configuration.

LANGUAGE: yaml
CODE:
replication:
  replSetName: "rs0"
security:
  clusterAuthMode: x509
net:
  tls:
    mode: requireTLS
    certificateKeyFile: /etc/mongodb/client.pem
    CAFile: /etc/mongodb/ca.pem
    clusterFile: /etc/mongodb/member.pem

----------------------------------------

TITLE: Creating MongoDB Replica Set with mtools
DESCRIPTION: Command to create a three-node replica set using mtools, which is useful for testing Queryable Encryption in a local environment.

LANGUAGE: shell
CODE:
mlaunch init --replicaset --nodes 3

----------------------------------------

TITLE: Opening a Change Stream Cursor on a Database in MongoDB
DESCRIPTION: This snippet demonstrates how to open a change stream cursor on the 'hr' database using the db.watch() method in MongoDB shell.

LANGUAGE: javascript
CODE:
watchCursor = db.getSiblingDB("hr").watch()

----------------------------------------

TITLE: Hiding a MongoDB Index
DESCRIPTION: This snippet demonstrates how to create an index and then hide it using db.collection.hideIndex(). It also shows how to verify the hidden status of the index using db.collection.getIndexes().

LANGUAGE: javascript
CODE:
db.restaurants.createIndex( { borough: 1, ratings: 1 } );

LANGUAGE: javascript
CODE:
db.restaurants.hideIndex( "borough_1_ratings_1" );

LANGUAGE: javascript
CODE:
db.restaurants.getIndexes();

----------------------------------------

TITLE: Preventing MongoDB Auto-upgrades in YUM Configuration
DESCRIPTION: YUM configuration to exclude MongoDB packages from automatic upgrades by adding exclude directives to the YUM configuration file.

LANGUAGE: ini
CODE:
exclude=mongodb-org,mongodb-org-database,mongodb-org-server,mongodb-mongosh,mongodb-org-mongos,mongodb-org-tools

----------------------------------------

TITLE: Inserting Sample Data for $bitXor Operation in MongoDB
DESCRIPTION: Shows how to insert sample data into the 'switches' collection for demonstrating $bitXor operation.

LANGUAGE: javascript
CODE:
db.switches.insertMany( [
    { _id: 0, a: NumberInt(0), b: NumberInt(127) },
    { _id: 1, a: NumberInt(2), b: NumberInt(3) },
    { _id: 2, a: NumberInt(3), b: NumberInt(5) }
] )

----------------------------------------

TITLE: Defining $ne Operator Syntax in MongoDB Aggregation
DESCRIPTION: Shows the basic syntax for using the $ne operator in a MongoDB aggregation pipeline. It compares two expressions and returns true when they are not equivalent.

LANGUAGE: javascript
CODE:
{ $ne: [ <expression1>, <expression2> ] }

----------------------------------------

TITLE: MongoDB dropSearchIndex Example Usage
DESCRIPTION: Example showing how to delete a search index named 'searchIndex01' from the 'contacts' collection.

LANGUAGE: javascript
CODE:
db.runCommand( {
   dropSearchIndex: "contacts",
   name: "searchIndex01"
} )

----------------------------------------

TITLE: Setting Global Default Write Concern Example
DESCRIPTION: Example showing how to set a global write concern with w: 2 configuration.

LANGUAGE: javascript
CODE:
db.adminCommand({
  "setDefaultRWConcern" : 1,
  "defaultWriteConcern" : {
    "w" : 2
  }
})

----------------------------------------

TITLE: Using $planCacheStats to Return All Plan Cache Entries
DESCRIPTION: Demonstrates how to use the $planCacheStats aggregation stage to return information on all plan cache entries for the 'orders' collection.

LANGUAGE: javascript
CODE:
db.orders.aggregate( [ 
   { $planCacheStats: { } }
] )

----------------------------------------

TITLE: Defining reStructuredText Substitutions for MongoDB Health Manager Terms
DESCRIPTION: These substitutions define shorthand notation for common Health Manager terms used throughout MongoDB documentation. They allow for consistent terminology and easy updates across multiple documents.

LANGUAGE: reStructuredText
CODE:
.. |HM| replace:: Health Manager
.. |HMS| replace:: Health Managers
.. |HMREF| replace:: :ref:`Health Managers Overview <health-managers-overview>`

----------------------------------------

TITLE: Reloading systemd Configuration
DESCRIPTION: Command to reload systemd unit files after creating the THP service configuration.

LANGUAGE: sh
CODE:
sudo systemctl daemon-reload

----------------------------------------

TITLE: Inserting Encrypted Document with CSFLE in Node.js
DESCRIPTION: This snippet shows how to insert an encrypted document using a CSFLE-enabled MongoClient in Node.js. It inserts a document into the 'medicalRecords.patients' collection with encrypted fields.

LANGUAGE: javascript
CODE:
// Code snippet not provided in the given text

----------------------------------------

TITLE: Querying Aggregation Explain Output in MongoDB 7.2
DESCRIPTION: Starting in MongoDB 7.2, the output of explain().aggregate() on sharded clusters is the same for both sharded and unsharded collections. The output is now under the 'shards' field.

LANGUAGE: mongodb
CODE:
explain().aggregate()

----------------------------------------

TITLE: Creating ClientEncryption Instance in Node.js
DESCRIPTION: This snippet shows how to create a ClientEncryption instance in Node.js for MongoDB. It includes the required configuration options and initialization process.

LANGUAGE: javascript
CODE:
const clientEncryption = new ClientEncryption(client, {
  keyVaultNamespace: 'encryption.__keyVault',
  kmsProviders: kmsProviders
});

----------------------------------------

TITLE: Dynamic n Value Based on Group Key
DESCRIPTION: Shows how to dynamically set the n value in $bottomN using $cond expression based on gameId.

LANGUAGE: javascript
CODE:
db.gamescores.aggregate([
   {
      $group:
      {
         _id: {"gameId": "$gameId"},
         gamescores:
            {
               $bottomN:
                  {
                     output: "$score",
                     n: { $cond: { if: {$eq: ["$gameId","G2"] }, then: 1, else: 3 } },
                     sortBy: { "score": -1 }
                  }
            }
      }
   }
])

----------------------------------------

TITLE: Backing Up MongoDB Sharded Cluster with mongodump
DESCRIPTION: This command uses mongodump to create a backup of a MongoDB sharded cluster by connecting to the mongos instance.

LANGUAGE: bash
CODE:
mongodump \
   --host mongos.example.net \
   --port 27017 \
   --username user \
   --password "passwd" \
   --out /opt/backups/example-cluster-1

----------------------------------------

TITLE: Getting Length of BinData() Object in MongoDB JavaScript
DESCRIPTION: This snippet shows how to create a BinData object and use the length() method to return its bit length.

LANGUAGE: javascript
CODE:
var bdata = BinData(0, "gf1UcxdHTJ2HQ/EGQrO7mQ==")

LANGUAGE: javascript
CODE:
bdata.length()

----------------------------------------

TITLE: Inserting Sample Restaurant Data in MongoDB
DESCRIPTION: Inserts sample restaurant data into a MongoDB collection to demonstrate sorting examples. The data includes restaurant names and boroughs.

LANGUAGE: javascript
CODE:
db.restaurants.insertMany( [
   { "_id" : 1, "name" : "Central Park Cafe", "borough" : "Manhattan"},
   { "_id" : 2, "name" : "Rock A Feller Bar and Grill", "borough" : "Queens"},
   { "_id" : 3, "name" : "Empire State Pub", "borough" : "Brooklyn"},
   { "_id" : 4, "name" : "Stan's Pizzaria", "borough" : "Manhattan"},
   { "_id" : 5, "name" : "Jane's Deli", "borough" : "Brooklyn"},
] )

----------------------------------------

TITLE: Testing Reduce Function Idempotence in JavaScript
DESCRIPTION: This snippet demonstrates how to test the idempotence of a reduce function. It compares the result of reducing a set of values with the result of reducing a set that includes a pre-reduced value.

LANGUAGE: javascript
CODE:
var reduceFunction2 = function(keySKU, valuesCountObjects) {
    reducedValue = { count: 0, qty: 0 };

    for (var idx = 0; idx < valuesCountObjects.length; idx++) {
        reducedValue.count += valuesCountObjects[idx].count;
        reducedValue.qty += valuesCountObjects[idx].qty;
    }

    return reducedValue;
};

var myKey = 'myKey';

var valuesIdempotent = [
    { count: 1, qty: 5 },
    { count: 2, qty: 10 },
    reduceFunction2(myKey, [ { count:3, qty: 15 } ] )
];

var values1 = [
    { count: 1, qty: 5 },
    { count: 2, qty: 10 },
    { count: 3, qty: 15 }
];

reduceFunction2(myKey, valuesIdempotent);
reduceFunction2(myKey, values1);

{ "count" : 6, "qty" : 30 }

----------------------------------------

TITLE: Basic $dayOfYear Syntax
DESCRIPTION: Basic syntax for the $dayOfYear operator that takes a date expression as input.

LANGUAGE: javascript
CODE:
{ $dayOfYear: <dateExpression> }

----------------------------------------

TITLE: Bitwise OR with Two Integers Using $bitOr in MongoDB Aggregation
DESCRIPTION: Demonstrates using $bitOr in a $project stage to perform a bitwise OR operation between fields 'a' and 'b' for each document in the 'switches' collection.

LANGUAGE: javascript
CODE:
db.switches.aggregate( [
  { 
    $project: { 
      result: { 
        $bitOr: [ "$a", "$b" ]
      }
    }
  }
])

----------------------------------------

TITLE: Using $where Operator in MongoDB Query
DESCRIPTION: Example of using the $where operator to execute a JavaScript function as part of a MongoDB query to find documents based on an MD5 hash condition.

LANGUAGE: javascript
CODE:
db.players.find( { $where: function() { 
   return (hex_md5(this.name) == "15b0a220baa16331e8d80e15367677ad") 
} } );

----------------------------------------

TITLE: Inserting Consolidated Daily Temperature Readings (JavaScript)
DESCRIPTION: Improved schema design that consolidates temperature readings into a single collection. This approach reduces the number of collections and indexes, improving performance and query efficiency.

LANGUAGE: javascript
CODE:
db.dailyTemperatures.insertMany( [
   {
      _id: ISODate("2024-05-10T00:00:00Z"),
      readings: [
         {
            timestamp: "2024-05-10T10:00:00Z",
            temperature: 60
         },
         {
            timestamp: "2024-05-10T11:00:00Z",
            temperature: 61
         },
         {
            timestamp: "2024-05-10T12:00:00Z",
            temperature: 64
         }
      ]
   },
   {
      _id: ISODate("2024-05-11T00:00:00Z"),
      readings: [
         {
            timestamp: "2024-05-11T10:00:00Z",
            temperature: 68
         },
         {
            timestamp: "2024-05-11T11:00:00Z",
            temperature: 72
         },
         {
            timestamp: "2024-05-11T12:00:00Z",
            temperature: 72
         }
      ]
   }
] )

----------------------------------------

TITLE: Defining ZonesRangeOverlap Inconsistency Format in JSON
DESCRIPTION: This snippet shows the JSON format for a ZonesRangeOverlap inconsistency document. It includes fields for the type, description, and details of the inconsistency, such as the namespace, collection UUID, and the overlapping zones.

LANGUAGE: json
CODE:
{
   type: "ZonesRangeOverlap",
   description: "<string>",
   details: {
      namespace: "<string>",
      collectionUUID: <string>,
      zoneA: {<document>},
      zoneB: {<document>}
   }
}

----------------------------------------

TITLE: Using the $in Operator in MongoDB Queries
DESCRIPTION: Illustrates how to use the $in operator to match any of the values specified in an array.

LANGUAGE: mongodb
CODE:
{ field: { $in: [ value1, value2, ... ] } }

----------------------------------------

TITLE: MongoDB Sessions Commands Structure in RST
DESCRIPTION: ReStructuredText markup defining the structure and navigation for MongoDB sessions commands documentation, including table of contents and command references.

LANGUAGE: rst
CODE:
.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. include:: /includes/extracts/commands-toc-explanation.rst

.. include:: /includes/table-sessions-commands.rst

.. toctree::
   :titlesonly:
   :hidden:

   abortTransaction </reference/command/abortTransaction>
   commitTransaction </reference/command/commitTransaction>
   endSessions </reference/command/endSessions>
   killAllSessions </reference/command/killAllSessions>
   killAllSessionsByPattern </reference/command/killAllSessionsByPattern>
   killSessions </reference/command/killSessions>
   refreshSessions </reference/command/refreshSessions>
   startSession </reference/command/startSession>

----------------------------------------

TITLE: Starting MongoDB Instance with Custom Port
DESCRIPTION: Bash command to start a MongoDB instance on a different port without replica set configuration for maintenance purposes.

LANGUAGE: bash
CODE:
mongod --dbpath /data/db1/ --port 37017 --bind_ip localhost,<hostname(s)|ip address(es)>

----------------------------------------

TITLE: Querying Encrypted Documents with MongoDB CSFLE in C#
DESCRIPTION: This C# code snippet demonstrates how to query a MongoDB collection for an encrypted document using both a CSFLE-configured client and a standard client. It highlights the difference in query results when using automatic encryption.

LANGUAGE: csharp
CODE:
var docWithAutomaticEncryption = encryptedCollection.Find(Builders<BsonDocument>.Filter.Eq("firstName", "Jon")).First();
Console.WriteLine("Document retrieved with CSFLE-enabled client:");
Console.WriteLine(docWithAutomaticEncryption);

var regularDoc = regularCollection.Find(Builders<BsonDocument>.Filter.Eq("firstName", "Jon")).First();
Console.WriteLine("\nDocument retrieved with standard client:");
Console.WriteLine(regularDoc);

----------------------------------------

TITLE: Querying MongoDB with $bitsAnyClear using BinData Bitmask
DESCRIPTION: This query demonstrates the use of $bitsAnyClear operator to test whether field 'a' has any bits clear at positions 4 and 5 using a BinData bitmask (binary 00110000).

LANGUAGE: javascript
CODE:
db.collection.find( { a: { $bitsAnyClear: BinData(0, "MA==") } } )

----------------------------------------

TITLE: Creating Indexes on MongoDB Collection
DESCRIPTION: Creates various indexes on the 'orders' collection to support the $planCacheStats examples, including a partial index.

LANGUAGE: javascript
CODE:
db.orders.createIndex( { item: 1 } );
db.orders.createIndex( { item: 1, quantity: 1 } );
db.orders.createIndex( { quantity: 1 } );
db.orders.createIndex( { quantity: 1, type: 1 } );
db.orders.createIndex(
   { item: 1, price: 1 },
   { partialFilterExpression: { price: { $gte: NumberDecimal("10")} } }
);

----------------------------------------

TITLE: Generated YAML Configuration for mongos
DESCRIPTION: This YAML configuration is the result of converting the mongos command-line options. It includes settings for networking, TLS, process management, security, sharding, and logging.

LANGUAGE: yaml
CODE:
net:
  bindIp: localhost,My-Example-MONGOS-Hostname
  tls:
    CAFile: /path/to/my/CA/file
    certificateKeyFile: /path/to/my/certificate/file
    clusterFile: /path/to/my/cluster/membership/file
    mode: requireTLS
outputConfig: true
processManagement:
  fork: true
security:
  clusterAuthMode: x509
sharding:
  configDB: myCSRS/cfg1.example.net:27019,cfg2.example.net:27019
systemLog:
  destination: file
  path: /var/log/mongodb/mongos.log

----------------------------------------

TITLE: Starting MongoDB Shell
DESCRIPTION: Launches the mongosh client without connecting to a database.

LANGUAGE: bash
CODE:
mongosh --nodb

----------------------------------------

TITLE: Creating Text Index in MongoDB
DESCRIPTION: Creates a text index on the 'subject' field in the articles collection.

LANGUAGE: javascript
CODE:
db.articles.createIndex( { subject: "text" } )

----------------------------------------

TITLE: MongoDB Shutdown Commands Reference
DESCRIPTION: Reference for MongoDB shutdown commands and parameters including db.shutdownServer(), shutdown command, and SIGTERM signal handling.

LANGUAGE: mongodb
CODE:
db.shutdownServer()
db.adminCommand({ shutdown: 1, force: true, timeoutSecs: 15 })

----------------------------------------

TITLE: Checking Feature Compatibility Version in MongoDB Shell
DESCRIPTION: Command to check the feature compatibility version of a MongoDB 6.0 deployment before upgrading to 7.0. The featureCompatibilityVersion must be set to 6.0.

LANGUAGE: javascript
CODE:
db.adminCommand( { getParameter: 1, featureCompatibilityVersion: 1 } )

----------------------------------------

TITLE: Querying a MongoDB View
DESCRIPTION: Demonstrates how to query a view and use projections to exclude specific fields from the results.

LANGUAGE: javascript
CODE:
db.firstYears.find({}, { _id: 0 } )

----------------------------------------

TITLE: Configuring MongoDB with TLS for X.509 Membership Authentication (Command-Line)
DESCRIPTION: Command-line options to configure a MongoDB instance to use X.509 certificates for cluster membership authentication with TLS. Includes settings for TLS mode, cluster authentication mode, certificate files, and binding IP addresses.

LANGUAGE: bash
CODE:
mongod --replSet <name> --tlsMode requireTLS --clusterAuthMode x509 --tlsClusterFile <path to membership certificate and key PEM file> --tlsCertificateKeyFile <path to TLS/SSL certificate and key file> --tlsCAFile <path to root CA file> --bind_ip localhost,<hostname(s)|ip address(es)>

----------------------------------------

TITLE: Adding a Secondary to an Existing Replica Set in MongoDB
DESCRIPTION: Shows how to add a new secondary member with default vote and priority settings to an existing replica set using a member configuration document.

LANGUAGE: javascript
CODE:
rs.add( { host: "mongodbd4.example.net:27017" } )

----------------------------------------

TITLE: Filtering Log Messages by Component
DESCRIPTION: A jq command to filter MongoDB log messages by the REPL component.

LANGUAGE: bash
CODE:
jq 'select(.c=="REPL")' /var/log/mongodb/mongod.log

----------------------------------------

TITLE: Config Server Startup Configuration
DESCRIPTION: Configuration options for starting upgraded config server nodes.

LANGUAGE: yaml
CODE:
sharding:
  clusterRole: configsvr
replication:
  replSetName: <string>
net:
  port: <port>
  bindIp: localhost,<ip address>
storage:
  dbpath: <path>

----------------------------------------

TITLE: Reloading Package Database for MongoDB Enterprise on Debian
DESCRIPTION: This snippet reloads the package database after adding the MongoDB Enterprise repository. It uses the apt-get update command to fetch the latest package information.

LANGUAGE: bash
CODE:
sudo apt-get update

----------------------------------------

TITLE: Creating Unique Index for Queryable Encryption in Go
DESCRIPTION: This snippet demonstrates how to create a unique index on the 'keyAltNames' field in the 'encryption.__keyVault' namespace using the MongoDB Go driver. It uses the CreateOne method of the IndexView with options to set the index as unique and apply a partial filter expression.

LANGUAGE: go
CODE:
_, err = keyVaultClient.Database("__keyVault").Collection("__keyVault").Indexes().CreateOne(
	context.TODO(),
	mongo.IndexModel{
		Keys: bson.D{{Key: "keyAltNames", Value: 1}},
		Options: options.Index().SetUnique(true).SetPartialFilterExpression(
			bson.D{{Key: "keyAltNames", Value: bson.D{{Key: "$exists", Value: true}}}},
		),
	},
)

----------------------------------------

TITLE: Dropping Multiple Indexes by Name in MongoDB (JavaScript)
DESCRIPTION: This snippet shows how to drop multiple indexes from a MongoDB collection by providing an array of index names to the db.collection.dropIndexes() method.

LANGUAGE: javascript
CODE:
db.collection.dropIndexes( [ "a_1_b_1", "a_1", "a_1__id_-1" ] )

----------------------------------------

TITLE: Querying Locations Near a Point Using MongoDB's $near Operator
DESCRIPTION: This snippet demonstrates how to use the $near operator to find documents with location fields near a specified point. It includes the $geometry and $maxDistance fields to define the search criteria.

LANGUAGE: javascript
CODE:
db.<collection>.find( {
   <location field> : {
      $near : {
         $geometry : {
            type : "Point",
            coordinates : [ <longitude>, <latitude> ]
         },
         $maxDistance : <distance in meters>
      }
    }
 } )

----------------------------------------

TITLE: Accessing PlanCache Help in MongoDB JavaScript
DESCRIPTION: Demonstrates how to access the help documentation for a collection's plan cache using the getPlanCache() method. This method must be called on a specific collection object.

LANGUAGE: javascript
CODE:
db.collection.getPlanCache().help()

----------------------------------------

TITLE: Checking Ubuntu Release Version in Bash
DESCRIPTION: This command displays the contents of the lsb-release file, which contains information about the Ubuntu release version running on the host system.

LANGUAGE: bash
CODE:
cat /etc/lsb-release

----------------------------------------

TITLE: Creating Unique Index for Queryable Encryption in Python
DESCRIPTION: This Python code creates a unique index on the keyAltNames field in the encryption.__keyVault namespace. It's essential for setting up MongoDB Queryable Encryption in a Python environment.

LANGUAGE: python
CODE:
key_vault = client.encryption.get_collection("__keyVault")
key_vault.create_index(
    "keyAltNames",
    unique=True,
    partialFilterExpression={"keyAltNames": {"$exists": True}},
)

----------------------------------------

TITLE: Cloning MongoDB SELinux Policy Repository
DESCRIPTION: Downloads the MongoDB SELinux policy repository from GitHub using git clone.

LANGUAGE: bash
CODE:
git clone https://github.com/mongodb/mongodb-selinux

----------------------------------------

TITLE: Splitting MongoDB Chunk Using sh.splitFind()
DESCRIPTION: Demonstrates how to split a chunk in a sharded collection 'test.foo' at the median point where the shard key value is x: 70. The method creates two roughly equal chunks from the original chunk.

LANGUAGE: javascript
CODE:
sh.splitFind( "test.foo", { x: 70 } )

----------------------------------------

TITLE: Creating Encrypted Collection for MongoDB Queryable Encryption
DESCRIPTION: This code shows how to create an encrypted collection using MongoDB Queryable Encryption. It specifies which fields to encrypt and their corresponding encryption keys.

LANGUAGE: javascript
CODE:
const encryptedFields = {
  fields: [
    {
      path: "customer.ssn",
      bsonType: "string",
      keyId: customerDek,
      queries: { queryType: "equality" }
    },
    {
      path: "customer.billing.card",
      bsonType: "string",
      keyId: customerDek
    },
    {
      path: "product.description",
      bsonType: "string",
      keyId: productDek,
      queries: { queryType: "equality" }
    },
    {
      path: "product.price",
      bsonType: "decimal",
      keyId: productDek,
      queries: { queryType: "range" }
    }
  ]
};

const database = "<Your Database Name>";
const collection = "<Your Collection Name>";

await client.db(database).createCollection(
  collection,
  { encryptedFields }
);

----------------------------------------

TITLE: Creating a Data Encryption Key with KeyVault.createKey() in MongoDB
DESCRIPTION: This snippet demonstrates the syntax for using the KeyVault.createKey() method. It shows how to retrieve the KeyVault object and create a new data encryption key using a locally managed key.

LANGUAGE: javascript
CODE:
keyVault = db.getMongo().getKeyVault()

keyVault.createKey(
  keyManagementService,
  customerMasterKey,
  [ "keyAltName" ]
)

LANGUAGE: javascript
CODE:
keyVault = encryptedClient.getKeyVault()
keyVault.createKey("local", ["data-encryption-key"])

----------------------------------------

TITLE: Results of MongoDB $ne Operator Aggregation
DESCRIPTION: Shows the output of the $ne operator example aggregation. Each document in the result set includes the item, qty, and the new qtyNe250 field indicating whether qty is not equal to 250.

LANGUAGE: javascript
CODE:
{ "item" : "abc1", "qty" : 300, "qtyNe250" : true }
{ "item" : "abc2", "qty" : 200, "qtyNe250" : true }
{ "item" : "xyz1", "qty" : 250, "qtyNe250" : false }
{ "item" : "VWZ1", "qty" : 300, "qtyNe250" : true }
{ "item" : "VWZ2", "qty" : 180, "qtyNe250" : true }

----------------------------------------

TITLE: Example MongoDB Document for $week Operator
DESCRIPTION: Demonstrates a sample document in a 'sales' collection that will be used to showcase the $week operator in an aggregation pipeline.

LANGUAGE: javascript
CODE:
{
  "_id" : 1,
  "item" : "abc",
  "price" : 10,
  "quantity" : 2,
  "date" : ISODate("2014-01-01T08:15:39.736Z")
}

----------------------------------------

TITLE: Configuring oidcIdentityProviders Parameter for MongoDB with Azure OIDC
DESCRIPTION: This YAML snippet shows the mapping between Azure Entra ID UI values and the corresponding fields in the MongoDB oidcIdentityProviders parameter. It includes the Application (client) ID and OpenID Connect metadata document URL.

LANGUAGE: yaml
CODE:
Microsoft Entra ID UI:                 MongoDB oidcIdentityProviders Parameter Field:
-----------------------                 ----------------------------------------------
Application (client) ID:                 | clientID
                                         | audience

OpenID Connect metadata document         issuer
(without /.well-known/openid-configuration):

----------------------------------------

TITLE: Binding MongoDB to IPv4 Addresses
DESCRIPTION: Configuration snippet showing how to bind MongoDB to all IPv4 addresses using the bind_ip setting.

LANGUAGE: shell
CODE:
0.0.0.0

----------------------------------------

TITLE: Including ShardingTaskExecutorPoolMinSize Parameter Example for MongoDB Config Servers
DESCRIPTION: This snippet uses reStructuredText directives to define replacements and include external content related to the ShardingTaskExecutorPoolMinSize parameter for MongoDB config servers.

LANGUAGE: reStructuredText
CODE:
.. |parameter| replace:: :parameter:`ShardingTaskExecutorPoolMinSize`
.. |maximum-or-minimum| replace:: minimum

.. include:: /includes/ShardingTaskExecutorPoolSizeForConfigServers-parameter-example.rst

----------------------------------------

TITLE: Retrieving Log Component Verbosity Settings in MongoDB
DESCRIPTION: This snippet demonstrates the output of the db.getLogComponents() method, which returns a document containing the verbosity settings for various log message components in MongoDB. The verbosity levels determine the amount of detail in log messages for each component.

LANGUAGE: javascript
CODE:
{
   "verbosity" : 0,
   "accessControl" : {
      "verbosity" : -1
   },
   "command" : {
      "verbosity" : -1
   },
   "control" : {
      "verbosity" : -1
   },
   "geo" : {
      "verbosity" : -1
   },
   "index" : {
      "verbosity" : -1
   },
   "network" : {
      "verbosity" : -1
   },
   "query" : {
      "verbosity" : 2
   },
   "replication" : {
      "verbosity" : -1,
      "election" : {
         "verbosity" : -1
      },
      "heartbeats" : {
         "verbosity" : -1
      },
      "initialSync" : {
         "verbosity" : -1
      },
      "rollback" : {
         "verbosity" : -1
      }
   },
   "sharding" : {
      "verbosity" : -1
   },
   "storage" : {
      "verbosity" : 2,
      "recovery" : {
         "verbosity" : -1
      },
      "journal" : {
         "verbosity" : -1
      }
   },
   "write" : {
      "verbosity" : -1
   }
}

----------------------------------------

TITLE: Querying MongoDB moveChunk Command with find Parameter
DESCRIPTION: Command syntax for moving a chunk using the find parameter to specify the chunk by shard key value. Executed via mongos on the admin database.

LANGUAGE: javascript
CODE:
db.adminCommand( { moveChunk : <namespace> ,
                       find : <query> ,
                       to : <string>,
                       forceJumbo: <boolean>,
                       _secondaryThrottle : <boolean>,
                       writeConcern: <document>,
                       _waitForDelete : <boolean> } )

----------------------------------------

TITLE: Aggregation Pipeline with $type
DESCRIPTION: Example aggregation query using $type operator in a $project stage to show the BSON type of field 'a'.

LANGUAGE: javascript
CODE:
db.coll.aggregate([{
    $project: {
       a : { $type: "$a" }
    }
}])

----------------------------------------

TITLE: Syntax Definition for rs.reconfigForPSASet in MongoDB
DESCRIPTION: Demonstrates the basic syntax for calling rs.reconfigForPSASet() method with memberIndex, configuration document, and optional parameters for force reconfiguration and timeout.

LANGUAGE: bash
CODE:
rs.reconfigForPSASet(
  memberIndex: <num>,
  config: <configuration>,
  {
    "force" : <boolean>,
    "maxTimeMS" : <int>
  }
)

----------------------------------------

TITLE: Inserting Documents into MongoDB Collection
DESCRIPTION: Inserts multiple documents into the 'articles' collection using the insertMany() method.

LANGUAGE: javascript
CODE:
db.articles.insertMany([
   { "_id" : 1, "title" : "cakes and ale" },
   { "_id" : 2, "title" : "more cakes" },
   { "_id" : 3, "title" : "bread" },
   { "_id" : 4, "title" : "some cakes" },
   { "_id" : 5, "title" : "two cakes to go" },
   { "_id" : 6, "title" : "pie" }
])

----------------------------------------

TITLE: Example Document in MongoDB Config Version Collection
DESCRIPTION: Sample document structure from the config.version collection, which stores the current metadata version number for the sharded cluster. This example shows how to query the collection using db.getCollection().

LANGUAGE: javascript
CODE:
{ "_id" : 1, "minCompatibleVersion" : 5, "currentVersion" : 6, "clusterId" : ObjectId("5d8bc01a690d8abbd2014ddd") }

db.getCollection("version").find()

----------------------------------------

TITLE: Updating Large Document
DESCRIPTION: Example of updating a large document to trigger a change stream event.

LANGUAGE: javascript
CODE:
db.myCollection.updateOne(
   { _id: 0 },
   { $set: { largeField: "b".repeat( 16 * 1024 * 1024 - 1024 ) } }
)

----------------------------------------

TITLE: Creating Custom Roles in MongoDB
DESCRIPTION: Creates custom roles for Marketing, Sales, Development, and Operations departments without specific privileges.

LANGUAGE: javascript
CODE:
db.createRole( { role: "Marketing", roles: [], privileges: [] } )
db.createRole( { role: "Sales", roles: [], privileges: [] } )
db.createRole( { role: "Development", roles: [], privileges: [] } )
db.createRole( { role: "Operations", roles: [], privileges: [] } )

----------------------------------------

TITLE: Default Write Concern Decision Logic in MongoDB 5.0
DESCRIPTION: Algorithm showing how MongoDB determines the default write concern based on the number of arbiters and non-arbiter nodes. The formula considers the majority of voting nodes and the presence of arbiters to set either {w: 1} or {w: "majority"}.

LANGUAGE: pseudo
CODE:
if [ (#arbiters > 0) AND (#non-arbiters <= majority(#voting-nodes)) ]
    defaultWriteConcern = { w: 1 }
else
    defaultWriteConcern = { w: "majority" }

----------------------------------------

TITLE: Running the Queryable Encryption Tutorial Script
DESCRIPTION: Command to execute the Python script that demonstrates Queryable Encryption with PyMongo. This script will connect to the MongoDB instance and perform encrypted operations.

LANGUAGE: shell
CODE:
python3 queryable_encryption_tutorial.py

----------------------------------------

TITLE: MongoDB Compass Document Format
DESCRIPTION: Shows the JSON format for documents to be inserted using MongoDB Compass. The structure matches the Shell example but uses strict JSON formatting with quoted keys.

LANGUAGE: javascript
CODE:
[
    { "item": "journal", "status": "A", "size": { "h": 14, "w": 21, "uom": "cm" }, "instock": [ { "warehouse": "A", "qty": 5 } ] },
    { "item": "notebook", "status": "A", "size": { "h": 8.5, "w": 11, "uom": "in" }, "instock": [ { "warehouse": "C", "qty": 5 } ] },
    { "item": "paper", "status": "D", "size": { "h": 8.5, "w": 11, "uom": "in" }, "instock": [ { "warehouse": "A", "qty": 60 } ] },
    { "item": "planner", "status": "D", "size": { "h": 22.85, "w": 30, "uom": "cm" }, "instock": [ { "warehouse": "A", "qty": 40 } ] },
    { "item": "postcard", "status": "A", "size": { "h": 10, "w": 15.25, "uom": "cm" }, "instock": [ { "warehouse": "B", "qty": 15 }, { "warehouse": "C", "qty": 35 } ] }
]

----------------------------------------

TITLE: Stepping Down Primary Node in MongoDB Replica Set
DESCRIPTION: This snippet demonstrates how to use the rs.stepDown() method in the MongoDB shell to step down the current primary node and force an election of a new primary in a replica set.

LANGUAGE: javascript
CODE:
rs.stepDown()

----------------------------------------

TITLE: Retrieving Single Cluster Parameter - MongoDB JavaScript
DESCRIPTION: Example showing how to retrieve a single cluster parameter named 'hostName' using the admin database.

LANGUAGE: javascript
CODE:
use admin
db.adminCommand( { getClusterParameter : "hostName" } )

----------------------------------------

TITLE: Unsharding to a Specific Shard in MongoDB
DESCRIPTION: This example demonstrates how to unshard the 'sales.us_accounts' collection and move its data to a specific shard (shard1) using the unshardCollection command.

LANGUAGE: javascript
CODE:
db.adminCommand( {
    unshardCollection: "sales.eu_accounts",
    toShard: "shard1"
} )

----------------------------------------

TITLE: Example Output for Update Operation with $lte in MongoDB
DESCRIPTION: Displays the resulting documents after updating the price field based on the carrier.fee comparison.

LANGUAGE: javascript
CODE:
{
  _id: ObjectId("61ba453ffe687fce2f04241a"),
  item: 'nuts',
  quantity: 30,
  carrier: { name: 'Shipit', fee: 3 },
  price: 9.99
},
{
  _id: ObjectId("61ba453ffe687fce2f04241b"),
  item: 'bolts',
  quantity: 50,
  carrier: { name: 'Shipit', fee: 4 },
  price: 9.99
},
{
  _id: ObjectId("61ba453ffe687fce2f04241c"),
  item: 'washers',
  quantity: 10,
  carrier: { name: 'Shipit', fee: 1 },
  price: 9.99
}

----------------------------------------

TITLE: Inserting Sample Documents into MongoDB Collection
DESCRIPTION: Inserting multiple documents into a MongoDB collection using the insertMany method.

LANGUAGE: javascript
CODE:
db.myColl.insertMany([
   { _id: 1, category: "café" },
   { _id: 2, category: "cafe" },
   { _id: 3, category: "cafE" }
])

----------------------------------------

TITLE: Specifying Index Order in MongoDB Drivers
DESCRIPTION: Demonstrates the equivalence of using NumberLong(1) and 1 for specifying index order in MongoDB drivers. Both methods result in the same index.

LANGUAGE: javascript
CODE:
NumberLong(1)

LANGUAGE: javascript
CODE:
1

----------------------------------------

TITLE: Converting a MongoDB Cursor to an Array in JavaScript
DESCRIPTION: This snippet demonstrates how to convert a MongoDB cursor to an array and access specific documents by index.

LANGUAGE: javascript
CODE:
var myCursor = db.inventory.find( { type: 2 } );
var documentArray = myCursor.toArray();
var myDocument = documentArray[3];

----------------------------------------

TITLE: Equivalent $convert Expression - MongoDB JavaScript
DESCRIPTION: Demonstrates the equivalent $convert expression that $toDouble is a shorthand for.

LANGUAGE: javascript
CODE:
{ $convert: { input: <expression>, to: "double" } }

----------------------------------------

TITLE: Setting Open File Descriptor Limit
DESCRIPTION: Command to modify the number of file descriptors a process can open.

LANGUAGE: bash
CODE:
ulimit -n <value>

----------------------------------------

TITLE: Temperature Conversion Aggregation - MongoDB JavaScript
DESCRIPTION: Aggregation pipeline that converts temperature strings to double values using $toDouble and string manipulation.

LANGUAGE: javascript
CODE:
tempConversionStage = { 
   $addFields: { 
      degrees: { $toDouble: { $substrBytes: [ "$temp", 0, 4 ] } } 
   }
};

db.weather.aggregate( [
   tempConversionStage,
] )

----------------------------------------

TITLE: Unsupported $let Expression with Encrypted Fields in MongoDB Aggregation
DESCRIPTION: This example demonstrates an unsupported use of the $let expression in a MongoDB aggregation pipeline when working with encrypted fields. The expression attempts to bind a variable to an encrypted field, which is not allowed.

LANGUAGE: javascript
CODE:
{ 
  $let: {
    "vars" : {
      "newVariable" : "$encryptedField"
    }
  }
}

----------------------------------------

TITLE: Querying Encrypted Documents with Go
DESCRIPTION: This snippet shows how to query for a document with encrypted fields using Go. It demonstrates the query process both with and without automatic Queryable Encryption configuration.

LANGUAGE: go
CODE:
// Find the document with automatic encryption
var encryptedResult bson.M
err = encryptedColl.FindOne(context.TODO(), bson.D{{"encryptedField", "123456789"}}).Decode(&encryptedResult)
if err != nil {
    panic(err)
}
fmt.Println("Document retrieved with automatic encryption:", encryptedResult)

// Find the document without automatic encryption
var unencryptedResult bson.M
err = unencryptedColl.FindOne(context.TODO(), bson.D{{"encryptedField", "123456789"}}).Decode(&unencryptedResult)
if err != nil {
    panic(err)
}
fmt.Println("Document retrieved without automatic encryption:", unencryptedResult)

----------------------------------------

TITLE: Sample Document Structure
DESCRIPTION: Example of a document structure used in the orders collection for demonstration purposes.

LANGUAGE: javascript
CODE:
db.orders.insertOne(
   {
      _id: ObjectId("563237a41a4d68582c2509da"),
      stock: "Brent Crude Futures",
      qty: 250,
      type: "buy-limit",
      limit: 48.90,
      creationts: ISODate("2015-11-01T12:30:15Z"),
      expiryts: ISODate("2015-11-01T12:35:15Z"),
      client: "Crude Traders Inc."
   }
)

----------------------------------------

TITLE: Inserting Customer Data in MongoDB
DESCRIPTION: Inserts a sample customer document into the 'customers' collection in MongoDB.

LANGUAGE: javascript
CODE:
db.customers.insertOne( {
   customerId: 123,
   name: "Alexa Edwards",
   email: "a.edwards@randomEmail.com",
   phone: "202-555-0183"
} )

----------------------------------------

TITLE: Querying MongoDB with $centerSphere Using Kilometers Converted to Radians
DESCRIPTION: This snippet shows a MongoDB query using the $centerSphere operator with a distance of 500 kilometers converted to radians. It searches for documents where the 'address' field is within the specified circular area.

LANGUAGE: javascript
CODE:
db.contacts.find(
   {
      address:
         {
            $geoWithin:
               {
                  $centerSphere:
                     [
                        [ 55, 42 ] ,
                        500 / 6378.1
                     ]
               }
         }
   }
)

----------------------------------------

TITLE: Logging out of MongoDB database using db.logout()
DESCRIPTION: This snippet demonstrates how to use the db.logout() method to end the current authentication session in MongoDB. It's important to note that this method is deprecated as of MongoDB 5.0 and will be removed in a future release.

LANGUAGE: javascript
CODE:
db.logout()

----------------------------------------

TITLE: Inserting Encrypted Document with C#
DESCRIPTION: This C# code snippet shows how to insert an encrypted document using MongoDB's Queryable Encryption. It utilizes a Queryable Encryption enabled MongoClient to insert a document into the 'medicalRecords.patients' namespace.

LANGUAGE: csharp
CODE:
// Code snippet not provided in the given content

----------------------------------------

TITLE: Querying Non-Existent Fields in MongoDB Compass
DESCRIPTION: Shows the query filter document used in MongoDB Compass to find documents where the 'item' field does not exist.

LANGUAGE: javascript
CODE:
{ item : { $exists: false } }

----------------------------------------

TITLE: Querying Encrypted Documents with C#
DESCRIPTION: This C# snippet shows how to query encrypted documents using both a Queryable Encryption-enabled client and a standard client. It demonstrates the difference in results when querying encrypted fields in MongoDB.

LANGUAGE: csharp
CODE:
start-find
// Query for the document with a QE-enabled client
var qeResult = await encryptedCollection.Find(Builders<BsonDocument>.Filter.Eq("encryptedField", "123456789")).FirstOrDefaultAsync();
Console.WriteLine("Document retrieved with QE-enabled client:");
Console.WriteLine(qeResult.ToJson());

// Query for the document with a standard client
var standardResult = await standardCollection.Find(Builders<BsonDocument>.Filter.Eq("encryptedField", "123456789")).FirstOrDefaultAsync();
Console.WriteLine("\nDocument retrieved with standard client:");
Console.WriteLine(standardResult.ToJson());
end-find

----------------------------------------

TITLE: Valid Document Insertion Example
DESCRIPTION: Shows a successful document insertion where the totalWithVAT value correctly matches the calculated value based on total and VAT fields.

LANGUAGE: javascript
CODE:
db.orders.insertOne( {
   total: NumberDecimal("141"),
   VAT: NumberDecimal("0.20"),
   totalWithVAT: NumberDecimal("169.2")
} )

----------------------------------------

TITLE: MongoDB Atlas Search Commands Table in RST
DESCRIPTION: ReStructuredText table defining the core Atlas Search commands including createSearchIndexes, dropSearchIndex, and updateSearchIndex. Each command is listed with a description placeholder that references external included files.

LANGUAGE: rst
CODE:
.. list-table::
   :widths: 30,70
   :header-rows: 1

   * - Name

     - Description

   * - :dbcommand:`createSearchIndexes`

     - .. include:: /includes/atlas-search-commands/command-descriptions/createSearchIndexes-description.rst

   * - :dbcommand:`dropSearchIndex`

     - .. include:: /includes/atlas-search-commands/command-descriptions/dropSearchIndex-description.rst

   * - :dbcommand:`updateSearchIndex`

     - .. include:: /includes/atlas-search-commands/command-descriptions/updateSearchIndex-description.rst

----------------------------------------

TITLE: Creating MongoDB Collection with JSON Schema Validation
DESCRIPTION: Creates a students collection with schema validation rules using $jsonSchema operator. Defines required fields and validation constraints for name and year fields.

LANGUAGE: javascript
CODE:
db.createCollection("students", {
   validator: {
      $jsonSchema: {
         bsonType: "object",
         required: [ "name", "year", "major", "address" ],
         properties: {
            name: {
               bsonType: "string",
               description: "must be a string and is required"
            },
            year: {
               bsonType: "int",
               minimum: 2017,
               maximum: 3017,
               description: "must be an integer in [ 2017, 3017 ] and is required"
            }
         }
      }
   }
} )

----------------------------------------

TITLE: Inserting Initial Contact Document in MongoDB
DESCRIPTION: Creates a basic contact document with home and work phone numbers using the initial schema version.

LANGUAGE: javascript
CODE:
db.contacts.insertOne(
   {
      _id: 1,
      name: "Taylor",
      home: "209-555-7788",
      work: "503-555-0110"
   }
)

----------------------------------------

TITLE: Disabling Query Sampling
DESCRIPTION: Example showing how to disable query sampling on the test.students collection by setting mode to 'off'.

LANGUAGE: javascript
CODE:
db.adminCommand(
   {
     configureQueryAnalyzer: "test.students",
     mode: "off"
   } 
)

----------------------------------------

TITLE: Deleting Multiple Documents in MongoDB using Motor (Python Async Driver)
DESCRIPTION: This snippet shows how to delete multiple documents using the MongoDB Motor driver for asynchronous Python. The actual code is not provided in the snippet, but it references an external file.

LANGUAGE: python
CODE:
# Code is referenced from an external file:
# /driver-examples/test_examples_motor.py

----------------------------------------

TITLE: Viewing Change Stream Options in MongoDB
DESCRIPTION: Command to view current changeStreamOptions cluster parameter values from the admin database.

LANGUAGE: javascript
CODE:
db.adminCommand( { getClusterParameter: "changeStreamOptions" } )

----------------------------------------

TITLE: Example of Moving an Unsharded Collection in MongoDB
DESCRIPTION: Shows how to use sh.moveCollection() to move an unsharded collection named 'inventory' from the 'app' database to the 'shard02' shard.

LANGUAGE: javascript
CODE:
sh.moveCollection( "app.inventory", "shard02" )

----------------------------------------

TITLE: Setting MongoDB Clustered Index Key
DESCRIPTION: Defines the clustered index key configuration using the _id field.

LANGUAGE: javascript
CODE:
"key": { _id: 1 }

----------------------------------------

TITLE: Initial Replica Set Configuration Example
DESCRIPTION: Example replica set configuration showing a basic three-member setup without priority settings.

LANGUAGE: javascript
CODE:
{
    "_id" : "rs",
    "version" : 7,
    "members" : [
        {
            "_id" : 0,
            "host" : "m1.example.net:27017"
        },
        {
            "_id" : 1,
            "host" : "m2.example.net:27017"
        },
        {
            "_id" : 2,
            "host" : "m3.example.net:27017"
        }
    ]
}

----------------------------------------

TITLE: Locking Database with fsync Command
DESCRIPTION: Example of using fsync command to lock the database against writes by setting the lock field to true.

LANGUAGE: javascript
CODE:
db.adminCommand( { fsync: 1, lock: true } )

----------------------------------------

TITLE: Checking Index Consistency in MongoDB Sharded Clusters
DESCRIPTION: Shows how to use the checkMetadataConsistency command to verify consistent indexes across shards in a MongoDB cluster.

LANGUAGE: javascript
CODE:
db.runCommand( {
   checkMetadataConsistency: 1,
   checkIndexes: true
} )

----------------------------------------

TITLE: Creating Index on Embedded Field in MongoDB
DESCRIPTION: Creates an ascending index on the 'state' field within the 'location' embedded document.

LANGUAGE: javascript
CODE:
db.students.createIndex( { "location.state": 1 } )

----------------------------------------

TITLE: Adding Nodes to MongoDB Replica Set
DESCRIPTION: Adds additional nodes to the replica set using the rs.add() method, specifying hostnames and ports.

LANGUAGE: javascript
CODE:
rs.add("mongodb1.example.net:27017")
rs.add("mongodb2.example.net:27017")

----------------------------------------

TITLE: MongoDB Shell Query
DESCRIPTION: Demonstrates how to query MongoDB collection 'inventory' to find documents where status equals 'A' using the MongoDB shell.

LANGUAGE: javascript
CODE:
db.inventory.find( { status: "A" } )

----------------------------------------

TITLE: Inserting Encrypted Document with CSFLE in Node.js
DESCRIPTION: Node.js code snippet for inserting a Client-Side Field Level Encrypted document into MongoDB. Uses a CSFLE-enabled MongoClient to insert the document into the 'medicalRecords.patients' namespace.

LANGUAGE: javascript
CODE:
await collection.insertOne({
  firstName: "Jon",
  lastName: "Doe",
  patientId: 12345678,
  address: "157 Electric Ave.",
  patientRecord: {
    ssn: 987654321,
    billing: {
      type: "Visa",
      number: "4111111111111111"
    }
  }
});

----------------------------------------

TITLE: Sample Queries Using Included Fields in Wildcard Index
DESCRIPTION: Example queries that utilize the fields included in the wildcard index projection.

LANGUAGE: javascript
CODE:
db.products.find( { "attributes.size.height" : 10 } )
db.products.find( { "attributes.color" : "blue" } )

db.products.find ( { "item": "milk" } )

----------------------------------------

TITLE: Defining $denseRank Syntax in MongoDB
DESCRIPTION: Basic syntax definition for the $denseRank operator, which takes no parameters and must be used within the $setWindowFields stage.

LANGUAGE: none
CODE:
{ $denseRank: { } }

----------------------------------------

TITLE: Using $replaceRoot with $ifNull in MongoDB Aggregation
DESCRIPTION: Shows how to use $replaceRoot with $ifNull to specify a fallback document when the 'name' field is missing, avoiding errors in the aggregation pipeline.

LANGUAGE: javascript
CODE:
db.collection.aggregate([
   { $replaceRoot: { newRoot: { $ifNull: [ "$name", { _id: "$_id", missingName: true} ] } } }
])

----------------------------------------

TITLE: Alternative Syntax for startSession Command in MongoDB
DESCRIPTION: This snippet shows an alternative way to execute the startSession command in MongoDB. It uses the same db.runCommand() method but with a slightly different formatting.

LANGUAGE: javascript
CODE:
db.runCommand( 
   { 
     startSession: 1 
   } 
)

----------------------------------------

TITLE: MongoDB fsyncLock Subsequent Call Response
DESCRIPTION: Example response showing incremented lock count when fsyncLock is called multiple times.

LANGUAGE: javascript
CODE:
{
   "info" : "now locked against writes, use db.fsyncUnlock() to unlock",
   "lockCount" : NumberLong(2),
   "seeAlso" : "http://dochub.mongodb.org/core/fsynccommand",
   "ok" : 1
}

----------------------------------------

TITLE: Example Output of Multiple Fill Methods
DESCRIPTION: Sample output showing the results of applying both linear interpolation and last-observation-carried-forward methods to fill missing price values. The output demonstrates how each method handles gaps in the time series data differently.

LANGUAGE: javascript
CODE:
[
  {
    _id: ObjectId("620ad555394d47411658b5ef"),
    time: ISODate("2021-03-08T09:00:00.000Z"),
    price: 500,
    linearFillPrice: 500,
    locfPrice: 500
  },
  {
    _id: ObjectId("620ad555394d47411658b5f0"),
    time: ISODate("2021-03-08T10:00:00.000Z"),
    linearFillPrice: 507.5,
    locfPrice: 500
  },
  {
    _id: ObjectId("620ad555394d47411658b5f1"),
    time: ISODate("2021-03-08T11:00:00.000Z"),
    price: 515,
    linearFillPrice: 515,
    locfPrice: 515
  },
  {
    _id: ObjectId("620ad555394d47411658b5f2"),
    time: ISODate("2021-03-08T12:00:00.000Z"),
    linearFillPrice: 505,
    locfPrice: 515
  },
  {
    _id: ObjectId("620ad555394d47411658b5f3"),
    time: ISODate("2021-03-08T13:00:00.000Z"),
    linearFillPrice: 495,
    locfPrice: 515
  },
  {
    _id: ObjectId("620ad555394d47411658b5f4"),
    time: ISODate("2021-03-08T14:00:00.000Z"),
    price: 485,
    linearFillPrice: 485,
    locfPrice: 485
  }
]

----------------------------------------

TITLE: Aggregation Pipeline for Converting Angles
DESCRIPTION: MongoDB aggregation pipeline that converts three angles from radians to degrees using $radiansToDegrees and $addFields.

LANGUAGE: bash
CODE:
db.trigangles.aggregate([
  {
    $addFields: {
      "angle_a_deg" : { $radiansToDegrees : "$angle_a"},
      "angle_b_deg" : { $radiansToDegrees : "$angle_b"},
      "angle_c_deg" : { $radiansToDegrees : "$angle_c"}
    }
  }
])

----------------------------------------

TITLE: Querying Encrypted Documents with CSFLE (Go)
DESCRIPTION: Demonstrates document retrieval using Go MongoDB driver with CSFLE configuration. Shows comparison between encrypted and non-encrypted document access.

LANGUAGE: go
CODE:
start-find
end-find

----------------------------------------

TITLE: Setting MongoDB Encryption Environment Variable for Linux
DESCRIPTION: Instructions for configuring the LIBMONGOCRYPT_PATH environment variable on Linux systems to point to the libmongocrypt library location.

LANGUAGE: shell
CODE:
LIBMONGOCRYPT_PATH=/path/to/libmongocrypt

----------------------------------------

TITLE: Executing getShardMap Command in MongoDB
DESCRIPTION: Basic syntax for running the getShardMap command to retrieve cluster topology information.

LANGUAGE: javascript
CODE:
db.runCommand("getShardMap")

----------------------------------------

TITLE: Example Document for MongoDB $millisecond Operator
DESCRIPTION: Provides a sample document structure in a 'sales' collection, which will be used to demonstrate the $millisecond operator in an aggregation pipeline.

LANGUAGE: javascript
CODE:
{
  "_id" : 1,
  "item" : "abc",
  "price" : 10,
  "quantity" : 2,
  "date" : ISODate("2014-01-01T08:15:39.736Z")
}

----------------------------------------

TITLE: Using References in MongoDB Article Collection
DESCRIPTION: Example of using references between articles and authors collections. Shows how to store the authorId as a reference in the article document.

LANGUAGE: javascript
CODE:
db.articles.insertOne(
   {
      title: "My Favorite Vacation",
      date: ISODate("2023-06-02"),
      text: "We spent seven days in Italy...",
      authorId: 987,
      tags: [
         {
            name: "travel",
            url: "<blog-site>/tags/travel"
         },
         {
            name: "adventure",
            url: "<blog-site>/tags/adventure"
         }
      ],
      comments: [
         {
            name: "pedro345",
            text: "Great article!"
         }
      ]
   }
)

----------------------------------------

TITLE: Setting KRB5_KTNAME Environment Variable
DESCRIPTION: Example of setting the KRB5_KTNAME environment variable in a configuration file for MongoDB.

LANGUAGE: javascript
CODE:
KRB5_KTNAME="<path to keytab>"

----------------------------------------

TITLE: Running C# Application
DESCRIPTION: Command to execute the C# application using dotnet CLI

LANGUAGE: shell
CODE:
dotnet run QueryableEncryptionExample.csproj

----------------------------------------

TITLE: Evaluating Index Usage with MongoDB Aggregation
DESCRIPTION: Uses the $indexStats aggregation stage to evaluate the usage of indexes in the 'courses' collection.

LANGUAGE: javascript
CODE:
db.courses.aggregate( [ { $indexStats: { } } ] )

----------------------------------------

TITLE: Defining $dateFromParts Syntax in MongoDB Aggregation
DESCRIPTION: Demonstrates the basic syntax for using $dateFromParts to construct a Date object from individual components like year, month, day, hour, etc.

LANGUAGE: javascript
CODE:
{
    $dateFromParts : {
        'year': <year>, 'month': <month>, 'day': <day>,
        'hour': <hour>, 'minute': <minute>, 'second': <second>,
        'millisecond': <ms>, 'timezone': <tzExpression>
    }
}

----------------------------------------

TITLE: Terminating MongoDB Process via Command Line
DESCRIPTION: Examples of forcibly terminating the MongoDB process using command line operations, which is not recommended due to potential data inconsistencies and startup issues.

LANGUAGE: shell
CODE:
kill

LANGUAGE: shell
CODE:
sudo systemctl stop mongod

LANGUAGE: shell
CODE:
sudo service mongod stop

----------------------------------------

TITLE: Setting MongoDB LDAP Health Monitoring Interval in Configuration File
DESCRIPTION: YAML configuration example showing how to persistently set the LDAP health monitoring interval to 200ms in the mongos config file.

LANGUAGE: yaml
CODE:
setParameter:
     healthMonitoringIntervals: "{ values: [{type: \"ldap\", interval: 200}] }"

----------------------------------------

TITLE: Updating and Sorting Non-Document Array in MongoDB
DESCRIPTION: Adds new elements to the 'tests' array and sorts all elements in ascending order.

LANGUAGE: javascript
CODE:
db.students.updateOne(
   { _id: 2 },
   { $push: { tests: { $each: [ 40, 60 ], $sort: 1 } } }
)

----------------------------------------

TITLE: Basic $toBool Syntax
DESCRIPTION: Shows the basic syntax for using the $toBool operator in MongoDB aggregation pipeline

LANGUAGE: javascript
CODE:
{
   $toBool: <expression>
}

----------------------------------------

TITLE: Checking MongoDB Version in Bash
DESCRIPTION: This command runs the mongod executable with the --version flag to display version information. The output should be checked for 'modules: subscription' or 'modules: enterprise' to confirm the use of MongoDB Enterprise.

LANGUAGE: bash
CODE:
mongod --version

----------------------------------------

TITLE: Dense Ranking by Quantity Partitioned by State
DESCRIPTION: Example showing how to use $denseRank to rank cake sales quantities within state partitions, sorting in descending order.

LANGUAGE: javascript
CODE:
db.cakeSales.aggregate( [
   {
      $setWindowFields: {
         partitionBy: "$state",
         sortBy: { quantity: -1 },
         output: {
            denseRankQuantityForState: {
               $denseRank: {}  
            }
         }
      }
   }
] )

----------------------------------------

TITLE: MongoDB Log Format for Index Build Status
DESCRIPTION: Example log messages showing the format of index build progress notifications when an index build is stopped and resumed.

LANGUAGE: bash
CODE:
"msg":"Index build: wrote resumable state to disk",

"msg":"Found index from unfinished build"

----------------------------------------

TITLE: MongoDB Log Format for Index Build Status
DESCRIPTION: Example log messages showing the format of index build progress notifications when an index build is stopped and resumed.

LANGUAGE: bash
CODE:
"msg":"Index build: wrote resumable state to disk",

"msg":"Found index from unfinished build"

----------------------------------------

TITLE: Structuring RST Documentation for MongoDB CSFLE Limitations
DESCRIPTION: ReStructuredText markup defining the documentation structure for MongoDB CSFLE limitations, including metadata, section headers, and content organization.

LANGUAGE: rst
CODE:
.. meta::
   :keywords: CSFLE, in-use encryption, security, supported operations

.. _csfle-reference-encryption-limits:

=================
CSFLE Limitations
=================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

----------------------------------------

TITLE: Creating MongoDB Client with Automatic Encryption Settings
DESCRIPTION: This snippet demonstrates how to create a MongoDB client with automatic encryption settings. It uses the previously defined variables for key vault, KMS providers, and encryption schema to configure the client.

LANGUAGE: javascript
CODE:
const client = new MongoClient(uri, {
  autoEncryption: {
    keyVaultNamespace,
    kmsProviders,
    schemaMap: {
      "<database>.<collection>": schema,
    },
    extraOptions: extraOptions,
  },
});

----------------------------------------

TITLE: Downgrading MongoDB Feature Compatibility Version using JavaScript
DESCRIPTION: Demonstrates how to downgrade MongoDB's feature compatibility version to 4.4 using the setFeatureCompatibilityVersion command. This command is idempotent and can be safely retried if the operation fails to complete.

LANGUAGE: javascript
CODE:
db.adminCommand({setFeatureCompatibilityVersion: "4.4"})

----------------------------------------

TITLE: Switching to productsAndReviews Database in MongoDB
DESCRIPTION: Switches the current database context to 'productsAndReviews' in MongoDB.

LANGUAGE: javascript
CODE:
use productsAndReviews

----------------------------------------

TITLE: Fixing UUID Usage in SCons for Cache Temporary Files
DESCRIPTION: Updates the vendored SCons to use UUID for cache temporary files, addressing the issue SERVER-54458.

LANGUAGE: python
CODE:
# Update vendored scons to use uuid for cache tmpfiles

----------------------------------------

TITLE: Sample Collection Data
DESCRIPTION: Example document structure showing various date formats and timezone configurations in a logmessages collection.

LANGUAGE: javascript
CODE:
{ _id: 1, date: "2017-02-08T12:10:40.787", timezone: "America/New_York", message: "Step 1: Started" },
{ _id: 2, date: "2017-02-08", timezone: "-05:00", message: "Step 1: Ended" },
{ _id: 3, message: " Step 1: Ended " },
{ _id: 4, date: "2017-02-09", timezone: "Europe/London", message: "Step 2: Started"},
{ _id: 5, date: "2017-02-09T03:35:02.055", timezone: "+0530", message: "Step 2: In Progress"}

----------------------------------------

TITLE: Querying with $in and Regular Expression in MongoDB JavaScript
DESCRIPTION: This code snippet shows a query using the $in operator with a regular expression on a field indexed by a hash index. The issue where documents were not found in this scenario has been addressed.

LANGUAGE: javascript
CODE:
{field: {$in: [/regex/]}}

----------------------------------------

TITLE: Update and Return Example
DESCRIPTION: An example of using findAndModify to update a document and return the original version.

LANGUAGE: javascript
CODE:
db.runCommand(
   {
     findAndModify: "people",
     query: { name: "Tom", state: "active", rating: { $gt: 10 } },
     sort: { rating: 1 },
     update: { $inc: { score: 1 } }
   }
)

----------------------------------------

TITLE: Creating Index in Java
DESCRIPTION: Creates a unique index on the keyAltNames field in the encryption.__keyVault collection using Java sync driver

LANGUAGE: java
CODE:
keyVault.createIndex(
    Indexes.ascending("keyAltNames"),
    new IndexOptions()
        .unique(true)
        .partialFilterExpression(Filters.exists("keyAltNames"))
);

----------------------------------------

TITLE: Creating init.d Script for Disabling THP
DESCRIPTION: Bash script that disables Linux Transparent Hugepages. The script checks for THP paths in different locations and sets both enabled and defrag settings to 'never'.

LANGUAGE: sh
CODE:
#!/bin/bash
### BEGIN INIT INFO
# Provides:          disable-transparent-hugepages
# Required-Start:    $local_fs
# Required-Stop:
# X-Start-Before:    mongod mongodb-mms-automation-agent
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Disable Linux Transparent Hugepages
# Description:       Disable Linux Transparent Hugepages, to improve
#                    database performance.
### END INIT INFO

case $1 in
  start)
    if [ -d /sys/kernel/mm/transparent_hugepage ]; then
      thp_path=/sys/kernel/mm/transparent_hugepage
    elif [ -d /sys/kernel/mm/redhat_transparent_hugepage ]; then
      thp_path=/sys/kernel/mm/redhat_transparent_hugepage
    else
      return 0
    fi

    echo 'never' | tee /sys/kernel/mm/transparent_hugepage/enabled > /dev/null && echo 'never' | tee /sys/kernel/mm/transparent_hugepage/defrag > /dev/null

    unset thp_path
    ;;
esac

----------------------------------------

TITLE: Checking MongoDB Version
DESCRIPTION: This bash command checks the version of the MongoDB binary. It's used to confirm that the new 7.0 binaries are correctly installed.

LANGUAGE: bash
CODE:
mongod --version

----------------------------------------

TITLE: Inserting Sample Store Data in MongoDB
DESCRIPTION: Creates a collection named 'stores' with sample documents containing store information including names and descriptions.

LANGUAGE: javascript
CODE:
db.stores.insertMany(
   [
     { _id: 1, name: "Java Hut", description: "Coffee and cakes" },
     { _id: 2, name: "Burger Buns", description: "Gourmet hamburgers" },
     { _id: 3, name: "Coffee Shop", description: "Just coffee" },
     { _id: 4, name: "Clothes Clothes Clothes", description: "Discount clothing" },
     { _id: 5, name: "Java Shopping", description: "Indonesian goods" },
     { _id: 6, name: "NYC_Coffee Shop", description: "local NYC coffee" }
   ]
)

----------------------------------------

TITLE: Rewrapping Data Encryption Keys using KeyVault.rewrapManyDataKey() in MongoDB
DESCRIPTION: This snippet demonstrates how to use the KeyVault.rewrapManyDataKey() method to rotate Data Encryption Keys (DEKs) in MongoDB. It allows for specifying a query filter to select keys, the KMS provider, and optionally a new Customer Master Key (CMK) for rewrapping.

LANGUAGE: javascript
CODE:
let keyVault = db.getMongo().getKeyVault()

keyVault.rewrapManyDataKey(
   { 
      "<Query filter document>" 
   },
   {
      provider: "<KMS provider>",
      masterKey: {
         "<dataKeyOpts Key>" : "<dataKeyOpts Value>"
      }
   }
)

----------------------------------------

TITLE: Querying Null Fields in MongoDB Compass
DESCRIPTION: This snippet shows the query filter document to use in MongoDB Compass for finding documents where the 'item' field is null.

LANGUAGE: javascript
CODE:
{ item: null }

----------------------------------------

TITLE: Basic Collection Validation Example
DESCRIPTION: Example showing how to validate a collection using default settings with full validation disabled.

LANGUAGE: javascript
CODE:
db.runCommand( { validate: "myCollection" } )

----------------------------------------

TITLE: Using $or in MongoDB Aggregation Pipeline with $project Stage
DESCRIPTION: Demonstrates how to use the $or operator within a $project stage of an aggregation pipeline. This example checks if the quantity is greater than 250 or less than 200.

LANGUAGE: javascript
CODE:
db.inventory.aggregate(
   [
     {
       $project:
          {
            item: 1,
            result: { $or: [ { $gt: [ "$qty", 250 ] }, { $lt: [ "$qty", 200 ] } ] }
          }
     }
   ]
)

----------------------------------------

TITLE: Executing replSetAbortPrimaryCatchUp Command in MongoDB
DESCRIPTION: Command to force the elected primary member of a replica set to abort synchronization and complete transition to primary status. Takes a value of 1 to execute.

LANGUAGE: javascript
CODE:
db.runCommand(
   { 
     replSetAbortPrimaryCatchUp: 1 
   }
)

----------------------------------------

TITLE: Example Document in MongoDB Config Tags Collection
DESCRIPTION: Sample document structure from the config.tags collection, which stores information about zone ranges in the sharded cluster. This example shows a document for a single zone range.

LANGUAGE: javascript
CODE:
{
    "_id" : { "ns" : "records.users", "min" : { "zipcode" : "10001" } },
    "ns" : "records.users",
    "min" : { "zipcode" : "10001" },
    "max" : { "zipcode" : "10281" },
    "tag" : "NYC"
}

----------------------------------------

TITLE: MongoDB Shell Authentication with Password Prompt
DESCRIPTION: Shows authentication using the passwordPrompt() method for secure password entry.

LANGUAGE: javascript
CODE:
db.auth( <username>, passwordPrompt() )

----------------------------------------

TITLE: Check Database Lock Status Function
DESCRIPTION: JavaScript function to check if the MongoDB server is currently locked using db.currentOp().

LANGUAGE: javascript
CODE:
serverIsLocked = function () {
    var co = db.currentOp();
    if (co && co.fsyncLock) {
        return true;
    }
    return false;
}

----------------------------------------

TITLE: MongoDB Aggregation Pipeline with $sampleRate
DESCRIPTION: Complete example showing how to use $sampleRate in an aggregation pipeline with a count stage.

LANGUAGE: javascript
CODE:
db.collection.aggregate(
   [
     { $match: { $sampleRate: 0.33 } },
     { $count: "numMatches" }
   ]
)

----------------------------------------

TITLE: Defining MongoDB 7.2 Changelog Structure in reStructuredText
DESCRIPTION: This snippet sets up the structure for the MongoDB 7.2 changelog document. It defines the document title, sets the default domain to MongoDB, and includes a table of contents. It also uses inclusion directives to incorporate changelogs for specific releases.

LANGUAGE: reStructuredText
CODE:
:orphan:

.. _7.2-changelog-full:

=============
7.2 Changelog
=============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. include:: /includes/changelogs/releases/7.2.2.rst
.. include:: /includes/changelogs/releases/7.2.1.rst

----------------------------------------

TITLE: Generating CMK in Unix/macOS Shell
DESCRIPTION: Generates a 96-byte random key using /dev/urandom, encodes it to base64, and removes newlines. The output should be saved to customer-master-key.txt file.

LANGUAGE: sh
CODE:
echo $(head -c 96 /dev/urandom | base64 | tr -d '\n')

----------------------------------------

TITLE: V1 Index Warning Message
DESCRIPTION: Warning message format when encountering non-V1 indexes during upgrade check.

LANGUAGE: none
CODE:
Warning: upgradeCheck only supports V1 indexes. Skipping index: <indexSpec>

----------------------------------------

TITLE: Creating a Collection with English Collation in MongoDB
DESCRIPTION: This snippet demonstrates how to create a collection named 'collationTest' with an English locale collation in MongoDB.

LANGUAGE: javascript
CODE:
db.createCollection(
   "collationTest",
   {
      collation: { locale: "en" }
   }
)

----------------------------------------

TITLE: Aggregating States with Populations over 10 Million in MongoDB
DESCRIPTION: Uses the $group and $match stages to aggregate zip code data and return states with a total population greater than 10 million.

LANGUAGE: javascript
CODE:
db.zipcodes.aggregate( [
   { $group: { _id: "$state", totalPop: { $sum: "$pop" } } },
   { $match: { totalPop: { $gte: 10*1000*1000 } } }
] )

----------------------------------------

TITLE: Inserting Encrypted Document with CSFLE in Java
DESCRIPTION: This snippet demonstrates how to insert an encrypted document using a CSFLE-enabled MongoClient in Java. It inserts a document into the 'medicalRecords.patients' collection with encrypted fields.

LANGUAGE: java
CODE:
// Code snippet not provided in the given text

----------------------------------------

TITLE: Displaying Replica Set Synchronization Status in MongoDB
DESCRIPTION: This code snippet shows the output of a MongoDB method when run on a replica set with two secondary members. It displays the synchronization status of each secondary, including the source, sync time, and lag behind the primary.

LANGUAGE: javascript
CODE:
source: m1.example.net:27002
    syncedTo: Mon Mar 01 2021 16:30:50 GMT-0800 (PST)
    0 secs (0 hrs) behind the primary
source: m2.example.net:27003
    syncedTo: Mon Mar 01 2021 16:30:50 GMT-0800 (PST)
    0 secs (0 hrs) behind the primary

----------------------------------------

TITLE: Flushing Router Config for Specific Collection in MongoDB
DESCRIPTION: This command flushes the cache for a specified collection when passed a collection namespace parameter. It marks the cached routing table for the specified collection as stale.

LANGUAGE: javascript
CODE:
db.adminCommand(
   { 
     flushRouterConfig: "<db.collection>" 
   } 
)

----------------------------------------

TITLE: Renaming Collection Using Helper Method
DESCRIPTION: Example showing how to rename a collection using the db.collection.renameCollection() helper method within the same database.

LANGUAGE: javascript
CODE:
use test
db.orders.renameCollection( "orders2014" )

----------------------------------------

TITLE: Configuring RST Document Structure for MongoDB Changelog
DESCRIPTION: RST directives setting up the document structure for MongoDB 8.1 changelog, including orphan page declaration, domain specification, table of contents configuration, and inclusion of development and rapid release notice templates.

LANGUAGE: rst
CODE:
:orphan:

=============
8.1 Changelog
=============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. include:: /includes/in-dev.rst

.. include:: /includes/rapid-release.rst

----------------------------------------

TITLE: Specifying Encrypted Fields in MongoDB Schema
DESCRIPTION: Demonstrates how to specify a field for encryption in the schema, including the path and BSON type.

LANGUAGE: javascript
CODE:
const encryptedFieldsObject = {
   fields: [
      {
         path: "myDocumentField",
         bsonType: "int"
      }
   ]
}

----------------------------------------

TITLE: Counting Documents with Skip in MongoDB
DESCRIPTION: Example of using the count command with a query and skip option to count documents in the 'orders' collection, skipping the first 10 matching documents.

LANGUAGE: javascript
CODE:
db.runCommand( { count:'orders',
                 query: { ord_dt: { $gt: new Date('01/01/2012') } },
                 skip: 10 }  )

----------------------------------------

TITLE: Defining $second Aggregation Operator in MongoDB
DESCRIPTION: Demonstrates the syntax for using the $second operator in a MongoDB aggregation pipeline. It extracts the second component from a date expression.

LANGUAGE: javascript
CODE:
{ $second: <dateExpression> }

----------------------------------------

TITLE: MongoDB $bottom Single Game Query
DESCRIPTION: Aggregation pipeline demonstrating how to find the bottom score in a single game.

LANGUAGE: javascript
CODE:
db.gamescores.aggregate( [
   {
      $match : { gameId : "G1" }
   },
   {
      $group:
         {
            _id: "$gameId",
            playerId:
               {
                  $bottom:
                  {
                     output: [ "$playerId", "$score" ],
                     sortBy: { "score": -1 }
                  }
               }
         }
   }
] )

----------------------------------------

TITLE: Create Key Vault Index - Go
DESCRIPTION: Creates a unique index on the keyAltNames field in the encryption.__keyVault collection using Go MongoDB driver.

LANGUAGE: go
CODE:
err = keyVaultDb.CreateCollection(context.TODO(), "__keyVault")
if err != nil {
    panic(fmt.Errorf("error creating collection: %v", err))
}
indexModel := mongo.IndexModel{
    Keys:    bson.D{{Key: "keyAltNames", Value: 1}},
    Options: options.Index().SetUnique(true).SetPartialFilterExpression(bson.D{{Key: "keyAltNames", Value: bson.D{{Key: "$exists", Value: true}}}}),
}
_, err = keyVaultDb.Collection("__keyVault").Indexes().CreateOne(context.TODO(), indexModel)
if err != nil {
    panic(fmt.Errorf("error creating index: %v", err))
}

----------------------------------------

TITLE: Updating a Document Using MongoDB Shell
DESCRIPTION: This snippet demonstrates how to update a single document in the 'inventory' collection using the MongoDB shell. It sets new values for 'size.uom' and 'status' fields, and adds a 'lastModified' timestamp.

LANGUAGE: javascript
CODE:
db.inventory.updateOne(
   { item: "paper" },
   {
     $set: { "size.uom": "cm", status: "P" },
     $currentDate: { lastModified: true }
   }
)

----------------------------------------

TITLE: Enabling MongoDB 7.0 Features
DESCRIPTION: This command sets the feature compatibility version to 7.0, enabling new features. It's the final step in the upgrade process to utilize MongoDB 7.0 capabilities.

LANGUAGE: javascript
CODE:
db.adminCommand( { setFeatureCompatibilityVersion: "7.0" } )

----------------------------------------

TITLE: Demonstrating Basic MongoDB Query Predicate
DESCRIPTION: Shows a simple query predicate that matches documents where the 'name' field equals 'Alice'. This example illustrates the basic structure and purpose of a MongoDB query predicate.

LANGUAGE: javascript
CODE:
{ name: { $eq: "Alice" } }

----------------------------------------

TITLE: Setting Time Limit for Query Using maxTimeMS() in MongoDB
DESCRIPTION: This snippet demonstrates how to use the maxTimeMS() method to set a time limit of 30 milliseconds for a query in MongoDB. It searches for documents in the 'location' collection where the 'town' field matches a case-insensitive regex pattern.

LANGUAGE: javascript
CODE:
db.location.find( { "town": { "$regex": "(Pine Lumber)",
                                 "$options": 'i' } } ).maxTimeMS(30)

----------------------------------------

TITLE: collStats Command Syntax in MongoDB
DESCRIPTION: The syntax for the collStats command in MongoDB, showing the required and optional fields.

LANGUAGE: javascript
CODE:
db.runCommand(
   {
     collStats: <string>,
     scale: <int>
   }
)

----------------------------------------

TITLE: MongoDB OIDC User Authorization Example
DESCRIPTION: Example showing the structure of user authorization when useAuthorizationClaim is set to false. Demonstrates how MongoDB constructs and uses the internal username for authorization.

LANGUAGE: javascript
CODE:
{ user: "mdbinc/spencer.jackson@example.com", 
  db: "$external" }

----------------------------------------

TITLE: Creating PKCS 12 File for macOS Keychain Access
DESCRIPTION: This command creates a PKCS 12 file from the client certificate and key, which can be used with macOS Keychain Access for certificate management.

LANGUAGE: bash
CODE:
openssl pkcs12 -export -out test-client.pfx -inkey mongodb-test-client.key -in mongodb-test-client.crt -certfile mongodb-test-ia.crt

----------------------------------------

TITLE: Configuring MongoDB OIDC in YAML Configuration File
DESCRIPTION: This snippet shows how to configure MongoDB with OIDC authentication using a YAML configuration file. It sets the authentication mechanism to MONGODB-OIDC and specifies the identity provider details.

LANGUAGE: yaml
CODE:
setParameter:
   authenticationMechanisms: MONGODB-OIDC
   oidcIdentityProviders: [ {
        "issuer": "https://okta-test.okta.com", 
        "audience": "example@kernel.mongodb.com",
        "authNamePrefix": "okta-issuer",
        "matchPattern": "@mongodb.com$",
        "JWKSPollSecs": 86400
   } ]

----------------------------------------

TITLE: Configuring MongoDB with In-Memory Storage Engine (Bash)
DESCRIPTION: Command-line configuration to start MongoDB with the in-memory storage engine. This specifies the storage engine and database path.

LANGUAGE: bash
CODE:
mongod --storageEngine inMemory --dbpath <path>

----------------------------------------

TITLE: Querying MongoDB with Projection in Scala
DESCRIPTION: This snippet shows how to query MongoDB with projection using the Scala driver.

LANGUAGE: scala
CODE:
// Start Example 45
// End Example 45

----------------------------------------

TITLE: Creating user-defined role with specific privileges in MongoDB
DESCRIPTION: This example demonstrates creating a user-defined role 'appUser' for the 'myApp' database with specific privileges on various collections and database-wide actions.

LANGUAGE: javascript
CODE:
{
   _id: "myApp.appUser",
   role: "appUser",
   db: "myApp",
   privileges: [
        { resource: { db: "myApp" , collection: "" },
          actions: [ "find", "createCollection", "dbStats", "collStats" ] },
        { resource: { db: "myApp", collection: "logs" },
          actions: [ "insert" ] },
        { resource: { db: "myApp", collection: "data" },
          actions: [ "insert", "update", "remove", "compact" ] },
        { resource: { db: "myApp", collection: "system.js" },
          actions: [ "find" ] },
   ],
   roles: []
}

----------------------------------------

TITLE: MongoDB Add Elements to Array Middle
DESCRIPTION: Example demonstrating how to insert elements at a specific position in the middle of an array using a positive index

LANGUAGE: javascript
CODE:
db.students.insertOne( { "_id" : 2, "scores" : [  50,  60,  70,  100 ] } )

LANGUAGE: javascript
CODE:
db.students.updateOne(
   { _id: 2 },
   {
     $push: {
        scores: {
           $each: [ 20, 30 ],
           $position: 2
        }
     }
   }
)

----------------------------------------

TITLE: Adding Shard Tags in MongoDB
DESCRIPTION: This snippet demonstrates how to use sh.addShardTag() to add tags to shards in a MongoDB sharded cluster. It associates three shards with different location tags: NYC, LAX, and NRT.

LANGUAGE: javascript
CODE:
sh.addShardTag("shard0000", "NYC")
sh.addShardTag("shard0001", "LAX")
sh.addShardTag("shard0002", "NRT")

----------------------------------------

TITLE: Field Path Example with $sortByCount
DESCRIPTION: Demonstrates how to use $sortByCount with a field path expression.

LANGUAGE: javascript
CODE:
{ $sortByCount:  "$employee" }

----------------------------------------

TITLE: Removing a Shard from Zone in MongoDB
DESCRIPTION: Example demonstrating how to remove a zone (NRT) from a specific shard using sh.removeShardFromZone() method.

LANGUAGE: javascript
CODE:
sh.removeShardFromZone("shard0002", "NRT")

----------------------------------------

TITLE: Defining $minute Operator in MongoDB Aggregation
DESCRIPTION: Demonstrates the syntax for using the $minute operator in a MongoDB aggregation pipeline. The operator extracts the minute portion from a date expression.

LANGUAGE: javascript
CODE:
{ $minute: <dateExpression> }

----------------------------------------

TITLE: Setting Pre/Post Image Retention Time in MongoDB
DESCRIPTION: Example command showing how to set the retention time for change stream pre- and post-images to 100 seconds using the changeStreamOptions parameter.

LANGUAGE: javascript
CODE:
db.runCommand( {
      setClusterParameter: {
         changeStreamOptions: { preAndPostImages: { expireAfterSeconds: 100 } }
      }
   } )

----------------------------------------

TITLE: Initializing $indexStats Pipeline Stage in MongoDB
DESCRIPTION: Basic syntax for the $indexStats aggregation pipeline stage that returns statistics for each index in a collection.

LANGUAGE: javascript
CODE:
{ $indexStats: { } }

----------------------------------------

TITLE: Encryption Schema with encryptMetadata Keyword
DESCRIPTION: Example showing how to use encryptMetadata to define inherited encryption rules for child elements.

LANGUAGE: json
CODE:
{
  "encryptMetadata": {
    "keyId": []
  },
  "properties": {}
}

----------------------------------------

TITLE: Querying Encrypted Documents in Java
DESCRIPTION: This snippet demonstrates how to query for a document with encrypted fields using Java. It shows queries with both an encrypted client and a non-encrypted client.

LANGUAGE: java
CODE:
// start-find
System.out.println("Finding a document with regular (non-encrypted) client:");
Document regularClientResult = regularClient.getDatabase("medicalRecords").getCollection("patients").find(eq("firstName", "Lily")).first();
System.out.println(regularClientResult.toJson());

System.out.println("\nFinding a document with encrypted client:");
Document encryptedClientResult = encryptedClient.getDatabase("medicalRecords").getCollection("patients").find(eq("firstName", "Lily")).first();
System.out.println(encryptedClientResult.toJson());
// end-find

----------------------------------------

TITLE: Defining reStructuredText Substitutions and Variables
DESCRIPTION: Defines various reStructuredText substitutions and variables used throughout the documentation, including unicode characters, package names, and distribution-specific values.

LANGUAGE: rst
CODE:
.. |arrow| unicode:: U+27A4
.. |edition| replace:: Enterprise
.. |package-name| replace:: ``{+package-name-enterprise+}``
.. |distro-name| replace:: Debian
.. |package-manager| replace:: ``apt``
.. |executable-name| replace:: ``mongod``
.. |mdb-download-link| replace:: `MongoDB Download Center <https://www.mongodb.com/try/download/enterprise?tck=docs_server>`__

----------------------------------------

TITLE: Inserting Multiple Documents with Arrays using MongoDB Compass
DESCRIPTION: This snippet shows the JSON structure for inserting multiple documents with array fields into a MongoDB collection using MongoDB Compass. The structure is similar to the shell example but formatted as a JSON array.

LANGUAGE: javascript
CODE:
[
    { "item": "journal", "instock": [ { "warehouse": "A", "qty": 5 }, { "warehouse": "C", "qty": 15 } ] },
    { "item": "notebook", "instock": [ { "warehouse": "C", "qty": 5 } ] },
    { "item": "paper", "instock": [ { "warehouse": "A", "qty": 60 }, { "warehouse": "B", "qty": 15 } ] },
    { "item": "planner", "instock": [ { "warehouse": "A", "qty": 40 }, { "warehouse": "B", "qty": 5 } ] },
    { "item": "postcard", "instock": [ { "warehouse": "B","qty": 15 }, { "warehouse": "C", "qty": 35 } ] }
]

----------------------------------------

TITLE: Manual Field Encryption in C#
DESCRIPTION: C# implementation for encrypting document fields and inserting documents into MongoDB using the .NET driver. Includes field-level encryption setup.

LANGUAGE: csharp
CODE:
// Code not visible in provided input

----------------------------------------

TITLE: Setting Persistent Progress Monitor Configuration in MongoDB YAML Config File
DESCRIPTION: This YAML configuration snippet shows how to set the progressMonitor parameter persistently in the mongos config file using the setParameter option. This ensures the settings persist across restarts.

LANGUAGE: yaml
CODE:
setParameter:
   progressMonitor: "{ interval: 1000, deadline: 300 }"

----------------------------------------

TITLE: Querying Non-Time-Series System Buckets Collections in MongoDB
DESCRIPTION: MongoDB query to identify system.buckets collections that are not configured as time-series collections. Uses db.getCollectionInfos() with a compound filter combining regex pattern matching for system.buckets naming and checking for absence of timeseries options.

LANGUAGE: javascript
CODE:
db.getCollectionInfos(
   { 
      $and: [
         { name: { $regex: /^system\.buckets/ } },
         { 'options.timeseries': { $exists: false } }
      ]
   }
)

----------------------------------------

TITLE: Inserting a Document That Becomes Invalid After Schema Update
DESCRIPTION: This snippet shows inserting a document that was valid under the original schema validation but becomes invalid after the update. The password is 10 characters long, which met the original requirement but not the new one.

LANGUAGE: javascript
CODE:
db.users.insertOne(
   {
      "username": "salesAdmin02",
      "password": "i8U60*VyL8"
   }
)

----------------------------------------

TITLE: RST Platform Support Table Definition
DESCRIPTION: ReStructuredText markup defining platform support tables for MongoDB versions across different operating systems. Includes EOL notice and detailed compatibility matrix.

LANGUAGE: rst
CODE:
.. note:: Platform Support EOL Notice

   .. list-table::
      :widths: 40 60
      :class: border-table

      * - Ubuntu 16.04
        - Support removed in MongoDB 5.0+.

   |

.. list-table::
   :header-rows: 1
   :stub-columns: 1
   :class: compatibility

   * - Platform
     - 5.0 Community & Enterprise
     - 4.4 Community & Enterprise
     - 4.2 Community & Enterprise
     - 4.0 Community & Enterprise

   * - Amazon Linux 2
     - |checkmark|
     - 4.4.4+
     - 4.2.13+
     -

   * - RHEL/CentOS 8
     - |checkmark|
     - 4.4.4+
     -
     -

   * - Ubuntu 20.04
     - |checkmark|
     - |checkmark|
     -
     -

   * - Ubuntu 18.04
     - |checkmark|
     - |checkmark|
     - |checkmark|
     -

   * - Ubuntu 16.04
     -
     - Enterprise only
     - Enterprise only
     - |checkmark|

----------------------------------------

TITLE: MongoDB grantRolesToRole Example Usage
DESCRIPTION: Example showing how to grant the productsReader role to the productsReaderWriter role in the products database with majority write concern and 5000ms timeout.

LANGUAGE: javascript
CODE:
use products
db.grantRolesToRole(
    "productsReaderWriter",
    [ "productsReader" ],
    { w: "majority" , wtimeout: 5000 }
)

----------------------------------------

TITLE: Sample Output for UpdateMany with $lt in MongoDB
DESCRIPTION: Example output showing multiple documents after being updated where carrier.fee was less than 20.

LANGUAGE: javascript
CODE:
{
  _id: ObjectId("61ba634dfe687fce2f04241d"),
  item: 'nuts',
  quantity: 30,
  carrier: { name: 'Shipit', fee: 3 },
  price: 9.99
},
{
  _id: ObjectId("61ba634dfe687fce2f04241e"),
  item: 'bolts',
  quantity: 50,
  carrier: { name: 'Shipit', fee: 4 },
  price: 9.99
},
{
  _id: ObjectId("61ba634dfe687fce2f04241f"),
  item: 'washers',
  quantity: 10,
  carrier: { name: 'Shipit', fee: 1 },
  price: 9.99
}

----------------------------------------

TITLE: Creating a MongoDB Collection with Sample Data
DESCRIPTION: This snippet demonstrates how to create a 'music' collection and insert multiple documents using the insertMany() method.

LANGUAGE: javascript
CODE:
db.music.insertMany( [
   { artist: "DOA", genre: "punk" },
   { artist: "Rick Astley", genre: "pop" },
   { artist: "Black Flag", genre: "punk" },
   { artist: "Justin Bieber", genre: "pop" }
] )

----------------------------------------

TITLE: Extracting MongoDB Files from Tarball on macOS ARM 64
DESCRIPTION: This command extracts the MongoDB files from the downloaded tarball. The {+version+} placeholder should be replaced with the actual version number of MongoDB being installed.

LANGUAGE: sh
CODE:
tar -zxvf mongodb-macos-arm64-enterprise-{+version+}.tgz

----------------------------------------

TITLE: Configuring Delayed Secondary Member in MongoDB Replica Set
DESCRIPTION: This code snippet demonstrates how to configure a delayed secondary member in a MongoDB replica set using the MongoDB shell. It sets a 1-hour delay on a secondary member at index 0 in the members array.

LANGUAGE: javascript
CODE:
cfg = rs.conf()
cfg.members[0].priority = 0
cfg.members[0].hidden = true
cfg.members[0].secondaryDelaySecs = 3600
rs.reconfig(cfg)

----------------------------------------

TITLE: Configuring Active Fault Duration
DESCRIPTION: Example showing how to set the duration (in seconds) before taking action on a detected fault. Determines how long to wait before automatically moving a failing mongos out of the cluster.

LANGUAGE: yaml
CODE:
activeFaultDurationSecs: 300

----------------------------------------

TITLE: Defining keyCharacteristics Document Structure in MongoDB
DESCRIPTION: This code snippet illustrates the structure of the keyCharacteristics document returned when the keyCharacteristics option is set to true in MongoDB shard key analysis. It includes fields for various metrics and characteristics of the shard key.

LANGUAGE: javascript
CODE:
{
   keyCharacteristics: {
      numDocsTotal: <integer>,
      numOrphanDocs: <integer>, 
      avgDocSizeBytes: <integer>,
      numDocsSampled: <integer>,
      isUnique: <bool>,
      numDistinctValues: <integer>,
      mostCommonValues: [
        { value: <shardkeyValue>, frequency: <integer> },
        ...
      ],
      monotonicity: {
        recordIdCorrelationCoefficient: <double>,
        type: "monotonic"|"not monotonic"|"unknown",
    }
  }
}

----------------------------------------

TITLE: Creating Partial Unique Index in Node.js
DESCRIPTION: Creates a partial unique index on the keyAltNames field in the encryption.__keyVault collection using Node.js MongoDB driver.

LANGUAGE: javascript
CODE:
await keyVault.createIndex(
    { "keyAltNames": 1 },
    {
      unique: true,
      partialFilterExpression: { "keyAltNames": { $exists: true } }
    }
);

----------------------------------------

TITLE: Starting MongoDB with TLS and X.509 Options (Bash)
DESCRIPTION: Command-line example for starting a MongoDB node with TLS and X.509 authentication options. This includes settings for replica set, SSL mode, cluster authentication mode, and certificate files.

LANGUAGE: bash
CODE:
mongod --replSet <name> --sslMode requireSSL --clusterAuthMode sendKeyFile --sslClusterFile <path to membership certificate and key PEM file> --sslPEMKeyFile <path to TLS/SSL Certificate and key PEM file>  --sslCAFile <path to root CA PEM file> --bind_ip localhost,<hostname(s)|ip address(es)>

----------------------------------------

TITLE: Executing setUserWriteBlockMode Command in MongoDB
DESCRIPTION: This snippet shows the basic syntax for executing the setUserWriteBlockMode command in MongoDB. It takes two fields: setUserWriteBlockMode set to 1, and global as a boolean to enable or disable write blocking.

LANGUAGE: javascript
CODE:
db.adminCommand(
   {
     setUserWriteBlockMode: 1,
     global: <boolean>
   }
)

----------------------------------------

TITLE: Basic $expr Syntax Example
DESCRIPTION: Demonstrates the basic syntax for using the $expr operator in MongoDB queries.

LANGUAGE: javascript
CODE:
{ $expr: { <expression> } }

----------------------------------------

TITLE: Storing Access Criteria in MongoDB Document
DESCRIPTION: This snippet shows the structure of a document in the 'forecasts' collection, demonstrating how access levels are stored in the 'tags' field for different sections of the document.

LANGUAGE: javascript
CODE:
{
   _id: 1,
   title: "123 Department Report",
   tags: [ [ "G" ], [ "FDW" ] ],
   year: 2014,
   subsections: [
       {
           subtitle: "Section 1: Overview",
           tags: [ [ "SI", "G" ], [ "FDW" ] ],
           content:  "Section 1: This is the content of section 1."
       },
       {
           subtitle: "Section 2: Analysis",
           tags: [ [ "STLW" ] ],
           content: "Section 2: This is the content of section 2."
       },
       {
           subtitle: "Section 3: Budgeting",
           tags: [ [ "TK" ], [ "FDW", "TGE" ] ],
           content: {
               text: "Section 3: This is the content of section3.",
               tags: [ [ "HCS"], [ "FDW", "TGE", "BX" ] ]
           }
       }
   ]
}

----------------------------------------

TITLE: Update with Aggregation Pipeline
DESCRIPTION: An example of using an aggregation pipeline to perform a more complex update operation.

LANGUAGE: javascript
CODE:
db.students.updateOne(
   { _id: 1 },
   [
      { $set: { status: "Modified", comments: [ "$commentsSemester1", "$commentsSemester2" ], lastUpdate: "$$NOW" } },
      { $unset: [ "commentsSemester1", "commentsSemester2" ] }
   ]
)

----------------------------------------

TITLE: Configuring Hidden Member Document in MongoDB Replica Set
DESCRIPTION: JSON configuration document for setting up a hidden replica set member. Requires setting priority to 0 and hidden flag to true.

LANGUAGE: javascript
CODE:
{
  "_id" : <num>
  "host" : <hostname:port>,
  "priority" : 0,
  "hidden" : true
}

----------------------------------------

TITLE: Updating Document in MongoDB Collection (JSON)
DESCRIPTION: Example of an 'update' event in MongoDB change streams. It shows the structure of the event document, including the operationType, namespace, documentKey, and updateDescription.

LANGUAGE: json
CODE:
{
   "_id": { <Resume Token> },
   "operationType": "update",
   "clusterTime": <Timestamp>,
   "wallTime": <ISODate>,
   "ns": {
      "db": "engineering",
      "coll": "users"
   },
   "documentKey": {
      "_id": ObjectId("58a4eb4a30c75625e00d2820")
   },
   "updateDescription": {
      "updatedFields": {
         "email": "alice@10gen.com"
      },
      "removedFields": ["phoneNumber"],
      "truncatedArrays": [ {
         "field" : "vacation_time",
         "newSize" : 36
      } ]
   }
}

----------------------------------------

TITLE: Executing getAuditConfig Command in MongoDB
DESCRIPTION: This snippet shows the basic syntax for running the getAuditConfig command on the admin database in MongoDB. It retrieves the current audit configuration settings.

LANGUAGE: javascript
CODE:
db.adminCommand( 
   { 
     getAuditConfig: 1 
   } 
)

----------------------------------------

TITLE: Rotating Certificates in MongoDB using JavaScript
DESCRIPTION: This snippet demonstrates the basic usage of the db.rotateCertificates() method. It takes an optional 'message' parameter which is logged by the server.

LANGUAGE: javascript
CODE:
db.rotateCertificates(message)

----------------------------------------

TITLE: Example Document in MongoDB Config Chunks Collection
DESCRIPTION: Sample document structure from the config.chunks collection, which stores information about each chunk in the sharded cluster. This example shows the fields for a single chunk document.

LANGUAGE: javascript
CODE:
{
 _id: ObjectId('65a954c0de11596e08e7c1dc'),
 uuid: UUID('a4479215-a38d-478f-a82b-e5e95d455e55'),
 min: { a: Long('121204345') },
 max: { a: Long('993849349') },
 shard: 'shard01',
 lastmod: Timestamp({ t: 1, i: 0 }),
 history: [
    {
       validAfter: Timestamp({ t: 1705596095, i: 14 }),
       shard: 'shard01'
    }
 ]
}

----------------------------------------

TITLE: Creating Wildcard Index with Author Projection in MongoDB
DESCRIPTION: This snippet demonstrates how to create a wildcard index on a 'books' collection with a projection that includes author name and website fields.

LANGUAGE: javascript
CODE:
db.books.createIndex( 
   {
      "$**": 1
   }, 
   {
      wildcardProjection: {
         "author.name": 1,
         "author.website": 1   
      },
      name: "authorWildcard"
   }
)

----------------------------------------

TITLE: Executing MongoDB top Command
DESCRIPTION: This snippet demonstrates how to issue the top command against the admin database in MongoDB. The command returns usage statistics for each collection.

LANGUAGE: javascript
CODE:
db.runCommand(
   { 
     top: 1 
   }
)

----------------------------------------

TITLE: Creating Time Series Collection with Minutes Granularity
DESCRIPTION: Demonstrates creating a time series collection with minutes granularity, including timeField and metaField configuration with expiration settings.

LANGUAGE: javascript
CODE:
db.createCollection(
    "weather24h",
    {
       timeseries: {
          timeField: "timestamp",
          metaField: "metadata",
          granularity: "minutes"
       },
       expireAfterSeconds: 86400
    }
)

----------------------------------------

TITLE: Querying MongoDB for Array Element in MongoDB Compass
DESCRIPTION: This snippet shows the filter to be used in MongoDB Compass to find documents where the 'instock' array contains a specific document with 'warehouse' and 'qty' fields.

LANGUAGE: javascript
CODE:
{ "instock": { warehouse: "A", qty: 5 } }

----------------------------------------

TITLE: Declaring Stable API Version in MongoDB Shell
DESCRIPTION: Example of how to specify the Stable API version when connecting with the MongoDB shell

LANGUAGE: javascript
CODE:
mongosh --apiVersion 1

----------------------------------------

TITLE: Specifying Index Bounds with cursor.min() in MongoDB
DESCRIPTION: Demonstrates the prototype form for the indexBounds parameter in the cursor.min() method. This parameter specifies the inclusive lower bound for index keys.

LANGUAGE: javascript
CODE:
{ field1: <min value>, field2: <min value2>, fieldN:<min valueN> }

----------------------------------------

TITLE: Creating Unique Index for MongoDB Queryable Encryption in C#
DESCRIPTION: This snippet shows how to create a unique index on the 'keyAltNames' field in the 'encryption.__keyVault' namespace using C#. It connects to the key vault collection and creates the index using the CreateOneAsync method.

LANGUAGE: csharp
CODE:
var keyVaultClient = GetKeyVaultClient();
var keyVaultDatabase = keyVaultClient.GetDatabase("encryption");
var keyVaultCollection = keyVaultDatabase.GetCollection<BsonDocument>("__keyVault");
await keyVaultCollection.Indexes.CreateOneAsync(
    new CreateIndexModel<BsonDocument>(
        Builders<BsonDocument>.IndexKeys.Ascending("keyAltNames"),
        new CreateIndexOptions
        {
            Unique = true,
            PartialFilterExpression = Builders<BsonDocument>.Filter.Exists("keyAltNames")
        }
    )
);

----------------------------------------

TITLE: Inserting Sample Data for MongoDB $divide Example
DESCRIPTION: This code inserts sample documents into a 'conferencePlanning' collection to be used in demonstrating the $divide operator. It includes fields for city, hours, and tasks.

LANGUAGE: javascript
CODE:
db.conferencePlanning.insertMany( [
   { "_id" : 1, "city" : "New York", "hours" : 80, "tasks" : 7 },
   { "_id" : 2, "city" : "Singapore", "hours" : 40, "tasks" : 4 }
] )

----------------------------------------

TITLE: Accessing ServerStatus in MongoDB 7.2
DESCRIPTION: The serverStatus command and db.serverStatus() method have renamed metrics in MongoDB 7.2. 'query.planCacheTotalQueryShapes' is now 'planCache.totalQueryShapes', and 'query.planCacheTotalSizeEstimateBytes' is now 'planCache.totalSizeEstimateBytes'.

LANGUAGE: mongodb
CODE:
db.serverStatus()

----------------------------------------

TITLE: Performing Bitwise NOT Operation in MongoDB
DESCRIPTION: The $bitNot operator performs a bitwise NOT operation on a single int or long value or an array containing a single int or long value. Added in MongoDB 6.3.

LANGUAGE: mongodb
CODE:
$bitNot

----------------------------------------

TITLE: Enabling Auto Merger Method Syntax
DESCRIPTION: Demonstrates the basic syntax for enabling automatic chunk merges in MongoDB using the sh.enableAutoMerger() method. The method accepts a namespace parameter that specifies the target collection.

LANGUAGE: javascript
CODE:
sh.enableAutoMerger( <namespace> )

----------------------------------------

TITLE: Executing mergeAllChunksOnShard Command in MongoDB
DESCRIPTION: This snippet demonstrates the syntax for executing the mergeAllChunksOnShard command. It merges all mergeable chunks that a shard owns for a given collection. The command requires the collection name and shard name, with an optional parameter to specify the maximum number of chunks to merge.

LANGUAGE: javascript
CODE:
db.adminCommand( 
  { 
    mergeAllChunksOnShard: <name of the collection>,
    shard: <name of the shard>,
    maxNumberOfChunksToMerge: <maximum number of chunks to merge> /* optional */
  } 
)

----------------------------------------

TITLE: Creating Index on Array Field in MongoDB using JavaScript
DESCRIPTION: This code snippet demonstrates how to create an index on an array field in a MongoDB collection. The createIndex() method is used on a specific collection, with the array field name and sort order specified as parameters.

LANGUAGE: javascript
CODE:
db.<collection>.createIndex( { <arrayField>: <sortOrder> } )

----------------------------------------

TITLE: Defining $skip Stage in MongoDB Aggregation Pipeline (JavaScript)
DESCRIPTION: Demonstrates the prototype form of the $skip stage in a MongoDB aggregation pipeline. It takes a positive 64-bit integer as an argument to specify the number of documents to skip.

LANGUAGE: javascript
CODE:
{ $skip: <positive 64-bit integer> }

----------------------------------------

TITLE: Inserting Multiple Documents into MongoDB Collection
DESCRIPTION: This code snippet demonstrates how to use the insertMany() method to add multiple student test score documents to the 'testScores' collection in MongoDB. Each document contains a studentId and scores for three tests.

LANGUAGE: javascript
CODE:
db.testScores.insertMany( [
   { studentId: "2345", test01: 62, test02: 81, test03: 80 },
   { studentId: "2356", test01: 60, test02: 83, test03: 79 },
   { studentId: "2358", test01: 67, test02: 82, test03: 78 },
   { studentId: "2367", test01: 64, test02: 72, test03: 77 },
   { studentId: "2369", test01: 60, test02: 53, test03: 72 }
] )

----------------------------------------

TITLE: Computing Hash Value Example in MongoDB Aggregation
DESCRIPTION: Shows how to compute a hash value for a string using $toHashedIndexKey in an aggregation pipeline. The example demonstrates hashing the string 'string to hash' and returns the result as a Long value.

LANGUAGE: javascript
CODE:
db.aggregate(
   [ 
      { $documents: [ { val: "string to hash" } ] },
      { $addFields: { hashedVal: { $toHashedIndexKey: "$val" } } }
   ]
 )

----------------------------------------

TITLE: Defining $bitAnd Syntax in MongoDB Aggregation
DESCRIPTION: Demonstrates the syntax for using the $bitAnd operator in a MongoDB aggregation pipeline. The operator performs a bitwise AND operation on an array of int or long values.

LANGUAGE: javascript
CODE:
{ $bitAnd: [ <expression1>, <expression2>, ... ] }

----------------------------------------

TITLE: Accessing MongoDB Changelog Issue
DESCRIPTION: This code snippet demonstrates how to reference a specific issue in the MongoDB changelog using a special syntax. It's used throughout the changelog to link to detailed issue descriptions.

LANGUAGE: javascript
CODE:
:issue:`SERVER-45309`

----------------------------------------

TITLE: Defining MongoDB Date Document Format with Timezone
DESCRIPTION: Shows the document structure for specifying a date with timezone in MongoDB aggregation operations. The format accepts a date expression and an optional timezone expression.

LANGUAGE: javascript
CODE:
{ date: <dateExpression>, timezone: <tzExpression> }

----------------------------------------

TITLE: Initializing Sample Orders Collection in MongoDB
DESCRIPTION: Creates a sample collection 'orders' with 10 documents containing customer orders with various items, prices and quantities.

LANGUAGE: javascript
CODE:
db.orders.insertMany([
   { _id: 1, cust_id: "Ant O. Knee", ord_date: new Date("2020-03-01"), price: 25, items: [ { sku: "oranges", qty: 5, price: 2.5 }, { sku: "apples", qty: 5, price: 2.5 } ], status: "A" },
   { _id: 2, cust_id: "Ant O. Knee", ord_date: new Date("2020-03-08"), price: 70, items: [ { sku: "oranges", qty: 8, price: 2.5 }, { sku: "chocolates", qty: 5, price: 10 } ], status: "A" },
   { _id: 3, cust_id: "Busby Bee", ord_date: new Date("2020-03-08"), price: 50, items: [ { sku: "oranges", qty: 10, price: 2.5 }, { sku: "pears", qty: 10, price: 2.5 } ], status: "A" },
   { _id: 4, cust_id: "Busby Bee", ord_date: new Date("2020-03-18"), price: 25, items: [ { sku: "oranges", qty: 10, price: 2.5 } ], status: "A" },
   { _id: 5, cust_id: "Busby Bee", ord_date: new Date("2020-03-19"), price: 50, items: [ { sku: "chocolates", qty: 5, price: 10 } ], status: "A"},
   { _id: 6, cust_id: "Cam Elot", ord_date: new Date("2020-03-19"), price: 35, items: [ { sku: "carrots", qty: 10, price: 1.0 }, { sku: "apples", qty: 10, price: 2.5 } ], status: "A" },
   { _id: 7, cust_id: "Cam Elot", ord_date: new Date("2020-03-20"), price: 25, items: [ { sku: "oranges", qty: 10, price: 2.5 } ], status: "A" },
   { _id: 8, cust_id: "Don Quis", ord_date: new Date("2020-03-20"), price: 75, items: [ { sku: "chocolates", qty: 5, price: 10 }, { sku: "apples", qty: 10, price: 2.5 } ], status: "A" },
   { _id: 9, cust_id: "Don Quis", ord_date: new Date("2020-03-20"), price: 55, items: [ { sku: "carrots", qty: 5, price: 1.0 }, { sku: "apples", qty: 10, price: 2.5 }, { sku: "oranges", qty: 10, price: 2.5 } ], status: "A" },
   { _id: 10, cust_id: "Don Quis", ord_date: new Date("2020-03-23"), price: 25, items: [ { sku: "oranges", qty: 10, price: 2.5 } ], status: "A" }
])

----------------------------------------

TITLE: MongoDB Document Structure for Trigonometry Example
DESCRIPTION: Shows the structure of a document in the 'trigonometry' collection, which stores the sides of a right-angle triangle. This document is used in subsequent examples to demonstrate $atan usage.

LANGUAGE: bash
CODE:
{
  "_id" : ObjectId("5c50782193f833234ba90d85"),
  "side_a" : NumberDecimal("3"),
  "side_b" : NumberDecimal("4"),
  "hypotenuse" : NumberDecimal("5")
}

----------------------------------------

TITLE: Retrieving MongoDB Audit Configuration
DESCRIPTION: Command to view current audit configuration settings from the MongoDB admin database.

LANGUAGE: javascript
CODE:
db.adminCommand( { getClusterParameter: "auditConfig" } )

----------------------------------------

TITLE: RedHat Repository Configuration
DESCRIPTION: Repository configuration for installing libmongocrypt on RedHat systems

LANGUAGE: sh
CODE:
[libmongocrypt]
name=libmongocrypt repository
baseurl=https://libmongocrypt.s3.amazonaws.com/yum/redhat/$releasever/libmongocrypt/{+libmongocrypt-version+}/x86_64
gpgcheck=1
enabled=1
gpgkey=https://pgp.mongodb.com/libmongocrypt.asc

----------------------------------------

TITLE: Querying Encrypted Documents with Node.js
DESCRIPTION: This snippet shows how to query for a document with encrypted fields using Node.js. It demonstrates the query process with and without automatic Queryable Encryption configuration.

LANGUAGE: javascript
CODE:
// Finds the document with automatic encryption
const encryptedResult = await encryptedCollection.findOne({ encryptedField: "123456789" });
console.log("Document retrieved with automatic encryption:", encryptedResult);

// Finds the document without automatic encryption
const unencryptedResult = await unencryptedCollection.findOne({ encryptedField: "123456789" });
console.log("Document retrieved without automatic encryption:", unencryptedResult);

----------------------------------------

TITLE: Querying with $indexOfArray in MongoDB Aggregation
DESCRIPTION: Demonstrates using $indexOfArray in an aggregation pipeline to find the first occurrence of value 2 in the items array of each document.

LANGUAGE: javascript
CODE:
db.inventory.aggregate( [ {
   $project: {
      index: { $indexOfArray: [ "$items", 2 ] }
   }
} ] )

----------------------------------------

TITLE: Calculate Standard Deviation Using $stdDevSamp in $group Stage
DESCRIPTION: Aggregation pipeline that samples 100 users and calculates the standard deviation of their ages.

LANGUAGE: javascript
CODE:
db.users.aggregate(
   [
      { $sample: { size: 100 } },
      { $group: { _id: null, ageStdDev: { $stdDevSamp: "$age" } } }
   ]
)

----------------------------------------

TITLE: Querying Sharded Data Distribution in MongoDB using JavaScript
DESCRIPTION: Basic syntax for calling the sh.getShardedDataDistribution() method. Must be run from a mongosh session connected to a mongos instance.

LANGUAGE: javascript
CODE:
sh.getShardedDataDistribution()

----------------------------------------

TITLE: Allocating Shards to Defined Ranges in MongoDB
DESCRIPTION: This script allocates shards to the ranges defined by the getRanges function. It uses the moveRange command to distribute empty ranges across the shards in the cluster.

LANGUAGE: javascript
CODE:
const shards = db.adminCommand({
   listShards: 1
}).shards;

let ranges = getRanges(shards);

for (let i = 0; i < ranges.length; ++i) {
   db.adminCommand({
      moveRange: 'sample.documents',
      min: ranges[i].min,
      max: ranges[i].max,
      toShard: shards[i]._id
   });
}

----------------------------------------

TITLE: Removed MongoDB Configuration Option
DESCRIPTION: The --cpu option has been removed from MongoDB 5.2's mongod binary configuration options.

LANGUAGE: bash
CODE:
--cpu

----------------------------------------

TITLE: MongoDB $substr Operator Syntax
DESCRIPTION: Basic syntax definition for the $substr operator which takes three parameters: the input string, start index, and length of substring to extract.

LANGUAGE: javascript
CODE:
{ $substr: [ <string>, <start>, <length> ] }

----------------------------------------

TITLE: Specifying Key Vault Namespace for MongoDB Queryable Encryption
DESCRIPTION: This snippet demonstrates how to specify the encryption.__keyVault as the key vault namespace for queryable encryption. It's a crucial step in setting up the encryption configuration.

LANGUAGE: javascript
CODE:
const keyVaultNamespace = "encryption.__keyVault";

----------------------------------------

TITLE: Checking Linux Kernel Version in Bash
DESCRIPTION: This command displays the current Linux kernel version. It's used to verify that the system is running Linux kernel version 4.18 or later, which is required for TCMalloc to use per-CPU caches.

LANGUAGE: bash
CODE:
uname -r

----------------------------------------

TITLE: Querying Array Elements in MongoDB Compass
DESCRIPTION: This snippet shows the query filter to be used in MongoDB Compass to find documents where the 'tags' array contains the element 'red'.

LANGUAGE: javascript
CODE:
{ tags: "red" }

----------------------------------------

TITLE: Viewing MongoDB Shell Driver Code Examples
DESCRIPTION: This snippet indicates that the user is viewing MongoDB Shell (Mongosh) driver code examples and instructs how to switch to a different driver.

LANGUAGE: javascript
CODE:
// You are viewing the Mongosh driver code examples.
// Use the dropdown menu to select a different driver.

----------------------------------------

TITLE: Implementing 2D Index with Specific Bounds in MongoDB
DESCRIPTION: Demonstrates creating a 2D index on an 'address' field with specific bounds of -75 (minimum) and 60 (maximum). This example shows practical implementation with concrete values.

LANGUAGE: javascript
CODE:
db.contacts.createIndex(
   {
      address: "2d"
   },
   {
      min: -75,
      max: 60
   }
)

----------------------------------------

TITLE: Sorting Query Results Using a Single-Field Index in MongoDB
DESCRIPTION: These snippets show how to use the previously created index on field 'a' to sort query results in both ascending and descending order.

LANGUAGE: javascript
CODE:
db.records.find().sort( { a: 1 } )

LANGUAGE: javascript
CODE:
db.records.find().sort( { a: -1 } )

----------------------------------------

TITLE: Adding Kerberos Service Principal
DESCRIPTION: Command to add a MongoDB service principal to the Kerberos database using kadmin.local.

LANGUAGE: bash
CODE:
kadmin.local addprinc mongodb/m1.example.com@EXAMPLE.COM

----------------------------------------

TITLE: Example Oplog Entry in MongoDB JSON
DESCRIPTION: This JSON snippet illustrates the structure of an oplog entry created by the appendOplogNote command, including operation type, namespace, data, timestamp, and other metadata.

LANGUAGE: json
CODE:
{
   op: "n",
   ns: "",
   o: { 
      msg: "Appending test message to oplog"
   }, 
   ts: Timestamp({ t: 1689177321, i: 1 }), 
   t: Long("1"), 
   v: Long("2"),
   wall: ISODate("2023-07-12T15:55:21.180Z")
}

----------------------------------------

TITLE: LDAP User DN Mapping Example
DESCRIPTION: Example configuration showing LDAP username to Distinguished Name (DN) mapping using regex matches and transformations for authentication and authorization.

LANGUAGE: javascript
CODE:
[
   {
      match: "(.+)@ENGINEERING.EXAMPLE.COM",
      substitution: "cn={0},ou=engineering,dc=example,dc=com"
   },
   {
      match: "(.+)@DBA.EXAMPLE.COM",
      ldapQuery: "ou=dba,dc=example,dc=com??one?(user={0})"
   }
]

----------------------------------------

TITLE: Overwriting Existing Fields with $set in MongoDB Aggregation
DESCRIPTION: Demonstrates how $set can be used to replace the values of existing fields, including the _id field, in MongoDB documents.

LANGUAGE: javascript
CODE:
db.fruits.aggregate( [
  { $set: { _id: "$item", item: "fruit" } }
] )

----------------------------------------

TITLE: Viewing Multiple Users Information in MongoDB
DESCRIPTION: This snippet shows how to view information for multiple users simultaneously, including their privileges but not their credentials.

LANGUAGE: javascript
CODE:
db.runCommand( {
   usersInfo: [ { user: "Kari", db: "home" }, { user: "Li", db: "myApp" } ],
   showPrivileges: true
} )

----------------------------------------

TITLE: Identifying Misconfigured TTL Indexes in MongoDB
DESCRIPTION: JavaScript function to identify TTL indexes with NaN expireAfterSeconds values across all databases and collections in a MongoDB instance.

LANGUAGE: javascript
CODE:
function getNaNIndexes() {
   const nan_index = [];
   
   const dbs = db.adminCommand({ listDatabases: 1 }).databases;
   
   dbs.forEach((d) => {
      if (d.name != 'local') {
         const listCollCursor = db
            .getSiblingDB(d.name)
            .runCommand({ listCollections: 1 }).cursor;
         
         const collDetails = {
            db: listCollCursor.ns.split(".$cmd")[0],
            colls: listCollCursor.firstBatch.map((c) => c.name),
         };
         
         collDetails.colls.forEach((c) =>
            db
               .getSiblingDB(collDetails.db)
               .getCollection(c)
               .getIndexes()
               .forEach((entry) => {
                  if (Object.is(entry.expireAfterSeconds, NaN)) {
                     nan_index.push({ ns: `${collDetails.db}.${c}`, index: entry });
                  }
               })
         );
      }
   }); 
   
   return nan_index;
};

getNaNIndexes();

----------------------------------------

TITLE: Creating and Checking Collection Status in MongoDB
DESCRIPTION: Example showing how to create a new collection using insertOne and check its status using stats() method.

LANGUAGE: javascript
CODE:
db.events.insertOne( { click: 'button-1', time: new Date() } )
db.events.stats()

----------------------------------------

TITLE: Parsing MongoDB Latency Histogram in JavaScript
DESCRIPTION: This code snippet demonstrates the structure of a latency histogram returned by the collStats command in MongoDB. It shows how latency ranges are represented and counted for different operations.

LANGUAGE: javascript
CODE:
histogram: [
  { micros: NumberLong(0), count: NumberLong(10) },
  { micros: NumberLong(2), count: NumberLong(1) },
  { micros: NumberLong(4096), count: NumberLong(1) },
  { micros: NumberLong(16384), count: NumberLong(1000) },
  { micros: NumberLong(49152), count: NumberLong(100) }
]

----------------------------------------

TITLE: Unwind Array and Group in MongoDB
DESCRIPTION: MongoDB aggregation pipeline to unwind the 'items' array, then group by customer ID and sum the quantity field from the array elements, equivalent to SQL's join and GROUP BY operations.

LANGUAGE: javascript
CODE:
db.orders.aggregate( [
   { $unwind: "$items" },
   {
     $group: {
        _id: "$cust_id",
        qty: { $sum: "$items.qty" }
     }
   }
] )

----------------------------------------

TITLE: MongoDB SystemLog Component Configuration Settings
DESCRIPTION: Configuration settings for MongoDB's systemLog component verbosity levels. These settings control the detail level of logs for different database components like access control, commands, replication, storage, and transactions.

LANGUAGE: yaml
CODE:
systemLog.component.accessControl.verbosity
systemLog.component.command.verbosity
systemLog.component.control.verbosity
systemLog.component.ftdc.verbosity
systemLog.component.geo.verbosity
systemLog.component.index.verbosity
systemLog.component.network.verbosity
systemLog.component.query.verbosity
systemLog.component.queryStats.verbosity
systemLog.component.replication.verbosity
systemLog.component.replication.election.verbosity
systemLog.component.replication.heartbeats.verbosity
systemLog.component.replication.initialSync.verbosity
systemLog.component.replication.rollback.verbosity
systemLog.component.storage.recovery.verbosity
systemLog.component.sharding.verbosity
systemLog.component.storage.verbosity
systemLog.component.storage.journal.verbosity
systemLog.component.transaction.verbosity
systemLog.component.write.verbosity

----------------------------------------

TITLE: Basic $listSampledQueries Syntax
DESCRIPTION: Shows the basic syntax for the $listSampledQueries pipeline stage, which can include an optional namespace parameter to specify a collection.

LANGUAGE: javascript
CODE:
{  
   $listSampledQueries: { namespace: <namespace> } 
}

----------------------------------------

TITLE: Balancing Configuration Example
DESCRIPTION: Example demonstrating how to retrieve balancing configuration information for collections.

LANGUAGE: bash
CODE:
use sample_mflix

db.aggregate([
  {
    $listClusterCatalog: {
      balancingConfiguration: true
    }
  }
])

LANGUAGE: json
CODE:
[
  {
    ns: "sample_mflix.movies",
    db: "sample_mflix",
    type: "collection",
    idIndex: { v: 2, key: { _id: 1 }, name: '_id' },
    options: { ... },
    sharded: false,
    ...
  },
  {
    ns: "sample_mflix.comments",
    db: "sample_mflix",
    type: "collection",
    sharded: true,
    shardKey: { _id: 1},
    balancingEnabled: true,
    balancingEnabledReason: {
      enableBalancing: true,
      allowMigrations: false
    },
    autoMergingEnabled: false,
    chunkSize: 256,
    ...
  },
  ...
]

----------------------------------------

TITLE: Sample Output of Balancer Information
DESCRIPTION: Illustrates the structure of balancer information in the sh.status() output. This includes the balancer's enabled status, current running state, active migrations, and recent migration results.

LANGUAGE: javascript
CODE:
balancer:
      Currently enabled:  yes
      Currently running:  yes
      Collections with active migrations: 
              config.system.sessions started at Fri May 15 2020 17:38:12 GMT-0400 (EDT)
      Failed balancer rounds in last 5 attempts:  0
      Migration Results for the last 24 hours: 
             416 : Success
             1 : Failed with error 'aborted', from shardA to shardB

----------------------------------------

TITLE: Alternative Syntax for endSessions Command in MongoDB JavaScript
DESCRIPTION: This snippet shows an alternative way to execute the endSessions command in MongoDB, using the same structure as the previous example.

LANGUAGE: javascript
CODE:
db.runCommand( 
   { 
     endSessions: [ { id : <UUID> }, ... ] 
   } 
 )

----------------------------------------

TITLE: MongoDB $text Query Index Hint Restriction
DESCRIPTION: Demonstrates that the hint() method cannot be used to specify an index when performing a $text query in MongoDB. This is an important limitation to consider when optimizing text search queries.

LANGUAGE: mongodb
CODE:
// Not allowed:
cursor.find({ $text: { $search: "searchTerm" }}).hint("index_name")

----------------------------------------

TITLE: Initializing Bulk Operations and Updating Documents in MongoDB
DESCRIPTION: This snippet demonstrates how to initialize a Bulk operations builder for the 'items' collection and add an updateOne operation to update documents with status 'D'.

LANGUAGE: javascript
CODE:
var bulk = db.items.initializeUnorderedBulkOp();
bulk.find( { status: "D" } ).updateOne( { $set: { status: "I", points: "0" } } );
bulk.execute();

----------------------------------------

TITLE: MongoDB Connection String with AWS IAM Authentication for Various Drivers
DESCRIPTION: This connection string template is used for connecting to MongoDB with AWS IAM authentication across multiple programming languages and tools. It includes placeholders for AWS credentials and specifies the authentication mechanism.

LANGUAGE: bash
CODE:
mongodb+srv://<aws access key id>:<aws secret access key>@cluster0.example.com/testdb?authSource=$external&authMechanism=MONGODB-AWS&authMechanismProperties=AWS_SESSION_TOKEN:<aws session token>

----------------------------------------

TITLE: Calculate Hyperbolic Sine of Angle in Degrees
DESCRIPTION: Aggregation pipeline that converts an angle from degrees to radians and calculates its hyperbolic sine.

LANGUAGE: javascript
CODE:
db.trigonometry.aggregate( [
   {
      $addFields : {
         "sinh_output" : { $sinh : { $degreesToRadians : "$angle" } }
      }
   }
] )

----------------------------------------

TITLE: Creating a Time Series Collection
DESCRIPTION: Example of creating a time series collection for weather data with 24-hour expiration.

LANGUAGE: javascript
CODE:
db.createCollection(
    "weather24h",
    {
       timeseries: {
          timeField: "timestamp",
          metaField: "data",
          granularity: "hours"
       },
       expireAfterSeconds: 86400
    }
)

----------------------------------------

TITLE: Querying MongoDB Collection in Node.js
DESCRIPTION: This snippet demonstrates how to query a MongoDB collection using the Node.js driver. The actual code is not provided in the excerpt, but it references an external file containing the implementation.

LANGUAGE: javascript
CODE:
// Code is referenced from an external file: /driver-examples/node_insert.js

----------------------------------------

TITLE: Specifying GeoJSON Objects with Default CRS in MongoDB $geometry
DESCRIPTION: This snippet demonstrates the prototype for using $geometry to specify GeoJSON objects with the default coordinate reference system (EPSG:4326) in MongoDB.

LANGUAGE: javascript
CODE:
$geometry: {
   type: "<GeoJSON object type>",
   coordinates: [ <coordinates> ]
}

----------------------------------------

TITLE: Executing listShards Command on MongoDB Admin Database
DESCRIPTION: Shows how to execute the listShards command directly on the admin database of a mongos instance.

LANGUAGE: javascript
CODE:
db.adminCommand({ listShards: 1 })

----------------------------------------

TITLE: Performing Bitwise AND Operation in MongoDB
DESCRIPTION: The $bitAnd operator performs a bitwise AND operation on an array of int or long values. Added in MongoDB 6.3.

LANGUAGE: mongodb
CODE:
$bitAnd

----------------------------------------

TITLE: Viewing MongoDB Cluster Parameters
DESCRIPTION: Command to view all current cluster parameter values from the admin database.

LANGUAGE: javascript
CODE:
db.adminCommand( { getClusterParameter: "*" } )

----------------------------------------

TITLE: Basic $pull Operator Syntax in MongoDB
DESCRIPTION: Demonstrates the basic syntax for using the $pull operator to remove elements from arrays.

LANGUAGE: javascript
CODE:
{ $pull: { <field1>: <value|condition>, <field2>: <value|condition>, ... } }

----------------------------------------

TITLE: Creating Version 2 Text Index Example in MongoDB
DESCRIPTION: Specific example demonstrating how to create a version 2 text index on the 'content' field of a collection.

LANGUAGE: javascript
CODE:
db.test.createIndex(
   { "content": "text" },
   { "textIndexVersion": 2 }
 )

----------------------------------------

TITLE: Transitioning to Embedded Config Server
DESCRIPTION: MongoDB command to transition a dedicated config server to an embedded config server (config shard) using the transitionFromDedicatedConfigServer command.

LANGUAGE: javascript
CODE:
db.adminCommand( { 
   transitionFromDedicatedConfigServer: 1
} )

----------------------------------------

TITLE: Inserting Document in MongoDB using Node.js Driver
DESCRIPTION: This snippet shows how to insert a single document into the 'inventory' collection using the Node.js driver for MongoDB. It uses the insertOne method to add a document with item details.

LANGUAGE: javascript
CODE:
// Start Example 1
const doc = { item: "canvas", qty: 100, tags: ["cotton"], size: { h: 28, w: 35.5, uom: "cm" } };
await collection.insertOne(doc);
// End Example 1

----------------------------------------

TITLE: Inserting Sample Data into MongoDB Collection
DESCRIPTION: Inserts sample documents into an 'inventory' collection to demonstrate $mod operator usage.

LANGUAGE: javascript
CODE:
db.inventory.insertMany( [
   { "_id" : 1, "item" : "abc123", "qty" : 0 },
   { "_id" : 2, "item" : "xyz123", "qty" : 5 },
   { "_id" : 3, "item" : "ijk123", "qty" : 12 }
] )

----------------------------------------

TITLE: MongoDB $bottom Basic Syntax
DESCRIPTION: Basic syntax structure for the $bottom accumulator showing required fields sortBy and output.

LANGUAGE: none
CODE:
{
   $bottom:
      {
         sortBy: { <field1>: <sort order>, <field2>: <sort order> ... },
         output: <expression>
      }
}

----------------------------------------

TITLE: Example of User Roles Before grantRolesToUser
DESCRIPTION: This snippet shows the initial roles of a user named 'accountUser01' in the 'products' database before applying the grantRolesToUser command.

LANGUAGE: javascript
CODE:
"roles" : [
    { "role" : "assetsReader",
      "db" : "assets"
    }
]

----------------------------------------

TITLE: Listing Databases in MongoDB Sharded Cluster
DESCRIPTION: This snippet demonstrates how to list all databases in a MongoDB sharded cluster by querying the 'databases' collection in the config database. It requires connecting to a mongos instance.

LANGUAGE: javascript
CODE:
use config
db.databases.find()

----------------------------------------

TITLE: Setting Query Settings with Query Shape Hash
DESCRIPTION: Alternative syntax for setting query settings using an existing query shape hash string instead of query parameters.

LANGUAGE: javascript
CODE:
db.adminCommand( {
   setQuerySettings: <string>,  // Provide an existing query shape hash string
   // Provide a settings document with indexHints and other fields
   settings: { 
      indexHints: [ { 
         ns: { db: <string>, coll: <string> },
         allowedIndexes: <array>
      }, ... ],
      queryFramework: <string>,
      reject: <boolean>,
      comment: <BSON type>
   }
} )

----------------------------------------

TITLE: Equivalent $convert Expression for $toDecimal in MongoDB
DESCRIPTION: Demonstrates the equivalent $convert expression that $toDecimal is a shorthand for, showing how to explicitly convert a value to decimal type.

LANGUAGE: javascript
CODE:
{ $convert: { input: <expression>, to: "decimal" } }

----------------------------------------

TITLE: Non-voting Member Configuration in MongoDB RST Documentation
DESCRIPTION: Documentation snippet showing the configuration requirement that members with 0 votes must have a priority of 0 in MongoDB replica sets. This is specified using RST documentation format with MongoDB configuration references.

LANGUAGE: rst
CODE:
Non-voting (i.e. :rsconf:`~members[n].votes` is ``0``) members must have
:rsconf:`~members[n].priority` of 0.

----------------------------------------

TITLE: Calculating Inverse Tangent in Radians using MongoDB Aggregation
DESCRIPTION: Shows an aggregation pipeline that uses $atan to calculate the angle adjacent to side_a of a triangle. The result is returned in radians without conversion.

LANGUAGE: bash
CODE:
db.trigonometry.aggregate([
  { 
    $addFields : {
      "angle_a" : {
        $atan : {
          $divide : [ "$side_b", "$side_a" ]
        }
      }
    }
  }
])

----------------------------------------

TITLE: Creating Change Stream with Expanded Events in MongoDB
DESCRIPTION: This snippet demonstrates how to create a change stream cursor with the showExpandedEvents option set to true. This allows the change stream to include notifications for DDL events like createIndexes and dropIndexes, which is a feature introduced in MongoDB 6.0.

LANGUAGE: javascript
CODE:
let cur = db.names.aggregate( [ { 
   $changeStream: { 
       showExpandedEvents: true 
     } 
   }
 ] )

cur.next()

----------------------------------------

TITLE: Basic $isArray Syntax in MongoDB
DESCRIPTION: Demonstrates the basic syntax for using the $isArray operator in MongoDB aggregation pipeline.

LANGUAGE: javascript
CODE:
{ $isArray: [ <expression> ] }

----------------------------------------

TITLE: Creating Index in MongoDB Shell
DESCRIPTION: Creates a unique index on the keyAltNames field in the encryption.__keyVault collection using the MongoDB shell

LANGUAGE: javascript
CODE:
keyVault.createIndex({
  "keyAltNames": 1
}, {
  "unique": true,
  "partialFilterExpression": {
    "keyAltNames": {
      "$exists": true
    }
  }
})

----------------------------------------

TITLE: Configuring Cloud Account Credentials for MongoDB CSFLE
DESCRIPTION: This snippet shows how to set up cloud account credentials for client-side field level encryption in MongoDB. It includes provider-specific configuration for Google Cloud Platform (GCP).

LANGUAGE: java
CODE:
Map<String, Map<String, Object>> kmsProviders = new HashMap<String, Map<String, Object>>();
Map<String, Object> providerDetails = new HashMap<String, Object>();
providerDetails.put("email", "my-email@project.iam.gserviceaccount.com");
providerDetails.put("privateKey", "-----BEGIN PRIVATE KEY-----\nMIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQC4JOyxhBw+DTXG
...
+vAfo49deVrKR7CHUJHOy/+7aG4+pLiq6QbIkKE=\n-----END PRIVATE KEY-----");
kmsProviders.put("gcp", providerDetails);

LANGUAGE: javascript
CODE:
const kmsProviders = {
  gcp: {
    email: "my-email@project.iam.gserviceaccount.com",
    privateKey: "-----BEGIN PRIVATE KEY-----\nMIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQC4JOyxhBw+DTXG\n...\n+vAfo49deVrKR7CHUJHOy/+7aG4+pLiq6QbIkKE=\n-----END PRIVATE KEY-----"
  }
};

LANGUAGE: python
CODE:
kms_providers = {
    "gcp": {
        "email": "my-email@project.iam.gserviceaccount.com",
        "privateKey": "-----BEGIN PRIVATE KEY-----\nMIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQC4JOyxhBw+DTXG\n...\n+vAfo49deVrKR7CHUJHOy/+7aG4+pLiq6QbIkKE=\n-----END PRIVATE KEY-----"
    }
}

LANGUAGE: csharp
CODE:
var kmsProviders = new Dictionary<string, IReadOnlyDictionary<string, object>>
{
    { "gcp", new Dictionary<string, object>
        {
            { "email", "my-email@project.iam.gserviceaccount.com" },
            { "privateKey", "-----BEGIN PRIVATE KEY-----\nMIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQC4JOyxhBw+DTXG\n...\n+vAfo49deVrKR7CHUJHOy/+7aG4+pLiq6QbIkKE=\n-----END PRIVATE KEY-----" }
        }
    }
};

LANGUAGE: go
CODE:
kmsProviders := map[string]map[string]interface{}{
	"gcp": {
		"email":     "my-email@project.iam.gserviceaccount.com",
		"privateKey": "-----BEGIN PRIVATE KEY-----\nMIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQC4JOyxhBw+DTXG\n...\n+vAfo49deVrKR7CHUJHOy/+7aG4+pLiq6QbIkKE=\n-----END PRIVATE KEY-----",
	},
}

----------------------------------------

TITLE: Demonstrating Text Index Tokenization in MongoDB
DESCRIPTION: This example shows how a text index tokenizes a French string using Unicode 8.0 delimiters. It highlights the difference in tokenization between version 3 and previous versions of text indexes.

LANGUAGE: plaintext
CODE:
Il a dit qu'il «était le meilleur joueur du monde»

----------------------------------------

TITLE: Inserting Documents into MongoDB Inventory Collection
DESCRIPTION: This code inserts four documents into the 'inventory' collection, each with an _id and an item field containing descriptions of paint and paintbrushes.

LANGUAGE: javascript
CODE:
db.inventory.insertMany([
   { "_id" : 1, "item" : "blue paint" },
   { "_id" : 2, "item" : "blue and green paint" },
   { "_id" : 3, "item" : "blue paint with blue paintbrush" },
   { "_id" : 4, "item" : "blue paint with green paintbrush" },
])

----------------------------------------

TITLE: MongoDB $atanh Basic Syntax
DESCRIPTION: Basic syntax for the $atanh operator in MongoDB aggregation expressions. Takes a numeric expression between -1 and 1 as input.

LANGUAGE: javascript
CODE:
{ $atanh: <expression> }

----------------------------------------

TITLE: Querying MongoDB with $setIntersection for Role-Based Access Control
DESCRIPTION: This snippet demonstrates how to use the $setIntersection operator in MongoDB to check if a user has the required role to perform an update operation. It compares the 'Provider' string with the user's roles stored in $$USER_ROLES.role.

LANGUAGE: javascript
CODE:
$setIntersection: ["Provider", "$$USER_ROLES.role"]

----------------------------------------

TITLE: Sort Array by Multiple Fields - JavaScript
DESCRIPTION: Shows how to perform compound sorting on multiple fields with different sort directions.

LANGUAGE: javascript
CODE:
db.engineers.aggregate( [
   {
      $project:
         {
            _id: 0,
            result:
               {
                  $sortArray:
                     {
                        input: "$team",
                        sortBy: { age: -1, name: 1 }
                     }
               }
         }
    }
 ] )

----------------------------------------

TITLE: MongoDB Replica Set Connection String
DESCRIPTION: Example of an updated connection string for applications to connect to the newly created replica set.

LANGUAGE: shell
CODE:
mongodb://mongodb0.example.net:27017,mongodb1.example.net:27017,mongodb2.example.net:27017

----------------------------------------

TITLE: Multi-Byte Character Data Insertion
DESCRIPTION: Insert sample data containing both single-byte and multi-byte characters into a food collection.

LANGUAGE: javascript
CODE:
db.food.insertMany(
 [
    { "_id" : 1, "name" : "apple" },
    { "_id" : 2, "name" : "banana" },
    { "_id" : 3, "name" : "éclair" },
    { "_id" : 4, "name" : "hamburger" },
    { "_id" : 5, "name" : "jalapeño" },
    { "_id" : 6, "name" : "pizza" },
    { "_id" : 7, "name" : "tacos" },
    { "_id" : 8, "name" : "寿司sushi" }
 ]
)

----------------------------------------

TITLE: Omitting Custom Data from User Information in MongoDB
DESCRIPTION: This snippet shows how to retrieve user information while omitting the custom data from the output by setting the showCustomData option to false.

LANGUAGE: javascript
CODE:
db.getSiblingDB("products").runCommand ( {
   usersInfo: "accountAdmin01",
   showCustomData: false 
} )

----------------------------------------

TITLE: Querying MongoDB for Exact Array Match in MongoDB Compass
DESCRIPTION: This snippet demonstrates the filter to be used in MongoDB Compass to find documents where the 'tags' field exactly matches the array ["red", "blank"].

LANGUAGE: javascript
CODE:
{ tags: ["red", "blank"] }

----------------------------------------

TITLE: Running Queryable Encryption Tutorial
DESCRIPTION: Command to execute the Node.js tutorial script that demonstrates queryable encryption functionality.

LANGUAGE: sh
CODE:
node queryable-encryption-tutorial

----------------------------------------

TITLE: Configuring MongoDB Authentication using INI Format
DESCRIPTION: Legacy INI configuration format example showing how to enable authentication and set SASL authentication parameters including the saslauthd path and PLAIN authentication mechanism.

LANGUAGE: ini
CODE:
auth=true
setParameter=saslauthdPath=/<some>/<path>/saslauthd/mux
setParameter=authenticationMechanisms=PLAIN

----------------------------------------

TITLE: Merging Chunks on Shard0 in MongoDB
DESCRIPTION: Command to merge all mergeable chunks on Shard0, which will combine chunks A-B-C-D and G-H into two larger chunks. This operation works on non-jumbo chunks with empty history.

LANGUAGE: javascript
CODE:
db.adminCommand( { mergeAllChunksOnShard: "db.coll", shard: "Shard0" } )

----------------------------------------

TITLE: Using MongoDB Operator in $project Stage
DESCRIPTION: In the $project stage, the operator functions as an aggregation expression, calculating values for each individual document.

LANGUAGE: mongodb
CODE:
"$project"

----------------------------------------

TITLE: Retrieving Role Inheritance Information in MongoDB
DESCRIPTION: This snippet demonstrates how to use db.getRole() to retrieve role inheritance information for the 'associate' role in the 'products' database.

LANGUAGE: javascript
CODE:
use products
db.getRole( "associate" )

----------------------------------------

TITLE: Using $minN in MongoDB Aggregation Pipeline
DESCRIPTION: Demonstrates how to use $minN within an aggregation pipeline to find the two lowest scores for each player using $addFields.

LANGUAGE: javascript
CODE:
db.scores.aggregate([
   { $addFields: { minScores: { $minN: { n: 2, input: "$score" } } } }
])

----------------------------------------

TITLE: Creating MongoClient Instance in Go for MongoDB Encrypted Data Access
DESCRIPTION: This code snippet shows how to create a MongoClient instance in Go for accessing a key vault and handling encrypted data in MongoDB. It uses the mongo.Connect function with a client options object.

LANGUAGE: go
CODE:
uri := "<Your MongoDB URI>"
client, err := mongo.Connect(context.TODO(), options.Client().ApplyURI(uri))
if err != nil {
    panic(err)
}

----------------------------------------

TITLE: Querying MongoDB Collection with Indexed Field
DESCRIPTION: This snippet demonstrates how to query a MongoDB collection using an indexed field to retrieve newly added documents. It's an alternative approach to tailable cursors for indexed fields.

LANGUAGE: javascript
CODE:
db.<collection>.find( { indexedField: { $gt: <lastvalue> } } )

----------------------------------------

TITLE: Example Output of MongoDB Time Series Collection Query
DESCRIPTION: Shows the response structure from a listCollections command for time series collections, including collection name, type, and time series configuration options such as timeField, metaField, and granularity settings.

LANGUAGE: javascript
CODE:
{
  cursor: {
    id: Long("0"),
    ns: 'test.$cmd.listCollections',
    firstBatch: [
      {
        name: 'weather',
        type: 'timeseries',
        options: {
          timeseries: {
            timeField: 'timestamp',
            metaField: 'metadata',
            granularity: 'hours',
            bucketMaxSpanSeconds: 2592000
          }
        },
        info: { readOnly: false }
      }
    ]
  },
  ok: 1
}

----------------------------------------

TITLE: Removing Audit Configuration Document
DESCRIPTION: This command removes the audit configuration document after downgrade, if necessary.

LANGUAGE: javascript
CODE:
config.settings.remove({_id: 'audit'});

----------------------------------------

TITLE: Configuring Shard Server Inbound Rule in Windows Firewall
DESCRIPTION: This command adds a rule to allow incoming connections from a specific IP address to the MongoDB shard server port.

LANGUAGE: bat
CODE:
netsh advfirewall firewall add rule name="Open mongod shardsvr inbound" dir=in action=allow protocol=TCP remoteip=<ip-address> localport=27018

----------------------------------------

TITLE: Specifying Database-Level Resource in MongoDB
DESCRIPTION: Example showing how to specify an entire database as a resource, excluding system collections.

LANGUAGE: javascript
CODE:
{ db: "test", collection: "" }

----------------------------------------

TITLE: Querying MongoDB with $bitsAllClear using Integer Bitmask
DESCRIPTION: This example shows how to use the $bitsAllClear operator with an integer bitmask to test whether field 'a' has bits clear at positions 0, 1, and 5.

LANGUAGE: javascript
CODE:
db.collection.find( { a: { $bitsAllClear: 35 } } )

----------------------------------------

TITLE: Creating a New Post in Python
DESCRIPTION: Python function to create a new post and insert it into the social.post, social.wall, and social.news collections.

LANGUAGE: python
CODE:
from datetime import datetime

def post(user, dest_user, type, detail, circles):
    ts = datetime.utcnow()
    month = ts.strfime('%Y%m')
    post = {
        'ts': ts,
        'by': { id: user['id'], name: user['name'] },
        'circles': circles,
        'type': type,
        'detail': detail,
        'comments': [] }
    # Update global post collection
    db.social.post.insert(post)
    # Copy to dest user's wall
    if user['id'] not in dest_user['blocked']:
        append_post(db.social.wall, [dest_user['id']], month, post)
    # Copy to followers' news feeds
    if circles == ['*public*']:
        dest_userids = set(user['followers'].keys())
    else:
        dest_userids = set()
        if circles == [ '*circles*' ]:
            circles = user['circles'].keys()
        for circle in circles:
            dest_userids.update(user['circles'][circle])
    append_post(db.social.news, dest_userids, month, post)

----------------------------------------

TITLE: Basic $dateTrunc Syntax
DESCRIPTION: Shows the basic syntax structure for using the $dateTrunc operator in MongoDB aggregation pipeline.

LANGUAGE: javascript
CODE:
{
   $dateTrunc: {
      date: <Expression>,
      unit: <Expression>,
      binSize: <Expression>,
      timezone: <tzExpression>,
      startOfWeek: <Expression>
   }
}

----------------------------------------

TITLE: Retrieving Single Parameter Value in MongoDB
DESCRIPTION: This example demonstrates how to retrieve the value of a single parameter (saslHostName) using the getParameter command in MongoDB.

LANGUAGE: javascript
CODE:
db.adminCommand( { getParameter : 1, "saslHostName" : 1 } )

----------------------------------------

TITLE: Executing updateZoneKeyRange Command in MongoDB
DESCRIPTION: This snippet shows the basic syntax for the updateZoneKeyRange command, which is used to associate or disassociate a range of shard key values with a zone in a sharded MongoDB cluster.

LANGUAGE: javascript
CODE:
db.adminCommand(
   {
     updateZoneKeyRange: <string>,
     min: <document>,
     max: <document>,
     zone: <string> | <null>
   }
)

----------------------------------------

TITLE: Using $searchMeta in MongoDB Atlas Aggregation Pipeline
DESCRIPTION: $searchMeta returns metadata result documents for Atlas Search queries on fields covered by an Atlas Search index. It is only available for collections hosted on MongoDB Atlas and requires an Atlas Search index on the queried fields.

LANGUAGE: mongodb
CODE:
$searchMeta

----------------------------------------

TITLE: Sample Index Drop Operation Result
DESCRIPTION: Example output showing the result of a successful index drop operation, including the number of indexes that existed before the operation.

LANGUAGE: javascript
CODE:
... 
{ "nIndexesWas" : 3, "ok" : 1 }
...

----------------------------------------

TITLE: MongoDB Shell Result: Dropping All Users
DESCRIPTION: This snippet shows the expected result of the db.dropAllUsers() operation, where 'n' indicates the number of users removed.

LANGUAGE: javascript
CODE:
{ "n" : 12, "ok" : 1 }

----------------------------------------

TITLE: Inserting Sample Artwork Data for $bucket and $facet Example
DESCRIPTION: Inserts sample artwork data into a MongoDB collection to be used in an example combining $bucket with $facet. The data includes artwork titles, artists, years, and prices.

LANGUAGE: javascript
CODE:
db.artwork.insertMany([
  { "_id" : 1, "title" : "The Pillars of Society", "artist" : "Grosz", "year" : 1926,
      "price" : NumberDecimal("199.99") },
  { "_id" : 2, "title" : "Melancholy III", "artist" : "Munch", "year" : 1902,
      "price" : NumberDecimal("280.00") },
  { "_id" : 3, "title" : "Dancer", "artist" : "Miro", "year" : 1925,
      "price" : NumberDecimal("76.04") },
  { "_id" : 4, "title" : "The Great Wave off Kanagawa", "artist" : "Hokusai",
      "price" : NumberDecimal("167.30") },
  { "_id" : 5, "title" : "The Persistence of Memory", "artist" : "Dali", "year" : 1931,
      "price" : NumberDecimal("483.00") },
  { "_id" : 6, "title" : "Composition VII", "artist" : "Kandinsky", "year" : 1913,
      "price" : NumberDecimal("385.00") },
  { "_id" : 7, "title" : "The Scream", "artist" : "Munch", "year" : 1893
      /* No price*/ },
  { "_id" : 8, "title" : "Blue Flower", "artist" : "O'Keefe", "year" : 1918,
      "price" : NumberDecimal("118.42") }
])

----------------------------------------

TITLE: Creating MongoDB Encryption Schema
DESCRIPTION: Defines the encryption schema for the collection, specifying which fields should be encrypted and how. This schema is used to automatically encrypt and decrypt specified fields.

LANGUAGE: javascript
CODE:
const encryptedFields = {
    fields: [{
        path: "encryptedField",
        bsonType: "string",
        keyId: UUID("MAIN_KEY_ID"),
        queries: [{ queryType: "equality" }]
    }]
};

----------------------------------------

TITLE: Shard Server Startup Configuration
DESCRIPTION: Configuration options for starting upgraded shard server nodes.

LANGUAGE: yaml
CODE:
sharding:
  clusterRole: shardsvr
replication:
  replSetName: <string>
net:
  port: <port>
  bindIp: localhost,<ip address>
storage:
  dbpath: <path>

----------------------------------------

TITLE: MongoDB Connection String for Motor Driver
DESCRIPTION: This connection string is specific to the Motor driver. It includes multiple host addresses in addition to authentication credentials, authentication source, and replica set name.

LANGUAGE: bash
CODE:
mongodb+srv://myDatabaseUser:D1fficultP%40ssw0rd@mongodb0.example.com:27017,mongodb1.example.com:27017,mongodb2.example.com:27017/?authSource=admin&replicaSet=myRepl

----------------------------------------

TITLE: Deleting MongoDB Firewall Rules in Windows
DESCRIPTION: These commands delete the firewall rules allowing MongoDB traffic on ports 27017 and 27018.

LANGUAGE: bat
CODE:
netsh advfirewall firewall delete rule name="Open mongod port 27017" protocol=tcp localport=27017

netsh advfirewall firewall delete rule name="Open mongod shard port 27018" protocol=tcp localport=27018

----------------------------------------

TITLE: Stopping MongoDB Auto-Merger - Basic Syntax
DESCRIPTION: Shows the basic syntax for stopping the auto-merger functionality in MongoDB. This method must be run from a mongos instance.

LANGUAGE: javascript
CODE:
sh.stopAutoMerger()

----------------------------------------

TITLE: Demonstrating Embedded Field Structure in MongoDB JSON
DESCRIPTION: Shows the structure of a document with an embedded field 'a.b'. This example illustrates how embedded fields are represented in MongoDB documents and why conflicting top-level field names should be avoided.

LANGUAGE: json
CODE:
{ "a" : { "b": ... } }

----------------------------------------

TITLE: Example Documents in MongoDB Config Databases Collection
DESCRIPTION: Sample document structures from the config.databases collection, which stores information about each database in the sharded cluster. This example shows multiple database documents.

LANGUAGE: javascript
CODE:
{ "_id" : "test", "primary" : "shardA", "version" : { "uuid" : UUID("516a5f79-5eb9-4844-8ee9-b8e9de91b760"), "timestamp" : Timestamp(1626894204, 1), "lastMod" : 1 } }
{ "_id" : "hr", "primary" : "shardA", "version" : { "uuid" : UUID("8e39d61d-6259-4c33-a5ed-bcd2ae317b6f"), "timestamp" : Timestamp(1626895015, 1), "lastMod" : 1 } }
{ "_id" : "reporting", "primary" : "shardB", "version" : { "uuid" : UUID("07c63242-51b3-460c-865f-a67b3372d792"), "timestamp" : Timestamp(1626895826, 1), "lastMod" : 1 } }

----------------------------------------

TITLE: ReStructuredText Language Support Table
DESCRIPTION: A table listing all supported languages for MongoDB text search with their corresponding ISO 639-1 two-letter codes. Includes 15 languages from Danish to Turkish.

LANGUAGE: restructuredtext
CODE:
.. list-table::
   :header-rows: 1

   * - Language Name
     - ISO 639-1 (Two letter codes)

   * - ``danish``
     - ``da``

   * -  ``dutch``
     - ``nl``

   * - ``english``
     - ``en``

   * - ``finnish``
     - ``fi``

   * - ``french``
     - ``fr``

   * - ``german``
     - ``de``

   * - ``hungarian``
     - ``hu``

   * - ``italian``
     - ``it``

   * - ``norwegian``
     - ``nb``

   * - ``portuguese``
     - ``pt``

   * - ``romanian``
     - ``ro``

   * - ``russian``
     - ``ru``

   * - ``spanish``
     - ``es``

   * - ``swedish``
     - ``sv``

   * - ``turkish``
     - ``tr``

----------------------------------------

TITLE: MongoDB $atanh Example with Degrees Conversion
DESCRIPTION: Example showing how to calculate inverse hyperbolic tangent and convert the result to degrees using $radiansToDegrees.

LANGUAGE: bash
CODE:
{
  "_id" : ObjectId("5c50782193f833234ba90d85"),
  "x-coordinate" : NumberDecimal("0.5")
}

LANGUAGE: bash
CODE:
db.trigonometry.aggregate([
  { 
    $addFields : {
      "y-coordinate" : {
        $radiansToDegrees : { $atanh : "$x-coordinate" }
      }
    }
  }
])

----------------------------------------

TITLE: Re-enabling the Balancer
DESCRIPTION: Command to re-enable the cluster balancer after downgrade completion.

LANGUAGE: javascript
CODE:
sh.startBalancer()

----------------------------------------

TITLE: Inserting Encrypted Document with C# MongoDB Driver
DESCRIPTION: This snippet illustrates how to insert an encrypted document into the 'medicalRecords.patients' namespace using the C# MongoDB driver with Queryable Encryption enabled.

LANGUAGE: csharp
CODE:
// Code snippet not provided in the input text

----------------------------------------

TITLE: Example Config Shard Status Without Tags
DESCRIPTION: Example output when checking config shard status on a cluster with an enabled config shard but no tags.

LANGUAGE: javascript
CODE:
{ enabled: true, host: 'shard3/localhost:27017' }

----------------------------------------

TITLE: Shutting Down MongoDB Instance
DESCRIPTION: This command shuts down the MongoDB instance. It's part of the upgrade procedure to stop the old version before replacing the binaries.

LANGUAGE: javascript
CODE:
db.adminCommand( { shutdown: 1 } )

----------------------------------------

TITLE: Querying for Config Shard in MongoDB Sharded Cluster
DESCRIPTION: This snippet runs the listShards command and searches for a document with _id set to "config". It demonstrates how to identify the config shard in a MongoDB sharded cluster.

LANGUAGE: javascript
CODE:
db.adminCommand({ listShards: 1 })["shards"].find(element => element._id === "config")

----------------------------------------

TITLE: Referencing Variables in MongoDB Queries
DESCRIPTION: Demonstrates how to reference variables in MongoDB using the double dollar sign ($$) prefix. Includes examples of referencing both simple variables and document field variables.

LANGUAGE: mongodb
CODE:
$$year

LANGUAGE: mongodb
CODE:
$$year.month

----------------------------------------

TITLE: Converting mongod Command-Line Options to YAML Configuration
DESCRIPTION: This snippet shows how to use the --outputConfig option with mongod to generate a YAML configuration from command-line arguments. It includes options for sharding, replication, networking, security, and logging.

LANGUAGE: bash
CODE:
mongod --shardsvr --replSet myShard  --dbpath /var/lib/mongodb --bind_ip localhost,My-Example-Hostname --fork --logpath /var/log/mongodb/mongod.log --clusterAuthMode x509 --tlsMode requireTLS  --tlsCAFile /path/to/my/CA/file  --tlsCertificateKeyFile /path/to/my/certificate/file --tlsClusterFile /path/to/my/cluster/membership/file --outputConfig

----------------------------------------

TITLE: Stopping the MongoDB Balancer
DESCRIPTION: This snippet shows how to stop the MongoDB balancer using the sh.stopBalancer() command. It's important to note that this command can only be run on mongos instances.

LANGUAGE: javascript
CODE:
sh.stopBalancer()

----------------------------------------

TITLE: Setting Progress Monitor Parameters via Command Line in MongoDB
DESCRIPTION: This snippet shows how to set the progressMonitor parameter with specific interval and deadline values when starting mongos from the command line.

LANGUAGE: bash
CODE:
mongos --setParameter 'progressMonitor={"interval": 1000, "deadline": 300}'

----------------------------------------

TITLE: Example MongoDB Delete Change Event Structure
DESCRIPTION: Example showing the structure of a delete event in MongoDB change streams. The event contains metadata about the deletion operation including the timestamp, namespace, and document key of the deleted document.

LANGUAGE: json
CODE:
{
   "_id": { <Resume Token> },
   "operationType": "delete",
   "clusterTime": <Timestamp>,
   "wallTime": <ISODate>,
   "ns": {
      "db": "engineering",
      "coll": "users"
   },
   "documentKey": {
      "_id": ObjectId("599af247bb69cd89961c986d")
   }
}

----------------------------------------

TITLE: Creating Customer Master Key for Queryable Encryption in Node.js
DESCRIPTION: This code snippet shows how to generate a 96-byte Customer Master Key (CMK) and save it to the filesystem as 'master-key.txt' using Node.js.

LANGUAGE: javascript
CODE:
const fs = require('fs');
const crypto = require('crypto');

const key = crypto.randomBytes(96);
fs.writeFileSync('master-key.txt', key);

----------------------------------------

TITLE: Defining RST Parameter References
DESCRIPTION: RST directives defining parameter substitutions and includes for MongoDB sharding task executor pool documentation.

LANGUAGE: rst
CODE:
.. |parameter| replace:: :parameter:`ShardingTaskExecutorPoolMaxSize`
.. |maximum-or-minimum| replace:: maximum

.. include:: /includes/ShardingTaskExecutorPoolSizeForConfigServers-parameter.rst

----------------------------------------

TITLE: Schema Validation Example in MongoDB
DESCRIPTION: Examples showing schema validation setup and insert operations with validation rules, including how to bypass document validation.

LANGUAGE: javascript
CODE:
db.createCollection("users", { 
   validator:
      { 
         status: {
            $in: [ "Unknown", "Incomplete" ]
         }
      }
})

LANGUAGE: javascript
CODE:
db.runCommand({
      insert: "users",
      documents: [ {user: "123", status: "Active" } ]
})

LANGUAGE: javascript
CODE:
db.runCommand({
   insert: "users",
   documents: [ {user: "123", status: "Active" } ], 
   bypassDocumentValidation: true
})

----------------------------------------

TITLE: Go Build Command with CSFLE
DESCRIPTION: Shell command demonstrating how to include the 'cse' build constraint when building or running Golang code with CSFLE support.

LANGUAGE: bash
CODE:
go run -tags cse insert-encrypted-document.go

----------------------------------------

TITLE: MongoDB Aggregation Results with $or Operator
DESCRIPTION: Shows the expected results from the aggregation pipeline using the $or operator. The result field indicates whether each document's quantity meets the specified conditions.

LANGUAGE: javascript
CODE:
{ "_id" : 1, "item" : "abc1", "result" : true }
{ "_id" : 2, "item" : "abc2", "result" : false }
{ "_id" : 3, "item" : "xyz1", "result" : false }
{ "_id" : 4, "item" : "VWZ1", "result" : true }
{ "_id" : 5, "item" : "VWZ2", "result" : true }

----------------------------------------

TITLE: Basic dateFromString Syntax
DESCRIPTION: Demonstrates the basic syntax structure for the $dateFromString operator including all available parameters: dateString, format, timezone, onError, and onNull.

LANGUAGE: javascript
CODE:
{ $dateFromString: {
   dateString: <dateStringExpression>,
   format: <formatStringExpression>,
   timezone: <tzExpression>,
   onError: <onErrorExpression>,
   onNull: <onNullExpression>
} }

----------------------------------------

TITLE: Example of Moving Primary Shard in MongoDB
DESCRIPTION: Practical example showing how to move the primary shard of the 'test' database to 'shard0001' using the movePrimary command.

LANGUAGE: javascript
CODE:
db.adminCommand( { movePrimary : "test", to : "shard0001" } )

----------------------------------------

TITLE: Granting Additional Privileges to a Role in MongoDB
DESCRIPTION: This example shows how to grant two additional privileges to the 'service' role in the 'products' database. It grants find access on all non-system collections and explicitly on the system.js collection.

LANGUAGE: javascript
CODE:
use products
db.runCommand(
   {
     grantPrivilegesToRole: "service",
     privileges: [
         {
           resource: { db: "products", collection: "" }, actions: [ "find" ]
         },
         {
           resource: { db: "products", collection: "system.js" }, actions: [ "find" ]
         }
     ],
     writeConcern: { w: "majority" , wtimeout: 5000 }
   }
)

----------------------------------------

TITLE: Database Commands for Primary Force
DESCRIPTION: Commands used to freeze a secondary member and step down the current primary to force a specific member to become primary.

LANGUAGE: javascript
CODE:
rs.freeze(120)
rs.stepDown(120)

----------------------------------------

TITLE: Checking Replica Configuration for newlyAdded Field
DESCRIPTION: MongoDB shell commands to verify no nodes have a newlyAdded field in their replica set configuration.

LANGUAGE: javascript
CODE:
use local
db.system.replset.find( { "members.newlyAdded" : { $exists : true } } );

----------------------------------------

TITLE: Basic rolesInfo Command Syntax
DESCRIPTION: Basic command structure for retrieving role information, showing available fields and options.

LANGUAGE: javascript
CODE:
db.runCommand(
   {  
     rolesInfo: { role: <name>, db: <db> },
     showAuthenticationRestrictions: <Boolean>,
     showBuiltinRoles: <Boolean>,
     showPrivileges: <Boolean>,
     comment: <any>
   }
)

----------------------------------------

TITLE: MongoDB Query Settings Document Structure
DESCRIPTION: Defines the structure of a querySettings document that contains configuration for index hints and query framework selection. The document includes namespace specifications for index hints and the choice between classic and SBE query frameworks.

LANGUAGE: javascript
CODE:
querySettings: {
      indexHints: [ { 
         ns: { db: <string>, coll: <string> },
         allowedIndexes: <array>
      }, ... ],
      queryFramework: <string>
   }

----------------------------------------

TITLE: Encrypting MongoDB Data with a New KMIP Key
DESCRIPTION: This command starts mongod with encryption enabled, connecting to a KMIP server to create and manage a new master key. It specifies the KMIP server details and necessary certificate files for authentication.

LANGUAGE: bash
CODE:
mongod --enableEncryption \
       --kmipServerName <KMIP Server HostName> \
       --kmipPort <KMIP server port> \
       --kmipServerCAFile ca.pem \
       --kmipClientCertificateFile client.pem

----------------------------------------

TITLE: Using $millisecond in MongoDB Aggregation Pipeline
DESCRIPTION: Demonstrates how to use the $millisecond operator along with other date operators in a MongoDB aggregation pipeline to break down the components of a date field.

LANGUAGE: javascript
CODE:
db.sales.aggregate(
   [
     {
       $project:
         {
           year: { $year: "$date" },
           month: { $month: "$date" },
           day: { $dayOfMonth: "$date" },
           hour: { $hour: "$date" },
           minutes: { $minute: "$date" },
           seconds: { $second: "$date" },
           milliseconds: { $millisecond: "$date" },
           dayOfYear: { $dayOfYear: "$date" },
           dayOfWeek: { $dayOfWeek: "$date" },
           week: { $week: "$date" }
         }
     }
   ]
)

----------------------------------------

TITLE: Initializing MongoDB Collection with Sample Documents
DESCRIPTION: Creates an 'inventory' collection with sample documents to demonstrate the usage of $indexOfCP operator in subsequent examples.

LANGUAGE: javascript
CODE:
{ "_id" : 1, "item" : "foo" }
{ "_id" : 2, "item" : "fóofoo" }
{ "_id" : 3, "item" : "the foo bar" }
{ "_id" : 4, "item" : "hello world fóo" }
{ "_id" : 5, "item" : null }
{ "_id" : 6, "amount" : 3 }

----------------------------------------

TITLE: Configuring Progress Monitor Using setParameter Command in MongoDB Shell
DESCRIPTION: This JavaScript code demonstrates how to use the setParameter command in a mongosh session to configure the progressMonitor with specific interval and deadline values for a running mongos instance.

LANGUAGE: javascript
CODE:
db.adminCommand( 
  {
      setParameter: 1, 
      progressMonitor: { interval: 1000, deadline: 300 } )
  }
)

----------------------------------------

TITLE: Referencing MongoDB Security Image in reStructuredText
DESCRIPTION: This snippet defines an image directive in reStructuredText format. It specifies the path to a security-related SVG image file and provides alternative text for accessibility purposes.

LANGUAGE: restructuredtext
CODE:
.. image:: /images/security.bakedsvg.svg
   :alt: MongoDB Security

----------------------------------------

TITLE: Specifying System Collection Resource in MongoDB
DESCRIPTION: Example showing how to explicitly specify a system collection as a resource.

LANGUAGE: javascript
CODE:
{ db: "test", collection: "system.js" }

----------------------------------------

TITLE: Inserting Sample Data for $bucket Example in MongoDB
DESCRIPTION: Inserts sample artist data into a MongoDB collection to be used in a $bucket aggregation example. The data includes artist names, birth years, and nationalities.

LANGUAGE: javascript
CODE:
db.artists.insertMany([
  { "_id" : 1, "last_name" : "Bernard", "first_name" : "Emil", "year_born" : 1868, "year_died" : 1941, "nationality" : "France" },
  { "_id" : 2, "last_name" : "Rippl-Ronai", "first_name" : "Joszef", "year_born" : 1861, "year_died" : 1927, "nationality" : "Hungary" },
  { "_id" : 3, "last_name" : "Ostroumova", "first_name" : "Anna", "year_born" : 1871, "year_died" : 1955, "nationality" : "Russia" },
  { "_id" : 4, "last_name" : "Van Gogh", "first_name" : "Vincent", "year_born" : 1853, "year_died" : 1890, "nationality" : "Holland" },
  { "_id" : 5, "last_name" : "Maurer", "first_name" : "Alfred", "year_born" : 1868, "year_died" : 1932, "nationality" : "USA" },
  { "_id" : 6, "last_name" : "Munch", "first_name" : "Edvard", "year_born" : 1863, "year_died" : 1944, "nationality" : "Norway" },
  { "_id" : 7, "last_name" : "Redon", "first_name" : "Odilon", "year_born" : 1840, "year_died" : 1916, "nationality" : "France" },
  { "_id" : 8, "last_name" : "Diriks", "first_name" : "Edvard", "year_born" : 1855, "year_died" : 1930, "nationality" : "Norway" }
])

----------------------------------------

TITLE: Setting Up AWS IAM Role Authentication for MongoDB in Java
DESCRIPTION: This Java code demonstrates how to configure an empty HashMap for AWS credentials, allowing the MongoDB driver to automatically use IAM role credentials from the environment.

LANGUAGE: java
CODE:
kmsProviderCredentials.put("aws", new HashMap<>());

----------------------------------------

TITLE: Executing replSetSyncFrom Command in MongoDB
DESCRIPTION: Command syntax for executing replSetSyncFrom in the admin database to specify a new sync target for a replica set member. The command takes a hostname and optional port parameter to identify the target sync member.

LANGUAGE: javascript
CODE:
db.adminCommand( 
      { 
        replSetSyncFrom: "hostname<:port>" 
      }
    )

----------------------------------------

TITLE: Setting Feature Compatibility Version in MongoDB
DESCRIPTION: This command sets the feature compatibility version of a MongoDB replica set to 6.0. It should be run on the primary, and a majority of data-bearing members must be available.

LANGUAGE: javascript
CODE:
db.adminCommand( { setFeatureCompatibilityVersion: "6.0" } )

----------------------------------------

TITLE: Accessing MongoDB Plan Cache
DESCRIPTION: Example showing how to access a collection's plan cache object using getPlanCache() method.

LANGUAGE: javascript
CODE:
db.collection.getPlanCache()

----------------------------------------

TITLE: List All Local Sessions Example
DESCRIPTION: Aggregation pipeline that lists all sessions from the instance's memory cache. Requires listSessions privilege when running with access control.

LANGUAGE: javascript
CODE:
db.aggregate( [  { $listLocalSessions: { allUsers: true } } ] )

----------------------------------------

TITLE: Configuring MongoDB Authentication in INI Format
DESCRIPTION: This snippet demonstrates how to enable authentication and set SASL parameters using the older INI format configuration file for MongoDB. It enables auth, sets an empty saslauthdPath, and specifies PLAIN as the authentication mechanism.

LANGUAGE: ini
CODE:
auth=true
setParameter=saslauthdPath=""
setParameter=authenticationMechanisms=PLAIN

----------------------------------------

TITLE: Printing MongoDB Collection Statistics
DESCRIPTION: A MongoDB shell command that prints statistics for all collections in the current database. The output is separated by three hyphens between each collection's statistics. This method wraps the db.collection.stats() functionality to provide a consolidated view across all collections.

LANGUAGE: javascript
CODE:
db.printCollectionStats()

----------------------------------------

TITLE: MongoDB Aggregation with $gte Example
DESCRIPTION: Shows how to use $gte operator in a $project stage to compare quantity values against a threshold of 250.

LANGUAGE: javascript
CODE:
db.inventory.aggregate(
   [
     {
       $project:
          {
            item: 1,
            qty: 1,
            qtyGte250: { $gte: [ "$qty", 250 ] },
            _id: 0
          }
     }
   ]
)

----------------------------------------

TITLE: Adding Shards to Zones in MongoDB
DESCRIPTION: This snippet shows how to add shards to specific zones using the addShardToZone command. It adds shard0 and shard2 to the HI_RAM zone, and shard1 and shard2 to the FLASH zone.

LANGUAGE: javascript
CODE:
sh.addShardToZone("shard0", "HI_RAM")

sh.addShardToZone("shard2", "HI_RAM")

sh.addShardToZone("shard1", "FLASH")

sh.addShardToZone("shard2", "FLASH")

----------------------------------------

TITLE: Checking Metadata Collection Size in MongoDB Shell
DESCRIPTION: This snippet shows how to check the size of a metadata collection using the MongoDB shell. It uses the totalSize() method on the ESC metadata collection.

LANGUAGE: javascript
CODE:
db.enxcol_.patients.esc.totalSize()

----------------------------------------

TITLE: Deleting Documents with Specific Status in MongoDB using JavaScript
DESCRIPTION: This code snippet demonstrates how to remove all documents from the 'inventory' collection where the 'status' field equals 'A'. It uses the deleteMany() method to perform the deletion operation.

LANGUAGE: javascript
CODE:
db.inventory.deleteMany({ status: "A" })

----------------------------------------

TITLE: Aggregation Result
DESCRIPTION: Example output showing the result of the date breakdown aggregation.

LANGUAGE: javascript
CODE:
{
  "_id" : 1,
  "year" : 2014,
  "month" : 1,
  "day" : 1,
  "hour" : 8,
  "minutes" : 15,
  "seconds" : 39,
  "milliseconds" : 736,
  "dayOfYear" : 1,
  "dayOfWeek" : 4,
  "week" : 0
}

----------------------------------------

TITLE: Installing Prerequisites for MongoDB on Linux
DESCRIPTION: Installs the required packages gnupg and curl using apt-get. These tools are necessary for importing the MongoDB GPG key and downloading installation files.

LANGUAGE: bash
CODE:
sudo apt-get install gnupg curl

----------------------------------------

TITLE: Creating a Non-Strict Stable API Client in MongoDB Shell
DESCRIPTION: Example of how to create a non-strict Stable API client when connecting with the MongoDB shell

LANGUAGE: javascript
CODE:
mongosh --apiVersion 1

----------------------------------------

TITLE: Map-Reduce Operation for Summing Prices by Customer ID
DESCRIPTION: A map-reduce operation that groups orders by customer ID and calculates the sum of prices for each customer.

LANGUAGE: javascript
CODE:
var mapFunction1 = function() {
   emit(this.cust_id, this.price);
};

var reduceFunction1 = function(keyCustId, valuesPrices) {
   return Array.sum(valuesPrices);
};

db.orders.mapReduce(
   mapFunction1,
   reduceFunction1,
   { out: "map_reduce_example" }
)

----------------------------------------

TITLE: Adding New Instance to Replica Set
DESCRIPTION: JavaScript command to add a new instance to the replica set. This is executed in the mongo shell connected to the replica set's primary.

LANGUAGE: javascript
CODE:
rs.add( { host: <host:port> } )

----------------------------------------

TITLE: Using $literal to Project Constant Value in MongoDB
DESCRIPTION: Aggregation pipeline using $literal to add a new field with constant value 1 while maintaining the title field.

LANGUAGE: javascript
CODE:
db.books.aggregate( [
   { $project: { "title": 1, "editionNumber": { $literal: 1 } } }
] )

----------------------------------------

TITLE: Using $rtrim in MongoDB Aggregation Pipeline
DESCRIPTION: Demonstrates how to use the $rtrim operator in a MongoDB aggregation pipeline to remove trailing whitespace from the 'description' field of documents in the inventory collection.

LANGUAGE: javascript
CODE:
db.inventory.aggregate([
   { $project: { item: 1, description: { $rtrim: { input: "$description" } } } }
])

----------------------------------------

TITLE: Configuring Change Stream Pre- and Post-Images in MongoDB (JavaScript)
DESCRIPTION: This code snippet demonstrates the syntax for enabling change stream pre- and post-images for a MongoDB collection. The changeStreamPreAndPostImages option is set with a boolean value to control the feature.

LANGUAGE: javascript
CODE:
changeStreamPreAndPostImages: {
   enabled: <boolean>
}

----------------------------------------

TITLE: MongoDB Hyperbolic Tangent with Degree Input
DESCRIPTION: Example showing how to insert and calculate hyperbolic tangent of an angle stored in degrees, using $degreesToRadians for conversion.

LANGUAGE: javascript
CODE:
db.trigonometry.insertOne(
   {
      "_id" : ObjectId( "5c50782193f833234ba90d45" ),
      "angle" : NumberDecimal( "53.1301023541559787031443874490659" )
   }
)

LANGUAGE: javascript
CODE:
db.trigonometry.aggregate( [
   {
      $addFields : {
         "tanh_output" : { $tanh : { $degreesToRadians : "$angle" } }
      }
   }
] )

----------------------------------------

TITLE: MongoDB Key Characteristics Analysis Output
DESCRIPTION: Represents a detailed analysis of a MongoDB collection including total document count, average document size, value distribution statistics, and monotonicity assessment. Shows metrics like unique value counts, most common values with their frequencies, and correlation coefficients.

LANGUAGE: json
CODE:
{
  "keyCharacteristics": {
    "numDocsTotal" : 9039,
    "avgDocSizeBytes" : 162,
    "numDocsSampled" : 9039,
    "isUnique" : false,
    "numDistinctValues" : 1495,
    "mostCommonValues" : [
      {
        "value" : {
          "userId" : UUID("aadc3943-9402-4072-aae6-ad551359c596")
        },
        "frequency" : 15
      },
      {
        "value" : {
          "userId" : UUID("681abd2b-7a27-490c-b712-e544346f8d07")
        },
        "frequency" : 14
      },
      {
        "value" : {
          "userId" : UUID("714cb722-aa27-420a-8d63-0d5db962390d")
        },
        "frequency" : 14
      },
      {
        "value" : {
          "userId" : UUID("019a4118-b0d3-41d5-9c0a-764338b7e9d1")
        },
        "frequency" : 14
      },
      {
        "value" : {
          "userId" : UUID("b9c9fbea-3c12-41aa-bc69-eb316047a790")
        },
        "frequency" : 14
      }
    ],
    "monotonicity" : {
      "recordIdCorrelationCoefficient" : -0.0032039729,
      "type" : "not monotonic"
    }
  }
}

----------------------------------------

TITLE: Aggregating Documents with $meta Operator for Index Key
DESCRIPTION: Finds documents with a specific type and uses the $meta operator to include the index key value if an index was used in an aggregation pipeline.

LANGUAGE: javascript
CODE:
db.orders.aggregate(
   [
     { $match: { type: "apparel" } },
     { $addFields: { idxKey: { $meta: "indexKey" } } }
   ]
)

----------------------------------------

TITLE: MongoDB Field Encryption Mapping Table
DESCRIPTION: List table showing the mapping between field names, encryption algorithms (Deterministic vs Random), and BSON data types for MongoDB document fields. The table includes 'name' field using Deterministic encryption for String type and 'age' field using Random encryption for Int type.

LANGUAGE: plaintext
CODE:
.. list-table::
   :header-rows: 1
   :widths: 33 34 33

   * - Field Name
     - Encryption Algorithm
     - BSON Type of Field

   * - ``name``
     - Deterministic
     - String

   * - ``age``
     - Random
     - Int

----------------------------------------

TITLE: Setting Member Priority to Force Primary
DESCRIPTION: Commands to modify replica set configuration by adjusting member priorities to force m3.example.net to become primary.

LANGUAGE: javascript
CODE:
cfg = rs.conf()
cfg.members[0].priority = 0.5
cfg.members[1].priority = 0.5
cfg.members[2].priority = 1
rs.reconfig(cfg)

----------------------------------------

TITLE: Reviewing Shard Status and Zone Distribution in MongoDB
DESCRIPTION: This snippet demonstrates how to use the sh.status() method to view the current chunk distribution and shard zones after configuring zone sharding. This helps verify that the collections are distributed as intended across the shards.

LANGUAGE: javascript
CODE:
sh.status()

----------------------------------------

TITLE: Output Collection Specification
DESCRIPTION: Syntax for specifying output to a new collection in MongoDB MapReduce.

LANGUAGE: javascript
CODE:
out: <collectionName>

----------------------------------------

TITLE: Persistent IP Forwarding Configuration in sysctl.conf
DESCRIPTION: This configuration line is added to the /etc/sysctl.conf file to make the IP forwarding disabled state persistent across system reboots on Linux systems hosting MongoDB.

LANGUAGE: conf
CODE:
net.ipv4.ip_forward = 0

----------------------------------------

TITLE: Setting DNS Health Monitoring Intensity at MongoDB Startup
DESCRIPTION: This snippet shows how to set the DNS health monitoring intensity to 'critical' when starting mongos using command-line parameters.

LANGUAGE: bash
CODE:
mongos --setParameter 'healthMonitoringIntensities={ values:[ { type:"dns", intensity: "critical"} ] }'

----------------------------------------

TITLE: Viewing Validation Rules with listCollections Command
DESCRIPTION: Alternative command using listCollections to view collection validation rules. Returns a more detailed object including collection metadata.

LANGUAGE: javascript
CODE:
db.runCommand ( { listCollections: 1, filter: { name: "students" } } )

----------------------------------------

TITLE: Basic $listLocalSessions Syntax
DESCRIPTION: Shows the basic syntax structure for the $listLocalSessions pipeline stage which accepts a configuration document.

LANGUAGE: javascript
CODE:
{ $listLocalSessions: <document> }

----------------------------------------

TITLE: Configuring Azure KMS Provider for MongoDB Queryable Encryption
DESCRIPTION: This code specifies the Azure KMS provider and credentials for queryable encryption. It includes the necessary Azure key information and tenant details required for authentication.

LANGUAGE: javascript
CODE:
const provider = "azure";
const kmsProviders = {
  azure: {
    tenantId: "<YOUR-TENANT-ID>",
    clientId: "<YOUR-CLIENT-ID>",
    clientSecret: "<YOUR-CLIENT-SECRET>",
  },
};

----------------------------------------

TITLE: Query Results Display
DESCRIPTION: Shows the output of the $expr query, displaying documents where spending exceeded budget.

LANGUAGE: javascript
CODE:
{ _id : 1, category : "food", budget : 400, spent : 450 }
{ _id : 2, category : "drinks", budget : 100, spent : 150 }
{ _id : 5, category : "travel", budget : 200, spent : 650 }

----------------------------------------

TITLE: Creating Collection with Initial Balances in MongoDB
DESCRIPTION: Creates a 'balances' collection in the 'accounts' database and inserts initial account balances for two customers using Decimal128 type for precision.

LANGUAGE: javascript
CODE:
use accounts
db.balances.insertMany( [
  { customer: "Pat", balance: Decimal128( "35.88" ) },
  { customer: "Sasha", balance: Decimal128( "5.23" ) }
] )

----------------------------------------

TITLE: Configuring KMIP Provider Endpoint
DESCRIPTION: Setup code for specifying the KMIP provider endpoint URI and initializing the connection configuration. This is required for establishing communication with the KMIP key management server.

LANGUAGE: java
CODE:
Map<String, Map<String, Object>> kmsProviders = new HashMap<String, Map<String, Object>>() {
    {
        put("kmip", new HashMap<String, Object>());
    }
};

LANGUAGE: javascript
CODE:
const kmsProviders = {
    kmip: {}
};

LANGUAGE: python
CODE:
kms_providers = {
    "kmip": {}
}

----------------------------------------

TITLE: Initializing KeyVault and Deleting Key - MongoDB JavaScript
DESCRIPTION: Basic syntax example showing how to initialize a key vault and delete a key using UUID.

LANGUAGE: javascript
CODE:
keyVault = db.getMongo().getKeyVault()

keyVault.deleteKey(UUID("<UUID String>"))

----------------------------------------

TITLE: Using sh.listShards() Method in MongoDB
DESCRIPTION: Basic syntax demonstration of the sh.listShards() method which returns a list of configured shards in a MongoDB cluster.

LANGUAGE: javascript
CODE:
sh.listShards()

----------------------------------------

TITLE: MongoDB dropConnections Command Syntax
DESCRIPTION: Basic syntax for the dropConnections command that must be run against the admin database. Requires hostAndPort array specifying target connections to drop and optional comment field.

LANGUAGE: javascript
CODE:
db.adminCommand(
   { 
     dropConnections: 1, 
     hostAndPort : [ "host1:port1", "host2:port2", ... ],
     comment: <any>
   }
)

----------------------------------------

TITLE: Using $concatArrays as Aggregation Accumulator
DESCRIPTION: Example demonstrating $concatArrays usage as an accumulator in a $group stage to combine elements of all 'items' arrays when grouping by location field.

LANGUAGE: javascript
CODE:
db.sales.aggregate( [ 
   {
      $group: {
         _id: "$location",
         array: { "$concatArrays": "$items" }
      }
   }
] )

----------------------------------------

TITLE: Executing planCacheClearFilters Command in MongoDB
DESCRIPTION: This snippet shows the basic syntax for running the planCacheClearFilters command. It allows for specifying the collection name, query pattern, sort specification, projection specification, collation, and a comment.

LANGUAGE: javascript
CODE:
db.runCommand(
   {
      planCacheClearFilters: <collection>,
      query: <query pattern>,
      sort: <sort specification>,
      projection: <projection specification>,
      collation: { <collation> },
      comment: <any>
   }
)

----------------------------------------

TITLE: Executing geoSearch Command with Read Concern in MongoDB
DESCRIPTION: This example shows how to use the geoSearch command with a specified read concern level of 'majority'. This ensures that the operation reads the most recent data confirmed as written to a majority of nodes in a replica set.

LANGUAGE: javascript
CODE:
db.runCommand(
   {
      geoSearch: "places",
      near: [ -73.9667, 40.78 ],
      search : { type : "restaurant" },
      readConcern: { level: "majority" }
    }
)

----------------------------------------

TITLE: Modifying TcpMaxDataRetransmissions Registry Setting in Windows
DESCRIPTION: PowerShell command to modify the TcpMaxDataRetransmissions value in the Windows registry. Requires administrator privileges and accepts an integer value parameter.

LANGUAGE: powershell
CODE:
reg add HKLM\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\ /t REG_DWORD /v TcpMaxDataRetransmission /d <value>

----------------------------------------

TITLE: Result of $isoDayOfWeek Aggregation
DESCRIPTION: Shows the output format of the $isoDayOfWeek aggregation operation.

LANGUAGE: javascript
CODE:
[
   { name: "Betty", dayOfWeek: 2 },
   { name: "Veronica", dayOfWeek: 6 }
]

----------------------------------------

TITLE: Querying Encrypted Documents in C#
DESCRIPTION: This C# code snippet demonstrates how to query a document with encrypted fields. It shows the difference in query results between a client configured for automatic Queryable Encryption and one that is not.

LANGUAGE: csharp
CODE:
start-find
end-find

----------------------------------------

TITLE: Sample Output of hostInfo Command on Linux
DESCRIPTION: This snippet illustrates the structure and content of the output returned by the hostInfo command when executed on a Linux system. It includes system information, OS details, and additional system-specific data.

LANGUAGE: javascript
CODE:
{
   "system" : {
          "currentTime" : ISODate("<timestamp>"),
          "hostname" : "<hostname>",
          "cpuAddrSize" : <number>,
          "memSizeMB" : <number>, 
          "memLimitMB" : <number>, 
          "numCores" : <number>,
          "numCoresAvailableToProcess" : <number>,
          "cpuArch" : "<identifier>",
          "numaEnabled" : <boolean>
   },
   "os" : {
          "type" : "<string>",
          "name" : "<string>",
          "version" : "<string>"
   },
   "extra" : {
          "versionString" : "<string>",
          "libcVersion" : "<string>",
          "kernelVersion" : "<string>",
          "cpuFrequencyMHz" : "<string>",
          "cpuFeatures" : "<string>",
          "pageSize" : <number>,
          "numPages" : <number>,
          "maxOpenFiles" : <number>
   },
   "ok" : <return>
}

----------------------------------------

TITLE: Example MongoDB Query Shape Hash
DESCRIPTION: A sample query shape hash string that uniquely identifies a query shape in MongoDB. Query shape hashes are used for query identification and optimization purposes.

LANGUAGE: plaintext
CODE:
F42757F1AEB68B4C5A6DE6182B29B01947C829C926BCC01226BDA4DDE799766C

----------------------------------------

TITLE: Referencing db.getLastErrorObj() Method in MongoDB Documentation
DESCRIPTION: This RST code snippet defines the structure and content for the documentation page of the db.getLastErrorObj() method. It sets up the page title, domain, and table of contents.

LANGUAGE: rst
CODE:
:orphan:

====================
db.getLastErrorObj()
====================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol


Removed in MongoDB 5.1. 

.. include:: /includes/5.0-changes/fact-getLastError-alternatives.rst

----------------------------------------

TITLE: Executing planCacheListFilters Command in MongoDB
DESCRIPTION: Basic syntax for running the planCacheListFilters command to list index filters for a collection. The command requires a collection name parameter.

LANGUAGE: javascript
CODE:
db.runCommand( 
   { 
     planCacheListFilters: <collection> 
   } 
)

----------------------------------------

TITLE: MongoDB CollMod Command Reference
DESCRIPTION: Demonstrates MongoDB collection modification command behavior when majority read concern is disabled. When executed, index modifications cannot be rolled back and affected nodes must be resynced with the primary.

LANGUAGE: mongodb
CODE:
collMod

----------------------------------------

TITLE: Starting MongoDB Balancer - Basic Syntax
DESCRIPTION: The basic syntax for the balancerStart command showing the available fields. Must be run against the admin database on a mongos instance.

LANGUAGE: javascript
CODE:
db.adminCommand( 
   { 
     balancerStart: 1, 
     maxTimeMS: <number> 
   } 
)

----------------------------------------

TITLE: Inserting Multiple Documents into a Sensor Data Collection in MongoDB
DESCRIPTION: Demonstrates inserting multiple documents into a 'sensorData' collection, each containing metadata, timestamp, and current weather conditions.

LANGUAGE: javascript
CODE:
db.sensorData.insertMany( [ {
     "metadata": {
         "sensorId": 5578,
         "type": "omni",
         "location": {
             type: "Point",
             coordinates: [-77.40711, 39.03335]
         }
     },
     "timestamp": ISODate("2022-01-15T00:00:00.000Z"),
     "currentConditions": {
         "windDirection": 127.0,
         "tempF": 71.0,
         "windSpeed": 2.0,
         "cloudCover": null,
         "precip": 0.1,
         "humidity": 94.0,
     }
   },
   {
     "metadata": {
         "sensorId": 5578,
         "type": "omni",
         "location": {
             type: "Point",
             coordinates: [-77.40711, 39.03335]
         }
     },
     "timestamp": ISODate("2022-01-15T00:01:00.000Z"),
     "currentConditions": {
         "windDirection": 128.0,
         "tempF": 69.8,
         "windSpeed": 2.2,
         "cloudCover": null,
         "precip": 0.1,
         "humidity": 94.3,
     }
   },
   {
     "metadata": {
         "sensorId": 5579,
         "type": "omni",
         "location": {
             type: "Point",
             coordinates: [-80.19773, 25.77481]
         }
     },
     "timestamp": ISODate("2022-01-15T00:01:00.000Z"),
     "currentConditions": {
         "windDirection": 115.0,
         "tempF": 88.0,
         "windSpeed": 1.0,
         "cloudCover": null,
         "precip": 0.0,
         "humidity": 99.0,
     }
    } 
  ] 
)

----------------------------------------

TITLE: Incorrect Count Using Sparse Index Hint in MongoDB
DESCRIPTION: Demonstrates how using hint() with a sparse index can lead to incorrect document counts. The example shows document insertion, sparse index creation, and count operation with hint.

LANGUAGE: javascript
CODE:
db.collection.insertOne( { _id: 1, y: 1 } );
db.collection.createIndex( { x: 1 }, { sparse: true } );

db.collection.find().hint( { x: 1 } ).count();

----------------------------------------

TITLE: HiddenShardedCollection Format Schema
DESCRIPTION: JSON schema showing the structure of a HiddenShardedCollection inconsistency document. Contains type identifier, description, and details about the affected namespace and collection.

LANGUAGE: json
CODE:
{
   type: "HiddenShardedCollection",
   description: "<string>",
   details: {
      namespace: "<string>",
      collection: "<object>",
   }
}

----------------------------------------

TITLE: MongoDB Read Preference Modes Supporting maxStalenessSeconds
DESCRIPTION: List of MongoDB read preference modes that support the maxStalenessSeconds option. The option must be set to 90 seconds or higher and helps manage replication lag tolerance for secondary reads.

LANGUAGE: mongodb
CODE:
primaryPreferred
secondary
secondaryPreferred
nearest

----------------------------------------

TITLE: Inserting Sample Documents into MongoDB Collection
DESCRIPTION: Demonstrates inserting multiple documents into a MongoDB collection named 'collection' using the insertMany() method. These documents will be used in subsequent examples.

LANGUAGE: javascript
CODE:
db.collection.insertMany([
   { "_id": 1, "name" : { "first" : "John", "last" : "Backus" } },
   { "_id": 2, "name" : { "first" : "John", "last" : "McCarthy" } },
   { "_id": 3, "name": { "first" : "Grace", "last" : "Hopper" } },
   { "_id": 4, "firstname": "Ole-Johan", "lastname" : "Dahl" },
])

----------------------------------------

TITLE: Retrieving Collection Information Including expireAfterSeconds in MongoDB
DESCRIPTION: This snippet shows how to use the listCollections command to retrieve information about collections, including the expireAfterSeconds value for time series collections. The result includes details about the collection options and timeseries configuration.

LANGUAGE: javascript
CODE:
db.runCommand( { listCollections: 1 } )

----------------------------------------

TITLE: Node.js MongoDB Driver Setup
DESCRIPTION: Basic Node.js driver code example setup.

LANGUAGE: javascript
CODE:
// You are viewing the Node.js driver code examples.
// Use the dropdown menu to select a different driver.

----------------------------------------

TITLE: Configuring Non-Voting Member in MongoDB Replica Set
DESCRIPTION: JSON configuration example showing how to set up a non-voting member in a MongoDB replica set. The configuration specifies various member properties including votes and priority set to 0 to designate it as non-voting.

LANGUAGE: javascript
CODE:
{
   "_id" : <num>,
   "host" : <hostname:port>,
   "arbiterOnly" : false,
   "buildIndexes" : true,
   "hidden" : false,
   "priority" : 0,
   "tags" : {
   },
   "secondaryDelaySecs" : NumberLong(0),
   "votes" : 0
}

----------------------------------------

TITLE: Syntax for Disabling Auto Merger in MongoDB
DESCRIPTION: This snippet shows the syntax for using the sh.disableAutoMerger() method in MongoDB. It takes a single parameter 'namespace' which specifies the target collection.

LANGUAGE: javascript
CODE:
sh.disableAutoMerger( <namespace> )

----------------------------------------

TITLE: Starting a MongoDB Instance for a Replica Set
DESCRIPTION: This command starts a new mongod instance, specifying the data directory, replica set name, and IP binding. It's used to prepare a new member for addition to a shard.

LANGUAGE: sh
CODE:
mongod --dbpath /srv/mongodb/db0 --replSet rs0  --bind_ip localhost,<ip address of the mongod host>

----------------------------------------

TITLE: Ranking Documents with Duplicate Values and Nulls
DESCRIPTION: Example showing how $rank handles documents with duplicate values, null values, and missing fields when ranking cake sales by quantity.

LANGUAGE: javascript
CODE:
db.cakeSalesWithDuplicates.aggregate( [
   {
      $setWindowFields: {
         partitionBy: "$state",
         sortBy: { quantity: -1 },
         output: {
            rankQuantityForState: {
               $rank: {}
            }
         }
      }
   }
] )

----------------------------------------

TITLE: Executing updateUser Command to Replace User Data
DESCRIPTION: This snippet demonstrates how to use the updateUser command to completely replace a user's custom data and roles. It updates the user 'appClient01' in the 'products' database.

LANGUAGE: javascript
CODE:
use products
db.runCommand( {
   updateUser : "appClient01",
   customData : { employeeId : "0x3039" },
   roles : [ { role : "read", db : "assets" } ]
} )

----------------------------------------

TITLE: Applying $pullAll to Remove Multiple Values
DESCRIPTION: Demonstrates using $pullAll to remove all instances of values 0 and 5 from the scores array.

LANGUAGE: javascript
CODE:
db.survey.updateOne( { _id: 1 }, { $pullAll: { scores: [ 0, 5 ] } } )

----------------------------------------

TITLE: Specifying Key Vault Namespace for MongoDB Queryable Encryption
DESCRIPTION: This snippet demonstrates how to specify the encryption.__keyVault as the key vault namespace for Queryable Encryption. It's a crucial step in setting up the encryption infrastructure.

LANGUAGE: javascript
CODE:
const keyVaultNamespace = "encryption.__keyVault";

----------------------------------------

TITLE: Configuring Minimum IAM User Policy for AWS KMS Encryption/Decryption
DESCRIPTION: This JSON policy grants the IAM user minimum privileges to encrypt and decrypt using a specific AWS KMS Customer Master Key. It requires the ARN of the master key and follows the principle of least privilege for security.

LANGUAGE: json
CODE:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "EncryptDecrypt",
      "Effect": "Allow",
      "Action": [
        "kms:Encrypt",
        "kms:Decrypt"
      ],
      "Resource": "<Your KMS Key ARN>"
    }
  ]
}

----------------------------------------

TITLE: Accessing Dollar-Prefixed Fields in Aggregation Pipeline
DESCRIPTION: Shows how to update dollar-prefixed fields using $setField, $getField, and $literal operators in an aggregation pipeline.

LANGUAGE: javascript
CODE:
db.school.aggregate( [
   { $match: { "registered": true } }, 
   { $replaceWith: {
      $setField: {
         field: { $literal: "$term" }, 
         input: "$$ROOT",
         value: "spring"
   } } },
   { $out: "spring2022" }
] )

----------------------------------------

TITLE: Executing Multiple Operations with bulkWrite() in MongoDB
DESCRIPTION: Demonstrates executing multiple different write operations in a single bulkWrite() call.

LANGUAGE: javascript
CODE:
db.collection.bulkWrite(
   [
      { insertOne : <document> },
      { updateOne : <document> },
      { updateMany : <document> },
      { replaceOne : <document> },
      { deleteOne : <document> },
      { deleteMany : <document> }
   ]
)

----------------------------------------

TITLE: Executing Multiple Operations with bulkWrite() in MongoDB
DESCRIPTION: Demonstrates executing multiple different write operations in a single bulkWrite() call.

LANGUAGE: javascript
CODE:
db.collection.bulkWrite(
   [
      { insertOne : <document> },
      { updateOne : <document> },
      { updateMany : <document> },
      { replaceOne : <document> },
      { deleteOne : <document> },
      { deleteMany : <document> }
   ]
)

----------------------------------------

TITLE: MongoDB moveCollection Command Example
DESCRIPTION: Example usage of moveCollection command to move the 'inventory' collection from 'app' database to shard 'shard02'.

LANGUAGE: javascript
CODE:
db.adminCommand( 
  { 
    moveCollection: "app.inventory",
    toShard: "shard02"
  } 
)

----------------------------------------

TITLE: Querying Documents Based on User Roles in MongoDB
DESCRIPTION: This code snippet demonstrates the document structure for role-based access control in MongoDB. It shows three documents with different 'allowedRoles' fields, representing data visible to a user with multiple roles.

LANGUAGE: javascript
CODE:
[
   {
      _id: 0,
      allowedRoles: [ 'Marketing' ],
      comment: 'For marketing team',
      yearlyBudget: 15000
   },
   {
      _id: 2,
      allowedRoles: [ 'Operations' ],
      comment: 'For operations team',
      yearlyBudget: 19000,
      cloudBudget: 12000
   },
   {
      _id: 3,
      allowedRoles: [ 'Development' ],
      comment: 'For development team',
      yearlyBudget: 27000
   }
]

----------------------------------------

TITLE: MongoDB $dateToParts Aggregation Pipeline Example
DESCRIPTION: Aggregation pipeline showing three different uses of $dateToParts: basic, ISO8601, and with timezone specification.

LANGUAGE: javascript
CODE:
db.sales.aggregate([
{
   $project: {
      date: {
         $dateToParts: { date: "$date" } 
      },
      date_iso: { 
         $dateToParts: { date: "$date", iso8601: true }
      },
      date_timezone: {
         $dateToParts: { date: "$date", timezone: "America/New_York" }
      }  
   }
}])

----------------------------------------

TITLE: Running $currentOp Pipeline with Filtering in MongoDB
DESCRIPTION: Executes a pipeline with two stages: $currentOp operation to retrieve current operations, and $match to filter results for a specific shard. This example demonstrates using db.aggregate() for admin/diagnostic purposes.

LANGUAGE: javascript
CODE:
use admin
db.aggregate( [ { 
   $currentOp : { allUsers: true, idleConnections: true } }, { 
   $match : { shard: "shard01" } 
   }
] )

----------------------------------------

TITLE: Connecting to MongoDB Instance with mongosh
DESCRIPTION: Uses mongosh to connect to an existing MongoDB instance on a specific host and port.

LANGUAGE: shell
CODE:
mongosh "mongodb://mongodb0.example.net:27017"

----------------------------------------

TITLE: Querying with $elemMatch
DESCRIPTION: Demonstrates how to query array elements using $elemMatch operator to enable bounds intersection for better query performance.

LANGUAGE: javascript
CODE:
db.students.find( { grades : { $elemMatch: { $gte: 90, $lte: 99 } } } )

----------------------------------------

TITLE: Removing Tag Range for New York Zip Codes in MongoDB
DESCRIPTION: Example showing how to remove a tag range for zip codes in New York State using a compound shard key of {state: 1, zip: 1}. The range spans from MinKey to MaxKey for the zip field while keeping state fixed to NY.

LANGUAGE: javascript
CODE:
sh.removeTagRange( "exampledb.collection",
                   { state: "NY", zip: MinKey },
                   { state: "NY", zip: MaxKey }
                 )

----------------------------------------

TITLE: Setting up MongoDB Query with Projection in Compass
DESCRIPTION: This snippet demonstrates how to set up a query with projection in MongoDB Compass. It shows the steps to enter the filter and projection expressions in the Compass interface.

LANGUAGE: javascript
CODE:
{ status: "A" }

LANGUAGE: javascript
CODE:
{ item: 1, status: 1, "instock.qty": 1 }

----------------------------------------

TITLE: Shutting Down a Primary MongoDB Instance with Extended Timeout
DESCRIPTION: This example shows how to shut down a primary MongoDB instance with a longer timeout period of 60 seconds.

LANGUAGE: javascript
CODE:
db.adminCommand({ "shutdown" : 1, timeoutSecs: 60 })

----------------------------------------

TITLE: Inserting Sample Data into MongoDB Collections
DESCRIPTION: Creates two sample collections 'inventory' and 'orders' with test data for demonstrating collection joins.

LANGUAGE: javascript
CODE:
db.inventory.insertMany( [
   { prodId: 100, price: 20, quantity: 125 },
   { prodId: 101, price: 10, quantity: 234 },
   { prodId: 102, price: 15, quantity: 432 },
   { prodId: 103, price: 17, quantity: 320 }
] )

db.orders.insertMany( [
   { orderId: 201, custid: 301, prodId: 100, numPurchased: 20 }, 
   { orderId: 202, custid: 302, prodId: 101, numPurchased: 10 }, 
   { orderId: 203, custid: 303, prodId: 102, numPurchased: 5 }, 
   { orderId: 204, custid: 303, prodId: 103, numPurchased: 15 }, 
   { orderId: 205, custid: 303, prodId: 103, numPurchased: 20 }, 
   { orderId: 206, custid: 302, prodId: 102, numPurchased: 1 }, 
   { orderId: 207, custid: 302, prodId: 101, numPurchased: 5 }, 
   { orderId: 208, custid: 301, prodId: 100, numPurchased: 10 }, 
   { orderId: 209, custid: 303, prodId: 103, numPurchased: 30 }
] )

----------------------------------------

TITLE: Basic $count Syntax in MongoDB Aggregation
DESCRIPTION: Shows the basic syntax for using the $count stage in a MongoDB aggregation pipeline. The string parameter specifies the name of the output field that will contain the count.

LANGUAGE: javascript
CODE:
{ $count: <string> }

----------------------------------------

TITLE: Executing appendOplogNote Command in MongoDB JavaScript
DESCRIPTION: This snippet demonstrates the syntax for running the appendOplogNote command on the admin database in MongoDB. The command appends a non-operational entry to the oplog.

LANGUAGE: javascript
CODE:
db.adminCommand(
   {
      appendOplogNote: 1,
      data: <document>
   }
)

----------------------------------------

TITLE: Creating CMK in Java
DESCRIPTION: Code to generate a 96-byte Customer Master Key and save it to master-key.txt using Java

LANGUAGE: java
CODE:
import java.io.FileOutputStream;
import java.security.SecureRandom;

SecureRandom random = new SecureRandom();
byte[] key = new byte[96];
random.nextBytes(key);

FileOutputStream stream = new FileOutputStream("master-key.txt");
stream.write(key);
stream.close();

----------------------------------------

TITLE: Inserting Geospatial Documents in MongoDB
DESCRIPTION: Creates a places collection by inserting multiple documents containing GeoJSON Point coordinates along with place names and categories. The documents include locations for Central Park, La Guardia Airport, and Stonehenge with their respective coordinates and metadata.

LANGUAGE: javascript
CODE:
db.places.insertMany( [
   {
      loc: { type: "Point", coordinates: [ -73.97, 40.77 ] },
      name: "Central Park",
      category : "Park"
   },
   {
      loc: { type: "Point", coordinates: [ -73.88, 40.78 ] },
      name: "La Guardia Airport",
      category: "Airport"
   },
   {
      loc: { type: "Point", coordinates: [ -1.83, 51.18 ] },
      name: "Stonehenge",
      category : "Monument"
   }
] )

----------------------------------------

TITLE: Converting Certificate to PKCS12 Format Using OpenSSL
DESCRIPTION: OpenSSL command to convert a certificate to PKCS12 format, required for C# client implementation. Specifies the output file, input certificate, certificate name, and password.

LANGUAGE: shell
CODE:
openssl pkcs12 -export -out "<new pkcs12 certificate>" -in "<certificate to convert>" \
-name "<new certificate name>" -password "<new certificate password>"

----------------------------------------

TITLE: Initiating MongoDB Config Server Replica Set
DESCRIPTION: JavaScript code to initiate a MongoDB config server replica set. It uses rs.initiate() method with a configuration document specifying the replica set ID, config server role, and member nodes.

LANGUAGE: javascript
CODE:
rs.initiate(
  {
    _id: "myReplSet",
    configsvr: true,
    members: [
      { _id : 0, host : "cfg1.example.net:27019" },
      { _id : 1, host : "cfg2.example.net:27019" },
      { _id : 2, host : "cfg3.example.net:27019" }
    ]
  }
)

----------------------------------------

TITLE: Insert Document Without _id Field in MongoDB
DESCRIPTION: Example showing how to insert a document without specifying an _id field. MongoDB will automatically generate an ObjectId.

LANGUAGE: javascript
CODE:
try {
   db.products.insertOne( { item: "card", qty: 15 } );
} catch (e) {
   print (e);
};

----------------------------------------

TITLE: Removing a Zone Range in MongoDB
DESCRIPTION: This example shows how to remove a previously created zone range by setting the 'zone' field to null. The min and max values must exactly match the existing range to be removed.

LANGUAGE: javascript
CODE:
admin = db.getSiblingDB("admin")
admin.runCommand(
   {
      updateZoneKeyRange : "exampledb.collection",
      min : { a : 1 },
      max : { a : 10 },
      zone : null
   }
)

----------------------------------------

TITLE: Switching Databases Using getSiblingDB() in MongoDB Shell (JavaScript)
DESCRIPTION: This snippet shows how to change the active database using the db.getSiblingDB() method in MongoDB shell. It allows switching databases programmatically in interactive sessions or shell scripts.

LANGUAGE: javascript
CODE:
db = db.getSiblingDB('<database-name>')

----------------------------------------

TITLE: MongoDB Field Encryption Configuration
DESCRIPTION: RestructuredText table defining the encryption configuration for MongoDB fields. Shows field names with their corresponding encryption algorithms (Deterministic, None, or Random) and BSON data types.

LANGUAGE: restructuredtext
CODE:
.. list-table::
   :header-rows: 1
   :widths: 33 34 33

   * - Field Name
     - Encryption Algorithm
     - BSON Type of Field

   * - ``name``
     - Deterministic
     - String

   * - ``age``
     - No encryption
     - Int

   * - ``favorite-foods``
     - Random
     - Array

----------------------------------------

TITLE: dbHash Response for Specific Collections in MongoDB JSON
DESCRIPTION: This snippet shows the structure of the response returned by the dbHash command when executed for specific collections. It includes hash values, UUIDs, and execution details for the specified collections.

LANGUAGE: json
CODE:
{
   "host" : "myHostName.local:27017",
   "collections" : {
      "inventory" : "ec3d821581ea1bd3aa8196c94b946874",
      "orders" : "0242c0a128c284ea9576a34db2306c12"
   },
   "capped" : [ ],
   "uuids" : {
      "inventory" : UUID("0830e0ad-cc24-4fc7-80d0-8e22fe45e382"),
      "orders" : UUID("755be489-745f-400c-ac3b-f27525ad0108")
   },
   "md5" : "cb4676f316ff2ff29c701a5edd18afe3",
   "timeMillis" : 0,
   "ok" : 1,
   "operationTime" : Timestamp(1529208801, 1),
   "$clusterTime" : {
      "clusterTime" : Timestamp(1529208801, 1),
      "signature" : {
         "hash" : BinData(0,"I4z4a4Mgs+tcx0MP5xIU8DYAMB0="),
         "keyId" : NumberLong("6567898567824900097")
      }
   }
}

----------------------------------------

TITLE: Example JSON Log Message
DESCRIPTION: An example of a MongoDB log message in JSON format, showing the structure and key fields.

LANGUAGE: javascript
CODE:
{"t":{"$date":"2020-05-01T15:16:17.180+00:00"},"s":"I", "c":"NETWORK", "id":12345, "ctx":"listener", "svc": "R", "msg":"Listening on", "attr":{"address":"127.0.0.1"}}

----------------------------------------

TITLE: Creating a Compound Index in MongoDB
DESCRIPTION: This snippet demonstrates how to create a compound index on multiple fields (a, b, c, d) in a collection named 'data'. This index can support sorting on various combinations of these fields.

LANGUAGE: javascript
CODE:
db.data.createIndex( { a:1, b: 1, c: 1, d: 1 } )

----------------------------------------

TITLE: Using the 'unihan' Variant for Chinese Collation in MongoDB (JavaScript)
DESCRIPTION: Provides a specific example of using a collation locale variant in MongoDB. This snippet demonstrates how to specify the 'unihan' variant for Chinese collation, which applies special rules for sorting Chinese characters.

LANGUAGE: javascript
CODE:
{ "locale" : "zh@collation=unihan" }

----------------------------------------

TITLE: Basic Collection Balancing Command Syntax in MongoDB
DESCRIPTION: Demonstrates the basic syntax for the configureCollectionBalancing command with all available options including chunkSize, defragmentCollection, enableAutoMerger, and enableBalancing.

LANGUAGE: javascript
CODE:
db.adminCommand( 
   {
     configureCollectionBalancing: "<db>.<collection>",
     chunkSize: <num>,
     defragmentCollection: <bool>,
     enableAutoMerger: <bool>,
     enableBalancing: <bool>
   } 
)

----------------------------------------

TITLE: Querying MongoDB Server Build Information
DESCRIPTION: Executes the buildInfo command to retrieve compilation parameters and build information for the current mongod instance. Returns a document containing detailed build configuration data.

LANGUAGE: javascript
CODE:
db.serverBuildInfo()

----------------------------------------

TITLE: Example Documents in MongoDB Config Settings Collection
DESCRIPTION: Sample document structures from the config.settings collection, which stores various sharding configuration settings. This example shows documents for chunk size and balancer settings.

LANGUAGE: javascript
CODE:
{ "_id" : "chunksize", "value" : 64 }
{ "_id" : "balancer", "mode" : "full", "stopped" : false }

----------------------------------------

TITLE: MongoDB JSON Special Character Escape Sequences
DESCRIPTION: Lists the standard escape sequences used in MongoDB JSON documents for representing special characters. Includes common control characters and handling of invalid UTF-8 encoding. Non-listed control characters use \uXXXX format with hexadecimal unicode codepoints.

LANGUAGE: json
CODE:
{
  \": \"\\\"\" (Quotation Mark),
  \\\": \"\\\\\" (Backslash),
  \b: \"\\b\" (Backspace),
  \f: \"\\f\" (Formfeed),
  \n: \"\\n\" (Newline),
  \r: \"\\r\" (Carriage return),
  \t: \"\\t\" (Horizontal tab),
  Invalid UTF-8: \"\ufffd\" (Unicode replacement character)
}

----------------------------------------

TITLE: Initial MongoDB X.509 Configuration
DESCRIPTION: Example configuration file showing the initial X.509 certificate settings with 10gen organization attributes.

LANGUAGE: yaml
CODE:
security:
  clusterAuthMode:      x509
net:
  tls:
    mode:               requireTLS
    certificateKeyFile: /etc/mycerts/10gen-server1.pem
    CAFile:             /etc/mycerts/ca.pem
    clusterFile:        /etc/mycerts/10gen-cluster1.pem
    clusterCAFile:      /etc/mycerts/ca.pem
    clusterAuthX509:
       attributes:      O=10gen, OU=10gen Server

----------------------------------------

TITLE: Executing grantPrivilegesToRole Command in MongoDB
DESCRIPTION: This snippet demonstrates the syntax for running the grantPrivilegesToRole command. It shows how to specify the role name, privileges to grant, write concern, and an optional comment.

LANGUAGE: javascript
CODE:
db.runCommand(
   {
     grantPrivilegesToRole: "<role>",
     privileges: [
       {
         resource: { <resource> }, actions: [ "<action>", ... ]
       },
       ...
     ],
     writeConcern: { <write concern> },
     comment: <any>
   }
)

----------------------------------------

TITLE: Executing setParameter Command in MongoDB JavaScript
DESCRIPTION: This snippet demonstrates the syntax for using the setParameter command in MongoDB. It allows modification of server parameters by specifying the parameter name and its new value.

LANGUAGE: javascript
CODE:
db.adminCommand( 
   { 
     setParameter: 1, 
     <parameter>: <value> 
   } 
)

----------------------------------------

TITLE: Querying MongoDB Version Using db.version()
DESCRIPTION: Returns the version string of the currently connected MongoDB server instance (mongod or mongos). This method requires no parameters and is compatible with both Atlas and on-premises deployments.

LANGUAGE: javascript
CODE:
db.version()

----------------------------------------

TITLE: Creating Unique Index for Queryable Encryption in Node.js
DESCRIPTION: This code snippet demonstrates how to create a unique index on the keyAltNames field in the encryption.__keyVault namespace using Node.js. It's part of the setup process for MongoDB Queryable Encryption.

LANGUAGE: javascript
CODE:
const keyVaultDatabase = client.db("encryption");
const keyVaultCollection = keyVaultDatabase.collection("__keyVault");
await keyVaultCollection.createIndex(
  { keyAltNames: 1 },
  { unique: true, partialFilterExpression: { keyAltNames: { $exists: true } } }
);

----------------------------------------

TITLE: Case-Insensitive Regex Pattern Matching
DESCRIPTION: Example showing case-insensitive pattern matching using the i option

LANGUAGE: javascript
CODE:
db.products.aggregate([
   { $addFields: { returnObject: { $regexFindAll: { input: "$description", regex: /line/i } } } }
])

----------------------------------------

TITLE: Calculating Population Covariance in MongoDB using $setWindowFields
DESCRIPTION: Demonstrates using $covariancePop within $setWindowFields to calculate population covariance between order year and quantity, partitioned by state and sorted by order date.

LANGUAGE: javascript
CODE:
db.cakeSales.aggregate( [
   {
      $setWindowFields: {
         partitionBy: "$state",
         sortBy: { orderDate: 1 },
         output: {
            covariancePopForState: {
               $covariancePop: [ { $year: "$orderDate" }, "$quantity" ],
               window: {
                  documents: [ "unbounded", "current" ]
               }
            }
         }
      }
   }
] )

----------------------------------------

TITLE: Performing DeleteMany Operation in Kotlin Coroutine MongoDB Driver
DESCRIPTION: The deleteMany() method in the Kotlin Coroutine driver returns a DeleteResult object that describes the status of the operation and the count of deleted documents.

LANGUAGE: kotlin
CODE:
collection.deleteMany()

----------------------------------------

TITLE: Retrieving All Search Indexes for a Collection in MongoDB Atlas
DESCRIPTION: This example shows how to retrieve information about all Atlas Search indexes on the 'movies' collection. It demonstrates calling getSearchIndexes() without any parameters.

LANGUAGE: javascript
CODE:
db.movies.getSearchIndexes()

----------------------------------------

TITLE: Generating Data Encryption Key
DESCRIPTION: Process of creating a Data Encryption Key (DEK) using the configured KMIP provider and key options. This key will be used for encrypting data in MongoDB.

LANGUAGE: java
CODE:
BinaryData dataKeyId = clientEncryption.createDataKey("kmip", dataKeyOptions);

LANGUAGE: javascript
CODE:
const dataKeyId = await clientEncryption.createDataKey("kmip", dataKeyOptions);

LANGUAGE: python
CODE:
data_key_id = client_encryption.create_data_key("kmip", data_key_options)

----------------------------------------

TITLE: Executing unshardCollection Command in MongoDB
DESCRIPTION: This snippet demonstrates the basic syntax for the unshardCollection command in MongoDB. It specifies the database and collection to unshard, with an optional field to specify the recipient shard.

LANGUAGE: javascript
CODE:
db.adminCommand( {
   unshardCollection: "<database>.<collection>",
   toShard: "<shard-id>"
} )

----------------------------------------

TITLE: Using $linearFill in MongoDB Aggregation Pipeline
DESCRIPTION: Demonstrates how to use $linearFill within a $setWindowFields stage to fill missing price values using linear interpolation.

LANGUAGE: javascript
CODE:
db.stock.aggregate( [
   {
      $setWindowFields:
         {
            sortBy: { time: 1 },
            output:
               {
                  price: { $linearFill: "$price" }
               }
         }
   }
] )

----------------------------------------

TITLE: Querying MongoDB Using $bitsAllSet with BinData Bitmask
DESCRIPTION: Illustrates using $bitsAllSet with a BinData bitmask to find documents where bits at positions 4 and 5 are set to 1 in field 'a'.

LANGUAGE: javascript
CODE:
db.collection.find( { a: { $bitsAllSet: BinData(0, "MA==") } } )

----------------------------------------

TITLE: Slicing Array from the End in MongoDB Update
DESCRIPTION: Example of adding new elements to an array and then using $slice to trim the array to the last five elements. This operation updates a document in the 'students' collection.

LANGUAGE: javascript
CODE:
db.students.updateOne(
   { _id: 1 },
   {
     $push: {
       scores: {
         $each: [ 80, 78, 86 ],
         $slice: -5
       }
     }
   }
)

----------------------------------------

TITLE: MongoDB Shell Query with OR Condition
DESCRIPTION: MongoDB shell query that finds documents with status 'A' AND either quantity less than 30 OR item name starting with 'p'

LANGUAGE: javascript
CODE:
db.inventory.find( {
     status: "A",
     $or: [ { qty: { $lt: 30 } }, { item: /^p/ } ]
} )

----------------------------------------

TITLE: Modifying Time Series Collection with Custom Bucketing
DESCRIPTION: Demonstrates how to modify an existing time series collection's bucketing parameters using the collMod command.

LANGUAGE: javascript
CODE:
db.runCommand( {
   collMod: "weather24h",
   timeseries: { 
      bucketRoundingSeconds: 86400,
      bucketMaxSpanSeconds: 86400 
   }
} )

----------------------------------------

TITLE: Creating Unique Index for Queryable Encryption in Go
DESCRIPTION: This Go code snippet demonstrates how to create a unique index on the 'keyAltNames' field in the 'encryption.__keyVault' namespace. It's a crucial step in setting up Queryable Encryption for Go applications.

LANGUAGE: go
CODE:
_, err = keyVaultColl.Indexes().CreateOne(
	context.TODO(),
	mongo.IndexModel{
		Keys: bson.D{{Key: "keyAltNames", Value: 1}},
		Options: options.Index().SetUnique(true).SetPartialFilterExpression(
			bson.D{{Key: "keyAltNames", Value: bson.D{{Key: "$exists", Value: true}}}},
		),
	},
)

----------------------------------------

TITLE: Enabling Queryable Encryption via createEncryptedCollection
DESCRIPTION: Shows how to enable Queryable Encryption by passing the encryption schema directly to the createEncryptedCollection method when creating a new collection.

LANGUAGE: javascript
CODE:
await encryptedDB.createEncryptedCollection("<collection name>", {
   encryptedFields: encryptedFieldsObject
});

----------------------------------------

TITLE: Creating Supporting Index for Refined Shard Key
DESCRIPTION: Creating an index to support the new refined shard key before executing the refinement command.

LANGUAGE: javascript
CODE:
db.getSiblingDB("test").orders.createIndex( { customer_id: 1, order_id: 1 } )

----------------------------------------

TITLE: Inserting Gas Station Documents with GeoJSON Points in MongoDB
DESCRIPTION: This code snippet demonstrates how to insert multiple documents into a 'gasStations' collection in MongoDB. Each document represents a gas station with a GeoJSON Point for its location, along with additional metadata.

LANGUAGE: javascript
CODE:
db.gasStations.insertMany( [
   {
      loc: { type: "Point", coordinates: [ -106.31, 35.65 ] },
      state: "New Mexico",
      country: "United States",
      name: "Horizons Gas Station"
   },
   {
      loc: { type: "Point", coordinates: [ -122.62, 40.75 ] },
      state: "California",
      country: "United States",
      name: "Car and Truck Rest Area"
   },
   {
      loc: { type: "Point", coordinates: [ -72.71, 44.15 ] },
      state: "Vermont",
      country: "United States",
      name: "Ready Gas and Snacks"
   }
] )

----------------------------------------

TITLE: Using MongoDB Operator in $group Stage
DESCRIPTION: In the $group stage, the operator acts as an accumulator, calculating a single value for all documents in the window.

LANGUAGE: mongodb
CODE:
"$group"

----------------------------------------

TITLE: Generated YAML Configuration for mongod
DESCRIPTION: This YAML configuration is the result of converting the mongod command-line options. It includes settings for networking, TLS, process management, replication, security, sharding, storage, and logging.

LANGUAGE: yaml
CODE:
net:
  bindIp: localhost,My-Example-Hostname
  tls:
    CAFile: /path/to/my/CA/file
    certificateKeyFile: /path/to/my/certificate/file
    clusterFile: /path/to/my/cluster/membership/file
    mode: requireTLS
outputConfig: true
processManagement:
  fork: true
replication:
  replSet: myShard
security:
  clusterAuthMode: x509
sharding:
  clusterRole: shardsvr
storage:
  dbPath: /var/lib/mongodb
systemLog:
  destination: file
  path: /var/log/mongodb/mongod.log

----------------------------------------

TITLE: Configuring MongoDB Auditing with JSON File Output in YAML
DESCRIPTION: YAML configuration for enabling MongoDB auditing with output to a JSON file.

LANGUAGE: yaml
CODE:
storage:
   dbPath: data/db
auditLog:
   destination: file
   format: JSON
   path: data/db/auditLog.json

----------------------------------------

TITLE: HiddenShardedCollection Example Document
DESCRIPTION: Complete example of a HiddenShardedCollection inconsistency document showing a case where a sharded collection exists but its database is missing. Includes cursor metadata and collection details.

LANGUAGE: json
CODE:
{
   cursor: {
      id: Long("0"),
      ns: "test.$cmd.aggregate",
      firstBatch: [
         {
            type: "HiddenShardedCollection",
            description: "Found sharded collection but relative database does not exist",
            details: {
               namespace: "test.authors",
               collection: {
                   _id: "test.authors",
                   lastmodEpoch: ObjectId("64ddd78de906038182671674"),
                   lastmod: ISODate("2023-08-17T08:17:17.944Z"),
                   timestamp: Timestamp(1692260237, 58),
                   uuid: new UUID("69317741-7bc5-4eca-8877-7858cecf67d6"),
                   key: {
                      "skey" : 1
                   },
                   unique: false,
                   noBalance: false
                }
            }
         }
      ],
   },
   ok: 1
}

----------------------------------------

TITLE: Example Shard Key for Targeted Operations
DESCRIPTION: This code snippet shows an example of a compound shard key that can be used for targeted operations in a sharded cluster. It demonstrates the structure of a shard key with multiple fields.

LANGUAGE: javascript
CODE:
{ a: 1, b: 1, c: 1 }

----------------------------------------

TITLE: Configuring Key Vault Namespace for MongoDB Encryption
DESCRIPTION: Specifies the encryption.__keyVault namespace as the key vault collection for storing encryption keys. This configuration is essential for client-side field level encryption setup.



----------------------------------------

TITLE: Defining Version Constants in reStructuredText
DESCRIPTION: Defines reStructuredText substitution variables for MongoDB version numbers, series names, compatibility notes, and upgrade paths. These constants ensure consistent version references throughout the documentation.

LANGUAGE: rst
CODE:
.. |newversion| replace:: 3.6
.. |newseries| replace:: 3.6-series
.. |oldversion| replace:: 3.4
.. |oldseries| replace:: 3.4-series
.. |olderseries| replace:: 3.2-series
.. |compatibility| replace:: 3.6 Compatibility Notes
.. |upgradefirst| replace:: upgrade first to 3.4
.. |downgradepath| replace:: Once upgraded to |newversion|, if you need to downgrade, we recommend |downgrading| to the latest patch release of 3.4.

----------------------------------------

TITLE: Inserting a Document with Missing Field in MongoDB
DESCRIPTION: Shows how to insert a document into the 'products' collection that lacks a 'price' field.

LANGUAGE: javascript
CODE:
db.products.insertOne( { _id: 2,  item: "Unknown" } )

----------------------------------------

TITLE: Adding Single Element with $addToSet
DESCRIPTION: Demonstrates adding a single element to an array using $addToSet in an update operation.

LANGUAGE: javascript
CODE:
db.inventory.updateOne(
   { _id: 1 },
   { $addToSet: { tags: "accessories" } }
)

----------------------------------------

TITLE: Unsetting Global Default Write Concern
DESCRIPTION: Example showing how to unset the global default write concern using an empty document.

LANGUAGE: javascript
CODE:
db.adminCommand( {
   "setDefaultRWConcern" : 1, 
   "defaultWriteConcern" : {}
} )

----------------------------------------

TITLE: Installing MongoDB Enterprise and MongoDB Shell with System OpenSSL
DESCRIPTION: This command installs all MongoDB Enterprise packages and the MongoDB Shell that uses the system's OpenSSL without removing the existing MongoDB Shell.

LANGUAGE: sh
CODE:
sudo apt-get install -y mongodb-enterprise mongodb-mongosh-shared-openssl11

----------------------------------------

TITLE: MongoDB Comparison Operators in $lookup with Index Support
DESCRIPTION: Lists the comparison operators ($eq, $lt, $lte, $gt, $gte) that can utilize indexes when used within $expr in a $lookup stage. Explains key limitations including constant value requirements and multikey index restrictions.

LANGUAGE: mongodb
CODE:
$eq, $lt, $lte, $gt, $gte

----------------------------------------

TITLE: Output of $bitXor Operation in MongoDB Aggregation
DESCRIPTION: Shows the expected output of the $bitXor operation performed on the sample data in the 'switches' collection.

LANGUAGE: javascript
CODE:
[
  { _id: 0, result: 127 },
  { _id: 1, result: 1 },
  { _id: 2, result: 6 }
]

----------------------------------------

TITLE: Applying Schema Validation for Encrypted Fields in MongoDB
DESCRIPTION: JavaScript code using the collMod command to update the 'hr.employees' collection with a validator. The validator enforces encryption rules for the 'age' and 'name' fields, specifying encryption keys, algorithms, and data types.

LANGUAGE: javascript
CODE:
db.runCommand({
  collMod: "employees",
  validator: {
    $jsonSchema: {
      bsonType: "object",
      encryptMetadata: {
        keyId: [
          UUID("e114f7ad-ad7a-4a68-81a7-ebcb9ea0953a"),
          UUID("33408ee9-e499-43f9-89fe-5f8533870617")
        ]
      },
      properties: {
        age: {
          encrypt: {
            bsonType: "int",
            algorithm: "AEAD_AES_256_CBC_HMAC_SHA_512-Random"
          }
        },
        name: {
          encrypt: {
            bsonType: "string",
            algorithm: "AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic"
          }
        }
      }
    }
  },
  validationLevel: "strict"
})

----------------------------------------

TITLE: Defining ClientEncryption.decrypt() Syntax in MongoDB
DESCRIPTION: This snippet shows the basic syntax for using the ClientEncryption.decrypt() method. It requires initializing the clientEncryption object and passing an encrypted value as an argument.

LANGUAGE: javascript
CODE:
clientEncryption = db.getMongo().getClientEncryption()

clientEncryption.decrypt(encryptedValue)

----------------------------------------

TITLE: Shutting Down MongoDB Server via Shell
DESCRIPTION: Commands to gracefully shut down a MongoDB server from the mongo shell using the admin database.

LANGUAGE: javascript
CODE:
use admin
db.shutdownServer()

----------------------------------------

TITLE: MongoDB $abs Operator Basic Syntax
DESCRIPTION: Basic syntax demonstration of the $abs operator in MongoDB aggregation pipeline.

LANGUAGE: javascript
CODE:
{ $abs: <number> }

----------------------------------------

TITLE: MongoDB Config with REST Expansion
DESCRIPTION: Configuration file example showing how to use __rest directive to load TLS certificate password from a REST endpoint.

LANGUAGE: yaml
CODE:
storage: 
  dbPath: "/var/lib/mongo"
systemLog:
  destination: file
  path: "/var/log/mongodb/mongod.log"
net:
  bindIp:
    __exec: "python /home/user/getIPAddresses.py"
    type: "string"
    trim: "whitespace"
    digest: 85fed8997aac3f558e779625f2e51b4d142dff11184308dc6aca06cff26ee9ad
    digest_key: 68656c6c30303030307365637265746d796f6c64667269656e64
  tls:
    mode: requireTLS
    certificateKeyFile: "/etc/tls/mongod.pem"
    certificateKeyFilePassword:
      __rest: "https://myrestserver.example.net/api/config/myCertKeyFilePassword"
      type: "string"
      digest: b08519162ba332985ac18204851949611ef73835ec99067b85723e10113f5c26
      digest_key: 6d795365637265744b65795374756666

----------------------------------------

TITLE: Querying MongoDB with $all Operator in MongoDB Compass
DESCRIPTION: This snippet shows the query filter to be used in MongoDB Compass to find documents where the 'tags' array contains both 'red' and 'blank' elements.

LANGUAGE: javascript
CODE:
{ tags: { $all: ["red", "blank"] } }

----------------------------------------

TITLE: Printing Replication Info in MongoDB using JavaScript
DESCRIPTION: This method prints a formatted report of the replica set member's oplog. It displays the data returned by db.getReplicationInfo() in a formatted manner. The output is identical to that of rs.printReplicationInfo().

LANGUAGE: javascript
CODE:
db.printReplicationInfo()

----------------------------------------

TITLE: MongoDB Connection String Format
DESCRIPTION: Demonstrates the basic structure of MongoDB connection strings including components for authentication, host specification, default authentication database, and connection options. The string follows the format: mongodb[+srv]://[username:password@]host[:port][/defaultauthdb][?options]

LANGUAGE: plaintext
CODE:
mongodb://username:password@host[:port]/defaultauthdb?<options>

LANGUAGE: plaintext
CODE:
mongodb+srv://username:password@host/defaultauthdb?<options>

----------------------------------------

TITLE: Updating SELinux Policy for Custom MongoDB Directory (Bash)
DESCRIPTION: This snippet demonstrates how to update the SELinux policy to allow the mongod service to use a new directory. It includes commands for setting the file context, updating user policy, and applying the changes.

LANGUAGE: bash
CODE:
sudo semanage fcontext -a -t <type> </some/MongoDB/directory.*>

LANGUAGE: bash
CODE:
sudo chcon -Rv -u system_u -t <type> </some/MongoDB/directory>

LANGUAGE: bash
CODE:
sudo restorecon -R -v </some/MongoDB/directory>

----------------------------------------

TITLE: Checking MongoDB Replica Set Status
DESCRIPTION: This JavaScript command checks the status of all members in a MongoDB replica set using rs.status().

LANGUAGE: javascript
CODE:
rs.status()

----------------------------------------

TITLE: Dropping Multiple Indexes in MongoDB
DESCRIPTION: Shows how to drop multiple indexes simultaneously by specifying an array of index names.

LANGUAGE: javascript
CODE:
db.runCommand( { dropIndexes: "collection", index: [ "age_1", "age_1_status_1" ] } )

----------------------------------------

TITLE: Modifying TCP Keepalive Time Temporarily
DESCRIPTION: Commands to temporarily modify the TCP keepalive time setting. These changes do not persist across system reboots and will be limited to 300 seconds for MongoDB processes.

LANGUAGE: bash
CODE:
sudo sysctl -w net.ipv4.tcp_keepalive_time=<value>

LANGUAGE: bash
CODE:
echo <value> | sudo tee /proc/sys/net/ipv4/tcp_keepalive_time

----------------------------------------

TITLE: Expected Output for Querying Encrypted Documents in MongoDB
DESCRIPTION: This JSON snippet represents the expected output when querying an encrypted document from MongoDB. It shows the structure of the retrieved document.

LANGUAGE: json
CODE:
// Your JSON output here

----------------------------------------

TITLE: Basic $maxN Syntax Definition
DESCRIPTION: Shows the basic syntax structure for using the $maxN accumulator in MongoDB aggregations.

LANGUAGE: none
CODE:
{
   $maxN:
      {
         input: <expression>,
         n: <expression>
      }
}

----------------------------------------

TITLE: Creating systemd Service Unit for THP Management
DESCRIPTION: Systemd service unit configuration that enables and configures Transparent Huge Pages. Sets THP to 'always', defrag to 'defer+madvise', and configures related memory settings.

LANGUAGE: sh
CODE:
[Unit]
Description=Enable Transparent Hugepages (THP)
DefaultDependencies=no
After=sysinit.target local-fs.target
Before=mongod.service

[Service]
Type=oneshot
ExecStart=/bin/sh -c 'echo always | tee /sys/kernel/mm/transparent_hugepage/enabled > /dev/null && echo defer+madvise | tee /sys/kernel/mm/transparent_hugepage/defrag > /dev/null && echo 0 | tee /sys/kernel/mm/transparent_hugepage/khugepaged/max_ptes_none > /dev/null && echo 1 | tee /proc/sys/vm/overcommit_memory > /dev/null'

[Install]
WantedBy=basic.target

----------------------------------------

TITLE: Setting MongoDB Collection Audit Filter Example
DESCRIPTION: Example of setting up audit filtering for collection creation and deletion events with authorization success auditing disabled.

LANGUAGE: javascript
CODE:
db.adminCommand( 
   { 
      setClusterParameter: { 
         auditConfig: {
            filter: { 
               atype: {
                  $in: [ "createCollection", "dropCollection" ]
               }
            }, 
            auditAuthorizationSuccess: false
         }
      } 
   } 
)

----------------------------------------

TITLE: OP_UPDATE Structure Definition in C
DESCRIPTION: C struct defining the wire protocol format for the OP_UPDATE message used to update documents in a MongoDB collection.

LANGUAGE: c
CODE:
struct OP_UPDATE {
    MsgHeader header;             // standard message header
    int32     ZERO;               // 0 - reserved for future use
    cstring   fullCollectionName; // "dbname.collectionname"
    int32     flags;              // bit values. see below
    document  selector;           // the query to select the document
    document  update;             // specification of the update to perform
}

----------------------------------------

TITLE: Configuring Batch Size for checkMetadataConsistency in MongoDB
DESCRIPTION: Demonstrates how to set a custom batch size when running the checkMetadataConsistency command to control the number of results returned in each batch.

LANGUAGE: javascript
CODE:
var cur = db.runCommand( {
   checkMetadataConsistency: 1,
   cursor: {
      batchSize: 10
   }
} )

----------------------------------------

TITLE: Deleting All Documents in MongoDB Collection using Various Programming Languages
DESCRIPTION: This snippet represents the deletion of all documents from the 'inventory' collection using different programming languages and their MongoDB drivers. The actual code is not provided in the snippet, but it's referenced from external files for each language.

LANGUAGE: c
CODE:
// Code from /driver-examples/test-mongoc-sample-commands.c

LANGUAGE: python
CODE:
# Code from /driver-examples/test_examples.py

LANGUAGE: python
CODE:
# Code from /driver-examples/test_examples_motor.py

LANGUAGE: java
CODE:
// Code from /driver-examples/DocumentationSamples.java

LANGUAGE: java
CODE:
// Code from /driver-examples/AsyncDocumentationSamples.java

LANGUAGE: kotlin
CODE:
// Code from /driver-examples/kotlin_examples.kt

LANGUAGE: javascript
CODE:
// Code from /driver-examples/node_remove.js

LANGUAGE: php
CODE:
// Code from /driver-examples/DocumentationExamplesTest.php

LANGUAGE: ruby
CODE:
# Code from /driver-examples/shell_examples_spec.rb

LANGUAGE: scala
CODE:
// Code from /driver-examples/DocumentationExampleSpec.scala

LANGUAGE: csharp
CODE:
// Code from /driver-examples/DocumentationExamples.cs

LANGUAGE: go
CODE:
// Code from /driver-examples/go_examples.go

----------------------------------------

TITLE: Concurrent Updates with ID Match
DESCRIPTION: Demonstration of potential race conditions when using _id field for filtering while updating score field, showing how updates can overwrite each other.

LANGUAGE: javascript
CODE:
// Update A
db.games.updateOne(
   { _id: 1 },
   {
      $set: { score: 90 }
   }
)

// Update B
db.games.updateOne(
   { _id: 1 },
   {
      $set: { score: 100 }
   }
)

----------------------------------------

TITLE: Creating Unique Index for Queryable Encryption in Java
DESCRIPTION: This Java code snippet shows how to create a unique index on the 'keyAltNames' field in the 'encryption.__keyVault' namespace. It's an essential step for implementing Queryable Encryption in Java applications.

LANGUAGE: java
CODE:
keyVaultDatabase.getCollection("__keyVault")
        .createIndex(Indexes.ascending("keyAltNames"),
                new IndexOptions()
                        .unique(true)
                        .partialFilterExpression(Filters.exists("keyAltNames")));

----------------------------------------

TITLE: Creating Unique Index for Queryable Encryption in C#
DESCRIPTION: This snippet shows how to create a unique index on the 'keyAltNames' field in the 'encryption.__keyVault' namespace using the MongoDB C# driver. It uses the CreateOne method of the IndexManager with options to set the index as unique and apply a partial filter expression.

LANGUAGE: csharp
CODE:
var keyVaultCollection = keyVaultClient.GetDatabase("__keyVault").GetCollection<BsonDocument>("__keyVault");
var indexKeysDefinition = Builders<BsonDocument>.IndexKeys.Ascending("keyAltNames");
var partialFilterDefinition = Builders<BsonDocument>.Filter.Exists("keyAltNames");
var indexOptions = new CreateIndexOptions
{
    Unique = true,
    PartialFilterExpression = partialFilterDefinition
};
var indexModel = new CreateIndexModel<BsonDocument>(indexKeysDefinition, indexOptions);
keyVaultCollection.Indexes.CreateOne(indexModel);

----------------------------------------

TITLE: Basic $sum Syntax in MongoDB Aggregation
DESCRIPTION: Shows the basic syntax for using $sum as an accumulator and as a regular operator in MongoDB aggregation pipeline.

LANGUAGE: none
CODE:
{ $sum: <expression> }

{ $sum: [ <expression1>, <expression2> ... ]  }

----------------------------------------

TITLE: Defining Application Variables for Queryable Encryption
DESCRIPTION: Defines key variables needed for Queryable Encryption including KMS provider, database names, and collection names.

LANGUAGE: javascript
CODE:
const kmsProviderName = "local";
const uri = process.env.MONGODB_URI;
const keyVaultDatabaseName = "encryption";
const keyVaultCollectionName = "__keyVault";
const keyVaultNamespace = `${keyVaultDatabaseName}.${keyVaultCollectionName}`;
const encryptedDatabaseName = "medicalRecords";
const encryptedCollectionName = "patients";

----------------------------------------

TITLE: Querying Specific Fields in MongoDB Polymorphic Collection
DESCRIPTION: This query demonstrates how to search for documents with a specific field and value in a polymorphic collection. It retrieves athletes with more than 20 grand slam wins, which is specific to tennis players.

LANGUAGE: javascript
CODE:
db.athletes.find(
   { grand_slam_wins: { $gt: 20 } }
)

----------------------------------------

TITLE: Executing MongoDB Find Query with Explain
DESCRIPTION: This snippet shows how to use the explain() method with a find() query on the 'pizzaOrders' collection. The query filters orders by date and sorts them by total number. It demonstrates how to view the queryShapeHash and planCacheShapeHash for a specific query shape.

LANGUAGE: javascript
CODE:
db.pizzaOrders.explain().find(
   { orderDate: { $gt: ISODate( "2024-05-10T05:15:35Z" ) } } ).
   sort( { totalNumber: 1 }
)

----------------------------------------

TITLE: Inserting Sample Connection Time Data in MongoDB
DESCRIPTION: Demonstrates inserting sample data into a MongoDB collection named 'connectionTime' using the insertMany method. The data includes customer IDs and login/logout timestamps.

LANGUAGE: javascript
CODE:
db.connectionTime.insertMany(
  [
     { 
        custId: 457,
        login: ISODate("2020-12-25T19:04:00"),
        logout: ISODate("2020-12-28T09:04:00") 
     },
     {
        custId: 457,
        login: ISODate("2021-01-27T05:12:00"),
        logout: ISODate("2021-01-28T13:05:00")
     },
     { 
        custId: 458,
        login: ISODate("2021-01-22T06:27:00"),
        logout: ISODate("2021-01-31T11:00:00")
     },
     { 
        custId: 459,
        login: ISODate("2021-02-14T20:14:00"),
        logout: ISODate("2021-02-17T16:05:00") 
     },
     { 
        custId: 460,
        login: ISODate("2021-02-26T02:44:00"),
        logout: ISODate("2021-02-18T14:13:00")
        }
  ]
)

----------------------------------------

TITLE: MongoDB $atanh Example in Radians
DESCRIPTION: Example showing how to calculate inverse hyperbolic tangent returning the result in radians.

LANGUAGE: bash
CODE:
{
  "_id" : ObjectId("5c50782193f833234ba90d85"),
  "x-coordinate" : NumberDecimal("0.5")
}

LANGUAGE: bash
CODE:
db.trigonometry.aggregate([
  { 
    $addFields : {
      "y-coordinate" : {
        $atanh : "$x-coordinate"
      }
    }
  }
])

----------------------------------------

TITLE: MongoDB Shell Connection with API Version
DESCRIPTION: Connects to a local MongoDB instance using mongosh with API version 1 and username authentication.

LANGUAGE: bash
CODE:
mongosh "mongodb://localhost" --apiVersion 1 --username myDatabaseUser

----------------------------------------

TITLE: Defining WriteResult() Method in MongoDB Shell
DESCRIPTION: Definition of the WriteResult() method, which is a wrapper containing the result status of mongosh write methods. It is used with insert(), update(), and remove() operations.

LANGUAGE: mongodb
CODE:
WriteResult()

----------------------------------------

TITLE: Disabling MongoDB autoCompact Command in JavaScript
DESCRIPTION: This snippet shows how to disable the currently running background compaction operation using the autoCompact command. This is necessary before restarting autoCompact with a new configuration.

LANGUAGE: javascript
CODE:
db.runCommand( { autoCompact: false } )

----------------------------------------

TITLE: Slot-Based Execution Engine Plan Structure
DESCRIPTION: Example explain output structure showing query plan tree for MongoDB's slot-based execution engine.

LANGUAGE: javascript
CODE:
winningPlan: {
  queryPlan: {
     stage: <STAGE1>,
     ...
     inputStage: {
        stage: <STAGE2>,
        ...
        inputStage: {
           stage: <STAGE3>,
           ...
        }
     }
  }
  slotBasedPlan: {
     ...  
  }
},

----------------------------------------

TITLE: Querying Array Elements with Range Conditions in MongoDB Compass
DESCRIPTION: Shows the filter syntax for querying documents in MongoDB Compass where the qty field within the instock array matches specific range conditions.

LANGUAGE: javascript
CODE:
{ "instock.qty": { $gt: 10,  $lte: 20 } }

----------------------------------------

TITLE: Deleting Query Settings with Hash in MongoDB
DESCRIPTION: This snippet demonstrates how to delete query settings using the removeQuerySettings command with a queryShapeHash obtained from the $querySettings output.

LANGUAGE: javascript
CODE:
db.adminCommand( {
   removeQuerySettings: "F42757F1AEB68B4C5A6DE6182B29B01947C829C926BCC01226BDA4DDE799766C"
} )

----------------------------------------

TITLE: Setting Query Settings with Query Parameters
DESCRIPTION: Syntax for setting query settings by providing query fields and settings document with index hints. Requires database name and collection-specific parameters.

LANGUAGE: javascript
CODE:
db.adminCommand( {
   setQuerySettings: {
      <fields>,  // Provide fields for 
                 // find, distinct, or aggregate command
      $db: <string>  // Provide a database name
   },
   // Provide a settings document with indexHints and other fields
   settings: { 
      indexHints: [ { 
         ns: { db: <string>, coll: <string> },
         allowedIndexes: <array>
      }, ... ],
      queryFramework: <string>,
      reject: <boolean>,
      comment: <BSON type>
   }
} )

----------------------------------------

TITLE: Defining $setIsSubset Operator in MongoDB
DESCRIPTION: Basic syntax for the $setIsSubset operator that takes two array expressions as arguments.

LANGUAGE: javascript
CODE:
{ $setIsSubset: [ <expression1>, <expression2> ] }

----------------------------------------

TITLE: Replacing Deprecated Thread Method in Python Archival Utility
DESCRIPTION: Updates the resmoke/util/archival.py script to replace the deprecated thread.isAlive() method, addressing the issue SERVER-54484.

LANGUAGE: python
CODE:
# Replace deprecated thread.isAlive() in resmoke/util/archival.py

----------------------------------------

TITLE: Defining MongoDB Time Unit Options
DESCRIPTION: Lists the valid string values that can be used to specify time units in MongoDB window operations. These units are used when the sortBy field contains a date value. The unit specification must be omitted if sortBy is not a date field.

LANGUAGE: plaintext
CODE:
"week"
"day"
"hour"
"minute"
"second"
"millisecond"

----------------------------------------

TITLE: Results of $reverseArray Aggregation in MongoDB
DESCRIPTION: Shows the output of the $reverseArray aggregation operation on the 'users' collection. The 'favorites' arrays are reversed, and documents without a 'favorites' field return null for 'reverseFavorites'.

LANGUAGE: javascript
CODE:
{ "_id" : 1, "name" : "dave123", "reverseFavorites" : [ "apples", "butter", "cake", "chocolate" ] }
{ "_id" : 2, "name" : "li", "reverseFavorites" : [ "pie", "pudding", "apples" ] }
{ "_id" : 3, "name" : "ahn", "reverseFavorites" : [ ] }
{ "_id" : 4, "name" : "ty", "reverseFavorites" : null }

----------------------------------------

TITLE: Installing MongoDB Compass on Linux/macOS
DESCRIPTION: Executes the install_compass script to install MongoDB Compass on Linux or macOS systems.

LANGUAGE: bash
CODE:
./install_compass

----------------------------------------

TITLE: Adding Shard to MongoDB Cluster
DESCRIPTION: JavaScript command using sh.addShard() to add a new replica set shard to the cluster. Shows how to specify the replica set name and member connection string.

LANGUAGE: javascript
CODE:
sh.addShard( "rs1/mongodb0.example.net:27018" )

----------------------------------------

TITLE: Regular Expression LDAP User Mapping Example
DESCRIPTION: Shows how to configure LDAP user mapping using regular expressions and substitution patterns

LANGUAGE: javascript
CODE:
[
   {
      match: "(.+)@ENGINEERING.EXAMPLE.COM",
      substitution: "cn={0},ou=engineering,dc=example,dc=com"
   },
   {
      match: "(.+)@DBA.EXAMPLE.COM",
      ldapQuery: "ou=dba,dc=example,dc=com??one?(user={0})"
   }
]

----------------------------------------

TITLE: Enabling Custom TuneD Profile
DESCRIPTION: Command to activate the newly created virtual-guest-thp profile using tuned-adm

LANGUAGE: sh
CODE:
sudo tuned-adm profile virtual-guest-thp

----------------------------------------

TITLE: Executing sh.checkMetadataConsistency() Method in MongoDB
DESCRIPTION: This snippet demonstrates the basic syntax for calling the sh.checkMetadataConsistency() method. The method takes an optional options document as a parameter and returns a cursor with inconsistency results.

LANGUAGE: javascript
CODE:
sh.checkMetadataConsistency( { <options> } )

----------------------------------------

TITLE: Deleting Multiple Documents in MongoDB using Python Driver
DESCRIPTION: This snippet demonstrates how to delete multiple documents using the MongoDB Python driver. The actual code is not provided in the snippet, but it references an external file.

LANGUAGE: python
CODE:
# Code is referenced from an external file:
# /driver-examples/test_examples.py

----------------------------------------

TITLE: Running MongoDB autoCompact Command in JavaScript
DESCRIPTION: This snippet demonstrates the syntax for running the autoCompact command in MongoDB. It shows how to enable or disable background compaction, set the free space target, and specify whether to run the compaction once or continuously.

LANGUAGE: javascript
CODE:
db.runCommand(
   { 
     autoCompact: <boolean>, 
     freeSpaceTargetMB: <int>, // Optional 
     runOnce: <boolean>, // Optional
   }
)

----------------------------------------

TITLE: Update Multiple Documents with $push
DESCRIPTION: Example demonstrating how to append a value to arrays in multiple documents using updateMany.

LANGUAGE: javascript
CODE:
db.students.updateMany(
   { },
   { $push: { scores: 95 } }
)

----------------------------------------

TITLE: Starting THP Service
DESCRIPTION: Command to start the THP service and apply the configured settings.

LANGUAGE: sh
CODE:
sudo systemctl start enable-transparent-huge-pages

----------------------------------------

TITLE: Querying MongoDB Time Series Collection by Meta Field
DESCRIPTION: Shows how to query a time series collection by the meta field (ticker) to retrieve data for a single time series.

LANGUAGE: bash
CODE:
db.stocks.find( { ticker: "MDB" } )

----------------------------------------

TITLE: Specifying a GeoJSON MultiLineString in MongoDB
DESCRIPTION: Creates a GeoJSON MultiLineString object with an array of LineString coordinate arrays. Used for representing multiple paths or routes. Requires 2dsphere index version 2 or later.

LANGUAGE: javascript
CODE:
{
  type: "MultiLineString",
  coordinates: [
     [ [ -73.96943, 40.78519 ], [ -73.96082, 40.78095 ] ],
     [ [ -73.96415, 40.79229 ], [ -73.95544, 40.78854 ] ],
     [ [ -73.97162, 40.78205 ], [ -73.96374, 40.77715 ] ],
     [ [ -73.97880, 40.77247 ], [ -73.97036, 40.76811 ] ]
  ]
}

----------------------------------------

TITLE: Syntax for Dropping a Stream Processor in MongoDB Atlas
DESCRIPTION: The basic syntax for the sp.processor.drop() method, which takes no fields and is used to delete a named Stream Processor from the current Stream Processing Instance.

LANGUAGE: json
CODE:
sp.processor.drop()

----------------------------------------

TITLE: OP_DELETE Structure Definition in C
DESCRIPTION: C struct defining the wire protocol format for the OP_DELETE message used to remove documents from a MongoDB collection.

LANGUAGE: c
CODE:
struct {
    MsgHeader header;             // standard message header
    int32     ZERO;               // 0 - reserved for future use
    cstring   fullCollectionName; // "dbname.collectionname"
    int32     flags;              // bit values - see below for details.
    document  selector;           // query object.  See below for details.
}

----------------------------------------

TITLE: MongoDB Shell Command for Graceful Shutdown
DESCRIPTION: Command to properly shut down a MongoDB instance using the MongoDB shell

LANGUAGE: javascript
CODE:
db.shutdownServer()

----------------------------------------

TITLE: Inserting Sample Data into MongoDB Collection
DESCRIPTION: Creates a sample 'orders' collection with documents containing various data types for the 'qty' field.

LANGUAGE: javascript
CODE:
db.orders.insertMany( [
   { _id: 1, item: "apple", qty: NumberInt(5) },
   { _id: 2, item: "pie", qty: "100" },
   { _id: 3, item: "ice cream", qty: NumberLong("500") },
   { _id: 4, item: "almonds", qty: "50" },
] )

----------------------------------------

TITLE: Encryption Schema using patternProperties
DESCRIPTION: Example demonstrating how to use patternProperties to define encryption rules based on field name patterns.

LANGUAGE: json
CODE:
{
  "patternProperties": {
    "^fieldName": {
      "encrypt": {
        "keyId": [],
        "bsonType": "string",
        "algorithm": "AEAD_AES_256_CBC_HMAC_SHA_512_Random"
      }
    }
  }
}

----------------------------------------

TITLE: Creating a Stock Sales Collection with Sparse Index
DESCRIPTION: Example demonstrating how to create a collection with sample stock sales data and create a sparse index for optimizing $exists queries.

LANGUAGE: javascript
CODE:
db.stockSales.insertMany( [
   { _id: 0, symbol: "MDB", auditDate: new Date( "2021-05-18T16:12:23Z" ) },
   { _id: 1, symbol: "MDB", auditDate: new Date( "2021-04-21T11:34:45Z" ) },
   { _id: 2, symbol: "MSFT", auditDate: new Date( "2021-02-24T15:11:32Z" ) },
   { _id: 3, symbol: "MSFT", auditDate: null },
   { _id: 4, symbol: "MSFT", auditDate: new Date( "2021-07-13T18:32:54Z" ) },
   { _id: 5, symbol: "AAPL" }
] )

----------------------------------------

TITLE: Creating a Stock Sales Collection with Sparse Index
DESCRIPTION: Example demonstrating how to create a collection with sample stock sales data and create a sparse index for optimizing $exists queries.

LANGUAGE: javascript
CODE:
db.stockSales.insertMany( [
   { _id: 0, symbol: "MDB", auditDate: new Date( "2021-05-18T16:12:23Z" ) },
   { _id: 1, symbol: "MDB", auditDate: new Date( "2021-04-21T11:34:45Z" ) },
   { _id: 2, symbol: "MSFT", auditDate: new Date( "2021-02-24T15:11:32Z" ) },
   { _id: 3, symbol: "MSFT", auditDate: null },
   { _id: 4, symbol: "MSFT", auditDate: new Date( "2021-07-13T18:32:54Z" ) },
   { _id: 5, symbol: "AAPL" }
] )

----------------------------------------

TITLE: Stopping the Balancer
DESCRIPTION: Commands to stop and verify the MongoDB cluster balancer status.

LANGUAGE: javascript
CODE:
sh.stopBalancer()
sh.getBalancerState()

----------------------------------------

TITLE: MongoDB $lt Operator Results Example
DESCRIPTION: Sample results showing the output of the $lt operator comparison, displaying items with their quantities and boolean results of the less than comparison.

LANGUAGE: javascript
CODE:
{ "item" : "abc1", "qty" : 300, "qtyLt250" : false }
{ "item" : "abc2", "qty" : 200, "qtyLt250" : true }
{ "item" : "xyz1", "qty" : 250, "qtyLt250" : false }
{ "item" : "VWZ1", "qty" : 300, "qtyLt250" : false }
{ "item" : "VWZ2", "qty" : 180, "qtyLt250" : true }

----------------------------------------

TITLE: Generating Random Donation Amounts in MongoDB
DESCRIPTION: Demonstrates inserting donor records and using $rand to generate random donation amounts. The example shows how to scale random values and convert them to integers using $multiply and $floor operators.

LANGUAGE: javascript
CODE:
db.donors.insertMany(
   [
     { donorId: 1000, amount: 0, frequency: 1 },
     { donorId: 1001, amount: 0, frequency: 2 },
     { donorId: 1002, amount: 0, frequency: 1 },
     { donorId: 1003, amount: 0, frequency: 2 },
     { donorId: 1004, amount: 0, frequency: 1 }
   ]
)

LANGUAGE: javascript
CODE:
db.donors.aggregate(
   [
      { $set: { amount: { $multiply: [ { $rand: {} }, 100 ] } } },
      { $set: { amount: { $floor: "$amount" } } },
      { $merge: "donors" }
   ]
)

LANGUAGE: javascript
CODE:
db.donors.aggregate(
   [
      { $project: {_id: 0, donorId: 1, amount: 1 } }
   ]
)

----------------------------------------

TITLE: Installing and Using Resume Token Decoder in Mongosh
DESCRIPTION: Demonstrates how to install and use the resumetoken snippet within the MongoDB shell to decode hex-encoded resume tokens. This requires mongosh to be installed.

LANGUAGE: javascript
CODE:
snippet install resumetoken
decodeResumeToken('<RESUME TOKEN>')

----------------------------------------

TITLE: Executing commitReshardCollection Command Syntax
DESCRIPTION: Basic syntax for the commitReshardCollection command which takes a database and collection name in dot notation as its parameter.

LANGUAGE: javascript
CODE:
db.adminCommand(
   {
     commitReshardCollection: "<database>.<collection>"
   }
)

----------------------------------------

TITLE: Implementing Population Update Logic with Approximation Pattern
DESCRIPTION: Shows how to implement the approximation pattern by updating population records only when changes exceed a threshold of 100 people. This reduces database writes while maintaining meaningful trend data.

LANGUAGE: javascript
CODE:
let population = 40000

function updateStoredPopulation(curr_population, new_population) {

   let population_change = Math.abs(curr_population - new_population)

   if (population_change >= 100) {
      db.population.insertOne(
         {
            city: "New Perth",
            population: new_population,
            date: Date()
         }
      )
      population = new_population
   }
}

----------------------------------------

TITLE: Including MongoDB Replica Set Upgrade/Downgrade Instructions in RST
DESCRIPTION: An RST include directive that references external documentation for replica set upgrade and downgrade procedures, followed by a note about downgrading to a specific patch release.

LANGUAGE: rst
CODE:
.. include:: /includes/upgrade-downgrade-replica-set.rst

If you need to downgrade from |newversion|, downgrade to the latest
patch release of |downgradeversion|.

----------------------------------------

TITLE: Using Aggregation Pipeline with Database
DESCRIPTION: Basic syntax for using aggregation pipeline stages with db.aggregate() method at the database level rather than collection level.

LANGUAGE: javascript
CODE:
db.aggregate( [ { <stage> }, ... ] )

----------------------------------------

TITLE: Creating Unique Index for Queryable Encryption in Node.js
DESCRIPTION: This snippet shows how to create a unique index on the 'keyAltNames' field in the 'encryption.__keyVault' namespace using Node.js. It's essential for setting up Queryable Encryption in a Node.js environment.

LANGUAGE: javascript
CODE:
await keyVaultClient
  .db("encryption")
  .collection("__keyVault")
  .createIndex(
    { keyAltNames: 1 },
    {
      unique: true,
      partialFilterExpression: { keyAltNames: { $exists: true } },
    }
  );

----------------------------------------

TITLE: Result Document After Conversion
DESCRIPTION: Example output document showing both original radian values and their corresponding degree conversions.

LANGUAGE: bash
CODE:
{
  "_id" : ObjectId("5c50aec71c75c59232b3ede4"),
  "angle_a" : NumberDecimal("0.9272952180016122324285124629224290"),
  "angle_b" : NumberDecimal("0.6435011087932843868028092287173227"),
  "angle_c" : NumberDecimal("1.570796326794896619231321691639752"),
  "angle_a_deg" : NumberDecimal("53.13010235415597870314438744090659"),
  "angle_b_deg" : NumberDecimal("36.86989764584402129685561255909341"),
  "angle_c_deg" : NumberDecimal("90.00000000000000000000000000000000")
}

----------------------------------------

TITLE: Inserting Sample Data into MongoDB Collection
DESCRIPTION: Demonstrates how to insert multiple documents into a MongoDB collection named 'accounts' using the insertMany() method. The documents contain fields for interest rate and present value.

LANGUAGE: javascript
CODE:
db.accounts.insertMany( [
   { _id: 1, interestRate: .08, presentValue: 10000 },
   { _id: 2, interestRate: .0825, presentValue: 250000 },
   { _id: 3, interestRate: .0425, presentValue: 1000 }
] )

----------------------------------------

TITLE: Assigning Application Variables
DESCRIPTION: Assigns variables for the database connection URI, database name, collection name, and key vault namespace.

LANGUAGE: javascript
CODE:
const uri = "<Your MongoDB URI>";
const keyVaultNamespace = "encryption.__keyVault";
const keyVaultClient = new MongoClient(uri);
const keyVaultDB = "encryption";
const keyVaultColl = "__keyVault";
const keyVaultClient = new MongoClient(uri);
const dbName = "medicalRecords";
const collName = "patients";

----------------------------------------

TITLE: Creating a Time Series Collection in MongoDB
DESCRIPTION: Example of creating a time series collection named 'weather' with timestamp and metadata fields.

LANGUAGE: javascript
CODE:
db.createCollection(
"weather",
{ 
   timeseries: {
      timeField: "timestamp",
      metaField: "metadata"
}})

----------------------------------------

TITLE: Setting Permissions on MongoDB Encryption Keyfile
DESCRIPTION: This command sets the permissions on the MongoDB encryption keyfile to be readable and writable only by the owner, which is a security requirement for using the keyfile.

LANGUAGE: bash
CODE:
chmod 600 mongodb-keyfile

----------------------------------------

TITLE: Disabling Zone Reclaim on Linux
DESCRIPTION: Commands to disable zone reclaim mode on Linux systems to optimize NUMA configuration for MongoDB.

LANGUAGE: bash
CODE:
echo 0 | sudo tee /proc/sys/vm/zone_reclaim_mode

LANGUAGE: bash
CODE:
sudo sysctl -w vm.zone_reclaim_mode=0

----------------------------------------

TITLE: Configuring Default Key Policy for AWS KMS Customer Master Key
DESCRIPTION: This JSON snippet defines the default key policy to be applied during the Usage Permissions step of the key generation process. It enables Identity and Access Management (IAM) policies to grant access to the Customer Master Key.

LANGUAGE: json
CODE:
{
   "Version": "2012-10-17",
   "Id": "key-default-1",
   "Statement": [
      {
         "Sid": "Enable IAM User Permissions",
         "Effect": "Allow",
         "Principal": {
            "AWS": "arn:aws:iam::111122223333:root"
         },
         "Action": "kms:*",
         "Resource": "*"
      }
   ]
}

----------------------------------------

TITLE: Inserting Book Collection Data in MongoDB
DESCRIPTION: Example showing how to insert sample book collection data with title and condition fields.

LANGUAGE: javascript
CODE:
db.books.insertMany([
   { "_id" : 1, "title" : "Dracula", "condition": "new" },
   { "_id" : 2, "title" : "The Little Prince", "condition": "new" }
])

----------------------------------------

TITLE: Sample Output of MongoDB $near Query
DESCRIPTION: This snippet shows the expected output format for a $near query. It includes two sample documents with their location data and other fields, sorted by distance from the queried point.

LANGUAGE: javascript
CODE:
[
  {
    _id: ObjectId("63f7c3b15e5eefbdfef81cab"),
    loc: { type: 'Point', coordinates: [ -73.88, 40.78 ] },
    name: 'La Guardia Airport',
    category: 'Airport'
  },
  {
    _id: ObjectId("63f7c3b15e5eefbdfef81caa"),
    loc: { type: 'Point', coordinates: [ -73.97, 40.77 ] },
    name: 'Central Park',
    category: 'Park'
  }
]

----------------------------------------

TITLE: Creating Basic and Unique Indexes with Same Key Pattern in MongoDB
DESCRIPTION: Creates both basic and unique indexes with the same key pattern on the score field, demonstrating how MongoDB 5.0+ allows this duplication.

LANGUAGE: javascript
CODE:
db.scoreHistory.createIndex( { score : 1 }, { name: "basic_index" } )
db.scoreHistory.insert( { score : 1 } )
db.scoreHistory.insert( { score : 2 } )
db.scoreHistory.insert( { score : 3 } )

db.scoreHistory.createIndex( { score : 1 }, { name: "unique_index", unique: true } )

----------------------------------------

TITLE: Updating lowScore Using $min in MongoDB
DESCRIPTION: This example shows how to use the $min operator to update the lowScore field if the specified value is less than the current value.

LANGUAGE: javascript
CODE:
db.scores.updateOne( { _id: 1 }, { $min: { lowScore: 150 } } )

----------------------------------------

TITLE: Clearing All Cached Plans for a Collection in MongoDB
DESCRIPTION: This example shows how to clear all cached query plans for the 'orders' collection by omitting the query, sort, and projection fields in the planCacheClear command.

LANGUAGE: javascript
CODE:
db.runCommand(
   {
      planCacheClear: "orders"
   }
)

----------------------------------------

TITLE: Basic $where Operator Syntax in MongoDB
DESCRIPTION: Demonstrates the basic syntax for using the $where operator in MongoDB queries.

LANGUAGE: javascript
CODE:
{ $where: <string|JavaScript Code> }

----------------------------------------

TITLE: Initiating Shard Removal in MongoDB
DESCRIPTION: This snippet demonstrates how to start the process of removing a shard from a MongoDB cluster using the removeShard command.

LANGUAGE: javascript
CODE:
db.adminCommand( { removeShard: "<shardName>" } )

----------------------------------------

TITLE: Executing validateDBMetadata Command in MongoDB
DESCRIPTION: This snippet shows the basic syntax for running the validateDBMetadata command. It includes the required apiParameters and optional db and collection fields.

LANGUAGE: javascript
CODE:
db.runCommand( 
   { 
     validateDBMetadata: 1,
     apiParameters: {
       version: <string>,
       strict: <boolean>,
       deprecationErrors: <boolean>
      },
     db: <string>,
     collection: <string>,
   } 
)

----------------------------------------

TITLE: Creating Collection with Upsert Update in MongoDB
DESCRIPTION: Example of an implicit DDL operation that creates a new 'people' collection using an update command with upsert:true. The operation will create the collection if it doesn't exist.

LANGUAGE: javascript
CODE:
db.runCommand(
   {
      update: "people",
      updates: [
        { q: { name: "Andy" }, u: { $inc: { score: 1 } }, upsert: true }
      ]
   }
)

----------------------------------------

TITLE: MongoDB Log Output without Redaction
DESCRIPTION: This snippet shows the log output produced by MongoDB when inserting a document without log redaction enabled. It includes detailed information about the inserted document, including sensitive data.

LANGUAGE: javascript
CODE:
{
   "t": { "$date": "2024-07-19T15:36:55.024-07:00" },
   "s": "I",
   "c": "COMMAND",
   ...
   "attr": {
      "type": "command",
      ...
      "appName": "mongosh 2.2.10",
      "command": {
         "insert": "clients",
         "documents": [
            {
               "name": "Joe",
               "PII": "Sensitive Information",
               "_id": { "$oid": "669aea8792c7fd822d3e1d8c" }
            }
         ],
         "ordered": true,
         ...
      }
      ...
   }
}

----------------------------------------

TITLE: MongoDB UTC Offset Examples
DESCRIPTION: Examples showing valid UTC Offset formats for MongoDB timezone configuration, including hours and minutes notation.

LANGUAGE: none
CODE:
+/-[hh]:[mm], e.g. "+04:45"
+/-[hh][mm], e.g. "-0530"
+/-[hh], e.g. "+03"

----------------------------------------

TITLE: Running dbHash for All Collections in MongoDB JavaScript
DESCRIPTION: This example shows how to use the dbHash command to return hash values for all collections in the 'test' database. It demonstrates executing the command without specifying collections.

LANGUAGE: javascript
CODE:
use test
db.runCommand( { dbHash: 1 } )

----------------------------------------

TITLE: Defining $allElementsTrue Operator in MongoDB Aggregation
DESCRIPTION: Shows the syntax for using the $allElementsTrue operator in a MongoDB aggregation pipeline. The operator evaluates an array and returns true if no element is false.

LANGUAGE: javascript
CODE:
{ $allElementsTrue: [ <expression> ] }

----------------------------------------

TITLE: dbHash Command Response Structure in MongoDB JSON
DESCRIPTION: This snippet illustrates the structure of the response returned by the dbHash command. It includes hash values for collections, capped collection list, UUIDs, and execution details.

LANGUAGE: json
CODE:
{
   "host" : "myHostName.local:27017",
   "collections" : {
      "foo" : "d27b769230edc551d869060ec3fb68bd",
      "inventory" : "ec3d821581ea1bd3aa8196c94b946874",
      "log" : "d41d8cd98f00b204e9800998ecf8427e",
      "orders" : "0242c0a128c284ea9576a34db2306c12",
      "restaurants" : "5dc9b88091c36f0d529567b5b6e3fc92",
      "zipcodes" : "31ede812bf397509a87359c65bf2a08c"
   },
   "capped" : [
      "log"
   ],
   "uuids" : {
      "foo" : UUID("469592fe-3bfe-425e-975f-cedbe0c4741d"),
      "inventory" : UUID("0830e0ad-cc24-4fc7-80d0-8e22fe45e382"),
      "log" : UUID("4be024ff-711b-4ab8-836b-dee662e090f1"),
      "orders" : UUID("755be489-745f-400c-ac3b-f27525ad0108"),
      "restaurants" : UUID("520b56ec-3276-4904-b6e5-286bc9bfa648"),
      "zipcodes" : UUID("12e97b70-c174-40af-a178-5d83a241fe20")
   },
   "md5" : "0cb7417ae9d9eb865000b4debdc671da",
   "timeMillis" : 53,
   "ok" : 1,
   "operationTime" : Timestamp(1529208582, 4),
   "$clusterTime" : {
      "clusterTime" : Timestamp(1529208582, 4),
      "signature" : {
         "hash" : BinData(0,"X3MmevDqUgCVvN1AhnT+fiOL/Lc="),
         "keyId" : NumberLong("6567898567824900097")
      }
   }
}

----------------------------------------

TITLE: Using $trim in MongoDB Aggregation Pipeline
DESCRIPTION: Demonstrates how to use the $trim operator in a MongoDB aggregation pipeline to remove leading and trailing whitespace from the 'description' field.

LANGUAGE: javascript
CODE:
db.inventory.aggregate([
   { $project: { item: 1, description: { $trim: { input: "$description" } } } }
])

----------------------------------------

TITLE: Configuring Boot-time Execution
DESCRIPTION: Distribution-specific commands to configure the script to run on system startup.

LANGUAGE: sh
CODE:
sudo update-rc.d disable-transparent-hugepages defaults

LANGUAGE: sh
CODE:
sudo insserv /etc/init.d/disable-transparent-hugepages

LANGUAGE: sh
CODE:
sudo chkconfig --add disable-transparent-hugepages

----------------------------------------

TITLE: MongoDB Collection Insert with String Numbers
DESCRIPTION: Example of inserting documents containing string number values into a MongoDB collection to demonstrate collation behavior.

LANGUAGE: javascript
CODE:
db.c.insertMany(
  [
      { "n" : "1" },
      { "n" : "2" },
      { "n" : "2.1" },
      { "n" : "-2.1" },
      { "n" : "2.2" },
      { "n" : "2.10" },
      { "n" : "2.20" },
      { "n" : "-10" },
      { "n" : "10" },
      { "n" : "20" },
      { "n" : "20.1" }
  ]
)

----------------------------------------

TITLE: Executing fsyncUnlock Command in MongoDB
DESCRIPTION: This snippet demonstrates the syntax for executing the fsyncUnlock command in MongoDB. The command reduces the lock count on the server or cluster, allowing write operations when the lock count reaches zero.

LANGUAGE: javascript
CODE:
db.adminCommand(
   {
     fsyncUnlock: 1,
     comment: <any>
   }
)

----------------------------------------

TITLE: Basic $median Operator Syntax in MongoDB
DESCRIPTION: Shows the basic syntax structure for the $median operator with required input and method fields.

LANGUAGE: javascript
CODE:
{
   $median: {
      input: <number>,
      method: <string>
   }
}

----------------------------------------

TITLE: Shutting Down MongoDB Instance
DESCRIPTION: Command to safely shut down a MongoDB instance during the upgrade process.

LANGUAGE: javascript
CODE:
db.adminCommand( { shutdown: 1 } )

----------------------------------------

TITLE: Connecting with Authentication Options
DESCRIPTION: Example connection string specifying the admin database as the authentication source.

LANGUAGE: bash
CODE:
mongodb://myDatabaseUser:D1fficultP%40ssw0rd@mongodb0.example.com:27017,mongodb1.example.com:27017,mongodb2.example.com:27017/?replicaSet=myRepl&authSource=admin

----------------------------------------

TITLE: Example of Committing Resharding Operation in MongoDB
DESCRIPTION: An example of using sh.commitReshardCollection() to force completion of a resharding operation on the 'sales.orders' collection. This will block writes and complete the resharding process.

LANGUAGE: javascript
CODE:
sh.commitReshardCollection("sales.orders")

----------------------------------------

TITLE: Forcing Reconfiguration of MongoDB Replica Set
DESCRIPTION: This snippet demonstrates how to force a reconfiguration of the replica set using rs.reconfig() with the force option set to true. This should only be used in catastrophic scenarios.

LANGUAGE: javascript
CODE:
rs.reconfig(cfg, {force : true})

----------------------------------------

TITLE: Creating MongoDB Arbiter Data Directory
DESCRIPTION: Creates a data directory for the MongoDB arbiter instance to store configuration data. The directory will not store actual data since arbiters don't hold data.

LANGUAGE: bash
CODE:
mkdir /var/lib/mongodb/arb

----------------------------------------

TITLE: Creating a Time Series Collection Example
DESCRIPTION: Example demonstrating how to create a time series collection for weather data with 24-hour expiration.

LANGUAGE: javascript
CODE:
db.createCollection(
    "weather24h",
    {
       timeseries: {
          timeField: "timestamp",
          metaField: "data",
          granularity: "hours"
       },
       expireAfterSeconds: 86400
    }
)

----------------------------------------

TITLE: Detecting mongos Connection with hello Command
DESCRIPTION: This code snippet demonstrates how to detect if a client is connected to a mongos instance by using the hello command. The response includes an 'isdbgrid' message if connected to mongos.

LANGUAGE: javascript
CODE:
{
   "isWritablePrimary" : true,
   "msg" : "isdbgrid",
   "maxBsonObjectSize" : 16777216,
   "ok" : 1,
   ...
}

----------------------------------------

TITLE: Updating with Upsert Option
DESCRIPTION: An example of using the upsert option to insert a new document if no match is found.

LANGUAGE: javascript
CODE:
try {
   db.inspectors.updateMany(
      { "Sector" : { $gt : 4 }, "inspector" : "R. Coltrane" },
      { $set: { "Patrolling" : false } },
      { upsert: true }
   );
} catch (e) {
   print(e);
}

----------------------------------------

TITLE: Creating ClientEncryption in Node.js
DESCRIPTION: Example showing how to instantiate a ClientEncryption object using the Node.js MongoDB driver

LANGUAGE: javascript
CODE:
// Code reference: /includes/queryable-encryption/fundamentals/manual-encryption/manual-enc.js

----------------------------------------

TITLE: Configuring SELinux for Custom MongoDB Data Path (Bash)
DESCRIPTION: This example shows how to configure SELinux for a non-default MongoDB data path (/mongodb/data). It sets the appropriate file context, updates the user policy, and applies the changes.

LANGUAGE: bash
CODE:
sudo semanage fcontext -a -t mongod_var_lib_t '/mongodb/data.*'
sudo chcon -Rv -u system_u -t mongod_var_lib_t '/mongodb/data'
sudo restorecon -R -v '/mongodb/data'

----------------------------------------

TITLE: Serializing a MongoDB Document in Extended JSON Format
DESCRIPTION: Uses the EJSON.serialize() method to convert a MongoDB document to Extended JSON format, preserving BSON type information.

LANGUAGE: javascript
CODE:
EJSON.serialize( db.<collection>.findOne() )

----------------------------------------

TITLE: Time Series Collection Output Syntax
DESCRIPTION: Syntax for outputting to a time series collection with configuration options

LANGUAGE: javascript
CODE:
{ $out: 
  { db: "<output-db>", coll: "<output-collection>",
    timeseries: {
      timeField: "<field-name>", 
      metaField: "<field-name>", 
      granularity:  "seconds" || "minutes" || "hours" ,
    } 
  } 
}

----------------------------------------

TITLE: listCollections Command Output Format
DESCRIPTION: Example output from listCollections command showing the complete structure including validation rules, collection options, and metadata.

LANGUAGE: javascript
CODE:
{
  cursor: {
    id: Long("0"),
    ns: 'test.$cmd.listCollections',
    firstBatch: [
      {
        name: 'students',
        type: 'collection',
        options: {
          validator: {
            '$jsonSchema': {
              bsonType: 'object',
              required: [ 'name', 'year', 'major', 'address' ],
              properties: {
                name: {
                  bsonType: 'string',
                  description: 'must be a string and is required'
                },
                gpa: {
                  bsonType: [ 'double' ],
                  description: 'must be a double if the field exists'
                }
              }
            },
            validationAction: 'warn'
          }
        },
        info: {
          readOnly: false,
          uuid: UUID("bf560865-5879-4ec1-b389-f77a03abbc5a")
        },
        idIndex: { v: 2, key: { _id: 1 }, name: '_id_' }
      }
    ]
  },
  ok: 1
}

----------------------------------------

TITLE: Compound Query Without $elemMatch
DESCRIPTION: Example of a compound query where conditions can be met by different array elements rather than a single document.

LANGUAGE: mongodb
CODE:
{"instock.qty": { "$gt": 10, "$lte": 20 }}

----------------------------------------

TITLE: MongoDB Drop Collection Audit Log Example
DESCRIPTION: Sample audit log output when a collection is dropped, showing the structure of the audit message.

LANGUAGE: javascript
CODE:
{
   "atype" : "dropCollection",
   "ts" : { "$date" : "2021-08-09T13:45:00.661+00:00" },
   "uuid" : { "$binary" : "0gle4/pSQli+LUcz43ykag==", "$type" : "04" },
   "local" : { "ip" : "127.0.0.1", "port" : 27502 },
   "remote" : { "ip" : "127.0.0.1", "port" : 51928 },
   "users" : [],
   "roles" : [],
   "param" : { "ns" : "sales.inventory" },
   "result" : 0
}

----------------------------------------

TITLE: Dropping Connections to Removed Replica Set Member in MongoDB
DESCRIPTION: This snippet demonstrates how to use the dropConnections administrative command to immediately drop all outgoing connections from the replica set to a removed member. It should be run on each remaining member of the replica set after using rs.remove().

LANGUAGE: javascript
CODE:
db.adminCommand( 
  {
    "dropConnections" : 1,
    "hostAndPort" : [
      "<hostname>:<port>"
    ] 
  } 
)

----------------------------------------

TITLE: Generating a Base64 Encoded Key String in JavaScript
DESCRIPTION: This snippet generates a 96-byte random string and encodes it in base64 format. This key is used for client-side field level encryption.

LANGUAGE: javascript
CODE:
const TEST_LOCAL_KEY = require("crypto").randomBytes(96).toString("base64")

----------------------------------------

TITLE: Serializing a MongoDB Document in Extended JSON Format
DESCRIPTION: Uses the EJSON.serialize() method to convert a MongoDB document to Extended JSON format, preserving BSON type information.

LANGUAGE: javascript
CODE:
EJSON.serialize( db.<collection>.findOne() )

----------------------------------------

TITLE: Global Write Concern Source in MongoDB
DESCRIPTION: This snippet shows the value of the write concern source after setting a default write concern in MongoDB.

LANGUAGE: mongodb
CODE:
"global"

----------------------------------------

TITLE: Calculating Hyperbolic Cosine with Degree Input
DESCRIPTION: Example showing how to insert data and calculate hyperbolic cosine for an angle stored in degrees, using $degreesToRadians for conversion.

LANGUAGE: javascript
CODE:
db.trigonometry.insertOne(
   {
      "_id" : ObjectId( "5c50782193f833234ba90d85" ),
      "angle" : NumberDecimal( "53.1301023541559787031443874490659" )
   }
)

LANGUAGE: javascript
CODE:
db.trigonometry.aggregate( [
   {
      $addFields : {
         "cosh_output" : { $cosh : { $degreesToRadians : "$angle" } }
      }
   }
] )

----------------------------------------

TITLE: Attempting to Update lowScore with Higher Value in MongoDB
DESCRIPTION: This operation demonstrates that $min does not update the field when the specified value is greater than the current value.

LANGUAGE: javascript
CODE:
db.scores.updateOne( { _id: 1 }, { $min: { lowScore: 250 } } )

----------------------------------------

TITLE: Creating Sparse Index in MongoDB
DESCRIPTION: Creates a sparse index on the xmpp_id field of the addresses collection. The sparse option ensures the index only includes documents that contain the indexed field.

LANGUAGE: javascript
CODE:
db.addresses.createIndex( { "xmpp_id": 1 }, { sparse: true } )

----------------------------------------

TITLE: MongoDB Session Refresh with noCursorTimeout
DESCRIPTION: Example showing how to maintain a cursor with noCursorTimeout by refreshing the session periodically to prevent timeout. Includes session creation, cursor initialization, and refresh logic.

LANGUAGE: bash
CODE:
var session = db.getMongo().startSession()
var sessionId = session
sessionId  // show the sessionId

var cursor = session.getDatabase("examples").getCollection("data").find().noCursorTimeout()
var refreshTimestamp = new Date() // take note of time at operation start

while (cursor.hasNext()) {
  
  // Check if more than 5 minutes have passed since the last refresh
  if ( (new Date()-refreshTimestamp)/1000 > 300 ) { 
    print("refreshing session")
    db.adminCommand({"refreshSessions" : [sessionId]})
    refreshTimestamp = new Date()
  }

  // process cursor normally
  
}

----------------------------------------

TITLE: Database and Collection Output Syntax
DESCRIPTION: Extended syntax for $out operator to specify both output database and collection

LANGUAGE: javascript
CODE:
{ $out: { db: "<output-db>", coll: "<output-collection>" } }

----------------------------------------

TITLE: Executing planCacheClear Command in MongoDB
DESCRIPTION: This snippet shows the basic syntax for running the planCacheClear command. It allows specifying a collection and optional query, sort, projection, and comment fields to clear specific cached query plans.

LANGUAGE: javascript
CODE:
db.runCommand(
   {
      planCacheClear: <collection>,
      query: <query>,
      sort: <sort>,
      projection: <projection>,
      comment: <any>
   }
)

----------------------------------------

TITLE: Query Results Output
DESCRIPTION: Example output showing the results of querying for students with test scores greater than 90.

LANGUAGE: javascript
CODE:
[
   {
      _id: ObjectId("632240a20646eaee87a56a80"),
      name: 'Andre Robinson',
      test_scores: [ 88, 97 ]
   },
   {
      _id: ObjectId("632240a20646eaee87a56a82"),
      name: 'Jacob Meyer',
      test_scores: [ 92, 89 ]
   }
]

----------------------------------------

TITLE: Switching to $external Database
DESCRIPTION: Command to switch to the $external database where OIDC users must be created.

LANGUAGE: javascript
CODE:
use $external

----------------------------------------

TITLE: Creating Non-Capped and Capped Collections in MongoDB
DESCRIPTION: This snippet shows how to create a non-capped collection and a capped collection in MongoDB. The capped collection is created with a size limit of 100000 bytes.

LANGUAGE: javascript
CODE:
db.createCollection("nonCappedCollection1")

db.createCollection("cappedCollection1", { capped: true, size: 100000 } )

----------------------------------------

TITLE: Setting Global Default Read Concern Example
DESCRIPTION: Example demonstrating how to set a global read concern level to majority.

LANGUAGE: javascript
CODE:
db.adminCommand({
  "setDefaultRWConcern" : 1,
  "defaultReadConcern" : { "level" : "majority" }
})

----------------------------------------

TITLE: Setting MongoDB LDAP Health Monitoring Interval via Command Line
DESCRIPTION: Command line example showing how to set the LDAP health monitoring interval to 30 seconds (30000ms) when starting mongos.

LANGUAGE: bash
CODE:
mongos --setParameter 'healthMonitoringIntervals={ values:[ { type:"ldap", interval: "30000"} ] }'

----------------------------------------

TITLE: Configuring Clustered Index in MongoDB
DESCRIPTION: Defines the structure for creating a clustered index in MongoDB collections. The configuration requires specifying a key field (must be {_id: 1}), setting unique to true, and optionally providing a unique index name.

LANGUAGE: javascript
CODE:
clusteredIndex: {
      key: <object>,
      unique: <boolean>,
      name: <string>
   }

----------------------------------------

TITLE: Creating MongoDB User with Custom Data
DESCRIPTION: Creates a new MongoDB user named 'accountAdmin01' on the products database with custom employee data and readWrite permissions. Uses passwordPrompt() for secure password entry and includes custom employee ID data.

LANGUAGE: javascript
CODE:
db.getSiblingDB("products").runCommand( {
   createUser: "accountAdmin01",
   pwd: passwordPrompt(), 
   customData: { employeeId: 12345 },
   roles: [ { role: 'readWrite', db: 'products' } ]
} )

----------------------------------------

TITLE: Filtering Multiple Operation Types in MongoDB Audit
DESCRIPTION: Example showing how to audit createCollection and dropCollection operations using command line configuration.

LANGUAGE: javascript
CODE:
mongod --dbpath data/db --auditDestination file --auditFilter '{ atype: { $in: [ "createCollection", "dropCollection" ] } }' --auditFormat BSON --auditPath data/db/auditLog.bson

----------------------------------------

TITLE: Creating a Strict Stable API Client in MongoDB Shell
DESCRIPTION: Example of how to create a strict Stable API client when connecting with the MongoDB shell

LANGUAGE: javascript
CODE:
mongosh --apiVersion 1 --apiStrict

----------------------------------------

TITLE: Creating a Sample Collection in MongoDB
DESCRIPTION: Demonstrates how to create a sample 'music' collection with multiple documents using insertMany(). This collection is used in the subsequent delete operation example.

LANGUAGE: javascript
CODE:
db.music.insertMany( [
   { artist: "DOA", genre: "punk" },
   { artist: "Rick Astley", genre: "pop" },
   { artist: "Black Flag", genre: "punk" },
   { artist: "Justin Bieber", genre: "pop" }
] )

----------------------------------------

TITLE: Disabling Collection Balancing in MongoDB
DESCRIPTION: Method to disable the balancer for a specific sharded collection in MongoDB. Must be run on a mongos instance and accepts a namespace parameter as a string that specifies the target collection.

LANGUAGE: javascript
CODE:
sh.disableBalancing(namespace)

----------------------------------------

TITLE: Using $bitAnd with Two Integers in MongoDB Aggregation
DESCRIPTION: Demonstrates an aggregation pipeline that uses $bitAnd to perform a bitwise AND operation on two integer fields ('a' and 'b') from each document in the 'switches' collection.

LANGUAGE: javascript
CODE:
db.switches.aggregate( [
  { 
    $project: { 
      result: { 
        $bitAnd: [ "$a", "$b" ]
      }
    }
  }
])

----------------------------------------

TITLE: MongoDB currentOp Output Structure for Replica Set Primary
DESCRIPTION: Shows the complete JSON structure returned by the currentOp command when executed on a replica set primary. Includes additional fields for transaction information and replication-specific metrics.

LANGUAGE: javascript
CODE:
{
  "inprog": [
       {
         "type" : <string>,
         "host" : <string>,
         "desc" : <string>,
         "connectionId" : <number>,
         "client" : <string>,
         "appName" : <string>,
         "clientMetadata" : <document>,
         "lsid" : {
            "id" : <UUID>,
            "uid" : <BinData>
         },
         "transaction" : {
            "parameters" : {
               "txnNumber" : <NumberLong()>,
               "autocommit" : <boolean>,
               "readConcern" : {
                  "level" : <string>
               }
            },
            "readTimestamp" : <Timestamp>,
            "startWallClockTime" : <string>,
            "timeOpenMicros" : <NumberLong()>,
            "timeActiveMicros" : <NumberLong()>,
            "timeInactiveMicros" : <NumberLong()>,
            "expiryTime" : <string>,
         },
         "active" : <boolean>,
         "currentOpTime" : <string>,
         "effectiveUsers" : [
            {
               "user" : <string>,
               "db" : <string>
            }
         ],
         "opid" : <number>,
         "secs_running" : <NumberLong()>,
         "microsecs_running" : <number>,
         "op" : <string>,
         "ns" : <string>,
         "command" : <document>,
         "originatingCommand" : <document>,
         "queryFramework" : <string>,
         "planSummary": <string>,
         "prepareReadConflicts" : <NumberLong()>,
         "writeConflicts" : <NumberLong()>,
         "cursor" : {
            "cursorId" : <NumberLong()>,
            "createdDate" : <ISODate()>,
            "lastAccessDate" : <ISODate()>,
            "nDocsReturned" : <NumberLong()>,
            "nBatchesReturned" : <NumberLong()>,
            "noCursorTimeout" : <boolean>,
            "tailable" : <boolean>,
            "awaitData" : <boolean>,
            "originatingCommand" : <document>,
            "planSummary" : <string>,
            "operationUsingCursorId" : <NumberLong()>
         },
         "msg": <string>,
         "progress" : {
             "done" : <number>,
             "total" : <number>
         },
         "killPending" : <boolean>,
         "numYields" : <number>,
         "dataThroughputLastSecond" : <number>, 
         "dataThroughputAverage" : <number>, 
         "locks" : {
             "ParallelBatchWriterMode" : <string>,
             "ReplicationStateTransition" : <string>,
             "Global" : <string>,
             "Database" : <string>,
             "Collection" : <string>,
             "Metadata" : <string>,
             "oplog" : <string>
         },
         "waitingForLock" : <boolean>,
         "lockStats" : {
             "ParallelBatchWriterMode" : {
                "acquireCount": {
                   "r": <NumberLong>,
                   "w": <NumberLong>,
                   "R": <NumberLong>,
                   "W": <NumberLong>
                },
                "acquireWaitCount": {
                   "r": <NumberLong>,
                   "w": <NumberLong>,
                   "R": <NumberLong>,
                   "W": <NumberLong>
                },
                "timeAcquiringMicros" : {
                   "r" : NumberLong(0),
                   "w" : NumberLong(0),
                   "R" : NumberLong(0),
                   "W" : NumberLong(0)
                },
                "deadlockCount" : {
                   "r" : NumberLong(0),
                   "w" : NumberLong(0),
                   "R" : NumberLong(0),
                   "W" : NumberLong(0)
                }
             },
             "ReplicationStateTransition" : { 
                ...
             },
             "Global" : {
                ...
             },
             "Database" : {
                ...
             },
             ...
         }
       },
       ...
   ],
   "fsyncLock": <boolean>,
   "info": <string>,
   "ok": <num>,
   "operationTime": <timestamp>,
   "$clusterTime": <document>
}

----------------------------------------

TITLE: Generating CMK in PowerShell
DESCRIPTION: Creates a 64-byte random key using System.Security.Cryptography.RandomNumberGenerator, then converts it to base64 string. The output should be saved to customer-master-key.txt file.

LANGUAGE: powershell
CODE:
$r=[byte[]]::new(64);$g=[System.Security.Cryptography.RandomNumberGenerator]::Create();$g.GetBytes($r);[Convert]::ToBase64String($r)

----------------------------------------

TITLE: Querying MongoDB with $bitsAllClear using BinData Bitmask
DESCRIPTION: This query demonstrates the use of $bitsAllClear with a BinData bitmask to find documents where the 'a' field has a clear bit in position 5 of the binary value.

LANGUAGE: javascript
CODE:
db.collection.find( { a: { $bitsAllClear: BinData(0, "IA==") } } )

----------------------------------------

TITLE: Setting Time Limit for Distinct Command Using maxTimeMS in MongoDB
DESCRIPTION: This snippet demonstrates how to add the maxTimeMS field to a 'distinct' command document to set a time limit of 45 milliseconds for the operation in MongoDB.

LANGUAGE: javascript
CODE:
db.runCommand( { distinct: "collection",
                    key: "city",
                    maxTimeMS: 45 } )

----------------------------------------

TITLE: RoutingTableRangeOverlap Document Format in MongoDB
DESCRIPTION: The JSON structure for a RoutingTableRangeOverlap inconsistency document in MongoDB. It includes the type, description, and details about the overlapping chunks.

LANGUAGE: json
CODE:
{
   "type": "RoutingTableRangeOverlap",
   "description": "<string>",
   "details": {
      "namespace": "<string>",
      "collectionUUID": <string>,
      "chunkA": {<document>},
      "chunkB": {<document>}
   }
}

----------------------------------------

TITLE: Inserting Sample Products Data in MongoDB
DESCRIPTION: Demonstrates inserting multiple product documents into a MongoDB collection using insertMany()

LANGUAGE: javascript
CODE:
db.products.insertMany([ 
   { _id: 1, name: 'widget', price: 10.89 },
   { _id: 2, name: 'thing', price: 11.24 },
   { _id: 3, name: 'moppet', price: 8 },
   { _id: 4, name: 'cosa', price: 24.19 }
])

----------------------------------------

TITLE: Inserting Documents into MongoDB Collection
DESCRIPTION: This snippet inserts three documents into the 'myColl' collection, each with an _id and a name field containing variations of the word 'cafe'.

LANGUAGE: javascript
CODE:
db.myColl.insertMany([
   { _id: 1, name: "cafe" },
   { _id: 2, name: "Cafe" },
   { _id: 3, name: "café" }
])

----------------------------------------

TITLE: Creating Unique Index for MongoDB Keystore in Python
DESCRIPTION: Creates a unique index on the keyAltNames field in the encryption.__keyVault collection using Python MongoDB driver. This ensures uniqueness of key alternate names in the keystore.

LANGUAGE: python
CODE:
key_vault.create_index(
    "keyAltNames",
    unique=True,
    partialFilterExpression={"keyAltNames": {"$exists": True}},
)

----------------------------------------

TITLE: Insert Multiple Documents
DESCRIPTION: Example of bulk inserting multiple documents using an array, demonstrating both documents with and without _id fields.

LANGUAGE: javascript
CODE:
db.products.insert(
   [
     { _id: 11, item: "pencil", qty: 50, type: "no.2" },
     { item: "pen", qty: 20 },
     { item: "eraser", qty: 25 }
   ]
)

----------------------------------------

TITLE: BSON Conformance Check Example
DESCRIPTION: Example showing how to perform additional BSON conformance validation on a collection.

LANGUAGE: javascript
CODE:
db.runCommand( { validate: "myCollection", checkBSONConformance: true } )

----------------------------------------

TITLE: Creating MongoClient with Automatic Encryption for CSFLE
DESCRIPTION: This snippet demonstrates how to instantiate a MongoDB client object with automatic encryption settings using the variables declared in previous steps for Client-Side Field Level Encryption.

LANGUAGE: java
CODE:
MongoClientSettings clientSettings = MongoClientSettings.builder()
    .autoEncryptionSettings(AutoEncryptionSettings.builder()
        .keyVaultNamespace(keyVaultNamespace)
        .kmsProviders(kmsProviders)
        .schemaMap(schemaMap)
        .extraOptions(extraOptions)
        .build())
    .build();
MongoClient mongoClient = MongoClients.create(clientSettings);

LANGUAGE: javascript
CODE:
const client = new MongoClient(uri, {
  autoEncryption: {
    keyVaultNamespace,
    kmsProviders,
    schemaMap: schema,
    extraOptions,
  },
});

LANGUAGE: python
CODE:
client = MongoClient(
    uri,
    auto_encryption_opts=AutoEncryptionOpts(
        kms_providers,
        key_vault_namespace,
        schema_map=schema,
        **extra_options
    )
)

LANGUAGE: csharp
CODE:
var clientSettings = MongoClientSettings.FromConnectionString(uri);
clientSettings.AutoEncryptionOptions = new AutoEncryptionOptions(
    keyVaultNamespace: keyVaultNamespace,
    kmsProviders: kmsProviders,
    schemaMap: schema,
    extraOptions: extraOptions
);
var mongoClient = new MongoClient(clientSettings);

LANGUAGE: go
CODE:
autoEncryptionOpts := options.AutoEncryption().SetKeyVaultNamespace(keyVaultNamespace).SetKmsProviders(kmsProviders).SetSchemaMap(schema).SetExtraOptions(extraOptions)
client, err := mongo.Connect(context.TODO(), options.Client().ApplyURI(uri).SetAutoEncryptionOptions(autoEncryptionOpts))
if err != nil {
    log.Fatal(err)
}

----------------------------------------

TITLE: Storage Calculation Example with 2TB Collection
DESCRIPTION: Practical example calculating required storage for resharding a 2TB collection with 400GB index across 4 shards, demonstrating how to arrive at 1.2TB storage requirement per shard.

LANGUAGE: none
CODE:
1.2 TB storage = ( ( 2 TB collection + 0.4 TB index ) * 2 ) / 4 shards

----------------------------------------

TITLE: Configuring Automatic Encryption Options in Go for MongoDB
DESCRIPTION: This snippet shows how to set up automatic encryption options for MongoDB using the Go driver. It configures the key vault namespace, KMS provider, and schema map.

LANGUAGE: go
CODE:
autoEncryptionOpts := options.AutoEncryption().
    SetKeyVaultNamespace("admin.datakeys").
    SetKmsProviders(kmsProviders).
    SetSchemaMap(schemaMap).
    SetExtraOptions(extraOptions)

----------------------------------------

TITLE: Creating Custom Role for dropConnections Access
DESCRIPTION: Example of creating a custom role with the dropConnections privilege on the admin database. This grants the minimum required permissions to execute the dropConnections command.

LANGUAGE: javascript
CODE:
db.getSiblingDB("admin").createRole(
  {
    "role" : "dropConnectionsRole",
    "privileges" : [
      { 
        "resource" : { "cluster" : true }, 
        "actions" : [ "dropConnections" ] 
      }
    ],
    "roles" : []
  }
)

----------------------------------------

TITLE: MongoDB $maxN Operator Syntax
DESCRIPTION: Basic syntax structure for the $maxN operator showing the required n and input fields.

LANGUAGE: javascript
CODE:
{ $maxN: { n: <expression>, input: <expression> } }

----------------------------------------

TITLE: Importing MongoDB Public GPG Key
DESCRIPTION: Downloads the MongoDB public GPG key and imports it into the system's keyring. This step is crucial for verifying the authenticity of MongoDB packages during installation.

LANGUAGE: bash
CODE:
curl -fsSL https://www.mongodb.org/static/pgp/server-{+version+}.asc | \
   sudo gpg -o /usr/share/keyrings/mongodb-server-{+version+}.gpg \
   --dearmor

----------------------------------------

TITLE: Creating ClientEncryption in C#
DESCRIPTION: Example showing how to instantiate a ClientEncryption object using the C# MongoDB driver

LANGUAGE: csharp
CODE:
// Code reference: /includes/queryable-encryption/fundamentals/manual-encryption/manual-enc.cs

----------------------------------------

TITLE: Disabling Auto Merger for MongoDB Collection
DESCRIPTION: This snippet demonstrates how to disable automatic chunk merges for a specific collection in MongoDB using the sh.disableAutoMerger() method. It takes a namespace parameter in the format 'database.collection'.

LANGUAGE: javascript
CODE:
sh.disableAutoMerger( "testDatabase.myCollection" )

----------------------------------------

TITLE: systemLog Configuration Options
DESCRIPTION: Options for configuring MongoDB's system logging

LANGUAGE: yaml
CODE:
systemLog:
   verbosity: <int>
   quiet: <boolean>
   traceAllExceptions: <boolean>
   syslogFacility: <string>
   path: <string>
   logAppend: <boolean>
   logRotate: <string>
   destination: <string>
   timeStampFormat: <string>
   component:
      accessControl:
         verbosity: <int>
      command:
         verbosity: <int>

----------------------------------------

TITLE: Dropping an Index in MongoDB
DESCRIPTION: This snippet shows how to drop an index using the dropIndex() method, which is necessary when recreating an index with a different name.

LANGUAGE: javascript
CODE:
db.salesData.dropIndex( "tenant_customFields" )

----------------------------------------

TITLE: Inserting Test Data for $concatArrays Example
DESCRIPTION: Creates a sample 'warehouses' collection with test documents containing 'instock' and 'ordered' arrays for demonstration.

LANGUAGE: javascript
CODE:
db.warehouses.insertMany( [
   { _id : 1, instock: [ "chocolate" ], ordered: [ "butter", "apples" ] },
   { _id : 2, instock: [ "apples", "pudding", "pie" ] },
   { _id : 3, instock: [ "pears", "pecans" ], ordered: [ "cherries" ] },
   { _id : 4, instock: [ "ice cream" ], ordered: [ ] }
] )

----------------------------------------

TITLE: Creating Encrypted Collection Schema
DESCRIPTION: Defines the encrypted collection schema with specified encryption fields and their corresponding encryption keys. Sets up the collection with queryable encryption enabled.



----------------------------------------

TITLE: Performing DeleteMany Operation in Scala MongoDB Driver
DESCRIPTION: The deleteMany() method in the Scala driver returns an Observable with a single element of DeleteResult type, or with a com.mongodb.MongoException if unsuccessful.

LANGUAGE: scala
CODE:
collection.deleteMany()

----------------------------------------

TITLE: Starting mongos with Kerberos Support
DESCRIPTION: Command to start a mongos instance with Kerberos authentication enabled, specifying the keytab file and authentication mechanism.

LANGUAGE: bash
CODE:
env KRB5_KTNAME=/opt/mongodb/mongos.keytab \
mongos \
--setParameter authenticationMechanisms=GSSAPI \
--configdb shard0.example.net, shard1.example.net,shard2.example.net \
--keyFile /opt/mongodb/mongos.keyfile \
--bind_ip localhost,<hostname(s)|ip address(es)>

----------------------------------------

TITLE: Printing Collection Statistics in MongoDB using JavaScript
DESCRIPTION: Script to iterate through all databases and collections to print detailed statistics for each collection.

LANGUAGE: javascript
CODE:
db.adminCommand("listDatabases").databases.forEach(function (d) {
   mdb = db.getSiblingDB(d.name);
   mdb.getCollectionNames().forEach(function(c) { 
      s = mdb[c].stats();
      printjson(s);
   })
})

----------------------------------------

TITLE: Example of Role Structure Before Revoking Roles in MongoDB
DESCRIPTION: Shows the structure of a role named 'purchaseAgents' in the 'emea' database before revoking roles, displaying its inherited roles.

LANGUAGE: javascript
CODE:
{
   "_id" : "emea.purchaseAgents",
   "role" : "purchaseAgents",
   "db" : "emea",
   "privileges" : [],
   "roles" : [
      {
         "role" : "readOrdersCollection",
         "db" : "emea"
      },
      {
         "role" : "readAccountsCollection",
         "db" : "emea"
      },
      {
         "role" : "writeOrdersCollection",
         "db" : "emea"
      }
   ]
}

----------------------------------------

TITLE: Complex MongoDB Aggregation with $convert
DESCRIPTION: Demonstrates a more complex aggregation pipeline using $convert to transform price and quantity fields, and calculate a total price.

LANGUAGE: javascript
CODE:
priceQtyConversionStage = { 
   $addFields: { 
      convertedPrice: { $convert:
         {
            input: "$price",
            to: "decimal",
            onError: "Error",
            onNull: Decimal128("0")
         } },
      convertedQty: { $convert:
         { 
            input: "$qty",
            to: "int", 
            onError:{ $concat:
               [
                  "Could not convert ",
                  { $toString:"$qty" },
                  " to type integer."
               ]
            },
         onNull: Int32("0") 
      } },
   }
};

totalPriceCalculationStage = { 
   $project: { totalPrice: {
     $switch: {
        branches: [
          { case:
             { $eq: [ { $type: "$convertedPrice" }, "string" ] },
             then: "NaN"
          },
          { case:
             { $eq: [ { $type: "$convertedQty" }, "string" ] },
             then: "NaN"
          },
        ],
        default: { $multiply: [ "$convertedPrice", "$convertedQty" ] }
     }
} } };

db.orders.aggregate( [
   priceQtyConversionStage,
   totalPriceCalculationStage
])

----------------------------------------

TITLE: LDAP Configuration Example in YAML
DESCRIPTION: Sample YAML configuration file demonstrating LDAP authentication and authorization settings for Active Directory integration

LANGUAGE: yaml
CODE:
security:
   authorization: "enabled"
   ldap:
      servers: "activedirectory.example.net"
      bind:
         queryUser: "mongodbadmin@dba.example.com"
         queryPassword: "secret123"
      userToDNMapping:
         '[
            {
               match : "(.+)",
               ldapQuery: "DC=example,DC=com??sub?(userPrincipalName={0})"
            }
         ]'
      authz:
         queryTemplate: "DC=example,DC=com??sub?(&(objectClass=group)(member:1.2.840.113556.1.4.1941:={USER}))"
setParameter:
   authenticationMechanisms: "PLAIN"

----------------------------------------

TITLE: Displaying MongoDB Resharding Operation Output in JavaScript
DESCRIPTION: This code snippet demonstrates the structure of a MongoDB resharding operation output. It includes fields such as shard information, timing metrics, index building progress, oplog entries, data modification counts, and various other resharding-specific details.

LANGUAGE: javascript
CODE:
{
    shard: '<string>',
    totalCopyTimeElapsedSecs: Long('<count>'),
    totalApplyTimeElapsedSecs: Long('<count>'),
    totalCriticalSectionTimeElapsedSecs: Long('<count>'),
    totalIndexBuildTimeElapsedSecs: Long('<count>'),
    indexesToBuild: Long('<count>'),
    indexesBuilt: Long('<count>'),
    oplogEntriesFetched: Long('<count>'),
    oplogEntriesApplied: Long('<count>'),
    insertsApplied: Long('<count>'),
    updatesApplied: Long('<count>'),
    deletesApplied: Long('<count>'),
    type: 'op',
    desc: 'ReshardingMetrics{Donor|Recipient|Coordinator}Service <reshardingUUID>',
    op: 'command',
    ns: '<database>.<collection>',
    originatingCommand: {
       reshardCollection: '<database>.<collection>',
       key: '<shardkey>',
       unique:'<boolean>',
       collation: { locale: 'simple' }
    },
    totalOperationTimeElapsedSecs: Long('<count>'),
    recipientState: '<service state>',
    remainingOperationTimeEstimatedSecs: Long('<count>'),
    approxDocumentsToCopy: Long('<count>'),
    approxBytesToCopy: Long('<count>'),
    bytesCopied: Long('<count>'),
    countWritesToStashCollections: Long('<count>'),
    documentsCopied: Long('<count>'),
    provenance: 'reshardCollection'
}

----------------------------------------

TITLE: Pinning MongoDB Package Versions to Prevent Upgrades
DESCRIPTION: These commands pin the MongoDB packages at their currently installed versions to prevent unintended upgrades. This is useful when you want to maintain a specific version of MongoDB.

LANGUAGE: bash
CODE:
echo "{+package-name-org+} hold" | sudo dpkg --set-selections
echo "{+package-name-org+}-database hold" | sudo dpkg --set-selections
echo "{+package-name-org+}-server hold" | sudo dpkg --set-selections
echo "{+package-name+}-mongosh hold" | sudo dpkg --set-selections
echo "{+package-name-org+}-mongos hold" | sudo dpkg --set-selections
echo "{+package-name-org+}-tools hold" | sudo dpkg --set-selections

----------------------------------------

TITLE: Configuring GCP KMS Provider for MongoDB Encryption in C#
DESCRIPTION: This code sets up the GCP KMS provider for MongoDB Client-Side Field Level Encryption in C#. It includes the GCP project ID and the path to the service account key file.

LANGUAGE: csharp
CODE:
var kmsProviders = new Dictionary<string, IReadOnlyDictionary<string, object>>
{
    {
        "gcp", new Dictionary<string, object>
        {
            { "email", "my-email@my-project.iam.gserviceaccount.com" },
            { "privateKey", "-----BEGIN PRIVATE KEY-----\n<your GCP service account private key>\n-----END PRIVATE KEY-----\n" }
        }
    }
};

----------------------------------------

TITLE: MongoDB Meta Object Expression Syntax
DESCRIPTION: Demonstrates the basic syntax for using the $meta operator in MongoDB queries. The expression requires a metaDataKeyword parameter that specifies what type of metadata to return.

LANGUAGE: javascript
CODE:
{ $meta: <metaDataKeyword> }

----------------------------------------

TITLE: Querying MongoDB with $all Operator in MongoDB Shell
DESCRIPTION: This snippet demonstrates how to use the $all operator in the MongoDB shell to find documents where the 'tags' array contains both 'red' and 'blank' elements.

LANGUAGE: javascript
CODE:
db.inventory.find( { tags: { $all: ["red", "blank"] } } )

----------------------------------------

TITLE: Authenticating User in MongoDB using JavaScript
DESCRIPTION: This code snippet demonstrates how to authenticate a user in MongoDB using the db.auth() method. It takes the username and password as parameters to authenticate the user 'James' with the password 'js008'.

LANGUAGE: javascript
CODE:
db.auth( "James", "js008" )

----------------------------------------

TITLE: Querying MongoDB Collection in Go
DESCRIPTION: This snippet shows how to query a MongoDB collection using the Go driver. The actual code is not provided in the excerpt, but it references an external file containing the implementation.

LANGUAGE: go
CODE:
// Code is referenced from an external file: /driver-examples/go_examples.go

----------------------------------------

TITLE: MongoDB Authentication Restrictions Fields Example
DESCRIPTION: Example of MongoDB authentication restrictions document structure showing clientSource and serverAddress fields. These fields control IP-based access restrictions for client connections and server bindings.

LANGUAGE: json
CODE:
{
  "clientSource": ["198.51.100.0"],
  "serverAddress": ["203.0.113.0"]
}

----------------------------------------

TITLE: Running hello Command Without Specified Read Preference in MongoDB
DESCRIPTION: This example demonstrates how to use db.runCommand() to execute the hello command in MongoDB without specifying a read preference. The command returns information about the MongoDB server instance.

LANGUAGE: javascript
CODE:
db.runCommand( { hello: 1 } )

----------------------------------------

TITLE: Setting Script Permissions
DESCRIPTION: Command to make the THP init script executable by setting appropriate permissions.

LANGUAGE: sh
CODE:
sudo chmod 755 /etc/init.d/enable-transparent-hugepages

----------------------------------------

TITLE: MongoDB $addFields and $set Alias
DESCRIPTION: The $addFields pipeline stage adds new fields to documents. $set is an alias for $addFields, providing identical functionality.

LANGUAGE: mongodb
CODE:
$addFields

LANGUAGE: mongodb
CODE:
$set

----------------------------------------

TITLE: Creating MongoClient with Automatic Encryption Settings
DESCRIPTION: This snippet demonstrates how to create a MongoDB client with automatic encryption settings. It uses the previously defined variables to set up the encryption environment.

LANGUAGE: javascript
CODE:
const client = new MongoClient(uri, {
  autoEncryption: {
    keyVaultNamespace,
    kmsProviders,
    schemaMap: {
      "<Your Database>.<Your Collection>": schema
    },
    extraOptions: extraOptions
  }
});

----------------------------------------

TITLE: Creating Index Using PHP Driver
DESCRIPTION: Creates an index using the PHP driver's Collection::createIndex() method.

LANGUAGE: php
CODE:
$collection->createIndex(<key and index type specification>, <options>);

----------------------------------------

TITLE: MongoDB Find with Sort and Limit Example
DESCRIPTION: Example showing find command with filtering, projection, sorting and limiting of results.

LANGUAGE: javascript
CODE:
db.runCommand(
   {
     find: "restaurants",
     filter: { rating: { $gte: 9 }, cuisine: "italian" },
     projection: { name: 1, rating: 1, address: 1 },
     sort: { name: 1 },
     limit: 5
   }
)

----------------------------------------

TITLE: Unhiding Index by Specification
DESCRIPTION: Example of unhiding a hidden index using the index specification document.

LANGUAGE: javascript
CODE:
db.restaurants.unhideIndex( { borough: 1, city: 1 } );

----------------------------------------

TITLE: Retrieving Collection Names in MongoDB using JavaScript
DESCRIPTION: This snippet demonstrates how to use the db.getCollectionNames() method to retrieve an array of collection names in the 'records' database. It shows both the method call and the expected output format.

LANGUAGE: javascript
CODE:
use records
db.getCollectionNames()

LANGUAGE: javascript
CODE:
[ "employees", "products", "mylogs", "system.indexes" ]

----------------------------------------

TITLE: MisplacedCollection Example Response
DESCRIPTION: Shows a complete example of a MisplacedCollection inconsistency response from MongoDB, including cursor information and the inconsistency details.

LANGUAGE: json
CODE:
{
   cursor: {
      id: Long("0"),
      ns: "test.$cmd.aggregate",
      firstBatch: [
         {
            type: "MisplacedCollection",
            description: "Found unsharded collection without the appropriate metadata on a shard different from the database primary shard",
            details: {
               namespace: "test.authors",
               shard: "shard02",
               localUUID: new UUID("1ad56770-61e2-48e9-83c6-8ecefe73cfc4")
            }
         }
      ],
   },
   ok: 1
}

----------------------------------------

TITLE: Basic $gt Operator Syntax in MongoDB Aggregation
DESCRIPTION: Demonstrates the basic syntax for using the $gt operator in MongoDB aggregation pipeline. The operator takes two expressions as arguments and returns a boolean result.

LANGUAGE: javascript
CODE:
{ $gt: [ <expression1>, <expression2> ] }

----------------------------------------

TITLE: Sample Collection Data in MongoDB
DESCRIPTION: Example documents in a sales collection showing the data structure used in the examples, including item prices, fees, and dates.

LANGUAGE: javascript
CODE:
{ "_id" : 1, "item" : "abc", "price" : 10, "fee" : 2, date: ISODate("2014-03-01T08:00:00Z") }
{ "_id" : 2, "item" : "jkl", "price" : 20, "fee" : 1, date: ISODate("2014-03-01T09:00:00Z") }
{ "_id" : 3, "item" : "xyz", "price" : 5,  "fee" : 0, date: ISODate("2014-03-15T09:00:00Z") }

----------------------------------------

TITLE: Creating Collection with Initial Array
DESCRIPTION: Shows how to insert a document with an initial array field that will be modified with $addToSet.

LANGUAGE: javascript
CODE:
db.inventory.insertOne( 
   { _id: 1, item: "polarizing_filter", tags: [ "electronics", "camera" ] }
)

----------------------------------------

TITLE: Creating User with dropConnections Role
DESCRIPTION: Example of creating a new user and assigning them the custom dropConnections role on the admin database.

LANGUAGE: javascript
CODE:
db.getSiblingDB("admin").createUser(
  {
    "user" : "dropConnectionsUser",
    "pwd" : "replaceThisWithASecurePassword",
    "roles" : [ "dropConnectionsRole" ]
  }
)

----------------------------------------

TITLE: Inserting Encrypted Document with MongoDB Queryable Encryption in C#
DESCRIPTION: This C# code snippet demonstrates how to insert an encrypted document using MongoDB's Queryable Encryption feature. It assumes a pre-configured MongoClient instance with Queryable Encryption enabled.

LANGUAGE: csharp
CODE:
// Requires a MongoClient configured with Queryable Encryption support
// Insert an encrypted document


----------------------------------------

TITLE: Inserting Encrypted Document with MongoDB Queryable Encryption in C#
DESCRIPTION: This C# code snippet demonstrates how to insert an encrypted document using MongoDB's Queryable Encryption feature. It assumes a pre-configured MongoClient instance with Queryable Encryption enabled.

LANGUAGE: csharp
CODE:
// Requires a MongoClient configured with Queryable Encryption support
// Insert an encrypted document


----------------------------------------

TITLE: Creating MongoDB Enterprise Repository Configuration for RHEL 8
DESCRIPTION: This snippet contains the yum repository configuration for MongoDB Enterprise on RHEL 8 systems. It specifies the repository name, base URL, GPG key, and enables the repository.

LANGUAGE: yaml
CODE:
[mongodb-enterprise-{+version+}]
name=MongoDB Enterprise Repository
baseurl=https://repo.mongodb.com/yum/redhat/$releasever/mongodb-enterprise/{+version+}/x86_64/
gpgcheck=1
enabled=1
gpgkey=https://www.mongodb.org/static/pgp/server-{+version+}.asc

----------------------------------------

TITLE: Creating Unique KeyAltNames Index - Python
DESCRIPTION: Creates a unique index on the keyAltNames field in the encryption.__keyVault collection using Python MongoDB driver. This index is required for queryable encryption functionality.

LANGUAGE: python
CODE:
key_vault.create_index(
    "keyAltNames",
    unique=True,
    partialFilterExpression={"keyAltNames": {"$exists": True}},
)

----------------------------------------

TITLE: MongoDB dropIndexes Change Event Example
DESCRIPTION: Example of a change stream event document generated when indexes are dropped from a collection. Shows the structure including the resume token, operation type, timestamps, and details about the dropped indexes.

LANGUAGE: json
CODE:
{
   "_id": { <ResumeToken> },
   "operationType": "dropIndexes",
   "clusterTime": <Timestamp>
   "collectionUUID": <uuid>,
   "wallTime": <isodate>,
   "ns": {
      "db": "test",
      "coll": "authors" },
   "operationDescription": {
      "indexes": [
         { "v": 2, "key": { "name": 1 }, "name": "name_1" }
      ]
   }
}

----------------------------------------

TITLE: Querying Legacy Coordinate Pairs with $geoWithin in MongoDB
DESCRIPTION: Illustrates the syntax for using $geoWithin with shapes defined by legacy coordinate pairs on a plane in MongoDB.

LANGUAGE: javascript
CODE:
{
   <location field>: {
      $geoWithin: { <shape operator>: <coordinates> }
   }
}

----------------------------------------

TITLE: Creating a Compound Wildcard Index with Projection Using Shell Helper in MongoDB
DESCRIPTION: This example shows how to use the shell helper method to create a compound wildcard index with a wildcardProjection to specify individual sub-fields.

LANGUAGE: javascript
CODE:
db.salesData.createIndex(
  { tenantId: 1, "$**": 1 },
  { "wildcardProjection": {
        "customFields.addr": 1,
        "customFields.name": 1
     },
     name: "tenant_customFields_projection_helper"
  }
)

----------------------------------------

TITLE: Changing the expireAfterSeconds Parameter for a Time Series Collection in MongoDB
DESCRIPTION: This snippet demonstrates how to modify the expireAfterSeconds parameter for an existing time series collection named 'weather24h' using the collMod command. It updates the expiration time to 604801 seconds.

LANGUAGE: javascript
CODE:
db.runCommand({
   collMod: "weather24h",
   expireAfterSeconds: 604801
})

----------------------------------------

TITLE: String Matching with MongoDB $filter
DESCRIPTION: Demonstrates filtering array elements based on exact string matching using $eq operator within $filter.

LANGUAGE: javascript
CODE:
db.sales.aggregate( [
   {
      $project: {
         items: {
            $filter: {
               input: "$items",
               as: "item",
               cond: { $eq: [ "$$item.name", "pen"] }
            }
         }
      }
   }
] )

----------------------------------------

TITLE: Creating MongoDB Repository List File for Ubuntu 20.04
DESCRIPTION: This command creates a new list file for the MongoDB repository in the /etc/apt/sources.list.d/ directory. It specifies the package architecture, GPG key location, and repository URL for MongoDB packages on Ubuntu 20.04 (Focal).

LANGUAGE: bash
CODE:
echo "deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-{+version+}.gpg ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/{+version+} multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-{+version+}.list

----------------------------------------

TITLE: Creating Index Using PHP Driver
DESCRIPTION: Creates an ascending index on the 'name' field using the PHP MongoDB driver

LANGUAGE: php
CODE:
$collection->createIndex(['name' => 1]);

----------------------------------------

TITLE: MongoDB Unshard Collection Restricted Commands
DESCRIPTION: List of MongoDB commands and operations that cannot be executed on the collection being unsharded while unshardCollection is in progress. These include collection modifications, index operations, and database structure changes.

LANGUAGE: mongodb
CODE:
collMod
convertToCapped
createIndexes
db.collection.createIndexes()
drop
db.collection.drop()
dropIndexes
db.collection.dropIndex()
renameCollection
db.collection.renameCollection()

----------------------------------------

TITLE: Querying Large Polygon Intersection in MongoDB using JavaScript
DESCRIPTION: This example shows how to query with a single-ringed GeoJSON polygon whose area is greater than a single hemisphere. It uses the custom MongoDB coordinate reference system in the $geometry expression.

LANGUAGE: javascript
CODE:
db.places.find(
   {
     loc: {
       $geoIntersects: {
          $geometry: {
             type : "Polygon",
             coordinates: [
               [
                 [ -100, 60 ], [ -100, 0 ], [ -100, -60 ], [ 100, -60 ], [ 100, 60 ], [ -100, 60 ]
               ]
             ],
             crs: {
                type: "name",
                properties: { name: "urn:x-mongodb:crs:strictwinding:EPSG:4326" }
             }
          }
       }
     }
   }
)

----------------------------------------

TITLE: MongoDB updateRole Command Basic Syntax
DESCRIPTION: Demonstrates the basic syntax for updating a role in MongoDB using the updateRole command. The command allows updating privileges, roles, and authentication restrictions for a user-defined role.

LANGUAGE: javascript
CODE:
db.runCommand(
   {
     updateRole: "<role>",
     privileges:
         [
           { resource: { <resource> }, actions: [ "<action>", ... ] },
           ...
         ],
     roles:
         [
           { role: "<role>", db: "<database>" } | "<role>",
           ...
         ],
     authenticationRestrictions:
         [
           {
             clientSource: ["<IP>" | "<CIDR range>", ...],
             serverAddress: ["<IP>", ...]
           },
           ...
         ]
     writeConcern: <write concern document>,
     comment: <any>
   }
 )

----------------------------------------

TITLE: Defining $lt Operator Syntax in MongoDB Aggregation
DESCRIPTION: Basic syntax definition for the $lt operator in MongoDB aggregation framework. Shows the structure for comparing two expressions.

LANGUAGE: javascript
CODE:
{ $lt: [ <expression1>, <expression2> ] }

----------------------------------------

TITLE: Forcing MongoDB Replica Set Reconfiguration
DESCRIPTION: Demonstrates the use of the 'force' option in MongoDB replica set reconfiguration. This operation can lead to rollbacks of majority-committed writes and inconsistencies in sharded clusters. It should be used with extreme caution.

LANGUAGE: javascript
CODE:
{ force: true }

----------------------------------------

TITLE: Creating Index on MongoDB Collection
DESCRIPTION: Creates an index on the 'quantity' field to improve query performance.

LANGUAGE: javascript
CODE:
db.inventory.createIndex( { quantity: 1 } )

----------------------------------------

TITLE: Setting Log Level in MongoDB using JavaScript
DESCRIPTION: This snippet demonstrates the basic syntax for using db.setLogLevel() to set the log verbosity level. It takes two parameters: the verbosity level and an optional component name.

LANGUAGE: javascript
CODE:
db.setLogLevel(<level>, <component>)

----------------------------------------

TITLE: MongoDB Replica Set Status Check
DESCRIPTION: Shell command to check the status of a MongoDB replica set using the rs.status() helper

LANGUAGE: javascript
CODE:
rs.status()

----------------------------------------

TITLE: Creating List File for MongoDB Enterprise on Debian
DESCRIPTION: This snippet creates a list file for MongoDB Enterprise in the /etc/apt/sources.list.d/ directory. It adds the MongoDB repository to the system's package sources.

LANGUAGE: bash
CODE:
echo "deb [ arch=amd64,arm64 ] http://repo.mongodb.com/apt/debian buster/mongodb-enterprise/6.0 main" | sudo tee /etc/apt/sources.list.d/mongodb-enterprise.list

----------------------------------------

TITLE: Node.js Driver Query Operations
DESCRIPTION: Documentation for performing query operations using Collection.find() method in the MongoDB Node.js driver



----------------------------------------

TITLE: Updating Nested Fields with $set in MongoDB JavaScript
DESCRIPTION: Demonstrates how to use dot notation with $set to update a field within a nested document without replacing the entire document.

LANGUAGE: javascript
CODE:
db.products.updateOne(
   { _id: 100 },
   { $set: { "details.make": "Kustom Kidz" } }
)

----------------------------------------

TITLE: Invalid Index Specification Error Message
DESCRIPTION: Error message format when an index specification is invalid.

LANGUAGE: none
CODE:
Index Error: invalid index spec for index '<indexName>': <indexSpec>

----------------------------------------

TITLE: Defining $dateDiff Syntax in MongoDB Aggregation
DESCRIPTION: Shows the syntax structure for using the $dateDiff operator in MongoDB aggregations. It specifies required fields like startDate, endDate, and unit, as well as optional fields like timezone and startOfWeek.

LANGUAGE: javascript
CODE:
{ 
   $dateDiff: { 
      startDate: <Expression>, 
      endDate: <Expression>, 
      unit: <Expression>, 
      timezone: <tzExpression>,
      startOfWeek: <String> 
   }
}

----------------------------------------

TITLE: Defining Unicode Checkmark in reStructuredText for MongoDB Docs
DESCRIPTION: This snippet defines a substitution named 'checkmark' that represents the Unicode character U+2713, which is a checkmark symbol. This allows easy insertion of checkmarks in MongoDB documentation using reStructuredText markup.

LANGUAGE: reStructuredText
CODE:
.. |checkmark| unicode:: U+2713

----------------------------------------

TITLE: Using $lastN as an Aggregation Accumulator in MongoDB
DESCRIPTION: Example of using $lastN as an aggregation accumulator to find the last three player scores for a single game in MongoDB.

LANGUAGE: javascript
CODE:
db.gamescores.aggregate( [
   {
      $match : { gameId : "G1" }
   },
   {
      $group:
         {
            _id: "$gameId",
            lastThreeScores:
               {
                  $lastN:
                  {
                     input: ["$playerId", "$score"],
                     n:3
                  }
               }
         }
   }
] )

----------------------------------------

TITLE: MongoDB Connection String for Motor Driver
DESCRIPTION: This snippet demonstrates the MongoDB connection string specifically for the Motor driver. It includes the username, password, host, port, and authentication source.

LANGUAGE: bash
CODE:
mongodb+srv://myDatabaseUser:D1fficultP%40ssw0rd@mongodb0.example.com:27017/?authSource=admin

----------------------------------------

TITLE: Setting MongoDB Feature Compatibility Version to 4.0
DESCRIPTION: Administrative command to downgrade MongoDB's feature compatibility version to 4.0. This command is idempotent and writes to an internal system collection. If the command fails, it can be safely retried.

LANGUAGE: javascript
CODE:
db.adminCommand({setFeatureCompatibilityVersion: "4.0"})

----------------------------------------

TITLE: Creating Unique Index for Queryable Encryption in C#
DESCRIPTION: This C# code snippet shows how to create a unique index on the 'keyAltNames' field in the 'encryption.__keyVault' namespace. It's an essential step for implementing Queryable Encryption in C# applications.

LANGUAGE: csharp
CODE:
await keyVaultClient.GetDatabase("encryption")
    .GetCollection<BsonDocument>("__keyVault")
    .Indexes
    .CreateOneAsync(
        new CreateIndexModel<BsonDocument>(
            Builders<BsonDocument>.IndexKeys.Ascending("keyAltNames"),
            new CreateIndexOptions
            {
                Unique = true,
                PartialFilterExpression = Builders<BsonDocument>.Filter.Exists("keyAltNames")
            }
        )
    );

----------------------------------------

TITLE: Creating Non-Capped Collection in MongoDB
DESCRIPTION: Creates a new non-capped collection named 'log2' in MongoDB database.

LANGUAGE: javascript
CODE:
db.createCollection("log2")

----------------------------------------

TITLE: Initial removeShard Command Response
DESCRIPTION: Shows the response structure when the removeShard command begins the draining process, including status information and collections to move.

LANGUAGE: javascript
CODE:
{
   "msg" : "draining started successfully",
   "state" : "started",
   "shard" : "bristol01",
   "note" : "you need to call moveCollection for collectionsToMove and afterwards movePrimary for the dbsToMove", 
   "dbsToMove" : [
      "fizz",
      "buzz"
   ],
   "collectionsToMove" : [
      "fizz.coll1",
      "buzz.coll1"
   ],
   "ok" : 1,
   "operationTime" : Timestamp(1575398919, 2),
   "$clusterTime" : {
      "clusterTime" : Timestamp(1575398919, 2),
      "signature" : {
         "hash" : BinData(0,"Oi68poWCFCA7b9kyhIcg+TzaGiA="),
         "keyId" : NumberLong("6766255701040824328")
      }
   }
}

----------------------------------------

TITLE: Inserting Decimal128 Gas Price Data in MongoDB
DESCRIPTION: Example showing how to insert a document with a decimal price value using the Decimal128 BSON type for precise monetary values.

LANGUAGE: javascript
CODE:
db.gasprices.insertOne(
   {
      "date" : ISODate(), 
      "price" : Decimal128("2.099"), 
      "station" : "Quikstop", 
      "grade" : "regular" 
   }
)

----------------------------------------

TITLE: Confirming FIPS Mode Activation in MongoDB Log
DESCRIPTION: Command to check the MongoDB server log file for confirmation that FIPS mode is active.

LANGUAGE: bash
CODE:
FIPS 140-2 mode activated

----------------------------------------

TITLE: Resulting MongoDB Document After Update
DESCRIPTION: Shows the final state of the document after the $addToSet operation, where only unique elements were added to the tags array

LANGUAGE: javascript
CODE:
{
     _id: 2,
     item: "cable",
     tags: [ "electronics", "supplies", "camera", "accessories" ]
   }

----------------------------------------

TITLE: MongoDB abortMoveCollection Example Usage
DESCRIPTION: Practical example of using the abortMoveCollection command to stop moving the 'us_accounts' collection in the 'sales' database.

LANGUAGE: javascript
CODE:
db.adminCommand( { 
   abortMoveCollection: "sales.us_accounts" 
} )

----------------------------------------

TITLE: Inserting an Encrypted Document in MongoDB using CSFLE
DESCRIPTION: This snippet shows how to insert a document with encrypted fields using a CSFLE-enabled MongoDB client. The 'ssn' and 'bloodType' fields are automatically encrypted.

LANGUAGE: javascript
CODE:
const encryptedClient = new MongoClient(uri, {
  autoEncryption: autoEncryptionOpts
});

await encryptedClient.connect();
const collection = encryptedClient.db("medicalRecords").collection("patients");

const result = await collection.insertOne({
  name: "Jon Doe",
  ssn: "901-01-0001",
  bloodType: "AB+"
});

console.log(result.insertedId);

----------------------------------------

TITLE: Complex Boolean Conversion Aggregation
DESCRIPTION: Demonstrates a complete aggregation pipeline that converts shipping status to boolean values with special handling for string values

LANGUAGE: javascript
CODE:
shippedConversionStage = {
   $addFields: {
      convertedShippedFlag: { 
         $switch: { 
            branches: [
              { case: { $eq: [ "$shipped", "false" ] }, then: false } , 
              { case: { $eq: [ "$shipped", "" ] }, then: false }
            ],
            default: { $toBool: "$shipped" }
        }
      }
   }
};

unshippedMatchStage = {
   $match: { "convertedShippedFlag": false }
};

db.orders.aggregate( [
  shippedConversionStage,
  unshippedMatchStage
] )

----------------------------------------

TITLE: Using $replaceRoot with $mergeObjects in MongoDB Aggregation
DESCRIPTION: Shows how to use $replaceRoot with $mergeObjects to merge the 'name' document into a default document, avoiding errors when the 'name' field is missing in some documents.

LANGUAGE: javascript
CODE:
db.collection.aggregate([
   { $replaceRoot: { newRoot: { $mergeObjects: [ { _id: "$_id", first: "", last: "" }, "$name" ] } } }
])

----------------------------------------

TITLE: Using Collation with findOneAndDelete() in MongoDB
DESCRIPTION: Shows how to use the collation option with findOneAndDelete() to perform language-specific string comparisons.

LANGUAGE: javascript
CODE:
db.myColl.insertMany( [
   { _id: 1, category: "café", status: "A" },
   { _id: 2, category: "cafe", status: "a" },
   { _id: 3, category: "cafE", status: "a" }
] )

db.myColl.findOneAndDelete(
   { category: "cafe", status: "a" },
   { collation: { locale: "fr", strength: 1 } }
);

----------------------------------------

TITLE: Importing MongoDB public GPG key (Bash)
DESCRIPTION: This command downloads the MongoDB public GPG key and imports it into the system's keyring. It uses curl to fetch the key and gpg to dearmor and store it.

LANGUAGE: bash
CODE:
curl -fsSL https://pgp.mongodb.com/server-{+version+}.asc | \
   sudo gpg -o /usr/share/keyrings/mongodb-server-{+version+}.gpg \
   --dearmor

----------------------------------------

TITLE: Finding Distinct Values in MongoDB
DESCRIPTION: The distinct command displays the distinct values found for a specified key in a collection or a view. It's useful for identifying unique values in a specific field.

LANGUAGE: mongodb
CODE:
db.runCommand({ distinct: "collection", key: "field", query: { status: "active" } })

----------------------------------------

TITLE: Configuring mongod with client certificate validation
DESCRIPTION: Example configuration for a mongod instance using TLS/SSL with client certificate validation. This sets up required TLS encryption, specifies the server certificate, and configures validation of client certificates.

LANGUAGE: yaml
CODE:
net:
   tls:
      mode: requireTLS
      certificateKeyFile: /etc/ssl/mongodb.pem
      CAFile: /etc/ssl/caToValidateClientCertificates.pem
systemLog:
   destination: file
   path: "/var/log/mongodb/mongod.log"
   logAppend: true
storage:
   dbPath: "/var/lib/mongodb"
processManagement:
   fork: true
net:
   bindIp: localhost,mongodb0.example.net
   port: 27017

----------------------------------------

TITLE: Creating Unique KeyAltNames Index - Go
DESCRIPTION: Creates a unique index on the keyAltNames field in the encryption.__keyVault collection using Go MongoDB driver. This index is required for queryable encryption functionality.

LANGUAGE: go
CODE:
_, err = keyVault.Indexes().CreateOne(context.TODO(), mongo.IndexModel{
	Keys:    bson.D{{"keyAltNames", 1}},
	Options: options.Index().SetUnique(true).SetPartialFilterExpression(bson.D{{"keyAltNames", bson.D{{"$exists", true}}}}),
})

----------------------------------------

TITLE: Querying Sellers Collection in MongoDB
DESCRIPTION: Shows how to verify the updated product price in the sellers collection.

LANGUAGE: javascript
CODE:
db.sellers.find( { id: 456, "products.name": "vest" } )

----------------------------------------

TITLE: Configuring dropSearchIndex Privilege in MongoDB
DESCRIPTION: Defines the resource and action permissions required for dropping search indexes. Specifies the database and collection level access control configuration.

LANGUAGE: javascript
CODE:
{
   resource: {
      db : <database>,
      collection: <collection>
   },
   actions: [ "dropSearchIndex" ]
}

----------------------------------------

TITLE: ReStructuredText Document Structure for MongoDB Installation Guide
DESCRIPTION: RST markup defining the document structure for MongoDB installation documentation, including title, metadata, and table of contents for different Linux distributions.

LANGUAGE: rst
CODE:
.. _install-mdb-community-edition-linux:

==========================================
Install MongoDB Community Edition on Linux
==========================================

.. default-domain:: mongodb

.. facet::
   :name: genre
   :values: reference

.. meta:: 
   :description: How to install MongoDB Community Edition for supported Linux systems.

.. include:: /includes/in-dev.rst

.. include:: /includes/rapid-release.rst

.. toctree::
   :titlesonly: 
   :hidden: 

   Install on Red Hat </tutorial/install-mongodb-on-red-hat>
   Install on Ubuntu </tutorial/install-mongodb-on-ubuntu>
   Install on Debian </tutorial/install-mongodb-on-debian>
   Install on SUSE </tutorial/install-mongodb-on-suse>
   Install on Amazon </tutorial/install-mongodb-on-amazon>

----------------------------------------

TITLE: Starting MongoDB with Kerberos and Config File
DESCRIPTION: Command to start MongoDB with Kerberos support using a configuration file and specifying the keytab file.

LANGUAGE: bash
CODE:
env KRB5_KTNAME=/opt/mongodb/mongod.keytab \
/opt/mongodb/bin/mongod --config /opt/mongodb/mongod.conf

----------------------------------------

TITLE: Red Hat THP Path Configuration
DESCRIPTION: Alternative file path for THP configuration on Red Hat Enterprise Linux and its derivatives.

LANGUAGE: bash
CODE:
/sys/kernel/mm/redhat_transparent_hugepage/enabled

----------------------------------------

TITLE: Dropping Multiple Indexes in MongoDB
DESCRIPTION: Removes multiple specified indexes from a collection using the dropIndexes() method with an array of index names.

LANGUAGE: javascript
CODE:
db.<collection>.dropIndexes( [ "<index1>", "<index2>", "<index3>" ] )

----------------------------------------

TITLE: Creating 2d Index on Embedded Multi-Location Field in MongoDB
DESCRIPTION: This snippet demonstrates how to create a 2d index on a field within an array of embedded documents in MongoDB.

LANGUAGE: javascript
CODE:
db.records.createIndex( { "addresses.loc": "2d" } )

----------------------------------------

TITLE: List Search Index by ID Example
DESCRIPTION: Demonstrates how to retrieve a specific Atlas Search index using its unique identifier.

LANGUAGE: javascript
CODE:
db.movies.aggregate(
   [
      {
         $listSearchIndexes:
            {
               id: "6524096020da840844a4c4a7"
            }
      }
   ]
)

----------------------------------------

TITLE: MongoDB Role Update Method Syntax
DESCRIPTION: Shows the complete syntax for the db.updateRole() method including the structure for specifying privileges, roles and authentication restrictions.

LANGUAGE: javascript
CODE:
db.updateRole(
    "<rolename>",
    {
      privileges:
          [
            { resource: { <resource> }, actions: [ "<action>", ... ] },
            ...
          ],
      roles:
          [
            { role: "<role>", db: "<database>" } | "<role>",
            ...
          ],
      authenticationRestrictions:
          [
            {
              clientSource: ["<IP>" | "<CIDR range>", ...],
              serverAddress: ["<IP>", | "<CIDR range>", ...]
            },
            ...
          ]
    },
    { <writeConcern> }
)

----------------------------------------

TITLE: MongoDB Write Concern Provenance Table Definition
DESCRIPTION: A restructuredText table defining different write concern provenance types and their descriptions in MongoDB.

LANGUAGE: restructuredtext
CODE:
.. list-table::
   :header-rows: 1
   :widths: 20 40

   * - Provenance
     - Description

   * - ``clientSupplied``
     - The write concern was specified in the application.

   * - ``customDefault``
     - The write concern originated from a custom defined
       default value. See :dbcommand:`setDefaultRWConcern`.

   * - ``getLastErrorDefaults``
     - The write concern originated from the replica set's
       :rsconf:`settings.getLastErrorDefaults` field.

   * - ``implicitDefault``
     - The write concern originated from the server in absence
       of all other write concern specifications.

----------------------------------------

TITLE: Specifying Data Key Options for GCP KMS in Python
DESCRIPTION: This code defines the options for creating a Data Encryption Key (DEK) using GCP KMS in Python. It specifies the master key's project ID, location, key ring, and key name.

LANGUAGE: python
CODE:
data_key_opts = {
    "masterKey": {
        "projectId": "<Your Google Project ID>",
        "location": "<Your Google Cloud location>",
        "keyRing": "<Your Key Ring name>",
        "keyName": "<Your Key name>",
    }
}

----------------------------------------

TITLE: Query All Database Roles
DESCRIPTION: Command to retrieve all roles in a database, including built-in roles.

LANGUAGE: javascript
CODE:
{ rolesInfo: 1, showBuiltinRoles: true }

----------------------------------------

TITLE: Processed Private Key Format
DESCRIPTION: Example showing the expected format of the private key after removing PEM markers, ready for use in the kmsProviders configuration.

LANGUAGE: text
CODE:
your-private-key

----------------------------------------

TITLE: Defining MongoDB Lock Modes in reStructuredText
DESCRIPTION: This snippet defines a table in reStructuredText format that outlines the various lock modes used in MongoDB and provides brief descriptions for each mode.

LANGUAGE: rst
CODE:
.. list-table::
   :widths: 20 80
   :header-rows: 1
   
   * - Lock Mode
     - Description

   * - ``R``

     - Represents Shared (S) lock.

   * - ``W``

     - Represents Exclusive (X) lock.

   * - ``r``

     - Represents Intent Shared (IS) lock.

   * - ``w``

     - Represents Intent Exclusive (IX) lock.

----------------------------------------

TITLE: Defining Sample Document Structure in MongoDB
DESCRIPTION: Illustrates the structure of a sample document in the 'orders' collection, including fields for customer ID, order date, status, price, and items.

LANGUAGE: javascript
CODE:
{
        _id: ObjectId("50a8240b927d5d8b5891743c"),
        cust_id: "abc123",
        ord_date: new Date("Oct 04, 2012"),
        status: 'A',
        price: 250,
        items: [ { sku: "mmm", qty: 5, price: 2.5 },
                 { sku: "nnn", qty: 5, price: 2.5 } ]
   }

----------------------------------------

TITLE: Inserting Document in MongoDB without Log Redaction
DESCRIPTION: This snippet demonstrates inserting a document into a MongoDB collection without log redaction. It shows how sensitive information can be exposed in the log output.

LANGUAGE: javascript
CODE:
db.clients.insertOne( { "name" : "Joe", "PII" : "Sensitive Information" } )

----------------------------------------

TITLE: Structuring MongoDB 8.0 Changelog with reStructuredText
DESCRIPTION: This snippet sets up the structure for the MongoDB 8.0 changelog using reStructuredText directives. It includes a table of contents and references to separate changelog files for different versions.

LANGUAGE: reStructuredText
CODE:
=============
8.0 Changelog
=============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. include:: /includes/changelogs/releases/8.0.5.rst

.. include:: /includes/changelogs/releases/8.0.4.rst

.. include:: /includes/changelogs/releases/8.0.3.rst

.. include:: /includes/changelogs/releases/8.0.1.rst

----------------------------------------

TITLE: Adding Shard Tag in MongoDB Sharded Cluster (JavaScript)
DESCRIPTION: JavaScript command to add a shard tag in a MongoDB sharded cluster. This example adds the 'inmem' tag to a shard named 'shardC'.

LANGUAGE: javascript
CODE:
sh.addShardTag("shardC", "inmem")

----------------------------------------

TITLE: Creating a New Database in MongoDB
DESCRIPTION: Shows how to create and switch to a new database named 'timeseries' using the 'use' command in mongosh.

LANGUAGE: bash
CODE:
use timeseries

----------------------------------------

TITLE: Inserting Encrypted Document with Python MongoDB Driver
DESCRIPTION: This snippet illustrates how to insert an encrypted document into the 'medicalRecords.patients' namespace using the Python MongoDB driver with Queryable Encryption enabled.

LANGUAGE: python
CODE:
# Code snippet not provided in the input text

----------------------------------------

TITLE: Querying MongoDB with Projection in PHP
DESCRIPTION: This snippet shows how to query MongoDB with projection using the PHP driver.

LANGUAGE: php
CODE:
// Start Example 45
// End Example 45

----------------------------------------

TITLE: Basic Collection Stats Format
DESCRIPTION: Shows the basic method format for retrieving collection statistics with optional parameters for scale, indexDetails, indexDetailsKey, and indexDetailsName.

LANGUAGE: javascript
CODE:
db.collection.stats({
   scale: <num>,                   // Optional
   indexDetails: <boolean>,        // Optional
   indexDetailsKey: <document>,    // Optional
   indexDetailsName: <string>.     // Optional
})

----------------------------------------

TITLE: Querying for Null Fields in MongoDB Compass
DESCRIPTION: This snippet shows the query filter document to be used in MongoDB Compass to find documents where the 'item' field is null (BSON type 10).

LANGUAGE: javascript
CODE:
{ item : { $type: 10 } }

----------------------------------------

TITLE: Checking Metadata Consistency in MongoDB 7.0+
DESCRIPTION: Command to check sharding metadata for inconsistencies and corruptions, with example response showing a misplaced collection error.

LANGUAGE: javascript
CODE:
db.runCommand( { checkMetadataConsistency: 1 } )

LANGUAGE: json
CODE:
{
   cursor: {
      id: Long("0"),
      ns: "test.$cmd.aggregate",
      firstBatch: [
         {
            type: "MisplacedCollection",
            description: "Unsharded collection found on shard different from database primary shard",
            details: {
               namespace: "test.authors",
               shard: "shard02",
               localUUID: new UUID("1ad56770-61e2-48e9-83c6-8ecefe73cfc4")
            }
         }
      ],
   },
   ok: 1
}

----------------------------------------

TITLE: MongoDB $toDate Equivalent Using $convert
DESCRIPTION: Demonstrates the equivalent $convert expression for $toDate operation.

LANGUAGE: javascript
CODE:
{ $convert: { input: <expression>, to: "date" } }

----------------------------------------

TITLE: Displaying Updated User Roles in MongoDB using JavaScript
DESCRIPTION: This snippet shows the updated roles array for the user 'accountUser01' after granting additional roles. It now includes the newly granted readWrite and read roles along with the existing assetsReader role.

LANGUAGE: javascript
CODE:
"roles" : [
    { "role" : "assetsReader",
      "db" : "assets"
    },
    { "role" : "read",
      "db" : "stock"
    },
    { "role" : "readWrite",
      "db" : "products"
    }
]

----------------------------------------

TITLE: Querying MongoDB with $or Operator in JavaScript (Shell)
DESCRIPTION: This snippet demonstrates how to use the $or operator in a MongoDB query using the MongoDB shell. It finds documents where the status is 'A' or the quantity is less than 30.

LANGUAGE: javascript
CODE:
db.inventory.find( { $or: [ { status: "A" }, { qty: { $lt: 30 } } ] } )

----------------------------------------

TITLE: Creating Customer Master Key for Queryable Encryption in MongoDB Shell
DESCRIPTION: This code snippet demonstrates how to create a 96-byte Customer Master Key (CMK) and save it to the filesystem as 'master-key.txt' using MongoDB Shell.

LANGUAGE: javascript
CODE:
const fs = require('fs');
const crypto = require('crypto');

const key = crypto.randomBytes(96);
fs.writeFileSync('master-key.txt', key);

----------------------------------------

TITLE: Projection Example
DESCRIPTION: Example showing how to use projection to return only specific fields in the result document.

LANGUAGE: javascript
CODE:
db.scores.findOneAndReplace(
   { "score" : { $lt : 22250 } },
   { "team" : "Therapeutic Hamsters", "score" : 22250 },
   { sort : { "score" : 1 }, projection: { "_id" : 0, "team" : 1 } }
)

----------------------------------------

TITLE: Removing Arbiter Data Files
DESCRIPTION: Shell command to clean arbiter data directory during downgrade.

LANGUAGE: bash
CODE:
rm -rf /path/to/mongodb/datafiles/*

----------------------------------------

TITLE: Creating and Inserting into Mixed Case Database in MongoDB
DESCRIPTION: This snippet demonstrates creating a database named 'salesDB' and inserting a document into it. The operation succeeds as the database name is unique.

LANGUAGE: javascript
CODE:
mixedCase = db.getSiblingDB('salesDB')
mixedCase.retail.insertOne({ "widgets": 1, "price": 50 })

----------------------------------------

TITLE: Creating Unique KeyAltNames Index - C#
DESCRIPTION: Creates a unique index on the keyAltNames field in the encryption.__keyVault collection using C# MongoDB driver. This index is required for queryable encryption functionality.

LANGUAGE: csharp
CODE:
var indexKeysDefinition = Builders<BsonDocument>.IndexKeys.Ascending("keyAltNames");
var partialFilterDefinition = Builders<BsonDocument>.Filter.Exists("keyAltNames");
var indexOptions = new CreateIndexOptions
{
    Unique = true,
    PartialFilterExpression = partialFilterDefinition
};
var indexModel = new CreateIndexModel<BsonDocument>(indexKeysDefinition, indexOptions);
await keyVault.Indexes.CreateOneAsync(indexModel);

----------------------------------------

TITLE: Implementing MongoDB Transaction for Price Updates
DESCRIPTION: Demonstrates how to use a transaction to update product prices consistently across multiple collections using session management and error handling.

LANGUAGE: javascript
CODE:
// Start a session
session = db.getMongo().startSession( { readPreference: { mode: "primary" } } );
productsCollection = session.getDatabase("test").products;
sellersCollection = session.getDatabase("test").sellers;

// Start a transaction
session.startTransaction( { readConcern: { level: "local" }, writeConcern: { w: "majority" } } );

// Operations inside the transaction
try {
   productsCollection.updateOne(
      { sellerId: 456, name: "vest" },
      { $set: { price: 25 } }
   );
   sellersCollection.updateOne(
      { },
      { $set: { "products.$[element].price": 25 } },
      { arrayFilters: [ { "element.name": "vest" } ] }
   );
} catch (error) {
   // Cancel transaction on error
   session.abortTransaction();
   throw error;
}
// Commit the transaction using write concern set at transaction start
session.commitTransaction();
session.endSession();

----------------------------------------

TITLE: Basic $jsonSchema Syntax in MongoDB
DESCRIPTION: Demonstrates the basic syntax for using the $jsonSchema operator in MongoDB queries. The schema specifies required fields and property types for a document.

LANGUAGE: javascript
CODE:
{ $jsonSchema: <JSON Schema object> }

----------------------------------------

TITLE: Generating Test PEM File for MongoDB Server
DESCRIPTION: This set of commands demonstrates how to create a test key file, certificate signing request, server certificate, and PEM file for a MongoDB server using OpenSSL. It also includes an example of creating a PKCS12 file for macOS Keychain Access.

LANGUAGE: bash
CODE:
openssl genrsa -out mongodb-test-server1.key 4096

openssl req -new -key mongodb-test-server1.key -out mongodb-test-server1.csr -config openssl-test-server.cnf

openssl x509 -sha256 -req -days 365 -in mongodb-test-server1.csr -CA mongodb-test-ia.crt -CAkey mongodb-test-ia.key -CAcreateserial -out mongodb-test-server1.crt -extfile openssl-test-server.cnf -extensions v3_req

cat mongodb-test-server1.crt mongodb-test-server1.key > test-server1.pem

openssl pkcs12 -export -out test-server1.pfx -inkey mongodb-test-server1.key -in mongodb-test-server1.crt -certfile mongodb-test-ia.crt

----------------------------------------

TITLE: Create Key Vault Index - Java
DESCRIPTION: Creates a unique index on the keyAltNames field in the encryption.__keyVault collection using Java MongoDB driver.

LANGUAGE: java
CODE:
keyVaultDatabase.createCollection("__keyVault");
keyVaultDatabase.getCollection("__keyVault")
        .createIndex(Indexes.ascending("keyAltNames"),
                new IndexOptions()
                        .unique(true)
                        .partialFilterExpression(Filters.exists("keyAltNames")));

----------------------------------------

TITLE: Configuring Shard Server Outbound Rule for Config Servers in Windows Firewall
DESCRIPTION: This command adds a rule to allow outgoing connections to config servers and mongos instances from the shard server port.

LANGUAGE: bat
CODE:
netsh advfirewall firewall add rule name="Open mongod config svr outbound" dir=out action=allow protocol=TCP remoteip=<ip-address> localport=27018

----------------------------------------

TITLE: Using $in Operator with Regular Expressions
DESCRIPTION: Example of using $in operator with regular expressions to match string patterns in the tags field.

LANGUAGE: javascript
CODE:
db.inventory.find( { tags: { $in: [ /^be/, /^st/ ] } } )

----------------------------------------

TITLE: Configuring Zone Ranges for Collections in MongoDB
DESCRIPTION: This snippet demonstrates how to associate collections with zones using sh.updateZoneKeyRange(). It sets up zone ranges for the bigData and manyIndexes collections, assigning them to the FLASH and HI_RAM zones respectively.

LANGUAGE: javascript
CODE:
sh.updateZoneKeyRange(
   "shardDistributionDB.bigData",
   { "_id" : MinKey },
   { "_id" : MaxKey },
   "FLASH"
)

sh.updateZoneKeyRange(
   "shardDistributionDB.manyIndexes",
   { "_id" : MinKey },
   { "_id" : MaxKey },
   "HI_RAM"
)

----------------------------------------

TITLE: Removing Zone Range
DESCRIPTION: Removes a previously created zone range by passing null as the zone parameter

LANGUAGE: javascript
CODE:
sh.updateZoneKeyRange(
   "exampledb.collection",
   { a : 1 },
   { a : 10 },
   null
)

----------------------------------------

TITLE: Querying Multiple Schema Versions in MongoDB
DESCRIPTION: Demonstrates how to query for a work phone number across different schema versions using $or operator.

LANGUAGE: javascript
CODE:
db.contacts.find(
   {
      $or: [
         {
            work: "503-555-0110"
         },
         {
            "contactInfo.work": "503-555-0110"
         }
      ]
   }
)

----------------------------------------

TITLE: Counting Documents in MongoDB
DESCRIPTION: The count command counts the number of documents in a collection or a view. It provides a quick way to get the total number of documents matching certain criteria.

LANGUAGE: mongodb
CODE:
db.runCommand({ count: "collection", query: { field: "value" } })

----------------------------------------

TITLE: Detecting Linux Init System Type
DESCRIPTION: Command to determine which init system (systemd or System V Init) is being used by the Linux operating system. The command looks at the first process (PID 1) running on the system.

LANGUAGE: bash
CODE:
ps --no-headers -o comm 1

----------------------------------------

TITLE: Granting MongoDB ReadWrite Role to User
DESCRIPTION: Demonstrates how to grant the readWrite role to a user for a specific database. This role includes the updateSearchIndex privilege.

LANGUAGE: javascript
CODE:
db.grantRolesToUser(
   "<user>",
   [ { role: "readWrite", db: "qa" } ]
)

----------------------------------------

TITLE: Creating Role for MongoDB mongostat Tool
DESCRIPTION: Creates a custom role 'mongostatRole' that provides specific privileges required to run the mongostat utility. This role offers targeted permissions for monitoring database statistics.



----------------------------------------

TITLE: Example of MongoDB Drop Event Structure in JSON
DESCRIPTION: This snippet demonstrates the structure of a 'drop' event in MongoDB change streams. It includes fields such as _id, operationType, clusterTime, wallTime, and ns (namespace) with database and collection information.

LANGUAGE: json
CODE:
{
   "_id": { <Resume Token> },
   "operationType": "drop",
   "clusterTime": <Timestamp>,
   "wallTime": <ISODate>,
   "ns": {
      "db": "engineering",
      "coll": "users"
   }
}

----------------------------------------

TITLE: Sample Collection Documents
DESCRIPTION: Example documents in a collection showing different data types to demonstrate $type operator usage.

LANGUAGE: javascript
CODE:
{ _id: 0, a : 8 }
{ _id: 1, a : [ 41.63, 88.19 ] }
{ _id: 2, a : { a : "apple", b : "banana", c: "carrot" } }
{ _id: 3, a :  "caribou" }
{ _id: 4, a : NumberLong(71) }
{ _id: 5 }

----------------------------------------

TITLE: Retrieving Updated Document with find() Method in MongoDB
DESCRIPTION: This snippet demonstrates how to use the find() method to retrieve an updated document in MongoDB. It's important to note that this approach may not always return the exact updated document due to potential concurrent modifications.

LANGUAGE: javascript
CODE:
db.collection.find()

----------------------------------------

TITLE: MongoDB FindOne Basic Query
DESCRIPTION: Simple findOne() query that returns a single document from the bios collection without any criteria.

LANGUAGE: javascript
CODE:
db.bios.findOne()

----------------------------------------

TITLE: Defining MissingRoutingTable Format in JSON
DESCRIPTION: This snippet shows the JSON format for a MissingRoutingTable inconsistency document. It includes the type, description, and details fields with namespace and collectionUUID.

LANGUAGE: json
CODE:
{
   "type": "MissingRoutingTable",
   "description": "<string>",
   "details": {
      "namespace": "<string>",
      "collectionUUID": "<uuid>"
   }
}

----------------------------------------

TITLE: Creating Role for Managing Current Operations in MongoDB
DESCRIPTION: Creates a custom role 'manageOpRole' that grants privileges to execute db.currentOp() and db.killOp() operations. This role provides focused permissions for operation management without granting additional privileges.



----------------------------------------

TITLE: MongoDB Shell Sharding Commands
DESCRIPTION: Reference list of MongoDB shell methods for sharding operations. Methods include functionality for managing shards, zones, chunks, balancing operations, and cluster configuration. Most methods are accessed through the 'sh' namespace.

LANGUAGE: javascript
CODE:
// Core sharding operations
sh.enableSharding("database")
sh.shardCollection("ns", key)
sh.addShard("host:port")

// Balancer management
sh.enableBalancing("ns")
sh.disableBalancing("ns")
sh.isBalancerRunning()

// Zone management
sh.addShardToZone("shard", "zone")
sh.updateZoneKeyRange("ns", min, max, "zone")

// Chunk operations
sh.moveChunk("ns", query)
sh.splitAt("ns", middle)

// Monitoring
sh.status()
sh.checkMetadataConsistency()

----------------------------------------

TITLE: Configuring Automatic Encryption Options in Python for MongoDB
DESCRIPTION: This snippet illustrates how to set up automatic encryption options for MongoDB using the Python driver. It configures the key vault namespace, KMS provider, and schema map.

LANGUAGE: python
CODE:
auto_encryption_opts = AutoEncryptionOpts(
    "admin.datakeys",
    kms_providers,
    schema_map=schema_map,
    **extra_options)

----------------------------------------

TITLE: Creating MongoDB Collection with Warning Validation
DESCRIPTION: This snippet demonstrates how to create a 'contacts2' collection with a JSON schema validator that allows invalid documents but logs warnings. It sets 'validationAction' to 'warn'.

LANGUAGE: javascript
CODE:
db.createCollection( "contacts2", {
   validator: { $jsonSchema: {
      bsonType: "object",
      required: [ "phone" ],
      properties: {
         phone: {
            bsonType: "string",
            description: "must be a string and is required"
         },
         email: {
            bsonType : "string",
            pattern : "@mongodb\\.com$",
            description: "must be a string and end with '@mongodb.com'"
         }
      }
   } },
   validationAction: "warn" 
} )

----------------------------------------

TITLE: Configuring Contention Factor in MongoDB for Encrypted Collections
DESCRIPTION: Demonstrates how to set the contention factor for encrypted collections in MongoDB. The contention factor helps manage concurrent write operations by partitioning the internal counter for field/value pairs.

LANGUAGE: mongodb
CODE:
contention = 0

LANGUAGE: mongodb
CODE:
contention = 4

----------------------------------------

TITLE: Specifying Key Vault Namespace for MongoDB Queryable Encryption
DESCRIPTION: This snippet demonstrates how to specify the encryption.__keyVault as the key vault namespace for queryable encryption in MongoDB. It's a crucial step in setting up the encryption infrastructure.

LANGUAGE: javascript
CODE:
const keyVaultNamespace = "encryption.__keyVault";

LANGUAGE: python
CODE:
key_vault_namespace = "encryption.__keyVault"

LANGUAGE: java
CODE:
String keyVaultNamespace = "encryption.__keyVault";

LANGUAGE: go
CODE:
keyVaultNamespace := "encryption.__keyVault"

LANGUAGE: csharp
CODE:
string keyVaultNamespace = "encryption.__keyVault";

----------------------------------------

TITLE: Batch Document Writes in MongoDB Time Series Collections
DESCRIPTION: Example of optimized batch inserts using insertMany() with ordered:false parameter. Shows how to efficiently insert multiple measurements from different sensors.

LANGUAGE: javascript
CODE:
db.temperatures.insertMany(
   [
      {
         metaField: {
            sensor: "sensorA"
         },
         timestamp: ISODate("2021-05-18T00:00:00.000Z"),
         temperature: 10
      },
      {
         metaField: {
            sensor: "sensorA"
         },
         timestamp: ISODate("2021-05-19T00:00:00.000Z"),
         temperature: 12
      },
      {
         metaField: {
            sensor: "sensorA"
         },
         timestamp: ISODate("2021-05-20T00:00:00.000Z"),
         temperature: 13
      },
      {
         metaField: {
            sensor: "sensorB"
         },
         timestamp: ISODate("2021-05-18T00:00:00.000Z"),
         temperature: 20
      },
      {
         metaField: {
            sensor: "sensorB"
         },
         timestamp: ISODate("2021-05-19T00:00:00.000Z"),
         temperature: 25
      },
      {
         metadField: {
            sensor: "sensorB"
         },
         timestamp: ISODate("2021-05-20T00:00:00.000Z"),
         temperature: 26
      }
   ],
   { "ordered": false }
)

----------------------------------------

TITLE: MisplacedCollection Format Definition in JSON
DESCRIPTION: Defines the JSON schema for MisplacedCollection inconsistency documents, including required fields and their types.

LANGUAGE: json
CODE:
{
   type: "MisplacedCollection",
   description: "<string>",
   details: {
      namespace: "<string>",
      shard: "<string>",
      localUUID: UUID("<uuid>")
   }
}

----------------------------------------

TITLE: Inserting Document with Non-Document Array in MongoDB
DESCRIPTION: Inserts a document into the 'students' collection with an array of test scores that are not documents.

LANGUAGE: javascript
CODE:
db.students.insertOne( { "_id" : 2, "tests" : [  89,  70,  89,  50 ] } )

----------------------------------------

TITLE: Basic Ad Zone Schema in MongoDB
DESCRIPTION: Schema definition for storing available ads in the ad.zone collection. Includes site_id, zone_id, and an array of ads with campaign details and eCPM values.

LANGUAGE: javascript
CODE:
{
  _id: ObjectId(...),
  site_id: 'cnn',
  zone_id: 'banner',
  ads: [
    { campaign_id: 'mercedes:c201204_sclass_4',
      ad_unit_id: 'banner23a',
      ecpm: 250 },
    { campaign_id: 'mercedes:c201204_sclass_4',
      ad_unit_id: 'banner23b',
      ecpm: 250 },
    { campaign_id: 'bmw:c201204_eclass_1',
      ad_unit_id: 'banner12',
      ecpm: 200 },
    ... ]
}

----------------------------------------

TITLE: $geoNear with the 'let' Option for Dynamic Point
DESCRIPTION: Demonstrates using the 'let' option to define a variable for the center point in a $geoNear operation, allowing for dynamic specification of the search center.

LANGUAGE: javascript
CODE:
db.places.aggregate(
[
   {
      "$geoNear":
      {
         "near":"$$pt",
         "distanceField":"distance",
         "maxDistance":2,
         "query":{"category":"Parks"},
         "includeLocs":"dist.location",
         "spherical":true
      }
   }
],
{
   "let":{ "pt": [ -73.99279, 40.719296 ] }
}
)

----------------------------------------

TITLE: Basic $sinh Syntax in MongoDB Aggregation
DESCRIPTION: Basic syntax for using the $sinh operator in MongoDB aggregation pipeline.

LANGUAGE: javascript
CODE:
{ $sinh: <expression> }

----------------------------------------

TITLE: Syntax for KeyVault.removeKeyAlternateName() in MongoDB
DESCRIPTION: Demonstrates the basic syntax for using the KeyVault.removeKeyAlternateName() method. It shows how to retrieve the KeyVault object and call the method with a UUID and key alternate name.

LANGUAGE: javascript
CODE:
keyVault = db.getMongo().getKeyVault()

keyVault.removeKeyAlternateName(
   UUID("<UUID string>"),
   "keyAltName"
)

----------------------------------------

TITLE: MongoDB Keyfile Format Examples in YAML
DESCRIPTION: Shows different formats for specifying keys in MongoDB keyfiles, including single key and multiple key sequence formats.

LANGUAGE: yaml
CODE:
my old secret key1

LANGUAGE: yaml
CODE:
- my old secret key1
- my new secret key2

----------------------------------------

TITLE: Creating Change Stream with Split Event Stage
DESCRIPTION: Setting up a change stream cursor with the split event stage and full document tracking.

LANGUAGE: javascript
CODE:
myChangeStreamCursor = db.myCollection.watch(
   [ { $changeStreamSplitLargeEvent: {} } ],
   { fullDocument: "required", fullDocumentBeforeChange: "required" }
)

----------------------------------------

TITLE: Configuring THP Settings
DESCRIPTION: Modifies the THP settings in the ktune.sh configuration file to set transparent huge pages to 'always'.

LANGUAGE: cfg
CODE:
set_transparent_hugepages always

----------------------------------------

TITLE: Using rs.syncFrom() in MongoDB Shell
DESCRIPTION: This snippet demonstrates how to use the rs.syncFrom() helper method in the MongoDB shell (mongosh) to specify a custom sync target for a replica set member. It takes a string argument in the format of 'hostname:port' to identify the target member.

LANGUAGE: javascript
CODE:
rs.syncFrom("myHost:27017");

----------------------------------------

TITLE: Scaled Stats Example
DESCRIPTION: Example showing how to retrieve collection statistics with kilobyte scaling.

LANGUAGE: javascript
CODE:
db.restaurants.stats( { scale : 1024 } )

----------------------------------------

TITLE: Scaled Stats Example
DESCRIPTION: Example showing how to retrieve collection statistics with kilobyte scaling.

LANGUAGE: javascript
CODE:
db.restaurants.stats( { scale : 1024 } )

----------------------------------------

TITLE: Defining listSearchIndexes Privilege in MongoDB
DESCRIPTION: This snippet shows the structure for defining the listSearchIndexes privilege action on a specific database or collection in MongoDB. It's used to grant the necessary permissions for listing search indexes.

LANGUAGE: javascript
CODE:
{
   resource: {
      db : <database>,
      collection: <collection>
   },
   actions: [ "listSearchIndexes" ]
}

----------------------------------------

TITLE: Querying Encrypted Documents in MongoDB with Python
DESCRIPTION: This snippet shows how to fetch an encrypted document from MongoDB using Python. It utilizes the find method to query the database based on an encrypted field.

LANGUAGE: python
CODE:
# start-find
# Your Python code here
# end-find

----------------------------------------

TITLE: Checking Feature Compatibility Version in MongoDB
DESCRIPTION: Command to verify the feature compatibility version of each replica set member. Should return version 4.4 before upgrading to 5.0.

LANGUAGE: javascript
CODE:
db.adminCommand( { getParameter: 1, featureCompatibilityVersion: 1 } )

----------------------------------------

TITLE: Manual Document Decryption in Node.js
DESCRIPTION: Shows the process of fetching and decrypting an encrypted document using the MongoDB Node.js driver.

LANGUAGE: javascript
CODE:
// Code reference: /includes/queryable-encryption/fundamentals/manual-encryption/manual-enc.js

----------------------------------------

TITLE: Adding Tag Range for New York Zip Codes in MongoDB Sharded Cluster
DESCRIPTION: This snippet demonstrates how to use sh.addTagRange() to create a tag range covering zip codes in New York State for a sharded collection with a compound shard key of {state: 1, zip: 1}.

LANGUAGE: javascript
CODE:
sh.addTagRange( "exampledb.collection",
               { state: "NY", zip: MinKey },
               { state: "NY", zip: MaxKey },
               "NY"
             )

----------------------------------------

TITLE: Creating Unique Index for MongoDB Keystore in Go
DESCRIPTION: Creates a unique index on the keyAltNames field in the encryption.__keyVault collection using Go MongoDB driver. This ensures uniqueness of key alternate names in the keystore.

LANGUAGE: go
CODE:
_, err = keyVaultColl.Indexes().CreateOne(
    context.TODO(),
    mongo.IndexModel{
        Keys: bson.D{{"keyAltNames", 1}},
        Options: options.Index().SetUnique(true).SetPartialFilterExpression(
            bson.D{{"keyAltNames", bson.D{{"$exists", true}}}},
        ),
    },
)

----------------------------------------

TITLE: Retrieving MongoDB Document with ObjectId
DESCRIPTION: Queries a document from the collection using findOne() to retrieve a document containing an ObjectId created from a hex string.

LANGUAGE: javascript
CODE:
db.objectIdentifierValuesFromHex.findOne( { _id: 0 } )

LANGUAGE: javascript
CODE:
{
   _id: 0,
   objectIdentifierValue: ObjectId("64c13ab08edf48a008793cac")
}

----------------------------------------

TITLE: Setting Query Settings with setQuerySettings Command
DESCRIPTION: Demonstrates how to configure query settings using the setQuerySettings command with index hints and query framework settings.

LANGUAGE: javascript
CODE:
db.adminCommand( {
   setQuerySettings: {
      find: "pizzaOrders",
      filter: {
         orderDate: { $gt: ISODate( "2024-01-20T00:00:00Z" ) }
      },
      sort: {
         totalNumber: 1
      },
      $db: "test"
   },
   settings: {
      indexHints: {
         ns: { db: "test", coll: "pizzaOrders" },
         allowedIndexes: [ "orderDate_1" ]
      },
      queryFramework: "classic",
      comment: "Index hint for orderDate_1 index to improve query performance"
   }
} )

----------------------------------------

TITLE: Starting a Specific MongoDB Stream Processor
DESCRIPTION: This example demonstrates how to start a specific Stream Processor named 'solarDemo' using the start() method.

LANGUAGE: sh
CODE:
sp.solarDemo.start()

----------------------------------------

TITLE: Setting Up Progress Monitor Configuration
DESCRIPTION: Configuration example for the progress monitor which ensures health checks remain responsive. Defines check intervals and timeout thresholds.

LANGUAGE: yaml
CODE:
progressMonitor:
  checkIntervalSecs: 60
  timeoutSecs: 300

----------------------------------------

TITLE: Finding Parks Within 2 Meters Using $geoNear
DESCRIPTION: Demonstrates using $geoNear to find documents with locations within 2 meters of a specified point and matching a specific category. It includes options for distance calculation, query filtering, and result formatting.

LANGUAGE: javascript
CODE:
db.places.aggregate([
   {
     $geoNear: {
        near: { type: "Point", coordinates: [ -73.99279 , 40.719296 ] },
        distanceField: "dist.calculated",
        maxDistance: 2,
        query: { category: "Parks" },
        includeLocs: "dist.location",
        spherical: true
     }
   }
])

----------------------------------------

TITLE: Verifying Feature Compatibility Version
DESCRIPTION: Command to check the featureCompatibilityVersion parameter on each shard replica set member and config server replica set member to ensure successful version downgrade.

LANGUAGE: javascript
CODE:
db.adminCommand( { getParameter: 1, featureCompatibilityVersion: 1 } )

----------------------------------------

TITLE: Calculating Tangent from Degrees Example
DESCRIPTION: Example document and aggregation pipeline showing how to calculate the tangent of an angle stored in degrees after converting to radians.

LANGUAGE: bash
CODE:
{
  "_id" : ObjectId("5c50782193f833234ba90d85"),
  "angle_a" : NumberDecimal("53.13010235415597870314438744090659"),
  "side_a" : NumberDecimal("3")
}

LANGUAGE: bash
CODE:
db.trigonometry.aggregate([
  {
    $addFields : {
      "side_b" : {
        $multiply : [
          { $tan : {$degreesToRadians : "$angle_a"} },
          "$side_a"
        ]
      }
    }
  }
])

----------------------------------------

TITLE: Configuring TCP Retries Setting in sysctl.conf
DESCRIPTION: This snippet shows the configuration line to add to the /etc/sysctl.conf file to permanently set the net.ipv4.tcp_retries2 value to 8. This change takes effect after system restart.

LANGUAGE: conf
CODE:
net.ipv4.tcp_retries2 = 8

----------------------------------------

TITLE: Querying All Documents in MongoDB Polymorphic Collection
DESCRIPTION: This query retrieves all documents from the 'athletes' collection, regardless of their varying structures. It demonstrates how MongoDB can handle polymorphic data in a single query.

LANGUAGE: javascript
CODE:
db.athletes.find()

----------------------------------------

TITLE: Executing DeleteMany Operation in C MongoDB Driver
DESCRIPTION: The mongoc_collection_delete_many() function in the C driver returns a boolean indicating success or failure. It also sets an error if there are invalid arguments or server/network issues.

LANGUAGE: c
CODE:
mongoc_collection_delete_many()

----------------------------------------

TITLE: Using $second in MongoDB Aggregation Pipeline
DESCRIPTION: Demonstrates an aggregation pipeline that uses $second along with other date operators to break down the components of a date field. It extracts year, month, day, hour, minutes, seconds, milliseconds, day of year, day of week, and week number.

LANGUAGE: javascript
CODE:
db.sales.aggregate(
   [
     {
       $project:
         {
           year: { $year: "$date" },
           month: { $month: "$date" },
           day: { $dayOfMonth: "$date" },
           hour: { $hour: "$date" },
           minutes: { $minute: "$date" },
           seconds: { $second: "$date" },
           milliseconds: { $millisecond: "$date" },
           dayOfYear: { $dayOfYear: "$date" },
           dayOfWeek: { $dayOfWeek: "$date" },
           week: { $week: "$date" }
         }
     }
   ]
)

----------------------------------------

TITLE: MongoDB Shell Authentication with User Document
DESCRIPTION: Shows advanced authentication using a user document with optional mechanism and digest settings.

LANGUAGE: javascript
CODE:
db.auth( {
      user: <username>,
      pwd: passwordPrompt(),   // Or "<cleartext password>",
      mechanism: <authentication mechanism>,
      digestPassword: <boolean>
   } )

----------------------------------------

TITLE: Example Output of Config Shard in MongoDB Sharded Cluster
DESCRIPTION: This snippet shows an example of the returned document when a config shard is present in the cluster. It includes details such as the host, state, and topology time of the config shard.

LANGUAGE: javascript
CODE:
{
  _id: "config",
  host: "configRepl/localhost:27018",
  state: 1,
  topologyTime: Timestamp({ t: 1732218671, i: 13 }),
  replSetConfigVersion: Long('-1')
}

----------------------------------------

TITLE: MongoDB $sum Example with Sales Data
DESCRIPTION: Demonstrates using $sum in a $group stage to calculate total sales amounts and counts grouped by date.

LANGUAGE: javascript
CODE:
db.sales.aggregate(
   [
     {
       $group:
         {
           _id: { day: { $dayOfYear: "$date"}, year: { $year: "$date" } },
           totalAmount: { $sum: { $multiply: [ "$price", "$quantity" ] } },
           count: { $sum: 1 }
         }
     }
   ]
)

----------------------------------------

TITLE: Installing MongoDB Node.js Dependencies
DESCRIPTION: NPM command to install the MongoDB Node.js driver and mongodb-client-encryption packages. The client encryption package must be version 2.8.0 or later and match the major version of the driver if using version 6.0.0+.

LANGUAGE: sh
CODE:
npm install

----------------------------------------

TITLE: Using $not with Regular Expression in MongoDB Query (JavaScript)
DESCRIPTION: Demonstrates using $not with a regular expression to select documents where the item field does not start with 'p'.

LANGUAGE: javascript
CODE:
db.inventory.find( { item: { $not: /^p.*/ } } )

----------------------------------------

TITLE: Moving MongoDB Collection to New Shard
DESCRIPTION: This command moves a specified collection to a new shard using the moveCollection command. It requires the database and collection names, as well as the target shard name.

LANGUAGE: javascript
CODE:
db.adminCommand(
   {
      moveCollection: "<database>.<collection>",
      toShard: "<new shard>",
   }
   )

----------------------------------------

TITLE: JSON Response from getKeyByAltName() in MongoDB
DESCRIPTION: This JSON snippet represents the structure of the data encryption key returned by the KeyVault.getKeyByAltName() method, including fields such as _id, keyMaterial, creationDate, and keyAltNames.

LANGUAGE: json
CODE:
{
    "_id" : UUID("b4b41b33-5c97-412e-a02b-743498346079"),
    "keyMaterial" : BinData(0,"PXRsLOAYxhzTS/mFQAI8486da7BwZgqA91UI7NKz/T/AjB0uJZxTvhvmQQsKbCJYsWVS/cp5Rqy/FUX2zZwxJOJmI3rosPhzV0OI5y1cuXhAlLWlj03CnTcOSRzE/YIrsCjMB0/NyiZ7MRWUYzLAEQnE30d947XCiiHIb8a0kt2SD0so8vZvSuP2n0Vtz4NYqnzF0CkhZSWFa2e2yA=="),
    "creationDate" : ISODate("2019-08-12T21:21:30.569Z"),
    "updateDate" : ISODate("2019-08-12T21:21:30.569Z"),
    "status" : 0,
    "version" : NumberLong(0),
    "masterKey" : {
        "provider" : "local"
    },
    "keyAltNames" : [
        "data-encryption-key"
    ]
}

----------------------------------------

TITLE: Reloading Package Database on Ubuntu
DESCRIPTION: This snippet reloads the package database on Ubuntu using the apt-get update command. This ensures that the system has the latest package information.

LANGUAGE: bash
CODE:
sudo apt-get update

----------------------------------------

TITLE: Configuring Data Key Options
DESCRIPTION: Specifies the configuration for the Customer Master Key (CMK) including key vault endpoint and key name/version.

LANGUAGE: java
CODE:
DataKeyOptions dataKeyOptions = new DataKeyOptions()
    .setMasterKey(new BsonDocument()
        .append("keyVaultEndpoint", new BsonString("<your key vault endpoint>"))
        .append("keyName", new BsonString("<your key name>"))
        .append("keyVersion", new BsonString("<your key version>")));

----------------------------------------

TITLE: Starting MongoDB Daemon with Multiple Arbiters Allowed
DESCRIPTION: This command starts the MongoDB daemon (mongod) with a custom parameter that allows multiple arbiters in a replica set. This can be useful in certain cluster configurations.

LANGUAGE: bash
CODE:
mongod --setParameter allowMultipleArbiters=true

----------------------------------------

TITLE: Inserting Game Scores into MongoDB Collection
DESCRIPTION: Shows how to insert multiple documents into a 'gamescores' collection using the insertMany() method. This data is used in subsequent examples to demonstrate $top usage.

LANGUAGE: javascript
CODE:
db.gamescores.insertMany([
   { playerId: "PlayerA", gameId: "G1", score: 31 },
   { playerId: "PlayerB", gameId: "G1", score: 33 },
   { playerId: "PlayerC", gameId: "G1", score: 99 },
   { playerId: "PlayerD", gameId: "G1", score: 1 },
   { playerId: "PlayerA", gameId: "G2", score: 10 },
   { playerId: "PlayerB", gameId: "G2", score: 14 },
   { playerId: "PlayerC", gameId: "G2", score: 66 },
   { playerId: "PlayerD", gameId: "G2", score: 80 }
])

----------------------------------------

TITLE: Using $tsSecond in MongoDB Change Stream
DESCRIPTION: Example demonstrating how to use $tsSecond in a change stream cursor to monitor collection changes and extract seconds from cluster time.

LANGUAGE: javascript
CODE:
cakeSalesCursor = db.cakeSales.watch( [
   {
      $addFields: {
         clusterTimeSeconds: { $tsSecond: "$clusterTime" }
      }
   }
] )

----------------------------------------

TITLE: MongoDB Compass Query Filter
DESCRIPTION: Shows the filter expression used in MongoDB Compass GUI to find documents where status equals 'A'.

LANGUAGE: javascript
CODE:
{ status: "A" }

----------------------------------------

TITLE: Basic $objectToArray Syntax Definition
DESCRIPTION: Shows the basic syntax for using the $objectToArray operator in MongoDB aggregation pipeline.

LANGUAGE: javascript
CODE:
{ $objectToArray: <object> }

----------------------------------------

TITLE: Chaining skip() and limit() in MongoDB Queries (JavaScript)
DESCRIPTION: These code snippets demonstrate that the order of chaining skip() and limit() methods in MongoDB queries does not affect the results. The server always applies the skip operation before the limit, regardless of the chaining order.

LANGUAGE: javascript
CODE:
db.myColl.find().sort({_id: 1}).skip(3).limit(6);

LANGUAGE: javascript
CODE:
db.myColl.find().sort({_id: 1}).limit(6).skip(3);

----------------------------------------

TITLE: Testing Pipeline Stage with $documents in MongoDB
DESCRIPTION: Demonstrates how to use $documents to create test data for a pipeline stage without creating test collections. The example uses $documents to provide input data for a $bucketAuto stage.

LANGUAGE: javascript
CODE:
db.aggregate( 
   [
      { $documents: [ { x: 10 }, { x: 2 }, { x: 5 } ] }, 
      { $bucketAuto: { groupBy: "$x", buckets: 4 } }
   ]
)

----------------------------------------

TITLE: Implementing Pagination with MongoDB skip()
DESCRIPTION: Function that demonstrates pagination using cursor.skip() method along with sort() and limit(). Takes page number and items per page as parameters to calculate offset.

LANGUAGE: javascript
CODE:
function printStudents(pageNumber, nPerPage) {
  print( "Page: " + pageNumber );
  db.students.find()
             .sort( { _id: 1 } )
             .skip( pageNumber > 0 ? ( ( pageNumber - 1 ) * nPerPage ) : 0 )
             .limit( nPerPage )
             .forEach( student => {
               print( student.name );
             } );
}

----------------------------------------

TITLE: Sharding Collections for Social Networking Site in Python
DESCRIPTION: Python commands to shard the social.user, social.wall, social.news, and social.post collections in MongoDB.

LANGUAGE: python
CODE:
>>> db.command('shardcollection', 'social.user', {
...     'key': {'_id': 1 } } )
{ "collectionsharded": "social.user", "ok": 1 }
>>> db.command('shardcollection', 'social.wall', {
...     'key': {'user_id': 1 } } )
{ "collectionsharded": "social.wall", "ok": 1 }
>>> db.command('shardcollection', 'social.news', {
...     'key': {'user_id': 1 } } )
{ "collectionsharded": "social.news", "ok": 1 }
>>> db.command('shardcollection', 'social.post', {
...     'key': {'_id': 1 } } )
{ "collectionsharded": "social.post", "ok": 1 }

----------------------------------------

TITLE: Configuring Encryption Options
DESCRIPTION: Creates the queryable encryption options object using the generated local key and specifies the key vault namespace.

LANGUAGE: javascript
CODE:
var autoEncryptionOpts = {
"keyVaultNamespace" : "encryption.__dataKeys",
"kmsProviders" : {
   "local" : {
      "key" : BinData(0, TEST_LOCAL_KEY)
   }
}
}

----------------------------------------

TITLE: Using passwordPrompt() with db.auth() in MongoDB
DESCRIPTION: Shows how to use passwordPrompt() with the db.auth() method for secure authentication.

LANGUAGE: javascript
CODE:
db.auth("user123")

----------------------------------------

TITLE: Querying MongoDB with Projection in JavaScript Shell
DESCRIPTION: This snippet shows how to query the 'inventory' collection with a status filter and project specific fields using the MongoDB shell.

LANGUAGE: javascript
CODE:
db.inventory.find( { status: "A" }, { item: 1, status: 1, _id: 0 } )

----------------------------------------

TITLE: Listing Unsharded Collections on a Shard in MongoDB
DESCRIPTION: This complex aggregation pipeline lists all unsharded collections on a specific shard that needs to be removed, excluding system collections and certain special namespaces.

LANGUAGE: javascript
CODE:
use admin

db.aggregate([
      { $listClusterCatalog: { shards: true } },
      { $match: { 
            $and: [
                { sharded: false },
                { shards: '<shard_to_remove>' },
                { type: { $nin: ["timeseries","view"] } },
                { ns: { $not: { $regex: "^enxcol_\..*(\.esc|\.ecc|\.ecoc|\.ecoc\.compact)$" }}},
                { $or: [{ns: {$not: { $regex: "\.system\." }}}, {ns: {$regex: "\.system\.buckets\."}}]},
                { db: { $ne: 'config' } },
                { db: { $ne: 'admin' } }
            ]}},
      { $project: {
         _id: 0,
         ns: {
             $cond: [
                 "$options.timeseries",
                 {
                     $replaceAll: {
                         input: "$ns",
                         find: ".system.buckets",
                         replacement: ""
                     }
                 },
                 "$ns"
             ]
         }
   }}
])

----------------------------------------

TITLE: Creating Unique Index for MongoDB Encryption Key Vault in JavaScript (Shell)
DESCRIPTION: This snippet demonstrates how to create a unique index on the 'keyAltNames' field in the 'encryption.__keyVault' namespace using the MongoDB shell. It ensures that each key alternate name is unique within the key vault.

LANGUAGE: javascript
CODE:
db.getSiblingDB("encryption").__keyVault.createIndex(
  { "keyAltNames": 1 },
  { unique: true, partialFilterExpression: { keyAltNames: { $exists: true } } }
);

----------------------------------------

TITLE: Common Client Operations Lock Types
DESCRIPTION: Lock types taken by common MongoDB operations at database and collection levels for document-level locking storage engines

LANGUAGE: mongodb
CODE:
Query: Database(r) Collection(r)
Insert: Database(w) Collection(w)
Remove: Database(w) Collection(w)
Update: Database(w) Collection(w)
Aggregation: Database(r) Collection(r)
Create Index: Collection(W)
List Collections: Database(r)
Map-reduce: Database(W,R) Collection(w,r)

----------------------------------------

TITLE: Connecting to MongoDB using Shell
DESCRIPTION: This snippet shows how to connect to a MongoDB instance using the mongosh shell. It includes authentication details and specifies the API version.

LANGUAGE: bash
CODE:
mongosh "mongodb://@mongodb0.example.com:27017/?authSource=admin" --apiVersion 1 --username myDatabaseUser

----------------------------------------

TITLE: Inserting Movie Document with Computed Pattern in MongoDB
DESCRIPTION: This snippet demonstrates inserting a movie document into the 'movie' collection, showcasing the computed pattern with a 'total_views' field that calculates the total number of views across all theaters.

LANGUAGE: javascript
CODE:
db.movie.insertOne(
  {
    _id: 1,
    title: "Titanic",
    year: 1997,
    director: "James Cameron",
    runtime: 194,
    distributor: "Paramount Pictures",
    languages: [ "English" ],
    total_views: 3500
  }
)

----------------------------------------

TITLE: Enabling THP Service on Boot
DESCRIPTION: Command to enable the THP service to run automatically on system startup.

LANGUAGE: sh
CODE:
sudo systemctl enable enable-transparent-huge-pages

----------------------------------------

TITLE: Creating Wildcard Index Implementation in MongoDB
DESCRIPTION: Specific example of creating a wildcard index on all fields in the artwork collection.

LANGUAGE: javascript
CODE:
db.artwork.createIndex( { "$**" : 1 } )

----------------------------------------

TITLE: Setting MongoDB Write Concern - Practical Example
DESCRIPTION: Shows a practical example of setting write concern where two MongoDB instances must acknowledge writes with a 1-second timeout period.

LANGUAGE: javascript
CODE:
db.getMongo().setWriteConcern( { w: 2, wtimeout: 1000 } )

----------------------------------------

TITLE: Specifying Coordinates Using Array in MongoDB
DESCRIPTION: Demonstrates the preferred method of specifying coordinate pairs using an array format. When specifying longitude and latitude, longitude must be listed first, followed by latitude.

LANGUAGE: javascript
CODE:
<field>: [ <x>, <y> ]

LANGUAGE: javascript
CODE:
<field>: [<longitude>, <latitude> ]

----------------------------------------

TITLE: Setting Up Automatic Encryption Options in C# for MongoDB
DESCRIPTION: This code snippet demonstrates how to configure automatic encryption options for MongoDB using the C# driver. It includes setup for the key vault namespace, KMS provider, and schema map.

LANGUAGE: csharp
CODE:
var autoEncryptionOptions = new AutoEncryptionOptions(
    keyVaultNamespace: "admin.datakeys",
    kmsProviders: kmsProviders,
    schemaMap: schemaMap,
    extraOptions: extraOptions
);

----------------------------------------

TITLE: Setting Feature Compatibility Version in MongoDB
DESCRIPTION: This command sets the feature compatibility version of a MongoDB instance to 7.0. It's run on the primary node and requires a majority of data-bearing members to be available.

LANGUAGE: javascript
CODE:
db.adminCommand( { setFeatureCompatibilityVersion: "7.0" } )

----------------------------------------

TITLE: Modifying Change Stream Output - Java
DESCRIPTION: Example showing how to modify change stream output using pipeline stages in Java

LANGUAGE: java
CODE:
List<Bson> pipeline = singletonList(
    Aggregates.match(Filters.or(
        Document.parse("{'fullDocument.username': 'alice'}"),
        Filters.in("operationType", asList("delete"))
    ))
);

MongoCursor<Document> cursor = collection.watch(pipeline).iterator();

----------------------------------------

TITLE: RST Directives and Substitutions for MongoDB Installation Documentation
DESCRIPTION: ReStructuredText directives and substitutions used to format the installation documentation, including page metadata, contents configuration, and text replacement definitions.

LANGUAGE: rst
CODE:
.. _install-enterprise-macos:

.. meta::
   :keywords: on-prem

===================================
Install MongoDB Enterprise on macOS
===================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: twocols

.. |arrow| unicode:: U+27A4
.. |edition| replace:: Enterprise
.. |distro-name| replace:: macOS
.. |package-manager| replace:: ``brew``
.. |executable-name| replace:: ``mongod``
.. |mdb-download-link| replace:: `MongoDB Download Center <https://www.mongodb.com/try/download/enterprise?tck=docs_server>`__

----------------------------------------

TITLE: Analyzing MongoDB Collection Characteristics in JSON Format
DESCRIPTION: This JSON structure provides key characteristics of a MongoDB collection or query result. It includes metrics such as total document count, average document size, sampling information, uniqueness, value distribution, and monotonicity analysis.

LANGUAGE: json
CODE:
{
   "keyCharacteristics": {
     "numDocsTotal" : 9039,
     "avgDocSizeBytes" : 153,
     "numDocsSampled" : 9039,
     "isUnique" : false,
     "numDistinctValues" : 30,
     "mostCommonValues" : [
         {
           "value" : {
               "lastName" : "Smith"
           },
           "frequency" : 1013
         },
         {
           "value" : {
               "lastName" : "Johnson"
           },
           "frequency" : 984
         },
         {
           "value" : {
               "lastName" : "Jones"
           },
           "frequency" : 962
         },
         {
           "value" : {
               "lastName" : "Brown"
           },
           "frequency" : 925
         },
         {
           "value" : {
               "lastName" : "Davies"
           },
           "frequency" : 852
         }
     ],
     "monotonicity" : {
       "recordIdCorrelationCoefficient" : 0.0771959161,
       "type" : "not monotonic"
   },
 }
}

----------------------------------------

TITLE: Configuring MongoDB with SSL for X.509 Membership Authentication (Config File)
DESCRIPTION: YAML configuration file settings to configure a MongoDB instance to use X.509 certificates for cluster membership authentication with SSL (deprecated). Includes settings for security, network, SSL mode, certificate files, and binding IP addresses.

LANGUAGE: yaml
CODE:
security:
   clusterAuthMode: x509
net:
   ssl:
      mode: requireSSL
      PEMKeyFile: <path to TLS/SSL certificate and key PEM file>
      CAFile: <path to root CA PEM file>
      clusterFile: <path to X.509 membership certificate and key PEM file>
   bindIp: localhost,<hostname(s)|ip address(es)>

----------------------------------------

TITLE: Connecting to MongoDB Atlas with AWS IAM Authentication
DESCRIPTION: This code snippet demonstrates the connection string format for connecting to a MongoDB Atlas cluster using AWS IAM authentication. It includes placeholders for the AWS access key ID and secret access key, and specifies the external authentication source and AWS authentication mechanism.

LANGUAGE: bash
CODE:
mongodb+srv://<aws access key id>:<aws secret access key>@cluster0.example.com/testdb?authSource=$external&authMechanism=MONGODB-AWS

----------------------------------------

TITLE: MongoDB Connection String for Various Drivers
DESCRIPTION: This connection string is used for multiple drivers including Python, Java, Node.js, PHP, Perl, Ruby, Scala, Compass, C#, Go, and Rust. It includes authentication credentials, host, authentication source, and replica set name.

LANGUAGE: bash
CODE:
mongodb+srv://myDatabaseUser:D1fficultP%40ssw0rd@mongodb0.example.com/?authSource=admin&replicaSet=myRepl

----------------------------------------

TITLE: Creating MongoClient Instance for Queryable Encryption in Node.js
DESCRIPTION: This snippet demonstrates how to create a MongoClient instance in Node.js for queryable encryption. It sets up the client with the required encryption settings.

LANGUAGE: javascript
CODE:
const client = new MongoClient("<Your MongoDB URI>", {
  autoEncryption: {
    keyVaultNamespace: "encryption.__keyVault",
    kmsProviders: kmsProviders,
  },
});

----------------------------------------

TITLE: Specifying Azure Key Information
DESCRIPTION: Configures the data key options including the key name and key vault URL for creating data encryption keys. These settings determine how the encryption keys are managed in Azure Key Vault.



----------------------------------------

TITLE: Missing _id Index Error Message
DESCRIPTION: Error message format when a collection is missing the required _id index.

LANGUAGE: none
CODE:
Collection Error: lack of _id index on collection: <collectionName>

----------------------------------------

TITLE: Resharding with Same Shard Key in MongoDB
DESCRIPTION: Example showing how to reshard a collection using the same shard key with forced redistribution.

LANGUAGE: javascript
CODE:
sh.reshardCollection( 
  "sales.orders", 
  { order_id: 1 }, 
  { forceRedistribution: true } 
)

----------------------------------------

TITLE: Configuring Timestamp Field and Partition in MongoDB
DESCRIPTION: These code snippets show different ways to configure the 'field' and 'partitionByFields' options in MongoDB, using timestamp-related fields. They demonstrate partitioning by the full timestamp, by hours within the timestamp, and using a nested timestamp field.

LANGUAGE: mongodb
CODE:
field: "timestamp", partitionByFields: ["timestamp"]

LANGUAGE: mongodb
CODE:
field: "timestamp", partitionByFields: ["timestamp.hours"]

LANGUAGE: mongodb
CODE:
field: "timestamp.hours", partitionByFields: ["timestamp"]

----------------------------------------

TITLE: Inserting Sample Data for $bitOr Examples in MongoDB
DESCRIPTION: Inserts sample documents into the 'switches' collection to be used in subsequent $bitOr examples. Each document contains integer values for fields 'a' and 'b'.

LANGUAGE: javascript
CODE:
db.switches.insertMany( [
    { _id: 0, a: NumberInt(0), b: NumberInt(127) },
    { _id: 1, a: NumberInt(2), b: NumberInt(3) },
    { _id: 2, a: NumberInt(3), b: NumberInt(5) }
] )

----------------------------------------

TITLE: Copying Replica Configuration in MongoDB
DESCRIPTION: This snippet shows how to copy the current replica set configuration into a variable for modification.

LANGUAGE: javascript
CODE:
cfg = rs.config()

----------------------------------------

TITLE: MongoDB Shell Query Projection
DESCRIPTION: Demonstrates how to use projection in MongoDB shell to return only specific fields (item and status) for documents where status is 'A'

LANGUAGE: javascript
CODE:
db.inventory.find( { status: "A" }, { item: 1, status: 1 } )

----------------------------------------

TITLE: Creating Zone Range with Compound Shard Key
DESCRIPTION: Creates a zone range for a collection with compound shard key {a: 1, b: 1}

LANGUAGE: javascript
CODE:
sh.updateZoneKeyRange(
   "exampledb.collection",
   { a : 1, b : 1 },
   { a : 10, b : 10 },
   "alpha"
)

----------------------------------------

TITLE: Configuring Sync Target Using rs.syncFrom() Helper
DESCRIPTION: Uses the rs.syncFrom() helper method in mongosh to manually specify a sync target for a secondary node in a replica set. The method requires the hostname and optional port of the desired sync source.

LANGUAGE: javascript
CODE:
rs.syncFrom("hostname<:port>");

----------------------------------------

TITLE: Counting Documents with Read Concern in MongoDB
DESCRIPTION: Example of using the count command with a read concern of 'majority' to count documents in the 'restaurants' collection with a specific query.

LANGUAGE: javascript
CODE:
db.runCommand(
   {
     count: "restaurants",
     query: { rating: { $gte: 4 } },
     readConcern: { level: "majority" }
   }
)

----------------------------------------

TITLE: Setting Change Stream Options in MongoDB
DESCRIPTION: Command to set changeStreamOptions cluster parameter on the admin database. This allows configuring pre- and post-image retention settings for change streams.

LANGUAGE: javascript
CODE:
db.adminCommand( { setClusterParameter: { changeStreamOptions: <value> } } )

----------------------------------------

TITLE: Creating Indexes for Wall and News Collections in Python
DESCRIPTION: Python code to create indexes on the user_id and month fields in the social.news and social.wall collections.

LANGUAGE: python
CODE:
>>> for collection in (db.social.news, db.social.wall):
...     collection.ensure_index([
...         ('user_id', 1),
...         ('month', -1)])

----------------------------------------

TITLE: Creating Customer Master Key for CSFLE in Python
DESCRIPTION: This code snippet shows how to create a 96-byte Customer Master Key and save it to the filesystem as 'master-key.txt' using Python. It uses the os module to generate random bytes.

LANGUAGE: python
CODE:
import os

local_master_key = os.urandom(96)
with open("master-key.txt", "wb") as f:
    f.write(local_master_key)

----------------------------------------

TITLE: Defining Hashed Zone Range for MongoDB Sharded Cluster
DESCRIPTION: This example shows how to define a zone range for a collection with a hashed shard key. The range is defined using the hashed values of the shard key field 'x'.

LANGUAGE: javascript
CODE:
{ "x": NumberLong("4470791281878691347") } --> { "x": NumberLong("7766103514953448109") } // Zone A

----------------------------------------

TITLE: Generating Data Encryption Key in C#
DESCRIPTION: This code shows how to generate a Data Encryption Key (DEK) using the AWS KMS in C#. It uses the ClientEncryption instance to create the DEK with the specified options.

LANGUAGE: csharp
CODE:
var dataKeyId = clientEncryption.CreateDataKey("aws", dataKeyOptions);
var base64DataKeyId = Convert.ToBase64String(dataKeyId.Data);
Console.WriteLine($"DataKeyId [base64]: {base64DataKeyId}");

----------------------------------------

TITLE: Inserting Sample Data into MongoDB Collection
DESCRIPTION: Inserts sample documents into a MongoDB collection named 'orders' for demonstrating $toInt usage.

LANGUAGE: javascript
CODE:
db.orders.insertMany( [
   { _id: 1, item: "apple", qty: "5", price: 10 },
   { _id: 2, item: "pie", qty: "10", price: NumberDecimal("20.0") },
   { _id: 3, item: "ice cream", qty: "2", price: "4.99" },
   { _id: 4, item: "almonds" ,  qty: "5", price: 5 }
] )

----------------------------------------

TITLE: Basic Borough Sort Query
DESCRIPTION: Simple sort query on the borough field in ascending order.

LANGUAGE: javascript
CODE:
db.restaurants.find().sort( { "borough": 1 } )

----------------------------------------

TITLE: Verifying MongoDB Config Server Transition
DESCRIPTION: This command checks the status of the transition to a dedicated config server. It should be called repeatedly until the state is 'completed'.

LANGUAGE: javascript
CODE:
db.adminCommand( { 
   transitionToDedicatedConfigServer: 1
} )

----------------------------------------

TITLE: Creating Unique and Sparse Indexes in MongoDB
DESCRIPTION: Creates two indexes on the score field with the same key pattern - one unique index and one unique sparse index. Demonstrates the MongoDB 5.0+ capability to have multiple unique indexes with different sparse settings.

LANGUAGE: javascript
CODE:
db.scoreHistory.createIndex( { score : 1 }, { name: "unique_index", unique: true } )
db.scoreHistory.createIndex( { score : 1 }, { name: "unique_sparse_index", unique: true, sparse: true } )

----------------------------------------

TITLE: Configuring MongoDB Auditing with Console Output in YAML
DESCRIPTION: YAML configuration for enabling MongoDB auditing with output to the console.

LANGUAGE: yaml
CODE:
storage:
   dbPath: data/db
auditLog:
   destination: console

----------------------------------------

TITLE: Creating Replica Set with mtools in Bash
DESCRIPTION: Command to create a three-node replica set using mtools. This is an optional step for setting up the MongoDB environment for the tutorial.

LANGUAGE: bash
CODE:
mlaunch init --replicaset --nodes 3

----------------------------------------

TITLE: Using passwordPrompt() with db.createUser() in MongoDB
DESCRIPTION: Demonstrates how to use passwordPrompt() when creating a new user to avoid specifying the password in cleartext.

LANGUAGE: javascript
CODE:
db.createUser( { 
   user:"user123",
   pwd: passwordPrompt(),   // Instead of specifying the password in cleartext
   roles:[ "readWrite" ]
} )

----------------------------------------

TITLE: MongoDB Shard Collection Index Pattern
DESCRIPTION: Shows the required index pattern for shardCollection command with shard key {a.x: 1, b: 'hashed'}.

LANGUAGE: mongodb
CODE:
{ a.x: 1, b: "hashed", ... }

----------------------------------------

TITLE: Checking Replica Set Status
DESCRIPTION: Command to check replica set member status before upgrade.

LANGUAGE: javascript
CODE:
db.adminCommand( { replSetGetStatus: 1 } )

----------------------------------------

TITLE: Creating Encrypted Collection for MongoDB Queryable Encryption
DESCRIPTION: This code demonstrates how to create an encrypted collection using the generated data encryption key. It specifies the encryption schema for the 'encryptedField' field using the AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic algorithm.

LANGUAGE: javascript
CODE:
const encryptedFields = {
  fields: [{
    path: "encryptedField",
    bsonType: "string",
    keyId: dataKeyId,
    queries: { "queryType": "equality" }
  }]
};

const database = client.db("test");
await database.createCollection("coll", {
  encryptedFields: encryptedFields
});

console.log("Created encrypted collection!");

----------------------------------------

TITLE: Simple Document Conversion Example
DESCRIPTION: Demonstrates converting a simple document with two fields into an array format.

LANGUAGE: json
CODE:
{ $objectToArray: { item: "foo", qty: 25 } }

----------------------------------------

TITLE: Inserting Sample Log Data into MongoDB Collection
DESCRIPTION: Inserts multiple log entries with varying message types and timestamps into the log collection using insertMany(). Each document contains message, type, and time fields.

LANGUAGE: javascript
CODE:
db.log.insertMany( [ 
   {
      message: "system start",
      type: "startup",
      time: 1711403508
   },
   {
      message: "user login attempt",
      type: "info",
      time: 1711403907
   },
   {
      message: "user login fail",
      type: "warning",
      time: 1711404209
   },
   {
      message: "user login success",
      type: "info",
      time: 1711404367
   },
   {
      message: "user logout",
      type: "info",
      time: 1711404555
   }
] )

----------------------------------------

TITLE: Inserting Sample Data for MongoDB $log Example
DESCRIPTION: This snippet demonstrates how to insert sample data into a MongoDB collection named 'integers' for use in a $log example.

LANGUAGE: javascript
CODE:
db.integers.insertMany( [
   { _id: 1, int: 5 },
   { _id: 2, int: 2 },
   { _id: 3, int: 23 },
   { _id: 4, int: 10 }
] )

----------------------------------------

TITLE: Querying Leaderboard with Compound Sort
DESCRIPTION: Demonstrates various sort patterns using the compound index, including supported and unsupported queries.

LANGUAGE: javascript
CODE:
db.leaderboard.find().sort( { score: -1, username: 1 } )

// Reverse order query
db.leaderboard.find().sort( { score: 1, username: -1 } )

// Unsupported queries
db.leaderboard.find().sort( { score: 1, username: 1 } )
db.leaderboard.find().sort( { username: 1, score: -1, } )

----------------------------------------

TITLE: Querying with $minDistance in MongoDB $near Geospatial Query
DESCRIPTION: Example of using $minDistance with a $near query in MongoDB. This snippet demonstrates how to filter results to include only documents that are at least 1000 meters away from a specified point.

LANGUAGE: javascript
CODE:
db.places.find(
   {
     location: {
       $near: {
         $geometry: { type: "Point", coordinates: [ -73.9667, 40.78 ] },
         $minDistance: 1000,
         $maxDistance: 5000
       }
     }
   }
)

----------------------------------------

TITLE: Moving MongoDB Collection Between Shards using JavaScript
DESCRIPTION: This code executes an admin command to move the 'inventory' collection from the 'app' database to the 'shard02' shard. It utilizes the moveCollection command, which is part of MongoDB's sharding operations.

LANGUAGE: javascript
CODE:
db.adminCommand( 
  { 
    moveCollection: "app.inventory",
    toShard: "shard02"
  } 
)

----------------------------------------

TITLE: Getting Global Log Level in MongoDB
DESCRIPTION: This example shows how to retrieve the current default logging level verbosity for a MongoDB deployment using the adminCommand.

LANGUAGE: javascript
CODE:
db.adminCommand({getParameter: 1, logLevel: 1});

----------------------------------------

TITLE: Checking Linux Distribution Type Using grep
DESCRIPTION: Command to verify the Linux distribution by searching for the NAME field in system release files. Used to confirm if system is running Amazon Linux or Amazon Linux AMI before MongoDB installation.

LANGUAGE: shell
CODE:
grep ^NAME  /etc/*release

----------------------------------------

TITLE: Specifying OR Conditions in MongoDB Query
DESCRIPTION: This example demonstrates how to use the $or operator to specify alternative conditions in a query.

LANGUAGE: javascript
CODE:
db.inventory.find({ $or: [ { status: 'A' }, { qty: { $lt: 30 } } ] })

----------------------------------------

TITLE: Launch MongoDB Replica Set
DESCRIPTION: Command to initialize a MongoDB replica set with three nodes using mtools.

LANGUAGE: sh
CODE:
mlaunch init --replicaset --nodes 3

----------------------------------------

TITLE: Setting DNS Health Monitoring Intensity Using setParameter Command in MongoDB
DESCRIPTION: This snippet demonstrates how to use the setParameter command in a mongosh session to set the DNS health monitoring intensity to 'critical' on a running mongos instance.

LANGUAGE: javascript
CODE:
db.adminCommand( 
  {
      setParameter: 1, 
      healthMonitoringIntensities: { values: [ { type: "dns", intensity: "critical" } ] } } )
  }
)

----------------------------------------

TITLE: Encrypting Fields and Inserting Document in MongoDB (C#)
DESCRIPTION: This C# code snippet demonstrates the process of manually encrypting fields in a MongoDB document using specified encryption algorithms and inserting the encrypted document into the database.

LANGUAGE: csharp
CODE:
// Code snippet not provided in the input text

----------------------------------------

TITLE: Specifying AWS CMK Information in Java
DESCRIPTION: This code snippet shows how to specify the AWS Customer Master Key (CMK) information in Java. It sets the key ARN and the AWS region for the CMK.

LANGUAGE: java
CODE:
DataKeyOptions dataKeyOptions = new DataKeyOptions()
    .masterKey(new BsonDocument()
        .append("key", "<Your AWS ARN>")
        .append("region", "<Your AWS Region>"));

----------------------------------------

TITLE: Setting Default Verbosity Level in MongoDB
DESCRIPTION: This example sets the default verbosity level for all components to 1. It omits the component parameter to apply the setting globally.

LANGUAGE: javascript
CODE:
db.setLogLevel(1)

----------------------------------------

TITLE: Inserting Contact Documents with Legacy Coordinates in MongoDB
DESCRIPTION: Creates a contacts collection by inserting multiple documents containing name, phone, and address fields. The address field uses legacy coordinate pairs for geospatial data storage in [longitude, latitude] format.

LANGUAGE: javascript
CODE:
db.contacts.insertMany( [
   {
      name: "Evander Otylia",
      phone: "202-555-0193",
      address: [ 55.5, 42.3 ]
   },
   {
      name: "Georgine Lestaw",
      phone: "714-555-0107",
      address: [ -74, 44.74 ]
   }
] )

----------------------------------------

TITLE: Specifying AWS CMK Information in C#
DESCRIPTION: This snippet illustrates how to specify the AWS Customer Master Key (CMK) information in C#. It sets the key ARN and the AWS region for the CMK.

LANGUAGE: csharp
CODE:
var dataKeyOptions = new DataKeyOptions(
    masterKey: new BsonDocument
    {
        { "key", "<Your AWS ARN>" },
        { "region", "<Your AWS Region>" }
    }
);

----------------------------------------

TITLE: Querying MongoDB Documents Using Role Set Intersection
DESCRIPTION: Uses the $expr operator with $setIntersection to find documents where allowedRoles array has at least one matching value from USER_ROLES.role. The query returns documents only when there is a non-empty intersection between the two role arrays.

LANGUAGE: javascript
CODE:
db.budget.find( {
   $expr: {
      $not: {
         $eq: [ { $setIntersection: [ "$allowedRoles", "$$USER_ROLES.role" ] }, [] ]
      }
   }
} )

----------------------------------------

TITLE: Retrieving a Document with ObjectId from Base64 in MongoDB
DESCRIPTION: This example shows how to retrieve a document containing an ObjectId created from a base64 string, demonstrating how the ObjectId appears in the output.

LANGUAGE: javascript
CODE:
db.objectIdentifierValuesFromBase64.findOne( { _id: 0 } )

LANGUAGE: javascript
CODE:
{
   _id: 0,
   objectIdentifierValue: ObjectId("48656c6c6f20576f726c6421")
}

----------------------------------------

TITLE: Configuring Config Server Replica Set - YAML Configuration
DESCRIPTION: YAML configuration for setting up config server replica set members with replication and sharding options.

LANGUAGE: yaml
CODE:
replication:
  replSetName: configReplSet
sharding:
  clusterRole: configsvr
net:
  bindIp: localhost,<ipaddress>

----------------------------------------

TITLE: Unlocking MongoDB Instance for Writes
DESCRIPTION: This snippet illustrates how to completely unlock a MongoDB instance for writes by running the fsyncUnlock command multiple times until the lock count reaches zero.

LANGUAGE: javascript
CODE:
db.adminCommand( { fsyncUnlock: 1 } )

----------------------------------------

TITLE: Defining $dayOfMonth Operator in MongoDB Aggregation
DESCRIPTION: Demonstrates the syntax for using the $dayOfMonth operator in MongoDB aggregation. It returns the day of the month for a date as a number between 1 and 31.

LANGUAGE: javascript
CODE:
{ $dayOfMonth: <dateExpression> }

----------------------------------------

TITLE: MongoDB getMore Command Syntax
DESCRIPTION: Basic syntax for the getMore command showing the required and optional fields including cursor identifier, collection name, batch size, maxTimeMS timeout, and comment.

LANGUAGE: javascript
CODE:
db.runCommand(
   {
      getMore: <long>,
      collection: <string>,
      batchSize: <int>,
      maxTimeMS: <int>,
      comment: <any>
   }
)

----------------------------------------

TITLE: Delete Key Response - MongoDB JSON
DESCRIPTION: Example of the successful response returned when deleting a key from the key vault.

LANGUAGE: json
CODE:
{ "acknowledged" : true, "deletedCount" : 1 }

----------------------------------------

TITLE: Helper Functions for Item Display in Python
DESCRIPTION: Defines Python helper functions for processing and displaying item data from the character document.

LANGUAGE: python
CODE:
def get_item_index(inventory):
    '''Given an inventory attribute, recursively build up an item
    index (including all items contained within other items)
    '''

    result = {}
    for item in inventory:
        result[item['_id']] = item
        if 'inventory' in item:
            result.update(get_item_index(item['inventory]))
    return result

def describe_item(item):
    '''Add a 'description' field to the given item'''

    result = dict(item)
    if item['bonus']:
        description = '%+d %s' % (item['bonus'], item['name'])
    else:
        description = item['name']
    result['description'] = description
    return result

def get_armor_for_display(character, item_index):
    '''Given a character document, return an 'armor' value
    suitable for display'''

    result = dict(head=[], hands=[], feet=[], body=[])
    for piece in character['armor']:
        item = describe_item(item_index[piece['id']])
        result[piece['region']].append(item)
    return result

----------------------------------------

TITLE: Updating Document Using $inc Operator
DESCRIPTION: Example showing how to use $inc to decrease quantity by 2 and increase metrics.orders by 1.

LANGUAGE: javascript
CODE:
db.products.updateOne(
   { sku: "abc123" },
   { $inc: { quantity: -2, "metrics.orders": 1 } }
)

----------------------------------------

TITLE: Inserting Sample Data into MongoDB Collection
DESCRIPTION: Inserts multiple documents into the 'orders' collection, containing various data types for the 'price' field to demonstrate $toDecimal conversion.

LANGUAGE: javascript
CODE:
db.orders.insertMany( [
   { _id: 1, item: "apple", qty: 5, price: 10 },
   { _id: 2, item: "pie", qty: 10, price: NumberDecimal("20.0") },
   { _id: 3, item: "ice cream", qty: 2, price: "4.99" },
   { _id: 4, item: "almonds",  qty: 5, price: 5 }
] )

----------------------------------------

TITLE: Checking for newlyAdded Field in Replica Configuration
DESCRIPTION: MongoDB shell command to verify no nodes have a newlyAdded field in their replica set configuration, which must be checked before downgrading the feature compatibility version.

LANGUAGE: javascript
CODE:
use local
db.system.replset.find( { "members.newlyAdded" : { $exists : true } } );

----------------------------------------

TITLE: Modifying MongoDB View - Drop and Recreate Method
DESCRIPTION: Demonstrates modifying a view by first dropping it and then recreating it with new criteria (quantity <= 10).

LANGUAGE: javascript
CODE:
db.lowStock.drop()

db.createView(
   "lowStock",
   "products",
   [ { $match: { quantity: { $lte: 10 } } } ]
)

----------------------------------------

TITLE: Setting Active Fault Duration via setParameter Command in MongoDB
DESCRIPTION: This snippet demonstrates how to use the setParameter command in a mongosh session to set the 'activeFaultDurationSecs' parameter to 300 seconds on a running mongos instance.

LANGUAGE: javascript
CODE:
db.adminCommand( 
  {
      setParameter: 1, 
      activeFaultDurationSecs: 300 
  }
)

----------------------------------------

TITLE: Loading Environment Variables with direnv in Bash
DESCRIPTION: Command to load environment variables defined in the .envrc file into the current environment. This step is necessary for configuring the application with the required credentials.

LANGUAGE: bash
CODE:
direnv allow

----------------------------------------

TITLE: Executing db.hello() Method in MongoDB Shell
DESCRIPTION: This snippet demonstrates how to call the db.hello() method in the MongoDB shell. The method returns a document describing the role of the mongod instance, including information about replica set status if applicable.

LANGUAGE: javascript
CODE:
db.hello()

----------------------------------------

TITLE: MongoDB $collStats QueryExecStats Example
DESCRIPTION: Shows how to retrieve query execution statistics for a collection using $collStats.

LANGUAGE: javascript
CODE:
db.matrices.aggregate( [ { $collStats: { queryExecStats: { } } } ] )

----------------------------------------

TITLE: Complex MongoDB Query with ESR Implementation
DESCRIPTION: Complete example showing a query that combines equality, sort, and range operations with corresponding optimal index structure.

LANGUAGE: javascript
CODE:
db.cars.find(
   {
       manufacturer: 'Ford',
       cost: { $gt: 15000 }
   } ).sort( { model: 1 } )

LANGUAGE: javascript
CODE:
{ manufacturer: 1, model: 1, cost: 1 }

----------------------------------------

TITLE: Example Active Directory User Objects
DESCRIPTION: Shows sample user objects in Active Directory with attributes like distinguished name, userPrincipalName, and group memberships.

LANGUAGE: bash
CODE:
dn:CN=bob,CN=Users,DC=marketing,DC=example,DC=com
userPrincipalName: bob@marketing.example.com
memberOf: CN=marketing,CN=Users,DC=example,DC=com

dn:CN=alice,CN=Users,DC=engineering,DC=example,DC=com
userPrincipalName: alice@engineering.example.com
memberOf: CN=web,CN=Users,DC=example,DC=com
memberOf: CN=PrimaryApplication,CN=Users,DC=example,DC=com

dn:CN=sam,CN=Users,DC=dba,DC=example,DC=com
userPrincipalName: sam@dba.example.com
memberOf: CN=dba,CN=Users,DC=example,DC=com
memberOf: CN=PrimaryApplication,CN=Users,DC=example,DC=com

dn:CN=joe,CN=Users,DC=analytics,DC=example,DC=com
userPrincipalName: joe@analytics.example.com
memberof: CN=marketing,CN=Users,DC=example,DC=com

----------------------------------------

TITLE: Result of MongoDB Aggregation with $week Operator
DESCRIPTION: Shows the output document resulting from the aggregation pipeline that uses the $week operator along with other date operators to break down a date field.

LANGUAGE: javascript
CODE:
{
  "_id" : 1,
  "year" : 2014,
  "month" : 1,
  "day" : 1,
  "hour" : 8,
  "minutes" : 15,
  "seconds" : 39,
  "milliseconds" : 736,
  "dayOfYear" : 1,
  "dayOfWeek" : 4,
  "week" : 0
}

----------------------------------------

TITLE: Deleting Arbiter Data Files
DESCRIPTION: Shell command to remove all files in the arbiter's data directory. This is part of the arbiter downgrade process.

LANGUAGE: shell
CODE:
rm -rf /path/to/mongodb/datafiles/*

----------------------------------------

TITLE: Collation Example Data
DESCRIPTION: Sample collection documents for demonstrating collation with distinct.

LANGUAGE: javascript
CODE:
{ _id: 1, category: "café", status: "A" }
{ _id: 2, category: "cafe", status: "a" }
{ _id: 3, category: "cafE", status: "a" }

----------------------------------------

TITLE: Executing updateUser Command in MongoDB
DESCRIPTION: This snippet demonstrates the syntax for the updateUser command in MongoDB. It shows how to update a user's password, custom data, roles, authentication restrictions, and other settings.

LANGUAGE: javascript
CODE:
db.runCommand(
   { 
     updateUser: "<username>",
     pwd: passwordPrompt(),      // Or  "<cleartext password>"
     customData: { <any information> },
     roles: [
       { role: "<role>", db: "<database>" } | "<role>",
       ...
     ],
     authenticationRestrictions: [
        {
          clientSource: ["<IP>" | "<CIDR range>", ...],
          serverAddress: ["<IP>", | "<CIDR range>", ...]
        },
        ...
     ],
     mechanisms: [ "<scram-mechanism>", ... ],
     digestPassword: <boolean>,
     writeConcern: { <write concern> },
     comment: <any>
   }
)

----------------------------------------

TITLE: Basic GraphLookup Syntax in MongoDB
DESCRIPTION: Shows the prototype structure of a $graphLookup stage with all possible parameters including from, startWith, connectFromField, connectToField, as, maxDepth, depthField and restrictSearchWithMatch.

LANGUAGE: javascript
CODE:
{
   $graphLookup: {
      from: <collection>,
      startWith: <expression>,
      connectFromField: <string>,
      connectToField: <string>,
      as: <string>,
      maxDepth: <number>,
      depthField: <string>,
      restrictSearchWithMatch: <document>
   }
}

----------------------------------------

TITLE: Configuring Collection Balancing for Defragmentation in MongoDB
DESCRIPTION: Use the configureCollectionBalancing command with the defragmentCollection option to start defragmentation of a sharded collection. This command is available from MongoDB 6.0 onwards.

LANGUAGE: mongodb
CODE:
db.runCommand({ configureCollectionBalancing: "<database>.<collection>", defragmentCollection: true })

----------------------------------------

TITLE: Including MongoDB Environment Configuration Files in RST
DESCRIPTION: These directives include configuration files for Atlas and on-premises MongoDB environments. They are used to specify environment-specific settings in the documentation.

LANGUAGE: rst
CODE:
.. include:: /includes/fact-environments-atlas-only.rst
.. include:: /includes/fact-environments-onprem-only.rst

----------------------------------------

TITLE: Creating MongoDB Repository List File for Debian 12 (Bookworm)
DESCRIPTION: This command creates a new list file for the MongoDB 8.0 repository in Debian 12 (Bookworm). It specifies the repository URL, distribution, and component, along with the GPG key location for package verification.

LANGUAGE: bash
CODE:
echo "deb [ signed-by=/usr/share/keyrings/mongodb-server-8.0.gpg ] http://repo.mongodb.org/apt/debian bookworm/mongodb-org/8.0 main" | sudo tee /etc/apt/sources.list.d/mongodb-org-8.0.list

----------------------------------------

TITLE: Retrieving User Information Without Custom Data
DESCRIPTION: Example demonstrating how to retrieve user information while omitting custom data by setting showCustomData to false.

LANGUAGE: javascript
CODE:
db.getSiblingDB("products").getUser(
   "accountAdmin01",
   { showCustomData: false }
)

LANGUAGE: javascript
CODE:
{
   _id: 'products.accountAdmin01',
   userId: UUID("0955afc1-303c-4683-a029-8e17dd5501f4"),
   user: 'accountAdmin01',
   db: 'products',
   roles: [ { role: 'readWrite', db: 'products' } ],
   mechanisms: [ 'SCRAM-SHA-1', 'SCRAM-SHA-256' ]
}

----------------------------------------

TITLE: MongoDB Range Query Examples
DESCRIPTION: Demonstrates different types of range queries using comparison operators.

LANGUAGE: javascript
CODE:
db.cars.find( { price: { $gte: 15000} } )
db.cars.find( { age: { $lt: 10 } } )
db.cars.find( { priorAccidents: { $ne: null } } )

----------------------------------------

TITLE: Creating ClientEncryption Instance in C#
DESCRIPTION: This snippet demonstrates how to create a ClientEncryption instance in C# for MongoDB. It includes the required configuration and initialization process.

LANGUAGE: csharp
CODE:
var clientEncryptionOptions = new ClientEncryptionOptions(
    keyVaultClient: client,
    keyVaultNamespace: "encryption.__keyVault",
    kmsProviders: kmsProviders
);
var clientEncryption = new ClientEncryption(clientEncryptionOptions);

----------------------------------------

TITLE: Retrieving Replica Set Configuration
DESCRIPTION: JavaScript command to retrieve the current replica set configuration and store it in a variable for modification.

LANGUAGE: javascript
CODE:
cfg = rs.conf();

----------------------------------------

TITLE: Checking Feature Compatibility Version in MongoDB
DESCRIPTION: This command checks the feature compatibility version of a MongoDB instance. It's used to ensure all replica set members are at the correct version before upgrading.

LANGUAGE: javascript
CODE:
db.adminCommand( { getParameter: 1, featureCompatibilityVersion: 1 } )

----------------------------------------

TITLE: MongoDB Session ClusterTime Update Structure
DESCRIPTION: Schema structure for updating cluster time in a MongoDB session. Shows the required format for clusterTime timestamp and signature parameters.

LANGUAGE: javascript
CODE:
Session.advanceClusterTime( { 
   clusterTime: <timestamp>,
   signature: 
      { hash: <BinData>, keyId: <NumberLong> } 
} )

----------------------------------------

TITLE: Creating Unique Index for MongoDB Keystore in Java
DESCRIPTION: Creates a unique index on the keyAltNames field in the encryption.__keyVault collection using Java MongoDB driver. This ensures uniqueness of key alternate names in the keystore.

LANGUAGE: java
CODE:
keyVaultDatabase.getCollection(KEY_VAULT_COLLECTION)
    .createIndex(Indexes.ascending("keyAltNames"),
        new IndexOptions().unique(true).partialFilterExpression(
            Filters.exists("keyAltNames")));

----------------------------------------

TITLE: Configuring Azure Key Vault Credentials
DESCRIPTION: Sets up the KMS providers configuration object with Azure Key Vault credentials for queryable encryption. Requires Azure tenant ID, client ID, client secret, and key vault endpoint.



----------------------------------------

TITLE: MongoDB $subtract Basic Syntax
DESCRIPTION: Basic syntax definition for the $subtract operator that takes two expressions as arguments.

LANGUAGE: javascript
CODE:
{ $subtract: [ <expression1>, <expression2> ] }

----------------------------------------

TITLE: Creating a 2dsphere Index on Location Field in MongoDB
DESCRIPTION: Demonstrates creating a 2dsphere index on the location field within the metadata subdocument of a time series collection.

LANGUAGE: javascript
CODE:
db.sensorData.createIndex({ "metadata.location": "2dsphere" })

----------------------------------------

TITLE: Manual Document Decryption in Go
DESCRIPTION: Shows how to fetch and decrypt an encrypted document using the MongoDB Go driver.

LANGUAGE: go
CODE:
// Code reference: /includes/queryable-encryption/fundamentals/manual-encryption/manual-enc.go

----------------------------------------

TITLE: Defining reStructuredText Substitutions for MongoDB Products
DESCRIPTION: Defines substitutions for MongoDB Cloud Manager, Atlas, and Ops Manager names and documentation links. These can be used throughout the documentation for consistent referencing.

LANGUAGE: reStructuredText
CODE:
.. |mms-home| replace:: `MongoDB Cloud Manager <https://www.mongodb.com/products/tools/cloud-manager?tck=docs_server>`__
.. |mms-docs| replace:: :mms-docs:`MongoDB Cloud Manager documentation </>`
.. |MMS| replace:: MongoDB Cloud Manager
.. |atlas| replace:: MongoDB Atlas
.. |opsmgr| replace:: Ops Manager

----------------------------------------

TITLE: Setting Filter for Query with Predicate Only
DESCRIPTION: Example showing how to create an index filter for queries that match on the status field, limiting the query optimizer to consider only specific indexes.

LANGUAGE: javascript
CODE:
db.runCommand(
   {
      planCacheSetFilter: "orders",
      query: { status: "A" },
      indexes: [
         { cust_id: 1, status: 1 },
         { status: 1, order_date: -1 }
      ]
   }
)

----------------------------------------

TITLE: Basic $last Syntax in MongoDB
DESCRIPTION: Demonstrates the basic syntax for using the $last operator in MongoDB aggregation pipeline.

LANGUAGE: javascript
CODE:
{ $last: <expression> }

----------------------------------------

TITLE: Using $unionWith with Specified Documents in MongoDB
DESCRIPTION: Demonstrates how to use $unionWith with the $documents stage to combine existing collection data with specified documents that are not stored in a separate collection.

LANGUAGE: javascript
CODE:
db.cakeFlavors.aggregate( [
   {
      $unionWith: {
         pipeline: [
            {
               $documents: [
                  { _id: 4, flavor: "orange" },
                  { _id: 5, flavor: "vanilla", price: 20 }
               ]
            }
         ]
      }
   }
] )

----------------------------------------

TITLE: Executing killOp Command in MongoDB
DESCRIPTION: This snippet demonstrates the syntax for using the killOp command in MongoDB. It shows how to structure the command with the required fields, including the operation ID to be terminated.

LANGUAGE: javascript
CODE:
db.adminCommand(
   { 
     killOp: 1, 
     op: <opid>, 
     comment: <any> 
   }
)

----------------------------------------

TITLE: Basic fsync Command Syntax in MongoDB
DESCRIPTION: Shows the basic syntax for the fsync command including optional fields for locking, timeout and comments.

LANGUAGE: javascript
CODE:
db.adminCommand(
   {
     fsync: 1,
     lock: <Boolean>,
     fsyncLockAcquisitionTimeout: <integer>,
     comment: <any>
   }
)

----------------------------------------

TITLE: Querying Legacy Coordinates with $near in MongoDB
DESCRIPTION: This snippet shows the syntax for using $near with legacy coordinate points. It requires a 2d index and allows for an optional $maxDistance specification in radians.

LANGUAGE: javascript
CODE:
{
  $near: [ <x>, <y> ],
  $maxDistance: <distance in radians>
}

----------------------------------------

TITLE: List Sessions for Specific Users
DESCRIPTION: Aggregation pipeline that lists sessions for a specific user (myAppReader@test) from the instance's memory cache.

LANGUAGE: javascript
CODE:
db.aggregate( [ { $listLocalSessions: { users: [ { user: "myAppReader", db: "test" } ] } } ] )

----------------------------------------

TITLE: Creating and Querying TTL Session Collection in MongoDB
DESCRIPTION: Creates a session collection with TTL (Time-To-Live) functionality. Demonstrates inserting a session record with lastUsed timestamp and creating an index that automatically expires documents after 300 seconds.

LANGUAGE: javascript
CODE:
> db.createCollection('sessions');
{"ok": 1}

> var record = { lastUsed: ISODate(), sessionId: "1cf41e17e21d5697ac7ed84d10caa456"}
> db.sessions.insert(record)
> db.sessions.find().pretty()
{
        "_id" : ObjectId("50fee58e95fa0c941f134114"),
        "lastUsed" : ISODate("2013-01-22T19:16:23.570Z"),
        "sessionId" : "1cf41e17e21d5697ac7ed84d10caa456"
}

----------------------------------------

TITLE: Adding Operation Rejection Filter in MongoDB
DESCRIPTION: This snippet shows how to use the setQuerySettings command to add an operation rejection filter for a specific query shape in MongoDB.

LANGUAGE: javascript
CODE:
db.adminCommand( {
   setQuerySettings: {
      find: "pizzaOrders",
      filter: {
         orderDate: { $gt: ISODate( "2023-01-20T00:00:00Z" ) }
      },
      sort: {
         totalNumber: 1
      },
      $db: "test"
   },
   settings: {
      reject: true
   }
} )

----------------------------------------

TITLE: Initializing MongoDB Replica Set
DESCRIPTION: Executes the rs.initiate() command to initialize a replica set. This command must be run on exactly one mongod instance that will be part of the replica set to prevent initialization conflicts.

LANGUAGE: shell
CODE:
rs.initiate()

----------------------------------------

TITLE: Creating Unique Index for MongoDB Queryable Encryption in Node.js
DESCRIPTION: This snippet demonstrates how to create a unique index on the 'keyAltNames' field in the 'encryption.__keyVault' namespace using Node.js. It connects to the key vault collection and creates the index using the createIndex method.

LANGUAGE: javascript
CODE:
const keyVaultClient = getKeyVaultClient();
const keyVaultDatabase = keyVaultClient.db("encryption");
const keyVaultCollection = keyVaultDatabase.collection("__keyVault");
await keyVaultCollection.createIndex(
  { keyAltNames: 1 },
  { unique: true, partialFilterExpression: { keyAltNames: { $exists: true } } }
);

----------------------------------------

TITLE: Running collStats Command in MongoDB
DESCRIPTION: Example of how to run the collStats command on a MongoDB collection named 'restaurants' with a scale factor of 1024 bytes.

LANGUAGE: javascript
CODE:
db.runCommand( { collStats : "restaurants", scale: 1024 } )

----------------------------------------

TITLE: Starting MongoDB Instance
DESCRIPTION: Command to start a MongoDB instance with a specified data directory. This is used when restarting nodes after downgrade.

LANGUAGE: javascript
CODE:
mongod --dbpath </path-to-data-folder>

----------------------------------------

TITLE: Creating MongoDB Wildcard Index Template
DESCRIPTION: Generic syntax for creating a wildcard index on a single field using the createIndex method.

LANGUAGE: javascript
CODE:
db.collection.createIndex( { "<field>.$**": <sortOrder> } )

----------------------------------------

TITLE: Inserting Products into MongoDB Collection
DESCRIPTION: This snippet demonstrates how to insert multiple product documents into a 'products' collection in MongoDB. Each product document contains fields for id, name, price, manufacturer, category, and description.

LANGUAGE: javascript
CODE:
db.products.insertMany( [
   {
      _id: 1,
      name: "Laptop",
      price: 1000,
      manufacturer: "TechCorp",
      category: "Electronics", 
      description: "Fastest computer on the market."
   },
   {
      _id: 2,
      name: "Headphones",
      price: 100,
      manufacturer: "Sound",
      category: "Accessories",
      description: "The latest sound technology."
   },
   {
      _id: 3,
      name: "Tablet",
      price: 200,
      manufacturer: "TechCorp",
      category: "Electronics",
      description: "The most compact tablet."
   }
] )

----------------------------------------

TITLE: Build Go Application with Client-Side Encryption
DESCRIPTION: Command to compile the Go application with client-side encryption support using the cse build tag.

LANGUAGE: golang
CODE:
go build -tags cse

----------------------------------------

TITLE: Filtering Documents by Relative Dates Using $dateSubtract
DESCRIPTION: Shows how to use $dateSubtract with the $$NOW variable to filter documents based on a relative time range. This example finds customers who logged out within the past week.

LANGUAGE: javascript
CODE:
db.connectionTime.aggregate(
   [
      {
         $match: 
            {
               $expr:
                  { 
                     $gt:
                        [
                           "$logoutTime", 
                            {
                               $dateSubtract: 
                                  {
                                     startDate: "$$NOW",
                                     unit: "week",
                                     amount: 1
                                  } 
                            }
                        ] 
                  } 
             }
      },
      {
         $project: 
            {
               _id: 0,
               custId: 1, 
               loggedOut: 
                  {
                     $dateToString:
                        {
                           format: "%Y-%m-%d",
                           date: "$logoutTime"
                        }
                  }
            }
      } 
   ]
)

----------------------------------------

TITLE: Creating Search Index Command Basic Syntax
DESCRIPTION: Base syntax for the createSearchIndexes command showing the required structure and fields.

LANGUAGE: javascript
CODE:
db.runCommand(
   {
      createSearchIndexes: "<collection name>",
      indexes: [
         {
            name: "<index name>",
            type: "<search index type>",
            definition: {
               /* search index definition fields */
            } 
        },
        ...
      ]
   }
)

----------------------------------------

TITLE: Unlocking MongoDB Sharded Cluster After Backup
DESCRIPTION: This snippet shows how to unlock the MongoDB sharded cluster using db.fsyncUnlock() and verify the unlock status using an aggregation pipeline.

LANGUAGE: bash
CODE:
db.getSibling("admin").fsyncUnlock()

LANGUAGE: javascript
CODE:
db.getSiblingDB("admin").aggregate( [
   {  $currentOp: { } },
   {  $facet: {
      "locked": [
         { $match: { $and: [
            { fsyncLock: { $exists: true } }
         ] } }],
       "unlocked": [
         { $match: { fsyncLock: { $exists: false } } }
       ]
   } },
   { $project: {
      "fsyncLocked": { $gt: [ { $size: "$locked" }, 0 ] },
      "fsyncUnlocked": { $gt: [ { $size: "$unlocked" }, 0 ] }
   } }
 ] )

----------------------------------------

TITLE: Retrieving Shard IDs in MongoDB using sh.status()
DESCRIPTION: This snippet demonstrates how to use the sh.status() method in MongoDB to obtain a list of available shard IDs. The method provides detailed information about the sharding configuration and status.

LANGUAGE: javascript
CODE:
sh.status()

----------------------------------------

TITLE: Creating Test Collection in MongoDB
DESCRIPTION: Creates a test collection named test_numbers with numeric values for demonstration purposes.

LANGUAGE: javascript
CODE:
db.test_numbers.insertMany([
   { value: 1 },
   { value: 2 },
   { value: 3 },
   { value: 4 },
   { value: 5 },
   { value: 6 }
])

----------------------------------------

TITLE: Setting noCursorTimeout Option on a MongoDB Cursor in JavaScript
DESCRIPTION: This example shows how to set the noCursorTimeout option on a MongoDB cursor to prevent it from automatically closing after 10 minutes of inactivity.

LANGUAGE: javascript
CODE:
var myCursor = db.users.find().noCursorTimeout();

----------------------------------------

TITLE: Configuring Shard Server Outbound Rule in Windows Firewall
DESCRIPTION: This command adds a rule to allow outgoing connections to a specific IP address from the MongoDB shard server port.

LANGUAGE: bat
CODE:
netsh advfirewall firewall add rule name="Open mongod shardsvr outbound" dir=out action=allow protocol=TCP remoteip=<ip-address> localport=27018

----------------------------------------

TITLE: MongoDB Collection Sample Data
DESCRIPTION: Sample inventory collection documents used for distinct method examples.

LANGUAGE: javascript
CODE:
{ "_id": 1, "dept": "A", "item": { "sku": "111", "color": "red" }, "sizes": [ "S", "M" ] }
{ "_id": 2, "dept": "A", "item": { "sku": "111", "color": "blue" }, "sizes": [ "M", "L" ] }
{ "_id": 3, "dept": "B", "item": { "sku": "222", "color": "blue" }, "sizes": "S" }
{ "_id": 4, "dept": "A", "item": { "sku": "333", "color": "black" }, "sizes": [ "S" ] }

----------------------------------------

TITLE: Role Structure After Revoking Roles in MongoDB
DESCRIPTION: Displays the updated structure of the 'purchaseAgents' role after revoking two roles, showing the remaining inherited role.

LANGUAGE: javascript
CODE:
{
   "_id" : "emea.purchaseAgents",
   "role" : "purchaseAgents",
   "db" : "emea",
   "privileges" : [],
   "roles" : [
      {
         "role" : "readAccountsCollection",
         "db" : "emea"
      }
   ]
}

----------------------------------------

TITLE: Python MongoDB Driver Setup
DESCRIPTION: Basic Python driver code example setup.

LANGUAGE: python
CODE:
# You are viewing the Python driver code examples.
# Use the dropdown menu to select a different driver.

----------------------------------------

TITLE: Basic $accumulator Syntax
DESCRIPTION: Shows the basic syntax structure for the $accumulator operator in MongoDB aggregation pipelines.

LANGUAGE: javascript
CODE:
{ 
  $accumulator: {
    init: <code>,
    initArgs: <array expression>,        // Optional
    accumulate: <code>,
    accumulateArgs: <array expression>,
    merge: <code>,
    finalize: <code>,                    // Optional
    lang: <string>
  }
}

----------------------------------------

TITLE: Executing DeleteMany Operation in Node.js MongoDB Driver
DESCRIPTION: The deleteMany() method in the Node.js driver returns a promise that resolves to a result object. The result.deletedCount property contains the number of documents that matched the filter.

LANGUAGE: javascript
CODE:
collection.deleteMany()

----------------------------------------

TITLE: Generic $geoIntersects Query Structure in MongoDB
DESCRIPTION: This snippet shows the general structure of a $geoIntersects query in MongoDB. It demonstrates how to use the $geoIntersects operator with a GeoJSON object to find intersecting locations.

LANGUAGE: javascript
CODE:
db.<collection>.find( {
   <location field> : {
      $geoIntersects : {
         $geometry : {
            type : "<GeoJSON object type>",
            coordinates : [ <coordinates> ]
         }
       }
    }
 } )

----------------------------------------

TITLE: Creating MongoDB Enterprise Repository List File - Bash
DESCRIPTION: Creates a repository list file for MongoDB Enterprise on Ubuntu 24.04 (Noble). The command adds the official MongoDB repository source with architecture specifications and GPG key verification.

LANGUAGE: bash
CODE:
echo "deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-{+version+}.gpg ] https://repo.mongodb.com/apt/ubuntu noble/mongodb-enterprise/{+version+} multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-enterprise-{+version+}.list

----------------------------------------

TITLE: Example SPN Assignment
DESCRIPTION: Example showing how to assign an SPN for a MongoDB service running on testserver.mongodb.com.

LANGUAGE: bash
CODE:
setspn.exe -S mongodb/testserver.mongodb.com mongodtest

----------------------------------------

TITLE: Killing a Specific Cursor in MongoDB
DESCRIPTION: This snippet demonstrates how to use the killCursors command to terminate a specific cursor identified by its ID on the restaurants collection.

LANGUAGE: javascript
CODE:
use test

db.runCommand( { killCursors: "restaurants", cursors: [ NumberLong("18314637080") ] } )

----------------------------------------

TITLE: Setting mongocryptd Port Configuration - Python
DESCRIPTION: Shows how to set the mongocryptd listening port in Python using AutoEncryptionOpts.

LANGUAGE: python
CODE:
auto_encryption_opts = AutoEncryptionOpts(mongocryptd_spawn_args=['--port=30000'])

----------------------------------------

TITLE: Defining and Testing Reduce Function for Integer Sum in JavaScript
DESCRIPTION: This snippet defines a reduce function that sums an array of integers and tests it with sample data. It demonstrates how to verify that the function returns the correct output type.

LANGUAGE: javascript
CODE:
var reduceFunction1 = function(keyCustId, valuesPrices) {
    return Array.sum(valuesPrices);
};

var myTestValues = [ 5, 5, 10 ];

reduceFunction1('myKey', myTestValues);

20

----------------------------------------

TITLE: Viewing TCP Keepalive Settings in Windows Registry
DESCRIPTION: PowerShell command to query the current KeepAliveTime value from Windows registry. The default value if not set is 7200000 milliseconds (0x6ddd00).

LANGUAGE: powershell
CODE:
reg query HKLM\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters /v KeepAliveTime

----------------------------------------

TITLE: Generating Data Encryption Key with GCP KMS in Python
DESCRIPTION: This snippet demonstrates how to generate a Data Encryption Key (DEK) using GCP KMS in Python. It uses the previously defined KMS providers and data key options to create the DEK.

LANGUAGE: python
CODE:
data_key_id = client_encryption.create_data_key("gcp", data_key_opts)
base64_data_key_id = base64.b64encode(data_key_id).decode("utf-8")
print("DataKeyId [base64]: ", base64_data_key_id)

----------------------------------------

TITLE: Installing Latest Stable MongoDB Version with apt-get
DESCRIPTION: This command installs the latest stable version of MongoDB using apt-get. The {+package-name-org+} placeholder should be replaced with the actual package name for MongoDB.

LANGUAGE: bash
CODE:
sudo apt-get install -y {+package-name-org+}

----------------------------------------

TITLE: MongoDB Shard Distribution Statistics JSON Output
DESCRIPTION: JSON document showing detailed statistics about read and write distributions across MongoDB shards. Includes metrics for operation types, shard operation percentages, and distribution ranges. The output contains sample sizes for different operation types and their distribution patterns across shards.

LANGUAGE: none
CODE:
{
   "readDistribution" : {
     "sampleSize" : {
       "total" : 61363,
       "find" : 61363,
       "aggregate" : 0,
       "count" : 0,
       "distinct" : 0
     },
     "percentageOfSingleShardReads" : 50.0008148233,
     "percentageOfMultiShardReads" : 49.9991851768,
     "percentageOfScatterGatherReads" : 0,
     "numReadsByRange" : [
       688,
       775,
       737,
       776,
       652,
       671,
       1332,
       1407,
       535,
       428,
       985,
       573,
       1496,
       ...
       ],
     },
   "writeDistribution" : {
     "sampleSize" : {
       "total" : 49638,
       "update" : 30680,
       "delete" : 7500,
       "findAndModify" : 11458
     },
     "percentageOfSingleShardWrites" : 100,
     "percentageOfMultiShardWrites" : 0,
     "percentageOfScatterGatherWrites" : 0,
     "numWritesByRange" : [
       389,
       601,
       430,
       454,
       462,
       421,
       668,
       833,
       493,
       300,
       683,
       460,
       ...
      ],
      "percentageOfShardKeyUpdates" : 0,
      "percentageOfSingleWritesWithoutShardKey" : 0,
      "percentageOfMultiWritesWithoutShardKey" : 0
    }
}

----------------------------------------

TITLE: Initial Schema: Sellers Collection in MongoDB
DESCRIPTION: Example of the initial schema for the sellers collection, showing seller details and a limited set of product information.

LANGUAGE: javascript
CODE:
[
   {
      _id: 456,
      name: "Cool Clothes Co",
      location: {
         address: "21643 Andreane Shores",
         state: "Ohio",
         country: "United States"
      },
      phone: "567-555-0105",
      products: [
         {
            id: 111,
            name: "sweater",
            price: 30
         },
         {
            id: 222,
            name: "t-shirt",
            price: 10
         },
         {
            id: 333
            name: "vest",
            price: 20
         }
      ]
   }
]

----------------------------------------

TITLE: Configuring Data Key Options
DESCRIPTION: Sets up the configuration options for generating a Customer Master Key (CMK) through the KMIP KMS. These options specify the key parameters and properties to be used during key generation.

LANGUAGE: java
CODE:
DataKeyOptions dataKeyOptions = new DataKeyOptions();

LANGUAGE: javascript
CODE:
const dataKeyOptions = {};

LANGUAGE: python
CODE:
data_key_options = {}

LANGUAGE: csharp
CODE:
var dataKeyOptions = new DataKeyOptions();

LANGUAGE: go
CODE:
dataKeyOpts := options.DataKey()

----------------------------------------

TITLE: Creating Index in Node.js
DESCRIPTION: Creates a unique index on the keyAltNames field in the encryption.__keyVault collection using Node.js driver

LANGUAGE: javascript
CODE:
await keyVault.createIndex(
  { "keyAltNames": 1 },
  {
    "unique": true,
    "partialFilterExpression": {
      "keyAltNames": { "$exists": true }
    }
  }
);

----------------------------------------

TITLE: Setting Feature Compatibility Version in MongoDB
DESCRIPTION: This command sets or updates the feature compatibility version to 6.0. It's a prerequisite step before upgrading to MongoDB 7.0.

LANGUAGE: javascript
CODE:
db.adminCommand( { setFeatureCompatibilityVersion: "6.0" } )

----------------------------------------

TITLE: Using logout Command in MongoDB Database Context
DESCRIPTION: This example shows how to use the logout command within a specific database context. It assumes that the database context has been set and the db object is available.

LANGUAGE: javascript
CODE:
db.runCommand( { logout: 1 } )

----------------------------------------

TITLE: Creating Indexes for MongoDB cursor.min() Examples
DESCRIPTION: Creates multiple indexes on the 'products' collection to be used in demonstrating various uses of the cursor.min() method.

LANGUAGE: javascript
CODE:
db.products.createIndexes( [
   { "item" : 1, "type" : 1 },
   { "item" : 1, "type" : -1 },
   { "price" : 1 } 
] )

----------------------------------------

TITLE: Multiple Field Array Projection with $elemMatch
DESCRIPTION: Shows how to use $elemMatch to specify multiple conditions for array element selection in the projection

LANGUAGE: javascript
CODE:
db.students.find( { grades: { $elemMatch: {
                                             mean: { $gt: 70 },
                                             grade: { $gt:90 }
                                           } } },
                   { "grades.$": 1 } )

----------------------------------------

TITLE: Checking Balancer State in MongoDB Sharded Cluster
DESCRIPTION: This snippet demonstrates how to check if the balancer is enabled in a MongoDB sharded cluster using the sh.getBalancerState() method.

LANGUAGE: javascript
CODE:
sh.getBalancerState()

----------------------------------------

TITLE: Using $setUnion in a $project Stage in MongoDB Aggregation
DESCRIPTION: Demonstrates how to use $setUnion in a $project stage to combine unique elements from two array fields.

LANGUAGE: javascript
CODE:
db.flowers.aggregate(
   [
     { $project: { flowerFieldA:1, flowerFieldB: 1, allValues: { $setUnion: [ "$flowerFieldA", "$flowerFieldB" ] }, _id: 0 } }
   ]
)

----------------------------------------

TITLE: Installing Python Dependencies for Queryable Encryption
DESCRIPTION: Command to install the required Python packages, including the PyMongo driver and pymongocrypt, for the Queryable Encryption tutorial.

LANGUAGE: shell
CODE:
python3 -m pip install -r requirements.txt

----------------------------------------

TITLE: Run Compiled Application
DESCRIPTION: Command to execute the compiled Go application.

LANGUAGE: sh
CODE:
./go-qe-tutorial

----------------------------------------

TITLE: Output Document Structure
DESCRIPTION: Illustrates the structure of documents returned by the $listClusterCatalog stage.

LANGUAGE: javascript
CODE:
{
   "ns" : <string>,
   "db" : <string>,
   "type" : <string>,
   "idIndex" : <document>,
   "options" : <document>,
   "info" : <document>,
   "sharded" : <boolean>,
   "shardKey" : <document>,
   "shards" : [<string>],
   "balancingEnabled" : <boolean>,
   "balancingEnabledReason" : <document>,
   "autoMergingEnabled" : <boolean>,
   "chunkSize" : <int>
}

----------------------------------------

TITLE: Inserting Test Document in MongoDB Config Database
DESCRIPTION: Example of inserting a test document into the config database to verify write availability of the config server in a sharded cluster. This operation should only be used for testing purposes.

LANGUAGE: javascript
CODE:
db.testConfigServerWriteAvail.insertOne( { a : 1 } )

----------------------------------------

TITLE: Sample Output of MongoDB Stream Processor Statistics
DESCRIPTION: This JSON snippet shows a typical response from calling sp.processor.stats(), including various statistics about the stream processor such as message counts, sizes, and pipeline details.

LANGUAGE: json
CODE:
{
	ok: 1,
	ns: '6500aa277fdbdb6e443a992e.63c1928d768e39423386aa16.solarDemo',
	stats: {
	  name: 'solarDemo',
	  processorId: '65f9fea5c5154385174af71e',
	  status: 'running',
	  scaleFactor: Long('1'),
	  inputMessageCount: Long('926'),
	  inputMessageSize: 410310,
	  outputMessageCount: Long('383'),
	  outputMessageSize: 425513,
	  dlqMessageCount: Long('0'),
	  dlqMessageSize: Long('0'),
	  stateSize: Long('4504'),
	  watermark: ISODate('2024-03-19T22:16:49.523Z'),
	  ok: 1
	},
	pipeline: [
	  {
	    '$source': {
	      connectionName: 'sample_stream_solar',
	      timeField: { '$dateFromString': { dateString: '$timestamp' } }
	    }
	  },
	  {
	    '$match': { '$expr': { '$ne': [ '$device_id', 'device_8' ] } }
	  },
	  {
	    '$tumblingWindow': {
	      interval: { size: 10, unit: 'second' },
	      pipeline: [
		{
		  '$group': {
		    _id: [Object],
		    max_temp: [Object],
		    max_watts: [Object],
		    min_watts: [Object],
		    avg_watts: [Object],
		    median_watts: [Object]
		  }
		}
	      ]
	    }
	  },
	  {
	    '$merge': {
	      into: {
		connectionName: 'mongodb1',
		db: 'solar_db',
		coll: 'solar_coll'
	      },
	      on: [ '_id' ]
	    }
	  }
	]
      }

----------------------------------------

TITLE: Creating Metadata Field with MongoDB Aggregation Pipeline
DESCRIPTION: This aggregation pipeline adds a metaData field to the weather_data collection and projects specific fields for the new document structure.

LANGUAGE: javascript
CODE:
db.weather_data.aggregate([
{
   $addFields: {
      metaData: {
         "st": "$st",
         "position": "$position",
         "elevation": "$elevation",
         "callLetters": "$callLetters",
         "qualityControlProcess": "$qualityControlProcess",
         "type": "$type"
      }
   },
}, 
{
   $project: {
      _id: 1,
      ts: 1,
      metaData: 1,
      dataSource: 1,
      airTemperature: 1,
      dewPoint: 1,
      pressure: 1,
      wind: 1,
      visibility: 1,
      skyCondition: 1,
      sections: 1,
      precipitationEstimatedObservation: 1
   }
}
])

----------------------------------------

TITLE: Creating Partial Index with Unique Constraint
DESCRIPTION: Demonstrates creating a partial index with a unique constraint on the username field for users aged 21 and above.

LANGUAGE: javascript
CODE:
db.users.createIndex(
   { username: 1 },
   { unique: true, partialFilterExpression: { age: { $gte: 21 } } }
)

----------------------------------------

TITLE: Executing MongoDB Commands with db.runCommand()
DESCRIPTION: This snippet demonstrates the syntax for running MongoDB commands using the db.runCommand() method. It allows you to execute various database commands by passing the command object as an argument.

LANGUAGE: javascript
CODE:
db.runCommand( { <command> } )

----------------------------------------

TITLE: Calculating Tangent from Radians Example
DESCRIPTION: Example document and aggregation pipeline showing how to calculate the tangent of an angle stored in radians.

LANGUAGE: bash
CODE:
{
  "_id" : ObjectId("5c50782193f833234ba90d85"),
  "angle_a" : NumberDecimal("0.9272952180016122324285124629224288"),
  "side_a" : NumberDecimal("3")
}

LANGUAGE: bash
CODE:
db.trigonometry.aggregate([
  {
    $addFields : {
      "side_b" : {
        $multiply : [
          { $tan : "$angle_a" },
          "$side_a"
        ]
      }
    }
  }
])

----------------------------------------

TITLE: Creating MongoDB Data and Log Directories in Bash
DESCRIPTION: Commands to create the necessary directories for MongoDB data and log files. These commands may require sudo privileges depending on the user running MongoDB.

LANGUAGE: bash
CODE:
mkdir -p <directory>

LANGUAGE: bash
CODE:
sudo mkdir -p <directory>

----------------------------------------

TITLE: Creating and Querying Compound Multikey Index
DESCRIPTION: Shows how to create and query a compound multikey index combining regular and array fields.

LANGUAGE: javascript
CODE:
db.survey.insertMany([
   { _id: 1, item: "ABC", ratings: [ 2, 9 ] },
   { _id: 2, item: "XYZ", ratings: [ 4, 3 ] }
])

db.survey.createIndex( { item: 1, ratings: 1 } )

db.survey.find( { item: "XYZ", ratings: { $gte: 3 } } )

----------------------------------------

TITLE: MongoDB estimatedDocumentCount Method Definition
DESCRIPTION: Basic syntax for using the estimatedDocumentCount method with optional parameters. The method accepts an options document that can include maxTimeMS to limit execution time.

LANGUAGE: javascript
CODE:
db.collection.estimatedDocumentCount( <options> )

----------------------------------------

TITLE: Inserting Sample Data into MongoDB Collection
DESCRIPTION: Creates an example collection 'orders' by inserting multiple documents with various fields including item, price, quantity, and type.

LANGUAGE: javascript
CODE:
db.orders.insertMany( [
   { "_id" : 1, "item" : "abc", "price" : NumberDecimal("12"), "quantity" : 2, "type": "apparel" },
   { "_id" : 2, "item" : "jkl", "price" : NumberDecimal("20"), "quantity" : 1, "type": "electronics" },
   { "_id" : 3, "item" : "abc", "price" : NumberDecimal("10"), "quantity" : 5, "type": "apparel" },
   { "_id" : 4, "item" : "abc", "price" : NumberDecimal("8"), "quantity" : 10, "type": "apparel" },
   { "_id" : 5, "item" : "jkl", "price" : NumberDecimal("15"), "quantity" : 15, "type": "electronics" }
] )

----------------------------------------

TITLE: Inserting Documents into a Clustered Collection in MongoDB
DESCRIPTION: Example of inserting multiple documents into the 'orders' clustered collection. The _id field is set to ISODate values, which will be used as the clustered index key.

LANGUAGE: javascript
CODE:
db.orders.insertMany( [
   { _id: ISODate( "2022-03-18T12:45:20Z" ), "quantity": 50, "totalOrderPrice": 500 },
   { _id: ISODate( "2022-03-18T12:47:00Z" ), "quantity": 5, "totalOrderPrice": 50 },
   { _id: ISODate( "2022-03-18T12:50:00Z" ), "quantity": 1, "totalOrderPrice": 10 }
] )

----------------------------------------

TITLE: MongoDB Generic Circle Query Structure
DESCRIPTION: Generic query structure for finding documents within a circular area on a sphere using $geoWithin and $centerSphere operators. The query requires longitude and latitude coordinates for the center point and a radius in radians.

LANGUAGE: javascript
CODE:
db.<collection>.find( {
   <location field> : {
      $geoWithin : {
         $centerSphere: [
            [ <longitude>, <latitude> ],
            <radius>
         ]
       }
    }
 } )

----------------------------------------

TITLE: Updating a Document Using MongoDB Compass
DESCRIPTION: This section provides step-by-step instructions for updating a document using MongoDB Compass GUI. It includes steps to modify existing fields, add new fields, and navigate the Compass interface.

LANGUAGE: javascript
CODE:
{ item: "paper" }

----------------------------------------

TITLE: Configuring Multiple Authentication Mechanisms
DESCRIPTION: Command showing how to enable multiple authentication mechanisms including Kerberos (GSSAPI) and SCRAM-SHA-256.

LANGUAGE: bash
CODE:
--setParameter authenticationMechanisms=GSSAPI,SCRAM-SHA-256

----------------------------------------

TITLE: Inserting Sample Data into MongoDB Collection
DESCRIPTION: Demonstrates how to insert multiple documents into a 'food' collection in MongoDB. Each document contains an '_id' and a 'name' field with various food items.

LANGUAGE: javascript
CODE:
db.food.insertMany(
 [
    { "_id" : 1, "name" : "apple" },
    { "_id" : 2, "name" : "banana" },
    { "_id" : 3, "name" : "éclair" },
    { "_id" : 4, "name" : "hamburger" },
    { "_id" : 5, "name" : "jalapeño" },
    { "_id" : 6, "name" : "pizza" },
    { "_id" : 7, "name" : "tacos" },
    { "_id" : 8, "name" : "寿司" }
 ]
)

----------------------------------------

TITLE: Verifying Config Shard Using listShards Command
DESCRIPTION: Run the listShards command against the admin database through mongos to check for a config shard. Looks for a document with _id: "config" in the output.

LANGUAGE: shell
CODE:
db.adminCommand({ listShards: 1 })

----------------------------------------

TITLE: Using $documentNumber in $setWindowFields for State-wise Document Numbering
DESCRIPTION: This example demonstrates how to use $documentNumber in the $setWindowFields stage to assign a unique document number for each state, sorted by quantity in descending order.

LANGUAGE: javascript
CODE:
db.cakeSales.aggregate( [
   {
      $setWindowFields: {
         partitionBy: "$state",
         sortBy: { quantity: -1 },
         output: {
            documentNumberForState: {
               $documentNumber: {}  
            }
         }
      }
   }
] )

----------------------------------------

TITLE: Listing Specific Index Types Across All Databases in MongoDB Shell
DESCRIPTION: This complex query lists all indexes of a specific type (hashed in this example) across all collections in all databases. It uses nested loops to iterate through databases, collections, and indexes.

LANGUAGE: javascript
CODE:
db.adminCommand("listDatabases").databases.forEach(function(d){
    let mdb = db.getSiblingDB(d.name);
    mdb.getCollectionInfos({ type: "collection" }).forEach(function(c){
      let currentCollection = mdb.getCollection(c.name);
      currentCollection.getIndexes().forEach(function(idx){
        let idxValues = Object.values(Object.assign({}, idx.key));

        if (idxValues.includes("hashed")) {
          print("Hashed index: " + idx.name + " on " + d.name + "." + c.name);
          printjson(idx);
        };
      }); 
    });
});

----------------------------------------

TITLE: Creating Customer Master Key for CSFLE in Go
DESCRIPTION: This code snippet demonstrates how to create a 96-byte Customer Master Key and save it to the filesystem as 'master-key.txt' using Go. It uses the crypto/rand package to generate random bytes.

LANGUAGE: go
CODE:
import (
	"crypto/rand"
	"os"
)

func main() {
	localMasterKey := make([]byte, 96)
	if _, err := rand.Read(localMasterKey); err != nil {
		panic(err)
	}
	if err := os.WriteFile("master-key.txt", localMasterKey, 0644); err != nil {
		panic(err)
	}
}

----------------------------------------

TITLE: Connecting to MongoDB Atlas with AWS IAM Authentication using mongosh
DESCRIPTION: This code snippet shows how to connect to a MongoDB Atlas cluster using the mongosh shell with AWS IAM authentication. It includes the full command with the connection string containing placeholders for AWS credentials.

LANGUAGE: bash
CODE:
mongosh 'mongodb+srv://<aws access key id>:<aws secret access key>@cluster0.example.com/testdb?authSource=$external&authMechanism=MONGODB-AWS'

----------------------------------------

TITLE: Defining OP_COMPRESSED Message Structure in C
DESCRIPTION: Defines the structure of the OP_COMPRESSED message used to wrap compressed opcodes in the MongoDB wire protocol. It includes fields for the original opcode, uncompressed size, compressor ID, and the compressed message itself.

LANGUAGE: c
CODE:
struct {
    MsgHeader header;            // standard message header
    int32  originalOpcode;       // value of wrapped opcode
    int32  uncompressedSize;     // size of deflated compressedMessage, excluding MsgHeader
    uint8  compressorId;         // ID of compressor that compressed message
    char    *compressedMessage;  // opcode itself, excluding MsgHeader
}

----------------------------------------

TITLE: Executing dbStats Command in MongoDB
DESCRIPTION: This snippet shows the basic syntax for running the dbStats command in MongoDB. It includes optional fields for scaling and free storage reporting.

LANGUAGE: javascript
CODE:
db.runCommand( 
   { 
     dbStats: 1, 
     scale: <number>,
     freeStorage: 0
   } 
)

----------------------------------------

TITLE: Calculating Distance Using $sqrt in MongoDB Aggregation
DESCRIPTION: Demonstrates an aggregation pipeline that uses $sqrt to calculate the distance between two points. It combines $sqrt with $add, $pow, and $subtract operators to implement the distance formula.

LANGUAGE: javascript
CODE:
db.points.aggregate([
   {
     $project: {
        distance: {
           $sqrt: { 
               $add: [
                  { $pow: [ { $subtract: [ "$p2.y", "$p1.y" ] }, 2 ] },
                  { $pow: [ { $subtract: [ "$p2.x", "$p1.x" ] }, 2 ] }
               ]
           }
        }
     }
   }
])

----------------------------------------

TITLE: Inserting Orders with Embedded Product Details in MongoDB
DESCRIPTION: This snippet demonstrates how to insert order documents with embedded product details into the 'orders' collection, implementing the subset schema design pattern. Each order includes an array of products with their id, name, and price.

LANGUAGE: javascript
CODE:
db.orders.insertMany( [
   {
      _id: 101,
      customer_name: "John Doe",
      timestamp: "2024-05-11T10:00:00Z",
      products: [
         {
            product_id: 1,
            name: "Laptop",
            price: 1000
         },
         {
            product_id: 2,
            name: "Headphones",
            price: 100
         }
      ],
      total: 1100
   },
   {
      _id: 102,
      customer_name: "Jane Smith",
      timestamp: "2024-05-11T12:00:00Z",
      products: [
         {
            product_id: 2,
            name: "Headphones",
            price: 100
         }
      ],
      total: 100
   }
] )

----------------------------------------

TITLE: Result of Inverse Hyperbolic Cosine Calculation in Degrees
DESCRIPTION: Shows the output document after calculating the inverse hyperbolic cosine in degrees.

LANGUAGE: javascript
CODE:
{
  "_id" : ObjectId("5c50782193f833234ba90d85"),
  "x-coordinate" : NumberDecimal("3"),
  "y-coordinate" : NumberDecimal("100.9979734210524228844295260083432")
}

----------------------------------------

TITLE: List Collections with nameOnly Option
DESCRIPTION: Shows how to use the listCollections command with the nameOnly option to get a simplified list of collection names and types.

LANGUAGE: javascript
CODE:
db.runCommand(
   {
      listCollections: 1.0,
      nameOnly: true
   }
)

----------------------------------------

TITLE: MongoDB Read Preference Documentation Structure in RST
DESCRIPTION: ReStructuredText markup defining the documentation structure for MongoDB read preferences, including sections for modes, behavior, configuration and transaction considerations.

LANGUAGE: rst
CODE:
.. _read-preference:
.. _replica-set-read-preference:
.. _replica-set-read-preference-background:

===============
Read Preference
===============

.. default-domain:: mongodb

.. facet::
   :name: genre
   :values: reference

----------------------------------------

TITLE: Defining ZIP Code Document Structure in MongoDB
DESCRIPTION: Illustrates the structure of a document in the zipcodes collection, including fields for zip code, city, state, population, and location coordinates.

LANGUAGE: javascript
CODE:
{
  "_id": "10280",
  "city": "NEW YORK",
  "state": "NY",
  "pop": 5574,
  "loc": [
    -74.016323,
    40.710537
  ]
}

----------------------------------------

TITLE: Starting mongosh without Database Connection
DESCRIPTION: This command starts mongosh without connecting to a database, which is useful for initial setup and configuration tasks.

LANGUAGE: bash
CODE:
mongosh --nodb

----------------------------------------

TITLE: Example Return Fields Selector in JavaScript
DESCRIPTION: JavaScript example showing the format of a return fields selector used to limit the fields returned in a query.

LANGUAGE: javascript
CODE:
{ a : 1, b : 1, c : 1}

----------------------------------------

TITLE: Querying MongoDB Collection in Java (Synchronous)
DESCRIPTION: This snippet shows how to query a MongoDB collection using the Java synchronous driver. The actual code is not provided in the excerpt, but it references an external file containing the implementation.

LANGUAGE: java
CODE:
// Code is referenced from an external file: /driver-examples/DocumentationSamples.java

----------------------------------------

TITLE: Configuring MongoDB Router Connection String
DESCRIPTION: YAML configuration for mongos to specify the config server replica set connection string.

LANGUAGE: yaml
CODE:
sharding:
  configDB: "myNewCSRSName/config1.example.net:27019,config2.example.net:27019,config3.example.net:27019"

----------------------------------------

TITLE: Building MongoDB Query Expression with $add Operator
DESCRIPTION: This snippet demonstrates how to construct a MongoDB query expression using the $add operator. It adds a constant value to a field from the document.

LANGUAGE: mongodb
CODE:
{ $add: [ 3, "$inventory.total" ] }

----------------------------------------

TITLE: Examining MongoDB Index Usage
DESCRIPTION: The $indexStats aggregation stage provides statistics about index usage and effectiveness.

LANGUAGE: mongodb
CODE:
$indexStats

----------------------------------------

TITLE: Generating Encryption Key
DESCRIPTION: Generates a base64-encoded 96-byte string to be used as a local encryption key.

LANGUAGE: javascript
CODE:
const TEST_LOCAL_KEY = require("crypto").randomBytes(96).toString("base64")

----------------------------------------

TITLE: Configuring MongoDB Queryable Encryption Variables - Shell
DESCRIPTION: Declares required variables for MongoDB queryable encryption including KMS provider name, database URIs, and collection names for storing encryption keys and encrypted data in MongoDB Shell.

LANGUAGE: javascript
CODE:
const kmsProviderName = "aws"; // or "azure", "gcp", or "kmip"
const uri = process.env.MONGODB_URI || "<your MongoDB URI>";
const keyVaultDatabaseName = "encryption";
const keyVaultCollectionName = "__keyVault";
const keyVaultNamespace = `${keyVaultDatabaseName}.${keyVaultCollectionName}`;
const encryptedDatabaseName = "medicalRecords";
const encryptedCollectionName = "patients";

----------------------------------------

TITLE: Retrieving Query Settings in MongoDB
DESCRIPTION: This snippet shows how to use the $querySettings aggregation stage to retrieve the current query settings, which can be used to obtain the queryShapeHash for deletion.

LANGUAGE: javascript
CODE:
db.aggregate( [
   { $querySettings: {} }
] )

----------------------------------------

TITLE: Single-Byte Character Example Data
DESCRIPTION: Sample inventory collection data containing single-byte characters for demonstrating $substrCP usage.

LANGUAGE: javascript
CODE:
{ "_id" : 1, "item" : "ABC1", quarter: "13Q1", "description" : "product 1" }
{ "_id" : 2, "item" : "ABC2", quarter: "13Q4", "description" : "product 2" }
{ "_id" : 3, "item" : "XYZ1", quarter: "14Q2", "description" : null }

----------------------------------------

TITLE: Querying MongoDB Using Embedded Field Index
DESCRIPTION: Shows queries that can utilize the index on the embedded 'location.state' field, including queries with multiple conditions.

LANGUAGE: javascript
CODE:
db.students.find( { "location.state": "California" } )

db.students.find( { "location.city": "Albany", "location.state": "New York" } )

----------------------------------------

TITLE: MongoDB Collection Operations Reference
DESCRIPTION: Table mapping collection methods to commands with their restrictions and behaviors. Includes aggregate, CRUD operations, and bulk write operations. Special notes on transactions, implicit collection creation, and operation limitations.

LANGUAGE: mongodb
CODE:
db.collection.aggregate()         // Performs aggregation pipeline operations\ndb.collection.countDocuments()     // Counts documents with specific restrictions\ndb.collection.distinct()           // Returns distinct values for a field\ndb.collection.find()               // Queries documents\ndb.collection.deleteMany()         // Deletes multiple documents\ndb.collection.deleteOne()          // Deletes a single document\ndb.collection.findOneAndDelete()   // Finds and deletes a document\ndb.collection.findOneAndReplace()  // Finds and replaces a document\ndb.collection.findOneAndUpdate()   // Finds and updates a document\ndb.collection.insertMany()         // Inserts multiple documents\ndb.collection.insertOne()          // Inserts a single document\ndb.collection.updateOne()          // Updates a single document\ndb.collection.updateMany()         // Updates multiple documents\ndb.collection.replaceOne()         // Replaces a single document\ndb.collection.bulkWrite()          // Performs bulk write operations

----------------------------------------

TITLE: Querying Embedded Documents in MongoDB Compass
DESCRIPTION: This snippet shows the filter to be used in MongoDB Compass to query for documents with a specific value in an embedded field. It searches for documents where the 'size.uom' field is equal to 'in'.

LANGUAGE: javascript
CODE:
{ "size.uom": "in" }

----------------------------------------

TITLE: Defining bulkWrite() Method Syntax in MongoDB
DESCRIPTION: Shows the basic syntax for calling the bulkWrite() method on a MongoDB collection, including the operations array and options.

LANGUAGE: javascript
CODE:
db.collection.bulkWrite(
    [ <operation 1>, <operation 2>, ... ],
    {
      writeConcern : <document>,
      ordered : <boolean>
    }
)

----------------------------------------

TITLE: Listing Databases in MongoDB Cluster
DESCRIPTION: This command lists all databases in the MongoDB cluster using the listDatabases command with the nameOnly option set to true.

LANGUAGE: javascript
CODE:
db.adminCommand( { listDatabases: 1, nameOnly: true } )

----------------------------------------

TITLE: Example of ZonesRangeOverlap Inconsistency in MongoDB Query Result
DESCRIPTION: This snippet demonstrates an example of a ZonesRangeOverlap inconsistency as it would appear in a MongoDB query result. It shows the full structure of the response, including the cursor and firstBatch containing the inconsistency document.

LANGUAGE: json
CODE:
{
   cursor: {
      id: Long("0"),
      ns: "test.$cmd.aggregate",
      firstBatch: [
         {
            type: "ZonesRangeOverlap",
            description: "Found two overlapping zones",
            details: {
               namespace: "test.authors",
               collectionUUID: new UUID("62ebdb7e-a7bb-4151-a620-49d44cef097f"),
               zoneA: { 
                  ns: "test.authors", 
                  tag: "64ddec77e0d32b766bb8d5fe", 
                  min: { x: MinKey }, 
                  max: { x: 0 } 
               },
               zoneB: { 
                  ns: "test.authors", 
                  tag: "64ddec77e0d32b766bb8d5ff", 
                  min: { x: -10 }, 
                  max: { x: MaxKey }
               }
             }
          }
      ],
   },
   ok: 1
}

----------------------------------------

TITLE: Creating Collections and Databases in MongoDB using JavaScript
DESCRIPTION: Demonstrates how to create new databases and collections in MongoDB through insert and index creation operations. Shows that MongoDB automatically creates databases and collections when data is first stored.

LANGUAGE: javascript
CODE:
use myNewDB;

db.myNewCollection1.insertOne( { x: 1 } );
db.myNewCollection2.createIndex( { a: 1 } );

----------------------------------------

TITLE: Querying MongoDB for Specific Array Elements using Compass
DESCRIPTION: This snippet shows the filter to be used in MongoDB Compass to find documents where the 'instock' array contains elements with specific quantity and warehouse values.

LANGUAGE: javascript
CODE:
{ "instock.qty": 5, "instock.warehouse": "A" }

----------------------------------------

TITLE: Defining reStructuredText Document Structure for MongoDB 7.1 Changelog
DESCRIPTION: This snippet sets up the structure for a reStructuredText document detailing the changelog for MongoDB version 7.1. It includes metadata, headings, and directives for content organization.

LANGUAGE: rst
CODE:
:orphan:

.. _7.1-changelog-full:

=============
7.1 Changelog
=============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. include:: /includes/changelogs/releases/7.1.1.rst

----------------------------------------

TITLE: Enhancing Time-Series Bucket Validation in MongoDB (JavaScript)
DESCRIPTION: Adds a check during validation to verify mixed-schema buckets for time-series collections, ensuring data integrity and consistency.

LANGUAGE: javascript
CODE:
// SERVER-84699: Add a check to validation to check for mixed-schema buckets for time-series
// (No specific code provided, but likely involves modifying the validation process for time-series collections)

----------------------------------------

TITLE: Defining $dateToString Operator Syntax in MongoDB Aggregation
DESCRIPTION: This snippet shows the syntax for the $dateToString operator in MongoDB aggregation. It specifies the required and optional fields for the operator.

LANGUAGE: javascript
CODE:
{ $dateToString: {
   date: <dateExpression>,
   format: <formatString>,
   timezone: <tzExpression>,
   onNull: <expression>
} }

----------------------------------------

TITLE: Checking Indexes with checkMetadataConsistency in MongoDB
DESCRIPTION: Shows how to include index checks when running the checkMetadataConsistency command by setting the checkIndexes option to true.

LANGUAGE: javascript
CODE:
db.runCommand( {
   checkMetadataConsistency: 1,
   checkIndexes: true
} )

----------------------------------------

TITLE: Using db.shutdownServer() with Timeout
DESCRIPTION: Shows an alternative method to shut down a MongoDB server with a timeout using the db.shutdownServer() method.

LANGUAGE: javascript
CODE:
db.shutdownServer({timeoutSecs : 5})

----------------------------------------

TITLE: Generating Test Client Certificate Files with OpenSSL
DESCRIPTION: This set of commands generates the necessary files for a test client certificate, including the key, certificate signing request, certificate, and final PEM file.

LANGUAGE: bash
CODE:
openssl genrsa -out mongodb-test-client.key 4096

openssl req -new -key mongodb-test-client.key -out mongodb-test-client.csr -config openssl-test-client.cnf

openssl x509 -sha256 -req -days 365 -in mongodb-test-client.csr -CA mongodb-test-ia.crt -CAkey mongodb-test-ia.key -CAcreateserial -out mongodb-test-client.crt -extfile openssl-test-client.cnf -extensions v3_req

cat mongodb-test-client.crt mongodb-test-client.key > test-client.pem

----------------------------------------

TITLE: Starting MongoDB with a Configuration File
DESCRIPTION: This command starts mongod using a configuration file, which can specify the data directory, replica set name, and IP binding.

LANGUAGE: sh
CODE:
mongod --config /etc/mongod.conf

----------------------------------------

TITLE: Filter, Group, and Sum in MongoDB
DESCRIPTION: MongoDB aggregation pipeline to filter documents by status, then group by customer ID and sum the 'price' field, equivalent to SQL's WHERE, GROUP BY, and SUM() operations.

LANGUAGE: javascript
CODE:
db.orders.aggregate( [
   { $match: { status: 'A' } },
   {
     $group: {
        _id: "$cust_id",
        total: { $sum: "$price" }
     }
   }
] )

----------------------------------------

TITLE: Defining $set Syntax in MongoDB JavaScript
DESCRIPTION: Demonstrates the basic syntax for using the $set operator in MongoDB update operations. The operator can set values for multiple fields in a single operation.

LANGUAGE: javascript
CODE:
{ $set: { <field1>: <value1>, ... } }

----------------------------------------

TITLE: Example Output of MongoDB Sharded Data Distribution
DESCRIPTION: Sample output showing the distribution of documents across shards for multiple collections, including document counts and size metrics.

LANGUAGE: javascript
CODE:
[
   {
      ns: 'config.system.sessions',
      shards: [
         {
            shardName: 'shard1',
            numOrphanedDocs: 0,
            numOwnedDocuments: 18,
            ownedSizeBytes: 1782,
            orphanedSizeBytes: 0
         }
      ]
   },
   {
      ns: 'records.people',
      shards: [
         {
            shardName: 'shard1',
            numOrphanedDocs: 0,
            numOwnedDocuments: 21,
            ownedSizeBytes: 134,
            orphanedSizeBytes: 0
         }
      ]
   }
]

----------------------------------------

TITLE: Handling Null and Missing Values with $top in MongoDB
DESCRIPTION: Illustrates how $top handles null and missing values in an aggregation pipeline. It groups documents by gameId and returns the top player score, demonstrating that missing values are converted to null.

LANGUAGE: javascript
CODE:
db.aggregate( [
   {
      $documents: [
         { playerId: "PlayerA", gameId: "G1", score: 1 },
         { playerId: "PlayerB", gameId: "G1", score: 2 },
         { playerId: "PlayerC", gameId: "G1", score: 3 },
         { playerId: "PlayerD", gameId: "G1"},
         { playerId: "PlayerE", gameId: "G1", score: null }
      ]
   },
   {
      $group:
      {  
         _id: "$gameId",
         playerId:
            { 
               $top:
                  {    
                     output: [ "$playerId", "$score" ],
                     sortBy: { "score": 1 }
                  }
            }
      }
   }
] )

----------------------------------------

TITLE: Inserting Document for Sort-Only Update in MongoDB
DESCRIPTION: Inserts a document into the 'students' collection to demonstrate a sort-only update operation.

LANGUAGE: javascript
CODE:
db.students.insertOne( { "_id" : 3, "tests" : [  89,  70,  100,  20 ] } )

----------------------------------------

TITLE: Creating Unique Index for MongoDB Encryption Key Vault in Node.js
DESCRIPTION: This snippet shows how to create a unique index on the 'keyAltNames' field in the 'encryption.__keyVault' namespace using Node.js. It ensures that each key alternate name is unique within the key vault.

LANGUAGE: javascript
CODE:
await clientEncryption.keyVault.createIndex(
  { keyAltNames: 1 },
  { unique: true, partialFilterExpression: { keyAltNames: { $exists: true } } }
);

----------------------------------------

TITLE: Starting MongoDB Shard with Journal Compression
DESCRIPTION: Command to start a MongoDB shard server with custom journal compression settings

LANGUAGE: bash
CODE:
mongod --shardsvr --wiredTigerJournalCompressor <differentCompressor|none> --replSet ...

----------------------------------------

TITLE: Updating MongoDB Cluster Authentication Mode (Bash)
DESCRIPTION: MongoDB shell command to update the cluster authentication mode to 'sendX509' using the setParameter command. This allows nodes to send X.509 certificates for authentication.

LANGUAGE: bash
CODE:
db.adminCommand( { setParameter: 1, clusterAuthMode: "sendX509" } )

----------------------------------------

TITLE: Defining MongoDB Platform Compatibility Table in RST
DESCRIPTION: RST list-table directive defining a compatibility matrix for MongoDB across different operating systems. Includes platform names, support status, and minimum OS version requirements.

LANGUAGE: rst
CODE:
.. list-table::
   :header-rows: 1
   :stub-columns: 1
   :class: compatibility

   * - Platform
     - macOS
     - Windows
     - Linux

   * - Supported?
     - |checkmark|
     - |checkmark|
     -

   * - OS Version
     - 10.10+
     - 7+
     - N/A

----------------------------------------

TITLE: Result of Inverse Hyperbolic Cosine Calculation in Radians
DESCRIPTION: Shows the output document after calculating the inverse hyperbolic cosine in radians.

LANGUAGE: javascript
CODE:
{
  "_id" : ObjectId("5c50782193f833234ba90d85"),
  "x-coordinate" : NumberDecimal("3"),
  "y-coordinate" : NumberDecimal("1.762747174039086050465218649959585")
}

----------------------------------------

TITLE: Custom Average Implementation Using $accumulator
DESCRIPTION: Demonstrates implementing an average calculation using $accumulator to compute average copies per author.

LANGUAGE: javascript
CODE:
db.books.aggregate([
{ 
  $group : 
  { 
    _id : "$author", 
    avgCopies: 
    { 
      $accumulator: 
      {
        init: function() {                        // Set the initial state
          return { count: 0, sum: 0 } 
        },

        accumulate: function(state, numCopies) {  // Define how to update the state
          return {
            count: state.count + 1,
            sum: state.sum + numCopies
          } 
        },

        accumulateArgs: ["$copies"],              // Argument required by the accumulate function

        merge: function(state1, state2) {         // When the operator performs a merge, 
          return {                                // add the fields from the two states
            count: state1.count + state2.count,
            sum: state1.sum + state2.sum
          } 
        },

        finalize: function(state) {               // After collecting the results from all documents,
          return (state.sum / state.count)        // calculate the average
        },
        lang: "js"
      }
    }
  }
}])

----------------------------------------

TITLE: Inserting Documents using MongoDB Shell
DESCRIPTION: Demonstrates how to insert multiple inventory documents using the MongoDB Shell. The documents contain item details including status, size dimensions, and warehouse inventory information.

LANGUAGE: javascript
CODE:
db.inventory.insertMany( [
  { item: "journal", status: "A", size: { h: 14, w: 21, uom: "cm" }, instock: [ { warehouse: "A", qty: 5 } ] },
  { item: "notebook", status: "A",  size: { h: 8.5, w: 11, uom: "in" }, instock: [ { warehouse: "C", qty: 5 } ] },
  { item: "paper", status: "D", size: { h: 8.5, w: 11, uom: "in" }, instock: [ { warehouse: "A", qty: 60 } ] },
  { item: "planner", status: "D", size: { h: 22.85, w: 30, uom: "cm" }, instock: [ { warehouse: "A", qty: 40 } ] },
  { item: "postcard", status: "A", size: { h: 10, w: 15.25, uom: "cm" }, instock: [ { warehouse: "B", qty: 15 }, { warehouse: "C", qty: 35 } ] }
]);

----------------------------------------

TITLE: Splitting a Chunk in Half using find Option
DESCRIPTION: Example of using the split command to split a chunk in the 'people' collection of the 'test' database. It uses the 'find' option to identify the chunk containing documents matching { _id : 99 }.

LANGUAGE: javascript
CODE:
db.adminCommand( { split : "test.people", find : { _id : 99 } } )

----------------------------------------

TITLE: Creating user-defined role with inherited privileges in MongoDB
DESCRIPTION: This example shows creating a user-defined role 'appAdmin' for the 'myApp' database with its own privileges and inherited privileges from the 'appUser' role.

LANGUAGE: javascript
CODE:
{
   _id: "myApp.appAdmin",
   role: "appAdmin",
   db: "myApp",
   privileges: [
       {
          resource: { db: "myApp", collection: "" },
          actions: [ "insert", "dbStats", "collStats", "compact" ]
       }
   ],
   roles: [
       { role: "appUser", db: "myApp" }
   ]
}

----------------------------------------

TITLE: Viewing C# Driver Code Examples
DESCRIPTION: This snippet indicates that the user is viewing C# driver code examples and instructs how to switch to a different driver.

LANGUAGE: csharp
CODE:
// You are viewing the C# driver code examples.
// Use the dropdown menu to select a different driver.

----------------------------------------

TITLE: MongoDB currentOp Output Structure for Standalone Instance
DESCRIPTION: Shows the complete JSON structure returned by the currentOp command when executed on a standalone MongoDB instance. Includes operation details, cursor information, lock statistics, and progress metrics.

LANGUAGE: javascript
CODE:
{
  "inprog": [
       {
         "type" : <string>,
         "host" : <string>,
         "desc" : <string>,
         "connectionId" : <number>,
         "client" : <string>,
         "appName" : <string>,
         "clientMetadata" : <document>,
         "active" : <boolean>,
         "currentOpTime" : <string>,
         "effectiveUsers" : [
            {
               "user" : <string>,
               "db" : <string>
            }
         ],
         "opid" : <number>,
         "lsid" : {
            "id" : <UUID>,
            "uid" : <BinData>
         },
         "secs_running" : <NumberLong()>,
         "microsecs_running" : <number>,
         "op" : <string>,
         "ns" : <string>,
         "command" : <document>,
         "queryFramework" : <string>,
         "planSummary": <string>,
         "cursor" : {
            "cursorId" : <NumberLong()>,
            "createdDate" : <ISODate()>,
            "lastAccessDate" : <ISODate()>,
            "nDocsReturned" : <NumberLong()>,
            "nBatchesReturned" : <NumberLong()>,
            "noCursorTimeout" : <boolean>,
            "tailable" : <boolean>,
            "awaitData" : <boolean>,
            "originatingCommand" : <document>,
            "planSummary" : <string>,
            "operationUsingCursorId" : <NumberLong()>
         },
         "msg": <string>,
         "progress" : {
             "done" : <number>,
             "total" : <number>
         },
         "killPending" : <boolean>,
         "numYields" : <number>,
         "dataThroughputLastSecond" : <number>, 
         "dataThroughputAverage" : <number>, 
         "locks" : {
             "ParallelBatchWriterMode" : <string>,
             "ReplicationStateTransition" : <string>,
             "Global" : <string>,
             "Database" : <string>,
             "Collection" : <string>,
             "Metadata" : <string>,
             "oplog" : <string>
         },
         "waitingForLock" : <boolean>,
         "lockStats" : {
             "ParallelBatchWriterMode" : {
                "acquireCount": {
                   "r": <NumberLong>,
                   "w": <NumberLong>,
                   "R": <NumberLong>,
                   "W": <NumberLong>
                },
                "acquireWaitCount": {
                   "r": <NumberLong>,
                   "w": <NumberLong>,
                   "R": <NumberLong>,
                   "W": <NumberLong>
                },
                "timeAcquiringMicros" : {
                   "r" : NumberLong(0),
                   "w" : NumberLong(0),
                   "R" : NumberLong(0),
                   "W" : NumberLong(0)
                },
                "deadlockCount" : {
                   "r" : NumberLong(0),
                   "w" : NumberLong(0),
                   "R" : NumberLong(0),
                   "W" : NumberLong(0)
                }
             },
             "ReplicationStateTransition" : {
                ...
             },
             "Global": {
                ...
             },
             "Database" : {
                ...
             },
             ...
         }
       },
       ...
   ],
   "fsyncLock": <boolean>,
   "info": <string>,
    "ok": <num>
}

----------------------------------------

TITLE: Specifying Required MongoDB Namespaces for dbAdmin Permissions
DESCRIPTION: Lists the specific MongoDB namespaces where the database user must have dbAdmin permissions to complete the encryption tutorial. This includes the encryption key vault and the medical records database.

LANGUAGE: plaintext
CODE:
- ``encryption.__keyVault``
- ``medicalRecords`` database

----------------------------------------

TITLE: Verifying THP Settings
DESCRIPTION: Commands to verify the current THP settings for both standard Linux and Red Hat systems.

LANGUAGE: sh
CODE:
cat /sys/kernel/mm/transparent_hugepage/enabled && cat /sys/kernel/mm/transparent_hugepage/defrag

LANGUAGE: sh
CODE:
cat /sys/kernel/mm/redhat_transparent_hugepage/enabled && cat /sys/kernel/mm/redhat_transparent_hugepage/defrag

----------------------------------------

TITLE: Creating Text Index on Item Field in MongoDB
DESCRIPTION: This snippet creates a text index on the 'item' field of the 'sales' collection.

LANGUAGE: javascript
CODE:
db.sales.createIndex( { item: "text" } )

----------------------------------------

TITLE: MongoDB Shard Key Index Patterns
DESCRIPTION: Shows valid supporting index patterns for a shard key {a.x: 1, b: 'hashed'}. AnalyzeShardKey supports multiple index patterns while shardCollection requires an exact match.

LANGUAGE: mongodb
CODE:
{ a.x: 1, b: 1, ... }
{ a.x: "hashed", b: 1, ... }
{ a.x: 1, b: "hashed", ... }
{ a.x: "hashed", b: "hashed", ...}

----------------------------------------

TITLE: Excluding Fields from MongoDB Wildcard Index
DESCRIPTION: Creates a wildcard index that excludes the attributes.memory field while including all other fields.

LANGUAGE: javascript
CODE:
db.products.createIndex(
   {
      "$**" : 1
   },
   {
      "wildcardProjection" : {
         "attributes.memory" : 0
      }
   }
)

----------------------------------------

TITLE: Connecting to MongoDB Config Server with mongosh
DESCRIPTION: JavaScript command to connect to a MongoDB config server using mongosh. It specifies the host and port for the connection.

LANGUAGE: javascript
CODE:
mongosh --host <hostname> --port <port>

----------------------------------------

TITLE: Restarting MongoDB Secondary After Key Rotation
DESCRIPTION: Bash command to restart a MongoDB secondary after KMIP master key rotation, without the rotation option. It includes standard encryption and KMIP configuration options.

LANGUAGE: bash
CODE:
mongod --enableEncryption --kmipServerName <KMIP Server HostName> \
  --kmipServerCAFile ca.pem --kmipClientCertificateFile client.pem

----------------------------------------

TITLE: Document with Plain-Text Proxy Field for Randomly Encrypted SSN in MongoDB
DESCRIPTION: Example of a document structure with a plain-text 'last4ssn' field added as a queryable proxy for the randomly encrypted SSN field in MongoDB CSFLE.

LANGUAGE: json
CODE:
{
   "_id": "5d6ecdce70401f03b27448fc",
   "name": "Jon Doe",
   "ssn": 241014209,
   "last4ssn": 4209,
   "bloodType": "AB+",
   "medicalRecords": [
      {
            "weight": 180,
            "bloodPressure": "120/80"
      }
   ],
   "insurance": {
      "provider": "MaestCare",
      "policyNumber": 123142
   }
}

----------------------------------------

TITLE: Installing MongoDB Enterprise Components with OpenSSL 3
DESCRIPTION: Commands to install MongoDB Enterprise database, tools, and Shell with OpenSSL 3 support

LANGUAGE: sh
CODE:
sudo yum install -y mongodb-enterprise-database mongodb-enterprise-tools mongodb-mongosh-shared-openssl3

----------------------------------------

TITLE: Log Timestamp Format
DESCRIPTION: Format of the timestamp appended to rotated log files when using rename mode.

LANGUAGE: text
CODE:
<YYYY>-<mm>-<DD>T<HH>-<MM>-<SS>

----------------------------------------

TITLE: MongoDB Time Series Granularity Options
DESCRIPTION: Available granularity options for MongoDB time series collections. The granularity parameter affects how time series data is stored internally and impacts performance. Default value is 'seconds' for high-frequency ingestion.

LANGUAGE: javascript
CODE:
"seconds"
"minutes"
"hours"

----------------------------------------

TITLE: Connecting to MongoDB Mongos Instance
DESCRIPTION: Command to connect to a mongos instance running on a specific host using authentication credentials.

LANGUAGE: bash
CODE:
mongosh "mongodb://admin01@mongodb6.example.net:27017"

----------------------------------------

TITLE: Defining Map Function for MongoDB Map-Reduce
DESCRIPTION: Creates a map function that emits the customer ID as the key and the order price as the value for each document in the collection.

LANGUAGE: javascript
CODE:
var map = function() {
    emit(this.cust_id, this.price);
};

----------------------------------------

TITLE: Upserting with Bulk.find.updateOne() Using Aggregation Pipeline in MongoDB
DESCRIPTION: Illustrates using Bulk.find.upsert() with updateOne() and an aggregation pipeline, showing how to achieve similar behavior to update operators using pipeline stages.

LANGUAGE: javascript
CODE:
var bulk = db.items.initializeUnorderedBulkOp();
bulk.find( { item: "Not Found", status: "P" } ).upsert().updateOne(
   [  
      { $replaceRoot: { newRoot: { $mergeObjects: [ { qty: 0, inStock: true }, "$$ROOT"  ] } } },
      { $set: { points: 0, lastModified: "$$NOW" } }
   ]
);
bulk.execute();

----------------------------------------

TITLE: Generating Random UUID in MongoDB
DESCRIPTION: Shows how to generate a random RFC 4122 v4 format UUID using the UUID() method without arguments.

LANGUAGE: javascript
CODE:
UUID()

LANGUAGE: javascript
CODE:
UUID("dee11d4e-63c6-4d90-983c-5c9f1e79e96c")

----------------------------------------

TITLE: Querying GeoJSON Polygons with Custom CRS in MongoDB
DESCRIPTION: Shows how to use $geoWithin with a single-ringed GeoJSON polygon using a custom MongoDB coordinate reference system (CRS) for queries covering areas larger than a hemisphere.

LANGUAGE: javascript
CODE:
{
   <location field>: {
      $geoWithin: {
         $geometry: {
           type: "Polygon" ,
           coordinates: [ <coordinates> ],
           crs: {
              type: "name",
              properties: { name: "urn:x-mongodb:crs:strictwinding:EPSG:4326" }
           }
         }
      }
   }
}

----------------------------------------

TITLE: Example of CollectionAuxiliaryMetadataMismatch in MongoDB Output
DESCRIPTION: This example demonstrates how a CollectionAuxiliaryMetadataMismatch inconsistency appears in MongoDB output. It shows mismatching auxiliary metadata across shards for a collection in the 'test.authors' namespace.

LANGUAGE: json
CODE:
{
   "cursor": {
      "id": Long("0"),
      "ns": "test.$cmd.aggregate",
      "firstBatch": [
         {
            "type": "CollectionAuxiliaryMetadataMismatch",
            "description": "Found collection with mismatching auxiliary metadata across shards and/or config server",
            "details": {
               "namespace": "test.authors",
               "collectionMetadata": [ 
                  { "md": { "exampleField": 123 }, "shards": [ "shard0" ] },
                  { "md": { "exampleField": 321 }, "shards": [ "shard1" ] }
               ]
            }
         }
      ],
   },
   "ok": 1
}

----------------------------------------

TITLE: Creating MongoDB Capped Collection
DESCRIPTION: Creates a capped collection named 'log' with a maximum size of 5MB and maximum document limit of 20,000 records.

LANGUAGE: javascript
CODE:
db.createCollection( "log", { capped: true, size: 5242880, max: 20000 } )

----------------------------------------

TITLE: Sample Document Structure in MongoDB
DESCRIPTION: Example document structure used to demonstrate delete operations

LANGUAGE: javascript
CODE:
db.orders.insertOne(
   {
      _id: ObjectId("563237a41a4d68582c2509da"),
      stock: "Brent Crude Futures",
      qty: 250,
      type: "buy-limit",
      limit: 48.90,
      creationts: ISODate("2015-11-01T12:30:15Z"),
      expiryts: ISODate("2015-11-01T12:35:15Z"),
      client: "Crude Traders Inc."
   }
)

----------------------------------------

TITLE: Generating MongoDB Test CA Certificates
DESCRIPTION: Series of OpenSSL commands to generate test CA certificates, intermediate authority certificates, and final CA PEM file for MongoDB TLS/SSL testing.

LANGUAGE: bash
CODE:
openssl genrsa -out mongodb-test-ca.key 4096

LANGUAGE: bash
CODE:
openssl req -new -x509 -days 1826 -key mongodb-test-ca.key -out mongodb-test-ca.crt -config openssl-test-ca.cnf

LANGUAGE: bash
CODE:
openssl genrsa -out mongodb-test-ia.key 4096

LANGUAGE: bash
CODE:
openssl req -new -key mongodb-test-ia.key -out mongodb-test-ia.csr -config openssl-test-ca.cnf

LANGUAGE: bash
CODE:
openssl x509 -sha256 -req -days 730 -in mongodb-test-ia.csr -CA mongodb-test-ca.crt -CAkey mongodb-test-ca.key -set_serial 01 -out mongodb-test-ia.crt -extfile openssl-test-ca.cnf -extensions v3_ca

LANGUAGE: bash
CODE:
cat mongodb-test-ia.crt mongodb-test-ca.crt > test-ca.pem

----------------------------------------

TITLE: Configuring MongoDB Connection with Client-Side Encryption using Mongo()
DESCRIPTION: The Mongo() constructor can be used within mongosh to establish connections with client-side field level encryption. It supports multiple KMS providers including AWS KMS, Azure Key Vault, Google Cloud Platform KMS, and local key management.

LANGUAGE: javascript
CODE:
Mongo()

----------------------------------------

TITLE: Basic $sortArray Syntax Definition - JavaScript
DESCRIPTION: Demonstrates the basic syntax structure for the $sortArray operator, showing the required input and sortBy fields.

LANGUAGE: javascript
CODE:
$sortArray: {
   input: <array>,
   sortBy: <sort spec>
}

----------------------------------------

TITLE: MongoDB Version Number Format Example
DESCRIPTION: Demonstrates the MongoDB version numbering format where X.Y.Z represents major, minor, and patch versions respectively.

LANGUAGE: text
CODE:
X.Y.Z

----------------------------------------

TITLE: Configuring MongoDB Binding to Multiple IP Addresses
DESCRIPTION: Example showing how to bind mongod to both localhost and a specific hostname using the --bind_ip parameter. This allows the MongoDB instance to accept connections from both local and remote clients at the specified address.

LANGUAGE: shell
CODE:
mongod --bind_ip localhost,My-Example-Associated-Hostname

----------------------------------------

TITLE: MongoDB Hyperbolic Tangent with Radian Input
DESCRIPTION: Example showing how to insert and calculate hyperbolic tangent of an angle already stored in radians.

LANGUAGE: javascript
CODE:
db.trigonometry.insertOne(
   {
      "_id" : ObjectId( "5c50782193f833234ba90d55" ),
      "angle" : NumberDecimal( "1.6301023541559787031443874490659" )
   }
)

LANGUAGE: javascript
CODE:
db.trigonometry.aggregate( [
   {
      $addFields : {
         "tanh_output" : { $tanh : "$angle" }
      }
   }
] )

----------------------------------------

TITLE: Example Update Status Output
DESCRIPTION: Example output showing update counter information

LANGUAGE: javascript
CODE:
{
   arrayFilters : Long("0"),
   failed : Long("0"),
   pipeline : Long("0"),
   total : Long("1")
}

----------------------------------------

TITLE: Connecting to MongoDB with SSL/TLS Client Certificate
DESCRIPTION: This command demonstrates how to connect to a MongoDB server using mongosh with SSL/TLS and a client certificate for authentication.

LANGUAGE: javascript
CODE:
mongosh --tls --host <serverHost> --tlsCertificateKeyFile test-client.pem  --tlsCAFile test-ca.pem

----------------------------------------

TITLE: Example Active Directory Group Objects
DESCRIPTION: Demonstrates sample group objects in Active Directory with attributes like distinguished name and member listings.

LANGUAGE: bash
CODE:
dn:CN=marketing,CN=Users,DC=example,DC=com
member:CN=bob,CN=Users,DC=marketing,DC=example,DC=com
member:CN=joe,CN=Users,DC=analytics,DC=example,DC=com

dn:CN=engineering,CN=Users,DC=example,DC=com
member:CN=web,CN=Users,DC=example,DC=com
member:CN=dba,CN=users,DC=example,DC=com

dn:CN=web,CN=Users,DC=example,DC=com
member:CN=alice,CN=Users,DC=engineering,DC=example,DC=com

dn:CN=dba,CN=Users,DC=example,DC=com
member:CN=sam,CN=Users,DC=dba,DC=example,DC=com

dn:CN=PrimaryApplication,CN=Users,DC=example,DC=com
member:CN=sam,CN=Users,DC=dba,DC=example,DC=com
member:CN=alice,CN=Users,DC=engineering,DC=example,DC=com

----------------------------------------

TITLE: Duplicate Document Example in MongoDB
DESCRIPTION: Example showing duplicate documents with the same message_id across different datacenters, illustrating the result of failover writes.

LANGUAGE: javascript
CODE:
{
  "_id" : ObjectId("56f08c447fe58b2e96f595fa"),
  "message_id" : 329620
  "datacenter" : "alfa",
  "userid" : 123,
  data : {...}
}
{
  "_id" : ObjectId("56f08c457fe58b2e96f595fb"),
  "message_id" : 329620
  "datacenter" : "bravo",
  "userid" : 123,
  ...
}

----------------------------------------

TITLE: Valid wildcardProjection Specifications in MongoDB
DESCRIPTION: Demonstrates correct usage of wildcardProjection in MongoDB indexing. These specifications allow for wildcard indexing of all fields or specific fields combined with wildcards.

LANGUAGE: javascript
CODE:
{ "$**": 1 }  
{ "userID":, "$**": 1 }

----------------------------------------

TITLE: Defining MongoDB Atlas Search Synonym Mappings
DESCRIPTION: A MongoDB document structure that defines synonym mappings configuration with status tracking across shards. The configuration includes mapping definitions, analyzer settings, and status information for each shard in the cluster.

LANGUAGE: javascript
CODE:
[
  {
    id: '65240be420da840844a4d077',
    name: 'synonym_mappings',
    status: 'READY',
    queryable: true,
    latestDefinitionVersion: {
      version: 0,
      createdAt: ISODate("2023-10-09T14:19:16.305Z")
    },
    latestDefinition: {
      mappings: {
        dynamic: true,
        fields: {
          fullplot: { type: 'string' }
        }
      },
      synonyms: [
        {
          name: 'synonym_mapping',
          analyzer: 'lucene.english',
          source: { collection: 'synonyms' }
        }
      ]
    },
    synonymMappingStatus: 'READY',
    synonymMappingStatusDetail: [
      {
        synonym_mapping: {
          status: 'READY',
          queryable: true
        }
      }
    ],
    statusDetail: [
      {
        hostname: 'atlas-n1cm1j-shard-00-02',
        status: 'READY',
        queryable: true,
        mainIndex: {
          status: 'READY',
          queryable: true,
          definitionVersion: {
            version: 0,
            createdAt: ISODate("2023-10-09T14:19:16.000Z")
          },
          definition: {
            mappings: {
              dynamic: true,
              fields: {
                fullplot: {
                  type: 'string',
                  indexOptions: 'offsets',
                  store: true,
                  norms: 'include'
                }
              }
            },
            synonyms: [
              {
                name: 'synonym_mapping',
                analyzer: 'lucene.english',
                source: { collection: 'synonyms' }
              }
            ]
          },
          synonymMappingStatus: 'READY',
          synonymMappingStatusDetail: [
            {
              synonym_mapping: {
                status: 'READY',
                queryable: true
              }
            }
          ]
        }
      },
      {
        hostname: 'atlas-n1cm1j-shard-00-01',
        status: 'READY',
        queryable: true,
        mainIndex: {
          status: 'READY',
          queryable: true,
          definitionVersion: {
            version: 0,
            createdAt: ISODate("2023-10-09T14:19:16.000Z")
          },
          definition: {
            mappings: {
              dynamic: true,
              fields: {
                fullplot: {
                  type: 'string',
                  indexOptions: 'offsets',
                  store: true,
                  norms: 'include'
                }
              }
            },
            synonyms: [
              {
                name: 'synonym_mapping',
                analyzer: 'lucene.english',
                source: { collection: 'synonyms' }
              }
            ]
          },
          synonymMappingStatus: 'READY',
          synonymMappingStatusDetail: [
            {
              synonym_mapping: {
                status: 'READY',
                queryable: true
              }
            }
          ]
        }
      },
      {
        hostname: 'atlas-n1cm1j-shard-00-00',
        status: 'READY',
        queryable: true,
        mainIndex: {
          status: 'READY',
          queryable: true,
          definitionVersion: {
            version: 0,
            createdAt: ISODate("2023-10-09T14:19:16.000Z")
          },
          definition: {
            mappings: {
              dynamic: true,
              fields: {
                fullplot: {
                  type: 'string',
                  indexOptions: 'offsets',
                  store: true,
                  norms: 'include'
                }
              }
            },
            synonyms: [
              {
                name: 'synonym_mapping',
                analyzer: 'lucene.english',
                source: { collection: 'synonyms' }
              }
            ]
          },
          synonymMappingStatus: 'READY',
          synonymMappingStatusDetail: [
            {
              synonym_mapping: {
                status: 'READY',
                queryable: true
              }
            }
          ]
        }
      }
    ]
  }
]

----------------------------------------

TITLE: Analyzing Shard Key { userId: 1 } Read/Write Distribution with MongoDB analyzeShardKey()
DESCRIPTION: This snippet demonstrates using analyzeShardKey() to evaluate the read/write distribution of the { userId: 1 } shard key on the social.post collection, without analyzing key characteristics.

LANGUAGE: javascript
CODE:
use social
db.post.analyzeShardKey(
   { userId: 1 },
   {
      keyCharacteristics: false,
      readWriteDistribution: true
   }
)

----------------------------------------

TITLE: Creating Flavors Collection in MongoDB
DESCRIPTION: This snippet likely creates a 'flavors' collection in MongoDB with sample data. It's referenced as an include statement, suggesting it's a common setup used across multiple examples.

LANGUAGE: mongodb
CODE:
.. include:: /includes/let-example-create-flavors.rst

----------------------------------------

TITLE: RST Documentation Structure for MongoDB Configuration
DESCRIPTION: ReStructuredText markup defining the documentation structure for MongoDB configuration and maintenance operations, including toctree directives and cross-references.

LANGUAGE: rst
CODE:
.. _config-maintenance:\n\n=============================\nConfiguration and Maintenance\n=============================\n\n.. default-domain:: mongodb\n\nThis section describes routine management operations.\n\n:doc:`/tutorial/terminate-running-operations`\n   Stop in progress MongoDB client operations using\n   :method:`db.killOp()` and :method:`~cursor.maxTimeMS()`.\n\n:doc:`/tutorial/rotate-log-files`\n   Archive the current log files and start new ones.\n\n.. toctree::\n   :titlesonly:\n   :hidden:\n\n   Terminate Operations </tutorial/terminate-running-operations>\n   Rotate Log Files </tutorial/rotate-log-files>

----------------------------------------

TITLE: MongoDB System Profile Output Example
DESCRIPTION: Illustrates how the comment appears in the system.profile collection output. This helps in tracking and identifying specific queries in diagnostic data.

LANGUAGE: javascript
CODE:
{
   "op" : "query",
   "ns" : "guidebook.restaurant",
   "query" : {
      "find" : "restaurant",
      "filter" : {
         "borough" : "Manhattan"
      },
      "comment" : "Find all Manhattan restaurants"
   },
   ...
}

----------------------------------------

TITLE: Manual Document Decryption in C#
DESCRIPTION: Demonstrates the process of retrieving and decrypting an encrypted document using the MongoDB C# driver.

LANGUAGE: csharp
CODE:
// Code reference: /includes/queryable-encryption/fundamentals/manual-encryption/manual-enc.cs

----------------------------------------

TITLE: MongoDB Compass Query Filter
DESCRIPTION: Shows how to construct a query filter and projection in MongoDB Compass UI. The filter selects documents with status 'A' and projects item, status fields and the last element of instock array.

LANGUAGE: javascript
CODE:
{ status: "A" }

LANGUAGE: javascript
CODE:
{ item: 1, status: 1, instock: { $slice: -1 } }

----------------------------------------

TITLE: Configuring AWS IAM Role Authentication for MongoDB in Go
DESCRIPTION: This Go code snippet shows how to set up an empty map for AWS credentials, instructing the MongoDB driver to automatically retrieve IAM role credentials from the environment.

LANGUAGE: go
CODE:
kmsProviderCredentials := map[string]map[string]interface{}{
  "aws": { },
}

----------------------------------------

TITLE: Using Echo Function
DESCRIPTION: Demonstrates how to use the stored echo function.

LANGUAGE: javascript
CODE:
echo("test")

----------------------------------------

TITLE: Setting Active Fault Duration via Command Line in MongoDB
DESCRIPTION: This snippet shows how to set the 'activeFaultDurationSecs' parameter to 300 seconds (5 minutes) when starting mongos from the command line.

LANGUAGE: bash
CODE:
mongos --setParameter activeFaultDurationSecs=300

----------------------------------------

TITLE: Verifying MongoDB Cluster Lock State
DESCRIPTION: Aggregation pipeline to check if the cluster is properly locked using currentOp

LANGUAGE: javascript
CODE:
db.getSiblingDB("admin").aggregate([
   { $currentOp: { } },
   { $facet: {
      "locked": [
         { $match: { $and: [
            { fsyncLock: { $exists: true } }
         ] } }
      ],
      "unlocked": [
         { $match: { fsyncLock: { $exists: false } } }
      ]
   } },
   { $project: {
      "fsyncLocked": { $gt: [ { $size: "$locked" }, 0 ] },
      "fsyncUnlocked": { $gt: [ { $size: "$unlocked" }, 0 ] }
   } }
])

----------------------------------------

TITLE: Utility Functions in MongoDB Shell
DESCRIPTION: Various utility functions for tasks like MD5 hashing, random number generation, and system checks

LANGUAGE: javascript
CODE:
crypto.createHash( 'md5' ).update( fs.readFileSync( <filename> ) ).digest( 'hex' )

LANGUAGE: javascript
CODE:
process.platform === 'win32'

LANGUAGE: javascript
CODE:
Math.random()

----------------------------------------

TITLE: Connecting to MongoDB using mongosh
DESCRIPTION: This snippet demonstrates how to connect to a MongoDB instance using the mongosh shell. It specifies the connection string, API version, and authentication details.

LANGUAGE: bash
CODE:
mongosh "mongodb+srv://mongos0.example.com/?authSource=admin" --apiVersion 1 --username myDatabaseUser

----------------------------------------

TITLE: Map-Reduce Implementation - Map Function
DESCRIPTION: Defines the map function that emits userid as key and an object containing session statistics as value.

LANGUAGE: javascript
CODE:
var mapFunction = function() {
    var key = this.userid;
    var value = { total_time: this.length, count: 1, avg_time: 0 };
    emit( key, value );
};

----------------------------------------

TITLE: Defining $rtrim Syntax in MongoDB Aggregation
DESCRIPTION: Demonstrates the syntax for using the $rtrim operator in MongoDB aggregation. It shows how to specify the input string and optional characters to trim.

LANGUAGE: javascript
CODE:
{ $rtrim: { input: <string>,  chars: <string> } }

----------------------------------------

TITLE: Reading MongoDB Balancer Status During Defragmentation
DESCRIPTION: Example JSON output from MongoDB balancer command when a namespace is undergoing chunk defragmentation. Shows chunk size, compliance status, violation reason, and current progress of the defragmentation process.

LANGUAGE: javascript
CODE:
{
   "chunkSize": Long("128"),
   "balancerCompliant": false,
   "firstComplianceViolation": "defragmentingChunks",
   "details": {
      "currentPhase": "moveAndMergeChunks",
      "progress": { "remainingChunksToProcess": 1 }
   }
}

----------------------------------------

TITLE: Creating MongoDB Stream Processor - Basic Syntax
DESCRIPTION: Basic syntax structure for creating a stream processor, showing the three main components: name, pipeline array, and options object.

LANGUAGE: json
CODE:
sp.createStreamProcessor(
  <name>,
  [
    <pipeline>
  ],
  {
    <options>
  }
)

----------------------------------------

TITLE: Server Shutdown Commands
DESCRIPTION: Commands for gracefully shutting down MongoDB servers.

LANGUAGE: javascript
CODE:
db.shutdownServer()
db.adminCommand( { shutdown: 1 } )

----------------------------------------

TITLE: Using db.adminCommand() for Admin Database Operations
DESCRIPTION: This snippet shows how to use the db.adminCommand() helper to run commands in the context of the admin database without switching to it explicitly.

LANGUAGE: javascript
CODE:
db.adminCommand( {buildInfo: 1} )

----------------------------------------

TITLE: Aggregating Total Views with Text Search in MongoDB
DESCRIPTION: Performs a text search for 'cake' and calculates total views for matching documents using aggregation pipeline.

LANGUAGE: javascript
CODE:
db.articles.aggregate(
      [
        { $match: { $text: { $search: "cake" } } },
        { $group: { _id: null, views: { $sum: "$views" } } }
      ]
   )

----------------------------------------

TITLE: Results of $arrayElemAt Usage in MongoDB Aggregation
DESCRIPTION: Shows the output of the aggregation pipeline that uses $arrayElemAt to extract the first and last elements of the 'favorites' array for each document in the 'users' collection.

LANGUAGE: javascript
CODE:
{ "_id" : 1, "name" : "dave123", "first" : "chocolate", "last" : "apples" }
{ "_id" : 2, "name" : "li", "first" : "apples", "last" : "pie" }
{ "_id" : 3, "name" : "ahn", "first" : "pears", "last" : "cherries" }
{ "_id" : 4, "name" : "ty", "first" : "ice cream", "last" : "ice cream" }

----------------------------------------

TITLE: Installing Latest MongoDB Enterprise Server on Debian/Ubuntu
DESCRIPTION: This command installs the latest release of MongoDB Enterprise Server using apt-get. The package name is represented by a placeholder {+package-name-enterprise+}.

LANGUAGE: bash
CODE:
sudo apt-get install -y {+package-name-enterprise+}

----------------------------------------

TITLE: Query Multiple Roles
DESCRIPTION: Example of querying information for multiple roles using an array specification.

LANGUAGE: javascript
CODE:
{
  rolesInfo: [
     "<rolename>",
     { role: "<rolename>", db: "<database>" },
     ...
  ]
}

----------------------------------------

TITLE: Modifying MongoDB Capped Collection Size
DESCRIPTION: Modifies the maximum size of an existing capped collection named 'log' to 5,242,880 bytes using the collMod command.

LANGUAGE: javascript
CODE:
db.runCommand( { collMod: "log", cappedSize: 5242880 } )

----------------------------------------

TITLE: Query Analyzer Output for MongoDB Shard Server
DESCRIPTION: Shows the query analyzer output format when executed on a mongod shard server (--shardsvr) in a sharded cluster. Contains detailed sampling metrics including read/write counts and bytes.

LANGUAGE: javascript
CODE:
{
   "desc" : "query analyzer",
   "ns" : "testDb.testColl",
   "collUuid" : UUID("5130b4df-5966-434f-85f0-f8956b5ca74e"),
   "startTime" : ISODate("2023-08-08T16:15:07.427Z"),
   "sampledReadsCount" : NumberLong(2),
   "sampledReadsBytes" : NumberLong(346),
   "sampledWritesCount" : NumberLong(3),
   "sampledWritesBytes" : NumberLong(904)
}

----------------------------------------

TITLE: Manual Field Encryption in MongoDB Shell
DESCRIPTION: MongoDB Shell script showing how to manually encrypt document fields before insertion. Uses JavaScript syntax for MongoDB operations.

LANGUAGE: javascript
CODE:
// Code not visible in provided input

----------------------------------------

TITLE: Creating Index Using C# Driver
DESCRIPTION: Creates an ascending index on the 'name' field using the C# MongoDB driver

LANGUAGE: csharp
CODE:
collection.CreateIndex( IndexKeys<collection>.Ascending("name") );

----------------------------------------

TITLE: Access Control Privilege for balancerCollectionStatus Command
DESCRIPTION: Defines the required privilege actions and resource specification for running the balancerCollectionStatus command when access control is enabled.

LANGUAGE: javascript
CODE:
{ resource: { db: <database>, collection: <collection> }, actions: [ "enableSharding" ] }

----------------------------------------

TITLE: Changing Primary Shard for a Database in MongoDB
DESCRIPTION: This snippet shows how to change the primary shard for a database using the movePrimary command in MongoDB.

LANGUAGE: javascript
CODE:
db.adminCommand(
   {
      movePrimary: <dbName>,
      to: <shardName>
   }
)

----------------------------------------

TITLE: Creating Database with Primary Shard Specification in MongoDB
DESCRIPTION: Extended syntax for enabling sharding on a database while specifying a primary shard. This approach is not recommended as it's better to let the balancer select the primary shard automatically.

LANGUAGE: javascript
CODE:
db.adminCommand( 
   { 
     enableSharding: "<database name>",
     primaryShard: "<shard name>"  
   } 
)

----------------------------------------

TITLE: RedHat/Amazon Linux Repository Configuration
DESCRIPTION: Configuration for setting up the libmongocrypt repository on RedHat-based systems

LANGUAGE: sh
CODE:
[libmongocrypt]
name=libmongocrypt repository
baseurl=https://libmongocrypt.s3.amazonaws.com/yum/redhat/$releasever/libmongocrypt/{+libmongocrypt-version+}/x86_64
gpgcheck=1
enabled=1
gpgkey=https://pgp.mongodb.com/libmongocrypt.asc

----------------------------------------

TITLE: Inserting Sample Data for MongoDB $setEquals Example
DESCRIPTION: Inserts sample documents into a 'bakeryOrders' collection to demonstrate the usage of $setEquals operator. Each document contains arrays of cake and cupcake flavors.

LANGUAGE: javascript
CODE:
db.bakeryOrders.insertMany( [
   { _id: 0, cakes: ["chocolate", "vanilla"], cupcakes: ["chocolate", "vanilla"] },
   { _id: 1, cakes: ["chocolate", "vanilla"], cupcakes: ["vanilla", "chocolate"] },
   { _id: 2, cakes: ["chocolate", "chocolate"], cupcakes: ["chocolate"] },
   { _id: 3, cakes: ["vanilla"], cupcakes: ["chocolate"] },
   { _id: 4, cakes: ["vanilla"], cupcakes: [] }
] )

----------------------------------------

TITLE: MongoDB Connection String for Multiple Languages
DESCRIPTION: Standard MongoDB connection string format used across different drivers. Includes authentication credentials, multiple replica set hosts, authentication source, and replica set name.

LANGUAGE: bash
CODE:
mongodb://myDatabaseUser:D1fficultP%40ssw0rd@mongodb0.example.com:27017,mongodb1.example.com:27017,mongodb2.example.com:27017/?authSource=admin&replicaSet=myRepl

----------------------------------------

TITLE: Creating Clustered Collection with Index in MongoDB
DESCRIPTION: Creates a clustered collection named 'stocks' with a clustered index on the _id field. The index is configured to be unique and named 'stocks clustered key'.

LANGUAGE: javascript
CODE:
db.createCollection(
   "stocks",
   { clusteredIndex: { "key": { _id: 1 }, "unique": true, "name": "stocks clustered key" } }
)

----------------------------------------

TITLE: Optimized Aggregation Pipeline for Distinct Values
DESCRIPTION: Recommended approach using compound index and aggregation pipeline to efficiently query distinct meta.type values. Creates an index on meta.project and meta.type fields, then uses $match and $group stages for optimal performance.

LANGUAGE: javascript
CODE:
db.foo.createIndex({"meta.project":1, "meta.type":1})
db.foo.aggregate([{$match: {"meta.project": 10}},
                     {$group: {_id: "$meta.type"}}])

----------------------------------------

TITLE: Replacing MongoDB Shell with OpenSSL 1.1 Version
DESCRIPTION: Commands to remove existing MongoDB Shell and install version that uses system's OpenSSL 1.1

LANGUAGE: sh
CODE:
sudo yum remove -y mongodb-mongosh && sudo yum install -y mongodb-mongosh-shared-openssl11

----------------------------------------

TITLE: Querying Immediate Children in MongoDB Tree Structure
DESCRIPTION: This query finds all immediate children of a specific parent node in the tree structure, demonstrating how to traverse the hierarchy.

LANGUAGE: javascript
CODE:
db.categories.find( { parent: "Databases" } )

----------------------------------------

TITLE: Reconfiguring MongoDB PSA Replica Set Node for Performance
DESCRIPTION: This JavaScript snippet demonstrates how to reconfigure a secondary node in a MongoDB PSA replica set by setting its votes and priority to 0. This helps mitigate performance issues when the node is unavailable or lagging.

LANGUAGE: javascript
CODE:
cfg = rs.conf();
cfg["members"][<array_index>]["votes"] = 0;
cfg["members"][<array_index>]["priority"] = 0;
rs.reconfig(cfg);

----------------------------------------

TITLE: Setting Default Write Concern in MongoDB
DESCRIPTION: This snippet demonstrates the command used to set the default read and write concern in MongoDB.

LANGUAGE: mongodb
CODE:
:dbcommand:`setDefaultRWConcern`

----------------------------------------

TITLE: MongoDB Lock Modes
DESCRIPTION: Table showing lock modes as represented in db.serverStatus() and db.currentOp() output

LANGUAGE: mongodb
CODE:
R - Global shared (S) lock
W - Global exclusive (X) lock
r - Database/Collection intent shared (IS) lock
w - Database/Collection intent exclusive (IX) lock

----------------------------------------

TITLE: Specifying AND Condition on Nested Fields in MongoDB
DESCRIPTION: This query demonstrates how to specify multiple conditions on nested fields using an AND operation. It selects documents where 'size.h' is less than 15, 'size.uom' equals 'in', and 'status' equals 'D'.

LANGUAGE: javascript
CODE:
db.inventory.find( { "size.h": { $lt: 15 }, "size.uom": "in", status: "D" } )

----------------------------------------

TITLE: Creating Example Collection in MongoDB
DESCRIPTION: This snippet demonstrates how to create a 'pizzaOrders' collection with sample data using the insertMany() method in MongoDB.

LANGUAGE: javascript
CODE:
db.pizzaOrders.insertMany( [
  { _id: 0, type: "pepperoni", size: "small", price: 19,
    totalNumber: 10, orderDate: ISODate( "2023-03-13T08:14:30Z" ) },
  { _id: 1, type: "pepperoni", size: "medium", price: 20,
    totalNumber: 20, orderDate: ISODate( "2023-03-13T09:13:24Z" ) },
  { _id: 2, type: "pepperoni", size: "large", price: 21,
    totalNumber: 30, orderDate: ISODate( "2023-03-17T09:22:12Z" ) },
  { _id: 3, type: "cheese", size: "small", price: 12,
    totalNumber: 15, orderDate: ISODate( "2023-03-13T11:21:39.736Z" ) },
  { _id: 4, type: "cheese", size: "medium", price: 13,
    totalNumber: 50, orderDate: ISODate( "2024-01-12T21:23:13.331Z" ) },
  { _id: 5, type: "cheese", size: "large", price: 14,
    totalNumber: 10, orderDate: ISODate( "2024-01-12T05:08:13Z" ) },
  { _id: 6, type: "vegan", size: "small", price: 17,
    totalNumber: 10, orderDate: ISODate( "2023-01-13T05:08:13Z" ) },
  { _id: 7, type: "vegan", size: "medium", price: 18,
    totalNumber: 10, orderDate: ISODate( "2023-01-13T05:10:13Z" ) }
] )

----------------------------------------

TITLE: Querying a Time Series Collection in MongoDB
DESCRIPTION: Demonstrates how to query a time series collection using findOne() to return a single document based on a specific timestamp.

LANGUAGE: javascript
CODE:
db.weather.findOne( {
   timestamp: ISODate("2021-05-18T00:00:00.000Z")
} )

----------------------------------------

TITLE: Inserting Sample Data
DESCRIPTION: Creating a collection with sample numerical values for demonstration

LANGUAGE: javascript
CODE:
db.samples.insertMany(
   [
     { _id: 1, value: 19.25 },
     { _id: 2, value: 28.73 },
     { _id: 3, value: 34.32 },
     { _id: 4, value: -45.39 }
   ]
)

----------------------------------------

TITLE: Defining ReStructuredText Substitutions for MongoDB Parameter Documentation
DESCRIPTION: This snippet defines reStructuredText substitutions for the ShardingTaskExecutorPoolMaxSize parameter and specifies it as a maximum value. It also includes an external file with usage examples.

LANGUAGE: reStructuredText
CODE:
.. |parameter| replace:: :parameter:`ShardingTaskExecutorPoolMaxSize`
.. |maximum-or-minimum| replace:: maximum

.. include:: /includes/ShardingTaskExecutorPoolSizeForConfigServers-parameter-example.rst

----------------------------------------

TITLE: Example MongoDB Replica Set Configuration
DESCRIPTION: Shows an initial replica set configuration with two members - one primary node and one arbiter node.

LANGUAGE: javascript
CODE:
{
   "_id" : "rs0",
   "version" : 1,
   "term": 1,
   "members" : [
      {
         "_id" : 0,
         "host" : "mongodb0.example.net:27017",
         "arbiterOnly" : false,
         "buildIndexes" : true,
         "hidden" : false,
         "priority" : 1,
         "tags" : {},
         "secondaryDelaySecs" : Long("0"),
         "votes" : 1
      },
      {
         "_id" : 2,
         "host" : "mongodb1.example.net:27017",
         "arbiterOnly" : true,
         "buildIndexes" : true,
         "hidden" : false,
         "priority" : 0,
         "tags" : {},
         "secondaryDelaySecs" : Long("0"),
         "votes" : 1
      }
   ],
   "protocolVersion" : Long("1"),
   "writeConcernMajorityJournalDefault": true,
   "settings" : {
      "chainingAllowed" : true,
      "heartbeatIntervalMillis" : 2000,
      "heartbeatTimeoutSecs" : 10,
      "electionTimeoutMillis" : 10000,
      "catchUpTimeoutMillis" : 2000,
      "getLastErrorModes" : {},
      "getLastErrorDefaults" : {
         "w" : 1,
         "wtimeout" : 0
      },
      "replicaSetId" : ObjectId("60e6f83923193faa336889d2")
   }
}

----------------------------------------

TITLE: Deleting Multiple Documents in MongoDB using JavaScript Shell
DESCRIPTION: This snippet demonstrates how to delete multiple documents from the 'inventory' collection where the status is 'A' using the MongoDB shell.

LANGUAGE: javascript
CODE:
db.inventory.deleteMany({ status : "A" })

----------------------------------------

TITLE: Using db.revokeRolesFromRole() to Remove Roles in MongoDB
DESCRIPTION: Demonstrates how to use the db.revokeRolesFromRole() method to remove two roles from the 'purchaseAgents' role in the 'emea' database.

LANGUAGE: javascript
CODE:
use emea
db.revokeRolesFromRole( "purchaseAgents",
                        [
                          "writeOrdersCollection",
                          "readOrdersCollection"
                        ],
                        { w: "majority" , wtimeout: 5000 }
                      )

----------------------------------------

TITLE: $addToSet with $setWindowFields Stage Example
DESCRIPTION: Shows how to use $addToSet with $setWindowFields to track unique cake types by state over time.

LANGUAGE: javascript
CODE:
db.cakeSales.aggregate( [
   {
      $setWindowFields: {
         partitionBy: "$state",
         sortBy: { orderDate: 1 },
         output: {
            cakeTypesForState: {
               $addToSet: "$type",
               window: {
                  documents: [ "unbounded", "current" ]
               }
            }
         }
      }
   }
] )

----------------------------------------

TITLE: Specifying Read Concern with Distinct Command in MongoDB
DESCRIPTION: Demonstrates how to use the distinct command with a specified read concern level of 'majority' for consistent reads across a replica set.

LANGUAGE: javascript
CODE:
db.runCommand(
   {
     distinct: "restaurants",
     key: "rating",
     query: { cuisine: "italian" },
     readConcern: { level: "majority" }
   }
)

----------------------------------------

TITLE: Amazon Linux 2023 Repository Configuration
DESCRIPTION: Repository configuration for installing libmongocrypt on Amazon Linux 2023

LANGUAGE: toml
CODE:
[libmongocrypt]
name=libmongocrypt repository
baseurl=https://libmongocrypt.s3.amazonaws.com/yum/amazon/2023/libmongocrypt/{+libmongocrypt-version+}/x86_64
gpgcheck=1
enabled=1
gpgkey=https://pgp.mongodb.com/libmongocrypt.asc

----------------------------------------

TITLE: Performing a Text Search Query with Equality Condition in MongoDB
DESCRIPTION: This query demonstrates how to use the compound index to perform a text search on the 'description' field while also filtering by the 'department' field. It searches for 'green' items in the 'kitchen' department.

LANGUAGE: javascript
CODE:
db.inventory.find( { department: "kitchen", $text: { $search: "green" } } )

----------------------------------------

TITLE: Retrieving ClientEncryption Object in MongoDB JavaScript
DESCRIPTION: This snippet demonstrates the syntax for calling the getClientEncryption() method to obtain the ClientEncryption object for the current database connection. This object is used for explicit encryption and decryption operations in client-side field level encryption.

LANGUAGE: javascript
CODE:
db.getMongo().getClientEncryption();

----------------------------------------

TITLE: Inserting Multiple Documents with MongoDB Compass
DESCRIPTION: Shows the JSON structure for inserting multiple inventory documents through MongoDB Compass interface. The documents contain identical data structure as the shell example but formatted as pure JSON.

LANGUAGE: javascript
CODE:
[
    { "item": "journal", "qty": 25, "size": { "h": 14, "w": 21, "uom": "cm" }, "status": "A" },
    { "item": "notebook", "qty": 50, "size": { "h": 8.5, "w": 11, "uom": "in" }, "status": "A" },
    { "item": "paper", "qty": 100, "size": { "h": 8.5, "w": 11, "uom": "in" }, "status": "D" },
    { "item": "planner", "qty": 75, "size": { "h": 22.85, "w": 30, "uom": "cm" }, "status": "D" },
    { "item": "postcard", "qty": 45, "size": { "h": 10, "w": 15.25, "uom": "cm" }, "status": "A" }
]

----------------------------------------

TITLE: Inserting Quiz Data for StdDevPop Example
DESCRIPTION: Creates a quizzes collection with nested score arrays to demonstrate $stdDevPop usage in $project stage.

LANGUAGE: javascript
CODE:
db.quizzes.insertMany( [
   {
      _id : 1,
      scores : [
         { name : "dave123", score : 85 },
         { name : "dave2", score : 90 },
         { name : "ahn", score : 71 }
      ]
   },
   {
      _id : 2,
      scores : [
         { name : "li", quiz : 2, score : 96 },
         { name : "annT", score : 77 },
         { name : "ty", score : 82 }
      ]
   }
] )

----------------------------------------

TITLE: Database Method Example
DESCRIPTION: Example of MongoDB database administration methods

LANGUAGE: javascript
CODE:
db.createCollection()
db.dropDatabase()
db.getName()
db.stats()

----------------------------------------

TITLE: Querying MongoDB Using $nin Operator for Unmatching Documents
DESCRIPTION: Demonstrates how to use the $nin operator to select documents where the 'quantity' field does not equal 5 or 15, or where the field doesn't exist. The _id field is excluded from the results.

LANGUAGE: javascript
CODE:
db.inventory.find( { quantity: { $nin: [ 5, 15 ] } }, { _id: 0 } )

----------------------------------------

TITLE: Deleting Query Settings with Hash String in MongoDB
DESCRIPTION: This snippet shows how to delete query settings using a query shape hash string with the removeQuerySettings command.

LANGUAGE: javascript
CODE:
db.adminCommand( {
   removeQuerySettings: <string>  // Provide an existing query shape hash string
} )

----------------------------------------

TITLE: Executing resmoke.py with run command in powertest
DESCRIPTION: This snippet adds a space between resmoke.py and run in the powertest command execution. It's likely part of a build or test automation script for MongoDB.

LANGUAGE: python
CODE:
resmoke.py run

----------------------------------------

TITLE: Starting THP Disable Service
DESCRIPTION: Command to start the THP disable service and verify its operation.

LANGUAGE: sh
CODE:
sudo systemctl start disable-transparent-huge-pages

----------------------------------------

TITLE: Inserting Weather Observation Document in MongoDB
DESCRIPTION: Shows how to insert a single weather observation document with multiple nested fields including location data, temperature readings, wind measurements, and visibility conditions. The document structure follows a specific schema for meteorological data with quality control indicators for each measurement.

LANGUAGE: javascript
CODE:
db.weatherdata.insertOne(
      {
         _id: ObjectId("5553a998e4b02cf7151190b8"),
         st: "x+47600-047900",
         ts: ISODate("1984-03-05T13:00:00Z"),
         position: {
            type: "Point",
            coordinates: [ -47.9, 47.6 ]
         },
         elevation: 9999,
         callLetters: "VCSZ",
         qualityControlProcess: "V020",
         dataSource: "4",
         type: "FM-13",
         airTemperature: { value: -3.1, quality: "1" },
         dewPoint: { value: 999.9, quality : "9" },
         pressure: { value: 1015.3, quality: "1" },
         wind: {
            direction: { angle: 999, quality: "9" },
            type: "9",
            speed: { rate: 999.9, quality: "9" }
         },
         visibility: {
            distance: { value: 999999, quality : "9" },
            variability: { value: "N", quality: "9" }
         },
         skyCondition: {
            ceilingHeight: { value: 99999, quality: "9", determination: "9" },
            cavok: "N"
         },
         sections: [ "AG1" ],
         precipitationEstimatedObservation: { 
            discrepancy: "2",
            estimatedWaterDepth: 999 
         }
      }
   )

----------------------------------------

TITLE: Replacing MongoDB Shell with OpenSSL 3 Version
DESCRIPTION: This command removes the existing MongoDB Shell and installs the version that uses the system's OpenSSL 3.

LANGUAGE: sh
CODE:
sudo apt-get remove -y mongodb-mongosh && sudo apt-get install -y mongodb-mongosh-shared-openssl3

----------------------------------------

TITLE: Specifying Coordinates Using Embedded Document in MongoDB
DESCRIPTION: Shows how to specify coordinate pairs using an embedded document format. When specifying longitude and latitude, the first field must contain longitude and the second field must contain latitude, regardless of field names.

LANGUAGE: javascript
CODE:
<field>: { <field1>: <x>, <field2>: <y> }

LANGUAGE: javascript
CODE:
<field>: { <field1>: <longitude>, <field2>: <latitude> }

----------------------------------------

TITLE: Creating Compound Index for Leaderboard Sorting
DESCRIPTION: Creates a compound index on score (descending) and username (ascending) to optimize leaderboard queries.

LANGUAGE: javascript
CODE:
db.leaderboard.createIndex( { score: -1, username: 1 } )

----------------------------------------

TITLE: Setting Default Read Concern in MongoDB
DESCRIPTION: This snippet demonstrates the command used to set the default read concern in MongoDB, which changes the value to 'global'.

LANGUAGE: mongodb
CODE:
:dbcommand:`setDefaultRWConcern`

----------------------------------------

TITLE: Creating a MongoDB Collection with Schema Validation for String Field
DESCRIPTION: This example demonstrates creating a collection with schema validation that requires the storeLocation field to be a string, which would not allow null values for that field.

LANGUAGE: javascript
CODE:
db.createCollection("sales",
   {
      validator:
         {
            "$jsonSchema": {
               "properties": {
                  "storeLocation": { "bsonType": "string" }
               }
            }
         }
    }
 )

----------------------------------------

TITLE: MongoDB Bulk Write Operation Result Example
DESCRIPTION: This snippet shows an example of the output returned after executing a bulk write operation in MongoDB. It includes a summary of the completed operations, such as the number of inserted, matched, modified, and deleted documents.

LANGUAGE: javascript
CODE:
{
   acknowledged: true,
   insertedCount: 2,
   insertedIds: { '0': 3, '1': 4 },
   matchedCount: 2,
   modifiedCount: 2,
   deletedCount: 1,
   upsertedCount: 0,
   upsertedIds: {}
}

----------------------------------------

TITLE: MongoDB Query With pretty()
DESCRIPTION: Example demonstrating the formatted output when using the pretty() method with a find operation. The result is displayed with proper indentation and line breaks.

LANGUAGE: javascript
CODE:
db.books.find().pretty()
{
    "_id" : ObjectId("54f612b6029b47909a90ce8d"),
    "title" : "A Tale of Two Cities",
    "text" : "It was the best of times, it was the worst of times, it was the age of wisdom, it was the age of foolishness...",
    "authorship" : "Charles Dickens"
}

----------------------------------------

TITLE: Updating Secondary Node Priority in MongoDB Replica Set
DESCRIPTION: This snippet demonstrates how to update the priority of a secondary node in a MongoDB replica set after it has caught up with all committed writes. This is the second step in safely modifying a PSA replica set.

LANGUAGE: javascript
CODE:
cfg = rs.conf();
cfg.members[2].priority = 1;
rs.reconfig(cfg);

----------------------------------------

TITLE: MongoDB Compass Collation Note
DESCRIPTION: This snippet provides a note for MongoDB Compass users regarding the examples of indexes and collation in mongosh, directing them to the Compass documentation for instructions on using custom collation with indexes.

LANGUAGE: rst
CODE:
.. note::

   The following examples illustrate indexes and collation in
   :binary:`~bin.mongosh`.

   Refer to the
   :compass:`MongoDB Compass Documentation
   </indexes/>` for instructions on using
   custom collation with indexes in Compass.

----------------------------------------

TITLE: Deleting Multiple Documents in MongoDB using Java Synchronous Driver
DESCRIPTION: This snippet demonstrates how to delete multiple documents using the MongoDB Java synchronous driver. The actual code is not provided in the snippet, but it references an external file.

LANGUAGE: java
CODE:
// Code is referenced from an external file:
// /driver-examples/DocumentationSamples.java

----------------------------------------

TITLE: Checking Linux Distribution Type using grep
DESCRIPTION: Command to check the Linux distribution by searching for the NAME field in system release files. Used to verify if system is running Amazon Linux or Amazon Linux AMI.

LANGUAGE: bash
CODE:
grep ^NAME  /etc/*release

----------------------------------------

TITLE: Using $toString in MongoDB Aggregation Pipeline
DESCRIPTION: Demonstrates a complete aggregation pipeline that uses $toString to convert zipcodes to strings, then sorts the documents based on the converted values.

LANGUAGE: javascript
CODE:
// Define stage to add convertedZipCode field with the converted zipcode value

zipConversionStage = {
   $addFields: {
      convertedZipCode: { $toString: "$zipcode" }
   }
};

// Define stage to sort documents by the converted zipcode

sortStage = {
   $sort: { "convertedZipCode": 1 }
};

db.orders.aggregate( [
  zipConversionStage,
  sortStage
] )

----------------------------------------

TITLE: MongoDB Standard Connection String
DESCRIPTION: Standard MongoDB connection string format with username and password authentication for connecting to a local database. Used across multiple drivers and languages.

LANGUAGE: bash
CODE:
mongodb://myDatabaseUser:D1fficultP%40ssw0rd@localhost

----------------------------------------

TITLE: Creating MongoDB 2D Index - JavaScript
DESCRIPTION: Creates a 2D geospatial index on a specified location field in a MongoDB collection. This index type supports legacy coordinate pairs and enables geospatial queries on a planar surface.

LANGUAGE: javascript
CODE:
db.<collection>.createIndex( { <location field> : "2d" } )

----------------------------------------

TITLE: Configuring Secondary Node with Votes and Zero Priority in MongoDB
DESCRIPTION: This snippet shows how to reconfigure a replica set to add or modify a secondary node with voting rights but zero priority. This is the first step in safely modifying a PSA replica set.

LANGUAGE: javascript
CODE:
cfg = rs.conf();
cfg.members[2] = {
   "_id" : 2,
   "host" : "<hostname>:<port>",
   "votes" : 1,
   "priority" : 0
};
rs.reconfig(cfg);

----------------------------------------

TITLE: Example Usage of sh.abortMoveCollection() in MongoDB
DESCRIPTION: This example shows how to use the sh.abortMoveCollection() method to stop moving a specific collection named 'us_accounts' in the 'sales' database.

LANGUAGE: javascript
CODE:
sh.abortMoveCollection( "sales.us_accounts" )

----------------------------------------

TITLE: Initial Schema with Unbounded Array
DESCRIPTION: Example of a problematic schema using an unbounded array for book reviews that could grow too large.

LANGUAGE: javascript
CODE:
{
   title: "Harry Potter",
   author: "J.K. Rowling",
   publisher: "Scholastic",
   reviews: [ 
      {
         user: "Alice",
         review: "Great book!",
         rating: 5
      },
      {
         user: "Bob",
         review: "Didn't like it!",
         rating: 1
      },
      {
         user: "Charlie",
         review: "Not bad, but could be better.",
         rating: 3
      }
   ]
}

----------------------------------------

TITLE: Querying Array Element in MongoDB Shell
DESCRIPTION: MongoDB shell query to find documents where the quantity of the first element in the 'instock' array is less than or equal to 20.

LANGUAGE: javascript
CODE:
db.inventory.find( { 'instock.0.qty': { $lte: 20 } } )

----------------------------------------

TITLE: Retrieving Mirrored Reads Metrics in MongoDB
DESCRIPTION: This JavaScript code snippet shows how to retrieve mirrored reads metrics using the db.serverStatus() method in the MongoDB shell, specifying the mirroredReads field.

LANGUAGE: javascript
CODE:
db.serverStatus( { mirroredReads: 1 } )

----------------------------------------

TITLE: Cursor Method Example
DESCRIPTION: Example of MongoDB cursor methods for working with query results

LANGUAGE: javascript
CODE:
cursor.hasNext()
cursor.next()
cursor.forEach()
cursor.map()

----------------------------------------

TITLE: Configuring Replica Set Member Tags in MongoDB
DESCRIPTION: Example of how to configure tags for a replica set member using a document with tag name and value pairs. The tag values must be strings.

LANGUAGE: javascript
CODE:
{ "<tag1>": "<string1>", "<tag2>": "<string2>",...  }

----------------------------------------

TITLE: Accessing MongoDB Config Database
DESCRIPTION: Command to access the config database which stores sharded cluster metadata using mongosh shell

LANGUAGE: javascript
CODE:
use config

----------------------------------------

TITLE: Configuring allowDiskUse Option for MongoDB Find and Aggregate Commands
DESCRIPTION: These snippets demonstrate how to explicitly enable or disable disk use for specific find or aggregate commands using the allowDiskUse option.

LANGUAGE: plaintext
CODE:
{ allowDiskUse: false }

LANGUAGE: plaintext
CODE:
{ allowDiskUse: true }

----------------------------------------

TITLE: Installing GPG and Curl Prerequisites
DESCRIPTION: Installs the gnupg and curl packages which are required for GPG key management and download operations.

LANGUAGE: bash
CODE:
sudo apt-get install gnupg curl

----------------------------------------

TITLE: Insert with Write Concern
DESCRIPTION: Example showing how to insert a document with a specific write concern, ensuring write propagation to secondary nodes.

LANGUAGE: javascript
CODE:
db.products.insert(
    { item: "envelopes", qty : 100, type: "Clasp" },
    { writeConcern: { w: 2, wtimeout: 5000 } }
)

----------------------------------------

TITLE: Querying Array Elements in MongoDB Shell
DESCRIPTION: This snippet demonstrates how to query the 'inventory' collection to find documents where the 'tags' array contains the element 'red' using the MongoDB shell.

LANGUAGE: javascript
CODE:
db.inventory.find( { tags: "red" } )

----------------------------------------

TITLE: Viewing Specific User Information in MongoDB
DESCRIPTION: This example demonstrates how to view information and privileges for a specific user named 'Kari' in the 'home' database, without showing credentials.

LANGUAGE: javascript
CODE:
db.runCommand(
   {
     usersInfo:  { user: "Kari", db: "home" },
     showPrivileges: true
   }
)

----------------------------------------

TITLE: Uninstalling MongoDB SELinux Policy
DESCRIPTION: Removes the installed MongoDB SELinux policy using the make uninstall command. This should be run from the directory where the policy repository was downloaded.

LANGUAGE: bash
CODE:
sudo make uninstall

----------------------------------------

TITLE: Checking Replica Set Flow Control Status in MongoDB
DESCRIPTION: Uses the rs.printSecondaryReplicationInfo() method to check for lagging nodes and the serverStatus command to determine if flow control has engaged.

LANGUAGE: javascript
CODE:
rs.printSecondaryReplicationInfo()

LANGUAGE: javascript
CODE:
db.runCommand( { serverStatus: 1 } ).flowControl.isLagged

----------------------------------------

TITLE: Calculating Cosine of Angle in Radians in MongoDB Aggregation
DESCRIPTION: Demonstrates using $cos to calculate the adjacent side of a right-angle triangle given the hypotenuse and an angle in radians.

LANGUAGE: bash
CODE:
db.trigonometry.aggregate([
  {
    $addFields : {
      "side_b" : {
        $multiply : [
          { $cos : "$angle_a" },
          "$hypotenuse"
        ]
      }
    }
  }
])

----------------------------------------

TITLE: Setting MongoDB Profiler Filter
DESCRIPTION: Example showing how to set a profiler filter to only record query operations taking longer than 2 seconds.

LANGUAGE: javascript
CODE:
db.setProfilingLevel( 1, { filter: { op: "query", millis: { $gt: 2000 } } } )

----------------------------------------

TITLE: Using Custom Write Concern in MongoDB Query
DESCRIPTION: Shows how to use a custom write concern named 'datacenter' in a MongoDB write operation by passing it to the w parameter.

LANGUAGE: javascript
CODE:
{ w: "datacenter" }

----------------------------------------

TITLE: Embedding Product Data in Sellers Collection in MongoDB
DESCRIPTION: Example of how to denormalize the schema by embedding complete product information within the sellers collection. This operation uses the insertOne method to create a new document with embedded product details.

LANGUAGE: javascript
CODE:
db.sellers.insertOne(
   {
      _id: 456,
      name: "Cool Clothes Co",
      location: {
         address: "21643 Andreane Shores",
         state: "Ohio",
         country: "United States"
      },
      phone: "567-555-0105",
      products: [
         {
            id: 111,
            name: "sweater",
            price: 30,         
            rating: 4.9,
            color: "green"
         },
         {
            id: 222,
            name: "t-shirt",
            price: 10,         
            rating: 4.2,
            color: "blue"
         },
         {
            id: 333,
            name: "vest",
            price: 20,         
            rating: 4.7,
            color: "red"
         }
      ]
   }
)

----------------------------------------

TITLE: Querying and Projecting with $meta Operator for Text Score
DESCRIPTION: Performs a text search and uses the $meta operator in the projection to include the text score for each matching document.

LANGUAGE: javascript
CODE:
db.articles.find(
   { $text: { $search: "cake" } },
   { score: { $meta: "textScore" } }
)

----------------------------------------

TITLE: Illustrating Problematic Top-Level Field Naming in MongoDB JSON
DESCRIPTION: Demonstrates a top-level field name that conflicts with the dot notation of an embedded field. This naming convention should be avoided as it can lead to issues with indexing and sharding operations.

LANGUAGE: json
CODE:
{ "a.b": ... }

----------------------------------------

TITLE: Slicing Array from the Front in MongoDB Update
DESCRIPTION: Example of adding new elements to an array and then using $slice to trim the array to the first three elements. This operation updates a document in the 'students' collection.

LANGUAGE: javascript
CODE:
db.students.updateOne(
   { _id: 2 },
   {
     $push: {
       scores: {
         $each: [ 100, 20 ],
         $slice: 3
       }
     }
   }
)

----------------------------------------

TITLE: Querying Arrays with Compound Filter in MongoDB Shell
DESCRIPTION: Demonstrates how to query the 'inventory' collection for documents where the 'dim_cm' field is an array with values between 15 and 20 using the MongoDB shell.

LANGUAGE: javascript
CODE:
db.inventory.find( { dim_cm: { $gt: 15, $lt: 20 } } )

----------------------------------------

TITLE: Successful Privilege Revocation Example
DESCRIPTION: Shows the correct way to revoke the 'find' action by exactly matching the resource document pattern.

LANGUAGE: javascript
CODE:
use products
db.revokePrivilegesFromRole(
   "accountRole",
   [
     {
       resource : {
          db : "products",
          collection : ""
       },
       actions : [
          "find"
       ]
     }
   ]
)

----------------------------------------

TITLE: Handling Divide by Zero Error with $and in MongoDB Query
DESCRIPTION: Shows how to use $and to prevent a divide by zero error in a MongoDB query. It combines a check for non-zero values with a division operation.

LANGUAGE: javascript
CODE:
db.example.find( {
   $and: [
      { x: { $ne: 0 } },
      { $expr: { $eq: [ { $divide: [ 1, "$x" ] }, 3 ] } }
   ]
} )

----------------------------------------

TITLE: MongoDB moveRange Command Syntax
DESCRIPTION: Basic syntax for the moveRange command that moves ranges between shards. The command requires namespace and recipient shard specification, with conditional min/max range keys and optional parameters for jumbo chunks, write concern, and secondary throttling.

LANGUAGE: javascript
CODE:
db.adminCommand( 
  { 
    moveRange: <namespace>,
    toShard: <ID of the recipient shard>,
    min: <min key of the range to move>, // conditional
    max: <max key of the range to move>, // conditional
    forceJumbo: <bool>, // optional
    writeConcern: <write concern>, // optional
    secondaryThrottle: <bool> // optional
  } 
)

----------------------------------------

TITLE: Hiding Unnecessary Indexes in MongoDB
DESCRIPTION: Demonstrates how to hide unnecessary indexes using the hideIndex() method before removing them.

LANGUAGE: javascript
CODE:
db.courses.hideIndex( "days_1" )
db.courses.hideIndex( "time_1" )
db.courses.hideIndex( "building_1" )

----------------------------------------

TITLE: Filtering Documents in MongoDB Compass
DESCRIPTION: Shows the query filter used in MongoDB Compass to locate documents before deletion. This example searches for documents where the item field equals 'paper'.

LANGUAGE: javascript
CODE:
{ item: "paper" }

----------------------------------------

TITLE: Creating Sparse Index on Scores Collection
DESCRIPTION: Creates a sparse index on the score field of the scores collection to enable efficient queries on documents containing score values.

LANGUAGE: javascript
CODE:
db.scores.createIndex( { score: 1 } , { sparse: true } )

----------------------------------------

TITLE: Creating MongoClient Instance in Java for MongoDB Encrypted Data Access
DESCRIPTION: This code snippet demonstrates how to create a MongoClient instance in Java for accessing a key vault and handling encrypted data in MongoDB. It uses the MongoClientSettings to configure the client.

LANGUAGE: java
CODE:
MongoClientSettings clientSettings = MongoClientSettings.builder()
        .applyConnectionString(new ConnectionString("<Your MongoDB URI>"))
        .build();
MongoClient mongoClient = MongoClients.create(clientSettings);

----------------------------------------

TITLE: Setting Feature Compatibility Version in MongoDB
DESCRIPTION: Command to set or update the feature compatibility version to 5.0 before beginning the upgrade process.

LANGUAGE: javascript
CODE:
db.adminCommand( { setFeatureCompatibilityVersion: "5.0" } )

----------------------------------------

TITLE: Retrieving Next Change Stream Document
DESCRIPTION: Example showing how to retrieve the next document from a change stream cursor that includes the extracted seconds value.

LANGUAGE: javascript
CODE:
cakeSalesCursor.next()

----------------------------------------

TITLE: Defining Table of Contents for MongoDB Self-Managed Storage in reStructuredText
DESCRIPTION: This snippet defines the structure and content for the MongoDB self-managed storage documentation using reStructuredText directives. It sets up the document title, domain, and a hidden table of contents with links to various storage-related topics.

LANGUAGE: restructuredtext
CODE:
.. _self-managed-storage:

====================
Self-Managed Storage
====================

.. default-domain:: mongodb

.. toctree::
   :titlesonly:
   :hidden:

   Storage Engines </core/storage-engines>
   Manage Journaling </tutorial/manage-journaling>
   GridFS </core/gridfs>
   FAQ </faq/storage>

----------------------------------------

TITLE: Example of CorruptedChunkShardKey Inconsistency Document
DESCRIPTION: Provides a complete example of a CorruptedChunkShardKey inconsistency document showing a chunk with a shard key pattern violation.

LANGUAGE: json
CODE:
{ 
   cursor: {
      id: Long("0"),
      ns: "test.$cmd.aggregate",
      firstBatch: [ 
         {
            type: "CorruptedChunkShardKey",
            description: "Found chunk with a shard key pattern violation",
            details: {
               namespace: "test.authors",
               collectionUUID : new UUID("1ad56770-61e2-48e9-83c6-8ecefe73cfc4"),
               chunk: { 
                  _id: ObjectId("64ddd81656be208c6685da1b"),
                  uuid: new UUID("de934e0a-74d2-412b-9bb8-409abe9754e3"),
                  min: { 
                     y: 0 
                  }, 
                  max: { 
                     x: MaxKey 
                  }, 
                  shard: "shard0000", 
                  lastmod: Timestamp(1, 0),
                  onCurrentShardSince: Timestamp(1, 0), 
                  history: [ 
                     { 
                        validAfter: Timestamp(1, 0), 
                        shard: "shard0000" 
                     } 
                  ]
               },
               shardKeyPattern: { 
                  x: 1 
               }
            }
         }
      ],
   },
   ok: 1
}

----------------------------------------

TITLE: Creating Document with Keyword Array in MongoDB
DESCRIPTION: Example document structure for a library volume that includes an array of topic keywords to enable keyword-based searching.

LANGUAGE: javascript
CODE:
{ title : "Moby-Dick" ,
  author : "Herman Melville" ,
  published : 1851 ,
  ISBN : 0451526996 ,
  topics : [ "whaling" , "allegory" , "revenge" , "American" ,
    "novel" , "nautical" , "voyage" , "Cape Cod" ]
}

----------------------------------------

TITLE: Enabling MongoDB 6.0 Backwards Incompatible Features
DESCRIPTION: Example of using the setFeatureCompatibilityVersion command to enable MongoDB 6.0 features that are incompatible with MongoDB 5.0.

LANGUAGE: javascript
CODE:
db.adminCommand( { setFeatureCompatibilityVersion: "6.0" } )

----------------------------------------

TITLE: Connecting to MongoDB Using Remote Hostname
DESCRIPTION: Examples demonstrating how to connect to a MongoDB instance using either a hostname or IP address with mongosh client. Shows connection syntax for remote access to a configured MongoDB server.

LANGUAGE: shell
CODE:
mongosh --host My-Example-Associated-Hostname

mongosh --host 198.51.100.1

----------------------------------------

TITLE: Numeric Field Processing Example in MongoDB 5.0+
DESCRIPTION: Demonstrates how MongoDB 5.0+ processes numeric field names in update operations. Shows that fields with numeric names are processed in numeric order rather than lexicographic order.

LANGUAGE: javascript
CODE:
{ $set: { "a.2": <new value>, "a.10": <new value>, } }

----------------------------------------

TITLE: Inserting Review Data in MongoDB
DESCRIPTION: Inserts a sample review document into the 'reviews' collection in MongoDB.

LANGUAGE: javascript
CODE:
db.reviews.insertOne( {
   reviewId: 456,
   productId: 123,
   author: "Pat Simon",
   stars: 4,
   comment: "Great for schoolwork",
   date: ISODate("2023-06-29")
} )

----------------------------------------

TITLE: Initializing and Executing Unordered Bulk Operations in MongoDB
DESCRIPTION: This snippet demonstrates how to initialize an unordered bulk operations builder, add multiple insert operations, and execute the bulk operation. It uses the db.collection.initializeUnorderedBulkOp() method to create the builder and performs insertions into a 'users' collection.

LANGUAGE: javascript
CODE:
var bulk = db.users.initializeUnorderedBulkOp();
bulk.insert( { user: "abc123", status: "A", points: 0 } );
bulk.insert( { user: "ijk123", status: "A", points: 0 } );
bulk.insert( { user: "mop123", status: "P", points: 0 } );
bulk.execute();

----------------------------------------

TITLE: Projecting Returned Document in findOneAndUpdate()
DESCRIPTION: Example of using findOneAndUpdate() with a projection to specify which fields to return in the result.

LANGUAGE: javascript
CODE:
db.grades.findOneAndUpdate(
   { "name" : "A. MacDyver" },
   { $inc : { "points" : 5 } },
   { sort : { "points" : 1 }, projection: { "assignment" : 1, "points" : 1 } }
)

----------------------------------------

TITLE: MongoDB Sample Data Insertion
DESCRIPTION: Example inserting sample documents into a collection for text search demonstration.

LANGUAGE: javascript
CODE:
db.articles.insertMany( [
    { _id: 1, subject: "coffee", author: "xyz", views: 50 },
    { _id: 2, subject: "Coffee Shopping", author: "efg", views: 5 },
    { _id: 3, subject: "Baking a cake", author: "abc", views: 90  },
    { _id: 4, subject: "baking", author: "xyz", views: 100 },
    { _id: 5, subject: "Café Con Leche", author: "abc", views: 200 },
    { _id: 6, subject: "Сырники", author: "jkl", views: 80 },
    { _id: 7, subject: "coffee and cream", author: "efg", views: 10 },
    { _id: 8, subject: "Cafe con Leche", author: "xyz", views: 10 }
] )

----------------------------------------

TITLE: Executing replSetMaintenance Command in MongoDB
DESCRIPTION: Command syntax for enabling or disabling maintenance mode on a secondary replica set member. The boolean parameter determines whether to enable (true) or disable (false) maintenance mode. Must be run against the admin database.

LANGUAGE: javascript
CODE:
db.runCommand(
   { 
     replSetMaintenance: <boolean> 
   }
)

----------------------------------------

TITLE: Attempting to Create Lower Case Database in MongoDB
DESCRIPTION: This snippet shows an attempt to create a database named 'salesdb' and insert a document. The operation fails due to naming restrictions, as a similarly named database already exists.

LANGUAGE: javascript
CODE:
lowerCase = db.getSiblingDB('salesdb')
lowerCase.retail.insertOne({ "widgets": 1, "price": 50 })

----------------------------------------

TITLE: Calculating Energy Consumption Using $integral in MongoDB
DESCRIPTION: This snippet uses the $integral operator within a $setWindowFields stage to calculate the cumulative energy consumption in kilowatt-hours for each power meter. It demonstrates partitioning, sorting, and using a range window for the integral calculation.

LANGUAGE: javascript
CODE:
db.powerConsumption.aggregate( [
   {
      $setWindowFields: {
         partitionBy: "$powerMeterID",
         sortBy: { timeStamp: 1 },
         output: {
            powerMeterKilowattHours: {
               $integral: {
                  input: "$kilowatts",
                  unit: "hour"
               },
               window: {
                  range: [ "unbounded", "current" ],
                  unit: "hour"
               }
            }
         }
      }
   }
] )

----------------------------------------

TITLE: Querying Fields with Dollar Signs in MongoDB
DESCRIPTION: Example demonstrating how to query fields that start with dollar signs using $getField and $literal operators.

LANGUAGE: javascript
CODE:
db.inventory.aggregate( [
  {
    $match: 
      { $expr: 
        { $gt: [ { $getField: {$literal: "$price" } }, 200 ] }
      }
   }
] )

----------------------------------------

TITLE: MongoDB abortReshardCollection Usage Example
DESCRIPTION: Example showing how to abort a resharding operation on the sales.orders collection using the abortReshardCollection command.

LANGUAGE: javascript
CODE:
db.adminCommand({
  abortReshardCollection: "sales.orders"
})

----------------------------------------

TITLE: Inserting Valid Document into MongoDB Collection
DESCRIPTION: This snippet demonstrates inserting a valid document into the 'students' collection. The 'gpa' field is now a double type, which satisfies the validation rules.

LANGUAGE: javascript
CODE:
db.students.insertOne( {
   name: "Alice",
   year: NumberInt(2019),
   major: "History",
   gpa: Double(3.0),
   address: {
      city: "NYC",
      street: "33rd Street"
   }
} )

----------------------------------------

TITLE: Calculating Single Percentile Value as Accumulator in MongoDB
DESCRIPTION: An example of using $percentile as an accumulator in a $group stage to calculate a single percentile value (95th percentile) for the 'test01' field across all documents.

LANGUAGE: javascript
CODE:
db.testScores.aggregate( [
   {
      $group: {
         _id: null,
         test01_percentiles: {
            $percentile: {
               input: "$test01",
               p: [ 0.95 ],
               method: 'approximate'
            }
         }
      }
   }
] )

----------------------------------------

TITLE: Performing Text Search with $text Operator in MongoDB (JavaScript)
DESCRIPTION: This code snippet demonstrates how to use the $text query operator in MongoDB to search for multiple terms in a text index. It searches for 'java', 'coffee', and 'shop' in the 'stores' collection.

LANGUAGE: javascript
CODE:
db.stores.find( { $text: { $search: "java coffee shop" } } )

----------------------------------------

TITLE: Example Output of $covariancePop Operation
DESCRIPTION: Shows the resulting document structure after applying the $covariancePop operation, displaying the calculated covariance values in the covariancePopForState field.

LANGUAGE: javascript
CODE:
{ "_id" : 4, "type" : "strawberry", "orderDate" : ISODate("2019-05-18T16:09:01Z"),
  "state" : "CA", "price" : 41, "quantity" : 162, "covariancePopForState" : 0 }
{ "_id" : 0, "type" : "chocolate", "orderDate" : ISODate("2020-05-18T14:10:30Z"),
  "state" : "CA", "price" : 13, "quantity" : 120, "covariancePopForState" : -10.5 }
{ "_id" : 2, "type" : "vanilla", "orderDate" : ISODate("2021-01-11T06:31:15Z"),
  "state" : "CA", "price" : 12, "quantity" : 145, "covariancePopForState" : -5.666666666666671 }
{ "_id" : 5, "type" : "strawberry", "orderDate" : ISODate("2019-01-08T06:12:03Z"),
  "state" : "WA", "price" : 43, "quantity" : 134, "covariancePopForState" : 0 }
{ "_id" : 3, "type" : "vanilla", "orderDate" : ISODate("2020-02-08T13:13:23Z"),
  "state" : "WA", "price" : 13, "quantity" : 104, "covariancePopForState" : -7.5 }
{ "_id" : 1, "type" : "chocolate", "orderDate" : ISODate("2021-03-20T11:30:05Z"),
  "state" : "WA", "price" : 14, "quantity" : 140, "covariancePopForState" : 2 }

----------------------------------------

TITLE: Inserting Multiple Documents in MongoDB using Compass
DESCRIPTION: This snippet shows the JSON structure for inserting multiple documents into MongoDB using Compass. It represents an array of documents with various properties that can be inserted into the 'inventory' collection.

LANGUAGE: javascript
CODE:
[
    { "item": "journal", "qty": 25, "size": { "h": 14, "w": 21, "uom": "cm" }, "status": "A" },
    { "item": "notebook", "qty": 50, "size": { "h": 8.5, "w": 11, "uom": "in" }, "status": "P" },
    { "item": "paper", "qty": 100, "size": { "h": 8.5, "w": 11, "uom": "in" }, "status": "D" },
    { "item": "planner", "qty": 75, "size": { "h": 22.85, "w": 30, "uom": "cm" }, "status": "D" },
    { "item": "postcard", "qty": 45, "size": { "h": 10, "w": 15.25, "uom": "cm" }, "status": "A" }
]

----------------------------------------

TITLE: Changing Replica Set Settings in MongoDB
DESCRIPTION: Shows how to modify replica set settings, specifically changing the heartbeatTimeoutSecs value for the entire cluster using rs.reconfig().

LANGUAGE: javascript
CODE:
cfg = rs.conf();
cfg.settings.heartbeatTimeoutSecs = 15;
rs.reconfig(cfg);

----------------------------------------

TITLE: Starting MongoDB Server
DESCRIPTION: Commands for starting MongoDB server processes with data path specification.

LANGUAGE: javascript
CODE:
mongod --dbpath </path-to-mongodb-datafiles>

----------------------------------------

TITLE: Installing libmongocrypt on macOS using Homebrew
DESCRIPTION: Command to install libmongocrypt using the MongoDB Homebrew tap

LANGUAGE: sh
CODE:
brew install mongodb/brew/libmongocrypt

----------------------------------------

TITLE: Defining $shift Syntax in MongoDB Aggregation
DESCRIPTION: Demonstrates the syntax for the $shift operator in MongoDB aggregation pipelines. It shows the structure of the $shift document with output, by, and default fields.

LANGUAGE: javascript
CODE:
{
   $shift: {
      output: <output expression>, 
      by: <integer>,
      default: <default expression>
   }
}

----------------------------------------

TITLE: Removing Zone Range in MongoDB
DESCRIPTION: Example demonstrating how to remove a specific zone range using sh.removeRangeFromZone() method.

LANGUAGE: javascript
CODE:
sh.removeRangeFromZone("records.user", {zipcode: "10001"}, {zipcode: "10281"})

----------------------------------------

TITLE: Dropping All Non-_id Indexes in MongoDB
DESCRIPTION: Shows how to drop all indexes except the _id index using the '*' wildcard specification.

LANGUAGE: javascript
CODE:
db.runCommand( { dropIndexes: "collection", index: "*" } )

----------------------------------------

TITLE: Shutting Down MongoDB Server in JavaScript
DESCRIPTION: This snippet demonstrates how to shut down a MongoDB server using the db.shutdownServer() method in the admin database.

LANGUAGE: javascript
CODE:
use admin
db.shutdownServer()

----------------------------------------

TITLE: Sample Encrypted Document Structure in MongoDB
DESCRIPTION: This JSON snippet represents the structure of an encrypted document after insertion using CSFLE. It shows how the fields are encrypted in the database.

LANGUAGE: json
CODE:
// Code snippet not provided in the given text

----------------------------------------

TITLE: Basic getDefaultRWConcern Command Syntax
DESCRIPTION: Shows the basic syntax for the getDefaultRWConcern command with optional inMemory and comment fields.

LANGUAGE: javascript
CODE:
db.adminCommand( 
   { 
     getDefaultRWConcern: 1 , 
     inMemory: <boolean>, 
     comment: <any> 
   } 
)

----------------------------------------

TITLE: Querying Locations with $maxDistance in MongoDB
DESCRIPTION: Example query that finds documents where location values are within 10 units of the point [-74, 40]. The query uses the $near and $maxDistance operators together, and results are automatically ordered by distance from the specified point.

LANGUAGE: javascript
CODE:
db.places.find( {
   loc: { $near: [ -74 , 40 ],  $maxDistance: 10 }
} )

----------------------------------------

TITLE: Creating Multi-key Index for Keywords in MongoDB
DESCRIPTION: Command to create a multi-key index on the topics array field to enable efficient keyword searches.

LANGUAGE: javascript
CODE:
db.volumes.createIndex( { topics: 1 } )

----------------------------------------

TITLE: Correct JSON Schema Validation with additionalProperties: false in MongoDB
DESCRIPTION: This schema validation correctly includes the _id field in the properties object when using additionalProperties: false, allowing documents to be inserted into the collection.

LANGUAGE: javascript
CODE:
{
  "$jsonSchema": {
    "required": [ "_id", "storeLocation" ],
    "properties": {
      "_id": { "bsonType": "objectId" },
      "storeLocation": { "bsonType": "string" }
    },
    "additionalProperties": false
  }
}

----------------------------------------

TITLE: Defining MongoDB Feature and Downgrade References in reStructuredText
DESCRIPTION: Sets up substitution variables for feature and downgrade considerations. These variables are used to maintain consistent references to version-specific features and downgrade procedures.

LANGUAGE: reStructuredText
CODE:
.. |features| replace:: :ref:`features<7.0-downgrade-considerations>` 
.. |downgradeversion| replace:: 6.0

----------------------------------------

TITLE: Reinstalling mongos.exe Windows Service
DESCRIPTION: Command line option for removing and reinstalling the mongos.exe Windows Service in a single command.

LANGUAGE: shell
CODE:
--reinstall

----------------------------------------

TITLE: MongoDB $concat Operator Syntax
DESCRIPTION: Basic syntax for the $concat operator in MongoDB aggregation pipeline, which takes an array of expressions that resolve to strings.

LANGUAGE: javascript
CODE:
{ $concat: [ <expression1>, <expression2>, ... ] }

----------------------------------------

TITLE: Normalizing and Sorting Member Names in MongoDB
DESCRIPTION: This aggregation operation returns member names in upper case and in alphabetical order. It uses $project to create a new 'name' field and $sort to order the results.

LANGUAGE: javascript
CODE:
db.members.aggregate(
  [
    { $project: { name: { $toUpper: "$_id" }, _id: 0 } },
    { $sort: { name: 1 } }
  ]
)

----------------------------------------

TITLE: Using $geoIntersects with Custom MongoDB CRS in JavaScript
DESCRIPTION: This snippet shows how to use $geoIntersects with a custom MongoDB coordinate reference system (CRS). It's useful for specifying single-ringed GeoJSON polygons with areas greater than or equal to a single hemisphere.

LANGUAGE: javascript
CODE:
{
  <location field>: {
     $geoIntersects: {
        $geometry: {
           type: "Polygon" ,
           coordinates: [ <coordinates> ],
           crs: {
              type: "name",
              properties: { name: "urn:x-mongodb:crs:strictwinding:EPSG:4326" }
           }
        }
     }
  }
}

----------------------------------------

TITLE: Querying MongoDB with Projection in Java (Synchronous)
DESCRIPTION: This snippet shows how to query MongoDB with projection using the synchronous Java driver. It uses the com.mongodb.client.FindIterable.projection method and com.mongodb.client.model.Projections class to create projection documents.

LANGUAGE: java
CODE:
// Start Example 45
// End Example 45

----------------------------------------

TITLE: Querying Sharded Data Distribution in MongoDB using JavaScript
DESCRIPTION: Aggregation pipeline that uses $shardedDataDistribution stage to check for orphaned documents in a specific database collection. The pipeline matches results for a given namespace and returns distribution statistics including orphaned document counts.

LANGUAGE: javascript
CODE:
db.aggregate([
      { $shardedDataDistribution: { } },
      { $match: { "ns": "<database>.<collection>" } }
   ])

----------------------------------------

TITLE: Deleting Documents with db.collection.deleteOne() in MongoDB
DESCRIPTION: Deletes at most one document that matches a specified filter, even if multiple documents match. This method is used for targeted single document deletion.

LANGUAGE: mongodb
CODE:
db.collection.deleteOne()

----------------------------------------

TITLE: Deleting Documents with db.collection.deleteOne() in MongoDB
DESCRIPTION: Deletes at most one document that matches a specified filter, even if multiple documents match. This method is used for targeted single document deletion.

LANGUAGE: mongodb
CODE:
db.collection.deleteOne()

----------------------------------------

TITLE: Querying MongoDB Collection in C
DESCRIPTION: This snippet shows how to query a MongoDB collection using the C driver. The actual code is not provided in the excerpt, but it references an external file containing the implementation.

LANGUAGE: c
CODE:
// Code is referenced from an external file: /driver-examples/test-mongoc-sample-commands.c

----------------------------------------

TITLE: Determining Shard Distribution in MongoDB
DESCRIPTION: This code snippet shows how to refresh the cached routing table and get the shard distribution for a collection in MongoDB using db.adminCommand() and db.collection.getShardDistribution().

LANGUAGE: javascript
CODE:
db.adminCommand( { flushRouterConfig: "test.records" } );
db.records.getShardDistribution();

----------------------------------------

TITLE: Write Concern Example for dropDatabase
DESCRIPTION: Example of write concern document structure used with dropDatabase command. Shows the format for specifying write acknowledgment, journaling, and timeout options.

LANGUAGE: javascript
CODE:
{ w: <value>, j: <boolean>, wtimeout: <number> }

----------------------------------------

TITLE: Retrieving Collection Settings with listCollections Command
DESCRIPTION: Shows how to retrieve current collection settings including granularity and bucketing parameters using the listCollections command.

LANGUAGE: javascript
CODE:
db.runCommand( { listCollections: 1 } )

----------------------------------------

TITLE: Basic $geoNear Aggregation Pipeline Stage Structure
DESCRIPTION: Shows the prototype form of the $geoNear stage in a MongoDB aggregation pipeline. It accepts a document containing various options for geospatial querying.

LANGUAGE: javascript
CODE:
{ $geoNear: { <geoNear options> } }

----------------------------------------

TITLE: Shard Collection with Initial Key
DESCRIPTION: Example showing how to initially shard a collection using the customer_id field as the shard key.

LANGUAGE: javascript
CODE:
db.adminCommand( { shardCollection: "test.orders", key: { customer_id: 1 } } )

----------------------------------------

TITLE: MongoDB setDefaultRWConcern Command Basic Syntax
DESCRIPTION: Basic command syntax for setDefaultRWConcern showing supported fields including defaultReadConcern, defaultWriteConcern, writeConcern and comment.

LANGUAGE: javascript
CODE:
db.adminCommand(
  {
    setDefaultRWConcern : 1,
    defaultReadConcern: { <read concern> },
    defaultWriteConcern: { <write concern> },
    writeConcern: { <write concern> },
    comment: <any>
  }
)

----------------------------------------

TITLE: Using $currentOp on Admin Database in MongoDB
DESCRIPTION: An example of running a pipeline with $currentOp on the admin database, filtering results for a specific shard.

LANGUAGE: javascript
CODE:
db.adminCommand( { 
   aggregate : 1, 
   pipeline : [ { 
      $currentOp : { allUsers : true, idleConnections : true } }, { 
      $match : { shard : "shard01" } 
      } 
   ], 
   cursor : { } 
} )

----------------------------------------

TITLE: Removing Key Alternate Name in MongoDB KeyVault
DESCRIPTION: The KeyVault.removeKeyAltName() method removes a specified alternate name from a data encryption key identified by its UUID. This method is an alias for KeyVault.removeKeyAlternateName(). It requires the data encryption key to exist in the key vault associated with the database connection.

LANGUAGE: mongodb
CODE:
KeyVault.removeKeyAltName(UUID, keyAltName)

----------------------------------------

TITLE: Explain Find with ExecutionStats
DESCRIPTION: Example showing explain() with executionStats mode for detailed query analysis.

LANGUAGE: javascript
CODE:
db.products.explain("executionStats").find(
   { quantity: { $gt: 50 }, category: "apparel" }
)

----------------------------------------

TITLE: Calculating Probability with $reduce in MongoDB Aggregation
DESCRIPTION: Demonstrates using $reduce with $multiply to calculate the overall probability of multiple events in an experiment.

LANGUAGE: javascript
CODE:
db.probability.aggregate(
  [
    {
      $group: {
        _id: "$experimentId",
        probabilityArr: { $push: "$probability" }
      }
    },
    {
      $project: {
        description: 1,
        results: {
          $reduce: {
            input: "$probabilityArr",
            initialValue: 1,
            in: { $multiply: [ "$$value", "$$this" ] }
          }
        }
      }
    }
  ]
)

----------------------------------------

TITLE: Upstart Service Limits Configuration
DESCRIPTION: Example configuration for setting resource limits in Upstart service scripts.

LANGUAGE: bash
CODE:
limit fsize unlimited unlimited    # (file size)
limit cpu unlimited unlimited      # (cpu time)
limit as unlimited unlimited       # (virtual memory size)
limit memlock unlimited unlimited  # (locked-in-memory size)
limit nofile 64000 64000           # (open files)
limit nproc 64000 64000            # (processes/threads)

----------------------------------------

TITLE: Array Projection Query Example
DESCRIPTION: Demonstrates a practical example of using the $ operator to project specific array elements

LANGUAGE: javascript
CODE:
db.students.find( { semester: 1, grades: { $gte: 85 } },
                 { "grades.$": 1 } )

----------------------------------------

TITLE: Assigning Service Principal Name
DESCRIPTION: Command to assign a Service Principal Name (SPN) to the MongoDB service account using setspn.exe utility.

LANGUAGE: bash
CODE:
setspn.exe -S <service>/<fully qualified domain name> <service account name>

----------------------------------------

TITLE: Querying Sorted Restaurants in MongoDB
DESCRIPTION: This query retrieves all documents from the 'restaurantsSort' collection after the find and update operations have been performed.

LANGUAGE: javascript
CODE:
db.restaurantsSort.find()

----------------------------------------

TITLE: Verifying Defragmentation Stop Command Output
DESCRIPTION: Example of successful command output when stopping collection defragmentation, showing the expected response structure with operation timestamps.

LANGUAGE: javascript
CODE:
{
   ok: 1,
   '$clusterTime': {
      clusterTime: Timestamp({ t: 1678834337, i: 1 }),
      signature: {
         hash: Binary(Buffer.from("0000000000000000000000000000000000000000", "hex"), 0),
         keyId: Long("0")
      }
   },
   operationTime: Timestamp({ t: 1678834337, i: 1 })
}

----------------------------------------

TITLE: Setting In-Memory Size for MongoDB (Bash)
DESCRIPTION: Command-line configuration to set the in-memory size for MongoDB. This specifies the storage engine, database path, and the memory size limit.

LANGUAGE: bash
CODE:
mongod --storageEngine inMemory --dbpath <path> --inMemorySizeGB <newSize>

----------------------------------------

TITLE: Filtering by Text Score in MongoDB
DESCRIPTION: Performs text search, projects title and score fields, and filters results by score greater than 1.0.

LANGUAGE: javascript
CODE:
db.articles.aggregate(
      [
        { $match: { $text: { $search: "cake tea" } } },
        { $project: { title: 1, _id: 0, score: { $meta: "textScore" } } },
        { $match: { score: { $gt: 1.0 } } }
      ]
   )

----------------------------------------

TITLE: Defining MongoDB Version Variables in RST
DESCRIPTION: Defines reStructuredText substitution variables for MongoDB versions, series names, compatibility notes, and upgrade/downgrade information. These variables are used throughout the documentation to maintain consistency and ease updates.

LANGUAGE: rst
CODE:
.. |newversion| replace:: 3.4
.. |newseries| replace:: 3.4-series
.. |oldversion| replace:: 3.2
.. |oldseries| replace:: 3.2-series
.. |olderseries| replace:: 3.0-series
.. |compatibility| replace:: 3.4 Compatibility Notes
.. |upgradefirst| replace:: 3.2
.. |downgradepath| replace:: Once upgraded to 3.4, you cannot downgrade to a 3.2.7 or earlier version. You can only downgrade to a 3.2.8 or later version.

.. |installationdoc| replace:: :v3.4:`3.4 installation instructions </installation>`

----------------------------------------

TITLE: Dropping All User-Defined Roles from Products Database in MongoDB
DESCRIPTION: This example shows how to drop all user-defined roles from the 'products' database using the dropAllRolesFromDatabase command with a majority write concern.

LANGUAGE: javascript
CODE:
use products
db.runCommand(
   {
     dropAllRolesFromDatabase: 1,
     writeConcern: { w: "majority" }
   }
)

----------------------------------------

TITLE: Field Null Equality Queries with MongoDB Wildcard Index
DESCRIPTION: Shows queries that wildcard indexes cannot support when checking if a field is equal to null. These queries use the $eq operator to match null values in the 'product_attributes.price' field.

LANGUAGE: javascript
CODE:
db.inventory.find( { "product_attributes.price": { $eq: null } } )

db.inventory.aggregate([{
   $match : { "product_attributes.price": { $eq: null } }
}])

----------------------------------------

TITLE: Flushing Router Config for Entire Database in MongoDB
DESCRIPTION: This command flushes the cache for a specified database and all of its collections when passed a database namespace parameter. It marks the cached routing table for the entire database as stale.

LANGUAGE: javascript
CODE:
db.adminCommand(
   { 
     flushRouterConfig: "<db>" 
   } 
)

----------------------------------------

TITLE: Setting Feature Compatibility Version in MongoDB
DESCRIPTION: Command to set the feature compatibility version to 7.0 as required before upgrading to MongoDB 8.0.

LANGUAGE: javascript
CODE:
db.adminCommand( { setFeatureCompatibilityVersion: "7.0" } )

----------------------------------------

TITLE: Updated MongoDB X.509 Configuration with Override
DESCRIPTION: Configuration file showing updated X.509 settings with MongoDB organization attributes and override parameter for backward compatibility.

LANGUAGE: yaml
CODE:
net:
  tls:
    mode:               requireTLS
    certificateKeyFile: /etc/mycerts/mongodb-server1.pem
    CAFile:             /etc/mycerts/ca.pem
    clusterFile:        /etc/mycerts/mongodb-cluster1.pem
    clusterCAFile:      /etc/mycerts/ca.pem
    clusterAuthX509:
       attributes:      O=MongoDB, OU=MongoDB Server
security:
  clusterAuthMode: x509
setParameter:
   tlsClusterAuthX509Override: { attributes: O=10gen, OU=10gen Server }

----------------------------------------

TITLE: Navigating to MongoDB bin Directory on Linux/macOS
DESCRIPTION: Changes the current directory to the bin folder under the MongoDB installation directory on Linux or macOS systems.

LANGUAGE: bash
CODE:
cd <installDirectory>/bin

----------------------------------------

TITLE: Querying MongoDB Time Series MetaField
DESCRIPTION: Example showing how to properly query time series collections using metaField sub-fields for consistent results.

LANGUAGE: javascript
CODE:
db.weather.findOne({
   "metaField.sensorId": 5578,
   "metaField.type": "temperature"
})

----------------------------------------

TITLE: Result of $trim Operation in MongoDB Aggregation
DESCRIPTION: Shows the expected output after applying the $trim operator to the 'description' field in the aggregation pipeline.

LANGUAGE: javascript
CODE:
{ "_id" : 1, "item" : "ABC1", "description" : "product 1" }
{ "_id" : 3, "item" : "XYZ1", "description" : null }
{ "_id" : 2, "item" : "ABC2", "description" : "product 2 \n The product is in stock." }

----------------------------------------

TITLE: Removing Documents with Collation in MongoDB
DESCRIPTION: This example demonstrates how to use collation when removing documents, allowing for language-specific string comparisons.

LANGUAGE: javascript
CODE:
db.myColl.remove( 
   { category: "cafe", status: "A" }, 
   { collation: { locale: "fr", strength: 1 } }
)

----------------------------------------

TITLE: Sample Query Predicates for Index Filters
DESCRIPTION: Example query predicates that demonstrate how index filters cover similar queries with different values but same structure.

LANGUAGE: javascript
CODE:
{ type: "food", status: "A" }
{ type: "utensil", status: "D" }

----------------------------------------

TITLE: Using Write Concern with insertMany()
DESCRIPTION: Example of using write concern with insertMany() to ensure the operation is acknowledged by a majority of replica set members within a specified timeout.

LANGUAGE: javascript
CODE:
try {
   db.products.insertMany(
      [
         { _id: 10, item: "large box", qty: 20 },
         { _id: 11, item: "small box", qty: 55 },
         { _id: 12, item: "medium box", qty: 30 }
      ],
      { w: "majority", wtimeout: 100 }
   );
} catch (e) {
   print (e);
}

----------------------------------------

TITLE: MongoDB 5.0 Parameter Change Example
DESCRIPTION: Example of the behavior change for TTL indexes with expireAfterSeconds set to NaN in MongoDB 5.0. When set to NaN, expireAfterSeconds is now treated as 0, potentially causing immediate document expiration.

LANGUAGE: mongodb
CODE:
db.collection.createIndex( 
  { "lastModifiedDate": 1 }, 
  { expireAfterSeconds: NaN } // Now treated as 0 in 5.0
)

----------------------------------------

TITLE: Creating Sample Collection for $slice Examples
DESCRIPTION: Creates a sample posts collection with nested comment arrays to demonstrate various $slice operations.

LANGUAGE: javascript
CODE:
db.posts.insertMany([
   {
     _id: 1, 
     title: "Bagels are not croissants.", 
     comments: [ { comment: "0. true" }, { comment: "1. croissants aren't bagels."} ]
   },
   {
     _id: 2, 
     title: "Coffee please.", 
     comments: [ { comment: "0. fooey" }, { comment: "1. tea please" }, { comment: "2. iced coffee" }, { comment: "3. cappuccino" }, { comment: "4. whatever" } ]
   }
])

----------------------------------------

TITLE: Starting MongoDB with systemctl
DESCRIPTION: Command to start MongoDB using systemctl with proper ulimit settings.

LANGUAGE: bash
CODE:
systemctl start mongod.service

----------------------------------------

TITLE: Querying Tree Structures with Materialized Paths in MongoDB
DESCRIPTION: This snippet shows various ways to query the tree structure using the path field. It includes sorting the entire tree, finding descendants of a specific node, and using regular expressions for partial path matching.

LANGUAGE: javascript
CODE:
db.categories.find().sort( { path: 1 } )

db.categories.find( { path: /,Programming,/ } )

db.categories.find( { path: /^,Books,/ } )

----------------------------------------

TITLE: Basic $listSessions Syntax
DESCRIPTION: Demonstrates the basic syntax structure for the $listSessions pipeline stage.

LANGUAGE: javascript
CODE:
{ $listSessions: <document> }

----------------------------------------

TITLE: MongoDB $minN Example with Null Values
DESCRIPTION: Demonstrates how $minN handles null and missing values in an aggregation pipeline.

LANGUAGE: javascript
CODE:
db.aggregate( [
   {
      $documents: [
         { playerId: "PlayerA", gameId: "G1", score: 1 },
         { playerId: "PlayerB", gameId: "G1", score: 2 },
         { playerId: "PlayerC", gameId: "G1", score: 3 },
         { playerId: "PlayerD", gameId: "G1" },
         { playerId: "PlayerE", gameId: "G1", score: null }
      ]
   },
   {
      $group:
      {  
         _id: "$gameId",
         minimumThreeScores:
            { 
               $minN:
                  {    
                     input: "$score",
                     n: 4
                  }
            }
      }
   }
] )

----------------------------------------

TITLE: Configuring KMIP Endpoint for MongoDB CSFLE
DESCRIPTION: This snippet shows how to specify the KMIP endpoint in the kmsProviders object for Client-Side Field Level Encryption. It requires entering the URI endpoint of the KMIP KMS.

LANGUAGE: java
CODE:
Map<String, Map<String, Object>> kmsProviders = new HashMap<String, Map<String, Object>>();
Map<String, Object> kmipKmsOptions = new HashMap<String, Object>();
kmipKmsOptions.put("endpoint", "<Your KMIP KMS endpoint URI>");
kmsProviders.put("kmip", kmipKmsOptions);

LANGUAGE: javascript
CODE:
const kmsProviders = {
  kmip: { endpoint: "<Your KMIP KMS endpoint URI>" },
};

LANGUAGE: python
CODE:
kms_providers = {
    "kmip": {"endpoint": "<Your KMIP KMS endpoint URI>"},
}

LANGUAGE: csharp
CODE:
var kmsProviders = new Dictionary<string, IReadOnlyDictionary<string, object>>
{
    { "kmip", new Dictionary<string, object>
        {
            { "endpoint", "<Your KMIP KMS endpoint URI>" }
        }
    }
};

LANGUAGE: go
CODE:
kmsProviders := map[string]map[string]interface{}{
	"kmip": {
		"endpoint": "<Your KMIP KMS endpoint URI>",
	},
}

----------------------------------------

TITLE: Importing Public Key for MongoDB Enterprise on Debian
DESCRIPTION: This snippet imports the public key required for MongoDB Enterprise installation on Debian systems. It uses the wget command to download the key and the apt-key command to add it to the system's keyring.

LANGUAGE: bash
CODE:
wget -qO - https://www.mongodb.org/static/pgp/server-6.0.asc | sudo apt-key add -

----------------------------------------

TITLE: Sorting by Text Search Score in MongoDB
DESCRIPTION: Searches for 'cake' or 'tea', sorts results by text search score, and projects only the title field.

LANGUAGE: javascript
CODE:
db.articles.aggregate(
      [
        { $match: { $text: { $search: "cake tea" } } },
        { $sort: { score: { $meta: "textScore" } } },
        { $project: { title: 1, _id: 0 } }
      ]
   )

----------------------------------------

TITLE: Creating Time Series Collection in MongoDB
DESCRIPTION: Creates a new time series collection named 'weathernew' with specified time field, meta field, and granularity settings.

LANGUAGE: javascript
CODE:
db.createCollection(
   "weathernew", {
      timeseries: {
         timeField: "ts",
         metaField: "metaData",
         granularity: "hours"
      }
   }
)

----------------------------------------

TITLE: Creating Collection with Insert Command in MongoDB
DESCRIPTION: Example of an implicit DDL operation that creates a new 'users' collection by inserting a document. The operation will create the collection if it doesn't already exist.

LANGUAGE: javascript
CODE:
db.runCommand(
   {
      insert: "users",
      documents: [ { _id: 1, user: "abc123", status: "A" } ]
   }
)

----------------------------------------

TITLE: Array Field Null Equality Queries with MongoDB Wildcard Index
DESCRIPTION: Demonstrates queries that wildcard indexes cannot support when checking if an array field is equal or not equal to null. These queries specifically target the 'product_attributes.tags' field.

LANGUAGE: javascript
CODE:
db.inventory.find( { "product_attributes.tags": { $ne: null } } )

db.inventory.find( { "product_attributes.tags": null } )

db.inventory.aggregate([{ 
  $match : { "product_attributes.tags": { $ne: null } }
}])

db.inventory.aggregate([{ 
  $match : { "product_attributes.tags": null }
}])

----------------------------------------

TITLE: Setting MongoDB Profile Level Basic Syntax
DESCRIPTION: Basic syntax for the db.setProfilingLevel() method to configure database profiling settings.

LANGUAGE: javascript
CODE:
db.setProfilingLevel(<level>, <options>)

----------------------------------------

TITLE: Creating Compound Index in MongoDB using JavaScript
DESCRIPTION: This code snippet demonstrates how to create a compound index on multiple fields in a MongoDB collection. The createIndex method is called on a specific collection, with an object specifying the fields and their sort orders as arguments.

LANGUAGE: javascript
CODE:
db.<collection>.createIndex( {
   <field1>: <sortOrder>, 
   <field2>: <sortOrder>,
   ...
   <fieldN>: <sortOrder>
} )

----------------------------------------

TITLE: Configuring KMIP KMS Provider Endpoint
DESCRIPTION: Specifies the URI endpoint configuration for connecting to a KMIP Key Management System (KMS). This is required for establishing the connection between MongoDB and the KMIP server for key management operations.

LANGUAGE: java
CODE:
Map<String, Map<String, Object>> kmsProviders = new HashMap<String, Map<String, Object>>() {
    {
        put("kmip", new HashMap<String, Object>());
    }
};

LANGUAGE: javascript
CODE:
const kmsProviders = {
    kmip: {}
};

LANGUAGE: python
CODE:
kms_providers = {
    "kmip": {}
}

LANGUAGE: csharp
CODE:
var kmsProviders = new Dictionary<string, IReadOnlyDictionary<string, object>>
{
    { "kmip", new Dictionary<string, object>() }
};

LANGUAGE: go
CODE:
kmsProviders := map[string]map[string]interface{}{
    "kmip": {},
}

----------------------------------------

TITLE: Result of $mod Operation in MongoDB Aggregation
DESCRIPTION: Shows the expected output of the $mod operation performed on the conferencePlanning collection. The result includes the _id and the calculated remainder for each document.

LANGUAGE: json
CODE:
[
  { '_id' : 1, 'remainder' : 3 },
  { '_id' : 2, 'remainder' : 0 }
]

----------------------------------------

TITLE: Importing Time Series Data using mongorestore
DESCRIPTION: Command to import data into a time series collection using mongorestore with required options for maintaining insertion order and preventing index restoration.

LANGUAGE: javascript
CODE:
mongorestore
   --uri="mongodb://mongodb0.example.com:27017,mongodb1.example.com:27017,mongodb2.example.com:27017/weather" \
   --collection=weathernew --noIndexRestore \
   --maintainInsertionOrder \
   timeseries/weather/temporarytimeseries.bson

----------------------------------------

TITLE: MongoDB Driver Compatibility Table in ReStructuredText
DESCRIPTION: A formatted list table in RST showing MongoDB driver version compatibility across different programming languages. The table is styled with 'index-table' class and displays minimum supported versions.

LANGUAGE: restructuredtext
CODE:
.. list-table::
   :class: index-table

   * - Java 3.6+

       Python 3.6+

       C 1.9+

       Go 1.8+

     - C# 2.5+

       Node 3.0+

       Ruby 2.5+

       Rust 2.1+

       Swift 1.2+

     - Perl 2.0+

       PHPC 1.4+

       Scala 2.2+

       C++ 3.6.6+

----------------------------------------

TITLE: Adding Tags for Multi-Datacenter Write Concerns in MongoDB
DESCRIPTION: Shows how to add tags to replica set members for a multi-datacenter setup, using 'dc_va' and 'dc_ca' tags to represent different data centers.

LANGUAGE: javascript
CODE:
conf = rs.conf();
conf.members[0].tags = { "dc_va": "rack1"};
conf.members[1].tags = { "dc_va": "rack2"};
conf.members[2].tags = { "dc_ca": "rack1"};
conf.members[3].tags = { "dc_ca": "rack2"};
conf.members[4].tags = { "dc_va": "rack1"};
rs.reconfig(conf);

----------------------------------------

TITLE: Install Go Dependencies
DESCRIPTION: Command to download and install the required Go dependencies defined in the go.mod file.

LANGUAGE: golang
CODE:
go get go-qe-tutorial

----------------------------------------

TITLE: Checking Replica Set Status in MongoDB
DESCRIPTION: Command to check the status of replica set members to ensure none are in ROLLBACK or RECOVERING state.

LANGUAGE: javascript
CODE:
db.adminCommand( { replSetGetStatus: 1 } )

----------------------------------------

TITLE: Example Output of BSONRegExp Query in MongoDB
DESCRIPTION: This code block shows the expected output when querying for a document containing a BSONRegExp object in MongoDB. It displays the document structure with the BSONRegExp field.

LANGUAGE: javascript
CODE:
[
  {
    _id: ObjectId('65e8ba8a4b3c33a76e6cacca'),
    foo: BSONRegExp('(?-i)AA_', 'i')
  }
]

----------------------------------------

TITLE: Testing Map Function with Single Document in MongoDB
DESCRIPTION: Demonstrates how to apply the map function to a single document retrieved from the 'orders' collection using findOne().

LANGUAGE: javascript
CODE:
var myDoc = db.orders.findOne( { _id: ObjectId("50a8240b927d5d8b5891743c") } );
map.apply(myDoc);

----------------------------------------

TITLE: Incorrect Order for Matching Embedded Document in MongoDB
DESCRIPTION: This snippet demonstrates an incorrect way to match an embedded document. The query will not match any documents because the field order doesn't match the exact order in the database.

LANGUAGE: javascript
CODE:
db.inventory.find( { size: { w: 21, h: 14, uom: "cm" } } )

----------------------------------------

TITLE: Using Comparison Operators in MongoDB Queries
DESCRIPTION: Illustrates the usage of comparison operators $gt, $gte, $lt, and $lte for querying documents based on field values.

LANGUAGE: mongodb
CODE:
{ field: { $gt: value } }

LANGUAGE: mongodb
CODE:
{ field: { $gte: value } }

LANGUAGE: mongodb
CODE:
{ field: { $lt: value } }

LANGUAGE: mongodb
CODE:
{ field: { $lte: value } }

----------------------------------------

TITLE: Ad Selection Algorithm in Python
DESCRIPTION: Python function to select an ad based on site_id and zone_id. Groups ads by eCPM and randomly selects from the highest-paying group.

LANGUAGE: python
CODE:
from itertools import groupby
from random import choice

def choose_ad(site_id, zone_id):
    site = db.ad.zone.find_one({
        'site_id': site_id, 'zone_id': zone_id})
    if site is None: return None
    if len(site['ads']) == 0: return None
    ecpm_groups = groupby(site['ads'], key=lambda ad:ad['ecpm'])
    ecpm, ad_group = ecpm_groups.next()
    return choice(list(ad_group))

----------------------------------------

TITLE: Creating Encryption Schema for MongoDB CSFLE
DESCRIPTION: This snippet demonstrates how to create an encryption schema that specifies how the client application encrypts document fields. It requires updating the code with the Base64 Data Encryption Key (DEK) ID.

LANGUAGE: java
CODE:
String jsonSchema = "{\n" +
    "    'bsonType': 'object',\n" +
    "    'encryptMetadata': {\n" +
    "        'keyId': [UUID('<Your Base64 DEK ID>')]\n" +
    "    },\n" +
    "    'properties': {\n" +
    "        'encryptedField': {\n" +
    "            'encrypt': {\n" +
    "                'bsonType': 'string',\n" +
    "                'algorithm': 'AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic'\n" +
    "            }\n" +
    "        }\n" +
    "    }\n" +
    "}";
BsonDocument schemaDocument = BsonDocument.parse(jsonSchema);
Map<String, BsonDocument> schemaMap = new HashMap<String, BsonDocument>();
schemaMap.put("medicalRecords.patients", schemaDocument);

LANGUAGE: javascript
CODE:
const schema = {
  "medicalRecords.patients": {
    bsonType: "object",
    encryptMetadata: {
      keyId: [UUID("<Your Base64 DEK ID>")],
    },
    properties: {
      encryptedField: {
        encrypt: {
          bsonType: "string",
          algorithm: "AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic",
        },
      },
    },
  },
};

LANGUAGE: python
CODE:
schema = {
    "medicalRecords.patients": {
        "bsonType": "object",
        "encryptMetadata": {
            "keyId": [Binary.from_uuid(UUID("<Your Base64 DEK ID>"))]
        },
        "properties": {
            "encryptedField": {
                "encrypt": {
                    "bsonType": "string",
                    "algorithm": "AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic"
                }
            }
        }
    }
}

LANGUAGE: csharp
CODE:
var schema = new BsonDocument
{
    { "medicalRecords.patients", new BsonDocument
        {
            { "bsonType", "object" },
            { "encryptMetadata", new BsonDocument
                {
                    { "keyId", new BsonArray { new Guid("<Your Base64 DEK ID>") } }
                }
            },
            { "properties", new BsonDocument
                {
                    { "encryptedField", new BsonDocument
                        {
                            { "encrypt", new BsonDocument
                                {
                                    { "bsonType", "string" },
                                    { "algorithm", "AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic" }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
};

LANGUAGE: go
CODE:
dekID, err := primitive.ParseUUID("<Your Base64 DEK ID>")
if err != nil {
    log.Fatal(err)
}

schema := bson.M{
    "medicalRecords.patients": bson.M{
        "bsonType": "object",
        "encryptMetadata": bson.M{
            "keyId": []primitive.Binary{primitive.Binary{Subtype: 4, Data: dekID[:]}},
        },
        "properties": bson.M{
            "encryptedField": bson.M{
                "encrypt": bson.M{
                    "bsonType":  "string",
                    "algorithm": "AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic",
                },
            },
        },
    },
}

----------------------------------------

TITLE: Update with $set Operator
DESCRIPTION: Example showing how to update specific fields in a document using the $set operator.

LANGUAGE: javascript
CODE:
db.books.update(
   { _id: 1 },
   {
     $inc: { stock: 5 },
     $set: {
       item: "ABC123",
       "info.publisher": "2222",
       tags: [ "software" ],
       "ratings.1": { by: "xyz", rating: 3 }
     }
   }
)

----------------------------------------

TITLE: Basic Array Element Projection with $ Operator
DESCRIPTION: Shows the basic syntax for using the $ projection operator to return specific array elements that match a condition

LANGUAGE: javascript
CODE:
db.collection.find( { <array>: <condition> ... },
                   { "<array>.$": 1 } )
db.collection.find( { <array.field>: <condition> ...},
                   { "<array>.$": 1 } )

----------------------------------------

TITLE: Searching with Text Score in MongoDB
DESCRIPTION: Demonstrates how to perform a text search query that returns and sorts by text score using the $meta operator to access score metadata.

LANGUAGE: javascript
CODE:
db.blog.find(
   {
      $text: { $search: "ice cream" }
   },
   {
      score: { $meta: "textScore" }
   }
).sort( { score: { $meta: "textScore" } } )

----------------------------------------

TITLE: MongoDB checkMetadataConsistency Method Note
DESCRIPTION: Note regarding the checkMetadataConsistency helper method availability. The method can only be executed when connecting to mongos instances and is not supported on mongod instances.

LANGUAGE: plaintext
CODE:
checkMetadataConsistency

----------------------------------------

TITLE: Configuring MongoDB YUM Repository
DESCRIPTION: YUM repository configuration block that defines the MongoDB package repository source for RHEL 9 systems. Includes repository name, base URL, GPG key verification settings, and repository state.

LANGUAGE: cfg
CODE:
[mongodb-org-{+version+}]
name=MongoDB Repository
baseurl=https://repo.mongodb.org/yum/redhat/9/mongodb-org/{+version+}/x86_64/
gpgcheck=1
enabled=1
gpgkey=https://pgp.mongodb.com/server-{+pgp-version+}.asc

----------------------------------------

TITLE: Using $indexStats Aggregation for Index Usage Statistics in MongoDB
DESCRIPTION: This snippet demonstrates how to use the $indexStats aggregation stage to retrieve statistics on index usage for a collection.

LANGUAGE: javascript
CODE:
db.orders.aggregate( [ { $indexStats: { } } ] )

----------------------------------------

TITLE: Inserting Encrypted Document with CSFLE in Go
DESCRIPTION: This snippet shows how to insert an encrypted document using a CSFLE-enabled MongoClient in Go. It inserts a document into the 'medicalRecords.patients' collection with encrypted fields. Note that a struct with 'bson' tags can be passed directly to the driver for encoding.

LANGUAGE: go
CODE:
// Code snippet not provided in the given text

----------------------------------------

TITLE: Date Conversion with Fixed Timezone
DESCRIPTION: Aggregation pipeline example showing date conversion using a fixed timezone (America/New_York).

LANGUAGE: javascript
CODE:
db.logmessages.aggregate( [ {
   $project: {
      date: {
         $dateFromString: {
            dateString: '$date',
            timezone: 'America/New_York'
         }
      }
   }
} ] )

----------------------------------------

TITLE: Configuring MongoDB with In-Memory Storage Engine (YAML)
DESCRIPTION: YAML configuration file content to set up MongoDB with the in-memory storage engine. This specifies the storage engine and database path.

LANGUAGE: yaml
CODE:
storage:
   engine: inMemory
   dbPath: <path>

----------------------------------------

TITLE: MongoDB Driver Version Changes
DESCRIPTION: List of MongoDB driver versions that include the write concern changes across different programming languages.

LANGUAGE: plaintext
CODE:
C#, version 1.7
Java, version 2.10.0
Node.js, version 1.2
Perl, version 0.501.1
Legacy PHP, version 1.4
Python, version 2.4
Ruby, version 1.8

----------------------------------------

TITLE: Creating List File for MongoDB Enterprise on Ubuntu
DESCRIPTION: This snippet creates a list file for MongoDB Enterprise in the /etc/apt/sources.list.d/ directory. It adds the MongoDB repository to the system's package sources.

LANGUAGE: bash
CODE:
echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.com/apt/ubuntu focal/mongodb-enterprise/5.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-enterprise-5.0.list

----------------------------------------

TITLE: MongoDB Collection Initialization for $trunc Examples
DESCRIPTION: Creates a sample collection with test documents containing decimal values to demonstrate truncation operations.

LANGUAGE: javascript
CODE:
db.samples.insertMany(
   [
      { _id: 1, value: 19.25 },
      { _id: 2, value: 28.73 },
      { _id: 3, value: 34.32 },
      { _id: 4, value: -45.34 }
   ]
)

----------------------------------------

TITLE: Defining $pop Operator in MongoDB
DESCRIPTION: Shows the basic syntax for using the $pop operator in MongoDB. The operator removes the first or last element of an array based on the provided value (-1 or 1).

LANGUAGE: javascript
CODE:
{ $pop: { <field>: <-1 | 1>, ... } }

----------------------------------------

TITLE: MongoDB estimatedDocumentCount Usage Example
DESCRIPTION: Example showing how to use estimatedDocumentCount to retrieve the total count of documents in an 'orders' collection.

LANGUAGE: javascript
CODE:
db.orders.estimatedDocumentCount({})

----------------------------------------

TITLE: Querying MongoDB for Specific Array Elements using Shell
DESCRIPTION: This snippet demonstrates how to query MongoDB to find documents where the 'instock' array contains elements with specific quantity and warehouse values using the MongoDB shell.

LANGUAGE: javascript
CODE:
db.inventory.find( { "instock.qty": 5, "instock.warehouse": "A" } )

----------------------------------------

TITLE: Installing Required Packages for MongoDB
DESCRIPTION: Installs the gnupg and curl packages which are prerequisites for MongoDB installation on Debian-based systems.

LANGUAGE: bash
CODE:
sudo apt-get install gnupg curl

----------------------------------------

TITLE: SUSE Linux Installation Commands
DESCRIPTION: Commands for importing GPG key, adding repository, and installing libmongocrypt on SUSE Linux

LANGUAGE: sh
CODE:
sudo rpm --import https://pgp.mongodb.com/libmongocrypt.asc

LANGUAGE: sh
CODE:
sudo zypper addrepo --gpgcheck "https://libmongocrypt.s3.amazonaws.com/zypper/suse/<release>/libmongocrypt/{+libmongocrypt-version+}/x86_64" libmongocrypt

LANGUAGE: sh
CODE:
sudo zypper -n install libmongocrypt

----------------------------------------

TITLE: Zone-Based Resharding in MongoDB
DESCRIPTION: Example demonstrating how to reshard a collection with zone configuration.

LANGUAGE: javascript
CODE:
sh.addShardToZone( "shard2", "NewZone" )
sh.addShardToZone( "shard3", "NewZone" )

sh.reshardCollection(
  "test.scores", 
  { "studentId": 1, "testId": 1}, 
  { zones: [ {
    min: { "studentId": MinKey(), "testId": MinKey() },
    max: { "studentId": MaxKey(), "testId": MaxKey() },
    zone: "NewZone" }
    ]
} )

----------------------------------------

TITLE: Inserting Documents with Array of Nested Fields
DESCRIPTION: Example showing how to insert multiple documents containing arrays with nested warehouse fields.

LANGUAGE: javascript
CODE:
db.products.insertMany( [
   { item: "journal", instock: [ { warehouse: "A"}, { warehouse: "C" } ] },
   { item: "notebook", instock: [ { warehouse: "C" } ] },
   { item: "paper", instock: [ { warehouse: "A" }, { warehouse: "B" } ] },
   { item: "planner", instock: [ { warehouse: "A" }, { warehouse: "B" } ] },
   { item: "postcard", instock: [ { warehouse: "B" }, { warehouse: "C" } ] }
] )

----------------------------------------

TITLE: Finding Common Flowers Using SetIntersection
DESCRIPTION: Aggregation pipeline that uses $setIntersection to find common elements between flowerFieldA and flowerFieldB arrays.

LANGUAGE: javascript
CODE:
db.flowers.aggregate(
   [
     { $project: { flowerFieldA: 1, flowerFieldB: 1, commonToBoth: { $setIntersection: [ "$flowerFieldA", "$flowerFieldB" ] }, _id: 0 } }
   ]
)

----------------------------------------

TITLE: Sample Data Structure and Query Results
DESCRIPTION: Example showing the data structure and query results when using the $ projection operator

LANGUAGE: javascript
CODE:
{ "_id" : 1, "semester" : 1, "grades" : [ 70, 87, 90 ] }
{ "_id" : 2, "semester" : 1, "grades" : [ 90, 88, 92 ] }
{ "_id" : 3, "semester" : 1, "grades" : [ 85, 100, 90 ] }

----------------------------------------

TITLE: Searching Multiple Text-Indexed Fields in MongoDB
DESCRIPTION: Demonstrates searching across multiple text-indexed fields using the $text operator.

LANGUAGE: javascript
CODE:
db.blog.find(
   {
      $text: { $search: "food" }
   }
)

----------------------------------------

TITLE: Setting MongoDB Shell Batch Size
DESCRIPTION: Demonstrates how to configure the number of documents returned per batch in MongoDB shell queries by modifying the DBQuery.shellBatchSize attribute. The default value is 20 documents per batch.

LANGUAGE: javascript
CODE:
DBQuery.shellBatchSize = <number>

----------------------------------------

TITLE: planCacheListFilters Command Output Format
DESCRIPTION: Example structure of the output returned by the planCacheListFilters command, showing the filters array with query details and index information.

LANGUAGE: text
CODE:
{
   "filters" : [
      {
         "query" : <query>
         "sort" : <sort>,
         "projection" : <projection>,
         "collation" : <collation>,
         "indexes" : [
            <index1>,
            ...
         ]
      },
      ...
   ],
   "ok" : 1
}

----------------------------------------

TITLE: Querying MongoDB with Division Expression
DESCRIPTION: Example of a MongoDB query that demonstrates error handling with division operations. This query will always produce an error when $x is 0 due to division by zero.

LANGUAGE: javascript
CODE:
db.example.find( {
   $expr: { $eq: [ { $divide: [ 1, "$x" ] }, 3 ] }
} )

----------------------------------------

TITLE: Configuring Sync Target Using replSetSyncFrom Command
DESCRIPTION: Uses the replSetSyncFrom database command to manually specify a sync target for a secondary node in a replica set. The command requires the hostname and optional port of the desired sync source.

LANGUAGE: javascript
CODE:
db.adminCommand( { replSetSyncFrom: "hostname<:port>" } );

----------------------------------------

TITLE: Access Control Permission Configuration
DESCRIPTION: Required authorization configuration showing the cluster resource and necessary action permissions for the command.

LANGUAGE: javascript
CODE:
{
   resource: { cluster : true },
   actions: [ "transitionFromDedicatedConfigServer" ]
}

----------------------------------------

TITLE: Verifying Capped Collection Status in MongoDB
DESCRIPTION: Checks if the 'log2' collection is now a capped collection using the isCapped() method, which returns true for capped collections.

LANGUAGE: javascript
CODE:
db.log2.isCapped()

LANGUAGE: javascript
CODE:
true

----------------------------------------

TITLE: Shutting Down MongoDB Instance
DESCRIPTION: Command to safely shut down a running MongoDB instance using mongosh shell before performing the upgrade.

LANGUAGE: javascript
CODE:
db.adminCommand( { shutdown: 1 } )

----------------------------------------

TITLE: Creating Unique Index in MongoDB
DESCRIPTION: Recreates the url index with a unique constraint.

LANGUAGE: javascript
CODE:
db.siteAnalytics.createIndex( { "url": 1 }, { "unique": true } )

----------------------------------------

TITLE: Querying Documents within a Polygon in MongoDB
DESCRIPTION: This example shows a MongoDB query that uses the $polygon operator to find documents with coordinates within a specific polygon. The polygon is defined by three points: [0, 0], [3, 6], and [6, 0].

LANGUAGE: javascript
CODE:
db.places.find(
  {
     loc: {
       $geoWithin: { $polygon: [ [ 0 , 0 ], [ 3 , 6 ], [ 6 , 0 ] ] }
     }
  }
)

----------------------------------------

TITLE: Disabling JavaScript via Command Line in MongoDB
DESCRIPTION: Commands for disabling server-side JavaScript execution in MongoDB using command line options. Can be applied to both mongod and mongos instances.

LANGUAGE: shell
CODE:
--noscripting

----------------------------------------

TITLE: Dynamic n Value Based on Group Key
DESCRIPTION: Demonstrates how to use $minN with a dynamic n value based on the group key using conditional logic.

LANGUAGE: javascript
CODE:
db.gamescores.aggregate([
   {
      $group:
      {
         _id: {"gameId": "$gameId"},
         gamescores:
            {
               $minN:
                  {
                     input: ["$score","$playerId"],
                     n: { $cond: { if: {$eq: ["$gameId","G2"] }, then: 1, else: 3 } }
                  }
            }
      }
   }
] )

----------------------------------------

TITLE: Map Function with Multiple Emits
DESCRIPTION: Example map function that emits multiple key-value pairs by iterating over an array field.

LANGUAGE: javascript
CODE:
function() {
    this.items.forEach(function(item){ emit(item.sku, 1); });
}

----------------------------------------

TITLE: Loading Server Scripts
DESCRIPTION: Loads the stored JavaScript functions from system.js into the current shell session.

LANGUAGE: javascript
CODE:
db.loadServerScripts()

----------------------------------------

TITLE: Inserting Encrypted Documents with CSFLE and KMIP
DESCRIPTION: Code examples showing how to insert encrypted documents into the medicalRecords.patients namespace using a CSFLE-enabled MongoClient. The examples demonstrate the insertion process across different programming languages, with specific handling for encrypted fields.

LANGUAGE: java
CODE:
// Code reference: /includes/generated/in-use-encryption/csfle/java/kmip/reader/src/main/java/com/mongodb/csfle/InsertEncryptedDocument.java

LANGUAGE: javascript
CODE:
// Code reference: /includes/generated/in-use-encryption/csfle/node/kmip/reader/insert_encrypted_document.js

LANGUAGE: python
CODE:
# Code reference: /includes/generated/in-use-encryption/csfle/python/kmip/reader/insert_encrypted_document.py

LANGUAGE: csharp
CODE:
// Code reference: /includes/generated/in-use-encryption/csfle/dotnet/kmip/reader/CSFLE/InsertEncryptedDocument.cs

LANGUAGE: go
CODE:
// Code reference: /includes/generated/in-use-encryption/csfle/go/kmip/reader/insert-encrypted-document.go

LANGUAGE: json
CODE:
// Code reference: /includes/quick-start/inserted-doc-enc.json

----------------------------------------

TITLE: Creating a Regular Index for Coordinate Pairs in MongoDB
DESCRIPTION: This snippet shows how to create a regular ascending index on the 'address' field, which is recommended to improve performance for exact coordinate pair queries instead of using a 2d index.

LANGUAGE: javascript
CODE:
db.contacts.createIndex( { address: 1 } )

----------------------------------------

TITLE: Adding Replica Set Shard to Cluster
DESCRIPTION: MongoDB shell command to add a replica set as a shard to the sharded cluster. Requires authentication as cluster admin.

LANGUAGE: javascript
CODE:
sh.addShard( "<replSetName>/s1-mongo1.example.net:27017")

----------------------------------------

TITLE: Inserting Sample Documents into MongoDB Collection
DESCRIPTION: Inserts multiple sample documents into the 'scores' collection for demonstration purposes.

LANGUAGE: javascript
CODE:
db.scores.insertMany( [
  { _id: 6305, name : "A. MacDyver", "assignment" : 5, "points" : 24 },
  { _id: 6308, name : "B. Batlock", "assignment" : 3, "points" : 22 },
  { _id: 6312, name : "M. Tagnum", "assignment" : 5, "points" : 30 },
  { _id: 6319, name : "R. Stiles", "assignment" : 2, "points" : 12 },
  { _id: 6322, name : "A. MacDyver", "assignment" : 2, "points" : 14 },
  { _id: 6234, name : "R. Stiles", "assignment" : 1, "points" : 10 }
] )

----------------------------------------

TITLE: Starting Collection Defragmentation with MongoDB Command
DESCRIPTION: Command to initiate defragmentation on a sharded collection using the configureCollectionBalancing command. The command targets a specific collection and enables defragmentation.

LANGUAGE: javascript
CODE:
db.adminCommand(
   {
      configureCollectionBalancing: "test.ordersShardedCollection",
      defragmentCollection: true
   }
)

----------------------------------------

TITLE: Installing libmongocrypt on Debian/Ubuntu - Key Import
DESCRIPTION: Command to import the public GPG key for libmongocrypt package verification

LANGUAGE: sh
CODE:
sudo sh -c 'curl -s --location https://pgp.mongodb.com/libmongocrypt.asc | gpg --dearmor >/etc/apt/trusted.gpg.d/libmongocrypt.gpg'

----------------------------------------

TITLE: Secondary Member Example Output
DESCRIPTION: Example response from running replSetGetStatus on a secondary replica set member showing sync source information and replication lag metrics.

LANGUAGE: javascript
CODE:
{
   "set" : "replset",
   "date" : {+isodate+},
   "myState" : 2,
   "term" : NumberLong(3),
   "syncSourceHost" : "m3.example.net:27017",
   "syncSourceId" : 2,
   // Additional fields omitted for brevity
   "ok" : 1
}

----------------------------------------

TITLE: Creating a Compound Text Index in MongoDB
DESCRIPTION: This code creates a compound index on the 'inventory' collection. The index includes an ascending index on the 'department' field and a text index on the 'description' field, optimizing queries that filter by department and search description text.

LANGUAGE: javascript
CODE:
db.inventory.createIndex(
   {
     department: 1,
     description: "text"
   }
)

----------------------------------------

TITLE: Creating Partial Unique Index in Go
DESCRIPTION: Creates a partial unique index on the keyAltNames field in the encryption.__keyVault collection using Go MongoDB driver.

LANGUAGE: go
CODE:
_, err = keyVault.Indexes().CreateOne(
    context.TODO(),
    mongo.IndexModel{
        Keys: bson.D{{"keyAltNames", 1}},
        Options: options.Index().
            SetUnique(true).
            SetPartialFilterExpression(bson.D{
                {"keyAltNames", bson.D{{"$exists", true}}},
            }),
    },
)

----------------------------------------

TITLE: Setting allowMultipleArbiters Parameter in MongoDB
DESCRIPTION: This snippet demonstrates how to start a MongoDB node with the allowMultipleArbiters parameter set to true, which is required to add multiple arbiters to a replica set in MongoDB 5.3 or later.

LANGUAGE: python
CODE:
mongod --setParameter allowMultipleArbiters=true

----------------------------------------

TITLE: Querying MongoDB with Array Index
DESCRIPTION: Examples of queries using explicit array indices with wildcard indexes, showing both supported and unsupported query patterns.

LANGUAGE: javascript
CODE:
db.fleet.find( { "ship.captains.0.name": "Francis Drake" } )

db.fleet.find( { "ship.coordinates.0.1": 10 } )

----------------------------------------

TITLE: Querying MongoDB with $gt Operator in Compass
DESCRIPTION: This snippet demonstrates the filter syntax for MongoDB Compass to find documents where 'dim_cm' is greater than 25.

LANGUAGE: javascript
CODE:
{ dim_cm: { $gt: 25 } }

----------------------------------------

TITLE: Calculating Required Shard Storage Space Formula
DESCRIPTION: Formula for calculating the minimum storage space required per shard when resharding a collection. Takes into account collection size, index size, and number of shards with a 2x safety factor.

LANGUAGE: none
CODE:
storage_req = ( ( collection_storage_size + index_size ) * 2 ) / shard_count

----------------------------------------

TITLE: mergeChunks Command Error: Noncontiguous Chunks in MongoDB
DESCRIPTION: Example of the error message returned when the input chunks are not contiguous.

LANGUAGE: javascript
CODE:
{
  "ok" : 0,
  "errmsg" : "could not merge chunks, collection test.users has more than 2 chunks between [{ username: \"user29937\" }, { username: \"user49877\" })"
  "$clusterTime" : {
     "clusterTime" : Timestamp(1510767081, 1),
     "signature" : {
         "hash" : BinData(0,"okKHD0QuzcpbVQg7mP2YFw6lM04="),
         "keyId" : NumberLong("6488693018630029321")
      }
  },
  "operationTime" : Timestamp(1510767081, 1)

}

----------------------------------------

TITLE: Inserting Sample Documents into MongoDB Collection
DESCRIPTION: This snippet demonstrates how to insert multiple documents into a 'contacts' collection in MongoDB. It creates two documents with different fields to showcase validation scenarios.

LANGUAGE: json
CODE:
db.contacts.insertMany([
   { "_id": 1, "name": "Anne", "phone": "+1 555 123 456", "city": "London", "status": "Complete" },
   { "_id": 2, "name": "Ivan", "city": "Vancouver" }
])

----------------------------------------

TITLE: Installing MongoDB Enterprise Server on Ubuntu
DESCRIPTION: This snippet installs the MongoDB Enterprise Server on Ubuntu using the apt-get install command. It specifies the mongodb-enterprise package for installation.

LANGUAGE: bash
CODE:
sudo apt-get install -y mongodb-enterprise

----------------------------------------

TITLE: List Sessions for Specific Users
DESCRIPTION: Aggregation pipeline that lists sessions for a specific user (myAppReader@test). Requires appropriate privileges if current user is different from specified user.

LANGUAGE: javascript
CODE:
use config

db.system.sessions.aggregate( [ { $listSessions: { users: [ {user: "myAppReader", db: "test" } ] } } ] )

----------------------------------------

TITLE: Viewing Java Synchronous Driver Code Examples
DESCRIPTION: This snippet indicates that the user is viewing Java synchronous driver code examples and instructs how to switch to a different driver.

LANGUAGE: java
CODE:
// You are viewing the Java synchronous driver code examples.
// Use the dropdown menu to select a different driver.

----------------------------------------

TITLE: Complex Compound Multikey Index Example
DESCRIPTION: Demonstrates creating and querying a compound multikey index with nested array fields and document arrays.

LANGUAGE: javascript
CODE:
db.survey2.insertMany( [
   {
      _id: 1,
      item: "ABC",
      ratings: [ { score: 2, by: "mn" }, { score: 9, by: "anon" } ]
   },
   {
      _id: 2,
      item: "XYZ",
      ratings: [ { score: 5, by: "anon" }, { score: 7, by: "wv" } ]
   }
] )

db.survey2.createIndex(
   {
      "item": 1,
      "ratings.score": 1,
      "ratings.by": 1
   }
)

----------------------------------------

TITLE: Setting Up AWS IAM Role Authentication for MongoDB in C#
DESCRIPTION: This C# code demonstrates how to add an empty Dictionary for AWS credentials to the kmsProviderCredentials object, allowing the MongoDB driver to use IAM role credentials from the environment.

LANGUAGE: csharp
CODE:
kmsProviderCredentials.Add("aws", new Dictionary<string, object>);

----------------------------------------

TITLE: Testing MongoDB Replica Set Member Connections
DESCRIPTION: Demonstrates how to test bidirectional connections between replica set members using the mongosh command line tool.

LANGUAGE: bash
CODE:
mongosh --host m2.example.net --port 27017

mongosh --host m3.example.net --port 27017

LANGUAGE: bash
CODE:
mongosh --host m1.example.net --port 27017

mongosh --host m3.example.net --port 27017

LANGUAGE: bash
CODE:
mongosh --host m1.example.net --port 27017

mongosh --host m2.example.net --port 27017

----------------------------------------

TITLE: Querying Exact Coordinate Pairs in MongoDB
DESCRIPTION: This query demonstrates searching for an exact coordinate pair in the 'contacts' collection. The documentation notes that a 2d index on the address field would not improve performance for this type of query.

LANGUAGE: javascript
CODE:
db.contacts.find( { address: [ 55.5, 42.3 ] } )

----------------------------------------

TITLE: MongoDB Time Series Collection Configuration
DESCRIPTION: Configuration settings for a time series collection specifying the timeField, metaField, and granularity parameters.

LANGUAGE: javascript
CODE:
timeseries: {
   timeField: "timestamp",
   metaField: "ticker",
   granularity: "seconds"
}

----------------------------------------

TITLE: Installing Dependencies for MongoDB Setup
DESCRIPTION: Installs the gnupg and curl packages using apt-get, which are required for the MongoDB installation process.

LANGUAGE: bash
CODE:
sudo apt-get install gnupg curl

----------------------------------------

TITLE: Connecting to MongoDB Replica Set Member
DESCRIPTION: Command to connect to a specific replica set member using mongosh. Requires specifying the hostname and port of the target member.

LANGUAGE: bash
CODE:
mongosh --host <hostname>:<port>

----------------------------------------

TITLE: Configuring MongoDB Auditing with OCSF Schema in YAML
DESCRIPTION: YAML configuration for enabling MongoDB auditing with OCSF schema output to a JSON file.

LANGUAGE: yaml
CODE:
storage:
   dbPath: data/db
auditLog:
   destination: file
   format: JSON
   path: data/db/auditLog.json
   schema: OCSF

----------------------------------------

TITLE: Projection with Different Array Field
DESCRIPTION: Demonstrates using the $ operator to project an array field different from the one in the query condition

LANGUAGE: javascript
CODE:
db.collection.find( { <someOtherArray>: <condition> ... }, 
                   { "<array>.$" : 1 } )

----------------------------------------

TITLE: Collection with Default Collation Example - MongoDB JavaScript
DESCRIPTION: Example demonstrating creation of a collection with default collation settings, index creation, and query behavior with inherited collation settings.

LANGUAGE: javascript
CODE:
db.createCollection("names", { collation: { locale: 'en_US', strength: 2 } } )

db.names.createIndex( { first_name: 1 } ) // inherits the default collation

LANGUAGE: javascript
CODE:
db.names.insertMany( [
   { first_name: "Betsy" },
   { first_name: "BETSY"},
   { first_name: "betsy"}
] )

LANGUAGE: javascript
CODE:
db.names.find( { first_name: "betsy" } )
// inherits the default collation: { collation: { locale: 'en_US', strength: 2 } }
// finds three results

LANGUAGE: javascript
CODE:
db.names.find( { first_name: "betsy" } ).collation( { locale: 'en_US' } )
// does not use the collection's default collation, finds one result

----------------------------------------

TITLE: Basic $sortByCount Syntax
DESCRIPTION: Shows the basic syntax structure for the $sortByCount aggregation stage operator.

LANGUAGE: javascript
CODE:
{ $sortByCount:  <expression> }

----------------------------------------

TITLE: InconsistentIndex Document Format in MongoDB
DESCRIPTION: Defines the JSON structure for InconsistentIndex inconsistency documents, specifying the required fields and their types.

LANGUAGE: json
CODE:
{
   type: "InconsistentIndex",
   description: "<string>",
   details: {
      namespace: "<string>",
      info: <document>
   }
}

----------------------------------------

TITLE: Inserting Sample Data for Students Collection in MongoDB
DESCRIPTION: This snippet inserts sample data into the 'students' collection to demonstrate update operations.

LANGUAGE: javascript
CODE:
db.students.insertMany( [
   { _id: 1, test1: 95, test2: 92, test3: 90, modified: new Date("01/05/2020") },
   { _id: 2, test1: 98, test2: 100, test3: 102, modified: new Date("01/05/2020") },
   { _id: 3, test1: 95, test2: 110, modified: new Date("01/04/2020") }
] )

----------------------------------------

TITLE: Running and Verifying THP Settings
DESCRIPTION: Commands to start the THP script and verify the configuration settings on different Linux distributions.

LANGUAGE: sh
CODE:
sudo /etc/init.d/enable-transparent-hugepages start

LANGUAGE: sh
CODE:
cat /sys/kernel/mm/transparent_hugepage/enabled && cat /sys/kernel/mm/transparent_hugepage/defrag && cat /sys/kernel/mm/transparent_hugepage/khugepaged/max_ptes_none && cat /proc/sys/vm/overcommit_memory

LANGUAGE: sh
CODE:
cat /sys/kernel/mm/redhat_transparent_hugepage/enabled

----------------------------------------

TITLE: Running CollMod Command in MongoDB JavaScript
DESCRIPTION: This snippet demonstrates how to use the collMod command to remove invalid indexes detected by the validate command with the metadata option. The collMod command is used as a follow-up action when invalid indexes are found.

LANGUAGE: javascript
CODE:
db.runCommand( { collMod: <collectionName> } )

----------------------------------------

TITLE: Defining reStructuredText Directives and Substitutions
DESCRIPTION: Sets up various reStructuredText directives and substitutions for use throughout the document. Includes metadata, table of contents configuration, and custom text replacements.

LANGUAGE: reStructuredText
CODE:
.. meta::
   :keywords: on-prem

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: twocols

.. |arrow| unicode:: U+27A4
.. |edition| replace:: Community
.. |package-name| replace:: ``{+package-name-org+}``
.. |distro-name| replace:: Ubuntu
.. |package-manager| replace:: ``apt``
.. |executable-name| replace:: ``mongod``
.. |mdb-download-link| replace:: `MongoDB Download Center <https://www.mongodb.com/try/download/community?tck=docs_server>`__

.. include:: /includes/in-dev.rst

.. include:: /includes/rapid-release.rst

----------------------------------------

TITLE: Verifying OpenSSL FIPS Support on Linux
DESCRIPTION: Command to check the OpenSSL version and confirm FIPS support on Linux systems.

LANGUAGE: bash
CODE:
openssl version

----------------------------------------

TITLE: Querying with Wildcard Index in MongoDB
DESCRIPTION: Examples of queries supported by the wildcard index, including queries on simple fields, embedded documents, and arrays.

LANGUAGE: javascript
CODE:
db.artwork.find( { "style": "modern" } )

LANGUAGE: javascript
CODE:
db.artwork.find( { "artist.nationality": "French" } )

LANGUAGE: javascript
CODE:
db.artwork.find( { "materials": "bronze" } )

----------------------------------------

TITLE: Viewing defaultMaxTimeMS Parameter in MongoDB
DESCRIPTION: This snippet shows how to view the current value of the defaultMaxTimeMS parameter in MongoDB. It uses the getClusterParameter command on the admin database to retrieve the parameter value.

LANGUAGE: javascript
CODE:
db.adminCommand( { getClusterParameter: "defaultMaxTimeMS" } )

----------------------------------------

TITLE: Stepping Down MongoDB Primary
DESCRIPTION: MongoDB shell command to step down the primary member of a replica set. This is part of the process for performing a rolling restart that includes the primary.

LANGUAGE: javascript
CODE:
rs.stepDown()

----------------------------------------

TITLE: Explicit Collection Creation in MongoDB Transactions
DESCRIPTION: Shows the explicit methods for creating collections and indexes within transactions, requiring readConcern level 'local'.

LANGUAGE: javascript
CODE:
db.createCollection()
db.collection.createIndex()
db.collection.createIndexes()

----------------------------------------

TITLE: Defining JSON Schema Object for MongoDB Validation
DESCRIPTION: Creates a JSON Schema object that defines validation rules for the 'inventory' collection, including required fields and their types.

LANGUAGE: javascript
CODE:
let myschema =
{
   $jsonSchema: { 
      required: [ "item", "qty", "instock" ],
      properties: { 
         item: { bsonType: "string" }, 
         qty: { bsonType: "int" }, 
         size: { 
            bsonType: "object",
            required: [ "unit" ], 
            properties: { 
               unit: { bsonType: "string" }, 
               h: { bsonType: "double" }, 
               w: { bsonType: "double" } 
            }
          },
          instock: { bsonType: "bool" } 
      } 
   }
}

----------------------------------------

TITLE: Using $divide in MongoDB Aggregation Pipeline
DESCRIPTION: This example demonstrates how to use the $divide operator in a MongoDB aggregation pipeline. It divides the 'hours' field by 8 to calculate the number of workdays, projecting the result alongside the city name.

LANGUAGE: javascript
CODE:
db.planning.aggregate(
   [
     { $project: { city: 1, workdays: { $divide: [ "$hours", 8 ] } } }
   ]
)

----------------------------------------

TITLE: Insert Document With Custom _id in MongoDB
DESCRIPTION: Example demonstrating how to insert a document with a custom _id field specified.

LANGUAGE: javascript
CODE:
try {
   db.products.insertOne( { _id: 10, item: "box", qty: 20 } );
} catch (e) {
   print (e);
}

----------------------------------------

TITLE: Creating Encryption Schema for MongoDB Collection
DESCRIPTION: This snippet defines an encryption schema for a MongoDB collection. It specifies which fields should be encrypted and the encryption keys to be used, essential for implementing Queryable Encryption.

LANGUAGE: javascript
CODE:
const schema = {
  "properties": {
    "encryptedField": {
      "encrypt": {
        "keyId": [
          {
            "$binary": {
              "base64": "<Your Base64 Encoded Key ID>",
              "subType": "04"
            }
          }
        ],
        "bsonType": "string",
        "algorithm": "AEAD_AES_256_CBC_HMAC_SHA_512-Random"
      }
    }
  },
  "bsonType": "object"
};

----------------------------------------

TITLE: Configuring MongoDB Client for API Version Deprecation Detection
DESCRIPTION: Demonstrates how to initialize a MongoDB client with API version settings to detect deprecated commands and behaviors. The client is configured with API version 1, strict mode, and deprecation error reporting enabled.

LANGUAGE: python
CODE:
client = MongoClient(
  <connection string>,
  api={"version": "1", "strict": True, "deprecationErrors": True}
)

----------------------------------------

TITLE: System Information Retrieval in MongoDB Shell
DESCRIPTION: Methods for retrieving system information like hostname and memory usage

LANGUAGE: javascript
CODE:
os.hostname()

LANGUAGE: javascript
CODE:
process.memoryUsage()

----------------------------------------

TITLE: Inserting Document with Embedded Multi-Location Array in MongoDB
DESCRIPTION: This example shows how to insert a document with an array of embedded documents, each containing location data, into MongoDB.

LANGUAGE: javascript
CODE:
db.records.insertOne( {
   name : "John Smith",
   addresses : [
      {
         context : "home" ,
         loc : [ 55.5, 42.3 ]
      },
      {
         context : "work",
         loc : [ -74 , 44.74 ]
      }
   ]
} )

----------------------------------------

TITLE: Adding Schema Version Field in MongoDB
DESCRIPTION: Updates all existing documents to include a schemaVersion field with value 1.

LANGUAGE: javascript
CODE:
db.contacts.updateMany(
   { },
   {
      $set: { schemaVersion: 1 }
   }
)

----------------------------------------

TITLE: Creating Encryption Schema for MongoDB Collection
DESCRIPTION: This snippet defines an encryption schema for a MongoDB collection. It specifies which fields should be encrypted and the encryption keys to be used, essential for implementing Queryable Encryption.

LANGUAGE: javascript
CODE:
const schema = {
  "properties": {
    "encryptedField": {
      "encrypt": {
        "keyId": [
          {
            "$binary": {
              "base64": "<Your Base64 Encoded Key ID>",
              "subType": "04"
            }
          }
        ],
        "bsonType": "string",
        "algorithm": "AEAD_AES_256_CBC_HMAC_SHA_512-Random"
      }
    }
  },
  "bsonType": "object"
};

----------------------------------------

TITLE: Creating Sellers Collection in MongoDB
DESCRIPTION: Creates a sellers collection with detailed seller information including contact details and product inventory.

LANGUAGE: javascript
CODE:
use test

db.sellers.insertOne(
   {
      id: 456,
      name: "Cool Clothes Co",
      location: {
         address: "21643 Andreane Shores",
         state: "Ohio",
         country: "United States"
      },
      phone: "567-555-0105",
      products: [
         {
            name: "sweater",
            price: 30
         },
         {
            name: "t-shirt",
            price: 10
         },
         {
            name: "vest",
            price: 20
         }
      ]
   }
)

----------------------------------------

TITLE: Including MongoDB 7.0 Changelog Files using reStructuredText
DESCRIPTION: This snippet demonstrates how to include separate changelog files for each MongoDB 7.0 release using reStructuredText directives. It includes files from version 7.0.17 down to 7.0.1.

LANGUAGE: reStructuredText
CODE:
.. include:: /includes/changelogs/releases/7.0.17.rst

.. include:: /includes/changelogs/releases/7.0.16.rst

.. include:: /includes/changelogs/releases/7.0.15.rst

.. include:: /includes/changelogs/releases/7.0.14.rst

.. include:: /includes/changelogs/releases/7.0.12.rst

.. include:: /includes/changelogs/releases/7.0.11.rst

.. include:: /includes/changelogs/releases/7.0.9.rst

.. include:: /includes/changelogs/releases/7.0.8.rst

.. include:: /includes/changelogs/releases/7.0.7.rst

.. include:: /includes/changelogs/releases/7.0.6.rst

.. include:: /includes/changelogs/releases/7.0.5.rst

.. include:: /includes/changelogs/releases/7.0.4.rst

.. include:: /includes/changelogs/releases/7.0.3.rst

.. include:: /includes/changelogs/releases/7.0.2.rst

.. include:: /includes/changelogs/releases/7.0.1.rst

----------------------------------------

TITLE: Transforming Data for Time Series Migration in MongoDB
DESCRIPTION: Aggregation pipeline that transforms weather data by adding a metaData field and restructuring the document format for time series compatibility.

LANGUAGE: javascript
CODE:
db.weather_data.aggregate([
{
   $addFields: {
      metaData: {
         "st": "$st",
         "position": "$position",
         "elevation": "$elevation",
         "callLetters": "$callLetters",
         "qualityControlProcess": "$qualityControlProcess",
         "type": "$type"
      }
   },
}, {
   $project: {
      _id: 1,
      ts: 1,
      metaData: 1,
      dataSource: 1,
      airTemperature: 1,
      dewPoint: 1,
      pressure: 1,
      wind: 1,
      visibility: 1,
      skyCondition: 1,
      sections: 1,
      precipitationEstimatedObservation: 1
   }
}, {
   $out: "temporarytimeseries"
}
])

----------------------------------------

TITLE: Inserting Multiple Documents into MongoDB Collection using JavaScript
DESCRIPTION: This code uses the insertMany() method to insert an array of pizza documents into the 'pizzas' collection. Each document contains an _id, type, size, and price field. The method allows for efficient bulk insertion of multiple documents in a single operation.

LANGUAGE: javascript
CODE:
db.pizzas.insertMany( [
   { _id: 0, type: "pepperoni", size: "small", price: 4 },
   { _id: 1, type: "cheese", size: "medium", price: 7 },
   { _id: 2, type: "vegan", size: "large", price: 8 }
] )

----------------------------------------

TITLE: Executing updateMany with $addFields for Temperature Conversion in MongoDB
DESCRIPTION: This example demonstrates how to use updateMany with $addFields to add a new array field with converted temperature values.

LANGUAGE: javascript
CODE:
db.temperatures.updateMany( { },
  [
    { $addFields: { "tempsF": {
          $map: {
             input: "$tempsC",
             as: "celsius",
             in: { $add: [ { $multiply: ["$$celsius", 9/5 ] }, 32 ] }
          }
    } } }
  ]
)

----------------------------------------

TITLE: Monitoring Disk I/O with iostat on Linux
DESCRIPTION: Command to use iostat for monitoring disk I/O performance on Linux systems.

LANGUAGE: bash
CODE:
iostat -xmt 1

----------------------------------------

TITLE: Creating a Time Series Collection with TTL in MongoDB
DESCRIPTION: This example shows how to create a time series collection named 'weather24h' that automatically deletes documents after 24 hours (86400 seconds).

LANGUAGE: javascript
CODE:
db.createCollection(
   "weather24h",
   {
      timeseries: {
         timeField: "timestamp",
         metaField: "sensor",
         granularity: "hours"
      },
      expireAfterSeconds: 86400
   }
)

----------------------------------------

TITLE: Using MongoDB Aggregate Command
DESCRIPTION: The aggregate command performs aggregation tasks such as grouping using an aggregation pipeline. It is used for complex data analysis and transformation operations.

LANGUAGE: mongodb
CODE:
db.runCommand({
  aggregate: "collection",
  pipeline: [
    { $group: { _id: "$field", total: { $sum: "$value" } } }
  ],
  cursor: {}
})

----------------------------------------

TITLE: Using MongoDB Aggregate Command
DESCRIPTION: The aggregate command performs aggregation tasks such as grouping using an aggregation pipeline. It is used for complex data analysis and transformation operations.

LANGUAGE: mongodb
CODE:
db.runCommand({
  aggregate: "collection",
  pipeline: [
    { $group: { _id: "$field", total: { $sum: "$value" } } }
  ],
  cursor: {}
})

----------------------------------------

TITLE: Configuring MongoDB for TLS and X.509 Authentication (YAML)
DESCRIPTION: YAML configuration example for a MongoDB node using TLS and X.509 authentication. This includes settings for TLS mode, certificate files, and cluster authentication mode.

LANGUAGE: yaml
CODE:
net:
  tls:
    mode: requireTLS
    certificateKeyFile: /etc/ssl/mongodb.pem
    CAFile: /etc/ssl/caToValidateReceivedCertificates.pem
    clusterFile: "/etc/ssl/myReplMembershipCertificateKeyFile.pem"
security:
  clusterAuthMode: sendKeyFile
  keyFile: /my/securely/located/membershipkey
replication:
  replSetName: myReplicaSet
net:
  bindIp: localhost,mongodb0.example.net
  port: 27017
systemLog:
  destination: file
  path: "/var/log/mongodb/mongod.log"
  logAppend: true
storage:
  dbPath: "/var/lib/mongodb"
processManagement:
  fork: true

----------------------------------------

TITLE: Upserting Document with Dollar-Prefixed Fields
DESCRIPTION: Demonstrates an upsert operation that includes dollar-prefixed fields, which is allowed when creating new documents but may fail when updating existing ones.

LANGUAGE: javascript
CODE:
db.expenses.updateOne(
   { "date": "2021-07-07" },
   { $set: {
      "phone": 25.17,
      "$hotel": 320.10
   } },
   { upsert: true }
)

----------------------------------------

TITLE: Multi-Field Query Predicates in MongoDB
DESCRIPTION: Example of a query with multiple field predicates that cannot be fully supported by a single wildcard index. MongoDB can only use the wildcard index to support one of the query predicates.

LANGUAGE: javascript
CODE:
db.inventory.find(
   {
      "product_attributes.price": { $gt: 20 },
      "product_attributes.material": "silk",
      "product_attributes.size": "large"
   }
)

----------------------------------------

TITLE: Using $isoWeekYear in MongoDB Aggregation Pipeline
DESCRIPTION: This snippet demonstrates how to use the $isoWeekYear operator in a MongoDB aggregation pipeline. It projects a new field 'yearNumber' containing the ISO 8601 year number for each document's 'date' field.

LANGUAGE: javascript
CODE:
db.anniversaries.aggregate( [
  {
    $project: {
      yearNumber: { $isoWeekYear: "$date" }
    }
  }
] )

----------------------------------------

TITLE: Complete Patient Records Encryption Schema
DESCRIPTION: Full example of an encryption schema for a medical records application, showing encryption rules for multiple fields with different algorithms.

LANGUAGE: json
CODE:
{
  "bsonType": "object",
  "encryptMetadata": {
    "keyId": [
      UUID("EXAMPLE-UUID-VALUE")
    ]
  },
  "properties": {
    "ssn": {
      "encrypt": {
        "bsonType": "int",
        "algorithm": "AEAD_AES_256_CBC_HMAC_SHA_512_Deterministic"
      }
    },
    "bloodType": {
      "encrypt": {
        "bsonType": "string",
        "algorithm": "AEAD_AES_256_CBC_HMAC_SHA_512_Random"
      }
    },
    "medicalRecords": {
      "encrypt": {
        "bsonType": "array",
        "algorithm": "AEAD_AES_256_CBC_HMAC_SHA_512_Random"
      }
    },
    "insurance": {
      "bsonType": "object",
      "properties": {
        "policyNumber": {
          "encrypt": {
            "bsonType": "int",
            "algorithm": "AEAD_AES_256_CBC_HMAC_SHA_512_Deterministic"
          }
        }
      }
    }
  }
}

----------------------------------------

TITLE: Finding Parent and Sibling Nodes in MongoDB
DESCRIPTION: This query finds the parent node and siblings of a specific child node by searching for documents that contain the child in their children array.

LANGUAGE: javascript
CODE:
db.categories.find( { children: "MongoDB" } )

----------------------------------------

TITLE: Listing MongoDB Indexes with Specified Batch Size
DESCRIPTION: This example demonstrates how to list indexes for the 'contacts' collection while specifying a cursor batch size of 1. This allows for controlled retrieval of index information.

LANGUAGE: json
CODE:
db.runCommand ( 
   {
      listIndexes: "contacts", cursor: { batchSize: 1 }
   }
)

----------------------------------------

TITLE: Querying MongoDB Documents Matching JSON Schema
DESCRIPTION: Demonstrates how to find documents that match the defined JSON Schema using the find() and aggregate() methods.

LANGUAGE: javascript
CODE:
db.inventory.find(myschema)
db.inventory.aggregate( [ { $match: myschema } ] )

----------------------------------------

TITLE: Using db.collection.ensureIndex() in MongoDB (Deprecated)
DESCRIPTION: This method was used to create an index on a collection in MongoDB. It has been removed in MongoDB 5.0 and replaced by db.collection.createIndex(). The method took two parameters: keys for specifying the index fields, and options for additional index settings.

LANGUAGE: javascript
CODE:
db.collection.ensureIndex(keys, options)

----------------------------------------

TITLE: Creating Index in Python
DESCRIPTION: Creates a unique index on the keyAltNames field in the encryption.__keyVault collection using Python driver

LANGUAGE: python
CODE:
key_vault.create_index(
    "keyAltNames",
    unique=True,
    partialFilterExpression={"keyAltNames": {"$exists": True}}
)

----------------------------------------

TITLE: Searching for Exact String in MongoDB Text Index
DESCRIPTION: Demonstrates how to perform an exact string search using the $text operator with quoted search terms.

LANGUAGE: javascript
CODE:
db.stores.find( { $text: { $search: "\"coffee shop\"" } } )

----------------------------------------

TITLE: Basic $bottomN Syntax Example
DESCRIPTION: Shows the basic syntax structure for the $bottomN accumulator in MongoDB aggregation pipeline.

LANGUAGE: javascript
CODE:
{
   $bottomN:
      {
         n: <expression>,
         sortBy: { <field1>: <sort order>, <field2>: <sort order> ... },
         output: <expression>
      }
}

----------------------------------------

TITLE: Recording Azure Credentials for Java Authentication
DESCRIPTION: Instructions for recording and storing essential Azure credentials (tenant ID, client ID, and client secret) needed for MongoDB authentication. These credentials are required for constructing the kmsProviders object when the client is not running within an Azure Virtual Machine.

LANGUAGE: text
CODE:
Required credentials:
- tenant id
- client id
- client secret

----------------------------------------

TITLE: Inserting Sample Stock Price Data in MongoDB
DESCRIPTION: Demonstrates inserting sample data into a stock collection with time-series price data, including some missing values.

LANGUAGE: javascript
CODE:
db.stock.insertMany( [ 
   {
      time: ISODate("2021-03-08T09:00:00.000Z"),
      price: 500
   },
   {
      time: ISODate("2021-03-08T10:00:00.000Z"),
   },
   { 
      time: ISODate("2021-03-08T11:00:00.000Z"),
      price: 515
   },
   {
      time: ISODate("2021-03-08T12:00:00.000Z")
   },
   {
      time: ISODate("2021-03-08T13:00:00.000Z")
   },
   {
      time: ISODate("2021-03-08T14:00:00.000Z"),
      price: 485
   }
] )

----------------------------------------

TITLE: Querying Documents with Missing Shard Key Fields in MongoDB
DESCRIPTION: Example of how to query for documents that are missing shard key fields using the $exists operator in a sharded collection. The query uses $or to match documents missing either of the shard key fields x or y.

LANGUAGE: javascript
CODE:
db.shardedcollection.find( { $or: [ { x: { $exists: false } }, { y: { $exists: false } } ] } )

----------------------------------------

TITLE: Running MongoDB Hello Command using db.runCommand()
DESCRIPTION: This snippet shows how to use the db.runCommand() method in mongosh to execute the 'hello' command.

LANGUAGE: javascript
CODE:
db.runCommand( { hello: 1 } )

----------------------------------------

TITLE: Creating MongoDB Admin User
DESCRIPTION: This MongoDB shell command creates an administrator user with root privileges. It's executed on the primary node during the authentication transition.

LANGUAGE: shell
CODE:
use admin\ndb.createUser(\n  {\n    user: "<admin-username>",\n    pwd: "<admin-password>",\n    roles: [ { role: "root", db: "admin" } ]\n  }\n)

----------------------------------------

TITLE: Adding MongoDB Secondary by Copying Files
DESCRIPTION: Process for adding a secondary node to a MongoDB replica set by manually copying database files and restarting the mongod instance.

LANGUAGE: shell
CODE:
mongod --port 27018 --dbpath /data/db2 --replSet rs0

LANGUAGE: shell
CODE:
rs.add("mongodb1.example.net:27018")

----------------------------------------

TITLE: Creating Compound Hashed Index Example
DESCRIPTION: Example of creating a compound hashed index on multiple fields in a customers collection, followed by sharding the collection.

LANGUAGE: javascript
CODE:
db.customers.createIndex(
   {
      "name" : 1
      "address" : "hashed",
      "birthday" : -1
   }
)

LANGUAGE: javascript
CODE:
sh.shardCollection(
   "<database>.customers",
   {
      "name" : 1
      "address" : "hashed",
      "birthday" : -1
   }
)

----------------------------------------

TITLE: Retrieving Data Encryption Key Using getKeyByAltName() in MongoDB
DESCRIPTION: This example shows how to use the KeyVault.getKeyByAltName() method to retrieve a data encryption key with a specific alternate name in the context of client-side field level encryption.

LANGUAGE: javascript
CODE:
keyVault.getKeyByAltName("data-encryption-key")

----------------------------------------

TITLE: Dropping Single Index in MongoDB
DESCRIPTION: Demonstrates dropping a single index by name, using both the command syntax and the collection helper method.

LANGUAGE: javascript
CODE:
db.runCommand( { dropIndexes: "collection", index: "age_1" })

LANGUAGE: javascript
CODE:
db.collection.dropIndex("age_1");

----------------------------------------

TITLE: Defining an Arbitrary Split Point using middle Option
DESCRIPTION: Example of using the split command with the 'middle' option to define an arbitrary split point in the 'people' collection of the 'test' database.

LANGUAGE: javascript
CODE:
db.adminCommand( { split : "test.people", middle : { _id : 99 } } )

----------------------------------------

TITLE: Creating KMS Credentials Object
DESCRIPTION: Creates an object containing KMS provider credentials for AWS, Azure, GCP, or KMIP.

LANGUAGE: javascript
CODE:
const kmsProviderCredentials = {
  aws: {
    accessKeyId: "<Your AWS Access Key ID>",
    secretAccessKey: "<Your AWS Secret Access Key>"
  },
  // or
  azure: {
    tenantId: "<Your Azure Tenant ID>",
    clientId: "<Your Azure Client ID>",
    clientSecret: "<Your Azure Client Secret>"
  },
  // or
  gcp: {
    email: "<Your GCP Email>",
    privateKey: "<Your GCP Private Key>"
  },
  // or
  kmip: {
    endpoint: "<Your KMIP KMS Endpoint>"
  }
};

----------------------------------------

TITLE: Transitioning to Config Shard in MongoDB
DESCRIPTION: JavaScript command to transition a dedicated config server to a config shard in a MongoDB sharded cluster.

LANGUAGE: javascript
CODE:
db.adminCommand( {
   transitionFromDedicatedConfigServer: 1
} )

----------------------------------------

TITLE: Disabling Balancing for MongoDB Collection
DESCRIPTION: Example demonstrating how to disable the balancer for a specific collection.

LANGUAGE: javascript
CODE:
db.adminCommand( {
   configureCollectionBalancing: "test.students",
   enableBalancing: false
} )

----------------------------------------

TITLE: Creating Unique Index for Queryable Encryption in C#
DESCRIPTION: This C# code snippet demonstrates how to create a unique index on the keyAltNames field in the encryption.__keyVault namespace. It's a necessary step for implementing MongoDB Queryable Encryption in a C# application.

LANGUAGE: csharp
CODE:
var keyVaultClient = mongoClient.GetDatabase("encryption");
var keyVaultCollection = keyVaultClient.GetCollection<BsonDocument>("__keyVault");
var index = new CreateIndexModel<BsonDocument>(
    Builders<BsonDocument>.IndexKeys.Ascending("keyAltNames"),
    new CreateIndexOptions
    {
        Unique = true,
        PartialFilterExpression = Builders<BsonDocument>.Filter.Exists("keyAltNames")
    });
keyVaultCollection.Indexes.CreateOne(index);

----------------------------------------

TITLE: Executing shardConnPoolStats Command in MongoDB
DESCRIPTION: This snippet demonstrates how to execute the shardConnPoolStats command in MongoDB. The command returns information on pooled and cached connections in the sharded connection pool.

LANGUAGE: javascript
CODE:
{ shardConnPoolStats: 1 }

----------------------------------------

TITLE: Inserting Documents with MongoDB Shell
DESCRIPTION: MongoDB shell command to insert multiple documents, including one with a null value and another with a missing field.

LANGUAGE: javascript
CODE:
db.inventory.insertMany([
   { _id: 1, item: null },
   { _id: 2 }
])

----------------------------------------

TITLE: Loading Character Data in Python with PyMongo
DESCRIPTION: Demonstrates how to query and load a character document from MongoDB using PyMongo in Python.

LANGUAGE: python
CODE:
>>> character = db.characters.find_one({'_id': character_id})

----------------------------------------

TITLE: Connecting to Atlas Cluster Using AWS Environment Variables
DESCRIPTION: Shows how to connect to a MongoDB Atlas cluster using AWS IAM credentials set as environment variables. This example assumes the AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, and AWS_SESSION_TOKEN are set in the environment.

LANGUAGE: shell
CODE:
mongodb+srv://cluster0.example.com/test?authSource=$external&authMechanism=MONGODB-AWS

----------------------------------------

TITLE: Initializing Transaction Variables in MongoDB
DESCRIPTION: Sets up variables for account names, transfer amount, and database details needed for the transaction.

LANGUAGE: javascript
CODE:
var fromAccount = "Pat"
var toAccount = "Sasha"
var transferAmount = 1

var dbName = "accounts"
var collectionName = "balances"

----------------------------------------

TITLE: Exporting Windows Firewall Rules
DESCRIPTION: This command exports all Windows Firewall rules to a file for backup or transfer.

LANGUAGE: bat
CODE:
netsh advfirewall export "C:\temp\MongoDBfw.wfw"

----------------------------------------

TITLE: Filtering Posts for Visibility on Own Wall in Python
DESCRIPTION: Python function to determine if a post should be visible on a user's own wall based on social graph relationships.

LANGUAGE: python
CODE:
def visible_on_own_wall(user, post):
    '''if poster is followed by user, post is visible'''
    for circle, users in user['circles'].items():
        if post['by']['id'] in users: return True
    return False

----------------------------------------

TITLE: MongoDB Driver Documentation Structure in RST
DESCRIPTION: ReStructuredText markup defining a wayfinding structure for MongoDB driver documentation. Includes links to retrieval operation documentation for multiple programming language drivers.

LANGUAGE: restructuredtext
CODE:
.. wayfinding:: MongoDB with drivers
   
   .. wayfinding-description::

      .. include:: /includes/wayfinding-description.rst

   .. wayfinding-option:: https://www.mongodb.com/docs/drivers/java/sync/current/fundamentals/crud/read-operations/retrieve/
      :id: java-sync

   .. wayfinding-option:: https://www.mongodb.com/docs/languages/java/reactive-streams-driver/current/read/retrieve-data/
      :id: java-rs

   .. wayfinding-option:: https://www.mongodb.com/docs/drivers/csharp/current/fundamentals/crud/read-operations/retrieve/
      :id: csharp

   .. wayfinding-option:: https://mongoc.org/libmongoc/current/mongoc_collection_find_with_opts.html
      :id: c

   .. wayfinding-option:: https://www.mongodb.com/docs/languages/cpp/cpp-driver/upcoming/read/retrieve/
      :id: cpp

   .. wayfinding-option:: https://www.mongodb.com/docs/languages/python/pymongo-driver/current/read/retrieve/
      :id: pymongo

   .. wayfinding-option:: https://www.mongodb.com/docs/drivers/node/current/fundamentals/crud/read-operations/retrieve/
      :id: nodejs

   .. wayfinding-option:: https://www.mongodb.com/docs/drivers/go/current/fundamentals/crud/read-operations/retrieve/
      :id: go

   .. wayfinding-option:: https://www.mongodb.com/docs/php-library/current/reference/method/MongoDBCollection-find/
      :id: php

   .. wayfinding-option:: https://www.mongodb.com/docs/languages/scala/scala-driver/current/tutorials/read-ops/
      :id: scala
   
   .. wayfinding-option:: https://www.mongodb.com/docs/drivers/kotlin/coroutine/upcoming/fundamentals/crud/read-operations/retrieve/
      :id: kotlin-coroutine

   .. wayfinding-option:: https://www.mongodb.com/docs/languages/kotlin/kotlin-sync-driver/current/read/retrieve/
      :id: kotlin-sync

   .. wayfinding-option:: https://www.mongodb.com/docs/mongoid/current/reference/queries/
      :id: mongoid

   .. wayfinding-option:: https://www.mongodb.com/docs/drivers/rust/current/fundamentals/crud/read-operations/retrieve/
      :id: rust

----------------------------------------

TITLE: Checking MongoDB Replica Set Member Status
DESCRIPTION: Query the replica set status to monitor member state during restart process, particularly watching for SECONDARY state before proceeding with next node.

LANGUAGE: javascript
CODE:
rs.status().members

----------------------------------------

TITLE: Removing Unavailable Members from MongoDB Replica Set Configuration
DESCRIPTION: This code shows how to modify the replica set configuration by removing unavailable members. It assumes the configuration is stored in a 'cfg' variable.

LANGUAGE: javascript
CODE:
cfg.members = [cfg.members[0] , cfg.members[4] , cfg.members[7]]

----------------------------------------

TITLE: Disabling Streaming Replication in MongoDB
DESCRIPTION: Example of setting the oplogFetcherUsesExhaust parameter to disable streaming replication and use older replication behavior. This should only be done if there are resource constraints or to limit network bandwidth usage.

LANGUAGE: plaintext
CODE:
oplogFetcherUsesExhaust=false

----------------------------------------

TITLE: Query Analyzer Output for MongoDB Replica Set
DESCRIPTION: Shows the query analyzer output format when executed on a mongod instance that is part of a replica set. Contains detailed sampling metrics including read/write counts and bytes.

LANGUAGE: javascript
CODE:
{
   "desc" : "query analyzer",
   "ns" : "testDb.testColl",
   "collUuid" : UUID("ed9dfb1d-5b7c-4c6b-82e9-b0f537335795"),
   "samplesPerSecond" : 5,
   "startTime" : ISODate("2023-08-08T16:23:22.846Z"),
   "sampledReadsCount" : NumberLong(2),
   "sampledReadsBytes" : NumberLong(346),
   "sampledWritesCount" : NumberLong(3),
   "sampledWritesBytes" : NumberLong(904)
}

----------------------------------------

TITLE: MongoDB FindOne with Let Option
DESCRIPTION: Advanced example showing how to use the let option to define variables for use in the query.

LANGUAGE: javascript
CODE:
db.cakeFlavors.findOne(
   { $expr: { $eq: [ "$flavor", "$$targetFlavor" ] } },
   { _id: 0 },
   { let : { targetFlavor: "chocolate" }
} )

----------------------------------------

TITLE: Executing Find Command Using UUID in MongoDB
DESCRIPTION: This snippet demonstrates how to execute a find command on a collection using its UUID instead of its namespace. This operation requires both the useUUID and find privileges.

LANGUAGE: javascript
CODE:
db.runCommand({find: UUID("123e4567-e89b-12d3-a456-426655440000")})

----------------------------------------

TITLE: Using Logical Operators in MongoDB Queries
DESCRIPTION: Shows how to use the $and and $or operators to combine multiple conditions in MongoDB queries.

LANGUAGE: mongodb
CODE:
{ $and: [ { condition1 }, { condition2 }, ... ] }

LANGUAGE: mongodb
CODE:
{ $or: [ { condition1 }, { condition2 }, ... ] }

----------------------------------------

TITLE: Starting mongos with Command Line for MongoDB Sharded Cluster
DESCRIPTION: Bash command to start a mongos instance for a sharded cluster, specifying the config server replica set and network binding options.

LANGUAGE: bash
CODE:
mongos --configdb <configReplSetName>/cfg1.example.net:27019,cfg2.example.net:27019,cfg3.example.net:27019 --bind_ip localhost,<hostname(s)|ip address(es)>

----------------------------------------

TITLE: Enabling MongoDB Auditing with JSON File Output
DESCRIPTION: Command to start mongod with auditing enabled and output directed to a JSON file.

LANGUAGE: bash
CODE:
mongod --dbpath data/db --auditDestination file --auditFormat JSON --auditPath data/db/auditLog.json

----------------------------------------

TITLE: Querying MongoDB Documents Using Role-Based Access Control
DESCRIPTION: This aggregation pipeline uses $match with $setIntersection to filter documents based on user roles. It checks if there is any intersection between the document's allowedRoles array and the user's roles, returning only documents where the user has appropriate access rights.

LANGUAGE: javascript
CODE:
db.budget.aggregate( [ {
   $match: {
      $expr: {
         $not: {
            $eq: [ { $setIntersection: [ "$allowedRoles", "$$USER_ROLES.role" ] }, [] ]
         }
      }
   }
} ] )

----------------------------------------

TITLE: Transformed $queryStats Example
DESCRIPTION: Runs $queryStats with HMAC-SHA-256 data transformation to retrieve anonymized query statistics.

LANGUAGE: javascript
CODE:
db.getSiblingDB("admin").aggregate( [
   {
      $queryStats: {
         transformIdentifiers: {
            algorithm: "hmac-sha-256" ,
            hmacKey: BinData(8, "87c4082f169d3fef0eef34dc8e23458cbb457c3sf3n2")
         }
       }
    }
 ] )

----------------------------------------

TITLE: Downgrading MongoDB Feature Compatibility Version to 3.4
DESCRIPTION: Executes an admin command to downgrade the feature compatibility version to 3.4. This command is idempotent and writes to an internal system collection. If the command fails, it can be safely retried.

LANGUAGE: javascript
CODE:
db.adminCommand({setFeatureCompatibilityVersion: "3.4"})

----------------------------------------

TITLE: Non-Numeric Monetary Model Example
DESCRIPTION: Example of storing monetary values using both exact string representation and approximate double values for querying.

LANGUAGE: bash
CODE:
{
  price: { display: "9.99", approx: 9.9900000000000002, currency: "USD" },
  fee: { display: "0.25", approx: 0.2499999999999999, currency: "USD" }
}

----------------------------------------

TITLE: Re-enabling Chained Replication in MongoDB
DESCRIPTION: This code sequence re-enables chained replication by setting the chainingAllowed field to true and applying the new configuration.

LANGUAGE: javascript
CODE:
cfg = rs.config()
cfg.settings.chainingAllowed = true
rs.reconfig(cfg)

----------------------------------------

TITLE: Failed Privilege Revocation Example
DESCRIPTION: Demonstrates incorrect attempts to revoke privileges from a specific collection when the original privilege is database-wide.

LANGUAGE: javascript
CODE:
use products
db.revokePrivilegesFromRole(
   "accountRole",
   [
     {
       resource : {
          db : "products",
          collection : "gadgets"
       },
       actions : [
          "find",
          "update"
       ]
     }
   ]
)

db.revokePrivilegesFromRole(
   "accountRole",
   [
     {
       resource : {
          db : "products",
          collection : "gadgets"
       },
       actions : [
          "find"
       ]
     }
   ]
)

----------------------------------------

TITLE: Defining MongoDB Atlas Search Index Configuration in JavaScript
DESCRIPTION: This snippet demonstrates the structure of a MongoDB Atlas Search index configuration. It includes details such as index status, definition versions, mappings, and shard-specific information. The configuration shows a dynamic mapping with stored source fields and the status of both main and staged indexes across multiple shards.

LANGUAGE: javascript
CODE:
[
  {
    id: '6524096020da840844a4c4a7',
    name: 'default',
    status: 'BUILDING',
    queryable: true,
    latestDefinitionVersion: {
      version: 2,
      createdAt: ISODate("2023-10-09T14:51:57.355Z")
    },
    latestDefinition: {
      mappings: { dynamic: true },
      storedSource: { include: [ 'awards.text' ] }
    },
    statusDetail: [
      {
        hostname: 'atlas-n1cm1j-shard-00-02',
        status: 'BUILDING',
        queryable: true,
        mainIndex: {
          status: 'READY',
          queryable: true,
          definitionVersion: {
            version: 0,
            createdAt: ISODate("2023-10-09T14:08:32.000Z")
          },
          definition: { mappings: { dynamic: true, fields: {} } }
        },
        stagedIndex: {
          status: 'PENDING',
          queryable: false,
          definitionVersion: {
            version: 1,
            createdAt: ISODate("2023-10-09T14:51:29.000Z")
          },
          definition: {
            mappings: { dynamic: true, fields: {} },
            storedSource: true
          }
        }
      },
      {
        hostname: 'atlas-n1cm1j-shard-00-01',
        status: 'BUILDING',
        queryable: true,
        mainIndex: {
          status: 'READY',
          queryable: true,
          definitionVersion: {
            version: 0,
            createdAt: ISODate("2023-10-09T14:08:32.000Z")
          },
          definition: { mappings: { dynamic: true, fields: {} } }
        },
        stagedIndex: {
          status: 'PENDING',
          queryable: false,
          definitionVersion: {
            version: 1,
            createdAt: ISODate("2023-10-09T14:51:29.000Z")
          },
          definition: {
            mappings: { dynamic: true, fields: {} },
            storedSource: true
          }
        }
      },
      {
        hostname: 'atlas-n1cm1j-shard-00-00',
        status: 'BUILDING',
        queryable: true,
        mainIndex: {
          status: 'READY',
          queryable: true,
          definitionVersion: {
            version: 0,
            createdAt: ISODate("2023-10-09T14:08:32.000Z")
          },
          definition: { mappings: { dynamic: true, fields: {} } }
        }
      }
    ]
  }
]

----------------------------------------

TITLE: Checking and Setting vm.swappiness on Linux
DESCRIPTION: Commands to check and set the vm.swappiness kernel parameter on Linux systems.

LANGUAGE: bash
CODE:
cat /proc/sys/vm/swappiness

LANGUAGE: bash
CODE:
sudo sysctl -p

----------------------------------------

TITLE: Connecting to MongoDB Sharded Cluster
DESCRIPTION: Command for connecting to the mongos router using the MongoDB shell.

LANGUAGE: bash
CODE:
mongosh --host <hostname> --port <port>

----------------------------------------

TITLE: Disabling Balancer Operations
DESCRIPTION: Commands to stop the balancer and verify its state before upgrading.

LANGUAGE: javascript
CODE:
sh.stopBalancer()

LANGUAGE: javascript
CODE:
sh.getBalancerState()

----------------------------------------

TITLE: Starting MongoDB Node with SSL Allowance (Command-Line)
DESCRIPTION: Command-line options to start a MongoDB node allowing both SSL and non-SSL connections. Includes options for replica set, SSL mode, PEM key file, and CA file.

LANGUAGE: bash
CODE:
mongod --replSet <name> --sslMode allowSSL --sslPEMKeyFile <path to TLS/SSL Certificate and key PEM file> --sslCAFile <path to root CA PEM file> <additional options>

----------------------------------------

TITLE: Deleting Multiple Documents in MongoDB
DESCRIPTION: This snippet illustrates the syntax for deleting multiple documents from a MongoDB collection using the deleteMany() method. It shows how to specify the collection and the filter criteria for selecting documents to be deleted.

LANGUAGE: mongodb
CODE:
db.collection.deleteMany()

----------------------------------------

TITLE: MongoDB $trunc Basic Syntax
DESCRIPTION: Basic syntax definition for the $trunc operator showing the required number parameter and optional place parameter.

LANGUAGE: javascript
CODE:
{ $trunc : [ <number>, <place> ] }

----------------------------------------

TITLE: Flexible Document Deletion with db.collection.remove() in MongoDB
DESCRIPTION: Deletes a single document or all documents that match a specified filter. This method offers flexibility in deletion operations.

LANGUAGE: mongodb
CODE:
db.collection.remove()

----------------------------------------

TITLE: Dot Character Matching Including Newlines in MongoDB
DESCRIPTION: Demonstrates using the 's' option to allow the dot character to match newlines in MongoDB regex queries.

LANGUAGE: javascript
CODE:
db.products.find( { description: { $regex: /m.*line/, $options: 'si' } } )

----------------------------------------

TITLE: Executing revokePrivilegesFromRole Command in MongoDB
DESCRIPTION: This snippet demonstrates the basic syntax for the revokePrivilegesFromRole command. It specifies the role name, privileges to revoke, write concern, and an optional comment.

LANGUAGE: javascript
CODE:
db.runCommand(
   {
     revokePrivilegesFromRole: "<role>",
     privileges: [
       { resource: { <resource> }, actions: [ "<action>", ... ] },
       ...
     ],
     writeConcern: <write concern document>,
     comment: <any>
   }
)

----------------------------------------

TITLE: Inefficient Use of Indexes for Sorting in MongoDB
DESCRIPTION: These examples show cases where the index cannot be used efficiently for sorting because the query does not specify equality conditions on the preceding index fields.

LANGUAGE: javascript
CODE:
db.data.find( { a: { $gt: 2 } } ).sort( { c: 1 } )

LANGUAGE: javascript
CODE:
db.data.find( { c: 5 } ).sort( { c: 1 } )

----------------------------------------

TITLE: Modifying Index Build Commit Quorum in MongoDB
DESCRIPTION: Example showing how to modify the commit quorum for existing index builds from votingMembers to majority.

LANGUAGE: javascript
CODE:
db.getSiblingDB("examples").runCommand(
  {
    "setIndexCommitQuorum" : "invoices", 
    "indexNames" : ["invoices_1", "fullfillmentStatus_1"], 
    "commitQuorum" : "majority"
  }
)

----------------------------------------

TITLE: Error Handling with $match
DESCRIPTION: Demonstrates how to avoid errors by checking for field existence before using $replaceWith.

LANGUAGE: javascript
CODE:
db.collection.aggregate([
   { $match: { name : { $exists: true, $not: { $type: "array" }, $type: "object" } } },
   { $replaceWith: "$name" }
])

----------------------------------------

TITLE: Using $and in MongoDB Aggregation Pipeline
DESCRIPTION: Illustrates the use of $and operator in a MongoDB aggregation pipeline to check if the 'qty' field is between 100 and 250. The result is projected alongside the original fields.

LANGUAGE: javascript
CODE:
db.inventory.aggregate(
   [
     {
       $project:
          {
            item: 1,
            qty: 1,
            result: { $and: [ { $gt: [ "$qty", 100 ] }, { $lt: [ "$qty", 250 ] } ] }
          }
     }
   ]
)

----------------------------------------

TITLE: Iterating MongoDB Cursor with hasNext() in JavaScript
DESCRIPTION: This snippet demonstrates how to use the blocking hasNext() method to iterate over a watchCursor in MongoDB. It waits for the next event and breaks after processing the first change.

LANGUAGE: javascript
CODE:
while (!watchCursor.isClosed()) {
   if (watchCursor.hasNext()) {
     firstChange = watchCursor.next();
     break;
   }
}

----------------------------------------

TITLE: MongoDB Find with Collation Example
DESCRIPTION: Example showing find command with collation settings for language-specific string comparison.

LANGUAGE: javascript
CODE:
db.runCommand(
   {
     find: "myColl",
     filter: { category: "cafe", status: "a" },
     sort: { category: 1 },
     collation: { locale: "fr", strength: 1 }
   }
)

----------------------------------------

TITLE: Calculating StdDevPop in $project Stage
DESCRIPTION: Aggregation query that projects and calculates population standard deviation of nested score arrays.

LANGUAGE: javascript
CODE:
db.quizzes.aggregate( [
   { $project: { stdDev: { $stdDevPop: "$scores.score" } } }
] )

----------------------------------------

TITLE: Generating Data Encryption Key with GCP KMS in Go
DESCRIPTION: This snippet shows how to generate a Data Encryption Key (DEK) using GCP KMS in Go. It uses the previously defined KMS providers and data key options to create the DEK.

LANGUAGE: go
CODE:
dataKeyID, err := clientEncryption.CreateDataKey(context.TODO(), "gcp", dataKeyOpts)
if err != nil {
    log.Fatal(err)
}
base64DataKeyID := base64.StdEncoding.EncodeToString(dataKeyID.Data)
fmt.Printf("DataKeyId [base64]: %s\n", base64DataKeyID)

----------------------------------------

TITLE: Initiating Config Server Replica Set - MongoDB Shell
DESCRIPTION: JavaScript code for initiating the config server replica set with three members.

LANGUAGE: javascript
CODE:
rs.initiate( {
   _id: "configReplSet",
   configsvr: true,
   members: [
      { _id: 0, host: "mongodb7.example.net:27019" },
      { _id: 1, host: "mongodb8.example.net:27019" },
      { _id: 2, host: "mongodb9.example.net:27019" }
   ]
} )

----------------------------------------

TITLE: Configuring mongod with TLS/SSL using PEM key file
DESCRIPTION: Example configuration for a mongod instance using TLS/SSL with a PEM key file. This sets up required TLS encryption and specifies the certificate key file path.

LANGUAGE: yaml
CODE:
net:
   tls:
      mode: requireTLS
      certificateKeyFile: /etc/ssl/mongodb.pem
systemLog:
   destination: file
   path: "/var/log/mongodb/mongod.log"
   logAppend: true
storage:
   dbPath: "/var/lib/mongodb"
processManagement:
   fork: true
net:
   bindIp: localhost,mongodb0.example.net
   port: 27017

----------------------------------------

TITLE: Locking a MongoDB Sharded Cluster
DESCRIPTION: This code locks a MongoDB sharded cluster using the db.fsyncLock() method and verifies the lock status using an aggregation pipeline.

LANGUAGE: javascript
CODE:
db.getSiblingDB("admin").fsyncLock()

db.getSiblingDB("admin").aggregate( [
   {  $currentOp: { } },
   {  $facet: {
      "locked": [
         { $match: { $and: [
            { fsyncLock: { $exists: true } }
         ] } }],
       "unlocked": [
         { $match: { fsyncLock: { $exists: false } } }
       ]
   } },
   {  $project: {
      "fsyncLocked": { $gt: [ { $size: "$locked" }, 0 ] },
      "fsyncUnlocked": { $gt: [ { $size: "$unlocked" }, 0 ] }
   } }
 ] )

----------------------------------------

TITLE: Executing abortUnshardCollection Command in MongoDB
DESCRIPTION: Command to stop the unsharding process on a specific collection. This example stops the unsharding operation on the us_accounts collection in the sales database.

LANGUAGE: javascript
CODE:
db.adminCommand( {
   abortUnshardCollection: "sales.us_accounts",
} )

----------------------------------------

TITLE: Starting a MongoDB Session with Causal Consistency in JavaScript
DESCRIPTION: This snippet demonstrates how to explicitly set the causalConsistency option when starting a new MongoDB session using the startSession method.

LANGUAGE: javascript
CODE:
Session = db.getMongo().startSession( { causalConsistency: true } )

----------------------------------------

TITLE: Using $lt Operator in MongoDB Aggregation Pipeline
DESCRIPTION: Example showing how to use the $lt operator in a $project stage to compare inventory quantities against a threshold value of 250.

LANGUAGE: javascript
CODE:
db.inventory.aggregate(
   [
     {
       $project:
          {
            item: 1,
            qty: 1,
            qtyLt250: { $lt: [ "$qty", 250 ] },
            _id: 0
          }
     }
   ]
)

----------------------------------------

TITLE: Inserting Multiple Documents into MongoDB bios Collection
DESCRIPTION: This code snippet demonstrates how to use the db.collection.insertMany() method to insert multiple documents into the 'bios' collection in MongoDB. The documents contain biographical information about various computer scientists and their contributions to the field.

LANGUAGE: javascript
CODE:
db.bios.insertMany([
   {
       "_id" : 1,
       "name" : {
           "first" : "John",
           "last" : "Backus"
       },
       "birth" : ISODate("1924-12-03T05:00:00Z"),
       "death" : ISODate("2007-03-17T04:00:00Z"),
       "contribs" : [
           "Fortran",
           "ALGOL",
           "Backus-Naur Form",
           "FP"
       ],
       "awards" : [
           {
               "award" : "W.W. McDowell Award",
               "year" : 1967,
               "by" : "IEEE Computer Society"
           },
           {
               "award" : "National Medal of Science",
               "year" : 1975,
               "by" : "National Science Foundation"
           },
           {
               "award" : "Turing Award",
               "year" : 1977,
               "by" : "ACM"
           },
           {
               "award" : "Draper Prize",
               "year" : 1993,
               "by" : "National Academy of Engineering"
           }
       ]
   },
   {
       "_id" : ObjectId("51df07b094c6acd67e492f41"),
       "name" : {
           "first" : "John",
           "last" : "McCarthy"
       },
       "birth" : ISODate("1927-09-04T04:00:00Z"),
       "death" : ISODate("2011-12-24T05:00:00Z"),
       "contribs" : [
           "Lisp",
           "Artificial Intelligence",
           "ALGOL"
       ],
       "awards" : [
           {
               "award" : "Turing Award",
               "year" : 1971,
               "by" : "ACM"
           },
           {
               "award" : "Kyoto Prize",
               "year" : 1988,
               "by" : "Inamori Foundation"
           },
           {
               "award" : "National Medal of Science",
               "year" : 1990,
               "by" : "National Science Foundation"
           }
       ]
   },
   {
       "_id" : 3,
       "name" : {
           "first" : "Grace",
           "last" : "Hopper"
       },
       "title" : "Rear Admiral",
       "birth" : ISODate("1906-12-09T05:00:00Z"),
       "death" : ISODate("1992-01-01T05:00:00Z"),
       "contribs" : [
           "UNIVAC",
           "compiler",
           "FLOW-MATIC",
           "COBOL"
       ],
       "awards" : [
           {
               "award" : "Computer Sciences Man of the Year",
               "year" : 1969,
               "by" : "Data Processing Management Association"
           },
           {
               "award" : "Distinguished Fellow",
               "year" : 1973,
               "by" : " British Computer Society"
           },
           {
               "award" : "W. W. McDowell Award",
               "year" : 1976,
               "by" : "IEEE Computer Society"
           },
           {
               "award" : "National Medal of Technology",
               "year" : 1991,
               "by" : "United States"
           }
       ]
   },
   {
       "_id" : 4,
       "name" : {
           "first" : "Kristen",
           "last" : "Nygaard"
       },
       "birth" : ISODate("1926-08-27T04:00:00Z"),
       "death" : ISODate("2002-08-10T04:00:00Z"),
       "contribs" : [
           "OOP",
           "Simula"
       ],
       "awards" : [
           {
               "award" : "Rosing Prize",
               "year" : 1999,
               "by" : "Norwegian Data Association"
           },
           {
               "award" : "Turing Award",
               "year" : 2001,
               "by" : "ACM"
           },
           {
               "award" : "IEEE John von Neumann Medal",
               "year" : 2001,
               "by" : "IEEE"
           }
       ]
   },
   {
       "_id" : 5,
       "name" : {
           "first" : "Ole-Johan",
           "last" : "Dahl"
       },
       "birth" : ISODate("1931-10-12T04:00:00Z"),
       "death" : ISODate("2002-06-29T04:00:00Z"),
       "contribs" : [
           "OOP",
           "Simula"
       ],
       "awards" : [
           {
               "award" : "Rosing Prize",
               "year" : 1999,
               "by" : "Norwegian Data Association"
           },
           {
               "award" : "Turing Award",
               "year" : 2001,
               "by" : "ACM"
           },
           {
               "award" : "IEEE John von Neumann Medal",
               "year" : 2001,
               "by" : "IEEE"
           }
       ]
   },
   {
       "_id" : 6,
       "name" : {
           "first" : "Guido",
           "last" : "van Rossum"
       },
       "birth" : ISODate("1956-01-31T05:00:00Z"),
       "contribs" : [
           "Python"
       ],
       "awards" : [
           {
               "award" : "Award for the Advancement of Free Software",
               "year" : 2001,
               "by" : "Free Software Foundation"
           },
           {
               "award" : "NLUUG Award",
               "year" : 2003,
               "by" : "NLUUG"
           }
       ]
   },
   {
       "_id" : ObjectId("51e062189c6ae665454e301d"),
       "name" : {
           "first" : "Dennis",
           "last" : "Ritchie"
       },
       "birth" : ISODate("1941-09-09T04:00:00Z"),
       "death" : ISODate("2011-10-12T04:00:00Z"),
       "contribs" : [
           "UNIX",
           "C"
       ],
       "awards" : [
           {
               "award" : "Turing Award",
               "year" : 1983,
               "by" : "ACM"
           },
           {
               "award" : "National Medal of Technology",
               "year" : 1998,
               "by" : "United States"
           },
           {
               "award" : "Japan Prize",
               "year" : 2011,
               "by" : "The Japan Prize Foundation"
           }
       ]
   },
   {
       "_id" : 8,
       "name" : {
           "first" : "Yukihiro",
           "aka" : "Matz",
           "last" : "Matsumoto"
       },
       "birth" : ISODate("1965-04-14T04:00:00Z"),
       "contribs" : [
           "Ruby"
       ],
       "awards" : [
           {
               "award" : "Award for the Advancement of Free Software",
               "year" : "2011",
               "by" : "Free Software Foundation"
           }
       ]
   },
   {
       "_id" : 9,
       "name" : {
           "first" : "James",
           "last" : "Gosling"
       },
       "birth" : ISODate("1955-05-19T04:00:00Z"),
       "contribs" : [
           "Java"
       ],
       "awards" : [
           {
               "award" : "The Economist Innovation Award",
               "year" : 2002,
               "by" : "The Economist"
           },
           {
               "award" : "Officer of the Order of Canada",
               "year" : 2007,
               "by" : "Canada"
           }
       ]
   },
   {
       "_id" : 10,
       "name" : {
           "first" : "Martin",
           "last" : "Odersky"
       },
       "contribs" : [
           "Scala"
       ]
   }

] )

----------------------------------------

TITLE: Inserting Sample Data into MongoDB Collection
DESCRIPTION: This snippet demonstrates how to insert multiple documents into a 'pizzaOrders' collection using the insertMany() method. The documents contain various fields related to pizza orders, including type, size, price, quantity, and order date.

LANGUAGE: javascript
CODE:
db.pizzaOrders.insertMany( [
   { _id: 0, type: "pepperoni", size: "small", price: 19,
     totalNumber: 10, orderDate: ISODate( "2023-03-13T08:14:30Z" ) },
   { _id: 1, type: "pepperoni", size: "medium", price: 20,
     totalNumber: 20, orderDate: ISODate( "2023-03-13T09:13:24Z" ) },
   { _id: 2, type: "pepperoni", size: "large", price: 21,
     totalNumber: 30, orderDate: ISODate( "2023-03-17T09:22:12Z" ) },
   { _id: 3, type: "cheese", size: "small", price: 12,
     totalNumber: 15, orderDate: ISODate( "2023-03-13T11:21:39.736Z" ) }
] )

----------------------------------------

TITLE: MongoDB Replica Set Configuration
DESCRIPTION: YAML configuration for restoring a node back to replica set mode with original settings.

LANGUAGE: yaml
CODE:
net:
   bindIp: localhost,<hostname(s)|ip address(es)>
   port: 27017
replication:
   replSetName: myRepl

----------------------------------------

TITLE: Updated Certificate Configuration
DESCRIPTION: Configuration showing the new certificate paths while maintaining the extension value and override

LANGUAGE: yaml
CODE:
net:
  tls:
    mode:               requireTLS
    certificateKeyFile: /etc/mycerts/mongodb-server2.pem
    CAFile:             /etc/mycerts/ca.pem
    clusterFile:        /etc/mycerts/mongodb-cluster2.pem
    clusterCAFile:      /etc/mycerts/ca.pem
    clusterAuthX509:
       extensionValue:  mongodb://example.mongodb.net
security:
  clusterAuthMode: x509
setParameter:
   tlsClusterAuthX509Override: { attributes: O=MongoDB, OU=MongoDB Server }

----------------------------------------

TITLE: Creating MongoDB Keyfile for Replica Set Authentication
DESCRIPTION: This command generates a keyfile for MongoDB replica set authentication. It creates a file named 'keyfile' with secure permissions, containing a randomly generated key.

LANGUAGE: shell
CODE:
openssl rand -base64 756 > <path-to-keyfile>\nchmod 400 <path-to-keyfile>

----------------------------------------

TITLE: Configuring AWS KMS Providers in Node.js
DESCRIPTION: This code sets up the KMS providers for AWS in a Node.js application. It includes the AWS access key ID and secret access key for authentication with AWS KMS.

LANGUAGE: javascript
CODE:
const kmsProviders = {
  aws: {
    accessKeyId: '<Your AWS Access Key ID>',
    secretAccessKey: '<Your AWS Secret Access Key>'
  }
};

----------------------------------------

TITLE: Querying Gas Stations Intersecting with a LineString in MongoDB
DESCRIPTION: This snippet shows a $geoIntersects query that finds gas stations intersecting with a specified LineString. The LineString represents a route, and the query returns documents for gas stations along that route.

LANGUAGE: javascript
CODE:
db.gasStations.find( {
   loc: {
      $geoIntersects: {
         $geometry: {
            type: "LineString",
            coordinates: [
               [ -105.82, 33.87 ],
               [ -106.01, 34.09 ],
               [ -106.31, 35.65 ],
               [ -107.39, 35.98 ]
            ]
          }
      }
   }
} )

----------------------------------------

TITLE: Querying with Projection in Java Synchronous Driver
DESCRIPTION: This snippet shows how to use projection in a MongoDB query using the Java synchronous driver. It uses the Projections class to create projection documents and chain the projection method to the find method.

LANGUAGE: java
CODE:
collection.find(eq("status", "A"))
        .projection(fields(excludeId(), exclude("status", "instock")))
        .forEach(doc -> System.out.println(doc.toJson()));

----------------------------------------

TITLE: Viewing MongoDB Replica Set Configuration
DESCRIPTION: This snippet shows an example of a MongoDB replica set configuration document. It includes the replica set ID, version, and an array of member nodes with their respective IDs and hostnames.

LANGUAGE: javascript
CODE:
{
    "_id" : "rs",
    "version" : 7,
    "members" : [
        {
            "_id" : 0,
            "host" : "mongod_A.example.net:27017"
        },
        {
            "_id" : 1,
            "host" : "mongod_B.example.net:27017"
        },
        {
            "_id" : 2,
            "host" : "mongod_C.example.net:27017"
        }
    ]
}

----------------------------------------

TITLE: Setting Feature Compatibility Version in MongoDB
DESCRIPTION: This code snippet shows how to set or update the featureCompatibilityVersion in MongoDB using the db.adminCommand() method. It's an important step in preparing for the upgrade process.

LANGUAGE: javascript
CODE:
db.adminCommand( { setFeatureCompatibilityVersion: "4.4" } )

----------------------------------------

TITLE: Configuring Named GCP KMS Provider for MongoDB Encryption in C#
DESCRIPTION: This snippet shows how to set up a named GCP KMS provider for MongoDB Client-Side Field Level Encryption in C#. It demonstrates creating a dictionary with the provider details.

LANGUAGE: csharp
CODE:
var kmsProviders = new Dictionary<string, IReadOnlyDictionary<string, object>>
{
    {
        "my_gcp_provider", new Dictionary<string, object>
        {
            { "projectId", "my-project" },
            { "location", "global" },
            { "keyRing", "my-key-ring" },
            { "keyName", "my-key-name" }
        }
    }
};

----------------------------------------

TITLE: Stepping Down Primary in MongoDB Replica Set (JavaScript)
DESCRIPTION: Steps down the primary node in a replica set to allow for failover before migrating the primary. This is done using the rs.stepDown() method.

LANGUAGE: javascript
CODE:
rs.stepDown()

----------------------------------------

TITLE: Explain Count Query Example
DESCRIPTION: Example of using explain() with count() to analyze query execution plan.

LANGUAGE: javascript
CODE:
db.products.explain().count( { quantity: { $gt: 50 } } )

----------------------------------------

TITLE: Clear Specific Query Plans
DESCRIPTION: Removes cached query plans for a specific plan cache query shape from the collection's plan cache.

LANGUAGE: javascript
CODE:
db.collection.getPlanCache().clearPlansByQuery()

----------------------------------------

TITLE: Creating MongoDB Configuration File
DESCRIPTION: Bash commands to create and set permissions for MongoDB configuration file.

LANGUAGE: bash
CODE:
sudo touch /path/to/mongod.conf
sudo chown mongodb:mongodb /path/to/mongodb/mongod.conf
sudo chmod 644 /path/to/mongodb/mongod.conf

----------------------------------------

TITLE: Querying MongoDB with Invalid BSONRegExp Option
DESCRIPTION: This example shows an attempt to query for BSONRegExp objects with the bsonRegExp option set to false, which results in an error due to invalid regular expression syntax.

LANGUAGE: javascript
CODE:
db.testbson.find( {}, {}, { bsonRegExp: false })

----------------------------------------

TITLE: Result Document After Degrees to Radians Conversion
DESCRIPTION: Shows the resulting document after applying the $degreesToRadians operator, including both original degree values and new radian values.

LANGUAGE: bash
CODE:
{
  "_id" : ObjectId("5c50aec71c75c59232b3ede4"),
  "angle_a" : NumberDecimal("53.13010235415597870314438744090660"),
  "angle_b" : NumberDecimal("36.86989764584402129685561255909341"),
  "angle_c" : NumberDecimal("90"),
  "angle_a_rad" : NumberDecimal("0.9272952180016122324285124629224290"),
  "angle_b_rad" : NumberDecimal("0.6435011087932843868028092287173227"),
  "angle_c_rad" : NumberDecimal("1.570796326794896619231321691639752")
}

----------------------------------------

TITLE: Example getDefaultRWConcern Command Output
DESCRIPTION: Shows the expected output format when retrieving default read and write concern settings, including timestamps and sources.

LANGUAGE: javascript
CODE:
{
  "defaultWriteConcern" : {
    "w" : "majority"
  },
  "defaultReadConcern" : {
    "level" : "majority"
  },
  "defaultWriteConcernSource" : "global",
  "defaultReadConcernSource" : "global",
  "updateOpTime" : Timestamp(1586290895, 1),
  "updateWallClockTime" : ISODate("2020-04-07T20:21:41.849Z"),
  "localUpdateWallClockTime" : ISODate("2020-04-07T20:21:41.862Z"),
  "ok" : 1,
  "$clusterTime" : { ... }
  "operationTime" : Timestamp(1586290925, 1)
}

----------------------------------------

TITLE: Setting Missing Shard Key Field to Null in MongoDB
DESCRIPTION: This snippet demonstrates how to use db.collection.updateOne() to set a missing shard key field to null in a MongoDB sharded collection. The example uses a 'sales' collection sharded on the 'location' field.

LANGUAGE: javascript
CODE:
db.sales.updateOne(
  { _id: 12345, location: null },
  { $set: { location: null } }
)

----------------------------------------

TITLE: Creating Data Encryption Keys
DESCRIPTION: Establishes connection to MongoDB and creates data encryption keys in the key vault namespace using the configured Azure KMS settings. Requires appropriate permissions on the encryption.__keyVault namespace.



----------------------------------------

TITLE: Aggregation Pipeline Alternative Implementation
DESCRIPTION: Implements the same functionality using MongoDB's aggregation pipeline with $group and $merge stages.

LANGUAGE: javascript
CODE:
db.usersessions.aggregate([
   { $group: { _id: "$userid", total_time: { $sum: "$length" }, count: { $sum: 1 }, avg_time: { $avg: "$length" } } },
   { $project: { value: { total_time: "$total_time", count: "$count", avg_time: "$avg_time" } } },
   { $merge: { 
      into: "session_stats_agg", 
      whenMatched: [ { $set: { 
         "value.total_time": { $add: [ "$value.total_time", "$$new.value.total_time" ] },
         "value.count": { $add: [ "$value.count", "$$new.value.count" ] },
         "value.avg": { $divide: [ { $add: [ "$value.total_time", "$$new.value.total_time" ] },  { $add: [ "$value.count", "$$new.value.count" ] } ] }
      } } ],
      whenNotMatched: "insert" 
   }}
])

----------------------------------------

TITLE: Explain Help Command
DESCRIPTION: Command to display the list of operations supported by explain().

LANGUAGE: javascript
CODE:
db.collection.explain().help()

----------------------------------------

TITLE: ReStructuredText Document Structure for MongoDB Installation Guide
DESCRIPTION: ReStructuredText markup defining the document structure, metadata, and variable substitutions for MongoDB Enterprise installation documentation on SUSE.

LANGUAGE: rst
CODE:
.. _install-mdb-enterprise-suse-tgz:  

.. meta::
   :keywords: on-prem

=====================================================
Install MongoDB Enterprise on SUSE using .tgz Tarball
=====================================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: twocols

.. |arrow| unicode:: U+27A4
.. |edition| replace:: Enterprise
.. |package-name| replace:: ``{+package-name-enterprise+}``
.. |distro-name| replace:: SUSE
.. |package-manager| replace:: ``zypper``
.. |executable-name| replace:: ``mongod``
.. |mdb-download-link| replace:: `MongoDB Download Center <https://www.mongodb.com/try/download/enterprise?tck=docs_server>`__

----------------------------------------

TITLE: Creating 2dsphere Index with Custom Version in MongoDB
DESCRIPTION: Template for creating a 2dsphere index with a specific version using the 2dsphereIndexVersion option. This allows overriding the default version for the index.

LANGUAGE: javascript
CODE:
db.<collection>.createIndex( 
   { <field>: "2dsphere" }, 
   { "2dsphereIndexVersion": <version> } 
)

----------------------------------------

TITLE: Creating MongoClient Instance for Queryable Encryption in Java
DESCRIPTION: This snippet shows how to create a MongoClient instance in Java for use with queryable encryption. It configures the client with the necessary settings for encryption.

LANGUAGE: java
CODE:
MongoClientSettings clientSettings = MongoClientSettings.builder()
    .applyConnectionString(new ConnectionString("<Your MongoDB URI>"))
    .autoEncryptionSettings(AutoEncryptionSettings.builder()
        .keyVaultNamespace("encryption.__keyVault")
        .kmsProviders(kmsProviders)
        .build())
    .build();

MongoClient mongoClient = MongoClients.create(clientSettings);

----------------------------------------

TITLE: Sample Output for Balanced Collection
DESCRIPTION: Example of the output returned by sh.balancerCollectionStatus() when the chunks in the collection do not need to be moved. The 'balancerCompliant' field indicates the balance status.

LANGUAGE: javascript
CODE:
{
   "balancerCompliant" : true,
   "ok" : 1,
   "operationTime" : Timestamp(1583193238, 1),
   "$clusterTime" : {
      "clusterTime" : Timestamp(1583193238, 1),
      "signature" : {
         "hash" : BinData(0,"AAAAAAAAAAAAAAAAAAAAAAAAAAA="),
         "keyId" : NumberLong(0)
      }
   }
}

----------------------------------------

TITLE: Configuring Linux Prelink for FIPS Compatibility
DESCRIPTION: Command to configure the Linux prelink process to not prelink libcrypto, ensuring OpenSSL FIPS mode can pass the startup signature check.

LANGUAGE: bash
CODE:
sudo bash -c "echo '-b /usr/lib64/libcrypto.so.*' >>/etc/prelink.conf.d/openssl-prelink.conf"

----------------------------------------

TITLE: Configuring GCP KMS Provider for MongoDB Encryption in Python
DESCRIPTION: This code configures the GCP KMS provider for MongoDB Client-Side Field Level Encryption in Python. It includes the GCP project ID and the path to the service account key file.

LANGUAGE: python
CODE:
kms_providers = {
    "gcp": {
        "email": "my-email@my-project.iam.gserviceaccount.com",
        "privateKey": "-----BEGIN PRIVATE KEY-----\n<your GCP service account private key>\n-----END PRIVATE KEY-----\n",
    }
}

----------------------------------------

TITLE: Performing updateOne Operation with $set in MongoDB
DESCRIPTION: This example demonstrates how to use updateOne with a $set stage to add a field and update the modified date.

LANGUAGE: javascript
CODE:
db.students.updateOne( { _id: 3 }, [ { $set: { "test3": 98, modified: "$$NOW"} } ] )

----------------------------------------

TITLE: Opening a Change Stream Cursor in MongoDB
DESCRIPTION: This code snippet demonstrates how to open a change stream cursor on the 'data.sensors' collection and iterate through the change events.

LANGUAGE: javascript
CODE:
watchCursor = db.getSiblingDB("data").sensors.watch()

while (!watchCursor.isClosed()) {
  let next = watchCursor.tryNext()
  while (next !== null) {
    printjson(next);
    next = watchCursor.tryNext()
  }
}

----------------------------------------

TITLE: Encrypting Fields and Inserting Document in MongoDB (Java)
DESCRIPTION: This Java code snippet demonstrates how to manually encrypt fields in a MongoDB document using specified encryption algorithms and insert the encrypted document into the database.

LANGUAGE: java
CODE:
// Code snippet not provided in the input text

----------------------------------------

TITLE: Removing Secondary from Replica Set in MongoDB
DESCRIPTION: Use the rs.remove() method in mongosh to remove a secondary from the replica set. This is performed while connected to the current primary.

LANGUAGE: javascript
CODE:
rs.remove("<hostname><:port>")

----------------------------------------

TITLE: MongoDB Accumulators Directory Structure in RST
DESCRIPTION: RST-formatted table of contents listing all available MongoDB accumulator operators including statistical, array, and object manipulation operators.

LANGUAGE: rst
CODE:
.. toctree::
   :hidden:

   $accumulator </reference/operator/aggregation/accumulator>
   $addToSet </reference/operator/aggregation/addToSet>
   $avg </reference/operator/aggregation/avg>
   $bottom </reference/operator/aggregation/bottom>
   $bottomN </reference/operator/aggregation/bottomN>
   $count </reference/operator/aggregation/count-accumulator>
   $first </reference/operator/aggregation/first>
   $firstN </reference/operator/aggregation/firstN>
   $last </reference/operator/aggregation/last>
   $lastN </reference/operator/aggregation/lastN>
   $max </reference/operator/aggregation/max>
   $maxN </reference/operator/aggregation/maxN>
   $median </reference/operator/aggregation/median>
   $mergeObjects </reference/operator/aggregation/mergeObjects>
   $min </reference/operator/aggregation/min>
   $minN </reference/operator/aggregation/minN>
   $percentile </reference/operator/aggregation/percentile>
   $push </reference/operator/aggregation/push>
   $stdDevPop </reference/operator/aggregation/stdDevPop>
   $stdDevSamp </reference/operator/aggregation/stdDevSamp>
   $sum </reference/operator/aggregation/sum>
   $top </reference/operator/aggregation/top>
   $topN </reference/operator/aggregation/topN>

----------------------------------------

TITLE: Multi-Byte Character Aggregation Pipeline
DESCRIPTION: Aggregation pipeline that creates three-character menu codes from food names using $substrCP.

LANGUAGE: javascript
CODE:
db.food.aggregate(
  [
    {
      $project: {
          "name": 1,
          "menuCode": { $substrCP: [ "$name", 0, 3 ] }
      }
    }
  ]
)

----------------------------------------

TITLE: Using $count in MongoDB $group Stage
DESCRIPTION: This example uses the $count accumulator in the $group stage to count the number of documents in the cakeSales collection for each state.

LANGUAGE: javascript
CODE:
db.cakeSales.aggregate( [
   {
      $group: {
         _id: "$state",
         countNumberOfDocumentsForState: {
            $count: {}
         }
      }
   }
] )

----------------------------------------

TITLE: Inserting Sample Documents in MongoDB Collection
DESCRIPTION: Creates a collection named 'places' with sample documents containing café variations to demonstrate collation effects.

LANGUAGE: javascript
CODE:
db.places.insertMany([
   { _id: 1, category: "café" },
   { _id: 2, category: "cafe" },
   { _id: 3, category: "cafE" }
])

----------------------------------------

TITLE: Basic createRole Command Syntax in MongoDB
DESCRIPTION: Demonstrates the basic syntax structure for the createRole command, showing how to specify role name, privileges, roles, authentication restrictions, and write concern.

LANGUAGE: javascript
CODE:
db.adminCommand(
   {
     createRole: "<new role>",
     privileges: [
       { resource: { <resource> }, actions: [ "<action>", ... ] },
       ...
     ],
     roles: [
       { role: "<role>", db: "<database>" } | "<role>",
       ...
     ],
     authenticationRestrictions: [
       {
         clientSource: ["<IP>" | "<CIDR range>", ...],
         serverAddress: ["<IP>" | "<CIDR range>", ...]
       },
       ...
     ],
     writeConcern: <write concern document>,
     comment: <any>
   }
)

----------------------------------------

TITLE: Merging Chunks in MongoDB Sharded Cluster
DESCRIPTION: This command merges contiguous chunks on the same shard. It takes the namespace of the sharded collection and the bounds of the chunks to be merged as parameters.

LANGUAGE: javascript
CODE:
db.adminCommand( {
   mergeChunks: "test.members",
   bounds: [ { "username" : "user69816" },
             { "username" : "user96401" } ]
} )

----------------------------------------

TITLE: Retrieving All Parameter Values in MongoDB
DESCRIPTION: This example shows how to retrieve all available parameter values using the getParameter command with the '*' wildcard in MongoDB.

LANGUAGE: javascript
CODE:
db.adminCommand( { getParameter : '*' } )

----------------------------------------

TITLE: Query Arrays using $elemMatch in MongoDB Shell
DESCRIPTION: Queries the inventory collection to find documents where the dim_cm array contains at least one element that matches both conditions: greater than 22 and less than 30.

LANGUAGE: javascript
CODE:
db.inventory.find( { dim_cm: { $elemMatch: { $gt: 22, $lt: 30 } } } )

----------------------------------------

TITLE: Sorting MongoDB Query Results Using Multikey Index
DESCRIPTION: This query shows how to use the multikey index to sort the results based on the 'stock.quantity' field in descending order.

LANGUAGE: javascript
CODE:
db.inventory.find().sort( { "stock.quantity": -1 } )

----------------------------------------

TITLE: Rotating KMIP Master Key for MongoDB Secondary
DESCRIPTION: Bash command to restart a MongoDB secondary with the KMIP master key rotation option. It includes encryption and KMIP server configuration options.

LANGUAGE: bash
CODE:
mongod --enableEncryption --kmipRotateMasterKey \
  --kmipServerName <KMIP Server HostName> \
  --kmipServerCAFile ca.pem --kmipClientCertificateFile client.pem

----------------------------------------

TITLE: MongoDB BSON Date Range
DESCRIPTION: Example showing the safe year range for MongoDB date operations

LANGUAGE: plaintext
CODE:
0 through 9999

----------------------------------------

TITLE: Configuring AWS KMS Providers in C#
DESCRIPTION: This code demonstrates the setup of KMS providers for AWS in a C# application. It creates a dictionary with the AWS access key ID and secret access key required for AWS KMS authentication.

LANGUAGE: csharp
CODE:
var kmsProviders = new Dictionary<string, IReadOnlyDictionary<string, object>>
{
    {
        "aws", new Dictionary<string, object>
        {
            { "accessKeyId", "<Your AWS Access Key ID>" },
            { "secretAccessKey", "<Your AWS Secret Access Key>" }
        }
    }
};

----------------------------------------

TITLE: Generating Data Encryption Key with GCP KMS in Node.js
DESCRIPTION: This snippet shows how to generate a Data Encryption Key (DEK) using GCP KMS in Node.js. It uses the previously defined KMS providers and data key options to create the DEK.

LANGUAGE: javascript
CODE:
const dataKeyId = await clientEncryption.createDataKey("gcp", dataKeyOptions);
const base64DataKeyId = dataKeyId.toString("base64");
console.log("DataKeyId [base64]: ", base64DataKeyId);

----------------------------------------

TITLE: MongoDB Insert Change Event Example
DESCRIPTION: Example of a change event document generated when a document is inserted into a collection. Shows the structure including resume token, operation type, timestamps, namespace details, document key, and the full inserted document. The example demonstrates a sharded collection scenario where the shard key includes both userName and _id fields.

LANGUAGE: json
CODE:
{
      "_id": { <Resume Token> },
      "operationType": "insert",
      "clusterTime": <Timestamp>,
      "wallTime": <ISODate>,
      "ns": {
         "db": "engineering",
         "coll": "users"
      },
      "documentKey": {
         "userName": "alice123",
         "_id": ObjectId("599af247bb69cd89961c986d")
      },
      "fullDocument": {
         "_id": ObjectId("599af247bb69cd89961c986d"),
         "userName": "alice123",
         "name": "Alice"
      }
   }

----------------------------------------

TITLE: MongoDB Insert Method Syntax
DESCRIPTION: Basic syntax for the db.collection.insert() method showing the document parameter and options structure.

LANGUAGE: none
CODE:
db.collection.insert(
   <document or array of documents>,
   {
      writeConcern: <document>,
      ordered: <boolean>
   }
)

----------------------------------------

TITLE: Creating ClientEncryption in Go
DESCRIPTION: Example showing how to instantiate a ClientEncryption object using the Go MongoDB driver

LANGUAGE: go
CODE:
// Code reference: /includes/queryable-encryption/fundamentals/manual-encryption/manual-enc.go

----------------------------------------

TITLE: Forcing Index Use with hint() in MongoDB Queries
DESCRIPTION: This example shows how to force MongoDB to use a specific index for a find operation using the hint() method. It also demonstrates how to view execution statistics for the query.

LANGUAGE: javascript
CODE:
db.people.find(
   { name: "John Doe", zipcode: { $gt: "63000" } }
).hint( { zipcode: 1 } )

LANGUAGE: javascript
CODE:
db.people.find(
   { name: "John Doe", zipcode: { $gt: "63000" } }
).hint( { zipcode: 1 } ).explain("executionStats")

LANGUAGE: javascript
CODE:
db.people.explain("executionStats").find(
   { name: "John Doe", zipcode: { $gt: "63000" } }
).hint( { zipcode: 1 } )

----------------------------------------

TITLE: Filtering Log Messages by Date Range
DESCRIPTION: A jq command to filter MongoDB log messages within a specific date range.

LANGUAGE: bash
CODE:
jq 'select(.t["$date"] >= "2020-04-15T00:00:00.000" and .t["$date"] <= "2020-04-15T23:59:59.999")' /var/log/mongodb/mongod.log

----------------------------------------

TITLE: Querying MongoDB with Projection in Node.js
DESCRIPTION: This snippet demonstrates how to query MongoDB with projection using the Node.js driver.

LANGUAGE: javascript
CODE:
// Start Example 45
// End Example 45

----------------------------------------

TITLE: Retrieving Encrypted Documents in Python with CSFLE
DESCRIPTION: Python code example for querying encrypted documents using MongoDB's Client-Side Field Level Encryption. Demonstrates the differences between CSFLE-enabled and standard client queries.

LANGUAGE: python
CODE:
## Placeholder for Python code - actual implementation details not shown in source ##

----------------------------------------

TITLE: Unsharding a Collection in MongoDB
DESCRIPTION: This example shows how to unshard the 'sales.eu_accounts' collection using the unshardCollection command.

LANGUAGE: javascript
CODE:
db.adminCommand( {
    unshardCollection: "sales.eu_accounts"
} )

----------------------------------------

TITLE: Checking MongoDB Replica Set Status
DESCRIPTION: Uses the rs.status() method to check the configuration and status of the replica set.

LANGUAGE: javascript
CODE:
rs.status()

----------------------------------------

TITLE: Installing Giza and Building MongoDB Documentation with Python
DESCRIPTION: This snippet demonstrates how to install the Giza documentation build system, clone the MongoDB docs repository, and build the HTML documentation locally. It requires Python 2 and pip to be installed.

LANGUAGE: bash
CODE:
python2 -m pip install giza
git clone https://github.com/mongodb/docs.git
cd docs/
make html

----------------------------------------

TITLE: Specifying KMS Provider Configuration
DESCRIPTION: Configures the Key Management System (KMS) provider settings and Customer Master Key (CMK) details for encryption.

LANGUAGE: javascript
CODE:
const kmsProviders = {
  "local": {
    "key": localMasterKey
  }
};

LANGUAGE: python
CODE:
kms_providers = {
    "local": {
        "key": local_master_key
    }
}

LANGUAGE: java
CODE:
Map<String, Map<String, Object>> kmsProviders = new HashMap<String, Map<String, Object>>() {{
    put("local", new HashMap<String, Object>() {{
        put("key", localMasterKey);
    }});
}};

----------------------------------------

TITLE: Creating Encryption Client
DESCRIPTION: Creates a MongoDB client with automatic encryption options using the KMS and CMK credentials.

LANGUAGE: javascript
CODE:
const autoEncryptionOpts = {
  keyVaultNamespace,
  kmsProviders: kmsProviderCredentials,
  // Additional options like schemaMap may be included here
};

const encryptedClient = new MongoClient(uri, {
  autoEncryption: autoEncryptionOpts
});

----------------------------------------

TITLE: Configuring MongoDB Enterprise YUM Repository
DESCRIPTION: Configuration settings for the MongoDB Enterprise YUM repository on RHEL 9 systems. Defines the repository name, base URL, GPG key verification settings, and repository state.

LANGUAGE: cfg
CODE:
[mongodb-enterprise-{+version+}]
name=MongoDB Enterprise Repository
baseurl=https://repo.mongodb.com/yum/redhat/9/mongodb-enterprise/{+version+}/$basearch/
gpgcheck=1
enabled=1
gpgkey=https://pgp.mongodb.com/server-{+pgp-version+}.asc

----------------------------------------

TITLE: Setting defaultMaxTimeMS to 5000 Milliseconds in MongoDB
DESCRIPTION: This example demonstrates setting the defaultMaxTimeMS parameter to 5000 milliseconds (5 seconds) for read operations in MongoDB using the setClusterParameter command.

LANGUAGE: javascript
CODE:
db.runCommand( {
   setClusterParameter: {
      defaultMaxTimeMS: { readOperations: 5000 }
   }
} )

----------------------------------------

TITLE: Expected THP Configuration Output
DESCRIPTION: Expected output values after successfully configuring THP settings.

LANGUAGE: bash
CODE:
always 
defer+madvise
0
1

----------------------------------------

TITLE: Creating Unique Index for Queryable Encryption in Node.js
DESCRIPTION: This snippet demonstrates how to create a unique index on the 'keyAltNames' field in the 'encryption.__keyVault' namespace using the MongoDB Node.js driver. It uses the createIndex method with options to set the index as unique and apply a partial filter expression.

LANGUAGE: javascript
CODE:
await keyVaultClient
  .db("__keyVault")
  .collection("__keyVault")
  .createIndex({ keyAltNames: 1 }, {
    unique: true,
    partialFilterExpression: { keyAltNames: { $exists: true } }
  });

----------------------------------------

TITLE: Creating Unique Index for MongoDB Queryable Encryption in Go
DESCRIPTION: This snippet demonstrates how to create a unique index on the 'keyAltNames' field in the 'encryption.__keyVault' namespace using Go. It connects to the key vault collection and creates the index using the CreateOne method.

LANGUAGE: go
CODE:
keyVaultClient := getKeyVaultClient()
keyVaultDatabase := keyVaultClient.Database("encryption")
keyVaultCollection := keyVaultDatabase.Collection("__keyVault")
_, err := keyVaultCollection.Indexes().CreateOne(
    context.TODO(),
    mongo.IndexModel{
        Keys: bson.D{{"keyAltNames", 1}},
        Options: options.Index().
            SetUnique(true).
            SetPartialFilterExpression(bson.D{{"keyAltNames", bson.D{{"$exists", true}}}}),
    },
)

----------------------------------------

TITLE: Defining inherited role document structure in MongoDB
DESCRIPTION: This snippet illustrates the structure of a role document within the roles array, specifying a role from which the current role inherits privileges.

LANGUAGE: javascript
CODE:
{ role: "<role name>", db: "<database>" }

----------------------------------------

TITLE: Executing geoSearch Command in MongoDB
DESCRIPTION: This snippet demonstrates how to use the geoSearch command to query for restaurants within a specified distance from given coordinates. It includes parameters for the collection name, near coordinates, maximum distance, search criteria, and result limit.

LANGUAGE: javascript
CODE:
db.runCommand({
   geoSearch : "places", 
   near: [ -73.9667, 40.78 ],
   maxDistance : 6,
   search : { type : "restaurant" },
   limit : 30
})

----------------------------------------

TITLE: Creating MongoClient Instance for Queryable Encryption in Python
DESCRIPTION: This code snippet illustrates the creation of a MongoClient instance in Python for queryable encryption. It configures the client with the necessary auto-encryption settings.

LANGUAGE: python
CODE:
client = MongoClient(
    "<Your MongoDB URI>",
    auto_encryption_opts=AutoEncryptionOpts(
        "encryption.__keyVault",
        kms_providers,
    ),
)

----------------------------------------

TITLE: Returning Array Elements from End with Skip and Limit
DESCRIPTION: Example query showing how to skip to the last element and return up to three elements from the comments array.

LANGUAGE: javascript
CODE:
db.posts.find( {}, { comments: { $slice: [ -1, 3 ] } } )

----------------------------------------

TITLE: RST Documentation Structure for MongoDB SUSE Installation
DESCRIPTION: ReStructuredText documentation template defining the structure and variables for MongoDB Enterprise installation instructions on SUSE Linux. Includes meta information, page title, content organization, and variable definitions.

LANGUAGE: rst
CODE:
.. _install-mdb-enterprise-suse:

.. meta::
   :keywords: on-prem
              
==========================================
Install MongoDB Enterprise Edition on SUSE
==========================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: twocols

.. |arrow| unicode:: U+27A4
.. |edition| replace:: Enterprise
.. |package-name| replace:: ``{+package-name-enterprise+}``
.. |distro-name| replace:: SUSE
.. |package-manager| replace:: ``zypper``
.. |executable-name| replace:: ``mongod``

----------------------------------------

TITLE: MongoDB $trunc to Whole Integer
DESCRIPTION: Aggregation example showing how to truncate values to whole integers using place value of 0.

LANGUAGE: javascript
CODE:
db.samples.aggregate([
   { $project: { truncatedValue: { $trunc: [ "$value", 0 ] } } }
])

----------------------------------------

TITLE: Configure Profiling Sample Rate
DESCRIPTION: Sets profiling level 1 with a 42% sample rate for slow operations using db.setProfilingLevel()

LANGUAGE: javascript
CODE:
db.setProfilingLevel( 1, { sampleRate: 0.42 } )

----------------------------------------

TITLE: Defining Table of Contents in reStructuredText for MongoDB Manual
DESCRIPTION: This snippet defines the table of contents for the MongoDB manual using reStructuredText directives. It includes hidden toctree entries for various sections of the documentation.

LANGUAGE: restructuredtext
CODE:
.. toctree::
   :maxdepth: 1
   :hidden:

   Introduction </introduction>
   CRUD Operations</crud>
   Aggregation Operations </aggregation>
   Indexes </indexes>
   Atlas Search <https://www.mongodb.com/docs/atlas/atlas-search/?tck=docs_server_toc>
   Atlas Vector Search <https://www.mongodb.com/docs/atlas/atlas-vector-search/vector-search-overview/?tck=docs_server_toc>
   Time Series </core/timeseries-collections>
   Change Streams </changeStreams>
   Transactions </core/transactions>
   Data Modeling </data-modeling>
   Replication </replication>
   Sharding </sharding>
   Storage </storage>
   Administration </administration>
   Security </security>
   Self-Managed Deployments </self-managed-deployments>
   FAQ </faq>
   Reference </reference>
   Release Notes </release-notes>
   Technical Support </support>

----------------------------------------

TITLE: Inserting Document with Nested Objects in MongoDB
DESCRIPTION: Example showing document insertion with nested objects that will be indexed by a wildcard index. The wildcard index will traverse and index all nested fields.

LANGUAGE: javascript
CODE:
db.users.insertOne( {
   account: {
      username: "SuperAdmin01",
      contact: {
         phone: "123-456-7890",
         email: "xyz@example.com"
      },
      access: {
         group: "admin"
      }
   }
} )

----------------------------------------

TITLE: Defining Replica Set Member Tags in MongoDB
DESCRIPTION: Example of the tag structure for replica set members. Tags are key-value pairs that can be used to customize read preferences and write concerns.

LANGUAGE: javascript
CODE:
{ "<tag1>": "<string1>", "<tag2>": "<string2>",...  }

----------------------------------------

TITLE: MongoDB Find with Read Concern Example
DESCRIPTION: Example demonstrating find command with a majority read concern level specification.

LANGUAGE: javascript
CODE:
db.runCommand(
   {
     find: "restaurants",
     filter: { rating: { $lt: 5 } },
     readConcern: { level: "majority" }
   }
)

----------------------------------------

TITLE: Retrieving Current Change Stream Options in MongoDB
DESCRIPTION: This snippet shows how to retrieve the current changeStreamOptions settings, including the expireAfterSeconds value, using the getClusterParameter command in MongoDB.

LANGUAGE: javascript
CODE:
db.adminCommand( { getClusterParameter: "changeStreamOptions" } )

----------------------------------------

TITLE: Unsupported Query Expression Example
DESCRIPTION: Demonstrates an unsupported query expression comparing two encrypted fields, which will fail.

LANGUAGE: json
CODE:
{$expr: {$eq: ["$encrypted1", "$encrypted2"]}}

----------------------------------------

TITLE: Using db.collection.mapReduce() in MongoDB Shell
DESCRIPTION: This snippet demonstrates the use of the db.collection.mapReduce() method in the MongoDB shell (mongosh). It's a wrapper around the mapReduce command, used for performing map-reduce operations on MongoDB collections.

LANGUAGE: javascript
CODE:
db.collection.mapReduce()

----------------------------------------

TITLE: Listing MongoDB Shard Names
DESCRIPTION: Command to retrieve a list of all shard names in a MongoDB cluster using the listShards command.

LANGUAGE: javascript
CODE:
db.adminCommand( { listShards: 1 } )

----------------------------------------

TITLE: Searching for Stop Word in Text Index with Custom Language
DESCRIPTION: This query searches for the term 'hay' in the text index. It demonstrates how stop words are handled based on the language specified in the 'idioma' field (Spanish in this case).

LANGUAGE: javascript
CODE:
db.quotes.find(
   {
      $text: { $search: "hay" }
   }
)

----------------------------------------

TITLE: MongoDB Connection String for Various Drivers
DESCRIPTION: This snippet shows the MongoDB connection string format used by various programming language drivers. It includes authentication, multiple mongos instances, and specifies the auth source.

LANGUAGE: bash
CODE:
mongodb://myDatabaseUser:D1fficultP%40ssw0rd@mongos0.example.com:27017,mongos1.example.com:27017,mongos2.example.com:27017/?authSource=admin

----------------------------------------

TITLE: Defining $nor Operator Syntax in MongoDB
DESCRIPTION: Demonstrates the basic syntax for using the $nor operator in a MongoDB query. The $nor operator takes an array of one or more query predicates and selects documents that fail all the predicates.

LANGUAGE: javascript
CODE:
{ $nor: [ { <expression1> }, { <expression2> }, ...  { <expressionN> } ] }

----------------------------------------

TITLE: Creating MongoClient Instance for Queryable Encryption in C#
DESCRIPTION: This snippet shows how to create a MongoClient instance in C# for use with queryable encryption. It sets up the client with the required auto-encryption settings.

LANGUAGE: csharp
CODE:
var clientSettings = MongoClientSettings.FromConnectionString("<Your MongoDB URI>");
clientSettings.AutoEncryptionOptions = new AutoEncryptionOptions(
    keyVaultNamespace: "encryption.__keyVault",
    kmsProviders: kmsProviders
);
var mongoClient = new MongoClient(clientSettings);

----------------------------------------

TITLE: Filtered Stream Processors List Example
DESCRIPTION: Shows how to filter stream processors by state, returning only processors that match the specified criteria.

LANGUAGE: sh
CODE:
sp.listStreamProcessors({"state": "running"})

LANGUAGE: json
CODE:
{
	id: '0135',
	name: "proc01",
	last_modified: ISODate("2023-03-20T20:15:54.601Z"),
	state: "RUNNING",
	error_msg: '',
	pipeline: [
	  {
	    $source: {
	      connectionName: "myKafka", 
	      topic: "stuff"
	    }
	  },
	  {
	    $match: { 
	      temperature: 46 
	    }
	  },
	  {
	    $emit: {
	      connectionName: "mySink",
	      topic: "output",
	    }  
	  }
	],
	lastStateChange: ISODate("2023-03-20T20:15:59.442Z")
}

----------------------------------------

TITLE: ReStructuredText Document Setup
DESCRIPTION: Document structure setup using ReStructuredText directives for MongoDB installation documentation. Defines metadata, variables, and document organization.

LANGUAGE: restructuredtext
CODE:
.. _install-mdb-community-ubuntu:

===========================================
Install MongoDB Community Edition on Ubuntu
===========================================

.. default-domain:: mongodb

.. meta::
   :keywords: on-prem

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: twocols

.. |arrow| unicode:: U+27A4
.. |edition| replace:: Community
.. |package-name| replace:: ``{+package-name-org+}``
.. |distro-name| replace:: Ubuntu
.. |package-manager| replace:: ``apt``
.. |executable-name| replace:: ``mongod``

.. toctree::
   :hidden:
   :titlesonly:

   Install using .tgz Tarball </tutorial/install-mongodb-on-ubuntu-tarball>
   Troubleshoot Ubuntu Installation </reference/installation-ubuntu-community-troubleshooting>

----------------------------------------

TITLE: Using $setEquals in MongoDB Aggregation Pipeline
DESCRIPTION: Demonstrates an aggregation pipeline that uses $setEquals to compare 'cakes' and 'cupcakes' arrays in each document. It projects the result into a new field 'sameFlavors'.

LANGUAGE: javascript
CODE:
db.bakeryOrders.aggregate(
   [
      { 
         $project: { 
            _id: 0, 
            cakes: 1, 
            cupcakes: 1, 
            sameFlavors: { $setEquals: [ "$cakes", "$cupcakes" ] } 
         } 
      }
   ] )

----------------------------------------

TITLE: Inserting Sample Data
DESCRIPTION: Creating a collection named 'samples' with test documents containing decimal values.

LANGUAGE: javascript
CODE:
db.samples.insertMany(
   [
      { _id: 1, value: 9.25 },
      { _id: 2, value: 8.73 },
      { _id: 3, value: 4.32 },
      { _id: 4, value: -5.34 }
   ]
)

----------------------------------------

TITLE: Querying Descendants by Ancestor in MongoDB
DESCRIPTION: This query finds all descendants of a given node by searching for documents where the specified node is in the ancestors array. It demonstrates how to efficiently retrieve subtrees.

LANGUAGE: javascript
CODE:
db.categories.find( { ancestors: "Programming" } )

----------------------------------------

TITLE: Restarting the Balancer in MongoDB Sharded Cluster
DESCRIPTION: This JavaScript code demonstrates how to restart the balancer in a MongoDB sharded cluster using the sh.startBalancer() method after completing the rolling index build process.

LANGUAGE: javascript
CODE:
sh.startBalancer()

----------------------------------------

TITLE: Fill Missing Values with Constant Example
DESCRIPTION: Example showing how to fill missing shoe sales data with a constant value of 0.

LANGUAGE: javascript
CODE:
db.dailySales.aggregate( [
   {
      $fill:
         {
            output:
               {
                  "bootsSold": { value: 0 },
                  "sandalsSold": { value: 0 },
                  "sneakersSold": { value: 0 }
               }
         }
   }
] )

----------------------------------------

TITLE: Configuring MongoDB Queryable Encryption Variables - Python
DESCRIPTION: Declares required variables for MongoDB queryable encryption including KMS provider name, database URIs, and collection names for storing encryption keys and encrypted data in Python.

LANGUAGE: python
CODE:
kms_provider_name = "aws"  # or "azure", "gcp", or "kmip"
uri = os.environ.get("MONGODB_URI", "<your MongoDB URI>")
key_vault_database_name = "encryption"
key_vault_collection_name = "__keyVault"
key_vault_namespace = f"{key_vault_database_name}.{key_vault_collection_name}"
encrypted_database_name = "medicalRecords"
encrypted_collection_name = "patients"

----------------------------------------

TITLE: Inserting a Valid Document After Schema Validation Update
DESCRIPTION: This snippet demonstrates inserting a document that complies with the updated schema validation rules. The password is 14 characters long, which satisfies the new minimum length requirement.

LANGUAGE: javascript
CODE:
db.users.insertOne(
   {
      "username": "salesAdmin01",
      "password": "8p&SQd7T90$KKx"
   }
)

----------------------------------------

TITLE: Generating Data Encryption Keys for MongoDB Queryable Encryption
DESCRIPTION: This snippet shows how to create a MongoDB client, access the key vault collection, and generate a new data encryption key using the specified KMS provider and key options.

LANGUAGE: javascript
CODE:
const uri = "<Your MongoDB URI>";
const keyVaultDatabase = "encryption";
const keyVaultCollection = "__keyVault";
const keyVaultNamespace = `${keyVaultDatabase}.${keyVaultCollection}`;

const client = new MongoClient(uri);
await client.connect();
const keyVault = client.db(keyVaultDatabase).collection(keyVaultCollection);

const clientEncryption = new ClientEncryption(client, {
  keyVaultNamespace,
  kmsProviders
});

const dataKeyId = await clientEncryption.createDataKey("gcp", dataKeyOptions);
console.log('DataKeyId [GCP]: ', dataKeyId.toString('hex'));

----------------------------------------

TITLE: Creating Index on Embedded Field in MongoDB
DESCRIPTION: This example demonstrates how to create an index on an embedded field 'user.login' in the 'userdata' collection. It uses dot notation to specify the path to the embedded field.

LANGUAGE: javascript
CODE:
db.userdata.createIndex(
   { "user.login": 1 }
)

----------------------------------------

TITLE: Searching for Valid Term in Text Index with Custom Language
DESCRIPTION: This query searches for the term 'audazes' in the text index. It demonstrates how the index uses the language specified in the 'idioma' field (Portuguese in this case) to perform the search.

LANGUAGE: javascript
CODE:
db.quotes.find(
   {
      $text: { $search: "audazes" }
   }
)

----------------------------------------

TITLE: Resizing Oplog in MongoDB
DESCRIPTION: This example shows how to use the replSetResizeOplog command to change the oplog size to 16384 megabytes in MongoDB.

LANGUAGE: javascript
CODE:
db.adminCommand({ "replSetResizeOplog": 1, size: Double(16384)})

----------------------------------------

TITLE: Query Operations on Specific Database
DESCRIPTION: Example showing how to find active operations on a specific database running longer than 3 seconds.

LANGUAGE: javascript
CODE:
db.currentOp(
   {
     "active" : true,
     "secs_running" : { "$gt" : 3 },
     "ns" : /^db1\./
   }
)

----------------------------------------

TITLE: Basic $isoDayOfWeek Syntax Example
DESCRIPTION: Shows the basic syntax for using the $isoDayOfWeek operator in MongoDB aggregation pipeline.

LANGUAGE: javascript
CODE:
{ $isoDayOfWeek: <dateExpression> }

----------------------------------------

TITLE: Configuring Key Vault Namespace
DESCRIPTION: Specifies the encryption.__keyVault namespace as the key vault collection for storing encryption keys.

LANGUAGE: javascript
CODE:
const keyVaultCollection = "encryption.__keyVault";

LANGUAGE: python
CODE:
key_vault_namespace = "encryption.__keyVault"

LANGUAGE: java
CODE:
String keyVaultNamespace = "encryption.__keyVault";

LANGUAGE: go
CODE:
keyVaultNamespace := "encryption.__keyVault"

LANGUAGE: csharp
CODE:
var keyVaultNamespace = "encryption.__keyVault";

----------------------------------------

TITLE: Basic User Information Retrieval Example
DESCRIPTION: Example showing how to retrieve information for an 'appClient' user from the 'accounts' database.

LANGUAGE: javascript
CODE:
use accounts
db.getUser("appClient")

LANGUAGE: javascript
CODE:
{
   _id: 'accounts.appClient',
   userId: UUID("1c2fc1bf-c4dc-4a22-8b04-3971349ce0dc"),
   user: 'appClient',
   db: 'accounts',
   roles: [],
   mechanisms: [ 'SCRAM-SHA-1', 'SCRAM-SHA-256' ]
}

----------------------------------------

TITLE: Sample MongoDB Configuration for LDAP Authentication and Authorization
DESCRIPTION: Provides a YAML configuration file snippet for MongoDB, enabling LDAP authentication and authorization with Active Directory. Includes settings for LDAP servers, bind credentials, user mapping, and authorization query template.

LANGUAGE: yaml
CODE:
security:
   authorization: "enabled"
   ldap:
      servers: "activedirectory.example.net"
      bind:
         queryUser: "mongodbadmin@dba.example.com"
         queryPassword: "secret123"
      userToDNMapping:
         '[
            {
               match: "(.+)",
               ldapQuery: "DC=example,DC=com??sub?(userPrincipalName={0})"
            }
         ]'
      authz:
         queryTemplate: "DC=example,DC=com??sub?(&(objectClass=group)(member:1.2.840.113556.1.4.1941:={USER}))"
setParameter:
   authenticationMechanisms: "PLAIN"

----------------------------------------

TITLE: Example Documents in MongoDB Config Shards Collection
DESCRIPTION: Sample document structures from the config.shards collection, which stores information about each shard in the cluster. This example shows documents for standalone, replica set, and zoned shards.

LANGUAGE: javascript
CODE:
{ "_id" : "shard0000", "host" : "localhost:30000", "state" : 1 }
{ "_id" : "shard0001", "host" : "shard0001/localhost:27018,localhost:27019,localhost:27020", "state" : 1 }
{ "_id" : "shard0002", "host" : "localhost:30002", "state" : 1, "tags": [ "NYC" ] }

----------------------------------------

TITLE: MongoDB $near Query Example
DESCRIPTION: Practical example of a $near query that finds documents within 50 meters of the specified coordinates (-73.92, 40.78).

LANGUAGE: javascript
CODE:
db.contacts.find( {
   address: {
      $near: [ -73.92, 40.78 ],
      $maxDistance : 50
   }
} )

----------------------------------------

TITLE: MongoDB 5.0 Default Write Concern Change
DESCRIPTION: Demonstration of the new implicit default write concern in MongoDB 5.0, which uses w: 'majority' by default for stronger durability guarantees.

LANGUAGE: mongodb
CODE:
db.collection.insertOne(
  { item: "example" }
  // No explicit write concern, defaults to { w: "majority" }
)

----------------------------------------

TITLE: Checking Replica Set Status in MongoDB
DESCRIPTION: This command retrieves the status of a MongoDB replica set. It's used to ensure no members are in ROLLBACK or RECOVERING state before upgrading.

LANGUAGE: javascript
CODE:
db.adminCommand( { replSetGetStatus: 1 } )

----------------------------------------

TITLE: Field Filtering Example
DESCRIPTION: Example showing how to exclude specific nested fields from output

LANGUAGE: javascript
CODE:
db.runCommand( { serverStatus: 1, metrics: { query: { multiPlanner: { histograms: false } } } } )

----------------------------------------

TITLE: Configuring Mongos with Kerberos and Sharding
DESCRIPTION: Example command showing how to start a mongos instance with Kerberos authentication, sharding configuration, and keyfile authentication.

LANGUAGE: bash
CODE:
mongos.exe --setParameter authenticationMechanisms=GSSAPI --configdb shard0.example.net, shard1.example.net,shard2.example.net --keyFile C:\<path>\mongos.keyfile --bind_ip localhost,<hostname(s)|ip address(es)>

----------------------------------------

TITLE: Querying MongoDB for Locations within a Polygon using $geoWithin
DESCRIPTION: This snippet demonstrates the general structure of a MongoDB query using the $geoWithin operator to find locations within a specified polygon. It uses GeoJSON format for the polygon coordinates.

LANGUAGE: javascript
CODE:
db.<collection>.find( {
   <location field> : {
      $geoWithin : {
         $geometry : {
            type : "Polygon",
            coordinates : [ <coordinates> ]
         }
       }
    }
 } )

----------------------------------------

TITLE: Specifying GCP KMS Credentials for MongoDB Queryable Encryption
DESCRIPTION: This snippet demonstrates how to set up the KMS provider configuration for GCP. It requires the GCP project ID, location, key ring, key name, and the path to the GCP credentials file.

LANGUAGE: javascript
CODE:
const kmsProviders = {
  gcp: {
    email: "<Your GCP email>",
    privateKey: "<Your GCP private key>",
    projectId: "<Your GCP project ID>",
    location: "<Your GCP location>",
    keyRing: "<Your GCP key ring>",
    keyName: "<Your GCP key name>"
  }
};

----------------------------------------

TITLE: Creating Multikey Index on Array Field
DESCRIPTION: Creating an ascending index on the test_scores array field, which MongoDB automatically stores as a multikey index.

LANGUAGE: javascript
CODE:
db.students.createIndex( { test_scores: 1 } )

----------------------------------------

TITLE: Distinct Query with Filter
DESCRIPTION: Example showing how to get distinct values with a query filter condition.

LANGUAGE: javascript
CODE:
db.inventory.distinct( "item.sku", { dept: "A" } )

----------------------------------------

TITLE: Query Sharded Data Distribution for Specific Namespace in MongoDB
DESCRIPTION: Returns sharded data distribution metrics filtered for a specific database and collection namespace.

LANGUAGE: javascript
CODE:
db.aggregate([ 
   { $shardedDataDistribution: { } }, 
   { $match: {  "ns": "<database>.<collection>" } }
])

----------------------------------------

TITLE: Initializing MongoDB Client with Encryption Settings
DESCRIPTION: Creates a MongoDB client instance with automatic encryption settings using the previously configured key vault, KMS providers, and encryption schema.

LANGUAGE: java
CODE:
MongoClientSettings clientSettings = MongoClientSettings.builder()
    .autoEncryptionSettings(AutoEncryptionSettings.builder()
        .keyVaultNamespace(keyVaultNamespace)
        .kmsProviders(kmsProviders)
        .build())
    .build();
MongoClient mongoClient = MongoClients.create(clientSettings);

----------------------------------------

TITLE: Authentication Event Example
DESCRIPTION: Example of an OCSF audit message for an authentication action showing user details, endpoints, and authentication protocol.

LANGUAGE: javascript
CODE:
{
      "activity_id" : 1,
      "category_uid" : 3,
      "class_uid" : 3002,
      "time" : 1710715316123,
      "severity_id" : 1,
      "type_uid" : 300201,
      "metadata" : {
         "correlation_uid" : "20ec4769-984d-445c-aea7-da0429da9122",
         "product" : "MongoDB Server",
         "version" : "1.0.0"
      },
      "actor" : {
         "user" : {
            "type_id" : 1,
            "name" : "admin.admin",
            "groups" : [ { "name" : "admin.root" } ]
         }
      },
      "src_endpoint" : { "ip" : "127.0.0.1", "port" : 56692 },
      "dst_endpoint" : { "ip" : "127.0.0.1", "port" : 20040 },
      "user" : { "type_id" : 1, "name" : "admin.admin" },
      "auth_protocol" : "SCRAM-SHA-256",
      "unmapped" : { "atype" : "authenticate" }
   }

----------------------------------------

TITLE: MongoDB RoutingTableMissingMaxKey Example Usage
DESCRIPTION: Demonstrates a real-world example of the RoutingTableMissingMaxKey inconsistency, showing how it appears in a MongoDB cursor response with actual values for namespace, UUID, and key boundaries.

LANGUAGE: json
CODE:
{
   cursor: {
      id: Long("0"),
      ns: "test.$cmd.aggregate",
      firstBatch: [
         {
            type: "RoutingTableMissingMaxKey",
            description: "Routing table has a gap because last chunk boundary does not reach MaxKey",
            details: {
               namespace: "test.authors",
               collectionUUID: new UUID("62ebdb7e-a7bb-4151-a620-49d44cef097f"),
               maxKeyObj: { 
                  x: 0 
               },
               globalMax: { 
                  x: MaxKey 
               }
            }
         }
      ],
   },
   ok: 1
}

----------------------------------------

TITLE: Sorted Document Modification or Deletion with db.collection.findAndModify() in MongoDB
DESCRIPTION: Modifies or deletes a single document based on a filter and sort order. This method provides flexibility in updating or removing documents with precise control.

LANGUAGE: mongodb
CODE:
db.collection.findAndModify()

----------------------------------------

TITLE: Creating Indexes for cursor.max() Examples in MongoDB
DESCRIPTION: Creates multiple indexes on the 'products' collection to support the cursor.max() examples. Indexes are created on item, type, and price fields.

LANGUAGE: javascript
CODE:
db.products.createIndexes( [
   { "item" : 1, "type" : 1 },
   { "item" : 1, "type" : -1 },
   { "price" : 1 } 
] )

----------------------------------------

TITLE: Checking Feature Compatibility Version
DESCRIPTION: Command to check the feature compatibility version before upgrading to MongoDB 5.0.

LANGUAGE: javascript
CODE:
db.adminCommand( { getParameter: 1, featureCompatibilityVersion: 1 } )

----------------------------------------

TITLE: Executing balancerCollectionStatus for a Specific Collection
DESCRIPTION: Example of running the balancerCollectionStatus command for the 'test.contacts' collection from a mongos instance.

LANGUAGE: javascript
CODE:
db.adminCommand( { balancerCollectionStatus: "test.contacts" } )

----------------------------------------

TITLE: Filtering Authentication Operations for Single Database
DESCRIPTION: Configuration to audit authentication operations specifically for the test database using command line parameters.

LANGUAGE: javascript
CODE:
mongod --dbpath data/db --auth --auditDestination file --auditFilter '{ atype: "authenticate", "param.db": "test" }' --auditFormat BSON --auditPath data/db/auditLog.bson

----------------------------------------

TITLE: Creating Menu Codes with $substrBytes in MongoDB
DESCRIPTION: Uses $substrBytes to create three-byte menu codes from food names, demonstrating behavior with both single-byte and multi-byte characters.

LANGUAGE: javascript
CODE:
db.food.aggregate(
  [
    {
      $project: {
        "name": 1,
        "menuCode": { $substrBytes: [ "$name", 0, 3 ] }
      }
    }
  ]
)

----------------------------------------

TITLE: Creating Unique KeyAltNames Index - Java
DESCRIPTION: Creates a unique index on the keyAltNames field in the encryption.__keyVault collection using Java MongoDB driver. This index is required for queryable encryption functionality.

LANGUAGE: java
CODE:
keyVault.createIndex(
        Indexes.ascending("keyAltNames"),
        new IndexOptions()
                .unique(true)
                .partialFilterExpression(Filters.exists("keyAltNames")));

----------------------------------------

TITLE: Installing Latest MongoDB using YUM
DESCRIPTION: Command to install the latest stable version of MongoDB using the YUM package manager.

LANGUAGE: sh
CODE:
sudo yum install -y {+package-name-org+}

----------------------------------------

TITLE: MongoDB cloneCollectionAsCapped Command Syntax
DESCRIPTION: Command syntax for creating a capped collection from an existing collection. Takes parameters for source collection name, destination collection name, size limit in bytes, optional write concern, and optional comment.

LANGUAGE: javascript
CODE:
db.runCommand(
     { 
       cloneCollectionAsCapped: <existing collection>, 
       toCollection: <capped collection>,
       size: <capped size>,
       writeConcern: <document>,
       comment: <any>  
     }
  )

----------------------------------------

TITLE: Checking Feature Compatibility Version
DESCRIPTION: Command to check the feature compatibility version of a MongoDB instance. This should be run on each replica set member after updating the FCV.

LANGUAGE: javascript
CODE:
db.adminCommand( { getParameter: 1, featureCompatibilityVersion: 1 } )

----------------------------------------

TITLE: Sample Collection Creation for MongoDB $unset Examples
DESCRIPTION: Creates a sample books collection with documents containing nested fields and arrays for demonstration.

LANGUAGE: javascript
CODE:
db.books.insertMany([
   { "_id" : 1, title: "Antelope Antics", isbn: "0001122223334", author: { last:"An", first: "Auntie" }, copies: [ { warehouse: "A", qty: 5 }, { warehouse: "B", qty: 15 } ] },
   { "_id" : 2, title: "Bees Babble", isbn: "999999999333", author: { last:"Bumble", first: "Bee" }, copies: [ { warehouse: "A", qty: 2 }, { warehouse: "B", qty: 5 } ] }
])

----------------------------------------

TITLE: Insert Encrypted Document Code Examples
DESCRIPTION: Examples showing how to insert encrypted documents into MongoDB using a Queryable Encryption enabled MongoClient. The code demonstrates inserting into the medicalRecords.patients namespace with automatic field encryption.

LANGUAGE: json
CODE:
literalinclude:: /includes/queryable-encryption/quick-start/inserted-doc-enc.json

----------------------------------------

TITLE: Creating Data Encryption Keys for MongoDB Queryable Encryption
DESCRIPTION: This snippet demonstrates how to create data encryption keys using a MongoDB client with Queryable Encryption. It requires a connection string and key vault namespace.

LANGUAGE: javascript
CODE:
const uri = "<Your MongoDB URI>";
const keyVaultDatabase = "encryption";
const keyVaultCollection = "__keyVault";
const keyVaultNamespace = `${keyVaultDatabase}.${keyVaultCollection}`;

const client = new MongoClient(uri);
await client.connect();
const keyVault = client.getDatabase(keyVaultDatabase).collection(keyVaultCollection);

const clientEncryption = new ClientEncryption(client, {
  keyVaultNamespace,
  kmsProviders
});

const customerDek = await clientEncryption.createDataKey("aws", dataKeyOptions);
const productDek = await clientEncryption.createDataKey("aws", dataKeyOptions);

console.log("customerDek: ", customerDek.toString("hex"));
console.log("productDek: ", productDek.toString("hex"));

----------------------------------------

TITLE: Referenced Data Pattern Implementation
DESCRIPTION: Implementation of the referenced data pattern where reviews are stored in a separate collection and referenced by ID.

LANGUAGE: javascript
CODE:
db.books.insertMany( [
   {
      title: "Harry Potter",
      author: "J.K. Rowling",
      publisher: "Scholastic",
      reviews: ["review1", "review2", "review3"]
   },
   {
      title: "Pride and Prejudice",
      author: "Jane Austen",
      publisher: "Penguin",
      reviews: ["review4", "review5"]
   }
] )

LANGUAGE: javascript
CODE:
db.reviews.insertMany( [
   {
      review_id: "review1",
      reviewer: "Jason",
      review: "Did not enjoy!",
      rating: 1
   },
   {
      review_id: "review2",
      reviewer: "Pam",
      review: "Favorite book!",
      rating: 5
   },
   {
      review_id: "review3", 
      reviewer: "Bob",
      review: "Not bad, but could be better.",
      rating: 3
   },
   {
      review_id: "review4",
      reviewer: "Tina",
      review: "Amazing!",
      rating: 5
   },
   {
      review_id: "review5",
      reviewer: "Jacob",
      review: "A little overrated",
      rating: 4,
   }
] )

----------------------------------------

TITLE: Configuring MongoDB Auditing with BSON File Output in YAML
DESCRIPTION: YAML configuration for enabling MongoDB auditing with output to a BSON file.

LANGUAGE: yaml
CODE:
storage:
   dbPath: data/db
auditLog:
   destination: file
   format: BSON
   path: data/db/auditLog.bson

----------------------------------------

TITLE: Using $indexOfCP in MongoDB Aggregation Pipeline
DESCRIPTION: Demonstrates how to use the $indexOfCP operator in a MongoDB aggregation pipeline to find the code point index of 'foo' in each document's 'item' field.

LANGUAGE: javascript
CODE:
db.inventory.aggregate(
   [
     {
       $project:
          {
            cpLocation: { $indexOfCP: [ "$item", "foo" ] },
          }
      }
   ]
)

----------------------------------------

TITLE: Checking Cluster-wide Sharding Metadata Consistency in MongoDB
DESCRIPTION: Executes the checkMetadataConsistency command on the admin database to check the entire cluster for sharding metadata inconsistencies.

LANGUAGE: javascript
CODE:
db.adminCommand( {
   checkMetadataConsistency: 1
} )

----------------------------------------

TITLE: Importing Public Key for MongoDB Enterprise on Ubuntu
DESCRIPTION: This snippet imports the public key required for MongoDB Enterprise installation on Ubuntu. It uses the wget command to download the key and apt-key to add it to the system's trusted keys.

LANGUAGE: bash
CODE:
wget -qO - https://www.mongodb.org/static/pgp/server-5.0.asc | sudo apt-key add -

----------------------------------------

TITLE: Inserting Test Data into MongoDB Collection
DESCRIPTION: Creates a 'locations' collection with sample data to be used in the $lookup example.

LANGUAGE: javascript
CODE:
db.locations.insertMany(
   [
      { zip: 94301, name: "Palo Alto" },
      { zip: 10019, name: "New York" }
   ]
)

----------------------------------------

TITLE: Creating Index in Go
DESCRIPTION: Creates a unique index on the keyAltNames field in the encryption.__keyVault collection using Go driver

LANGUAGE: go
CODE:
_, err = keyVault.Indexes().CreateOne(
    context.TODO(),
    mongo.IndexModel{
        Keys: bson.D{{"keyAltNames", 1}},
        Options: options.Index().
            SetUnique(true).
            SetPartialFilterExpression(
                bson.D{{"keyAltNames", bson.D{{"$exists", true}}}},
            ),
    },
)

----------------------------------------

TITLE: Querying with Sparse Index
DESCRIPTION: Example of querying documents using a sparse index to find scores less than 90.

LANGUAGE: javascript
CODE:
db.scores.find( { score: { $lt: 90 } } )

----------------------------------------

TITLE: Inserting Sample Data into MongoDB Food Collection
DESCRIPTION: Inserts sample food documents into a MongoDB collection for demonstrating $substrBytes usage with various character types.

LANGUAGE: javascript
CODE:
db.food.insertMany(
 [
    { "_id" : 1, "name" : "apple" },
    { "_id" : 2, "name" : "banana" },
    { "_id" : 3, "name" : "éclair" },
    { "_id" : 4, "name" : "hamburger" },
    { "_id" : 5, "name" : "jalapeño" },
    { "_id" : 6, "name" : "pizza" },
    { "_id" : 7, "name" : "tacos" },
    { "_id" : 8, "name" : "寿司sushi" }
 ]
)

----------------------------------------

TITLE: Creating a Time Series Collection in MongoDB
DESCRIPTION: Shows how to create a time series collection named 'stocks' using the db.createCollection() method with specified time series options.

LANGUAGE: bash
CODE:
db.createCollection(
   "stocks",
   {
      timeseries: {
         timeField: "date",
         metaField: "ticker",
         granularity: "seconds"
      }
   })

----------------------------------------

TITLE: Listing Python Dependencies for MongoDB Project
DESCRIPTION: This snippet enumerates the Python packages required for the MongoDB project. It includes cryptography for security features, Jira for project management integration, PyJWT for JSON Web Token handling, and rstcloth, which is likely a custom tool for generating reStructuredText documentation.

LANGUAGE: plaintext
CODE:
cryptography
jira==3.4.1
PyJWT
rstcloth

----------------------------------------

TITLE: Viewing Node.js Driver Code Examples
DESCRIPTION: This snippet indicates that the user is viewing Node.js driver code examples and instructs how to switch to a different driver.

LANGUAGE: javascript
CODE:
// You are viewing the Node.js driver code examples.
// Use the dropdown menu to select a different driver.

----------------------------------------

TITLE: Executing replSetResizeOplog Command in MongoDB
DESCRIPTION: This snippet shows the basic syntax for executing the replSetResizeOplog command in MongoDB. It allows specifying the size of the oplog and optionally setting a minimum retention period for oplog entries.

LANGUAGE: javascript
CODE:
db.adminCommand(
   { 
     replSetResizeOplog: <int>, 
     size: <double>, 
     minRetentionHours: <double>
   }
 )

----------------------------------------

TITLE: Creating Unique Index for MongoDB Encryption Key Vault in Python
DESCRIPTION: This snippet illustrates how to create a unique index on the 'keyAltNames' field in the 'encryption.__keyVault' namespace using Python. It ensures that each key alternate name is unique within the key vault.

LANGUAGE: python
CODE:
key_vault.create_index(
    "keyAltNames",
    unique=True,
    partialFilterExpression={"keyAltNames": {"$exists": True}},
)

----------------------------------------

TITLE: Configuring KMS Provider Settings
DESCRIPTION: Sets up the Key Management System (KMS) provider configuration for local key provider with the customer master key.

LANGUAGE: javascript
CODE:
const provider = "local";
const kmsProviders = {
  local: {
    key: localMasterKey
  }
};

LANGUAGE: python
CODE:
provider = "local"
kms_providers = {
    "local": {
        "key": local_master_key
    }
}

----------------------------------------

TITLE: Inserting Main Book Information in MongoDB
DESCRIPTION: Example of inserting a document into the 'mainBookInfo' collection, which contains only the frequently accessed book information.

LANGUAGE: javascript
CODE:
db.mainBookInfo.insertOne(
   {
      _id: 1234,
      title: "Tale of Two Cities",
      author: "Charles Dickens",
      genre: "Historical Fiction",
      cover_image: "<url>"
   }
)

----------------------------------------

TITLE: Running MongoDB Test Suites with smoke.py
DESCRIPTION: This command demonstrates how to run a predefined suite of MongoDB tests using the smoke.py script. In this example, it runs the 'js' suite.

LANGUAGE: sh
CODE:
python buildscripts/smoke.py js

----------------------------------------

TITLE: Using Index Hints for Time Series Collections in MongoDB
DESCRIPTION: Shows how to use index hints to force MongoDB to use a specific index for a query on a time series collection.

LANGUAGE: javascript
CODE:
db.sensorData.find( { "metadata.sensorId": 5578 } ).hint( "timestamp_1_metadata.sensorId_1" )

----------------------------------------

TITLE: Inserting Multiple Documents into MongoDB Collection
DESCRIPTION: This snippet demonstrates how to insert multiple pizza documents into a MongoDB collection using the insertMany() method. It creates three pizza documents with different types, sizes, and prices.

LANGUAGE: javascript
CODE:
db.pizzas.insertMany( [
   { type: "pepperoni", size: "small", price: 4 },
   { type: "cheese", size: "medium", price: 7 },
   { type: "vegan", size: "large", price: 8 }
] )

----------------------------------------

TITLE: Using $dateSubtract in MongoDB Aggregation Pipeline
DESCRIPTION: Illustrates an aggregation pipeline that uses $dateSubtract to subtract 3 hours from logout times in January 2021. It includes stages for matching dates, projecting modified logout times, and merging results back into the collection.

LANGUAGE: javascript
CODE:
db.connectionTime.aggregate(
   [
      {
         $match: 
            {
               $expr:
                  {
                     $eq:
                        [
                            { $year: "$logout" },
                              2021 
                        ]
                  },  
               $expr:
                  { 
                     $eq:
                        [
                            { $month: "$logout" },
                              1
                        ]
                   }
             }
       },
       {
          $project:
             {
                logoutTime: 
                   {
                      $dateSubtract: 
                         {
                            startDate: "$logout",
                            unit: "hour",
                            amount: 3 
                         }
                   }
              }
        },
        {
           $merge: "connectionTime"
        }
   ]
)

----------------------------------------

TITLE: Querying MongoDB using $bitsAnySet with Integer Bitmask
DESCRIPTION: This example shows how to use the $bitsAnySet operator to test whether field 'a' has any bits set at positions 0, 1, and 5 using an integer bitmask (35, which is 00100011 in binary).

LANGUAGE: javascript
CODE:
db.collection.find( { a: { $bitsAnySet: 35 } } )

----------------------------------------

TITLE: Removing a Range from a Zone in MongoDB
DESCRIPTION: This code shows how to remove the current NYC range from the zone using the sh.removeRangeFromZone() method.

LANGUAGE: javascript
CODE:
sh.removeRangeFromZone("records.user", { zipcode: "10001" }, { zipcode: "10281" } )

----------------------------------------

TITLE: Storing Book References in Publisher Document (MongoDB JavaScript)
DESCRIPTION: This snippet illustrates storing book references within the publisher document. It's useful when the number of books per publisher is small, but can lead to mutable, growing arrays if the relationship is unbounded.

LANGUAGE: javascript
CODE:
{
   name: "O'Reilly Media",
   founded: 1980,
   location: "CA",
   books: [123456789, 234567890, ...]
}

{
    _id: 123456789,
    title: "MongoDB: The Definitive Guide",
    author: [ "Kristina Chodorow", "Mike Dirolf" ],
    published_date: ISODate("2010-09-24"),
    pages: 216,
    language: "English"
}

{
   _id: 234567890,
   title: "50 Tips and Tricks for MongoDB Developer",
   author: "Kristina Chodorow",
   published_date: ISODate("2011-05-06"),
   pages: 68,
   language: "English"
}

----------------------------------------

TITLE: Create Key Vault Index - Node.js
DESCRIPTION: Creates a unique index on the keyAltNames field in the encryption.__keyVault collection using Node.js MongoDB driver.

LANGUAGE: javascript
CODE:
await keyVaultDatabase.createCollection("__keyVault");
await keyVaultDatabase
  .collection("__keyVault")
  .createIndex("keyAltNames", { unique: true, partialFilterExpression: { keyAltNames: { $exists: true } } });

----------------------------------------

TITLE: Pinning MongoDB Enterprise Server Version on Debian/Ubuntu
DESCRIPTION: This set of commands pins the installed version of MongoDB Enterprise Server and related packages to prevent unintended upgrades. It uses dpkg to set the packages on hold.

LANGUAGE: bash
CODE:
echo "{+package-name-enterprise+} hold" | sudo dpkg --set-selections
echo "{+package-name-enterprise+}-server hold" | sudo dpkg --set-selections
echo "{+package-name-enterprise+}-database hold" | sudo dpkg --set-selections
echo "{+package-name+}-mongosh hold" | sudo dpkg --set-selections
echo "{+package-name-enterprise+}-mongos hold" | sudo dpkg --set-selections
echo "{+package-name-enterprise+}-tools hold" | sudo dpkg --set-selections

----------------------------------------

TITLE: Retrieving Database Statistics in MongoDB
DESCRIPTION: The db.stats() method returns a document with statistics about the database system's state. It can optionally take a scale factor to adjust the size units and a freeStorage parameter to include information on free space.

LANGUAGE: javascript
CODE:
db.stats()

----------------------------------------

TITLE: Setting Storage Engine Parameters
DESCRIPTION: Configure storage engine concurrent read/write transactions

LANGUAGE: javascript
CODE:
db.adminCommand( { setParameter: 1, storageEngineConcurrentReadTransactions: 128 } )

----------------------------------------

TITLE: Setting Storage Engine Parameters
DESCRIPTION: Configure storage engine concurrent read/write transactions

LANGUAGE: javascript
CODE:
db.adminCommand( { setParameter: 1, storageEngineConcurrentReadTransactions: 128 } )

----------------------------------------

TITLE: Example MongoDB Document for $dayOfMonth Demonstration
DESCRIPTION: Shows a sample document from a 'sales' collection that will be used to demonstrate the $dayOfMonth operator.

LANGUAGE: javascript
CODE:
{
  "_id" : 1,
  "item" : "abc",
  "price" : 10,
  "quantity" : 2,
  "date" : ISODate("2014-01-01T08:15:39.736Z")
}

----------------------------------------

TITLE: Supported Query Examples - MongoDB Shell
DESCRIPTION: Example queries that demonstrate the various ways to query against the wildcard index, including exact matches and comparison operators.

LANGUAGE: bash
CODE:
db.userData.find({ "userMetadata.likes" : "dogs" })
db.userData.find({ "userMetadata.dislikes" : "pickles" })
db.userData.find({ "userMetadata.age" : { $gt : 30 } })
db.userData.find({ "userMetadata" : "inactive" })

----------------------------------------

TITLE: Creating MongoDB Client with Automatic Encryption Settings
DESCRIPTION: This snippet demonstrates how to instantiate a MongoDB client with automatic encryption settings. It uses the previously defined key vault, KMS providers, schema, and extra options.

LANGUAGE: javascript
CODE:
const encryptedClient = Mongo({
  useNewUrlParser: true,
  autoEncryption: {
    keyVaultNamespace,
    kmsProviders,
    schemaMap: schema,
    extraOptions: extraOptions
  }
});

----------------------------------------

TITLE: Initializing Bloated Book Document in MongoDB
DESCRIPTION: Example of a bloated document structure containing book information that includes both frequently and infrequently accessed data.

LANGUAGE: javascript
CODE:
{
   title: "Tale of Two Cities",
   author: "Charles Dickens",
   genre: "Historical Fiction",
   cover_image: "<url>",
   year: 1859,
   pages: 448,
   price: 15.99,
   description: "A historical novel set during the French Revolution.
}

----------------------------------------

TITLE: Defining MongoDB Schema for Posts in JavaScript
DESCRIPTION: Defines the schema for storing post data in the social.post collection, including author information, post content, and comments.

LANGUAGE: javascript
CODE:
{
   _id: ObjectId(...),
   by: { id: "T4Y...AE", name: 'Max' },
   circles: [ '*public*' ],
   type: 'status',
   ts: ISODateTime(...),
   detail: {
      text: 'Loving MongoDB' },
   comments: [
      { by: { id:"T4Y...AG", name: 'Dwight' },
        ts: ISODateTime(...),
        text: 'Right on!' },
        ... all comments listed ... ]
}

----------------------------------------

TITLE: Analyzing Query Execution Statistics in MongoDB
DESCRIPTION: This query uses the explain() method to retrieve execution statistics for a text search query. It helps in understanding how many documents and index keys were examined during the query execution.

LANGUAGE: javascript
CODE:
db.inventory.find(
   {
      department: "kitchen", $text: { $search: "green" }
   }
).explain("executionStats")

----------------------------------------

TITLE: Performing Text Search with Relevance Sorting in MongoDB
DESCRIPTION: This snippet demonstrates how to perform a text search query on a 'stores' collection, searching for 'coffee shop cake'. It also shows how to retrieve and sort the results by relevance score using the $meta operator.

LANGUAGE: javascript
CODE:
db.stores.find(
   { $text: { $search: "coffee shop cake" } },
   { score: { $meta: "textScore" } }
).sort( { score: { $meta: "textScore" } } )

----------------------------------------

TITLE: Performing Text Search with Relevance Sorting in MongoDB
DESCRIPTION: This snippet demonstrates how to perform a text search query on a 'stores' collection, searching for 'coffee shop cake'. It also shows how to retrieve and sort the results by relevance score using the $meta operator.

LANGUAGE: javascript
CODE:
db.stores.find(
   { $text: { $search: "coffee shop cake" } },
   { score: { $meta: "textScore" } }
).sort( { score: { $meta: "textScore" } } )

----------------------------------------

TITLE: Removing Unknown Undefined Fields in MongoDB
DESCRIPTION: MongoDB update operation to remove all top-level fields containing undefined values when field names are not known in advance.

LANGUAGE: javascript
CODE:
db.people.updateMany(
   { },
   [ {
      $replaceWith: {
         $arrayToObject: {
            $filter: {
               input: { $objectToArray: "$$ROOT" },
               cond: {
                  $not: { $eq: [ { $type: "$$this.v" }, "undefined" ] }
               }
            }
         }
      }
   } ]
)

----------------------------------------

TITLE: Sample Output of MongoDB $divide Aggregation
DESCRIPTION: This snippet shows the expected output from the $divide aggregation example. It displays the resulting documents with the calculated 'workdays' field based on the division operation.

LANGUAGE: javascript
CODE:
{ "_id" : 1, "city" : "New York", "workdays" : 10 }
{ "_id" : 2, "city" : "Singapore", "workdays" : 5 }

----------------------------------------

TITLE: Creating a 2dsphere Index in MongoDB
DESCRIPTION: This snippet shows how to create a 2dsphere index on the 'loc' field, which is required for using the $near operator with GeoJSON points.

LANGUAGE: javascript
CODE:
db.places.createIndex( { "loc": "2dsphere" } )

----------------------------------------

TITLE: Example MongoDB Collection for $reverseArray Demonstration
DESCRIPTION: Demonstrates the structure of a sample 'users' collection used to showcase the $reverseArray operator. The collection contains documents with 'name' and 'favorites' fields.

LANGUAGE: javascript
CODE:
{ "_id" : 1, "name" : "dave123", "favorites" : [ "chocolate", "cake", "butter", "apples" ] }
{ "_id" : 2, "name" : "li", "favorites" : [ "apples", "pudding", "pie" ] }
{ "_id" : 3, "name" : "ahn", "favorites" : [ ] }
{ "_id" : 4, "name" : "ty" }

----------------------------------------

TITLE: Base Audit Message Schema
DESCRIPTION: Core schema structure for MongoDB audit log messages showing the mandatory and optional fields.

LANGUAGE: none
CODE:
{
  atype: <string>,
  ts : { $date: <timestamp> },
  uuid : { $binary: <string>, $type: <string> },
  local: { ip: <string>, port: <int> || isSystemUser: <boolean> || unix: <string> },
  remote: { ip: <string>, port: <int> || isSystemUser: <boolean> || unix: <string> },
  users : [ { user: <string>, db: <string> }, ... ],
  roles: [ { role: <string>, db: <string> }, ... ],
  param: <document>,
  result: <int>
}

----------------------------------------

TITLE: Sample Data Insertion for birthdays Collection
DESCRIPTION: Demonstrates inserting sample birthday data into a MongoDB collection using insertMany().

LANGUAGE: javascript
CODE:
db.birthdays.insertMany( [
   { _id: 1, name: "Betty", birthday: ISODate("1993-09-21T00:00:00Z") },
   { _id: 2, name: "Veronica", birthday: ISODate("1981-11-07T00:00:00Z") }
] )

----------------------------------------

TITLE: Syntax for db.collection.updateOne() Method
DESCRIPTION: The basic syntax for the updateOne() method, showing its parameters and options.

LANGUAGE: javascript
CODE:
db.collection.updateOne(
   <filter>,
   <update>,
   {
     upsert: <boolean>,
     writeConcern: <document>,
     collation: <document>,
     arrayFilters: [ <filterdocument1>, ... ],
     hint:  <document|string>,
     let: <document>,
     sort: <document>
   }
)

----------------------------------------

TITLE: Inserting Products with Additional Details in MongoDB
DESCRIPTION: This snippet shows how to insert product documents with additional details into the 'products' collection. Each product document includes fields for id, name, price, manufacturer, category, and description, maintaining more comprehensive product information.

LANGUAGE: javascript
CODE:
db.products.insertMany( [
   {
      _id: 1,
      name: "Laptop",
      price: 1000,
      manufacturer: "TechCorp",
      category: "Electronics", 
      description: "Fastest computer on the market."
   },
   {
      _id: 2,
      name: "Headphones",
      price: 100,
      manufacturer: "Sound",
      category: "Accessories",
      description: "The latest sound technology."
   },
   {
      _id: 3,
      name: "Tablet",
      price: 200,
      manufacturer: "TechCorp",
      category: "Electronics",
      description: "The most compact tablet."
   }
] )

----------------------------------------

TITLE: Inserting Encrypted Document with Java (Synchronous)
DESCRIPTION: This Java code snippet illustrates how to insert an encrypted document using MongoDB's Queryable Encryption. It employs a Queryable Encryption enabled MongoClient to insert a document into the 'medicalRecords.patients' namespace.

LANGUAGE: java
CODE:
// Code snippet not provided in the given content

----------------------------------------

TITLE: Shutting Down MongoDB Instance
DESCRIPTION: Command to gracefully shut down a MongoDB instance. This is used during the downgrade process for each replica set member.

LANGUAGE: javascript
CODE:
db.adminCommand( { shutdown: 1 } )

----------------------------------------

TITLE: Rotating Audit Log with Comment Example
DESCRIPTION: Example command to rotate only the audit log with a custom message logged at rotation time.

LANGUAGE: javascript
CODE:
db.adminCommand( { logRotate: "audit", comment: "Rotating audit log" } )

----------------------------------------

TITLE: Querying an Array Field as a Whole with Multikey Index in MongoDB
DESCRIPTION: Example of a query that looks for documents where the 'ratings' field exactly matches a specific array. This demonstrates how MongoDB uses the multikey index for such queries.

LANGUAGE: javascript
CODE:
db.inventory.find( { ratings: [ 5, 9 ] } )

----------------------------------------

TITLE: Error Handling with $mergeObjects
DESCRIPTION: Shows how to handle missing fields using $mergeObjects when replacing documents.

LANGUAGE: javascript
CODE:
db.collection.aggregate([
   { $replaceWith: { $mergeObjects: [ { _id: "$_id", first: "", last: "" }, "$name" ] } }
])

----------------------------------------

TITLE: Listing Shards in MongoDB Cluster
DESCRIPTION: This code snippet shows how to use the listShards command to retrieve information about all shards in a MongoDB cluster, including their names.

LANGUAGE: javascript
CODE:
db.adminCommand( { listShards: 1 } )

----------------------------------------

TITLE: Querying for Undefined Values in MongoDB
DESCRIPTION: MongoDB query to match documents where a field is undefined, null, or missing using $or operator and $type comparison.

LANGUAGE: javascript
CODE:
db.people.find( { 
   $or: [
      { name: null },
      { name: { $type: "undefined" } }
   ]
} )

----------------------------------------

TITLE: Configuring MongoDB Cluster X.509 Authentication Attributes
DESCRIPTION: YAML configuration example showing how to set X.509 certificate attributes for cluster authentication. Demonstrates setting Organization (O) and Organizational Unit (OU) attributes in the net.tls.clusterAuthX509.attributes configuration.

LANGUAGE: yaml
CODE:
net:
  tls:
    clusterAuthX509:
      attributes: O=MongoDB, OU=MongoDB Server

----------------------------------------

TITLE: Checking Feature Compatibility Version in MongoDB
DESCRIPTION: This command retrieves the current feature compatibility version of the MongoDB instance. It's used to ensure the instance is at version 6.0 before upgrading to 7.0.

LANGUAGE: javascript
CODE:
db.adminCommand( { getParameter: 1, featureCompatibilityVersion: 1 } )

----------------------------------------

TITLE: Using $count in MongoDB $setWindowFields Stage
DESCRIPTION: This example uses the $count accumulator in the $setWindowFields stage to count the number of documents in the cakeSales collection for each state defined in the window.

LANGUAGE: javascript
CODE:
db.cakeSales.aggregate( [
   {
      $setWindowFields: {
         partitionBy: "$state",
         sortBy: { orderDate: 1 },
         output: {
            countNumberOfDocumentsForState: {
               $count: {},
               window: {
                  documents: [ "unbounded", "current" ]
               }         
            }
         }
      }
   }
] )

----------------------------------------

TITLE: Inserting Encrypted Document with Java (Synchronous)
DESCRIPTION: This Java code snippet illustrates how to insert an encrypted document using MongoDB's Queryable Encryption. It employs a Queryable Encryption enabled MongoClient to insert a document into the 'medicalRecords.patients' namespace.

LANGUAGE: java
CODE:
// Code snippet not provided in the given content

----------------------------------------

TITLE: Sample Output of listIndexes Command for MongoDB Key Vault
DESCRIPTION: This snippet shows the expected output format when querying index information for the Key Vault collection. It indicates the presence of the default _id index, but the absence of the required unique index on keyAltNames.

LANGUAGE: json
CODE:
{
   cursor: {
      id: Long("0"),
      ns: 'encryption.__keyVault',
      firstBatch: [ 
         { v: 2, key: { _id: 1 }, name: '_id_' } 
         ]
   },
   ok: 1,
}

----------------------------------------

TITLE: Language-Specific Search Index Creation in MongoDB
DESCRIPTION: Creates a French language-specific search index named 'frenchIndex01' on the cars collection, implementing the Lucene French analyzer for the 'fr' field.

LANGUAGE: javascript
CODE:
db.cars.createSearchIndex(
   "frenchIndex01",
   {
      mappings: {
         fields: {
            subject: {
               fields: {
                  fr: {
                     analyzer: "lucene.french",
                     type: "string"
                  }
               },
               type: "document"
            }
         }
      }
   }
)

----------------------------------------

TITLE: Implicit Collection Creation Methods in MongoDB Transactions
DESCRIPTION: Lists the MongoDB methods that can implicitly create collections when run against non-existing collections with upsert options or insert operations.

LANGUAGE: javascript
CODE:
db.collection.findAndModify({upsert: true})
db.collection.findOneAndReplace({upsert: true})
db.collection.findOneAndUpdate({upsert: true})
db.collection.insertMany()
db.collection.insertOne()
db.collection.updateOne({upsert: true})
db.collection.updateMany({upsert: true})
db.collection.replaceOne({upsert: true})
db.collection.bulkWrite()

----------------------------------------

TITLE: Deleting Multiple Documents in MongoDB using Go Driver
DESCRIPTION: This snippet demonstrates how to delete multiple documents using the MongoDB Go driver. The actual code is not provided in the snippet, but it references an external file.

LANGUAGE: go
CODE:
// Code is referenced from an external file:
// /driver-examples/go_examples.go

----------------------------------------

TITLE: Defining MongoDB Schema for User Wall Cache in JavaScript
DESCRIPTION: Defines the schema for caching a user's wall posts in the social.wall collection to optimize retrieval.

LANGUAGE: javascript
CODE:
{
   _id: ObjectId(...),
   user_id: "T4Y...AE",
   month: '201204',
   posts: [
      { id: ObjectId(...),
        ts: ISODateTime(...),
        by: { id: "T4Y...AE", name: 'Max' },
        circles: [ '*public*' ],
        type: 'status',
        detail: { text: 'Loving MongoDB' },
        comments_shown: 3,
        comments: [
          { by: { id: "T4Y...AG", name: 'Dwight',
            ts: ISODateTime(...),
            text: 'Right on!' },
          ... only last 3 comments listed ...
            ]
      },
      { id: ObjectId(...),s
        ts: ISODateTime(...),
        by: { id: "T4Y...AE", name: 'Max' },
        circles: [ '*circles*' ],
        type: 'checkin',
        detail: {
          text: 'Great office!',
          geo: [ 40.724348,-73.997308 ],
          name: '10gen Office',
          photo: 'http://....' },
        comments_shown: 1,
        comments: [
          { by: { id: "T4Y...AD", name: 'Jared' },
            ts: ISODateTime(...),
            text: 'Wrong coast!' },
          ... only last 1 comment listed ...
            ]
      },
      { id: ObjectId(...),
        ts: ISODateTime(...),
        by: { id: "T4Y...g9", name: 'Rick' },
        circles: [ '10gen' ],
        type: 'status',
        detail: {
          text: 'So when do you crush Oracle?' },
        comments_shown: 2,
        comments: [
          { by: { id: "T4Y...AE", name: 'Max' },
            ts: ISODateTime(...),
            text: 'Soon... ;-)' },
          ... only last 2 comments listed ...
            ]
      },
      ...
   ]
}

----------------------------------------

TITLE: Creating Sample Sales Collection in MongoDB
DESCRIPTION: Demonstrates inserting sample sales data into a MongoDB collection for aggregation examples.

LANGUAGE: javascript
CODE:
db.sales.insertMany( [
   { "_id" : 1, "item" : "abc", "price" : 10, "quantity" : 2, "date" : ISODate("2014-01-01T08:00:00Z") },
   { "_id" : 2, "item" : "jkl", "price" : 20, "quantity" : 1, "date" : ISODate("2014-02-03T09:00:00Z") },
   { "_id" : 3, "item" : "xyz", "price" : 5, "quantity" : 5, "date" : ISODate("2014-02-03T09:05:00Z") },
   { "_id" : 4, "item" : "abc", "price" : 10, "quantity" : 10, "date" : ISODate("2014-02-15T08:00:00Z") },
   { "_id" : 5, "item" : "xyz", "price" : 5, "quantity" : 10, "date" : ISODate("2014-02-15T09:05:00Z") },
   { "_id" : 6, "item" : "xyz", "price" : 5, "quantity" : 5, "date" : ISODate("2014-02-15T12:05:10Z") },
   { "_id" : 7, "item" : "xyz", "price" : 5, "quantity" : 10, "date" : ISODate("2014-02-15T14:12:12Z") }
] )

----------------------------------------

TITLE: RST Documentation Structure for MongoDB Self-Managed Deployments
DESCRIPTION: ReStructuredText (RST) markup defining the documentation structure for MongoDB self-managed deployments, including page title, metadata, table of contents, and navigation links.

LANGUAGE: rst
CODE:
.. _self-managed-deployments:

========================
Self-Managed Deployments
========================

.. default-domain:: mongodb

.. facet::
   :name: genre
   :values: reference

.. meta:: 
   :description: Learn about self-managed MongoDB document database deployments.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. toctree::
   :titlesonly:
   :hidden:

   Install </installation>
   Deploy & Manage Replica Sets <administration/deploy-manage-self-managed-replica-sets>
   Deploy & Manage Sharded Clusters <administration/deploy-manage-self-managed-sharded-clusters>
   Storage </core/self-managed-storage>
   Administration </administration/self-managed-administration>
   Security </core/self-managed-security>
   Text Search </core/text-search/on-prem>

----------------------------------------

TITLE: Example MongoDB createIndexes Change Stream Event
DESCRIPTION: Sample JSON output showing the structure of a createIndexes event from MongoDB's change streams. The event captures details about index creation including collection information, timing data, and index specifications.

LANGUAGE: json
CODE:
{
   "_id": { <ResumeToken> },
   "operationType": "createIndexes",
   "clusterTime": Timestamp({ t: 1651257835, i: 1 }),
   "collectionUUID": UUID("06bced37-7cc8-4267-96aa-a58a422153d8"),
   "wallTime": ISODate("2022-04-29T18:43:55.160Z"),
   "ns": {
      "db": "test",
      "coll": "authors"
   },
   "operationDescription": {
      "indexes": [
         { "v": 2, "key": { "name": 1 }, "name": "name_1" }
      ]
   }
}

----------------------------------------

TITLE: Creating a Capped Collection with Maximum Size and Document Count in MongoDB
DESCRIPTION: This snippet shows how to create a capped collection named 'log2' with a maximum size of 5,242,880 bytes and a maximum of 5,000 documents using the db.createCollection() method.

LANGUAGE: javascript
CODE:
db.createCollection(
   "log2",
   { 
      capped: true,
      size: 5242880,
      max: 5000
   }
)

----------------------------------------

TITLE: Creating Compound Text Index in MongoDB
DESCRIPTION: Creates a compound text index on multiple fields (about and keywords) in the blog collection.

LANGUAGE: javascript
CODE:
db.blog.createIndex(
   {
      "about": "text",
      "keywords": "text"
   }
)

----------------------------------------

TITLE: Querying with Compound Index Prefixes in MongoDB
DESCRIPTION: Examples of queries that utilize compound index prefixes, demonstrating how a compound index can support queries on subsets of the indexed fields.

LANGUAGE: javascript
CODE:
db.products.find( { category: "electronics" } )
db.products.find( { category: "electronics", item: "television" } )

----------------------------------------

TITLE: Shutting Down MongoDB Secondary Server
DESCRIPTION: Connect to the admin database and gracefully shutdown a secondary server using db.shutdownServer() method.

LANGUAGE: javascript
CODE:
use admin
db.shutdownServer()

----------------------------------------

TITLE: Basic listDatabases Command Syntax
DESCRIPTION: Basic syntax for executing the listDatabases command against the admin database.

LANGUAGE: javascript
CODE:
db.adminCommand( 
   { 
     listDatabases: 1 
   } 
)

----------------------------------------

TITLE: Inserting Invalid Document with Warning Validation
DESCRIPTION: This snippet shows an attempt to insert an invalid document into the 'contacts2' collection with warning validation. The operation succeeds, but a warning is logged.

LANGUAGE: javascript
CODE:
db.contacts2.insertOne(
   { name: "Amanda", email: "amanda@xyz.com" }
)

----------------------------------------

TITLE: Stepping Down Primary in MongoDB Replica Set
DESCRIPTION: This code shows how to step down the primary member in a MongoDB replica set using the rs.stepDown() method.

LANGUAGE: javascript
CODE:
rs.stepDown()

----------------------------------------

TITLE: Existence Check for Missing Fields in MongoDB Shell
DESCRIPTION: Query that matches documents where the 'item' field does not exist.

LANGUAGE: javascript
CODE:
db.inventory.find( { item: { $exists: false } } )

----------------------------------------

TITLE: Enabling MongoDB Auditing with OCSF Schema Output
DESCRIPTION: Command to start mongod with auditing enabled and output in OCSF schema format to a JSON file.

LANGUAGE: bash
CODE:
mongod --dbpath data/db --auditDestination file --auditFormat JSON --auditPath data/db/auditLog.json --auditSchema OCSF

----------------------------------------

TITLE: Defining MongoDB Read/Write Distribution Document Structure in JavaScript
DESCRIPTION: This code snippet illustrates the structure of a MongoDB document that contains detailed metrics about read and write operations distribution across shards. It includes sample sizes for various operation types, percentages of single-shard, multi-shard, and scatter-gather operations, and numerical distributions of reads and writes across ranges.

LANGUAGE: javascript
CODE:
{
   readDistribution: {
     sampleSize: {
       total: <integer>,
       find: <integer>,
       aggregate: <integer>,
       count: <integer>,
       distinct: <integer>
     },
     percentageOfSingleShardReads: <double>,
     percentageOfMultiShardReads: <double>,
     percentageOfScatterGatherReads: <double>,
     numReadsByRange: [
       <integer>,
       ...
     ]
   },
   writeDistribution: {
     sampleSize: {
       total: <integer>,
       update: <integer>,
       delete: <integer>,
       findAndModify: <integer>
     },
     percentageOfSingleShardWrites: <double>,
     percentageOfMultiShardWrites: <double>,
     percentageOfScatterGatherWrites: <double>,
     numWritesByRange: [
       <integer>,
       ...     
     ],
     percentageOfShardKeyUpdates: <double>,
     percentageOfSingleWritesWithoutShardKey: <double>,
     percentageOfMultiWritesWithoutShardKey: <double>
   }
}

----------------------------------------

TITLE: Starting MongoDB with Kerberos Authentication
DESCRIPTION: Command to start mongos.exe with Kerberos authentication enabled using the GSSAPI mechanism.

LANGUAGE: bash
CODE:
mongos.exe --setParameter authenticationMechanisms=GSSAPI <additional mongos options>

----------------------------------------

TITLE: MongoDB TTL Configuration for Query Analysis
DESCRIPTION: The queryAnalysisSampleExpirationSecs parameter controls how long sampled queries are retained in MongoDB's internal collection before automatic deletion. This setting works through a TTL index with expireAfterSeconds configured according to the parameter value.

LANGUAGE: mongodb
CODE:
queryAnalysisSampleExpirationSecs

----------------------------------------

TITLE: Creating LVM Snapshot for MongoDB Backup
DESCRIPTION: Creates an LVM snapshot of a MongoDB volume with 100MB capacity for tracking changes since snapshot creation. The snapshot is named mdb-snap01 from the mongodb volume in vg0 volume group.

LANGUAGE: bash
CODE:
lvcreate --size 100M --snapshot --name mdb-snap01 /dev/vg0/mongodb

----------------------------------------

TITLE: Defining Balancing Settings Precedence in RST
DESCRIPTION: This RST code snippet outlines the order of precedence for balancing and auto-merge settings, including global and per-collection configurations.

LANGUAGE: rst
CODE:
Balancing Settings Precedence
`````````````````````````````
{+auto-merge-action-upper+} happens as part of balancing operations. 
In order to decide if and when to execute {+auto-merge-lower-plural+}, 
the settings are taken into account in this order:

#. Global :ref:`balancing settings <balancer-sharding-params>`
#. Per-collection balancing settings (configured by :dbcommand:`configureCollectionBalancing`)
#. Global :ref:`{+auto-merge-upper+} settings <automerger-params>`
#. Per-collection {+auto-merge-upper+} settings (configured by :dbcommand:`configureCollectionBalancing`)

----------------------------------------

TITLE: Using $documentNumber with Duplicate, Null, and Missing Values
DESCRIPTION: This example shows how $documentNumber handles duplicate, null, and missing values when assigning document numbers within each state partition, sorted by quantity in descending order.

LANGUAGE: javascript
CODE:
db.cakeSalesWithDuplicates.aggregate( [
   {
      $setWindowFields: {
         partitionBy: "$state",
         sortBy: { quantity: -1 },
         output: {
            documentNumberForState: {
               $documentNumber: {}  
            }
         }
      }
   }
] )

----------------------------------------

TITLE: Querying Authentication Restrictions for MongoDB Roles
DESCRIPTION: Demonstrates how to retrieve role inheritance information and authentication restrictions for user-defined roles in the products database. The query shows role configurations including client source restrictions.

LANGUAGE: javascript
CODE:
use products

db.getRoles( { rolesInfo: 1, showAuthenticationRestrictions: true } )

----------------------------------------

TITLE: MongoDB $collStats Count Example
DESCRIPTION: Demonstrates retrieving the document count for a collection using $collStats.

LANGUAGE: javascript
CODE:
db.matrices.aggregate( [ { $collStats: { count: { } } } ] )

----------------------------------------

TITLE: Checking Feature Compatibility Version
DESCRIPTION: This command checks the current feature compatibility version of a MongoDB instance, which should be set to 4.4 before downgrading.

LANGUAGE: javascript
CODE:
db.adminCommand( { getParameter: 1, featureCompatibilityVersion: 1 } )

----------------------------------------

TITLE: Restarting the Balancer in MongoDB
DESCRIPTION: This code shows how to restart the balancer using the sh.startBalancer() method after making changes to shard zones.

LANGUAGE: javascript
CODE:
sh.startBalancer()

----------------------------------------

TITLE: Enabling MongoDB Profiler with Custom Settings
DESCRIPTION: Example showing how to enable profiling (level 1) with a 20ms slow operation threshold and 0.42 sample rate.

LANGUAGE: javascript
CODE:
db.setProfilingLevel(1, { slowms: 20, sampleRate: 0.42 })

----------------------------------------

TITLE: Enabling Automatic Removal on an Existing Time Series Collection in MongoDB
DESCRIPTION: This snippet shows how to enable automatic removal of documents for an existing time series collection named 'weather24h' using the collMod command. It sets the expireAfterSeconds parameter to 604801 seconds (approximately 7 days).

LANGUAGE: javascript
CODE:
db.runCommand({
   collMod: "weather24h",
   expireAfterSeconds: 604801
})

----------------------------------------

TITLE: Querying MongoDB Configuration Changes Output Structure
DESCRIPTION: Demonstrates the structure of the document returned by MongoDB's Configuration Query Analysis (CQA) operation. The returned document contains 'ok' status, 'oldConfiguration' (if exists), and 'newConfiguration' fields.

LANGUAGE: none
CODE:
{
   ok: 1,
   oldConfiguration: {
     mode: ...,
     samplesPerSecond: ...
   }
   newConfiguration: {
     ...
   }
}

----------------------------------------

TITLE: Basic Shard Key Refinement Command Syntax
DESCRIPTION: Basic syntax for the refineCollectionShardKey command showing the required fields and structure.

LANGUAGE: javascript
CODE:
db.adminCommand( 
   { 
     refineCollectionShardKey: "<database>.<collection>", 
     key: { <existing key specification>, <suffix1>: <1|"hashed">, ... }
   } 
)

----------------------------------------

TITLE: Example of Encrypted Document Structure in MongoDB
DESCRIPTION: This JSON snippet shows the structure of an encrypted document after insertion using MongoDB's Queryable Encryption feature. It demonstrates how the encrypted fields appear in the database.

LANGUAGE: json
CODE:
// Example of an encrypted document structure


----------------------------------------

TITLE: Example of Replica Set Member Tags in MongoDB
DESCRIPTION: An example of tags assigned to a secondary member in a replica set, specifying region and datacenter.

LANGUAGE: javascript
CODE:
{ "region": "South", "datacenter": "A" }

----------------------------------------

TITLE: Example Usage of sh.checkMetadataConsistency() in MongoDB
DESCRIPTION: This example shows how to call sh.checkMetadataConsistency() without any options and the expected JSON output. The output includes a cursorHasMore flag and a documents array containing details about any inconsistencies found.

LANGUAGE: javascript
CODE:
sh.checkMetadataConsistency()

LANGUAGE: json
CODE:
{
   cursorHasMore: false,
   documents: [
      {
         type: "MisplacedCollection",
         description: "Unsharded collection found on shard different from database primary shard",
         details: {
            namespace: "test.authors",
            shard: "shard02",
            localUUID: new UUID("1ad56770-61e2-48e9-83c6-8ecefe73cfc4")
         }
      }
   ],
}

----------------------------------------

TITLE: Creating ClientEncryption in Java
DESCRIPTION: Example showing how to instantiate a ClientEncryption object using the Java MongoDB driver

LANGUAGE: java
CODE:
// Code reference: /includes/queryable-encryption/fundamentals/manual-encryption/manual-enc.java

----------------------------------------

TITLE: Connecting to MongoDB with AWS IAM Authentication using mongosh
DESCRIPTION: This snippet demonstrates how to connect to a MongoDB cluster using the mongosh shell with AWS IAM authentication. It requires AWS access key ID, secret access key, and session token.

LANGUAGE: bash
CODE:
mongosh 'mongodb+srv://<aws access key id>:<aws secret access key>@cluster0.example.com/testdb?authSource=$external&authMechanism=MONGODB-AWS&authMechanismProperties=AWS_SESSION_TOKEN:<aws session token>'

----------------------------------------

TITLE: Document and Array Inequality Queries with MongoDB Wildcard Index
DESCRIPTION: Illustrates queries that wildcard indexes cannot support for document or array inequality matches. These queries use the $ne operator to find documents that don't match specific structures.

LANGUAGE: javascript
CODE:
db.inventory.find( { $ne : [ "product_attributes", { "price" : 29.99 } ] } )
db.inventory.find( { $ne : [ "product_attributes.tags",  [ "waterproof", "fireproof" ] ] } )

db.inventory.aggregate([{ 
  $match : { $ne : [ "product_attributes", { "price" : 29.99 } ] }
}])

db.inventory.aggregate([{ 
  $match : { $ne : [ "product_attributes.tags", [ "waterproof", "fireproof" ] ] }
}])

----------------------------------------

TITLE: LDAP Query URL Example
DESCRIPTION: Example LDAP query URL format for retrieving group membership

LANGUAGE: bash
CODE:
"{USER}?memberOf?base"

----------------------------------------

TITLE: Basic removeShard Command Syntax in MongoDB
DESCRIPTION: Shows the basic syntax for removing a shard from a MongoDB cluster using the removeShard command.

LANGUAGE: javascript
CODE:
db.adminCommand( 
   { 
     removeShard : <shardToRemove> 
   } 
)

----------------------------------------

TITLE: Uninstalling SELinux Policy for MongoDB Downgrade
DESCRIPTION: This command uninstalls the SELinux policy, which is necessary before downgrading MongoDB to a version earlier than 5.1. It must be run from the directory where the SELinux policy was previously cloned.

LANGUAGE: bash
CODE:
sudo make uninstall

----------------------------------------

TITLE: Retrieving Additional MongoDB Index Results
DESCRIPTION: This example shows how to use the getMore command to retrieve additional result batches for index information from the 'contacts' collection, using a cursor ID obtained from a previous listIndexes command.

LANGUAGE: json
CODE:
db.runCommand( 
   { 
      getMore: Long("4809221676960028307"), collection: "contacts"
   } 
)

----------------------------------------

TITLE: Small Document Structure in MongoDB
DESCRIPTION: This example illustrates a small document structure in MongoDB, containing only two fields: last_name and best_score. It's used to demonstrate how field names can impact storage efficiency for small documents.

LANGUAGE: javascript
CODE:
{ last_name : "Smith", best_score: 3.9 }

----------------------------------------

TITLE: Searching Multi-Language Text Index in MongoDB
DESCRIPTION: Example of performing a text search query for the French word 'réalité' using the created text index.

LANGUAGE: javascript
CODE:
db.quotes.find(
   { $text: 
      { $search: "réalité" }
   }
)

----------------------------------------

TITLE: Defining Feature and Installation Documentation Links
DESCRIPTION: Defines reStructuredText substitution variables for feature references and installation documentation links. Used to maintain consistent documentation references.

LANGUAGE: rst
CODE:
.. |features|  replace:: features

.. |installationdoc| replace:: :v3.6:`3.6 installation instructions </installation>`

----------------------------------------

TITLE: Modifying Indexes in MongoDB Compass
DESCRIPTION: Instructions for modifying indexes in MongoDB Compass interface, requiring the index to be dropped and recreated.



----------------------------------------

TITLE: Revoking Multiple Privileges from a Role in MongoDB
DESCRIPTION: This example demonstrates revoking multiple privileges from the 'associate' role in the 'products' database. It shows how to specify different resources and actions in a single command execution.

LANGUAGE: javascript
CODE:
use products
db.runCommand(
   {
     revokePrivilegesFromRole: "associate",
     privileges:
      [
        {
          resource: { db: "products", collection: "" },
          actions: [ "createCollection", "createIndex", "find" ]
        },
        {
          resource: { db: "products", collection: "orders" },
          actions: [ "insert" ]
        }
      ],
     writeConcern: { w: "majority" }
   }
)

----------------------------------------

TITLE: Sample getIndexes Output Format
DESCRIPTION: Example output showing the structure of the array returned by getIndexes(), including index version, keys, and names.

LANGUAGE: javascript
CODE:
[
   {
      "v" : 2,
      "key" : {
         "_id" : 1
      },
      "name" : "_id_"
   },
   {
      "v" : 2,
      "key" : {
         "status" : 1
      },
      "name" : "status_1"
   },
   {
      "v" : 2,
      "key" : {
         "points" : 1
      },
      "name" : "points_1"
   }
]

----------------------------------------

TITLE: Default Read Concern Value in MongoDB
DESCRIPTION: This snippet shows the default value for the read concern in MongoDB.

LANGUAGE: mongodb
CODE:
"implicit"

----------------------------------------

TITLE: Creating Version 2 2dsphere Index Example in MongoDB
DESCRIPTION: Practical example showing how to create a version 2 2dsphere index on an 'address' field in a collection named 'test'.

LANGUAGE: javascript
CODE:
db.test.createIndex(
   { "address": "2dsphere" },
   { "2dsphereIndexVersion": 2 }
 )

----------------------------------------

TITLE: Example of RoutingTableMissingMinKey Document
DESCRIPTION: Demonstrates a complete example of a RoutingTableMissingMinKey inconsistency document within a MongoDB cursor response, showing how the inconsistency is reported when a routing table has a gap because the first chunk doesn't start from MinKey.

LANGUAGE: json
CODE:
{
   cursor: {
      id: Long("0"),
      ns: "test.$cmd.aggregate",
      firstBatch: [
         {
            type: "RoutingTableMissingMinKey",
            description: "Routing table has a gap because first chunk does not start from MinKey",
            details: {
               namespace: "test.authors",
               collectionUUID: new UUID("62ebdb7e-a7bb-4151-a620-49d44cef097f"),
               minKeyObj: { 
                  x: 0 
               },
               globalMin: { 
                  x: MinKey 
               }
            }
         }
      ],
   },
   ok: 1
}

----------------------------------------

TITLE: Updating Replica Set Configuration in MongoDB (JavaScript)
DESCRIPTION: Updates the hostname of a replica set member using rs.reconfig(). This is used when migrating a replica set member to a new machine with a different hostname.

LANGUAGE: javascript
CODE:
cfg = rs.conf()
cfg.members[2].host = "pocatello.example.net:27018"
rs.reconfig(cfg)

----------------------------------------

TITLE: Querying Inactive Sessions in MongoDB Using $currentOp
DESCRIPTION: Example of using $currentOp to return information on inactive sessions holding transaction locks. It uses $match to filter for inactive sessions with transactions.

LANGUAGE: javascript
CODE:
db.getSiblingDB("admin").aggregate( [
   { $currentOp : { allUsers: true, idleSessions: true } },
   { $match : { active: false, transaction : { $exists: true } } }
] )

----------------------------------------

TITLE: Inserting a Document into MongoDB Products Collection
DESCRIPTION: Shows how to insert a document into the 'products' collection using insertOne() method.

LANGUAGE: javascript
CODE:
db.products.insertOne(
   { "_id" : 1, "item" : "Hats", "price" : Decimal128("10.99"), "quantity" : 25 }
)

----------------------------------------

TITLE: Removing Documents Using Variables with 'let' in MongoDB
DESCRIPTION: This snippet shows how to use the 'let' option to define variables for use in the removal query, allowing for more dynamic and reusable queries.

LANGUAGE: javascript
CODE:
db.cakeFlavors.remove(
   { $expr: { $eq: [ "$flavor", "$$targetFlavor" ] } },
   { let : { targetFlavor: "strawberry" } }
)

----------------------------------------

TITLE: Authentication Audit Message
DESCRIPTION: Structure for authentication attempt audit messages including user credentials and mechanism.

LANGUAGE: none
CODE:
{
  user: <user name>,
  db: <database>,
  mechanism: <mechanism>
}

----------------------------------------

TITLE: Encrypting MongoDB Data with an Existing KMIP Key
DESCRIPTION: This command starts mongod with encryption enabled, using an existing key managed by a KMIP server. It specifies the KMIP server details, certificate files, and the identifier of the existing key to use.

LANGUAGE: bash
CODE:
mongod --enableEncryption \
       --kmipServerName <KMIP Server HostName> \
       --kmipPort <KMIP server port> \
       --kmipServerCAFile ca.pem \
       --kmipClientCertificateFile client.pem \
       --kmipKeyIdentifier <UID>

----------------------------------------

TITLE: Subset Pattern Implementation
DESCRIPTION: Implementation of the subset pattern where a limited number of reviews are stored in the books collection while additional reviews are stored separately.

LANGUAGE: javascript
CODE:
db.books.insertOne( [
   {
      title: "Harry Potter",
      author: "J.K. Rowling",
      publisher: "Scholastic",
      reviews: [
        {
           reviewer: "Alice",
           review: "Great book!",
           rating: 5
        },
        {
           reviewer: "Charlie",
           review: "Didn't like it.",
           rating: 1
        },
        {
           reviewer: "Bob",
           review: "Not bad, but could be better.",
           rating: 3
        }
      ],
   }
] )

LANGUAGE: javascript
CODE:
db.reviews.insertMany( [
   {
      reviewer: "Jason",
      review: "Did not enjoy!",
      rating: 1
   },
   {
      reviewer: "Pam",
      review: "Favorite book!",
      rating: 5
   },
   {
      reviewer: "Bob",
      review: "Not bad, but could be better.",
      rating: 3
   }
] )

----------------------------------------

TITLE: MongoDB setAllowMigrations Command Example
DESCRIPTION: Example showing how to prevent migrations on a specific collection named store.inventory.

LANGUAGE: javascript
CODE:
db.adminCommand( {
   setAllowMigrations: "store.inventory",
   allowMigrations: false
} )

----------------------------------------

TITLE: Example fullDocumentBeforeChange Output in MongoDB 6.0 Change Stream
DESCRIPTION: This JSON snippet demonstrates the structure of a fullDocumentBeforeChange document in the change stream output. It includes the _id, userName, and name fields of the document before it was changed or deleted.

LANGUAGE: json
CODE:
"fullDocumentBeforeChange" : {
   "_id" : ObjectId("599af247bb69cd89961c986d"), 
   "userName" : "alice123",
   "name" : "Alice Smith"
}

----------------------------------------

TITLE: Converting Collection to Capped Format in MongoDB
DESCRIPTION: Basic syntax for the convertToCapped command that converts a regular collection to a capped collection with specified size and optional parameters.

LANGUAGE: javascript
CODE:
db.runCommand(
   { 
     convertToCapped: <collection>,
     size: <capped size>,
     writeConcern: <document>,
     comment: <any>  
   }
)

----------------------------------------

TITLE: Generating Keytab File on Active Directory Server
DESCRIPTION: Command to generate a keytab file on an Active Directory server for use with MongoDB Kerberos authentication. The command creates a keytab file with all encryption types and sets the userPrincipalName.

LANGUAGE: bash
CODE:
ktpass /out <outfile.keytab> /princ <spn>@<KERBEROS REALM> /mapuser <current userPrincipalName> /crypto ALL /ptype KRB5_NT_PRINCIPAL +rndpass

----------------------------------------

TITLE: Inserting Order Data with Embedded Products in MongoDB
DESCRIPTION: Inserts a sample order document with embedded product information into the 'orders' collection in MongoDB.

LANGUAGE: javascript
CODE:
db.orders.insertOne( {
   orderId: 789,
   customerId: 123,
   totalPrice: 45,
   date: ISODate("2023-05-22"),
   lineItems: [
       {
          productId: 456,
          product: "sweater",
          price: 30,
          size: "L"
       },
       {
          productId: 809,
          product: "t-shirt",
          price: 10,
          size: "M"
       },
       {
          productId: 910,
          product: "socks",
          price: 5,
          size: "S"
       }
   ]
} )

----------------------------------------

TITLE: Stepping Down MongoDB Replica Set Primary
DESCRIPTION: Uses the rs.stepDown() method to step down the current primary in a MongoDB replica set. This is done before shutting down and restarting the primary node.

LANGUAGE: javascript
CODE:
rs.stepDown()

----------------------------------------

TITLE: Delete Command Basic Syntax
DESCRIPTION: Demonstrates the fundamental syntax structure of the MongoDB delete command including required and optional fields.

LANGUAGE: javascript
CODE:
db.runCommand(
   {
     delete: <collection>, 
     deletes: [
        { 
          q : <query>, 
          limit : <integer>, 
          collation: <document>,
          hint: <document|string>
        },
        ...
     ],
     comment: <any>,
     let: <document>, // Added in MongoDB 5.0
     ordered: <boolean>,
     writeConcern: { <write concern> },
     maxTimeMS: <integer>
  }
)

----------------------------------------

TITLE: Using $documents in $lookup Stage for Data Transformation in MongoDB
DESCRIPTION: Demonstrates how to use $documents within a $lookup stage to correlate documents in a collection with other data. This example transforms zip codes into city and state information.

LANGUAGE: javascript
CODE:
db.locations.aggregate(
   [
      { $match: {} },
      { $lookup:
         {
            localField: "zip",
            foreignField: "zip_id", 
            as: "city_state",
            pipeline:
              [ 
                 { $documents:
                    [
                       { zip_id: 94301, name: "Palo Alto, CA" },
                       { zip_id: 10019, name: "New York, NY" }
                    ]
                 }
              ]
         }
      }
   ]
)

----------------------------------------

TITLE: Configuring MongoDB with TLS/SSL for Testing
DESCRIPTION: These examples show how to configure a MongoDB server (mongod) to use TLS/SSL with the generated test certificates. The first example uses a PEM file, while the second uses a certificate selector for macOS Keychain Access.

LANGUAGE: javascript
CODE:
mongod --tlsMode requireTLS --tlsCertificateKeyFile test-server1.pem  --tlsCAFile test-ca.pem

mongod --tlsMode requireTLS --tlsCertificateSelector subject="<TestServerCertificateCommonName>"

----------------------------------------

TITLE: Defining $max Update Operator in MongoDB
DESCRIPTION: The $max operator updates the value of a field to a specified value if the specified value is greater than the current value of the field. It can compare values of different types using the BSON comparison order.

LANGUAGE: javascript
CODE:
{ $max: { <field1>: <value1>, ... } }

----------------------------------------

TITLE: Creating OpenSSL Configuration for MongoDB Test CA
DESCRIPTION: OpenSSL configuration file that defines the certificate policies, requirements, and extensions for generating test CA certificates. Includes settings for key size, signature algorithm, and certificate constraints.

LANGUAGE: cfg
CODE:
# NOT FOR PRODUCTION USE. OpenSSL configuration file for testing. 

# For the CA policy
[ policy_match ]
countryName = match
stateOrProvinceName = match
organizationName = match
organizationalUnitName = optional
commonName = supplied
emailAddress = optional

[ req ]
default_bits = 4096
default_keyfile = myTestCertificateKey.pem    ## The default private key file name. 
default_md = sha256                           ## Use SHA-256 for Signatures
distinguished_name = req_dn
req_extensions = v3_req
x509_extensions = v3_ca # The extensions to add to the self signed cert

[ v3_req ]
subjectKeyIdentifier  = hash
basicConstraints = CA:FALSE
keyUsage = critical, digitalSignature, keyEncipherment
nsComment = "OpenSSL Generated Certificate for TESTING only.  NOT FOR PRODUCTION USE."
extendedKeyUsage  = serverAuth, clientAuth

[ req_dn ]
countryName = Country Name (2 letter code)
countryName_default = 
countryName_min = 2
countryName_max = 2

stateOrProvinceName = State or Province Name (full name)
stateOrProvinceName_default = TestCertificateStateName 
stateOrProvinceName_max = 64

localityName = Locality Name (eg, city)
localityName_default = TestCertificateLocalityName
localityName_max = 64

organizationName = Organization Name (eg, company)
organizationName_default = TestCertificateOrgName
organizationName_max = 64

organizationalUnitName = Organizational Unit Name (eg, section)
organizationalUnitName_default = TestCertificateOrgUnitName 
organizationalUnitName_max = 64

commonName = Common Name (eg, YOUR name)
commonName_max = 64

[ v3_ca ]
# Extensions for a typical CA

subjectKeyIdentifier=hash
basicConstraints = critical,CA:true
authorityKeyIdentifier=keyid:always,issuer:always

----------------------------------------

TITLE: Remove Multiple Values from Arrays using $pull
DESCRIPTION: Shows how to remove specific fruits and vegetables from arrays using $pull with both single values and $in operator.

LANGUAGE: javascript
CODE:
db.stores.updateMany(
    { },
    { $pull: { fruits: { $in: [ "apples", "oranges" ] }, vegetables: "carrots" } }
)

----------------------------------------

TITLE: MongoDB $queryStats Default Log Output Example
DESCRIPTION: Example showing the default log format when $queryStats output is omitted. Shows basic logging structure with timestamp, context, and command specification.

LANGUAGE: javascript
CODE:
{
  "t":{"$date":"2023-11-27T20:58:59.212+00:00"},"s":"D1", "c":"QRYSTATS",
  "id":7808300, "ctx":"conn31","msg":"Logging invocation
  $queryStats","attr":{"commandSpec":{"transformIdentifiers":{"algorithm":"hmac-sha-256","hmacKey":"###"}}
}

----------------------------------------

TITLE: Basic CRUD Operations (SQL vs MongoDB)
DESCRIPTION: Comparison of basic CRUD (Create, Read, Update, Delete) operations between SQL and MongoDB syntax.

LANGUAGE: sql
CODE:
INSERT INTO people(user_id, age, status)
VALUES ("bcd001", 45, "A")

LANGUAGE: javascript
CODE:
db.people.insertOne(
   { user_id: "bcd001", age: 45, status: "A" }
)

----------------------------------------

TITLE: Creating Vector Search Index
DESCRIPTION: Example of creating a vector search index with specific dimension and similarity settings.

LANGUAGE: javascript
CODE:
db.runCommand( {
   createSearchIndexes: "movies",
   indexes: [
      {
         name: "vectorSearchIndex01",
         type: "vectorSearch",
         definition: {
            fields: [
               {
                  type: "vector",
                  numDimensions: 1,
                  path: "genre",
                  similarity: "cosine"
               }
            ]
         }
      }
   ]
} )

----------------------------------------

TITLE: Querying Server Command Line Options in MongoDB JavaScript
DESCRIPTION: This method returns a document containing the arguments and configuration options used to start the MongoDB instance. It wraps the getCmdLineOpts database command and is useful for inspecting the current server configuration.

LANGUAGE: javascript
CODE:
db.serverCmdLineOpts()

----------------------------------------

TITLE: Updating GNU C Library on Linux
DESCRIPTION: Commands to update the GNU C Library on RHEL/CentOS and Ubuntu/Debian systems.

LANGUAGE: bash
CODE:
sudo yum update glibc

LANGUAGE: bash
CODE:
sudo apt-get install libc6

----------------------------------------

TITLE: Running THP Disable Script
DESCRIPTION: Commands to execute the script and verify THP settings on different Linux distributions.

LANGUAGE: sh
CODE:
sudo /etc/init.d/disable-transparent-hugepages start

LANGUAGE: sh
CODE:
cat /sys/kernel/mm/transparent_hugepage/enabled && cat /sys/kernel/mm/transparent_hugepage/defrag

LANGUAGE: sh
CODE:
cat /sys/kernel/mm/redhat_transparent_hugepage/enabled && cat /sys/kernel/mm/redhat_transparent_hugepage/defrag

----------------------------------------

TITLE: Initializing a Replica Set with Custom Configuration in MongoDB
DESCRIPTION: This snippet shows how to create a more complex replica set configuration, including an arbiter node. It demonstrates assigning the config to a variable and using the rs.initiate() helper method to initialize the set.

LANGUAGE: javascript
CODE:
config = {
    _id : "my_replica_set",
     members : [
         {_id : 0, host : "rs1.example.net:27017"},
         {_id : 1, host : "rs2.example.net:27017"},
         {_id : 2, host : "rs3.example.net", arbiterOnly: true},
     ]
}

rs.initiate(config)

----------------------------------------

TITLE: Enabling MongoDB 7.0 Features
DESCRIPTION: This command sets the feature compatibility version to 7.0, enabling new features. It should be run on the primary after all members have been upgraded.

LANGUAGE: javascript
CODE:
db.adminCommand( { setFeatureCompatibilityVersion: "7.0" } )

----------------------------------------

TITLE: $replaceAll Aggregation Pipeline Example
DESCRIPTION: Shows how to use $replaceAll within an aggregation pipeline to replace string patterns.

LANGUAGE: javascript
CODE:
db.myColl.aggregate([
  {
    $addFields:
      {
        resultObject: { $replaceAll: { input: "$name", find: "Cafe", replacement: "CAFE" } }
      }
  }
])

----------------------------------------

TITLE: Querying Shard Distribution in MongoDB
DESCRIPTION: This method prints the data distribution statistics for a sharded collection in MongoDB. It requires no parameters and returns detailed information about data size, document count, and chunk distribution across shards.

LANGUAGE: javascript
CODE:
db.collection.getShardDistribution()

----------------------------------------

TITLE: Setting allowDiskUseByDefault Parameter in MongoDB Configuration
DESCRIPTION: This snippet shows how to set the allowDiskUseByDefault parameter to true or false, which controls whether pipeline stages automatically write temporary files to disk when exceeding 100 MB of memory usage.

LANGUAGE: plaintext
CODE:
allowDiskUseByDefault: true

LANGUAGE: plaintext
CODE:
allowDiskUseByDefault: false

----------------------------------------

TITLE: Configuring Custom KMS Provider Name in MongoDB
DESCRIPTION: Example of configuring a KMS provider with a custom name 'my_kms_provider' using the local KMS provider type. The configuration includes specifying a local Customer Master Key (CMK).

LANGUAGE: json
CODE:
{
    "local:my_kms_provider": {
       { "key" : "<local CMK>" }
    },
}

----------------------------------------

TITLE: Debian/Ubuntu Repository Setup and Installation
DESCRIPTION: Series of commands to set up the libmongocrypt repository and install the package on Debian/Ubuntu systems

LANGUAGE: sh
CODE:
sudo sh -c 'curl -s --location https://pgp.mongodb.com/libmongocrypt.asc | gpg --dearmor >/etc/apt/trusted.gpg.d/libmongocrypt.gpg'

LANGUAGE: sh
CODE:
echo "deb https://libmongocrypt.s3.amazonaws.com/apt/debian <release>/libmongocrypt/{+libmongocrypt-version+} main" | sudo tee /etc/apt/sources.list.d/libmongocrypt.list

LANGUAGE: sh
CODE:
sudo apt-get update

LANGUAGE: sh
CODE:
sudo apt-get install -y libmongocrypt-dev

----------------------------------------

TITLE: Starting MongoDB with Configuration File
DESCRIPTION: Command to start MongoDB server using a configuration file

LANGUAGE: bash
CODE:
mongod -f <path/to/myconfig.conf>

----------------------------------------

TITLE: Retrieving Single Value from MongoDB db.stats()
DESCRIPTION: These examples show how to return a single value from the db.stats() output, specifically the indexSize. The first line returns the raw value, while the second line returns the scaled value in kilobytes.

LANGUAGE: javascript
CODE:
db.stats().indexSize
db.stats(1024).indexSize

----------------------------------------

TITLE: Performing a Bulk Delete Operation in MongoDB
DESCRIPTION: This example initializes a Bulk operations builder, searches for documents with the genre 'pop', and removes the first matching document using removeOne(). It demonstrates the usage of Bulk.find.removeOne() within a bulk operation.

LANGUAGE: javascript
CODE:
var bulk = db.music.initializeOrderedBulkOp();
bulk.find( { "genre": "pop" } ).removeOne();
bulk.execute()

----------------------------------------

TITLE: Configuring ShardingTest Parameters in JavaScript
DESCRIPTION: Demonstrates an issue with merging multiple SetParameters in ShardingTest.js, which was fixed in this release.

LANGUAGE: javascript
CODE:
ShardingTest.js

----------------------------------------

TITLE: Vector Search Index Creation in MongoDB
DESCRIPTION: Creates a vector search index named 'vectorSearchIndex01' on the movies collection, configuring a single-dimension vector index on the genre field using cosine similarity.

LANGUAGE: javascript
CODE:
db.movies.createSearchIndex(
   "vectorSearchIndex01",
   "vectorSearch",
   {
      fields: [
         {
            type: "vector",
            numDimensions: 1,
            path: "genre",
            similarity: "cosine"
         }
      ]
   }
)

----------------------------------------

TITLE: Creating a Data Encryption Key for MongoDB CSFLE
DESCRIPTION: This snippet shows how to create a Data Encryption Key (DEK) for Client-Side Field Level Encryption. It involves constructing a client with the MongoDB connection string and key vault namespace, then using it to generate a new DEK.

LANGUAGE: go
CODE:
keyVaultClient, err := mongo.Connect(context.TODO(), options.Client().ApplyURI(uri))
if err != nil {
    log.Fatal(err)
}
defer keyVaultClient.Disconnect(context.TODO())

clientEncryptionOpts := options.ClientEncryption().SetKeyVaultNamespace(keyVaultNamespace).SetKmsProviders(kmsProviders)
clientEncryption, err := mongo.NewClientEncryption(keyVaultClient, clientEncryptionOpts)
if err != nil {
    log.Fatal(err)
}
defer clientEncryption.Close(context.TODO())

dataKeyOpts := options.DataKey().SetMasterKey(bson.M{"provider": "local"})
dataKeyID, err := clientEncryption.CreateDataKey(context.TODO(), "local", dataKeyOpts)
if err != nil {
    log.Fatal(err)
}

log.Printf("DataKeyId [base64]: %s", base64.StdEncoding.EncodeToString(dataKeyID.Data))

LANGUAGE: java
CODE:
MongoClient keyVaultClient = MongoClients.create(connectionString);
ClientEncryptionSettings clientEncryptionSettings = ClientEncryptionSettings.builder()
        .keyVaultMongoClientSettings(MongoClientSettings.builder()
                .applyConnectionString(new ConnectionString(connectionString))
                .build())
        .keyVaultNamespace(keyVaultNamespace)
        .kmsProviders(kmsProviders)
        .build();

ClientEncryption clientEncryption = ClientEncryptions.create(clientEncryptionSettings);

BsonBinary dataKeyId = clientEncryption.createDataKey("local", new DataKeyOptions());

System.out.println("DataKeyId [base64]: " + Base64.getEncoder().encodeToString(dataKeyId.getData()));

LANGUAGE: javascript
CODE:
const { MongoClient, ClientEncryption } = require('mongodb');

const keyVaultDatabase = 'encryption';
const keyVaultCollection = '__keyVault';
const keyVaultNamespace = `${keyVaultDatabase}.${keyVaultCollection}`;

const uri = '<Your MongoDB URI>';

const keyVaultClient = new MongoClient(uri);
const clientEncryption = new ClientEncryption(keyVaultClient, {
  keyVaultNamespace,
  kmsProviders
});

await keyVaultClient.connect();

const dataKeyId = await clientEncryption.createDataKey('local');

console.log('DataKeyId [base64]: ', dataKeyId.toString('base64'));

await keyVaultClient.close();

LANGUAGE: python
CODE:
from pymongo import MongoClient
from pymongo.encryption import ClientEncryption
import base64

key_vault_namespace = "encryption.__keyVault"

key_vault_client = MongoClient("<Your MongoDB URI>")

client_encryption = ClientEncryption(
    kms_providers,
    key_vault_namespace,
    key_vault_client,
    # The CodecOptions class used for encrypting and decrypting.
    # This should be the same CodecOptions instance you have configured
    # on MongoClient, Database, or Collection.
    key_vault_client.codec_options)

data_key_id = client_encryption.create_data_key('local')

print("DataKeyId [base64]: ", base64.b64encode(data_key_id).decode('utf-8'))

LANGUAGE: csharp
CODE:
var connectionString = "<Your MongoDB URI>";
var keyVaultNamespace = "encryption.__keyVault";

var clientSettings = MongoClientSettings.FromConnectionString(connectionString);
var keyVaultClient = new MongoClient(clientSettings);

var clientEncryptionOptions = new ClientEncryptionOptions(
    keyVaultClient,
    keyVaultNamespace,
    kmsProviders: kmsProviders);

using var clientEncryption = new ClientEncryption(clientEncryptionOptions);

var dataKeyId = clientEncryption.CreateDataKey("local", new DataKeyOptions());

Console.WriteLine($"DataKeyId [base64]: {Convert.ToBase64String(dataKeyId.ToByteArray())}");

----------------------------------------

TITLE: Dry Run Compact Command in MongoDB
DESCRIPTION: Example of performing a dry run of the compact command to estimate space savings without actually performing compaction.

LANGUAGE: javascript
CODE:
db.runCommand( {
   compact: "movies",
   dryRun: true
} )

----------------------------------------

TITLE: Combining $nor with $exists Operator in MongoDB Query
DESCRIPTION: Demonstrates a MongoDB query that combines $nor with $exists. This query returns documents where price is not 1.99 and sale is not true, explicitly excluding documents where these fields are missing.

LANGUAGE: javascript
CODE:
db.inventory.find( { $nor: [ { price: 1.99 }, { price: { $exists: false } },
                                { sale: true }, { sale: { $exists: false } } ] } )

----------------------------------------

TITLE: Clearing MongoDB Plan Cache
DESCRIPTION: Example showing how to clear all cached query plans for a collection using the clear() method.

LANGUAGE: javascript
CODE:
db.collection.getPlanCache().clear()

----------------------------------------

TITLE: Covered Query on Embedded Field in MongoDB
DESCRIPTION: This snippet shows a covered query on the 'userdata' collection, querying and projecting the embedded field 'user.login'. The query can be satisfied entirely by the index on 'user.login'.

LANGUAGE: javascript
CODE:
db.userdata.find(
   { "user.login": "tester" },
   { "user.login": 1, _id: 0 }
)

----------------------------------------

TITLE: RST Directives for MongoDB SUSE Installation Guide
DESCRIPTION: ReStructuredText directives and replacements defining page metadata, navigation structure, and common text substitutions for the MongoDB SUSE installation documentation.

LANGUAGE: rst
CODE:
.. meta::
   :keywords: on-prem

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: twocols

.. |arrow| unicode:: U+27A4
.. |edition| replace:: Community
.. |package-name| replace:: ``{+package-name-org+}``
.. |distro-name| replace:: SUSE
.. |package-manager| replace:: ``zypper``
.. |executable-name| replace:: ``mongod``
.. |mdb-download-link| replace:: `MongoDB Download Center <https://www.mongodb.com/try/download/community?tck=docs_server>`__

----------------------------------------

TITLE: Defining PRIMARY State in MongoDB Replica Set
DESCRIPTION: Describes the PRIMARY state in a MongoDB replica set. This state accepts write operations and there can be at most one primary at a time. Members in this state are eligible to vote.

LANGUAGE: rst
CODE:
.. replstate:: PRIMARY

   Members in :replstate:`PRIMARY` state accept write operations. A replica set has at most
   one primary at a time. [#edge-cases-2-primaries]_ A :replstate:`SECONDARY` member becomes primary
   after an :ref:`election <replica-set-elections>`. Members in the :replstate:`PRIMARY`
   state are eligible to vote.

----------------------------------------

TITLE: Inserting Encrypted Document with CSFLE in Python
DESCRIPTION: Python code snippet for inserting a Client-Side Field Level Encrypted document into MongoDB. Uses a CSFLE-enabled MongoClient to insert the document into the 'medicalRecords.patients' namespace.

LANGUAGE: python
CODE:
collection.insert_one({
    "firstName": "Jon",
    "lastName": "Doe",
    "patientId": 12345678,
    "address": "157 Electric Ave.",
    "patientRecord": {
        "ssn": 987654321,
        "billing": {
            "type": "Visa",
            "number": "4111111111111111"
        }
    }
})

----------------------------------------

TITLE: MongoDB Driver Documentation Structure in RST
DESCRIPTION: ReStructuredText markup defining a wayfinding navigation structure for MongoDB driver documentation, organizing links by programming language and implementation type.

LANGUAGE: restructuredtext
CODE:
.. wayfinding:: MongoDB with drivers
   
   .. wayfinding-description::

      .. include:: /includes/wayfinding-description.rst

   .. wayfinding-option:: https://www.mongodb.com/docs/drivers/java/sync/current/usage-examples/distinct/
      :id: java-sync

   .. wayfinding-option:: https://mongodb.github.io/mongo-java-driver/5.1/apidocs/mongodb-driver-reactivestreams/com/mongodb/reactivestreams/client/MongoCollection.html#distinct(java.lang.String,java.lang.Class)
      :id: java-rs

   .. wayfinding-option:: https://www.mongodb.com/docs/drivers/csharp/current/quick-reference/#quick-reference
      :id: csharp

----------------------------------------

TITLE: Defining MongoDB Version Replacement Variables in reStructuredText
DESCRIPTION: Defines replacement variables for MongoDB version numbers, series names, compatibility notes, upgrade paths, and related information. These variables are used to maintain consistency across documentation and simplify version-specific updates.

LANGUAGE: reStructuredText
CODE:
.. |newversion| replace:: 4.0
.. |newseries| replace:: 4.0-series
.. |oldversion| replace:: 3.6
.. |oldseries| replace:: 3.6-series
.. |olderseries| replace:: 3.4-series
.. |compatibility| replace:: 4.0 Compatibility Notes
.. |upgradefirst| replace:: upgrade first to 3.6 
.. |downgradepath| replace:: Once upgraded to |newversion|, if you need to downgrade, we recommend |downgrading| to the latest patch release of |oldversion|.
.. |features| replace:: features 

.. |installationdoc| replace:: :v4.0:`4.0 installation instructions </installation>`

----------------------------------------

TITLE: MongoDB Repair Command Usage Warning
DESCRIPTION: Command line options for MongoDB repair operations, including the repair flag and dbpath specification. These commands should be used with extreme caution as they can result in data loss.

LANGUAGE: shell
CODE:
mongod --repair

LANGUAGE: shell
CODE:
mongod --dbpath

----------------------------------------

TITLE: Viewing Index Usage Statistics in MongoDB
DESCRIPTION: Uses the $indexStats aggregation pipeline to view the indexes used in the previous bulk operations.

LANGUAGE: javascript
CODE:
db.orders.aggregate( [ { $indexStats: { } }, { $sort: { name: 1 } } ] )

----------------------------------------

TITLE: Re-wrapping Data Encryption Keys using KeyVault in MongoDB
DESCRIPTION: This code snippet demonstrates how to use the KeyVault.rewrapManyDataKey() method to re-wrap existing Data Encryption Keys (DEKs) with a new Customer Master Key (CMK) in MongoDB. This process allows for seamless key rotation without interrupting the application.

LANGUAGE: javascript
CODE:
KeyVault.rewrapManyDataKey()

----------------------------------------

TITLE: Configuring Query Analyzer for MongoDB Collection in JavaScript
DESCRIPTION: This snippet demonstrates the syntax for using the db.collection.configureQueryAnalyzer() method. It takes an options object as an argument, which includes the mode and samplesPerSecond fields to configure the query analyzer.

LANGUAGE: javascript
CODE:
db.collection.configureQueryAnalyzer( 
   {
     mode: <string>,
     samplesPerSecond: <double>
   } 
)

----------------------------------------

TITLE: Syntax for $linearFill Operator in MongoDB Aggregation
DESCRIPTION: Demonstrates the basic syntax for using the $linearFill operator within a MongoDB aggregation pipeline.

LANGUAGE: javascript
CODE:
{ $linearFill: <expression> }

----------------------------------------

TITLE: Querying Remaining Documents in Batch with MongoDB Cursor Method
DESCRIPTION: The cursor.objsLeftInBatch() method returns the number of documents remaining in the current batch of a MongoDB cursor. This method is useful for understanding the state of the cursor and potentially optimizing data retrieval operations. It works with MongoDB's batch-based response system, where multiple batches may be required to retrieve all documents from a cursor.

LANGUAGE: javascript
CODE:
cursor.objsLeftInBatch()

----------------------------------------

TITLE: Empty Result Set Example with $count
DESCRIPTION: Shows how $count behaves with an empty input set. This example demonstrates that no result is returned when no documents match the criteria.

LANGUAGE: javascript
CODE:
db.scores.aggregate( [
   { $match: { score: { $gt: 99 } } },
   { $count: "high_scores" }
] )

----------------------------------------

TITLE: Inserting Sample Documents in MongoDB Collection
DESCRIPTION: Example showing how to insert multiple documents into a collection for demonstrating index statistics.

LANGUAGE: javascript
CODE:
db.orders.insertMany( [
   { _id : 1, item : "abc", price : 12, quantity : 2, type: "apparel" },
   { _id : 2, item : "jkl", price : 20, quantity : 1, type: "electronics" },
   { _id : 3, item : "abc", price : 10, quantity : 5, type: "apparel" }
] )

----------------------------------------

TITLE: Updating a Single Document with bulkWrite() in MongoDB
DESCRIPTION: Shows the syntax for using the updateOne operation within bulkWrite() to update a single document matching a filter.

LANGUAGE: javascript
CODE:
db.collection.bulkWrite( [
   { updateOne :
      {
         "filter": <document>,
         "update": <document or pipeline>, 
         "upsert": <boolean>,
         "collation": <document>,  
         "arrayFilters": [ <filterdocument1>, ... ], 
         "hint": <document|string> 
      }
   }
] )

----------------------------------------

TITLE: Documentation Structure Definition in RST
DESCRIPTION: ReStructuredText markup defining the documentation structure for WiredTiger configuration guides, including table of contents and page hierarchy.

LANGUAGE: rst
CODE:
.. _self-managed-storage-wiredtiger:

========================================
WiredTiger for a Self-Managed Deployment
========================================

.. default-domain:: mongodb

.. toctree::
   :titlesonly:
   :hidden:

   Convert Standalone </tutorial/change-standalone-wiredtiger.txt>
   Convert Replica Set </tutorial/change-replica-set-wiredtiger.txt>
   Convert Sharded Cluster </tutorial/change-sharded-cluster-wiredtiger.txt>

----------------------------------------

TITLE: Basic $setWindowFields Syntax
DESCRIPTION: Demonstrates the basic syntax structure for the $setWindowFields stage with window operations

LANGUAGE: none
CODE:
{
   $setWindowFields: {
      partitionBy: <expression>,
      sortBy: {
         <sort field 1>: <sort order>,
         <sort field 2>: <sort order>,
         ...,
         <sort field n>: <sort order>
      },
      output: {
         <output field 1>: {
            <window operator>: <window operator parameters>,
            window: {
               documents: [ <lower boundary>, <upper boundary> ],
               range: [ <lower boundary>, <upper boundary> ],
               unit: <time unit>
            }
         },
         <output field 2>: { ... },
         ...
         <output field n>: { ... }
      }
   }
}

----------------------------------------

TITLE: MongoDB Collection Sample Data
DESCRIPTION: Example document structure showing inventory items with quarter and description fields used to demonstrate $substr functionality.

LANGUAGE: javascript
CODE:
{ "_id" : 1, "item" : "ABC1", quarter: "13Q1", "description" : "product 1" }
{ "_id" : 2, "item" : "ABC2", quarter: "13Q4", "description" : "product 2" }
{ "_id" : 3, "item" : "XYZ1", quarter: "14Q2", "description" : null }

----------------------------------------

TITLE: Results of $rtrim Operation in MongoDB Aggregation
DESCRIPTION: Shows the expected output after applying the $rtrim operator to remove trailing whitespace from the 'description' field in the inventory collection documents.

LANGUAGE: javascript
CODE:
{ "_id" : 1, "item" : "ABC1", "description" : " product 1" }
{ "_id" : 2, "item" : "ABC2", "description" : "product 2 \n The product is in stock." }
{ "_id" : 3, "item" : "XYZ1", "description" : null }

----------------------------------------

TITLE: Single-Byte Character Aggregation Pipeline
DESCRIPTION: Aggregation pipeline that splits quarter values into year and quarter substrings using $substrCP.

LANGUAGE: javascript
CODE:
db.inventory.aggregate(
  [
    {
      $project: {
        item: 1,
        yearSubstring: { $substrCP: [ "$quarter", 0, 2 ] },
        quarterSubtring: { 
          $substrCP: [ 
            "$quarter", 2, { $subtract: [ { $strLenCP: "$quarter" }, 2 ] } 
          ]
        }
      }
    }
  ]
)

----------------------------------------

TITLE: Setting Active Fault Duration in MongoDB Config File
DESCRIPTION: This snippet shows how to set the 'activeFaultDurationSecs' parameter to 300 seconds in the mongos config file for persistent configuration across restarts.

LANGUAGE: yaml
CODE:
setParameter:
   activeFaultDurationSecs: 300

----------------------------------------

TITLE: Connecting to MongoDB using shell
DESCRIPTION: This snippet demonstrates how to connect to a MongoDB database using the mongosh shell. It specifies the connection URL, API version, and username for authentication.

LANGUAGE: bash
CODE:
mongosh "mongodb://localhost/records" --apiVersion 1 --username myDatabaseUser

----------------------------------------

TITLE: Valid Wildcard Index with Projection in MongoDB
DESCRIPTION: This example shows a valid wildcard index definition using the $** operator and the wildcardProjection option to include specific fields in the index.

LANGUAGE: javascript
CODE:
{
    key: { "$**": 1 },
    name: "index_all_with_projection",
    wildcardProjection: {
       "someFields.name": 1,
       "otherFields.values": 1
    }
}

----------------------------------------

TITLE: Query Single Role
DESCRIPTION: Examples of querying information for a single role, showing different ways to specify the role.

LANGUAGE: javascript
CODE:
{ rolesInfo: "<rolename>" }

LANGUAGE: javascript
CODE:
{ rolesInfo: { role: "<rolename>", db: "<database>" } }

----------------------------------------

TITLE: MongoDB Shell Connection with Authentication
DESCRIPTION: Demonstrates connecting to MongoDB using mongosh with authentication credentials via Unix domain socket. Includes API version specification and explicit username.

LANGUAGE: bash
CODE:
mongosh "mongodb://myDatabaseUser:D1fficultP%40ssw0rd@%2Ftmp%2Fmongodb-27017.sock" --apiVersion 1 --username myDatabaseUser

----------------------------------------

TITLE: Syntax for $atan Aggregation Operator in MongoDB
DESCRIPTION: Demonstrates the basic syntax for using the $atan operator in a MongoDB aggregation pipeline. The operator takes an expression that resolves to a number and returns the inverse tangent.

LANGUAGE: javascript
CODE:
{ $atan: <expression> }

----------------------------------------

TITLE: Defining $toLong Syntax in MongoDB Aggregation
DESCRIPTION: Shows the basic syntax for using the $toLong operator in a MongoDB aggregation pipeline.

LANGUAGE: javascript
CODE:
{
   $toLong: <expression>
}

----------------------------------------

TITLE: Updating Document with $unset in MongoDB using JavaScript
DESCRIPTION: Uses the updateOne() method to remove the 'quantity' and 'instock' fields from the first document where the 'sku' is 'unknown'. This example demonstrates practical usage of the $unset operator.

LANGUAGE: javascript
CODE:
db.products.updateOne(
   { sku: "unknown" },
   { $unset: { quantity: "", instock: "" } }
)

----------------------------------------

TITLE: Adding Persisted Tags to Shards in MongoDB (JavaScript)
DESCRIPTION: JavaScript commands to add 'persisted' tags to shards in a MongoDB cluster. This adds the tag to shards named 'shardA' and 'shardB'.

LANGUAGE: javascript
CODE:
sh.addShardTag("shardA", "persisted")
sh.addShardTag("shardB", "persisted")

----------------------------------------

TITLE: Configuring MongoDB Client for CSFLE with GCP KMS
DESCRIPTION: This code configures a MongoDB client with automatic encryption settings using a GCP KMS provider. It sets up the key vault namespace and schema map for encrypted fields.

LANGUAGE: javascript
CODE:
const autoEncryptionOpts = {
  kmsProviders: {
    gcp: { email: serviceAccountEmail, privateKey: privateKey }
  },
  keyVaultNamespace: "encryption.__keyVault",
  schemaMap: {
    "medicalRecords.patients": {
      bsonType: "object",
      properties: {
        ssn: {
          encrypt: {
            bsonType: "string",
            algorithm: "AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic",
            keyId: [new Binary(Buffer.from(base64KeyId, "base64"), 4)]
          }
        },
        bloodType: {
          encrypt: {
            bsonType: "string",
            algorithm: "AEAD_AES_256_CBC_HMAC_SHA_512-Random",
            keyId: [new Binary(Buffer.from(base64KeyId, "base64"), 4)]
          }
        }
      }
    }
  }
};

----------------------------------------

TITLE: Creating MongoDB Log Directory
DESCRIPTION: Bash commands to create and configure directories for MongoDB log files with proper permissions.

LANGUAGE: bash
CODE:
sudo mkdir /path/to/mongodb/logs
sudo chown -R mongodb:mongodb /path/to/mongodb/logs
sudo chmod -R 770 /path/to/mongodb/logs

----------------------------------------

TITLE: Forcing Replica Set Shutdown in MongoDB
DESCRIPTION: Shows how to force a shutdown of a MongoDB replica set primary using the shutdown command with the force option.

LANGUAGE: javascript
CODE:
db.adminCommand({shutdown : 1, force : true})

----------------------------------------

TITLE: Specifying Key Information for MongoDB Queryable Encryption with GCP KMS
DESCRIPTION: This code defines the options for creating a data encryption key using GCP KMS. It specifies the master key's project ID, location, key ring, and key name.

LANGUAGE: javascript
CODE:
const dataKeyOptions = {
  masterKey: {
    projectId: "<Your GCP project ID>",
    location: "<Your GCP key location>",
    keyRing: "<Your GCP key ring>",
    keyName: "<Your GCP key name>"
  },
  keyAltNames: ["<Key alt name>"],
};

----------------------------------------

TITLE: MongoDB $eq Operator Example Output
DESCRIPTION: The result set showing the comparison output where qtyEq250 field indicates whether each document's qty equals 250.

LANGUAGE: javascript
CODE:
{ item : "abc1", qty : 300, qtyEq250 : false }
{ item : "abc2", qty : 200, qtyEq250 : false }
{ item : "xyz1", qty : 250, qtyEq250 : true }
{ item : "VWZ1", qty : 300, qtyEq250 : false }
{ item : "VWZ2", qty : 180, qtyEq250 : false }

----------------------------------------

TITLE: Verifying Collection Shard Status in MongoDB
DESCRIPTION: Method to check the sharding status of collections and verify that the unsharding operation has been stopped. Shows the collection's shard key and chunk distribution.

LANGUAGE: javascript
CODE:
sh.status()

LANGUAGE: javascript
CODE:
collections: {
   'sales.us_accounts': {
      shardKey: { account_number: 1 },
      unique: false,
      balancing: true,
      chunkMetadata: [
        { shard: 'shard-0', nChunks: 1 },
        { shard: 'shard-1', nChunks: 1 }
      ],
      chunks: [
        { min: { _id: MinKey() }, max: { _id: Long('0') }, 'on shard': 'shard-0', 'last modified': Timestamp({ t: 1, i: 0 }) },
        { min: { _id: Long('0') }, max: { _id: MaxKey() }, 'on shard': 'shard-1', 'last modified': Timestamp({ t: 1, i: 1 }) }
      ], 
      ... }
    ... }

----------------------------------------

TITLE: Retrieving Parameter Details in MongoDB
DESCRIPTION: This example demonstrates how to retrieve detailed information about a specific parameter (saslHostName) using the getParameter command with the showDetails option in MongoDB.

LANGUAGE: javascript
CODE:
db.adminCommand( { getParameter : { showDetails: true }, "saslHostName" : 1 } )

----------------------------------------

TITLE: Testing Map Function with Multiple Documents in MongoDB
DESCRIPTION: Shows how to apply the map function to multiple documents retrieved from the 'orders' collection using a cursor and a while loop.

LANGUAGE: javascript
CODE:
var myCursor = db.orders.find( { cust_id: "abc123" } );

while (myCursor.hasNext()) {
    var doc = myCursor.next();
    print ("document _id= " + tojson(doc._id));
    map.apply(doc);
    print();
}

----------------------------------------

TITLE: Executing clearJumboFlag Command in MongoDB
DESCRIPTION: Syntax for executing the clearJumboFlag command on a mongos instance. It clears the jumbo flag for a chunk in a sharded collection. The command requires specifying the namespace and either bounds or find criteria.

LANGUAGE: javascript
CODE:
db.adminCommand( 
   {
     clearJumboFlag: "<database>.<collection>",
     bounds: <array>
   } 
)

LANGUAGE: javascript
CODE:
// Cannot use for collections with hashed shard keys

db.adminCommand( 
   {
     clearJumboFlag: "<database>.<collection>",
     find: <query>
   } 
)

----------------------------------------

TITLE: Renaming Multiple Fields in MongoDB
DESCRIPTION: Example of using the $rename operator to rename multiple fields ('nickname' to 'alias' and 'cell' to 'mobile') in a single update operation.

LANGUAGE: javascript
CODE:
db.students.updateOne(
   { _id: 1 }, { $rename: { 'nickname': 'alias', 'cell': 'mobile' } }
)

----------------------------------------

TITLE: Replica Set Info Query
DESCRIPTION: Example showing how to get all replica set status information

LANGUAGE: javascript
CODE:
db.runCommand( { serverStatus: 1,  repl: 1 } )

----------------------------------------

TITLE: MongoDB Time Series Bucket Parameters Table in RST
DESCRIPTION: ReStructuredText formatted table defining the relationships between granularity levels (seconds, minutes, hours) and their corresponding bucket rounding and maximum span limits in seconds. Used for configuring time series collections in MongoDB.

LANGUAGE: restructuredtext
CODE:
.. list-table::
   :header-rows: 1

   * - ``granularity``
     - ``bucketRoundingSeconds`` limit (inclusive)
     - ``bucketMaxSpanSeconds`` limit (inclusive)
   * - ``seconds``
     - 60
     - 3600
   * - ``minutes``
     - 3600
     - 86400
   * - ``hours``
     - 86400
     - 2592000

----------------------------------------

TITLE: Clearing Cached Query Plan in MongoDB JavaScript
DESCRIPTION: Demonstrates how to use PlanCache.clearPlansByQuery() to remove a cached query plan for a specific shape in the 'orders' collection.

LANGUAGE: javascript
CODE:
db.orders.getPlanCache().clearPlansByQuery(
   { "qty" : { "$gt" : 10 } },
   { },
   { "ord_date" : 1 }
)

----------------------------------------

TITLE: Defining MongoDB Version and Series Variables in reStructuredText
DESCRIPTION: Sets up substitution variables for MongoDB version numbers and series names. These variables are used throughout the documentation to ensure consistency and ease updates.

LANGUAGE: reStructuredText
CODE:
.. |newversion| replace:: 7.0
.. |newseries| replace:: 7.0-series
.. |oldversion| replace:: 6.0
.. |oldseries| replace:: 6.0-series
.. |olderseries| replace:: 5.0-series

----------------------------------------

TITLE: Querying Stream Processor Statistics in MongoDB
DESCRIPTION: This snippet shows the syntax for calling the sp.processor.stats() method. It accepts an optional options object with scale and verbose parameters to customize the output.

LANGUAGE: json
CODE:
sp.processor.stats( { options: { scale: <int>, verbose: <boolean> } } )

----------------------------------------

TITLE: Re-enabling the MongoDB Balancer
DESCRIPTION: Command to re-enable the balancer in a MongoDB sharded cluster after the upgrade process is complete.

LANGUAGE: javascript
CODE:
sh.startBalancer()

----------------------------------------

TITLE: Iterating Cursor with forEach() in MongoDB Shell
DESCRIPTION: Demonstrates the basic syntax of the cursor.forEach() method in MongoDB. This method applies a JavaScript function to each document returned by the cursor.

LANGUAGE: javascript
CODE:
db.collection.find().forEach( <function> )

----------------------------------------

TITLE: Displaying Armor Data with Jinja2 Template in HTML
DESCRIPTION: Shows a Jinja2 template for rendering character armor data in HTML format.

LANGUAGE: html
CODE:
<div>
  <h2>Armor</h2>
  <dl>
    {% if value.head %}
      <dt>Helmet</dt>
      <dd>{{value.head[0].description}}</dd>
    {% endif %}
    {% if value.hands %}
      <dt>Gloves</dt>
      <dd>{{value.hands[0].description}}</dd>
    {% endif %}
    {% if value.feet %}
      <dt>Boots</dt>
      <dd>{{value.feet[0].description}}</dd>
    {% endif %}
    {% if value.body %}
      <dt>Body Armor</dt>
      <dd><ul>{% for piece in value.body %}
        <li>piece.description</li>
      {% endfor %}</ul></dd>
    {% endif %}
 </dl>
</dd>

----------------------------------------

TITLE: Creating Customer Master Key for CSFLE in Node.js
DESCRIPTION: This code snippet demonstrates how to create a 96-byte Customer Master Key and save it to the filesystem as 'master-key.txt' using Node.js. It uses the crypto module to generate random bytes.

LANGUAGE: javascript
CODE:
const fs = require("fs");
const crypto = require("crypto");

const localMasterKey = crypto.randomBytes(96);
fs.writeFileSync("master-key.txt", localMasterKey);

----------------------------------------

TITLE: MongoDB $acosh Error Message for Invalid Input
DESCRIPTION: Shows an example error message when trying to apply $acosh to an invalid value (0 in this case).

LANGUAGE: bash
CODE:
"errmsg" : 
  "Failed to optimize pipeline :: caused by :: cannot 
  apply $acosh to -inf, value must in (1,inf)"

----------------------------------------

TITLE: Resharding Collection Example
DESCRIPTION: Demonstrates resharding a collection named 'sales.orders' with a new shard key based on order_id field.

LANGUAGE: javascript
CODE:
db.adminCommand({
  reshardCollection: "sales.orders",
  key: { order_id: 1 }
})

----------------------------------------

TITLE: Creating Index in MongoDB using JavaScript
DESCRIPTION: This snippet demonstrates how to create an index on a specific field in a MongoDB collection. The createIndex method is used to define the index, specifying the field and sort order.

LANGUAGE: javascript
CODE:
db.<collection>.createIndex( { <field>: <sort-order> } )

----------------------------------------

TITLE: Basic $all Operator Syntax
DESCRIPTION: Shows the basic syntax for using the $all operator in MongoDB queries.

LANGUAGE: javascript
CODE:
{ <field>: { $all: [ <value1> , <value2> ... ] } }

----------------------------------------

TITLE: Use Variables with let Example
DESCRIPTION: An example of using findAndModify with the let option to define variables for use in the query.

LANGUAGE: javascript
CODE:
db.cakeFlavors.runCommand( {
   findAndModify: db.cakeFlavors.getName(),
   query: { $expr: { $eq: [ "$flavor", "$$targetFlavor" ] } },
   update: { flavor: "orange" },
   let: { targetFlavor: "cherry" }
} )

----------------------------------------

TITLE: Example of Aborting Resharding Operation in MongoDB
DESCRIPTION: Shows how to abort a running resharding operation on the 'sales.orders' collection using the sh.abortReshardCollection() method.

LANGUAGE: javascript
CODE:
sh.abortReshardCollection("sales.orders")

----------------------------------------

TITLE: Encrypting Objects and Arrays with Randomized Encryption in MongoDB
DESCRIPTION: Example of a document structure where entire objects (personal_information) and arrays (phone_numbers) can be encrypted using randomized encryption in MongoDB CSFLE.

LANGUAGE: json
CODE:
{
   "personal_information" : {
      "ssn" : "123-45-6789",
      "credit_score" : 750,
      "credit_cards" : [ "1234-5678-9012-3456", "9876-5432-1098-7654"]
   },
   "phone_numbers" : [ "(212) 555-0153" ]
}

----------------------------------------

TITLE: Asynchronous DeleteMany Operation in Motor MongoDB Driver
DESCRIPTION: The delete_many() coroutine in the Motor driver asynchronously returns a DeleteResult object with the status of the operation, including the count of deleted documents.

LANGUAGE: python
CODE:
await collection.delete_many()

----------------------------------------

TITLE: Using IsEven Function in Query
DESCRIPTION: Shows how to use the stored isEven function within a $where query operator to filter documents.

LANGUAGE: javascript
CODE:
db.test_numbers.find({
   $where: function () {
      return isEven(this.value);
   }
})

----------------------------------------

TITLE: Truncating Array Values Using $map
DESCRIPTION: Example demonstrating how to use $map with $trunc to convert decimal numbers to integers in an array.

LANGUAGE: javascript
CODE:
db.deliveries.insertMany( [
  {
    "city" : "Bakersfield",
    "distances" : [ 34.57, 81.96, 44.24 ]
  },
  {
    "city" : "Barstow", 
    "distances" : [ 73.28, 9.67, 124.36 ]
  },
  {
    "city" : "San Bernadino",
    "distances" : [ 16.04, 3.25, 6.82 ]
  }
] )

LANGUAGE: javascript
CODE:
db.deliveries.aggregate( [
   {
      $project: {
         city: "$city",
         integerValues: {
            $map: {
               input: "$distances",
               as: "decimalValue",
               in: { $trunc: "$$decimalValue" }
            }
         }
      }
   }
 ] )

----------------------------------------

TITLE: MongoDB $dateToParts Result Example
DESCRIPTION: Example output showing the structured results from the $dateToParts operator with different configurations.

LANGUAGE: javascript
CODE:
{
   "_id" : 2,
   "date" : {
      "year" : 2017,
      "month" : 1,
      "day" : 1,
      "hour" : 1,
      "minute" : 29,
      "second" : 9,
      "millisecond" : 123
   },
   "date_iso" : {
      "isoWeekYear" : 2016,
      "isoWeek" : 52,
      "isoDayOfWeek" : 7,
      "hour" : 1,
      "minute" : 29,
      "second" : 9,
      "millisecond" : 123
   },
   "date_timezone" : {
      "year" : 2016,
      "month" : 12,
      "day" : 31,
      "hour" : 20,
      "minute" : 29,
      "second" : 9,
      "millisecond" : 123
   }
}

----------------------------------------

TITLE: Inserting Encrypted Document with MongoDB Queryable Encryption in JavaScript (Shell)
DESCRIPTION: This snippet demonstrates how to insert an encrypted document using MongoDB's Queryable Encryption feature in the MongoDB shell. It uses a pre-configured MongoClient instance with Queryable Encryption enabled.

LANGUAGE: javascript
CODE:
// Requires a MongoClient configured with Queryable Encryption support
// Insert an encrypted document


----------------------------------------

TITLE: Querying and Sorting Using Non-Prefix Subsets of an Index in MongoDB
DESCRIPTION: These examples demonstrate how to use non-prefix subsets of a compound index for sorting, provided that equality conditions are specified for the preceding fields in the index.

LANGUAGE: javascript
CODE:
db.data.find( { a: 5 } ).sort( { b: 1, c: 1 } )

LANGUAGE: javascript
CODE:
db.data.find( { b: 3, a: 4 } ).sort( { c: 1 } )

LANGUAGE: javascript
CODE:
db.data.find( { a: 5, b: { $lt: 3} } ).sort( { b: 1 } )

----------------------------------------

TITLE: Finding Cache Entry Details for a Specific Query Hash
DESCRIPTION: Shows how to combine $planCacheStats with $match to return plan cache information for a particular query hash.

LANGUAGE: javascript
CODE:
db.orders.aggregate( [
   { $planCacheStats: { } },
   { $match: { planCacheKey: "B1435201"} }
] )

----------------------------------------

TITLE: Converting String to UUID in MongoDB
DESCRIPTION: Demonstrates how to convert a 36-character UUID string into a BSON UUID object using the UUID() method.

LANGUAGE: javascript
CODE:
var myuuid = '3b241101-e2bb-4255-8caf-4136c566a962'

LANGUAGE: javascript
CODE:
UUID(myuuid)

LANGUAGE: javascript
CODE:
UUID("3b241101-e2bb-4255-8caf-4136c566a962")

----------------------------------------

TITLE: Retrieving Read Preference Mode in MongoDB using JavaScript
DESCRIPTION: This snippet demonstrates how to use the getReadPrefMode() method to retrieve the current read preference mode for a MongoDB connection. It returns one of the following modes: primary, primaryPreferred, secondary, secondaryPreferred, or nearest.

LANGUAGE: javascript
CODE:
db.getMongo().getReadPrefMode()

----------------------------------------

TITLE: Creating User with LDAP Authentication in MongoDB
DESCRIPTION: This snippet illustrates how to create a user for LDAP authentication, specifying the username and assigning read-only access to a specific database. Note that LDAP authentication is deprecated.

LANGUAGE: javascript
CODE:
use $external
db.createUser(
    {
      user: "reporting",
      roles: [
         { role: "read", db: "records" }
      ]
    }
)

----------------------------------------

TITLE: Implementing Bucket Pattern with Identifiers in MongoDB
DESCRIPTION: Implementation of the bucket pattern with added _id and count fields. Groups trades by customerId into buckets with a maximum of 10 trades per bucket for pagination.

LANGUAGE: javascript
CODE:
db.trades.drop()

db.trades.insertMany([
  {
    "_id": "123_1698349623",
    "customerId": 123,
    "count": 2,
    "history": [
      {
        "type": "buy",
        "ticker": "MDB",
        "qty": 419,
        "date": ISODate("2023-10-26T15:47:03.434Z")
      },
      {
        "type": "sell",
        "ticker": "MDB",
        "qty": 29,
        "date": ISODate("2023-10-30T09:32:57.765Z")
      }
    ]
  },
  {
    "_id": "456_1698765362",
    "customerId": 456,
    "count": 1,
    "history": [
      {
        "type" : "buy", 
        "ticker" : "GOOG",
        "quantity" : 50, 
        "date" : ISODate("2023-10-31T11:16:02.120Z") 
      }
    ]
  }
])

----------------------------------------

TITLE: Creating Unique Index for MongoDB Queryable Encryption in Python
DESCRIPTION: This snippet shows how to create a unique index on the 'keyAltNames' field in the 'encryption.__keyVault' namespace using Python. It connects to the key vault collection and creates the index using the create_index method.

LANGUAGE: python
CODE:
key_vault_client = get_key_vault_client()
key_vault_database = key_vault_client["encryption"]
key_vault_collection = key_vault_database["__keyVault"]
key_vault_collection.create_index(
    "keyAltNames",
    unique=True,
    partialFilterExpression={"keyAltNames": {"$exists": True}},
)