TITLE: Installing Azure OpenAI and Azure Identity Modules in Go
DESCRIPTION: Commands to install the azopenai and azidentity modules using go get. These modules are required for using Azure OpenAI services and authentication in Go applications.

LANGUAGE: bash
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/ai/azopenai

# optional
go get github.com/Azure/azure-sdk-for-go/sdk/azidentity

----------------------------------------

TITLE: Configuring Azure SDK Logging in Go
DESCRIPTION: Example showing how to configure logging for Azure SDK operations including HTTP requests and responses.

LANGUAGE: go
CODE:
import azlog "github.com/Azure/azure-sdk-for-go/sdk/azcore/log"

// Print log events to stdout
azlog.SetListener(func(cls azlog.Event, msg string) {
	fmt.Println(msg)
})

// Includes only requests and responses in logs
azlog.SetEvents(azlog.EventRequest, azlog.EventResponse)

----------------------------------------

TITLE: Sending Single Message
DESCRIPTION: Demonstrates how to send a single message using the Service Bus sender

LANGUAGE: go
CODE:
err := sender.SendMessage(context.TODO(), &azservicebus.Message{
  Body: []byte("hello world!"),
}, nil)

----------------------------------------

TITLE: Writing a Go Test for Azure Table Storage
DESCRIPTION: Demonstrates how to write a test for creating a table in Azure Table Storage. This test uses the recording package to manage HTTP interactions and includes assertions using the testify/require package.

LANGUAGE: Go
CODE:
import (
	"fmt"
	"os"

	"github.com/stretchr/testify/require"
	"github.com/Azure/azure-sdk-for-go/sdk/internal/recording"
)

const accountName = os.GetEnv("TABLES_PRIMARY_ACCOUNT_NAME")

// Test creating a single table
func TestCreateTable(t *testing.T) {
	err := recording.Start(t, recordingDirectory, nil)
	require.NoError(t, err)
	defer func() {
		err := recording.Stop(t, nil)
		require.NoError(t, err)
	}()

	serviceURL := fmt.Sprintf("https://%v.table.core.windows.net", accountName)
	client, err := createClientForRecording(t, "tableName", serviceURL)
	require.NoError(t, err)

	resp, err := client.Create()
	require.NoError(t, err)
	require.Equal(t, resp.TableResponse.TableName, "tableName")
	defer client.Delete()  // Clean up resources
	..
	.. More test functionality
	..
}

----------------------------------------

TITLE: Client Initialization in Previous Version (services/**/mgmt/**)
DESCRIPTION: Examples of client initialization in the deprecated version of Azure SDK for Go.

LANGUAGE: go
CODE:
import "github.com/Azure/azure-sdk-for-go/services/compute/mgmt/2019-07-01/compute"

LANGUAGE: go
CODE:
client := compute.NewVirtualMachinesClient("<SubscriptionId>")

LANGUAGE: go
CODE:
client := compute.NewVirtualMachinesClientWithBaseURI("<Endpoint>", "<SubscriptionId>")

----------------------------------------

TITLE: Downloading a Blob in Go
DESCRIPTION: Example of downloading a blob from Azure Blob Storage to a local file using anonymous access

LANGUAGE: go
CODE:
client, err := azblob.NewClientWithNoCredential("https://azurestoragesamples.blob.core.windows.net/", nil)
// TODO: handle error

file, err := os.Create("cloud.jpg")
// TODO: handle error
defer file.Close()

_, err = client.DownloadFile(context.TODO(), "samples", "cloud.jpg", file, nil)
// TODO: handle error

----------------------------------------

TITLE: Creating a Custom Authentication Chain with ChainedTokenCredential in Go
DESCRIPTION: This example shows how to create a custom authentication flow using ChainedTokenCredential, which tries managed identity authentication before falling back to Azure CLI authentication.

LANGUAGE: go
CODE:
managed, err := azidentity.NewManagedIdentityCredential(nil)
if err != nil {
  // handle error
}
azCLI, err := azidentity.NewAzureCLICredential(nil)
if err != nil {
  // handle error
}
chain, err := azidentity.NewChainedTokenCredential([]azcore.TokenCredential{managed, azCLI}, nil)
if err != nil {
  // handle error
}

client := armresources.NewResourceGroupsClient("subscription ID", chain, nil)

----------------------------------------

TITLE: Uploading a Blob in Go
DESCRIPTION: Complete example of uploading a file to Azure Blob Storage including client setup and file handling

LANGUAGE: go
CODE:
const (
	account       = "https://MYSTORAGEACCOUNT.blob.core.windows.net/"
	containerName = "sample-container"
	blobName      = "sample-blob"
	sampleFile    = "path/to/sample/file"
)

cred, err := azidentity.NewDefaultAzureCredential(nil)
// TODO: handle error

client, err := azblob.NewClient(account, cred, nil)
// TODO: handle error

file, err := os.OpenFile(sampleFile, os.O_RDONLY, 0)
// TODO: handle error
defer file.Close()

_, err = client.UploadFile(context.TODO(), containerName, blobName, file, nil)
// TODO: handle error

----------------------------------------

TITLE: Enabling Logging for Azure Identity Debugging in Go
DESCRIPTION: This snippet demonstrates how to enable and configure logging for Azure Identity to help debug authentication issues. It sets up a listener to print log output to stdout and configures logging to include only azidentity credential logs.

LANGUAGE: Go
CODE:
import azlog "github.com/Azure/azure-sdk-for-go/sdk/azcore/log"

// print log output to stdout
azlog.SetListener(func(event azlog.Event, s string) {
    fmt.Println(s)
})

// include only azidentity credential logs
azlog.SetEvents(azidentity.EventAuthentication)

----------------------------------------

TITLE: Installing azcore Module with Go Get
DESCRIPTION: This command adds the latest version of the azcore module to your project's go.mod file. It's typically not needed to be run explicitly as azcore is usually installed as a dependency of other client modules.

LANGUAGE: bash
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/azcore

----------------------------------------

TITLE: Configuring Logging for Azure SDK in Go
DESCRIPTION: Example of how to configure logging for Azure SDK modules in Go. It demonstrates setting up a custom log listener and specifying which events to log.

LANGUAGE: go
CODE:
import azlog "github.com/Azure/azure-sdk-for-go/sdk/azcore/log"

// Print log events to stdout
azlog.SetListener(func(cls azlog.Event, msg string) {
	fmt.Println(msg)
})

// Includes only requests and responses in credential logs
azlog.SetEvents(azlog.EventRequest, azlog.EventResponse)

----------------------------------------

TITLE: Running Live Tests for AzOpenAI Module
DESCRIPTION: This command sets up the environment for live testing mode and runs the tests against the actual Azure OpenAI service.

LANGUAGE: bash
CODE:
export AZURE_RECORD_MODE=live
go test -count 1 -v ./...

----------------------------------------

TITLE: Receiving Messages
DESCRIPTION: Shows how to receive and process messages from a queue or subscription using a receiver

LANGUAGE: go
CODE:
receiver, err := client.NewReceiverForQueue(
  "<queue>",
  nil,
)

ctx, cancel := context.WithTimeout(context.TODO(), 60*time.Second)
defer cancel()

messages, err := receiver.ReceiveMessages(ctx, 1, nil)

if err != nil {
  panic(err)
}

for _, message := range messages {
  var body []byte = message.Body
  fmt.Printf("Message received with body: %s\n", string(body))

  err = receiver.CompleteMessage(context.TODO(), message, nil)

  if err != nil {
    var sbErr *azservicebus.Error

    if errors.As(err, &sbErr) && sbErr.Code == azservicebus.CodeLockLost {
      fmt.Printf("Message lock expired\n")
      continue
    }
    panic(err)
  }
  fmt.Printf("Received and completed the message\n")
}

----------------------------------------

TITLE: Sending Message Batches with azservicebus in Go
DESCRIPTION: Shows how to create and send a batch of messages using the MessageBatch type in azservicebus. It includes error handling for message size limits.

LANGUAGE: go
CODE:
messageBatch, err := sender.NewMessageBatch(context.TODO(), nil)

if err != nil {
  panic(err)
}

err = messageBatch.AddMessage(&azservicebus.Message{
    Body: []byte(fmt.Sprintf("hello world")),
}, nil)

if errors.Is(err, azservicebus.ErrMessageTooLarge) {
  fmt.Printf("Message batch is full. We should send it and create a new one.\n")

  err := sender.SendMessageBatch(context.TODO(), messageBatch, nil)

  if err != nil {
    panic(err)
  }
  
  // Create a new batch, add this message and start again.
} else if err != nil {
  panic(err)
}

----------------------------------------

TITLE: Creating Client Certificate Credential
DESCRIPTION: Example showing how to create a client certificate credential using certificate data

LANGUAGE: go
CODE:
certData, err := os.ReadFile("/cert.pem")
certs, key, err := ParseCertificates(certData, password)
cred, err := NewClientCertificateCredential(tenantID, clientID, certs, key, nil)

----------------------------------------

TITLE: Querying Metrics with azquery in Go
DESCRIPTION: This snippet demonstrates how to create a metrics client and execute a metrics query using the azquery module in the Azure SDK for Go. It includes various query options and error handling.

LANGUAGE: go
CODE:
import (
	"context"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/monitor/azquery"
)

func main() {
	// create the metrics client
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		//TODO: handle error
	}
	client, err := azquery.NewMetricsClient(cred, nil)
	if err != nil {
		//TODO: handle error
	}

	// execute the metrics query
	res, err := client.QueryResource(context.TODO(), "<resourceID>",
		&azquery.MetricsClientQueryResourceOptions{
			Timespan:        to.Ptr(azquery.NewTimeInterval(time.Date(2022, 12, 25, 0, 0, 0, 0, time.UTC), time.Date(2022, 12, 25, 12, 0, 0, 0, time.UTC))),
			Interval:        to.Ptr("PT1M"),
			MetricNames:     nil,
			Aggregation:     to.SliceOfPtrs(azquery.AggregationTypeAverage, azquery.AggregationTypeCount),
			Top:             to.Ptr[int32](3),
			OrderBy:         to.Ptr("Average asc"),
			Filter:          to.Ptr("BlobType eq '*'"),
			ResultType:      nil,
			MetricNamespace: to.Ptr("Microsoft.Storage/storageAccounts/blobServices"),
		})
	if err != nil {
		//TODO: handle error
	}
	_ = res
}

----------------------------------------

TITLE: Installing Azure SDK Packages
DESCRIPTION: Commands to install the required Azure SDK Go modules including compute, core, and identity packages

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute
go get github.com/Azure/azure-sdk-for-go/sdk/azcore
go get github.com/Azure/azure-sdk-for-go/sdk/azidentity

----------------------------------------

TITLE: Authenticating with DefaultAzureCredential in Go
DESCRIPTION: This example demonstrates how to authenticate a client from the armresources module using DefaultAzureCredential.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)
if err != nil {
  // handle error
}

client := armresources.NewResourceGroupsClient("subscription ID", cred, nil)

----------------------------------------

TITLE: Connecting OpenTelemetry TracerProvider to Azure SDK Client in Go
DESCRIPTION: This code snippet demonstrates how to connect an OpenTelemetry TracerProvider to an Azure SDK client using ClientOptions. It creates a new tracing provider using the azotel module.

LANGUAGE: go
CODE:
options := azcore.ClientOptions{}
options.TracingProvider = azotel.NewTracingProvider(otelProvider, nil)

----------------------------------------

TITLE: Creating Azure Resources Client Factory in Go
DESCRIPTION: This snippet shows how to create a client factory for Azure Resources using subscription ID and credentials.

LANGUAGE: go
CODE:
clientFactory, err := armdeploymentstacks.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Authenticating azblob Client with AAD Token in Go
DESCRIPTION: Initializes an azblob client using Azure Active Directory (AAD) token authentication. The credential is created from the azidentity module.

LANGUAGE: go
CODE:
client, err := azblob.NewClient("<my storage account URL>", cred, nil)

----------------------------------------

TITLE: Downloading a File
DESCRIPTION: Example demonstrating how to download a file from ADLS Gen2 storage to local storage.

LANGUAGE: go
CODE:
const (
    path = "https://MYSTORAGEACCOUNT.dfs.core.windows.net/sample-fs/cloud.jpg"
)

// authenticate with Azure Active Directory
cred, err := azidentity.NewDefaultAzureCredential(nil)
// TODO: handle error

// create a client for the specified storage account
client, err := file.NewClient(path, cred, nil)
// TODO: handle error

// create or open a local file where we can download the file
file, err := os.Create("cloud.jpg")
// TODO: handle error
defer file.Close()

// download the file
_, err = client.DownloadFile(context.TODO(), file, nil)
// TODO: handle error

----------------------------------------

TITLE: Creating a Share and Uploading a File in Go
DESCRIPTION: This example demonstrates how to create a share, create a directory, and upload a local file to Azure File Storage using the SDK.

LANGUAGE: go
CODE:
const (
shareName = "sample-share"
dirName   = "sample-dir"
fileName  = "sample-file"
)

connectionString := "<connection_string>"
localFilePath := "<path_to_local_file>"

shareClient, err := share.NewClientFromConnectionString(connectionString, shareName, nil)
// TODO: handle error
_, err = shareClient.Create(context.TODO(), nil)
// TODO: handle error

dirClient := shareClient.NewDirectoryClient(dirName)
_, err = dirClient.Create(context.TODO(), nil)
// TODO: handle error

file, err := os.OpenFile(localFilePath, os.O_RDONLY, 0)
// TODO: handle error
defer file.Close()

fInfo, err := file.Stat()
// TODO: handle error
fSize := fInfo.Size()

fClient := dirClient.NewFileClient(fileName)
_, err = fClient.Create(context.TODO(), fSize, nil)
// TODO: handle error

err = fClient.UploadFile(context.TODO(), file, nil)
// TODO: handle error

----------------------------------------

TITLE: Creating Cosmos DB Client with Key Authentication
DESCRIPTION: Example of creating a Cosmos DB client using account key authentication.

LANGUAGE: go
CODE:
const (
    cosmosDbEndpoint = "someEndpoint"
    cosmosDbKey = "someKey"
)

cred, err := azcosmos.NewKeyCredential(cosmosDbKey)
handle(err)
client, err := azcosmos.NewClientWithKey(cosmosDbEndpoint, cred, nil)
handle(err)

----------------------------------------

TITLE: Querying Logs with azlogs in Go
DESCRIPTION: This snippet shows how to create a client and execute a logs query using the new azlogs module in the Azure SDK for Go. It demonstrates the similarities with the azquery module and includes error handling.

LANGUAGE: go
CODE:
import (
	"context"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/monitor/query/azlogs"
)

func main() {
	// create the client
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		//TODO: handle error
	}
	client, err := azlogs.NewClient(cred, nil)
	if err != nil {
		//TODO: handle error
	}

	// execute the logs query
	res, err := client.QueryWorkspace(
		context.TODO(),
		"<workspaceID>",
		azlogs.QueryBody{
			Query:    to.Ptr("<kusto query>"), // example Kusto query
			Timespan: to.Ptr(azlogs.NewTimeInterval(time.Date(2022, 12, 25, 0, 0, 0, 0, time.UTC), time.Date(2022, 12, 25, 12, 0, 0, 0, time.UTC))),
		},
		nil)
	if err != nil {
		//TODO: handle error
	}
	if res.Error != nil {
		//TODO: handle partial error
	}
}

----------------------------------------

TITLE: Sending Messages with azservicebus Sender in Go
DESCRIPTION: Demonstrates how to create a Sender and send a message using the new azservicebus package. This works for both queues and topics.

LANGUAGE: go
CODE:
sender, err := client.NewSender(queueOrTopicName, nil)

sender.SendMessage(context.TODO(), &azservicebus.Message{
  Body: []byte("hello world"),
}, nil)

----------------------------------------

TITLE: Configuring Go Multi-API Generation
DESCRIPTION: YAML configuration for generating multiple API versions of the Go SDK. It specifies the package tag to use for the 2019-02 version.

LANGUAGE: yaml
CODE:
batch:
  - tag: package-2019-02

----------------------------------------

TITLE: Receiving from Session Entities with azservicebus in Go
DESCRIPTION: Shows how to receive messages from session-enabled entities using the new azservicebus package, including accepting specific sessions and managing session state.

LANGUAGE: go
CODE:
// to get a specific session by ID
sessionReceiver, err := client.AcceptSessionForQueue(context.TODO(), "queue", "session-id", nil)
// or client.AcceptSessionForSubscription

// to get the next available session from Service Bus (service-assigned)
sessionReceiver, err := client.AcceptNextSessionForQueue(context.TODO(), "queue", nil)

// SessionReceiver's are similar to Receiver's with some additional functions:

// managing session state
sessionData, err := sessionReceiver.GetSessionState(context.TODO())
err = sessionReceiver.SetSessionState(context.TODO(), []byte("data"))

// renewing the lock associated with the session
err = sessionReceiver.RenewSessionLock(context.TODO())

----------------------------------------

TITLE: Authenticating Client with Azure AD
DESCRIPTION: Code example showing how to authenticate an ADLS Gen2 client using Azure Active Directory credentials.

LANGUAGE: go
CODE:
// create a credential for authenticating with Azure Active Directory
cred, err := azidentity.NewDefaultAzureCredential(nil)
// TODO: handle err

// create a service.Client for the specified storage account that uses the above credential
client, err := service.NewClient("https://MYSTORAGEACCOUNT.dfs.core.windows.net/", cred, nil)
// TODO: handle err
// you can also create filesystem, file and directory clients

----------------------------------------

TITLE: Authenticating Azure Blob Storage Client in Go
DESCRIPTION: Code to create and authenticate an Azure Blob Storage client using Azure Active Directory credentials

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)
// TODO: handle err

client, err := azblob.NewClient("https://MYSTORAGEACCOUNT.blob.core.windows.net/", cred, nil)
// TODO: handle err

----------------------------------------

TITLE: Handling HTTP Response Errors
DESCRIPTION: Example demonstrating proper error handling for HTTP requests, including type assertion for ResponseError and error inspection.

LANGUAGE: go
CODE:
import "github.com/Azure/azure-sdk-for-go/sdk/azcore"

resp, err := client.GetCertificate(context.Background(), "certificateName", nil)
if err != nil {
    var httpErr *azcore.ResponseError
    if errors.As(err, &httpErr) {
        // TODO: investigate httpErr
    } else {
        // TODO: not an HTTP error
    }
}

----------------------------------------

TITLE: Configuring Logging for Azure SDK in Go
DESCRIPTION: This code snippet shows how to configure logging for Azure SDK modules in Go. It demonstrates setting a custom log listener to print events to stdout and configuring specific log events to be captured.

LANGUAGE: Go
CODE:
import azlog "github.com/Azure/azure-sdk-for-go/sdk/azcore/log"

// Print log events to stdout
azlog.SetListener(func(cls azlog.Event, msg string) {
	fmt.Println(msg)
})

// Includes only requests and responses in credential logs
azlog.SetEvents(azlog.EventRequest, azlog.EventResponse)

----------------------------------------

TITLE: Installing Azure Event Hubs Go Module
DESCRIPTION: Command to install the Azure Event Hubs client module for Go using go get

LANGUAGE: bash
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/messaging/azeventhubs

----------------------------------------

TITLE: Handling Azure Key Vault Errors in Go
DESCRIPTION: Example demonstrating error handling for Key Vault HTTP requests using azcore.ResponseError.

LANGUAGE: go
CODE:
import "github.com/Azure/azure-sdk-for-go/sdk/azcore"

resp, err := client.GetSecret(context.Background(), "secretName", nil)
if err != nil {
    var httpErr *azcore.ResponseError
    if errors.As(err, &httpErr) {
        // TODO: investigate httpErr
    } else {
        // TODO: not an HTTP error
    }
}

----------------------------------------

TITLE: Installing Azure Monitor Ingestion and Azure Identity Modules in Go
DESCRIPTION: This snippet demonstrates how to install the required modules for Azure Monitor Ingestion and Azure Identity using the 'go get' command.

LANGUAGE: bash
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/monitor/ingestion/azlogs
go get github.com/Azure/azure-sdk-for-go/sdk/azidentity

----------------------------------------

TITLE: Creating an Azure Container Registry client in Go
DESCRIPTION: This Go code snippet demonstrates how to create an Azure Container Registry client using the DefaultAzureCredential for authentication. It imports necessary packages, obtains credentials, and initializes the client with the registry's endpoint URL.

LANGUAGE: Go
CODE:
import (
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/containers/azcontainerregistry"
	"log"
)

func main() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}

	client, err := azcontainerregistry.NewClient("<your Container Registry's endpoint URL>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
}

----------------------------------------

TITLE: Configuring Advanced Query Options for Azure Monitor Logs in Go
DESCRIPTION: This code snippet shows how to set advanced query options for Azure Monitor Logs queries, including increasing wait time, including statistics, and enabling visualization.

LANGUAGE: go
CODE:
azlogs.QueryWorkspaceOptions{
			Options: &azlogs.QueryOptions{
				Statistics:    to.Ptr(true),
				Visualization: to.Ptr(true),
				Wait:          to.Ptr(600),
			},
		}

----------------------------------------

TITLE: Retrieving Pageable Results in Go with Azure SDK
DESCRIPTION: Demonstrates how to use a pager to retrieve multiple pages of results from an Azure SDK operation. This example fetches a list of resource groups using the NewListPager method.

LANGUAGE: go
CODE:
ctx := context.TODO() // your context
pager := rgClient.NewListPager(nil)
var resourceGroups []*armresources.ResourceGroup
for pager.More() {
    nextResult, err := pager.NextPage(ctx)
    if err != nil {
        // handle error...
    }
    if nextResult.ResourceGroupListResult.Value != nil {
        resourceGroups = append(resourceGroups, nextResult.ResourceGroupListResult.Value...)
    }
}
// dealing with `resourceGroups`

----------------------------------------

TITLE: Accessing Raw HTTP Response
DESCRIPTION: Example demonstrating how to capture and access the raw HTTP response from Key Vault operations using runtime.WithCaptureResponse.

LANGUAGE: go
CODE:
import "github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"

var response *http.Response
ctx := runtime.WithCaptureResponse(context.TODO(), &response)
_, err = client.GetCertificate(ctx, "certificateName", nil)
if err != nil {
    // TODO: handle error
}
// TODO: do something with response

----------------------------------------

TITLE: Running Test Proxy Commands
DESCRIPTION: Bash commands for running and recording tests using the Azure SDK test proxy, including environment setup and test execution.

LANGUAGE: bash
CODE:
cd <root of the azopenaiassistants module>
test-proxy

export AZURE_RECORD_MODE=playback
go test -count 1 -v ./...

export AZURE_RECORD_MODE=record
go test -count 1 -v ./...

# push the recording changes to the repo
test-proxy push -a assets.json

# commit our assets.json file now that it points
# to the new recordings.
git add assets.json
git commit -m "updated recordings"
git push

----------------------------------------

TITLE: Performing CRUD Operations on Cosmos DB Items
DESCRIPTION: Comprehensive example showing Create, Read, Update, Patch, and Delete operations on items in a Cosmos DB container.

LANGUAGE: go
CODE:
item := map[string]string{
    "id":    "1",
    "value": "2",
}

marshalled, err := json.Marshal(item)
if err != nil {
    log.Fatal(err)
}

container, err := client.NewContainer(dbName, containerName)
handle(err)

pk := azcosmos.NewPartitionKeyString("1")
id := "1"

// Create an item
itemResponse, err := container.CreateItem(context, pk, marshalled, nil)
handle(err)

// Read an item
itemResponse, err = container.ReadItem(context, pk, id, nil)
handle(err)

var itemResponseBody map[string]string
err = json.Unmarshal(itemResponse.Value, &itemResponseBody)
if err != nil {
    log.Fatal(err)
}

itemResponseBody["value"] = "3"
marshalledReplace, err := json.Marshal(itemResponseBody)
if err != nil {
    log.Fatal(err)
}

// Replace an item
itemResponse, err = container.ReplaceItem(context, pk, id, marshalledReplace, nil)
handle(err)

// Patch an item
patch := PatchOperations{}
patch.AppendAdd("/newField", "newValue")
patch.AppendRemove("/oldFieldToRemove")

itemResponse, err := container.PatchItem(context.Background(), pk, id, patch, nil)
handle(err)

// Delete an item
itemResponse, err = container.DeleteItem(context, pk, id, nil)
handle(err)

----------------------------------------

TITLE: Using Environment Variables in Go SDK Tests
DESCRIPTION: Demonstrates how to use environment variables in Go SDK tests, with fallback values for playback mode. This ensures tests can run in both live and playback modes without exposing sensitive information.

LANGUAGE: Go
CODE:
func TestClient(t *testing.T) {
	accountName := recording.GetEnvVariable(t, "TABLES_PRIMARY_ACCOUNT_NAME", "fakeAccountName")
	// If running in playback, the value is "fakeAccountName". If running in "record" the value is the environment variable
	accountKey := recording.GetEnvVariable(t, "TABLES_PRIMARY_ACCOUNT_KEY", "fakeAccountKey")
	cred, err := NewSharedKeyCredential(accountName, accountKey)
	require.NoError(t, err)

	client, err := NewClient("someTableName", someServiceURL, cred, nil)
	require.NoError(t, err)
	require.Equal(t, accountName, client.AccountName())
}

----------------------------------------

TITLE: Creating a Database in Cosmos DB
DESCRIPTION: Example showing how to create a new database using the Cosmos DB client.

LANGUAGE: go
CODE:
databaseProperties := azcosmos.DatabaseProperties{ID: dbName}
response, err := client.CreateDatabase(context, databaseProperties, nil)
handle(err)
database, err := client.NewDatabase(dbName)
handle(err)

----------------------------------------

TITLE: Authenticating with Azure Using Default Credentials in Go
DESCRIPTION: This snippet demonstrates how to create default Azure credentials for authentication.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Receiving Messages with azservicebus Receiver in Go
DESCRIPTION: Demonstrates how to create a Receiver and receive messages in batches from a queue or subscription using the new azservicebus package.

LANGUAGE: go
CODE:
receiver, err := client.NewReceiverForQueue(queue, nil)
// or for a subscription
receiver, err := client.NewReceiverForSubscription(topicName, subscriptionName, nil)

// receiving multiple messages at a time. 
messages, err := receiver.ReceiveMessages(context.TODO(), numMessages, nil)

----------------------------------------

TITLE: Creating Azure Compute AvailabilitySets Client in Go
DESCRIPTION: Demonstrates how to create a specific client (AvailabilitySetsClient) using the previously created client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewAvailabilitySetsClient()

----------------------------------------

TITLE: Creating Azure Key Vault Certificates Client
DESCRIPTION: Example showing how to create a new certificates client using DefaultAzureCredential for authentication. Demonstrates importing required packages and initializing the client with vault URL.

LANGUAGE: go
CODE:
import (
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/security/keyvault/azcertificates"
)

func main() {
	credential, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		// TODO: handle error
	}

	client, err := azcertificates.NewClient("https://<TODO: your vault name>.vault.azure.net", credential, nil)
	if err != nil {
		// TODO: handle error
	}
}

----------------------------------------

TITLE: Handling Long-Running Operations in Go with Azure SDK
DESCRIPTION: Shows how to use the Begin* methods to start a long-running operation and poll for its completion. This example creates a resource and waits for the operation to finish.

LANGUAGE: go
CODE:
ctx := context.TODO() // your context
poller, err := client.BeginCreate(ctx, "resource_identifier", "additonal_parameter", nil)
if err != nil {
    // handle error...
}
resp, err = poller.PollUntilDone(ctx, nil)
if err != nil {
    // handle error...
}
// dealing with `resp`

----------------------------------------

TITLE: Configuring Azure SDK Logging
DESCRIPTION: Example showing how to configure logging for the Azure SDK using azcore/log package.

LANGUAGE: go
CODE:
import (
  "fmt"
  azlog "github.com/Azure/azure-sdk-for-go/sdk/azcore/log"
)

// print log output to stdout
azlog.SetListener(func(event azlog.Event, s string) {
    fmt.Printf("[%s] %s\n", event, s)
})

// pick the set of events to log
azlog.SetEvents(
  azwebpubsub
)

----------------------------------------

TITLE: Authenticating Web PubSub Client with Connection String
DESCRIPTION: Creates a Web PubSub client using a connection string found in the Azure Portal Keys tab.

LANGUAGE: go
CODE:
import (
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/messaging/azwebpubsub"
	"log"
)

func main() {
	client, err := azwebpubsub.NewClientFromConnectionString("<your Web PubSub's connection string>", nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
}

----------------------------------------

TITLE: Creating azblob Client with No Credential in Go
DESCRIPTION: Initializes an azblob client for anonymous or SAS authentication using NewClientWithNoCredential method. This replaces the previous NewAnonymousCredential approach.

LANGUAGE: go
CODE:
client, err := azblob.NewClientWithNoCredential("<public blob or blob with SAS URL>", nil)

----------------------------------------

TITLE: Installing Azure Service Bus Package
DESCRIPTION: Command to install the Azure Service Bus client module using Go's package manager

LANGUAGE: bash
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/messaging/azservicebus

----------------------------------------

TITLE: Creating an Azure Resources Client in Go
DESCRIPTION: Code snippet demonstrating how to create a specific client from the client factory to access Azure Resources APIs.

LANGUAGE: go
CODE:
client := clientFactory.NewClient()

----------------------------------------

TITLE: Downloading a File from Azure File Storage in Go
DESCRIPTION: This example shows how to download a file from Azure File Storage to a local file using the SDK.

LANGUAGE: go
CODE:
const (
shareName = "sample-share"
dirName   = "sample-dir"
fileName  = "sample-file"
)

connectionString := "<connection_string>"
localFilePath := "<path_to_local_file>"

shareClient, err := share.NewClientFromConnectionString(connectionString, shareName, nil)
// TODO: handle error

dirClient := shareClient.NewDirectoryClient(dirName)

fClient := dirClient.NewFileClient(fileName)

file, err := os.Create(localFilePath)
// TODO: handle error
defer file.Close()

_, err = fClient.DownloadFile(context.TODO(), file, nil)
// TODO: handle error

----------------------------------------

TITLE: Configuring Logging for Azure Container Registry SDK
DESCRIPTION: Shows how to configure logging for Azure SDK modules using azcore/log package. The example demonstrates setting up a custom log listener and filtering specific log events.

LANGUAGE: go
CODE:
import azlog "github.com/Azure/azure-sdk-for-go/sdk/azcore/log"

// Print log events to stdout
azlog.SetListener(func(cls azlog.Event, msg string) {
	fmt.Println(msg)
})

// Includes only requests and responses in credential logs
azlog.SetEvents(azlog.EventRequest, azlog.EventResponse)

----------------------------------------

TITLE: Setting Server Timeout for Logs Query in Azure Monitor Query
DESCRIPTION: This code example shows how to configure the server timeout for a logs query request using the Azure Monitor Query client library. It extends the timeout to 10 minutes to handle complex queries that may take longer to execute.

LANGUAGE: go
CODE:
workspaceID := "<workspace_id>"
options := &azquery.LogsClientQueryWorkspaceOptions{
		Options: &azquery.LogsQueryOptions{
			Wait:          to.Ptr(600), // increases wait time to ten minutes
		},
	}

res, err := logsClient.QueryWorkspace(context.Background(), 
             workspaceID, 
             azquery.Body{Query: to.Ptr("AzureActivity
                    | summarize Count = count() by ResourceGroup
                    | top 10 by Count
                    | project ResourceGroup")}, 
             options)
if err != nil {
    //TODO: handle error
}
_ = res

----------------------------------------

TITLE: Configuring Environment Variables for Azure Event Hubs Tests in Bash
DESCRIPTION: This snippet shows the required environment variables to be set in a .env file for running Event Hubs reliability tests. It includes connection strings for Event Hubs and Azure Storage, along with an App Insights instrumentation key.

LANGUAGE: bash
CODE:
EVENTHUB_CONNECTION_STRING=<connection string to the Event Hubs namespace>
EVENTHUB_NAME=<already created Event Hub - should have at least 4 partitions>
CHECKPOINTSTORE_STORAGE_CONNECTION_STRING=<connection string to an Azure Storage account>
APPINSIGHTS_INSTRUMENTATIONKEY=<instrumentation key for appinsights>

----------------------------------------

TITLE: Enabling Logging for Azure SDK in Go
DESCRIPTION: This snippet demonstrates how to enable logging for all Azure SDK modules and configure log output. It shows setting up a custom listener to print logs to stdout and filtering log events to include only HTTP requests and responses.

LANGUAGE: go
CODE:
import azlog "github.com/Azure/azure-sdk-for-go/sdk/azcore/log"

// print log output to stdout
azlog.SetListener(func(event azlog.Event, s string) {
    fmt.Println(s)
})

// Includes only requests and responses in logs
azlog.SetEvents(azlog.EventRequest, azlog.EventResponse)

----------------------------------------

TITLE: Implementing Custom HTTP Client in Azure Go SDK
DESCRIPTION: Demonstrates how to use a custom HTTP client implementation with the Azure Go SDK by setting the Transport option in ClientOptions.

LANGUAGE: go
CODE:
// your own implementation of HTTP client
httpClient := NewYourOwnHTTPClient{}
clientFactory, err := armresources.NewClientFactory(subscriptionId, credential,
    &arm.ClientOptions{
        ClientOptions: policy.ClientOptions{
            Transport: &httpClient,
        },
    },
)
if err != nil {
    log.Fatal(err)
}
rgClient := clientFactory.NewResourceGroupsClient()

----------------------------------------

TITLE: Listing Entities in Azure Tables
DESCRIPTION: List entities from an Azure Tables table using filters and pagination.

LANGUAGE: go
CODE:
import (
    "context"
    "encoding/json"
    "fmt"

    "github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
    "github.com/Azure/azure-sdk-for-go/sdk/data/aztables"
)

func main() {
    cred, err := aztables.NewSharedKeyCredential("<myAccountName>", "<myAccountKey>")
    if err != nil {
        panic(err)
    }
    client, err := aztables.NewClient("https://myAccountName.table.core.windows.net/myTable", cred, nil)
    if err != nil {
        panic(err)
    }

    filter := "PartitionKey eq 'markers' or RowKey eq 'Markers'"
    options := &aztables.ListEntitiesOptions{
        Filter: &filter,
        Select: to.Ptr("RowKey,Value,Product,Available"),
        Top: to.Ptr(int32(15)),
    }

    pager := client.NewListEntitiesPager(options)
    pageCount := 0
    for pager.More() {
        response, err := pager.NextPage(context.TODO())
        if err != nil {
            panic(err)
        }
        fmt.Printf("There are %d entities in page #%d\n", len(response.Entities), pageCount)
        pageCount += 1

        for _, entity := range response.Entities {
            var myEntity aztables.EDMEntity
            err = json.Unmarshal(entity, &myEntity)
            if err != nil {
                panic(err)
            }

            fmt.Printf("Received: %v, %v, %v, %v\n", myEntity.RowKey, myEntity.Properties["Value"], myEntity.Properties["Product"], myEntity.Properties["Available"])
        }
    }
}

----------------------------------------

TITLE: Creating an Azure Key Vault Keys Client in Go
DESCRIPTION: Initialize an Azure Key Vault Keys client using DefaultAzureCredential for authentication. This snippet demonstrates importing necessary packages, creating a credential, and initializing the client with a vault URL.

LANGUAGE: Go
CODE:
import (
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/security/keyvault/azkeys"
)

func main() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		// TODO: handle error
	}

	client, err := azkeys.NewClient("https://<TODO: your vault name>.vault.azure.net", cred, nil)
	if err != nil {
		// TODO: handle error
	}
}

----------------------------------------

TITLE: Implementing Fake Client Methods for Virtual Machines in Go
DESCRIPTION: This snippet demonstrates how to implement fake client methods for virtual machines using the Azure SDK for Go. It shows how to set up a fake 'Get' method for the VirtualMachinesClient.

LANGUAGE: go
CODE:
import azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"

myFakeVirtualMachinesServer.Get = func(ctx context.Context, resourceGroupName string, vmName string, options *armcompute.VirtualMachinesClientGetOptions) (resp azfake.Responder[armcompute.VirtualMachinesClientGetResponse], errResp azfake.ErrorResponder) {
	// TODO: resp.SetResponse(/* your fake armcompute.VirtualMachinesClientGetResponse response */)
	return
}

----------------------------------------

TITLE: Listing Blobs Using Pager in azblob Go SDK
DESCRIPTION: Demonstrates how to list blobs using the new pager approach in azblob. It creates a pager and iterates through pages of results.

LANGUAGE: go
CODE:
pager := client.NewListBlobsFlatPager("my-container", nil)
for pager.More() {
	page, err := pager.NextPage(context.TODO())
	// process results
}

----------------------------------------

TITLE: Configuring Azure Client Options for Different Clouds in Go
DESCRIPTION: This code demonstrates how to configure client options for connecting to different Azure clouds. It uses the arm and azcore packages to set up ClientOptions, specifically showing how to connect to Azure China cloud.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armedgezones.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Error Handling in Azure Container Registry Go Client
DESCRIPTION: Demonstrates how to handle HTTP response errors using azcore.ResponseError type checking. The code shows proper error handling pattern for Container Registry client operations.

LANGUAGE: go
CODE:
import "github.com/Azure/azure-sdk-for-go/sdk/azcore"

resp, err := client.GetRepositoryProperties(ctx, "library/hello-world", nil)
if err != nil {
	var httpErr *azcore.ResponseError
	if errors.As(err, &httpErr) {
		// TODO: investigate httpErr
	} else {
		// TODO: not an HTTP error
	}
}

----------------------------------------

TITLE: Implementing Recording Policy in Go
DESCRIPTION: Defines a custom recording policy to route traffic to the test proxy and handle different recording modes.

LANGUAGE: Go
CODE:
type recordingPolicy struct {
	options recording.RecordingOptions
	t       *testing.T
}

func (r recordingPolicy) Host() string {
	if r.options.UseHTTPS {
		return "localhost:5001"
	}
	return "localhost:5000"
}

func (r recordingPolicy) Scheme() string {
	if r.options.UseHTTPS {
		return "https"
	}
	return "http"
}

func NewRecordingPolicy(t *testing.T, o *recording.RecordingOptions) policy.Policy {
	if o == nil {
		o = &recording.RecordingOptions{UseHTTPS: true}
	}
	p := &recordingPolicy{options: *o, t: t}
	return p
}

func (p *recordingPolicy) Do(req *policy.Request) (resp *http.Response, err error) {
	if recording.GetRecordMode() != "live" {
		p.options.ReplaceAuthority(t, req.Raw())
	}
	return req.Next()
}

----------------------------------------

TITLE: Displaying HTTP 403 Forbidden Error Response in Go
DESCRIPTION: This snippet shows an example of an HTTP 403 Forbidden error response when an operation is not permitted on a key in Azure Key Vault. It demonstrates the structure of the error message returned by the service.

LANGUAGE: text
CODE:
--------------------------------------------------------------------------------
RESPONSE 403: 403 Forbidden
ERROR CODE: Forbidden
--------------------------------------------------------------------------------
{
  "error": {
    "code": "Forbidden",
    "message": "Operation decrypt is not permitted on this key.",
    "innererror": {
      "code": "KeyOperationForbidden"
    }
  }
}

----------------------------------------

TITLE: Authenticating with Azure AD
DESCRIPTION: Example of authenticating with Azure Active Directory using azidentity and creating a service client

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)
// TODO: handle err

client, err := azqueue.NewServiceClient("https://MYSTORAGEACCOUNT.queue.core.windows.net/", cred, nil)
// TODO: handle err

----------------------------------------

TITLE: Configuring Azure SDK Logging
DESCRIPTION: Example showing how to configure logging for Azure SDK operations, including setting log listeners and filtering specific event types.

LANGUAGE: go
CODE:
import azlog "github.com/Azure/azure-sdk-for-go/sdk/azcore/log"

// Print log events to stdout
azlog.SetListener(func(cls azlog.Event, msg string) {
	fmt.Println(msg)
})

// Includes only requests and responses in logs
azlog.SetEvents(azlog.EventRequest, azlog.EventResponse)

----------------------------------------

TITLE: Creating Azure Subscription Client Factory
DESCRIPTION: Initializes a client factory for creating Azure Subscription clients with basic configuration

LANGUAGE: go
CODE:
clientFactory, err := armsubscription.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Enumerating Azure Storage Queues
DESCRIPTION: Example demonstrating how to list all queues in a storage account using pagination

LANGUAGE: go
CODE:
const (
	account = "https://MYSTORAGEACCOUNT.queue.core.windows.net/"
)

// authenticate with Azure Active Directory
cred, err := azidentity.NewDefaultAzureCredential(nil)
// TODO: handle error

// create a client for the specified storage account
client, err := azqueue.NewServiceClient(account, cred, nil)
// TODO: handle error

// queue listings are returned across multiple pages
pager := client.NewListQueuesPager(nil)

// continue fetching pages until no more remain
for pager.More() {
   resp, err := pager.NextPage(context.Background())
   _require.NoError(err)
   // print queue name
   for _, queue := range resp.Queues {
		fmt.Println(*queue.Name)
	}
}

----------------------------------------

TITLE: Accessing Raw HTTP Response in Azure Key Vault Keys Client
DESCRIPTION: Capture the raw HTTP response from a Key Vault operation using the runtime.WithCaptureResponse method and a context passed to the client method.

LANGUAGE: Go
CODE:
import "github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"

var response *http.Response
ctx := runtime.WithCaptureResponse(context.TODO(), &response)
_, err = client.GetKey(ctx, "keyName", nil)
if err != nil {
    // TODO: handle error
}
// TODO: do something with response

----------------------------------------

TITLE: Creating Azure Storage Account
DESCRIPTION: Azure CLI command to create a new storage account

LANGUAGE: powershell
CODE:
az storage account create --name MyStorageAccount --resource-group MyResourceGroup --location westus --sku Standard_LRS

----------------------------------------

TITLE: Configuring Logging for Azure KeyVault Admin
DESCRIPTION: Example demonstrating how to configure logging for Azure SDK modules using azcore/log package.

LANGUAGE: go
CODE:
import azlog "github.com/Azure/azure-sdk-for-go/sdk/azcore/log"

// Print log events to stdout
azlog.SetListener(func(cls azlog.Event, msg string) {
	fmt.Println(msg)
})

// Includes only requests and responses in logs
azlog.SetEvents(azlog.EventRequest, azlog.EventResponse)

----------------------------------------

TITLE: Traversing a Share in Azure File Storage using Go
DESCRIPTION: This example demonstrates how to recursively traverse a share, listing all directories and files using the Azure File Storage SDK for Go.

LANGUAGE: go
CODE:
const shareName = "sample-share"

connectionString := "<connection_string>"

shareClient, err := share.NewClientFromConnectionString(connectionString, shareName, nil)
// TODO: handle error

var dirs []*directory.Client
dirs = append(dirs, shareClient.NewRootDirectoryClient())
for len(dirs) > 0 {
    dirClient := dirs[0]
    dirs = dirs[1:]

    pager := dirClient.NewListFilesAndDirectoriesPager(nil)
    for pager.More() {
        resp, err := pager.NextPage(context.TODO())
        // TODO: handle error

        for _, d := range resp.Segment.Directories {
            fmt.Println(*d.Name)
            dirs = append(dirs, dirClient.NewSubdirectoryClient(*d.Name))
        }

        for _, f := range resp.Segment.Files {
            fmt.Println(*f.Name)
        }
    }
}

----------------------------------------

TITLE: Managing TCP Connections with ProducerClient in Go
DESCRIPTION: Shows how to handle TCP connections and AMQP links using the ProducerClient for sending events to multiple partitions.

LANGUAGE: go
CODE:
// will lazily create an AMQP connection
producerClient, err := azeventhubs.NewProducerClient(/* arguments elided for example */)

// close the TCP connection (and any child links created for sending events)
defer producerClient.Close(context.TODO())

// these calls will lazily create a set of AMQP links using the producerClient's TCP connection.
producerClient.SendEventDataBatch(context.TODO(), eventDataBatchForPartition0, nil)
producerClient.SendEventDataBatch(context.TODO(), eventDataBatchForPartition1, nil)

----------------------------------------

TITLE: Creating a Container in Cosmos DB
DESCRIPTION: Example demonstrating container creation with partition key definition and throughput specification.

LANGUAGE: go
CODE:
properties := azcosmos.ContainerProperties{
    ID: "aContainer",
    PartitionKeyDefinition: azcosmos.PartitionKeyDefinition{
        Paths: []string{"/id"},
    },
}

throughput := azcosmos.NewManualThroughputProperties(400)
response, err := database.CreateContainer(context, properties, &azcosmos.CreateContainerOptions{ThroughputProperties: &throughput})
handle(err)

----------------------------------------

TITLE: Configuring Client Options for Different Clouds
DESCRIPTION: Sets up client options for connecting to different Azure clouds including sovereign clouds and Azure Stack

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armmariadb.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Configuring Logging for Azure SDK in Go
DESCRIPTION: Set up logging for Azure SDK modules, including the Key Vault Keys client. This example shows how to enable logging for HTTP requests and responses, and print log events to stdout.

LANGUAGE: Go
CODE:
import azlog "github.com/Azure/azure-sdk-for-go/sdk/azcore/log"

// Print log events to stdout
azlog.SetListener(func(cls azlog.Event, msg string) {
	fmt.Println(msg)
})

// Includes only requests and responses in logs
azlog.SetEvents(azlog.EventRequest, azlog.EventResponse)

----------------------------------------

TITLE: Triggering Azure Pipeline for Pull Request
DESCRIPTION: This comment triggers the Azure Pipeline to run tests for the AzOpenAI module in a pull request.

LANGUAGE: bash
CODE:
/azp run go - azopenai

----------------------------------------

TITLE: Pagination in Latest Version (sdk/resourcemanager/**/arm**)
DESCRIPTION: Example of handling pagination in the latest version of Azure SDK for Go.

LANGUAGE: go
CODE:
ctx := context.TODO() // your context
pager := resourceGroupsClient.NewListPager(nil)
for pager.More() {
    nextResult, err := pager.NextPage(ctx)
    if err != nil {
        log.Fatalf("failed to advance page: %v", err)
    }
    for _, rg := range nextResult.Value {
        log.Printf("resource group ID: %s\n", *rg.ID)
    }
}

----------------------------------------

TITLE: Creating and Uploading a File
DESCRIPTION: Example showing how to create and upload a file to ADLS Gen2 storage using the SDK.

LANGUAGE: go
CODE:
const (
	path = "https://MYSTORAGEACCOUNT.dfs.core.windows.net/sample-fs/sample-file"
)

// authenticate with Azure Active Directory
cred, err := azidentity.NewDefaultAzureCredential(nil)
// TODO: handle error

// create a client for the specified storage account
client, err := file.NewClient(path, cred, nil)
// TODO: handle error

_, err = client.Create(context.TODO(), nil)
// TODO: handle error

// open the file for reading
fh, err := os.OpenFile(sampleFile, os.O_RDONLY, 0)
// TODO: handle error
defer fh.Close()

// upload the file to the specified filesystem with the specified file name
_, err = client.UploadFile(context.TODO(), fh, nil)
// TODO: handle error

----------------------------------------

TITLE: Implementing PerfTest Interface for Azure Blob Upload Test in Go
DESCRIPTION: Shows the implementation of the PerfTest interface for an Azure Blob upload performance test. It includes the Run method for the actual performance measurement and an empty Cleanup method.

LANGUAGE: Go
CODE:
type uploadPerfTest struct {
	*uploadTestGlobal
	perf.PerfTestOptions
	data       io.ReadSeekCloser
	blobClient azblob.BlockBlobClient
}

func (m *uploadPerfTest) Run(ctx context.Context) error {
	_, err := m.data.Seek(0, io.SeekStart) // rewind to the beginning
	if err != nil {
		return err
	}
	_, err = m.blobClient.Upload(ctx, m.data, nil)
	return err
}

func (m *uploadPerfTest) Cleanup(ctx context.Context) error {
	return nil
}

----------------------------------------

TITLE: Configuring Logging in Azure Go SDK
DESCRIPTION: Shows how to configure logging behavior using ClientOptions. This example enables including HTTP body in logs and demonstrates how to set a custom log listener.

LANGUAGE: go
CODE:
clientFactory, err := armresources.NewClientFactory(subscriptionId, credential,
    &arm.ClientOptions{
        ClientOptions: policy.ClientOptions{
            Logging: policy.LogOptions{
                // include HTTP body for log
                IncludeBody: true,
            },
        },
    },
)
if err != nil {
    log.Fatal(err)
}
rgClient := clientFactory.NewResourceGroupsClient()

LANGUAGE: go
CODE:
// print log output to stdout
azlog.SetListener(func(event azlog.Event, s string) {
    fmt.Println(s)
})

// include only azidentity credential logs
azlog.SetEvents(azidentity.EventAuthentication)

----------------------------------------

TITLE: Setting Up Test Proxy in Go
DESCRIPTION: Demonstrates how to set up and tear down the test proxy in the TestMain function for recording and playback modes.

LANGUAGE: Go
CODE:
const recordingDirectory = "<path to service directory with assets.json file>/testdata"

func TestMain(m *testing.M) {
	code := run(m)
	os.Exit(code)
}

func run(m *testing.M) int {
	if recording.GetRecordMode() == recording.PlaybackMode || recording.GetRecordMode() == recording.RecordingMode {
        proxy, err := recording.StartTestProxy(recordingDirectory, nil)
        if err != nil {
            panic(err)
        }

        // NOTE: defer should not be used directly within TestMain as it will not be executed due to os.Exit()
		defer func() {
			err := recording.StopTestProxy(proxy)
			if err != nil {
				panic(err)
			}
		}()
    }

    ... all other test code, including proxy recording setup ...
	return m.Run()
}

----------------------------------------

TITLE: Installing Azure Identity Module in Go
DESCRIPTION: This command installs the Azure Identity module using Go modules for dependency management.

LANGUAGE: sh
CODE:
go get -u github.com/Azure/azure-sdk-for-go/sdk/azidentity

----------------------------------------

TITLE: Registering Local Arguments for Azure Blob Upload Test in Go
DESCRIPTION: Demonstrates how to register local arguments for a specific performance test using the flag package. This example sets up a size parameter for the upload test.

LANGUAGE: Go
CODE:
type uploadTestOptions struct {
	size int
}

var uploadTestOpts uploadTestOptions = uploadTestOptions{size: 10240}

// uploadTestRegister is called once per process
func uploadTestRegister() {
	flag.IntVar(&uploadTestOpts.size, "size", 10240, "Size in bytes of data to be transferred in upload or download tests.")
}

----------------------------------------

TITLE: Configuring HTTP Pipeline for azblob Client in Go
DESCRIPTION: Shows how to configure the HTTP pipeline during client construction using azblob.ClientOptions and azcore.ClientOptions.

LANGUAGE: go
CODE:
client, err := azblob.NewClient(account, cred, &azblob.ClientOptions{
	ClientOptions: azcore.ClientOptions{
		// configure HTTP pipeline options here
	},
})

----------------------------------------

TITLE: Handling HTTP Errors in Azure Key Vault Keys Client
DESCRIPTION: Demonstrates error handling for HTTP requests in the Azure Key Vault Keys client, using type assertion to identify and handle ResponseError.

LANGUAGE: Go
CODE:
import "github.com/Azure/azure-sdk-for-go/sdk/azcore"

resp, err := client.GetKey(context.Background(), "keyName", nil)
if err != nil {
    var httpErr *azcore.ResponseError
    if errors.As(err, &httpErr) {
        // TODO: investigate httpErr
    } else {
        // TODO: not an HTTP error
    }
}

----------------------------------------

TITLE: Installing Azure OpenAI Assistants and Azure Identity Modules in Go
DESCRIPTION: This snippet demonstrates how to install the required modules for using Azure OpenAI assistants in a Go project. It includes the main azopenaiassistants module and the optional azidentity module for Azure Active Directory authentication.

LANGUAGE: Bash
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/ai/azopenaiassistants

# optional
go get github.com/Azure/azure-sdk-for-go/sdk/azidentity

----------------------------------------

TITLE: Calling Fake Client Methods in Go
DESCRIPTION: This snippet demonstrates how to call fake client methods using the Azure SDK for Go. It shows a simple call to the 'Get' method of a fake VirtualMachinesClient.

LANGUAGE: go
CODE:
resp, err := client.Get(context.TODO(), "fake-resource-group", "fake-vm", nil)

----------------------------------------

TITLE: Authenticating with Azure Cosmos DB using DefaultAzureCredential in Go
DESCRIPTION: This code snippet shows how to create a default Azure credential for authenticating with Azure Cosmos DB. It uses the azidentity package to provide various authentication methods.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Upgrading SDK Major Version
DESCRIPTION: Commands for upgrading to the latest major version of the SDK using gomajor tool.

LANGUAGE: sh
CODE:
go install github.com/icholy/gomajor@latest
gomajor get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute@latest

----------------------------------------

TITLE: Authentication in Latest Version (sdk/resourcemanager/**/arm**)
DESCRIPTION: Example of authentication using azidentity in the latest version of Azure SDK for Go.

LANGUAGE: go
CODE:
import "github.com/Azure/azure-sdk-for-go/sdk/azidentity"
import "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armresources"

LANGUAGE: go
CODE:
credential, err := azidentity.NewClientSecretCredential("<TenantId>", "<ClientId>", "<ClientSecret>", nil)
clientFactory, err := armresources.NewClientFactory(<subscription ID>, credential, &options)
if err != nil {
    log.Fatal(err)
}
client := clientFactory.NewResourceGroupsClient()

----------------------------------------

TITLE: Configuring Logging for Azure SDK in Go
DESCRIPTION: This snippet demonstrates how to set up logging for all Azure SDK modules, including the Monitor Query client. It shows how to customize log output and filter specific event types.

LANGUAGE: go
CODE:
import azlog "github.com/Azure/azure-sdk-for-go/sdk/azcore/log"

// Print log events to stdout
azlog.SetListener(func(cls azlog.Event, msg string) {
	fmt.Println(msg)
})

// Includes only requests and responses in credential logs
azlog.SetEvents(azlog.EventRequest, azlog.EventResponse)

----------------------------------------

TITLE: Creating Azure Tables Client with Shared Key Authentication
DESCRIPTION: Create an Azure Tables service client using shared key authentication.

LANGUAGE: go
CODE:
import (
    "github.com/Azure/azure-sdk-for-go/sdk/data/aztables"
)

func main() {
    cred, err := aztables.NewSharedKeyCredential("<myAccountName>", "<myAccountKey>")
    if err != nil {
        panic(err)
    }
    client, err := aztables.NewServiceClientWithSharedKey(serviceURL, cred, nil)
    if err != nil {
        panic(err)
    }
}

----------------------------------------

TITLE: Querying Logs with azquery in Go
DESCRIPTION: This snippet demonstrates how to create a logs client and execute a logs query using the azquery module in the Azure SDK for Go. It includes error handling and uses the QueryWorkspace method.

LANGUAGE: go
CODE:
import (
	"context"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/monitor/azquery"
)

func main() {
	// create the logs client
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		//TODO: handle error
	}
	client, err := azquery.NewLogsClient(cred, nil)
	if err != nil {
		//TODO: handle error
	}

	// execute the logs query
	res, err := client.QueryWorkspace(context.TODO(), "workspaceID",
		azquery.Body{
			Query:    to.Ptr("<kusto query>"),
			Timespan: to.Ptr(azquery.NewTimeInterval(time.Date(2022, 12, 25, 0, 0, 0, 0, time.UTC), time.Date(2022, 12, 25, 12, 0, 0, 0, time.UTC))),
		},
		nil)
	if err != nil {
		//TODO: handle error
	}
	if res.Error != nil {
		//TODO: handle partial error
	}
}

----------------------------------------

TITLE: Creating Azure Key Vault Secrets Client in Go
DESCRIPTION: Example showing how to create an authenticated Key Vault Secrets client using DefaultAzureCredential.

LANGUAGE: go
CODE:
import (
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/security/keyvault/azsecrets"
)

func main() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		// TODO: handle error
	}

	client := azsecrets.NewClient("https://<TODO: your vault name>.vault.azure.net", cred, nil)
}

----------------------------------------

TITLE: Creating a Fake Virtual Machines Server in Go
DESCRIPTION: This snippet shows how to create a fake server for virtual machines using the 'fake' subpackage from the Azure SDK for Go.

LANGUAGE: go
CODE:
import "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute/v5/fake"

myFakeVirtualMachinesServer := fake.VirtualMachinesServer{}

----------------------------------------

TITLE: Configuring Logging for Azure SDK in Go
DESCRIPTION: This code snippet demonstrates how to configure logging for the Azure SDK in Go. It sets up a listener to print log output to stdout.

LANGUAGE: go
CODE:
import (
  "fmt"
  azlog "github.com/Azure/azure-sdk-for-go/sdk/azcore/log"
)

// print log output to stdout
azlog.SetListener(func(event azlog.Event, s string) {
    fmt.Printf("[%s] %s\n", event, s)
})

----------------------------------------

TITLE: Authenticating Web PubSub Client with Service Principal
DESCRIPTION: Creates a Web PubSub client using DefaultAzureCredential for authentication. Requires endpoint URL from Azure Portal.

LANGUAGE: go
CODE:
import (
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/messaging/azwebpubsub"
	"log"
)

func main() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}

	client, err := azwebpubsub.NewClient("<your Web PubSub's endpoint URL>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
}

----------------------------------------

TITLE: Connecting Fake Server to Client Instance in Go
DESCRIPTION: This snippet shows how to connect a fake server to a client instance during its construction using the Azure SDK for Go. It demonstrates creating a fake TokenCredential and setting up the client options with a fake transport.

LANGUAGE: go
CODE:
import azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"

client, err := armcompute.VirtualMachinesClient("fake-subscription-id", &azfake.TokenCredential{}, &arm.ClientOptions{
	ClientOptions: azcore.ClientOptions{
		Transport: fake.NewVirtualMachinesServerTransport(&myFakeVirtualMachinesServer),
	},
})

----------------------------------------

TITLE: Authenticating with Shared Key Credential in Go
DESCRIPTION: Shows how to create a client with a shared key credential in the azfile module. The credential is passed directly to the client constructor, replacing the previous Pipeline approach.

LANGUAGE: go
CODE:
client, err := service.NewClientWithSharedKeyCredential("<my storage account URL>", cred, nil)

----------------------------------------

TITLE: Accessing Dead Letter Queues with azservicebus in Go
DESCRIPTION: Shows how to create a Receiver for a dead letter queue using the new azservicebus package. This approach is consistent for both queues and subscriptions.

LANGUAGE: go
CODE:
receiver, err := client.NewReceiverForQueue(
	queueName,
	&azservicebus.ReceiverOptions{
		ReceiveMode: azservicebus.ReceiveModePeekLock,
		SubQueue:    azservicebus.SubQueueDeadLetter,
	})

//or

receiver, err := client.NewReceiverForSubscription(
  topicName,
  subscriptionName,
  &azservicebus.ReceiverOptions{
    ReceiveMode: azservicebus.ReceiveModePeekLock,
    SubQueue:    azservicebus.SubQueueDeadLetter,
  })

----------------------------------------

TITLE: Creating Cosmos DB Client with Microsoft Entra Authentication
DESCRIPTION: Example of creating a Cosmos DB client using Microsoft Entra identity authentication.

LANGUAGE: go
CODE:
import "github.com/Azure/azure-sdk-for-go/sdk/azidentity"

cred, err := azidentity.NewDefaultAzureCredential(nil)
handle(err)
client, err := azcosmos.NewClient("myAccountEndpointURL", cred, nil)
handle(err)

----------------------------------------

TITLE: Managing Resource Groups
DESCRIPTION: Complete example of creating, updating, listing, and deleting resource groups

LANGUAGE: go
CODE:
func createResourceGroup(ctx context.Context) (*armresources.ResourceGroupsClientCreateOrUpdateResponse, error) {
    param := armresources.ResourceGroup{
        Location: to.Ptr(location),
    }
    resp, err := rgClient.CreateOrUpdate(ctx, resourceGroupName, param, nil)
    return &resp, err
}

LANGUAGE: go
CODE:
func updateResourceGroup(ctx context.Context) (*armresources.ResourceGroupsClientUpdateResponse, error) {
    update := armresources.ResourceGroupPatchable{
        Tags: map[string]*string{
            "new": to.Ptr("tag"),
        },
    }
    resp,err :=rgClient.Update(ctx, resourceGroupName, update, nil)
    return  &resp, err
}

LANGUAGE: go
CODE:
func listResourceGroups(ctx context.Context) ([]*armresources.ResourceGroup, error) {
    pager := rgClient.NewListPager(nil)
    var resourceGroups []*armresources.ResourceGroup
    for pager.More() {
        nextResult, err := pager.NextPage(ctx)
        if err != nil {
            return nil, err
        }
        if nextResult.ResourceGroupListResult.Value != nil {
            resourceGroups = append(resourceGroups, nextResult.ResourceGroupListResult.Value...)
        }
    }
    return resourceGroups, nil
}

LANGUAGE: go
CODE:
func deleteResourceGroup(ctx context.Context) error {
    poller, err := rgClient.BeginDelete(ctx, resourceGroupName, nil)
    if err != nil {
        return err
    }
    _, err = poller.PollUntilDone(ctx, nil)
    return err
}

----------------------------------------

TITLE: Installing Azure Cosmos DB SDK with Go
DESCRIPTION: Command to install the Azure Cosmos DB SDK for Go using the go get command.

LANGUAGE: bash
CODE:
go get -u github.com/Azure/azure-sdk-for-go/sdk/data/azcosmos

----------------------------------------

TITLE: Adding Attributes to StartSpanOptions
DESCRIPTION: Added field 'Attributes' to runtime.StartSpanOptions to simplify creating spans with attributes.

LANGUAGE: Go
CODE:
span := runtime.StartSpan(ctx, "operation", &runtime.StartSpanOptions{
    Attributes: map[string]interface{}{
        "key": "value",
    },
})

----------------------------------------

TITLE: Iterating Directory Contents with Pager in Go
DESCRIPTION: Demonstrates how to list files and directories using the new Pager approach in the azfile module. This replaces the explicit Marker type used in azure-storage-file-go for pagination.

LANGUAGE: go
CODE:
dirClient, err := directory.NewClientWithSharedKeyCredential("<directory URL>", cred, options)
// TODO: handle err

pager := dirClient.NewListFilesAndDirectoriesPager(nil)
for pager.More() {
	page, err := pager.NextPage(context.TODO())
	// process results
}

----------------------------------------

TITLE: Creating Azure Policy Insight Policy Events Client in Go
DESCRIPTION: This snippet shows how to create a specific client (PolicyEventsClient) using the previously created client factory. This client provides access to policy event-related APIs.

LANGUAGE: go
CODE:
client := clientFactory.NewPolicyEventsClient()

----------------------------------------

TITLE: Queue Service API Operations
DESCRIPTION: Example showing basic queue operations including creation, message enqueue/dequeue, and deletion

LANGUAGE: go
CODE:
// shared key credential set up
cred := azqueue.NewSharedKeyCredential(accountName, accountKey)

// instantiate service client
serviceClient, err := azqueue.NewServiceClientWithSharedKeyCredential(account, cred, nil)
// TODO: handle error

// 1. create queue
queueClient := serviceClient.NewQueueClient(queueName)
_, err = queueClient.Create(context.TODO(), nil)
// TODO: handle error

// 2. enqueue message
_, err = queueClient.EnqueueMessage(context.TODO(), message, nil)
// TODO: handle error

// 3. dequeue message
_, err = queueClient.DequeueMessage(context.TODO(), nil)
// TODO: handle error

// 4. delete queue
_, err =queueClient.Delete(context.TODO(), nil)
// TODO: handle error

----------------------------------------

TITLE: Implementing GlobalPerfTest Interface for Azure Blob Upload Test in Go
DESCRIPTION: Demonstrates the implementation of the GlobalPerfTest interface for an Azure Blob upload performance test. It includes global setup, cleanup, and creation of individual test instances.

LANGUAGE: Go
CODE:
type uploadTestGlobal struct {
	perf.PerfTestOptions
	containerName         string
	blobName              string
	globalContainerClient azblob.ContainerClient
}

// NewUploadTest is called once per process
func NewUploadTest(ctx context.Context, options perf.PerfTestOptions) (perf.GlobalPerfTest, error) {
	u := &uploadTestGlobal{
		PerfTestOptions: options,
		containerName:   "uploadcontainer",
		blobName:        "uploadblob",
	}

	connStr, ok := os.LookupEnv("AZURE_STORAGE_CONNECTION_STRING")
	if !ok {
		return nil, fmt.Errorf("the environment variable 'AZURE_STORAGE_CONNECTION_STRING' could not be found")
	}

	containerClient, err := azblob.NewContainerClientFromConnectionString(connStr, u.containerName, nil)
	if err != nil {
		return nil, err
	}
	u.globalContainerClient = containerClient
	_, err = u.globalContainerClient.Create(context.Background(), nil)
	if err != nil {
		return nil, err
	}

	return u, nil
}

func (m *uploadTestGlobal) GlobalCleanup(ctx context.Context) error {
	connStr, ok := os.LookupEnv("AZURE_STORAGE_CONNECTION_STRING")
	if !ok {
		return fmt.Errorf("the environment variable 'AZURE_STORAGE_CONNECTION_STRING' could not be found")
	}

	containerClient, err := azblob.NewContainerClientFromConnectionString(connStr, m.containerName, nil)
	if err != nil {
		return err
	}

	_, err = containerClient.Delete(context.Background(), nil)
	return err
}

// NewPerfTest is called once per goroutine
func (g *uploadTestGlobal) NewPerfTest(ctx context.Context, options *perf.PerfTestOptions) (perf.PerfTest, error) {
	u := &uploadPerfTest{
		uploadTestGlobal: g,
		PerfTestOptions:  *options,
	}

	connStr, ok := os.LookupEnv("AZURE_STORAGE_CONNECTION_STRING")
	if !ok {
		return nil, fmt.Errorf("the environment variable 'AZURE_STORAGE_CONNECTION_STRING' could not be found")
	}

	containerClient, err := azblob.NewContainerClientFromConnectionString(
		connStr,
		u.uploadTestGlobal.containerName,
		&azblob.ClientOptions{
			Transporter: u.PerfTestOptions.Transporter,
		},
	)
	if err != nil {
		return nil, err
	}
	bc := containerClient.NewBlockBlobClient(u.blobName)
	u.blobClient = bc

	data, err := perf.NewRandomStream(uploadTestOpts.size)
	if err != nil {
		return nil, err
	}
	u.data = data

	return u, nil
}

----------------------------------------

TITLE: Creating Azure Cosmos DB Cassandra Clusters Client in Go
DESCRIPTION: This snippet shows how to create a specific client (in this case, for Cassandra clusters) using the client factory. This allows access to Cassandra-related APIs in Azure Cosmos DB.

LANGUAGE: go
CODE:
client := clientFactory.NewCassandraClustersClient()

----------------------------------------

TITLE: Azure Identity Integration with azservicebus Client in Go
DESCRIPTION: Shows how to create an azservicebus Client using Azure Identity credentials, specifically DefaultAzureCredential, for authentication.

LANGUAGE: go
CODE:
credential, err := azidentity.NewDefaultAzureCredential(nil)
client, err := azservicebus.NewClient("<ex: myservicebus.servicebus.windows.net>", credential, nil)

----------------------------------------

TITLE: Resuming Long-Running Operations with Tokens in Go
DESCRIPTION: Demonstrates how to serialize and resume a long-running operation using resume tokens. This allows for recreating a poller in a different process or after an interruption.

LANGUAGE: go
CODE:
ctx := context.TODO() // your context
poller, err := client.BeginCreate(ctx, "resource_identifier", "additonal_parameter", nil)
if err != nil {
    // handle error...
}
token, err := poller.ResumeToken()
if err != nil {
    // handle error...
}

// ... 

// recreate the poller from the token
poller, err = client.BeginCreate(ctx, "", "", &armresources.ResourceGroupsClientBeginCreateOptions{
    ResumeToken: token,
})
resp, err = poller.PollUntilDone(ctx, nil)
if err != nil {
    // handle error...
}
// dealing with `resp`

----------------------------------------

TITLE: Creating Azure Managed Service Identity Client Factory in Go
DESCRIPTION: This code creates a client factory for Azure Managed Service Identity, which can be used to instantiate various clients in the module. It requires a subscription ID and credential.

LANGUAGE: go
CODE:
clientFactory, err := armmsi.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Creating Entities in Azure Tables
DESCRIPTION: Create entities in an Azure Tables table using the client.

LANGUAGE: go
CODE:
import (
    "context"
    "encoding/json"
    "time"

    "github.com/Azure/azure-sdk-for-go/sdk/data/aztables"
)

func main() {
    cred, err := aztables.NewSharedKeyCredential("<myAccountName>", "<myAccountKey>")
    if err != nil {
        panic(err)
    }

    service, err := aztables.NewServiceClient("https://<myAccountName>.table.core.windows.net", cred, nil)
    if err != nil {
        panic(err)
    }

    client, err := service.NewClient("myTable")
    if err != nil {
        panic(err)
    }

    myEntity := aztables.EDMEntity{
        Entity: aztables.Entity{
            PartitionKey: "001234",
            RowKey: "RedMarker",
        },
        Properties: map[string]any{
            "Stock": 15,
            "Price": 9.99,
            "Comments": "great product",
            "OnSale": true,
            "ReducedPrice": 7.99,
            "PurchaseDate": aztables.EDMDateTime(time.Date(2021, time.August, 21, 1, 1, 0, 0, time.UTC)),
            "BinaryRepresentation": aztables.EDMBinary([]byte{"Bytesliceinfo"})
        }
    }
    marshalled, err := json.Marshal(myEntity)
    if err != nil {
        panic(err)
    }

    resp, err := client.AddEntity(context.TODO(), marshalled, nil)
    if err != nil {
        panic(err)
    }
}

----------------------------------------

TITLE: Configuring Azure SDK Logging in Go
DESCRIPTION: Example showing how to set up logging for the Azure SDK using azcore's logging implementation. Demonstrates configuring a custom log listener to output log events to stdout.

LANGUAGE: go
CODE:
import (
  "fmt"
  azlog "github.com/Azure/azure-sdk-for-go/sdk/azcore/log"
)

// print log output to stdout
azlog.SetListener(func(event azlog.Event, s string) {
    fmt.Printf("[%s] %s\n", event, s)
})

----------------------------------------

TITLE: Accessing Raw HTTP Response in Container Registry Client
DESCRIPTION: Demonstrates how to capture and access the raw http.Response from Container Registry operations using runtime.WithCaptureResponse context modification.

LANGUAGE: go
CODE:
import "github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"

var response *http.Response
ctx := runtime.WithCaptureResponse(context.TODO(), &response)
_, err = client.GetRepositoryProperties(ctx, "library/hello-world", nil)
if err != nil {
	// TODO: handle error
}
// TODO: do something with response

----------------------------------------

TITLE: Adding OpenTelemetry Support in Azure Cosmos DB Go SDK
DESCRIPTION: Implementation of OpenTelemetry trace spans support in the Azure SDK for Go Cosmos DB client. This feature was added in version 1.1.0.

LANGUAGE: markdown
CODE:
* Added support for OpenTelemetry trace spans. See [PR 23268](https://github.com/Azure/azure-sdk-for-go/pull/23268)

----------------------------------------

TITLE: Installing ADLS Gen2 SDK Packages
DESCRIPTION: Instructions for installing the ADLS Gen2 Storage SDK and Azure Identity packages using go get command.

LANGUAGE: powershell
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/storage/azdatalake
go get github.com/Azure/azure-sdk-for-go/sdk/azidentity

----------------------------------------

TITLE: Creating Azure Storage Account with Azure CLI
DESCRIPTION: Use Azure CLI to create a new Storage Account for use with the Azure File Storage SDK.

LANGUAGE: powershell
CODE:
az storage account create --name MyStorageAccount --resource-group MyResourceGroup --location westus --sku Standard_LRS

----------------------------------------

TITLE: Installing Azure Blob Storage Go Packages
DESCRIPTION: Commands to install the required Go packages for Azure Blob Storage and Azure Identity

LANGUAGE: bash
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/storage/azblob
go get github.com/Azure/azure-sdk-for-go/sdk/azidentity

----------------------------------------

TITLE: Managing TCP Connections with ConsumerClient in Go
DESCRIPTION: Demonstrates how to create and manage TCP connections and AMQP links using the ConsumerClient. Shows connection ownership and partition client creation patterns.

LANGUAGE: go
CODE:
// consumerClient will own a TCP connection.
consumerClient, err := azeventhubs.NewConsumerClient(/* arguments elided for example */)      

// Close the TCP connection (and any child links)
defer consumerClient.Close(context.TODO())    

// this call will lazily create a set of AMQP links using the consumerClient's TCP connection.
partClient0, err := consumerClient.NewPartitionClient("0", nil)
defer partClient0.Close(context.TODO())     // will close the AMQP link, not the connection

// this call will also lazily create a set of AMQP links using the consumerClient's TCP connection.
partClient1, err := consumerClient.NewPartitionClient("1", nil)
defer partClient1.Close(context.TODO())     // will close the AMQP link, not the connection

----------------------------------------

TITLE: Initializing azblob Client in Go
DESCRIPTION: Creates a new azblob client using a storage account URL and credential. The ClientOptions parameter is set to nil to use default options.

LANGUAGE: go
CODE:
client, err := azblob.NewClient("<my storage account URL>", cred, nil)

----------------------------------------

TITLE: Defining File Upload Request Body Schema in Go for Azure SDK
DESCRIPTION: This struct defines the schema for the request body when uploading files using the Azure SDK for Go. It includes required fields for file data and purpose, as well as an optional filename field.

LANGUAGE: Go
CODE:
type Paths1Filz8PFilesPostRequestbodyContentMultipartFormDataSchema struct {
	// REQUIRED; The file data (not filename) to upload.
	File *string

	// REQUIRED; The intended purpose of the file.
	Purpose *FilePurpose

	// A filename to associate with the uploaded data.
	Filename *string
}

----------------------------------------

TITLE: Creating a Service Client with Shared Key Credential in Go
DESCRIPTION: Demonstrates how to create a new service client using a shared key credential in the azfile module. This replaces the previous method of creating a Pipeline with credentials.

LANGUAGE: go
CODE:
client, err := service.NewClientWithSharedKeyCredential("<my storage account URL>", sharedKeyCred, nil)

----------------------------------------

TITLE: Configuring Metrics Query Client Generation for Azure SDK for Go
DESCRIPTION: YAML configuration for generating the Metrics Query client in the Azure SDK for Go. It specifies input files and includes directives for renaming operations and customizing field names.

LANGUAGE: yaml
CODE:
title: Metrics Query Client
input-file: 
    - https://github.com/Azure/azure-rest-api-specs/blob/21f5332f2dc7437d1446edf240e9a3d4c90c6431/specification/monitor/resource-manager/Microsoft.Insights/stable/2018-01-01/metricDefinitions_API.json
    - https://github.com/Azure/azure-rest-api-specs/blob/21f5332f2dc7437d1446edf240e9a3d4c90c6431/specification/monitor/resource-manager/Microsoft.Insights/stable/2018-01-01/metrics_API.json
    - https://github.com/Azure/azure-rest-api-specs/blob/21f5332f2dc7437d1446edf240e9a3d4c90c6431/specification/monitor/resource-manager/Microsoft.Insights/preview/2017-12-01-preview/metricNamespaces_API.json

directive:
  # rename metric operations to generate as a separate metrics client
  - rename-operation:
      from: Metrics_List
      to: Metrics_QueryResource
  - rename-operation:
      from: MetricDefinitions_List
      to: Metrics_ListDefinitions
  - rename-operation:
      from: MetricNamespaces_List
      to: Metrics_ListNamespaces

  # rename some metrics fields
  - from: swagger-document
    where: $.definitions.Metric.properties.timeseries
    transform: $["x-ms-client-name"] = "TimeSeries"
  - from: swagger-document
    where: $.definitions.TimeSeriesElement.properties.metadatavalues
    transform: $["x-ms-client-name"] = "MetadataValues"
  - from: swagger-document
    where: $.definitions.Response.properties.resourceregion
    transform: $["x-ms-client-name"] = "ResourceRegion"
  - from: swagger-document
    where: $.parameters.MetricNamespaceParameter
    transform: $["x-ms-client-name"] = "MetricNamespace"
  - from: swagger-document
    where: $.parameters.MetricNamesParameter
    transform: $["x-ms-client-name"] = "MetricNames"
  - from: swagger-document
    where: $.parameters.OrderByParameter
    transform: $["x-ms-client-name"] = "OrderBy"

  # change type of MetricsClientQueryResourceOptions.Aggregation from *string to []*AggregationType
  - from: options.go
    where: $
    transform: return $.replace(/Aggregation \*string/g, "Aggregation []*AggregationType");
  - from: 
        - metrics_client.go
        - metricsbatch_client.go
    where: $
    transform: return $.replace(/\*options.Aggregation/g, "aggregationTypeToString(options.Aggregation)");
  - from: swagger-document
    where: $.parameters.AggregationsParameter
    transform: $["description"] = "The list of aggregation types to retrieve"

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK Go Generation
DESCRIPTION: This YAML configuration specifies settings for AutoRest to generate the Azure SDK for Go. It requires specific Azure REST API specifications, sets the license header, module version, and includes directives to modify certain operations.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/432872fac1d0f8edcae98a0e8504afc0ee302710/specification/automation/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/432872fac1d0f8edcae98a0e8504afc0ee302710/specification/automation/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 0.9.0
directive:
  - where-operation: DscConfiguration_CreateOrUpdate
    transform: delete $['x-ms-examples']
  - where-operation: DscConfiguration_Update
    transform: delete $['x-ms-examples']

----------------------------------------

TITLE: Configuring Advanced Logs Query Options in Go
DESCRIPTION: Set up advanced options for logs queries, including increased wait time, statistics, and visualization data using the LogsQueryOptions struct.

LANGUAGE: go
CODE:
azquery.LogsClientQueryWorkspaceOptions{
			Options: &azquery.LogsQueryOptions{
				Statistics:    to.Ptr(true),
				Visualization: to.Ptr(true),
				Wait:          to.Ptr(600),
			},
		}

----------------------------------------

TITLE: Configuring Azure Cloud Environment
DESCRIPTION: Example showing credential configuration for sovereign/private clouds using azcore/cloud package

LANGUAGE: go
CODE:
import "github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud"

opts := azidentity.ClientSecretCredentialOptions{}
opts.Cloud = cloud.AzureGovernment
cred, err := azidentity.NewClientSecretCredential(tenantID, clientID, secret, &opts)

----------------------------------------

TITLE: Creating File Upload Request in Azure SDK Go Client
DESCRIPTION: Creates an HTTP POST request for file upload with multipart form data. The method sets required headers, configures the request URL, and includes file content and purpose in the form data. Handles uploading files to the /files endpoint with proper request configuration.

LANGUAGE: go
CODE:
// uploadFileCreateRequest creates the UploadFile request.
// another line of documentation.
func (client *Client) uploadFileCreateRequest(ctx context.Context, file string, purpose FilePurpose, options *ClientUploadFileOptions) (*policy.Request, error) {
	urlPath := "/files"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.SetMultipartFormData(req, map[string]any{
			"file": file,
			"purpose": purpose,
			"Filename": Filename,
	}); err != nil {
		return nil, err
	}
	return req, nil
}

----------------------------------------

TITLE: Enumerating Filesystem Paths
DESCRIPTION: Example demonstrating how to list paths within a filesystem using pagination.

LANGUAGE: go
CODE:
const (
	fs = "https://MYSTORAGEACCOUNT.dfs.core.windows.net/sample-fs"
)

// authenticate with Azure Active Directory
cred, err := azidentity.NewDefaultAzureCredential(nil)
// TODO: handle error

// create a filesystem client for the specified storage account
client, err := filesystem.NewClient(fs, cred, nil)
// TODO: handle error

// path listings are returned across multiple pages
pager := client.NewListPathsPager(true, nil)

// continue fetching pages until no more remain
for pager.More() {
  // advance to the next page
	page, err := pager.NextPage(context.TODO())
	// TODO: handle error

	// print the path names for this page
	for _, path := range page.PathList.Paths {
		fmt.Println(*path.Name)
        fmt.Println(*path.IsDirectory)
	}
}

----------------------------------------

TITLE: Creating a Table in Azure Tables
DESCRIPTION: Create a new table in Azure Tables using the service client.

LANGUAGE: go
CODE:
import (
    "context"
    "fmt"
    "os"

    "github.com/Azure/azure-sdk-for-go/sdk/azidentity"
    "github.com/Azure/azure-sdk-for-go/sdk/data/aztables"
)

func main() {
    cred, err := azidentity.NewDefaultAzureCredential(nil)
    if err != nil {
        panic(err)
    }
    accountName, ok := os.LookupEnv("TABLES_STORAGE_ACCOUNT_NAME")
    if !ok {
        panic("TABLES_STORAGE_ACCOUNT_NAME could not be found")
    }
    serviceURL := fmt.Sprintf("https://%s.table.core.windows.net", accountName)

    service, err := aztables.NewServiceClient(serviceURL, cred, nil)
    if err != nil {
        panic(err)
    }

    // Create a table
    _, err = service.CreateTable(context.TODO(), "fromServiceClient", nil)
    if err != nil {
        panic(err)
    }
}

----------------------------------------

TITLE: Creating Azure Database for PostgreSQL Client Factory in Go
DESCRIPTION: Initializes a client factory for Azure Database for PostgreSQL using a subscription ID and credential.

LANGUAGE: go
CODE:
clientFactory, err := armpostgresql.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Setting Azure Environment Variables
DESCRIPTION: Commands to set required Azure authentication environment variables on Linux

LANGUAGE: sh
CODE:
export AZURE_CLIENT_ID="__CLIENT_ID__"
export AZURE_CLIENT_SECRET="__CLIENT_SECRET__"
export AZURE_TENANT_ID="__TENANT_ID__"
export AZURE_SUBSCRIPTION_ID="__SUBSCRIPTION_ID__"

----------------------------------------

TITLE: Configuring Azure Key Vault Client with DisableChallengeResourceVerification in Go
DESCRIPTION: This code snippet demonstrates how to create an Azure Key Vault client with the DisableChallengeResourceVerification option set to true. This is useful when working with mock services or non-transparent proxies for testing purposes.

LANGUAGE: go
CODE:
vaultURL := "https://myvault.vault.azure.net"
credential, err := azidentity.NewDefaultAzureCredential(nil)
options := azsecrets.ClientOptions{
    DisableChallengeResourceVerification: true,
}
client := azsecrets.NewClient(vaultURI, credential, &options)

----------------------------------------

TITLE: Creating an Azure Logic Apps Workflows Client in Go
DESCRIPTION: This snippet shows how to create a specific client for working with Azure Logic Apps workflows using the client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewWorkflowsClient()

----------------------------------------

TITLE: Initializing Performance Test Main Function in Go
DESCRIPTION: Creates a main function that uses perf.Run to register and execute performance tests. It demonstrates how to set up multiple tests with optional flag registration.

LANGUAGE: Go
CODE:
package main

import (
    "github.com/Azure/azure-sdk-for-go/sdk/internal/perf"
)

// uploadTestRegister registers flags for the "UploadBlobTest"
// This is optional and does not to be included for every test.
func uploadTestRegister() {
	flag.IntVar(&uploadTestOpts.size, "size", 10240, "Size in bytes of data to be transferred in upload or download tests. Default is 10240.")
}

func main() {
	perf.Run(map[string]perf.PerfMethods{
		"UploadBlobTest":   {Register: uploadTestRegister, New: NewUploadTest},
		"ListBlobTest":     {Register: listTestRegister, New: NewListTest},
		"DownloadBlobTest": {Register: downloadTestRegister, New: NewDownloadTest},
	})
}

----------------------------------------

TITLE: Custom HTTP Client in Latest Version (sdk/resourcemanager/**/arm**)
DESCRIPTION: Example of using a custom HTTP client in the latest version of Azure SDK for Go.

LANGUAGE: go
CODE:
import "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
import "github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
import "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armresources"

LANGUAGE: go
CODE:
httpClient := NewYourOwnHTTPClient{}
options := &arm.ClientOptions{
    ClientOptions: policy.ClientOptions{
        Transport: &httpClient,
    },
}
clientFactory, err := armresources.NewClientFactory(<subscription ID>, credential, &options)
if err != nil {
    log.Fatal(err)
}
client := clientFactory.NewResourceGroupsClient()

----------------------------------------

TITLE: Creating Azure Cosmos DB Client Factory in Go
DESCRIPTION: This snippet demonstrates how to create a client factory for Azure Cosmos DB. It requires a subscription ID and credentials, and returns a factory that can be used to create specific clients.

LANGUAGE: go
CODE:
clientFactory, err := armcosmos.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Managing Filesystems
DESCRIPTION: Example showing how to create and delete a filesystem in ADLS Gen2 storage.

LANGUAGE: go
CODE:
const (
	fs = "https://MYSTORAGEACCOUNT.dfs.core.windows.net/sample-fs"
)

// authenticate with Azure Active Directory
cred, err := azidentity.NewDefaultAzureCredential(nil)
// TODO: handle error

// create a client for the specified storage account
client, err := filesystem.NewClient(fs, cred, nil)
// TODO: handle error

_, err = client.Create(context.TODO(), nil)
// TODO: handle error

_, err = client.Delete(context.TODO(), nil)
// TODO: handle error

----------------------------------------

TITLE: Verifying App Service Managed Identity Endpoint Availability
DESCRIPTION: This curl command checks the availability of the managed identity endpoint in an Azure App Service environment. It uses environment variables to construct the request to the identity endpoint.

LANGUAGE: sh
CODE:
curl "$IDENTITY_ENDPOINT?resource=https://management.core.windows.net&api-version=2019-08-01" -H "X-IDENTITY-HEADER: $IDENTITY_HEADER"

----------------------------------------

TITLE: Implementing Cross-Region Availability and Failover in Azure Cosmos DB Go SDK
DESCRIPTION: Addition of cross-region availability and failover mechanics supporting Azure Cosmos DB SDK multiregional environment behavior in the Go client. This feature was added in version 1.0.0.

LANGUAGE: markdown
CODE:
* Added cross-region availability and failover mechanics supporting [Azure Cosmos DB SDK multiregional environment behavior](https://learn.microsoft.com/azure/cosmos-db/nosql/troubleshoot-sdk-availability)

----------------------------------------

TITLE: Creating Azure Service Bus Client Factory in Go
DESCRIPTION: Initializes a client factory for Azure Service Bus with subscription ID and credentials.

LANGUAGE: go
CODE:
clientFactory, err := armservicebus.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Authenticating with Azure using Default Credentials in Go
DESCRIPTION: Creates a default Azure credential for authentication with Azure services.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Setting Telemetry Spans for Azure Cosmos DB Go SDK
DESCRIPTION: Configuration of Telemetry spans in the Azure SDK for Go Cosmos DB client. All spans are set to have the Kind of SpanKindClient, and request_charge and status_code are added to all trace spans.

LANGUAGE: markdown
CODE:
* Set all Telemetry spans to have the Kind of SpanKindClient. See [PR 23618](https://github.com/Azure/azure-sdk-for-go/pull/23618)
* Set request_charge and status_code on all trace spans. See [PR 23652](https://github.com/Azure/azure-sdk-for-go/pull/23652)

----------------------------------------

TITLE: Installing Azure File Storage SDK for Go
DESCRIPTION: Use go get to install the Azure File Storage SDK and optionally the azidentity module for Azure Active Directory authentication.

LANGUAGE: powershell
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/storage/azfile
go get github.com/Azure/azure-sdk-for-go/sdk/azidentity

----------------------------------------

TITLE: Long Running Operations in Latest Version (sdk/resourcemanager/**/arm**)
DESCRIPTION: Example of handling long-running operations in the latest version of Azure SDK for Go.

LANGUAGE: go
CODE:
poller, err := client.BeginCreateOrUpdate(context.TODO(), "<resource group name>", "<virtual machine name>", param, nil)
if err != nil {
    log.Fatal(err)
}
resp, err := poller.PollUntilDone(context.TODO(), nil)
if err != nil {
    log.Fatal(err)
}
log.Printf("virtual machine ID: %v", *resp.VirtualMachine.ID)

----------------------------------------

TITLE: Client Secret Authentication Implementation
DESCRIPTION: Shows how to implement client secret authentication in both library versions, including client initialization and authorization.

LANGUAGE: go
CODE:
import (
    "github.com/Azure/azure-sdk-for-go/services/resources/mgmt/2018-06-01/subscriptions"
    "github.com/Azure/go-autorest/autorest"
    "github.com/Azure/go-autorest/autorest/adal"
)

oauthCfg, err := adal.NewOAuthConfig("https://login.microsoftonline.com", tenantID)
handle(err)
spt, err := adal.NewServicePrincipalTokenWithSecret(
    *oauthCfg, clientID, "https://management.azure.com/", &adal.ServicePrincipalTokenSecret{ClientSecret: secret},
)
handle(err)

client := subscriptions.NewClient()
client.Authorizer = autorest.NewBearerAuthorizer(spt)

LANGUAGE: go
CODE:
import (
    "github.com/Azure/azure-sdk-for-go/sdk/azidentity"
    "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armsubscriptions"
)

cred, err := azidentity.NewClientSecretCredential(tenantID, clientID, secret, nil)
handle(err)

client, err := armsubscriptions.NewClient(cred, nil)
handle(err)

----------------------------------------

TITLE: Configuring Azure Compute Client for Sovereign Clouds in Go
DESCRIPTION: Example of how to configure the Azure Compute client factory to connect to sovereign clouds or Azure Stack using ClientOptions.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armcompute.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Authenticating with Azure using Default Azure Credential in Go
DESCRIPTION: Creates a default Azure credential for authentication with Azure services using the azidentity package.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Handling Environment Variables in Recorded Tests
DESCRIPTION: Demonstrates how to use environment variables in recorded tests while maintaining security.

LANGUAGE: Go
CODE:
func TestSomething(t *testing.T) {
    accountName := recording.GetEnvVariable(t, "TABLES_PRIMARY_ACCOUNT_NAME", "fakeaccountname")
    if recording.GetRecordMode() = recording.RecordMode {
        err := recording.AddURISanitizer("fakeaccountname", accountName, nil)
        require.NoError(t, err)
    }

    // Continue test
}

----------------------------------------

TITLE: Querying Metrics with armmonitor in Go
DESCRIPTION: This snippet shows how to create a metrics client and execute a metrics query using the new armmonitor module in the Azure SDK for Go. It demonstrates the differences from azquery, including naming changes and the use of separate clients for different functionalities.

LANGUAGE: go
CODE:
import (
	"context"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/monitor/armmonitor"
)

func main() {
	// create the client
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		//TODO: handle error
	}
	client, err := armmonitor.NewMetricsClient("<subscription-id>", cred, nil)
	if err != nil {
		//TODO: handle error
	}

	// execute the query
	res, err := client.List(context.Background(), "<resourceID>", &armmonitor.MetricsClientListOptions{
		Timespan:            to.Ptr("2021-04-20T09:00:00.000Z/2021-04-20T14:00:00.000Z"),
		Interval:            to.Ptr("PT6H"),
		Metricnames:         to.Ptr("BlobCount,BlobCapacity"),
		Aggregation:         to.Ptr("average,minimum,maximum"),
		Top:                 to.Ptr[int32](5),
		Orderby:             to.Ptr("average asc"),
		Filter:              to.Ptr("Tier eq '*'"),
		ResultType:          nil,
		Metricnamespace:     to.Ptr("Microsoft.Storage/storageAccounts/blobServices"),
		AutoAdjustTimegrain: to.Ptr(true),
		ValidateDimensions:  to.Ptr(false),
	})
	if err != nil {
		//TODO: handle partial error
	}
	_ = res
}

----------------------------------------

TITLE: Installing Azure Key Vault Keys and Azure Identity Packages in Go
DESCRIPTION: Use go get to install the required packages for Azure Key Vault Keys and Azure Identity authentication.

LANGUAGE: Bash
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/security/keyvault/azkeys
go get github.com/Azure/azure-sdk-for-go/sdk/azidentity

----------------------------------------

TITLE: Installing Azure OpenAI Extensions Packages with Go
DESCRIPTION: Commands to install the required Azure OpenAI extensions and optional Azure Identity packages using go get. The azidentity module is used for Azure Active Directory authentication with Azure OpenAI.

LANGUAGE: bash
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/ai/azopenaiextensions

# optional
go get github.com/Azure/azure-sdk-for-go/sdk/azidentity

----------------------------------------

TITLE: Configuring AutoRest for Go SDK Generation
DESCRIPTION: YAML configuration for AutoRest to generate Go SDK code. It specifies the input file, version, output settings, and security configuration.

LANGUAGE: yaml
CODE:
go: true
version: "^3.0.0"
input-file: https://github.com/Azure/azure-rest-api-specs/blob/d744b6bcb95ab4034832ded556dbbe58f4287c5b/specification/cosmos-db/data-plane/Microsoft.Tables/preview/2019-02-02/table.json
license-header: MICROSOFT_MIT_NO_VERSION
clear-output-folder: false
output-folder: internal
file-prefix: "zz_"
tag: package-2019-02
credential-scope: none
use: "@autorest/go@4.0.0-preview.59"
security: "AADToken"
security-scopes: "https://storage.azure.com/.default"
honor-body-placement: true
modelerfour:
  group-parameters: false
  seal-single-value-enum-by-default: true

----------------------------------------

TITLE: Creating an Azure App Service Client Factory in Go
DESCRIPTION: Initializes a client factory for Azure App Service. The factory is used to create specific clients for different App Service operations.

LANGUAGE: go
CODE:
clientFactory, err := armappservice.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Creating Azure Security Client Factory in Go
DESCRIPTION: This code creates a client factory for Azure Security operations. It requires a subscription ID and a credential object for authentication.

LANGUAGE: go
CODE:
clientFactory, err := armsecurity.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Authenticating with Service Principal
DESCRIPTION: Creates a Service Bus client using DefaultAzureCredential for authentication with a service principal

LANGUAGE: go
CODE:
import (
  "github.com/Azure/azure-sdk-for-go/sdk/azidentity"
  "github.com/Azure/azure-sdk-for-go/sdk/messaging/azservicebus"
)

func main() {
  credential, err := azidentity.NewDefaultAzureCredential(nil)

  if err != nil {
    panic(err)
  }

  client, err := azservicebus.NewClient("<ex: myservicebus.servicebus.windows.net>", credential, nil)

  if err != nil {
    panic(err)
  }
}

----------------------------------------

TITLE: Client Initialization in Latest Version (sdk/resourcemanager/**/arm**)
DESCRIPTION: Examples of client initialization in the latest version of Azure SDK for Go.

LANGUAGE: go
CODE:
import "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute"

LANGUAGE: go
CODE:
client, err := armcompute.NewVirtualMachinesClient("<SubscriptionId>", credential, nil)

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armcompute.NewClientFactory(<subscription ID>, credential, &options)
if err != nil {
    log.Fatal(err)
}
client := clientFactory.NewVirtualMachinesClient()

----------------------------------------

TITLE: Adding Recording Policy to Client Options in Go
DESCRIPTION: Shows how to add the custom recording policy to the client options for use in tests.

LANGUAGE: Go
CODE:
func TestSomething(t *testing.T) {
    p := NewRecordingPolicy(t)
    httpClient, err := recording.GetHTTPClient(t)
    require.NoError(t, err)

	options := &ClientOptions{
		ClientOptions: azcore.ClientOptions{
			PerCallPolicies: []policy.Policy{p},
			Transport:       client,
		},
	}

    client, err := NewClient("https://mystorageaccount.table.core.windows.net", myCred, options)
    require.NoError(t, err)
    // Continue test
}

----------------------------------------

TITLE: Creating an Azure Automanage Best Practices Production Profile Assignment in Go
DESCRIPTION: Assigns an Automanage Best Practices Production Configuration Profile to a specific VM.

LANGUAGE: go
CODE:
configProfileId := "/providers/Microsoft.Automanage/bestPractices/AzureBestPracticesProduction"

properties := armautomanage.ConfigurationProfileAssignmentProperties{
    ConfigurationProfile: &configProfileId,
}

assignment := armautomanage.ConfigurationProfileAssignment{
    Properties: &properties,
}

// assignment name must be 'default'
newAssignment, err = assignmentClient.CreateOrUpdate(context.Background(), "default", "resourceGroupName", "vmName", assignment, nil)

----------------------------------------

TITLE: Configuring Client Options for Different Clouds
DESCRIPTION: Sets up client options for connecting to different Azure clouds like Azure China using arm.ClientOptions

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armmachinelearning.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Configuring Client Factory with Custom Options
DESCRIPTION: Creates a client factory with custom options for connecting to different Azure clouds including sovereign clouds and Azure Stack

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armdeviceupdate.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Re-recording Tests for AzOpenAI Module
DESCRIPTION: These commands set up the environment for recording mode, run the tests to create new recordings, and update the assets file.

LANGUAGE: bash
CODE:
cd <root of the azopenai module>

export AZURE_RECORD_MODE=record
go test -count 1 -v ./...

# push the recording changes to the repo
test-proxy push -a assets.json

# commit our assets.json file now that it points
# to the new recordings.
git add assets.json
git commit -m "updated recordings"
git push

----------------------------------------

TITLE: Creating Azure ML Client Factory
DESCRIPTION: Initializes a client factory for Azure Machine Learning services using subscription ID and credentials

LANGUAGE: go
CODE:
clientFactory, err := armmachinelearning.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Creating Azure Monitor Client Factory
DESCRIPTION: Initializes a client factory for creating Azure Monitor service clients

LANGUAGE: go
CODE:
clientFactory, err := armmonitor.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Creating Azure Compute Client Factory in Go
DESCRIPTION: Code snippet showing how to create a client factory for Azure Compute services, which can be used to instantiate specific clients.

LANGUAGE: go
CODE:
clientFactory, err := armcompute.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Configuring Azure Authentication with autorest/adal and azidentity
DESCRIPTION: Demonstrates configuration setup for token providers in both autorest/adal and azidentity, showing how to configure endpoints and create service principal tokens.

LANGUAGE: go
CODE:
import "github.com/Azure/go-autorest/autorest/adal"

oauthCfg, err := adal.NewOAuthConfig("https://login.chinacloudapi.cn", tenantID)
handle(err)

spt, err := adal.NewServicePrincipalTokenWithSecret(
    *oauthCfg, clientID, "https://management.chinacloudapi.cn/", &adal.ServicePrincipalTokenSecret{ClientSecret: secret},
)

LANGUAGE: go
CODE:
import (
    "github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud"
    "github.com/Azure/azure-sdk-for-go/sdk/azidentity"
)

clientOpts := azcore.ClientOptions{Cloud: cloud.AzureChina}

cred, err := azidentity.NewClientSecretCredential(
    tenantID, clientID, secret, &azidentity.ClientSecretCredentialOptions{ClientOptions: clientOpts},
)
handle(err)

----------------------------------------

TITLE: Authenticating with Azure using Default Credentials in Go
DESCRIPTION: This snippet demonstrates how to create a default Azure credential for authentication. It uses the azidentity module to provide various authentication methods.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Running Automation Initialization Script in Bash
DESCRIPTION: Bash commands for navigating to the script directory and running the automation initialization script. This script sets up the necessary tools for SDK generation.

LANGUAGE: sh
CODE:
cd "~/azure-sdk-for-go/eng/scripts" # navigate to the script directory
./automation_init.sh

----------------------------------------

TITLE: Adding Span Attribute for Error Reporting
DESCRIPTION: Added Span Attribute 'error.type' to report an error when ending a span with runtime.StartSpan.

LANGUAGE: Go
CODE:
// When ending a span with an error
span.End(tracing.WithError(err))

----------------------------------------

TITLE: Creating Azure Traffic Manager Client Factory in Go
DESCRIPTION: This snippet shows how to create a client factory for Azure Traffic Manager using a subscription ID and credential.

LANGUAGE: go
CODE:
clientFactory, err := armtrafficmanager.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Error Handling in Latest Version (sdk/resourcemanager/**/arm**)
DESCRIPTION: Example of error handling in the latest version of Azure SDK for Go.

LANGUAGE: go
CODE:
import "github.com/Azure/azure-sdk-for-go/sdk/azcore"
import "github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"

LANGUAGE: go
CODE:
var rawResponse *http.Response
ctx := context.TODO() // your context
ctxWithResp := runtime.WithCaptureResponse(ctx, &rawResponse)
resp, err := resourceGroupsClient.CreateOrUpdate(ctxWithResp, resourceGroupName, resourceGroupParameters, nil)
if err != nil {
    // with error, you can get RawResponse from context
    log.Printf("Status code: %d", rawResponse.StatusCode)
    var respErr *azcore.ResponseError
    if errors.As(err, &respErr) {
        // with error, you can also get RawResponse from error
        log.Fatalf("Status code: %d", respErr.RawResponse.StatusCode)
    } else {
        log.Fatalf("Other error: %+v", err)
    }
}
// without error, you can get RawResponse from context
log.Printf("Status code: %d", rawResponse.StatusCode)

----------------------------------------

TITLE: Configuring Azure SDK Logging in Go
DESCRIPTION: Example showing how to configure custom logging for the Azure SDK, including writing to a file and filtering event types.

LANGUAGE: go
CODE:
import (
	"os"
	azlog "github.com/Azure/azure-sdk-for-go/sdk/azcore/log"
)

f, err := os.Create("cosmos-log-file.txt")
handle(err)
defer f.Close()

// Configure the listener to write to a file rather than to the console
azlog.SetListener(func(event azlog.Event, s string) {
	f.WriteString(s + "\n")
})

// Filter the types of events you'd like to log by removing the ones you're not interested in
azlog.SetEvents(azlog.EventRequest, azlog.EventResponse, azlog.EventRetryPolicy, azlog.EventResponseError)

----------------------------------------

TITLE: Formatting Go Code
DESCRIPTION: Command to run the default Go formatter on the package. This ensures consistent code formatting across the project.

LANGUAGE: bash
CODE:
go fmt

----------------------------------------

TITLE: Installing Azure SDK for Go
DESCRIPTION: Commands to install the Azure SDK for Go using either go get or dep ensure.

LANGUAGE: sh
CODE:
$ go get -u github.com/Azure/azure-sdk-for-go/...
$ dep ensure -add github.com/Azure/azure-sdk-for-go

----------------------------------------

TITLE: Authenticating with Azure
DESCRIPTION: Code to create an Azure credential using DefaultAzureCredential

LANGUAGE: go
CODE:
import "github.com/Azure/azure-sdk-for-go/sdk/azidentity"

cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Message Settlement with azservicebus Receiver in Go
DESCRIPTION: Demonstrates how to complete messages using the Receiver in the new azservicebus package, which is different from the previous approach where settlement was done on the Message itself.

LANGUAGE: go
CODE:
messages, err := receiver.ReceiveMessages(ctx, 10, nil)

for _, message := range messages {
  err = receiver.CompleteMessage(ctx, message, nil)
}

----------------------------------------

TITLE: Basic SDK Generation Configuration
DESCRIPTION: Defines core configuration parameters for generating the Go SDK including input/output paths, module name, and basic generation options

LANGUAGE: yaml
CODE:
input-file:
- ./testdata/generated/openapi.json
output-folder: ../azopenaiassistants
clear-output-folder: false
module: github.com/Azure/azure-sdk-for-go/sdk/ai/azopenaiassistants
license-header: MICROSOFT_MIT_NO_VERSION
openapi-type: data-plane
go: true
title: "OpenAIAssistants"
use: "@autorest/go@4.0.0-preview.63"
slice-elements-byval: true

----------------------------------------

TITLE: Enumerating Blobs in Go
DESCRIPTION: Example of listing all blobs in a container using pagination

LANGUAGE: go
CODE:
const (
	account       = "https://MYSTORAGEACCOUNT.blob.core.windows.net/"
	containerName = "sample-container"
)

cred, err := azidentity.NewDefaultAzureCredential(nil)
// TODO: handle error

client, err := azblob.NewClient(account, cred, nil)
// TODO: handle error

pager := client.NewListBlobsFlatPager(containerName, nil)

for pager.More() {
	page, err := pager.NextPage(context.TODO())
	// TODO: handle error

	for _, blob := range page.Segment.BlobItems {
		fmt.Println(*blob.Name)
	}
}

----------------------------------------

TITLE: Cloning Azure SDK for Go Repository in Bash
DESCRIPTION: Bash command for cloning a forked Azure SDK for Go repository. This is another prerequisite step for the SDK generation process.

LANGUAGE: sh
CODE:
git clone https://github.com/{YOUR_GITHUB_USERNAME}/azure-sdk-for-go.git

----------------------------------------

TITLE: Adding Regional Routing Support in Azure Cosmos DB Go SDK
DESCRIPTION: Implementation of regional routing support through ClientOptions.PreferredRegions in the Azure SDK for Go Cosmos DB client. This feature was added in version 1.0.0.

LANGUAGE: markdown
CODE:
* Added regional routing support through ClientOptions.PreferredRegions

----------------------------------------

TITLE: Configuring Client Factory with Custom Options
DESCRIPTION: Creates a client factory with custom options for connecting to different Azure clouds including sovereign clouds and Azure Stack.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armblockchain.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Creating Web PubSub Client
DESCRIPTION: Creates a new Web PubSub client instance using the client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewClient()

----------------------------------------

TITLE: Configuring Azure Support Client for Sovereign Clouds
DESCRIPTION: Sets up a client factory with custom options for connecting to sovereign clouds like Azure China

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armsupport.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Configuring AutoRest for Azure Metrics Query Client Generation in Go
DESCRIPTION: This YAML configuration file sets up AutoRest to generate the Metrics Query Client for the Azure SDK for Go. It specifies the input swagger file, output settings, and includes multiple directives for renaming operations, models, and fields to improve the generated code quality.

LANGUAGE: yaml
CODE:
title: Metrics Query Client
clear-output-folder: false
go: true
input-file: https://github.com/Azure/azure-rest-api-specs/blob/0b64ca7cbe3af8cd13228dfb783a16b8272b8be2/specification/monitor/data-plane/Microsoft.Insights/stable/2024-02-01/metricBatch.json
license-header: MICROSOFT_MIT_NO_VERSION
module: github.com/Azure/azure-sdk-for-go/sdk/monitor/query/azmetrics
openapi-type: "data-plane"
output-folder: ../azmetrics
security: "AADToken"
use: "@autorest/go@4.0.0-preview.61"
inject-spans: true
version: "^3.0.0"
slice-elements-byval: true

directive:
  # rename Batch to QueryResources
  - rename-operation:
        from: MetricsBatch_Batch
        to: Metrics_QueryResources

  # remove unused error models
  - from: swagger-document
    where: 
     - $.definitions..ErrorResponse
     - $.definitions..ErrorDetail
     - $.definitions..ErrorAdditionalInfo
    transform: $["x-ms-external"] = true

  # Rename MetricResultsResponse
  - rename-model:
      from: MetricResultsResponse
      to: MetricResults
  - from: 
        - models.go
        - models_serde.go
    where: $
    transform: return $.replace(/MetricResultsValuesItem/g, "MetricData");
  - from: swagger-document
    where: $.definitions.MetricResults.properties.values.items
    transform: $["description"] = "Metric data values."

  # renaming or fixing the casing of struct fields and parameters
  - from: swagger-document
    where: $.definitions.Metric.properties.timeseries
    transform: $["x-ms-client-name"] = "TimeSeries"
  - from: swagger-document
    where: $.parameters.MetricNamespaceParameter
    transform: $["x-ms-client-name"] = "metricNamespace"
  - from: swagger-document
    where: $.parameters.MetricNamesParameter
    transform: $["x-ms-client-name"] = "metricNames"
  - from: swagger-document
    where: $.parameters.StartTimeParameter
    transform: $["x-ms-client-name"] = "StartTime"
  - from: swagger-document
    where: $.parameters.EndTimeParameter
    transform: $["x-ms-client-name"] = "EndTime"
  - from: swagger-document
    where: $.definitions.ResourceIdList.properties.resourceids
    transform: $["x-ms-client-name"] = "ResourceIDs"
  - from: swagger-document
    where: $.definitions.MetricResults.properties.values.items.properties.starttime
    transform: $["x-ms-client-name"] = "StartTime"
  - from: swagger-document
    where: $.definitions.MetricResults.properties.values.items.properties.endtime
    transform: $["x-ms-client-name"] = "EndTime"
  - from: swagger-document
    where: $.definitions.MetricResults.properties.values.items.properties.resourceid
    transform: $["x-ms-client-name"] = "ResourceID"
  - from: swagger-document
    where: $.definitions.MetricResults.properties.values.items.properties.resourceregion
    transform: $["x-ms-client-name"] = "ResourceRegion"
  - from: swagger-document
    where: $.definitions.MetricResults.properties.values.items.properties.value
    transform: $["x-ms-client-name"] = "Values"
  - from: swagger-document
    where: $.definitions.TimeSeriesElement.properties.metadatavalues
    transform: $["x-ms-client-name"] = "MetadataValues"
  - from: swagger-document
    where: $.parameters.OrderByParameter
    transform: $["x-ms-client-name"] = "OrderBy"
  - from: swagger-document
    where: $.parameters.RollUpByParameter
    transform: $["x-ms-client-name"] = "RollUpBy"
  - from: client.go
    where: $
    transform: return $.replace(/batchRequest/g, "resourceIDs");

  # delete client name prefix from method options and response types
  - from:
      - client.go
      - options.go
      - response_types.go
    where: $
    transform: return $.replace(/Client(\w+)((?:Options|Response))/g, "$1$2");

----------------------------------------

TITLE: Authenticating with Azure Active Directory in Go
DESCRIPTION: Create a credential using azidentity and initialize a service client for Azure File Storage using Azure Active Directory authentication.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)
// TODO: handle err

client, err := service.NewClient("https://<my-storage-account-name>.file.core.windows.net/", cred, &service.ClientOptions{FileRequestIntent: to.Ptr(service.ShareTokenIntentBackup)})
// TODO: handle err

----------------------------------------

TITLE: Authenticating with Azure Credentials
DESCRIPTION: Creates default Azure credentials for authentication using the azidentity module

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Creating PostgreSQL Client Factory
DESCRIPTION: Initializes a client factory for creating PostgreSQL service clients with basic configuration.

LANGUAGE: go
CODE:
clientFactory, err := armpostgresqlflexibleservers.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Creating Azure ML Service Client
DESCRIPTION: Creates a specific client instance for batch deployments using the client factory

LANGUAGE: go
CODE:
client := clientFactory.NewBatchDeploymentsClient()

----------------------------------------

TITLE: Creating Azure Cognitive Services Client Factory in Go
DESCRIPTION: This code creates a client factory for Azure Cognitive Services. It requires a subscription ID and a credential object. The factory can be used to create specific clients for different services.

LANGUAGE: go
CODE:
clientFactory, err := armX.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Installing Azure Container Registry and Azure Identity packages in Go
DESCRIPTION: This snippet demonstrates how to install the required packages for using Azure Container Registry and Azure Identity in a Go project using the 'go get' command.

LANGUAGE: Bash
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/containers/azcontainerregistry
go get github.com/Azure/azure-sdk-for-go/sdk/azidentity

----------------------------------------

TITLE: Creating Certificates with New AzCertificates Module in Go
DESCRIPTION: Example showing certificate creation using the new azcertificates module. Uses azidentity for authentication and creates a dedicated certificates client with vault URL specified during initialization.

LANGUAGE: go
CODE:
import (
    "context"
	"fmt"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/security/keyvault/azcertificates"
)

func main() {
    vaultURL := "https://<TODO: your vault name>.vault.azure.net"
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		// TODO: handle error
	}
	
	client, err := azcertificates.NewClient(vaultURL, cred, nil)
	if err != nil {
		// TODO: handle error
	}

	createParams := azcertificates.CreateCertificateParameters{
		CertificatePolicy: &azcertificates.CertificatePolicy{
			IssuerParameters:          &azcertificates.IssuerParameters{Name: to.Ptr("self")},
			X509CertificateProperties: &azcertificates.X509CertificateProperties{Subject: to.Ptr("CN=DefaultPolicy")},
		},
	}
	resp, err := client.CreateCertificate(context.TODO(), "<cert name>", createParams, nil)
	if err != nil {
		// TODO: handle error
	}

	fmt.Println("Created a certificate with ID:", *resp.ID)
}

----------------------------------------

TITLE: Configuring AutoRest for Azure Queue SDK Generation in Go
DESCRIPTION: YAML configuration for AutoRest to generate Azure Queue SDK code in Go. Specifies input file, output settings, and various options for code generation.

LANGUAGE: yaml
CODE:
go: true
clear-output-folder: false
version: "^3.0.0"
license-header: MICROSOFT_MIT_NO_VERSION
input-file: "https://raw.githubusercontent.com/Azure/azure-rest-api-specs/5da3c08b92d05858b728b013b69502dc93485373/specification/storage/data-plane/Microsoft.QueueStorage/preview/2018-03-28/queue.json"
credential-scope: "https://storage.azure.com/.default"
output-folder: ../generated
file-prefix: "zz_"
openapi-type: "data-plane"
verbose: true
security: AzureKey
modelerfour:
  group-parameters: false
  seal-single-value-enum-by-default: true
  lenient-model-deduplication: true
export-clients: true
use: "@autorest/go@4.0.0-preview.45"

----------------------------------------

TITLE: Creating Default Azure Credential in Go
DESCRIPTION: This snippet demonstrates how to create a default Azure credential using the azidentity package. This credential is used for authenticating with Azure NetApp Files.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Validating Package Release with Go Get
DESCRIPTION: Command to verify that a package has been released properly by attempting to download it using the go get command. This example uses azcore v0.20.0 as a placeholder.

LANGUAGE: shell
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/azcore@v0.20.0

----------------------------------------

TITLE: Release History Documentation in Markdown
DESCRIPTION: Markdown formatted changelog documenting the version history, new features, breaking changes, and bug fixes for the Azure SDK for Go File Service package

LANGUAGE: markdown
CODE:
# Release History

## 1.5.1-beta.2 (Unreleased)

### Features Added

### Breaking Changes

### Bugs Fixed
* Fixed return value of DownloadBuffer when the HTTPRange count given is greater than the data length. Fixes [#23884](https://github.com/Azure/azure-sdk-for-go/issues/23884)
### Other Changes

## 1.5.1-beta.1 (2025-02-12)

### Features Added
* Upgraded service version to `2025-05-05`.
* NFS Over Rest API Request/Response changes in the following APIs - 
  CreateFile
  SetFileProperties
  GetFileProperties
  StartCopyFromUrl
  DownloadFile
  DeleteFile
  CreateDirectory
  GetDirectoryProperties
  SetDirectoryProperties
* NFS Over Rest, new API File CreateHardLink() Added

----------------------------------------

TITLE: Configuring Client Options for Different Clouds
DESCRIPTION: Sets up client options for connecting to different Azure clouds including sovereign clouds.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armcontainerservice.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Creating a Databases Client for Azure Database for MySQL in Go
DESCRIPTION: This snippet demonstrates how to create a specific client for working with databases in Azure Database for MySQL. It uses the previously created client factory to instantiate a new DatabasesClient, which provides access to database-related operations.

LANGUAGE: go
CODE:
client := clientFactory.NewDatabasesClient()

----------------------------------------

TITLE: Creating a Key using azkeys Module in Go
DESCRIPTION: This snippet shows how to create a key in Azure Key Vault using the new 'azkeys' module. It demonstrates the updated process of setting up authentication with azidentity, creating a client, and calling the CreateKey method.

LANGUAGE: go
CODE:
package main

import (
    "context"
	"fmt"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/security/keyvault/azkeys"
)

func main() {
	vaultURL := "https://<TODO: your vault name>.vault.azure.net"
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		// TODO: handle error
	}

	client, err := azkeys.NewClient(vaultURL, cred, nil)
	if err != nil {
		// TODO: handle error
	}

	keyParams := azkeys.CreateKeyParameters{
		Curve: to.Ptr(azkeys.CurveNameP256K),
		Kty:   to.Ptr(azkeys.KeyTypeEC),
	}
	resp, err := client.CreateKey(context.TODO(), "<key name>", keyParams, nil)
	if err != nil {
		// TODO: handle error
	}
	fmt.Println(*resp.Key.KID)
}

----------------------------------------

TITLE: Example Go Code Usage
DESCRIPTION: Example showing usage pattern changes between versions for admin client code

LANGUAGE: go
CODE:
// older code
adminClient.CreateQueue(context.Background(), queueName, &queueProperties, nil)

// new code
adminClient.CreateQueue(context.Background(), queueName, &admin.CreateQueueOptions{
  Properties: queueProperties,
})

LANGUAGE: go
CODE:
// older code
for queuePager.NextPage(context.TODO()) {
  for _, queue := range queuePager.PageResponse().Items {
    fmt.Printf("Queue name: %s, max size in MB: %d\n", queue.QueueName, *queue.MaxSizeInMegabytes)
  }
}

if err := queuePager.Err(); err != nil {
  panic(err)
}

// new code
for queuePager.More() {
  page, err := queuePager.NextPage(context.TODO())

  if err != nil {
    panic(err)
  }

  for _, queue := range page.Queues {
    fmt.Printf("Queue name: %s, max size in MB: %d\n", queue.QueueName, *queue.MaxSizeInMegabytes)
  }
}

----------------------------------------

TITLE: Configuring Client Options for Different Clouds
DESCRIPTION: Sets up client options for connecting to different Azure clouds including sovereign clouds and Azure Stack

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armlocks.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Installing Azure Monitor Query Metrics Packages
DESCRIPTION: Commands to install the required Go modules for Azure Monitor Query Metrics client and Azure Identity for authentication.

LANGUAGE: bash
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/monitor/query/azmetrics
go get github.com/Azure/azure-sdk-for-go/sdk/azidentity

----------------------------------------

TITLE: Changing CPK Acronym to All Caps
DESCRIPTION: YAML directive to change the 'Cpk' acronym to 'CPK' in all generated Go files.

LANGUAGE: yaml
CODE:
directive:
  - from: source-file-go
    where: $
    transform: >
      return $.
        replace(/Cpk/g, "CPK");

----------------------------------------

TITLE: Running Live Tests
DESCRIPTION: Bash commands for executing live tests using environment variables loaded from a .env file.

LANGUAGE: bash
CODE:
export AZURE_RECORD_MODE=live
go test -count 1 -v ./...

----------------------------------------

TITLE: Error Handling for Azure File Storage Operations in Go
DESCRIPTION: This example shows how to handle errors when deleting a share, specifically dealing with common scenarios like an in-progress deletion or a non-existent share.

LANGUAGE: go
CODE:
const (
	connectionString = "<connection_string>"
	shareName    = "sample-share"
)

client, err := service.NewClientFromConnectionString(connectionString, nil)
// TODO: handle error

_, err = client.DeleteShare(context.TODO(), shareName, nil)

if fileerror.HasCode(err, fileerror.ShareBeingDeleted, fileerror.ShareNotFound) {
    // ignore any errors if the share is being deleted or already has been deleted
} else if err != nil {
    // TODO: some other error
}

----------------------------------------

TITLE: Base AutoRest Configuration for ACR Go Client
DESCRIPTION: Core configuration settings for AutoRest code generation including input file, module settings, and basic generation options.

LANGUAGE: yaml
CODE:
input-file: https://github.com/Azure/azure-rest-api-specs/blob/c8d9a26a2857828e095903efa72512cf3a76c15d/specification/containerregistry/data-plane/Azure.ContainerRegistry/stable/2021-07-01/containerregistry.json
license-header: MICROSOFT_MIT_NO_VERSION
go: true
clear-output-folder: false
export-clients: true
openapi-type: "data-plane"
output-folder: ../azcontainerregistry
use: "@autorest/go@4.0.0-preview.60"
honor-body-placement: true
remove-unreferenced-types: true
module-name: sdk/containers/azcontainerregistry
module: github.com/Azure/azure-sdk-for-go/$(module-name)
inject-spans: true

----------------------------------------

TITLE: Long Running Operations in Previous Version (services/**/mgmt/**)
DESCRIPTION: Example of handling long-running operations in the deprecated version of Azure SDK for Go.

LANGUAGE: go
CODE:
ctx := context.TODO() // your context
future, err := virtualMachinesClient.CreateOrUpdate(ctx, "<resource group name>", "<virtual machine name>", param)
if err != nil {
    log.Fatal(err)
}
if err := future.WaitForCompletionRef(ctx, virtualMachinesClient.Client); err != nil {
    log.Fatal(err)
}
vm, err := future.Result(virtualMachinesClient)
if err != nil {
    log.Fatal(err)
}
log.Printf("virtual machine ID: %v", *vm.ID)

----------------------------------------

TITLE: Running godoc Server for Documentation Review
DESCRIPTION: Command to start the godoc server for reviewing package documentation. This allows developers to view and verify the documentation for all public methods and types before release.

LANGUAGE: shell
CODE:
godoc -http=:6060

----------------------------------------

TITLE: Configuring Client with Custom Options
DESCRIPTION: Sets up client options for connecting to different Azure clouds including sovereign clouds and Azure Stack.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armhdinsightcontainers.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Creating Azure Cognitive Services Accounts Client in Go
DESCRIPTION: This code demonstrates how to create a specific client (in this case, an Accounts client) using the previously created client factory. This client can be used to interact with Azure Cognitive Services accounts.

LANGUAGE: go
CODE:
client := clientFactory.NewAccountsClient()

----------------------------------------

TITLE: Installing Azure Alerts Management Module in Go
DESCRIPTION: Use the go get command to install the Azure Alerts Management module from the Azure SDK for Go.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/alertsmanagement/armalertsmanagement

----------------------------------------

TITLE: Authenticating with Azure Key Vault using DefaultAzureCredential
DESCRIPTION: Creates a default Azure credential object for authentication with Azure Key Vault services.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Authenticating with Azure Container Registry in Go
DESCRIPTION: This code demonstrates how to create a default Azure credential for authentication with Azure Container Registry. It uses the azidentity package to create a DefaultAzureCredential object.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Configuring Request Retry Policy in Azure Go SDK
DESCRIPTION: Shows how to configure the retry policy for failed requests using the ClientOptions. This example sets the maximum number of retries to 5.

LANGUAGE: go
CODE:
clientFactory, err := armresources.NewClientFactory(subscriptionId, credential,
    &arm.ClientOptions{
        ClientOptions: policy.ClientOptions{
            Retry: policy.RetryOptions{
                // retry for 5 times
                MaxRetries: 5,
            },
        },
    },
)
if err != nil {
    log.Fatal(err)
}
rgClient := clientFactory.NewResourceGroupsClient()

----------------------------------------

TITLE: Configuring AutoRest for Azure VMware Solution SDK Generation
DESCRIPTION: Defines the configuration parameters for AutoRest to generate Go SDK code from Azure VMware Solution API specifications. Specifies the source OpenAPI specs, license header, module version, and API version tag.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/e7678455846b1000fd31db27596e4ca3d299a872/specification/vmware/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/e7678455846b1000fd31db27596e4ca3d299a872/specification/vmware/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 2.0.0
tag: package-2023-09-01

----------------------------------------

TITLE: Authenticating with Azure using Default Credentials
DESCRIPTION: Creates a default Azure credential object for authentication with Azure services

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Creating Azure Key Vault Client Factory
DESCRIPTION: Initializes a client factory for creating Azure Key Vault service clients using subscription ID and credentials.

LANGUAGE: go
CODE:
clientFactory, err := armkeyvault.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Configuring AutoRest for Azure File SDK Generation
DESCRIPTION: YAML configuration for AutoRest to generate the Azure File SDK for Golang. Specifies input file, output settings, and various options for code generation.

LANGUAGE: yaml
CODE:
go: true
clear-output-folder: false
version: "^3.0.0"
license-header: MICROSOFT_MIT_NO_VERSION
input-file: "https://raw.githubusercontent.com/Azure/azure-rest-api-specs/d18a495685ccec837b72891b4deea017f62e8190/specification/storage/data-plane/Microsoft.FileStorage/stable/2025-05-05/file.json"
credential-scope: "https://storage.azure.com/.default"
output-folder: ../generated
file-prefix: "zz_"
openapi-type: "data-plane"
verbose: true
security: AzureKey
modelerfour:
  group-parameters: false
  seal-single-value-enum-by-default: true
  lenient-model-deduplication: true
export-clients: true
use: "@autorest/go@4.0.0-preview.61"

----------------------------------------

TITLE: Configuring Azure CDN Client for Different Clouds
DESCRIPTION: Sets up client options for connecting to different Azure clouds including sovereign clouds and Azure Stack.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armcdn.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Creating Azure Storage Client Factory in Go
DESCRIPTION: This code creates a client factory for Azure Storage, which can be used to create any client in the module. It requires a subscription ID and credential.

LANGUAGE: go
CODE:
clientFactory, err := armstorage.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Verifying Azure CLI Account and Token Retrieval
DESCRIPTION: These Azure CLI commands verify the currently logged-in account and test token retrieval for the Azure Resource Manager. They can be used to troubleshoot AzureCLICredential authentication issues.

LANGUAGE: sh
CODE:
az account show
az account get-access-token --output json --resource https://management.core.windows.net

----------------------------------------

TITLE: Custom JSON Marshaling for Multipart Form Data
DESCRIPTION: Implements the json.Marshaller interface to serialize the form data schema into JSON format. Uses a map to populate fields like file, filename, and purpose before marshaling.

LANGUAGE: go
CODE:
func (p Paths1Filz8PFilesPostRequestbodyContentMultipartFormDataSchema) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "file", p.File)
	populate(objectMap, "filename", p.Filename)
	populate(objectMap, "purpose", p.Purpose)
	return json.Marshal(objectMap)
}

----------------------------------------

TITLE: Creating Azure VMware Cloud Simple Virtual Machines Client in Go
DESCRIPTION: Use the client factory to create a specific client for managing virtual machines in Azure VMware Cloud Simple.

LANGUAGE: go
CODE:
client := clientFactory.NewVirtualMachinesClient()

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK for Go Generation
DESCRIPTION: This YAML configuration specifies settings for AutoRest to generate the Azure SDK for Go. It sets the Azure ARM flag, requires specific API specifications, defines the license header, module version, and API version tag.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/310a0100f5b020c1900c527a6aa70d21992f078a/specification/authorization/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/310a0100f5b020c1900c527a6aa70d21992f078a/specification/authorization/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 3.0.0-beta.2
tag: package-2022-05-01-preview

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK for Go Generation
DESCRIPTION: This YAML configuration specifies settings for AutoRest to generate the Azure SDK for Go. It sets the Azure ARM flag, requires specific API specifications, defines the license header, module version, and API version tag.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/310a0100f5b020c1900c527a6aa70d21992f078a/specification/authorization/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/310a0100f5b020c1900c527a6aa70d21992f078a/specification/authorization/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 3.0.0-beta.2
tag: package-2022-05-01-preview

----------------------------------------

TITLE: Creating Azure Container Service Client Factory
DESCRIPTION: Initializes a client factory for Azure Container Service with subscription ID and credentials.

LANGUAGE: go
CODE:
clientFactory, err := armcontainerservice.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Creating Azure Container Registry Agent Pools Client in Go
DESCRIPTION: This snippet demonstrates how to create a specific client for Agent Pools operations using the previously created client factory. This client can be used to perform operations related to agent pools in Azure Container Registry.

LANGUAGE: go
CODE:
client := clientFactory.NewAgentPoolsClient()

----------------------------------------

TITLE: New Enum Types
DESCRIPTION: New enumeration types added for various statuses and configurations

LANGUAGE: go
CODE:
type ActivationStatus string
const (
    ActivationStatusActive ActivationStatus = "Active"
    ActivationStatusInactive ActivationStatus = "Inactive"
)

type AuditLogStatus string
const (
    AuditLogStatusDisabled AuditLogStatus = "Disabled"
    AuditLogStatusEnabled AuditLogStatus = "Enabled"
)

----------------------------------------

TITLE: Provisioner-based Azure Test Resource Deployment
DESCRIPTION: PowerShell syntax for deploying test resources using a provisioner service principal. Includes additional parameters for tenant and provisioner authentication.

LANGUAGE: powershell
CODE:
New-TestResources.ps1 [-BaseName <String>] [-ResourceGroupName <String>] [-ServiceDirectory] <String>
 [-TestResourcesDirectory <String>] [-TestApplicationId <String>] [-TestApplicationSecret <String>]
 [-TestApplicationOid <String>] -TenantId <String> [-SubscriptionId <String>]
 -ProvisionerApplicationId <String> [-ProvisionerApplicationOid <String>]
 [-ProvisionerApplicationSecret <String>] [-DeleteAfterHours <Int32>] [-Location <String>]
 [-Environment <String>] [-ResourceType <String>] [-ArmTemplateParameters <Hashtable>]
 [-AdditionalParameters <Hashtable>] [-EnvironmentVariables <Hashtable>] [-CI] [-Force] [-OutFile]
 [-SuppressVsoCommands] [-ServicePrincipalAuth] [-NewTestResourcesRemainingArguments <Object>]
 [-ProgressAction <ActionPreference>] [-WhatIf] [-Confirm] [<CommonParameters>]

----------------------------------------

TITLE: Cloning Azure REST API Specs Repository in Bash
DESCRIPTION: Bash command for cloning a forked Azure REST API specs repository. This is a prerequisite step for generating the SDK.

LANGUAGE: sh
CODE:
git clone https://github.com/{YOUR_GITHUB_USERNAME}/azure-rest-api-specs.git

----------------------------------------

TITLE: Configuring Azure Front Door Client Options
DESCRIPTION: Setting up client options for connecting to different Azure clouds including sovereign clouds and Azure Stack.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armfrontdoor.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Authenticating with Azure Monitor
DESCRIPTION: Creates a default Azure credential object for authentication with Azure services

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Error Handling in Azure KeyVault Admin
DESCRIPTION: Example showing how to handle HTTP errors returned by the KeyVault Admin client using azcore.ResponseError type.

LANGUAGE: go
CODE:
import "github.com/Azure/azure-sdk-for-go/sdk/azcore"

settings, err := client.GetSettings(context.Background(), nil)
if err != nil {
    var httpErr *azcore.ResponseError
    if errors.As(err, &httpErr) {
        // TODO: investigate httpErr
    } else {
        // TODO: not an HTTP error
    }
}

----------------------------------------

TITLE: Configuring Azure Graphservices Client for China Cloud in Go
DESCRIPTION: Example of creating a client factory with custom options to connect to Azure China cloud.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armgraphservices.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Configuring Client Options for Different Clouds
DESCRIPTION: Example of creating a client factory with custom options for connecting to different Azure clouds

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armvirtualmachineimagebuilder.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Configuring Azure Cognitive Services Client Options in Go
DESCRIPTION: This snippet shows how to configure client options, specifically setting the cloud endpoint to Azure China. These options are used when creating the client factory.

LANGUAGE: go
CODE:
options := armcognitiveservices.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armcognitiveservices.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Authenticating with Azure using DefaultAzureCredential in Go
DESCRIPTION: Code snippet demonstrating how to create a credential for authenticating with Azure Resources using the DefaultAzureCredential from the azidentity package.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Creating Azure Sphere Client Factory in Go
DESCRIPTION: This code creates a client factory for Azure Sphere services. It requires a subscription ID and credentials. The factory can be used to create specific clients for different Azure Sphere operations.

LANGUAGE: go
CODE:
clientFactory, err := armsphere.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Installing Azure Queue Storage SDK
DESCRIPTION: Commands to install the Azure Queue Storage SDK and optional azidentity module for Azure AD authentication

LANGUAGE: powershell
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/storage/azqueue
go get github.com/Azure/azure-sdk-for-go/sdk/azidentity

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK Go Generation
DESCRIPTION: This YAML configuration sets up AutoRest for generating the Azure SDK for Go. It specifies the Azure ARM flag, required specification files, license header, module version, and package tag.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/4cd95123fb961c68740565a1efcaa5e43bd35802/specification/apimanagement/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/4cd95123fb961c68740565a1efcaa5e43bd35802/specification/apimanagement/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 2.1.0
tag: package-2022-08

----------------------------------------

TITLE: Creating Azure Credential
DESCRIPTION: Initialize default Azure credentials for authentication with Azure services.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Creating IoT Hub Client Factory
DESCRIPTION: Initializes a client factory for creating IoT Hub service clients using subscription ID and credentials.

LANGUAGE: go
CODE:
clientFactory, err := armiothub.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK Go Generation
DESCRIPTION: YAML configuration that defines parameters for AutoRest code generation tool. Specifies Azure ARM mode, required API specifications, license header type, module version, and API version tag.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/8691e5081766c7ad602a9e55de841d07bed5196a/specification/quota/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/8691e5081766c7ad602a9e55de841d07bed5196a/specification/quota/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.1.0
tag: package-2025-03-01

----------------------------------------

TITLE: Configuring Azure Cosmos DB Client for Sovereign Clouds in Go
DESCRIPTION: This code shows how to configure the Azure Cosmos DB client to connect to sovereign clouds or Azure Stack. It uses ClientOptions to set the cloud endpoint.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armcosmos.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Creating an Azure Automanage Custom Profile Assignment in Go
DESCRIPTION: Assigns a custom Automanage Configuration Profile to a specific VM.

LANGUAGE: go
CODE:
configProfileId := "/subscriptions/<subscription ID>/resourceGroups/resourceGroupName/providers/Microsoft.Automanage/configurationProfiles/configurationProfileName"

properties := armautomanage.ConfigurationProfileAssignmentProperties{
    ConfigurationProfile: &configProfileId,
}

assignment := armautomanage.ConfigurationProfileAssignment{
    Properties: &properties,
}

// assignment name must be 'default'
newAssignment, err = assignmentClient.CreateOrUpdate(context.Background(), "default", "resourceGroupName", "vmName", assignment, nil)

----------------------------------------

TITLE: Configuring HTTP Pipeline in Client Options for Azure File Storage in Go
DESCRIPTION: Shows how to configure the HTTP pipeline using ClientOptions in the azfile module. This replaces the explicit creation of a Pipeline instance in azure-storage-file-go.

LANGUAGE: go
CODE:
client, err := service.NewClientWithSharedKeyCredential("<my storage account URL>", cred, &service.ClientOptions{
	ClientOptions: azcore.ClientOptions{
		// configure HTTP pipeline options here
	},
})

----------------------------------------

TITLE: Handling CAE Claims Challenges in BearerTokenPolicy
DESCRIPTION: BearerTokenPolicy now handles Continuous Access Evaluation (CAE) claims challenges.

LANGUAGE: Go
CODE:
// BearerTokenPolicy will automatically handle CAE challenges
// No additional code required in most cases

----------------------------------------

TITLE: Pseudocode for Package Batching in Pullrequest Pipeline
DESCRIPTION: This pseudocode explains how packages are batched for testing in the pullrequest pipeline, including the logic for handling direct and indirect changes.

LANGUAGE: plaintext
CODE:
batchSize = configurable # of packages in each test batch, defaults to 10
directPackages = the list of packages with directly changed code in the PR

group the direct packages by matrix configuration
  - each matrix contribution
    - group by batch size
      - assign the matrix to the full batch
      - if multiple batches exist, add suffix

----------------------------------------

TITLE: Authenticating with Azure using DefaultAzureCredential in Go
DESCRIPTION: Creates a default Azure credential for authentication with Azure services.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Creating Azure Databricks Workspaces Client in Go
DESCRIPTION: This snippet shows how to create a Workspaces client using the previously created client factory. This client provides access to Workspace-related APIs in Azure Databricks.

LANGUAGE: go
CODE:
client := clientFactory.NewWorkspacesClient()

----------------------------------------

TITLE: Authenticating with Azure API Management
DESCRIPTION: Example of creating default Azure credentials for authentication using the azidentity package.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Configuring Azure Container Apps Client for Different Clouds in Go
DESCRIPTION: This code shows how to configure the client factory for different Azure clouds or Azure Stack. It uses ClientOptions to set the cloud endpoint, in this case, to Azure China.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armappcontainers.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Configuring Matrix Batching in YAML
DESCRIPTION: This YAML snippet shows how to disable matrix batching for a specific configuration in the pullrequest pipeline by setting the PRBatching flag to false.

LANGUAGE: yaml
CODE:
MatrixConfigs:
  - Name: version_overrides_tests
    Path: sdk/core/version-overrides-matrix.json
    Selection: all
    PRBatching: false # the new key
    GenerateVMJobs: true

----------------------------------------

TITLE: Configuring Logging for Azure SDK
DESCRIPTION: Example showing how to set up console logging for Azure SDK modules using azcore's logging implementation

LANGUAGE: go
CODE:
import (
  "fmt"
  azlog "github.com/Azure/azure-sdk-for-go/sdk/azcore/log"
)

// print log output to stdout
azlog.SetListener(func(event azlog.Event, s string) {
    fmt.Printf("[%s] %s\n", event, s)
})

----------------------------------------

TITLE: Creating Azure Commerce Client Factory in Go
DESCRIPTION: This snippet shows how to create a client factory for Azure Commerce. It requires a subscription ID and a credential object. The factory can be used to create various clients for interacting with Azure Commerce services.

LANGUAGE: go
CODE:
clientFactory, err := armcommerce.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Configuring Azure HDInsight Client for Different Clouds in Go
DESCRIPTION: Example of how to configure the HDInsight client factory for different Azure clouds or Azure Stack. This uses ClientOptions to specify the cloud environment.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armhdinsight.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Creating HDInsight Applications Client in Go
DESCRIPTION: Demonstrates how to create a specific HDInsight client (in this case, an Applications client) using the previously created client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewApplicationsClient()

----------------------------------------

TITLE: Authenticating with Azure Default Credentials
DESCRIPTION: Creates a default Azure credential object for authentication with Azure Communication Services using the azidentity package.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Installing Azure Key Vault Packages in Go
DESCRIPTION: Commands to install the required Azure Key Vault Secrets and Azure Identity packages using go get.

LANGUAGE: shell
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/security/keyvault/azsecrets
go get github.com/Azure/azure-sdk-for-go/sdk/azidentity

----------------------------------------

TITLE: Configuring AutoRest YAML for Azure SDK Go Generation
DESCRIPTION: Defines the AutoRest configuration parameters for generating Azure SDK for Go. Specifies Azure ARM mode, required API specifications from the azure-rest-api-specs repository, license header type, and module version 0.3.0.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/163e27c0ca7570bc39e00a46f255740d9b3ba3cb/specification/addons/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/163e27c0ca7570bc39e00a46f255740d9b3ba3cb/specification/addons/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 0.3.0

----------------------------------------

TITLE: Creating Azure Credential in Go
DESCRIPTION: This snippet demonstrates how to create a default Azure credential for authentication.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Creating Azure Digital Twins Client Factory
DESCRIPTION: Initializing a client factory for creating Azure Digital Twins service clients.

LANGUAGE: go
CODE:
clientFactory, err := armdigitaltwins.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Adding Missing Imports to Models Serde
DESCRIPTION: YAML directive to add the 'strconv' import to the zz_models_serde.go file.

LANGUAGE: yaml
CODE:
directive:
- from: zz_models_serde.go
  where: $
  transform: >
      return $.
        replace(/"reflect"/, `"reflect"\n\t"strconv"`);

----------------------------------------

TITLE: Creating Azure Deployment Manager Services Client in Go
DESCRIPTION: This code demonstrates how to create a specific client (ServicesClient) using the previously created client factory. This client provides access to a set of related APIs.

LANGUAGE: go
CODE:
client := clientFactory.NewServicesClient()

----------------------------------------

TITLE: Creating Media Services Client Factory
DESCRIPTION: Initializes a client factory for Azure Media Services with subscription ID and credentials

LANGUAGE: go
CODE:
clientFactory, err := armmediaservices.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Configuring Client Options for Different Clouds
DESCRIPTION: Example demonstrating how to configure client options to connect to different Azure clouds including sovereign clouds.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armapimanagement.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Removing UnmarshalXML for BlobItems
DESCRIPTION: YAML directive to remove the UnmarshalXML method for BlobItems, allowing for a custom implementation.

LANGUAGE: yaml
CODE:
directive:
- from: swagger-document
  where: $.definitions
  transform: >
    $.BlobItemInternal["x-ms-go-omit-serde-methods"] = true;

----------------------------------------

TITLE: Installing Azure MariaDB SDK Package
DESCRIPTION: Command to install the Azure OSS Databases module using Go modules package management

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/mariadb/armmariadb

----------------------------------------

TITLE: Configuring Azure Client Options for Sovereign Clouds in Go
DESCRIPTION: This snippet shows how to set up client options for connecting to sovereign clouds or Azure Stack using the arm and azcore packages.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armtrustedsigning.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: X509 Certificate Generation with V3 Extensions
DESCRIPTION: Creates an X509 certificate with V3 extensions, including subject alternative names, key usage flags, CA and TLS capabilities. Exports the certificate in PEM format with certificate and private key.

LANGUAGE: powershell
CODE:
Import-Module -Name eng/scripts/X509Certificate2.psm1 # assumes $PWD is repo root

$cert2 = New-X509Certificate2 -SubjectName 'CN=Azure SDK' -SubjectAlternativeNames (New-X509Certificate2SubjectAlternativeNames -EmailAddress azuresdk@microsoft.com) -KeyUsageFlags KeyEncipherment, NonRepudiation, DigitalSignature -CA -TLS -ValidDays 3652

$PemCertificateWithV3Extensions = ($cert2 | Format-X509Certificate2 -Type Certificate) + "`n" + ($cert2 | Format-X509Certificate2 -Type Pkcs8)
$CertificateWithV3ExtensionsBase64 = $cert2 | Format-X509Certificate2 -Type CertificateBase64

----------------------------------------

TITLE: Creating Azure Change Analysis Client Factory in Go
DESCRIPTION: This snippet shows how to create a client factory for Azure Change Analysis. It requires a subscription ID and credentials for initialization.

LANGUAGE: go
CODE:
clientFactory, err := armchangeanalysis.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Configuring Azure Analysis Services Client for Sovereign Clouds in Go
DESCRIPTION: Sets up client options for connecting to sovereign clouds or Azure Stack.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armanalysisservices.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Creating an Azure Databasewatcher Client Factory in Go
DESCRIPTION: This code creates a client factory for Azure Databasewatcher. It requires a subscription ID and credentials. The factory can be used to create specific clients within the module.

LANGUAGE: go
CODE:
clientFactory, err := armdatabasewatcher.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Creating Azure Network Client Factory in Go
DESCRIPTION: Initializes a client factory for Azure Network services using a subscription ID and credentials.

LANGUAGE: go
CODE:
clientFactory, err := armnetwork.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Creating HDInsight Client Factory in Go
DESCRIPTION: Code snippet showing how to create a client factory for Azure HDInsight. The factory is initialized with a subscription ID and credential, and can be used to create specific HDInsight clients.

LANGUAGE: go
CODE:
clientFactory, err := armhdinsight.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Creating Azure VoiceServices Test Client
DESCRIPTION: Creates a specific client instance for test lines operations using the client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewTestLinesClient()

----------------------------------------

TITLE: Accessing Raw HTTP Response in Azure Go SDK
DESCRIPTION: Demonstrates how to access the raw HTTP response from a request context, regardless of the request result. This can be useful for debugging or accessing additional response details.

LANGUAGE: go
CODE:
var rawResponse *http.Response
ctx := context.TODO() // your context
ctxWithResp := runtime.WithCaptureResponse(ctx, &rawResponse)
resp, err := resourceGroupsClient.CreateOrUpdate(ctxWithResp, resourceGroupName, resourceGroupParameters, nil)
if err != nil {
    log.Printf("Status code: %d", rawResponse.StatusCode)
    log.Fatalf("Error occurred: %+v", err)
}
log.Printf("Status code: %d", rawResponse.StatusCode)

----------------------------------------

TITLE: Creating IoT Hub Resource Client
DESCRIPTION: Creates a new IoT Hub resource client using the client factory for accessing API functionality.

LANGUAGE: go
CODE:
client := clientFactory.NewResourceClient()

----------------------------------------

TITLE: Authenticating with Azure using Default Credentials
DESCRIPTION: Creates an Azure credential object using the default authentication method from azidentity module.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Implementing a Synchronized Wrapper for Long-Running Operations in Go
DESCRIPTION: Provides a utility to create a synchronized wrapper for long-running operations, simplifying the polling process for clients that don't need detailed control over the LRO.

LANGUAGE: go
CODE:
type OperationWaiter[TResult any] struct {
    poller *runtime.Poller[TResult]
    err    error
}

func (ow OperationWaiter[TResult]) Wait(ctx context.Context, freq time.Duration) (TResult, error) {
    if ow.err != nil {
        return *new(TResult), ow.err
    }
    return ow.poller.PollUntilDone(ctx, freq)
}

func NewOperationWaiter[TResult any](poller *runtime.Poller[TResult], err error) OperationWaiter[TResult] {
    return OperationWaiter[TResult]{poller: poller, err: err}
}

----------------------------------------

TITLE: Creating Default Azure Credential in Go
DESCRIPTION: This snippet demonstrates how to create a default Azure credential using the azidentity module for authentication with Azure Storage.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Configuring Azure Notification Hubs Client for Different Clouds
DESCRIPTION: Set up client options for connecting to different Azure clouds. This example demonstrates how to configure the client to connect to Azure China cloud.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armnotificationhubs.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Creating an Azure IoT DPS Resource Client in Go
DESCRIPTION: This snippet demonstrates how to create a specific client (IoT DPS Resource Client) using the previously created client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewIotDpsResourceClient()

----------------------------------------

TITLE: Authenticating with Azure Compute using DefaultAzureCredential in Go
DESCRIPTION: Code snippet demonstrating how to create a default Azure credential for authentication with Azure Compute services.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Creating SignalR Client Factory
DESCRIPTION: Initializes a client factory for creating Azure SignalR clients with subscription ID and credentials

LANGUAGE: go
CODE:
clientFactory, err := armsignalr.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Installing Azure Monitor Query and Azure Identity Packages in Go
DESCRIPTION: Use the 'go get' command to install the required packages for Azure Monitor Query and Azure Identity authentication.

LANGUAGE: bash
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/monitor/azquery
go get github.com/Azure/azure-sdk-for-go/sdk/azidentity

----------------------------------------

TITLE: Configuring AutoRest for Azure MariaDB Go SDK Generation
DESCRIPTION: YAML configuration that defines the parameters for AutoRest code generation. It references the MariaDB REST API specifications, sets Azure ARM mode, specifies Microsoft MIT license header requirement, and sets the module version to 1.2.0.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/7a2ac91de424f271cf91cc8009f3fe9ee8249086/specification/mariadb/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/7a2ac91de424f271cf91cc8009f3fe9ee8249086/specification/mariadb/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.2.0

----------------------------------------

TITLE: Authenticating with Azure using DefaultAzureCredential in Go
DESCRIPTION: Example of creating a default Azure credential for authentication. This uses the azidentity module to provide various authentication methods.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Configuring Azure Client Options for Different Clouds in Go
DESCRIPTION: This code demonstrates how to set up client options for connecting to different Azure clouds, including sovereign clouds and Azure Stack. It uses the arm.ClientOptions struct.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armchangeanalysis.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Adding Missing Imports to Service Client
DESCRIPTION: YAML directive to add the 'strings' import to the zz_service_client.go file.

LANGUAGE: yaml
CODE:
directive:
- from: zz_service_client.go
  where: $
  transform: >
      return $.
        replace(/"strconv"/, `"strconv"\n\t"strings"`);

----------------------------------------

TITLE: Creating API Management Service Client
DESCRIPTION: Example showing how to create a specific service client using the client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewServiceClient()

----------------------------------------

TITLE: Creating Certificates with Legacy KeyVault Module in Go
DESCRIPTION: Example showing certificate creation using the deprecated keyvault module. Uses keyvault.BaseClient with environment-based authentication and requires passing vault URL with each operation.

LANGUAGE: go
CODE:
import (
    "context"
    "fmt"

    "github.com/Azure/azure-sdk-for-go/profiles/latest/keyvault/keyvault"
    kvauth "github.com/Azure/azure-sdk-for-go/services/keyvault/auth"
)

func main() {
    vaultURL := "https://<TODO: your vault name>.vault.azure.net"
    authorizer, err := kvauth.NewAuthorizerFromEnvironment()
    if err != nil {
       // TODO: handle error
    }

    basicClient := keyvault.New()
    basicClient.Authorizer = authorizer

    fmt.Println("\ncreating certificate in keyvault:")
    issuerName := "self"
    subject := "CN=DefaultPolicy"
    createParams := keyvault.CertificateCreateParameters{
        CertificatePolicy: &keyvault.CertificatePolicy{
            IssuerParameters:          &keyvault.IssuerParameters{Name: &issuerName},
            X509CertificateProperties: &keyvault.X509CertificateProperties{Subject: &subject},
        }
    }
    resp, err := basicClient.CreateCertificate(context.TODO(), vaultURL, "<cert name>", createParams)
    if err != nil {
        // TODO: handle error
    }
    fmt.Println("added/updated: " + *resp.ID)
}

----------------------------------------

TITLE: Renaming Models in Swagger
DESCRIPTION: YAML directive to rename several models by removing the 'Item' suffix in the Swagger document.

LANGUAGE: yaml
CODE:
directive:
- rename-model:
    from: DequeuedMessageItem
    to: DequeuedMessage
- rename-model:
    from: QueueItem
    to: Queue
- rename-model:
    from: PeekedMessageItem
    to: PeekedMessage

----------------------------------------

TITLE: Installing Azure Active Directory Module in Go
DESCRIPTION: Demonstrates how to install the Azure Active Directory module using Go modules.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/aad/armaad

----------------------------------------

TITLE: Creating Azure Reservation Client in Go
DESCRIPTION: This snippet shows how to create a specific Reservation client using the previously initialized client factory. This client can be used to perform operations related to Azure Reservations.

LANGUAGE: go
CODE:
client := clientFactory.NewReservationClient()

----------------------------------------

TITLE: Pagination in Previous Version (services/**/mgmt/**)
DESCRIPTION: Example of handling pagination in the deprecated version of Azure SDK for Go.

LANGUAGE: go
CODE:
pager, err := resourceGroupsClient.List(context.TODO(), "", nil)
if err != nil {
    log.Fatal(err)
}
for p.NotDone() {
    for _, v := range pager.Values() {
        log.Printf("resource group ID: %s\n", *rg.ID)
    }
    if err := pager.NextWithContext(context.TODO()); err != nil   {
        log.Fatal(err)
    }
}

----------------------------------------

TITLE: Creating Azure Network Admin Rule Collections Client in Go
DESCRIPTION: Instantiates a specific client for working with Admin Rule Collections using the client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewAdminRuleCollectionsClient()

----------------------------------------

TITLE: Configuring Client Options for Different Clouds
DESCRIPTION: Example of setting up client options for connecting to different Azure clouds including sovereign clouds and Azure Stack.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armcustomerlockbox.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Running golangci-lint for Go
DESCRIPTION: Command to run golangci-lint on a specific package using a configuration file. This helps identify common linting errors in the Go code.

LANGUAGE: bash
CODE:
golangci-lint run -c <path_to_root>/eng/.golangci.yml in <path_to_my_package>

----------------------------------------

TITLE: Creating Azure Search Client Factory in Go
DESCRIPTION: This code creates a client factory for Azure Search using the subscription ID and credentials. It allows creation of various clients for interacting with Azure Search services.

LANGUAGE: go
CODE:
clientFactory, err := armsearch.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Configuring Azure Application Insight Client Options in Go
DESCRIPTION: This code demonstrates how to set client options for Azure Application Insight, including specifying a different cloud endpoint. It uses the arm and azcore packages to configure ClientOptions.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armapplicationinsights.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Authenticating with Azure Credentials
DESCRIPTION: Creates default Azure credentials for authentication using the azidentity package.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Documenting Release History in Markdown
DESCRIPTION: This snippet outlines the release history for version 0.1.0 of the Azure SDK for Go Edge Zones package. It mentions the package's adoption of next-generation design principles and provides links for further information.

LANGUAGE: markdown
CODE:
# Release History

## 0.1.0 (2024-07-08)
### Other Changes

The package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/edgezones/armedgezones` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html).

To learn more, please refer to our documentation [Quick Start](https://aka.ms/azsdk/go/mgmt).

----------------------------------------

TITLE: Release Notes Documentation - Markdown
DESCRIPTION: Release history documentation showing version updates, feature additions, and bug fixes for the Azure SDK for Go. Includes migration information for breaking changes introduced in version 0.4.0.

LANGUAGE: markdown
CODE:
# Release History

## 0.6.0 (2023-11-24)
### Features Added

- Support for test fakes and OpenTelemetry trace spans.


## 0.5.1 (2023-04-14)
### Bug Fixes

- Fix serialization bug of empty value of `any` type.


## 0.5.0 (2023-03-31)
### Features Added

- New struct `ClientFactory` which is a client factory used to create any client in this module


## 0.4.0 (2022-05-18)

The package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/oep/armoep` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html) since version 0.4.0, which contains breaking changes.

To migrate the existing applications to the latest version, please refer to [Migration Guide](https://aka.ms/azsdk/go/mgmt/migration).

To learn more, please refer to our documentation [Quick Start](https://aka.ms/azsdk/go/mgmt).

----------------------------------------

TITLE: Authenticating with Azure Credentials
DESCRIPTION: Creating default Azure credentials for authentication with the Service Fabric API

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Configuring AutoRest for Azure Data Catalog SDK Generation
DESCRIPTION: Defines the AutoRest configuration parameters for generating the Azure Data Catalog SDK for Go. Specifies the ARM mode, required API specifications, license header type, and module version.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/datacatalog/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/datacatalog/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.2.0

----------------------------------------

TITLE: Authenticating with Azure Hybrid Compute using DefaultAzureCredential in Go
DESCRIPTION: This code snippet shows how to create a default Azure credential for authentication with Azure Hybrid Compute. It uses the azidentity package.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Creating a File Client with SAS Authentication in Go
DESCRIPTION: Illustrates how to create a file client using SAS (Shared Access Signature) authentication in the azfile module. This replaces the previous method of using NewAnonymousCredential with a Pipeline.

LANGUAGE: go
CODE:
client, err := file.NewClientWithNoCredential("<public file or file with SAS URL>", nil)

----------------------------------------

TITLE: Configuring AutoRest for Azure Orbital SDK Generation in Go
DESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure Orbital SDK for Go. It specifies Azure ARM mode, required specification files, license header, and module version.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/1e7b408f3323e7f5424745718fe62c7a043a2337/specification/orbital/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/1e7b408f3323e7f5424745718fe62c7a043a2337/specification/orbital/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 2.1.0

----------------------------------------

TITLE: Authenticating with Azure using Default Credentials in Go
DESCRIPTION: This snippet demonstrates how to create a default Azure credential using the azidentity package. It's used for authenticating with Azure Data Lake Analytics.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Configuring Azure Client Options for Different Clouds
DESCRIPTION: Sets up client options for connecting to different Azure clouds including sovereign clouds and Azure Stack.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armappplatform.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Correcting CORS XML Tags in Go Source Files
DESCRIPTION: YAML directive to update the XML tags for CORS-related structs in Go source files.

LANGUAGE: yaml
CODE:
directive:
  - from: source-file-go
    where: $
    transform: >
      return $.
        replace(/xml:"CORS>CORSRule"/g, "xml:\"Cors>CorsRule\"");

----------------------------------------

TITLE: Authenticating with Azure Default Credentials
DESCRIPTION: Creates a default Azure credential object for authentication with Azure services using the azidentity package.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Configuring Azure Digital Twins Client Options
DESCRIPTION: Setting up client options for connecting to different Azure clouds including sovereign clouds and Azure Stack.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armdigitaltwins.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Setting Function Parameters in ChatCompletionsOptions
DESCRIPTION: Demonstrates how to set JSON parameters for a function definition in ChatCompletionsOptions using Go's json.Marshal.

LANGUAGE: go
CODE:
parametersJSON, err := json.Marshal(map[string]any{
  "required": []string{"location"},
  "type":     "object",
  "properties": map[string]any{
    "location": map[string]any{
      "type":        "string",
      "description": "The city and state, e.g. San Francisco, CA",
    },
  },
})

if err != nil {
  // TODO: Update the following line with your application specific error handling logic
  log.Printf("ERROR: %s", err)
  return
}

// and then, in ChatCompletionsOptions
opts := azopenai.ChatCompletionsOptions{
  Functions: []azopenai.FunctionDefinition{
    {
      Name:        to.Ptr("get_current_weather"),
      Description: to.Ptr("Get the current weather in a given location"),
      Parameters: parametersJSON,
    },
  },
}

----------------------------------------

TITLE: Making FileAttributes an Optional Parameter
DESCRIPTION: YAML directive to change FileAttributes to an optional parameter in the API definition.

LANGUAGE: yaml
CODE:
directive:
- from: swagger-document
  where: $.parameters.FileAttributes
  transform: >
    $.required = false;

----------------------------------------

TITLE: Installing Azure Web PubSub SDK for Go
DESCRIPTION: Command to install the Azure Web PubSub service client module using go get.

LANGUAGE: bash
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/messaging/azwebpubsub

----------------------------------------

TITLE: Creating Azure Load Testing Client in Go
DESCRIPTION: Instantiates a new Load Tests client using the client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewLoadTestsClient()

----------------------------------------

TITLE: Installing Azure Kusto Module with Go
DESCRIPTION: Command to install the Azure Kusto module using Go modules package management

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/kusto/armkusto/v2

----------------------------------------

TITLE: Creating Service Linker Client Factory
DESCRIPTION: Initializes a client factory for Azure Service Linker with basic configuration.

LANGUAGE: go
CODE:
clientFactory, err := armservicelinker.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Authenticating with Azure using Default Credentials in Go
DESCRIPTION: This snippet demonstrates how to create a default Azure credential for authentication using the azidentity package.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Authenticating with Azure using DefaultAzureCredential
DESCRIPTION: Creates a default Azure credential object for authentication with Azure services.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Creating Azure Default Credential in Go
DESCRIPTION: This code demonstrates how to create a default Azure credential using the azidentity package.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: AutoRest Base Configuration for Azure Blob SDK
DESCRIPTION: Core configuration settings for the code generation process including version, input specifications, and output parameters.

LANGUAGE: yaml
CODE:
go: true
clear-output-folder: false
version: "^3.0.0"
license-header: MICROSOFT_MIT_NO_VERSION
input-file: "https://raw.githubusercontent.com/Azure/azure-rest-api-specs/ae95eb6a4701d844bada7d1c4f5ecf4a7444e5b8/specification/storage/data-plane/Microsoft.BlobStorage/stable/2025-01-05/blob.json"
credential-scope: "https://storage.azure.com/.default"
output-folder: ../generated
file-prefix: "zz_"
openapi-type: "data-plane"
verbose: true
security: AzureKey
modeler-four:
  group-parameters: false
  seal-single-value-enum-by-default: true
  lenient-model-deduplication: true
export-clients: true
use: "@autorest/go@4.0.0-preview.65"

----------------------------------------

TITLE: Authenticating with Azure using Default Credentials in Go
DESCRIPTION: This snippet demonstrates how to create a default Azure credential object for authentication. It uses the azidentity package to generate the credential.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Configuring Azure Client Options for Different Clouds in Go
DESCRIPTION: Set up client options to connect to different Azure clouds, such as Azure China, using the arm and azcore packages.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armpeering.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Entity Management with admin.Client in azservicebus for Go
DESCRIPTION: Demonstrates how to use the new admin.Client for entity management tasks like creating queues in azservicebus.

LANGUAGE: go
CODE:
adminClient, err := admin.NewClientFromConnectionString(connectionString, nil)

// create a queue with default properties
resp, err := adminClient.CreateQueue(context.TODO(), "queue-name", nil)

----------------------------------------

TITLE: Creating Applications Client
DESCRIPTION: Creates a new Applications client instance using the client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewApplicationsClient()

----------------------------------------

TITLE: Authenticating with Azure IoT Central in Go
DESCRIPTION: Example of creating a default Azure credential for authentication with Azure IoT Central.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Installing Azure Custom Providers Module
DESCRIPTION: Command to install the Azure Custom Providers module using Go modules

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/customproviders/armcustomproviders

----------------------------------------

TITLE: Configuring Azure Client Options for Different Clouds in Go
DESCRIPTION: This snippet shows how to configure client options to connect to different Azure clouds, including sovereign clouds and Azure Stack.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armeventhub.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Creating Azure Test Base Client Factory in Go
DESCRIPTION: This snippet demonstrates how to create a client factory for Azure Test Base services. It requires a subscription ID and credentials, and optionally accepts client options for customization.

LANGUAGE: go
CODE:
clientFactory, err := armtestbase.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Installing Azure Recovery Services Backup Module in Go
DESCRIPTION: This command installs the Azure Recovery Services Backup module using Go's package manager.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/recoveryservices/armrecoveryservicesbackup/v4

----------------------------------------

TITLE: Configuring Logging for Azure Event Hubs Go Client
DESCRIPTION: Example showing how to configure console logging for the Azure Event Hubs Go client using azcore/log package. This sets up a custom log listener and enables specific event logging.

LANGUAGE: go
CODE:
import (
  "fmt"
  azlog "github.com/Azure/azure-sdk-for-go/sdk/azcore/log"
)

// print log output to stdout
azlog.SetListener(func(event azlog.Event, s string) {
    fmt.Printf("[%s] %s\n", event, s)
})

// pick the set of events to log
azlog.SetEvents(
  azeventhubs.EventConn,
  azeventhubs.EventAuth,
  azeventhubs.EventProducer,
  azeventhubs.EventConsumer,
)

----------------------------------------

TITLE: Configuring AutoRest Settings for Azure Workload Monitor SDK Generation
DESCRIPTION: Defines the AutoRest configuration parameters for generating the Azure Workload Monitor SDK in Go. Specifies the required API specifications, Azure ARM mode, license header, and module version.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/workloadmonitor/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/workloadmonitor/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 0.5.1

----------------------------------------

TITLE: Configuring Azure NetApp Files Client for Different Clouds in Go
DESCRIPTION: This snippet shows how to configure the client factory to connect to different Azure clouds, such as Azure China. It uses ClientOptions to set the cloud endpoint.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armnetapp.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Configuring Azure Client Options for Different Clouds in Go
DESCRIPTION: Demonstrates how to set up client options for connecting to different Azure clouds, such as Azure China. This is useful for applications that need to work with sovereign clouds.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armdeploymentscripts.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Modifying Service Client in Go
DESCRIPTION: YAML directive to remove the pager method and export various generated methods in the service client Go file.

LANGUAGE: yaml
CODE:
directive:
  - from: zz_service_client.go
    where: $
    transform: >
      return $.
        replace(/func \(client \*ServiceClient\) NewListQueuesSegmentPager\(.+\/\/ listQueuesSegmentCreateRequest creates the ListQueuesSegment request/s, `// ListQueuesSegmentCreateRequest creates the ListQueuesFlatSegment ListQueuesSegment`).
        replace(/\(client \*ServiceClient\) listQueuesSegmentCreateRequest\(/, `(client *ServiceClient) ListQueuesSegmentCreateRequest(`).
        replace(/\(client \*ServiceClient\) listQueuesSegmentHandleResponse\(/, `(client *ServiceClient) ListQueuesSegmentHandleResponse(`);

----------------------------------------

TITLE: Deleting an Azure Automanage Configuration Profile in Go
DESCRIPTION: Removes an existing Automanage configuration profile from the specified resource group.

LANGUAGE: go
CODE:
_, err := configProfilesClient.Delete(context.Background(), "resourceGroupName", "configurationProfileName", nil)

----------------------------------------

TITLE: Transforming BlobName in Models
DESCRIPTION: YAML directive to replace 'BlobName' with 'string' in the generated models file, undoing a breaking change.

LANGUAGE: yaml
CODE:
directive:
- from: zz_models.go
  where: $
  transform: >
    return $.
      replace(/Name\s+\*BlobName/g, `Name *string`);

----------------------------------------

TITLE: Updating Service Version in Go Client Files
DESCRIPTION: YAML directive to update the service version from '2018-03-28' to '2024-08-04' in specific Go client files.

LANGUAGE: yaml
CODE:
directive:
- from: 
  - zz_messageid_client.go
  - zz_messages_client.go
  - zz_queue_client.go
  - zz_service_client.go

  where: $
  transform: >
    return $.
      replaceAll(`[]string{"2018-03-28"}`, `[]string{"2024-08-04"}`);

----------------------------------------

TITLE: Creating Specific Azure Iotfirmwaredefense Client in Go
DESCRIPTION: Code snippet demonstrating how to create a specific client (in this case, BinaryHardeningClient) using the client factory. This client can be used to perform operations related to binary hardening.

LANGUAGE: go
CODE:
client := clientFactory.NewBinaryHardeningClient()

----------------------------------------

TITLE: Configuring Azure Client with Custom Options
DESCRIPTION: Creates a client factory with custom options for connecting to different Azure clouds.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armworkloads.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Creating an Azure Hybrid Compute Client Factory in Go
DESCRIPTION: This snippet demonstrates how to create a client factory for Azure Hybrid Compute. It requires a subscription ID and a credential object.

LANGUAGE: go
CODE:
clientFactory, err := armhybridcompute.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Creating Oracle Database Client Factory
DESCRIPTION: Initializes a client factory for Azure Oracle Database with subscription ID and credentials

LANGUAGE: go
CODE:
clientFactory, err := armoracledatabase.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Creating Azure Default Credential in Go
DESCRIPTION: This code shows how to create a default Azure credential using the azidentity package for authentication with Azure services.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Installing Azure Servicenetworking Module
DESCRIPTION: Command to install the Azure Servicenetworking module using Go modules for dependency management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/servicenetworking/armservicenetworking

----------------------------------------

TITLE: Installing Azure Front Door Go Module
DESCRIPTION: Command to install the Azure Front Door module using Go modules for dependency management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/frontdoor/armfrontdoor

----------------------------------------

TITLE: Adding New Enum Values in Go
DESCRIPTION: New enum values are added to existing enum types like QuestionType and SolutionType. This snippet shows the syntax for adding new enum values in Go.

LANGUAGE: go
CODE:
- New value `QuestionTypeDateTimePicker`, `QuestionTypeMultiSelect` added to enum type `QuestionType`
- New value `SolutionTypeSelfHelp`, `SolutionTypeTroubleshooters` added to enum type `SolutionType`
- New value `TypeInput` added to enum type `Type`

----------------------------------------

TITLE: Authenticating with Azure Credentials
DESCRIPTION: Creates a default Azure credential object for authentication with Azure services.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: New Function Signature in Go
DESCRIPTION: Example of a new function added to a client in version 6.2.0

LANGUAGE: go
CODE:
func NewGalleryInVMAccessControlProfileVersionsClient(string, azcore.TokenCredential, *arm.ClientOptions) (*GalleryInVMAccessControlProfileVersionsClient, error)

----------------------------------------

TITLE: Creating Azure Newrelic Client Factory
DESCRIPTION: This code creates a client factory for Azure Newrelic services. It requires a subscription ID and a credential object. The factory can be used to create specific clients for different Azure Newrelic operations.

LANGUAGE: go
CODE:
clientFactory, err := armnewrelicobservability.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Configuring Typespec for Go SDK Generation in YAML
DESCRIPTION: YAML configuration for generating Go SDK using Typespec. It specifies options for service directory, package naming, and various generation features.

LANGUAGE: yaml
CODE:
options:
  "@azure-tools/typespec-go":
    service-dir: "SERVICE_DIRECTORY_NAME"
    package-dir: "PACKAGE_DIRECTORY_NAME"
    module: "github.com/Azure/azure-sdk-for-go/{service-dir}/{package-dir}"
    fix-const-stuttering: true
    flavor: "azure"
    generate-examples: true
    generate-fakes: true
    head-as-boolean: true
    inject-spans: true

----------------------------------------

TITLE: Configuring AutoRest for Azure Healthcare APIs SDK Generation in Go
DESCRIPTION: This YAML configuration specifies the settings for AutoRest to generate the Azure SDK for Go client library for Healthcare APIs. It includes the Azure ARM mode, required API specifications, license header, module version, and API version tag.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/92de53a5f1e0e03c94b40475d2135d97148ed014/specification/healthcareapis/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/92de53a5f1e0e03c94b40475d2135d97148ed014/specification/healthcareapis/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 2.1.0
tag: package-2024-03-31

----------------------------------------

TITLE: Initializing Azure Credentials in Go
DESCRIPTION: Creates default Azure credentials for authentication using the azidentity package.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Creating Azure Deployment Scripts Client in Go
DESCRIPTION: Shows how to create a specific client from the client factory. This client can be used to interact with Azure Deployment Scripts services.

LANGUAGE: go
CODE:
client := clientFactory.NewClient()

----------------------------------------

TITLE: Updating Module Information in Client Constructor
DESCRIPTION: This YAML directive modifies the client constructor in various files to use the internal package for module name and version information.

LANGUAGE: yaml
CODE:
directive:
  - from:
      - "*_client.go"
      - "client.go"
      - "client_factory.go"
    where: $
    transform: return $.replace(/moduleVersion/, "internal.ModuleVersion").replace(/moduleName+"/, "internal.ModuleName+\"/armappservice");

----------------------------------------

TITLE: Creating Client Factory for Azure Network Function Manager in Go
DESCRIPTION: This code creates a client factory for the Azure Network Function Manager, which can be used to instantiate specific clients.

LANGUAGE: go
CODE:
clientFactory, err := armnetworkfunction.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Creating Data Migration Client Factory
DESCRIPTION: Initializes a client factory for Azure Data Migration services using subscription ID and credentials

LANGUAGE: go
CODE:
clientFactory, err := armdatamigration.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Adding Deprecation Notice to README.md in Markdown
DESCRIPTION: This snippet shows how to add a deprecation notice to the beginning of the README.md file, right under the title.

LANGUAGE: markdown
CODE:
# Azure Monitor Ingestion client module for Go
> Deprecated: use [github.com/Azure/azure-sdk-for-go/sdk/monitor/ingestion/azlogs](https://pkg.go.dev/github.com/Azure/azure-sdk-for-go/sdk/monitor/ingestion/azlogs) instead
The Azure Monitor Ingestion client module is used to send custom logs to [Azure Monitor][azure_monitor_overview] using the [Logs Ingestion API][ingestion_overview].

----------------------------------------

TITLE: Removing QueueName from Parameter List in Swagger
DESCRIPTION: YAML directive to remove the QueueName parameter from specific paths in the Swagger document.

LANGUAGE: yaml
CODE:
directive:
- from: swagger-document
  where: $["x-ms-paths"]
  transform: >
    for (const property in $)
    {
        if (property.includes('/{queueName}/messages/{messageid}'))
        {
            $[property]["parameters"] = $[property]["parameters"].filter(function(param) { return (typeof param['$ref'] === "undefined") || (false == param['$ref'].endsWith("#/parameters/QueueName") && false == param['$ref'].endsWith("#/parameters/MessageId"))});
        }
        else if (property.includes('/{queueName}'))
        {
            $[property]["parameters"] = $[property]["parameters"].filter(function(param) { return (typeof param['$ref'] === "undefined") || (false == param['$ref'].endsWith("#/parameters/QueueName"))});
        }
    }

----------------------------------------

TITLE: Creating Redis Service Client
DESCRIPTION: Creates a specific Redis service client from the client factory to access API functionality.

LANGUAGE: go
CODE:
client := clientFactory.NewAccessPolicyAssignmentClient()

----------------------------------------

TITLE: Authenticating with Azure using Default Credentials in Go
DESCRIPTION: This snippet demonstrates how to create a default Azure credential for authentication. It uses the azidentity module to provide various authentication methods.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Configuring AutoRest for Azure Event Grid Go SDK Generation
DESCRIPTION: AutoRest configuration file that specifies how to generate the Azure Event Grid client SDK for Go. It defines input specifications, output settings, and includes multiple directives for customizing the generated code including endpoint parameterization, type references, and content type headers.

LANGUAGE: yaml
CODE:
title: EventGridPublisherClient
description: Azure Event Grid client
generated-metadata: false
clear-output-folder: false
go: true
input-file: 
    - https://raw.githubusercontent.com/Azure/azure-rest-api-specs/main/specification/eventgrid/data-plane/Microsoft.EventGrid/stable/2018-01-01/EventGrid.json
license-header: MICROSOFT_MIT_NO_VERSION
openapi-type: "data-plane"
module: github.com/Azure/azure-sdk-for-go/sdk/messaging/eventgrid/azeventgrid
output-folder: ../azeventgrid
override-client-name: Client
security: "AADToken"
use: "@autorest/go@4.0.0-preview.63"
version: "^3.0.0"
slice-elements-byval: true
remove-non-reference-schema: true
directive:
  # make the endpoint a parameter of the client constructor
  - from: swagger-document
    where: $["x-ms-parameterized-host"]
    transform: $.parameters[0]["x-ms-parameter-location"] = "client"
  # reference azcore/messaging/CloudEvent
  - from: client.go
    where: $
    transform: return $.replace(/\[\]CloudEvent/g, "[]messaging.CloudEvent");
  - from: client.go
    where: $
    transform: return $.replace(/func \(client \*Client\) PublishCloudEventEvents\(/g, "func (client *Client) internalPublishCloudEventEvents(");  
  - from: swagger-document
    where: $.definitions.CloudEventEvent
    transform: $["x-ms-external"] = true
  # delete client name prefix from method options and response types
  - from:
      - client.go
      - models.go
      - responses.go
      - options.go
    where: $
    transform: return $.replace(/Client(\w+)((?:Options|Response))/g, "$1$2");
  # delete some models that look like they're system events...
  - from: models.go
    where: $
    transform: return $.replace(/\/\/ (SubscriptionDeletedEventData|SubscriptionValidationEventData|SubscriptionValidationResponse).+?\n}/gs, "")    
  - from: models_serde.go
    where: $    
    transform: |
      return $
        .replace(/\/\/ MarshalJSON implements the json.Marshaller interface for type (SubscriptionDeletedEventData|SubscriptionValidationEventData|SubscriptionValidationResponse).+?\n}/gs, "")
        .replace(/\/\/ UnmarshalJSON implements the json.Unmarshaller interface for type (SubscriptionDeletedEventData|SubscriptionValidationEventData|SubscriptionValidationResponse).+?\n}/gs, "");
  - from: 
      - models.go
      - client.go
      - responses.go
      - options.go
    where: $
    transform: return $.replace(/CloudEventEvent/g, "CloudEvent");
  - from: 
      - models.go
      - models_serde.go
      - client.go
      - responses.go
      - options.go
    where: $
    transform: return $.replace(/EventGridEvent/g, "Event");
  - from: 
      - client.go
    where: $
    transform: | 
      return $.replace(
        /(func \(client \*Client\) publishCloudEventsCreateRequest.+?)return req, nil/s, 
        '$1\nreq.Raw().Header.Set("Content-type", "application/cloudevents-batch+json; charset=utf-8")\nreturn req, nil');

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK Generation in YAML
DESCRIPTION: This YAML configuration sets up AutoRest for generating the Azure SDK for Go. It specifies the Azure ARM mode, required API specifications, license header, module version, and enables package locks.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/0cc5e2efd6ffccf30e80d1e150b488dd87198b94/specification/resources/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/0cc5e2efd6ffccf30e80d1e150b488dd87198b94/specification/resources/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.2.0
package-locks: true

----------------------------------------

TITLE: Configuring Client Options
DESCRIPTION: Sets up client options for connecting to different Azure clouds including sovereign clouds and Azure Stack

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armdataboundaries.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Creating Azure Data Box Service Client in Go
DESCRIPTION: This code demonstrates how to create a specific Azure Data Box service client using the previously created client factory. This client provides access to Data Box-related APIs.

LANGUAGE: go
CODE:
client := clientFactory.NewServiceClient()

----------------------------------------

TITLE: Creating Azure Features Client
DESCRIPTION: Creates a new client instance from the client factory for accessing Azure Features APIs.

LANGUAGE: go
CODE:
client := clientFactory.NewClient()

----------------------------------------

TITLE: Configuring Azure Container Registry Client Options in Go
DESCRIPTION: This code demonstrates how to set client options, specifically for connecting to different Azure clouds. It uses the arm.ClientOptions struct to configure the cloud endpoint.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armcontainerregistry.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Installing Azure Databricks Module in Go
DESCRIPTION: This snippet demonstrates how to install the Azure Databricks module using Go's package manager. It requires Go modules for versioning and dependency management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/databricks/armdatabricks

----------------------------------------

TITLE: Configuring Sanitizers for Go SDK Tests
DESCRIPTION: Shows how to configure sanitizers for Go SDK tests in the TestMain function. This includes removing built-in sanitizers and setting up custom sanitizers to prevent recording secrets.

LANGUAGE: Go
CODE:
const recordingDirectory = "<path to service directory with assets.json file>/testdata"

func TestMain(m *testing.M) {
	code := run(m)
	os.Exit(code)
}

func run(m *testing.M) int {
	// Initialize
	if recording.GetRecordMode() == recording.PlaybackMode || recording.GetRecordMode() == recording.RecordingMode {
		proxy, err := recording.StartTestProxy(recordingDirectory, nil)
		if err != nil {
			panic(err)
		}

		// NOTE: defer should not be used directly within TestMain as it will not be executed due to os.Exit()
		defer func() {
			err := recording.StopTestProxy(proxy)
			if err != nil {
				panic(err)
			}
		}()
	}

	// sanitizers run in playback and recording modes
	if recording.GetRecordMode() != recording.LiveMode {
		// configure sanitizers here. For example:
		err := recording.RemoveRegisteredSanitizers([]string{
			"AZSDK3430", // body key $..id
		}, nil)
		if err != nil {
			panic(err)
		}
	}

	// run test cases
	return m.Run()
}

----------------------------------------

TITLE: Creating Stream Analytics Client Instance
DESCRIPTION: Creates a new Clusters client instance using the client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewClustersClient()

----------------------------------------

TITLE: Configuring AutoRest Settings for Azure SDK Go Generation
DESCRIPTION: Configuration settings for AutoRest to generate Go SDK code from Azure REST API specifications. Includes references to resource manager specifications, license header requirements, module versioning, and package settings for subscriptions API version 2022-12.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/4f4073bdb028bc84bc3e6405c1cbaf8e89b83caf/specification/resources/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/4f4073bdb028bc84bc3e6405c1cbaf8e89b83caf/specification/resources/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.3.0
package-subscriptions: true
tag: package-subscriptions-2022-12

----------------------------------------

TITLE: Configuring Service Bus Environment Variables
DESCRIPTION: Environment variable configuration required for running the reliability tests locally. Specifies the Service Bus namespace endpoint.

LANGUAGE: bash
CODE:
SERVICEBUS_ENDPOINT=<hostname of the Service Bus namespace (ex: <name>.servicebus.windows.net)>

----------------------------------------

TITLE: Installing Azure Terraform Module
DESCRIPTION: Command to install the Azure Terraform module using Go modules

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/terraform/armterraform

----------------------------------------

TITLE: Authenticating with Azure Credentials
DESCRIPTION: Creates default Azure credentials for authentication with Azure Servicenetworking using azidentity module.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Creating ManagedCCFClient in Go
DESCRIPTION: Defines new functions for creating and using a ManagedCCFClient, which manages Confidential Consortium Framework instances.

LANGUAGE: Go
CODE:
func NewManagedCCFClient(baseURI string, credential azcore.TokenCredential, options *arm.ClientOptions) (*ManagedCCFClient, error)

func (cf *ClientFactory) NewManagedCCFClient() *ManagedCCFClient

func (client *ManagedCCFClient) BeginCreate(ctx context.Context, resourceGroupName string, ledgerName string, parameters ManagedCCF, options *ManagedCCFClientBeginCreateOptions) (*runtime.Poller[ManagedCCFClientCreateResponse], error)

func (client *ManagedCCFClient) BeginDelete(ctx context.Context, resourceGroupName string, ledgerName string, options *ManagedCCFClientBeginDeleteOptions) (*runtime.Poller[ManagedCCFClientDeleteResponse], error)

func (client *ManagedCCFClient) Get(ctx context.Context, resourceGroupName string, ledgerName string, options *ManagedCCFClientGetOptions) (ManagedCCFClientGetResponse, error)

func (client *ManagedCCFClient) NewListByResourceGroupPager(resourceGroupName string, options *ManagedCCFClientListByResourceGroupOptions) *runtime.Pager[ManagedCCFClientListByResourceGroupResponse]

func (client *ManagedCCFClient) NewListBySubscriptionPager(options *ManagedCCFClientListBySubscriptionOptions) *runtime.Pager[ManagedCCFClientListBySubscriptionResponse]

func (client *ManagedCCFClient) BeginUpdate(ctx context.Context, resourceGroupName string, ledgerName string, parameters ManagedCCF, options *ManagedCCFClientBeginUpdateOptions) (*runtime.Poller[ManagedCCFClientUpdateResponse], error)

----------------------------------------

TITLE: Creating Azure Deviceregistry Client Factory in Go
DESCRIPTION: This code creates a client factory for Azure Deviceregistry. It requires a subscription ID and credentials. The factory can be used to create specific clients within the module.

LANGUAGE: go
CODE:
clientFactory, err := armdeviceregistry.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Authenticating with Azure Using Default Credentials in Go
DESCRIPTION: Create a default Azure credential using the azidentity package for authentication with Azure services.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Adding Copyright Header to Go Files
DESCRIPTION: Example of the required copyright header that must be included at the top of every source file in the project. It includes the MIT license notice.

LANGUAGE: golang
CODE:
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

package <mypackage>

----------------------------------------

TITLE: Configuring AutoRest for Azure IoT Central SDK Generation in Go
DESCRIPTION: This YAML configuration specifies the settings for AutoRest to generate the Azure SDK for Go for IoT Central. It includes the Azure ARM flag, required API specifications, license header, module version, and API version tag.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/iotcentral/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/iotcentral/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.2.0
tag: package-2021-06

----------------------------------------

TITLE: Creating App Configuration Client Factory in Go
DESCRIPTION: This code creates a client factory for Azure App Configuration. It requires a subscription ID and a credential object. The factory can be used to create specific clients for different App Configuration operations.

LANGUAGE: go
CODE:
clientFactory, err := armappconfiguration.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Initializing Provider HUB Client Factory
DESCRIPTION: Creates a new client factory instance for Azure Provider HUB with default configuration

LANGUAGE: go
CODE:
clientFactory, err := armproviderhub.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Adding Internal Import Directive
DESCRIPTION: YAML directive to add internal package import to multiple client-related Go files.

LANGUAGE: yaml
CODE:
directive:
  - from:
      - "*_client.go"
      - "client.go"
      - "client_factory.go"
    where: $
    transform: return $.replace(/import \(\n/, "import (\n\"github.com/Azure/azure-sdk-for-go/profile/p20200901/internal\"\n");

----------------------------------------

TITLE: Configuring Client Factory with Custom Options
DESCRIPTION: Creates a client factory with custom options for connecting to different Azure clouds

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armcustomproviders.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Configuring AutoRest for Azure Storage Mover SDK Generation in Go
DESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure Storage Mover SDK for Go. It specifies Azure ARM mode, required API specifications, license header, module version, and package tag.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/4ee6d9fd7687d4b67117c5a167c191a7e7e70b53/specification/storagemover/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/4ee6d9fd7687d4b67117c5a167c191a7e7e70b53/specification/storagemover/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 2.2.0
tag: package-2024-07

----------------------------------------

TITLE: Release History Changelog Markdown
DESCRIPTION: Markdown formatted changelog documenting version history, including features added, breaking changes, bug fixes and other changes across multiple releases of the Azure SDK for Go tools package.

LANGUAGE: markdown
CODE:
# Release History

## 1.11.0 (Unreleased)

### Features Added

* Added function `tracing.NewSpanValidator` to create a span validator for use with in unit tests.
* Added type `tracing.SpanMatcher` to match spans in a span validator.

### Breaking Changes

### Bugs Fixed

### Other Changes
* Zero `RecordingOptions.ProxyPort` is interpreted as indicating the default port used
  by `StartTestProxy`
* Improved presentation of test proxy recording mismatch errors

----------------------------------------

TITLE: Renaming Share-Prefixed Models
DESCRIPTION: YAML directive to rename models by removing the 'Share' prefix.

LANGUAGE: yaml
CODE:
directive:
- rename-model:
    from: ShareProtocolSettings
    to: ProtocolSettings
- rename-model:
    from: ShareSmbSettings
    to: SMBSettings

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK for Go Generation
DESCRIPTION: This YAML configuration specifies settings for AutoRest to generate the Azure SDK for Go. It includes ARM support, required specifications, license header, module version, and enables package links.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/0cc5e2efd6ffccf30e80d1e150b488dd87198b94/specification/resources/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/0cc5e2efd6ffccf30e80d1e150b488dd87198b94/specification/resources/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.2.0
package-links: true

----------------------------------------

TITLE: Configuring Azure Network Client for Sovereign Clouds in Go
DESCRIPTION: Sets up a client factory with options for connecting to sovereign clouds or Azure Stack.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armnetwork.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK for Go NGINX Resource Manager
DESCRIPTION: This YAML configuration sets up AutoRest for generating the Azure SDK for Go, specifically for the NGINX resource manager. It specifies the Azure ARM mode, required API specifications, license header, module version, and API version tag.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/b8d26b0e4c1886458fa56c22aac09c3e3e9a5c9e/specification/nginx/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/b8d26b0e4c1886458fa56c22aac09c3e3e9a5c9e/specification/nginx/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 3.1.0-beta.2
tag: package-2024-11-01-preview

----------------------------------------

TITLE: Configuring Azure DevOps Client for Different Clouds in Go
DESCRIPTION: Example of how to configure the Azure DevOps client factory for different Azure clouds, such as Azure China. This uses ClientOptions to set the cloud endpoint.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armdevops.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Installing Azure Event Grid Client Module for Go
DESCRIPTION: This command installs the Azure Event Grid client module for Go using the go get command.

LANGUAGE: bash
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/messaging/eventgrid/azeventgrid

----------------------------------------

TITLE: Configuring Azure Cloud Options
DESCRIPTION: Sets up client options for connecting to specific Azure cloud environments including sovereign clouds.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armfeatures.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Installing Azure App Configuration Module in Go
DESCRIPTION: This snippet demonstrates how to install the azappconfig module using the go get command. It retrieves the module from the Azure SDK for Go repository.

LANGUAGE: Bash
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/data/azappconfig

----------------------------------------

TITLE: Creating Azure Power BI Resources Client in Go
DESCRIPTION: Demonstrates how to create a specific client for Power BI Resources using the client factory. This client can be used to perform operations on Power BI resources.

LANGUAGE: go
CODE:
client := clientFactory.NewPowerBIResourcesClient()

----------------------------------------

TITLE: Creating Azure Blueprint Client in Go
DESCRIPTION: Instantiates a new Blueprint client using the client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewBlueprintsClient()

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK Go Generation
DESCRIPTION: This YAML configuration sets up AutoRest for generating Azure SDK Go code. It specifies the Azure ARM mode, required specification files, license header, module version, and API version tag.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/c1cea38fb7e5cec9afe223a2ed15cbe2fbeecbdb/specification/redhatopenshift/resource-manager/Microsoft.RedHatOpenShift/openshiftclusters/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/c1cea38fb7e5cec9afe223a2ed15cbe2fbeecbdb/specification/redhatopenshift/resource-manager/Microsoft.RedHatOpenShift/openshiftclusters/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.6.0
tag: package-2023-11

----------------------------------------

TITLE: Authenticating with Azure Credentials
DESCRIPTION: Creates default Azure credentials for authentication using the azidentity package

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Creating Azure Bare Metal Instances Client in Go
DESCRIPTION: This code demonstrates how to create a specific client for Azure Bare Metal Instances using the client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewAzureBareMetalInstancesClient()

----------------------------------------

TITLE: Creating Azure Dynatrace Client Factory in Go
DESCRIPTION: This code creates a client factory for Azure Dynatrace using the armdynatrace package. It requires a subscription ID and a credential object. The factory can be used to create specific clients for different Dynatrace operations.

LANGUAGE: go
CODE:
clientFactory, err := armdynatrace.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Installing golangci-lint for Go
DESCRIPTION: Command to install the golangci-lint tool for Go linting. This tool is used to run various linters on the codebase.

LANGUAGE: bash
CODE:
go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.41.1

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK Generation in Go
DESCRIPTION: This YAML configuration specifies settings for AutoRest to generate the Azure SDK for Go. It includes references to Azure REST API specifications, sets the azure-arm flag, and defines the module version and license header.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/devops/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/devops/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 0.7.0

----------------------------------------

TITLE: Authenticating with Azure Identity in Go
DESCRIPTION: This snippet demonstrates how to create a default Azure credential using the azidentity package. It provides a way to authenticate with Azure services.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Configuring Azure Networkanalytics Client for Different Clouds in Go
DESCRIPTION: Example of creating a client factory with custom options to connect to different Azure clouds or Azure Stack. This uses the arm.ClientOptions to set the cloud endpoint.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armnetworkanalytics.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Removing Module Constants Directive
DESCRIPTION: YAML directive to remove moduleName and moduleVersion constants from the constants.go file.

LANGUAGE: yaml
CODE:
directive:
  - from: constants.go
    where: $
    transform: return $.replace(/const \(\n\s+moduleName.+\n\s+moduleVersion.+\n\)\n/, "");

----------------------------------------

TITLE: Authenticating with Azure Credentials
DESCRIPTION: Creates default Azure credentials for authentication with Azure Purview services

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Installing Azure Data Share Module for Go
DESCRIPTION: This command installs the Azure Data Share module using Go's package manager. It requires Go modules for versioning and dependency management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/datashare/armdatashare

----------------------------------------

TITLE: Updating Service Version to 2025-05-05
DESCRIPTION: YAML directive to update the service version in multiple generated files.

LANGUAGE: yaml
CODE:
directive:
- from: 
  - zz_directory_client.go
  - zz_file_client.go
  - zz_share_client.go
  - zz_service_client.go
  where: $
  transform: >
    return $.
      replaceAll(`[]string{"2025-01-05"}`, `[]string{ServiceVersion}`);

----------------------------------------

TITLE: Installing Azure OpenTelemetry Adapter Module in Go
DESCRIPTION: This command adds the latest version of the azotel module to your Go project's dependencies.

LANGUAGE: bash
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/tracing/azotel

----------------------------------------

TITLE: Configuring Azure Client for Sovereign Clouds
DESCRIPTION: Sets up client options for connecting to specific Azure cloud environments like Azure China.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armmigrate.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Listing API Keys in Go
DESCRIPTION: Creates a new pager for listing API keys using the APIKeysClient.

LANGUAGE: Go
CODE:
*APIKeysClient.NewListPager(string, string, *APIKeysClientListOptions) *runtime.Pager[APIKeysClientListResponse]

----------------------------------------

TITLE: Creating Service Fabric Client Factory
DESCRIPTION: Initializing a client factory for accessing Service Fabric APIs with basic configuration

LANGUAGE: go
CODE:
clientFactory, err := armservicefabric.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Creating Azure Policy Definition Client
DESCRIPTION: Creates a new definitions client using the client factory for accessing Policy Definition APIs.

LANGUAGE: go
CODE:
client := clientFactory.NewDefinitionsClient()

----------------------------------------

TITLE: Authenticating with Azure Credentials
DESCRIPTION: Creates a default Azure credential object for authentication with Azure services using the azidentity module.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Installing Azure Dashboard Module in Go
DESCRIPTION: This snippet shows how to install the Azure Dashboard module using Go's package manager.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/dashboard/armdashboard

----------------------------------------

TITLE: Creating Azure Monitor Alert Rule Client
DESCRIPTION: Creates a specific client instance for working with Alert Rule Incidents

LANGUAGE: go
CODE:
client := clientFactory.NewAlertRuleIncidentsClient()

----------------------------------------

TITLE: Installing Azure Tables Client Library for Go
DESCRIPTION: Install the Azure Tables client library for Go using the go get command.

LANGUAGE: bash
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/data/aztables

----------------------------------------

TITLE: Creating Serial Ports Client in Go
DESCRIPTION: Creates a new Serial Ports client instance using the client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewSerialPortsClient()

----------------------------------------

TITLE: Deleting API Keys in Go
DESCRIPTION: Deletes an API key using the APIKeysClient.

LANGUAGE: Go
CODE:
*APIKeysClient.Delete(context.Context, string, string, string, *APIKeysClientDeleteOptions) (APIKeysClientDeleteResponse, error)

----------------------------------------

TITLE: Configuring Logs Query Client Generation for Azure SDK for Go
DESCRIPTION: YAML configuration for generating the Logs Query client in the Azure SDK for Go. It specifies input files, output settings, and includes directives for customizing the generated code.

LANGUAGE: yaml
CODE:
title: Logs Query Client
clear-output-folder: false
go: true
input-file: 
    - https://github.com/Azure/azure-rest-api-specs/blob/21f5332f2dc7437d1446edf240e9a3d4c90c6431/specification/operationalinsights/data-plane/Microsoft.OperationalInsights/stable/2022-10-27/OperationalInsights.json
license-header: MICROSOFT_MIT_NO_VERSION
module: github.com/Azure/azure-sdk-for-go/sdk/monitor/azquery
openapi-type: "data-plane"
output-folder: ../azquery
security: "AADToken"
use: "@autorest/go@4.0.0-preview.61"
inject-spans: true
version: "^3.0.0"

directive:
  # delete extra endpoints
  - from: swagger-document
    where: $["paths"]
    transform: >
        delete $["/workspaces/{workspaceId}/metadata"];
  - from: swagger-document
    where: $["x-ms-paths"]
    transform: >
        delete $["/{resourceId}/query?disambiguation_dummy"];

  # delete extra operations
  - remove-operation: Query_Get
  - remove-operation: Query_ResourceGet

  # delete metadata models
  - remove-model: metadataResults
  - remove-model: metadataCategory
  - remove-model: metadataSolution
  - remove-model: metadataResourceType
  - remove-model: metadataTable
  - remove-model: metadataFunction
  - remove-model: metadataQuery
  - remove-model: metadataApplication
  - remove-model: metadataWorkspace
  - remove-model: metadataResource
  - remove-model: metadataPermissions

 # rename log operations to generate into a separate logs client
  - rename-operation:
      from: Query_Execute
      to: Logs_QueryWorkspace
  - rename-operation:
      from: Query_Batch
      to: Logs_QueryBatch
  - rename-operation:
      from: Query_ResourceExecute
      to: Logs_QueryResource

  # rename Body.Workspaces to Body.AdditionalWorkspaces
  - from: swagger-document
    where: $.definitions.queryBody.properties.workspaces
    transform: $["x-ms-client-name"] = "AdditionalWorkspaces"
  
  # rename Render to Visualization
  - from: swagger-document
    where: $.definitions.queryResults.properties.render
    transform: $["x-ms-client-name"] = "Visualization"
  - from: swagger-document
    where: $.definitions.batchQueryResults.properties.render
    transform: $["x-ms-client-name"] = "Visualization"

  # rename BatchQueryRequest.ID to BatchQueryRequest.CorrelationID
  - from: swagger-document
    where: $.definitions.batchQueryRequest.properties.id
    transform: $["x-ms-client-name"] = "CorrelationID"
  - from: swagger-document
    where: $.definitions.batchQueryResponse.properties.id
    transform: $["x-ms-client-name"] = "CorrelationID"

  # rename BatchQueryRequest.Workspace to BatchQueryRequest.WorkspaceID
  - from: swagger-document
    where: $.definitions.batchQueryRequest.properties.workspace
    transform: $["x-ms-client-name"] = "WorkspaceID"
  
  # rename Prefer to Options
  - from: swagger-document
    where: $.parameters.PreferHeaderParameter
    transform: $["x-ms-client-name"] = "Options"
  - from: options.go
    where: $
    transform: return $.replace(/Options \*string/g, "Options *LogsQueryOptions");
  - from: logs_client.go
    where: $
    transform: return $.replace(/\*options\.Options/g, "options.Options.preferHeader()");
  
  # add default values for batch request path and method attributes
  - from: swagger-document
    where: $.definitions.batchQueryRequest.properties.path
    transform: $["x-ms-client-default"] = "/query"
  - from: swagger-document
    where: $.definitions.batchQueryRequest.properties.method
    transform: $["x-ms-client-default"] = "POST"
  - from: swagger-document
    where: $.definitions.batchQueryRequest.properties.path.x-ms-enum
    transform: $["modelAsString"] = true
  - from: swagger-document
    where: $.definitions.batchQueryRequest.properties.path.x-ms-enum
    transform: $["name"] = "BatchQueryRequestPath"
  - from: swagger-document
    where: $.definitions.batchQueryRequest.properties.method.x-ms-enum
    transform: $["modelAsString"] = true
  - from: swagger-document
    where: $.definitions.batchQueryRequest.properties.method.x-ms-enum
    transform: $["name"] = "BatchQueryRequestMethod"

  # add descriptions for models and constants that don't have them
  - from: constants.go
    where: $
    transform: return $.replace(/type ResultType string/, "//ResultType - Reduces the set of data collected. The syntax allowed depends on the operation. See the operation's description for details.\ntype ResultType string");

  # delete unused error models
  - from: models.go
    where: $
    transform: return $.replace(/(?:\/\/.*\s)+type (?:ErrorResponse|ErrorResponseAutoGenerated|ErrorInfo|ErrorDetail).+\{(?:\s.+\s)+\}\s/g, "");
  - from: models_serde.go
    where: $
    transform: return $.replace(/(?:\/\/.*\s)+func \(\w \*?(?:ErrorResponse|ErrorResponseAutoGenerated|ErrorInfo|ErrorDetail).*\{\s(?:.+\s)+\}\s/g, "");

  # point the clients to the correct host url
  - from: 
         - logs_client.go
         - metrics_client.go
    where: $
    transform: return $.replace(/host/g, "client.host");
  - from: 
         - logs_client.go
         - metrics_client.go
    where: $
    transform: return $.replace(/internal \*azcore.Client/g, "host string\n internal *azcore.Client");

  # delete generated host url
  - from: constants.go
    where: $
    transform: return $.replace(/const host = "(.*?)"/, "");

  # change Table.Rows from type [][]byte to type []Row
  - from: models.go
    where: $
    transform: return $.replace(/Rows \[\]\[\]\[\]byte/g, "Rows []Row");

  # change type of timespan from *string to *TimeInterval
  - from: 
        - models.go
        - options.go
    where: $
    transform: return $.replace(/Timespan \*string/g, "Timespan *TimeInterval");
  - from: metrics_client.go
    where: $
    transform: return $.replace(/reqQP\.Set\("timespan", \*options\.Timespan\)/g, "reqQP.Set(\"timespan\", string(*options.Timespan))");

----------------------------------------

TITLE: Authenticating with Azure Notification Hubs using Default Credentials
DESCRIPTION: Create a default Azure credential for authentication. This snippet demonstrates how to use the azidentity package to create a default credential for Azure authentication.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Creating Azure Dashboard Client Factory in Go
DESCRIPTION: This snippet shows how to create a client factory for the Azure Dashboard module. It requires a subscription ID and a credential object.

LANGUAGE: go
CODE:
clientFactory, err := armdashboard.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Authenticating with Azure Credentials
DESCRIPTION: Creates a default Azure credential object for authentication with Azure services using the azidentity package.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Configuring Azure Standbypool Client Factory for China Cloud in Go
DESCRIPTION: This snippet shows how to configure the client factory to connect to Azure China cloud. It uses ClientOptions to set the cloud endpoint and creates a new client factory with these options.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armstandbypool.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Creating Azure Policy Insight Client Factory in Go
DESCRIPTION: This snippet demonstrates how to create a client factory for Azure Policy Insight. It requires a subscription ID and a credential object.

LANGUAGE: go
CODE:
clientFactory, err := armpolicyinsights.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Creating Azure Default Credential in Go
DESCRIPTION: Code snippet demonstrating how to create a default Azure credential using the azidentity package for authentication with Azure Service Fabric Mesh.

LANGUAGE: Go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Setting Proxy Certificate Environment Variable in PowerShell
DESCRIPTION: Sets the PROXY_CERT environment variable to the path of the dotnet-devcert.crt file.

LANGUAGE: PowerShell
CODE:
$ENV:PROXY_CERT="C:/ <path-to-repo> /azure-sdk-for-go/eng/common/testproxy/dotnet-devcert.crt"

----------------------------------------

TITLE: Configuring AutoRest Settings for Azure Hybrid Data Manager SDK
DESCRIPTION: Defines AutoRest configuration parameters including Azure ARM mode, required API specifications, license header, and module version for generating the Hybrid Data Manager SDK code.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/hybriddatamanager/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/hybriddatamanager/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.2.0

----------------------------------------

TITLE: Creating Azure Application Insight Client Factory in Go
DESCRIPTION: This snippet shows how to create a client factory for Azure Application Insight. It uses the armapplicationinsights package to create a new client factory with a subscription ID and credential.

LANGUAGE: go
CODE:
clientFactory, err := armapplicationinsights.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Basic Profile Builder Usage Example
DESCRIPTION: Example of using the Profile Builder list command with manual package input

LANGUAGE: bash
CODE:
profileBuilder list
github.com/Azure/azure-sdk-for-go/services/logic/mgmt/2016-06-01/logic
github.com/Azure/azure-sdk-for-go/services/redis/mgmt/2017-02-01/redis

----------------------------------------

TITLE: Configuring Azure Client Options for Different Clouds in Go
DESCRIPTION: This code shows how to configure client options to connect to different Azure clouds, including sovereign clouds and Azure Stack.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armmysqlflexibleservers.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Configuring Client Options for Different Clouds
DESCRIPTION: Example of configuring client options to connect to different Azure clouds like Azure China.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armhybridnetwork.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: New Struct: ManagedClusterAIToolchainOperatorProfile
DESCRIPTION: Introduces a new struct 'ManagedClusterAIToolchainOperatorProfile'.

LANGUAGE: Go
CODE:
New struct `ManagedClusterAIToolchainOperatorProfile`

----------------------------------------

TITLE: Changing Casing of NfsFileType
DESCRIPTION: YAML directive to change the casing of NfsFileType to NFSFileType in multiple generated files.

LANGUAGE: yaml
CODE:
directive:
- from: 
  - zz_constants.go
  - zz_options.go
  - zz_response_types.go
  - zz_file_client.go
  - zz_directory_client.go
  where: $
  transform: >
    return $.
      replaceAll(`NfsFileType`, `NFSFileType`);

----------------------------------------

TITLE: Creating DNS Client Factory
DESCRIPTION: Initializes a client factory for creating Azure DNS service clients using subscription ID and credentials

LANGUAGE: go
CODE:
clientFactory, err := armdns.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: New Constants and Types (Go)
DESCRIPTION: Defines new enum types and their values for AutoRunState, OnBuildError and VMBootOptimizationState.

LANGUAGE: go
CODE:
type AutoRunState string
const (
    AutoRunStateAutoRunDisabled AutoRunState = "AutoRunDisabled"
    AutoRunStateAutoRunEnabled AutoRunState = "AutoRunEnabled"
)

type OnBuildError string
const (
    OnBuildErrorAbort OnBuildError = "Abort"
    OnBuildErrorCleanup OnBuildError = "Cleanup"
)

type VMBootOptimizationState string
const (
    VMBootOptimizationStateDisabled VMBootOptimizationState = "Disabled"
    VMBootOptimizationStateEnabled VMBootOptimizationState = "Enabled"
)

----------------------------------------

TITLE: Creating FederatedIdentityCredentialsClient in Go
DESCRIPTION: Demonstrates how to create a new FederatedIdentityCredentialsClient using a subscription ID, token credential, and optional client options.

LANGUAGE: Go
CODE:
NewFederatedIdentityCredentialsClient(string, azcore.TokenCredential, *arm.ClientOptions) (*FederatedIdentityCredentialsClient, error)

----------------------------------------

TITLE: Authenticating with Azure Using Default Credentials
DESCRIPTION: Creates a default Azure credential object for authentication with Azure services.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Creating Azure Subscriptions Client
DESCRIPTION: Creates a client instance from the client factory to access Azure Subscriptions APIs.

LANGUAGE: go
CODE:
client := clientFactory.NewClient()

----------------------------------------

TITLE: Creating Fluidrelay Servers Client
DESCRIPTION: Creates a new servers client instance using the client factory for accessing server-related APIs.

LANGUAGE: go
CODE:
client := clientFactory.NewServersClient()

----------------------------------------

TITLE: Uploading a File in Go
DESCRIPTION: Uploads a file using the FilesClient, specifying the workspace name, file name, file details, and optional upload options.

LANGUAGE: go
CODE:
*FilesClient.Upload(context.Context, string, string, UploadFile, *FilesClientUploadOptions) (FilesClientUploadResponse, error)

----------------------------------------

TITLE: Adding New Client Functions in Go
DESCRIPTION: Introduces new functions for various client types, expanding the SDK's capabilities to interact with different Cosmos DB resources and operations.

LANGUAGE: Go
CODE:
New function `*TableResourcesClient.BeginCreateUpdateTableRoleAssignment(context.Context, string, string, string, TableRoleAssignmentResource, *TableResourcesClientBeginCreateUpdateTableRoleAssignmentOptions) (*runtime.Poller[TableResourcesClientCreateUpdateTableRoleAssignmentResponse], error)`
New function `*TableResourcesClient.BeginCreateUpdateTableRoleDefinition(context.Context, string, string, string, TableRoleDefinitionResource, *TableResourcesClientBeginCreateUpdateTableRoleDefinitionOptions) (*runtime.Poller[TableResourcesClientCreateUpdateTableRoleDefinitionResponse], error)`

----------------------------------------

TITLE: Markdown Link to Azure Key Vault Troubleshooting Guide
DESCRIPTION: Markdown formatted link directing users to the main Azure Key Vault SDK troubleshooting documentation.

LANGUAGE: markdown
CODE:
See our [Azure Key Vault SDK Troubleshooting Guide](https://github.com/Azure/azure-sdk-for-go/blob/main/sdk/security/keyvault/TROUBLESHOOTING.md)

----------------------------------------

TITLE: Creating Azure Data Box Edge Client Factory in Go
DESCRIPTION: Example of creating a client factory for Azure Data Box Edge. The factory is used to create specific clients for different operations.

LANGUAGE: go
CODE:
clientFactory, err := armdataboxedge.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Creating Azure Hybrid Data Client Factory
DESCRIPTION: Initializes a client factory for Azure Hybrid Data services using subscription ID and credentials

LANGUAGE: go
CODE:
clientFactory, err := armazuredata.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Creating Azure Standbypool Client Factory in Go
DESCRIPTION: This code creates a client factory for Azure Standbypool. It requires a subscription ID and a credential object. The factory can be used to create specific clients within the module.

LANGUAGE: go
CODE:
clientFactory, err := armstandbypool.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Creating Client for Recording in Go Tests
DESCRIPTION: Shows how to create a client for recording HTTP interactions in Go tests using the internal/recording package. This function sets up a custom HTTP transport for routing requests through the test proxy.

LANGUAGE: Go
CODE:
package aztables

import (
	...

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/internal/recording"
	"github.com/Azure/azure-sdk-for-go/sdk/internal/test/credential"
)

func createClientForRecording(t *testing.T, tableName string, serviceURL string) (*Client, error) {
	transport, err := recording.NewRecordingHTTPClient(t)
	require.NoError(t, err)

	options := &ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: transport,
		},
	}

	// credential.New returns a credential for Entra ID authentication. It works in CI
	// and local development, in all recording modes. To authenticate live tests on
	// your machine, sign in to the Azure CLI or Azure Developer CLI.
	cred, err := credential.New(nil)
	require.NoError(t, err)

	return NewClient(runtime.JoinPaths(serviceURL, tableName), &cred, options)
}

func startRecording(t *testing.T) {
	err := recording.Start(t, recordingDirectory, nil)
	require.NoError(t, err)
	t.Cleanup(func() {
		err := recording.Stop(t, nil)
		require.NoError(t, err)
	})
}

----------------------------------------

TITLE: Configuring Azure Client Options for Different Clouds in Go
DESCRIPTION: This code shows how to set up client options for connecting to different Azure clouds, including sovereign clouds and Azure Stack. It uses the arm.ClientOptions struct to configure the endpoint.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armhybridconnectivity.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Creating Azure Portal Client Factory
DESCRIPTION: Initializes a new client factory for Azure Portal services using subscription ID and credentials

LANGUAGE: go
CODE:
clientFactory, err := armportal.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Authenticating with Azure Credentials
DESCRIPTION: Creates default Azure credentials for authentication with Azure Maps services using azidentity module.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK for Go - VMware CloudSimple
DESCRIPTION: YAML configuration for AutoRest to generate the Azure SDK for Go client for VMware CloudSimple. It specifies Azure ARM mode, required API specifications, license header, and module version.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/vmwarecloudsimple/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/vmwarecloudsimple/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.2.0

----------------------------------------

TITLE: Documenting Release History in Markdown
DESCRIPTION: This markdown document outlines the release history for the Event Grid Basic module in the Azure SDK for Go. It includes sections for unreleased changes, the GA release, and the initial preview release.

LANGUAGE: markdown
CODE:
# Release History

## 1.0.1 (Unreleased)

### Features Added

### Breaking Changes

### Bugs Fixed

### Other Changes

## 1.0.0 (2024-04-09)

- GA for the Event Grid basic module.

## 0.1.0 (2024-03-05)

### Features Added

- Initial preview for the Event Grid Basic module. This module is the new home the `github.com/Azure/azure-sdk-for-go/sdk/messaging/azeventgrid/publisher` package.

----------------------------------------

TITLE: Update KeyVault Test Resources Example
DESCRIPTION: Example showing how to update a KeyVault service resource group's deletion time to 24 hours from execution.

LANGUAGE: powershell
CODE:
Update-TestResources.ps1 keyvault -DeleteAfterHours 24

----------------------------------------

TITLE: Creating Azure Subscription Client
DESCRIPTION: Creates a new client instance from the client factory for accessing Azure Subscription APIs

LANGUAGE: go
CODE:
client := clientFactory.NewClient()

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK Go Generation
DESCRIPTION: YAML configuration for AutoRest to generate Azure SDK for Go. It specifies the Azure ARM mode, required API specifications, license header, and module version.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/fb9c8e2ca33e9723c2b2fc849f627329067feb54/specification/extendedlocation/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/fb9c8e2ca33e9723c2b2fc849f627329067feb54/specification/extendedlocation/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.3.0-beta.1

----------------------------------------

TITLE: Configuring Azure Databasewatcher Client for Different Clouds in Go
DESCRIPTION: This snippet shows how to configure the client factory for different Azure clouds or Azure Stack. It uses ClientOptions to set the endpoint for the desired cloud.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armdatabasewatcher.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Creating Media Services Client
DESCRIPTION: Creates a new Media Services client instance from the client factory

LANGUAGE: go
CODE:
client := clientFactory.NewClient()

----------------------------------------

TITLE: Configuring Azure Client for Different Clouds in Go
DESCRIPTION: This snippet shows how to configure the Video Analyzers client to connect to different Azure clouds, such as Azure China. It uses ClientOptions to set the cloud endpoint.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
client, err := armvideoanalyzer.NewVideoAnalyzersClient(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Azure Authentication Example
DESCRIPTION: Code example showing how to authenticate with Azure using environment-based authentication.

LANGUAGE: go
CODE:
import "github.com/Azure/go-autorest/autorest/azure/auth"

// create a VirtualNetworks client
vnetClient := network.NewVirtualNetworksClient("<subscriptionID>")

// create an authorizer from env vars or Azure Managed Service Idenity
authorizer, err := auth.NewAuthorizerFromEnvironment()
if err == nil {
    vnetClient.Authorizer = authorizer
}

// call the VirtualNetworks CreateOrUpdate API
vnetClient.CreateOrUpdate(context.Background(),

----------------------------------------

TITLE: Creating Azure Maps Service Client
DESCRIPTION: Creates a new Azure Maps service client instance using the client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewClient()

----------------------------------------

TITLE: Authenticating with Azure using Default Azure Credential in Go
DESCRIPTION: This snippet demonstrates how to create a default Azure credential for authentication. It uses the azidentity package to handle various authentication methods.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Release History Changelog in Markdown
DESCRIPTION: Markdown formatted changelog detailing version releases 0.1.0 and 0.2.0, including support for test fakes, OpenTelemetry trace spans, and implementation of next generation design principles.

LANGUAGE: markdown
CODE:
# Release History

## 0.2.0 (2023-11-24)
### Features Added

- Support for test fakes and OpenTelemetry trace spans.


## 0.1.0 (2023-10-27)

The package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/recoveryservicesdatareplication/armrecoveryservicesdatareplication` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html).

To learn more, please refer to our documentation [Quick Start](https://aka.ms/azsdk/go/mgmt).

----------------------------------------

TITLE: Configuring AutoRest for Azure Monitor Ingestion Go Client
DESCRIPTION: AutoRest configuration file that specifies how to generate the Azure Monitor Ingestion Go client library. Includes settings for input swagger file, output location, security model, and various directive transformations for customizing the generated code.

LANGUAGE: yaml
CODE:
title: MonitorIngestionClient
description: Azure Monitor Ingestion Go Client
generated-metadata: false

clear-output-folder: false
go: true
input-file: https://github.com/Azure/azure-rest-api-specs/blob/f07297ce913bfc911470a86436e73c9aceec0587/specification/monitor/data-plane/ingestion/stable/2023-01-01/DataCollectionRules.json
license-header: MICROSOFT_MIT_NO_VERSION
module: github.com/Azure/azure-sdk-for-go/sdk/monitor/ingestion/azlogs
openapi-type: "data-plane"
output-folder: ../azlogs
override-client-name: Client
security: "AADToken"
use: "@autorest/go@4.0.0-preview.61"
inject-spans: true
version: "^3.0.0"
rawjson-as-bytes: true

directive:
  # delete unused model
  - remove-model: PendingCertificateSigningRequestResult

  # remove x-ms-client-request-id, it's added in a pipeline policy
  - where-operation: Upload
    remove-parameter:
      in: header
      name: x-ms-client-request-id

  # rename parameter from "body" to "logs", "stream" to "streamName"
  - from: swagger-document
    where: $.paths..parameters..[?(@.name=='body')]
    transform: $["x-ms-client-name"] = "logs"
  - from: swagger-document
    where: $.paths..parameters..[?(@.name=='stream')]
    transform: $["x-ms-client-name"] = "streamName"

  # delete client name prefix from method options and response types
  - from:
      - client.go
      - options.go
      - response_types.go
    where: $
    transform: return $.replace(/Client(\w+)((?:Options|Response))/g, "$1$2");

  # update doc comments
  - from: swagger-document
    where: $.paths..parameters..[?(@.name=='Content-Encoding')]
    transform: $["description"] = "If the bytes of the \"logs\" parameter are already gzipped, set ContentEncoding to \"gzip\""
  - from: swagger-document
    where: $.paths./dataCollectionRules/{ruleId}/streams/{stream}.post
    transform: $["description"] = "Ingestion API used to directly ingest data using Data Collection Rules. Maximum size of of API call is 1 MB."

----------------------------------------

TITLE: Installing Azure Monitor Query Logs Packages in Go
DESCRIPTION: This snippet demonstrates how to install the required packages for using Azure Monitor Query Logs in a Go project using the 'go get' command.

LANGUAGE: bash
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/monitor/query/azlogs
go get github.com/Azure/azure-sdk-for-go/sdk/azidentity

----------------------------------------

TITLE: Configuring Azure Databricks Client for China Cloud in Go
DESCRIPTION: This code shows how to configure the Azure Databricks client factory to connect to the Azure China cloud. It uses ClientOptions to set the cloud endpoint.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armdatabricks.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Creating Azure Education Client Factory in Go
DESCRIPTION: This snippet demonstrates how to create a client factory for Azure Education services. It requires a subscription ID and a credential object.

LANGUAGE: go
CODE:
clientFactory, err := armeducation.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Creating an Azure Authorization Client Factory in Go
DESCRIPTION: This code creates a client factory for Azure Authorization, which can be used to instantiate specific clients.

LANGUAGE: go
CODE:
clientFactory, err := armauthorization.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Creating Client Factory for Azure Service Fabric Mesh in Go
DESCRIPTION: Code snippet showing how to create a client factory for Azure Service Fabric Mesh, which can be used to create specific clients within the module.

LANGUAGE: Go
CODE:
clientFactory, err := armservicefabricmesh.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Authentication Setup with Azure Identity
DESCRIPTION: Creates a default Azure credential object for authentication with Azure Blockchain services.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Running Test Proxy for Recorded Tests
DESCRIPTION: This command starts the Azure SDK test proxy for running recorded tests.

LANGUAGE: bash
CODE:
cd <root of the azopenai module>
test-proxy

----------------------------------------

TITLE: Configuring Azure Sphere Client for Different Clouds in Go
DESCRIPTION: This snippet shows how to configure the Azure Sphere client factory for different Azure clouds, such as Azure China. It uses ClientOptions to set the cloud endpoint.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armsphere.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Creating Azure Largeinstance Client Factory in Go
DESCRIPTION: Initializes a client factory for Azure Largeinstance services using the subscription ID and credentials.

LANGUAGE: go
CODE:
clientFactory, err := armlargeinstance.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Creating Default Azure Credential in Go
DESCRIPTION: This code snippet shows how to create a default Azure credential using the azidentity package. This credential is used for authenticating with Azure Integrationspaces.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Configuring AutoRest for Azure IoT Security Go SDK Generation
DESCRIPTION: YAML configuration that specifies the source API specifications and settings for generating the Azure IoT Security Go SDK. References specific versions of Azure REST API specs and includes configuration for Azure ARM, licensing, and module versioning.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/f790e624d0d080b89d962a3bd19c65bc6a6b2f5e/specification/iotsecurity/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/f790e624d0d080b89d962a3bd19c65bc6a6b2f5e/specification/iotsecurity/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 0.7.0

----------------------------------------

TITLE: Adding New ConnectedPartnerResourcesClient Functions in Go
DESCRIPTION: New functions added for ConnectedPartnerResourcesClient including creation, listing, and factory methods.

LANGUAGE: Go
CODE:
NewConnectedPartnerResourcesClient(string, azcore.TokenCredential, *arm.ClientOptions) (*ConnectedPartnerResourcesClient, error)
*ConnectedPartnerResourcesClient.NewListPager(string, string, *ConnectedPartnerResourcesClientListOptions) *runtime.Pager[ConnectedPartnerResourcesClientListResponse]
*ClientFactory.NewConnectedPartnerResourcesClient() *ConnectedPartnerResourcesClient

----------------------------------------

TITLE: Basic X509 Certificate Generation and Formatting
DESCRIPTION: Creates a basic self-signed X509 certificate with a full subject name and exports it in multiple formats including Base64, PEM, and PKCS12.

LANGUAGE: powershell
CODE:
Import-Module -Name ./eng/common/scripts/X509Certificate2 # assumes $PWD is repo root

$cert1 = New-X509Certificate2 -SubjectName 'E=opensource@microsoft.com, CN=Azure SDK, OU=Azure SDK, O=Microsoft, L=Redmond, S=WA, C=US' -ValidDays 3652

$CaPublicKeyBase64 = $cert1 | Format-X509Certificate2 -Type CertificateBase64
$CaPrivateKeyPem = $cert1 | Format-X509Certificate2 -Type Pkcs1
$CaKeyPairPkcs12Base64 = $cert1 | Format-X509Certificate2 -Type Pkcs12Base64

----------------------------------------

TITLE: Authenticating with Azure using DefaultAzureCredential in Go
DESCRIPTION: This snippet demonstrates how to create a credential for authenticating with Azure Windows ESU using the DefaultAzureCredential from the azidentity module.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Creating Stream Analytics Client Factory
DESCRIPTION: Initializes a client factory for creating Stream Analytics service clients using subscription ID and credentials.

LANGUAGE: go
CODE:
clientFactory, err := armstreamanalytics.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Creating Azure Data Box Client Factory in Go
DESCRIPTION: This code creates a client factory for Azure Data Box services. It requires a subscription ID and a credential object for authentication.

LANGUAGE: go
CODE:
clientFactory, err := armdatabox.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Configuring AutoRest for Azure Network SDK Generation
DESCRIPTION: This YAML configuration sets up AutoRest for generating the Azure Network SDK. It specifies Azure ARM requirements, module version, name, and output folder. The configuration also sets the profile tag for hybrid cloud environments.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/53b1affe357b3bfbb53721d0a2002382a046d3b0/specification/network/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/53b1affe357b3bfbb53721d0a2002382a046d3b0/specification/network/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 0.1.0
module-name: profile/p20200901/resourcemanager/network/armnetwork
module: github.com/Azure/azure-sdk-for-go/$(module-name)
output-folder: $(go-sdk-folder)/$(module-name)
tag: profile-hybrid-2020-09-01

----------------------------------------

TITLE: Configuring Client Factory with Custom Options
DESCRIPTION: Creates a client factory with custom options for connecting to different Azure clouds

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armhybridcontainerservice.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Authenticating with Azure using Default Credentials
DESCRIPTION: Creates a default Azure credential object for authentication with Azure services

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Creating Azure Key Vault Service Client
DESCRIPTION: Creates a specific service client instance for interacting with Azure Key Vault vaults using the client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewVaultsClient()

----------------------------------------

TITLE: Authenticating with Azure Newrelic using Default Azure Credential
DESCRIPTION: This snippet demonstrates how to create a default Azure credential for authenticating with Azure Newrelic. It uses the azidentity module to provide various authentication methods.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Configuring AutoRest for Azure Synapse Go SDK Generation
DESCRIPTION: YAML configuration for AutoRest that defines the parameters for generating the Azure Synapse SDK for Go. It specifies Azure ARM mode, points to required API specifications, sets the license header type, and defines the module version.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/630ec444f8dd7c09b9cdd5fa99951f8a0d1ad41f/specification/synapse/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/630ec444f8dd7c09b9cdd5fa99951f8a0d1ad41f/specification/synapse/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 0.8.0

----------------------------------------

TITLE: Creating Event Grid Service Client
DESCRIPTION: Creates a specific Event Grid service client using the client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewCaCertificatesClient()

----------------------------------------

TITLE: Creating Azure Data Lake Analytics Client Factory in Go
DESCRIPTION: This code creates a client factory for Azure Data Lake Analytics. It requires a subscription ID and credential. The factory can be used to create specific clients within the module.

LANGUAGE: go
CODE:
clientFactory, err := armdatalakeanalytics.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Configuring Azure App Service Client for Different Clouds in Go
DESCRIPTION: Demonstrates how to configure the client factory to connect to different Azure clouds, including sovereign clouds and Azure Stack.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armappservice.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Creating Azure Database for MySQL Client Factory in Go
DESCRIPTION: This snippet demonstrates how to create a client factory for Azure Database for MySQL, which can be used to create various clients for interacting with the service.

LANGUAGE: go
CODE:
clientFactory, err := armmysqlflexibleservers.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Renaming ProvisionedBandwidthMiBps Response Field
DESCRIPTION: YAML directive to rename the ProvisionedBandwidthMiBps response field in the share properties.

LANGUAGE: yaml
CODE:
directive:
- from: swagger-document
  where: $["x-ms-paths"]["/{shareName}?restype=share"]
  transform: >
    $.get.responses["200"].headers["x-ms-share-provisioned-bandwidth-mibps"]["x-ms-client-name"] = "ProvisionedBandwidthMiBps"

----------------------------------------

TITLE: Converting Path eTag to etag
DESCRIPTION: YAML directive to rename the 'eTag' property to 'etag' in the Path definition and set the client name to 'eTag'.

LANGUAGE: yaml
CODE:
directive:
- from: swagger-document
  where: $.definitions.Path
  transform: >
    $.properties.etag = $.properties.eTag;
    delete $.properties.eTag;
    $.properties.etag["x-ms-client-name"] = "eTag";

----------------------------------------

TITLE: Creating Azure Consumption Client Factory in Go
DESCRIPTION: This code creates a client factory for Azure Consumption. It requires a subscription ID and credential. The factory can be used to create specific clients for different Consumption APIs.

LANGUAGE: go
CODE:
clientFactory, err := armconsumption.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Authenticating with Azure using DefaultAzureCredential in Go
DESCRIPTION: This code demonstrates how to create a default Azure credential for authentication. It uses the azidentity package to create a new DefaultAzureCredential, which can be used for authenticating with Azure services.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK Go Generation
DESCRIPTION: YAML configuration for AutoRest to generate Azure SDK for Go. It specifies Azure ARM mode, required API specifications, license header, and module version for the Marketplace Ordering resource manager.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/marketplaceordering/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/marketplaceordering/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.2.0

----------------------------------------

TITLE: Creating DNS Client Instance
DESCRIPTION: Creates a specific DNS client instance from the client factory for accessing DNS APIs

LANGUAGE: go
CODE:
client := clientFactory.NewDnssecConfigsClient()

----------------------------------------

TITLE: Importing Latest Stable Container Service Module in Go
DESCRIPTION: Example of importing the latest stable version of the Container Service module in the new Azure SDK for Go structure. This demonstrates the change from using the profiles/latest path to the new module-based import.

LANGUAGE: go
CODE:
"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/containerservice/armcontainerservice@v2.4.0"

----------------------------------------

TITLE: Creating Azure Workloads Client Factory
DESCRIPTION: Initializes a client factory for Azure Workloads with subscription ID and credentials.

LANGUAGE: go
CODE:
clientFactory, err := armworkloads.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Installing Azure Communication Services SDK
DESCRIPTION: Command to install the Azure Communication Services module using Go modules for dependency management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/communication/armcommunication/v2

----------------------------------------

TITLE: Configuring AutoRest for Azure Voice Services SDK Generation
DESCRIPTION: YAML configuration for AutoRest code generator that specifies Azure ARM mode, required API specifications from Azure REST API specs repository, Microsoft MIT license header requirement, and module version 1.1.0.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/aa85f59e259c4b12197b57b221067c40fa2fe3f1/specification/voiceservices/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/aa85f59e259c4b12197b57b221067c40fa2fe3f1/specification/voiceservices/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.1.0

----------------------------------------

TITLE: Configuring Azure Consumption Client for Different Clouds in Go
DESCRIPTION: This snippet shows how to configure the client factory for different Azure clouds or Azure Stack. It uses ClientOptions to set the endpoint for specific cloud environments.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armconsumption.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Authenticating with Azure using Default Credentials in Go
DESCRIPTION: Creates a default Azure credential object for authentication with Azure services.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Creating API Definitions Client
DESCRIPTION: Creates a specific client instance for working with API definitions using the client factory

LANGUAGE: go
CODE:
client := clientFactory.NewAPIDefinitionsClient()

----------------------------------------

TITLE: Initializing Azure Credentials
DESCRIPTION: Creates default Azure credentials for authentication with Azure Compute Schedule services using azidentity module.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Creating Client Factory
DESCRIPTION: Initializing the client factory for Azure Workloadssapvirtualinstance services using subscription ID and credentials

LANGUAGE: go
CODE:
clientFactory, err := armworkloadssapvirtualinstance.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Defining LanguageRuntime Enum in Go
DESCRIPTION: Defines a new enum type LanguageRuntime with values for C++ and JavaScript runtimes.

LANGUAGE: Go
CODE:
type LanguageRuntime string

const (
    LanguageRuntimeCPP LanguageRuntime = "CPP"
    LanguageRuntimeJS LanguageRuntime = "JS"
)

----------------------------------------

TITLE: Removing 'Item' Suffix in Go Source Files
DESCRIPTION: YAML directive to remove the 'Item' suffix from 'QueueItems' in Go source files.

LANGUAGE: yaml
CODE:
directive:
  - from: source-file-go
    where: $
    transform: >
      return $.
        replace(/QueueItems/g, "Queues");

----------------------------------------

TITLE: Creating Azure Deviceregistry Asset Endpoint Profiles Client in Go
DESCRIPTION: This code demonstrates how to create a specific client (AssetEndpointProfilesClient) using the previously created client factory. This client provides access to Asset Endpoint Profiles-related APIs.

LANGUAGE: go
CODE:
client := clientFactory.NewAssetEndpointProfilesClient()

----------------------------------------

TITLE: Creating Azure Storage Account using Azure CLI
DESCRIPTION: Command to create a new Azure Storage Account using the Azure CLI with specified parameters

LANGUAGE: bash
CODE:
az storage account create --name MyStorageAccount --resource-group MyResourceGroup --location westus --sku Standard_LRS

----------------------------------------

TITLE: Creating an Azure SQL Database Client Factory in Go
DESCRIPTION: This snippet shows how to create a client factory for Azure SQL Database, which can be used to create various clients in the module.

LANGUAGE: go
CODE:
clientFactory, err := armsql.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Creating Azure Health Bot Client Factory
DESCRIPTION: Initializes a client factory for creating Health Bot service clients using subscription ID and credentials.

LANGUAGE: go
CODE:
clientFactory, err := armhealthbot.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Configuring Azure Client Options for Different Clouds in Go
DESCRIPTION: This snippet shows how to configure client options to connect to different Azure clouds, such as Azure China. It uses the arm.ClientOptions struct to set the cloud option.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armaddons.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Configuring Client Factory with Custom Options
DESCRIPTION: Creates a client factory with custom options for connecting to different Azure clouds.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armneonpostgres.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Connecting to Azure and Creating Test Resources
DESCRIPTION: PowerShell commands to connect to Azure and create test resources using New-TestResources.ps1 script for Key Vault testing.

LANGUAGE: powershell
CODE:
Connect-AzAccount -Subscription 'YOUR SUBSCRIPTION ID'
eng\common\TestResources\New-TestResources.ps1 keyvault

----------------------------------------

TITLE: Creating Default Azure Credential in Go
DESCRIPTION: Code snippet demonstrating how to create a default Azure credential for authentication.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Renaming KeyValueFields to SettingFields in Swagger
DESCRIPTION: YAML directive to rename the 'KeyValueFields' enum to 'SettingFields' in the swagger document. This transformation affects the x-ms-enum name property.

LANGUAGE: yaml
CODE:
directive:
- from: swagger-document
  where: '$.parameters.KeyValueFields.items.x-ms-enum'
  transform: >
    $["name"] = "SettingFields";

----------------------------------------

TITLE: Configuring Azure Data Box Client for Different Clouds in Go
DESCRIPTION: This snippet shows how to configure the Azure Data Box client to connect to different Azure clouds, such as Azure China. It uses ClientOptions to set the cloud endpoint.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armdatabox.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Configuring Azure Batch Client for Sovereign Clouds
DESCRIPTION: Creates a client factory with custom options for connecting to sovereign clouds or Azure Stack

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armbatch.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Authenticating with Azure using DefaultAzureCredential in Go
DESCRIPTION: Creates a default Azure credential for authentication with Azure services.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK Go Generation
DESCRIPTION: This YAML configuration sets up AutoRest for generating Azure SDK for Go code. It specifies Azure ARM support, required specification files, license header, module version, and package tag.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/56537883b7cdb95618c3d1ec1c0ee37b59d88d72/specification/informatica/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/56537883b7cdb95618c3d1ec1c0ee37b59d88d72/specification/informatica/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.0.0
tag: package-2024-05-08

----------------------------------------

TITLE: Authenticating with Azure Credentials
DESCRIPTION: Creates default Azure credentials for authentication with Azure Storage Sync services.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Setting Environment Variables for Azure Resources
DESCRIPTION: PowerShell commands to persist Azure resource environment variables using setx for future sessions.

LANGUAGE: powershell
CODE:
setx KEYVAULT_TENANT_ID ${env:KEYVAULT_TENANT_ID}
setx KEYVAULT_CLIENT_ID ${env:KEYVAULT_CLIENT_ID}
setx KEYVAULT_CLIENT_SECRET ${env:KEYVAULT_CLIENT_SECRET}
setx KEYVAULT_SUBSCRIPTION_ID ${env:KEYVAULT_SUBSCRIPTION_ID}
setx KEYVAULT_RESOURCE_GROUP ${env:KEYVAULT_RESOURCE_GROUP}
setx KEYVAULT_LOCATION ${env:KEYVAULT_LOCATION}
setx KEYVAULT_SKU ${env:KEYVAULT_SKU}
setx AZURE_KEYVAULT_URL ${env:AZURE_KEYVAULT_URL}

----------------------------------------

TITLE: Version and Import Declaration
DESCRIPTION: Package version and import declaration for the Azure Workloads SDK

LANGUAGE: go
CODE:
github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/workloads/armworkloads

----------------------------------------

TITLE: Creating Azure VMware Addons Client
DESCRIPTION: Creates a new client instance for accessing Azure VMware Solution addons functionality.

LANGUAGE: go
CODE:
client := clientFactory.NewAddonsClient()

----------------------------------------

TITLE: Test Resources JSON Template Parameters
DESCRIPTION: JSON template defining parameters for Azure resource creation, including certificate configuration.

LANGUAGE: json
CODE:
{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "_comment": "Other required parameters would go here... (this is not part of the actual test-resources.json)",
    "ConfidentialLedgerPrincipalPEM": {
      "type": "string",
      "metadata": {
        "description": "The certificate to configure as a certBasedSecurityPrincipal."
      }
    },
    "ConfidentialLedgerPrincipalPEMPK": {
      "type": "string",
      "metadata": {
        "description": "The certificate to configure as a certBasedSecurityPrincipal."
      }
    }
  }
}

----------------------------------------

TITLE: Configuring Client Options for Different Clouds
DESCRIPTION: Sets up client options for connecting to different Azure clouds including sovereign clouds and Azure Stack.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armazurestackhci.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Configuring Client Options for Different Clouds
DESCRIPTION: Sets up client options for connecting to different Azure clouds including sovereign clouds and Azure Stack.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armstoragecache.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Creating Azure Advisor Suppressions Client in Go
DESCRIPTION: Instantiates a specific client (Suppressions) from the Azure Advisor client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewSuppressionsClient()

----------------------------------------

TITLE: Creating Default Azure Credential in Go
DESCRIPTION: Code snippet to create a default Azure credential using the azidentity package. This credential is used for authenticating with Azure services.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Configuring Azure Portal Client for Different Clouds
DESCRIPTION: Creates a client factory with custom options for connecting to different Azure cloud environments

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armportal.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Creating Azure Default Credential in Go
DESCRIPTION: This code demonstrates how to create a default Azure credential using the azidentity package. It initializes a new DefaultAzureCredential object which can be used for authenticating with Azure services.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Creating a Specific Azure Dedicated HSM Client
DESCRIPTION: This code demonstrates how to create a specific client (CloudHsmClusterBackupStatusClient) using the client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewCloudHsmClusterBackupStatusClient()

----------------------------------------

TITLE: Creating HDInsight Containers Client Factory
DESCRIPTION: Initializes a client factory for creating HDInsight Containers service clients using subscription ID and credentials.

LANGUAGE: go
CODE:
clientFactory, err := armhdinsightcontainers.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: PowerShell Merge Conflict Resolution Script Usage
DESCRIPTION: Example command sequence showing how to use the script to resolve merge conflicts in assets.json from the repository root

LANGUAGE: powershell
CODE:
# including context to get into a merge conflict
cd "path/to/language/repo/root"
git checkout base-branch
git merge target-branch
# auto resolve / merge conflicting tag values
./eng/common/testproxy/scripts/resolve-asset-conflict/resolve-asset-conflict.ps1 sdk/storage/azure-storage-blob/assets.json
# user pushes
test-proxy push -a sdk/storage/azure-storage-blob/assets.json

----------------------------------------

TITLE: Documenting Release History in Markdown
DESCRIPTION: This snippet shows the structure of documenting release history using Markdown. It includes version numbers, dates, and categorized changes such as features added, breaking changes, and bug fixes.

LANGUAGE: markdown
CODE:
# Release History

## 2.1.0 (2023-11-24)
### Features Added

- Support for test fakes and OpenTelemetry trace spans.


## 2.0.0 (2023-05-26)
### Breaking Changes

- Field `AccountName` of struct `DiskGranularCopyLogDetails` has been removed

### Features Added

- New enum type `HardwareEncryption` with values `HardwareEncryptionDisabled`, `HardwareEncryptionEnabled`
- New enum type `ReverseShippingDetailsEditStatus` with values `ReverseShippingDetailsEditStatusDisabled`, `ReverseShippingDetailsEditStatusEnabled`, `ReverseShippingDetailsEditStatusNotSupported`
- New enum type `ReverseTransportPreferenceEditStatus` with values `ReverseTransportPreferenceEditStatusDisabled`, `ReverseTransportPreferenceEditStatusEnabled`, `ReverseTransportPreferenceEditStatusNotSupported`
- New struct `ContactInfo`
- New struct `ReverseShippingDetails`
- New field `ReverseShippingDetails` in struct `CommonJobDetails`
- New field `Actions`, `Error` in struct `CopyProgress`
- New field `Actions`, `Error` in struct `CustomerDiskCopyProgress`
- New field `ReverseShippingDetails` in struct `CustomerDiskJobDetails`
- New field `Actions`, `Error` in struct `DiskCopyProgress`
- New field `AccountID` in struct `DiskGranularCopyLogDetails`
- New field `Actions`, `Error` in struct `DiskGranularCopyProgress`
- New field `GranularCopyLogDetails`, `ReverseShippingDetails` in struct `DiskJobDetails`
- New field `HardwareEncryption` in struct `EncryptionPreferences`
- New field `Actions`, `Error` in struct `GranularCopyProgress`
- New field `ReverseShippingDetails` in struct `HeavyJobDetails`
- New field `ReverseShippingDetails` in struct `JobDetails`
- New field `ReverseShippingDetailsUpdate`, `ReverseTransportPreferenceUpdate` in struct `JobProperties`
- New field `SerialNumberCustomerResolutionMap` in struct `MitigateJobRequest`
- New field `ReverseTransportPreferences` in struct `Preferences`
- New field `CountriesWithinCommerceBoundary` in struct `SKUProperties`
- New field `SkipAddressValidation`, `TaxIdentificationNumber` in struct `ShippingAddress`
- New field `IsUpdated` in struct `TransportPreferences`
- New field `Preferences`, `ReverseShippingDetails` in struct `UpdateJobDetails`


## 1.1.1 (2023-04-14)
### Bug Fixes

- Fix serialization bug of empty value of `any` type.


## 1.1.0 (2023-03-28)
### Features Added

- New struct `ClientFactory` which is a client factory used to create any client in this module


## 1.0.0 (2022-05-18)

The package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/databox/armdatabox` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html) since version 1.0.0, which contains breaking changes.

To migrate the existing applications to the latest version, please refer to [Migration Guide](https://aka.ms/azsdk/go/mgmt/migration).

To learn more, please refer to our documentation [Quick Start](https://aka.ms/azsdk/go/mgmt).

----------------------------------------

TITLE: Using azcore.ETag for ETag Fields
DESCRIPTION: YAML directive to replace string ETag fields with azcore.ETag in various files.

LANGUAGE: yaml
CODE:
directive:
- from: 
    - zz_options.go
    - zz_models.go       
  where: $
  transform: >
    return $.
      replace(/import "time"/, `import (\n\t"time"\n\t"github.com/Azure/azure-sdk-for-go/sdk/azcore"\n)`).
      replace(/Etag\s+\*string/g, `ETag *azcore.ETag`).
      replace(/IfMatch\s+\*string/g, `IfMatch *azcore.ETag`).
      replace(/IfNoneMatch\s+\*string/g, `IfNoneMatch *azcore.ETag`).
      replace(/SourceIfMatch\s+\*string/g, `SourceIfMatch *azcore.ETag`).
      replace(/SourceIfNoneMatch\s+\*string/g, `SourceIfNoneMatch *azcore.ETag`);

- from: zz_responses.go
  where: $
  transform: >
    return $.
      replace(/"time"/, `"time"\n\t"github.com/Azure/azure-sdk-for-go/sdk/azcore"`).
      replace(/ETag\s+\*string/g, `ETag *azcore.ETag`);

- from:
  - zz_filesystem_client.go
  - zz_path_client.go
  where: $
  transform: >
    return $.
      replace(/"github\.com\/Azure\/azure\-sdk\-for\-go\/sdk\/azcore\/policy"/, `"github.com/Azure/azure-sdk-for-go/sdk/azcore"\n\t"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"`).
      replace(/result\.ETag\s+=\s+&val/g, `result.ETag = (*azcore.ETag)(&val)`).
      replace(/\*modifiedAccessConditions.IfMatch/g, `string(*modifiedAccessConditions.IfMatch)`).
      replace(/\*modifiedAccessConditions.IfNoneMatch/g, `string(*modifiedAccessConditions.IfNoneMatch)`).
      replace(/\*sourceModifiedAccessConditions.SourceIfMatch/g, `string(*sourceModifiedAccessConditions.SourceIfMatch)`).
      replace(/\*sourceModifiedAccessConditions.SourceIfNoneMatch/g, `string(*sourceModifiedAccessConditions.SourceIfNoneMatch)`);

----------------------------------------

TITLE: Creating Azure Edge Order Client Factory in Go
DESCRIPTION: This code creates a client factory for Azure Edge Order services. It requires a subscription ID and a credential object. The factory can be used to create specific clients for different Edge Order operations.

LANGUAGE: go
CODE:
clientFactory, err := armedgeorder.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Configuring Azure VoiceServices Client Options
DESCRIPTION: Sets up client options for connecting to different Azure clouds including sovereign clouds and Azure Stack.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armvoiceservices.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Creating an API Portal Custom Domains Client
DESCRIPTION: Creates a specific client instance for managing API portal custom domains using the client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewAPIPortalCustomDomainsClient()

----------------------------------------

TITLE: Configuring AutoRest for Azure Digital Twins SDK Generation in Go
DESCRIPTION: This YAML configuration specifies the settings for AutoRest to generate the Azure Digital Twins client library for Go. It includes references to the API specifications, sets the Azure ARM flag, specifies the license header, and defines the module version.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/a60468a0c5e2beb054680ae488fb9f92699f0a0d/specification/digitaltwins/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/a60468a0c5e2beb054680ae488fb9f92699f0a0d/specification/digitaltwins/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.2.0

----------------------------------------

TITLE: Configuring Azure Security Client for Sovereign Clouds in Go
DESCRIPTION: This snippet shows how to configure the client factory to connect to sovereign clouds or Azure Stack. It uses ClientOptions to set the cloud endpoint.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armsecurity.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Configuring Azure Client for Sovereign Clouds
DESCRIPTION: Sets up a client factory with custom options for connecting to specific Azure clouds like Azure China

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armsubscription.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Creating Azure Visual Studio Client Factory in Go
DESCRIPTION: This snippet demonstrates how to create a client factory for Azure Visual Studio services. It uses the NewClientFactory function from the armvisualstudio package, passing in the subscription ID and credentials to create a factory that can be used to instantiate various client types.

LANGUAGE: go
CODE:
clientFactory, err := armvisualstudio.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Installing Azure Management Groups Module
DESCRIPTION: Command to install the Azure Management Groups Go module using go get

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/managementgroups/armmanagementgroups

----------------------------------------

TITLE: Installing Azure KeyVault Admin Packages
DESCRIPTION: Commands to install the required Azure KeyVault Administration and Azure Identity packages using go get.

LANGUAGE: bash
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/security/keyvault/azadmin
go get github.com/Azure/azure-sdk-for-go/sdk/azidentity

----------------------------------------

TITLE: Authenticating with Azure using Default Azure Credential in Go
DESCRIPTION: This code snippet demonstrates how to create a default Azure credential for authentication with Azure services.

LANGUAGE: Go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: New Client Factory Functions
DESCRIPTION: Introduction of new client factory functions for AlertRuleRecommendations, PrometheusRuleGroups, and TenantActivityLogAlerts in version 0.10.0

LANGUAGE: go
CODE:
func NewAlertRuleRecommendationsClient(string, azcore.TokenCredential, *arm.ClientOptions) (*AlertRuleRecommendationsClient, error)
func NewPrometheusRuleGroupsClient(string, azcore.TokenCredential, *arm.ClientOptions) (*PrometheusRuleGroupsClient, error)
func NewTenantActivityLogAlertsClient(azcore.TokenCredential, *arm.ClientOptions) (*TenantActivityLogAlertsClient, error)

----------------------------------------

TITLE: Adding New Enum Values in Go
DESCRIPTION: Adds new values to existing enum types like PublicNetworkAccess and Status. This expands the possible options for certain API parameters.

LANGUAGE: Go
CODE:
New value `PublicNetworkAccessSecuredByPerimeter` added to enum type `PublicNetworkAccess`
New value `StatusCanceled`, `StatusFailed`, `StatusSucceeded`, `StatusUpdating` added to enum type `Status`

----------------------------------------

TITLE: Configuring Client Options for Different Clouds
DESCRIPTION: Sets up client options for connecting to different Azure clouds including sovereign clouds and Azure Stack.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armstoragesync.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Creating an Account Quotas Client for Azure Playwrighttesting in Go
DESCRIPTION: This snippet shows how to create a specific client (AccountQuotasClient) using the client factory for Azure Playwrighttesting.

LANGUAGE: go
CODE:
client := clientFactory.NewAccountQuotasClient()

----------------------------------------

TITLE: Creating Default Azure Credential in Go
DESCRIPTION: Code snippet to create a default Azure credential for authentication using the azidentity package.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Creating Service Client
DESCRIPTION: Creating a specific service client instance from the client factory to access API functionality

LANGUAGE: go
CODE:
client := clientFactory.NewSAPApplicationServerInstancesClient()

----------------------------------------

TITLE: Defining Module Version Constant in Go
DESCRIPTION: Demonstrates how to define the required moduleVersion constant in a Go file. This constant is used by the release pipeline and must be present in a file named version.go or constants.go.

LANGUAGE: Go
CODE:
const moduleVersion = "v1.2.3"

LANGUAGE: Go
CODE:
const (
	moduleVersion = "v1.2.3"
	// other constants
)

----------------------------------------

TITLE: Listing Application Groups by Namespace in Go
DESCRIPTION: This code snippet demonstrates how to list Application Groups by Namespace using the ApplicationGroupClient in the Azure SDK for Go.

LANGUAGE: go
CODE:
*ApplicationGroupClient.NewListByNamespacePager(string, string, *ApplicationGroupClientListByNamespaceOptions) *runtime.Pager[ApplicationGroupClientListByNamespaceResponse]

----------------------------------------

TITLE: Documenting Release History in Markdown
DESCRIPTION: This snippet shows the structure of documenting release history using Markdown. It includes version numbers, dates, and categorized changes for each release.

LANGUAGE: markdown
CODE:
# Release History

## 1.2.0 (2023-11-24)
### Features Added

- Support for test fakes and OpenTelemetry trace spans.


## 1.1.0 (2023-03-27)
### Features Added

- New struct `ClientFactory` which is a client factory used to create any client in this module


## 1.0.0 (2022-05-17)

The package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/advisor/armadvisor` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html) since version 1.0.0, which contains breaking changes.

To migrate the existing applications to the latest version, please refer to [Migration Guide](https://aka.ms/azsdk/go/mgmt/migration).

To learn more, please refer to our documentation [Quick Start](https://aka.ms/azsdk/go/mgmt).

----------------------------------------

TITLE: Modifying ServiceClient ListFileSystems Methods
DESCRIPTION: YAML directive to remove pager methods and export various generated methods for ListFileSystems in the service client.

LANGUAGE: yaml
CODE:
directive:
  - from: zz_service_client.go
    where: $
    transform: >
      return $.
        replace(/func \(client \*ServiceClient\) NewListFileSystemsPager\(.+\/\/ listFileSystemsCreateRequest creates the ListFileSystems request/s, `//\n// ListFileSystemsCreateRequest creates the ListFileSystems request`).
        replace(/\(client \*ServiceClient\) listFileSystemsCreateRequest\(/, `(client *ServiceClient) ListFileSystemsCreateRequest(`).
        replace(/\(client \*ServiceClient\) listFileSystemsHandleResponse\(/, `(client *ServiceClient) ListFileSystemsHandleResponse(`);

----------------------------------------

TITLE: Upgrading SDK Major Version
DESCRIPTION: Commands for upgrading to the latest major version of the Azure SDK using gomajor tool.

LANGUAGE: sh
CODE:
go install github.com/icholy/gomajor@latest
gomajor get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute@latest

----------------------------------------

TITLE: Creating Azure Elastic Traffic Filters Client
DESCRIPTION: Creates a specific client instance for managing traffic filters using the client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewAllTrafficFiltersClient()

----------------------------------------

TITLE: Update Specific Resource Group Example
DESCRIPTION: Example showing how to update a specific resource group by name and subscription ID.

LANGUAGE: powershell
CODE:
Update-TestResources.ps1 -ResourceGroupName rg-userkeyvault -Subscription fa9c6912-f641-4226-806c-5139584b89ca

----------------------------------------

TITLE: Displaying Release Notes in Markdown
DESCRIPTION: Markdown formatted release history showing version changes and feature additions for the Azure SDK for Go education package. Documents changes from version 0.1.0 to 0.4.0 including the introduction of test fakes, OpenTelemetry support, ClientFactory, and new constants.

LANGUAGE: markdown
CODE:
# Release History

## 0.4.0 (2023-11-24)
### Features Added

- Support for test fakes and OpenTelemetry trace spans.


## 0.3.0 (2023-03-28)
### Features Added

- New struct `ClientFactory` which is a client factory used to create any client in this module


## 0.2.0 (2022-07-04)
### Features Added

- New const `LabStatusPending`


## 0.1.0 (2022-05-24)

The package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/education/armeducation` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html) since version 0.1.0, which contains breaking changes.

To migrate the existing applications to the latest version, please refer to [Migration Guide](https://aka.ms/azsdk/go/mgmt/migration).

To learn more, please refer to our documentation [Quick Start](https://aka.ms/azsdk/go/mgmt).

----------------------------------------

TITLE: Running SDK Generator in Bash
DESCRIPTION: Bash command for running the SDK generator tool. It takes the input JSON file and produces an output JSON file with generation results.

LANGUAGE: sh
CODE:
generator automation-v2 "PATH_TO_generatedInput.json" generateOutput.json

----------------------------------------

TITLE: Creating Azure Data Catalog Client Factory in Go
DESCRIPTION: This code creates a client factory for Azure Data Catalog. It requires a subscription ID and credentials. The factory can be used to create various clients within the module.

LANGUAGE: go
CODE:
clientFactory, err := armdatacatalog.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Configuring Azure Client Options
DESCRIPTION: Demonstrates how to configure client options for different Azure clouds including sovereign clouds and Azure Stack

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armastro.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Creating a Specific Azure App Service Client in Go
DESCRIPTION: Shows how to create a specific client (in this case, CertificateOrdersClient) using the previously created client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewCertificateOrdersClient()

----------------------------------------

TITLE: Go SDK DNS Record Type Enums
DESCRIPTION: New enum values added to RecordType including RecordTypeDS, RecordTypeNAPTR, and RecordTypeTLSA for DNS record management.

LANGUAGE: go
CODE:
type RecordType string

const (
    RecordTypeDS RecordType = "DS"
    RecordTypeNAPTR RecordType = "NAPTR"
    RecordTypeTLSA RecordType = "TLSA"
)

----------------------------------------

TITLE: Configuring Client Options for Different Clouds
DESCRIPTION: Sets up client options for connecting to different Azure clouds including sovereign clouds and Azure Stack.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
client, err := armcosmosforpostgresql.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: New Enum Type: AddonAutoscaling
DESCRIPTION: Introduces a new enum type 'AddonAutoscaling' with two values.

LANGUAGE: Go
CODE:
New enum type `AddonAutoscaling` with values `AddonAutoscalingDisabled`, `AddonAutoscalingEnabled`

----------------------------------------

TITLE: Installing Azure Automation Module in Go
DESCRIPTION: This command installs the Azure Automation module using Go's package manager. It retrieves the module from the specified GitHub repository.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/automation/armautomation

----------------------------------------

TITLE: Creating Event Data Batch with Partition Key in Go
DESCRIPTION: Example of creating an EventDataBatch with a specified PartitionKey using the ProducerClient in the Azure Event Hubs Go SDK.

LANGUAGE: Go
CODE:
batch, err := producerClient.NewEventDataBatch(context.TODO(), &azeventhubs.NewEventDataBatchOptions{
  PartitionKey: to.Ptr("partition key"),
})

----------------------------------------

TITLE: Creating or Updating AccessConnector in Go
DESCRIPTION: Initiates an asynchronous operation to create or update an AccessConnector resource. Returns a Poller for tracking the operation progress.

LANGUAGE: go
CODE:
*AccessConnectorsClient.BeginCreateOrUpdate(context.Context, string, string, AccessConnector, *AccessConnectorsClientBeginCreateOrUpdateOptions) (*runtime.Poller[AccessConnectorsClientCreateOrUpdateResponse], error)

----------------------------------------

TITLE: Creating Client Factory
DESCRIPTION: Initializes a client factory for creating Azure Compute Schedule service clients with basic configuration.

LANGUAGE: go
CODE:
clientFactory, err := armcomputeschedule.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Release History Documentation in Markdown
DESCRIPTION: Chronological changelog documenting version releases from 2.0.0-beta.4 down to 1.0.0. Details features added, bug fixes, and major version changes including migration information.

LANGUAGE: markdown
CODE:
# Release History

## 2.0.0-beta.4 (2024-06-14)
### Features Added

- Support for test fakes and OpenTelemetry trace spans.


## 1.2.0 (2023-11-24)
### Features Added

- Support for test fakes and OpenTelemetry trace spans.


## 1.1.1 (2023-04-14)
### Bug Fixes

- Fix serialization bug of empty value of `any` type.


## 1.1.0 (2023-04-07)
### Features Added

- New struct `ClientFactory` which is a client factory used to create any client in this module


## 1.0.0 (2022-05-17)

The package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/securityinsights/armsecurityinsights` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html) since version 1.0.0, which contains breaking changes.

To migrate the existing applications to the latest version, please refer to [Migration Guide](https://aka.ms/azsdk/go/mgmt/migration).

To learn more, please refer to our documentation [Quick Start](https://aka.ms/azsdk/go/mgmt).

----------------------------------------

TITLE: Handling SDK Request Errors in Azure Go SDK
DESCRIPTION: Shows how to handle errors from SDK requests by converting them to the azcore.ResponseError interface, which allows access to the raw HTTP response for more detailed error information.

LANGUAGE: go
CODE:
ctx := context.TODO() // your context
resp, err := resourceGroupsClient.CreateOrUpdate(ctx, resourceGroupName, resourceGroupParameters, nil)
if err != nil {
    var respErr *azcore.ResponseError
    if errors.As(err, &respErr) {
        log.Fatalf("Status code: %d", respErr.RawResponse.StatusCode)
    } else {
        log.Fatalf("Other error: %+v", err)
    }
}
// dealing with `resp`

----------------------------------------

TITLE: Creating Azure RedHat Open Shift Machine Pools Client in Go
DESCRIPTION: Initialize a specific client for managing machine pools using the client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewMachinePoolsClient()

----------------------------------------

TITLE: Installing Azure Graphservices Module in Go
DESCRIPTION: Command to install the Azure Graphservices module using Go's package manager.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/graphservices/armgraphservices

----------------------------------------

TITLE: Creating Lab Services Client Factory
DESCRIPTION: Initializes a client factory for Azure Lab Services with subscription ID and credentials.

LANGUAGE: go
CODE:
clientFactory, err := armlabservices.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Creating Azure Default Credential in Go
DESCRIPTION: This snippet demonstrates how to create a default Azure credential using the azidentity package. This credential is used for authenticating with Azure Attestation.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Installing Azure Windows ESU Module in Go
DESCRIPTION: This command installs the Azure Windows ESU module using Go's package manager. It requires Go modules for versioning and dependency management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/windowsesu/armwindowsesu

----------------------------------------

TITLE: Creating Azure Database for PostgreSQL Servers Client in Go
DESCRIPTION: Instantiates a new Servers client using the previously created client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewServersClient()

----------------------------------------

TITLE: Pre-Resource Creation Certificate Generation
DESCRIPTION: PowerShell script for generating X509 certificates before creating Azure resources. Used in test-resources-pre.ps1.

LANGUAGE: powershell
CODE:
Import-Module -Name ./eng/common/scripts/X509Certificate2
$cert = New-X509Certificate2 -SubjectName 'E=opensource@microsoft.com, CN=Azure SDK, OU=Azure SDK, O=Microsoft, L=Frisco, S=TX, C=US' -ValidDays 3652
# Create new entries in $templateFileParameters
$templateFileParameters['ConfidentialLedgerPrincipalPEM'] = Format-X509Certificate2 -Certificate $cert
$templateFileParameters['ConfidentialLedgerPrincipalPEMPK'] = Format-X509Certificate2 -Type Pkcs8 -Certificate $cert

----------------------------------------

TITLE: Removing Test Resources with Provisioner in PowerShell
DESCRIPTION: This snippet demonstrates using the Remove-TestResources.ps1 script with a provisioner application. It requires a base name, tenant ID, and provisioner application ID, along with other optional parameters for removing test resources from Azure.

LANGUAGE: powershell
CODE:
Remove-TestResources.ps1 -BaseName <String> -TenantId <String> [-SubscriptionId <String>]
 -ProvisionerApplicationId <String> [-ProvisionerApplicationSecret <String>] [[-ServiceDirectory] <String>]
 [-Environment <String>] [-ResourceType <String>] [-ServicePrincipalAuth] [-Force]
 [-RemoveTestResourcesRemainingArguments <Object>] [-ProgressAction <ActionPreference>] [-WhatIf] [-Confirm]
 [<CommonParameters>]

----------------------------------------

TITLE: Configuring AutoRest for Azure Hybrid AKS Go SDK Generation
DESCRIPTION: Defines AutoRest configuration parameters for generating Azure SDK for Go from Hybrid AKS REST API specifications. Specifies the API version, source specifications, licensing, and module versioning requirements.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/41e4538ed7bb3ceac3c1322c9455a0812ed110ac/specification/hybridaks/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/41e4538ed7bb3ceac3c1322c9455a0812ed110ac/specification/hybridaks/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.0.0
tag: package-2024-01

----------------------------------------

TITLE: Creating an Azure Private DNS Client Factory in Go
DESCRIPTION: This code creates a client factory for Azure Private DNS operations, using the subscription ID and credentials.

LANGUAGE: go
CODE:
clientFactory, err := armprivatedns.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Creating Azure Application Insight API Keys Client in Go
DESCRIPTION: This snippet shows how to create a specific client for API Keys operations using the client factory. It demonstrates the usage of the NewAPIKeysClient method.

LANGUAGE: go
CODE:
client := clientFactory.NewAPIKeysClient()

----------------------------------------

TITLE: Release Notes - Version 1.0.0
DESCRIPTION: Breaking changes and new features introduced in version 1.0.0. Changes include type modifications and new fields added to various structs.

LANGUAGE: markdown
CODE:
## 1.0.0 (2025-01-24)
### Breaking Changes

- Type of `OperationErrorDetails.ErrorDetails` has been changed from `*time.Time` to `*string`

### Features Added

- New field `AzureOperationName`, `Timestamp` in struct `OperationErrorDetails`
- New field `Timezone` in struct `ResourceOperationDetails`
- New field `Deadline`, `Timezone` in struct `Schedule`

----------------------------------------

TITLE: Creating Azure Marketplace Private Store Client in Go
DESCRIPTION: This code demonstrates how to create a specific client (PrivateStoreClient) using the previously created client factory. This client can be used to interact with private store functionalities in Azure Marketplace.

LANGUAGE: go
CODE:
client := clientFactory.NewPrivateStoreClient()

----------------------------------------

TITLE: Creating Azure Storage Accounts Client in Go
DESCRIPTION: This code demonstrates how to create a specific client (in this case, an Accounts client) using the client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewAccountsClient()

----------------------------------------

TITLE: Authenticating with Azure Credentials
DESCRIPTION: Creates default Azure credentials for authentication with Azure services.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Installing Azure Mixed Reality Module for Go
DESCRIPTION: This command installs the Azure Mixed Reality module using Go's package manager. It requires Go modules for versioning and dependency management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/mixedreality/armmixedreality

----------------------------------------

TITLE: Configuring Client Options for Different Clouds
DESCRIPTION: Sets up client options for connecting to different Azure cloud environments including sovereign clouds.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armorbital.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Authenticating with Azure Confluent in Go
DESCRIPTION: Example of creating a default Azure credential for authentication with Azure Confluent.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Authentication in Previous Version (services/**/mgmt/**)
DESCRIPTION: Example of authentication using autorest.Authorizer in the deprecated version of Azure SDK for Go.

LANGUAGE: go
CODE:
import "github.com/Azure/go-autorest/autorest/adal"
import "github.com/Azure/azure-sdk-for-go/services/resources/mgmt/2020-10-01/resources"

LANGUAGE: go
CODE:
authorizer, err := adal.NewServicePrincipalToken(oAuthToken, "<ClientId>", "<ClientSecret>", endpoint)
client := resources.NewGroupsClient("<SubscriptionId>")
client.Authorizer = authorizer

----------------------------------------

TITLE: Creating Azure Standbypool Client in Go
DESCRIPTION: This code demonstrates how to create a specific client using the client factory. It creates a new StandbyContainerGroupPoolRuntimeViewsClient, which provides access to related APIs.

LANGUAGE: go
CODE:
client := clientFactory.NewStandbyContainerGroupPoolRuntimeViewsClient()

----------------------------------------

TITLE: Installing Azure Networkanalytics Module in Go
DESCRIPTION: Command to install the Azure Networkanalytics module using Go's package manager. This installs the module and its dependencies.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/networkanalytics/armnetworkanalytics

----------------------------------------

TITLE: Documenting Release History in Markdown
DESCRIPTION: This snippet shows how release history is documented using Markdown formatting. It includes version numbers, dates, and categorized changes such as features added, breaking changes, and bug fixes.

LANGUAGE: markdown
CODE:
# Release History

## 2.1.0 (2024-04-26)
### Features Added

- New enum type `SmartDataActions` with values `SmartDataActionsRead`
- New struct `SmartIdentityProviderApplication`
- New struct `SmartIdentityProviderConfiguration`
- New struct `StorageConfiguration`
- New field `EnableDataPartitions`, `StorageConfiguration` in struct `DicomServiceProperties`
- New field `SmartIdentityProviders` in struct `FhirServiceAuthenticationConfiguration`


## 2.0.0 (2023-12-22)
### Breaking Changes

- Struct `FhirServiceAccessPolicyEntry` has been removed
- Field `AccessPolicies` of struct `FhirServiceProperties` has been removed

### Features Added

- New struct `CorsConfiguration`
- New struct `Encryption`
- New struct `EncryptionCustomerManagedKeyEncryption`
- New struct `FhirServiceImportConfiguration`
- New struct `ImplementationGuidesConfiguration`
- New struct `ServiceImportConfigurationInfo`
- New field `CorsConfiguration`, `Encryption`, `EventState` in struct `DicomServiceProperties`
- New field `Encryption`, `ImplementationGuidesConfiguration`, `ImportConfiguration` in struct `FhirServiceProperties`
- New field `EnableRegionalMdmAccount`, `IsInternal`, `MetricFilterPattern`, `ResourceIDDimensionNameOverride`, `SourceMdmAccount` in struct `MetricSpecification`
- New field `CrossTenantCmkApplicationID` in struct `ServiceCosmosDbConfigurationInfo`
- New field `ImportConfiguration` in struct `ServicesProperties`


## 1.2.0 (2023-11-24)
### Features Added

- Support for test fakes and OpenTelemetry trace spans.


## 1.1.1 (2023-04-14)
### Bug Fixes

- Fix serialization bug of empty value of `any` type.


## 1.1.0 (2023-04-06)
### Features Added

- New struct `ClientFactory` which is a client factory used to create any client in this module


## 1.0.0 (2022-05-18)

The package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/healthcareapis/armhealthcareapis` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html) since version 1.0.0, which contains breaking changes.

To migrate the existing applications to the latest version, please refer to [Migration Guide](https://aka.ms/azsdk/go/mgmt/migration).

To learn more, please refer to our documentation [Quick Start](https://aka.ms/azsdk/go/mgmt).

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK Go Generation
DESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure SDK for Go. It specifies the Azure ARM mode, required API specifications, license header, module version, and API version tag for the Network Analytics resource manager.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/21a8d55d74e4425e96d76e5835f52cfc9eb95a22/specification/networkanalytics/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/21a8d55d74e4425e96d76e5835f52cfc9eb95a22/specification/networkanalytics/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.0.0
tag: package-2023-11-15

----------------------------------------

TITLE: Custom HTTP Client in Previous Version (services/**/mgmt/**)
DESCRIPTION: Example of using a custom HTTP client in the deprecated version of Azure SDK for Go.

LANGUAGE: go
CODE:
import "github.com/Azure/azure-sdk-for-go/services/resources/mgmt/2020-10-01/resources"

LANGUAGE: go
CODE:
httpClient := NewYourOwnHTTPClient{}
client := resources.NewGroupsClient("<SubscriptionId>")
client.Sender = &httpClient

----------------------------------------

TITLE: Creating Azure Batch Client Factory
DESCRIPTION: Initializes a client factory for creating Azure Batch service clients with default configuration

LANGUAGE: go
CODE:
clientFactory, err := armbatch.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Installing Azure Confluent Module in Go
DESCRIPTION: Command to install the Azure Confluent module using Go modules.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/confluent/armconfluent

----------------------------------------

TITLE: Making LeaseDuration Parameter Required
DESCRIPTION: YAML directive to change the 'Duration' parameter in leases to be required.

LANGUAGE: yaml
CODE:
directive:
- from: swagger-document
  where: $.parameters.LeaseDuration
  transform: >
    $.required = true;

----------------------------------------

TITLE: Installing Azure Astro SDK Module
DESCRIPTION: Command to install the Azure Astro module using Go modules for dependency management

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/astro/armastro

----------------------------------------

TITLE: Creating Resource Graph Client
DESCRIPTION: Creates a new Resource Graph client instance from the client factory

LANGUAGE: go
CODE:
client := clientFactory.NewClient()

----------------------------------------

TITLE: Adding Internal Import to Client Files
DESCRIPTION: This YAML directive adds an internal import statement to various client-related Go files using a regular expression replacement.

LANGUAGE: yaml
CODE:
directive:
  - from:
      - "*_client.go"
      - "client.go"
      - "client_factory.go"
    where: $
    transform: return $.replace(/import \(\n/, "import (\n\"github.com/Azure/azure-sdk-for-go/profile/p20200901/internal\"\n");

----------------------------------------

TITLE: Importing Client Factory for Azure Hybrid Connectivity
DESCRIPTION: Client factory pattern used to instantiate various clients for Azure Hybrid Connectivity service operations. New in version 0.6.0.

LANGUAGE: go
CODE:
type ClientFactory struct {}

----------------------------------------

TITLE: Configuring Azure Client Options
DESCRIPTION: Sets up client options for connecting to different Azure clouds including sovereign clouds and Azure Stack

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armselfhelp.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Removing Module Constants Directive
DESCRIPTION: AutoRest directive to remove moduleName and moduleVersion constants from the constants.go file.

LANGUAGE: yaml
CODE:
directive:
  - from: constants.go
    where: $
    transform: return $.replace(/const \(\n\s+moduleName.+\n\s+moduleVersion.+\n\)\n/, "");

----------------------------------------

TITLE: Configuring AutoRest for Azure Cosmos DB Go SDK Generation
DESCRIPTION: YAML configuration for AutoRest to generate Azure Cosmos DB SDK code. Specifies Azure ARM mode, required API specifications, license header, module version 4.0.0-beta.2, and targets the preview-2024-12-01 API version.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/069a65e8a6d1a6c0c58d9a9d97610b7103b6e8a5/specification/cosmos-db/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/069a65e8a6d1a6c0c58d9a9d97610b7103b6e8a5/specification/cosmos-db/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 4.0.0-beta.2
tag: package-preview-2024-12-01

----------------------------------------

TITLE: Authenticating with Azure using Default Azure Credential in Go
DESCRIPTION: This snippet demonstrates how to create a default Azure credential for authentication with Azure services.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Configuring Client Options for Different Clouds
DESCRIPTION: Sets up client options for connecting to different Azure clouds including sovereign clouds and Azure Stack

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armdesktopvirtualization.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Creating Azure Active Directory Client Factory in Go
DESCRIPTION: Demonstrates how to create a client factory for Azure Active Directory operations using a subscription ID and credentials.

LANGUAGE: go
CODE:
clientFactory, err := armaad.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Version History Documentation in Markdown
DESCRIPTION: Markdown formatted changelog detailing version updates, breaking changes, feature additions, and bug fixes across multiple releases of the Azure Recovery Services SDK for Go.

LANGUAGE: markdown
CODE:
# Release History\n\n## 2.0.0 (2024-05-24)\n### Breaking Changes\n\n- Operation `*VaultsClient.Delete` has been changed to LRO, use `*VaultsClient.BeginDelete` instead.\n\n### Features Added\n\n- New value `StandardTierStorageRedundancyInvalid` added to enum type `StandardTierStorageRedundancy`\n- New enum type `BCDRSecurityLevel` with values `BCDRSecurityLevelExcellent`, `BCDRSecurityLevelFair`, `BCDRSecurityLevelGood`, `BCDRSecurityLevelPoor`\n- New enum type `EnhancedSecurityState` with values `EnhancedSecurityStateAlwaysON`, `EnhancedSecurityStateDisabled`, `EnhancedSecurityStateEnabled`, `EnhancedSecurityStateInvalid`

----------------------------------------

TITLE: Installing Azure Education Module in Go
DESCRIPTION: This snippet demonstrates how to install the Azure Education module using the go get command. It requires Go modules for dependency management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/education/armeducation

----------------------------------------

TITLE: Adding New Structs in Go for Azure SDK
DESCRIPTION: This snippet introduces new structs for authentication configuration, promotion requests, and role properties in the Azure SDK for Go.

LANGUAGE: markdown
CODE:
- New struct `AuthConfig`
- New struct `PromoteRequest`
- New struct `RolePropertiesExternalIdentity`

----------------------------------------

TITLE: Upgrading Module Version
DESCRIPTION: Commands for upgrading to the latest major version of the SDK module using gomajor.

LANGUAGE: sh
CODE:
go install github.com/icholy/gomajor@latest
gomajor get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute@latest

----------------------------------------

TITLE: Installing Azure Stream Analytics Go Module
DESCRIPTION: Command to install the Azure Stream Analytics module using Go modules for dependency management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/streamanalytics/armstreamanalytics/v2

----------------------------------------

TITLE: Creating Custom Providers Client Factory
DESCRIPTION: Initializes a client factory for Azure Custom Providers with basic configuration

LANGUAGE: go
CODE:
clientFactory, err := armcustomproviders.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Defining New Struct Fields in Go
DESCRIPTION: This snippet demonstrates the addition of new fields to existing structs in version 0.4.0. It includes fields for artifact type, certificate, and timestamps in the SSHKey struct.

LANGUAGE: go
CODE:
ArtifactType in struct AppliancesClientListKeysOptions
Certificate in struct SSHKey
CreationTimeStamp in struct SSHKey
ExpirationTimeStamp in struct SSHKey

----------------------------------------

TITLE: Upgrading Azure SDK for Go Major Version
DESCRIPTION: These commands show how to upgrade to the latest major version of an Azure SDK module using gomajor. This example uses the compute module.

LANGUAGE: sh
CODE:
go install github.com/icholy/gomajor@latest
gomajor get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute@latest

----------------------------------------

TITLE: Creating Azure Largeinstance Client in Go
DESCRIPTION: Instantiates a new Azure Largeinstance client using the previously created client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewAzureLargeInstanceClient()

----------------------------------------

TITLE: Installing Azure Container Registry Module in Go
DESCRIPTION: This snippet shows how to install the Azure Container Registry module using Go modules. It uses the go get command to fetch the package from GitHub.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/containerregistry/armcontainerregistry

----------------------------------------

TITLE: Authenticating with Azure Credentials
DESCRIPTION: Creates default Azure credentials for authentication using the azidentity package

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Authenticating with Azure Credentials
DESCRIPTION: Create default Azure credentials for authentication with the Storage Import/Export service.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Initial Release Version 0.1.0
DESCRIPTION: Initial release of the Azure SDK for Go DevOps Infrastructure package implementing next generation design principles.

LANGUAGE: markdown
CODE:
## 0.1.0 (2024-05-24)
### Other Changes

The package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/devopsinfrastructure/armdevopsinfrastructure` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html).

To learn more, please refer to our documentation [Quick Start](https://aka.ms/azsdk/go/mgmt).

----------------------------------------

TITLE: Creating Azure Analysis Services Server Client in Go
DESCRIPTION: Instantiates a new servers client using the client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewServersClient()

----------------------------------------

TITLE: Configuring AutoRest Settings for Azure SDK Generation
DESCRIPTION: Core AutoRest configuration for generating the Azure SDK Go module. Specifies the source API specs, module details, and output settings for the resource manager subscriptions package.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/53b1affe357b3bfbb53721d0a2002382a046d3b0/specification/resources/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/53b1affe357b3bfbb53721d0a2002382a046d3b0/specification/resources/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 0.1.0
module-name: profile/p20200901/resourcemanager/resources/armsubscriptions
module: github.com/Azure/azure-sdk-for-go/$(module-name)
output-folder: $(go-sdk-folder)/$(module-name)
tag: package-subscriptions-2016-06
modelerfour:
  lenient-model-deduplication: true

----------------------------------------

TITLE: Configuring Azure Client Options for Different Clouds in Go
DESCRIPTION: This snippet shows how to configure client options for connecting to different Azure clouds. It sets up options to connect to Azure China cloud, which can be used when creating the client factory.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armrecoveryservices.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Configuring AutoRest Generator for Azure Web Services SDK
DESCRIPTION: YAML configuration that defines parameters for generating Go SDK code from Azure REST API specifications. Specifies the source API specs, license header, module version 4.1.0, and targets the 2024-04 API package version.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/b5d78da207e9c5d8f82e95224039867271f47cdf/specification/web/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/b5d78da207e9c5d8f82e95224039867271f47cdf/specification/web/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 4.1.0
tag: package-2024-04

----------------------------------------

TITLE: Configuring AutoRest Generator for Azure Web Services SDK
DESCRIPTION: YAML configuration that defines parameters for generating Go SDK code from Azure REST API specifications. Specifies the source API specs, license header, module version 4.1.0, and targets the 2024-04 API package version.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/b5d78da207e9c5d8f82e95224039867271f47cdf/specification/web/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/b5d78da207e9c5d8f82e95224039867271f47cdf/specification/web/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 4.1.0
tag: package-2024-04

----------------------------------------

TITLE: Authenticating with Azure Using Default Credentials in Go
DESCRIPTION: Create a default Azure credential using the azidentity package for authentication with Azure services.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Configuring Azure Marketplace Ordering Client for China Cloud in Go
DESCRIPTION: Example of creating a client factory with options to connect to Azure China cloud. It demonstrates setting custom client options.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armmarketplaceordering.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Creating Azure Costmanagement Client Factory in Go
DESCRIPTION: Initializes a client factory for Azure Costmanagement using subscription ID and credentials.

LANGUAGE: go
CODE:
clientFactory, err := armcostmanagement.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Adding New Struct AutoScaleProperties in Go
DESCRIPTION: Defines a new struct AutoScaleProperties to represent auto-scale configuration properties for Elastic SAN resources.

LANGUAGE: go
CODE:
type AutoScaleProperties struct {
    // Fields would be defined here
}

----------------------------------------

TITLE: Creating Azure Default Credential
DESCRIPTION: Initialize default Azure credentials for authentication using azidentity module.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Creating Storage Sync Client Factory
DESCRIPTION: Initializes a client factory for creating Azure Storage Sync service clients using subscription ID and credentials.

LANGUAGE: go
CODE:
clientFactory, err := armstoragesync.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Installing Azure Scheduler Go Module
DESCRIPTION: Command to install the Azure Scheduler module using Go modules package management system.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/scheduler/armscheduler

----------------------------------------

TITLE: Release History Changelog in Markdown
DESCRIPTION: Markdown formatted changelog entries for Azure SDK for Go datashare package releases, documenting feature additions and breaking changes

LANGUAGE: markdown
CODE:
# Release History

## 1.2.0 (2023-11-24)
### Features Added

- Support for test fakes and OpenTelemetry trace spans.


## 1.1.0 (2023-03-28)
### Features Added

- New struct `ClientFactory` which is a client factory used to create any client in this module


## 1.0.0 (2022-05-18)

The package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/datashare/armdatashare` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html) since version 1.0.0, which contains breaking changes.

To migrate the existing applications to the latest version, please refer to [Migration Guide](https://aka.ms/azsdk/go/mgmt/migration).

To learn more, please refer to our documentation [Quick Start](https://aka.ms/azsdk/go/mgmt).

----------------------------------------

TITLE: Creating an Azure Visual Studio Projects Client in Go
DESCRIPTION: This snippet shows how to create a specific client for working with Azure Visual Studio projects. It uses the previously created client factory to instantiate a new ProjectsClient, which provides access to project-related APIs.

LANGUAGE: go
CODE:
client := clientFactory.NewProjectsClient()

----------------------------------------

TITLE: Authenticating with Azure using Default Azure Credential in Go
DESCRIPTION: Creates a default Azure credential for authenticating with Azure services. This snippet uses the azidentity package to create a credential that can be used with Azure clients.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Release Notes Entry in Markdown
DESCRIPTION: Release notes entry documenting version 0.1.0 of the Azure SDK for Go databoundaries package, highlighting the adoption of next generation design principles.

LANGUAGE: markdown
CODE:
## 0.1.0 (2024-10-21)
### Other Changes

The package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/databoundaries/armdataboundaries` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html).

----------------------------------------

TITLE: Creating Organizations Client
DESCRIPTION: Instantiates a new Organizations client using the client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewOrganizationsClient()

----------------------------------------

TITLE: Creating Azure Connected Cache Node Operations Client in Go
DESCRIPTION: This code demonstrates how to create a specific client for cache node operations using the previously created client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewCacheNodesOperationsClient()

----------------------------------------

TITLE: Installing Azure Machine Learning Services Module in Go
DESCRIPTION: This command installs the Azure Machine Learning Services module using Go's package manager.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/machinelearningservices/armmachinelearningservices

----------------------------------------

TITLE: Updating Module Name and Version References in Client Files
DESCRIPTION: This YAML directive modifies client-related Go files to use internal.ModuleVersion instead of moduleVersion and updates the module name reference. It ensures consistent versioning and naming across the generated SDK.

LANGUAGE: yaml
CODE:
directive:
  - from:
      - "*_client.go"
      - "client.go"
      - "client_factory.go"
    where: $
    transform: return $.replace(/moduleVersion/, "internal.ModuleVersion").replace(/moduleName+"/, "internal.ModuleName+\"/armnetwork");

----------------------------------------

TITLE: Release History Documentation in Markdown
DESCRIPTION: Structured changelog documenting the evolution of the Azure SDK for Go KeyVault internal package. Details version changes including features added, breaking changes, bugs fixed, and other modifications.

LANGUAGE: markdown
CODE:
# Release History

## 1.2.0-beta.2 (Unreleased)

### Features Added

### Breaking Changes

### Bugs Fixed

### Other Changes

## 1.2.0-beta.1 (2025-03-11)

### Features Added
* Added fakes support

## 1.1.1 (2025-02-13)

### Bugs Fixed
* Fixed data race when using Client from multiple goroutines concurrently (thanks, @strager)

## 1.1.0 (2024-10-21)

### Features Added
* Added CAE support
* `KeyVaultChallengePolicy` always requests tokens from the Vault's tenant, overriding any credential default

## 1.0.1 (2024-04-09)

### Other Changes
* Upgraded dependencies

## 1.0.0 (2023-08-15)

### Features Added
* This is the first stable release of the `internal` library for KeyVault.

### Other Changes
* Upgrade dependencies

## 0.8.0 (2023-03-08)

### Breaking Changes
* Moved to new location

### Other Changes
* Upgrade dependencies

## 0.7.1 (2022-11-14)

### Bugs Fixed
* `KeyVaultChallengePolicy` uses incorrect authentication scope when challenge verification is disabled

## 0.7.0 (2022-09-20)

### Breaking Changes
* Added `*KeyVaultChallengePolicyOptions` parameter to `NewKeyVaultChallengePolicy`

## 0.6.0 (2022-09-12)

### Breaking Changes
* Verify the challenge resource matches the vault domain. See https://aka.ms/azsdk/blog/vault-uri for more information.
* `ParseID()` no longer appends a trailing slash to vault URLs

## 0.5.0 (2022-05-12)

### Breaking Changes
* Removed `ExpiringResource` and its dependencies in favor of shared implementation from `internal/temporal`.

### Other Changes
* Updated to latest versions of `azcore` and `internal`.

## 0.4.0 (2022-04-22)

### Breaking Changes
* Updated `ExpiringResource` and its dependent types to use generics.

### Other Changes
* Remove reference to `TokenRequestOptions.TenantID` as it's been removed and wasn't working anyways.

## 0.3.0 (2022-04-04)

### Features Added
* Adds the `ParseKeyvaultID` function to parse an ID into the Key Vault URL, item name, and item version

### Breaking Changes
* Updates to azcore v0.23.0

## 0.2.1 (2022-01-31)

### Bugs Fixed
* Avoid retries on terminal failures (#16932)

## 0.2.0 (2022-01-12)

### Bugs Fixed
* Fixes a bug with Managed HSMs that prevented correctly authorizing requests.

## 0.1.0 (2021-11-09)
* This is the initial release of the `internal` library for KeyVault

----------------------------------------

TITLE: Creating Azure Terraform Client Factory
DESCRIPTION: Initializes a client factory for Azure Terraform operations with basic configuration

LANGUAGE: go
CODE:
clientFactory, err := armterraform.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Installing Azure Lab Services Module
DESCRIPTION: Command to install the Azure Lab Services module using Go modules for dependency management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/labservices/armlabservices

----------------------------------------

TITLE: Removing FileSystem and PathName Parameters
DESCRIPTION: YAML directive to remove FileSystem and PathName from the parameter list as they are not needed.

LANGUAGE: yaml
CODE:
directive:
- from: swagger-document
  where: $["x-ms-paths"]
  transform: >
    for (const property in $)
    {
        if (property.includes('/{filesystem}/{path}'))
        {
            $[property]["parameters"] = $[property]["parameters"].filter(function(param) { return (typeof param['$ref'] === "undefined") || (false == param['$ref'].endsWith("#/parameters/FileSystem") && false == param['$ref'].endsWith("#/parameters/Path"))});
        }
        else if (property.includes('/{filesystem}'))
        {
            $[property]["parameters"] = $[property]["parameters"].filter(function(param) { return (typeof param['$ref'] === "undefined") || (false == param['$ref'].endsWith("#/parameters/FileSystem"))});
        }
    }

----------------------------------------

TITLE: Installing Azure Managed Applications Module
DESCRIPTION: Command to install the Azure Managed Applications module using Go modules.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armmanagedapplications

----------------------------------------

TITLE: Creating Azure Database for MySQL Client in Go
DESCRIPTION: This snippet shows how to create a specific client (AdvancedThreatProtectionSettingsClient) using the previously created client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewAdvancedThreatProtectionSettingsClient()

----------------------------------------

TITLE: Removing moduleName and moduleVersion Constants
DESCRIPTION: This YAML directive removes the moduleName and moduleVersion constants from the generated constants.go file. It uses a regular expression to match and remove the constant declarations.

LANGUAGE: yaml
CODE:
directive:
  - from: constants.go
    where: $
    transform: return $.replace(/const \(\n\s+moduleName.+\n\s+moduleVersion.+\n\)\n/, "");

----------------------------------------

TITLE: Configuring Azure Edge Order Client for Sovereign Clouds in Go
DESCRIPTION: This snippet shows how to configure the Azure Edge Order client for use with sovereign clouds or Azure Stack. It uses ClientOptions to set the cloud endpoint, in this case, to Azure China.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armedgeorder.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Git Conflict Status Example
DESCRIPTION: Sample Git status output showing a merge conflict state during tag combination. Demonstrates the conflict resolution workflow in the asset repository.

LANGUAGE: bash
CODE:
C:/repo/azure-sdk-for-python/.assets/eDscgL1p9G/python |>git status
HEAD detached from python/storage/azure-storage-blob_12c8154ae2
You are currently cherry-picking commit 1fd0865.
  (fix conflicts and run "git cherry-pick --continue")
  (use "git cherry-pick --skip" to skip this patch)
  (use "git cherry-pick --abort" to cancel the cherry-pick operation)

You are in a sparse checkout with 100% of tracked files present.

Unmerged paths:
  (use "git add <file>..." to mark resolution)
        both added:      sdk/storage/azure-storage-blob/tests/recordings/test_append_blob_async.pyTestStorageAppendBlobAsynctest_append_blob_from_text_new.json

no changes added to commit (use "git add" and/or "git commit -a")

----------------------------------------

TITLE: Authenticating with Azure using Default Credential in Go
DESCRIPTION: Creates a default Azure credential for authentication. This method supports various authentication types including client/secret, certificate, and managed identity.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Configuring Azure Iotfirmwaredefense Client for Different Clouds in Go
DESCRIPTION: Example of how to configure the client factory to connect to different Azure clouds or Azure Stack using ClientOptions. This allows for flexibility in deployment scenarios.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
client, err := armiotfirmwaredefense.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Initializing Azure Authentication Credentials
DESCRIPTION: Creates default Azure credentials for authentication with Azure services

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Documenting Release History in Markdown
DESCRIPTION: This markdown snippet outlines the release history for the Azure SDK for Go, detailing version changes and new features added in each release. It covers versions 1.2.0, 1.1.0, 1.0.2, and 0.1.0, highlighting important updates and improvements.

LANGUAGE: markdown
CODE:
# Release History

## 1.2.0 (2023-11-24)
### Features Added

- Support for test fakes and OpenTelemetry trace spans.


## 1.1.0 (2023-03-31)
### Features Added

- New struct `ClientFactory` which is a client factory used to create any client in this module


## 1.0.2 (2023-02-24)

Release stable version.

## 0.1.0 (2022-11-21)

The package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/loadtesting/armloadtesting` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html).

To learn more, please refer to our documentation [Quick Start](https://aka.ms/azsdk/go/mgmt).

----------------------------------------

TITLE: Creating Azure Database for PostgreSQL HSC Client Factory in Go
DESCRIPTION: Example of creating a client factory for Azure Database for PostgreSQL HSC. This factory can be used to create any client in the module.

LANGUAGE: go
CODE:
clientFactory, err := armpostgresqlhsc.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Adding New Field to Properties Struct in Go
DESCRIPTION: Adds a new field AutoScaleProperties to the existing Properties struct to include auto-scale configuration.

LANGUAGE: go
CODE:
type Properties struct {
    // Existing fields
    AutoScaleProperties *AutoScaleProperties `json:"autoScaleProperties,omitempty"`
}

----------------------------------------

TITLE: Creating Storage Sync Service Client
DESCRIPTION: Creates a new services client instance using the client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewServicesClient()

----------------------------------------

TITLE: Installing Azure Operations Management Module in Go
DESCRIPTION: This snippet shows how to install the Azure Operations Management module using Go's package manager.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/operationsmanagement/armoperationsmanagement

----------------------------------------

TITLE: Configuring AutoRest Settings for Azure Deployment Manager Go SDK
DESCRIPTION: Defines AutoRest configuration parameters including Azure ARM specifications, required GitHub specification files, license header type, and module version for generating the Go SDK.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/7a2ac91de424f271cf91cc8009f3fe9ee8249086/specification/deploymentmanager/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/7a2ac91de424f271cf91cc8009f3fe9ee8249086/specification/deploymentmanager/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 0.6.0

----------------------------------------

TITLE: Creating Azure Data Share Accounts Client in Go
DESCRIPTION: This code demonstrates how to create a specific client (in this case, an Accounts client) using the previously created client factory. This client can be used to perform operations related to Azure Data Share accounts.

LANGUAGE: go
CODE:
client := clientFactory.NewAccountsClient()

----------------------------------------

TITLE: Authenticating with Azure Default Credentials
DESCRIPTION: Creates default Azure credentials for authentication using the azidentity module.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Defining Status Enum Values in Go
DESCRIPTION: This snippet shows the addition of new values to the Status enum type in version 1.0.0. It includes status values related to ETCD snapshots, image operations, and SFS connectivity validation.

LANGUAGE: go
CODE:
StatusETCDSnapshotFailed
StatusValidatingETCDHealth
StatusValidatingImageDownload
StatusValidatingImageUpload
StatusValidatingSFSConnectivity

----------------------------------------

TITLE: Creating DICOM Services Client in Go
DESCRIPTION: This code demonstrates how to create a specific client (DICOM Services) using the previously created client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewDicomServicesClient()

----------------------------------------

TITLE: Creating Azure Compute Fleet Specific Client in Go
DESCRIPTION: This code demonstrates how to create a specific client (Fleets client in this case) using the previously created client factory. This client can be used to access specific Azure Compute Fleet APIs.

LANGUAGE: go
CODE:
client := clientFactory.NewFleetsClient()

----------------------------------------

TITLE: Installing Azure Resources Module in Go
DESCRIPTION: Command to install the Azure Resources module using Go modules for dependency management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armresources/v2

----------------------------------------

TITLE: Creating a Specific Azure Mongocluster Client in Go
DESCRIPTION: This code demonstrates how to create a specific client (FirewallRulesClient in this case) using the previously created client factory. This client can be used to perform operations related to firewall rules in Azure Mongocluster.

LANGUAGE: go
CODE:
client := clientFactory.NewFirewallRulesClient()

----------------------------------------

TITLE: Creating Terraform Client Instance
DESCRIPTION: Creates a new Terraform client instance from the client factory

LANGUAGE: go
CODE:
client := clientFactory.NewTerraformClient()

----------------------------------------

TITLE: Configuring AutoRest Settings for Azure Dashboard SDK Generation
DESCRIPTION: Defines the AutoRest configuration parameters for generating Go SDK code from Azure Dashboard REST API specifications. Specifies the Azure ARM mode, required API specification sources, license header type, module version 1.2.0, and API version tag package-2023-09-01.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/78eac0bd58633028293cb1ec1709baa200bed9e2/specification/dashboard/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/78eac0bd58633028293cb1ec1709baa200bed9e2/specification/dashboard/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.2.0
tag: package-2023-09-01

----------------------------------------

TITLE: Creating Azure Orbital Contacts Client
DESCRIPTION: Creates a specific client instance for managing Azure Orbital contacts using the client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewContactsClient()

----------------------------------------

TITLE: Add Internal Import Directive
DESCRIPTION: AutoRest directive to add internal package import to client-related Go files.

LANGUAGE: yaml
CODE:
directive:
  - from:
      - "*_client.go"
      - "client.go"
      - "client_factory.go"
    where: $
    transform: return $.replace(/import \(\n/, "import (\n\"github.com/Azure/azure-sdk-for-go/profile/p20200901/internal\"\n");

----------------------------------------

TITLE: Configuring Azure Cloud Options
DESCRIPTION: Sets up client options for connecting to different Azure clouds like Azure China using ClientOptions configuration.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armeventgrid.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Authenticating with Azure Credentials
DESCRIPTION: Creates default Azure credentials for authentication using the azidentity package.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Creating Azure Device Update Client Factory
DESCRIPTION: Initializes a client factory for creating Azure Device Update service clients with basic configuration

LANGUAGE: go
CODE:
clientFactory, err := armdeviceupdate.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Creating Azure Quota Client Factory in Go
DESCRIPTION: This code creates a client factory for Azure Quota services. It requires a subscription ID and a credential object. The factory can be used to create specific clients for different quota operations.

LANGUAGE: go
CODE:
clientFactory, err := armquota.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Breaking Change: Type Change in AlertsClientChangeStateOptions
DESCRIPTION: Type change of AlertsClientChangeStateOptions.Comment from *string to *Comments in version 0.10.0

LANGUAGE: go
CODE:
type AlertsClientChangeStateOptions struct {
    Comment *Comments // Changed from *string
}

----------------------------------------

TITLE: Installing Azure Edge Order Module in Go
DESCRIPTION: This command installs the Azure Edge Order module using Go's package manager. It requires Go modules to be enabled for versioning and dependency management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/edgeorder/armedgeorder

----------------------------------------

TITLE: Defining New Enum Types in Go for Azure SDK
DESCRIPTION: This snippet introduces new enum types for Active Directory authentication, password authentication, principal types, and role types in the Azure SDK for Go.

LANGUAGE: markdown
CODE:
- New enum type `ActiveDirectoryAuth` with values `ActiveDirectoryAuthDisabled`, `ActiveDirectoryAuthEnabled`
- New enum type `PasswordAuth` with values `PasswordAuthDisabled`, `PasswordAuthEnabled`
- New enum type `PrincipalType` with values `PrincipalTypeGroup`, `PrincipalTypeServicePrincipal`, `PrincipalTypeUser`
- New enum type `RoleType` with values `RoleTypeAdmin`, `RoleTypeUser`

----------------------------------------

TITLE: Authenticating with Azure Credentials
DESCRIPTION: Creates default Azure credentials for authentication using azidentity module

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Installing Azure HealthDataAIServices Module in Go
DESCRIPTION: Uses go get command to install the Azure HealthDataAIServices module from the Azure SDK for Go.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/healthdataaiservices/armhealthdataaiservices

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK Go Generation
DESCRIPTION: This YAML configuration sets up AutoRest for generating the Azure SDK for Go. It specifies the Azure ARM mode, required API specifications from the Azure REST API specs repository, license header, and module version.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/432872fac1d0f8edcae98a0e8504afc0ee302710/specification/fluidrelay/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/432872fac1d0f8edcae98a0e8504afc0ee302710/specification/fluidrelay/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.2.0

----------------------------------------

TITLE: Creating Azure Fabric Client Factory
DESCRIPTION: Initializes a client factory for Azure Fabric services using subscription ID and credentials.

LANGUAGE: go
CODE:
clientFactory, err := armfabric.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Creating HealthDataAIServices DeidServices Client in Go
DESCRIPTION: Initializes a DeidServices client using the previously created client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewDeidServicesClient()

----------------------------------------

TITLE: Configuring Azure Client Options for Sovereign Clouds in Go
DESCRIPTION: This snippet shows how to configure client options for connecting to sovereign clouds or Azure Stack using the arm and azcore packages.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armcontainerorchestratorruntime.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Installing Azure Resource Graph Module
DESCRIPTION: Command to install the Azure Resource Graph module using Go modules package management

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resourcegraph/armresourcegraph

----------------------------------------

TITLE: Configuring AutoRest for Azure Container Instance SDK Generation
DESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure Container Instance SDK for Go. It specifies the Azure ARM mode, required specification files, license header, module version, and API version tag.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/366aaa13cdd218b9adac716680e49473673410c8/specification/containerinstance/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/366aaa13cdd218b9adac716680e49473673410c8/specification/containerinstance/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 2.5.0-beta.1
tag: package-preview-2024-05

----------------------------------------

TITLE: Creating or Updating Variables in Go
DESCRIPTION: Performs a create or update operation for variables using the VariablesClient.

LANGUAGE: Go
CODE:
*VariablesClient.CreateOrUpdate(context.Context, string, Variable, *VariablesClientCreateOrUpdateOptions) (VariablesClientCreateOrUpdateResponse, error)

----------------------------------------

TITLE: Azure Data Lake Storage Release History in Markdown
DESCRIPTION: Markdown formatted changelog documenting version history, features, bug fixes and dependency updates for the Azure Data Lake Storage SDK for Go.

LANGUAGE: markdown
CODE:
# Release History

## 1.4.1-beta.2 (Unreleased)

### Features Added

### Breaking Changes

### Bugs Fixed

### Other Changes

## 1.4.1-beta.1 (2025-02-12)

### Features Added
* Upgraded service version to `2025-05-05`.

### Other Changes
* Updated `azidentity` version to `1.8.1`
* Updated `azblob` version to `v1.6.1-beta.1`

----------------------------------------

TITLE: Hub and Partition Information Retrieval in Go
DESCRIPTION: Compares old and new methods for retrieving Event Hub and partition information using both consumer and producer clients.

LANGUAGE: go
CODE:
// old
hub.GetPartitionInformation(context.TODO(), "0")
hub.GetRuntimeInformation(context.TODO())

// new

// equivalent to: hub.GetRuntimeInformation(context.TODO())
consumerClient.GetEventHubProperties(context.TODO(), nil)   

// equivalent to: hub.GetPartitionInformation
consumerClient.GetPartitionProperties(context.TODO(), "partition-id", nil)  

//
// or, using the ProducerClient
//

producerClient.GetEventHubProperties(context.TODO(), nil)
producerClient.GetPartitionProperties(context.TODO(), "partition-id", nil)

----------------------------------------

TITLE: Installing Azure Commerce Module for Go
DESCRIPTION: This snippet shows how to install the Azure Commerce module using Go's package manager. It requires Go modules for versioning and dependency management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/commerce/armcommerce

----------------------------------------

TITLE: Creating Azure Selfhelp Service Client
DESCRIPTION: Creates a specific service client for accessing Azure Selfhelp APIs

LANGUAGE: go
CODE:
client := clientFactory.NewDiscoverySolutionNLPSubscriptionScopeClient()

----------------------------------------

TITLE: Adding Internal Import to Generated Client Files
DESCRIPTION: This YAML directive adds an import statement for the internal package to the generated client files, including *_client.go, client.go, and client_factory.go.

LANGUAGE: yaml
CODE:
directive:
  - from:
      - "*_client.go"
      - "client.go"
      - "client_factory.go"
    where: $
    transform: return $.replace(/import \(\n/, "import (\n\"github.com/Azure/azure-sdk-for-go/profile/p20200901/internal\"\n");

----------------------------------------

TITLE: Enum Type Definitions in Go
DESCRIPTION: New enum type definitions for CreatedByType and RequestState with their associated values.

LANGUAGE: go
CODE:
type CreatedByType string

const (
    CreatedByTypeApplication
    CreatedByTypeKey
    CreatedByTypeManagedIdentity
    CreatedByTypeUser
)

type RequestState string

const (
    RequestStateAccepted
    RequestStateCanceled 
    RequestStateCreated
    RequestStateFailed
    RequestStateInProgress
    RequestStateInvalid
    RequestStateSucceeded
)

----------------------------------------

TITLE: Configuring Azure Client Options for Different Clouds in Go
DESCRIPTION: Sets up client options to connect to different Azure clouds, including sovereign clouds and Azure Stack.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armrecoveryservicessiterecovery.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Configuring Azure Client Options for Sovereign Clouds in Go
DESCRIPTION: Sets up client options to connect to specific Azure cloud environments, such as Azure China.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armhealthdataaiservices.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Authenticating with Azure Credentials
DESCRIPTION: Creates default Azure credentials for authentication with Azure services using azidentity module

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Issue Command Usage Example
DESCRIPTION: Demonstrates how to use the issue command with a personal access token to generate a release configuration file.

LANGUAGE: shell
CODE:
generator issue -t $YOUR_PERSONAL_ACCESS_TOKEN > sdk-release.json

----------------------------------------

TITLE: Authenticating with Azure using Default Credentials in Go
DESCRIPTION: This snippet demonstrates how to create a default Azure credential for authentication.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Creating a Client for Azure Resources in Go
DESCRIPTION: Demonstrates how to create a specific client using the previously initialized client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewClient()

----------------------------------------

TITLE: Creating Azure Workloads Provider Instance Client
DESCRIPTION: Creates a specific client instance for working with provider instances using the client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewProviderInstancesClient()

----------------------------------------

TITLE: Configuring Azure Client with Custom Options
DESCRIPTION: Creates a client factory with custom options for connecting to different Azure clouds.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
client, err := armmanagednetworkfabric.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Configuring Client with Custom Options - Go
DESCRIPTION: Creates a client factory with custom options for connecting to different Azure clouds

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armstorageactions.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Creating an Azure Edgezones Client Factory in Go
DESCRIPTION: This snippet shows how to create a client factory for Azure Edgezones. It uses the armedgezones package to create a new ClientFactory, which requires a subscription ID and a credential object.

LANGUAGE: go
CODE:
clientFactory, err := armedgezones.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Configuring Azure Resource Connector Client for China Cloud in Go
DESCRIPTION: Sets up client options for connecting to Azure China cloud and creates a client factory with these options.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armresourceconnector.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Installing Azure Event Grid Go Module
DESCRIPTION: Command to install the Azure Event Grid module using Go modules for dependency management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/eventgrid/armeventgrid/v2

----------------------------------------

TITLE: Installing Azure Event Grid Go Module
DESCRIPTION: Command to install the Azure Event Grid module using Go modules for dependency management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/eventgrid/armeventgrid/v2

----------------------------------------

TITLE: Creating Power BI Embedded Workspace Client
DESCRIPTION: Creates a client instance for working with Power BI Embedded workspaces

LANGUAGE: go
CODE:
client := clientFactory.NewWorkspacesClient()

----------------------------------------

TITLE: Configuring Azure Database for PostgreSQL Client for Sovereign Clouds in Go
DESCRIPTION: Sets up client options for connecting to sovereign clouds or Azure Stack using the arm and azcore packages.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armpostgresql.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Installing Azure Guest Configuration Module
DESCRIPTION: Command to install the Azure Guest Configuration module using Go modules

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/guestconfiguration/armguestconfiguration

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK Go Generation
DESCRIPTION: This YAML configuration specifies the settings for AutoRest to generate the Azure SDK for Go. It includes required API specifications, sets the Azure ARM flag, specifies the license header, module version, and package tag.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/e4991356eec55985c1af47096c9c2091126a7d0f/specification/privatedns/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/e4991356eec55985c1af47096c9c2091126a7d0f/specification/privatedns/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.3.0
tag: package-2024-06

----------------------------------------

TITLE: Creating Service Client Instance
DESCRIPTION: Creates a specific service client instance using the client factory

LANGUAGE: go
CODE:
client := clientFactory.NewAppAttachPackageClient()

----------------------------------------

TITLE: Configuring Client Options for Different Clouds
DESCRIPTION: Sets up client options for connecting to different Azure clouds including sovereign clouds and Azure Stack

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armdns.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Creating Guest Configuration Assignments Client
DESCRIPTION: Instantiates a new assignments client using the client factory

LANGUAGE: go
CODE:
client := clientFactory.NewAssignmentsClient()

----------------------------------------

TITLE: Updating Module Name and Version in Client Constructor
DESCRIPTION: This YAML directive modifies the client constructor in generated files to use internal.ModuleVersion instead of moduleVersion and updates the module name to include '/armiothub'.

LANGUAGE: yaml
CODE:
directive:
  - from:
      - "*_client.go"
      - "client.go"
      - "client_factory.go"
    where: $
    transform: return $.replace(/moduleVersion/, "internal.ModuleVersion").replace(/moduleName+"/, "internal.ModuleName+\"/armiothub");

----------------------------------------

TITLE: Configuring Client Factory with Custom Options
DESCRIPTION: Creates a client factory with custom options for connecting to different Azure clouds.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armmanagedapplications.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: New Function Addition
DESCRIPTION: Addition of new client function for retrieving full URL

LANGUAGE: go
CODE:
New function `*NamespaceTopicEventSubscriptionsClient.GetFullURL(context.Context, string, string, string, string, *NamespaceTopicEventSubscriptionsClientGetFullURLOptions) (NamespaceTopicEventSubscriptionsClientGetFullURLResponse, error)`

----------------------------------------

TITLE: Initializing Azure Credential
DESCRIPTION: Creates a default Azure credential object for authentication with Azure services.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Deleting an Application Group in Go
DESCRIPTION: This code snippet demonstrates how to delete an Application Group using the ApplicationGroupClient in the Azure SDK for Go.

LANGUAGE: go
CODE:
*ApplicationGroupClient.Delete(context.Context, string, string, string, *ApplicationGroupClientDeleteOptions) (ApplicationGroupClientDeleteResponse, error)

----------------------------------------

TITLE: Creating MariaDB Client Factory
DESCRIPTION: Initializes a new client factory for MariaDB operations using subscription ID and credentials

LANGUAGE: go
CODE:
clientFactory, err := armmariadb.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Configuring ClientOptions for Azure Stack or Sovereign Clouds in Go
DESCRIPTION: Sets up client options to connect to specific Azure cloud environments, such as Azure China, using the arm and azcore packages.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armchanges.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Creating Organizations Client
DESCRIPTION: Creates a new Organizations client instance using the client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewOrganizationsClient()

----------------------------------------

TITLE: Configuring AutoRest YAML for Azure Container Registry SDK Generation
DESCRIPTION: YAML configuration for AutoRest tool to generate Azure Container Registry Go SDK. Specifies Azure ARM mode, required API specifications, license header, module version, and API version tag to use.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/300ff7c27c481d7074af06cd95a152aaea80ed2b/specification/containerregistry/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/300ff7c27c481d7074af06cd95a152aaea80ed2b/specification/containerregistry/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.3.0-beta.2
tag: package-2024-11-preview

----------------------------------------

TITLE: Creating an Azure SQL Database Agent Client in Go
DESCRIPTION: This snippet shows how to create a specific client (in this case, an Agent client) using the previously created client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewAgentClient()

----------------------------------------

TITLE: Creating Azure Attestation Providers Client in Go
DESCRIPTION: This code demonstrates how to create a specific client (ProvidersClient) using the previously created client factory. This client can be used to access related APIs.

LANGUAGE: go
CODE:
client := clientFactory.NewProvidersClient()

----------------------------------------

TITLE: Listing Deleted Automation Accounts by Subscription in Go
DESCRIPTION: Lists deleted automation accounts for a given subscription using the DeletedAutomationAccountsClient.

LANGUAGE: go
CODE:
*DeletedAutomationAccountsClient.ListBySubscription(context.Context, *DeletedAutomationAccountsClientListBySubscriptionOptions) (DeletedAutomationAccountsClientListBySubscriptionResponse, error)

----------------------------------------

TITLE: Creating Azure Front Door Endpoints Client
DESCRIPTION: Instantiating an endpoints client using the client factory to access Front Door endpoints API.

LANGUAGE: go
CODE:
client := clientFactory.NewEndpointsClient()

----------------------------------------

TITLE: Creating an Azure Engagement Fabric Accounts Client in Go
DESCRIPTION: This snippet demonstrates how to create a specific client (Accounts Client) using the previously created client factory for Azure Engagement Fabric.

LANGUAGE: go
CODE:
client := clientFactory.NewAccountsClient()

----------------------------------------

TITLE: Adding New Functions in Go
DESCRIPTION: Example of adding new functions to a client in Go.

LANGUAGE: go
CODE:
// New function added to ClientFactory
func (client *ClientFactory) NewGatewaysClient() *GatewaysClient

// New function for GatewaysClient
func NewGatewaysClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*GatewaysClient, error)

// New method for GatewaysClient
func (client *GatewaysClient) BeginCreateOrUpdate(ctx context.Context, resourceGroupName string, gatewayName string, gateway Gateway, options *GatewaysClientBeginCreateOrUpdateOptions) (*runtime.Poller[GatewaysClientCreateOrUpdateResponse], error)

----------------------------------------

TITLE: Configuring Azure Client Options for Different Clouds
DESCRIPTION: Sets up client options for connecting to different Azure clouds including sovereign clouds and Azure Stack

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armkusto.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Configuring Client Factory with Custom Options
DESCRIPTION: Creates a client factory with custom options for connecting to different Azure clouds using ClientOptions.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armpostgresqlflexibleservers.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Installing Azure Trustedsigning Module for Go
DESCRIPTION: This command installs the Azure Trustedsigning module using Go's package manager.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/trustedsigning/armtrustedsigning

----------------------------------------

TITLE: Installing Azure Fabric Go Module
DESCRIPTION: Command to install the Azure Fabric module using Go modules package management system.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/fabric/armfabric

----------------------------------------

TITLE: Installing Azure Recovery Services Module in Go
DESCRIPTION: This command installs the Azure Recovery Services module using Go's package manager. It retrieves the specified version of the module from the Azure SDK for Go repository.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/recoveryservices/armrecoveryservices/v2

----------------------------------------

TITLE: Configuring Client Factory with Custom Options
DESCRIPTION: Create a client factory with custom options for connecting to different Azure clouds.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armstorageimportexport.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Authenticating with Azure Credentials
DESCRIPTION: Creates default Azure credentials for authentication with Azure services using azidentity module

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Installing Azure PaloAltoNetworks SDK Module
DESCRIPTION: Commands for installing the Azure PaloAltoNetworks module using Go modules.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/paloaltonetworksngfw/armpanngfw

----------------------------------------

TITLE: Configuring Client Options for Different Clouds
DESCRIPTION: Sets up client options for connecting to different Azure clouds including sovereign clouds and Azure Stack.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armcommunication.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Creating IoTOperations Service Client
DESCRIPTION: Creates a specific service client for accessing IoTOperations APIs using the client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewBrokerAuthenticationClient()

----------------------------------------

TITLE: Adding Internal Import to Client Files
DESCRIPTION: YAML directive to add an internal import to client-related Go files.

LANGUAGE: yaml
CODE:
directive:
  - from:
      - "*_client.go"
      - "client.go"
      - "client_factory.go"
    where: $
    transform: return $.replace(/import \(\n/, "import (\n\"github.com/Azure/azure-sdk-for-go/profile/p20200901/internal\"\n");

----------------------------------------

TITLE: Configuring Azure Client Options for Different Clouds in Go
DESCRIPTION: Set up client options to connect to different Azure clouds, such as Azure China, using the arm.ClientOptions struct.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armdomainservices.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Creating Default Azure Credential in Go
DESCRIPTION: This code snippet shows how to create a default Azure credential using the azidentity package. This credential is used for authenticating with Azure Policy Insight.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Version History Entry - 0.6.0
DESCRIPTION: Release notes for version 0.6.0 documenting breaking changes and new features

LANGUAGE: markdown
CODE:
## 0.6.0 (2023-02-24)
### Breaking Changes

- Type of `ManagedIdentitySQLControlSettingsModelPropertiesGrantSQLControlToManagedIdentity.DesiredState` has been changed from `*ManagedIdentitySQLControlSettingsModelPropertiesGrantSQLControlToManagedIdentityDesiredState` to `*DesiredState`
- Type of `ManagedIdentitySQLControlSettingsModelPropertiesGrantSQLControlToManagedIdentity.ActualState` has been changed from `*ManagedIdentitySQLControlSettingsModelPropertiesGrantSQLControlToManagedIdentityActualState` to `*ActualState`
[...truncated for brevity...]

----------------------------------------

TITLE: Authenticating with Azure using Default Azure Credential in Go
DESCRIPTION: This snippet demonstrates how to create a default Azure credential for authentication with Azure services.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Configuring Azure Client Options for Different Clouds in Go
DESCRIPTION: This snippet shows how to configure client options for connecting to different Azure clouds, such as Azure China. It uses the arm.ClientOptions struct to set the cloud option.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armresourcemover.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Configuring Azure IoT Security Client Options in Go
DESCRIPTION: Example of configuring client options for Azure IoT Security, including setting the cloud environment to Azure China. This demonstrates how to customize the client factory creation.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armiotsecurity.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Installing Azure resources module in Go
DESCRIPTION: Command to install the Azure resources module using Go modules for dependency management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armchanges

----------------------------------------

TITLE: Initializing Data Lake Store Client Factory
DESCRIPTION: Creates a new client factory for Data Lake Store operations using subscription ID and credentials

LANGUAGE: go
CODE:
clientFactory, err := armdatalakestore.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Configuring AutoRest Parameters for Azure Go SDK Generation
DESCRIPTION: Defines configuration parameters for AutoRest tool to generate Go SDK code from Azure REST API specifications. Specifies the source API specs, license header, module version, and API version tag to use.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/d88c94b22a8efdd47c0cadfe6d8d489107db2b23/specification/appcomplianceautomation/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/d88c94b22a8efdd47c0cadfe6d8d489107db2b23/specification/appcomplianceautomation/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.0.0
tag: package-2024-06

----------------------------------------

TITLE: Installing Azure SQL Database Module in Go
DESCRIPTION: This snippet shows how to install the Azure SQL Database module using Go's package manager.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/sql/armsql/v2

----------------------------------------

TITLE: Creating MariaDB Database Client
DESCRIPTION: Creates a new database client instance using the client factory

LANGUAGE: go
CODE:
client := clientFactory.NewDatabasesClient()

----------------------------------------

TITLE: Authenticating with Azure using Default Azure Credential in Go
DESCRIPTION: Creates a new DefaultAzureCredential object for authenticating with Azure services. This is a common pattern for authentication in Azure SDK for Go.

LANGUAGE: Go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Configuring AutoRest for Azure Policy Insights SDK Generation in YAML
DESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure Policy Insights SDK for Go. It specifies the Azure ARM mode, required API specifications, license header, and module version.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/05a9cdab363b8ec824094ee73950c04594325172/specification/policyinsights/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/05a9cdab363b8ec824094ee73950c04594325172/specification/policyinsights/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 0.8.0

----------------------------------------

TITLE: Installing Azure Device Provisioning Service Module in Go
DESCRIPTION: This snippet demonstrates how to install the Azure Device Provisioning Service module using Go's package manager.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/deviceprovisioningservices/armdeviceprovisioningservices

----------------------------------------

TITLE: Adding New Structs in Go
DESCRIPTION: Example of adding new structs in Go.

LANGUAGE: go
CODE:
// New struct Gateway
type Gateway struct {
    // embedded fields
    Properties *GatewayProperties `json:"properties,omitempty"`
}

// New struct GatewayProperties
type GatewayProperties struct {
    // fields
}

// New struct GatewayUpdate
type GatewayUpdate struct {
    // embedded fields
    Properties *GatewayUpdateProperties `json:"properties,omitempty"`
}

----------------------------------------

TITLE: Starting and Stopping a Recorded Test in Go
DESCRIPTION: Demonstrates how to start and stop a recorded test using the recording package.

LANGUAGE: Go
CODE:
func TestSomething(t *testing.T) {
    err := recording.Start(t, recordingDirectory, nil)
    defer recording.Stop(t, recordingDirectory, nil)

    // Continue test
}

----------------------------------------

TITLE: Starting and Stopping a Recorded Test in Go
DESCRIPTION: Demonstrates how to start and stop a recorded test using the recording package.

LANGUAGE: Go
CODE:
func TestSomething(t *testing.T) {
    err := recording.Start(t, recordingDirectory, nil)
    defer recording.Stop(t, recordingDirectory, nil)

    // Continue test
}

----------------------------------------

TITLE: Configuring Azure Client Options
DESCRIPTION: Example of configuring client options for different Azure clouds including sovereign clouds and Azure Stack

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armpurview.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Installing Azure Extended Location Module
DESCRIPTION: Command to install the Azure Extended Location module using Go modules dependency management

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/extendedlocation/armextendedlocation

----------------------------------------

TITLE: Azure Authentication Setup
DESCRIPTION: Creates a default Azure credential object for authentication with Azure services.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Creating Azure Storage Cache Client Factory
DESCRIPTION: Initializes a client factory for creating Azure Storage Cache clients with subscription ID and credentials.

LANGUAGE: go
CODE:
clientFactory, err := armstoragecache.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Creating Azure Storage Cache Client Factory
DESCRIPTION: Initializes a client factory for creating Azure Storage Cache clients with subscription ID and credentials.

LANGUAGE: go
CODE:
clientFactory, err := armstoragecache.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Configuring Azure Active Directory Client Options in Go
DESCRIPTION: Shows how to set client options, including cloud endpoint configuration, when creating a client factory.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armaad.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Creating HDInsight Service Client
DESCRIPTION: Creates a specific service client for accessing HDInsight Containers APIs using the client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewAvailableClusterPoolVersionsClient()

----------------------------------------

TITLE: Adding Internal Import to Client Files
DESCRIPTION: This YAML directive adds an import statement for the internal package to various client-related files in the generated SDK code.

LANGUAGE: yaml
CODE:
directive:
  - from:
      - "*_client.go"
      - "client.go"
      - "client_factory.go"
    where: $
    transform: return $.replace(/import \(\n/, "import (\n\"github.com/Azure/azure-sdk-for-go/profile/p20200901/internal\"\n");

----------------------------------------

TITLE: Installing Azure Device Update Module
DESCRIPTION: Command to install the Azure Device Update module using Go modules for dependency management

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/deviceupdate/armdeviceupdate

----------------------------------------

TITLE: Version History Entry - 0.8.0
DESCRIPTION: Release notes for version 0.8.0 documenting support for test fakes and OpenTelemetry trace spans

LANGUAGE: markdown
CODE:
## 0.8.0 (2023-11-24)
### Features Added

- Support for test fakes and OpenTelemetry trace spans.

----------------------------------------

TITLE: Authentication with Azure Credentials
DESCRIPTION: Creates a default Azure credential object for authentication with Azure services.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Configuring Azure Marketplace Client for Sovereign Clouds in Go
DESCRIPTION: This snippet shows how to configure the client factory for use with sovereign clouds or Azure Stack. It uses ClientOptions to set the cloud endpoint.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armmarketplace.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Creating Azure IoT Security Client Factory in Go
DESCRIPTION: Code snippet showing how to create a client factory for Azure IoT Security. The factory is initialized with a subscription ID and credential.

LANGUAGE: go
CODE:
clientFactory, err := armiotsecurity.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Configuring Azure Policy Insight Client for Sovereign Clouds in Go
DESCRIPTION: This code shows how to configure the client factory to connect with sovereign clouds or Azure Stack using ClientOptions. It sets the endpoint to Azure China cloud as an example.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armpolicyinsights.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Creating Storage Actions Client Factory - Go
DESCRIPTION: Initializes a client factory for creating Storage Actions service clients using subscription ID and credentials

LANGUAGE: go
CODE:
clientFactory, err := armstorageactions.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK Go Generation
DESCRIPTION: This YAML configuration specifies settings for AutoRest to generate the Azure SDK for Go. It sets the Azure ARM flag, requires specific API specifications, sets the license header, and defines the module version.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/hybridkubernetes/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/hybridkubernetes/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.2.0

----------------------------------------

TITLE: Importing Azure SQL Client Factory
DESCRIPTION: Shows how to create clients for Azure SQL services using the client factory pattern

LANGUAGE: go
CODE:
clientFactory := armsql.NewClientFactory(subscriptionID, credential, nil)

----------------------------------------

TITLE: Creating Azure Management Partner Client in Go
DESCRIPTION: Code snippet demonstrating how to create a specific client using the client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewPartnerClient()

----------------------------------------

TITLE: Creating Azure Migrate Groups Client
DESCRIPTION: Creates a specific client instance for working with Azure Migrate groups using the client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewGroupsClient()

----------------------------------------

TITLE: Configuring Azure DevOps Infrastructure Client for Sovereign Clouds in Go
DESCRIPTION: This snippet shows how to configure the client factory to connect to sovereign clouds or Azure Stack. It uses ClientOptions to set the cloud endpoint.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armdevopsinfrastructure.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Creating Azure M365 Security Client Factory
DESCRIPTION: Initializes a client factory for accessing Azure Directory and Database Infrastructure services

LANGUAGE: go
CODE:
clientFactory, err := armm365securityandcompliance.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Configuring Azure Newrelic Client for Different Clouds
DESCRIPTION: This snippet shows how to configure the Azure Newrelic client factory for different cloud environments, such as Azure China. It uses ClientOptions to set the cloud endpoint.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armnewrelicobservability.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Installing Azure Health Bot Go Module
DESCRIPTION: Command to install the Azure Health Bot module using Go modules package management system.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/healthbot/armhealthbot

----------------------------------------

TITLE: Creating Custom Resource Provider Client
DESCRIPTION: Instantiates a new Custom Resource Provider client using the client factory

LANGUAGE: go
CODE:
client := clientFactory.NewCustomResourceProviderClient()

----------------------------------------

TITLE: Running Migration Script with Docker
DESCRIPTION: Example of running the migration script using Docker container with required git token environment variable

LANGUAGE: powershell
CODE:
$env:GIT_TOKEN="my git token"
cd c:/src/azure-sdk-for-java/sdk/attestation
<path-to-transition-script>/generate-assets-json.ps1 -TestProxyExe "docker" -InitialPush

----------------------------------------

TITLE: Creating Azure SaaS Client Factory
DESCRIPTION: Initializes a client factory for creating Azure SaaS service clients using subscription ID and credentials.

LANGUAGE: go
CODE:
clientFactory, err := armsaas.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Authenticating with Azure DevOps using DefaultAzureCredential in Go
DESCRIPTION: Code snippet demonstrating how to create a default Azure credential for authentication. This is typically used when initializing clients for Azure services.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: New QueryPacks Client Method in Go
DESCRIPTION: Function signature for creating or updating query packs without a name parameter in the Azure Operational Insights SDK.

LANGUAGE: go
CODE:
*QueryPacksClient.CreateOrUpdateWithoutName(context.Context, string, LogAnalyticsQueryPack, *QueryPacksClientCreateOrUpdateWithoutNameOptions) (QueryPacksClientCreateOrUpdateWithoutNameResponse, error)

----------------------------------------

TITLE: Initializing Azure Credential
DESCRIPTION: Creates a default Azure credential object for authentication with Azure services using the azidentity package.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Creating Azure Storage Mover Agents Client in Go
DESCRIPTION: Initializes a new Agents client using the client factory for Azure Storage Mover.

LANGUAGE: go
CODE:
client := clientFactory.NewAgentsClient()

----------------------------------------

TITLE: Removing moduleName and moduleVersion Constants
DESCRIPTION: This YAML directive removes the moduleName and moduleVersion constants from the constants.go file in the generated SDK code.

LANGUAGE: yaml
CODE:
directive:
  - from: constants.go
    where: $
    transform: return $.replace(/const \(\n\s+moduleName.+\n\s+moduleVersion.+\n\)\n/, "");

----------------------------------------

TITLE: Creating SQL Server Client
DESCRIPTION: Example of instantiating a SQL server client using the factory pattern

LANGUAGE: go
CODE:
sqlServerClient := clientFactory.NewServersClient()

----------------------------------------

TITLE: Installing Azure Attestation Module in Go
DESCRIPTION: This command installs the Azure Attestation module using Go's package manager. It requires Go modules for versioning and dependency management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/attestation/armattestation

----------------------------------------

TITLE: Configuring Azure Recoveryservicesdatareplication Client for China Cloud in Go
DESCRIPTION: Demonstrates how to configure the client factory to connect to Azure China cloud using ClientOptions. This allows for flexibility in connecting to different Azure cloud environments.

LANGUAGE: Go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armrecoveryservicesdatareplication.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Installing Azure Compute Fleet Module in Go
DESCRIPTION: This command installs the Azure Compute Fleet module using Go's package manager. It requires Go modules for versioning and dependency management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/computefleet/armcomputefleet

----------------------------------------

TITLE: Creating Azure Time Series Insights Event Sources Client in Go
DESCRIPTION: This code demonstrates how to create a specific client (EventSourcesClient) using the client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewEventSourcesClient()

----------------------------------------

TITLE: Authenticating with Azure Credentials
DESCRIPTION: Creates default Azure credentials for authentication with Azure IoT Hub services using azidentity module.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Creating Management Groups Client
DESCRIPTION: Creates a new Management Groups client instance using the client factory

LANGUAGE: go
CODE:
client := clientFactory.NewClient()

----------------------------------------

TITLE: Installing Azure Impactreporting Module
DESCRIPTION: Command to install the Azure Impactreporting module using Go modules for dependency management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/impactreporting/armimpactreporting

----------------------------------------

TITLE: Configuring Client Factory with Custom Options
DESCRIPTION: Creates a client factory with custom options for connecting to different Azure clouds including sovereign clouds and Azure Stack

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armdatamigration.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Configuring Azure Cloud Options
DESCRIPTION: Sets up client options for connecting to different Azure clouds including sovereign clouds and Azure Stack

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armsignalr.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Creating an Azure Data Manager Service Client Factory in Go
DESCRIPTION: This code creates a client factory for Azure Data Manager Service. It requires a subscription ID and a credential object for authentication.

LANGUAGE: go
CODE:
clientFactory, err := armhybriddatamanager.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Authenticating with Azure Credentials
DESCRIPTION: Creates default Azure credentials for authentication using azidentity module

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Installing Azure DevOps Module in Go
DESCRIPTION: Command to install the Azure DevOps module using Go modules. This snippet shows how to add the module to your Go project.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/devops/armdevops

----------------------------------------

TITLE: Creating Security Insight Actions Client
DESCRIPTION: Creates a new Actions client instance using the client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewActionsClient()

----------------------------------------

TITLE: Configuring Azure Client Options for Different Clouds in Go
DESCRIPTION: Sets up client options to connect to different Azure clouds, including sovereign clouds and Azure Stack.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armservicefabricmanagedclusters.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Installing Azure Hybrid Data Module
DESCRIPTION: Command to install the Azure Hybrid Data module using Go modules package management system.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/azurearcdata/armazurearcdata

----------------------------------------

TITLE: Authenticating with Azure Credentials
DESCRIPTION: Creates default Azure credentials for authentication with Azure services

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Authenticating with Azure using Default Credentials in Go
DESCRIPTION: This snippet demonstrates how to create default Azure credentials for authentication. It uses the azidentity module to provide various authentication methods.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Installing Azure Application Insight Module for Go
DESCRIPTION: This snippet shows how to install the Azure Application Insight module using Go's package manager. It uses the 'go get' command to fetch and install the module.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/applicationinsights/armapplicationinsights/v2

----------------------------------------

TITLE: Creating Storage Import/Export Jobs Client
DESCRIPTION: Create a specific client instance for managing Storage Import/Export jobs using the client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewJobsClient()

----------------------------------------

TITLE: Modifying VisibilityTimeout Parameter in Swagger
DESCRIPTION: YAML directive to change the VisibilityTimeoutRequired parameter to be optional in the Swagger document.

LANGUAGE: yaml
CODE:
directive:
- from: swagger-document
  where: $.parameters.VisibilityTimeoutRequired
  transform: >
    $.required = false;

----------------------------------------

TITLE: Installing Azure Automanage and Azure Identity modules in Go
DESCRIPTION: Commands to install the required Azure SDK modules for Automanage and Identity using Go's package manager.

LANGUAGE: sh
CODE:
go get "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/automanage/armautomanage"
go get "github.com/Azure/azure-sdk-for-go/sdk/azidentity"

----------------------------------------

TITLE: Version 1.0.0 Initial Release
DESCRIPTION: Initial release implementing next generation design principles with breaking changes, includes migration guide reference.

LANGUAGE: markdown
CODE:
## 1.0.0 (2022-05-18)

The package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/powerbiprivatelinks/armpowerbiprivatelinks` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html) since version 1.0.0, which contains breaking changes.

----------------------------------------

TITLE: Installing Azure Data Lake Storage Module
DESCRIPTION: Command to install the Azure Data Lake Storage module using Go modules

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/datalake-store/armdatalakestore

----------------------------------------

TITLE: Creating API Collections Client for Azure Security in Go
DESCRIPTION: This code demonstrates how to create a specific client (APICollectionsClient) using the client factory. This client provides access to a set of related APIs for Azure Security operations.

LANGUAGE: go
CODE:
client := clientFactory.NewAPICollectionsClient()

----------------------------------------

TITLE: Creating Azure Trustedsigning Certificate Profiles Client in Go
DESCRIPTION: This code demonstrates how to create a specific client for certificate profiles using the client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewCertificateProfilesClient()

----------------------------------------

TITLE: Creating Azure Management Groups Client Factory
DESCRIPTION: Initializes a client factory for creating Management Groups clients with default options

LANGUAGE: go
CODE:
clientFactory, err := armmanagementgroups.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Configuring Azure Client Options
DESCRIPTION: Sets up client options for connecting to different Azure clouds including sovereign clouds and Azure Stack

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
client, err := armapicenter.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Authenticating with Azure using Default Credentials in Go
DESCRIPTION: This snippet demonstrates how to create a default Azure credential using the azidentity package. It's used for authenticating with Azure services, including Resource Mover.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Creating Azure Lab Services Client Factory
DESCRIPTION: Initializes a client factory for Azure Lab Services with subscription ID and credentials

LANGUAGE: go
CODE:
clientFactory, err := armdevtestlabs.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Authenticating with Azure Credentials
DESCRIPTION: Creates default Azure credentials for authentication with Azure Health Bot services using azidentity module.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Configuring Client Factory with Custom Options
DESCRIPTION: Creates a client factory with custom options for connecting to different Azure clouds.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armdevhub.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: New Enum Type Addition
DESCRIPTION: Addition of new enum types for custom domain identity and validation

LANGUAGE: go
CODE:
New enum type `CustomDomainIdentityType` with values `CustomDomainIdentityTypeSystemAssigned`, `CustomDomainIdentityTypeUserAssigned`
New enum type `CustomDomainValidationState` with values `CustomDomainValidationStateApproved`, `CustomDomainValidationStateErrorRetrievingDNSRecord`, `CustomDomainValidationStatePending`

----------------------------------------

TITLE: Creating Azure Kubernetes Fleet Auto Upgrade Profiles Client in Go
DESCRIPTION: This code demonstrates how to create a specific client (AutoUpgradeProfilesClient) using the previously created client factory. This client provides access to auto upgrade profile-related APIs.

LANGUAGE: go
CODE:
client := clientFactory.NewAutoUpgradeProfilesClient()

----------------------------------------

TITLE: Configuring Azure Springappdiscovery Client for Sovereign Clouds in Go
DESCRIPTION: This snippet shows how to configure the client factory for use with sovereign clouds or Azure Stack. It uses ClientOptions to set the endpoint for the desired cloud.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armspringappdiscovery.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Installing Azure Liftr Qumulo Module
DESCRIPTION: Command to install the Azure Liftr Qumulo module using Go modules package management

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/liftrqumulo/armqumulo/v2

----------------------------------------

TITLE: Installing Azure Managed Services SDK
DESCRIPTION: Command to install the Azure Managed Services Go module using go get

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/managedservices/armmanagedservices

----------------------------------------

TITLE: Adding New Field in Go Struct
DESCRIPTION: Example of a new field added to an existing struct in version 6.3.0

LANGUAGE: go
CODE:
type CloudServiceVaultCertificate struct {
  // ... existing fields
  IsBootstrapCertificate *bool `json:"isBootstrapCertificate,omitempty"`
}

----------------------------------------

TITLE: New Features in IoT Firmware Defense SDK 1.0.0
DESCRIPTION: New client interfaces and supporting types for managing firmware, crypto certificates, crypto keys, CVEs and other security features.

LANGUAGE: go
CODE:
// New enum types
type SummaryName string
const (
  SummaryNameBinaryHardening SummaryName = "BinaryHardening"
  SummaryNameCVE SummaryName = "CVE"
  SummaryNameCryptoCertificate SummaryName = "CryptoCertificate"
  SummaryNameCryptoKey SummaryName = "CryptoKey"
  SummaryNameFirmware SummaryName = "Firmware"
)

----------------------------------------

TITLE: Deleting AccessConnector in Go
DESCRIPTION: Initiates an asynchronous operation to delete an AccessConnector resource. Returns a Poller for tracking the operation progress.

LANGUAGE: go
CODE:
*AccessConnectorsClient.BeginDelete(context.Context, string, string, *AccessConnectorsClientBeginDeleteOptions) (*runtime.Poller[AccessConnectorsClientDeleteResponse], error)

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK Go Generation
DESCRIPTION: YAML configuration for AutoRest to generate the Azure SDK for Go. It specifies the Azure ARM mode, required API specifications, license header, module version, and other settings for the alerts management package.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/6d2438481021a94793b07b226df06d5f3c61d51d/specification/alertsmanagement/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/6d2438481021a94793b07b226df06d5f3c61d51d/specification/alertsmanagement/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 0.10.0
modelerfour:
  lenient-model-deduplication: true
tag: package-2021-08

----------------------------------------

TITLE: Creating a Specific Azure Authorization Client in Go
DESCRIPTION: This code demonstrates how to create a specific client (PermissionsClient) using the client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewPermissionsClient()

----------------------------------------

TITLE: Installing Azure Windows IoT Module in Go
DESCRIPTION: Command to install the Azure Windows IoT module using Go's package manager. This step is necessary to use the module in your Go project.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/windowsiot/armwindowsiot

----------------------------------------

TITLE: Installing Azure DevOps Infrastructure Module in Go
DESCRIPTION: This command installs the Azure DevOps Infrastructure module using Go's package manager. It requires Go modules for versioning and dependency management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/devopsinfrastructure/armdevopsinfrastructure

----------------------------------------

TITLE: Installing Azure IoTOperations Go Module
DESCRIPTION: Command to install the Azure IoTOperations module using Go modules for dependency management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/iotoperations/armiotoperations

----------------------------------------

TITLE: Go Type Changes in Azure Network Functions SDK
DESCRIPTION: Type modifications in version 2.0.0 affecting CollectorPolicies and SystemData fields along with struct removals.

LANGUAGE: go
CODE:
type AzureTrafficCollectorPropertiesFormat struct {
    CollectorPolicies []*ResourceReference  // Changed from []*CollectorPolicy
}

type CollectorPolicy struct {
    SystemData *TrackedResourceSystemData  // Changed from *CollectorPolicySystemData
    Location string                        // New field
    Tags map[string]string                 // New field
}

----------------------------------------

TITLE: Installing Azure Test Base for M365 Module in Go
DESCRIPTION: This snippet demonstrates how to install the Azure Test Base for M365 module using Go's package manager. It requires Go modules for versioning and dependency management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/testbase/armtestbase

----------------------------------------

TITLE: Creating Azure Purview Accounts Client
DESCRIPTION: Creates a new accounts client instance using the client factory

LANGUAGE: go
CODE:
client := clientFactory.NewAccountsClient()

----------------------------------------

TITLE: Configuring Azure Storage Client Options for Different Clouds in Go
DESCRIPTION: This snippet shows how to set client options to connect with different Azure clouds, including sovereign clouds and Azure Stack.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armstorage.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Creating DNS Forwarding Ruleset Client in Go
DESCRIPTION: Instantiates a new DNS Forwarding Ruleset client using the client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewDNSForwardingRulesetsClient()

----------------------------------------

TITLE: Configuring AutoRest for Azure Resource Manager Go SDK Generation
DESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure Resource Manager Go SDK. It specifies the Azure ARM mode, required API specifications, license header, module version, and package settings.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/91bfc0d02eaed75e6a3bfb5b9b150c84c79400ed/specification/resources/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/91bfc0d02eaed75e6a3bfb5b9b150c84c79400ed/specification/resources/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 2.0.0
package-resources: true
tag: package-resources-2024-11

----------------------------------------

TITLE: Configuring Azure Resource Health Client for Sovereign Clouds in Go
DESCRIPTION: Sets up a client factory with options for connecting to sovereign clouds or Azure Stack.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armresourcehealth.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Creating Pager for Deleted Workbooks in Go
DESCRIPTION: This method creates a new pager for listing deleted workbooks by subscription in the Azure SDK for Go. It returns a runtime.Pager that can be used to iterate through the results.

LANGUAGE: go
CODE:
*DeletedWorkbooksClient.NewListBySubscriptionPager(*DeletedWorkbooksClientListBySubscriptionOptions) *runtime.Pager[DeletedWorkbooksClientListBySubscriptionResponse]

----------------------------------------

TITLE: Installing Azure IoT Hub Module
DESCRIPTION: Command to install the Azure IoT Hub module using Go modules for dependency management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/iothub/armiothub

----------------------------------------

TITLE: Removing moduleName and moduleVersion Constants
DESCRIPTION: YAML directive to remove moduleName and moduleVersion constants from the constants.go file.

LANGUAGE: yaml
CODE:
directive:
  - from: constants.go
    where: $
    transform: return $.replace(/const \(\n\s+moduleName.+\n\s+moduleVersion.+\n\)\n/, "");

----------------------------------------

TITLE: Function Signature Changes in Go SDK
DESCRIPTION: New function signatures added in version 1.2.0 for managing Grafana and private endpoints

LANGUAGE: go
CODE:
NewManagedPrivateEndpointsClient(string, azcore.TokenCredential, *arm.ClientOptions) (*ManagedPrivateEndpointsClient, error)
*GrafanaClient.CheckEnterpriseDetails(context.Context, string, string, *GrafanaClientCheckEnterpriseDetailsOptions) (GrafanaClientCheckEnterpriseDetailsResponse, error)
*GrafanaClient.FetchAvailablePlugins(context.Context, string, string, *GrafanaClientFetchAvailablePluginsOptions) (GrafanaClientFetchAvailablePluginsResponse, error)

----------------------------------------

TITLE: New Build API Functions
DESCRIPTION: Example of new builder client functions added in version 3.1.0-beta.1

LANGUAGE: go
CODE:
NewBuildersClient(string, azcore.TokenCredential, *arm.ClientOptions) (*BuildersClient, error)
*BuildersClient.BeginCreateOrUpdate(context.Context, string, string, BuilderResource, *BuildersClientBeginCreateOrUpdateOptions) (*runtime.Poller[BuildersClientCreateOrUpdateResponse], error)

----------------------------------------

TITLE: Installing Azure Marketplace Module for Go
DESCRIPTION: This command installs the Azure Marketplace module using Go's package manager. It requires Go modules for versioning and dependency management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/marketplace/armmarketplace

----------------------------------------

TITLE: Configuring Azure Client Options for Different Clouds in Go
DESCRIPTION: Example of how to set client options to connect to different Azure clouds, including sovereign clouds and Azure Stack.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armresources.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Installing Azure Container Orchestrator Runtime Module in Go
DESCRIPTION: This command installs the Azure Container Orchestrator Runtime module using Go's package manager.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/containerorchestratorruntime/armcontainerorchestratorruntime

----------------------------------------

TITLE: Configuring Azure RedHat Open Shift Client for Different Clouds in Go
DESCRIPTION: Set up the client factory with options to connect to different Azure clouds, including sovereign clouds and Azure Stack.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armredhatopenshift.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Configuring AutoRest Settings for Azure SDK Go Generation
DESCRIPTION: YAML configuration for AutoRest that specifies Azure ARM mode, required API specifications from Azure REST API specs repository, Microsoft MIT license header requirement, and module version 0.7.0.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/testbase/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/testbase/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 0.7.0

----------------------------------------

TITLE: Initializing Azure Default Credentials
DESCRIPTION: Creates default Azure credentials for authentication with Azure services.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Creating a Data Lake Store Accounts Client in Go
DESCRIPTION: This code demonstrates how to create a specific client (Data Lake Store Accounts) using the previously created client factory. This client provides access to related APIs.

LANGUAGE: go
CODE:
client := clientFactory.NewDataLakeStoreAccountsClient()

----------------------------------------

TITLE: Breaking Change Example in Go
DESCRIPTION: Example of a breaking change in function signature from version 0.3.0

LANGUAGE: go
CODE:
// Old
NewPipelineJobOperationStatusesClient returns (*PipelineJobOperationStatusesClient)

// New
NewPipelineJobOperationStatusesClient returns (*PipelineJobOperationStatusesClient, error)

----------------------------------------

TITLE: Installing Azure Resource Health Module in Go
DESCRIPTION: Command to install the Azure Resource Health module using Go modules.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resourcehealth/armresourcehealth

----------------------------------------

TITLE: Creating New Client Functions in Go
DESCRIPTION: New client functions added in version 4.1.0 for managing routing info and SIM groups.

LANGUAGE: go
CODE:
func (*ClientFactory) NewRoutingInfoClient() *RoutingInfoClient

func NewRoutingInfoClient(string, azcore.TokenCredential, *arm.ClientOptions) (*RoutingInfoClient, error)

func (*RoutingInfoClient) Get(context.Context, string, string, *RoutingInfoClientGetOptions) (RoutingInfoClientGetResponse, error)

func (*RoutingInfoClient) NewListPager(string, string, *RoutingInfoClientListOptions) *runtime.Pager[RoutingInfoClientListResponse]

----------------------------------------

TITLE: Installing Azure Confidential Ledger Module
DESCRIPTION: Command to install the Azure Confidential Ledger module using Go modules.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/confidentialledger/armconfidentialledger

----------------------------------------

TITLE: Creating an Azure Impactreporting Connectors Client
DESCRIPTION: Creates a specific client instance for accessing Azure Impactreporting Connectors API functionality.

LANGUAGE: go
CODE:
client := clientFactory.NewConnectorsClient()

----------------------------------------

TITLE: Authenticating with Azure Credentials
DESCRIPTION: Creates default Azure credentials for authentication using the azidentity module.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Creating Azure Data Box Edge Users Client in Go
DESCRIPTION: Shows how to create a specific client (Users Client) from the client factory. This client can be used to perform operations related to users in Azure Data Box Edge.

LANGUAGE: go
CODE:
client := clientFactory.NewUsersClient()

----------------------------------------

TITLE: Creating Specific Azure Maintenance Client in Go
DESCRIPTION: This code demonstrates how to create a specific client for Apply Update operations on a resource group using the client factory. Each client provides access to a set of related APIs.

LANGUAGE: go
CODE:
client := clientFactory.NewApplyUpdateForResourceGroupClient()

----------------------------------------

TITLE: Configuring AutoRest for Windows IoT Azure SDK Generation
DESCRIPTION: YAML configuration for AutoRest to generate the Windows IoT SDK. Specifies Azure ARM mode, references to API specifications, Microsoft MIT license requirement, and module version 1.2.0.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/windowsiot/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/windowsiot/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.2.0

----------------------------------------

TITLE: Configuring AutoRest Settings for Azure SDK Go Generation
DESCRIPTION: Defines AutoRest configuration parameters for generating Go SDK code from Azure REST API specifications. Specifies the source API specs, licensing, module version, and enables deployment scripts functionality.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/resources/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/resources/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 2.1.0
package-deploymentscripts: true

----------------------------------------

TITLE: Reconciling NetworkSecurityPerimeter Configuration in Go
DESCRIPTION: Initiates an asynchronous operation to reconcile the network security perimeter configuration.

LANGUAGE: Go
CODE:
poller, err := client.BeginReconcileConfiguration(ctx, resourceGroupName, accountName, configurationName, options)

----------------------------------------

TITLE: Breaking Function Parameter Change
DESCRIPTION: Example of function parameter type changes in the Client CreateOrUpdate method.

LANGUAGE: go
CODE:
// Old signature
CreateOrUpdate(context.Context, string, string, string, NotificationHubCreateOrUpdateParameters, *ClientCreateOrUpdateOptions)

// New signature
CreateOrUpdate(context.Context, string, string, string, NotificationHubResource, *ClientCreateOrUpdateOptions)

----------------------------------------

TITLE: Creating Customer Insights Hubs Client
DESCRIPTION: Initialize a new Hubs client instance using the client factory

LANGUAGE: go
CODE:
client := clientFactory.NewHubsClient()

----------------------------------------

TITLE: Creating Customer Insights Hubs Client
DESCRIPTION: Initialize a new Hubs client instance using the client factory

LANGUAGE: go
CODE:
client := clientFactory.NewHubsClient()

----------------------------------------

TITLE: Configuring Azure Service Bus Client Options in Go
DESCRIPTION: Sets up client options for connecting to different Azure clouds including sovereign clouds and Azure Stack.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armservicebus.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Installing Azure CDN Module with Go
DESCRIPTION: Command to install the Azure CDN module using Go modules package management system.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/cdn/armcdn/v2

----------------------------------------

TITLE: Documenting New Features in Markdown for Azure SDK Go Qumulo Module v2.0.0
DESCRIPTION: Describes a new field added to the MarketplaceDetails struct in version 2.0.0.

LANGUAGE: markdown
CODE:
### Features Added

- New field `TermUnit` in struct `MarketplaceDetails`

----------------------------------------

TITLE: Creating an iSCSI Disks Client for Azure StorSimple 1200 Series in Go
DESCRIPTION: This code demonstrates how to create a specific client for iSCSI disk operations using the previously created client factory. This client can be used to perform operations related to iSCSI disks in Azure StorSimple 1200 Series.

LANGUAGE: Go
CODE:
client := clientFactory.NewIscsiDisksClient()

----------------------------------------

TITLE: Breaking Changes in Version 4.0.0
DESCRIPTION: Type changes and removals of structs, fields and functions

LANGUAGE: go
CODE:
// Type changes
ComputeStartStopSchedule.Cron *CronTrigger -> *Cron
ComputeStartStopSchedule.Recurrence *RecurrenceTrigger -> *Recurrence
ComputeStartStopSchedule.TriggerType *TriggerType -> *ComputeTriggerType

// Removed structs
struct AmlOperation
struct AmlOperationDisplay
struct AmlOperationListResult

// Removed fields
Field AmlOperationListResult of struct OperationsClientListResponse
Field SubnetArmID of struct PrivateEndpoint

----------------------------------------

TITLE: Authenticating with Azure using Default Azure Credential in Go
DESCRIPTION: This code demonstrates how to create a default Azure credential for authentication. It uses the azidentity module to provide various authentication methods with Azure.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Configuring Azure Client Options for Different Clouds in Go
DESCRIPTION: This code demonstrates how to set up client options for connecting to different Azure clouds, including sovereign clouds and Azure Stack.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armoperationsmanagement.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Azure Pipeline Resource Management
DESCRIPTION: YAML configuration for managing test resources in Azure Pipelines CI/CD.

LANGUAGE: yaml
CODE:
- template: /eng/common/TestResources/deploy-test-resources.yml
  parameters:
    ServiceDirectory: '${{ parameters.ServiceDirectory }}'

# Run tests

- template: /eng/common/TestResources/remove-test-resources.yml

----------------------------------------

TITLE: Configuring Azure Time Series Insights Client for Sovereign Clouds in Go
DESCRIPTION: This snippet shows how to configure the client factory to connect to sovereign clouds or Azure Stack using ClientOptions.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armtimeseriesinsights.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Configuring AutoRest for Azure Recovery Services Backup SDK Generation
DESCRIPTION: This YAML configuration specifies settings for AutoRest to generate the Azure SDK for Go. It sets the Azure ARM flag, required API specifications, license header, module version, and API version tag.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/33c4457b1d13f83965f4fe3367dca4a6df898100/specification/recoveryservicesbackup/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/33c4457b1d13f83965f4fe3367dca4a6df898100/specification/recoveryservicesbackup/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 4.1.0
tag: package-2024-04

----------------------------------------

TITLE: Installing Azure Edge Order Partner Module
DESCRIPTION: Command to install the Azure Edge Order Partner module using Go modules package management

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/edgeorderpartner/armedgeorderpartner

----------------------------------------

TITLE: Installing Azure Data Manager Service Module for Go
DESCRIPTION: This command installs the Azure Data Manager Service module using Go's package manager. It requires Go modules for versioning and dependency management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/hybriddatamanager/armhybriddatamanager

----------------------------------------

TITLE: Breaking Changes in IoT Firmware Defense SDK 1.0.0
DESCRIPTION: Major type changes converting various flag enums to boolean types and removal of structs and functions in favor of new client structure.

LANGUAGE: go
CODE:
// Type changes
BinaryHardeningFeatures.Canary *bool
BinaryHardeningFeatures.Nx *bool
BinaryHardeningFeatures.Pie *bool
BinaryHardeningFeatures.Relro *bool
BinaryHardeningFeatures.Stripped *bool
CryptoCertificate.IsExpired *bool
CryptoCertificate.IsSelfSigned *bool
CryptoCertificate.IsShortKeySize *bool
CryptoCertificate.IsWeakSignature *bool
CryptoKey.IsShortKeySize *bool
FirmwareProperties.StatusMessages []*StatusMessage

----------------------------------------

TITLE: Installing Azure Data Catalog Module in Go
DESCRIPTION: This command installs the Azure Data Catalog module using Go's package manager. It requires Go modules for versioning and dependency management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/datacatalog/armdatacatalog

----------------------------------------

TITLE: Creating Organizations Client
DESCRIPTION: Creates a new Organizations client instance using the client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewOrganizationsClient()

----------------------------------------

TITLE: Authenticating with Azure using Default Credentials in Go
DESCRIPTION: This snippet demonstrates how to create default Azure credentials for authentication.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Configuring Azure Client Options for Different Clouds
DESCRIPTION: Sets up client options for connecting to different Azure clouds including sovereign clouds and Azure Stack.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armchaos.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Configuring Client Options for Different Clouds
DESCRIPTION: Sets up client options to connect with different Azure clouds including sovereign clouds and Azure Stack.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armwebpubsub.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Installing Azure Resources Module in Go
DESCRIPTION: This snippet shows how to install the Azure Resources module using Go modules.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armdeploymentstacks

----------------------------------------

TITLE: Creating Azure Private 5G Core Client Factory in Go
DESCRIPTION: Initializes a client factory for Azure Private 5G Core services. This factory can be used to create specific clients for different operations within the module.

LANGUAGE: go
CODE:
clientFactory, err := armmobilenetwork.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Installing Azure Customer Lockbox Module
DESCRIPTION: Command to install the Azure Customer Lockbox module using Go modules package manager.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/customerlockbox/armcustomerlockbox

----------------------------------------

TITLE: New Type Declarations in Go
DESCRIPTION: New struct and enum type declarations for Container Service Fleet functionality

LANGUAGE: Go
CODE:
type AutoUpgradeNodeImageSelection struct {}
type AutoUpgradeProfile struct {}
type AutoUpgradeProfileListResult struct {}
type AutoUpgradeProfileProperties struct {}

----------------------------------------

TITLE: New Type Declarations in Go
DESCRIPTION: New struct and enum type declarations for Container Service Fleet functionality

LANGUAGE: Go
CODE:
type AutoUpgradeNodeImageSelection struct {}
type AutoUpgradeProfile struct {}
type AutoUpgradeProfileListResult struct {}
type AutoUpgradeProfileProperties struct {}

----------------------------------------

TITLE: Creating Grafana Client for Azure Dashboard in Go
DESCRIPTION: This snippet shows how to create a Grafana client using the client factory for the Azure Dashboard module.

LANGUAGE: go
CODE:
client := clientFactory.NewGrafanaClient()

----------------------------------------

TITLE: Installing Azure Bot Service Module with Go
DESCRIPTION: Command to install the Azure Bot Service module using Go modules package management

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/botservice/armbotservice

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK Generation in Go
DESCRIPTION: This YAML configuration sets up AutoRest for generating the Azure SDK for Go. It specifies the Azure ARM mode, required API specifications, license header, module version, and API version tag.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/0d41e635294dce73dfa99b07f3da4b68a9c9e29c/specification/graphservicesprod/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/0d41e635294dce73dfa99b07f3da4b68a9c9e29c/specification/graphservicesprod/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.1.0
tag: package-2023-04-13

----------------------------------------

TITLE: Creating ClientFactory Struct in Go for Azure Device Provisioning Services
DESCRIPTION: Introduces a new struct 'ClientFactory' which serves as a client factory for creating any client in the Device Provisioning Services module.

LANGUAGE: Go
CODE:
ClientFactory

----------------------------------------

TITLE: Modifying FileSystemClient Methods
DESCRIPTION: YAML directive to remove pager methods and export various generated methods in the filesystem client.

LANGUAGE: yaml
CODE:
directive:
  - from: zz_filesystem_client.go
    where: $
    transform: >
      return $.
        replace(/func \(client \*FileSystemClient\) NewListBlobHierarchySegmentPager\(.+\/\/ listBlobHierarchySegmentCreateRequest creates the ListBlobHierarchySegment request/s, `//\n// ListBlobHierarchySegmentCreateRequest creates the ListBlobHierarchySegment request`).
        replace(/\(client \*FileSystemClient\) listBlobHierarchySegmentCreateRequest\(/, `(client *FileSystemClient) ListBlobHierarchySegmentCreateRequest(`).
        replace(/\(client \*FileSystemClient\) listBlobHierarchySegmentHandleResponse\(/, `(client *FileSystemClient) ListBlobHierarchySegmentHandleResponse(`);

----------------------------------------

TITLE: Profile Builder File Input Example
DESCRIPTION: Example of using Profile Builder with input from a text file

LANGUAGE: bash
CODE:
cat myProfileDefinition.txt | profileBuilder list

----------------------------------------

TITLE: Initializing ChatTranscriptsClient in Go
DESCRIPTION: Creates a new ChatTranscriptsClient using the provided subscription ID, token credential, and optional client options.

LANGUAGE: go
CODE:
NewChatTranscriptsClient(string, azcore.TokenCredential, *arm.ClientOptions) (*ChatTranscriptsClient, error)

----------------------------------------

TITLE: Installing Azure Neon Postgres Module with Go
DESCRIPTION: Command to install the Azure Neon Postgres module using Go modules dependency management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/neonpostgres/armneonpostgres

----------------------------------------

TITLE: Initializing BackupInstancesExtensionRoutingClient in Go
DESCRIPTION: Creates a new BackupInstancesExtensionRoutingClient using a token credential and optional client options.

LANGUAGE: Go
CODE:
NewBackupInstancesExtensionRoutingClient(azcore.TokenCredential, *arm.ClientOptions) (*BackupInstancesExtensionRoutingClient, error)

----------------------------------------

TITLE: Installing Azure Data Box Edge Module with Go
DESCRIPTION: Command to install the Azure Data Box Edge module using Go's package manager. This step is required to use the module in your Go project.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/databoxedge/armdataboxedge

----------------------------------------

TITLE: Creating SQL Server Instance Client
DESCRIPTION: Creates a new SQL Server Instances client using the previously initialized client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewSQLServerInstancesClient()

----------------------------------------

TITLE: Creating a ClientFactory for Azure Resources in Go
DESCRIPTION: Initializes a new client factory for the Azure Resources module, which can be used to create specific clients.

LANGUAGE: go
CODE:
clientFactory, err := armchanges.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Creating Azure Change Analysis Client in Go
DESCRIPTION: This snippet shows how to create a specific client for Azure Change Analysis using the client factory. It provides access to related APIs for change analysis functionality.

LANGUAGE: go
CODE:
client := clientFactory.NewChangesClient()

----------------------------------------

TITLE: Creating an Azure Machine Learning Services Quotas Client in Go
DESCRIPTION: This code creates a new QuotasClient for Azure Machine Learning Services, using the provided subscription ID and credentials.

LANGUAGE: go
CODE:
client, err := armmachinelearningservices.NewQuotasClient(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Creating Developer Hub Service Client
DESCRIPTION: Instantiates a new Developer Hub service client from the client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewDeveloperHubServiceClient()

----------------------------------------

TITLE: Creating Azure Power BI Private Links Client Factory in Go
DESCRIPTION: Demonstrates how to create a client factory for Azure Power BI Private Links. The factory is used to create specific clients for different API operations.

LANGUAGE: go
CODE:
clientFactory, err := armpowerbiprivatelinks.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Configuring AutoRest Settings for Azure Attestation SDK Generation
DESCRIPTION: Defines the configuration parameters for AutoRest to generate the Azure Attestation SDK. Specifies ARM mode, references the REST API specifications, sets the license header type, and defines the module version as 1.2.0.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/7a2ac91de424f271cf91cc8009f3fe9ee8249086/specification/attestation/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/7a2ac91de424f271cf91cc8009f3fe9ee8249086/specification/attestation/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.2.0

----------------------------------------

TITLE: Creating Azure Maintenance Client Factory in Go
DESCRIPTION: This code creates a client factory for Azure Maintenance services. It requires a subscription ID and credentials. The factory can be used to create specific clients for different maintenance operations.

LANGUAGE: go
CODE:
clientFactory, err := armmaintenance.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Installing Azure Traffic Manager Module in Go
DESCRIPTION: This snippet shows how to install the Azure Traffic Manager module using Go's package manager.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/trafficmanager/armtrafficmanager

----------------------------------------

TITLE: Release Notes - Version 1.0.0
DESCRIPTION: Breaking changes and feature additions in version 1.0.0 including enum renaming and introduction of new types and structs

LANGUAGE: markdown
CODE:
## 1.0.0 (2024-10-22)
### Breaking Changes

- `NetworkAPIVersion20201101` from enum `NetworkAPIVersion` has been renamed to `NetworkAPIVersionV20201101`

### Features Added

- New enum type `AcceleratorManufacturer` with values `AcceleratorManufacturerAMD`, `AcceleratorManufacturerNvidia`, `AcceleratorManufacturerXilinx`
- New enum type `AcceleratorType` with values `AcceleratorTypeFPGA`, `AcceleratorTypeGPU`
- New enum type `ArchitectureType` with values `ArchitectureTypeARM64`, `ArchitectureTypeX64`
- New enum type `CPUManufacturer` with values `CPUManufacturerAMD`, `CPUManufacturerAmpere`, `CPUManufacturerIntel`, `CPUManufacturerMicrosoft`
- New enum type `LocalStorageDiskType` with values `LocalStorageDiskTypeHDD`, `LocalStorageDiskTypeSSD`
- New enum type `VMAttributeSupport` with values `VMAttributeSupportExcluded`, `VMAttributeSupportIncluded`, `VMAttributeSupportRequired`
- New enum type `VMCategory` with values `VMCategoryComputeOptimized`, `VMCategoryFpgaAccelerated`, `VMCategoryGeneralPurpose`, `VMCategoryGpuAccelerated`, `VMCategoryHighPerformanceCompute`, `VMCategoryMemoryOptimized`, `VMCategoryStorageOptimized`

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK Go Generation
DESCRIPTION: This YAML configuration sets up AutoRest for generating the Azure SDK for Go. It specifies the Azure ARM mode, required API specifications, license header, and module version. The configuration points to the Agrifood resource manager specifications.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/a7af6049f4b4743ef3b649f3852bcc7bd9a43ee0/specification/agrifood/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/a7af6049f4b4743ef3b649f3852bcc7bd9a43ee0/specification/agrifood/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 0.9.0

----------------------------------------

TITLE: Installing Azure Time Series Insights Module for Go
DESCRIPTION: This command installs the Azure Time Series Insights module using Go's package manager.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/timeseriesinsights/armtimeseriesinsights

----------------------------------------

TITLE: Adding Deprecation Message to go.mod File in Go
DESCRIPTION: This snippet shows how to add a deprecation message to the go.mod file. The message starts with '// Deprecated: ' followed by migration instructions.

LANGUAGE: go
CODE:
// Deprecated: use github.com/Azure/azure-sdk-for-go/sdk/monitor/ingestion/azlogs instead
module github.com/Azure/azure-sdk-for-go/sdk/monitor/azingest

go 1.18

----------------------------------------

TITLE: Pushing Combined Tags
DESCRIPTION: Final command to push the combined tag results to the test proxy using the assets.json file.

LANGUAGE: bash
CODE:
test-proxy push sdk/storage/azure-storage-blob/assets.json

----------------------------------------

TITLE: Creating Azure Billing Invoices Client
DESCRIPTION: Creates a specific client instance for handling Azure Billing invoice operations.

LANGUAGE: go
CODE:
client := clientFactory.NewInvoicesClient()

----------------------------------------

TITLE: Version 4.0.0 Breaking Changes
DESCRIPTION: Breaking changes and new features introduced in version 4.0.0

LANGUAGE: markdown
CODE:
### Breaking Changes

- Function `*OperationClient.Validate` parameter(s) have been changed
- Function `*ValidateOperationClient.BeginTrigger` parameter(s) have been changed
- Operation `*ProtectionContainersClient.Register` has been changed to LRO

----------------------------------------

TITLE: Configuring Azure Backup Client for China Cloud in Go
DESCRIPTION: This snippet demonstrates how to configure the Azure Backup client factory to connect to the Azure China cloud. It uses ClientOptions to specify the cloud endpoint.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armdataprotection.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Configuring Azure Commerce Client for Sovereign Clouds in Go
DESCRIPTION: This code demonstrates how to configure the Azure Commerce client factory to connect to sovereign clouds or Azure Stack. It uses ClientOptions to set the cloud endpoint.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armcommerce.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Configuring Azure Commerce Client for Sovereign Clouds in Go
DESCRIPTION: This code demonstrates how to configure the Azure Commerce client factory to connect to sovereign clouds or Azure Stack. It uses ClientOptions to set the cloud endpoint.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armcommerce.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Configuring Azure Client with Custom Options
DESCRIPTION: Creates a client factory with custom options for connecting to different Azure clouds

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armm365securityandcompliance.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Authenticating with Azure using Default Credentials in Go
DESCRIPTION: This snippet demonstrates how to create a default Azure credential object for authentication. It uses the azidentity package to handle various authentication methods.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Creating Specific Azure Container Apps Client in Go
DESCRIPTION: This snippet shows how to create a specific client, in this case an AppResiliencyClient, using the previously created client factory. This client can be used to perform operations related to app resiliency in Container Apps.

LANGUAGE: go
CODE:
client := clientFactory.NewAppResiliencyClient()

----------------------------------------

TITLE: Creating Storage Pool Client Factory
DESCRIPTION: Initializes a client factory for creating Storage Pool service clients

LANGUAGE: go
CODE:
clientFactory, err := armstoragepool.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Creating Azure IoT Security Devices Client in Go
DESCRIPTION: Code snippet demonstrating how to create a specific client (Devices client) using the previously created client factory. This client provides access to device-related APIs.

LANGUAGE: go
CODE:
client := clientFactory.NewDevicesClient()

----------------------------------------

TITLE: Configuring AutoRest for Azure Machine Learning Services SDK Generation
DESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure Machine Learning Services SDK for Go. It specifies the ARM mode, required API specifications, license header, module version, and API version tag.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/9778042723206fbc582306dcb407bddbd73df005/specification/machinelearningservices/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/9778042723206fbc582306dcb407bddbd73df005/specification/machinelearningservices/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 4.0.0
tag: package-2024-04

----------------------------------------

TITLE: Release Notes Markdown
DESCRIPTION: Markdown formatted release history showing version changes and feature additions across multiple releases. Documents support for test fakes, OpenTelemetry, and introduction of ClientFactory.

LANGUAGE: markdown
CODE:
# Release History

## 0.3.0 (2023-11-24)
### Features Added

- Support for test fakes and OpenTelemetry trace spans.


## 0.2.0 (2023-03-31)
### Features Added

- New struct `ClientFactory` which is a client factory used to create any client in this module


## 0.1.0 (2022-10-13)

The package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/securitydevops/armsecuritydevops` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html).

To learn more, please refer to our documentation [Quick Start](https://aka.ms/azsdk/go/mgmt).

----------------------------------------

TITLE: Downloading Assets Migration Script - Bash
DESCRIPTION: Downloads the generate-assets-json.ps1 script from Azure SDK tools repository using wget in Bash

LANGUAGE: bash
CODE:
wget https://raw.githubusercontent.com/Azure/azure-sdk-tools/main/eng/common/testproxy/onboarding/generate-assets-json.ps1 -o generate-assets-json.ps1

----------------------------------------

TITLE: Creating Blockchain Members Client
DESCRIPTION: Creates a specific client instance for working with blockchain members using the client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewMembersClient()

----------------------------------------

TITLE: Configuring Azure Quantum Client Options
DESCRIPTION: Demonstrates how to configure client options including cloud endpoints for Azure Quantum clients.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armquantum.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Configuring Azure Automation Client for Sovereign Clouds in Go
DESCRIPTION: This snippet shows how to configure the client factory to connect to sovereign clouds or Azure Stack. It uses ClientOptions to specify the cloud environment.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armautomation.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Creating Client Factory
DESCRIPTION: Initializes a new client factory for Azure Pinecone Vectordb with subscription ID and credentials.

LANGUAGE: go
CODE:
clientFactory, err := armpineconevectordb.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Configuring Azure Client Options for Different Clouds in Go
DESCRIPTION: Example of how to configure client options for connecting to different Azure clouds, such as Azure China. This allows for flexibility in targeting different Azure environments.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armwindowsiot.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Version 2.1.0 Release Notes
DESCRIPTION: Added support for test fakes and OpenTelemetry trace spans.

LANGUAGE: markdown
CODE:
## 2.1.0 (2023-11-24)
### Features Added

- Support for test fakes and OpenTelemetry trace spans.

----------------------------------------

TITLE: Removing 'List' Suffix in Go Source Files
DESCRIPTION: YAML directive to remove the 'List' suffix from 'QueueMessagesList' in Go source files.

LANGUAGE: yaml
CODE:
directive:
  - from: source-file-go
    where: $
    transform: >
      return $.
        replace(/QueueMessagesList/g, "Messages");

----------------------------------------

TITLE: Configuring AutoRest for Azure Redis SDK Generation
DESCRIPTION: YAML configuration for AutoRest tool to generate Azure Redis SDK. Specifies the ARM mode, required API specifications, license header, module version, and API version tag.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/45374f48f560b3337ed55735038f1e9bf8cbea65/specification/redis/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/45374f48f560b3337ed55735038f1e9bf8cbea65/specification/redis/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 3.3.0
tag: package-2024-11

----------------------------------------

TITLE: Creating Bot Service Client
DESCRIPTION: Creates a new Bot Service client instance using the client factory

LANGUAGE: go
CODE:
client := clientFactory.NewBotsClient()

----------------------------------------

TITLE: Installing Azure Blockchain Module
DESCRIPTION: Command to install the Azure Blockchain module using Go modules package management system.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/blockchain/armblockchain

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK Go Generation
DESCRIPTION: This YAML configuration specifies settings for AutoRest to generate the Azure SDK for Go. It includes references to Azure ARM specifications, licensing details, and module versioning information.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/0cc5e2efd6ffccf30e80d1e150b488dd87198b94/specification/resources/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/0cc5e2efd6ffccf30e80d1e150b488dd87198b94/specification/resources/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.2.0
package-changes: true

----------------------------------------

TITLE: Configuring AutoRest Settings for Azure DevTest Labs SDK Generation
DESCRIPTION: YAML configuration that defines parameters for generating Azure DevTest Labs SDK code. Specifies Azure ARM mode, references to API specifications, Microsoft MIT license header requirement, and sets module version to 1.2.0.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/devtestlabs/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/devtestlabs/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.2.0

----------------------------------------

TITLE: Updating CHANGELOG.md with Deprecation Notice in Markdown
DESCRIPTION: This snippet demonstrates how to update the CHANGELOG.md file to include a deprecation notice for the latest version of the module.

LANGUAGE: markdown
CODE:
# Release History

## 0.1.2 (2024-03-13)

### Other Changes
* This module is now DEPRECATED. The latest supported version of this module is at [github.com/Azure/azure-sdk-for-go/sdk/monitor/ingestion/azlogs](https://pkg.go.dev/github.com/Azure/azure-sdk-for-go/sdk/monitor/ingestion/azlogs)

## 0.1.1 (2023-10-11)

----------------------------------------

TITLE: Creating Associations Interface Client
DESCRIPTION: Creates a specific client instance for working with associations interfaces using the client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewAssociationsInterfaceClient()

----------------------------------------

TITLE: Installing Azure Healthcare APIs Module in Go
DESCRIPTION: This command installs the Azure Healthcare APIs module using Go modules for dependency management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/healthcareapis/armhealthcareapis/v2

----------------------------------------

TITLE: Creating Azure Dev Center Client Factory in Go
DESCRIPTION: This snippet demonstrates how to create a client factory for Azure Dev Center. It requires a subscription ID and credentials, and returns a factory object for creating specific clients.

LANGUAGE: go
CODE:
clientFactory, err := armdevcenter.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Configuring Azure Dedicated HSM Client for Sovereign Clouds
DESCRIPTION: This snippet shows how to configure the client factory to connect to sovereign clouds or Azure Stack using ClientOptions.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armhardwaresecuritymodules.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Creating Data Migration Services Client
DESCRIPTION: Creates a specific client instance for accessing Data Migration services using the client factory

LANGUAGE: go
CODE:
client := clientFactory.NewServicesClient()

----------------------------------------

TITLE: Installing Azure Standbypool Module with Go
DESCRIPTION: This command installs the Azure Standbypool module using Go's package manager. It requires Go modules for versioning and dependency management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/standbypool/armstandbypool

----------------------------------------

TITLE: Creating Specific Azure Networkanalytics Client in Go
DESCRIPTION: Code snippet demonstrating how to create a specific client (DataProductsCatalogsClient) using the client factory. This client can be used to interact with specific Azure Networkanalytics APIs.

LANGUAGE: go
CODE:
client := clientFactory.NewDataProductsCatalogsClient()

----------------------------------------

TITLE: Release History Documentation in Markdown
DESCRIPTION: Markdown formatted changelog tracking version history of the Azure OpenAI Assistants SDK for Go, including features, breaking changes, and bug fixes for each release version.

LANGUAGE: markdown
CODE:
# Release History

## 0.3.1 (Unreleased)

### Features Added

### Breaking Changes

### Bugs Fixed

### Other Changes

## 0.3.0 (2024-12-03)

### Features Added

- Added support for the `ParallelToolCalls` option.

### Breaking Changes

- `MessageAttachmentToolAssignment` is now `MessageAttachmentToolDefinition`.

## 0.2.1 (2024-09-10)

### Features Added

- Added support for the `FileSearch` tool definition.
- Added `ChunkingStrategy` to vector store creation APIs.

## 0.2.0 (2024-06-25)

### Features Added

- Now supports the Assistants V2 API, with support for vector stores as well as streaming.

### Breaking Changes

- Assistants V1 is no longer supported in this library. For information about how to migrate between V1 and V2, see OpenAI's migration documentation: [(link)](https://platform.openai.com/docs/assistants/migration).
- Types that were suffixed with `Options` have been changed, if their name would conflict with the options for a method. For example: `AssistantsThreadCreationOptions`, the main argument for `CreateThread()`, has been changed to `CreateThreadBody`.

## 0.1.1 (2024-05-07)

### Bugs Fixed

- ThreadRun.RequiredAction was deserialized incorrectly, making it impossible to actually resubmit a tool output. (PR#22834)
## 0.1.0 (2024-03-05)

* Initial release of the `azopenaiassistants` library

----------------------------------------

TITLE: Configuring Client Factory with Custom Options
DESCRIPTION: Create a client factory with custom options for connecting to different Azure clouds

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armcustomerinsights.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Creating Azure Database for PostgreSQL HSC Servers Client in Go
DESCRIPTION: Example of creating a specific client (ServersClient) using the client factory. This client provides access to server-related APIs.

LANGUAGE: go
CODE:
client := clientFactory.NewServersClient()

----------------------------------------

TITLE: Configuring Client for Different Azure Clouds
DESCRIPTION: Sets up client options for connecting to different Azure cloud environments like Azure China

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armoperationalinsights.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Configuring Client Factory with Custom Options
DESCRIPTION: Creates a client factory with custom options for connecting to different Azure clouds using arm.ClientOptions

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armazuredata.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Installing Azure Managed Network Fabric Module with Go
DESCRIPTION: Command to install the Azure Managed Network Fabric module using Go's package manager.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/managednetworkfabric/armmanagednetworkfabric

----------------------------------------

TITLE: Configuring AutoRest for Azure PowerBI Dedicated Go SDK
DESCRIPTION: YAML configuration for AutoRest to generate the Azure PowerBI Dedicated SDK for Go. It references the PowerBI Dedicated REST API specifications, sets the module version to 1.2.0, and specifies Microsoft MIT license header usage.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/powerbidedicated/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/powerbidedicated/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.2.0

----------------------------------------

TITLE: Version 2.0.0 Breaking Changes
DESCRIPTION: Major version update with significant parameter changes to multiple client functions including PowerBIResources, PrivateEndpointConnections, and PrivateLinkResources clients.

LANGUAGE: markdown
CODE:
## 2.0.0 (2023-04-03)
### Breaking Changes

- Function `NewPowerBIResourcesClient` parameter(s) have been changed from `(string, string, string, azcore.TokenCredential, *arm.ClientOptions)` to `(string, azcore.TokenCredential, *arm.ClientOptions)`
[...]

----------------------------------------

TITLE: Removing 'Queue' Prefix in Go Source Files
DESCRIPTION: YAML directive to remove the 'Queue' prefix from 'QueueGeoReplicationStatus' in Go source files.

LANGUAGE: yaml
CODE:
directive:
  - from: source-file-go
    where: $
    transform: >
      return $.
        replace(/QueueGeoReplicationStatus/g, "GeoReplicationStatus");

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK Go Generation
DESCRIPTION: This YAML configuration sets up AutoRest for generating the Azure SDK for Go. It specifies the Azure ARM flag, required specification files, license header, module version, and API version tag.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/c3cc9abe085093ba880ee3eeb792edb4fa789553/specification/help/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/c3cc9abe085093ba880ee3eeb792edb4fa789553/specification/help/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 2.0.0-beta.5
tag: package-2024-03-01-preview

----------------------------------------

TITLE: Accessing Raw HTTP Response from Azure Key Vault in Go
DESCRIPTION: Example demonstrating how to capture and access the raw HTTP response from Key Vault operations.

LANGUAGE: go
CODE:
import "github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"

var response *http.Response
ctx := runtime.WithCaptureResponse(context.TODO(), &response)
_, err = client.GetSecret(ctx, "secretName", nil)
if err != nil {
    // TODO: handle error
}
// TODO: do something with response

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK Go Generation
DESCRIPTION: Defines configuration parameters for AutoRest to generate Go SDK code from Azure REST API specifications. Specifies the source API specs, license header type, module version, and package tag to use.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/cf5ad1932d00c7d15497705ad6b71171d3d68b1e/specification/fist/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/cf5ad1932d00c7d15497705ad6b71171d3d68b1e/specification/fist/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.0.0
tag: package-2024-01-10

----------------------------------------

TITLE: Removing Module Name and Version Constants
DESCRIPTION: Directive to remove moduleName and moduleVersion constants from the constants.go file.

LANGUAGE: yaml
CODE:
directive:
  - from: constants.go
    where: $
    transform: return $.replace(/const \(\n\s+moduleName.+\n\s+moduleVersion.+\n\)\n/, "");

----------------------------------------

TITLE: Configuring Client Options for Different Clouds
DESCRIPTION: Sets up client options for connecting to different Azure clouds, including sovereign clouds and Azure Stack.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armlabservices.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Creating Azure Springappdiscovery Error Summaries Client in Go
DESCRIPTION: This code demonstrates how to create a specific client (ErrorSummariesClient) using the previously created client factory. This client provides access to a set of related APIs.

LANGUAGE: go
CODE:
client := clientFactory.NewErrorSummariesClient()

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK Go Generation
DESCRIPTION: This YAML configuration specifies settings for AutoRest to generate the Azure SDK for Go. It includes ARM support, references to Azure Active Directory API specifications, licensing details, and module version information.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/7a2ac91de424f271cf91cc8009f3fe9ee8249086/specification/azureactivedirectory/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/7a2ac91de424f271cf91cc8009f3fe9ee8249086/specification/azureactivedirectory/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.2.0

----------------------------------------

TITLE: Adding New Fields to Existing Structs in Go
DESCRIPTION: Example of new fields added to existing structs in version 9.1.0

LANGUAGE: Go
CODE:
type AzurePostgreSQLLinkedServiceTypeProperties struct {
    CommandTimeout             *int32
    Database                   *string
    Encoding                   *string
    Port                       *int32
    ReadBufferSize             *int32
    SSLMode                    *string
    Server                     *string
    Timeout                    *int32
    Timezone                   *string
    TrustServerCertificate     *bool
    Username                   *string
    // existing fields
}

----------------------------------------

TITLE: Running Infinite Send and Receive Test
DESCRIPTION: Command to execute the basic infinite send and receive test that runs for multiple days

LANGUAGE: bash
CODE:
go run . infiniteSendAndReceive

----------------------------------------

TITLE: Removing moduleName and moduleVersion Constants
DESCRIPTION: This YAML directive removes the moduleName and moduleVersion constants from the constants.go file using a regular expression replacement.

LANGUAGE: yaml
CODE:
directive:
  - from: constants.go
    where: $
    transform: return $.replace(/const \(\n\s+moduleName.+\n\s+moduleVersion.+\n\)\n/, "");

----------------------------------------

TITLE: Creating an Azure Databasewatcher Alert Rule Resources Client in Go
DESCRIPTION: This code demonstrates how to create a specific client (AlertRuleResourcesClient) using the previously created client factory. This client provides access to Alert Rule-related APIs.

LANGUAGE: go
CODE:
client := clientFactory.NewAlertRuleResourcesClient()

----------------------------------------

TITLE: Creating Azure Sphere Catalogs Client in Go
DESCRIPTION: This code demonstrates how to create a specific client (Catalogs Client) using the Azure Sphere client factory. This client can be used to perform operations related to Azure Sphere catalogs.

LANGUAGE: go
CODE:
client := clientFactory.NewCatalogsClient()

----------------------------------------

TITLE: Configuring AutoRest Settings for Azure Mobile Network SDK Generation
DESCRIPTION: YAML configuration for AutoRest to generate Azure Mobile Network SDK. Specifies ARM mode, references to API specifications, license header type, module version 4.1.0, and targets package version 2024-04.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/d88c94b22a8efdd47c0cadfe6d8d489107db2b23/specification/mobilenetwork/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/d88c94b22a8efdd47c0cadfe6d8d489107db2b23/specification/mobilenetwork/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 4.1.0
tag: package-2024-04

----------------------------------------

TITLE: Creating Azure Search Admin Keys Client in Go
DESCRIPTION: This code demonstrates how to create a specific client (AdminKeysClient) using the client factory. This client can be used to perform operations related to admin keys in Azure Search.

LANGUAGE: go
CODE:
client := clientFactory.NewAdminKeysClient()

----------------------------------------

TITLE: Configuring AutoRest for Azure Device Update SDK Generation in YAML
DESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure Device Update SDK for Go. It specifies Azure ARM mode, required API specifications, license header, module version, and API version tag.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/b8c74fd80b415fa1ebb6fa787d454694c39e0fd5/specification/deviceupdate/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/b8c74fd80b415fa1ebb6fa787d454694c39e0fd5/specification/deviceupdate/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.3.0
tag: package-2023-07-01

----------------------------------------

TITLE: Creating Hierarchical PartitionKeys in Go for Azure Cosmos DB
DESCRIPTION: API for creating Hierarchical PartitionKeys in the Azure SDK for Go Cosmos DB client. This feature was added in version 1.2.0.

LANGUAGE: markdown
CODE:
* Added API for creating Hierarchical PartitionKeys. See [PR 23577](https://github.com/Azure/azure-sdk-for-go/pull/23577)

----------------------------------------

TITLE: Configuring Azure Client Options for Different Clouds in Go
DESCRIPTION: This code demonstrates how to configure client options for connecting to different Azure clouds, such as Azure China. It sets up ClientOptions with specific cloud settings before creating the client factory.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armreservations.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Creating Alert Processing Rules Client in Go
DESCRIPTION: Initialize a specific client for alert processing rules using the client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewAlertProcessingRulesClient()

----------------------------------------

TITLE: Creating Migration Discovery Client Factory
DESCRIPTION: Initializes a client factory for creating Migration Discovery service clients with basic configuration.

LANGUAGE: go
CODE:
clientFactory, err := armmigrationdiscoverysap.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Creating Azure Policy Client Factory
DESCRIPTION: Initializes a client factory for Azure Resource Policy with subscription ID and credentials.

LANGUAGE: go
CODE:
clientFactory, err := armpolicy.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Creating Azure Connected Cache Client Factory in Go
DESCRIPTION: This code creates a new client factory for Azure Connected Cache operations. It requires a subscription ID and a credential object for authentication.

LANGUAGE: go
CODE:
clientFactory, err := armconnectedcache.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Configuring Azure Client Options for Sovereign Clouds in Go
DESCRIPTION: Example of setting up client options to connect with sovereign clouds or Azure Stack. This uses the arm.ClientOptions struct to specify the cloud environment.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armpostgresqlhsc.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Installing Azure Power BI Dedicated SDK Module
DESCRIPTION: Command to install the Azure Power BI Dedicated module using Go modules for dependency management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/powerbidedicated/armpowerbidedicated

----------------------------------------

TITLE: Configuring AutoRest Settings for Azure Edge Order Partner SDK
DESCRIPTION: YAML configuration for AutoRest that specifies the source API specifications, module version, and license settings for generating the Azure Edge Order Partner SDK for Go. References specific versions of API specs from the azure-rest-api-specs repository.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/edgeorderpartner/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/edgeorderpartner/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 0.7.0

----------------------------------------

TITLE: Authenticating with Azure Using Default Credentials in Go
DESCRIPTION: This code snippet shows how to create a default Azure credential object for authentication. It uses the NewDefaultAzureCredential function from the azidentity package to create a credential that can be used for authenticating with Azure services.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Creating Upload File Request in Azure SDK for Go
DESCRIPTION: This function creates an HTTP POST request for uploading a file to Azure. It sets up the request URL, headers, and multipart form data. The function takes context, file path, file purpose, and options as inputs and returns a policy.Request object or an error.

LANGUAGE: Go
CODE:
// uploadFileCreateRequest creates the UploadFile request.
func (client *Client) uploadFileCreateRequest(ctx context.Context, file string, purpose FilePurpose, options *UploadFileOptions) (*policy.Request, error) {
	urlPath := client.formatURL("/files")
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.SetMultipartFormData(req, map[string]any{
		"file":     file,
		"purpose":  purpose,
		"Filename": options.Filename,
	}); err != nil {
		return nil, err
	}
	return req, nil
}

----------------------------------------

TITLE: Adding Internal Import to Client Files
DESCRIPTION: Directive to add an internal import statement to various client-related Go files.

LANGUAGE: yaml
CODE:
directive:
  - from:
      - "*_client.go"
      - "client.go"
      - "client_factory.go"
    where: $
    transform: return $.replace(/import \(\n/, "import (\n\"github.com/Azure/azure-sdk-for-go/profile/p20200901/internal\"\n");

----------------------------------------

TITLE: Configuring Azure Cloud Options
DESCRIPTION: Sets up client options for connecting to different Azure clouds including sovereign clouds and Azure Stack

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armextendedlocation.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK Generation in YAML
DESCRIPTION: This YAML configuration specifies settings for AutoRest to generate the Azure SDK for Go. It sets the Azure ARM flag, includes required API specifications, defines the license header, and sets the module version.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/c71a66dab813061f1d09982c2748a09317fe0860/specification/securitydevops/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/c71a66dab813061f1d09982c2748a09317fe0860/specification/securitydevops/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 0.3.0

----------------------------------------

TITLE: Creating Azure Edge Order Management Client in Go
DESCRIPTION: This code demonstrates how to create a specific Azure Edge Order management client using the previously created client factory. This client can be used to perform various Edge Order management operations.

LANGUAGE: go
CODE:
client := clientFactory.NewManagementClient()

----------------------------------------

TITLE: Creating Fluidrelay Client Factory
DESCRIPTION: Initializes a new client factory for Azure Fluidrelay services using subscription ID and credentials.

LANGUAGE: go
CODE:
clientFactory, err := armfluidrelay.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Configuring Azure Client Options
DESCRIPTION: Sets up client options for connecting to different Azure clouds including sovereign clouds and Azure Stack.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armpolicy.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Creating Service Linker Client
DESCRIPTION: Instantiates a new Linker client using the client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewLinkerClient()

----------------------------------------

TITLE: Creating API Client Instance
DESCRIPTION: Creates a new API client instance using the client factory to access Edge Order Partner services

LANGUAGE: go
CODE:
client := clientFactory.NewAPISClient()

----------------------------------------

TITLE: Documenting Release 0.3.0 Changes in Markdown
DESCRIPTION: This snippet outlines the breaking changes and new features introduced in version 0.3.0 of the SDK, including changes to operation methods and struct fields.

LANGUAGE: markdown
CODE:
## 0.3.0 (2024-12-27)
### Breaking Changes

- Operation `*NodeTypesClient.Update` has been changed to LRO, use `*NodeTypesClient.BeginUpdate` instead.
- Field `CustomFqdn` of struct `ManagedClusterProperties` has been removed

### Features Added

- New field `AllocatedOutboundPorts` in struct `ManagedClusterProperties`

----------------------------------------

TITLE: Configuring Azure Alerts Management Client for Sovereign Clouds in Go
DESCRIPTION: Set up client options to connect to sovereign clouds or Azure Stack using the arm package.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armalertsmanagement.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Configuring Azure Client Options in Go
DESCRIPTION: This snippet demonstrates how to configure client options, including setting the cloud endpoint for sovereign clouds or Azure Stack.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armdashboard.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Creating Storage Cache Client Instance
DESCRIPTION: Creates a new AML Filesystems client instance using the client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewAmlFilesystemsClient()

----------------------------------------

TITLE: Release History Documentation in Markdown
DESCRIPTION: Markdown formatted changelog documenting version releases from 0.1.0 to 3.1.1, including features added, breaking changes, bug fixes, and other modifications.

LANGUAGE: markdown
CODE:
# Release History

## 3.1.1 (Unreleased)

### Features Added

### Breaking Changes

### Bugs Fixed

### Other Changes

## 3.1.0 (2024-07-19)
### Other Changes
* Use `sdk/internal` credential factory in tests
* Deprecated `testutil.FakeCredential`

## 3.0.0 (2024-05-31)

### Features Added
* Add `StartProxy` to help start and stop build-in test proxy for each module's test.

### Breaking Changes
* Remove `NewRecordingPolicy`, use `GetCredAndClientOptions` directly.

### Other Changes
* Updated dependencies.

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK Generation in YAML
DESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure SDK for Go. It specifies the ARM mode, required specification files from the Azure REST API specs repository, license header type, module version, and the API version tag to use.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/475747ff6322e9bf180b8911d871561b264379c3/specification/workloads/resource-manager/Microsoft.Workloads/SAPDiscoverySites/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/475747ff6322e9bf180b8911d871561b264379c3/specification/workloads/resource-manager/Microsoft.Workloads/SAPDiscoverySites/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 0.1.0
tag: package-preview-2023-10

----------------------------------------

TITLE: Initializing Azure Credentials
DESCRIPTION: Creates default Azure credentials for authentication with Azure services using azidentity module.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Release Notes in Markdown
DESCRIPTION: Markdown formatted changelog entries documenting version history, including feature additions, bug fixes, and breaking changes.

LANGUAGE: markdown
CODE:
# Release History

## 1.2.0 (2023-11-24)
### Features Added

- Support for test fakes and OpenTelemetry trace spans.


## 1.1.1 (2023-04-14)
### Bug Fixes

- Fix serialization bug of empty value of `any` type.


## 1.1.0 (2023-03-31)
### Features Added

- New struct `ClientFactory` which is a client factory used to create any client in this module


## 1.0.0 (2022-05-18)

The package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/healthbot/armhealthbot` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html) since version 1.0.0, which contains breaking changes.

To migrate the existing applications to the latest version, please refer to [Migration Guide](https://aka.ms/azsdk/go/mgmt/migration).

To learn more, please refer to our documentation [Quick Start](https://aka.ms/azsdk/go/mgmt).

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK for Go Generation
DESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure SDK for Go. It specifies Azure ARM mode, required specification files, license header, module version, and the API version tag to use.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/80c21c17b4a7aa57f637ee594f7cfd653255a7e0/specification/kubernetesconfiguration/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/80c21c17b4a7aa57f637ee594f7cfd653255a7e0/specification/kubernetesconfiguration/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 2.2.0
tag: package-2023-05

----------------------------------------

TITLE: Installing Azure Workload Monitor Module for Go
DESCRIPTION: This command installs the Azure Workload Monitor module using Go's package manager. It fetches the module from the Azure SDK for Go repository.

LANGUAGE: Shell
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/workloadmonitor/armworkloadmonitor

----------------------------------------

TITLE: Documentation Notice in Markdown
DESCRIPTION: A markdown notice explaining the proper process for updating the Common Engineering System directory and linking to relevant documentation.

LANGUAGE: markdown
CODE:
# Common Engineering System

Updates under this directory should only be made in the `azure-sdk-tools` repo as any changes under this directory outside of that repo will end up getting overwritten with future updates. For information about making updates see [common engineering system docs](https://github.com/Azure/azure-sdk-tools/blob/main/doc/common/common_engsys.md)

----------------------------------------

TITLE: Configuring AutoRest for Azure Storage Actions Go SDK
DESCRIPTION: YAML configuration that defines the settings for AutoRest to generate Go SDK code for Azure Storage Actions. Specifies the API version, GitHub repository references, licensing, and module versioning.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/b43974e07d3204c4b6f8396627f5430994a7f7c9/specification/storageactions/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/b43974e07d3204c4b6f8396627f5430994a7f7c9/specification/storageactions/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 0.1.0
tag: package-2023-01-01

----------------------------------------

TITLE: Configuring AutoRest for Azure Traffic Manager SDK Generation in Go
DESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure Traffic Manager SDK for Go. It specifies the Azure ARM mode, required API specifications, license header, module version, and API version tag.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/0d41e635294dce73dfa99b07f3da4b68a9c9e29c/specification/trafficmanager/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/0d41e635294dce73dfa99b07f3da4b68a9c9e29c/specification/trafficmanager/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.3.0
tag: package-2022-04

----------------------------------------

TITLE: Renaming createSnapshot to CreateSnapshot in Go Client
DESCRIPTION: YAML directive to rename the 'createSnapshot' function to 'CreateSnapshot' in the generated Go client file. This ensures proper naming convention in the Go code.

LANGUAGE: yaml
CODE:
directive:
- from: zz_azureappconfiguration_client.go
  where: $
  transform: >
    return $.replace(/createSnapshot\(/g, "CreateSnapshot(");

----------------------------------------

TITLE: Configuring Client Factory with Custom Options
DESCRIPTION: Creates a client factory with custom options for connecting to different Azure clouds using ClientOptions.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armkubernetesconfiguration.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Configuring Azure Client Options for Different Clouds in Go
DESCRIPTION: This code shows how to set up client options for connecting to different Azure clouds, including sovereign clouds and Azure Stack. It demonstrates creating a ClientOptions struct with custom cloud settings and using it when creating a new client factory.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armvisualstudio.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Documenting Initial Release in Markdown for Azure SDK Go Qumulo Module v0.1.0
DESCRIPTION: Provides information about the initial release of the Qumulo module, including design principles and documentation links.

LANGUAGE: markdown
CODE:
The package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/liftrqumulo/armqumulo` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html).

To learn more, please refer to our documentation [Quick Start](https://aka.ms/azsdk/go/mgmt).

----------------------------------------

TITLE: Enum Type Definitions in Go SDK
DESCRIPTION: New enum types added in version 1.2.0 for managing various states and configurations

LANGUAGE: go
CODE:
type AvailablePromotion string
type ManagedPrivateEndpointConnectionStatus string
type MarketplaceAutoRenew string
type StartTLSPolicy string

----------------------------------------

TITLE: Configuring Azure Client Options for Different Clouds in Go
DESCRIPTION: This snippet shows how to set client options to connect to different Azure clouds, including sovereign clouds and Azure Stack. It uses the arm.ClientOptions struct to configure the endpoint.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armcontainerservicefleet.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Configuring AutoRest Settings for HANA on Azure SDK Generation
DESCRIPTION: YAML configuration that defines the settings for AutoRest code generation. It specifies Azure ARM mode, points to required API specifications from azure-rest-api-specs repository, sets Microsoft MIT license header without version, and defines module version 0.7.0.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/hanaonazure/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/hanaonazure/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 0.7.0

----------------------------------------

TITLE: Updating Header Names for File Share Usage
DESCRIPTION: YAML directive to update header names related to file share usage in response types and share client files.

LANGUAGE: yaml
CODE:
directive:
- from: 
  - zz_response_types.go
  - zz_share_client.go
  where: $
  transform: >
    return $.
      replaceAll(`XMSFileShareSnapshotUsageBytes`, `FileShareSnapshotUsageBytes`).
      replaceAll(`XMSFileShareUsageBytes`, `FileShareUsageBytes`);

----------------------------------------

TITLE: Configuring Azure Client Options for Different Clouds
DESCRIPTION: Example of configuring client options for connecting to different Azure clouds, such as Azure China.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armserialconsole.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Creating Managed Network Client
DESCRIPTION: Creates a new Managed Network client instance using the client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewManagedNetworksClient()

----------------------------------------

TITLE: Configuring AutoRest for Azure Migrate SDK Generation
DESCRIPTION: YAML configuration for AutoRest tool to generate Go SDK code. Specifies Azure ARM mode, references to REST API specifications, Microsoft MIT license header requirement, and sets module version to 0.1.0.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/dd668996bc8ba729784c02c7a99b6b0042612bb3/specification/migrate/resource-manager/Microsoft.Migrate/AssessmentProjects/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/dd668996bc8ba729784c02c7a99b6b0042612bb3/specification/migrate/resource-manager/Microsoft.Migrate/AssessmentProjects/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 0.1.0

----------------------------------------

TITLE: Configuring Azure Logz Client for Sovereign Clouds
DESCRIPTION: Creates a client factory with custom options for connecting to sovereign clouds like Azure China.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armlogz.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Configuring Client Factory with Custom Options
DESCRIPTION: Creates a client factory with custom options for connecting to different Azure clouds using ClientOptions.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armscvmm.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Initializing Customer Insights Client Factory
DESCRIPTION: Create a new client factory instance for Azure Customer Insights with subscription ID and credentials

LANGUAGE: go
CODE:
clientFactory, err := armcustomerinsights.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Creating StorSimple Client Factory
DESCRIPTION: Initializes a client factory for creating StorSimple service clients using subscription ID and credentials.

LANGUAGE: go
CODE:
clientFactory, err := armstorsimple8000series.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Package Reference Documentation in Markdown
DESCRIPTION: Documentation reference showing the package path and links to additional resources for the Azure SDK for Go SAP Virtual Instance management package.

LANGUAGE: markdown
CODE:
github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/workloadssapvirtualinstance/armworkloadssapvirtualinstance

----------------------------------------

TITLE: Configuring Azure Dynatrace Client for Different Clouds in Go
DESCRIPTION: This snippet shows how to configure the Azure Dynatrace client for different cloud environments. It uses ClientOptions to set the cloud to Azure China, demonstrating how to connect to sovereign clouds or Azure Stack.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armdynatrace.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Authenticating with Azure Using Default Credentials in Go
DESCRIPTION: This snippet demonstrates how to create a default Azure credential for authentication. It uses the azidentity module to provide various authentication methods.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Creating Default Azure Credential in Go
DESCRIPTION: Use the azidentity package to create a default Azure credential for authentication.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Creating Azure Mongocluster Client Factory in Go
DESCRIPTION: This code creates a client factory for Azure Mongocluster services. It requires a subscription ID and credentials. The factory can be used to create specific clients for different Mongocluster operations.

LANGUAGE: go
CODE:
clientFactory, err := armmongocluster.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Adding Internal Import Directive
DESCRIPTION: AutoRest directive to add internal package import to client-related Go files.

LANGUAGE: yaml
CODE:
directive:
  - from:
      - "*_client.go"
      - "client.go"
      - "client_factory.go"
    where: $
    transform: return $.replace(/import \(\n/, "import (\n\"github.com/Azure/azure-sdk-for-go/profile/p20200901/internal\"\n");

----------------------------------------

TITLE: Configuring AutoRest for Azure Purview SDK Generation
DESCRIPTION: Defines the AutoRest configuration parameters for generating the Azure Purview SDK for Go. Specifies the ARM mode, required API specifications, license header type, and module version.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/7a2ac91de424f271cf91cc8009f3fe9ee8249086/specification/purview/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/7a2ac91de424f271cf91cc8009f3fe9ee8249086/specification/purview/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.2.0

----------------------------------------

TITLE: Configuring AutoRest for Azure Service Fabric Mesh SDK Generation in Go
DESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure Service Fabric Mesh SDK for Go. It specifies Azure ARM mode, required API specifications from GitHub, license header type, and the module version.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/servicefabricmesh/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/servicefabricmesh/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 0.6.2

----------------------------------------

TITLE: Creating Azure Addons Client Factory in Go
DESCRIPTION: This code creates a client factory for Azure Addons. It requires a subscription ID and a credential object. The factory can be used to create specific clients for different Azure Addons operations.

LANGUAGE: go
CODE:
clientFactory, err := armaddons.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Configuring Azure Client Options for Different Clouds in Go
DESCRIPTION: This code shows how to configure client options to connect to different Azure clouds, including sovereign clouds and Azure Stack. It uses the arm.ClientOptions struct to set the cloud endpoint.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armtestbase.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Creating Service Tiers Client
DESCRIPTION: Creates a specific client instance for accessing available service tiers functionality

LANGUAGE: go
CODE:
client := clientFactory.NewAvailableServiceTiersClient()

----------------------------------------

TITLE: Authenticating with Azure using Default Credentials in Go
DESCRIPTION: This code snippet demonstrates how to create a default Azure credential object for authentication. It uses the azidentity package to create a DefaultAzureCredential, which can be used for authenticating with Azure services.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK for Go
DESCRIPTION: This YAML configuration sets up AutoRest for generating the Azure SDK for Go. It enables Azure Resource Manager mode, specifies required API specifications, sets the license header, and defines the module version.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/969fd0c2634fbcc1975d7abe3749330a5145a97c/specification/monitor/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/969fd0c2634fbcc1975d7abe3749330a5145a97c/specification/monitor/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 0.11.0

----------------------------------------

TITLE: Fixing GeoReplication Enum in Swagger
DESCRIPTION: YAML directive to modify the GeoReplication definition in the Swagger document, updating the Status property's x-ms-enum.

LANGUAGE: yaml
CODE:
directive:
- from: swagger-document
  where: $.definitions
  transform: >
    delete $.GeoReplication.properties.Status["x-ms-enum"];
    $.GeoReplication.properties.Status["x-ms-enum"] = {
        "name": "QueueGeoReplicationStatus",
        "modelAsString": false
    };

----------------------------------------

TITLE: New Client Factory Implementation
DESCRIPTION: Introduction of ClientFactory struct for creating service clients

LANGUAGE: go
CODE:
// New client factory methods
func (factory *ClientFactory) NewGuestAgentsClient() *GuestAgentsClient
func (factory *ClientFactory) NewVMInstanceHybridIdentityMetadatasClient() *VMInstanceHybridIdentityMetadatasClient

----------------------------------------

TITLE: Creating Azure Datadog Marketplace Agreements Client in Go
DESCRIPTION: This snippet shows how to create a specific client for marketplace agreements using the Azure Datadog client factory. It demonstrates the usage of the factory to access different API functionalities.

LANGUAGE: go
CODE:
client := clientFactory.NewMarketplaceAgreementsClient()

----------------------------------------

TITLE: Configuring Azure Elastic Client for Different Clouds
DESCRIPTION: Sets up client options for connecting to different Azure cloud environments, including sovereign clouds and Azure Stack.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armelastic.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Retrieving an Application Group in Go
DESCRIPTION: This code snippet shows how to retrieve an Application Group using the ApplicationGroupClient in the Azure SDK for Go.

LANGUAGE: go
CODE:
*ApplicationGroupClient.Get(context.Context, string, string, string, *ApplicationGroupClientGetOptions) (ApplicationGroupClientGetResponse, error)

----------------------------------------

TITLE: Creating Scheduled Actions Client
DESCRIPTION: Instantiates a new scheduled actions client using the client factory for accessing compute schedule APIs.

LANGUAGE: go
CODE:
client := clientFactory.NewScheduledActionsClient()

----------------------------------------

TITLE: Configuring Azure SQL Database Client for Sovereign Clouds in Go
DESCRIPTION: This code demonstrates how to configure the client factory to connect with public and sovereign clouds, including Azure Stack, using ClientOptions.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armsql.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Authenticating with Azure Using Default Credentials in Go
DESCRIPTION: Creates a default Azure credential object for authentication with Azure services.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: New Go Function Signatures
DESCRIPTION: Function signatures for new Cost Management Go SDK APIs added in version 2.1.0

LANGUAGE: go
CODE:
NewBenefitRecommendationsClient(azcore.TokenCredential, *arm.ClientOptions) (*BenefitRecommendationsClient, error)
NewBenefitUtilizationSummariesClient(azcore.TokenCredential, *arm.ClientOptions) (*BenefitUtilizationSummariesClient, error)
NewGenerateCostDetailsReportClient(azcore.TokenCredential, *arm.ClientOptions) (*GenerateCostDetailsReportClient, error)

----------------------------------------

TITLE: Configuring Azure Cloud Options
DESCRIPTION: Sets up client options for connecting to different Azure clouds including sovereign clouds

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armmediaservices.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Configuring Azure Client Options
DESCRIPTION: Sets up client options for connecting to different Azure clouds using the arm.ClientOptions configuration.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armazurearcdata.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Configuring AutoRest Settings for EventHub SDK Generation
DESCRIPTION: Base configuration for AutoRest code generation including Azure ARM settings, module specifications, and required API specifications from the azure-rest-api-specs repository.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/53b1affe357b3bfbb53721d0a2002382a046d3b0/specification/eventhub/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/53b1affe357b3bfbb53721d0a2002382a046d3b0/specification/eventhub/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 0.1.0
module-name: profile/p20200901/resourcemanager/eventhub/armeventhub
module: github.com/Azure/azure-sdk-for-go/$(module-name)
output-folder: $(go-sdk-folder)/$(module-name)
tag: profile-hybrid-2020-09-01

----------------------------------------

TITLE: Base AutoRest Configuration for Azure Monitor
DESCRIPTION: Primary configuration for generating Azure Monitor SDK code. Specifies Azure ARM requirements, source specifications, licensing, module details and output configuration.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/53b1affe357b3bfbb53721d0a2002382a046d3b0/specification/monitor/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/53b1affe357b3bfbb53721d0a2002382a046d3b0/specification/monitor/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 0.1.0
module-name: profile/p20200901/resourcemanager/monitor/armmonitor
module: github.com/Azure/azure-sdk-for-go/$(module-name)
output-folder: $(go-sdk-folder)/$(module-name)
tag: profile-hybrid-2020-09-01

----------------------------------------

TITLE: Creating Azure Operations Management Client Factory in Go
DESCRIPTION: This snippet shows how to create a client factory for Azure Operations Management, which can be used to create specific clients.

LANGUAGE: go
CODE:
clientFactory, err := armoperationsmanagement.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Configuring Client Options for Different Clouds
DESCRIPTION: Sets up client options for connecting to different Azure cloud environments including sovereign clouds

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armsecuritydevops.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Configuring AutoRest for Azure HDInsight Go SDK Generation
DESCRIPTION: YAML configuration for AutoRest tool to generate Azure HDInsight SDK for Go. Specifies required API specifications from Azure REST API specs repository, sets module version to 1.3.0-beta.2, and includes a transformation directive for the Resource definition.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/aec83a5f0ed56da4fd16fa027b9fa27edfa8988b/specification/hdinsight/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/aec83a5f0ed56da4fd16fa027b9fa27edfa8988b/specification/hdinsight/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.3.0-beta.2
directive:
- from: cluster.json
  where: $.definitions.Resource
  transform: >
    $["title"] = "Resource"
tag: package-2024-08-preview

----------------------------------------

TITLE: Creating Azure Container Apps Client Factory in Go
DESCRIPTION: This snippet demonstrates how to create a client factory for Azure Container Apps. It requires a subscription ID and a credential object. The factory can be used to create specific clients for different Container Apps operations.

LANGUAGE: go
CODE:
clientFactory, err := armappcontainers.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Parsing RFC3339 Time in Go
DESCRIPTION: Illustrates how to parse an RFC3339 formatted time string using the timeRFC3339 type.

LANGUAGE: Go
CODE:
*timeRFC3339.Parse(string) error

----------------------------------------

TITLE: Authenticating with Azure Credentials
DESCRIPTION: Creates default Azure credentials for authentication using the azidentity package

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Configuring AutoRest for Azure Blob SDK Generation
DESCRIPTION: YAML configuration for AutoRest to generate the Azure Blob SDK for Golang. It specifies input files, output settings, and various options for the code generation process.

LANGUAGE: yaml
CODE:
go: true
clear-output-folder: false
version: "^3.0.0"
license-header: MICROSOFT_MIT_NO_VERSION
input-file: "https://raw.githubusercontent.com/Azure/azure-rest-api-specs/ae95eb6a4701d844bada7d1c4f5ecf4a7444e5b8/specification/storage/data-plane/Microsoft.BlobStorage/stable/2025-01-05/blob.json"
credential-scope: "https://storage.azure.com/.default"
output-folder: ../generated_blob
file-prefix: "zz_"
openapi-type: "data-plane"
verbose: true
security: AzureKey
modeler-four:
  group-parameters: false
  seal-single-value-enum-by-default: true
  lenient-model-deduplication: true
export-clients: true
use: "@autorest/go@4.0.0-preview.65"

----------------------------------------

TITLE: Configuring Azure Client Options for Different Clouds in Go
DESCRIPTION: This snippet shows how to configure client options for connecting to different Azure clouds. It demonstrates setting up options for Azure China cloud, which can be used when creating the client factory.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armcontainerinstance.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Creating Azure Container Instance Client Factory in Go
DESCRIPTION: This code creates a client factory for Azure Container Instance services. It requires a subscription ID and a credential object. The resulting factory can be used to create specific clients for different Container Instance operations.

LANGUAGE: go
CODE:
clientFactory, err := armcontainerinstance.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Union Type Transformations
DESCRIPTION: Combines and transforms various union types for tool choices, response formats and other complex types

LANGUAGE: yaml
CODE:
directive:
  - from: swagger-document
    where: $.definitions
    transform: |
      $.AssistantsApiToolChoiceOption = {
        "x-ms-external": true,
        "type": "object",
        "properties": { "ignored": { "type": "string" } },
        "x-ms-client-name": "AssistantsAPIToolChoiceOption"
      };

----------------------------------------

TITLE: New Enum Type Definitions
DESCRIPTION: New enumeration types added in version 1.0.0 to improve type safety

LANGUAGE: go
CODE:
type ActionType string
const ActionTypeInternal ActionType = "Internal"

type ForceDelete string 
const (
  ForceDeleteFalse ForceDelete = "False"
  ForceDeleteTrue ForceDelete = "True"
)

----------------------------------------

TITLE: Configuring AutoRest Generation Settings for Azure Go SDK
DESCRIPTION: Defines the AutoRest configuration parameters for generating Go SDK code from Azure Resource Manager API specifications. Specifies the source API specs, licensing, versioning, and package settings for the policy package.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/9ec0fcc278aa2128c4fbb2b8a1aa93432d72cce0/specification/resources/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/9ec0fcc278aa2128c4fbb2b8a1aa93432d72cce0/specification/resources/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 0.9.0
package-policy: true
tag: package-policy-2022-06

----------------------------------------

TITLE: Creating Azure Resources Client in Go
DESCRIPTION: This snippet shows how to create a specific client using the client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewClient()

----------------------------------------

TITLE: Updating moduleName and moduleVersion References in Client Constructor
DESCRIPTION: Directive to replace moduleName and moduleVersion references with internal package references in client constructor files.

LANGUAGE: yaml
CODE:
directive:
  - from:
      - "*_client.go"
      - "client.go"
      - "client_factory.go"
    where: $
    transform: return $.replace(/moduleVersion/, "internal.ModuleVersion").replace(/moduleName\+"/, "internal.ModuleName+\"/armdataboxedge");

----------------------------------------

TITLE: Configuring Azure Client Options for Sovereign Clouds in Go
DESCRIPTION: This snippet shows how to configure client options for connecting to sovereign clouds or Azure Stack.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armnetworkfunction.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Creating or Updating a Container Group Profile in Go
DESCRIPTION: Illustrates how to create or update a Container Group Profile using the ContainerGroupProfilesClient in the Azure SDK for Go. This method allows for configuring and deploying Container Group Profiles.

LANGUAGE: Go
CODE:
*ContainerGroupProfilesClient.CreateOrUpdate(context.Context, string, string, ContainerGroupProfile, *ContainerGroupProfilesClientCreateOrUpdateOptions) (ContainerGroupProfilesClientCreateOrUpdateResponse, error)

----------------------------------------

TITLE: Creating Azure Credential in Go
DESCRIPTION: This snippet demonstrates how to create a default Azure credential using the azidentity package. This credential is used for authenticating with Azure services.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Configuring Azure Search Client for Sovereign Clouds in Go
DESCRIPTION: This snippet shows how to configure the Azure Search client to connect to sovereign clouds or Azure Stack. It uses ClientOptions to set the cloud endpoint.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armsearch.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Configuring AutoRest Settings for Azure SDK Generation
DESCRIPTION: Defines AutoRest configuration parameters including API specification sources, licensing, module version, and package tag. References specific versions of Azure REST API specifications and Go-specific configuration files.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/d4205894880b989ede35d62d97c8e901ed14fb5a/specification/liftrastronomer/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/d4205894880b989ede35d62d97c8e901ed14fb5a/specification/liftrastronomer/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 0.1.0
tag: package-2023-08-01

----------------------------------------

TITLE: Adding New OrganizationsClient Function in Go
DESCRIPTION: New function added for OrganizationsClient to get Elastic to Azure subscription mapping.

LANGUAGE: Go
CODE:
*OrganizationsClient.GetElasticToAzureSubscriptionMapping(context.Context, *OrganizationsClientGetElasticToAzureSubscriptionMappingOptions) (OrganizationsClientGetElasticToAzureSubscriptionMappingResponse, error)

----------------------------------------

TITLE: Creating Marketplace Agreements Client in Go
DESCRIPTION: Code snippet demonstrating how to create a specific client (MarketplaceAgreementsClient) from the client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewMarketplaceAgreementsClient()

----------------------------------------

TITLE: Changing CORS Acronym to All Caps
DESCRIPTION: YAML directive to change the 'Cors' acronym to 'CORS' in all generated Go files.

LANGUAGE: yaml
CODE:
directive:
  - from: source-file-go
    where: $
    transform: >
      return $.
        replace(/Cors/g, "CORS");

----------------------------------------

TITLE: Converting ShareUsageBytes to int64
DESCRIPTION: YAML directive to convert ShareUsageBytes from int32 to int64 in the generated models.

LANGUAGE: yaml
CODE:
directive:
  - from: zz_models.go
    where: $
    transform: >
      return $.
        replace(/ShareUsageBytes\s+\*int32/g, `ShareUsageBytes *int64`);

----------------------------------------

TITLE: Executing Tag Merge Script in PowerShell
DESCRIPTION: Example command showing how to run the merge-proxy-tags script from the repository root to combine multiple proxy tags. The script takes an assets.json file path and multiple tag names as parameters.

LANGUAGE: powershell
CODE:
cd "path/to/language/repo/root"
./eng/common/testproxy/scripts/tag-merge/merge-proxy-tags.ps1 sdk/storage/azure-storage-blob/assets.json integration/example/storage_feature_addition2 integration/example/storage_feature_addition1

----------------------------------------

TITLE: Configuring Azure Client Options for Different Clouds in Go
DESCRIPTION: This code demonstrates how to set client options to connect to different Azure clouds, including sovereign clouds and Azure Stack.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armtrafficmanager.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: HDInsight Client Library Function Declarations - Go
DESCRIPTION: New function declarations for the ExtensionsClient type, including methods for managing Azure Monitor Agent and retrieving its status.

LANGUAGE: go
CODE:
func (client *ExtensionsClient) BeginDisableAzureMonitorAgent(context.Context, string, string, *ExtensionsClientBeginDisableAzureMonitorAgentOptions) (*runtime.Poller[ExtensionsClientDisableAzureMonitorAgentResponse], error)

func (client *ExtensionsClient) BeginEnableAzureMonitorAgent(context.Context, string, string, AzureMonitorRequest, *ExtensionsClientBeginEnableAzureMonitorAgentOptions) (*runtime.Poller[ExtensionsClientEnableAzureMonitorAgentResponse], error)

func (client *ExtensionsClient) GetAzureMonitorAgentStatus(context.Context, string, string, *ExtensionsClientGetAzureMonitorAgentStatusOptions) (ExtensionsClientGetAzureMonitorAgentStatusResponse, error)

----------------------------------------

TITLE: Creating Azure Kubernetes Configuration Client Factory
DESCRIPTION: Initializes a client factory for creating Azure Kubernetes Configuration clients with basic configuration.

LANGUAGE: go
CODE:
clientFactory, err := armkubernetesconfiguration.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Configuring AutoRest for Azure Service Fabric Managed Clusters SDK Generation in YAML
DESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure Service Fabric Managed Clusters SDK for Go. It specifies the Azure ARM mode, required API specifications, license header, module version, and package tag.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/069a65e8a6d1a6c0c58d9a9d97610b7103b6e8a5/specification/servicefabricmanagedclusters/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/069a65e8a6d1a6c0c58d9a9d97610b7103b6e8a5/specification/servicefabricmanagedclusters/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 0.3.0
tag: package-2024-09-preview

----------------------------------------

TITLE: Adding Internal Import to Generated Client Files
DESCRIPTION: This YAML directive adds an internal import to the generated client files, including *_client.go, client.go, and client_factory.go.

LANGUAGE: yaml
CODE:
directive:
  - from:
      - "*_client.go"
      - "client.go"
      - "client_factory.go"
    where: $
    transform: return $.replace(/import \(\n/, "import (\n\"github.com/Azure/azure-sdk-for-go/profile/p20200901/internal\"\n");

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK Go Generation
DESCRIPTION: This YAML configuration sets up AutoRest for generating the Azure SDK for Go. It specifies the Azure ARM mode, required API specifications, license header, and module version for the Resource Graph service.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/resourcegraph/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/resourcegraph/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 0.9.0

----------------------------------------

TITLE: Configuring SDK Generation Input in JSON
DESCRIPTION: JSON configuration for the SDK generation process. It specifies the local spec folder, repository information, and related Typespec project folders.

LANGUAGE: json
CODE:
{
  "dryRun": false,
  "specFolder": "LOCAL_AZURE-REST-API-SPECS_REPO_ROOT",
  "headSha": "SHA_OF_AZURE-REST-API-SPECS_REPO",
  "repoHttpsUrl": "https://github.com/Azure/azure-rest-api-specs",
  "relatedTypeSpecProjectFolder": [
    "specification/SERVICE_DIRECTORY_NAME/PACKAGE_DIRECTORY_NAME/"
  ]
}

----------------------------------------

TITLE: Configuring Azure Load Testing Client for Sovereign Clouds in Go
DESCRIPTION: Sets up client options for connecting to sovereign clouds or Azure Stack.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armloadtesting.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Creating Azure Peering Service Client Factory in Go
DESCRIPTION: Initialize a client factory for Azure Peering Service using the subscription ID and credentials.

LANGUAGE: go
CODE:
clientFactory, err := armpeering.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Creating Storage Account with Azure CLI
DESCRIPTION: Example command to create a new Azure Storage Account using the Azure CLI.

LANGUAGE: powershell
CODE:
az storage account create --name MyStorageAccount --resource-group MyResourceGroup --location westus --sku Standard_LRS

----------------------------------------

TITLE: Creating Azure Resource Mover Client Factory in Go
DESCRIPTION: This code creates a client factory for Azure Resource Mover. It requires a subscription ID and a credential object. The factory can be used to create specific clients for Resource Mover operations.

LANGUAGE: go
CODE:
clientFactory, err := armresourcemover.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Configuring AutoRest for Azure Data Factory Go SDK Generation
DESCRIPTION: YAML configuration for AutoRest that defines the settings for generating the Azure Data Factory SDK for Go. Specifies the API version as package-2018-06, requires the Azure REST API specs from GitHub, and sets the module version to 9.1.0.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/ab04533261eff228f28e08900445d0edef3eb70c/specification/datafactory/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/ab04533261eff228f28e08900445d0edef3eb70c/specification/datafactory/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 9.1.0
tag: package-2018-06

----------------------------------------

TITLE: Creating ListPager for BackupInstancesExtensionRoutingClient in Go
DESCRIPTION: Creates a new ListPager for the BackupInstancesExtensionRoutingClient to iterate through list results.

LANGUAGE: Go
CODE:
*BackupInstancesExtensionRoutingClient.NewListPager(string, *BackupInstancesExtensionRoutingClientListOptions) *runtime.Pager[BackupInstancesExtensionRoutingClientListResponse]

----------------------------------------

TITLE: Installing Azure Migrate Module with Go
DESCRIPTION: Command to install the Azure Migrate module using Go modules for dependency management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/migrate/armmigrate

----------------------------------------

TITLE: Installing Azure Mongocluster Module in Go
DESCRIPTION: This command installs the Azure Mongocluster module using Go's package manager. It retrieves the module from the specified GitHub repository.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/mongocluster/armmongocluster

----------------------------------------

TITLE: Configuring Azure Client Options
DESCRIPTION: Sets up client options for connecting to different Azure clouds including sovereign clouds and Azure Stack.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armfabric.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Configuring TypeSpec Location for Azure OpenAI Client Generation
DESCRIPTION: YAML configuration file specifying the source location and commit for generating the Azure OpenAI client from TypeSpec definitions. Points to a specific commit in the azure-rest-api-specs repository.

LANGUAGE: yaml
CODE:
# ie: https://github.com/Azure/azure-rest-api-specs/tree/1e243e2b0d0d006599dcb64f82fd92aecc1247be/specification/cognitiveservices/OpenAI.Inference
directory: specification/cognitiveservices/OpenAI.Inference
commit: 1e243e2b0d0d006599dcb64f82fd92aecc1247be
repo: Azure/azure-rest-api-specs

----------------------------------------

TITLE: Renaming FileHttpHeaders and Updating Property Names
DESCRIPTION: YAML directive to rename FileHttpHeaders to ShareFileHTTPHeaders and remove the 'file' prefix from its properties.

LANGUAGE: yaml
CODE:
directive:
- from: swagger-document
  where: $.parameters
  transform: >
    $.FileCacheControl["x-ms-parameter-grouping"].name = "share-file-http-headers";
    $.FileCacheControl["x-ms-client-name"] = "cacheControl";
    $.FileContentDisposition["x-ms-parameter-grouping"].name = "share-file-http-headers";
    $.FileContentDisposition["x-ms-client-name"] = "contentDisposition";
    $.FileContentEncoding["x-ms-parameter-grouping"].name = "share-file-http-headers";
    $.FileContentEncoding["x-ms-client-name"] = "contentEncoding";
    $.FileContentLanguage["x-ms-parameter-grouping"].name = "share-file-http-headers";
    $.FileContentLanguage["x-ms-client-name"] = "contentLanguage";
    $.FileContentMD5["x-ms-parameter-grouping"].name = "share-file-http-headers";
    $.FileContentMD5["x-ms-client-name"] = "contentMd5";
    $.FileContentType["x-ms-parameter-grouping"].name = "share-file-http-headers";
    $.FileContentType["x-ms-client-name"] = "contentType";

----------------------------------------

TITLE: Continuing After Conflict Resolution
DESCRIPTION: Example of continuing the cherry-pick operation after resolving merge conflicts. Shows the successful commit message after conflict resolution.

LANGUAGE: bash
CODE:
git cherry-pick --continue

----------------------------------------

TITLE: Configuring Client Options for Different Clouds
DESCRIPTION: Sets up client options for connecting to different Azure cloud environments including sovereign clouds

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armqumulo.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Azure IoT Hub SDK Release Notes
DESCRIPTION: Markdown formatted release history documenting version changes from 1.0.0 to 1.3.0, including new features, bug fixes, and breaking changes.

LANGUAGE: markdown
CODE:
# Release History

## 1.3.0 (2023-11-24)
### Features Added

- Support for test fakes and OpenTelemetry trace spans.


## 1.2.0 (2023-09-22)
### Features Added

- New struct `RoutingCosmosDBSQLAPIProperties`
- New field `CosmosDBSQLContainers` in struct `RoutingEndpoints`


## 1.1.1 (2023-04-14)
### Bug Fixes

- Fix serialization bug of empty value of `any` type.


## 1.1.0 (2023-03-31)
### Features Added

- New struct `ClientFactory` which is a client factory used to create any client in this module


## 1.0.0 (2022-05-17)

The package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/iothub/armiothub` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html) since version 1.0.0, which contains breaking changes.

To migrate the existing applications to the latest version, please refer to [Migration Guide](https://aka.ms/azsdk/go/mgmt/migration).

To learn more, please refer to our documentation [Quick Start](https://aka.ms/azsdk/go/mgmt).

----------------------------------------

TITLE: Creating Extended Location Client Factory
DESCRIPTION: Initializes a client factory for creating Extended Location service clients using subscription ID and credentials

LANGUAGE: go
CODE:
clientFactory, err := armextendedlocation.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Creating a ContainerGroupProfileClient in Go
DESCRIPTION: Demonstrates how to create a new ContainerGroupProfileClient using the Azure SDK for Go. This client is used to interact with Container Group Profiles in Azure Container Instances.

LANGUAGE: Go
CODE:
NewContainerGroupProfileClient(string, azcore.TokenCredential, *arm.ClientOptions) (*ContainerGroupProfileClient, error)

----------------------------------------

TITLE: Installing Azure Resource Links Module
DESCRIPTION: Command to install the Azure Resource Links module using Go modules dependency management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armlinks

----------------------------------------

TITLE: Configuring Metrics Batch Query Client Generation for Azure SDK for Go
DESCRIPTION: YAML configuration for generating the Metrics Batch Query client in the Azure SDK for Go. It specifies the input file and includes directives for renaming operations, models, and customizing field names.

LANGUAGE: yaml
CODE:
title: Metrics Batch Query Client
input-file: https://github.com/Azure/azure-rest-api-specs/blob/21f5332f2dc7437d1446edf240e9a3d4c90c6431/specification/monitor/data-plane/Microsoft.Insights/preview/2023-05-01-preview/metricBatch.json

directive:
  # rename Batch to QueryBatch
  - rename-operation:
        from: MetricsBatch_Batch
        to: MetricsBatch_QueryBatch

  # Rename MetricResultsResponse
  - rename-model:
      from: MetricResultsResponse
      to: MetricResults
  - from: 
        - models.go
        - models_serde.go
    where: $
    transform: return $.replace(/MetricResultsValuesItem/g, "MetricValues");
  - from: swagger-document
    where: $.definitions.MetricResults.properties.values.items
    transform: $["description"] = "Metric data values."

  # fix casing, rename batch metric fields
  - from: swagger-document
    where: $.parameters.StartTimeParameter
    transform: $["x-ms-client-name"] = "StartTime"
  - from: swagger-document
    where: $.parameters.EndTimeParameter
    transform: $["x-ms-client-name"] = "EndTime"
  - from: swagger-document
    where: $.definitions.ResourceIdList.properties.resourceids
    transform: $["x-ms-client-name"] = "ResourceIDs"
  - from: swagger-document
    where: $.definitions.MetricResults.properties.values.items.properties.starttime
    transform: $["x-ms-client-name"] = "StartTime"
  - from: swagger-document
    where: $.definitions.MetricResults.properties.values.items.properties.endtime
    transform: $["x-ms-client-name"] = "EndTime"
  - from: swagger-document
    where: $.definitions.MetricResults.properties.values.items.properties.resourceid
    transform: $["x-ms-client-name"] = "ResourceID"
  - from: swagger-document
    where: $.definitions.MetricResults.properties.values.items.properties.resourceregion
    transform: $["x-ms-client-name"] = "ResourceRegion"
  - from: swagger-document
    where: $.definitions.MetricResults.properties.values.items.properties.value
    transform: $["x-ms-client-name"] = "Values"

  # delete unused error models
  - from: models.go
    where: $
    transform: return $.replace(/((?:\/\/.*\s)+|)type AdditionalInfoErrorResponse.+\{(?:\s.+\s)+\}\s/g, "");
  - from: models_serde.go
    where: $
    transform: return $.replace(/(?:\/\/.*\s)+func \(\w \*?AdditionalInfoErrorResponse.*\{\s(?:.+\s)+\}\s/g, "");

----------------------------------------

TITLE: Creating Azure Reservations Client Factory in Go
DESCRIPTION: This snippet shows how to create a client factory for Azure Reservations. It initializes a new ClientFactory object using the subscription ID and credential, which can then be used to create specific clients for different Azure Reservations operations.

LANGUAGE: go
CODE:
clientFactory, err := armreservations.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Renaming SnapshotFieldsEtag to SnapshotFieldsETag in Go Constants
DESCRIPTION: YAML directive to rename 'SnapshotFieldsEtag' to 'SnapshotFieldsETag' in the generated Go constants file. This ensures proper capitalization of the 'ETag' acronym.

LANGUAGE: yaml
CODE:
directive:
- from: zz_constants.go
  where: $
  transform: >
    return $.replace(/SnapshotFieldsEtag/g, "SnapshotFieldsETag");

----------------------------------------

TITLE: Parameter Location and Deployment Transformations
DESCRIPTION: Configures parameter locations and transforms deployment ID parameters to be client-level parameters.

LANGUAGE: yaml
CODE:
directive:
  - from: swagger-document
    where: $["x-ms-parameterized-host"].parameters.0
    transform: $["x-ms-parameter-location"] = "client";
  - from: swagger-document
    where: $.paths..parameters..[?(@.name=='deploymentId')]
    transform: $["x-ms-parameter-location"] = "client";

----------------------------------------

TITLE: Configuring AutoRest for Azure Support SDK Generation in YAML
DESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure Support SDK for Go. It specifies Azure ARM mode, required specification files, license header, module version, and API version tag.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/106483d9f698ac3b6c0d481ab0c5fab14152e21f/specification/support/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/106483d9f698ac3b6c0d481ab0c5fab14152e21f/specification/support/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.3.0
tag: package-2024-04

----------------------------------------

TITLE: Creating Azure Kubernetes Fleet Client Factory in Go
DESCRIPTION: This code creates a client factory for Azure Kubernetes Fleet. It requires a subscription ID and credentials. The factory can be used to create specific clients within the module.

LANGUAGE: go
CODE:
clientFactory, err := armcontainerservicefleet.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Queue Service Constants
DESCRIPTION: Constants used for queue service authentication and configuration

LANGUAGE: go
CODE:
const (
	accountName   = "MYSTORAGEACCOUNT"
	accountKey    = "ACCOUNT_KEY"
	queueName     = "samplequeue"
)

----------------------------------------

TITLE: Configuring Client Factory with Custom Options
DESCRIPTION: Creates a client factory with custom options for connecting to different Azure clouds using ClientOptions

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armresourcegraph.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Configuring AutoRest for Azure Data Migration Go SDK
DESCRIPTION: YAML configuration for AutoRest to generate the Azure Data Migration SDK for Go. Specifies ARM mode, required API specifications, license header, module version 1.2.0, and targets the 2021-06 API version package.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/163e27c0ca7570bc39e00a46f255740d9b3ba3cb/specification/datamigration/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/163e27c0ca7570bc39e00a46f255740d9b3ba3cb/specification/datamigration/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.2.0
tag: package-2021-06

----------------------------------------

TITLE: New Client Function Declarations in Go
DESCRIPTION: New client factory and service client function declarations for Container Service Fleet management

LANGUAGE: Go
CODE:
NewAutoUpgradeProfilesClient(string, azcore.TokenCredential, *arm.ClientOptions) (*AutoUpgradeProfilesClient, error)
*AutoUpgradeProfilesClient.BeginCreateOrUpdate(context.Context, string, string, string, AutoUpgradeProfile, *AutoUpgradeProfilesClientBeginCreateOrUpdateOptions) (*runtime.Poller[AutoUpgradeProfilesClientCreateOrUpdateResponse], error)
*AutoUpgradeProfilesClient.BeginDelete(context.Context, string, string, string, *AutoUpgradeProfilesClientBeginDeleteOptions) (*runtime.Poller[AutoUpgradeProfilesClientDeleteResponse], error)

----------------------------------------

TITLE: Upgrading SDK Major Version
DESCRIPTION: Commands for upgrading to the latest major version of the SDK using gomajor tool

LANGUAGE: sh
CODE:
go install github.com/icholy/gomajor@latest
gomajor get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute@latest

----------------------------------------

TITLE: Configuring AutoRest YAML Settings for Azure Billing Benefits SDK
DESCRIPTION: Defines AutoRest configuration parameters for generating Go SDK code from Azure Billing Benefits REST API specifications. Specifies Azure ARM mode, required API specification sources, license header type, and module version.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/f790e624d0d080b89d962a3bd19c65bc6a6b2f5e/specification/billingbenefits/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/f790e624d0d080b89d962a3bd19c65bc6a6b2f5e/specification/billingbenefits/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 2.1.0

----------------------------------------

TITLE: Removing Module Constants Directive
DESCRIPTION: AutoRest directive to remove moduleName and moduleVersion constants from the generated constants.go file.

LANGUAGE: yaml
CODE:
directive:
  - from: constants.go
    where: $
    transform: return $.replace(/const \(\n\s+moduleName.+\n\s+moduleVersion.+\n\)\n/, "");

----------------------------------------

TITLE: Base Configuration for OpenAI SDK Generation
DESCRIPTION: Defines core configuration settings for generating the OpenAI SDK including input/output paths, module name, and basic options.

LANGUAGE: yaml
CODE:
input-file:
  - ./testdata/generated/openapi.json
output-folder: ../azopenai
clear-output-folder: false
module: github.com/Azure/azure-sdk-for-go/sdk/ai/azopenai
license-header: MICROSOFT_MIT_NO_VERSION
openapi-type: data-plane
go: true
use: "@autorest/go@4.0.0-preview.63"
title: "OpenAI"
slice-elements-byval: true
rawjson-as-bytes: true

----------------------------------------

TITLE: Authenticating with Azure Active Directory in Go
DESCRIPTION: Shows how to create a default Azure credential for authentication with Azure Active Directory.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Configuring Azure Data Catalog Client for Different Clouds in Go
DESCRIPTION: This snippet shows how to configure the client factory for different Azure clouds or Azure Stack. It uses ClientOptions to set the endpoint for the desired cloud.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armdatacatalog.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Deleting a Container Group Profile in Go
DESCRIPTION: Demonstrates the deletion of a Container Group Profile using the ContainerGroupProfilesClient in the Azure SDK for Go. This operation removes the specified profile from Azure Container Instances.

LANGUAGE: Go
CODE:
*ContainerGroupProfilesClient.Delete(context.Context, string, string, *ContainerGroupProfilesClientDeleteOptions) (ContainerGroupProfilesClientDeleteResponse, error)

----------------------------------------

TITLE: Initializing Video Analyzers Client in Go
DESCRIPTION: This code creates a new Video Analyzers client using the provided subscription ID and credential. It's used to access Video Analyzer APIs within the specified subscription.

LANGUAGE: go
CODE:
client, err := armvideoanalyzer.NewVideoAnalyzersClient(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Add Internal Package Import Directive
DESCRIPTION: AutoRest directive to add an import statement for the internal package in multiple client-related source files.

LANGUAGE: yaml
CODE:
directive:
  - from:
      - "*_client.go"
      - "client.go"
      - "client_factory.go"
    where: $
    transform: return $.replace(/import \(\n/, "import (\n\"github.com/Azure/azure-sdk-for-go/profile/p20200901/internal\"\n");

----------------------------------------

TITLE: Installing Azure Reservations Module in Go
DESCRIPTION: This snippet shows how to install the Azure Reservations module using Go's package manager. It uses the 'go get' command to fetch and install the module from the specified GitHub repository.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/reservations/armreservations/v3

----------------------------------------

TITLE: Verifying Azure Developer CLI Authentication and Token Retrieval
DESCRIPTION: These commands check the current configuration of the Azure Developer CLI and attempt to obtain an access token. They can be used to troubleshoot AzureDeveloperCLICredential authentication issues.

LANGUAGE: sh
CODE:
azd config list
azd auth token --output json --scope https://management.core.windows.net/.default

----------------------------------------

TITLE: Creating Azure Alerts Management Client Factory in Go
DESCRIPTION: Initialize a client factory for Azure Alerts Management using subscription ID and credentials.

LANGUAGE: go
CODE:
clientFactory, err := armalertsmanagement.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Version 0.1.0 Release Notes
DESCRIPTION: Initial release notes for version 0.1.0, released on April 26, 2024. Introduces next generation design principles implementation.

LANGUAGE: markdown
CODE:
## 0.1.0 (2024-04-26)
### Other Changes

The package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/deviceregistry/armdeviceregistry` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html).

----------------------------------------

TITLE: Configuring Client Options for Different Clouds
DESCRIPTION: Setting up client options to connect to different Azure clouds including sovereign clouds and Azure Stack

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armworkloadssapvirtualinstance.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Creating Azure Purview Client Factory
DESCRIPTION: Initializes a client factory for creating Azure Purview service clients

LANGUAGE: go
CODE:
clientFactory, err := armpurview.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK Go Generation
DESCRIPTION: This YAML configuration specifies settings for AutoRest to generate the Azure SDK for Go. It sets the azure-arm flag, includes required API specifications, defines the license header, and sets the module version.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/163e27c0ca7570bc39e00a46f255740d9b3ba3cb/specification/customer-insights/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/163e27c0ca7570bc39e00a46f255740d9b3ba3cb/specification/customer-insights/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.2.0

----------------------------------------

TITLE: Installing Azure Logic Apps Module in Go
DESCRIPTION: This snippet demonstrates how to install the Azure Logic Apps module using the go get command. It requires Go modules for versioning and dependency management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/logic/armlogic

----------------------------------------

TITLE: Anonymous Object Naming
DESCRIPTION: Assigns proper names to anonymous objects in operation definitions, particularly for paging operations

LANGUAGE: yaml
CODE:
directive:
  - from: swagger-document
    where: $.paths
    transform: |
      $["/assistants"].get.responses["200"].schema["x-ms-client-name"] = "AssistantsPage";
      const threadsBase = '/threads/{threadId}';
      $[threadsBase + "/messages"].get.responses["200"].schema["x-ms-client-name"] = "ThreadMessagesPage";
      $[threadsBase + "/runs"].get.responses["200"].schema["x-ms-client-name"] = "ThreadRunsPage";

----------------------------------------

TITLE: Authenticating with Azure using Default Credentials in Go
DESCRIPTION: Example of creating a default Azure credential for authentication. This uses the azidentity package to create a credential that can be used with Azure services.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Configuring Azure Client Options for Different Clouds in Go
DESCRIPTION: This snippet shows how to configure client options for connecting to different Azure clouds, including sovereign clouds and Azure Stack. It uses the arm.ClientOptions struct.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armoep.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Creating Azure Kusto Database Configuration Client
DESCRIPTION: Creates a new client instance for managing attached database configurations

LANGUAGE: go
CODE:
client := clientFactory.NewAttachedDatabaseConfigurationsClient()

----------------------------------------

TITLE: Compiling Query in Azure Stream Analytics SDK for Go
DESCRIPTION: Compiles a Stream Analytics query using the SubscriptionsClient.

LANGUAGE: Go
CODE:
*SubscriptionsClient.CompileQuery(context.Context, string, CompileQuery, *SubscriptionsClientCompileQueryOptions) (SubscriptionsClientCompileQueryResponse, error)

----------------------------------------

TITLE: Initializing Azure Credentials
DESCRIPTION: Creates default Azure credentials for authentication with Azure services

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Updating Module References Directive
DESCRIPTION: AutoRest directive to update moduleName and moduleVersion references to use internal package constants in client files.

LANGUAGE: yaml
CODE:
directive:
  - from:
      - "*_client.go"
      - "client.go"
      - "client_factory.go"
    where: $
    transform: return $.replace(/moduleVersion/, "internal.ModuleVersion").replace(/moduleName+"/, "internal.ModuleName+\"/armeventhub");

----------------------------------------

TITLE: Creating Azure Commerce Rate Card Client in Go
DESCRIPTION: This snippet shows how to create a specific client (RateCardClient) using the previously created client factory. This client can be used to access rate card related APIs in Azure Commerce.

LANGUAGE: go
CODE:
client := clientFactory.NewRateCardClient()

----------------------------------------

TITLE: Configuring AutoRest Settings for Azure SDK Generation
DESCRIPTION: Defines the configuration parameters for AutoRest to generate Go SDK code for Azure Automanage services. Specifies the source API specifications, licensing, and module versioning requirements.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/2dcad6d6e9a96882eb6d317e7500a94be007a9c6/specification/automanage/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/2dcad6d6e9a96882eb6d317e7500a94be007a9c6/specification/automanage/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.2.0

----------------------------------------

TITLE: Creating Azure RedHat Open Shift Client Factory in Go
DESCRIPTION: Initialize a client factory for Azure RedHat Open Shift services using the subscription ID and credentials.

LANGUAGE: go
CODE:
clientFactory, err := armredhatopenshift.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Updating Module References Directive
DESCRIPTION: AutoRest directive to update moduleName and moduleVersion references to use internal package constants in client files.

LANGUAGE: yaml
CODE:
directive:
  - from:
      - "*_client.go"
      - "client.go"
      - "client_factory.go"
    where: $
    transform: return $.replace(/moduleVersion/, "internal.ModuleVersion").replace(/moduleName+"/, "internal.ModuleName+\"/armeventhub");

----------------------------------------

TITLE: Parameter Location and Type Transformations
DESCRIPTION: Fixes deployment and endpoint parameter locations and resolves TypeSpec generation issues with polymorphic types

LANGUAGE: yaml
CODE:
directive:
  - from: swagger-document
    where: $["x-ms-parameterized-host"].parameters.0
    transform: $["x-ms-parameter-location"] = "client";

  - from: swagger-document
    where: $.definitions.ThreadRun.properties.required_action
    transform: |
      $["$ref"] = "#/definitions/RequiredAction"
      delete $["allOf"];
      return $;

----------------------------------------

TITLE: Creating a Client Factory for Azure Playwrighttesting in Go
DESCRIPTION: This snippet demonstrates how to create a client factory for Azure Playwrighttesting. The factory is used to create various clients within the module.

LANGUAGE: go
CODE:
clientFactory, err := armplaywrighttesting.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Version 0.2.0 Release Notes
DESCRIPTION: Details extensive breaking changes and new features in version 0.2.0, released on December 11, 2024. Includes type changes, enum removals, and new functionality additions.

LANGUAGE: markdown
CODE:
## 0.2.0 (2024-12-11)
### Breaking Changes

- Type of `AssetProperties.Version` has been changed from `*int32` to `*int64`
[...additional content truncated for brevity...]

----------------------------------------

TITLE: Configuring Azure Client Options for Different Clouds in Go
DESCRIPTION: This snippet shows how to configure client options to connect to different Azure clouds, such as Azure China. It uses the arm.ClientOptions struct to set the cloud option.

LANGUAGE: Go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
client, err := armworkloadmonitor.NewHealthMonitorsClient(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Creating Power BI Dedicated Client Factory
DESCRIPTION: Initializes a client factory for creating Power BI Dedicated service clients using subscription ID and credentials.

LANGUAGE: go
CODE:
clientFactory, err := armpowerbidedicated.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK Go Generation
DESCRIPTION: This YAML configuration sets up AutoRest for generating the Azure SDK for Go. It specifies the Azure ARM mode, required API specifications, license header, module version, and API version tag.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/4883fa5dbf6f2c9093fac8ce334547e9dfac68fa/specification/desktopvirtualization/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/4883fa5dbf6f2c9093fac8ce334547e9dfac68fa/specification/desktopvirtualization/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 2.3.0
tag: package-2024-04

----------------------------------------

TITLE: Installing Azure Load Testing Module in Go
DESCRIPTION: Command to install the Azure Load Testing module using Go modules.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/loadtesting/armloadtesting

----------------------------------------

TITLE: Configuring Go SDK Generation Settings
DESCRIPTION: Base configuration for generating Go SDK code from OpenAPI spec. Specifies input/output paths, module name, and generation parameters for Azure OpenAI extensions.

LANGUAGE: yaml
CODE:
input-file:
- ./testdata/generated/openapi.json
output-folder: ../azopenaiextensions
clear-output-folder: false
module: github.com/Azure/azure-sdk-for-go/sdk/ai/azopenaiextensions
license-header: MICROSOFT_MIT_NO_VERSION
openapi-type: data-plane
go: true
use: "@autorest/go@4.0.0-preview.63"
title: "OpenAI"
slice-elements-byval: true
rawjson-as-bytes: true

----------------------------------------

TITLE: Authenticating with Azure Using Default Credentials in Go
DESCRIPTION: This snippet demonstrates how to create default Azure credentials for authentication using the azidentity package.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Configuring Client Options for Different Clouds
DESCRIPTION: Demonstrates how to configure client options for connecting to different Azure clouds including sovereign clouds and Azure Stack.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armsynapse.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK Generation
DESCRIPTION: YAML configuration file that defines the settings for AutoRest code generation. References Azure REST API specifications, sets the license header, module version, and specifies the package tag for managed applications.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/5fb045bd44f143bae17da2e01552ae531f77d0ba/specification/solutions/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/5fb045bd44f143bae17da2e01552ae531f77d0ba/specification/solutions/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 2.1.0
tag: package-managedapplications-2021-07

----------------------------------------

TITLE: Configuring AutoRest for Azure StorSimple 1200 Series SDK Generation
DESCRIPTION: YAML configuration for AutoRest that specifies the input specifications, Azure ARM mode, licensing, and module version for generating the StorSimple 1200 Series SDK. References specific versions of Azure REST API specifications from GitHub.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/163e27c0ca7570bc39e00a46f255740d9b3ba3cb/specification/storSimple1200Series/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/163e27c0ca7570bc39e00a46f255740d9b3ba3cb/specification/storSimple1200Series/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.2.0

----------------------------------------

TITLE: Displaying Help for Event Hubs Processor Test in Go
DESCRIPTION: This command shows how to display the help information for the Processor test, which includes additional options and flags that can be used to control the test parameters.

LANGUAGE: bash
CODE:
go run . processor --help

----------------------------------------

TITLE: Creating Azure Recoveryservicesdatareplication Client Factory in Go
DESCRIPTION: Initializes a new client factory for Azure Recoveryservicesdatareplication using the subscription ID and credentials. This factory can be used to create specific clients for different operations.

LANGUAGE: Go
CODE:
clientFactory, err := armrecoveryservicesdatareplication.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Initializing VariablesClient in Go
DESCRIPTION: Creates a new VariablesClient using the provided endpoint, credentials, and options.

LANGUAGE: Go
CODE:
NewVariablesClient(string, azcore.TokenCredential, *arm.ClientOptions) (*VariablesClient, error)

----------------------------------------

TITLE: Creating Azure Appcomplianceautomation Client Factory in Go
DESCRIPTION: This code creates a client factory for Azure Appcomplianceautomation, which can be used to create specific clients for different operations.

LANGUAGE: Go
CODE:
clientFactory, err := armappcomplianceautomation.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Configuring AutoRest Settings for Azure SDK Generation
DESCRIPTION: Defines AutoRest configuration parameters for generating Azure SDK for Go. Specifies Azure ARM mode, references to API specifications, license header type, and module version. Required for automated SDK code generation process.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/visualstudio/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/visualstudio/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 0.6.0

----------------------------------------

TITLE: Initializing Client Factory
DESCRIPTION: Create a client factory for Azure Private Edge Zone services using subscription ID and credentials.

LANGUAGE: go
CODE:
clientFactory, err := armhybridnetwork.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Configuring AutoRest YAML Settings for Azure Security Insights Go SDK
DESCRIPTION: Defines AutoRest configuration parameters for generating Azure Security Insights SDK. References specific API specification versions, sets module version to 2.0.0-beta.4, and configures Azure ARM-specific settings.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/6c4f3c695f0250dcb261598a62004f0aef10b9db/specification/securityinsights/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/6c4f3c695f0250dcb261598a62004f0aef10b9db/specification/securityinsights/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 2.0.0-beta.4
tag: package-preview-2022-09

----------------------------------------

TITLE: Adding New BillingInfoClient Functions in Go
DESCRIPTION: New functions added for BillingInfoClient including creation, retrieval, and factory methods.

LANGUAGE: Go
CODE:
NewBillingInfoClient(string, azcore.TokenCredential, *arm.ClientOptions) (*BillingInfoClient, error)
*BillingInfoClient.Get(context.Context, string, string, *BillingInfoClientGetOptions) (BillingInfoClientGetResponse, error)
*ClientFactory.NewBillingInfoClient() *BillingInfoClient

----------------------------------------

TITLE: Configuring Azure Client Options for Different Clouds in Go
DESCRIPTION: Sets up client options to connect to different Azure clouds, such as Azure China, using the arm.ClientOptions struct.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armlargeinstance.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Configuring Client Factory with Custom Options
DESCRIPTION: Creates a client factory with custom options for connecting to different Azure clouds.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armservicelinker.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Updating Module References in Client Constructor
DESCRIPTION: Directive to replace module version and name references with internal package constants in client files.

LANGUAGE: yaml
CODE:
directive:
  - from:
      - "*_client.go"
      - "client.go"
      - "client_factory.go"
    where: $
    transform: return $.replace(/moduleVersion/, "internal.ModuleVersion").replace(/moduleName+"/, "internal.ModuleName+\"/armdns");

----------------------------------------

TITLE: Running Event Hubs Processor Test in Go
DESCRIPTION: This command demonstrates how to run a Processor test to receive events using the Event Hubs stress test tool. It uses the 'go run' command to execute the main program with the 'processor' argument.

LANGUAGE: bash
CODE:
go run . processor

----------------------------------------

TITLE: Authenticating with Azure Credentials
DESCRIPTION: Creates default Azure credentials for authentication using the azidentity module.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Configuring Client Options for Different Clouds
DESCRIPTION: Demonstrates how to configure client options for connecting to different Azure clouds including sovereign clouds

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armsqlvirtualmachine.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Adding New Functions for SignalR Client in Go
DESCRIPTION: New functions added to the SignalR Client for managing replicas, including listing SKUs, creating/updating replicas, and performing operations on replicas.

LANGUAGE: Go
CODE:
NewReplicasClient(string, azcore.TokenCredential, *arm.ClientOptions) (*ReplicasClient, error)

LANGUAGE: Go
CODE:
*ReplicasClient.BeginCreateOrUpdate(context.Context, string, string, string, Replica, *ReplicasClientBeginCreateOrUpdateOptions) (*runtime.Poller[ReplicasClientCreateOrUpdateResponse], error)

LANGUAGE: Go
CODE:
*ReplicasClient.Delete(context.Context, string, string, string, *ReplicasClientDeleteOptions) (ReplicasClientDeleteResponse, error)

LANGUAGE: Go
CODE:
*ReplicasClient.Get(context.Context, string, string, string, *ReplicasClientGetOptions) (ReplicasClientGetResponse, error)

LANGUAGE: Go
CODE:
*ReplicasClient.NewListPager(string, string, *ReplicasClientListOptions) *runtime.Pager[ReplicasClientListResponse]

LANGUAGE: Go
CODE:
*ReplicasClient.BeginRestart(context.Context, string, string, string, *ReplicasClientBeginRestartOptions) (*runtime.Poller[ReplicasClientRestartResponse], error)

LANGUAGE: Go
CODE:
*ReplicasClient.BeginUpdate(context.Context, string, string, string, Replica, *ReplicasClientBeginUpdateOptions) (*runtime.Poller[ReplicasClientUpdateResponse], error)

----------------------------------------

TITLE: Creating Azure Astro Organizations Client
DESCRIPTION: Creates a client instance for accessing Organizations-related APIs using the client factory

LANGUAGE: go
CODE:
client := clientFactory.NewOrganizationsClient()

----------------------------------------

TITLE: Configuring Azure Client Options
DESCRIPTION: Sets up client options for connecting to different Azure clouds including sovereign clouds and Azure Stack.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armbillingbenefits.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK Go Generation
DESCRIPTION: This YAML configuration sets up AutoRest for generating Azure SDK Go code. It specifies Azure ARM mode, required API specifications, license header, module version, and package tag.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/8a287afb3721dee0d88f11502ec123470bc52a28/specification/redisenterprise/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/8a287afb3721dee0d88f11502ec123470bc52a28/specification/redisenterprise/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 2.1.0-beta.2
tag: package-preview-2024-09

----------------------------------------

TITLE: Creating Specific Azure Container Orchestrator Runtime Client in Go
DESCRIPTION: This code demonstrates how to create a specific client for Azure Container Orchestrator Runtime services using the client factory.

LANGUAGE: go
CODE:
client := clientFactory.{{NewClientName}}()

----------------------------------------

TITLE: Creating Azure Recovery Services Site Recovery Client Factory in Go
DESCRIPTION: Initializes a client factory for Azure Recovery Services Site Recovery using a subscription ID and credential.

LANGUAGE: go
CODE:
clientFactory, err := armrecoveryservicessiterecovery.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Running Migration Script with Test-Proxy
DESCRIPTION: Example of running the migration script from within a service directory using the test-proxy tool directly

LANGUAGE: powershell
CODE:
cd "<target-language-repo>/sdk/<service>"
<path-to-transition-script>/generate-assets-json.ps1

----------------------------------------

TITLE: Support for TextMarshaler and TextUnmarshaler in ResourceID
DESCRIPTION: Added support for encoding.TextMarshaler and encoding.TextUnmarshaler interfaces in arm.ResourceID.

LANGUAGE: Go
CODE:
// Using TextMarshaler
id := arm.ResourceID{...}
text, err := id.MarshalText()

// Using TextUnmarshaler
var id arm.ResourceID
err := id.UnmarshalText([]byte(text))

----------------------------------------

TITLE: Creating Azure Nginx Client Factory
DESCRIPTION: Initializes a client factory for Azure Nginx services using subscription ID and credentials.

LANGUAGE: go
CODE:
clientFactory, err := armnginx.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Installing Azure Data Box Module with Go
DESCRIPTION: This command installs the Azure Data Box module using Go's package manager. It retrieves the specified version of the module from the Azure SDK for Go repository.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/databox/armdatabox/v2

----------------------------------------

TITLE: Creating Azure Default Credential in Go
DESCRIPTION: This snippet demonstrates how to create a default Azure credential using the azidentity package. This credential is used for authenticating with Azure services.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Creating an Azure Data Manager Service Client in Go
DESCRIPTION: This code demonstrates how to create a specific client (DataManagersClient) using the previously created client factory. This client provides access to a set of related APIs.

LANGUAGE: go
CODE:
client := clientFactory.NewDataManagersClient()

----------------------------------------

TITLE: Configuring AutoRest for Azure Resource Mover SDK Generation
DESCRIPTION: YAML configuration that defines the parameters for AutoRest code generation. It specifies Azure ARM mode, required API specifications, license header type, module version 1.3.0, and targets the 2023-08-01 API version package.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/3066a973f4baf2e2bf072a013b585a820bb10146/specification/resourcemover/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/3066a973f4baf2e2bf072a013b585a820bb10146/specification/resourcemover/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.3.0
tag: package-2023-08-01

----------------------------------------

TITLE: Configuring Azure Client Options for Different Clouds in Go
DESCRIPTION: Sets up client options to connect to different Azure clouds, such as Azure China. This example demonstrates how to customize the client factory creation with specific cloud settings.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armmobilenetwork.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Creating Azure Integrationspaces Infrastructure Resources Client in Go
DESCRIPTION: This snippet shows how to create a specific client (InfrastructureResourcesClient) using the previously created client factory. This client provides access to infrastructure-related APIs.

LANGUAGE: go
CODE:
client := clientFactory.NewInfrastructureResourcesClient()

----------------------------------------

TITLE: Creating Azure Open Energy Platform Locations Client in Go
DESCRIPTION: This code demonstrates how to create a specific client (LocationsClient) using the previously created client factory. This client provides access to location-related APIs.

LANGUAGE: go
CODE:
client := clientFactory.LocationsClient()

----------------------------------------

TITLE: Removing Path Parameters from API Definitions
DESCRIPTION: YAML directive to remove share name, directory, and file name parameters from API paths as they are provided through direct URIs.

LANGUAGE: yaml
CODE:
directive:
- from: swagger-document
  where: $["x-ms-paths"]
  transform: >
    for (const property in $)
    {
        if (property.includes('/{shareName}/{directory}/{fileName}'))
        {
            $[property]["parameters"] = $[property]["parameters"].filter(function(param) { return (typeof param['$ref'] === "undefined") || (false == param['$ref'].endsWith("#/parameters/ShareName") && false == param['$ref'].endsWith("#/parameters/DirectoryPath") && false == param['$ref'].endsWith("#/parameters/FilePath"))});
        } 
        else if (property.includes('/{shareName}/{directory}'))
        {
            $[property]["parameters"] = $[property]["parameters"].filter(function(param) { return (typeof param['$ref'] === "undefined") || (false == param['$ref'].endsWith("#/parameters/ShareName") && false == param['$ref'].endsWith("#/parameters/DirectoryPath"))});
        }
        else if (property.includes('/{shareName}'))
        {
            $[property]["parameters"] = $[property]["parameters"].filter(function(param) { return (typeof param['$ref'] === "undefined") || (false == param['$ref'].endsWith("#/parameters/ShareName"))});
        }
    }

----------------------------------------

TITLE: Documenting Release History in Markdown
DESCRIPTION: This snippet shows the structure used to document release history for the Azure SDK for Go. It includes version numbers, dates, and categorized changes such as features added, breaking changes, and bug fixes.

LANGUAGE: markdown
CODE:
# Release History

## 2.2.0 (2023-11-24)
### Features Added

- Support for test fakes and OpenTelemetry trace spans.


## 2.1.0 (2023-09-22)
### Features Added

- New struct `PostBuildDefinition`
- New struct `SubstituteFromDefinition`
- New field `ReconciliationWaitDuration`, `WaitForReconciliation` in struct `FluxConfigurationProperties`
- New field `PostBuild`, `Wait` in struct `KustomizationDefinition`
- New field `PostBuild`, `Wait` in struct `KustomizationPatchDefinition`


## 2.0.0 (2023-05-26)
### Breaking Changes

- Field `InstalledVersion` of struct `ExtensionProperties` has been removed

### Features Added

- New value `SourceKindTypeAzureBlob` added to enum type `SourceKindType`
- New struct `AzureBlobDefinition`
- New struct `AzureBlobPatchDefinition`
- New struct `ManagedIdentityDefinition`
- New struct `ManagedIdentityPatchDefinition`
- New struct `Plan`
- New struct `ServicePrincipalDefinition`
- New struct `ServicePrincipalPatchDefinition`
- New field `Plan` in struct `Extension`
- New field `CurrentVersion`, `IsSystemExtension` in struct `ExtensionProperties`
- New field `AzureBlob` in struct `FluxConfigurationPatchProperties`
- New field `AzureBlob` in struct `FluxConfigurationProperties`


## 1.1.1 (2023-04-14)
### Bug Fixes

- Fix serialization bug of empty value of `any` type.


## 1.1.0 (2023-03-31)
### Features Added

- New struct `ClientFactory` which is a client factory used to create any client in this module


## 1.0.0 (2022-05-18)

The package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/kubernetesconfiguration/armkubernetesconfiguration` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html) since version 1.0.0, which contains breaking changes.

To migrate the existing applications to the latest version, please refer to [Migration Guide](https://aka.ms/azsdk/go/mgmt/migration).

To learn more, please refer to our documentation [Quick Start](https://aka.ms/azsdk/go/mgmt).

----------------------------------------

TITLE: Configuring Client Factory with Custom Options
DESCRIPTION: Creates a client factory with custom options for connecting to different Azure clouds, including sovereign clouds and Azure Stack.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armmanagednetwork.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Creating Azure Migrationassessment Client Factory in Go
DESCRIPTION: Initializes a client factory for Azure Migrationassessment services using subscription ID and credentials.

LANGUAGE: go
CODE:
clientFactory, err := armmigrationassessment.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Adding New Enum Type AutoScalePolicyEnforcement in Go
DESCRIPTION: Defines a new enum type AutoScalePolicyEnforcement with three possible values for auto-scale policy enforcement states.

LANGUAGE: go
CODE:
type AutoScalePolicyEnforcement string

const (
    AutoScalePolicyEnforcementDisabled AutoScalePolicyEnforcement = "Disabled"
    AutoScalePolicyEnforcementEnabled AutoScalePolicyEnforcement = "Enabled"
    AutoScalePolicyEnforcementNone AutoScalePolicyEnforcement = "None"
)

----------------------------------------

TITLE: Creating or Updating Variable Values in Go
DESCRIPTION: Performs a create or update operation for variable values using the VariableValuesClient.

LANGUAGE: Go
CODE:
*VariableValuesClient.CreateOrUpdate(context.Context, string, string, VariableValue, *VariableValuesClientCreateOrUpdateOptions) (VariableValuesClientCreateOrUpdateResponse, error)

----------------------------------------

TITLE: Version 2.0.1 Release Notes
DESCRIPTION: Fixed serialization bug related to empty values of 'any' type.

LANGUAGE: markdown
CODE:
## 2.0.1 (2023-04-14)
### Bug Fixes

- Fix serialization bug of empty value of `any` type.

----------------------------------------

TITLE: Adding Internal Package Import
DESCRIPTION: AutoRest directive to add internal package import to client-related Go files.

LANGUAGE: yaml
CODE:
directive:
  - from:
      - "*_client.go"
      - "client.go"
      - "client_factory.go"
    where: $
    transform: return $.replace(/import \(\n/, "import (\n\"github.com/Azure/azure-sdk-for-go/profile/p20200901/internal\"\n");

----------------------------------------

TITLE: Configuring Azure Client with Custom Options
DESCRIPTION: Creates a client factory with custom options for connecting to different Azure clouds.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armlinks.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Installing Azure StorSimple 1200 Series Module for Go
DESCRIPTION: This command installs the Azure StorSimple 1200 Series module using Go's package manager. It retrieves the module from the specified GitHub repository.

LANGUAGE: Shell
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/storsimple1200series/armstorsimple1200series

----------------------------------------

TITLE: Installing Azure VoiceServices Go Module
DESCRIPTION: Command to install the Azure VoiceServices module using Go modules for dependency management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/voiceservices/armvoiceservices

----------------------------------------

TITLE: Creating Connected Cluster Client for Azure Kubernetes Connect Service in Go
DESCRIPTION: This code demonstrates how to create a specific client (ConnectedClusterClient) using the previously created client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewConnectedClusterClient()

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK for Go
DESCRIPTION: This YAML configuration sets up AutoRest for generating the Azure SDK for Go. It enables Azure ARM mode, specifies required specification files, sets the license header, and defines the module version.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/managedservices/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/managedservices/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 0.7.0

----------------------------------------

TITLE: Configuring Azure Integrationspaces Client for Sovereign Clouds in Go
DESCRIPTION: This code shows how to configure the Azure Integrationspaces client factory to connect to sovereign clouds or Azure Stack. It uses ClientOptions to set the cloud endpoint.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armintegrationspaces.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Initializing Azure Credentials
DESCRIPTION: Creates default Azure credentials for authentication with Azure services using azidentity module.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: New Enum Type Definition - Kusto SDK v2.3.0
DESCRIPTION: Defines new enum types including CalloutType, OutboundAccess, PrincipalPermissionsAction, ScriptLevel and ZoneStatus with their corresponding values.

LANGUAGE: Go
CODE:
type CalloutType string

const (
    CalloutTypeAzureDigitalTwins CalloutType = "AzureDigitalTwins"
    CalloutTypeAzureOpenai CalloutType = "AzureOpenai"
    CalloutTypeCosmosdb CalloutType = "Cosmosdb"
    CalloutTypeExternalData CalloutType = "ExternalData"
    CalloutTypeGenevametrics CalloutType = "Genevametrics"
    CalloutTypeKusto CalloutType = "Kusto"
    CalloutTypeMysql CalloutType = "Mysql"
    CalloutTypePostgresql CalloutType = "Postgresql"
    CalloutTypeSQL CalloutType = "SQL"
    CalloutTypeSandboxArtifacts CalloutType = "SandboxArtifacts"
    CalloutTypeWebapi CalloutType = "Webapi"
)

----------------------------------------

TITLE: Type Changes in GO SDK v2.0.0
DESCRIPTION: Changes to type definitions and operation signatures in the Azure SDK for Go Resources Management package

LANGUAGE: go
CODE:
DeploymentProperties.Parameters: any -> map[string]*DeploymentParameter
DeploymentWhatIfProperties.Parameters: any -> map[string]*DeploymentParameter

*TagsClient.CreateOrUpdateAtScope -> *TagsClient.BeginCreateOrUpdateAtScope
*TagsClient.DeleteAtScope -> *TagsClient.BeginDeleteAtScope
*TagsClient.UpdateAtScope -> *TagsClient.BeginUpdateAtScope

----------------------------------------

TITLE: Creating Synapse Service Client
DESCRIPTION: Creates a specific Azure Synapse service client using the client factory for accessing related APIs.

LANGUAGE: go
CODE:
client := clientFactory.NewKustoPoolDataConnectionsClient()

----------------------------------------

TITLE: Configuring AutoRest for Azure Scheduler SDK Generation in YAML
DESCRIPTION: This YAML configuration specifies settings for AutoRest to generate the Azure Scheduler SDK. It requires specific versions of Azure REST API specifications, sets Azure ARM to true, and defines the module version as 1.2.0.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/7a2ac91de424f271cf91cc8009f3fe9ee8249086/specification/scheduler/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/7a2ac91de424f271cf91cc8009f3fe9ee8249086/specification/scheduler/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.2.0

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK Go Generation
DESCRIPTION: This YAML configuration specifies settings for AutoRest to generate Go SDK code for Azure Notification Hubs. It includes references to API specifications, sets the Azure ARM flag, specifies the license header, module version, and API version tag.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/85cfba195a19120f309bd292c4261aa53a586adb/specification/notificationhubs/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/85cfba195a19120f309bd292c4261aa53a586adb/specification/notificationhubs/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 2.0.0-beta.1
tag: package-preview-2023-10

----------------------------------------

TITLE: Configuring Client Factory with Custom Options
DESCRIPTION: Creates a client factory with custom options for connecting to different Azure clouds

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armproviderhub.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Configuring Azure Client Options for Different Clouds in Go
DESCRIPTION: This snippet shows how to configure client options to connect to different Azure clouds, including sovereign clouds and Azure Stack.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armdeviceprovisioningservices.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Creating Azure Features Client Factory
DESCRIPTION: Initializes a client factory for Azure Features services using subscription ID and credentials.

LANGUAGE: go
CODE:
clientFactory, err := armfeatures.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Creating Role Binding with AccessClient in Go
DESCRIPTION: This function creates a role binding using the AccessClient. It takes context, two string parameters, an AccessCreateRoleBindingRequestModel, and optional AccessClientCreateRoleBindingOptions.

LANGUAGE: Go
CODE:
*AccessClient.CreateRoleBinding(context.Context, string, string, AccessCreateRoleBindingRequestModel, *AccessClientCreateRoleBindingOptions) (AccessClientCreateRoleBindingResponse, error)

----------------------------------------

TITLE: Configuring Client Factory with Custom Options
DESCRIPTION: Creates a client factory with custom options for connecting to different Azure clouds including sovereign clouds and Azure Stack

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armpowerplatform.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Capitalizing SMB Field Names
DESCRIPTION: YAML directive to capitalize SMB-related field names for consistency.

LANGUAGE: yaml
CODE:
directive:
- from:
  - zz_directory_client.go
  - zz_file_client.go
  - zz_models.go
  - zz_options.go
  where: $
  transform: >
    return $.
      replace(/SmbMultichannel/g, `SMBMultichannel`).
      replace(/copyFileSmbInfo/g, `copyFileSMBInfo`).
      replace(/CopyFileSmbInfo/g, `CopyFileSMBInfo`).
      replace(/Smb\s+\*ShareSMBSettings/g, `SMB *ShareSMBSettings`);

----------------------------------------

TITLE: Model Renaming Transformations
DESCRIPTION: Renames Options models to Body to avoid naming conflicts with method options

LANGUAGE: yaml
CODE:
directive:
  - from: swagger-document
    where: $.definitions
    transform: |
      $.VectorStoreUpdateOptions["x-ms-client-name"] = "VectorStoreUpdateBody";
      $.VectorStoreOptions["x-ms-client-name"] = "VectorStoreBody";
      $.UpdateAssistantThreadOptions["x-ms-client-name"] = "UpdateThreadBody";
      $.UpdateAssistantOptions["x-ms-client-name"] = "UpdateAssistantBody";
      $.ThreadMessageOptions["x-ms-client-name"] = "CreateMessageBody";
      $.CreateRunOptions["x-ms-client-name"] = "CreateRunBody";
      $.CreateAndRunThreadOptions["x-ms-client-name"] = "CreateAndRunThreadBody";
      $.AssistantThreadCreationOptions["x-ms-client-name"] = "CreateThreadBody";
      $.AssistantCreationOptions["x-ms-client-name"] = "CreateAssistantBody";
      return $;

----------------------------------------

TITLE: Database Operations Functions
DESCRIPTION: Functions added in version 2.1.0-beta.1 for database operations including force linking and version upgrades.

LANGUAGE: Go
CODE:
*DatabasesClient.BeginForceLinkToReplicationGroup(context.Context, string, string, string, ForceLinkParameters, *DatabasesClientBeginForceLinkToReplicationGroupOptions) (*runtime.Poller[DatabasesClientForceLinkToReplicationGroupResponse], error)
*DatabasesClient.BeginUpgradeDBRedisVersion(context.Context, string, string, string, *DatabasesClientBeginUpgradeDBRedisVersionOptions) (*runtime.Poller[DatabasesClientUpgradeDBRedisVersionResponse], error)

----------------------------------------

TITLE: Creating Azure Newrelic Accounts Client
DESCRIPTION: This code demonstrates how to create a specific client (Accounts Client) using the previously created client factory. This client can be used to perform operations related to Azure Newrelic accounts.

LANGUAGE: go
CODE:
client := clientFactory.NewAccountsClient()

----------------------------------------

TITLE: Installing Azure Resource Policy Module
DESCRIPTION: Command to install the Azure Resource Policy module using Go modules package management system.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armpolicy

----------------------------------------

TITLE: Installing Azure Storage Actions Module - Shell
DESCRIPTION: Command to install the Azure Storage Actions module using Go modules package management

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/storageactions/armstorageactions

----------------------------------------

TITLE: Creating an Azure Elasticsan Client in Go
DESCRIPTION: Creates a specific client for Elasticsan operations using the previously initialized client factory. This client can be used to perform various Elasticsan-related tasks.

LANGUAGE: go
CODE:
client := clientFactory.NewElasticSansClient()

----------------------------------------

TITLE: Configuring AutoRest for Azure Relay SDK Generation
DESCRIPTION: YAML configuration for AutoRest that defines the parameters for generating Azure Relay SDK code. It references the Azure REST API specifications, sets ARM mode, specifies Microsoft MIT license header, and defines the module version as 1.2.0.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/relay/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/relay/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.2.0

----------------------------------------

TITLE: Configuring Azure Education Client for Sovereign Clouds in Go
DESCRIPTION: This code shows how to configure the Azure Education client factory to connect to sovereign clouds or Azure Stack. It uses ClientOptions to set the cloud endpoint.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armeducation.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Configuring Client Options for Different Clouds
DESCRIPTION: Demonstrates how to configure client options for connecting to different Azure clouds including sovereign clouds and Azure Stack.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := arminformaticadatamgmt.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Breaking Change - Type Change
DESCRIPTION: Change in type of NetworkSecurityPerimeterProfileAccessRuleProperties.Subscriptions field from string array to object array

LANGUAGE: go
CODE:
Type of `NetworkSecurityPerimeterProfileAccessRuleProperties.Subscriptions` has been changed from `[]*string` to `[]*NetworkSecurityPerimeterSubscription`

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK Generation in YAML
DESCRIPTION: This YAML configuration sets up AutoRest for generating the Azure SDK for Go. It specifies the Azure ARM mode, required API specifications, license header, module version, and enables the managed applications package.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/0cc5e2efd6ffccf30e80d1e150b488dd87198b94/specification/resources/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/0cc5e2efd6ffccf30e80d1e150b488dd87198b94/specification/resources/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.2.0
package-managedapplications: true

----------------------------------------

TITLE: Creating Health Bot Client Instance
DESCRIPTION: Creates a new Health Bot client instance from the client factory for accessing specific API operations.

LANGUAGE: go
CODE:
client := clientFactory.NewBotsClient()

----------------------------------------

TITLE: Configuring AutoRest for Azure Storage Go SDK Generation
DESCRIPTION: YAML configuration for AutoRest to generate Go SDK code from Azure Storage REST API specifications. Specifies ARM mode, required API specs, license header, module version, and modeling options.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/9d3547622288137fd36f086afcdaea5408dbe48c/specification/storage/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/9d3547622288137fd36f086afcdaea5408dbe48c/specification/storage/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.7.0
modelerfour:
  seal-single-value-enum-by-default: true
tag: package-2024-01

----------------------------------------

TITLE: Creating Azure Managed Network Fabric Client Factory
DESCRIPTION: Initializes a client factory for creating Azure Managed Network Fabric service clients.

LANGUAGE: go
CODE:
clientFactory, err := armmanagednetworkfabric.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Creating Azure Iotfirmwaredefense Client Factory in Go
DESCRIPTION: Code snippet showing how to create a client factory for Azure Iotfirmwaredefense. The client factory is used to create individual clients for specific operations.

LANGUAGE: go
CODE:
clientFactory, err := armiotfirmwaredefense.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Listing NetworkSecurityPerimeter Configurations in Go
DESCRIPTION: Creates a pager to list network security perimeter configurations.

LANGUAGE: Go
CODE:
pager := client.NewListConfigurationsPager(resourceGroupName, accountName, options)

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK Go - Power BI Embedded
DESCRIPTION: YAML configuration for AutoRest to generate the Azure SDK for Go client for Power BI Embedded. It specifies Azure ARM mode, required API specifications, license header, and module version.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/powerbiembedded/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/powerbiembedded/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.2.0

----------------------------------------

TITLE: Analyzing Configurations in Go
DESCRIPTION: Performs analysis on configurations using the ConfigurationsClient.

LANGUAGE: Go
CODE:
*ConfigurationsClient.Analysis(context.Context, string, string, string, *ConfigurationsClientAnalysisOptions) (ConfigurationsClientAnalysisResponse, error)

----------------------------------------

TITLE: Creating an Azure Recovery Services Client in Go
DESCRIPTION: This code demonstrates how to create a specific client for Azure Recovery Services operations using the previously created client factory. The client provides access to Recovery Services APIs.

LANGUAGE: go
CODE:
client := clientFactory.NewClient()

----------------------------------------

TITLE: Installing Azure Peering Service Module in Go
DESCRIPTION: Use the go get command to install the Azure Peering Service module from the Azure SDK for Go.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/peering/armpeering

----------------------------------------

TITLE: Configuring AutoRest for Azure Storage Go SDK Generation
DESCRIPTION: YAML configuration for AutoRest to generate Go SDK code from Azure Storage REST API specifications. Specifies ARM mode, required API specs, license header, module version, and modeling options.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/9d3547622288137fd36f086afcdaea5408dbe48c/specification/storage/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/9d3547622288137fd36f086afcdaea5408dbe48c/specification/storage/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.7.0
modelerfour:
  seal-single-value-enum-by-default: true
tag: package-2024-01

----------------------------------------

TITLE: Configuring Azure Elasticsan Client for China Cloud in Go
DESCRIPTION: Sets up client options to connect to Azure China cloud. This demonstrates how to configure the client for different Azure environments.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armelasticsan.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Model to DeploymentName Conversion
DESCRIPTION: Transforms model properties to use DeploymentName instead, with special handling for chat completions.

LANGUAGE: yaml
CODE:
directive:
  - from: swagger-document
    where: $.definitions.GenerateSpeechFromTextOptions.properties
    transform: |
      $["model"] = {
          "type": "string",
          "description": "The model to use for this request."
      }
      return $;

----------------------------------------

TITLE: Authenticating with Azure Credentials
DESCRIPTION: Creates a default Azure credential object for authentication with Azure services

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Creating an Azure Impactreporting Client Factory
DESCRIPTION: Initializes a client factory for creating Azure Impactreporting service clients using subscription ID and credentials.

LANGUAGE: go
CODE:
clientFactory, err := armimpactreporting.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Creating Web PubSub Client Factory
DESCRIPTION: Initializes a client factory for creating Web PubSub clients using subscription ID and credentials.

LANGUAGE: go
CODE:
clientFactory, err := armwebpubsub.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Renaming Models to Remove Suffixes
DESCRIPTION: YAML directive to rename models by removing 'Item' and 'Internal' suffixes.

LANGUAGE: yaml
CODE:
directive:
- rename-model:
    from: DirectoryItem
    to: Directory
- rename-model:
    from: FileItem
    to: File
- rename-model:
    from: HandleItem
    to: Handle
- rename-model:
    from: ShareItemInternal
    to: Share
- rename-model:
    from: SharePropertiesInternal
    to: ShareProperties

----------------------------------------

TITLE: Version Release Notes in Markdown
DESCRIPTION: Chronological changelog detailing version updates, new features, bug fixes, and breaking changes for the Azure SDK for Go Hybrid Data Manager package

LANGUAGE: markdown
CODE:
# Release History

## 1.2.0 (2023-11-24)
### Features Added

- Support for test fakes and OpenTelemetry trace spans.


## 1.1.1 (2023-04-14)
### Bug Fixes

- Fix serialization bug of empty value of `any` type.


## 1.1.0 (2023-03-31)
### Features Added

- New struct `ClientFactory` which is a client factory used to create any client in this module


## 1.0.0 (2022-05-18)

The package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/hybriddatamanager/armhybriddatamanager` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html) since version 1.0.0, which contains breaking changes.

To migrate the existing applications to the latest version, please refer to [Migration Guide](https://aka.ms/azsdk/go/mgmt/migration).

To learn more, please refer to our documentation [Quick Start](https://aka.ms/azsdk/go/mgmt).

----------------------------------------

TITLE: Configuring AutoRest for Azure Peering Service SDK Generation in Go
DESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure Peering Service SDK for Go. It specifies Azure ARM compatibility, required API specifications from GitHub, licensing header, and module version.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/peering/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/peering/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.2.0

----------------------------------------

TITLE: Creating SQL VM Client Instance
DESCRIPTION: Creates a new SQL Virtual Machines client instance using the client factory

LANGUAGE: go
CODE:
client := clientFactory.NewSQLVirtualMachinesClient()

----------------------------------------

TITLE: Configuring AutoRest for Azure Quantum SDK Generation
DESCRIPTION: Defines the configuration parameters for AutoRest to generate Go SDK code from Azure Quantum REST API specifications. Specifies Azure ARM mode, required API specification sources, MIT license header, module version 0.8.0, and targets the 2023-11-13 preview API version.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/cf5ad1932d00c7d15497705ad6b71171d3d68b1e/specification/quantum/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/cf5ad1932d00c7d15497705ad6b71171d3d68b1e/specification/quantum/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 0.8.0
tag: package-2023-11-13-preview

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK Go Generation
DESCRIPTION: This YAML configuration specifies settings for AutoRest to generate the Azure SDK for Go. It sets the Azure ARM flag, includes required specification files, sets the license header, and defines the module version.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/7a2ac91de424f271cf91cc8009f3fe9ee8249086/specification/saas/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/7a2ac91de424f271cf91cc8009f3fe9ee8249086/specification/saas/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 0.7.0

----------------------------------------

TITLE: Configuring Azure Client Options for Sovereign Clouds in Go
DESCRIPTION: Set up client options to connect to specific Azure cloud environments, such as Azure China.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armvmwarecloudsimple.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: New Field: AiToolchainOperatorProfile in ManagedClusterProperties
DESCRIPTION: Adds a new field 'AiToolchainOperatorProfile' to the ManagedClusterProperties struct.

LANGUAGE: Go
CODE:
New field `AiToolchainOperatorProfile` in struct `ManagedClusterProperties`

----------------------------------------

TITLE: Authentication with Azure Credentials
DESCRIPTION: Example of creating default Azure credentials for authentication with the SDK.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Initializing VariableValuesClient in Go
DESCRIPTION: Creates a new VariableValuesClient using the provided endpoint, credentials, and options.

LANGUAGE: Go
CODE:
NewVariableValuesClient(string, azcore.TokenCredential, *arm.ClientOptions) (*VariableValuesClient, error)

----------------------------------------

TITLE: Azure Service Configuration Structs
DESCRIPTION: Service configuration related structures introduced in version 1.0.0 for managing hybrid connectivity service configurations.

LANGUAGE: go
CODE:
type ServiceConfigurationList struct {}
type ServiceConfigurationProperties struct {}
type ServiceConfigurationResource struct {}
type ServiceConfigurationResourcePatch struct {}

----------------------------------------

TITLE: Creating Azure Portal Dashboard Client
DESCRIPTION: Creates a new dashboard client instance using the client factory

LANGUAGE: go
CODE:
client := clientFactory.NewDashboardsClient()

----------------------------------------

TITLE: Installing Azure Security Module with Go
DESCRIPTION: This command installs the Azure Security module using Go's package manager. It requires Go modules for versioning and dependency management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/security/armsecurity

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK for Go (SignalR Resource Manager)
DESCRIPTION: YAML configuration for AutoRest to generate Azure SDK for Go. It specifies the Azure ARM mode, required API specifications, license header, module version, and API version tag.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/9ec0fcc278aa2128c4fbb2b8a1aa93432d72cce0/specification/signalr/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/9ec0fcc278aa2128c4fbb2b8a1aa93432d72cce0/specification/signalr/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.3.0-beta.1
tag: package-2023-08-01-preview

----------------------------------------

TITLE: Authentication Setup with Azure Identity
DESCRIPTION: Creates a default Azure credential for authentication with Azure services using the azidentity package

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Modifying Directory Client Methods
DESCRIPTION: YAML directive to remove pager methods and export various generated methods in the directory client.

LANGUAGE: yaml
CODE:
directive:
  - from: zz_directory_client.go
    where: $
    transform: >
      return $.
        replace(/func \(client \*DirectoryClient\) NewListFilesAndDirectoriesSegmentPager\(.+\/\/ listFilesAndDirectoriesSegmentCreateRequest creates the ListFilesAndDirectoriesSegment request/s, `//\n// listFilesAndDirectoriesSegmentCreateRequest creates the ListFilesAndDirectoriesSegment request`).
        replace(/\(client \*DirectoryClient\) listFilesAndDirectoriesSegmentCreateRequest\(/, `(client *DirectoryClient) ListFilesAndDirectoriesSegmentCreateRequest(`).
        replace(/\(client \*DirectoryClient\) listFilesAndDirectoriesSegmentHandleResponse\(/, `(client *DirectoryClient) ListFilesAndDirectoriesSegmentHandleResponse(`);

----------------------------------------

TITLE: Authenticating with Azure Playwrighttesting using Default Credentials in Go
DESCRIPTION: This code snippet shows how to create a default Azure credential for authentication with Azure Playwrighttesting. It uses the azidentity module to provide various authentication methods.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Installing Azure Support Module with Go
DESCRIPTION: Command to install the Azure Support module using Go modules for dependency management

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/support/armsupport

----------------------------------------

TITLE: New Function Example in Go
DESCRIPTION: Example of a newly added client function

LANGUAGE: go
CODE:
NewAdvancedThreatProtectionSettingsClient(string, azcore.TokenCredential, *arm.ClientOptions) (*AdvancedThreatProtectionSettingsClient, error)

----------------------------------------

TITLE: Configuring AutoRest Settings for Azure SDK Go Generation
DESCRIPTION: Defines AutoRest configuration parameters for generating Go SDK code from Azure Operational Insights API specifications. Specifies required API specs, licensing, module version, and package tag settings.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/4ce13e8353a25125a41bc01705c0a7794dac32a7/specification/operationalinsights/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/4ce13e8353a25125a41bc01705c0a7794dac32a7/specification/operationalinsights/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 2.0.0-beta.4
tag: package-2022-02

----------------------------------------

TITLE: Creating Provider HUB Client
DESCRIPTION: Instantiates a new Provider HUB client using the client factory

LANGUAGE: go
CODE:
client := clientFactory.NewClient()

----------------------------------------

TITLE: Adding Content-MD5 Header to Put Range from URL Response
DESCRIPTION: YAML directive to add the Content-MD5 header to the Put Range from URL operation response.

LANGUAGE: yaml
CODE:
directive:
- from: swagger-document
  where: $["x-ms-paths"]["/{shareName}/{directory}/{fileName}?comp=range&fromURL"]
  transform: >
    $.put.responses["201"].headers["Content-MD5"] = {
        "type": "string",
        "format": "byte",
        "description": "This header is returned so that the client can check for message content integrity. The value of this header is computed by the File service; it is not necessarily the same value as may have been specified in the request headers."
    }

----------------------------------------

TITLE: Creating Database Backup Client
DESCRIPTION: Creates a client instance for managing Autonomous Database backups

LANGUAGE: go
CODE:
client := clientFactory.NewAutonomousDatabaseBackupsClient()

----------------------------------------

TITLE: Defining New Structs in Go
DESCRIPTION: New structs added in version 4.1.0 for representing routing info, SIM operations, and other concepts.

LANGUAGE: go
CODE:
type IPv4Route struct {}

type IPv4RouteNextHop struct {}

type RoutingInfoListResult struct {}

type RoutingInfoModel struct {}

type RoutingInfoPropertiesFormat struct {}

type SimClone struct {}

type SimMove struct {}

type UserConsentConfiguration struct {}

type UserPlaneDataRoutesItem struct {}

----------------------------------------

TITLE: Initializing Azure Default Credentials
DESCRIPTION: Creates a default Azure credential object for authentication with Azure services

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Renaming FileID to ID
DESCRIPTION: YAML directive to rename 'FileID' to 'ID' in various contexts, except for the Handle object.

LANGUAGE: yaml
CODE:
directive:
- from: swagger-document
  where: $.definitions
  transform: >
    $.Directory.properties.FileId["x-ms-client-name"] = "ID";
    $.File.properties.FileId["x-ms-client-name"] = "ID";
    $.Handle.properties.HandleId["x-ms-client-name"] = "ID";

- from:
  - zz_directory_client.go
  - zz_file_client.go
  - zz_response_types.go
  where: $
  transform: >
    return $.
      replace(/FileID/g, `ID`);

----------------------------------------

TITLE: Configuring AutoRest for Azure Security Center SDK Generation
DESCRIPTION: YAML configuration for AutoRest code generator that specifies the Azure ARM mode, package version, required API specifications, and custom transformations for external security solution definitions. Includes directives for modifying schema definitions and adding resource references.

LANGUAGE: yaml
CODE:
azure-arm: true
tag: package-composite-v3
require:
- https://github.com/Azure/azure-rest-api-specs/blob/9ac34f238dd6b9071f486b57e9f9f1a0c43ec6f6/specification/security/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/9ac34f238dd6b9071f486b57e9f9f1a0c43ec6f6/specification/security/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 0.14.0
directive:
- from: externalSecuritySolutions.json
  where: $.definitions['ExternalSecuritySolutionKind']
  transform: >
      $ = {
        "type": "string",
        "description": "The kind of the external solution",
        "enum": [
          "CEF",
          "ATA",
          "AAD"
        ],
        "x-ms-enum": {
          "name": "ExternalSecuritySolutionKind",
          "modelAsString": true,
          "values": [
            {
              "value": "CEF"
            },
            {
              "value": "ATA"
            },
            {
              "value": "AAD"
            }
          ]
        }
      };
- from: externalSecuritySolutions.json
  where: $.definitions['ExternalSecuritySolution']
  transform: >
      $.properties['kind'] = {
        "$ref": "#/definitions/ExternalSecuritySolutionKind"
      };
      $.allOf = [
        {
          "$ref": "../../../common/v1/types.json#/definitions/Resource"
        },
        {
          "$ref": "../../../common/v1/types.json#/definitions/Location"
        }
      ]

----------------------------------------

TITLE: Creating Azure Peering Service Client in Go
DESCRIPTION: Use the client factory to create a new Peerings client for accessing Azure Peering Service APIs.

LANGUAGE: go
CODE:
client := clientFactory.NewPeeringsClient()

----------------------------------------

TITLE: Installing Azure Customer Insights SDK Module
DESCRIPTION: Command to install the Azure Customer Insights module using Go modules

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/customerinsights/armcustomerinsights

----------------------------------------

TITLE: Installing Azure Service Linker Go Module
DESCRIPTION: Command to install the Azure Service Linker module using Go modules dependency management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/servicelinker/armservicelinker/v2

----------------------------------------

TITLE: Creating Azure Databricks Client Factory in Go
DESCRIPTION: This snippet demonstrates how to create a client factory for Azure Databricks. It requires a subscription ID and a credential object. The factory can be used to create various clients within the module.

LANGUAGE: go
CODE:
clientFactory, err := armdatabricks.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Renaming FileID to ID
DESCRIPTION: YAML directive to rename 'FileID' to 'ID' in various contexts, except for the Handle object.

LANGUAGE: yaml
CODE:
directive:
- from: swagger-document
  where: $.definitions
  transform: >
    $.Directory.properties.FileId["x-ms-client-name"] = "ID";
    $.File.properties.FileId["x-ms-client-name"] = "ID";
    $.Handle.properties.HandleId["x-ms-client-name"] = "ID";

- from:
  - zz_directory_client.go
  - zz_file_client.go
  - zz_response_types.go
  where: $
  transform: >
    return $.
      replace(/FileID/g, `ID`);

----------------------------------------

TITLE: Installing Azure Playwrighttesting Module in Go
DESCRIPTION: This snippet demonstrates how to install the Azure Playwrighttesting module using Go's package manager. It requires Go modules for versioning and dependency management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/playwrighttesting/armplaywrighttesting

----------------------------------------

TITLE: New Enum Type Definition
DESCRIPTION: Definition of new StorageAutoGrow enum type with associated values

LANGUAGE: go
CODE:
type StorageAutoGrow string

const (
    StorageAutoGrowDisabled StorageAutoGrow = "Disabled"
    StorageAutoGrowEnabled StorageAutoGrow = "Enabled"
)

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK Go Client Generation - New Relic Resource Manager
DESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure SDK for Go client for the New Relic Resource Manager. It specifies the Azure ARM mode, required API specifications, license header, module version, and API version tag.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/cf5ad1932d00c7d15497705ad6b71171d3d68b1e/specification/newrelic/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/cf5ad1932d00c7d15497705ad6b71171d3d68b1e/specification/newrelic/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.2.0
tag: package-2024-01-01

----------------------------------------

TITLE: Creating Service Client Instance
DESCRIPTION: Create a specific service client using the client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewExtensionsClient()

----------------------------------------

TITLE: Adding New Structs and Fields in Go for DigitalTwins Module
DESCRIPTION: This snippet illustrates the addition of new structs and fields to existing structs in the DigitalTwins module, including ManagedIdentityReference, UserAssignedIdentity, and various properties for connection and endpoint types.

LANGUAGE: markdown
CODE:
- New struct `ManagedIdentityReference`
- New struct `UserAssignedIdentity`
- New field `AdxRelationshipLifecycleEventsTableName` in struct `AzureDataExplorerConnectionProperties`
- New field `AdxTwinLifecycleEventsTableName` in struct `AzureDataExplorerConnectionProperties`
- New field `Identity` in struct `AzureDataExplorerConnectionProperties`
- New field `RecordPropertyAndItemRemovals` in struct `AzureDataExplorerConnectionProperties`
- New field `Identity` in struct `EndpointResourceProperties`
- New field `Identity` in struct `EventGrid`
- New field `Identity` in struct `EventHub`
- New field `UserAssignedIdentities` in struct `Identity`
- New field `Identity` in struct `ServiceBus`
- New field `Identity` in struct `TimeSeriesDatabaseConnectionProperties`
- New field `CleanupConnectionArtifacts` in struct `TimeSeriesDatabaseConnectionsClientBeginDeleteOptions`

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK for Go
DESCRIPTION: This YAML configuration sets up AutoRest for generating the Azure SDK for Go. It specifies the Azure ARM mode, required specification files, license header, and module version.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/b9b91929c304f8fb44002267b6c98d9fb9dde014/specification/education/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/b9b91929c304f8fb44002267b6c98d9fb9dde014/specification/education/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 0.4.0

----------------------------------------

TITLE: Configuring AutoRest for Azure Blueprint SDK Generation in YAML
DESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure Blueprint SDK for Go. It enables Azure ARM mode, specifies the required API specifications, sets the license header, and defines the module version.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/f790e624d0d080b89d962a3bd19c65bc6a6b2f5e/specification/blueprint/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/f790e624d0d080b89d962a3bd19c65bc6a6b2f5e/specification/blueprint/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 0.7.0

----------------------------------------

TITLE: Installing Azure VMware Cloud Simple Module for Go
DESCRIPTION: Use go get to install the Azure VMware Cloud Simple module from the Azure SDK for Go.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/vmwarecloudsimple/armvmwarecloudsimple

----------------------------------------

TITLE: Authenticating with Azure using DefaultAzureCredential
DESCRIPTION: Creates a default Azure credential object for authentication with Azure services

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Listing AccessConnectors by Subscription in Go
DESCRIPTION: Creates a new Pager for listing AccessConnectors across an entire subscription.

LANGUAGE: go
CODE:
*AccessConnectorsClient.NewListBySubscriptionPager(*AccessConnectorsClientListBySubscriptionOptions) *runtime.Pager[AccessConnectorsClientListBySubscriptionResponse]

----------------------------------------

TITLE: Creating APIKeysClient from ClientFactory in Go
DESCRIPTION: Creates a new APIKeysClient instance from the ClientFactory.

LANGUAGE: Go
CODE:
*ClientFactory.NewAPIKeysClient() *APIKeysClient

----------------------------------------

TITLE: Removing UnmarshalXML for Handle
DESCRIPTION: YAML directive to remove the UnmarshalXML method for the Handle type to allow for a custom implementation.

LANGUAGE: yaml
CODE:
directive:
- from: swagger-document
  where: $.definitions
  transform: >
    $.Handle["x-ms-go-omit-serde-methods"] = true;

----------------------------------------

TITLE: Function Definitions for Azure Resource Health SDK in Go
DESCRIPTION: Declarations of new client functions and methods added in version 1.2.0 for interacting with Azure Resource Health services

LANGUAGE: go
CODE:
NewChildAvailabilityStatusesClient(azcore.TokenCredential, *arm.ClientOptions) (*ChildAvailabilityStatusesClient, error)
NewChildResourcesClient(azcore.TokenCredential, *arm.ClientOptions) (*ChildResourcesClient, error)
NewEmergingIssuesClient(azcore.TokenCredential, *arm.ClientOptions) (*EmergingIssuesClient, error)
NewEventClient(string, azcore.TokenCredential, *arm.ClientOptions) (*EventClient, error)

----------------------------------------

TITLE: Introducing ClientFactory for Azure Private DNS in Go
DESCRIPTION: Adds a new struct 'ClientFactory' which serves as a client factory for creating any client within the module.

LANGUAGE: markdown
CODE:
### Features Added

- New struct `ClientFactory` which is a client factory used to create any client in this module

----------------------------------------

TITLE: Creating Service Client
DESCRIPTION: Creates a service client instance from the client factory

LANGUAGE: go
CODE:
client := clientFactory.()

----------------------------------------

TITLE: Installing Azure Power Platform Module with Go
DESCRIPTION: Command to install the Azure Power Platform module using Go modules package management system

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/powerplatform/armpowerplatform

----------------------------------------

TITLE: Installing Azure SCVMM Go Module
DESCRIPTION: Command to install the Azure SCVMM module using Go modules for dependency management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/scvmm/armscvmm

----------------------------------------

TITLE: Authenticating with Azure Databricks using DefaultAzureCredential in Go
DESCRIPTION: This code snippet shows how to create a default Azure credential for authentication with Azure Databricks. It uses the azidentity package to create a DefaultAzureCredential object.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Using azcore.ETag for ETag Fields
DESCRIPTION: YAML directive to replace string ETag fields with azcore.ETag type and update imports accordingly.

LANGUAGE: yaml
CODE:
directive:
- from: zz_models.go
  where: $
  transform: >
    return $.
      replace(/import "time"/, `import (\n\t"time"\n\t"github.com/Azure/azure-sdk-for-go/sdk/azcore"\n)`).
      replace(/Etag\s+\*string/g, `ETag *azcore.ETag`);

- from: zz_response_types.go
  where: $
  transform: >
    return $.
      replace(/"time"/, `"time"\n\t"github.com/Azure/azure-sdk-for-go/sdk/azcore"`).
      replace(/ETag\s+\*string/g, `ETag *azcore.ETag`);

- from:
  - zz_directory_client.go
  - zz_file_client.go
  - zz_share_client.go
  where: $
  transform: >
    return $.
      replace(/"github\.com\/Azure\/azure\-sdk\-for\-go\/sdk\/azcore\/policy"/, `"github.com/Azure/azure-sdk-for-go/sdk/azcore"\n\t"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"`).
      replace(/result\.ETag\s+=\s+&val/g, `result.ETag = (*azcore.ETag)(&val)`);

----------------------------------------

TITLE: Authenticating with Azure Credentials
DESCRIPTION: Creates a default Azure credential object for authentication with Azure services using the azidentity module.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Authentication Setup for Azure Elastic
DESCRIPTION: Creates a default Azure credential object for authenticating with Azure Elastic services.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: New Azure RedHat OpenShift Client Functions
DESCRIPTION: Collection of new client functions added in version 1.1.0 for managing machine pools, OpenShift versions, secrets, sync identity providers and sync sets.

LANGUAGE: go
CODE:
NewMachinePoolsClient(string, azcore.TokenCredential, *arm.ClientOptions) (*MachinePoolsClient, error)
*MachinePoolsClient.CreateOrUpdate(context.Context, string, string, string, MachinePool, *MachinePoolsClientCreateOrUpdateOptions) (MachinePoolsClientCreateOrUpdateResponse, error)
*MachinePoolsClient.Delete(context.Context, string, string, string, *MachinePoolsClientDeleteOptions) (MachinePoolsClientDeleteResponse, error)

----------------------------------------

TITLE: Configuring AutoRest for Azure MySQL SDK Generation in YAML
DESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure MySQL SDK for Go. It specifies Azure ARM mode, required specification files, license header, module version, and targets the flexible servers package with a specific API version.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/e26b89bcbec9eed5026c01416e481408b2a1ca1a/specification/mysql/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/e26b89bcbec9eed5026c01416e481408b2a1ca1a/specification/mysql/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 2.0.0-beta.4
package-flexibleservers: true
tag: package-flexibleserver-2024-10-01-preview

----------------------------------------

TITLE: Creating Azure Support Chat Transcripts Client
DESCRIPTION: Creates a specific client instance for handling chat transcript operations using the client factory

LANGUAGE: go
CODE:
client := clientFactory.NewChatTranscriptsClient()

----------------------------------------

TITLE: Configuring Azure Engagement Fabric Client for Different Clouds in Go
DESCRIPTION: This code demonstrates how to configure the client factory to connect to different Azure clouds, such as Azure China. It uses ClientOptions from the azcore package.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armengagementfabric.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Creating a Specific Azure Automation Client in Go
DESCRIPTION: This code demonstrates how to create a specific client (HybridRunbookWorkerGroupClient) using the previously created client factory. This client can be used to perform operations related to hybrid runbook worker groups.

LANGUAGE: go
CODE:
client := clientFactory.NewHybridRunbookWorkerGroupClient()

----------------------------------------

TITLE: Extended Location SDK Struct Definitions
DESCRIPTION: New struct definitions introduced in version 1.3.0-beta.1 for handling resource sync rules and custom location properties.

LANGUAGE: go
CODE:
struct CustomLocationFindTargetResourceGroupProperties
struct CustomLocationFindTargetResourceGroupResult
struct MatchExpressionsProperties
struct PatchableResourceSyncRule
struct ResourceSyncRule
struct ResourceSyncRuleListResult
struct ResourceSyncRuleProperties
struct ResourceSyncRulePropertiesSelector

----------------------------------------

TITLE: Retrieving API Keys in Go
DESCRIPTION: Retrieves an API key using the APIKeysClient.

LANGUAGE: Go
CODE:
*APIKeysClient.Get(context.Context, string, string, string, *APIKeysClientGetOptions) (APIKeysClientGetResponse, error)

----------------------------------------

TITLE: Adding New Enum Values in Go
DESCRIPTION: Example of adding new values to an existing enum type in Go.

LANGUAGE: go
CODE:
// New value `ServiceLevelFlexible` added to enum type `ServiceLevel`
type ServiceLevel string

const (
    ServiceLevelFlexible ServiceLevel = "Flexible"
    // ... existing values
)

----------------------------------------

TITLE: Creating Azure IoT Central Apps Client in Go
DESCRIPTION: Example of creating a specific client (Apps client) using the Azure IoT Central client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewAppsClient()

----------------------------------------

TITLE: Installing Azure Devhub Module using Go Get
DESCRIPTION: Command to install the Azure Devhub module using Go's package manager.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/devhub/armdevhub

----------------------------------------

TITLE: Release History Documentation - Azure SDK for Go
DESCRIPTION: Markdown formatted release history showing version changes from 1.0.0 through 1.4.0-beta.2, documenting new features, enums, functions and structural changes.

LANGUAGE: markdown
CODE:
# Release History

## 1.4.0-beta.2 (2024-06-21)
### Features Added

- New value `SearchBypassAzureServices` added to enum type `SearchBypass`


## 1.4.0-beta.1 (2024-03-22)
### Features Added

- New value `IdentityTypeSystemAssignedUserAssigned`, `IdentityTypeUserAssigned` added to enum type `IdentityType`
- New value `SearchServiceStatusStopped` added to enum type `SearchServiceStatus`
- New enum type `SearchBypass` with values `SearchBypassAzurePortal`, `SearchBypassNone`
- New enum type `SearchDisabledDataExfiltrationOption` with values `SearchDisabledDataExfiltrationOptionAll`
[...]

----------------------------------------

TITLE: Creating Azure Compute Fleet Client Factory in Go
DESCRIPTION: This code creates a client factory for Azure Compute Fleet. It requires a subscription ID and a credential object. The client factory can be used to create specific clients for different Azure Compute Fleet operations.

LANGUAGE: go
CODE:
clientFactory, err := armcomputefleet.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Adding Last-Modified Header to SetMetadata Response
DESCRIPTION: YAML directive to add the Last-Modified header to the SetMetadata operation response.

LANGUAGE: yaml
CODE:
directive:
- from: swagger-document
  where: $["x-ms-paths"]["/{shareName}/{directory}/{fileName}?comp=metadata"]
  transform: >
    $.put.responses["200"].headers["Last-Modified"] = {
        "type": "string",
        "format": "date-time-rfc1123",
        "description": "Returns the date and time the file was last modified. Any operation that modifies the file, including an update of the file's metadata or properties, changes the last-modified time of the file."
    }

----------------------------------------

TITLE: Authenticating with Azure using Default Credentials in Go
DESCRIPTION: This code snippet shows how to create a default Azure credential for authentication. It uses the azidentity package to provide various authentication methods.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Authentication Setup with Azure Identity
DESCRIPTION: Creates a default Azure credential object for authentication with Azure services.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Creating Azure Addons Support Plan Types Client in Go
DESCRIPTION: This code demonstrates how to create a specific client for Support Plan Types using the previously created client factory. This client can be used to perform operations related to support plan types.

LANGUAGE: go
CODE:
client := clientFactory.NewSupportPlanTypesClient()

----------------------------------------

TITLE: Fixing x-ms-content-crc64 Header Response Name
DESCRIPTION: YAML directive to set the client name for the x-ms-content-crc64 header to 'ContentCRC64'.

LANGUAGE: yaml
CODE:
directive:
- from: swagger-document
  where: $.x-ms-paths.*.*.responses.*.headers.x-ms-content-crc64
  transform: >
    $["x-ms-client-name"] = "ContentCRC64"

----------------------------------------

TITLE: Creating BackupInstancesExtensionRoutingClient from ClientFactory in Go
DESCRIPTION: Creates a new BackupInstancesExtensionRoutingClient using the ClientFactory.

LANGUAGE: Go
CODE:
*ClientFactory.NewBackupInstancesExtensionRoutingClient() *BackupInstancesExtensionRoutingClient

----------------------------------------

TITLE: Installing Azure Managed Service Identity Module in Go
DESCRIPTION: This command installs the Azure Managed Service Identity module using Go's package manager.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/msi/armmsi

----------------------------------------

TITLE: Creating Communication Services Domain Client
DESCRIPTION: Creates a domains client instance using the client factory to access domain-related APIs.

LANGUAGE: go
CODE:
client := clientFactory.NewDomainsClient()

----------------------------------------

TITLE: Configuring AutoRest for Azure Time Series Insights Go SDK
DESCRIPTION: YAML configuration for AutoRest code generator that specifies the parameters for generating the Azure Time Series Insights Go SDK. It references the API specifications, sets the Azure ARM mode, defines the module version, and specifies the license header type.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/163e27c0ca7570bc39e00a46f255740d9b3ba3cb/specification/timeseriesinsights/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/163e27c0ca7570bc39e00a46f255740d9b3ba3cb/specification/timeseriesinsights/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.2.0
tag: package-2020-05-15

----------------------------------------

TITLE: Creating Azure Network Function Manager Client in Go
DESCRIPTION: This code demonstrates how to create a specific client using the previously created client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewClient()

----------------------------------------

TITLE: Initializing Azure Trustedsigning Client Factory in Go
DESCRIPTION: This code creates a new client factory for Azure Trustedsigning services, using the subscription ID and credentials.

LANGUAGE: go
CODE:
clientFactory, err := armtrustedsigning.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Authenticating with Azure Credentials - Go
DESCRIPTION: Creates a default Azure credential object for authentication with Azure services

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: New Azure Redis Enterprise SDK Functions
DESCRIPTION: New function declarations added in version 2.1.0-beta.2 for managing access policy assignments and client operations.

LANGUAGE: Go
CODE:
NewAccessPolicyAssignmentClient(string, azcore.TokenCredential, *arm.ClientOptions) (*AccessPolicyAssignmentClient, error)
*AccessPolicyAssignmentClient.BeginCreateUpdate(context.Context, string, string, string, string, AccessPolicyAssignment, *AccessPolicyAssignmentClientBeginCreateUpdateOptions) (*runtime.Poller[AccessPolicyAssignmentClientCreateUpdateResponse], error)
*AccessPolicyAssignmentClient.BeginDelete(context.Context, string, string, string, string, *AccessPolicyAssignmentClientBeginDeleteOptions) (*runtime.Poller[AccessPolicyAssignmentClientDeleteResponse], error)
*AccessPolicyAssignmentClient.Get(context.Context, string, string, string, string, *AccessPolicyAssignmentClientGetOptions) (AccessPolicyAssignmentClientGetResponse, error)
*AccessPolicyAssignmentClient.NewListPager(string, string, string, *AccessPolicyAssignmentClientListOptions) *runtime.Pager[AccessPolicyAssignmentClientListResponse]
*ClientFactory.NewAccessPolicyAssignmentClient() *AccessPolicyAssignmentClient

----------------------------------------

TITLE: Go Enum Type Definitions for NewRelic Status
DESCRIPTION: New enum types added in version 1.2.0 for configuration names, patch operations and resource status values.

LANGUAGE: go
CODE:
type ConfigurationName string
type PatchOperation string
type Status string

----------------------------------------

TITLE: Defining New Enum Values in Go for DigitalTwins Module
DESCRIPTION: This snippet shows the addition of new enum values for various types in the DigitalTwins module, including DigitalTwinsIdentityType, CleanupConnectionArtifacts, IdentityType, and RecordPropertyAndItemRemovals.

LANGUAGE: markdown
CODE:
- New value `DigitalTwinsIdentityTypeSystemAssignedUserAssigned`, `DigitalTwinsIdentityTypeUserAssigned` added to enum type `DigitalTwinsIdentityType`
- New enum type `CleanupConnectionArtifacts` with values `CleanupConnectionArtifactsFalse`, `CleanupConnectionArtifactsTrue`
- New enum type `IdentityType` with values `IdentityTypeSystemAssigned`, `IdentityTypeUserAssigned`
- New enum type `RecordPropertyAndItemRemovals` with values `RecordPropertyAndItemRemovalsFalse`, `RecordPropertyAndItemRemovalsTrue`

----------------------------------------

TITLE: Release Notes Version 1.2.0 (2023-11-24)
DESCRIPTION: Documents feature additions for test fakes and OpenTelemetry trace spans support.

LANGUAGE: markdown
CODE:
### Features Added\n\n- Support for test fakes and OpenTelemetry trace spans.

----------------------------------------

TITLE: Creating Azure Active Directory Client in Go
DESCRIPTION: Demonstrates how to create a specific client (PrivateLinkResourcesClient) using the client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewPrivateLinkResourcesClient()

----------------------------------------

TITLE: Installing Azure Analysis Services Module in Go
DESCRIPTION: Command to install the Azure Analysis Services module using Go's package manager.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/analysisservices/armanalysisservices

----------------------------------------

TITLE: Configuring AutoRest for Azure Resource Connector SDK Generation in YAML
DESCRIPTION: This YAML configuration specifies the parameters for AutoRest to generate the Azure Resource Connector SDK. It includes the Azure ARM flag, required API specifications, license header, module version, and API version tag.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/5f700acd3d094d8eedca381932f2e7916afd2e55/specification/resourceconnector/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/5f700acd3d094d8eedca381932f2e7916afd2e55/specification/resourceconnector/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.1.0
tag: package-2022-10-27

----------------------------------------

TITLE: Configuring Client Factory with Custom Options
DESCRIPTION: Creates a client factory with custom options for connecting to different Azure clouds.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armconfidentialledger.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Modifying Container Client Methods
DESCRIPTION: YAML directive to remove pager methods and export various generated methods in the container client.

LANGUAGE: yaml
CODE:
directive:
  - from: zz_container_client.go
    where: $
    transform: >
      return $.
        replace(/func \(client \*ContainerClient\) NewListBlobFlatSegmentPager\(.+\/\/ listBlobFlatSegmentCreateRequest creates the ListBlobFlatSegment request/s, `//\n// listBlobFlatSegmentCreateRequest creates the ListBlobFlatSegment request`).
        replace(/\(client \*ContainerClient\) listBlobFlatSegmentCreateRequest\(/, `(client *ContainerClient) ListBlobFlatSegmentCreateRequest(`).
        replace(/\(client \*ContainerClient\) listBlobFlatSegmentHandleResponse\(/, `(client *ContainerClient) ListBlobFlatSegmentHandleResponse(`);

----------------------------------------

TITLE: Authenticating with Azure using Default Credentials in Go
DESCRIPTION: Creates a default Azure credential for authentication with Azure services.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Configuring Azure Dev Center Client for Sovereign Clouds in Go
DESCRIPTION: This code shows how to configure the Azure Dev Center client for use with sovereign clouds or Azure Stack. It uses ClientOptions to set the cloud endpoint.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armdevcenter.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Installing Azure PostgreSQL SDK Module
DESCRIPTION: Command to install the Azure Database for PostgreSQL module using Go modules package management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/postgresql/armpostgresqlflexibleservers/v4

----------------------------------------

TITLE: Installing Azure Compute Module in Go
DESCRIPTION: Command to install the Azure Compute module using Go modules for versioning and dependency management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute/v6

----------------------------------------

TITLE: Documenting Release 0.2.0 Changes in Markdown
DESCRIPTION: This snippet details the new features added in version 0.2.0 of the SDK, including a new enum type, struct, and additional fields in existing structs.

LANGUAGE: markdown
CODE:
## 0.2.0 (2024-10-23)
### Features Added

- New enum type `AutoGeneratedDomainNameLabelScope` with values `AutoGeneratedDomainNameLabelScopeNoReuse`, `AutoGeneratedDomainNameLabelScopeResourceGroupReuse`, `AutoGeneratedDomainNameLabelScopeSubscriptionReuse`, `AutoGeneratedDomainNameLabelScopeTenantReuse`
- New struct `VMApplication`
- New field `AutoGeneratedDomainNameLabelScope`, `CustomFqdn` in struct `ManagedClusterProperties`
- New field `VMApplications` in struct `NodeTypeProperties`

----------------------------------------

TITLE: Importing the Media Services Package in Go
DESCRIPTION: Example of how to import the Media Services package in a Go application. This is inferred from the package name mentioned in the changelog.

LANGUAGE: Go
CODE:
import "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/mediaservices/armmediaservices"

----------------------------------------

TITLE: Creating Template Specs Client
DESCRIPTION: Instantiates a new Template Specs client using the client factory

LANGUAGE: go
CODE:
client := clientFactory.NewClient()

----------------------------------------

TITLE: New Enum Type in Go
DESCRIPTION: Example of a new enum type added in version 6.2.0

LANGUAGE: go
CODE:
type AccessControlRulesMode string

const (
  AccessControlRulesModeAudit     AccessControlRulesMode = "Audit"
  AccessControlRulesModeDisabled  AccessControlRulesMode = "Disabled"
  AccessControlRulesModeEnforce  AccessControlRulesMode = "Enforce"
)

----------------------------------------

TITLE: Configuring AutoRest for Azure PostgreSQL HSC SDK Generation in YAML
DESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure SDK for Go for PostgreSQL Hyperscale (Citus). It specifies the Azure ARM mode, required API specifications, license header, and module version.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/postgresqlhsc/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/postgresqlhsc/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 0.6.1

----------------------------------------

TITLE: New Azure Bot Service API Functions - Go
DESCRIPTION: Several new client functions added for managing Bot Service resources including email, QnA Maker endpoints, and various channel types. Includes methods for creating sign-in URLs and retrieving endpoint keys.

LANGUAGE: go
CODE:
NewEmailClient(string, azcore.TokenCredential, *arm.ClientOptions) (*EmailClient, error)
NewQnAMakerEndpointKeysClient(string, azcore.TokenCredential, *arm.ClientOptions) (*QnAMakerEndpointKeysClient, error)
*EmailClient.CreateSignInURL(context.Context, string, string, *EmailClientCreateSignInURLOptions) (EmailClientCreateSignInURLResponse, error)
*QnAMakerEndpointKeysClient.Get(context.Context, QnAMakerEndpointKeysRequestBody, *QnAMakerEndpointKeysClientGetOptions) (QnAMakerEndpointKeysClientGetResponse, error)

----------------------------------------

TITLE: Configuring Azure Client Options for Different Clouds in Go
DESCRIPTION: This snippet shows how to configure client options to connect to different Azure clouds, such as Azure China. It uses the arm.ClientOptions struct to set the cloud option.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armmsi.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Configuring AutoRest Settings for Azure Go SDK Generation
DESCRIPTION: Defines core AutoRest configuration parameters including ARM mode, required API specs, licensing, and module version. References specific versions of Azure REST API specifications for workloads resource manager.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/1e7b408f3323e7f5424745718fe62c7a043a2337/specification/workloads/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/1e7b408f3323e7f5424745718fe62c7a043a2337/specification/workloads/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.1.0

----------------------------------------

TITLE: Update Test Resources - Resource Group Parameter Set
DESCRIPTION: PowerShell command syntax for updating test resources using resource group name directly. Allows specifying the resource group name, subscription ID and deletion time.

LANGUAGE: powershell
CODE:
Update-TestResources.ps1 [-ResourceGroupName <String>] [-SubscriptionId <String>] [-DeleteAfterHours <Int32>]
 [<CommonParameters>]

----------------------------------------

TITLE: Installing Azure Container Service Module
DESCRIPTION: Command to install the Azure Container Service module using Go modules.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/containerservice/armcontainerservice/v6

----------------------------------------

TITLE: Declaring New Functions for AppliancesClient in Go
DESCRIPTION: This snippet shows the declaration of new functions added to the AppliancesClient in version 0.4.0. These functions include operations for getting telemetry config and listing keys.

LANGUAGE: go
CODE:
*AppliancesClient.GetTelemetryConfig(context.Context, *AppliancesClientGetTelemetryConfigOptions) (AppliancesClientGetTelemetryConfigResponse, error)
*AppliancesClient.ListKeys(context.Context, string, string, *AppliancesClientListKeysOptions) (AppliancesClientListKeysResponse, error)

----------------------------------------

TITLE: Installing Azure Cosmos DB Module in Go
DESCRIPTION: This snippet demonstrates how to install the Azure Cosmos DB module using Go's package manager. It requires Go modules for versioning and dependency management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/cosmos/armcosmos/v4

----------------------------------------

TITLE: Adding Internal Import Directive
DESCRIPTION: AutoRest directive to add internal package import to multiple client-related files.

LANGUAGE: yaml
CODE:
directive:
  - from:
      - "*_client.go"
      - "client.go"
      - "client_factory.go"
    where: $
    transform: return $.replace(/import \(\n/, "import (\n\"github.com/Azure/azure-sdk-for-go/profile/p20200901/internal\"\n");

----------------------------------------

TITLE: Authenticating with Azure Dynatrace using Default Credentials in Go
DESCRIPTION: This code snippet demonstrates how to create a default Azure credential object for authentication with Azure Dynatrace. It uses the azidentity package to create a DefaultAzureCredential instance.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Installing Azure Deployment Manager Module in Go
DESCRIPTION: This command installs the Azure Deployment Manager module using Go's package manager. It requires Go modules for versioning and dependency management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/deploymentmanager/armdeploymentmanager

----------------------------------------

TITLE: Querying NetworkSecurityPerimeter Configuration in Go
DESCRIPTION: Retrieves the network security perimeter configuration using the GetConfiguration method.

LANGUAGE: Go
CODE:
resp, err := client.GetConfiguration(ctx, resourceGroupName, accountName, configurationName, options)

----------------------------------------

TITLE: Configuring AutoRest Settings for Azure SDK Generation
DESCRIPTION: YAML configuration for AutoRest that specifies the source API specifications, licensing, versioning, and other parameters needed to generate the Azure SDK for Go. References the managed network fabric API specification and its Go-specific configuration.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/925ba149e17454ce91ecd3f9f4134effb2f97844/specification/managednetworkfabric/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/925ba149e17454ce91ecd3f9f4134effb2f97844/specification/managednetworkfabric/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.1.0
tag: package-2023-06-15

----------------------------------------

TITLE: Client Methods
DESCRIPTION: Common client methods for managing archive versions

LANGUAGE: go
CODE:
func (*ArchiveVersionsClient) BeginCreate(context.Context, string, string, string, string, string, *ArchiveVersionsClientBeginCreateOptions) (*runtime.Poller[ArchiveVersionsClientCreateResponse], error)

func (*ArchiveVersionsClient) BeginDelete(context.Context, string, string, string, string, string, *ArchiveVersionsClientBeginDeleteOptions) (*runtime.Poller[ArchiveVersionsClientDeleteResponse], error)

func (*ArchiveVersionsClient) Get(context.Context, string, string, string, string, string, *ArchiveVersionsClientGetOptions) (ArchiveVersionsClientGetResponse, error)

----------------------------------------

TITLE: Adding Internal Package Import
DESCRIPTION: Directive to add internal package import to client-related Go files for module version and name handling.

LANGUAGE: yaml
CODE:
directive:
  - from:
      - "*_client.go"
      - "client.go"
      - "client_factory.go"
    where: $
    transform: return $.replace(/import \(\n/, "import (\n\"github.com/Azure/azure-sdk-for-go/profile/p20200901/internal\"\n");

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK Generation in YAML
DESCRIPTION: This YAML configuration sets up AutoRest for generating the Azure SDK for Go. It enables Azure ARM mode, specifies required API specifications from GitHub, sets the license header, and defines the module version.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/7a2ac91de424f271cf91cc8009f3fe9ee8249086/specification/subscription/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/7a2ac91de424f271cf91cc8009f3fe9ee8249086/specification/subscription/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.2.0

----------------------------------------

TITLE: Authenticating with Azure Identity
DESCRIPTION: Creates a default Azure credential object for authentication with Azure services

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Creating Azure Graphservices Account Client in Go
DESCRIPTION: Code snippet demonstrating how to create a specific client (Account Client) using the client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewAccountClient()

----------------------------------------

TITLE: New Enum Types and Functions (v2.2.0)
DESCRIPTION: Major feature additions including new enum types for authentication modes, composition types, private link delegation, and snapshot status. Also includes new client functions for snapshot management.

LANGUAGE: go
CODE:
type AuthenticationMode string
type CompositionType string
type PrivateLinkDelegation string
type SnapshotStatus string

func *ClientFactory.NewSnapshotsClient() *SnapshotsClient
func NewSnapshotsClient(string, azcore.TokenCredential, *arm.ClientOptions) (*SnapshotsClient, error)
func *SnapshotsClient.BeginCreate(context.Context, string, string, string, Snapshot, *SnapshotsClientBeginCreateOptions) (*runtime.Poller[SnapshotsClientCreateResponse], error)
func *SnapshotsClient.Get(context.Context, string, string, string, *SnapshotsClientGetOptions) (SnapshotsClientGetResponse, error)

----------------------------------------

TITLE: Configuring Azure Client Options for Different Clouds in Go
DESCRIPTION: This code example demonstrates how to configure client options for connecting to different Azure clouds. It shows setting up options to connect to Azure China cloud using the ClientOptions struct from the arm package and the Cloud constant from the cloud package.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armmysql.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Installing Azure Hybrid Compute Module in Go
DESCRIPTION: This snippet demonstrates how to install the Azure Hybrid Compute module using Go modules. It requires Go to be installed on the system.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/hybridcompute/armhybridcompute/v2

----------------------------------------

TITLE: Version History Entry - 0.7.0
DESCRIPTION: Release notes for version 0.7.0 documenting addition of ClientFactory struct

LANGUAGE: markdown
CODE:
## 0.7.0 (2023-03-31)
### Features Added

- New struct `ClientFactory` which is a client factory used to create any client in this module

----------------------------------------

TITLE: Importing DeletedAutomationAccountsClient in Go
DESCRIPTION: Creates a new DeletedAutomationAccountsClient using the provided subscription ID, token credential, and optional client options.

LANGUAGE: go
CODE:
NewDeletedAutomationAccountsClient(string, azcore.TokenCredential, *arm.ClientOptions) (*DeletedAutomationAccountsClient, error)

----------------------------------------

TITLE: Creating Azure Automanage Service Clients in Go
DESCRIPTION: Initializes specific service clients for Reports, Configuration Profiles, and Assignments using the client factory.

LANGUAGE: go
CODE:
reportsClient := clientFactory.NewReportsClient()
configProfilesClient := clientFactory.NewReportsClient()
assignmentClient := clientFactory.NewReportsClient()

----------------------------------------

TITLE: Installing Azure Data Lake Analytics Module in Go
DESCRIPTION: This command installs the Azure Data Lake Analytics module using Go's package manager. It requires Go modules for versioning and dependency management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/datalake-analytics/armdatalakeanalytics

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK Go Generation
DESCRIPTION: This YAML configuration sets up AutoRest for generating Azure SDK for Go. It specifies Azure ARM mode, required API specifications, license header, and module version. The configuration targets Power BI Private Links resource manager.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/f790e624d0d080b89d962a3bd19c65bc6a6b2f5e/specification/powerbiprivatelinks/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/f790e624d0d080b89d962a3bd19c65bc6a6b2f5e/specification/powerbiprivatelinks/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 2.1.0

----------------------------------------

TITLE: Creating Azure Arc VMware Client Factory
DESCRIPTION: Initializes a client factory for Azure Arc VMware Management with basic configuration.

LANGUAGE: go
CODE:
clientFactory, err := armconnectedvmware.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Module Constants Removal Directive
DESCRIPTION: AutoRest directive to remove moduleName and moduleVersion constants from the constants.go file.

LANGUAGE: yaml
CODE:
directive:
  - from: constants.go
    where: $
    transform: return $.replace(/const \(\n\s+moduleName.+\n\s+moduleVersion.+\n\)\n/, "");

----------------------------------------

TITLE: Authenticating with Azure using DefaultAzureCredential in Go
DESCRIPTION: Creates a default Azure credential for authentication with Azure resources using the azidentity package.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Creating Azure Deployment Manager Client Factory in Go
DESCRIPTION: This code creates a client factory for Azure Deployment Manager. It requires a subscription ID and credentials. The factory can be used to create specific clients within the module.

LANGUAGE: go
CODE:
clientFactory, err := armdeploymentmanager.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Creating Secret using New AzSecrets Module in Go
DESCRIPTION: Example showing how to create a secret using the new azsecrets module. Uses azidentity for authentication and requires vault URL only during client initialization.

LANGUAGE: go
CODE:
package main

import (
    "context"
	"fmt"

	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/security/keyvault/azsecrets"
)

func main() {
	vaultURL := "https://<TODO: your vault name>.vault.azure.net"
    secretName := "mySecret"
	secretValue := "mySecretValue"

	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		// TODO: handle error
	}

	client, err := azsecrets.NewClient(vaultURL, cred, nil)
	if err != nil {
		// TODO: handle error
	}

	resp, err := client.SetSecret(context.TODO(), secretName, azsecrets.SetSecretParameters{Value: &secretValue}, nil)
	if err != nil {
		// TODO: handle error
	}

	fmt.Printf("Set secret %s", resp.ID.Name())
}

----------------------------------------

TITLE: Configuring AutoRest for Azure Machine Learning Services SDK Generation
DESCRIPTION: YAML configuration for AutoRest to generate the Azure Machine Learning Services SDK. It specifies Azure ARM mode, required API specifications, license header, and module version.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/machinelearningservices/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/machinelearningservices/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.0.1

----------------------------------------

TITLE: Markdown Release History Document
DESCRIPTION: Changelog entries documenting version updates for the Azure SDK for Go, including features, bug fixes, and breaking changes across versions 1.0.0 through 1.2.0.

LANGUAGE: markdown
CODE:
# Release History

## 1.2.0 (2023-11-24)
### Features Added

- Support for test fakes and OpenTelemetry trace spans.


## 1.1.1 (2023-04-14)
### Bug Fixes

- Fix serialization bug of empty value of `any` type.


## 1.1.0 (2023-03-28)
### Features Added

- New struct `ClientFactory` which is a client factory used to create any client in this module


## 1.0.0 (2022-07-15)

The package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/fluidrelay/armfluidrelay` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html) since version 1.0.0, which contains breaking changes.

To migrate the existing applications to the latest version, please refer to [Migration Guide](https://aka.ms/azsdk/go/mgmt/migration).

To learn more, please refer to our documentation [Quick Start](https://aka.ms/azsdk/go/mgmt).

----------------------------------------

TITLE: Breaking Change: Contact Client Parameter Update
DESCRIPTION: Parameter signature changes for ContactsClient methods Create, Delete and Get, replacing string with SecurityContactName type.

LANGUAGE: go
CODE:
// Before
func (client *ContactsClient) Create(ctx context.Context, name string, contact Contact, options *ContactsClientCreateOptions) (...)

// After
func (client *ContactsClient) Create(ctx context.Context, name SecurityContactName, contact Contact, options *ContactsClientCreateOptions) (...)

----------------------------------------

TITLE: Configuring AutoRest for Azure Event Hubs SDK Generation in YAML
DESCRIPTION: This YAML configuration specifies settings for AutoRest to generate the Azure Event Hubs SDK for Go. It includes references to API specifications, sets the Azure ARM flag, defines the license header, module version, and API version tag.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/5759c77eee2d57bdb9e47aa1805d0ffb61704f2d/specification/eventhub/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/5759c77eee2d57bdb9e47aa1805d0ffb61704f2d/specification/eventhub/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.4.0-beta.1
tag: package-2024-05-preview

----------------------------------------

TITLE: Example Breaking Change in v4.0.0
DESCRIPTION: Shows type changes for FunctionsAlwaysReadyConfig properties from float32 to int32

LANGUAGE: go
CODE:
Type of `FunctionsAlwaysReadyConfig.InstanceCount` has been changed from `*float32` to `*int32`
Type of `FunctionsScaleAndConcurrency.InstanceMemoryMB` has been changed from `*float32` to `*int32`
Type of `FunctionsScaleAndConcurrency.MaximumInstanceCount` has been changed from `*float32` to `*int32`
Type of `FunctionsScaleAndConcurrencyTriggersHTTP.PerInstanceConcurrency` has been changed from `*float32` to `*int32`

----------------------------------------

TITLE: Creating SAP Discovery Sites Client
DESCRIPTION: Instantiates a new SAP Discovery Sites client using the client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewSapDiscoverySitesClient()

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK Go Generation
DESCRIPTION: This YAML configuration specifies settings for AutoRest to generate the Azure SDK for Go. It sets the Azure ARM flag, requires specific API specifications, defines the license header, module version, and API version tag.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/685aad3f33d355c1d9c89d493ee9398865367bd8/specification/appplatform/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/685aad3f33d355c1d9c89d493ee9398865367bd8/specification/appplatform/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 2.0.0
tag: package-2023-12

----------------------------------------

TITLE: Configuring AutoRest for Azure Data Lake Store Go SDK Generation
DESCRIPTION: YAML configuration for AutoRest tool to generate Go SDK code for Azure Data Lake Store. Specifies Azure ARM mode, required API specification sources from GitHub, Microsoft MIT license header requirement, and module version 1.2.0.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/7a2ac91de424f271cf91cc8009f3fe9ee8249086/specification/datalake-store/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/7a2ac91de424f271cf91cc8009f3fe9ee8249086/specification/datalake-store/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.2.0

----------------------------------------

TITLE: Default Azure Test Resource Deployment
DESCRIPTION: PowerShell syntax for deploying test resources using default parameters. This snippet shows the basic command structure with optional parameters for base configuration.

LANGUAGE: powershell
CODE:
New-TestResources.ps1 [-BaseName <String>] [-ResourceGroupName <String>] [-ServiceDirectory] <String>
 [-TestResourcesDirectory <String>] [-TestApplicationId <String>] [-TestApplicationSecret <String>]
 [-TestApplicationOid <String>] [-SubscriptionId <String>] [-DeleteAfterHours <Int32>] [-Location <String>]
 [-Environment <String>] [-ResourceType <String>] [-ArmTemplateParameters <Hashtable>]
 [-AdditionalParameters <Hashtable>] [-EnvironmentVariables <Hashtable>] [-CI] [-Force] [-OutFile]
 [-SuppressVsoCommands] [-ServicePrincipalAuth] [-NewTestResourcesRemainingArguments <Object>]
 [-ProgressAction <ActionPreference>] [-WhatIf] [-Confirm] [<CommonParameters>]

----------------------------------------

TITLE: Installing Azure Policy Insight Module in Go
DESCRIPTION: This snippet demonstrates how to install the Azure Policy Insight module using Go's package manager. It requires Go modules for versioning and dependency management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/policyinsights/armpolicyinsights

----------------------------------------

TITLE: Creating Azure Confluent Access Client in Go
DESCRIPTION: Example of creating an Access Client using the Azure Confluent client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewAccessClient()

----------------------------------------

TITLE: Authenticating with Azure using Default Azure Credential in Go
DESCRIPTION: Code snippet demonstrating how to create a default Azure credential for authentication. This credential can be used to authenticate with Azure services.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Installing Azure DNS Private Resolver Module in Go
DESCRIPTION: Command to install the Azure DNS Private Resolver module using Go's package manager.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/dnsresolver/armdnsresolver

----------------------------------------

TITLE: Implementing MaxIntegratedCacheStaleness Option in Azure Cosmos DB Go SDK
DESCRIPTION: Addition of MaxIntegratedCacheStaleness option support in the Azure SDK for Go Cosmos DB client. This feature was added in version 1.1.0.

LANGUAGE: markdown
CODE:
* Added support for MaxIntegratedCacheStaleness option See [PR 23406](https://github.com/Azure/azure-sdk-for-go/pull/23406)

----------------------------------------

TITLE: Installing Azure IoT Security Module in Go
DESCRIPTION: Command to install the Azure IoT Security module using Go modules. This command fetches the module from the Azure SDK for Go repository.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/iotsecurity/armiotsecurity

----------------------------------------

TITLE: Version History Entry - 0.7.1
DESCRIPTION: Release notes for version 0.7.1 documenting bug fix for serialization of empty any type values

LANGUAGE: markdown
CODE:
## 0.7.1 (2023-04-14)
### Bug Fixes

- Fix serialization bug of empty value of `any` type.

----------------------------------------

TITLE: Creating Management Configurations Client in Go
DESCRIPTION: This snippet shows how to create a specific client (ManagementConfigurationsClient) using the client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewManagementConfigurationsClient()

----------------------------------------

TITLE: Creating Azure Resource Links Client Factory
DESCRIPTION: Initializes a new client factory for Azure Resource Links with basic configuration.

LANGUAGE: go
CODE:
clientFactory, err := armlinks.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Creating an Azure Dedicated HSM Client Factory
DESCRIPTION: This code creates a client factory for Azure Dedicated HSM, which can be used to instantiate specific clients.

LANGUAGE: go
CODE:
clientFactory, err := armhardwaresecuritymodules.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Fixing Time Format for File-Related Headers
DESCRIPTION: YAML directive to fix the time format for parsing response headers related to file creation, last write, and change times.

LANGUAGE: yaml
CODE:
directive:
  - from:
    - zz_directory_client.go
    - zz_file_client.go
    where: $
    transform: >
      return $.
        replace(/fileCreationTime,\s+err\s+\:=\s+time\.Parse\(time\.RFC1123,\s+val\)/g, `fileCreationTime, err := time.Parse(ISO8601, val)`).
        replace(/fileLastWriteTime,\s+err\s+\:=\s+time\.Parse\(time\.RFC1123,\s+val\)/g, `fileLastWriteTime, err := time.Parse(ISO8601, val)`).
        replace(/fileChangeTime,\s+err\s+\:=\s+time\.Parse\(time\.RFC1123,\s+val\)/g, `fileChangeTime, err := time.Parse(ISO8601, val)`);

----------------------------------------

TITLE: Configuring AutoRest for Azure Media Services Go SDK
DESCRIPTION: YAML configuration for AutoRest that defines the parameters needed to generate the Azure Media Services SDK for Go. Specifies the Azure ARM mode, required API specification sources, license header type, and module version.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/e7bf3adfa2d5e5cdbb804eec35279501794f461c/specification/mediaservices/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/e7bf3adfa2d5e5cdbb804eec35279501794f461c/specification/mediaservices/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 3.4.0

----------------------------------------

TITLE: Configuring AutoRest for Azure Billing SDK Generation
DESCRIPTION: YAML configuration that defines parameters for generating Azure Billing SDK code using AutoRest. Specifies the source API specifications, license header type, module version, and API version tag to use.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/c08ac9813477921ad8295b98ced8f82d11b8f913/specification/billing/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/c08ac9813477921ad8295b98ced8f82d11b8f913/specification/billing/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.0.0
tag: package-2024-04

----------------------------------------

TITLE: Configuring AutoRest for Azure SQL SDK Generation in YAML
DESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure SQL SDK for Go. It enables Azure ARM mode, specifies required specification files, sets the license header, module version, and package tag.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/a3913f4b26467aed413cdc907116e99894f08994/specification/sql/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/a3913f4b26467aed413cdc907116e99894f08994/specification/sql/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 2.0.0-beta.6
tag: package-composite-v5

----------------------------------------

TITLE: Importing Azure Automanage and Azure Identity modules in Go
DESCRIPTION: Go import statements for including the Azure Automanage and Azure Identity modules in your project.

LANGUAGE: go
CODE:
import (
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/automanage/armautomanage"
)

----------------------------------------

TITLE: Installing Azure Database for MySQL Module in Go
DESCRIPTION: This snippet demonstrates how to install the Azure Database for MySQL module using Go's package manager.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/mysql/armmysqlflexibleservers/v2

----------------------------------------

TITLE: Creating Azure Hybrid Data Client Factory
DESCRIPTION: Initializes a client factory for Azure Hybrid Data services using subscription ID and credentials.

LANGUAGE: go
CODE:
clientFactory, err := armazurearcdata.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Authenticating with Azure Using Default Credentials in Go
DESCRIPTION: This code snippet shows how to create a default Azure credential for authentication. It uses the azidentity package to create a DefaultAzureCredential object.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Creating Data Lake Store Accounts Client
DESCRIPTION: Instantiates a new accounts client using the client factory

LANGUAGE: go
CODE:
client := clientFactory.NewAccountsClient()

----------------------------------------

TITLE: Installing Azure Stack HCI Module
DESCRIPTION: Command to install the Azure Stack HCI module using Go modules for dependency management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/azurestackhci/armazurestackhci/v2

----------------------------------------

TITLE: Adding New Struct in Go
DESCRIPTION: Example of adding a new struct type in Go.

LANGUAGE: go
CODE:
// New struct added
type ChangeKeyVault struct {
    // Fields
}

----------------------------------------

TITLE: Installing Azure Stack HCI Module
DESCRIPTION: Command to install the Azure Stack HCI module using Go modules for dependency management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/azurestackhci/armazurestackhci/v2

----------------------------------------

TITLE: Configuring AutoRest YAML for Azure Compute SDK Generation
DESCRIPTION: Defines AutoRest configuration parameters for generating Azure Compute SDK code. Specifies Azure ARM mode, required API specifications, license header type, module version 6.3.0, and API version package tag.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/d6d0798c6f5eb196fba7bd1924db2b145a94f58c/specification/compute/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/d6d0798c6f5eb196fba7bd1924db2b145a94f58c/specification/compute/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 6.3.0
tag: package-2024-11-04

----------------------------------------

TITLE: Breaking Changes Announcement for Workload Monitor SDK in Markdown
DESCRIPTION: Markdown content announcing breaking changes in version 0.5.0 of the Workload Monitor SDK, including links to migration guide and quick start documentation.

LANGUAGE: markdown
CODE:
## 0.5.0 (2022-05-18)

The package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/workloadmonitor/armworkloadmonitor` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html) since version 0.5.0, which contains breaking changes.

To migrate the existing applications to the latest version, please refer to [Migration Guide](https://aka.ms/azsdk/go/mgmt/migration).

To learn more, please refer to our documentation [Quick Start](https://aka.ms/azsdk/go/mgmt).

----------------------------------------

TITLE: Creating Azure DevOps Infrastructure Client Factory in Go
DESCRIPTION: This code creates a client factory for Azure DevOps Infrastructure. It requires a subscription ID and a credential object for authentication.

LANGUAGE: go
CODE:
clientFactory, err := armdevopsinfrastructure.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Installing Azure Event Grid System Events Module
DESCRIPTION: Command to install the Azure Event Grid system events module using Go's package manager

LANGUAGE: bash
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/messaging/eventgrid/azsystemevents

----------------------------------------

TITLE: Making Duration Parameter Required in Leases
DESCRIPTION: YAML directive to change the 'Duration' parameter in leases to be required.

LANGUAGE: yaml
CODE:
directive:
- from: swagger-document
  where: $.parameters.LeaseDuration
  transform: >
    $.required = true;

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK Go Generation
DESCRIPTION: YAML configuration for AutoRest to generate Azure SDK for Go. It specifies the Azure ARM mode, required API specifications, license header, and module version.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/marketplace/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/marketplace/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.2.0

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK Go Generation
DESCRIPTION: YAML configuration for AutoRest to generate Azure SDK for Go. It sets Azure ARM mode, specifies required specification files from Azure REST API specs repository, defines license header, module version, and targets the package-2024-02 API version.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/cf5ad1932d00c7d15497705ad6b71171d3d68b1e/specification/confluent/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/cf5ad1932d00c7d15497705ad6b71171d3d68b1e/specification/confluent/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.3.0
tag: package-2024-02

----------------------------------------

TITLE: Authenticating with Azure using DefaultAzureCredential in Go
DESCRIPTION: Code snippet demonstrating how to create a default Azure credential for authentication.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Creating Azure Default Credential
DESCRIPTION: Initializes default Azure credentials for authentication with Azure services.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Configuring Azure Management Partner Client for Sovereign Clouds in Go
DESCRIPTION: Example of setting up a client factory with options for connecting to sovereign clouds or Azure Stack.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armmanagementpartner.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Configuring Azure Management Partner Client for Sovereign Clouds in Go
DESCRIPTION: Example of setting up a client factory with options for connecting to sovereign clouds or Azure Stack.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armmanagementpartner.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Installing Azure Advisor Module in Go
DESCRIPTION: Command to install the Azure Advisor module using Go modules.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/advisor/armadvisor

----------------------------------------

TITLE: Creating Azure Default Credential in Go
DESCRIPTION: This snippet demonstrates how to create a default Azure credential using the azidentity package. This credential is used for authenticating with Azure Quota services.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Defining New Enum Types in Go
DESCRIPTION: Example of new enum types added in version 9.1.0

LANGUAGE: Go
CODE:
type SQLServerAuthenticationType string

const (
    SQLServerAuthenticationTypeUserAssignedManagedIdentity SQLServerAuthenticationType = "UserAssignedManagedIdentity"
)

----------------------------------------

TITLE: Configuring AutoRest Generation for Azure CDN Go SDK
DESCRIPTION: YAML configuration for AutoRest tool to generate the Azure CDN SDK for Go. Specifies the ARM mode, required API specifications, license header, module version, and modeling parameters. References specific versions of Azure REST API specs for CDN services.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/92de53a5f1e0e03c94b40475d2135d97148ed014/specification/cdn/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/92de53a5f1e0e03c94b40475d2135d97148ed014/specification/cdn/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 2.2.0
modelerfour:
  lenient-model-deduplication: true
tag: package-2024-02

----------------------------------------

TITLE: Azure SDK Release Notes
DESCRIPTION: Markdown formatted release history detailing version changes, new features, bug fixes and other modifications across multiple versions of the Azure SDK for Go.

LANGUAGE: markdown
CODE:
# Release History

## 1.3.0 (2023-11-24)
### Features Added

- Support for test fakes and OpenTelemetry trace spans.


## 1.3.0-beta.3 (2023-10-09)

### Other Changes

- Updated to latest `azcore` beta.

## 1.3.0-beta.2 (2023-07-19)

### Bug Fixes

- Fixed a potential panic in faked paged and long-running operations.

## 1.3.0-beta.1 (2023-06-12)

### Features Added

- Support for test fakes and OpenTelemetry trace spans.

## 1.2.0 (2023-05-26)
### Features Added

- New enum type `ActionType` with values `ActionTypeInternal`
- New enum type `Origin` with values `OriginSystem`, `OriginUser`, `OriginUserSystem`
- New function `*ClientFactory.NewOperationsClient() *OperationsClient`
- New function `NewOperationsClient(azcore.TokenCredential, *arm.ClientOptions) (*OperationsClient, error)`
- New function `*OperationsClient.NewListPager(*OperationsClientListOptions) *runtime.Pager[OperationsClientListResponse]`
- New struct `AvailabilityZoneMappings`
- New struct `OperationAutoGenerated`
- New struct `OperationDisplayAutoGenerated`
- New struct `OperationListResultAutoGenerated`
- New field `AvailabilityZoneMappings` in struct `Location`
- New field `Geography` in struct `LocationMetadata`
- New field `ActionType`, `IsDataAction`, `Origin` in struct `Operation`


## 1.1.1 (2023-04-14)
### Bug Fixes

- Fix serialization bug of empty value of `any` type.


## 1.1.0 (2023-03-27)
### Features Added

- New struct `ClientFactory` which is a client factory used to create any client in this module


## 1.0.0 (2022-05-16)

The package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armsubscriptions` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html) since version 1.0.0, which contains breaking changes.

To migrate the existing applications to the latest version, please refer to [Migration Guide](https://aka.ms/azsdk/go/mgmt/migration).

To learn more, please refer to our documentation [Quick Start](https://aka.ms/azsdk/go/mgmt).

----------------------------------------

TITLE: Configuring AutoRest Settings for Azure Edge Order SDK
DESCRIPTION: YAML configuration for AutoRest code generation. Specifies Azure ARM mode, required API specifications from the azure-rest-api-specs repository, license header type, and module version settings.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/edgeorder/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/edgeorder/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.2.0

----------------------------------------

TITLE: Creating Azure Resource Mover Move Collections Client in Go
DESCRIPTION: This code demonstrates how to create a specific client for managing move collections using the client factory. This client provides access to move collection-related operations in Azure Resource Mover.

LANGUAGE: go
CODE:
client := clientFactory.NewMoveCollectionsClient()

----------------------------------------

TITLE: Authenticating with Azure Credentials
DESCRIPTION: Creating default Azure credentials for authentication with Azure Front Door services.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Converting StringEncoded to string Type
DESCRIPTION: YAML directive to convert StringEncoded type to string in the generated models.

LANGUAGE: yaml
CODE:
directive:
  - from: zz_models.go
    where: $
    transform: >
      return $.
        replace(/\*StringEncoded/g, `*string`);

----------------------------------------

TITLE: Initializing Azure Marketplace Ordering Client Factory in Go
DESCRIPTION: Code snippet showing how to create a client factory for Azure Marketplace Ordering. It requires a subscription ID and credential.

LANGUAGE: go
CODE:
clientFactory, err := armmarketplaceordering.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Installing Azure Lab Services Go SDK
DESCRIPTION: Command to install the Azure Lab Services module using Go modules

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/devtestlabs/armdevtestlabs

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK Generation in Go
DESCRIPTION: This YAML configuration sets up AutoRest for generating the Azure SDK for Go, specifically for the Data Box Edge resource manager. It specifies the Azure ARM mode, required API specifications, license header, and module version.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/databoxedge/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/databoxedge/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.2.0

----------------------------------------

TITLE: Installing Azure Newrelic Module for Go
DESCRIPTION: This command installs the Azure Newrelic module using Go's package manager. It requires Go modules for versioning and dependency management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/newrelic/armnewrelicobservability

----------------------------------------

TITLE: Configuring Azure Resources Client for Sovereign Clouds in Go
DESCRIPTION: This snippet demonstrates how to configure the client factory to connect to sovereign clouds or Azure Stack.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armdeploymentstacks.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK Go Generation
DESCRIPTION: YAML configuration for AutoRest to generate Go SDK code for Azure Logz resource manager. It specifies Azure ARM settings, required API specifications from GitHub, licensing header, and module version.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/logz/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/logz/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.2.1

----------------------------------------

TITLE: Authenticating with Azure using Default Credential in Go
DESCRIPTION: This snippet demonstrates how to create a default Azure credential for authentication. It uses the azidentity package to create a DefaultAzureCredential object.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Creating Azure Backup Instances Client in Go
DESCRIPTION: This code shows how to create a specific client for working with backup instances using the client factory. This client provides access to backup instance-related APIs.

LANGUAGE: go
CODE:
client := clientFactory.NewBackupInstancesClient()

----------------------------------------

TITLE: Retrieving an Azure Automanage Configuration Profile in Go
DESCRIPTION: Fetches an existing Automanage configuration profile and prints its details as JSON.

LANGUAGE: go
CODE:
profile, err := configProfilesClient.Get(context.Background(), "configurationProfileName", "resourceGroupName", nil)
data, err := json.MarshalIndent(profile, "", "   ")

fmt.Println(string(data))

----------------------------------------

TITLE: Adding New Structs for SignalR Service in Go
DESCRIPTION: New structs added to represent various aspects of SignalR service, including IP rules, replicas, and network ACLs.

LANGUAGE: Go
CODE:
type IPRule struct {}

LANGUAGE: Go
CODE:
type Replica struct {}

LANGUAGE: Go
CODE:
type ReplicaList struct {}

LANGUAGE: Go
CODE:
type ReplicaProperties struct {}

LANGUAGE: Go
CODE:
type ServerlessSettings struct {}

----------------------------------------

TITLE: Authenticating with Azure Using Default Credentials in Go
DESCRIPTION: Creates a default Azure credential object for authentication with Azure services.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Installing Azure Networkcloud Module
DESCRIPTION: Command to install the Azure Networkcloud module using Go modules package management system.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/networkcloud/armnetworkcloud

----------------------------------------

TITLE: Adding 'directories' to ListBlobsShowOnly Enum
DESCRIPTION: YAML directive to add 'directories' to the ListBlobsShowOnly enum if it doesn't already exist.

LANGUAGE: yaml
CODE:
directive:
- from: swagger-document
  where: $.parameters.ListBlobsShowOnly
  transform: >
    if (!$.enum.includes("directories")) {
        $.enum.push("directories");
    }

----------------------------------------

TITLE: Creating Azure Management Partner Client Factory in Go
DESCRIPTION: Code snippet showing how to create a client factory for Azure Management Partner services.

LANGUAGE: go
CODE:
clientFactory, err := armmanagementpartner.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK Go Generation
DESCRIPTION: YAML configuration for AutoRest to generate Azure SDK for Go. It specifies Azure ARM mode, required API specifications, license header, and module version for the Customer Lockbox service.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/customerlockbox/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/customerlockbox/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 0.7.0

----------------------------------------

TITLE: Creating Source Control Configurations Client
DESCRIPTION: Instantiates a new source control configurations client using the client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewSourceControlConfigurationsClient()

----------------------------------------

TITLE: Adding New Enum Values in Go
DESCRIPTION: New enum values are added to existing enum types like ModelLifecycleStatus and ByPassSelection.

LANGUAGE: Go
CODE:
type ModelLifecycleStatus string

const (
    ModelLifecycleStatusDeprecated ModelLifecycleStatus = "Deprecated"
    ModelLifecycleStatusDeprecating ModelLifecycleStatus = "Deprecating"
    ModelLifecycleStatusStable ModelLifecycleStatus = "Stable"
)

type ByPassSelection string

const (
    ByPassSelectionAzureServices ByPassSelection = "AzureServices"
    ByPassSelectionNone ByPassSelection = "None"
)

----------------------------------------

TITLE: Configuring AutoRest Settings for Azure SDK Generation
DESCRIPTION: Defines the configuration parameters for AutoRest to generate Go SDK code from Azure REST API specifications. References specific versions of API specs from the azure-rest-api-specs repository and sets build parameters like licensing and module version.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/72de08114673a547de8a017c85ed89a2017a86f7/specification/liftrqumulo/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/72de08114673a547de8a017c85ed89a2017a86f7/specification/liftrqumulo/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 2.0.0
tag: package-2024-06-19

----------------------------------------

TITLE: Creating Agent Pools Client
DESCRIPTION: Creates a specific client instance for working with Agent Pools using the client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewAgentPoolsClient()

----------------------------------------

TITLE: Validating Cross-Region Restore for BackupInstances in Go
DESCRIPTION: Validates a cross-region restore operation for backup instances using the BackupInstancesClient.

LANGUAGE: Go
CODE:
*BackupInstancesClient.BeginValidateCrossRegionRestore(context.Context, string, string, ValidateCrossRegionRestoreRequestObject, *BackupInstancesClientBeginValidateCrossRegionRestoreOptions) (*runtime.Poller[BackupInstancesClientValidateCrossRegionRestoreResponse], error)

----------------------------------------

TITLE: Installing Azure Database for PostgreSQL Module in Go
DESCRIPTION: Uses go get command to install the Azure Database for PostgreSQL module from the Azure SDK for Go.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/postgresql/armpostgresql

----------------------------------------

TITLE: Installing Azure Maps Go SDK
DESCRIPTION: Command to install the Azure Maps module using Go modules for dependency management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/maps/armmaps

----------------------------------------

TITLE: Package Path Declaration in Markdown
DESCRIPTION: Specifies the Go package path for the Azure Astro Resource Manager SDK component.

LANGUAGE: markdown
CODE:
github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/astro/armastro

----------------------------------------

TITLE: Creating New AccessClient in Go
DESCRIPTION: This snippet shows how to create a new AccessClient using the NewAccessClient function. It requires a string parameter, an Azure token credential, and optional client options.

LANGUAGE: Go
CODE:
NewAccessClient(string, azcore.TokenCredential, *arm.ClientOptions) (*AccessClient, error)

----------------------------------------

TITLE: Configuring AutoRest Settings for Azure Guest Configuration SDK
DESCRIPTION: YAML configuration for AutoRest code generation. Specifies Azure ARM mode, references to API specifications, MIT license header requirement, and module version 1.2.0. Dependencies include Azure REST API specifications from the specified GitHub repository.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/7a2ac91de424f271cf91cc8009f3fe9ee8249086/specification/guestconfiguration/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/7a2ac91de424f271cf91cc8009f3fe9ee8249086/specification/guestconfiguration/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.2.0

----------------------------------------

TITLE: Creating Azure Resource Connector Appliances Client in Go
DESCRIPTION: Creates a specific client for working with Azure Resource Connector Appliances using the client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewAppliancesClient()

----------------------------------------

TITLE: Creating Resource Graph Client Factory
DESCRIPTION: Initializes a new client factory for Azure Resource Graph operations using subscription ID and credentials

LANGUAGE: go
CODE:
clientFactory, err := armresourcegraph.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Creating Confidential Ledger Client
DESCRIPTION: Instantiates a new Confidential Ledger client using the client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewClient()

----------------------------------------

TITLE: Modifying FileSystemClient ListPaths Methods
DESCRIPTION: YAML directive to remove pager methods and export various generated methods for ListPaths in the filesystem client.

LANGUAGE: yaml
CODE:
directive:
  - from: zz_filesystem_client.go
    where: $
    transform: >
      return $.
        replace(/func \(client \*FileSystemClient\) NewListPathsPager\(.+\/\/ listPathsCreateRequest creates the ListPaths request/s, `//\n// ListPathsCreateRequest creates the ListPaths request`).
        replace(/\(client \*FileSystemClient\) listPathsCreateRequest\(/, `(client *FileSystemClient) ListPathsCreateRequest(`).
        replace(/\(client \*FileSystemClient\) listPathsHandleResponse\(/, `(client *FileSystemClient) ListPathsHandleResponse(`);

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK for Go Generation
DESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure SDK for Go. It specifies the Azure ARM mode, required API specifications, license header, and module version.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/m365securityandcompliance/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/m365securityandcompliance/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 0.7.0

----------------------------------------

TITLE: Configuring Azure Client Options for Different Clouds
DESCRIPTION: Sets up client options for connecting to different Azure clouds, including sovereign clouds and Azure Stack.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armsubscriptions.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Defining New Enum Types in Go
DESCRIPTION: New enum types added in version 4.1.0 for NAS encryption and other mobile network concepts.

LANGUAGE: go
CODE:
type NasEncryptionType string

const (
    NasEncryptionTypeNEA0EEA0 NasEncryptionType = "NEA0EEA0"
    NasEncryptionTypeNEA1EEA1 NasEncryptionType = "NEA1EEA1"
    NasEncryptionTypeNEA2EEA2 NasEncryptionType = "NEA2EEA2"
)

----------------------------------------

TITLE: Database Client Implementation - Kusto SDK v2.0.0
DESCRIPTION: Implements new database client functionality including follower database management and migration capabilities. Includes methods for inviting followers and handling migrations.

LANGUAGE: Go
CODE:
func NewDatabaseClient(string, azcore.TokenCredential, *arm.ClientOptions) (*DatabaseClient, error)

func (client *DatabaseClient) InviteFollower(context.Context, string, string, string, DatabaseInviteFollowerRequest, *DatabaseClientInviteFollowerOptions) (DatabaseClientInviteFollowerResponse, error)

----------------------------------------

TITLE: Creating Default Azure Credential in Go
DESCRIPTION: This snippet demonstrates how to create a default Azure credential using the azidentity package.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Authenticating with Azure Credentials
DESCRIPTION: Creates a default Azure credential object for authentication with Azure services.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Configuring Client Options for Different Clouds
DESCRIPTION: Sets up client options for connecting to different Azure clouds including sovereign clouds and Azure Stack

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armdelegatednetwork.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Installing Azure Storage Caches Module
DESCRIPTION: Command to install the Azure Storage Caches module using Go modules.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/storagecache/armstoragecache/v4

----------------------------------------

TITLE: Creating Azure Servicenetworking Client Factory
DESCRIPTION: Initializes a client factory for Azure Servicenetworking with basic configuration.

LANGUAGE: go
CODE:
clientFactory, err := armservicenetworking.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Creating Azure Chaos Capabilities Client
DESCRIPTION: Creates a specific client instance for accessing Chaos capabilities API.

LANGUAGE: go
CODE:
client := clientFactory.NewCapabilitiesClient()

----------------------------------------

TITLE: Updating URL Encoding for Service Client
DESCRIPTION: YAML directive to replace '+' with '%20' in URL encoding to avoid disruption with the service.

LANGUAGE: yaml
CODE:
directive:
- from: zz_service_client.go
  where: $
  transform: >
    return $.
      replace(/req.Raw\(\).URL.RawQuery \= reqQP.Encode\(\)/, `req.Raw().URL.RawQuery = strings.Replace(reqQP.Encode(), "+", "%20", -1)`);

----------------------------------------

TITLE: Creating Lab Services Client
DESCRIPTION: Creates a new Lab Plans client using the client factory to access specific API functionality.

LANGUAGE: go
CODE:
client := clientFactory.NewLabPlansClient()

----------------------------------------

TITLE: Configuring AutoRest for Azure Batch Resource Manager SDK Generation in YAML
DESCRIPTION: This YAML configuration specifies settings for AutoRest to generate the Azure Batch Resource Manager SDK. It sets the Azure ARM flag, includes required specification files, defines the license header, module version, and API version tag.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/e79d9ef3e065f2dcb6bd1db51e29c62a99dff5cb/specification/batch/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/e79d9ef3e065f2dcb6bd1db51e29c62a99dff5cb/specification/batch/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 3.0.0
tag: package-2024-07

----------------------------------------

TITLE: Creating New Client Functions in Go
DESCRIPTION: New client functions are added to create various client types like DefenderForAISettingsClient and EncryptionScopesClient.

LANGUAGE: Go
CODE:
func (*ClientFactory) NewDefenderForAISettingsClient() *DefenderForAISettingsClient
func (*ClientFactory) NewEncryptionScopesClient() *EncryptionScopesClient
func (*ClientFactory) NewLocationBasedModelCapacitiesClient() *LocationBasedModelCapacitiesClient

----------------------------------------

TITLE: Defining ResolutionPolicy Enum in Go for Azure Private DNS
DESCRIPTION: Introduces a new enum type 'ResolutionPolicy' with values for default and NX domain redirect policies. Also adds a new field 'ResolutionPolicy' to the VirtualNetworkLinkProperties struct.

LANGUAGE: markdown
CODE:
### Features Added

- New enum type `ResolutionPolicy` with values `ResolutionPolicyDefault`, `ResolutionPolicyNxDomainRedirect`
- New field `ResolutionPolicy` in struct `VirtualNetworkLinkProperties`

----------------------------------------

TITLE: Configuring AutoRest for Azure Key Vault SDK Generation in Go
DESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure Key Vault SDK for Go. It specifies the Azure ARM mode, required API specifications, license header, module version, and other key settings.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/9ec0fcc278aa2128c4fbb2b8a1aa93432d72cce0/specification/keyvault/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/9ec0fcc278aa2128c4fbb2b8a1aa93432d72cce0/specification/keyvault/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.4.0
modelerfour:
  seal-single-value-enum-by-default: true
tag: package-2023-07

----------------------------------------

TITLE: Configuring Client Options for Different Azure Clouds
DESCRIPTION: Sets up client options to connect to specific Azure cloud environments like Azure China

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armmanagedservices.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Authenticating with Azure Application Insight in Go
DESCRIPTION: This code demonstrates how to create a default Azure credential for authentication. It uses the azidentity package to create a NewDefaultAzureCredential object.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Creating Delegated Network Client
DESCRIPTION: Creates a new client instance from the client factory for accessing Azure Delegated Network APIs

LANGUAGE: go
CODE:
client := clientFactory.NewClient()

----------------------------------------

TITLE: Configuring AutoRest for Azure Analysis Services SDK Generation in YAML
DESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure Analysis Services SDK for Go. It specifies Azure ARM compatibility, required API specifications from GitHub, license header, and module version.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/7a2ac91de424f271cf91cc8009f3fe9ee8249086/specification/analysisservices/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/7a2ac91de424f271cf91cc8009f3fe9ee8249086/specification/analysisservices/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.2.0

----------------------------------------

TITLE: Creating Operational Insights Client Factory
DESCRIPTION: Initializes a client factory for Azure Operational Insights with subscription ID and credentials

LANGUAGE: go
CODE:
clientFactory, err := armoperationalinsights.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Listing Federated Identity Credentials with Pager in Go
DESCRIPTION: Shows how to create a new pager for listing federated identity credentials using the FederatedIdentityCredentialsClient.

LANGUAGE: Go
CODE:
*FederatedIdentityCredentialsClient.NewListPager(string, string, *FederatedIdentityCredentialsClientListOptions) *runtime.Pager[FederatedIdentityCredentialsClientListResponse]

----------------------------------------

TITLE: Configuring AutoRest for Azure MySQL Go SDK Generation
DESCRIPTION: YAML configuration for AutoRest that defines the settings for generating Azure MySQL SDK code. It references specific versions of Azure REST API specs, sets the license header, module version, and includes a directive to transform the CloudError definition.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/7a2ac91de424f271cf91cc8009f3fe9ee8249086/specification/mysql/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/7a2ac91de424f271cf91cc8009f3fe9ee8249086/specification/mysql/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.2.0
package-singleservers: true
directive:
- from: Servers.json
  where: $.definitions.CloudError.properties.error
  transform: >
    $["description"] = undefined

----------------------------------------

TITLE: Authentication Setup with Azure Identity
DESCRIPTION: Creates default Azure credentials for authentication with Azure Lab Services using the azidentity module.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK Go Generation
DESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure SDK for Go. It specifies the Azure ARM mode, required OpenAPI specifications, license header, module version, and API version tag for the App Configuration resource manager.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/d477c7caa09bf82e22c419be0a99d170552b5892/specification/appconfiguration/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/d477c7caa09bf82e22c419be0a99d170552b5892/specification/appconfiguration/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 2.2.0
tag: package-2024-05-01

----------------------------------------

TITLE: Updating Service Version to 2025-05-05
DESCRIPTION: YAML directive to update the service version to 2025-05-05 in various client files.

LANGUAGE: yaml
CODE:
directive:
- from: 
  - zz_service_client.go
  - zz_filesystem_client.go 
  - zz_path_client.go
  where: $
  transform: >
    return $.
      replaceAll(`[]string{"2025-01-05"}`, `[]string{ServiceVersion}`);

----------------------------------------

TITLE: Modifying Module Name and Version References in Client Files
DESCRIPTION: This YAML directive changes references to moduleVersion and moduleName in client-related Go files, replacing them with internal package references and adding a suffix to the module name.

LANGUAGE: yaml
CODE:
directive:
  - from:
      - "*_client.go"
      - "client.go"
      - "client_factory.go"
    where: $
    transform: return $.replace(/moduleVersion/, "internal.ModuleVersion").replace(/moduleName+"/, "internal.ModuleName+\"/armresources");

----------------------------------------

TITLE: Authentication Setup with Azure Identity
DESCRIPTION: Creates default Azure credentials for authentication with Azure Lab Services using the azidentity module.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Installing Azure SecurityDevOps Go Module
DESCRIPTION: Command to install the Azure SecurityDevOps module using Go modules package management

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/securitydevops/armsecuritydevops

----------------------------------------

TITLE: Configuring Azure Web PubSub Go SDK Generation
DESCRIPTION: AutoRest configuration file that specifies how to generate the Go SDK client for Azure Web PubSub service. It defines input specifications, output settings, and code transformation directives for customizing the generated client code. The configuration includes operations for removing specific APIs, renaming enums, making certain methods internal, and adding custom properties to the client struct.

LANGUAGE: yaml
CODE:
title: WebPubSub
description: Azure Web PubSub client
clear-output-folder: false
slice-elements-byval: true
remove-non-reference-schema: true
go: true
input-file: https://github.com/Azure/azure-rest-api-specs/blob/052a4b8d50bfd5595a8b5b506015d18f2b65998d/specification/webpubsub/data-plane/WebPubSub/stable/2023-07-01/webpubsub.json
license-header: MICROSOFT_MIT_NO_VERSION
module: github.com/Azure/azure-sdk-for-go/sdk/messaging/azwebpubsub
openapi-type: "data-plane"
output-folder: ../azwebpubsub
use: "@autorest/go@4.0.0-preview.60"
directive:
    # Remove HealthAPI
    - from: swagger-document
      remove-operation: 'HealthApi_GetServiceStatus'
    # Rename enum WebPubSubPermission to Permission since the package name already contains WebPubSub.
    - from: 
        - constants.go
        - client.go
      where: $
      transform: return $.replace(/WebPubSubPermission/g, "Permission");
    # Make GenerateClientToken internal.
    - from: client.go
      where: $
      transform: return $.replace(/\bGenerateClientToken\b/g, "generateClientToken");
    # Make *Exists internal until SDK supports it.
    - from: client.go
      where: $
      transform: return $.replace(/\b(Group|Connection|User)Exists\b/g, function(match, group) { return group.toLowerCase() + "Exists";});
    # Make CheckPermission internal until SDK supports it, since it leverage 404 status code
    - from: client.go
      where: $
      transform: return $.replace(/\bCheckPermission\b/g, "checkPermission");
    # Add more properties to the client
    - from: client.go
      where: $
      transform: >
        return $.replace(
            /(type Client struct[^}]+})/s, 
            "type Client struct {\n\tinternal *azcore.Client\n\tendpoint string\n\tkey      *string\n}")
    # Add comments to type Permission
    - from: constants.go
      where: $
      transform: >
        return $.replace(
            /type Permission string/s, 
            "// Permission contains the allowed permissions\ntype Permission string")
    # Add comments to InnerError
    - from: models.go
      where: $
      transform: >
        return $.replace(
            /type InnerError struct/s, 
            "// InnerError - The inner error object\ntype InnerError struct")
    # delete unused error models
    - from: models.go
      where: $
      transform: return $.replace(/(?:\/\/.*\s)+type (?:ErrorDetail|InnerError).+\{(?:\s.+\s)+\}\s/g, "");
    - from: models_serde.go
      where: $
      transform: return $.replace(/(?:\/\/.*\s)+func \(\w \*?(?:ErrorDetail|InnerError)\).*\{\s(?:.+\s)+\}\s/g, "");
    # delete client name prefix from method options and response types
    - from:
        - client.go
        - models.go
        - models_serde.go
        - options.go
        - response_types.go
      where: $
      transform: return $.replace(/Client(\w+)((?:Options|Response))/g, "$1$2");

----------------------------------------

TITLE: Release Notes Version 1.0.0 (2022-05-18)
DESCRIPTION: Initial release implementing next generation design principles with migration guide information.

LANGUAGE: markdown
CODE:
The package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/servicefabric/armservicefabric` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html) since version 1.0.0, which contains breaking changes.\n\nTo migrate the existing applications to the latest version, please refer to [Migration Guide](https://aka.ms/azsdk/go/mgmt/migration).\n\nTo learn more, please refer to our documentation [Quick Start](https://aka.ms/azsdk/go/mgmt).

----------------------------------------

TITLE: New Function Example in Go
DESCRIPTION: Example of a new function signature added in version 0.4.0

LANGUAGE: go
CODE:
NewFunction *PipelineJobsClient.NewListPager(string, string, *PipelineJobsClientListOptions) *runtime.Pager[PipelineJobsClientListResponse]

----------------------------------------

TITLE: Installing Azure Kubernetes Connect Service Module in Go
DESCRIPTION: This command installs the Azure Kubernetes Connect Service module using Go's package manager.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/hybridkubernetes/armhybridkubernetes

----------------------------------------

TITLE: Installing Azure Managed Network Module
DESCRIPTION: Command to install the Azure Managed Network module using Go modules for dependency management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/managednetwork/armmanagednetwork

----------------------------------------

TITLE: Creating Azure Costmanagement Alerts Client in Go
DESCRIPTION: Instantiates an Alerts client using the Costmanagement client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewAlertsClient()

----------------------------------------

TITLE: Creating Azure Digital Twins Client
DESCRIPTION: Creating a client instance from the client factory to access Azure Digital Twins APIs.

LANGUAGE: go
CODE:
client := clientFactory.NewClient()

----------------------------------------

TITLE: Configuring AutoRest for Azure Advisor SDK Generation in Go
DESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure Advisor SDK for Go. It enables Azure ARM mode, specifies required API specifications, sets the license header, and defines the module version.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/7a2ac91de424f271cf91cc8009f3fe9ee8249086/specification/advisor/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/7a2ac91de424f271cf91cc8009f3fe9ee8249086/specification/advisor/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.2.0

----------------------------------------

TITLE: Creating Azure Bot Service Client Factory
DESCRIPTION: Initializes a client factory for creating Bot Service clients using subscription ID and credentials

LANGUAGE: go
CODE:
clientFactory, err := armbotservice.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Initializing Azure Credential
DESCRIPTION: Creates a default Azure credential for authentication with Azure services.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Documenting Release History for Azure SDK for Go
DESCRIPTION: This markdown snippet outlines the release history for the Azure SDK for Go, detailing changes in version 1.0.0, 0.2.0, and 0.1.0. It includes breaking changes, new features, and modifications to various components of the SDK.

LANGUAGE: markdown
CODE:
# Release History

## 1.0.0 (2024-12-26)
### Breaking Changes

- Field `AllocatedValue`, `CreatedAt`, `ExpiryAt`, `PercentageUsed`, `UsedValue` of struct `FreeTrialProperties` has been removed

### Features Added

- New value `FreeTrialStateNotEligible`, `FreeTrialStateNotRegistered` added to enum type `FreeTrialState`
- New value `ProvisioningStateCreating` added to enum type `ProvisioningState`
- New value `QuotaNamesReporting` added to enum type `QuotaNames`
- New enum type `CheckNameAvailabilityReason` with values `CheckNameAvailabilityReasonAlreadyExists`, `CheckNameAvailabilityReasonInvalid`
- New enum type `OfferingType` with values `OfferingTypeGeneralAvailability`, `OfferingTypeNotApplicable`, `OfferingTypePrivatePreview`, `OfferingTypePublicPreview`
- New function `NewAccountQuotasClient(string, azcore.TokenCredential, *arm.ClientOptions) (*AccountQuotasClient, error)`
- New function `*AccountQuotasClient.Get(context.Context, string, string, QuotaNames, *AccountQuotasClientGetOptions) (AccountQuotasClientGetResponse, error)`
- New function `*AccountQuotasClient.NewListByAccountPager(string, string, *AccountQuotasClientListByAccountOptions) *runtime.Pager[AccountQuotasClientListByAccountResponse]`
- New function `*AccountsClient.CheckNameAvailability(context.Context, CheckNameAvailabilityRequest, *AccountsClientCheckNameAvailabilityOptions) (AccountsClientCheckNameAvailabilityResponse, error)`
- New function `*ClientFactory.NewAccountQuotasClient() *AccountQuotasClient`
- New struct `AccountFreeTrialProperties`
- New struct `AccountQuota`
- New struct `AccountQuotaListResult`
- New struct `AccountQuotaProperties`
- New struct `CheckNameAvailabilityRequest`
- New struct `CheckNameAvailabilityResponse`
- New field `LocalAuth` in struct `AccountProperties`
- New field `LocalAuth` in struct `AccountUpdateProperties`
- New field `OfferingType` in struct `QuotaProperties`


## 0.2.0 (2023-11-24)
### Features Added

- Support for test fakes and OpenTelemetry trace spans.


## 0.1.0 (2023-09-27)

The package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/playwrighttesting/armplaywrighttesting` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html).

To learn more, please refer to our documentation [Quick Start](https://aka.ms/azsdk/go/mgmt).

----------------------------------------

TITLE: Remove Module Constants Directive
DESCRIPTION: AutoRest directive to remove moduleName and moduleVersion constants from the generated constants.go file.

LANGUAGE: yaml
CODE:
directive:
  - from: constants.go
    where: $
    transform: return $.replace(/const \(\n\s+moduleName.+\n\s+moduleVersion.+\n\)\n/, "");

----------------------------------------

TITLE: Configuring AutoRest Settings for Azure SDK Generation
DESCRIPTION: YAML configuration for AutoRest tool that specifies the settings for generating Azure SDK for Go. It references Azure Kusto API specifications, sets the module version to 2.3.0, and configures Microsoft MIT licensing. The configuration targets package version 2024-04.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/b8adce17dc500f338f86f18af30aac61dcb71c5f/specification/azure-kusto/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/b8adce17dc500f338f86f18af30aac61dcb71c5f/specification/azure-kusto/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 2.3.0
tag: package-2024-04

----------------------------------------

TITLE: Removing 'Items' and 'List' Suffixes
DESCRIPTION: YAML directive to remove 'Items' and 'List' suffixes from various identifiers in the generated code.

LANGUAGE: yaml
CODE:
directive:
  - from: source-file-go
    where: $
    transform: >
      return $.
        replace(/DirectoryItems/g, "Directories").
        replace(/FileItems/g, "Files").
        replace(/ShareItems/g, "Shares").
        replace(/HandleList/g, "Handles");

----------------------------------------

TITLE: Creating Azure Resource Health Client Factory in Go
DESCRIPTION: Initializes a client factory for Azure Resource Health with a subscription ID and credentials.

LANGUAGE: go
CODE:
clientFactory, err := armresourcehealth.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Release History Documentation in Markdown
DESCRIPTION: Markdown formatted changelog documenting version releases, breaking changes, and feature additions for the Azure SDK for Go Dynatrace ARM module. Details API changes and new functionality added across versions.

LANGUAGE: markdown
CODE:
# Release History

## 2.1.0 (2023-11-24)
### Features Added

- Support for test fakes and OpenTelemetry trace spans.


## 2.0.0 (2023-08-25)
### Breaking Changes

- Function `*MonitorsClient.GetAccountCredentials` has been removed
- Function `*TagRulesClient.Update` has been removed
- Struct `AccountInfoSecure` has been removed
- Struct `TagRuleUpdate` has been removed
- Field `DynatraceEnvironmentProperties`, `MarketplaceSubscriptionStatus`, `MonitoringStatus`, `PlanData`, `UserInfo` of struct `MonitorResourceUpdate` has been removed

### Features Added

- New function `*MonitorsClient.GetMarketplaceSaaSResourceDetails(context.Context, MarketplaceSaaSResourceDetailsRequest, *MonitorsClientGetMarketplaceSaaSResourceDetailsOptions) (MonitorsClientGetMarketplaceSaaSResourceDetailsResponse, error)`
- New function `*MonitorsClient.GetMetricStatus(context.Context, string, string, *MonitorsClientGetMetricStatusOptions) (MonitorsClientGetMetricStatusResponse, error)`
- New struct `MarketplaceSaaSResourceDetailsRequest`
- New struct `MarketplaceSaaSResourceDetailsResponse`
- New struct `MetricsStatusResponse`
- New field `SendingMetrics` in struct `MetricRules`

----------------------------------------

TITLE: Configuring Azure Maintenance Client for Sovereign Clouds in Go
DESCRIPTION: This snippet shows how to configure the client factory to connect to sovereign clouds or Azure Stack. It uses ClientOptions to specify the cloud environment.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armmaintenance.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Creating Registration Definitions Client
DESCRIPTION: Creates a specific client instance for working with registration definitions

LANGUAGE: go
CODE:
client := clientFactory.NewRegistrationDefinitionsClient()

----------------------------------------

TITLE: Installing Azure Cosmos for PostgreSQL Module
DESCRIPTION: Command to install the Azure Cosmos for PostgreSQL module using Go modules for dependency management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/cosmosforpostgresql/armcosmosforpostgresql

----------------------------------------

TITLE: Conflicting Assets.json Example
DESCRIPTION: Example showing a typical merge conflict in an assets.json file between two different feature branches

LANGUAGE: text
CODE:
{
  "AssetsRepo": "Azure/azure-sdk-assets-integration",
  "AssetsRepoPrefixPath": "python",
  "TagPrefix": "python/storage/azure-storage-blob",
<<<<<<< HEAD
  "Tag": "integration/example/storage_feature_addition2"
=======
  "Tag": "integration/example/storage_feature_addition1"
>>>>>>> test-storage-tag-combination
}

----------------------------------------

TITLE: Installing Azure Costmanagement Module in Go
DESCRIPTION: Command to install the Azure Costmanagement module using Go modules.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/costmanagement/armcostmanagement/v2

----------------------------------------

TITLE: Creating Azure Maps Client Factory
DESCRIPTION: Initializes a client factory for creating Azure Maps service clients with subscription ID and credentials.

LANGUAGE: go
CODE:
clientFactory, err := armmaps.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Configuring AutoRest for Azure Maps Go SDK Generation
DESCRIPTION: YAML configuration file that defines the parameters for generating the Azure Maps SDK for Go using AutoRest. Specifies the Azure ARM mode, required API specifications, licensing, module version and API version tag.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/b9403296f0b0e112b0d8222ad05fd1d79ee10e03/specification/maps/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/b9403296f0b0e112b0d8222ad05fd1d79ee10e03/specification/maps/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.1.0
tag: package-2023-06

----------------------------------------

TITLE: Authenticating with Azure Credentials
DESCRIPTION: Creates default Azure credentials for authentication using the azidentity module

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Custom JSON Unmarshaling for Multipart Form Data
DESCRIPTION: Implements the json.Unmarshaller interface to deserialize JSON data into the form data schema. Handles individual fields using a raw message map and includes error handling for each field.

LANGUAGE: go
CODE:
func (p *Paths1Filz8PFilesPostRequestbodyContentMultipartFormDataSchema) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", p, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "file":
			err = unpopulate(val, "File", &p.File)
			delete(rawMsg, key)
		case "filename":
			err = unpopulate(val, "Filename", &p.Filename)
			delete(rawMsg, key)
		case "purpose":
			err = unpopulate(val, "Purpose", &p.Purpose)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", p, err)
		}
	}
	return nil
}

----------------------------------------

TITLE: Remove Module Constants Directive
DESCRIPTION: AutoRest directive to remove moduleName and moduleVersion constants from the constants.go file.

LANGUAGE: yaml
CODE:
directive:
  - from: constants.go
    where: $
    transform: return $.replace(/const \(\n\s+moduleName.+\n\s+moduleVersion.+\n\)\n/, "");

----------------------------------------

TITLE: Configuring Client Options for Different Clouds
DESCRIPTION: Sets up client options for connecting to different Azure clouds including sovereign clouds and Azure Stack.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armiotoperations.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Updating CORS Acronym and Renaming FileParentID
DESCRIPTION: YAML directive to change CORS acronym to all caps and rename 'FileParentID' to 'ParentID'.

LANGUAGE: yaml
CODE:
directive:
  - from: source-file-go
    where: $
    transform: >
      return $.
        replace(/Cors/g, "CORS").
        replace(/FileParentID/g, "ParentID");

----------------------------------------

TITLE: Creating Azure Virtual Desktop Client Factory
DESCRIPTION: Initializes a client factory for creating Azure Virtual Desktop service clients

LANGUAGE: go
CODE:
clientFactory, err := armdesktopvirtualization.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Importing the Hybrid Container Service Client
DESCRIPTION: Example of importing and initializing the Hybrid Container Service client in Go.

LANGUAGE: go
CODE:
import (
    "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/hybridcontainerservice/armhybridcontainerservice"
)

func main() {
    client, err := armhybridcontainerservice.NewProvisionedClusterInstancesClient("your-subscription-id", credential, nil)
    if err != nil {
        // Handle error
    }
    // Use the client...
}

----------------------------------------

TITLE: Configuring AutoRest Settings for Azure Domain Services Go SDK
DESCRIPTION: YAML configuration for AutoRest code generation specifying Azure ARM mode, required API specifications from azure-rest-api-specs repository, Microsoft MIT license header requirement, and module version 1.2.0.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/domainservices/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/domainservices/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.2.0

----------------------------------------

TITLE: Installing Azure Largeinstance Module in Go
DESCRIPTION: Command to install the Azure Largeinstance module using Go's package manager.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/largeinstance/armlargeinstance

----------------------------------------

TITLE: Creating Activity Runs Client
DESCRIPTION: Creates a specific client instance for managing activity runs using the client factory

LANGUAGE: go
CODE:
client := clientFactory.NewActivityRunsClient()

----------------------------------------

TITLE: Creating a ContainerGroupProfilesClient in Go
DESCRIPTION: Shows how to instantiate a ContainerGroupProfilesClient for managing Container Group Profiles in Azure Container Instances using the Azure SDK for Go.

LANGUAGE: Go
CODE:
NewContainerGroupProfilesClient(string, azcore.TokenCredential, *arm.ClientOptions) (*ContainerGroupProfilesClient, error)

----------------------------------------

TITLE: New Replica Management Functions (v2.0.0)
DESCRIPTION: Introduction of replica management functionality including creation, deletion, retrieval and listing of replicas. Includes new ReplicaProvisioningState enum type.

LANGUAGE: go
CODE:
func *ClientFactory.NewReplicasClient() *ReplicasClient
func NewReplicasClient(string, azcore.TokenCredential, *arm.ClientOptions) (*ReplicasClient, error)
func *ReplicasClient.BeginCreate(context.Context, string, string, string, Replica, *ReplicasClientBeginCreateOptions) (*runtime.Poller[ReplicasClientCreateResponse], error)
func *ReplicasClient.BeginDelete(context.Context, string, string, string, *ReplicasClientBeginDeleteOptions) (*runtime.Poller[ReplicasClientDeleteResponse], error)
func *ReplicasClient.Get(context.Context, string, string, string, *ReplicasClientGetOptions) (ReplicasClientGetResponse, error)
func *ReplicasClient.NewListByConfigurationStorePager(string, string, *ReplicasClientListByConfigurationStoreOptions) *runtime.Pager[ReplicasClientListByConfigurationStoreResponse]

----------------------------------------

TITLE: Listing Available Tests
DESCRIPTION: Command to display all available reliability tests in the test suite

LANGUAGE: bash
CODE:
go run .

----------------------------------------

TITLE: Listing Available Tests
DESCRIPTION: Command to display all available reliability tests in the test suite

LANGUAGE: bash
CODE:
go run .

----------------------------------------

TITLE: Creating Guest Configuration Client Factory
DESCRIPTION: Initializes a client factory for Azure Guest Configuration with default settings

LANGUAGE: go
CODE:
clientFactory, err := armguestconfiguration.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Configuring AutoRest for Azure Network Cloud SDK Generation
DESCRIPTION: YAML configuration for AutoRest tool to generate Azure Network Cloud SDK. Specifies ARM mode, required API specifications, license header, module version 1.2.0, and targets API version 2024-07-01.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/c0a12a75b702054cf1e7fcd8c014d0fc116dea6e/specification/networkcloud/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/c0a12a75b702054cf1e7fcd8c014d0fc116dea6e/specification/networkcloud/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.2.0
tag: package-2024-07-01

----------------------------------------

TITLE: Installing Azure DNS Module
DESCRIPTION: Command to install the Azure DNS module using Go modules for dependency management

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/dns/armdns

----------------------------------------

TITLE: Removing moduleName and moduleVersion Constants from Generated Code
DESCRIPTION: This YAML directive removes the moduleName and moduleVersion constants from the generated constants.go file.

LANGUAGE: yaml
CODE:
directive:
  - from: constants.go
    where: $
    transform: return $.replace(/const \(\n\s+moduleName.+\n\s+moduleVersion.+\n\)\n/, "");

----------------------------------------

TITLE: Azure Hybrid Connectivity Enums
DESCRIPTION: Enumeration types introduced in version 1.2.0-beta.1 for cloud native resources, host types, provisioning states and configuration statuses.

LANGUAGE: go
CODE:
type CloudNativeType string
type HostType string
type ResourceProvisioningState string
type SolutionConfigurationStatus string

----------------------------------------

TITLE: Correcting CORS XML Tags
DESCRIPTION: YAML directive to correct the XML tags for CORS-related structures.

LANGUAGE: yaml
CODE:
directive:
  - from: source-file-go
    where: $
    transform: >
      return $.
        replace(/xml:"CORS>CORSRule"/g, "xml:\"Cors>CorsRule\"");

----------------------------------------

TITLE: Creating Azure Billingbenefits Client Factory
DESCRIPTION: Initializes a client factory for creating Azure Billingbenefits service clients.

LANGUAGE: go
CODE:
clientFactory, err := armbillingbenefits.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Markdown Release History Documentation
DESCRIPTION: Markdown formatted release history tracking version changes, feature additions, and bug fixes for the Azure SDK for Go armlocks package.

LANGUAGE: markdown
CODE:
# Release History

## 1.2.0 (2023-11-24)
### Features Added

- Support for test fakes and OpenTelemetry trace spans.


## 1.1.1 (2023-04-14)
### Bug Fixes

- Fix serialization bug of empty value of `any` type.


## 1.1.0 (2023-03-27)
### Features Added

- New struct `ClientFactory` which is a client factory used to create any client in this module


## 1.0.0 (2022-05-16)

The package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armlocks` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html) since version 1.0.0, which contains breaking changes.

To migrate the existing applications to the latest version, please refer to [Migration Guide](https://aka.ms/azsdk/go/mgmt/migration).

To learn more, please refer to our documentation [Quick Start](https://aka.ms/azsdk/go/mgmt).

----------------------------------------

TITLE: Release Notes Version 1.0.0
DESCRIPTION: Breaking changes and feature additions for version 1.0.0 of Azure SDK for Go, including type changes, removed functions and structs, and new functionality.

LANGUAGE: markdown
CODE:
## 1.0.0 (2024-11-20)
### Breaking Changes

- Type of `AgentProfile.ResourcePredictions` has been changed from `any` to `*ResourcePredictions`
- Type of `PoolUpdateProperties.AgentProfile` has been changed from `AgentProfileUpdateClassification` to `AgentProfileClassification`
- Type of `Quota.Name` has been changed from `*string` to `*QuotaName`
- Type of `Stateful.ResourcePredictions` has been changed from `any` to `*ResourcePredictions`
- Type of `StatelessAgentProfile.ResourcePredictions` has been changed from `any` to `*ResourcePredictions`
- Function `*AgentProfileUpdate.GetAgentProfileUpdate` has been removed
- Function `*AutomaticResourcePredictionsProfileUpdate.GetResourcePredictionsProfileUpdate` has been removed
- Function `*ManualResourcePredictionsProfileUpdate.GetResourcePredictionsProfileUpdate` has been removed
- Function `*ResourcePredictionsProfileUpdate.GetResourcePredictionsProfileUpdate` has been removed
- Function `*StatefulUpdate.GetAgentProfileUpdate` has been removed
- Function `*StatelessAgentProfileUpdate.GetAgentProfileUpdate` has been removed
- Function `*SubscriptionUsagesClient.NewListByLocationPager` has been removed
- Struct `AutomaticResourcePredictionsProfileUpdate` has been removed
- Struct `ManualResourcePredictionsProfileUpdate` has been removed
- Struct `QuotaListResult` has been removed
- Struct `QuotaProperties` has been removed
- Struct `StatefulUpdate` has been removed
- Struct `StatelessAgentProfileUpdate` has been removed
- Field `Properties`, `SystemData`, `Type` of struct `Quota` has been removed

### Features Added

- New function `*SubscriptionUsagesClient.NewUsagesPager(string, *SubscriptionUsagesClientUsagesOptions) *runtime.Pager[SubscriptionUsagesClientUsagesResponse]`
- New struct `PagedQuota`
- New struct `ResourcePredictions`
- New field `CurrentValue`, `Limit`, `Unit` in struct `Quota`

----------------------------------------

TITLE: Authentication with Azure Credentials
DESCRIPTION: Creates default Azure credentials for authentication with Azure IoTOperations services.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Creating SQL Servers Client
DESCRIPTION: Creates a new SQL Servers client instance using the client factory

LANGUAGE: go
CODE:
client := clientFactory.NewSQLServersClient()

----------------------------------------

TITLE: Creating Azure Bare Metal Infrastructure Client Factory in Go
DESCRIPTION: This code creates a client factory for Azure Bare Metal Infrastructure services, which can be used to instantiate specific clients.

LANGUAGE: go
CODE:
clientFactory, err := armbaremetalinfrastructure.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Detailed Profile Builder Installation - PowerShell
DESCRIPTION: Step-by-step installation commands for Profile Builder using PowerShell

LANGUAGE: powershell
CODE:
go get -d github.com/Azure/azure-sdk-for-go/eng/tools/profileBuilder
cd $env:GOPATH\src\github.com\Azure\azure-sdk-for-go/eng/tools\profileBuilder
go install

----------------------------------------

TITLE: Creating Azure Networkanalytics Client Factory in Go
DESCRIPTION: Code to create a client factory for Azure Networkanalytics. The factory is initialized with a subscription ID and credential, and can be used to create specific clients.

LANGUAGE: go
CODE:
clientFactory, err := armnetworkanalytics.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Installing Azure Quota Module in Go
DESCRIPTION: This command installs the Azure Quota module using Go's package manager. It requires Go modules for versioning and dependency management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/quota/armquota

----------------------------------------

TITLE: Configuring AutoRest YAML Settings for Azure Go SDK Generation
DESCRIPTION: YAML configuration for AutoRest that specifies the Azure ARM mode, required API specifications, license header type, and module version. References specific versions of Azure REST API specs for operations management.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/7a2ac91de424f271cf91cc8009f3fe9ee8249086/specification/operationsmanagement/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/7a2ac91de424f271cf91cc8009f3fe9ee8249086/specification/operationsmanagement/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 0.8.0

----------------------------------------

TITLE: Configuring AutoRest for Azure Chaos Management SDK Generation in Go
DESCRIPTION: This YAML configuration sets up AutoRest to generate Go SDK code for Azure Chaos Management. It specifies Azure ARM mode, required API specifications, license header, module version, and package tag.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/e4009d2f8d3bf0271757e522c7d1c1997e193d44/specification/chaos/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/e4009d2f8d3bf0271757e522c7d1c1997e193d44/specification/chaos/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.1.0
tag: package-2024-01

----------------------------------------

TITLE: Configuring Azure Client Options for Different Clouds in Go
DESCRIPTION: This snippet shows how to set up client options to connect to different Azure clouds, such as Azure China, using the arm and azcore packages.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
client, err := armmachinelearningservices.NewQuotasClient(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Breaking Change Type Example in Go
DESCRIPTION: Example showing type changes for Server and ServerForUpdate structs

LANGUAGE: go
CODE:
Type of Server.Identity has been changed from *Identity to *MySQLServerIdentity
Type of Server.SKU has been changed from *SKU to *MySQLServerSKU
Type of ServerForUpdate.Identity has been changed from *Identity to *MySQLServerIdentity
Type of ServerForUpdate.SKU has been changed from *SKU to *MySQLServerSKU

----------------------------------------

TITLE: Configuring AutoRest for Azure PostgreSQL Flexible Servers SDK Generation
DESCRIPTION: YAML configuration for AutoRest tool to generate Go SDK code for Azure PostgreSQL Flexible Servers. Specifies the source API specs, license header, module version, and targets the package-flexibleserver-2024-08-01 API version.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/10925e3dec73699b950f256576cd6983947faaa3/specification/postgresql/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/10925e3dec73699b950f256576cd6983947faaa3/specification/postgresql/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 4.0.0
package-flexibleservers: true
tag: package-flexibleserver-2024-08-01

----------------------------------------

TITLE: Installing Azure Hybrid Container Service Module
DESCRIPTION: Command to install the Azure Hybrid Container Service module using Go modules

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/hybridcontainerservice/armhybridcontainerservice

----------------------------------------

TITLE: Modifying Service Client Methods
DESCRIPTION: YAML directive to remove pager methods and export various generated methods in the service client.

LANGUAGE: yaml
CODE:
directive:
  - from: zz_service_client.go
    where: $
    transform: >
      return $.
        replace(/func \(client \*ServiceClient\) NewListSharesSegmentPager\(.+\/\/ listSharesSegmentCreateRequest creates the ListSharesSegment request/s, `//\n// listSharesSegmentCreateRequest creates the ListSharesSegment request`).
        replace(/\(client \*ServiceClient\) listSharesSegmentCreateRequest\(/, `(client *ServiceClient) ListSharesSegmentCreateRequest(`).
        replace(/\(client \*ServiceClient\) listSharesSegmentHandleResponse\(/, `(client *ServiceClient) ListSharesSegmentHandleResponse(`);

----------------------------------------

TITLE: Authenticating with Azure Credentials
DESCRIPTION: Creates default Azure credentials for authentication with the Web PubSub service using azidentity module.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Configuring AutoRest Settings for Azure SDK Generation
DESCRIPTION: YAML configuration for AutoRest that specifies the source API specifications, module version, and other settings for generating Azure SDK for Go. References the Dynatrace resource manager API specs and includes settings for Azure ARM compatibility.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/baac183ffa684d94f697f0fc6f480e02cfb00f3d/specification/dynatrace/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/baac183ffa684d94f697f0fc6f480e02cfb00f3d/specification/dynatrace/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 2.1.0
tag: package-2023-04-27

----------------------------------------

TITLE: Installing Azure Datadog Module in Go
DESCRIPTION: This snippet demonstrates how to install the Azure Datadog module using Go's package manager. It requires Go modules for versioning and dependency management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/datadog/armdatadog

----------------------------------------

TITLE: Installing Azure Integrationspaces Module in Go
DESCRIPTION: This snippet demonstrates how to install the Azure Integrationspaces module using Go's package manager. It utilizes Go modules for versioning and dependency management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/integrationspaces/armintegrationspaces

----------------------------------------

TITLE: Configuring Azure Client Options for Different Clouds in Go
DESCRIPTION: This snippet shows how to configure client options to connect to different Azure clouds, such as Azure China.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armbaremetalinfrastructure.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Installing Azure Portal Module with Go
DESCRIPTION: Command to install the Azure Portal module using Go modules package management

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/portal/armportal

----------------------------------------

TITLE: Creating Azure Credentials
DESCRIPTION: Creates default Azure credentials for authentication using azidentity module

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Adding New WebTestKind Enum Value in Go
DESCRIPTION: This snippet shows the addition of a new value to the WebTestKind enum in the Azure SDK for Go. It introduces a standard web test kind for Application Insights.

LANGUAGE: go
CODE:
WebTestKindStandard

----------------------------------------

TITLE: Installing Azure Resource Lock Module
DESCRIPTION: Command to install the Azure Resource Lock module using Go modules for dependency management

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armlocks

----------------------------------------

TITLE: Configuring AutoRest Settings for Azure NetApp Go SDK
DESCRIPTION: Defines the configuration parameters for AutoRest code generation. Specifies the Azure ARM mode, required API specifications, license header type, module version, and API version tag. References the Azure REST API specs from a specific commit.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/e6892bbc13d89929cdbe3b39385628543263f80b/specification/netapp/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/e6892bbc13d89929cdbe3b39385628543263f80b/specification/netapp/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 7.4.0
tag: package-2024-09-01

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK Go Generation
DESCRIPTION: This YAML configuration sets up AutoRest for generating the Azure SDK for Go. It enables Azure ARM, specifies the required API specifications from GitHub, sets the license header, and defines the module version.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/healthbot/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/healthbot/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.2.0

----------------------------------------

TITLE: Configuring AutoRest Settings for Azure DNS SDK
DESCRIPTION: Base configuration for AutoRest code generation including Azure ARM settings, API specifications, module details and output settings for the DNS service.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/53b1affe357b3bfbb53721d0a2002382a046d3b0/specification/dns/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/53b1affe357b3bfbb53721d0a2002382a046d3b0/specification/dns/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 0.1.0
module-name: profile/p20200901/resourcemanager/dns/armdns
module: github.com/Azure/azure-sdk-for-go/$(module-name)
output-folder: $(go-sdk-folder)/$(module-name)
tag: profile-hybrid-2020-09-01

----------------------------------------

TITLE: Creating Azure Networkcloud Client Factory
DESCRIPTION: Initializes a client factory for creating Azure Networkcloud service clients using subscription ID and credentials.

LANGUAGE: go
CODE:
clientFactory, err := armnetworkcloud.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Configuring AutoRest for Azure Event Grid SDK Generation in YAML
DESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure Event Grid SDK for Go. It specifies the Azure ARM mode, required API specifications from GitHub, license header, module version, and the API version tag to use.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/b8691fbfca8fcdc5a241a0b501c32fd4a76bb0cd/specification/eventgrid/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/b8691fbfca8fcdc5a241a0b501c32fd4a76bb0cd/specification/eventgrid/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 2.3.0-beta.2
tag: package-2024-06-preview

----------------------------------------

TITLE: Installing Azure Data Migration Module
DESCRIPTION: Command to install the Azure Data Migration module using Go modules package manager

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/datamigration/armdatamigration

----------------------------------------

TITLE: Configuring Client Options for Different Azure Clouds
DESCRIPTION: Sets up client options for connecting to different Azure clouds including sovereign clouds and Azure Stack.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armimpactreporting.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Creating Azure Astro Client Factory
DESCRIPTION: Initializes a client factory for Azure Astro services using subscription ID and credentials

LANGUAGE: go
CODE:
clientFactory, err := armastro.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Installing Azure Hybrid Data Module
DESCRIPTION: Command to install the Azure Hybrid Data module using Go modules for dependency management

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/azuredata/armazuredata

----------------------------------------

TITLE: Configuring AutoRest for Azure Large Instance SDK Generation in YAML
DESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure Large Instance SDK for Go. It specifies the Azure ARM mode, required API specifications, license header, module version, and API version tag.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/6051d2b126f5b1e4b623cde8edfa3e25cf730685/specification/azurelargeinstance/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/6051d2b126f5b1e4b623cde8edfa3e25cf730685/specification/azurelargeinstance/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 0.1.0
tag: package-2023-07-20-preview

----------------------------------------

TITLE: Installing Azure Operational Insights SDK Package
DESCRIPTION: Command to install the Azure Operational Insights module version 2 using Go modules

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/operationalinsights/armoperationalinsights/v2

----------------------------------------

TITLE: Authenticating with Azure Identity
DESCRIPTION: Creates a default Azure credential object for authentication with Azure services

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Creating an Azure Private Zones Client in Go
DESCRIPTION: This code demonstrates how to create a specific client for Private Zones operations using the client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewPrivateZonesClient()

----------------------------------------

TITLE: Creating Azure Kusto Client Factory
DESCRIPTION: Initializes a new client factory for Azure Kusto services using subscription ID and credentials

LANGUAGE: go
CODE:
clientFactory, err := armkusto.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Configuring Azure Windows ESU Client for Sovereign Clouds in Go
DESCRIPTION: This snippet shows how to configure the client factory to connect with sovereign clouds or Azure Stack using ClientOptions. It sets the endpoint to Azure China cloud as an example.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armwindowsesu.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK for Go Generation
DESCRIPTION: Defines AutoRest configuration settings for generating the Azure SDK for Go. It specifies the Azure ARM mode, required API specifications, license header, and module version.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/logic/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/logic/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.2.0

----------------------------------------

TITLE: Creating an Azure Engagement Fabric Client Factory in Go
DESCRIPTION: This snippet shows how to create a client factory for Azure Engagement Fabric services. It requires a subscription ID and a credential object.

LANGUAGE: go
CODE:
clientFactory, err := armengagementfabric.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Removing Module Constants Transformation
DESCRIPTION: Directive to remove moduleName and moduleVersion constants from the constants.go file.

LANGUAGE: yaml
CODE:
directive:
  - from: constants.go
    where: $
    transform: return $.replace(/const \(\n\s+moduleName.+\n\s+moduleVersion.+\n\)\n/, "");

----------------------------------------

TITLE: Release History Changelog in Markdown
DESCRIPTION: Markdown formatted changelog documenting version history, new features, breaking changes, bug fixes and other updates for the Azure Key Vault Secrets Go SDK module.

LANGUAGE: markdown
CODE:
# Release History

## 1.3.2-beta.1 (Unreleased)

### Features Added

### Breaking Changes

### Bugs Fixed

### Other Changes
* Upgraded to API service version `7.6-preview.2`

## 1.3.1 (2025-02-13)

### Other Changes
* Upgraded dependencies

## 1.3.0 (2024-11-06)

### Features Added
* Added API Version support. Users can now change the default API Version by setting ClientOptions.APIVersion

----------------------------------------

TITLE: Configuring AutoRest for Azure Hybrid Network SDK Generation
DESCRIPTION: Configuration settings for AutoRest to generate the Azure Hybrid Network SDK. Specifies Azure ARM mode, required API specifications from GitHub, licensing header, module version 2.0.0, and targets package version 2023-09-01.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/db9788dde7a0c2c0d82e4fdf5f7b4de3843937e3/specification/hybridnetwork/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/db9788dde7a0c2c0d82e4fdf5f7b4de3843937e3/specification/hybridnetwork/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 2.0.0
tag: package-2023-09-01

----------------------------------------

TITLE: Adding New Structs in Go
DESCRIPTION: Example of new structs added in version 9.1.0

LANGUAGE: Go
CODE:
type IcebergDataset struct {
    // fields
}

type IcebergDatasetTypeProperties struct {
    // fields
}

type IcebergSink struct {
    // fields
}

type IcebergWriteSettings struct {
    // fields
}

----------------------------------------

TITLE: Authenticating with Azure Using Default Credentials
DESCRIPTION: Creates a default Azure credential object for authentication with Azure services using the azidentity module.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Installing Azure Authorization Module in Go
DESCRIPTION: This command installs the Azure Authorization module using Go's package manager.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/authorization/armauthorization/v3

----------------------------------------

TITLE: Configuring Client with Custom Options
DESCRIPTION: Creates a client factory with custom options for connecting to different Azure clouds including sovereign clouds and Azure Stack.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armstorsimple8000series.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Installing Azure Network Function Manager Module in Go
DESCRIPTION: This command installs the Azure Network Function Manager module using Go's package manager.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/networkfunction/armnetworkfunction/v2

----------------------------------------

TITLE: Removing moduleName and moduleVersion Constants from Generated Code
DESCRIPTION: This YAML directive removes the moduleName and moduleVersion constants from the generated constants.go file using a regular expression replacement.

LANGUAGE: yaml
CODE:
directive:
  - from: constants.go
    where: $
    transform: return $.replace(/const \(\n\s+moduleName.+\n\s+moduleVersion.+\n\)\n/, "");

----------------------------------------

TITLE: Creating StorSimple Service Client
DESCRIPTION: Creates a specific service client instance from the client factory to access StorSimple APIs.

LANGUAGE: go
CODE:
client := clientFactory.NewBackupsClient()

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK Generation in YAML
DESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure SDK for Go. It specifies Azure ARM compatibility, required specification files, license header, and module version for the Engagement Fabric resource manager.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/163e27c0ca7570bc39e00a46f255740d9b3ba3cb/specification/engagementfabric/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/163e27c0ca7570bc39e00a46f255740d9b3ba3cb/specification/engagementfabric/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 0.3.0

----------------------------------------

TITLE: Configuring AutoRest for Azure Hardware Security Modules SDK Generation
DESCRIPTION: YAML configuration for AutoRest code generator that specifies the source API specifications, module version, and other settings required for generating the Azure Hardware Security Modules SDK for Go. References specific versions of API specs from the azure-rest-api-specs repository.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/e838027e88cca634c1545e744630de9262a6e72a/specification/hardwaresecuritymodules/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/e838027e88cca634c1545e744630de9262a6e72a/specification/hardwaresecuritymodules/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 2.0.0-beta.2
tag: package-preview-2024-06

----------------------------------------

TITLE: Creating Azure DNS Private Resolver Client Factory in Go
DESCRIPTION: Initializes a client factory for Azure DNS Private Resolver using subscription ID and credentials.

LANGUAGE: go
CODE:
clientFactory, err := armdnsresolver.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Update Module References in Client Constructor
DESCRIPTION: AutoRest directive to replace module constant references with internal package references in client constructor code.

LANGUAGE: yaml
CODE:
directive:
  - from:
      - "*_client.go"
      - "client.go"
      - "client_factory.go"
    where: $
    transform: return $.replace(/moduleVersion/, "internal.ModuleVersion").replace(/moduleName+"/, "internal.ModuleName+\"/armpolicy");

----------------------------------------

TITLE: Azure Traffic Manager SDK Changelog Entry
DESCRIPTION: Release history entries documenting version changes, new features, and improvements across multiple SDK versions from 1.0.0 to 1.3.0.

LANGUAGE: markdown
CODE:
# Release History

## 1.3.0 (2023-11-24)
### Features Added

- Support for test fakes and OpenTelemetry trace spans.


## 1.2.0 (2023-06-23)
### Features Added

- New value `EndpointMonitorStatusUnmonitored` added to enum type `EndpointMonitorStatus`
- New enum type `AlwaysServe` with values `AlwaysServeDisabled`, `AlwaysServeEnabled`
- New function `*ProfilesClient.CheckTrafficManagerNameAvailabilityV2(context.Context, CheckTrafficManagerRelativeDNSNameAvailabilityParameters, *ProfilesClientCheckTrafficManagerNameAvailabilityV2Options) (ProfilesClientCheckTrafficManagerNameAvailabilityV2Response, error)`
- New field `AlwaysServe` in struct `EndpointProperties`


## 1.1.0 (2023-04-07)
### Features Added

- New struct `ClientFactory` which is a client factory used to create any client in this module


## 1.0.0 (2022-05-17)

The package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/trafficmanager/armtrafficmanager` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html) since version 1.0.0, which contains breaking changes.

To migrate the existing applications to the latest version, please refer to [Migration Guide](https://aka.ms/azsdk/go/mgmt/migration).

To learn more, please refer to our documentation [Quick Start](https://aka.ms/azsdk/go/mgmt).

----------------------------------------

TITLE: Configuring AutoRest for Azure Palo Alto Networks Go SDK Generation
DESCRIPTION: YAML configuration for AutoRest tool to generate Go SDK code from Azure Palo Alto Networks REST API specifications. Sets ARM mode, specifies source specification files, defines license header, module version 1.1.0, and targets API version 2023-09-01.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/4bb583bcb67c2bf448712f2bd1593a64a7a8f139/specification/paloaltonetworks/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/4bb583bcb67c2bf448712f2bd1593a64a7a8f139/specification/paloaltonetworks/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.1.0
tag: package-2023-09-01

----------------------------------------

TITLE: Configuring AutoRest YAML for Azure Custom Providers
DESCRIPTION: YAML configuration for AutoRest that specifies settings for generating the Azure Custom Providers SDK. It requires the Azure REST API specifications, sets the module version to 0.7.0, and uses the Microsoft MIT license header.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/customproviders/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/customproviders/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 0.7.0

----------------------------------------

TITLE: Installing Azure Private Edge Zone Module
DESCRIPTION: Command to install the Azure Private Edge Zone module using Go modules package management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/hybridnetwork/armhybridnetwork/v2

----------------------------------------

TITLE: Authenticating with Azure Credentials
DESCRIPTION: Creates default Azure credentials for authentication using the azidentity package

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Configuring Azure Client Options for Different Clouds in Go
DESCRIPTION: This snippet shows how to configure client options for connecting to different Azure cloud environments.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armauthorization.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Creating Client Factory for Azure Liftr Qumulo
DESCRIPTION: Initializes a client factory for creating Azure Liftr Qumulo service clients

LANGUAGE: go
CODE:
clientFactory, err := armqumulo.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Removing moduleName and moduleVersion Constants from constants.go
DESCRIPTION: Directive to remove the moduleName and moduleVersion constant declarations from the constants.go file.

LANGUAGE: yaml
CODE:
directive:
  - from: constants.go
    where: $
    transform: return $.replace(/const \(\n\s+moduleName.+\n\s+moduleVersion.+\n\)\n/, "");

----------------------------------------

TITLE: WebPubSub Replica Management
DESCRIPTION: Functions for managing WebPubSub service replicas including CRUD operations

LANGUAGE: go
CODE:
*ReplicasClient.BeginCreateOrUpdate(context.Context, string, string, string, Replica, *ReplicasClientBeginCreateOrUpdateOptions) (*runtime.Poller[ReplicasClientCreateOrUpdateResponse], error)

----------------------------------------

TITLE: Adding Internal Import to Client Files
DESCRIPTION: This YAML directive adds an internal import to various client-related Go files. It inserts the import statement for the internal package from the Azure SDK for Go.

LANGUAGE: yaml
CODE:
directive:
  - from:
      - "*_client.go"
      - "client.go"
      - "client_factory.go"
    where: $
    transform: return $.replace(/import \(\n/, "import (\n\"github.com/Azure/azure-sdk-for-go/profile/p20200901/internal\"\n");

----------------------------------------

TITLE: Release Notes - Version 0.1.0
DESCRIPTION: Initial release implementing next generation design principles with references to Quick Start documentation.

LANGUAGE: markdown
CODE:
## 0.1.0 (2024-09-27)
### Other Changes

The package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/computeschedule/armcomputeschedule` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html).

To learn more, please refer to our documentation [Quick Start](https://aka.ms/azsdk/go/mgmt).

----------------------------------------

TITLE: Installing Azure Kubernetes Configuration Module
DESCRIPTION: Command to install the Azure Kubernetes Configuration module using Go modules for dependency management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/kubernetesconfiguration/armkubernetesconfiguration/v2

----------------------------------------

TITLE: Configuring Azure Datalake SDK Generation for Golang
DESCRIPTION: YAML configuration for generating the Azure Datalake SDK for Golang, including input specifications, output settings, and various options.

LANGUAGE: yaml
CODE:
go: true
clear-output-folder: false
version: "^3.0.0"
license-header: MICROSOFT_MIT_NO_VERSION
input-file: "https://raw.githubusercontent.com/Azure/azure-rest-api-specs/d18a495685ccec837b72891b4deea017f62e8190/specification/storage/data-plane/Azure.Storage.Files.DataLake/stable/2025-05-05/DataLakeStorage.json"
credential-scope: "https://storage.azure.com/.default"
output-folder: ../generated
file-prefix: "zz_"
openapi-type: "data-plane"
verbose: true
security: AzureKey
modelerfour:
  group-parameters: false
  seal-single-value-enum-by-default: true
  lenient-model-deduplication: true
export-clients: true
use: "@autorest/go@4.0.0-preview.65"

----------------------------------------

TITLE: Configuring AutoRest for Azure DNS SDK Generation in YAML
DESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure DNS SDK for Go. It specifies the Azure ARM mode, required API specifications from GitHub, license header, module version, and the API version tag to use.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/987a8f38ab2a8359d085e149be042267a9ecc66f/specification/dns/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/987a8f38ab2a8359d085e149be042267a9ecc66f/specification/dns/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.3.0-beta.1
tag: package-2023-07-preview

----------------------------------------

TITLE: Creating Specific Azure Dev Center Client in Go
DESCRIPTION: This snippet shows how to create a specific client (AttachedNetworksClient) using the previously created client factory. This allows access to a set of related APIs.

LANGUAGE: go
CODE:
client := clientFactory.NewAttachedNetworksClient()

----------------------------------------

TITLE: Updating Module References Directive
DESCRIPTION: YAML directive to update moduleName and moduleVersion references to use internal package in client constructor files.

LANGUAGE: yaml
CODE:
directive:
  - from:
      - "*_client.go"
      - "client.go"
      - "client_factory.go"
    where: $
    transform: return $.replace(/moduleVersion/, "internal.ModuleVersion").replace(/moduleName\+"/, "internal.ModuleName+\"/armcommerce");

----------------------------------------

TITLE: Release Notes (Markdown)
DESCRIPTION: Markdown formatted release history documenting changes across versions 0.7.0 through 0.5.0, including feature additions, bug fixes, and major architectural changes.

LANGUAGE: markdown
CODE:
# Release History

## 0.7.0 (2023-11-24)
### Features Added

- Support for test fakes and OpenTelemetry trace spans.


## 0.6.1 (2023-04-14)
### Bug Fixes

- Fix serialization bug of empty value of `any` type.


## 0.6.0 (2023-03-31)
### Features Added

- New struct `ClientFactory` which is a client factory used to create any client in this module


## 0.5.0 (2022-05-17)

The package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/saas/armsaas` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html) since version 0.5.0, which contains breaking changes.

To migrate the existing applications to the latest version, please refer to [Migration Guide](https://aka.ms/azsdk/go/mgmt/migration).

To learn more, please refer to our documentation [Quick Start](https://aka.ms/azsdk/go/mgmt).

----------------------------------------

TITLE: Configuring AutoRest for Azure Reservations SDK Generation
DESCRIPTION: YAML configuration for AutoRest to generate Azure Reservations SDK for Go. Specifies Azure ARM mode, required API specifications from Azure REST API specs repository, Microsoft MIT license header, and module version 3.1.0.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/1e7b408f3323e7f5424745718fe62c7a043a2337/specification/reservations/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/1e7b408f3323e7f5424745718fe62c7a043a2337/specification/reservations/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 3.1.0

----------------------------------------

TITLE: New Field: MessageOfTheDay in ManagedClusterAgentPoolProfile
DESCRIPTION: Adds a new field 'MessageOfTheDay' to the ManagedClusterAgentPoolProfile struct.

LANGUAGE: Go
CODE:
New field `MessageOfTheDay` in struct `ManagedClusterAgentPoolProfile`

----------------------------------------

TITLE: Configuring Client Options for Different Clouds
DESCRIPTION: Creates client factory with custom options for connecting to different Azure clouds including sovereign clouds and Azure Stack

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armedgeorderpartner.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Authenticating with Azure using DefaultAzureCredential
DESCRIPTION: Creates a default Azure credential object for authentication with Azure services.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Example Feature Addition in v4.1.0
DESCRIPTION: Shows new enum types and values added in the latest release

LANGUAGE: go
CODE:
- New value `SiteLoadBalancingLeastRequestsWithTieBreaker` added to enum type `SiteLoadBalancing`
- New enum type `AutoGeneratedDomainNameLabelScope` with values `AutoGeneratedDomainNameLabelScopeNoReuse`, `AutoGeneratedDomainNameLabelScopeResourceGroupReuse`, `AutoGeneratedDomainNameLabelScopeSubscriptionReuse`, `AutoGeneratedDomainNameLabelScopeTenantReuse`

----------------------------------------

TITLE: Installing Azure Databasewatcher Module in Go
DESCRIPTION: This command installs the Azure Databasewatcher module using Go's package manager. It requires Go modules for versioning and dependency management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/databasewatcher/armdatabasewatcher

----------------------------------------

TITLE: Configuring AutoRest for Azure Sphere Go SDK Generation
DESCRIPTION: AutoRest configuration that defines parameters for generating Azure Sphere SDK code. It specifies the Azure ARM mode, required API specifications from GitHub, Microsoft MIT license header, module version 1.0.0, and targets the 2024-04-01 API version package.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/09c37754dac91874ff689ed1e60effb4268c8669/specification/sphere/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/09c37754dac91874ff689ed1e60effb4268c8669/specification/sphere/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.0.0
tag: package-2024-04-01

----------------------------------------

TITLE: Installing Azure Purview Go Module
DESCRIPTION: Command to install the Azure Purview module using Go modules package management

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/purview/armpurview

----------------------------------------

TITLE: Creating Client Factory for Azure Managed Network
DESCRIPTION: Initializes a client factory for creating Azure Managed Network service clients using subscription ID and credentials.

LANGUAGE: go
CODE:
clientFactory, err := armmanagednetwork.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK Go Data Share Module
DESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure SDK for Go Data Share module. It specifies the Azure ARM mode, required API specifications, license header, and module version.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/datashare/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/datashare/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.2.0

----------------------------------------

TITLE: Retrieving AccessConnector in Go
DESCRIPTION: Retrieves the details of a specific AccessConnector resource.

LANGUAGE: go
CODE:
*AccessConnectorsClient.Get(context.Context, string, string, *AccessConnectorsClientGetOptions) (AccessConnectorsClientGetResponse, error)

----------------------------------------

TITLE: Configuring AutoRest for Azure Container Service SDK Generation in YAML
DESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure Container Service SDK. It specifies the Azure ARM mode, required API specifications, license header, module version, and package tag.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/f2826dd1e08d4625b29867c01a232d2dad423521/specification/containerservice/resource-manager/Microsoft.ContainerService/aks/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/f2826dd1e08d4625b29867c01a232d2dad423521/specification/containerservice/resource-manager/Microsoft.ContainerService/aks/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 6.4.0
tag: package-2024-10

----------------------------------------

TITLE: Adding New Enum Values in Go
DESCRIPTION: Example of adding new values to existing enum types in Go

LANGUAGE: Go
CODE:
// New values added to ClusterConnectionStatus enum
ClusterConnectionStatusDisconnected ClusterConnectionStatus = "Disconnected"

// New values added to ClusterDetailedStatus enum
ClusterDetailedStatusUpdatePaused ClusterDetailedStatus = "UpdatePaused"

// New values added to RackSKUProvisioningState enum
RackSKUProvisioningStateCanceled RackSKUProvisioningState = "Canceled"
RackSKUProvisioningStateFailed RackSKUProvisioningState = "Failed"

----------------------------------------

TITLE: Configuring AutoRest for Azure Container Service SDK Generation in YAML
DESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure Container Service SDK. It specifies the Azure ARM mode, required API specifications, license header, module version, and package tag.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/f2826dd1e08d4625b29867c01a232d2dad423521/specification/containerservice/resource-manager/Microsoft.ContainerService/aks/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/f2826dd1e08d4625b29867c01a232d2dad423521/specification/containerservice/resource-manager/Microsoft.ContainerService/aks/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 6.4.0
tag: package-2024-10

----------------------------------------

TITLE: New Client Creation
DESCRIPTION: Example of creating a new client with credentials and options

LANGUAGE: go
CODE:
func NewArchiveVersionsClient(string, azcore.TokenCredential, *arm.ClientOptions) (*ArchiveVersionsClient, error)

----------------------------------------

TITLE: Authenticating with Azure Using Default Credentials in Go
DESCRIPTION: This snippet demonstrates how to create a default Azure credential using the azidentity package. It's used for authenticating with Azure Deployment Manager.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Authenticating with Azure using Default Credentials
DESCRIPTION: Creates a default Azure credential object for authentication with Azure services using the azidentity package.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Authenticating with Azure using Default Credential in Go
DESCRIPTION: This code snippet shows how to create a default Azure credential using the azidentity package. It's used for authenticating with Azure services, including Container Apps.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Declaring New Structs in Go
DESCRIPTION: New structs are introduced to represent various resources and properties. This snippet shows how new structs are declared in Go.

LANGUAGE: go
CODE:
- New struct `ClassificationService`
- New struct `DiscoveryNlpRequest`
- New struct `DiscoveryNlpResponse`
- New struct `NlpSolutions`
- New struct `ReplacementMapsSelfHelp`
- New struct `SectionSelfHelp`
- New struct `SimplifiedSolutionsResource`
- New struct `SimplifiedSolutionsResourceProperties`

----------------------------------------

TITLE: New Field: MessageOfTheDay in ManagedClusterAgentPoolProfileProperties
DESCRIPTION: Adds a new field 'MessageOfTheDay' to the ManagedClusterAgentPoolProfileProperties struct.

LANGUAGE: Go
CODE:
New field `MessageOfTheDay` in struct `ManagedClusterAgentPoolProfileProperties`

----------------------------------------

TITLE: Configuring AutoRest Parameters for Azure Service Linker SDK Generation
DESCRIPTION: YAML configuration for AutoRest code generation tool. Specifies Azure ARM mode, required API specifications, license header, module version 2.0.0-beta.2, and targets the preview API version package-2024-07-01-preview.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/ad60d7f8eba124edc6999677c55aba2184e303b0/specification/servicelinker/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/ad60d7f8eba124edc6999677c55aba2184e303b0/specification/servicelinker/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 2.0.0-beta.2
tag: package-2024-07-01-preview

----------------------------------------

TITLE: Configuring AutoRest Settings for Azure SDK Go Generation
DESCRIPTION: YAML configuration for AutoRest that specifies the source OpenAPI specs, module version, and other parameters needed to generate the Azure SDK for Go. References the Image Builder service specifications and sets Azure ARM-specific parameters.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/b22c642b361e6d6e7d72a2347a09b0bcf6075d70/specification/imagebuilder/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/b22c642b361e6d6e7d72a2347a09b0bcf6075d70/specification/imagebuilder/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 2.3.0
tag: package-2024-02

----------------------------------------

TITLE: Installing Azure Storage Sync Module
DESCRIPTION: Command to install the Azure Storage Sync module using Go modules for dependency management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/storagesync/armstoragesync

----------------------------------------

TITLE: Configuring Azure Key Vault Client with Custom Options
DESCRIPTION: Sets up a client factory with custom options for connecting to different Azure clouds including sovereign clouds and Azure Stack.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armkeyvault.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Authenticating with Azure Default Credentials
DESCRIPTION: Creates a default Azure credential object for authentication with Azure services

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Configuring AutoRest for Azure Cognitive Services SDK Generation in Go
DESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure Cognitive Services SDK for Go. It specifies Azure ARM mode, required API specifications, MICROSOFT_MIT_NO_VERSION license header, module version 1.7.0, and targets the package-2024-10 tag.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/069a65e8a6d1a6c0c58d9a9d97610b7103b6e8a5/specification/cognitiveservices/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/069a65e8a6d1a6c0c58d9a9d97610b7103b6e8a5/specification/cognitiveservices/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.7.0
tag: package-2024-10

----------------------------------------

TITLE: Installing Azure Data Factory Go Module
DESCRIPTION: Command to install the Azure Data Factory module using Go modules for dependency management

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/datafactory/armdatafactory/v9

----------------------------------------

TITLE: Release Notes Entry in Markdown
DESCRIPTION: Documents the initial 0.1.0 release of the Azure Migration Assessment SDK package noting its implementation of next generation design principles and references to documentation.

LANGUAGE: markdown
CODE:
# Release History

## 0.1.0 (2025-03-03)
### Other Changes

The package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/migrationassessment/armmigrationassessment` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html).

To learn more, please refer to our documentation [Quick Start](https://aka.ms/azsdk/go/mgmt).

----------------------------------------

TITLE: Configuring AutoRest for Azure Integration Spaces SDK Generation
DESCRIPTION: YAML configuration that defines parameters for generating Go SDK code using AutoRest. References specific versions of Azure REST API specifications, sets ARM mode, defines license header, and specifies module version 0.1.0 targeting package-2023-11-14-preview.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/db9788dde7a0c2c0d82e4fdf5f7b4de3843937e3/specification/azureintegrationspaces/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/db9788dde7a0c2c0d82e4fdf5f7b4de3843937e3/specification/azureintegrationspaces/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 0.1.0
tag: package-2023-11-14-preview

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK Generation in YAML
DESCRIPTION: This YAML configuration sets up AutoRest for generating the Azure SDK for Go. It specifies Azure ARM settings, required specification files, license header, and module version.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/consumption/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/consumption/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.2.0

----------------------------------------

TITLE: Authenticating with Azure Digital Twins
DESCRIPTION: Creating a default Azure credential for authentication with Azure Digital Twins services.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Initializing Customer Lockbox Client Factory
DESCRIPTION: Create a new client factory instance for Azure Customer Lockbox services using subscription ID and credentials.

LANGUAGE: go
CODE:
clientFactory, err := armcustomerlockbox.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK Generation in YAML
DESCRIPTION: This YAML configuration sets up AutoRest for generating the Azure SDK for Go. It enables Azure ARM mode, specifies required specification files, sets the license header, module version, and API version tag.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/366aaa13cdd218b9adac716680e49473673410c8/specification/app/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/366aaa13cdd218b9adac716680e49473673410c8/specification/app/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 3.1.0-beta.1
tag: package-preview-2024-08

----------------------------------------

TITLE: Authenticating with Azure Dedicated HSM using DefaultAzureCredential
DESCRIPTION: This snippet demonstrates how to create a default Azure credential for authentication with Azure Dedicated HSM.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Installing Azure Compute Schedule Module
DESCRIPTION: Command to install the Azure Compute Schedule module using Go modules for dependency management.

LANGUAGE: shell
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/computeschedule/armcomputeschedule

----------------------------------------

TITLE: Configuring AutoRest for Azure Front Door SDK Generation in YAML
DESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure Front Door SDK for Go. It specifies the Azure ARM mode, required API specifications, license header, module version, and package tag.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/b54ffc9278eff071455b1dbb4ad2e772afce885d/specification/frontdoor/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/b54ffc9278eff071455b1dbb4ad2e772afce885d/specification/frontdoor/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.4.0
tag: package-2024-02

----------------------------------------

TITLE: Configuring AutoRest for Azure Bare Metal Infrastructure SDK Generation in YAML
DESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure Bare Metal Infrastructure SDK for Go. It specifies the Azure ARM mode, required API specifications from GitHub, license header, module version, and the API version tag to use.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/90115af9fda46f323e5c42c274f2b376108d1d47/specification/baremetalinfrastructure/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/90115af9fda46f323e5c42c274f2b376108d1d47/specification/baremetalinfrastructure/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 2.0.0-beta.1
tag: package-preview-2023-08

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK for Go Network Package
DESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure SDK for Go network package. It specifies the Azure ARM mode, required specification files, license header, module version, and package tag.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/ab04533261eff228f28e08900445d0edef3eb70c/specification/network/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/ab04533261eff228f28e08900445d0edef3eb70c/specification/network/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 6.2.0
tag: package-2024-05

----------------------------------------

TITLE: Installing Azure Billing SDK Package
DESCRIPTION: Command to install the Azure Billing module using Go modules for dependency management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/billing/armbilling

----------------------------------------

TITLE: Configuring Azure Costmanagement Client for China Cloud in Go
DESCRIPTION: Sets up client options to connect to Azure China cloud for Costmanagement operations.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armcostmanagement.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Creating a New ApplicationGroupClient in Go
DESCRIPTION: This code snippet demonstrates how to create a new ApplicationGroupClient using the Azure SDK for Go.

LANGUAGE: go
CODE:
NewApplicationGroupClient(string, azcore.TokenCredential, *arm.ClientOptions) (*ApplicationGroupClient, error)

----------------------------------------

TITLE: Configuring AutoRest for Azure Data Protection SDK Generation in YAML
DESCRIPTION: This YAML configuration specifies the settings for AutoRest to generate the Azure Data Protection SDK for Go. It includes ARM support, required API specifications, license header, module version, and package tag.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/81a4ee5a83ae38620c0e1404793caffe005d26e4/specification/dataprotection/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/81a4ee5a83ae38620c0e1404793caffe005d26e4/specification/dataprotection/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 3.1.0
tag: package-2024-04

----------------------------------------

TITLE: Creating New Structs for Managed Service Identity in Go
DESCRIPTION: Defines new structs ManagedServiceIdentity and UserAssignedIdentity for handling managed service identities.

LANGUAGE: Go
CODE:
type ManagedServiceIdentity struct {
    // Fields not provided in the changelog
}

type UserAssignedIdentity struct {
    // Fields not provided in the changelog
}

----------------------------------------

TITLE: Installing Azure Digital Twins Go Module
DESCRIPTION: Command to install the Azure Digital Twins module using Go modules package management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/digitaltwins/armdigitaltwins

----------------------------------------

TITLE: Creating Power Platform Client Factory
DESCRIPTION: Initializes a new client factory for Azure Power Platform services using subscription ID and credentials

LANGUAGE: go
CODE:
clientFactory, err := armpowerplatform.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Creating App Configuration Stores Client in Go
DESCRIPTION: This code demonstrates how to create a specific client for managing Azure App Configuration stores using the previously created client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewConfigurationStoresClient()

----------------------------------------

TITLE: Updated Job Client Response Changes
DESCRIPTION: Breaking changes to job execution response types in version 3.0.0

LANGUAGE: go
CODE:
// Removed fields
Field EndTime, StartTime, Status, Template of struct JobExecution has been removed

----------------------------------------

TITLE: Configuring AutoRest for Azure Recovery Services SDK Generation
DESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure Recovery Services SDK. It specifies the Azure ARM mode, required API specifications, license header, module version, and custom directives for modifying operation IDs in the vaults.json file. The configuration targets the package-2024-04 API version.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/33c4457b1d13f83965f4fe3367dca4a6df898100/specification/recoveryservices/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/33c4457b1d13f83965f4fe3367dca4a6df898100/specification/recoveryservices/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 2.0.0
directive:
- from: vaults.json
  where: '$.paths["/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/operationStatus/{operationId}"].get'
  transform: >
    $["operationId"] = "Operations_OperationStatus_Get"
- from: vaults.json
  where: '$.paths["/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/operationResults/{operationId}"].get'
  transform: >
    $["operationId"] = "Operations_GetOperationResult"
tag: package-2024-04

----------------------------------------

TITLE: Installing Azure Consumption Module for Go
DESCRIPTION: This command installs the Azure Consumption module using Go's package manager. It requires Go modules for versioning and dependency management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/consumption/armconsumption

----------------------------------------

TITLE: Operation Customization Directives
DESCRIPTION: Multiple YAML directives to customize operation behaviors including removing responses, changing parameter types, and renaming operations.

LANGUAGE: yaml
CODE:
directive:
  - from: swagger-document
    where: $["paths"]["/acr/v1/{name}"]
    transform: >
      delete $.delete["responses"]["202"].schema

----------------------------------------

TITLE: Configuring AutoRest for Azure Stream Analytics Go SDK Generation
DESCRIPTION: YAML configuration for AutoRest tool to generate Go SDK for Azure Stream Analytics. Specifies Azure ARM mode, required API specifications, license header, module version, and API version tag.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/fa469a1157c33837a46c9bcd524527e94125189a/specification/streamanalytics/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/fa469a1157c33837a46c9bcd524527e94125189a/specification/streamanalytics/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 2.0.0-beta.1
tag: package-2021-10-preview

----------------------------------------

TITLE: Creating Azure Fabric Service Client
DESCRIPTION: Creates a specific service client for accessing Azure Fabric Capacities API using the client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewCapacitiesClient()

----------------------------------------

TITLE: Creating an Azure Automanage Client Factory in Go
DESCRIPTION: Initializes a client factory for Azure Automanage services using the provided subscription ID and credentials.

LANGUAGE: go
CODE:
clientFactory, err := armautomanage.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Installing Azure Management Partner Module in Go
DESCRIPTION: Command to install the Azure Management Partner module using Go modules.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/managementpartner/armmanagementpartner

----------------------------------------

TITLE: Configuring AutoRest for Azure Cost Management SDK Generation
DESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure Cost Management SDK for Go. It specifies the Azure ARM mode, required API specifications, license header, module version, and package tag.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/17aa6a1314de5aafef059d9aa2229901df506e75/specification/cost-management/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/17aa6a1314de5aafef059d9aa2229901df506e75/specification/cost-management/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 2.1.0
tag: package-2022-10

----------------------------------------

TITLE: Release History Changes Markdown
DESCRIPTION: Markdown formatted changelog documenting version history, breaking changes, new features, and bug fixes for the Azure CDN SDK for Go

LANGUAGE: markdown
CODE:
# Release History

## 2.2.0 (2024-04-26)
### Features Added

- New enum type `ProfileScrubbingState` with values `ProfileScrubbingStateDisabled`, `ProfileScrubbingStateEnabled`
- New enum type `ScrubbingRuleEntryMatchOperator` with values `ScrubbingRuleEntryMatchOperatorEqualsAny`
- New enum type `ScrubbingRuleEntryMatchVariable` with values `ScrubbingRuleEntryMatchVariableQueryStringArgNames`, `ScrubbingRuleEntryMatchVariableRequestIPAddress`, `ScrubbingRuleEntryMatchVariableRequestURI`
- New enum type `ScrubbingRuleEntryState` with values `ScrubbingRuleEntryStateDisabled`, `ScrubbingRuleEntryStateEnabled`
- New struct `ProfileLogScrubbing`
- New struct `ProfileScrubbingRules`
- New field `LogScrubbing` in struct `ProfileProperties`
- New field `LogScrubbing` in struct `ProfilePropertiesUpdateParameters`

----------------------------------------

TITLE: Configuring AutoRest for Azure Managed Network Go SDK
DESCRIPTION: YAML configuration that defines parameters for AutoRest code generation tool. Specifies Azure ARM mode, references to REST API specifications, MIT license header requirement, and sets module version to 0.3.0.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/163e27c0ca7570bc39e00a46f255740d9b3ba3cb/specification/managednetwork/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/163e27c0ca7570bc39e00a46f255740d9b3ba3cb/specification/managednetwork/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 0.3.0

----------------------------------------

TITLE: Defining RunningState Enum in Go
DESCRIPTION: Defines a new enum type RunningState with values for different states of a managed CCF instance.

LANGUAGE: Go
CODE:
type RunningState string

const (
    RunningStateActive RunningState = "Active"
    RunningStatePaused RunningState = "Paused"
    RunningStatePausing RunningState = "Pausing"
    RunningStateResuming RunningState = "Resuming"
    RunningStateUnknown RunningState = "Unknown"
)

----------------------------------------

TITLE: Creating Azure Data Factory Client Factory
DESCRIPTION: Initializes a client factory for Azure Data Factory with basic configuration

LANGUAGE: go
CODE:
clientFactory, err := armdatafactory.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Creating Azure Storage Mover Client Factory in Go
DESCRIPTION: Initializes a client factory for Azure Storage Mover with a subscription ID and credentials.

LANGUAGE: go
CODE:
clientFactory, err := armstoragemover.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Creating API Management Client Factory
DESCRIPTION: Example showing how to create a client factory for instantiating API Management service clients.

LANGUAGE: go
CODE:
clientFactory, err := armapimanagement.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Installing Azure Event Grid Namespaces Package
DESCRIPTION: Command to install the Azure Event Grid Namespaces client module using Go's package manager.

LANGUAGE: bash
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/messaging/eventgrid/aznamespaces

----------------------------------------

TITLE: Installing Azure Event Grid Namespaces Package
DESCRIPTION: Command to install the Azure Event Grid Namespaces client module using Go's package manager.

LANGUAGE: bash
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/messaging/eventgrid/aznamespaces

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK Go Generation
DESCRIPTION: This YAML configuration sets up AutoRest for generating Azure SDK for Go. It specifies the Azure ARM mode, required specification files, license header, module version, and API version tag.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/2bde125befabb21807a2021765901f20e3e74ec8/specification/playwrighttesting/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/2bde125befabb21807a2021765901f20e3e74ec8/specification/playwrighttesting/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.0.0
tag: package-2024-12-01

----------------------------------------

TITLE: Configuring AutoRest for Azure Data Box Edge SDK Generation in Go
DESCRIPTION: Specifies the AutoRest configuration for generating the Azure Data Box Edge SDK. It sets the Azure ARM flag, defines required specifications, and specifies module details.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/53b1affe357b3bfbb53721d0a2002382a046d3b0/specification/databoxedge/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/53b1affe357b3bfbb53721d0a2002382a046d3b0/specification/databoxedge/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 0.1.0
module-name: profile/p20200901/resourcemanager/databoxedge/armdataboxedge
module: github.com/Azure/azure-sdk-for-go/$(module-name)
output-folder: $(go-sdk-folder)/$(module-name)
tag: profile-hybrid-2020-09-01

----------------------------------------

TITLE: Removing Test Resources using Default Parameters in PowerShell
DESCRIPTION: This snippet shows the default parameter set for the Remove-TestResources.ps1 script. It allows for specifying a base name, subscription ID, service directory, and other optional parameters to remove test resources from Azure.

LANGUAGE: powershell
CODE:
Remove-TestResources.ps1 [-BaseName <String>] [-SubscriptionId <String>] [[-ServiceDirectory] <String>]
 [-Environment <String>] [-ResourceType <String>] [-ServicePrincipalAuth] [-Force]
 [-RemoveTestResourcesRemainingArguments <Object>] [-ProgressAction <ActionPreference>] [-WhatIf] [-Confirm]
 [<CommonParameters>]

----------------------------------------

TITLE: Installing Azure Selfhelp Module
DESCRIPTION: Command to install the Azure Selfhelp module using Go modules dependency management

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/selfhelp/armselfhelp/v2

----------------------------------------

TITLE: Installing Azure Container Instance Module in Go
DESCRIPTION: This command installs the Azure Container Instance module using Go's package manager. It retrieves the specified version of the module from the Azure SDK for Go repository.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/containerinstance/armcontainerinstance/v2

----------------------------------------

TITLE: Release History Documentation in Markdown
DESCRIPTION: Markdown formatted changelog documenting version history from 1.0.0 to 1.2.0, including feature additions, bug fixes, and breaking changes.

LANGUAGE: markdown
CODE:
# Release History

## 1.2.0 (2023-11-24)
### Features Added

- Support for test fakes and OpenTelemetry trace spans.


## 1.1.1 (2023-04-14)
### Bug Fixes

- Fix serialization bug of empty value of `any` type.

## 1.1.0 (2023-03-27)
### Features Added

- New struct `ClientFactory` which is a client factory used to create any client in this module


## 1.0.0 (2022-05-17)

The package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/analysisservices/armanalysisservices` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html) since version 1.0.0, which contains breaking changes.

To migrate the existing applications to the latest version, please refer to [Migration Guide](https://aka.ms/azsdk/go/mgmt/migration).

To learn more, please refer to our documentation [Quick Start](https://aka.ms/azsdk/go/mgmt).

----------------------------------------

TITLE: Configuring AutoRest Settings for Azure Bot Service Go SDK
DESCRIPTION: YAML configuration for AutoRest code generation tool. Specifies Azure ARM compatibility, references to API specifications, licensing header requirements, and module versioning for the Bot Service SDK.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/e7bf3adfa2d5e5cdbb804eec35279501794f461c/specification/botservice/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/e7bf3adfa2d5e5cdbb804eec35279501794f461c/specification/botservice/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.2.0

----------------------------------------

TITLE: Release Notes - Version 0.1.0
DESCRIPTION: Initial release of the package following next generation design principles

LANGUAGE: markdown
CODE:
## 0.1.0 (2024-07-26)
### Other Changes

The package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/computefleet/armcomputefleet` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html).

To learn more, please refer to our documentation [Quick Start](https://aka.ms/azsdk/go/mgmt).

----------------------------------------

TITLE: Configuring Azure Client Options for Different Clouds in Go
DESCRIPTION: Demonstrates how to set up client options for connecting to different Azure clouds, including sovereign clouds and Azure Stack.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armdataboxedge.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Creating Azure Elastic Client Factory
DESCRIPTION: Initializes a client factory for creating Azure Elastic service clients using subscription ID and credentials.

LANGUAGE: go
CODE:
clientFactory, err := armelastic.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Configuring AutoRest Settings for Azure SDK Go Generation
DESCRIPTION: YAML configuration for AutoRest tool to generate Go SDK code from Azure Developer Hub REST API specifications. Specifies ARM mode, source specifications, license header type, module version 0.6.0, and targets the preview-2024-05 API version.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/34f5146bc945549d087d38a8a593c0a5f475ad7f/specification/developerhub/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/34f5146bc945549d087d38a8a593c0a5f475ad7f/specification/developerhub/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 0.6.0
tag: package-preview-2024-05

----------------------------------------

TITLE: Documenting Release History in Markdown
DESCRIPTION: This snippet outlines the release history for version 0.1.0 of the Azure SDK for Go's Terraform Resource Manager package. It includes the release date and mentions the adoption of next-generation design principles.

LANGUAGE: markdown
CODE:
# Release History

## 0.1.0 (2024-11-20)
### Other Changes

The package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/terraform/armterraform` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html).

To learn more, please refer to our documentation [Quick Start](https://aka.ms/azsdk/go/mgmt).

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK Go - Oracle Resource Manager
DESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure SDK for Go for the Oracle Resource Manager. It specifies Azure ARM mode, required API specifications, license header, module version, and package tag.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/1c63635d66ae38cff18045ab416a6572d3e15f6e/specification/oracle/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/1c63635d66ae38cff18045ab416a6572d3e15f6e/specification/oracle/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.0.0
tag: package-2023-09-01

----------------------------------------

TITLE: WebPubSub Custom Domain Configuration
DESCRIPTION: APIs for managing custom domains and certificates for WebPubSub services

LANGUAGE: go
CODE:
*CustomDomainsClient.BeginCreateOrUpdate(context.Context, string, string, string, CustomDomain, *CustomDomainsClientBeginCreateOrUpdateOptions) (*runtime.Poller[CustomDomainsClientCreateOrUpdateResponse], error)

----------------------------------------

TITLE: Authenticating with Azure using Default Credentials in Go
DESCRIPTION: This snippet demonstrates how to create a default Azure credential for authentication. It uses the azidentity module to provide various authentication methods.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Installing Azure Edgezones Module in Go
DESCRIPTION: This snippet shows how to install the Azure Edgezones module using Go's package manager. It uses the go get command to fetch and install the module from the specified GitHub repository.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/edgezones/armedgezones

----------------------------------------

TITLE: Configuring AutoRest Base Settings for KeyVault SDK
DESCRIPTION: Basic AutoRest configuration for generating KeyVault SDK module. Specifies required API specs, licensing, module versioning, and output settings.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/53b1affe357b3bfbb53721d0a2002382a046d3b0/specification/keyvault/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/53b1affe357b3bfbb53721d0a2002382a046d3b0/specification/keyvault/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 0.1.0
module-name: profile/p20200901/resourcemanager/keyvault/armkeyvault
module: github.com/Azure/azure-sdk-for-go/$(module-name)
output-folder: $(go-sdk-folder)/$(module-name)
tag: profile-hybrid-2020-09-01

----------------------------------------

TITLE: Installing Azure Web PubSub Go SDK
DESCRIPTION: Command to install the Azure Web PubSub module using Go modules for dependency management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/webpubsub/armwebpubsub

----------------------------------------

TITLE: Configuring Azure Compute Fleet Client for Different Clouds in Go
DESCRIPTION: This snippet shows how to configure the client factory for different Azure clouds or Azure Stack. It uses ClientOptions to set the endpoint for connecting to specific cloud environments.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armcomputefleet.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Version History Entry - 0.5.0
DESCRIPTION: Release notes for version 0.5.0 documenting migration to next generation design principles

LANGUAGE: markdown
CODE:
## 0.5.0 (2022-05-17)

The package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/synapse/armsynapse` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html) since version 0.5.0, which contains breaking changes.

----------------------------------------

TITLE: Configuring AutoRest for Azure Storage Import/Export SDK Generation in YAML
DESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure Storage Import/Export SDK for Go. It specifies the Azure ARM mode, required API specifications, license header, module version, and includes a custom directive for parameter transformation.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/storageimportexport/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/storageimportexport/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 0.7.0

directive:
  - from: swagger-document
    where: $.parameters.Accept-Language
    transform: $['x-ms-parameter-location'] = "method"

----------------------------------------

TITLE: Configuring AutoRest for Azure Blockchain Go SDK Generation
DESCRIPTION: Configuration settings for AutoRest to generate the Azure Blockchain SDK for Go. Specifies the required API specifications, license header, and module version. Uses Azure ARM mode and references specific versions of the blockchain resource manager specifications.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/7a2ac91de424f271cf91cc8009f3fe9ee8249086/specification/blockchain/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/7a2ac91de424f271cf91cc8009f3fe9ee8249086/specification/blockchain/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 0.7.0

----------------------------------------

TITLE: Configuring Client Options for Different Clouds
DESCRIPTION: Sets up client options for connecting to different Azure clouds including sovereign clouds

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armstoragepool.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Creating Azure App Platform Client Factory
DESCRIPTION: Initializes a client factory for Azure App Platform services using subscription ID and credentials.

LANGUAGE: go
CODE:
clientFactory, err := armappplatform.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK Go Code Generation
DESCRIPTION: This YAML configuration sets up AutoRest for generating Azure SDK code for Go. It specifies the Azure ARM mode, required API specifications, license header, module version, and package tag.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/92de53a5f1e0e03c94b40475d2135d97148ed014/specification/devcenter/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/92de53a5f1e0e03c94b40475d2135d97148ed014/specification/devcenter/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 2.0.0
tag: package-2024-02

----------------------------------------

TITLE: Configuring Client Factory with Custom Options
DESCRIPTION: Creates a client factory with custom options for connecting to different Azure clouds using ClientOptions.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armsaas.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Installing Azure Private DNS Module in Go
DESCRIPTION: This command installs the Azure Private DNS module using Go's package manager.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/privatedns/armprivatedns

----------------------------------------

TITLE: Configuring AutoRest for Azure Stack HCI SDK Generation in Go
DESCRIPTION: This YAML configuration specifies the settings for AutoRest to generate the Azure Stack HCI SDK for Go. It includes references to the API specifications, sets the Azure ARM flag, specifies the license header, module version, and API version tag.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/c9b146c38df5f76e2d34a3ef771979805ff4ff73/specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/StackHCI/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/c9b146c38df5f76e2d34a3ef771979805ff4ff73/specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/StackHCI/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 2.0.0
tag: package-2024-04

----------------------------------------

TITLE: Dependency Management with dep
DESCRIPTION: Example of version constraints for Azure SDK in dep configuration file.

LANGUAGE: toml
CODE:
[[constraint]]
  name = "github.com/Azure/azure-sdk-for-go"
  version = "21.0.0"

----------------------------------------

TITLE: Extended Location SDK Function Signatures
DESCRIPTION: New function signatures added in version 1.3.0-beta.1 for resource sync rules and custom locations management.

LANGUAGE: go
CODE:
*ClientFactory.NewResourceSyncRulesClient() *ResourceSyncRulesClient
*CustomLocationsClient.FindTargetResourceGroup(context.Context, string, string, CustomLocationFindTargetResourceGroupProperties, *CustomLocationsClientFindTargetResourceGroupOptions) (CustomLocationsClientFindTargetResourceGroupResponse, error)
NewResourceSyncRulesClient(string, azcore.TokenCredential, *arm.ClientOptions) (*ResourceSyncRulesClient, error)
*ResourceSyncRulesClient.BeginCreateOrUpdate(context.Context, string, string, string, ResourceSyncRule, *ResourceSyncRulesClientBeginCreateOrUpdateOptions) (*runtime.Poller[ResourceSyncRulesClientCreateOrUpdateResponse], error)

----------------------------------------

TITLE: Installing Azure Machine Learning Module
DESCRIPTION: Command to install the Azure Machine Learning Go module using go get

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/machinelearning/armmachinelearning/v4

----------------------------------------

TITLE: Adding Identity Field to ServiceResource and ServiceResourceUpdate Structs in Go
DESCRIPTION: Adds a new field 'Identity' to the existing ServiceResource and ServiceResourceUpdate structs.

LANGUAGE: Go
CODE:
type ServiceResource struct {
    // Existing fields
    Identity *ManagedServiceIdentity
}

type ServiceResourceUpdate struct {
    // Existing fields
    Identity *ManagedServiceIdentity
}

----------------------------------------

TITLE: Creating or Updating API Keys in Go
DESCRIPTION: Performs a create or update operation on API keys using the APIKeysClient.

LANGUAGE: Go
CODE:
*APIKeysClient.CreateOrUpdate(context.Context, string, string, string, *APIKeysClientCreateOrUpdateOptions) (APIKeysClientCreateOrUpdateResponse, error)

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK for Go
DESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure SDK for Go. It specifies the Azure ARM mode, required specifications, license header, module version, and API version tag.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/cf5ad1932d00c7d15497705ad6b71171d3d68b1e/specification/postgresqlhsc/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/cf5ad1932d00c7d15497705ad6b71171d3d68b1e/specification/postgresqlhsc/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.2.0-beta.1
tag: package-preview-2023-03

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK Go Generation
DESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure SDK for Go. It enables Azure ARM support, specifies the required API specifications from the Azure REST API specs repository, sets the license header, and defines the module version.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/7a2ac91de424f271cf91cc8009f3fe9ee8249086/specification/azurearcdata/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/7a2ac91de424f271cf91cc8009f3fe9ee8249086/specification/azurearcdata/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 0.7.0

----------------------------------------

TITLE: Initializing Azure Credentials
DESCRIPTION: Creates default Azure credentials for authentication with Azure Synapse services using azidentity module.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Creating Security Insight Client Factory
DESCRIPTION: Initializes a new client factory for Azure Security Insight services with subscription ID and credentials.

LANGUAGE: go
CODE:
clientFactory, err := armsecurityinsights.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Configuring AutoRest Settings for Azure SDK Generation
DESCRIPTION: YAML configuration for AutoRest that specifies Azure ARM mode, required API specifications from GitHub, Microsoft MIT license header requirement, and module version 1.2.0. This configuration is used to generate Go SDK code from Azure REST API specifications.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/163e27c0ca7570bc39e00a46f255740d9b3ba3cb/specification/dnc/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/163e27c0ca7570bc39e00a46f255740d9b3ba3cb/specification/dnc/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.2.0

----------------------------------------

TITLE: Documenting Other Changes in Markdown for Azure SDK Go Qumulo Module v1.0.0
DESCRIPTION: Indicates the release of a stable version 1.0.0.

LANGUAGE: markdown
CODE:
### Other Changes

- Release stable version.

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK for Go Generation
DESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure SDK for Go. It specifies Azure ARM mode, required API specifications, license header, module version, and enables the templatespecs package.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/0cc5e2efd6ffccf30e80d1e150b488dd87198b94/specification/resources/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/0cc5e2efd6ffccf30e80d1e150b488dd87198b94/specification/resources/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.2.0
package-templatespecs: true

----------------------------------------

TITLE: Authenticating with Azure Default Credentials
DESCRIPTION: Creates a default Azure credential object for authentication with Azure services using the azidentity package.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Release Configuration Format in JSON
DESCRIPTION: Defines the structure of the configuration file used to specify release requests. The JSON contains track1 and track2 requests organized by specification paths and includes target dates and request links.

LANGUAGE: json
CODE:
{
  "track1Requests": {
    "specification/network/resource-manager/readme.md": {
      "package-2020-12-01": [
        {
          "targetDate": "2021-02-11T00:00:00Z",
          "requestLink": "https://github.com/Azure/sdk-release-request/issues/1212"
        }
      ]
    }
  },
  "track2Requests": {},
  "refresh": {}
}

----------------------------------------

TITLE: Creating Azure DevOps Pipelines Client in Go
DESCRIPTION: Demonstrates how to create a specific client (in this case, for Pipelines) using the previously created client factory. This client can be used to interact with Azure DevOps Pipelines.

LANGUAGE: go
CODE:
client := clientFactory.NewPipelinesClient()

----------------------------------------

TITLE: Creating Azure NetApp Files Client Factory in Go
DESCRIPTION: This code creates a client factory for Azure NetApp Files. It requires a subscription ID and a credential object.

LANGUAGE: go
CODE:
clientFactory, err := armnetapp.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Installing Azure Private 5G Core Module for Go
DESCRIPTION: Installs the Azure Private 5G Core module using Go's package manager. This command fetches the latest version of the module and its dependencies.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/mobilenetwork/armmobilenetwork/v4

----------------------------------------

TITLE: Authenticating with Azure Default Credentials
DESCRIPTION: Creates a default Azure credential object for authentication with Azure services.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Updating AccessConnector in Go
DESCRIPTION: Initiates an asynchronous operation to update an existing AccessConnector resource. Returns a Poller for tracking the operation progress.

LANGUAGE: go
CODE:
*AccessConnectorsClient.BeginUpdate(context.Context, string, string, AccessConnectorUpdate, *AccessConnectorsClientBeginUpdateOptions) (*runtime.Poller[AccessConnectorsClientUpdateResponse], error)

----------------------------------------

TITLE: Configuring AutoRest Base Settings for Azure Container Registry
DESCRIPTION: Primary AutoRest configuration that specifies the module settings, dependencies, and output configuration for the Container Registry SDK generation.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/53b1affe357b3bfbb53721d0a2002382a046d3b0/specification/containerregistry/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/53b1affe357b3bfbb53721d0a2002382a046d3b0/specification/containerregistry/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 0.1.0
module-name: profile/p20200901/resourcemanager/containerregistry/armcontainerregistry
module: github.com/Azure/azure-sdk-for-go/$(module-name)
output-folder: $(go-sdk-folder)/$(module-name)
tag: package-2019-05-only

----------------------------------------

TITLE: Using the new WorkloadNetworksClient.Get method in Go
DESCRIPTION: Example of using the updated WorkloadNetworksClient.Get method with its new parameter signature in version 2.0.0.

LANGUAGE: Go
CODE:
resp, err := client.Get(ctx, resourceGroupName, privateCloudName, &armavs.WorkloadNetworksClientGetOptions{})
if err != nil {
    // handle error
}
// use resp

----------------------------------------

TITLE: Authenticating with Azure Identity
DESCRIPTION: Creates default Azure credentials for authentication with Azure services

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Creating Azure Stack HCI Client Factory
DESCRIPTION: Initializes a client factory for Azure Stack HCI services using subscription ID and credentials.

LANGUAGE: go
CODE:
clientFactory, err := armazurestackhci.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Adding New Functions in Go
DESCRIPTION: Example of adding new functions to existing clients in Go

LANGUAGE: Go
CODE:
func (*ClientFactory) NewKubernetesClusterFeaturesClient() *KubernetesClusterFeaturesClient

func (*ClustersClient) BeginContinueUpdateVersion(context.Context, string, string, ClusterContinueUpdateVersionParameters, *ClustersClientBeginContinueUpdateVersionOptions) (*runtime.Poller[ClustersClientContinueUpdateVersionResponse], error)

func (*ClustersClient) BeginScanRuntime(context.Context, string, string, *ClustersClientBeginScanRuntimeOptions) (*runtime.Poller[ClustersClientScanRuntimeResponse], error)

func NewKubernetesClusterFeaturesClient(string, azcore.TokenCredential, *arm.ClientOptions) (*KubernetesClusterFeaturesClient, error)

----------------------------------------

TITLE: Configuring AutoRest Settings for Azure Lab Services SDK Generation
DESCRIPTION: Defines the configuration parameters for AutoRest to generate Go SDK code for Azure Lab Services. Specifies the source API specifications, licensing, and module versioning requirements.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/4c2cdccf6ca3281dd50ed8788ce1de2e0d480973/specification/labservices/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/4c2cdccf6ca3281dd50ed8788ce1de2e0d480973/specification/labservices/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.2.0

----------------------------------------

TITLE: Authenticating with Azure using Default Azure Credential in Go
DESCRIPTION: This snippet demonstrates how to create a default Azure credential for authentication. It uses the azidentity module to provide various authentication methods with Azure.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Creating Azure Cosmos for PostgreSQL Client Factory
DESCRIPTION: Initializes a client factory for creating Azure Cosmos for PostgreSQL service clients using subscription ID and credentials.

LANGUAGE: go
CODE:
clientFactory, err := armcosmosforpostgresql.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Installing Azure HDInsight Containers Go Module
DESCRIPTION: Command to install the Azure HDInsight Containers module using Go modules for dependency management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/hdinsightcontainers/armhdinsightcontainers

----------------------------------------

TITLE: Channel Interface Methods - Go
DESCRIPTION: Interface methods for retrieving channel instances for different channel types including ACS Chat, M365 Extensions, Omnichannel, Outlook, Search Assistant and Telephony channels.

LANGUAGE: go
CODE:
*AcsChatChannel.GetChannel() *Channel
*M365Extensions.GetChannel() *Channel
*Omnichannel.GetChannel() *Channel
*OutlookChannel.GetChannel() *Channel
*SearchAssistant.GetChannel() *Channel
*TelephonyChannel.GetChannel() *Channel

----------------------------------------

TITLE: New Function Additions in Go SDK
DESCRIPTION: New client factory and management functions added in version 1.0.0 for managing VM instances and related resources.

LANGUAGE: go
CODE:
// New client factory functions
func NewVMInstanceGuestAgentsClient(azcore.TokenCredential, *arm.ClientOptions) (*VMInstanceGuestAgentsClient, error)
func NewVMInstanceHybridIdentityMetadataClient(azcore.TokenCredential, *arm.ClientOptions) (*VMInstanceHybridIdentityMetadataClient, error)
func NewVirtualMachineInstancesClient(azcore.TokenCredential, *arm.ClientOptions) (*VirtualMachineInstancesClient, error)

----------------------------------------

TITLE: Authenticating with Azure Advisor in Go
DESCRIPTION: Creates a default Azure credential for authentication with Azure Advisor.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Installing Azure SQL VM Module with Go
DESCRIPTION: Command to install the Azure SQL Server VM module using Go modules for dependency management

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/sqlvirtualmachine/armsqlvirtualmachine

----------------------------------------

TITLE: Creating Azure Managed Services Client Factory
DESCRIPTION: Initializes a client factory for Azure Managed Services using subscription ID and credentials

LANGUAGE: go
CODE:
clientFactory, err := armmanagedservices.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK for Go Management Partner
DESCRIPTION: This YAML configuration specifies the settings for AutoRest to generate the Azure SDK for Go. It requires the Azure REST API specifications for the Management Partner resource provider and sets specific options like azure-arm, license header, and module version.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/managementpartner/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/managementpartner/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 0.7.0

----------------------------------------

TITLE: Release History Changelog Entry
DESCRIPTION: Markdown changelog entry documenting the initial release of the azure-sdk-for-go trusted signing package, including version number and key changes.

LANGUAGE: markdown
CODE:
# Release History

## 0.1.0 (2024-09-29)
### Other Changes

The package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/trustedsigning/armtrustedsigning` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html).

To learn more, please refer to our documentation [Quick Start](https://aka.ms/azsdk/go/mgmt).

----------------------------------------

TITLE: Initializing APIKeysClient in Go
DESCRIPTION: Creates a new APIKeysClient instance using the provided subscription ID, token credential, and optional client options.

LANGUAGE: Go
CODE:
NewAPIKeysClient(string, azcore.TokenCredential, *arm.ClientOptions) (*APIKeysClient, error)

----------------------------------------

TITLE: Configuring AutoRest for Go SDK Generation
DESCRIPTION: YAML configuration for generating the Azure App Configuration client using AutoRest. Specifies input files, output settings, and various options for the Go SDK generation process.

LANGUAGE: yaml
CODE:
go: true
version: "^3.0.0"
input-file:
- https://github.com/Azure/azure-rest-api-specs/blob/1d5799e57a1bbe66a86afc246d363d8163625b45/specification/appconfiguration/data-plane/Microsoft.AppConfiguration/stable/2023-10-01/appconfiguration.json
- appconfiguration_ext.json
license-header: MICROSOFT_MIT_NO_VERSION
clear-output-folder: false
file-prefix: "zz_"
output-folder: generated
openapi-type: "data-plane"
security: "AADToken"
use: "@autorest/go@4.0.0-preview.63"
slice-elements-byval: true
modelerfour:
  lenient-model-deduplication: true

----------------------------------------

TITLE: Installing Azure API Management Go SDK
DESCRIPTION: Command to install the Azure API Management module using Go modules for dependency management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/apimanagement/armapimanagement/v2

----------------------------------------

TITLE: Creating Azure DevOps Client Factory in Go
DESCRIPTION: Snippet showing how to create a client factory for Azure DevOps. The factory is used to create specific clients for different Azure DevOps operations.

LANGUAGE: go
CODE:
clientFactory, err := armdevops.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Installing Azure Chaos Module with Go
DESCRIPTION: Command to install the Azure Chaos module using Go's package manager.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/chaos/armchaos

----------------------------------------

TITLE: Installing Azure Virtual Desktop SDK Module
DESCRIPTION: Command to install the Azure Virtual Desktop module using Go modules for dependency management

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/desktopvirtualization/armdesktopvirtualization/v2

----------------------------------------

TITLE: Configuring Azure Blueprint Client for Sovereign Clouds in Go
DESCRIPTION: Sets up client options for connecting to sovereign clouds or Azure Stack.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armblueprint.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Updating MongoDB Extension Parameter Types
DESCRIPTION: Defines and updates the embedding dependency type for MongoDB chat extension parameters

LANGUAGE: yaml
CODE:
directive:
  - from: swagger-document
    where: $.definitions
    transform: |
      $["MongoDBChatExtensionParametersEmbeddingDependency"] = {
        "x-ms-external": true,
        "type": "object", "properties": { "stub": { "type": "string" }}
      };
      return $;
  - from: swagger-document
    where: $.definitions.MongoDBChatExtensionParameters.properties.embedding_dependency
    transform: $["$ref"] = "#/definitions/MongoDBChatExtensionParametersEmbeddingDependency"; return $;

----------------------------------------

TITLE: Installing Azure Migrationassessment Module in Go
DESCRIPTION: Command to install the Azure Migrationassessment module using Go's package manager.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/migrationassessment/armmigrationassessment

----------------------------------------

TITLE: Installing Azure Addons Module with Go
DESCRIPTION: This command installs the Azure Addons module using Go's package manager. It requires Go modules for versioning and dependency management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/addons/armaddons

----------------------------------------

TITLE: Installing Azure Serial Console Module with Go
DESCRIPTION: Command to install the Azure Serial Console module using Go modules package manager.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/serialconsole/armserialconsole

----------------------------------------

TITLE: Creating Azure Data Share Client Factory in Go
DESCRIPTION: This code creates a client factory for Azure Data Share. It requires a subscription ID and a credential. The factory can be used to create various clients for different Azure Data Share operations.

LANGUAGE: go
CODE:
clientFactory, err := armdatashare.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK Go Generation
DESCRIPTION: YAML configuration for AutoRest to generate Azure SDK for Go. It specifies Azure ARM mode, required specifications, license header, and module version. Note that versions 1.0.0 and 1.0.1 were retracted due to a mistake.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/630ec444f8dd7c09b9cdd5fa99951f8a0d1ad41f/specification/loadtestservice/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/630ec444f8dd7c09b9cdd5fa99951f8a0d1ad41f/specification/loadtestservice/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.2.0

# v1.0.0 and v1.0.1 has been retracted because of mistake. When this RP goes GA, it starts at version v1.0.2

----------------------------------------

TITLE: Installing Azure App Service Module in Go
DESCRIPTION: Command to install the Azure App Service module using Go modules. This installs version 4 of the module.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/appservice/armappservice/v4

----------------------------------------

TITLE: Creating Azure Notification Hubs Client Factory
DESCRIPTION: Initialize a client factory for Azure Notification Hubs. This code shows how to create a client factory using the subscription ID and credentials.

LANGUAGE: go
CODE:
clientFactory, err := armnotificationhubs.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Fixing Pager Implementation in Go Client
DESCRIPTION: YAML directives to modify the pager implementation in the generated Go client. It sets the operationName for x-ms-pageable and adjusts the URL path handling in the client code.

LANGUAGE: yaml
CODE:
directive:
- from: swagger-document
  where: $.paths.*.get.x-ms-pageable
  transform: >
    $.operationName = "GetNextPage";
- from: zz_azureappconfiguration_client.go
  where: $
  transform: >
    return $.
      replace(/urlPath\s+:=\s+"\/\{nextLink\}"/, "urlPath := nextLink").
      replace(/\s+urlPath\s+=\s+strings\.ReplaceAll\(urlPath, "\{nextLink\}", nextLink\)/, "");

----------------------------------------

TITLE: Markdown Release Notes for Azure Connected Cache SDK v0.1.0
DESCRIPTION: Release history entry documenting the initial release of the Connected Cache SDK package which implements Azure SDK's next generation design principles.

LANGUAGE: markdown
CODE:
# Release History

## 0.1.0 (2024-11-20)
### Other Changes

The package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/connectedcache/armconnectedcache` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html).

To learn more, please refer to our documentation [Quick Start](https://aka.ms/azsdk/go/mgmt).

----------------------------------------

TITLE: Release History Entry in Markdown
DESCRIPTION: Documents the initial 0.1.0 release of the Pinecone Vector DB package, noting its implementation of next generation design principles.

LANGUAGE: markdown
CODE:
# Release History

## 0.1.0 (2025-02-06)
### Other Changes

The package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/pineconevectordb/armpineconevectordb` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html).

To learn more, please refer to our documentation [Quick Start](https://aka.ms/azsdk/go/mgmt).

----------------------------------------

TITLE: Installing Azure AgriFood Module
DESCRIPTION: Command to install the Azure AgriFood module using Go modules package manager.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/agrifood/armagrifood

----------------------------------------

TITLE: Installing Azure Billingbenefits SDK with Go
DESCRIPTION: Command to install the Azure Billingbenefits module using Go modules package management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/billingbenefits/armbillingbenefits/v2

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK Go Generation
DESCRIPTION: This YAML configuration sets up AutoRest for generating Azure SDK for Go. It specifies the Azure ARM mode, required API specifications, license header, module details, and output folder.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/53b1affe357b3bfbb53721d0a2002382a046d3b0/specification/resources/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/53b1affe357b3bfbb53721d0a2002382a046d3b0/specification/resources/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 0.1.0
module-name: profile/p20200901/resourcemanager/resources/armresources
module: github.com/Azure/azure-sdk-for-go/$(module-name)
output-folder: $(go-sdk-folder)/$(module-name)
tag: package-resources-2019-10

----------------------------------------

TITLE: Breaking Changes in Go Azure Oracle Database SDK
DESCRIPTION: Type modifications and struct removals in version 0.2.0. Changes affect CloudExadataInfrastructure, CloudVMCluster, OracleSubscription properties and several struct definitions.

LANGUAGE: go
CODE:
CloudExadataInfrastructureProperties.DataStorageSizeInTbs *float64
CloudVMClusterProperties.NsgCidrs []*NsgCidr
OracleSubscriptionUpdate.Plan *PlanUpdate

----------------------------------------

TITLE: Creating Azure SaaS Client
DESCRIPTION: Creates a new client instance from the client factory for accessing Azure SaaS APIs.

LANGUAGE: go
CODE:
client := clientFactory.NewClient()

----------------------------------------

TITLE: Authenticating with Azure using DefaultAzureCredential in Go
DESCRIPTION: Creates a default Azure credential for authentication with Azure services.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Creating External Networks Client
DESCRIPTION: Creates a specific client instance for working with external networks using the client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewExternalNetworksClient()

----------------------------------------

TITLE: Creating AKS Assessment Operations Client in Go
DESCRIPTION: Initializes a new AKS Assessment Operations client using the previously created client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewAksAssessmentOperationsClient()

----------------------------------------

TITLE: Installing Azure SignalR Go SDK
DESCRIPTION: Command to install the Azure SignalR module using Go modules package management

LANGUAGE: shell
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/signalr/armsignalr

----------------------------------------

TITLE: Breaking Changes in Go SDK - Type Changes
DESCRIPTION: Type changes introduced in version 1.0.0 affecting provisioning state properties across multiple structs.

LANGUAGE: go
CODE:
// Type changes from *string to *ProvisioningState
ClusterInventoryItem.ProvisioningState
ClusterProperties.ProvisioningState
DatastoreInventoryItem.ProvisioningState
// ... additional type changes

----------------------------------------

TITLE: Authenticating with Azure using Default Azure Credential in Go
DESCRIPTION: This code snippet demonstrates how to create a default Azure credential for authentication. It uses the azidentity module to handle various authentication methods.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Configuring Azure Client Options
DESCRIPTION: Sets up client options for connecting to different Azure clouds including sovereign clouds and Azure Stack

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armrelay.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Creating Secret using Legacy KeyVault Module in Go
DESCRIPTION: Example showing how to create a secret using the deprecated keyvault module. Uses keyvault.BaseClient with an Authorizer for authentication and requires vault URL for each method call.

LANGUAGE: go
CODE:
import (
	"context"
	"fmt"

	"github.com/Azure/azure-sdk-for-go/profiles/latest/keyvault/keyvault"
	kvauth "github.com/Azure/azure-sdk-for-go/services/keyvault/auth"
)

func main() {
    vaultURL := "https://<TODO: your vault name>.vault.azure.net"
    secretName := "mySecret"
	secretValue := "mySecretValue"

    authorizer, err := kvauth.NewAuthorizerFromEnvironment()
	if err != nil {
		// TODO: handle error
	}

	basicClient := keyvault.New()
	basicClient.Authorizer = authorizer

	fmt.Println("\ncreating secret in keyvault:")
	var secParams keyvault.SecretSetParameters
	secParams.Value = &secretValue
	newBundle, err := basicClient.SetSecret(context.Background(), vaultURL, secretName, secParams)
	if err != nil {
		// TODO: handle error
	}
	fmt.Println("added/updated: " + *newBundle.ID)
}

----------------------------------------

TITLE: Installing Azure Bare Metal Infrastructure Module in Go
DESCRIPTION: This command installs the Azure Bare Metal Infrastructure module using Go's package manager.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/baremetalinfrastructure/armbaremetalinfrastructure/v2

----------------------------------------

TITLE: Configuring AutoRest for Azure Compute Schedule SDK Generation
DESCRIPTION: Defines the AutoRest configuration for generating Go SDK code from Azure Compute Schedule REST API specifications. Specifies the API version, licensing, and required specification files.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/8a4eca6b060cf70da696963245656fdc440b666b/specification/computeschedule/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/8a4eca6b060cf70da696963245656fdc440b666b/specification/computeschedule/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.0.0
tag: package-2024-10-01

----------------------------------------

TITLE: Updating CORS Acronym in Go Source Files
DESCRIPTION: YAML directive to change the 'Cors' acronym to be all caps 'CORS' in Go source files.

LANGUAGE: yaml
CODE:
directive:
  - from: source-file-go
    where: $
    transform: >
      return $.
        replace(/Cors/g, "CORS");

----------------------------------------

TITLE: Authentication Setup with Azure Identity
DESCRIPTION: Creates a default Azure credential for authenticating with Azure SaaS services.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Creating Azure Logz Client Factory
DESCRIPTION: Initializes a client factory for Azure Logz services using subscription ID and credentials.

LANGUAGE: go
CODE:
clientFactory, err := armlogz.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Configuring AutoRest for Azure Storage Sync Go SDK
DESCRIPTION: YAML configuration for AutoRest to generate the Azure Storage Sync Go SDK. Specifies Azure ARM mode, references the Azure REST API specs, sets Microsoft MIT license header, and defines module version 1.2.0.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/storagesync/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/storagesync/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.2.0

----------------------------------------

TITLE: Configuring AutoRest Parameters for Azure IoT Hub SDK Generation
DESCRIPTION: YAML configuration for AutoRest tool that defines the parameters for generating the Azure IoT Hub SDK. It specifies the ARM mode, required specification files, license header type, module version, and API version tag.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/32c178f2467f792a322f56174be244135d2c907f/specification/iothub/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/32c178f2467f792a322f56174be244135d2c907f/specification/iothub/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.3.0
tag: package-2023-06

----------------------------------------

TITLE: Adding Test Fakes and OpenTelemetry Support in Go for Azure Private DNS
DESCRIPTION: Adds support for test fakes and OpenTelemetry trace spans to enhance testing and observability capabilities.

LANGUAGE: markdown
CODE:
### Features Added

- Support for test fakes and OpenTelemetry trace spans.

----------------------------------------

TITLE: Installing Azure Servicefabricmanagedclusters Module in Go
DESCRIPTION: Uses go get to install the Azure Servicefabricmanagedclusters module from the Azure SDK for Go.

LANGUAGE: shell
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/servicefabricmanagedclusters/armservicefabricmanagedclusters

----------------------------------------

TITLE: Creating Event Hubs Client Factory in Go
DESCRIPTION: This code creates a client factory for Azure Event Hubs, which can be used to create specific clients for different operations.

LANGUAGE: go
CODE:
clientFactory, err := armeventhub.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Configuring AutoRest Generation for Azure SQL VM SDK
DESCRIPTION: YAML configuration that defines parameters for generating the Azure SQL Virtual Machine SDK. References specific versions of REST API specs, sets ARM mode, licensing, module version and API version tag.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/e79a5aa63c0551c1b5af1d2853cceb495283d334/specification/sqlvirtualmachine/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/e79a5aa63c0551c1b5af1d2853cceb495283d334/specification/sqlvirtualmachine/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 0.10.0
tag: package-preview-2022-08

----------------------------------------

TITLE: Creating Azure Apicenter Client Factory
DESCRIPTION: Initializes a client factory for creating Azure Apicenter service clients using subscription ID and credentials

LANGUAGE: go
CODE:
clientFactory, err := armapicenter.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Configuring AutoRest Parameters for Azure IoT Hub SDK Generation
DESCRIPTION: YAML configuration for AutoRest tool that defines the parameters for generating the Azure IoT Hub SDK. It specifies the ARM mode, required specification files, license header type, module version, and API version tag.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/32c178f2467f792a322f56174be244135d2c907f/specification/iothub/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/32c178f2467f792a322f56174be244135d2c907f/specification/iothub/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.3.0
tag: package-2023-06

----------------------------------------

TITLE: Model Transformations and API Customizations
DESCRIPTION: Collection of directives for customizing generated models, adding properties, and modifying API behaviors.

LANGUAGE: yaml
CODE:
directive:
- from: swagger-document
  where: $.definitions
  transform: >
    $.BlobPrefix.properties["Properties"] = {
      "type": "object",
      "$ref": "#/definitions/BlobPropertiesInternal"
    };

----------------------------------------

TITLE: Creating Power BI Embedded Client Factory
DESCRIPTION: Initializes a client factory for creating Power BI Embedded service clients

LANGUAGE: go
CODE:
clientFactory, err := armpowerbiembedded.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Installing Azure Domain Services Module in Go
DESCRIPTION: Use go get command to install the Azure Domain Services module from the Azure SDK for Go.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/domainservices/armdomainservices

----------------------------------------

TITLE: Configuring AutoRest for Azure StorSimple SDK Generation
DESCRIPTION: YAML configuration that defines parameters for AutoRest code generation. Specifies Azure ARM mode, required API specifications from Azure REST API repo, licensing header, and module version 1.2.0.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/163e27c0ca7570bc39e00a46f255740d9b3ba3cb/specification/storsimple8000series/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/163e27c0ca7570bc39e00a46f255740d9b3ba3cb/specification/storsimple8000series/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.2.0

----------------------------------------

TITLE: Authenticating with Azure using Default Credentials in Go
DESCRIPTION: This code snippet demonstrates how to create a default Azure credential object for authentication. It uses the azidentity package to create a DefaultAzureCredential instance.

LANGUAGE: Go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Installing Azure Redis Enterprise Module
DESCRIPTION: Command to install the Azure Redis Enterprise Go module using go get

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/redisenterprise/armredisenterprise/v2

----------------------------------------

TITLE: Creating Custom Locations Client
DESCRIPTION: Creates a client instance for accessing Custom Locations API functionality using the client factory

LANGUAGE: go
CODE:
client := clientFactory.NewCustomLocationsClient()

----------------------------------------

TITLE: Markdown Release History Documentation
DESCRIPTION: Structured changelog entries documenting version updates, new features, and bug fixes for the Azure SDK for Go package from version 1.0.0 to 1.2.0.

LANGUAGE: markdown
CODE:
# Release History

## 1.2.0 (2023-11-24)
### Features Added

- Support for test fakes and OpenTelemetry trace spans.


## 1.1.1 (2023-04-14)
### Bug Fixes

- Fix serialization bug of empty value of `any` type.


## 1.1.0 (2023-03-27)
### Features Added

- New struct `ClientFactory` which is a client factory used to create any client in this module

## 1.0.0 (2022-05-16)

The package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armtemplatespecs` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html) since version 1.0.0, which contains breaking changes.

To migrate the existing applications to the latest version, please refer to [Migration Guide](https://aka.ms/azsdk/go/mgmt/migration).

To learn more, please refer to our documentation [Quick Start](https://aka.ms/azsdk/go/mgmt).

----------------------------------------

TITLE: Installing Azure Deviceregistry Module for Go
DESCRIPTION: This command installs the Azure Deviceregistry module using Go's package manager. It requires Go modules for versioning and dependency management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/deviceregistry/armdeviceregistry

----------------------------------------

TITLE: Creating Azure Default Credential in Go
DESCRIPTION: This snippet demonstrates how to create a default Azure credential using the azidentity package. This credential can be used for authenticating with Azure services.

LANGUAGE: Go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Creating New ClientFactory Method in Go
DESCRIPTION: This code introduces a new method in the ClientFactory struct to create a DeletedWorkbooksClient. It's part of the Azure SDK for Go, allowing management of deleted workbooks in Application Insights.

LANGUAGE: go
CODE:
*ClientFactory.NewDeletedWorkbooksClient() *DeletedWorkbooksClient

----------------------------------------

TITLE: Cleaning up Const Type Names
DESCRIPTION: YAML directive to rename the PathExpiryOptions enum to ExpiryOptions to avoid stuttering.

LANGUAGE: yaml
CODE:
directive:
- from: swagger-document
  where: $.parameters['PathExpiryOptions']
  transform: >
    $["x-ms-enum"].name = "ExpiryOptions";
    $["x-ms-client-name"].name = "ExpiryOptions";

----------------------------------------

TITLE: Authenticating with Azure Credentials
DESCRIPTION: Creates default Azure credentials for authentication with Azure services

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Installing Azure Marketplace Ordering Module in Go
DESCRIPTION: Command to install the Azure Marketplace Ordering module using Go modules.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/marketplaceordering/armmarketplaceordering

----------------------------------------

TITLE: Configuring AutoRest for Azure WebPubSub Go SDK Generation
DESCRIPTION: YAML configuration that defines the parameters for generating the Azure WebPubSub SDK for Go using AutoRest. Specifies the API spec version, module version 1.3.0, and required GitHub specifications.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/7189fb57f69468c56df76f9a4d68dd9ff04ab100/specification/webpubsub/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/7189fb57f69468c56df76f9a4d68dd9ff04ab100/specification/webpubsub/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.3.0
tag: package-2024-03-01

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK Go Generation
DESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure SDK for Go. It specifies the Azure ARM mode, required API specifications, license header, module version, and API version tag.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/cf5ad1932d00c7d15497705ad6b71171d3d68b1e/specification/communication/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/cf5ad1932d00c7d15497705ad6b71171d3d68b1e/specification/communication/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 2.2.0
tag: package-2023-04

----------------------------------------

TITLE: Installing Azure Sphere Module in Go
DESCRIPTION: This command installs the Azure Sphere module using Go's package manager. It requires Go modules for versioning and dependency management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/sphere/armsphere

----------------------------------------

TITLE: Creating a Snapshot Client for Azure Appcomplianceautomation in Go
DESCRIPTION: This code demonstrates how to create a specific client (Snapshot Client) using the previously created client factory.

LANGUAGE: Go
CODE:
client := clientFactory.NewSnapshotClient()

----------------------------------------

TITLE: Updating Module References in Client Constructor
DESCRIPTION: AutoRest directive to update moduleName and moduleVersion references to use internal package constants in client files.

LANGUAGE: yaml
CODE:
directive:
  - from:
      - "*_client.go"
      - "client.go"
      - "client_factory.go"
    where: $
    transform: return $.replace(/moduleVersion/, "internal.ModuleVersion").replace(/moduleName+"/, "internal.ModuleName+\"/armstorage");

----------------------------------------

TITLE: Updating Module References in Client Constructor
DESCRIPTION: AutoRest directive to update moduleName and moduleVersion references to use internal package constants in client files.

LANGUAGE: yaml
CODE:
directive:
  - from:
      - "*_client.go"
      - "client.go"
      - "client_factory.go"
    where: $
    transform: return $.replace(/moduleVersion/, "internal.ModuleVersion").replace(/moduleName+"/, "internal.ModuleName+\"/armstorage");

----------------------------------------

TITLE: Authenticating with Azure using Default Credentials in Go
DESCRIPTION: This snippet demonstrates how to create a default Azure credential using the azidentity package. It's used for authenticating with Azure services.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Installing Azure Kubernetes Fleet Module in Go
DESCRIPTION: This command installs the Azure Kubernetes Fleet module using Go's package manager. It requires Go modules for versioning and dependency management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/containerservicefleet/armcontainerservicefleet

----------------------------------------

TITLE: Creating a Support Ticket in Go
DESCRIPTION: Begins the creation of a new support ticket using the TicketsNoSubscriptionClient, specifying the ticket name, details, and optional creation options.

LANGUAGE: go
CODE:
*TicketsNoSubscriptionClient.BeginCreate(context.Context, string, TicketDetails, *TicketsNoSubscriptionClientBeginCreateOptions) (*runtime.Poller[TicketsNoSubscriptionClientCreateResponse], error)

----------------------------------------

TITLE: Installing Azure Storage Module in Go
DESCRIPTION: This command installs the Azure Storage module using Go modules for versioning and dependency management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/storage/armstorage

----------------------------------------

TITLE: Authenticating with Azure using DefaultAzureCredential in Go
DESCRIPTION: This code demonstrates how to create a default Azure credential for authentication. It uses the NewDefaultAzureCredential function from the azidentity package to create a credential object that can be used for authenticating with Azure services.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Creating Azure Relay Namespaces Client
DESCRIPTION: Creates a new namespaces client instance using the client factory

LANGUAGE: go
CODE:
client := clientFactory.NewNamespacesClient()

----------------------------------------

TITLE: Adding New OpenAIClient Functions in Go
DESCRIPTION: New functions added for OpenAIClient including creation, update, deletion, retrieval, and listing operations.

LANGUAGE: Go
CODE:
NewOpenAIClient(string, azcore.TokenCredential, *arm.ClientOptions) (*OpenAIClient, error)
*OpenAIClient.CreateOrUpdate(context.Context, string, string, string, *OpenAIClientCreateOrUpdateOptions) (OpenAIClientCreateOrUpdateResponse, error)
*OpenAIClient.Delete(context.Context, string, string, string, *OpenAIClientDeleteOptions) (OpenAIClientDeleteResponse, error)
*OpenAIClient.Get(context.Context, string, string, string, *OpenAIClientGetOptions) (OpenAIClientGetResponse, error)
*OpenAIClient.GetStatus(context.Context, string, string, string, *OpenAIClientGetStatusOptions) (OpenAIClientGetStatusResponse, error)
*OpenAIClient.NewListPager(string, string, *OpenAIClientListOptions) *runtime.Pager[OpenAIClientListResponse]
*ClientFactory.NewOpenAIClient() *OpenAIClient

----------------------------------------

TITLE: Version 1.0.0 Release Notes
DESCRIPTION: Documents features added in version 1.0.0, released on February 10, 2025. Introduces new ResourceID field to OperationStatusResult struct.

LANGUAGE: markdown
CODE:
## 1.0.0 (2025-02-10)
### Features Added

- New field `ResourceID` in struct `OperationStatusResult`

----------------------------------------

TITLE: Creating Azure SAP HANA SapMonitors Client in Go
DESCRIPTION: Example of creating a specific client (SapMonitorsClient) from the client factory. This client can be used to interact with SAP HANA monitors on Azure.

LANGUAGE: go
CODE:
client := clientFactory.NewSapMonitorsClient()

----------------------------------------

TITLE: Adding Internal Package Import Directive
DESCRIPTION: AutoRest directive to add internal package import to client-related Go files.

LANGUAGE: yaml
CODE:
directive:
  - from:
      - "*_client.go"
      - "client.go"
      - "client_factory.go"
    where: $
    transform: return $.replace(/import \(\n/, "import (\n\"github.com/Azure/azure-sdk-for-go/profile/p20200901/internal\"\n");

----------------------------------------

TITLE: Installing Azure Migration Discovery Go Module
DESCRIPTION: Command to install the Azure Migration Discovery module using Go modules package management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/migrationdiscovery/armmigrationdiscoverysap

----------------------------------------

TITLE: Installing Azure Springappdiscovery Module in Go
DESCRIPTION: This command installs the Azure Springappdiscovery module using Go's package manager. It requires Go modules for versioning and dependency management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/springappdiscovery/armspringappdiscovery

----------------------------------------

TITLE: Release History Documentation in Markdown
DESCRIPTION: Markdown formatted changelog documenting version changes from 1.0.0 to 1.2.0, including feature additions, bug fixes, and breaking changes.

LANGUAGE: markdown
CODE:
# Release History

## 1.2.0 (2023-11-24)
### Features Added

- Support for test fakes and OpenTelemetry trace spans.


## 1.1.1 (2023-04-14)
### Bug Fixes

- Fix serialization bug of empty value of `any` type.


## 1.1.0 (2023-03-28)
### Features Added

- New struct `ClientFactory` which is a client factory used to create any client in this module


## 1.0.0 (2022-05-18)

The package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/edgeorder/armedgeorder` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html) since version 1.0.0, which contains breaking changes.

To migrate the existing applications to the latest version, please refer to [Migration Guide](https://aka.ms/azsdk/go/mgmt/migration).

To learn more, please refer to our documentation [Quick Start](https://aka.ms/azsdk/go/mgmt).

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK Go Generation
DESCRIPTION: This YAML configuration sets up AutoRest for generating the Azure SDK for Go. It specifies the Azure ARM mode, required API specifications from GitHub, license header, module version, and the API version tag to use.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/41e4538ed7bb3ceac3c1322c9455a0812ed110ac/specification/offazurespringboot/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/41e4538ed7bb3ceac3c1322c9455a0812ed110ac/specification/offazurespringboot/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 0.1.0
tag: package-2023-01-01-preview

----------------------------------------

TITLE: Configuring AutoRest for Azure Data SDK Generation
DESCRIPTION: YAML configuration for AutoRest code generator that specifies Azure ARM mode, required API specifications from Azure REST API specs repository, Microsoft MIT license header requirement, and module version 0.7.0.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/7a2ac91de424f271cf91cc8009f3fe9ee8249086/specification/azuredata/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/7a2ac91de424f271cf91cc8009f3fe9ee8249086/specification/azuredata/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 0.7.0

----------------------------------------

TITLE: Installing Azure Engagement Fabric Module for Go
DESCRIPTION: This snippet shows how to install the Azure Engagement Fabric module using Go's package manager. It requires Go modules for versioning and dependency management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/engagementfabric/armengagementfabric

----------------------------------------

TITLE: Updating Module References in Client Constructor
DESCRIPTION: AutoRest directive to update module name and version references in client constructor files to use internal package constants.

LANGUAGE: yaml
CODE:
directive:
  - from:
      - "*_client.go"
      - "client.go"
      - "client_factory.go"
    where: $
    transform: return $.replace(/moduleVersion/, "internal.ModuleVersion").replace(/moduleName+"/, "internal.ModuleName+\"/armsubscriptions");

----------------------------------------

TITLE: Installing Azure Visual Studio Module in Go
DESCRIPTION: This snippet demonstrates how to install the Azure Visual Studio module using Go's package manager. It uses the go get command to fetch and install the module from the specified GitHub repository.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/visualstudio/armvisualstudio

----------------------------------------

TITLE: Installing Azure Subscriptions Module with Go
DESCRIPTION: Command to install the Azure Subscriptions module using Go modules for dependency management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armsubscriptions

----------------------------------------

TITLE: Transforming Go SDK Code with Directives
DESCRIPTION: Custom directives for transforming generated Go code. It renames specific functions and removes conditional checks for empty row keys.

LANGUAGE: yaml
CODE:
directive:
  - from: zz_table_client.go
    where: $
    transform: >
      return $.
        replace(/\(client \*TableClient\) deleteEntityCreateRequest\(/, `(client *TableClient) DeleteEntityCreateRequest(`).
        replace(/\(client \*TableClient\) insertEntityCreateRequest\(/, `(client *TableClient) InsertEntityCreateRequest(`).
        replace(/\(client \*TableClient\) mergeEntityCreateRequest\(/, `(client *TableClient) MergeEntityCreateRequest(`).
        replace(/\(client \*TableClient\) updateEntityCreateRequest\(/, `(client *TableClient) UpdateEntityCreateRequest(`).
        replace(/= client\.deleteEntityCreateRequest\(/, `= client.DeleteEntityCreateRequest(`).
        replace(/= client\.insertEntityCreateRequest\(/, `= client.InsertEntityCreateRequest(`).
        replace(/= client\.mergeEntityCreateRequest\(/, `= client.MergeEntityCreateRequest(`).
        replace(/= client\.updateEntityCreateRequest\(/, `= client.UpdateEntityCreateRequest(`).
        replace(/if rowKey == "" \{\s*.*\s*\}\s*/g, ``);
  - from:
      - zz_time_rfc1123.go
      - zz_time_rfc3339.go
    where: $
    transform: return $.replace(/UnmarshalText\(data\s+\[\]byte\)\s+(?:error|\(error\))\s+\{\s/g, `UnmarshalText(data []byte) error {\n\tif len(data) == 0 {\n\t\treturn nil\n\t}\n`);

----------------------------------------

TITLE: Authenticating with Azure Education using DefaultAzureCredential in Go
DESCRIPTION: This code snippet shows how to create a default Azure credential for authentication with Azure Education services. It uses the azidentity package.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: New ImportJobs Client Creation - Go
DESCRIPTION: Creates a new ImportJobs client instance with the provided subscription ID, token credentials and optional client options.

LANGUAGE: go
CODE:
NewImportJobsClient(string, azcore.TokenCredential, *arm.ClientOptions) (*ImportJobsClient, error)

----------------------------------------

TITLE: Creating Storage Task Assignment Client - Go
DESCRIPTION: Creates a specific client instance for working with Storage Task assignments using the client factory

LANGUAGE: go
CODE:
client := clientFactory.NewStorageTaskAssignmentClient()

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK Generation in YAML
DESCRIPTION: This YAML configuration specifies the settings for AutoRest to generate the Azure SDK for Go. It sets the Azure ARM flag, requires specific API specifications, sets the license header, and specifies the module version.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/7a2ac91de424f271cf91cc8009f3fe9ee8249086/specification/changeanalysis/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/7a2ac91de424f271cf91cc8009f3fe9ee8249086/specification/changeanalysis/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.2.0

----------------------------------------

TITLE: Installing Azure Dev Center Module in Go
DESCRIPTION: This snippet demonstrates how to install the Azure Dev Center module using Go's package manager. It requires Go modules for versioning and dependency management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/devcenter/armdevcenter/v2

----------------------------------------

TITLE: Installing Profile Builder with Go Get
DESCRIPTION: Simple installation command for the Profile Builder tool using go get

LANGUAGE: bash
CODE:
go get -u github.com/Azure/azure-sdk-for-go/eng/tools/profileBuilder

----------------------------------------

TITLE: Creating VM Image Builder Client Factory
DESCRIPTION: Initializes a new client factory for Azure Virtual Machine Image Builder services using subscription ID and credentials

LANGUAGE: go
CODE:
clientFactory, err := armvirtualmachineimagebuilder.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Installing Azure App Configuration Module in Go
DESCRIPTION: This command installs the Azure App Configuration module using Go's package manager. It retrieves the specified version of the module from the Azure SDK for Go repository.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/appconfiguration/armappconfiguration/v2

----------------------------------------

TITLE: Transforming OpenAPI Models for Azure Services
DESCRIPTION: Filters and transforms OpenAPI definitions to keep only Azure OpenAI On Your Data models and related enhancements. Includes cleanup of error handling structures.

LANGUAGE: yaml
CODE:
directive:
  - from: swagger-document
    where: $["x-ms-paths"]
    transform: |
      return {};
  - from: swagger-document
    where: $
    transform: |
      const newDefs = {};
      const newPaths = {};
      const keep = {};
      const oydModelRegex = /^(OnYour|Azure|Pinecone|ContentFilter|Mongo|Elasticsearch).+$/;
      for (const key in $.definitions) {
        if (!(key in keep) && !key.match(oydModelRegex)) {
          continue
        }
        $lib.log(`Including ${key}`);
        newDefs[key] = $.definitions[key];
      }
      $.definitions = newDefs;
      $.paths = {};
      $.parameters = {};
      return $;
  - from: swagger-document
    debug: true
    where: $.definitions
    transform: |
      $["Azure.Core.Foundations.Error"]["x-ms-client-name"] = "Error";
      delete $["Azure.Core.Foundations.Error"].properties["innererror"];
      delete $["Azure.Core.Foundations.Error"].properties["details"];
      delete $["Azure.Core.Foundations.Error"].properties["target"];
      $["Azure.Core.Foundations.InnerError"]["x-ms-external"] = true;
      $["Azure.Core.Foundations.ErrorResponse"]["x-ms-external"] = true;
      return $;

----------------------------------------

TITLE: Creating Azure Springappdiscovery Client Factory in Go
DESCRIPTION: This code creates a client factory for Azure Springappdiscovery. It requires a subscription ID and credentials. The factory can be used to create various clients within the module.

LANGUAGE: go
CODE:
clientFactory, err := armspringappdiscovery.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Creating a Key using keyvault Module in Go
DESCRIPTION: This snippet demonstrates how to create a key in Azure Key Vault using the deprecated 'keyvault' module. It shows the process of setting up authentication, creating a client, and calling the CreateKey method.

LANGUAGE: go
CODE:
import (
	"context"
	"fmt"

	"github.com/Azure/azure-sdk-for-go/profiles/latest/keyvault/keyvault"
	kvauth "github.com/Azure/azure-sdk-for-go/services/keyvault/auth"
)

func main() {
    vaultURL := "https://<TODO: your vault name>.vault.azure.net"
    authorizer, err := kvauth.NewAuthorizerFromEnvironment()
	if err != nil {
		// TODO: handle error
	}

	basicClient := keyvault.New()
	basicClient.Authorizer = authorizer

	fmt.Println("\ncreating a key in keyvault:")
    keyParams := keyvault.KeyCreateParameters{
        Curve: &keyvault.P256,
        Kty:   &keyvault.EC,
    }
	newBundle, err := basicClient.CreateKey(context.TODO(), vaultURL, "<key name>", keyParams)
	if err != nil {
		// TODO: handle error
	}
	fmt.Println("added/updated: " + *newBundle.JSONWebKey.Kid)
}

----------------------------------------

TITLE: Creating Template Specs Client Factory
DESCRIPTION: Initializes a new client factory for Azure Template Specs with basic configuration

LANGUAGE: go
CODE:
clientFactory, err := armtemplatespecs.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Configuring AutoRest for Azure DataBox SDK Generation in Go
DESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure DataBox SDK for Go. It specifies Azure ARM mode, required API specifications, license header, module version, and API version tag.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/17aa6a1314de5aafef059d9aa2229901df506e75/specification/databox/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/17aa6a1314de5aafef059d9aa2229901df506e75/specification/databox/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 2.1.0
tag: package-2022-12

----------------------------------------

TITLE: Creating Azure Traffic Manager HeatMap Client in Go
DESCRIPTION: This snippet shows how to create a HeatMap client using the Azure Traffic Manager client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewHeatMapClient()

----------------------------------------

TITLE: Installing Azure Recovery Services Site Recovery Module in Go
DESCRIPTION: Command to install the Azure Recovery Services Site Recovery module using Go modules.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/recoveryservices/armrecoveryservicessiterecovery/v2

----------------------------------------

TITLE: Specifying TypeSpec Revision for Code Generation in YAML
DESCRIPTION: This YAML configuration specifies the repository, directory, and commit for generating the client code using TypeSpec.

LANGUAGE: yaml
CODE:
# ie: https://github.com/Azure/azure-rest-api-specs/tree/1e243e2b0d0d006599dcb64f82fd92aecc1247be/specification/cognitiveservices/OpenAI.Inference
directory: specification/cognitiveservices/OpenAI.Inference
commit: 1e243e2b0d0d006599dcb64f82fd92aecc1247be
repo: Azure/azure-rest-api-specs

----------------------------------------

TITLE: Configuring AutoRest YAML Settings for Azure PowerPlatform SDK Generation
DESCRIPTION: Defines AutoRest configuration parameters including Azure ARM mode, required API specifications, license header type, and module version for generating the PowerPlatform SDK.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/163e27c0ca7570bc39e00a46f255740d9b3ba3cb/specification/powerplatform/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/163e27c0ca7570bc39e00a46f255740d9b3ba3cb/specification/powerplatform/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 0.3.0

----------------------------------------

TITLE: Release History Entry in Markdown
DESCRIPTION: Changelog entry format showing version numbers, release dates, and categorized changes including features, breaking changes, bugs, and other modifications.

LANGUAGE: markdown
CODE:
# Release History

## 0.1.1 (Unreleased)

### Features Added

### Breaking Changes

### Bugs Fixed

### Other Changes

## 0.1.0 (2024-02-27)

### Features Added

- Initial preview for the Web PubSub Service

----------------------------------------

TITLE: Creating an Azure Test Base Email Events Client in Go
DESCRIPTION: This snippet shows how to create a specific client for Email Events using the previously created client factory. This client provides access to email event-related APIs in Azure Test Base.

LANGUAGE: go
CODE:
client := clientFactory.NewEmailEventsClient()

----------------------------------------

TITLE: Go New Function Declarations for NewRelic Observability
DESCRIPTION: New client initialization and operation functions added in version 1.2.0 for managing NewRelic monitoring resources and billing information.

LANGUAGE: go
CODE:
func NewBillingInfoClient(string, azcore.TokenCredential, *arm.ClientOptions) (*BillingInfoClient, error)
func NewConnectedPartnerResourcesClient(string, azcore.TokenCredential, *arm.ClientOptions) (*ConnectedPartnerResourcesClient, error)
func NewMonitoredSubscriptionsClient(string, azcore.TokenCredential, *arm.ClientOptions) (*MonitoredSubscriptionsClient, error)

----------------------------------------

TITLE: Creating Client Factory
DESCRIPTION: Instantiates a client factory for Azure Data Boundary services using subscription ID and credentials

LANGUAGE: go
CODE:
clientFactory, err := armdataboundaries.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Update Test Resources - Default Parameter Set
DESCRIPTION: PowerShell command syntax for updating test resources using service directory path. Allows specifying the service directory, base name, subscription ID and deletion time.

LANGUAGE: powershell
CODE:
Update-TestResources.ps1 [-ServiceDirectory] <String> [-BaseName <String>] [-SubscriptionId <String>]
 [-DeleteAfterHours <Int32>] [<CommonParameters>]

----------------------------------------

TITLE: Client Factory Creation
DESCRIPTION: Example of creating and using the new ClientFactory to instantiate service clients

LANGUAGE: go
CODE:
factory := armpostgresqlflexibleservers.NewClientFactory("subscriptionID", cred, nil)

flexClient := factory.NewFlexibleServerClient()
logClient := factory.NewLogFilesClient()

----------------------------------------

TITLE: Initializing Azure Credentials
DESCRIPTION: Creates default Azure credentials for authentication using the azidentity package.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Creating Azure Dynatrace Monitors Client in Go
DESCRIPTION: This code demonstrates how to create a specific client for Dynatrace monitors using the client factory. The NewMonitorsClient method returns a client object that can be used to perform operations related to Dynatrace monitors.

LANGUAGE: go
CODE:
client := clientFactory.NewMonitorsClient()

----------------------------------------

TITLE: Authenticating with Azure Using Default Credentials in Go
DESCRIPTION: Code snippet demonstrating how to create default Azure credentials for authentication. This is a common method to authenticate with Azure services.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Installing Azure Apicenter Module
DESCRIPTION: Command to install the Azure Apicenter module using Go modules package manager

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/apicenter/armapicenter

----------------------------------------

TITLE: Installing Azure Fluidrelay Go Module
DESCRIPTION: Command to install the Azure Fluidrelay module using Go modules package management system.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/fluidrelay/armfluidrelay

----------------------------------------

TITLE: Configuring Azure Client Options for Different Clouds in Go
DESCRIPTION: This snippet shows how to configure client options to connect to different Azure clouds, including sovereign clouds and Azure Stack.

LANGUAGE: Go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armappcomplianceautomation.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Initializing Neon Postgres Client Factory
DESCRIPTION: Creates a new client factory for Azure Neon Postgres with basic configuration.

LANGUAGE: go
CODE:
clientFactory, err := armneonpostgres.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Creating Agent Pools Client
DESCRIPTION: Creates a client instance for managing Agent Pools using the client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewAgentPoolsClient()

----------------------------------------

TITLE: Authenticating with Azure Data Catalog using Default Credentials in Go
DESCRIPTION: This code snippet demonstrates how to create default Azure credentials for authentication. It uses the azidentity module to provide various authentication methods.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Configuring Client Options for Different Clouds
DESCRIPTION: Sets up client options for connecting to different Azure clouds including sovereign clouds and Azure Stack.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armavs.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Importing the IscsiPathsClient in Go
DESCRIPTION: Example of importing and initializing the new IscsiPathsClient added in version 2.0.0-beta.1.

LANGUAGE: Go
CODE:
import "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/avs/armavs"

factory, err := armavs.NewClientFactory(subscriptionID, cred, nil)
if err != nil {
    // handle error
}

iscsiPathsClient := factory.NewIscsiPathsClient()

----------------------------------------

TITLE: Installing Azure Managed Application Module
DESCRIPTION: Command to install the Azure Managed Application module using Go modules package management system.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/solutions/armmanagedapplications/v2

----------------------------------------

TITLE: Installing Azure Monitor Go SDK
DESCRIPTION: Command to install the Azure Monitor module using Go modules package management

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/monitor/armmonitor

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK Go Generation
DESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure SDK for Go. It specifies the Azure ARM mode, required API specifications, license header, and module version for the Data Lake Analytics resource manager.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/datalake-analytics/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/datalake-analytics/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 0.8.0

----------------------------------------

TITLE: Preparing Release with PowerShell Script
DESCRIPTION: Command to run the PowerShell script that prepares a package for release. This script may update the version and/or CHANGELOG.md of the package.

LANGUAGE: powershell
CODE:
./eng/common/scripts/Prepare-Release.ps1

----------------------------------------

TITLE: Configuring Azure Recovery Services Backup Client for Sovereign Clouds in Go
DESCRIPTION: This snippet shows how to configure the client factory to connect to sovereign clouds or Azure Stack using ClientOptions.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armrecoveryservicesbackup.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Installing Azure Media Services Go Module
DESCRIPTION: Command to install the Azure Media Services module using Go modules package management

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/mediaservices/armmediaservices/v3

----------------------------------------

TITLE: Creating Azure VMware Client Factory
DESCRIPTION: Initializes a client factory for creating Azure VMware Solution service clients.

LANGUAGE: go
CODE:
clientFactory, err := armavs.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Creating Service Fabric Client Instance
DESCRIPTION: Creating a specific Service Fabric client instance from the client factory

LANGUAGE: go
CODE:
client := clientFactory.NewServicesClient()

----------------------------------------

TITLE: Installing Azure Orbital SDK Module
DESCRIPTION: Command to install the Azure Orbital module using Go modules package management system.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/orbital/armorbital/v2

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK Go Generation
DESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure SDK for Go. It specifies the Azure ARM mode, required API specifications, license header, module version, and API version tag for the Application Insights resource manager.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/8a0168458930c86636a76bcd7acfdc9c81291bfc/specification/applicationinsights/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/8a0168458930c86636a76bcd7acfdc9c81291bfc/specification/applicationinsights/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 2.0.0-beta.3
tag: package-2024-08-01

----------------------------------------

TITLE: Installing Azure NetApp Files Module in Go
DESCRIPTION: This command installs the Azure NetApp Files module using Go's package manager. It specifies the exact version to use.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/netapp/armnetapp/v7

----------------------------------------

TITLE: Configuring Client Factory with Custom Options
DESCRIPTION: Creates a client factory with custom options for connecting to different Azure clouds including sovereign clouds and Azure Stack.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armmigrationdiscoverysap.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Installing Azure Power BI Private Links Module in Go
DESCRIPTION: Command to install the Azure Power BI Private Links module using Go modules. This snippet demonstrates how to add the module to a Go project.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/powerbiprivatelinks/armpowerbiprivatelinks/v2

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK for Go Generation
DESCRIPTION: This YAML configuration sets up AutoRest for generating the Azure SDK for Go. It specifies the Azure ARM mode, required API specifications, license header, module version, and package tag for the API Center resource manager.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/d4205894880b989ede35d62d97c8e901ed14fb5a/specification/apicenter/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/d4205894880b989ede35d62d97c8e901ed14fb5a/specification/apicenter/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.0.0
tag: package-2024-03

----------------------------------------

TITLE: Creating Azure Scheduler Client Factory
DESCRIPTION: Initializes a new client factory for Azure Scheduler services using subscription ID and credentials.

LANGUAGE: go
CODE:
clientFactory, err := armscheduler.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Installing Azure Oracle Database SDK
DESCRIPTION: Command to install the Azure Oracle Database module using Go modules

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/oracledatabase/armoracledatabase

----------------------------------------

TITLE: Authentication Setup with Azure Credentials
DESCRIPTION: Initialize default Azure credentials for authentication with Azure AgriFood services.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Configuring Client Factory with Custom Options
DESCRIPTION: Creates a client factory with custom options for connecting to different Azure clouds

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armmanagementgroups.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Installing Azure Dedicated HSM Module in Go
DESCRIPTION: This command installs the Azure Dedicated HSM module using Go's package manager.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/hardwaresecuritymodules/armhardwaresecuritymodules/v2

----------------------------------------

TITLE: Installing Azure Blueprint Module with Go
DESCRIPTION: Command to install the Azure Blueprint module using Go's package manager.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/blueprint/armblueprint

----------------------------------------

TITLE: Release History Changelog Format in Markdown
DESCRIPTION: Structured changelog entries documenting version releases, features added, and migration information for the Azure SDK for Go armaddons package.

LANGUAGE: markdown
CODE:
# Release History

## 0.3.0 (2023-11-24)
### Features Added

- Support for test fakes and OpenTelemetry trace spans.


## 0.2.0 (2023-03-27)
### Features Added

- New struct `ClientFactory` which is a client factory used to create any client in this module


## 0.1.0 (2022-06-10)

The package of `github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/addons/armaddons` is using our [next generation design principles](https://azure.github.io/azure-sdk/general_introduction.html) since version 0.1.0, which contains breaking changes.

To migrate the existing applications to the latest version, please refer to [Migration Guide](https://aka.ms/azsdk/go/mgmt/migration).

To learn more, please refer to our documentation [Quick Start](https://aka.ms/azsdk/go/mgmt).

----------------------------------------

TITLE: Configuring Client Factory with Custom Options
DESCRIPTION: Setting up a client factory with custom options for connecting to different Azure clouds

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armservicefabric.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Installing Azure Recoveryservicesdatareplication Module for Go
DESCRIPTION: Uses go get command to install the Azure Recoveryservicesdatareplication module from the Azure SDK for Go.

LANGUAGE: Shell
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/recoveryservicesdatareplication/armrecoveryservicesdatareplication

----------------------------------------

TITLE: Base AutoRest Configuration for Azure Policy Module
DESCRIPTION: Main AutoRest configuration specifying Azure ARM settings, required API specs, module details and output settings for the Policy client module.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/53b1affe357b3bfbb53721d0a2002382a046d3b0/specification/resources/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/53b1affe357b3bfbb53721d0a2002382a046d3b0/specification/resources/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 0.1.0
module-name: profile/p20200901/resourcemanager/resources/armpolicy
module: github.com/Azure/azure-sdk-for-go/$(module-name)
output-folder: $(go-sdk-folder)/$(module-name)
tag: package-policy-2016-12

----------------------------------------

TITLE: Installing Azure RedHat Open Shift Module for Go
DESCRIPTION: Use the go get command to install the Azure RedHat Open Shift module from the Azure SDK for Go.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/redhatopenshift/armredhatopenshift

----------------------------------------

TITLE: Update Module References Directive
DESCRIPTION: AutoRest directive to update moduleName and moduleVersion references to use internal package constants in client files.

LANGUAGE: yaml
CODE:
directive:
  - from:
      - "*_client.go"
      - "client.go"
      - "client_factory.go"
    where: $
    transform: return $.replace(/moduleVersion/, "internal.ModuleVersion").replace(/moduleName\+"/, "internal.ModuleName+\"/armmonitor");

----------------------------------------

TITLE: Installing Azure Container Apps Module in Go
DESCRIPTION: This snippet demonstrates how to install the Azure Container Apps module using Go's package manager. It uses the 'go get' command to fetch and install the module from the specified GitHub repository.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/appcontainers/armappcontainers/v3

----------------------------------------

TITLE: Removing Module Constants Directive
DESCRIPTION: AutoRest directive to remove moduleName and moduleVersion constants from the constants.go file.

LANGUAGE: yaml
CODE:
directive:
  - from: constants.go
    where: $
    transform: return $.replace(/const \(\n\s+moduleName.+\n\s+moduleVersion.+\n\)\n/, "");

----------------------------------------

TITLE: Installing Azure App Platform Module with Go
DESCRIPTION: Command to install the Azure App Platform module using Go modules for dependency management.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/appplatform/armappplatform/v2

----------------------------------------

TITLE: Creating Azure Resource Connector Client Factory in Go
DESCRIPTION: Initializes a client factory for Azure Resource Connector, which can be used to create specific clients.

LANGUAGE: go
CODE:
clientFactory, err := armresourceconnector.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Creating Azure Blueprint Client Factory in Go
DESCRIPTION: Initializes a client factory for Azure Blueprint using the subscription ID and credentials.

LANGUAGE: go
CODE:
clientFactory, err := armblueprint.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Creating Azure Confluent Client Factory in Go
DESCRIPTION: Example of creating a client factory for Azure Confluent with default options.

LANGUAGE: go
CODE:
clientFactory, err := armconfluent.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Creating Azure Marketplace Client Factory in Go
DESCRIPTION: This code creates a client factory for Azure Marketplace. It requires a subscription ID and credentials. The factory can be used to create specific clients for different Marketplace operations.

LANGUAGE: go
CODE:
clientFactory, err := armmarketplace.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Creating Power BI Service Client
DESCRIPTION: Creates a specific Power BI service client using the client factory for API operations.

LANGUAGE: go
CODE:
client := clientFactory.NewAutoScaleVCoresClient()

----------------------------------------

TITLE: Creating Power BI Service Client
DESCRIPTION: Creates a specific Power BI service client using the client factory for API operations.

LANGUAGE: go
CODE:
client := clientFactory.NewAutoScaleVCoresClient()

----------------------------------------

TITLE: Creating Blockchain Client Factory
DESCRIPTION: Initializes a client factory for creating Azure Blockchain service clients with basic configuration.

LANGUAGE: go
CODE:
clientFactory, err := armblockchain.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Installing Azure Power BI Embedded SDK
DESCRIPTION: Command to install the Azure Power BI Embedded module using Go modules

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/powerbiembedded/armpowerbiembedded

----------------------------------------

TITLE: Creating Azure Graphservices Client Factory in Go
DESCRIPTION: Code to create a client factory for Azure Graphservices, which can be used to create specific clients.

LANGUAGE: go
CODE:
clientFactory, err := armgraphservices.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Installing Azure Pinecone Vectordb Module
DESCRIPTION: Command to install the Azure Pinecone Vectordb module using Go modules package manager.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/pineconevectordb/armpineconevectordb

----------------------------------------

TITLE: Creating Redis Enterprise Client Factory
DESCRIPTION: Initializes a client factory for creating Redis Enterprise service clients

LANGUAGE: go
CODE:
clientFactory, err := armredisenterprise.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK Go Generation
DESCRIPTION: This YAML configuration specifies settings for AutoRest to generate the Azure SDK for Go. It sets the Azure ARM flag, defines required specification files, sets the license header, and specifies the module version.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/527f6d35fb0d85c48210ca0f6f6f42814d63bd33/specification/networkfunction/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/527f6d35fb0d85c48210ca0f6f6f42814d63bd33/specification/networkfunction/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 2.2.0

----------------------------------------

TITLE: Creating Azure Support Client Factory
DESCRIPTION: Initializes a client factory for Azure Support services using subscription ID and credentials

LANGUAGE: go
CODE:
clientFactory, err := armsupport.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Configuring Azure Cloud Options
DESCRIPTION: Sets up client options for connecting to different Azure clouds, including sovereign clouds and Azure Stack.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armnginx.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Creating an Azure Automation Client Factory in Go
DESCRIPTION: This code creates a client factory for Azure Automation. It requires a subscription ID and a credential object. The factory can be used to create specific clients for various Automation operations.

LANGUAGE: go
CODE:
clientFactory, err := armautomation.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Creating Default Azure Credential in Go
DESCRIPTION: This snippet demonstrates how to create a default Azure credential using the azidentity package for authentication with Azure services.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Creating Default Azure Credential in Go
DESCRIPTION: This snippet demonstrates how to create a default Azure credential using the azidentity package for authentication with Azure services.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Creating Azure Front Door Client Factory
DESCRIPTION: Initializing the client factory for Azure Front Door with subscription ID and credentials.

LANGUAGE: go
CODE:
clientFactory, err := armfrontdoor.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Documenting Breaking Changes in Markdown for Azure SDK Go Qumulo Module v2.0.0
DESCRIPTION: Lists breaking changes in version 2.0.0, including type changes, enum removals, and field removals from various structs.

LANGUAGE: markdown
CODE:
### Breaking Changes

- Type of `FileSystemResourceProperties.StorageSKU` has been changed from `*StorageSKU` to `*string`
- `ProvisioningStateNotSpecified` from enum `ProvisioningState` has been removed
- Enum `StorageSKU` has been removed
- Field `InitialCapacity` of struct `FileSystemResourceProperties` has been removed
- Field `ClusterLoginURL`, `PrivateIPs` of struct `FileSystemResourceUpdateProperties` has been removed

----------------------------------------

TITLE: Creating an Azure Logic Apps Client Factory in Go
DESCRIPTION: This snippet demonstrates how to create a client factory for Azure Logic Apps. It requires a subscription ID and a credential object.

LANGUAGE: go
CODE:
clientFactory, err := armlogic.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Installing Azure Elastic Module with Go
DESCRIPTION: Command to install the Azure Elastic module using Go modules package management system.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/elastic/armelastic

----------------------------------------

TITLE: Creating Azure Advisor Client Factory in Go
DESCRIPTION: Initializes a client factory for Azure Advisor, which can be used to create specific clients.

LANGUAGE: go
CODE:
clientFactory, err := armadvisor.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Creating Azure Education Students Client in Go
DESCRIPTION: This snippet shows how to create a specific client (Students client) using the Azure Education client factory. This client provides access to student-related APIs.

LANGUAGE: go
CODE:
client := clientFactory.NewStudentsClient()

----------------------------------------

TITLE: Creating Client Factory for PaloAltoNetworks
DESCRIPTION: Example of initializing a client factory for accessing PaloAltoNetworks services.

LANGUAGE: go
CODE:
clientFactory, err := armpanngfw.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Listing AccessConnectors by Resource Group in Go
DESCRIPTION: Creates a new Pager for listing AccessConnectors within a specific resource group.

LANGUAGE: go
CODE:
*AccessConnectorsClient.NewListByResourceGroupPager(string, *AccessConnectorsClientListByResourceGroupOptions) *runtime.Pager[AccessConnectorsClientListByResourceGroupResponse]

----------------------------------------

TITLE: Creating Azure SAP HANA Client Factory in Go
DESCRIPTION: Demonstrates how to create a client factory for Azure SAP HANA. This factory is used to create specific clients for interacting with SAP HANA services on Azure.

LANGUAGE: go
CODE:
clientFactory, err := armhanaonazure.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Defining LedgerSKU Enum in Go
DESCRIPTION: Defines a new enum type LedgerSKU with values for Basic, Standard, and Unknown SKUs.

LANGUAGE: Go
CODE:
type LedgerSKU string

const (
    LedgerSKUBasic LedgerSKU = "Basic"
    LedgerSKUStandard LedgerSKU = "Standard"
    LedgerSKUUnknown LedgerSKU = "Unknown"
)

----------------------------------------

TITLE: Configuring Azure Deviceregistry Client for Different Clouds in Go
DESCRIPTION: This snippet shows how to configure the client factory for different Azure clouds or Azure Stack. It uses ClientOptions to set the endpoint for specific cloud environments.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armdeviceregistry.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Configuring AutoRest for Azure Confidential Ledger SDK Generation in YAML
DESCRIPTION: This YAML configuration sets up AutoRest to generate the Azure Confidential Ledger SDK for Go. It specifies Azure ARM mode, required API specifications, license header, module version, and the API version tag to use.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/c77bbf822be2deaac1b690270c6cd03a52df0e37/specification/confidentialledger/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/c77bbf822be2deaac1b690270c6cd03a52df0e37/specification/confidentialledger/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.3.0-beta.2
tag: package-preview-2023-06

----------------------------------------

TITLE: Configuring Azure Client Options for Different Clouds in Go
DESCRIPTION: This snippet shows how to configure client options to connect to different Azure clouds, such as Azure China. It uses the arm.ClientOptions struct to set the cloud option.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armappconfiguration.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Configuring AutoRest for Azure SDK Go Generation
DESCRIPTION: YAML configuration for AutoRest to generate Azure SDK for Go. It specifies Azure ARM settings, required API specifications from GitHub, license header, and module version.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/163e27c0ca7570bc39e00a46f255740d9b3ba3cb/specification/commerce/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/163e27c0ca7570bc39e00a46f255740d9b3ba3cb/specification/commerce/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 0.3.0

----------------------------------------

TITLE: Configuring Client Options for Different Clouds
DESCRIPTION: Sets up client options for connecting to different Azure clouds, including sovereign clouds and Azure Stack.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armfluidrelay.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Installing Azure Batch Go Module
DESCRIPTION: Command to install the Azure Batch module using Go modules package management

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/batch/armbatch/v3

----------------------------------------

TITLE: Configuring Azure Logic Apps Client for Different Clouds in Go
DESCRIPTION: This code shows how to configure the client factory to connect to different Azure clouds, such as Azure China. It uses ClientOptions to set the cloud endpoint.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armlogic.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: New Storage Type Enum Values
DESCRIPTION: New storage type enum values added in version 3.1.0-beta.1

LANGUAGE: go
CODE:
StorageTypeNfsAzureFile
StorageTypeSmb

----------------------------------------

TITLE: Configuring Client Options for Different Clouds
DESCRIPTION: Creates a client factory with custom options for connecting to different Azure clouds like Azure China.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armsecurityinsights.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Error Handling in Previous Version (services/**/mgmt/**)
DESCRIPTION: Example of error handling in the deprecated version of Azure SDK for Go.

LANGUAGE: go
CODE:
resp, err := resourceGroupsClient.CreateOrUpdate(context.TODO(), resourceGroupName, resourceGroupParameters)
if err != nil {
    log.Fatalf("Status code: %d", resp.Response().StatusCode)
}

----------------------------------------

TITLE: Configuring Azure Client Options for Different Clouds in Go
DESCRIPTION: This snippet shows how to configure client options for connecting to different Azure clouds, such as Azure China. It uses the arm.ClientOptions struct to set the cloud endpoint.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armmongocluster.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Creating Multiple Activation Keys Client for Azure Windows ESU in Go
DESCRIPTION: This code demonstrates how to create a specific client (MultipleActivationKeysClient) using the client factory for Azure Windows ESU.

LANGUAGE: go
CODE:
client := clientFactory.NewMultipleActivationKeysClient()

----------------------------------------

TITLE: Configuring Azure Client Options
DESCRIPTION: Sets up client options for connecting to different Azure clouds including sovereign clouds and Azure Stack.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armhealthbot.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Authenticating with Azure using Default Azure Credential in Go
DESCRIPTION: This snippet demonstrates how to create a default Azure credential for authentication with Azure services.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Configuring Client Options for Different Clouds
DESCRIPTION: Example showing how to configure client options for connecting to different Azure clouds including sovereign clouds.

LANGUAGE: go
CODE:
options := arm.ClientOptions {
    ClientOptions: azcore.ClientOptions {
        Cloud: cloud.AzureChina,
    },
}
clientFactory, err := armpanngfw.NewClientFactory(<subscription ID>, cred, &options)

----------------------------------------

TITLE: Authenticating with Azure Credentials
DESCRIPTION: Creates default Azure credentials for authentication with Azure Batch services

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Creating Azure StorSimple 1200 Series Client Factory in Go
DESCRIPTION: This code creates a client factory for Azure StorSimple 1200 Series operations. It requires a subscription ID and a credential object. The factory can be used to create specific clients for different operations.

LANGUAGE: Go
CODE:
clientFactory, err := armstorsimple1200series.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Authenticating with Azure Credentials
DESCRIPTION: Creates default Azure credentials for authentication using the azidentity package.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Authenticating with Azure using DefaultAzureCredential in Go
DESCRIPTION: This code snippet demonstrates how to create a default Azure credential for authentication. It uses the azidentity package to create a DefaultAzureCredential object.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Authenticating with Azure using Default Credential in Go
DESCRIPTION: Code snippet demonstrating how to create a default Azure credential for authentication. This credential can be used to authenticate requests to Azure services.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Authenticating with Azure using Default Credentials in Go
DESCRIPTION: This snippet demonstrates how to create a default Azure credential for authentication. It uses the azidentity module to provide various authentication methods.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Authentication Setup with Azure Identity
DESCRIPTION: Creates default Azure credentials for authentication with Azure services

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Creating Service Client for Azure Service Fabric Mesh in Go
DESCRIPTION: Code snippet demonstrating how to create a specific service client using the client factory for Azure Service Fabric Mesh.

LANGUAGE: Go
CODE:
client := clientFactory.NewServiceClient()

----------------------------------------

TITLE: Initializing Azure Credentials
DESCRIPTION: Creates default Azure credentials for authentication with Azure services using azidentity module

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Authenticating with Azure using DefaultAzureCredential in Go
DESCRIPTION: Creates a DefaultAzureCredential object for authenticating with Azure services.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Authenticating with Azure Credentials in Go
DESCRIPTION: Creates a default Azure credential object for authentication with Azure services using the azidentity package.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Installing Azure Service Fabric Go Module
DESCRIPTION: Command to install the Azure Service Fabric module using Go modules package management

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/servicefabric/armservicefabric

----------------------------------------

TITLE: Initializing Azure Credential in Go
DESCRIPTION: This code demonstrates how to create a default Azure credential for authentication.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Authenticating with Azure using Default Azure Credential in Go
DESCRIPTION: Create a default Azure credential for authentication with Azure services using the azidentity package.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Creating Azure Default Credential in Go
DESCRIPTION: This snippet shows how to create a default Azure credential using the azidentity package for authentication.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Creating PostgreSQL Administrator Client
DESCRIPTION: Creates a specific client instance for managing PostgreSQL administrators using the client factory.

LANGUAGE: go
CODE:
client := clientFactory.NewAdministratorsClient()

----------------------------------------

TITLE: Creating Azure Device Provisioning Service Client Factory in Go
DESCRIPTION: This snippet demonstrates how to create a client factory for Azure Device Provisioning Service, which can be used to create specific clients.

LANGUAGE: go
CODE:
clientFactory, err := armdeviceprovisioningservices.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Authenticating with Azure using Default Credentials in Go
DESCRIPTION: This snippet demonstrates how to create a default Azure credential for authentication. It uses the azidentity module to provide various authentication methods.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Creating Default Azure Credential in Go
DESCRIPTION: This snippet demonstrates how to create a default Azure credential for authentication using the azidentity package.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Configuring AutoRest Settings for Azure SDK Go Generation
DESCRIPTION: Defines the AutoRest configuration for generating Go SDK code from Azure REST API specifications. Specifies ARM mode, required API specs from GitHub, license header type, and module version 0.6.0.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/oep/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/oep/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 0.6.0

----------------------------------------

TITLE: Authenticating with Azure Using Default Credentials in Go
DESCRIPTION: This code demonstrates how to create default Azure credentials for authentication. It uses the azidentity module to provide various authentication methods.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Creating Azure Managed Application Client Factory
DESCRIPTION: Initializes a client factory for creating Azure Managed Application service clients with basic configuration.

LANGUAGE: go
CODE:
clientFactory, err := armmanagedapplications.NewClientFactory(<subscription ID>, cred, nil)

----------------------------------------

TITLE: Creating Azure Default Credential in Go
DESCRIPTION: This snippet demonstrates how to create a default Azure credential using the azidentity package. This credential is used for authenticating with Azure Backup services.

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Authenticating with Azure Credentials
DESCRIPTION: Creates default Azure credentials for authentication with Azure services using azidentity module

LANGUAGE: go
CODE:
cred, err := azidentity.NewDefaultAzureCredential(nil)

----------------------------------------

TITLE: Configuring AutoRest Settings for Azure Connected VMware SDK Generation
DESCRIPTION: YAML configuration that defines the parameters for AutoRest code generation. Specifies Azure ARM mode, required API specifications from GitHub, Microsoft MIT license header requirement, module version 1.1.1, and targets the package-2023-10 API version tag.

LANGUAGE: yaml
CODE:
azure-arm: true
require:
- https://github.com/Azure/azure-rest-api-specs/blob/3066a973f4baf2e2bf072a013b585a820bb10146/specification/connectedvmware/resource-manager/readme.md
- https://github.com/Azure/azure-rest-api-specs/blob/3066a973f4baf2e2bf072a013b585a820bb10146/specification/connectedvmware/resource-manager/readme.go.md
license-header: MICROSOFT_MIT_NO_VERSION
module-version: 1.1.1
tag: package-2023-10

----------------------------------------

TITLE: Verifying IMDS Availability on Azure VM using curl
DESCRIPTION: This command uses curl to verify the availability of the managed identity endpoint on an Azure Virtual Machine. It sends a request to the IMDS endpoint to obtain an access token for the Azure Resource Manager.

LANGUAGE: sh
CODE:
curl 'http://169.254.169.254/metadata/identity/oauth2/token?resource=https://management.core.windows.net&api-version=2018-02-01' -H "Metadata: true"

----------------------------------------

TITLE: Installing Azure Video Analyzer Module in Go
DESCRIPTION: This command installs the Azure Video Analyzer module using Go's package management system.

LANGUAGE: sh
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/videoanalyzer/armvideoanalyzer