TITLE: Configuring URL Patterns in Django
DESCRIPTION: This code snippet demonstrates how to set up URL patterns in Django, mapping URLs to specific view functions. It includes examples of capturing URL parameters and naming URL patterns.

LANGUAGE: python
CODE:
from django.urls import path

from . import views

urlpatterns = [
    # ex: /polls/
    path("", views.index, name="index"),
    # ex: /polls/5/
    path("<int:question_id>/", views.detail, name="detail"),
    # ex: /polls/5/results/
    path("<int:question_id>/results/", views.results, name="results"),
    # ex: /polls/5/vote/
    path("<int:question_id>/vote/", views.vote, name="vote"),
]

----------------------------------------

TITLE: Creating Django Poll Models
DESCRIPTION: Defines two models Question and Choice with their fields and relationships using Django's Model class. The Question model has text and date fields while Choice has text, votes and a foreign key to Question.

LANGUAGE: python
CODE:
from django.db import models

class Question(models.Model):
    question_text = models.CharField(max_length=200)
    pub_date = models.DateTimeField("date published")

class Choice(models.Model):
    question = models.ForeignKey(Question, on_delete=models.CASCADE)
    choice_text = models.CharField(max_length=200)
    votes = models.IntegerField(default=0)

----------------------------------------

TITLE: Defining a Basic Django Model
DESCRIPTION: Example of defining a simple Person model with first_name and last_name fields.

LANGUAGE: python
CODE:
from django.db import models


class Person(models.Model):
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=30)

----------------------------------------

TITLE: Creating Basic Django View
DESCRIPTION: Implementation of a simple Django view function that returns an HTTP response.

LANGUAGE: python
CODE:
from django.http import HttpResponse


def index(request):
    return HttpResponse("Hello, world. You're at the polls index.")

----------------------------------------

TITLE: Subclassing Forms in Django
DESCRIPTION: Shows how to create subclasses of forms to inherit and extend fields from parent forms.

LANGUAGE: pycon
CODE:
>>> class ContactFormWithPriority(ContactForm):
...     priority = forms.CharField()
...
>>> f = ContactFormWithPriority(auto_id=False)
>>> print(f)
<div>Subject:<input type="text" name="subject" maxlength="100" required></div>
<div>Message:<textarea name="message" cols="40" rows="10" required></textarea></div>
<div>Sender:<input type="email" name="sender" required></div>
<div>Cc myself:<input type="checkbox" name="cc_myself"></div>
<div>Priority:<input type="text" name="priority" required></div>

----------------------------------------

TITLE: Defining Django Models in Python
DESCRIPTION: Demonstrates how to create database models using Django's ORM. It defines Reporter and Article models with various field types and relationships.

LANGUAGE: python
CODE:
from django.db import models


class Reporter(models.Model):
    full_name = models.CharField(max_length=70)

    def __str__(self):
        return self.full_name


class Article(models.Model):
    pub_date = models.DateField()
    headline = models.CharField(max_length=200)
    content = models.TextField()
    reporter = models.ForeignKey(Reporter, on_delete=models.CASCADE)

    def __str__(self):
        return self.headline

----------------------------------------

TITLE: Secure Email Sending with Form Validation in Django
DESCRIPTION: This code snippet shows the correct approach to sending an email in Django, using a form to validate and sanitize user input before use.

LANGUAGE: python
CODE:
from django import forms
from django.core.mail import send_mail
from django.http import JsonResponse


class EmailForm(forms.Form):
    email = forms.EmailField()


def my_proof_of_concept(request):
    form = EmailForm(request.GET)
    if form.is_valid():
        send_mail(
            "Email subject",
            "Email body",
            form.cleaned_data["email"],
            ["admin@example.com"],
        )
        return JsonResponse(status=200)
    return JsonResponse(form.errors, status=400)

----------------------------------------

TITLE: Writing a Django View Function
DESCRIPTION: Demonstrates how to write a view function in Django, which retrieves data from the database and renders it using a template.

LANGUAGE: python
CODE:
from django.shortcuts import render

from .models import Article


def year_archive(request, year):
    a_list = Article.objects.filter(pub_date__year=year)
    context = {"year": year, "article_list": a_list}
    return render(request, "news/year_archive.html", context)

----------------------------------------

TITLE: Applying CSRF Protection to a Django View Function
DESCRIPTION: Shows how to use the csrf_protect decorator to add CSRF protection to a specific view function. This ensures CSRF validation even if the middleware is not active.

LANGUAGE: python
CODE:
from django.shortcuts import render
from django.views.decorators.csrf import csrf_protect


@csrf_protect
def my_view(request):
    c = {}
    # ...
    return render(request, "a_template.html", c)

----------------------------------------

TITLE: Loading Django Secret Key from File
DESCRIPTION: Shows how to load Django's SECRET_KEY from a separate file for improved security.

LANGUAGE: python
CODE:
with open("/etc/secret_key.txt") as f:
    SECRET_KEY = f.read().strip()

----------------------------------------

TITLE: Defining Basic Django Views in Python
DESCRIPTION: This snippet shows how to create simple view functions in Django that return HTTP responses. It includes views for displaying question details, results, and handling votes.

LANGUAGE: python
CODE:
def detail(request, question_id):
    return HttpResponse("You're looking at question %s." % question_id)


def results(request, question_id):
    response = "You're looking at the results of question %s."
    return HttpResponse(response % question_id)


def vote(request, question_id):
    return HttpResponse("You're voting on question %s." % question_id)

----------------------------------------

TITLE: Django Password Reset Form Implementation
DESCRIPTION: Reference to PasswordResetForm class that previously exposed user email enumeration vulnerability through unhandled email sending failures.

LANGUAGE: python
CODE:
django.contrib.auth.forms.PasswordResetForm

----------------------------------------

TITLE: Overriding the save() Method
DESCRIPTION: Example of overriding the save() method in a model to add custom behavior.

LANGUAGE: python
CODE:
from django.db import models


class Blog(models.Model):
    name = models.CharField(max_length=100)
    tagline = models.TextField()

    def save(self, **kwargs):
        do_something()
        super().save(**kwargs)  # Call the "real" save() method.
        do_something_else()

----------------------------------------

TITLE: Defining a Simple Django Form Class
DESCRIPTION: Creates a basic Django Form class with a single CharField for capturing a user's name.

LANGUAGE: python
CODE:
from django import forms

class NameForm(forms.Form):
    your_name = forms.CharField(label="Your name", max_length=100)

----------------------------------------

TITLE: Processing a Form in a Django View
DESCRIPTION: Demonstrates how to handle form submission, validation, and processing in a Django view function.

LANGUAGE: python
CODE:
from django.http import HttpResponseRedirect
from django.shortcuts import render
from .forms import NameForm

def get_name(request):
    if request.method == "POST":
        form = NameForm(request.POST)
        if form.is_valid():
            # Process the data
            return HttpResponseRedirect("/thanks/")
    else:
        form = NameForm()
    return render(request, "name.html", {"form": form})

----------------------------------------

TITLE: Creating Django User Object
DESCRIPTION: Example showing how to create a new Django user programmatically using the create_user helper function.

LANGUAGE: python
CODE:
from django.contrib.auth.models import User
user = User.objects.create_user("john", "lennon@thebeatles.com", "johnpassword")

# At this point, user is a User object that has already been saved
# to the database. You can continue to change its attributes
# if you want to change other fields.
user.last_name = "Lennon"
user.save()

----------------------------------------

TITLE: Defining a Model with Enumeration Choices
DESCRIPTION: Example of defining a Runner model with a medal field using enumeration choices.

LANGUAGE: python
CODE:
from django.db import models


class Runner(models.Model):
    MedalType = models.TextChoices("MedalType", "GOLD SILVER BRONZE")
    name = models.CharField(max_length=60)
    medal = models.CharField(blank=True, choices=MedalType, max_length=10)

----------------------------------------

TITLE: Bulk Create for Custom ManyToMany Relationships in Django
DESCRIPTION: Demonstrates using bulk_create() to efficiently insert multiple relationships for a custom ManyToMany through model.

LANGUAGE: python
CODE:
PizzaToppingRelationship = Pizza.toppings.through
PizzaToppingRelationship.objects.bulk_create([
    PizzaToppingRelationship(pizza=my_pizza, topping=pepperoni),
    PizzaToppingRelationship(pizza=your_pizza, topping=pepperoni),
    PizzaToppingRelationship(pizza=your_pizza, topping=mushroom),
], ignore_conflicts=True)

----------------------------------------

TITLE: Implementing a Custom Authentication Backend in Django
DESCRIPTION: This code snippet demonstrates how to create a custom authentication backend that authenticates against settings-defined credentials and creates a superuser on first login.

LANGUAGE: Python
CODE:
from django.conf import settings
from django.contrib.auth.backends import BaseBackend
from django.contrib.auth.hashers import check_password
from django.contrib.auth.models import User

class SettingsBackend(BaseBackend):
    def authenticate(self, request, username=None, password=None):
        login_valid = settings.ADMIN_LOGIN == username
        pwd_valid = check_password(password, settings.ADMIN_PASSWORD)
        if login_valid and pwd_valid:
            try:
                user = User.objects.get(username=username)
            except User.DoesNotExist:
                user = User(username=username)
                user.is_staff = True
                user.is_superuser = True
                user.save()
            return user
        return None

    def get_user(self, user_id):
        try:
            return User.objects.get(pk=user_id)
        except User.DoesNotExist:
            return None

----------------------------------------

TITLE: Creating a Custom User Model in Django
DESCRIPTION: This code snippet shows how to create a custom User model that uses an email address as the username and includes a required date of birth field.

LANGUAGE: Python
CODE:
from django.db import models
from django.contrib.auth.models import BaseUserManager, AbstractBaseUser

class MyUserManager(BaseUserManager):
    def create_user(self, email, date_of_birth, password=None):
        if not email:
            raise ValueError("Users must have an email address")
        user = self.model(
            email=self.normalize_email(email),
            date_of_birth=date_of_birth,
        )
        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_superuser(self, email, date_of_birth, password=None):
        user = self.create_user(
            email,
            password=password,
            date_of_birth=date_of_birth,
        )
        user.is_admin = True
        user.save(using=self._db)
        return user

class MyUser(AbstractBaseUser):
    email = models.EmailField(
        verbose_name="email address",
        max_length=255,
        unique=True,
    )
    date_of_birth = models.DateField()
    is_active = models.BooleanField(default=True)
    is_admin = models.BooleanField(default=False)

    objects = MyUserManager()

    USERNAME_FIELD = "email"
    REQUIRED_FIELDS = ["date_of_birth"]

    def __str__(self):
        return self.email

    def has_perm(self, perm, obj=None):
        return True

    def has_module_perms(self, app_label):
        return True

    @property
    def is_staff(self):
        return self.is_admin

----------------------------------------

TITLE: Demonstrating XSS Vulnerability in Django Templates
DESCRIPTION: Shows how unsanitized template variables can lead to XSS vulnerabilities when used in style tags without proper quoting. The example demonstrates a case where the template system's automatic escaping may not provide complete protection.

LANGUAGE: text
CODE:
<style class={{ var }}>...</style>

----------------------------------------

TITLE: Retrieving Objects with Django QuerySets
DESCRIPTION: Shows various ways to retrieve objects from the database using QuerySets, including filtering and chaining filters.

LANGUAGE: python
CODE:
>>> Entry.objects.all()
>>> Entry.objects.filter(pub_date__year=2006)
>>> Entry.objects.filter(headline__startswith="What").exclude(
...     pub_date__gte=datetime.date.today()
... ).filter(pub_date__gte=datetime.date(2005, 1, 30))

----------------------------------------

TITLE: Security Fix for ModelBackend.authenticate()
DESCRIPTION: Addresses CVE-2024-39329 involving timing attack vulnerability in authentication that could allow username enumeration for users with unusable passwords.



----------------------------------------

TITLE: Defining a Basic Contact Form in Django
DESCRIPTION: This snippet shows how to create a simple contact form using Django's forms module. It defines a ContactForm class with name and message fields, and includes a method for sending emails.

LANGUAGE: python
CODE:
from django import forms


class ContactForm(forms.Form):
    name = forms.CharField()
    message = forms.CharField(widget=forms.Textarea)

    def send_email(self):
        # send email using the self.cleaned_data dictionary
        pass

----------------------------------------

TITLE: Bulk Creation of Entries in Django
DESCRIPTION: Shows how to use bulk_create() method to efficiently create multiple Entry objects with a single database query.

LANGUAGE: python
CODE:
Entry.objects.bulk_create([
    Entry(headline="This is a test"),
    Entry(headline="This is only a test"),
])

----------------------------------------

TITLE: Defining Django Model Classes for a Blog Application
DESCRIPTION: Example model definitions for Blog, Author, and Entry classes, demonstrating relationships and field types.

LANGUAGE: python
CODE:
from datetime import date

from django.db import models


class Blog(models.Model):
    name = models.CharField(max_length=100)
    tagline = models.TextField()

    def __str__(self):
        return self.name


class Author(models.Model):
    name = models.CharField(max_length=200)
    email = models.EmailField()

    def __str__(self):
        return self.name


class Entry(models.Model):
    blog = models.ForeignKey(Blog, on_delete=models.CASCADE)
    headline = models.CharField(max_length=255)
    body_text = models.TextField()
    pub_date = models.DateField()
    mod_date = models.DateField(default=date.today)
    authors = models.ManyToManyField(Author)
    number_of_comments = models.IntegerField(default=0)
    number_of_pingbacks = models.IntegerField(default=0)
    rating = models.IntegerField(default=5)

    def __str__(self):
        return self.headline

----------------------------------------

TITLE: Creating Tests for QuestionIndexView in Django
DESCRIPTION: This code snippet defines a test class for the QuestionIndexView. It includes tests for various scenarios such as no questions, past questions, future questions, and multiple questions.

LANGUAGE: Python
CODE:
def create_question(question_text, days):
    """
    Create a question with the given `question_text` and published the
    given number of `days` offset to now (negative for questions published
    in the past, positive for questions that have yet to be published).
    """
    time = timezone.now() + datetime.timedelta(days=days)
    return Question.objects.create(question_text=question_text, pub_date=time)


class QuestionIndexViewTests(TestCase):
    def test_no_questions(self):
        """
        If no questions exist, an appropriate message is displayed.
        """
        response = self.client.get(reverse("polls:index"))
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, "No polls are available.")
        self.assertQuerySetEqual(response.context["latest_question_list"], [])

    def test_past_question(self):
        """
        Questions with a pub_date in the past are displayed on the
        index page.
        """
        question = create_question(question_text="Past question.", days=-30)
        response = self.client.get(reverse("polls:index"))
        self.assertQuerySetEqual(
            response.context["latest_question_list"],
            [question],
        )

    def test_future_question(self):
        """
        Questions with a pub_date in the future aren't displayed on
        the index page.
        """
        create_question(question_text="Future question.", days=30)
        response = self.client.get(reverse("polls:index"))
        self.assertContains(response, "No polls are available.")
        self.assertQuerySetEqual(response.context["latest_question_list"], [])

    def test_future_question_and_past_question(self):
        """
        Even if both past and future questions exist, only past questions
        are displayed.
        """
        question = create_question(question_text="Past question.", days=-30)
        create_question(question_text="Future question.", days=30)
        response = self.client.get(reverse("polls:index"))
        self.assertQuerySetEqual(
            response.context["latest_question_list"],
            [question],
        )

    def test_two_past_questions(self):
        """
        The questions index page may display multiple questions.
        """
        question1 = create_question(question_text="Past question 1.", days=-30)
        question2 = create_question(question_text="Past question 2.", days=-5)
        response = self.client.get(reverse("polls:index"))
        self.assertQuerySetEqual(
            response.context["latest_question_list"],
            [question2, question1],
        )

----------------------------------------

TITLE: Including CSRF Token in HTML Form (Django Template)
DESCRIPTION: Demonstrates how to include the CSRF token in a POST form for internal URLs using Django's template tag.

LANGUAGE: html
CODE:
<form method="post">{% csrf_token %}

----------------------------------------

TITLE: Creating a Django View with Database Query
DESCRIPTION: This snippet shows how to create a Django view that queries the database and returns the results. It retrieves the latest 5 questions and renders them in a template.

LANGUAGE: python
CODE:
from django.shortcuts import render

from .models import Question


def index(request):
    latest_question_list = Question.objects.order_by("-pub_date")[:5]
    context = {"latest_question_list": latest_question_list}
    return render(request, "polls/index.html", context)

----------------------------------------

TITLE: Fixing Regular Expression DoS in Django's Truncator.words() Method
DESCRIPTION: A security fix addressing CVE-2024-27351, which resolves a potential regular expression denial-of-service vulnerability in django.utils.text.Truncator.words() method and the truncatewords_html template filter when used with html=True.

LANGUAGE: python
CODE:
django.utils.text.Truncator.words()

----------------------------------------

TITLE: Implementing Asynchronous Class-Based View in Django
DESCRIPTION: Demonstrates how to create an asynchronous class-based view using async def. This example shows an AsyncView that waits for 1 second before returning a response.

LANGUAGE: python
CODE:
import asyncio
from django.http import HttpResponse
from django.views import View


class AsyncView(View):
    async def get(self, request, *args, **kwargs):
        # Perform io-blocking view logic using await, sleep for example.
        await asyncio.sleep(1)
        return HttpResponse("Hello async world!")

----------------------------------------

TITLE: Defining Models with Relationships
DESCRIPTION: Example of defining Musician and Album models with a foreign key relationship.

LANGUAGE: python
CODE:
from django.db import models


class Musician(models.Model):
    first_name = models.CharField(max_length=50)
    last_name = models.CharField(max_length=50)
    instrument = models.CharField(max_length=100)


class Album(models.Model):
    artist = models.ForeignKey(Musician, on_delete=models.CASCADE)
    name = models.CharField(max_length=100)
    release_date = models.DateField()
    num_stars = models.IntegerField()

----------------------------------------

TITLE: Transaction Error Handling in Django
DESCRIPTION: Shows proper error handling pattern with nested atomic blocks for database integrity errors.

LANGUAGE: Python
CODE:
from django.db import IntegrityError, transaction

@transaction.atomic
def viewfunc(request):
    create_parent()

    try:
        with transaction.atomic():
            generate_relationships()
    except IntegrityError:
        handle_exception()

    add_children()

----------------------------------------

TITLE: Defining Multiple Databases in Django Settings
DESCRIPTION: Example of configuring multiple databases in Django's settings.py file, including a default PostgreSQL database and a MySQL database.

LANGUAGE: python
CODE:
DATABASES = {
    "default": {
        "NAME": "app_data",
        "ENGINE": "django.db.backends.postgresql",
        "USER": "postgres_user",
        "PASSWORD": "s3krit",
    },
    "users": {
        "NAME": "user_data",
        "ENGINE": "django.db.backends.mysql",
        "USER": "mysql_user",
        "PASSWORD": "priv4te",
    },
}

----------------------------------------

TITLE: Implementing Generic Views in Django
DESCRIPTION: Implementation of generic ListView and DetailView classes for polls application, including custom template names and context object handling.

LANGUAGE: python
CODE:
from django.views import generic

class IndexView(generic.ListView):
    template_name = "polls/index.html"
    context_object_name = "latest_question_list"

    def get_queryset(self):
        """Return the last five published questions."""
        return Question.objects.order_by("-pub_date")[:5]


class DetailView(generic.DetailView):
    model = Question
    template_name = "polls/detail.html"


class ResultsView(generic.DetailView):
    model = Question
    template_name = "polls/results.html"

----------------------------------------

TITLE: Defining ExclusionConstraint with Expressions in Django
DESCRIPTION: Example of creating an ExclusionConstraint with expressions using RangeOperators. This constraint is typically used to prevent overlapping ranges or values in a database.

LANGUAGE: python
CODE:
expressions = [
    ("timespan", RangeOperators.ADJACENT_TO),
    (F("room"), RangeOperators.EQUAL),
]

----------------------------------------

TITLE: Using sensitive_variables Decorator in Django Views
DESCRIPTION: Demonstration of using the sensitive_variables decorator to prevent sensitive local variables from being included in error reports. This example hides user, password, and credit card information.

LANGUAGE: python
CODE:
from django.views.decorators.debug import sensitive_variables

@sensitive_variables("user", "pw", "cc")
def process_info(user):
    pw = user.pass_word
    cc = user.credit_card_number
    name = user.name
    ...

----------------------------------------

TITLE: Permission Check Example
DESCRIPTION: Example showing how to check user permissions

LANGUAGE: python
CODE:
if user.has_perm('app_label.permission_codename'):
    # User has permission
    pass

if user.has_module_perms('app_label'):
    # User has permission to access app module
    pass

----------------------------------------

TITLE: Creating a ForeignKey with Cross-Application Reference in Django
DESCRIPTION: Shows how to create a ForeignKey relationship that references a model in a different application using the app_label.ModelName syntax.

LANGUAGE: python
CODE:
class Car(models.Model):
    manufacturer = models.ForeignKey(
        "thirdpartyapp.Manufacturer",
        on_delete=models.CASCADE,
    )

----------------------------------------

TITLE: Security Fix - UserAttributeSimilarityValidator DoS Mitigation
DESCRIPTION: Security update addressing CVE-2021-45115 where UserAttributeSimilarityValidator had potential DoS vulnerability with artificially large password inputs. The fix implements length restrictions for comparison values.

LANGUAGE: python
CODE:
UserAttributeSimilarityValidator

----------------------------------------

TITLE: Advanced Querying and Filtering in Django ORM
DESCRIPTION: This snippet demonstrates advanced querying techniques using the Django ORM, including filtering across relationships and using complex lookups.

LANGUAGE: pycon
CODE:
>>> r.article_set.filter(headline__startswith="This")
<QuerySet [<Article: This is a test>]>

>>> Article.objects.filter(reporter__first_name="John")
<QuerySet [<Article: John's second story>, <Article: This is a test>]>

>>> Article.objects.filter(reporter__first_name="John", reporter__last_name="Smith")
<QuerySet [<Article: John's second story>, <Article: This is a test>]>

>>> Article.objects.filter(reporter__in=[1, 2]).distinct()
<QuerySet [<Article: John's second story>, <Article: Paul's story>, <Article: This is a test>]>

>>> Reporter.objects.filter(article__headline__startswith="This").distinct()
<QuerySet [<Reporter: John Smith>]>

----------------------------------------

TITLE: User Model Example
DESCRIPTION: Example showing User model basic attributes and usage

LANGUAGE: python
CODE:
from django.contrib.auth.models import User

user = User.objects.create_user(
    username='john',
    email='john@example.com',
    password='secret'
)

user.first_name = 'John'
user.last_name = 'Doe'
user.save()

----------------------------------------

TITLE: Creating a More Complex Django Form
DESCRIPTION: Defines a more comprehensive Django Form class with multiple field types for a contact form.

LANGUAGE: python
CODE:
from django import forms

class ContactForm(forms.Form):
    subject = forms.CharField(max_length=100)
    message = forms.CharField(widget=forms.Textarea)
    sender = forms.EmailField()
    cc_myself = forms.BooleanField(required=False)

----------------------------------------

TITLE: Installing Django with pip in Python
DESCRIPTION: This command installs the latest version of Django using pip, the Python package installer. It should be run in an activated virtual environment for best practices.

LANGUAGE: bash
CODE:
$ python -m pip install Django

----------------------------------------

TITLE: Custom Password Length Validator
DESCRIPTION: Example implementation of a custom password validator that checks for minimum password length.

LANGUAGE: python
CODE:
from django.core.exceptions import ValidationError
from django.utils.translation import gettext as _

class MinimumLengthValidator:
    def __init__(self, min_length=8):
        self.min_length = min_length

    def validate(self, password, user=None):
        if len(password) < self.min_length:
            raise ValidationError(
                _("This password must contain at least %(min_length)d characters."),
                code="password_too_short",
                params={"min_length": self.min_length},
            )

    def get_help_text(self):
        return _(
            "Your password must contain at least %(min_length)d characters."
            % {"min_length": self.min_length}
        )

----------------------------------------

TITLE: Atomic Transaction Decorator in Django
DESCRIPTION: Shows how to use the atomic decorator to ensure database operations are executed within a transaction context.

LANGUAGE: Python
CODE:
from django.db import transaction

@transaction.atomic
def viewfunc(request):
    # This code executes inside a transaction.
    do_stuff()

----------------------------------------

TITLE: Using Q Objects for Complex Lookups in Django
DESCRIPTION: Demonstrates how to use Q objects to create complex database queries with OR statements and nested conditions.

LANGUAGE: python
CODE:
from django.db.models import Q

Poll.objects.get(
    Q(question__startswith="Who"),
    Q(pub_date=date(2005, 5, 2)) | Q(pub_date=date(2005, 5, 6)),
)

----------------------------------------

TITLE: HTTP Method Checking in Django View
DESCRIPTION: Example showing how to check the HTTP method of a request in a Django view and handle GET/POST methods differently.

LANGUAGE: python
CODE:
if request.method == "GET":
    do_something()
elif request.method == "POST":
    do_something_else()

----------------------------------------

TITLE: Function-based Django Middleware Implementation
DESCRIPTION: Example of implementing a simple middleware as a function that processes requests and responses. The middleware accepts a get_response callable and returns a middleware function that can modify the request before and after view execution.

LANGUAGE: python
CODE:
def simple_middleware(get_response):
    # One-time configuration and initialization.

    def middleware(request):
        # Code to be executed for each request before
        # the view (and later middleware) are called.

        response = get_response(request)

        # Code to be executed for each request/response after
        # the view is called.

        return response

    return middleware

----------------------------------------

TITLE: Basic Session Usage in Django Views
DESCRIPTION: Examples showing how to set and check session variables in Django views, including a simple comment tracking system and login implementation.

LANGUAGE: python
CODE:
def post_comment(request, new_comment):
    if request.session.get("has_commented", False):
        return HttpResponse("You've already commented.")
    c = comments.Comment(comment=new_comment)
    c.save()
    request.session["has_commented"] = True
    return HttpResponse("Thanks for your comment!")

----------------------------------------

TITLE: Django Login Template Example
DESCRIPTION: Sample HTML template for user login form including error handling and redirect logic.

LANGUAGE: html
CODE:
{% extends "base.html" %}

{% block content %}

{% if form.errors %}
<p>Your username and password didn't match. Please try again.</p>
{% endif %}

{% if next %}
    {% if user.is_authenticated %}
    <p>Your account doesn't have access to this page. To proceed,
    please login with an account that has access.</p>
    {% else %}
    <p>Please login to see this page.</p>
    {% endif %}
{% endif %}

<form method="post" action="{% url 'login' %}">
{% csrf_token %}
<table>
<tr>
    <td>{{ form.username.label_tag }}</td>
    <td>{{ form.username }}</td>
</tr>
<tr>
    <td>{{ form.password.label_tag }}</td>
    <td>{{ form.password }}</td>
</tr>
</table>

<input type="submit" value="login">
<input type="hidden" name="next" value="{{ next }}">
</form>

{# Assumes you set up the password_reset view in your URLconf #}
<p><a href="{% url 'password_reset' %}">Lost password?</a></p>

{% endblock %}

----------------------------------------

TITLE: Defining a ManyToManyField with Self-Reference in Django
DESCRIPTION: Example of creating a ManyToManyField that references the same model, useful for representing relationships like suppliers within a Manufacturer model.

LANGUAGE: python
CODE:
from django.db import models

class Manufacturer(models.Model):
    name = models.TextField()
    suppliers = models.ManyToManyField("self", symmetrical=False)

----------------------------------------

TITLE: Creating a UniqueConstraint in Django
DESCRIPTION: Shows how to create a unique constraint on multiple fields to ensure each room can only be booked once for each date. The constraint is added to the model's Meta.constraints option.

LANGUAGE: python
CODE:
UniqueConstraint(fields=['room', 'date'], name='unique_booking')

----------------------------------------

TITLE: Using SearchVectorField for Efficient Full Text Search in Django
DESCRIPTION: Demonstrates how to use a SearchVectorField for improved performance in full text search queries.

LANGUAGE: pycon
CODE:
>>> Entry.objects.update(search_vector=SearchVector("body_text"))
>>> Entry.objects.filter(search_vector="cheese")
[<Entry: Cheese on Toast recipes>, <Entry: Pizza recipes>]

----------------------------------------

TITLE: Setting CSRF Token on AJAX Request (JavaScript)
DESCRIPTION: Example of setting the CSRF token as a header on an AJAX request using the fetch API.

LANGUAGE: javascript
CODE:
const request = new Request(
    /* URL */,
    {
        method: 'POST',
        headers: {'X-CSRFToken': csrftoken},
        mode: 'same-origin' // Do not send CSRF token to another domain.
    }
);
fetch(request).then(function(response) {
    // ...
});

----------------------------------------

TITLE: Fixing XSS Vulnerability in Django Debug Template Tag
DESCRIPTION: The {% debug %} template tag is modified to prevent XSS attacks. It now only outputs information when DEBUG is True and ensures proper escaping of context variables.

LANGUAGE: Django Template
CODE:
{% debug %}

----------------------------------------

TITLE: Defining Many-to-Many Models in Django
DESCRIPTION: Example showing how to define two Django models (Publication and Article) with a many-to-many relationship using ManyToManyField.

LANGUAGE: python
CODE:
from django.db import models


class Publication(models.Model):
    title = models.CharField(max_length=30)

    class Meta:
        ordering = ["title"]

    def __str__(self):
        return self.title


class Article(models.Model):
    headline = models.CharField(max_length=100)
    publications = models.ManyToManyField(Publication)

    class Meta:
        ordering = ["headline"]

    def __str__(self):
        return self.headline

----------------------------------------

TITLE: Loading Django Secret Key from Environment Variable
DESCRIPTION: Demonstrates how to securely load Django's SECRET_KEY from an environment variable instead of hardcoding it in settings.

LANGUAGE: python
CODE:
import os

SECRET_KEY = os.environ["SECRET_KEY"]

----------------------------------------

TITLE: Trigram Similarity Search in PostgreSQL
DESCRIPTION: Demonstrates using PostgreSQL's trigram similarity matching for fuzzy text searching through Django's ORM interface.

LANGUAGE: python
CODE:
>>> Author.objects.filter(name__unaccent__lower__trigram_similar="Hélène")
[<Author: Helen Mirren>, <Author: Hélène Joy>]

----------------------------------------

TITLE: Sync to Async Database Query Example
DESCRIPTION: Example showing how to call a synchronous Django function asynchronously using sync_to_async adapter.

LANGUAGE: python
CODE:
from asgiref.sync import sync_to_async

results = await sync_to_async(sync_function, thread_sensitive=True)(pk=123)

----------------------------------------

TITLE: Implementing Basic GET Request Handler - Function vs Class View Comparison
DESCRIPTION: Demonstrates the difference between handling GET requests using function-based views versus class-based views in Django. Shows basic view implementation patterns.

LANGUAGE: python
CODE:
def my_view(request):
    if request.method == "GET":
        # <view logic>
        return HttpResponse("result")

LANGUAGE: python
CODE:
from django.http import HttpResponse
from django.views import View

class MyView(View):
    def get(self, request):
        # <view logic>
        return HttpResponse("result")

----------------------------------------

TITLE: Configuring Message Storage in Django Settings
DESCRIPTION: Example of configuring a custom message storage backend in Django settings

LANGUAGE: python
CODE:
MESSAGE_STORAGE = "django.contrib.messages.storage.cookie.CookieStorage"

----------------------------------------

TITLE: Configuring Memcached Cache Backend in Django
DESCRIPTION: Example configuration for using Memcached as the cache backend in Django, including setting the backend, location, and various options.

LANGUAGE: Python
CODE:
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.memcached.PyMemcacheCache",
        "LOCATION": "127.0.0.1:11211",
        "OPTIONS": {
            "no_delay": True,
            "ignore_exc": True,
            "max_pool_size": 4,
            "use_pooling": True,
        },
    }
}

----------------------------------------

TITLE: Initializing and Using Django Test Client
DESCRIPTION: Demonstrates how to instantiate the Django test client and make HTTP requests to test views.

LANGUAGE: python
CODE:
>>> from django.test import Client
>>> c = Client()
>>> response = c.post("/login/", {"username": "john", "password": "smith"})
>>> response.status_code
200
>>> response = c.get("/customer/details/")
>>> response.content
b'<!DOCTYPE html...'

----------------------------------------

TITLE: Checking Form Bound Status in Django
DESCRIPTION: Demonstrates how to check if a form instance is bound or unbound using the is_bound attribute.

LANGUAGE: pycon
CODE:
>>> f = ContactForm()
>>> f.is_bound
False
>>> f = ContactForm({"subject": "hello"})
>>> f.is_bound
True

----------------------------------------

TITLE: Defining Default Django Logging Configuration in Python
DESCRIPTION: This snippet shows the default logging configuration for Django applications. It defines filters, formatters, handlers, and loggers for various Django components.

LANGUAGE: python
CODE:
{
    "version": 1,
    "disable_existing_loggers": False,
    "filters": {
        "require_debug_false": {
            "()": "django.utils.log.RequireDebugFalse",
        },
        "require_debug_true": {
            "()": "django.utils.log.RequireDebugTrue",
        },
    },
    "formatters": {
        "django.server": {
            "()": "django.utils.log.ServerFormatter",
            "format": "[{server_time}] {message}",
            "style": "{",
        }
    },
    "handlers": {
        "console": {
            "level": "INFO",
            "filters": ["require_debug_true"],
            "class": "logging.StreamHandler",
        },
        "django.server": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "django.server",
        },
        "mail_admins": {
            "level": "ERROR",
            "filters": ["require_debug_false"],
            "class": "django.utils.log.AdminEmailHandler",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["console", "mail_admins"],
            "level": "INFO",
        },
        "django.server": {
            "handlers": ["django.server"],
            "level": "INFO",
            "propagate": False,
        },
    },
}

----------------------------------------

TITLE: Creating a Conditional UniqueConstraint in Django
DESCRIPTION: Shows how to create a unique constraint with a condition, ensuring each user only has one draft. The constraint uses a Q object to specify the condition.

LANGUAGE: python
CODE:
UniqueConstraint(fields=["user"], condition=Q(status="DRAFT"), name="unique_draft_user")

----------------------------------------

TITLE: Defining ForeignKey Relationship in Django Models
DESCRIPTION: This snippet demonstrates how to create a one-to-many relationship between Blog and Entry models using Django's ForeignKey.

LANGUAGE: python
CODE:
from django.db import models


class Blog(models.Model):
    # ...
    pass


class Entry(models.Model):
    blog = models.ForeignKey(Blog, on_delete=models.CASCADE, null=True)

----------------------------------------

TITLE: Handling File Uploads in Django Forms
DESCRIPTION: Demonstrates how to handle file uploads in Django forms using FileField and ImageField.

LANGUAGE: pycon
CODE:
>>> from django.core.files.uploadedfile import SimpleUploadedFile
>>> data = {
...     "subject": "hello",
...     "message": "Hi there",
...     "sender": "foo@example.com",
...     "cc_myself": True,
... }
>>> file_data = {"mugshot": SimpleUploadedFile("face.jpg", b"file data")}
>>> f = ContactFormWithMugshot(data, file_data)

----------------------------------------

TITLE: Security Fix Documentation - Memcached Key Validation
DESCRIPTION: Details the CVE-2020-13254 security vulnerability regarding potential data leakage through malformed memcached keys. The fix implements key validation in memcached cache backends.

LANGUAGE: markdown
CODE:
CVE-2020-13254: Potential data leakage via malformed memcached keys
===================================================================

In cases where a memcached backend does not perform key validation, passing
malformed cache keys could result in a key collision, and potential data
leakage. In order to avoid this vulnerability, key validation is added to the
memcached cache backends.

----------------------------------------

TITLE: Creating ModelForm Class with modelform_factory
DESCRIPTION: Function that generates a ModelForm class for a given model with configurable fields, widgets, labels and other form attributes. Requires explicit field selection via fields or exclude parameters.

LANGUAGE: python
CODE:
modelform_factory(model, form=ModelForm, fields=None, exclude=None, formfield_callback=None, widgets=None, localized_fields=None, labels=None, help_texts=None, error_messages=None, field_classes=None)

----------------------------------------

TITLE: Creating a Basic Formset in Django
DESCRIPTION: Demonstrates how to create a basic formset using the formset_factory function.

LANGUAGE: python
CODE:
from django import forms
from django.forms import formset_factory

class ArticleForm(forms.Form):
    title = forms.CharField()
    pub_date = forms.DateField()

ArticleFormSet = formset_factory(ArticleForm)

----------------------------------------

TITLE: Creating a Basic ModelForm in Django
DESCRIPTION: Demonstrates how to create a simple ModelForm subclass for the Article model, specifying which fields to include.

LANGUAGE: python
CODE:
from django.forms import ModelForm
from myapp.models import Article

class ArticleForm(ModelForm):
    class Meta:
        model = Article
        fields = ["pub_date", "headline", "content", "reporter"]

----------------------------------------

TITLE: Async-Capable Django Middleware Implementation
DESCRIPTION: Example of implementing middleware that supports both synchronous and asynchronous requests using the sync_and_async_middleware decorator.

LANGUAGE: python
CODE:
from asgiref.sync import iscoroutinefunction
from django.utils.decorators import sync_and_async_middleware

@sync_and_async_middleware
def simple_middleware(get_response):
    # One-time configuration and initialization goes here.
    if iscoroutinefunction(get_response):

        async def middleware(request):
            # Do something here!
            response = await get_response(request)
            return response

    else:

        def middleware(request):
            # Do something here!
            response = get_response(request)
            return response

    return middleware

----------------------------------------

TITLE: Creating Basic DateTime View in Django
DESCRIPTION: Demonstrates a simple Django view that returns the current date and time as an HTML response. Uses HttpResponse and datetime library to generate dynamic content.

LANGUAGE: python
CODE:
from django.http import HttpResponse
import datetime


def current_datetime(request):
    now = datetime.datetime.now()
    html = '<html lang="en"><body>It is now %s.</body></html>' % now
    return HttpResponse(html)

----------------------------------------

TITLE: Email Header Injection Protection Example
DESCRIPTION: Example view demonstrating safe email sending with header injection protection

LANGUAGE: python
CODE:
from django.core.mail import BadHeaderError, send_mail
from django.http import HttpResponse, HttpResponseRedirect

def send_email(request):
    subject = request.POST.get("subject", "")
    message = request.POST.get("message", "")
    from_email = request.POST.get("from_email", "")
    if subject and message and from_email:
        try:
            send_mail(subject, message, from_email, ["admin@example.com"])
        except BadHeaderError:
            return HttpResponse("Invalid header found.")
        return HttpResponseRedirect("/contact/thanks/")
    else:
        return HttpResponse("Make sure all fields are entered and valid.")

----------------------------------------

TITLE: Comparing QuerySet, Python, and Template Counting in Django
DESCRIPTION: Demonstrates the performance differences between counting items using a QuerySet operation, Python len() function, and Django template filter. Generally, lower-level operations (database queries) are faster than higher-level abstractions.

LANGUAGE: python
CODE:
# QuerySet operation on the database
# fast, because that's what databases are good at
my_bicycles.count()

# counting Python objects
# slower, because it requires a database query anyway, and processing
# of the Python objects
len(my_bicycles)

LANGUAGE: html
CODE:
<!--
Django template filter
slower still, because it will have to count them in Python anyway,
and because of template language overheads
-->
{{ my_bicycles|length }}

----------------------------------------

TITLE: Rendering Variables in Django Templates
DESCRIPTION: Demonstrates how to output variables in a Django template using the {{ }} syntax. Variables can be simple values or use dot notation for dictionary, attribute, or list-index lookups.

LANGUAGE: html
CODE:
My first name is {{ first_name }}. My last name is {{ last_name }}.

{{ my_dict.key }}
{{ my_object.attribute }}
{{ my_list.0 }}

----------------------------------------

TITLE: Registering Custom Lookups in Django
DESCRIPTION: Example showing how to register custom lookups on Django model fields using the register_lookup method. The code demonstrates registration on both field class and field instance levels.

LANGUAGE: python
CODE:
DateField.register_lookup(YearExact)
User._meta.get_field("date_joined").register_lookup(MonthExact)

----------------------------------------

TITLE: Sending Basic Email with send_mail() in Django
DESCRIPTION: Example of sending a simple plain text email using Django's send_mail() function with basic parameters.

LANGUAGE: python
CODE:
from django.core.mail import send_mail

send_mail(
    "Subject here",
    "Here is the message.",
    "from@example.com",
    ["to@example.com"],
    fail_silently=False,
)

----------------------------------------

TITLE: Efficient Group Membership Check in Django
DESCRIPTION: Demonstrates an optimal way to check group membership and display information, minimizing database queries by reusing the QuerySet cache.

LANGUAGE: python
CODE:
members = group.members.all()

if display_group_members:
    if members:
        if current_user in members:
            print("You and", len(members) - 1, "other users are members of this group.")
        else:
            print("There are", len(members), "members in this group.")

        for member in members:
            print(member.username)
    else:
        print("There are no members in this group.")

----------------------------------------

TITLE: Displaying Messages in Django Template
DESCRIPTION: Template code for displaying message notifications with proper CSS classes and conditional formatting

LANGUAGE: html
CODE:
{% if messages %}
<ul class="messages">
    {% for message in messages %}
    <li{% if message.tags %} class="{{ message.tags }}"{% endif %}>{{ message }}</li>
    {% endfor %}
</ul>
{% endif %}

----------------------------------------

TITLE: Implementing Basic Custom Storage Class in Django
DESCRIPTION: Basic implementation of a custom storage class by subclassing django.core.files.storage.Storage. Shows the minimal required class structure.

LANGUAGE: python
CODE:
from django.core.files.storage import Storage


class MyStorage(Storage): ...

----------------------------------------

TITLE: Using Collate Function in Django ORM
DESCRIPTION: Examples of using the Collate function for case-insensitive filtering and ordering

LANGUAGE: python
CODE:
>>> Author.objects.filter(name=Collate(Value("john"), "nocase"))
<QuerySet [<Author: John>, <Author: john>]>

>>> Author.objects.order_by(Collate("name", "et-x-icu"))
<QuerySet [<Author: Ursula>, <Author: Veronika>, <Author: Ülle>]>

----------------------------------------

TITLE: Customizing Form Field Rendering in Django
DESCRIPTION: Shows how to customize the rendering of individual form fields by modifying their attributes.

LANGUAGE: pycon
CODE:
>>> f = ContactForm(auto_id=False)
>>> f["subject"].label = "Topic"
>>> print(f["subject"])
<input type="text" name="subject" maxlength="100" required>

----------------------------------------

TITLE: Custom PBKDF2 Password Hasher Implementation
DESCRIPTION: Example of creating a custom password hasher by subclassing PBKDF2PasswordHasher to increase iterations for stronger hashing.

LANGUAGE: python
CODE:
from django.contrib.auth.hashers import PBKDF2PasswordHasher

class MyPBKDF2PasswordHasher(PBKDF2PasswordHasher):
    """
    A subclass of PBKDF2PasswordHasher that uses 100 times more iterations.
    """
    iterations = PBKDF2PasswordHasher.iterations * 100

----------------------------------------

TITLE: Creating Inline FormSet with inlineformset_factory
DESCRIPTION: Generates an InlineFormSet for handling related model forms, typically for parent-child model relationships. Provides default configuration for inline forms with deletion capability and quantity settings.

LANGUAGE: python
CODE:
inlineformset_factory(parent_model, model, form=ModelForm, formset=BaseInlineFormSet, fk_name=None, fields=None, exclude=None, extra=3, can_order=False, can_delete=True, max_num=None, formfield_callback=None, widgets=None, validate_max=False, localized_fields=None, labels=None, help_texts=None, error_messages=None, min_num=None, validate_min=False, field_classes=None, absolute_max=None, can_delete_extra=True, renderer=None, edit_only=False)

----------------------------------------

TITLE: Demonstrating CharField Validation in Django Forms
DESCRIPTION: Shows how to create and use a CharField in Django forms, including validation for required fields and empty values.

LANGUAGE: pycon
CODE:
>>> from django import forms
>>> f = forms.CharField()
>>> f.clean("foo")
'foo'
>>> f.clean("")
Traceback (most recent call last):
...
ValidationError: ['This field is required.']
>>> f.clean(None)
Traceback (most recent call last):
...
ValidationError: ['This field is required.']
>>> f.clean(0)
'0'
>>> f.clean(True)
'True'
>>> f.clean(False)
'False'

----------------------------------------

TITLE: Restricting HTTP Methods with require_http_methods Decorator in Python
DESCRIPTION: This snippet demonstrates the usage of the require_http_methods decorator to restrict a view to only accept GET and POST requests. It ensures that only specified HTTP methods are allowed for the decorated view.

LANGUAGE: python
CODE:
from django.views.decorators.http import require_http_methods

@require_http_methods(["GET", "POST"])
def my_view(request):
    # I can assume now that only GET or POST requests make it this far
    # ...
    pass

----------------------------------------

TITLE: Using from_queryset() to Combine Custom Manager and QuerySet
DESCRIPTION: This snippet shows how to use the from_queryset() method to create a manager that combines methods from both a custom Manager and a custom QuerySet. This allows for advanced usage scenarios with both custom Manager and QuerySet functionality.

LANGUAGE: python
CODE:
class CustomManager(models.Manager):
    def manager_only_method(self):
        return


class CustomQuerySet(models.QuerySet):
    def manager_and_queryset_method(self):
        return


class MyModel(models.Model):
    objects = CustomManager.from_queryset(CustomQuerySet)()

----------------------------------------

TITLE: Basic Paginator Usage in Python
DESCRIPTION: Demonstrates basic usage of Django's Paginator class with a simple list of items. Shows core functionality including page counting, page range, and page navigation methods.

LANGUAGE: python
CODE:
>>> from django.core.paginator import Paginator
>>> objects = ["john", "paul", "george", "ringo"]
>>> p = Paginator(objects, 2)

>>> p.count
4
>>> p.num_pages
2
>>> type(p.page_range)
<class 'range_iterator'>
>>> p.page_range
range(1, 3)

----------------------------------------

TITLE: Bulk Insert into ManyToMany Relationship in Django
DESCRIPTION: Shows how to efficiently add multiple objects to a ManyToMany relationship using the add() method with multiple arguments.

LANGUAGE: python
CODE:
my_band.members.add(me, my_friend)

----------------------------------------

TITLE: Creating Migrations with makemigrations
DESCRIPTION: Demonstrates how to create new migrations using the makemigrations command.

LANGUAGE: shell
CODE:
$ python manage.py makemigrations
Migrations for 'books':
  books/migrations/0003_auto.py:
    ~ Alter field author on book

----------------------------------------

TITLE: Defining Basic Django Settings in Python
DESCRIPTION: Example of setting basic Django configuration variables in a Python settings file. Demonstrates setting allowed hosts, debug mode, and default email address.

LANGUAGE: python
CODE:
ALLOWED_HOSTS = ["www.example.com"]
DEBUG = False
DEFAULT_FROM_EMAIL = "webmaster@example.com"

----------------------------------------

TITLE: Implementing Django ListView with Pagination
DESCRIPTION: Example of implementing a ListView subclass for displaying a paginated list of articles with additional context data.

LANGUAGE: python
CODE:
from django.utils import timezone
from django.views.generic.list import ListView

from articles.models import Article


class ArticleListView(ListView):
    model = Article
    paginate_by = 100  # if pagination is desired

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["now"] = timezone.now()
        return context

----------------------------------------

TITLE: Executing Parameterized Raw SQL Query in Django
DESCRIPTION: Demonstrates how to perform a parameterized raw SQL query using Django's raw() method with the params argument for SQL injection protection.

LANGUAGE: python
CODE:
>>> lname = "Doe"
>>> Person.objects.raw("SELECT * FROM myapp_person WHERE last_name = %s", [lname])

----------------------------------------

TITLE: Configuring URL Patterns with path() in Django
DESCRIPTION: Demonstrates how to use the path() function to define URL patterns in Django. It shows various examples of URL configurations, including capturing URL parameters and including other URL configurations.

LANGUAGE: python
CODE:
from django.urls import include, path

urlpatterns = [
    path("index/", views.index, name="main-view"),
    path("bio/<username>/", views.bio, name="bio"),
    path("articles/<slug:title>/", views.article, name="article-detail"),
    path("articles/<slug:title>/<int:section>/", views.section, name="article-section"),
    path("blog/", include("blog.urls")),
    ...,
]

----------------------------------------

TITLE: Handling Forms in Django Views - Function vs Class Comparison
DESCRIPTION: Compares form handling implementation between function-based and class-based views, showing how to process GET/POST requests and handle form validation.

LANGUAGE: python
CODE:
from django.http import HttpResponseRedirect
from django.shortcuts import render

from .forms import MyForm


def myview(request):
    if request.method == "POST":
        form = MyForm(request.POST)
        if form.is_valid():
            # <process form cleaned data>
            return HttpResponseRedirect("/success/")
    else:
        form = MyForm(initial={"key": "value"})

    return render(request, "form_template.html", {"form": form})

LANGUAGE: python
CODE:
from django.http import HttpResponseRedirect
from django.shortcuts import render
from django.views import View

from .forms import MyForm


class MyFormView(View):
    form_class = MyForm
    initial = {"key": "value"}
    template_name = "form_template.html"

    def get(self, request, *args, **kwargs):
        form = self.form_class(initial=self.initial)
        return render(request, self.template_name, {"form": form})

    def post(self, request, *args, **kwargs):
        form = self.form_class(request.POST)
        if form.is_valid():
            # <process form cleaned data>
            return HttpResponseRedirect("/success/")

        return render(request, self.template_name, {"form": form})

----------------------------------------

TITLE: Extended Django Management Command with Optional Arguments
DESCRIPTION: Enhanced version of the closepoll command that includes optional arguments for deleting polls instead of closing them

LANGUAGE: python
CODE:
class Command(BaseCommand):
    def add_arguments(self, parser):
        # Positional arguments
        parser.add_argument("poll_ids", nargs="+", type=int)

        # Named (optional) arguments
        parser.add_argument(
            "--delete",
            action="store_true",
            help="Delete poll instead of closing it",
        )

----------------------------------------

TITLE: Implementing Asynchronous Handling in Class-Based Views in Django
DESCRIPTION: Demonstrates how to define asynchronous HTTP method handlers in Django class-based views. This allows performing asynchronous operations within view logic.

LANGUAGE: Python
CODE:
import asyncio
from django.http import HttpResponse
from django.views import View


class AsyncView(View):
    async def get(self, request, *args, **kwargs):
        # Perform view logic using await.
        await asyncio.sleep(1)
        return HttpResponse("Hello async world!")

----------------------------------------

TITLE: Creating a GIN Index in Django for PostgreSQL
DESCRIPTION: Demonstrates creating a GIN (Generalized Inverted Index) using the GinIndex class. Allows disabling fast update technique and tuning the maximum size of the GIN pending list.

LANGUAGE: python
CODE:
GinIndex(*expressions, fastupdate=None, gin_pending_list_limit=None, **options)

----------------------------------------

TITLE: Protecting Specific Paths in a View (Python)
DESCRIPTION: Shows how to apply CSRF protection to only a specific path within a view function using csrf_exempt and csrf_protect decorators.

LANGUAGE: python
CODE:
from django.views.decorators.csrf import csrf_exempt, csrf_protect


@csrf_exempt
def my_view(request):
    @csrf_protect
    def protected_path(request):
        do_something()

    if some_condition():
        return protected_path(request)
    else:
        do_something_else()

----------------------------------------

TITLE: Raising ValidationError in Django Forms
DESCRIPTION: Example showing best practices for raising ValidationError with code and params for translation support.

LANGUAGE: python
CODE:
raise ValidationError(
    _("Invalid value: %(value)s"),
    code="invalid",
    params={"value": "42"},
)

----------------------------------------

TITLE: Registering a Custom User Model with Django Admin
DESCRIPTION: This code snippet demonstrates how to register a custom User model with Django's admin interface, including custom forms for user creation and modification.

LANGUAGE: Python
CODE:
from django import forms
from django.contrib import admin
from django.contrib.auth.models import Group
from django.contrib.auth.admin import UserAdmin as BaseUserAdmin
from django.contrib.auth.forms import ReadOnlyPasswordHashField
from django.core.exceptions import ValidationError

from customauth.models import MyUser

class UserCreationForm(forms.ModelForm):
    password1 = forms.CharField(label="Password", widget=forms.PasswordInput)
    password2 = forms.CharField(label="Password confirmation", widget=forms.PasswordInput)

    class Meta:
        model = MyUser
        fields = ["email", "date_of_birth"]

    def clean_password2(self):
        password1 = self.cleaned_data.get("password1")
        password2 = self.cleaned_data.get("password2")
        if password1 and password2 and password1 != password2:
            raise ValidationError("Passwords don't match")
        return password2

    def save(self, commit=True):
        user = super().save(commit=False)
        user.set_password(self.cleaned_data["password1"])
        if commit:
            user.save()
        return user

class UserChangeForm(forms.ModelForm):
    password = ReadOnlyPasswordHashField()

    class Meta:
        model = MyUser
        fields = ["email", "password", "date_of_birth", "is_active", "is_admin"]

class UserAdmin(BaseUserAdmin):
    form = UserChangeForm
    add_form = UserCreationForm

    list_display = ["email", "date_of_birth", "is_admin"]
    list_filter = ["is_admin"]
    fieldsets = [
        (None, {"fields": ["email", "password"]}),
        ("Personal info", {"fields": ["date_of_birth"]}),
        ("Permissions", {"fields": ["is_admin"]}),
    ]
    add_fieldsets = [
        (
            None,
            {
                "classes": ["wide"],
                "fields": ["email", "date_of_birth", "password1", "password2"],
            },
        ),
    ]
    search_fields = ["email"]
    ordering = ["email"]
    filter_horizontal = []

admin.site.register(MyUser, UserAdmin)
admin.site.unregister(Group)

----------------------------------------

TITLE: Basic Django Template Example
DESCRIPTION: Demonstrates basic Django template syntax including template inheritance, variable interpolation, loops and filters.

LANGUAGE: html+django
CODE:
{% extends "base_generic.html" %}

{% block title %}{{ section.title }}{% endblock %}

{% block content %}
<h1>{{ section.title }}</h1>

{% for story in story_list %}
<h2>
  <a href="{{ story.get_absolute_url }}">
    {{ story.headline|upper }}
  </a>
</h2>
<p>{{ story.tease|truncatewords:"100" }}</p>
{% endfor %}
{% endblock %}

----------------------------------------

TITLE: Using ModelForm in Django Views
DESCRIPTION: Shows how to use a ModelForm in a view to create or update model instances.

LANGUAGE: python
CODE:
form = ArticleForm()

# Creating a form to change an existing article.
article = Article.objects.get(pk=1)
form = ArticleForm(instance=article)

----------------------------------------

TITLE: Handling Multiple File Uploads in Django FormView
DESCRIPTION: Demonstrates how to handle multiple file uploads using a custom FormView. It overrides the form_valid method to process each uploaded file.

LANGUAGE: python
CODE:
from django.views.generic.edit import FormView
from .forms import FileFieldForm


class FileFieldFormView(FormView):
    form_class = FileFieldForm
    template_name = "upload.html"  # Replace with your template.
    success_url = "..."  # Replace with your URL or reverse().

    def form_valid(self, form):
        files = form.cleaned_data["file_field"]
        for f in files:
            ...  # Do something with each file.
        return super().form_valid(form)

----------------------------------------

TITLE: Handling File Upload in a Django View
DESCRIPTION: Demonstrates how to handle a file upload in a Django view. It processes the form, validates it, and calls a function to handle the uploaded file.

LANGUAGE: python
CODE:
from django.http import HttpResponseRedirect
from django.shortcuts import render
from .forms import UploadFileForm

# Imaginary function to handle an uploaded file.
from somewhere import handle_uploaded_file


def upload_file(request):
    if request.method == "POST":
        form = UploadFileForm(request.POST, request.FILES)
        if form.is_valid():
            handle_uploaded_file(request.FILES["file"])
            return HttpResponseRedirect("/success/url/")
    else:
        form = UploadFileForm()
    return render(request, "upload.html", {"form": form})

----------------------------------------

TITLE: Creating and Saving Django Model Objects
DESCRIPTION: Demonstrates how to create a new object instance and save it to the database using the save() method.

LANGUAGE: python
CODE:
>>> from blog.models import Blog
>>> b = Blog(name="Beatles Blog", tagline="All the latest Beatles news.")
>>> b.save()

----------------------------------------

TITLE: Implementing CreateView, UpdateView, and DeleteView for Author Model
DESCRIPTION: This code demonstrates how to use Django's generic class-based views (CreateView, UpdateView, DeleteView) to handle CRUD operations for the Author model. It specifies the model and fields to be used in the forms.

LANGUAGE: python
CODE:
from django.urls import reverse_lazy
from django.views.generic.edit import CreateView, DeleteView, UpdateView
from myapp.models import Author


class AuthorCreateView(CreateView):
    model = Author
    fields = ["name"]


class AuthorUpdateView(UpdateView):
    model = Author
    fields = ["name"]


class AuthorDeleteView(DeleteView):
    model = Author
    success_url = reverse_lazy("author-list")

----------------------------------------

TITLE: URL Namespace Definition in Django
DESCRIPTION: Shows how to define URL namespaces for application and instance-specific URL patterns.

LANGUAGE: Python
CODE:
from django.urls import include, path

urlpatterns = [
    path("author-polls/", include("polls.urls", namespace="author-polls")),
    path("publisher-polls/", include("polls.urls", namespace="publisher-polls")),
]

----------------------------------------

TITLE: Implementing Error Handling Views in Django
DESCRIPTION: Shows how to handle HTTP error responses using Django's HttpResponse subclasses. Demonstrates both conditional error responses and direct status code returns.

LANGUAGE: python
CODE:
from django.http import HttpResponse, HttpResponseNotFound


def my_view(request):
    # ...
    if foo:
        return HttpResponseNotFound("<h1>Page not found</h1>")
    else:
        return HttpResponse("<h1>Page was found</h1>")

----------------------------------------

TITLE: Creating and Saving Django Model Objects
DESCRIPTION: Demonstrates how to create a new object instance and save it to the database using the save() method.

LANGUAGE: python
CODE:
>>> from blog.models import Blog
>>> b = Blog(name="Beatles Blog", tagline="All the latest Beatles news.")
>>> b.save()

----------------------------------------

TITLE: Creating JSON Response
DESCRIPTION: Example showing how to create a JSON response using Django's JsonResponse class.

LANGUAGE: python
CODE:
>>> from django.http import JsonResponse
>>> response = JsonResponse({"foo": "bar"})
>>> response.content
b'{"foo": "bar"}'

----------------------------------------

TITLE: Basic URL Pattern Definition in Django
DESCRIPTION: Demonstrates how to define basic URL patterns in a Django URLconf using the path() function.

LANGUAGE: Python
CODE:
from django.urls import path

from . import views

urlpatterns = [
    path("articles/2003/", views.special_case_2003),
    path("articles/<int:year>/", views.year_archive),
    path("articles/<int:year>/<int:month>/", views.month_archive),
    path("articles/<int:year>/<int:month>/<slug:slug>/", views.article_detail),
]

----------------------------------------

TITLE: Working with Related Objects in Django
DESCRIPTION: Demonstrates how to access and manipulate related objects through foreign key, one-to-one, and many-to-many relationships.

LANGUAGE: python
CODE:
>>> e = Entry.objects.get(id=2)
>>> e.blog  # Returns the related Blog object.

>>> b = Blog.objects.get(id=1)
>>> b.entry_set.all()  # Returns all Entry objects related to Blog.

>>> e.authors.all()  # Returns all Author objects for this Entry.
>>> a = Author.objects.get(id=5)
>>> a.entry_set.all()  # Returns all Entry objects for this Author.

----------------------------------------

TITLE: Running Django Application with Gunicorn
DESCRIPTION: Command to start a Django application using Gunicorn WSGI server. This starts a single process with one thread that listens on 127.0.0.1:8000. The command should be run from the same directory as manage.py to ensure proper Python path resolution.

LANGUAGE: shell
CODE:
gunicorn myproject.wsgi

----------------------------------------

TITLE: Creating a BRIN Index in Django for PostgreSQL
DESCRIPTION: Shows how to create a BRIN (Block Range Index) using the BrinIndex class. Allows enabling automatic summarization and specifying the number of pages per range.

LANGUAGE: python
CODE:
BrinIndex(*expressions, autosummarize=None, pages_per_range=None, **options)

----------------------------------------

TITLE: Static File Serving Configuration
DESCRIPTION: Apache configuration for serving static files, including robots.txt, favicon.ico, and media files alongside Django application.

LANGUAGE: apache
CODE:
Alias /robots.txt /path/to/mysite.com/static/robots.txt
Alias /favicon.ico /path/to/mysite.com/static/favicon.ico

Alias /media/ /path/to/mysite.com/media/
Alias /static/ /path/to/mysite.com/static/

<Directory /path/to/mysite.com/static>
Require all granted
</Directory>

<Directory /path/to/mysite.com/media>
Require all granted
</Directory>

WSGIScriptAlias / /path/to/mysite.com/mysite/wsgi.py

<Directory /path/to/mysite.com/mysite>
<Files wsgi.py>
Require all granted
</Files>
</Directory>

----------------------------------------

TITLE: Applying sensitive_post_parameters Decorator to Django Views
DESCRIPTION: Example of using the sensitive_post_parameters decorator to hide sensitive POST parameters in error reports. This snippet demonstrates hiding password and credit card number from request data.

LANGUAGE: python
CODE:
from django.views.decorators.debug import sensitive_post_parameters

@sensitive_post_parameters("pass_word", "credit_card_number")
def record_user_profile(request):
    UserProfile.create(
        user=request.user,
        password=request.POST["pass_word"],
        credit_card=request.POST["credit_card_number"],
        name=request.POST["name"],
    )
    ...

----------------------------------------

TITLE: Using JSONField with All Database Backends
DESCRIPTION: Demonstrates how to use the new database-agnostic JSONField for storing and querying JSON data.

LANGUAGE: python
CODE:
from django.db import models

class ContactInfo(models.Model):
    data = models.JSONField()

ContactInfo.objects.create(
    data={
        "name": "John",
        "cities": ["London", "Cambridge"],
        "pets": {"dogs": ["Rufus", "Meg"]},
    }
)
ContactInfo.objects.filter(
    data__name="John",
    data__pets__has_key="dogs",
    data__cities__contains="London",
).delete()

----------------------------------------

TITLE: Using Django's Python API for Database Operations
DESCRIPTION: Shows how to perform various database operations using Django's ORM, including creating, querying, updating, and deleting objects.

LANGUAGE: python
CODE:
# Import the models we created from our "news" app
>>> from news.models import Article, Reporter

# No reporters are in the system yet.
>>> Reporter.objects.all()
<QuerySet []>

# Create a new Reporter.
>>> r = Reporter(full_name="John Smith")

# Save the object into the database. You have to call save() explicitly.
>>> r.save()

# Now it has an ID.
>>> r.id
1

# Now the new reporter is in the database.
>>> Reporter.objects.all()
<QuerySet [<Reporter: John Smith>]>

# Fields are represented as attributes on the Python object.
>>> r.full_name
'John Smith'

# Django provides a rich database lookup API.
>>> Reporter.objects.get(id=1)
<Reporter: John Smith>
>>> Reporter.objects.get(full_name__startswith="John")
<Reporter: John Smith>
>>> Reporter.objects.get(full_name__contains="mith")
<Reporter: John Smith>
>>> Reporter.objects.get(id=2)
Traceback (most recent call last):
    ...
DoesNotExist: Reporter matching query does not exist.

# Create an article.
>>> from datetime import date
>>> a = Article(
...     pub_date=date.today(), headline="Django is cool", content="Yeah.", reporter=r
... )
>>> a.save()

# Now the article is in the database.
>>> Article.objects.all()
<QuerySet [<Article: Django is cool>]>

# Article objects get API access to related Reporter objects.
>>> r = a.reporter
>>> r.full_name
'John Smith'

# And vice versa: Reporter objects get API access to Article objects.
>>> r.article_set.all()
<QuerySet [<Article: Django is cool>]>

# The API follows relationships as far as you need, performing efficient
# JOINs for you behind the scenes.
# This finds all articles by a reporter whose name starts with "John".
>>> Article.objects.filter(reporter__full_name__startswith="John")
<QuerySet [<Article: Django is cool>]>

# Change an object by altering its attributes and calling save().
>>> r.full_name = "Billy Goat"
>>> r.save()

# Delete an object with delete().
>>> r.delete()

----------------------------------------

TITLE: Adding Messages in Django Views
DESCRIPTION: Examples of adding different types of messages in Django views using shortcut methods

LANGUAGE: python
CODE:
messages.debug(request, "%s SQL statements were executed." % count)
messages.info(request, "Three credits remain in your account.")
messages.success(request, "Profile details updated.")
messages.warning(request, "Your account expires in three days.")
messages.error(request, "Document deleted.")

----------------------------------------

TITLE: Basic Django Management Command Implementation
DESCRIPTION: Implementation of a custom closepoll command that closes specified polls in a Django application. Demonstrates command structure, argument handling, and error management.

LANGUAGE: python
CODE:
from django.core.management.base import BaseCommand, CommandError
from polls.models import Question as Poll


class Command(BaseCommand):
    help = "Closes the specified poll for voting"

    def add_arguments(self, parser):
        parser.add_argument("poll_ids", nargs="+", type=int)

    def handle(self, *args, **options):
        for poll_id in options["poll_ids"]:
            try:
                poll = Poll.objects.get(pk=poll_id)
            except Poll.DoesNotExist:
                raise CommandError('Poll "%s" does not exist' % poll_id)

            poll.opened = False
            poll.save()

            self.stdout.write(
                self.style.SUCCESS('Successfully closed poll "%s"' % poll_id)
            )

----------------------------------------

TITLE: Using Multiple Formsets in a Django View
DESCRIPTION: Shows how to use multiple formsets in a single view with prefixes to avoid name clashing.

LANGUAGE: python
CODE:
from django.forms import formset_factory
from django.shortcuts import render
from myapp.forms import ArticleForm, BookForm

def manage_articles(request):
    ArticleFormSet = formset_factory(ArticleForm)
    BookFormSet = formset_factory(BookForm)
    if request.method == "POST":
        article_formset = ArticleFormSet(request.POST, request.FILES, prefix="articles")
        book_formset = BookFormSet(request.POST, request.FILES, prefix="books")
        if article_formset.is_valid() and book_formset.is_valid():
            # do something with the cleaned_data on the formsets.
            pass
    else:
        article_formset = ArticleFormSet(prefix="articles")
        book_formset = BookFormSet(prefix="books")
    return render(
        request,
        "manage_articles.html",
        {
            "article_formset": article_formset,
            "book_formset": book_formset,
        },
    )

----------------------------------------

TITLE: Basic Console Logging Configuration in Django
DESCRIPTION: A simple logging configuration that outputs all log messages to the console. It sets up a console handler and configures the root logger to handle WARNING level messages and higher.

LANGUAGE: python
CODE:
import os

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "WARNING",
    },
}

----------------------------------------

TITLE: Django Logging Configuration with Fine-grained Control
DESCRIPTION: An example of a more detailed logging configuration that allows for fine-grained control over the django logger. It sets up console logging and allows for dynamic log level setting through an environment variable.

LANGUAGE: python
CODE:
import os

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "WARNING",
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": os.getenv("DJANGO_LOG_LEVEL", "INFO"),
            "propagate": False,
        },
    },
}

----------------------------------------

TITLE: Django redirect() with Model Instance
DESCRIPTION: Example of using Django's redirect() function with a model instance, which calls the model's get_absolute_url() method.

LANGUAGE: python
CODE:
from django.shortcuts import redirect


def my_view(request):
    ...
    obj = MyModel.objects.get(...)
    return redirect(obj)

----------------------------------------

TITLE: Decorating Django Class-Based Views
DESCRIPTION: Examples of applying decorators to class-based views, both at the URLconf level and class level using method_decorator.

LANGUAGE: python
CODE:
from django.contrib.auth.decorators import login_required
from django.utils.decorators import method_decorator
from django.views.generic import TemplateView


@method_decorator(login_required, name="dispatch")
class ProtectedView(TemplateView):
    template_name = "secret.html"

----------------------------------------

TITLE: Implementing Vote Handler in Django Views
DESCRIPTION: Django view function that processes vote form submissions, handles errors, and redirects to results page. Uses F() expressions for atomic updates and implements POST-redirect pattern.

LANGUAGE: python
CODE:
from django.db.models import F
from django.http import HttpResponse, HttpResponseRedirect
from django.shortcuts import get_object_or_404, render
from django.urls import reverse

from .models import Choice, Question


def vote(request, question_id):
    question = get_object_or_404(Question, pk=question_id)
    try:
        selected_choice = question.choice_set.get(pk=request.POST["choice"])
    except (KeyError, Choice.DoesNotExist):
        return render(
            request,
            "polls/detail.html",
            {
                "question": question,
                "error_message": "You didn't select a choice.",
            },
        )
    else:
        selected_choice.votes = F("votes") + 1
        selected_choice.save()
        return HttpResponseRedirect(reverse("polls:results", args=(question.id,)))

----------------------------------------

TITLE: Validating Form Data in Django
DESCRIPTION: Shows how to validate form data using the is_valid() method and access error messages.

LANGUAGE: pycon
CODE:
>>> data = {
...     "subject": "hello",
...     "message": "Hi there",
...     "sender": "foo@example.com",
...     "cc_myself": True,
... }
>>> f = ContactForm(data)
>>> f.is_valid()
True

----------------------------------------

TITLE: Skipping Tests Based on Database Features
DESCRIPTION: Demonstrates how to skip tests based on specific database features using Django's skip decorators.

LANGUAGE: python
CODE:
class MyTests(TestCase):
    @skipIfDBFeature("supports_transactions")
    def test_transaction_behavior(self):
        # ... conditional test code
        pass

    @skipUnlessDBFeature("supports_transactions")
    def test_transaction_behavior(self):
        # ... conditional test code
        pass

----------------------------------------

TITLE: Implementing Django DetailView with Context Data
DESCRIPTION: Example of implementing a DetailView subclass for displaying article details with additional context data. Shows how to define the model and customize the context data by adding current timestamp.

LANGUAGE: python
CODE:
from django.utils import timezone
from django.views.generic.detail import DetailView

from articles.models import Article


class ArticleDetailView(DetailView):
    model = Article

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["now"] = timezone.now()
        return context

----------------------------------------

TITLE: Implementing NotEqual Lookup in Django
DESCRIPTION: Creates a custom NotEqual lookup that generates '<>' SQL operator for field comparisons. Includes registration with Django Field class.

LANGUAGE: python
CODE:
from django.db.models import Lookup

class NotEqual(Lookup):
    lookup_name = "ne"

    def as_sql(self, compiler, connection):
        lhs, lhs_params = self.process_lhs(compiler, connection)
        rhs, rhs_params = self.process_rhs(compiler, connection)
        params = lhs_params + rhs_params
        return "%s <> %s" % (lhs, rhs), params

from django.db.models import Field
Field.register_lookup(NotEqual)

----------------------------------------

TITLE: Mitigating SQL Injection in Django QuerySet Methods
DESCRIPTION: This snippet highlights the Django QuerySet methods that were vulnerable to SQL injection attacks. It's crucial to update to version 4.0.4 to address these security issues in annotate(), aggregate(), and extra() methods.

LANGUAGE: python
CODE:
QuerySet.annotate()
QuerySet.aggregate()
QuerySet.extra()

----------------------------------------

TITLE: Using SearchQuery with Different Search Types in Django
DESCRIPTION: Shows various ways to use SearchQuery with different search types, including 'plain', 'phrase', 'raw', and 'websearch'.

LANGUAGE: pycon
CODE:
>>> from django.contrib.postgres.search import SearchQuery
>>> SearchQuery("red tomato")  # two keywords
>>> SearchQuery("tomato red")  # same results as above
>>> SearchQuery("red tomato", search_type="phrase")  # a phrase
>>> SearchQuery("tomato red", search_type="phrase")  # a different phrase
>>> SearchQuery("'tomato' & ('red' | 'green')", search_type="raw")  # boolean operators
>>> SearchQuery(
...     "'tomato' ('red' OR 'green')", search_type="websearch"
... )  # websearch operators

----------------------------------------

TITLE: Migrating Data Between Third-Party Apps
DESCRIPTION: This migration demonstrates how to move data from one third-party application to another, handling cases where the old app might be uninstalled.

LANGUAGE: python
CODE:
from django.apps import apps as global_apps
from django.db import migrations


def forwards(apps, schema_editor):
    try:
        OldModel = apps.get_model("old_app", "OldModel")
    except LookupError:
        # The old app isn't installed.
        return

    NewModel = apps.get_model("new_app", "NewModel")
    NewModel.objects.bulk_create(
        NewModel(new_attribute=old_object.old_attribute)
        for old_object in OldModel.objects.all()
    )


class Migration(migrations.Migration):
    operations = [
        migrations.RunPython(forwards, migrations.RunPython.noop),
    ]
    dependencies = [
        ("myapp", "0123_the_previous_migration"),
        ("new_app", "0001_initial"),
    ]

    if global_apps.is_installed("old_app"):
        dependencies.append(("old_app", "0001_initial"))

----------------------------------------

TITLE: Implementing a Basic Django View
DESCRIPTION: Demonstrates how to create a simple Django view class that inherits from View and handles GET requests.

LANGUAGE: python
CODE:
from django.http import HttpResponse
from django.views import View


class MyView(View):
    def get(self, request, *args, **kwargs):
        return HttpResponse("Hello, World!")

----------------------------------------

TITLE: Implementing Admin Action as ModelAdmin Method in Django
DESCRIPTION: This snippet demonstrates how to implement the 'make_published' action as a method of the ArticleAdmin class, including user feedback.

LANGUAGE: python
CODE:
from django.contrib import admin
from django.contrib import messages
from django.utils.translation import ngettext

class ArticleAdmin(admin.ModelAdmin):
    actions = ["make_published"]

    @admin.action(description="Mark selected stories as published")
    def make_published(self, request, queryset):
        updated = queryset.update(status="p")
        self.message_user(
            request,
            ngettext(
                "%d story was successfully marked as published.",
                "%d stories were successfully marked as published.",
                updated,
            )
            % updated,
            messages.SUCCESS,
        )

----------------------------------------

TITLE: Defining Many-to-One Relationship Models in Django
DESCRIPTION: This snippet demonstrates how to define two Django models, Reporter and Article, with a many-to-one relationship using ForeignKey.

LANGUAGE: python
CODE:
from django.db import models


class Reporter(models.Model):
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=30)
    email = models.EmailField()

    def __str__(self):
        return f"{self.first_name} {self.last_name}"


class Article(models.Model):
    headline = models.CharField(max_length=100)
    pub_date = models.DateField()
    reporter = models.ForeignKey(Reporter, on_delete=models.CASCADE)

    def __str__(self):
        return self.headline

    class Meta:
        ordering = ["headline"]

----------------------------------------

TITLE: Manually Rendering Form Fields in a Template
DESCRIPTION: Demonstrates how to manually render individual form fields in an HTML template for more control over layout.

LANGUAGE: html
CODE:
{{ form.non_field_errors }}
<div class="fieldWrapper">
    {{ form.subject.errors }}
    <label for="{{ form.subject.id_for_label }}">Email subject:</label>
    {{ form.subject }}
</div>
<div class="fieldWrapper">
    {{ form.message.errors }}
    <label for="{{ form.message.id_for_label }}">Your message:</label>
    {{ form.message }}
</div>
<div class="fieldWrapper">
    {{ form.sender.errors }}
    <label for="{{ form.sender.id_for_label }}">Your email address:</label>
    {{ form.sender }}
</div>
<div class="fieldWrapper">
    {{ form.cc_myself.errors }}
    <label for="{{ form.cc_myself.id_for_label }}">CC yourself?</label>
    {{ form.cc_myself }}
</div>

----------------------------------------

TITLE: Complex Django Logging Configuration
DESCRIPTION: A comprehensive logging configuration that defines multiple formatters, filters, handlers, and loggers. It includes console and email logging, custom filters, and different log levels for various loggers.

LANGUAGE: python
CODE:
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
    },
    "filters": {
        "special": {
            "()": "project.logging.SpecialFilter",
            "foo": "bar",
        },
        "require_debug_true": {
            "()": "django.utils.log.RequireDebugTrue",
        },
    },
    "handlers": {
        "console": {
            "level": "INFO",
            "filters": ["require_debug_true"],
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
        "mail_admins": {
            "level": "ERROR",
            "class": "django.utils.log.AdminEmailHandler",
            "filters": ["special"],
        },
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "propagate": True,
        },
        "django.request": {
            "handlers": ["mail_admins"],
            "level": "ERROR",
            "propagate": False,
        },
        "myproject.custom": {
            "handlers": ["console", "mail_admins"],
            "level": "INFO",
            "filters": ["special"],
        },
    },
}

----------------------------------------

TITLE: Rendering Templates with Django render()
DESCRIPTION: Example showing how to use Django's render() function to render a template with context data and custom MIME type.

LANGUAGE: python
CODE:
from django.shortcuts import render


def my_view(request):
    # View code here...
    return render(
        request,
        "myapp/index.html",
        {
            "foo": "bar",
        },
        content_type="application/xhtml+xml",
    )

----------------------------------------

TITLE: Organizing Models in a Package
DESCRIPTION: Example of organizing models in a package with separate files.

LANGUAGE: python
CODE:
from .organic import Person
from .synthetic import Robot

----------------------------------------

TITLE: Atomic Transaction Context Manager in Django
DESCRIPTION: Demonstrates using atomic as a context manager for transaction control within a specific code block.

LANGUAGE: Python
CODE:
from django.db import transaction

def viewfunc(request):
    # This code executes in autocommit mode
    do_stuff()

    with transaction.atomic():
        # This code executes inside a transaction.
        do_more_stuff()

----------------------------------------

TITLE: Creating a Django TestCase for Animal Model
DESCRIPTION: This snippet demonstrates how to create a test case for an Animal model using Django's TestCase class. It sets up test data and defines a test method to check if animals can speak correctly.

LANGUAGE: Python
CODE:
from django.test import TestCase
from myapp.models import Animal


class AnimalTestCase(TestCase):
    def setUp(self):
        Animal.objects.create(name="lion", sound="roar")
        Animal.objects.create(name="cat", sound="meow")

    def test_animals_can_speak(self):
        """Animals that can speak are correctly identified"""
        lion = Animal.objects.get(name="lion")
        cat = Animal.objects.get(name="cat")
        self.assertEqual(lion.speak(), 'The lion says "roar"')
        self.assertEqual(cat.speak(), 'The cat says "meow"')

----------------------------------------

TITLE: Using Low-Level Cache API in Django
DESCRIPTION: Examples of using Django's low-level cache API for basic operations like setting, getting, and deleting cache entries.

LANGUAGE: Python
CODE:
from django.core.cache import cache

cache.set("my_key", "hello, world!", 30)
value = cache.get("my_key")
cache.delete("my_key")

----------------------------------------

TITLE: Creating a Functional UniqueConstraint in Django
DESCRIPTION: Demonstrates creating a functional unique constraint on expressions and database functions. This example creates a constraint on the lowercased value of the name field in descending order and the category field.

LANGUAGE: python
CODE:
UniqueConstraint(Lower("name").desc(), "category", name="unique_lower_name_category")

----------------------------------------

TITLE: Multiple Inheritance with Explicit Primary Keys
DESCRIPTION: Example of using multiple inheritance with explicit primary keys to avoid conflicts.

LANGUAGE: python
CODE:
class Article(models.Model):
    article_id = models.AutoField(primary_key=True)
    ...


class Book(models.Model):
    book_id = models.AutoField(primary_key=True)
    ...


class BookReview(Book, Article):
    pass

----------------------------------------

TITLE: Uncached Callable Attributes in Django ORM
DESCRIPTION: Shows how callable attributes in Django ORM cause database lookups on each access, using an authors example.

LANGUAGE: python
CODE:
>>> entry = Entry.objects.get(id=1)
>>> entry.authors.all()  # query performed
>>> entry.authors.all()  # query performed again

----------------------------------------

TITLE: SQL Injection Safe Position Function in Django
DESCRIPTION: A corrected version of the Position function that avoids SQL injection vulnerability.

LANGUAGE: python
CODE:
class Position(Func):
    function = "POSITION"
    arg_joiner = " IN "

    def __init__(self, expression, substring):
        super().__init__(substring, expression)

----------------------------------------

TITLE: Setting Up URL Pattern for TemplateView
DESCRIPTION: Demonstrates how to configure a URL pattern for a custom TemplateView in Django's urls.py file.

LANGUAGE: python
CODE:
from django.urls import path

from myapp.views import HomePageView

urlpatterns = [
    path("", HomePageView.as_view(), name="home"),
]

----------------------------------------

TITLE: Creating a Custom Coalesce Expression in Django
DESCRIPTION: A complete example of creating a custom query expression class that implements the COALESCE SQL function.

LANGUAGE: python
CODE:
import copy
from django.db.models import Expression


class Coalesce(Expression):
    template = "COALESCE( %(expressions)s )"

    def __init__(self, expressions, output_field):
        super().__init__(output_field=output_field)
        if len(expressions) < 2:
            raise ValueError("expressions must have at least 2 elements")
        for expression in expressions:
            if not hasattr(expression, "resolve_expression"):
                raise TypeError("%r is not an Expression" % expression)
        self.expressions = expressions

    def resolve_expression(
        self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False
    ):
        c = self.copy()
        c.is_summary = summarize
        for pos, expression in enumerate(self.expressions):
            c.expressions[pos] = expression.resolve_expression(
                query, allow_joins, reuse, summarize, for_save
            )
        return c

    def as_sql(self, compiler, connection, template=None):
        sql_expressions, sql_params = [], []
        for expression in self.expressions:
            sql, params = compiler.compile(expression)
            sql_expressions.append(sql)
            sql_params.extend(params)
        template = template or self.template
        data = {"expressions": ",".join(sql_expressions)}
        return template % data, sql_params

    def as_oracle(self, compiler, connection):
        """
        Example of vendor specific handling (Oracle in this case).
        Let's make the function name lowercase.
        """
        return self.as_sql(compiler, connection, template="coalesce( %(expressions)s )")

    def get_source_expressions(self):
        return self.expressions

    def set_source_expressions(self, expressions):
        self.expressions = expressions

----------------------------------------

TITLE: Viewing Raw SQL Queries in Django
DESCRIPTION: This snippet demonstrates how to view the raw SQL queries Django is executing. It requires setting DEBUG to True and uses the connection.queries attribute to display the executed SQL statements and their execution times.

LANGUAGE: python
CODE:
>>> from django.db import connection
>>> connection.queries
[{'sql': 'SELECT polls_polls.id, polls_polls.question, polls_polls.pub_date FROM polls_polls',
'time': '0.002'}]

----------------------------------------

TITLE: Generating PDF with Django and ReportLab
DESCRIPTION: Django view function that creates a simple PDF file using ReportLab and returns it as a FileResponse. This example demonstrates creating a PDF buffer, drawing content, and serving the file for download.

LANGUAGE: python
CODE:
import io
from django.http import FileResponse
from reportlab.pdfgen import canvas


def some_view(request):
    # Create a file-like buffer to receive PDF data.
    buffer = io.BytesIO()

    # Create the PDF object, using the buffer as its "file."
    p = canvas.Canvas(buffer)

    # Draw things on the PDF. Here's where the PDF generation happens.
    # See the ReportLab documentation for the full list of functionality.
    p.drawString(100, 100, "Hello world.")

    # Close the PDF object cleanly, and we're done.
    p.showPage()
    p.save()

    # FileResponse sets the Content-Disposition header so that browsers
    # present the option to save the file.
    buffer.seek(0)
    return FileResponse(buffer, as_attachment=True, filename="hello.pdf")

----------------------------------------

TITLE: Executing Raw SQL Query with Django's raw() Method
DESCRIPTION: Demonstrates how to use the raw() method to execute a custom SQL query and iterate over the results as model instances.

LANGUAGE: python
CODE:
>>> for p in Person.objects.raw("SELECT * FROM myapp_person"):
...     print(p)
...
John Smith
Jane Jones

----------------------------------------

TITLE: Using Cache Decorators in Django Views
DESCRIPTION: Demonstrates how to use cache decorators like cache_page and vary_on_headers to control caching behavior for specific views.

LANGUAGE: Python
CODE:
from django.views.decorators.cache import cache_page
from django.views.decorators.vary import vary_on_headers

@cache_page(60 * 15)
@vary_on_headers("User-Agent")
def my_view(request):
    ...

----------------------------------------

TITLE: Using CSRF Protection with Caching (Python)
DESCRIPTION: Demonstrates how to use the csrf_protect decorator with cache_page for views that require CSRF protection and caching.

LANGUAGE: python
CODE:
from django.views.decorators.cache import cache_page
from django.views.decorators.csrf import csrf_protect


@cache_page(60 * 15)
@csrf_protect
def my_view(request): ...

----------------------------------------

TITLE: Using Multiple Managers in a Django Model
DESCRIPTION: This example illustrates how to use multiple managers in a single Django model. It defines separate managers for authors and editors, allowing for easy filtering of Person objects based on their role.

LANGUAGE: python
CODE:
class AuthorManager(models.Manager):
    def get_queryset(self):
        return super().get_queryset().filter(role="A")


class EditorManager(models.Manager):
    def get_queryset(self):
        return super().get_queryset().filter(role="E")


class Person(models.Model):
    first_name = models.CharField(max_length=50)
    last_name = models.CharField(max_length=50)
    role = models.CharField(max_length=1, choices={"A": _("Author"), "E": _("Editor")})
    people = models.Manager()
    authors = AuthorManager()
    editors = EditorManager()

----------------------------------------

TITLE: Defining Django Bookstore Models
DESCRIPTION: Model definitions for a bookstore inventory system with Author, Publisher, Book and Store models demonstrating relationships and field types

LANGUAGE: python
CODE:
from django.db import models

class Author(models.Model):
    name = models.CharField(max_length=100)
    age = models.IntegerField()

class Publisher(models.Model):
    name = models.CharField(max_length=300)

class Book(models.Model):
    name = models.CharField(max_length=300)
    pages = models.IntegerField()
    price = models.DecimalField(max_digits=10, decimal_places=2)
    rating = models.FloatField()
    authors = models.ManyToManyField(Author)
    publisher = models.ForeignKey(Publisher, on_delete=models.CASCADE)
    pubdate = models.DateField()

class Store(models.Model):
    name = models.CharField(max_length=300)
    books = models.ManyToManyField(Book)

----------------------------------------

TITLE: Implementing Custom QuerySet Methods in Django Managers
DESCRIPTION: This snippet shows how to implement custom QuerySet methods in a Django manager. It defines a PersonQuerySet with custom methods and a corresponding PersonManager that exposes these methods at the manager level.

LANGUAGE: python
CODE:
class PersonQuerySet(models.QuerySet):
    def authors(self):
        return self.filter(role="A")

    def editors(self):
        return self.filter(role="E")


class PersonManager(models.Manager):
    def get_queryset(self):
        return PersonQuerySet(self.model, using=self._db)

    def authors(self):
        return self.get_queryset().authors()

    def editors(self):
        return self.get_queryset().editors()


class Person(models.Model):
    first_name = models.CharField(max_length=50)
    last_name = models.CharField(max_length=50)
    role = models.CharField(max_length=1, choices={"A": _("Author"), "E": _("Editor")})
    people = PersonManager()

----------------------------------------

TITLE: Proxy Model Example
DESCRIPTION: Example of creating a proxy model to add methods to an existing model.

LANGUAGE: python
CODE:
from django.db import models


class Person(models.Model):
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=30)


class MyPerson(Person):
    class Meta:
        proxy = True

    def do_something(self):
        # ...
        pass

----------------------------------------

TITLE: Cookie Testing in Django Views
DESCRIPTION: Implementation of cookie testing functionality to verify browser cookie support across multiple requests.

LANGUAGE: python
CODE:
def login(request):
    if request.method == "POST":
        if request.session.test_cookie_worked():
            request.session.delete_test_cookie()
            return HttpResponse("You're logged in.")
        else:
            return HttpResponse("Please enable cookies and try again.")
    request.session.set_test_cookie()
    return render(request, "foo/login_form.html")

----------------------------------------

TITLE: Connecting a Receiver to a Signal
DESCRIPTION: Illustrates two methods of connecting a receiver to a Django signal: manual connection and using the @receiver decorator.

LANGUAGE: Python
CODE:
from django.core.signals import request_finished

request_finished.connect(my_callback)

from django.core.signals import request_finished
from django.dispatch import receiver


@receiver(request_finished)
def my_callback(sender, **kwargs):
    print("Request finished!")

----------------------------------------

TITLE: Creating, Modifying, and Deleting Redirects using Django's Python API
DESCRIPTION: Demonstrates how to use Django's database API to create, change, and delete redirects programmatically. It shows interaction with the Redirect model, including creating a new redirect, modifying an existing one, and deleting a redirect.

LANGUAGE: python
CODE:
>>> from django.conf import settings
>>> from django.contrib.redirects.models import Redirect
>>> # Add a new redirect.
>>> redirect = Redirect.objects.create(
...     site_id=1,
...     old_path="/contact-us/",
...     new_path="/contact/",
... )
>>> # Change a redirect.
>>> redirect.new_path = "/contact-details/"
>>> redirect.save()
>>> redirect
<Redirect: /contact-us/ ---> /contact-details/>
>>> # Delete a redirect.
>>> Redirect.objects.filter(site_id=1, old_path="/contact-us/").delete()
(1, {'redirects.Redirect': 1})

----------------------------------------

TITLE: Advanced PostgreSQL Text Search with Unaccent Extension
DESCRIPTION: Shows how to perform case-insensitive and accent-insensitive text searches using PostgreSQL's unaccent feature through Django's ORM.

LANGUAGE: python
CODE:
>>> Author.objects.filter(name__unaccent__icontains="Helen")
[<Author: Helen Mirren>, <Author: Helena Bonham Carter>, <Author: Hélène Joy>]

----------------------------------------

TITLE: Connecting to Django Settings Change Signal
DESCRIPTION: Demonstrates how to connect a callback function to Django's setting_changed signal using an AppConfig class.

LANGUAGE: Python
CODE:
from django.apps import AppConfig
from django.core.signals import setting_changed


def my_callback(sender, **kwargs):
    print("Setting changed!")


class MyAppConfig(AppConfig):
    ...

    def ready(self):
        setting_changed.connect(my_callback)

----------------------------------------

TITLE: Accessing the Django Application Registry
DESCRIPTION: Demonstrates how to import and use the Django application registry to get information about installed apps.

LANGUAGE: pycon
CODE:
>>> from django.apps import apps
>>> apps.get_app_config("admin").verbose_name
'Administration'

----------------------------------------

TITLE: Security Fix for django.utils.html.urlize()
DESCRIPTION: Addresses CVE-2024-38875 where urlize and urlizetrunc filters were vulnerable to DOS attacks with inputs containing large numbers of brackets.



----------------------------------------

TITLE: Filtering Companies with More Employees than Chairs in Django
DESCRIPTION: Demonstrates how to use F() expressions to compare two fields in a filter.

LANGUAGE: pycon
CODE:
>>> Company.objects.filter(num_employees__gt=F("num_chairs"))

----------------------------------------

TITLE: Creating ContentFile Objects in Python with Django
DESCRIPTION: Demonstrates how to create ContentFile objects using both string and byte content in Django. ContentFile is a subclass of File that operates on string content rather than actual files.

LANGUAGE: python
CODE:
from django.core.files.base import ContentFile

f1 = ContentFile("esta frase está en español")
f2 = ContentFile(b"these are bytes")

----------------------------------------

TITLE: Using GenericSitemap in Django URLconf
DESCRIPTION: This snippet shows how to use the GenericSitemap class in a Django URLconf to create a sitemap for a blog application.

LANGUAGE: Python
CODE:
from django.contrib.sitemaps import GenericSitemap
from django.contrib.sitemaps.views import sitemap
from django.urls import path
from blog.models import Entry

info_dict = {
    "queryset": Entry.objects.all(),
    "date_field": "pub_date",
}

urlpatterns = [
    # some generic view using info_dict
    # ...
    # the sitemap
    path(
        "sitemap.xml",
        sitemap,
        {"sitemaps": {"blog": GenericSitemap(info_dict, priority=0.6)}},
        name="django.contrib.sitemaps.views.sitemap",
    ),
]

----------------------------------------

TITLE: Using SearchVector for Multi-Field Search in Django
DESCRIPTION: Shows how to use SearchVector to search against multiple fields, including related models.

LANGUAGE: pycon
CODE:
>>> from django.contrib.postgres.search import SearchVector
>>> Entry.objects.annotate(
...     search=SearchVector("body_text", "blog__tagline"),
... ).filter(search="Cheese")
[<Entry: Cheese on Toast recipes>, <Entry: Pizza Recipes>]

----------------------------------------

TITLE: Defining Models with Composite Primary Keys in Django
DESCRIPTION: Example showing how to define Django models using composite primary keys with CompositePrimaryKey class. Demonstrates setup for Product, Order, and OrderLineItem models.

LANGUAGE: python
CODE:
class Product(models.Model):
    name = models.CharField(max_length=100)


class Order(models.Model):
    reference = models.CharField(max_length=20, primary_key=True)


class OrderLineItem(models.Model):
    pk = models.CompositePrimaryKey("product_id", "order_id")
    product = models.ForeignKey(Product, on_delete=models.CASCADE)
    order = models.ForeignKey(Order, on_delete=models.CASCADE)
    quantity = models.IntegerField()

----------------------------------------

TITLE: Serving Static Files in Debug Mode with static() in Django
DESCRIPTION: Demonstrates how to use the static() helper function to serve static files in debug mode. It appends the static file serving pattern to the urlpatterns list.

LANGUAGE: python
CODE:
from django.conf import settings
from django.conf.urls.static import static

urlpatterns = [
    # ... the rest of your URLconf goes here ...
] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

----------------------------------------

TITLE: Class-based Django Middleware Implementation
DESCRIPTION: Example of implementing middleware as a class with __init__ and __call__ methods. This pattern allows for more complex middleware with instance attributes and configuration.

LANGUAGE: python
CODE:
class SimpleMiddleware:
    def __init__(self, get_response):
        self.get_response = get_response
        # One-time configuration and initialization.

    def __call__(self, request):
        # Code to be executed for each request before
        # the view (and later middleware) are called.

        response = self.get_response(request)

        # Code to be executed for each request/response after
        # the view is called.

        return response

----------------------------------------

TITLE: Creating Multiple File Upload Field in Django
DESCRIPTION: Defines custom MultipleFileInput and MultipleFileField classes to handle multiple file uploads in a single form field.

LANGUAGE: python
CODE:
from django import forms


class MultipleFileInput(forms.ClearableFileInput):
    allow_multiple_selected = True


class MultipleFileField(forms.FileField):
    def __init__(self, *args, **kwargs):
        kwargs.setdefault("widget", MultipleFileInput())
        super().__init__(*args, **kwargs)

    def clean(self, data, initial=None):
        single_file_clean = super().clean
        if isinstance(data, (list, tuple)):
            result = [single_file_clean(d, initial) for d in data]
        else:
            result = [single_file_clean(data, initial)]
        return result


class FileFieldForm(forms.Form):
    file_field = MultipleFileField()

----------------------------------------

TITLE: Custom Path Converter in Django URLs
DESCRIPTION: Shows how to define and register a custom path converter for handling specific URL patterns.

LANGUAGE: Python
CODE:
class FourDigitYearConverter:
    regex = "[0-9]{4}"

    def to_python(self, value):
        return int(value)

    def to_url(self, value):
        return "%04d" % value

from django.urls import path, register_converter

from . import converters, views

register_converter(converters.FourDigitYearConverter, "yyyy")

urlpatterns = [
    path("articles/2003/", views.special_case_2003),
    path("articles/<yyyy:year>/", views.year_archive),
    ...,
]

----------------------------------------

TITLE: Basic Text Search Using Django QuerySet Filter
DESCRIPTION: Demonstrates basic text searching using Django's contains lookup to filter Author objects by name. Shows a simple but limited approach to text searching.

LANGUAGE: python
CODE:
>>> Author.objects.filter(name__contains="Terry")
[<Author: Terry Gilliam>, <Author: Terry Jones>]

----------------------------------------

TITLE: Getting Current Time with Time Zone Support in Django
DESCRIPTION: Shows how to get the current time when time zone support is enabled, using Django's timezone utility.

LANGUAGE: python
CODE:
from django.utils import timezone

now = timezone.now()

----------------------------------------

TITLE: Using Tags in Django Templates
DESCRIPTION: Shows examples of using tags in Django templates. Tags are surrounded by {% %} and can perform various functions like outputting content, control structures, or accessing other template tags.

LANGUAGE: html
CODE:
{% csrf_token %}

{% cycle 'odd' 'even' %}

{% if user.is_authenticated %}Hello, {{ user.username }}.{% endif %}

----------------------------------------

TITLE: Testing CSRF Protection with Django Test Client
DESCRIPTION: Shows how to create a test client that enforces CSRF checks for testing CSRF protection.

LANGUAGE: python
CODE:
>>> from django.test import Client
>>> csrf_client = Client(enforce_csrf_checks=True)

----------------------------------------

TITLE: Creating Custom List Filter with SimpleListFilter in Django Admin
DESCRIPTION: Shows how to create a custom list filter by subclassing SimpleListFilter, implementing lookups and queryset methods to filter by decade of birth.

LANGUAGE: python
CODE:
from datetime import date

from django.contrib import admin
from django.utils.translation import gettext_lazy as _


class DecadeBornListFilter(admin.SimpleListFilter):
    title = _("decade born")
    parameter_name = "decade"

    def lookups(self, request, model_admin):
        return [
            ("80s", _("in the eighties")),
            ("90s", _("in the nineties")),
        ]

    def queryset(self, request, queryset):
        if self.value() == "80s":
            return queryset.filter(
                birthday__gte=date(1980, 1, 1),
                birthday__lte=date(1989, 12, 31),
            )
        if self.value() == "90s":
            return queryset.filter(
                birthday__gte=date(1990, 1, 1),
                birthday__lte=date(1999, 12, 31),
            )


class PersonAdmin(admin.ModelAdmin):
    list_filter = [DecadeBornListFilter]

----------------------------------------

TITLE: Installing Django's Development Version with pip
DESCRIPTION: This pip command installs Django from the local clone of the development repository in editable mode. It should be run in an activated virtual environment after cloning the Django repository.

LANGUAGE: bash
CODE:
$ python -m pip install -e django/

----------------------------------------

TITLE: Defining a Signal Receiver Function
DESCRIPTION: Shows how to create a receiver function for Django signals, including both synchronous and asynchronous versions.

LANGUAGE: Python
CODE:
def my_callback(sender, **kwargs):
    print("Request finished!")

async def my_callback(sender, **kwargs):
    await asyncio.sleep(5)
    print("Request finished!")

----------------------------------------

TITLE: Using SearchRank for Relevancy-Based Ordering in Django
DESCRIPTION: Shows how to use SearchRank to order search results based on relevancy.

LANGUAGE: pycon
CODE:
>>> from django.contrib.postgres.search import SearchQuery, SearchRank, SearchVector
>>> vector = SearchVector("body_text")
>>> query = SearchQuery("cheese")
>>> Entry.objects.annotate(rank=SearchRank(vector, query)).order_by("-rank")
[<Entry: Cheese on Toast recipes>, <Entry: Pizza recipes>]

----------------------------------------

TITLE: Addressing SQL Injection in Trunc() and Extract() Functions in Django 3.2.14
DESCRIPTION: This release fixes a high-severity security issue (CVE-2022-34265) where Trunc() and Extract() database functions were vulnerable to SQL injection if untrusted data was used as a kind/lookup_name value. Applications that restrict these values to a safe list are not affected.

LANGUAGE: python
CODE:
from django.db.models.functions import Trunc, Extract

# Potential vulnerability if 'kind' or 'lookup_name' is user-controlled
Trunc('field_name', kind='user_input')
Extract('field_name', lookup_name='user_input')

----------------------------------------

TITLE: Updating the IndexView get_queryset() Method in Django
DESCRIPTION: This code snippet shows how to modify the get_queryset() method of the IndexView to filter out future questions. It ensures that only published questions are displayed on the index page.

LANGUAGE: Python
CODE:
def get_queryset(self):
    """
    Return the last five published questions (not including those set to be
    published in the future).
    """
    return Question.objects.filter(pub_date__lte=timezone.now()).order_by("-pub_date")[
        :5
    ]

----------------------------------------

TITLE: Running Django Application with Uvicorn
DESCRIPTION: Command to start a Django application using Uvicorn ASGI server. The server will listen on 127.0.0.1:8000 and requires the project to be in Python path.

LANGUAGE: shell
CODE:
python -m uvicorn myproject.asgi:application

----------------------------------------

TITLE: Configuring Project Root URLs
DESCRIPTION: Main URL configuration file that includes the polls app URLs and admin interface.

LANGUAGE: python
CODE:
from django.contrib import admin
from django.urls import include, path

urlpatterns = [
    path("polls/", include("polls.urls")),
    path("admin/", admin.site.urls),
]

----------------------------------------

TITLE: Creating a Manager with QuerySet Methods Using as_manager()
DESCRIPTION: This example demonstrates how to create a manager instance with a copy of custom QuerySet methods using the as_manager() method. This approach reduces code duplication between QuerySet and Manager classes.

LANGUAGE: python
CODE:
class Person(models.Model):
    ...
    people = PersonQuerySet.as_manager()

----------------------------------------

TITLE: Writing Uploaded File to Disk in Django
DESCRIPTION: Shows how to handle an uploaded file by writing it to disk in chunks. This method ensures that large files don't overwhelm the system's memory.

LANGUAGE: python
CODE:
def handle_uploaded_file(f):
    with open("some/file/name.txt", "wb+") as destination:
        for chunk in f.chunks():
            destination.write(chunk)

----------------------------------------

TITLE: Rendering a Django Form in an HTML Template
DESCRIPTION: Shows how to include a Django form in an HTML template, including CSRF protection.

LANGUAGE: html
CODE:
<form action="/your-name/" method="post">
    {% csrf_token %}
    {{ form }}
    <input type="submit" value="Submit">
</form>

----------------------------------------

TITLE: Default Django Middleware Configuration
DESCRIPTION: Standard middleware configuration created by django-admin startproject command, showing the recommended order of built-in middleware components.

LANGUAGE: python
CODE:
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

----------------------------------------

TITLE: Creating a Custom Manager with Extra Methods in Django
DESCRIPTION: This example shows how to create a custom manager 'PollManager' with an additional method 'with_counts()'. The custom manager is then used in the 'OpinionPoll' model to provide extended functionality.

LANGUAGE: python
CODE:
from django.db import models
from django.db.models.functions import Coalesce


class PollManager(models.Manager):
    def with_counts(self):
        return self.annotate(num_responses=Coalesce(models.Count("response"), 0))


class OpinionPoll(models.Model):
    question = models.CharField(max_length=200)
    objects = PollManager()


class Response(models.Model):
    poll = models.ForeignKey(OpinionPoll, on_delete=models.CASCADE)
    # ...

----------------------------------------

TITLE: Setting DJANGO_SETTINGS_MODULE in Windows Command Prompt
DESCRIPTION: Commands to set the DJANGO_SETTINGS_MODULE environment variable and run the Django development server in a Windows command prompt.

LANGUAGE: doscon
CODE:
set DJANGO_SETTINGS_MODULE=mysite.settings
django-admin runserver

----------------------------------------

TITLE: Implementing Nested ArrayField in Django
DESCRIPTION: Example showing how to create a nested ArrayField structure for storing a chess board layout using Django models.

LANGUAGE: python
CODE:
from django.contrib.postgres.fields import ArrayField
from django.db import models

class ChessBoard(models.Model):
    board = ArrayField(
        ArrayField(
            models.CharField(max_length=10, blank=True),
            size=8,
        ),
        size=8,
    )

----------------------------------------

TITLE: Implementing Concrete Car and Manufacturer Models in Django
DESCRIPTION: Demonstrates how to create concrete models by subclassing an abstract model and defining the related Manufacturer model.

LANGUAGE: python
CODE:
from django.db import models
from products.models import AbstractCar

class Manufacturer(models.Model):
    name = models.TextField()

class Car(AbstractCar):
    pass

----------------------------------------

TITLE: Setting DJANGO_SETTINGS_MODULE in WSGI Environment
DESCRIPTION: Python code to set the DJANGO_SETTINGS_MODULE environment variable in a WSGI application environment using os.environ.

LANGUAGE: python
CODE:
import os

os.environ["DJANGO_SETTINGS_MODULE"] = "mysite.settings"

----------------------------------------

TITLE: Applying Filters in Django Templates
DESCRIPTION: Illustrates the use of filters in Django templates. Filters transform variable values and are applied using the | symbol.

LANGUAGE: html
CODE:
{{ django|title }}

{{ my_date|date:"Y-m-d" }}

----------------------------------------

TITLE: Django Templates Configuration
DESCRIPTION: Shows how to configure Django's template system to load templates from installed applications and specific directories.

LANGUAGE: python
CODE:
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "APP_DIRS": True,
    },
]

----------------------------------------

TITLE: Filtering Entries Using Full Text Search in Django
DESCRIPTION: Demonstrates how to use the 'search' lookup to perform a full text search against a single column in the database.

LANGUAGE: pycon
CODE:
>>> Entry.objects.filter(body_text__search="Cheese")
[<Entry: Cheese on Toast recipes>, <Entry: Pizza Recipes>]

----------------------------------------

TITLE: Security Fix Reference for UsernameField in Django 4.1.13
DESCRIPTION: Documentation of security vulnerability CVE-2023-46695 affecting UsernameField component. The issue relates to slow NFKC normalization on Windows systems that could lead to denial of service attacks when processing long Unicode strings.

LANGUAGE: python
CODE:
django.contrib.auth.forms.UsernameField

----------------------------------------

TITLE: Saving File Objects in Django Models
DESCRIPTION: Shows two equivalent ways to save a new file associated with a model instance in Django. The first method separates the file save and model save operations, while the second combines them.

LANGUAGE: python
CODE:
>>> car.photo.save("myphoto.jpg", content, save=False)
>>> car.save()

LANGUAGE: python
CODE:
>>> car.photo.save("myphoto.jpg", content, save=True)

----------------------------------------

TITLE: Implementing a Custom RedirectView in Django
DESCRIPTION: Shows how to create a custom RedirectView that updates an article counter before redirecting.

LANGUAGE: python
CODE:
from django.shortcuts import get_object_or_404
from django.views.generic.base import RedirectView

from articles.models import Article


class ArticleCounterRedirectView(RedirectView):
    permanent = False
    query_string = True
    pattern_name = "article-detail"

    def get_redirect_url(self, *args, **kwargs):
        article = get_object_or_404(Article, pk=kwargs["pk"])
        article.update_counter()
        return super().get_redirect_url(*args, **kwargs)

----------------------------------------

TITLE: Verifying Python Installation in Shell
DESCRIPTION: This snippet demonstrates how to verify Python installation by running the 'python' command in the shell. It shows the expected output, including the Python version and basic information.

LANGUAGE: pycon
CODE:
Python 3.x.y
[GCC 4.x] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>>

----------------------------------------

TITLE: Advanced Django Aggregation Examples
DESCRIPTION: More complex aggregation queries demonstrating annotations, multiple aggregates, and traversing relationships

LANGUAGE: python
CODE:
# Publishers with book counts
from django.db.models import Count
pubs = Publisher.objects.annotate(num_books=Count("book"))

# Count books above/below rating of 5
from django.db.models import Q
above_5 = Count("book", filter=Q(book__rating__gt=5))
below_5 = Count("book", filter=Q(book__rating__lte=5))
pubs = Publisher.objects.annotate(below_5=below_5).annotate(above_5=above_5)

# Top 5 publishers by book count
pubs = Publisher.objects.annotate(num_books=Count("book")).order_by("-num_books")[:5]

----------------------------------------

TITLE: Implementing a FormView for Contact Form Handling
DESCRIPTION: This code demonstrates how to use Django's FormView to handle the ContactForm. It specifies the template, form class, and success URL, and overrides the form_valid method to send an email when the form is valid.

LANGUAGE: python
CODE:
from myapp.forms import ContactForm
from django.views.generic.edit import FormView


class ContactFormView(FormView):
    template_name = "contact.html"
    form_class = ContactForm
    success_url = "/thanks/"

    def form_valid(self, form):
        # This method is called when valid form data has been POSTed.
        # It should return an HttpResponse.
        form.send_email()
        return super().form_valid(form)

----------------------------------------

TITLE: Accessing Form Errors in Django
DESCRIPTION: Demonstrates how to access form errors after validation using the errors attribute.

LANGUAGE: pycon
CODE:
>>> data = {
...     "subject": "",
...     "message": "Hi there",
...     "sender": "invalid email address",
...     "cc_myself": True,
... }
>>> f = ContactForm(data)
>>> f.is_valid()
False
>>> f.errors
{'sender': ['Enter a valid email address.'], 'subject': ['This field is required.']}

----------------------------------------

TITLE: Handling File Upload with Django ModelForm
DESCRIPTION: Demonstrates file upload handling using a ModelForm. This approach automatically saves the file to the location specified by the FileField's upload_to argument.

LANGUAGE: python
CODE:
from django.http import HttpResponseRedirect
from django.shortcuts import render
from .forms import ModelFormWithFileField


def upload_file(request):
    if request.method == "POST":
        form = ModelFormWithFileField(request.POST, request.FILES)
        if form.is_valid():
            # file is saved
            form.save()
            return HttpResponseRedirect("/success/url/")
    else:
        form = ModelFormWithFileField()
    return render(request, "upload.html", {"form": form})

----------------------------------------

TITLE: Modifying a Manager's Initial QuerySet in Django
DESCRIPTION: This snippet demonstrates how to create a custom manager 'DahlBookManager' that modifies the initial QuerySet to filter books by a specific author. It also shows how to use multiple managers in a single model.

LANGUAGE: python
CODE:
# First, define the Manager subclass.
class DahlBookManager(models.Manager):
    def get_queryset(self):
        return super().get_queryset().filter(author="Roald Dahl")


# Then hook it into the Book model explicitly.
class Book(models.Model):
    title = models.CharField(max_length=100)
    author = models.CharField(max_length=50)

    objects = models.Manager()  # The default manager.
    dahl_objects = DahlBookManager()  # The Dahl-specific manager.

----------------------------------------

TITLE: Defining a Non-Atomic Migration
DESCRIPTION: Shows how to create a migration that doesn't run inside a transaction by setting the atomic attribute to False.

LANGUAGE: python
CODE:
from django.db import migrations


class Migration(migrations.Migration):
    atomic = False

----------------------------------------

TITLE: Synchronizing Multiple Databases with Django Migrate Command
DESCRIPTION: Example of using the migrate management command to synchronize models across multiple databases.

LANGUAGE: shell
CODE:
$ ./manage.py migrate
$ ./manage.py migrate --database=users

----------------------------------------

TITLE: Implementing Content Negotiation in Form Views
DESCRIPTION: This code demonstrates how to implement content negotiation in a CreateView. It returns either HTML or JSON responses based on the client's Accept header, handling both successful and error cases.

LANGUAGE: python
CODE:
from django.http import JsonResponse
from django.views.generic.edit import CreateView
from myapp.models import Author


class JsonableResponseMixin:
    """
    Mixin to add JSON support to a form.
    Must be used with an object-based FormView (e.g. CreateView)
    """

    def form_invalid(self, form):
        response = super().form_invalid(form)
        if self.request.accepts("text/html"):
            return response
        else:
            return JsonResponse(form.errors, status=400)

    def form_valid(self, form):
        # We make sure to call the parent's form_valid() method because
        # it might do some processing (in the case of CreateView, it will
        # call form.save() for example).
        response = super().form_valid(form)
        if self.request.accepts("text/html"):
            return response
        else:
            data = {
                "pk": self.object.pk,
            }
            return JsonResponse(data)


class AuthorCreateView(JsonableResponseMixin, CreateView):
    model = Author
    fields = ["name"]

----------------------------------------

TITLE: Configuring URL Patterns with re_path() in Django
DESCRIPTION: Shows how to use the re_path() function to define URL patterns using regular expressions in Django. It includes examples of capturing named groups and including other URL configurations.

LANGUAGE: python
CODE:
from django.urls import include, re_path

urlpatterns = [
    re_path(r"^index/$", views.index, name="index"),
    re_path(r"^bio/(?P<username>\w+)/$", views.bio, name="bio"),
    re_path(r"^blog/", include("blog.urls")),
    ...,
]

----------------------------------------

TITLE: Implementing Custom HEAD Method in ListView for Django
DESCRIPTION: Shows how to add a custom HEAD method to a ListView to return the last modified date of the most recent book. This is useful for API clients to check for updates without downloading all data.

LANGUAGE: python
CODE:
from django.http import HttpResponse
from django.views.generic import ListView
from books.models import Book


class BookListView(ListView):
    model = Book

    def head(self, *args, **kwargs):
        last_book = self.get_queryset().latest("publication_date")
        response = HttpResponse(
            # RFC 1123 date format.
            headers={
                "Last-Modified": last_book.publication_date.strftime(
                    "%a, %d %b %Y %H:%M:%S GMT"
                )
            },
        )
        return response

----------------------------------------

TITLE: Implementing Async View in Django 3.1
DESCRIPTION: Example of creating an asynchronous view using async/await syntax. Shows basic async view implementation with sleep delay.

LANGUAGE: python
CODE:
async def my_view(request):
    await asyncio.sleep(0.5)
    return HttpResponse("Hello, async world!")

----------------------------------------

TITLE: Django Password Reset Email Template
DESCRIPTION: Sample HTML template for generating password reset emails.

LANGUAGE: html
CODE:
Someone asked for password reset for email {{ email }}. Follow the link below:
{{ protocol}}://{{ domain }}{% url 'password_reset_confirm' uidb64=uid token=token %}

----------------------------------------

TITLE: Using Django TestCase for View Testing
DESCRIPTION: Shows how to use Django's TestCase class for testing views with the test client.

LANGUAGE: python
CODE:
from django.test import TestCase

class SimpleTest(TestCase):
    def setUp(self):
        # Every test needs a client.
        self.client = Client()

    def test_details(self):
        # Issue a GET request.
        response = self.client.get("/customer/details/")

        # Check that the response is 200 OK.
        self.assertEqual(response.status_code, 200)

        # Check that the rendered context contains 5 customers.
        self.assertEqual(len(response.context["customers"]), 5)

----------------------------------------

TITLE: Creating a Test Case for Question Model in Django
DESCRIPTION: This code snippet defines a test case for the Question model's was_published_recently() method. It checks if the method correctly handles questions with future publication dates.

LANGUAGE: Python
CODE:
import datetime

from django.test import TestCase
from django.utils import timezone

from .models import Question


class QuestionModelTests(TestCase):
    def test_was_published_recently_with_future_question(self):
        """
        was_published_recently() returns False for questions whose pub_date
        is in the future.
        """
        time = timezone.now() + datetime.timedelta(days=30)
        future_question = Question(pub_date=time)
        self.assertIs(future_question.was_published_recently(), False)

----------------------------------------

TITLE: Django QuerySet Security Issue - SQL Injection via order_by()
DESCRIPTION: Security vulnerability in QuerySet.order_by() method where unsanitized user input could lead to SQL injection. This affected Django 3.1 through 3.2.4 versions.

LANGUAGE: python
CODE:
QuerySet.order_by()

----------------------------------------

TITLE: Using Callable Initial Values in Django Form Fields
DESCRIPTION: Demonstrates how to use a callable function to set an initial value for a form field in Django.

LANGUAGE: pycon
CODE:
>>> import datetime
>>> class DateForm(forms.Form):
...     day = forms.DateField(initial=datetime.date.today)
...
>>> print(DateForm())
<div><label for="id_day">Day:</label><input type="text" name="day" value="2023-02-11" required id="id_day"></div>

----------------------------------------

TITLE: Ensuring CSRF Token Availability in Django Templates
DESCRIPTION: Illustrates the use of the requires_csrf_token decorator to ensure that the csrf_token template tag works in a view, without rejecting requests that fail CSRF validation.

LANGUAGE: python
CODE:
from django.shortcuts import render
from django.views.decorators.csrf import requires_csrf_token


@requires_csrf_token
def my_view(request):
    c = {}
    # ...
    return render(request, "a_template.html", c)

----------------------------------------

TITLE: Using TemplateResponse in a Django View
DESCRIPTION: Demonstrates how to use TemplateResponse in a Django view to return a rendered template with a context containing a queryset.

LANGUAGE: python
CODE:
from django.template.response import TemplateResponse


def blog_index(request):
    return TemplateResponse(
        request, "entry_list.html", {"entries": Entry.objects.all()}
    )

----------------------------------------

TITLE: Using Custom Search Configuration in Django
DESCRIPTION: Shows how to specify a custom search configuration for SearchVector and SearchQuery.

LANGUAGE: pycon
CODE:
>>> from django.contrib.postgres.search import SearchQuery, SearchVector
>>> Entry.objects.annotate(
...     search=SearchVector("body_text", config="french"),
... ).filter(search=SearchQuery("œuf", config="french"))
[<Entry: Pain perdu>]

----------------------------------------

TITLE: Defining a Car Model with FileField and ImageField in Django
DESCRIPTION: This snippet demonstrates how to create a Django model with FileField and ImageField for storing car information including photos and specifications.

LANGUAGE: python
CODE:
from django.db import models


class Car(models.Model):
    name = models.CharField(max_length=255)
    price = models.DecimalField(max_digits=5, decimal_places=2)
    photo = models.ImageField(upload_to="cars")
    specs = models.FileField(upload_to="specs")

----------------------------------------

TITLE: Defining and Accessing Composite Primary Key in Django Models
DESCRIPTION: Illustrates how to define a composite primary key using CompositePrimaryKey in a Django model and how to access the fields composing the primary key using the pk_fields attribute of the _meta API.

LANGUAGE: python
CODE:
from django.db import models


class TenantUser(models.Model):
    pk = models.CompositePrimaryKey("tenant_id", "id")
    tenant_id = models.IntegerField()
    id = models.IntegerField()

LANGUAGE: pycon
CODE:
>>> TenantUser._meta.pk_fields
[
    <django.db.models.fields.IntegerField: tenant_id>,
    <django.db.models.fields.IntegerField: id>
]

----------------------------------------

TITLE: Creating a ModelFormSet in Django
DESCRIPTION: Shows how to create a formset for working with multiple instances of a model using modelformset_factory.

LANGUAGE: python
CODE:
from django.forms import modelformset_factory
from myapp.models import Author

AuthorFormSet = modelformset_factory(Author, fields=["name", "title"])
formset = AuthorFormSet(queryset=Author.objects.filter(name__startswith="O"))

----------------------------------------

TITLE: Bulk Update of Entries in Django
DESCRIPTION: Demonstrates the use of bulk_update() method to efficiently update multiple Entry objects with a single database query.

LANGUAGE: python
CODE:
entries = Entry.objects.bulk_create([
    Entry(headline="This is a test"),
    Entry(headline="This is only a test"),
])

entries[0].headline = "This is not a test"
entries[1].headline = "This is no longer a test"
Entry.objects.bulk_update(entries, ["headline"])

----------------------------------------

TITLE: Squashing Migrations
DESCRIPTION: Shows how to use the squashmigrations command to combine multiple migrations into one.

LANGUAGE: shell
CODE:
$ ./manage.py squashmigrations myapp 0004
Will squash the following migrations:
 - 0001_initial
 - 0002_some_change
 - 0003_another_change
 - 0004_undo_something
Do you wish to proceed? [y/N] y
Optimizing...
  Optimized from 12 operations to 7 operations.
Created new squashed migration /home/andrew/Programs/DjangoTest/test/migrations/0001_squashed_0004_undo_something.py
  You should commit this migration but leave the old ones in place;
  the new migration will be used for new installs. Once you are sure
  all instances of the codebase have applied the migrations you squashed,
  you can delete them.

----------------------------------------

TITLE: Pagination Template Implementation
DESCRIPTION: HTML template code showing how to implement pagination navigation controls including previous/next links and current page indicators.

LANGUAGE: html
CODE:
{% for contact in page_obj %}
    {# Each "contact" is a Contact model object. #}
    {{ contact.full_name|upper }}<br>
    ...
{% endfor %}

<div class="pagination">
    <span class="step-links">
        {% if page_obj.has_previous %}
            <a href="?page=1">&laquo; first</a>
            <a href="?page={{ page_obj.previous_page_number }}">previous</a>
        {% endif %}

        <span class="current">
            Page {{ page_obj.number }} of {{ page_obj.paginator.num_pages }}.
        </span>

        {% if page_obj.has_next %}
            <a href="?page={{ page_obj.next_page_number }}">next</a>
            <a href="?page={{ page_obj.paginator.num_pages }}">last &raquo;</a>
        {% endif %}
    </span>
</div>

----------------------------------------

TITLE: Configuring Django DetailView URLs
DESCRIPTION: URL configuration for the ArticleDetailView showing how to map a slug-based URL pattern to the view.

LANGUAGE: python
CODE:
from django.urls import path

from article.views import ArticleDetailView

urlpatterns = [
    path("<slug:slug>/", ArticleDetailView.as_view(), name="article-detail"),
]

----------------------------------------

TITLE: Resolving Infinite Loop in Django File Upload Parsing
DESCRIPTION: A fix for a denial-of-service vulnerability in multipart form parsing for file uploads, preventing infinite loops with certain inputs.



----------------------------------------

TITLE: Custom Status Code Response in Django
DESCRIPTION: Example of returning a custom HTTP status code using HttpResponse constructor.

LANGUAGE: python
CODE:
from django.http import HttpResponse


def my_view(request):
    # ...

    # Return a "created" (201) response code.
    return HttpResponse(status=201)

----------------------------------------

TITLE: Updating Multiple Objects in Django
DESCRIPTION: Shows how to use the update() method to efficiently update multiple objects in a single query.

LANGUAGE: python
CODE:
>>> Entry.objects.filter(pub_date__year=2007).update(headline="Everything is the same")

>>> Entry.objects.update(number_of_pingbacks=F("number_of_pingbacks") + 1)

----------------------------------------

TITLE: Custom Display Method for Admin
DESCRIPTION: Shows how to customize the display of model methods in the admin interface using the @admin.display decorator.

LANGUAGE: python
CODE:
from django.contrib import admin


class Question(models.Model):
    @admin.display(
        boolean=True,
        ordering="pub_date",
        description="Published recently?",
    )
    def was_published_recently(self):
        now = timezone.now()
        return now - datetime.timedelta(days=1) <= self.pub_date <= now

----------------------------------------

TITLE: Fixing SQL Injection in GIS Functions on Oracle
DESCRIPTION: Addresses CVE-2020-9402, a potential SQL injection vulnerability via the 'tolerance' parameter in GIS functions and aggregates on Oracle databases.

LANGUAGE: SQL
CODE:
-- No specific code provided, but the fix involves securing the 'tolerance' parameter in GIS functions and aggregates for Oracle databases.

----------------------------------------

TITLE: Creating Custom Widgets for ModelChoiceField in Django
DESCRIPTION: Shows how to create a custom widget for ModelChoiceField to include additional data attributes in the rendered HTML.

LANGUAGE: python
CODE:
from django.db import models


class Topping(models.Model):
    name = models.CharField(max_length=100)
    price = models.DecimalField(decimal_places=2, max_digits=6)

    def __str__(self):
        return self.name


class Pizza(models.Model):
    topping = models.ForeignKey(Topping, on_delete=models.CASCADE)

from django import forms


class ToppingSelect(forms.Select):
    def create_option(
        self, name, value, label, selected, index, subindex=None, attrs=None
    ):
        option = super().create_option(
            name, value, label, selected, index, subindex, attrs
        )
        if value:
            option["attrs"]["data-price"] = value.instance.price
        return option


class PizzaForm(forms.ModelForm):
    class Meta:
        model = Pizza
        fields = ["topping"]
        widgets = {"topping": ToppingSelect}

----------------------------------------

TITLE: Potential SQL Injection in QuerySet Methods (Python/Django)
DESCRIPTION: Describes a security vulnerability (CVE-2022-28346) in Django's QuerySet methods annotate(), aggregate(), and extra(). These methods were susceptible to SQL injection attacks when using crafted dictionaries with dictionary expansion as **kwargs.

LANGUAGE: python
CODE:
QuerySet.annotate()
QuerySet.aggregate()
QuerySet.extra()

----------------------------------------

TITLE: PostgreSQL Connection Settings Example
DESCRIPTION: Example configuration for connecting to PostgreSQL using a service file and password file

LANGUAGE: python
CODE:
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "OPTIONS": {
            "service": "my_service",
            "passfile": ".my_pgpass",
        },
    }
}

LANGUAGE: text
CODE:
[my_service]
host=localhost
user=USER
dbname=NAME
port=5432

LANGUAGE: text
CODE:
localhost:5432:NAME:USER:PASSWORD

----------------------------------------

TITLE: Querying ContentType Model
DESCRIPTION: Example of looking up ContentType for User model and using it to query for specific User instances or access the model class

LANGUAGE: python
CODE:
>>> from django.contrib.contenttypes.models import ContentType
>>> user_type = ContentType.objects.get(app_label="auth", model="user")
>>> user_type
<ContentType: user>
>>> user_type.model_class()
<class 'django.contrib.auth.models.User'>
>>> user_type.get_object_for_this_type(username="Guido")
<User: Guido>

----------------------------------------

TITLE: Defining a Model with Choices
DESCRIPTION: Example of defining a Person model with a shirt_size field using choices.

LANGUAGE: python
CODE:
from django.db import models


class Person(models.Model):
    SHIRT_SIZES = {
        "S": "Small",
        "M": "Medium",
        "L": "Large",
    }
    name = models.CharField(max_length=60)
    shirt_size = models.CharField(max_length=1, choices=SHIRT_SIZES)

----------------------------------------

TITLE: Creating a BlogSitemap Class in Django
DESCRIPTION: This example demonstrates how to create a Sitemap class for a blog application, including methods for items, lastmod, changefreq, and priority.

LANGUAGE: Python
CODE:
from django.contrib.sitemaps import Sitemap
from blog.models import Entry


class BlogSitemap(Sitemap):
    changefreq = "never"
    priority = 0.5

    def items(self):
        return Entry.objects.filter(is_draft=False)

    def lastmod(self, obj):
        return obj.pub_date

----------------------------------------

TITLE: Creating and Querying Related Objects in Django
DESCRIPTION: This snippet shows how to create Reporter and Article objects, and perform various queries on the related objects using the Django ORM.

LANGUAGE: pycon
CODE:
>>> r = Reporter(first_name="John", last_name="Smith", email="john@example.com")
>>> r.save()

>>> r2 = Reporter(first_name="Paul", last_name="Jones", email="paul@example.com")
>>> r2.save()

>>> from datetime import date
>>> a = Article(id=None, headline="This is a test", pub_date=date(2005, 7, 27), reporter=r)
>>> a.save()

>>> a.reporter.id
1

>>> a.reporter
<Reporter: John Smith>

>>> r = a.reporter

>>> new_article = r.article_set.create(
...     headline="John's second story", pub_date=date(2005, 7, 29)
... )
>>> new_article
<Article: John's second story>
>>> new_article.reporter
<Reporter: John Smith>
>>> new_article.reporter.id
1

----------------------------------------

TITLE: Implementing ExclusionConstraint with Custom Range Function in Django
DESCRIPTION: Advanced example of using ExclusionConstraint with a custom TsTzRange function for models defining a range using two separate fields instead of native PostgreSQL range types.

LANGUAGE: python
CODE:
from django.contrib.postgres.constraints import ExclusionConstraint
from django.contrib.postgres.fields import (
    DateTimeRangeField,
    RangeBoundary,
    RangeOperators,
)
from django.db import models
from django.db.models import Func, Q


class TsTzRange(Func):
    function = "TSTZRANGE"
    output_field = DateTimeRangeField()


class Reservation(models.Model):
    room = models.ForeignKey("Room", on_delete=models.CASCADE)
    start = models.DateTimeField()
    end = models.DateTimeField()
    cancelled = models.BooleanField(default=False)

    class Meta:
        constraints = [
            ExclusionConstraint(
                name="exclude_overlapping_reservations",
                expressions=[
                    (
                        TsTzRange("start", "end", RangeBoundary()),
                        RangeOperators.OVERLAPS,
                    ),
                    ("room", RangeOperators.EQUAL),
                ],
                condition=Q(cancelled=False),
            ),
        ]

----------------------------------------

TITLE: Django get_object_or_404() Usage
DESCRIPTION: Example demonstrating the use of get_object_or_404() to retrieve a model instance or raise Http404 if not found.

LANGUAGE: python
CODE:
from django.shortcuts import get_object_or_404


def my_view(request):
    obj = get_object_or_404(MyModel, pk=1)

----------------------------------------

TITLE: Async View Decorator Usage
DESCRIPTION: Demonstration of using Django view decorators with both synchronous and asynchronous views.

LANGUAGE: python
CODE:
from django.views.decorators.cache import never_cache

@never_cache
def my_sync_view(request): ...

@never_cache
async def my_async_view(request): ...

----------------------------------------

TITLE: Async Environment Safety Configuration
DESCRIPTION: Code example showing how to set the DJANGO_ALLOW_ASYNC_UNSAFE environment variable for async operations.

LANGUAGE: python
CODE:
import os

os.environ["DJANGO_ALLOW_ASYNC_UNSAFE"] = "true"

----------------------------------------

TITLE: Executing Custom SQL Directly with Django Database Connection
DESCRIPTION: Shows how to execute custom SQL directly using Django's database connection, including UPDATE and SELECT operations.

LANGUAGE: python
CODE:
from django.db import connection


def my_custom_sql(self):
    with connection.cursor() as cursor:
        cursor.execute("UPDATE bar SET foo = 1 WHERE baz = %s", [self.baz])
        cursor.execute("SELECT foo FROM bar WHERE baz = %s", [self.baz])
        row = cursor.fetchone()

    return row

----------------------------------------

TITLE: Custom Context in DetailView
DESCRIPTION: Example of extending DetailView to add additional context data for templates.

LANGUAGE: python
CODE:
from django.views.generic import DetailView
from books.models import Book, Publisher

class PublisherDetailView(DetailView):
    model = Publisher

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["book_list"] = Book.objects.all()
        return context

----------------------------------------

TITLE: Affected Database Functions in Django 4.0.5
DESCRIPTION: The Trunc() and Extract() database functions were vulnerable to SQL injection when untrusted data was used as kind/lookup_name parameters. This vulnerability is tracked as CVE-2022-34265.

LANGUAGE: python
CODE:
from django.db.models.functions import Trunc, Extract

# Vulnerable usage example (pre-4.0.6)
Trunc(kind=untrusted_input)  # Potential SQL injection
Extract(lookup_name=untrusted_input)  # Potential SQL injection

----------------------------------------

TITLE: Django Template for Time Zone Selection Form
DESCRIPTION: HTML template with a form allowing users to select their preferred time zone.

LANGUAGE: html
CODE:
{% load tz %}
{% get_current_timezone as TIME_ZONE %}
<form action="{% url 'set_timezone' %}" method="POST">
    {% csrf_token %}
    <label for="timezone">Time zone:</label>
    <select name="timezone">
        {% for city, tz in timezones.items %}
        <option value="{{ tz }}"{% if tz == TIME_ZONE %} selected{% endif %}>{{ city }}</option>
        {% endfor %}
    </select>
    <input type="submit" value="Set">
</form>

----------------------------------------

TITLE: Weighting Search Queries in Django
DESCRIPTION: Demonstrates how to assign different weights to search vectors and use custom weight values.

LANGUAGE: pycon
CODE:
>>> from django.contrib.postgres.search import SearchQuery, SearchRank, SearchVector
>>> vector = SearchVector("body_text", weight="A") + SearchVector(
...     "blog__tagline", weight="B"
... )
>>> query = SearchQuery("cheese")
>>> Entry.objects.annotate(rank=SearchRank(vector, query)).filter(rank__gte=0.3).order_by(
...     "rank"
... )

>>> rank = SearchRank(vector, query, weights=[0.2, 0.4, 0.6, 0.8])
>>> Entry.objects.annotate(rank=rank).filter(rank__gte=0.3).order_by("-rank")

----------------------------------------

TITLE: Addressing DoS in IPv6 Validation
DESCRIPTION: Fix for CVE-2024-56374, addressing a potential denial-of-service vulnerability in IPv6 validation.

LANGUAGE: Python
CODE:
Django 5.1 :commit:`(patch) <4806731e58f3e8700a3c802e77899d54ac6021fe>`
Django 5.0 :commit:`(patch) <e8d4a2005955dcf962193600b53bf461b190b455>`
Django 4.2 :commit:`(patch) <ad866a1ca3e7d60da888d25d27e46a8adb2ed36e>`

----------------------------------------

TITLE: Using Initial Values in Django Form Fields
DESCRIPTION: Shows how to set initial values for form fields in Django and demonstrates the rendered output.

LANGUAGE: pycon
CODE:
>>> from django import forms
>>> class CommentForm(forms.Form):
...     name = forms.CharField(initial="Your name")
...     url = forms.URLField(initial="https://")
...     comment = forms.CharField()
...
>>> f = CommentForm(auto_id=False)
>>> print(f)
<div>Name:<input type="text" name="name" value="Your name" required></div>
<div>Url:<input type="url" name="url" value="https://" required></div>
<div>Comment:<input type="text" name="comment" required></div>

----------------------------------------

TITLE: Fixing Web Cache Poisoning in Django Utils HTTP Parser
DESCRIPTION: Security update to django.utils.http.limited_parse_qsl() to prevent web cache poisoning by disabling semicolon as a query parameter separator. This backports the security fix from urllib.parse.parse_qsl.

LANGUAGE: python
CODE:
django.utils.http.limited_parse_qsl()

----------------------------------------

TITLE: Custom Model Method Example
DESCRIPTION: Shows how to define and access custom model methods in Django templates.

LANGUAGE: python
CODE:
class Task(models.Model):
    def foo(self):
        return "bar"

----------------------------------------

TITLE: Setting Custom Exception Reporter Class in Django
DESCRIPTION: Example of specifying a custom error reporter class using the DEFAULT_EXCEPTION_REPORTER setting. This allows for customization of error reports beyond filtering.

LANGUAGE: python
CODE:
DEFAULT_EXCEPTION_REPORTER = "path.to.your.CustomExceptionReporter"

----------------------------------------

TITLE: Creating a Sitemap Index in Django URLconf
DESCRIPTION: This snippet demonstrates how to set up a sitemap index in the Django URLconf, which references individual sitemap files for different sections.

LANGUAGE: Python
CODE:
from django.contrib.sitemaps import views

urlpatterns = [
    path(
        "sitemap.xml",
        views.index,
        {"sitemaps": sitemaps},
        name="django.contrib.sitemaps.views.index",
    ),
    path(
        "sitemap-<section>.xml",
        views.sitemap,
        {"sitemaps": sitemaps},
        name="django.contrib.sitemaps.views.sitemap",
    ),
]

----------------------------------------

TITLE: Using Explicit FieldListFilter Classes in Django ModelAdmin
DESCRIPTION: Demonstrates how to use explicit FieldListFilter classes for more control over filter behavior, including examples of BooleanFieldListFilter, RelatedOnlyFieldListFilter, and EmptyFieldListFilter.

LANGUAGE: python
CODE:
class PersonAdmin(admin.ModelAdmin):
    list_filter = [
        ("is_staff", admin.BooleanFieldListFilter),
    ]

class BookAdmin(admin.ModelAdmin):
    list_filter = [
        ("author", admin.RelatedOnlyFieldListFilter),
    ]

class BookAdmin(admin.ModelAdmin):
    list_filter = [
        ("title", admin.EmptyFieldListFilter),
    ]

----------------------------------------

TITLE: Querying with Trigram Word Similarity in Django
DESCRIPTION: Shows usage of trigram_word_similar lookup to find sentences containing similar words. Measures similarity between parameter and substrings of the field.

LANGUAGE: python
CODE:
>>> Sentence.objects.filter(name__trigram_word_similar="Middlesborough")
['<Sentence: Gumby rides on the path of Middlesbrough>']

----------------------------------------

TITLE: Querying Django One-to-One Relationships
DESCRIPTION: Demonstrates various querying techniques for one-to-one relationships in Django, including forward and reverse lookups, filtering, and accessing related objects across relationships.

LANGUAGE: python
CODE:
>>> Restaurant.objects.get(place=p1)
<Restaurant: Demon Dogs the restaurant>
>>> Restaurant.objects.get(place__pk=1)
<Restaurant: Demon Dogs the restaurant>
>>> Restaurant.objects.filter(place__name__startswith="Demon")
<QuerySet [<Restaurant: Demon Dogs the restaurant>]>
>>> Restaurant.objects.exclude(place__address__contains="Ashland")
<QuerySet [<Restaurant: Demon Dogs the restaurant>]>

----------------------------------------

TITLE: Configuring Django Settings Manually in Python
DESCRIPTION: Example of manually configuring Django settings using the configure() function. Sets the DEBUG setting to True.

LANGUAGE: python
CODE:
from django.conf import settings

settings.configure(DEBUG=True)

----------------------------------------

TITLE: Basic Django System Check Implementation
DESCRIPTION: Example of a basic system check function that demonstrates the core structure. The function accepts app_configs and returns a list of errors.

LANGUAGE: python
CODE:
from django.core.checks import Error, register

@register()
def example_check(app_configs, **kwargs):
    errors = []
    # ... your check logic here
    if check_failed:
        errors.append(
            Error(
                "an error",
                hint="A hint.",
                obj=checked_object,
                id="myapp.E001",
            )
        )
    return errors

----------------------------------------

TITLE: Initializing SimpleArrayField with IntegerField in Django
DESCRIPTION: Demonstrates how to create a form with a SimpleArrayField that accepts a comma-separated list of integers. The example shows form validation and data cleaning.

LANGUAGE: pycon
CODE:
>>> from django import forms
>>> from django.contrib.postgres.forms import SimpleArrayField

>>> class NumberListForm(forms.Form):
...     numbers = SimpleArrayField(forms.IntegerField())
...

>>> form = NumberListForm({"numbers": "1,2,3"})
>>> form.is_valid()
True
>>> form.cleaned_data
{'numbers': [1, 2, 3]}

>>> form = NumberListForm({"numbers": "1,2,a"})
>>> form.is_valid()
False

----------------------------------------

TITLE: Writing a Data Migration
DESCRIPTION: Example of a data migration that combines first_name and last_name fields into a new name field.

LANGUAGE: python
CODE:
from django.db import migrations


def combine_names(apps, schema_editor):
    # We can't import the Person model directly as it may be a newer
    # version than this migration expects. We use the historical version.
    Person = apps.get_model("yourappname", "Person")
    for person in Person.objects.all():
        person.name = f"{person.first_name} {person.last_name}"
        person.save()


class Migration(migrations.Migration):
    dependencies = [
        ("yourappname", "0001_initial"),
    ]

    operations = [
        migrations.RunPython(combine_names),
    ]

----------------------------------------

TITLE: Fixing URLValidator Security Issue in Django 2.2.22
DESCRIPTION: Documentation of security vulnerability CVE-2021-32052 where URLValidator accepted newlines in input on Python 3.9.5+, potentially allowing header injection attacks. The issue specifically affected URLValidator usage outside of form fields, as URLField automatically strips newlines and tabs.

LANGUAGE: python
CODE:
django.core.validators.URLValidator

----------------------------------------

TITLE: Converting URI to IRI using Django's uri_to_iri function
DESCRIPTION: Shows how to use Django's uri_to_iri function to convert a URI back to an IRI, unquoting UTF-8 characters while preserving other percent-encodings.

LANGUAGE: python
CODE:
>>> from django.utils.encoding import uri_to_iri
>>> uri_to_iri("/%E2%99%A5%E2%99%A5/?utf8=%E2%9C%93")
'/♥♥/?utf8=✓'
>>> uri_to_iri("%A9hello%3Fworld")
'%A9hello%3Fworld'

----------------------------------------

TITLE: Direct Session Manipulation in Django
DESCRIPTION: Example of using Django's session API outside of views to manually create and access session data.

LANGUAGE: python
CODE:
from django.contrib.sessions.backends.db import SessionStore
s = SessionStore()
s["last_login"] = 1376587691
s.create()
s.session_key
'2b1189a188b44ad18c35e113ac6ceead'
s = SessionStore(session_key="2b1189a188b44ad18c35e113ac6ceead")
s["last_login"]
1376587691

----------------------------------------

TITLE: Handling Default Data and Validation in Django Forms
DESCRIPTION: Demonstrates how passing default data to a form triggers validation and includes error messages in the output.

LANGUAGE: pycon
CODE:
>>> class CommentForm(forms.Form):
...     name = forms.CharField()
...     url = forms.URLField()
...     comment = forms.CharField()
...
>>> default_data = {"name": "Your name", "url": "https://"}
>>> f = CommentForm(default_data, auto_id=False)
>>> print(f)
<div>Name:
  <input type="text" name="name" value="Your name" required>
</div>
<div>Url:
  <ul class="errorlist"><li>Enter a valid URL.</li></ul>
  <input type="url" name="url" value="https://" required aria-invalid="true">
</div>
<div>Comment:
  <ul class="errorlist"><li>This field is required.</li></ul>
  <input type="text" name="comment" required aria-invalid="true">
</div>

----------------------------------------

TITLE: Addressing SQL Injection in Django QuerySet explain() Method
DESCRIPTION: This snippet shows the QuerySet.explain() method that was vulnerable to SQL injection on PostgreSQL. Updating to Django 4.0.4 is necessary to mitigate this security risk.

LANGUAGE: python
CODE:
QuerySet.explain(**options)

----------------------------------------

TITLE: Using the Asynchronous ORM Interface in Django
DESCRIPTION: Shows how to use Django's new asynchronous ORM interface for data access operations. This allows writing asynchronous code without needing to wrap ORM operations in sync_to_async().

LANGUAGE: Python
CODE:
async for author in Author.objects.filter(name__startswith="A"):
    book = await author.books.afirst()

----------------------------------------

TITLE: Registering Models in Django Admin
DESCRIPTION: Demonstrates how to register a model in Django's admin interface, allowing for easy management of database objects through a web interface.

LANGUAGE: python
CODE:
from django.db import models


class Article(models.Model):
    pub_date = models.DateField()
    headline = models.CharField(max_length=200)
    content = models.TextField()
    reporter = models.ForeignKey(Reporter, on_delete=models.CASCADE)

LANGUAGE: python
CODE:
from django.contrib import admin

from . import models

admin.site.register(models.Article)

----------------------------------------

TITLE: Defining Article Model in Django
DESCRIPTION: Example of defining an Article model with title, publication date, and get_absolute_url method.

LANGUAGE: python
CODE:
from django.db import models
from django.urls import reverse


class Article(models.Model):
    title = models.CharField(max_length=200)
    pub_date = models.DateField()

    def get_absolute_url(self):
        return reverse("article-detail", kwargs={"pk": self.pk})

----------------------------------------

TITLE: Creating a UniqueConstraint with Custom Operator Classes in Django
DESCRIPTION: Demonstrates creating a unique constraint with a custom PostgreSQL operator class. This example uses varchar_pattern_ops for the username field.

LANGUAGE: python
CODE:
UniqueConstraint(
    name="unique_username", fields=["username"], opclasses=["varchar_pattern_ops"]
)

----------------------------------------

TITLE: Implementing Custom Storage Class with Settings in Django
DESCRIPTION: Example of a custom storage class that retrieves configuration from Django settings. Shows how to properly initialize the storage class with optional parameters.

LANGUAGE: python
CODE:
from django.conf import settings
from django.core.files.storage import Storage


class MyStorage(Storage):
    def __init__(self, option=None):
        if not option:
            option = settings.CUSTOM_STORAGE_OPTIONS
        ...

----------------------------------------

TITLE: Using SearchHeadline for Highlighted Search Results in Django
DESCRIPTION: Demonstrates how to use SearchHeadline to get highlighted search results with custom formatting options.

LANGUAGE: pycon
CODE:
>>> from django.contrib.postgres.search import SearchHeadline, SearchQuery
>>> query = SearchQuery("red tomato")
>>> entry = Entry.objects.annotate(
...     headline=SearchHeadline(
...         "body_text",
...         query,
...         start_sel="<span>",
...         stop_sel="</span>",
...     ),
... ).get()
>>> print(entry.headline)
Sandwich with <span>tomato</span> and <span>red</span> cheese.

----------------------------------------

TITLE: Serving Static Files in Development Using URLconf
DESCRIPTION: Configures URLs to serve static files during development by adding a pattern to the URLconf. This should only be used in debug mode.

LANGUAGE: python
CODE:
from django.conf import settings
from django.conf.urls.static import static

urlpatterns = [
    # ... the rest of your URLconf goes here ...
] + static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)

----------------------------------------

TITLE: Implementing a Query Logger in Django
DESCRIPTION: This snippet demonstrates how to create a comprehensive query logger class in Django. It logs SQL queries, their parameters, execution status, duration, and any exceptions that occur during query execution.

LANGUAGE: python
CODE:
import time


class QueryLogger:
    def __init__(self):
        self.queries = []

    def __call__(self, execute, sql, params, many, context):
        current_query = {"sql": sql, "params": params, "many": many}
        start = time.monotonic()
        try:
            result = execute(sql, params, many, context)
        except Exception as e:
            current_query["status"] = "error"
            current_query["exception"] = e
            raise
        else:
            current_query["status"] = "ok"
            return result
        finally:
            duration = time.monotonic() - start
            current_query["duration"] = duration
            self.queries.append(current_query)

from django.db import connection

ql = QueryLogger()
with connection.execute_wrapper(ql):
    do_queries()
# Now we can print the log.
print(ql.queries)

----------------------------------------

TITLE: Paginator Implementation in View Function
DESCRIPTION: Example of using Paginator in a Django view function to paginate a queryset of Contact objects, showing 25 items per page.

LANGUAGE: python
CODE:
from django.core.paginator import Paginator
from django.shortcuts import render

from myapp.models import Contact


def listing(request):
    contact_list = Contact.objects.all()
    paginator = Paginator(contact_list, 25)  # Show 25 contacts per page.

    page_number = request.GET.get("page")
    page_obj = paginator.get_page(page_number)
    return render(request, "list.html", {"page_obj": page_obj})

----------------------------------------

TITLE: Checking filesystem encoding for UTF-8 support
DESCRIPTION: Python code snippet to check if the current filesystem supports UTF-8 encoding for file names, which is important for handling non-ASCII file uploads.

LANGUAGE: python
CODE:
import sys

sys.getfilesystemencoding()

----------------------------------------

TITLE: Testing Management Commands
DESCRIPTION: Shows how to test Django management commands using the call_command function.

LANGUAGE: python
CODE:
from io import StringIO
from django.core.management import call_command
from django.test import TestCase

class ClosepollTest(TestCase):
    def test_command_output(self):
        out = StringIO()
        call_command("closepoll", poll_ids=[1], stdout=out)
        self.assertIn('Successfully closed poll "1"', out.getvalue())

----------------------------------------

TITLE: Implementing a Database Router for Auth and ContentTypes Apps
DESCRIPTION: Example of a Django database router class that directs auth and contenttypes app queries to a specific database.

LANGUAGE: python
CODE:
class AuthRouter:
    route_app_labels = {"auth", "contenttypes"}

    def db_for_read(self, model, **hints):
        if model._meta.app_label in self.route_app_labels:
            return "auth_db"
        return None

    def db_for_write(self, model, **hints):
        if model._meta.app_label in self.route_app_labels:
            return "auth_db"
        return None

    def allow_relation(self, obj1, obj2, **hints):
        if (
            obj1._meta.app_label in self.route_app_labels
            or obj2._meta.app_label in self.route_app_labels
        ):
            return True
        return None

    def allow_migrate(self, db, app_label, model_name=None, **hints):
        if app_label in self.route_app_labels:
            return db == "auth_db"
        return None

----------------------------------------

TITLE: Referencing Django Password Hasher Method
DESCRIPTION: This snippet mentions the new BasePasswordHasher.harden_runtime() method introduced to mitigate timing attacks on password hashing. It's implemented for PBKDF2PasswordHasher and BCryptPasswordHasher to bridge the runtime gap between different work factors.

LANGUAGE: Python
CODE:
BasePasswordHasher.harden_runtime()

----------------------------------------

TITLE: Creating a ForeignKey Relationship with Lazy Loading in Django
DESCRIPTION: Demonstrates how to create a ForeignKey relationship using a string reference to a model that hasn't been defined yet, allowing for circular dependencies.

LANGUAGE: python
CODE:
from django.db import models

class Car(models.Model):
    manufacturer = models.ForeignKey(
        "Manufacturer",
        on_delete=models.CASCADE,
    )

class Manufacturer(models.Model):
    name = models.TextField()
    suppliers = models.ManyToManyField("self", symmetrical=False)

----------------------------------------

TITLE: Configuring Django with Custom Default Settings
DESCRIPTION: Example of configuring Django with custom default settings from a module and overriding a specific setting. Uses the configure() function with a custom defaults module.

LANGUAGE: python
CODE:
from django.conf import settings
from myapp import myapp_defaults

settings.configure(default_settings=myapp_defaults, DEBUG=True)

----------------------------------------

TITLE: Using add() Method with Django RelatedManager
DESCRIPTION: This example demonstrates how to use the add() method to associate an Entry object with a Blog object in a ForeignKey relationship.

LANGUAGE: pycon
CODE:
>>> b = Blog.objects.get(id=1)
>>> e = Entry.objects.get(id=234)
>>> b.entry_set.add(e)  # Associates Entry e with Blog b.

----------------------------------------

TITLE: Addressing QuerySet.bulk_create() Crashes in Django 4.1.4
DESCRIPTION: Fixes two separate issues with QuerySet.bulk_create(): one involving 'pk' in unique_fields and another related to fields with db_column. These fixes ensure more robust bulk creation operations.

LANGUAGE: python
CODE:
# Related to QuerySet.bulk_create() with 'pk' in unique_fields and fields with db_column
# No specific code provided, but involves bulk creation operations

----------------------------------------

TITLE: Creating a Custom TemplateView in Django
DESCRIPTION: Illustrates how to create a custom TemplateView that adds context data for rendering a template.

LANGUAGE: python
CODE:
from django.views.generic.base import TemplateView

from articles.models import Article


class HomePageView(TemplateView):
    template_name = "home.html"

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["latest_articles"] = Article.objects.all()[:5]
        return context

----------------------------------------

TITLE: Implementing TodayArchiveView in Django
DESCRIPTION: Example of creating a custom TodayArchiveView for Articles, including configuration for future dates.

LANGUAGE: python
CODE:
from django.views.generic.dates import TodayArchiveView

from myapp.models import Article


class ArticleTodayArchiveView(TodayArchiveView):
    queryset = Article.objects.all()
    date_field = "pub_date"
    allow_future = True

----------------------------------------

TITLE: Using RandomUUID Function in Django
DESCRIPTION: Demonstrates how to use the RandomUUID function to generate and update database records with version 4 UUIDs. This function is specifically available for PostgreSQL databases through Django's contrib.postgres module.

LANGUAGE: python
CODE:
>>> from django.contrib.postgres.functions import RandomUUID
>>> Article.objects.update(uuid=RandomUUID())

----------------------------------------

TITLE: Creating a UniqueConstraint with Included Fields in Django
DESCRIPTION: Shows how to create a unique constraint with non-key columns included in the covering index. This allows index-only scans for certain queries, improving performance.

LANGUAGE: python
CODE:
UniqueConstraint(name="unique_booking", fields=["room", "date"], include=["full_name"])

----------------------------------------

TITLE: Using SingleObjectMixin in Django Views
DESCRIPTION: The SingleObjectMixin provides functionality for looking up a single object based on model/queryset. It supports lookups via primary key or slug field and includes security features like query_pk_and_slug for preventing insecure direct object references.

LANGUAGE: python
CODE:
from django.views.generic.detail import SingleObjectMixin

class YourView(SingleObjectMixin):
    model = YourModel
    queryset = YourModel.objects.all()
    slug_field = 'slug'
    context_object_name = 'object'

----------------------------------------

TITLE: Using Default Storage in Django
DESCRIPTION: This snippet shows how to use the default storage system in Django to save, read, and delete files.

LANGUAGE: pycon
CODE:
>>> from django.core.files.base import ContentFile
>>> from django.core.files.storage import default_storage

>>> path = default_storage.save("path/to/file", ContentFile(b"new content"))
>>> path
'path/to/file'

>>> default_storage.size(path)
11
>>> default_storage.open(path).read()
b'new content'

>>> default_storage.delete(path)
>>> default_storage.exists(path)
False

----------------------------------------

TITLE: Basic String Translation in Python View
DESCRIPTION: Example of marking a string for translation in a Django view using gettext

LANGUAGE: python
CODE:
from django.http import HttpResponse
from django.utils.translation import gettext as _

def my_view(request):
    output = _("Welcome to my site.")
    return HttpResponse(output)

----------------------------------------

TITLE: Setting Up Django for Standalone Usage
DESCRIPTION: Example of configuring Django settings and calling django.setup() for standalone Django usage. Necessary when using Django components outside of a full Django application.

LANGUAGE: python
CODE:
import django
from django.conf import settings
from myapp import myapp_defaults

settings.configure(default_settings=myapp_defaults, DEBUG=True)
django.setup()

# Now this script or any imported module can use any part of Django it needs.
from myapp import models

----------------------------------------

TITLE: Using RawSQL in Django Annotations and Filters
DESCRIPTION: Demonstrates how to use RawSQL expressions in annotations and filters, with a warning about SQL injection.

LANGUAGE: pycon
CODE:
>>> from django.db.models.expressions import RawSQL
>>> queryset.annotate(val=RawSQL("select col from sometable where othercol = %s", (param,)))
>>> queryset.filter(id__in=RawSQL("select id from sometable where col = %s", (param,)))

----------------------------------------

TITLE: Async/Sync Adapter Function Examples
DESCRIPTION: Examples of using async_to_sync and sync_to_async adapters for function conversion.

LANGUAGE: python
CODE:
from asgiref.sync import async_to_sync, sync_to_async

async def get_data(): ...

sync_get_data = async_to_sync(get_data)

@async_to_sync
async def get_other_data(): ...

async_function = sync_to_async(sync_function, thread_sensitive=False)

@sync_to_async
def sync_function(): ...

----------------------------------------

TITLE: Full-Text Search Using PostgreSQL SearchVector
DESCRIPTION: Shows how to perform full-text search across single and multiple fields using PostgreSQL's search capabilities through Django's contrib.postgres module.

LANGUAGE: python
CODE:
>>> Entry.objects.filter(body_text__search="cheese")
[<Entry: Cheese on Toast recipes>, <Entry: Pizza recipes>]

LANGUAGE: python
CODE:
>>> Entry.objects.annotate(
...     search=SearchVector("blog__tagline", "body_text"),
... ).filter(search="cheese")
[
    <Entry: Cheese on Toast recipes>,
    <Entry: Pizza Recipes>,
    <Entry: Dairy farming in Argentina>,
]

----------------------------------------

TITLE: Security Fix - Dictsort Template Filter Information Disclosure Prevention
DESCRIPTION: Security update addressing CVE-2021-45116 by implementing restricted resolution logic in the dictsort template filter to prevent potential information disclosure and unintended method calls.

LANGUAGE: python
CODE:
dictsort

----------------------------------------

TITLE: Adding SQL Server Support for Length Function in Django
DESCRIPTION: Demonstrates how to add support for a different SQL syntax in a third-party database backend by monkey patching.

LANGUAGE: python
CODE:
from django.db.models.functions import Length


def sqlserver_length(self, compiler, connection):
    return self.as_sql(compiler, connection, function="LEN")


Length.as_sqlserver = sqlserver_length

----------------------------------------

TITLE: Using ogrinspect Command in GeoDjango
DESCRIPTION: The ogrinspect command inspects an OGR-compatible DataSource and outputs a GeoDjango model. It accepts various options to customize the generated model.

LANGUAGE: python
CODE:
django-admin ogrinspect data_source model_name

----------------------------------------

TITLE: Accessing Template Engines Directly
DESCRIPTION: Shows how to access configured template engines directly using the engines object.

LANGUAGE: python
CODE:
from django.template import engines

django_engine = engines["django"]
template = django_engine.from_string("Hello {{ name }}!")

----------------------------------------

TITLE: Modifying Geometry Coordinates
DESCRIPTION: Demonstrates how to modify coordinates of a LineString object.

LANGUAGE: pycon
CODE:
>>> line[0] = (1.0, 1.0)
>>> line.pop()
(0.0, 0.0)
>>> line.append((1.0, 1.0))
>>> line.coords
((1.0, 1.0), (0.0, 50.0), (50.0, 50.0), (50.0, 0.0), (1.0, 1.0))

----------------------------------------

TITLE: Using TrigramDistance for Fuzzy Text Matching in Django
DESCRIPTION: Demonstrates how to use TrigramDistance for fuzzy text matching and ordering results by distance.

LANGUAGE: pycon
CODE:
>>> from django.contrib.postgres.search import TrigramDistance
>>> Author.objects.create(name="Katy Stevens")
>>> Author.objects.create(name="Stephen Keats")
>>> test = "Katie Stephens"
>>> Author.objects.annotate(
...     distance=TrigramDistance("name", test),
... ).filter(
...     distance__lte=0.7
... ).order_by("distance")
[<Author: Katy Stevens>, <Author: Stephen Keats>]

----------------------------------------

TITLE: Handling Async Middleware in Django
DESCRIPTION: Enforces thread sensitivity of MiddlewareMixin.process_request() and process_response() hooks in async contexts.

LANGUAGE: python
CODE:
MiddlewareMixin.process_request()

----------------------------------------

TITLE: Fixing DoS Vulnerability in strip_tags()
DESCRIPTION: Security fix for CVE-2019-14233 addressing slow evaluation of nested incomplete HTML entities in strip_tags() function.

LANGUAGE: python
CODE:
django.utils.html.strip_tags

----------------------------------------

TITLE: Model with Database Comments (Python Django Example)
DESCRIPTION: Example showing how to add comments to database columns and tables using the new db_comment and db_table_comment options in Django models.

LANGUAGE: Python
CODE:
from django.db import models

class Question(models.Model):
    text = models.TextField(db_comment="Poll question")
    pub_date = models.DateTimeField(
        db_comment="Date and time when the question was published",
    )

    class Meta:
        db_table_comment = "Poll questions"


class Answer(models.Model):
    question = models.ForeignKey(
        Question,
        on_delete=models.CASCADE,
        db_comment="Reference to a question",
    )
    answer = models.TextField(db_comment="Question answer")

    class Meta:
        db_table_comment = "Question answers"

----------------------------------------

TITLE: Using Statistical Aggregates in Django with PostgreSQL
DESCRIPTION: Demonstrates the use of statistical aggregate functions RegrCount, RegrAvgX, and RegrAvgY on a TestModel with numeric fields.

LANGUAGE: python
CODE:
>>> TestModel.objects.aggregate(count=RegrCount(y="field3", x="field2"))
{'count': 2}
>>> TestModel.objects.aggregate(
...     avgx=RegrAvgX(y="field3", x="field2"), avgy=RegrAvgY(y="field3", x="field2")
... )
{'avgx': 2, 'avgy': 13}

----------------------------------------

TITLE: Referencing Django GenericIPAddressField in Python
DESCRIPTION: This snippet demonstrates how to reference the GenericIPAddressField class from Django's forms module. It's mentioned in the context of the security update, where this field now has a defined max_length of 39 characters to prevent potential DoS attacks.

LANGUAGE: python
CODE:
django.forms.GenericIPAddressField

----------------------------------------

TITLE: Implementing Custom Template Backend with FooBar Engine in Python
DESCRIPTION: Example implementation of a custom template backend for a fictional 'foobar' template library. Demonstrates extending BaseEngine class with required get_template() and from_string() methods, along with template rendering functionality.

LANGUAGE: python
CODE:
from django.template import TemplateDoesNotExist, TemplateSyntaxError
from django.template.backends.base import BaseEngine
from django.template.backends.utils import csrf_input_lazy, csrf_token_lazy

import foobar


class FooBar(BaseEngine):
    # Name of the subdirectory containing the templates for this engine
    # inside an installed application.
    app_dirname = "foobar"

    def __init__(self, params):
        params = params.copy()
        options = params.pop("OPTIONS").copy()
        super().__init__(params)

        self.engine = foobar.Engine(**options)

    def from_string(self, template_code):
        try:
            return Template(self.engine.from_string(template_code))
        except foobar.TemplateCompilationFailed as exc:
            raise TemplateSyntaxError(exc.args)

    def get_template(self, template_name):
        try:
            return Template(self.engine.get_template(template_name))
        except foobar.TemplateNotFound as exc:
            raise TemplateDoesNotExist(exc.args, backend=self)
        except foobar.TemplateCompilationFailed as exc:
            raise TemplateSyntaxError(exc.args)


class Template:
    def __init__(self, template):
        self.template = template

    def render(self, context=None, request=None):
        if context is None:
            context = {}
        if request is not None:
            context["request"] = request
            context["csrf_input"] = csrf_input_lazy(request)
            context["csrf_token"] = csrf_token_lazy(request)
        return self.template.render(context)

----------------------------------------

TITLE: Using Storages Setting for Dynamic Storage Selection in Django
DESCRIPTION: This snippet demonstrates how to use the STORAGES setting to dynamically select a storage backend for a FileField in a Django model.

LANGUAGE: python
CODE:
from django.core.files.storage import storages


def select_storage():
    return storages["mystorage"]


class MyModel(models.Model):
    upload = models.FileField(storage=select_storage)

----------------------------------------

TITLE: Creating FormSet Class with modelformset_factory
DESCRIPTION: Factory function that creates a FormSet class for handling multiple forms of the same model. Supports configuration for form quantity limits, deletion capabilities, and field customization.

LANGUAGE: python
CODE:
modelformset_factory(model, form=ModelForm, formfield_callback=None, formset=BaseModelFormSet, extra=1, can_delete=False, can_order=False, max_num=None, fields=None, exclude=None, widgets=None, validate_max=False, localized_fields=None, labels=None, help_texts=None, error_messages=None, min_num=None, validate_min=False, field_classes=None, absolute_max=None, can_delete_extra=True, renderer=None, edit_only=False)

----------------------------------------

TITLE: Adding Comments in Django Templates
DESCRIPTION: Demonstrates how to add single-line and multi-line comments in Django templates.

LANGUAGE: html
CODE:
{# this won't be rendered #}

{% comment %}
    Multi-line comment
{% endcomment %}

----------------------------------------

TITLE: Calculating Chairs Needed for Companies in Django
DESCRIPTION: Demonstrates how to use F() expressions in annotations to calculate a derived value.

LANGUAGE: pycon
CODE:
>>> company = (
...     Company.objects.filter(num_employees__gt=F("num_chairs"))
...     .annotate(chairs_needed=F("num_employees") - F("num_chairs"))
...     .first()
... )
>>> company.num_employees
120
>>> company.num_chairs
50
>>> company.chairs_needed
70

----------------------------------------

TITLE: Including Other URLconfs in Django
DESCRIPTION: Demonstrates how to include other URL configuration modules within the main URLconf.

LANGUAGE: Python
CODE:
from django.urls import include, path

urlpatterns = [
    # ... snip ...
    path("community/", include("aggregator.urls")),
    path("contact/", include("contact.urls")),
    # ... snip ...
]

----------------------------------------

TITLE: JSON Response Mixin Implementation
DESCRIPTION: Example of a mixin class that adds JSON response capabilities to Django views.

LANGUAGE: python
CODE:
from django.http import JsonResponse


class JSONResponseMixin:
    """
    A mixin that can be used to render a JSON response.
    """

    def render_to_json_response(self, context, **response_kwargs):
        """
        Returns a JSON response, transforming 'context' to make the payload.
        """
        return JsonResponse(self.get_data(context), **response_kwargs)

    def get_data(self, context):
        """
        Returns an object that will be serialized as JSON by json.dumps().
        """
        # Note: This is *EXTREMELY* naive; in reality, you'll need
        # to do much more complex handling to ensure that arbitrary
        # objects -- such as Django model instances or querysets
        # -- can be serialized as JSON.
        return context

----------------------------------------

TITLE: Using HasKey Lookup in Django ORM
DESCRIPTION: Example of the safe way to use has_key lookup in Django ORM through the __ syntax, which is not affected by the SQL injection vulnerability on Oracle.

LANGUAGE: python
CODE:
# Safe usage of has_key lookup
MyModel.objects.filter(json_field__has_key='some_key')

----------------------------------------

TITLE: Security Fix - Django Template Filters truncatechars_html and truncatewords_html
DESCRIPTION: Fix for CVE-2018-7537 affecting Truncator's chars() and words() methods with html=True parameter, used in truncatechars_html and truncatewords_html template filters. The vulnerability allowed denial-of-service attacks through catastrophic backtracking in regular expressions.

LANGUAGE: python
CODE:
django.utils.text.Truncator.chars(html=True)
django.utils.text.Truncator.words(html=True)

----------------------------------------

TITLE: Annotating Companies with Product Count in Django
DESCRIPTION: Demonstrates two equivalent ways to annotate models with an aggregated value using Count().

LANGUAGE: pycon
CODE:
>>> Company.objects.annotate(num_products=Count("products"))
>>> Company.objects.annotate(num_products=Count(F("products")))

----------------------------------------

TITLE: Bulk Delete for Custom ManyToMany Relationships in Django
DESCRIPTION: Demonstrates using a Q expression with delete() to efficiently remove multiple relationships from a custom ManyToMany through model.

LANGUAGE: python
CODE:
from django.db.models import Q

PizzaToppingRelationship = Pizza.toppings.through
PizzaToppingRelationship.objects.filter(
    Q(pizza=my_pizza, topping=pepperoni)
    | Q(pizza=your_pizza, topping=pepperoni)
    | Q(pizza=your_pizza, topping=mushroom)
).delete()

----------------------------------------

TITLE: Initializing GridForm with Nested SimpleArrayFields in Django
DESCRIPTION: Shows how to create a form with nested SimpleArrayFields to handle multidimensional data. The example uses a pipe delimiter for the outer array and commas for the inner arrays.

LANGUAGE: pycon
CODE:
>>> from django import forms
>>> from django.contrib.postgres.forms import SimpleArrayField

>>> class GridForm(forms.Form):
...     places = SimpleArrayField(SimpleArrayField(IntegerField()), delimiter="|")
...

>>> form = GridForm({"places": "1,2|2,1|4,3"})
>>> form.is_valid()
True
>>> form.cleaned_data
{'places': [[1, 2], [2, 1], [4, 3]]}

----------------------------------------

TITLE: HStoreField Implementation in Django
DESCRIPTION: Example showing how to create and query an HStoreField for storing key-value pairs

LANGUAGE: python
CODE:
from django.contrib.postgres.fields import HStoreField
from django.db import models

class Dog(models.Model):
    name = models.CharField(max_length=200)
    data = HStoreField()

    def __str__(self):
        return self.name

----------------------------------------

TITLE: Accessing Individual Form Fields in Django
DESCRIPTION: Demonstrates how to access individual form fields using dictionary-style lookup.

LANGUAGE: pycon
CODE:
>>> f = ContactForm()
>>> print(f["subject"])
<input id="id_subject" type="text" name="subject" maxlength="100" required>

----------------------------------------

TITLE: Handling Multiple File Uploads in Django Forms
DESCRIPTION: Changes to FileField and ImageField to prevent potential validation bypass when uploading multiple files. ClearableFileInput and FileInput now raise ValueError unless allow_multiple_selected is set to True.

LANGUAGE: python
CODE:
from django.forms import ClearableFileInput, FileInput

# New behavior
file_input = FileInput(attrs={'multiple': True})  # Raises ValueError

# To keep old behavior
file_input = FileInput(attrs={'multiple': True}, allow_multiple_selected=True)

----------------------------------------

TITLE: Resolving Queryset Crash with Nested OuterRef() Annotations
DESCRIPTION: Fixes a regression in Django 4.2 that caused a queryset to crash when filtering against deeply nested OuterRef() annotations.

LANGUAGE: python
CODE:
OuterRef()

----------------------------------------

TITLE: Django Security Fix for File Upload Vulnerability
DESCRIPTION: Security patch addressing directory-traversal vulnerability in MultiPartParser, UploadedFile, and FieldFile components when handling uploaded files with crafted filenames. The fix implements stricter basename and path sanitation.

LANGUAGE: python
CODE:
MultiPartParser, UploadedFile, FieldFile

----------------------------------------

TITLE: Advanced Content Negotiation with Preferred Media Types
DESCRIPTION: This snippet shows an advanced implementation of content negotiation using Django's get_preferred_type method. It handles different media types and returns appropriate responses based on the client's preferences.

LANGUAGE: python
CODE:
class JsonableResponseMixin:
    """
    Mixin to add JSON support to a form.
    Must be used with an object-based FormView (e.g. CreateView).
    """

    accepted_media_types = ["text/html", "application/json"]

    def dispatch(self, request, *args, **kwargs):
        if request.get_preferred_type(self.accepted_media_types) is None:
            # No format in common.
            return HttpResponse(
                status_code=406, headers={"Accept": ",".join(self.accepted_media_types)}
            )

        return super().dispatch(request, *args, **kwargs)

    def form_invalid(self, form):
        response = super().form_invalid(form)
        accepted_type = request.get_preferred_type(self.accepted_media_types)
        if accepted_type == "text/html":
            return response
        elif accepted_type == "application/json":
            return JsonResponse(form.errors, status=400)

    def form_valid(self, form):
        # We make sure to call the parent's form_valid() method because
        # it might do some processing (in the case of CreateView, it will
        # call form.save() for example).
        response = super().form_valid(form)
        accepted_type = request.get_preferred_type(self.accepted_media_types)
        if accepted_type == "text/html":
            return response
        elif accepted_type == "application/json":
            data = {
                "pk": self.object.pk,
            }
            return JsonResponse(data)

----------------------------------------

TITLE: Limiting the Maximum Number of Forms in a Django Formset
DESCRIPTION: Demonstrates how to limit the maximum number of forms in a formset using the max_num parameter.

LANGUAGE: python
CODE:
from django.forms import formset_factory
from myapp.forms import ArticleForm

ArticleFormSet = formset_factory(ArticleForm, extra=2, max_num=1)
formset = ArticleFormSet()

----------------------------------------

TITLE: Retrieving Field Instance by Name in Django Models
DESCRIPTION: Demonstrates how to use the get_field() method of the _meta API to retrieve a field instance by name from a Django model. It shows examples of accessing fields on the model itself and related models.

LANGUAGE: pycon
CODE:
>>> from django.contrib.auth.models import User

# A field on the model
>>> User._meta.get_field("username")
<django.db.models.fields.CharField: username>

# A field from another model that has a relation with the current model
>>> User._meta.get_field("logentry")
<ManyToOneRel: admin.logentry>

# A non existent field
>>> User._meta.get_field("does_not_exist")
Traceback (most recent call last):
    ...
FieldDoesNotExist: User has no field named 'does_not_exist'

----------------------------------------

TITLE: URL Pattern with Regular Expressions in Django
DESCRIPTION: Illustrates how to use regular expressions for more complex URL pattern matching using re_path().

LANGUAGE: Python
CODE:
from django.urls import path, re_path

from . import views

urlpatterns = [
    path("articles/2003/", views.special_case_2003),
    re_path(r"^articles/(?P<year>[0-9]{4})/$", views.year_archive),
    re_path(r"^articles/(?P<year>[0-9]{4})/(?P<month>[0-9]{2})/$", views.month_archive),
    re_path(
        r"^articles/(?P<year>[0-9]{4})/(?P<month>[0-9]{2})/(?P<slug>[\w-]+)/$",
        views.article_detail,
    ),
]

----------------------------------------

TITLE: Using Form Prefixes in Django
DESCRIPTION: Demonstrates how to use form prefixes to namespace multiple forms within a single HTML form.

LANGUAGE: pycon
CODE:
>>> mother = PersonForm(prefix="mother")
>>> father = PersonForm(prefix="father")
>>> print(mother)
<div><label for="id_mother-first_name">First name:</label><input type="text" name="mother-first_name" required id="id_mother-first_name"></div>
<div><label for="id_mother-last_name">Last name:</label><input type="text" name="mother-last_name" required id="id_mother-last_name"></div>
>>> print(father)
<div><label for="id_father-first_name">First name:</label><input type="text" name="father-first_name" required id="id_father-first_name"></div>
<div><label for="id_father-last_name">Last name:</label><input type="text" name="father-last_name" required id="id_father-last_name"></div>

----------------------------------------

TITLE: Django get_list_or_404() Usage
DESCRIPTION: Example showing how to use get_list_or_404() to retrieve a filtered list of objects or raise Http404 if empty.

LANGUAGE: python
CODE:
from django.shortcuts import get_list_or_404


def my_view(request):
    my_objects = get_list_or_404(MyModel, published=True)

----------------------------------------

TITLE: Combining SearchQuery Terms Logically in Django
DESCRIPTION: Demonstrates how to combine SearchQuery terms using logical operators for more complex queries.

LANGUAGE: pycon
CODE:
>>> from django.contrib.postgres.search import SearchQuery
>>> SearchQuery("meat") & SearchQuery("cheese")  # AND
>>> SearchQuery("meat") | SearchQuery("cheese")  # OR
>>> ~SearchQuery("meat")  # NOT

----------------------------------------

TITLE: Admindocs Security Fix - CVE-2021-33203
DESCRIPTION: Security patch addressing potential directory traversal vulnerability in Django's admindocs TemplateDetailView. The fix implements path sanitation to restrict file access to template root directories only.

LANGUAGE: python
CODE:
django.contrib.admindocs.TemplateDetailView

----------------------------------------

TITLE: Reading File Lines in Django UploadedFile
DESCRIPTION: Example showing how to iterate over an uploaded file line by line using Django's universal newline support. Handles Unix (\n), Windows (\r\n), and old Macintosh (\r) line endings.

LANGUAGE: python
CODE:
for line in uploadedfile:
    do_something_with(line)

----------------------------------------

TITLE: Configuring URLconf for Django Flatpages
DESCRIPTION: Example of adding an entry in the URLconf to include flatpages URLs. This allows direct routing to flatpages.

LANGUAGE: python
CODE:
urlpatterns = [
    path("pages/", include("django.contrib.flatpages.urls")),
]

----------------------------------------

TITLE: Creating a B-Tree Index in Django for PostgreSQL
DESCRIPTION: Illustrates the creation of a B-Tree index using the BTreeIndex class. Allows tuning the fill factor and controlling deduplication of items.

LANGUAGE: python
CODE:
BTreeIndex(*expressions, fillfactor=None, deduplicate_items=None, **options)

----------------------------------------

TITLE: DeletionMixin Class Definition in Django
DESCRIPTION: A mixin that provides functionality for handling object deletion through the DELETE HTTP method, including success URL handling and object removal.

LANGUAGE: python
CODE:
class DeletionMixin:
    success_url = None

    def delete(self, request, *args, **kwargs):
        self.object = self.get_object()
        success_url = self.get_success_url()
        self.object.delete()
        return HttpResponseRedirect(success_url)

    def get_success_url(self):
        return self.success_url

----------------------------------------

TITLE: Using GreaterThan in Filters and Annotations in Django
DESCRIPTION: Shows how to use the GreaterThan lookup in both filters and annotations.

LANGUAGE: pycon
CODE:
>>> Company.objects.filter(GreaterThan(F("num_employees"), F("num_chairs")))
>>> Company.objects.annotate(
...     need_chairs=GreaterThan(F("num_employees"), F("num_chairs")),
... )

----------------------------------------

TITLE: Using strip_tags() Securely in Django
DESCRIPTION: Example of proper usage of strip_tags() function, highlighting the security consideration that results must be escaped before being marked as safe. The function now has a recursive call limit to prevent DoS attacks.

LANGUAGE: python
CODE:
from django.utils.html import strip_tags, escape

# Never do this:
# mark_safe(strip_tags(user_input))

# Do this instead:
mark_safe(escape(strip_tags(user_input)))

----------------------------------------

TITLE: Fixing Regular Expression Denial-of-Service in Django Text Truncation
DESCRIPTION: Addresses a security vulnerability (CVE-2024-27351) in django.utils.text.Truncator.words() method and truncatewords_html template filter. The fix prevents potential attacks using crafted strings.

LANGUAGE: python
CODE:
django.utils.text.Truncator.words()

----------------------------------------

TITLE: Django QuerySet Values List Bug Fix
DESCRIPTION: Fix for regression in QuerySet.values_list() with named=True parameter after prefetch_related() operation.

LANGUAGE: python
CODE:
QuerySet.values_list(..., named=True)

----------------------------------------

TITLE: Django 2.0 URL Routing Example
DESCRIPTION: Demonstrates the new simplified URL routing syntax using path() compared to the old regular expression based syntax.

LANGUAGE: Python
CODE:
url(r"^articles/(?P<year>[0-9]{4})/$", views.year_archive)\n\n# New syntax\npath("articles/<int:year>/", views.year_archive)

----------------------------------------

TITLE: Querying GeoIP2 for Country and City Information in Python
DESCRIPTION: Demonstrates how to use the GeoIP2 object to retrieve country and city information for IP addresses and domain names. Shows various query methods and their return formats.

LANGUAGE: python
CODE:
>>> from django.contrib.gis.geoip2 import GeoIP2
>>> g = GeoIP2()
>>> g.country("google.com")
{'continent_code': 'NA',
 'continent_name': 'North America',
 'country_code': 'US',
 'country_name': 'United States',
 'is_in_european_union': False}
>>> g.city("72.14.207.99")
{'accuracy_radius': 1000,
 'city': 'Mountain View',
 'continent_code': 'NA',
 'continent_name': 'North America',
 'country_code': 'US',
 'country_name': 'United States',
 'is_in_european_union': False,
 'latitude': 37.419200897216797,
 'longitude': -122.05740356445312,
 'metro_code': 807,
 'postal_code': '94043',
 'region_code': 'CA',
 'region_name': 'California',
 'time_zone': 'America/Los_Angeles',
 'dma_code': 807,
 'region': 'CA'}
>>> g.lat_lon("salon.com")
(39.0437, -77.4875)
>>> g.lon_lat("uh.edu")
(-95.4342, 29.834)
>>> g.geos("24.124.1.80").wkt
'POINT (-97 38)'

----------------------------------------

TITLE: Adding Ordering to a Django Formset
DESCRIPTION: Demonstrates how to add ordering capability to a formset.

LANGUAGE: python
CODE:
from django.forms import formset_factory
from myapp.forms import ArticleForm

ArticleFormSet = formset_factory(ArticleForm, can_order=True)
formset = ArticleFormSet(initial=[
    {"title": "Article #1", "pub_date": datetime.date(2008, 5, 10)},
    {"title": "Article #2", "pub_date": datetime.date(2008, 5, 11)},
])

----------------------------------------

TITLE: Multiple Site Article Model with ManyToManyField
DESCRIPTION: Model implementation that allows articles to be associated with multiple sites using a ManyToManyField relationship to the Site model.

LANGUAGE: python
CODE:
from django.contrib.sites.models import Site
from django.db import models


class Article(models.Model):
    headline = models.CharField(max_length=200)
    # ...
    sites = models.ManyToManyField(Site)

----------------------------------------

TITLE: Renaming the Default Manager in Django Models
DESCRIPTION: This snippet demonstrates how to rename the default 'objects' manager in a Django model to 'people'. It shows how to define a custom attribute of type models.Manager() to replace the default manager name.

LANGUAGE: python
CODE:
from django.db import models


class Person(models.Model):
    # ...
    people = models.Manager()

----------------------------------------

TITLE: Required FileUploadHandler Methods Implementation
DESCRIPTION: Example showing the required methods that must be implemented when creating a custom file upload handler in Django. Includes receive_data_chunk for handling data chunks and file_complete for finalizing the upload.

LANGUAGE: python
CODE:
def receive_data_chunk(raw_data, start):
    # Handle chunk of upload data
    pass

def file_complete(file_size):
    # Return an UploadedFile object
    pass

----------------------------------------

TITLE: Customizing Django Test Discovery
DESCRIPTION: This snippet demonstrates how to customize test discovery in Django by specifying a directory or using a custom filename pattern for test files.

LANGUAGE: Shell
CODE:
$ ./manage.py test animals/

$ ./manage.py test --pattern="tests_*.py"

----------------------------------------

TITLE: Using ArrayAgg Aggregate in Django with PostgreSQL
DESCRIPTION: Demonstrates how to use the ArrayAgg aggregate function to concatenate field values into an array. This example shows the basic usage with the 'somefield' of SomeModel.

LANGUAGE: python
CODE:
>>> SomeModel.objects.aggregate(arr=ArrayAgg("somefield"))
{'arr': [0, 1, 2]}

----------------------------------------

TITLE: Recording User Interest with SingleObjectMixin and View
DESCRIPTION: Example showing how to combine SingleObjectMixin with View to record a user's interest in an author via POST requests.

LANGUAGE: python
CODE:
from django.http import HttpResponseForbidden, HttpResponseRedirect
from django.urls import reverse
from django.views import View
from django.views.generic.detail import SingleObjectMixin
from books.models import Author


class RecordInterestView(SingleObjectMixin, View):
    """Records the current user's interest in an author."""

    model = Author

    def post(self, request, *args, **kwargs):
        if not request.user.is_authenticated:
            return HttpResponseForbidden()

        # Look up the author we're interested in.
        self.object = self.get_object()
        # Actually record interest somehow here!

        return HttpResponseRedirect(
            reverse("author-detail", kwargs={"pk": self.object.pk})
        )

----------------------------------------

TITLE: Memory Exhaustion Fix in Django Number Formatting
DESCRIPTION: Security patch addressing CVE-2019-6975 where django.utils.numberformat.format() could cause memory exhaustion when handling Decimal numbers with large digits or exponents. The fix implements scientific notation for decimals exceeding 200 digits. This affects contrib.admin and template filters like floatformat, filesizeformat, and intcomma.

LANGUAGE: python
CODE:
django.utils.numberformat.format()

----------------------------------------

TITLE: Using OpClass with ExclusionConstraint in Django
DESCRIPTION: Demonstrates how to use the OpClass expression to specify a custom operator class for constraint expressions in an ExclusionConstraint.

LANGUAGE: python
CODE:
expressions = [
    (OpClass("circle", name="circle_ops"), RangeOperators.OVERLAPS),
]

----------------------------------------

TITLE: Sending Multipart HTML Email in Django
DESCRIPTION: Example of sending an HTML/plain text multipart email using EmailMultiAlternatives with template rendering

LANGUAGE: python
CODE:
from django.core.mail import EmailMultiAlternatives
from django.template.loader import render_to_string

text_content = render_to_string(
    "templates/emails/my_email.txt",
    context={"my_variable": 42},
)

html_content = render_to_string(
    "templates/emails/my_email.html",
    context={"my_variable": 42},
)

msg = EmailMultiAlternatives(
    "Subject here",
    text_content,
    "from@example.com",
    ["to@example.com"],
    headers={"List-Unsubscribe": "<mailto:unsub@example.com>"},
)

msg.attach_alternative(html_content, "text/html")
msg.send()

----------------------------------------

TITLE: Creating Custom Collation in Django Migration
DESCRIPTION: Example of creating a custom collation for German phone book ordering in PostgreSQL using Django migrations. Shows how to create a case-insensitive collation using the ICU provider.

LANGUAGE: python
CODE:
from django.contrib.postgres.operations import CreateCollation


class Migration(migrations.Migration):
    ...

    operations = [
        CreateCollation(
            "case_insensitive",
            provider="icu",
            locale="und-u-ks-level2",
            deterministic=False,
        ),
        ...,
    ]

----------------------------------------

TITLE: Using Django Base Form Renderer
DESCRIPTION: The base class for Django form renderers that defines core attributes and methods for template rendering. Includes default template names and methods for template handling.

LANGUAGE: python
CODE:
class BaseRenderer:
    form_template_name = "django/forms/div.html"
    formset_template_name = "django/forms/formsets/div.html"
    field_template_name = "django/forms/field.html"
    bound_field_class = BoundField

    def get_template(template_name):
        # Subclasses must implement this method
        pass

    def render(template_name, context, request=None):
        # Renders template or raises TemplateDoesNotExist
        pass

----------------------------------------

TITLE: Safe JSON Field Querying in Django
DESCRIPTION: Demonstrates the safe way to use JSON field has_key lookups to avoid SQL injection vulnerabilities on Oracle databases. Shows the preferred method using the __ syntax.

LANGUAGE: python
CODE:
# Don't use HasKey directly
# Model.objects.filter(HasKey('field', 'key'))  # Vulnerable on Oracle

# Use this syntax instead
Model.objects.filter(field__has_key='key')  # Safe on all databases

----------------------------------------

TITLE: Security Fix: Storage.save() Directory Traversal Protection
DESCRIPTION: Fix for CVE-2021-45452 preventing directory traversal attacks through Storage.save() when handling crafted file names.

LANGUAGE: python
CODE:
Storage.save()

----------------------------------------

TITLE: Fixing Data Loss in Caching from Async Code
DESCRIPTION: Resolves a bug (ticket #31253) that could lead to data loss when using caching from asynchronous code.

LANGUAGE: Python
CODE:
# No specific code provided, but the fix involves improving caching behavior in asynchronous contexts.

----------------------------------------

TITLE: Basic ListView Implementation
DESCRIPTION: Simple implementation of a ListView for displaying publishers, including view definition and URL configuration.

LANGUAGE: python
CODE:
# views.py
from django.views.generic import ListView
from books.models import Publisher

class PublisherListView(ListView):
    model = Publisher

# urls.py
from django.urls import path
from books.views import PublisherListView

urlpatterns = [
    path("publishers/", PublisherListView.as_view()),
]

----------------------------------------

TITLE: Iterating Over Geometry Coordinates
DESCRIPTION: Demonstrates how to iterate over coordinates in a Point object.

LANGUAGE: pycon
CODE:
>>> pnt = Point(5, 23)
>>> [coord for coord in pnt]
[5.0, 23.0]

----------------------------------------

TITLE: Using a Django Formset in a View
DESCRIPTION: Demonstrates how to use a formset in a Django view and template.

LANGUAGE: python
CODE:
from django.forms import formset_factory
from django.shortcuts import render
from myapp.forms import ArticleForm

def manage_articles(request):
    ArticleFormSet = formset_factory(ArticleForm)
    if request.method == "POST":
        formset = ArticleFormSet(request.POST, request.FILES)
        if formset.is_valid():
            # do something with the formset.cleaned_data
            pass
    else:
        formset = ArticleFormSet()
    return render(request, "manage_articles.html", {"formset": formset})

LANGUAGE: html+django
CODE:
<form method="post">
    {{ formset.management_form }}
    <table>
        {{ formset }}
    </table>
</form>

----------------------------------------

TITLE: Implementing AuthorUpdateView using Django's UpdateView
DESCRIPTION: Example of creating an AuthorUpdateView class using Django's UpdateView, specifying the model, fields, and custom template name suffix.

LANGUAGE: python
CODE:
from django.views.generic.edit import UpdateView
from myapp.models import Author


class AuthorUpdateView(UpdateView):
    model = Author
    fields = ["name"]
    template_name_suffix = "_update_form"

----------------------------------------

TITLE: Implementing Pagination in Django ListView
DESCRIPTION: Shows how to implement pagination in a Django ListView by setting the paginate_by attribute. Creates a paginated list of Contact model objects.

LANGUAGE: python
CODE:
from django.views.generic import ListView

from myapp.models import Contact


class ContactListView(ListView):
    paginate_by = 2
    model = Contact

----------------------------------------

TITLE: Using BoolAnd and BoolOr Aggregates in Django with PostgreSQL
DESCRIPTION: Shows how to use BoolAnd and BoolOr aggregate functions with a Comment model. BoolAnd returns True if all values are true, while BoolOr returns True if at least one value is true.

LANGUAGE: python
CODE:
>>> from django.db.models import Q
>>> from django.contrib.postgres.aggregates import BoolAnd
>>> Comment.objects.aggregate(booland=BoolAnd("published"))
{'booland': False}
>>> Comment.objects.aggregate(booland=BoolAnd(Q(rank__lt=100)))
{'booland': True}

>>> from django.contrib.postgres.aggregates import BoolOr
>>> Comment.objects.aggregate(boolor=BoolOr("published"))
{'boolor': True}
>>> Comment.objects.aggregate(boolor=BoolOr(Q(rank__gt=2)))
{'boolor': False}

----------------------------------------

TITLE: Defining and Sending Custom Signals
DESCRIPTION: Shows how to define a custom signal and send it from within a class method, both synchronously and asynchronously.

LANGUAGE: Python
CODE:
import django.dispatch

pizza_done = django.dispatch.Signal()

class PizzaStore:
    ...

    def send_pizza(self, toppings, size):
        pizza_done.send(sender=self.__class__, toppings=toppings, size=size)
        ...

    async def asend_pizza(self, toppings, size):
        await pizza_done.asend(sender=self.__class__, toppings=toppings, size=size)
        ...

----------------------------------------

TITLE: Re-rendering TemplateResponse Content in Python
DESCRIPTION: Demonstrates how to force re-rendering of TemplateResponse content by reassigning the rendered_content to the content attribute.

LANGUAGE: python
CODE:
# Set up a rendered TemplateResponse
>>> from django.template.response import TemplateResponse
>>> t = TemplateResponse(request, "original.html", {})
>>> t.render()
>>> print(t.content)
Original content

# Re-rendering doesn't change content
>>> t.template_name = "new.html"
>>> t.render()
>>> print(t.content)
Original content

# Assigning content does change, no render() call required
>>> t.content = t.rendered_content
>>> print(t.content)
New content

----------------------------------------

TITLE: Fixing Session Flushing in Django's cached_db Backend
DESCRIPTION: This snippet describes a security issue in Django 1.8's cached_db session backend where session.flush() incorrectly sets the session key to an empty string instead of None, potentially allowing session reuse.

LANGUAGE: Python
CODE:
session.flush()

----------------------------------------

TITLE: Configuring GISModelAdmin Class in GeoDjango
DESCRIPTION: The GISModelAdmin class provides geographic data handling capabilities in Django's admin interface. It includes configuration for geometry field widgets and their parameters. The class contains two main attributes: gis_widget for specifying the widget class, and gis_widget_kwargs for passing additional arguments to the widget.

LANGUAGE: python
CODE:
class GISModelAdmin:
    gis_widget = OSMWidget  # Defaults to OSMWidget
    gis_widget_kwargs = {}  # Defaults to empty dictionary

----------------------------------------

TITLE: Using StringAgg Aggregate in Django with PostgreSQL
DESCRIPTION: Shows how to use StringAgg to concatenate string values from related models. This example aggregates publication titles for an article, ordered alphabetically.

LANGUAGE: python
CODE:
>>> article = Article.objects.create(headline="NASA uses Python")
>>> article.publications.create(title="The Python Journal")
<Publication: Publication object (1)>
>>> article.publications.create(title="Science News")
<Publication: Publication object (2)>
>>> from django.contrib.postgres.aggregates import StringAgg
>>> Article.objects.annotate(
...     publication_names=StringAgg(
...         "publications__title",
...         delimiter=", ",
...         order_by="publications__title",
...     )
... ).values("headline", "publication_names")
<QuerySet [{
    'headline': 'NASA uses Python', 'publication_names': 'Science News, The Python Journal'
}]>

----------------------------------------

TITLE: Creating a Bloom Index in Django for PostgreSQL
DESCRIPTION: Demonstrates how to create a Bloom index using the BloomIndex class. Requires the bloom extension to be activated on PostgreSQL. Allows specifying the length of each index entry and the number of bits for up to 32 columns.

LANGUAGE: python
CODE:
BloomIndex(*expressions, length=None, columns=(), **options)

----------------------------------------

TITLE: Custom MultiEmailField Implementation
DESCRIPTION: Custom form field implementation that validates comma-separated email addresses using to_python() and validate() methods.

LANGUAGE: python
CODE:
class MultiEmailField(forms.Field):
    def to_python(self, value):
        """Normalize data to a list of strings."""
        # Return an empty list if no input was given.
        if not value:
            return []
        return value.split(",")

    def validate(self, value):
        """Check if value consists only of valid emails."""
        # Use the parent's handling of required fields, etc.
        super().validate(value)
        for email in value:
            validate_email(email)

----------------------------------------

TITLE: Debug Template Tag Security Fix in Django
DESCRIPTION: Security patch for the {% debug %} template tag to prevent XSS attacks by ensuring proper context encoding and restricting output based on DEBUG setting.

LANGUAGE: django
CODE:
{% debug %}

----------------------------------------

TITLE: Fixing File Upload Directory Permissions in Django 3.1.1
DESCRIPTION: Addresses CVE-2020-24583 where FILE_UPLOAD_DIRECTORY_PERMISSIONS were not correctly applied to intermediate-level directories on Python 3.7+.

LANGUAGE: python
CODE:
FILE_UPLOAD_DIRECTORY_PERMISSIONS

----------------------------------------

TITLE: Security Fix: UserAttributeSimilarityValidator DoS Protection
DESCRIPTION: Fix for CVE-2021-45115 where UserAttributeSimilarityValidator was vulnerable to DoS attacks through artificially large password submissions. The fix implements length restrictions on comparison values.

LANGUAGE: python
CODE:
UserAttributeSimilarityValidator

----------------------------------------

TITLE: Fixing ArrayAgg and StringAgg with Filter in Subquery (Python/Django)
DESCRIPTION: Resolves a regression in Django 2.2 that caused ArrayAgg and StringAgg aggregates with filter argument to crash when used in a Subquery.

LANGUAGE: Python
CODE:
from django.contrib.postgres.aggregates import ArrayAgg, StringAgg
from django.db.models import Subquery

----------------------------------------

TITLE: Implementing Help Text in Django Form Fields
DESCRIPTION: Shows how to add help text to form fields in Django and demonstrates the rendered output.

LANGUAGE: pycon
CODE:
>>> from django import forms
>>> class HelpTextContactForm(forms.Form):
...     subject = forms.CharField(max_length=100, help_text="100 characters max.")
...     message = forms.CharField()
...     sender = forms.EmailField(help_text="A valid email address, please.")
...     cc_myself = forms.BooleanField(required=False)
...
>>> f = HelpTextContactForm(auto_id=False)
>>> print(f)
<div>Subject:<div class="helptext">100 characters max.</div><input type="text" name="subject" maxlength="100" required></div>
<div>Message:<input type="text" name="message" required></div>
<div>Sender:<div class="helptext">A valid email address, please.</div><input type="email" name="sender" required></div>
<div>Cc myself:<input type="checkbox" name="cc_myself"></div>

----------------------------------------

TITLE: Applying Admin Theme
DESCRIPTION: Example of customizing admin colors using CSS variables

LANGUAGE: HTML
CODE:
{% extends 'admin/base.html' %}

{% block extrastyle %}{{ block.super }}
<style>
html[data-theme="light"], :root {
  --primary: #9774d5;
  --secondary: #785cab;
  --link-fg: #7c449b;
  --link-selected-fg: #8f5bb2;
}
</style>
{% endblock %}

----------------------------------------

TITLE: Defining Custom ModelForm Fields in Django
DESCRIPTION: Demonstrates how to override default form fields and add custom validation to a ModelForm.

LANGUAGE: python
CODE:
from django.forms import ModelForm, Textarea
from myapp.models import Author

class AuthorForm(ModelForm):
    class Meta:
        model = Author
        fields = ["name", "title", "birth_date"]
        widgets = {
            "name": Textarea(attrs={"cols": 80, "rows": 20}),
        }

    def clean_name(self):
        # custom validation for the name field
        ...

----------------------------------------

TITLE: Set-like Operations on Geometries
DESCRIPTION: Shows set-like operations (union, intersection, difference, symmetric difference) on LineString objects.

LANGUAGE: pycon
CODE:
>>> from django.contrib.gis.geos import LineString
>>> ls1 = LineString((0, 0), (2, 2))
>>> ls2 = LineString((1, 1), (3, 3))
>>> print(ls1 | ls2)  # equivalent to `ls1.union(ls2)`
MULTILINESTRING ((0 0, 1 1), (1 1, 2 2), (2 2, 3 3))
>>> print(ls1 & ls2)  # equivalent to `ls1.intersection(ls2)`
LINESTRING (1 1, 2 2)
>>> print(ls1 - ls2)  # equivalent to `ls1.difference(ls2)`
LINESTRING(0 0, 1 1)
>>> print(ls1 ^ ls2)  # equivalent to `ls1.sym_difference(ls2)`
MULTILINESTRING ((0 0, 1 1), (2 2, 3 3))

----------------------------------------

TITLE: Creating a Custom Migration Serializer
DESCRIPTION: Example of how to create a custom serializer for the Decimal type in migrations.

LANGUAGE: python
CODE:
from decimal import Decimal

from django.db.migrations.serializer import BaseSerializer
from django.db.migrations.writer import MigrationWriter


class DecimalSerializer(BaseSerializer):
    def serialize(self):
        return repr(self.value), {"from decimal import Decimal"}


MigrationWriter.register_serializer(Decimal, DecimalSerializer)

----------------------------------------

TITLE: Implementing GeoDjango Feed Class
DESCRIPTION: Example showing different ways to implement geometry methods in a GeoDjango Feed subclass. The class can define geometry and item_geometry as class attributes or methods with varying parameter configurations.

LANGUAGE: python
CODE:
from django.contrib.gis.feeds import Feed


class MyFeed(Feed):
    # First, as a class attribute.
    geometry = ...
    item_geometry = ...

    # Also a function with no arguments
    def geometry(self): ...

    def item_geometry(self): ...

    # And as a function with a single argument
    def geometry(self, obj): ...

    def item_geometry(self, item): ...

----------------------------------------

TITLE: Custom ModelAdmin for Multiple Database Support
DESCRIPTION: Example of a custom ModelAdmin class that provides support for multiple databases in Django's admin interface.

LANGUAGE: python
CODE:
class MultiDBModelAdmin(admin.ModelAdmin):
    using = "other"

    def save_model(self, request, obj, form, change):
        obj.save(using=self.using)

    def delete_model(self, request, obj):
        obj.delete(using=self.using)

    def get_queryset(self, request):
        return super().get_queryset(request).using(self.using)

    def formfield_for_foreignkey(self, db_field, request, **kwargs):
        return super().formfield_for_foreignkey(
            db_field, request, using=self.using, **kwargs
        )

    def formfield_for_manytomany(self, db_field, request, **kwargs):
        return super().formfield_for_manytomany(
            db_field, request, using=self.using, **kwargs
        )

----------------------------------------

TITLE: Configuring URLconf for TemplateView in Django
DESCRIPTION: Demonstrates how to use a TemplateView directly in the URLconf by passing attributes to the as_view() method. This example sets the template_name for an 'about' page.

LANGUAGE: python
CODE:
from django.urls import path
from django.views.generic import TemplateView

urlpatterns = [
    path("about/", TemplateView.as_view(template_name="about.html")),
]

----------------------------------------

TITLE: Custom DateSelectorWidget Implementation
DESCRIPTION: Example of a custom MultiWidget subclass that displays a date with separate select boxes for day, month, and year.

LANGUAGE: python
CODE:
from datetime import date
from django import forms

class DateSelectorWidget(forms.MultiWidget):
    def __init__(self, attrs=None):
        days = {day: day for day in range(1, 32)}
        months = {month: month for month in range(1, 13)}
        years = {year: year for year in [2018, 2019, 2020]}
        widgets = [
            forms.Select(attrs=attrs, choices=days),
            forms.Select(attrs=attrs, choices=months),
            forms.Select(attrs=attrs, choices=years),
        ]
        super().__init__(widgets, attrs)

    def decompress(self, value):
        if isinstance(value, date):
            return [value.day, value.month, value.year]
        elif isinstance(value, str):
            year, month, day = value.split("-")
            return [day, month, year]
        return [None, None, None]

    def value_from_datadict(self, data, files, name):
        day, month, year = super().value_from_datadict(data, files, name)
        return "{}-{}-{}".format(year, month, day)

----------------------------------------

TITLE: Referencing Django MultiPartParser Security Issue
DESCRIPTION: Code reference showing the MultiPartParser component that was vulnerable to directory traversal attacks through maliciously crafted filenames. The security issue was fixed in Django 2.2.20.

LANGUAGE: text
CODE:
MultiPartParser

----------------------------------------

TITLE: Initializing and Converting Distance Objects in Django GIS
DESCRIPTION: Demonstrates creating Distance objects using different units and performing unit conversions. Shows usage of both Distance class and its D alias.

LANGUAGE: python
CODE:
>>> from django.contrib.gis.measure import D, Distance
>>> d1 = Distance(km=5)
>>> print(d1)
5.0 km
>>> d2 = D(mi=5)  # `D` is an alias for `Distance`
>>> print(d2)
5.0 mi

----------------------------------------

TITLE: Django XML Serialization Format
DESCRIPTION: Example of the XML format used by Django's serialization framework to represent model objects.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="utf-8"?>
<django-objects version="1.0">
    <object pk="123" model="sessions.session">
        <field type="DateTimeField" name="expire_date">2013-01-16T08:16:59.844560+00:00</field>
    </object>
</django-objects>

----------------------------------------

TITLE: Simple Custom Filter Example
DESCRIPTION: Demonstrates creating a basic custom filter that removes values from a string

LANGUAGE: python
CODE:
def cut(value, arg):
    """Removes all values of arg from the given string"""
    return value.replace(arg, "")

----------------------------------------

TITLE: Creating MultiLineString Objects
DESCRIPTION: Demonstrates creating MultiLineString objects from LineString objects.

LANGUAGE: pycon
CODE:
>>> ls1 = LineString((0, 0), (1, 1))
>>> ls2 = LineString((2, 2), (3, 3))
>>> mls = MultiLineString(ls1, ls2)
>>> mls = MultiLineString([ls1, ls2])

----------------------------------------

TITLE: Fixing SQL Injection in StringAgg Aggregation (Python/Django)
DESCRIPTION: Addresses the CVE-2020-7471 vulnerability in the StringAgg aggregation function, which was susceptible to SQL injection attacks through a crafted delimiter.

LANGUAGE: Python
CODE:
from django.contrib.postgres.aggregates import StringAgg

----------------------------------------

TITLE: SQL Injection Fix for GIS Oracle Functions
DESCRIPTION: Security patch addressing CVE-2020-9402 where GIS functions and aggregates on Oracle were vulnerable to SQL injection through the tolerance parameter.



----------------------------------------

TITLE: Using Enumeration Types in Templates (Python/Django)
DESCRIPTION: Adds support for using TextChoices, IntegerChoices, and Choices enumeration types in Django templates.

LANGUAGE: Python
CODE:
from django.db.models import TextChoices, IntegerChoices, Choices

----------------------------------------

TITLE: Creating and Saving Geometry Models in Django
DESCRIPTION: Examples of creating and saving models with geometry fields using both raw polygon strings and GEOSGeometry objects. Shows coordinate system transformation handling.

LANGUAGE: python
CODE:
>>> from zipcode.models import Zipcode
>>> z = Zipcode(code=77096, poly="POLYGON(( 10 10, 10 20, 20 20, 20 15, 10 10))")
>>> z.save()

>>> from django.contrib.gis.geos import GEOSGeometry
>>> poly = GEOSGeometry("POLYGON(( 10 10, 10 20, 20 20, 20 15, 10 10))")
>>> z = Zipcode(code=77096, poly=poly)
>>> z.save()

----------------------------------------

TITLE: Using Migration Hints in RunPython Operation
DESCRIPTION: This example demonstrates how to use hints in a RunPython operation to target specific databases for migration execution.

LANGUAGE: python
CODE:
from django.db import migrations


def forwards(apps, schema_editor):
    # Your migration code goes here
    ...


class Migration(migrations.Migration):
    dependencies = [
        # Dependencies to other migrations
    ]

    operations = [
        migrations.RunPython(forwards, hints={"target_db": "default"}),
    ]

----------------------------------------

TITLE: Creating an Inline FormSet in Django
DESCRIPTION: Shows how to create an inline formset for related models using inlineformset_factory.

LANGUAGE: python
CODE:
from django.forms import inlineformset_factory
from myapp.models import Author, Book

BookFormSet = inlineformset_factory(Author, Book, fields=["title"])
author = Author.objects.get(name="Mike Royko")
formset = BookFormSet(instance=author)

----------------------------------------

TITLE: Combining SearchVector Objects in Django
DESCRIPTION: Demonstrates how to combine multiple SearchVector objects for more complex search queries.

LANGUAGE: pycon
CODE:
>>> Entry.objects.annotate(
...     search=SearchVector("body_text") + SearchVector("blog__tagline"),
... ).filter(search="Cheese")
[<Entry: Cheese on Toast recipes>, <Entry: Pizza Recipes>]

----------------------------------------

TITLE: Configuring Custom Format Files in Django Settings
DESCRIPTION: Shows how to set the FORMAT_MODULE_PATH setting to specify the location of custom format files for localization in Django.

LANGUAGE: python
CODE:
FORMAT_MODULE_PATH = [
    "mysite.formats",
    "some_app.formats",
]

----------------------------------------

TITLE: Generic Foreign Key Implementation
DESCRIPTION: Example implementation of a TaggedItem model using GenericForeignKey to create generic relationships with any model

LANGUAGE: python
CODE:
from django.contrib.contenttypes.fields import GenericForeignKey
from django.contrib.contenttypes.models import ContentType
from django.db import models

class TaggedItem(models.Model):
    tag = models.SlugField()
    content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE)
    object_id = models.PositiveBigIntegerField()
    content_object = GenericForeignKey("content_type", "object_id")

    def __str__(self):
        return self.tag

    class Meta:
        indexes = [
            models.Index(fields=["content_type", "object_id"]),
        ]

----------------------------------------

TITLE: Declaring Tablespaces for Tables and Indexes in Django Models
DESCRIPTION: This code snippet demonstrates how to specify tablespaces for tables, indexes, and many-to-many relationships in a Django model. It shows the use of db_tablespace options for fields, indexes, and the model's Meta class.

LANGUAGE: python
CODE:
class TablespaceExample(models.Model):
    name = models.CharField(max_length=30, db_index=True, db_tablespace="indexes")
    data = models.CharField(max_length=255, db_index=True)
    shortcut = models.CharField(max_length=7)
    edges = models.ManyToManyField(to="self", db_tablespace="indexes")

    class Meta:
        db_tablespace = "tables"
        indexes = [models.Index(fields=["shortcut"], db_tablespace="other_indexes")]

----------------------------------------

TITLE: Using SQL AS Clause with Django's raw() Method
DESCRIPTION: Shows how to use SQL's AS clause to map fields in a raw query to model fields when using Django's raw() method.

LANGUAGE: python
CODE:
>>> Person.objects.raw(
...     """
...     SELECT first AS first_name,
...            last AS last_name,
...            bd AS birth_date,
...            pk AS id,
...     FROM some_other_table
...     """
... )

----------------------------------------

TITLE: Fixing Memory Exhaustion in Django Number Formatting
DESCRIPTION: The vulnerability in django.utils.numberformat.format() could lead to significant memory usage when formatting Decimal numbers with a large number of digits or a large exponent. The fix implements scientific notation for decimals with more than 200 digits.

LANGUAGE: Python
CODE:
django.utils.numberformat.format()

----------------------------------------

TITLE: Reverse Generic Relations
DESCRIPTION: Example of implementing reverse generic relationships using GenericRelation

LANGUAGE: python
CODE:
from django.contrib.contenttypes.fields import GenericRelation
from django.db import models

class Bookmark(models.Model):
    url = models.URLField()
    tags = GenericRelation(TaggedItem)


----------------------------------------

TITLE: Cloning Django's Development Branch with Git
DESCRIPTION: This Git command clones the main development branch of Django from GitHub. It's used when installing the development version of Django for contributing or testing cutting-edge features.

LANGUAGE: bash
CODE:
$ git clone https://github.com/django/django.git

----------------------------------------

TITLE: Implementing Efficient AbsoluteValueLessThan Lookup in Django
DESCRIPTION: Creates an optimized implementation of abs__lt lookup using range comparison for better index usage.

LANGUAGE: python
CODE:
from django.db.models import Lookup

class AbsoluteValueLessThan(Lookup):
    lookup_name = "lt"

    def as_sql(self, compiler, connection):
        lhs, lhs_params = compiler.compile(self.lhs.lhs)
        rhs, rhs_params = self.process_rhs(compiler, connection)
        params = lhs_params + rhs_params + lhs_params + rhs_params
        return "%s < %s AND %s > -%s" % (lhs, rhs, lhs, rhs), params

AbsoluteValue.register_lookup(AbsoluteValueLessThan)

----------------------------------------

TITLE: Creating Polygon Objects
DESCRIPTION: Demonstrates creating Polygon objects with exterior and interior rings.

LANGUAGE: pycon
CODE:
>>> ext_coords = ((0, 0), (0, 1), (1, 1), (1, 0), (0, 0))
>>> int_coords = ((0.4, 0.4), (0.4, 0.6), (0.6, 0.6), (0.6, 0.4), (0.4, 0.4))
>>> poly = Polygon(ext_coords, int_coords)
>>> poly = Polygon(LinearRing(ext_coords), LinearRing(int_coords))

----------------------------------------

TITLE: SQL Injection Vulnerability in QuerySet.explain() on PostgreSQL (Python/Django)
DESCRIPTION: Details a security issue (CVE-2022-28347) in Django's QuerySet.explain() method when used with PostgreSQL. The method was vulnerable to SQL injection in option names when using a crafted dictionary with dictionary expansion as the **options argument.

LANGUAGE: python
CODE:
QuerySet.explain(**options)

----------------------------------------

TITLE: Validating Safe URLs in Django
DESCRIPTION: Introduces a new utility function 'is_safe_url' in django.utils.http for validating user-supplied redirect targets. This function checks if a URL is relative or matches a supplied hostname to prevent redirects to arbitrary third-party sites.

LANGUAGE: python
CODE:
from django.utils.http import is_safe_url

# Usage example (not provided in the original text)
url = "http://example.com/some/path"
hostname = "example.com"
is_safe = is_safe_url(url, hostname)

----------------------------------------

TITLE: Security Fix - Django Template Filters urlize and urlizetrunc
DESCRIPTION: Fix for CVE-2018-7536 affecting django.utils.html.urlize() function used in urlize and urlizetrunc template filters. The vulnerability allowed denial-of-service attacks through catastrophic backtracking in regular expressions. The fix replaces problematic regex with safer parsing logic.

LANGUAGE: python
CODE:
django.utils.html.urlize()

----------------------------------------

TITLE: Using Django Aggregation Functions
DESCRIPTION: This snippet shows the usage of Django's aggregation functions Avg, StdDev, and Variance, which had a regression in Django 2.2 when used with the filter argument.

LANGUAGE: python
CODE:
from django.db.models import Avg, StdDev, Variance

# Example usage
Avg('field_name', filter=some_filter)
StdDev('field_name', filter=some_filter)
Variance('field_name', filter=some_filter)

----------------------------------------

TITLE: Configuring Django Static Files Storage Backend for S3
DESCRIPTION: Example configuration for setting up a custom S3 storage backend in Django's STORAGES setting to handle static files deployment to Amazon S3.

LANGUAGE: python
CODE:
STORAGES = {
    # ...
    "staticfiles": {"BACKEND": "myproject.storage.S3Storage"}
}

----------------------------------------

TITLE: Using Custom Coalesce Expression in Django
DESCRIPTION: Demonstrates how to use the custom Coalesce expression in a queryset annotation.

LANGUAGE: pycon
CODE:
>>> from django.db.models import F, Value, CharField
>>> qs = Company.objects.annotate(
...     tagline=Coalesce(
...         [F("motto"), F("ticker_name"), F("description"), Value("No Tagline")],
...         output_field=CharField(),
...     )
... )
>>> for c in qs:
...     print("%s: %s" % (c.name, c.tagline))
...
Google: Do No Evil
Apple: AAPL
Yahoo: Internet Company
Django Software Foundation: No Tagline

----------------------------------------

TITLE: Defining Static Media for a Django Widget
DESCRIPTION: Example of creating a CalendarWidget with static CSS and JavaScript asset definitions using an inner Media class.

LANGUAGE: python
CODE:
from django import forms

class CalendarWidget(forms.TextInput):
    class Media:
        css = {
            "all": ["pretty.css"],
        }
        js = ["animations.js", "actions.js"]

----------------------------------------

TITLE: GeoDjango Test Settings Configuration
DESCRIPTION: Example Django settings configuration for running GeoDjango tests with PostGIS backend.

LANGUAGE: python
CODE:
DATABASES = {
    "default": {
        "ENGINE": "django.contrib.gis.db.backends.postgis",
        "NAME": "geodjango",
        "USER": "geodjango",
    },
    "other": {
        "ENGINE": "django.contrib.gis.db.backends.postgis",
        "NAME": "other",
        "USER": "geodjango",
    },
}

SECRET_KEY = "django_tests_secret_key"

----------------------------------------

TITLE: Deployment Check Implementation
DESCRIPTION: Example of implementing and testing a deployment-specific check that verifies analytics settings

LANGUAGE: python
CODE:
from django.conf import settings
from django.core.checks import Warning, register


@register("myapp", deploy=True)
def check_enable_analytics_is_true_on_deploy(app_configs, **kwargs):
    errors = []
    if getattr(settings, "ENABLE_ANALYTICS", None) is not True:
        errors.append(
            Warning(
                "The ENABLE_ANALYTICS setting should be set to True in deployment.",
                id="myapp.W001",
            )
        )
    return errors

----------------------------------------

TITLE: Defining List Filters Using Field Names in Django ModelAdmin
DESCRIPTION: Demonstrates how to use simple field names and related field lookups to create list filters in a Django ModelAdmin class.

LANGUAGE: python
CODE:
class PersonAdmin(admin.ModelAdmin):
    list_filter = ["is_staff", "company"]

class PersonAdmin(admin.UserAdmin):
    list_filter = ["company__name"]

----------------------------------------

TITLE: Applying CSRF Exemption to a Django View Function
DESCRIPTION: Demonstrates how to use the csrf_exempt decorator to mark a view as exempt from CSRF protection. This allows the view to be accessed without CSRF validation.

LANGUAGE: python
CODE:
from django.http import HttpResponse
from django.views.decorators.csrf import csrf_exempt


@csrf_exempt
def my_view(request):
    return HttpResponse("Hello world")

----------------------------------------

TITLE: Checking Django Settings Configuration Status
DESCRIPTION: Example of checking if Django settings have been configured and configuring them if not. Uses the settings.configured property.

LANGUAGE: python
CODE:
from django.conf import settings

if not settings.configured:
    settings.configure(myapp_defaults, DEBUG=True)

----------------------------------------

TITLE: Referencing Django Security and Bug Fixes
DESCRIPTION: Core Django components and methods mentioned in security fixes and bugfixes, including django.utils.html.urlize(), PasswordResetForm, Window(), Prefetch(), Model.save(), and FileSystemStorage.

LANGUAGE: python
CODE:
django.utils.html.urlize()
django.contrib.auth.forms.PasswordResetForm
Window(order_by=[])
Prefetch()
Model.save()
Model.asave()
django.core.files.storage.FileSystemStorage
FieldCacheMixin.get_cache_name()
init_connection_state

----------------------------------------

TITLE: Referencing DEBUG setting in Django configuration
DESCRIPTION: This snippet shows the Django configuration setting that, when set to True, enables the debug page where the security vulnerability was found. It's emphasized that this should not be enabled in production environments.

LANGUAGE: python
CODE:
DEBUG = True

----------------------------------------

TITLE: Creating a Custom Admin Action in Python for Django
DESCRIPTION: This snippet demonstrates how to create a custom admin action 'make_published' that updates the status of selected articles to 'published'.

LANGUAGE: python
CODE:
from django.contrib import admin

@admin.action(description="Mark selected stories as published")
def make_published(modeladmin, request, queryset):
    queryset.update(status="p")

----------------------------------------

TITLE: Initializing Django Paginator with Custom Error Messages
DESCRIPTION: This snippet demonstrates how to create a Paginator instance with custom error messages. It shows the default behavior and then a custom implementation.

LANGUAGE: python
CODE:
>>> from django.core.paginator import Paginator
>>> paginator = Paginator([1, 2, 3], 2)
>>> paginator.page(5)
Traceback (most recent call last):
  ...
EmptyPage: That page contains no results

LANGUAGE: python
CODE:
>>> paginator = Paginator(
...     [1, 2, 3],
...     2,
...     error_messages={"no_results": "Page does not exist"},
... )
>>> paginator.page(5)
Traceback (most recent call last):
  ...
EmptyPage: Page does not exist

----------------------------------------

TITLE: Custom Header Remote User Middleware Implementation
DESCRIPTION: Example of creating a custom middleware class that extends RemoteUserMiddleware to use a different HTTP header instead of REMOTE_USER.

LANGUAGE: python
CODE:
from django.contrib.auth.middleware import RemoteUserMiddleware


class CustomHeaderRemoteUserMiddleware(RemoteUserMiddleware):
    header = "HTTP_AUTHUSER"

----------------------------------------

TITLE: Performing Distance Queries in Django
DESCRIPTION: Examples of performing distance-based spatial queries using various distance units and measurement types.

LANGUAGE: python
CODE:
>>> from django.contrib.gis.geos import GEOSGeometry
>>> from django.contrib.gis.measure import D
>>> from geoapp.models import SouthTexasCity
>>> pnt = GEOSGeometry("POINT(-96.876369 29.905320)", srid=4326)
>>> qs = SouthTexasCity.objects.filter(point__distance_lte=(pnt, 7000))
>>> qs = SouthTexasCity.objects.filter(point__distance_lte=(pnt, D(km=7)))
>>> qs = SouthTexasCity.objects.filter(point__distance_gte=(pnt, D(mi=20)))
>>> qs = SouthTexasCity.objects.filter(point__distance_gte=(pnt, D(chain=100)))

----------------------------------------

TITLE: Fixing Potential DoS Vulnerability in Django's uri_to_iri() Function
DESCRIPTION: Addresses CVE-2023-41164, a potential denial of service vulnerability in django.utils.encoding.uri_to_iri(). The function was susceptible to attacks via inputs with a large number of Unicode characters.

LANGUAGE: python
CODE:
django.utils.encoding.uri_to_iri()

----------------------------------------

TITLE: Rendering Exception Information in Django Template
DESCRIPTION: This snippet renders the main exception information, including type, value, and location. It uses Django template tags to conditionally display available data and format it appropriately.

LANGUAGE: django
CODE:
{% firstof exception_type 'Report' %}{% if request %} at {{ request.path_info }}{% endif %}
{% firstof exception_value 'No exception message supplied' %}
{% if request %}
Request Method: {{ request.META.REQUEST_METHOD }}
Request URL: {{ request_insecure_uri }}{% endif %}
Django Version: {{ django_version_info }}
Python Executable: {{ sys_executable }}
Python Version: {{ sys_version_info }}
Python Path: {{ sys_path }}
Server time: {{server_time|date:"r"}}
Installed Applications:
{{ settings.INSTALLED_APPS|pprint }}
Installed Middleware:
{{ settings.MIDDLEWARE|pprint }}

----------------------------------------

TITLE: Query Values List Operations Fix - Python/Django
DESCRIPTION: Fix for combining annotated values_list() querysets with union(), difference(), or intersection() operations.

LANGUAGE: python
CODE:
values_list()
union()
difference()
intersection()

----------------------------------------

TITLE: Implementing Custom Logging Filter in Django
DESCRIPTION: This snippet demonstrates how to create a custom logging filter in Django to exclude specific exceptions, such as UnreadablePostError, from admin emails.

LANGUAGE: python
CODE:
from django.http import UnreadablePostError


def skip_unreadable_post(record):
    if record.exc_info:
        exc_type, exc_value = record.exc_info[:2]
        if isinstance(exc_value, UnreadablePostError):
            return False
    return True

LOGGING = {
    # ...
    "filters": {
        "skip_unreadable_posts": {
            "()": "django.utils.log.CallbackFilter",
            "callback": skip_unreadable_post,
        },
    },
    "handlers": {
        "mail_admins": {
            "level": "ERROR",
            "filters": ["skip_unreadable_posts"],
            "class": "django.utils.log.AdminEmailHandler",
        },
    },
    # ...
}

----------------------------------------

TITLE: Configuring Ignorable 404 URLs in Django
DESCRIPTION: Example of setting up IGNORABLE_404_URLS to exclude certain URLs from 404 error reporting. This snippet demonstrates how to ignore requests for common files like favicon.ico and robots.txt.

LANGUAGE: python
CODE:
import re

IGNORABLE_404_URLS = [
    re.compile(r"^/apple-touch-icon.*\.png$"),
    re.compile(r"^/favicon\.ico$"),
    re.compile(r"^/robots\.txt$"),
]

----------------------------------------

TITLE: Defining Media for Multiple Output Types
DESCRIPTION: Shows how to specify different CSS files for different output media types using the Media class.

LANGUAGE: python
CODE:
class Media:
    css = {
        "screen": ["pretty.css"],
        "print": ["newspaper.css"],
    }

----------------------------------------

TITLE: Creating FormSet Class with formset_factory in Django
DESCRIPTION: The formset_factory function returns a FormSet class for a given form class. It allows customization of various parameters such as extra forms, ordering, deletion, and validation constraints.

LANGUAGE: python
CODE:
formset_factory(form, formset=BaseFormSet, extra=1, can_order=False, can_delete=False, max_num=None, validate_max=False, min_num=None, validate_min=False, absolute_max=None, can_delete_extra=True, renderer=None)

----------------------------------------

TITLE: Signing Complex Data Structures
DESCRIPTION: Shows how to sign and verify complex Python objects like dictionaries using sign_object() and unsign_object() methods.

LANGUAGE: python
CODE:
>>> signed_obj = signer.sign_object({"message": "Hello!"})
>>> signed_obj
'eyJtZXNzYWdlIjoiSGVsbG8hIn0:bzb48DBkB-bwLaCnUVB75r5VAPUEpzWJPrTb80JMIXM'
>>> obj = signer.unsign_object(signed_obj)
>>> obj
{'message': 'Hello!'}

----------------------------------------

TITLE: Custom Static Files Config with Ignore Patterns
DESCRIPTION: Custom AppConfig class that overrides the default ignored file patterns for staticfiles collection.

LANGUAGE: Python
CODE:
from django.contrib.staticfiles.apps import StaticFilesConfig

class MyStaticFilesConfig(StaticFilesConfig):
    ignore_patterns = [...]  # your custom ignore list

----------------------------------------

TITLE: Using Django Functions in Jinja2 Templates
DESCRIPTION: Demonstrates how to use Django-specific functions like static and url in Jinja2 templates after configuring the custom environment.

LANGUAGE: html
CODE:
<img src="{{ static('path/to/company-logo.png') }}" alt="Company Logo">

<a href="{{ url('admin:index') }}">Administration</a>

----------------------------------------

TITLE: Making GET Requests with Query Parameters
DESCRIPTION: Illustrates how to make GET requests with query parameters using the Django test client.

LANGUAGE: python
CODE:
>>> c = Client()
>>> c.get("/customers/details/", query_params={"name": "fred", "age": 7})

----------------------------------------

TITLE: Safe URL Validation Reference in Django
DESCRIPTION: Reference to Django's URL validation function that was improved to handle malformed URLs. The function is used in authentication views, comments system, and i18n redirects.

LANGUAGE: python
CODE:
django.utils.http.is_safe_url()

----------------------------------------

TITLE: Creating a Default Flatpage Template in Django
DESCRIPTION: Sample HTML template for rendering flatpages. This template uses the flatpage context variable to display the title and content.

LANGUAGE: html
CODE:
<!DOCTYPE html>
<html lang="en">
<head>
<title>{{ flatpage.title }}</title>
</head>
<body>
{{ flatpage.content }}
</body>
</html>

----------------------------------------

TITLE: Configuring Jinja2 Environment for Django
DESCRIPTION: Provides an example of how to create a custom Jinja2 environment with Django-specific functions and filters.

LANGUAGE: python
CODE:
from django.templatetags.static import static
from django.urls import reverse

from jinja2 import Environment


def environment(**options):
    env = Environment(**options)
    env.globals.update(
        {
            "static": static,
            "url": reverse,
        }
    )
    return env

----------------------------------------

TITLE: Directory Structure for Django Management Commands
DESCRIPTION: Example file structure showing required directories and files for implementing custom Django management commands

LANGUAGE: text
CODE:
polls/
    __init__.py
    models.py
    management/
        __init__.py
        commands/
            __init__.py
            _private.py
            closepoll.py
    tests.py
    views.py

----------------------------------------

TITLE: Configuring MonthArchiveView URLs in Django
DESCRIPTION: Example of setting up URL patterns for a custom MonthArchiveView, including numeric and string-based month formats.

LANGUAGE: python
CODE:
from django.urls import path

from myapp.views import ArticleMonthArchiveView

urlpatterns = [
    # Example: /2012/08/
    path(
        "<int:year>/<int:month>/",
        ArticleMonthArchiveView.as_view(month_format="%m"),
        name="archive_month_numeric",
    ),
    # Example: /2012/aug/
    path(
        "<int:year>/<str:month>/",
        ArticleMonthArchiveView.as_view(),
        name="archive_month",
    ),
]

----------------------------------------

TITLE: Fixing UnicodeEncodeError in uWSGI
DESCRIPTION: An INI configuration snippet to fix UnicodeEncodeError when uploading files with non-ASCII filenames in uWSGI.

LANGUAGE: ini
CODE:
env = LANG=en_US.UTF-8

----------------------------------------

TITLE: Authentication Form Security Fix Reference - Python/Django
DESCRIPTION: Reference to the AuthenticationForm class path affected by CVE-2018-6188 security vulnerability

LANGUAGE: python
CODE:
django.contrib.auth.forms.AuthenticationForm

----------------------------------------

TITLE: Displaying Template Error Information in Django
DESCRIPTION: This section of the template focuses on rendering detailed information about template-related errors. It shows the template name, line number, and surrounding code context to help pinpoint the issue.

LANGUAGE: django
CODE:
{% if template_info %}
Template error:
In template {{ template_info.name }}, error at line {{ template_info.line }}
   {{ template_info.message }}
{% for source_line in template_info.source_lines %}{% if source_line.0 == template_info.line %}   {{ source_line.0 }} : {{ template_info.before }} {{ template_info.during }} {{ template_info.after }}{% else %}   {{ source_line.0 }} : {{ source_line.1 }}{% endif %}{% endfor %}{% endif %}

----------------------------------------

TITLE: Filtering with Exists() Annotation Fix - Python/Django
DESCRIPTION: Fix for a crash when using Exists() annotation on a queryset containing a single field.

LANGUAGE: python
CODE:
Exists()

----------------------------------------

TITLE: Defining MonthMixin in Django
DESCRIPTION: MonthMixin is a class that provides functionality for retrieving and parsing the month component of a date. It includes methods for getting the month format, retrieving the month, and navigating to next and previous months.

LANGUAGE: python
CODE:
class MonthMixin:
    month_format = '%b'
    month = None

    def get_month_format(self):
        return self.month_format

    def get_month(self):
        # Implementation details omitted
        pass

    def get_next_month(self, date):
        # Implementation details omitted
        pass

    def get_previous_month(self, date):
        # Implementation details omitted
        pass

----------------------------------------

TITLE: Retrieving All Field Instances of a Django Model
DESCRIPTION: Shows how to use the get_fields() method of the _meta API to retrieve all field instances associated with a Django model. It demonstrates the usage of include_parents and include_hidden parameters to control which fields are returned.

LANGUAGE: pycon
CODE:
>>> from django.contrib.auth.models import User
>>> User._meta.get_fields()
(<ManyToOneRel: admin.logentry>,
 <django.db.models.fields.AutoField: id>,
 <django.db.models.fields.CharField: password>,
 <django.db.models.fields.DateTimeField: last_login>,
 <django.db.models.fields.BooleanField: is_superuser>,
 <django.db.models.fields.CharField: username>,
 <django.db.models.fields.CharField: first_name>,
 <django.db.models.fields.CharField: last_name>,
 <django.db.models.fields.EmailField: email>,
 <django.db.models.fields.BooleanField: is_staff>,
 <django.db.models.fields.BooleanField: is_active>,
 <django.db.models.fields.DateTimeField: date_joined>,
 <django.db.models.fields.related.ManyToManyField: groups>,
 <django.db.models.fields.related.ManyToManyField: user_permissions>)

# Also include hidden fields.
>>> User._meta.get_fields(include_hidden=True)
(<ManyToOneRel: auth.user_groups>,
 <ManyToOneRel: auth.user_user_permissions>,
 <ManyToOneRel: admin.logentry>,
 <django.db.models.fields.AutoField: id>,
 <django.db.models.fields.CharField: password>,
 <django.db.models.fields.DateTimeField: last_login>,
 <django.db.models.fields.BooleanField: is_superuser>,
 <django.db.models.fields.CharField: username>,
 <django.db.models.fields.CharField: first_name>,
 <django.db.models.fields.CharField: last_name>,
 <django.db.models.fields.EmailField: email>,
 <django.db.models.fields.BooleanField: is_staff>,
 <django.db.models.fields.BooleanField: is_active>,
 <django.db.models.fields.DateTimeField: date_joined>,
 <django.db.models.fields.related.ManyToManyField: groups>,
 <django.db.models.fields.related.ManyToManyField: user_permissions>)

----------------------------------------

TITLE: Using Script Objects for JavaScript Assets
DESCRIPTION: Demonstrates how to use Script objects to define JavaScript assets with custom HTML attributes.

LANGUAGE: python
CODE:
class Media:
    js = [
        Script(
            "https://cdn.example.com/something.min.js",
            **{
                "crossorigin": "anonymous",
                "async": True,
            },
        ),
    ]

----------------------------------------

TITLE: Creating Unbound Form Instance in Django
DESCRIPTION: Demonstrates how to create an unbound Form instance in Django by instantiating the form class without any data.

LANGUAGE: pycon
CODE:
>>> f = ContactForm()

----------------------------------------

TITLE: Overriding Admin Templates
DESCRIPTION: Example of overriding the admin change_form.html template to add a custom link

LANGUAGE: HTML
CODE:
{% extends "admin/change_form.html" %}
{% load i18n admin_urls %}
{% block object-tools-items %}
    <li>
        <a href="{% url opts|admin_urlname:'history' original.pk|admin_urlquote %}" class="historylink">{% translate "History" %}</a>
    </li>
    <li>
        <a href="mylink/" class="historylink">My Link</a>
    </li>
    {% if has_absolute_url %}
        <li>
            <a href="{% url 'admin:view_on_site' content_type_id original.pk %}" class="viewsitelink">{% translate "View on site" %}</a>
        </li>
    {% endif %}
{% endblock %}

----------------------------------------

TITLE: Exempting Views from X-Frame-Options Header
DESCRIPTION: Demonstrates how to use the xframe_options_exempt decorator to allow specific views to be loaded in frames by excluding them from the X-Frame-Options header.

LANGUAGE: python
CODE:
from django.http import HttpResponse
from django.views.decorators.clickjacking import xframe_options_exempt


@xframe_options_exempt
def ok_to_load_in_a_frame(request):
    return HttpResponse("This page is safe to load in a frame on any site.")

----------------------------------------

TITLE: Using render_to_string() for Template Rendering
DESCRIPTION: Demonstrates how to use the render_to_string() function to load and render a template with context data.

LANGUAGE: python
CODE:
from django.template.loader import render_to_string

rendered = render_to_string("my_template.html", {"foo": "bar"})

----------------------------------------

TITLE: Custom String Representation
DESCRIPTION: Example showing how to implement custom string representation for a model

LANGUAGE: python
CODE:
from django.db import models

class Person(models.Model):
    first_name = models.CharField(max_length=50)
    last_name = models.CharField(max_length=50)

    def __str__(self):
        return f"{self.first_name} {self.last_name}"

----------------------------------------

TITLE: Using querystring Template Tag in Django 5.1
DESCRIPTION: Demonstrates the improvement in URL query parameter handling using the new querystring template tag compared to the old manual approach

LANGUAGE: html
CODE:
<a href="?{% for key, values in request.GET.iterlists %}
  {% if key != "page" %}
    {% for value in values %}
      {{ key }}={{ value }}&amp;
    {% endfor %}
  {% endif %}
{% endfor %}page={{ page.next_page_number }}">Next page</a>

LANGUAGE: html
CODE:
<a href="{% querystring page=page.next_page_number %}">Next page</a>

----------------------------------------

TITLE: Vulnerable Function Reference - Django URI to IRI Conversion
DESCRIPTION: Reference to the vulnerable django.utils.encoding.uri_to_iri() function that was susceptible to DoS attacks when processing inputs with large numbers of Unicode characters.

LANGUAGE: python
CODE:
django.utils.encoding.uri_to_iri()

----------------------------------------

TITLE: Setting X-Frame-Options Per View with Decorators
DESCRIPTION: Shows how to use xframe_options_deny and xframe_options_sameorigin decorators to control frame loading permissions for individual views.

LANGUAGE: python
CODE:
from django.http import HttpResponse
from django.views.decorators.clickjacking import xframe_options_deny
from django.views.decorators.clickjacking import xframe_options_sameorigin


@xframe_options_deny
def view_one(request):
    return HttpResponse("I won't display in any frame!")


@xframe_options_sameorigin
def view_two(request):
    return HttpResponse("Display in a frame if it's from the same origin as me.")

----------------------------------------

TITLE: Generic Relations Usage
DESCRIPTION: Example of using generic relations to create and query relationships between models

LANGUAGE: python
CODE:
>>> from django.contrib.auth.models import User
>>> guido = User.objects.get(username="Guido")
>>> t = TaggedItem(content_object=guido, tag="bdfl")
>>> t.save()
>>> t.content_object
<User: Guido>

----------------------------------------

TITLE: Defining GeoDjango Models with Spatial Fields
DESCRIPTION: Example models demonstrating the usage of GeoDjango spatial fields for ZIP codes (using PolygonField) and Digital Elevation Models (using RasterField). Shows basic model structure with spatial field integration.

LANGUAGE: python
CODE:
from django.contrib.gis.db import models


class Zipcode(models.Model):
    code = models.CharField(max_length=5)
    poly = models.PolygonField()


class Elevation(models.Model):
    name = models.CharField(max_length=100)
    rast = models.RasterField()

----------------------------------------

TITLE: Configuring TodayArchiveView URL in Django
DESCRIPTION: Example of setting up a URL pattern for a custom TodayArchiveView.

LANGUAGE: python
CODE:
from django.urls import path

from myapp.views import ArticleTodayArchiveView

urlpatterns = [
    path("today/", ArticleTodayArchiveView.as_view(), name="archive_today"),
]

----------------------------------------

TITLE: Using URLValidator in Django 3.2.2 on Python 3.9.5+
DESCRIPTION: URLValidator in Django 3.2.2 addresses a security issue (CVE-2021-32052) where newlines and tabs were not prohibited in input on Python 3.9.5+. This could lead to header injection attacks if used in HTTP responses. The URLField form field silently removes newlines and tabs.

LANGUAGE: python
CODE:
from django.core.validators import URLValidator

# Usage of URLValidator should be reviewed for potential security issues
validator = URLValidator()

# Ensure input doesn't contain newlines or tabs when using URLValidator
input_url = "http://example.com"
validator(input_url)

----------------------------------------

TITLE: Rendering Django Settings in Error Template
DESCRIPTION: This snippet displays the current Django settings. It shows the settings module being used and iterates through all settings, providing a comprehensive view of the application's configuration for debugging purposes.

LANGUAGE: django
CODE:
Settings:
Using settings module {{ settings.SETTINGS_MODULE }}{% for k, v in settings.items|dictsort:0 %}
{{ k }} = {{ v|stringformat:"r" }}{% endfor %}

----------------------------------------

TITLE: MultiPartParser File Handling Fix in Django
DESCRIPTION: Fix for MultiPartParser to ignore filenames that normalize to empty strings, preventing crashes in MemoryFileUploadHandler when processing specially crafted user input.

LANGUAGE: python
CODE:
MultiPartParser

----------------------------------------

TITLE: Defining DateMixin in Django
DESCRIPTION: DateMixin is a class that provides common behavior for all date-based views. It includes attributes and methods for handling date fields and future objects in querysets.

LANGUAGE: python
CODE:
class DateMixin:
    date_field = None
    allow_future = False

    def get_date_field(self):
        return self.date_field

    def get_allow_future(self):
        return self.allow_future

----------------------------------------

TITLE: Adding Deletion to a Django Formset
DESCRIPTION: Shows how to add deletion capability to a formset.

LANGUAGE: python
CODE:
from django.forms import formset_factory
from myapp.forms import ArticleForm

ArticleFormSet = formset_factory(ArticleForm, can_delete=True)
formset = ArticleFormSet(initial=[
    {"title": "Article #1", "pub_date": datetime.date(2008, 5, 10)},
    {"title": "Article #2", "pub_date": datetime.date(2008, 5, 11)},
])

----------------------------------------

TITLE: Configuring URLconf for Custom View in Django
DESCRIPTION: Demonstrates how to add a custom view (AboutView) to the URLconf using the as_view() method. This connects the 'about/' URL to the AboutView class.

LANGUAGE: python
CODE:
# urls.py
from django.urls import path
from some_app.views import AboutView

urlpatterns = [
    path("about/", AboutView.as_view()),
]

----------------------------------------

TITLE: Setting Widget Arguments with SelectDateWidget
DESCRIPTION: Example demonstrating how to configure a SelectDateWidget with custom year choices and a checkbox select for multiple choices.

LANGUAGE: python
CODE:
from django import forms

BIRTH_YEAR_CHOICES = ["1980", "1981", "1982"]
FAVORITE_COLORS_CHOICES = {
    "blue": "Blue",
    "green": "Green", 
    "black": "Black",
}

class SimpleForm(forms.Form):
    birth_year = forms.DateField(
        widget=forms.SelectDateWidget(years=BIRTH_YEAR_CHOICES)
    )
    favorite_colors = forms.MultipleChoiceField(
        required=False,
        widget=forms.CheckboxSelectMultiple,
        choices=FAVORITE_COLORS_CHOICES,
    )

----------------------------------------

TITLE: Setting Permissions for Admin Actions in Django
DESCRIPTION: This example shows how to set permissions for an admin action using the @admin.action decorator.

LANGUAGE: python
CODE:
@admin.action(permissions=["change"])
def make_published(modeladmin, request, queryset):
    queryset.update(status="p")

----------------------------------------

TITLE: Configuring STATIC_URL in Django Settings
DESCRIPTION: Defines the STATIC_URL setting in the Django project's settings file. This URL will be used to refer to static files in templates.

LANGUAGE: python
CODE:
STATIC_URL = "static/"

----------------------------------------

TITLE: Making POST Requests with Form Data
DESCRIPTION: Shows how to make POST requests with form data using the Django test client.

LANGUAGE: python
CODE:
>>> c = Client()
>>> c.post("/login/", {"name": "fred", "passwd": "secret"})

----------------------------------------

TITLE: Django Basic Settings Example
DESCRIPTION: Demonstrates some common basic Django settings configuration including databases, static files, and security settings.

LANGUAGE: python
CODE:
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": "mydatabase",
        "USER": "mydatabaseuser",
        "PASSWORD": "mypassword",
        "HOST": "127.0.0.1",
        "PORT": "5432",
    }
}

----------------------------------------

TITLE: Using Case Expressions in Django Queries
DESCRIPTION: This snippet illustrates a bug fix for using Case expressions in Django queries, particularly when reusing the same Case instance or using negated Q objects.

LANGUAGE: Python
CODE:
Case(When(~Q(friends__age__lte=30)))

----------------------------------------

TITLE: Configuring STATICFILES_DIRS in Django Settings
DESCRIPTION: Defines additional directories where Django will look for static files, outside of the static directories in individual apps.

LANGUAGE: python
CODE:
STATICFILES_DIRS = [
    BASE_DIR / "static",
    "/var/www/static/",
]

----------------------------------------

TITLE: Timezone Handling in Django
DESCRIPTION: Functions for working with timezones in Django

LANGUAGE: Python
CODE:
from django.utils import timezone

current_time = timezone.now()
localized_time = timezone.localtime(current_time)

----------------------------------------

TITLE: Converting Between Distance Units in Django GIS
DESCRIPTION: Shows how to convert distances between different units by accessing unit attributes. Demonstrates conversion between kilometers and miles.

LANGUAGE: python
CODE:
>>> print(d1.mi)  # Converting 5 kilometers to miles
3.10685596119
>>> print(d2.km)  # Converting 5 miles to kilometers
8.04672

----------------------------------------

TITLE: Configuring Django ListView URLs
DESCRIPTION: URL configuration for the ArticleListView showing how to map the root URL to the list view.

LANGUAGE: python
CODE:
from django.urls import path

from article.views import ArticleListView

urlpatterns = [
    path("", ArticleListView.as_view(), name="article-list"),
]

----------------------------------------

TITLE: Accessing Django Settings via Date Filter Exploit
DESCRIPTION: This snippet shows how a malicious user could potentially exploit the date filter vulnerability to access the SECRET_KEY from Django settings.

LANGUAGE: Django Template
CODE:
{{ last_updated|date:"SECRET_KEY" }}

----------------------------------------

TITLE: ModelAdmin Security Configuration
DESCRIPTION: Security-related configuration for ModelAdmin using save_as parameter that affects user permissions for creating objects. When set to True, it allows the 'Save as new' option in the admin interface.

LANGUAGE: Python
CODE:
ModelAdmin(save_as=True)

----------------------------------------

TITLE: Security Fix Documentation - XSS Prevention in Admin Widget
DESCRIPTION: Documents the CVE-2020-13596 security fix addressing XSS vulnerability in ForeignKeyRawIdWidget by implementing proper URL encoding of query parameters.

LANGUAGE: markdown
CODE:
CVE-2020-13596: Possible XSS via admin ``ForeignKeyRawIdWidget``
================================================================

Query parameters for the admin ``ForeignKeyRawIdWidget`` were not properly URL
encoded, posing an XSS attack vector. ``ForeignKeyRawIdWidget`` now
ensures query parameters are correctly URL encoded.

----------------------------------------

TITLE: Django ORM Query Update - COUNT(*) Implementation
DESCRIPTION: Changed COUNT queries to use COUNT(*) instead of COUNT('*') to match behavior of Django versions before 1.8 and potentially improve database performance.

LANGUAGE: sql
CODE:
COUNT(*)

----------------------------------------

TITLE: Implementing MonthArchiveView in Django
DESCRIPTION: Example of creating a custom MonthArchiveView for Articles, including configuration for future dates.

LANGUAGE: python
CODE:
from django.views.generic.dates import MonthArchiveView

from myapp.models import Article


class ArticleMonthArchiveView(MonthArchiveView):
    queryset = Article.objects.all()
    date_field = "pub_date"
    allow_future = True

----------------------------------------

TITLE: Using Coalesce Function in Django ORM
DESCRIPTION: Examples of using the Coalesce function for screen name and sum aggregation

LANGUAGE: python
CODE:
>>> # Get a screen name from least to most public
>>> from django.db.models import Sum
>>> from django.db.models.functions import Coalesce
>>> Author.objects.create(name="Margaret Smith", goes_by="Maggie")
>>> author = Author.objects.annotate(screen_name=Coalesce("alias", "goes_by", "name")).get()
>>> print(author.screen_name)
Maggie

>>> # Prevent an aggregate Sum() from returning None
>>> # The aggregate default argument uses Coalesce() under the hood.
>>> aggregated = Author.objects.aggregate(
...     combined_age=Sum("age"),
...     combined_age_default=Sum("age", default=0),
...     combined_age_coalesce=Coalesce(Sum("age"), 0),
... )
>>> print(aggregated["combined_age"])
None
>>> print(aggregated["combined_age_default"])
0
>>> print(aggregated["combined_age_coalesce"])
0

----------------------------------------

TITLE: Using QueryDict Methods
DESCRIPTION: Example demonstrating initialization and manipulation of Django's QueryDict object for handling query parameters.

LANGUAGE: python
CODE:
>>> QueryDict("a=1&a=2&a=3")
<QueryDict: {'a': ['1', '2', '3']}>
>>> q = QueryDict("a=1&a=2&a=3", mutable=True)
>>> q.pop("a")
['1', '2', '3']

----------------------------------------

TITLE: Importing Database Exceptions
DESCRIPTION: Shows how to import database-related exceptions from Django. These exceptions wrap standard database exceptions for consistency across different database backends.

LANGUAGE: python
CODE:
from django.db import Error, InterfaceError, DatabaseError, DataError, OperationalError, IntegrityError, InternalError, ProgrammingError, NotSupportedError

----------------------------------------

TITLE: Implementing Inline Form Event Listeners in Django Admin
DESCRIPTION: This JavaScript code demonstrates how to add event listeners for 'formset:added' and 'formset:removed' events in the Django admin interface. It allows for custom actions when inline forms are added or removed.

LANGUAGE: javascript
CODE:
document.addEventListener('formset:added', (event) => {
    if (event.detail.formsetName == 'author_set') {
        // Do something
    }
});
document.addEventListener('formset:removed', (event) => {
    // Row removed
});

----------------------------------------

TITLE: Setting STATIC_ROOT for Deployment in Django Settings
DESCRIPTION: Defines the STATIC_ROOT setting, which specifies the directory where static files will be collected for deployment using the collectstatic management command.

LANGUAGE: python
CODE:
STATIC_ROOT = "/var/www/example.com/static/"

----------------------------------------

TITLE: Handling Streaming Response Disconnects
DESCRIPTION: Example showing how to handle client disconnects during streaming responses using async/await.

LANGUAGE: python
CODE:
async def streaming_response():
    try:
        # Do some work here
        async for chunk in my_streaming_iterator():
            yield chunk
    except asyncio.CancelledError:
        # Handle disconnect
        ...
        raise

async def my_streaming_view(request):
    return StreamingHttpResponse(streaming_response())

----------------------------------------

TITLE: Configuring App Label in Django Model Meta
DESCRIPTION: Example showing how to specify the app label for a model defined outside of INSTALLED_APPS

LANGUAGE: python
CODE:
app_label = "myapp"

----------------------------------------

TITLE: Referencing Django Formset Prefix
DESCRIPTION: Example demonstrating the reference to a Django formset prefix causing data loss in admin changelist when containing regex special characters.

LANGUAGE: python
CODE:
formset's prefix '$'

----------------------------------------

TITLE: Configuring Django Middleware for Remote User Authentication
DESCRIPTION: Basic middleware configuration required to enable REMOTE_USER authentication in Django settings file. Places RemoteUserMiddleware after AuthenticationMiddleware.

LANGUAGE: python
CODE:
MIDDLEWARE = [
    "...",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.auth.middleware.RemoteUserMiddleware",
    "...",
]

----------------------------------------

TITLE: Using unit_attname Method in Django GIS
DESCRIPTION: Demonstrates the use of unit_attname class method to get the attribute abbreviation for a unit name.

LANGUAGE: python
CODE:
>>> print(Distance.unit_attname("US Survey Foot"))
survey_ft
>>> print(Distance.unit_attname("centimeter"))
cm

----------------------------------------

TITLE: Implementing AppConfig.ready() Method
DESCRIPTION: Shows how to override the ready() method in an AppConfig subclass to perform initialization tasks like registering signals.

LANGUAGE: python
CODE:
from django.apps import AppConfig
from django.db.models.signals import pre_save


class RockNRollConfig(AppConfig):
    # ...

    def ready(self):
        # importing model classes
        from .models import MyModel  # or...

        MyModel = self.get_model("MyModel")

        # registering signals with the model's string label
        pre_save.connect(receiver, sender="app_label.MyModel")

----------------------------------------

TITLE: Accessing Django Session in Request
DESCRIPTION: Demonstrates how the session was previously accessed in Django, potentially creating empty session records. This behavior has been changed to prevent DoS attacks.

LANGUAGE: python
CODE:
request.session

----------------------------------------

TITLE: Using Django Validators in Python
DESCRIPTION: Examples of Django's built-in validators that have been fixed to prevent newline injection. These include EmailValidator, validate_ipv4_address, validate_slug, and URLValidator.

LANGUAGE: Python
CODE:
django.core.validators.EmailValidator

LANGUAGE: Python
CODE:
django.core.validators.validate_ipv4_address

LANGUAGE: Python
CODE:
django.core.validators.validate_slug

LANGUAGE: Python
CODE:
django.core.validators.URLValidator

----------------------------------------

TITLE: Referencing ManyRelatedManager in Django
DESCRIPTION: This snippet refers to the ManyRelatedManager class in Django, which had a bug causing crashes when coerced to a string, now fixed in this release.

LANGUAGE: python
CODE:
ManyRelatedManager

----------------------------------------

TITLE: Configuring Django Middleware for Clickjacking Protection
DESCRIPTION: Shows how to add the XFrameOptionsMiddleware to Django's middleware configuration to enable site-wide clickjacking protection.

LANGUAGE: python
CODE:
MIDDLEWARE = [
    ...,
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    ...,
]

----------------------------------------

TITLE: Implementing ContactForm in Django
DESCRIPTION: Example of creating a ContactForm class with name and message fields, including a send_email method.

LANGUAGE: python
CODE:
from django import forms


class ContactForm(forms.Form):
    name = forms.CharField()
    message = forms.CharField(widget=forms.Textarea)

    def send_email(self):
        # send email using the self.cleaned_data dictionary
        pass

----------------------------------------

TITLE: Using set() Method with Django RelatedManager
DESCRIPTION: This example demonstrates how to use the set() method to replace the entire set of related objects in a Django model relationship.

LANGUAGE: pycon
CODE:
>>> new_list = [obj1, obj2, obj3]
>>> e.related_set.set(new_list)

----------------------------------------

TITLE: Spatial Distance Query in Django
DESCRIPTION: Example of using a distance lookup to find objects within a certain distance

LANGUAGE: python
CODE:
Zipcode.objects.filter(poly__distance_lt=(geom, D(m=5)))

----------------------------------------

TITLE: Creating Covering Index in Django PostgreSQL
DESCRIPTION: Creates a covering index that allows filtering on headline field while also including pub_date field for index-only scans.

LANGUAGE: python
CODE:
Index(name="covering_index", fields=["headline"], include=["pub_date"])

----------------------------------------

TITLE: Disabling Django Shell Auto-Imports
DESCRIPTION: Example showing how to permanently disable automatic imports in Django shell by overriding get_auto_imports() to return None.

LANGUAGE: python
CODE:
class Command(shell.Command):
    def get_auto_imports(self):
        return None

----------------------------------------

TITLE: Non-Atomic Request Decorator in Django
DESCRIPTION: Demonstrates how to prevent a view from running in a transaction when ATOMIC_REQUESTS is enabled using the non_atomic_requests decorator.

LANGUAGE: Python
CODE:
from django.db import transaction

@transaction.non_atomic_requests
def my_view(request):
    do_stuff()

@transaction.non_atomic_requests(using="other")
def my_other_view(request):
    do_stuff_on_the_other_database()

----------------------------------------

TITLE: Importing Django Settings in Python Code
DESCRIPTION: Example of importing and using Django settings in a Python application. Demonstrates checking the DEBUG setting.

LANGUAGE: python
CODE:
from django.conf import settings

if settings.DEBUG:
    # Do something
    ...

----------------------------------------

TITLE: Django Test Data Setup Method
DESCRIPTION: Test case method for setting up test data in Django applications.

LANGUAGE: python
CODE:
TestCase.setUpTestData()

----------------------------------------

TITLE: Changing ManyToManyField to Use a Through Model
DESCRIPTION: This migration shows how to change a ManyToManyField to use a through model without losing existing relations, using SeparateDatabaseAndState to rename the existing table.

LANGUAGE: python
CODE:
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    dependencies = [
        ("core", "0001_initial"),
    ]

    operations = [
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql="ALTER TABLE core_book_authors RENAME TO core_authorbook",
                    reverse_sql="ALTER TABLE core_authorbook RENAME TO core_book_authors",
                ),
            ],
            state_operations=[
                migrations.CreateModel(
                    name="AuthorBook",
                    fields=[
                        (
                            "id",
                            models.AutoField(
                                auto_created=True,
                                primary_key=True,
                                serialize=False,
                                verbose_name="ID",
                            ),
                        ),
                        (
                            "author",
                            models.ForeignKey(
                                on_delete=django.db.models.deletion.DO_NOTHING,
                                to="core.Author",
                            ),
                        ),
                        (
                            "book",
                            models.ForeignKey(
                                on_delete=django.db.models.deletion.DO_NOTHING,
                                to="core.Book",
                            ),
                        ),
                    ],
                ),
                migrations.AlterField(
                    model_name="book",
                    name="authors",
                    field=models.ManyToManyField(
                        to="core.Author",
                        through="core.AuthorBook",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="authorbook",
            name="is_primary",
            field=models.BooleanField(default=False),
        ),
    ]

----------------------------------------

TITLE: Customizing English Localization Formats in Django
DESCRIPTION: Example of customizing the thousand separator for English localization in Django by defining it in a custom formats.py file.

LANGUAGE: python
CODE:
THOUSAND_SEPARATOR = "\xa0"

----------------------------------------

TITLE: Configuring Django LoginRequiredMiddleware
DESCRIPTION: Example configuration for adding LoginRequiredMiddleware to Django's middleware stack after AuthenticationMiddleware.

LANGUAGE: python
CODE:
MIDDLEWARE = [
    "...",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.auth.middleware.LoginRequiredMiddleware",
    "...",
]

----------------------------------------

TITLE: Custom Admin Template Override with Logo
DESCRIPTION: Example of extending and customizing the Django admin base template by adding a custom logo while preserving original content.

LANGUAGE: html
CODE:
{% extends "admin/base_site.html" %}

{% block branding %}
  <img src="link/to/logo.png" alt="logo">
  {{ block.super }}
{% endblock %}

----------------------------------------

TITLE: Displaying Request Information in Django Error Template
DESCRIPTION: This part of the template renders detailed information about the HTTP request that caused the error. It includes user data, GET and POST parameters, files, cookies, and meta information, providing a comprehensive view of the request context.

LANGUAGE: django
CODE:
{% if request %}Request information:
{% if user_str %}USER: {{ user_str }}{% endif %}

GET:{% for k, v in request_GET_items %}
{{ k }} = {{ v|stringformat:"r" }}{% empty %} No GET data{% endfor %}

POST:{% for k, v in filtered_POST_items %}
{{ k }} = {{ v|stringformat:"r" }}{% empty %} No POST data{% endfor %}

FILES:{% for k, v in request_FILES_items %}
{{ k }} = {{ v|stringformat:"r" }}{% empty %} No FILES data{% endfor %}

COOKIES:{% for k, v in request_COOKIES_items %}
{{ k }} = {{ v|stringformat:"r" }}{% empty %} No cookie data{% endfor %}

META:{% for k, v in request_meta.items|dictsort:0 %}
{{ k }} = {{ v|stringformat:"r" }}{% endfor %}
{% else %}Request data not supplied
{% endif %}

----------------------------------------

TITLE: DurationField SQLite Data Fix in Django
DESCRIPTION: Correction for DurationField handling in SQLite to prevent values with fractional seconds from being incorrectly saved as None.

LANGUAGE: python
CODE:
DurationField

----------------------------------------

TITLE: Renaming Django Deprecation Warning in Python
DESCRIPTION: The deprecation warning class for Django 2.0 has been renamed to reflect the revised version roadmap. It now warns for removal in Django 1.10 instead of 2.0.

LANGUAGE: Python
CODE:
django.utils.deprecation.RemovedInDjango20Warning

LANGUAGE: Python
CODE:
RemovedInDjango110Warning

----------------------------------------

TITLE: Database Query with F() and timedelta
DESCRIPTION: Fixed a crash issue when using F() expressions with timedelta in QuerySets that were compiled multiple times.

LANGUAGE: python
CODE:
F() + timedelta()

----------------------------------------

TITLE: Custom Field Check Implementation
DESCRIPTION: Example of implementing custom field validation checks by extending Django's IntegerField class with min/max value validation

LANGUAGE: python
CODE:
from django.core import checks
from django.db import models


class RangedIntegerField(models.IntegerField):
    def __init__(self, min=None, max=None, **kwargs):
        super().__init__(**kwargs)
        self.min = min
        self.max = max

    def check(self, **kwargs):
        # Call the superclass
        errors = super().check(**kwargs)

        # Do some custom checks and add messages to `errors`:
        errors.extend(self._check_min_max_values(**kwargs))

        # Return all errors and warnings
        return errors

    def _check_min_max_values(self, **kwargs):
        if self.min is not None and self.max is not None and self.min > self.max:
            return [
                checks.Error(
                    "min greater than max.",
                    hint="Decrease min or increase max.",
                    obj=self,
                    id="myapp.E001",
                )
            ]
        # When no error, return an empty list
        return []

----------------------------------------

TITLE: Implementing Composite Primary Key Model in Django 5.2
DESCRIPTION: Demonstrates how to create a model with a composite primary key using the new CompositePrimaryKey feature introduced in Django 5.2.

LANGUAGE: python
CODE:
from django.db import models

class Release(models.Model):
    pk = models.CompositePrimaryKey("version", "name")
    version = models.IntegerField()
    name = models.CharField(max_length=20)

----------------------------------------

TITLE: Implementing Custom CommentForm Widget
DESCRIPTION: Example showing how to specify custom widgets for form fields including a Textarea widget for comments.

LANGUAGE: python
CODE:
from django import forms

class CommentForm(forms.Form):
    name = forms.CharField()
    url = forms.URLField()
    comment = forms.CharField(widget=forms.Textarea)

----------------------------------------

TITLE: Creating WorldBorder Geographic Model in Python
DESCRIPTION: Defines a GeoDjango model for storing world border data with both regular Django fields and a geometry field (MultiPolygonField).

LANGUAGE: python
CODE:
from django.contrib.gis.db import models

class WorldBorder(models.Model):
    name = models.CharField(max_length=50)
    area = models.IntegerField()
    pop2005 = models.IntegerField("Population 2005")
    fips = models.CharField("FIPS Code", max_length=2, null=True)
    iso2 = models.CharField("2 Digit ISO", max_length=2)
    iso3 = models.CharField("3 Digit ISO", max_length=3)
    un = models.IntegerField("United Nations Code")
    region = models.IntegerField("Region Code")
    subregion = models.IntegerField("Sub-Region Code")
    lon = models.FloatField()
    lat = models.FloatField()
    mpoly = models.MultiPolygonField()

    def __str__(self):
        return self.name

----------------------------------------

TITLE: Django QuerySet Filter with Direct Lookup Usage
DESCRIPTION: Example showing how to use lookup classes directly in QuerySet filters, demonstrating the LessThan lookup with an F() expression.

LANGUAGE: python
CODE:
Book.objects.filter(LessThan(F("word_count"), 7500))

----------------------------------------

TITLE: Installing Uvicorn with Gunicorn for Production
DESCRIPTION: Command to install Uvicorn along with Gunicorn and the Uvicorn worker for production deployment

LANGUAGE: shell
CODE:
python -m pip install uvicorn uvicorn-worker gunicorn

----------------------------------------

TITLE: Translation Template Tags Usage
DESCRIPTION: Example of using translation tags in Django templates

LANGUAGE: html
CODE:
{% load i18n %}

<form action="{% url 'set_language' %}" method="post">{% csrf_token %}
    <input name="next" type="hidden" value="{{ redirect_to }}">
    <select name="language">
        {% get_current_language as LANGUAGE_CODE %}
        {% get_available_languages as LANGUAGES %}
        {% get_language_info_list for LANGUAGES as languages %}
        {% for language in languages %}
            <option value="{{ language.code }}"{% if language.code == LANGUAGE_CODE %} selected{% endif %}>
                {{ language.name_local }} ({{ language.code }})
            </option>
        {% endfor %}
    </select>
    <input type="submit" value="Go">
</form>

----------------------------------------

TITLE: Testing Email Functionality
DESCRIPTION: Demonstrates how to test email sending functionality using Django's test runner.

LANGUAGE: python
CODE:
from django.core import mail
from django.test import TestCase

class EmailTest(TestCase):
    def test_send_email(self):
        # Send message.
        mail.send_mail(
            "Subject here",
            "Here is the message.",
            "from@example.com",
            ["to@example.com"],
            fail_silently=False,
        )

        # Test that one message has been sent.
        self.assertEqual(len(mail.outbox), 1)

        # Verify that the subject of the first message is correct.
        self.assertEqual(mail.outbox[0].subject, "Subject here")

----------------------------------------

TITLE: Using Prepared Geometries
DESCRIPTION: Demonstrates the use of prepared geometries for faster spatial operations.

LANGUAGE: pycon
CODE:
>>> from django.contrib.gis.geos import Point, Polygon
>>> poly = Polygon.from_bbox((0, 0, 5, 5))
>>> prep_poly = poly.prepared
>>> prep_poly.contains(Point(2.5, 2.5))
True

----------------------------------------

TITLE: Oracle SQL Password Quoting Fix
DESCRIPTION: Demonstrates the fix for Oracle database error ORA-00922 which occurred when database user passwords started with numbers or special characters. The fix involves properly quoting the password in SQL queries.



----------------------------------------

TITLE: Configuring Django settings for Daphne integration
DESCRIPTION: Django settings configuration to enable Daphne integration. This includes adding 'daphne' to INSTALLED_APPS and specifying the ASGI_APPLICATION setting.

LANGUAGE: python
CODE:
INSTALLED_APPS = [
    "daphne",
    ...,
]

ASGI_APPLICATION = "myproject.asgi.application"

----------------------------------------

TITLE: Creating Custom Database Indexes
DESCRIPTION: Example showing how to define custom database indexes on a Customer model using the Meta class

LANGUAGE: python
CODE:
from django.db import models

class Customer(models.Model):
    first_name = models.CharField(max_length=100)
    last_name = models.CharField(max_length=100)

    class Meta:
        indexes = [
            models.Index(fields=["last_name", "first_name"]),
            models.Index(fields=["first_name"], name="first_name_idx"),
        ]

----------------------------------------

TITLE: Parsing ISO 8601 Dates in Django
DESCRIPTION: Functions for parsing ISO 8601 formatted date strings into Python datetime objects

LANGUAGE: Python
CODE:
from django.utils.dateparse import parse_date, parse_datetime

date = parse_date('2023-06-15')
datetime = parse_datetime('2023-06-15T14:30:00Z')

----------------------------------------

TITLE: Customizing Exception Reporter Filter in Django
DESCRIPTION: Snippet showing how to define a custom exception reporter filter class and set it as the default for the entire site using the DEFAULT_EXCEPTION_REPORTER_FILTER setting.

LANGUAGE: python
CODE:
DEFAULT_EXCEPTION_REPORTER_FILTER = "path.to.your.CustomExceptionReporterFilter"

----------------------------------------

TITLE: Accessing Django Cookie Parser Reference
DESCRIPTION: Reference to Django's cookie parsing components - request.COOKIES object and document.cookie interface, which were modified to better match browser behavior and prevent CSRF bypass attacks.

LANGUAGE: python
CODE:
request.COOKIES

LANGUAGE: javascript
CODE:
document.cookie

----------------------------------------

TITLE: Session Middleware Security Fix in Django Logout View
DESCRIPTION: Security patch modifying SessionMiddleware to prevent creation of empty session records during anonymous access to the logout view, protecting against potential session store flooding attacks.

LANGUAGE: python
CODE:
django.contrib.auth.views.logout()

----------------------------------------

TITLE: Using reverse() Function in Django
DESCRIPTION: The reverse() function in Django maps view information to URLs, but had a security vulnerability where it could execute unexpected code through module imports. This was fixed by limiting imports to only modules listed in the URL pattern configuration.

LANGUAGE: python
CODE:
reverse()

----------------------------------------

TITLE: Creating Bound Form Instance with Data in Django
DESCRIPTION: Shows how to create a bound Form instance in Django by passing data as a dictionary to the form class constructor.

LANGUAGE: pycon
CODE:
>>> data = {
...     "subject": "hello",
...     "message": "Hi there",
...     "sender": "foo@example.com",
...     "cc_myself": True,
... }
>>> f = ContactForm(data)

----------------------------------------

TITLE: Saving Existing File to FileField in Django
DESCRIPTION: This snippet shows how to save an existing file on disk to a FileField in a Django model.

LANGUAGE: pycon
CODE:
>>> from pathlib import Path
>>> from django.core.files import File
>>> path = Path("/some/external/specs.pdf")
>>> car = Car.objects.get(name="57 Chevy")
>>> with path.open(mode="rb") as f:
...     car.specs = File(f, name=path.name)
...     car.save()
...

----------------------------------------

TITLE: Overriding Default Admin Site
DESCRIPTION: Example of overriding the default admin site using a custom AppConfig

LANGUAGE: Python
CODE:
# myproject/apps.py
from django.contrib.admin.apps import AdminConfig


class MyAdminConfig(AdminConfig):
    default_site = "myproject.admin.MyAdminSite"

# myproject/settings.py
INSTALLED_APPS = [
    # ...
    "myproject.apps.MyAdminConfig",  # replaces 'django.contrib.admin'
    # ...
]

----------------------------------------

TITLE: Field Group Template Example - Django 5.0
DESCRIPTION: Demonstrates the simplified field group template rendering in Django 5.0 compared to previous verbose approach for form field rendering including labels, help text and errors.

LANGUAGE: html+django
CODE:
<form>
...
<div>
  {{ form.name.as_field_group }}
  <div class="row">
    <div class="col">{{ form.email.as_field_group }}</div>
    <div class="col">{{ form.password.as_field_group }}</div>
  </div>
</div>
...
</form>

----------------------------------------

TITLE: Defining ManyToManyField Relationship in Django Models
DESCRIPTION: This snippet shows how to create a many-to-many relationship between Pizza and Topping models using Django's ManyToManyField.

LANGUAGE: python
CODE:
class Topping(models.Model):
    # ...
    pass


class Pizza(models.Model):
    toppings = models.ManyToManyField(Topping)

----------------------------------------

TITLE: Using uWSGI Configuration File
DESCRIPTION: A shell command demonstrating how to start uWSGI using an INI configuration file.

LANGUAGE: shell
CODE:
uwsgi --ini uwsgi.ini

----------------------------------------

TITLE: Creating an Empty Migration
DESCRIPTION: Demonstrates how to create an empty migration file for custom operations.

LANGUAGE: shell
CODE:
python manage.py makemigrations --empty yourappname

----------------------------------------

TITLE: MySQL Database Creation Example
DESCRIPTION: SQL command to create a MySQL database with UTF-8 encoding

LANGUAGE: sql
CODE:
CREATE DATABASE <dbname> CHARACTER SET utf8mb4;

----------------------------------------

TITLE: Fixing JSONField Lookup Crash in Django 2.2.7
DESCRIPTION: Addresses a crash when using certain lookups (contains, contained_by, has_key, has_keys, has_any_keys) on django.contrib.postgres.fields.JSONField, specifically when a key transform is involved in the expression.

LANGUAGE: python
CODE:
django.contrib.postgres.fields.JSONField

----------------------------------------

TITLE: Citing Django in APA Format
DESCRIPTION: Example of how to cite Django framework in APA citation style, including version number, retrieval date, and URL.

LANGUAGE: text
CODE:
Django (Version 1.5) [Computer Software]. (2013). Retrieved from https://www.djangoproject.com/.

----------------------------------------

TITLE: Using AsyncPaginator in Django 6.0
DESCRIPTION: Demonstration of the new AsyncPaginator class for asynchronous pagination in Django 6.0.

LANGUAGE: python
CODE:
from django.core.paginator import AsyncPaginator

async def get_paginated_queryset(request):
    queryset = await MyModel.objects.filter(active=True)
    paginator = AsyncPaginator(queryset, 10)
    page_number = request.GET.get('page')
    page_obj = await paginator.get_page(page_number)
    return page_obj

----------------------------------------

TITLE: Customizing Exception Reporter in Django Views
DESCRIPTION: Demonstration of how to control which exception reporter class to use within a specific view by setting the HttpRequest's exception_reporter_class attribute.

LANGUAGE: python
CODE:
def my_view(request):
    if request.user.is_authenticated:
        request.exception_reporter_class = CustomExceptionReporter()
    ...

----------------------------------------

TITLE: Django Settings Configuration for Host Validation
DESCRIPTION: Configuration settings showing the default allowed hosts when DEBUG=True. These localhost variations are automatically allowed: localhost, 127.0.0.1, and ::1

LANGUAGE: python
CODE:
['localhost', '127.0.0.1', '::1']

----------------------------------------

TITLE: Django Collectstatic Management Command
DESCRIPTION: Reference to the collectstatic management command affected by the directory permissions issue on Python 3.7+.

LANGUAGE: python
CODE:
collectstatic

----------------------------------------

TITLE: Using ALLOWED_HOSTS Setting in Django
DESCRIPTION: Configuration setting added in Django 1.3.6 to specify valid host/domain names. Default value is ['*'] but should be restricted for security. Setting is bypassed when DEBUG is True or during tests.

LANGUAGE: python
CODE:
ALLOWED_HOSTS = ['*']

----------------------------------------

TITLE: Encoding Strings for Django Templates
DESCRIPTION: Functions for safely encoding strings for use in Django templates

LANGUAGE: Python
CODE:
from django.utils.encoding import force_str

safe_string = force_str(some_string)

----------------------------------------

TITLE: Defining Article Model with Status Choices in Python
DESCRIPTION: This snippet defines an Article model with a title, body, and status field. The status field uses predefined choices.

LANGUAGE: python
CODE:
from django.db import models

STATUS_CHOICES = {
    "d": "Draft",
    "p": "Published",
    "w": "Withdrawn",
}


class Article(models.Model):
    title = models.CharField(max_length=100)
    body = models.TextField()
    status = models.CharField(max_length=1, choices=STATUS_CHOICES)

    def __str__(self):
        return self.title

----------------------------------------

TITLE: Using Callable for Dynamic Storage Selection in Django
DESCRIPTION: This snippet shows how to use a callable to dynamically select a storage backend for a FileField in a Django model.

LANGUAGE: python
CODE:
from django.conf import settings
from django.db import models
from .storages import MyLocalStorage, MyRemoteStorage


def select_storage():
    return MyLocalStorage() if settings.DEBUG else MyRemoteStorage()


class MyModel(models.Model):
    my_file = models.FileField(storage=select_storage)

----------------------------------------

TITLE: Registering Custom Action with ModelAdmin in Django
DESCRIPTION: This code shows how to register the custom 'make_published' action with the ArticleAdmin class and register it with the admin site.

LANGUAGE: python
CODE:
from django.contrib import admin
from myapp.models import Article

@admin.action(description="Mark selected stories as published")
def make_published(modeladmin, request, queryset):
    queryset.update(status="p")

class ArticleAdmin(admin.ModelAdmin):
    list_display = ["title", "status"]
    ordering = ["title"]
    actions = [make_published]

admin.site.register(Article, ArticleAdmin)

----------------------------------------

TITLE: Authenticating users with ModelBackend
DESCRIPTION: Reference to the authenticate method of ModelBackend, which was vulnerable to a timing attack for enumerating users with unusable passwords.

LANGUAGE: python
CODE:
:meth:`~django.contrib.auth.backends.ModelBackend.authenticate()`

----------------------------------------

TITLE: Using remove() Method with Django RelatedManager
DESCRIPTION: This example demonstrates how to use the remove() method to disassociate an Entry object from a Blog object in a ForeignKey relationship.

LANGUAGE: pycon
CODE:
>>> b = Blog.objects.get(id=1)
>>> e = Entry.objects.get(id=234)
>>> b.entry_set.remove(e)  # Disassociates Entry e from Blog b.

----------------------------------------

TITLE: Customizing BoundField Class in Django Forms
DESCRIPTION: Shows how to create a custom BoundField class to modify form field rendering behavior with CSS classes.

LANGUAGE: python
CODE:
from django import forms

class CustomBoundField(forms.BoundField):
    custom_class = "custom"

    def css_classes(self, extra_classes=None):
        result = super().css_classes(extra_classes)
        if self.custom_class not in result:
            result += f" {self.custom_class}"
        return result.strip()

class CustomForm(forms.Form):
    bound_field_class = CustomBoundField
    name = forms.CharField(
        label="Your Name",
        max_length=100,
        required=False,
        widget=forms.TextInput(attrs={"class": "name-input-class"}),
    )
    email = forms.EmailField(label="Your Email")

----------------------------------------

TITLE: Defining Django Models for Generic Views
DESCRIPTION: Example models for Publisher, Author, and Book demonstrating relationships and field definitions used in generic views examples.

LANGUAGE: python
CODE:
from django.db import models

class Publisher(models.Model):
    name = models.CharField(max_length=30)
    address = models.CharField(max_length=50)
    city = models.CharField(max_length=60)
    state_province = models.CharField(max_length=30)
    country = models.CharField(max_length=50)
    website = models.URLField()

    class Meta:
        ordering = ["-name"]

    def __str__(self):
        return self.name

class Author(models.Model):
    salutation = models.CharField(max_length=10)
    name = models.CharField(max_length=200)
    email = models.EmailField()
    headshot = models.ImageField(upload_to="author_headshots")

    def __str__(self):
        return self.name

class Book(models.Model):
    title = models.CharField(max_length=100)
    authors = models.ManyToManyField("Author")
    publisher = models.ForeignKey(Publisher, on_delete=models.CASCADE)
    publication_date = models.DateField()

----------------------------------------

TITLE: Database-Computed Default Values - Django Model Example
DESCRIPTION: Shows how to use the new db_default parameter to set database-computed default values for model fields using functions like Now() and Pi()

LANGUAGE: python
CODE:
from django.db import models
from django.db.models.functions import Now, Pi


class MyModel(models.Model):
    age = models.IntegerField(db_default=18)
    created = models.DateTimeField(db_default=Now())
    circumference = models.FloatField(db_default=2 * Pi())

----------------------------------------

TITLE: Resolving Django Migration Issues with _order Field
DESCRIPTION: Fixes a crash in makemigrations for models without Meta.order_with_respect_to but with a field named _order.

LANGUAGE: Python
CODE:
makemigrations

----------------------------------------

TITLE: Bug Fix for Django QueryString Template Tag
DESCRIPTION: Fix for the {% querystring %} template tag to properly return "?" when all parameters are removed from the query string, rather than returning an empty string.

LANGUAGE: python
CODE:
{% querystring %}

----------------------------------------

TITLE: Wrapped MD5 Password Hasher
DESCRIPTION: Implementation of a wrapped password hasher to upgrade legacy MD5 hashes to PBKDF2 format without requiring user login.

LANGUAGE: python
CODE:
from django.contrib.auth.hashers import (
    PBKDF2PasswordHasher,
    MD5PasswordHasher,
)

class PBKDF2WrappedMD5PasswordHasher(PBKDF2PasswordHasher):
    algorithm = "pbkdf2_wrapped_md5"

    def encode_md5_hash(self, md5_hash, salt, iterations=None):
        return super().encode(md5_hash, salt, iterations)

    def encode(self, password, salt, iterations=None):
        _, _, md5_hash = MD5PasswordHasher().encode(password, salt).split("$", 2)
        return self.encode_md5_hash(md5_hash, salt, iterations)

----------------------------------------

TITLE: Using JSONBAgg Aggregate in Django with PostgreSQL
DESCRIPTION: Demonstrates the use of JSONBAgg to aggregate JSON data from related models. This example aggregates reservation requirements for rooms, ordered by reservation start date.

LANGUAGE: python
CODE:
>>> from django.contrib.postgres.aggregates import JSONBAgg
>>> Room.objects.annotate(
...     requirements=JSONBAgg(
...         "hotelreservation__requirements",
...         order_by="-hotelreservation__start",
...     )
... ).filter(requirements__0__sea_view=True).values("number", "requirements")
<QuerySet [{'number': 102, 'requirements': [
    {'parking': False, 'sea_view': True, 'double_bed': False},
    {'parking': True, 'double_bed': True}
]}]>

----------------------------------------

TITLE: Defining an Unmanaged Django Model for Legacy Database Table
DESCRIPTION: Example of an auto-generated Django model for a legacy database table. The Meta class is set to unmanaged, meaning Django won't handle table creation or deletion.

LANGUAGE: python
CODE:
class Person(models.Model):
    id = models.IntegerField(primary_key=True)
    first_name = models.CharField(max_length=70)

    class Meta:
        managed = False
        db_table = "CENSUS_PERSONS"

----------------------------------------

TITLE: Widget Selection Fix - Python/Django
DESCRIPTION: Fix for empty choice selection in SelectMultiple and CheckboxSelectMultiple widgets.

LANGUAGE: python
CODE:
SelectMultiple
CheckboxSelectMultiple

----------------------------------------

TITLE: UUID Field Password Reset View Fix - Python/Django
DESCRIPTION: Fix for PasswordResetConfirmView crash when using a UUIDField primary key with encoded values that decode to invalid UUIDs.

LANGUAGE: python
CODE:
PasswordResetConfirmView

----------------------------------------

TITLE: Creating Functional Index with Mathematical Operations in Django
DESCRIPTION: Creates an index on the result of multiplying height and weight fields, along with the rounded weight value.

LANGUAGE: python
CODE:
Index(F("height") * F("weight"), Round("weight"), name="calc_idx")

----------------------------------------

TITLE: Fixing ManyToManyField Migration Issue with Swappable Models
DESCRIPTION: Bug fix for makemigrations command to prevent infinite migrations when using ManyToManyField with lowercased swappable models like 'auth.user'.

LANGUAGE: python
CODE:
ManyToManyField('auth.user')

----------------------------------------

TITLE: Using querystring Template Tag in Django 6.0
DESCRIPTION: Demonstration of the updated querystring template tag in Django 6.0, which now consistently prefixes the query string with a '?' and accepts multiple mapping arguments.

LANGUAGE: django
CODE:
{% load querystring from django.template.defaultfilters %}
<a href="{% querystring request.GET key1='value1' key2='value2' %}">Link</a>

----------------------------------------

TITLE: Group Management Example
DESCRIPTION: Example showing group permission management

LANGUAGE: python
CODE:
from django.contrib.auth.models import Group, Permission

group = Group.objects.create(name='editors')
group.permissions.add(Permission.objects.get(codename='can_edit'))
user.groups.add(group)

----------------------------------------

TITLE: Fixing Model.full_clean() crash with GeneratedField and Meta.constraints
DESCRIPTION: A bug fix for Django 5.0 that resolved a crash in Model.full_clean() when used with unsaved model instances containing a GeneratedField and certain defined Meta.constraints.

LANGUAGE: python
CODE:
Model.full_clean()

----------------------------------------

TITLE: Custom Error Messages in Django Form Fields
DESCRIPTION: Demonstrates how to customize error messages for form fields in Django.

LANGUAGE: pycon
CODE:
>>> from django import forms
>>> generic = forms.CharField()
>>> generic.clean("")
Traceback (most recent call last):
  ...
ValidationError: ['This field is required.']

>>> name = forms.CharField(error_messages={"required": "Please enter your name"})
>>> name.clean("")
Traceback (most recent call last):
  ...
ValidationError: ['Please enter your name']

----------------------------------------

TITLE: Using Test Client with Query Parameters in Django 5.1
DESCRIPTION: Example of using the new query_params parameter in test client requests for easier query string handling

LANGUAGE: python
CODE:
self.client.post("/items/1", query_params={"action": "delete"})
await self.async_client.post("/items/1", query_params={"action": "delete"})

----------------------------------------

TITLE: Configuring PostgreSQL Connection Pool in Django 5.1
DESCRIPTION: Example configuration for enabling PostgreSQL connection pooling with custom pool size and timeout settings

LANGUAGE: python
CODE:
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        # ...
        "OPTIONS": {
            "pool": {
                "min_size": 2,
                "max_size": 4,
                "timeout": 10,
            }
        },
    },
}

----------------------------------------

TITLE: Specifying Django Settings Module via Command Line
DESCRIPTION: Example of using the --settings command-line argument to specify the Django settings module when running the development server.

LANGUAGE: shell
CODE:
django-admin runserver --settings=mysite.settings

----------------------------------------

TITLE: Restoring Model Method Override in Django 2.2.7
DESCRIPTION: Restores the ability to override the get_FOO_display method in Django models.

LANGUAGE: python
CODE:
django.db.models.Model.get_FOO_display

----------------------------------------

TITLE: Fixing dumpdata Command with prefetch_related() in Django 5.0
DESCRIPTION: A bugfix for Django 5.0 that addresses a crash in the dumpdata management command when a base queryset uses prefetch_related().

LANGUAGE: python
CODE:
prefetch_related()

----------------------------------------

TITLE: Extending Django Admin Change Form Template with Custom JavaScript
DESCRIPTION: This snippet shows how to extend the Django admin change form template to include custom JavaScript for handling inline form events.

LANGUAGE: html
CODE:
{% extends 'admin/change_form.html' %}
{% load static %}

{% block admin_change_form_document_ready %}
{{ block.super }}
<script src="{% static 'app/formset_handlers.js' %}"></script>
{% endblock %}

----------------------------------------

TITLE: Initializing RangeMinValueValidator in Django
DESCRIPTION: RangeMinValueValidator ensures that the lower bound of a range is not less than a specified limit value. A custom error message can be provided.

LANGUAGE: python
CODE:
RangeMinValueValidator(limit_value, message=None)

----------------------------------------

TITLE: Customizing Django Shell Auto-Imports
DESCRIPTION: Example of extending Django's shell command to add custom automatic imports for reverse and resolve functions. Creates a custom Command class that inherits from shell.Command and overrides get_auto_imports() method.

LANGUAGE: python
CODE:
from django.core.management.commands import shell


class Command(shell.Command):
    def get_auto_imports(self):
        return super().get_auto_imports() + [
            "django.urls.reverse",
            "django.urls.resolve",
        ]

----------------------------------------

TITLE: Using select_for_update with Proxy Models Reference
DESCRIPTION: Reference to a data loss bug fix in QuerySet.select_for_update() method when using proxy models in the 'of' argument. The fix ensures proper locking of corresponding models.

LANGUAGE: python
CODE:
select_for_update()

----------------------------------------

TITLE: Fixing QuerySet serialization with prefetch_related in Django
DESCRIPTION: Addresses a bug that prevented QuerySets using prefetch_related from being pickled and unpickled multiple times. This fix allows for proper serialization of such QuerySets.

LANGUAGE: python
CODE:
queryset = MyModel.objects.prefetch_related('related_model')
pickled_qs = pickle.dumps(queryset)
unpickled_qs = pickle.loads(pickled_qs)
# Now possible to pickle and unpickle again without raising an exception
pickle.dumps(unpickled_qs)

----------------------------------------

TITLE: Implementing ForeignKey.get_db_prep_value() for UUIDField in Django
DESCRIPTION: This snippet mentions the implementation of ForeignKey.get_db_prep_value() to fix issues with ForeignKeys pointing to UUIDField and inheritance on models with UUIDField primary keys.

LANGUAGE: Python
CODE:
ForeignKey.get_db_prep_value()

----------------------------------------

TITLE: Finding Django Forms Template Directory
DESCRIPTION: Code snippet for generating the path to Django's built-in form templates directory, used when configuring custom template settings.

LANGUAGE: python
CODE:
import django

django.__path__[0] + "/forms/templates"  # or '/forms/jinja2'

----------------------------------------

TITLE: Using Custom URL Validator with AdminURLFieldWidget
DESCRIPTION: Example of customizing URL validation in AdminURLFieldWidget by passing a custom validator_class parameter to the widget initialization. This is part of the security fix for CVE-2019-12308.

LANGUAGE: python
CODE:
AdminURLFieldWidget.__init__(validator_class=CustomURLValidator)

----------------------------------------

TITLE: Implementing AuthorDeleteView using Django's DeleteView
DESCRIPTION: Example of creating an AuthorDeleteView class using Django's DeleteView, specifying the model and success URL.

LANGUAGE: python
CODE:
from django.urls import reverse_lazy
from django.views.generic.edit import DeleteView
from myapp.models import Author


class AuthorDeleteView(DeleteView):
    model = Author
    success_url = reverse_lazy("author-list")

----------------------------------------

TITLE: Basic RSS Feed Implementation in Django
DESCRIPTION: Demonstrates how to create a basic RSS feed by subclassing Feed to display the latest news items

LANGUAGE: python
CODE:
from django.contrib.syndication.views import Feed
from django.urls import reverse
from policebeat.models import NewsItem

class LatestEntriesFeed(Feed):
    title = "Police beat site news"
    link = "/sitenews/"
    description = "Updates on changes and additions to police beat central."

    def items(self):
        return NewsItem.objects.order_by("-pub_date")[:5]

    def item_title(self, item):
        return item.title

    def item_description(self, item):
        return item.description

    def item_link(self, item):
        return reverse("news-item", args=[item.pk])

----------------------------------------

TITLE: Bug Fix for Django FileSystemStorage
DESCRIPTION: Fix for FileSystemStorage when allow_overwrite is True to properly truncate overwritten file content.

LANGUAGE: python
CODE:
FileSystemStorage(allow_overwrite=True)

----------------------------------------

TITLE: Custom ARIA Attributes in Django Form Fields
DESCRIPTION: Shows how to add custom ARIA attributes to form fields in Django, including both custom and default help text.

LANGUAGE: pycon
CODE:
>>> class UserForm(forms.Form):
...     username = forms.CharField(
...         max_length=255,
...         help_text="e.g., user@example.com",
...         widget=forms.TextInput(
...             attrs={"aria-describedby": "custom-description id_username_helptext"},
...         ),
...     )
...
>>> f = UserForm()
>>> print(f["username"])
<input type="text" name="username" aria-describedby="custom-description id_username_helptext" maxlength="255" id="id_username" required>

----------------------------------------

TITLE: Fixed KeyTransform() for JSONField and HStoreField in Django
DESCRIPTION: This bugfix addresses a crash in KeyTransform() when used with django.contrib.postgres.fields.JSONField and HStoreField on expressions with params. The issue was tracked under ticket #30672.

LANGUAGE: Python
CODE:
KeyTransform()

LANGUAGE: Python
CODE:
django.contrib.postgres.fields.JSONField

LANGUAGE: Python
CODE:
django.contrib.postgres.fields.HStoreField

----------------------------------------

TITLE: Accessing Geometry Coordinates
DESCRIPTION: Shows how to access coordinates of different geometry types.

LANGUAGE: pycon
CODE:
>>> from django.contrib.gis.geos import LineString
>>> line = LineString((0, 0), (0, 50), (50, 50), (50, 0), (0, 0))
>>> line[0]
(0.0, 0.0)
>>> line[-2]
(50.0, 0.0)

----------------------------------------

TITLE: Caching Blog Object in Django ORM
DESCRIPTION: Demonstrates how attribute caching works in Django ORM for non-callable attributes, using a blog entry example.

LANGUAGE: python
CODE:
>>> entry = Entry.objects.get(id=1)
>>> entry.blog  # Blog object is retrieved at this point
>>> entry.blog  # cached version, no DB access

----------------------------------------

TITLE: Updating custom management commands in Django 1.8
DESCRIPTION: Example of updating a custom management command to use the new add_arguments method instead of option_list.

LANGUAGE: Python
CODE:
class Command(BaseCommand):
    def add_arguments(self, parser):
        parser.add_argument('sample', nargs='+')

----------------------------------------

TITLE: Database Field Subtraction Operations
DESCRIPTION: Fix for crash issues when subtracting DurationField or IntegerField from DateField in Oracle and PostgreSQL databases.

LANGUAGE: Python
CODE:
DurationField
IntegerField
DateField

----------------------------------------

TITLE: Defining a Django Model with Documentation
DESCRIPTION: Example of a Django model class with docstrings and help_text attributes to provide useful documentation for the admin interface.

LANGUAGE: python
CODE:
class BlogEntry(models.Model):
    """
    Stores a single blog entry, related to :model:`blog.Blog` and
    :model:`auth.User`.
    """

    slug = models.SlugField(help_text="A short label, generally used in URLs.")
    author = models.ForeignKey(
        User,
        models.SET_NULL,
        blank=True,
        null=True,
    )
    blog = models.ForeignKey(Blog, models.CASCADE)
    ...

    def publish(self):
        """Makes the blog entry live on the site."""
        ...

----------------------------------------

TITLE: Django URLs Configuration Update
DESCRIPTION: Example showing the required changes to the root URLs configuration for Django 1.0 admin integration.

LANGUAGE: python
CODE:
# Old (0.96) urls.py
from django.conf.urls.defaults import *

urlpatterns = patterns(
    "",
    (r"^admin/", include("django.contrib.admin.urls")),
    # ... the rest of your URLs here ...
)

# New (1.0) urls.py
from django.conf.urls.defaults import *
from django.contrib import admin
admin.autodiscover()

urlpatterns = patterns(
    "",
    (r"^admin/(.*)", admin.site.root),
    # ... the rest of your URLs here ...
)

----------------------------------------

TITLE: Accessing Image URL in Django Template
DESCRIPTION: Demonstrates how to access an uploaded image's URL in a Django template using the url attribute of an ImageField.

LANGUAGE: django
CODE:
{{ object.mug_shot.url }}

----------------------------------------

TITLE: Django Authentication Backend Bug Fix
DESCRIPTION: Fixed an issue in ModelBackend where it was raising UnboundLocalError if get_user_model raised an error.

LANGUAGE: Python
CODE:
ModelBackend
get_user_model()

----------------------------------------

TITLE: Correcting SQL Query Parameter Placement on Oracle
DESCRIPTION: Fixes a regression (ticket #31271) in Django 3.0 that caused misplacement of parameters in logged SQL queries on Oracle databases.

LANGUAGE: SQL
CODE:
-- No specific code provided, but the fix ensures correct parameter placement in logged SQL queries for Oracle.

----------------------------------------

TITLE: Importing Testing Framework Exceptions
DESCRIPTION: Shows how to import testing framework-related exceptions from Django. These exceptions are defined in the django.test module.

LANGUAGE: python
CODE:
from django.test import RedirectCycleError

----------------------------------------

TITLE: Creating Custom Even Number Validator in Python
DESCRIPTION: Demonstrates how to create a custom validator function that checks if a number is even. The validator raises a ValidationError if the value is not even.

LANGUAGE: python
CODE:
from django.core.exceptions import ValidationError
from django.utils.translation import gettext_lazy as _


def validate_even(value):
    if value % 2 != 0:
        raise ValidationError(
            _("%(value)s is not an even number"),
            params={"value": value},
        )

----------------------------------------

TITLE: Security Fix for Storage.save() Directory Traversal
DESCRIPTION: Addresses CVE-2024-39330 where custom Storage subclasses could be vulnerable to directory traversal if generate_filename() was overridden without proper path validation.



----------------------------------------

TITLE: Basic Geometry Containment Query in Django
DESCRIPTION: Example of using the bbcontains spatial lookup to test if a geometry field's bounding box contains another geometry

LANGUAGE: python
CODE:
Zipcode.objects.filter(poly__bbcontains=geom)

----------------------------------------

TITLE: Fixing LogEntryManager.log_actions() Regression in Django 5.1.8
DESCRIPTION: This snippet addresses a regression introduced in Django 5.1.7 where the removal of the 'single_object' parameter unintentionally changed the signature and return type of LogEntryManager.log_actions(). The fix restores the expected behavior of the method.

LANGUAGE: python
CODE:
LogEntryManager.log_actions()

----------------------------------------

TITLE: Creating PostGIS Database
DESCRIPTION: Commands to create a new PostgreSQL database and enable PostGIS extension for spatial functionality.

LANGUAGE: shell
CODE:
$ createdb  <db name>
$ psql <db name>
> CREATE EXTENSION postgis;

----------------------------------------

TITLE: Django Admin Registration
DESCRIPTION: Registering the Question model with Django's admin interface to make it accessible in the admin panel.

LANGUAGE: python
CODE:
from django.contrib import admin
from .models import Question

admin.site.register(Question)

----------------------------------------

TITLE: Configuring URLconf for FlatPageSitemap in Django
DESCRIPTION: Example of setting up a URLconf to use FlatPageSitemap for generating a sitemap of flatpages.

LANGUAGE: python
CODE:
from django.contrib.flatpages.sitemaps import FlatPageSitemap
from django.contrib.sitemaps.views import sitemap
from django.urls import path

urlpatterns = [
    # ...
    # the sitemap
    path(
        "sitemap.xml",
        sitemap,
        {"sitemaps": {"flatpages": FlatPageSitemap}},
        name="django.contrib.sitemaps.views.sitemap",
    ),
]

----------------------------------------

TITLE: Creating PostgreSQL Database User with Create Privileges
DESCRIPTION: Shell command to create a database user with permissions to create databases but without superuser or role creation privileges.

LANGUAGE: shell
CODE:
$ createuser --createdb -R -S <user_name>

----------------------------------------

TITLE: Email Address Display Name Length Fix
DESCRIPTION: Fixes a crash issue when sending emails to addresses with display names longer than 75 characters on Python versions 3.6.11+, 3.7.8+, and 3.8.4+. This addresses ticket #31784.



----------------------------------------

TITLE: Creating Django Project Structure
DESCRIPTION: Commands to create a new Django project directory and initialize the project using django-admin.

LANGUAGE: console
CODE:
$ mkdir djangotutorial
$ django-admin startproject mysite djangotutorial

----------------------------------------

TITLE: Correcting Password Field Behavior in Django User Creation Forms
DESCRIPTION: This fix resolves a regression in Django 5.1 where password fields in forms derived from BaseUserCreationForm were being treated as required even when set to required=False. The correction ensures that optional password fields are properly handled in user creation forms.

LANGUAGE: python
CODE:
django.contrib.auth.forms.BaseUserCreationForm

----------------------------------------

TITLE: Database Configuration - New Style Multiple Database Settings
DESCRIPTION: Shows the new DATABASES dictionary configuration format introduced in Django 1.2 for multiple database support.

LANGUAGE: Python
CODE:
DATABASES = {
    "default": {
        "NAME": "test_db",
        "ENGINE": "django.db.backends.postgresql_psycopg2",
        "USER": "myusername",
        "PASSWORD": "s3krit",
    }
}

----------------------------------------

TITLE: Using tzlocal to Set TIME_ZONE Automatically
DESCRIPTION: Example of using the tzlocal library to automatically detect and set the TIME_ZONE setting based on the system timezone.

LANGUAGE: python
CODE:
from tzlocal import get_localzone

TIME_ZONE = get_localzone().zone

----------------------------------------

TITLE: Fixing Username Normalization
DESCRIPTION: Fix for AbstractBaseUser.normalize_username() method to handle non-string username arguments without crashing

LANGUAGE: python
CODE:
AbstractBaseUser.normalize_username()

----------------------------------------

TITLE: Fixing Memcached Backend get_many() Method for Python 3
DESCRIPTION: Resolution of an issue with the get_many() method in the Memcached cache backend when running on Python 3.

LANGUAGE: Python
CODE:
django.core.cache.backends.memcached.MemcachedCache

----------------------------------------

TITLE: Including Subqueries in GROUP BY Clause
DESCRIPTION: Fixes a regression (ticket #31150) in Django 3.0 that didn't include subqueries spanning multivalued relations in the GROUP BY clause.

LANGUAGE: SQL
CODE:
-- No specific code provided, but the fix ensures subqueries spanning multivalued relations are properly included in GROUP BY clauses.

----------------------------------------

TITLE: Complex Feed with URL Parameters
DESCRIPTION: Shows how to create a feed that accepts URL parameters to filter content by police beat

LANGUAGE: python
CODE:
from django.contrib.syndication.views import Feed

class BeatFeed(Feed):
    description_template = "feeds/beat_description.html"

    def get_object(self, request, beat_id):
        return Beat.objects.get(pk=beat_id)

    def title(self, obj):
        return "Police beat central: Crimes for beat %s" % obj.beat

    def link(self, obj):
        return obj.get_absolute_url()

    def description(self, obj):
        return "Crimes recently reported in police beat %s" % obj.beat

    def items(self, obj):
        return Crime.objects.filter(beat=obj).order_by("-crime_date")[:30]

----------------------------------------

TITLE: Accessing Queries for Multiple Databases in Django
DESCRIPTION: This snippet shows how to access queries for multiple databases in Django using the connections dictionary. It allows viewing queries for specific database aliases when working with multiple databases.

LANGUAGE: python
CODE:
>>> from django.db import connections
>>> connections["my_db_alias"].queries

----------------------------------------

TITLE: SQL Injection Vulnerability in JSONField and HStoreField Lookups in Python
DESCRIPTION: Key and index lookups for JSONField and key lookups for HStoreField were vulnerable to SQL injection when using a crafted dictionary with dictionary expansion in QuerySet.filter().

LANGUAGE: python
CODE:
Model.objects.filter(**{"json_field__key": value})
Model.objects.filter(**{"hstore_field__key": value})

----------------------------------------

TITLE: Creating Area Objects from Distance Multiplication in Django GIS
DESCRIPTION: Shows how multiplying two Distance objects creates an Area object with squared units.

LANGUAGE: python
CODE:
>>> a = d1 * d2  # Returns an Area object.
>>> print(a)
40.2336 sq_km

----------------------------------------

TITLE: Fixing Migration for Complex db_default in Django 5.0
DESCRIPTION: A bugfix for Django 5.0 that resolves migration crashes for models with literal db_default of complex types like dict instances in JSONField.

LANGUAGE: python
CODE:
db_default

----------------------------------------

TITLE: Creating MultiPolygon Objects
DESCRIPTION: Shows how to create MultiPolygon objects from Polygon objects.

LANGUAGE: pycon
CODE:
>>> p1 = Polygon(((0, 0), (0, 1), (1, 1), (0, 0)))
>>> p2 = Polygon(((1, 1), (1, 2), (2, 2), (1, 1)))
>>> mp = MultiPolygon(p1, p2)
>>> mp = MultiPolygon([p1, p2])

----------------------------------------

TITLE: Package Manifest Configuration
DESCRIPTION: MANIFEST.in file specifying additional files to include in the package distribution.

LANGUAGE: text
CODE:
recursive-include django_polls/static *
recursive-include django_polls/templates *

----------------------------------------

TITLE: Serializing Django Model to GeoJSON
DESCRIPTION: Example of using Django's GeoJSON serializer to convert City model instances into GeoJSON format, specifying the geometry field and limiting the properties to name field only.

LANGUAGE: python
CODE:
from django.core.serializers import serialize
from my_app.models import City

serialize("geojson", City.objects.all(), geometry_field="point", fields=["name"])

LANGUAGE: json
CODE:
{
    "type": "FeatureCollection",
    "features": [
        {
            "type": "Feature",
            "id": 1,
            "geometry": {"type": "Point", "coordinates": [-87.650175, 41.850385]},
            "properties": {"name": "Chicago"}
        }
    ]
}

----------------------------------------

TITLE: Text Manipulation in Django
DESCRIPTION: Utility functions for text manipulation in Django

LANGUAGE: Python
CODE:
from django.utils.text import slugify

slug = slugify("My awesome title")

----------------------------------------

TITLE: Migration Consistency Check Fix
DESCRIPTION: Correction of app_label and model_name arguments in allow_migrate() function during makemigrations consistency checks



----------------------------------------

TITLE: Creating a Django Template
DESCRIPTION: Shows how to create a Django template using template inheritance, variables, loops, and filters to display data dynamically.

LANGUAGE: html
CODE:
{% extends "base.html" %}

{% block title %}Articles for {{ year }}{% endblock %}

{% block content %}
<h1>Articles for {{ year }}</h1>

{% for article in article_list %}
    <p>{{ article.headline }}</p>
    <p>By {{ article.reporter.full_name }}</p>
    <p>Published {{ article.pub_date|date:"F j, Y" }}</p>
{% endfor %}
{% endblock %}

LANGUAGE: html
CODE:
{% load static %}
<html lang="en">
<head>
    <title>{% block title %}{% endblock %}</title>
</head>
<body>
    <img src="{% static 'images/sitelogo.png' %}" alt="Logo">
    {% block content %}{% endblock %}
</body>
</html>

----------------------------------------

TITLE: Using get_supported_language_variant() for language code parsing
DESCRIPTION: Update on the get_supported_language_variant() method, which now limits language code parsing to 500 characters to prevent potential DoS attacks.

LANGUAGE: python
CODE:
:meth:`~django.utils.translation.get_supported_language_variant`

----------------------------------------

TITLE: Using the new render shortcut function
DESCRIPTION: Example of using the new render() shortcut function which provides a RequestContext by default.

LANGUAGE: Python
CODE:
from django.shortcuts import render

def my_view(request):
    return render(request, 'my_template.html', {'foo': 'bar'})

----------------------------------------

TITLE: Using Custom QuerySet Methods
DESCRIPTION: Example of creating custom QuerySet methods that can be chained together and accessed through the Manager

LANGUAGE: python
CODE:
class FoodQuerySet(models.QuerySet):
    def pizzas(self):
        return self.filter(kind="pizza")

    def vegetarian(self):
        return self.filter(vegetarian=True)

class Food(models.Model):
    kind = models.CharField(max_length=50)
    vegetarian = models.BooleanField(default=False)
    objects = FoodQuerySet.as_manager()

Food.objects.pizzas().vegetarian()

----------------------------------------

TITLE: Fixing QuerySet Distinct Order Count Issue
DESCRIPTION: Fix for a regression where using sliced QuerySet.distinct().order_by() followed by count() would cause a crash.

LANGUAGE: python
CODE:
QuerySet.distinct().order_by().count()

----------------------------------------

TITLE: Fixing FilteredRelation() with Querysets in Django 5.0
DESCRIPTION: A bugfix for Django 5.0 that addresses a crash in FilteredRelation() when used with querysets as right-hand sides. The fix now raises a ValueError for such cases.

LANGUAGE: python
CODE:
FilteredRelation()

----------------------------------------

TITLE: Creating GEOSGeometry Objects from Various Formats
DESCRIPTION: Shows how to create GEOSGeometry objects from WKT, HEX, WKB, and GeoJSON formats.

LANGUAGE: pycon
CODE:
>>> from django.contrib.gis.geos import GEOSGeometry
>>> pnt = GEOSGeometry("POINT(5 23)")  # WKT
>>> pnt = GEOSGeometry("010100000000000000000014400000000000003740")  # HEX
>>> pnt = GEOSGeometry(
...     memoryview(
...         b"\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14@\x00\x00\x00\x00\x00\x007@"
...     )
... )  # WKB
>>> pnt = GEOSGeometry(
...     '{ "type": "Point", "coordinates": [ 5.000000, 23.000000 ] }'
... )  # GeoJSON

----------------------------------------

TITLE: Ordering Companies by Name Length in Django
DESCRIPTION: Shows different ways to order queryset results by the length of a field.

LANGUAGE: pycon
CODE:
>>> Company.objects.order_by(Length("name").asc())
>>> Company.objects.order_by(Length("name").desc())
>>> from django.db.models import CharField
>>> from django.db.models.functions import Length
>>> CharField.register_lookup(Length)
>>> Company.objects.order_by("name__length")

----------------------------------------

TITLE: Fixing URL Generation in Django reverse()
DESCRIPTION: Security fix that prevents generation of scheme-relative URLs by replacing second slash with URL encoded value (%2F) to avoid potential phishing attacks.

LANGUAGE: python
CODE:
// Before fix - could generate:
//example.com

// After fix - generates:
//example.com%2Fpath

----------------------------------------

TITLE: Using ArraySubquery with Django Models
DESCRIPTION: Demonstrates how to use ArraySubquery to annotate an author with a list of their books as JSON objects. The example shows filtering related books, converting them to JSON format, and creating an array of book data using PostgreSQL's ARRAY constructor.

LANGUAGE: python
CODE:
>>> from django.db.models import OuterRef
>>> from django.db.models.functions import JSONObject
>>> from django.contrib.postgres.expressions import ArraySubquery
>>> books = Book.objects.filter(author=OuterRef("pk")).values(
...     json=JSONObject(title="title", pages="pages")
... )
>>> author = Author.objects.annotate(books=ArraySubquery(books)).first()
>>> author.books
[{'title': 'Solaris', 'pages': 204}, {'title': 'The Cyberiad', 'pages': 295}]

----------------------------------------

TITLE: Bugfix: ModelAdmin Lookup Filtering
DESCRIPTION: Fix for regression in ModelAdmin.lookup_allowed that prevented filtering against foreign keys using lookups like __isnull when the field was not in ModelAdmin.list_filter.

LANGUAGE: python
CODE:
ModelAdmin.lookup_allowed

----------------------------------------

TITLE: Using WKB and WKT Readers
DESCRIPTION: Demonstrates the use of WKBReader and WKTReader to create geometries from WKB and WKT strings.

LANGUAGE: pycon
CODE:
>>> from django.contrib.gis.geos import WKBReader
>>> wkb_r = WKBReader()
>>> wkb_r.read("0101000000000000000000F03F000000000000F03F")
<Point object at 0x103a88910>

>>> from django.contrib.gis.geos import WKTReader
>>> wkt_r = WKTReader()
>>> wkt_r.read("POINT(1 1)")
<Point object at 0x103a88b50>

----------------------------------------

TITLE: Git Diff Output
DESCRIPTION: Sample Git diff output showing the changes made to implement the make_toast feature

LANGUAGE: diff
CODE:
diff --git a/django/shortcuts.py b/django/shortcuts.py
index 7ab1df0e9d..8dde9e28d9 100644
--- a/django/shortcuts.py
+++ b/django/shortcuts.py
@@ -156,3 +156,7 @@ def resolve_url(to, *args, **kwargs):

     # Finally, fall back and assume it's a URL
     return to
+
+
+def make_toast():
+    return 'toast'

----------------------------------------

TITLE: Running Django Test Suite with GeoDjango Tests
DESCRIPTION: Shell commands to run the complete Django test suite or only GeoDjango tests using specific settings.

LANGUAGE: shell
CODE:
$ ./runtests.py --settings=postgis
$ ./runtests.py --settings=postgis gis_tests

----------------------------------------

TITLE: Fixed ModelChoiceField Prefetch Issue
DESCRIPTION: Bug fix addressing ModelChoiceField's prefetch_related() functionality on querysets

LANGUAGE: python
CODE:
ModelChoiceField.prefetch_related()

----------------------------------------

TITLE: Specifying PostgreSQL Dependencies for Django
DESCRIPTION: This snippet lists the required PostgreSQL-related packages for a Django project. It includes psycopg with binary support (version 3.1.12 or higher) and psycopg-pool (version 3.2.0 or higher) for efficient database connection handling.

LANGUAGE: plaintext
CODE:
psycopg[binary]>=3.1.12
psycopg-pool>=3.2.0

----------------------------------------

TITLE: Generated Field Example - Django Model
DESCRIPTION: Demonstrates using the new GeneratedField to create database-computed columns that are calculated from other fields

LANGUAGE: python
CODE:
from django.db import models
from django.db.models import F


class Square(models.Model):
    side = models.IntegerField()
    area = models.GeneratedField(
        expression=F("side") * F("side"),
        output_field=models.BigIntegerField(),
        db_persist=True,
    )

----------------------------------------

TITLE: Demonstrating Vulnerable Host Header in Django 1.3.3 and 1.4.1
DESCRIPTION: This code snippet shows an example of a malicious Host header that could be exploited in Django versions 1.3.3 and 1.4.1. The vulnerability allows an attacker to manipulate the Host header to include arbitrary domain information.

LANGUAGE: text
CODE:
Host: validsite.com:random@evilsite.com

----------------------------------------

TITLE: Using cached_property with Aliases in Django
DESCRIPTION: Example showing the correct way to alias a cached_property after changes in Django 2.2 to avoid TypeError.

LANGUAGE: Python
CODE:
import operator

class A:
    @cached_property
    def base(self):
        return ...
    
    alias = property(operator.attrgetter("base"))

----------------------------------------

TITLE: Vulnerable WSGI Header Processing Example
DESCRIPTION: Demonstrates how WSGI header normalization could allow header spoofing by converting both dashes and underscores to underscores, making X-Auth-User and X-Auth_User indistinguishable.

LANGUAGE: text
CODE:
X-Auth-User -> HTTP_X_AUTH_USER\nX-Auth_User -> HTTP_X_AUTH_USER

----------------------------------------

TITLE: Malicious Date Format Example in Django
DESCRIPTION: Example of how a malicious user could exploit the date filter vulnerability by passing a settings key instead of a date format to access sensitive information.

LANGUAGE: python
CODE:
"SECRET_KEY"

----------------------------------------

TITLE: Fixing Multiple Executions in Django TestCase Callbacks
DESCRIPTION: Addresses a bug where TestCase.captureOnCommitCallbacks() could execute callbacks multiple times.

LANGUAGE: Python
CODE:
TestCase.captureOnCommitCallbacks()

----------------------------------------

TITLE: Working with GDAL DataSource Objects in Python
DESCRIPTION: Examples of using DataSource class to read geospatial data and access layer information

LANGUAGE: python
CODE:
>>> from django.contrib.gis.gdal import DataSource
>>> ds = DataSource("/path/to/your/cities.shp")
>>> ds.name
'/path/to/your/cities.shp'
>>> ds.layer_count  # This file only contains one layer
1

----------------------------------------

TITLE: Using clear() Method with Django RelatedManager
DESCRIPTION: This snippet shows how to use the clear() method to remove all objects from a related object set in a Django model relationship.

LANGUAGE: pycon
CODE:
>>> b = Blog.objects.get(id=1)
>>> b.entry_set.clear()

----------------------------------------

TITLE: Exploiting Directory Traversal in Django SSI Template Tag
DESCRIPTION: Demonstrates how the 'ssi' template tag could be exploited to bypass ALLOWED_INCLUDE_ROOTS setting in previous Django versions. This vulnerability allowed access to files outside the intended directory structure.

LANGUAGE: html+django
CODE:
{% ssi "/var/www/../../etc/passwd" %}

----------------------------------------

TITLE: Creating a Hash Index in Django for PostgreSQL
DESCRIPTION: Illustrates the creation of a Hash index using the HashIndex class. Allows tuning the fill factor of the index pages.

LANGUAGE: python
CODE:
HashIndex(*expressions, fillfactor=None, **options)

----------------------------------------

TITLE: Form Widget Value Omission Method
DESCRIPTION: Implementation reference for custom widgets to handle value omission in form data.

LANGUAGE: python
CODE:
django.forms.Widget.value_omitted_from_data

----------------------------------------

TITLE: Implementing YearArchiveView in Django
DESCRIPTION: Example of creating a custom YearArchiveView for Articles, including configuration for object list and future dates.

LANGUAGE: python
CODE:
from django.views.generic.dates import YearArchiveView

from myapp.models import Article


class ArticleYearArchiveView(YearArchiveView):
    queryset = Article.objects.all()
    date_field = "pub_date"
    make_object_list = True
    allow_future = True

----------------------------------------

TITLE: Specifying Django Project Dependencies
DESCRIPTION: This snippet lists the required Python packages and their minimum versions for the Django project. It includes conditional dependencies based on the Python version and operating system.

LANGUAGE: plaintext
CODE:
aiosmtpd >= 1.4.5
asgiref >= 3.8.1
argon2-cffi >= 23.1.0
bcrypt >= 4.1.1
black >= 25.1.0
docutils >= 0.19
geoip2 >= 4.8.0
jinja2 >= 2.11.0
numpy >= 1.26.0; python_version < '3.14'
Pillow >= 10.1.0; sys.platform != 'win32' or python_version < '3.14'
# pylibmc/libmemcached can't be built on Windows.
pylibmc; sys_platform != 'win32'
pymemcache >= 3.4.0
pywatchman; sys_platform != 'win32'
PyYAML >= 6.0.2
redis >= 5.1.0
selenium >= 4.23.0
sqlparse >= 0.5.0
tblib >= 3.0.0
tzdata
colorama >= 0.4.6; sys_platform == 'win32'

----------------------------------------

TITLE: Using RequestContext with a Custom Processor
DESCRIPTION: Example of using RequestContext with a custom context processor to add the client's IP address to the context.

LANGUAGE: Python
CODE:
from django.http import HttpResponse
from django.template import RequestContext, Template

def ip_address_processor(request):
    return {"ip_address": request.META["REMOTE_ADDR"]}

def client_ip_view(request):
    template = Template("{{ title }}: {{ ip_address }}")
    context = RequestContext(
        request,
        {"title": "Your IP Address"},
        [ip_address_processor],
    )
    return HttpResponse(template.render(context))

----------------------------------------

TITLE: Calculating Distance Between Cities with Django GIS
DESCRIPTION: Example of using the Distance function to calculate the distance from Hobart to other Australian cities, annotating the queryset with distance values.

LANGUAGE: pycon
CODE:
>>> from django.contrib.gis.db.models.functions import Distance
>>> pnt = AustraliaCity.objects.get(name="Hobart").point
>>> for city in AustraliaCity.objects.annotate(distance=Distance("point", pnt)):
...     print(city.name, city.distance)
...
Wollongong 990071.220408 m
Shellharbour 972804.613941 m
Thirroul 1002334.36351 m
...

----------------------------------------

TITLE: Fixing Unnecessary ManyToManyField Selection During Serialization
DESCRIPTION: Addresses a regression in Django 4.2.2 that caused an unnecessary selection of a non-nullable ManyToManyField without a natural key during the serialization process.

LANGUAGE: python
CODE:
ManyToManyField

----------------------------------------

TITLE: Inserting HTML Element in Django Template
DESCRIPTION: This snippet demonstrates the use of an HTML morbi element within a Django template. It's a simple example without any content or attributes.

LANGUAGE: HTML
CODE:
<morbi>

----------------------------------------

TITLE: Connecting to Django's m2m_changed Signal
DESCRIPTION: Example of connecting a handler function to the m2m_changed signal for a ManyToManyField on a Pizza model.

LANGUAGE: python
CODE:
from django.db.models.signals import m2m_changed

def toppings_changed(sender, **kwargs):
    # Do something
    pass

m2m_changed.connect(toppings_changed, sender=Pizza.toppings.through)

----------------------------------------

TITLE: Host Header Character Validation in Python Django
DESCRIPTION: Specification of allowed characters for Host header validation in Django 1.4.3. Hostnames must contain only alphanumeric characters, hyphens, and dots. IP addresses (both IPv4 and IPv6) are permitted, and ports must be numeric.

LANGUAGE: python
CODE:
[A-Za-z0-9]

----------------------------------------

TITLE: Configuring Password Validators in Django 1.9
DESCRIPTION: Example of setting up basic password validation in Django 1.9 using the new AUTH_PASSWORD_VALIDATORS setting.

LANGUAGE: Python
CODE:
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

----------------------------------------

TITLE: Demonstrating Directory Traversal Vulnerability in Django ssi Template Tag
DESCRIPTION: This code snippet illustrates how the ALLOWED_INCLUDE_ROOTS setting could be bypassed in previous Django versions using a relative path in the ssi template tag. It demonstrates a potential security risk if ALLOWED_INCLUDE_ROOTS is set to '/var/www'.

LANGUAGE: html+django
CODE:
{% ssi "/var/www/../../etc/passwd" %}

----------------------------------------

TITLE: Using QuerySet select_for_update Method
DESCRIPTION: Reference to Django QuerySet method causing data loss with multi-table inheritance when using 'self' in the of argument.

LANGUAGE: python
CODE:
select_for_update()

----------------------------------------

TITLE: Downloading Sample GDAL Test Data Using Shell Commands
DESCRIPTION: Shell commands for downloading sample geospatial data files used in GDAL testing

LANGUAGE: shell
CODE:
$ wget https://raw.githubusercontent.com/django/django/main/tests/gis_tests/data/cities/cities.{shp,prj,shx,dbf}
$ wget https://raw.githubusercontent.com/django/django/main/tests/gis_tests/data/rasters/raster.tif

----------------------------------------

TITLE: Running Django with Gunicorn and Uvicorn Worker
DESCRIPTION: Command to start Django application using Gunicorn with Uvicorn worker class for production deployment

LANGUAGE: shell
CODE:
python -m gunicorn myproject.asgi:application -k uvicorn_worker.UvicornWorker

----------------------------------------

TITLE: Security Fix - Storage.save() Directory Traversal Prevention
DESCRIPTION: Security update addressing CVE-2021-45452 to prevent directory traversal attacks through Storage.save() when handling crafted file names.

LANGUAGE: python
CODE:
Storage.save()

----------------------------------------

TITLE: Creating HStore Extension in PostgreSQL
DESCRIPTION: Direct SQL command for creating the HStore extension in PostgreSQL when Django database user lacks superuser privileges.

LANGUAGE: sql
CODE:
CREATE EXTENSION IF NOT EXISTS hstore;

----------------------------------------

TITLE: Fixing MySQL Database Validation Query
DESCRIPTION: Addresses a crash when executing SQL_MODE query on MySQL databases that return no results.

LANGUAGE: sql
CODE:
SELECT @@sql_mode

----------------------------------------

TITLE: Using TransactionNow Function in Django
DESCRIPTION: Shows how to use the TransactionNow function to filter database records based on the current transaction's timestamp. This function returns the start time of the current transaction or the current statement time if not in a transaction.

LANGUAGE: python
CODE:
>>> from django.contrib.postgres.functions import TransactionNow
>>> Article.objects.filter(published__lte=TransactionNow())
<QuerySet [<Article: How to Django>]>

----------------------------------------

TITLE: Displaying Field Errors using Django Template Language
DESCRIPTION: A template snippet that iterates through field-error pairs and displays each error under its respective field. Uses nested for loops to handle multiple errors per field.

LANGUAGE: django-template
CODE:
{% for field, errors in errors %}* {{ field }}
{% for error in errors %}  * {{ error }}
{% endfor %}{% endfor %}

----------------------------------------

TITLE: Implementing a Non-Atomic Data Migration
DESCRIPTION: This example shows how to create a non-atomic migration that updates a large table in smaller batches, useful for databases that support DDL transactions.

LANGUAGE: python
CODE:
import uuid

from django.db import migrations, transaction


def gen_uuid(apps, schema_editor):
    MyModel = apps.get_model("myapp", "MyModel")
    while MyModel.objects.filter(uuid__isnull=True).exists():
        with transaction.atomic():
            for row in MyModel.objects.filter(uuid__isnull=True)[:1000]:
                row.uuid = uuid.uuid4()
                row.save()


class Migration(migrations.Migration):
    atomic = False

    operations = [
        migrations.RunPython(gen_uuid),
    ]

----------------------------------------

TITLE: Building GEOS from Source
DESCRIPTION: Steps to download, configure, build, and install GEOS library from source using CMake.

LANGUAGE: shell
CODE:
$ wget https://download.osgeo.org/geos/geos-X.Y.Z.tar.bz2
$ tar xjf geos-X.Y.Z.tar.bz2
$ cd geos-X.Y.Z
$ mkdir build
$ cd build
$ cmake -DCMAKE_BUILD_TYPE=Release ..
$ cmake --build .
$ sudo cmake --build . --target install

----------------------------------------

TITLE: Using ArrayField with BooleanField in Django
DESCRIPTION: This snippet shows the usage of ArrayField with BooleanField, which was affected by a bug where all values after the first True value were incorrectly marked as checked.

LANGUAGE: python
CODE:
ArrayField(BooleanField())

----------------------------------------

TITLE: Rendering Password Reset Email Subject in Django Template
DESCRIPTION: Template code for generating the subject line of a password reset email. Uses Django's translation system (i18n) and disables HTML escaping for the site name variable.

LANGUAGE: django-template
CODE:
{% load i18n %}{% autoescape off %}
{% blocktranslate %}Password reset on {{ site_name }}{% endblocktranslate %}
{% endautoescape %}

----------------------------------------

TITLE: Fixing DoS Vulnerability in urlize Template Filter
DESCRIPTION: Security fix addressing CVE-2018-7536 where django.utils.html.urlize() function had catastrophic backtracking vulnerabilities in regular expressions. The fix replaces problematic regex patterns with safer parsing logic.

LANGUAGE: python
CODE:
django.utils.html.urlize()

----------------------------------------

TITLE: URL Safety Validation Function Reference in Django
DESCRIPTION: Reference to the new utility function for validating redirect URLs to prevent malicious redirects. The function checks if URLs are relative or match a specified hostname for security.

LANGUAGE: python
CODE:
django.utils.http.is_safe_url

----------------------------------------

TITLE: Using Django Template Tags - Smart if Tag Example
DESCRIPTION: Demonstrates the new smart if tag capabilities in Django 1.2 templates with support for comparison operators.

LANGUAGE: HTML+Django
CODE:
{% if a != b %}
 ...
{% endif %}

<div
  {% if user.email|lower == message.recipient|lower %}
    class="highlight"
  {% endif %}
>{{ message }}</div>

----------------------------------------

TITLE: TimeField and GenericIPAddressField Bug Fixes in Django 1.8.13
DESCRIPTION: Two bug fixes are documented: 1) Fixed TimeField microseconds round-tripping on MySQL and SQLite databases, and 2) Restored proper conversion of empty strings to null when saving GenericIPAddressField values on SQLite and MySQL databases.



----------------------------------------

TITLE: Adding Missing Index on PostgreSQL for CharField and TextField
DESCRIPTION: Fixes a bug where varchar/text_pattern_ops index was missing on CharField and TextField when using AddField on PostgreSQL.

LANGUAGE: SQL
CODE:
varchar/text_pattern_ops

----------------------------------------

TITLE: Calling Model Save Method
DESCRIPTION: Reference to Django model's save() method in context of privilege escalation vulnerability.

LANGUAGE: python
CODE:
save()

----------------------------------------

TITLE: Using inspectdb Command in GeoDjango
DESCRIPTION: The inspectdb management command is overridden in GeoDjango to be spatially-aware. It generates model definitions with appropriate geometry fields when django.contrib.gis is in INSTALLED_APPS.

LANGUAGE: python
CODE:
django-admin inspectdb

----------------------------------------

TITLE: Resolving Django Migration Issues with Renamed Models and Fields
DESCRIPTION: Fixes a crash in makemigrations when renaming a field of a renamed model.

LANGUAGE: Python
CODE:
makemigrations

----------------------------------------

TITLE: Importing Django Messages Module in Python
DESCRIPTION: This snippet demonstrates how to import the django.contrib.messages module, which is mentioned in the context of backwards compatibility support for cookie format in Django 1.4 and earlier.

LANGUAGE: Python
CODE:
from django.contrib import messages

----------------------------------------

TITLE: YearArchiveView Template in Django
DESCRIPTION: HTML template for rendering the year archive view, displaying a list of dates and articles for the year.

LANGUAGE: html
CODE:
<ul>
    {% for date in date_list %}
        <li>{{ date|date }}</li>
    {% endfor %}
</ul>

<div>
    <h1>All Articles for {{ year|date:"Y" }}</h1>
    {% for obj in object_list %}
        <p>
            {{ obj.title }} - {{ obj.pub_date|date:"F j, Y" }}
        </p>
    {% endfor %}
</div>

----------------------------------------

TITLE: Fixing WKBWriter Methods for Empty Polygons
DESCRIPTION: Bug fix for WKBWriter.write() and write_hex() methods when handling empty polygons using GEOS 3.6.1 and above.

LANGUAGE: python
CODE:
WKBWriter.write()
WKBWriter.write_hex()

----------------------------------------

TITLE: Bug Fix for Django ManyToManyField Related Managers
DESCRIPTION: Fix for count and exists methods of ManyToManyField related managers to properly handle intermediary model back references using to_field.

LANGUAGE: python
CODE:
model.manytomany_field.count()
model.manytomany_field.exists()

----------------------------------------

TITLE: Creating Django Release Checksum File
DESCRIPTION: Template for creating a checksum file containing hashes and release information for a Django release.

LANGUAGE: text
CODE:
This file contains MD5, SHA1, and SHA256 checksums for the source-code
tarball and wheel files of Django <<VERSION>>, released <<DATE>>.

To use this file, you will need a working install of PGP or other
compatible public-key encryption software. You will also need to have
the Django release manager's public key in your keyring. This key has
the ID ``XXXXXXXXXXXXXXXX`` and can be imported from the MIT
keyserver, for example, if using the open-source GNU Privacy Guard
implementation of PGP:

    gpg --keyserver pgp.mit.edu --recv-key XXXXXXXXXXXXXXXX

or via the GitHub API:

    curl https://github.com/<<RELEASE MANAGER GITHUB USERNAME>>.gpg | gpg --import -

Once the key is imported, verify this file:

    gpg --verify <<THIS FILENAME>>

Once you have verified this file, you can use normal MD5, SHA1, or SHA256
checksumming applications to generate the checksums of the Django
package and compare them to the checksums listed below.

Release packages
================

https://www.djangoproject.com/download/<<VERSION>>/tarball/
https://www.djangoproject.com/download/<<VERSION>>/wheel/

MD5 checksums
=============

<<MD5SUM>>  <<RELEASE TAR.GZ FILENAME>>
<<MD5SUM>>  <<RELEASE WHL FILENAME>>

SHA1 checksums
==============

<<SHA1SUM>>  <<RELEASE TAR.GZ FILENAME>>
<<SHA1SUM>>  <<RELEASE WHL FILENAME>>

SHA256 checksums
================

<<SHA256SUM>>  <<RELEASE TAR.GZ FILENAME>>
<<SHA256SUM>>  <<RELEASE WHL FILENAME>>

----------------------------------------

TITLE: Implementing Database Router for Migration Hints
DESCRIPTION: This code snippet shows how to implement a database router that uses hints to determine whether to allow migrations on specific databases.

LANGUAGE: python
CODE:
class MyRouter:
    def allow_migrate(self, db, app_label, model_name=None, **hints):
        if "target_db" in hints:
            return db == hints["target_db"]
        return True

----------------------------------------

TITLE: Building SQLite from Source with R*Tree Support
DESCRIPTION: Shell commands for downloading and building SQLite from source with R*Tree module enabled.

LANGUAGE: shell
CODE:
wget https://www.sqlite.org/YYYY/sqlite-amalgamation-XXX0000.zip
unzip sqlite-amalgamation-XXX0000.zip
cd sqlite-amalgamation-XXX0000
CFLAGS="-DSQLITE_ENABLE_RTREE=1" ./configure
make
sudo make install
cd ..

----------------------------------------

TITLE: Fixing XSS Vulnerability in Django Admin
DESCRIPTION: Addresses a security issue in Django admin's add/change related popup by replacing unsafe usage of JavaScript's Element.innerHTML with Element.textContent to prevent XSS attacks.

LANGUAGE: JavaScript
CODE:
Element.textContent

----------------------------------------

TITLE: Login View Reference in Django
DESCRIPTION: Reference to Django's built-in login view that implements URL redirection.

LANGUAGE: python
CODE:
django.contrib.auth.views.login()

----------------------------------------

TITLE: Syncing with Upstream Changes
DESCRIPTION: Commands for keeping local repository in sync with upstream Django repository.

LANGUAGE: shell
CODE:
git fetch upstream
git rebase upstream/main

----------------------------------------

TITLE: Loading static files in Django HTML template
DESCRIPTION: This snippet demonstrates how to load static files in a Django HTML template using the {% load static %} tag and link a CSS stylesheet using the {% static %} template tag.

LANGUAGE: html
CODE:
{% load static %}

<link rel="stylesheet" href="{% static 'polls/style.css' %}">

----------------------------------------

TITLE: Referencing Django Decorator Functions in Python
DESCRIPTION: This snippet demonstrates the correct way to reference Django decorator functions, specifically sensitive_post_parameters and method_decorator. It highlights the importance of using method_decorator when applying decorators to class-based views.

LANGUAGE: Python
CODE:
from django.views.decorators.debug import sensitive_post_parameters
from django.utils.decorators import method_decorator

@method_decorator(sensitive_post_parameters())
def add_view(self, request, form_url='', extra_context=None):
    # View implementation

@method_decorator(sensitive_post_parameters())
def user_change_password(self, request, id, form_url=''):
    # View implementation

----------------------------------------

TITLE: Using strip_tags() in Django 4.2.17
DESCRIPTION: Example of using strip_tags() function in Django 4.2.17. This function now has an upper limit of recursive calls to HTMLParser before raising a SuspiciousOperation exception. It's crucial to note that the result of strip_tags() is not guaranteed to be HTML safe and should always be escaped before being marked as safe.

LANGUAGE: python
CODE:
from django.utils.html import strip_tags, escape

# Always escape the result of strip_tags before marking it safe
safe_content = escape(strip_tags(untrusted_content))

----------------------------------------

TITLE: Using sensitive_post_parameters decorator in Django auth admin views
DESCRIPTION: Demonstrates the correct usage of the sensitive_post_parameters decorator in Django's auth admin views. This fix ensures proper application of the decorator to method-based views.

LANGUAGE: python
CODE:
@method_decorator(sensitive_post_parameters())
def add_view(self, request, form_url='', extra_context=None):
    # View implementation

@method_decorator(sensitive_post_parameters())
def user_change_password(self, request, id, form_url=''):
    # View implementation

----------------------------------------

TITLE: Demonstrating Malicious Redirect URL in Django
DESCRIPTION: This snippet shows an example of a malicious URL that could be considered safe by Django's is_safe_url() function prior to the security fix. It demonstrates how a URL with basic authentication credentials could be misused for redirection attacks.

LANGUAGE: plaintext
CODE:
http://mysite.example.com\@attacker.com

----------------------------------------

TITLE: Defining WeekMixin in Django
DESCRIPTION: WeekMixin is a class that provides functionality for retrieving and parsing the week component of a date. It includes methods for getting the week format, retrieving the week, and navigating to next and previous weeks.

LANGUAGE: python
CODE:
class WeekMixin:
    week_format = '%U'
    week = None

    def get_week_format(self):
        return self.week_format

    def get_week(self):
        # Implementation details omitted
        pass

    def get_next_week(self, date):
        # Implementation details omitted
        pass

    def get_prev_week(self, date):
        # Implementation details omitted
        pass

----------------------------------------

TITLE: SQL Injection Fix in PostgreSQL QuerySet.explain()
DESCRIPTION: Security patch addressing SQL injection vulnerability in QuerySet.explain() method when using dictionary expansion for options on PostgreSQL.

LANGUAGE: python
CODE:
QuerySet.explain(**options)

----------------------------------------

TITLE: Filtering Django QuerySet with Backslash
DESCRIPTION: Shows the updated syntax for filtering a Django QuerySet to find text containing a single backslash, accounting for the new backslash escaping behavior.

LANGUAGE: Python
CODE:
# Find text containing a single backslash
MyModel.objects.filter(text__contains="\\")

----------------------------------------

TITLE: Configuring DayArchiveView URL in Django
DESCRIPTION: Example of setting up a URL pattern for a custom DayArchiveView.

LANGUAGE: python
CODE:
from django.urls import path

from myapp.views import ArticleDayArchiveView

urlpatterns = [
    # Example: /2012/nov/10/
    path(
        "<int:year>/<str:month>/<int:day>/",
        ArticleDayArchiveView.as_view(),
        name="archive_day",
    ),
]

----------------------------------------

TITLE: Custom Admin Configuration with Modified User Form (Python)
DESCRIPTION: Implementation of custom admin configuration to enforce username length restriction in the admin interface.

LANGUAGE: python
CODE:
from django.contrib.auth.admin import UserAdmin as BaseUserAdmin
from django.contrib.auth.models import User

class UserAdmin(BaseUserAdmin):
    add_form = MyUserCreationForm

admin.site.unregister(User)
admin.site.register(User, UserAdmin)

----------------------------------------

TITLE: Fixing IPv6 Address Validation in Django 5.1.6
DESCRIPTION: This bugfix addresses a regression in Django 5.1.5 where validate_ipv6_address() and validate_ipv46_address() functions were crashing when handling non-string values. The fix ensures proper handling of various input types for IPv6 address validation.

LANGUAGE: python
CODE:
validate_ipv6_address()

LANGUAGE: python
CODE:
validate_ipv46_address()

----------------------------------------

TITLE: Implementing WeekArchiveView in Django
DESCRIPTION: Example of creating a custom WeekArchiveView for Articles, including configuration for week format and future dates.

LANGUAGE: python
CODE:
from django.views.generic.dates import WeekArchiveView

from myapp.models import Article


class ArticleWeekArchiveView(WeekArchiveView):
    queryset = Article.objects.all()
    date_field = "pub_date"
    week_format = "%W"
    allow_future = True

----------------------------------------

TITLE: Referencing GeoIP2 Class in Django
DESCRIPTION: This code snippet shows how to reference the GeoIP2 class from Django's contrib.gis.geoip2 module. It's mentioned in the context of a bugfix related to DB-IP database compatibility.

LANGUAGE: python
CODE:
:class:`~django.contrib.gis.geoip2.GeoIP2`

----------------------------------------

TITLE: Inspecting OGR Data Sources with ogrinspect in Django
DESCRIPTION: The ogrinspect function is used to inspect OGR data sources. It takes a data_source and model_name as required parameters, with additional optional keyword arguments.

LANGUAGE: Python
CODE:
ogrinspect(data_source, model_name, **kwargs)

----------------------------------------

TITLE: Transaction Required select_for_update()
DESCRIPTION: The select_for_update() method now requires execution within a transaction context. Previously it could run in autocommit mode, but this caused potential data corruption issues.

LANGUAGE: python
CODE:
select_for_update()

----------------------------------------

TITLE: ListView Template Implementation
DESCRIPTION: HTML template for displaying a list of articles using Django template language, including handling empty lists.

LANGUAGE: html+django
CODE:
<h1>Articles</h1>
<ul>
{% for article in object_list %}
    <li>{{ article.pub_date|date }} - {{ article.headline }}</li>
{% empty %}
    <li>No articles yet.</li>
{% endfor %}
</ul>

----------------------------------------

TITLE: Creating and Saving Raster Models in Django
DESCRIPTION: Examples showing how to create and save models with raster fields using file paths and GDALRaster objects with custom parameters.

LANGUAGE: python
CODE:
>>> from elevation.models import Elevation
>>> dem = Elevation(name="Volcano", rast="/path/to/raster/volcano.tif")
>>> dem.save()

>>> from django.contrib.gis.gdal import GDALRaster
>>> rast = GDALRaster({
...     "width": 10,
...     "height": 10, 
...     "name": "Canyon",
...     "srid": 4326,
...     "scale": [0.1, -0.1],
...     "bands": [{"data": range(100)}]
... })
>>> dem = Elevation(name="Canyon", rast=rast)
>>> dem.save()

----------------------------------------

TITLE: Importing Views Using reverse() in Django
DESCRIPTION: Explanation of how reverse() function in Django can potentially lead to unexpected code execution by importing modules based on user input. The fix limits imports to modules listed in the project's URL pattern configuration.

LANGUAGE: Python
CODE:
reverse()

----------------------------------------

TITLE: Affected Django Components and Template Filters
DESCRIPTION: The vulnerability affects contrib.admin and several template filters. This snippet lists the components and filters that use the vulnerable number formatting function.

LANGUAGE: Python
CODE:
contrib.admin
floatformat
filesizeformat
intcomma

----------------------------------------

TITLE: Referencing Django File Upload Classes in Python
DESCRIPTION: This snippet shows the Python class references for Django's file upload handling. It includes FileField, ImageField, ClearableFileInput, and FileInput classes from Django's forms module.

LANGUAGE: python
CODE:
from django.forms import FileField, ImageField, ClearableFileInput, FileInput

----------------------------------------

TITLE: Referencing Django GenericIPAddressField Model in Python
DESCRIPTION: This snippet shows how to reference the GenericIPAddressField class from Django's models module. It's mentioned to clarify that this model field was not affected by the security vulnerability addressed in this release.

LANGUAGE: python
CODE:
django.db.models.GenericIPAddressField

----------------------------------------

TITLE: Django QuerySet Operations
DESCRIPTION: Reference to QuerySet methods for combining annotated and unannotated querysets

LANGUAGE: python
CODE:
QuerySet.values()
QuerySet.values_list()
union()
difference()
intersection()

----------------------------------------

TITLE: Configuring YearArchiveView URL in Django
DESCRIPTION: Example of setting up a URL pattern for a custom YearArchiveView.

LANGUAGE: python
CODE:
from django.urls import path

from myapp.views import ArticleYearArchiveView

urlpatterns = [
    path("<int:year>/", ArticleYearArchiveView.as_view(), name="article_year_archive"),
]

----------------------------------------

TITLE: Updating URL Patterns for Django 1.9
DESCRIPTION: Example of updating URL patterns to use the new app_name attribute and namespace argument in Django 1.9.

LANGUAGE: Python
CODE:
# mysite/urls.py
urlpatterns = [
    url(r"^polls/", include("polls.urls")),  # 'namespace="polls"' removed
    ...,
]

# polls/urls.py
app_name = "polls"  # added
urlpatterns = [...]

----------------------------------------

TITLE: Correcting Regression in Django's intcomma Template Filter
DESCRIPTION: Fixes a bug introduced in Django 4.2.10 where the intcomma template filter could incorrectly add a leading comma to string representations of float numbers.

LANGUAGE: python
CODE:
intcomma

----------------------------------------

TITLE: Configuring DateDetailView URL in Django
DESCRIPTION: Example of setting up a URL pattern for DateDetailView using the Article model.

LANGUAGE: python
CODE:
from django.urls import path
from django.views.generic.dates import DateDetailView

urlpatterns = [
    path(
        "<int:year>/<str:month>/<int:day>/<int:pk>/",
        DateDetailView.as_view(model=Article, date_field="pub_date"),
        name="archive_date_detail",
    ),
]

----------------------------------------

TITLE: Generating SQL Constraint Names in Django 1.1
DESCRIPTION: Demonstrates the change in constraint name generation between 64-bit and 32-bit platforms in Django 1.1. This change affects the consistency of constraint names across different machine word sizes.

LANGUAGE: SQL
CODE:
ALTER TABLE myapp_sometable ADD CONSTRAINT object_id_refs_id_5e8f10c132091d1e FOREIGN KEY ...

LANGUAGE: SQL
CODE:
ALTER TABLE myapp_sometable ADD CONSTRAINT object_id_refs_id_32091d1e FOREIGN KEY ...

----------------------------------------

TITLE: Overriding Storage.generate_filename() method
DESCRIPTION: Warning about potential directory traversal vulnerability when overriding the generate_filename() method in Storage subclasses without proper path validation.

LANGUAGE: python
CODE:
:meth:`generate_filename()
<django.core.files.storage.Storage.generate_filename()`

----------------------------------------

TITLE: Overriding get_context_data in Django View
DESCRIPTION: Example of extending get_context_data method to add additional context data to a view. Shows how to properly call the parent class's method and add custom context.

LANGUAGE: python
CODE:
def get_context_data(self, **kwargs):
    context = super().get_context_data(**kwargs)
    context["number"] = random.randrange(1, 100)
    return context

----------------------------------------

TITLE: Configuring a Django Application
DESCRIPTION: Shows how to create an AppConfig subclass to configure a Django application, including setting a custom verbose name.

LANGUAGE: python
CODE:
# rock_n_roll/apps.py

from django.apps import AppConfig


class RockNRollConfig(AppConfig):
    name = "rock_n_roll"
    verbose_name = "Rock 'n' roll"

----------------------------------------

TITLE: Referencing Django Methods and Classes
DESCRIPTION: Code references mentioned in the bugfix documentation, including Django's admin, syndication, and queryset methods that were affected by the fixes.

LANGUAGE: python
CODE:
django.contrib.syndication.views.Feed
QuerySet.values()
values_list()
union()
difference()
intersection()

----------------------------------------

TITLE: Raw SQL Query Methods in Django
DESCRIPTION: Mention of raw() and extra() query methods in Django, which allow developers to supply raw SQL. Users are advised to perform manual type conversions before executing these queries.

LANGUAGE: Python
CODE:
raw()
extra()

----------------------------------------

TITLE: Using Case Expression for Client Discounts
DESCRIPTION: Example of using Case() and When() expressions to calculate client discounts based on account type

LANGUAGE: python
CODE:
from datetime import date, timedelta
from django.db.models import Case, Value, When

Client.objects.annotate(
    discount=Case(
        When(account_type=Client.GOLD, then=Value("5%")),
        When(account_type=Client.PLATINUM, then=Value("10%")),
        default=Value("0%"),
    ),
).values_list("name", "discount")

----------------------------------------

TITLE: Customizing Sitemap XML Template in Django
DESCRIPTION: This XML+Django template snippet shows how to customize the sitemap XML output, including support for Google News sitemaps.

LANGUAGE: XML
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<urlset
  xmlns="https://www.sitemaps.org/schemas/sitemap/0.9"
  xmlns:news="https://www.google.com/schemas/sitemap-news/0.9">
{% spaceless %}
{% for url in urlset %}
  <url>
    <loc>{{ url.location }}</loc>
    {% if url.lastmod %}<lastmod>{{ url.lastmod|date:"Y-m-d" }}</lastmod>{% endif %}
    {% if url.changefreq %}<changefreq>{{ url.changefreq }}</changefreq>{% endif %}
    {% if url.priority %}<priority>{{ url.priority }}</priority>{% endif %}
    <news:news>
      {% if url.item.publication_date %}<news:publication_date>{{ url.item.publication_date|date:"Y-m-d" }}</news:publication_date>{% endif %}
      {% if url.item.tags %}<news:keywords>{{ url.item.tags }}</news:keywords>{% endif %}
    </news:news>
   </url>
{% endfor %}
{% endspaceless %}
</urlset>

----------------------------------------

TITLE: Improving File Upload Name Generation in Django Storage
DESCRIPTION: Updated algorithm for generating unique filenames by appending random alphanumeric string instead of incremental numbers to prevent DoS attacks via repeated uploads.

LANGUAGE: python
CODE:
# Old method
"file_1", "file_2", "file_3"

# New method
"file_x3a1gho"

----------------------------------------

TITLE: Vulnerable Function Reference in Django Authentication Views
DESCRIPTION: Reference to the django.contrib.auth.views.login() function, which was affected by the CVE-2017-7233 vulnerability. This function relies on user input for redirecting to an 'on success' URL.

LANGUAGE: python
CODE:
django.contrib.auth.views.login()

----------------------------------------

TITLE: Using select_for_update() with Multi-table Inheritance
DESCRIPTION: Reference to the QuerySet.select_for_update() method bug fix where using 'self' in the 'of' argument with multi-table inheritance incorrectly locked the parent model instead of the queryset's model.

LANGUAGE: python
CODE:
select_for_update(of=('self',))

----------------------------------------

TITLE: Django Admin Documentation View Handler
DESCRIPTION: Reference to callable view objects in django.contrib.admindocs

LANGUAGE: python
CODE:
django.contrib.syndication.views.Feed

----------------------------------------

TITLE: Configuring ArchiveIndexView URL in Django
DESCRIPTION: Example of setting up a URL pattern for ArchiveIndexView using the Article model.

LANGUAGE: python
CODE:
from django.urls import path
from django.views.generic.dates import ArchiveIndexView

from myapp.models import Article

urlpatterns = [
    path(
        "archive/",
        ArchiveIndexView.as_view(model=Article, date_field="pub_date"),
        name="article_archive",
    ),
]

----------------------------------------

TITLE: Using Django Integer Validator
DESCRIPTION: Describes changes to the undocumented validate_integer() function, which now uses a stricter validation method.

LANGUAGE: python
CODE:
validate_integer()

----------------------------------------

TITLE: Correcting Field.has_changed() behavior for disabled form fields in Django
DESCRIPTION: This fix ensures that Field.has_changed() returns False for disabled form fields, including BooleanField, MultipleChoiceField, MultiValueField, FileField, ModelChoiceField, and ModelMultipleChoiceField. It prevents unnecessary form processing for disabled fields.

LANGUAGE: Python
CODE:
Field.has_changed()

----------------------------------------

TITLE: DateDetailView Template in Django
DESCRIPTION: HTML template for rendering the date detail view, displaying the title of an individual article.

LANGUAGE: html
CODE:
<h1>{{ object.title }}</h1>

----------------------------------------

TITLE: Configuring URLconf with String Callback in Django
DESCRIPTION: Shows the old method of defining URL patterns in Django using string references to view functions.

LANGUAGE: Python
CODE:
from django.conf.urls.defaults import *

urlpatterns = patterns("", ("^myview/$", "mysite.myapp.views.myview"))

----------------------------------------

TITLE: Bugfix: Async Signal Handling
DESCRIPTION: Fix for Signal.asend() and asend_robust() crash when all receivers were async functions.

LANGUAGE: python
CODE:
Signal.asend()
Signal.asend_robust()

----------------------------------------

TITLE: Creating a CheckConstraint in Django
DESCRIPTION: Demonstrates how to create a check constraint to ensure the age field is never less than 18. The constraint is added to the model's Meta.constraints option.

LANGUAGE: python
CODE:
CheckConstraint(condition=Q(age__gte=18), name='age_gte_18')

----------------------------------------

TITLE: Fixing Potential DoS in django.utils.text.wrap()
DESCRIPTION: Patch for CVE-2025-26699, addressing a potential denial-of-service vulnerability in the django.utils.text.wrap() function.

LANGUAGE: Python
CODE:
Django 5.1 :commit:`(patch) <8dbb44d34271637099258391dfc79df33951b841>`
Django 5.0 :commit:`(patch) <4f2765232336b8ad0afd8017d9d912ae93470017>`
Django 4.2 :commit:`(patch) <e88f7376fe68dbf4ebaf11fad1513ce700b45860>`

----------------------------------------

TITLE: Improving ModelAdmin List Editable Memory Usage
DESCRIPTION: Fix for a regression introduced in Django 1.10 that caused excessive memory consumption when using the list_editable feature in ModelAdmin.

LANGUAGE: python
CODE:
ModelAdmin.list_editable

----------------------------------------

TITLE: Django Database Field Configuration
DESCRIPTION: Reference to BigAutoField and SmallAutoField subclasses being allowed for DEFAULT_AUTO_FIELD setting, fixing a configuration restriction bug.

LANGUAGE: python
CODE:
BigAutoField, SmallAutoField

----------------------------------------

TITLE: Initializing RangeMaxValueValidator in Django
DESCRIPTION: RangeMaxValueValidator ensures that the upper bound of a range is not greater than a specified limit value. A custom error message can be provided.

LANGUAGE: python
CODE:
RangeMaxValueValidator(limit_value, message=None)

----------------------------------------

TITLE: Implementing AuthorCreateView using Django's CreateView
DESCRIPTION: Example of creating an AuthorCreateView class using Django's CreateView, specifying the model and fields to be included in the form.

LANGUAGE: python
CODE:
from django.views.generic.edit import CreateView
from myapp.models import Author


class AuthorCreateView(CreateView):
    model = Author
    fields = ["name"]

----------------------------------------

TITLE: Backwards-compatible way of calling get_queryset
DESCRIPTION: Shows a backwards-compatible way of calling get_queryset that works with both old and new Django versions.

LANGUAGE: Python
CODE:
get_queryset = (
    some_manager.get_query_set
    if hasattr(some_manager, "get_query_set")
    else some_manager.get_queryset
)
return get_queryset()  # etc

----------------------------------------

TITLE: Using is_safe_url() Function in Django
DESCRIPTION: Illustrates the usage of is_safe_url() function in Django for checking the safety of redirect URLs. This function has been updated to address potential XSS vulnerabilities with URLs containing leading control characters.

LANGUAGE: Python
CODE:
from django.utils.http import is_safe_url

# Check if a URL is safe before using it for redirection
if is_safe_url(next_url, allowed_hosts=None):
    # Perform redirection
else:
    # Handle unsafe URL

----------------------------------------

TITLE: Iterating Error Messages in Django Template
DESCRIPTION: Loops through a list of error messages and displays each one preceded by a bullet point. Uses Django's template language for loop syntax to iterate over the 'errors' context variable.

LANGUAGE: django-template
CODE:
{% for error in errors %}* {{ error }}
{% endfor %}

----------------------------------------

TITLE: URL Validation Enhancement
DESCRIPTION: Fix for URLValidator to prevent URLs with consecutive dots in domain names

LANGUAGE: python
CODE:
"http://example..com/"

----------------------------------------

TITLE: Updating Widget.render() Method Signature
DESCRIPTION: Example of updating a custom Widget's render method to include the new renderer argument.

LANGUAGE: python
CODE:
class MyWidget(forms.Widget):
    def render(self, name, value, attrs=None, renderer=None):
        # Widget rendering code here

----------------------------------------

TITLE: Configuring URL Pattern for a Django View
DESCRIPTION: Shows how to set up a URL pattern for a custom view in Django's urls.py file.

LANGUAGE: python
CODE:
from django.urls import path

from myapp.views import MyView

urlpatterns = [
    path("mine/", MyView.as_view(), name="my-view"),
]

----------------------------------------

TITLE: Using Django Email Validator
DESCRIPTION: References the EmailValidator class in Django's core validators, which has been updated to prohibit newline characters and prevent header injection attacks.

LANGUAGE: python
CODE:
django.core.validators.EmailValidator

----------------------------------------

TITLE: Referencing DomainNameValidator Class in Django
DESCRIPTION: This snippet demonstrates how to reference the DomainNameValidator class from Django's core validators module. It's used in the context of explaining a bugfix related to domain name validation.

LANGUAGE: python
CODE:
:class:`~django.core.validators.DomainNameValidator`

----------------------------------------

TITLE: Creating Debug, Info, Warning, Error, and Critical CheckMessages
DESCRIPTION: Shortcut classes for creating CheckMessage instances with specific severity levels.

LANGUAGE: python
CODE:
Debug(msg, hint=None, obj=None, id=None)
Info(msg, hint=None, obj=None, id=None)
Warning(msg, hint=None, obj=None, id=None)
Error(msg, hint=None, obj=None, id=None)
Critical(msg, hint=None, obj=None, id=None)

----------------------------------------

TITLE: Configuring Custom Header Middleware
DESCRIPTION: Django settings configuration for using the custom header middleware in place of the default RemoteUserMiddleware.

LANGUAGE: python
CODE:
MIDDLEWARE = [
    "...",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "mysite.middleware.CustomHeaderRemoteUserMiddleware",
    "...",
]

----------------------------------------

TITLE: Referencing SplitArrayField in Django
DESCRIPTION: This snippet demonstrates how to reference the SplitArrayField class from the django.contrib.postgres.forms module. It also mentions a fix for a data loss issue when used with ArrayField(BooleanField()).

LANGUAGE: python
CODE:
from django.contrib.postgres.forms import SplitArrayField

----------------------------------------

TITLE: Customizing Label Suffix in Django Form Fields
DESCRIPTION: Demonstrates how to customize the label suffix for individual fields in a Django form.

LANGUAGE: pycon
CODE:
>>> class ContactForm(forms.Form):
...     age = forms.IntegerField()
...     nationality = forms.CharField()
...     captcha_answer = forms.IntegerField(label="2 + 2", label_suffix=" =")
...
>>> f = ContactForm(label_suffix="?")
>>> print(f)
<div><label for="id_age">Age?</label><input type="number" name="age" required id="id_age"></div>
<div><label for="id_nationality">Nationality?</label><input type="text" name="nationality" required id="id_nationality"></div>
<div><label for="id_captcha_answer">2 + 2 =</label><input type="number" name="captcha_answer" required id="id_captcha_answer"></div>

----------------------------------------

TITLE: System Check Test Implementation
DESCRIPTION: Examples of writing tests for system checks, including both basic message comparison and integration testing

LANGUAGE: python
CODE:
from django.core.management import call_command
from django.core.management.base import SystemCheckError
from django.test import SimpleTestCase, modify_settings, override_settings


class SystemCheckIntegrationTest(SimpleTestCase):
    @override_settings(SITE_ID="non_integer")
    @modify_settings(INSTALLED_APPS={"prepend": "django.contrib.sites"})
    def test_non_integer_site_id(self):
        message = "(sites.E101) The SITE_ID setting must be an integer."
        with self.assertRaisesMessage(SystemCheckError, message):
            call_command("check")

----------------------------------------

TITLE: Customizing AdminURLFieldWidget Validation in Django Python
DESCRIPTION: Example of customizing URL validation in AdminURLFieldWidget by passing a custom validator class through formfield_overrides. This prevents XSS attacks by validating URLs before displaying them as clickable links.

LANGUAGE: python
CODE:
AdminURLFieldWidget.__init__(validator_class=CustomURLValidator)

----------------------------------------

TITLE: ModelAdmin Raw ID Fields Configuration - Python/Django
DESCRIPTION: Reference to the ModelAdmin.raw_id_fields configuration that was affected by UUID handling bug

LANGUAGE: python
CODE:
ModelAdmin.raw_id_fields

----------------------------------------

TITLE: WeekArchiveView Template in Django
DESCRIPTION: HTML template for rendering the week archive view, displaying articles and navigation links.

LANGUAGE: html
CODE:
<h1>Week {{ week|date:'W' }}</h1>

<ul>
    {% for article in object_list %}
        <li>{{ article.pub_date|date:"F j, Y" }}: {{ article.title }}</li>
    {% endfor %}
</ul>

<p>
    {% if previous_week %}
        Previous Week: {{ previous_week|date:"W" }} of year {{ previous_week|date:"Y" }}
    {% endif %}
    {% if previous_week and next_week %}--{% endif %}
    {% if next_week %}
        Next week: {{ next_week|date:"W" }} of year {{ next_week|date:"Y" }}
    {% endif %}
</p>

----------------------------------------

TITLE: Referencing ModelAdmin.readonly_fields in Django Admin
DESCRIPTION: This snippet demonstrates the use of ModelAdmin.readonly_fields attribute in Django admin, which was vulnerable to XSS attacks for non-model field attributes prior to this release.

LANGUAGE: python
CODE:
ModelAdmin.readonly_fields

----------------------------------------

TITLE: Referencing Python Classes and Methods
DESCRIPTION: Code references to various Django classes and methods affected by the updates, including datetime handling, text processing, and query operations.

LANGUAGE: Python
CODE:
datetime_safe.datetime.combine
django.utils.text.unescape_entities()
annotate()
select_related()
only()
django.core.servers.basehttp.WSGIServerException

----------------------------------------

TITLE: Referencing Django Command Options in Python
DESCRIPTION: This snippet demonstrates how to reference Django management command options in Python documentation. It shows the syntax for startapp and startproject commands with the --template option.

LANGUAGE: python
CODE:
:option:`startapp --template` and :option:`startproject --template`

----------------------------------------

TITLE: Using Database Cursors as Context Managers
DESCRIPTION: Example showing the new syntax for using database cursors as context managers in Django 1.7

LANGUAGE: python
CODE:
with connection.cursor() as c:
    c.execute(...)

----------------------------------------

TITLE: Fixing Model.full_clean() for GeneratedField in Django 5.0
DESCRIPTION: A bugfix for Django 5.0 that resolves a crash in Model.full_clean() when used with models containing a GeneratedField.

LANGUAGE: python
CODE:
Model.full_clean()

----------------------------------------

TITLE: Django URL Redirection Function Reference
DESCRIPTION: References to Django's authentication view login() and the is_safe_url() utility function that were affected by the security fix. These functions handle URL redirections after successful authentication.

LANGUAGE: python
CODE:
django.contrib.auth.views.login()

LANGUAGE: python
CODE:
django.utils.http.is_safe_url()

----------------------------------------

TITLE: Using transaction context managers in Python 2.5+
DESCRIPTION: Example of using the new transaction context manager functionality added in Django 1.3 for Python 2.5 and above.

LANGUAGE: Python
CODE:
with transaction.autocommit():
    ...

----------------------------------------

TITLE: Importing HTTP Exceptions
DESCRIPTION: Demonstrates how to import HTTP-related exceptions from Django. These exceptions are defined in the django.http module.

LANGUAGE: python
CODE:
from django.http import UnreadablePostError

----------------------------------------

TITLE: Setting up Remote User Authentication Backend
DESCRIPTION: Configuration of authentication backends to use RemoteUserBackend for handling REMOTE_USER authentication.

LANGUAGE: python
CODE:
AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.RemoteUserBackend",
]

----------------------------------------

TITLE: Vulnerable Django Functions and Methods
DESCRIPTION: List of Django functions and methods that were vulnerable to security issues in version 1.11.22, including Truncator methods, strip_tags(), JSONField/HStoreField lookups, and uri_to_iri().

LANGUAGE: python
CODE:
django.utils.text.Truncator.chars(html=True)
django.utils.text.Truncator.words(html=True)
django.utils.html.strip_tags()
django.contrib.postgres.fields.JSONField
django.contrib.postgres.fields.HStoreField
django.utils.encoding.uri_to_iri()

----------------------------------------

TITLE: Disabling Django's Default Logging Configuration
DESCRIPTION: An example of how to disable Django's automatic logging configuration and manually configure logging using Python's logging module.

LANGUAGE: python
CODE:
LOGGING_CONFIG = None

import logging.config

logging.config.dictConfig(...)

----------------------------------------

TITLE: Isolating model registration in Django tests
DESCRIPTION: Example of using the isolate_apps decorator to prevent model pollution in the global registry during tests.

LANGUAGE: Python
CODE:
from django.db import models
from django.test import SimpleTestCase
from django.test.utils import isolate_apps


class TestModelDefinition(SimpleTestCase):
    @isolate_apps("app_label")
    def test_model_definition(self):
        class TestModel(models.Model):
            pass

        ...

----------------------------------------

TITLE: Using login_not_required Decorator
DESCRIPTION: Example of using the login_not_required decorator to make a view accessible without authentication when using LoginRequiredMiddleware.

LANGUAGE: python
CODE:
from django.contrib.auth.decorators import login_not_required

@login_not_required
def contact_us(request): ...

----------------------------------------

TITLE: Updating Admin URLs in Django 1.1
DESCRIPTION: Shows how to update the URLconf to use the new method of including admin URLs in Django 1.1. This change is necessary for reverse URL lookups to work properly in the admin interface.

LANGUAGE: Python
CODE:
(r"^admin/(.*)", admin.site.root),

LANGUAGE: Python
CODE:
(r"^admin/", include(admin.site.urls)),

----------------------------------------

TITLE: Using Salt with Django Signer
DESCRIPTION: Demonstrates how to use salt parameter to create different signing namespaces and prevent signature reuse across different parts of an application.

LANGUAGE: python
CODE:
>>> signer = Signer(salt="extra")
>>> signer.sign("My string")
'My string:YMD-FR6rof3heDkFRffdmG4pXbAZSOtb-aQxg3vmmfc'
>>> signer.sign_object({"message": "Hello!"})
'eyJtZXNzYWdlIjoiSGVsbG8hIn0:-UWSLCE-oUAHzhkHviYz3SOZYBjFKllEOyVZNuUtM-I'

----------------------------------------

TITLE: Creating a GiST Index in Django for PostgreSQL
DESCRIPTION: Shows how to create a GiST (Generalized Search Tree) index using the GistIndex class. Allows manual control of buffering build and tuning the fill factor.

LANGUAGE: python
CODE:
GistIndex(*expressions, buffering=None, fillfactor=None, **options)

----------------------------------------

TITLE: Creating a GiST Index in Django for PostgreSQL
DESCRIPTION: Shows how to create a GiST (Generalized Search Tree) index using the GistIndex class. Allows manual control of buffering build and tuning the fill factor.

LANGUAGE: python
CODE:
GistIndex(*expressions, buffering=None, fillfactor=None, **options)

----------------------------------------

TITLE: Using Property in Django Model
DESCRIPTION: This snippet shows the use of a property in a Django model, which was previously not escaped correctly when used in readonly_fields, posing an XSS risk.

LANGUAGE: python
CODE:
property

----------------------------------------

TITLE: Using raw_id_fields in Django ModelAdmin
DESCRIPTION: Illustrates the use of raw_id_fields in a ModelAdmin class, which was prone to crashes when invalid UUIDs were entered prior to this fix.

LANGUAGE: python
CODE:
class MyModelAdmin(admin.ModelAdmin):
    raw_id_fields = ['uuid_field']

----------------------------------------

TITLE: URL Path Example in Django Admin
DESCRIPTION: Example of a vulnerable admin URL path that could expose sensitive data through query string manipulation before the security fix

LANGUAGE: plaintext
CODE:
"/admin/auth/user/?pop=1&t=password"

----------------------------------------

TITLE: Comparing User Authentication Properties in Django
DESCRIPTION: Demonstrates the ability to compare User.is_authenticated and User.is_anonymous properties using ==, !=, and | operators in Django 1.10.1.

LANGUAGE: Python
CODE:
User.is_authenticated == True
User.is_anonymous != False
User.is_authenticated | User.is_anonymous

----------------------------------------

TITLE: Unsafe URL Redirect Vulnerability
DESCRIPTION: Example of how leading whitespace in URLs could bypass is_safe_url() validation, potentially allowing XSS attacks through JavaScript URLs.

LANGUAGE: text
CODE:
\njavascript:...

----------------------------------------

TITLE: Using django.utils.html.urlize() Function
DESCRIPTION: Reference to urlize and urlizetrunc template filters that were vulnerable to DoS attacks with specific large inputs.

LANGUAGE: python
CODE:
django.utils.html.urlize()

----------------------------------------

TITLE: Generating Available Filename in Django Storage
DESCRIPTION: The method for generating unique filenames when uploading files has been changed to prevent potential denial-of-service attacks. Instead of appending incrementing numbers, it now adds an underscore followed by a random 7-character alphanumeric string.

LANGUAGE: Python
CODE:
Storage.get_available_name()

----------------------------------------

TITLE: GeoDjango Test Runner Class Reference
DESCRIPTION: References to the deprecated function-based test runner and new class-based test runner for GeoDjango tests. The new runner is part of django.contrib.gis.tests module.

LANGUAGE: python
CODE:
django.contrib.gis.tests.run_gis_tests  # deprecated
django.contrib.gis.tests.GeoDjangoTestSuiteRunner  # new class-based runner

----------------------------------------

TITLE: Importing Transaction Exceptions
DESCRIPTION: Demonstrates how to import transaction-related exceptions from Django. These exceptions are defined in the django.db.transaction module.

LANGUAGE: python
CODE:
from django.db.transaction import TransactionManagementError

----------------------------------------

TITLE: Loading Apache Authentication Modules
DESCRIPTION: Apache configuration for loading required authentication modules mod_auth_basic and mod_authz_user.

LANGUAGE: apache
CODE:
LoadModule auth_basic_module modules/mod_auth_basic.so
LoadModule authz_user_module modules/mod_authz_user.so

----------------------------------------

TITLE: Initializing and Using Django Signer
DESCRIPTION: Demonstrates basic usage of Django's Signer class to sign and unsign string values using the default SECRET_KEY.

LANGUAGE: python
CODE:
>>> from django.core.signing import Signer
>>> signer = Signer()
>>> value = signer.sign("My string")
>>> value
'My string:v9G-nxfz3iQGTXrePqYPlGvH79WTcIgj1QIQSUODTW0'
>>> original = signer.unsign(value)
>>> original
'My string'

----------------------------------------

TITLE: Using for Tag to Unpack Iterables in Django Templates
DESCRIPTION: Shows the reallowed functionality of the {% for %} tag to unpack any iterable in Django 1.10.1 templates.

LANGUAGE: Django Template
CODE:
{% for item in iterable %}
    {{ item }}
{% endfor %}

----------------------------------------

TITLE: Functional Indexes Example
DESCRIPTION: Example demonstrating how to create functional indexes on model expressions and database functions

LANGUAGE: Python
CODE:
from django.db import models
from django.db.models import F, Index, Value
from django.db.models.functions import Lower, Upper

class MyModel(models.Model):
    first_name = models.CharField(max_length=255)
    last_name = models.CharField(max_length=255)
    height = models.IntegerField()
    weight = models.IntegerField()

    class Meta:
        indexes = [
            Index(
                Lower("first_name"),
                Upper("last_name").desc(),
                name="first_last_name_idx",
            ),
            Index(
                F("height") / (F("weight") + Value(5)),
                name="calc_idx",
            ),
        ]

----------------------------------------

TITLE: Configuring Password Hashers for Faster Django Tests
DESCRIPTION: This snippet shows how to configure a faster password hasher for Django tests to improve performance when authenticating many users in tests.

LANGUAGE: Python
CODE:
PASSWORD_HASHERS = [
    "django.contrib.auth.hashers.MD5PasswordHasher",
]

----------------------------------------

TITLE: Configuring Git User Settings for Django Development
DESCRIPTION: Initial Git configuration commands to set up user name and email for commit identification.

LANGUAGE: shell
CODE:
$ git config --global user.name "Your Real Name"
$ git config --global user.email "you@email.com"

----------------------------------------

TITLE: Demonstrating strip_tags() Usage in Python
DESCRIPTION: Shows the potential security risk of using strip_tags() without proper escaping. This function now returns the original input if it detects an increase in string length during processing.

LANGUAGE: Python
CODE:
from django.utils.html import strip_tags, escape

# Unsafe usage
unsafe_result = strip_tags(user_input)

# Safe usage
safe_result = escape(strip_tags(user_input))

----------------------------------------

TITLE: JavaScript Security Fix - Replacing innerHTML with textContent
DESCRIPTION: Security update to prevent XSS attacks in Django admin by replacing unsafe Element.innerHTML with Element.textContent for handling popup content.

LANGUAGE: javascript
CODE:
Element.textContent

----------------------------------------

TITLE: Adding background image to Django polls app stylesheet
DESCRIPTION: This CSS snippet shows how to add a background image to the body of a Django polls application. It sets a white background color and adds a non-repeating background image.

LANGUAGE: css
CODE:
body {
    background: white url("images/background.png") no-repeat;
}

----------------------------------------

TITLE: Implementing Custom Comment Manager in Django
DESCRIPTION: Example of creating a custom comment manager to restore banned users group functionality that was removed in Django 1.4.

LANGUAGE: Python
CODE:
from django.conf import settings
from django.contrib.comments.managers import CommentManager

class BanningCommentManager(CommentManager):
    def get_query_set(self):
        qs = super().get_query_set()
        if getattr(settings, "COMMENTS_BANNED_USERS_GROUP", None):
            where = [
                "user_id NOT IN (SELECT user_id FROM auth_user_groups WHERE group_id = %s)"
            ]
            params = [settings.COMMENTS_BANNED_USERS_GROUP]
            qs = qs.extra(where=where, params=params)
        return qs

----------------------------------------

TITLE: Querying PostgreSQL Indexes with NULL Text Casting
DESCRIPTION: SQL query to identify indexes in PostgreSQL that contain unnecessary ::text casting for NULL checks. This helps identify indexes that may need to be recreated after the Django 4.2.6 bug fix.

LANGUAGE: sql
CODE:
SELECT indexname, indexdef
FROM pg_indexes
WHERE indexdef LIKE '%::text IS %NULL';

----------------------------------------

TITLE: PostgreSQL Index Fix - CharField and TextField Pattern Operations
DESCRIPTION: Bug fix implementing varchar_pattern_ops and text_pattern_ops indexes when using AddField with CharField and TextField on PostgreSQL.

LANGUAGE: sql
CODE:
varchar_pattern_ops

LANGUAGE: sql
CODE:
text_pattern_ops

----------------------------------------

TITLE: Security Issue: Cache Storage URL Example
DESCRIPTION: Example of unsafe URL pattern that could be used for cache poisoning prior to the security fix. This demonstrates the format of malformed URLs that were previously not properly validated.

LANGUAGE: plaintext
CODE:
http:\\\djangoproject.com

----------------------------------------

TITLE: Configuring Django Logging to Silence Specific SuspiciousOperation
DESCRIPTION: This snippet demonstrates how to configure Django logging to silence a specific type of SuspiciousOperation, in this case, DisallowedHost.

LANGUAGE: python
CODE:
LOGGING = {
    # ...
    "handlers": {
        "null": {
            "class": "logging.NullHandler",
        },
    },
    "loggers": {
        "django.security.DisallowedHost": {
            "handlers": ["null"],
            "propagate": False,
        },
    },
    # ...
}

----------------------------------------

TITLE: Apache mod_wsgi Daemon Mode Configuration
DESCRIPTION: Configuration for running mod_wsgi in daemon mode with process group settings and Python path configuration.

LANGUAGE: apache
CODE:
WSGIDaemonProcess example.com python-home=/path/to/venv python-path=/path/to/mysite.com
WSGIProcessGroup example.com

----------------------------------------

TITLE: Implementing Secret Key Rotation in Django
DESCRIPTION: Example of implementing secret key rotation using SECRET_KEY_FALLBACKS for managing current and old secret keys.

LANGUAGE: python
CODE:
import os

SECRET_KEY = os.environ["CURRENT_SECRET_KEY"]
SECRET_KEY_FALLBACKS = [
    os.environ["OLD_SECRET_KEY"],
]

----------------------------------------

TITLE: Uploading Files in POST Requests
DESCRIPTION: Demonstrates how to upload files in POST requests using the Django test client.

LANGUAGE: python
CODE:
>>> c = Client()
>>> with open("wishlist.doc", "rb") as fp:
...     c.post("/customers/wishes/", {"name": "fred", "attachment": fp})

----------------------------------------

TITLE: Creating and Managing Feature Branches
DESCRIPTION: Commands for creating new feature branches and managing commits for ticket work.

LANGUAGE: shell
CODE:
git checkout -b ticket_xxxxx upstream/main
git commit
git commit -m 'Added two more tests for edge cases'

----------------------------------------

TITLE: Combining PostgreSQL Search Queries
DESCRIPTION: Fix to allow multiple AND (&) or OR (|) operators with contrib.postgres.search.SearchQuery.

LANGUAGE: python
CODE:
contrib.postgres.search.SearchQuery

----------------------------------------

TITLE: Querying Admin Change Form in Django
DESCRIPTION: An example of a potential security vulnerability in older Django versions, where modifying query parameters could reveal sensitive data. This has been addressed by raising an exception for invalid 'to_field' values.

LANGUAGE: Python
CODE:
"/admin/auth/user/?_popup=1&t=password"

----------------------------------------

TITLE: Django redirect() with View Name
DESCRIPTION: Example showing redirect to a named view with additional parameters.

LANGUAGE: python
CODE:
def my_view(request):
    ...
    return redirect("some-view-name", foo="bar")

----------------------------------------

TITLE: Building Django Documentation with Sphinx (Windows)
DESCRIPTION: Commands for building local HTML documentation on Windows systems using the batch file.

LANGUAGE: bat
CODE:
cd path\to\django\docs
make.bat html

----------------------------------------

TITLE: Vulnerable Date Template Filter Usage in Django
DESCRIPTION: Example of a potential security vulnerability in Django's date template filter where unvalidated user input could be used to access settings values. This demonstrates the security issue that was fixed in version 1.7.11.

LANGUAGE: python
CODE:
{{ last_updated|date:user_date_format }}

----------------------------------------

TITLE: Security Fix: Validator Regular Expression Pattern
DESCRIPTION: Fix for validator regex patterns that previously used $ instead of \Z, which allowed newline characters and potential header injection attacks

LANGUAGE: Python
CODE:
validate_ipv4_address()
validate_slug()
URLValidator()
validate_integer()

----------------------------------------

TITLE: Accessing GDAL Layer Properties in Python
DESCRIPTION: Demonstrates accessing properties and features of a GDAL Layer object

LANGUAGE: python
CODE:
>>> for layer in ds:
...     print('Layer "%s": %i %ss' % (layer.name, len(layer), layer.geom_type.name))
...
Layer "cities": 3 Points

----------------------------------------

TITLE: Security Check Function for URL Redirects in Django
DESCRIPTION: Reference to the django.utils.http.is_safe_url() function, which was responsible for checking the safety of redirect URLs. This function incorrectly considered some numeric URLs as safe.

LANGUAGE: python
CODE:
django.utils.http.is_safe_url()

----------------------------------------

TITLE: Database Query Fixes in Django 4.2.2
DESCRIPTION: Fixed database-related regressions including Oracle text field handling, JSON field preparation, query set operations with various field types, and SQLite decimal field filtering.

LANGUAGE: python
CODE:
QuerySet.defer()  # Fixed handling of ManyToManyField and GenericForeignKey
QuerySet.only()   # Fixed handling of reverse OneToOneField
QuerySet.aggregate()  # Fixed handling of expressions with other aggregates
DBMS_LOB.SUBSTR()  # Removed unnecessary wrapping for TextField/BinaryField

----------------------------------------

TITLE: Correcting Django QuerySet Aggregation with Default
DESCRIPTION: Fixes a crash in QuerySet.aggregate() after annotate() on an aggregate function with a default.

LANGUAGE: Python
CODE:
QuerySet.aggregate()

----------------------------------------

TITLE: Using Debug Template Tag in Django Templates
DESCRIPTION: The {% debug %} template tag vulnerability fix changes its behavior to prevent XSS attacks. The tag no longer outputs information when DEBUG is False and properly escapes context variables when DEBUG is True.

LANGUAGE: django
CODE:
{% debug %}

----------------------------------------

TITLE: Vulnerable URL Pattern Example
DESCRIPTION: Example of potentially malicious URL patterns that were previously considered safe by Django's URL validation, including JavaScript injection attempts with control characters.

LANGUAGE: text
CODE:
\x08javascript:...

LANGUAGE: text
CODE:
%08//example.com

----------------------------------------

TITLE: Defining Author Model in Django
DESCRIPTION: Example model definition used in function examples

LANGUAGE: python
CODE:
class Author(models.Model):
    name = models.CharField(max_length=50)
    age = models.PositiveIntegerField(null=True, blank=True)
    alias = models.CharField(max_length=50, null=True, blank=True)
    goes_by = models.CharField(max_length=50, null=True, blank=True)

----------------------------------------

TITLE: Installing uWSGI with pip in Python
DESCRIPTION: Commands to install the current stable version or long-term support version of uWSGI using pip.

LANGUAGE: console
CODE:
# Install current stable version.
$ python -m pip install uwsgi

# Or install LTS (long term support).
$ python -m pip install https://projects.unbit.it/downloads/uwsgi-lts.tar.gz

----------------------------------------

TITLE: Django WSGI Script with Authentication
DESCRIPTION: WSGI script configuration that ties Apache authentication to Django's authentication system.

LANGUAGE: python
CODE:
import os

os.environ["DJANGO_SETTINGS_MODULE"] = "mysite.settings"

from django.contrib.auth.handlers.modwsgi import check_password

from django.core.handlers.wsgi import WSGIHandler

application = WSGIHandler()

----------------------------------------

TITLE: Running Django Tests with Deprecation Warnings
DESCRIPTION: This command shows how to run the full Django test suite with deprecation warnings enabled, which is useful after upgrading to a new Django version.

LANGUAGE: bash
CODE:
$ python -Wa manage.py test

----------------------------------------

TITLE: Pushing Django Release Tag
DESCRIPTION: Push the new release tag and changes to the remote repository.

LANGUAGE: shell
CODE:
$ git push
$ git push --tags

----------------------------------------

TITLE: Django Settings Configuration
DESCRIPTION: Security-related settings for ALLOWED_HOSTS and DEBUG flags to prevent DNS rebinding attacks

LANGUAGE: python
CODE:
settings.ALLOWED_HOSTS = ['localhost', '127.0.0.1', '::1']

LANGUAGE: python
CODE:
settings.DEBUG = True

----------------------------------------

TITLE: Handling empty FormSet data
DESCRIPTION: Example showing how empty FormSet data now raises a ValidationError in Django 1.3.

LANGUAGE: Python
CODE:
class ArticleForm(Form):
    title = CharField()
    pub_date = DateField()

ArticleFormSet = formset_factory(ArticleForm)

# This will now raise ValidationError
ArticleFormSet({})

# Use this instead for an empty FormSet
formset = ArticleFormSet()
formset = ArticleFormSet(data=None)

----------------------------------------

TITLE: Serving Media Files in Django Development Environment
DESCRIPTION: This snippet demonstrates how to serve user-uploaded content from MEDIA_ROOT in a Django development environment. It adds a URL pattern to the URLconf that uses the django.views.static.serve view to handle requests for media files.

LANGUAGE: Python
CODE:
from django.conf import settings
from django.urls import re_path
from django.views.static import serve

# ... the rest of your URLconf goes here ...

if settings.DEBUG:
    urlpatterns += [
        re_path(
            r"^media/(?P<path>.*)$",
            serve,
            {
                "document_root": settings.MEDIA_ROOT,
            },
        ),
    ]

----------------------------------------

TITLE: Configuring Universal Access in robots.txt for Django
DESCRIPTION: This snippet defines a robots.txt file that allows all user agents to access the entire website. It uses the standard robots.txt syntax to specify no restrictions for any user agent.

LANGUAGE: plaintext
CODE:
User-Agent: *


----------------------------------------

TITLE: Adding name to sitemap URL in Django 1.8
DESCRIPTION: Example of adding the name argument to the URL that references the sitemap view for compatibility with reversing by Python path.

LANGUAGE: Python
CODE:
from django.contrib.sitemaps.views import sitemap

url(
    r"^sitemap\.xml$",
    sitemap,
    {"sitemaps": sitemaps},
    name="django.contrib.sitemaps.views.sitemap",
)

----------------------------------------

TITLE: Fixing GenericRelation queryset with proxy model in Django
DESCRIPTION: This fix addresses a queryset crash that occurred when using a GenericRelation to a proxy model. It ensures proper handling of proxy models in generic relations, preventing unexpected errors in queryset operations.

LANGUAGE: Python
CODE:
GenericRelation

----------------------------------------

TITLE: Filtering Companies with Double Employees to Chairs Ratio in Django
DESCRIPTION: Shows two equivalent ways to filter companies with at least twice as many employees as chairs.

LANGUAGE: pycon
CODE:
>>> Company.objects.filter(num_employees__gt=F("num_chairs") * 2)
>>> Company.objects.filter(num_employees__gt=F("num_chairs") + F("num_chairs"))

----------------------------------------

TITLE: Fixing When Expression with List Argument
DESCRIPTION: Fix for a regression where When() expression with a list argument would crash

LANGUAGE: python
CODE:
When()

----------------------------------------

TITLE: Django Validator Class References
DESCRIPTION: References to Django validator classes affected by the IPv4 security vulnerability

LANGUAGE: python
CODE:
django.core.validators.URLValidator
django.core.validators.validate_ipv4_address
django.core.validators.validate_ipv46_address

----------------------------------------

TITLE: Decorator for Fixture Loading Signals
DESCRIPTION: Custom decorator implementation to disable signal handlers during fixture loading.

LANGUAGE: python
CODE:
from functools import wraps


def disable_for_loaddata(signal_handler):
    """
    Decorator that turns off signal handlers when loading fixture data.
    """

    @wraps(signal_handler)
    def wrapper(*args, **kwargs):
        if kwargs["raw"]:
            return
        signal_handler(*args, **kwargs)

    return wrapper


@disable_for_loaddata
def my_handler(**kwargs): ...

----------------------------------------

TITLE: Using Django HTTP Response
DESCRIPTION: Mentions the HttpResponse class, which prohibits newlines in HTTP headers to prevent header injection attacks.

LANGUAGE: python
CODE:
django.http.HttpResponse

----------------------------------------

TITLE: Custom Database Model Loading
DESCRIPTION: Example showing how to customize model instance creation when loading from database by implementing from_db()

LANGUAGE: python
CODE:
from django.db.models import DEFERRED

@classmethod
def from_db(cls, db, field_names, values):
    instance = cls(*values)
    instance._state.adding = False
    instance._state.db = db
    instance._loaded_values = dict(
        zip(field_names, (value for value in values if value is not DEFERRED))
    )
    return instance

----------------------------------------

TITLE: Applying WSGI Middleware in Django
DESCRIPTION: This snippet demonstrates how to wrap the Django WSGI application object with custom middleware. It imports a HelloWorldApplication and applies it to the existing application.

LANGUAGE: Python
CODE:
from helloworld.wsgi import HelloWorldApplication

application = HelloWorldApplication(application)

----------------------------------------

TITLE: UTF-8 Environment Configuration for File Uploads
DESCRIPTION: Shell environment configuration to support UTF-8 encoding for file uploads with non-ASCII characters.

LANGUAGE: shell
CODE:
export LANG='en_US.UTF-8'
export LC_ALL='en_US.UTF-8'

----------------------------------------

TITLE: Custom User Form with Username Length Limit (Python)
DESCRIPTION: Example of customizing form validation to preserve the 30-character username limit when using Django's AbstractUser model.

LANGUAGE: python
CODE:
from django.contrib.auth.forms import UserCreationForm

class MyUserCreationForm(UserCreationForm):
    username = forms.CharField(
        max_length=30,
        help_text="Required. 30 characters or fewer. Letters, digits and @/./+/-/_ only.",
    )

----------------------------------------

TITLE: Using QuerySet Methods in Django ORM
DESCRIPTION: Demonstrates the use of values_list() method with flat=True parameter, followed by an annotate() call. This combination was affected by a regression fixed in this release.

LANGUAGE: python
CODE:
QuerySet.values_list(..., flat=True).annotate()

----------------------------------------

TITLE: Demonstrating Potential Security Vulnerability in Django Date Filter
DESCRIPTION: This snippet illustrates a potential security issue where unvalidated user input could be used to access sensitive settings information through the date template filter.

LANGUAGE: Django Template
CODE:
{{ last_updated|date:user_date_format }}

----------------------------------------

TITLE: Affected Django Components for File Upload Security Issue
DESCRIPTION: Lists the Django components affected by CVE-2021-31542 security vulnerability related to directory traversal in file uploads. The issue impacts MultiPartParser, UploadedFile, and FieldFile components where maliciously crafted filenames could enable directory traversal attacks.

LANGUAGE: python
CODE:
MultiPartParser, UploadedFile, FieldFile

----------------------------------------

TITLE: Hardcoding Flatpage URLs in URLconf
DESCRIPTION: Shows how to hardcode specific flatpage URLs in the URLconf for known pages, allowing them to be referenced with the url template tag.

LANGUAGE: python
CODE:
from django.contrib.flatpages import views

urlpatterns += [
    path("about-us/", views.flatpage, {"url": "/about-us/"}, name="about"),
    path("license/", views.flatpage, {"url": "/license/"}, name="license"),
]

----------------------------------------

TITLE: Using ArrayAgg and StringAgg with ordering in Django 2.2.1
DESCRIPTION: Fixed a crash when using the ordering argument in ArrayAgg and StringAgg aggregates with expressions containing params.

LANGUAGE: python
CODE:
from django.contrib.postgres.aggregates import ArrayAgg, StringAgg

ArrayAgg('field', ordering=('expression_with_params',))
StringAgg('field', delimiter=',', ordering=('expression_with_params',))

----------------------------------------

TITLE: Fixing JSONField CheckConstraints Validation in Django 4.2
DESCRIPTION: Resolves a regression in Django 4.2 that caused incorrect validation of CheckConstraints on __isnull lookups against JSONField.

LANGUAGE: python
CODE:
CheckConstraints

----------------------------------------

TITLE: Reference to Django Admin Module
DESCRIPTION: Reference to the Django admin documentation module used in the security context

LANGUAGE: python
CODE:
django.contrib.admindocs

----------------------------------------

TITLE: Signal Handler for Fixture Loading
DESCRIPTION: Implementation of a signal handler that handles fixture loading scenarios with raw data flag.

LANGUAGE: python
CODE:
from django.db.models.signals import post_save
from .models import MyModel


def my_handler(**kwargs):
    # disable the handler during fixture loading
    if kwargs["raw"]:
        return
    ...

----------------------------------------

TITLE: GDAL Exception Handling
DESCRIPTION: Resolution for GDALException issues raised by GDALClose when using GDAL version 2.0 or higher.

LANGUAGE: Python
CODE:
GDALClose

----------------------------------------

TITLE: Model Validation Implementation
DESCRIPTION: Example showing implementation of custom model validation logic

LANGUAGE: python
CODE:
import datetime
from django.core.exceptions import ValidationError
from django.db import models
from django.utils.translation import gettext_lazy as _

class Article(models.Model):
    def clean(self):
        if self.status == "draft" and self.pub_date is not None:
            raise ValidationError(_("Draft entries may not have a publication date."))
        if self.status == "published" and self.pub_date is None:
            self.pub_date = datetime.date.today()

----------------------------------------

TITLE: Creating YAML Fixture for Django Person Model
DESCRIPTION: Example of a YAML fixture format for initializing a Person model with two records. Demonstrates the more concise YAML syntax for defining model data in Django fixtures.

LANGUAGE: yaml
CODE:
- model: myapp.person
  pk: 1
  fields:
    first_name: John
    last_name: Lennon
- model: myapp.person
  pk: 2
  fields:
    first_name: Paul
    last_name: McCartney

----------------------------------------

TITLE: Running Django with Daphne
DESCRIPTION: Command to start the Daphne server process for a Django project. It requires specifying the ASGI application module and object name.

LANGUAGE: shell
CODE:
daphne myproject.asgi:application

----------------------------------------

TITLE: Setting request encoding for form data processing
DESCRIPTION: Example of how to set a custom encoding for processing form data in a Django view, useful when dealing with legacy systems using non-UTF-8 encodings.

LANGUAGE: python
CODE:
def some_view(request):
    # We know that the data must be encoded as KOI8-R (for some reason).
    request.encoding = "koi8-r"
    ...

----------------------------------------

TITLE: WSGI Header Processing Example
DESCRIPTION: Demonstrates how HTTP headers are normalized in WSGI environment by converting to uppercase and replacing dashes with underscores. Shows potential security vulnerability with header name conflation.

LANGUAGE: plaintext
CODE:
X-Auth-User -> HTTP_X_AUTH_USER
X-Auth_User -> HTTP_X_AUTH_USER

----------------------------------------

TITLE: Fixing Oracle Authentication with Special Character Passwords
DESCRIPTION: Addresses a bug where Oracle database authentication fails when user passwords begin with numbers or special characters by properly quoting the password in queries.

LANGUAGE: SQL
CODE:
-- Example fix implementation:
-- Before: CREATE USER test_user IDENTIFIED BY 1password;
-- After: CREATE USER test_user IDENTIFIED BY "1password";

----------------------------------------

TITLE: Fixing Class-based View Names on Django Debug Pages
DESCRIPTION: Corrects the display of class-based view names on the technical 404 debug page and the ResolverMatch repr.



----------------------------------------

TITLE: Creating a GIN Index for Full Text Search in Django
DESCRIPTION: Shows how to create a GIN index to improve performance for full text search queries.

LANGUAGE: python
CODE:
GinIndex(
    SearchVector("body_text", "headline", config="english"),
    name="search_vector_idx",
)

----------------------------------------

TITLE: Session Management with SessionBase.pop()
DESCRIPTION: Fixed regression in SessionBase.pop() method to properly raise KeyError for nonexistent values instead of returning None.

LANGUAGE: Python
CODE:
SessionBase.pop()

----------------------------------------

TITLE: Setting Default Auto Field Type
DESCRIPTION: Example showing how to configure the default primary key field type on a per-app or per-model basis

LANGUAGE: Python
CODE:
DEFAULT_AUTO_FIELD = "django.db.models.AutoField"

LANGUAGE: Python
CODE:
from django.apps import AppConfig

class MyAppConfig(AppConfig):
    default_auto_field = "django.db.models.AutoField"
    name = "my_app"

LANGUAGE: Python
CODE:
from django.db import models

class MyModel(models.Model):
    id = models.AutoField(primary_key=True)

----------------------------------------

TITLE: Converting IRI to URI using Django's iri_to_uri function
DESCRIPTION: Demonstrates the use of Django's iri_to_uri function to convert an Internationalized Resource Identifier (IRI) to a URI, ensuring proper encoding of non-ASCII characters.

LANGUAGE: python
CODE:
>>> from urllib.parse import quote
>>> from django.utils.encoding import iri_to_uri
>>> quote("Paris & Orléans")
'Paris%20%26%20Orl%C3%A9ans'
>>> iri_to_uri("/favorites/François/%s" % quote("Paris & Orléans"))
'/favorites/Fran%C3%A7ois/Paris%20%26%20Orl%C3%A9ans'

----------------------------------------

TITLE: Using Composite Primary Keys in Django Shell
DESCRIPTION: Interactive example showing how to create and query objects with composite primary keys in Django shell.

LANGUAGE: python
CODE:
>>> product = Product.objects.create(name="apple")
>>> order = Order.objects.create(reference="A755H")
>>> item = OrderLineItem.objects.create(product=product, order=order, quantity=1)
>>> item.pk
(1, "A755H")

----------------------------------------

TITLE: Defining Age Constraint on Customer Model
DESCRIPTION: Example demonstrating how to add a check constraint to ensure customer age is at least 18

LANGUAGE: python
CODE:
from django.db import models

class Customer(models.Model):
    age = models.IntegerField()

    class Meta:
        constraints = [
            models.CheckConstraint(condition=models.Q(age__gte=18), name="age_gte_18"),
        ]

----------------------------------------

TITLE: Testing ReportLab Installation in Python
DESCRIPTION: Python interactive interpreter command to test if ReportLab is installed correctly by importing it.

LANGUAGE: python
CODE:
>>> import reportlab

----------------------------------------

TITLE: Acquiring CSRF Token from Cookie (JavaScript)
DESCRIPTION: JavaScript function to retrieve the CSRF token from the 'csrftoken' cookie when CSRF_USE_SESSIONS and CSRF_COOKIE_HTTPONLY are False.

LANGUAGE: javascript
CODE:
function getCookie(name) {
    let cookieValue = null;
    if (document.cookie && document.cookie !== '') {
        const cookies = document.cookie.split(';');
        for (let i = 0; i < cookies.length; i++) {
            const cookie = cookies[i].trim();
            // Does this cookie string begin with the name we want?
            if (cookie.substring(0, name.length + 1) === (name + '=')) {
                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                break;
            }
        }
    }
    return cookieValue;
}
const csrftoken = getCookie('csrftoken');

----------------------------------------

TITLE: Dynamic Module Loading in Django
DESCRIPTION: Function for dynamically importing Python modules in Django

LANGUAGE: Python
CODE:
from django.utils.module_loading import import_string

MyClass = import_string('path.to.my.Class')

----------------------------------------

TITLE: WSGI Environment Header Example
DESCRIPTION: Demonstrates how HTTP headers are normalized in WSGI environment by converting to uppercase and replacing dashes with underscores.

LANGUAGE: text
CODE:
X-Auth-User -> HTTP_X_AUTH_USER

----------------------------------------

TITLE: Adding Data Admin UTC Offset Attribute in Custom Admin Templates
DESCRIPTION: This snippet references an HTML attribute that should be present in custom admin templates to avoid incorrect timezone warnings.

LANGUAGE: HTML
CODE:
data-admin-utc-offset

----------------------------------------

TITLE: Using django.utils.archive.extract() Function
DESCRIPTION: Reference to the archive.extract() function that was vulnerable to directory traversal attacks via archives containing absolute paths or relative paths with dot segments. Used by startapp --template and startproject --template commands.

LANGUAGE: python
CODE:
django.utils.archive.extract()

----------------------------------------

TITLE: Using Optional CharField in Django Forms
DESCRIPTION: Demonstrates how to create an optional CharField by setting required=False, and shows its behavior with various input types.

LANGUAGE: pycon
CODE:
>>> f = forms.CharField(required=False)
>>> f.clean("foo")
'foo'
>>> f.clean("")
''
>>> f.clean(None)
''
>>> f.clean(0)
'0'
>>> f.clean(True)
'True'
>>> f.clean(False)
'False'

----------------------------------------

TITLE: Handling Database Aliases in Django Test Suite
DESCRIPTION: Improvements to DjangoTestSuiteRunner to properly handle aliases for the default database during setup and teardown of test databases.

LANGUAGE: Python
CODE:
DjangoTestSuiteRunner.setup_databases()

----------------------------------------

TITLE: Fixed IPv6 Address Validation Functions in Django
DESCRIPTION: Reference to the fixed validate_ipv6_address() and validate_ipv46_address() functions that previously crashed when handling non-string values. This bugfix resolves ticket #36098.

LANGUAGE: python
CODE:
validate_ipv6_address()
validate_ipv46_address()

----------------------------------------

TITLE: Correcting File Response Closure for Temporary Files
DESCRIPTION: Fixes a regression (ticket #31240) in Django 3.0 where a file response using a temporary file was being closed incorrectly.

LANGUAGE: Python
CODE:
# No specific code provided, but the fix ensures proper closure of file responses using temporary files.

----------------------------------------

TITLE: Safe String Handling in Django
DESCRIPTION: Classes and functions for working with safe strings in Django templates

LANGUAGE: Python
CODE:
from django.utils.safestring import mark_safe

safe_html = mark_safe("<b>Bold text</b>")

----------------------------------------

TITLE: Initializing SimpleTemplateResponse in Python
DESCRIPTION: Instantiates a SimpleTemplateResponse object with various parameters including template, context, content type, HTTP status, charset, template engine, and headers.

LANGUAGE: python
CODE:
SimpleTemplateResponse.__init__(template, context=None, content_type=None, status=None, charset=None, using=None, headers=None)

----------------------------------------

TITLE: Django URL Configuration with Custom Domain
DESCRIPTION: Example of configuring URL-related settings like allowed hosts and URL redirects.

LANGUAGE: python
CODE:
ABSOLUTE_URL_OVERRIDES = {
    "blogs.blog": lambda o: "/blogs/%s/" % o.slug,
    "news.story": lambda o: "/stories/%s/%s/" % (o.pub_year, o.slug),
}

----------------------------------------

TITLE: Creating a Django Template for Displaying Questions
DESCRIPTION: This HTML template uses Django template language to display a list of questions. It includes conditional logic and looping to render the question list.

LANGUAGE: html
CODE:
{% if latest_question_list %}
    <ul>
    {% for question in latest_question_list %}
        <li><a href="/polls/{{ question.id }}/">{{ question.question_text }}</a></li>
    {% endfor %}
    </ul>
{% else %}
    <p>No polls are available.</p>
{% endif %}

----------------------------------------

TITLE: Running Django Migrations for Core Tables
DESCRIPTION: Execute Django migrations to install necessary database records such as admin permissions and content types after integrating with a legacy database.

LANGUAGE: shell
CODE:
$ python manage.py migrate

----------------------------------------

TITLE: Caching HTTP Response Headers in Django
DESCRIPTION: Functions for manipulating cache-related HTTP headers in Django responses

LANGUAGE: Python
CODE:
from django.utils.cache import patch_cache_control

patch_cache_control(response, max_age=3600)

----------------------------------------

TITLE: Using FilteredRelation() in Django QuerySets
DESCRIPTION: This code reference relates to a bug fix for multiple FilteredRelation() relationships to the same field, which was a regression in Django 4.0. The fix ensures proper handling of these relationships.

LANGUAGE: python
CODE:
FilteredRelation()

----------------------------------------

TITLE: Django Settings Configuration for Host Validation
DESCRIPTION: Shows the default allowed hosts configuration when DEBUG=True. These localhost variations are automatically allowed for development convenience if ALLOWED_HOSTS is empty.

LANGUAGE: python
CODE:
['localhost', '127.0.0.1', '::1']

----------------------------------------

TITLE: Fixed JSONField Lookup Operations in Django 2.1.14
DESCRIPTION: Bug fix for Django's PostgreSQL JSONField that addresses crashes when using contains, contained_by, has_key, has_keys, or has_any_keys lookups with key transforms.

LANGUAGE: python
CODE:
django.contrib.postgres.fields.JSONField

----------------------------------------

TITLE: Using SchemaEditor Context Manager in Django
DESCRIPTION: Demonstrates how to use the SchemaEditor context manager to delete a model from the database. The context manager handles transactions and deferred SQL operations.

LANGUAGE: python
CODE:
with connection.schema_editor() as schema_editor:
    schema_editor.delete_model(MyModel)

----------------------------------------

TITLE: Correcting QuerySet Ordered Attribute Behavior
DESCRIPTION: Fix for QuerySet.ordered attribute incorrectly returning True for GROUP BY queries on models with Meta.ordering

LANGUAGE: python
CODE:
.annotate().values()

----------------------------------------

TITLE: Updating a model instance with a specific primary key
DESCRIPTION: Example of using update_or_create() or filter().update() to update an existing model instance with a specific primary key value, instead of using Model.save() with a default primary key value.

LANGUAGE: python
CODE:
MyModel.objects.update_or_create(pk=existing_pk, defaults={"name": "new name"})
MyModel.objects.filter(pk=existing_pk).update(name="new name")

----------------------------------------

TITLE: Registering a post_migrate Signal Handler in AppConfig
DESCRIPTION: Example of registering a callback function for the post_migrate signal within an AppConfig class.

LANGUAGE: python
CODE:
from django.apps import AppConfig
from django.db.models.signals import post_migrate

def my_callback(sender, **kwargs):
    # Your specific logic here
    pass

class MyAppConfig(AppConfig):
    ...

    def ready(self):
        post_migrate.connect(my_callback, sender=self)

----------------------------------------

TITLE: Setting Up Catchall Pattern for Flatpages in URLconf
DESCRIPTION: Demonstrates how to set up a catchall pattern for flatpages in the URLconf. This should be placed at the end of other URL patterns.

LANGUAGE: python
CODE:
from django.contrib.flatpages import views

# Your other patterns here
urlpatterns += [
    re_path(r"^(?P<url>.*/)$", views.flatpage),
]

----------------------------------------

TITLE: Implementing get_absolute_url with proper URL encoding
DESCRIPTION: Example of a get_absolute_url method that correctly encodes non-ASCII characters in a URL using the quote and iri_to_uri functions.

LANGUAGE: python
CODE:
from urllib.parse import quote
from django.utils.encoding import iri_to_uri


def get_absolute_url(self):
    url = "/person/%s/?x=0&y=0" % quote(self.location)
    return iri_to_uri(url)

----------------------------------------

TITLE: Checking Django Version via Command Line
DESCRIPTION: Command to verify Django installation and check its version.

LANGUAGE: console
CODE:
$ python -m django --version

----------------------------------------

TITLE: Building Django Documentation with Sphinx (Unix)
DESCRIPTION: Commands for installing Sphinx and building local HTML documentation on Unix-like systems.

LANGUAGE: console
CODE:
$ python -m pip install Sphinx
$ cd path/to/django/docs
$ make html

----------------------------------------

TITLE: Using Validator with Django Model Field
DESCRIPTION: Shows how to apply a custom validator to a Django model field using the validators argument.

LANGUAGE: python
CODE:
from django.db import models


class MyModel(models.Model):
    even_field = models.IntegerField(validators=[validate_even])

----------------------------------------

TITLE: Django Database Transaction Management
DESCRIPTION: Implementation allowing ORM write operations after disabling autocommit using set_autocommit(False)

LANGUAGE: python
CODE:
set_autocommit(False)

----------------------------------------

TITLE: Fixing QuerySet Order By Exists Expression
DESCRIPTION: Fix for a crash that occurred when using Exists() expression within QuerySet.order_by()

LANGUAGE: python
CODE:
QuerySet.order_by(Exists(...))

----------------------------------------

TITLE: Using Django Mail Utilities
DESCRIPTION: References the mail sending utilities in Django's core mail module, which prohibit newlines in SMTP headers.

LANGUAGE: python
CODE:
django.core.mail

----------------------------------------

TITLE: Package Build Configuration
DESCRIPTION: TOML configuration file for building the package using setuptools, including metadata and dependencies.

LANGUAGE: toml
CODE:
[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "django-polls"
version = "0.1"
dependencies = [
    "django>=X.Y",  # Replace "X.Y" as appropriate
]
description = "A Django app to conduct web-based polls."
readme = "README.rst"
requires-python = ">= 3.12"
authors = [
    {name = "Your Name", email = "yourname@example.com"},
]
classifiers = [
    "Environment :: Web Environment",
    "Framework :: Django",
    "Framework :: Django :: X.Y",  # Replace "X.Y" as appropriate
    "Intended Audience :: Developers",
    "License :: OSI Approved :: BSD License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
]

[project.urls]
Homepage = "https://www.example.com/"

----------------------------------------

TITLE: Internationalization in Django
DESCRIPTION: Functions for handling translations and internationalization in Django

LANGUAGE: Python
CODE:
from django.utils.translation import gettext as _

translated_text = _("Hello, world!")

----------------------------------------

TITLE: Django File Upload Directory Permissions Setting
DESCRIPTION: Reference to the FILE_UPLOAD_DIRECTORY_PERMISSIONS setting that wasn't properly applied to intermediate directories during file uploads on Python 3.7+.

LANGUAGE: python
CODE:
FILE_UPLOAD_DIRECTORY_PERMISSIONS

----------------------------------------

TITLE: Django HttpResponse Security Implementation
DESCRIPTION: Reference to Django's HttpResponse class which provides built-in protection against header injection by prohibiting newlines in HTTP headers

LANGUAGE: python
CODE:
django.http.HttpResponse

----------------------------------------

TITLE: Django QuerySet Annotation with Direct Lookup
DESCRIPTION: Example showing how to use lookup classes in QuerySet annotations to create computed boolean fields.

LANGUAGE: python
CODE:
Book.objects.annotate(is_short_story=LessThan(F("word_count"), 7500))

----------------------------------------

TITLE: Altering Table Engine in MySQL for Django Models
DESCRIPTION: This SQL snippet shows how to alter the table engine for a Django model in MySQL. It uses an ALTER TABLE statement to change the engine to MyISAM, which can be executed in a Django migration using RunSQL operation.

LANGUAGE: sql
CODE:
ALTER TABLE myapp_mytable ENGINE=MyISAM;

----------------------------------------

TITLE: Security Fix for Django text.wrap() Function
DESCRIPTION: Security patch addressing CVE-2025-26699, fixing a potential denial-of-service vulnerability in django.utils.text.wrap() and the wordwrap template filter when processing very long strings.

LANGUAGE: python
CODE:
django.utils.text.wrap()

----------------------------------------

TITLE: Writing Django Documentation
DESCRIPTION: RST documentation for the new make_toast() function including version annotations

LANGUAGE: rst
CODE:
``make_toast()``
================

.. function:: make_toast()

.. versionadded:: 2.2

Returns ``'toast'``.

----------------------------------------

TITLE: Creating Poll Detail Form Template in Django
DESCRIPTION: HTML form template for displaying poll choices as radio buttons with CSRF protection and POST submission. Includes error message handling and dynamic choice rendering.

LANGUAGE: html+django
CODE:
<form action="{% url 'polls:vote' question.id %}" method="post">
{% csrf_token %}
<fieldset>
    <legend><h1>{{ question.question_text }}</h1></legend>
    {% if error_message %}<p><strong>{{ error_message }}</strong></p>{% endif %}
    {% for choice in question.choice_set.all %}
        <input type="radio" name="choice" id="choice{{ forloop.counter }}" value="{{ choice.id }}">
        <label for="choice{{ forloop.counter }}">{{ choice.choice_text }}</label><br>
    {% endfor %}
</fieldset>
<input type="submit" value="Vote">
</form>

----------------------------------------

TITLE: Updating Django Import for Forms Compatibility
DESCRIPTION: Demonstrates how to update import statements to use either the old forms system (django.oldforms) or the new forms system (django.newforms) during the transition period.

LANGUAGE: Python
CODE:
from django import forms  # 0.95-style

LANGUAGE: Python
CODE:
from django import oldforms as forms  # 0.96-style

----------------------------------------

TITLE: HTTP Utilities in Django
DESCRIPTION: Helper functions for HTTP-related tasks in Django

LANGUAGE: Python
CODE:
from django.utils.http import urlencode, http_date

encoded_params = urlencode({'key': 'value'})
http_date_string = http_date()

----------------------------------------

TITLE: OpenLayersWidget SRID Fix - Python/Django
DESCRIPTION: Fix for OpenLayersWidget deserialization to properly handle widget map's SRID instead of assuming WGS84 (4326).

LANGUAGE: python
CODE:
OpenLayersWidget

----------------------------------------

TITLE: Demonstrating Unsafe URL in Django's is_safe_url() Function
DESCRIPTION: This code snippet illustrates a security vulnerability (CVE-2016-2512) where Django's is_safe_url() function incorrectly considers some URLs with basic authentication credentials as safe.

LANGUAGE: Python
CODE:
"http://mysite.example.com\@attacker.com"

----------------------------------------

TITLE: DayArchiveView Template in Django
DESCRIPTION: HTML template for rendering the day archive view, displaying articles and navigation links.

LANGUAGE: html
CODE:
<h1>{{ day }}</h1>

<ul>
    {% for article in object_list %}
        <li>{{ article.pub_date|date:"F j, Y" }}: {{ article.title }}</li>
    {% endfor %}
</ul>

<p>
    {% if previous_day %}
        Previous Day: {{ previous_day }}
    {% endif %}
    {% if previous_day and next_day %}--{% endif %}
    {% if next_day %}
        Next Day: {{ next_day }}
    {% endif %}
</p>

----------------------------------------

TITLE: Customizing Watchman Timeout in Django 2.2.1
DESCRIPTION: Increased the default timeout when using Watchman to 5 seconds and made it customizable via the DJANGO_WATCHMAN_TIMEOUT environment variable.

LANGUAGE: python
CODE:
import os

os.environ['DJANGO_WATCHMAN_TIMEOUT'] = '10'  # Set custom timeout in seconds

----------------------------------------

TITLE: Django View Reference for Security Fix
DESCRIPTION: Reference to the Django view function affected by the CVE-2019-3498 security vulnerability related to content spoofing in the default 404 page.

LANGUAGE: python
CODE:
django.views.defaults.page_not_found()

----------------------------------------

TITLE: SQL Injection Vulnerable Position Function in Django
DESCRIPTION: An example of a custom function that is vulnerable to SQL injection, demonstrating what not to do.

LANGUAGE: python
CODE:
from django.db.models import Func


class Position(Func):
    function = "POSITION"
    template = "%(function)s('%(substring)s' in %(expressions)s)"

    def __init__(self, expression, substring):
        # substring=substring is an SQL injection vulnerability!
        super().__init__(expression, substring=substring)

----------------------------------------

TITLE: Using Geometry Factories
DESCRIPTION: Shows how to use fromfile and fromstr functions to create geometries from files and strings.

LANGUAGE: pycon
CODE:
>>> from django.contrib.gis.geos import fromfile
>>> g = fromfile("/home/bob/geom.wkt")

>>> from django.contrib.gis.geos import fromstr
>>> pnt = fromstr("POINT(-90.5 29.5)", srid=4326)

----------------------------------------

TITLE: Using HasKey Lookup in Django 4.2.17 on Oracle
DESCRIPTION: Example of using the HasKey lookup in Django 4.2.17 on Oracle databases. Direct usage of django.db.models.fields.json.HasKey was vulnerable to SQL injection if untrusted data was used as an 'lhs' value. Using the has_key lookup through the '__' syntax remains unaffected.

LANGUAGE: python
CODE:
# Vulnerable (if lhs contains untrusted data):
from django.db.models.fields.json import HasKey
query = Model.objects.filter(HasKey(lhs, rhs))

# Safe alternative:
query = Model.objects.filter(field__has_key=key)

----------------------------------------

TITLE: Configuring Basic Logging in Django Settings
DESCRIPTION: Shows how to set up a basic logging configuration in Django's settings.py file, including a file handler and logger mapping.

LANGUAGE: python
CODE:
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "file": {
            "class": "logging.FileHandler",
            "filename": "general.log",
        },
    },
    "loggers": {
        "": {
            "level": "DEBUG",
            "handlers": ["file"],
        },
    },
}

----------------------------------------

TITLE: Configuring URL Patterns in Django
DESCRIPTION: Shows how to set up URL patterns in Django, mapping URL paths to view functions and capturing parameters from the URL.

LANGUAGE: python
CODE:
from django.urls import path

from . import views

urlpatterns = [
    path("articles/<int:year>/", views.year_archive),
    path("articles/<int:year>/<int:month>/", views.month_archive),
    path("articles/<int:year>/<int:month>/<int:pk>/", views.article_detail),
]

----------------------------------------

TITLE: Applying Login Decorator to Generic View in URLconf
DESCRIPTION: Illustrates how to use the new callable syntax in URLconf to apply a login_required decorator to a generic view.

LANGUAGE: Python
CODE:
from django.conf.urls.defaults import *
from django.contrib.auth.decorators import login_required
from django.views.generic.list_detail import object_list
from mysite.myapp.models import MyModel

info = {
    "queryset": MyModel.objects.all(),
}

urlpatterns = patterns("", ("^myview/$", login_required(object_list), info))

----------------------------------------

TITLE: Configuring Django Template Engine
DESCRIPTION: Example of configuring the Django template engine with custom options.

LANGUAGE: Python
CODE:
Engine(
    dirs=['/path/to/templates'],
    app_dirs=True,
    context_processors=['django.template.context_processors.request'],
    debug=True,
    loaders=['django.template.loaders.filesystem.Loader'],
    string_if_invalid='',
    file_charset='utf-8',
    libraries={'myapp_tags': 'path.to.myapp.tags'},
    builtins=['myapp.builtins']
)

----------------------------------------

TITLE: Restoring Backwards Compatibility in InlineModelAdmin.has_add_permission() (Python)
DESCRIPTION: Makes the 'obj' argument of InlineModelAdmin.has_add_permission() optional to maintain compatibility with third-party code that doesn't provide it. This fixes the bug reported in ticket #30097.

LANGUAGE: Python
CODE:
InlineModelAdmin.has_add_permission(obj=None)

----------------------------------------

TITLE: Adding Unicode Literals Import in apps.py for Python 2 Compatibility
DESCRIPTION: This snippet shows the addition of a future import statement to ensure compatibility between Python 2 and 3 in the default apps.py file created by the startapp command.

LANGUAGE: Python
CODE:
from __future__ import unicode_literals

----------------------------------------

TITLE: Loading Custom Template Tags
DESCRIPTION: Shows how to load custom template tags in a template

LANGUAGE: html
CODE:
{% load poll_extras %}

----------------------------------------

TITLE: DetailView Template Implementation
DESCRIPTION: HTML template for displaying article details using Django template language, showing how to access object properties and context variables.

LANGUAGE: html+django
CODE:
<h1>{{ object.headline }}</h1>
<p>{{ object.content }}</p>
<p>Reporter: {{ object.reporter }}</p>
<p>Published: {{ object.pub_date|date }}</p>
<p>Date: {{ now|date }}</p>

----------------------------------------

TITLE: Django Model Field Classes for Type Conversion
DESCRIPTION: Three Django model field classes (FilePathField, GenericIPAddressField, and IPAddressField) have been updated to correctly convert their arguments to the appropriate database-level type before querying, addressing MySQL typecasting vulnerabilities.

LANGUAGE: Python
CODE:
FilePathField
GenericIPAddressField
IPAddressField

----------------------------------------

TITLE: Django Meta Configuration
DESCRIPTION: Reference to Meta.default_related_name configuration in Django models, which is now properly detected by migrations.

LANGUAGE: python
CODE:
Meta.default_related_name

----------------------------------------

TITLE: Creating a Deferrable UniqueConstraint in Django
DESCRIPTION: Demonstrates creating a deferrable unique constraint. This example creates a constraint that will be enforced at the end of the transaction.

LANGUAGE: python
CODE:
from django.db.models import Deferrable, UniqueConstraint

UniqueConstraint(
    name="unique_order",
    fields=["order"],
    deferrable=Deferrable.DEFERRED,
)

----------------------------------------

TITLE: File Response Creation
DESCRIPTION: Example demonstrating how to create a file response for serving binary files.

LANGUAGE: python
CODE:
>>> from django.http import FileResponse
>>> response = FileResponse(open("myfile.png", "rb"))

----------------------------------------

TITLE: Security Fix for get_supported_language_variant()
DESCRIPTION: Addresses CVE-2024-39614 by limiting language code parsing to 500 characters to prevent DOS attacks, raising ValueError for oversized inputs based on strict mode setting.



----------------------------------------

TITLE: Enabling Deprecation Warnings in Python for Django Tests
DESCRIPTION: This command demonstrates how to run Django tests with deprecation warnings enabled using the -Wa Python command line option.

LANGUAGE: bash
CODE:
$ python -Wa manage.py test

----------------------------------------

TITLE: Demonstrating URL Slug in Django
DESCRIPTION: Illustrates the concept of a slug in a typical blog entry URL for Django projects. A slug is a short label containing only letters, numbers, underscores, or hyphens, used in URLs for readability and SEO purposes.

LANGUAGE: plaintext
CODE:
https://www.djangoproject.com/weblog/2008/apr/12/spring/

----------------------------------------

TITLE: Using urlize and urlizetrunc template filters
DESCRIPTION: Reference to the urlize and urlizetrunc template filters, which were subject to a potential denial-of-service attack via inputs with many brackets.

LANGUAGE: python
CODE:
:tfilter:`urlize`
:tfilter:`urlizetrunc`

----------------------------------------

TITLE: Using Validator with Django Form Field
DESCRIPTION: Demonstrates how to apply a custom validator to a Django form field.

LANGUAGE: python
CODE:
from django import forms


class MyForm(forms.Form):
    even_field = forms.IntegerField(validators=[validate_even])

----------------------------------------

TITLE: Customizing AdminURLFieldWidget Validator in Django
DESCRIPTION: Shows how to customize the URL validator used by AdminURLFieldWidget to mitigate XSS vulnerabilities. This can be done by passing a custom validator_class to the widget's constructor, typically when overriding form fields in the admin.

LANGUAGE: python
CODE:
AdminURLFieldWidget.__init__(validator_class=CustomURLValidator)

----------------------------------------

TITLE: Handling Empty CONTENT_LENGTH in Django Request
DESCRIPTION: Shows how Django 1.10.1 handles the case where request.META['CONTENT_LENGTH'] is an empty string, preventing a crash.

LANGUAGE: Python
CODE:
if request.META['CONTENT_LENGTH'] == '':
    # Handle empty content length

----------------------------------------

TITLE: Using reverse() with functools.partial() in Django 1.4.12
DESCRIPTION: Demonstrates the restored functionality of reverse() when used with views created using functools.partial(). This capability was temporarily broken in Django 1.4.11 and has been fixed in 1.4.12.

LANGUAGE: python
CODE:
reverse()

----------------------------------------

TITLE: Template File Extension Change in Django Projects
DESCRIPTION: Change in file extension from .py to .py-tpl for project and app template files to avoid byte-compilation issues with invalid Python syntax in Django template language. Files like manage.py-tpl are automatically renamed to manage.py during project/app creation.

LANGUAGE: Python
CODE:
manage.py-tpl -> manage.py

----------------------------------------

TITLE: Custom Admin Form with View Permission Check
DESCRIPTION: Example of overriding ModelAdmin.get_form() to handle the new view permission by returning default form when user lacks change permission.

LANGUAGE: Python
CODE:
class MyAdmin(admin.ModelAdmin):
    def get_form(self, request, obj=None, **kwargs):
        if not self.has_change_permission(request, obj):
            return super().get_form(request, obj, **kwargs)
        return CustomForm

----------------------------------------

TITLE: Importing URL Resolver Exceptions
DESCRIPTION: Demonstrates how to import URL resolver exceptions from Django. These exceptions are defined in the django.urls module.

LANGUAGE: python
CODE:
from django.urls import Resolver404, NoReverseMatch

----------------------------------------

TITLE: Creating GEOSGeometry Objects with SRID
DESCRIPTION: Shows how to create GEOSGeometry objects with a specified SRID.

LANGUAGE: pycon
CODE:
>>> from django.contrib.gis.geos import GEOSGeometry, LineString, Point
>>> print(GEOSGeometry("POINT (0 0)", srid=4326))
SRID=4326;POINT (0 0)
>>> print(LineString((0, 0), (1, 1), srid=4326))
SRID=4326;LINESTRING (0 0, 1 1)
>>> print(Point(0, 0, srid=32140))
SRID=32140;POINT (0 0)

----------------------------------------

TITLE: Handling Multiple File Uploads in Django Forms
DESCRIPTION: To prevent a potential vulnerability, Django now raises a ValueError when the 'multiple' HTML attribute is set on ClearableFileInput and FileInput widgets. To maintain the old behavior, set 'allow_multiple_selected' to True.

LANGUAGE: python
CODE:
from django import forms

class MyForm(forms.Form):
    files = forms.FileField(
        widget=forms.ClearableFileInput(attrs={'multiple': True, 'allow_multiple_selected': True})
    )

----------------------------------------

TITLE: Configuring Django FAQ Table of Contents in RST
DESCRIPTION: RST markup for creating a table of contents (toctree) that organizes Django FAQ documentation into different sections. Sets maximum depth to 2 levels and includes various documentation pages.

LANGUAGE: rst
CODE:
.. toctree::
   :maxdepth: 2

   general
   install
   usage
   help
   models
   admin
   contributing
   troubleshooting

----------------------------------------

TITLE: Calling Stored Procedures in Django with Oracle Database
DESCRIPTION: Demonstrates how to call a stored procedure in an Oracle database using Django's database cursor.

LANGUAGE: python
CODE:
with connection.cursor() as cursor:
    cursor.callproc("test_procedure", [1, "test"])

----------------------------------------

TITLE: Using strip_tags() Function in Django
DESCRIPTION: Example of the strip_tags() function usage in Django, which now has an upper limit of recursive calls to HTMLParser before raising a SuspiciousOperation exception. Important note that results must be escaped before being marked as safe.

LANGUAGE: python
CODE:
from django.utils.html import strip_tags, escape

# Must escape the result of strip_tags before marking as safe
safe_text = escape(strip_tags(html_content))

----------------------------------------

TITLE: ArchiveIndexView Template in Django
DESCRIPTION: HTML template for rendering the archive index view, displaying a list of articles with publication dates.

LANGUAGE: html
CODE:
<ul>
    {% for article in latest %}
        <li>{{ article.pub_date }}: {{ article.title }}</li>
    {% endfor %}
</ul>

----------------------------------------

TITLE: Vulnerable Usage of django.utils.text.Truncator in Python
DESCRIPTION: The chars() and words() methods of django.utils.text.Truncator were vulnerable to a denial-of-service attack when used with html=True argument. This affected the truncatechars_html and truncatewords_html template filters.

LANGUAGE: python
CODE:
django.utils.text.Truncator(text).chars(num_chars, html=True)
django.utils.text.Truncator(text).words(num_words, html=True)

----------------------------------------

TITLE: Implementing backwards-compatible get_queryset in custom manager
DESCRIPTION: Shows how to implement a backwards-compatible get_queryset method in a custom manager that works with both old and new Django versions.

LANGUAGE: Python
CODE:
class YourCustomManager(models.Manager):
    def get_queryset(self):
        return YourCustomQuerySet()  # for example

    if django.VERSION < (1, 6):
        get_query_set = get_queryset

    def active(self):  # for example
        return self.get_queryset_compat().filter(active=True)

    def get_queryset_compat(self):
        get_queryset = (
            self.get_query_set if hasattr(self, "get_query_set") else self.get_queryset
        )
        return get_queryset()

----------------------------------------

TITLE: Improving Migration Plan Display in Django 2.2.7
DESCRIPTION: Prevents migrate --plan from incorrectly showing RunPython operations as irreversible when reverse_code callables lack docstrings or when displaying a forward migration plan.

LANGUAGE: python
CODE:
migrate --plan

----------------------------------------

TITLE: Class-based View Definition Example
DESCRIPTION: Shows how to define a class-based view and create a view instance for URL routing.

LANGUAGE: python
CODE:
from django.views import View

class ArchiveView(View): ...

archive = ArchiveView.as_view()

----------------------------------------

TITLE: select_for_update() Data Loss Fix
DESCRIPTION: Bug fix for select_for_update() method to properly lock related fields and parent link fields when using multi-table inheritance in the 'of' argument.



----------------------------------------

TITLE: Fixing Window Expression in Subquery
DESCRIPTION: Fix for a crash when using Window() expression within a subquery

LANGUAGE: python
CODE:
Window()

----------------------------------------

TITLE: Importing Django Core Exceptions
DESCRIPTION: Shows how to import the core exception classes from Django. These exceptions are defined in the django.core.exceptions module.

LANGUAGE: python
CODE:
from django.core.exceptions import AppRegistryNotReady, ObjectDoesNotExist, ObjectNotUpdated, EmptyResultSet, FullResultSet, FieldDoesNotExist, MultipleObjectsReturned, SuspiciousOperation, PermissionDenied, ViewDoesNotExist, MiddlewareNotUsed, ImproperlyConfigured, FieldError, ValidationError, BadRequest, RequestAborted, SynchronousOnlyOperation

----------------------------------------

TITLE: Template Debug Integration Example Data Structure
DESCRIPTION: Example of the template_debug dictionary structure used for providing detailed error information in custom template engines.

LANGUAGE: python
CODE:
{
    "name": "/path/to/template.html",
    "message": "Invalid block tag: 'syntax'",
    "source_lines": [
        (1, "some\n"),
        (2, "lines\n"),
        (3, "before\n"),
        (4, "Hello {% syntax error %} {{ world }}\n"),
        (5, "some\n"),
        (6, "lines\n"),
        (7, "after\n"),
        (8, ""),
    ],
    "line": 4,
    "before": "Hello ",
    "during": "{% syntax error %}",
    "after": " {{ world }}\n",
    "total": 9,
    "bottom": 9,
    "top": 1
}

----------------------------------------

TITLE: Resolving Sitemap Index View Crash in Django 4.1.4
DESCRIPTION: Fixes a bug that caused the sitemap index view to crash when Sitemap.items() was empty and Sitemap.lastmod was a callable. This ensures proper handling of edge cases in sitemap generation.

LANGUAGE: python
CODE:
# Related to Sitemap.items() and Sitemap.lastmod
# No specific code provided, but involves sitemap functionality

----------------------------------------

TITLE: Combining Media Objects
DESCRIPTION: Shows how to combine Media objects from multiple widgets to create a unified set of assets.

LANGUAGE: python
CODE:
>>> from django import forms
>>> class CalendarWidget(forms.TextInput):
...     class Media:
...         css = {
...             "all": ["pretty.css"],
...         }
...         js = ["animations.js", "actions.js"]
...
>>> class OtherWidget(forms.TextInput):
...     class Media:
...         js = ["whizbang.js"]
...
>>> w1 = CalendarWidget()
>>> w2 = OtherWidget()
>>> print(w1.media + w2.media)
<link href="https://static.example.com/pretty.css" media="all" rel="stylesheet">
<script src="https://static.example.com/animations.js"></script>
<script src="https://static.example.com/actions.js"></script>
<script src="https://static.example.com/whizbang.js"></script>

----------------------------------------

TITLE: Generating Password Reset Email Subject in Django Template
DESCRIPTION: A Django template snippet that creates a custom password reset email subject line. Uses the autoescape tag to prevent HTML escaping of the site name variable.

LANGUAGE: django-template
CODE:
{% autoescape off %}Custom password reset on {{ site_name }}{% endautoescape %}

----------------------------------------

TITLE: Using Model.refresh_from_db() with Deferred Fields
DESCRIPTION: Example showing the fixed functionality of refresh_from_db() method with deferred fields, which now properly updates relational fields.

LANGUAGE: python
CODE:
# Refresh instance from database including deferred fields
instance = MyModel.objects.defer('some_field').get(pk=1)
instance.refresh_from_db()

----------------------------------------

TITLE: Querying ArrayField with Filter Operations
DESCRIPTION: Examples of different ways to query ArrayField using contains, overlap and other lookups

LANGUAGE: pycon
CODE:
>>> Post.objects.create(name="First post", tags=["thoughts", "django"])
>>> Post.objects.filter(tags__contains=["thoughts"])
<QuerySet [<Post: First post>]>

>>> Post.objects.filter(tags__overlap=["thoughts", "tutorial"])
<QuerySet [<Post: First post>]>

----------------------------------------

TITLE: Vulnerable Usage of django.utils.html.strip_tags in Python
DESCRIPTION: The strip_tags() function in django.utils.html was vulnerable to a denial-of-service attack with certain inputs containing large sequences of nested incomplete HTML entities. This affected the striptags template filter.

LANGUAGE: python
CODE:
django.utils.html.strip_tags(html_string)

----------------------------------------

TITLE: Updating URL pattern for shortcut view in Django 1.6
DESCRIPTION: Updates the URL pattern for the shortcut view that was moved from django.views.defaults to django.contrib.contenttypes.views. The old URLconf is deprecated in Django 1.6.

LANGUAGE: Python
CODE:
(r"^prefix/(?P<content_type_id>\d+)/(?P<object_id>.*)/$",
 "django.contrib.contenttypes.views.shortcut"),

----------------------------------------

TITLE: Security Fix: Session Store Access Pattern in Django
DESCRIPTION: Previous vulnerable code pattern where request.session access would create empty session records. This was fixed to prevent DoS attacks by creating sessions only when modified.

LANGUAGE: Python
CODE:
request.session

----------------------------------------

TITLE: Fixing Regression in Django's intcomma Template Filter
DESCRIPTION: A bugfix addressing a regression introduced in Django 3.2.24 where the intcomma template filter could incorrectly return a leading comma for string representations of float values.

LANGUAGE: python
CODE:
intcomma

----------------------------------------

TITLE: Authenticating Users in Django
DESCRIPTION: Shows the usage of the contrib.auth.authenticate() function, which was affected by a regression fixed in this release regarding handling of the request parameter.

LANGUAGE: python
CODE:
from django.contrib.auth import authenticate

authenticate(request=request, ...)

----------------------------------------

TITLE: Activating Sitemap Generation in Django URLconf
DESCRIPTION: This snippet shows how to add the sitemap view to your Django URLconf to enable sitemap generation.

LANGUAGE: Python
CODE:
from django.contrib.sitemaps.views import sitemap

path(
    "sitemap.xml",
    sitemap,
    {"sitemaps": sitemaps},
    name="django.contrib.sitemaps.views.sitemap",
)

----------------------------------------

TITLE: Implementing Zipcode Feed Geometry
DESCRIPTION: Example implementation of a ZipcodeFeed class showing how to return geometry data for the feed using polygon extent coordinates.

LANGUAGE: python
CODE:
class ZipcodeFeed(Feed):
    def geometry(self, obj):
        # Can also return: `obj.poly`, and `obj.poly.centroid`.
        return obj.poly.extent  # tuple like: (X0, Y0, X1, Y1).

----------------------------------------

TITLE: Fixing Django Migration Crash on Primary Key Type Alteration
DESCRIPTION: Resolves a migration crash when altering a primary key type for a concrete parent model referenced by a foreign key.



----------------------------------------

TITLE: Defining Media for Django Forms
DESCRIPTION: Demonstrates how to define Media for a Django Form, which combines widget media with form-specific assets.

LANGUAGE: python
CODE:
>>> class ContactForm(forms.Form):
...     date = DateField(widget=CalendarWidget)
...     name = CharField(max_length=40, widget=OtherWidget)
...     class Media:
...         css = {
...             "all": ["layout.css"],
...         }
...
>>> f = ContactForm()
>>> f.media
<link href="https://static.example.com/pretty.css" media="all" rel="stylesheet">
<link href="https://static.example.com/layout.css" media="all" rel="stylesheet">
<script src="https://static.example.com/animations.js"></script>
<script src="https://static.example.com/actions.js"></script>
<script src="https://static.example.com/whizbang.js"></script>

----------------------------------------

TITLE: Importing and Using StringAgg Aggregate in Django 6.0
DESCRIPTION: Example of using the new StringAgg aggregate function, which concatenates string values and is now available across all database backends.

LANGUAGE: python
CODE:
from django.db.models import StringAgg

result = MyModel.objects.aggregate(concatenated=StringAgg('field_name', delimiter=', '))

----------------------------------------

TITLE: Creating Class-Based View with Success Message
DESCRIPTION: Example of implementing SuccessMessageMixin in a CreateView to display success messages

LANGUAGE: python
CODE:
from django.contrib.messages.views import SuccessMessageMixin
from django.views.generic.edit import CreateView
from myapp.models import Author

class AuthorCreateView(SuccessMessageMixin, CreateView):
    model = Author
    success_url = "/success/"
    success_message = "%(name)s was created successfully"

----------------------------------------

TITLE: Potential Memory Exhaustion in django.utils.encoding.uri_to_iri in Python
DESCRIPTION: The uri_to_iri() function in django.utils.encoding could lead to significant memory usage due to excessive recursion when re-percent-encoding invalid UTF-8 octet sequences.

LANGUAGE: python
CODE:
django.utils.encoding.uri_to_iri(uri)

----------------------------------------

TITLE: Fixing XSS Vulnerability in Django Admin URLField Display
DESCRIPTION: Description of an XSS vulnerability in the admin interface when displaying URLField values. The widget's display routine was flawed, allowing for potential XSS attacks.

LANGUAGE: Python
CODE:
django.db.models.URLField

----------------------------------------

TITLE: Using strip_tags() Function in Django
DESCRIPTION: Demonstrates the usage of strip_tags() function in Django, which now returns the original input if it detects an increase in string length during processing. This change mitigates a potential infinite loop vulnerability.

LANGUAGE: Python
CODE:
from django.utils.html import strip_tags, escape

# Always escape the result of strip_tags() before marking it as safe
safe_content = escape(strip_tags(user_input))

----------------------------------------

TITLE: Testing Messages in Django
DESCRIPTION: Example of testing message functionality using MessagesTestMixin

LANGUAGE: python
CODE:
from django.contrib.messages.test import MessagesTestMixin
from django.test import TestCase

class MsgTestCase(MessagesTestMixin, TestCase):
    pass

----------------------------------------

TITLE: Testing Messages in Django
DESCRIPTION: Example of testing message functionality using MessagesTestMixin

LANGUAGE: python
CODE:
from django.contrib.messages.test import MessagesTestMixin
from django.test import TestCase

class MsgTestCase(MessagesTestMixin, TestCase):
    pass

----------------------------------------

TITLE: Using __in Lookup with JSONField in Django
DESCRIPTION: Fixes __in lookup on key transforms for JSONField with MariaDB, MySQL, Oracle, and SQLite.

LANGUAGE: python
CODE:
JSONField

----------------------------------------

TITLE: Referencing AuthenticationForm Class in Django
DESCRIPTION: Shows how to reference the AuthenticationForm class from Django's contrib.auth.forms module. This form is central to the security fix in this release.

LANGUAGE: python
CODE:
from django.contrib.auth.forms import AuthenticationForm

----------------------------------------

TITLE: Using OpClass Expressions for Custom Operator Classes in Django
DESCRIPTION: Shows how to use OpClass expressions to define functional indexes, functional unique constraints, or exclusion constraints with custom operator classes. Requires 'django.contrib.postgres' in INSTALLED_APPS.

LANGUAGE: python
CODE:
Index(
    OpClass(Lower("username"), name="varchar_pattern_ops"),
    name="lower_username_idx",
)

LANGUAGE: python
CODE:
UniqueConstraint(
    OpClass(Upper("description"), name="text_pattern_ops"),
    name="upper_description_unique",
)

LANGUAGE: python
CODE:
ExclusionConstraint(
    name="exclude_overlapping_ops",
    expressions=[
        (OpClass("circle", name="circle_ops"), RangeOperators.OVERLAPS),
    ],
)

----------------------------------------

TITLE: Arithmetic Operations with Distance Objects in Django GIS
DESCRIPTION: Demonstrates arithmetic operations between Distance objects including addition and subtraction, maintaining unit consistency.

LANGUAGE: python
CODE:
>>> print(d1 + d2)  # Adding 5 miles to 5 kilometers
13.04672 km
>>> print(d2 - d1)  # Subtracting 5 kilometers from 5 miles
1.89314403881 mi

----------------------------------------

TITLE: Defining Functional Unique Constraints in Django Model
DESCRIPTION: Example of creating a functional unique constraint using expressions and database functions on model fields.

LANGUAGE: python
CODE:
from django.db import models
from django.db.models import UniqueConstraint
from django.db.models.functions import Lower


class MyModel(models.Model):
    first_name = models.CharField(max_length=255)
    last_name = models.CharField(max_length=255)

    class Meta:
        constraints = [
            UniqueConstraint(
                Lower("first_name"),
                Lower("last_name").desc(),
                name="first_last_name_unique",
            ),
        ]

----------------------------------------

TITLE: Defining Django Documentation Table of Contents
DESCRIPTION: ReStructuredText markup defining a table of contents tree for Django model relationship examples documentation.

LANGUAGE: rst
CODE:
.. toctree::
   :maxdepth: 1

   many_to_many
   many_to_one
   one_to_one

----------------------------------------

TITLE: Using forloop.length in Django 6.0 Templates
DESCRIPTION: Example of using the new forloop.length variable in Django 6.0 templates to access the total number of iterations in a for loop.

LANGUAGE: django
CODE:
{% for item in items %}
    {{ forloop.counter }} of {{ forloop.length }}
    {{ item }}
{% endfor %}

----------------------------------------

TITLE: Basic Template Tag Registration and Setup
DESCRIPTION: Shows how to setup basic template tag registration with a Library instance

LANGUAGE: python
CODE:
from django import template

register = template.Library()

----------------------------------------

TITLE: Fixing DoS Vulnerability in django.utils.text.Truncator
DESCRIPTION: Security fix for CVE-2019-14232 addressing catastrophic backtracking vulnerability in Truncator's chars() and words() methods when used with html=True argument.

LANGUAGE: python
CODE:
django.utils.text.Truncator

----------------------------------------

TITLE: Resolving QuerySet.prefetch_related() Crash and Pickle Regressions
DESCRIPTION: Fixes for a crash in the prefetch_related() method and related pickle regressions. These issues affected the functionality of prefetching related objects in querysets.

LANGUAGE: Python
CODE:
django.db.models.query.QuerySet.prefetch_related()

----------------------------------------

TITLE: Caching Anonymous Responses with CSRF Protection in Django
DESCRIPTION: Description of a security issue where caching of anonymous responses could reveal CSRF tokens. The fix prevents caching of responses that set cookies when the request didn't include cookies and 'Vary: Cookie' header is set.

LANGUAGE: Python
CODE:
Vary: Cookie

----------------------------------------

TITLE: Setting DJANGO_ALLOW_ASYNC_UNSAFE Environment Variable
DESCRIPTION: Environment variable to disable async-safety mechanism, allowing Django to work in Jupyter and other async environments.

LANGUAGE: python
CODE:
DJANGO_ALLOW_ASYNC_UNSAFE=1

----------------------------------------

TITLE: Admin Raw ID Fields Fix in Django
DESCRIPTION: Restoration of raw_id_fields functionality in the admin interface when used with list_editable feature.

LANGUAGE: python
CODE:
raw_id_fields

----------------------------------------

TITLE: Creating PostgreSQL Superuser
DESCRIPTION: Shell command to create a new PostgreSQL superuser.

LANGUAGE: shell
CODE:
$ createuser --superuser <user_name>

----------------------------------------

TITLE: Creating HTML Template for Author Delete Confirmation in Django
DESCRIPTION: Example of an HTML template for rendering an author delete confirmation form in Django, including CSRF token and confirmation message.

LANGUAGE: html
CODE:
<form method="post">{% csrf_token %}
    <p>Are you sure you want to delete "{{ object }}"?</p>
    {{ form }}
    <input type="submit" value="Confirm">
</form>

----------------------------------------

TITLE: Accessing HTTP Request Scheme in Django
DESCRIPTION: This snippet demonstrates how to access the HTTP request scheme in Django, which was affected by the security issue. It also mentions related methods and settings that may need verification after the fix.

LANGUAGE: python
CODE:
request.scheme
request.is_secure()
request.build_absolute_uri()
SECURE_SSL_REDIRECT
SECURE_PROXY_SSL_HEADER

----------------------------------------

TITLE: Django Many-to-Many Query Operations
DESCRIPTION: Advanced querying examples for many-to-many relationships including filtering, excluding, and accessing related objects.

LANGUAGE: python
CODE:
>>> Article.objects.filter(publications__id=1)
>>> Article.objects.filter(publications__title__startswith="Science")
>>> Article.objects.filter(publications__title__startswith="Science").distinct()
>>> Publication.objects.filter(article__headline__startswith="NASA")
>>> Article.objects.exclude(publications=p2)

----------------------------------------

TITLE: Creating an SP-GiST Index in Django for PostgreSQL
DESCRIPTION: Demonstrates creating an SP-GiST (Space-Partitioned Generalized Search Tree) index using the SpGistIndex class. Allows tuning the fill factor of the index pages.

LANGUAGE: python
CODE:
SpGistIndex(*expressions, fillfactor=None, **options)

----------------------------------------

TITLE: Inline Model Admin Configuration
DESCRIPTION: Demonstrates how to add related Choice objects directly on the Question admin page using TabularInline.

LANGUAGE: python
CODE:
from django.contrib import admin

from .models import Choice, Question


class ChoiceInline(admin.TabularInline):
    model = Choice
    extra = 3


class QuestionAdmin(admin.ModelAdmin):
    fieldsets = [
        (None, {"fields": ["question_text"]}),
        ("Date information", {"fields": ["pub_date"], "classes": ["collapse"]}),
    ]
    inlines = [ChoiceInline]


admin.site.register(Question, QuestionAdmin)

----------------------------------------

TITLE: Fixing SQL Injection in JSONField/HStoreField Lookups
DESCRIPTION: Security fix for CVE-2019-14234 addressing SQL injection vulnerability in key and index lookups for JSONField and HStoreField.

LANGUAGE: python
CODE:
QuerySet.filter(**kwargs)

----------------------------------------

TITLE: Using RemoteUserMiddleware in Django Authentication
DESCRIPTION: The RemoteUserMiddleware now includes improved security measures to prevent session hijacking. It logs out the user on failed login attempts when the REMOTE_USER header changes between requests.

LANGUAGE: Python
CODE:
from django.contrib.auth.middleware import RemoteUserMiddleware

----------------------------------------

TITLE: Fixing Date Field Subtraction on MySQL
DESCRIPTION: Resolves a regression (ticket #31312) in Django 3.0.3 that caused misplacement of SQL query parameters when subtracting DateField or DateTimeField expressions on MySQL.

LANGUAGE: SQL
CODE:
-- No specific code provided, but the fix corrects parameter placement in SQL queries involving DateField or DateTimeField subtraction on MySQL.

----------------------------------------

TITLE: Creating a CSS stylesheet for Django polls app
DESCRIPTION: This snippet shows how to create a simple CSS stylesheet for a Django polls application. It sets the color of links inside list items to green.

LANGUAGE: css
CODE:
li a {
    color: green;
}

----------------------------------------

TITLE: Referencing Bug Fix for geos_version_tuple()
DESCRIPTION: Reference to a bug fix preventing repetitive calls to geos_version_tuple() in the WKBWriter class to address random crashes with LooseVersion since Django 1.11.14.

LANGUAGE: Python
CODE:
geos_version_tuple()

----------------------------------------

TITLE: Fixing is_safe_url() Function in Django 1.8.11 for Python 2
DESCRIPTION: This release addresses a regression in Django 1.8.10 where utils.http.is_safe_url() crashes when processing bytestring URLs on Python 2. The fix ensures compatibility with bytestring URLs in Python 2 environments.

LANGUAGE: Python
CODE:
utils.http.is_safe_url()

----------------------------------------

TITLE: Exploring GDAL DataSource in Python
DESCRIPTION: Example showing how to inspect a shapefile using Django's GDAL DataSource utility, including checking fields, features count, geometry type and spatial reference system.

LANGUAGE: python
CODE:
>>> from django.contrib.gis.gdal import DataSource
>>> ds = DataSource("test_poly.shp")
>>> layer = ds[0]
>>> print(layer.fields)  # Exploring the fields in the layer, we only want the 'str' field.
['float', 'int', 'str']
>>> print(len(layer))  # getting the number of features in the layer (should be 3)
3
>>> print(layer.geom_type)  # Should be 'Polygon'
Polygon
>>> print(layer.srs)  # WGS84 in WKT
GEOGCS["GCS_WGS_1984",
    DATUM["WGS_1984",
        SPHEROID["WGS_1984",6378137,298.257223563]],
    PRIMEM["Greenwich",0],
    UNIT["Degree",0.017453292519943295]]

----------------------------------------

TITLE: Implementing Bilateral UpperCase Transformer in Django
DESCRIPTION: Creates a case-insensitive transformer that applies UPPER() function to both sides of the comparison.

LANGUAGE: python
CODE:
from django.db.models import Transform

class UpperCase(Transform):
    lookup_name = "upper"
    function = "UPPER"
    bilateral = True

from django.db.models import CharField, TextField
CharField.register_lookup(UpperCase)
TextField.register_lookup(UpperCase)

----------------------------------------

TITLE: Referencing Database Fields in Django
DESCRIPTION: Example of using F() expressions for database field references, which now properly raises FieldError for nonexistent joins.

LANGUAGE: python
CODE:
F()

----------------------------------------

TITLE: Basic Many-to-Many Operations in Django
DESCRIPTION: Examples of creating, associating, and querying related objects in a many-to-many relationship.

LANGUAGE: python
CODE:
>>> p1 = Publication(title="The Python Journal")
>>> p1.save()
>>> p2 = Publication(title="Science News")
>>> p2.save()
>>> p3 = Publication(title="Science Weekly")
>>> p3.save()

>>> a1 = Article(headline="Django lets you build web apps easily")
>>> a1.save()
>>> a1.publications.add(p1)

>>> a2 = Article(headline="NASA uses Python")
>>> a2.save()
>>> a2.publications.add(p1, p2)
>>> a2.publications.add(p3)

----------------------------------------

TITLE: Querying with Trigram Similarity in Django
DESCRIPTION: Demonstrates how to use trigram_similar lookup to find similar city names based on shared trigrams. Requires django.contrib.postgres and pg_trgm extension.

LANGUAGE: python
CODE:
>>> City.objects.filter(name__trigram_similar="Middlesborough")
['<City: Middlesbrough>']

----------------------------------------

TITLE: Defining Additional Index Links with reStructuredText
DESCRIPTION: This snippet defines additional index links for the Django documentation, including a general index, module index, and glossary using reStructuredText directives.

LANGUAGE: reStructuredText
CODE:
* :ref:`genindex`
* :ref:`modindex`
* :doc:`glossary`

----------------------------------------

TITLE: Implementing Poll Results View and Template
DESCRIPTION: Django view and template for displaying poll results, showing vote counts for each choice with pluralization support.

LANGUAGE: python
CODE:
def results(request, question_id):
    question = get_object_or_404(Question, pk=question_id)
    return render(request, "polls/results.html", {"question": question})

LANGUAGE: html+django
CODE:
<h1>{{ question.question_text }}</h1>

<ul>
{% for choice in question.choice_set.all %}
    <li>{{ choice.choice_text }} -- {{ choice.votes }} vote{{ choice.votes|pluralize }}</li>
{% endfor %}
</ul>

<a href="{% url 'polls:detail' question.id %}">Vote again?</a>

----------------------------------------

TITLE: Fixing PostgreSQL Index Creation in Django 2.2.7
DESCRIPTION: Resolves a migrations crash on PostgreSQL when adding an Index with fields ordering and opclasses.

LANGUAGE: python
CODE:
django.db.models.Index

----------------------------------------

TITLE: Using functools.partial() with Django's reverse() in Python
DESCRIPTION: This code snippet illustrates the usage of functools.partial() to create views that can be reversed using Django's reverse() function, which was restored in this release.

LANGUAGE: Python
CODE:
from functools import partial
from django.urls import reverse

partial_view = partial(some_view_function, arg1, arg2)
url = reverse(partial_view)

----------------------------------------

TITLE: Model String Representation
DESCRIPTION: Adding string representation methods to the Question and Choice models for better display in Django admin and shell.

LANGUAGE: python
CODE:
from django.db import models

class Question(models.Model):
    def __str__(self):
        return self.question_text

class Choice(models.Model):
    def __str__(self):
        return self.choice_text

----------------------------------------

TITLE: Defining Base and Sub Admin Classes in Django
DESCRIPTION: Example showing how to properly inherit actions from a base ModelAdmin class after changes in Django 2.2.

LANGUAGE: Python
CODE:
from django.contrib import admin

class BaseAdmin(admin.ModelAdmin):
    actions = ["a"]

class SubAdmin(BaseAdmin):
    actions = BaseAdmin.actions + ["b"]

----------------------------------------

TITLE: Using Django Form Fields in Python
DESCRIPTION: Examples of Django form fields that use the fixed validators. These fields strip input, reducing the risk of newline injection.

LANGUAGE: Python
CODE:
GenericIPAddresseField

LANGUAGE: Python
CODE:
IPAddressField

LANGUAGE: Python
CODE:
SlugField

LANGUAGE: Python
CODE:
URLField

----------------------------------------

TITLE: Using get_flatpages Template Tag in Django
DESCRIPTION: Demonstrates how to use the get_flatpages template tag to iterate over available flatpages on the current site.

LANGUAGE: html
CODE:
{% load flatpages %}
{% get_flatpages as flatpages %}
<ul>
    {% for page in flatpages %}
        <li><a href="{{ page.url }}">{{ page.title }}</a></li>
    {% endfor %}
</ul>

----------------------------------------

TITLE: Installing GeoDjango Prerequisites with Homebrew
DESCRIPTION: Installs PostgreSQL, PostGIS, GDAL, and libgeoip using Homebrew package manager on macOS.

LANGUAGE: Bash
CODE:
$ brew install postgresql
$ brew install postgis
$ brew install gdal
$ brew install libgeoip

----------------------------------------

TITLE: BCrypt Password Hash Check
DESCRIPTION: Code snippet showing how to check for users with legacy BCrypt password hashes that need to be migrated.

LANGUAGE: Python
CODE:
from django.contrib.auth import get_user_model

User = get_user_model()
User.objects.filter(password__startswith="bcrypt$$")

----------------------------------------

TITLE: Django Documentation Table of Contents RST Directive
DESCRIPTION: RST directive that defines the documentation structure and navigation for Django's database-related topics. Lists all relevant subsections with a maximum depth of 1 level.

LANGUAGE: rst
CODE:
.. toctree::
   :maxdepth: 1

   models
   queries
   aggregation
   search
   managers
   sql
   transactions
   multi-db
   tablespaces
   optimization
   instrumentation
   fixtures
   examples/index

----------------------------------------

TITLE: Implementing ExclusionConstraint for Reservation Model in Django
DESCRIPTION: Comprehensive example of using ExclusionConstraint in a Reservation model to prevent overlapping reservations for the same room, excluding cancelled reservations.

LANGUAGE: python
CODE:
from django.contrib.postgres.constraints import ExclusionConstraint
from django.contrib.postgres.fields import DateTimeRangeField, RangeOperators
from django.db import models
from django.db.models import Q


class Room(models.Model):
    number = models.IntegerField()


class Reservation(models.Model):
    room = models.ForeignKey("Room", on_delete=models.CASCADE)
    timespan = DateTimeRangeField()
    cancelled = models.BooleanField(default=False)

    class Meta:
        constraints = [
            ExclusionConstraint(
                name="exclude_overlapping_reservations",
                expressions=[
                    ("timespan", RangeOperators.OVERLAPS),
                    ("room", RangeOperators.EQUAL),
                ],
                condition=Q(cancelled=False),
            ),
        ]

----------------------------------------

TITLE: Rendering Exception Traceback in Django Template
DESCRIPTION: This snippet generates a detailed traceback of the exception, including file names, line numbers, and function names. It handles multiple exceptions and their relationships, providing a comprehensive view of the error stack.

LANGUAGE: django
CODE:
{% if frames %}

Traceback (most recent call last):
{% for frame in frames %}{% ifchanged frame.exc_cause %}{% if frame.exc_cause %}
{% if frame.exc_cause_explicit %}The above exception ({{ frame.exc_cause }}) was the direct cause of the following exception:{% else %}During handling of the above exception ({{ frame.exc_cause }}), another exception occurred:{% endif %}
{% endif %}{% endifchanged %}  {% if frame.tb %}File "{{ frame.filename }}"{% if frame.context_line %}, line {{ frame.lineno }}{% endif %}, in {{ frame.function }}
{% if frame.context_line %}    {% spaceless %}{{ frame.context_line }}{% endspaceless %}{{ frame.tb_area_colno }}{% endif %}{% elif forloop.first %}None{% else %}Traceback: None{% endif %}
{% endfor %}
{% if exception_type %}Exception Type: {{ exception_type }}{% if request %} at {{ request.path_info }}{% endif %}
{% if exception_value %}Exception Value: {{ exception_value }}{% endif %}{% if exception_notes %}{{ exception_notes }}{% endif %}{% endif %}{% endif %}

----------------------------------------

TITLE: Setting SameSite Cookie Flag in HttpResponse.delete_cookie
DESCRIPTION: A bugfix that allows setting the SameSite cookie flag when deleting cookies using HttpResponse.delete_cookie method. This addresses ticket #31790.



----------------------------------------

TITLE: Model Inheritance Delete Operation Fix
DESCRIPTION: Enhancement to Model.delete(keep_parents=True) to maintain parent reverse relationships in multi-table inheritance scenarios



----------------------------------------

TITLE: MonthArchiveView Template in Django
DESCRIPTION: HTML template for rendering the month archive view, displaying a list of articles and navigation links.

LANGUAGE: html
CODE:
<ul>
    {% for article in object_list %}
        <li>{{ article.pub_date|date:"F j, Y" }}: {{ article.title }}</li>
    {% endfor %}
</ul>

<p>
    {% if previous_month %}
        Previous Month: {{ previous_month|date:"F Y" }}
    {% endif %}
    {% if next_month %}
        Next Month: {{ next_month|date:"F Y" }}
    {% endif %}
</p>

----------------------------------------

TITLE: Installing psycopg for PostgreSQL-Python Interface
DESCRIPTION: Installs the psycopg Python module for interfacing with PostgreSQL databases.

LANGUAGE: Batch
CODE:
...\> py -m pip install psycopg

----------------------------------------

TITLE: Referencing Django Authentication Components
DESCRIPTION: Code references to Django authentication and session components affected by the security update, including the logout view, session middleware, and session store implementations.

LANGUAGE: python
CODE:
django.contrib.auth.views.logout()
django.contrib.auth.decorators.login_required
django.contrib.sessions.middleware.SessionMiddleware
django.contrib.sessions.backends.base.SessionBase.flush()
cache_db.SessionStore.flush()

----------------------------------------

TITLE: Using Custom Manager with Reverse Relations
DESCRIPTION: Example showing how to specify a custom manager when traversing reverse relationships

LANGUAGE: python
CODE:
class Blog(models.Model):
    pass

class Entry(models.Model):
    blog = models.ForeignKey(Blog)

    objects = models.Manager()  # Default Manager
    entries = EntryManager()  # Custom Manager

b = Blog.objects.get(id=1)
b.entry_set(manager="entries").all()

----------------------------------------

TITLE: Implementing Custom FieldListFilter with Custom Separator in Django Admin
DESCRIPTION: Shows how to create a custom FieldListFilter that uses a different separator for multiple values in the query string.

LANGUAGE: python
CODE:
class FilterWithCustomSeparator(admin.FieldListFilter):
    list_separator = "|"

    def __init__(self, field, request, params, model, model_admin, field_path):
        self.lookup_kwarg = "%s__in" % field_path
        super().__init__(field, request, params, model, model_admin, field_path)

    def expected_parameters(self):
        return [self.lookup_kwarg]

----------------------------------------

TITLE: Installing GeoDjango Prerequisites with MacPorts
DESCRIPTION: Installs PostgreSQL, GEOS, PROJ, PostGIS, GDAL, and libgeoip using MacPorts on macOS.

LANGUAGE: Bash
CODE:
$ sudo port install postgresql14-server
$ sudo port install geos
$ sudo port install proj6
$ sudo port install postgis3
$ sudo port install gdal
$ sudo port install libgeoip

----------------------------------------

TITLE: Using Django Postgres Fields Import Path
DESCRIPTION: Reference to corrected import paths for django.contrib.postgres fields in inspectdb

LANGUAGE: python
CODE:
django.contrib.postgres

----------------------------------------

TITLE: Controlling Localization in Django Templates
DESCRIPTION: Shows how to use the 'localize' template tag to enable or disable localization for specific blocks in a Django template.

LANGUAGE: html
CODE:
{% load l10n %}

{% localize on %}
    {{ value }}
{% endlocalize %}

{% localize off %}
    {{ value }}
{% endlocalize %}

----------------------------------------

TITLE: Low-Level Feed Generation Example
DESCRIPTION: Demonstrates direct usage of the feedgenerator module for custom feed creation

LANGUAGE: python
CODE:
from django.utils import feedgenerator
from datetime import datetime

f = feedgenerator.Atom1Feed(
    title="My Blog",
    link="https://www.example.com/",
    description="In which I write about what I ate today.",
    language="en",
    author_name="Myself",
    feed_url="https://example.com/atom.xml",
)
f.add_item(
    title="Hot dog today",
    link="https://www.example.com/entries/1/",
    pubdate=datetime.now(),
    description="<p>Today I had a Vienna Beef hot dog. It was pink, plump and perfect.</p>",
)

----------------------------------------

TITLE: Modifying PostgreSQL User Privileges via SQL
DESCRIPTION: SQL command to alter an existing user's role to grant database creation privileges without superuser or role creation abilities.

LANGUAGE: psql
CODE:
postgres# ALTER ROLE <user_name> CREATEDB NOSUPERUSER NOCREATEROLE;

----------------------------------------

TITLE: Django QuerySet Method Reference
DESCRIPTION: Reference to Django's select_for_update() QuerySet method used for model locking operations.

LANGUAGE: python
CODE:
:meth:`~django.db.models.query.QuerySet.select_for_update()`

----------------------------------------

TITLE: SQLite DateTime Update Fix
DESCRIPTION: Resolution for QuerySet.update() crash when updating DateTimeField with F() expression and timedelta on SQLite



----------------------------------------

TITLE: Implementing Django Shortcut Function
DESCRIPTION: Implementation of the make_toast() function in django.shortcuts module

LANGUAGE: python
CODE:
def make_toast():
    return "toast"

----------------------------------------

TITLE: Using enforce_csrf_checks Flag in Django Test Client
DESCRIPTION: New feature addition that enables CSRF checks in Django's test client. The enforce_csrf_checks flag allows developers to perform full CSRF validation on forms during testing.

LANGUAGE: python
CODE:
enforce_csrf_checks

----------------------------------------

TITLE: XSS Attack Vector Example
DESCRIPTION: Shows potentially dangerous URL pattern that could be used in XSS attacks through user-supplied redirect URLs.

LANGUAGE: text
CODE:
\njavascript:...

----------------------------------------

TITLE: Documenting a Django View Function
DESCRIPTION: Example of a Django view function with a detailed docstring describing its purpose, context variables, and associated template.

LANGUAGE: python
CODE:
from django.shortcuts import render

from myapp.models import MyModel


def my_view(request, slug):
    """
    Display an individual :model:`myapp.MyModel`.

    **Context**

    ``mymodel``
        An instance of :model:`myapp.MyModel`.

    **Template:**

    :template:`myapp/my_template.html`
    """
    context = {"mymodel": MyModel.objects.get(slug=slug)}
    return render(request, "myapp/my_template.html", context)

----------------------------------------

TITLE: Setting PATH for Postgres.app on macOS
DESCRIPTION: Adds Postgres.app binaries to the system PATH in the .bash_profile file.

LANGUAGE: Bash
CODE:
export PATH=$PATH:/Applications/Postgres.app/Contents/Versions/X.Y/bin

----------------------------------------

TITLE: Django 2.0 User Form Example
DESCRIPTION: Shows how to customize the user form to maintain the 30 character limit on last names after the default was increased to 150.

LANGUAGE: Python
CODE:
from django.contrib.auth.forms import UserChangeForm\n\nclass MyUserChangeForm(UserChangeForm):\n    last_name = forms.CharField(max_length=30, required=False)\n\nclass MyUserAdmin(UserAdmin):\n    form = MyUserChangeForm\n\nadmin.site.unregister(User)\nadmin.site.register(User, MyUserAdmin)

----------------------------------------

TITLE: Using Localize and Unlocalize Filters in Django Templates
DESCRIPTION: Demonstrates the use of 'localize' and 'unlocalize' template filters to control localization of individual values in a Django template.

LANGUAGE: html
CODE:
{% load l10n %}

{{ value|localize }}

{{ value|unlocalize }}

----------------------------------------

TITLE: Current Site Manager Implementation
DESCRIPTION: Example of implementing the CurrentSiteManager on a Photo model to automatically filter objects by the current site.

LANGUAGE: python
CODE:
from django.contrib.sites.models import Site
from django.contrib.sites.managers import CurrentSiteManager
from django.db import models


class Photo(models.Model):
    photo = models.FileField(upload_to="photos")
    photographer_name = models.CharField(max_length=100)
    pub_date = models.DateField()
    site = models.ForeignKey(Site, on_delete=models.CASCADE)
    objects = models.Manager()
    on_site = CurrentSiteManager()

----------------------------------------

TITLE: Security Fix References in Django 2.2.21
DESCRIPTION: References to the affected components (MultiPartParser, UploadedFile, and FieldFile) that were vulnerable to directory traversal attacks through maliciously crafted filenames. The fix implements stricter basename and path sanitation.

LANGUAGE: python
CODE:
MultiPartParser, UploadedFile, FieldFile

----------------------------------------

TITLE: Fixing Subquery Aliases in GROUP BY Clause - Django 3.0.11
DESCRIPTION: Resolution for a regression introduced in Django 3.0.7 where Subquery() aliases were not being properly used in GROUP BY clauses. References ticket #32152.

LANGUAGE: python
CODE:
Subquery()

----------------------------------------

TITLE: Writing Django Test Case
DESCRIPTION: Example test case for the make_toast() function using Django's SimpleTestCase class

LANGUAGE: python
CODE:
from django.shortcuts import make_toast
from django.test import SimpleTestCase


class MakeToastTests(SimpleTestCase):
    def test_make_toast(self):
        self.assertEqual(make_toast(), "toast")

----------------------------------------

TITLE: Admin Inline Rendering with Readonly Fields
DESCRIPTION: Fix for a regression that caused crashes when rendering invalid inlines with readonly_fields in the Django admin interface.

LANGUAGE: python
CODE:
class ModelAdmin:
    readonly_fields = [...]

----------------------------------------

TITLE: Fixed Components in Django 1.6.1
DESCRIPTION: List of fixed Django components including BCryptSHA256PasswordHasher, ForeignKey handling, QuerySet operations, ModelBackend, GenericRelation, and various other bug fixes in Django 1.6.1 release.

LANGUAGE: python
CODE:
BCryptSHA256PasswordHasher
ForeignKey
prefetch_related
Queryset.datetimes
django.contrib.auth.backends.ModelBackend
django.contrib.auth.get_user_model
GenericRelation
ModelForms
ModelMultipleChoiceField
django.contrib.humanize
GeometryField
LocaleMiddleware
ImageField

----------------------------------------

TITLE: Configuring Django URLpatterns for Admin Documentation
DESCRIPTION: Add the admindocs URL pattern to your project's urlpatterns. This should be placed before the admin URL pattern to ensure proper routing.

LANGUAGE: python
CODE:
path('admin/doc/', include('django.contrib.admindocs.urls'))

----------------------------------------

TITLE: PostGIS Extension Migration in Django
DESCRIPTION: Python code showing how to create a Django migration to enable the PostGIS extension programmatically.

LANGUAGE: python
CODE:
from django.contrib.postgres.operations import CreateExtension
from django.db import migrations


class Migration(migrations.Migration):
    operations = [CreateExtension("postgis"), ...]

----------------------------------------

TITLE: Referencing StringAgg Aggregation Function in Django
DESCRIPTION: This snippet demonstrates how to reference the StringAgg aggregation function from django.contrib.postgres.aggregates, which was the subject of a security fix in this release.

LANGUAGE: python
CODE:
:class:`~django.contrib.postgres.aggregates.StringAgg`

----------------------------------------

TITLE: URL Pattern Internationalization
DESCRIPTION: Example of internationalizing URL patterns using i18n_patterns

LANGUAGE: python
CODE:
from django.conf.urls.i18n import i18n_patterns
from django.urls import include, path
from django.utils.translation import gettext_lazy as _

urlpatterns = i18n_patterns(
    path(_("about/"), about_views.main, name="about"),
    path(_("news/"), include(news_patterns, namespace="news")),
)

----------------------------------------

TITLE: Mapping OGR Data Sources in Django
DESCRIPTION: The mapping function is used to create a mapping for OGR data sources. It takes a data_source as a required parameter, with optional parameters for geometry name, layer key, and multi-geometry support.

LANGUAGE: Python
CODE:
mapping(data_source, geom_name='geom', layer_key=0, multi_geom=False)

----------------------------------------

TITLE: Using Window Expressions in When Conditions
DESCRIPTION: Restored functionality to use Window expressions in conditions outside of queryset filters, particularly in When conditions.

LANGUAGE: python
CODE:
from django.db.models.expressions import Window, When

----------------------------------------

TITLE: Fixing Model Locking in select_for_update() with Multi-table Inheritance
DESCRIPTION: Addresses a data loss possibility (ticket #31246) in select_for_update() when using related fields or parent link fields with multi-table inheritance in the 'of' argument.

LANGUAGE: Python
CODE:
# No specific code provided, but the fix ensures proper locking of corresponding models in select_for_update() with multi-table inheritance.

----------------------------------------

TITLE: Django 2.0 Database Table Rebuild Script
DESCRIPTION: Script to rebuild database tables to update foreign key constraints after upgrading to Django 2.0.

LANGUAGE: Python
CODE:
from django.apps import apps\nfrom django.db import connection\n\nfor app in apps.get_app_configs():\n    for model in app.get_models(include_auto_created=True):\n        if model._meta.managed and not (model._meta.proxy or model._meta.swapped):\n            for base in model.__bases__:\n                if hasattr(base, "_meta"):\n                    base._meta.local_many_to_many = []\n            model._meta.local_many_to_many = []\n            with connection.schema_editor() as editor:\n                editor._remake_table(model)

----------------------------------------

TITLE: Updating Admin Site URLs in Django 1.9
DESCRIPTION: Example of updating the URL configuration for the Django admin site in Django 1.9.

LANGUAGE: Python
CODE:
from django.conf.urls import url
from django.contrib import admin

urlpatterns = [
    url(r"^admin/", admin.site.urls),
]

----------------------------------------

TITLE: Django QuerySet Methods for Raw SQL Queries
DESCRIPTION: The raw() and extra() methods of Django's QuerySet allow developers to supply raw SQL or SQL fragments. Users are advised to perform appropriate manual type conversions before executing queries to prevent MySQL typecasting issues.

LANGUAGE: Python
CODE:
QuerySet.raw()
QuerySet.extra()

----------------------------------------

TITLE: Implementing a Redirecting Admin Action in Django
DESCRIPTION: This snippet demonstrates an action that redirects to a custom view, passing selected object IDs as parameters.

LANGUAGE: python
CODE:
from django.contrib.contenttypes.models import ContentType
from django.http import HttpResponseRedirect

def export_selected_objects(modeladmin, request, queryset):
    selected = queryset.values_list("pk", flat=True)
    ct = ContentType.objects.get_for_model(queryset.model)
    return HttpResponseRedirect(
        "/export/?ct=%s&ids=%s"
        % (
            ct.pk,
            ",".join(str(pk) for pk in selected),
        )
    )

----------------------------------------

TITLE: Database Configuration for GeoDjango
DESCRIPTION: PostgreSQL/PostGIS database configuration in Django settings.py for spatial functionality.

LANGUAGE: python
CODE:
DATABASES = {
    "default": {
        "ENGINE": "django.contrib.gis.db.backends.postgis",
        "NAME": "geodjango",
        "USER": "geo",
    },
}

----------------------------------------

TITLE: Referencing WKBWriter Class
DESCRIPTION: Reference to the WKBWriter class where the geos_version_tuple() bug fix was implemented.

LANGUAGE: Python
CODE:
WKBWriter

----------------------------------------

TITLE: Implementing Last Modified Function for Django Views
DESCRIPTION: Function to compute the last modified time for blog entries, used with conditional view processing decorators.

LANGUAGE: python
CODE:
def latest_entry(request, blog_id):
    return Entry.objects.filter(blog=blog_id).latest("published").published

----------------------------------------

TITLE: Spatial Aggregation in Django
DESCRIPTION: Example of using GIS aggregate functions to compute geometric unions and extents

LANGUAGE: python
CODE:
>>> from django.contrib.gis.db.models import Extent, Union
>>> WorldBorder.objects.aggregate(Extent("mpoly"), Union("mpoly"))

----------------------------------------

TITLE: Fixing File System Cache Permissions in Django 3.1.1
DESCRIPTION: Addresses CVE-2020-24584 where intermediate-level directories of the file system cache had incorrect permissions on Python 3.7+.

LANGUAGE: python
CODE:
0o077

----------------------------------------

TITLE: Fixing QuerySet Values with Aggregation and Exists (Python/Django)
DESCRIPTION: Addresses a regression in Django 3.0 where QuerySet.values() and values_list() crashed with querysets containing both aggregation and Exists() annotation.

LANGUAGE: Python
CODE:
from django.db.models import Exists

QuerySet.values()
QuerySet.values_list()

----------------------------------------

TITLE: Fixing Memory Exhaustion in django.utils.numberformat.format() (Python)
DESCRIPTION: Addresses CVE-2019-6975 by implementing a limit on the number of digits for Decimal formatting. Decimals with more than 200 digits are now formatted using scientific notation to prevent significant memory usage.

LANGUAGE: Python
CODE:
django.utils.numberformat.format()

----------------------------------------

TITLE: Vulnerable Static File Serving View in Django
DESCRIPTION: Reference to the django.views.static.serve view, which was vulnerable to open redirect attacks (CVE-2017-7234). This view is not recommended for production use.

LANGUAGE: python
CODE:
django.views.static.serve

----------------------------------------

TITLE: Using Django Slug Validator
DESCRIPTION: References the validate_slug function, which has been improved to prevent newline-based vulnerabilities.

LANGUAGE: python
CODE:
django.core.validators.validate_slug

----------------------------------------

TITLE: Creating an Admin Action with Intermediate Page in Django
DESCRIPTION: This example shows how to create an admin action that returns an intermediate page, in this case, exporting selected objects as JSON.

LANGUAGE: python
CODE:
from django.core import serializers
from django.http import HttpResponse

def export_as_json(modeladmin, request, queryset):
    response = HttpResponse(content_type="application/json")
    serializers.serialize("json", queryset, stream=response)
    return response

----------------------------------------

TITLE: Accessing File Attributes in Django Shell
DESCRIPTION: This snippet shows how to access various attributes of a file stored in a FileField or ImageField using the Django shell.

LANGUAGE: pycon
CODE:
>>> car = Car.objects.get(name="57 Chevy")
>>> car.photo
<ImageFieldFile: cars/chevy.jpg>
>>> car.photo.name
'cars/chevy.jpg'
>>> car.photo.path
'/media/cars/chevy.jpg'
>>> car.photo.url
'https://media.example.com/cars/chevy.jpg'

----------------------------------------

TITLE: Fixing QuerySet.union() and difference() with EmptyResultSet in Django
DESCRIPTION: This bugfix addresses an issue with QuerySet.union() and difference() methods when combining with a queryset that raises EmptyResultSet. It ensures proper handling of empty result sets in these operations.

LANGUAGE: Python
CODE:
QuerySet.union()
QuerySet.difference()

----------------------------------------

TITLE: Defining Django Blog Models for Conditional Processing
DESCRIPTION: Example models showing a basic blog system setup with Blog and Entry models used to demonstrate conditional processing concepts.

LANGUAGE: python
CODE:
import datetime
from django.db import models


class Blog(models.Model): ...


class Entry(models.Model):
    blog = models.ForeignKey(Blog, on_delete=models.CASCADE)
    published = models.DateTimeField(default=datetime.datetime.now)
    ...

----------------------------------------

TITLE: Using LayerMapping to Import Data
DESCRIPTION: Demonstrates how to use LayerMapping to import spatial data from a shapefile into a GeoDjango model, including field mapping and save operation.

LANGUAGE: python
CODE:
>>> from django.contrib.gis.utils import LayerMapping
>>> from geoapp.models import TestGeo
>>> mapping = {
...     "name": "str",  # The 'name' model field maps to the 'str' layer field.
...     "poly": "POLYGON",  # For geometry fields use OGC name.
... }  # The mapping is a dictionary
>>> lm = LayerMapping(TestGeo, "test_poly.shp", mapping)
>>> lm.save(verbose=True)  # Save the layermap, imports the data.
Saved: Name: 1
Saved: Name: 2
Saved: Name: 3

----------------------------------------

TITLE: Ordering and Grouping by JSONField in Django
DESCRIPTION: Fixes a QuerySet.order_by() crash on PostgreSQL when ordering and grouping by JSONField with a custom decoder.

LANGUAGE: python
CODE:
QuerySet.order_by()

----------------------------------------

TITLE: Fixing Prefetch Related for GenericForeignKey (Python/Django)
DESCRIPTION: Addresses a regression in Django 3.0 that caused QuerySet.prefetch_related() to crash for GenericForeignKey with a custom ContentType foreign key.

LANGUAGE: Python
CODE:
from django.contrib.contenttypes.fields import GenericForeignKey
from django.contrib.contenttypes.models import ContentType

QuerySet.prefetch_related()

----------------------------------------

TITLE: Checking URL Safety in Python with is_safe_url()
DESCRIPTION: Demonstrates the use of is_safe_url() for checking redirect URL safety. The function now properly handles URLs with leading control characters.

LANGUAGE: Python
CODE:
from django.utils.http import is_safe_url

# Example usage
url = request.GET.get('next', '/')
if is_safe_url(url):
    return redirect(url)
else:
    return redirect('/')

----------------------------------------

TITLE: Calling Django's is_safe_url() Function
DESCRIPTION: This snippet shows the usage of Django's is_safe_url() function, which was the source of the CVE-2016-2512 vulnerability.

LANGUAGE: Python
CODE:
"django.utils.http.is_safe_url()"

----------------------------------------

TITLE: Using Django IP Address Validator
DESCRIPTION: Mentions the validate_ipv4_address function, which has been updated to prevent newline-based vulnerabilities.

LANGUAGE: python
CODE:
django.core.validators.validate_ipv4_address

----------------------------------------

TITLE: Using SingleObjectTemplateResponseMixin in Django Views
DESCRIPTION: The SingleObjectTemplateResponseMixin handles template-based response rendering for single object views. It provides flexible template name resolution based on app label, model name, and customizable suffixes.

LANGUAGE: python
CODE:
from django.views.generic.detail import SingleObjectTemplateResponseMixin

class YourDetailView(SingleObjectTemplateResponseMixin):
    template_name_field = 'template_name'
    template_name_suffix = '_detail'
    model = YourModel

----------------------------------------

TITLE: Changing File Name and Location in Django
DESCRIPTION: This snippet demonstrates how to change the file name and location of a file stored in a FileField or ImageField.

LANGUAGE: pycon
CODE:
>>> import os
>>> from django.conf import settings
>>> initial_path = car.photo.path
>>> car.photo.name = "cars/chevy_ii.jpg"
>>> new_path = settings.MEDIA_ROOT + car.photo.name
>>> # Move the file on the filesystem
>>> os.rename(initial_path, new_path)
>>> car.save()
>>> car.photo.path
'/media/cars/chevy_ii.jpg'
>>> car.photo.path == new_path
True

----------------------------------------

TITLE: Updating ModelAdmin list_display for Foreign Key IDs
DESCRIPTION: Example of how to update ModelAdmin list_display to show a foreign key's ID instead of its string representation.

LANGUAGE: python
CODE:
class MyModelAdmin(admin.ModelAdmin):
    list_display = ['field_id']  # Will now display the ID instead of __str__

----------------------------------------

TITLE: Running Django Tests from Command Line
DESCRIPTION: This snippet shows various ways to run Django tests using the manage.py test command. It includes examples of running all tests, specific modules, test cases, and individual test methods.

LANGUAGE: Shell
CODE:
$ ./manage.py test

# Run all the tests in the animals.tests module
$ ./manage.py test animals.tests

# Run all the tests found within the 'animals' package
$ ./manage.py test animals

# Run just one test case class
$ ./manage.py test animals.tests.AnimalTestCase

# Run just one test method
$ ./manage.py test animals.tests.AnimalTestCase.test_animals_can_speak

----------------------------------------

TITLE: Configuring PostGIS Version in Django Settings
DESCRIPTION: Sets the PostGIS version manually using a 3-tuple of integers to avoid automatic version detection query.

LANGUAGE: python
CODE:
POSTGIS_VERSION = (X, Y, Z)

----------------------------------------

TITLE: Using URLField Form Field in Django
DESCRIPTION: This snippet mentions the URLField form field, which uses URLValidator. It's noted that this field silently removes newlines and tabs on Python 3.9.5+, mitigating the vulnerability in form contexts.

LANGUAGE: python
CODE:
from django.forms import URLField

----------------------------------------

TITLE: Using TimeField in MySQL and SQLite
DESCRIPTION: Fixed microseconds round-tripping issue with TimeField when using MySQL and SQLite databases. This ensures proper time precision handling.

LANGUAGE: Python
CODE:
TimeField()

----------------------------------------

TITLE: Single Site Article Model with ForeignKey
DESCRIPTION: Model implementation for articles that belong to a single site using a ForeignKey relationship to the Site model.

LANGUAGE: python
CODE:
from django.contrib.sites.models import Site
from django.db import models


class Article(models.Model):
    headline = models.CharField(max_length=200)
    # ...
    site = models.ForeignKey(Site, on_delete=models.CASCADE)

----------------------------------------

TITLE: Type Conversion in Django Model Fields for MySQL
DESCRIPTION: Explanation of MySQL typecasting issues and the fix implemented in Django model fields. FilePathField, GenericIPAddressField, and IPAddressField now perform explicit type conversion before querying.

LANGUAGE: Python
CODE:
FilePathField
GenericIPAddressField
IPAddressField

----------------------------------------

TITLE: Unsafe URL Redirect Example
DESCRIPTION: Illustrates the security vulnerability in is_safe_url() function where leading whitespace wasn't stripped, allowing potentially malicious URLs to be considered safe.

LANGUAGE: plaintext
CODE:
\njavascript:...

----------------------------------------

TITLE: Updating the DetailView get_queryset() Method in Django
DESCRIPTION: This code snippet shows how to modify the get_queryset() method of the DetailView to exclude questions that aren't published yet.

LANGUAGE: Python
CODE:
class DetailView(generic.DetailView):
    ...

    def get_queryset(self):
        """
        Excludes any questions that aren't published yet.
        """
        return Question.objects.filter(pub_date__lte=timezone.now())

----------------------------------------

TITLE: Creating a File Object in Django
DESCRIPTION: This snippet demonstrates how to create a File object in Django using a Python built-in file object.

LANGUAGE: pycon
CODE:
>>> from django.core.files import File

# Create a Python file object using open()
>>> f = open("/path/to/hello.world", "w")
>>> myfile = File(f)

----------------------------------------

TITLE: Fixed ClearableFileInput Checkbox Default Value
DESCRIPTION: Bug fix for the 'Clear' checkbox behavior in ClearableFileInput when used with model form fields that have a default value set.

LANGUAGE: Python
CODE:
ClearableFileInput

----------------------------------------

TITLE: Displaying Error Messages using Django Template Loop
DESCRIPTION: Template code that iterates through an 'errors' collection and displays each error message prefixed with a bullet point. Common use case for form validation errors or system message displays in Django applications.

LANGUAGE: django-template
CODE:
{% for error in errors %}* {{ error }}
{% endfor %}

----------------------------------------

TITLE: Importing GeoDjango Utilities Module in Python
DESCRIPTION: This snippet shows how to import the GeoDjango utilities module in Python. The module contains various utilities for creating geospatial web applications.

LANGUAGE: Python
CODE:
from django.contrib.gis import utils

----------------------------------------

TITLE: IPv4 Validation Security Fix - CVE-2021-33571
DESCRIPTION: Security update for Django's IP address validators to prevent SSRF, RFI, and LFI attacks through malformed IPv4 addresses with leading zeros in octal literals. Affects URLValidator, validate_ipv4_address, and validate_ipv46_address functions.

LANGUAGE: python
CODE:
django.core.validators.URLValidator
django.core.validators.validate_ipv4_address
django.core.validators.validate_ipv46_address

----------------------------------------

TITLE: PostgreSQL SplitArrayField Usage
DESCRIPTION: Fix for handling invalid values in SplitArrayField with IntegerField

LANGUAGE: python
CODE:
contrib.postgres.forms.SplitArrayField

----------------------------------------

TITLE: Creating Functional Index with Lower() Function in Django
DESCRIPTION: Creates a functional index on the lowercased title field in descending order and pub_date field in ascending order.

LANGUAGE: python
CODE:
Index(Lower("title").desc(), "pub_date", name="lower_title_date_idx")

----------------------------------------

TITLE: Django Session Configuration Setting Reference
DESCRIPTION: Configuration setting controlling session save behavior in Django applications.

LANGUAGE: python
CODE:
SESSION_SAVE_EVERY_REQUEST

----------------------------------------

TITLE: Demonstrating Vulnerable Host Header in Django 1.4.1
DESCRIPTION: This code snippet shows an example of a vulnerable Host header that was accepted by Django 1.4.1 and earlier versions when running on validsite.com. This vulnerability could allow attackers to generate and display arbitrary URLs to users.

LANGUAGE: text
CODE:
Host: validsite.com:random@evilsite.com

----------------------------------------

TITLE: Creating Virtual Environment in Console
DESCRIPTION: Commands for creating and activating a Python virtual environment for Django development

LANGUAGE: console
CODE:
$ python3 -m venv ~/.virtualenvs/djangodev
$ source ~/.virtualenvs/djangodev/bin/activate

----------------------------------------

TITLE: Custom AdminSite Class
DESCRIPTION: Example of creating a custom AdminSite class

LANGUAGE: Python
CODE:
from django.contrib import admin

from .models import MyModel


class MyAdminSite(admin.AdminSite):
    site_header = "Monty Python administration"


admin_site = MyAdminSite(name="myadmin")
admin_site.register(MyModel)

----------------------------------------

TITLE: Oracle Password Quoting Fix
DESCRIPTION: Fix for ORA-00922 error when Oracle test user's password starts with a number or special character



----------------------------------------

TITLE: Configuring URLs for Author Views
DESCRIPTION: This snippet shows how to set up URL patterns for the Author-related views (Create, Update, Delete) using Django's path function. It demonstrates how to use the as_view() method to convert class-based views into view functions.

LANGUAGE: python
CODE:
from django.urls import path
from myapp.views import AuthorCreateView, AuthorDeleteView, AuthorUpdateView

urlpatterns = [
    # ...
    path("author/add/", AuthorCreateView.as_view(), name="author-add"),
    path("author/<int:pk>/", AuthorUpdateView.as_view(), name="author-update"),
    path("author/<int:pk>/delete/", AuthorDeleteView.as_view(), name="author-delete"),
]

----------------------------------------

TITLE: Implementing Item Geometry in Zipcode Feed
DESCRIPTION: Example showing how to implement item_geometry method in a ZipcodeFeed class to return polygon geometry for individual feed items.

LANGUAGE: python
CODE:
class ZipcodeFeed(Feed):
    def item_geometry(self, obj):
        # Returns the polygon.
        return obj.poly

----------------------------------------

TITLE: Using makemigrations with OrderBy expressions in Meta.ordering
DESCRIPTION: A bugfix in Django 3.2.2 prevents makemigrations from generating infinite migrations for models with Meta.ordering containing OrderBy expressions. This addresses a regression introduced in Django 3.2.1.

LANGUAGE: python
CODE:
from django.db import models
from django.db.models import F

class MyModel(models.Model):
    name = models.CharField(max_length=100)
    date = models.DateField()

    class Meta:
        ordering = [F('date').asc()]

# Run makemigrations command
# python manage.py makemigrations

----------------------------------------

TITLE: Django Import Statement Ordering
DESCRIPTION: Standardized import statement ordering in new migrations for better consistency

LANGUAGE: python
CODE:
from django.db import migrations, models

----------------------------------------

TITLE: Loading and Rendering a Template
DESCRIPTION: Example of loading a template from a string and rendering it with a context.

LANGUAGE: Python
CODE:
from django.template import Context, Template

template = Template("My name is {{ my_name }}.")

context = Context({"my_name": "Adrian"})
rendered = template.render(context)
print(rendered)  # Output: My name is Adrian.

----------------------------------------

TITLE: Restoring reverse() functionality for functools.partial() views in Django
DESCRIPTION: This bugfix restored the ability to use reverse() on views created using functools.partial(). It addresses the regression introduced in the Django 1.5.6 security release.

LANGUAGE: Python
CODE:
reverse()

----------------------------------------

TITLE: Configuring delete cascade behavior on model relationships
DESCRIPTION: Example of using the new on_delete argument to customize behavior when a referenced object is deleted.

LANGUAGE: Python
CODE:
class MyModel(models.Model):
    foreign_key = models.ForeignKey(OtherModel, on_delete=models.SET_NULL)

----------------------------------------

TITLE: Running Django tests with code coverage
DESCRIPTION: Commands to run Django tests with code coverage analysis and generate an HTML report.

LANGUAGE: Shell
CODE:
$ coverage run ./runtests.py --settings=test_sqlite
$ coverage combine
$ coverage html

----------------------------------------

TITLE: Running Django makemigrations command
DESCRIPTION: This command generates a migration that deletes tables for removed models and updates related relationships.

LANGUAGE: Shell
CODE:
python manage.py makemigrations

----------------------------------------

TITLE: Testing Django Authentication Properties
DESCRIPTION: Fix allowing User.is_authenticated and User.is_anonymous properties to be tested for set membership

LANGUAGE: python
CODE:
User.is_authenticated

LANGUAGE: python
CODE:
User.is_anonymous

----------------------------------------

TITLE: Implementing AuthorCreateView with User Association
DESCRIPTION: This snippet demonstrates how to create an AuthorCreateView that associates the created Author with the currently logged-in user. It uses LoginRequiredMixin to ensure only authenticated users can access the view.

LANGUAGE: python
CODE:
from django.contrib.auth.mixins import LoginRequiredMixin
from django.views.generic.edit import CreateView
from myapp.models import Author


class AuthorCreateView(LoginRequiredMixin, CreateView):
    model = Author
    fields = ["name"]

    def form_valid(self, form):
        form.instance.created_by = self.request.user
        return super().form_valid(form)

----------------------------------------

TITLE: Creating a PostgreSQL Extension Loading Operation in Django
DESCRIPTION: Demonstrates a custom migration operation that loads PostgreSQL extensions. This operation executes SQL commands to create or drop extensions without changing model state.

LANGUAGE: Python
CODE:
from django.db.migrations.operations.base import Operation


class LoadExtension(Operation):
    reversible = True

    def __init__(self, name):
        self.name = name

    def state_forwards(self, app_label, state):
        pass

    def database_forwards(self, app_label, schema_editor, from_state, to_state):
        schema_editor.execute("CREATE EXTENSION IF NOT EXISTS %s" % self.name)

    def database_backwards(self, app_label, schema_editor, from_state, to_state):
        schema_editor.execute("DROP EXTENSION %s" % self.name)

    def describe(self):
        return "Creates extension %s" % self.name

    @property
    def migration_name_fragment(self):
        return "create_extension_%s" % self.name

----------------------------------------

TITLE: Using mysqlclient Package Support
DESCRIPTION: Preparation for supporting mysqlclient versions greater than 2.0.3.

LANGUAGE: python
CODE:
mysqlclient > 2.0.3

----------------------------------------

TITLE: Syncing Deprecated Storage Settings with STORAGES in Django 4.2
DESCRIPTION: Fixes a bug where the deprecated DEFAULT_FILE_STORAGE and STATICFILES_STORAGE settings were not synchronized with the STORAGES setting in Django 4.2.

LANGUAGE: python
CODE:
DEFAULT_FILE_STORAGE
STATICFILES_STORAGE
STORAGES

----------------------------------------

TITLE: Using the new url template tag syntax
DESCRIPTION: Example of using the new url template tag syntax from the future library to be compatible with Django 1.5+.

LANGUAGE: Django Template
CODE:
{% load url from future %}
{% url 'sample' %}

----------------------------------------

TITLE: Configuring Windows Environment for GeoDjango
DESCRIPTION: Sets up environment variables and system PATH for GeoDjango on Windows using OSGeo4W.

LANGUAGE: Batch
CODE:
set OSGEO4W_ROOT=C:\OSGeo4W
set GDAL_DATA=%OSGEO4W_ROOT%\apps\gdal\share\gdal
set PROJ_LIB=%OSGEO4W_ROOT%\share\proj
set PATH=%PATH%;%OSGEO4W_ROOT%\bin
reg ADD "HKLM\SYSTEM\CurrentControlSet\Control\Session Manager\Environment" /v Path /t REG_EXPAND_SZ /f /d "%PATH%"
reg ADD "HKLM\SYSTEM\CurrentControlSet\Control\Session Manager\Environment" /v GDAL_DATA /t REG_EXPAND_SZ /f /d "%GDAL_DATA%"
reg ADD "HKLM\SYSTEM\CurrentControlSet\Control\Session Manager\Environment" /v PROJ_LIB /t REG_EXPAND_SZ /f /d "%PROJ_LIB%"

----------------------------------------

TITLE: Django Model Changes Example
DESCRIPTION: Example showing the required changes to model definitions when migrating from Django 0.96 to 1.0, including changes to field parameters and string handling.

LANGUAGE: python
CODE:
# Old (0.96)
class Author(models.Model):
    first_name = models.CharField(maxlength=30)
    last_name = models.CharField(maxlength=30)
    slug = models.CharField(maxlength=60, prepopulate_from=("first_name", "last_name"))

    class Admin:
        list_display = ["first_name", "last_name"]

    def __str__(self):
        return "%s %s" % (self.first_name, self.last_name)

# New (1.0)
class Author(models.Model):
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=30)
    slug = models.CharField(max_length=60)

    def __unicode__(self):
        return "%s %s" % (self.first_name, self.last_name)

----------------------------------------

TITLE: Serving User-Uploaded Files in Development Using URLconf
DESCRIPTION: Configures URLs to serve user-uploaded media files during development by adding a pattern to the URLconf. This should only be used in debug mode.

LANGUAGE: python
CODE:
from django.conf import settings
from django.conf.urls.static import static

urlpatterns = [
    # ... the rest of your URLconf goes here ...
] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

----------------------------------------

TITLE: Setting Django Settings Module Path
DESCRIPTION: Example of the Python module path format for Django settings module configuration.

LANGUAGE: python
CODE:
mysite.settings

----------------------------------------

TITLE: Using functools.partial() for view creation in Django
DESCRIPTION: This snippet demonstrates the usage of functools.partial() to create views in Django, which can now be properly reversed after the bugfix in Django 1.5.7.

LANGUAGE: Python
CODE:
functools.partial()

----------------------------------------

TITLE: Dynamic Filtering in ListView
DESCRIPTION: Implementation of a ListView with dynamic filtering based on URL parameters.

LANGUAGE: python
CODE:
from django.shortcuts import get_object_or_404
from django.views.generic import ListView
from books.models import Book, Publisher

class PublisherBookListView(ListView):
    template_name = "books/books_by_publisher.html"

    def get_queryset(self):
        self.publisher = get_object_or_404(Publisher, name=self.kwargs["publisher"])
        return Book.objects.filter(publisher=self.publisher)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["publisher"] = self.publisher
        return context

----------------------------------------

TITLE: Using Cast Function in Django ORM
DESCRIPTION: Example of using the Cast function to convert age to float

LANGUAGE: python
CODE:
>>> from django.db.models import FloatField
>>> from django.db.models.functions import Cast
>>> Author.objects.create(age=25, name="Margaret Smith")
>>> author = Author.objects.annotate(
...     age_as_float=Cast("age", output_field=FloatField()),
... ).get()
>>> print(author.age_as_float)
25.0

----------------------------------------

TITLE: Security Fix: dictsort Template Filter Restriction
DESCRIPTION: Fix for CVE-2021-45116 addressing potential information disclosure in the dictsort template filter by implementing restricted resolution logic that prevents method calls and dictionary indexing.

LANGUAGE: python
CODE:
dictsort

----------------------------------------

TITLE: Fixing ManyToManyField Table Rebuild on SQLite in Django 4.1.4
DESCRIPTION: Addresses a regression in Django 4.1 that caused unnecessary table rebuilds when adding a ManyToManyField on SQLite. This fix improves performance and reduces unnecessary operations.

LANGUAGE: python
CODE:
# No code snippet provided, but the fix relates to ManyToManyField and SQLite operations

----------------------------------------

TITLE: Fixing Asynchronous Methods Crash in Django 4.1.4
DESCRIPTION: Resolves an issue with acreate(), aget_or_create(), and aupdate_or_create() asynchronous methods of related managers that were causing crashes. This improves the reliability of asynchronous operations in Django.

LANGUAGE: python
CODE:
# Involves acreate(), aget_or_create(), and aupdate_or_create() methods
# No specific code provided, but relates to asynchronous operations

----------------------------------------

TITLE: Setting PATH and DYLD_FALLBACK_LIBRARY_PATH for MacPorts
DESCRIPTION: Configures PATH and DYLD_FALLBACK_LIBRARY_PATH environment variables for MacPorts installations.

LANGUAGE: Bash
CODE:
export PATH=/opt/local/bin:/opt/local/lib/postgresql14/bin
export DYLD_FALLBACK_LIBRARY_PATH=/opt/local/lib:/opt/local/lib/postgresql14

----------------------------------------

TITLE: Configuring URLconf with Callable in Django
DESCRIPTION: Demonstrates the new method of defining URL patterns in Django 0.96 using direct references to view functions.

LANGUAGE: Python
CODE:
from django.conf.urls.defaults import *
from mysite.myapp.views import myview

urlpatterns = patterns("", ("^myview/$", myview))

----------------------------------------

TITLE: Inspecting Database Schema with Django's inspectdb Command
DESCRIPTION: Use Django's inspectdb command to auto-generate model definitions from an existing database schema. The output can be redirected to a file for further editing.

LANGUAGE: shell
CODE:
$ python manage.py inspectdb

LANGUAGE: shell
CODE:
$ python manage.py inspectdb > models.py

----------------------------------------

TITLE: Creating a Custom Form with Label Attribute in Django
DESCRIPTION: Shows how to create a custom form class with specified labels for fields, and demonstrates the output when printing the form.

LANGUAGE: pycon
CODE:
>>> from django import forms
>>> class CommentForm(forms.Form):
...     name = forms.CharField(label="Your name")
...     url = forms.URLField(label="Your website", required=False)
...     comment = forms.CharField()
...
>>> f = CommentForm(auto_id=False)
>>> print(f)
<div>Your name:<input type="text" name="name" required></div>
<div>Your website:<input type="url" name="url"></div>
<div>Comment:<input type="text" name="comment" required></div>

----------------------------------------

TITLE: Mitigating XSS Attack via User-Supplied Redirect URLs in Django
DESCRIPTION: Explanation of a security vulnerability in Django's URL redirect functionality, specifically in django.utils.http.is_safe_url(). The function didn't properly check for http(s) schemes, allowing potential XSS attacks through javascript: URLs.

LANGUAGE: Python
CODE:
django.utils.http.is_safe_url()

----------------------------------------

TITLE: Using Static Template Tag in Django HTML Templates
DESCRIPTION: Demonstrates how to use the static template tag to build URLs for static files in Django HTML templates.

LANGUAGE: html
CODE:
{% load static %}
<img src="{% static 'my_app/example.jpg' %}" alt="My image">

----------------------------------------

TITLE: Creating a Custom Book Model Factory Method
DESCRIPTION: Example showing how to create a custom class method on a Book model for instantiating books with custom logic

LANGUAGE: python
CODE:
from django.db import models

class Book(models.Model):
    title = models.CharField(max_length=100)

    @classmethod
    def create(cls, title):
        book = cls(title=title)
        # do something with the book
        return book

book = Book.create("Pride and Prejudice")

----------------------------------------

TITLE: Fixing IPv6 Address Validation in Python/Django
DESCRIPTION: References the fix for validate_ipv6_address() and validate_ipv46_address() functions that previously crashed when handling non-string values. This was a regression introduced in Django 4.2.18.

LANGUAGE: python
CODE:
validate_ipv6_address()
validate_ipv46_address()

----------------------------------------

TITLE: Model save() Method Invocation
DESCRIPTION: Reference to the model's save() method that could be triggered inappropriately through admin interface, causing privilege escalation by invoking pre and post-save signal handlers.

LANGUAGE: python
CODE:
save()

----------------------------------------

TITLE: Referencing Django 404 Handler
DESCRIPTION: Reference to the Django built-in 404 handler view that was affected by the security vulnerability CVE-2019-3498. The view has been updated to prevent content spoofing in the default error page.

LANGUAGE: python
CODE:
django.views.defaults.page_not_found()

----------------------------------------

TITLE: Checking SQLite R*Tree Support in SQLite CLI
DESCRIPTION: SQL command to verify if SQLite is compiled with R*Tree module support by attempting to create a virtual table.

LANGUAGE: sqlite3
CODE:
CREATE VIRTUAL TABLE testrtree USING rtree(id,minX,maxX,minY,maxY);

----------------------------------------

TITLE: Creating a UniqueConstraint with Null Handling in Django
DESCRIPTION: Shows how to create a unique constraint that treats NULL values as not distinct. This example allows only one row to store a NULL value in the ordering column.

LANGUAGE: python
CODE:
UniqueConstraint(name="ordering", fields=["ordering"], nulls_distinct=False)

----------------------------------------

TITLE: Apache Group-Based Authorization Configuration
DESCRIPTION: Apache configuration for enabling group-based authorization using Django's authentication system.

LANGUAGE: apache
CODE:
WSGIScriptAlias / /path/to/mysite.com/mysite/wsgi.py

WSGIProcessGroup %{GLOBAL}
WSGIApplicationGroup %{GLOBAL}

<Location "/secret">
    AuthType Basic
    AuthName "Top Secret"
    AuthBasicProvider wsgi
    WSGIAuthUserScript /path/to/mysite.com/mysite/wsgi.py
    WSGIAuthGroupScript /path/to/mysite.com/mysite/wsgi.py
    Require group secret-agents
    Require valid-user
</Location>

----------------------------------------

TITLE: Adding ARIA Attributes to Django Form Fields
DESCRIPTION: Demonstrates how to add ARIA attributes to form fields for accessibility, including custom attributes.

LANGUAGE: pycon
CODE:
>>> from django import forms
>>> class UserForm(forms.Form):
...     username = forms.CharField(max_length=255, help_text="e.g., user@example.com")
...
>>> f = UserForm()
>>> print(f)
<div>
<label for="id_username">Username:</label>
<div class="helptext" id="id_username_helptext">e.g., user@example.com</div>
<input type="text" name="username" maxlength="255" required aria-describedby="id_username_helptext" id="id_username">
</div>

----------------------------------------

TITLE: Using Django URL Validator
DESCRIPTION: Mentions the URLValidator class, which has been updated to address newline-based vulnerabilities.

LANGUAGE: python
CODE:
django.core.validators.URLValidator

----------------------------------------

TITLE: Configuring INSTALLED_APPS Setting
DESCRIPTION: Example of adding a new app to the INSTALLED_APPS setting in Django.

LANGUAGE: python
CODE:
INSTALLED_APPS = [
    # ...
    "myapp",
    # ...
]

----------------------------------------

TITLE: Conditional Aggregation with SQL Examples
DESCRIPTION: Examples of conditional aggregation using Count with filters, showing both SQL FILTER WHERE and CASE statement approaches

LANGUAGE: sql
CODE:
SELECT count('id') FILTER (WHERE account_type=1) as regular,
       count('id') FILTER (WHERE account_type=2) as gold,
       count('id') FILTER (WHERE account_type=3) as platinum
FROM clients;

LANGUAGE: sql
CODE:
SELECT count(CASE WHEN account_type=1 THEN id ELSE null) as regular,
       count(CASE WHEN account_type=2 THEN id ELSE null) as gold,
       count(CASE WHEN account_type=3 THEN id ELSE null) as platinum
FROM clients;

----------------------------------------

TITLE: Adding Custom Library Path to System Configuration
DESCRIPTION: Adds a custom library path to the system's ld.so.conf file and updates the library cache.

LANGUAGE: Bash
CODE:
$ sudo echo /usr/local/lib >> /etc/ld.so.conf
$ sudo ldconfig

----------------------------------------

TITLE: Fixing Empty Field List Filter for GenericRelation
DESCRIPTION: Resolution for EmptyFieldListFilter crash when used with GenericRelation in Django admin

LANGUAGE: python
CODE:
django.contrib.admin.EmptyFieldListFilter

----------------------------------------

TITLE: Using dbshell with Oracle in Django 2.2.1
DESCRIPTION: Fixed a regression in Django 2.1 that caused incorrect quoting of database user password when using dbshell on Oracle.

LANGUAGE: python
CODE:
python manage.py dbshell

----------------------------------------

TITLE: Creating Point Objects
DESCRIPTION: Demonstrates creating Point objects using coordinates.

LANGUAGE: pycon
CODE:
>>> from django.contrib.gis.geos import Point
>>> pnt = Point(5, 23)

----------------------------------------

TITLE: Searching Django Documentation with Unix Grep
DESCRIPTION: Example of using the Unix grep utility to search through Django documentation files for specific terms.

LANGUAGE: console
CODE:
$ grep -r max_length /path/to/django/docs/

----------------------------------------

TITLE: Installing Hypercorn via pip
DESCRIPTION: Command to install Hypercorn package using pip package manager.

LANGUAGE: shell
CODE:
python -m pip install hypercorn

----------------------------------------

TITLE: Installing Django Contrib Package
DESCRIPTION: Example of how to add a contrib package to Django's INSTALLED_APPS setting. After adding the package, you need to run database migrations.

LANGUAGE: python
CODE:
'django.contrib.redirects'

----------------------------------------

TITLE: Running Django Application with Hypercorn
DESCRIPTION: Command to start a Django application using Hypercorn ASGI server. The server will listen on 127.0.0.1:8000 by default. Must be run from the same directory as manage.py to ensure proper Python path.

LANGUAGE: shell
CODE:
hypercorn myproject.asgi:application

----------------------------------------

TITLE: Abstract Base Class Example
DESCRIPTION: Example of creating an abstract base class for models.

LANGUAGE: python
CODE:
from django.db import models


class CommonInfo(models.Model):
    name = models.CharField(max_length=100)
    age = models.PositiveIntegerField()

    class Meta:
        abstract = True


class Student(CommonInfo):
    home_group = models.CharField(max_length=5)

----------------------------------------

TITLE: Abstract Base Class Example
DESCRIPTION: Example of creating an abstract base class for models.

LANGUAGE: python
CODE:
from django.db import models


class CommonInfo(models.Model):
    name = models.CharField(max_length=100)
    age = models.PositiveIntegerField()

    class Meta:
        abstract = True


class Student(CommonInfo):
    home_group = models.CharField(max_length=5)

----------------------------------------

TITLE: Django Template Base Layout
DESCRIPTION: Shows a base template layout with defined blocks that can be overridden by child templates.

LANGUAGE: html+django
CODE:
<!DOCTYPE html>
<html lang="en">
<head>
    <link rel="stylesheet" href="style.css">
    <title>{% block title %}My amazing site{% endblock %}</title>
</head>

<body>
    <div id="sidebar">
        {% block sidebar %}
        <ul>
            <li><a href="/">Home</a></li>
            <li><a href="/blog/">Blog</a></li>
        </ul>
        {% endblock %}
    </div>

    <div id="content">
        {% block content %}{% endblock %}
    </div>
</body>
</html>

----------------------------------------

TITLE: Building GDAL from Source
DESCRIPTION: Steps to download, configure, build, and install GDAL library from source using CMake.

LANGUAGE: shell
CODE:
$ wget https://download.osgeo.org/gdal/X.Y.Z/gdal-X.Y.Z.tar.gz
$ tar xzf gdal-X.Y.Z.tar.gz
$ cd gdal-X.Y.Z
$ mkdir build
$ cd build
$ cmake ..
$ cmake --build .
$ sudo cmake --build . --target install

----------------------------------------

TITLE: File Naming Pattern Examples
DESCRIPTION: Demonstrates the change in file naming patterns for duplicate uploads, from sequential numbering to random strings to prevent DoS attacks

LANGUAGE: plaintext
CODE:
"_x3a1gho"
"_1"
"_2"

----------------------------------------

TITLE: Defining Author Model in Django
DESCRIPTION: Example of defining an Author model in Django with a name field and get_absolute_url method.

LANGUAGE: python
CODE:
from django.db import models
from django.urls import reverse


class Author(models.Model):
    name = models.CharField(max_length=200)

    def get_absolute_url(self):
        return reverse("author-detail", kwargs={"pk": self.pk})

----------------------------------------

TITLE: MySQL Configuration for LayerMapping
DESCRIPTION: Example MySQL configuration to increase max_allowed_packet size to handle large spatial data imports.

LANGUAGE: ini
CODE:
max_allowed_packet = 10M

----------------------------------------

TITLE: Custom Admin Template HTML
DESCRIPTION: Example of customizing the admin site header using Django template language.

LANGUAGE: html
CODE:
{% block branding %}
<div id="site-name"><a href="{% url 'admin:index' %}">Polls Administration</a></div>
{% if user.is_anonymous %}
  {% include "admin/color_theme_toggle.html" %}
{% endif %}
{% endblock %}

----------------------------------------

TITLE: Implementing AbsoluteValue Transformer in Django
DESCRIPTION: Creates a transformer that applies SQL ABS() function to field values before comparison. Enables chaining with other lookups.

LANGUAGE: python
CODE:
from django.db.models import Transform

class AbsoluteValue(Transform):
    lookup_name = "abs"
    function = "ABS"

from django.db.models import IntegerField
IntegerField.register_lookup(AbsoluteValue)

----------------------------------------

TITLE: Accessing Widget Media Property
DESCRIPTION: Demonstrates how to retrieve the media property of a widget instance, which returns HTML for including the required assets.

LANGUAGE: python
CODE:
>>> w = CalendarWidget()
>>> print(w.media)
<link href="https://static.example.com/pretty.css" media="all" rel="stylesheet">
<script src="https://static.example.com/animations.js"></script>
<script src="https://static.example.com/actions.js"></script>

----------------------------------------

TITLE: Configuring Apache Basic Authentication with mod_wsgi
DESCRIPTION: Apache configuration for enabling basic authentication against Django's user database. Requires Apache 2.2+ and mod_wsgi 2.0+.

LANGUAGE: apache
CODE:
WSGIScriptAlias / /path/to/mysite.com/mysite/wsgi.py
WSGIPythonPath /path/to/mysite.com

WSGIProcessGroup %{GLOBAL}
WSGIApplicationGroup %{GLOBAL}

<Location "/secret">
    AuthType Basic
    AuthName "Top Secret"
    Require valid-user
    AuthBasicProvider wsgi
    WSGIAuthUserScript /path/to/mysite.com/mysite/wsgi.py
</Location>

----------------------------------------

TITLE: Http404 Exception Handling in Django
DESCRIPTION: Demonstrates proper usage of Django's Http404 exception for handling missing resources in database queries.

LANGUAGE: python
CODE:
from django.http import Http404
from django.shortcuts import render
from polls.models import Poll


def detail(request, poll_id):
    try:
        p = Poll.objects.get(pk=poll_id)
    except Poll.DoesNotExist:
        raise Http404("Poll does not exist")
    return render(request, "polls/detail.html", {"poll": p})

----------------------------------------

TITLE: Using create() Method with Django RelatedManager
DESCRIPTION: This snippet shows how to use the create() method to create a new Entry object and associate it with a Blog object in a single operation.

LANGUAGE: pycon
CODE:
>>> b = Blog.objects.get(id=1)
>>> e = b.entry_set.create(
...     headline="Hello", body_text="Hi", pub_date=datetime.date(2005, 1, 1)
... )

# No need to call e.save() at this point -- it's already been saved.

----------------------------------------

TITLE: Checking Homebrew Install Path
DESCRIPTION: Shell command to determine Homebrew installation path for configuring SPATIALITE_LIBRARY_PATH.

LANGUAGE: shell
CODE:
brew --prefix

----------------------------------------

TITLE: Django Security Function Reference
DESCRIPTION: Reference to key Django security functions and views affected by the security updates, including authentication views and URL validation functions.

LANGUAGE: python
CODE:
django.contrib.auth.views.login()
django.utils.http.is_safe_url()

----------------------------------------

TITLE: Migrating from models.permalink Decorator to reverse Function
DESCRIPTION: Example of updating a model method from using the deprecated models.permalink decorator to using the reverse function directly.

LANGUAGE: python
CODE:
# Old code
from django.db import models

class MyModel(models.Model):
    ...

    @models.permalink
    def url(self):
        return ("guitarist_detail", [self.slug])

# New code
from django.db import models
from django.urls import reverse

class MyModel(models.Model):
    ...

    def url(self):
        return reverse("guitarist_detail", args=[self.slug])

----------------------------------------

TITLE: Importing Django PostgreSQL Module
DESCRIPTION: Module import declaration for PostgreSQL-specific functionality in Django applications.

LANGUAGE: python
CODE:
django.contrib.postgres

----------------------------------------

TITLE: Updating the Question Model's was_published_recently() Method in Django
DESCRIPTION: This code snippet shows the corrected implementation of the was_published_recently() method in the Question model. It ensures that the method only returns True for questions published within the last day and not in the future.

LANGUAGE: Python
CODE:
def was_published_recently(self):
    now = timezone.now()
    return now - datetime.timedelta(days=1) <= self.pub_date <= now

----------------------------------------

TITLE: Decorating Class-Based Views in Django
DESCRIPTION: Using method_decorator to apply function decorators to class-based views

LANGUAGE: Python
CODE:
from django.utils.decorators import method_decorator

@method_decorator(login_required, name='dispatch')
class MyView(View):
    pass

----------------------------------------

TITLE: uWSGI Configuration File for Django
DESCRIPTION: An example INI configuration file for uWSGI with Django-specific settings.

LANGUAGE: ini
CODE:
[uwsgi]
chdir=/path/to/your/project
module=mysite.wsgi:application
master=True
pidfile=/tmp/project-master.pid
vacuum=True
max-requests=5000
daemonize=/var/log/uwsgi/yourproject.log

----------------------------------------

TITLE: Async View Implementation in Django
DESCRIPTION: Example of implementing an asynchronous view using Python's async/await syntax with Django's async support.

LANGUAGE: python
CODE:
import datetime
from django.http import HttpResponse


async def current_datetime(request):
    now = datetime.datetime.now()
    html = '<html lang="en"><body>It is now %s.</body></html>' % now
    return HttpResponse(html)

----------------------------------------

TITLE: Creating Table of Contents in reStructuredText for Django Meta-Documentation
DESCRIPTION: This snippet defines a table of contents using reStructuredText syntax. It sets the maximum depth to 2 and includes links to api-stability, design-philosophies, and distributions documents.

LANGUAGE: reStructuredText
CODE:
.. toctree::
   :maxdepth: 2

   api-stability
   design-philosophies
   distributions

----------------------------------------

TITLE: Installing ReportLab with pip
DESCRIPTION: Command to install the ReportLab library using pip package manager.

LANGUAGE: shell
CODE:
$ python -m pip install reportlab

----------------------------------------

TITLE: Django Documentation Structure in reStructuredText
DESCRIPTION: RST format documentation describing Django's project organization including roles, responsibilities, and governance structure.

LANGUAGE: restructuredtext
CODE:
==================================
Organization of the Django Project
==================================

Principles
==========

The Django Project is managed by a team of volunteers pursuing three goals:

- Driving the development of the Django web framework,
- Fostering the ecosystem of Django-related software,
- Leading the Django community in accordance with the values described in the
  `Django Code of Conduct`_.

----------------------------------------

TITLE: Fixing Subquery Annotation with Date Fields (Python/Django)
DESCRIPTION: Resolves a regression in Django 3.0 that caused crashes when subtracting DateField, DateTimeField, or TimeField from a Subquery() annotation.

LANGUAGE: Python
CODE:
from django.db.models import Subquery, DateField, DateTimeField, TimeField

----------------------------------------

TITLE: Defining DayMixin in Django
DESCRIPTION: DayMixin is a class that provides functionality for retrieving and parsing the day component of a date. It includes methods for getting the day format, retrieving the day, and navigating to next and previous days.

LANGUAGE: python
CODE:
class DayMixin:
    day_format = '%d'
    day = None

    def get_day_format(self):
        return self.day_format

    def get_day(self):
        # Implementation details omitted
        pass

    def get_next_day(self, date):
        # Implementation details omitted
        pass

    def get_previous_day(self, date):
        # Implementation details omitted
        pass

----------------------------------------

TITLE: Django Project Directory Structure
DESCRIPTION: The file structure created by Django's startproject command showing key configuration files.

LANGUAGE: text
CODE:
djangotutorial/
    manage.py
    mysite/
        __init__.py
        settings.py
        urls.py
        asgi.py
        wsgi.py

----------------------------------------

TITLE: Incorrect Decorator Chaining Example
DESCRIPTION: Example demonstrating incorrect usage of chaining etag and last_modified decorators, which should be avoided.

LANGUAGE: python
CODE:
# Bad code. Don't do this!
@etag(etag_func)
@last_modified(last_modified_func)
def my_view(request): ...


# End of bad code.

----------------------------------------

TITLE: Insecure Raw SQL Query in Django
DESCRIPTION: This code snippet demonstrates an insecure way of using raw SQL in Django, where user input is not properly sanitized before being used in a query.

LANGUAGE: python
CODE:
from django.shortcuts import HttpResponse
from .models import MyModel


def my_proof_of_concept(request):
    query = request.GET.get("query", "")
    q = MyModel.objects.extra(select={"id": query})
    return HttpResponse(q.values())

----------------------------------------

TITLE: Acquiring CSRF Token from DOM (HTML and JavaScript)
DESCRIPTION: Method to include and retrieve the CSRF token from the DOM when CSRF_USE_SESSIONS or CSRF_COOKIE_HTTPONLY is True.

LANGUAGE: html
CODE:
{% csrf_token %}
<script>
const csrftoken = document.querySelector('[name=csrfmiddlewaretoken]').value;
</script>

----------------------------------------

TITLE: Handling Permission Denied Errors in Django Views
DESCRIPTION: This code snippet shows how to raise a PermissionDenied exception in a Django view to trigger the 403 Forbidden error handling. It checks if the user is staff and raises the exception if not, demonstrating access control in views.

LANGUAGE: Python
CODE:
from django.core.exceptions import PermissionDenied


def edit(request, pk):
    if not request.user.is_staff:
        raise PermissionDenied
    # ...

----------------------------------------

TITLE: Installing Django test dependencies with pip
DESCRIPTION: Command to install the required Python packages for running Django tests using a requirements file.

LANGUAGE: Shell
CODE:
$ python -m pip install -r tests/requirements/py3.txt

----------------------------------------

TITLE: QUnit Test Module Implementation in JavaScript
DESCRIPTION: Example of writing QUnit tests for Django JavaScript functionality, demonstrating test module setup with beforeEach hooks and individual test cases for button click handlers.

LANGUAGE: javascript
CODE:
QUnit.module('magicTricks', {
    beforeEach: function() {
        const $ = django.jQuery;
        $('#qunit-fixture').append('<button class=\"button\"></button>');
    }
});

QUnit.test('removeOnClick removes button on click', function(assert) {
    const $ = django.jQuery;
    removeOnClick('.button');
    assert.equal($('.button').length, 1);
    $('.button').click();
    assert.equal($('.button').length, 0);
});

QUnit.test('copyOnClick adds button on click', function(assert) {
    const $ = django.jQuery;
    copyOnClick('.button');
    assert.equal($('.button').length, 1);
    $('.button').click();
    assert.equal($('.button').length, 2);
});

----------------------------------------

TITLE: Boolean Array Field Implementation
DESCRIPTION: Fixed implementation of SplitArrayField when used with ArrayField(BooleanField()) to correctly preserve boolean values after the first True value.

LANGUAGE: python
CODE:
from django.contrib.postgres.forms import SplitArrayField
from django.db.models import ArrayField, BooleanField

----------------------------------------

TITLE: Defining BaseDateListView in Django
DESCRIPTION: BaseDateListView is a base class that provides common behavior for all date-based views. It includes methods for retrieving dated items, querysets, and date lists.

LANGUAGE: python
CODE:
class BaseDateListView(DateMixin, MultipleObjectMixin):
    allow_empty = False
    date_list_period = 'year'

    def get_dated_items(self):
        # Implementation details omitted
        pass

    def get_dated_queryset(self, **lookup):
        # Implementation details omitted
        pass

    def get_date_list_period(self):
        return self.date_list_period

    def get_date_list(self, queryset, date_type=None, ordering='ASC'):
        # Implementation details omitted
        pass

----------------------------------------

TITLE: Verifying Django Installation in Python Shell
DESCRIPTION: This snippet shows how to verify Django installation by importing Django in the Python shell and printing its version. It demonstrates the expected output format for the Django version.

LANGUAGE: python
CODE:
>>> import django
>>> print(django.get_version())
|version|

----------------------------------------

TITLE: Using Django Condition Decorator with Views
DESCRIPTION: Example of applying the condition decorator to a view function using the last_modified_func parameter.

LANGUAGE: python
CODE:
from django.views.decorators.http import condition


@condition(last_modified_func=latest_entry)
def front_page(request, blog_id): ...

----------------------------------------

TITLE: Merging a Pull Request in Django Git Repository
DESCRIPTION: This console command sequence demonstrates the process of merging a pull request into the main branch of Django, including rebasing, fast-forward merging, and branch cleanup.

LANGUAGE: console
CODE:
$ # Pull in the latest changes from main.
$ git checkout main
$ git pull upstream main
$ # Rebase the pull request on main.
$ git checkout pr/####
$ git rebase main
$ git checkout main
$ # Merge the work as "fast-forward" to main to avoid a merge commit.
$ # (in practice, you can omit "--ff-only" since you just rebased)
$ git merge --ff-only pr/XXXX
$ # If you're not sure if you did things correctly, check that only the
$ # changes you expect will be pushed to upstream.
$ git push --dry-run upstream main
$ # Push!
$ git push upstream main
$ # Delete the pull request branch.
$ git branch -d pr/xxxx

----------------------------------------

TITLE: Configuring URLs for Generic Views in Django
DESCRIPTION: URL configuration using Django's path() routing with generic class-based views for index, detail, and results pages.

LANGUAGE: python
CODE:
from django.urls import path

from . import views

app_name = "polls"
urlpatterns = [
    path("", views.IndexView.as_view(), name="index"),
    path("<int:pk>/", views.DetailView.as_view(), name="detail"),
    path("<int:pk>/results/", views.ResultsView.as_view(), name="results"),
    path("<int:question_id>/vote/", views.vote, name="vote"),
]

----------------------------------------

TITLE: HTML Escaping in Django
DESCRIPTION: Functions for safely escaping HTML content in Django

LANGUAGE: Python
CODE:
from django.utils.html import escape, format_html

safe_html = escape("<script>alert('XSS');</script>")
formatted_html = format_html("<p>{}</p>", some_text)

----------------------------------------

TITLE: Implementing Post-Render Callback for TemplateResponse in Python
DESCRIPTION: Defines a post-render callback function and registers it with a TemplateResponse object to perform content-sensitive processing after rendering.

LANGUAGE: python
CODE:
from django.template.response import TemplateResponse


def my_render_callback(response):
    # Do content-sensitive processing
    do_post_processing()


def my_view(request):
    # Create a response
    response = TemplateResponse(request, "mytemplate.html", {})
    # Register the callback
    response.add_post_render_callback(my_render_callback)
    # Return the response
    return response

----------------------------------------

TITLE: Running Django tests with custom settings
DESCRIPTION: Example of running Django tests using a custom settings module and specifying test modules to run.

LANGUAGE: Shell
CODE:
$ ./runtests.py --settings=path.to.settings generic_relations i18n

----------------------------------------

TITLE: Django Model Definition Style
DESCRIPTION: Example of proper model class structure including field naming, Meta class placement, and method ordering.

LANGUAGE: python
CODE:
class Person(models.Model):
    first_name = models.CharField(max_length=20)
    last_name = models.CharField(max_length=40)

    class Meta:
        verbose_name_plural = "people"

----------------------------------------

TITLE: Test Client Redirect Assertion
DESCRIPTION: Added support for relative path redirects in test client and SimpleTestCase.assertRedirects() method.

LANGUAGE: Python
CODE:
SimpleTestCase.assertRedirects()

----------------------------------------

TITLE: Configuring WeekArchiveView URL in Django
DESCRIPTION: Example of setting up a URL pattern for a custom WeekArchiveView.

LANGUAGE: python
CODE:
from django.urls import path

from myapp.views import ArticleWeekArchiveView

urlpatterns = [
    # Example: /2012/week/23/
    path(
        "<int:year>/week/<int:week>/",
        ArticleWeekArchiveView.as_view(),
        name="archive_week",
    ),
]

----------------------------------------

TITLE: Updating Django Translations Catalogs Post-Release
DESCRIPTION: Update translation catalogs after a pre-release by creating a new branch and running makemessages.

LANGUAGE: shell
CODE:
git checkout stable/A.B.x
git checkout -b update-translations-catalog-A.B.x

LANGUAGE: shell
CODE:
$ cd django
$ django-admin makemessages -l en --domain=djangojs --domain=django
processing locale en

----------------------------------------

TITLE: Publisher Detail Template with Pagination
DESCRIPTION: Template example showing how to display paginated book listings for a publisher using Django template language.

LANGUAGE: html
CODE:
{% extends "base.html" %}

{% block content %}
    <h2>Publisher {{ publisher.name }}</h2>

    <ol>
      {% for book in page_obj %}
        <li>{{ book.title }}</li>
      {% endfor %}
    </ol>

    <div class="pagination">
        <span class="step-links">
            {% if page_obj.has_previous %}
                <a href="?page={{ page_obj.previous_page_number }}">previous</a>
            {% endif %}

            <span class="current">
                Page {{ page_obj.number }} of {{ paginator.num_pages }}.
            </span>

            {% if page_obj.has_next %}
                <a href="?page={{ page_obj.next_page_number }}">next</a>
            {% endif %}
        </span>
    </div>
{% endblock %}

----------------------------------------

TITLE: Configuring Django Locale Formats
DESCRIPTION: Review and modify locale-specific formatting for dates, times, and numbers in conf/locale/<locale>/formats.py file

LANGUAGE: python
CODE:
conf/locale/<locale>/formats.py

----------------------------------------

TITLE: Implementing URL Namespacing in Django
DESCRIPTION: This Python code shows how to add namespace to URL configurations in Django, which helps in organizing and referencing URLs in larger projects with multiple apps.

LANGUAGE: python
CODE:
from django.urls import path

from . import views

app_name = "polls"
urlpatterns = [
    path("", views.index, name="index"),
    path("<int:question_id>/", views.detail, name="detail"),
    path("<int:question_id>/results/", views.results, name="results"),
    path("<int:question_id>/vote/", views.vote, name="vote"),
]

----------------------------------------

TITLE: URL Resolution with Error Handling
DESCRIPTION: Example of using resolve() to test URL validity before redirection with error handling.

LANGUAGE: python
CODE:
from urllib.parse import urlsplit
from django.urls import resolve
from django.http import Http404, HttpResponseRedirect

def myview(request):
    next = request.META.get("HTTP_REFERER", None) or "/"
    response = HttpResponseRedirect(next)

    view, args, kwargs = resolve(urlsplit(next).path)
    kwargs["request"] = request
    try:
        view(*args, **kwargs)
    except Http404:
        return HttpResponseRedirect("/")
    return response

----------------------------------------

TITLE: Defining an Abstract Car Model with Lazy ForeignKey in Django
DESCRIPTION: Shows how to create an abstract model with a ForeignKey relationship that will be resolved when the model is subclassed as a concrete model.

LANGUAGE: python
CODE:
from django.db import models

class AbstractCar(models.Model):
    manufacturer = models.ForeignKey("Manufacturer", on_delete=models.CASCADE)

    class Meta:
        abstract = True

----------------------------------------

TITLE: Running Selenium tests with Django
DESCRIPTION: Command to run Selenium tests for Django, specifying browsers and enabling headless mode.

LANGUAGE: Shell
CODE:
$ ./runtests.py --selenium=firefox,chrome --headless

----------------------------------------

TITLE: Running Django Regression Tests
DESCRIPTION: Commands for running specific regression tests in Django and using git bisect to identify the commit that introduced a regression

LANGUAGE: shell
CODE:
$ ./runtests.py migrations.test_regression

LANGUAGE: shell
CODE:
$ git bisect bad
You need to start by "git bisect start"
Do you want me to do it for you [Y/n]? y

LANGUAGE: shell
CODE:
$ git bisect good
Bisecting: X revisions left to test after this (roughly Y steps)
...

LANGUAGE: shell
CODE:
$ git bisect run tests/runtests.py migrations.test_regression

----------------------------------------

TITLE: Django Query Operations
DESCRIPTION: Fix for QuerySet operations involving values(), values_list(), union(), intersection(), and difference() methods when ordering by unannotated fields.

LANGUAGE: python
CODE:
QuerySet.values()/values_list(), QuerySet.union(), intersection(), difference()

----------------------------------------

TITLE: Development Server Static Files URL Configuration
DESCRIPTION: URL pattern configuration for serving static files during development using the staticfiles view.

LANGUAGE: Python
CODE:
from django.conf import settings
from django.contrib.staticfiles import views
from django.urls import re_path

if settings.DEBUG:
    urlpatterns += [
        re_path(r"^static/(?P<path>.*)$", views.serve),
    ]

----------------------------------------

TITLE: Publishing Work to GitHub
DESCRIPTION: Commands for pushing local changes to GitHub repository.

LANGUAGE: shell
CODE:
git push origin ticket_xxxxx
git push -f origin ticket_xxxxx

----------------------------------------

TITLE: Publisher List Template
DESCRIPTION: Django template for displaying the list of publishers using the generic ListView context.

LANGUAGE: html+django
CODE:
{% extends "base.html" %}

{% block content %}
    <h2>Publishers</h2>
    <ul>
        {% for publisher in object_list %}
            <li>{{ publisher.name }}</li>
        {% endfor %}
    </ul>
{% endblock %}

----------------------------------------

TITLE: Updating Django Translations for Release
DESCRIPTION: Fetch and update Django translations from Transifex before a feature release.

LANGUAGE: shell
CODE:
$ python scripts/manage_translations.py fetch

LANGUAGE: shell
CODE:
$ git diff --name-only stable/5.0.x | grep "\.po"  | xargs sed -ri "s/PO-Revision-Date: [0-9\-]+ /PO-Revision-Date: $(date -I) /g"

----------------------------------------

TITLE: Custom Model Method
DESCRIPTION: Adding a custom method to Question model to check if the question was published recently, using timezone utilities.

LANGUAGE: python
CODE:
import datetime
from django.db import models
from django.utils import timezone

class Question(models.Model):
    def was_published_recently(self):
        return self.pub_date >= timezone.now() - datetime.timedelta(days=1)

----------------------------------------

TITLE: Configuring Answer-Question Ordering Relationship
DESCRIPTION: Example demonstrating how to set up ordered relationships between Answer and Question models using order_with_respect_to

LANGUAGE: python
CODE:
from django.db import models

class Question(models.Model):
    text = models.TextField()
    # ...

class Answer(models.Model):
    question = models.ForeignKey(Question, on_delete=models.CASCADE)
    # ...

    class Meta:
        order_with_respect_to = "question"

----------------------------------------

TITLE: Dynamically Assigning Django Settings in Python
DESCRIPTION: Example of using Python list comprehension to dynamically create a setting value. Creates a list of strings from a range of numbers.

LANGUAGE: python
CODE:
MY_SETTING = [str(i) for i in range(30)]

----------------------------------------

TITLE: Uploading Django Release to PyPI
DESCRIPTION: Upload Django release packages to PyPI using twine.

LANGUAGE: shell
CODE:
$ twine upload --repository django dist/*

----------------------------------------

TITLE: Merging Security Patches for Django Release
DESCRIPTION: Merge security patches from the django-security repository for a security release.

LANGUAGE: shell
CODE:
$ git checkout stable/4.1.x
$ git merge --ff-only security/4.1.x

----------------------------------------

TITLE: Updating URL patterns in Django 1.8
DESCRIPTION: Example of updating URL patterns to use the new recommended syntax without patterns() function.

LANGUAGE: Python
CODE:
from django.conf.urls import url
from myapp import views

urlpatterns = [
    url("^$", views.myview),
    url("^other/$", views.otherview),
]

----------------------------------------

TITLE: Tagging a Django Release
DESCRIPTION: Create a signed Git tag for a new Django release.

LANGUAGE: shell
CODE:
$ git tag --sign --message="Tag 4.1.1" 4.1.1

----------------------------------------

TITLE: Django Template Style Example
DESCRIPTION: Shows correct template formatting including proper spacing for tags and variables, and block structure.

LANGUAGE: html+django
CODE:
{% extends "base.html" %}

{% block content %}
  <h1 class="font-semibold text-xl">
    {{ pages.title }}
  </h1>
{% endblock content %}

----------------------------------------

TITLE: Defining an Author Model with get_absolute_url Method
DESCRIPTION: This snippet shows how to define an Author model with a name field and a get_absolute_url method. The get_absolute_url method is used by CreateView and UpdateView to determine where to redirect after successful form submission.

LANGUAGE: python
CODE:
from django.db import models
from django.urls import reverse


class Author(models.Model):
    name = models.CharField(max_length=200)

    def get_absolute_url(self):
        return reverse("author-detail", kwargs={"pk": self.pk})

----------------------------------------

TITLE: Installing Latest Django Version Using pip
DESCRIPTION: This command demonstrates how to upgrade Django to the latest version using pip with the --upgrade or -U flag.

LANGUAGE: bash
CODE:
$ python -m pip install -U Django

----------------------------------------

TITLE: Django Import Style Example
DESCRIPTION: Demonstrates proper import ordering and grouping in Django projects, including future imports, standard library, third-party, Django, and local imports.

LANGUAGE: python
CODE:
# future
from __future__ import unicode_literals

# standard library
import json
from itertools import chain

# third-party
import bcrypt

# Django
from django.http import Http404
from django.http.response import (
    Http404,
    HttpResponse,
    HttpResponseNotAllowed,
    StreamingHttpResponse,
    cookie,
)

# local Django
from .models import LogEntry

# try/except
try:
    import yaml
except ImportError:
    yaml = None

CONSTANT = "foo"


class Example: ...

----------------------------------------

TITLE: Accessing Single Primary Key Field in Django Models
DESCRIPTION: Shows how to access the primary key field of a Django model with a single primary key using the pk_fields attribute of the _meta API.

LANGUAGE: pycon
CODE:
>>> User._meta.pk_fields
[<django.db.models.fields.AutoField: id>]

----------------------------------------

TITLE: Setting DJANGO_SETTINGS_MODULE in Unix Bash Shell
DESCRIPTION: Commands to set the DJANGO_SETTINGS_MODULE environment variable and run the Django development server in a Unix Bash shell.

LANGUAGE: shell
CODE:
export DJANGO_SETTINGS_MODULE=mysite.settings
django-admin runserver

----------------------------------------

TITLE: Configuring Django App Module
DESCRIPTION: Updates the AppConfig class to use the new module name and label for the reusable polls application.

LANGUAGE: python
CODE:
from django.apps import AppConfig


class PollsConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "django_polls"
    label = "polls"

----------------------------------------

TITLE: Building Django Release Artifacts
DESCRIPTION: Generate release packages (tarball and wheel) for a Django release.

LANGUAGE: shell
CODE:
$ python -m build

----------------------------------------

TITLE: Configuring Transifex Access for Django Release
DESCRIPTION: Set up the .transifexrc file with an API token for managing Django translations on Transifex.

LANGUAGE: ini
CODE:
[https://www.transifex.com]
  rest_hostname = https://rest.api.transifex.com
  token = # API token

----------------------------------------

TITLE: Implementing Responsive Logging in Django
DESCRIPTION: Shows how to configure logging to respond to environment variables, allowing for different log levels in development and production.

LANGUAGE: python
CODE:
"level": os.getenv("DJANGO_LOG_LEVEL", "WARNING")

----------------------------------------

TITLE: Security Fix: Regular Expression DoS in Truncator.words()
DESCRIPTION: Patch for CVE-2024-27351 addressing potential regular expression denial-of-service vulnerability in django.utils.text.Truncator.words() method when used with html=True and the truncatewords_html template filter.

LANGUAGE: python
CODE:
django.utils.text.Truncator.words()

----------------------------------------

TITLE: Starting uWSGI Server for Django
DESCRIPTION: A shell command to start a uWSGI server with various configuration options for a Django project.

LANGUAGE: shell
CODE:
uwsgi --chdir=/path/to/your/project \
    --module=mysite.wsgi:application \
    --env DJANGO_SETTINGS_MODULE=mysite.settings \
    --master --pidfile=/tmp/project-master.pid \
    --socket=127.0.0.1:49152 \
    --processes=5 \
    --uid=1000 --gid=2000 \
    --harakiri=20 \
    --max-requests=5000 \
    --vacuum \
    --home=/path/to/virtual/env \
    --daemonize=/var/log/uwsgi/yourproject.log

----------------------------------------

TITLE: Working with Pull Request Patches
DESCRIPTION: Commands for reviewing and testing pull requests locally.

LANGUAGE: shell
CODE:
git checkout -b pull_xxxxx upstream/main
curl -L https://github.com/django/django/pull/xxxxx.patch | git am

----------------------------------------

TITLE: Defining Custom Manager in Django Model
DESCRIPTION: Example showing how to define a custom manager named 'people' in a Django Person model. When a custom manager is defined, Django's default 'objects' manager is not automatically added.

LANGUAGE: python
CODE:
from django.db import models


class Person(models.Model):
    # Add manager with another name
    people = models.Manager()

----------------------------------------

TITLE: Configuring Django Template Engines
DESCRIPTION: Shows an example configuration for Django template engines using the TEMPLATES setting in settings.py.

LANGUAGE: python
CODE:
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            # ... some options here ...
        },
    },
]

----------------------------------------

TITLE: Package README Documentation
DESCRIPTION: RST formatted README file describing the django-polls package, its features, and installation instructions.

LANGUAGE: rst
CODE:
============
django-polls
============

django-polls is a Django app to conduct web-based polls. For each
question, visitors can choose between a fixed number of answers.

Detailed documentation is in the "docs" directory.

Quick start
-----------

1. Add "polls" to your INSTALLED_APPS setting like this::

    INSTALLED_APPS = [
        ...,
        "django_polls",
    ]

2. Include the polls URLconf in your project urls.py like this::

    path("polls/", include("django_polls.urls")),

3. Run ``python manage.py migrate`` to create the models.

4. Start the development server and visit the admin to create a poll.

5. Visit the ``/polls/`` URL to participate in the poll.

----------------------------------------

TITLE: Installing Required Python Packages for Django Release
DESCRIPTION: Install the necessary Python packages in a clean virtual environment for releasing Django.

LANGUAGE: shell
CODE:
$ python -m pip install build twine

----------------------------------------

TITLE: Django Module Declaration in RestructuredText
DESCRIPTION: RestructuredText directive declaring the django.core.files module with a synopsis for file handling and storage functionality.

LANGUAGE: restructuredtext
CODE:
.. module:: django.core.files
   :synopsis: File handling and storage

----------------------------------------

TITLE: Configuring PyPI Access for Django Release
DESCRIPTION: Set up the .pypirc file with project-scoped tokens for uploading Django releases to PyPI.

LANGUAGE: ini
CODE:
[distutils]
  index-servers =
    pypi
    django

[pypi]
  username = __token__
  password = # User-scoped or project-scoped token, to set as the default.

[django]
  repository = https://upload.pypi.org/legacy/
  username = __token__
  password = # A project token.

----------------------------------------

TITLE: Creating JSON Fixture for Django Person Model
DESCRIPTION: Example of a JSON fixture format for initializing a Person model with two records. Shows the structure for defining model name, primary key, and field values in Django's JSON fixture format.

LANGUAGE: json
CODE:
[
  {
    "model": "myapp.person",
    "pk": 1,
    "fields": {
      "first_name": "John",
      "last_name": "Lennon"
    }
  },
  {
    "model": "myapp.person",
    "pk": 2,
    "fields": {
      "first_name": "Paul",
      "last_name": "McCartney"
    }
  }
]

----------------------------------------

TITLE: Correcting HTML Escaping in Django Auto-generated Forms
DESCRIPTION: Fixes a regression where help_text was incorrectly HTML-escaped in automatically-generated forms.



----------------------------------------

TITLE: Basic Apache mod_wsgi Configuration
DESCRIPTION: Basic Apache configuration for serving Django applications using mod_wsgi. Configures URL routing, Python environment, and directory permissions.

LANGUAGE: apache
CODE:
WSGIScriptAlias / /path/to/mysite.com/mysite/wsgi.py
WSGIPythonHome /path/to/venv
WSGIPythonPath /path/to/mysite.com

<Directory /path/to/mysite.com/mysite>
<Files wsgi.py>
Require all granted
</Files>
</Directory>

----------------------------------------

TITLE: Creating a New Stable Branch for Django Release
DESCRIPTION: Create a new stable branch from the main branch when feature freezing a new Django version.

LANGUAGE: shell
CODE:
$ git checkout -b stable/5.2.x upstream/main
$ git push upstream -u stable/5.2.x:stable/5.2.x

----------------------------------------

TITLE: Defining a Person Model in Django
DESCRIPTION: Example of defining a Person model with first_name, last_name, and birth_date fields in Django.

LANGUAGE: python
CODE:
class Person(models.Model):
    first_name = models.CharField(...)
    last_name = models.CharField(...)
    birth_date = models.DateField(...)

----------------------------------------

TITLE: Configuring Poll App URLs
DESCRIPTION: URL configuration for the polls application defining the routing for the index view.

LANGUAGE: python
CODE:
from django.urls import path

from . import views

urlpatterns = [
    path("", views.index, name="index"),
]

----------------------------------------

TITLE: Django Settings Configuration
DESCRIPTION: Configuration of installed apps in Django settings file to include the polls application alongside default Django apps.

LANGUAGE: python
CODE:
INSTALLED_APPS = [
    "polls.apps.PollsConfig",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

----------------------------------------

TITLE: Basic URL Pattern Definition in Django
DESCRIPTION: Example of defining a URL pattern with a view function and name in Django's URLconf.

LANGUAGE: python
CODE:
from news import views

path("archive/", views.archive, name="news-archive")

----------------------------------------

TITLE: Version Number Format Examples in Python
DESCRIPTION: Demonstrates Django's version numbering format using A.B or A.B.C pattern, where A.B represents feature releases and C represents patch releases.

LANGUAGE: python
CODE:
"A.B"      # Feature release
"A.B.C"    # Patch release
"A.B alpha/beta/rc N"  # Pre-release versions

----------------------------------------

TITLE: Building HTML Documentation for Django (Windows)
DESCRIPTION: Command to build the HTML version of Django's documentation on Windows systems, to be run in the docs/ directory.

LANGUAGE: bash
CODE:
make.bat html

----------------------------------------

TITLE: Using Paginator with JSONField in Django 2.2.1
DESCRIPTION: Fixed a regression where Paginator crashes if object_list is a queryset ordered or aggregated over a nested JSONField key transform.

LANGUAGE: python
CODE:
from django.core.paginator import Paginator

queryset = Model.objects.order_by('json_field__nested_key')
paginator = Paginator(queryset, 10)

----------------------------------------

TITLE: Installing Daphne with pip
DESCRIPTION: Command to install Daphne using pip package manager. This step is necessary before using Daphne with Django.

LANGUAGE: shell
CODE:
python -m pip install daphne

----------------------------------------

TITLE: Generating Checksums for Django Release Packages
DESCRIPTION: Create MD5, SHA1, and SHA256 checksums for Django release packages.

LANGUAGE: shell
CODE:
$ cd dist
$ md5sum *
$ sha1sum *
$ sha256sum *

----------------------------------------

TITLE: Initializing KeysValidator in Django
DESCRIPTION: KeysValidator checks if given keys are present in a dictionary. It can be set to strict mode to ensure no extra keys are present. Custom error messages can be provided for missing or extra keys.

LANGUAGE: python
CODE:
KeysValidator(keys, strict=False, messages=None)

----------------------------------------

TITLE: Fetching Results as Dictionaries in Django Raw SQL Queries
DESCRIPTION: Defines a helper function to return all rows from a cursor as a list of dictionaries, useful for custom SQL queries in Django.

LANGUAGE: python
CODE:
def dictfetchall(cursor):
    """
    Return all rows from a cursor as a dict.
    Assume the column names are unique.
    """
    columns = [col[0] for col in cursor.description]
    return [dict(zip(columns, row)) for row in cursor.fetchall()]

----------------------------------------

TITLE: Creating a Django Template for Question Details
DESCRIPTION: This HTML template displays the details of a specific question, including its choices. It demonstrates how to access object attributes and iterate over related objects in Django templates.

LANGUAGE: html
CODE:
<h1>{{ question.question_text }}</h1>
<ul>
{% for choice in question.choice_set.all %}
    <li>{{ choice.choice_text }}</li>
{% endfor %}
</ul>

----------------------------------------

TITLE: Creating a Company with Uppercase Ticker in Django
DESCRIPTION: Shows how to use the Upper() function in combination with Value() when creating a model instance.

LANGUAGE: pycon
CODE:
>>> company = Company.objects.create(name="Google", ticker=Upper(Value("goog")))
>>> company.refresh_from_db()
>>> company.ticker
'GOOG'

----------------------------------------

TITLE: Running Tests with Coverage
DESCRIPTION: Example of running Django tests with coverage ignore patterns.

LANGUAGE: console
CODE:
django-admin compilemessages --ignore=cache --ignore=outdated/*/locale

----------------------------------------

TITLE: Deprecation Warning Example in Python
DESCRIPTION: Shows how deprecated features raise warnings in Django, using RemovedInDjango51Warning as an example.

LANGUAGE: python
CODE:
python -Wd  # Command to enable display of deprecation warnings

----------------------------------------

TITLE: Generic IP Address Field Handling
DESCRIPTION: Restored functionality to convert empty strings to null when saving GenericIPAddressField values in SQLite and MySQL databases.

LANGUAGE: Python
CODE:
GenericIPAddressField()

----------------------------------------

TITLE: Applying ASGI Middleware in Django
DESCRIPTION: Demonstrates how to wrap Django's application object with ASGI middleware in the asgi.py file. This allows for adding additional functionality or embedding Django in another ASGI application.

LANGUAGE: Python
CODE:
from some_asgi_library import AmazingMiddleware

application = AmazingMiddleware(application)

----------------------------------------

TITLE: Checking Database Connection Alias in RunPython Operation
DESCRIPTION: This snippet demonstrates how to check the database connection's alias inside a RunPython operation to selectively run migrations on specific databases.

LANGUAGE: python
CODE:
from django.db import migrations


def forwards(apps, schema_editor):
    if schema_editor.connection.alias != "default":
        return
    # Your migration code goes here


class Migration(migrations.Migration):
    dependencies = [
        # Dependencies to other migrations
    ]

    operations = [
        migrations.RunPython(forwards),
    ]

----------------------------------------

TITLE: Accessing Last Page of Paginated Results in Django
DESCRIPTION: Special case usage of the 'page' parameter to access the final page of paginated results without knowing the total number of pages.

LANGUAGE: text
CODE:
/objects/?page=last

----------------------------------------

TITLE: Manually Selecting a Database for QuerySet Operations
DESCRIPTION: Examples of manually selecting a database for QuerySet operations using the using() method.

LANGUAGE: python
CODE:
# This will run on the 'default' database.
Author.objects.all()

# So will this.
Author.objects.using("default")

# This will run on the 'other' database.
Author.objects.using("other")

----------------------------------------

TITLE: Creating Tests for QuestionDetailView in Django
DESCRIPTION: This code snippet defines a test class for the QuestionDetailView. It includes tests for future questions and past questions.

LANGUAGE: Python
CODE:
class QuestionDetailViewTests(TestCase):
    def test_future_question(self):
        """
        The detail view of a question with a pub_date in the future
        returns a 404 not found.
        """
        future_question = create_question(question_text="Future question.", days=5)
        url = reverse("polls:detail", args=(future_question.id,))
        response = self.client.get(url)
        self.assertEqual(response.status_code, 404)

    def test_past_question(self):
        """
        The detail view of a question with a pub_date in the past
        displays the question's text.
        """
        past_question = create_question(question_text="Past Question.", days=-5)
        url = reverse("polls:detail", args=(past_question.id,))
        response = self.client.get(url)
        self.assertContains(response, past_question.question_text)

----------------------------------------

TITLE: Filtering Companies with Exists Subquery in Django
DESCRIPTION: Demonstrates how to use Exists() and OuterRef() to filter companies based on a subquery condition.

LANGUAGE: pycon
CODE:
>>> from django.db.models import Exists, OuterRef
>>> Company.objects.filter(
...     Exists(Employee.objects.filter(company=OuterRef("pk"), salary__gt=10))
... )

----------------------------------------

TITLE: Custom Current Time Tag Implementation
DESCRIPTION: Complete example of a custom template tag that formats the current time

LANGUAGE: python
CODE:
import datetime
from django import template

register = template.Library()

class CurrentTimeNode(template.Node):
    def __init__(self, format_string):
        self.format_string = format_string

    def render(self, context):
        return datetime.datetime.now().strftime(self.format_string)

----------------------------------------

TITLE: Setting Up Local Django Repository
DESCRIPTION: Commands for cloning a forked Django repository and setting up remote repositories.

LANGUAGE: shell
CODE:
git clone https://github.com/GitHub_nick/django.git
cd django
git remote add upstream https://github.com/django/django.git
git fetch upstream
git remote add akaariai https://github.com/akaariai/django.git

----------------------------------------

TITLE: Referencing Django's BasePasswordHasher.harden_runtime() Method
DESCRIPTION: This snippet mentions the new method introduced to mitigate the timing attack vulnerability (CVE-2016-2513) in Django's password hashing system.

LANGUAGE: Python
CODE:
"BasePasswordHasher.harden_runtime()"

----------------------------------------

TITLE: Looping Over Form Fields in a Template
DESCRIPTION: Shows how to iterate over form fields in a Django template to reduce repetitive code.

LANGUAGE: html
CODE:
{% for field in form %}
    <div class="fieldWrapper">
        {{ field.errors }}
        {{ field.label_tag }} {{ field }}
        {% if field.help_text %}
          <p class="help" id="{{ field.auto_id }}_helptext">
            {{ field.help_text|safe }}
          </p>
        {% endif %}
    </div>
{% endfor %}

----------------------------------------

TITLE: Resetting Query List in Django
DESCRIPTION: This code snippet demonstrates how to manually clear the query list in Django functions using the reset_queries() function. This can be useful for managing query logging and debugging.

LANGUAGE: python
CODE:
from django.db import reset_queries

reset_queries()

----------------------------------------

TITLE: Creating HTML Template for Author Form in Django
DESCRIPTION: Example of an HTML template for rendering an author form in Django, including CSRF token and form fields.

LANGUAGE: html
CODE:
<form method="post">{% csrf_token %}
    {{ form.as_p }}
    <input type="submit" value="Save">
</form>

----------------------------------------

TITLE: Setting Up and Running Django Test Suite (Bash)
DESCRIPTION: This snippet outlines the commands to create a virtual environment, install requirements, and execute the Django test suite. It assumes the user is in the project root directory and has Python installed.

LANGUAGE: bash
CODE:
$ cd tests
$ python -m pip install -e ..
$ python -m pip install -r requirements/py3.txt
$ ./runtests.py

----------------------------------------

TITLE: Adding Fieldsets to Admin Form
DESCRIPTION: Shows how to organize form fields into logical groups using fieldsets in the ModelAdmin class.

LANGUAGE: python
CODE:
from django.contrib import admin

from .models import Question


class QuestionAdmin(admin.ModelAdmin):
    fieldsets = [
        (None, {"fields": ["question_text"]}),
        ("Date information", {"fields": ["pub_date"]}),
    ]


admin.site.register(Question, QuestionAdmin)

----------------------------------------

TITLE: Conditional Update of Account Types
DESCRIPTION: Example of using Case() expression to update account types based on registration dates

LANGUAGE: python
CODE:
a_month_ago = date.today() - timedelta(days=30)
a_year_ago = date.today() - timedelta(days=365)

Client.objects.update(
    account_type=Case(
        When(registered_on__lte=a_year_ago, then=Value(Client.PLATINUM)),
        When(registered_on__lte=a_month_ago, then=Value(Client.GOLD)),
        default=Value(Client.REGULAR),
    ),
)

----------------------------------------

TITLE: Configuring Formatters in Django Logging
DESCRIPTION: Demonstrates how to define custom formatters for logging output in Django's settings.py file.

LANGUAGE: python
CODE:
LOGGING = {
    # ...
    "formatters": {
        "verbose": {
            "format": "{name} {levelname} {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
    },
}

----------------------------------------

TITLE: App Directory Template Configuration
DESCRIPTION: Template configuration showing APP_DIRS setting for app-level template overrides.

LANGUAGE: python
CODE:
TEMPLATES = [
    {
        # ...
        "APP_DIRS": True,
        # ...
    },
]

----------------------------------------

TITLE: Python Code Reference: Django Security and Bug Fixes
DESCRIPTION: Code elements referenced in Django 1.6.5 release notes including django.contrib.auth.views.login(), django.utils.http.is_safe_url(), and year_lookup_bounds_for_datetime_field method.

LANGUAGE: python
CODE:
django.contrib.auth.views.login()
django.utils.http.is_safe_url()
year_lookup_bounds_for_datetime_field
pgettext_lazy
select_related()

----------------------------------------

TITLE: Creating Additional Tests for Question Model in Django
DESCRIPTION: This code snippet adds two more test methods to the QuestionModelTests class. These tests check the behavior of was_published_recently() for old questions and recent questions.

LANGUAGE: Python
CODE:
def test_was_published_recently_with_old_question(self):
    """
    was_published_recently() returns False for questions whose pub_date
    is older than 1 day.
    """
    time = timezone.now() - datetime.timedelta(days=1, seconds=1)
    old_question = Question(pub_date=time)
    self.assertIs(old_question.was_published_recently(), False)


def test_was_published_recently_with_recent_question(self):
    """
    was_published_recently() returns True for questions whose pub_date
    is within the last day.
    """
    time = timezone.now() - datetime.timedelta(hours=23, minutes=59, seconds=59)
    recent_question = Question(pub_date=time)
    self.assertIs(recent_question.was_published_recently(), True)

----------------------------------------

TITLE: Defining Django Documentation Structure with reStructuredText
DESCRIPTION: This snippet defines the table of contents for Django documentation using reStructuredText directives. It includes hidden and visible sections, with a maximum depth of 3 for the main content.

LANGUAGE: reStructuredText
CODE:
.. toctree::
    :hidden:

    index

.. toctree::
    :maxdepth: 3

    intro/index
    topics/index
    howto/index
    faq/index
    ref/index
    misc/index
    glossary
    releases/index
    internals/index

----------------------------------------

TITLE: Custom BoundField HTML Rendering Example
DESCRIPTION: Demonstrates the HTML output generated by the custom BoundField implementation.

LANGUAGE: html
CODE:
<div class="custom">
  <label for="id_name">Your Name:</label>
  <input type="text" name="name" class="name-input-class" maxlength="100" id="id_name">
</div>

<div class="custom">
  <label for="id_email">Your Email:</label>
  <input type="email" name="email" maxlength="320" required="" id="id_email">
</div>

----------------------------------------

TITLE: Defining Project Name in Django Template
DESCRIPTION: This snippet demonstrates the use of Django template syntax to insert a project name variable. It's likely part of a larger configuration or setup file for a Django test project.

LANGUAGE: Django Template
CODE:
# some file for {{ project_name }} test project

----------------------------------------

TITLE: Customizing Application Configuration in Settings
DESCRIPTION: Demonstrates how to specify a custom AppConfig class in the INSTALLED_APPS setting.

LANGUAGE: python
CODE:
# anthology/settings.py

INSTALLED_APPS = [
    "anthology.apps.JazzManoucheConfig",
    # ...
]

----------------------------------------

TITLE: Customizing Login URL with login_required Decorator
DESCRIPTION: Example of using the login_required decorator to customize login URL and redirect field name for specific views.

LANGUAGE: python
CODE:
from django.contrib.auth.decorators import login_required
from django.utils.decorators import method_decorator
from django.views.generic import View

@login_required(login_url="/books/login/", redirect_field_name="redirect_to")
def book_dashboard(request): ...

@method_decorator(
    login_required(login_url="/books/login/", redirect_field_name="redirect_to"),
    name="dispatch",
)
class BookMetrics(View):
    pass

----------------------------------------

TITLE: Importing Dotted Paths in Django's reverse() Function
DESCRIPTION: The reverse() function in Django now only accepts and imports dotted paths based on the view-containing modules listed in the project's URL pattern configuration. This change prevents potential unexpected code execution.

LANGUAGE: Python
CODE:
reverse()

----------------------------------------

TITLE: Configuring Django Template Settings
DESCRIPTION: Basic Django settings configuration for template overriding, showing INSTALLED_APPS and TEMPLATES settings.

LANGUAGE: python
CODE:
from pathlib import Path

BASE_DIR = Path(__file__).resolve().parent.parent

INSTALLED_APPS = [
    ...,
    "blog",
    ...,
]

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        # ...
    },
]

----------------------------------------

TITLE: Conditionally adding get_query_set alias in custom manager
DESCRIPTION: Shows how to conditionally add a get_query_set alias to a custom manager's get_queryset method to support both old and new Django versions.

LANGUAGE: Python
CODE:
class CustomManager(models.Manager):
    def get_queryset(self):
        pass  # ...

    if django.VERSION < (1, 6):
        get_query_set = get_queryset

----------------------------------------

TITLE: Implementing a Query Blocker in Django
DESCRIPTION: This snippet demonstrates how to create and use a simple query blocker function in Django. It prevents database access in specific parts of the code, such as during template rendering.

LANGUAGE: python
CODE:
def blocker(*args):
    raise Exception("No database access allowed here.")

from django.db import connection
from django.shortcuts import render


def my_view(request):
    context = {...}  # Code to generate context with all data.
    template_name = ...
    with connection.execute_wrapper(blocker):
        return render(request, template_name, context)

----------------------------------------

TITLE: Configuring Git Alias for Pull Request Checkout in Django
DESCRIPTION: This Git alias allows easy checkout of pull requests by number. It fetches the pull request and creates a local branch.

LANGUAGE: ini
CODE:
[alias]
    pr = !sh -c \"git fetch upstream pull/${1}/head:pr/${1} && git checkout pr/${1}\"

----------------------------------------

TITLE: Rendering Comment Notification Template in Django
DESCRIPTION: Basic Django template markup for displaying comment notifications. Uses template variables to show the content object being commented on and the actual comment text.

LANGUAGE: django-template
CODE:
A comment has been posted on {{ content_object }}.
The comment reads as follows:
{{ comment }}

----------------------------------------

TITLE: Configuring URL Patterns for RedirectView
DESCRIPTION: Illustrates how to set up URL patterns for both custom and built-in RedirectViews in Django's urls.py file.

LANGUAGE: python
CODE:
from django.urls import path
from django.views.generic.base import RedirectView

from article.views import ArticleCounterRedirectView, ArticleDetailView

urlpatterns = [
    path(
        "counter/<int:pk>/",
        ArticleCounterRedirectView.as_view(),
        name="article-counter",
    ),
    path("details/<int:pk>/", ArticleDetailView.as_view(), name="article-detail"),
    path(
        "go-to-django/",
        RedirectView.as_view(url="https://www.djangoproject.com/"),
        name="go-to-django",
    ),
]

----------------------------------------

TITLE: Defining a CheckMessage in Python
DESCRIPTION: Example of creating a CheckMessage instance to represent a system check warning or error.

LANGUAGE: python
CODE:
CheckMessage(level, msg, hint=None, obj=None, id=None)

----------------------------------------

TITLE: Demonstrating UnicodeDecodeError in Python
DESCRIPTION: This code snippet shows the typical output of a UnicodeDecodeError when a bytestring containing non-ASCII sequences is incorrectly decoded. It illustrates the error message format developers might encounter.

LANGUAGE: pytb
CODE:
UnicodeDecodeError: 'ascii' codec can't decode byte 0x?? in position ?:
ordinal not in range(128)

----------------------------------------

TITLE: Template Directory Structure
DESCRIPTION: Shows the recommended directory structure for custom template tags

LANGUAGE: text
CODE:
polls/
    __init__.py
    models.py
    templatetags/
        __init__.py
        poll_extras.py
    views.py

----------------------------------------

TITLE: Django Security Function Reference - Python
DESCRIPTION: Reference to Django security-related functions django.contrib.auth.views.login(), django.utils.http.is_safe_url(), and django.test.override_settings that were affected by updates.

LANGUAGE: python
CODE:
django.contrib.auth.views.login()
django.utils.http.is_safe_url()
django.test.override_settings

----------------------------------------

TITLE: Importing Django Database Module RST Directive
DESCRIPTION: RST directive that specifies the Django database module import for documentation purposes.

LANGUAGE: rst
CODE:
.. module:: django.db

----------------------------------------

TITLE: Patching Potential DoS in LoginView on Windows
DESCRIPTION: Fix for CVE-2025-27556, addressing a potential denial-of-service vulnerability in LoginView, LogoutView, and set_language() on Windows.

LANGUAGE: Python
CODE:
Django 5.1 :commit:`(patch) <edc2716d01a6fdd84b173c02031695231bcee1f8>`
Django 5.0 :commit:`(patch) <8c6871b097b6c49d2a782c0d80d908bcbe2116f1>`

----------------------------------------

TITLE: Creating HTML Template for Contact Form in Django
DESCRIPTION: Example of an HTML template for rendering a contact form in Django, including CSRF token and form fields.

LANGUAGE: html
CODE:
<form method="post">{% csrf_token %}
    {{ form.as_p }}
    <input type="submit" value="Send message">
</form>

----------------------------------------

TITLE: Querying with Unaccent Lookup in Django
DESCRIPTION: Demonstrates accent-insensitive lookups using the unaccent PostgreSQL extension. Can be chained with other lookups like startswith.

LANGUAGE: python
CODE:
>>> City.objects.filter(name__unaccent="México")
['<City: Mexico>']

>>> User.objects.filter(first_name__unaccent__startswith="Jerem")
['<User: Jeremy>', '<User: Jérémy>', '<User: Jérémie>', '<User: Jeremie>']

----------------------------------------

TITLE: Invalid Multi-table Model Inheritance Example in Python/Django
DESCRIPTION: Demonstrates an invalid model inheritance setup that causes database integrity errors when using custom parent_link and to_field attributes.

LANGUAGE: python
CODE:
class Parent(models.Model):
    name = models.CharField(max_length=10)
    other_value = models.IntegerField(unique=True)


class Child(Parent):
    father = models.OneToOneField(
        Parent, primary_key=True, to_field="other_value", parent_link=True
    )
    value = models.IntegerField()

----------------------------------------

TITLE: Configuring Django Session Cookie Domain
DESCRIPTION: Example of setting the SESSION_COOKIE_DOMAIN in Django settings to resolve login issues when cookie domains don't match.

LANGUAGE: python
CODE:
SESSION_COOKIE_DOMAIN = 'www.example.com'

----------------------------------------

TITLE: Custom Storage Backend Implementation
DESCRIPTION: Example of creating a custom storage backend with a modified open method to replace the removed mixin parameter functionality.

LANGUAGE: Python
CODE:
from django.core.files import File
from django.core.files.storage import FileSystemStorage

class Spam(File):
    """
    Spam, spam, spam, spam and spam.
    """
    def ham(self):
        return "eggs"

class SpamStorage(FileSystemStorage):
    """
    A custom file storage backend.
    """
    def open(self, name, mode="rb"):
        return Spam(open(self.path(name), mode))

----------------------------------------

TITLE: Deleting Related Objects in Django
DESCRIPTION: This snippet shows how deleting a Reporter object affects related Article objects, and how to perform deletions using JOINs in the query.

LANGUAGE: pycon
CODE:
>>> Article.objects.all()
<QuerySet [<Article: John's second story>, <Article: Paul's story>, <Article: This is a test>]>
>>> Reporter.objects.order_by("first_name")
<QuerySet [<Reporter: John Smith>, <Reporter: Paul Jones>]>
>>> r2.delete()
>>> Article.objects.all()
<QuerySet [<Article: John's second story>, <Article: This is a test>]>
>>> Reporter.objects.order_by("first_name")
<QuerySet [<Reporter: John Smith>]>

>>> Reporter.objects.filter(article__headline__startswith="This").delete()
>>> Reporter.objects.all()
<QuerySet []>
>>> Article.objects.all()
<QuerySet []>

----------------------------------------

TITLE: Django Admin Configuration Changes
DESCRIPTION: Example showing how to migrate admin configuration from inline model definitions to a separate admin.py file in Django 1.0.

LANGUAGE: python
CODE:
# New (1.0) admin.py
from django.contrib import admin
from models import Author

class AuthorAdmin(admin.ModelAdmin):
    list_display = ["first_name", "last_name"]
    prepopulated_fields = {"slug": ("first_name", "last_name")}

admin.site.register(Author, AuthorAdmin)

----------------------------------------

TITLE: Configuring MySQL Database Engine in Django Settings
DESCRIPTION: Shows how to update the DATABASE_ENGINE setting in Django to use either the new mysql backend or the deprecated mysql_old backend for compatibility with older MySQLdb versions.

LANGUAGE: Python
CODE:
DATABASE_ENGINE = "mysql"

LANGUAGE: Python
CODE:
DATABASE_ENGINE = "mysql_old"

----------------------------------------

TITLE: Using TrigramSimilarity for Fuzzy Text Matching in Django
DESCRIPTION: Shows how to use TrigramSimilarity for fuzzy text matching and ordering results by similarity.

LANGUAGE: pycon
CODE:
>>> from django.contrib.postgres.search import TrigramSimilarity
>>> Author.objects.create(name="Katy Stevens")
>>> Author.objects.create(name="Stephen Keats")
>>> test = "Katie Stephens"
>>> Author.objects.annotate(
...     similarity=TrigramSimilarity("name", test),
... ).filter(
...     similarity__gt=0.3
... ).order_by("-similarity")
[<Author: Katy Stevens>, <Author: Stephen Keats>]

----------------------------------------

TITLE: Creating HStore Extension in Django Migration
DESCRIPTION: Example of creating a PostgreSQL HStore extension using Django migrations. This operation should be performed before any CreateModel or AddField operations that use HStoreField.

LANGUAGE: python
CODE:
from django.contrib.postgres.operations import HStoreExtension


class Migration(migrations.Migration):
    ...

    operations = [HStoreExtension(), ...]

----------------------------------------

TITLE: Custom Database Backend Example
DESCRIPTION: Example of subclassing the PostgreSQL database backend to modify features

LANGUAGE: python
CODE:
from django.db.backends.postgresql import base, features

class DatabaseFeatures(features.DatabaseFeatures):
    def allows_group_by_selected_pks_on_model(self, model):
        return True

class DatabaseWrapper(base.DatabaseWrapper):
    features_class = DatabaseFeatures

----------------------------------------

TITLE: Formset Maximum Form Limit
DESCRIPTION: Default maximum number of forms allowed in a formset to prevent memory exhaustion attacks. Can be customized using the max_num parameter.

LANGUAGE: python
CODE:
max_num = 1000

----------------------------------------

TITLE: Granting Superuser Privileges via SQL
DESCRIPTION: SQL command to grant superuser privileges to an existing PostgreSQL user.

LANGUAGE: psql
CODE:
postgres# ALTER ROLE <user_name> SUPERUSER;

----------------------------------------

TITLE: Using Fixtures in Django TestCase
DESCRIPTION: Demonstrates how to specify fixtures in a Django TestCase class for pre-populating test database with data.

LANGUAGE: python
CODE:
class MyTestCase(TestCase):
    fixtures = ["fixture-label"]

----------------------------------------

TITLE: Documentation Table of Contents in RestructuredText
DESCRIPTION: RestructuredText directive defining a table of contents structure for file handling documentation with a maximum depth of 2 levels.

LANGUAGE: restructuredtext
CODE:
.. toctree::
   :maxdepth: 2

   file
   storage
   uploads

----------------------------------------

TITLE: Creating PostgreSQL User and Database
DESCRIPTION: SQL commands to create a new PostgreSQL user and database for GeoDjango with appropriate permissions.

LANGUAGE: psql
CODE:
postgres# CREATE USER geodjango PASSWORD 'my_passwd';
postgres# CREATE DATABASE geodjango OWNER geodjango;

----------------------------------------

TITLE: Creating MultiPoint Objects
DESCRIPTION: Shows how to create MultiPoint objects from Point objects or coordinate tuples.

LANGUAGE: pycon
CODE:
>>> mp = MultiPoint(Point(0, 0), Point(1, 1))
>>> mp = MultiPoint((Point(0, 0), Point(1, 1)))

----------------------------------------

TITLE: Building HTML Documentation for Django (Unix/Linux)
DESCRIPTION: Command to build the HTML version of Django's documentation on Unix-like systems, to be run in the docs/ directory.

LANGUAGE: bash
CODE:
make html

----------------------------------------

TITLE: Using the new unittest2 support
DESCRIPTION: Example of using the new unittest2 support in Django 1.3 test cases.

LANGUAGE: Python
CODE:
from django.utils import unittest

class MyTests(unittest.TestCase):
    def test_something(self):
        # Test using unittest2 features

----------------------------------------

TITLE: Data Loading Script for World Borders
DESCRIPTION: Script to import spatial data from shapefile into GeoDjango model using LayerMapping utility.

LANGUAGE: python
CODE:
from pathlib import Path
from django.contrib.gis.utils import LayerMapping
from .models import WorldBorder

world_mapping = {
    "fips": "FIPS",
    "iso2": "ISO2",
    "iso3": "ISO3",
    "un": "UN", 
    "name": "NAME",
    "area": "AREA",
    "pop2005": "POP2005",
    "region": "REGION",
    "subregion": "SUBREGION",
    "lon": "LON",
    "lat": "LAT",
    "mpoly": "MULTIPOLYGON",
}

world_shp = Path(__file__).resolve().parent / "data" / "TM_WORLD_BORDERS-0.3.shp"

def run(verbose=True):
    lm = LayerMapping(WorldBorder, world_shp, world_mapping, transform=False)
    lm.save(strict=True, verbose=verbose)

----------------------------------------

TITLE: Loading Multiple Fixtures
DESCRIPTION: Examples of loading multiple fixtures in both command line and TestCase contexts.

LANGUAGE: shell
CODE:
django-admin loaddata mammals birds insects

LANGUAGE: python
CODE:
class AnimalTestCase(TestCase):
    fixtures = ["mammals", "birds", "insects"]

----------------------------------------

TITLE: Using reverse() Function with Arguments
DESCRIPTION: Demonstrates how to use reverse() function with arguments to generate URLs dynamically.

LANGUAGE: python
CODE:
from django.urls import reverse

def myview(request):
    return HttpResponseRedirect(reverse("arch-summary", args=[1945]))

----------------------------------------

TITLE: Referencing Django's login() View Function
DESCRIPTION: This snippet references the Django authentication view function that relies on user input for redirection, which was affected by the CVE-2016-2512 vulnerability.

LANGUAGE: Python
CODE:
"django.contrib.auth.views.login()"

----------------------------------------

TITLE: Installing Sphinx for Django Documentation
DESCRIPTION: Command to install Sphinx using pip, which is required to build the HTML version of Django's documentation.

LANGUAGE: python
CODE:
python -m pip install Sphinx

----------------------------------------

TITLE: Django Admin Module Reference
DESCRIPTION: Reference to the Django administrative interface module used for filtering and model management.

LANGUAGE: python
CODE:
django.contrib.admin

----------------------------------------

TITLE: Backwards-Compatible Event Handling for Django Admin Inline Forms
DESCRIPTION: This JavaScript snippet provides a way to handle inline form events in Django admin that is compatible with both newer (4.1+) and older versions of Django. It checks for the presence of 'event.detail.formsetName' to determine which approach to use.

LANGUAGE: javascript
CODE:
function handleFormsetAdded(row, formsetName) {
    // Do something
}

$(document).on('formset:added', (event, $row, formsetName) => {
    if (event.detail && event.detail.formsetName) {
        // Django >= 4.1
        handleFormsetAdded(event.target, event.detail.formsetName)
    } else {
        // Django < 4.1, use $row and formsetName
        handleFormsetAdded($row.get(0), formsetName)
    }
})

----------------------------------------

TITLE: Loading Django Fixtures via Command Line
DESCRIPTION: Shows how to load fixtures using Django's loaddata management command.

LANGUAGE: shell
CODE:
django-admin loaddata <fixture label>

----------------------------------------

TITLE: Django Project Structure
DESCRIPTION: Shows the directory structure of a Django project with a polls application before converting it to a reusable package.

LANGUAGE: text
CODE:
djangotutorial/
    manage.py
    mysite/
        __init__.py
        settings.py
        urls.py
        asgi.py
        wsgi.py
    polls/
        __init__.py
        admin.py
        apps.py
        migrations/
            __init__.py
            0001_initial.py
        models.py
        static/
            polls/
                images/
                    background.png
                style.css
        templates/
            polls/
                detail.html
                index.html
                results.html
        tests.py
        urls.py
        views.py
    templates/
        admin/
            base_site.html

----------------------------------------

TITLE: Fixing QuerySet.count() for union(), difference(), and intersection() queries in Django
DESCRIPTION: This bugfix corrects the behavior of QuerySet.count() when used with union(), difference(), and intersection() queries. It ensures accurate counting of results in these combined queryset operations.

LANGUAGE: Python
CODE:
QuerySet.count()
QuerySet.union()
QuerySet.difference()
QuerySet.intersection()

----------------------------------------

TITLE: Programmatic Management Command Execution
DESCRIPTION: Examples of calling Django management commands from Python code using call_command().

LANGUAGE: python
CODE:
from django.core import management
from django.core.management.commands import loaddata

management.call_command("flush", verbosity=0, interactive=False)
management.call_command("loaddata", "test_data", verbosity=0)
management.call_command(loaddata.Command(), "test_data", verbosity=0)

----------------------------------------

TITLE: Creating Named Migrations
DESCRIPTION: Demonstrates how to create a migration with a custom name using the --name option.

LANGUAGE: shell
CODE:
$ python manage.py makemigrations --name changed_my_model your_app_label

----------------------------------------

TITLE: Iterating Form Errors in Django Template
DESCRIPTION: Nested loop structure that iterates through a dictionary of form fields and their corresponding error messages. Creates a formatted list where each field is marked with an asterisk followed by its errors as sub-items.

LANGUAGE: django-template
CODE:
{% for field, errors in errors %}* {{ field }}
{% for error in errors %}  * {{ error }}
{% endfor %}{% endfor %}

----------------------------------------

TITLE: Django Template Configuration
DESCRIPTION: Configuration for custom admin templates in Django settings file.

LANGUAGE: python
CODE:
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

----------------------------------------

TITLE: Django Template Rendering Without Shortcuts
DESCRIPTION: Equivalent example showing template rendering without using the render() shortcut, demonstrating the underlying implementation.

LANGUAGE: python
CODE:
from django.http import HttpResponse
from django.template import loader


def my_view(request):
    # View code here...
    t = loader.get_template("myapp/index.html")
    c = {"foo": "bar"}
    return HttpResponse(t.render(c, request), content_type="application/xhtml+xml")

----------------------------------------

TITLE: Implementing Custom File Storage in Django Model
DESCRIPTION: This snippet demonstrates how to implement a custom file storage system for a specific field in a Django model.

LANGUAGE: python
CODE:
from django.core.files.storage import FileSystemStorage
from django.db import models

fs = FileSystemStorage(location="/media/photos")


class Car(models.Model):
    ...
    photo = models.ImageField(storage=fs)

----------------------------------------

TITLE: Nginx Default Server Configuration for Invalid Hosts
DESCRIPTION: Nginx server configuration to handle invalid host headers by returning a 444 No Response status code.

LANGUAGE: nginx
CODE:
server {
    listen 80 default_server;
    return 444;
}

----------------------------------------

TITLE: Loading Fixtures from Nested Directories
DESCRIPTION: Demonstrates loading fixtures from nested directory structures.

LANGUAGE: shell
CODE:
django-admin loaddata foo/bar/mydata.json

----------------------------------------

TITLE: Installing Pre-commit Hooks
DESCRIPTION: Commands for installing and setting up pre-commit hooks for Django development to check code quality before commits.

LANGUAGE: shell
CODE:
$ python -m pip install pre-commit
$ pre-commit install

----------------------------------------

TITLE: Defining Table of Contents in reStructuredText for Django Internals
DESCRIPTION: This snippet defines the table of contents for the Django internals documentation using reStructuredText syntax. It specifies the maximum depth of the table and lists the various sections to be included.

LANGUAGE: reStructuredText
CODE:
.. toctree::
   :maxdepth: 2

   contributing/index
   mailing-lists
   organization
   security
   release-process
   deprecation
   git
   howto-release-django