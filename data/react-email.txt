TITLE: Creating React Email Template
DESCRIPTION: Create an email template using React components. This example demonstrates a simple email structure with a title, horizontal rule, and a button.

LANGUAGE: jsx
CODE:
import * as React from 'react';
import { Html, Button, Hr, Text } from "@react-email/components";

export function MyTemplate(props) {
  return (
    <Html lang="en">
      <Text>Some title</Text>
      <Hr />
      <Button href="https://example.com">Click me</Button>
    </Html>
  );
}

export default MyTemplate;

----------------------------------------

TITLE: Installing dependencies for React Email project
DESCRIPTION: Commands for installing dependencies in the newly created React Email project using npm, yarn, or pnpm package managers.

LANGUAGE: sh
CODE:
npm install

LANGUAGE: sh
CODE:
yarn

LANGUAGE: sh
CODE:
pnpm install

----------------------------------------

TITLE: Installing React Email using create-email
DESCRIPTION: Commands for installing React Email using npm, yarn, or pnpm package managers. This sets up everything automatically and creates a new folder called react-email-starter with email templates.

LANGUAGE: sh
CODE:
npx create-email@latest

LANGUAGE: sh
CODE:
yarn create email

LANGUAGE: sh
CODE:
pnpm create email

----------------------------------------

TITLE: Installing React Email Components with Package Managers
DESCRIPTION: Commands for installing React Email components using yarn, npm, or pnpm. The '-E' flag ensures an exact version is installed.

LANGUAGE: sh
CODE:
yarn add @react-email/components -E

LANGUAGE: sh
CODE:
npm install @react-email/components -E

LANGUAGE: sh
CODE:
pnpm install @react-email/components -E

----------------------------------------

TITLE: Converting React Email to HTML and Sending via SendGrid
DESCRIPTION: Demonstration of how to import a React email template, render it to HTML, and send it using the SendGrid SDK. It includes setting up the SendGrid API key and configuring email options.

LANGUAGE: tsx
CODE:
import { render } from "@react-email/components";
import sendgrid from "@sendgrid/mail";
import { Email } from "./email";

sendgrid.setApiKey(process.env.SENDGRID_API_KEY);

const emailHtml = await render(<Email url="https://example.com" />);

const options = {
  from: "you@example.com",
  to: "user@gmail.com",
  subject: "hello world",
  html: emailHtml,
};

sendgrid.send(options);

----------------------------------------

TITLE: Sending Email with Nodemailer and React Email
DESCRIPTION: This snippet shows how to render the React email template to HTML and send it using Nodemailer. It includes setting up the Nodemailer transporter, rendering the email, and sending it.

LANGUAGE: tsx
CODE:
import { render } from '@react-email/components';
import nodemailer from 'nodemailer';
import { Email } from './email';

const transporter = nodemailer.createTransport({
  host: 'smtp.forwardemail.net',
  port: 465,
  secure: true,
  auth: {
    user: 'my_user',
    pass: 'my_password',
  },
});

const emailHtml = await render(<Email url="https://example.com" />);

const options = {
  from: 'you@example.com',
  to: 'user@gmail.com',
  subject: 'hello world',
  html: emailHtml,
};

await transporter.sendMail(options);

----------------------------------------

TITLE: Sending Email with MailerSend SDK
DESCRIPTION: Implementation of email sending functionality using MailerSend SDK. Includes rendering the React template to HTML and configuring email parameters like sender, recipients, and subject.

LANGUAGE: tsx
CODE:
import { render } from '@react-email/components';
import { MailerSend, EmailParams, Sender, Recipient } from "mailersend";
import { Email } from './email';

const mailerSend = new MailerSend({
  apiKey: process.env.MAILERSEND_API_KEY || '',
});

const emailHtml = await render(<Email url="https://example.com" />);

const sentFrom = new Sender("you@yourdomain.com", "Your name");
const recipients = [
  new Recipient("your@client.com", "Your Client")
];

const emailParams = new EmailParams()
  .setFrom(sentFrom)
  .setTo(recipients)
  .setSubject("This is a Subject")
  .setHtml(emailHtml)

await mailerSend.email.send(emailParams);

----------------------------------------

TITLE: Local Development Setup for React Email
DESCRIPTION: This code snippet outlines the steps for setting up a local development environment for the React Email project. It includes cloning the repository, installing dependencies, and starting the development server.

LANGUAGE: markdown
CODE:
<LocalDev/>

----------------------------------------

TITLE: Rendering React Component as HTML
DESCRIPTION: Convert a React component into an HTML string using the render function from @react-email/render. The 'pretty' option can be used to beautify the output.

LANGUAGE: jsx
CODE:
import { MyTemplate } from './email';
import { render } from '@react-email/render';

const html = await render(<MyTemplate />, {
  pretty: true,
});

console.log(html);

----------------------------------------

TITLE: Rendering and Sending Email with Postmark
DESCRIPTION: Convert the React email template to HTML and send it using the Postmark SDK. This snippet demonstrates how to render the email, set up Postmark client, and send the email.

LANGUAGE: tsx
CODE:
import { render } from '@react-email/components';
import postmark from 'postmark';
import { Email } from './email';

const client = new postmark.ServerClient(process.env.POSTMARK_API_KEY);

const emailHtml = await render(<Email url="https://example.com" />);

const options = {
  From: 'you@example.com',
  To: 'user@gmail.com',
  Subject: 'hello world',
  HtmlBody: emailHtml,
};

await client.sendEmail(options);

----------------------------------------

TITLE: Creating React Email Template
DESCRIPTION: Sample email template using React Email components with a styled button

LANGUAGE: jsx
CODE:
import { Button, Html } from "@react-email/components";
import * as React from "react";

export default function Email() {
  return (
    <Html>
      <Button
        href="https://example.com"
        style={{ background: "#000", color: "#fff", padding: "12px 20px" }}
      >
        Click me
      </Button>
    </Html>
  );
}

----------------------------------------

TITLE: Creating an Email Template with React Components
DESCRIPTION: Define an email template using React components from @react-email/components. This example creates a simple email with a button component.

LANGUAGE: tsx
CODE:
import * as React from 'react';
import { Html, Button } from "@react-email/components";

export function Email(props) {
  const { url } = props;

  return (
    <Html lang="en">
      <Button href={url}>Click me</Button>
    </Html>
  );
}

----------------------------------------

TITLE: Using React Email Section Component
DESCRIPTION: Example showing how to use the Section component in a React Email template, demonstrating both simple section usage and formatted layouts with rows and columns.

LANGUAGE: jsx
CODE:
import { Section, Column, Row, Text } from "@react-email/components";

const Email = () => {
  return (
    {/* A simple `section` */}
    <Section>
      <Text>Hello World</Text>
    </Section>

    {/* Formatted with `rows` and `columns` */}
     <Section>
      <Row>
        <Column>Column 1, Row 1</Column>
        <Column>Column 2, Row 1</Column>
      </Row>
      <Row>
        <Column>Column 1, Row 2</Column>
        <Column>Column 2, Row 2</Column>
      </Row>
    </Section>
  );
};

----------------------------------------

TITLE: Using HTML Component in React Email Template
DESCRIPTION: Example of how to use the HTML component in a React email template. It demonstrates importing the component, setting language and direction attributes, and including a styled Button component within the HTML wrapper.

LANGUAGE: jsx
CODE:
import { Html, Button } from "@react-email/components";

const Email = () => {
  return (
    <Html lang="en" dir="ltr">
      <Button href="https://example.com" style={{ color: "#61dafb" }}>
        Click me
      </Button>
    </Html>
  );
};

----------------------------------------

TITLE: Implementing Markdown Component in React Email
DESCRIPTION: Example showing how to use the Markdown component in a React Email template. Demonstrates custom styling options for markdown elements and container, with two different implementation approaches.

LANGUAGE: jsx
CODE:
import { Markdown, Html } from "@react-email/components";

const Email = () => {
  return (
    <Html lang="en" dir="ltr">
      <Markdown
        markdownCustomStyles={{
          h1: { color: "red" },
          h2: { color: "blue" },
          codeInline: { background: "grey" },
        }}
        markdownContainerStyles={{
          padding: "12px",
          border: "solid 1px black",
        }}
      >{`# Hello, World!`}</Markdown>

      {/* OR */}

      <Markdown children={`# This is a ~~strikethrough~~`} />
    </Html>
  );
};

----------------------------------------

TITLE: Using Tailwind component in React Email
DESCRIPTION: Example of how to use the Tailwind component to wrap email content and apply custom Tailwind configurations.

LANGUAGE: jsx
CODE:
import { Button } from "@react-email/button";
import { Tailwind } from "@react-email/tailwind";

const Email = () => {
  return (
    <Tailwind
      config={{
        theme: {
          extend: {
            colors: {
              "custom-color": "#ff0000",
            },
          },
        },
      }}
    >
      <Button
        href="https://example.com"
        className="text-custom-color bg-white mx-auto"
      >
        Click me
      </Button>
    </Tailwind>
  );
};

----------------------------------------

TITLE: Installing React Email Button Component
DESCRIPTION: Commands for installing the Button component using different package managers (npm, yarn, pnpm). Includes options for installing either the full components package or the individual button package.

LANGUAGE: sh
CODE:
npm install @react-email/components -E

# or get the individual package

npm install @react-email/button -E

LANGUAGE: sh
CODE:
yarn add @react-email/components -E

# or get the individual package

yarn add @react-email/button -E

LANGUAGE: sh
CODE:
pnpm add @react-email/components -E

# or get the individual package

pnpm add @react-email/button -E

----------------------------------------

TITLE: Implementing Code Block Component in React Email
DESCRIPTION: Example of how to use the CodeBlock component in a React Email template. Shows usage with line numbers, theme selection, and language specification

LANGUAGE: jsx
CODE:
import { CodeBlock, dracula } from "@react-email/code-block";

const Email = () => {
  const code = `export default async (req, res) => {
  try {
    const html = await renderAsync(
      EmailTemplate({ firstName: 'John' })
    );
    return NextResponse.json({ html });
  } catch (error) {
    return NextResponse.json({ error });
  }
}`;

  return (
    <CodeBlock
      code={code}
      lineNumbers // add this so that there are line numbers beside each code line
      theme={dracula}
      language="javascript"
    />
  );
};

----------------------------------------

TITLE: Sending Email with Resend SDK and React Template
DESCRIPTION: Example of how to use the Resend SDK to send an email with a React template. It shows how to import the email template and use Resend's send method with the react option.

LANGUAGE: tsx
CODE:
import { Resend } from 'resend';
import { Email } from './email';

const resend = new Resend('re_123456789');

await resend.emails.send({
  from: 'you@example.com',
  to: 'user@gmail.com',
  subject: 'hello world',
  react: <Email url="https://example.com" />,
});

----------------------------------------

TITLE: Implementing React Email Button Component
DESCRIPTION: Example of how to use the Button component in a React Email template. Shows basic implementation with custom styling through inline styles.

LANGUAGE: jsx
CODE:
import { Button } from "@react-email/components";

const Email = () => {
  return (
    <Button
      href="https://example.com"
      style={{ color: "#61dafb", padding: "10px 20px" }}
    >
      Click me
    </Button>
  );
};

----------------------------------------

TITLE: Using React Email Button Component
DESCRIPTION: Example showing how to import and use the Button component in a React email template with custom styling.

LANGUAGE: jsx
CODE:
import { Button } from "@react-email/button";

const Email = () => {
  return (
    <Button href="https://example.com" style={{ color: "#61dafb" }}>
      Click me
    </Button>
  );
};

----------------------------------------

TITLE: Using Section Component in React Email Template
DESCRIPTION: Example of how to use the Section component in a React email template. It demonstrates a simple section and a formatted section with rows and columns.

LANGUAGE: jsx
CODE:
import { Section } from '@react-email/section';
import { Column } from '@react-email/column';
import { Row } from '@react-email/row';
import { Text } from '@react-email/text';

const Email = () => {
  return (
    {/* A simple `section` */}
    <Section>
      <Text>Hello World</Text>
    </Section>

    {/* Formatted with `rows` and `columns` */}
     <Section>
      <Row>
        <Column>Column 1, Row 1</Column>
        <Column>Column 2, Row 1</Column>
      </Row>
      <Row>
        <Column>Column 1, Row 2</Column>
        <Column>Column 2, Row 2</Column>
      </Row>
    </Section>
  );
};

----------------------------------------

TITLE: Using the Preview Component in a React Email Template
DESCRIPTION: Example of how to import and use the Preview component in a React Email template. This snippet demonstrates the basic usage of the component to set preview text for an email.

LANGUAGE: jsx
CODE:
import { Preview } from "@react-email/components";

const Email = () => {
  return <Preview>Email preview text</Preview>;
};

----------------------------------------

TITLE: Using @react-email/html in a React Email Template
DESCRIPTION: Example of how to use the Html component from @react-email/html in a React email template. It demonstrates wrapping a Button component within the Html component and setting language and style attributes.

LANGUAGE: jsx
CODE:
import { Button } from "@react-email/button";
import { Html } from "@react-email/html";

const Email = () => {
  return (
    <Html lang="en">
      <Button href="https://example.com" style={{ color: "#61dafb" }}>
        Click me
      </Button>
    </Html>
  );
};

----------------------------------------

TITLE: Implementing Row Component in React Email Template
DESCRIPTION: Example of how to use the Row component along with Column and Section components to create a structured email layout in React.

LANGUAGE: jsx
CODE:
import { Row, Column, Section } from "@react-email/components";

const Email = () => {
  return (
    <Section>
      <Row>
        <Column>A</Column>
      </Row>
      <Row>
        <Column>B</Column>
      </Row>
      <Row>
        <Column>C</Column>
      </Row>
    </Section>
  );
};

----------------------------------------

TITLE: Implementing Font Component in React Email Template
DESCRIPTION: Example of using the Font component within a React Email template, demonstrating web font configuration with fallback options and font styling properties.

LANGUAGE: jsx
CODE:
import { Font, Head, Html } from "@react-email/components";

const Email = () => {
  return (
    <Html lang="en">
      <Head>
        <Font
          fontFamily="Roboto"
          fallbackFontFamily="Verdana"
          webFont={{
            url: "https://fonts.gstatic.com/s/roboto/v27/KFOmCnqEu92Fr1Mu4mxKKTU1Kg.woff2",
            format: "woff2",
          }}
          fontWeight={400}
          fontStyle="normal"
        />
      </Head>
    </Html>
  );
};

----------------------------------------

TITLE: Creating React Email Template Component
DESCRIPTION: Example email template using React Email components to create a simple button-based email layout.

LANGUAGE: jsx
CODE:
import { Button, Html } from "@react-email/components";
import * as React from "react";

export const MyEmail = () => {
  return (
    <Html>
      <Button
        href="https://example.com"
        style={{ background: "#000", color: "#fff", padding: "12px 20px" }}
      >
        Click me
      </Button>
    </Html>
  );
}

export default MyEmail;

----------------------------------------

TITLE: Using the Head Component in a React Email Template
DESCRIPTION: Example of how to import and use the Head component in a React Email template. The Head component is used to contain head-related elements such as the title tag.

LANGUAGE: jsx
CODE:
import { Head } from "@react-email/components";

const Email = () => {
  return (
    <Head>
      <title>My email title</title>
    </Head>
  );
};

----------------------------------------

TITLE: Using @react-email/font in a React Email Template
DESCRIPTION: Example of how to use the Font component in a React email template. It demonstrates importing necessary components and setting up a custom font with fallback and web font options.

LANGUAGE: jsx
CODE:
import { Html } from "@react-email/html";
import { Head } from "@react-email/head";
import { Font } from "@react-email/font";

const Email = () => {
  return (
    <Html lang="en">
      <Head>
        <Font
          fontFamily="Roboto"
          fallbackFontFamily="Verdana"
          webFont={{
            url: "https://fonts.gstatic.com/s/roboto/v27/KFOmCnqEu92Fr1Mu4mxKKTU1Kg.woff2",
            format: "woff2",
          }}
        />
      </Head>
    </Html>
  );
};

----------------------------------------

TITLE: Creating an Email Template with React Components
DESCRIPTION: Example of how to create an email template using React components from @react-email/components. The template includes an HTML structure with a button component.

LANGUAGE: tsx
CODE:
import * as React from "react";
import { Html, Button } from "@react-email/components";

export function Email(props) {
  const { url } = props;

  return (
    <Html lang="en">
      <Button href={url}>Click me</Button>
    </Html>
  );
}

----------------------------------------

TITLE: Implementing Code Block Component
DESCRIPTION: Example of implementing the Code Block component in a React Email template with line numbers and Dracula theme

LANGUAGE: jsx
CODE:
import { CodeBlock, dracula } from '@react-email/code-block';

const Email = () => {
  const code = `export default async (req, res) => {
  try {
    const html = await renderAsync(
      EmailTemplate({ firstName: 'John' })
    );
    return NextResponse.json({ html });
  } catch (error) {
    return NextResponse.json({ error });
  }
}`;

  return (<CodeBlock
    code={code}
    lineNumbers // add this so that there are line numbers beside each code line
    theme={dracula}
    language="javascript"
  />);
};

----------------------------------------

TITLE: Sending Email with Plunk SDK
DESCRIPTION: Implementation of email sending functionality using Plunk SDK. This code renders the React email template to HTML and sends it using Plunk's email service.

LANGUAGE: tsx
CODE:
import Plunk from "@plunk/node";
import { render } from "@react-email/components";
import { Email } from "./email";

const plunk = new Plunk(process.env.PLUNK_API_KEY);

const emailHtml = await render(<Email url="https://example.com" />);

plunk.emails.send({
  to: "hello@useplunk.com",
  subject: "Hello world",
  body: emailHtml,
});

----------------------------------------

TITLE: Using @react-email/img Component in React
DESCRIPTION: Example of how to use the Img component from @react-email/img in a React email template. It demonstrates importing the component and using it with basic props.

LANGUAGE: jsx
CODE:
import { Img } from "@react-email/img";

const Email = () => {
  return <Img src="cat.jpg" alt="Cat" width="300" height="300" />;
};

----------------------------------------

TITLE: Using the Link Component in a React Email Template
DESCRIPTION: Example of how to import and use the Link component in a React Email template. The Link component is used to create a clickable hyperlink to 'https://example.com' with the text 'Example'.

LANGUAGE: jsx
CODE:
import { Link } from "@react-email/components";

const Email = () => {
  return <Link href="https://example.com">Example</Link>;
};

----------------------------------------

TITLE: Initializing React Email Project with Default Configuration
DESCRIPTION: Creates a new React Email project with default templates in an 'emails' directory. This command will scaffold the basic project structure needed to start building email templates with React Email.

LANGUAGE: sh
CODE:
npx create-email

----------------------------------------

TITLE: Using Hr Component in React Email Template
DESCRIPTION: Example of how to import and use the Hr component in a React Email template. This snippet demonstrates the basic usage of the Hr component to create a horizontal divider in the email.

LANGUAGE: jsx
CODE:
import { Hr } from "@react-email/components";

const Email = () => {
  return <Hr />;
};

----------------------------------------

TITLE: Initializing React Email Project with Custom Directory
DESCRIPTION: Creates a new React Email project with templates in a custom-named directory. This command allows specifying an alternative folder name instead of the default 'emails' directory.

LANGUAGE: sh
CODE:
npx create-email foo

----------------------------------------

TITLE: Installing React Email Dependencies
DESCRIPTION: Package installation commands for React Email and its dependencies using different package managers

LANGUAGE: sh
CODE:
npm install react-email -D -E
npm install @react-email/components react react-dom -E

LANGUAGE: sh
CODE:
yarn add react-email -D -E
yarn add @react-email/components react react-dom -E

LANGUAGE: sh
CODE:
pnpm add react-email -D -E
pnpm add @react-email/components react react-dom -E

LANGUAGE: sh
CODE:
bun add react-email -D -E
bun add @react-email/components react react-dom -E

----------------------------------------

TITLE: Creating React Email Template
DESCRIPTION: Example of creating an email template using React Email components with a simple button component. The template accepts a URL prop for the button link.

LANGUAGE: tsx
CODE:
import * as React from 'react';
import { Html, Button } from "@react-email/components";

export function Email(props) {
  const { url } = props;

  return (
    <Html lang="en">
      <Button href={url}>Click me</Button>
    </Html>
  );
}

----------------------------------------

TITLE: Building New Components for React Email
DESCRIPTION: This code snippet outlines the process for adding new components to the React Email project. It includes creating a new package, adding tests, and submitting a pull request.

LANGUAGE: markdown
CODE:
4. Add a new folder under `packages` and build your component.

5. Don't forget to add tests.

6. Submit a pull request.

----------------------------------------

TITLE: Running React Email development server
DESCRIPTION: Commands for starting the development server for the React Email project using npm, yarn, or pnpm package managers. This allows viewing and editing email templates locally.

LANGUAGE: sh
CODE:
npm run dev

LANGUAGE: sh
CODE:
yarn dev

LANGUAGE: sh
CODE:
pnpm dev

----------------------------------------

TITLE: Using Container Component in React Email JSX
DESCRIPTION: Example of how to use the Container component in a React Email template. It demonstrates importing the component, wrapping content, and applying styles to a child Button component.

LANGUAGE: jsx
CODE:
import { Container, Button } from "@react-email/components";

const Email = () => {
  return (
    <Container>
      <Button href="https://example.com" style={{ color: "#61dafb" }}>
        Click me
      </Button>
    </Container>
  );
};

----------------------------------------

TITLE: Rendering React Component as Plain Text
DESCRIPTION: Convert a React component into plain text using the render function with the 'plainText' option. This is important for email clients that can't display HTML or for accessibility reasons.

LANGUAGE: jsx
CODE:
import { MyTemplate } from './email';
import { render } from '@react-email/render';

const text = await render(<MyTemplate />, {
  plainText: true,
});

console.log(text);

----------------------------------------

TITLE: Using Column Component in React Email Template
DESCRIPTION: Example of how to use the Column component within a Row component in a React Email template. This demonstrates the basic structure for creating a multi-column layout in an email.

LANGUAGE: jsx
CODE:
import { Row } from '@react-email/row';
import { Column } from '@react-email/column';

const Email = () => {
  return(
    <Row>
      <Column>A<Column/>
      <Column>B<Column/>
      <Column>C<Column/>
    </Row>
  );
};

----------------------------------------

TITLE: Installing React Email Components with Package Managers
DESCRIPTION: Commands to install React Email components or the individual Heading package using npm, yarn, or pnpm.

LANGUAGE: sh
CODE:
npm install @react-email/components -E

# or get the individual package

npm install @react-email/heading -E

LANGUAGE: sh
CODE:
yarn add @react-email/components -E

# or get the individual package

yarn add @react-email/heading -E

LANGUAGE: sh
CODE:
pnpm add @react-email/components -E

# or get the individual package

pnpm add @react-email/heading -E

----------------------------------------

TITLE: Using Link Component in React Email Template
DESCRIPTION: Example of how to import and use the Link component in a React Email template. The Link component is used to create a hyperlink to 'https://example.com' with the text 'Example'.

LANGUAGE: jsx
CODE:
import { Link } from "@react-email/link";

const Email = () => {
  return <Link href="https://example.com">Example</Link>;
};

----------------------------------------

TITLE: Installing React Email Dependencies
DESCRIPTION: Commands to install React Email and its required dependencies in the transactional workspace.

LANGUAGE: sh
CODE:
npm install react-email -D -E
npm install @react-email/components react react-dom -E

----------------------------------------

TITLE: Installing React Email Components with npm
DESCRIPTION: Command to install React Email components or the individual Text package using npm.

LANGUAGE: sh
CODE:
npm install @react-email/components -E

# or get the individual package

npm install @react-email/text -E

----------------------------------------

TITLE: Using the Image Component in React Email
DESCRIPTION: Example of how to import and use the Image component in a React Email template. The component is used to display an image with specified attributes.

LANGUAGE: jsx
CODE:
import { Img } from "@react-email/components";

const Email = () => {
  return <Img src="cat.jpg" alt="Cat" width="300" height="300" />;
};

----------------------------------------

TITLE: Installing Dependencies for React Email and AWS SES
DESCRIPTION: Install the required packages @react-email/components for creating email templates and @aws-sdk/client-ses for sending emails via AWS SES.

LANGUAGE: sh
CODE:
npm install @aws-sdk/client-ses @react-email/components

LANGUAGE: sh
CODE:
yarn add @aws-sdk/client-ses @react-email/components

LANGUAGE: sh
CODE:
pnpm add @aws-sdk/client-ses @react-email/components

----------------------------------------

TITLE: Installing React Email Components with yarn
DESCRIPTION: Command to install React Email components or the individual Text package using yarn.

LANGUAGE: sh
CODE:
yarn add @react-email/components -E

# or get the individual package

yarn add @react-email/text -E

----------------------------------------

TITLE: Using Hr Component in React Email Template
DESCRIPTION: Example of how to import and use the Hr component in a React email template. This snippet demonstrates the basic usage of the component.

LANGUAGE: jsx
CODE:
import { Hr } from "@react-email/hr";

const Email = () => {
  return <Hr />;
};

----------------------------------------

TITLE: Installing React Email and Plunk Dependencies
DESCRIPTION: Package installation commands for npm, yarn, and pnpm to set up React Email components and Plunk SDK.

LANGUAGE: sh
CODE:
npm install @plunk/node @react-email/components

LANGUAGE: sh
CODE:
yarn add @plunk/node @react-email/components

LANGUAGE: sh
CODE:
pnpm add @plunk/node @react-email/components

----------------------------------------

TITLE: Installing React Email Components with pnpm
DESCRIPTION: Command to install React Email components or the individual Text package using pnpm.

LANGUAGE: sh
CODE:
pnpm add @react-email/components -E

# or get the individual package

pnpm add @react-email/text -E

----------------------------------------

TITLE: Using the Text Component in React Email
DESCRIPTION: Example of how to import and use the Text component in a React Email template.

LANGUAGE: jsx
CODE:
import { Text } from "@react-email/components";

const Email = () => {
  return <Text>Lorem ipsum</Text>;
};

----------------------------------------

TITLE: Installing React Email Components with npm
DESCRIPTION: Command to install React Email components or the individual Preview package using npm.

LANGUAGE: sh
CODE:
npm install @react-email/components -E

# or get the individual package

npm install @react-email/preview -E

----------------------------------------

TITLE: Using CodeInline Component in React Email Template
DESCRIPTION: Example of how to import and use the CodeInline component in a React email template. The component wraps the text to be displayed as inline code.

LANGUAGE: jsx
CODE:
import { CodeInline } from "@react-email/code-inline";

const Email = () => {
  return <CodeInline>@react-email/code-inline</CodeInline>;
};

----------------------------------------

TITLE: Installing React Email Components with yarn
DESCRIPTION: Command to install React Email components or the individual Preview package using yarn.

LANGUAGE: sh
CODE:
yarn add @react-email/components -E

# or get the individual package

yarn add @react-email/preview -E

----------------------------------------

TITLE: Using @react-email/markdown Component in React
DESCRIPTION: Example of how to use the Markdown component in a React Email template. It demonstrates custom styling options and different ways to provide markdown content.

LANGUAGE: jsx
CODE:
import { Markdown } from "@react-email/markdown";
import { Html } from "@react-email/html";

const Email = () => {
  return (
    <Html lang="en" dir="ltr">
      <Markdown
        markdownCustomStyles={{
          h1: { color: "red" },
          h2: { color: "blue" },
          codeInline: { background: "grey" },
        }}
        markdownContainerStyles={{
          padding: "12px",
          border: "solid 1px black",
        }}
      >{`# Hello, World!`}</Markdown>

      {/* OR */}

      <Markdown children={`# This is a ~~strikethrough~~`} />
    </Html>
  );


----------------------------------------

TITLE: Installing React Email Components with pnpm
DESCRIPTION: Command to install React Email components or the individual Preview package using pnpm.

LANGUAGE: sh
CODE:
pnpm add @react-email/components -E

# or get the individual package

pnpm add @react-email/preview -E

----------------------------------------

TITLE: Using the Heading Component in React Email
DESCRIPTION: Example of how to import and use the Heading component in a React Email template. It demonstrates creating an h2 heading with sample text.

LANGUAGE: jsx
CODE:
import { Heading } from "@react-email/components";

const Email = () => {
  return <Heading as="h2">Lorem ipsum</Heading>;
};

----------------------------------------

TITLE: Installing Container Component with yarn for React Email
DESCRIPTION: Command to install the Container component or the entire components package using yarn. The -E flag ensures an exact version is installed.

LANGUAGE: sh
CODE:
yarn add @react-email/components -E

# or get the individual package

yarn add @react-email/container -E

----------------------------------------

TITLE: Using React Email Row Component in Email Template
DESCRIPTION: Example showing how to use the Row component along with Section and Column components to create an email template layout. Demonstrates basic structure with three rows containing columns.

LANGUAGE: jsx
CODE:
import { Section } from "@react-email/section";
import { Row } from "@react-email/row";
import { Column } from "@react-email/column";

const Email = () => {
  return (
    <Section>
      <Row>
        <Column>A</Column>
      </Row>
      <Row>
        <Column>B</Column>
      </Row>
      <Row>
        <Column>C</Column>
      </Row>
    </Section>
  );
};

----------------------------------------

TITLE: Installing Development Dependencies for React Email
DESCRIPTION: Command for installing project dependencies using pnpm, typically used for development and contributing to the React Email project.

LANGUAGE: sh
CODE:
pnpm install

----------------------------------------

TITLE: Installing Container Component with pnpm for React Email
DESCRIPTION: Command to install the Container component or the entire components package using pnpm. The -E flag ensures an exact version is installed.

LANGUAGE: sh
CODE:
pnpm add @react-email/components -E

# or get the individual package

pnpm add @react-email/container -E

----------------------------------------

TITLE: Installing Container Component with pnpm for React Email
DESCRIPTION: Command to install the Container component or the entire components package using pnpm. The -E flag ensures an exact version is installed.

LANGUAGE: sh
CODE:
pnpm add @react-email/components -E

# or get the individual package

pnpm add @react-email/container -E

----------------------------------------

TITLE: Using @react-email/text Component in React
DESCRIPTION: Example of importing and using the Text component in a React email template to render text content.

LANGUAGE: jsx
CODE:
import { Text } from "@react-email/text";

const Email = () => {
  return <Text>Lorem ipsum</Text>;
};

----------------------------------------

TITLE: Making Changes to React Email Documentation
DESCRIPTION: This snippet provides instructions for making changes to the React Email documentation. It specifies the location for changes and how to preview them locally.

LANGUAGE: markdown
CODE:
4. Make your changes under the `apps/docs` folder and see a live preview at [localhost:3000](http://localhost:3000).

5. Submit a pull request.

----------------------------------------

TITLE: Installing React Email Components with npm
DESCRIPTION: Command to install the React Email components package or the individual Column package using npm.

LANGUAGE: sh
CODE:
npm install @react-email/components -E

# or get the individual package

npm install @react-email/column -E

----------------------------------------

TITLE: Sending Email with Scaleway Transactional Email SDK
DESCRIPTION: Render the React email template to HTML and send it using the Scaleway Transactional Email SDK. This snippet includes client initialization, email rendering, and sending the email.

LANGUAGE: tsx
CODE:
import { render } from "@react-email/components";
import { TransactionalEmail, createClient } from "@scaleway/sdk";
import { Email } from "./email";

const client = createClient({
  accessKey: process.env.ACCESS_KEY,
  secretKey: process.env.SECRET_KEY,
  defaultProjectId: process.env.PROJECT_ID,
  defaultRegion: "fr-par",
  defaultZone: "fr-par-1",
});

const transactionalEmailClient = new TransactionalEmail.v1alpha1.API(client);

const emailHtml = await render(<Email url="https://example.com" />);

const sender = {
  email: "react-email@transactional.email.fr",
  subject: "TEST",
  name: "Team",
};

const userInvited = {
  email: "XXXX@scaleway.com",
  name: "TEST",
  teamName: "Team",
};

const userInvitedBy = {
  email: "XXXX@scaleway.com",
  name: "TEST",
  teamName: "Team",
};

transactionalEmailClient.createEmail({
  from: {
    email: sender.email,
    name: sender.name,
  },
  to: [
    {
      email: userInvited.email,
      name: userInvited.name,
    },
  ],
  subject: sender.subject,
  text: null,
  html: emailHtml,
});

----------------------------------------

TITLE: Running React Email Preview Server with bun
DESCRIPTION: Command to start the React Email preview development server using bun.

LANGUAGE: sh
CODE:
bun dev

----------------------------------------

TITLE: Installing React Email Components with pnpm
DESCRIPTION: Command to install the React Email components package or the individual Column package using pnpm.

LANGUAGE: sh
CODE:
pnpm add @react-email/components -E

# or get the individual package

pnpm add @react-email/column -E

----------------------------------------

TITLE: Defining Preview Props in React Email Template
DESCRIPTION: Demonstrates how to set preview-specific props for email templates using the PreviewProps pattern.

LANGUAGE: jsx
CODE:
export default function Email(props) {
  return (
    <div>
      <a src={props.source}>click here if you want candy 👀</a>
    </div>
  );
}

Email.PreviewProps = {
  source: "https://www.youtube.com/watch?v=dQw4w9WgXcQ",
};

----------------------------------------

TITLE: Starting Development Server
DESCRIPTION: Command to start local development servers and enable watch mode for file changes

LANGUAGE: sh
CODE:
pnpm dev

----------------------------------------

TITLE: Using Column Component in React Email Template
DESCRIPTION: Example of how to use the Column component within a Row component in a React Email template. This demonstrates the basic structure for creating a three-column layout.

LANGUAGE: jsx
CODE:
import { Column, Row } from "@react-email/components";

const Email = () => {
  return (
    <Row>
      <Column>A</Column>
      <Column>B</Column>
      <Column>C</Column>
    </Row>
  );
};

----------------------------------------

TITLE: React Email Directory Structure Example
DESCRIPTION: Shows the recommended file structure for React Email projects, including how to use underscore prefix to ignore directories.

LANGUAGE: bash
CODE:
my-project
├── emails
│   ├── _components
│   │   └── this-is-not-going-to-appear-in-the-sidebar.tsx
│   ├── email.tsx
│   └── static
├── package.json
└── tsconfig.json

----------------------------------------

TITLE: Starting React Email Development Server
DESCRIPTION: Command to start a local development server that watches files and automatically rebuilds emails on changes

LANGUAGE: sh
CODE:
npx react-email dev

----------------------------------------

TITLE: Installing React Email Components with NPM
DESCRIPTION: Command to install the React Email components package or the individual Hr component using NPM.

LANGUAGE: sh
CODE:
npm install @react-email/components -E

# or get the individual package

npm install @react-email/hr -E

----------------------------------------

TITLE: Displaying Version History in Markdown
DESCRIPTION: Documents version changes and dependency updates for React Email components in a changelog format using markdown.

LANGUAGE: markdown
CODE:
# @react-email/components

## 0.0.35

### Patch Changes

- Updated dependencies [c31b73e]
  - @react-email/text@0.1.1

## 0.0.34

### Patch Changes

- Updated dependencies [bfe1936]
  - @react-email/text@0.1.0

----------------------------------------

TITLE: Running Preview Server
DESCRIPTION: Command to start the email preview development server.

LANGUAGE: sh
CODE:
npm run dev

----------------------------------------

TITLE: Installing React Email Components with Yarn
DESCRIPTION: Command to install the React Email components package or the individual Hr component using Yarn.

LANGUAGE: sh
CODE:
yarn add @react-email/components -E

# or get the individual package

yarn add @react-email/hr -E

----------------------------------------

TITLE: Installing React Email Components with yarn
DESCRIPTION: Command to install the full @react-email/components package or the individual @react-email/html package using yarn.

LANGUAGE: sh
CODE:
yarn add @react-email/components -E

# or get the individual package

yarn add @react-email/html -E

----------------------------------------

TITLE: Adding Next.js Dependency for Vercel Deployment
DESCRIPTION: This snippet demonstrates how to add the 'next' package to the devDependencies in package.json, which is required for the Vercel Next.js Framework Preset to work properly.

LANGUAGE: diff
CODE:
 {
   "devDependencies": {
+    "next": "*",
   }
 }

----------------------------------------

TITLE: Installing React Email Components with pnpm
DESCRIPTION: Command to install the React Email components package or the individual Head component using pnpm.

LANGUAGE: sh
CODE:
pnpm add @react-email/components -E

# or get the individual package

pnpm add @react-email/head -E

----------------------------------------

TITLE: Installing React Email Components with pnpm
DESCRIPTION: Command to install the full @react-email/components package or the individual @react-email/html package using pnpm.

LANGUAGE: sh
CODE:
pnpm add @react-email/components -E

# or get the individual package

pnpm add @react-email/html -E

----------------------------------------

TITLE: React Email Monorepo Navigation Cards in Markdown
DESCRIPTION: Markdown structure using CardGroup and Card components to create a navigation interface for different package manager setup guides.

LANGUAGE: markdown
CODE:
<CardGroup>
  <Card icon="arrow-up-right-from-square" title="npm" href="/getting-started/monorepo-setup/npm">
    See a manual setup guide specific for npm
  </Card>
  <Card icon="arrow-up-right-from-square" title="pnpm" href="/getting-started/monorepo-setup/pnpm">
    See a manual setup guide specific for pnpm
  </Card>
  <Card icon="arrow-up-right-from-square" title="yarn" href="/getting-started/monorepo-setup/yarn">
    See a manual setup guide specific for yarn
  </Card>
  <Card icon="arrow-up-right-from-square" title="bun" href="/getting-started/monorepo-setup/bun">
    See a manual setup guide specific for bun
  </Card>
</CardGroup>

----------------------------------------

TITLE: Installing React Email Components with npm
DESCRIPTION: Command to install the React Email components package or the individual Row component using npm.

LANGUAGE: sh
CODE:
npm install @react-email/components -E

# or get the individual package

npm install @react-email/row -E

----------------------------------------

TITLE: Installing React Email Components with npm
DESCRIPTION: Command to install the React Email components package or the individual Link component using npm.

LANGUAGE: sh
CODE:
npm install @react-email/components -E

# or get the individual package

npm install @react-email/link -E

----------------------------------------

TITLE: Referencing Test File in TypeScript
DESCRIPTION: This snippet indicates the location of the TypeScript test file used for the React Email Tailwind compatibility testing with NextJS.

LANGUAGE: Markdown
CODE:
[the test file](../_tests/nextjs.spec.ts)

----------------------------------------

TITLE: Installing React Email Components with yarn
DESCRIPTION: Command to install the React Email components package or the individual Row component using yarn.

LANGUAGE: sh
CODE:
yarn add @react-email/components -E

# or get the individual package

yarn add @react-email/row -E

----------------------------------------

TITLE: Installing React Email Components with npm
DESCRIPTION: Command to install the React Email components package or the individual Head component using npm.

LANGUAGE: sh
CODE:
npm install @react-email/components -E

# or get the individual package

npm install @react-email/head -E

----------------------------------------

TITLE: Installing React Email Button with NPM
DESCRIPTION: Command to install the @react-email/button component using NPM package manager with exact version flag.

LANGUAGE: sh
CODE:
npm install @react-email/button -E

----------------------------------------

TITLE: Installing React Email Section Component
DESCRIPTION: Commands to install the React Email components package or the individual section component using different package managers (npm, yarn, pnpm).

LANGUAGE: sh
CODE:
npm install @react-email/components -E

# or get the individual package

npm install @react-email/section -E

LANGUAGE: sh
CODE:
yarn add @react-email/components -E

# or get the individual package

yarn add @react-email/section -E

LANGUAGE: sh
CODE:
pnpm add @react-email/components -E

# or get the individual package

pnpm add @react-email/section -E

----------------------------------------

TITLE: Installing React Email Components with yarn
DESCRIPTION: Command to install the React Email components package or the individual Head component using yarn.

LANGUAGE: sh
CODE:
yarn add @react-email/components -E

# or get the individual package

yarn add @react-email/head -E

----------------------------------------

TITLE: Installing @react-email/html with Yarn
DESCRIPTION: Command to install the @react-email/html component using Yarn package manager. The -E flag ensures an exact version is installed.

LANGUAGE: sh
CODE:
yarn add @react-email/html -E

----------------------------------------

TITLE: Installing React Email Components with pnpm
DESCRIPTION: Command to install the React Email components package or the individual Link component using pnpm.

LANGUAGE: sh
CODE:
pnpm add @react-email/components -E

# or get the individual package

pnpm add @react-email/link -E

----------------------------------------

TITLE: Installing @react-email/head with NPM
DESCRIPTION: Command to install the @react-email/head package using NPM package manager with exact version flag.

LANGUAGE: sh
CODE:
npm install @react-email/head -E

----------------------------------------

TITLE: Installing React Email Row Component with Yarn
DESCRIPTION: Command to install the @react-email/row component using Yarn package manager with exact version flag.

LANGUAGE: sh
CODE:
yarn add @react-email/row -E

----------------------------------------

TITLE: Installing Code Block Component
DESCRIPTION: Commands for installing the Code Block component using different package managers (npm, yarn, pnpm)

LANGUAGE: sh
CODE:
npm install @react-email/components -E

# or get the individual package

npm install @react-email/code-block -E

LANGUAGE: sh
CODE:
yarn add @react-email/components -E

# or get the individual package

yarn add @react-email/code-block -E

LANGUAGE: sh
CODE:
pnpm add @react-email/components -E

# or get the individual package

pnpm add @react-email/code-block -E

----------------------------------------

TITLE: Adding Build Script to package.json for React Email
DESCRIPTION: This snippet shows how to add the 'build' script to the package.json file, which is necessary for deploying the React Email preview server.

LANGUAGE: diff
CODE:
 {
   "scripts": {
+    "build": "email build"
   }
 }

----------------------------------------

TITLE: Installing React Email Row Component with NPM
DESCRIPTION: Command to install the @react-email/row component using NPM package manager with exact version flag.

LANGUAGE: sh
CODE:
npm install @react-email/row -E

----------------------------------------

TITLE: Theme Configuration Example
DESCRIPTION: Example of a theme configuration object showing various style properties for different code tokens

LANGUAGE: json
CODE:
{
  "base": {
    "color": "#f8f8f2",
    "background": "#282a36",
    "textShadow": "0 1px rgba(0, 0, 0, 0.3)",
    "fontFamily": "Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace",
    "textAlign": "left",
    "whiteSpace": "pre",
    "wordSpacing": "normal",
    "wordBreak": "normal",
    "wordWrap": "normal",
    "lineHeight": "1.5",
    "MozTabSize": "4",
    "OTabSize": "4",
    "tabSize": "4",
    "WebkitHyphens": "none",
    "MozHyphens": "none",
    "MsHyphens": "none",
    "hyphens": "none",
    "padding": "1em",
    "margin": ".5em 0",
    "overflow": "auto",
    "borderRadius": "0.3em"
  },
  "comment": {
    "color": "#6272a4"
  },
  "prolog": {
    "color": "#6272a4"
  },
  "doctype": {
    "color": "#6272a4"
  },
  "cdata": {
    "color": "#6272a4"
  },
  "punctuation": {
    "color": "#f8f8f2"
  },
  "property": {
    "color": "#ff79c6"
  }
}

----------------------------------------

TITLE: Installing React Email Components with PNPM
DESCRIPTION: Command to install the React Email components package or the individual Hr component using PNPM.

LANGUAGE: sh
CODE:
pnpm add @react-email/components -E

# or get the individual package

pnpm add @react-email/hr -E

----------------------------------------

TITLE: Installing @react-email/text with Yarn
DESCRIPTION: Command to install the @react-email/text component using Yarn package manager with exact version flag.

LANGUAGE: sh
CODE:
yarn add @react-email/text -E

----------------------------------------

TITLE: Building React Email Packages
DESCRIPTION: Command to build all packages in the React Email project, required for proper package interdependency resolution

LANGUAGE: bash
CODE:
pnpm build

----------------------------------------

TITLE: Installing React Email Components with Package Manager
DESCRIPTION: Commands to install the React Email components or the individual Image package using npm, yarn, or pnpm.

LANGUAGE: sh
CODE:
npm install @react-email/components -E

# or get the individual package

npm install @react-email/img -E

LANGUAGE: sh
CODE:
yarn add @react-email/components -E

# or get the individual package

yarn add @react-email/img -E

LANGUAGE: sh
CODE:
pnpm add @react-email/components -E

# or get the individual package

pnpm add @react-email/img -E

----------------------------------------

TITLE: Installing @react-email/img with Yarn
DESCRIPTION: Command to install the @react-email/img component using Yarn package manager.

LANGUAGE: sh
CODE:
yarn add @react-email/img -E

----------------------------------------

TITLE: Running Test Commands in React Email
DESCRIPTION: Basic test commands for running tests in react-email packages. The commands can be run either at the package level or at the root level using turborepo.

LANGUAGE: bash
CODE:
pnpm test

LANGUAGE: bash
CODE:
pnpm test:watch

----------------------------------------

TITLE: Installing React Email Components with pnpm
DESCRIPTION: Command to install the React Email components package or the individual Row component using pnpm.

LANGUAGE: sh
CODE:
pnpm add @react-email/components -E

# or get the individual package

pnpm add @react-email/row -E

----------------------------------------

TITLE: Installing @react-email/link with Yarn
DESCRIPTION: Command to install the @react-email/link component using Yarn package manager.

LANGUAGE: sh
CODE:
yarn add @react-email/link -E

----------------------------------------

TITLE: Checking Linting Issues in React Email Project using Biome.js
DESCRIPTION: This command checks for any linting issues in the React Email project. It should be run from the root of the workspace.

LANGUAGE: bash
CODE:
pnpm lint

----------------------------------------

TITLE: Installing React Email Components with Package Managers
DESCRIPTION: Commands for installing React Email components and Tailwind package using different package managers (npm, yarn, pnpm).

LANGUAGE: sh
CODE:
npm install @react-email/components -E

# or get the individual package

npm install @react-email/tailwind -E

LANGUAGE: sh
CODE:
yarn add @react-email/components -E

# or get the individual package

yarn add @react-email/tailwind -E

LANGUAGE: sh
CODE:
pnpm add @react-email/components -E

# or get the individual package

pnpm add @react-email/tailwind -E

----------------------------------------

TITLE: Installing Container Component with npm for React Email
DESCRIPTION: Command to install the Container component or the entire components package using npm. The -E flag ensures an exact version is installed.

LANGUAGE: sh
CODE:
npm install @react-email/components -E

# or get the individual package

npm install @react-email/container -E

----------------------------------------

TITLE: Building React Email Package with pnpm
DESCRIPTION: This command is used to build a React Email package using pnpm. It should be run in the specific package directory, such as package/render.

LANGUAGE: bash
CODE:
pnpm build

----------------------------------------

TITLE: Using Tailwind Component in React Email
DESCRIPTION: Example of implementing the Tailwind component to wrap email content with custom theme configuration.

LANGUAGE: jsx
CODE:
import { Tailwind, Button } from "@react-email/components";

const Email = () => {
  return (
    <Tailwind
      config={{
        theme: {
          extend: {
            colors: {
              brand: "#007291",
            },
          },
        },
      }}
    >
      <Button
        href="https://example.com"
        className="bg-brand px-3 py-2 font-medium leading-4 text-white"
      >
        Click me
      </Button>
    </Tailwind>
  );
};

----------------------------------------

TITLE: Installing React Email Components with yarn
DESCRIPTION: Command to install the React Email components package or the individual Link component using yarn.

LANGUAGE: sh
CODE:
yarn add @react-email/components -E

# or get the individual package

yarn add @react-email/link -E

----------------------------------------

TITLE: Running Mintlify Development Server for React Email Docs
DESCRIPTION: Command to start the Mintlify development server for previewing the React Email documentation. This should be run in the apps/docs directory of the project.

LANGUAGE: sh
CODE:
pnpm dev

----------------------------------------

TITLE: Tailwind Configuration with Pixel Units
DESCRIPTION: Custom Tailwind configuration that uses pixel units instead of rem for better email client compatibility.

LANGUAGE: typescript
CODE:
import type { TailwindConfig } from "@react-email/tailwind";

export default {
  theme: {
    fontSize: {
      xs: ["12px", { lineHeight: "16px" }],
      sm: ["14px", { lineHeight: "20px" }],
      base: ["16px", { lineHeight: "24px" }],
      lg: ["18px", { lineHeight: "28px" }],
      xl: ["20px", { lineHeight: "28px" }],
      "2xl": ["24px", { lineHeight: "32px" }],
      "3xl": ["30px", { lineHeight: "36px" }],
      "4xl": ["36px", { lineHeight: "36px" }],
      "5xl": ["48px", { lineHeight: "1" }],
      "6xl": ["60px", { lineHeight: "1" }],
      "7xl": ["72px", { lineHeight: "1" }],
      "8xl": ["96px", { lineHeight: "1" }],
      "9xl": ["144px", { lineHeight: "1" }],
    },
    spacing: {
      px: "1px",
      0: "0",
      0.5: "2px",
      1: "4px",
      1.5: "6px",
      2: "8px",
      2.5: "10px",
      3: "12px",
      3.5: "14px",
      4: "16px",
      5: "20px",
      6: "24px",
      7: "28px",
      8: "32px",
      9: "36px",
      10: "40px",
      11: "44px",
      12: "48px",
      14: "56px",
      16: "64px",
      20: "80px",
      24: "96px",
      28: "112px",
      32: "128px",
      36: "144px",
      40: "160px",
      44: "176px",
      48: "192px",
      52: "208px",
      56: "224px",
      60: "240px",
      64: "256px",
      72: "288px",
      80: "320px",
      96: "384px",
    },
  },
} satisfies TailwindConfig;

----------------------------------------

TITLE: Installing React Email Dependencies with pnpm
DESCRIPTION: Install required React Email packages and dependencies in the transactional workspace.

LANGUAGE: sh
CODE:
pnpm add react-email -D -E
pnpm add @react-email/components react react-dom -E

----------------------------------------

TITLE: Installing @react-email/html with npm
DESCRIPTION: Command to install the @react-email/html component using npm package manager. The -E flag ensures an exact version is installed.

LANGUAGE: sh
CODE:
npm install @react-email/html -E

----------------------------------------

TITLE: Starting React Email Development Server
DESCRIPTION: Command to start the email preview development server.

LANGUAGE: sh
CODE:
pnpm dev

----------------------------------------

TITLE: Installing @react-email/link with npm
DESCRIPTION: Command to install the @react-email/link component using npm package manager.

LANGUAGE: sh
CODE:
npm install @react-email/link -E

----------------------------------------

TITLE: Configuring Yarn Linker Mode
DESCRIPTION: Sets the yarn nodeLinker mode to node-modules for React Email compatibility.

LANGUAGE: yml
CODE:
nodeLinker: node-modules

----------------------------------------

TITLE: Installing @react-email/preview with npm
DESCRIPTION: Command to install the @react-email/preview component using npm package manager. The -E flag ensures an exact version is installed.

LANGUAGE: sh
CODE:
npm install @react-email/preview -E

----------------------------------------

TITLE: Installing React Email Dependencies
DESCRIPTION: Commands to install React Email and its required dependencies in the transactional workspace.

LANGUAGE: sh
CODE:
yarn add react-email -D -E
yarn add @react-email/components react react-dom -E

----------------------------------------

TITLE: Installing Code Block Component with NPM
DESCRIPTION: Command to install the @react-email/code-block component using NPM package manager

LANGUAGE: sh
CODE:
npm install @react-email/code-block -E

----------------------------------------

TITLE: Configuring Package Scripts
DESCRIPTION: Adds the development script to package.json for running the React Email preview server.

LANGUAGE: json
CODE:
{
  "scripts": {
    "dev": "email dev"
  }
}

----------------------------------------

TITLE: Installing @react-email/code-inline with npm
DESCRIPTION: Command to install the @react-email/code-inline package using npm package manager. The -E flag ensures an exact version is installed.

LANGUAGE: sh
CODE:
npm install @react-email/code-inline -E

----------------------------------------

TITLE: Creating React Email Template
DESCRIPTION: Example React Email template component with a styled button implementation.

LANGUAGE: jsx
CODE:
import { Button, Html } from "@react-email/components";
import * as React from "react";

export const MyEmail = () => {
  return (
    <Html>
      <Button
        href="https://example.com"
        style={{ background: "#000", color: "#fff", padding: "12px 20px" }}
      >
        Click me
      </Button>
    </Html>
  );
}

export default MyEmail;

----------------------------------------

TITLE: Installing @react-email/column with npm
DESCRIPTION: Command to install the @react-email/column component using npm package manager. The -E flag ensures an exact version is installed.

LANGUAGE: sh
CODE:
npm install @react-email/column -E

----------------------------------------

TITLE: Installing React Email Dependencies with bun
DESCRIPTION: Install React Email and its dependencies in the 'transactional' workspace using bun package manager.

LANGUAGE: sh
CODE:
bun add react-email -D -E
bun add @react-email/components react react-dom -E

----------------------------------------

TITLE: Installing @react-email/preview with Yarn
DESCRIPTION: Command to install the @react-email/preview component using Yarn package manager. The -E flag ensures an exact version is installed.

LANGUAGE: sh
CODE:
yarn add @react-email/preview -E

----------------------------------------

TITLE: Cloning React Email Repository
DESCRIPTION: Command to clone the react-email repository from GitHub to local machine

LANGUAGE: sh
CODE:
git clone https://github.com/resend/react-email.git

----------------------------------------

TITLE: Installing @react-email/render with Yarn
DESCRIPTION: Command to install the @react-email/render package using Yarn package manager. The -E flag ensures an exact version is installed.

LANGUAGE: sh
CODE:
yarn add @react-email/render -E

----------------------------------------

TITLE: Installing Project Dependencies
DESCRIPTION: Command to install all required project dependencies using pnpm package manager

LANGUAGE: sh
CODE:
pnpm install

----------------------------------------

TITLE: Installing @react-email/render with npm
DESCRIPTION: Command to install the @react-email/render package using npm package manager. The -E flag ensures an exact version is installed.

LANGUAGE: sh
CODE:
npm install @react-email/render -E

----------------------------------------

TITLE: Rendering React Email Component Suggestions with CardGroup
DESCRIPTION: This code snippet demonstrates how to use the CardGroup and Card components to display a set of suggested React Email components. Each Card represents a different component with its title, icon, link, and a short description.

LANGUAGE: jsx
CODE:
<CardGroup>
  <Card title="Image" icon='image' href="/components/image">
    Display an image in your email.
  </Card>
  <Card title="Link" icon='link' href="/components/link">
    A hyperlink to web pages or anything else a URL can address.
  </Card>
  <Card title="Divider" icon='horizontal-rule' href="/components/hr">
    Display a divider that separates content areas in your email.
  </Card>
  <Card
    title="Preview"
    icon='magnifying-glass'
    href="/components/preview"
  >
    A preview text that will be displayed in the inbox of the recipient.
  </Card>
</CardGroup>

----------------------------------------

TITLE: Installing @react-email/section with yarn
DESCRIPTION: Command to install the @react-email/section component using yarn package manager. The -E flag ensures an exact version is installed.

LANGUAGE: sh
CODE:
yarn add @react-email/section -E

----------------------------------------

TITLE: Rendering Supported Email Clients Grid in React
DESCRIPTION: This snippet creates a responsive grid layout to display icons and names of supported email clients. It uses inline styles and className props for styling, and includes images for each client's icon.

LANGUAGE: JSX
CODE:
<div
  role="list"
  className="grid py-2 list-none border rounded-xl text-sm"
  style={{
    gridTemplateColumns: 'repeat(auto-fit, minmax(100px, 1fr))',
    columnGap: '0.5rem',
    borderColor: 'rgb(30 41 59/1)'
  }}
>
  <div className="text-center block not-prose group relative my-2 ring-2 ring-transparent overflow-hidden">
    <img
      src="https://react.email/static/icons/gmail.svg"
      width="56px"
      height="56px"
      alt="Gmail"
      className="mx-auto mb-1"
    />
    Gmail
  </div>
  <div className="text-center block not-prose group relative my-2 ring-2 ring-transparent overflow-hidden">
    <img
      src="https://react.email/static/icons/apple-mail.svg"
      width="56px"
      height="56px"
      alt="Apple Mail"
      className="mx-auto mb-1"
    />
    Apple Mail
  </div>
  <div className="text-center block not-prose group relative my-2 ring-2 ring-transparent overflow-hidden">
    <img
      src="https://react.email/static/icons/outlook.svg"
      width="56px"
      height="56px"
      alt="Outlook"
      className="mx-auto mb-1"
    />
    Outlook
  </div>
  <div className="text-center block not-prose group relative my-2 ring-2 ring-transparent overflow-hidden">
    <img
      src="https://react.email/static/icons/yahoo-mail.svg"
      width="56px"
      height="56px"
      alt="Yahoo! Mail"
      className="mx-auto mb-1"
    />
    Yahoo! Mail
  </div>
  <div className="text-center block not-prose group relative my-2 ring-2 ring-transparent overflow-hidden">
    <img
      src="https://react.email/static/icons/hey.svg"
      width="56px"
      height="56px"
      alt="HEY"
      className="mx-auto mb-1"
    />
    HEY
  </div>
  <div className="text-center block not-prose group relative my-2 ring-2 ring-transparent overflow-hidden">
    <img
      src="https://react.email/static/icons/superhuman.svg"
      width="56px"
      height="56px"
      alt="Superhuman"
      className="mx-auto mb-1"
    />
    Superhuman
  </div>
</div>

----------------------------------------

TITLE: Installing @react-email/section with npm
DESCRIPTION: Command to install the @react-email/section component using npm package manager. The -E flag ensures an exact version is installed.

LANGUAGE: sh
CODE:
npm install @react-email/section -E

----------------------------------------

TITLE: Starting Next.js Development Server
DESCRIPTION: Command to start the local development server for the React Email project using pnpm package manager. The server will run on port 3000 by default.

LANGUAGE: bash
CODE:
pnpm dev

----------------------------------------

TITLE: Installing @react-email/tailwind with yarn
DESCRIPTION: Command to install the @react-email/tailwind package using yarn package manager.

LANGUAGE: sh
CODE:
yarn add @react-email/tailwind -E

----------------------------------------

TITLE: Changelog Entry - Version 0.0.13
DESCRIPTION: Markdown documentation detailing dependency changes in version 0.0.13, focusing on React and React DOM peer dependencies.

LANGUAGE: markdown
CODE:
## 0.0.13

### Patch Changes

- 467af4e: Use peerDependencies for react and react-dom
- b34aa90: Move react and react-dom to just dependencies for better DX

----------------------------------------

TITLE: Installing @react-email/tailwind with npm
DESCRIPTION: Command to install the @react-email/tailwind package using npm package manager.

LANGUAGE: sh
CODE:
npm install @react-email/tailwind -E

----------------------------------------

TITLE: Changelog Entry - Version 0.0.11
DESCRIPTION: Documentation for version 0.0.11 and its canary release, noting the addition of forward ref functionality.

LANGUAGE: markdown
CODE:
## 0.0.11

### Patch changes

- Add forward ref

## 0.0.11-canary.1

### Patch changes

- Add forward ref

----------------------------------------

TITLE: Installing React Email Button with Yarn
DESCRIPTION: Command to install the @react-email/button component using Yarn package manager with exact version flag.

LANGUAGE: sh
CODE:
yarn add @react-email/button -E

----------------------------------------

TITLE: Installing @react-email/column with Yarn
DESCRIPTION: Command to install the @react-email/column component using Yarn package manager. The -E flag ensures an exact version is installed.

LANGUAGE: sh
CODE:
yarn add @react-email/column -E

----------------------------------------

TITLE: Installing @react-email/code-inline with Yarn
DESCRIPTION: Command to install the @react-email/code-inline package using Yarn package manager. The -E flag ensures an exact version is installed.

LANGUAGE: sh
CODE:
yarn add @react-email/code-inline -E

----------------------------------------

TITLE: Installing React Email Container with Yarn
DESCRIPTION: Command to install the @react-email/container package using Yarn package manager with exact version flag.

LANGUAGE: sh
CODE:
yarn add @react-email/container -E

----------------------------------------

TITLE: Installing React Email Container with NPM
DESCRIPTION: Command to install the @react-email/container package using NPM package manager with exact version flag.

LANGUAGE: sh
CODE:
npm install @react-email/container -E

----------------------------------------

TITLE: Using React Email Container Component
DESCRIPTION: Example of implementing the Container component in a React Email template. Shows how to wrap a Button component within a centered container with custom styling.

LANGUAGE: jsx
CODE:
import { Button } from "@react-email/button";
import { Container } from "@react-email/container";

const Email = () => {
  return (
    <Container>
      <Button href="https://example.com" style={{ color: "#61dafb" }}>
        Click me
      </Button>
    </Container>
  );
};

----------------------------------------

TITLE: Installing @react-email/font with Yarn
DESCRIPTION: Command to install the @react-email/font component using Yarn package manager. The -E flag ensures an exact version is installed.

LANGUAGE: sh
CODE:
yarn add @react-email/font -E

----------------------------------------

TITLE: Displaying Changelog for @react-email/font Package in Markdown
DESCRIPTION: This markdown snippet presents the version history and changes for the @react-email/font package. It includes information about dependency updates, peer dependency changes, and functionality improvements across various releases and canary versions.

LANGUAGE: markdown
CODE:
# @react-email/font

## 0.0.9

### Patch Changes

- 467af4e: Use peerDependencies for react and react-dom
- b34aa90: Move react and react-dom to just dependencies for better DX

## 0.0.9-canary.1

### Patch Changes

- 467af4e: Use peerDependencies for react and react-dom

## 0.0.9-canary.0

### Patch Changes

- f7833da: Move react and react-dom to just dependencies for better DX

## 0.0.8

### Patch Changes

- 3caaf53: Updated peer dependencies to allow for React 19 release candidated and React 19 itself

## 0.0.8-canary.0

### Patch Changes

- a1c016b: Updated peer dependencies to allow for React 19 release candidated and React 19 itself

## 0.0.7

### Patch changes

- Add forward ref

## 0.0.7-canary.1

### Patch changes

- Add forward ref

----------------------------------------

TITLE: Installing @react-email/hr with npm
DESCRIPTION: Command to install the @react-email/hr component using npm package manager. The -E flag ensures an exact version is installed.

LANGUAGE: sh
CODE:
npm install @react-email/hr -E

----------------------------------------

TITLE: Installing @react-email/font with npm
DESCRIPTION: Command to install the @react-email/font component using npm package manager. The -E flag ensures an exact version is installed.

LANGUAGE: sh
CODE:
npm install @react-email/font -E

----------------------------------------

TITLE: Installing React Email Body Component with Yarn
DESCRIPTION: Command to install the @react-email/body component using Yarn package manager with exact version flag.

LANGUAGE: sh
CODE:
yarn add @react-email/body -E

----------------------------------------

TITLE: Installing @react-email/head with Yarn
DESCRIPTION: Command to install the @react-email/head package using Yarn package manager with exact version flag.

LANGUAGE: sh
CODE:
yarn add @react-email/head -E

----------------------------------------

TITLE: Installing React Email Body Component with NPM
DESCRIPTION: Command to install the @react-email/body component using NPM package manager with exact version flag.

LANGUAGE: sh
CODE:
npm install @react-email/body -E

----------------------------------------

TITLE: Using Head Component in React Email Template
DESCRIPTION: Example showing how to import and use the Head component in a React email template. Demonstrates adding a title tag within the Head component.

LANGUAGE: jsx
CODE:
import { Head } from "@react-email/head";

const Email = () => {
  return (
    <Head>
      <title>My email title</title>
    </Head>
  );
};

----------------------------------------

TITLE: Installing React Email Heading with NPM
DESCRIPTION: Command to install the @react-email/heading component using NPM package manager with exact version flag.

LANGUAGE: sh
CODE:
npm install @react-email/heading -E

----------------------------------------

TITLE: Installing React Email Heading with Yarn
DESCRIPTION: Command to install the @react-email/heading component using Yarn package manager with exact version flag.

LANGUAGE: sh
CODE:
yarn add @react-email/heading -E

----------------------------------------

TITLE: Installing @react-email/markdown with Yarn
DESCRIPTION: Command to install the @react-email/markdown component using Yarn package manager.

LANGUAGE: sh
CODE:
yarn add @react-email/markdown -E

----------------------------------------

TITLE: Using React Email Heading Component
DESCRIPTION: Example of importing and using the Heading component in a React Email template. Shows how to create an h1 heading using the 'as' prop.

LANGUAGE: jsx
CODE:
import { Heading } from "@react-email/heading";

const Email = () => {
  return <Heading as="h1">Lorem ipsum</Heading>;
};

----------------------------------------

TITLE: Installing @react-email/markdown with npm
DESCRIPTION: Command to install the @react-email/markdown component using npm package manager.

LANGUAGE: sh
CODE:
npm install @react-email/markdown -E

----------------------------------------

TITLE: Installing @react-email/hr with Yarn
DESCRIPTION: Command to install the @react-email/hr component using Yarn package manager. The -E flag ensures an exact version is installed.

LANGUAGE: sh
CODE:
yarn add @react-email/hr -E

----------------------------------------

TITLE: Installing @react-email/render Package
DESCRIPTION: Install the @react-email/render package using npm, yarn, or pnpm. This package is required for converting React components to HTML email templates.

LANGUAGE: sh
CODE:
npm install @react-email/render -E

LANGUAGE: sh
CODE:
yarn add @react-email/render -E

LANGUAGE: sh
CODE:
pnpm add @react-email/render -E

----------------------------------------

TITLE: Installing @react-email/img with npm
DESCRIPTION: Command to install the @react-email/img component using npm package manager.

LANGUAGE: sh
CODE:
npm install @react-email/img -E

----------------------------------------

TITLE: Generated HTML Output
DESCRIPTION: The HTML output generated from the React component, including DOCTYPE declaration and necessary inline styles for email compatibility.

LANGUAGE: html
CODE:
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html lang="en">
  <p style="font-size:14px;line-height:24px;margin:16px 0">Some title</p>
  <hr style="width:100%;border:none;border-top:1px solid #eaeaea" />
  <a href="https://example.com" target="_blank" style="line-height:100%;text-decoration:none;display:inline-block;max-width:100%;padding:0px 0px">
    <span>
      <!--[if mso]>
        <i style="letter-spacing: undefinedpx;mso-font-width:-100%;mso-text-raise:0" hidden>&nbsp;</i>
      <![endif]-->
    </span>
    <span style="max-width:100%;display:inline-block;line-height:120%;text-decoration:none;text-transform:none;mso-padding-alt:0px;mso-text-raise:0">Click me</span>
    <span>
      <!--[if mso]>
        <i style="letter-spacing: undefinedpx;mso-font-width:-100%" hidden>&nbsp;</i>
      <![endif]-->
    </span>
  </a>
</html>

----------------------------------------

TITLE: Using Preview Component in React Email Template
DESCRIPTION: Example of how to import and use the Preview component in a React email template. The component wraps the preview text that will be displayed in the recipient's inbox.

LANGUAGE: jsx
CODE:
import { Preview } from "@react-email/preview";

const Email = () => {
  return <Preview>Email preview text</Preview>;
};

----------------------------------------

TITLE: Installing @babel/preset-typescript for React Email Integration
DESCRIPTION: Commands for installing the @babel/preset-typescript package using different package managers (npm, yarn, pnpm). This package is required for integrating React Email into a NodeJS application.

LANGUAGE: sh
CODE:
npm install -D @babel/preset-typescript

LANGUAGE: sh
CODE:
yarn add -D @babel/preset-typescript

LANGUAGE: sh
CODE:
pnpm add -D @babel/preset-typescript

----------------------------------------

TITLE: Installing React Email Project
DESCRIPTION: Command to create a new React Email project which generates an 'emails' folder containing email templates

LANGUAGE: sh
CODE:
npx create-email

----------------------------------------

TITLE: Configuring .babelrc for React Email in NodeJS
DESCRIPTION: JSON configuration for the .babelrc file to enable @babel/preset-typescript. This configuration is necessary for integrating React Email into a NodeJS application.

LANGUAGE: json
CODE:
{
  "presets": ["@babel/preset-typescript"]
}

----------------------------------------

TITLE: Rendering React Components as HTML with @react-email/render
DESCRIPTION: Example of how to use the render function from @react-email/render to convert a React component (MyTemplate) into an HTML string. The component is passed props (firstName) during rendering.

LANGUAGE: jsx
CODE:
import { MyTemplate } from "../components/MyTemplate";
import { render } from "@react-email/render";

const html = await render(<MyTemplate firstName="Jim" />);

----------------------------------------

TITLE: Creating React Email Template
DESCRIPTION: Example of creating a React email template with a button component using React Email components. The template accepts a URL prop and renders an HTML email with a clickable button.

LANGUAGE: tsx
CODE:
import * as React from "react";
import { Html, Button } from "@react-email/components";

export function Email(props) {
  const { url } = props;

  return (
    <Html lang="en">
      <Button href={url}>Click me</Button>
    </Html>
  );
}

export default Email;

----------------------------------------

TITLE: React Email Tailwind Package Version History
DESCRIPTION: A chronological list of version changes including major updates, bug fixes, and improvements to the @react-email/tailwind package. Notable changes include tailwindcss version updates, bundle size optimization, and various bug fixes.

LANGUAGE: markdown
CODE:
# @react-email/tailwind

## 1.0.4

### Patch Changes

- 9540fc5: Fix issue with types due to improper build

## 1.0.3

### Patch Changes

- 467af4e: Use peerDependencies for react and react-dom
- b34aa90: Move react and react-dom to just dependencies for better DX

## 1.0.3-canary.1

### Patch Changes

- 467af4e: Use peerDependencies for react and react-dom

## 1.0.3-canary.0

### Patch Changes

- f7833da: Move react and react-dom to just dependencies for better DX

## 1.0.2

### Patch Changes

- 93de4ce: Fix TailwindConfig's type broken when tailwindcss is not installed on the user's project

## 1.0.1

### Patch Changes

- 6bd37a7: Fix duplicate media query styles
- 6bd37a7: Fix Promise being returned as a React Node

----------------------------------------

TITLE: Installing Dependencies for React Email and Resend
DESCRIPTION: Commands to install the required packages (@react-email/components and resend) using npm, yarn, or pnpm.

LANGUAGE: sh
CODE:
npm install resend @react-email/components

LANGUAGE: sh
CODE:
yarn add resend @react-email/components

LANGUAGE: sh
CODE:
pnpm add resend @react-email/components

----------------------------------------

TITLE: Installing @react-email/text with NPM
DESCRIPTION: Command to install the @react-email/text component using NPM package manager with exact version flag.

LANGUAGE: sh
CODE:
npm install @react-email/text -E

----------------------------------------

TITLE: Installing React Email and SendGrid Dependencies
DESCRIPTION: Commands to install the required packages (@react-email/components and @sendgrid/mail) using npm, yarn, or pnpm.

LANGUAGE: sh
CODE:
npm install @sendgrid/mail @react-email/components

LANGUAGE: sh
CODE:
yarn add @sendgrid/mail @react-email/components

LANGUAGE: sh
CODE:
pnpm add @sendgrid/mail @react-email/components

----------------------------------------

TITLE: Using React Email Button Component in JSX
DESCRIPTION: Example of how to use the Button component from React Email in a React component. It demonstrates importing the component and applying inline styles.

LANGUAGE: jsx
CODE:
import { Button } from "@react-email/components";

const Email = () => {
  return (
    <Button href="https://example.com" style={{ color: "#61dafb" }}>
      Click me
    </Button>
  );
};

----------------------------------------

TITLE: Configuring Package.json Scripts
DESCRIPTION: Adding development script to package.json for running React Email locally

LANGUAGE: json
CODE:
{
  "scripts": {
    "dev": "email dev"
  }
}

----------------------------------------

TITLE: Markdown Changelog
DESCRIPTION: Version history documentation showing patch changes and dependency updates for react-email-with-resend package from version 1.0.1 to 1.0.10.

LANGUAGE: markdown
CODE:
# react-email-with-resend

## 1.0.10

### Patch Changes

- @react-email/components@0.0.35

## 1.0.9

### Patch Changes

- @react-email/components@0.0.34

## 1.0.8

### Patch Changes

- @react-email/components@0.0.33

----------------------------------------

TITLE: Running Development Server
DESCRIPTION: Commands to start the React Email development server using different package managers

LANGUAGE: sh
CODE:
npm run dev

LANGUAGE: sh
CODE:
yarn dev

LANGUAGE: sh
CODE:
pnpm dev

LANGUAGE: sh
CODE:
bun dev

----------------------------------------

TITLE: Displaying Project Structure in Markdown
DESCRIPTION: Shows the directory structure of the benchmarking project, including key files and folders.

LANGUAGE: markdown
CODE:
```
├── package.json
├── src
|  ├── emails
|  ├── benchmark-0.0.12-vs-local-version.ts
|  ├── benchmark-with-vs-without.ts
|  └── tailwind-render.ts
├── tailwind.config.js
└── tsconfig.json
```

----------------------------------------

TITLE: Adding React Email Dev Script to package.json
DESCRIPTION: Include a script in the package.json file to run the React Email development server.

LANGUAGE: json
CODE:
{
  "scripts": {
    "dev": "email dev"
  }
}

----------------------------------------

TITLE: Running Benchmark Script in Shell
DESCRIPTION: Demonstrates how to compile and run a specific benchmark using pnpm and node.

LANGUAGE: sh
CODE:
pnpm compile && node ./dist/benchmark-with-vs-without.js

----------------------------------------

TITLE: Creating a React Email Template
DESCRIPTION: Example of a basic React Email template using the @react-email/components library. This template includes a styled button component.

LANGUAGE: jsx
CODE:
import { Button, Html } from "@react-email/components";
import * as React from "react";

export const MyEmail = () => {
  return (
    <Html>
      <Button
        href="https://example.com"
        style={{ background: "#000", color: "#fff", padding: "12px 20px" }}
      >
        Click me
      </Button>
    </Html>
  );
}

export default MyEmail;

----------------------------------------

TITLE: Defining Benchmark Scripts in package.json
DESCRIPTION: Lists the available benchmark scripts and their corresponding commands in the package.json file.

LANGUAGE: json
CODE:
"scripts": {
    "with-vs-without": "pnpm compile && node ./dist/benchmark-with-vs-without.js",
    "before-perf-vs-after-perf": "pnpm compile && node ./dist/benchmark-0.0.12-vs-local-version",

    "flamegraph-render-tailwind": "pnpm compile && node --prof ./dist/tailwind-render && node --prof-process --preprocess -j isolate*.log | flamebearer",

    "compile": "tsup src/*.ts",
    "lint": "eslint ."
}

----------------------------------------

TITLE: Configuring Package.json Scripts
DESCRIPTION: Script configuration in package.json to enable the email development server.

LANGUAGE: json
CODE:
{
  "scripts": {
    "dev": "email dev"
  }
}

----------------------------------------

TITLE: Installing Code Inline Component with Package Managers
DESCRIPTION: Instructions for installing the Code Inline component using different package managers (npm, yarn, pnpm). Offers both full components package and individual component installation options.

LANGUAGE: sh
CODE:
npm install @react-email/components -E

# or get the individual package

npm install @react-email/code-inline -E

LANGUAGE: sh
CODE:
yarn add @react-email/components -E

# or get the individual package

yarn add @react-email/code-inline -E

LANGUAGE: sh
CODE:
pnpm add @react-email/components -E

# or get the individual package

pnpm add @react-email/code-inline -E

----------------------------------------

TITLE: Creating React Email Template
DESCRIPTION: Example React Email template showing how to create a basic email with a styled button component.

LANGUAGE: jsx
CODE:
import { Button, Html } from "@react-email/components";
import * as React from "react";

export const MyEmail = () => {
  return (
    <Html>
      <Button
        href="https://example.com"
        style={{ background: "#000", color: "#fff", padding: "12px 20px" }}
      >
        Click me
      </Button>
    </Html>
  );
}

export default MyEmail;

----------------------------------------

TITLE: Using Code Inline Component in React Email
DESCRIPTION: Example of how to implement the Code Inline component in a React Email template. Shows basic usage with component import and implementation in a simple email template.

LANGUAGE: jsx
CODE:
import { CodeInline } from "@react-email/code-inline";

const Email = () => {
    return <CodeInline>@react-email/code-inline</CodeInline>;
}

----------------------------------------

TITLE: Configuring Package.json Scripts for React Email
DESCRIPTION: Add the development script to package.json to enable the email preview server.

LANGUAGE: json
CODE:
{
  "scripts": {
    "dev": "email dev"
  }
}

----------------------------------------

TITLE: Installing React Email Font Component
DESCRIPTION: Command line instructions for installing the Font component using different package managers (npm, yarn, pnpm).

LANGUAGE: sh
CODE:
npm install @react-email/components -E

# or get the individual package

npm install @react-email/font -E

LANGUAGE: sh
CODE:
yarn add @react-email/components -E

# or get the individual package

yarn add @react-email/font -E

LANGUAGE: sh
CODE:
pnpm add @react-email/components -E

# or get the individual package

pnpm add @react-email/font -E

----------------------------------------

TITLE: Cloning React Email Repository
DESCRIPTION: Command to clone the React Email repository from GitHub to local machine

LANGUAGE: bash
CODE:
git clone https://github.com/resend/react-email

----------------------------------------

TITLE: Installing React Email Components with npm
DESCRIPTION: Command to install the full @react-email/components package or the individual @react-email/html package using npm.

LANGUAGE: sh
CODE:
npm install @react-email/components -E

# or get the individual package

npm install @react-email/html -E

----------------------------------------

TITLE: Enabling PNPM Package Manager
DESCRIPTION: Commands to enable and prepare PNPM package manager using corepack

LANGUAGE: bash
CODE:
corepack enable
corepack prepare pnpm@latest --activate

----------------------------------------

TITLE: Installing React Email Markdown Component
DESCRIPTION: Commands for installing the Markdown component using different package managers (npm, yarn, pnpm). Shows both full components package and individual markdown package installation.

LANGUAGE: sh
CODE:
npm install @react-email/components -E

# or get the individual package

npm install @react-email/markdown -E

LANGUAGE: sh
CODE:
yarn add @react-email/components -E

# or get the individual package

yarn add @react-email/markdown -E

LANGUAGE: sh
CODE:
pnpm add @react-email/components -E

# or get the individual package

pnpm add @react-email/markdown -E

----------------------------------------

TITLE: Installing Project Dependencies
DESCRIPTION: Command to install all project dependencies using PNPM

LANGUAGE: bash
CODE:
pnpm install

----------------------------------------

TITLE: Installing Dependencies with Package Managers
DESCRIPTION: Commands for installing required packages mailersend and @react-email/components using different package managers (npm, yarn, pnpm).

LANGUAGE: sh
CODE:
npm install mailersend @react-email/components

LANGUAGE: sh
CODE:
yarn add mailersend @react-email/components

LANGUAGE: sh
CODE:
pnpm add mailersend @react-email/components

----------------------------------------

TITLE: Linting and Formatting React Email Project using Biome.js
DESCRIPTION: This command lints and formats the entire React Email project. It should be run from the root of the workspace to fix linting issues and format the code.

LANGUAGE: bash
CODE:
pnpm lint:fix

----------------------------------------

TITLE: Installing React Email and Nodemailer Dependencies
DESCRIPTION: This snippet shows how to install the required dependencies (@react-email/components and nodemailer) using npm, yarn, or pnpm.

LANGUAGE: sh
CODE:
npm install nodemailer @react-email/components

LANGUAGE: sh
CODE:
yarn add nodemailer @react-email/components

LANGUAGE: sh
CODE:
pnpm add nodemailer @react-email/components

----------------------------------------

TITLE: Rendering Issue Button Link in HTML/JSX
DESCRIPTION: HTML/JSX code snippet for rendering a styled button link that directs users to create a new issue in the React-Email repository. The button uses custom styling with background color and transition effects.

LANGUAGE: html
CODE:
<div className="w-full flex">
  <a
    className="border-none transition-colors text-white rounded-md px-3 items-center flex text-small h-10 transition colors"
    href="https://github.com/resend/react-email/issues/new?assignees=&labels=Type%3A+Bug&projects=&template=1.bug_report.yml"
    style={{ backgroundColor: '#238636' }}
  >
    Open new issue
  </a>
</div>

----------------------------------------

TITLE: Creating an Email Template with React Components
DESCRIPTION: This code demonstrates how to create an email template using React components from @react-email/components. It includes an HTML structure with a button component.

LANGUAGE: tsx
CODE:
import * as React from 'react';
import { Html, Button } from "@react-email/components";

export function Email(props) {
  const { url } = props;

  return (
    <Html lang="en">
      <Button href={url}>Click me</Button>
    </Html>
  );
}

----------------------------------------

TITLE: Building and Running React Email Packages
DESCRIPTION: Command for building and running all React Email packages in parallel, including a development server for the documentation website.

LANGUAGE: sh
CODE:
pnpm dev

----------------------------------------

TITLE: Installing React Email and Postmark Dependencies
DESCRIPTION: Install the required packages @react-email/components and postmark using npm, yarn, or pnpm.

LANGUAGE: sh
CODE:
npm install postmark @react-email/components

LANGUAGE: sh
CODE:
yarn add postmark @react-email/components

LANGUAGE: sh
CODE:
pnpm add postmark @react-email/components

----------------------------------------

TITLE: Installing React Email Components with NPM
DESCRIPTION: Command to install @react-email/components package using NPM package manager with exact version flag.

LANGUAGE: sh
CODE:
npm install @react-email/components -E

----------------------------------------

TITLE: Creating an Email Template with React Components
DESCRIPTION: Define an email template using React components from @react-email/components. This example creates a simple email with a button.

LANGUAGE: tsx
CODE:
import * as React from 'react';
import { Html, Button } from "@react-email/components";

export function Email(props) {
  const { url } = props;

  return (
    <Html lang="en">
      <Button href={url}>Click me</Button>
    </Html>
  );
}

----------------------------------------

TITLE: Changelog Entry - Version 0.0.13 Canary
DESCRIPTION: Documentation for canary releases of version 0.0.13, showing incremental changes before the main release.

LANGUAGE: markdown
CODE:
## 0.0.13-canary.1

### Patch Changes

- 467af4e: Use peerDependencies for react and react-dom

## 0.0.13-canary.0

### Patch Changes

- f7833da: Move react and react-dom to just dependencies for better DX

----------------------------------------

TITLE: Creating Email Template with React Components
DESCRIPTION: Example of creating an email template using React components from @react-email/components. It demonstrates how to create a simple email with a button component.

LANGUAGE: tsx
CODE:
import * as React from 'react';
import { Html, Button } from "@react-email/components";

export function Email(props) {
  const { url } = props;

  return (
    <Html lang="en">
      <Button href={url}>Click me</Button>
    </Html>
  );
}

export default Email;

----------------------------------------

TITLE: Changelog Entry - Version 0.0.12
DESCRIPTION: Documentation for version 0.0.12 and its canary release, noting React 19 compatibility updates.

LANGUAGE: markdown
CODE:
## 0.0.12

### Patch Changes

- 3caaf53: Updated peer dependencies to allow for React 19 release candidated and React 19 itself

## 0.0.12-canary.0

### Patch Changes

- a1c016b: Updated peer dependencies to allow for React 19 release candidated and React 19 itself

----------------------------------------

TITLE: Installing Dependencies for React Email and Scaleway SDK
DESCRIPTION: Install the required packages @react-email/components and @scaleway/sdk using npm, yarn, or pnpm.

LANGUAGE: sh
CODE:
npm install @scaleway/sdk @react-email/components

LANGUAGE: sh
CODE:
yarn add @scaleway/sdk @react-email/components

LANGUAGE: sh
CODE:
pnpm add @scaleway/sdk @react-email/components

----------------------------------------

TITLE: Installing React Email Dependencies
DESCRIPTION: Commands for installing project dependencies using either npm or yarn package managers.

LANGUAGE: sh
CODE:
npm install
# or
yarn

----------------------------------------

TITLE: Creating an Email Template with React Components
DESCRIPTION: Define an email template using React components from @react-email/components. This example creates a simple email with a button.

LANGUAGE: tsx
CODE:
import * as React from "react";
import { Html, Button } from "@react-email/components";

export function Email(props) {
  const { url } = props;

  return (
    <Html lang="en">
      <Button href={url}>Click me</Button>
    </Html>
  );
}

----------------------------------------

TITLE: Starting React Email Development Server
DESCRIPTION: Commands to run the development server which provides live preview functionality at localhost:3000.

LANGUAGE: sh
CODE:
npm run dev
# or
yarn dev

----------------------------------------

TITLE: Generated Plain Text Output
DESCRIPTION: The plain text output generated from the React component, providing a simple text representation of the email content.

LANGUAGE: plaintext
CODE:
Some title

---

Click me [https://example.com]

----------------------------------------

TITLE: Exporting React Email Templates
DESCRIPTION: Command to generate plain HTML files from React Email templates into an 'out' directory

LANGUAGE: sh
CODE:
npx react-email export

----------------------------------------

TITLE: Initializing NextJS Project with React Email Tailwind
DESCRIPTION: This snippet shows the command used to bootstrap the NextJS project for testing React Email Tailwind compatibility. It uses the latest version of create-next-app.

LANGUAGE: Shell
CODE:
create-next-app@latest

----------------------------------------

TITLE: Implementing Static Files in React Email Template
DESCRIPTION: Example showing how to reference static files in email templates with environment-based URL handling for production vs development.

LANGUAGE: jsx
CODE:
const baseURL = process.env.NODE_ENV === "production" ? "https://cdn.com" : "";

export default function Email(props) {
  return (
    <div>
      <img src={`${baseURL}/static/email-logo.png`} />
    </div>
  );
}

----------------------------------------

TITLE: Rendering Email Service Integration Cards in React
DESCRIPTION: A CardGroup component containing multiple Card components that link to different email service integration documentation. Each card displays the service name and a brief description of its functionality.

LANGUAGE: jsx
CODE:
<CardGroup>
  <Card title="Resend" href="/integrations/resend">
    Send email using Resend
  </Card>
  <Card title="Nodemailer" href="/integrations/nodemailer">
    Send email using Nodemailer
  </Card>
  <Card title="SendGrid" href="/integrations/sendgrid">
    Send email using SendGrid
  </Card>
  <Card title="Postmark" href="/integrations/postmark">
    Send email using Postmark
  </Card>
  <Card title="AWS SES" href="/integrations/aws-ses">
    Send email using AWS SES
  </Card>
  <Card title="MailerSend" href="/integrations/mailersend">
    Send email using AWS SES
  </Card>
  <Card title="Scaleway" href="/integrations/scaleway">
    Send email using Plunk
  </Card>
  <Card title="Plunk" href="/integrations/plunk">
    Send email using Plunk
  </Card>
</CardGroup>

----------------------------------------

TITLE: Using React Email Body Component in Email Template
DESCRIPTION: Example showing how to implement the Body component within a React email template, demonstrating integration with Html, Section, and Column components along with styling options.

LANGUAGE: jsx
CODE:
import { Html } from "@react-email/html";
import { Body } from "@react-email/body";
import { Section } from "@react-email/section";
import { Column } from "@react-email/column";

const Email = () => {
  return (
    <Html lang="en">
      <Body style={{ backgroundColor: "#61dafb" }}>
        <Section>
          <Column style={{ width: "50%" }}>{/* First column */}</Column>
          <Column style={{ width: "50%" }}>{/* Second column */}</Column>
        </Section>
      </Body>
    </Html>
  );
};

----------------------------------------

TITLE: Installing Code Block Component with Yarn
DESCRIPTION: Command to install the @react-email/code-block component using Yarn package manager

LANGUAGE: sh
CODE:
yarn add @react-email/code-block -E

----------------------------------------

TITLE: Installing React Email Components with Yarn
DESCRIPTION: Command to install @react-email/components package using Yarn package manager with exact version flag.

LANGUAGE: sh
CODE:
yarn add @react-email/components -E

----------------------------------------

TITLE: Using React Email Heading Component
DESCRIPTION: Example of importing and using the Heading component from @react-email/components in a React email template.

LANGUAGE: jsx
CODE:
import { Heading } from "@react-email/components";

const Email = () => {
  return <Heading as="h1">Lorem ipsum</Heading>;
};