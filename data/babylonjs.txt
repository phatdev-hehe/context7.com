TITLE: Creating Basic Babylon.js Scene with Sphere and Ground
DESCRIPTION: Creates a complete 3D scene with a free camera, hemispheric light, sphere, and ground plane. The scene includes camera positioning and controls, light intensity adjustment, and basic mesh creation and positioning.

LANGUAGE: javascript
CODE:
const createScene = function () {
    // Creates a basic Babylon Scene object
    const scene = new BABYLON.Scene(engine);
    // Creates and positions a free camera
    const camera = new BABYLON.FreeCamera("camera1", 
        new BABYLON.Vector3(0, 5, -10), 
        scene);
    // Targets the camera to scene origin
    camera.setTarget(BABYLON.Vector3.Zero());
    // Attaches the camera to the canvas
    camera.attachControl(canvas, true);
    // Creates a light, aiming 0,1,0
    const light = new BABYLON.HemisphericLight("light", 
        new BABYLON.Vector3(0, 1, 0), 
        scene);
    // Dim the light a small amount 0 - 1
    light.intensity = 0.7;
    // Built-in 'sphere' shape.
    const sphere = BABYLON.MeshBuilder.CreateSphere("sphere", 
        {diameter: 2, segments: 32}, 
        scene);
    // Move sphere upward 1/2 its height
    sphere.position.y = 1;
    // Built-in 'ground' shape.
    const ground = BABYLON.MeshBuilder.CreateGround("ground", 
        {width: 6, height: 6}, 
        scene);
    return scene;
}

----------------------------------------

TITLE: Basic Babylon.js Scene Template in JavaScript
DESCRIPTION: A template for creating a basic Babylon.js scene. It includes setting up a scene, camera, and lights, with a placeholder for custom code.

LANGUAGE: javascript
CODE:
var createScene = function () {
  var scene = new BABYLON.Scene(engine);

  // Add a camera to the scene and attach it to the canvas
  // Add a lights to the scene

  //Your Code

  return scene;
};

----------------------------------------

TITLE: Complete Scene Creation Function in Babylon.js
DESCRIPTION: Shows the complete createScene function that initializes and returns a scene with camera, light, and box mesh. Demonstrates simplified scene parameter usage when working with a single scene.

LANGUAGE: javascript
CODE:
const createScene = () => {
    const scene = new BABYLON.Scene(engine);

    const camera = new BABYLON.ArcRotateCamera("camera", -Math.PI / 2, Math.PI / 2.5, 3, new BABYLON.Vector3(0, 0, 0));
    camera.attachControl(canvas, true);

    const light = new BABYLON.HemisphericLight("light", new BABYLON.Vector3(0, 1, 0));

    const box = BABYLON.MeshBuilder.CreateBox("box", {});

    return scene;
}

----------------------------------------

TITLE: Creating a Basic Babylon.js Scene in HTML
DESCRIPTION: This HTML template sets up a basic Babylon.js scene with a canvas, 3D engine initialization, camera, light, and simple geometry. It includes necessary scripts, styles, and event listeners for resizing.

LANGUAGE: html
CODE:
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">

    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
        <title>Babylon Template</title>

        <style>
            html, body {
                overflow: hidden;
                width: 100%;
                height: 100%;
                margin: 0;
                padding: 0;
            }
            #renderCanvas {
                width: 100%;
                height: 100%;
                touch-action: none;
            }
        </style>

        <script src="https://cdn.babylonjs.com/babylon.js"></script>

    </head>

   <body>

	<canvas id="renderCanvas"></canvas>

	<script>
        const canvas = document.getElementById("renderCanvas"); // Get the canvas element
        const engine = new BABYLON.Engine(canvas, true); // Generate the BABYLON 3D engine
        const createScene = function () {
            // Creates a basic Babylon Scene object
            const scene = new BABYLON.Scene(engine);
            // Creates and positions a free camera
            const camera = new BABYLON.FreeCamera("camera1", 
                new BABYLON.Vector3(0, 5, -10), scene);
            // Targets the camera to scene origin
            camera.setTarget(BABYLON.Vector3.Zero());
            // This attaches the camera to the canvas
            camera.attachControl(canvas, true);
            // Creates a light, aiming 0,1,0 - to the sky
            const light = new BABYLON.HemisphericLight("light", 
                new BABYLON.Vector3(0, 1, 0), scene);
            // Dim the light a small amount - 0 to 1
            light.intensity = 0.7;
            // Built-in 'sphere' shape.
            const sphere = BABYLON.MeshBuilder.CreateSphere("sphere", 
                {diameter: 2, segments: 32}, scene);
            // Move the sphere upward 1/2 its height
            sphere.position.y = 1;
            // Built-in 'ground' shape.
            const ground = BABYLON.MeshBuilder.CreateGround("ground", 
                {width: 6, height: 6}, scene);
            return scene;
        };
        const scene = createScene(); //Call the createScene function
        // Register a render loop to repeatedly render the scene
        engine.runRenderLoop(function () {
                scene.render();
        });
        // Watch for browser/canvas resize events
        window.addEventListener("resize", function () {
                engine.resize();
        });
	</script>

   </body>

</html>

----------------------------------------

TITLE: Creating Meshes Using Deprecated Mesh Method in Babylon.js
DESCRIPTION: The older deprecated method for creating meshes using the Mesh class. Requires multiple parameters including required parameters, scene (mandatory when using optional parameters), and additional optional parameters.

LANGUAGE: javascript
CODE:
const mesh = BABYLON.Mesh.Create<MeshType>(name, required_param1, required_param2, ..., scene, optional_parameter1, ........);

----------------------------------------

TITLE: Creating Meshes with MeshBuilder in Babylon.js
DESCRIPTION: This snippet demonstrates how to create meshes using the BABYLON.MeshBuilder.Create method. It shows the basic syntax and mentions the use of options and scene parameters.

LANGUAGE: javascript
CODE:
const mesh = BABYLON.MeshBuilder.Create<MeshType>(name, options, scene);

----------------------------------------

TITLE: Ammo.js Physics Initialization
DESCRIPTION: Shows how to properly initialize Ammo.js physics engine in Babylon.js with async initialization.

LANGUAGE: javascript
CODE:
await Ammo();
scene.enablePhysics(new BABYLON.Vector3(0,-9.81, 0), new BABYLON.AmmoJSPlugin());

----------------------------------------

TITLE: Enabling Physics Engine in Babylon.js Scene
DESCRIPTION: Demonstrates how to enable and initialize a physics engine plugin in a Babylon.js scene with gravity vector configuration.

LANGUAGE: javascript
CODE:
var scene = new BABYLON.Scene(engine);
var gravityVector = new BABYLON.Vector3(0,-9.81, 0);
var physicsPlugin = new BABYLON.CannonJSPlugin();
scene.enablePhysics(gravityVector, physicsPlugin);

----------------------------------------

TITLE: Manipulating Imported Models with Promises
DESCRIPTION: Example of handling the Promise returned by ImportMeshAsync to manipulate models after they are loaded.

LANGUAGE: javascript
CODE:
BABYLON.SceneLoader.ImportMeshAsync("", "/relative path/", "myFile").then((result) => {
    result.meshes[1].position.x = 20;
    const myMesh1 = scene.getMeshByName("myMesh_1");
    myMesh1.rotation.y = Math.PI / 2;
});

----------------------------------------

TITLE: Implementing Image-Based Lighting (IBL) in Babylon.js
DESCRIPTION: Sets up Image-Based Lighting using a HDRI environment texture to provide ambient light to the scene, particularly useful for PBR materials.

LANGUAGE: javascript
CODE:
const envHdri = CubeTexture.CreateFromPrefilteredData("textures/envtext.env", scene);
envHdri.name = "env";
envHdri.gammaSpace = false;
scene.environmentTexture = envHdri;
scene.environmentIntensity = 0.04;

----------------------------------------

TITLE: Basic Model Import in Babylon.js
DESCRIPTION: Demonstrates the basic syntax for importing models using SceneLoader.ImportMeshAsync. The method accepts model name, folder path, and filename parameters.

LANGUAGE: javascript
CODE:
BABYLON.SceneLoader.ImportMeshAsync(model_name, folder_path, file_name, scene);

----------------------------------------

TITLE: Creating Basic Scene Components in Babylon.js
DESCRIPTION: Demonstrates the creation of a basic scene with an ArcRotateCamera, HemisphericLight, and a box mesh. Shows how to initialize core scene components with their required parameters.

LANGUAGE: javascript
CODE:
const scene = new BABYLON.Scene(engine);

const camera = new BABYLON.ArcRotateCamera("camera", -Math.PI / 2, Math.PI / 2.5, 3, new BABYLON.Vector3(0, 0, 0), scene);
camera.attachControl(canvas, true);

const light = new BABYLON.HemisphericLight("light", new BABYLON.Vector3(0, 1, 0), scene);

const box = BABYLON.MeshBuilder.CreateBox("box", {}, scene);

----------------------------------------

TITLE: Creating Meshes Using MeshBuilder in Babylon.js
DESCRIPTION: The modern recommended way to create meshes in Babylon.js using the MeshBuilder class. Takes a mesh type, name, options object for configuration, and an optional scene parameter that defaults to the current scene.

LANGUAGE: javascript
CODE:
const mesh = BABYLON.MeshBuilder.Create<MeshType> (name, options, scene);

----------------------------------------

TITLE: Creating a Basic Babylon.js Scene in TypeScript
DESCRIPTION: This code snippet defines a Playground class with a static CreateScene method that initializes a Babylon.js scene with essential elements. It sets up a camera, light, sphere, and ground, demonstrating the basic structure of a 3D scene in Babylon.js.

LANGUAGE: typescript
CODE:
class Playground {
    public static CreateScene(engine: BABYLON.Engine, canvas: HTMLCanvasElement): BABYLON.Scene {
        // This creates a basic Babylon Scene object (non-mesh)
        const scene = new BABYLON.Scene(engine);
        // This creates and positions a free camera (non-mesh)
        const camera = new BABYLON.FreeCamera("camera1", new BABYLON.Vector3(0, 5, -10), scene);
        // This targets the camera to scene origin
        camera.setTarget(BABYLON.Vector3.Zero());
        // This attaches the camera to the canvas
        camera.attachControl(canvas, true);
        // This creates a light, aiming 0,1,0 - to the sky (non-mesh)
        const light = new BABYLON.HemisphericLight("light1", new BABYLON.Vector3(0, 1, 0), scene);
        // Default intensity is 1. Let's dim the light a small amount
        light.intensity = 0.7;
        // Our built-in 'sphere' shape. Params: name, options, scene
        const sphere = BABYLON.MeshBuilder.CreateSphere("sphere", {diameter: 2, segments: 32}, scene);
        // Move the sphere upward 1/2 its height
        sphere.position.y = 1;
        // Our built-in 'ground' shape. Params: name, options, scene
        const ground = BABYLON.MeshBuilder.CreateGround("ground", {width: 6, height: 6}, scene);
        return scene;
    }
}

----------------------------------------

TITLE: Importing a 3D Model in Babylon.js
DESCRIPTION: An HTML template demonstrating how to import a 3D model (a box) into a Babylon.js scene. It includes scene setup, camera positioning, and lighting.

LANGUAGE: html
CODE:
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>Babylon Template</title>

    <style>
      html,
      body {
        overflow: hidden;
        width: 100%;
        height: 100%;
        margin: 0;
        padding: 0;
      }

      #renderCanvas {
        width: 100%;
        height: 100%;
        touch-action: none;
      }
    </style>

    <script src="https://cdn.babylonjs.com/babylon.js"></script>
    <script src="https://cdn.babylonjs.com/loaders/babylonjs.loaders.min.js"></script>
    <script src="https://code.jquery.com/pep/0.4.3/pep.js"></script>
  </head>

  <body>
    <canvas id="renderCanvas" touch-action="none"></canvas>
    <!-- touch-action="none" for best results from PEP -->

    <script>
      const canvas = document.getElementById("renderCanvas"); // Get the canvas element
      const engine = new BABYLON.Engine(canvas, true); // Generate the BABYLON 3D engine

      // Add your code here matching the playground format
      const createScene = function () {
        const scene = new BABYLON.Scene(engine);

        BABYLON.SceneLoader.ImportMeshAsync("", "https://assets.babylonjs.com/meshes/", "box.babylon");

        const camera = new BABYLON.ArcRotateCamera("camera", -Math.PI / 2, Math.PI / 2.5, 15, new BABYLON.Vector3(0, 0, 0));
        camera.attachControl(canvas, true);
        const light = new BABYLON.HemisphericLight("light", new BABYLON.Vector3(1, 1, 0));

        return scene;
      };

      const scene = createScene(); //Call the createScene function

      // Register a render loop to repeatedly render the scene
      engine.runRenderLoop(function () {
        scene.render();
      });

      // Watch for browser/canvas resize events
      window.addEventListener("resize", function () {
        engine.resize();
      });
    </script>
  </body>
</html>

----------------------------------------

TITLE: Creating Basic Babylon.js Scene Template in HTML
DESCRIPTION: A complete HTML template that sets up a Babylon.js environment with a canvas element, basic scene creation, camera positioning, lighting, and simple 3D objects (sphere and ground). Includes necessary viewport styling and event handling for browser resizing.

LANGUAGE: html
CODE:
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">

    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
        <title>Babylon Template</title>

        <style>
            html, body {
                overflow: hidden;
                width: 100%;
                height: 100%;
                margin: 0;
                padding: 0;
            }
            #renderCanvas {
                width: 100%;
                height: 100%;
                touch-action: none;
            }
        </style>

        <script src="https://cdn.babylonjs.com/babylon.js"></script>

    </head>

   <body>

	<canvas id="renderCanvas"></canvas>

	<script>
        const canvas = document.getElementById("renderCanvas"); // Get the canvas element
        const engine = new BABYLON.Engine(canvas, true); // Generate the BABYLON 3D engine
        const createScene = function () {
            // This creates a basic Babylon Scene object (non-mesh)
            const scene = new BABYLON.Scene(engine);
            // This creates and positions a free camera (non-mesh)
            const camera = new BABYLON.FreeCamera("camera1", new BABYLON.Vector3(0, 5, -10), scene);
            // This targets the camera to scene origin
            camera.setTarget(BABYLON.Vector3.Zero());
            // This attaches the camera to the canvas
            camera.attachControl(canvas, true);
            // This creates a light, aiming 0,1,0 - to the sky (non-mesh)
            const light = new BABYLON.HemisphericLight("light", new BABYLON.Vector3(0, 1, 0), scene);
            // Default intensity is 1. Let's dim the light a small amount
            light.intensity = 0.7;
            // Our built-in 'sphere' shape.
            const sphere = BABYLON.MeshBuilder.CreateSphere("sphere", {diameter: 2, segments: 32}, scene);
            // Move the sphere upward 1/2 its height
            sphere.position.y = 1;
            // Our built-in 'ground' shape.
            const ground = BABYLON.MeshBuilder.CreateGround("ground", {width: 6, height: 6}, scene);
            return scene;
        };
        const scene = createScene(); //Call the createScene function
        // Register a render loop to repeatedly render the scene
        engine.runRenderLoop(function () {
                scene.render();
        });
        // Watch for browser/canvas resize events
        window.addEventListener("resize", function () {
                engine.resize();
        });
	</script>

   </body>

</html>

----------------------------------------

TITLE: Defining LOD Levels with Distance Comparison in Babylon.js
DESCRIPTION: This snippet demonstrates how to create multiple levels of detail for a torus knot mesh using distance-based LOD in Babylon.js. It defines four different mesh complexities and sets LOD levels based on the distance from the camera.

LANGUAGE: javascript
CODE:
const knot00 = BABYLON.Mesh.CreateTorusKnot("knot0", 0.5, 0.2, 128, 64, 2, 3, scene);
const knot01 = BABYLON.Mesh.CreateTorusKnot("knot1", 0.5, 0.2, 32, 16, 2, 3, scene);
const knot02 = BABYLON.Mesh.CreateTorusKnot("knot2", 0.5, 0.2, 24, 12, 2, 3, scene);
const knot03 = BABYLON.Mesh.CreateTorusKnot("knot3", 0.5, 0.2, 16, 8, 2, 3, scene);

knot00.addLODLevel(15, knot01);
knot00.addLODLevel(30, knot02);
knot00.addLODLevel(45, knot03);
knot00.addLODLevel(55, null);

----------------------------------------

TITLE: Creating Animation in Babylon.js
DESCRIPTION: Demonstrates how to create a new Animation object in Babylon.js, specifying name, property, frames per second, property type, and loop mode.

LANGUAGE: javascript
CODE:
const myAnim = new BABYLON.Animation(name, property, frames_per_second, property_type, loop_mode);

----------------------------------------

TITLE: Creating a 3D Model Programmatically in Babylon.js
DESCRIPTION: An HTML template showing how to create a 3D model (a box) programmatically in a Babylon.js scene. It includes scene setup, camera positioning, and lighting.

LANGUAGE: html
CODE:
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>Babylon Template</title>

    <style>
      html,
      body {
        overflow: hidden;
        width: 100%;
        height: 100%;
        margin: 0;
        padding: 0;
      }

      #renderCanvas {
        width: 100%;
        height: 100%;
        touch-action: none;
      }
    </style>

    <script src="https://cdn.babylonjs.com/babylon.js"></script>
    <script src="https://cdn.babylonjs.com/loaders/babylonjs.loaders.min.js"></script>
    <script src="https://code.jquery.com/pep/0.4.3/pep.js"></script>
  </head>

  <body>
    <canvas id="renderCanvas" touch-action="none"></canvas>
    <!-- touch-action="none" for best results from PEP -->

    <script>
      const canvas = document.getElementById("renderCanvas"); // Get the canvas element
      const engine = new BABYLON.Engine(canvas, true); // Generate the BABYLON 3D engine

      // Add your code here matching the playground format
      const createScene = function () {
        const scene = new BABYLON.Scene(engine);

        BABYLON.MeshBuilder.CreateBox("box", {});

        const camera = new BABYLON.ArcRotateCamera("camera", -Math.PI / 2, Math.PI / 2.5, 15, new BABYLON.Vector3(0, 0, 0));
        camera.attachControl(canvas, true);
        const light = new BABYLON.HemisphericLight("light", new BABYLON.Vector3(1, 1, 0));

        return scene;
      };

      const scene = createScene(); //Call the createScene function

      // Register a render loop to repeatedly render the scene
      engine.runRenderLoop(function () {
        scene.render();
      });

      // Watch for browser/canvas resize events
      window.addEventListener("resize", function () {
        engine.resize();
      });
    </script>
  </body>
</html>

----------------------------------------

TITLE: Creating Basic PBR Metallic Roughness Material
DESCRIPTION: Demonstrates how to create and configure a basic PBR metallic roughness material with base color, metallic, and roughness properties.

LANGUAGE: javascript
CODE:
const pbr = new BABYLON.PBRMetallicRoughnessMaterial("pbr", scene);
sphere.material = pbr;
pbr.baseColor = new BABYLON.Color3(1.0, 0.766, 0.336);
pbr.metallic = 0;
pbr.roughness = 1.0;

----------------------------------------

TITLE: Creating a Simple Immersive AR Scene in Babylon.js
DESCRIPTION: This snippet demonstrates how to create a basic immersive AR scene using Babylon.js. It sets up a camera, light, and a sphere, then initializes the WebXR experience for AR.

LANGUAGE: javascript
CODE:
var createScene = async function () {
  var scene = new BABYLON.Scene(engine);
  var camera = new BABYLON.FreeCamera("camera1", new BABYLON.Vector3(0, 5, -10), scene);
  camera.setTarget(BABYLON.Vector3.Zero());
  camera.attachControl(canvas, true);
  var light = new BABYLON.HemisphericLight("light1", new BABYLON.Vector3(0, 1, 0), scene);
  light.intensity = 0.7;
  var sphere = BABYLON.MeshBuilder.CreateSphere("sphere1", { segments: 16, diameter: 2 }, scene);
  sphere.position.y = 2;
  sphere.position.z = 5;

  const xr = await scene.createDefaultXRExperienceAsync({
    // ask for an ar-session
    uiOptions: {
      sessionMode: "immersive-ar",
    },
  });

  return scene;
};

----------------------------------------

TITLE: Initializing Firework Rocket Emitter in BabylonJS
DESCRIPTION: Creates the initial rocket emitter for fireworks with randomized position and height calculations. Sets up the base mesh and configures timing delays for the firework launch.

LANGUAGE: javascript
CODE:
const sphere = MeshBuilder.CreateSphere("rocket", { segments: 4, diameter: 1 }, scene);
sphere.isVisible = false;
let randPos = Math.random() * 10;
sphere.position = new Vector3(scene.getTransformNodeByName("fireworks").getAbsolutePosition().x + randPos * -1, scene.getTransformNodeByName("fireworks").getAbsolutePosition().y, scene.getTransformNodeByName("fireworks").getAbsolutePosition().z);
this._emitter = sphere;
this._height = sphere.position.y + Math.random() * (15 + 4) + 4;
this._delay = (Math.random() * i + 1) * 60;

----------------------------------------

TITLE: Initializing Game in Babylon.js
DESCRIPTION: Sets up lights, shadow generator, and creates the player in the game scene.

LANGUAGE: typescript
CODE:
private async _initializeGameAsync(scene): Promise<void> {
    //temporary light to light the entire scene
    var light0 = new HemisphericLight("HemiLight", new Vector3(0, 1, 0), scene);

    const light = new PointLight("sparklight", new Vector3(0, 0, 0), scene);
    light.diffuse = new Color3(0.08627450980392157, 0.10980392156862745, 0.15294117647058825);
    light.intensity = 35;
    light.radius = 1;

    const shadowGenerator = new ShadowGenerator(1024, light);
    shadowGenerator.darkness = 0.4;

    //Create the player
    this._player = new Player(this.assets, scene, shadowGenerator); //dont have inputs yet so we dont need to pass it in
}

----------------------------------------

TITLE: Attaching WebVR Control with Click Handler
DESCRIPTION: Demonstrates how to attach WebVR control after user interaction, which is required by most browsers for security reasons.

LANGUAGE: javascript
CODE:
scene.onPointerDown = function () {
  scene.onPointerDown = undefined;
  camera.attachControl(canvas, true);
};

----------------------------------------

TITLE: Creating Animation Object in Babylon.js
DESCRIPTION: This snippet demonstrates how to create a new Animation object in Babylon.js. It defines an animation that changes the x-position of an object over time, using a specific frame rate and animation type.

LANGUAGE: javascript
CODE:
const frameRate = 10;

const xSlide = new BABYLON.Animation("xSlide", "position.x", frameRate, BABYLON.Animation.ANIMATIONTYPE_FLOAT, BABYLON.Animation.ANIMATIONLOOPMODE_CYCLE);

----------------------------------------

TITLE: Using Custom Loading Screen with Engine
DESCRIPTION: Example showing how to integrate a custom loading screen with the Babylon.js engine.

LANGUAGE: javascript
CODE:
var loadingScreen = new CustomLoadingScreen("I'm loading!!");
engine.loadingScreen = loadingScreen;
engine.displayLoadingUI();

/*
 * create your scene over here
 */

engine.hideLoadingUI();

----------------------------------------

TITLE: Setting up Complete WebXR Scene with TypeScript
DESCRIPTION: Implements a complete WebXR scene setup using TypeScript, including camera, lighting, and WebXR configuration.

LANGUAGE: typescript
CODE:
import "./style.css";

import { ArcRotateCamera } from "@babylonjs/core/Cameras/arcRotateCamera.js";
import { Color3 } from "@babylonjs/core/Maths/math.color.js";
import { Engine } from "@babylonjs/core/Engines/engine.js";
import { EnvironmentHelper } from "@babylonjs/core/Helpers/environmentHelper.js";
import { HemisphericLight } from "@babylonjs/core/Lights/hemisphericLight.js";
import { Mesh } from "@babylonjs/core/Meshes/mesh";
import { MeshBuilder } from "@babylonjs/core/Meshes/meshBuilder.js";
import { Scene } from "@babylonjs/core/scene.js";
import { StandardMaterial } from "@babylonjs/core/Materials/standardMaterial.js";
import { Vector3 } from "@babylonjs/core/Maths/math.vector.js";
import { WebXRDefaultExperience } from "@babylonjs/core/XR/webXRDefaultExperience.js";

import "@babylonjs/core/Materials/Textures/Loaders";
import "@babylonjs/loaders/glTF";
import "@babylonjs/core/Materials/Node/Blocks";

const app = document.querySelector<HTMLDivElement>("#app");
const canvas = document.createElement("canvas");
app?.appendChild(canvas);

const babylonEngine = new Engine(canvas, true);
const scene = new Scene(babylonEngine);

new HemisphericLight("light1", new Vector3(0, 2, 0), scene);

const envHelper = new EnvironmentHelper(
  {
    skyboxSize: 30,
    groundColor: new Color3(0.5, 0.5, 0.5),
  },
  scene,
);

const camera = new ArcRotateCamera("Camera", -(Math.PI / 4) * 3, Math.PI / 4, 10, new Vector3(0, 0, 0), scene);
camera.attachControl(true);

const sphereD = 1.0;
const sphere = MeshBuilder.CreateSphere("xSphere", { segments: 16, diameter: sphereD }, scene);
sphere.position.x = 0;
sphere.position.y = sphereD * 2;
sphere.position.z = 0;
const rMat = new StandardMaterial("matR", scene);
rMat.diffuseColor = new Color3(1.0, 0, 0);
sphere.material = rMat;

WebXRDefaultExperience.CreateAsync(scene, {
  floorMeshes: [envHelper?.ground as Mesh],
  optionalFeatures: true,
});

babylonEngine.runRenderLoop(() => {
  scene.render();
});

----------------------------------------

TITLE: Implementing WebXR Polyfill in Babylon.js
DESCRIPTION: Code to implement WebXR polyfill for backwards compatibility with browsers that only support WebVR. Includes promise-based initialization and scene setup.

LANGUAGE: javascript
CODE:
const xrPolyfillPromise = new Promise((resolve) => {
    if (navigator.xr) {
        return resolve();
    }
    if (window.WebXRPolyfill) {
        new WebXRPolyfill();
        return resolve();
    } else {
        const url = "https://cdn.jsdelivr.net/npm/webxr-polyfill@latest/build/webxr-polyfill.js";
        const s = document.createElement("script");
        s.src = url;
        document.head.appendChild(s);
        s.onload = () => {
            new WebXRPolyfill();
            resolve();
        };
    }
});

----------------------------------------

TITLE: Including Babylon.js and glTF 1.0 File Loader Scripts
DESCRIPTION: HTML script tags to include Babylon.js core and the glTF 1.0-only File Loader.

LANGUAGE: html
CODE:
<script src="babylon.js"></script>
<script src="babylon.glTF1FileLoader.js"></script>

----------------------------------------

TITLE: Creating Animatable Object in Babylon.js
DESCRIPTION: Demonstrates how to create an Animatable object in Babylon.js, which can be used to control the state of an animation after it has begun.

LANGUAGE: javascript
CODE:
const myAnimatable = myscene.beginAnimation(target, from, to, true);

----------------------------------------

TITLE: Enabling Wireframe Mode for a Material in Babylon.js
DESCRIPTION: Sets the wireframe property of a material to true, causing the mesh to be rendered as a wireframe.

LANGUAGE: javascript
CODE:
materialSphere1.wireframe = true;

----------------------------------------

TITLE: Initializing InputController in Babylon.js
DESCRIPTION: Creates an InputController class to handle keyboard inputs for character movement. It sets up an action manager to register keydown and keyup events, storing the state in an inputMap.

LANGUAGE: typescript
CODE:
constructor(scene: Scene) {
    scene.actionManager = new ActionManager(scene);

    this.inputMap = {};
    scene.actionManager.registerAction(new ExecuteCodeAction(ActionManager.OnKeyDownTrigger, (evt) => {
        this.inputMap[evt.sourceEvent.key] = evt.sourceEvent.type == "keydown";
    }));
    scene.actionManager.registerAction(new ExecuteCodeAction(ActionManager.OnKeyUpTrigger, (evt) => {
        this.inputMap[evt.sourceEvent.key] = evt.sourceEvent.type == "keydown";
    }));

    scene.onBeforeRenderObservable.add(() => {
        this._updateFromKeyboard();
    });
}

----------------------------------------

TITLE: Clear Coat Configuration in PBR
DESCRIPTION: Configure clear coat properties for automotive-style finishes

LANGUAGE: javascript
CODE:
const pbr = new BABYLON.PBRMaterial("pbr", scene);
pbr.metallic = 0.0;
pbr.roughness = 1.0;

pbr.clearCoat.isEnabled = true;
pbr.clearCoat.intensity = 0.5;

----------------------------------------

TITLE: Creating a Basic Babylon.js Scene in JavaScript
DESCRIPTION: This snippet demonstrates how to create a basic Babylon.js scene using the global BABYLON namespace. It includes creating a scene, camera, and light.

LANGUAGE: javascript
CODE:
var scene = new BABYLON.Scene(engine);
var camera = new BABYLON.FreeCamera("camera1", new BABYLON.Vector3(0, 5, -10));
var light = new BABYLON.HemisphericLight("light", new BABYLON.Vector3(0, 1, 0));

----------------------------------------

TITLE: Creating Parametric Meshes with MeshBuilder in Babylon.js
DESCRIPTION: This snippet demonstrates how to create parametric meshes using the MeshBuilder.Create and MeshBuilder.Extrude methods in Babylon.js. It allows for the creation of various mesh types with customizable options.

LANGUAGE: javascript
CODE:
const mesh = BABYLON.MeshBuilder.Create<MeshType>(name, options, scene);
const mesh = BABYLON.MeshBuilder.Extrude<MeshType>(name, options, scene);

----------------------------------------

TITLE: Creating a ShaderMaterial in Babylon.js
DESCRIPTION: This snippet demonstrates how to create a ShaderMaterial object in Babylon.js. It shows the constructor parameters and options for defining attributes, uniforms, samplers, and other properties.

LANGUAGE: javascript
CODE:
const myShaderMaterial = new BABYLON.ShaderMaterial("shader", scene, "./COMMON_NAME",
{
  attributes: ["position", "normal", "uv"],
  uniforms: ["world", "worldView", "worldViewProjection", "view", "projection", "time", "direction" ],
  samplers: ["textureSampler"],
  defines: ["MyDefine"],
  needAlphaBlending: true,
  needAlphaTesting: true
});

----------------------------------------

TITLE: Handling Pointer Events in Babylon.js
DESCRIPTION: This code template shows how to set up an observer for various pointer events in a Babylon.js scene. It includes handlers for pointer down, up, move, wheel, pick, tap, and double-tap events.

LANGUAGE: javascript
CODE:
scene.onPointerObservable.add((pointerInfo) => {
  switch (pointerInfo.type) {
    case BABYLON.PointerEventTypes.POINTERDOWN:
      console.log("POINTER DOWN");
      break;
    case BABYLON.PointerEventTypes.POINTERUP:
      console.log("POINTER UP");
      break;
    case BABYLON.PointerEventTypes.POINTERMOVE:
      console.log("POINTER MOVE");
      break;
    case BABYLON.PointerEventTypes.POINTERWHEEL:
      console.log("POINTER WHEEL");
      break;
    case BABYLON.PointerEventTypes.POINTERPICK:
      console.log("POINTER PICK");
      break;
    case BABYLON.PointerEventTypes.POINTERTAP:
      console.log("POINTER TAP");
      break;
    case BABYLON.PointerEventTypes.POINTERDOUBLETAP:
      console.log("POINTER DOUBLE-TAP");
      break;
  }
});

----------------------------------------

TITLE: Setting up Player Camera Hierarchy in Babylon.js
DESCRIPTION: This function creates a camera hierarchy for a third-person view, including a root transform node, a tilt node, and a UniversalCamera. It sets up the initial position, rotation, and locked target for the camera.

LANGUAGE: javascript
CODE:
private _setupPlayerCamera(): UniversalCamera {
    //root camera parent that handles positioning of the camera to follow the player
    this._camRoot = new TransformNode("root");
    this._camRoot.position = new Vector3(0, 0, 0); //initialized at (0,0,0)
    //to face the player from behind (180 degrees)
    this._camRoot.rotation = new Vector3(0, Math.PI, 0);

    //rotations along the x-axis (up/down tilting)
    let yTilt = new TransformNode("ytilt");
    //adjustments to camera view to point down at our player
    yTilt.rotation = Player.ORIGINAL_TILT;
    this._yTilt = yTilt;
    yTilt.parent = this._camRoot;

    //our actual camera that's pointing at our root's position
    this.camera = new UniversalCamera("cam", new Vector3(0, 0, -30), this.scene);
    this.camera.lockedTarget = this._camRoot.position;
    this.camera.fov = 0.47350045992678597;
    this.camera.parent = yTilt;

    this.scene.activeCamera = this.camera;
    return this.camera;
}

----------------------------------------

TITLE: Creating Basic Scene with Default Camera and Environment
DESCRIPTION: Demonstrates the quickest way to set up a basic scene with default camera, lighting and environment settings.

LANGUAGE: javascript
CODE:
scene.createDefaultCameraOrLight(true, true, true);
scene.createDefaultEnvironment();

----------------------------------------

TITLE: Initializing Basic WebXR Scene in Babylon.js
DESCRIPTION: Creates a basic WebXR experience in a Babylon.js scene using the default XR experience helper.

LANGUAGE: javascript
CODE:
const xrHelper = await scene.createDefaultXRExperienceAsync();

----------------------------------------

TITLE: Installing Babylon.js Core Package
DESCRIPTION: Install the Babylon.js core package using npm.

LANGUAGE: bash
CODE:
npm install @babylonjs/core

----------------------------------------

TITLE: Importing and Scaling a 3D Model in Babylon.js
DESCRIPTION: This snippet demonstrates how to import a 3D model (Yeti) into a Babylon.js scene and scale it down.

LANGUAGE: javascript
CODE:
BABYLON.SceneLoader.ImportMesh("", Assets.meshes.Yeti.rootUrl, Assets.meshes.Yeti.filename, scene, function (newMeshes) {
    newMeshes[0].scaling = new BABYLON.Vector3(0.1, 0.1, 0.1);
});

----------------------------------------

TITLE: Using Async/Await with Promises in Babylon.js
DESCRIPTION: This snippet demonstrates how to use async/await syntax with promises in Babylon.js, creating a VR experience and loading an asset.

LANGUAGE: javascript
CODE:
const main = async function () {
  const scene = new BABYLON.Scene(engine);
  const helper = scene.createDefaultVRExperience();
  const supported = await helper.webVRCamera.useStandingMatrixAsync();
  console.log(supported);
  await BABYLON.SceneLoader.AppendAsync("https://playground.babylonjs.com/scenes/", "skull.babylon", scene);
};

----------------------------------------

TITLE: Main Loop for Physics Character Controller in Babylon.js
DESCRIPTION: This snippet shows the main loop for updating a physics character controller in Babylon.js. It includes checking support, setting velocity, integrating movement, and getting the new position.

LANGUAGE: javascript
CODE:
const support = characterController.checkSupport(dt, down);
const desiredLinearVelocity = getDesiredVelocity(dt, support, characterCurrentOrientation, characterCurrentVelocity);
characterController.setVelocity(desiredLinearVelocity);
characterController.integrate(dt, support, characterGravity);
const newPosition = characterController.getPosition();

----------------------------------------

TITLE: Applying ZXY World Space Rotations in Babylon.js
DESCRIPTION: Demonstrates how to apply rotations in ZXY order using world space axes in Babylon.js. This produces the same orientation as the YXZ local space method.

LANGUAGE: javascript
CODE:
mesh.rotate(BABYLON.Axis.Z, gamma, BABYLON.Space.WORLD);
mesh.rotate(BABYLON.Axis.X, alpha, BABYLON.Space.WORLD);
mesh.rotate(BABYLON.Axis.Y, beta, BABYLON.Space.WORLD);

----------------------------------------

TITLE: Creating a Custom Particle Effect in Babylon.js
DESCRIPTION: Example of creating a custom particle effect using a custom shader and passing uniforms.

LANGUAGE: javascript
CODE:
var customEffect = engine.createEffectForParticles("myParticle", [time]);

var time = 0;
var order = 0.1;

customEffect.onBind = function () {
  customEffect.setFloat("time", time);

  time += order;

  if (time > 100 || time < 0) {
    order *= -1;
  }
};

----------------------------------------

TITLE: Creating a Point Light in Babylon.js
DESCRIPTION: Demonstrates how to create a point light in a Babylon.js scene. A point light emits light in all directions from a single point in space.

LANGUAGE: javascript
CODE:
const light = new BABYLON.PointLight("pointLight", new BABYLON.Vector3(1, 10, 1), scene);

----------------------------------------

TITLE: Loading Animated Character Model in BabylonJS
DESCRIPTION: Demonstrates how to import a pre-animated character model using SceneLoader.ImportMeshAsync(). The code loads the 'Dude' model, scales it down to 25% of original size, and starts its walking animation using scene.beginAnimation().

LANGUAGE: javascript
CODE:
BABYLON.SceneLoader.ImportMeshAsync("him" /* mesh name */, "/scenes/Dude/" /* path to model */, "Dude.babylon" /* model file */, scene).then((result) => {
    var dude = result.meshes[0];
    dude.scaling = new BABYLON.Vector3(0.25, 0.25, 0.25);
                
    scene.beginAnimation(result.skeletons[0], 0, 100, true, 1.0);
});

----------------------------------------

TITLE: Installing Babylon.js via NPM
DESCRIPTION: Command to install the latest version of Babylon.js using NPM.

LANGUAGE: bash
CODE:
npm install --save babylonjs

----------------------------------------

TITLE: Calculating Character Movement Direction in Babylon.js
DESCRIPTION: Calculates the character's movement direction based on camera orientation and input. Normalizes the movement vector and clamps the input magnitude to prevent faster diagonal movement.

LANGUAGE: typescript
CODE:
this._moveDirection = Vector3.Zero();
this._h = this._input.horizontal;
this._v = this._input.vertical;

let fwd = this._camRoot.forward;
let right = this._camRoot.right;
let correctedVertical = fwd.scaleInPlace(this._v);
let correctedHorizontal = right.scaleInPlace(this._h);

let move = correctedHorizontal.addInPlace(correctedVertical);

this._moveDirection = new Vector3((move).normalize().x, 0, (move).normalize().z);

let inputMag = Math.abs(this._h) + Math.abs(this._v);
if (inputMag < 0) {
    this._inputAmt = 0;
} else if (inputMag > 1) {
    this._inputAmt = 1;
} else {
    this._inputAmt = inputMag;
}

this._moveDirection = this._moveDirection.scaleInPlace(this._inputAmt * Player.PLAYER_SPEED);

----------------------------------------

TITLE: Setting Up PBR Specular Glossiness Material
DESCRIPTION: Demonstrates the creation and configuration of a PBR specular glossiness material with diffuse color, specular color, and glossiness properties.

LANGUAGE: javascript
CODE:
const pbr = new BABYLON.PBRSpecularGlossinessMaterial("pbr", scene);
pbr.diffuseColor = new BABYLON.Color3(1.0, 0.766, 0.336);
pbr.specularColor = new BABYLON.Color3(1.0, 0.766, 0.336);
pbr.glossiness = 0.4;
pbr.environmentTexture = BABYLON.CubeTexture.CreateFromPrefilteredData("/textures/environment.dds", scene);

----------------------------------------

TITLE: Creating Fullscreen GUI in Babylon.js
DESCRIPTION: This snippet demonstrates how to create a fullscreen GUI using AdvancedDynamicTexture in Babylon.js.

LANGUAGE: JavaScript
CODE:
const advancedTexture = BABYLON.GUI.AdvancedDynamicTexture.CreateFullscreenUI("myUI");

----------------------------------------

TITLE: Enabling Hit Testing in WebXR with Babylon.js
DESCRIPTION: This code snippet shows how to enable hit testing in a WebXR experience using Babylon.js. It demonstrates how to create a visual indicator for hit test results.

LANGUAGE: javascript
CODE:
const hitTest = featuresManager.enableFeature(BABYLON.WebXRHitTest, "latest");

const dot = BABYLON.SphereBuilder.CreateSphere(
  "dot",
  {
    diameter: 0.05,
  },
  scene
);
dot.isVisible = false;
hitTest.onHitTestResultObservable.add((results) => {
  if (results.length) {
    dot.isVisible = true;
    results[0].transformationMatrix.decompose(dot.scaling, dot.rotationQuaternion, dot.position);
  } else {
    dot.isVisible = false;
  }
});

----------------------------------------

TITLE: Modifying and Downloading Gaussian Splatting Data
DESCRIPTION: Demonstrates how to modify existing Gaussian Splatting data in memory, update the visualization, and download the modified data as a new file.

LANGUAGE: javascript
CODE:
function modifyMesh(gs) {
    // Get GS data
    const arrayBuffer = gs.splatsData;
    // Make a float32 access. A splat is 32bytes (8floats)
    var positions = new Float32Array(arrayBuffer);
    // Do a change to the first 30000 splats
    for (let i = 0; i < 30000; i++) {
        // Translate splats a little. GS shown here is upside down
        positions[i * 8 + 1] -= 2.0;
    }
    // Make that change visible
    gs.updateData(arrayBuffer);
    // Create a blob with array buffer and download it. It can be used directly with the sandbox
    const blob = new Blob([arrayBuffer], { type: 'application/octet-stream' });
    BABYLON.Tools.DownloadBlob(blob, "newGSplat.splat");
}

----------------------------------------

TITLE: Creating Mesh Impostor in Babylon.js
DESCRIPTION: This snippet shows how to create a mesh impostor in Babylon.js. It applies a MeshImpostor to a mesh, allowing for exact collision detection with the object.

LANGUAGE: javascript
CODE:
mesh.physicsImpostor = new BABYLON.PhysicsImpostor(mesh, BABYLON.PhysicsImpostor.MeshImpostor, {mass: 0});

----------------------------------------

TITLE: Basic Physics Impostor Creation
DESCRIPTION: Shows how to create basic physics impostors for sphere and ground objects with mass and restitution properties.

LANGUAGE: javascript
CODE:
sphere.physicsImpostor = new BABYLON.PhysicsImpostor(sphere, BABYLON.PhysicsImpostor.SphereImpostor, { mass: 1, restitution: 0.9 }, scene);
ground.physicsImpostor = new BABYLON.PhysicsImpostor(ground, BABYLON.PhysicsImpostor.BoxImpostor, { mass: 0, restitution: 0.9 }, scene);

----------------------------------------

TITLE: Loading and Animating a Boned Mesh in Babylon.js
DESCRIPTION: Demonstrates how to load a boned mesh and start its skeleton animation.

LANGUAGE: javascript
CODE:
BABYLON.SceneLoader.ImportMesh("him", "Scenes/Dude/", "Dude.babylon", scene, function (newMeshes, particleSystems, skeletons) {
  const dude = newMeshes[0];

  dude.rotation.y = Math.PI;
  dude.position = new BABYLON.Vector3(0, 0, -80);

  scene.beginAnimation(skeletons[0], 0, 100, true, 1.0);
});

----------------------------------------

TITLE: Configuring Local Draco Decoder Files in TypeScript
DESCRIPTION: TypeScript code to configure the DracoDecoder to use local files instead of CDN, useful for GDPR compliance.

LANGUAGE: typescript
CODE:
DracoDecoder.DefaultConfiguration = {
  wasmUrl: "/babylon-draco-files/draco_wasm_wrapper_gltf.js",
  wasmBinaryUrl: "/babylon-draco-files/draco_decoder_gltf.wasm",
  fallbackUrl: "/babylon-draco-files/draco_decoder_gltf.js",
};

----------------------------------------

TITLE: Input Manager Configuration in Babylon.js
DESCRIPTION: Shows how to access and configure the camera input manager for customizing input sensitivity.

LANGUAGE: javascript
CODE:
const camera = new BABYLON.FreeCamera("sceneCamera", new BABYLON.Vector3(0, 1, -15), scene);
camera.inputs.add(new BABYLON.FreeCameraGamepadInput());
camera.inputs.attached.gamepad.gamepadAngularSensibility = 250;

----------------------------------------

TITLE: Creating Split Layout HTML Structure
DESCRIPTION: HTML structure for creating a split layout with a canvas for BabylonJS rendering and an instructions panel. The canvas includes touch-action="none" for proper touch input handling with PEP (Pointer Events Polyfill).

LANGUAGE: html
CODE:
<div id = "holder">
        <canvas id="renderCanvas" touch-action="none"></canvas> <!-- touch-action="none" for best results from PEP -->
</div>
<div id = "instructions">
    <br/>
    <h2>Instructions</h2>
    <br/>
    Instructions Instructions Instructions Instructions Instructions 
    Instructions Instructions Instructions Instructions Instructions 
</div>

----------------------------------------

TITLE: Loading Text and Binary Files in Babylon.js
DESCRIPTION: Demonstrates creating tasks for loading text and binary files with success callbacks.

LANGUAGE: javascript
CODE:
const textTask = assetsManager.addTextFileTask("text task", "msg.txt");
textTask.onSuccess = function (task) {
  console.log(task.text);
};

const binaryTask = assetsManager.addBinaryFileTask("binary task", "grass.jpg");
binaryTask.onSuccess = function (task) {
  // Do something with task.data
};

----------------------------------------

TITLE: Configuring Exponential Shadow Map
DESCRIPTION: Sets up exponential shadow mapping for improved shadow quality.

LANGUAGE: javascript
CODE:
shadowGenerator.useExponentialShadowMap = true;

----------------------------------------

TITLE: Comprehensive Default Rendering Pipeline Configuration in Babylon.js
DESCRIPTION: This extensive code example demonstrates a complete configuration of the default rendering pipeline in Babylon.js. It includes settings for MSAA, image processing, bloom, chromatic aberration, depth of field, FXAA, glow layer, grain, and sharpening effects.

LANGUAGE: javascript
CODE:
var defaultPipeline = new BABYLON.DefaultRenderingPipeline(
    "DefaultRenderingPipeline",
    true, // is HDR?
    scene,
    scene.cameras
);
if (defaultPipeline.isSupported) {
    /* MSAA */
    defaultPipeline.samples = 1; // 1 by default
    /* imageProcessing */
    defaultPipeline.imageProcessingEnabled = true; //true by default
    if (defaultPipeline.imageProcessingEnabled) {
        defaultPipeline.imageProcessing.contrast = 1; // 1 by default
        defaultPipeline.imageProcessing.exposure = 1; // 1 by default
        /* color grading */
        defaultPipeline.imageProcessing.colorGradingEnabled = false; // false by default
        if (defaultPipeline.imageProcessing.colorGradingEnabled) {
            // using .3dl (best) :
            defaultPipeline.imageProcessing.colorGradingTexture = new BABYLON.ColorGradingTexture("textures/LateSunset.3dl", scene);
            // using .png :
            /*
            var colorGradingTexture = new BABYLON.Texture("textures/colorGrade-highContrast.png", scene, true, false);
            colorGradingTexture.wrapU = BABYLON.Texture.CLAMP_ADDRESSMODE;
            colorGradingTexture.wrapV = BABYLON.Texture.CLAMP_ADDRESSMODE;                
            defaultPipeline.imageProcessing.colorGradingTexture = colorGradingTexture;
            defaultPipeline.imageProcessing.colorGradingWithGreenDepth = false;
            */
        }
        /* color curves */
        defaultPipeline.imageProcessing.colorCurvesEnabled = false; // false by default
        if (defaultPipeline.imageProcessing.colorCurvesEnabled) {
            var curve = new BABYLON.ColorCurves();
            curve.globalDensity = 0; // 0 by default
            curve.globalExposure = 0; // 0 by default
            curve.globalHue = 30; // 30 by default
            curve.globalSaturation = 0; // 0 by default
            curve.highlightsDensity = 0; // 0 by default
            curve.highlightsExposure = 0; // 0 by default
            curve.highlightsHue = 30; // 30 by default
            curve.highlightsSaturation = 0; // 0 by default
            curve.midtonesDensity = 0; // 0 by default
            curve.midtonesExposure = 0; // 0 by default
            curve.midtonesHue = 30; // 30 by default
            curve.midtonesSaturation = 0; // 0 by default
            curve.shadowsDensity = 0; // 0 by default
            curve.shadowsExposure = 0; // 0 by default
            curve.shadowsHue = 30; // 30 by default
            curve.shadowsDensity = 80;
            curve.shadowsSaturation = 0; // 0 by default;
            defaultPipeline.imageProcessing.colorCurves = curve;
        }
    }
    /* bloom */
    defaultPipeline.bloomEnabled = false; // false by default
    if (defaultPipeline.bloomEnabled) {
        defaultPipeline.bloomKernel = 64; // 64 by default
        defaultPipeline.bloomScale = 0.5; // 0.5 by default
        defaultPipeline.bloomThreshold = 0.9; // 0.9 by default
        defaultPipeline.bloomWeight = 0.15; // 0.15 by default
    }
    /* chromatic abberation */
    defaultPipeline.chromaticAberrationEnabled = false; // false by default
    if (defaultPipeline.chromaticAberrationEnabled) {
        defaultPipeline.chromaticAberration.aberrationAmount = 30; // 30 by default
        defaultPipeline.chromaticAberration.adaptScaleToCurrentViewport = false; // false by default
        defaultPipeline.chromaticAberration.alphaMode = 0; // 0 by default
        defaultPipeline.chromaticAberration.alwaysForcePOT = false; // false by default
        defaultPipeline.chromaticAberration.enablePixelPerfectMode = false; // false by default
        defaultPipeline.chromaticAberration.forceFullscreenViewport = true; // true by default
    }
    /* DOF */
    defaultPipeline.depthOfFieldEnabled = false; // false by default
    if (defaultPipeline.depthOfFieldEnabled && defaultPipeline.depthOfField.isSupported) {
        defaultPipeline.depthOfFieldBlurLevel = 0; // 0 by default
        defaultPipeline.depthOfField.fStop = 1.4; // 1.4 by default
        defaultPipeline.depthOfField.focalLength = 50; // 50 by default, mm
        defaultPipeline.depthOfField.focusDistance = 2000; // 2000 by default, mm
        defaultPipeline.depthOfField.lensSize = 50; // 50 by default
    }
    /* FXAA */
    defaultPipeline.fxaaEnabled = false; // false by default
    if (defaultPipeline.fxaaEnabled) {
        defaultPipeline.fxaa.samples = 1; // 1 by default
        defaultPipeline.fxaa.adaptScaleToCurrentViewport = false; // false by default
    }
    /* glowLayer */
    defaultPipeline.glowLayerEnabled = false;
    if (defaultPipeline.glowLayerEnabled) {
        defaultPipeline.glowLayer.blurKernelSize = 16; // 16 by default
        defaultPipeline.glowLayer.intensity = 1; // 1 by default
    }
    /* grain */
    defaultPipeline.grainEnabled = false;
    if (defaultPipeline.grainEnabled) {
        defaultPipeline.grain.adaptScaleToCurrentViewport = false; // false by default
        defaultPipeline.grain.animated = false; // false by default
        defaultPipeline.grain.intensity = 30; // 30 by default
    }
    /* sharpen */
    defaultPipeline.sharpenEnabled = false;
    if (defaultPipeline.sharpenEnabled) {
        defaultPipeline.sharpen.adaptScaleToCurrentViewport = false; // false by default
        defaultPipeline.sharpen.edgeAmount = 0.3; // 0.3 by default
        defaultPipeline.sharpen.colorAmount = 1; // 1 by default
    }
}

----------------------------------------

TITLE: Initializing WebXR in BabylonJS Scene
DESCRIPTION: Creates a default WebXR experience in a BabylonJS scene enabling VR immersive mode. This single line of code sets up session initialization, input sources, camera controls, teleportation and scene interactions using the WebXR Default Experience Helper.

LANGUAGE: javascript
CODE:
const xr = scene.createDefaultXRExperienceAsync();

----------------------------------------

TITLE: Loading Babylon.js Packages from CDN
DESCRIPTION: Examples of loading various Babylon.js packages and libraries directly from the CDN endpoints. Includes core framework, materials, loaders, post-processing, GUI, and other components.

LANGUAGE: javascript
CODE:
<script src="https://cdn.babylonjs.com/babylon.js"></script>
<script src="https://cdn.babylonjs.com/babylon.max.js"></script>

<script src="https://cdn.babylonjs.com/materialsLibrary/babylonjs.materials.min.js"></script>
<script src="https://cdn.babylonjs.com/materialsLibrary/babylonjs.materials.js"></script>

<script src="https://cdn.babylonjs.com/loaders/babylonjs.loaders.min.js"></script>
<script src="https://cdn.babylonjs.com/loaders/babylonjs.loaders.js"></script>

<script src="https://cdn.babylonjs.com/postProcessesLibrary/babylonjs.postProcess.min.js"></script>
<script src="https://cdn.babylonjs.com/postProcessesLibrary/babylonjs.postProcess.js"></script>

<script src="https://cdn.babylonjs.com/proceduralTexturesLibrary/babylonjs.proceduralTextures.min.js"></script>
<script src="https://cdn.babylonjs.com/proceduralTexturesLibrary/babylonjs.proceduralTextures.js"></script>

<script src="https://cdn.babylonjs.com/serializers/babylonjs.serializers.min.js"></script>
<script src="https://cdn.babylonjs.com/serializers/babylonjs.serializers.js"></script>

<script src="https://cdn.babylonjs.com/gui/babylon.gui.min.js"></script>
<script src="https://cdn.babylonjs.com/gui/babylon.gui.js"></script>

<script src="https://cdn.babylonjs.com/inspector/babylon.inspector.bundle.js"></script>
<script src="https://cdn.babylonjs.com/inspector/babylon.inspector.bundle.max.js"></script>

<script src="https://cdn.babylonjs.com/viewer/babylon.viewer.js"></script>
<script src="https://cdn.babylonjs.com/viewer/babylon.viewer.max.js"></script>

----------------------------------------

TITLE: Creating a Basic Physics Scene in Babylon.js
DESCRIPTION: This snippet shows how to create a minimal physics-enabled scene in Babylon.js. It includes setting up a camera, light, sphere, and ground, and then applying physics properties to the objects using Physics Aggregates.

LANGUAGE: javascript
CODE:
var createScene = function () {
  // This creates a basic Babylon Scene object (non-mesh)
  var scene = new BABYLON.Scene(engine);

  // This creates and positions a free camera (non-mesh)
  var camera = new BABYLON.FreeCamera("camera1", new BABYLON.Vector3(0, 5, -10), scene);

  // This targets the camera to scene origin
  camera.setTarget(BABYLON.Vector3.Zero());

  // This attaches the camera to the canvas
  camera.attachControl(canvas, true);

  // This creates a light, aiming 0,1,0 - to the sky (non-mesh)
  var light = new BABYLON.HemisphericLight("light", new BABYLON.Vector3(0, 1, 0), scene);

  // Default intensity is 1. Let's dim the light a small amount
  light.intensity = 0.7;

  // Our built-in 'sphere' shape.
  var sphere = BABYLON.MeshBuilder.CreateSphere("sphere", {diameter: 2, segments: 32}, scene);

  // Move the sphere upward at 4 units
  sphere.position.y = 4;

  // Our built-in 'ground' shape.
  var ground = BABYLON.MeshBuilder.CreateGround("ground", {width: 10, height: 10}, scene);

  // initialize plugin
  var hk = new BABYLON.HavokPlugin();
  // enable physics in the scene with a gravity
  scene.enablePhysics(new BABYLON.Vector3(0, -9.8, 0), hk);

  // Create a sphere shape and the associated body. Size will be determined automatically.
  var sphereAggregate = new BABYLON.PhysicsAggregate(sphere, BABYLON.PhysicsShapeType.SPHERE, { mass: 1, restitution:0.75}, scene);

  // Create a static box shape.
  var groundAggregate = new BABYLON.PhysicsAggregate(ground, BABYLON.PhysicsShapeType.BOX, { mass: 0 }, scene);

  return scene;
};

----------------------------------------

TITLE: Initializing the Babylon.js Inspector without ES Modules
DESCRIPTION: Shows how to enable the Babylon.js Inspector debug layer without using ES Modules.

LANGUAGE: javascript
CODE:
scene.debugLayer.show();

----------------------------------------

TITLE: Follow Camera Configuration in Babylon.js
DESCRIPTION: Shows setup of a Follow Camera including target following parameters and movement controls.

LANGUAGE: javascript
CODE:
// Parameters: name, position, scene
const camera = new BABYLON.FollowCamera("FollowCam", new BABYLON.Vector3(0, 10, -10), scene);

camera.radius = 30;
camera.heightOffset = 10;
camera.rotationOffset = 0;
camera.cameraAcceleration = 0.005;
camera.maxCameraSpeed = 10;

camera.attachControl(canvas, true);

camera.lockedTarget = targetMesh;

----------------------------------------

TITLE: Adding a Reach Target Observer for Agents in Babylon.js
DESCRIPTION: Set up an observer to detect when agents reach their destinations. This allows for custom actions or logic to be executed upon arrival.

LANGUAGE: javascript
CODE:
const crowd = navigationPlugin.createCrowd(10, 0.1, scene);
...
crowd.onReachTargetObservable.add((agentInfos) => {
    console.log("agent reach destination: ", agentInfos.agentIndex);
});

----------------------------------------

TITLE: Creating and Configuring a Standard Material in Babylon.js
DESCRIPTION: Creates a new StandardMaterial and sets its diffuse, specular, emissive, and ambient colors. This demonstrates how to define the material's appearance under different lighting conditions.

LANGUAGE: javascript
CODE:
const myMaterial = new BABYLON.StandardMaterial("myMaterial", scene);

myMaterial.diffuseColor = new BABYLON.Color3(1, 0, 1);
myMaterial.specularColor = new BABYLON.Color3(0.5, 0.6, 0.87);
myMaterial.emissiveColor = new BABYLON.Color3(1, 1, 1);
myMaterial.ambientColor = new BABYLON.Color3(0.23, 0.98, 0.53);

mesh.material = myMaterial;

----------------------------------------

TITLE: Loading a Standard Texture in Babylon.js
DESCRIPTION: This code snippet demonstrates how to load a standard texture in a Babylon.js scene. It creates a new Texture object using the specified filename from the textures folder.

LANGUAGE: javascript
CODE:
new BABYLON.Texture("textures/filename", scene);

----------------------------------------

TITLE: Enabling Light Estimation in WebXR with Babylon.js
DESCRIPTION: This snippet demonstrates how to enable light estimation in a WebXR experience using Babylon.js. It shows how to configure light estimation options and create a directional light source.

LANGUAGE: javascript
CODE:
const lightEstimationFeature = featuresManager.enableFeature(BABYLON.WebXRFeatureName.LIGHT_ESTIMATION, "latest", {
  createDirectionalLightSource: true,
  lightEstimationPollInterval: 1000,
  cubeMapPollInterval: 1000,
});

----------------------------------------

TITLE: Setting Up Game Environment in Babylon.js
DESCRIPTION: Demonstrates how to create and load the game environment in the _setUpGame function.

LANGUAGE: javascript
CODE:
//--CREATE SCENE--
let scene = new Scene(this._engine);
this._gamescene = scene;

//--CREATE ENVIRONMENT--
const environment = new Environment(scene);
this._environment = environment; //class variable for App
await this._environment.load(); //environment

----------------------------------------

TITLE: Initializing Action Manager in Babylon.js
DESCRIPTION: Shows how to create and attach an ActionManager to a mesh in a Babylon.js scene.

LANGUAGE: javascript
CODE:
mesh.actionManager = new BABYLON.ActionManager(scene);

----------------------------------------

TITLE: Creating and Applying Forces to Instanced Physics Bodies in Babylon.js
DESCRIPTION: Shows how to create multiple instances of a physics body using thin instances and apply forces to them. Forces can be applied to all instances or individual instances using the instanceIndex parameter.

LANGUAGE: javascript
CODE:
const sphere = BABYLON.MeshBuilder.CreateSphere("sphere");

// This generates 3 thin instances based on the sphere mesh
sphere.thinInstanceAddSelf();
sphere.thinInstanceAddSelf();
sphere.thinInstanceAddSelf();

const body = new BABYLON.PhysicsBody(sphere, BABYLON.PhysicsMotionType.DYNAMIC, false, scene);

// Apply a vertical force on all the 3 spheres
body.applyForce(new BABYLON.Vector3(0, 100, 0), new BABYLON.Vector3(0, 0, 0));

// Apply a horizontal force to the first sphere ONLY
body.applyForce(new BABYLON.Vector3(100, 0, 0), new BABYLON.Vector3(0, 0, 0), 0);

----------------------------------------

TITLE: Creating a Physics Capsule Shape in Babylon.js
DESCRIPTION: Demonstrates the creation of a capsule physics shape with start and end points and a radius. The shape is defined in local coordinates.

LANGUAGE: javascript
CODE:
const shape = new BABYLON.PhysicsShapeCapsule(
    new BABYLON.Vector3(0, -0.5, 0),    // starting point of the capsule segment
    new BABYLON.Vector3(0,  0.5, 0),    // ending point of the capsule segment
    1,                                  // radius of the capsule
    scene                               // scene of the shape
);

----------------------------------------

TITLE: Creating a Basic Custom Mesh with Positions and Indices in Babylon.js
DESCRIPTION: Demonstrates how to create a custom mesh by defining vertex positions and indices. It creates two triangular facets using the VertexData class.

LANGUAGE: javascript
CODE:
var customMesh = new BABYLON.Mesh("custom", scene);

var positions = [-5, 2, -3, -7, -2, -3, -3, -2, -3, 5, 2, 3, 7, -2, 3, 3, -2, 3];
var indices = [0, 1, 2, 3, 4, 5];

var vertexData = new BABYLON.VertexData();

vertexData.positions = positions;
vertexData.indices = indices;

vertexData.applyToMesh(customMesh);

----------------------------------------

TITLE: Loading Character Mesh in Babylon.js
DESCRIPTION: This snippet shows how to import a character mesh, set up its properties, and return the mesh for further use in the game.

LANGUAGE: javascript
CODE:
return SceneLoader.ImportMeshAsync(null, "./models/", "player.glb", scene).then((result) =>{
    const root = result.meshes[0];
    //body is our actual player mesh
    const body = root;
    body.parent = outer;
    body.isPickable = false; //so our raycasts dont hit ourself
    body.getChildMeshes().forEach(m => {
        m.isPickable = false;
    })

    return {
        mesh: outer as Mesh,
    }
});

----------------------------------------

TITLE: Managing Scene Assets with AssetContainer in Babylon.js
DESCRIPTION: Shows how to add all assets from a container to a scene or remove them from it, useful for dynamic scene management.

LANGUAGE: javascript
CODE:
// Add all objects in the asset container to the scene
container.addAllToScene();

// Remove all objects in the container from the scene
container.removeAllFromScene();

----------------------------------------

TITLE: Setting Up Opacity with PBR
DESCRIPTION: Configure opacity settings for transparent PBR materials

LANGUAGE: javascript
CODE:
glass.reflectionTexture = hdrTexture;
glass.alpha = 0.5;

----------------------------------------

TITLE: Creating Lathe Shape with MeshBuilder in Babylon.js
DESCRIPTION: Creates a lathe shape using the MeshBuilder method with configurable options. The shape is created by rotating a profile around the y-axis with customizable parameters for radius, tessellation, arc, and cap settings.

LANGUAGE: javascript
CODE:
const lathe = BABYLON.MeshBuilder.CreateLathe("lathe", options, scene);

----------------------------------------

TITLE: Implementing Mesh Movement with Collisions in Babylon.js
DESCRIPTION: Demonstrates how to move a mesh with collision detection, including gravity and directional movement.

LANGUAGE: javascript
CODE:
const speedCharacter = 8;
const gravity = 0.15;
const character = Your mesh;

character.ellipsoid = new BABYLON.Vector3(0.5, 1.0, 0.5);
character.ellipsoidOffset = new BABYLON.Vector3(0, 1.0, 0);

const forwards = new BABYLON.Vector3(parseFloat(Math.sin(character.rotation.y)) / speedCharacter, gravity, parseFloat(Math.cos(character.rotation.y)) / speedCharacter);
forwards.negate();
character.moveWithCollisions(forwards);

----------------------------------------

TITLE: Registering Babylon.js Loaders via NPM
DESCRIPTION: TypeScript code showing how to register built-in loaders using dynamic or static imports in an NPM environment.

LANGUAGE: typescript
CODE:
import { registerBuiltInLoaders } from "@babylonjs/loaders/dynamic";
...
registerBuiltInLoaders();

LANGUAGE: typescript
CODE:
import "@babylonjs/loaders";

----------------------------------------

TITLE: Loading Assets into a New Scene in Babylon.js
DESCRIPTION: Shows how to use SceneLoader.Load to create a new scene and load 3D assets into it.

LANGUAGE: javascript
CODE:
BABYLON.SceneLoader.Load("/assets/", "batman.obj", engine, function (scene) {
  // do something with the scene
});

----------------------------------------

TITLE: Initializing Babylon.js Scene with TypeScript
DESCRIPTION: This code snippet sets up a basic Babylon.js scene with a sphere, camera, and light. It also includes functionality to toggle the Inspector.

LANGUAGE: typescript
CODE:
import "@babylonjs/core/Debug/debugLayer";
import "@babylonjs/inspector";
import { Engine, Scene, ArcRotateCamera, Vector3, HemisphericLight, Mesh, MeshBuilder } from "@babylonjs/core";

class App {
    constructor() {
        // create the canvas html element and attach it to the webpage
        var canvas = document.createElement("canvas");
        canvas.style.width = "100%";
        canvas.style.height = "100%";
        canvas.id = "gameCanvas";
        document.body.appendChild(canvas);

        // initialize babylon scene and engine
        var engine = new Engine(canvas, true);
        var scene = new Scene(engine);

        var camera: ArcRotateCamera = new ArcRotateCamera("Camera", Math.PI / 2, Math.PI / 2, 2, Vector3.Zero(), scene);
        camera.attachControl(canvas, true);
        var light1: HemisphericLight = new HemisphericLight("light1", new Vector3(1, 1, 0), scene);
        var sphere: Mesh = MeshBuilder.CreateSphere("sphere", { diameter: 1 }, scene);

        // hide/show the Inspector
        window.addEventListener("keydown", (ev) => {
            // Shift+Ctrl+Alt+I
            if (ev.shiftKey && ev.ctrlKey && ev.altKey && ev.keyCode === 73) {
                if (scene.debugLayer.isVisible()) {
                    scene.debugLayer.hide();
                } else {
                    scene.debugLayer.show();
                }
            }
        });

        // run the main render loop
        engine.runRenderLoop(() => {
            scene.render();
        });
    }
}
new App();

----------------------------------------

TITLE: Creating Ground From Height Map Using MeshBuilder
DESCRIPTION: Creates a ground mesh using MeshBuilder with a height map image for terrain elevation. Supports options for width, height, subdivisions, altitude ranges, and callback functions.

LANGUAGE: javascript
CODE:
const ground = BABYLON.MeshBuilder.CreateGroundFromHeightMap("gdhm", url_to_height_map, options, scene);

----------------------------------------

TITLE: Creating and Configuring a Sub Emitter in Babylon.js
DESCRIPTION: Demonstrates how to create a sub emitter, set its type to spawn on particle death, inherit direction and velocity from parent particle, and attach it to a particle system.

LANGUAGE: javascript
CODE:
// Create sub emitter
var subEmitter = new BABYLON.SubEmitter(subParticleSystem);
// Have the sub emitter spawn the particle system when the particle dies
subEmitter.type = BABYLON.SubEmitterType.END;
// Set the +Y direction of the sub emitter equal to the direction the particle is/was heading
subEmitter.inheritDirection = true;
// How much of the existing particles speed should be added to the emitter particles
subEmitter.inheritedVelocityAmount = 1;

particleSystem.subEmitters = [subEmitter];

----------------------------------------

TITLE: Applying Material and Texture to Ground in Babylon.js
DESCRIPTION: This code creates a red material for the ground, then applies a checkerboard texture to it.

LANGUAGE: javascript
CODE:
const groundMaterial = new BABYLON.StandardMaterial("Ground Material", scene);
groundMaterial.diffuseColor = BABYLON.Color3.Red();
ground.material = groundMaterial;

let groundTexture = new BABYLON.Texture(Assets.textures.checkerboard_basecolor_png.path, scene);
groundMaterial.diffuseTexture = groundTexture;

----------------------------------------

TITLE: Creating Custom Extrusion with MeshBuilder
DESCRIPTION: Demonstrates how to create and update a custom extruded shape using MeshBuilder. Shows configuration of shape, path, rotation and scale functions with various options.

LANGUAGE: javascript
CODE:
const options = {
  shape: myPoints, //vec3 array with z = 0,
  path: myPath, //vec3 array
  rotationFunction: rotFn,
  scaleFunction: scaleFn,
  updatable: true,
};

let extruded = BABYLON.MeshBuilder.ExtrudeShapeCustom("ext", options, scene); //scene is optional and defaults to the current scene

// Update
options.shape = newShape;
options.path = newPath;
options.instance = extruded;
options.rotationFunction = newRotFn;
options.scaleFunction = newScaleFn;
extruded = BABYLON.MeshBuilder.ExtrudeShapeCustom("ext", options); //No scene parameter when using instance

----------------------------------------

TITLE: Importing Babylon.js Core
DESCRIPTION: Import the entire Babylon.js core library or specific classes.

LANGUAGE: javascript
CODE:
import * as BABYLON from "@babylonjs/core/Legacy/legacy";

// Or import specific classes:
import { Engine, Scene } from "@babylonjs/core";

----------------------------------------

TITLE: Setting Up Multi-Camera Scene with Layer Masks in Babylon.js
DESCRIPTION: This code shows how to set up a scene with multiple cameras and assign layer masks to cameras and meshes for selective visibility.

LANGUAGE: javascript
CODE:
if (scene.activeCameras.length === 0){
    scene.activeCameras.push(scene.activeCamera);
}
const secondCamera = new Babylon.Camera(...);
secondCamera.layerMask = 0x10000000;
scene.activeCameras.push(secondCamera);

const Button = new BABYLON.Mesh(...);
Button.layerMask = 0x10000000;

----------------------------------------

TITLE: Shape Cast Query Implementation
DESCRIPTION: Implementation for shape cast query that determines collision points during shape movement from start to end position.

LANGUAGE: javascript
CODE:
hk.shapeCast({
    shape: shape1,
    rotation: mesh1.rotationQuaternion,
    startPosition: castStartPosition,
    endPosition: castEndPosition,
    shouldHitTriggers: false,
}, shapeLocalResult, hitWorldResult);

----------------------------------------

TITLE: Implementing Basic 3D Scene with Babylon.js in React
DESCRIPTION: Example implementation of a 3D scene using the SceneComponent, including camera setup, lighting, and animated box creation.

LANGUAGE: jsx
CODE:
import React from "react";
import { FreeCamera, Vector3, HemisphericLight, MeshBuilder } from "@babylonjs/core";
import SceneComponent from "./SceneComponent";
import "./App.css";

let box;

const onSceneReady = (scene) => {
  const camera = new FreeCamera("camera1", new Vector3(0, 5, -10), scene);
  camera.setTarget(Vector3.Zero());
  const canvas = scene.getEngine().getRenderingCanvas();
  camera.attachControl(canvas, true);
  const light = new HemisphericLight("light", new Vector3(0, 1, 0), scene);
  light.intensity = 0.7;
  box = MeshBuilder.CreateBox("box", { size: 2 }, scene);
  box.position.y = 1;
  MeshBuilder.CreateGround("ground", { width: 6, height: 6 }, scene);
};

const onRender = (scene) => {
  if (box !== undefined) {
    const deltaTimeInMillis = scene.getEngine().getDeltaTime();
    const rpm = 10;
    box.rotation.y += (rpm / 60) * Math.PI * 2 * (deltaTimeInMillis / 1000);
  }
};

export default () => (
  <div>
    <SceneComponent antialias onSceneReady={onSceneReady} onRender={onRender} id="my-canvas" />
  </div>
);

----------------------------------------

TITLE: Basic WebXR Scene Setup in Babylon.js
DESCRIPTION: Simple example showing how to create a basic WebXR scene with a sphere using Babylon.js. Includes environment setup and XR experience initialization.

LANGUAGE: javascript
CODE:
var createScene = async function () {
  var scene = new BABYLON.Scene(engine);
  var camera = new BABYLON.FreeCamera("camera1", new BABYLON.Vector3(0, 5, -10), scene);
  camera.setTarget(BABYLON.Vector3.Zero());
  camera.attachControl(canvas, true);
  var light = new BABYLON.HemisphericLight("light1", new BABYLON.Vector3(0, 1, 0), scene);
  light.intensity = 0.7;
  var sphere = BABYLON.MeshBuilder.CreateSphere("sphere1", { segments: 16, diameter: 2 }, scene);
  sphere.position.y = 1;

  const env = scene.createDefaultEnvironment();

  const xr = await scene.createDefaultXRExperienceAsync({
    floorMeshes: [env.ground],
  });

  return scene;
};

----------------------------------------

TITLE: Setting Parent-Child Relationships in Babylon.js
DESCRIPTION: Shows three different methods to establish a parent-child relationship between meshes in Babylon.js. Methods include direct parent assignment, setParent() method, and addChild() method.

LANGUAGE: javascript
CODE:
meshC.parent = meshP; // 1
meshC.setParent(meshP); // 2
meshP.addChild(meshC); // 3

----------------------------------------

TITLE: Creating Basic Solid Particle System in Babylon.js
DESCRIPTION: Demonstrates the creation of a Solid Particle System by adding multiple shapes (spheres and polyhedrons) and building the final mesh. Shows the basic setup process including shape creation, adding particles, and mesh building.

LANGUAGE: javascript
CODE:
const SPS = new SolidParticleSystem("SPS", scene);
const sphere = BABYLON.MeshBuilder.CreateSphere("s", {});
const poly = BABYLON.MeshBuilder.CreatePolyhedron("p", { type: 2 }, scene);
SPS.addShape(sphere, 20);
SPS.addShape(poly, 120);
SPS.addShape(sphere, 80);
sphere.dispose();
poly.dispose();

const mesh = SPS.buildMesh();

----------------------------------------

TITLE: Initializing Basic Particle System in Babylon.js
DESCRIPTION: Creates a new particle system with specified name and capacity. The scene parameter is optional and defaults to current scene.

LANGUAGE: javascript
CODE:
const myParticleSystem = new BABYLON.ParticleSystem("particles", capacity, scene);

----------------------------------------

TITLE: Configuring Webpack for Babylon.js Project
DESCRIPTION: This JavaScript configuration file sets up Webpack for a Babylon.js project. It defines entry points, output settings, module rules for TypeScript, and necessary plugins for HTML generation and development server.

LANGUAGE: javascript
CODE:
const path = require("path");
const fs = require("fs");
const HtmlWebpackPlugin = require("html-webpack-plugin");
const appDirectory = fs.realpathSync(process.cwd());

module.exports = {
    entry: path.resolve(appDirectory, "src/app.ts"),
    output: {
        filename: "js/bundleName.js",
        clean: true,
    },
    resolve: {
        extensions: [".tsx", ".ts", ".js"],
    },
    devServer: {
        host: "0.0.0.0",
        port: 8080,
        static: path.resolve(appDirectory, "public"),
        hot: true,
        devMiddleware: {
            publicPath: "/",
        }
    },
    module: {
        rules: [
            {
                test: /\.tsx?$/,
                use: "ts-loader",
                exclude: /node_modules/,
            },
        ],
    },
    plugins: [
        new HtmlWebpackPlugin({
            inject: true,
            template: path.resolve(appDirectory, "public/index.html"),
        })
    ],
    mode: "development",
};

----------------------------------------

TITLE: Creating Spotlight in BabylonJS
DESCRIPTION: Creates a spotlight with specified position, direction, spread angle, and dissipation rate. Sets the light color to yellow.

LANGUAGE: javascript
CODE:
const lampLight = new BABYLON.SpotLight("name", position, direction, angle_of_spread, speed_of_disipation);
lampLight.diffuse = BABYLON.Color3.Yellow();

----------------------------------------

TITLE: Importing Babylon.js CDN Packages
DESCRIPTION: Script tags for importing various Babylon.js packages directly from CDN, including core, materials, loaders, post-processing, GUI and viewer components.

LANGUAGE: javascript
CODE:
<script src="https://cdn.babylonjs.com/babylon.js"></script>
<script src="https://cdn.babylonjs.com/babylon.max.js"></script>
<script src="https://cdn.babylonjs.com/materialsLibrary/babylonjs.materials.min.js"></script>

----------------------------------------

TITLE: Appending Assets to a Scene in Babylon.js
DESCRIPTION: Demonstrates how to use SceneLoader.Append to load and append 3D assets to an existing scene. This method can load assets from a file or a data string.

LANGUAGE: javascript
CODE:
BABYLON.SceneLoader.Append("./", "duck.gltf", scene, function (scene) {
  // do something with the scene
});

LANGUAGE: javascript
CODE:
BABYLON.SceneLoader.Append("", "data:" + gltfString, scene, function (scene) {
  // do something with the scene
});

LANGUAGE: javascript
CODE:
const base64_model_content = "data:;base64,BASE 64 ENCODED DATA...";
BABYLON.SceneLoader.Append("", base64_model_content, scene, function (scene) {
  // do something with the scene
});

----------------------------------------

TITLE: Creating Sky Material and Skybox in Babylon.js
DESCRIPTION: Basic setup for creating a skybox with Sky Material. Creates a new Sky Material instance and applies it to a box mesh that serves as the skybox.

LANGUAGE: javascript
CODE:
const skyMaterial = new BABYLON.SkyMaterial("skyMaterial", scene);
skyMaterial.backFaceCulling = false;

const skybox = BABYLON.MeshBuilder.CreateBox("skyBox", { size: 1000.0 }, scene);
skybox.material = skyMaterial;

----------------------------------------

TITLE: Debugging Physics in Babylon.js using PhysicsViewer
DESCRIPTION: This snippet shows how to use the PhysicsViewer to debug physics interactions in a Babylon.js scene. It iterates through all root nodes and displays the physics bodies for debugging purposes.

LANGUAGE: javascript
CODE:
physicsViewer = new BABYLON.Debug.PhysicsViewer();
for (const mesh of scene.rootNodes) {
    if (mesh.physicsBody) {
        const debugMesh = physicsViewer.showBody(mesh.physicsBody);
    }
}

----------------------------------------

TITLE: Basic Camera Control Attachment in Babylon.js
DESCRIPTION: Demonstrates how to attach and configure basic camera controls to a scene and canvas.

LANGUAGE: javascript
CODE:
//First, set the scene's activeCamera... to be YOUR camera.
scene.activeCamera = myCamera;
// Then attach the activeCamera to the canvas.
//Parameters: canvas, noPreventDefault
scene.activeCamera.attachControl(canvas, true);

----------------------------------------

TITLE: Creating Default Free Camera
DESCRIPTION: Demonstrates creating a free camera with default settings and attaching controls.

LANGUAGE: javascript
CODE:
scene.createDefaultCamera(false, true, true);

----------------------------------------

TITLE: Implementing Floating Origin Camera and Entity in BabylonJS
DESCRIPTION: Demonstrates how to set up a floating-origin system using OriginCamera and Entity classes in BabylonJS. Shows camera configuration with double precision positioning and creation of a sphere entity with precise coordinates at a large distance from origin.

LANGUAGE: javascript
CODE:
// Create the OriginCamera
let camera = new OriginCamera("camera", new BABYLON.Vector3(10000000, 0, 10000500), scene);
camera.doubletgt = new BABYLON.Vector3(10000000, 0, 10000000);
camera.touchAngularSensibility = 10000;
camera.inertia = 0;
camera.speed = 1;
camera.keysUp.push(87);    		// W
camera.keysDown.push(83)   		// D
camera.keysLeft.push(65);  		// A
camera.keysRight.push(68); 		// S
camera.keysUpward.push(69);		// E
camera.keysDownward.push(81);     // Q
camera.minZ = 0.5;
camera.maxZ = 50000000;
camera.fov = 1;
camera.attachControl(canvas, true);

// Create an Entity for the sphere
let entSphere = new Entity("entSphere", scene);
camera.add(entSphere);

// Create the sphere and parent it to its Entity
let sphere = BABYLON.CreateSphere("sphere", {diameter:256});
sphere.parent = entSphere;

// Position the Entity
entSphere.doublepos = new BABYLON.Vector3(10000000, 0, 10000000);

----------------------------------------

TITLE: Creating a Cube with Mesh in Babylon.js
DESCRIPTION: This snippet shows how to create a basic cube using the BABYLON.MeshBuilder.CreateBox method with limited options. For non-cubic shapes, scaling must be applied after creation.

LANGUAGE: javascript
CODE:
const box = BABYLON.MeshBuilder.CreateBox("box", { size, updatable, sideOrientation}, scene);

----------------------------------------

TITLE: Basic MeshExploder Usage in Babylon.js
DESCRIPTION: Demonstrates the basic usage of MeshExploder class to create explosion effects. Shows how to initialize and control explosion/implosion with different parameters.

LANGUAGE: javascript
CODE:
const newExplosion = new BABYLON.MeshExploder(meshes, centerMesh);

newExplosion.explode(); //Explodes meshes away from center. Default 1.0.

----------------------------------------

TITLE: Attaching Events to Animations in Babylon.js
DESCRIPTION: Demonstrates how to attach events to specific frames in an animation using Babylon.js version 2.3 and later.

LANGUAGE: javascript
CODE:
const event1 = new BABYLON.AnimationEvent(
  50,
  function () {
    console.log("Yeah!");
  },
  true
);
animation.addEvent(event1);

----------------------------------------

TITLE: Enabling Plane Detection in WebXR with Babylon.js
DESCRIPTION: This code snippet shows how to enable plane detection in a WebXR experience using Babylon.js. It demonstrates how to handle plane detection events.

LANGUAGE: javascript
CODE:
const planeDetector = featuresManager.enableFeature(BABYLON.WebXRPlaneDetector, "latest");

planeDetector.onPlaneAddedObservable.add((plane) => {
  // ... do what you want with the plane after it was added
});

planeDetector.onPlaneRemovedObservable.add((plane) => {
  // ... do what you want with the plane after it was removed
});

planeDetector.onPlaneUpdatedObservable.add((plane) => {
  // ... do what you want with the plane after it was updated
});

----------------------------------------

TITLE: Creating and Configuring a Skybox in BabylonJS
DESCRIPTION: This code snippet demonstrates how to create a skybox mesh, apply a cube texture, and configure the material properties for a realistic sky effect in BabylonJS. It uses MeshBuilder to create the box, CubeTexture for the sky images, and StandardMaterial for the material configuration.

LANGUAGE: javascript
CODE:
const skybox = BABYLON.MeshBuilder.CreateBox("skyBox", {size:150}, scene);
const skyboxMaterial = new BABYLON.StandardMaterial("skyBox", scene);
skyboxMaterial.backFaceCulling = false;
skyboxMaterial.reflectionTexture = new BABYLON.CubeTexture("textures/skybox", scene);
skyboxMaterial.reflectionTexture.coordinatesMode = BABYLON.Texture.SKYBOX_MODE;
skyboxMaterial.diffuseColor = new BABYLON.Color3(0, 0, 0);
skyboxMaterial.specularColor = new BABYLON.Color3(0, 0, 0);
skybox.material = skyboxMaterial;

----------------------------------------

TITLE: Creating Manual Morph Target
DESCRIPTION: Creates a morph target manually by specifying positions and normals directly.

LANGUAGE: javascript
CODE:
const target = new BABYLON.MorphTarget(name, influence);
target.setPositions(...);
target.setNormals(...);

----------------------------------------

TITLE: Loading and Playing Animation Groups in Babylon.js
DESCRIPTION: This snippet demonstrates how to import a GLB model with animation groups, scale it, lock the camera on the character, and play a specific animation.

LANGUAGE: javascript
CODE:
BABYLON.SceneLoader.ImportMesh("", "https://assets.babylonjs.com/meshes/", "HVGirl.glb", scene, function (newMeshes, particleSystems, skeletons, animationGroups) {
  const hero = newMeshes[0];

  //Scale the model down
  hero.scaling.scaleInPlace(0.1);

  //Lock camera on the character
  camera1.target = hero;

  //Get the Samba animation Group
  const sambaAnim = scene.getAnimationGroupByName("Samba");

  //Play the Samba animation
  sambaAnim.start(true, 1.0, sambaAnim.from, sambaAnim.to, false);
});

----------------------------------------

TITLE: Overriding Animation Properties in Babylon.js
DESCRIPTION: Demonstrates how to use animationPropertiesOverride to specify general properties for all child animations in a mesh or skeleton.

LANGUAGE: javascript
CODE:
const overrides = new BABYLON.AnimationPropertiesOverride();

overrides.enableBlending = true;
overrides.blendingSpeed = 0.1;

skeleton.animationPropertiesOverride = overrides;

----------------------------------------

TITLE: Creating Mesh Decals in Babylon.js
DESCRIPTION: Creates a decal mesh that projects onto an existing mesh. Requires a base mesh and supports optional parameters for position, normal, size, and angle.

LANGUAGE: javascript
CODE:
const decal = BABYLON.MeshBuilder.CreateDecal("decal", mesh, { position: myPos }, scene);

----------------------------------------

TITLE: Implementing Custom Optimization Class
DESCRIPTION: Example of creating a custom optimization class by extending CustomOptimization with custom apply and description methods.

LANGUAGE: javascript
CODE:
class MyCustomOptimization extends BABYLON.CustomOptimization{
    constructor(priority){
        super(priority)
    }

    onApply(){
        // Some optimizing code
    }
    onGetDescription(){
        // A desription of your optimization
        return "I make framerate go prrrr!";
    }
};

options.addOptimization(new MyCustomOptimization(2));

----------------------------------------

TITLE: Creating a Box Mesh in Babylon.js
DESCRIPTION: This snippet demonstrates how to create a simple box mesh using the Babylon.js MeshBuilder. The engine processes this code to generate vertex data including positions, colors, and normals.

LANGUAGE: javascript
CODE:
const box = BABYLON.MeshBuilder.CreateBox("box", {}, scene);

----------------------------------------

TITLE: Implementing Shadows in Babylon.js Scene
DESCRIPTION: Combines all previous steps to set up shadows in a Babylon.js scene. It creates a ShadowGenerator, adds a shadow caster (dude), and configures the ground to receive shadows.

LANGUAGE: javascript
CODE:
const shadowGenerator = new BABYLON.ShadowGenerator(1024, light);

shadowGenerator.addShadowCaster(dude, true);

ground.receiveShadows = true;

----------------------------------------

TITLE: Different Model Loading Patterns in Babylon.js
DESCRIPTION: Shows different ways to load models: loading all meshes, loading a single model, or loading multiple specific models.

LANGUAGE: javascript
CODE:
BABYLON.SceneLoader.ImportMeshAsync("", "/relative path/", "myFile"); //Empty string loads all meshes
BABYLON.SceneLoader.ImportMeshAsync("model1", "/relative path/", "myFile"); //Name of the model loads one model
BABYLON.SceneLoader.ImportMeshAsync(["model1", "model2"], "/relative path/", "myFile"); //Array of model names

----------------------------------------

TITLE: Initializing WebXR Session Manager in Babylon.js
DESCRIPTION: Construct a new WebXR session manager with a Babylon scene and check if XR is supported.

LANGUAGE: javascript
CODE:
const sessionManager = new WebXRSessionManager(scene);

// Static:
const supported = await WebXRSessionManager.IsSessionSupportedAsync("immersive-vr");
if (supported) {
  // xr available, session supported
}

// or:

const supported = await sessionManager.isSessionSupportedAsync("immersive-vr");
if (supported) {
  // xr available, session supported
}

----------------------------------------

TITLE: Satellite Animation with Parent-Child Transforms
DESCRIPTION: Animates a parent box and child box using local and world space transformations, demonstrating how parent transformations affect child objects.

LANGUAGE: javascript
CODE:
scene.registerAfterRender(function () {
    box.rotate(BABYLON.Axis.Y, Math.PI / 150, BABYLON.Space.LOCAL);
    box.rotate(BABYLON.Axis.X, Math.PI / 200, BABYLON.Space.LOCAL);
    box.translate(new BABYLON.Vector3(-1, -1, -1).normalize(), 0.001, BABYLON.Space.WORLD);
    y += 0.001;
    small.translate(BABYLON.Axis.Y, 0.001, BABYLON.Space.LOCAL);
});

----------------------------------------

TITLE: Creating Multiple Scenes in Babylon.js
DESCRIPTION: Basic initialization of multiple scene objects using the Babylon.js engine.

LANGUAGE: javascript
CODE:
var scene0 = new BABYLON.Scene(engine);
var scene1 = new BABYLON.Scene(engine);

----------------------------------------

TITLE: Handling Keyboard Events in Babylon.js
DESCRIPTION: This snippet demonstrates how to set up an observer for keyboard events in a Babylon.js scene. It logs key down and key up events, providing both the key and its ASCII code.

LANGUAGE: javascript
CODE:
scene.onKeyboardObservable.add((kbInfo) => {
  switch (kbInfo.type) {
    case BABYLON.KeyboardEventTypes.KEYDOWN:
      console.log("KEY DOWN: ", kbInfo.event.key);
      break;
    case BABYLON.KeyboardEventTypes.KEYUP:
      console.log("KEY UP: ", kbInfo.event.code);
      break;
  }
});

----------------------------------------

TITLE: Creating a Sphere with MeshBuilder in Babylon.js
DESCRIPTION: This snippet demonstrates how to create a sphere using the MeshBuilder.CreateSphere method in Babylon.js. It allows for customization of various parameters such as segments, diameter, and side orientation.

LANGUAGE: javascript
CODE:
const sphere = BABYLON.MeshBuilder.CreateSphere("sphere", options, scene); //scene is optional and defaults to the current scene

----------------------------------------

TITLE: Enabling and Configuring Sharpening in Babylon.js Default Rendering Pipeline
DESCRIPTION: This snippet demonstrates how to enable and configure the sharpening effect in the default rendering pipeline. It sets the edge amount and color amount for the sharpening effect.

LANGUAGE: javascript
CODE:
pipeline.sharpenEnabled = true;
pipeline.sharpen.edgeAmount = 0.9;
pipeline.sharpen.colorAmount = 0.0;

----------------------------------------

TITLE: Setting Maximum Simultaneous Lights for a Material in Babylon.js
DESCRIPTION: Demonstrates how to increase the maximum number of simultaneous lights that can affect a material in Babylon.js.

LANGUAGE: javascript
CODE:
const material = new BABYLON.StandardMaterial("mat", scene);
material.maxSimultaneousLights = 6;

----------------------------------------

TITLE: Adding Vertex Colors to a Custom Mesh in Babylon.js
DESCRIPTION: Demonstrates how to add per-vertex colors to a custom mesh. It defines an array of color values (RGBA) for each vertex and assigns it to the VertexData object.

LANGUAGE: javascript
CODE:
var customMesh = new BABYLON.Mesh("custom", scene);

var positions = [-5, 2, -3, -7, -2, -3, -3, -2, -3, 5, 2, 3, 7, -2, 3, 3, -2, 3];
var indices = [0, 1, 2, 3, 4, 5];
var colors = [1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1];

var normals = [];

var vertexData = new BABYLON.VertexData();
BABYLON.VertexData.ComputeNormals(positions, indices, normals);

vertexData.positions = positions;
vertexData.indices = indices;
vertexData.colors = colors;
vertexData.normals = normals;

vertexData.applyToMesh(customMesh);

----------------------------------------

TITLE: Implementing Fire Procedural Texture in Babylon.js
DESCRIPTION: Creates a fire procedural texture and applies it to a standard material. The texture can be used for both diffuse and opacity mapping. The fire texture provides customizable parameters for time, speed, and color variations.

LANGUAGE: javascript
CODE:
var fireMaterial = new BABYLON.StandardMaterial("fireMat", scene);
var fireTexture = new BABYLON.FireProceduralTexture("fireTex", 256, scene);
fireMaterial.diffuseTexture = fireTexture;
fireMaterial.opacityTexture = fireTexture;

----------------------------------------

TITLE: Using Easing Functions with Animations in Babylon.js
DESCRIPTION: Shows how to apply easing functions to animations for custom interpolation behavior in Babylon.js.

LANGUAGE: javascript
CODE:
const animationTorus = new BABYLON.Animation("torusEasingAnimation", "position", 30, BABYLON.Animation.ANIMATIONTYPE_VECTOR3, BABYLON.Animation.ANIMATIONLOOPMODE_CYCLE);

const nextPos = torus.position.add(new BABYLON.Vector3(-80, 0, 0));

const keysTorus = [];
keysTorus.push({ frame: 0, value: torus.position });
keysTorus.push({ frame: 120, value: nextPos });
animationTorus.setKeys(keysTorus);

const easingFunction = new BABYLON.CircleEase();
easingFunction.setEasingMode(BABYLON.EasingFunction.EASINGMODE_EASEINOUT);
animationTorus.setEasingFunction(easingFunction);

torus.animations.push(animationTorus);

scene.beginAnimation(torus, 0, 120, true);

----------------------------------------

TITLE: Implementing Car Movement and Wheel Rotation in BabylonJS
DESCRIPTION: Handles the car's forward movement and wheel rotations, accounting for different wheel speeds during turns based on their positions relative to the turning radius.

LANGUAGE: javascript
CODE:
if(D > 0) {
	phi = D/(R * F);
	if(Math.abs(theta)>0) {
	 	pivot.rotate(BABYLON.Axis.Y, phi, BABYLON.Space.WORLD);
		psiRI = D/(r * F);
		psiRO = D * (R + A)/(r * F);
		psiFI = D * Math.sqrt(R* R + L * L)/(r * F);
		psiFO = D * Math.sqrt((R + A) * (R + A) + L * L)/(r * F);

		wheelFI.rotate(BABYLON.Axis.Y, psiFI, BABYLON.Space.LOCAL);
		wheelFO.rotate(BABYLON.Axis.Y, psiFO, BABYLON.Space.LOCAL);
		wheelRI.rotate(BABYLON.Axis.Y, psiRI, BABYLON.Space.LOCAL);
		wheelRO.rotate(BABYLON.Axis.Y, psiRO, BABYLON.Space.LOCAL);
 	}
 	else {
	 	pivot.translate(BABYLON.Axis.X, -distance, BABYLON.Space.LOCAL);
		wheelFI.rotate(BABYLON.Axis.Y, psi, BABYLON.Space.LOCAL);
		wheelFO.rotate(BABYLON.Axis.Y, psi, BABYLON.Space.LOCAL);
		wheelRI.rotate(BABYLON.Axis.Y, psi, BABYLON.Space.LOCAL);
		wheelRO.rotate(BABYLON.Axis.Y, psi, BABYLON.Space.LOCAL);
 	}
}

----------------------------------------

TITLE: Creating a LensFlareSystem in Babylon.js
DESCRIPTION: This snippet demonstrates how to create a LensFlareSystem in Babylon.js. The system requires an emitter, which can be a camera, light, or mesh.

LANGUAGE: javascript
CODE:
const lensFlareSystem = new BABYLON.LensFlareSystem("lensFlareSystem", myEmitter, scene);

----------------------------------------

TITLE: Player Position Interpolation
DESCRIPTION: Client-side implementation of smooth player movement using position interpolation.

LANGUAGE: typescript
CODE:
scene.registerBeforeRender(() => {
  for (let sessionId in playerEntities) {
    var entity = playerEntities[sessionId];
    var targetPosition = playerNextPosition[sessionId];
    entity.position = BABYLON.Vector3.Lerp(entity.position, targetPosition, 0.05);
  }
});

----------------------------------------

TITLE: Merging Meshes with Native Babylon.js Function
DESCRIPTION: Demonstrates how to use the static MergeMeshes function of the Mesh class to combine multiple meshes into a single mesh. It includes options for disposing source meshes, handling large vertex counts, and managing materials.

LANGUAGE: javascript
CODE:
const newMesh = BABYLON.Mesh.MergeMeshes(arrayOfMeshes, disposeSource, allow32BitsIndices, meshSubclass, subdivideWithSubMeshes, multiMultiMaterials);

----------------------------------------

TITLE: Enabling Camera Gravity in Babylon.js
DESCRIPTION: Enables gravity effect on the camera by setting the applyGravity property.

LANGUAGE: javascript
CODE:
camera.applyGravity = true;

----------------------------------------

TITLE: Creating Camera Movement Animation in Babylon.js
DESCRIPTION: This snippet demonstrates how to create an animation for camera movement in Babylon.js. It defines key frames for the camera's position at specific times, creating a smooth motion path.

LANGUAGE: javascript
CODE:
const movein = new BABYLON.Animation("movein", "position", frameRate, BABYLON.Animation.ANIMATIONTYPE_VECTOR3, BABYLON.Animation.ANIMATIONLOOPMODE_CONSTANT);

const movein_keys = [];

movein_keys.push({
  frame: 0,
  value: new BABYLON.Vector3(0, 5, -30),
});

movein_keys.push({
  frame: 3 * frameRate,
  value: new BABYLON.Vector3(0, 2, -10),
});

movein_keys.push({
  frame: 5 * frameRate,
  value: new BABYLON.Vector3(0, 2, -10),
});

movein_keys.push({
  frame: 8 * frameRate,
  value: new BABYLON.Vector3(-2, 2, 3),
});

movein.setKeys(movein_keys);

----------------------------------------

TITLE: Creating a Ground Plane in Babylon.js
DESCRIPTION: This code snippet demonstrates how to create a ground plane using Babylon.js MeshBuilder. The ground is created with a width of 10 units in the x direction and a height of 10 units in the z direction.

LANGUAGE: javascript
CODE:
const ground = BABYLON.MeshBuilder.CreateGround("ground", {width:10, height:10});

----------------------------------------

TITLE: Creating Rotation Animation in Babylon.js
DESCRIPTION: This snippet creates a rotation animation for a Babylon.js object around the Y-axis. It sets up key frames for a full 360-degree rotation over two seconds.

LANGUAGE: javascript
CODE:
const yRot = new BABYLON.Animation("yRot", "rotation.y", frameRate, BABYLON.Animation.ANIMATIONTYPE_FLOAT, BABYLON.Animation.ANIMATIONLOOPMODE_CYCLE);

const keyFramesR = [];

keyFramesR.push({
  frame: 0,
  value: 0,
});

keyFramesR.push({
  frame: frameRate,
  value: Math.PI,
});

keyFramesR.push({
  frame: 2 * frameRate,
  value: 2 * Math.PI,
});

yRot.setKeys(keyFramesR);

----------------------------------------

TITLE: Combining Rotation and Slide Animations in Babylon.js
DESCRIPTION: This snippet shows how to combine rotation and slide animations to run concurrently after an initial rotation animation.

LANGUAGE: javascript
CODE:
const nextAnimation = function () {
  scene.beginDirectAnimation(box, [yRot, xSlide], 0, 2 * frameRate, true);
};

----------------------------------------

TITLE: ES6 WebXR Module Imports in Babylon.js
DESCRIPTION: Example showing proper ES6 module imports for WebXR functionality including controller support and necessary loaders.

LANGUAGE: javascript
CODE:
import { WebXRDefaultExperience } from '@babylonjs/core/XR/webXRDefaultExperience.js'

import '@babylonjs/loaders/glTF'

import '@babylonjs/core/Materials/Node/Blocks'

----------------------------------------

TITLE: Installing Latest Babylon.js Core Package
DESCRIPTION: This command installs the latest preview version of the Babylon.js core package using npm. It's recommended for accessing the most up-to-date features and improvements.

LANGUAGE: shell
CODE:
npm i @babylonjs/core@preview

----------------------------------------

TITLE: Creating a Sphere with Mesh in Babylon.js
DESCRIPTION: This snippet shows how to create a basic sphere using the Mesh.CreateSphere method in Babylon.js. It allows for specifying the number of segments and the diameter of the sphere.

LANGUAGE: javascript
CODE:
const sphere = BABYLON.MeshBuilder.CreateSphere("sphere", { segments, diameter }, scene);

----------------------------------------

TITLE: Creating ShaderMaterial in Babylon.js
DESCRIPTION: Initializes a ShaderMaterial using custom vertex and fragment shaders with specified attributes and uniforms.

LANGUAGE: javascript
CODE:
const shaderMaterial = new BABYLON.ShaderMaterial("shader", scene, {
    vertex: "custom",
    fragment: "custom"
}, {
    attributes: ["position", "normal", "uv"],
    uniforms: ["world", "worldView", "worldViewProjection", "view", "projection"]
});

----------------------------------------

TITLE: Creating and Applying Styles in Babylon.js GUI
DESCRIPTION: This snippet demonstrates how to create a style object and apply it to a control in Babylon.js GUI.

LANGUAGE: JavaScript
CODE:
const style = advancedTexture.createStyle();
style.fontSize = 24;
style.fontStyle = "italic";
style.fontFamily = "Verdana";

textControl.style = style;

----------------------------------------

TITLE: Enabling Physics Engine with Havok Plugin in Babylon.js
DESCRIPTION: This snippet demonstrates how to enable the physics engine in a Babylon.js scene using the Havok plugin. It shows the default parameters and how to customize the gravity vector.

LANGUAGE: javascript
CODE:
var scene = new BABYLON.Scene(engine);
var gravityVector = new BABYLON.Vector3(0, -9.81, 0);
var physicsPlugin = new BABYLON.HavokPlugin();
scene.enablePhysics(gravityVector, physicsPlugin);

----------------------------------------

TITLE: HTML Template for Babylon.js Web Application
DESCRIPTION: A complete HTML template for a Babylon.js web application. It includes necessary scripts, styles, and a basic scene setup.

LANGUAGE: html
CODE:
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>Babylon Template</title>

    <style>
      html,
      body {
        overflow: hidden;
        width: 100%;
        height: 100%;
        margin: 0;
        padding: 0;
      }

      #renderCanvas {
        width: 100%;
        height: 100%;
        touch-action: none;
      }
    </style>

    <script src="https://cdn.babylonjs.com/babylon.js"></script>
    <script src="https://cdn.babylonjs.com/loaders/babylonjs.loaders.min.js"></script>
    <script src="https://code.jquery.com/pep/0.4.3/pep.js"></script>
  </head>

  <body>
    <canvas id="renderCanvas" touch-action="none"></canvas>
    <!-- touch-action="none" for best results from PEP -->

    <script>
      const canvas = document.getElementById("renderCanvas"); // Get the canvas element
      const engine = new BABYLON.Engine(canvas, true); // Generate the BABYLON 3D engine

      // Add your code here matching the playground format

      const scene = createScene(); //Call the createScene function

      // Register a render loop to repeatedly render the scene
      engine.runRenderLoop(function () {
        scene.render();
      });

      // Watch for browser/canvas resize events
      window.addEventListener("resize", function () {
        engine.resize();
      });
    </script>
  </body>
</html>

----------------------------------------

TITLE: Optimizing Mesh for Simplification in Babylon.js
DESCRIPTION: This snippet demonstrates how to optimize a mesh's indices for better simplification results. It shows both global altering and optimization during simplification.

LANGUAGE: javascript
CODE:
mesh.optimizeIndices(function () {
  //do whatever you want here
});

----------------------------------------

TITLE: Creating ShadowGenerator in Babylon.js
DESCRIPTION: Initializes a ShadowGenerator object in Babylon.js. This is required for shadows to appear in the scene. It takes the size of the shadow map and the light generating the shadow as parameters.

LANGUAGE: javascript
CODE:
const shadowGenerator = new BABYLON.ShadowGenerator(1024, light);

----------------------------------------

TITLE: Adding UV Coordinates for Texturing a Custom Mesh in Babylon.js
DESCRIPTION: Shows how to add UV coordinates to a custom mesh for texture mapping. It defines UV coordinates for each vertex and assigns them to the VertexData object.

LANGUAGE: javascript
CODE:
var customMesh = new BABYLON.Mesh("custom", scene);

var positions = [-5, 2, -3, -7, -2, -3, -3, -2, -3];
var indices = [0, 1, 2];
var uvs = [0, 1, 0, 0, 1, 0];

var normals = [];
BABYLON.VertexData.ComputeNormals(positions, indices, normals);

var vertexData = new BABYLON.VertexData();

vertexData.positions = positions;
vertexData.indices = indices;
vertexData.normals = normals;
vertexData.uvs = uvs;

vertexData.applyToMesh(customMesh);

----------------------------------------

TITLE: Creating Polygon with MeshBuilder in Babylon.js
DESCRIPTION: Creates a polygon mesh using MeshBuilder with configurable options including shape, holes, and UV settings. The shape must be defined in the xz plane using Vector3 coordinates in counter-clockwise order.

LANGUAGE: javascript
CODE:
const polygon = BABYLON.MeshBuilder.CreatePolygon("polygon", options, scene);

----------------------------------------

TITLE: Creating and Applying a Physics Shape in Babylon.js
DESCRIPTION: Demonstrates how to create a sphere physics shape and apply it to multiple bodies in Babylon.js. This allows for efficient reuse of the same shape across multiple physics bodies.

LANGUAGE: javascript
CODE:
const shape = new BABYLON.PhysicsShapeSphere(
  new BABYLON.Vector3(0,0,0), // center of the sphere in local space
  0.5, // radius of the sphere
  scene // containing scene
);
body.shape = shape;
body2.shape = shape;
body3.shape = shape;

----------------------------------------

TITLE: Initializing a Cloth Physics Impostor
DESCRIPTION: Implementation of a 2D cloth physics impostor with configuration for velocity, position iterations, and stiffness

LANGUAGE: javascript
CODE:
cloth.physicsImpostor = new BABYLON.PhysicsImpostor(ground, BABYLON.PhysicsImpostor.ClothImpostor, { margin: 0.25, damping: 0.01 }, scene);
cloth.physicsImpostor.velocityIterations = 10;
cloth.physicsImpostor.positionIterations = 10;
cloth.physicsImpostor.stiffness = 1;

----------------------------------------

TITLE: Rotating Mesh Using TransformNode in Babylon.js
DESCRIPTION: Creates a TransformNode as a pivot point, parents the mesh to it, and rotates the TransformNode. This method can improve performance for complex scenes.

LANGUAGE: javascript
CODE:
var pivot = new BABYLON.TransformNode("root");
pivot.position = CoR_At;

pilot.parent = pivot;
pilot.position = pilotStart;

pivot.rotate(axis, angle, BABYLON.Space.WORLD);

----------------------------------------

TITLE: Creating a Rotating Disc World Animation in Babylon.js
DESCRIPTION: Implements a rotating disc world with buildings, using matrix transformations to maintain proper positioning of merged box meshes relative to the disc's movement and rotation.

LANGUAGE: javascript
CODE:
var phi = 0;
scene.registerAfterRender(function () {
    matrix = disc.getWorldMatrix();
    disc.rotate(BABYLON.Axis.Y, Math.PI / 150, BABYLON.Space.LOCAL);
    disc.rotate(BABYLON.Axis.Z, Math.PI / 200, BABYLON.Space.LOCAL);
    disc.position = new BABYLON.Vector3(15 * Math.cos(phi), 16 * Math.sin(phi), 5)
    boxes.rotationQuaternion = disc.rotationQuaternion;
    boxes.position = BABYLON.Vector3.TransformCoordinates(boxes_position, matrix);
    phi +=0.01;
});

----------------------------------------

TITLE: Creating Motorized Joint
DESCRIPTION: Implementation of creating a motorized joint with optional speed and torque parameters. This allows for powered movement of connected bodies.

LANGUAGE: javascript
CODE:
var joint = new BABYLON.MotorEnabledJoint(BABYLON.PhysicsJoint.TYPE_OF_JOINT, jointData);

mainImpostor.addJoint(connectedImpostor, joint);

joint.setMotor(target speed, maximum torque);

----------------------------------------

TITLE: Executing Consecutive Animations in Babylon.js
DESCRIPTION: This snippet demonstrates how to execute consecutive animations using the beginDirectAnimation function and a callback function for the next animation.

LANGUAGE: javascript
CODE:
const nextAnimation = function () {
  scene.beginDirectAnimation(box, [xSlide], 0, 2 * frameRate, true);
};

scene.beginDirectAnimation(box, [yRot], 0, 2 * frameRate, false, 1, nextAnimation);

----------------------------------------

TITLE: Creating Ambient Sound in Babylon.js
DESCRIPTION: Creates a looping ambient sound that auto-plays when ready. Shows basic Sound constructor usage with options for looping and autoplay.

LANGUAGE: javascript
CODE:
const music = new BABYLON.Sound("Music", "music.wav", scene, null, {
  loop: true,
  autoplay: true,
});

----------------------------------------

TITLE: Creating and Updating Tubes with MeshBuilder in Babylon.js
DESCRIPTION: This snippet demonstrates how to create and update a tube mesh using the MeshBuilder.CreateTube method. It shows the basic options structure and how to update an existing tube instance.

LANGUAGE: javascript
CODE:
const options = {
    path: myPath, //vec3 array,
    updatable: true
}

let tube = BABYLON.MeshBuilder.CreateTube("tube", options, scene);  //scene is optional and defaults to the current scene

// Update
options.path[0].x +=6; 
options.instance = tube;
tube = BABYLON.MeshBuilder.CreateTube("tube", options); //No scene parameter when using instance

----------------------------------------

TITLE: Rotating Mesh Using Pivot in Babylon.js
DESCRIPTION: Sets a pivot point for the mesh using setPivotMatrix. The mesh is positioned and then rotated around the pivot point.

LANGUAGE: javascript
CODE:
var CoR_At = new BABYLON.Vector3(1, 3, 2);
var pilotStart = new BABYLON.Vector3(3, 6, 6);

pilot.position = pilotStart;

var pivotTranslate = pilotStart.subtract(CoR_At);
pilot.setPivotMatrix(BABYLON.Matrix.Translation(pivotTranslate.x, pivotTranslate.y, pivotTranslate.z));

LANGUAGE: javascript
CODE:
/*-------------------Rotation Animation--------------------*/
var angle = 0.025;
scene.registerAfterRender(function () {
    pilot.rotate(axis, angle, BABYLON.Space.LOCAL);
});

----------------------------------------

TITLE: Initializing a Node Material in JavaScript
DESCRIPTION: Creates a new Node Material instance with options for emitting comments and specifying the shader language.

LANGUAGE: JavaScript
CODE:
const nodeMaterial = new BABYLON.NodeMaterial("node material", scene, { emitComments: true });

----------------------------------------

TITLE: Loading Assets into a Container in Babylon.js
DESCRIPTION: Shows how to use SceneLoader.LoadAssetContainer to load assets into a container without appending them to the scene immediately.

LANGUAGE: javascript
CODE:
BABYLON.SceneLoader.LoadAssetContainer("./", "duck.gltf", scene, function (container) {
  const meshes = container.meshes;
  const materials = container.materials;
  //...

  // Adds all elements to the scene
  container.addAllToScene();
});

----------------------------------------

TITLE: ArcRotate Camera Construction in Babylon.js
DESCRIPTION: Demonstrates creation and setup of an ArcRotate Camera with position and control configuration.

LANGUAGE: javascript
CODE:
// Parameters: name, alpha, beta, radius, target position, scene
const camera = new BABYLON.ArcRotateCamera("Camera", 0, 0, 10, new BABYLON.Vector3(0, 0, 0), scene);

// Positions the camera overwriting alpha, beta, radius
camera.setPosition(new BABYLON.Vector3(0, 0, 20));

// This attaches the camera to the canvas
camera.attachControl(canvas, true);

----------------------------------------

TITLE: Creating a Capsule with MeshBuilder in Babylon.js
DESCRIPTION: This snippet demonstrates how to create a capsule mesh using the MeshBuilder.CreateCapsule method in Babylon.js. It includes various options for customizing the capsule's properties.

LANGUAGE: javascript
CODE:
const capsule = BABYLON.MeshBuilder.CreateCapsule("ribbon", options, scene);  //scene is optional and defaults to the current scene

----------------------------------------

TITLE: Building PCS Mesh Asynchronously
DESCRIPTION: Async construction of PCS mesh with model cleanup

LANGUAGE: javascript
CODE:
pcs.addSurfacePoints(box, 10000, BABYLON.PointColor.Color);
pcs.addPoints(10000, myFunc);
pcs.buildMeshAsync().then(() => box.dispose());

----------------------------------------

TITLE: Creating a StackPanel3D in Babylon.js
DESCRIPTION: Demonstrates how to create a vertical StackPanel3D container for organizing 3D GUI controls.

LANGUAGE: javascript
CODE:
const panel = new BABYLON.GUI.StackPanel3D();
panel.isVertical = true;

----------------------------------------

TITLE: Initializing GizmoManager in Babylon.js
DESCRIPTION: Creates a new GizmoManager instance for the scene. The GizmoManager provides a default setup for gizmos and manages their attachment to objects.

LANGUAGE: javascript
CODE:
const gizmoManager = new BABYLON.GizmoManager(scene);

----------------------------------------

TITLE: Applying Impulses to Physics Objects
DESCRIPTION: Shows how to apply impulses to physics imposters at different contact points including center of mass and local reference points.

LANGUAGE: javascript
CODE:
imposter.applyImpulse(impluse_vector, contact_vector);

let localRefPoint = new BABYLON.Vector3(x, y, z);

imposter.applyImpulse(ImpulseVector, mesh.getAbsolutePosition()); //impulse at center of mass

imposter.applyImpulse(ImpulseVector, mesh.getAbsolutePosition().add(localRefPoint)); //impulse at a local point

----------------------------------------

TITLE: Attaching a Mesh to a Bone in Babylon.js
DESCRIPTION: Shows how to attach a mesh (like a sword) to a specific bone in a skeleton.

LANGUAGE: javascript
CODE:
sword.attachToBone(skeleton.bones[34], character);

----------------------------------------

TITLE: Setting Material Transparency in Babylon.js
DESCRIPTION: Sets the alpha property of a material to create transparency. The alpha value ranges from 0 (invisible) to 1 (opaque).

LANGUAGE: javascript
CODE:
myMaterial.alpha = 0.5;

----------------------------------------

TITLE: Creating Physics Compound Shapes in BabylonJS
DESCRIPTION: Demonstrates how to create a compound physics shape by combining a sphere and box to represent a character mesh. The example shows creating transform nodes, physics shapes, and combining them into a container for better collision approximation.

LANGUAGE: javascript
CODE:
const myMesh = BABYLON.SceneLoader.ImportMeshAsync(...);

const headNode = new BABYLON.TransformNode("headNode");
headNode.position.y = 3;
headNode.parent = myMesh;
const bodyNode = new BABYLON.TransformNode("bodyNode");
bodyNode.parent = myMesh;

const boxShape = new BABYLON.PhysicsShapeBox(new BABYLON.Vector3(0, 0, 0), new BABYLON.Quaternion(0, 0, 0, 1), new BABYLON.Vector3(1, 2, 1), scene);
const sphereShape = new BABYLON.PhysicsShapeSphere(new BABYLON.Vector3(0, 0, 0), 1, scene);

const parentShape = new BABYLON.PhysicsShapeContainer(scene);

parentShape.addChildFromParent(myMesh, boxShape, bodyNode);
parentShape.addChildFromParent(myMesh, sphereShape, headNode);

const body = new BABYLON.PhysicsBody(myMesh, scene);
body.shape = parentShape;

----------------------------------------

TITLE: Applying Per-Mesh Clip Planes in Babylon.js
DESCRIPTION: Demonstrates how to apply clip planes to specific meshes using render observables. This method sets a clip plane before rendering a sphere and removes it after.

LANGUAGE: javascript
CODE:
sphere.onBeforeRenderObservable.add(function() {
    scene.clipPlane = new BABYLON.Plane(1, 0, 0, 0);
});

sphere.onAfterRenderObservable.add(function() {
    scene.clipPlane = null;
});

----------------------------------------

TITLE: Creating Basic Thin Instances in JavaScript
DESCRIPTION: Demonstrates how to create a basic thin instance and add it to a sphere mesh. Also shows how to update an existing thin instance.

LANGUAGE: javascript
CODE:
var matrix = BABYLON.Matrix.Translation(-2, 2, 0);
var idx = sphere.thinInstanceAdd(matrix);

var idx2 = sphere.thinInstanceAddSelf();

var matrix2 = BABYLON.Matrix.Translation(2, 1, 0);
sphere.thinInstanceSetMatrixAt(idx2, matrix2);

----------------------------------------

TITLE: Animating VRM Humanoid Bones in Babylon.js
DESCRIPTION: Example code showing how to animate VRM humanoid bones by applying quaternion rotations to different body parts. This creates a walking-like animation that can be applied to any VRM model.

LANGUAGE: javascript
CODE:
vrmManager.humanoidBone.leftShoulder.rotationQuaternion = Quaternion.FromEulerAngles(Math.sin((Math.PI / 4) * (elapsedTime / 200)), 0, Math.PI / 3.5);
vrmManager.humanoidBone.rightShoulder.rotationQuaternion = Quaternion.FromEulerAngles(Math.sin(Math.PI + (Math.PI / 4) * (elapsedTime / 200)), 0, -Math.PI / 3.5);
vrmManager.humanoidBone.leftUpperLeg.rotationQuaternion = Quaternion.FromEulerAngles(Math.sin((Math.PI / 4) * (elapsedTime / 200)), 0, 0);
vrmManager.humanoidBone.rightUpperLeg.rotationQuaternion = Quaternion.FromEulerAngles(Math.sin(Math.PI + (Math.PI / 4) * (elapsedTime / 200)), 0, 0);
vrmManager.humanoidBone.leftLowerLeg.rotationQuaternion = Quaternion.FromEulerAngles(-Math.PI / 6, 0, 0);
vrmManager.humanoidBone.rightLowerLeg.rotationQuaternion = Quaternion.FromEulerAngles(-Math.PI / 6, 0, 0);

----------------------------------------

TITLE: Creating WebXR Default Experience in JavaScript
DESCRIPTION: This snippet demonstrates how to create a WebXR Default Experience using the scene's helper function or the static factory method.

LANGUAGE: javascript
CODE:
var defaultXRExperience = await scene.createDefaultXRExperienceAsync( /* optional configuration options */ );

LANGUAGE: javascript
CODE:
var defaultXRExperience = await WebXRDefaultExperience.CreateAsync(scene, /* optional configuration options */ )

----------------------------------------

TITLE: Handling Input Changes in Babylon.js DeviceSourceManager
DESCRIPTION: Shows how to use an event-based system to handle input changes for keyboards and pointers.

LANGUAGE: javascript
CODE:
deviceSourceManager.getDeviceSource(BABYLON.DeviceType.Keyboard).onInputChangedObservable.add((eventData) => {
  // Handle input change
});

----------------------------------------

TITLE: Using Lightmaps in Babylon.js
DESCRIPTION: Shows how to use lightmaps to store pre-calculated lighting in a texture for a mesh in Babylon.js.

LANGUAGE: javascript
CODE:
const lightmap = new BABYLON.Texture("lightmap.png", scene);
const material = new BABYLON.StandardMaterial("material", scene);
material.lightmapTexture = lightmap;

----------------------------------------

TITLE: Initializing GamepadManager in Babylon.js
DESCRIPTION: Creates a new GamepadManager instance to handle gamepad input in Babylon.js.

LANGUAGE: javascript
CODE:
const gamepadManager = new BABYLON.GamepadManager();

----------------------------------------

TITLE: Initializing Skeleton and Bone in Babylon.js
DESCRIPTION: Creates a new skeleton and bone using the Babylon.js constructors.

LANGUAGE: javascript
CODE:
BABYLON.Skeleton = function (name, id, scene)
BABYLON.Bone = function (name, skeleton, parentBone, matrix)

----------------------------------------

TITLE: Creating a Grid Layout in Babylon.js GUI
DESCRIPTION: This snippet shows how to create a grid layout and add controls to specific cells in Babylon.js GUI.

LANGUAGE: JavaScript
CODE:
const grid = new BABYLON.GUI.Grid();
grid.addColumnDefinition(100, true);
grid.addColumnDefinition(0.5);
grid.addColumnDefinition(0.5);
grid.addColumnDefinition(100, true);
grid.addRowDefinition(0.5);
grid.addRowDefinition(0.5);

// This rect will be on first row and second column
const rect = new BABYLON.GUI.Rectangle();
rect.background = "green";
rect.thickness = 0;
grid.addControl(rect, 0, 1);

// This rect will be on second row and third column
rect = new BABYLON.GUI.Rectangle();
rect.background = "red";
rect.thickness = 0;
grid.addControl(rect, 1, 2);

----------------------------------------

TITLE: Configuring Controller-Based Movement Direction
DESCRIPTION: Shows how to configure the Movement feature to use the controller for setting movement direction, instead of the default head direction. This includes options for disabling head-direction and specifying the preferred hand for rotation.

LANGUAGE: javascript
CODE:
const featureManager = xrHelper.baseExperience.featuresManager;

const movementFeature = featureManager.enableFeature(BABYLON.WebXRFeatureName.MOVEMENT, "latest", {
  xrInput: xr.input,
  // add options here
  movementOrientationFollowsViewerPose: false, // default true
  movementOrientationFollowsController: true, // enable controller direction
  orientationPreferredHandedness: "left", // the preferred hand for rotation. Defaults to right. If hand is not found it will use the first found controller.
});

----------------------------------------

TITLE: Creating a Ground with Mesh in Babylon.js
DESCRIPTION: This snippet shows how to create a ground mesh using the BABYLON.MeshBuilder.CreateGround method with the Mesh approach. It allows specifying width, height, subdivisions, and an optional updatable parameter.

LANGUAGE: javascript
CODE:
const ground = BABYLON.MeshBuilder.CreateGround("ground", { width, height, subdivisions }, scene);
const ground = BABYLON.MeshBuilder.CreateGround("ground", { width, height, subdivisions }, scene, updatable); //one optional parameter after scene

----------------------------------------

TITLE: Passing a Texture to ShaderMaterial in Babylon.js
DESCRIPTION: This snippet shows how to create a ShaderMaterial with a texture sampler and how to set the texture using the setTexture method.

LANGUAGE: javascript
CODE:
const myShaderMaterial = new BABYLON.ShaderMaterial("shader", scene, "./COMMON_NAME", {
  "attributes": ["position", "uv"],
  "uniforms": ["worldViewProjection"],
  "samplers": ["textureSampler"]
});
const amigaTexture = new BABYLON.Texture("amiga.jpg", scene);
myShaderMaterial.setTexture("textureSampler", amigaTexture);

----------------------------------------

TITLE: Creating a Torus Knot with MeshBuilder in Babylon.js
DESCRIPTION: This snippet demonstrates how to create a torus knot using the MeshBuilder.CreateTorusKnot method in Babylon.js. It includes an options object for customizing the knot's properties such as radius, tube thickness, segments, and windings.

LANGUAGE: javascript
CODE:
const torus = BABYLON.MeshBuilder.CreateTorusKnot("torusKnot", options, scene);

----------------------------------------

TITLE: Creating BabylonScene Component in Vue 3
DESCRIPTION: Vue 3 component that sets up a canvas for BabylonJS and initializes the scene on mount.

LANGUAGE: jsx
CODE:
<template>
  <canvas ref="bjsCanvas" width="500" height="500" />
</template>

<script>
import { ref, onMounted } from "@vue/runtime-core";
import { createScene } from "../scenes/MyFirstScene";

export default {
  name: "BabylonScene",
  setup() {
    const bjsCanvas = ref(null);

    onMounted(() => {
      if (bjsCanvas.value) {
        createScene(bjsCanvas.value);
      }
    });

    return {
      bjsCanvas,
    };
  },
};
</script>

----------------------------------------

TITLE: Anisotropy Configuration in PBR
DESCRIPTION: Configure anisotropic properties for directional reflections

LANGUAGE: javascript
CODE:
const pbr = new BABYLON.PBRMaterial("pbr", scene);
pbr.metallic = 1.0;
pbr.roughness = 0.0;

pbr.anisotropy.isEnabled = true;
pbr.anisotropy.intensity = 0.5;

----------------------------------------

TITLE: Creating Plane with MeshBuilder in Babylon.js
DESCRIPTION: Creates a plane using BABYLON.MeshBuilder.CreatePlane() with customizable options including size, width, height, and orientation. This method offers more flexibility in plane creation with various configuration options.

LANGUAGE: javascript
CODE:
const plane = BABYLON.MeshBuilder.CreatePlane("plane", options, scene);

----------------------------------------

TITLE: Loading STL File Loader via CDN
DESCRIPTION: Basic HTML script setup to include the Babylon.js core library and STL file loader from CDN.

LANGUAGE: html
CODE:
<script src="Babylon.js"></script>
<script src="babylon.stlFileLoader.js"></script>

----------------------------------------

TITLE: Setting Scene Gravity in Babylon.js
DESCRIPTION: Defines and applies gravity to the scene using a Vector3 object to specify direction and magnitude of gravitational force.

LANGUAGE: javascript
CODE:
scene.gravity = new BABYLON.Vector3(0, -0.15, 0);

----------------------------------------

TITLE: Defining Key Frames for Babylon.js Animation
DESCRIPTION: This code sets up the key frames for a Babylon.js animation. It creates an array of objects, each representing a key frame with a frame number and corresponding value. The key frames are then added to the animation using setKeys().

LANGUAGE: javascript
CODE:
const keyFrames = [];

keyFrames.push({
  frame: 0,
  value: 2,
});

keyFrames.push({
  frame: frameRate,
  value: -2,
});

keyFrames.push({
  frame: 2 * frameRate,
  value: 2,
});

xSlide.setKeys(keyFrames);

----------------------------------------

TITLE: Creating a Physics Container Shape in Babylon.js
DESCRIPTION: Demonstrates how to create a container physics shape, which can hold multiple child shapes. This is useful for complex objects that can't be represented by a single shape.

LANGUAGE: javascript
CODE:
const shape = new BABYLON.PhysicsShapeContainer(
    scene   // scene of the shape
)

----------------------------------------

TITLE: Registering a Plugin Factory with Dynamic Import in TypeScript
DESCRIPTION: This snippet shows how to register a plugin factory that dynamically imports the plugin implementation. This approach allows for lazy loading of the plugin.

LANGUAGE: typescript
CODE:
import { RegisterSceneLoaderPlugin } from "@babylonjs/core/Loading/sceneLoader";

RegisterSceneLoaderPlugin({
  name: "myCustomImporter",
  extensions: ".myCustomExtension",
  createPlugin: async () => {
    const { MyCustomImporter } = await import("./MyCustomImporter");
    return new MyCustomImporter();
  },
});

----------------------------------------

TITLE: Creating Basic Selection Panel in Babylon.js
DESCRIPTION: Shows the basic syntax for creating a selection panel control in Babylon.js GUI system.

LANGUAGE: javascript
CODE:
new BABYLON.GUI.SelectionPanel(name);

----------------------------------------

TITLE: Implementing Satellite Movement Animation in Babylon.js
DESCRIPTION: Creates an animation where a small box emerges from and travels perpendicular to a larger rotating box. Uses world matrix transformation and rotation quaternions to maintain proper positioning and orientation.

LANGUAGE: javascript
CODE:
scene.registerAfterRender(function () {
    box.rotate(BABYLON.Axis.Y, Math.PI / 150, BABYLON.Space.LOCAL);
    box.rotate(BABYLON.Axis.X, Math.PI / 200, BABYLON.Space.LOCAL);
    box.translate(new BABYLON.Vector3(-1, -1, -1).normalize(), 0.001, BABYLON.Space.WORLD)
    small.rotationQuaternion = box.rotationQuaternion;
    matrix = box.getWorldMatrix();
    y += 0.001;
    local_pos = new BABYLON.Vector3(0, y, 0);
    small.position = BABYLON.Vector3.TransformCoordinates(local_pos, matrix);
})

----------------------------------------

TITLE: Creating and Customizing Cell Material in Babylon.js
DESCRIPTION: Demonstrates how to create a new cell material, set up diffuse textures and colors, and configure the lighting level computation. The cell material can compute up to 5 different lighting levels when computeHighLevel is true, or 2 levels when false.

LANGUAGE: javascript
CODE:
// Create a new cell material
var cell = new BABYLON.CellMaterial("cell", scene);

// Set up the diffuse texture
cell.diffuseTexture = new BABYLON.Texture("textures/amiga.jpg", scene);

// Set up diffuse color
cell.diffuseColor = new BABYLON.Color3(1, 0.5, 0);

// Set the material to be high level (default value is true)
// The high level can compute until 5 different lighting levels
// If false, only two levels are available
cell.computeHighLevel = true;

----------------------------------------

TITLE: Customizing Edge Rendering Epsilon in Babylon.js
DESCRIPTION: This snippet shows how to enable edge rendering with a custom epsilon value. The epsilon determines the angle threshold for rendering edges between faces.

LANGUAGE: javascript
CODE:
box.enableEdgesRendering(0.9999);

----------------------------------------

TITLE: Creating Navigation Mesh
DESCRIPTION: Generates a navigation mesh from multiple scene meshes using the configured parameters.

LANGUAGE: javascript
CODE:
navigationPlugin.createNavMesh([groundMesh, wallMesh1, wallMesh2, stair1, stair2], parameters);

----------------------------------------

TITLE: Loading Character Assets in Babylon.js
DESCRIPTION: Creates collision mesh and character mesh for the player.

LANGUAGE: javascript
CODE:
//collision mesh
const outer = MeshBuilder.CreateBox("outer", { width: 2, depth: 1, height: 3 }, scene);
outer.isVisible = false;
outer.isPickable = false;
outer.checkCollisions = true;

//move origin of box collider to the bottom of the mesh (to match imported player mesh)
outer.bakeTransformIntoVertices(Matrix.Translation(0, 1.5, 0));

//for collisions
outer.ellipsoid = new Vector3(1, 1.5, 1);
outer.ellipsoidOffset = new Vector3(0, 1.5, 0);

outer.rotationQuaternion = new Quaternion(0, 1, 0, 0); // rotate the player mesh 180 since we want to see the back of the player

var box = MeshBuilder.CreateBox("Small1", { width: 0.5, depth: 0.5, height: 0.25, faceColors: [new Color4(0, 0, 0, 1), new Color4(0, 0, 0, 1), new Color4(0, 0, 0, 1), new Color4(0, 0, 0, 1), new Color4(0, 0, 0, 1), new Color4(0, 0, 0, 1)] }, scene);
box.position.y = 1.5;
box.position.z = 1;

var body = Mesh.CreateCylinder("body", 3, 2, 2, 0, 0, scene);
var bodymtl = new StandardMaterial("red", scene);
bodymtl.diffuseColor = new Color3(0.8, 0.5, 0.5);
body.material = bodymtl;
body.isPickable = false;
body.bakeTransformIntoVertices(Matrix.Translation(0, 1.5, 0)); // simulates the imported mesh's origin

//parent the meshes
box.parent = body;
body.parent = outer;

return {
    mesh: outer as Mesh
}

----------------------------------------

TITLE: Initializing Morph Target Manager
DESCRIPTION: Creates a new MorphTargetManager and assigns it to a mesh. This is the first step in implementing morph targets.

LANGUAGE: javascript
CODE:
const manager = new BABYLON.MorphTargetManager();
sphere.morphTargetManager = manager;

----------------------------------------

TITLE: Positioning Reflection Probe in Babylon.js
DESCRIPTION: This snippet demonstrates two methods for positioning a reflection probe: attaching it to a mesh or setting its position directly.

LANGUAGE: javascript
CODE:
probe.attachToMesh(root);
// or
probe.position = new BABYLON.Vector3(0, 1, 0);

----------------------------------------

TITLE: Enabling Sprite Picking in Babylon.js
DESCRIPTION: Code showing how to enable picking for sprite managers and individual sprites. Both the sprite manager and individual sprites must be set as pickable.

LANGUAGE: javascript
CODE:
mySpriteManager.isPickable = true;
mySpritePackedManager.isPickable = true;
mySprite.isPickable = true;

----------------------------------------

TITLE: Enabling and Disabling Lights in Babylon.js
DESCRIPTION: Shows how to enable and disable lights in a Babylon.js scene using the setEnabled method.

LANGUAGE: javascript
CODE:
light.setEnabled(false);
light.setEnabled(true);

----------------------------------------

TITLE: Spatial Sound Implementation
DESCRIPTION: Creates and configures spatial sound effects with distance-based parameters and mesh attachment for 3D audio positioning.

LANGUAGE: javascript
CODE:
var SFX = new BABYLON.Sound("gunshot", "sounds/gunshot.wav", scene, null, { maxDistance: 50, loop: false, autoplay: false, spatialSound: true });

SFX.attachToMesh(blubox);

blubox.actionManager.registerAction(new BABYLON.PlaySoundAction(BABYLON.ActionManager.OnPickTrigger, SFX));

----------------------------------------

TITLE: Configuring Scene Auto-Clear in Babylon.js
DESCRIPTION: Setting up scenes with proper auto-clear configuration to prevent rendering conflicts between multiple scenes.

LANGUAGE: javascript
CODE:
var scene0 = new BABYLON.Scene(engine);
var scene1 = new BABYLON.Scene(engine);
scene1.autoClear = false;

----------------------------------------

TITLE: Setting Absolute Mesh Position in Babylon.js
DESCRIPTION: Demonstrates different methods to set absolute position of a mesh in world space using Vector3 and direct position assignment. These methods work consistently regardless of mesh rotation.

LANGUAGE: javascript
CODE:
mesh.position = new Vector3(2, 3, 4);//(2, 3, 4)
mesh.position.addInPlace(new Vector3(2, 3, 4)); //(-1 + 2, 2 + 3, 1 + 4) = (1, 5, 5)
mesh.translate(new BABYLON.Vector3(2, 3, 4), 1, BABYLON.Space.WORLD); //(-1 + 2, 2 + 3, 1 + 4) = (1, 5, 5)

----------------------------------------

TITLE: Implementing ISceneLoaderPluginAsync Interface in TypeScript
DESCRIPTION: This snippet demonstrates how to create a custom file importer by implementing the ISceneLoaderPluginAsync interface. It includes basic structure and required methods.

LANGUAGE: typescript
CODE:
import { ISceneLoaderPluginAsync } from "@babylonjs/core/Loading/sceneLoader";

class MyCustomImporter implements ISceneLoaderPluginAsync {
  public readonly name = "myCustomImporter";

  public readonly extensions = ".myCustomExtension";

  public async importMeshAsync(...) {
    // Load specified meshes into the Scene
  }

  public async loadAsync(...) {
    // Load all data into the Scene
  }

  public async loadAssetContainerAsync(...) {
    // Load all data into an AssetContainer
  }
}

----------------------------------------

TITLE: Creating WebXR Color Picker GUI
DESCRIPTION: Implements a color picker interface using Babylon.js GUI controls for WebXR interaction.

LANGUAGE: javascript
CODE:
// GUI
var plane = BABYLON.Mesh.CreatePlane("plane", 1);
plane.position = new BABYLON.Vector3(1.4, 1.5, 0.4);
var advancedTexture = BABYLON.GUI.AdvancedDynamicTexture.CreateForMesh(plane);
var panel = new BABYLON.GUI.StackPanel();
advancedTexture.addControl(panel);
var header = new BABYLON.GUI.TextBlock();
header.text = "Color GUI";
header.height = "100px";
header.color = "white";
header.textHorizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER;
header.fontSize = "120";
panel.addControl(header);
var picker = new BABYLON.GUI.ColorPicker();
picker.value = sphere.material.diffuseColor;
picker.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER;
picker.height = "350px";
picker.width = "350px";
picker.onValueChangedObservable.add(function (value) {
  sphere.material.diffuseColor.copyFrom(value);
});
panel.addControl(picker);

----------------------------------------

TITLE: Applying Textures to a Standard Material in Babylon.js
DESCRIPTION: Demonstrates how to apply diffuse, specular, emissive, and ambient textures to a StandardMaterial. This allows for more complex material appearances beyond solid colors.

LANGUAGE: javascript
CODE:
const myMaterial = new BABYLON.StandardMaterial("myMaterial", scene);

myMaterial.diffuseTexture = new BABYLON.Texture("PATH TO IMAGE", scene);
myMaterial.specularTexture = new BABYLON.Texture("PATH TO IMAGE", scene);
myMaterial.emissiveTexture = new BABYLON.Texture("PATH TO IMAGE", scene);
myMaterial.ambientTexture = new BABYLON.Texture("PATH TO IMAGE", scene);

mesh.material = myMaterial;

----------------------------------------

TITLE: Creating and Joining Custom Curves in Babylon.js
DESCRIPTION: This code snippet demonstrates how to create a custom Curve3 object from an array of Vector3 points and how to join multiple curves using the continue() method.

LANGUAGE: javascript
CODE:
const mySinus = [];
for (let i = 0; i < 30; i++) {
  mySinus.push(new BABYLON.Vector3(i, Math.sin(i / 10), 0));
}
const mySinusCurve = new BABYLON.Curve3(mySinus);

const myFullCurve = mySinusCurve.continue(bezier3).continue(bezier2);

const path = myFullCurve.getPoints();
const extruded = BABYLON.Mesh.ExtrudeShape("extrudedShape", shape, path, 1, 0, scene);

const l = myFullCurve.length();

----------------------------------------

TITLE: Creating a Physics Character Controller in Babylon.js
DESCRIPTION: This snippet demonstrates how to create a physics character controller in Babylon.js. It creates a display capsule and initializes the character controller with specified dimensions and position.

LANGUAGE: javascript
CODE:
let h = 1.8;
let r = 0.6;
let displayCapsule = BABYLON.MeshBuilder.CreateCapsule("CharacterDisplay", { height: h, radius: r }, scene);
let characterPosition = new BABYLON.Vector3(3, 0.3, -8);
let characterController = new BABYLON.PhysicsCharacterController(characterPosition, { capsuleHeight: h, capsuleRadius: r }, scene);

----------------------------------------

TITLE: Creating a Ground with MeshBuilder in Babylon.js
DESCRIPTION: This snippet demonstrates how to create a ground mesh using the BABYLON.MeshBuilder.CreateGround method. It allows specifying options such as width, height, and subdivisions.

LANGUAGE: javascript
CODE:
const ground = BABYLON.MeshBuilder.CreateGround("ground", options, scene); //scene is optional and defaults to the current scene

----------------------------------------

TITLE: Creating a 2D Line in XoY Plane with Set Width
DESCRIPTION: This function creates a 2D line mesh in the XoY plane with a specified width. It supports open and closed lines, and can apply textures in different ways.

LANGUAGE: javascript
CODE:
var line2D = function(name, options, scene) {
    // ... (full code not shown for brevity)
}

----------------------------------------

TITLE: Registering Plugin Factory with Custom Options in TypeScript
DESCRIPTION: This snippet shows how to register a plugin factory that accepts custom options and passes them to the plugin constructor.

LANGUAGE: typescript
CODE:
import { RegisterSceneLoaderPlugin } from "@babylonjs/core/Loading/sceneLoader";

RegisterSceneLoaderPlugin({
  name: "myCustomImporter",
  extensions: ".myCustomExtension",
  createPlugin: async (options) => {
    const { MyCustomImporter } = await import("./MyCustomImporter");
    return new MyCustomImporter(options["myCustomImporter"]);
  },
});

----------------------------------------

TITLE: Customizing GlowLayer Color Per Mesh in Babylon.js
DESCRIPTION: Implements a custom color selector function to override the glow color for specific meshes.

LANGUAGE: javascript
CODE:
const gl = new BABYLON.GlowLayer("glow", scene);
gl.customEmissiveColorSelector = function (mesh, subMesh, material, result) {
  if (mesh.name === "lightsaber") {
    result.set(1, 0, 1, 1);
  } else {
    result.set(0, 0, 0, 0);
  }
};

----------------------------------------

TITLE: Initializing TrailMesh in Babylon.js
DESCRIPTION: Basic setup of a TrailMesh with configuration options including diameter, length, segments, sections, and auto-start settings.

LANGUAGE: javascript
CODE:
let options = {
    diameter: 1.5,
    length: 100,
    segments: 10,
    sections: 4,
    doNotTaper: false,
    autoStart: true
};
const trail = new BABYLON.TrailMesh(name, generator, scene, options);

trail.start(); // Starts the trailing mesh.
trail.stop(); // Stops the trailing mesh.

----------------------------------------

TITLE: Registering a View without Camera in Babylon.js
DESCRIPTION: Creates a view by registering only a canvas with the Babylon.js engine. This allows rendering to the view without changing the active scene's camera.

LANGUAGE: javascript
CODE:
let view = engine.registerView(document.getElementById("renderCanvas1"));

----------------------------------------

TITLE: Initializing Ragdoll Instance
DESCRIPTION: Creates a new ragdoll instance using a skeleton, mesh, and configuration. The ragdoll starts in Kinematic mode where physics bodies can interact but are driven by animation.

LANGUAGE: javascript
CODE:
const ragdoll = new BABYLON.Ragdoll(skeleton, newMeshes[0], config);

----------------------------------------

TITLE: Creating Detailed Torus with Parameters
DESCRIPTION: Creates a torus with explicit parameter specifications including diameter, thickness, tessellation, and side orientation options. This version shows the full parameter usage format.

LANGUAGE: javascript
CODE:
const torus = BABYLON.MeshBuilder.CreateTorus("torus", {diameter, thickness, tessellation, updatable, sideOrientation}, scene);

----------------------------------------

TITLE: Creating a Quadratic Bezier Curve in Babylon.js
DESCRIPTION: This code snippet demonstrates how to create a quadratic Bezier curve using the Curve3.CreateQuadraticBezier method in Babylon.js.

LANGUAGE: javascript
CODE:
const bezier2 = BABYLON.Curve3.CreateQuadraticBezier(origin, control, destination, nb_of_points);

const path = bezier2.getPoints();
const l = bezier2.length();

----------------------------------------

TITLE: Setting Mesh Rotation Using Vector3
DESCRIPTION: Demonstrates how to set mesh rotation using a BABYLON.Vector3 object with Euler angles in radians.

LANGUAGE: javascript
CODE:
mesh.rotation = new BABYLON.Vector3(alpha, beta, gamma); //alpha, beta, gamma in radians

----------------------------------------

TITLE: Complete Babylon.js Scene with Havok Physics
DESCRIPTION: Full HTML implementation demonstrating Babylon.js scene creation with Havok physics integration, including sphere and ground objects with physics properties

LANGUAGE: html
CODE:
<!DOCTYPE html>
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

    <title>Babylon.js using Havok</title>

    <!-- Babylon.js -->
    <script src="https://cdn.babylonjs.com/havok/HavokPhysics_umd.js"></script>
    <script src="https://cdn.babylonjs.com/babylon.js"></script>
    <script src="https://cdn.babylonjs.com/gui/babylon.gui.min.js"></script>

    <style>
      html,
      body {
        overflow: hidden;
        width: 100%;
        height: 100%;
        margin: 0;
        padding: 0;
      }

      #renderCanvas {
        width: 100%;
        height: 100%;
        touch-action: none;
      }

      #canvasZone {
        width: 100%;
        height: 100%;
      }
    </style>
  </head>
  <body>
    <div id="canvasZone"><canvas id="renderCanvas"></canvas></div>
    <script>
      const canvas = document.getElementById("renderCanvas");
      const engine = new BABYLON.Engine(canvas, true, { preserveDrawingBuffer: true, stencil: true, disableWebGL2Support: false });
      const createScene = async function () {
        const scene = new BABYLON.Scene(engine);
        const camera = new BABYLON.FreeCamera("camera1", new BABYLON.Vector3(0, 5, -10), scene);
        camera.setTarget(BABYLON.Vector3.Zero());
        camera.attachControl(canvas, true);
        const light = new BABYLON.HemisphericLight("light", new BABYLON.Vector3(0, 1, 0), scene);
        light.intensity = 0.7;
        const sphere = BABYLON.MeshBuilder.CreateSphere("sphere", { diameter: 2, segments: 32 }, scene);
        sphere.position.y = 4;
        const ground = BABYLON.MeshBuilder.CreateGround("ground", { width: 10, height: 10 }, scene);
        const havokInstance = await HavokPhysics();
        const hk = new BABYLON.HavokPlugin(true, havokInstance);
        scene.enablePhysics(new BABYLON.Vector3(0, -9.8, 0), hk);
        const sphereAggregate = new BABYLON.PhysicsAggregate(sphere, BABYLON.PhysicsShapeType.SPHERE, { mass: 1, restitution: 0.75 }, scene);
        const groundAggregate = new BABYLON.PhysicsAggregate(ground, BABYLON.PhysicsShapeType.BOX, { mass: 0 }, scene);
        return scene;
      };

      createScene().then((scene) => {
        engine.runRenderLoop(function () {
          if (scene) {
            scene.render();
          }
        });
      });
      window.addEventListener("resize", function () {
        engine.resize();
      });
    </script>
  </body>
</html>

----------------------------------------

TITLE: Implementing Babylon Viewer HotSpots Navigation in HTML
DESCRIPTION: This code demonstrates the use of hotspots in a Babylon.js viewer, allowing camera focus on specific points of interest in the 3D scene.

LANGUAGE: html
CODE:
<CodePen pen="VYZeGxY" tab="result" title="Babylon Viewer HotSpots" />

----------------------------------------

TITLE: Manually Attaching Gizmo to Mesh in Babylon.js
DESCRIPTION: Shows how to manually attach a gizmo to a specific mesh and disable the default pointer behavior of the GizmoManager.

LANGUAGE: javascript
CODE:
gizmoManager.usePointerToAttachGizmos = false;
gizmoManager.attachToMesh(mesh);

----------------------------------------

TITLE: Implementing IGLTFLoaderExtension in TypeScript
DESCRIPTION: This snippet demonstrates how to create a custom glTF loader extension by implementing the IGLTFLoaderExtension interface. It includes the basic structure and an example of overriding the loadSceneAsync method.

LANGUAGE: typescript
CODE:
import { IGLTFLoaderExtension } from "@babylonjs/loaders/glTF/2.0";

class MyCustomExtension implements IGLTFLoaderExtension {
    public readonly name = "myCustomExtension";
    public enabled = true;
    public order = 100;

    // Implement any of the optional functions, such as:
    public loadSceneAsync(): Nullable<Promise<void>> {
        // Modify the default behavior when loading scenes.
    }
}

----------------------------------------

TITLE: Initializing Audio Engine in Babylon.js
DESCRIPTION: Sets up and unlocks the Babylon.js audio engine asynchronously. This is a required first step before playing any sounds in the scene.

LANGUAGE: javascript
CODE:
async function initAudio() {
  const audioEngine = await BABYLON.CreateAudioEngineAsync();
  await audioEngine.unlock();

  // Audio engine is ready to play sounds ...
}

----------------------------------------

TITLE: Checking Mesh Intersections in Babylon.js
DESCRIPTION: Demonstrates how to check for collisions between two meshes using the intersectsMesh() function. The second parameter controls the precision of collision detection by determining the type of bounding box (AABB vs OBB).

LANGUAGE: javascript
CODE:
if (balloon1.intersectsMesh(plan1, false)) {
  balloon1.material.emissiveColor = new BABYLON.Color4(1, 0, 0, 1);
} else {
  balloon1.material.emissiveColor = new BABYLON.Color4(1, 1, 1, 1);
}

----------------------------------------

TITLE: Rendering Multiple Scenes in Babylon.js
DESCRIPTION: Implementation of the render loop to handle multiple scene rendering in sequence.

LANGUAGE: javascript
CODE:
engine.runRenderLoop(function () {
  scene0.render();
  scene1.render();
});

----------------------------------------

TITLE: Conditional Actions in Babylon.js
DESCRIPTION: Example of adding a condition to an action, where the action only executes if the specified predicate condition is met.

LANGUAGE: javascript
CODE:
mesh.actionManager.registerAction(
  new BABYLON.InterpolateValueAction(
    BABYLON.ActionManager.OnPickTrigger,
    camera,
    "alpha",
    0,
    500,
    new BABYLON.PredicateCondition(mesh.actionManager, function () {
      return light.diffuse.equals(BABYLON.Color3.Red());
    }),
  ),
);

----------------------------------------

TITLE: Applying Vertex Animation Textures to Thin Instances in Babylon.js
DESCRIPTION: This snippet demonstrates how to apply Vertex Animation Textures (VATs) to thin instances in Babylon.js. It shows how to allocate and set animation parameters for multiple thin instances.

LANGUAGE: javascript
CODE:
// allocate the parameters
const animParameters = new Float32Array(numInstances * 4);

// for each instance
for (let i = 0; i < numInstances; i++) {
  // generate the animation parameters with your code:
  // returns a BABYLON.Vector4()
  const params = setAnimationParameters();

  // store in the base array
  animParameters.set(params.asArray(), i * 4);
}

// update the mesh with all settings
mesh.thinInstanceSetBuffer("bakedVertexAnimationSettingsInstanced", animParameters, 4);

----------------------------------------

TITLE: Creating a Physics Body in Babylon.js
DESCRIPTION: Demonstrates how to create a dynamic physics body for a sphere mesh in Babylon.js. The body is associated with a sphere mesh and set to dynamic motion type.

LANGUAGE: javascript
CODE:
const sphere = BABYLON.MeshBuilder.CreateSphere("sphere");
const body = new BABYLON.PhysicsBody(sphere, BABYLON.PhysicsMotionType.DYNAMIC, false, scene);

----------------------------------------

TITLE: Setting Particle Lifetime Range in Babylon.js
DESCRIPTION: Defines the minimum and maximum lifetime for particles in the system.

LANGUAGE: javascript
CODE:
particleSystem.minLifeTime = 0.3;
particleSystem.maxLifeTime = 1.5;

----------------------------------------

TITLE: Creating a Button3D with Custom Content in Babylon.js
DESCRIPTION: Demonstrates how to create a Button3D control with custom text content in Babylon.js 3D GUI.

LANGUAGE: javascript
CODE:
const button = new BABYLON.GUI.Button3D("reset");

const text = new BABYLON.GUI.TextBlock();
text.text = "reset";
text.color = "white";
text.fontSize = 24;
button.content = text;

----------------------------------------

TITLE: Creating Ground Mesh from Height Map in Babylon.js
DESCRIPTION: Demonstrates how to create a terrain mesh using a height map texture. The code shows material creation, height map generation with customizable parameters like width, height, and subdivisions, and material binding to the resulting mesh.

LANGUAGE: javascript
CODE:
// Create a material with our land texture.
let groundMaterial = new BABYLON.StandardMaterial("ground", scene);
groundMaterial.diffuseTexture = new BABYLON.Texture("Earth__land.jpg", scene);

// Use CreateGroundFromHeightMap to create a height map of 20 units by 20
// And a height of to
// units, with 250 subdivisions in each of the `x` and `z` directions, for a
// total of 62,500 divisions.
const ground = BABYLON.MeshBuilder.CreateGroundFromHeightMap("gdhm", "textures/heightMap.png", {
    width: 20, height: 20, subdivisions: 250, maxHeight: 10, minHeight: 2
});

// Bind our material to our mesh
ground.material = groundMaterial;

----------------------------------------

TITLE: Setting Infinite Distance for Skybox
DESCRIPTION: Makes the skybox follow the camera's position by setting infinite distance.

LANGUAGE: javascript
CODE:
skybox.infiniteDistance = true;

----------------------------------------

TITLE: Defining the Main Function in GLSL Shaders
DESCRIPTION: This snippet demonstrates the structure of the main function in GLSL shaders. The main function is the entry point for both vertex and fragment shaders and must be of type void.

LANGUAGE: glsl
CODE:
void main(void) {
	*code*
}

----------------------------------------

TITLE: WebVR Controller Event Handling
DESCRIPTION: Example of handling controller pad values and trigger state changes in WebVR.

LANGUAGE: javascript
CODE:
controller.onPadValuesChangedObservable.add(function (stateObject) {
  console.log(stateObject); // {x: 0.1, y: -0.3}
});
controller.onTriggerStateChangedObservable.add(function (stateObject) {
  let value = stateObject.value;
  console.log(value);
});

----------------------------------------

TITLE: Vertex Shader Implementation for Firework Animation
DESCRIPTION: Vertex shader that handles the outward explosion effect by manipulating vertex positions based on normals and time. Uses logarithmic scaling for realistic burst movement.

LANGUAGE: GLSL
CODE:
void main(void) {
    vec3 p = position;
    vec3 j = vec3(0., -1.0, 0.);
    p = p + normal * log2(1. + time) * 25.0;
    gl_Position = worldViewProjection * vec4(p, 1.0);
}

----------------------------------------

TITLE: Randomizing Particle Colors in Babylon.js
DESCRIPTION: Example of customizing the update function to randomize particle colors on each frame.

LANGUAGE: javascript
CODE:
particle.color = new BABYLON.Color4(Math.random(), Math.random(), Math.random(), 1);

----------------------------------------

TITLE: Setting Emissive Color for Video Material
DESCRIPTION: Sets the emissive color of the material to ensure proper video illumination when using VideoTexture with StandardMaterial.

LANGUAGE: javascript
CODE:
ecran.material.emissiveColor = new BABYLON.Color3(1, 1, 1);

----------------------------------------

TITLE: Obstacle Management API Methods in Babylon.js
DESCRIPTION: API methods for adding and removing cylindrical and box-shaped obstacles in the navigation mesh. Includes position, dimension, and angle parameters for obstacle placement.

LANGUAGE: javascript
CODE:
addCylinderObstacle(position: Vector3, radius: number, height: number): IObstacle;
addBoxObstacle(position: Vector3, extent: Vector3, angle: number): IObstacle;
removeObstacle(obstacle: IObstacle): void;

----------------------------------------

TITLE: Creating and Configuring a Reflection Probe in Babylon.js
DESCRIPTION: This snippet demonstrates how to create a reflection probe, add meshes to its render list, and assign the generated cube texture to a material's reflection texture.

LANGUAGE: javascript
CODE:
const probe = new BABYLON.ReflectionProbe("main", 512, scene);
probe.renderList.push(yellowSphere);
probe.renderList.push(greenSphere);
probe.renderList.push(blueSphere);
probe.renderList.push(mirror);

mainMaterial.reflectionTexture = probe.cubeTexture;

----------------------------------------

TITLE: Creating Video Texture in Babylon.js
DESCRIPTION: Creates a video texture and assigns it to a mesh's diffuse material property. Accepts video file path and scene reference as parameters.

LANGUAGE: javascript
CODE:
ecran.material.diffuseTexture = new BABYLON.VideoTexture("video", "textures/babylonjs.mp4", scene, true);

----------------------------------------

TITLE: Using Promises with Animations in Babylon.js
DESCRIPTION: Demonstrates how to use promises to wait for an animatable to end in Babylon.js v3.3 and later.

LANGUAGE: javascript
CODE:
const anim = scene.beginAnimation(box1, 0, 100, false);

console.log("before");
await anim.waitAsync();
console.log("after");

----------------------------------------

TITLE: Updating Camera Position to Follow Player in Babylon.js
DESCRIPTION: This function updates the camera's position to smoothly follow the player character using Vector3.Lerp. It adjusts the y-position to center on the player mesh and interpolates between the current and new positions.

LANGUAGE: javascript
CODE:
private _updateCamera(): void {
    let centerPlayer = this.mesh.position.y + 2;
    this._camRoot.position = Vector3.Lerp(this._camRoot.position, new Vector3(this.mesh.position.x, centerPlayer, this.mesh.position.z), 0.4);
}

----------------------------------------

TITLE: Creating a Box with MeshBuilder in Babylon.js
DESCRIPTION: This snippet demonstrates how to create a customizable box using the BABYLON.MeshBuilder.CreateBox method. It allows for setting various options such as size, dimensions, colors, and textures.

LANGUAGE: javascript
CODE:
const box = BABYLON.MeshBuilder.CreateBox("box", options, scene); //scene is optional and defaults to the current scene

----------------------------------------

TITLE: Configuring Offline Support Exceptions in Babylon.js
DESCRIPTION: Set up rules to exclude specific resources from offline caching in Babylon.js. This example demonstrates how to prevent caching of files matching a certain pattern.

LANGUAGE: javascript
CODE:
scene.disableOfflineSupportExceptionRules.push(/dude\.babylon/gi);

----------------------------------------

TITLE: Creating Basic Skybox Mesh and Material
DESCRIPTION: Creates a basic skybox using a box mesh with disabled backface culling and lighting.

LANGUAGE: javascript
CODE:
const skybox = BABYLON.MeshBuilder.CreateBox("skyBox", { size: 100.0 }, scene);
const skyboxMaterial = new BABYLON.StandardMaterial("skyBox", scene);
skyboxMaterial.backFaceCulling = false;
skyboxMaterial.disableLighting = true;
skybox.material = skyboxMaterial;

----------------------------------------

TITLE: Adding Normals to a Custom Mesh in Babylon.js
DESCRIPTION: Shows how to calculate and add normal vectors to a custom mesh. It uses the VertexData.ComputeNormals method to automatically generate normals based on the vertex positions and indices.

LANGUAGE: javascript
CODE:
var customMesh = new BABYLON.Mesh("custom", scene);

var positions = [-5, 2, -3, -7, -2, -3, -3, -2, -3, 5, 2, 3, 7, -2, 3, 3, -2, 3];
var indices = [0, 1, 2, 3, 4, 5];

var normals = [];

BABYLON.VertexData.ComputeNormals(positions, indices, normals);

var vertexData = new BABYLON.VertexData();

vertexData.positions = positions;
vertexData.indices = indices;
vertexData.normals = normals;

vertexData.applyToMesh(customMesh);

----------------------------------------

TITLE: Configuring Multiview for VRDeviceOrientationFreeCamera in Babylon.js
DESCRIPTION: This snippet demonstrates how to enable multiview for a VRDeviceOrientationFreeCamera. It creates custom VRCameraMetrics with multiview enabled and uses them to initialize the camera.

LANGUAGE: javascript
CODE:
// Enable multiview
const multiviewMetrics = BABYLON.VRCameraMetrics.GetDefault();
multiviewMetrics.multiviewEnabled = true;
// Create camera
const multiviewCamera = new BABYLON.VRDeviceOrientationFreeCamera("", new BABYLON.Vector3(-10, 5, 0), scene, undefined, multiviewMetrics);

----------------------------------------

TITLE: Setting Normal Direction in Path3D
DESCRIPTION: Demonstrates how to set a custom normal direction when creating or updating a Path3D object.

LANGUAGE: javascript
CODE:
const initialVector = new BABYLON.Vector3(0, 1, 0);
const otherVector = new BABYLON.Vector3(0, 0, 1);
const points = [v1, v2, ..., vn];          // array of Vector3
const path3d = new BABYLON.Path3D(points, initialVector);
// do stuff ...
path3d.update(points, otherVector);

----------------------------------------

TITLE: Applying Vertex Data to Updatable Mesh in Babylon.js
DESCRIPTION: This snippet shows how to apply vertex data to a custom mesh, making it updatable by setting the second parameter to true.

LANGUAGE: javascript
CODE:
vertexData.applyToMesh(customMesh, true);

----------------------------------------

TITLE: Adding Meshes to Utility Layer Scene in Babylon.js
DESCRIPTION: Demonstrates how to add meshes and lights to a utility layer scene in Babylon.js.

LANGUAGE: javascript
CODE:
// Create an overlay box
const overlayBox = BABYLON.MeshBuilder.CreateBox("box", { size: 1 }, utilLayer.utilityLayerScene);
overlayBox.position.z = 0.5;
overlayBox.position.y = 3.5;
// Create a different light for the overlay scene
const overlayLight = new BABYLON.HemisphericLight("light1", new BABYLON.Vector3(0, 0, 1), utilLayer.utilityLayerScene);
overlayLight.intensity = 0.7;

----------------------------------------

TITLE: Constructing WebXR Camera in Babylon.js
DESCRIPTION: Creates a new WebXR Camera instance using a scene and XR Session Manager. The camera's initial position is not set in the constructor but populated with real-world information on the first frame.

LANGUAGE: javascript
CODE:
const xrCamera = new WebXRCamera("nameOfCamera", scene, xrSessionManager);

----------------------------------------

TITLE: Configuring Physics Engine Gravity
DESCRIPTION: Demonstrates different ways to enable physics and configure gravity settings using various physics engine plugins.

LANGUAGE: javascript
CODE:
/*When physics is enabled use default gravity*/
scene.enablePhysics(null, new BABYLON.CannonJSPlugin());
scene.enablePhysics(null, new BABYLON.OimoJSPlugin());

await Ammo();
scene.enablePhysics(null, new BABYLON.AmmoJSPlugin());

//set gravity
scene.enablePhysics(new BABYLON.Vector3(0, -5, 0), new BABYLON.CannonJSPlugin());
scene.enablePhysics(new BABYLON.Vector3(0, -5, 0), new BABYLON.OimoJSPlugin());
scene.enablePhysics(new BABYLON.Vector3(0, -5, 0), new BABYLON.AmmoJSPlugin());

/*Get and set gravity*/
var physicsEngine = scene.enablePhysics(null, new BABYLON.CannonJSPlugin());
var physicsEngine = scene.enablePhysics(null, new BABYLON.OimoJSPlugin());

await Ammo();
var physicsEngine = scene.enablePhysics(null, new BABYLON.AmmoJSPlugin());

//Get gravity
var gravity = physicsEngine.gravity;

//Set gravity
physicsEngine.setGravity(new BABYLON.Vector3(0, -5, 0));

----------------------------------------

TITLE: Importing WebXR Controller Physics
DESCRIPTION: Shows how to import and enable WebXR Controller Physics feature in ES6.

LANGUAGE: javascript
CODE:
import {
    WebXRControllerPhysics
} from '@babylonjs/core/XR/features/WebXRControllerPhysics';

fm.enableFeature(WebXRControllerPhysics.Name, "latest");

----------------------------------------

TITLE: Setting High Precision for Floating-Point Numbers in GLSL
DESCRIPTION: This code snippet shows how to set high precision for floating-point numbers in GLSL shaders, which is important for accurate vertex position calculations.

LANGUAGE: glsl
CODE:
precision highp float

----------------------------------------

TITLE: Getting Curve Points in Babylon.js
DESCRIPTION: Shows how to get a copy of the initial Vector3 array used to create the Path3D object.

LANGUAGE: javascript
CODE:
const curvePoints = path3d.getCurve();

----------------------------------------

TITLE: Attaching Gizmo to Mesh in Babylon.js
DESCRIPTION: Shows how to attach a gizmo to a mesh, making it active and visible. Setting to null disables/hides the gizmo.

LANGUAGE: javascript
CODE:
gizmo.attachedMesh = sphere;

----------------------------------------

TITLE: Implementing Custom Multiply Block in Node Material Editor
DESCRIPTION: JSON configuration for a custom multiply block that supports multiple input types and automatically detects and matches input types. The block multiplies two inputs of the same type and outputs the result.

LANGUAGE: json
CODE:
{
    "name": "CustomMultiply",
    "comments": "Multiplies the left and right inputs of the same type together",
    "target": "Neutral",
    "inParameters": [
        {
            "name": "left",
            "type": "AutoDetect"
        },
        {
            "name": "right",
            "type": "AutoDetect"
        }
    ],
    "outParameters": [
        {
            "name": "output",
            "type": "BasedOnInput",
            "typeFromInput": "left"
        }
    ],
    "inLinkedConnectionTypes" : [
        {
            "input1": "left",
            "input2": "right",
            "looseCoupling": false
        }
    ],
    "functionName": "multiply_{TYPE_left}",
    "code": [
        "{TYPE_output} myHelper_{TYPE_left}({TYPE_left} l, {TYPE_right} r) { return l * r; }",
        "void multiply_{TYPE_left}({TYPE_left} l, {TYPE_right} r, out {TYPE_output} result) {",
        "   result = myHelper_{TYPE_left}(l, r);",
        "}"
    ]    
}

----------------------------------------

TITLE: Creating Texture Mode GUI in Babylon.js
DESCRIPTION: This snippet shows how to create a texture mode GUI for a specific mesh in Babylon.js.

LANGUAGE: JavaScript
CODE:
const advancedTexture2 = BABYLON.GUI.AdvancedDynamicTexture.CreateForMesh(myPlane, 1024, 1024);

----------------------------------------

TITLE: Creating Lines with Mesh in Babylon.js
DESCRIPTION: Demonstrates the basic syntax for creating lines using the Mesh class with points and optional parameters.

LANGUAGE: javascript
CODE:
let lines = BABYLON.MeshBuilder.CreateLines("lines", { points }, scene);
let lines = BABYLON.MeshBuilder.CreateLines("lines", { points, updatable, instance }, scene);

----------------------------------------

TITLE: Customizing Video File Name in Babylon.js Recording
DESCRIPTION: This example demonstrates how to specify a custom file name when starting a video recording of a Babylon.js scene.

LANGUAGE: javascript
CODE:
if (BABYLON.VideoRecorder.IsSupported(engine)) {
    var recorder = new BABYLON.VideoRecorder(engine);
    recorder.startRecording("test.webm");
}

----------------------------------------

TITLE: Creating Car Body Outline with Vector3 Points in BabylonJS
DESCRIPTION: Defines the outline points for a car body shape using Vector3 coordinates. Creates a base line and curved front section using a loop to generate points along a quarter circle.

LANGUAGE: javascript
CODE:
//base
const outline = [
    new BABYLON.Vector3(-0.3, 0, -0.1),
    new BABYLON.Vector3(0.2, 0, -0.1),
]

//curved front
for (let i = 0; i < 20; i++) {
    outline.push(new BABYLON.Vector3(0.2 * Math.cos(i * Math.PI / 40), 0, 0.2 * Math.sin(i * Math.PI / 40) - 0.1));
}

//top
outline.push(new BABYLON.Vector3(0, 0, 0.1));
outline.push(new BABYLON.Vector3(-0.3, 0, 0.1));

----------------------------------------

TITLE: Creating Basic Mesh Clones in Babylon.js
DESCRIPTION: Demonstrates creating a box mesh and its clone, with different positioning for each. Shows how clones share geometry while maintaining independent transformations.

LANGUAGE: javascript
CODE:
const box1 = BABYLON.MeshBuilder.CreateBox("box1", {height: 1, width: 0.75, depth: 0.25, updatable: true});
const box2 = box1.clone("box2");
box1.position.x = -1;
box2.position.x = 1;

----------------------------------------

TITLE: Implementing Babylon.js Viewer in HTML
DESCRIPTION: Basic HTML implementation showing how to embed a 3D model viewer using the babylon-viewer custom element. The example loads the viewer from a CDN and displays a sample GLB model.

LANGUAGE: html
CODE:
<html lang="en">
    <body>
        <script type="module" src="https://cdn.jsdelivr.net/npm/@babylonjs/viewer@preview/dist/babylon-viewer.esm.min.js"></script>
        <babylon-viewer source="https://playground.babylonjs.com/scenes/BoomBox.glb"></babylon-viewer>
    </body>
</html>

----------------------------------------

TITLE: Importing Exported Goldberg Mesh
DESCRIPTION: Example of importing a previously exported Goldberg mesh from a .babylon file.

LANGUAGE: javascript
CODE:
BABYLON.SceneLoader.ImportMeshAsync("", "PATH TO FOLDER", "file.babylon").then((result) => {
  const goldbergPoly = result.meshes[0];
});

----------------------------------------

TITLE: Initializing GlowLayer in Babylon.js
DESCRIPTION: Creates a new GlowLayer instance to apply a glow effect to all emissive parts of a scene.

LANGUAGE: javascript
CODE:
const gl = new BABYLON.GlowLayer("glow", scene);

----------------------------------------

TITLE: Creating ArcRotateCamera in Babylon.js
DESCRIPTION: This snippet shows the basic syntax for creating an ArcRotateCamera in Babylon.js. It demonstrates the constructor parameters including name, alpha angle, beta angle, radius, and target position.

LANGUAGE: javascript
CODE:
const camera = new BABYLON.ArcRotateCamera("name", alpha_angle, beta_angle, radius, target_position);

----------------------------------------

TITLE: Setting Scene Ambient Color in Babylon.js
DESCRIPTION: Sets the ambient color of the scene, which affects the environmental background lighting for materials.

LANGUAGE: javascript
CODE:
scene.ambientColor = new BABYLON.Color3(1, 1, 1);

----------------------------------------

TITLE: Creating Cloud Procedural Texture in Babylon.js
DESCRIPTION: Creates a spherical cloud effect using Babylon.js Cloud Procedural Texture. The snippet demonstrates creating a sphere mesh, applying a cloud material with procedural texture, and configuring it as a skybox. The texture supports customizable sky and cloud colors through its parameters.

LANGUAGE: javascript
CODE:
var cloud = BABYLON.MeshBuilder.CreateSphere("cloud", { segments: 100, diameter: 1000 }, scene);
var cloudMaterial = new BABYLON.StandardMaterial("cloudMat", scene);
var cloudProcTexture = new BABYLON.CloudProceduralTexture("cloudTex", 1024, scene);
cloudMaterial.emissiveTexture = cloudProcTexture;
cloudMaterial.backFaceCulling = false;
cloudMaterial.emissiveTexture.coordinatesMode = BABYLON.Texture.SKYBOX_MODE;
cloud.material = cloudMaterial;
cloud.position = new BABYLON.Vector3(0, 0, 12);

----------------------------------------

TITLE: Enabling Bouncing Behavior for ArcRotateCamera in Babylon.js
DESCRIPTION: This snippet demonstrates how to enable the bouncing behavior for an ArcRotateCamera. The bouncing behavior produces a small bouncing effect when the camera reaches its lower or upper radius limits.

LANGUAGE: javascript
CODE:
camera.useBouncingBehavior = true;

----------------------------------------

TITLE: Creating a Polyhedron with Mesh in Babylon.js
DESCRIPTION: This snippet shows how to create a polyhedron using the BABYLON.Mesh.CreatePolyhedron method. It follows the same format as the MeshBuilder method, allowing for customization through an options object.

LANGUAGE: javascript
CODE:
const polyhedron = BABYLON.Mesh.CreatePolyhedron("oct", options, scene); //scene is optional and defaults to the current scene

----------------------------------------

TITLE: Setting Uniform Values in ShaderMaterial for Babylon.js
DESCRIPTION: This snippet demonstrates how to set uniform values in a ShaderMaterial using type-specific methods like setFloat and setVector3.

LANGUAGE: javascript
CODE:
myShaderMaterial.setFloat("time", 0);
myShaderMaterial.setVector3("direction", BABYLON.Vector3.Zero());

----------------------------------------

TITLE: 180-Degree Video Configuration in VideoDome
DESCRIPTION: Two methods for enabling 180-degree video support: during construction or post-creation.

LANGUAGE: javascript
CODE:
let videoDome = new BABYLON.VideoDome("videoDome", ["https://videourl.com/videos/180.mp4"], {
    resolution: 32,
    clickToPlay: true,
    halfDomeMode: true
}, scene);

----------------------------------------

TITLE: Creating Default Rendering Pipeline in Babylon.js
DESCRIPTION: This snippet demonstrates how to create an instance of the default rendering pipeline in Babylon.js. It initializes the pipeline with a name, HDR texture option, scene, and camera list.

LANGUAGE: javascript
CODE:
var pipeline = new BABYLON.DefaultRenderingPipeline(
    "defaultPipeline", // The name of the pipeline
    true, // Do you want the pipeline to use HDR texture?
    scene, // The scene instance
    [camera] // The list of cameras to be attached to
);

----------------------------------------

TITLE: Creating a Polyhedron with MeshBuilder in Babylon.js
DESCRIPTION: This snippet demonstrates how to create a polyhedron using the BABYLON.MeshBuilder.CreatePolyhedron method. It allows for customization of the polyhedron type, size, and other properties through an options object.

LANGUAGE: javascript
CODE:
const polyhedron = BABYLON.MeshBuilder.CreatePolyhedron("oct", options, scene); //scene is optional and defaults to the current scene

----------------------------------------

TITLE: Applying Opacity Texture for Alpha Blending in Babylon.js
DESCRIPTION: Demonstrates how to enable alpha blending by assigning an opacity texture to a material, even when the texture lacks an alpha channel.

LANGUAGE: javascript
CODE:
material.opacityTexture = material.diffuseTexture;

----------------------------------------

TITLE: Using ShaderBuilder Extension in Babylon.js
DESCRIPTION: Demonstrates the use of ShaderBuilder extension to create and apply shader materials with simplified syntax.

LANGUAGE: javascript
CODE:
BABYLONX.ShaderBuilder.InitializeEngine();
mesh.material = new BABYLONX.ShaderBuilder().Map({ path: "textures/amiga.jpg" }).BuildMaterial(scene);

----------------------------------------

TITLE: Updating Material Class for Emissive Texture (JavaScript)
DESCRIPTION: This snippet shows how to update the material class to include support for an emissive texture, including property declaration, isReady check, and binding.

LANGUAGE: javascript
CODE:
public EMISSIVE = false;

LANGUAGE: javascript
CODE:
public emissiveTexture: BaseTexture;

LANGUAGE: javascript
CODE:
if (this.emissiveTexture && StandardMaterial.EmissiveTextureEnabled) {
  if (!this.emissiveTexture.isReady()) {
    return false;
  } else {
    needUVs = true;
    this._defines.EMISSIVE = true;
  }
}

LANGUAGE: javascript
CODE:
if (this.emissiveTexture && StandardMaterial.EmissiveTextureEnabled) {
  this._effect.setTexture("emissiveSampler", this.emissiveTexture);

  this._effect.setFloat2("vEmissiveInfos", this.emissiveTexture.coordinatesIndex, this.emissiveTexture.level);
  this._effect.setMatrix("emissiveMatrix", this.emissiveTexture.getTextureMatrix());
}

----------------------------------------

TITLE: Implementing Vertex Shader for Vertical Wave in GLSL
DESCRIPTION: Defines the vertex shader logic to create a vertical wave effect on the boxes. It calculates the y-position based on time and x-position.

LANGUAGE: GLSL
CODE:
// Attributes
attribute vec3 position;
attribute vec3 normal;
attribute vec2 uv;

// Uniforms
uniform mat4 worldViewProjection;
uniform float box_spacing;
uniform float time;

// Normal
varying vec2 vUV;

void main(void) {
    vec3 p = position;
    float bn = floor(position.x / box_spacing);
    p.y = p.y + sin(time + bn/4.0);
    gl_Position = worldViewProjection * vec4(p, 1.0);

    vUV = uv;
}

----------------------------------------

TITLE: Applying Texture Materials to Objects
DESCRIPTION: Demonstrates loading textures from URLs and applying them to roof and box meshes using StandardMaterial.

LANGUAGE: javascript
CODE:
const roofMat = new BABYLON.StandardMaterial("roofMat");
roofMat.diffuseTexture = new BABYLON.Texture("https://assets.babylonjs.com/environments/roof.jpg", scene);
const boxMat = new BABYLON.StandardMaterial("boxMat");
boxMat.diffuseTexture = new BABYLON.Texture("https://www.babylonjs-playground.com/textures/floor.png");

----------------------------------------

TITLE: Configuring Camera Viewports in Babylon.js
DESCRIPTION: Shows how to set up viewports for multiple cameras, defining the screen space each camera view will occupy.

LANGUAGE: javascript
CODE:
camera.viewport = new BABYLON.Viewport(0.5, 0, 0.5, 1.0);
camera2.viewport = new BABYLON.Viewport(0, 0, 0.5, 1.0);

----------------------------------------

TITLE: Manually Disabling Teleportation Feature
DESCRIPTION: Shows how to manually disable the teleportation feature using the features manager. This is an alternative method to disable teleportation before enabling the movement feature.

LANGUAGE: javascript
CODE:
const featureManager = xrHelper.baseExperience.featuresManager;
featureManager.disableFeature(BABYLON.WebXRFeatureName.TELEPORTATION);

----------------------------------------

TITLE: Setting Mesh Rotation Vector
DESCRIPTION: Shows how to set mesh rotation directly using a Vector3, which automatically nullifies the rotationQuaternion (Babylon.js 4.0+).

LANGUAGE: javascript
CODE:
mesh.rotation = new BABYLON.Vector3(0, 0, 0)

----------------------------------------

TITLE: Adding Dynamic Mesh to Octree in Babylon.js
DESCRIPTION: Registers a mesh as dynamic content in an octree, ensuring it's always selected during scene rendering regardless of its position.

LANGUAGE: javascript
CODE:
octree.dynamicContent.push(mesh)

----------------------------------------

TITLE: Creating a Sprite Manager for Spritesheets in Babylon.js
DESCRIPTION: Initializes a SpriteManager for a spritesheet with square cells. It specifies the manager name, texture path, capacity, and cell size.

LANGUAGE: javascript
CODE:
const spriteManagerPlayer = new BABYLON.SpriteManager("playerManager","path to Player.png", 1, 64);

----------------------------------------

TITLE: Creating and Applying Car Animation in Babylon.js
DESCRIPTION: This snippet creates an animation for a car object, moving it along the x-axis. It sets up keyframes for the car's position, creates an Animation object, and applies it to the car mesh. The animation is set to cycle and run for 210 frames.

LANGUAGE: javascript
CODE:
const animCar = new BABYLON.Animation("carAnimation", "position.x", 30, BABYLON.Animation.ANIMATIONTYPE_FLOAT, BABYLON.Animation.ANIMATIONLOOPMODE_CYCLE);

const carKeys = []; 

carKeys.push({
    frame: 0,
    value: -4
});

carKeys.push({
    frame: 150,
    value: 4
});

carKeys.push({
    frame: 210,
    value: 4
});

animCar.setKeys(carKeys);

car.animations = [];
car.animations.push(animCar);

scene.beginAnimation(car, 0, 210, true);

----------------------------------------

TITLE: Audio Properties and Events in Babylon.js
DESCRIPTION: Demonstrates setting volume, playback rate and handling the onended event for a sound.

LANGUAGE: javascript
CODE:
const volume = 0.1;
const playbackRate = 0.5;
const gunshot = new BABYLON.Sound("Gunshot", "./gunshot-1.wav", scene, null, {
  playbackRate: playbackRate,
  volume: volume,
});

gunshot.onended = function () {
  if (volume < 1) {
    volume += 0.1;
    gunshot.setVolume(volume);
  }
  playbackRate += 0.1;
  gunshot.setPlaybackRate(playbackRate);
};

----------------------------------------

TITLE: Implementing Collision Callbacks in Babylon.js
DESCRIPTION: Demonstrates how to set up both body-specific and world-wide collision callbacks using Physics Body and Observable patterns. Shows two implementation approaches for handling collision events.

LANGUAGE: javascript
CODE:
// player is a PhysicsBody
player.setCollisionCallbackEnabled(true);

// You have two options:
// Body-specific callback
const observable = player.getCollisionObservable();
const observer = observable.add((collisionEvent) => {
  // Process collisions for the player
});

// OR

// world callback
const observable = plugin.onCollisionObservable;
const observer = observable.add((collisionEvent) => {
  // Check if the player is involved in the collision
  if (collisionEvent.collider === player || collisionEvent.collidedAgainst === player) {
    // Process collisions for the player
    // ...
  }
});

----------------------------------------

TITLE: Enabling Anti-Aliasing for GlowLayer in Babylon.js
DESCRIPTION: Specifies the number of samples for MSAA to reduce aliasing artifacts in the glow effect. Only works with WebGL2.

LANGUAGE: javascript
CODE:
const gl = new BABYLON.GlowLayer("glow", scene, {
  mainTextureSamples: 4
});

----------------------------------------

TITLE: Creating a Cylinder or Cone with MeshBuilder in Babylon.js
DESCRIPTION: This snippet demonstrates how to create a cylinder or cone using BABYLON.MeshBuilder.CreateCylinder. It includes a comprehensive list of options for customizing the shape, such as height, diameter, tessellation, and face colors.

LANGUAGE: javascript
CODE:
const cone = BABYLON.MeshBuilder.CreateCylinder("cone", options, scene); //scene is optional and defaults to the current scene

----------------------------------------

TITLE: Setting Background Color in Babylon.js
DESCRIPTION: Demonstrates how to change the background color of a Babylon.js scene using the clearColor property. It shows two methods: using a custom Color3 object and using a preset color.

LANGUAGE: javascript
CODE:
scene.clearColor = new BABYLON.Color3(0.5, 0.8, 0.5);

LANGUAGE: javascript
CODE:
scene.clearColor = BABYLON.Color3.Blue();

----------------------------------------

TITLE: WebXR Feature Interface Implementation
DESCRIPTION: Shows the interface definition for implementing custom WebXR features.

LANGUAGE: javascript
CODE:
interface IWebXRFeature extends IDisposable {
    attached: boolean;
    disableAutoAttach: boolean;
    attach(force?: boolean): boolean;
    detach(): boolean;
}

----------------------------------------

TITLE: Optimizing Thin Instances with Pre-built Buffers in TypeScript
DESCRIPTION: Demonstrates how to create thin instances using pre-built buffers for matrices and custom attributes, which can be more efficient for large numbers of instances.

LANGUAGE: typescript
CODE:
var matrix1 = BABYLON.Matrix.Translation(-2, 2, 0);
var matrix2 = BABYLON.Matrix.IdentityReadOnly;
var matrix3 = BABYLON.Matrix.Translation(2, 1, 0);

var bufferMatrices = new Float32Array(16 * 3);

matrix1.copyToArray(bufferMatrices, 0);
matrix2.copyToArray(bufferMatrices, 16);
matrix3.copyToArray(bufferMatrices, 32);

var bufferColors = new Float32Array(3 * 4);

bufferColors.set([1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1]);

sphere.thinInstanceSetBuffer("matrix", bufferMatrices, 16);
sphere.thinInstanceSetBuffer("color", bufferColors, 4);

----------------------------------------

TITLE: Initializing ShaderMaterial with WGSL in Babylon.js
DESCRIPTION: Creates a new ShaderMaterial instance configured for WGSL shaders. Sets the shader language, attributes, and uniform buffers.

LANGUAGE: javascript
CODE:
const mat = new BABYLON.ShaderMaterial("shader", scene, {
        vertex: "myShader",
        fragment: "myShader",
    },
    {
        attributes: ["position", "uv", "normal"],
        uniformBuffers: ["Scene", "Mesh"],
        shaderLanguage: BABYLON.ShaderLanguage.WGSL,
    }
);

----------------------------------------

TITLE: Checking Available WebXR Features
DESCRIPTION: Demonstrates how to retrieve and check available WebXR features using the Features Manager.

LANGUAGE: javascript
CODE:
const availableFeatures = WebXRFeaturesManager.GetAvailableFeatures();

if (availableFeatures.indexOf(WebXRFeatureName.POINTER_SELECTION) !== -1) {
    // Pointer selection is available
}

----------------------------------------

TITLE: Complete TrailMesh Implementation with Animation
DESCRIPTION: Full example demonstrating TrailMesh creation with a moving cube generator, material setup, and animation implementation using scene observables.

LANGUAGE: javascript
CODE:
let alpha = Math.PI;
// Create a mesh for the trail to follow.
const cube = BABYLON.MeshBuilder.CreateBox("cube", {}, scene);
cube.scaling.y = 2;
cube.bakeCurrentTransformIntoVertices();
cube.position.x = Math.sin(alpha) * 10;
cube.position.z = Math.cos(alpha) * 10;
cube.computeWorldMatrix(true);

// Trail options
let options = {
    diameter: 1.5,
    length: 100,
    segments: 10,
    sections: 4,
    doNotTaper: false,
    autoStart: true
};
const trail = new BABYLON.TrailMesh("new", cube, scene, options);

const sourceMat = new BABYLON.StandardMaterial("sourceMat", scene);
sourceMat.emissiveColor = sourceMat.diffuseColor = new BABYLON.Color3.Red();
sourceMat.specularColor = new BABYLON.Color3.Black();

trail.material = sourceMat;

const observer = scene.onBeforeRenderObservable.add(animate);
function animate() {
  alpha += Math.PI / 120;
  cube.position.x = Math.sin(alpha) * 10;
  cube.position.z = Math.cos(alpha) * 10;
  cube.rotation.x = (Math.PI * alpha) / 2;
  cube.rotation.y = alpha;
}

----------------------------------------

TITLE: Creating Terrain Map Data in BabylonJS
DESCRIPTION: Generates a height map using sine and cosine functions to create undulating terrain. The map is stored in a Float32Array with X, Y, Z coordinates for each point in the grid.

LANGUAGE: javascript
CODE:
const mapSubX = 100;
const mapSubZ = 100;
const mapData = new Float32Array(mapSubX * mapSubZ * 3);
for (let l = 0; l < mapSubZ; l++) {
  for (let w = 0; w < mapSubX; w++) {
    mapData[3 * (l * mapSubX + w)] = (w - mapSubX * 0.5) * 2.0;
    mapData[3 * (l * mapSubX + w) + 1] = (w / (l + 1)) * Math.sin(l / 2) * Math.cos(w / 2) * 2.0;
    mapData[3 * (l * mapSubX + w) + 2] = (l - mapSubZ * 0.5) * 2.0;
  }
}

----------------------------------------

TITLE: Loading an HDR CubeTexture in Babylon.js
DESCRIPTION: This code snippet shows how to load an HDR CubeTexture in Babylon.js using the HDRCubeTexture class.

LANGUAGE: javascript
CODE:
new BABYLON.HDRCubeTexture("textures/filename", scene);

----------------------------------------

TITLE: Creating a Moving Lattice Deformation in Babylon.js
DESCRIPTION: Demonstrates how to create a moving lattice deformation effect on a sphere in Babylon.js, including lattice creation, data modification, and continuous updating.

LANGUAGE: javascript
CODE:
var sphere = BABYLON.MeshBuilder.CreateSphere("sphere", {diameter: 2, segments: 32}, scene);
const positions = sphere.getVerticesData(BABYLON.VertexBuffer.PositionKind);
const updates = new Float32Array(positions.length);

// lattice
var lattice = new BABYLON.Lattice({ size: new BABYLON.Vector3(2, 2, 2), position: BABYLON.Vector3.Zero()});

// Make it pointy
for (x = 0; x < lattice.resolutionX; x++) {
    for (z = 0; z < lattice.resolutionZ; z++) {
        const control = lattice.data[x][lattice.resolutionY - 1][z];
        control.y += 1;
    }
}

// Shrink that belly!
for (x = 0; x < lattice.resolutionX; x++) {
    for (z = 0; z < lattice.resolutionZ; z++) {
        const control = lattice.data[x][1][z];
        control.x = 0;
        control.z = 0;
    }
}

let offset = -2;
scene.onBeforeRenderObservable.add(() => {
    lattice.position.x = offset;
    offset += 0.01;

    lattice.deform(positions, updates);
    sphere.setVerticesData(BABYLON.VertexBuffer.PositionKind, updates, true);
    sphere.createNormals(true);
});

----------------------------------------

TITLE: Implementing Async Shader Loading in Babylon.js
DESCRIPTION: Example showing how the standard material implements async loading of shader files based on the shader language (WebGL or WGSL).

LANGUAGE: javascript
CODE:
let effect = scene.getEngine().createEffect(
  shaderName,
  {
    attributes: attribs,
    uniformsNames: uniforms,
    uniformBuffersNames: uniformBuffers,
    samplers: samplers,
    defines: join,
    fallbacks: fallbacks,
    onCompiled: this.onCompiled,
    onError: this.onError,
    indexParameters,
    processFinalCode: csnrOptions.processFinalCode,
    processCodeAfterIncludes: this._eventInfo.customCode,
    multiTarget: defines.PREPASS,
    shaderLanguage: this._shaderLanguage,
    extraInitializationsAsync: this._shadersLoaded
      ? undefined
      : async () => {
          if (this._shaderLanguage === ShaderLanguage.WGSL) {
            await Promise.all([import("../ShadersWGSL/default.vertex"), import("../ShadersWGSL/default.fragment")]);
          } else {
            await Promise.all([import("../Shaders/default.vertex"), import("../Shaders/default.fragment")]);
          }
          this._shadersLoaded = true;
        },
  },
  engine
);

----------------------------------------

TITLE: Attaching Axes to Mesh in Babylon.js
DESCRIPTION: This code snippet shows how to make the x, y, and z axes local to a mesh or other appropriate object in Babylon.js. It sets the parent of each axis to the desired mesh.

LANGUAGE: javascript
CODE:
axes.xAxis.parent = mesh;
axes.yAxis.parent = mesh;
axes.zAxis.parent = mesh;

----------------------------------------

TITLE: Implementing Car Steering Logic in BabylonJS
DESCRIPTION: Handles the steering logic for turning the front wheels and repositioning the center of rotation based on Ackerman geometry calculations.

LANGUAGE: javascript
CODE:
if((map["a"] || map["A"]) && -Math.PI/6 < theta) {
	deltaTheta = -Math.PI/252;
	theta += deltaTheta;
	pivotFI.rotate(BABYLON.Axis.Y, deltaTheta, BABYLON.Space.LOCAL);
	pivotFO.rotate(BABYLON.Axis.Y, deltaTheta, BABYLON.Space.LOCAL);
	if(Math.abs(theta) > 0.00000001) {
		NR = A/2 +L/Math.tan(theta);
	}
	else {
		theta = 0;
		NR = 0;
	}
	pivot.translate(BABYLON.Axis.Z, NR - R, BABYLON.Space.LOCAL);
	carBody.translate(BABYLON.Axis.Z, R - NR, BABYLON.Space.LOCAL);
	R = NR;
};

----------------------------------------

TITLE: Creating Physics Imposter with Mass
DESCRIPTION: Creates a physics imposter for a mesh with specified mass property. Static bodies should have mass of zero.

LANGUAGE: javascript
CODE:
new BABYLON.PhysicsImpostor(mesh, BABYLON.PhysicsImpostor.BoxImpostor, { mass: 2 }, scene);

----------------------------------------

TITLE: Creating a Directional Light in Babylon.js
DESCRIPTION: Shows how to create a directional light in a Babylon.js scene. A directional light emits light in a specific direction with infinite range.

LANGUAGE: javascript
CODE:
const light = new BABYLON.DirectionalLight("DirectionalLight", new BABYLON.Vector3(0, -1, 0), scene);

----------------------------------------

TITLE: Basic Coroutine Implementation in Babylon.js
DESCRIPTION: Demonstrates a basic coroutine that spawns three meshes across three consecutive frames using generator function syntax.

LANGUAGE: javascript
CODE:
const spawnMeshesCoroutine = function* () {
  spawnTheFirstMesh();
  yield;
  spawnTheSecondMesh();
  yield;
  spawnTheThirdMesh();
};
scene.onBeforeRenderObservable.runCoroutineAsync(spawnMeshesCoroutine());

----------------------------------------

TITLE: Generating Procedural Texture with Node Material
DESCRIPTION: JavaScript code to generate a procedural texture using Node Material in Babylon.js.

LANGUAGE: javascript
CODE:
BABYLON.NodeMaterial.ParseFromSnippetAsync("#A7A3UB#1", scene).then((nodeMaterial) => {
  const proceduralTexture = nodeMaterial.createProceduralTexture(256);
});

----------------------------------------

TITLE: Merging Meshes in Babylon.js
DESCRIPTION: Demonstrates how to combine two or more meshes using BABYLON.Mesh.MergeMeshes(). This basic example merges a box and a roof to create a house.

LANGUAGE: javascript
CODE:
const combined = BABYLON.Mesh.MergeMeshes(Array_of_Meshes_to_Combine)

LANGUAGE: javascript
CODE:
const house = BABYLON.Mesh.MergeMeshes([box, roof])

----------------------------------------

TITLE: Automatic Skybox Creation
DESCRIPTION: Creates a skybox using the built-in scene helper method.

LANGUAGE: javascript
CODE:
envTexture = new BABYLON.CubeTexture("/assets/textures/SpecularHDR.dds", scene);
scene.createDefaultSkybox(envTexture, true, 1000);

----------------------------------------

TITLE: Setting Key Frames for Babylon.js Animation
DESCRIPTION: Shows how to create an array of key frames for an animation in Babylon.js, each containing a frame number and value for the property being animated.

LANGUAGE: javascript
CODE:
const myKeys = [
  {
    frame: 0,
    value: 0.5,
  },
  {
    frame: 60,
    value: 1.0,
  },
];

----------------------------------------

TITLE: Creating and Updating Ribbons with MeshBuilder in Babylon.js
DESCRIPTION: Demonstrates how to create a ribbon mesh using MeshBuilder.CreateRibbon() method. It shows initial creation with options and how to update an existing ribbon instance.

LANGUAGE: javascript
CODE:
const options = {
    pathArray: myPaths, //[vector3 array, vector3 array, vector3 array......]
    updatable: true
}

let ribbon = BABYLON.MeshBuilder.CreateRibbon("ribbon", options, scene); //scene is optional and defaults to the current scene

options.pathArray: myNewPaths; //The length must equal the length of myPaths and myNewPaths[i].length === myPaths[i] for all i
options.instance = true;

// updates the existing instance of ribbon : no need for the parameter scene
ribbon = BABYLON.MeshBuilder.CreateRibbon("ribbon", {pathArray: myNewPath, instance: ribbon});

----------------------------------------

TITLE: Local Space Transformations in Babylon.js
DESCRIPTION: Shows methods for translating meshes in local space. These transformations are affected by the mesh's current rotation and orientation.

LANGUAGE: javascript
CODE:
mesh.translate(new BABYLON.Vector3(2, 3, 4), 1, BABYLON.Space.LOCAL);
mesh.setPositionWithLocalVector(new BABYLON.Vector3(2, 3, 4));
mesh.locallyTranslate(new BABYLON.Vector3(2, 3. 4));

----------------------------------------

TITLE: Configuring Metallic Roughness PBR
DESCRIPTION: Setup metallic roughness channels in PBR material texture configuration

LANGUAGE: javascript
CODE:
pbr.useRoughnessFromMetallicTextureAlpha = false;
pbr.useRoughnessFromMetallicTextureGreen = true;
pbr.useMetallnessFromMetallicTextureBlue = true;

----------------------------------------

TITLE: Initializing Shadow Generator
DESCRIPTION: Creates a new ShadowGenerator instance with specified shadow map size and light source.

LANGUAGE: javascript
CODE:
const shadowGenerator = new BABYLON.ShadowGenerator(1024, light);

----------------------------------------

TITLE: Initializing and Customizing Brick Procedural Texture in Babylon.js
DESCRIPTION: This snippet demonstrates how to create a Brick Procedural Texture, set its parameters, and apply it to a material in Babylon.js. It shows the creation of a standard material and a brick texture, setting the number of bricks in height and width, and assigning the texture to the material's diffuse texture.

LANGUAGE: javascript
CODE:
var brickMaterial = new BABYLON.StandardMaterial("brickMat", scene);
var brickTexture = new BABYLON.BrickProceduralTexture("brickTex", 512, scene);
brickTexture.numberOfBricksHeight = 6;
brickTexture.numberOfBricksWidth = 10;
brickMaterial.diffuseTexture = brickTexture;

----------------------------------------

TITLE: Enabling DOM Overlay in WebXR with Babylon.js
DESCRIPTION: This code snippet shows how to enable the DOM overlay feature in a WebXR experience using Babylon.js. It demonstrates how to set up the overlay and check its support.

LANGUAGE: javascript
CODE:
const domOverlayFeature = featuresManager.enableFeature(BABYLON.WebXRDomOverlay, "latest", { element: ".dom-overlay-container" }, undefined, false);

xr.baseExperience.onStateChangedObservable.add((webXRState) => {
  switch (webXRState) {
    case BABYLON.WebXRState.ENTERING_XR:
    case BABYLON.WebXRState.IN_XR:
      console.log("overlay type:", domOverlayFeature.domOverlayType);
      break;
  }
});

----------------------------------------

TITLE: Visualizing Box Normals in Babylon.js
DESCRIPTION: This playground demonstrates how normals are calculated and applied to a box mesh in Babylon.js. It shows the difference between shared normals and flat-shaded normals.

LANGUAGE: JavaScript
CODE:
<Playground id="#1H7L5C#113" title="Box Normals" description="Simple example of box normals."/>

----------------------------------------

TITLE: Playground-Specific Multiple Scene Implementation
DESCRIPTION: Special implementation for handling multiple scenes in the Babylon.js Playground, including engine render loop management.

LANGUAGE: javascript
CODE:
var createScene = function () {
  var scene = new BABYLON.Scene(engine);

  //Add camera, light and meshes for scene

  ////////OTHER SCENE////////////////////
  var scene1 = new BABYLON.Scene(engine);

  //Add camera, light and meshes for scene

  ////////CONTROL ENGINE LOOP///////////
  setTimeout(function () {
    engine.stopRenderLoop();

    engine.runRenderLoop(function () {
      scene.render();
      scene1.render();
    });
  }, 500);

  return scene;
};

----------------------------------------

TITLE: Creating Vertex Normal Visualization in Babylon.js
DESCRIPTION: A function that creates visible lines representing vertex normals for a given mesh. It extracts vertex positions and normal data from the mesh, creates lines extending from each vertex in the direction of its normal, and returns a line system mesh. Parameters include the target mesh, line size, color, and scene object.

LANGUAGE: javascript
CODE:
function showNormals(mesh, size, color, sc) {
  var normals = mesh.getVerticesData(BABYLON.VertexBuffer.NormalKind);
  var positions = mesh.getVerticesData(BABYLON.VertexBuffer.PositionKind);
  color = color || BABYLON.Color3.White();
  sc = sc || scene;
  size = size || 1;

  var lines = [];
  for (let i = 0; i < normals.length; i += 3) {
    var v1 = BABYLON.Vector3.FromArray(positions, i);
    var v2 = v1.add(BABYLON.Vector3.FromArray(normals, i).scaleInPlace(size));
    lines.push([v1.add(mesh.position), v2.add(mesh.position)]);
  }
  var normalLines = BABYLON.MeshBuilder.CreateLineSystem("normalLines", { lines: lines }, sc);
  normalLines.color = color;
  return normalLines;
}

----------------------------------------

TITLE: Initializing the Babylon.js Inspector with ES Modules
DESCRIPTION: Demonstrates how to import and show the Babylon.js Inspector using ES Modules.

LANGUAGE: javascript
CODE:
import { Inspector } from '@babylonjs/inspector';

// ... YOUR SCENE CREATION
Inspector.Show(scene, {});

----------------------------------------

TITLE: Rotating Mesh as Pivot's Child in Babylon.js
DESCRIPTION: Demonstrates using a pivot as a parent object. The pivot (sphere) is positioned, the mesh is parented to it, and the mesh's position is set relative to the pivot using setPivotMatrix.

LANGUAGE: javascript
CODE:
sphere.position = CoR_At;

pilot.parent = sphere;
pilot.setPivotMatrix(BABYLON.Matrix.Translation(pilotTranslate.x, pilotTranslate.y, pilotTranslate.z));

pilot.rotate(axis, angle, BABYLON.Space.WORLD);

----------------------------------------

TITLE: Setting Up Sprite Animation Sequence
DESCRIPTION: Configures the animation sequence for a sprite with timing controls. Each animation frame is set with specific timing and speed parameters.

LANGUAGE: javascript
CODE:
let eighth = 1 / 8
let speed = 0.005
background.addAnimationToTile(24, 0, 25, eighth * 1, speed);
background.addAnimationToTile(24, 1, 26, eighth * 2, speed);
background.addAnimationToTile(24, 2, 27, eighth * 3, speed);
background.addAnimationToTile(24, 3, 28, eighth * 4, speed);
background.addAnimationToTile(24, 4, 29, eighth * 5, speed);
background.addAnimationToTile(24, 5, 30, eighth * 6, speed);
background.addAnimationToTile(24, 6, 31, eighth * 7, speed);
background.addAnimationToTile(24, 7, 24, 1, 		 speed);

----------------------------------------

TITLE: Applying Lattice Deformation to Vertex Data in Babylon.js
DESCRIPTION: Demonstrates how to apply lattice deformation to vertex data and update a mesh in Babylon.js.

LANGUAGE: javascript
CODE:
var sphere = BABYLON.MeshBuilder.CreateSphere("sphere", {diameter: 2, segments: 32}, scene);
const positions = sphere.getVerticesData(BABYLON.VertexBuffer.PositionKind);
lattice.deform(positions);
sphere.setVerticesData(BABYLON.VertexBuffer.PositionKind, positions, true);
sphere.createNormals(true);

----------------------------------------

TITLE: Clearing Cached Vertex Data in Babylon.js
DESCRIPTION: Removes cached vertex data from CPU memory. This frees memory but disables features like collisions, picking, geometry editing, and physics.

LANGUAGE: javascript
CODE:
scene.clearCachedVertexData();

----------------------------------------

TITLE: Creating a Rope Physics Impostor using Lines
DESCRIPTION: Example of creating a 1D rope physics impostor using lines mesh with mass and iteration settings

LANGUAGE: javascript
CODE:
var rope = BABYLON.MeshBuilder.CreateLines("lines", { points: myPoints }, scene);
rope.color = BABYLON.Color3.Black();

rope.physicsImpostor = new BABYLON.PhysicsImpostor(rope, BABYLON.PhysicsImpostor.RopeImpostor, { mass: 2 }, scene);
rope.physicsImpostor.velocityIterations = 20;
rope.physicsImpostor.positionIterations = 20;
rope.physicsImpostor.stiffness = 0.8;

----------------------------------------

TITLE: Creating Ribbons with Mesh Method in Babylon.js
DESCRIPTION: Shows how to create a ribbon using the Mesh.CreateRibbon() method. It includes both basic and advanced usage with optional parameters.

LANGUAGE: javascript
CODE:
const ribbon = BABYLON.Mesh.CreateRibbon("ribbon", pathArray, closeArray, closePath, offset, scene);
const ribbon = BABYLON.Mesh.CreateRibbon("ribbon", pathArray, closeArray, closePath, offset, scene, updatable, sideOrientation, instance); //optional parameters after scene

----------------------------------------

TITLE: Calculating Mesh Surface Area in JavaScript for Babylon.js
DESCRIPTION: This code snippet provides two functions for calculating the surface area of a mesh in Babylon.js. The 'surfaceArea' function calculates the total surface area by summing the areas of all facets, while the 'facetArea' function calculates the area of a single facet. These functions require a valid Babylon.js mesh object as input and use the mesh's indices and vertex positions for calculations.

LANGUAGE: javascript
CODE:
var surfaceArea = function(mesh) {
    if (!mesh) {
        return 0.0;
    }
    var ar = 0.0;
    
    var indices = mesh.getIndices();
    var nbFaces = indices.length / 3;
    
    for (let i = 0; i < nbFaces; i++) {
        ar = ar + facetArea(mesh, i);
    }
    return ar;
};

var facetArea = function(mesh, faceId) {
    if(!mesh) {
        return 0.0;
    }
    var indices = mesh.getIndices();
    if(faceId < 0 || faceId > nbFaces) {
        return 0.0;
    }
    var nbFaces = indices.length / 3;
    var positions = mesh.getVerticesData(BABYLON.VertexBuffer.PositionKind);
    var v1x = 0.0;
    var v1y = 0.0;
    var v1z = 
0.0;
    var v2x = 0.0;
    var v2y = 0.0;
    var v2z = 0.0;
    var crossx = 0.0;
    var crossy = 0.0;
    var crossz = 0.0;
    var ar = 0.0;
    var i1 = 0;
    var i2 = 0;
    var i3 = 0;

    i1 = indices[faceId * 3];
    i2 = indices[faceId * 3 + 1];
    i3 = indices[faceId * 3 + 2];
    v1x = positions[i1 * 3] - positions[i2 * 3];
    v1y = positions[i1 * 3 + 1] - positions[i2 * 3 + 1];
    v1z = positions[i1 * 3 + 2] - positions[i2 * 3 + 2];
    v2x = positions[i3 * 3] - positions[i2 * 3];
    v2y = positions[i3 * 3 + 1] - positions[i2 * 3 + 1];
    v2z = positions[i3 * 3 + 2] - positions[i2 * 3 + 2];
    crossx = v1y * v2z - v1z * v2y;
    crossy = v1z * v2x - v1x * v2z;
    crossz = v1x * v2y - v1y * v2x; 

    return Math.sqrt(crossx * crossx + crossy * crossy + crossz * crossz) * 0.5;
}

----------------------------------------

TITLE: Disabling WebGL Context Loss Handling Post-Creation
DESCRIPTION: Disables WebGL context loss handling after engine creation but before creating any resources. Reduces memory usage but removes automatic recovery capability.

LANGUAGE: javascript
CODE:
engine.doNotHandleContextLost = true;

----------------------------------------

TITLE: Setting up Skybox Reflection
DESCRIPTION: Configures a cubemap texture for skybox reflection in background material

LANGUAGE: javascript
CODE:
backgroundMaterial.reflectionTexture = new BABYLON.CubeTexture("textures/TropicalSunnyDay", scene);
backgroundMaterial.reflectionTexture.coordinatesMode = BABYLON.Texture.SKYBOX_MODE;

----------------------------------------

TITLE: Basic Scene Screenshot Creation in BabylonJS
DESCRIPTION: Creates a screenshot of the scene using the CreateScreenshot method. Must be called within onReadyObservable to ensure all meshes are drawn. Supports various size parameters and optional fill modes.

LANGUAGE: javascript
CODE:
scene.onReadyObservable.add(() => {
  BABYLON.Tools.CreateScreenshot(engine, camera, size, successCallback, mimeType, forceDownload, quality, useFill);
});

----------------------------------------

TITLE: Setting Up Trigger Events in Babylon.js
DESCRIPTION: Shows how to configure trigger events by marking shapes as triggers and setting up world-wide trigger callbacks. Handles both trigger entry and exit events.

LANGUAGE: javascript
CODE:
shape.isTrigger = true;

// create a body with that shape
// const body = new BABYLON.PhysicsBody(node, ...);

const observable = plugin.onTriggerCollisionObservable;
const observer = observable.add((collisionEvent) => {
  if (collisionEvent.type === "TRIGGER_ENTERED") {
    // do something when the trigger is entered
  } else {
    // do something when trigger is exited
  }
});

----------------------------------------

TITLE: Creating Box Mesh with Custom Dimensions
DESCRIPTION: Demonstrates how to create a box mesh with specific width, height, and depth parameters using MeshBuilder.

LANGUAGE: javascript
CODE:
const box = BABYLON.MeshBuilder.CreateBox("box", {width: 2, height: 1.5, depth: 3})

----------------------------------------

TITLE: Removing Particles from an Expandable Solid Particle System in Babylon.js
DESCRIPTION: Demonstrates how to remove particles from an expandable Solid Particle System using index ranges.

LANGUAGE: javascript
CODE:
var sps = new BABYLON.SolidParticleSystem("sps", scene, { expandable: true });
sps.addShape(model1, 1000); // adds 1000 particles from model1
sps.buildMesh();

// ... further in the code, when needed
var removed1 = sps.removeParticles(700, 999); // removes the last 300 particles
var removed2 = sps.removeParticles(0, 9); // removes the first 10
sps.buildMesh(); // update the SPS mesh geometry from the last particle additions
sps.setParticles();

----------------------------------------

TITLE: Creating a Smart Filter in TypeScript
DESCRIPTION: Demonstrates how to create a basic Smart Filter, add blocks, and connect them together. This snippet shows the core steps for building a filter graph.

LANGUAGE: typescript
CODE:
const smartFilter = new SmartFilter("Simplest");
const blur = new BlurBlock(smartFilter, "blur");
videoInput.output.connectTo(blur.input);
blur.output.connectTo(blackAndWhite.input);
titleInput.output.connectTo(smartFilter.output);

----------------------------------------

TITLE: Implementing Runtime Prefab Instantiation in Babylon.js
DESCRIPTION: This JavaScript code snippet demonstrates how to use the SceneManager to instantiate a prefab at runtime in Babylon.js. It defines a TestMeshComponent class that extends BABYLON.MeshComponent and uses the instantiatePrefab method to create a new player object in the scene.

LANGUAGE: javascript
CODE:
module PROJECT {
    export class TestMeshComponent extends BABYLON.MeshComponent {
        public constructor(owner: BABYLON.AbstractMesh, scene: BABYLON.Scene, tick: boolean = true, propertyBag: any = {}) {
            super(owner, scene, tick, propertyBag);
        }
        protected start() :void {

            // Spawn player game object
            const player:BABYLON.Mesh = this.manager.instantiatePrefab("Player", "NewPlayer", BABYLON.Vector3.Zero());
            console.log("Echo Player: " + player.name);
        }
    }
}

----------------------------------------

TITLE: Creating Cascaded Shadow Generator in Babylon.js
DESCRIPTION: Demonstrates basic setup of a CascadedShadowGenerator instance with shadow casting configuration.

LANGUAGE: javascript
CODE:
const csmShadowGenerator = new BABYLON.CascadedShadowGenerator(1024, light);
csmShadowGenerator.getShadowMap().renderList.push(torus);
mesh.receiveShadows = true;

----------------------------------------

TITLE: Applying a Physics Material to a Shape in Babylon.js
DESCRIPTION: Shows how to create and apply a physics material to a shape in Babylon.js. The material defines friction and restitution properties for the shape.

LANGUAGE: javascript
CODE:
const shape = new BABYLON.PhysicsShapeSphere(new BABYLON.Vector3(0,0,0), 0.5, scene);
const material = {friction: 0.2, restitution: 0.3};
shape.material = material;

----------------------------------------

TITLE: Complex Mesh Explosion Example in Babylon.js
DESCRIPTION: A complete example showing how to create multiple spheres and explode them. Creates a central sphere surrounded by smaller spheres in a circular pattern.

LANGUAGE: javascript
CODE:
const toExplodeArray = [];
const sphere1 = BABYLON.MeshBuilder.CreateSphere("sphere1", { segments: 12, diameter: 2 }, scene);
sphere1.position.y += 2;
toExplodeArray.push(sphere1);

for (let alpha = 0; alpha < Math.PI * 2; alpha += Math.PI / 10) {
  const sphere0 = BABYLON.MeshBuilder.CreateSphere("sphere0", { segments: 8, diameter: 0.5 }, scene);
  sphere0.position.y = 2;
  sphere0.position.z = Math.cos(alpha) * 1.25;
  sphere0.position.x = Math.sin(alpha) * 1.25;
  toExplodeArray.push(sphere0);
}

const newExplosion = new BABYLON.MeshExploder(toExplodeArray);

newExplosion.explode(2);

----------------------------------------

TITLE: Configuring Wood Texture Properties
DESCRIPTION: Sets custom properties for wood procedural texture including color and amplitude scale.

LANGUAGE: javascript
CODE:
texture.woodColor = new BABYLON.Color3(0.49, 0.25, 0);
texture.ampScale = new BABYLON.Vector2(1.0, 1.0);

----------------------------------------

TITLE: Setting Pivot Matrix to World Space Coordinates
DESCRIPTION: Example of setting a pivot point at specific world space coordinates using a translation matrix by calculating the appropriate translation vector.

LANGUAGE: javascript
CODE:
const pivotAt = new BABYLON.Vector3(1, 1, 1);
const translation = box.position.subtract(pivotAt)
box.setPivotMatrix(BABYLON.Matrix.Translation(translation.x, translation.y, translation.z));

----------------------------------------

TITLE: Generating Parallel Lines in XoY Plane
DESCRIPTION: This function generates the path points for two lines parallel to a given central line in the XoY plane. It allows specifying different widths for inner and outer lines.

LANGUAGE: javascript
CODE:
var parallelLines = function(options, scene) {
    // ... (full code not shown for brevity)
}

----------------------------------------

TITLE: Creating a Disc with MeshBuilder in Babylon.js
DESCRIPTION: This snippet demonstrates how to create a disc using the MeshBuilder method in Babylon.js. It includes various options for customization such as radius, tessellation, and arc.

LANGUAGE: javascript
CODE:
const disc = BABYLON.MeshBuilder.CreateDisc("disc", options, scene); //scene is optional and defaults to the current scene

----------------------------------------

TITLE: Enabling WebXR Layers Feature
DESCRIPTION: Code to enable WebXR layers using the features manager in Babylon.js. This enables layers and creates the initial projection layer automatically.

LANGUAGE: javascript
CODE:
const featuresManager = xr.baseExperience.featuresManager;
featuresManager.enableFeature(WebXRFeatureName.LAYERS, "stable" /* or latest */, {});

----------------------------------------

TITLE: Creating GUISpinner Component in BabylonJS
DESCRIPTION: Constructor for creating a new GUISpinner element. Takes parameters for id, options object, GUI manager instance, optional callback function, and append flag.

LANGUAGE: typescript
CODE:
new GUISpinner(id: string, options: {
    w: number,
    h: number,
    x: number,
    y: number,
    min?: number,
    max?: number,
    step?: number,
    value?: number,
    orient?: string,
    zIndex?: number,
    tabindex?: number
}, guimanager: GUIManager, callback?: Function, append?: boolean)

----------------------------------------

TITLE: Combining Post Process Effects in Babylon.js
DESCRIPTION: Creates a combined effect using multiple post processes and adds it to the pipeline.

LANGUAGE: javascript
CODE:
var blackAndWhiteThenBlur = new BABYLON.PostProcessRenderEffect(engine, "blackAndWhiteThenBlur", function() { return [blackAndWhite, horizontalBlur] });
standardPipeline.addEffect(blackAndWhiteThenBlur);

----------------------------------------

TITLE: Creating Dashed Lines with Mesh Class
DESCRIPTION: Alternative approach to create dashed lines using the Mesh class directly, with support for updatable lines and instances.

LANGUAGE: javascript
CODE:
const dashedlines = BABYLON.Mesh.CreateDashedLines("dashedLines", vector3 array, dashSize, gapSize, dashNb, scene);
const dashedlines = BABYLON.Mesh.CreateDashedLines("dashedLines", vector3 array, dashSize, gapSize, dashNb, scene, updatable, instance); //optional parameters after scene

----------------------------------------

TITLE: Opening Babylon.js Inspector Panes in Popup Mode
DESCRIPTION: Shows how to open the Scene Explorer and Inspector panes in separate popup windows.

LANGUAGE: javascript
CODE:
var debugLayer = await scene.debugLayer.show();

debugLayer.popupSceneExplorer();
debugLayer.popupInspector();

----------------------------------------

TITLE: Creating HTML Mesh Scene in BabylonJS
DESCRIPTION: A comprehensive example demonstrating how to set up a scene with various HTML Mesh elements, including forms, PDFs, websites, and videos.

LANGUAGE: javascript
CODE:
import { Scene } from "@babylonjs/core/scene";
import { Engine } from "@babylonjs/core/Engines/engine";
import { MeshBuilder } from "@babylonjs/core/Meshes/meshBuilder";
import { ActionManager } from "@babylonjs/core/Actions/actionManager";
import { ExecuteCodeAction } from "@babylonjs/core/Actions/directActions";
import { Color4 } from "@babylonjs/core/Maths/math.color";
import "@babylonjs/core/Helpers/sceneHelpers";

import { HtmlMeshRenderer, HtmlMesh } from "babylonjs-addons"

let engine;
let scene;

const createScene = () => {
  const canvas = document.querySelector("canvas");
  engine = new Engine(canvas, true);

  // This creates a basic Babylon Scene object (non-mesh)
  scene = new Scene(engine);

  // It is critical to have a transparent clear color for HtmlMesh to work.
  scene.clearColor = new Color4(0, 0, 0, 0);

  scene.createDefaultCameraOrLight(true, true, true);
  scene.activeCamera.radius = 20;

  // Create the HtmlMeshRenderer
  const htmlMeshRenderer = new HtmlMeshRenderer(scene);

  // Shows how this can be used to include html content, such
  // as a form, in your scene.  This can be used to create
  // richer UIs than can be created with the standard Babylon
  // UI control, albeit with the restriction that such UIs would
  // not display in native mobile apps or XR applications.
  const htmlMeshDiv = new HtmlMesh(scene, "html-mesh-div");
  const div = document.createElement("div");
  div.innerHTML = `
        <form style="padding: 10px; transform: scale(4); transform-origin: 0 0;">
            <label for="name">Name:</label>
            <input type="text" id="name" name="name" required><br><br>
            
            <label for="country">Country:</label>
            <select id="country" name="country">
                <option value="USA">USA</option>
                <option value="Canada">Canada</option>
                <option value="UK">UK</option>
                <option value="Australia">Australia</option>
            </select><br><br>
            
            <label for="hobbies">Hobbies:</label><br>
            <input type="checkbox" id="hobby1" name="hobbies" value="Reading">
            <label for="hobby1">Reading</label><br>
            <input type="checkbox" id="hobby2" name="hobbies" value="Gaming">
            <label for="hobby2">Gaming</label><br>
            <input type="checkbox" id="hobby3" name="hobbies" value="Sports">
            <label for="hobby3">Sports</label><br><br>
        </form>
    `;
  div.style.backgroundColor = "white";
  div.style.width = "480px";
  div.style.height = "360px";
  // Style the form

  htmlMeshDiv.setContent(div, 4, 3);
  htmlMeshDiv.position.x = -3;
  htmlMeshDiv.position.y = 2;

  // Shows how this can be used to include a PDF in your scene.  Note this is
  // conceptual only.  Displaying a PDF like this works, but any links in the
  // PDF will navigate the current tab, which is probably not what you want.
  // There are other solutions out there such as PDF.js that may give you more
  // control, but ultimately proper display of PDFs is not within the scope of
  // this project.
  const pdfUrl = "https://cdn.glitch.com/3da1885b-3463-4252-8ded-723332b5de34%2FNew_Horizons.pdf#zoom=200?v=1599831745689";
  const htmlMeshPdf = new HtmlMesh(scene, "html-mesh-pdf");
  const iframePdf = document.createElement("iframe");
  iframePdf.src = pdfUrl;
  iframePdf.width = "480px";
  iframePdf.height = "360px";
  htmlMeshPdf.setContent(iframePdf, 4, 3);
  htmlMeshPdf.position.x = 3;
  htmlMeshPdf.position.y = 2;

  // Shows how this can be used to include a website in your scene
  const siteUrl = "https://www.babylonjs.com/";
  const htmlMeshSite = new HtmlMesh(scene, "html-mesh-site");
  const iframeSite = document.createElement("iframe");
  iframeSite.src = siteUrl;
  iframeSite.width = "480px";
  iframeSite.height = "360px";
  htmlMeshSite.setContent(iframeSite, 4, 3);
  htmlMeshSite.position.x = -3;
  htmlMeshSite.position.y = -2;

  // Shows how this can be used to include a YouTube video in your scene
  const videoId = "zELYw2qEUjI";
  const videoUrl = ["https://www.youtube.com/embed/", videoId, "?rel=0&enablejsapi=1&disablekb=1&controls=0&fs=0&modestbranding=1"].join("");
  const htmlMeshVideo = new HtmlMesh(scene, "html-mesh-video");
  const iframeVideo = document.createElement("iframe");
  iframeVideo.src = videoUrl;
  iframeVideo.width = "480px";
  iframeVideo.height = "360px";
  htmlMeshVideo.setContent(iframeVideo, 4, 3);
  htmlMeshVideo.position.x = 3;
  htmlMeshVideo.position.y = -2;

  // Shows how to create an HTML Overlay by the fit strategy: FitStrategy.NONE
  const overlayMesh = new HtmlMesh(scene, "html-overlay-mesh", { isCanvasOverlay: true });
  const overlayMeshDiv = document.createElement("div");
  overlayMeshDiv.innerHTML = `<p>This is an overlay. It is positioned in front of the canvas This allows it to have transparency and to be non-rectangular, but it will always show over any other content in the scene</p>`;
  overlayMeshDiv.style.backgroundColor = "rgba(0,255,0,0.49)";
  overlayMeshDiv.style.width = "120px";
  overlayMeshDiv.style.height = "90px";
  overlayMeshDiv.style.display = "flex";
  overlayMeshDiv.style.alignItems = "center";
  overlayMeshDiv.style.justifyContent = "center";
  overlayMeshDiv.style.borderRadius = "20px";
  overlayMeshDiv.style.fontSize = "xx-small";
  overlayMeshDiv.style.padding = "10px";
  // Style the form

  overlayMesh.setContent(overlayMeshDiv, 4, 3);
  overlayMesh.position.x = 0;
  overlayMesh.position.y = 0;

  // Shows how to create an HTML Overlay by the fit strategy: FitStrategy.CONTAIN
  const overlayContainMesh = new HtmlMesh(scene, "html-overlay-mesh-contain", { isCanvasOverlay: true, fitStrategy: FitStrategy.CONTAIN });
  const overlayContainMeshDiv = document.createElement("div");
  overlayContainMeshDiv.innerHTML = `Contain: This is an overlay. It is positioned in front of the canvas This allows it to have transparency and to be non-rectangular, but it will always show over any other content in the scene`;
  overlayContainMeshDiv.style.width = "200px";
  overlayContainMeshDiv.style.display = "flex";
  overlayContainMeshDiv.style.alignItems = "center";
  overlayContainMeshDiv.style.justifyContent = "center";
  overlayContainMeshDiv.style.padding = "10px";
  overlayContainMeshDiv.style.backgroundColor = "rgba(25,0,255,0.49)";

  overlayContainMesh.setContent(overlayContainMeshDiv, 4, 3);
  overlayContainMesh.position.x = 0;
  overlayContainMesh.position.y = 3.5;
  overlayContainMesh.billboardMode = 7;

  // Shows how to create an HTML Overlay by the fit strategy: FitStrategy.COVER
  const overlayCoverMesh = new HtmlMesh(scene, "html-overlay-mesh-cover", { isCanvasOverlay: true, fitStrategy: FitStrategy.COVER });
  const overlayCoverMeshDiv = document.createElement("div");
  overlayCoverMeshDiv.innerHTML = `Cover: This is an overlay. It is positioned in front of the canvas This allows it to have transparency and to be non-rectangular, but it will always show over any other content in the scene`;
  overlayCoverMeshDiv.style.backgroundColor = "rgba(25,0,255,0.49)";
  overlayCoverMeshDiv.style.width = "150px";
  overlayCoverMeshDiv.style.display = "flex";
  overlayCoverMeshDiv.style.alignItems = "center";
  overlayCoverMeshDiv.style.justifyContent = "center";
  overlayCoverMeshDiv.style.padding = "10px";
  overlayCoverMeshDiv.style.overflow = "hidden";

  overlayCoverMesh.setContent(overlayCoverMeshDiv, 4, 3);
  overlayCoverMesh.position.x = -2.5;
  overlayCoverMesh.position.y = 7;
  overlayCoverMesh.billboardMode = 7;

  // Shows how to create an HTML Overlay by the fit strategy: FitStrategy.STRETCH
  const overlayStretchMesh = new HtmlMesh(scene, "html-overlay-mesh-stretch", { isCanvasOverlay: true, fitStrategy: FitStrategy.STRETCH });
  const overlayStretchMeshDiv = document.createElement("div");
  overlayStretchMeshDiv.innerHTML = `Stretch: This is an overlay. It is positioned in front of the canvas This allows it to have transparency and to be non-rectangular, but it will always show over any other content in the scene`;
  overlayStretchMeshDiv.style.backgroundColor = "rgba(25,0,255,0.49)";
  overlayStretchMeshDiv.style.width = "400px";
  overlayStretchMeshDiv.style.display = "flex";
  overlayStretchMeshDiv.style.alignItems = "center";
  overlayStretchMeshDiv.style.justifyContent = "center";
  overlayStretchMeshDiv.style.padding = "10px";

  overlayStretchMesh.setContent(overlayStretchMeshDiv, 4, 3);
  overlayStretchMesh.position.x = 2;
  overlayStretchMesh.position.y = 7;
  overlayStretchMesh.billboardMode = 7;
};

const startRenderLoop = () => {
  engine.runRenderLoop(() => {
    scene.render();
  });
};

createScene();
startRenderLoop();

----------------------------------------

TITLE: Dynamic Light Creation for Lanterns
DESCRIPTION: Creates point lights for lanterns and optimizes performance by limiting affected meshes.

LANGUAGE: javascript
CODE:
this._scene.getMeshByName("__root__").getChildMeshes().forEach((m) => {
    if (this._lightSphere.intersectsMesh(m)) {
        light.includedOnlyMeshes.push(m);
    }
});
this._lightSphere.dispose();

----------------------------------------

TITLE: Configuring GlowLayer Blur Intensity in Babylon.js
DESCRIPTION: Customizes the blur effect of the GlowLayer by setting texture size and kernel size during initialization.

LANGUAGE: javascript
CODE:
const gl = new BABYLON.GlowLayer("glow", scene, {
  mainTextureFixedSize: 1024,
  blurKernelSize: 64
});

----------------------------------------

TITLE: Creating Gun Sight Crosshair with Layer Masks in Babylon.js
DESCRIPTION: This function creates a gun sight crosshair using a second orthographic camera and layer masks. It demonstrates mesh creation, material setup, and layer mask assignment for selective visibility.

LANGUAGE: javascript
CODE:
function addGunSight(scene) {
  if (scene.activeCameras.length === 0) {
    scene.activeCameras.push(scene.activeCamera);
  }
  const secondCamera = new BABYLON.FreeCamera("GunSightCamera", new BABYLON.Vector3(0, 0, -50), scene);
  secondCamera.mode = BABYLON.Camera.ORTHOGRAPHIC_CAMERA;
  secondCamera.layerMask = 0x20000000;
  scene.activeCameras.push(secondCamera);

  meshes = [];
  const h = 250;
  const w = 250;

  const y = BABYLON.MeshBuilder.CreateBox("y", { size: h * 0.2 }, scene);
  y.scaling = new BABYLON.Vector3(0.05, 1, 1);
  y.position = new BABYLON.Vector3(0, 0, 0);
  meshes.push(y);

  const x = BABYLON.MeshBuilder.CreateBox("x", { size: h * 0.2 }, scene);
  x.scaling = new BABYLON.Vector3(1, 0.05, 1);
  x.position = new BABYLON.Vector3(0, 0, 0);
  meshes.push(x);

  const lineTop = BABYLON.MeshBuilder.CreateBox("lineTop", { size: w * 0.8 }, scene);
  lineTop.scaling = new BABYLON.Vector3(1, 0.005, 1);
  lineTop.position = new BABYLON.Vector3(0, h * 0.5, 0);
  meshes.push(lineTop);

  const lineBottom = BABYLON.MeshBuilder.CreateBox("lineBottom", { size: w * 0.8 }, scene);
  lineBottom.scaling = new BABYLON.Vector3(1, 0.005, 1);
  lineBottom.position = new BABYLON.Vector3(0, h * -0.5, 0);
  meshes.push(lineBottom);

  const lineLeft = BABYLON.MeshBuilder.CreateBox("lineLeft", { size: h }, scene);
  lineLeft.scaling = new BABYLON.Vector3(0.01, 1, 1);
  lineLeft.position = new BABYLON.Vector3(w * -0.4, 0, 0);
  meshes.push(lineLeft);

  const lineRight = BABYLON.MeshBuilder.CreateBox("lineRight", { size: h }, scene);
  lineRight.scaling = new BABYLON.Vector3(0.01, 1, 1);
  lineRight.position = new BABYLON.Vector3(w * 0.4, 0, 0);
  meshes.push(lineRight);

  const gunSight = BABYLON.Mesh.MergeMeshes(meshes);
  gunSight.name = "gunSight";
  gunSight.layerMask = 0x20000000;
  gunSight.freezeWorldMatrix();

  const mat = new BABYLON.StandardMaterial("emissive mat", scene);
  mat.checkReadyOnlyOnce = true;
  mat.emissiveColor = new BABYLON.Color3(0, 1, 0);

  gunSight.material = mat;
}

----------------------------------------

TITLE: Setting BillBoard Mode in BabylonJS
DESCRIPTION: Demonstrates how to set billboard mode on a mesh object to make it face the camera. The value 7 represents BILLBOARDMODE_ALL which makes the mesh face the camera on all axes.

LANGUAGE: javascript
CODE:
box.billboardMode = 7;

----------------------------------------

TITLE: Creating Prism Roof with BabylonJS CreateCylinder
DESCRIPTION: Creates a prism-shaped roof using BabylonJS MeshBuilder.CreateCylinder method. The cylinder is created with 3 tessellation points to form a triangular prism, then scaled and rotated to form the roof structure. The roof is positioned above the house base with specific dimensions and orientation.

LANGUAGE: javascript
CODE:
const roof = BABYLON.MeshBuilder.CreateCylinder("roof", {diameter: 1.3, height: 1.2, tessellation: 3});
roof.scaling.x = 0.75;
roof.rotation.z = Math.PI / 2;
roof.position.y = 1.22;

----------------------------------------

TITLE: Assigning Materials to Meshes
DESCRIPTION: Shows how to assign the created materials to mesh objects in the scene.

LANGUAGE: javascript
CODE:
roof.material = roofMat;
box.material = boxMat;

----------------------------------------

TITLE: Emissive Highlighting
DESCRIPTION: Demonstrates using emissive texture as the source for highlight color.

LANGUAGE: javascript
CODE:
hl1.addMesh(sphere, BABYLON.Color3.Black(), true);

----------------------------------------

TITLE: Creating TransformNode Parent for Box
DESCRIPTION: Creates a TransformNode as a center of transformation and sets it as a parent for a box mesh.

LANGUAGE: javascript
CODE:
//create a Center of Transformation
var CoT = new BABYLON.TransformNode("root");
box.parent = CoT; //apply to Box

----------------------------------------

TITLE: Getting User Height in Babylon.js WebXR
DESCRIPTION: Retrieves the current user's height from the real ground in the WebXR environment. This is particularly useful when the ground level is not at y=0.

LANGUAGE: javascript
CODE:
const userHeight = xrCamera.realWorldHeight;

----------------------------------------

TITLE: Creating Animation Object in Babylon.js
DESCRIPTION: Creates a new animation object for rotating a wheel about its y-axis at 30 frames per second with cycling loop mode.

LANGUAGE: javascript
CODE:
const animWheel = new BABYLON.Animation("wheelAnimation", "rotation.y", 30, BABYLON.Animation.ANIMATIONTYPE_FLOAT, BABYLON.Animation.ANIMATIONLOOPMODE_CYCLE);

----------------------------------------

TITLE: Setting Joint Motor
DESCRIPTION: Examples of setting motor parameters on a joint, either with just speed or with both speed and force parameters.

LANGUAGE: javascript
CODE:
joint.setMotor(speed);

// With force parameter
joint.setMotor(speed, force);

----------------------------------------

TITLE: Creating Animation Groups in BabylonJS
DESCRIPTION: Demonstrates how to create AnimationGroup instances and add targeted animations to them. This allows for grouping and managing multiple animations together.

LANGUAGE: javascript
CODE:
const animationGroup1 = new BABYLON.AnimationGroup("Group1");
const animationGroup2 = new BABYLON.AnimationGroup("Group2");

animationGroup1.addTargetedAnimation(animation1, mesh1);
animationGroup1.addTargetedAnimation(animation3, mesh1);
animationGroup1.addTargetedAnimation(animation2, mesh2);

animationGroup2.addTargetedAnimation(animation2, mesh3);
animationGroup2.addTargetedAnimation(animation1, mesh4);
animationGroup2.addTargetedAnimation(animation2, mesh4);
animationGroup2.addTargetedAnimation(animation3, mesh4);

----------------------------------------

TITLE: Adding Custom Particles for Fluid Rendering in TypeScript
DESCRIPTION: Method signature for adding custom particles to the fluid renderer. Shows required parameters including buffers for particle data, number of particles, and optional parameters for diffuse texture generation and rendering configuration.

LANGUAGE: typescript
CODE:
public addCustomParticles(
    buffers: { [key: string]: FloatArray },
    numParticles: number,
    generateDiffuseTexture?: boolean,
    targetRenderer?: FluidRenderingTargetRenderer,
    camera?: Camera
): IFluidRenderingRenderObject

----------------------------------------

TITLE: Creating and Updating a Dynamic Ribbon Mesh
DESCRIPTION: Demonstrates how to create an updatable ribbon mesh and modify its shape using path arrays. The code shows both initial creation and subsequent updates of the ribbon's vertex positions.

LANGUAGE: javascript
CODE:
const pathFunction = function (k) {
  const path = [];
  for (let i = 0; i < 60; i++) {
    const x = i - 30;
    const y = 0;
    const z = k;
    path.push(new BABYLON.Vector3(x, y, z));
  }
  return path;
};
const sideO = BABYLON.Mesh.BACKSIDE;
const pathArray = [];
for (let i = -20; i < 20; i++) {
  pathArray.push(pathFunction(i * 2));
}
const mesh = BABYLON.Mesh.CreateRibbon("ribbon", pathArray, false, false, 0, scene, true, sideO);

----------------------------------------

TITLE: Creating Door Animation in Babylon.js
DESCRIPTION: This snippet demonstrates how to create an animation for a door opening and closing in Babylon.js. It defines key frames for the door's rotation around the y-axis at specific times.

LANGUAGE: javascript
CODE:
const sweep = new BABYLON.Animation("sweep", "rotation.y", frameRate, BABYLON.Animation.ANIMATIONTYPE_FLOAT, BABYLON.Animation.ANIMATIONLOOPMODE_CONSTANT);

const sweep_keys = [];

sweep_keys.push({
  frame: 0,
  value: 0,
});

sweep_keys.push({
  frame: 3 * frameRate,
  value: 0,
});

sweep_keys.push({
  frame: 5 * frameRate,
  value: Math.PI / 3,
});

sweep_keys.push({
  frame: 13 * frameRate,
  value: Math.PI / 3,
});

sweep_keys.push({
  frame: 15 * frameRate,
  value: 0,
});

sweep.setKeys(sweep_keys);

----------------------------------------

TITLE: Creating a 2D Line in XoZ Plane with Set Width
DESCRIPTION: This function creates a 2D line mesh in the XoZ plane with a specified width. It supports open and closed lines, and can apply textures in different ways.

LANGUAGE: javascript
CODE:
var line2D = function(name, options, scene) {
    // ... (full code not shown for brevity)
}

----------------------------------------

TITLE: Creating 3D Text with MeshBuilder in Babylon.js
DESCRIPTION: This snippet demonstrates how to create a 3D text mesh using MeshBuilder.CreateText. It requires a font data file and allows customization of size, resolution, and depth.

LANGUAGE: javascript
CODE:
const fontData = await (await fetch("./fonts/Droid Sans_Regular.json")).json(); // Providing you have a font data file at that location
const text = BABYLON.MeshBuilder.CreateText(
  "myText",
  "Hello World !! @ #$ % é",
  fontData,
  {
    size: 16,
    resolution: 64,
    depth: 10,
  },
  scene,
);

----------------------------------------

TITLE: Entering and Exiting XR Session in JavaScript
DESCRIPTION: This snippet shows how to enter an XR session in immersive VR mode with local-floor reference, and how to exit the XR session using the WebXR Experience Helper.

LANGUAGE: javascript
CODE:
const sessionManager = await xrHelper.enterXRAsync("immersive-vr", "local-floor" /*, optionalRenderTarget */ );

LANGUAGE: javascript
CODE:
await xrHelper.exitXRAsync();

----------------------------------------

TITLE: Initializing VaporwearExperience in React Component
DESCRIPTION: Creates a new VaporwearExperience instance and initializes it with the canvas and asset URLs in a React component.

LANGUAGE: JavaScript
CODE:
const experience = new VaporwearExperience(canvas.current, {
    "environment": "/environment.env",
    "shoe": "/shoe.glb",
    "laces": "/laces.glb",
    "sole": "/sole.glb"
});

experience.run();

----------------------------------------

TITLE: Disabling Object-Based Motion Blur in Babylon.js
DESCRIPTION: This snippet shows how to disable object-based motion blur and enable screen-based mode for better performance in large scenes.

LANGUAGE: javascript
CODE:
// Disable object-based mode in order to enable screen-based mode.
motionblur.isObjectBased = false;

----------------------------------------

TITLE: Debugging Navigation Mesh Visualization
DESCRIPTION: Creates a visual debug representation of the navigation mesh with semi-transparent material.

LANGUAGE: javascript
CODE:
navmeshdebug = navigationPlugin.createDebugNavMesh(scene);
const matdebug = new BABYLON.StandardMaterial("matdebug", scene);
matdebug.diffuseColor = new BABYLON.Color3(0.1, 0.2, 1);
matdebug.alpha = 0.2;
navmeshdebug.material = matdebug;

----------------------------------------

TITLE: Configuring PBR Material with Reflection Probe in Babylon.js
DESCRIPTION: This snippet shows how to set up a PBR material to use a reflection probe's cube texture and enable real-time filtering for improved quality.

LANGUAGE: javascript
CODE:
mainMaterial.reflectionTexture = probe.cubeTexture;
mainMaterial.realTimeFiltering = true;
mainMaterial.realTimeFilteringQuality = BABYLON.Constants.TEXTURE_FILTERING_QUALITY_MEDIUM;

----------------------------------------

TITLE: Setting Particle Size Range in Babylon.js
DESCRIPTION: Sets the minimum and maximum size for particles in a particle system.

LANGUAGE: javascript
CODE:
particleSystem.minSize = 0.1;
particleSystem.maxSize = 0.5;

----------------------------------------

TITLE: Opening URL in New Window with JavaScript
DESCRIPTION: This snippet shows how to open a URL in a new window using JavaScript. It can be used within Babylon.js Action Manager for event-based URL opening.

LANGUAGE: javascript
CODE:
window.open(URL)

----------------------------------------

TITLE: JavaScript Player Initialization
DESCRIPTION: JavaScript code for programmatically initializing the Azure Media Player with 360 video plugin

LANGUAGE: javascript
CODE:
const myPlayer = amp("videoPlayer", {
  nativeControlsForTouch: false,
  autoplay: false,
  controls: true,
  width: "640",
  height: "480",
  poster: "",
  techOrder: ["azureHtml5JS", "html5"],
  plugins: {
    threeSixty: {
      enableVR: true,
    },
  },
}, function() {
  console.log("Good to go!");
  this.addEventListener("ended", function() {
    console.log("Finished!");
  });
});

myPlayer.src([{
  src: "//willzhanmswest.streaming.mediaservices.windows.net/1f2dd2dd-ee99-40be-aae9-d0c2209982eb/DroneFlightOverLasVegasStripH3Pro7.ism/Manifest",
  type: "application/vnd.ms-sstr+xml"
}]);

----------------------------------------

TITLE: Loading Assets Asynchronously with Promises in Babylon.js
DESCRIPTION: This snippet demonstrates how to use promises to load an asset container asynchronously and add it to the scene.

LANGUAGE: javascript
CODE:
BABYLON.SceneLoader.LoadAssetContainerAsync("https://playground.babylonjs.com/scenes/", "skull.babylon", scene).then(function (container) {
  container.addAllToScene();
});

----------------------------------------

TITLE: Customizing Particle Start Direction in Babylon.js
DESCRIPTION: Default implementation of the startDirectionFunction for customizing the initial direction of particles in a particle system.

LANGUAGE: javascript
CODE:
particleSystem.startDirectionFunction = (worldMatrix: Matrix, directionToUpdate: Vector3, particle: Particle, isLocal: boolean) {
    var randX = randomNumber(this.direction1.x, this.direction2.x);
    var randY = randomNumber(this.direction1.y, this.direction2.y);
    var randZ = randomNumber(this.direction1.z, this.direction2.z);

    Vector3.TransformNormalFromFloatsToRef(randX, randY, randZ, worldMatrix, directionToUpdate);
}

----------------------------------------

TITLE: Creating Raw RGB Texture in Babylon.js
DESCRIPTION: This snippet demonstrates how to create a raw RGB texture using the BABYLON.RawTexture.CreateRGBTexture method. It requires raw data as a Uint8Array, width and height of the texture, and the Babylon scene object.

LANGUAGE: javascript
CODE:
new BABYLON.RawTexture.CreateRGBTexture(data, width, height, scene);

----------------------------------------

TITLE: Creating DirectionalLight in Babylon.js
DESCRIPTION: Initializes a DirectionalLight object in Babylon.js, which is suitable for producing shadows. The light's direction and position are set to affect shadow direction and length.

LANGUAGE: javascript
CODE:
const light = new BABYLON.DirectionalLight("dir", direction, scene);
light.position = new BABYLON.Vector3(0, 15, -30);

----------------------------------------

TITLE: Adding an Observer to a Scene
DESCRIPTION: Example of adding an Observer to the scene's onBeforeRenderObservable to modify a sphere's scaling.

LANGUAGE: javascript
CODE:
const alpha = 0;
scene.onBeforeRenderObservable.add(function () {
  sphere.scaling.y = Math.cos(alpha);

  alpha += 0.01;
});

----------------------------------------

TITLE: Setting Particle Colors in Babylon.js
DESCRIPTION: Defines three colors for particles: two for blending during lifetime and one for just before the end of lifetime.

LANGUAGE: javascript
CODE:
particleSystem.color1 = new BABYLON.Color4(0.7, 0.8, 1.0, 1.0);
particleSystem.color2 = new BABYLON.Color4(0.2, 0.5, 1.0, 1.0);
particleSystem.colorDead = new BABYLON.Color4(0, 0, 0.2, 0.0);

----------------------------------------

TITLE: Registering Custom Particle Update Function
DESCRIPTION: Shows how to assign a custom update function to the SPS for particle animation.

LANGUAGE: javascript
CODE:
SPS.updateParticle = myUpdateParticle

----------------------------------------

TITLE: Registering Custom WebXR Feature
DESCRIPTION: Demonstrates how to register a new custom WebXR feature with the Features Manager.

LANGUAGE: javascript
CODE:
const nameOfFeature = "awesome-name";
const version = 1;
const isTheFeatureStable = true
WebXRFeaturesManager.AddWebXRFeature(nameOfFeature, (xrSessionManager, options) => {
    return () => new MyNewFeature(xrSessionManager, options);
}, version, isTheFeatureStable);

----------------------------------------

TITLE: Handling Gamepad Input Events in Babylon.js
DESCRIPTION: Demonstrates how to add event listeners for gamepad button presses and stick movements once a gamepad is connected in Babylon.js.

LANGUAGE: javascript
CODE:
gamepadManager.onGamepadConnectedObservable.add((gamepad, state)=>{
    gamepad.onButtonDownObservable.add((button, state)=>{
        //Button has been pressed
        console.log(button)
    })
    gamepad.onleftstickchanged((values)=>{
        //Left stick has been moved
        console.log(values.x+" "+values.y)
    })
}

----------------------------------------

TITLE: Converting ZXZ Rotations to Quaternion in Babylon.js
DESCRIPTION: Shows how to convert ZXZ rotation angles to a quaternion using the RotationAlphaBetaGamma method in Babylon.js.

LANGUAGE: javascript
CODE:
var abcQuaternion = BABYLON.Quaternion.RotationAlphaBetaGamma(alpha, beta, gamma);

----------------------------------------

TITLE: Sequential Rotation Using addRotation Method
DESCRIPTION: Demonstrates how to sequence multiple rotations using the addRotation method. Each rotation is applied in sequence, rotating the mesh around different axes.

LANGUAGE: javascript
CODE:
mesh.addRotation(Math.PI / 2, 0, 0);
mesh.addRotation(0, 0, Math.PI / 3);
mesh.addRotation(0, Math.PI / 8, 0);

----------------------------------------

TITLE: Creating and Updating Extruded Shapes with MeshBuilder in Babylon.js
DESCRIPTION: Demonstrates how to create and update an extruded shape using MeshBuilder.ExtrudeShape() in Babylon.js. It shows the creation of options object, initial shape creation, and subsequent updates to the shape, path, and other properties.

LANGUAGE: javascript
CODE:
const options = {
    shape: myPoints, //vec3 array with z = 0,
    path: myPath, //vec3 array
    updatable: true
}

let extruded = BABYLON.MeshBuilder.ExtrudeShape("ext", options, scene);  //scene is optional and defaults to the current scene

// Update
options.shape = newShape;
options.path = newPath;
options.instance = extruded;
extruded = BABYLON.MeshBuilder.ExtrudeShape("ext", options); //No scene parameter when using instance

----------------------------------------

TITLE: Complete createInnerPoints Function
DESCRIPTION: The complete implementation of the mesh prototype extension that generates random points inside a mesh using the described algorithm.

LANGUAGE: javascript
CODE:
BABYLON.Mesh.prototype.createInnerPoints = function(pointsNb) {
	var boundInfo = this.getBoundingInfo();
	var diameter = 2 * boundInfo.boundingSphere.radius;
	this.updateFacetData();

	var positions = this.getVerticesData(BABYLON.VertexBuffer.PositionKind);
	var indices = this.getIndices();
	
	var point = BABYLON.Vector3.Zero();
	var points = [];
	var directions = [];
	
	var randX = 0;
	var randY = 0;
	var randZ = 0
	
	var index = 0;
	var id0 = 0;
	var id1 = 0; 
	var id2 = 0;
	var v0X = 0;
	var v0Y = 0;
	var v0Z = 0;
	var v1X = 0;
	var v1Y = 0
	var v1Z = 0;
	var v2X = 0;
	var v2Y = 0;
	var v2Z = 0;
	var vertex0 = BABYLON.Vector3.Zero();
	var vertex1 = BABYLON.Vector3.Zero();
	var vertex2 = BABYLON.Vector3.Zero();
	var vec0 = BABYLON.Vector3.Zero();
	var vec1 = BABYLON.Vector3.Zero();
		
	var lamda = 0;	
	var mu = 0;
	var norm = BABYLON.Vector3.Zero();
	var tang = BABYLON.Vector3.Zero();
	var biNorm = BABYLON.Vector3.Zero();
	var angle = 0;
	var facetPlaneVec = BABYLON.Vector3.Zero();

	var gap = 0;
	var distance = 0;
	var ray = new BABYLON.Ray(BABYLON.Vector3.Zero(), BABYLON.AxisX);
	var pickInfo;
	var facetPoint = BABYLON.Vector3.Zero();
	var direction = BABYLON.Vector3.Zero();
	var particleDirection = BABYLON.Vector3.Zero();
	var particleDistance = 0;
	var testPoint = BABYLON.Vector3.Zero();

	for(let p = 0; p <pointsNb; p++) {			
		index = Math.floor(BABYLON.Scalar.RandomRange(0, indices.length / 3));		
		id0 = indices[3 * index];
		id1 = indices[3 * index + 1]; 
		id2 = indices[3 * index + 2];
		v0X = positions[3 * id0];
		v0Y = positions[3 * id0 + 1];
		v0Z = positions[3 * id0 + 2];
		v1X = positions[3 * id1];
		v1Y = positions[3 * id1 + 1];
		v1Z = positions[3 * id1 + 2];
		v2X = positions[3 * id2];
		v2Y = positions[3 * id2 + 1];
		v2Z = positions[3 * id2 + 2];
		vertex0.set(v0X, v0Y, v0Z);
		vertex1.set(v1X, v1Y, v1Z);
		vertex2.set(v2X, v2Y, v2Z);
		vertex1.subtractToRef(vertex0, vec0);
		vertex2.subtractToRef(vertex1, vec1);
		
		norm = this.getFacetNormal(index).normalize().scale(-1);	
		tang = vec0.clone().normalize();
		biNorm = BABYLON.Vector3.Cross(norm, tang);
		angle = BABYLON.Scalar.RandomRange(0, 2 * Math.PI);
		facetPlaneVec = tang.scale(Math.cos(angle)).add(biNorm.scale(Math.sin(angle)));
		angle = BABYLON.Scalar.RandomRange(0.1, Math.PI);
		direction = facetPlaneVec.scale(Math.cos(angle)).add(norm.scale(Math.sin(angle)));
		
		//form a point inside the facet v0, v1, v2;
		lamda = BABYLON.Scalar.RandomRange(0, 1);	
		mu = BABYLON.Scalar.RandomRange(0, 1);
		facetPoint = vertex0.add(vec0.scale(lamda)).add(vec1.scale(lamda * mu));

		gap = 0;
		distance = 0;
		pickInfo;	
		ray.origin = facetPoint;
		ray.direction = direction;
		ray.length = diameter;	
		pickInfo = ray.intersectsMesh(this);	
		if (pickInfo.hit) {			
			distance = pickInfo.pickedPoint.subtract(facetPoint).length();
			gap = BABYLON.Scalar.RandomRange(0, 1) * distance;
			point = facetPoint.add(direction.scale(gap));
		}
		else {
			point.set(0, 0, 0);
		}
		points.push(point);	
	}
	
	return points;
}

----------------------------------------

TITLE: Initializing GPU Particle System with Custom Random Texture Size in Babylon.js
DESCRIPTION: This snippet shows how to create a GPU particle system with a custom random texture size of 4096. The random texture is used to generate random values for particle animation on the GPU.

LANGUAGE: javascript
CODE:
var particleSystem = new BABYLON.GPUParticleSystem("particles", { capacity:1000000, randomTextureSize: 4096 }, scene);

----------------------------------------

TITLE: Creating a Hermite Quaternion Spline in Babylon.js
DESCRIPTION: This function creates a Curve3 object representing a Hermite quaternion spline in 3D space within a unit sphere.

LANGUAGE: javascript
CODE:
const hermiteQuarternionSpline = (p1, t1, p2, t2, nbPoints) => {
  const hermite = new Array();
  const step = 1.0 / nbPoints;
  for (let i = 0; i <= nbPoints; i++) {
    const q = BABYLON.Quaternion.Hermite(p1, t1, p2, t2, i * step);
    q.normalize();
    if (q.w < 0) {
      q.scaleInPlace(-1);
    }
    const v = new BABYLON.Vector3(q.x / (1 + q.w), q.y / (1 + q.w), q.z / (1 + q.w));
    hermite.push(v);
  }
  return new BABYLON.Curve3(hermite);
};

----------------------------------------

TITLE: Creating Immutable SPS in Babylon.js
DESCRIPTION: Demonstrates how to create an immutable Solid Particle System with the updatable parameter set to false.

LANGUAGE: javascript
CODE:
var SPS = new BABYLON.SolidParticleSystem(name, scene, { updatable: false });

----------------------------------------

TITLE: Initializing Navigation Plugin in Babylon.js
DESCRIPTION: Creates a new instance of the RecastJSPlugin for navigation mesh functionality.

LANGUAGE: javascript
CODE:
let navigationPlugin = new BABYLON.RecastJSPlugin();

----------------------------------------

TITLE: Importing Mesh from Assets Library in Babylon.js
DESCRIPTION: Example of importing a mesh from the Assets Library using the scene.appendAsync method. The rootUrl and filename parameters use the Assets.meshes object.

LANGUAGE: javascript
CODE:
scene.appendAsync(Assets.meshes.alien.rooturl, Assets.meshes.alien.filename);

----------------------------------------

TITLE: Assembling Track from Sections in JavaScript
DESCRIPTION: Implements the createTrack function to assemble the complete track data from individual sections, including validation and data array creation.

LANGUAGE: javascript
CODE:
var createTrack = function (points, sections) {
  //Data arrays
  var directions = [];
  var rotations = [];
  var carriageRotations = [];
  var passengerRotations = [];

  var nbSections = sections.length;

  var looped = sections[nbSections - 1].start === 0;
  for (let i = 1; i < nbSections - looped; i++) {
    if (sections[i - 1].start > sections[i].start) {
      console.log("sections not in order");
      return;
    }
  }
  if (0 < sections[nbSections - 1].start && sections[nbSections - 2].start > sections[nbSections - 1].start) {
    console.log("last section not in order");
    return;
  }
  var section = sections[0];
  if (section.start > 0) {
    startSection = new sectionData(0, {});
    sections.unshift(startSection);
    nbSections = sections.length;
  }

  if (0 < sections[nbSections - 1].start && sections[nbSections - 1].start < points.length - 1) {
    //assume need to close loop
    var endSection = new sectionData(0, sections[0].options);
    sections.push(endSection);
  }

  //Store track data per section
  for (let i = 0; i < sections.length - 1; i++) {
    createSection(points, sections[i], sections[i + 1]);
  }

  return { directions: directions, rotations: rotations, carriageRotations: carriageRotations, passengerRotations: passengerRotations };

  /****** createSection function goes here *******/
};

----------------------------------------

TITLE: Converting Babylon Observable to RxJS Observable
DESCRIPTION: TypeScript function to wrap a Babylon Observable into an RxJS Observable for advanced execution patterns.

LANGUAGE: typescript
CODE:
export function fromBabylonObservable<T>(bjsObservable: BJSObservable<T>): Observable<T> {
  return new Observable<T>((subscriber) => {
    if (!(bjsObservable instanceof BJSObservable)) {
      throw new TypeError("the object passed in must be a Babylon Observable");
    }

    const handler = bjsObservable.add((v) => subscriber.next(v));

    return () => bjsObservable.remove(handler);
  });
}

----------------------------------------

TITLE: Basic Mesh Highlighting
DESCRIPTION: Demonstrates how to create a highlight layer and add a mesh with a specific highlight color.

LANGUAGE: javascript
CODE:
const hl = new BABYLON.HighlightLayer("hl1", scene);
hl.addMesh(sphere, BABYLON.Color3.Green());

----------------------------------------

TITLE: Setting Pivot using Translation Matrix
DESCRIPTION: Alternative method to set a pivot point using a translation matrix, including both current and legacy syntax for backwards compatibility.

LANGUAGE: javascript
CODE:
mesh.setPivotMatrix(BABYLON.Matrix.Translation(-x, -y, -z));
// Legacy version (pre-3.2)
mesh.setPivotMatrix(BABYLON.Matrix.Translation(-x, -y, -z), false);

----------------------------------------

TITLE: Adding Multiple Active Cameras in Babylon.js
DESCRIPTION: Demonstrates how to add multiple active cameras to a scene for rendering different viewpoints simultaneously.

LANGUAGE: javascript
CODE:
scene.activeCameras.push(camera);
scene.activeCameras.push(camera2);

----------------------------------------

TITLE: Creating Polygon with Mesh Class in Babylon.js
DESCRIPTION: Creates a polygon using the Mesh class constructor with both required and optional parameters. Allows direct creation of polygons with shape, holes, and orientation settings.

LANGUAGE: javascript
CODE:
let polygon = BABYLON.Mesh.CreatePolygon("polygon", shape, scene);
let polygon = BABYLON.Mesh.CreatePolygon("polygon", shape, scene, holes, updatable, sideOrientation);

----------------------------------------

TITLE: Creating an Observable from a Promise
DESCRIPTION: Demonstrates how to create an Observable from a Promise using the Observable.FromPromise utility method.

LANGUAGE: javascript
CODE:
const onStatusObservable = Observable.FromPromise(axios("/ping").then((response) => response.statusText));

onStatusObservable.add((statusText) => {
  text1.text = "Server status: " + statusText;
});

----------------------------------------

TITLE: Configuring a VolumeBasedPanel in Babylon.js
DESCRIPTION: Shows how to set up a VolumeBasedPanel with columns and margins for 3D GUI layout.

LANGUAGE: javascript
CODE:
panel.columns = 5; // The panel will automatically compute the number of rows based on number of child controls
panel.margin = 0.02;

----------------------------------------

TITLE: Cloning Skeleton with Mesh in Babylon.js
DESCRIPTION: Demonstrates how to clone both a mesh and its skeleton when independent animation control is needed for the clone.

LANGUAGE: javascript
CODE:
clone.skeleton = mesh.skeleton.clone();

----------------------------------------

TITLE: Creating a Customized Lattice in Babylon.js
DESCRIPTION: Shows how to create a lattice with custom size and position in Babylon.js.

LANGUAGE: javascript
CODE:
var lattice = new BABYLON.Lattice({ size: new BABYLON.Vector3(2, 2, 2), position: BABYLON.Vector3.Zero()});

----------------------------------------

TITLE: Creating a Physics Mesh Shape in Babylon.js
DESCRIPTION: Shows how to create a physics shape that matches the exact geometry of a mesh. This is suitable for static bodies or complex concave objects.

LANGUAGE: javascript
CODE:
const shape = new BABYLON.PhysicsShapeMesh(
    mesh,   // mesh from which to calculate the collisions
    scene   // scene of the shape
);

----------------------------------------

TITLE: Accessing Joystick Position Values in Babylon.js
DESCRIPTION: Retrieves the delta position values (x and y coordinates) from a virtual joystick to determine its current position and movement.

LANGUAGE: javascript
CODE:
leftJoystick.deltaPosition.x;
leftJoystick.deltaPosition.y;

----------------------------------------

TITLE: Creating and Applying Grid Material in Babylon.js
DESCRIPTION: This snippet demonstrates how to create a ground mesh from a height map and apply a Grid Material to it in Babylon.js.

LANGUAGE: javascript
CODE:
var ground = BABYLON.Mesh.CreateGroundFromHeightMap("ground", "textures/heightMap.png", 100, 100, 100, 0, 10, scene, false);
ground.material = new BABYLON.GridMaterial("groundMaterial", scene);

----------------------------------------

TITLE: Applying YXZ Local Space Rotations in Babylon.js
DESCRIPTION: Demonstrates how to apply yaw, pitch, and roll rotations using local axes in Babylon.js. This method is equivalent to setting the mesh.rotation property directly.

LANGUAGE: javascript
CODE:
mesh.rotate(BABYLON.Axis.Y, yaw, BABYLON.Space.LOCAL);
mesh.rotate(BABYLON.Axis.X, pitch, BABYLON.Space.LOCAL);
mesh.rotate(BABYLON.Axis.Z, roll, BABYLON.Space.LOCAL);

----------------------------------------

TITLE: Loading Basic Environment Texture in Babylon.js
DESCRIPTION: Simple implementation for loading an environment texture using the scene.environmentTexture property.

LANGUAGE: javascript
CODE:
scene.environmentTexture = new BABYLON.CubeTexture("environment.env", scene);

----------------------------------------

TITLE: Creating Dashed Lines with MeshBuilder
DESCRIPTION: Shows how to create and update dashed lines using MeshBuilder with configurable options for dash size, gap size, and number of dashes.

LANGUAGE: javascript
CODE:
const options = {
    points: myPoints, //vec3 array,
    updatable: true
}

let dashedlines = BABYLON.MeshBuilder.CreateDashedLines("dashedlines", options, scene);  //scene is optional and defaults to the current scene

// Update
options.points[0].x +=6; 
options.instance = lines;
lines = BABYLON.MeshBuilder.CreateDashedLines("dashedlines", options); //No scene parameter when using instance

----------------------------------------

TITLE: Initializing Fire Material in Babylon.js
DESCRIPTION: Creates and configures a fire material with required textures (diffuse, distortion, and opacity) and applies it to a plane mesh. The material requires three different texture types to create the fire effect and doesn't work with lighting or shadow maps.

LANGUAGE: javascript
CODE:
var fireMaterial = new BABYLON.FireMaterial("fireMaterial", scene);
fireMaterial.diffuseTexture = new BABYLON.Texture("diffuse.png", scene);
fireMaterial.distortionTexture = new BABYLON.Texture("distortion.png", scene);
fireMaterial.opacityTexture = new BABYLON.Texture("opacity.png", scene);

var plane = BABYLON.Mesh.CreatePlane("fireplane", 1.0, scene);
plane.material = fireMaterial;

----------------------------------------

TITLE: Creating WebXR Basic Experience Helper in JavaScript
DESCRIPTION: This snippet demonstrates how to create a WebXR Basic Experience Helper using the static factory method. It also shows how to handle browsers that don't support XR.

LANGUAGE: javascript
CODE:
const xrHelper = await WebXRExperienceHelper.CreateAsync(scene);

LANGUAGE: javascript
CODE:
try {
    const xrHelper = await WebXRExperienceHelper.CreateAsync(scene);
} catch (e) {
    // no XR support
}

// or:
WebXRExperienceHelper.CreateAsync(scene).then((xrHelper) => {
    // great success
}, (error) => {
    // no xr...
})

----------------------------------------

TITLE: Coloring Goldberg Polyhedron Faces
DESCRIPTION: Methods for coloring groups of faces using arrays of face ranges and Color4 values.

LANGUAGE: javascript
CODE:
const colorArray = [
  [18, 18, new BABYLON.Color4(1, 0, 0, 1)], // color face 18 red
  [26, 37, new BABYLON.Color4(0, 1, 0, 1)], //color faces 26 to 37 inclusive green
];

----------------------------------------

TITLE: Setting Input Values for Compute Shader in Babylon.js
DESCRIPTION: Set input values for a compute shader using setTexture and setStorageTexture methods.

LANGUAGE: javascript
CODE:
cs1.setTexture("src", src);
cs1.setStorageTexture("dest", dest);

----------------------------------------

TITLE: Applying Green Color Material to Ground
DESCRIPTION: Demonstrates creating a green material using Color3 and applying it to a ground mesh. The diffuseColor property sets the main color of the material.

LANGUAGE: javascript
CODE:
const groundMat = new BABYLON.StandardMaterial("groundMat");
groundMat.diffuseColor = new BABYLON.Color3(0, 1, 0);
ground.material = groundMat;

----------------------------------------

TITLE: Setting Reflectivity Threshold
DESCRIPTION: Demonstrates how to set the reflectivity threshold to discard pixels with low reflectivity, potentially improving performance.

LANGUAGE: JavaScript
CODE:
ssr.reflectivityThreshold = 0.04;

----------------------------------------

TITLE: Implementing Raycasting for Reticle Behavior
DESCRIPTION: Uses raycasting to determine when the reticle intersects with pickable objects, changing color from red to green on intersection.

LANGUAGE: javascript
CODE:
function castRay() {
    var ray = camera.getForwardRay();

    var hit = scene.pickWithRay(ray);

    if (hit.pickedMesh) {
        reticle.material.emissiveColor = BABYLON.Color3.Green();
    } else {
        reticle.material.emissiveColor = BABYLON.Color3.Red();
    }
}

scene.registerBeforeRender(function () {
    castRay();
});

----------------------------------------

TITLE: Setting Pivot Point at Specific Coordinates
DESCRIPTION: Example of setting a pivot point at the front, left, bottom corner of a cube mesh using setPivotPoint method with specific coordinates.

LANGUAGE: javascript
CODE:
box.setPivotPoint(new BABYLON.Vector3(-1, -1, -1));

----------------------------------------

TITLE: Creating Bowling Pins with Physics
DESCRIPTION: Implements pin creation with physics properties using instanced meshes. Includes position configuration and physics aggregates for pin interactions.

LANGUAGE: javascript
CODE:
async function createPins(scene) {
    const result = await BABYLON.SceneLoader.ImportMeshAsync("", Assets.meshes.bowlingPinpin_glb.rootUrl, Assets.meshes.bowlingPinpin_glb.filename, scene);
    const bowlingPin = result.meshes[1];
    bowlingPin.scaling = new BABYLON.Vector3(0.3, 0.3, 0.3);
    bowlingPin.setEnabled(false);
    return pinPositions.map(function (positionInSpace, idx) {
        const pin = new BABYLON.InstancedMesh("pin-" + idx, bowlingPin);
        pin.position = positionInSpace;
        const pinAggregate = new BABYLON.PhysicsAggregate(pin, BABYLON.PhysicsShapeType.CONVEX_HULL, { mass: 1, restitution: 0.25 }, scene);
        return pin;
    });
}

----------------------------------------

TITLE: Adding Emissive Texture Support in Fragment Shader (GLSL)
DESCRIPTION: This snippet adds support for an emissive texture in the fragment shader by declaring necessary variables and applying the texture to the final color.

LANGUAGE: glsl
CODE:
#ifdef EMISSIVE
varying vec2 vEmissiveUV;
uniform sampler2D emissiveSampler;
uniform vec2 vEmissiveInfos;
#endif

LANGUAGE: glsl
CODE:
#ifdef EMISSIVE
	color.rgb += texture2D(emissiveSampler, vEmissiveUV) * vEmissiveInfos.y;
#endif

----------------------------------------

TITLE: WebVR Button Event Handler
DESCRIPTION: Shows how to attach WebVR control using a dedicated button with proper event cleanup.

LANGUAGE: javascript
CODE:
let button = document.getElementById("vrButton");

function attachWebVR() {
  camera.attachControl(canvas, true);
  window.removeEventListener("click", attachWebVR, false);
}

button.addEventListener("click", attachWebVR, false);

----------------------------------------

TITLE: Setting a Parent for Mesh Transformation in Babylon.js
DESCRIPTION: This snippet demonstrates how to set a parent for a mesh in Babylon.js. The parent-child relationship affects how transformations are applied, with child transformations relative to its local origin and child positioning relative to the parent's local origin.

LANGUAGE: JavaScript
CODE:
mesh.parent = parentMesh;

----------------------------------------

TITLE: Setting Texture Transparency
DESCRIPTION: Enables alpha channel support for diffuse texture transparency

LANGUAGE: javascript
CODE:
backgroundMaterial.diffuseTexture.hasAlpha = true;

----------------------------------------

TITLE: Configuring Bounding Box Gizmo Rotation Axis in Babylon.js
DESCRIPTION: Demonstrates how to customize the enabled rotation axis for the BoundingBoxGizmo.

LANGUAGE: javascript
CODE:
// only enable rotation on x and y axis
gizmo.setEnabledRotationAxis("xy");

----------------------------------------

TITLE: Setting Sprite Properties in Babylon.js
DESCRIPTION: Demonstrates how to set various properties of a sprite, including position, rotation angle, and UV inversion for reflection effects.

LANGUAGE: javascript
CODE:
sprite.position =new BABYLON.Vector3(1, 1, 1);
sprite.angle = Math.PI/4;
sprite.invertU = true; //vertical reflection
sprite.invertV = true; //horizontal reflection

----------------------------------------

TITLE: Adjusting Bounding Box Gizmo Control Sizes in Babylon.js
DESCRIPTION: Shows how to adjust the size of rotation and scale controls on the BoundingBoxGizmo.

LANGUAGE: javascript
CODE:
// The size of the rotation spheres attached to the bounding box (Default: 0.1)
gizmo.rotationSphereSize = 0.1;
// The size of the scale boxes attached to the bounding box (Default: 0.1)
gizmo.scaleBoxSize = 0.1;
// If set, the rotation spheres and scale boxes will increase in size based on the distance away from the camera to have a consistent screen size (Default: false)
gizmo.rotationSphereSize = false;

----------------------------------------

TITLE: Creating a Compute Shader in Babylon.js
DESCRIPTION: Create a compute shader using the ComputeShader class, specifying the shader code and binding mappings.

LANGUAGE: javascript
CODE:
const cs1 = new BABYLON.ComputeShader("myCompute", engine, { computeSource: copyTextureComputeShader }, { bindingsMapping:
    {
        "dest": { group: 0, binding: 0 },
        "src": { group: 0, binding: 2 }
    }
});

----------------------------------------

TITLE: Creating a Crowd in Babylon.js
DESCRIPTION: Initialize a crowd of agents with a maximum number, agent radius, and scene. This is the first step in setting up crowd navigation.

LANGUAGE: javascript
CODE:
const crowd = navigationPlugin.createCrowd(10, 0.1, scene);

----------------------------------------

TITLE: Removing Parent-Child Relationships in Babylon.js
DESCRIPTION: Demonstrates three methods to remove a parent-child relationship between meshes. Each method has different effects on the retained transformations.

LANGUAGE: javascript
CODE:
meshC.parent = null; // 1
meshC.setParent(null); // 2
meshP.removeChild(meshC); // 3

----------------------------------------

TITLE: Initializing DeviceSourceManager in Babylon.js
DESCRIPTION: Creates an instance of DeviceSourceManager using the scene's engine object.

LANGUAGE: javascript
CODE:
const deviceSourceManager = new BABYLON.DeviceSourceManager(scene.getEngine());

----------------------------------------

TITLE: Setting ArcRotateCamera Collision Radius in Babylon.js
DESCRIPTION: Configures collision detection radius for ArcRotateCamera using Vector3.

LANGUAGE: javascript
CODE:
camera.collisionRadius = new BABYLON.Vector3(0.5, 0.5, 0.5);

----------------------------------------

TITLE: VR Camera Setup
DESCRIPTION: Demonstrates setup of WebVR free camera with basic positioning and canvas control attachment.

LANGUAGE: javascript
CODE:
var camera = new BABYLON.WebVRFreeCamera("Camera", new BABYLON.Vector3(0, 1, 0), scene);
camera.attachControl(canvas, true);

----------------------------------------

TITLE: Initializing WebGPU Engine in Babylon.js
DESCRIPTION: Demonstrates how to initialize a WebGPU engine in Babylon.js. The initialization process requires an asynchronous approach using async/await pattern. The engine is created with a canvas element as its parameter.

LANGUAGE: javascript
CODE:
const engine = new BABYLON.WebGPUEngine(canvas);
await engine.initAsync();

----------------------------------------

TITLE: Using Havok via CDN with ES Modules
DESCRIPTION: HTML script implementation for loading and initializing Havok using CDN with ES modules

LANGUAGE: html
CODE:
<script type="module">
  import HavokPhysics from "https://cdn.babylonjs.com/havok/HavokPhysics_es.js";
  let havokInstance;
  HavokPhysics().then((havok) => {
    havokInstance = havok;
  });
</script>

----------------------------------------

TITLE: Setting Sun Position in Sky Material
DESCRIPTION: Example of manually setting the sun position using a Vector3 instead of azimuth and inclination.

LANGUAGE: javascript
CODE:
skyMaterial.useSunPosition = true; // Do not set sun position from azimuth and inclination
skyMaterial.sunPosition = new BABYLON.Vector3(0, 100, 0);

----------------------------------------

TITLE: Retrieving Canvas Dimensions in GUIManager for JavaScript
DESCRIPTION: Gets the dimensions (width, height) of the canvas managed by the GUIManager. This method is helpful for sizing and positioning GUI elements within the canvas.

LANGUAGE: javascript
CODE:
getCanvasWidth(string)

----------------------------------------

TITLE: Webpack Output Configuration
DESCRIPTION: Basic webpack output configuration for controlling chunk filenames

LANGUAGE: javascript
CODE:
output: {
        filename: "js/[name].js",
        // ... further configuration
    },

----------------------------------------

TITLE: Basic Mesh Intersection Check in Babylon.js
DESCRIPTION: Simple example showing how to check if a sphere intersects with a wall mesh using the intersectsMesh method.

LANGUAGE: javascript
CODE:
sphere.intersectsMesh(wall)

----------------------------------------

TITLE: Setting Up Vertices Mode Visualization
DESCRIPTION: Demonstrates configuration of VERTICES mode to display dots at mesh vertex positions. Allows customization of vertex dot color and radius.

LANGUAGE: javascript
CODE:
BABYLON.MeshDebugPluginMaterial.PrepareMeshForTrianglesAndVerticesMode(mesh);

new BABYLON.MeshDebugPluginMaterial(mesh.material, {
    mode: BABYLON.MeshDebugMode.TRIANGLES,
    vertexColor: new BABYLON.Color3(0, 0, 0),
    vertexRadius: 1.2
});

----------------------------------------

TITLE: Configuring Shadow Level in Background Material
DESCRIPTION: Shows how to adjust the shadow intensity for a background material

LANGUAGE: javascript
CODE:
backgroundMaterial.shadowLevel = 0.4;

----------------------------------------

TITLE: Creating Non-Pickable Bounding Box for Complex Models in Babylon.js
DESCRIPTION: Shows how to create a non-pickable bounding box for complex models to improve performance.

LANGUAGE: javascript
CODE:
const boundingBox = BABYLON.BoundingBoxGizmo.MakeNotPickableAndWrapInBoundingBox(gltfMesh);

----------------------------------------

TITLE: Configuring Combined Triangles-Vertices Mode
DESCRIPTION: Shows setup for TRIANGLES_VERTICES mode which displays both wireframe and vertex dots. Supports customization of colors, wireframe thickness, and vertex radius.

LANGUAGE: javascript
CODE:
BABYLON.MeshDebugPluginMaterial.PrepareMeshForTrianglesAndVerticesMode(mesh);

new BABYLON.MeshDebugPluginMaterial(mesh.material, {
    mode: BABYLON.MeshDebugMode.TRIANGLES_VERTICES,
    wireframeVerticesColor: new BABYLON.Color3(0.8, 0.8, 0.8),
    wireframeThickness: 0.7,
    vertexColor: new BABYLON.Color3(0, 0, 0),
    vertexRadius: 1.2
});

----------------------------------------

TITLE: Scene Picking for Hotspot Query Values in Babylon.js
DESCRIPTION: Shows how to obtain hotspot query values through scene picking, including face indices and barycentric coordinates.

LANGUAGE: javascript
CODE:
const pickResult = scene.pick(scene.pointerX, scene.pointerY);
if (pickResult.hit) {
    const indices = pickResult.pickedMesh.getIndices();
    const base = pickResult.faceId * 3;
    hotspotQuery.pointIndex[0] = indices[base];
    hotspotQuery.pointIndex[1] = indices[base+1];
    hotspotQuery.pointIndex[2] = indices[base+2];
    hotspotQuery.barycentric[0] = pickResult.bu;
    hotspotQuery.barycentric[1] = pickResult.bv;
    hotspotQuery.barycentric[2] = 1 - pickResult.bu - pickResult.bv;
    hotspotQuery.meshIndex = scene.meshes.indexOf(pickResult.pickedMesh);
}

----------------------------------------

TITLE: Creating Submesh Octree in Babylon.js
DESCRIPTION: Creates or updates an octree specifically for mesh submeshes, optimizing collision detection and picking operations. Parameters control capacity and maximum depth.

LANGUAGE: javascript
CODE:
mesh.createOrUpdateSubmeshesOctree(capacity, maxDepth)

----------------------------------------

TITLE: Creating Configuration UI for 3D Experience
DESCRIPTION: Implements custom UI components to enable configuration of the 3D model in the configuration state.

LANGUAGE: JavaScript
CODE:
const renderConfigurationUI = () => {
    return (
        <div className="configurationUI">
            <div className="configurationPanel">
                {hotspots.map((hotspot) => (
                    <div key={hotspot.id} className="hotspotControl">
                        <label htmlFor={hotspot.id}>{hotspot.label}</label>
                        <input
                            type="color"
                            id={hotspot.id}
                            value={colors[hotspot.id] || "#ffffff"}
                            onChange={(event) => handleColorChange(hotspot.id, event.target.value)}
                        />
                    </div>
                ))}
            </div>
        </div>
    );
};

----------------------------------------

TITLE: Creating a Hermite Spline in Babylon.js
DESCRIPTION: This code snippet demonstrates how to create a Hermite spline using the Curve3.CreateHermiteSpline method in Babylon.js.

LANGUAGE: javascript
CODE:
const hermite = BABYLON.Curve3.CreateHermiteSpline(p1, t1, p2, t2, nbPoints);

const path = hermite.getPoints();
const l = hermite.length();

----------------------------------------

TITLE: Adding Selectors to Groups in Babylon.js
DESCRIPTION: Shows how to add different types of selectors to their respective groups with various configurations.

LANGUAGE: javascript
CODE:
transformGroup.addCheckbox("Small", toSize);
transformGroup.addCheckbox("High", toPlace);

colorGroup.addRadio("Blue", setColor, true);
colorGroup.addRadio("Red", setColor);

rotateGroup.addSlider("Angle Y", orientateY, "degs", 0, 2 * Math.PI, 0, displayValue);
rotateGroup.addSlider("Angle X", orientateX, "degs", 0, 2 * Math.PI, Math.PI, displayValue);

----------------------------------------

TITLE: Creating Basic Point Cloud System
DESCRIPTION: Initialize a new Point Cloud System with name, particle size, and scene parameters

LANGUAGE: javascript
CODE:
var pcs = new BABYLON.PointsCloudSystem("pcs", 5, scene);

----------------------------------------

TITLE: Enabling WebXR Hand Tracking Feature
DESCRIPTION: Enables hand tracking support for older versions or custom configurations using the feature manager.

LANGUAGE: javascript
CODE:
const featureManager = xrHelper.baseExperience.featuresManager;

featureManager.enableFeature(BABYLON.WebXRFeatureName.HAND_TRACKING, "latest", {
  xrInput: xrHelper.input,
  // other options
});

----------------------------------------

TITLE: Creating and Attaching SixDofDragBehavior in Babylon.js
DESCRIPTION: Demonstrates how to create a SixDofDragBehavior instance and attach it to a mesh in Babylon.js. This behavior allows users to grab, move, and rotate objects in 3D space.

LANGUAGE: javascript
CODE:
const sixDofDragBehavior = new BABYLON.SixDofDragBehavior();
mesh.addBehavior(sixDofDragBehavior);

----------------------------------------

TITLE: Creating and Applying Normal Material in Babylon.js
DESCRIPTION: This snippet demonstrates how to create a ground mesh, instantiate a Normal Material, and apply it to the mesh in Babylon.js. It shows the basic setup for using the Normal Material.

LANGUAGE: javascript
CODE:
var ground = BABYLON.MeshBuilder.CreateGround("ground", { width: 512, height: 512, subdivisions: 32 }, scene);
var normalMaterial = new BABYLON.NormalMaterial("normal", scene);
ground.material = normalMaterial;

----------------------------------------

TITLE: Loading NodeGeometry from File
DESCRIPTION: Shows how to load a NodeGeometry from a local file using Asset Manager.

LANGUAGE: javascript
CODE:
const assetsManager = new BABYLON.AssetsManager(scene);
const nodeGeometryFile = assetsManager.addTextFileTask("load my node geometry", "nodeGeometry.json");

// load all tasks
assetsManager.load();

// callback
assetsManager.onFinish = async (tasks) => {
    console.log("all tasks successful", tasks);

    // files loaded as text need to be parsed to JSON to use
    const nodeGeometryJSON = JSON.parse(nodeGeometryFile.text);

    // parse json object into node geometry
    const nodeGeometry = await BABYLON.NodeGeometry.Parse(nodeGeometryJSON);

    nodeGeometry.getBlockByName("my_vector").value = new BABYLON.Vector3(1.0, 0.0, 1.0);
    nodeGeometry.getBlockByName("my_mesh").mesh = myLoadedMesh;

    nodeGeometry.build();
    const myGeometry = nodeGeometry.createMesh("myGeometry");
};

----------------------------------------

TITLE: Unregistering a View in Babylon.js
DESCRIPTION: Removes a previously registered view from the Babylon.js engine, stopping rendering to that canvas.

LANGUAGE: javascript
CODE:
engine.unRegisterView(document.getElementById("renderCanvas1"));

----------------------------------------

TITLE: Controlling UV Mapping for 3D Text in Babylon.js
DESCRIPTION: This snippet shows how to control the UV mapping for the faces of a 3D text mesh using the faceUV parameter in MeshBuilder.CreateText.

LANGUAGE: javascript
CODE:
var myText = BABYLON.MeshBuilder.CreateText("myText", "HELLO WORLD", fontData, {
        size: 16,
        resolution: 64,
        depth: 10,
        faceUV: [
            new BABYLON.Vector4(0, 0, 1, 1),
            new BABYLON.Vector4(0, 0, 1, 1),
            new BABYLON.Vector4(0, 0, 1, 1),
        ];
    });

----------------------------------------

TITLE: Simulating Escaping Particles Due to Speed Increase in BabylonJS
DESCRIPTION: This playground demonstrates how particles can escape a containment box due to speed increases from collisions. It allows for adjusting the maximum speed of particles.

LANGUAGE: javascript
CODE:
// Code not provided in the original text, but referenced as Playground id=#MYGV6#3

----------------------------------------

TITLE: Simplifying a Mesh with Auto-LOD in Babylon.js
DESCRIPTION: This snippet demonstrates the usage of the simplify function to create LOD levels for a mesh. It includes the function signature and explains its parameters.

LANGUAGE: javascript
CODE:
public simplify(settings: Array<ISimplificationSettings>,
                parallelProcessing: boolean = true,
                type: SimplificationType = SimplificationType.QUADRATIC,
                successCallback?: () => void);

----------------------------------------

TITLE: Creating and Starting Quick Animations in Babylon.js
DESCRIPTION: Demonstrates the use of the CreateAndStartAnimation helper function for quick animation creation in Babylon.js.

LANGUAGE: javascript
CODE:
BABYLON.Animation.CreateAndStartAnimation("boxscale", box1, "scaling.x", 30, 120, 1.0, 1.5);

----------------------------------------

TITLE: Importing STL Loader via NPM
DESCRIPTION: Static import statement for including the STL file loader when using Babylon.js npm packages.

LANGUAGE: javascript
CODE:
import "@babylonjs/loaders/STL/stlFileLoader";

----------------------------------------

TITLE: Creating a GUISelect Element in BabylonJS
DESCRIPTION: Constructor for creating a new GUISelect element. It takes parameters for id, options, GUI manager, callback function, and append flag.

LANGUAGE: javascript
CODE:
new GUISelect(id, options, guimanager, callback, append)

----------------------------------------

TITLE: Adding Babylon.js Viewer Script Reference
DESCRIPTION: Adds the Babylon.js viewer script to your HTML page using CDN.

LANGUAGE: html
CODE:
<script src="https://cdn.babylonjs.com/viewer/babylon.viewer.js"></script>

----------------------------------------

TITLE: Defining Roof Planes in Babylon.js
DESCRIPTION: This snippet demonstrates how to define the roof planes using corner and apex labels. Each plane is described as an array of labels in counter-clockwise order, forming a complete roof structure.

LANGUAGE: javascript
CODE:
var planes = [
	["C0", "C1", "A0"],
	["C1", "C2", "A0"],
	["C2", "C3", "A0"],
	["C3", "A1", "A0"],
	["C3", "C4", "A3", "A1"],
	["C4", "C5", "A3"],
	["C5", "C6", "A1", "A3"],
	["C6", "C7", "A2", "A1"],
	["C7", "C8", "A2"],
	["C8", "C0", "A0", "A2"]
]

----------------------------------------

TITLE: Creating Camera Rotation Animation in Babylon.js
DESCRIPTION: This snippet shows how to create an animation for camera rotation in Babylon.js. It defines key frames for the camera's rotation around the y-axis at specific times.

LANGUAGE: javascript
CODE:
const rotate = new BABYLON.Animation("rotate", "rotation.y", frameRate, BABYLON.Animation.ANIMATIONTYPE_FLOAT, BABYLON.Animation.ANIMATIONLOOPMODE_CONSTANT);

const rotate_keys = [];

rotate_keys.push({
  frame: 0,
  value: 0,
});

rotate_keys.push({
  frame: 9 * frameRate,
  value: 0,
});

rotate_keys.push({
  frame: 14 * frameRate,
  value: Math.PI,
});

rotate.setKeys(rotate_keys);

----------------------------------------

TITLE: Random Particle Collision System in BabylonJS
DESCRIPTION: Creates a system where particles are randomly fired towards each other to demonstrate collision effects.

LANGUAGE: javascript
CODE:
PG: <Playground id="#A4HZTV#2" title="Random Collisions" description="Particles are fired randomly towards each other to see the effect when they collide."/>

----------------------------------------

TITLE: Creating a GUIGroup in BabylonJS
DESCRIPTION: Initializes a new GUIGroup instance. This constructor takes an id, options object, and a reference to the GUIManager. The options can include x and y coordinates for positioning the group.

LANGUAGE: typescript
CODE:
new GUIGroup(id, options, guimanager)

----------------------------------------

TITLE: Initializing Section Data in JavaScript
DESCRIPTION: Creates a sectionData object with start index and options for track sections.

LANGUAGE: javascript
CODE:
var sectionData = function (startAt, options) {
  this.start = startAt;
  this.options = options;
};

----------------------------------------

TITLE: Defining Loading Screen Interface in TypeScript
DESCRIPTION: Interface definition for creating custom loading screens in Babylon.js, specifying required methods and properties.

LANGUAGE: javascript
CODE:
interface ILoadingScreen {
  //What happens when loading starts
  displayLoadingUI: () => void;
  //What happens when loading stops
  hideLoadingUI: () => void;
  //default loader support. Optional!
  loadingUIBackgroundColor: string;
  loadingUIText: string;
}

----------------------------------------

TITLE: Initializing Wood Procedural Texture
DESCRIPTION: Creates a wood procedural texture with specified name, size and scene parameters.

LANGUAGE: javascript
CODE:
const texture = new BABYLON.WoodProceduralTexture("texture", 1024, scene);

----------------------------------------

TITLE: Creating Image Scrollbars in Babylon.js
DESCRIPTION: Shows how to create a Scroll Viewer with image scrollbars in Babylon.js GUI. This requires passing a name and a boolean parameter when creating the Scroll Viewer.

LANGUAGE: javascript
CODE:
const myScrollViewer = new BABYLON.GUI.ScrollViewer("", true);

----------------------------------------

TITLE: Loading Custom Environment Texture in Babylon.js
DESCRIPTION: Implementation for loading a custom environment texture using CubeTexture.CreateFromPrefilteredData and setting it as the scene's environment texture.

LANGUAGE: javascript
CODE:
const hdrTexture = BABYLON.CubeTexture.CreateFromPrefilteredData("textures/environment.env", scene);
scene.environmentTexture = hdrTexture;

----------------------------------------

TITLE: Creating a Physics Sphere Shape in Babylon.js
DESCRIPTION: Demonstrates how to create a sphere physics shape with a center point and radius. The shape is defined in local coordinates.

LANGUAGE: javascript
CODE:
const shape = new BABYLON.PhysicsShapeSphere(
    new BABYLON.Vector3(0, 0, 0),   // center of the sphere
    1,                              // radius of the sphere
    scene                           // scene of the shape
);

----------------------------------------

TITLE: Tile Pattern Constants in Babylon.js
DESCRIPTION: Constants used to define how tiles are reflected or rotated across box faces.

LANGUAGE: javascript
CODE:
BABYLON.Mesh.NO_FLIP,
BABYLON.Mesh.FLIP_TILE,
BABYLON.Mesh.ROTATE_TILE,
BABYLON.Mesh.FLIP_ROW,
BABYLON.Mesh.ROTATE_ROW,
BABYLON.Mesh.FLIP_N_ROTATE_TILE,
BABYLON.Mesh.FLIP_N_ROTATE_ROW

----------------------------------------

TITLE: Setting a Pivot Point for Mesh Transformation in Babylon.js
DESCRIPTION: This snippet shows how to set a pivot point for a mesh in Babylon.js. The pivot affects rotation and scaling of the mesh, with these transformations occurring relative to the pivot point rather than the mesh's local origin.

LANGUAGE: JavaScript
CODE:
mesh.setPivotPoint(new BABYLON.Vector3(x, y, z));

----------------------------------------

TITLE: Drawing Bounding Box for Multiple Objects in Babylon.js
DESCRIPTION: This code shows how to create a bounding box that encompasses multiple objects by comparing their minimum and maximum bounding information.

LANGUAGE: javascript
CODE:
let sphereMin = sphere.getBoundingInfo().boundingBox.minimum;
let sphereMax = sphere.getBoundingInfo().boundingBox.maximum;

let groundMin = ground.getBoundingInfo().boundingBox.minimum;
let groundMax = ground.getBoundingInfo().boundingBox.maximum;

let newMin = BABYLON.Vector3.Minimize(sphereMin, groundMin);
let newMax = BABYLON.Vector3.Maximize(sphereMax, groundMax);

sphere.setBoundingInfo(new BABYLON.BoundingInfo(newMin, newMax));

sphere.showBoundingBox = true;

----------------------------------------

TITLE: Initializing Babylon.js Engine with Stencil Support
DESCRIPTION: Creates a Babylon.js engine instance with stencil buffer enabled, which is required for the HighlightLayer functionality.

LANGUAGE: javascript
CODE:
const engine = new BABYLON.Engine(canvas, true, { stencil: true });

----------------------------------------

TITLE: Using a Predicate Function for Mesh Picking in Babylon.js
DESCRIPTION: Shows how to use a predicate function to filter which meshes can be picked by a ray in Babylon.js. This allows for more control over the picking process.

LANGUAGE: JavaScript
CODE:
function predicate(mesh) {
  if (mesh == box2 || mesh == box) {
    return false;
  }
  return true;
}

scene.pickWithRay(ray, predicate);

----------------------------------------

TITLE: Creating a Capsule with Mesh in Babylon.js
DESCRIPTION: This snippet shows how to create a capsule mesh using the Mesh.CreateCapsule method in Babylon.js. It follows the same form as the MeshBuilder method.

LANGUAGE: javascript
CODE:
const capsule = BABYLON.Mesh.CreateCapsule("ribbon", options, scene);  //scene is optional and defaults to the current scene

----------------------------------------

TITLE: Defining Room State Schema
DESCRIPTION: Server-side schema definition for player state synchronization using Colyseus Schema types.

LANGUAGE: typescript
CODE:
import { MapSchema, Schema, type } from "@colyseus/schema";

export class Player extends Schema {
  @type("number") x: number;
  @type("number") y: number;
  @type("number") z: number;
}

export class MyRoomState extends Schema {
  @type({ map: Player }) players = new MapSchema<Player>();
}

----------------------------------------

TITLE: Creating and Applying a Distance Constraint in Babylon.js
DESCRIPTION: This snippet demonstrates how to create a distance constraint between two physics bodies in Babylon.js. It sets a maximum distance between the bodies and adds the constraint to one of the bodies.

LANGUAGE: javascript
CODE:
const bodyA = new BABYLON.PhysicsBody(objectA, BABYLON.PhysicsMotionType.DYNAMIC, scene);
const bodyB = new BABYLON.PhysicsBody(objectB, BABYLON.PhysicsMotionType.DYNAMIC, scene);

const constraint = new BABYLON.DistanceConstraint(
  10, // max distance between the two bodies
  scene
);

bodyA.addConstraint(bodyB, constraint);

----------------------------------------

TITLE: Building House Data and Parameters Example in JavaScript
DESCRIPTION: This code snippet demonstrates how to set up the necessary data structures and parameters to use the buildFromPlan function.

LANGUAGE: JavaScript
CODE:
var baseData = [-3, -2, -1, -4, 1,-4, 3, -2, 5, -2, 5, 1, 2, 1, 2, 3, -3, 3];

var corners = [];
for(b = 0; b < baseData.length/2; b++) {
    corners.push(new corner(baseData[2*b], baseData[2*b + 1]));
}

//Additional setup code
//...

----------------------------------------

TITLE: Setting Selected Item in GUISelect
DESCRIPTION: Method to set a specific item as selected in the GUISelect element.

LANGUAGE: javascript
CODE:
selectedItem(item)

----------------------------------------

TITLE: Creating a Cubic Bezier Curve in Babylon.js
DESCRIPTION: This code snippet shows how to create a cubic Bezier curve using the Curve3.CreateCubicBezier method in Babylon.js.

LANGUAGE: javascript
CODE:
const bezier3 = BABYLON.Curve3.CreateCubicBezier(origin, control1, control2, destination, nb_of_points);

const path = bezier3.getPoints();
const l = bezier3.length();

----------------------------------------

TITLE: Setting Materials on Named Meshes in Babylon.js
DESCRIPTION: This snippet shows a helper function for setting named materials on specific named meshes in a Babylon.js scene.

LANGUAGE: typescript
CODE:
private _setMaterial(meshName: string, materialName: string): void {
    const mesh = this._scene.getMeshByName(meshName);
    const material = this._scene.getMaterialByName(materialName);
    if (mesh && material) {
        mesh.material = material;
    } else {
        console.warn(`Could not set material ${materialName} on mesh ${meshName}`);
    }
}

----------------------------------------

TITLE: Checking GUIRadio State in BabylonJS
DESCRIPTION: Method to check if the radio button is checked.

LANGUAGE: javascript
CODE:
isChecked() → void

----------------------------------------

TITLE: Disabling Opacity Fresnel
DESCRIPTION: Controls the opacity fresnel effect which affects material visibility at grazing angles

LANGUAGE: javascript
CODE:
backgroundMaterial.opacityFresnel = false;

----------------------------------------

TITLE: Creating Noise Procedural Texture
DESCRIPTION: Initializes a noise procedural texture with specified name, size and scene parameters.

LANGUAGE: javascript
CODE:
const noiseTexture = new BABYLON.NoiseProceduralTexture("perlin", 256, scene);

----------------------------------------

TITLE: Registering a View with Camera in Babylon.js
DESCRIPTION: Creates a view by registering a canvas and camera combination with the Babylon.js engine. This allows rendering to multiple canvases.

LANGUAGE: javascript
CODE:
let view = engine.registerView(document.getElementById("renderCanvas1"), camera1);

----------------------------------------

TITLE: Adding Random Points
DESCRIPTION: Add random points to the Point Cloud System within a unit cube

LANGUAGE: javascript
CODE:
pcs.addPoints(10000);

----------------------------------------

TITLE: Starting and Configuring Particle System in Babylon.js
DESCRIPTION: Sets up basic particle system configuration including texture and emitter, then starts particle emission.

LANGUAGE: javascript
CODE:
myParticleSystem.particleTexture = new BABYLON.Texture("path to texture");

myParticleSystem.emitter = mesh; // a mesh or abstract mesh in the scene
// or
myParticleSystem.emitter = point; //a Vector3

myParticleSystem.start(); //Starts the emission of particles

----------------------------------------

TITLE: Creating a Basic Node Material Shader
DESCRIPTION: A complete example of creating a simple Node Material with position transformation and color output.

LANGUAGE: JavaScript
CODE:
const nodeMaterial = new BABYLON.NodeMaterial("node material", scene, { emitComments: true });
const positionInput = new BABYLON.InputBlock("position");
positionInput.setAsAttribute("position");

const worldInput = new BABYLON.InputBlock("world");
worldInput.setAsSystemValue(BABYLON.NodeMaterialSystemValues.World);

const worldPos = new BABYLON.TransformBlock("worldPos");
positionInput.connectTo(worldPos);
worldInput.connectTo(worldPos);

const viewProjectionInput = new BABYLON.InputBlock("viewProjection");
viewProjectionInput.setAsSystemValue(BABYLON.NodeMaterialSystemValues.ViewProjection);

const worldPosdMultipliedByViewProjection = new BABYLON.TransformBlock("worldPos * viewProjectionTransform");
worldPos.connectTo(worldPosdMultipliedByViewProjection);
viewProjectionInput.connectTo(worldPosdMultipliedByViewProjection);

const vertexOutput = new BABYLON.VertexOutputBlock("vertexOutput");
worldPosdMultipliedByViewProjection.connectTo(vertexOutput);

// Pixel
const pixelColor = new BABYLON.InputBlock("color");
pixelColor.value = new BABYLON.Color4(0.8, 0.8, 0.8, 1);

const fragmentOutput = new BABYLON.FragmentOutputBlock("fragmentOutput");
pixelColor.connectTo(fragmentOutput);

// Add to nodes
nodeMaterial.addOutputNode(vertexOutput);
nodeMaterial.addOutputNode(fragmentOutput);

----------------------------------------

TITLE: Creating Player Class in Babylon.js
DESCRIPTION: Defines a Player class extending TransformNode to handle player logic and movements.

LANGUAGE: javascript
CODE:
export class Player extends TransformNode {
    public camera;
    public scene: Scene;
    private _input;

    //Player
    public mesh: Mesh; //outer collisionbox of player

    constructor(assets, scene: Scene, shadowGenerator: ShadowGenerator, input?) {
        super("player", scene);
        this.scene = scene;
        this._setupPlayerCamera();

        this.mesh = assets.mesh;
        this.mesh.parent = this;

        shadowGenerator.addShadowCaster(assets.mesh); //the player mesh will cast shadows

        this._input = input; //inputs we will get from inputController.ts
    }
}

----------------------------------------

TITLE: Looping Through Child Meshes for Bounding Box in Babylon.js
DESCRIPTION: This snippet demonstrates how to calculate a bounding box for multiple child meshes by looping through them and comparing their bounding information.

LANGUAGE: javascript
CODE:
let childMeshes = parent.getChildMeshes();

let min = childMeshes[0].getBoundingInfo().boundingBox.minimumWorld;
let max = childMeshes[0].getBoundingInfo().boundingBox.maximumWorld;

for(let i=0; i<childMeshes.length; i++){
        let meshMin = childMeshes[i].getBoundingInfo().boundingBox.minimumWorld;
        let meshMax = childMeshes[i].getBoundingInfo().boundingBox.maximumWorld;

        min = BABYLON.Vector3.Minimize(min, meshMin);
        max = BABYLON.Vector3.Maximize(max, meshMax);
    }

----------------------------------------

TITLE: Checking Visibility of GUIPanel in BabylonJS
DESCRIPTION: Method to check if the GUIPanel is visible. It takes no parameters and returns a boolean value.

LANGUAGE: javascript
CODE:
isVisible() → void

----------------------------------------

TITLE: Converting to Flat Shaded Mesh in Babylon.js
DESCRIPTION: This snippet demonstrates how to convert a mesh to flat shaded by flattening its normals in Babylon.js.

LANGUAGE: javascript
CODE:
sphere.convertToFlatShadedMesh()

----------------------------------------

TITLE: Creating and Releasing Render Pass IDs in Babylon.js
DESCRIPTION: Demonstrates how to create and release render pass IDs using the engine API. The render pass ID can be created with an optional debug label.

LANGUAGE: javascript
CODE:
const renderPassId = engine.createRenderPassId("My pass"); // the label is optional as it is used for debugging purpose only
[...]
engine.releaseRenderPassId(renderPassId);

----------------------------------------

TITLE: Creating Edge Detection Post-Process in Babylon.js
DESCRIPTION: This snippet demonstrates how to create and attach an Edge Detection post-process to the main camera in a Babylon.js scene.

LANGUAGE: javascript
CODE:
// Creates the post process
var edgeDetectionPostProcess = new BABYLON.EdgeDetectionPostProcess("EdgeDetection", camera);

----------------------------------------

TITLE: Enabling Facet Data in Babylon.js
DESCRIPTION: Shows how to enable facet data on a mesh and check the total number of facets.

LANGUAGE: javascript
CODE:
const mesh = BABYLON.MeshBuilder.CreateTorusKnot("t", { radius: 2.0 }, scene);
mesh.updateFacetData();
console.log(mesh.facetNb);

----------------------------------------

TITLE: Enabling Framing Behavior for ArcRotateCamera in Babylon.js
DESCRIPTION: This snippet illustrates how to enable the framing behavior for an ArcRotateCamera. This behavior automatically positions the camera when its target is set to a mesh and can prevent the camera from going under a virtual horizontal plane.

LANGUAGE: javascript
CODE:
camera.useFramingBehavior = true;

----------------------------------------

TITLE: Creating a Closed Curve by Joining Bezier and Hermite Splines in Babylon.js
DESCRIPTION: This code snippet shows how to create a smooth closed curve by joining two cubic Bezier curves and a Hermite spline in Babylon.js.

LANGUAGE: javascript
CODE:
const cubicA = BABYLON.Curve3.CreateCubicBezier(vA0, vA1, vA2, vA3, 50);
const cubicB = BABYLON.Curve3.CreateCubicBezier(vB0, vB1, vB2, vB3, 50);
const continued = cubicA.continue(cubicB);

const t = continued.length() / 2;
const points = continued.getPoints();
const p1 = points[points.length - 1];
const t1 = p1.subtract(points[points.length - 2]).scale(t);
const p2 = points[0];
const t2 = points[1].subtract(p2).scale(t);

const hermite = BABYLON.Curve3.CreateHermiteSpline(p1, t1, p2, t2, 50);
continued = continued.continue(hermite);

const closedCurve = BABYLON.MeshBuilder.CreateLines("closed", { points: continued.getPoints() }, scene);

----------------------------------------

TITLE: Implementing Light Components in Babylon.js
DESCRIPTION: Basic structure for light components used specifically with light game objects.

LANGUAGE: javascript
CODE:
    module PROJECT {
        export class NewLightComponent extends BABYLON.LightComponent {

            protected start() :void {
                console.log("Starting light component for owner: " + this.light.name);
            }
        }
    }

----------------------------------------

TITLE: Sharing Edge Renderer with Instances in Babylon.js
DESCRIPTION: This snippet shows how to set the edgesShareWithInstances property to true, allowing the source mesh's edge renderer to be used for all instances of the mesh.

LANGUAGE: javascript
CODE:
sourceMesh.edgesShareWithInstances = true;

----------------------------------------

TITLE: Setting Gizmo Orientation in Babylon.js
DESCRIPTION: Shows how to change the gizmo orientation from local space to world space by modifying the updateGizmoRotationToMatchAttachedMesh property.

LANGUAGE: javascript
CODE:
gizmoManager.gizmos.positionGizmo.updateGizmoRotationToMatchAttachedMesh = false;

----------------------------------------

TITLE: Parenting ArcRotateCamera to Character in Babylon.js
DESCRIPTION: This snippet shows how to parent the ArcRotateCamera to a character object (named 'dude') in the scene, useful for creating a third-person view.

LANGUAGE: javascript
CODE:
camera.parent = dude;

----------------------------------------

TITLE: Changing Option Value in GUISelect
DESCRIPTION: Method to change an existing option's value in the GUISelect element.

LANGUAGE: javascript
CODE:
changeItem(oldValue, newValue)

----------------------------------------

TITLE: Setting Value of GUITextfield in BabylonJS
DESCRIPTION: Method to set the value of the GUITextfield.

LANGUAGE: javascript
CODE:
setValue() → void

----------------------------------------

TITLE: Complete Flow Graph Example
DESCRIPTION: A comprehensive example showing creation of graphs, contexts, and connecting blocks for a cooking simulation.

LANGUAGE: javascript
CODE:
const graph = coordinator.createGraph();

const potatoContext = graph.createContext();
potatoContext.setVariable("vegetable", "potato");
potatoContext.setVariable("cutType", "slices");

const carrotContext = graph.createContext();
carrotContext.setVariable("vegetable", "carrot");
carrotContext.setVariable("cutType", "sticks");

const getVegetableBlock = new GetVariableBlock({ variableName: "vegetable" });
const getCutTypeBlock = new GetVariableBlock({ variableName: "cutType" });

const rinseBlock = new RinseBlock();
rinseBlock.vegetableToRinse.connectTo(getVegetableBlock);
rinseBlock.useSoap.setValue(true, potatoContext);
rinseBlock.useSoap.setValue(false, carrotContext);

const cutBlock = new CutBlock();
cutBlock.rinsedVegetable.connectTo(rinseBlock.rinsedVegetable);
cutBlock.cutType.connectTo(getCutTypeBlock);
rinseBlock.doneRinsing.connectTo(cutBlock.startCutting);

const fryBlock = new FryBlock();
fryBlock.cutVegetable.connectTo(cutBlock.cutVegetable);

const startCookingBlock = new StartCookingBlock();
graph.addEventBlock(startCookingBlock);

graph.start();

----------------------------------------

TITLE: Custom Vertex Update Function
DESCRIPTION: Implementing a custom function to update terrain vertices.

LANGUAGE: javascript
CODE:
terrain.useCustomVertexFunction = true;
terrain.updateVertex = function (vertex, i, j) {
  vertex.position.y = 2.0 * Math.sin(i / 5.0) * Math.cos(j / 5.0);
};

----------------------------------------

TITLE: Handling User Input in Babylon.js
DESCRIPTION: Shows how to handle local multiplayer user input using the getUserInput method for vertical and horizontal axes.

LANGUAGE: javascript
CODE:
    module PROJECT {
        export class TestMeshComponent extends BABYLON.MeshComponent {

            protected update() :void {
                const vertical:number = this.manager.getUserInput(BABYLON.UserInputAxis.Vertical, BABYLON.PlayerNumber.One);
                const horizontal:number = this.manager.getUserInput(BABYLON.UserInputAxis.Horizontal, BABYLON.PlayerNumber.One);
                console.log("Echo Input: " + vertical.toString() + " x " + horizontal.toString());
            }
        }
    }

----------------------------------------

TITLE: Building Minified Babylon.js with NPM
DESCRIPTION: Commands for building different versions of the Babylon.js framework. The build process offers options for creating UMD or ES6 module formats with output going to the packages/public directory.

LANGUAGE: bash
CODE:
npm run build:babylonjs

LANGUAGE: bash
CODE:
npm run build:umd

LANGUAGE: bash
CODE:
npm run build:es6

----------------------------------------

TITLE: Initializing Flow Graph Coordinator
DESCRIPTION: Creates a new FlowGraphCoordinator instance associated with a scene. The coordinator is the main entry point for managing flow graphs.

LANGUAGE: javascript
CODE:
const coordinator = new FlowGraphCoordinator({ scene });

----------------------------------------

TITLE: Converting Yaw, Pitch, Roll to Quaternion in Babylon.js
DESCRIPTION: Shows how to convert yaw, pitch, and roll angles to a quaternion using the RotationYawPitchRoll method in Babylon.js.

LANGUAGE: javascript
CODE:
const yprQuaternion = BABYLON.Quaternion.RotationYawPitchRoll(yaw, pitch, roll);

----------------------------------------

TITLE: Adding Animation Logic to Babylon.js Render Loop
DESCRIPTION: This snippet demonstrates how to add custom animation logic to the Babylon.js render loop. The code inside the function will be executed before each frame is rendered, allowing for dynamic property changes and complex animations.

LANGUAGE: javascript
CODE:
scene.onBeforeRenderObservable.add(() => {
  //Your code here
});

----------------------------------------

TITLE: Drawing Bounding Box for Single Object in Babylon.js
DESCRIPTION: This snippet demonstrates how to draw a bounding box around a single object in Babylon.js by setting the showBoundingBox property to true.

LANGUAGE: javascript
CODE:
sphere.showBoundingBox = true;

----------------------------------------

TITLE: Setting Lightmap Mode for Lights in Babylon.js
DESCRIPTION: Demonstrates how to set the lightmap mode for lights in a Babylon.js scene, affecting how they blend with lightmap textures.

LANGUAGE: javascript
CODE:
light.lightmapMode = BABYLON.Light.LIGHTMAP_DEFAULT;

----------------------------------------

TITLE: Working with Facet Normals in Babylon.js
DESCRIPTION: Demonstrates how to access facet normals in world and local space.

LANGUAGE: javascript
CODE:
const norm = mesh.getFacetNormal(50);
const norm2 = BABYLON.Vector3.Zero();
mesh.getFacetNormalToRef(50, norm2);
const localNormals = mesh.getFacetLocalNormals();
const localPos = localNormals[50];

----------------------------------------

TITLE: Bone Matrix Transformation Example
DESCRIPTION: Interactive example demonstrating bone creation and matrix transformations for a character with three bones (body and two arms).

LANGUAGE: javascript
CODE:
// Referenced Playground Example #4IUBBK#2

----------------------------------------

TITLE: Configuring Lights with Layer Masks in Babylon.js
DESCRIPTION: This snippet demonstrates how to configure existing lights to exclude specific layer masks and create a new light that only affects objects with a specific layer mask.

LANGUAGE: javascript
CODE:
for (let i = scene.lights.length - 1; i >= 0; i--) {
  scene.lights[i].excludeWithLayerMask = 0x10000000;
}

const light = new BABYLON.Light(...);
light.includeOnlyWithLayerMask = 0x10000000;

----------------------------------------

TITLE: Updating Gaussian Splatting Data with Single Splat
DESCRIPTION: Shows how to create and update a Gaussian Splatting mesh with a single splat, including setting position, size, orientation, and color values using typed arrays.

LANGUAGE: javascript
CODE:
var gs = new BABYLON.GaussianSplattingMesh("GS", undefined, scene, true);

// size of a single splat, in bytes
const rowLength = 32;

// chunck size of splats
const splatCount = 1;

const uBuffer = new Uint8Array(splatCount * rowLength);
const fBuffer = new Float32Array(uBuffer.buffer);

// center position
fBuffer[0] = 0; // x
fBuffer[1] = 0; // y
fBuffer[2] = 0; // z

// size
fBuffer[3 + 0] = 0.1;
fBuffer[3 + 1] = 0.1;
fBuffer[3 + 2] = 0.1;

// orientation quaternion. Values are remapped from -1..1 to 0..255. 128 is 0. 255 is 1
uBuffer[28 + 1] = 128; 
uBuffer[28 + 2] = 128;
uBuffer[28 + 3] = 128;
uBuffer[28 + 0] = 255;

// color
uBuffer[24 + 0] = 128;
uBuffer[24 + 1] = 128;
uBuffer[24 + 2] = 128;
uBuffer[24 + 3] = 255;
gs.updateData(uBuffer);

----------------------------------------

TITLE: Creating a Catmull-Rom Spline in Babylon.js
DESCRIPTION: This code snippet shows how to create a Catmull-Rom spline using the Curve3.CreateCatmullRomSpline method in Babylon.js.

LANGUAGE: javascript
CODE:
const nbPoints = 20;
const points = [vec1, vec2, ..., vecN];
const closed = true;
const catmullRom = BABYLON.Curve3.CreateCatmullRomSpline(points, nbPoints, closed);

const path = catmullRom.getPoints();
const l = catmullRom.length();

----------------------------------------

TITLE: Updating Parametric Meshes in Babylon.js
DESCRIPTION: This snippet shows how to create and update parametric meshes in Babylon.js. It demonstrates creating lines, updating point values, and re-rendering the mesh with new values using the 'instance' property.

LANGUAGE: javascript
CODE:
//creates lines using the vector3 myPoints array
const myLines = BABYLON.MeshBuilder.CreateLines("lines", {points: myPoints});
// update some or all values in myPoints array
myPoints[1] = new BABYLON.Vector3(1, 2, 3);
// updates the existing instance of myLines by pointing the instance property to it
myLines = BABYLON.MeshBuilder.CreateLines("lines", {points: myArray, instance: myLines});

----------------------------------------

TITLE: Creating a HolographicSlate in Babylon.js
DESCRIPTION: Shows how to create and configure a HolographicSlate for displaying content in Babylon.js 3D GUI.

LANGUAGE: javascript
CODE:
// Create the 3D UI manager
const manager = new BABYLON.GUI.GUI3DManager(scene);

// Let's add a slate
const slate = new BABYLON.GUI.HolographicSlate("down");
slate.title = "Checkers";
slate.minDimensions = new BABYLON.Vector(5, 5);
slate.dimensions = new BABYLON.Vector2(10, 10);
slate.titleBarHeight = 1.5;
manager.addControl(slate);
// Must be done AFTER addControl in order to overwrite the default content
slate.content = new BABYLON.GUI.Image("checkers", "./textures/Checker_Albedo.png");

----------------------------------------

TITLE: Listening to Pointer Tap Event on Mesh in Babylon.js
DESCRIPTION: This snippet demonstrates how to use the @onPointerEvent decorator to listen for a pointer tap event on a specific mesh. It applies an impulse to the mesh when tapped, if physics is enabled.

LANGUAGE: typescript
CODE:
import { Mesh } from "@babylonjs/core/Meshes/mesh";
import { Vector3 } from "@babylonjs/core/Maths/math.vector";
import { PointerEventTypes, PointerInfo } from "@babylonjs/core/Events/pointerEvents";

import { onPointerEvent } from "../decorators";

export default class MyMeshComponent extends Mesh {
    private _physicsEnabled: boolean = true;

    ...

    @onPointerEvent(PointerEventTypes.POINTERTAP, true)
    protected _tapped(info: PointerInfo): void {
        if (!this._physicsEnabled) {
            return;
        }

        const force = this.getDirection(new Vector3(0, 0, 1));
        this.applyImpulse(force, this.getAbsolutePosition());
    }

    ...
}

----------------------------------------

TITLE: Imported Model Explosion in Babylon.js
DESCRIPTION: Demonstrates how to apply explosion effects to imported 3D models using AssetsManager. Handles model loading and explosion initialization.

LANGUAGE: javascript
CODE:
const assetsManager = new BABYLON.AssetsManager(scene);
const meshTask = assetsManager.addMeshTask("model", "", "./", "model.gltf");

let meshes;

meshTask.onSuccess = function(task) {
    meshes = task.loadedMeshes;
}
assetsManager.load();
const newExplosion;
scene.executeWhenReady(function() {
    newExplosion = new BABYLON.MeshExploder(meshes);
    newExplosion.explode(2);
});

----------------------------------------

TITLE: Customizing Scale Gizmo Sensitivity in Babylon.js
DESCRIPTION: Demonstrates how to adjust the sensitivity of AxisScaleGizmo and ScaleGizmo. A higher value means more stretch for the same drag.

LANGUAGE: javascript
CODE:
gizmoScale.sensitivity = 3;

----------------------------------------

TITLE: Keyboard Input Handling for Character Control in Babylon.js
DESCRIPTION: This snippet shows how to use the Action Manager to capture keyboard input and control character animations and movement based on key presses.

LANGUAGE: javascript
CODE:
const inputMap = {};
scene.actionManager = new BABYLON.ActionManager(scene);
scene.actionManager.registerAction(
  new BABYLON.ExecuteCodeAction(BABYLON.ActionManager.OnKeyDownTrigger, function (evt) {
    inputMap[evt.sourceEvent.key] = evt.sourceEvent.type == "keydown";
  }),
);
scene.actionManager.registerAction(
  new BABYLON.ExecuteCodeAction(BABYLON.ActionManager.OnKeyUpTrigger, function (evt) {
    inputMap[evt.sourceEvent.key] = evt.sourceEvent.type == "keydown";
  }),
);

----------------------------------------

TITLE: Creating a GUIRadio in BabylonJS
DESCRIPTION: Constructor for creating a new GUIRadio element. It takes parameters for id, options, GUI manager, callback function, and append flag.

LANGUAGE: javascript
CODE:
new GUIRadio(id, options, guimanager, callback, append)

----------------------------------------

TITLE: Using 3D Textures for Color Grading in Babylon.js
DESCRIPTION: Demonstrates the usage of 3D textures for color grading effects in Babylon.js, which is supported in WebGL2.

LANGUAGE: JavaScript
CODE:
// Example usage of 3D textures for color grading
// Actual implementation would be more complex

----------------------------------------

TITLE: Setting GUIMeter Visibility in BabylonJS
DESCRIPTION: Method to set the visibility of the GUIMeter element, with an optional fade parameter.

LANGUAGE: javascript
CODE:
setVisible(bool, fade) → void

----------------------------------------

TITLE: Scene State Transitions in BabylonJS
DESCRIPTION: Implementation of scene transition logic with loading UI and state management

LANGUAGE: javascript
CODE:
private async _main(): Promise<void> {
    await this._goToStart();

    this._engine.runRenderLoop(() => {
        switch (this._state) {
            case State.START:
                this._scene.render();
                break;
            case State.CUTSCENE:
                this._scene.render();
                break;
            case State.GAME:
                this._scene.render();
                break;
            case State.LOSE:
                this._scene.render();
                break;
            default: break;
        }
    });

    window.addEventListener('resize', () => {
        this._engine.resize();
    });
}

----------------------------------------

TITLE: Accessing Default Utility Layers in Babylon.js
DESCRIPTION: Shows how to access the default utility layers for overlays and occluded gizmos in Babylon.js.

LANGUAGE: javascript
CODE:
UtilityLayerRenderer.DefaultUtilityLayer; // for overlays like position/scale gizmos
UtilityLayerRenderer.DefaultKeepDepthUtilityLayer; // for occluded gizmos like bounding box)

----------------------------------------

TITLE: Coloring Lines in Babylon.js
DESCRIPTION: Shows how to apply color to lines after creation using the color property instead of materials.

LANGUAGE: javascript
CODE:
lines.color = new BABYLON.Color3(1, 0, 0);

----------------------------------------

TITLE: Applying Delta Changes to a Babylon.js Scene
DESCRIPTION: This snippet demonstrates how to apply previously recorded delta changes to a Babylon.js scene. This is useful for reapplying modifications without reexporting the scene.

LANGUAGE: javascript
CODE:
BABYLON.SceneRecorder.ApplyDelta(delta, scene);

----------------------------------------

TITLE: Creating a Custom Spray Emitter in Babylon.js
DESCRIPTION: Implementation of a custom spray particle emitter that emits particles from a cylindrical region.

LANGUAGE: javascript
CODE:
BABYLON.ParticleSystem.prototype.createSprayEmitter = function (radius, height) {
  if (radius === void 0) {
    radius = 0.5;
  }
  if (height === void 0) {
    height = 1;
  }
  var particleEmitter = new BABYLON.SprayParticleEmitter(radius, height);
  this.particleEmitterType = particleEmitter;
  return particleEmitter;
};

var SprayParticleEmitter = (function () {
  function SprayParticleEmitter(radius, height, directionRandomizer) {
    if (radius === void 0) {
      radius = 0.5;
    }
    if (height === void 0) {
      height = 1;
    }
    if (directionRandomizer === void 0) {
      directionRandomizer = 0;
    }
    this.height = height;
    this.directionRandomizer = directionRandomizer;
    this.radius = radius;
  }

  SprayParticleEmitter.prototype.startDirectionFunction = function (worldMatrix, directionToUpdate, particle) {
    var direction = particle.position.subtract(worldMatrix.getTranslation()).normalize();
    var randX = BABYLON.Scalar.RandomRange(0, this.directionRandomizer);
    var randY = BABYLON.Scalar.RandomRange(0, this.directionRandomizer);
    var randZ = BABYLON.Scalar.RandomRange(0, this.directionRandomizer);
    if (direction.x * direction.x + direction.z * direction.z > 0.1 * this.radius && Math.abs(direction.y) > (0.1 * this.height) / 2) {
      direction.x += randX;
      direction.y = randY;
      direction.z += randZ;
    } else {
      direction.x += randX;
      direction.y += randY;
      direction.z += randZ;
    }
    direction.normalize();
    BABYLON.Vector3.TransformNormalFromFloatsToRef(direction.x, direction.y, direction.z, worldMatrix, directionToUpdate);
  };

  SprayParticleEmitter.prototype.startPositionFunction = function (worldMatrix, positionToUpdate, particle) {
    var s = BABYLON.Scalar.RandomRange(0, Math.PI * 2);
    var h = BABYLON.Scalar.RandomRange(-0.5, 0.5);
    var radius = BABYLON.Scalar.RandomRange(0, this.radius);
    var randX = radius * Math.sin(s);
    var randZ = radius * Math.cos(s);
    var randY = h * this.height;
    BABYLON.Vector3.TransformCoordinatesFromFloatsToRef(randX, randY, randZ, worldMatrix, positionToUpdate);
  };
  return SprayParticleEmitter;
})();
BABYLON.SprayParticleEmitter = SprayParticleEmitter;

----------------------------------------

TITLE: Implementing Multi-Scene Render Loop in Babylon.js
DESCRIPTION: Demonstrates a render loop that handles multiple views and scenes. It checks the active view to determine which scene to render.

LANGUAGE: javascript
CODE:
let myRenderLoop = () => {
  if (engine.activeView.camera === undefined) {
    mainScene.render();
  } else if (engine.activeView.target === view1) {
    scene1.render();
  }
};

----------------------------------------

TITLE: Importing Specific Meshes in Babylon.js
DESCRIPTION: Demonstrates the use of SceneLoader.ImportMesh to load specific meshes from a file and append them to an existing scene. It also shows the asynchronous version using Promises and async/await.

LANGUAGE: javascript
CODE:
BABYLON.SceneLoader.ImportMesh(["myMesh1", "myMesh2"], "./", "duck.gltf", scene, function (meshes, particleSystems, skeletons) {
  // do something with the meshes and skeletons
  // particleSystems are always null for glTF assets
});

LANGUAGE: javascript
CODE:
const importPromise = BABYLON.SceneLoader.ImportMeshAsync(["myMesh1", "myMesh2"], "./", "duck.gltf", scene);
importPromise.then((result) => {
  //// Result has meshes, particleSystems, skeletons, animationGroups and transformNodes
});

LANGUAGE: javascript
CODE:
const result = await BABYLON.SceneLoader.ImportMeshAsync(["myMesh1", "myMesh2"], "./", "duck.gltf", scene);
// Result has meshes, particleSystems, skeletons, animationGroups and transformNodes

----------------------------------------

TITLE: Updating SPS Mesh in Babylon.js
DESCRIPTION: Demonstrates how to apply particle initialization and update the SPS mesh geometry and vertex data using initParticles and setParticles methods.

LANGUAGE: javascript
CODE:
SPS.initParticles();
SPS.setParticles();

----------------------------------------

TITLE: Sampling 2D Array Textures in GLSL
DESCRIPTION: Shows how to sample from 2D array textures in a GLSL shader, which is supported in WebGL2 for efficient texture atlas usage.

LANGUAGE: GLSL
CODE:
texture(yourSampler, vec3(u, v, layerIndex))

----------------------------------------

TITLE: Post Process Constructor Configuration
DESCRIPTION: Best practice for initializing PostProcess constructor, avoiding the reusable parameter to prevent continuous texture swapping and render bundle recreation in non-compatibility mode.

LANGUAGE: javascript
CODE:
new PostProcess("postProcess", /* ... */, reusable: false);

----------------------------------------

TITLE: Creating Basic Torus with MeshBuilder
DESCRIPTION: Creates a basic torus mesh using BABYLON.MeshBuilder with configurable options. The torus is centered at its origin and can be customized with properties like diameter, thickness, and tessellation.

LANGUAGE: javascript
CODE:
const torus = BABYLON.MeshBuilder.CreateTorus("torus", options, scene);

----------------------------------------

TITLE: Integrating Babylon.js Resizer with Timeline Control
DESCRIPTION: JavaScript code demonstrating how to use the Resizer control in conjunction with the Timeline control for efficient thumbnail generation.

LANGUAGE: javascript
CODE:
const resizer = new Resizer(canvas);
const timeline = new Timeline(resizer, {
    [...]
    getThumbnailCallback: (time: number) => {
        hiddenVideo.currentTime = time;
        return resizer.getResizedTexture(hiddenVideo, { width: 128, height: 100 });
    }
});

----------------------------------------

TITLE: Reversing Animation in Babylon.js
DESCRIPTION: This code demonstrates how to create and play an animation in reverse in Babylon.js. It sets up key frames and then uses the beginAnimation method with reversed start and end frames to play the animation backwards.

LANGUAGE: javascript
CODE:
const startFrame = 0;
const endFrame = 10;
const frameRate = 10;

const xSlide = new BABYLON.Animation("xSlide", "position.x", frameRate, BABYLON.Animation.ANIMATIONTYPE_FLOAT, BABYLON.Animation.ANIMATIONLOOPMODE_CYCLE);

const keyFrames = [];

keyFrames.push({
  frame: startFrame,
  value: 2,
});

keyFrames.push({
  frame: endFrame,
  value: -2,
});

xSlide.setKeys(keyFrames);

box.animations.push(xSlide);

//backwards animation
scene.beginAnimation(box, endFrame, startFrame, false);

----------------------------------------

TITLE: Creating Tubes with Mesh Method in Babylon.js
DESCRIPTION: This snippet shows how to create a tube mesh using the Mesh.CreateTube method. It includes both the basic and extended parameter lists for tube creation.

LANGUAGE: javascript
CODE:
let tube = BABYLON.Mesh.CreateTube("tube", path, radius, tesselation, optional radiusFunction, cap, scene);
let tube = BABYLON.Mesh.CreateTube("tube", path, radius, tesselation, optional radiusFunction, cap, scene, updatable, sideOrientation, instance); //optional parameters after scene

----------------------------------------

TITLE: Removing Skeleton from Clone in Babylon.js
DESCRIPTION: Shows how to remove a skeleton from a cloned mesh if it's not needed. Useful when working with animated meshes where the clone doesn't require animation.

LANGUAGE: javascript
CODE:
clone.skeleton = null;

----------------------------------------

TITLE: Drawing Text on Dynamic Texture in Babylon.js
DESCRIPTION: Uses the drawText method to write text directly onto a dynamic texture. Parameters include text content, position, font, colors, and update options.

LANGUAGE: javascript
CODE:
myDynamicTexture.drawText(text, x, y, font, color, canvas color, invertY, update);

----------------------------------------

TITLE: Checking Visibility of GUIDialog in BabylonJS
DESCRIPTION: Returns whether the GUIDialog is currently visible or not.

LANGUAGE: javascript
CODE:
isVisible()

----------------------------------------

TITLE: Configuring TextBlock for Scroll Viewer in Babylon.js
DESCRIPTION: Demonstrates how to configure a TextBlock to fit the width of the Scroll Viewer and enable vertical scrolling in Babylon.js GUI.

LANGUAGE: javascript
CODE:
myTextBlock.textWrapping = BABYLON.GUI.TextWrapping.WordWrap;
myTextBlock.resizeToFit = true;

----------------------------------------

TITLE: Adding Drag Behavior to Gizmo in Babylon.js
DESCRIPTION: Shows how to access and add observers to the gizmo's internal pointerDragBehavior.

LANGUAGE: javascript
CODE:
gizmo.dragBehavior.onDragObservable.add(() => {
  console.log("drag");
});

----------------------------------------

TITLE: Custom Font Ascii Art Implementation
DESCRIPTION: Creates an Ascii Art post process with custom font settings.

LANGUAGE: javascript
CODE:
var postProcess = new BABYLON.AsciiArtPostProcess("AsciiArt", camera, "10px Monospace");

----------------------------------------

TITLE: Starting Asset Loading in Babylon.js
DESCRIPTION: Initiates the loading process and sets up render loop after completion.

LANGUAGE: javascript
CODE:
textureTask.load();

textureTask.onFinish = (tasks) => {
  // do render stuff
  _this.engine.runRenderLoop(() => {
    _this.scene.render();
  });
};

----------------------------------------

TITLE: Assigning Mesh to Node in Node Geometry Editor
DESCRIPTION: Method to assign a mesh to a specific node block in the Node Geometry Editor using JavaScript. This allows for dynamic mesh assignment in code.

LANGUAGE: javascript
CODE:
NodeGeometry.getBlockByName("meshBlockName").mesh = myMesh;

----------------------------------------

TITLE: Setting Up UV Visualization Mode
DESCRIPTION: Demonstrates how to configure UV0/UV1 modes to display UV coordinates using a customizable checkerboard pattern.

LANGUAGE: javascript
CODE:
new BABYLON.MeshDebugPluginMaterial(mesh.material, {
    mode: BABYLON.MeshDebugMode.UV0,
    uvPrimaryColor: new BABYLON.Color3(1, 1, 1),
    uvSecondaryColor: new BABYLON.Color3(0.5, 0.5, 0.5),
    uvScale: 20
});

----------------------------------------

TITLE: Checking Bundle Statistics in WebGPU Engine
DESCRIPTION: Example showing how to check bundle creation and reuse statistics in the WebGPU engine's countersLastFrame property. This helps monitor performance in non compatibility mode.

LANGUAGE: javascript
CODE:
> engine.countersLastFrame
> {numEnableEffects: 0, numEnableDrawWrapper: 2, numBundleCreationNonCompatMode: 0, numBundleReuseNonCompatMode: 2}

----------------------------------------

TITLE: Checking Visibility of GUIButton in BabylonJS
DESCRIPTION: Returns whether the GUIButton is currently visible or not.

LANGUAGE: javascript
CODE:
isVisible() → void

----------------------------------------

TITLE: Accessing and Modifying Physics Aggregate Components in Babylon.js
DESCRIPTION: This snippet demonstrates how to access and modify individual components of a Physics Aggregate in Babylon.js. It creates an aggregate and then modifies the mass property of its body.

LANGUAGE: javascript
CODE:
const aggregate = new BABYLON.PhysicsAggregate(sphere, BABYLON.PhysicsShapeType.SPHERE, { mass: 1 }, scene);
aggregate.body.setMassProperties({mass: 10});

----------------------------------------

TITLE: Inefficient Particle Update Implementation
DESCRIPTION: Example showing a suboptimal implementation of particle acceleration that creates new Vector3 objects on each update, leading to excessive garbage collection.

LANGUAGE: javascript
CODE:
SPS.updateParticle = function(particle) {
  const accel = new BABYLON.Vector3(0, 0.5, 0);
  particle.velocity = particle.velocity.add(accel);
  // ...
};

----------------------------------------

TITLE: Enabling Fluid Rendering for Particle System in BabylonJS
DESCRIPTION: Basic setup to enable fluid rendering for a particle system in a BabylonJS scene. Creates a fluid renderer and adds a particle system to it for fluid-like visualization.

LANGUAGE: javascript
CODE:
const fluidRenderer = scene.enableFluidRenderer();
fluidRenderer.addParticleSystem(particleSystem);

----------------------------------------

TITLE: Performance Optimization with freezeNormals
DESCRIPTION: Shows how to optimize mesh morphing performance by freezing normal calculations when lighting updates aren't needed.

LANGUAGE: javascript
CODE:
const tube = BABYLON.Mesh.CreateTube("tube", path, 3, 12, null, BABYLON.Mesh.NO_CAP, scene, true);
tube.freezeNormals();
tube = BABYLON.Mesh.CreateTube(null, path, 3, null, null, null, null, null, null, tube);

----------------------------------------

TITLE: Implementing Player Character Controls
DESCRIPTION: Handles keyboard input to control player movement using physics imposters.

LANGUAGE: javascript
CODE:
const keyboard = { x: 0, y: 0 };
window.addEventListener("keydown", function (e) {
  if (e.which === Keycode.LEFT) {
    keyboard.x = -10;
  } else if (e.which === Keycode.RIGHT) {
    keyboard.x = 10;
  } else if (e.which === Keycode.UP) {
    keyboard.y = 10;
  } else if (e.which === Keycode.DOWN) {
    keyboard.y = -10;
  }
  playerViews[sessionId].physicsImpostor.setLinearVelocity(new BABYLON.Vector3(keyboard.x, 0, keyboard.y));
});

window.addEventListener("keyup", function (e) {
  if (e.which === Keycode.LEFT) {
    keyboard.x = 0;
  } else if (e.which === Keycode.RIGHT) {
    keyboard.x = 0;
  } else if (e.which === Keycode.UP) {
    keyboard.y = 0;
  } else if (e.which === Keycode.DOWN) {
    keyboard.y = 0;
  }

  playerViews[sessionId].physicsImpostor.setLinearVelocity(new BABYLON.Vector3(0, 0, 0));
});

----------------------------------------

TITLE: Using Optional Chaining with Babylon.js DeviceSourceManager
DESCRIPTION: Shows a concise way to check input state using optional chaining.

LANGUAGE: javascript
CODE:
if (deviceSourceManager.getDeviceSource(BABYLON.DeviceType.Xbox)?.getInput(BABYLON.XboxInput.A) === 1) {
  // Do something
}

----------------------------------------

TITLE: Enabling Anchor System in WebXR with Babylon.js
DESCRIPTION: This snippet demonstrates how to enable and use the anchor system in a WebXR experience with Babylon.js. It shows how to add anchors and handle anchor events.

LANGUAGE: javascript
CODE:
const anchorSystem = featuresManager.enableFeature(BABYLON.WebXRAnchorSystem, "latest");

anchorSystem.onAnchorAddedObservable.add((anchor) => {
  // ... do what you want with the anchor after it was added
});

anchorSystem.onAnchorRemovedObservable.add((anchor) => {
  // ... do what you want with the anchor after it was removed
});

anchorSystem.onAnchorUpdatedObservable.add((anchor) => {
  // ... do what you want with the anchor after it was updated
});

----------------------------------------

TITLE: Coloring Dashed Lines
DESCRIPTION: Shows how to set the color of dashed lines using the Color3 property.

LANGUAGE: javascript
CODE:
dashedlines.color = new BABYLON.Color3(1, 0, 0);

----------------------------------------

TITLE: Setting Image Mode for PhotoDome in Babylon.js
DESCRIPTION: Demonstrates how to set the image mode for different types of 360 images in a PhotoDome, including monoscopic, side-by-side stereoscopic, and top-bottom stereoscopic panoramas.

LANGUAGE: javascript
CODE:
photoDome.imageMode = BABYLON.PhotoDome.MODE_MONOSCOPIC;
// or
photoDome.imageMode = BABYLON.PhotoDome.MODE_SIDEBYSIDE;
// or
photoDome.imageMode = BABYLON.PhotoDome.MODE_TOPBOTTOM;

----------------------------------------

TITLE: Parametric Quadratic Path
DESCRIPTION: Creates the same quadratic curve using parametric equations with parameter t

LANGUAGE: javascript
CODE:
const path = [];
for (let t = -5; t <= 5; t++) {
    let x = t;
    let y = t * t
    path.push(new BABYLON.Vector3(x, y, 6))
}

----------------------------------------

TITLE: Viewport Constructor Definition in Babylon.js
DESCRIPTION: Demonstrates the constructor syntax for creating a viewport, where parameters represent the position and dimensions as fractions of screen size.

LANGUAGE: javascript
CODE:
BABYLON.Viewport = function (x, y, width, height);

----------------------------------------

TITLE: Setting Particle Emit Rate and Count in Babylon.js
DESCRIPTION: Sets the emission rate per second and allows for a manual emission count limit.

LANGUAGE: javascript
CODE:
particleSystem.emitRate = 1000;

particleSystem.manualEmitCount = 300;

----------------------------------------

TITLE: Checking Visibility of GUIWindow in BabylonJS
DESCRIPTION: Method to check if the GUIWindow is visible.

LANGUAGE: javascript
CODE:
isVisible() → void

----------------------------------------

TITLE: Enabling Snapping on Single Axis Gizmos in Babylon.js
DESCRIPTION: Shows how to enable snapping on single axis gizmos and add an observer for snap events.

LANGUAGE: javascript
CODE:
gizmo.snapDistance = 0.3;
gizmo.onSnapObservable.add((event) => {
  console.log(event);
});

----------------------------------------

TITLE: Creating Icosphere with MeshBuilder in Babylon.js
DESCRIPTION: This snippet demonstrates how to create an icosphere using BABYLON.MeshBuilder.CreateIcoSphere(). It includes options for customizing the icosphere's properties such as radius, subdivisions, and orientation.

LANGUAGE: javascript
CODE:
const icosphere = BABYLON.MeshBuilder.CreateIcoSphere("icosphere", options, scene);

----------------------------------------

TITLE: Adding Options to GUISelect in BabylonJS
DESCRIPTION: Method to add a new option to the GUISelect element. It takes value and text parameters for the new option.

LANGUAGE: javascript
CODE:
addOptions(value, text)

----------------------------------------

TITLE: Task Success Callback in Babylon.js
DESCRIPTION: Defines success callback for an asset loading task, handling the loaded mesh positioning.

LANGUAGE: javascript
CODE:
meshTask.onSuccess = function (task) {
  task.loadedMeshes[0].position = BABYLON.Vector3.Zero();
};

----------------------------------------

TITLE: Initializing WebGPU Pipeline Cache Node Structure
DESCRIPTION: Defines the core node structure used to cache GPU render pipelines. Each node contains a values object for child nodes and can store a pipeline instance.

LANGUAGE: typescript
CODE:
class NodeState {
    public values: { [id: number]: NodeState };
    public pipeline: GPURenderPipeline;

    constructor() {
        this.values = {};
    }
}

export class WebGPUCacheRenderPipelineTree {
    private static _Cache: NodeState = new NodeState();
    ...
}

----------------------------------------

TITLE: Defining Canvas Reference in TypeScript for Vue 2
DESCRIPTION: TypeScript code to define the canvas reference in a Vue 2 component.

LANGUAGE: typescript
CODE:
const bjsCanvas = <HTMLCanvasElement>this.$refs.bjsCanvas;

----------------------------------------

TITLE: Multi-Particle Box Collision System in BabylonJS
DESCRIPTION: Implementation of multiple particles colliding within a confined box, handling both wall and inter-particle collisions.

LANGUAGE: javascript
CODE:
PG: <Playground id="#HIM0WS" title="Slow Moving Particles" description="Particles inside a box, collide with the box and each other."/>

LANGUAGE: javascript
CODE:
PG: <Playground id="#HIM0WS#1" title="Fast Moving Particles" description="."/>

----------------------------------------

TITLE: Implementing Sparkler Warning Sound System in JavaScript
DESCRIPTION: Manages warning sound effects for sparkler energy levels with pause functionality and cleanup. Handles edge cases for animation interruption and game pause states.

LANGUAGE: javascript
CODE:
if (!this.gamePaused) {
  if (this._sparklerLife.cellId < 10) {
    this._sparklerLife.cellId++;
  }
  if (this._sparklerLife.cellId == 9) {
    this._sparkWarningSfx.play();
  }
  if (this._sparklerLife.cellId == 10) {
    this.stopSpark = true;
    clearInterval(this._handle);
    //sfx
    this._sparkWarningSfx.stop();
  }
}
else {
    this._sparkWarningSfx.pause();
}

----------------------------------------

TITLE: Constructing a Single Path Ribbon in JavaScript
DESCRIPTION: This snippet demonstrates how to create a single path for a ribbon using a helical shape. The path is constructed using a loop that generates Vector3 points.

LANGUAGE: javascript
CODE:
pathHelix = [];
let v;
for (let i = 0; i <= 60; i++) {
  v = (2.0 * Math.PI * i) / 20;
  pathHelix.push(new BABYLON.Vector3(3 * Math.cos(v), i / 4, 3 * Math.sin(v)));
}

----------------------------------------

TITLE: Setting up Babylon.js Engine in Worker
DESCRIPTION: Worker thread code that receives the offscreen canvas and initializes the Babylon.js engine.

LANGUAGE: javascript
CODE:
onmessage = function (evt) {
  canvas = evt.data.canvas;
  var engine = new BABYLON.Engine(canvas, true);

  // Your scene setup here
};

----------------------------------------

TITLE: Configuring Chromatic Aberration in Babylon.js Default Rendering Pipeline
DESCRIPTION: This code demonstrates how to enable and configure the chromatic aberration effect in the default rendering pipeline. It sets the aberration amount, radial intensity, and direction.

LANGUAGE: javascript
CODE:
pipeline.chromaticAberrationEnabled = true;
pipeline.chromaticAberration.aberrationAmount = 300;
pipeline.chromaticAberration.radialIntensity = 3;
var rotation = Math.PI;
pipeline.chromaticAberration.direction.x = Math.sin(rotation)
pipeline.chromaticAberration.direction.y = Math.cos(rotation)

----------------------------------------

TITLE: Applying Lattice Deformation Directly to Mesh in Babylon.js
DESCRIPTION: Shows how to apply lattice deformation directly to a mesh in Babylon.js.

LANGUAGE: javascript
CODE:
var sphere = BABYLON.MeshBuilder.CreateSphere("sphere", {diameter: 2, segments: 32}, scene);
lattice.deformMesh(sphere);
sphere.createNormals(true);

----------------------------------------

TITLE: Creating an Extruded Polygon Mesh with Path2 in Babylon.js
DESCRIPTION: This example shows how to create an extruded polygon mesh using a Path2 object. The build method accepts parameters for updateability and extrusion depth.

LANGUAGE: javascript
CODE:
var polygon_triangulation = new BABYLON.PolygonMeshBuilder("name", Path2, scene);
var polygon = polygon_triangulation.build(false, 3);

----------------------------------------

TITLE: Transforming Dynamic Texture Content in Babylon.js
DESCRIPTION: Demonstrates how to apply transformations like scale, rotate, or translate to content drawn on a dynamic texture. It uses save() and restore() to manage context state.

LANGUAGE: javascript
CODE:
const texSize = 512;

ctx.save();

// define position and size of rectangle
const left = texSize * 0.5 - (texSize * 0.125);
const top = texSize * 0.5 - (texSize * 0.125);
const width = 0.25 * texSize;
const height = 0.25 * texSize;

// translate context to center rotation of rectangle
const rotationCenterU = width * 0.5 + left;
const rotationCenterV = height * 0.5 + top;
ctx.translate(rotationCenterU, rotationCenterV);

// rotate context before drawing
ctx.rotate(Math.PI/4);

// draw rectangle
ctx.fillStyle = "Red";
ctx.fillRect(-width * 0.5, -height * 0.5, width, height);

ctx.restore();

----------------------------------------

TITLE: Updating Skybox in Fast Snapshot Rendering Mode
DESCRIPTION: Demonstrates how to update the skybox position in fast snapshot rendering mode. This code is added to the scene's onBeforeRenderObservable to ensure the skybox position is updated each frame.

LANGUAGE: javascript
CODE:
scene.onBeforeRenderObservable.add(() => {
    if (engine.snapshotRendering && engine.snapshotRenderingMode === BABYLON.Constants.SNAPSHOTRENDERING_FAST) {
        const world = skybox.computeWorldMatrix(true);
        skybox.transferToEffect(world);
    }
});

----------------------------------------

TITLE: Loading Gaussian Splatting File in BabylonJS
DESCRIPTION: Demonstrates how to asynchronously load a Gaussian Splatting file (.splat or .PLY) into a BabylonJS scene. Returns a promise that resolves with the loaded mesh.

LANGUAGE: javascript
CODE:
BABYLON.SceneLoader.ImportMeshAsync(null, "https://assets.babylonjs.com/splats/", "gs_Skull.splat", scene).then((result) =>{
    const gaussianSplattingMesh = result.meshes[0]; });

----------------------------------------

TITLE: Creating an Arc Through Three Points in Babylon.js
DESCRIPTION: This code snippet shows how to create an arc that passes through three given points using the Curve3.ArcThru3Points method in Babylon.js.

LANGUAGE: javascript
CODE:
const arc = BABYLON.Curve3.ArcThru3Points(first, second, third, steps, closed, fullCircle);

const path = arc.getPoints();
const l = arc.length();

----------------------------------------

TITLE: Adding Event Listeners to Bounding Box Gizmo in Babylon.js
DESCRIPTION: Demonstrates how to add event listeners for drag events on the scale and rotation meshes of the BoundingBoxGizmo.

LANGUAGE: javascript
CODE:
gizmo.onScaleBoxDragObservable.add(() => {
  console.log("scaleDrag");
});
gizmo.onScaleBoxDragEndObservable.add(() => {
  console.log("scaleEnd");
});
gizmo.onRotationSphereDragObservable.add(() => {
  console.log("rotDrag");
});
gizmo.onRotationSphereDragEndObservable.add(() => {
  console.log("rotEnd");
});

----------------------------------------

TITLE: Coloring Line Systems in Babylon.js
DESCRIPTION: Shows how to color a line system after creation using the color property. This method applies a single color to the entire line system.

LANGUAGE: javascript
CODE:
linesystem.color = new BABYLON.Color3(1, 0, 0);

----------------------------------------

TITLE: Setting up SubMeshes for Tiled Ground in Babylon.js
DESCRIPTION: Demonstrates how to set up subMeshes for a tiled ground. This process involves creating variables for vertex and index counts, then iterating through the grid to create SubMesh instances.

LANGUAGE: javascript
CODE:
const verticesCount = tiledGround.getTotalVertices();
const tileIndicesLength = tiledGround.getIndices().length / (subdivisions.w * subdivisions.h);

LANGUAGE: javascript
CODE:
let base = 0;
for (let row = 0; row < grid.h; row++) {
  for (let col = 0; col < grid.w; col++) {
    new BABYLON.SubMesh(row % 2 ^ col % 2, 0, verticesCount, base, tileIndicesLength, tiledGround);
    base += tileIndicesLength;
  }
}

----------------------------------------

TITLE: Setting Particle Color in Babylon.js
DESCRIPTION: Demonstrates how to set individual color components for a particle in the initParticle and updateParticle functions.

LANGUAGE: javascript
CODE:
particle.color.r = red; //number from 0 to 1
particle.color.g = green; //number from 0 to 1
particle.color.b = blue; //number from 0 to 1
particle.color.a = alpha; //number from 0 to 1

----------------------------------------

TITLE: Initializing Pixi.js WebGL Renderer with Babylon.js
DESCRIPTION: Sets up a Pixi.js WebGL renderer using the Babylon.js engine's GL context and canvas. Important settings include disabling clear before render and auto-start.

LANGUAGE: javascript
CODE:
const pixiRenderer = new PIXI.WebGLRenderer({
  context: engine._gl,
  view: engine.getRenderingCanvas(),
  clearBeforeRender: false,
  autoStart: false,
});

----------------------------------------

TITLE: Accessing Internal Gizmos in GizmoManager for Babylon.js
DESCRIPTION: Demonstrates how to access internal gizmos through the GizmoManager and add event listeners to their drag behaviors.

LANGUAGE: javascript
CODE:
gizmoManager.gizmos.scaleGizmo;
gizmoManager.gizmos.rotationGizmo;
gizmoManager.gizmos.positionGizmo;

gizmoManager.gizmos.positionGizmo.xGizmo.dragBehavior.onDragStartObservable.add(() => {
  console.log("Position gizmo's x axis started to be dragged");
});
gizmoManager.gizmos.positionGizmo.xGizmo.dragBehavior.onDragEndObservable.add(() => {
  console.log("Position gizmo's x axis drag was ended");
});

----------------------------------------

TITLE: Creating a Multi-Material in Babylon.js
DESCRIPTION: This code creates a multi-material and adds the previously defined standard materials as sub-materials.

LANGUAGE: javascript
CODE:
const multimat = new BABYLON.MultiMaterial("multi", scene);
multimat.subMaterials.push(material0);
multimat.subMaterials.push(material1);
multimat.subMaterials.push(material2);

----------------------------------------

TITLE: Adding Key Frames to Babylon.js Animation
DESCRIPTION: Demonstrates how to add the array of key frames to a Babylon.js Animation object using the setKeys method.

LANGUAGE: javascript
CODE:
myAnim.setKeys(myKeys);

----------------------------------------

TITLE: Creating a MeshButton3D in Babylon.js
DESCRIPTION: Shows how to create a MeshButton3D using an existing mesh and add pointer animations.

LANGUAGE: javascript
CODE:
const pushButton = new BABYLON.GUI.MeshButton3D(mesh, "pushButton");

pushButton.pointerEnterAnimation = () => {
  mesh.material.albedoColor = hoverColor;
};
pushButton.pointerOutAnimation = () => {
  mesh.material.albedoColor = new BABYLON.Color3(0.5, 0.19, 0);
};

----------------------------------------

TITLE: Camera-Facing Axis Alignment in Babylon.js
DESCRIPTION: Shows how to calculate and apply axis alignments to make a mesh face the camera while maintaining specific orientations between objects.

LANGUAGE: javascript
CODE:
axis1 = (sphere1.position).subtract(sphere2.position);
axis3 = BABYLON.Vector3.Cross(camera.position, axis1);
axis2 = BABYLON.Vector3.Cross(axis3, axis1);

LANGUAGE: javascript
CODE:
mesh.rotation = BABYLON.Vector3.RotationFromAxis(axis1, axis2, axis3);

----------------------------------------

TITLE: Testing Babylon Viewer Configuration in CodePen
DESCRIPTION: This HTML snippet demonstrates how to embed a Babylon Viewer configuration for testing purposes in a CodePen environment. It includes a placeholder for the HTML output from the Viewer Configurator.

LANGUAGE: html
CODE:
<CodePen pen="ByaZQEp" tab="html,result" title="Viewer Configurator Test" />

----------------------------------------

TITLE: Storing WGSL Shaders in Babylon.js ShaderStore
DESCRIPTION: Demonstrates how to store WGSL vertex and fragment shaders in the Babylon.js ShaderStore for use with ShaderMaterial.

LANGUAGE: javascript
CODE:
BABYLON.ShaderStore.ShadersStoreWGSL["myShaderVertexShader"]=`   
    #include<sceneUboDeclaration>
    #include<meshUboDeclaration>
    ...
`;

BABYLON.ShaderStore.ShadersStoreWGSL["myShaderFragmentShader"]=`
    varying vPositionW : vec3<f32>;
    varying vUV : vec2<f32>;
    ...
`;

----------------------------------------

TITLE: Enabling sRGB Buffer Support in Babylon.js Engine Creation
DESCRIPTION: This code snippet demonstrates how to create a Babylon.js engine with forced sRGB buffer support, which is necessary for 3D Commerce certification. It ensures correct color rendering in the viewer.

LANGUAGE: javascript
CODE:
const engine = new Engine(canvas, antialias, { 
    forceSRGBBufferSupportState: true
});

----------------------------------------

TITLE: Defining Variables and Uniforms in GLSL for CloudBis Texture
DESCRIPTION: This GLSL code snippet defines the variables and uniforms used in the cloudBis procedural texture shader. It includes varying UV coordinates and uniform color variables for sky and cloud colors.

LANGUAGE: GLSL
CODE:
precision highp float;

varying vec2 vUV;

uniform vec4 skyColor;
uniform vec4 cloudColor;

----------------------------------------

TITLE: Configuring GitHub Pages for Babylon.js Project
DESCRIPTION: This YAML configuration sets up the GitHub Pages settings for hosting a Babylon.js project, including the theme and website metadata.

LANGUAGE: yaml
CODE:
theme: jekyll-theme-minimal
title: Title For Your Website
description: Website description.

----------------------------------------

TITLE: Setting Individual Position Components in Babylon.js
DESCRIPTION: Shows how to set individual x, y, z coordinates of a mesh's position directly. This allows for precise control over each dimension of the mesh's position.

LANGUAGE: javascript
CODE:
mesh.position.x = 2; //(2, 2, 1)
mesh.position.y = 3; //(2, 3, 1)
mesh.position.z = 4; //(2, 3, 4)

----------------------------------------

TITLE: Advanced Screenshot Creation Using RenderTarget in BabylonJS
DESCRIPTION: Creates a screenshot using a RenderTargetTexture, offering additional configuration options including antialiasing, sprite rendering, and texture customization. Useful when capturing screenshots with non-active cameras.

LANGUAGE: javascript
CODE:
BABYLON.Tools.CreateScreenshotUsingRenderTarget(engine, camera, size, successCallback, mimeType, samples, antialiasing, fileName, renderSprites, enableStencilBuffer, useLayerMask, quality, customizeTexture);

----------------------------------------

TITLE: Creating a Custom Utility Layer in Babylon.js
DESCRIPTION: Demonstrates how to create a custom utility layer renderer in Babylon.js.

LANGUAGE: javascript
CODE:
const utilLayer = new BABYLON.UtilityLayerRenderer(scene);

----------------------------------------

TITLE: Creating a Physics Cylinder Shape in Babylon.js
DESCRIPTION: Shows how to create a cylinder physics shape with start and end points and a radius. The shape is defined in local coordinates.

LANGUAGE: javascript
CODE:
const shape = new BABYLON.PhysicsShapeCylinder(
    new BABYLON.Vector3(0, -0.5, 0),    // starting point of the cylinder segment
    new BABYLON.Vector3(0,  0.5, 0),    // ending point of the cylinder segment
    1,                                  // radius of the cylinder
    scene                               // scene of the shape
);

----------------------------------------

TITLE: Initializing Standard Rendering Pipeline in Babylon.js
DESCRIPTION: Creates a new instance of the Standard Rendering Pipeline with configuration for scene, ratio, and cameras.

LANGUAGE: javascript
CODE:
var pipeline = new BABYLON.StandardRenderingPipeline(
    "standard", // The name of the pipeline
    scene, // The scene instance
    1.0, // The rendering pipeline ratio
    null, // The original post-process that the pipeline will be based on
    [camera] // The list of cameras to be attached to
);

----------------------------------------

TITLE: Enabling Background Remover in WebXR with Babylon.js
DESCRIPTION: This snippet demonstrates how to enable the background remover feature in a WebXR experience using Babylon.js. It shows how to configure the removal of skybox and ground.

LANGUAGE: javascript
CODE:
const xrBackgroundRemover = featuresManager.enableFeature(BABYLON.WebXRBackgroundRemover, "latest", {
  environmentHelperRemovalFlags: {
    skyBox: true,
    ground: false,
  },
});

----------------------------------------

TITLE: Initializing FollowBehavior in Babylon.js
DESCRIPTION: Creates a FollowBehavior instance to make a mesh follow the camera. The behavior updates the mesh's position and rotation based on camera view and distance.

LANGUAGE: javascript
CODE:
const followBehavior = new BABYLON.FollowBehavior();
followBehavior.attach(mesh);

----------------------------------------

TITLE: Creating Point Emitter in Babylon.js
DESCRIPTION: Creates a point emitter for a particle system with configurable direction vectors. Takes two Vector3 parameters for direction1 and direction2.

LANGUAGE: javascript
CODE:
var pointEmitter = particleSystem.createPointEmitter(new BABYLON.Vector3(-7, 8, 3), new BABYLON.Vector3(7, 8, -3));

pointEmitter.direction1 = new BABYLON.Vector3(-5, 2, 1); 
pointEmitter.direction2 = new BABYLON.Vector3(5, 2, 1);

----------------------------------------

TITLE: Customizing Water Material Properties in Babylon.js
DESCRIPTION: This snippet demonstrates how to customize various properties of the water material, including wind force, wave height, bump height, wind direction, water color, color blend factor, and wave length.

LANGUAGE: javascript
CODE:
waterMaterial.windForce = 45; // Represents the wind force applied on the water surface
waterMaterial.waveHeight = 1.3; // Represents the height of the waves
waterMaterial.bumpHeight = 0.3; // According to the bump map, represents the pertubation of reflection and refraction
waterMaterial.windDirection = new BABYLON.Vector2(1.0, 1.0); // The wind direction on the water surface (on width and height)
waterMaterial.waterColor = new BABYLON.Color3(0.1, 0.1, 0.6); // Represents the water color mixed with the reflected and refracted world
waterMaterial.colorBlendFactor = 2.0; // Factor to determine how the water color is blended with the reflected and refracted world
waterMaterial.waveLength = 0.1; // The lenght of waves. With smaller values, more waves are generated

----------------------------------------

TITLE: Handling Pointer Out Events in Utility Layer in Babylon.js
DESCRIPTION: Demonstrates how to handle pointer out events when the pointer leaves the utility layer in Babylon.js.

LANGUAGE: javascript
CODE:
utilLayer.onPointerOutObservable.add(function (pointerId) {});

----------------------------------------

TITLE: Creating a Bump Map in Babylon.js
DESCRIPTION: Demonstrates how to add a bump texture to a standard material in Babylon.js. This creates the illusion of surface detail without changing the actual geometry.

LANGUAGE: javascript
CODE:
const myMaterial = new BABYLON.StandardMaterial("myMaterial", scene);
myMaterial.bumpTexture = new BABYLON.Texture("PATH TO NORMAL MAP", scene);

----------------------------------------

TITLE: Configuring Web Crawler Access for BabylonJS Documentation
DESCRIPTION: This robots.txt file sets the rules for web crawlers accessing the BabylonJS documentation site. It allows all user agents and specifies the location of the sitemap for improved indexing.

LANGUAGE: robots.txt
CODE:
User-agent: *
Sitemap: https://doc.babylonjs.com/sitemap.xml

----------------------------------------

TITLE: Querying Input State in Babylon.js DeviceSourceManager
DESCRIPTION: Demonstrates how to check if a specific input (Xbox A button) is pressed using DeviceSourceManager.

LANGUAGE: javascript
CODE:
if (deviceSourceManager.getDeviceSource(BABYLON.DeviceType.Xbox)) {
  if (deviceSourceManager.getDeviceSource(BABYLON.DeviceType.Xbox).getInput(BABYLON.XboxInput.A) === 1) {
    // Do something
  }
}

----------------------------------------

TITLE: Creating Path3D Object in Babylon.js
DESCRIPTION: Shows how to create a basic Path3D object from an array of Vector3 points.

LANGUAGE: javascript
CODE:
const points = [v1, v2, ..., vn];          // array of Vector3
const path3d = new BABYLON.Path3D(points);

----------------------------------------

TITLE: Adjusting Parameters in Digital Rain Post Process
DESCRIPTION: This code demonstrates how to customize various parameters of the Digital Rain Post Process, including font, mixToNormal, and mixToTile values.

LANGUAGE: javascript
CODE:
var postProcess = new BABYLON.DigitalRainPostProcess("DigitalRain", camera, 
    {
        font: "30px Monospace",
        mixToNormal: 0.5,
        mixToTile: 0.5        
    });

----------------------------------------

TITLE: Creating a SpherePanel in Babylon.js
DESCRIPTION: Illustrates the creation of a SpherePanel for arranging 3D GUI controls on a spherical surface.

LANGUAGE: javascript
CODE:
const panel = new BABYLON.GUI.SpherePanel();
panel.radius = 5;

----------------------------------------

TITLE: Creating Engine Using EngineFactory in Babylon.js
DESCRIPTION: This snippet shows how to use the EngineFactory helper to create an engine. It attempts to create a WebGPU engine first, then falls back to WebGL, and finally to a null engine if neither is supported.

LANGUAGE: javascript
CODE:
async function createEngine() {
  return BABYLON.EngineFactory.CreateAsync(document.getElementById("renderCanvas"));
}

----------------------------------------

TITLE: Installing Dependencies for Babylon.js Docs
DESCRIPTION: Command to install all required npm dependencies for the documentation website.

LANGUAGE: bash
CODE:
npm install

----------------------------------------

TITLE: Babylon.js Viewer Camera Auto-Orbit Configuration
DESCRIPTION: Example demonstrating how to enable and customize automatic camera orbiting behavior in the Babylon.js viewer element.

LANGUAGE: html
CODE:
<babylon-viewer camera-auto-orbit camera-auto-orbit-speed="1.5" camera-auto-orbit-delay="2000">

----------------------------------------

TITLE: Defining Custom Water Shader in Unity for Babylon.js
DESCRIPTION: This GLSL code defines a custom water shader for Unity that can be exported to Babylon.js. It includes properties for water color, normal mapping, and various wave parameters. The shader also specifies a Babylon.js controller class for handling the material in the exported scene.

LANGUAGE: glsl
CODE:
Shader "Babylon/Library Materials/Water Material"
{
    Properties {
        _WaterColor("Main Color", Color) = (0.1, 0.1, 0.6,1.0)
        _BumpMap("Normal Map", 2D) = "bump" {}
        _TagIndex("Tag Index", Int) = 0
        _WindForce("Wind Force", Float) = 6
        _WaveSpeed("Wave Speed", Float) = 1.0
        _WaveLength("Wave Length", Float) = 0.1
        _WaveHeight("Wave Height", Float) = 0.4
        _BumpHeight("Bump Height", Float) = 0.4
        _ColorBlendFactor("Blend Factor", Float) = 0.2
        _SecondBlendFactor("Second Factor", Float) = 0.2
        _WindDirectionX("Wind Direction X", Float) = 0.0
        _WindDirectionY("Wind Direction Y", Float) = 1.0
        _SecondColor("Secondary Color", Color) = (0.1, 0.1, 0.6,1.0)
        _SpecColor("Specular Color", Color) = (0.0,0.0,0.0,1.0)
        _Shininess("Specular Power", Range(0.0, 1.0)) = 0.5
        _Color("Diffuse Color", Color) = (1.0,1.0,1.0,1.0)

        [ToggleOff] _Wireframe("Show Wireframe", Int) = 0
        [ToggleOff] _BackFaceCulling("Back Face Culling", Int) = 1
        [ToggleOff] _DisableLighting("Disable Surface Lighting", Int) = 0
        _MaxSimultaneousLights("Max Simultaneous Lights", Int) = 4

        [HideInInspector] _MainTex ("Base (RGB)", 2D) = "white" {}
    }

    CGINCLUDE
    #ifdef BABYLON_INFO
        controller: "BABYLON.WaterMaterialController"
    #endif //BABYLON_INFO_END
    ENDCG

    SubShader {
        Tags { "RenderType"="Opaque" }
        LOD 300

        CGPROGRAM
        #pragma surface surf Lambert

        sampler2D _MainTex;
        sampler2D _BumpMap;
        fixed4 _WaterColor;

        struct Input {
            float2 uv_MainTex;
            float2 uv_BumpMap;
        };

        void surf (Input IN, inout SurfaceOutput o) {
            o.Albedo = _WaterColor.rgb;
            o.Alpha = _WaterColor.a;
            o.Normal = UnpackNormal(tex2D(_BumpMap, IN.uv_BumpMap));
        }
        ENDCG
    }
    FallBack "Legacy Shaders/Diffuse"
}

----------------------------------------

TITLE: Creating a Ribbon with Automatic Closing in Babylon.js
DESCRIPTION: This snippet shows how to create a ribbon mesh with the closeArray parameter set to true, which adds an extra unit ribbon between the last and first paths.

LANGUAGE: javascript
CODE:
var ribbon = BABYLON.MeshBuilder.CreateRibbon("ribbon", { pathArray: paths, closeArray: true }, scene);

----------------------------------------

TITLE: Updating Vertex Data in Babylon.js
DESCRIPTION: This snippet shows how to update different types of vertex data for a mesh in Babylon.js. It assumes the mesh has been set as updatable on creation and the data arrays have been modified.

LANGUAGE: javascript
CODE:
mesh.updateVerticesData(BABYLON.VertexBuffer.PositionKind, positions);
mesh.updateVerticesData(BABYLON.VertexBuffer.NormalKind, normals);
mesh.updateVerticesData(BABYLON.VertexBuffer.ColorKind, colors);
mesh.updateVerticesData(BABYLON.VertexBuffer.UVKind, uvs);

----------------------------------------

TITLE: RSM Introduction and Definition
DESCRIPTION: Markdown definition of Global Illumination and its role in 3D graphics

LANGUAGE: markdown
CODE:
Global illumination (GI), or indirect illumination, is a group of algorithms used in 3D computer graphics that are meant to add more realistic lighting to 3D scenes. Such algorithms take into account not only the light that comes directly from a light source (direct illumination), but also subsequent cases in which light rays from the same source are reflected by other surfaces in the scene, whether reflective or not (indirect illumination).

Theoretically, reflections, refractions, and shadows are all examples of global illumination, because when simulating them, one object affects the rendering of another (as opposed to an object being affected only by a direct source of light). In practice, however, only the simulation of diffuse inter-reflection or caustics is called global illumination.

----------------------------------------

TITLE: Configuring Pointer Events for Utility Layer in Babylon.js
DESCRIPTION: Shows how to configure pointer event handling for the utility layer in Babylon.js, including controlling event checks and processing all events.

LANGUAGE: javascript
CODE:
utilLayer.onlyCheckPointerDownEvents = false;
utilLayer.processAllEvents = true;

----------------------------------------

TITLE: Creating a Physics Height Field Shape in Babylon.js
DESCRIPTION: Shows how to create a height field physics shape from a height map. This is efficient for representing terrain or other height-based surfaces.

LANGUAGE: javascript
CODE:
var ground = BABYLON.MeshBuilder.CreateGroundFromHeightMap("g", "https://image.jpeg", {
        subdivisions,
        width: size,
        height: size,
        maxHeight: 5,
        passHeightBufferInCallback: true,
        onReady: (mesh, heightBuffer) => {
            var shape = new BABYLON.PhysicsShapeHeightField(
                    size,
                    size,
                    subdivisions+1,
                    subdivisions+1,
                    heightBuffer
                , scene);
        }
    });

----------------------------------------

TITLE: Loading Particle System JSON File with Asset Manager in Babylon.js
DESCRIPTION: This snippet demonstrates how to use the Asset Manager to load a particle system JSON file. It creates an AssetsManager instance and adds a TextFileAssetTask for the particle system file.

LANGUAGE: javascript
CODE:
const assetsManager = new BABYLON.AssetsManager(scene);
const particleFile = assetsManager.addTextFileTask("my particle system", "particleSystem.json");

// load all tasks
assetsManager.load();

----------------------------------------

TITLE: Webpack Configuration for Babylon.js TypeScript Project
DESCRIPTION: Example webpack.config.js for a Babylon.js TypeScript project.

LANGUAGE: javascript
CODE:
module.exports = {
    entry: {
        app: './mygame.ts'
    },
    output: {
        path: path.resolve(__dirname, 'dist'),
        filename: '[name].js'
    },
    resolve: {
        extensions: ['.ts', '.tsx', '.js']
    },
    devtool: 'source-map',
    plugins: [],
    module: {
        rules: [{
            test: /\.tsx?$/,
            loader: 'ts-loader',
            exclude: /node_modules/
        }]
    }
}

----------------------------------------

TITLE: GUISlider Disposal Method
DESCRIPTION: Method for disposing of the GUI slider element and cleaning up resources.

LANGUAGE: typescript
CODE:
dispose(): void

----------------------------------------

TITLE: Loading and Applying Serialized Vertex Animation Data in Babylon.js
DESCRIPTION: This snippet demonstrates how to load previously serialized vertex animation data from a JSON file and apply it to a mesh in Babylon.js. It includes fetching the JSON file, creating a baker, and setting up the animation.

LANGUAGE: javascript
CODE:
let baker = null,
  mesh = null;
const animationRanges = [{ from: 1, to: 20, name: "My animation" }];

// read your mesh like always
BABYLON.SceneLoader.ImportMeshAsync("", "http://example.com", "arr.babylon", scene, undefined)
  .then((importResult) => {
    mesh = importResult.meshes[0];
    // read the vertex data file.
    return fetch("/vertexData.json");
  })
  .then((response) => {
    if (!response.ok) {
      throw new Error("HTTP error " + response.status);
    }
    // convert to json
    return response.json();
  })
  .then((json) => {
    // create the baker helper, so we can generate the texture
    baker = new BABYLON.VertexAnimationBaker(scene, mesh);
    const vertexData = baker.loadBakedVertexDataFromJSON(json);
    // we got the vertex data. create the texture from it:
    const vertexTexture = baker.textureFromBakedVertexData(vertexData);

    // .... and now the same code as above
  });

----------------------------------------

TITLE: Creating and Rendering Decal Maps in Babylon.js
DESCRIPTION: Demonstrates how to create a decal map texture and apply it to a mesh using MeshUVSpaceRenderer. Includes texture creation and mesh application steps.

LANGUAGE: javascript
CODE:
const decalMap = new BABYLON.MeshUVSpaceRenderer(mesh, scene);
const texture = new BABYLON.Texture("bullet.png", scene);
const decalSize = new BABYLON.Vector3(1, 1, 1);
decalMap.renderTexture(texture, position, normal, decalSize);

LANGUAGE: javascript
CODE:
mesh.decalMap = decalMap;
mesh.material.decalMap.isEnabled = true;

----------------------------------------

TITLE: Enabling Depth Renderer in Babylon.js
DESCRIPTION: Shows how to enable the depth renderer for a scene to generate depth textures. The renderer will automatically fill with depth values from active meshes visible from the current camera.

LANGUAGE: javascript
CODE:
const renderer = scene.enableDepthRenderer();

----------------------------------------

TITLE: Adding Meshes to Water Material Render List in Babylon.js
DESCRIPTION: This snippet shows how to add meshes to the water material's render list for reflection and refraction effects.

LANGUAGE: javascript
CODE:
waterMaterial.addToRenderList(skybox);
waterMaterial.addToRenderList(mesh1);
waterMaterial.addToRenderList(mesh2);
// ... etc.

----------------------------------------

TITLE: Alternative Mesh Creation Method in Babylon.js
DESCRIPTION: This snippet shows an alternative method to create meshes using BABYLON.Mesh.Create. It requires specifying required parameters and makes the scene parameter compulsory when used with optional parameters.

LANGUAGE: javascript
CODE:
const mesh = BABYLON.Mesh.Create<MeshType>(name, required_param1, required_param2, ..., scene, optional_parameter1, ........);

----------------------------------------

TITLE: Creating SpritePackedManager in Babylon.js
DESCRIPTION: Initializes a packed sprite manager for handling varying-sized sprites using a spritesheet and optional JSON data. Available from Babylon.js version 4.1.

LANGUAGE: javascript
CODE:
const mySpritePackedManager = new BABYLON.SpritePackedManager(name, spritesheet url, capacity, scene);

LANGUAGE: javascript
CODE:
const spm = new BABYLON.SpritePackedManager(name, spritesheet url, capacity, scene, atlasJSON);

----------------------------------------

TITLE: Beginning Animation in Babylon.js Scene
DESCRIPTION: Shows how to start an animation in a Babylon.js scene using the beginAnimation method, specifying the target object and the start and end frames.

LANGUAGE: javascript
CODE:
scene.beginAnimation(target, from, to);

----------------------------------------

TITLE: Getting Path Distances in Babylon.js
DESCRIPTION: Demonstrates how to get an array of distances between consecutive points on the path.

LANGUAGE: javascript
CODE:
const distances = path3d.getDistances();

----------------------------------------

TITLE: Implementing Noise Functions in GLSL for CloudBis Texture
DESCRIPTION: This GLSL code snippet defines helper functions for generating noise patterns used in the cloudBis procedural texture. It includes random number generation, noise calculation, and fractional Brownian motion (fbm) implementation.

LANGUAGE: GLSL
CODE:
float rand(vec2 n) {
	return fract(cos(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);
}

float noise(vec2 n) {
	const vec2 d = vec2(0.0, 1.0);
	vec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));
	return mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);
}

float fbm(vec2 n) {
	float total = 0.0, amplitude = 1.0;
	for (int i = 0; i < 4; i++) {
		total += noise(n) * amplitude;
		n += n;
		amplitude *= 0.5;
	}
	return total;
}

----------------------------------------

TITLE: Creating a NearMenu in Babylon.js
DESCRIPTION: Demonstrates how to create a NearMenu with multiple TouchHolographicButtons in Babylon.js 3D GUI.

LANGUAGE: javascript
CODE:
// Create the 3D UI manager
const manager = new BABYLON.GUI.GUI3DManager(scene);

// Let's add a slate
const near = new BABYLON.GUI.NearMenu("near");
manager.addControl(near);

const button0 = new BABYLON.GUI.TouchHolographicButton("button0");
button0.imageUrl = "./textures/IconFollowMe.png";
button0.text = "Button 0";
near.addButton(button0);

const button1 = new BABYLON.GUI.TouchHolographicButton("button1");
button1.imageUrl = "./textures/IconClose.png";
button1.text = "Button 1";
near.addButton(button1);

const button2 = new BABYLON.GUI.TouchHolographicButton("button2");
button2.imageUrl = "./textures/IconFollowMe.png";
button2.text = "Button 2";
near.addButton(button2);

----------------------------------------

TITLE: Basic Two Sphere Collision Detection in BabylonJS
DESCRIPTION: Shows two spheres and their paths, calculating collision points when they intersect. Start positions and velocities can be configured.

LANGUAGE: javascript
CODE:
PG: <Playground id="#A4HZTV" title="First Contact" description="Two moving spheres showing their paths and their positions at first contact."/>

----------------------------------------

TITLE: Rotating Mesh Around Pivot Point in Babylon.js
DESCRIPTION: Extends BABYLON.Mesh.prototype with a method to rotate a mesh around a specified pivot point. Takes a pivot point Vector3, rotation axis, and angle in radians as parameters. Handles both quaternion and Euler rotation representations.

LANGUAGE: javascript
CODE:
BABYLON.Mesh.prototype.rotateAroundPivot = function(pivotPoint, axis, angle) {
	if(!this._rotationQuaternion) {
		this._rq = BABYLON.Quaternion.RotationYawPitchRoll(this.rotation.y, this.rotation.x, this.rotation.z);
	}
	else this._rq = this.rotationQuaternion		
	var _p = new BABYLON.Quaternion(this.position.x - pivotPoint.x, this.position.y - pivotPoint.y, this.position.z - pivotPoint.z, 0);
	axis.normalize();
	var _q = BABYLON.Quaternion.RotationAxis(axis,angle);  //form quaternion rotation		
	var _qinv = BABYLON.Quaternion.Inverse(_q);	
	var _pdash = _q.multiply(_p).multiply(_qinv);
	this.position = new BABYLON.Vector3(pivotPoint.x + _pdash.x, pivotPoint.y + _pdash.y, pivotPoint.z + _pdash.z);
	this.rotationQuaternion = _q.multiply(this._rq);
}

mesh.rotateAroundPivot(new BABYLON.Vector3(1, 2, -1), new BABYLON.Axis.Y, Math.PI/4);

----------------------------------------

TITLE: Checking Visibility of a GUIGroup in BabylonJS
DESCRIPTION: Returns whether the GUIGroup is currently visible or not. This method can be used to determine the current visibility state of the group.

LANGUAGE: typescript
CODE:
isVisible() → void

----------------------------------------

TITLE: Defining Track Sections
DESCRIPTION: Demonstrates how to create track sections with various rotation options for lean and turn behaviors

LANGUAGE: javascript
CODE:
var section0 = new sectionData(0, options0);
var section1 = new sectionData(100, {});
var section2 = new sectionData(120, options2);
var section3 = new sectionData(220, { lean: 0, leanTwists: 0, leanWaves: 0, leanWaveAngle: 0 });
var section4 = new sectionData(240, { turn: 0, turnTwists: 0, turnWaves: 0, turnWaveAngle: 0 });

----------------------------------------

TITLE: Extracting Submeshes from Babylon.js Mesh
DESCRIPTION: This function takes a Babylon.js mesh and splits it into separate meshes based on its submeshes. It extracts and preserves vertex data including indices, normals, positions, and UV coordinates. Returns an array of new independent meshes if the input mesh has multiple submeshes, otherwise returns an array containing the original mesh.

LANGUAGE: javascript
CODE:
function deconstructMesh(mesh) {
    if (mesh.subMeshes.length > 1) {
        var otherVertexData = BABYLON.VertexData.ExtractFromMesh(mesh, true, true);
        var indices = otherVertexData.indices;
        var normals = otherVertexData.normals;
        var positions = otherVertexData.positions;
        var uvs = otherVertexData.uvs;
        var newMeshArray = [];
        for (let index = 0; index < mesh.subMeshes.length; index++) {
            var newVertexData = new BABYLON.VertexData();
            
            var newI = indices.slice(mesh.subMeshes[index].indexStart, mesh.subMeshes[index].indexStart+mesh.subMeshes[index].indexCount);
            var newN = normals.slice(mesh.subMeshes[index].verticesStart * 3, mesh.subMeshes[index].verticesStart * 3 + mesh.subMeshes[index].verticesCount * 3);
            var newP = positions.slice(mesh.subMeshes[index].verticesStart * 3, mesh.subMeshes[index].verticesStart * 3 + mesh.subMeshes[index].verticesCount * 3);
            var newU = uvs.slice(mesh.subMeshes[index].verticesStart * 2, mesh.subMeshes[index].verticesStart * 2 + mesh.subMeshes[index].verticesCount * 2);
            for (let subIndex = 0; subIndex < newI.length; subIndex++) {
                newI[subIndex] = newI[subIndex] - mesh.subMeshes[index].verticesStart;
            }

            newVertexData.indices = newI;
            newVertexData.normals = newN;
            newVertexData.positions = newP;
            newVertexData.uvs = newU;
            
            var meshSubclass = new BABYLON.Mesh(mesh.name+'-'+index, scene);
            
            newVertexData.applyToMesh(meshSubclass);
                    
            newMeshArray.push(meshSubclass);
        }
        return newMeshArray;
    } else {
        return [mesh];
    }

----------------------------------------

TITLE: Using IBehaviorAware Interface in Babylon.js
DESCRIPTION: This code snippet demonstrates the methods and properties available on objects that implement the IBehaviorAware interface in Babylon.js. These methods allow for adding, removing, and retrieving behaviors, as well as accessing the list of attached behaviors.

LANGUAGE: typescript
CODE:
interface IBehaviorAware {
  addBehavior(behavior: Behavior): void;
  removeBehavior(behavior: Behavior): void;
  getBehaviorByName(name: string): Behavior | null;
  readonly behaviors: Behavior[];
}

----------------------------------------

TITLE: Chained addRotation Method
DESCRIPTION: Shows how to chain multiple addRotation calls for sequential rotations in a single line of code.

LANGUAGE: javascript
CODE:
mesh.rotation.addRotation(Math.PI / 2, 0, 0).addRotation(0, 0, Math.PI / 3).addRotation(0, Math.PI / 8);

----------------------------------------

TITLE: Implementing Video Autoplay on User Interaction
DESCRIPTION: Handles video playback initialization on first user interaction with the scene to comply with browser autoplay policies.

LANGUAGE: javascript
CODE:
scene.onPointerDown = function () {
    videoTexture.video.play();
    scene.onPointerDown = null;
};

----------------------------------------

TITLE: Initializing CSG2 for Constructive Solid Geometry in Babylon.js
DESCRIPTION: Demonstrates how to initialize the CSG2 functionality in Babylon.js, which is required before using Constructive Solid Geometry operations. It shows different ways to initialize, including providing a custom Manifold library instance or URL.

LANGUAGE: javascript
CODE:
await BABYLON.InitializeCSG2Async();

LANGUAGE: javascript
CODE:
await BABYLON.InitializeCSG2Async({
  manifoldInstance: ...
  manifoldMeshInstance: ...
});

LANGUAGE: javascript
CODE:
await BABYLON.InitializeCSG2Async({
  manifoldUrl: "https://unpkg.com/manifold-3d@2.5.1"
});

----------------------------------------

TITLE: FOV Multiplier Adjustment in VideoDome
DESCRIPTION: Adjusts the field of view multiplier for the video dome. Value range is 0.0 to 2.0. Requires useDirectMapping to be false.

LANGUAGE: javascript
CODE:
videoDome.fovMultiplier = newValue;

----------------------------------------

TITLE: Rendering HTML Twins for Accessibility
DESCRIPTION: Shows how to generate HTML twin elements for screen reader accessibility using the HTMLTwinRenderer.

LANGUAGE: javascript
CODE:
ACCESSIBILITY.HTMLTwinRenderer.Render(scene);

----------------------------------------

TITLE: Initializing Water Material in Babylon.js
DESCRIPTION: This snippet demonstrates how to create a ground mesh, initialize a water material, and assign it to the ground. It also shows how to set the bump texture for the water material.

LANGUAGE: javascript
CODE:
var ground = BABYLON.MeshBuilder.CreateGround("ground", { width: 512, height: 512, subdivisions: 32 }, scene);

var waterMaterial = new BABYLON.WaterMaterial("water_material", scene);
waterMaterial.bumpTexture = new BABYLON.Texture("bump.png", scene); // Set the bump texture

ground.material = waterMaterial;

----------------------------------------

TITLE: Adding Color Data to Existing Mesh in Babylon.js
DESCRIPTION: This snippet demonstrates how to add color data to an existing mesh that doesn't have color information. It creates a color array and sets it using setVerticesData.

LANGUAGE: javascript
CODE:
var colors = mesh.getVerticesData(BABYLON.VertexBuffer.ColorKind);
if(!colors) {
    colors = [];

    var positions = mesh.getVerticesData(BABYLON.VertexBuffer.PositionKind);

    for(let p = 0; p < positions.length / 3; p++) {
        colors.push(Math.random(), Math.random(), Math.random(), 1);
    }
}

mesh.setVerticesData(BABYLON.VertexBuffer.ColorKind, colors);

----------------------------------------

TITLE: Using BoneIKController in Babylon.js
DESCRIPTION: Demonstrates how to use the BoneIKController for inverse kinematics with two bones.

LANGUAGE: javascript
CODE:
const target = BABYLON.MeshBuilder.CreateSphere("", { diameter: 5 }, scene);
const poleTarget = BABYLON.MeshBuilder.CreateSphere("", { diameter: 2.5 }, scene);

poleTarget.parent = characterMesh;

const ikCtrl = new BABYLON.BoneIKController(characterMesh, forearmBone, { targetMesh: target, poleTargetMesh: poleTarget, poleAngle: Math.PI });

scene.registerBeforeRender(function () {
  ikCtrl.update();
});

----------------------------------------

TITLE: Beginning Looping Animation in Babylon.js
DESCRIPTION: Demonstrates how to start a looping animation in Babylon.js by setting the fourth parameter of beginAnimation to true.

LANGUAGE: javascript
CODE:
scene.beginAnimation(target, from, to, true);

----------------------------------------

TITLE: Creating Basic Tiled Box in Babylon.js
DESCRIPTION: Creates a tiled box mesh using MeshBuilder with customizable options for size, tile properties, and appearance.

LANGUAGE: javascript
CODE:
const tiledBox = BABYLON.MeshBuilder.CreateTiledBox("tiled box", options, scene);

----------------------------------------

TITLE: Initializing Worker with Offscreen Canvas
DESCRIPTION: Creates a new Web Worker and transfers the offscreen canvas to it using postMessage.

LANGUAGE: javascript
CODE:
var worker = new Worker("worker.js");
worker.postMessage({ canvas: offscreen }, [offscreen]);

----------------------------------------

TITLE: Creating World Axes Viewer in Babylon.js
DESCRIPTION: This snippet demonstrates how to create a world axes viewer using the AxesViewer class from Babylon.js Debug tools. It takes the scene and the desired length of the axes as parameters.

LANGUAGE: javascript
CODE:
const axes = new BABYLON.Debug.AxesViewer(scene, length_of_axes)

----------------------------------------

TITLE: Setting Visibility of GUIFieldset in BabylonJS
DESCRIPTION: Method to set the visibility of the GUIFieldset. It takes a boolean for visibility and an optional fade parameter.

LANGUAGE: javascript
CODE:
setVisible(bool, fade) → void

----------------------------------------

TITLE: Preventing Particle Escape in BabylonJS Collision Simulation
DESCRIPTION: This code implements a method to prevent particles from escaping the containment box by reversing their velocity when they are close to or pass through a wall.

LANGUAGE: javascript
CODE:
// Code not provided in the original text, but referenced as Playground id=#MYGV6#4

----------------------------------------

TITLE: Ray Intersection Hit Counter
DESCRIPTION: Counts the number of ray intersections with the mesh by incrementally moving the ray origin point.

LANGUAGE: javascript
CODE:
var hitCount = 0;
var pickInfo = ray.intersectsMesh(this);
while (pickInfo.hit) {	
	hitCount++;
	pickInfo.pickedPoint.addToRef(direction.scale(0.00000001), point);
	ray.origin  = point;
	pickInfo = ray.intersectsMesh(this);
}

----------------------------------------

TITLE: Manually Closing a Ribbon for Texture Stretching in Babylon.js
DESCRIPTION: This code demonstrates how to manually close a ribbon by re-pushing the first path to the end of the pathArray, allowing for continuous texture stretching.

LANGUAGE: javascript
CODE:
paths.push(paths[0]);
var ribbon = BABYLON.MeshBuilder.CreateRibbon("ribbon", { pathArray: paths }, scene);

----------------------------------------

TITLE: Optimized Particle Update Implementation
DESCRIPTION: Improved implementation that reuses variables and avoids object creation within the update loop, reducing garbage collection overhead.

LANGUAGE: javascript
CODE:
let accel = new BABYLON.Vector3(0, 0.5, 0);
SPS.updateParticle = function(particle) {
  particle.velocity.addInPlace(accel);
  // ...
};

----------------------------------------

TITLE: Combined Shape Addition and Mesh Digestion in Babylon.js
DESCRIPTION: Demonstrates combining addShape() and digest() methods to create particles from both predefined shapes and mesh facets. Shows multiple operations in sequence.

LANGUAGE: javascript
CODE:
var model = BABYLON.MeshBuilder.CreateTorusKnot("s", { radius: 20, tube: 6, tubularSegments: 64, radialSegments: 128 }, scene);
SPS.addShape(boxModel, 50);
SPS.digest(model);
SPS.addShape(sphereModel, 20);
SPS.digest(model, { number: 10 });
model.dispose();
sphereModel.dispose();
boxModel.dispose();
SPS.buildMesh();

----------------------------------------

TITLE: Implementing a Triangle Predicate for Ray Picking in Babylon.js
DESCRIPTION: Demonstrates how to use a triangle predicate to filter which triangles are considered for ray picking. This example filters out triangles not facing the camera.

LANGUAGE: JavaScript
CODE:
scene.pick(scene.pointerX, scene.pointerY, null, false, null, (p0, p1, p2, ray) => {
  var p0p1 = p0.subtract(p1);
  var p2p1 = p2.subtract(p1);
  var normal = BABYLON.Vector3.Cross(p0p1, p2p1);
  return BABYLON.Vector3.Dot(ray.direction, normal) < 0;
});

----------------------------------------

TITLE: Configuring Pixel Perfect Sprites in Babylon.js
DESCRIPTION: Demonstrates setting up pixel-perfect rendering for sprites using SpriteManagerOptions and SpriteRendererOptions interfaces.

LANGUAGE: typescript
CODE:
export interface SpriteManagerOptions {
    spriteRendererOptions: SpriteRendererOptions;
}

LANGUAGE: typescript
CODE:
export interface SpriteRendererOptions {
    pixelPerfect?: boolean;
}

LANGUAGE: javascript
CODE:
const spriteManagerPlayer = new BABYLON.SpriteManager(
    "playerManager",
    "sprite_url.png",
    3,
    {
        width: 32,
        height: 32,
    },
    scene,
    0.003,
    undefined,
    undefined,
    undefined,
    {
        spriteRendererOptions: {
            pixelPerfect: true
        }
    }
);

----------------------------------------

TITLE: Configuring Parallax Mapping in Babylon.js
DESCRIPTION: This snippet demonstrates how to enable and configure parallax mapping in Babylon.js materials. It shows the three main properties used for parallax mapping: useParallax, useParallaxOcclusion, and parallaxScaleBias.

LANGUAGE: javascript
CODE:
material.useParallax = true;
material.useParallaxOcclusion = true;
material.parallaxScaleBias = 0.1;

----------------------------------------

TITLE: Getting GUIProgress Value in BabylonJS
DESCRIPTION: Method to retrieve the current value of the progress bar GUI element.

LANGUAGE: javascript
CODE:
getValue(int) → void

----------------------------------------

TITLE: Declaring Storage Texture in WGSL for Babylon.js
DESCRIPTION: Demonstrates the syntax for declaring a storage texture in WGSL for use with Babylon.js ShaderMaterial.

LANGUAGE: wgsl
CODE:
var storageTexture : texture_storage_2d<rgba8unorm,write>;

----------------------------------------

TITLE: Attaching Pipeline to Scene and Camera in Babylon.js
DESCRIPTION: Adds the pipeline to the scene's manager and attaches it to the specified camera for rendering.

LANGUAGE: javascript
CODE:
scene.postProcessRenderPipelineManager.addPipeline(standardPipeline);
scene.postProcessRenderPipelineManager.attachCamerasToRenderPipeline("standardPipeline", camera);

----------------------------------------

TITLE: Creating and Updating Line Systems with MeshBuilder in Babylon.js
DESCRIPTION: Demonstrates how to create a new line system and update an existing one using MeshBuilder.CreateLineSystem(). The 'lines' option is required, and 'instance' is used for updates.

LANGUAGE: javascript
CODE:
// creates an instance of a line system
let lineSystem = BABYLON.MeshBuilder.CreateLineSystem("lineSystem", {lines: myArray}, scene);

// updates the existing instance of lineSystem : no need for the parameter scene here
lineSystem = BABYLON.MeshBuilder.CreateLineSystem("lineSystem", {lines: myArray, instance: lineSystem});

----------------------------------------

TITLE: Applying Force and Impulse in Babylon.js
DESCRIPTION: Demonstrates how to apply force and impulse to a physics body in Babylon.js. It shows the syntax for both methods and mentions the ability to target specific instances when using Thin Instances.

LANGUAGE: javascript
CODE:
body.applyForce(
    new BABYLON.Vector3(0, 10, 0), // direction and magnitude of the applied force
    new BABYLON.Vector3(0, 0, 0) // point in WORLD space where the force will be applied    
);

// .... OR .....

body.applyImpulse(
    new BABYLON.Vector3(0, 10, 0), // direction and magnitude of the applied impulse
    new BABYLON.Vector3(0, 0, 0) // point in WORLD space where the impulse will be applied    
);

// Apply a force to the first instance ONLY
body.applyForce(new BABYLON.Vector3(100, 0, 0), new BABYLON.Vector3(0, 0, 0), 0);

----------------------------------------

TITLE: Initializing Lava Material in Babylon.js
DESCRIPTION: Creates a ground mesh and applies lava material with required noise and diffuse textures. The material requires sufficient mesh subdivisions to avoid artifacts in vertex position updates.

LANGUAGE: javascript
CODE:
var ground = BABYLON.MeshBuilder.CreateGround("ground", { width: 512, height: 512, subdivisions: 32 }, scene);

var lavaMaterial = new BABYLON.LavaMaterial("lava", scene);
lavaMaterial.noiseTexture = new BABYLON.Texture("cloud.png", scene); // Set the bump texture
lavaMaterial.diffuseTexture = new BABYLON.Texture("lavatile.jpg", scene); // Set the diffuse texture

ground.material = lavaMaterial;

----------------------------------------

TITLE: Enabling HTTP Range Requests in Babylon.js GLTF Loader
DESCRIPTION: Configure the GLTF loader to use HTTP range requests for partial file downloading.

LANGUAGE: javascript
CODE:
BABYLON.SceneLoader.OnPluginActivatedObservable.addOnce(function (loader) {
  if (loader.name === "gltf") {
    loader.useRangeRequests = true;
  }
});

----------------------------------------

TITLE: Accessing Facet Positions in Babylon.js
DESCRIPTION: Shows different methods to retrieve facet positions in both world and local coordinates.

LANGUAGE: javascript
CODE:
const pos = mesh.getFacetPosition(50);
const pos2 = BABYLON.Vector3.Zero();
mesh.getFacetPositionToRef(50, pos2);
const localPositions = mesh.getFacetLocalPositions();
const localPos = localPositions[50];

----------------------------------------

TITLE: Manual Attachment of SSAO Pipeline to Cameras in Babylon.js
DESCRIPTION: Demonstrates how to manually attach the SSAO rendering pipeline to cameras using the scene's postProcessRenderPipelineManager. This method provides more control over pipeline attachment.

LANGUAGE: javascript
CODE:
const ssao = new BABYLON.SSAORenderingPipeline("ssaopipeline", scene, 0.75);
scene.postProcessRenderPipelineManager.attachCamerasToRenderPipeline("ssaopipeline", cameras);

----------------------------------------

TITLE: Tile Alignment Constants in Babylon.js
DESCRIPTION: Constants for vertical and horizontal alignment of tiles on box faces.

LANGUAGE: javascript
CODE:
BABYLON.Mesh.CENTER,
BABYLON.Mesh.TOP,
BABYLON.Mesh.BOTTOM

LANGUAGE: javascript
CODE:
BABYLON.Mesh.CENTER,
BABYLON.Mesh.LEFT,
BABYLON.Mesh.RIGHT

----------------------------------------

TITLE: Creating a Tile ID in Babylon.js
DESCRIPTION: Demonstrates how to create a tile ID using a Vector2 object in Babylon.js. The tile ID represents the position of a tile in the sprite map grid.

LANGUAGE: javascript
CODE:
tileID = new Vector2(2, 6);

----------------------------------------

TITLE: Point Inside Mesh Complete Implementation
DESCRIPTION: Complete function implementation that determines if a point is inside a mesh using ray casting technique and hit count analysis.

LANGUAGE: javascript
CODE:
BABYLON.Mesh.prototype.pointIsInside = function (point) {    
	var boundInfo = this.getBoundingInfo();
	var max = boundInfo.maximum;
	var min = boundInfo.minimum;
	var diameter = 2 * boundInfo.boundingSphere.radius;
	if(point.x < min.x || point.x > max.x) {
		return false;
	}
	if(point.y < min.y || point.y > max.y) {
		return false;
	}
	if(point.z < min.z || point.z > max.z) {
		return false;
	}

	var pointFound = false;
	var d = 0;
	var hitCount = 0;
	var gap = 0;
	var distance = 0;
	var ray = new BABYLON.Ray(BABYLON.Vector3.Zero(), BABYLON.Axis.X, diameter);;
	var pickInfo;
	var direction = point.clone();
    var refPoint = point.clone();

	
	hitCount = 0;
	ray.origin = refPoint;
    ray.direction = direction;
    ray.distance = diameter;		
	pickInfo = ray.intersectsMesh(this);
	while (pickInfo.hit) {	
		hitCount++;
		pickInfo.pickedPoint.addToRef(direction.scale(0.00000001), refPoint);
		ray.origin  = refPoint;
		pickInfo = ray.intersectsMesh(this);
	}	
	if((hitCount % 2) === 1) {
		pointFound = true;
	}
	
	return pointFound;
};

----------------------------------------

TITLE: Post Process Texture Sampler Optimization
DESCRIPTION: Configuration for optimizing post-process performance when manually setting textureSampler in onApply observer. Setting externalTextureSamplerBinding to true improves performance.

LANGUAGE: javascript
CODE:
postProcess.externalTextureSamplerBinding = true;

----------------------------------------

TITLE: Implementing Navigation Mesh Component in Babylon.js
DESCRIPTION: Example implementation of a NavMeshComponent class that handles navigation mesh functionality including point-and-click navigation for AI agents.

LANGUAGE: typescript
CODE:
module PROJECT {
    export class NavMeshComponent extends BABYLON.MeshComponent {
        private navmesh:BABYLON.AbstractMesh = null;
        public constructor(owner: BABYLON.AbstractMesh, scene: BABYLON.Scene, tick: boolean = true, propertyBag: any = {}) {
            super(owner, scene, tick, propertyBag);
        }
        protected start() :void {
            this.navmesh = this.manager.getNavigationMesh();
            if (this.navmesh) {
                const minimoi = BABYLON.MeshBuilder.CreateBox("MiniMoi", {size: 0.5}, this.scene);
                minimoi.material = new BABYLON.StandardMaterial("MoiMaterial", this.scene);
                (<BABYLON.StandardMaterial>minimoi.material).diffuseColor = new BABYLON.Color3(1., 0., 0);
                minimoi.position = new BABYLON.Vector3(0, 0.25, 0);

                // Setup point and click demo navigation
                const canvas = document.getElementById("cvs");
                canvas.addEventListener('click', (evt)=> {
                    const pickingInfo = this.scene.pick(this.scene.pointerX, this.scene.pointerY, (mesh) => { return (mesh === this.navmesh); });
                    if (pickingInfo.hit) {
                        const navpoint = pickingInfo.pickedPoint;
                        const path = this.manager.findNavigationPath(minimoi.position, navpoint);
                        if (path != null) {
                            this.manager.moveNavigationAgent(minimoi, path, 5.0);
                        }
                    }
                });
            }
        }
    }
}

----------------------------------------

TITLE: Creating a GUIButton in BabylonJS
DESCRIPTION: Creates a new GUIButton with specified parameters. The button can be customized with various options and attached to a GUI manager.

LANGUAGE: javascript
CODE:
new GUIButton(id, options, guimanager, callback, append)

----------------------------------------

TITLE: Checking Visibility of GUIColor in BabylonJS
DESCRIPTION: Method to check if the GUIColor element is currently visible. It returns a boolean indicating the visibility state.

LANGUAGE: typescript
CODE:
isVisible() → void

----------------------------------------

TITLE: Declaring SceneManager Class for Prefab Management in Babylon.js
DESCRIPTION: This TypeScript code snippet declares the SceneManager class in Babylon.js, which provides methods for managing prefabs at runtime. It includes functions to check for prefab existence, retrieve prefab meshes, and instantiate prefabs in the scene.

LANGUAGE: typescript
CODE:
declare module BABYLON {
    class SceneManager {

        /** Checks the scene has the specified prefab mesh. */
        hasPrefabMesh(prefabName: string): boolean;

        /** Gets ths the raw prefab mesh from scene. */
        getPrefabMesh(prefabName: string): BABYLON.Mesh;

        /** Instantiates the specfied prefab object into scene. */
        instantiatePrefab(prefabName: string, cloneName: string, newPosition?: BABYLON.Vector3, newRotation?: BABYLON.Vector3, newScaling?: BABYLON.Vector3, newParent?: Node): BABYLON.Mesh;
    }
}

----------------------------------------

TITLE: Rotating a Bone in Babylon.js
DESCRIPTION: Demonstrates how to rotate a bone around an axis in world space.

LANGUAGE: javascript
CODE:
bone.rotate(axis, angle, BABYLON.Space.WORLD, mesh);

----------------------------------------

TITLE: Sharing Animation Data Between SpriteMaps
DESCRIPTION: Demonstrates how to reuse animation data between multiple SpriteMap instances by copying the animation map.

LANGUAGE: javascript
CODE:
spriteMap1.animationMap = spriteMap0.animationMap

----------------------------------------

TITLE: Removing Mesh Highlight
DESCRIPTION: Shows how to remove highlighting from a previously highlighted mesh.

LANGUAGE: javascript
CODE:
const hl = new BABYLON.HighlightLayer("hl1", scene);
hl.addMesh(sphere, BABYLON.Color3.Green());
hl.removeMesh(sphere);

----------------------------------------

TITLE: Setting Ambient Color in Babylon.js
DESCRIPTION: Shows how to set the ambient color of a Babylon.js scene, which affects the overall lighting and material calculations. The ambient color is set using a Color3 object.

LANGUAGE: javascript
CODE:
scene.ambientColor = new BABYLON.Color3(0.3, 0.3, 0.3);

----------------------------------------

TITLE: Setting Ambient Color in Babylon.js
DESCRIPTION: Shows how to set the ambient color of a Babylon.js scene, which affects the overall lighting and material calculations. The ambient color is set using a Color3 object.

LANGUAGE: javascript
CODE:
scene.ambientColor = new BABYLON.Color3(0.3, 0.3, 0.3);

----------------------------------------

TITLE: Creating Box Emitter in Babylon.js
DESCRIPTION: Initializes a box-shaped particle emitter with configurable directions and emission box dimensions using Vector3 parameters.

LANGUAGE: javascript
CODE:
var boxEmitter = particleSystem.createBoxEmitter(new BABYLON.Vector3(-7, 8, 3), new BABYLON.Vector3(7, 8, -3), new BABYLON.Vector3(-1, 0, 0), new BABYLON.Vector3(1, 0, 0));

boxEmitter.direction1 = new BABYLON.Vector3(-5, 2, 1); 
boxEmitter.direction2 = new BABYLON.Vector3(5, 2, 1);  
boxEmitter.minEmitBox = new BABYLON.Vector3(-2, -3, -4);  
boxEmitter.maxEmitBox = new BABYLON.Vector3(2, 3, 4);

----------------------------------------

TITLE: Basic HTML Setup - Babylon.js Viewer
DESCRIPTION: Basic HTML structure for initializing the Babylon.js viewer with custom styling.

LANGUAGE: html
CODE:
<html>
  <head>
    <title>Recreating the default configuration for Babylon.js viewer</title>
    <style>
      babylon {
        width: 800px;
        height: 500px;
      }
    </style>
  </head>
  <body>
    <babylon extends="none"> </babylon>
    <script src="https://preview.babylonjs.com/viewer/babylon.viewer.js"></script>
  </body>
</html>

----------------------------------------

TITLE: Creating Mirror Surface with Reflection Plane from Mesh
DESCRIPTION: Creates a mirror surface using MirrorTexture by generating a reflection plane from a mesh's geometry and normal vector. Includes mesh creation, material setup, and mirror plane configuration.

LANGUAGE: JavaScript
CODE:
// Create, position, and rotate a flat mesh surface.
const mesh = BABYLON.MeshBuilder.CreatePlane("mirrorMesh", {width: 5, height: 5}, scene);
mesh.position = new BABYLON.Vector3(0, 0, 4);
mesh.rotation = new BABYLON.Vector3(Math.PI/4, Math.PI/6, Math.PI/8);

// Create the reflective material for the mesh.
mesh.material = new BABYLON.StandardMaterial("mirrorMaterial", scene);
mesh.material.reflectionTexture = new BABYLON.MirrorTexture("mirrorTexture", 512, scene, true);

// Get a normal vector from the mesh and invert it to create the mirror plane.
mesh.material.reflectionTexture.mirrorPlane = BABYLON.Plane.FromPositionAndNormal(
    mesh.position, mesh.getFacetNormal(0).scale(-1));
mesh.material.reflectionTexture.renderList = [... list of meshes ...];

----------------------------------------

TITLE: Creating and Configuring Marble Procedural Texture in Babylon.js
DESCRIPTION: This snippet demonstrates how to create a marble material using the MarbleProceduralTexture in Babylon.js. It shows how to set the number of tiles in height and width for the texture.

LANGUAGE: javascript
CODE:
var marbleMaterial = new BABYLON.StandardMaterial("marbleMat", scene);
var marbleTexture = new BABYLON.MarbleProceduralTexture("marbleTex", 512, scene);
marbleTexture.numberOfTilesHeight = 5;
marbleTexture.numberOfTilesWidth = 5;
marbleMaterial.ambientTexture = marbleTexture;

----------------------------------------

TITLE: Customizing Edge Detection Parameters in Babylon.js
DESCRIPTION: This code shows how to adjust the width, intensity, and color of the edge detection effect in Babylon.js.

LANGUAGE: javascript
CODE:
// Creates the post process with custom width, intensity, color
edgeDetectionPostProcess.edgeWidth = 1; // default is 1.0 
edgeDetectionPostProcess.edgeIntensity = 1;
edgeDetectionPostProcess.edgeColor = BABYLON.Color3.Red();

----------------------------------------

TITLE: Adjusting SSR Strength in Babylon.js
DESCRIPTION: Modifies the strength of specular/reflectivity in the SSR post process.

LANGUAGE: javascript
CODE:
ssr.strength = 2;

----------------------------------------

TITLE: Velocity and Speed Control in Babylon.js
DESCRIPTION: Methods for controlling particle velocity and speed limits over lifetime. Includes velocity gradients and speed limiting functionality.

LANGUAGE: javascript
CODE:
particleSystem.addVelocityGradient(0, 0.5);
particleSystem.addVelocityGradient(1, 3);

particleSystem.limitVelocityDamping = 0.1;
particleSystem.addLimitVelocityGradient(0, 10);
particleSystem.addLimitVelocityGradient(1, 0.1);

----------------------------------------

TITLE: Configuring Reflective PBR Material
DESCRIPTION: Shows how to create a reflective PBR material by adjusting metallic and roughness values and adding an environment texture.

LANGUAGE: javascript
CODE:
pbr.baseColor = new BABYLON.Color3(1.0, 0.766, 0.336);
pbr.metallic = 1.0;
pbr.roughness = 0.4;
pbr.environmentTexture = BABYLON.CubeTexture.CreateFromPrefilteredData("/textures/environment.dds", scene);

----------------------------------------

TITLE: Configuring Puppeteer for GPU Support
DESCRIPTION: Sets up Puppeteer with custom arguments to enable GPU rendering and desktop graphics support.

LANGUAGE: javascript
CODE:
// Don't disable the gpu
var args = puppeteer.defaultArgs().filter(arg => arg !== '--disable-gpu');
// Run in non-headless mode
args = args.filter(arg => arg !== '--headless');
// Use desktop graphics
args.push("--use-gl=desktop")
// Lanch pupeteer with custom arguments
const browser = await puppeteer.launch({
    headless: false,
    ignoreDefaultArgs: true,
    args
});

----------------------------------------

TITLE: Ray Creation for Point-in-Mesh Detection
DESCRIPTION: Creates a ray using the mesh's bounding sphere diameter for intersection testing.

LANGUAGE: javascript
CODE:
var diameter = 2 * boundInfo.boundingSphere.radius;
ray = new BABYLON.Ray(point, direction, diameter);

----------------------------------------

TITLE: Global Script Event Handlers in Babylon.js
DESCRIPTION: Implementation of global event handlers for window load and scene ready events.

LANGUAGE: javascript
CODE:
BABYLON.SceneManager.OnWindowLoad(() => {
  // Global Page Loaded Handler
});

BABYLON.SceneManager.ExecuteWhenReady((scene: BABYLON.Scene, manager: BABYLON.SceneManager) => {
  // Global Scene Ready Handler
});

----------------------------------------

TITLE: Installing Babylon.js Viewer via NPM
DESCRIPTION: Command to install the Babylon.js viewer package through NPM package manager.

LANGUAGE: javascript
CODE:
npm install --save babylonjs-viewer

----------------------------------------

TITLE: Declaring Xbox Live Management Functions in Babylon.js SceneManager
DESCRIPTION: This snippet declares various methods in the BABYLON.SceneManager class for managing Xbox Live functionality, including user sign-in, profile loading, and context management.

LANGUAGE: typescript
CODE:
declare module BABYLON {
    class SceneManager {
        static IsWindows(): boolean;
        static IsXboxOne(): boolean;
        static IsXboxLive(): boolean;
        static IsXboxLivePluginEnabled(): boolean;
        static IsXboxLiveUserSignedIn(systemUser?: Windows.System.User, player?: BABYLON.PlayerNumber): boolean;
        static XboxLiveUserSignIn(player?: BABYLON.PlayerNumber, oncomplete?: (result: Microsoft.Xbox.Services.System.SignInResult) => void, onerror?: (error: any) => void, onprogress?: (progress: any) => void): void;
        static XboxLiveUserSilentSignIn(player?: BABYLON.PlayerNumber, oncomplete?: (result: Microsoft.Xbox.Services.System.SignInResult) => void, onerror?: (error: any) => void, onprogress?: (progress: any) => void): Windows.Foundation.Projections.Promise<void>;
        static XboxLiveUserDialogSignIn(player?: BABYLON.PlayerNumber, oncomplete?: (result: Microsoft.Xbox.Services.System.SignInResult) => void, onerror?: (error: any) => void, onprogress?: (progress: any) => void): Windows.Foundation.Projections.Promise<void>;
        static LoadXboxLiveUserProfile(player?: BABYLON.PlayerNumber, oncomplete?: (result: Microsoft.Xbox.Services.Social.XboxUserProfile) => void, onerror?: (error: any) => void, onprogress?: (progress: any) => void): Windows.Foundation.Projections.Promise<void>;
        static GetXboxLiveUser(player?: BABYLON.PlayerNumber): Microsoft.Xbox.Services.System.XboxLiveUser;
        static GetXboxLiveSystemUser(systemUser: Windows.System.User, player?: BABYLON.PlayerNumber): Microsoft.Xbox.Services.System.XboxLiveUser;
        static GetXboxLiveUserContext(player?: BABYLON.PlayerNumber): Microsoft.Xbox.Services.XboxLiveContext;
        static ResetXboxLiveUserContext(player?: BABYLON.PlayerNumber): void;
        static GetXboxLiveContextProperty(name: any): any;
        static SetXboxLiveContextProperty(name: any, property: any): void;
        static ResetXboxLivePropertyContexts(): void;
        static SetXboxLiveSignOutHandler(handler?: (result: Microsoft.Xbox.Services.System.SignOutCompletedEventArgs) => void): void;
    }
}

----------------------------------------

TITLE: Using Screen Coverage for LOD in Babylon.js
DESCRIPTION: This snippet demonstrates how to use screen coverage instead of distance for LOD in Babylon.js. It shows how to enable screen coverage-based LOD and add LOD levels using screen coverage ratios.

LANGUAGE: javascript
CODE:
knot00.useLODScreenCoverage = true;

knot00.addLODLevel(0.7, knot01);
knot00.addLODLevel(0.1, knot02);
knot00.addLODLevel(0.01, knot03);

----------------------------------------

TITLE: Creating Simple Quadratic Path
DESCRIPTION: Generates points for a quadratic curve y = x² at z = 6

LANGUAGE: javascript
CODE:
const path = [];
for (let x = -5; x <= 5; x++) {
    let y = x * x
    path.push(new BABYLON.Vector3(x, y, 6))
}

----------------------------------------

TITLE: Setting Fog Parameters in ShaderMaterial for Babylon.js
DESCRIPTION: This JavaScript snippet demonstrates how to set fog parameters in the onBind callback of a ShaderMaterial. It sets fog information and color based on the scene's fog properties.

LANGUAGE: JavaScript
CODE:
shaderMaterial.onBind = function () {
  const effect = shaderMaterial.getEffect();
  effect.setFloat4("vFogInfos", scene.fogMode, scene.fogStart, scene.fogEnd, scene.fogDensity);
  effect.setColor3("vFogColor", scene.fogColor);
};

----------------------------------------

TITLE: Creating Parametric Meshes with Mesh.Create in Babylon.js
DESCRIPTION: This snippet shows an alternative method for creating parametric meshes using the Mesh.Create and Mesh.Extrude methods in Babylon.js. This approach requires specifying required parameters and optional parameters separately.

LANGUAGE: javascript
CODE:
const mesh = BABYLON.Mesh.Create<MeshType>(name, required_param1, required_param2, ..., scene, optional_parameter1, ........);
const mesh = BABYLON.Mesh.Extrude<MeshType>(name, required_param1, required_param2, ..., scene, optional_parameter1, ........);

----------------------------------------

TITLE: Creating Sphere Emitter in Babylon.js
DESCRIPTION: Creates spherical particle emitters with options for regular and directed emission patterns. Includes radius and direction configuration.

LANGUAGE: javascript
CODE:
var sphereEmitter = particleSystem.createSphereEmitter(1.2);

var sphereEmitter = particleSystem.createDirectedSphereEmitter(1.2, new BABYLON.Vector3(1, 1, 1), new BABYLON.Vector3(2, 8, 2));

sphereEmitter.radius = 3.4;
sphereEmitter.direction1 = new BABYLON.Vector3(-5, 2, 1); 
sphereEmitter.direction2 = new BABYLON.Vector3(5, 2, -1);

----------------------------------------

TITLE: Loading NodeGeometry from Snippet
DESCRIPTION: Demonstrates how to load a NodeGeometry from a snippet server.

LANGUAGE: javascript
CODE:
const geometry = await BABYLON.NodeGeometry.ParseFromSnippetAsync("IJA02K#11");

----------------------------------------

TITLE: Page Metadata in YAML
DESCRIPTION: Example of YAML metadata configuration for documentation pages including title, description, and related content

LANGUAGE: yaml
CODE:
---
title: Node Material
image: /img/pageImages/nodeMaterial.jpg
description: The Node Material is a simple, highly customizable material
keywords: shaders, glsl, node editor
further-reading:
  - title: Dedicated NME Forum Examples
    url: https://forum.babylonjs.com/t/node-materials-examples/6048
---

----------------------------------------

TITLE: Setting Babylon.js Texture as Non-Blocking
DESCRIPTION: This code shows how to set a texture as non-blocking in Babylon.js. Non-blocking textures allow rendering to proceed even if the texture hasn't fully loaded, using a placeholder instead.

LANGUAGE: javascript
CODE:
texture.isBlocking = false;

----------------------------------------

TITLE: Enabling Edge Rendering in Babylon.js
DESCRIPTION: This snippet demonstrates how to enable edge rendering on a box mesh, set the edge width, and define the edge color. It uses the enableEdgesRendering method and sets edgesWidth and edgesColor properties.

LANGUAGE: javascript
CODE:
const box = BABYLON.MeshBuilder.CreateBox("box1", { size: 2 }, scene);
box.enableEdgesRendering();
box.edgesWidth = 4.0;
box.edgesColor = new BABYLON.Color4(0, 0, 1, 1);

----------------------------------------

TITLE: Creating Scene Selection Octree in Babylon.js
DESCRIPTION: Creates or updates a scene-level octree for optimizing mesh selection during rendering. Parameters control the capacity (max meshes per leaf) and maximum depth of the octree structure.

LANGUAGE: javascript
CODE:
var octree = scene.createOrUpdateSelectionOctree(capacity, maxDepth)

----------------------------------------

TITLE: Initializing Grass Procedural Texture in Babylon.js
DESCRIPTION: Creates a standard material with grass procedural texture in Babylon.js. The texture allows customization of grass and ground colors through parameters, with a configurable resolution of 256 pixels.

LANGUAGE: javascript
CODE:
var grassMaterial = new BABYLON.StandardMaterial("grassMat", scene);
var grassTexture = new BABYLON.GrassProceduralTexture("grassTex", 256, scene);
grassMaterial.ambientTexture = grassTexture;

----------------------------------------

TITLE: Changing Edge Detection Render Mode in Babylon.js
DESCRIPTION: This snippet demonstrates how to change the render mode of the Edge Detection post-process in Babylon.js.

LANGUAGE: javascript
CODE:
// General :0, Normal: 1, Depth: 2, Only Outline: 3 
edgeDetectionPostProcess.renderMode = 3; // default is 1 

----------------------------------------

TITLE: Enabling Automatic Thickness Computation
DESCRIPTION: Shows how to enable automatic thickness computation for more accurate reflections. This mode calculates thickness using additional depth rendering of back faces.

LANGUAGE: JavaScript
CODE:
ssr.enableAutomaticThicknessComputation = true;

----------------------------------------

TITLE: Creating Extruded Shapes with Mesh in Babylon.js
DESCRIPTION: Shows how to create extruded shapes using the Mesh.ExtrudeShape() method in Babylon.js. It includes both basic and advanced usage with optional parameters.

LANGUAGE: javascript
CODE:
let extrusion = BABYLON.Mesh.ExtrudeShape(name, shape, path, scale, rotation, cap, scene);
let extrusion = BABYLON.Mesh.ExtrudeShape(name, shape, path, scale, rotation, cap, scene, updatable, sideOrientation, instance); //optional parameters after scene

----------------------------------------

TITLE: Applying Opacity Texture in Babylon.js
DESCRIPTION: Demonstrates how to add an opacity texture to a standard material in Babylon.js. This allows for creating materials with varying levels of transparency.

LANGUAGE: javascript
CODE:
const myMaterial = new BABYLON.StandardMaterial("myMaterial", scene);
myMaterial.opacityTexture = new BABYLON.Texture("PATH TO OPACITY MAP", scene);

----------------------------------------

TITLE: Intersection Trigger Setup in Babylon.js
DESCRIPTION: Demonstrates how to set up an intersection trigger between meshes with precise intersection checking.

LANGUAGE: javascript
CODE:
mesh.actionManager.registerAction(
  new BABYLON.SetValueAction(
    {
      trigger: BABYLON.ActionManager.OnIntersectionEnterTrigger,
      parameter: {
        mesh: otherMesh,
        usePreciseIntersection: true,
      },
    },
    mesh,
    "scaling",
    new BABYLON.Vector3(1.2, 1.2, 1.2),
  ),
);

----------------------------------------

TITLE: Using Force Shared Vertices in Babylon.js 4.0+
DESCRIPTION: Simple method call to force mesh vertices to share positions and normals. This is the recommended approach for Babylon.js version 4.0 and newer.

LANGUAGE: javascript
CODE:
mesh.forceSharedVertices();

----------------------------------------

TITLE: Building House from Floor Plan in BabylonJS
DESCRIPTION: Function to construct a 3D house mesh from wall specifications including doors and windows. Takes wall dimensions, UV mappings, and color options as parameters.

LANGUAGE: javascript
CODE:
buildFromPlan(walls, 0.3, 2, {}, scene);
buildFromPlan(walls, 1, 10, { interiorColor: new BABYLON.Color4(1, 0, 0, 1), exteriorColor: new BABYLON.Color4(0, 0.5, 1, 1) }, scene);
buildFromPlan(walls, 0.87, 6.21, { interiorUV: new BABYLON.Vector4(0, 0, 0.5, 1), exteriorUV: new BABYLON.Color4(0.5, 1, 1, 1) }, scene);

----------------------------------------

TITLE: Setting up BabylonJS Scene
DESCRIPTION: Initializes BabylonJS engine and scene with transparent background for CesiumJS integration.

LANGUAGE: javascript
CODE:
const engine = new BABYLON.Engine(canvas);
const scene = new BABYLON.Scene(engine);
scene.clearColor = BABYLON.Color4(0, 0, 0, 0);

const camera = new BABYLON.FreeCamera("camera", new BABYLON.Vector3(0, 0, -10), scene);

----------------------------------------

TITLE: Initializing Basic Babylon.js Scene
DESCRIPTION: Creates the foundational scene with camera and lighting setup. Includes camera positioning, lighting configuration, and basic scene initialization.

LANGUAGE: javascript
CODE:
var createScene = function () {
    var scene = new BABYLON.Scene(engine);
    var camera = new BABYLON.FreeCamera("camera1", new BABYLON.Vector3(0, 5, -10), scene);
    camera.setTarget(BABYLON.Vector3.Zero());
    camera.attachControl(canvas, true);
    var light = new BABYLON.HemisphericLight("light", new BABYLON.Vector3(0, 1, 0), scene);
    light.intensity = 0.7;
    return scene;
};

----------------------------------------

TITLE: Adjusting FOV Multiplier for PhotoDome in Babylon.js
DESCRIPTION: Shows how to adjust the field of view (FOV) multiplier for a PhotoDome. This can help with the perceived distance of the 360 photo from the camera. Note that this only works when 'useDirectMapping' is set to false.

LANGUAGE: javascript
CODE:
photoDome.fovMultiplier = newValue;

----------------------------------------

TITLE: CSG2 Boolean Operations Example
DESCRIPTION: Demonstrates how to use the new CSG2 class for boolean operations between meshes. Requires initialization of CSG2 before use and shows basic subtraction operation.

LANGUAGE: javascript
CODE:
await BABYLON.InitializeCSG2Async();

const sphereCSG = BABYLON.CSG2.FromMesh(sphere);
const boxCSG = BABYLON.CSG2.FromMesh(box);

const mesh = boxCSG.subtract(sphereCSG).toMesh("test");

----------------------------------------

TITLE: Basic Rotation From Axis Implementation in Babylon.js
DESCRIPTION: Demonstrates how to rotate a mesh to align with given orthogonal vectors using the RotationFromAxis method.

LANGUAGE: javascript
CODE:
var orientation = BABYLON.Vector3.RotationFromAxis(axis1, axis2, axis3);
mesh.rotation = orientation;

----------------------------------------

TITLE: Camera-Specific Highlighting
DESCRIPTION: Demonstrates how to create a highlight layer that only applies to a specific camera.

LANGUAGE: javascript
CODE:
const hl1 = new BABYLON.HighlightLayer("hl1", scene, { camera: camera });
hl1.addMesh(sphere, BABYLON.Color3.Green());

----------------------------------------

TITLE: Using BoneLookController in Babylon.js
DESCRIPTION: Shows how to use the BoneLookController to make a bone look toward a point in space.

LANGUAGE: javascript
CODE:
const target = BABYLON.MeshBuilder.createSphere();
const lookCtrl = new BABYLON.BoneLookController(characterMesh, headBone, target.position, { adjustYaw: Math.PI * 0.5, adjustPitch: Math.PI * 0.5, adjustRoll: Math.PI });

scene.registerBeforeRender(function () {
  lookCtrl.update();
});

----------------------------------------

TITLE: Disposing Physics Bodies and Shapes in Babylon.js
DESCRIPTION: Demonstrates the proper way to dispose of physics bodies and shapes in Babylon.js. Bodies are disposed automatically when their associated node is disposed, but shapes must be disposed manually.

LANGUAGE: javascript
CODE:
const shape = new BABYLON.PhysicsShapeSphere(
  new BABYLON.Vector3(0,0,0), // center of the sphere in local space
  0.5, // radius of the sphere
  scene // containing scene
);
body.shape = shape;
body2.shape = shape;
body3.shape = shape;

// ...

// When disposing of the scene:
body.dispose();
body2.dispose();
body3.dispose();

// Don't forget to also dispose of the shape when it's not needed anymore!
shape.dispose();

----------------------------------------

TITLE: Basic PCS setParticles Implementation
DESCRIPTION: Shows the basic structure of the setParticles function that handles particle updates within the render loop.

LANGUAGE: javascript
CODE:
function setParticles() {
    beforeUpdateParticles();
    for (let p = 0; p < nbParticles; p++) {
        updateParticles(particles[p]);
    }
    afterUpdateParticles();
}

----------------------------------------

TITLE: Enabling Depth Sensing in WebXR with Babylon.js
DESCRIPTION: This code snippet shows how to enable depth sensing in a WebXR experience using Babylon.js. It demonstrates how to configure depth sensing options and access depth information.

LANGUAGE: typescript
CODE:
const depthSensing = featureManager.enableFeature(BABYLON.WebXRFeatureName.DEPTH_SENSING, "latest", {
  dataFormatPreference: ["ushort", "float"],
  usagePreference: ["cpu", "gpu"],
} as BABYLON.IWebXRDepthSensingOptions) as BABYLON.WebXRDepthSensing;

sessionManager.onXRFrameObservable.add(() => {
  const {
    depthUsage,
    depthDataFormat,
    width,
    height,
    rawValueToMeters,
    normDepthBufferFromNormView,
    latestDepthImageTexture,
    latestDepthBuffer,
    latestInternalTexture,
  } = depthSensing;

  // Apply depth texture to a material
  material.diffuseTexture = latestDepthImageTexture;
});

depthSensing.onGetDepthInMetersAvailable.add((getDepthInMeters) => {
  const meters = getDepthInMeters(0.5, 0.5);
  console.log(meters);
});

----------------------------------------

TITLE: Removing LOD Levels in Babylon.js
DESCRIPTION: This snippet shows how to remove specific LOD levels from a mesh in Babylon.js using the removeLODLevel method. It demonstrates removing both a mesh-based LOD level and a null LOD level.

LANGUAGE: javascript
CODE:
knot00.removeLODLevel(knot02);
knot00.removeLODLevel(null);

----------------------------------------

TITLE: Accessing Scenes in Utility Layer Renderer in Babylon.js
DESCRIPTION: Shows how to access the original scene and utility layer scene from a UtilityLayerRenderer instance in Babylon.js.

LANGUAGE: javascript
CODE:
utilLayer.originalScene;
utilLayer.utilityLayerScene;

----------------------------------------

TITLE: Calculating Random Facet Point
DESCRIPTION: Generates a random point within a triangular facet using parametric equations with random lambda and mu values.

LANGUAGE: javascript
CODE:
lamda = BABYLON.Scalar.RandomRange(0, 1);	mu = BABYLON.Scalar.RandomRange(0, 1);
facetPoint = vertex0.add(vec0.scale(lambda)).add(vec1.scale(lambda * mu));

----------------------------------------

TITLE: Disposing GUIManager and Elements in JavaScript
DESCRIPTION: Disposes of the GUIManager instance and deletes all associated GUI elements. This method should be called when cleaning up or removing the GUI from the application.

LANGUAGE: javascript
CODE:
dispose()

----------------------------------------

TITLE: Handling Device Connection Events in Babylon.js DeviceSourceManager
DESCRIPTION: Demonstrates how to use observables to handle device connection and disconnection events.

LANGUAGE: javascript
CODE:
onDeviceConnectedObservable.add((device) => {
  // Handle device connection
});

onDeviceDisconnectedObservable.add((device) => {
  // Handle device disconnection
});

----------------------------------------

TITLE: Creating Custom Extrusion with Mesh Class
DESCRIPTION: Shows how to create custom extrusions using the Mesh class directly. Includes examples of basic usage and simplified version with fixed scale and rotation.

LANGUAGE: javascript
CODE:
let extrusion = BABYLON.Mesh.ExtrudeShapeCustom("extrusion", shape, path, scaleFunction, rotateFunction, ribbonCloseArray, ribbonClosePath, cap, scene);
let extrusion = BABYLON.Mesh.ExtrudeShapeCustom("extrusion", shape, path, scaleFunction, rotateFunction, ribbonCloseArray, ribbonClosePath, cap, scene, updatable, sideOrientation, instance); //optional parameters after scene

// fixed unit scale and zero rotation
let extrusion = BABYLON.Mesh.ExtrudeShapeCustom(
  "extrusion",
  shape,
  path,
  () => {
    return 1;
  },
  () => {
    return 0;
  },
  ribbonCloseArray,
  ribbonClosePath,
  cap,
  scene
);

----------------------------------------

TITLE: Calculating Front Position of WebXR Camera in Babylon.js
DESCRIPTION: Computes a position in front of the WebXR camera at a specified distance. This is useful for placing objects relative to the camera's current position and orientation.

LANGUAGE: javascript
CODE:
// get the position 2 meters in front of the camera
const frontPosition = xrCamera.getFrontPosition(2);

----------------------------------------

TITLE: Installing Vaporwear Experience NPM Package
DESCRIPTION: Installs the private NPM package containing the Vaporwear 3D experience components.

LANGUAGE: bash
CODE:
npm install @syntheticmagus/vaporwear-experience

----------------------------------------

TITLE: Drawing Arc Sectors Between Vectors in Babylon.js
DESCRIPTION: Function that creates an arc sector between two vectors with specified radius and style options. Supports three rendering types: solid line (0), dashed line (1), and filled sector (2). Takes origin point, two vectors, radius, and sector type as parameters.

LANGUAGE: javascript
CODE:
function showAngleSector(origin, vector1, vector2, radius, sectorType) {
  radius = radius || 1;
  sectorType = sectorType || 0;
  const cross = BABYLON.Vector3.Cross(vector1, vector2);
  const dot = BABYLON.Vector3.Dot(vector1, vector2);
  const angle = Math.acos(dot / (vector1.length() * vector2.length()));
  const points = [];
  const minNb = 4;
  const factor = 2;
  let nbPoints = Math.floor(radius * angle * factor);
  nbPoints = nbPoints < minNb ? minNb : nbPoints;

  const firstPoint = BABYLON.Vector3.Normalize(vector1).scale(radius);
  const lastPoint = BABYLON.Vector3.Normalize(vector2).scale(radius);
  let matrix;
  let ang = angle / nbPoints;
  let rotated;
  for (let i = 0; i < nbPoints; i++) {
    matrix = BABYLON.Matrix.RotationAxis(cross, ang * i);
    rotated = BABYLON.Vector3.TransformCoordinates(firstPoint, matrix);
    points.push(rotated.add(origin));
  }
  points.push(lastPoint.add(origin));

  let sector;
  switch (sectorType) {
    case 0:
      sector = BABYLON.MeshBuilder.CreateLines("sector", { points }, scene);
      break;
    case 1:
      sector = BABYLON.Mesh.CreateDashedLines("sector", points, 3, 1, nbPoints, scene);
      break;
    case 2:
      const pointO = [];
      for (let j = 0; j < points.length; j++) {
        pointO.push(origin);
      }
      sector = BABYLON.Mesh.CreateRibbon("sector", [points, pointO], null, null, 0, scene);
      break;
    default:
      sector = BABYLON.MeshBuilder.CreateLines("sector", { points }, scene);
      break;
  }
  return sector;
}

----------------------------------------

TITLE: Particle Collision with Velocity Swapping in BabylonJS
DESCRIPTION: Implementation where colliding particles swap their velocities while moving on a grid. Particles move at fixed speeds along x, y, z axes and collide with walls and other particles.

LANGUAGE: javascript
CODE:
https://playground.babylonjs.com/#CGSXR

----------------------------------------

TITLE: Resizing Image to Canvas with Babylon.js Resizer
DESCRIPTION: JavaScript code demonstrating how to use the Resizer control to resize an image, video frame, or canvas content to fit the target canvas.

LANGUAGE: javascript
CODE:
resizer.resize(imageToResize);

----------------------------------------

TITLE: Setting Visibility of GUIDialog in BabylonJS
DESCRIPTION: Sets the visibility of the GUIDialog. The fade parameter can be used to apply a fade effect when changing visibility.

LANGUAGE: javascript
CODE:
setVisible(bool, fade)

----------------------------------------

TITLE: Customizing Gizmo Appearance in Babylon.js
DESCRIPTION: Shows how to customize the visual appearance of an existing gizmo by creating a custom mesh and setting it on the gizmo.

LANGUAGE: javascript
CODE:
const customMesh = BABYLON.MeshBuilder.CreateBox("", { size: 0.1 }, gizmo.gizmoLayer.utilityLayerScene);
customMesh.material = material;
gizmo.setCustomMesh(customMesh);

----------------------------------------

TITLE: Enabling Fluid Rendering for Particle Systems in JavaScript
DESCRIPTION: Demonstrates how to enable fluid rendering for particle systems by using the scene's fluid renderer component. Shows initialization and accessing the fluid object and target renderer for customization.

LANGUAGE: javascript
CODE:
const fluidRenderer = scene.enableFluidRenderer();
const renderObject = fluidRenderer.addParticleSystem(particleSystem);

const fluidObject = renderObject.object;
const targetRenderer = renderObject.targetRenderer;

----------------------------------------

TITLE: Creating Tiled Ground with Mesh in Babylon.js
DESCRIPTION: Shows an alternative method to create a tiled ground using the Mesh class instead of MeshBuilder. This approach allows for more direct control over the mesh creation process.

LANGUAGE: javascript
CODE:
const tiledGround = BABYLON.MeshBuilder.CreateTiledGround("Tiled Ground", {xmin, zmin, xmax, zmax, subdivisions, precision}, scene);

----------------------------------------

TITLE: Applying Multi-Material to a Mesh in Babylon.js
DESCRIPTION: This snippet shows how to create a sphere mesh and assign the multi-material to it.

LANGUAGE: javascript
CODE:
const sphere = BABYLON.MeshBuilder.CreateSphere("Sphere0", { segments: 16, diameter: 3 }, scene);
sphere.material = multimat;

----------------------------------------

TITLE: Disabling Edge Rendering in Babylon.js
DESCRIPTION: This snippet demonstrates how to disable edge rendering on a mesh using the disableEdgesRendering method.

LANGUAGE: javascript
CODE:
box.disableEdgesRendering();

----------------------------------------

TITLE: Implementing Custom Instance Buffers in Babylon.js
DESCRIPTION: Shows how to create and manage custom vertex buffers for instances, allowing unique color values per instance. Includes both direct buffer creation and registered buffer approaches.

LANGUAGE: javascript
CODE:
let instanceCount = 1000;
let colorData = new Float32Array(4 * instanceCount);

for (let index = 0; index < instanceCount; index++) {
  colorData[index * 4] = Math.random();
  colorData[index * 4 + 1] = Math.random();
  colorData[index * 4 + 2] = Math.random();
  colorData[index * 4 + 3] = 1.0;
}

var buffer = new BABYLON.VertexBuffer(engine, colorData, BABYLON.VertexBuffer.ColorKind, false, false, 4, true);
box.setVerticesBuffer(buffer);

----------------------------------------

TITLE: VR Mode Reticle Parent Management
DESCRIPTION: Handles reticle parenting when entering and exiting VR mode to ensure proper movement with both VR and web cameras.

LANGUAGE: javascript
CODE:
VRHelper.onEnteringVR = function () {
    console.log(VRHelper.currentVRCamera);
    reticle.parent = VRHelper.currentVRCamera;
};
VRHelper.onExitingVR = function () {
    reticle.parent = camera;
};

----------------------------------------

TITLE: Configuring GreasedLineRibbon options in JavaScript
DESCRIPTION: Shows the default values for GreasedLineRibbon options. These options control various aspects of the ribbon's appearance and behavior.

LANGUAGE: javascript
CODE:
pointsMode = GreasedLineRibbonPointsMode.POINTS_MODE_POINTS;
direction = Vector3.UpReadOnly;
directionsAutoMode: GreasedLineRibbonAutoDirectionMode.AUTO_DIRECTIONS_NONE;
width = GreasedLineMaterialDefaults.DEFAULT_WIDTH; // 0.1
facesMode = GreasedLineRibbonFacesMode.FACES_MODE_SINGLE_SIDED;
closePath = false;
smoothShading = false;

----------------------------------------

TITLE: Loading HDR Cube Texture in Babylon.js
DESCRIPTION: Implementation for loading and prefiltering an HDR cube texture directly from an .hdr file. Requires WebGL2 for prefiltering on-the-fly.

LANGUAGE: javascript
CODE:
const reflectionTexture = new BABYLON.HDRCubeTexture("./textures/environment.hdr", scene, 128, false, true, false, true);

----------------------------------------

TITLE: Creating a Twisting Lattice Deformation in Babylon.js
DESCRIPTION: Shows how to create a twisting lattice deformation effect on a skull mesh in Babylon.js, including mesh loading, lattice creation, and continuous updating of lattice data.

LANGUAGE: javascript
CODE:
const loadedData = await BABYLON.SceneLoader.ImportMeshAsync("", "scenes/", "skull.babylon", scene);
const skull = loadedData.meshes[0];
skull.position.set(0, 0, 0);

const positions = skull.getVerticesData(BABYLON.VertexBuffer.PositionKind);
const updatedPositions = new Float32Array(positions.length);

// lattice
var lattice = new BABYLON.Lattice({
    resolutionY: 10,
    autoAdaptToMesh: skull,
    position: BABYLON.Vector3.Zero()
});

scene.onBeforeRenderObservable.add(() => {
    // Twist!!
    for (x = 0; x < lattice.resolutionX; x++) {
        for (y = 0; y < lattice.resolutionY; y++) {
            for (z = 0; z < lattice.resolutionZ; z++) {
                const angle = (y / lattice.resolutionY) * 0.02;
                const control = lattice.data[x][y][z];
                const cx = control.x;
                const cz = control.z;

                const cosAngle = Math.cos(angle);
                const sinAngle = Math.sin(angle);

                // Rotation
                control.x = cosAngle * cx - sinAngle * cz;
                control.z = sinAngle * cx + cosAngle * cz;
            }
        }
    }

    lattice.deform(positions, updatedPositions);
    skull.setVerticesData(BABYLON.VertexBuffer.PositionKind, updatedPositions);
    skull.createNormals(true);
});

----------------------------------------

TITLE: Adding Custom Strategy to Performance Collector in JavaScript
DESCRIPTION: Demonstrates how to add a custom collection strategy to the Performance Collector, including specifying a category and visibility setting.

LANGUAGE: javascript
CODE:
const perfCollector = scene.getPerfCollector();

const someStrategy = {
    strategyCallback: someStrategyCallback,
    category: "My custom category",
    hidden: false
}
perfCollector.addCollectionStrategies(someStrategy);

----------------------------------------

TITLE: Retrieving Mesh Data
DESCRIPTION: Gets the vertex positions and indices from the mesh buffer to access facet data.

LANGUAGE: javascript
CODE:
var positions = mesh.getVerticesData(BABYLON.VertexBuffer.PositionKind);
var indices = mesh.getIndices();

----------------------------------------

TITLE: Creating a GUIManager Instance in JavaScript
DESCRIPTION: Initializes a new GUIManager object with a canvas element, CSS styles, and optional theme settings. This constructor sets up the foundation for managing GUI elements in a BabylonJS application.

LANGUAGE: javascript
CODE:
new GUIManager(canvas, css, options)

----------------------------------------

TITLE: Changing Reference Space Type in WebXR with Babylon.js
DESCRIPTION: Switch to a different XRReferenceSpaceType during an active XR session.

LANGUAGE: javascript
CODE:
// Session was created using the `local` reference space mode, let's move to `local-floor` :
const newReferenceSpace = await xrSession.setReferenceSpaceTypeAsync("local-floor");

// The session will take care of updating all reference space objects (base, viewer, and the current one).

----------------------------------------

TITLE: Configuring Custom Hand Meshes
DESCRIPTION: Demonstrates how to configure custom hand meshes with bone mapping for left and right hands.

LANGUAGE: javascript
CODE:
const rightHandMesh = getRightHandMesh(); // get it any way you want
const leftHandMesh = getLeftHandMesh(); // get it any way you want
const featureManager = xrHelper.baseExperience.featuresManager;

featureManager.enableFeature(BABYLON.WebXRFeatureName.HAND_TRACKING, "latest", {
  xrInput: xrHelper.input,
  jointMeshes: {
    disableDefaultHandMesh: true,
    handMeshes: {
      right: rightHandMesh,
      left: leftHandMesh,
    },
    rigMapping: {
      right: [
        //... mapping for the right hand mesh
      ],
      left: [
        //... mapping for the left hand mesh
      ],
    },
  },
});

----------------------------------------

TITLE: Initializing WebXR Teleportation with Default Experience Helper
DESCRIPTION: Creates a WebXR experience with teleportation enabled and configures floor meshes for landing points.

LANGUAGE: javascript
CODE:
const xrHelper = await scene.createDefaultXRExperienceAsync({
  floorMeshes: [ground] /* Array of meshes to be used as landing points */,
  teleportationOptions: {
    // Options to pass to the teleportation module
  },
});

----------------------------------------

TITLE: Using Dynamic Attributes in XML Layouts
DESCRIPTION: This snippet demonstrates how to use dynamic attributes in XML layouts, referencing class attributes or global variables using double curly brackets.

LANGUAGE: xml
CODE:
<?xml version="1.0"?>
<root>
    <Rectangle name="firstContainer" id="firstContainer" verticalAlignment="Control.HORIZONTAL_ALIGNMENT_TOP" background="blue" id="popupContainer" width=".8" height=".4" color="Orange" >
        <InputText id="inputText1" width="{{textWidth}}" maxWidth="0.3"  height="40px" color="white"/>
        <Button id="helloButton" width="0.2" verticalAlignment="Control.VERTICAL_ALIGNMENT_BOTTOM" height="0.2" name="helloButton" background="green" onPointerUpObservable="storeUsernameEvent" >
            <TextBlock  text="Store Input" color = "white" />
        </Button>
    </Rectangle>
</root>

----------------------------------------

TITLE: Adding Normal Maps to Tri-Planar Material in Babylon.js
DESCRIPTION: This snippet demonstrates how to add normal maps to a tri-planar material for improved visual quality. It shows that not all axes need unique textures.

LANGUAGE: javascript
CODE:
var triPlanarMaterial = new BABYLON.TriPlanarMaterial("triplanar", scene);
// ...

// In the case of normal maps, it is not necessary to set the 3 textures
triPlanarMaterial.normalTextureX = new BABYLON.Texture("textures/rockn.png", scene);
triPlanarMaterial.normalTextureY = new BABYLON.Texture("textures/grassn.png", scene);
triPlanarMaterial.normalTextureZ = triPlanarMaterial.normalTextureX;

----------------------------------------

TITLE: Starting Facebook Instant Game
DESCRIPTION: Implementation of game initialization and render loop setup after the Facebook Instant Game is ready to start.

LANGUAGE: javascript
CODE:
this.scene.executeWhenReady(() => {
  FBInstant.startGameAsync().then(() => {
    // Game initialization
    this._initGame();

    // Run render loop
    this.engine.runRenderLoop(() => {
      this.scene.render();
    });
  });
});

----------------------------------------

TITLE: Creating GUILabel Instance in BabylonJS
DESCRIPTION: Constructor for creating a new GUILabel instance. Takes an ID, options object for configuration, GUI manager instance, and optional append parameter to control DOM insertion.

LANGUAGE: typescript
CODE:
new GUILabel(id: string, options: {
    w?: number,
    h?: number,
    x?: number,
    y?: number,
    text?: string,
    zIndex?: number
}, guimanager: GUIManager, append?: boolean)

----------------------------------------

TITLE: Dynamic GUI Implementation with Score Tracking
DESCRIPTION: Creates a dynamic GUI system with score tracking that updates when the user interacts with objects in the scene.

LANGUAGE: javascript
CODE:
var scoreVar = { score: 0 };

var advancedTexture = BABYLON.GUI.AdvancedDynamicTexture.CreateFullscreenUI("UI");

var scoreText = new BABYLON.GUI.TextBlock();
scoreText.text = "Score: " + scoreVar.score.toString();
scoreText.color = "black";
scoreText.fontSize = 30;
scoreText.paddingTop = 10;
scoreText.paddingLeft = 10;

advancedTexture.addControl(scoreText);

scoreText.textHorizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_LEFT;
scoreText.textVerticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_TOP;

blubox.actionManager.registerAction(new BABYLON.IncrementValueAction(BABYLON.ActionManager.OnPickTrigger, scoreVar, "score", 1));

----------------------------------------

TITLE: Visualizing Particle Speed Increase with Trails in BabylonJS
DESCRIPTION: This variation adds trail markers to visualize the path of particles as their speeds increase through collisions.

LANGUAGE: javascript
CODE:
// Code not provided in the original text, but referenced as Playground id=#1DJ7RH#1

----------------------------------------

TITLE: Updating GUIMeter Value in BabylonJS
DESCRIPTION: Method to set the progress value of the GUIMeter GUI element.

LANGUAGE: javascript
CODE:
updateValue(int) → void

----------------------------------------

TITLE: Enabling Homogeneous Coordinates for glTF 1.0
DESCRIPTION: JavaScript code to enable homogeneous coordinates for glTF 1.0, useful with certain converters and exporters.

LANGUAGE: javascript
CODE:
BABYLON.GLTFFileLoader.HomogeneousCoordinates = true;

----------------------------------------

TITLE: Custom Environment Using createDefaultEnvironment Options
DESCRIPTION: Setting up a custom environment texture using the options parameter in createDefaultEnvironment method.

LANGUAGE: javascript
CODE:
scene.createDefaultEnvironment({
    environmentTexture: "texture-url.env"
});

----------------------------------------

TITLE: Defining Submeshes for Multi-Material in Babylon.js
DESCRIPTION: This code demonstrates how to create submeshes for a sphere to apply different materials to different parts of the mesh.

LANGUAGE: javascript
CODE:
sphere.subMeshes = [];
const verticesCount = sphere.getTotalVertices();

new BABYLON.SubMesh(0, 0, verticesCount, 0, 900, sphere);
new BABYLON.SubMesh(1, 0, verticesCount, 900, 900, sphere);
new BABYLON.SubMesh(2, 0, verticesCount, 1800, 2088, sphere);

----------------------------------------

TITLE: Controlling Rendering of Utility Layer in Babylon.js
DESCRIPTION: Demonstrates how to control the rendering of the utility layer, including manual rendering, in Babylon.js.

LANGUAGE: javascript
CODE:
utilLayer.shouldRender = false;
utilLayer.render();

----------------------------------------

TITLE: Adding Flares to a LensFlareSystem in Babylon.js
DESCRIPTION: This snippet shows how to add individual flares to a LensFlareSystem. Each flare is defined by its size, position, color, and texture.

LANGUAGE: javascript
CODE:
const flare00 = new BABYLON.LensFlare(
  0.1, // size
  0, // position
  new BABYLON.Color3(1, 1, 1), // color
  "textures/flare.png", // texture
  lensFlareSystem, // lens flare system
);
const flare01 = new BABYLON.LensFlare(0.075, 0.5, new BABYLON.Color3(0.8, 0.56, 0.72), "textures/flare3.png", lensFlareSystem);
const flare02 = new BABYLON.LensFlare(0.1, -0.15, new BABYLON.Color3(0.71, 0.8, 0.95), "textures/Flare2.png", lensFlareSystem);
const flare03 = new BABYLON.LensFlare(0.15, 0.25, new BABYLON.Color3(0.95, 0.89, 0.71), "textures/flare.png", lensFlareSystem);

----------------------------------------

TITLE: Loading and Applying Procedural Texture from Snippet Server
DESCRIPTION: Shows how to load a node material from the snippet server, create a procedural texture, and apply it to a ground mesh as an emissive texture.

LANGUAGE: javascript
CODE:
const ground = BABYLON.MeshBuilder.CreateGround("ground", {width: 6, height: 6}, scene);

BABYLON.NodeMaterial.ParseFromSnippetAsync("#A7A3UB#1", scene).then((nodeMaterial) => {
    const proceduralTexture = nodeMaterial.createProceduralTexture(256);

    let mat = new BABYLON.StandardMaterial();

    mat.emissiveTexture = proceduralTexture;

    ground.material = mat;
});

----------------------------------------

TITLE: Dynamic Line and Dashed Line Creation
DESCRIPTION: Shows how to create and update lines and dashed lines with dynamic vertex positions. Includes examples of both initial mesh creation and instance updates.

LANGUAGE: javascript
CODE:
const points1 = [v1, v2, /* ..., */ vN];
let lines = BABYLON.MeshBuilder.CreateLines("lines", {points: points1, updatable: true}, scene, true);
let dashedLines = BABYLON.Mesh.CreateDashedLines("lines", points1, dashSize, gapSize, nb, scene, true);

lines = BABYLON.MeshBuilder.CreateLines(null, {points: points2, instance: lines});
dashedLines = BABYLON.MeshBuilder.CreateDashedLines(null, {points: points2, instance: dashedLines});

----------------------------------------

TITLE: Accessing Goldberg Polyhedron Properties
DESCRIPTION: Examples of accessing properties from the goldbergData object containing mesh information like face centers and counts.

LANGUAGE: javascript
CODE:
const goldbergPoly = BABYLON.MeshBuilder.CreateGoldberg("goldberg", options);
const nbFaces = goldbergPoly.goldbergData.nbFaces;
const centerOfFace32 = goldbergPoly.goldbergData.faceCenters[32];

----------------------------------------

TITLE: Custom Facet Increase Implementation (Pre-v4.0)
DESCRIPTION: Legacy implementation for increasing mesh facets in versions prior to Babylon.js 4.0. This function adds points to each side of existing facets, recalculates vertices, indices, UV coordinates, and normals to create a more detailed mesh.

LANGUAGE: javascript
CODE:
BABYLON.Mesh.prototype.increaseFacets = function(pps) { //pps points per side        
    var _gaps = pps+1;
    var _n = _gaps + 1;
    var _fvs =[];
    for(let _i=0; _i<_n; _i++) {
        _fvs[_i] = [];
    }    
    var _A,_B;
    var _d ={x:0,y:0,z:0};
    var _u ={x:0,y:0};
    var _indices = [];
    var _vertexIndex = [];
    var _side = [];
	var _l; //holds lengths
    var _uvs = this.getVerticesData(BABYLON.VertexBuffer.UVKind);
    var _meshIndices = this.getIndices();
    var _positions = this.getVerticesData(BABYLON.VertexBuffer.PositionKind);    
    var _normals =[];    

    for(let _i = 0; _i<_meshIndices.length; _i+=3) {
        _vertexIndex[0] = _meshIndices[_i];
        _vertexIndex[1] = _meshIndices[_i + 1];
        _vertexIndex[2] = _meshIndices[_i + 2];        
        for(let _j = 0; _j<3; _j++) {
            _A = _vertexIndex[_j];
            _B = _vertexIndex[(_j+1)%3];        
            if(_side[_A] === undefined  && _side[_B] ===  undefined) {            
                _side[_A] = [];
                _side[_B] = [];            
            }
            else {
                if(_side[_A] === undefined) {                    
                    _side[_A] = [];
                }
                if(_side[_B] === undefined) {                    
                    _side[_B] = [];                                
                }
            }
            if(_side[_A][_B]  === undefined  && _side[_B][_A] === undefined) {            
                _side[_A][_B] = [];
                _d.x = (_positions[3 * _B] - _positions[3 * _A])/_gaps;
                _d.y = (_positions[3 * _B + 1] - _positions[3 * _A + 1])/_gaps;
                _d.z = (_positions[3 * _B + 2] - _positions[3 * _A + 2])/_gaps;
                _u.x = (_uvs[2*_B] - _uvs[2*_A])/_gaps;
                _u.y = (_uvs[2*_B + 1] - _uvs[2*_A + 1])/_gaps;
                _side[_A][_B].push(_A);                
                for(let _k=1; _k<_gaps; _k++) {                
                    _side[_A][_B].push(_positions.length/3);                
                    _positions.push(_positions[3 * _A] + _k*_d.x, _positions[3 * _A + 1] + _k*_d.y, _positions[3 * _A + 2] + _k*_d.z);
                    _uvs.push(_uvs[2*_A] + _k*_u.x, _uvs[2*_A + 1] + _k*_u.y);
                }                
                _side[_A][_B].push(_B);
                _side[_B][_A]=[];
                _l = _side[_A][_B].length;
                for(let _a=0; _a<_l; _a++) {
                    _side[_B][_A][_a] = _side[_A][_B][_l-1-_a];
                }
            }
            else {
                if(_side[_A][_B] === undefined) {            
                    _side[_A][_B]=[];
                    _l = _side[_B][_A].length;
                    for(let _a=0; _a<_l; _a++) {
                        _side[_A][_B][_a] = _side[_B][_A][_l-1-_a];
                    }
                }
                if(_side[_B][_A] === undefined) {            
                    _side[_B][_A]=[];                
                    _l = _side[_A][_B].length;
                    for(let _a=0; _a<_l; _a++) {
                        _side[_B][_A][_a] = _side[_A][_B][_l-1-_a];
                    }
                }
            }                    
        }    
        _fvs[0][0] = _meshIndices[_i];
        _fvs[1][0] = _side[_meshIndices[_i]][_meshIndices[_i + 1]][1];
        _fvs[1][1] = _side[_meshIndices[_i]][_meshIndices[_i + 2]][1];        
        for(let _k = 2; _k<_gaps; _k++) {
            _fvs[_k][0] = _side[_meshIndices[_i]][_meshIndices[_i + 1]][_k];
            _fvs[_k][_k] = _side[_meshIndices[_i]][_meshIndices[_i + 2]][_k];        
            _d.x = (_positions[3 * _fvs[_k][_k]] - _positions[3 * _fvs[_k][0]])/_k;
            _d.y = (_positions[3 * _fvs[_k][_k] + 1] - _positions[3 * _fvs[_k][0] + 1])/_k;
            _d.z = (_positions[3 * _fvs[_k][_k] + 2] - _positions[3 * _fvs[_k][0] + 2])/_k;
            _u.x = (_uvs[2*_fvs[_k][_k]] - _uvs[2*_fvs[_k][0]])/_k;
            _u.y = (_uvs[2*_fvs[_k][_k] + 1] - _uvs[2*_fvs[_k][0] + 1])/_k;
            for(let _j = 1; _j<_k; _j++) {                
                _fvs[_k][_j] = _positions.length/3;                
                _positions.push(_positions[3 * _fvs[_k][0]] + _j*_d.x, _positions[3 * _fvs[_k][0] + 1] + _j*_d.y, _positions[3 * _fvs[_k][0] + 2] + _j*_d.z);
                _uvs.push(_uvs[2*_fvs[_k][0]] + _j*_u.x, _uvs[2*_fvs[_k][0] + 1] + _j*_u.y);
            }        
        }
        _fvs[_gaps] = _side[_meshIndices[_i + 1]][_meshIndices[_i + 2]];

        _indices.push(_fvs[0][0],_fvs[1][0],_fvs[1][1]);
        for(let _k = 1; _k<_gaps; _k++) {
            for(let _j = 0; _j<_k; _j++) {            
                _indices.push(_fvs[_k][_j],_fvs[_k+1][_j],_fvs[_k+1][_j+1]);
                _indices.push(_fvs[_k][_j],_fvs[_k+1][_j+1],_fvs[_k][_j+1]);
            }        
            _indices.push(_fvs[_k][_j],_fvs[_k+1][_j],_fvs[_k+1][_j+1]);
        }

    }                            

    var vertexData = new BABYLON.VertexData();
    vertexData.positions = _positions;
    vertexData.indices = _indices;
    vertexData.uvs = _uvs;

    BABYLON.VertexData.ComputeNormals(_positions, _indices, _normals);
    vertexData.normals = _normals;
	
    vertexData.applyToMesh(this);

}

----------------------------------------

TITLE: GUISlider Visibility Methods
DESCRIPTION: Methods for controlling and checking the visibility state of the GUI slider element.

LANGUAGE: typescript
CODE:
setVisible(bool: boolean, fade: boolean): void
isVisible(): boolean

----------------------------------------

TITLE: Adjusting World Scale in WebXR with Babylon.js
DESCRIPTION: Modify the world scaling factor to adjust the size of the world relative to the player in XR.

LANGUAGE: javascript
CODE:
xeSessionManager.worldScalingFactor = 2;

// If your scene is in feet instead of meters:
xeSessionManager.worldScalingFactor = 3.2808;

xrSessionManager.onWorldScaleFactorChangedObservable.add((payload) => {
  // old value:
  payload.previousScaleFactor;
  // new value
  payload.newScalefactor;
});

----------------------------------------

TITLE: Applying Vertex Animation Textures to Instances in Babylon.js
DESCRIPTION: This snippet shows how to set up Vertex Animation Textures (VATs) for instanced meshes in Babylon.js. It demonstrates creating an instanced buffer for animation settings.

LANGUAGE: javascript
CODE:
// create the instanced buffer
mesh.registerInstancedBuffer("bakedVertexAnimationSettingsInstanced", 4);
// set it for the base mesh
mesh.instancedBuffers.bakedVertexAnimationSettingsInstanced = new BABYLON.Vector4(0, 0, 0, 0);

----------------------------------------

TITLE: Configuring WebXR Teleportation Landing Zone
DESCRIPTION: Shows how to customize the appearance of the teleportation landing zone with custom colors and materials.

LANGUAGE: javascript
CODE:
const teleportation = featuresManager.enableFeature(WebXRFeatureName.TELEPORTATION, "stable", {
  xrInput: xr.input,
  floorMeshes: [ground],
  defaultTargetMeshOptions: {
    teleportationFillColor: "#55FF99",
    teleportationBorderColor: "blue"
  },
});

----------------------------------------

TITLE: Creating Annotations in Babylon.js Viewer HTML
DESCRIPTION: Demonstrates how to create annotations for hotspots in the Babylon.js Viewer. This example adds labels to planets in a solar system model.

LANGUAGE: html
CODE:
<babylon-viewer
    model="https://raw.githubusercontent.com/BabylonJS/Assets/master/meshes/SolarSystem/SolarSystem.glb"
    hotspots="{
        'mercury': {'type': 'surface', 'mesh': 'Mercury', 'faceId': 280, 'barycentricCoordinates': [0.5, 0.25, 0.25]},
        'venus': {'type': 'surface', 'mesh': 'Venus', 'faceId': 280, 'barycentricCoordinates': [0.5, 0.25, 0.25]},
        'earth': {'type': 'surface', 'mesh': 'Earth', 'faceId': 280, 'barycentricCoordinates': [0.5, 0.25, 0.25]},
        'mars': {'type': 'surface', 'mesh': 'Mars', 'faceId': 280, 'barycentricCoordinates': [0.5, 0.25, 0.25]}
    }"
>
    <babylon-viewer-annotation hotspot="mercury">Mercury</babylon-viewer-annotation>
    <babylon-viewer-annotation hotspot="venus">Venus</babylon-viewer-annotation>
    <babylon-viewer-annotation hotspot="earth">Earth</babylon-viewer-annotation>
    <babylon-viewer-annotation hotspot="mars">Mars</babylon-viewer-annotation>
</babylon-viewer>

----------------------------------------

TITLE: Setting up Shader Material in JavaScript
DESCRIPTION: Creates and configures the shader material using the custom vertex and fragment shaders. It also sets up the texture and uniforms.

LANGUAGE: JavaScript
CODE:
var shaderMaterial = new BABYLON.ShaderMaterial("shader", scene, {
		vertexElement: "vertexShaderCode",
		fragmentElement: "fragmentShaderCode",
	},
	{
		attributes: ["position", "normal", "uv"],
		uniforms: ["world", "worldView", "worldViewProjection", "view", "projection"]
	});


var mainTexture = new BABYLON.Texture("amiga.jpg", scene);

shaderMaterial.setTexture("textureSampler", mainTexture);

----------------------------------------

TITLE: Generating Facet Triangles for Geodesic Mesh in JavaScript
DESCRIPTION: Implements functions to generate the facet triangles for the Geodesic mesh, including handling of inner facets and edge cases. This process creates the detailed structure of the Geodesic polyhedron.

LANGUAGE: javascript
CODE:
Primary.prototype.InnerFacets = function() {
    const m = this.m;
    const n = this.n;
    for (let y = 0; y < n + m + 1; y++) {
        for (x = this.min[y]; x < this.max[y] + 1; x++) {
            // ... (code for generating inner facets)
        }    
    }
}

Primary.prototype.EdgeVecsABOB = function() {
    let m = this.m;
    let n = this.n;

    // ... (code for handling edge cases)
};

// ... (other methods for different edge cases)

----------------------------------------

TITLE: VideoDome Disposal in Babylon.js
DESCRIPTION: Proper disposal of VideoDome instance including texture resources.

LANGUAGE: javascript
CODE:
videoDome.dispose(false, true);

----------------------------------------

TITLE: Disposing GUIDialog in BabylonJS
DESCRIPTION: Disposes of the GUIDialog, removing it from the GUI system and freeing associated resources.

LANGUAGE: javascript
CODE:
dispose()

----------------------------------------

TITLE: Creating and Applying Dynamic Texture in Babylon.js
DESCRIPTION: Creates a dynamic texture and applies it as a diffuse texture to a material. The 'option' parameter can be a canvas, an object with width and height, or a number.

LANGUAGE: javascript
CODE:
const myDynamicTexture = new BABYLON.DynamicTexture(name, option, scene);

const myMaterial = new BABYLON.StandardMaterial("Mat", scene);
myMaterial.diffuseTexture = myDynamicTexture;
mesh.material = myMaterial;

----------------------------------------

TITLE: TypeScript Camera Input Interface
DESCRIPTION: TypeScript interface definition for implementing custom camera inputs.

LANGUAGE: typescript
CODE:
interface ICameraInput<TCamera extends BABYLON.Camera> {
  camera: TCamera;
  getClassName(): string;
  getSimpleName(): string;
  attachControl: (noPreventDefault?: boolean) => void;
  detachControl: () => void;
  checkInputs?: () => void;
}

----------------------------------------

TITLE: Circular Path Generation
DESCRIPTION: Creates points for a circle of radius 5 using parametric equations with angle parameter

LANGUAGE: javascript
CODE:
const path = [];
for (let a = 0; a < 2 * Math.PI; a += Math.PI / 8) {
    let x = 5 * Math.cos(a);
    let y = 5 * Math.sin(a);
    path.push(new BABYLON.Vector3(x, y, 6))
}
path.push(path[0]); // close circle

----------------------------------------

TITLE: Applying Face Colors
DESCRIPTION: Code to apply specific colors to mesh faces using Color4 values.

LANGUAGE: javascript
CODE:
faceColors[f] = new BABYLON.Color4(r, g, b, a);

----------------------------------------

TITLE: Initializing Base PostProcess Constructor in Babylon.js
DESCRIPTION: Basic constructor for creating a post process effect in Babylon.js. Takes parameters for name, fragment shader URL, parameters, samplers, ratio, camera attachment, sampling mode, engine instance, and reusability flag.

LANGUAGE: javascript
CODE:
BABYLON.PostProcess = function (name, fragmentUrl, parameters, samplers, ratio, camera, samplingMode, engine, reusable)

----------------------------------------

TITLE: Implementing Bloom Effect with Chained Post Processes
DESCRIPTION: Example showing how to chain multiple post processes to create a bloom effect. Combines pass-through, downsampling, blur and composition post processes.

LANGUAGE: javascript
CODE:
var blurWidth = 1.0;

var postProcess0 = new BABYLON.PassPostProcess("Scene copy", 1.0, camera);
var postProcess1 = new BABYLON.PostProcess("Down sample", "./Scenes/Customs/postprocesses/downsample", ["screenSize", "highlightThreshold"], null, 0.25, camera, BABYLON.Texture.BILINEAR_SAMPLINGMODE);
postProcess1.onApply = function (effect) {
  effect.setFloat2("screenSize", postProcess1.width, postProcess1.height);
  effect.setFloat("highlightThreshold", 0.9);
};
var postProcess2 = new BABYLON.BlurPostProcess("Horizontal blur", new BABYLON.Vector2(1.0, 0), blurWidth, 0.25, camera);
var postProcess3 = new BABYLON.BlurPostProcess("Vertical blur", new BABYLON.Vector2(0, 1.0), blurWidth, 0.25, camera);
var postProcess4 = new BABYLON.PostProcess("Final compose", "./Scenes/Customs/postprocesses/compose", ["sceneIntensity", "glowIntensity", "highlightIntensity"], ["sceneSampler"], 1, camera);
postProcess4.onApply = function (effect) {
  effect.setTextureFromPostProcess("sceneSampler", postProcess0);
  effect.setFloat("sceneIntensity", 0.5);
  effect.setFloat("glowIntensity", 0.4);
  effect.setFloat("highlightIntensity", 1.0);
};

----------------------------------------

TITLE: Basic HTML Structure
DESCRIPTION: Create a basic HTML structure for a Babylon.js application.

LANGUAGE: html
CODE:
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <title>Local Development</title>
    <script src="https://code.jquery.com/pep/0.4.2/pep.min.js"></script>
    <style>
      html, body {
        width: 100%;
        height: 100%;
        padding: 0;
        margin: 0;
        overflow: hidden;
      }
      #renderCanvas {
        width: 100%;
        height: 100%;
        display: block;
        font-size: 0;
      }
    </style>
  </head>
  <body>
    <canvas id="renderCanvas" touch-action="none"></canvas>
    <script src="main.js"></script>
  </body>
</html>

----------------------------------------

TITLE: Enabling Multiview for VR Experience in Babylon.js
DESCRIPTION: This code shows how to enable multiview rendering when creating a default VR experience in Babylon.js. It sets the 'useMultiview' option to true.

LANGUAGE: javascript
CODE:
scene.createDefaultVRExperience({ useMultiview: true });

----------------------------------------

TITLE: Initializing Virtual Joysticks in Babylon.js
DESCRIPTION: Creates virtual joysticks for left and right side of the screen using BABYLON.VirtualJoystick class. The boolean parameter determines if it's a left (true) or right (false) joystick.

LANGUAGE: javascript
CODE:
const leftJoystick = new BABYLON.VirtualJoystick(true);
const rightJoystick = new BABYLON.VirtualJoystick(false);

----------------------------------------

TITLE: U-Tube Ribbon Generation
DESCRIPTION: Creates a U-shaped tube by modifying x and y coordinates based on z parameter

LANGUAGE: javascript
CODE:
const paths = [];
for (let t = -6; t <= 6; t++) {
    const path = [];
    for (let a = 0; a < 2 * Math.PI; a += Math.PI / 8) {
        let x = 2 * Math.cos(a) + t / 2;
        let y = 2 * Math.sin(a) + t * t / 4;
        let z = t;
        path.push(new BABYLON.Vector3(x, y, z))
    }
    path.push(path[0]); // close circle
    paths.push(path)
}

----------------------------------------

TITLE: U-Tube Ribbon Generation
DESCRIPTION: Creates a U-shaped tube by modifying x and y coordinates based on z parameter

LANGUAGE: javascript
CODE:
const paths = [];
for (let t = -6; t <= 6; t++) {
    const path = [];
    for (let a = 0; a < 2 * Math.PI; a += Math.PI / 8) {
        let x = 2 * Math.cos(a) + t / 2;
        let y = 2 * Math.sin(a) + t * t / 4;
        let z = t;
        path.push(new BABYLON.Vector3(x, y, z))
    }
    path.push(path[0]); // close circle
    paths.push(path)
}

----------------------------------------

TITLE: Adding Animation to Object in Babylon.js
DESCRIPTION: Shows how to add an animation to an object's animations array in Babylon.js, allowing the animation to target that specific object.

LANGUAGE: javascript
CODE:
myMaterial.animations.push(myAnim);

----------------------------------------

TITLE: Using Scene Optimizer Helper
DESCRIPTION: Demonstrates use of the static OptimizeAsync helper function for quick scene optimization setup.

LANGUAGE: javascript
CODE:
BABYLON.SceneOptimizer.OptimizeAsync(scene),

----------------------------------------

TITLE: Using increaseVertices Method (Babylon.js v4.0+)
DESCRIPTION: Simple method to increase mesh vertices using the built-in function available in Babylon.js version 4.0 and later. Parameter n determines the number of points added per side of each facet.

LANGUAGE: javascript
CODE:
mesh.increaseVertices(n);

----------------------------------------

TITLE: Checking GUIRadio Visibility in BabylonJS
DESCRIPTION: Method to check if the radio button is currently visible.

LANGUAGE: javascript
CODE:
isVisible() → void

----------------------------------------

TITLE: Getting Controller Ray Direction in WebXR
DESCRIPTION: Demonstrates how to get pointer and grip ray directions from a WebXR input source using getWorldPointerRayToRef method.

LANGUAGE: javascript
CODE:
// Get the pointer direction ray.
const pointerRay = new BABYLON.Ray();
xrInputSource.getWorldPointerRayToRef(pointerRay);

// Try to get the grip direction ray. If that's not available,
// the pointer direction ray will be given.
const gripRay = new BABYLON.Ray();
xrInputSource.getWorldPointerRayToRef(gripRay, /* gripIfAvailable = */ true);

----------------------------------------

TITLE: Adding Animation to Object in Babylon.js
DESCRIPTION: Shows how to add an animation to an object's animations array in Babylon.js, allowing the animation to target that specific object.

LANGUAGE: javascript
CODE:
myMaterial.animations.push(myAnim);

----------------------------------------

TITLE: Moving an Agent to a Destination in Babylon.js
DESCRIPTION: Command an agent to move to a specific destination on the navigation mesh. This uses the agent's index and calculates the closest valid point for navigation.

LANGUAGE: javascript
CODE:
crowd.agentGoto(agentIndex, navigationPlugin.getClosestPoint(endPoint));

----------------------------------------

TITLE: Registering Instance Buffers in Babylon.js
DESCRIPTION: Demonstrates the alternative method of registering instance buffers using registerInstancedBuffer and setting instance-specific values.

LANGUAGE: javascript
CODE:
mesh.registerInstancedBuffer("color", 4);
box.instancedBuffers.color = new BABYLON.Color4(Math.random(), Math.random(), Math.random(), 1);
let instance = box.createInstance("box1");
instance.instancedBuffers.color = new BABYLON.Color4(Math.random(), Math.random(), Math.random(), 1);

----------------------------------------

TITLE: Demonstrating Collision Speed Increase in BabylonJS
DESCRIPTION: This code snippet shows how collisions can increase particle speeds. It sets up four sets of particles in specific positions to demonstrate speed amplification through collisions.

LANGUAGE: javascript
CODE:
// Code not provided in the original text, but referenced as Playground id=#1DJ7RH

----------------------------------------

TITLE: Creating AnimationGroup from Existing Animatables in BabylonJS
DESCRIPTION: Shows how to create a new AnimationGroup by enumerating through the animations contained in an existing animatable object.

LANGUAGE: javascript
CODE:
const animationGroup = new BABYLON.AnimationGroup("my-animation-group");

for (anim of idleAnim.getAnimations()) {
  animationGroup.addTargetedAnimation(anim.animation, anim.target);
}

----------------------------------------

TITLE: Setting GUICheckbox State in BabylonJS
DESCRIPTION: Method to set the checked state of the GUICheckbox.

LANGUAGE: javascript
CODE:
setChecked(value) → void

----------------------------------------

TITLE: WebGPU Initialization Configuration
DESCRIPTION: Configuration for WebGPU initialization including glslang and twgsl paths and options.

LANGUAGE: javascript
CODE:
const glslangOptions = {
  jsPath: baseUrl + "/glslang/glslang.js",
  wasmPath: baseUrl + "/glslang/glslang.wasm"
};

const twgslOptions = {
  jsPath: baseUrl + "/twgsl/twgsl.js",
  wasmPath: baseUrl + "/twgsl/twgsl.wasm"
};

----------------------------------------

TITLE: Rendering Babylon.js Scene with Pixi.js Overlay
DESCRIPTION: Implements a render loop that first renders the Babylon.js scene, then renders the Pixi.js stage on top. Includes necessary cache wiping and renderer reset steps.

LANGUAGE: javascript
CODE:
engine.runRenderLoop(function () {
  scene.render();
  engine.wipeCaches(true);

  pixiRenderer.reset();
  pixiRenderer.render(stage);
});

----------------------------------------

TITLE: Checking GUICheckbox State in BabylonJS
DESCRIPTION: Method to check if the GUICheckbox is in a checked state.

LANGUAGE: javascript
CODE:
isChecked() → void

----------------------------------------

TITLE: Adding Constraints to Physics Body Instances in Babylon.js
DESCRIPTION: This code snippet shows how to add constraints between specific instances of physics bodies in Babylon.js. It demonstrates adding constraints between different instances of the same body and between instances of different bodies.

LANGUAGE: javascript
CODE:
// This will add a constraint between the instance in index 3 of body A, and the instance in index 2 of body B
bodyA.addConstraint(bodyB, constraint, 3, 2);
// The constraint can also be between two instances in the same body
bodyA.addConstraint(bodyA, constraint, 4, 7); 

----------------------------------------

TITLE: Implementing Fog in Fragment Shader for Babylon.js
DESCRIPTION: This snippet shows a complete fragment shader implementation with fog support in Babylon.js. It includes texture sampling, fog fragment declaration, and application of fog to the final color.

LANGUAGE: GLSL
CODE:
BABYLON.Effect.ShadersStore['myFragmentShader'] = `
varying vec2 vUV;

uniform sampler2D tex;
#include<fogFragmentDeclaration>

vec2 uvPixelPerfect(vec2 uv) {
    vec2 res = vec2(textureSize(tex, 0));
    
    uv = uv * res;
    vec2 seam = floor(uv + 0.5);
    uv = seam + clamp((uv-seam) / fwidth(uv), -0.5, 0.5);
    return uv / res;
}

void main() {
    vec4 color = texture2D(tex,vUV);
    gl_FragColor = color;
    #include<fogFragment>(color,gl_FragColor)
}`

----------------------------------------

TITLE: Getting Properties in Babylon.js Components
DESCRIPTION: Example of using the GetProperty method to retrieve properties from attached editor script components.

LANGUAGE: javascript
CODE:
    module PROJECT {
        export class TestMeshComponent extends BABYLON.MeshComponent {

            protected start() :void {
                const hello:string = this.getProperty("hello", "Default Value");
                console.log("Echo Hello: " + hello);
            }
        }
    }

----------------------------------------

TITLE: Retrieving Vertex Data in Babylon.js
DESCRIPTION: This snippet demonstrates how to obtain various types of vertex data from a mesh in Babylon.js, including positions, normals, colors, UVs, and indices.

LANGUAGE: javascript
CODE:
var positions = mesh.getVerticesData(BABYLON.VertexBuffer.PositionKind);
var normals = mesh.getVerticesData(BABYLON.VertexBuffer.NormalKind);
var colors = mesh.getVerticesData(BABYLON.VertexBuffer.ColorKind);
var uvs = mesh.getVerticesData(BABYLON.VertexBuffer.UVKind);

var indices = mesh.getIndices();

----------------------------------------

TITLE: Creating and Rendering a Simple Smart Filter in Babylon.js
DESCRIPTION: Demonstrates the simplest usage of Smart Filters by creating a basic filter, setting up a runtime, and rendering a frame to the canvas. It uses ThinEngine for rendering.

LANGUAGE: typescript
CODE:
// Create a SmartFilter
const smartFilter = new SmartFilter("Simplest");
const titleInput = new InputBlock(smartFilter, "logo", ConnectionPointType.Texture, logoTexture);
titleInput.output.connectTo(smartFilter.output);

// Create a SmartFilterRuntime
const engine = new ThinEngine(canvas, true);
const runtime = await smartFilter.createRuntimeAsync(engine);

// Render one frame
runtime.render();

----------------------------------------

TITLE: Implementing Custom Loading Screen in TypeScript
DESCRIPTION: TypeScript implementation of a custom loading screen implementing the ILoadingScreen interface.

LANGUAGE: javascript
CODE:
class CustomLoadingScreen implements ILoadingScreen {
  public loadingUIBackgroundColor: string
  constructor(public loadingUIText: string) {}
  public displayLoadingUI() {
    alert(this.loadingUIText);
  }

  public hideLoadingUI() {
    alert("Loaded!");
  }
}

----------------------------------------

TITLE: Creating and Rendering Smart Filter Runtime in TypeScript
DESCRIPTION: Shows how to create a runtime from a Smart Filter and render it. The runtime contains all necessary resources and commands for rendering the filter.

LANGUAGE: typescript
CODE:
const runtime = await smartFilter.createRuntimeAsync(engine);
runtime.render();

----------------------------------------

TITLE: Defining Custom Collection Strategy in JavaScript
DESCRIPTION: Demonstrates how to create a custom collection strategy function for the Performance Profiler. It shows the structure of the strategy object with id, getData, and dispose functions.

LANGUAGE: javascript
CODE:
var someVariableToTrack;

const someStrategyCallback = (scene) => {
    return {
        id: "some strategy id",
        getData: () => someVariableToTrack,
        dispose: () => {
            // do any clean up here.
        }
    }
};

----------------------------------------

TITLE: Checking Visibility of GUITextfield in BabylonJS
DESCRIPTION: Method to check if the GUITextfield is currently visible.

LANGUAGE: javascript
CODE:
isVisible() → void

----------------------------------------

TITLE: Controller Component Event Handling
DESCRIPTION: Example of handling Quest 2 controller button events to modify 3D object scaling based on trigger input.

LANGUAGE: javascript
CODE:
const xr_ids = motionController.getComponentIds();
let triggerComponent = motionController.getComponent(xr_ids[0]); //xr-standard-trigger
triggerComponent.onButtonStateChangedObservable.add(() => {
  if (triggerComponent.pressed) {
    Box_Right_Trigger.scaling = new BABYLON.Vector3(1.2, 1.2, 1.2);
  } else {
    Box_Right_Trigger.scaling = new BABYLON.Vector3(1, 1, 1);
  }
});

----------------------------------------

TITLE: Animating Morph Targets
DESCRIPTION: Creates and applies animations to morph target influences using the Babylon.js animation system.

LANGUAGE: javascript
CODE:
const myAnim = new BABYLON.Animation(name, "influence", frames_per_second, BABYLON.Animation.ANIMATIONTYPE_FLOAT, loop_mode);
mesh.animations.push(myAnim);
scene.beginAnimation(morphTarget, from, to, true);

----------------------------------------

TITLE: Displaying Path3D Curve with Vector Components
DESCRIPTION: Creates a visual representation of a Path3D curve showing tangents (red), normals (green), and binormals (blue) at each point. Takes a Path3D object and optional size parameter to control vector length display. Uses BABYLON.MeshBuilder to create lines for visualization.

LANGUAGE: javascript
CODE:
function showPath3D(path3d, size) {
  size = size || 0.5;
  const curve = path3d.getCurve();
  const tgts = path3d.getTangents();
  const norms = path3d.getNormals();
  const binorms = path3d.getBinormals();
  let vcTgt, vcNorm, vcBinorm;
  const line = BABYLON.MeshBuilder.CreateLines("curve", { points: curve }, scene);
  for (let i = 0; i < curve.length; i++) {
    vcTgt = BABYLON.MeshBuilder.CreateLines("tgt" + i, { points: [curve[i], curve[i].add(tgts[i].scale(size))] }, scene);
    vcNorm = BABYLON.MeshBuilder.CreateLines("norm" + i, { points: [curve[i], curve[i].add(norms[i].scale(size))] }, scene);
    vcBinorm = BABYLON.MeshBuilder.CreateLines("binorm" + i, { points: [curve[i], curve[i].add(binorms[i].scale(size))] }, scene);
    vcTgt.color = BABYLON.Color3.Red();
    vcNorm.color = BABYLON.Color3.Green();
    vcBinorm.color = BABYLON.Color3.Blue();
  }
}

----------------------------------------

TITLE: Setting Initial XR Camera Pose in JavaScript
DESCRIPTION: This snippet shows how to use the onInitialXRPoseSetObservable to adjust the XR camera's position before the first frame is rendered.

LANGUAGE: javascript
CODE:
xrBasicHelper.onInitialXRPoseSetObservable.add((xrCamera) => {
    // floor is at y === 2
    xrCamera.position.y = 2;
});

----------------------------------------

TITLE: Creating Track Function Signature in JavaScript
DESCRIPTION: Defines the createTrack function that takes points and sections as parameters.

LANGUAGE: javascript
CODE:
var createTrack = function(points, sections) {

----------------------------------------

TITLE: Installing BabylonJS Core Package
DESCRIPTION: Command to install the @babylonjs/core package using npm.

LANGUAGE: bash
CODE:
npm install @babylonjs/core

----------------------------------------

TITLE: Implementing Mitre Extrusion Function in Babylon.js
DESCRIPTION: A function that creates extruded shapes with sharp corners using mitre joins. Takes a shape and path as input, supporting both open and closed extrusions. Uses vector mathematics to calculate proper corner intersections and maintain shape integrity at bends.

LANGUAGE: javascript
CODE:
var mitredExtrude = function (name, options, scene) {
    var shape = options.shape;
    var path = options.path;
    var closed = options.close || false;

    var nbPoints = path.length;
    var line = BABYLON.Vector3.Zero();
    var nextLine = BABYLON.Vector3.Zero();
    var axisX = BABYLON.Vector3.Zero();
    var axisY = BABYLON.Vector3.Zero();
    var axisZ = BABYLON.Vector3.Zero();
    var nextAxisX = BABYLON.Vector3.Zero();
    var nextAxisY = BABYLON.Vector3.Zero();
    var nextAxisZ = BABYLON.Vector3.Zero();
    var startPoint = BABYLON.Vector3.Zero();
    var nextStartPoint = BABYLON.Vector3.Zero();
    var bisector = BABYLON.Vector3.Zero();
    var point = BABYLON.Vector3.Zero();
    var prjctZ = 0;
    var distance = 0;
    var ray;

    var allPaths = [];

    for (let s = 0; s < shape.length; s++) {
        path[1].subtractToRef(path[0], line);
        axisZ = line.clone().normalize();
        axisX = BABYLON.Vector3.Cross(scene.activeCamera.position, axisZ).normalize();
        axisY = BABYLON.Vector3.Cross(axisZ, axisX);
        startPoint = path[0].add(axisX.scale(shape[s].x)).add(axisY.scale(shape[s].y));
        var ribbonPath = [startPoint.clone()];
        for (let p = 0; p < nbPoints - 2; p++) {
            path[p + 2].subtractToRef(path[p + 1], nextLine);
            nextAxisZ = nextLine.clone().normalize();
            nextAxisX = BABYLON.Vector3.Cross(scene.activeCamera.position, nextAxisZ).normalize();
            nextAxisY = BABYLON.Vector3.Cross(nextAxisZ, nextAxisX);
            nextAxisZ.subtractToRef(axisZ, bisector);
            planeParallel = BABYLON.Vector3.Cross(nextAxisZ, axisZ);
            planeNormal = BABYLON.Vector3.Cross(planeParallel, bisector);
            plane = BABYLON.Plane.FromPositionAndNormal(path[p + 1], planeNormal);
            ray = new BABYLON.Ray(startPoint, axisZ);
            distance = ray.intersectsPlane(plane);
            startPoint.addToRef(axisZ.scale(distance), nextStartPoint);
            ribbonPath.push(nextStartPoint.clone());

            axisX = nextAxisX.clone();
            axisY = nextAxisY.clone();
            axisZ = nextAxisZ.clone();
            startPoint = nextStartPoint.clone();
        }
        if (closed) {
            path[0].subtractToRef(path[nbPoints - 1], nextLine);
            nextAxisZ = nextLine.clone().normalize();
            nextAxisX = BABYLON.Vector3.Cross(scene.activeCamera.position, nextAxisZ).normalize();
            nextAxisY = BABYLON.Vector3.Cross(nextAxisZ, nextAxisX);
            nextAxisZ.subtractToRef(axisZ, bisector);
            planeParallel = BABYLON.Vector3.Cross(nextAxisZ, axisZ);
            planeNormal = BABYLON.Vector3.Cross(planeParallel, bisector);
            plane = BABYLON.Plane.FromPositionAndNormal(path[nbPoints - 1], planeNormal);
            ray = new BABYLON.Ray(startPoint, axisZ);
            distance = ray.intersectsPlane(plane);
            startPoint.addToRef(axisZ.scale(distance), nextStartPoint);
            ribbonPath.push(nextStartPoint.clone());

            axisX = nextAxisX.clone();
            axisY = nextAxisY.clone();
            axisZ = nextAxisZ.clone();
            startPoint = nextStartPoint.clone();

            path[1].subtractToRef(path[0], nextLine);
            nextAxisZ = nextLine.clone().normalize();
            nextAxisX = BABYLON.Vector3.Cross(scene.activeCamera.position, nextAxisZ).normalize();
            nextAxisY = BABYLON.Vector3.Cross(nextAxisZ, nextAxisX);
            nextAxisZ.subtractToRef(axisZ, bisector);
            planeParallel = BABYLON.Vector3.Cross(nextAxisZ, axisZ);
            planeNormal = BABYLON.Vector3.Cross(planeParallel, bisector);
            plane = BABYLON.Plane.FromPositionAndNormal(path[0], planeNormal);
            ray = new BABYLON.Ray(startPoint, axisZ);
            distance = ray.intersectsPlane(plane);
            startPoint.addToRef(axisZ.scale(distance), nextStartPoint);
            ribbonPath.shift();
            ribbonPath.unshift(nextStartPoint.clone());
        } else {
            planeNormal = axisZ;
            plane = BABYLON.Plane.FromPositionAndNormal(path[nbPoints - 1], planeNormal);
            ray = new BABYLON.Ray(startPoint, axisZ);
            distance = ray.intersectsPlane(plane);
            startPoint.addToRef(axisZ.scale(distance), nextStartPoint);
            ribbonPath.push(nextStartPoint.clone());
        }
        allPaths.push(ribbonPath);
    }
    var ribbon = BABYLON.MeshBuilder.CreateRibbon("ribbon", { pathArray: allPaths, sideOrientation: BABYLON.Mesh.DOUBLESIDE, closeArray: true, closePath: closed }, scene);

    return ribbon;
};

----------------------------------------

TITLE: Installing Babylon.js Core Package
DESCRIPTION: Commands for installing the @babylonjs/core package using npm or yarn package managers

LANGUAGE: bash
CODE:
npm install @babylonjs/core

LANGUAGE: bash
CODE:
yarn add @babylonjs/core

----------------------------------------

TITLE: Adjusting GlowLayer Color Intensity in Babylon.js
DESCRIPTION: Sets the intensity of the glow effect, controlling the brightness of the glowing areas.

LANGUAGE: javascript
CODE:
const gl = new BABYLON.GlowLayer("glow", scene);
gl.intensity = 0.5;

----------------------------------------

TITLE: Getting Path Vectors in Babylon.js
DESCRIPTION: Demonstrates how to retrieve tangents, normals, and binormals from a Path3D object.

LANGUAGE: javascript
CODE:
const tangents = path3D.getTangents();
const normals = path3D.getNormals();
const binormals = path3D.getBinormals();

----------------------------------------

TITLE: Initializing Puppeteer Browser for BabylonJS
DESCRIPTION: Creates a Puppeteer browser instance and loads a BabylonJS scene from the playground.

LANGUAGE: javascript
CODE:
const browser = await puppeteer.launch({});
const page = await browser.newPage();
await page.goto("https://playground.babylonjs.com/frame.html#PN1NNI#1");

----------------------------------------

TITLE: WGSL Compute Shader Input Bindings
DESCRIPTION: Example of input bindings in a WGSL compute shader, showing group and binding declarations.

LANGUAGE: wgsl
CODE:
@group(0) @binding(0) var dest : texture_storage_2d<rgba8unorm, write>;
@group(0) @binding(1) var srcSampler : sampler;
@group(0) @binding(2) var src : texture_2d<f32>;

----------------------------------------

TITLE: Generating and Downloading Delta File in Babylon.js
DESCRIPTION: This code shows how to generate a delta file from recorded changes and download it as a JSON file. This allows you to save scene modifications for later use.

LANGUAGE: javascript
CODE:
var delta = recorder.getDelta();

BABYLON.Tools.Download(JSON.stringify(delta), "delta.json");

----------------------------------------

TITLE: Initializing AttachToBoxBehavior in Babylon.js
DESCRIPTION: Creates an AttachToBoxBehavior instance for attaching a mesh or UI to a mesh's bounding box. The behavior can be customized to adjust the positioning of the attached mesh.

LANGUAGE: javascript
CODE:
const behavior = new BABYLON.AttachToBoxBehavior(appBar);
boundingBox.addBehavior(behavior);

behavior.distanceAwayFromFace = 0.15;
behavior.distanceAwayFromBottomOfFace = 0.15;

----------------------------------------

TITLE: Loading babylon-mmd in Babylon.js Playground
DESCRIPTION: TypeScript code to dynamically load babylon-mmd in a Babylon.js Playground environment.

LANGUAGE: typescript
CODE:
declare const BABYLONMMD: any;

await new Promise((resolve) => {
    const babylonMmdScript = document.createElement("script");
    babylonMmdScript.src = "https://www.unpkg.com/babylon-mmd/umd/babylon.mmd.min.js";
    document.head.appendChild(babylonMmdScript);
    babylonMmdScript.onload = resolve;
});

----------------------------------------

TITLE: Detecting End of Babylon.js Video Recording
DESCRIPTION: This snippet shows how to use a promise to detect when a video recording of a Babylon.js scene has completed.

LANGUAGE: javascript
CODE:
if (BABYLON.VideoRecorder.IsSupported(engine)) {
    var recorder = new BABYLON.VideoRecorder(engine);
    recorder.startRecording().then(() => {
        alert("done");
    });
}

----------------------------------------

TITLE: Dynamic Material Management in SPS
DESCRIPTION: Shows how to dynamically manage materials in SPS using setMultiMaterial method for runtime material updates.

LANGUAGE: javascript
CODE:
var sps = new BABYLON.SolidParticleSystem("sps", scene, {
  enableMultiMaterial: true,
  updatable: false
});
sps.addShape(model1, 300, { positionFunction: initFunction });
sps.addShape(model2, 300, { positionFunction: initFunction });
sps.addShape(model3, 300, { positionFunction: initFunction });
sps.buildMesh();

sps.setMultiMaterial([mat0, mat1, mat2]);

sps.setMultiMaterial([mat1, mat0, mat2]);

----------------------------------------

TITLE: Local Controller Definitions Configuration
DESCRIPTION: Shows how to configure Babylon.js to use local controller definitions instead of the online repository.

LANGUAGE: javascript
CODE:
// import the ones you want to use
import { WebXRMicrosoftMixedRealityController } from "@babylonjs/core/XR/motionController/webXRMicrosoftMixedRealityController";

// prioritize the local classes (but use online if controller not found)
WebXRMotionControllerManager.PrioritizeOnlineRepository = false;
// or disable the online repository
WebXRMotionControllerManager.UseOnlineRepository = false;

// now, if loading a microsoft motion controller it will use the local class

----------------------------------------

TITLE: Modifying GUI Control Properties in Babylon.js
DESCRIPTION: Shows how to access and modify properties of GUI controls after loading them into a Babylon.js scene.

LANGUAGE: javascript
CODE:
let backgroundBox = advancedTexture.getControlByName("BackgroundBox");
backgroundBox.background = "blue";

----------------------------------------

TITLE: Decorating a Property in Babylon.js Editor
DESCRIPTION: This snippet demonstrates how to use the @visibleInInspector decorator to expose a property named 'Speed' of type 'number' with a default value of 0.04 in the Babylon.js Editor.

LANGUAGE: typescript
CODE:
@visibleInInspector("number", "Speed", 0.04)
private _speed: number;

----------------------------------------

TITLE: WebXR Hit Test Interface Definition
DESCRIPTION: Defines the interface for WebXR Hit Test feature configuration options.

LANGUAGE: javascript
CODE:
interface IWebXRHitTestOptions {
    testOnPointerDownOnly?: boolean;
    worldParentNode?: TransformNode;
}

----------------------------------------

TITLE: Recycling Particles in Babylon.js Point Cloud System
DESCRIPTION: This snippet demonstrates how to recycle particles in a point cloud system. It resets particle properties when they exceed a certain height limit, effectively recycling them for continuous animation.

LANGUAGE: javascript
CODE:
pcs.recycleParticle = function(particle) {
    particle.position = BABYLON.Vector3.Zero();
    particle.velocity = BABYLON.Vector3.Zero();
    particle.heightLim = 4 + 0.5 * Math.random();
}

pcs.updateParticle = function(particle) {
    if (particle.position.y > particle.heightLim) {
      this.recycleParticle(particle);
    }
    particle.velocity.addInPlace(particle.acceleration);
    particle.position.addInPlace(particle.velocity);
}

----------------------------------------

TITLE: Creating a 2D Line with Texture Following Path
DESCRIPTION: This function creates a 2D line mesh where the texture follows the line direction. It supports open and closed lines in the XoY plane.

LANGUAGE: javascript
CODE:
var line2D = function(name, options, scene) {
    // ... (full code not shown for brevity)
}

----------------------------------------

TITLE: Creating Icosphere with Mesh in Babylon.js
DESCRIPTION: This snippet shows how to create an icosphere using BABYLON.Mesh.CreateIcoSphere(). It uses the same format and options as the MeshBuilder method.

LANGUAGE: javascript
CODE:
const icosphere = BABYLON.Mesh.CreateIcoSphere("icosphere", options, scene);

----------------------------------------

TITLE: Creating Closed Circular Track
DESCRIPTION: Creates a circular track path with multiple sections and proper closure handling

LANGUAGE: javascript
CODE:
var points = [];
var n = 400; // number of points
var r = 20; //radius
for (let i = 0; i < n; i++) {
  points.push(new BABYLON.Vector3(r * Math.cos((i * 2 * Math.PI) / n), 0, r * Math.sin((i * 2 * Math.PI) / n)));
}

points.push(points[0]); // push to close path
var lines = BABYLON.MeshBuilder.CreateLines("lines", { points: points }, scene);
points.pop(); // remove before track creation

----------------------------------------

TITLE: Creating a GUICheckbox in BabylonJS
DESCRIPTION: Constructor for creating a new GUICheckbox. It takes parameters for id, options, GUI manager, callback function, and append behavior.

LANGUAGE: javascript
CODE:
new GUICheckbox(id, options, guimanager, callback, append)

----------------------------------------

TITLE: Updating Facebook Loading Progress
DESCRIPTION: Code to update the Facebook Instant Game loading screen progress using the Asset Manager's onProgress callback.

LANGUAGE: javascript
CODE:
loader.onProgress = (remaining: number, totalCount: number) => {
  FBInstant.setLoadingProgress(100 - remaining / totalCount);
};

----------------------------------------

TITLE: Adding User Action Request Handler
DESCRIPTION: Sets up an observer for detecting when browser policies prevent autoplay, allowing custom handling of video playback initialization.

LANGUAGE: javascript
CODE:
texture.onUserActionRequestedObservable.add(() => {
    scene.onPointerDown = function () {
        videoTexture.video.play();
    };
});

----------------------------------------

TITLE: Adding Elements to GUIDialog in BabylonJS
DESCRIPTION: Adds an element to the GUIDialog. This method allows for populating the dialog with various GUI components.

LANGUAGE: javascript
CODE:
add(element)

----------------------------------------

TITLE: Generating Babylon Provider Service
DESCRIPTION: Ionic CLI command to generate a provider service for managing Babylon.js engine instance.

LANGUAGE: bash
CODE:
ionic g providerBabylon.js

----------------------------------------

TITLE: Configuring Bounding Box Gizmo Child Inclusion in Babylon.js
DESCRIPTION: Demonstrates how to configure the BoundingBoxGizmo to ignore children or include specific children when computing the bounding box.

LANGUAGE: javascript
CODE:
gizmo.ignoreChildren = true;

gizmo.includeChildPredicate = (m) => {
  return m == sphere2;
};

----------------------------------------

TITLE: Practical Tag Usage Examples
DESCRIPTION: Examples of practical tag usage in Babylon.js scenes for filtering meshes

LANGUAGE: javascript
CODE:
const meshes = myScene.getMeshesByTags("tag1 && (tag2 || tag4 || !tag5)) || !(!tag1) && !!!tag5");

const meshesToLightByLight1 = myScene.getMeshesByTags("mustBeLightedByLight1");

const ghosts = myScene.getMeshesByTags("ghost && green");

for (let index = 0; index < ghosts.length; index++) {
  ghosts[index].isVisible = true;
}

----------------------------------------

TITLE: Complex GLSL Fragment Shader with Texture Mixing
DESCRIPTION: A more advanced GLSL fragment shader that mixes colors from two sampler textures.

LANGUAGE: glsl
CODE:
#ifdef GL_ES
precision highp float;
#endif

varying vec2 vPosition;
varying vec2 vUV;

uniform sampler2D grass;
uniform sampler2D dirt;

void main(void) {
 vec3 color = mix(texture2D(dirt, vUV).xyz, texture2D(grass, vUV).xyz, 0.5);
 gl_FragColor = vec4(color, 1.0);
}

----------------------------------------

TITLE: Enabling GLTF Loader Logging in Babylon.js
DESCRIPTION: Enable detailed logging for debugging GLTF loading process and LOD transitions.

LANGUAGE: javascript
CODE:
BABYLON.SceneLoader.OnPluginActivatedObservable.addOnce(function (loader) {
  if (loader.name === "gltf") {
    loader.loggingEnabled = true;
  }
});

----------------------------------------

TITLE: Creating Bowling Lane with Physics
DESCRIPTION: Generates the bowling lane mesh and configures its physics properties. Creates a static ground surface for ball and pin interactions.

LANGUAGE: javascript
CODE:
const lane = BABYLON.MeshBuilder.CreateGround("lane", { width: 6, height: 20 }, scene);
lane.position = new BABYLON.Vector3(0, 0, 4);
const laneAggregate = new BABYLON.PhysicsAggregate(lane, BABYLON.PhysicsShapeType.BOX, { mass: 0 }, scene);

----------------------------------------

TITLE: Configuring Fog in Babylon.js
DESCRIPTION: Demonstrates how to add and configure fog effects in a Babylon.js scene. It covers setting fog mode, density, start/end distances, and color.

LANGUAGE: javascript
CODE:
scene.fogMode = BABYLON.Scene.FOGMODE_EXP;

scene.fogDensity = 0.01;

scene.fogStart = 20.0;
scene.fogEnd = 60.0;

scene.fogColor = new BABYLON.Color3(0.9, 0.9, 0.85);

----------------------------------------

TITLE: Creating a Sphere with Separate Body and Shape in Babylon.js V2
DESCRIPTION: This snippet demonstrates how to create a sphere with physics properties using separate PhysicsBody and PhysicsShapeSphere classes in Babylon.js V2. It allows for more fine-grained control and reusability of collision shapes.

LANGUAGE: javascript
CODE:
const sphere = BABYLON.MeshBuilder.CreateSphere("sphere", { diameter: 2, segments: 32 }, scene);
const sphereShape = new BABYLON.PhysicsShapeSphere(new BABYLON.Vector3(0, 0, 0), 1, scene);
const sphereBody = new BABYLON.PhysicsBody(sphere, BABYLON.PhysicsMotionType.DYNAMIC, false, scene);
sphereShape.material = { friction: 0.2, restitution: 0.3 };
sphereBody.shape = sphereShape;
sphereBody.setMassProperties({ mass: 1 });

----------------------------------------

TITLE: Implementing Particle Recycling
DESCRIPTION: Shows how to implement a particle recycling pattern using custom update and recycle functions.

LANGUAGE: javascript
CODE:
const updateParticle = (particle) => {
    if (particle condition) {
        recycleParticle(particle)
    }
    doUpdate(particle);
}

----------------------------------------

TITLE: Basic Ascii Art Post Process Implementation
DESCRIPTION: Creates and attaches a basic Ascii Art post process to a camera.

LANGUAGE: javascript
CODE:
var postProcess = new BABYLON.AsciiArtPostProcess("AsciiArt", camera);

----------------------------------------

TITLE: Listening to Keyboard Events in Babylon.js
DESCRIPTION: This snippet demonstrates how to use the @onKeyboardEvent decorator to listen for keyboard events. It shows examples of listening for a single key, multiple keys, and using key codes instead of key values.

LANGUAGE: typescript
CODE:
@onKeyboardEvent("z", KeyboardEventTypes.KEYUP)
protected _keyup(info: KeyboardInfo): void {
    console.log(info.event.key);
}

@onKeyboardEvent(["z", "q", "s", "d"], KeyboardEventTypes.KEYUP)
protected _keyup(info: KeyboardInfo): void {
    console.log(info.event.key);
}

@onKeyboardEvent(32 /* or [32, 53] for multiple keys */, KeyboardEventTypes.KEYUP)
protected _keyup(info: KeyboardInfo): void {
    console.log(info.event.keyCode);
}

----------------------------------------

TITLE: Getting Elements by Class Name
DESCRIPTION: JavaScript example of retrieving DOM elements by class name

LANGUAGE: javascript
CODE:
const elements = document.getElementsByClassName(".center");

----------------------------------------

TITLE: Disabling Combine Effect in SSAO Pipeline for Babylon.js
DESCRIPTION: Demonstrates how to disable the combine post-process effect in the SSAO pipeline, allowing direct viewing of the SSAO post-process output for debugging or visual analysis.

LANGUAGE: javascript
CODE:
scene.postProcessRenderPipelineManager.disableEffectInPipeline("ssaopipeline", ssao.SSAOCombineRenderEffect, cameras);

----------------------------------------

TITLE: Calculating Random Point on Facet in Babylon.js
DESCRIPTION: Generates a random point within a triangular facet using lambda and mu parameters to scale vectors.

LANGUAGE: javascript
CODE:
lamda = BABYLON.Scalar.RandomRange(0, 1);	
mu = BABYLON.Scalar.RandomRange(0, 1);
facetPoint = vertex0.add(vec0.scale(lambda)).add(vec1.scale(lambda * mu));

----------------------------------------

TITLE: Configuring Particle System Pre-warming in Babylon.js
DESCRIPTION: Sets up pre-warming cycles and step offset for initializing particle system state before rendering.

LANGUAGE: javascript
CODE:
system.preWarmCycles = 100;
system.preWarmStepOffset = 5;
system.start();

----------------------------------------

TITLE: Defining Base and Roof Apex Data in Babylon.js
DESCRIPTION: This snippet shows how to define the base data for a house floor plan and the roof apex data. The base data represents corner coordinates, while the roof apex data defines the highest points of the roof.

LANGUAGE: javascript
CODE:
var baseData = [-3, -2,  -1, -4,  1, -4,  3, -2,  5, -2,  5, 1,  2, 1,  2, 3,  -3, 3];
var roofApexData = [0, -2,  0, -0.5,  0, 2,  4.5, -0.5];

----------------------------------------

TITLE: Complete Scene Setup with Node Material
DESCRIPTION: Full implementation showing scene creation, particle system loading, and node material application with custom shader effects.

LANGUAGE: javascript
CODE:
const createScene = async function () {
  const scene = new BABYLON.Scene(engine);

  const camera = new BABYLON.ArcRotateCamera("Camera", 0, 0.8, 10, BABYLON.Vector3.Zero(), scene);
  camera.attachControl(canvas, true);

  // Create a random emitter
  const sphere = BABYLON.MeshBuilder.CreateSphere("sphere", { diameter: 0.01, segments: 4 }, scene);

  // Load the previously setup particle system (it was setup with the inspector)
  let system = await BABYLON.ParticleHelper.CreateFromSnippetAsync("T54JV7#13", scene, false);
  system.emitter = sphere;

  // Load our node material
  let nodeMaterial = await BABYLON.NodeMaterial.ParseFromSnippetAsync("#345ATT#4", scene);

  // Apply it to the particle system
  nodeMaterial.createEffectForParticles(system);

  return scene;
};

----------------------------------------

TITLE: Filtering Raycast Collisions in BabylonJS
DESCRIPTION: This snippet shows how to use raycast queries to filter collisions for specific objects. It demonstrates setting membership and collision masks for shapes and using these in raycast calls.

LANGUAGE: javascript
CODE:
var shapeA = new PhysicsShape(...);
var shapeB = new PhysicsShape(...);

shapeA.filterMembershipMask = 1; // 01 in binary
shapeB.filterMembershipMask = 2; // 10 in binary

/**
 *  EXAMPLE 1: will test only for shape A 
 */
physicsEngine.raycastToRef(start, end, raycastResult, {collideWith: 1});

/**
 *  EXAMPLE 2: will test only for shape B 
 */
physicsEngine.raycastToRef(start, end, raycastResult, {collideWith: 2});

/**
 *  EXAMPLE 3: will test for shape A AND shape B (as 3 is 11 in binary)
 */
physicsEngine.raycastToRef(start, end, raycastResult, {collideWith: 3});

----------------------------------------

TITLE: Configuring Babylon.js TypeScript Module Export
DESCRIPTION: Addition to babylon.d.ts file to enable proper module importing of Babylon.js in TypeScript files.

LANGUAGE: typescript
CODE:
export = BABYLON;

----------------------------------------

TITLE: Creating Geodesic Polyhedron with MeshBuilder in BabylonJS
DESCRIPTION: Creates a geodesic polyhedron mesh using BabylonJS MeshBuilder. The method accepts configuration options including size parameters, face colors, UV mapping, and orientation settings. The shape is determined by parameters m and n, where m must be greater than 0 and n must be less than or equal to m.

LANGUAGE: javascript
CODE:
const geodesic = BABYLON.MeshBuilder.CreateGeodesic("geodesic", options, scene); //scene is optional and defaults to the current scene

----------------------------------------

TITLE: Setting Up Material IDs Visualization
DESCRIPTION: Demonstrates configuration of MATERIALIDS mode with custom color palette for distinguishing different materials.

LANGUAGE: javascript
CODE:
BABYLON.MeshDebugPluginMaterial.Reset();

BABYLON.MeshDebugPluginMaterial.MaterialColors = [
    new BABYLON.Color3(1,0,0),
    new BABYLON.Color3(0,1,0),
    new BABYLON.Color3(0,0,1)
];

new BABYLON.MeshDebugPluginMaterial(mesh.material, {
    mode: BABYLON.MeshDebugMode.MATERIALIDS,
    multiply: false
});

----------------------------------------

TITLE: Creating a GUIMeter in BabylonJS
DESCRIPTION: Constructor for creating a new GUIMeter element. It takes parameters for id, options, GUI manager, callback function, and append flag.

LANGUAGE: javascript
CODE:
new GUIMeter(id, options, guimanager, callback, append)

----------------------------------------

TITLE: Accessing Light Source Mesh in Babylon.js Volumetric Light Scattering
DESCRIPTION: Retrieves the mesh used as the light source for the Volumetric Light Scattering effect.

LANGUAGE: javascript
CODE:
const mesh = vls.mesh;

----------------------------------------

TITLE: Optimizing Lights in BabylonJS
DESCRIPTION: Implements an optimized lighting system by pre-creating lights with zero intensity and manually assigning meshes to lights for better performance.

LANGUAGE: javascript
CODE:
const light = new PointLight("lantern light", this.mesh.getAbsolutePosition(), this._scene);
light.intensity = 0;
light.radius = 2;
light.diffuse = new Color3(0.45, 0.56, 0.8);
this._light = light;

LANGUAGE: javascript
CODE:
if (this.mesh.name.includes("14") || this.mesh.name.includes("15")) {
    light.includedOnlyMeshes.push(this._scene.getMeshByName("festivalPlatform1"));
} else if (this.mesh.name.includes("16") || this.mesh.name.includes("17")) {
    light.includedOnlyMeshes.push(this._scene.getMeshByName("festivalPlatform2"));
} else if (this.mesh.name.includes("18") || this.mesh.name.includes("19")) {
    light.includedOnlyMeshes.push(this._scene.getMeshByName("festivalPlatform3"));
} else if (this.mesh.name.includes("20") || this.mesh.name.includes("21")) {
    light.includedOnlyMeshes.push(this._scene.getMeshByName("festivalPlatform4"));
}
this._scene
    .getTransformNodeByName(this.mesh.name + "lights")
    .getChildMeshes()
    .forEach((m) => {
        light.includedOnlyMeshes.push(m);
    });

----------------------------------------

TITLE: Optimizing Smart Filter Graph in TypeScript
DESCRIPTION: Shows how to use the SmartFilterOptimizer to merge compatible shader blocks and reduce draw calls. This optimization creates a new, more efficient SmartFilter instance.

LANGUAGE: typescript
CODE:
const vfo = new SmartFilterOptimizer(smartFilter, {
  maxSamplersInFragmentShader: engine.getCaps().maxTexturesImageUnits,
});
const optimizedSmartFilter = vfo.optimize();

----------------------------------------

TITLE: Creating Procedural Texture Instance from Node Material
DESCRIPTION: Demonstrates how to create a procedural texture instance from a node material with a specified size of 256 pixels.

LANGUAGE: javascript
CODE:
const proceduralTexture = nodeMaterial.createProceduralTexture(256);

----------------------------------------

TITLE: Loading Exported Single Component in BabylonJS
DESCRIPTION: This snippet shows how to load a single GUI component exported from the FigmaToBabylonJS plugin into a BabylonJS project using the parse() method.

LANGUAGE: typescript
CODE:
const guiData = require("../figmaToBabylonJS.json")
let advancedTexture = AdvancedDynamicTexture.CreateFullscreenUI("UI")
const guiRect = Rectangle.Parse(guiData, null)
advancedTexture.addControl(guiRect)

----------------------------------------

TITLE: Creating Goldberg Polyhedron with MeshBuilder
DESCRIPTION: Creates a Goldberg polyhedron mesh using MeshBuilder with configurable options including size, orientation and update capability.

LANGUAGE: javascript
CODE:
const goldbergPoly = BABYLON.MeshBuilder.CreateGoldberg("goldberg", options, scene);

----------------------------------------

TITLE: Enabling Alpha Channel for Vertex Colors in Babylon.js
DESCRIPTION: Demonstrates how to enable the alpha channel for vertex colors in a Solid Particle System.

LANGUAGE: javascript
CODE:
SPS.mesh.hasVertexAlpha = true;

----------------------------------------

TITLE: Complete Example of .babylon File
DESCRIPTION: A comprehensive example of a .babylon file, showcasing various elements including cameras, lights, materials, meshes, and animations.

LANGUAGE: javascript
CODE:
{
    "autoClear": true,
    "clearColor": [0, 0, 0],
    "ambientColor": [0, 0, 0],
    "gravity": [0, -9.81, 0],
    "cameras": [{
        "name": "Camera",
        "id": "Camera",
        "position": [7.4811, 5.3437, -6.5076],
        "target": [-0.3174, 0.8953, 0.3125],
        "fov": 0.8576,
        "minZ": 0.1,
        "maxZ": 100
    }],
    "activeCamera": "Camera",
    "lights": [{
        "name": "Sun",
        "id": "Sun",
        "type": 1,
        "position": [0.926, 7.3608, 14.1829],
        "direction": [-0.347, -0.4916, -0.7987],
        "intensity": 1
    }],
    "materials": [{
        "name": "Material",
        "id": "Material",
        "ambient": [0.8, 0.8, 0.8],
        "diffuse": [0.64, 0.64, 0.64],
        "specular": [0.5, 0.5, 0.5],
        "specularPower": 50,
        "emissive": [0, 0, 0],
        "alpha": 1,
        "backFaceCulling": true,
        "diffuseTexture": {
            "name": "Metal1.png",
            "level": 1,
            "hasAlpha": 1,
            "coordinatesMode": 0,
            "uScale": 1,
            "vScale": 1
        }
    }],
    "meshes": [{
        "name": "Cube",
        "id": "Cube",
        "materialId": "Material",
        "position": [0, 0, 0],
        "rotation": [0, 0, 0],
        "scaling": [1, 1, 1],
        "isVisible": true,
        "animations": [{
            "dataType": 1,
            "framePerSecond": 30,
            "loopBehavior": 1,
            "name": "position animation",
            "property": "position",
            "keys": [{
                "frame": 0,
                "values": [0,0,0.0291]
            },
            {
                "frame": 30,
                "values": [0,0,10]
            }]
        }]
    }]
}

----------------------------------------

TITLE: Adding Pixi.js Sprites to Stage
DESCRIPTION: Creates a Pixi.js container (stage) and adds a sprite to it. The sprite is positioned at the center of the canvas.

LANGUAGE: javascript
CODE:
const stage = new PIXI.Container();
const sprite = PIXI.Sprite.from("https://i.imgur.com/1yLS2b8.jpg");
sprite.anchor.set(0.5);
sprite.position.set(canvas.width / 2, canvas.height / 2);
stage.addChild(sprite);

----------------------------------------

TITLE: Adding Tags to Objects
DESCRIPTION: Demonstrates different ways to add tags to JavaScript objects in Babylon.js

LANGUAGE: javascript
CODE:
const myJSObj1 = {};
// enable tags for myJSObj1
BABYLON.Tags.EnableFor(myJSObj); // => addTags is available on myJSObj1
// add tags to myJSObj1
myJSObj1.addTags("tag1 tag2"); // same as BABYLON.Tags.AddTagsTo(myJSObj1, "tag1 tag2"),

const myJSObj2 = {};
// add tags to myJSObj2 without having to enable tags for it first
BABYLON.Tags.AddTagsTo(myJSObj2, "tag1 tag2");

----------------------------------------

TITLE: Activating Dynamic Ragdoll Physics
DESCRIPTION: Switches the ragdoll from Kinematic mode to dynamic physics simulation mode.

LANGUAGE: javascript
CODE:
ragdoll.ragdoll();

----------------------------------------

TITLE: Setting Unlit Property for Lava Material
DESCRIPTION: Configures the lava material to ignore scene lighting by setting the unlit property to true.

LANGUAGE: javascript
CODE:
material.unlit = true;

----------------------------------------

TITLE: Initializing and Updating Point Cloud Particles in Babylon.js
DESCRIPTION: This snippet demonstrates how to initialize particle properties and update them in a render loop. It sets initial velocity and acceleration for particles, then updates their positions based on these properties.

LANGUAGE: javascript
CODE:
pcs.initParticles = function() {
   for (let p = 0; p < pcs.nbParticles; p++) {
       pcs.particles[p].velocity = BABYLON.Vector3.Zero();
       pcs.particles[p].acceleration = pcs.particles[p].position.scale(0.01);
   }
}

pcs.addSurfacePoints(model, 10000, BABYLON.PointColor.Color);
pcs.buildMeshAsync().then(() => {
  model.dispose()
  pcs.initParticles();
  pcs.setParticles();
});

pcs.updateParticle = function(particle) {
  particle.velocity.addInPlace(particle.acceleration);
  particle.position.addInPlace(particle.velocity);
}

scene.registerBeforeRender(() => {
  pcs.setParticles();
});

----------------------------------------

TITLE: Building WordPress Plugin
DESCRIPTION: Command to build the NPM-based WordPress plugin before installation

LANGUAGE: bash
CODE:
npm run build

----------------------------------------

TITLE: Implementing WebXR Snap-to Teleportation
DESCRIPTION: Implements snap-to functionality for precise teleportation to predefined hotspots with custom radius and constraints.

LANGUAGE: javascript
CODE:
const interestingSpot = new BABYLON.Vector3(-4, 0, 4);
const interestingSpot2 = new BABYLON.Vector3(4, 0, 4);
const teleportation = featuresManager.enableFeature(WebXRFeatureName.TELEPORTATION, "stable", {
  xrInput: xr.input,
  floorMeshes: [ground],
  snapPositions: [interestingSpot, interestingSpot2],
  snapToPositionRadius: 1.2,
  snapPointsOnly: true
});

----------------------------------------

TITLE: Initializing Babylon Namespace Tool in Maya MEL
DESCRIPTION: MEL command to launch the Babylon Namespace Tool for removing unwanted namespace text from selected objects in Maya.

LANGUAGE: mel
CODE:
babylonNameTool();

----------------------------------------

TITLE: Building and Applying a Node Material
DESCRIPTION: Shows how to build the internal shaders for a Node Material and apply it to a mesh.

LANGUAGE: JavaScript
CODE:
try {
  nodeMaterial.build(true);
} catch (err) {
  console.log("Unable to compile because " + err);
}

myMesh.material = nodeMaterial;

----------------------------------------

TITLE: Getting Component References in Babylon.js
DESCRIPTION: Demonstrates how to get references to other components attached to the owner object using GetComponent.

LANGUAGE: javascript
CODE:
    module PROJECT {
        export class TestMeshComponent extends BABYLON.MeshComponent {

            protected start() :void {
                const animator:BABYLON.AnimationState = this.getComponent("BABYLON.AnimationState");
                if (animator) console.log("Echo Owner: " + animator.owned.name);
            }
        }
    }

----------------------------------------

TITLE: Configuring Depth and Stencil Clearing in Utility Layer Scene in Babylon.js
DESCRIPTION: Shows how to configure depth and stencil clearing for the utility layer scene in Babylon.js to allow occlusion by the main scene.

LANGUAGE: javascript
CODE:
utilLayer.utilityLayerScene.autoClearDepthAndStencil = false;

----------------------------------------

TITLE: Projecting 3D Hotspot to 2D Screen Coordinates in Babylon.js
DESCRIPTION: Demonstrates how to project world coordinates to screen space coordinates, applicable for any world position including hotspots.

LANGUAGE: javascript
CODE:
const renderWidth = engine.getRenderWidth();
const renderHeight = engine.getRenderHeight();

const viewportWidth = camera.viewport.width * renderWidth;
const viewportHeight = camera.viewport.height * renderHeight;
const viewport = new BABYLON.Viewport(0, 0, viewportWidth, viewportHeight);

let screenPosition = new BABYLON.Vector3();

BABYLON.Vector3.ProjectToRef(worldPosition, BABYLON.Matrix.Identity(), scene.getTransformMatrix(), viewport, screenPosition);
line.x2 = screenPosition.x;
line.y2 = screenPosition.y;

----------------------------------------

TITLE: Custom Plugin Activation in Babylon.js
DESCRIPTION: Demonstrates how to use onPluginActivatedObservable to set properties and call methods specific to a particular loader plugin.

LANGUAGE: javascript
CODE:
BABYLON.SceneLoader.OnPluginActivatedObservable.add(function (loader) {
  if (loader.name === "gltf") {
    // do something with the loader
    // loader.<option1> = <...>
    // loader.<option2> = <...>
  }
});

----------------------------------------

TITLE: PCF/PCSS Shadow Map Depth Computation in GLSL
DESCRIPTION: Shader code for computing depth values when using PCF/PCSS filtering, handling both normal and reverse depth buffer cases with NDC range adjustments.

LANGUAGE: c
CODE:
#if SM_DEPTHTEXTURE == 1
    #ifdef IS_NDC_HALF_ZRANGE
        #define BIASFACTOR 0.5
    #else
        #define BIASFACTOR 1.0
    #endif

    #if SM_USE_REVERSE_DEPTHBUFFER == 1
        gl_Position.z -= biasAndScaleSM.x * gl_Position.w * BIASFACTOR;
    #else
        gl_Position.z += biasAndScaleSM.x * gl_Position.w * BIASFACTOR;
    #endif
#endif

----------------------------------------

TITLE: Setting Up Mesh Emitter for Attached Sub Emitters in Babylon.js
DESCRIPTION: Example of configuring a mesh-type emitter to support orientation-aware particle emission for attached sub emitters.

LANGUAGE: javascript
CODE:
subEmitter.particleSystem.emitter = new BABYLON.Mesh("", scene);

----------------------------------------

TITLE: Creating Optimized Smart Filter Runtime in TypeScript
DESCRIPTION: Demonstrates how to create a runtime for a Smart Filter with texture recycling optimization. This reduces the total number of textures used by the filter graph.

LANGUAGE: typescript
CODE:
const rtg = new RenderTargetGenerator(true); // true to minimize the number of textures created
const runtime = await filter.createRuntimeAsync(this.engine, rtg);

----------------------------------------

TITLE: Starting Flow Graph Coordinator
DESCRIPTION: Initiates all graphs connected to a coordinator.

LANGUAGE: javascript
CODE:
coordinator.start();

----------------------------------------

TITLE: Adding Holes to a Polygon Mesh in Babylon.js
DESCRIPTION: This snippet illustrates how to add multiple holes to a polygon mesh using the addHole method. Holes are defined as arrays of Vector2 points and must be in counter-clockwise order.

LANGUAGE: javascript
CODE:
polygon_triangulation.addHole(hole1);
polygon_triangulation.addHole(hole2);
polygon_triangulation.addHole(hole3);
var polygon = polygon_triangulation.build(true, 1.4);

----------------------------------------

TITLE: Task Error Handling in Babylon.js
DESCRIPTION: Defines error callback for handling failed asset loading tasks.

LANGUAGE: javascript
CODE:
meshTask.onError = function (task, message, exception) {
  console.log(message, exception);
};

----------------------------------------

TITLE: Defining a Light in .babylon Format
DESCRIPTION: Shows how different types of lights are defined in the .babylon file, including properties for position, direction, intensity, and color.

LANGUAGE: javascript
CODE:
{
    "name": string,
    "id": string,
    "type": int,
    "position": vector3,
    "direction": vector3,
    "intensity": float,
    "diffuse": color3,
    "specular": color3
}

----------------------------------------

TITLE: Implementing Basic BabylonJS Scene
DESCRIPTION: JavaScript function to create a basic BabylonJS scene with a blue box.

LANGUAGE: javascript
CODE:
import { Engine, Scene, FreeCamera, Vector3, MeshBuilder, StandardMaterial, Color3, HemisphericLight } from "@babylonjs/core";
const createScene = (canvas) => {
  const engine = new Engine(canvas);
  const scene = new Scene(engine);

  const camera = new FreeCamera("camera1", new Vector3(0, 5, -10), scene);
  camera.setTarget(Vector3.Zero());
  camera.attachControl(canvas, true);

  new HemisphericLight("light", Vector3.Up(), scene);

  const box = MeshBuilder.CreateBox("box", { size: 2 }, scene);
  const material = new StandardMaterial("box-material", scene);
  material.diffuseColor = Color3.Blue();
  box.material = material;

  engine.runRenderLoop(() => {
    scene.render();
  });
};

export { createScene };

----------------------------------------

TITLE: Creating Execution Context
DESCRIPTION: Creates a new execution context for storing variables and state information.

LANGUAGE: javascript
CODE:
const context = graph.createContext();

----------------------------------------

TITLE: Updating Particle Vertices in Babylon.js
DESCRIPTION: Demonstrates how to update individual particle vertices using the updateParticleVertex function, including position scaling, color manipulation and UV coordinate adjustment.

LANGUAGE: javascript
CODE:
SPS.computeParticleVertex = true; // false by default for performance reason
SPS.updateParticleVertex = function(particle, vertex, v) {
  // particle : the current particle object
  // vertex : the current vertex, a solidParticleVertex object
  // the index of the current vertex in the particle shape
  // example :
  if (particle.shapeID == 1) {
    vertex.position.x *= Math.random() + 1;
    vertex.position.y *= Math.random() + 1;
    vertex.position.z *= Math.random() + 1;
    vertex.color.r = Math.abs(Math.sin(v));
    vertex.color.g = 1 - vertex.color.r
    vertex.uv.x = particle.idx + v;
    vertex.uv.y = vertex.uv.x;
  }

};

----------------------------------------

TITLE: Customizing Lava Material Properties
DESCRIPTION: Adjusts the speed of lava perturbations and fog color properties of the lava material.

LANGUAGE: javascript
CODE:
lavaMaterial.speed = 2.0; // Default 1. Represents speed of perturbations of the lava
lavaMaterial.fogColor = new BABYLON.Color3(1, 0, 0); // Default to (0,0,0) black. Represents the color of the fog displayed on the lava ground.

----------------------------------------

TITLE: Creating Plane with Mesh Class in Babylon.js
DESCRIPTION: Creates a square plane using BABYLON.Mesh.CreatePlane() with basic parameters. This method is simpler but only creates square planes, requiring scaling for rectangular shapes.

LANGUAGE: javascript
CODE:
const plane = BABYLON.Mesh.CreatePlane("plane", size, scene);
const plane = BABYLON.Mesh.CreatePlane("plane", size, scene, updatable, sideOrientation);

----------------------------------------

TITLE: Installing 3D Experience Package
DESCRIPTION: Command to install the Vaporwear 3D experience NPM package into the WordPress plugin project

LANGUAGE: bash
CODE:
npm install --save @synthetic-magus/vaporwear-experience@0.0.1

----------------------------------------

TITLE: Initializing TexturePacker in Babylon.js
DESCRIPTION: Creates a new TexturePacker instance with specified name, target meshes, options, and scene. This is the first step in creating a texture package.

LANGUAGE: javascript
CODE:
let pack = new BABYLON.TexturePacker(name, targetMeshes, options, scene);

----------------------------------------

TITLE: Creating Reusable Babylon.js Scene Component in React
DESCRIPTION: A React component that handles Babylon.js scene initialization, engine setup, and cleanup. Includes window resize handling and proper resource disposal.

LANGUAGE: jsx
CODE:
import { useEffect, useRef } from "react";
import { Engine, Scene } from "@babylonjs/core";

export default ({ antialias, engineOptions, adaptToDeviceRatio, sceneOptions, onRender, onSceneReady, ...rest }) => {
  const reactCanvas = useRef(null);

  // set up basic engine and scene
  useEffect(() => {
    const { current: canvas } = reactCanvas;

    if (!canvas) return;

    const engine = new Engine(canvas, antialias, engineOptions, adaptToDeviceRatio);
    const scene = new Scene(engine, sceneOptions);
    if (scene.isReady()) {
      onSceneReady(scene);
    } else {
      scene.onReadyObservable.addOnce((scene) => onSceneReady(scene));
    }

    engine.runRenderLoop(() => {
      if (typeof onRender === "function") onRender(scene);
      scene.render();
    });

    const resize = () => {
      scene.getEngine().resize();
    };

    if (window) {
      window.addEventListener("resize", resize);
    }

    return () => {
      scene.getEngine().dispose();

      if (window) {
        window.removeEventListener("resize", resize);
      }
    };
  }, [antialias, engineOptions, adaptToDeviceRatio, sceneOptions, onRender, onSceneReady]);

  return <canvas ref={reactCanvas} {...rest} />;
};

----------------------------------------

TITLE: Including External AMP Resources
DESCRIPTION: HTML code for including required external resources including pointer events and Azure Media Player dependencies

LANGUAGE: html
CODE:
<!-- Link to pep.js to ensure pointer events work consistently in all browsers -->
<script src="https://code.jquery.com/pep/0.4.1/pep.js"></script>

<!-- Link to the AMP resources -->
<link href="https://amp.azure.net/libs/amp/2.2.3/skins/amp-default/azuremediaplayer.min.css" rel="stylesheet">
<script src="https://amp.azure.net/libs/amp/2.2.3/azuremediaplayer.min.js"></script>

----------------------------------------

TITLE: Custom Mesh Merging Function in JavaScript
DESCRIPTION: Provides a custom implementation for merging multiple meshes into a single mesh. This function handles various vertex data types and transforms vertices and normals using world matrices.

LANGUAGE: javascript
CODE:
const mergeMeshes = function (meshName, arrayObj, scene) {
  const arrayPos = [];
  const arrayNormal = [];
  const arrayUv = [];
  const arrayUv2 = [];
  const arrayColor = [];
  const arrayMatricesIndices = [];
  const arrayMatricesWeights = [];
  const arrayIndice = [];
  const savedPosition = [];
  const savedNormal = [];
  const newMesh = new BABYLON.Mesh(meshName, scene);
  const UVKind = true;
  const UV2Kind = true;
  const ColorKind = true;
  const MatricesIndicesKind = true;
  const MatricesWeightsKind = true;

  for (let i = 0; i != arrayObj.length; i++) {
    if (!arrayObj[i].isVerticesDataPresent([BABYLON.VertexBuffer.UVKind])) UVKind = false;
    if (!arrayObj[i].isVerticesDataPresent([BABYLON.VertexBuffer.UV2Kind])) UV2Kind = false;
    if (!arrayObj[i].isVerticesDataPresent([BABYLON.VertexBuffer.ColorKind])) ColorKind = false;
    if (!arrayObj[i].isVerticesDataPresent([BABYLON.VertexBuffer.MatricesIndicesKind])) MatricesIndicesKind = false;
    if (!arrayObj[i].isVerticesDataPresent([BABYLON.VertexBuffer.MatricesWeightsKind])) MatricesWeightsKind = false;
  }

  for (let i = 0; i != arrayObj.length; i++) {
    const ite = 0;
    const iter = 0;
    arrayPos[i] = arrayObj[i].getVerticesData(BABYLON.VertexBuffer.PositionKind);
    arrayNormal[i] = arrayObj[i].getVerticesData(BABYLON.VertexBuffer.NormalKind);
    if (UVKind) arrayUv = arrayUv.concat(arrayObj[i].getVerticesData(BABYLON.VertexBuffer.UVKind));
    if (UV2Kind) arrayUv2 = arrayUv2.concat(arrayObj[i].getVerticesData(BABYLON.VertexBuffer.UV2Kind));
    if (ColorKind) arrayColor = arrayColor.concat(arrayObj[i].getVerticesData(BABYLON.VertexBuffer.ColorKind));
    if (MatricesIndicesKind) arrayMatricesIndices = arrayMatricesIndices.concat(arrayObj[i].getVerticesData(BABYLON.VertexBuffer.MatricesIndicesKind));
    if (MatricesWeightsKind) arrayMatricesWeights = arrayMatricesWeights.concat(arrayObj[i].getVerticesData(BABYLON.VertexBuffer.MatricesWeightsKind));

    const maxValue = savedPosition.length / 3;

    arrayObj[i].computeWorldMatrix(true);
    const worldMatrix = arrayObj[i].getWorldMatrix();

    for (let ite = 0; ite != arrayPos[i].length; ite += 3) {
      const vertex = BABYLON.Vector3.TransformCoordinates(new BABYLON.Vector3(arrayPos[i][ite], arrayPos[i][ite + 1], arrayPos[i][ite + 2]), worldMatrix);
      savedPosition.push(vertex.x);
      savedPosition.push(vertex.y);
      savedPosition.push(vertex.z);
    }

    for (let iter = 0; iter != arrayNormal[i].length; iter += 3) {
      const vertex = BABYLON.Vector3.TransformNormal(new BABYLON.Vector3(arrayNormal[i][iter], arrayNormal[i][iter + 1], arrayNormal[i][iter + 2]), worldMatrix);
      savedNormal.push(vertex.x);
      savedNormal.push(vertex.y);
      savedNormal.push(vertex.z);
    }

    const tmp = arrayObj[i].getIndices();
    for (let it = 0; it != tmp.length; it++) {
      arrayIndice.push(tmp[it] + maxValue);
    }
    arrayIndice = arrayIndice.concat(tmp);

    arrayObj[i].dispose(false);
  }

  newMesh.setVerticesData(BABYLON.VertexBuffer.PositionKind, savedPosition, false);
  newMesh.setVerticesData(BABYLON.VertexBuffer.NormalKind, savedNormal, false);
  if (arrayUv.length > 0) newMesh.setVerticesData(BABYLON.VertexBuffer.UVKind, arrayUv, false);
  if (arrayUv2.length > 0) newMesh.setVerticesData(BABYLON.VertexBuffer.UV2Kind, arrayUv, false);
  if (arrayColor.length > 0) newMesh.setVerticesData(BABYLON.VertexBuffer.ColorKind, arrayUv, false);
  if (arrayMatricesIndices.length > 0) newMesh.setVerticesData(BABYLON.VertexBuffer.MatricesIndicesKind, arrayUv, false);
  if (arrayMatricesWeights.length > 0) newMesh.setVerticesData(BABYLON.VertexBuffer.MatricesWeightsKind, arrayUv, false);

  newMesh.setIndices(arrayIndice);
  return newMesh;
};

----------------------------------------

TITLE: Applying Camera Offset for TAA in Babylon.js
DESCRIPTION: This code snippet shows how to apply a camera offset to the projection matrix for implementing Temporal Anti-Aliasing. It adjusts the projection matrix based on calculated dx and dy offsets.

LANGUAGE: javascript
CODE:
const projMat = camera.getProjectionMatrix();
projMat.m[8] = dx * 2 / width;
projMat.m[9] = dy * 2 / height;
projMat.markAsUpdated();

----------------------------------------

TITLE: Creating Extruded Polygon with MeshBuilder in Babylon.js
DESCRIPTION: Creates an extruded polygon using BABYLON.MeshBuilder.ExtrudePolygon method. Requires shape and depth parameters, with optional configuration for face colors, UV mapping, holes, and side orientation.

LANGUAGE: javascript
CODE:
const extrudedPolygon = BABYLON.MeshBuilder.ExtrudePolygon("polygon", options, scene); //scene is optional and defaults to the current scene

----------------------------------------

TITLE: Loading Asset from Memory URL in Babylon.js
DESCRIPTION: This code loads an asset into the Babylon.js scene from a memory URL. It specifies the plugin extension as '.glb' to ensure the correct loader is used for the binary data.

LANGUAGE: javascript
CODE:
await BABYLON.AppendSceneAsync(assetUrl, scene, {
    pluginExtension: ".glb"
});

----------------------------------------

TITLE: Toggling ImageProcessingPostProcess Define in Babylon.js Material
DESCRIPTION: This JavaScript code shows how to toggle the IMAGEPROCESSINGPOSTPROCESS define in a Babylon.js material based on the presence of an ImageProcessingPostProcess in the scene.

LANGUAGE: javascript
CODE:
defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;

----------------------------------------

TITLE: Tube Mesh Morphing
DESCRIPTION: Demonstrates creation and updating of tube meshes with dynamic paths and radius functions. Shows both simple radius updates and complex radius function modifications.

LANGUAGE: javascript
CODE:
const path1 = [v1, /* ..., */ vN];
const radius1 = 5;
const path2 = [u1, /* ..., */ uN];
const radius2 = 8;
const tube = BABYLON.Mesh.CreateTube("tube", path1, radius1, 12, null, cap, scene, true);
tube = BABYLON.MeshBuilder.CreateTube(null, {path: path2, radius: radius2, instance: tube});

----------------------------------------

TITLE: Creating Custom Procedural Texture in Babylon.js
DESCRIPTION: JavaScript code to create a custom procedural texture using a file-based approach in Babylon.js.

LANGUAGE: javascript
CODE:
const texture = new BABYLON.CustomProceduralTexture("texture", "./pathtotexture", 1024, scene);

----------------------------------------

TITLE: Setting Individual Rotation Axes
DESCRIPTION: Shows how to set rotation angles individually for each axis using Euler angles in radians.

LANGUAGE: javascript
CODE:
mesh.rotation.x  =  alpha; //rotation around x axis
mesh.rotation.y  =  beta;  //rotation around y axis
mesh.rotation.z  =  gamma; //rotation around z axis

----------------------------------------

TITLE: Setting Visibility of GUIButton in BabylonJS
DESCRIPTION: Sets the visibility of the GUIButton. The method takes a boolean parameter to show or hide the button, and an optional fade parameter.

LANGUAGE: javascript
CODE:
setVisible(bool, fade) → void

----------------------------------------

TITLE: Augmenting SceneLoaderPluginOptions Interface in TypeScript
DESCRIPTION: This snippet demonstrates how to augment the SceneLoaderPluginOptions interface to add custom options for a file importer.

LANGUAGE: typescript
CODE:
type MyCustomImporterOptions = { option1?: string, option2?: number };

declare module "@babylonjs/core" {
  export interface SceneLoaderPluginOptions {
    myCustomImporter: MyCustomImporterOptions;
  }
}

----------------------------------------

TITLE: Using glTF Loader Extension Options in Asset Loading
DESCRIPTION: This snippet demonstrates how to pass custom extension options when loading a glTF asset using the LoadAssetContainerAsync function. It shows the structure for specifying extension options within the pluginOptions.

LANGUAGE: typescript
CODE:
await LoadAssetContainerAsync("path/to/model", scene, {
  pluginOptions: {
    glTF: {
      extensionOptions: {
        myCustomExtension: {
          option1: "hello world",
          option2: 42,
        },
      },
    },
  },
});

----------------------------------------

TITLE: Creating Roofprint and Roof Floor in Babylon.js
DESCRIPTION: This snippet demonstrates how to create a roofprint and roof floor for a house model. It uses predefined variables for overhang, wall thickness, and house height to calculate the roofprint corners.

LANGUAGE: javascript
CODE:
var overhang = 0.2;
var overlap = ply + overhang;
var wholeRoofprint = roofprint(corners, overlap, height);

----------------------------------------

TITLE: User Authentication Check with Built-in SDK
DESCRIPTION: Demonstrates how to check user authentication status using the built-in heyVR SDK.

LANGUAGE: javascript
CODE:
window.heyVR.user.isLoggedIn()
    .then( () => console.log( 'User is authenticated!' ) )
    .catch( () => console.warn( 'User is not logged in.' ) );

----------------------------------------

TITLE: Loading GUI from JSON URL in Babylon.js
DESCRIPTION: Demonstrates how to load a GUI created in the GUI Editor from a JSON file URL into a Babylon.js scene.

LANGUAGE: javascript
CODE:
let advancedTexture = BABYLON.GUI.AdvancedDynamicTexture.CreateFullscreenUI("GUI", true, scene);
let loadedGUI = await advancedTexture.parseFromURLAsync("https://doc.babylonjs.com/examples/ColorPickerGui.json");

----------------------------------------

TITLE: Implementing Animation State Controller in Babylon.js
DESCRIPTION: Example of a player controller class that manages animation states through the Babylon.js animation system. The component handles user input and updates animation parameters for character movement, demonstrating integration between user input and animation state management.

LANGUAGE: typescript
CODE:
    module PROJECT {
        export class TestPlayerController extends BABYLON.MeshComponent {
            private animator:BABYLON.AnimationState = null;
            protected start() :void {
                this.animator = this.getComponent("BABYLON.AnimationState");
            }
            protected update() :void {
                const vertical:number = this.manager.getUserInput(BABYLON.UserInputAxis.Vertical, BABYLON.PlayerNumber.One);
                const horizontal:number = this.manager.getUserInput(BABYLON.UserInputAxis.Horizontal, BABYLON.PlayerNumber.One);
                // ..
                if (this.animator != null) {
                    this.animator.setFloat("Forward", vertical);
                    this.animator.setFloat("Strafe", horizontal);
                }
            }
        }
    }

----------------------------------------

TITLE: Creating Terrain Material with Multiple Textures in Babylon.js
DESCRIPTION: Demonstrates the creation of a terrain material using height map, mix textures, diffuse textures, and bump textures. The material uses texture splatting technique where three diffuse textures are mixed based on RGB channels of a mixmap texture.

LANGUAGE: javascript
CODE:
var terrain = BABYLON.Mesh.CreateGroundFromHeightMap("terrain", "heightMap.png", 100, 100, 100, 0, 10, scene, false);

var terrainMaterial = new BABYLON.TerrainMaterial("terrainMaterial", scene);
terrainMaterial.mixTexture = new BABYLON.Texture("mixMap.png", scene);
terrainMaterial.diffuseTexture1 = new BABYLON.Texture("grass.png", scene);
terrainMaterial.diffuseTexture2 = new BABYLON.Texture("rock.png", scene);
terrainMaterial.diffuseTexture3 = new BABYLON.Texture("floor.png", scene);

terrainMaterial.bumpTexture1 = new BABYLON.Texture("grassn.png", scene);
terrainMaterial.bumpTexture2 = new BABYLON.Texture("rockn.png", scene);
terrainMaterial.bumpTexture3 = new BABYLON.Texture("floor_bump.png", scene);

terrain.material = terrainMaterial;

----------------------------------------

TITLE: Custom GLSL Fragment Shader for Post Processing
DESCRIPTION: Example GLSL shader code for creating a custom post process effect. Implements highlight detection and pixel sampling with configurable threshold and screen size parameters.

LANGUAGE: glsl
CODE:
precision highp float;

// Samplers
varying vec2 vUV;
uniform sampler2D textureSampler;

// Parameters
uniform vec2 screenSize;
uniform float highlightThreshold;

float highlights(vec3 color)
{
 return smoothstep(highlightThreshold, 1.0, dot(color, vec3(0.3, 0.59, 0.11)));
}

void main(void)
{
 vec2 texelSize = vec2(1.0 / screenSize.x, 1.0 / screenSize.y);
 vec4 baseColor = texture2D(textureSampler, vUV + vec2(-1.0, -1.0) * texelSize) * 0.25;
 baseColor += texture2D(textureSampler, vUV + vec2(1.0, -1.0) * texelSize) * 0.25;
 baseColor += texture2D(textureSampler, vUV + vec2(1.0, 1.0) * texelSize) * 0.25;
 baseColor += texture2D(textureSampler, vUV + vec2(-1.0, 1.0) * texelSize) * 0.25;
 
 baseColor.a = highlights(baseColor.rgb);

 gl_FragColor = baseColor;
}

----------------------------------------

TITLE: Index.js Asset Configuration
DESCRIPTION: JavaScript code defining the asset host URL for the 3D configurator resources

LANGUAGE: javascript
CODE:
const ASSET_HOST_URL = "https://syntheticmagus.github.io/vaporwear-original-asset-host";

----------------------------------------

TITLE: Setting Substeps for Physics Engine in Babylon.js
DESCRIPTION: This snippet demonstrates how to set substeps for the physics engine in Babylon.js. It allows running physics ticks at a different frequency than the framerate while keeping consistent display.

LANGUAGE: javascript
CODE:
var physicsEngine = scene.getPhysicsEngine();
physicsEngine.setSubTimeStep(100);

----------------------------------------

TITLE: Equivalent Rotation Orders
DESCRIPTION: Demonstrates that different orders of setting rotation values result in the same final orientation due to Babylon.js's local space rotation implementation.

LANGUAGE: javascript
CODE:
mesh.rotation = new BABYLON.Vector3(alpha, beta, gamma);

mesh.rotation.x  =  alpha;
mesh.rotation.y  =  beta;
mesh.rotation.z  =  gamma;

mesh.rotation.z  =  gamma;
mesh.rotation.x  =  alpha;
mesh.rotation.y  =  beta;

mesh.rotation.y  =  beta;
mesh.rotation.z  =  gamma;
mesh.rotation.x  =  alpha;

----------------------------------------

TITLE: Creating Pickable Solid Particle System in Babylon.js
DESCRIPTION: This snippet demonstrates how to create a Solid Particle System (SPS) with pickable particles. The 'isPickable' option is set to true when initializing the SPS.

LANGUAGE: javascript
CODE:
var SPS = new BABYLON.SolidParticleSystem("SPS", scene, { isPickable: true });

----------------------------------------

TITLE: Implementing Web Worker for Navigation Mesh
DESCRIPTION: Sets up web worker processing for navigation mesh computation to improve performance.

LANGUAGE: javascript
CODE:
let navigationPlugin = new BABYLON.RecastJSPlugin();
navigationPlugin.setWorkerURL("workers/navMeshWorker.js");

navigationPlugin.createNavMesh([staticMesh], navmeshParameters,(navmeshData) =>
{
    console.log("got worker data", navmeshData);
    navigationPlugin.buildFromNavmeshData(navmeshData);
    ...

----------------------------------------

TITLE: Importing Environment Class in Babylon.js
DESCRIPTION: Shows how to import the Environment class from a local file.

LANGUAGE: javascript
CODE:
import { Environment } from "./environment";

----------------------------------------

TITLE: Creating Immutable PCS
DESCRIPTION: Initialize PCS with updatable option set to false for immutable particles

LANGUAGE: javascript
CODE:
var pcs = new BABYLON.PointsCloudSystem("pcs", 5, scene, { updatable: false });

----------------------------------------

TITLE: Setting GUIRadio State in BabylonJS
DESCRIPTION: Method to set the checked state of the radio button.

LANGUAGE: javascript
CODE:
setChecked(value) → void

----------------------------------------

TITLE: Instantiating Models from AssetContainer in Babylon.js
DESCRIPTION: Shows how to use AssetContainers as templates for duplicating models, with options for custom naming and material cloning.

LANGUAGE: javascript
CODE:
let entries = container.instantiateModelsToScene();

LANGUAGE: javascript
CODE:
const entries = container.instantiateModelsToScene((name) => "p" + name, true);

LANGUAGE: javascript
CODE:
entries.dispose();

----------------------------------------

TITLE: Applying Gamma Correction in GLSL Shader for ImageProcessingPostProcess
DESCRIPTION: This snippet shows how to apply a gamma correction in a GLSL shader to counteract the gamma transformation applied by ImageProcessingPostProcess. It uses a conditional compilation directive to ensure it's only applied when necessary.

LANGUAGE: glsl
CODE:
#ifdef IMAGEPROCESSINGPOSTPROCESS
    gl_FragColor.rgb = pow(gl_FragColor.rgb, vec3(2.2));
#endif

----------------------------------------

TITLE: Particle System Toggle Function in BabylonJS
DESCRIPTION: Implements a toggle function that starts or stops the particle system when the fountain mesh is clicked. Uses a boolean switch to alternate between states.

LANGUAGE: javascript
CODE:
const pointerDown = (mesh) => {
    if (mesh === fountain) { //check that the picked mesh is the fountain
        switched = !switched;  //toggle switch
        if(switched) {
            particleSystem.start();
        }
        else {
            particleSystem.stop();
        }
    }
}

----------------------------------------

TITLE: Particle Intersections in Babylon.js Point Cloud System
DESCRIPTION: This snippet shows how to handle particle intersections with other meshes in a point cloud system. It demonstrates checking for intersections using both bounding box and bounding sphere methods.

LANGUAGE: javascript
CODE:
if (particle.intersectsMesh(anyMesh)) { 
  // change properties of particle
}

if (particle.intersectsMesh(mesh, true) {
    // change properties of particle
}; 

----------------------------------------

TITLE: Configuring Vite for WebXR Development
DESCRIPTION: Sets up Vite configuration for WebXR development with HTTPS support.

LANGUAGE: javascript
CODE:
import { defineConfig } from "vite";

// https://vitejs.dev/config/
export default defineConfig({
  server: {
    port: 3443,
    https: true,
    // Uncomment to allow access from network
    // (or use `npm run dev -- -- host=0.0.0.0`)
    //host: '0.0.0.0',
  },
});

----------------------------------------

TITLE: Disabling Incremental Loading for glTF 1.0
DESCRIPTION: JavaScript code to disable incremental loading for glTF 1.0, allowing for immediate access to loaded meshes and shaders.

LANGUAGE: javascript
CODE:
BABYLON.GLTFFileLoader.IncrementalLoading = false;

----------------------------------------

TITLE: Building House from Plan Function in JavaScript
DESCRIPTION: This function takes wall data, dimensions, and options to construct a 3D house mesh from 2D floor plans. It handles walls, doors, windows, and texturing.

LANGUAGE: JavaScript
CODE:
var house buildFromPlan(walls, ply, height, options, scene) {
    //Function implementation
    //...
}

----------------------------------------

TITLE: User Authentication Check with NPM Package
DESCRIPTION: Shows how to check user authentication status using the NPM package version of heyVR SDK.

LANGUAGE: javascript
CODE:
import {User} from "@heyvr/sdk-gameplay/dist";

User.isLoggedIn()
    .then( () => console.log( 'User is authenticated!' ) )
    .catch( () => console.warn( 'User is not logged in.' ) );

----------------------------------------

TITLE: Loading GUI from Snippet Server in Babylon.js
DESCRIPTION: Shows how to load a GUI created in the GUI Editor from the Babylon.js Snippet Server into a scene.

LANGUAGE: javascript
CODE:
let advancedTexture = BABYLON.GUI.AdvancedDynamicTexture.CreateFullscreenUI("GUI", true, scene);
let loadedGUI = await advancedTexture.parseFromSnippetAsync("#MMWSUI");

----------------------------------------

TITLE: Defining a Mesh Component Backing Class in TypeScript
DESCRIPTION: Example of a TypeScript backing class for a mesh component. It extends BABYLON.MeshComponent and implements lifecycle methods like start, update, after, and destroy.

LANGUAGE: typescript
CODE:
module PROJECT {
    export class NewMeshComponent extends BABYLON.MeshComponent {
        public constructor(owner: BABYLON.AbstractMesh, scene: BABYLON.Scene, tick: boolean = true, propertyBag: any = {}) {
            super(owner, scene, tick, propertyBag);
        }

        protected start() :void {
            // Start component function
        }

        protected update() :void {
            // Update render loop function
        }

        protected after() :void {
            // After render loop function
        }

        protected destroy() :void {
            // Destroy component function
        }
    }
}

----------------------------------------

TITLE: Customizing High-Level Fur Properties
DESCRIPTION: Configuration options for customizing fur appearance including spacing, density, speed, and gravity.

LANGUAGE: javascript
CODE:
allFurMaterials.furSpacing = 2;
allFurMaterials.furDensity = 20;
allFurMaterials.furSpeed = 100;
allFurMaterials.furGravity = new BABYLON.Vector3(0, -1, 0);

----------------------------------------

TITLE: Box Translation Along Transform Node Axis
DESCRIPTION: Demonstrates how to translate a box along the x-axis relative to the transform node's frame of reference.

LANGUAGE: javascript
CODE:
box.position.x += 0.01;

----------------------------------------

TITLE: Setting up React Project for Vaporwear E-commerce Site
DESCRIPTION: Initializes a new React project using create-react-app for the Vaporwear e-commerce website.

LANGUAGE: bash
CODE:
npx create-react-app vaporwear-react-site

----------------------------------------

TITLE: Size Gradient Configuration in Babylon.js
DESCRIPTION: Methods for changing particle size over lifetime using single values and ranges. Demonstrates setting size at different time points during particle lifetime.

LANGUAGE: javascript
CODE:
particleSystem.addSizeGradient(0, 0.5);
particleSystem.addSizeGradient(1, 3);

particleSystem.addSizeGradient(0, 0.5, 0.8);
particleSystem.addSizeGradient(0.4, 1, 2);
particleSystem.addSizeGradient(1.0, 3, 4);

particleSystem.removeSizeGradient(0.4);

----------------------------------------

TITLE: Replacing Current Window Content with New URL in JavaScript
DESCRIPTION: This code demonstrates how to replace the content of the current window with a new URL using JavaScript. It's applicable for use within Babylon.js Action Manager events.

LANGUAGE: javascript
CODE:
window.location = URL

----------------------------------------

TITLE: Scene Ready Event Block Implementation
DESCRIPTION: Block that triggers when the scene is ready, allowing execution flow to start.

LANGUAGE: javascript
CODE:
const sceneReady = new FlowGraphSceneReadyEventBlock();
// notify an execution block that the scene is ready
sceneReady.done.connectTo(nextBlock.in);

----------------------------------------

TITLE: Adding Shadow Casters
DESCRIPTION: Adds meshes to the shadow generator's render list to cast shadows.

LANGUAGE: javascript
CODE:
shadowGenerator.getShadowMap().renderList.push(torus);

----------------------------------------

TITLE: Enabling Right-Handed Coordinate System in JavaScript
DESCRIPTION: JavaScript code to enable the right-handed coordinate system in a Babylon.js scene, important for correctly loading glTF models.

LANGUAGE: javascript
CODE:
scene.useRightHandedSystem = true;

----------------------------------------

TITLE: Checking GUITexture Visibility in BabylonJS
DESCRIPTION: Method to check if a GUITexture element is currently visible.

LANGUAGE: typescript
CODE:
isVisible(): void

----------------------------------------

TITLE: Configuring STL Coordinate System
DESCRIPTION: Configuration setting to prevent automatic Y and Z axis swapping when loading STL files.

LANGUAGE: javascript
CODE:
BABYLON.STLFileLoader.DO_NOT_ALTER_FILE_COORDINATES = true;

----------------------------------------

TITLE: Saving and Loading Sprite Maps in Babylon.js
DESCRIPTION: Demonstrates how to save a sprite map configuration to a .tilemaps file and how to load it back into a sprite map. This allows for persistence of sprite map layouts across sessions.

LANGUAGE: javascript
CODE:
mySpriteMap.saveTileMaps()

spriteMap.loadTileMaps(url); //url is the location of the .tilemaps file

----------------------------------------

TITLE: Improved Multi-Object Bounding Box Using Parenting in Babylon.js
DESCRIPTION: This snippet demonstrates a better approach to drawing bounding boxes for multiple objects using parenting in Babylon.js.

LANGUAGE: javascript
CODE:
let parent = new BABYLON.Mesh("parent", scene);

sphere.setParent(parent);
ground.setParent(parent);

parent.setBoundingInfo(new BABYLON.BoundingInfo(newMin, newMax));
    
parent.showBoundingBox = true;

----------------------------------------

TITLE: Configuring Multiple Sub Emitter Arrays in Babylon.js
DESCRIPTION: Shows how to set up multiple arrays of sub emitters where a random array will be chosen and all sub emitters in that array will be attached to the spawned particle.

LANGUAGE: javascript
CODE:
particleSystem.subEmitters = [[subEmitter],[subEmitter, subEmitter2, subEmitter3], [subEmitter4]];

----------------------------------------

TITLE: Implementing Custom Annotations in Babylon.js Viewer JavaScript
DESCRIPTION: Demonstrates how to create custom annotations using JavaScript in the Babylon.js Viewer. This example queries hotspots and displays a line between Earth and Mars with a distance label.

LANGUAGE: javascript
CODE:
const viewer = document.querySelector('babylon-viewer');
const line = document.querySelector('#line');
const label = document.querySelector('#label');

viewer.addEventListener('frame', () => {
    const earth = viewer.queryHotSpot('earth');
    const mars = viewer.queryHotSpot('mars');
    if (earth && mars) {
        const x1 = earth.screenPosition.x;
        const y1 = earth.screenPosition.y;
        const x2 = mars.screenPosition.x;
        const y2 = mars.screenPosition.y;
        line.style.left = `${x1}px`;
        line.style.top = `${y1}px`;
        line.style.width = `${Math.sqrt((x2-x1)**2 + (y2-y1)**2)}px`;
        line.style.transform = `rotate(${Math.atan2(y2-y1, x2-x1)}rad)`;
        
        const distance = Math.sqrt(
            (mars.worldPosition.x - earth.worldPosition.x)**2 +
            (mars.worldPosition.y - earth.worldPosition.y)**2 +
            (mars.worldPosition.z - earth.worldPosition.z)**2
        );
        label.textContent = `${distance.toFixed(2)} units`;
        label.style.left = `${(x1 + x2) / 2}px`;
        label.style.top = `${(y1 + y2) / 2}px`;
    }
});

----------------------------------------

TITLE: Zero Translation Bind Matrix Example
DESCRIPTION: Example showing bone behavior with zero translation in bind matrix.

LANGUAGE: javascript
CODE:
// Referenced Playground Example #4IUBBK#6

----------------------------------------

TITLE: Vertex Shader with Animation and Instance Support in GLSL
DESCRIPTION: This GLSL vertex shader includes support for bone animations and instances, using Babylon.js shader includes.

LANGUAGE: glsl
CODE:
precision highp float;

attribute vec3 position;
attribute vec2 uv;

uniform mat4 view;
uniform mat4 projection;
uniform mat4 worldViewProjection;

varying vec2 vUV;

#include<bonesDeclaration>
#include<instancesDeclaration>

void main() {
    vec3 positionUpdated = position;

    #include<instancesVertex>
    #include<bonesVertex>

    vec4 worldPos = finalWorld * vec4(positionUpdated, 1.0);

    vUV = uv;

    gl_Position = projection * view * worldPos;
}

----------------------------------------

TITLE: Advanced Scene Loading Options in Babylon.js
DESCRIPTION: Examples of using advanced loading options, including root URL specification and glTF-specific loading options.

LANGUAGE: typescript
CODE:
await BABYLON.AppendSceneAsync("model_file_name", scene, { rootUrl: "https://example.com/assets/" });

LANGUAGE: typescript
CODE:
const assetContainer = await BABYLON.LoadAssetContainerAsync("https://raw.githubusercontent.com/BabylonJS/Assets/master/meshes/LevelOfDetail.glb", scene, {
  pluginOptions: {
    gltf: {
      skipMaterials: false,
      extensionOptions: {
        MSFT_lod: {
          maxLODsToLoad: 1,
        },
      },
    },
  },
});

----------------------------------------

TITLE: Creating Primary Triangle for Geodesic Polyhedra in JavaScript
DESCRIPTION: Implements functions to create and manipulate the primary triangle used in generating Geodesic polyhedra. This includes creating vertices, ordering them, and calculating min/max values for each row of the isometric grid.

LANGUAGE: javascript
CODE:
function Primary(m, n) {
    this.m = m;
    this.n = n;

    this.cartesian = [];
    this.vertices = [];
    this.max = [];
    this.min = [];
};

function CreatePrimary(m, n) {
    const vertices = [];

    O = new IsoVector(0, 0);
    A = new IsoVector(m, n);
    B = new IsoVector(-n, m + n);
    vertices.push(O, A, B);

    // ... (code for generating and organizing vertices)

    const P = new Primary(m, n);
    P.vertices = vertices;
    P.cartesian = cartesian;
    P.min = min;
    P.max = max;

    return P;
}

----------------------------------------

TITLE: Installing VRM Loader Dependencies
DESCRIPTION: NPM/Yarn commands for installing the required dependencies to use VRM files in a Babylon.js project with webpack.

LANGUAGE: bash
CODE:
$ npm install --save @babylonjs/core @babylonjs/loaders babylon-vrm-loader
## or
$ yarn add @babylonjs/core @babylonjs/loaders babylon-vrm-loader

----------------------------------------

TITLE: Embedding Playground in HTML Forums
DESCRIPTION: Shows how to embed a Babylon.js Playground scene within a forum post using an iframe element. Specifies dimensions and uses the frame.html template.

LANGUAGE: HTML
CODE:
<iframe src="https://playground.babylonjs.com/frame.html#6F0LKI#2" width="400px" height="250px"></iframe>

----------------------------------------

TITLE: Implementing Collision Events in Babylon.js with Unity Toolkit
DESCRIPTION: This code snippet demonstrates how to handle collision events in a Babylon.js project using the Unity Toolkit. It shows a ShotController class that manages collisions between shots, asteroids, enemies, and players, handling different outcomes based on the collision type.

LANGUAGE: javascript
CODE:
module PROJECT {
    export class ShotController extends BABYLON.MeshComponent {
        protected start() :void {
            // Physcis collision
            this.onCollisionEvent((collider:BABYLON.AbstractMesh, tag:string) => {
                if (tag === "Asteroid" || tag === "Enemy" || tag === "Player") {
                    const metadata: BABYLON.ObjectMetadata = this.manager.findSceneMetadata(collider);
                    if (metadata.getProperty<boolean>("destroyed", false) === false) {
                        metadata.setProperty("destroyed", true);
                        if (this.shotType === 0) {
                            // Player shot
                            if (tag === "Asteroid" || tag === "Enemy") {
                                const points:number = 0;
                                if (tag === "Asteroid") {
                                    points = SpaceController.AsteroidPoints;
                                    this.manager.instantiatePrefab("Asteroid_Explosion", "Asteroid_Explode_" + this.shotName, collider.position.clone(), collider.rotation.clone());
                                } else if (tag === "Enemy") {
                                    points = SpaceController.EnemyPoints;
                                    this.manager.instantiatePrefab("Enemy_Explosion", "Enemy_Explode_" + this.shotName, collider.position.clone(), collider.rotation.clone());
                                }

                                // Safely destroy game objects
                                this.manager.safeDestroy(this.mesh);
                                this.manager.safeDestroy(collider);
                                SpaceController.Instance.addScore(points);
                            }
                        } else if (this.shotType === 1) {
                            if (tag === "Player") {
                                this.manager.instantiatePrefab("Player_Explosion", "Player_Explode_" + this.shotName, collider.position.clone(), collider.rotation.clone());
                                // Safely destroy game objects
                                this.manager.safeDestroy(this.mesh);
                                this.manager.safeDestroy(collider);
                                SpaceController.Instance.gameOver(false);
                            }
                        }
                    }
                }
            });
        }
    }
}

----------------------------------------

TITLE: Managing Database Operations in CastorGUI
DESCRIPTION: Shows database operations including creation, field management, and data manipulation using localStorage or sessionStorage. Demonstrates CRUD operations on database tables.

LANGUAGE: javascript
CODE:
let db = new DataBase(false); // true if use sessionStorage else use localStorage (stockage temporary)
db.addTable("user"); // create table
db.createField("user", "member", { pseudo: "dad72" }); // create field

db.selectItem("user", "member", "pseudo"); // return dad72
db.updateItem("user", "member", "pseudo", "Romeo"); // update pseudo
db.selectItem("user", "member", "pseudo"); // return Romeo

//if delete table:
db.deleteTable("member");
// if delete database:
db.deleteDataBase();

----------------------------------------

TITLE: Creating a 3D Softbody Physics Impostor
DESCRIPTION: Example of creating a softbody physics impostor with detailed configuration options including mass, friction, pressure, and iterations

LANGUAGE: javascript
CODE:
var options = {
    mass: 15,
    friction: 0.2,
    restitution: 0.3,
    pressure: 3500,
    velocityIterations: 10,
    positionIterations: 10,
    stiffness: 1,
    margin: 0.1,
    damping: 0.05
}

new BABYLON.PhysicsImpostor(mesh, BABYLON.PhysicsImpostor.SoftbodyImpostor, options, scene);

----------------------------------------

TITLE: Downloading and Caching Watch Animations in Babylon.js
DESCRIPTION: This snippet shows how to download a 3D watch model and cache its animations for later use in a Babylon.js scene.

LANGUAGE: typescript
CODE:
const result = await SceneLoader.ImportMeshAsync(
    "",
    "https://syntheticmagus.github.io/vaporwear-assets/",
    "watch.glb",
    this._scene
);

this._watchMesh = result.meshes[0];
this._skeleton = result.skeletons[0];

this._animations = {};
for (const animation of result.animationGroups) {
    this._animations[animation.name] = animation;
    animation.stop();
}

this._animations["Base State"].play(true);

----------------------------------------

TITLE: Complete Surface Points Generation in Babylon.js
DESCRIPTION: Full implementation of the createSurfacePoints method that extends Mesh prototype to generate random points across the entire mesh surface based on point density.

LANGUAGE: javascript
CODE:
BABYLON.Mesh.prototype.createSurfacePoints = function(pointDensity) {
	var positions = this.getVerticesData(BABYLON.VertexBuffer.PositionKind);
	var indices = this.getIndices();
	
	var point = BABYLON.Vector3.Zero();
	var points = [];
	
	var randX = 0;
	var randY = 0;
	var randZ = 0
	
	var index = 0;
	var id0 = 0;
	var id1 = 0; 
	var id2 = 0;
	var v0X = 0;
	var v0Y = 0;
	var v0Z = 0;
	var v1X = 0;
	var v1Y = 0
	var v1Z = 0;
	var v2X = 0;
	var v2Y = 0;
	var v2Z = 0;
	var vertex0 = BABYLON.Vector3.Zero();
	var vertex1 = BABYLON.Vector3.Zero();
	var vertex2 = BABYLON.Vector3.Zero();
	var vec0 = BABYLON.Vector3.Zero();
	var vec1 = BABYLON.Vector3.Zero();
    var vec2 = BABYLON.Vector3.Zero();

    var a = 0;
    var b = 0;
    var c = 0;
    var p = 0;
    var area = 0;
    var nbPoints = 0;
		
	var lamda = 0;	
	var mu = 0;

	for(let index = 0; index <indices.length / 3; index++) {  				
		id0 = indices[3 * index];
		id1 = indices[3 * index + 1]; 
		id2 = indices[3 * index + 2];        
		v0X = positions[3 * id0];
		v0Y = positions[3 * id0 + 1];
		v0Z = positions[3 * id0 + 2];
		v1X = positions[3 * id1];
		v1Y = positions[3 * id1 + 1];
		v1Z = positions[3 * id1 + 2];
		v2X = positions[3 * id2];
		v2Y = positions[3 * id2 + 1];
		v2Z = positions[3 * id2 + 2];
		vertex0.set(v0X, v0Y, v0Z);
		vertex1.set(v1X, v1Y, v1Z);
		vertex2.set(v2X, v2Y, v2Z);
		vertex1.subtractToRef(vertex0, vec0);
		vertex2.subtractToRef(vertex1, vec1);
        vertex2.subtractToRef(vertex0, vec2);
        a = vec0.length();
        b = vec1.length();
        c = vec2.length();
        p = (a + b + c) / 2;        
        area = Math.sqrt(p * (p - a) * (p - b) * (p - c));
        nbPoints = Math.round(pointDensity * area);
        for (let i = 0; i < nbPoints; i++) {
            lamda = BABYLON.Scalar.RandomRange(0, 1);	
		    mu = BABYLON.Scalar.RandomRange(0, 1);
		    facetPoint = vertex0.add(vec0.scale(lamda)).add(vec1.scale(lamda * mu));
            points.push(facetPoint);
        }	
	}
	return points;
}

----------------------------------------

TITLE: Initializing SixDofDragBehavior in Babylon.js
DESCRIPTION: Creates a SixDofDragBehavior instance for dragging a mesh in 3D space. The behavior can be customized to adjust drag delta ratio and z-drag factor for smoother movement.

LANGUAGE: javascript
CODE:
const sixDofDragBehavior = new BABYLON.SixDofDragBehavior();

sixDofDragBehavior.dragDeltaRatio = 0.2;
sixDofDragBehavior.zDragFactor = 3;

----------------------------------------

TITLE: Loading lil-gui Library in JavaScript
DESCRIPTION: Asynchronously loads the lil-gui library for creating the GUI. This function is used in both JavaScript and TypeScript implementations.

LANGUAGE: javascript
CODE:
async function LoadLiLGUI() {
    return BABYLON.Tools.LoadScriptAsync("https://cdn.jsdelivr.net/npm/lil-gui@0.17.0/dist/lil-gui.umd.min.js");
}

----------------------------------------

TITLE: Configuring NPM Scripts for Babylon.js Project
DESCRIPTION: This JSON snippet defines NPM scripts for building and running a Babylon.js project using Webpack and webpack-dev-server.

LANGUAGE: json
CODE:
"scripts": {
    "build": "webpack",
    "start": "webpack-dev-server --port 8080"
}

----------------------------------------

TITLE: Converting Roof Apex Data to Vector2 Array in Babylon.js
DESCRIPTION: This code converts the roof apex data into an array of Vector2 objects, which will be used as a parameter for the roof function in Babylon.js.

LANGUAGE: javascript
CODE:
var apexes = [];

for(let i = 0; i < roofApexData.length / 2; i++) {
	apexes.push(new BABYLON.Vector2(roofApexData[2 * i], roofApexData[2 * i + 1]))
}

----------------------------------------

TITLE: Loading Incremental Scene in Babylon.js
DESCRIPTION: This code snippet demonstrates how to load an incremental scene file in Babylon.js using the AppendSceneAsync method. It assumes the incremental file has been generated and placed in the 'src' directory.

LANGUAGE: javascript
CODE:
await BABYLON.AppendSceneAsync("src/my-scene.incremental.babylon", scene);
console.log("My incremental file was loaded! WOHOO!");

----------------------------------------

TITLE: Adding Elements to GUIWindow in BabylonJS
DESCRIPTION: Method to add an element to the GUIWindow.

LANGUAGE: javascript
CODE:
add(element) → void

----------------------------------------

TITLE: Integrating WebVR with PhotoDome in Babylon.js
DESCRIPTION: Shows how to integrate WebVR with a PhotoDome in Babylon.js. It creates a default VR experience and adds keyboard controls to enter and exit VR mode.

LANGUAGE: javascript
CODE:
vrHelper = scene.createDefaultVRExperience();

scene.actionManager = new BABYLON.ActionManager(scene);

// From 2D view to fullscreen VR
scene.actionManager.registerAction(
  new BABYLON.ExecuteCodeAction(
    {
      trigger: BABYLON.ActionManager.OnKeyDownTrigger,
      parameter: "s", //press "s" key
    },
    function () {
      vrHelper.enterVR();
    },
  ),
);

// From fullscreen VR to 2D view
scene.actionManager.registerAction(
  new BABYLON.ExecuteCodeAction(
    {
      trigger: BABYLON.ActionManager.OnKeyDownTrigger,
      parameter: "e", //press "e" key
    },
    function () {
      vrHelper.exitVR();
      document.exitFullscreen();
    },
  ),
);

----------------------------------------

TITLE: Basic Sprite Picking Implementation
DESCRIPTION: Example of how to pick a sprite at pointer coordinates and rotate it when selected. Uses scene.pickSprite to detect sprite hits.

LANGUAGE: javascript
CODE:
var pickResult = scene.pickSprite(this.pointerX, this.pointerY);
if (pickResult.hit) {
	pickResult.pickedSprite.angle += 0.5;
}

----------------------------------------

TITLE: Inverting Bump Map in Babylon.js
DESCRIPTION: Shows how to invert the X and Y components of a normal map in Babylon.js. This can be used to adjust the appearance of bumps and dents on a material.

LANGUAGE: javascript
CODE:
const myMaterial = new BABYLON.StandardMaterial("myMaterial", scene);
myMaterial.bumpTexture = new BABYLON.Texture("PATH TO NORMAL MAP", scene);
myMaterial.invertNormalMapX = true;
myMaterial.invertNormalMapY = true;

----------------------------------------

TITLE: Adding Elements to GUIPanel in BabylonJS
DESCRIPTION: Method to add an element to the GUIPanel. It takes a single parameter 'element' and returns void.

LANGUAGE: javascript
CODE:
add(element) → void

----------------------------------------

TITLE: Creating a Physics Box Shape in Babylon.js
DESCRIPTION: Shows how to create a box physics shape with center, rotation, and dimensions. The shape is defined in local coordinates.

LANGUAGE: javascript
CODE:
const shape = new BABYLON.PhysicsShapeBox(
    new BABYLON.Vector3(0, 0, 0),        // center of the box
    new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box
    new BABYLON.Vector3(1, 1, 1),        // dimensions of the box
    scene                                // scene of the shape
);

----------------------------------------

TITLE: Loading a Node Material from a File
DESCRIPTION: Demonstrates how to load a Node Material from a file saved by the Node Material Editor.

LANGUAGE: JavaScript
CODE:
let nodeMaterial = await BABYLON.NodeMaterial.ParseFromFileAsync("Name For Your Shader", "URL To Your Saved Shader", scene);

----------------------------------------

TITLE: Enabling Havok Physics
DESCRIPTION: Configures physics engine with gravity and Havok plugin integration. Sets up realistic Earth gravity for physics simulations.

LANGUAGE: javascript
CODE:
var gravityVector = new BABYLON.Vector3(0, -9.81, 0);
var physicsPlugin = new BABYLON.HavokPlugin();
scene.enablePhysics(gravityVector, physicsPlugin);

----------------------------------------

TITLE: Initializing Poki SDK in JavaScript for Babylon.js Games
DESCRIPTION: Initialize the Poki SDK at the start of your Babylon.js game. This code handles successful initialization and potential adblock scenarios, allowing the game to continue in both cases.

LANGUAGE: javascript
CODE:
PokiSDK.init()
  .then(() => {
    console.log("Poki SDK successfully initialized");
    // your code to continue to game
    continueToGame();
  })
  .catch(() => {
    console.log("Initialized, but the user likely has adblock");
    // your code to continue to game
    continueToGame();
  });

----------------------------------------

TITLE: Opening Embedded Babylon.js Inspector in Popup Mode
DESCRIPTION: Demonstrates how to open the embedded mode inspector in a popup window by default.

LANGUAGE: javascript
CODE:
var debugLayer = await scene.debugLayer.show({
    embedMode: true
});

debugLayer.popupEmbed()

----------------------------------------

TITLE: Rendering Pixi.js Behind Babylon.js Scene
DESCRIPTION: Demonstrates how to render a Pixi.js stage behind a transparent Babylon.js scene. Requires setting scene.autoClear to false.

LANGUAGE: javascript
CODE:
scene.autoClear = false;

engine.runRenderLoop(function () {
  pixiRenderer.reset();
  pixiRenderer.render(stage);

  scene.autoClear = false;
  scene.render();
  engine.wipeCaches(true);
});

----------------------------------------

TITLE: Updating GUIText Content in BabylonJS
DESCRIPTION: Method to update the text content of a GUIText element.

LANGUAGE: javascript
CODE:
updateText(string:text) → void

----------------------------------------

TITLE: Normalizing Animation Groups in BabylonJS
DESCRIPTION: Shows how to use the normalize method to align different animations with varying frame counts within an AnimationGroup. This ensures all animations in the group have the same number of frames.

LANGUAGE: javascript
CODE:
animationGroup2.normalize(0, 100);

----------------------------------------

TITLE: Setting Up Player Camera in Babylon.js
DESCRIPTION: Creates a stationary ArcRotateCamera for the player.

LANGUAGE: javascript
CODE:
private _setupPlayerCamera() {
    var camera4 = new ArcRotateCamera("arc", -Math.PI/2, Math.PI/2, 40, new Vector3(0,3,0), this.scene);
}

----------------------------------------

TITLE: Initializing Animated Particle System in Babylon.js
DESCRIPTION: Creates a new ParticleSystem with animation sheet enabled. This can be done either during construction or after.

LANGUAGE: javascript
CODE:
particleSystem = new BABYLON.ParticleSystem("particles", capacity, scene, null, true); // on construction


particleSystem = new BABYLON.ParticleSystem("particles", capacity)
particleSystem.isAnimationSheetEnabled = true; //after construction

----------------------------------------

TITLE: Loading Meshes from GitLab Pages in Babylon.js
DESCRIPTION: This snippet demonstrates how to load meshes from GitLab Pages. It uses the SceneLoader.ImportMesh method to import a 3D model into the scene from a GitLab Pages URL.

LANGUAGE: javascript
CODE:
BABYLON.SceneLoader.ImportMesh("", "https://yourpages.gitlab.io/yourScene/", "myFile.babylon", scene);

----------------------------------------

TITLE: PCS Variable Management
DESCRIPTION: Shows how to use the PCS vars property for storing reusable variables that are properly cleaned up.

LANGUAGE: javascript
CODE:
pcs.vars.tempVector = new BABYLON.Vector3(0, 0, 0);
// ...
pcs.dispose(); // cleans explicitly all your PCS.vars !

----------------------------------------

TITLE: Using Ray.intersectsMesh for Mesh Picking in Babylon.js
DESCRIPTION: Shows an alternative method for mesh picking using the Ray class directly. This method requires manual transformation of the ray into the mesh's local space.

LANGUAGE: JavaScript
CODE:
let box = BABYLON.MeshBuilder.CreateBox("box", {size: 1.0}, scene);

let origin = new BABYLON.Vector3(0.0, 0.0, 1.5);
let dir = new BABYLON.Vector3(0.0, 0.0, -1.0);
let length = 5.0;

let myRay = new BABYLON.Ray(origin, dir, length);

let rayHelper = new BABYLON.RayHelper(myRay);
rayHelper.show(scene);

BABYLON.Ray.Transform(myRay, box.getWorldMatrix().invert())

let pickingInfo = myRay.intersectsMesh(box);

----------------------------------------

TITLE: Importing glTF File Loader in NPM Environment
DESCRIPTION: JavaScript import statement to include the glTF file importer when using Babylon.js npm packages.

LANGUAGE: javascript
CODE:
import "@babylonjs/loaders/glTF/2.0";

----------------------------------------

TITLE: Enabling Alpha-Based Picking
DESCRIPTION: Code to enable alpha-based picking for sprites, which ensures picking only works on non-transparent parts of the sprite (where alpha > 0.5).

LANGUAGE: javascript
CODE:
mySprite.useAlphaForPicking = true;

----------------------------------------

TITLE: Key Trigger Implementation in Babylon.js
DESCRIPTION: Shows how to implement key-based triggers with specific key detection and custom callback functions.

LANGUAGE: javascript
CODE:
scene.actionManager.registerAction(
  new BABYLON.ExecuteCodeAction(
    {
      trigger: BABYLON.ActionManager.OnKeyUpTrigger,
      parameter: function (actionEvent) {
        return actionEvent.sourceEvent.key === "R";
      },
    },
    function () {
      console.log("R button was pressed");
    },
  ),
);

----------------------------------------

TITLE: Enabling Particle Intersections in Babylon.js SPS
DESCRIPTION: This snippet demonstrates how to enable particle intersections when creating a Solid Particle System in Babylon.js. The 'particleIntersection' option is set to true to enable this feature.

LANGUAGE: javascript
CODE:
var SPS = new SolidParticleSystem("sps", scene, { particleIntersection: true });

----------------------------------------

TITLE: Rotating Mesh and Logging Quaternion Components
DESCRIPTION: Demonstrates how to rotate a mesh using a Vector3 direction and angle, then logs the resulting quaternion components to the console.

LANGUAGE: javascript
CODE:
mesh.rotate(new BABYLON.Vector3(1, 0 -1), Math.PI / 3, BABYLON.Space.WORLD);
console.log(mesh.rotationQuaternion.x);
console.log(mesh.rotationQuaternion.y);
console.log(mesh.rotationQuaternion.z);
console.log(mesh.rotationQuaternion.w);

----------------------------------------

TITLE: Creating a Rectangular Area Light in Babylon.js
DESCRIPTION: Shows how to create a rectangular area light in a Babylon.js scene. An area light emits light from a rectangular surface towards the -Z direction.

LANGUAGE: javascript
CODE:
const light = new BABYLON.RectAreaLight("areaLight", new BABYLON.Vector3(0, 1, 0), 2, 2, scene);

----------------------------------------

TITLE: Updating Path3D in Babylon.js
DESCRIPTION: Shows how to update an existing Path3D object with new points to avoid memory reallocation.

LANGUAGE: javascript
CODE:
const points1 = [v1, v2, ..., vn];          // array of Vector3
const path3d = new BABYLON.Path3D(points1);
const points2 = [u1, u2, ..., un];          // another array of Vector3
path3D.update(points2);

----------------------------------------

TITLE: Loading Particle System Using Async/Await
DESCRIPTION: Demonstrates loading a particle system from the snippet server using async/await pattern. Creates a scene with camera and particle emitter, then loads and configures the particle system.

LANGUAGE: javascript
CODE:
const createScene = async function () {
  const scene = new BABYLON.Scene(engine);

  const camera = new BABYLON.ArcRotateCamera("Camera", 0, 0.8, 10, BABYLON.Vector3.Zero(), scene);
  camera.attachControl(canvas, true);

  // Create a random emitter
  const sphere = BABYLON.MeshBuilder.CreateSphere("sphere", { diameter: 0.01, segments: 4 }, scene);

  // Load the previously setup particle system (it was setup with the inspector)
  let system = await BABYLON.ParticleHelper.CreateFromSnippetAsync("T54JV7#13", scene, false);
  system.emitter = sphere;

  return scene;
};

----------------------------------------

TITLE: Mapping Face UV Coordinates
DESCRIPTION: Code to map UV coordinates from a texture atlas to specific mesh faces using Vector4 values.

LANGUAGE: javascript
CODE:
faceUV[f] = ((c * 1) / 6, (r * 1) / 4, ((c + 1) * 1) / 6, ((r + 1) * 1) / 4);

----------------------------------------

TITLE: Accessing Particle Properties in Babylon.js
DESCRIPTION: Example of accessing particle properties after adding shapes to a Solid Particle System.

LANGUAGE: javascript
CODE:
SPS.addShape(model1, 1000);
SPS.addShape(model2, 500);

particle = SPS.particles[1200];

----------------------------------------

TITLE: Configuring Babylon Viewer URL in HTML
DESCRIPTION: Sets the model URL for the Babylon Viewer to display a 3D watch model from a custom asset host.

LANGUAGE: html
CODE:
<babylon model="https://syntheticmagus.github.io/vaporwear-original-asset-host/watch_original.glb">

----------------------------------------

TITLE: Defining Custom Tint Block using Annotated GLSL in BabylonJS Smart Filter Editor
DESCRIPTION: This snippet demonstrates how to create a custom tint block using annotated GLSL. It defines uniforms for input texture, tint color, and amount, then implements a mainImage function to apply the tint effect.

LANGUAGE: GLSL
CODE:
// { "smartFilterBlockType": "AnnotatedGlslTintBlock" }

uniform sampler2D input;
// { "default": { "r": 1, "g": 0, "b": 0 } }
uniform vec3 tint;
// { "default": 0.25 }
uniform float amount;

vec4 mainImage(vec2 vUV) { // main
    vec4 color = texture2D(input, vUV);
    vec3 tinted = mix(color.rgb, tint, amount);
    return vec4(tinted, color.a);
}

----------------------------------------

TITLE: Defining Frame Profile in Babylon.js
DESCRIPTION: This snippet demonstrates how to define the profile or cross-section of a frame using an array of Vector3 points in the XoY plane. The profile represents the corners of the frame's cross-section.

LANGUAGE: javascript
CODE:
var profilePoints = [
	new BABYLON.Vector3(-15, 15, 0),
	new BABYLON.Vector3(-15, -15, 0),
	new BABYLON.Vector3(15, -15, 0),
	new BABYLON.Vector3(15, 10, 0),
	new BABYLON.Vector3(10, 10, 0),
	new BABYLON.Vector3(10, 15, 0)
];

----------------------------------------

TITLE: Rendering Multiple Pixi.js Stages with Babylon.js
DESCRIPTION: Shows how to render Pixi.js stages both behind and in front of a Babylon.js scene, allowing for complex layered 2D and 3D compositions.

LANGUAGE: javascript
CODE:
engine.runRenderLoop(function () {
  pixiRenderer.reset();
  pixiRenderer.render(stage);

  scene.autoClear = false;
  scene.render();
  engine.wipeCaches(true);

  pixiRenderer.reset();
  pixiRenderer.render(stage1);
});

----------------------------------------

TITLE: Creating GUITextarea Constructor
DESCRIPTION: Constructor for creating a new GUITextarea element with specified id, options, GUI manager, and append settings.

LANGUAGE: typescript
CODE:
new GUITextarea(id: string, options: json, guimanager: GUIManager, append?: bool)

----------------------------------------

TITLE: Configuring HTML for Babylon.js Project
DESCRIPTION: This HTML file sets up the basic structure for a Babylon.js project, including the title and script reference to the main TypeScript file.

LANGUAGE: html
CODE:
<!DOCTYPE html>
<html>
    <head>
        <meta charset="UTF-8">
        <title>Title of Your Project</title>
    </head>
    <body>
       <script type="module" src="./src/app.ts"></script>
    </body>
</html>

----------------------------------------

TITLE: Creating Environment Class in Babylon.js
DESCRIPTION: Defines an Environment class to handle the game scene's world, including creating a simple ground mesh.

LANGUAGE: typescript
CODE:
export class Environment {
    private _scene: Scene;

    constructor(scene: Scene) {
        this._scene = scene;
    }

    public async load() {
        var ground = MeshBuilder.CreateBox("ground", { size: 24 }, this._scene);
        ground.scaling = new Vector3(1,.02,1);
    }
}

----------------------------------------

TITLE: Loading Meshes from jsDelivr in Babylon.js
DESCRIPTION: This snippet shows how to load meshes from GitHub using jsDelivr CDN. It uses the SceneLoader.ImportMesh method to import a 3D model into the scene, with a URL structure specific to jsDelivr.

LANGUAGE: javascript
CODE:
BABYLON.SceneLoader.ImportMesh("", "https://cdn.jsdelivr.net/gh/myGithubUserName/myRepository@2bd79648e08709145cd9575e6679b2ea360f12f6", "myFile.babylon", scene);

----------------------------------------

TITLE: Checking Multiview Capability in Babylon.js
DESCRIPTION: This snippet demonstrates how to check if multiview rendering is supported in the current environment using Babylon.js engine capabilities.

LANGUAGE: javascript
CODE:
scene.getEngine().getCaps().multiview;

----------------------------------------

TITLE: Initializing Basic Scene Optimizer
DESCRIPTION: Basic setup of SceneOptimizer with hardware scaling optimization. Creates optimizer options and initializes the optimizer with a scene.

LANGUAGE: javascript
CODE:
var options = new BABYLON.SceneOptimizerOptions();
options.addOptimization(new BABYLON.HardwareScalingOptimization(0, 1));

// Optimizer
var optimizer = new BABYLON.SceneOptimizer(scene, options);

----------------------------------------

TITLE: Initializing BezierSurface Class in TypeScript
DESCRIPTION: This snippet shows the initial class declaration for a BezierSurface in the Playground. It demonstrates how the code needs to be modified when moving from the Playground to the Babylon.js repository.

LANGUAGE: typescript
CODE:
class BezierSurface {

----------------------------------------

TITLE: Lantern Class Constructor Implementation
DESCRIPTION: Initializes a lantern instance with lighting sphere and mesh setup.

LANGUAGE: javascript
CODE:
constructor(lightmtl: PBRMetallicRoughnessMaterial, mesh: Mesh, scene: Scene, position: Vector3, animationGroups?: AnimationGroup) {
    this._scene = scene;
    this._lightmtl = lightmtl;

    const lightSphere = MeshBuilder.CreateSphere("illum", {segments: 4, diameter:20}, this._scene);
    lightSphere.scaling.y = 2;
    lightSphere.setAbsolutePosition(position);
    lightSphere.parent = this.mesh;
    lightSphere.isVisible = false;
    lightSphere.isPickable = false;
    this._lightSphere = lightSphere;

    this._loadLantern(mesh, position);
}

----------------------------------------

TITLE: Setting Initial Occlusion State in Babylon.js
DESCRIPTION: This code sets the initial occlusion state of a sphere mesh to true, indicating that it's initially hidden behind an opaque object.

LANGUAGE: javascript
CODE:
sphere.isOccluded = true;

----------------------------------------

TITLE: Creating and Managing Depth-Sorted Solid Particle System in Babylon.js
DESCRIPTION: This snippet demonstrates how to create a Solid Particle System with depth sorting enabled and how to manage the sorting behavior. It shows the creation of an SPS with enableDepthSort set to true and explains how to toggle depth sorting on and off using the depthSortParticles property.

LANGUAGE: javascript
CODE:
// create a particle depth sort enabled SPS
var sps = new BABYLON.SolidParticleSystem("sps", scene, {
  enableDepthSort: true
});

// then later, only do ...
sps.setParticles(); // and the particle are depth sorted each call

// We can skip the sorting at any time (or reactive it) : sps and camera not moving anymore
sps.depthSortParticles = false; // true by default when enableDepthSort is set to true

----------------------------------------

TITLE: Optimizing Particle Intersections with Bounding Spheres in Babylon.js
DESCRIPTION: This snippet shows how to optimize particle intersection calculations by using only bounding spheres instead of full bounding boxes. The 'boundingSphereOnly' option is set to true, and 'bSphereRadiusFactor' is used to adjust the bounding sphere size.

LANGUAGE: javascript
CODE:
var SPS = new SolidParticleSystem("sps", scene, {
    particleIntersection: true,
    boundingSphereOnly: true,
    bSphereRadiusFactor: 1 / Math.sqrt(3)
});

----------------------------------------

TITLE: Initializing Tree Sprite Manager in BabylonJS
DESCRIPTION: Creates a sprite manager for handling tree sprites with specified image dimensions and maximum sprite count. The manager is configured to handle up to 2000 sprites using a palm tree texture.

LANGUAGE: javascript
CODE:
const spriteManagerTrees = new BABYLON.SpriteManager("treesManager", "textures/palm.png", 2000, {width: 512, height: 1024}, scene);

----------------------------------------

TITLE: Declaring WGSL Shader Entry Points in Babylon.js
DESCRIPTION: Shows the syntax for declaring vertex and fragment shader entry points in WGSL for Babylon.js ShaderMaterial.

LANGUAGE: wgsl
CODE:
@vertex
fn main(input : VertexInputs) -> FragmentInputs {
    ...
}

@fragment
fn main(input : FragmentInputs) -> FragmentOutputs {
    ...
}

----------------------------------------

TITLE: Configuring Grain Effect in Babylon.js Default Rendering Pipeline
DESCRIPTION: This snippet shows how to enable and configure the grain effect in the default rendering pipeline. It sets the grain intensity and animation option.

LANGUAGE: javascript
CODE:
pipeline.grainEnabled = true;
pipeline.grain.intensity = 10;
pipeline.grain.animated = value;

----------------------------------------

TITLE: Applying Material and Texture to Mesh
DESCRIPTION: Associates the procedural texture with a material and applies it to a mesh.

LANGUAGE: javascript
CODE:
material.diffuseTexture = texture;
cylinder.material = material;

----------------------------------------

TITLE: Enabling 3D Commerce-Certified Rendering in Babylon.js
DESCRIPTION: This code snippet demonstrates how to apply 3D Commerce-certified rendering settings to a Babylon.js scene for accurate product visualization.

LANGUAGE: typescript
CODE:
const hdrTexture = CubeTexture.CreateFromPrefilteredData("https://assets.babylonjs.com/environments/environment.dds", scene);
scene.environmentTexture = hdrTexture;

const pbrMaterials = scene.materials.filter((m) => m instanceof PBRMaterial) as PBRMaterial[];
for (const mat of pbrMaterials) {
    mat.refractionTexture = hdrTexture;
    mat.reflectionTexture = hdrTexture;
}

----------------------------------------

TITLE: Applying a LUT Color Correction in Babylon.js
DESCRIPTION: This code snippet shows how to apply a Look-Up Table (LUT) color correction post-process in Babylon.js using a texture and the ColorCorrectionPostProcess.

LANGUAGE: javascript
CODE:
var LUTTexture = new BABYLON.Texture("textures/filename", scene);
var postProcess = new BABYLON.ColorCorrectionPostProcess("color_correction", LUTTexture, 1.0, universalCamera);

----------------------------------------

TITLE: Implementing frameMaker Function in Babylon.js
DESCRIPTION: This snippet contains the full implementation of the frameMaker function, which creates a customizable frame mesh in Babylon.js. It takes name, options (including path and profile), and scene as parameters.

LANGUAGE: javascript
CODE:
var frameMaker = function(name, options, scene) {	

	var path = options.path;
	var profile = options.profile;
	
	var originX = Number.MAX_VALUE;
	
	for(let m = 0; m < profile.length; m++) {
		originX = Math.min(originX, profile[m].x);
	}

	var innerData = [];
        var outerData = [];
	var angle = 0;
	var extrusion = 0;
	var width = 0;
	var cornerProfile = [];
	
	var nbPoints = path.length;
	var line = BABYLON.Vector3.Zero();
	var nextLine = BABYLON.Vector3.Zero();
	path[1].subtractToRef(path[0], line);
	path[2].subtractToRef(path[1], nextLine);    
	
	for(let p = 0; p < nbPoints; p++) {    
		angle = Math.PI - Math.acos(BABYLON.Vector3.Dot(line, nextLine)/(line.length() * nextLine.length()));            
		direction = BABYLON.Vector3.Cross(line, nextLine).normalize().z;                
		lineNormal = new BABYLON.Vector3(line.y, -1 * line.x, 0).normalize();
		line.normalize();
		extrusionLength = line.length();
		cornerProfile[(p + 1) % nbPoints] = [];
		//local profile
		for(m = 0; m < profile.length; m++) {
			width = profile[m].x - originX;
			cornerProfile[(p + 1) % nbPoints].push(path[(p + 1) % nbPoints].subtract(lineNormal.scale(width)).subtract(line.scale(direction * width/Math.tan(angle/2))));			
		}   
		
		line = nextLine.clone();        
		path[(p + 3) % nbPoints].subtractToRef(path[(p + 2) % nbPoints], nextLine);    
	}
	
	var frame = [];
	var extrusionPaths = []
	
	for(let p = 0; p < nbPoints; p++) {
		extrusionPaths = [];
		for(let m = 0; m < profile.length; m++) {
			extrusionPaths[m] = [];
			extrusionPaths[m].push(new BABYLON.Vector3(cornerProfile[p][m].x, cornerProfile[p][m].y, profile[m].y));
			extrusionPaths[m].push(new BABYLON.Vector3(cornerProfile[(p + 1) % nbPoints][m].x, cornerProfile[(p + 1) % nbPoints][m].y, profile[m].y));
		}
		
		frame[p] = BABYLON.MeshBuilder.CreateRibbon("frameLeft", {pathArray: extrusionPaths, sideOrientation: BABYLON.Mesh.DOUBLESIDE, updatable: true, closeArray: true}, scene);
	}
	
	return BABYLON.Mesh.MergeMeshes(frame, true).convertToFlatShadedMesh();
}

----------------------------------------

TITLE: Handling WebGL1 Compatibility in Render Loop
DESCRIPTION: Addresses WebGL1 compatibility issues by resetting the Pixi.js context before each render when running in WebGL1 mode.

LANGUAGE: javascript
CODE:
engine.runRenderLoop(function () {
  if (engine.webGLVersion === 1) {
    pixiRenderer.reset();
  }
  scene.render();
  engine.wipeCaches(true);

  pixiRenderer.reset();
  pixiRenderer.render(stage);
});

----------------------------------------

TITLE: GUITextarea Methods Implementation
DESCRIPTION: Core methods for interacting with the textarea including getting/setting values, visibility control, and disposal.

LANGUAGE: typescript
CODE:
getValue(): void
setValue(): void
setVisible(bool: boolean, fade: any): void
isVisible(): void
dispose(): void

----------------------------------------

TITLE: Implementing Camera Ground Following in BabylonJS
DESCRIPTION: Registers a scene render callback that updates the camera's Y position to maintain a fixed elevation above the terrain using getHeightFromMap.

LANGUAGE: javascript
CODE:
const camElevation = 2.0;
const camAltitude = 0.0;
scene.registerBeforeRender(function () {
  camAltitude = terrain.getHeightFromMap(camera.position.x, camera.position.z) + camElevation;
  camera.position.y = camAltitude;
});

----------------------------------------

TITLE: Creating Lantern Instances in BabylonJS
DESCRIPTION: Sets up lantern instances by cloning the original mesh and organizing them under a transform node.

LANGUAGE: javascript
CODE:
assets.lantern.isVisible = false;
const lanternHolder = new TransformNode("lanternHolder", this._scene);

let lanternInstance = assets.lantern.clone("lantern" + i);
lanternInstance.isVisible = true;
lanternInstance.setParent(lanternHolder);

let newLantern = new Lantern(
  this._lightmtl,
  lanternInstance,
  this._scene,
  assets.env.getChildTransformNodes(false).find((m) => m.name === "lantern " + i).getAbsolutePosition(),
  animGroupClone
);

----------------------------------------

TITLE: Minimal JSON Format for Sprite Packed Manager in Babylon.js
DESCRIPTION: This snippet demonstrates the minimal JSON format required by the Sprite Packed Manager. It only includes the essential frame information for each sprite.

LANGUAGE: javascript
CODE:
{
   "frames": {
		"eye.png": {
			"frame": {"x":0,"y":148,"w":400,"h":400}
		},
		"redman.png": {
			"frame": {"x":0,"y":0,"w":55,"h":97}
			},
		"spot.png": {
			"frame": {"x":199,"y":0,"w":148,"h":148}
		},
		"triangle.png": {
			"frame": {"x":55,"y":0,"w":144,"h":72}
		}
	}
}

----------------------------------------

TITLE: Disabling Manifest Check in Babylon.js
DESCRIPTION: Configure the Babylon.js engine to cache downloaded resources without requiring a manifest file. This is useful when you want to cache resources but don't want to provide a manifest.

LANGUAGE: javascript
CODE:
engine.disableManifestCheck = true;

----------------------------------------

TITLE: Setting Up Player Light and Position in Babylon.js
DESCRIPTION: This code sets up the player's light and positions the player character using a transform node from the imported mesh.

LANGUAGE: javascript
CODE:
this.scene.getLightByName("sparklight").parent = this.scene.getTransformNodeByName("Empty");

scene.getMeshByName("outer").position = scene.getTransformNodeByName("startPosition").getAbsolutePosition(); //move the player to the start position

----------------------------------------

TITLE: Initializing GPU Particle System in Babylon.js
DESCRIPTION: This snippet demonstrates how to create a GPU particle system with a capacity of 1,000,000 particles. It also shows how to set the active particle count to limit GPU usage.

LANGUAGE: javascript
CODE:
var particleSystem = new BABYLON.GPUParticleSystem("particles", { capacity:1000000 }, scene);

----------------------------------------

TITLE: Configuring Advanced Occlusion Query Settings in Babylon.js
DESCRIPTION: This snippet sets the occlusion retry count and occlusion type for a sphere mesh. It determines how many frames to wait for a query result and how to handle query breaks.

LANGUAGE: javascript
CODE:
sphere.occlusionRetryCount = 10;
sphere.occlusionType = BABYLON.AbstractMesh.OCCLUSION_TYPE_STRICT;

----------------------------------------

TITLE: Creating Blank Particle System Snippet - Babylon.js
DESCRIPTION: Shows how to create a new empty particle system using the special '_BLANK' snippet ID for creating new configurations.

LANGUAGE: javascript
CODE:
BABYLON.SpriteManager.ParseFromSnippetAsync("_BLANK", scene);

----------------------------------------

TITLE: Advanced SPS Material Updates
DESCRIPTION: Advanced implementation showing how to update particle materials dynamically with computeSubMeshes and material index management.

LANGUAGE: javascript
CODE:
var sps = new BABYLON.SolidParticleSystem("sps", scene, {
  enableMultiMaterial: true
});
sps.addShape(model1, 300);
sps.addShape(model2, 300);
sps.addShape(model3, 300);
sps.buildMesh();

sps.setMultiMaterial([mat0, mat1, mat2]);

sps.updateParticle = initFunction;
sps.setParticles();
sps.computeSubMeshes();

----------------------------------------

TITLE: Checking Particle Intersections in Babylon.js
DESCRIPTION: These snippets show how to check for intersections between particles and other particles or meshes using the 'intersectsMesh' method. It can be called on a particle to check against another particle or mesh, or on a mesh to check against a particle.

LANGUAGE: javascript
CODE:
if (p.intersectsMesh(otherParticle)) { // change p velocity vector }

LANGUAGE: javascript
CODE:
if (p.intersectsMesh(anyMesh)) { // change p velocity vector }

LANGUAGE: javascript
CODE:
if (someMesh.intersectsMesh(p)) { // change p velocity vector }

----------------------------------------

TITLE: Creating Forest of Tree Sprites in BabylonJS
DESCRIPTION: Generates two clusters of 500 trees each using sprites, positioning them randomly in different areas of the scene. Each tree is placed at a specific height with randomized X and Z coordinates.

LANGUAGE: javascript
CODE:
for (let i = 0; i < 500; i++) {
    const tree = new BABYLON.Sprite("tree", spriteManagerTrees);
    tree.position.x = Math.random() * (-30);
    tree.position.z = Math.random() * 20 + 8;
    tree.position.y = 0.5;
}

for (let i = 0; i < 500; i++) {
    const tree = new BABYLON.Sprite("tree", spriteManagerTrees);
    tree.position.x = Math.random() * (25) + 7;
    tree.position.z = Math.random() * -35  + 8;
    tree.position.y = 0.5;
}

----------------------------------------

TITLE: Creating and Sizing a Sprite in Babylon.js
DESCRIPTION: Creates a new Sprite instance for a tree and sets its dimensions. The width and height should be in the same ratio as the sprite image for accurate scaling.

LANGUAGE: javascript
CODE:
const tree = new BABYLON.Sprite("tree", spriteManagerTrees); 
tree.width = 1;
tree.height = 2;

----------------------------------------

TITLE: Creating IBL Shadows Rendering Pipeline in Babylon.js
DESCRIPTION: Initialize the IBL Shadows rendering pipeline with scene, options, and cameras.

LANGUAGE: javascript
CODE:
const shadowPipeline = new BABYLON.IblShadowsRenderPipeline(
  "ibl shadows", // The name of the pipeline
  scene, // The scene to which the pipeline belongs
  options, // The options for the pipeline
  [scene.activeCamera], // The list of cameras to attach the pipeline to
);

----------------------------------------

TITLE: Auto-Adapting Lattice to Mesh in Babylon.js
DESCRIPTION: Demonstrates how to create a lattice that automatically adapts to a given mesh in Babylon.js.

LANGUAGE: javascript
CODE:
var lattice = new BABYLON.Lattice({
    autoAdaptToMesh: mesh
});

----------------------------------------

TITLE: Offsetting Textures in Babylon.js
DESCRIPTION: Demonstrates how to offset a texture on a material in Babylon.js using uOffset and vOffset properties. This allows for adjusting the position of a texture on a surface.

LANGUAGE: javascript
CODE:
myMaterial.diffuseTexture.uOffset = 1.5;
myMaterial.diffuseTexture.vOffset = 0.5;

----------------------------------------

TITLE: Creating Standard Material in Babylon.js
DESCRIPTION: Initializes a new StandardMaterial instance for use with meshes.

LANGUAGE: javascript
CODE:
const material = new BABYLON.StandardMaterial("material", scene);

----------------------------------------

TITLE: Creating Fullscreen GUI Texture
DESCRIPTION: Initializes a fullscreen AdvancedDynamicTexture for GUI elements

LANGUAGE: javascript
CODE:
const adt = BABYLON.GUI.AdvancedDynamicTexture.CreateFullscreenUI("UI");

----------------------------------------

TITLE: Server Start Output in Windows Shell
DESCRIPTION: Shows the expected console output when successfully starting the NodeJS server on port 80.

LANGUAGE: shell
CODE:
C:\babylon>node server.js
Server is listening on port 80

----------------------------------------

TITLE: Loading a CubeTexture in Babylon.js
DESCRIPTION: This code snippet demonstrates how to load a CubeTexture in Babylon.js. It uses the common part of the filenames for the six sides of the cube.

LANGUAGE: javascript
CODE:
new BABYLON.CubeTexture("textures/common part of filenames", scene);

----------------------------------------

TITLE: Creating a GUIWindow in BabylonJS
DESCRIPTION: Constructor for creating a new GUIWindow. It takes an id, image URL, options object, and a GUIManager instance as parameters.

LANGUAGE: javascript
CODE:
new GUIWindow(id, imageUrl, options, guimanager)

----------------------------------------

TITLE: Adding Custom Styles to GUIManager in JavaScript
DESCRIPTION: Adds additional CSS styles to the GUI managed by the GUIManager. This method allows for dynamic styling of GUI elements after initialization.

LANGUAGE: javascript
CODE:
addStyle(string:css)

----------------------------------------

TITLE: Implementing Tint Block with Annotated GLSL
DESCRIPTION: Example of a basic tint effect block using annotated GLSL. Demonstrates uniform declarations with metadata, main image function implementation, and color mixing logic.

LANGUAGE: glsl
CODE:
// { "smartFilterBlockType": "SerializedTintBlock" }

uniform sampler2D input;
// { "default": { "r": 1, "g": 0, "b": 0 } }
uniform vec3 tint;
// { "default": 0.25 }
uniform float amount;

vec4 mainImage(vec2 vUV) { // main
    vec4 color = texture2D(input, vUV);
    vec3 tinted = mix(color.rgb, tint, amount);
    return vec4(tinted, color.a);
}

----------------------------------------

TITLE: Setting Up Environment Mesh Properties in Babylon.js
DESCRIPTION: This code sets up collision detection and shadow receiving for all meshes in the imported environment.

LANGUAGE: javascript
CODE:
const assets = await this._loadAsset();
//Loop through all environment meshes that were imported
assets.allMeshes.forEach((m) => {
    m.receiveShadows = true;
    m.checkCollisions = true;
});

----------------------------------------

TITLE: Including Facebook SDK in HTML
DESCRIPTION: Adding the Facebook Instant Games SDK script to the HTML page for integration with the platform.

LANGUAGE: html
CODE:
<script src="https://connect.facebook.net/en_US/fbinstant.6.2.js"></script>

----------------------------------------

TITLE: Implementing ShadowOnly Material in Babylon.js
DESCRIPTION: Creates a ground plane mesh and applies the ShadowOnly material to display shadows. The mesh is rotated to act as a ground surface and configured to receive shadows. This basic implementation uses default black shadow color.

LANGUAGE: javascript
CODE:
var ground = BABYLON.Mesh.CreatePlane('ground', 1000, scene)
ground.rotation.x = Math.PI / 2
ground.material = new BABYLON.ShadowOnlyMaterial('shadowOnly', scene)
ground.receiveShadows = true

----------------------------------------

TITLE: Loading Mesh Using Asset Librarian in Babylon.js
DESCRIPTION: Demonstrates how to import a 3D mesh (Pirate Fort) into a Babylon.js scene using the Asset Librarian's Assets namespace. This simplified import process requires Babylon.js 5.0 or later.

LANGUAGE: javascript
CODE:
BABYLON.SceneLoader.ImportMesh("", Assets.meshes.pirateFort.rootUrl, Assets.meshes.pirateFort.filename, scene)

----------------------------------------

TITLE: Implementing POST Endpoint for Snippet Storage in Express
DESCRIPTION: Express route handler for saving new snippets or updating existing ones. Generates unique IDs for new snippets and manages versioning. Stores snippet content and metadata in the filesystem.

LANGUAGE: javascript
CODE:
app.post("/:id?", (req, res) => {
    let id = req.params.id;
    let version;

    if (!id) {
        // Generate "random" 5 character string
        const genRndChar = () => {
            const idx = Math.floor(Math.random() * chars.length);
            return chars[idx];
        };

        id = "";
        for (let i = 0; i < ID_LEN; i++) {
            id += genRndChar();
        }
    }

    const metadataPath = METADATA_DIR + id + METADATA_EXT;
    // Look for the latest version in the metadata directory. If there is no metadata file, then it is the first version.
    if (fs.existsSync(metadataPath)) {
        version = fs.readFileSync(metadataPath, {encoding: 'utf-8'});
        // Increment the version and convert back to string
        version = Number.parseInt(version) + 1;
        version = version + "";
    } else {
        version = "1";
    }

    const newLocalToken = id + LOCAL_SEPARATOR + version;
    
    fs.writeFileSync(metadataPath, version);

    const filePath = DATA_DIR + newLocalToken + FILE_EXT;
    const stringBody = JSON.stringify(req.body);
    fs.writeFileSync(filePath, stringBody);
    
    res.status(200).json({
        id,
        version
    });
});

----------------------------------------

TITLE: GI Manager Configuration
DESCRIPTION: JavaScript code demonstrating how to set up and configure the GI Manager with RSM

LANGUAGE: javascript
CODE:
const outputDimensions = {
    width: engine.getRenderWidth(true),
    height: engine.getRenderHeight(true),
};

const defaultGITextureRatio = 2;

const giTextureDimensions = {
    width: Math.floor(engine.getRenderWidth(true) / defaultGITextureRatio),
    height: Math.floor(engine.getRenderHeight(true) / defaultGITextureRatio),
};

const giRSMMgr = new BABYLON.GIRSMManager(scene, outputDimensions, giTextureDimensions, 2048);

giRSMMgr.addGIRSM(giRSMs);
giRSMMgr.addMaterial();

----------------------------------------

TITLE: Setting Billboard Mode for Particles
DESCRIPTION: Enables billboard mode for particles to make them face the camera. Requires the render loop to calculate rotation each frame.

LANGUAGE: javascript
CODE:
SPS.billboard = true; //false by default

----------------------------------------

TITLE: Optimized Particle Update Example
DESCRIPTION: Demonstrates an optimized approach to updating particle velocities by reusing variables.

LANGUAGE: javascript
CODE:
var accel = new BABYLON.Vector3(0, 0.5, 0);
pcs.updateParticle = function (particle) {
    particle.velocity.addInPlace(accel);
    // ...
};

----------------------------------------

TITLE: Initializing Animated UFO Sprite in BabylonJS
DESCRIPTION: Sets up a sprite manager for an animated UFO using a sprite sheet with multiple frames. The manager is configured for a single UFO sprite with specific cell dimensions.

LANGUAGE: javascript
CODE:
const spriteManagerUFO = new BABYLON.SpriteManager("UFOManager", "https://assets.babylonjs.com/environments/ufo.png", 1, {width: 128, height: 76});

----------------------------------------

TITLE: Using Alpha Channel from Texture in Babylon.js
DESCRIPTION: Demonstrates how to use the alpha channel from the diffuse texture for a Solid Particle System mesh.

LANGUAGE: javascript
CODE:
SPS.mesh.material.useAlphaFromDiffuseTexture = true;

----------------------------------------

TITLE: Adding Shapes with Custom Position Function in Babylon.js
DESCRIPTION: Shows how to add shapes to an SPS with a custom position function for particle initialization.

LANGUAGE: javascript
CODE:
SPS.addShape(model, number_of_particles, { positionFunction: myCustomFunction });

----------------------------------------

TITLE: Using Diffuse Color for Light Source in Babylon.js Volumetric Light Scattering
DESCRIPTION: Configures the Volumetric Light Scattering effect to use the diffuse color of the light source mesh instead of its diffuse texture.

LANGUAGE: javascript
CODE:
vls.useDiffuseColor = true; // False as default
vls.mesh.material.diffuseColor = new BABYLON.Color3(0.0, 1.0, 0.0);

----------------------------------------

TITLE: Retrieving Child Components in Babylon.JS Editor
DESCRIPTION: Demonstrates how to use the @fromChildren decorator to get references to child components of the current node in a Babylon.JS scene.

LANGUAGE: typescript
CODE:
@fromChildren("light")
private _light: PointLight;

LANGUAGE: typescript
CODE:
@fromChildren()
private _light: PointLight; // the name of the child must be named "_light" in the Editor.

----------------------------------------

TITLE: Defining a Camera in .babylon Format
DESCRIPTION: Illustrates how a camera is defined in the .babylon file, including properties for position, target, FOV, and more.

LANGUAGE: javascript
CODE:
{
    "name": string,
    "id": string,
    "type": string,
    "position": vector3,
    "target": vector3,
    "fov": float,
    "minZ": float,
    "maxZ": float,
    "speed": float,
    "inertia": float,
    "checkCollisions": boolean,
    "applyGravity": boolean,
    "ellipsoid": vector3
}

----------------------------------------

TITLE: Updating Scene Loader Paths in TypeScript
DESCRIPTION: Example showing how to update scene loader path references when renaming a scene. Demonstrates the change from old scene name to new scene name in the rootUrl path used by SceneLoader.Append().

LANGUAGE: typescript
CODE:
const rootUrl = "./scenes/oldName/";

SceneLoader.Append(rootUrl, "scene.babylon", this.scene, () => {
	...
});

LANGUAGE: typescript
CODE:
const rootUrl = "./scenes/newName/";

SceneLoader.Append(rootUrl, "scene.babylon", this.scene, () => {
	...
});

----------------------------------------

TITLE: Setting Visibility of GUIWindow in BabylonJS
DESCRIPTION: Method to set the visibility of the GUIWindow. Takes a boolean for visibility and an optional fade parameter.

LANGUAGE: javascript
CODE:
setVisible(bool, fade) → void

----------------------------------------

TITLE: Creating Tree Mesh with QuickTreeGenerator in Babylon.js
DESCRIPTION: Function call to generate a tree mesh with customizable trunk and branch parameters. The generator creates a tree using a sphere for branches/leaves and a cylinder for the trunk, requiring size parameters and materials for both components.

LANGUAGE: javascript
CODE:
const tree = QuickTreeGenerator(sizeBranch, sizeTrunk, radius, trunkMaterial, leafMaterial, scene);

----------------------------------------

TITLE: Running Webpack Watch Command
DESCRIPTION: Command to run Webpack in watch mode for continuous build monitoring

LANGUAGE: bash
CODE:
npm run watch

----------------------------------------

TITLE: Enabling Multiview in WebXR Layers
DESCRIPTION: Configuration to enable multiview rendering in WebXR layers, which allows rendering the scene using a single render call instead of two separate camera renders. Includes antialias support for compatible extensions.

LANGUAGE: javascript
CODE:
const featuresManager = xr.baseExperience.featuresManager;
featuresManager.enableFeature(WebXRFeatureName.LAYERS, "stable" /* or latest */, {
  preferMultiviewOnInit: true,
});

----------------------------------------

TITLE: Including Ascii Art Post Process Script
DESCRIPTION: HTML script tag to include the Ascii Art Post Process library in your webpage.

LANGUAGE: html
CODE:
<script src="babylon.asciiArtPostProcess.js"></script>

----------------------------------------

TITLE: Installing Dynamic Terrain Extension
DESCRIPTION: How to include the Dynamic Terrain extension in your Babylon.js project.

LANGUAGE: html
CODE:
<script src="babylon.js"></script>
<script src="dynamicTerrain.min.js"></script>

----------------------------------------

TITLE: Demonstrating Vertex Normal Variation in Babylon.js
DESCRIPTION: These playgrounds show how changing the directions within the normals array affects mesh lighting. The first example demonstrates normals varying in unison, while the second shows general normal variation.

LANGUAGE: JavaScript
CODE:
<Playground id="#VKBJN#18" title="Vertex Normals Varying In Unison" description="Simple example of vertex normals varying in unison."/>

LANGUAGE: JavaScript
CODE:
<Playground id="#VKBJN#19" title="Showing Normals Varying" description="Simple example of showing vertex normal variation."/>

----------------------------------------

TITLE: Babylon.js Viewer Explosion Integration
DESCRIPTION: Shows how to integrate explosion effects with the Babylon.js Viewer component. Handles viewer initialization and model loading events.

LANGUAGE: javascript
CODE:
BabylonViewer.viewerManager.getViewerPromiseById("babylon-viewer").then(function (viewer) {
  viewerObservables(viewer);
});
let newExplosion;
function viewerObservables(viewer) {
  viewer.onModelLoadedObservable.add(function (model) {
    model.rootMesh.getScene().executeWhenReady(function () {
      newExplosion = new BABYLON.MeshExploder(model.meshes, model.meshes[0]);
      newExplosion.explode(2);
    });
  });
}

----------------------------------------

TITLE: Beginning Direct Animation in Babylon.js
DESCRIPTION: Shows how to apply one or more animations directly to a target in Babylon.js without storing them with the target object, using beginDirectAnimation.

LANGUAGE: javascript
CODE:
scene.beginDirectAnimation(target, animations, from, to, loop);

----------------------------------------

TITLE: Customizing Particle Start Position in Babylon.js
DESCRIPTION: Default implementation of the startPositionFunction for customizing the initial position of particles in a particle system.

LANGUAGE: javascript
CODE:
particleSystem.startPositionFunction = (worldMatrix: Matrix, positionToUpdate: Vector3, particle: Particle, isLocal: boolean): void => {
  var randX = randomNumber(this.minEmitBox.x, this.maxEmitBox.x);
  var randY = randomNumber(this.minEmitBox.y, this.maxEmitBox.y);
  var randZ = randomNumber(this.minEmitBox.z, this.maxEmitBox.z);

  Vector3.TransformCoordinatesFromFloatsToRef(randX, randY, randZ, worldMatrix, positionToUpdate);
};

----------------------------------------

TITLE: Initializing Particle System in Babylon.js
DESCRIPTION: Creates a new ParticleSystem with 5000 particles. The scene parameter is optional.

LANGUAGE: javascript
CODE:
const particleSystem = new BABYLON.ParticleSystem("particles", 5000, scene);

----------------------------------------

TITLE: Restricting Camera Movement in BabylonJS
DESCRIPTION: This code snippet shows how to limit the camera's vertical rotation to prevent it from moving below ground level in a BabylonJS scene. It sets the upperBetaLimit property of the camera to slightly less than 90 degrees.

LANGUAGE: javascript
CODE:
camera.upperBetaLimit = Math.PI / 2.2;

----------------------------------------

TITLE: Creating a 2D Line in XoZ Plane from Inner Path
DESCRIPTION: This function creates a 2D line mesh in the XoZ plane with a specified width, using an inner path. It can be used as an edge for polygons.

LANGUAGE: javascript
CODE:
var line2D = function(name, options, scene) {
    // ... (full code not shown for brevity)
}

----------------------------------------

TITLE: Implementing Spine Animation with Pixi.js
DESCRIPTION: Demonstrates how to load and run a Spine animation using the Pixi.js Spine extension. The example loads a 'spineboy' animation, scales it, and sets up a sequence of animations.

LANGUAGE: javascript
CODE:
loader.add("spineboy", "https://raw.githubusercontent.com/pixijs/examples/gh-pages/examples/assets/pixi-spine/spineboy-pro.json");

loader.load((loader, resources) => {
  let spineboy = new PIXI.spine.Spine(resources.spineboy.spineData);
  spineboy.scale.set(0.4);
  spineboy.state.setAnimation(0, "portal", false);
  spineboy.x = 1000;
  spineboy.y = 650;
  spineboy.state.getCurrent(0).onComplete = () => {
    spineboy.state.setAnimation(0, "shoot", true);
  };
  pixi.stage.addChild(spineboy);
});

----------------------------------------

TITLE: Creating a Sprite from a Spritesheet Cell in Babylon.js
DESCRIPTION: Creates a new Sprite instance from a specific cell in a spritesheet. The cellIndex property is used to select the desired sprite image.

LANGUAGE: javascript
CODE:
const player = new BABYLON.Sprite("player", spriteManagerPlayer); 
player.cellIndex = 1;

----------------------------------------

TITLE: Implementing a Data Block in Flow Graph
DESCRIPTION: Shows the implementation of a simple data block (ArrayIndexBlock) that selects an element from an array based on an index.

LANGUAGE: javascript
CODE:
export class FlowGraphArrayIndexBlock<T = any> extends FlowGraphBlock {
    public readonly array: FlowGraphDataConnection<T[]>;
    public readonly index: FlowGraphDataConnection<FlowGraphInteger>;
    public readonly value: FlowGraphDataConnection<T>;

    constructor(public override config: IFlowGraphBlockConfiguration) {
        super(config);

        this.array = this.registerDataInput("array", RichTypeAny);
        this.index = this.registerDataInput("index", RichTypeFlowGraphInteger, new FlowGraphInteger(-1));
        this.value = this.registerDataOutput("value", RichTypeAny);
    }

    public override _updateOutputs(context: FlowGraphContext): void {
        const array = this.array.getValue(context);
        const index = getNumericValue(this.index.getValue(context));
        if (array && index >= 0 && index < array.length) {
            this.value.setValue(array[index], context);
        }
    }

    public override serialize(serializationObject?: any): void {
        super.serialize(serializationObject);
    }

    public override getClassName(): string {
        return FlowGraphBlockNames.ArrayIndex;
    }
}

RegisterClass(FlowGraphBlockNames.ArrayIndex, FlowGraphArrayIndexBlock);

----------------------------------------

TITLE: Enabling Order Independent Transparency
DESCRIPTION: Enables Order Independent Transparency (OIT) in a Babylon.js scene for correct transparency rendering without manual sorting.

LANGUAGE: javascript
CODE:
scene.useOrderIndependentTransparency = true;

----------------------------------------

TITLE: Customizing Decorator Options in Babylon.js Editor
DESCRIPTION: This example demonstrates how to use various options with the @visibleInInspector decorator to customize properties in the Babylon.js Editor, including setting min, max, and step values for different property types.

LANGUAGE: typescript
CODE:
@visibleInInspector("number", "Speed", 0.04, { min: 0, max: 1, step: 0.01 })
private _speed: number = 0.04;

@visibleInInspector("number", "Speed 2", 0.04, { min: 0, step: 0.01 })
private _speed2: number = 0.04;

@visibleInInspector("Vector3", "Gravity", Vector3.Zero(), { min: 0 })
private _gravity2: Vector3 = Vector3.Zero();

----------------------------------------

TITLE: Checking WebGL Version in Babylon.js
DESCRIPTION: Demonstrates how to check which version of WebGL is enabled in the Babylon.js engine.

LANGUAGE: JavaScript
CODE:
engine.webGLVersion

----------------------------------------

TITLE: Default HTML Template with CannonJS Physics
DESCRIPTION: Basic HTML template showing how to include CannonJS physics engine in a Babylon.js project.

LANGUAGE: html
CODE:
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">

    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <title>Babylon.js Generated Template</title>

        <!-- Loads the game -->
        <script src="./dist/bundle.js" type="text/javascript"></script>

        <!-- Loads the physics engine "CannonJS" -->
        <script src="./node_modules/cannon/build/cannon.js" type="text/javascript"></script>

        ...
    </head>

    <body>
        ...
    </body>

</html>

----------------------------------------

TITLE: Disposing a GUIGroup in BabylonJS
DESCRIPTION: Disposes of the GUIGroup and deletes all elements within the group. This method should be called when the group is no longer needed to free up resources.

LANGUAGE: typescript
CODE:
dispose() → void

----------------------------------------

TITLE: Implementing RandomEffector with RadialCloner in BabylonJS
DESCRIPTION: Demonstrates how to create and configure a RandomEffector to apply random y-axis rotation (0-180 degrees) to objects cloned by a RadialCloner. The example shows initialization, property configuration, and effector assignment.

LANGUAGE: javascript
CODE:
let rc = new BABYLONX.RadialCloner([cube1, cube2], demo.scene, { count: 24, radius: 6 });

let reff = new BABYLONX.RandomEffector(); //default seed value

reff.rotation = { x: 0, y: 180, z: 0 };

rc.addEffector(reff, 1);

reff.strength = 1;

----------------------------------------

TITLE: Outputting to Console with Flow Graph in Babylon.js
DESCRIPTION: This snippet creates a flow graph that logs a message to the console when the scene is loaded. It demonstrates the basic structure of creating a flow graph coordinator, graph, and connecting event blocks.

LANGUAGE: javascript
CODE:
const coord = new FlowGraphCoordinator({ scene });

const graph = coord.createGraph();

const ctx = graph.createContext();

const sceneReady = new FlowGraphSceneReadyEventBlock();
graph.addEventBlock(sceneReady);

const log = new FlowGraphConsoleLogBlock();
log.message.setValue("Hello, world!", ctx);
sceneReady.done.connectTo(log.in);

coord.start();

----------------------------------------

TITLE: Adding Color Remap Gradients in Babylon.js Particle System
DESCRIPTION: Shows how to use addColorRemapGradient to control the color index over the lifetime of particles. This allows for more dynamic color changes based on particle age.

LANGUAGE: javascript
CODE:
particleSystem.addColorRemapGradient(0, 0, 0.1);
particleSystem.addColorRemapGradient(0.2, 0.1, 0.8);
particleSystem.addColorRemapGradient(0.3, 0.2, 0.85);
particleSystem.addColorRemapGradient(0.35, 0.4, 0.85);
particleSystem.addColorRemapGradient(0.4, 0.5, 0.9);
particleSystem.addColorRemapGradient(0.5, 0.95, 1.0);
particleSystem.addColorRemapGradient(1.0, 0.95, 1.0);

----------------------------------------

TITLE: Defining Object Properties in SPMap
DESCRIPTION: Shows how to structure object data within SPMap arrays using successive floats for position, rotation, and scaling.

LANGUAGE: javascript
CODE:
SPMap[0] = [
    house1Posx, house1Posy, house1Posz, house1Rotx, house1Roty, house1Rotz, house1Sclx, house1Scly, house1Sclz,
    house2Posx, house2Posy, house2Posz, house2Rotx, house2Roty, house2Rotz, house2Sclx, house2Scly, house2Sclz,
    ...
]

----------------------------------------

TITLE: Adding Shadow Caster in Babylon.js
DESCRIPTION: Adds a mesh as a shadow caster to the ShadowGenerator. The optional second parameter, if true, will add any children of the mesh to the shadow caster as well.

LANGUAGE: javascript
CODE:
shadowGenerator.addShadowCaster(casting_mesh, true);

----------------------------------------

TITLE: Common Query Interface Properties
DESCRIPTION: Defines common properties used across different query interfaces for physics shape casting operations.

LANGUAGE: javascript
CODE:
/**
 * Should trigger collisions be considered in the query?
 */
shouldHitTriggers: boolean;
/**
 * Should the query ignore the body that is passed in?
 */
ignoreBody?: PhysicsBody;

----------------------------------------

TITLE: Importing and Instantiating Image Filter
DESCRIPTION: Basic setup for importing and creating an image filter instance with optional engine configuration.

LANGUAGE: javascript
CODE:
import { ImageFilter } from "@babylonjs/controls/imageFilter";

const imageFilter = new ImageFilter(filterCanvas);

// Alternative with custom engine
const engine = new Engine(filterCanvas);
const imageFilter = new ImageFilter(engine);

----------------------------------------

TITLE: Importing Babylon.js Timeline Control
DESCRIPTION: TypeScript import statement for the Timeline control

LANGUAGE: typescript
CODE:
import { Timeline } from "@babylonjs/controls/timeline";

----------------------------------------

TITLE: Customizing Particle Update Function in Babylon.js
DESCRIPTION: Default implementation of the updateFunction for updating particle properties on each frame in a particle system.

LANGUAGE: javascript
CODE:
updateFunction = function (particles) {
  for (let index = 0; index < particles.length; index++) {
    var particle = particles[index];
    particle.age += this._scaledUpdateSpeed;

    if (particle.age >= particle.lifeTime) {
      // Recycle
      particles.splice(index, 1);
      this._stockParticles.push(particle);
      index--;
      continue;
    } else {
      particle.colorStep.scaleToRef(this._scaledUpdateSpeed, this._scaledColorStep);
      particle.color.addInPlace(this._scaledColorStep);

      if (particle.color.a < 0) particle.color.a = 0;

      particle.angle += particle.angularSpeed * this._scaledUpdateSpeed;

      particle.direction.scaleToRef(this._scaledUpdateSpeed, this._scaledDirection);
      particle.position.addInPlace(this._scaledDirection);

      this.gravity.scaleToRef(this._scaledUpdateSpeed, this._scaledGravity);
      particle.direction.addInPlace(this._scaledGravity);
    }
  }
};

----------------------------------------

TITLE: Configuring Particle Direction and Power in Babylon.js
DESCRIPTION: Sets the direction, emission power, and update speed for particles.

LANGUAGE: javascript
CODE:
particleSystem.direction1 = new BABYLON.Vector3(-2, 8, 2);
particleSystem.direction2 = new BABYLON.Vector3(2, 8, -2);

particleSystem.minEmitPower = 1;
particleSystem.maxEmitPower = 3;
particleSystem.updateSpeed = 0.025;

----------------------------------------

TITLE: Scene Render Observer in BabylonJS
DESCRIPTION: Shows how to execute code before each frame render using onBeforeRenderObservable.

LANGUAGE: javascript
CODE:
scene.onBeforeRenderObservable.add(() => {
    //code to execute
});

----------------------------------------

TITLE: Checking Particle Frustum Intersection in Babylon.js
DESCRIPTION: Demonstrates how to check if particles are within the camera's frustum using isInFrustum(). This can be used to customize particle behavior based on visibility, though all particles are still passed to the GPU.

LANGUAGE: javascript
CODE:
scene.updateTransformMatrix(); // force the plane computation once
var frustumPlanes = scene.frustumPlanes;
// then in some loop ...
if (!particle.isInFrustum(frustumePlanes)) {
  p.alive = false;
}

----------------------------------------

TITLE: TypeScript Depth Texture Sharing
DESCRIPTION: TypeScript code to share depth texture between post-process and thickness render target.

LANGUAGE: typescript
CODE:
firstPostProcess.inputTexture._shareDepth(thicknessRT) ;

----------------------------------------

TITLE: Ground Projection Setup
DESCRIPTION: Creates a skybox with ground projection feature using BackgroundMaterial.

LANGUAGE: javascript
CODE:
const size = 1000;
const skydome = BABYLON.MeshBuilder.CreateBox("sky", { size, sideOrientation: BABYLON.Mesh.BACKSIDE }, scene);
skydome.position.y = size / 2;
skydome.receiveShadows = true;

const sky = new BABYLON.BackgroundMaterial("skyMaterial", scene);
sky.enableGroundProjection = true;
sky.projectedGroundRadius = 20;
sky.projectedGroundHeight = 3;
skydome.material = sky;

sky.reflectionTexture = new BABYLON.CubeTexture("textures/skybox", scene);

----------------------------------------

TITLE: Setting Up SPS with Multiple Shape Types
DESCRIPTION: Demonstrates how to create and configure a Solid Particle System with multiple shape types for different terrain objects.

LANGUAGE: javascript
CODE:
const modelBox = BABYLON.MeshBuilder.CreateBox("mb", {}, scene);
const modelCone = BABYLON.MeshBuilder.CreateCylinder("mc", { diameterTop: 0 }, scene);
const sps = new BABYLON.SolidParticleSystem("sps", scene);

sps.addShape(modelBox, 200);
sps.addShape(modelCone, 300);
sps.buildMesh();
modelBox.dispose();
modelCone.dispose();

----------------------------------------

TITLE: Creating WebGPU or WebGL Engine Asynchronously in Babylon.js
DESCRIPTION: This snippet demonstrates how to create a WebGPU engine if supported by the browser, or fall back to a WebGL engine. It uses an asynchronous function to check for WebGPU support and initialize the appropriate engine.

LANGUAGE: javascript
CODE:
async function createEngine() {
  const webGPUSupported = await BABYLON.WebGPUEngine.IsSupportedAsync;
  if (webGPUSupported) {
    const engine = new BABYLON.WebGPUEngine(document.getElementById("renderCanvas"));
    await engine.initAsync();
    return engine;
  }
  return new BABYLON.Engine(document.getElementById("renderCanvas"), true);
}

----------------------------------------

TITLE: Disposing GUIFieldset in BabylonJS
DESCRIPTION: Method to dispose of the GUIFieldset and delete the element.

LANGUAGE: javascript
CODE:
dispose() → void

----------------------------------------

TITLE: Removing Option from GUISelect in BabylonJS
DESCRIPTION: Method to remove an option from the GUISelect element based on its value.

LANGUAGE: javascript
CODE:
removeOption(value)

----------------------------------------

TITLE: Configuring LOD (Level of Detail)
DESCRIPTION: Setting up LOD for the Dynamic Terrain.

LANGUAGE: javascript
CODE:
terrain.LODLimits = [4, 2, 1, 1];
// increment the LOD factor under the 4-th,
// then once again under the second,
// then twice again under the first rows and columns

----------------------------------------

TITLE: Configuring PBR Material Reflections in Babylon.js
DESCRIPTION: Sets up a reflectivity texture for PBR materials to enable SSR reflections.

LANGUAGE: javascript
CODE:
myMaterial.reflectivityTexture = new BABYLON.Texture("textures/reflectivity.png", scene);

----------------------------------------

TITLE: Setting Particle Texture and Mask in Babylon.js
DESCRIPTION: Applies texture and color mask to particles in the system.

LANGUAGE: javascript
CODE:
myParticleSystem.particleTexture = new BABYLON.Texture("PATH TO IMAGE", scene);
myParticleSystem.textureMask = new BABYLON.Color4(0.1, 0.8, 0.8, 1.0);

----------------------------------------

TITLE: Configuring Mesh to Receive Shadows in Babylon.js
DESCRIPTION: Sets a mesh to receive shadows by setting its receiveShadows property to true.

LANGUAGE: javascript
CODE:
receiving_mesh.receiveShadows = true;

----------------------------------------

TITLE: Checking Offscreen Canvas Compatibility
DESCRIPTION: Conditional check to verify browser support for offscreen canvas functionality.

LANGUAGE: javascript
CODE:
if ("OffscreenCanvas" in window && "transferControlToOffscreen" in canvas) {
  // Ok to use offscreen canvas
}

----------------------------------------

TITLE: Multicolored GreasedLine
DESCRIPTION: Create a GreasedLine with multiple colors along its length

LANGUAGE: javascript
CODE:
const points = [-1, 0, 0, 1, 0, 0];
const colors = [BABYLON.Color3.Red(), BABYLON.Color3.Yellow()];
const line = BABYLON.CreateGreasedLine("line", { points }, { useColors: true, colors });

----------------------------------------

TITLE: Custom Shader Implementation
DESCRIPTION: Example of creating and applying a custom shader effect with color channel manipulation.

LANGUAGE: javascript
CODE:
const customEffectWrapper = new EffectWrapper({
    name: "Custom",
    engine: customFilter.engine,
    fragmentShader: `
        varying vec2 vUV;
        uniform sampler2D textureSampler;
        
        void main(void) 
        {
            gl_FragColor = texture2D(textureSampler, vUV);

            float r = gl_FragColor.r;
            gl_FragColor.r = gl_FragColor.b;
            gl_FragColor.b = r;
        }
    `,
    samplerNames: ["textureSampler"]
});
customFilter.filter(imageToProcess, customEffectWrapper);

----------------------------------------

TITLE: Spherical Ribbon Surface
DESCRIPTION: Generates a sphere using parametric equations with two angle parameters

LANGUAGE: javascript
CODE:
const paths = [];
for (let t = 0; t < Math.PI; t += Math.PI / 32) {
    const path = [];
    for (let a = 0; a < 2 * Math.PI; a += Math.PI / 32) {
        let x = 4 * Math.cos(a) * Math.sin(t);
        let y = 4 * Math.sin(a) * Math.sin(t);
        let z = 4 * Math.cos(t);
        path.push(new BABYLON.Vector3(x, y, z))
    }
    path.push(path[0]); // close circle
    paths.push(path)
}

----------------------------------------

TITLE: Enabling Random Start Cell for Particles in Babylon.js
DESCRIPTION: Allows particles to start with a random sprite cell between the start and end cell IDs. This feature is available from Babylon.js v3.3 onwards.

LANGUAGE: javascript
CODE:
particleSystem.spriteRandomStartCell = true;

----------------------------------------

TITLE: Setting Particle Texture in Babylon.js
DESCRIPTION: Assigns a texture to the particles using a flare image.

LANGUAGE: javascript
CODE:
particleSystem.particleTexture = new BABYLON.Texture("textures/flare.png", scene);

----------------------------------------

TITLE: Importing and Animating Car Model in Babylon.js
DESCRIPTION: Loads a car model and applies wheel animations to all four wheels using scene loading and mesh targeting.

LANGUAGE: javascript
CODE:
BABYLON.SceneLoader.ImportMeshAsync("", "url to model car", "car.babylon").then(() =>  {
    const wheelRB = scene.getMeshByName("wheelRB");
    const wheelRF = scene.getMeshByName("wheelRF");
    const wheelLB = scene.getMeshByName("wheelLB");
    const wheelLF = scene.getMeshByName("wheelLF");

    scene.beginAnimation(wheelRB, 0, 30, true);
    scene.beginAnimation(wheelRF, 0, 30, true);
    scene.beginAnimation(wheelLB, 0, 30, true);
    scene.beginAnimation(wheelLF, 0, 30, true);
});

----------------------------------------

TITLE: Moving Mesh Using POV in BabylonJS
DESCRIPTION: Demonstrates how to move a mesh relative to its point of view using the movePOV method.

LANGUAGE: javascript
CODE:
mesh.movePOV(0, 0, -6)

----------------------------------------

TITLE: Setting GUIText Visibility in BabylonJS
DESCRIPTION: Method to set the visibility of a GUIText element with an optional fade effect.

LANGUAGE: javascript
CODE:
setVisible(bool, fad) → void

----------------------------------------

TITLE: Particle Update Process Flow in Babylon.js
DESCRIPTION: Illustrates the complete particle update process flow including the order of operations for particle and vertex updates.

LANGUAGE: javascript
CODE:
var particles: SolidParticles[] = [array of SolidParticle objects];
function setParticles() {
    beforeUpdateParticles();                 // your custom function
    for (let p = 0; p < nbParticles; p++) {
      var particle = particles[p];
      updateParticles(particle);             // your custom position function
      for(let v = 0; particle.vertices.length; v++) {
        var vertex = particle.vertices[v];
        updateParticleVertex(particle, vertex, v);   // your ustom vertex function
        computeAllTheVertexStuff();
      }
    }
    updateTheWholeMesh();                   // does the WebGL work
    afterUpdateParticles();                 // your ustom function
}

----------------------------------------

TITLE: Asynchronous Asset Loading in Babylon.js
DESCRIPTION: Shows the asynchronous version of SceneLoader.Append using Promises for loading assets.

LANGUAGE: javascript
CODE:
BABYLON.SceneLoader.AppendAsync("./", "duck.gltf", scene).then(function (scene) {
  // do something with the scene
});

----------------------------------------

TITLE: Configuring Gizmo Update Behavior in Babylon.js
DESCRIPTION: Demonstrates how to configure whether the gizmo updates its rotation and position to match the attached mesh.

LANGUAGE: javascript
CODE:
// Keep the gizmo fixed to world rotation
gizmo.updateGizmoRotationToMatchAttachedMesh = false;
gizmo.updateGizmoPositionToMatchAttachedMesh = true;

----------------------------------------

TITLE: Creating a Terrain from a Height Map
DESCRIPTION: Using a height map image to generate a Dynamic Terrain.

LANGUAGE: javascript
CODE:
const createTerrain = function (mapData, mapSubX, mapSubZ) {
  const options = {
    terrainSub: 100,
    mapData: mapData,
    mapSubX: mapSubX,
    mapSubZ: mapSubZ,
  };
  terrain = new BABYLON.DynamicTerrain("dt", options, scene);
  terrain.createUVMap();
  terrain.mesh.material = someMaterial;
};

const hmURL = "https://www.babylonjs.com/assets/heightMap.png";
const hmOptions = {
  width: 5000,
  height: 4000,
  subX: 1000,
  subZ: 800,
  onReady: createTerrain,
};
const mapData = new Float32Array(1000 * 800 * 3);
BABYLON.DynamicTerrain.CreateMapFromHeightMapToRef(hmURL, hmOptions, mapData, scene);

----------------------------------------

TITLE: Setting Up GUI Container Panel
DESCRIPTION: Creates and configures a StackPanel container for GUI elements positioned in the bottom right corner

LANGUAGE: javascript
CODE:
const panel = new BABYLON.GUI.StackPanel();
panel.width = "220px";
panel.top = "-50px";
panel.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_RIGHT;
panel.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_BOTTOM;
adt.addControl(panel);

----------------------------------------

TITLE: Applying Fade-In Effect to GUI Elements in JavaScript
DESCRIPTION: Applies a fade-in effect to a specified GUI element. This method can be used to smoothly reveal GUI components.

LANGUAGE: javascript
CODE:
fadeIn(element)

----------------------------------------

TITLE: Declaring Storage Buffer in WGSL for Babylon.js
DESCRIPTION: Shows how to declare a storage buffer in WGSL for use with Babylon.js ShaderMaterial.

LANGUAGE: wgsl
CODE:
struct Buffer {
    items: array<f32>,
};
var<storage,read_write> storageBuffer : Buffer;

----------------------------------------

TITLE: Configuring Particle Size and Lifetime in Babylon.js
DESCRIPTION: Sets the minimum and maximum size and lifetime for particles.

LANGUAGE: javascript
CODE:
particleSystem.minSize = 0.1;
particleSystem.maxSize = 0.5;

particleSystem.minLifeTime = 2;
particleSystem.maxLifeTime = 3.5;

----------------------------------------

TITLE: Enabling Embedded Mode for Babylon.js Inspector
DESCRIPTION: Shows how to enable the embedded mode for the Babylon.js Inspector, which opens the panes within the scene.

LANGUAGE: javascript
CODE:
scene.debugLayer.show({
  embedMode: true,
});

LANGUAGE: javascript
CODE:
Inspector.Show(scene, {
  embedMode: true
});

----------------------------------------

TITLE: GLSL Velocity-Based Foam Effect
DESCRIPTION: GLSL shader code implementing foam effect based on particle velocity.

LANGUAGE: glsl
CODE:
vec2 depthVel = texture2D(depthSampler, texCoord).rg ;
...
#ifdef FLUIDRENDERING_VELOCITY
    float velocity = depthVel.g ;
    finalColor = mix(finalColor, vec3(1.0), smoothstep(0.3, 1.0, velocity / 6.0)) ;
#endif

----------------------------------------

TITLE: Creating Offscreen Canvas in JavaScript
DESCRIPTION: Creates an offscreen canvas from a regular canvas element by setting dimensions and transferring control.

LANGUAGE: javascript
CODE:
var canvas = document.getElementById("renderCanvas");
canvas.width = canvas.clientWidth;
canvas.height = canvas.clientHeight;
var offscreen = canvas.transferControlToOffscreen();

----------------------------------------

TITLE: Positioning Mesh Using Vector3
DESCRIPTION: Demonstrates positioning a mesh using a Vector3 object to set all coordinates at once.

LANGUAGE: javascript
CODE:
box.position = new BABYLON.Vector3(-2, 4.2, 0.1);

----------------------------------------

TITLE: Synchronizing Player Data with Colyseus Server
DESCRIPTION: Sends player position and rotation data to the Colyseus server for synchronization.

LANGUAGE: javascript
CODE:
engine.runRenderLoop(function () {
  if (room && playerViews[sessionId]) {
    room.send("playData", {
      position: {
        x: playerViews[sessionId].position.x,
        y: playerViews[sessionId].position.y,
        z: playerViews[sessionId].position.z,
      },
      quaternion: {
        x: playerViews[sessionId].rotationQuaternion.x,
        y: playerViews[sessionId].rotationQuaternion.y,
        z: playerViews[sessionId].rotationQuaternion.z,
        w: playerViews[sessionId].rotationQuaternion.w,
      },
    });
  }
});

----------------------------------------

TITLE: Parameterized Mesh Digestion in Babylon.js
DESCRIPTION: Shows different ways to use digest() parameters including facetNb for facets per particle, delta for random variation, and number for specific particle count.

LANGUAGE: javascript
CODE:
var model = BABYLON.MeshBuilder.CreateTorusKnot("s", { radius: 20, tube: 6, tubularSegments: 64, radialSegments: 128 }, scene);
SPS.digest(model, { facetNb: 10 }); // 10 facets per particle whatever their final number
SPS.digest(model, { number: 200 }); // 200 particles whatever their final size
SPS.digest(model, { facetNb: 10, delta: 30 }); // between 10 and 40 facets per particle, randomly, whatever their final number
model.dispose();
SPS.buildMesh();

----------------------------------------

TITLE: Simple GLSL Fragment Shader for Procedural Texture
DESCRIPTION: A basic GLSL fragment shader that sets all pixels to a specific gray color.

LANGUAGE: glsl
CODE:
#ifdef GL_ES
precision highp float;
#endif

void main(void) {
 vec3 color = vec3(0.9, 0.9, 0.9);
 gl_FragColor = vec4(color, 1.0);
}

----------------------------------------

TITLE: Physics Collision Callback Implementation
DESCRIPTION: Demonstrates how to register and handle collision callbacks between physics impostors.

LANGUAGE: javascript
CODE:
sphereImpostor.registerOnPhysicsCollide(groundImpostor, function(main, collided) {
    main.object.material.diffuseColor = new BABYLON.Color3(Math.random(), Math.random(), Math.random());
});

----------------------------------------

TITLE: Setting Particle Scale Range in Babylon.js
DESCRIPTION: Defines the minimum and maximum scale for particles in both X and Y directions, allowing for rectangular shapes.

LANGUAGE: javascript
CODE:
particleSystem.minScaleX = 0.1;
particleSystem.maxScaleX = 0.5;

particleSystem.minScaleY = 0.2;
particleSystem.maxScaleY = 0.4;

----------------------------------------

TITLE: Configuring Face UV Mappings in BabylonJS
DESCRIPTION: Sets up UV mapping coordinates for applying different texture sections to each face of a box mesh. Each Vector4 defines the texture coordinates for one face of the box.

LANGUAGE: javascript
CODE:
const faceUV = [];
faceUV[0] = new BABYLON.Vector4(0.5, 0.0, 0.75, 1.0); //rear face
faceUV[1] = new BABYLON.Vector4(0.0, 0.0, 0.25, 1.0); //front face
faceUV[2] = new BABYLON.Vector4(0.25, 0, 0.5, 1.0); //right side
faceUV[3] = new BABYLON.Vector4(0.75, 0, 1.0, 1.0); //left side

----------------------------------------

TITLE: Controlling Timeline Zoom and Time
DESCRIPTION: TypeScript methods for controlling timeline zoom level and current time position

LANGUAGE: typescript
CODE:
// Set zoom level (0-100)
timeline.setVisibleDurationZoom(value);

// Set current time position
timeline.setCurrentTime(value);

// Add pre-cached thumbnail
timeline.addThumbnail(textureData, time);

----------------------------------------

TITLE: HTML Video Player Configuration
DESCRIPTION: Example of HTML-based initialization of the 360 video player with plugin configuration

LANGUAGE: html
CODE:
<video playsinline crossorigin="anonymous" class="azuremediaplayer amp-default-skin amp-big-play-centered" autoplay controls width="100%" height="100%" data-setup='{ "techOrder": ["azureHtml5JS", "html5"], "plugins": { "threeSixty": { } } }'>
    <source src="//willzhanmswest.streaming.mediaservices.windows.net/1f2dd2dd-ee99-40be-aae9-d0c2209982eb/DroneFlightOverLasVegasStripH3Pro7.ism/Manifest" type="application/vnd.ms-sstr+xml" />
    <p class="amp-no-js">
        To view this video please enable JavaScript, and consider upgrading to a web browser that supports HTML5 video
    </p>
</video>

----------------------------------------

TITLE: Creating a Manifest File for Babylon.js Scene Caching
DESCRIPTION: Define a JSON manifest file to control caching behavior for a Babylon.js scene. This file specifies the version, and whether to cache the scene and textures offline.

LANGUAGE: json
CODE:
{
  "version" : 1,
  "enableSceneOffline" : true,
  "enableTexturesOffline" : true
}

----------------------------------------

TITLE: Transforming ObjectCloner Root in BabylonJS
DESCRIPTION: This snippet shows how to transform all clones created by the ObjectCloner by modifying the root property. The scaling and rotation of all clones are adjusted simultaneously.

LANGUAGE: JavaScript
CODE:
mc.root.scaling.y = 2;
mc.root.rotation.x = Math.PI / 4;

----------------------------------------

TITLE: Using Weighted Animations in Babylon.js
DESCRIPTION: Shows how to start animations with specific weights and blend multiple animations in Babylon.js 3.2 and later.

LANGUAGE: javascript
CODE:
const idleAnim = scene.beginWeightedAnimation(skeleton, 0, 89, 1.0, true);
const walkAnim = scene.beginWeightedAnimation(skeleton, 90, 124, 0, true);
const runAnim = scene.beginWeightedAnimation(skeleton, 125, 146, 0, true);

idleAnim.weight = 0.5;
runAnim.weight = 0.5;

// Synchronize animations
idleAnim.syncWith(runAnim);

----------------------------------------

TITLE: Initializing RadialCloner in BabylonJS
DESCRIPTION: Creates a RadialCloner with 24 clones alternating between two cubes, distributed with a radius of 6 units in the XZ plane.

LANGUAGE: javascript
CODE:
const rc = new BABYLONX.RadialCloner([cube1, cube2], demo.scene, {count:24,radius:6});

----------------------------------------

TITLE: Accessing Pre-defined Uniforms in WGSL Shaders for Babylon.js
DESCRIPTION: Demonstrates how to include and access pre-defined scene and mesh uniforms in WGSL shaders for Babylon.js.

LANGUAGE: wgsl
CODE:
#include<sceneUboDeclaration>
#include<meshUboDeclaration>

@vertex
fn main(input : VertexInputs) -> FragmentInputs {
    vertexOutputs.position = scene.viewProjection * mesh.world * vec4<f32>(vertexInputs.position, 1.0);
}

----------------------------------------

TITLE: Setting Particle Emission Rate in Babylon.js
DESCRIPTION: Defines the number of particles emitted per second.

LANGUAGE: javascript
CODE:
particleSystem.emitRate = 1500;

----------------------------------------

TITLE: Configuring SPMap Structure in JavaScript
DESCRIPTION: Demonstrates the basic structure of SPMap arrays for defining object positions, rotations, and scaling in the terrain.

LANGUAGE: javascript
CODE:
const SPMap = [];
SPMap[0] = [dataHouse1, dataHouse2, ..., dataHouseN];
SPMap[1] = [dataTree1, dataTree2, ..., dataTreeN];
...
SPMap[t] = [dataObject1, dataObject2, ..., dataObjectN];

----------------------------------------

TITLE: Importing Occlusion Query Dependencies in Babylon.js
DESCRIPTION: These import statements ensure access to the occlusion query feature in Babylon.js. They include the engine query extension and bounding box renderer.

LANGUAGE: javascript
CODE:
import '@babylonjs/core/Engines/Extensions/engine.query';
import '@babylonjs/core/Rendering/boundingBoxRenderer';

----------------------------------------

TITLE: Handling Rotation Quaternions in Babylon.js
DESCRIPTION: Shows how to handle rotation quaternions when working with imported models that have them set by default.

LANGUAGE: javascript
CODE:
myMesh.rotationQuaternion = null; //Any version of Babylon.js

LANGUAGE: javascript
CODE:
myMesh.rotation = BABYLON.Vector3.Zero(); //babylon.js versions > 4.00

----------------------------------------

TITLE: YAML Metadata Configuration
DESCRIPTION: Example of page metadata configuration using YAML frontmatter

LANGUAGE: yaml
CODE:
---
title: Node Material
image: /img/pageImages/nodeMaterial.jpg
description: The Node Material is a simple, highly customizable material that you can build yourself piece by piece.
keywords: shaders, glsl, node editor, graphics
further-reading:
  - title: Dedicated NME Forum Examples
    url: https://forum.babylonjs.com/t/node-materials-examples/6048
---

----------------------------------------

TITLE: Debugging NodeGeometry
DESCRIPTION: Shows how to open the Node Geometry Editor for debugging purposes.

LANGUAGE: javascript
CODE:
nodeGeometry.edit();

----------------------------------------

TITLE: Creating a HolographicButton in Babylon.js
DESCRIPTION: Demonstrates the creation and customization of a HolographicButton in Babylon.js 3D GUI.

LANGUAGE: javascript
CODE:
const button = new BABYLON.GUI.HolographicButton("reset");
panel.addControl(button);

// Must be done AFTER addControl in order to overwrite the default content
const text1 = new BABYLON.GUI.TextBlock();
text1.text = "Reset";
text1.color = "Red";
text1.fontSize = 48;
button.content = text1;

----------------------------------------

TITLE: Setting Rotation Quaternion Directly
DESCRIPTION: Shows how to create and assign a rotation quaternion directly using the RotationAxis method with an axis vector and angle.

LANGUAGE: javascript
CODE:
mesh.rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(1, 0, -1), Math.PI / 3);

----------------------------------------

TITLE: Applying Forces to Physics Objects
DESCRIPTION: Shows how to apply continuous forces to physics objects over time, with special handling for different physics engines.

LANGUAGE: javascript
CODE:
//Force Settings
var forceDirection = new BABYLON.Vector3(1, 0, 0);
var forceMagnitude = 50;
var contactLocalRefPoint = BABYLON.Vector3.Zero();

impostor.applyForce(forceDirection.scale(forceMagnitude), mesh.getAbsolutePosition().add(contactLocalRefPoint));

----------------------------------------

TITLE: Setting Particle Direction Range in Babylon.js
DESCRIPTION: Defines two direction vectors between which particles will travel randomly.

LANGUAGE: javascript
CODE:
particleSystem.direction1 = new BABYLON.Vector3(-7, 8, 3);
particleSystem.direction2 = new BABYLON.Vector3(7, 8, -3);

----------------------------------------

TITLE: Playing One-Shot Sound Effects in Babylon.js
DESCRIPTION: Creates and plays a non-streaming sound from a fully downloaded buffer. Suitable for short sound effects that play once.

LANGUAGE: javascript
CODE:
const sound = await BABYLON.CreateSoundAsync("sound", "<sound file URL>");
sound.play();

----------------------------------------

TITLE: Structure JSON Configuration
DESCRIPTION: Example of how to add new pages to the documentation structure

LANGUAGE: javascript
CODE:
{
    "friendlyName": "Home Page",
    "content": "landing_pages/home",
    "children": {
    /* [...] */
    "divingDeeper": {
            "friendlyName": "Diving Deeper",
            "children": {
              /* [...] */
              "audio": {
                    "friendlyName": "Audio",
                    "children": {
                        "playingSoundsMusic": { "friendlyName": "Playing Sounds and Music", "children": {}, "content": "How_To/audio/Playing_sounds_and_music" }
                    },
                    "content": "landing_pages/divingDeeperAudioLandingPage"
                }
            }
    }
    /* [...] */
}

----------------------------------------

TITLE: Applying IES Light Profiles to Spot Lights in Babylon.js
DESCRIPTION: Demonstrates how to apply an IES light profile to a spot light in Babylon.js, controlling the light fall off based on IES specifications.

LANGUAGE: javascript
CODE:
light.iesProfileTexture = new BABYLON.Texture("https://assets.babylonjs.com/meshes/EXT_lights_ies/LightProfile.ies");

----------------------------------------

TITLE: Running Smart Filters Demo in TypeScript
DESCRIPTION: Commands to install dependencies and start the Smart Filters demo application after cloning the repository.

LANGUAGE: bash
CODE:
npm install
npm start

----------------------------------------

TITLE: Scene Optimizer with Callbacks
DESCRIPTION: Example showing OptimizeAsync with success and failure callback functions.

LANGUAGE: javascript
CODE:
BABYLON.SceneOptimizer.OptimizeAsync(scene, BABYLON.SceneOptimizerOptions.ModerateDegradationAllowed(),
function() {
   // On success
}, function() {
   // FPS target not reached
});

----------------------------------------

TITLE: Creating Custom Utility Layer for Gizmos in Babylon.js
DESCRIPTION: Demonstrates how to create a custom UtilityLayerRenderer for gizmos instead of using the default utility layer.

LANGUAGE: javascript
CODE:
const utilLayer = new BABYLON.UtilityLayerRenderer(scene);
const gizmo = new BABYLON.AxisDragGizmo(new BABYLON.Vector3(1, 0, 0), BABYLON.Color3.FromHexString("#00b894"), utilLayer);

----------------------------------------

TITLE: Creating a GUITextfield in BabylonJS
DESCRIPTION: Constructor for creating a new GUITextfield. It takes parameters for id, options, GUI manager, and whether to append to the body.

LANGUAGE: javascript
CODE:
new GUITextfield(id, options, guimanager, append)

----------------------------------------

TITLE: Setting Speed Ratio for Animation Groups in BabylonJS
DESCRIPTION: Demonstrates how to adjust the playback speed of all animations within an AnimationGroup using the speedRatio property.

LANGUAGE: javascript
CODE:
animationGroup1.speedRatio = 0.25;
animationGroup2.speedRatio = 3;

----------------------------------------

TITLE: Transforming LinearCloner Root in BabylonJS
DESCRIPTION: Examples of scaling and rotating all clones by transforming the root node.

LANGUAGE: javascript
CODE:
lc.root.scaling.y = 2;
lc.root.rotation.x = Math.PI / 4;

----------------------------------------

TITLE: Implementing WebGPU Sampler Cache in TypeScript
DESCRIPTION: This code snippet shows the implementation of the WebGPU sampler cache. It uses a simple map to store GPU samplers, with the hash value computed from the sampler properties.

LANGUAGE: TypeScript
CODE:
export class WebGPUCacheSampler {

    private _samplers: { [hash: number]: GPUSampler } = {};
    ...
}

----------------------------------------

TITLE: Creating Lamp Shape for Extrusion in BabylonJS
DESCRIPTION: Generates a circular shape outline using Vector3 points in the x,y plane for lamp post extrusion.

LANGUAGE: javascript
CODE:
const lampShape = [];
    for(let i = 0; i < 20; i++) {
        lampShape.push(new BABYLON.Vector3(Math.cos(i * Math.PI / 10), Math.sin(i * Math.PI / 10), 0));
    }
lampShape.push(lampShape[0]); //close shape

----------------------------------------

TITLE: Adding Animation Array to Custom Object in Babylon.js
DESCRIPTION: Demonstrates how to add an animations array to a custom object in Babylon.js, allowing animations to be stored on target objects that don't have a default animations array.

LANGUAGE: javascript
CODE:
myAnimation.animations = [];
myAnimation.animations.push(weightAnimation);

----------------------------------------

TITLE: Positioning Pivoted Mesh in World Space
DESCRIPTION: Method to correctly position a pivoted mesh in world space after rotation or scaling, accounting for the difference between position and absolute position.

LANGUAGE: javascript
CODE:
mesh.position = new BABYLON.Vector3(x, y, z);
mesh.position = mesh.position.add(mesh.position.subtract(mesh.getAbsolutePosition()));

----------------------------------------

TITLE: Checking GUICheckbox Visibility in BabylonJS
DESCRIPTION: Method to check if the GUICheckbox is currently visible.

LANGUAGE: javascript
CODE:
isVisible() → void

----------------------------------------

TITLE: Configuring VSCode Keyboard Shortcuts for Babylon.js Development
DESCRIPTION: Custom keybindings configuration for VSCode to improve workflow efficiency. Includes shortcuts for saving files, task management, testing, and log viewing.

LANGUAGE: json
CODE:
// Place your key bindings in this file to overwrite the defaults
[
    { "key": "ctrl+shift+alt+s", "command": "workbench.action.files.saveFiles" },
    { "key": "ctrl+shift+alt+k", "command": "workbench.action.tasks.terminate" },
    { "key": "ctrl+shift+alt+t", "command": "workbench.action.tasks.test" },
    { "key": "ctrl+shift+alt+l", "command": "workbench.action.tasks.showLog" },
    { "key": "ctrl+shift+alt+r", "command": "workbench.action.tasks.runTask" }
]

----------------------------------------

TITLE: Initializing Legacy Audio Engine in Babylon.js
DESCRIPTION: Shows how to enable the deprecated audio engine when initializing the graphics engine. Required for using the old audio system as it's no longer created by default.

LANGUAGE: javascript
CODE:
const engine = BABYLON.Engine(canvas, true, { audioEngine: true }, true);

----------------------------------------

TITLE: Optimizing Scroll Viewer Rendering in Babylon.js
DESCRIPTION: Shows how to optimize rendering performance for Scroll Viewers with many controls by freezing controls and setting bucket sizes in Babylon.js GUI.

LANGUAGE: javascript
CODE:
myScrollViewer.freezeControls = true;
myScrollViewer.setBucketSizes(100, 40);

----------------------------------------

TITLE: Listening to Gamepad Connection Events in Babylon.js
DESCRIPTION: Sets up event listeners for gamepad connection and disconnection events using the GamepadManager in Babylon.js.

LANGUAGE: javascript
CODE:
gamepadManager.onGamepadConnectedObservable.add((gamepad, state) => {});
gamepadManager.onGamepadDisconnectedObservable.add((gamepad, state) => {});

----------------------------------------

TITLE: Point Proximity Query Implementation
DESCRIPTION: Example implementation of point proximity query using the Havok physics plugin.

LANGUAGE: javascript
CODE:
var hk = new BABYLON.HavokPlugin();
hk.pointProximity(
    {
        position: ballPos,
        maxDistance: 0.1
    },
    result
);

----------------------------------------

TITLE: Stopping Particle System in Babylon.js
DESCRIPTION: Controls for stopping particle emission and clearing existing particles.

LANGUAGE: javascript
CODE:
myParticleSystem.stop();
myParticleSystem.reset(); //Reset to empty system

----------------------------------------

TITLE: Importing Decorators in Babylon.js Editor
DESCRIPTION: This snippet shows how to import the visibleInInspector decorator from the decorators.ts file located in the src/scenes/ directory for use in Babylon.js Editor scripts.

LANGUAGE: typescript
CODE:
import { visibleInInspector } from "../decorators";

----------------------------------------

TITLE: Configuring NullEngine Options in Babylon.js
DESCRIPTION: Example showing how to configure NullEngine with custom render dimensions and texture size settings.

LANGUAGE: javascript
CODE:
var engine = new BABYLON.NullEngine({
    renderWidth: 512,
    renderHeight: 256,
    textureSize: 512
});

----------------------------------------

TITLE: Defining glTF Loader Extension Options in TypeScript
DESCRIPTION: This snippet demonstrates how to augment the GLTFLoaderExtensionOptions interface to add custom options for a glTF loader extension. It defines a new type for the extension options and extends the existing interface.

LANGUAGE: typescript
CODE:
type MyCustomExtensionOptions = { option1?: string, option2?: number };

declare module "@babylonjs/loaders" {
  export interface GLTFLoaderExtensionOptions {
    myCustomExtension: MyCustomImporterOptions;
  }
}

----------------------------------------

TITLE: Capturing Screenshot with Puppeteer
DESCRIPTION: Takes a screenshot of the rendered BabylonJS scene and saves it to a file.

LANGUAGE: javascript
CODE:
await page.screenshot({path: './public/example.png'});

----------------------------------------

TITLE: Checking GUIMeter Visibility in BabylonJS
DESCRIPTION: Method to check if the GUIMeter element is currently visible.

LANGUAGE: javascript
CODE:
isVisible() → void

----------------------------------------

TITLE: Converting ArrayBuffer to Blob in JavaScript
DESCRIPTION: This code converts an ArrayBuffer containing asset data into a Blob object in memory.

LANGUAGE: javascript
CODE:
const assetBlob = new Blob([assetArrayBuffer]);

----------------------------------------

TITLE: Creating a Dynamic Terrain
DESCRIPTION: Basic setup for creating a Dynamic Terrain using a data map.

LANGUAGE: javascript
CODE:
const mapCoords = [some_big_flat_array_of_coordinates];
const mapWidthPointNb = 2000;
const mapDepthPointNb = 1000;
const terrainSub = 100;
const mapParams = {
  mapData: mapCoords,
  mapSubX: mapWidthPointNb,
  mapSubZ: mapDepthPointNb,
  terrainSub: terrainSub,
};

const terrain = new BABYLON.DynamicTerrain("terrain", mapParams, scene);
const terrainMesh = terrain.mesh;
terrainMesh.diffuseTexture = myNiceTexture;

----------------------------------------

TITLE: Configuring Babylon.js Base URL
DESCRIPTION: Setting custom base URL for Babylon.js resources to use a different CDN or specific version.

LANGUAGE: javascript
CODE:
BABYLON.Tools.ScriptBaseUrl = "https://my.wonderfull.server";

----------------------------------------

TITLE: Extruding Lamp Shape in BabylonJS
DESCRIPTION: Creates the final lamp mesh by extruding the defined shape along the path with end caps and scaling.

LANGUAGE: javascript
CODE:
const lamp = BABYLON.MeshBuilder.ExtrudeShape("lamp", {cap: BABYLON.Mesh.CAP_END, shape: lampShape, path: lampPath, scale: 0.5});

----------------------------------------

TITLE: Applying Textures to Goldberg Polyhedron
DESCRIPTION: Methods for applying textures to face groups using UV mapping with configurable center, radius and angle.

LANGUAGE: javascript
CODE:
const uvArray = [
  [18, 18, new BABYLON.Vector2(0.25, 0.75), 0.25, 0],
  [26, 37, new BABYLON.Vector2(0.625, 0.37), 0.37, Math.PI / 2]
];

----------------------------------------

TITLE: Converting Quaternion to Euler Angles
DESCRIPTION: Demonstrates how to convert a rotation quaternion to Euler angles for use with mesh.rotation.

LANGUAGE: javascript
CODE:
const euler = rotation_quaternion.toEulerAngles();

----------------------------------------

TITLE: Handling Promise for Model Loading in Babylon.js Viewer
DESCRIPTION: This snippet shows how to handle the Promise returned by the loadModel function in Babylon.js Viewer, including success and error cases.

LANGUAGE: javascript
CODE:
viewer
  .loadModel({
    title: "Helmet",
    subtitle: "BabylonJS",
    thumbnail: "https://www.babylonjs.com/img/favicon/apple-icon-144x144.png",
    url: "https://www.babylonjs.com/assets/DamagedHelmet/glTF/DamagedHelmet.gltf",
  })
  .then((model) => {
    console.log("model loaded!");
  })
  .catch((error) => {
    console.log("error loading the model!", error);
  });

----------------------------------------

TITLE: Using setAndStartTimer for Delayed Execution
DESCRIPTION: Demonstrates the usage of setAndStartTimer for executing code after a delay within the Babylon.js render loop.

LANGUAGE: javascript
CODE:
BABYLON.setAndStartTimer({
  timeout: 3000,
  contextObservable: scene.onBeforeRenderObservable,
  onEnded: () => {
    // code running here is guaranteed to run inside the beforeRender loop
  },
});

----------------------------------------

TITLE: Implementing Custom Loading Screen in JavaScript
DESCRIPTION: JavaScript implementation of a custom loading screen with basic alert functionality.

LANGUAGE: javascript
CODE:
function CustomLoadingScreen(text) {
  this.loadingUIText = text;
}
CustomLoadingScreen.prototype.displayLoadingUI = function() {
  alert(this.loadingUIText);
};
CustomLoadingScreen.prototype.hideLoadingUI = function() {
  alert("Loaded!");
};

----------------------------------------

TITLE: Animated Blur Effect
DESCRIPTION: Shows how to animate the blur size of the highlight effect dynamically.

LANGUAGE: javascript
CODE:
const hl2 = new BABYLON.HighlightLayer("hl2", scene);
hl2.addMesh(ground, BABYLON.Color3.Red());

const alpha = 0;
scene.registerBeforeRender(() => {
  alpha += 0.06;

  hl2.blurHorizontalSize = 0.3 + Math.cos(alpha) * 0.6 + 0.6;
  hl2.blurVerticalSize = 0.3 + Math.sin(alpha / 3) * 0.6 + 0.6;
});

----------------------------------------

TITLE: Re-including Excluded Skinned Mesh in Motion Blur in Babylon.js
DESCRIPTION: This snippet demonstrates how to re-include a previously excluded skinned mesh in the motion blur effect's bones velocity computation.

LANGUAGE: javascript
CODE:
// Previously excluded, the mesh "mySkinnedMesh" will now compute bones velocities for a better render.
motionblur.removeExcludedSkinnedMesh(mySkinnedMesh);

----------------------------------------

TITLE: Loading and Playing Sound with Callback in Babylon.js
DESCRIPTION: Demonstrates loading a sound file and playing it only after it has been fully loaded and decoded using a callback function.

LANGUAGE: javascript
CODE:
const music = new BABYLON.Sound("Music", "music.wav", scene, function () {
  // Sound has been downloaded & decoded
  music.play();
});

----------------------------------------

TITLE: Running Webpack Watch Command in Babylon.js Editor Project
DESCRIPTION: This command starts the Webpack watch process for automatically rebuilding TypeScript files in a Babylon.js Editor project. It should be run from the root folder of the workspace.

LANGUAGE: bash
CODE:
npm run watch

----------------------------------------

TITLE: Creating an Instance of a Mesh in Babylon.js
DESCRIPTION: Shows how to create an instance of a mesh, which shares the same geometry and material as the original. Instances are more memory-efficient but cannot have their materials changed independently.

LANGUAGE: javascript
CODE:
instanceHouse = house.createInstance("instanceHouse")

----------------------------------------

TITLE: Playing MMD Animation in Babylon.js
DESCRIPTION: TypeScript code to set up and play an MMD animation using MmdRuntime in Babylon.js.

LANGUAGE: typescript
CODE:
const mmdRuntime = new MmdRuntime();
mmdRuntime.register(scene);
const mmdModel = mmdRuntime.createMmdModel(mmdMesh);
mmdModel.addAnimation(modelMotion);
mmdModel.setAnimation("model_motion_1");

----------------------------------------

TITLE: Manipulating BabylonJS Scene via Puppeteer
DESCRIPTION: Demonstrates how to inject JavaScript code to modify scene properties through Puppeteer.

LANGUAGE: javascript
CODE:
page.evaluate("BABYLON.Engine.LastCreatedScene.activeCamera.alpha = 1.4;");

----------------------------------------

TITLE: Checking Point Intersections in Babylon.js
DESCRIPTION: Shows how to detect intersections between a mesh and a specific point in 3D space using the intersectsPoint() function. Changes the mesh color when intersection occurs.

LANGUAGE: javascript
CODE:
var pointToIntersect = new BABYLON.Vector3(10, -5, 0);
if (balloon3.intersectsPoint(pointToIntersect)){
  balloon3.material.emissiveColor = new BABYLON.Color4(1, 0, 0, 1);
}

----------------------------------------

TITLE: Disposing GUICheckbox in BabylonJS
DESCRIPTION: Method to dispose of the GUICheckbox and remove it from the GUI.

LANGUAGE: javascript
CODE:
dispose() → void

----------------------------------------

TITLE: Loading Babylon.js CDN References
DESCRIPTION: HTML script tags for including Babylon.js core and loaders from CDN. Includes both production and preview links.

LANGUAGE: html
CODE:
<script src="https://cdn.babylonjs.com/babylon.js"></script>
<script src="https://cdn.babylonjs.com/loaders/babylonjs.loaders.min.js"></script>

LANGUAGE: html
CODE:
<script src="https://preview.babylonjs.com/babylon.js"></script>
<script src="https://preview.babylonjs.com/loaders/babylonjs.loaders.min.js"></script>

----------------------------------------

TITLE: Initializing Solid Particle System for Boxes in JavaScript
DESCRIPTION: Creates a Solid Particle System (SPS) to efficiently generate multiple boxes in a row. It sets up the box size, spacing, and positioning function.

LANGUAGE: JavaScript
CODE:
var boxes = 101; //odd number
var box_size = 0.25; // must be float
var box_gap = box_size/2;
var box_spacing = box_size + box_gap;
var box = BABYLON.MeshBuilder.CreateBox("box", {size:box_size}, scene);

var boxes_SPS = new BABYLON.SolidParticleSystem("boxesSPS", scene, {updatable: false});
    
//function to position boxes
var set_boxes = function(particle, i, s) {   
    var mid_point = Math.floor(boxes/2);
    particle.position.x = (i - mid_point) * box_spacing + box_size/2;
}

boxes_SPS.addShape(box, boxes, {positionFunction:set_boxes});  
var boxes = boxes_SPS.buildMesh(); // mesh of leaves
box.dispose();

----------------------------------------

TITLE: Implementing Spherical Panning Camera in Babylon.js
DESCRIPTION: Creates a spherical panning camera that enables smooth 360-degree rotation with inertia and pole handling. The implementation uses quaternion math for rotation calculations and includes features like cursor state management, pointer event handling, and inertial movement after release. Requires Babylon.js version higher than 3.3.0 due to quaternion math dependencies.

LANGUAGE: javascript
CODE:
var addSphericalPanningCameraToScene = function (scene, canvas) {
    // Set cursor to grab.
    scene.defaultCursor = "grab";

    // Add the actual camera to the scene.  Since we are going to be controlling it manually,
    // we don't attach any inputs directly to it.
    // NOTE: We position the camera at origin in this case, but it doesn't have to be there.
    // Spherical panning should work just fine regardless of the camera's position.
    var camera = new BABYLON.FreeCamera("camera", BABYLON.Vector3.Zero(), scene);

    // Ensure the camera's rotation quaternion is initialized correctly.
    camera.rotationQuaternion = BABYLON.Quaternion.Identity();

    // The spherical panning math has singularities at the poles (up and down) that cause
    // the orientation to seem to "flip."  This is undesirable, so this method helps reject
    // inputs that would cause this behavior.
    var isNewForwardVectorTooCloseToSingularity = v => {
        const TOO_CLOSE_TO_UP_THRESHOLD = 0.99;
        return Math.abs(BABYLON.Vector3.Dot(v, BABYLON.Vector3.Up())) > TOO_CLOSE_TO_UP_THRESHOLD;
    }

    // Local state variables which will be used in the spherical pan method; declared outside 
    // because they must persist from frame to frame.
    var ptrX = 0;
    var ptrY = 0;
    var inertiaX = 0;
    var inertiaY = 0;

    // Variables internal to spherical pan, declared here just to avoid reallocating them when
    // running.
    var priorDir = new BABYLON.Vector3();
    var currentDir = new BABYLON.Vector3();
    var rotationAxis = new BABYLON.Vector3();
    var rotationAngle = 0;
    var rotation = new BABYLON.Quaternion();
    var newForward = new BABYLON.Vector3();
    var newRight = new BABYLON.Vector3();
    var newUp = new BABYLON.Vector3();
    var matrix = new BABYLON.Matrix.Identity();

    // The core pan method.
    // Intuition: there exists a rotation of the camera that brings priorDir to currentDir.
    // By concatenating this rotation with the existing rotation of the camera, we can move
    // the camera so that the cursor appears to remain over the same point in the scene, 
    // creating the feeling of smooth and responsive 1-to-1 motion.
    var pan = (currX, currY) => {
        // Helper method to convert a screen point (in pixels) to a direction in view space.
        var getPointerViewSpaceDirectionToRef = (x, y, ref) => {
            BABYLON.Vector3.UnprojectToRef(
                new BABYLON.Vector3(x, y, 0), 
                canvas.width, 
                canvas.height,
                BABYLON.Matrix.Identity(),
                BABYLON.Matrix.Identity(), 
                camera.getProjectionMatrix(),
                ref);
            ref.normalize();
        }

        // Helper method that computes the new forward direction.  This was split into its own
        // function because, near the singularity, we may to do this twice in a single frame
        // in order to reject inputs that would bring the forward vector too close to vertical.
        var computeNewForward = (x, y) => {
            getPointerViewSpaceDirectionToRef(ptrX, ptrY, priorDir);
            getPointerViewSpaceDirectionToRef(x, y, currentDir);

            BABYLON.Vector3.CrossToRef(priorDir, currentDir, rotationAxis);

            // If the magnitude of the cross-product is zero, then the cursor has not moved
            // since the prior frame and there is no need to do anything.
            if (rotationAxis.lengthSquared() > 0) {
                rotationAngle = BABYLON.Vector3.GetAngleBetweenVectors(priorDir, currentDir, rotationAxis);
                BABYLON.Quaternion.RotationAxisToRef(rotationAxis, -rotationAngle, rotation);

                // Order matters here.  We create the new forward vector by applying the new rotation 
                // first, then apply the camera's existing rotation.  This is because, since the new
                // rotation is computed in view space, it only makes sense for a camera that is
                // facing forward.
                newForward.set(0, 0, 1);
                newForward.rotateByQuaternionToRef(rotation, newForward);
                newForward.rotateByQuaternionToRef(camera.rotationQuaternion, newForward);

                return !isNewForwardVectorTooCloseToSingularity(newForward);
            }

            return false;
        }

        // Compute the new forward vector first using the actual input, both X and Y.  If this results
        // in a forward vector that would be too close to the singularity, recompute using only the
        // new X input, repeating the Y input from the prior frame.  If either of these computations
        // succeeds, construct the new rotation matrix using the result.
        if (computeNewForward(currX, currY) || computeNewForward(currX, ptrY)) {
            // We manually compute the new right and up vectors to ensure that the camera 
            // only has pitch and yaw, never roll.  This dependency on the world-space
            // vertical axis is what causes the singularity described above.
            BABYLON.Vector3.CrossToRef(BABYLON.Vector3.Up(), newForward, newRight);
            BABYLON.Vector3.CrossToRef(newForward, newRight, newUp);

            // Create the new world-space rotation matrix from the computed forward, right, 
            // and up vectors.
            matrix.setRowFromFloats(0, newRight.x, newRight.y, newRight.z, 0);
            matrix.setRowFromFloats(1, newUp.x, newUp.y, newUp.z, 0);
            matrix.setRowFromFloats(2, newForward.x, newForward.y, newForward.z, 0);

            BABYLON.Quaternion.FromRotationMatrixToRef(matrix.getRotationMatrix(), camera.rotationQuaternion);
        }
    };

    // The main panning loop, to be run while the pointer is down.
    var sphericalPan = () => {
        pan(scene.pointerX, scene.pointerY);

        // Store the state variables for use in the next frame.
        inertiaX = scene.pointerX - ptrX;
        inertiaY = scene.pointerY - ptrY;
        ptrX = scene.pointerX;
        ptrY = scene.pointerY;
    }

    // The inertial panning loop, to be run after the pointer is released until inertia
    // runs out, or until the pointer goes down again, whichever happens first.  Essentially
    // just pretends to provide a decreasing amount of input based on the last observed input,
    // removing itself once the input becomes negligible.
    const INERTIA_DECAY_FACTOR = 0.9;
    const INERTIA_NEGLIGIBLE_THRESHOLD = 0.5;
    var inertialPanObserver;
    var inertialPan = () => {
        if (Math.abs(inertiaX) > INERTIA_NEGLIGIBLE_THRESHOLD || Math.abs(inertiaY) > INERTIA_NEGLIGIBLE_THRESHOLD) {
            pan(ptrX + inertiaX, ptrY + inertiaY);

            inertiaX *= INERTIA_DECAY_FACTOR;
            inertiaY *= INERTIA_DECAY_FACTOR;
        }
        else {
            scene.onBeforeRenderObservable.remove(inertialPanObserver);
        }
    };

    // Enable/disable spherical panning depending on click state.  Note that this is an 
    // extremely simplistic way to do this, so it gets a little janky on multi-touch.
    var sphericalPanObserver;
    var pointersDown = 0;
    scene.onPointerDown = () => {
        pointersDown += 1;
        if (pointersDown !== 1) {
            return;
        }

        // Disable inertial panning.
        scene.onBeforeRenderObservable.remove(inertialPanObserver);

        // Switch cursor to grabbing.
        scene.defaultCursor = "grabbing";

        // Store the current pointer position to clean out whatever values were left in
        // there from prior iterations.
        ptrX = scene.pointerX;
        ptrY = scene.pointerY;
        
        // Enable spherical panning.
        sphericalPanObserver = scene.onBeforeRenderObservable.add(sphericalPan);
    }
    scene.onPointerUp = () => {
        pointersDown -= 1;
        if (pointersDown !== 0) {
            return;
        }

        // Switch cursor to grab.
        scene.defaultCursor = "grab";

        // Disable spherical panning.
        scene.onBeforeRenderObservable.remove(sphericalPanObserver);

        // Enable inertial panning.
        inertialPanObserver = scene.onBeforeRenderObservable.add(inertialPan);
    }
};

----------------------------------------

TITLE: Setting Maximum Simultaneous Lights in BabylonJS
DESCRIPTION: Configures material to support more than the default limit of 4 lights in a scene.

LANGUAGE: javascript
CODE:
material.maxSimultaneousLights = 5;

----------------------------------------

TITLE: Restoring Stored Particles in Babylon.js Solid Particle System
DESCRIPTION: Demonstrates how to restore previously stored or removed particles back into the Solid Particle System.

LANGUAGE: javascript
CODE:
var stock = []; // the array to store the particles in
var sps = new BABYLON.SolidParticleSystem("sps", scene, { expandable: true });
sps.addShape(model1, 1000); // the SPS contains 1000 particles
sps.addShape(model1, 100, { storage: stock }); // 100 others are stored aside
sps.buildMesh();

// ... later in the code
var removed = sps.removeParticles(0, 99); // the 100 first particles are removed and stored in another array
sps.buildMesh();

// ... later again in the code : let's restore the misssing particles
sps.insertParticlesFromArray(removed); // restores the previously removed particles
sps.insertParticlesFromArray(stock); // restores the previously created particles
sps.buildMesh();
sps.setParticles();

----------------------------------------

TITLE: Advanced Fresnel Parameter Configuration
DESCRIPTION: Demonstrates a complete example of configuring multiple Fresnel parameters including reflection, emission, and opacity with custom settings.

LANGUAGE: javascript
CODE:
material.reflectionTexture = new BABYLON.CubeTexture("Scenes/Customs/skybox/TropicalSunnyDay", scene);
material.diffuseColor = new BABYLON.Color3(0, 0, 0);
material.emissiveColor = new BABYLON.Color3(0.5, 0.5, 0.5);
material.alpha = 0.2;
material.specularPower = 16;

// Fresnel
material.reflectionFresnelParameters = new BABYLON.FresnelParameters();
material.reflectionFresnelParameters.bias = 0.1;

material.emissiveFresnelParameters = new BABYLON.FresnelParameters();
material.emissiveFresnelParameters.bias = 0.6;
material.emissiveFresnelParameters.power = 4;
material.emissiveFresnelParameters.leftColor = BABYLON.Color3.White();
material.emissiveFresnelParameters.rightColor = BABYLON.Color3.Black();

material.opacityFresnelParameters = new BABYLON.FresnelParameters();
material.opacityFresnelParameters.leftColor = BABYLON.Color3.White();
material.opacityFresnelParameters.rightColor = BABYLON.Color3.Black();

----------------------------------------

TITLE: Checking heyVR SDK Load Status in JavaScript
DESCRIPTION: Example showing how to check if the heyVR SDK is loaded and execute code accordingly using event listeners.

LANGUAGE: javascript
CODE:
const doStuff= () => 'Executed on SDK load'

window.heyVR ?
  doStuff() :
  window.addEventListener( 'heyVR.SDKLoaded', doStuff );

----------------------------------------

TITLE: HTML Template with AmmoJS Physics
DESCRIPTION: Modified HTML template showing how to include AmmoJS physics engine instead of CannonJS.

LANGUAGE: html
CODE:
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">

    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <title>Babylon.js Generated Template</title>

        <!-- Loads the game -->
        <script src="./dist/bundle.js" type="text/javascript"></script>

        <!-- Loads the physics engine "AmmoJS" -->
        <script src="https://cdn.babylonjs.com/ammo.js" type="text/javascript"></script>

        ...
    </head>

    <body>
        ...
    </body>

</html>

----------------------------------------

TITLE: Using dat.GUI with Babylon.js
DESCRIPTION: Illustrates the integration of the external dat.GUI library in a Babylon.js scene for creating control interfaces.

LANGUAGE: javascript
CODE:
// Playground URL: https://playground.babylonjs.com/#NGS9AU#1

----------------------------------------

TITLE: Updating Input Element for Events in Babylon.js
DESCRIPTION: Shows how to change the DOM element used for capturing events in a Babylon.js scene. This is useful when working with multiple canvases.

LANGUAGE: javascript
CODE:
scene.detachControl();
engine.inputElement = myNewElement;
scene.attachControl();

----------------------------------------

TITLE: Alternative Lens Pipeline Attachment in Babylon.js
DESCRIPTION: Shows how to create a lens rendering pipeline and attach it to cameras separately using the post-process rendering pipeline manager.

LANGUAGE: javascript
CODE:
var lensEffect = new BABYLON.LensRenderingPipeline('lensEffects', parameters, scene, 1.0);
// ...
scene.postProcessRenderPipelineManager.attachCamerasToRenderPipeline('lensEffects', camera);

----------------------------------------

TITLE: Creating Basic Lines with MeshBuilder in Babylon.js
DESCRIPTION: Demonstrates how to create and update lines using MeshBuilder with options for points, updatable status, and instance updating. Shows basic line creation with optional scene parameter and instance updating.

LANGUAGE: javascript
CODE:
const options = {
  points: myPoints, //vec3 array,
  updatable: true,
};

let lines = BABYLON.MeshBuilder.CreateLines("lines", options, scene); //scene is optional and defaults to the current scene

// Update
options.points[0].x += 6;
options.instance = lines;
lines = BABYLON.MeshBuilder.CreateLines("lines", options); //No scene parameter when using instance

----------------------------------------

TITLE: Setting GUITexture Visibility in BabylonJS
DESCRIPTION: Method to control the visibility of a GUITexture element with optional fade effect.

LANGUAGE: typescript
CODE:
setVisible(bool: boolean, fade: boolean): void

----------------------------------------

TITLE: Advanced Ascii Art Configuration
DESCRIPTION: Creates an Ascii Art post process with custom font, character set, and mixing parameters.

LANGUAGE: javascript
CODE:
var postProcess = new BABYLON.AsciiArtPostProcess("AsciiArt", camera, 
    {
        font: "20px Monospace",
        characterSet: " -+@",
        mixToNormal: 0.5,
        mixToTile: 0.5        
    });

----------------------------------------

TITLE: Implementing Basic Black and White Material Plugin in Babylon.js
DESCRIPTION: Creates a material plugin that converts rendered output to grayscale. Demonstrates basic plugin structure with shader code modifications for both GLSL and WGSL.

LANGUAGE: javascript
CODE:
class BlackAndWhitePluginMaterial extends BABYLON.MaterialPluginBase {
  constructor(material) {
    super(material, "BlackAndWhite", 200, { BLACKANDWHITE: false });
    this._enable(true);
  }

  prepareDefines(defines, scene, mesh) {
    defines["BLACKANDWHITE"] = true;
  }

  getClassName() {
    return "BlackAndWhitePluginMaterial";
  }

  isCompatible(shaderLanguage) {
    switch (shaderLanguage) {
        case BABYLON.ShaderLanguage.GLSL:
        case BABYLON.ShaderLanguage.WGSL:
            return true;
        default:
            return false;
    }
  }

  getCustomCode(shaderType, shaderLanguage) {
      if (shaderType === "fragment") { 
        if (shaderLanguage === BABYLON.ShaderLanguage.WGSL) {
            return {
                CUSTOM_FRAGMENT_MAIN_END: `
                            var luma = fragmentOutputs.color.r*0.299 + fragmentOutputs.color.g*0.587 + fragmentOutputs.color.b*0.114;
                            fragmentOutputs.color = vec4f(luma, luma, luma, 1.0);
                        `,
            };
        }
         
        return {
            CUSTOM_FRAGMENT_MAIN_END: `
                        float luma = gl_FragColor.r*0.299 + gl_FragColor.g*0.587 + gl_FragColor.b*0.114;
                        gl_FragColor = vec4(luma, luma, luma, 1.0);
                    `,
        };
    }
    return null;
  }
}

----------------------------------------

TITLE: Query Result Classes
DESCRIPTION: Definitions for the base casting result class and specific result properties for different query types.

LANGUAGE: javascript
CODE:
export class CastingResult {
    /**
     * The Physics body that the query hit.
     */
    public body?: PhysicsBody;
    /**
     * The body Index in case the Physics body is using instances
     */
    public bodyIndex?: number;

    /**
     * The shape hit by the query.
     */
    public shape?: PhysicsShape;
    ...
}

/**
 * Gets the distance from the hit
 */
hitDistance: number;

/**
 * Gets the hit fraction along the casting ray
 */
hitFraction: number

----------------------------------------

TITLE: Implementing Scene Controller in Babylon.js
DESCRIPTION: Basic structure of a scene controller class that serves as the main entry point for scene logic. Extends BABYLON.MeshComponent and implements lifecycle methods including ready, start, update, after, and destroy.

LANGUAGE: javascript
CODE:
    module PROJECT {
        export class NewSceneController extends BABYLON.MeshComponent {
            public constructor(owner: BABYLON.AbstractMesh, scene: BABYLON.Scene, tick: boolean = true, propertyBag: any = {}) {
                super(owner, scene, tick, propertyBag);
            }

            protected ready() :void {
                // Scene execute when ready
            }

            protected start() :void {
                // Start component function
            }

            protected update() :void {
                // Update render loop function
            }

            protected after() :void {
                // After render loop function
            }

            protected destroy() :void {
                // Destroy component function
            }
        }
    }

----------------------------------------

TITLE: Importing Animations in Babylon.js
DESCRIPTION: Demonstrates how to use SceneLoader.ImportAnimations to load animations from a file and merge them into an existing scene.

LANGUAGE: javascript
CODE:
BABYLON.SceneLoader.ImportAnimations("./", "Elf_run.gltf", scene);

----------------------------------------

TITLE: Fragment Shader Implementation for Firework Colors
DESCRIPTION: Fragment shader that controls the color and transparency of the firework particles over time. Implements color transitions and fade-out effects.

LANGUAGE: GLSL
CODE:
void main(void) {
    gl_FragColor = vec4(1. - log2(1. + time)/100., 1. * log2(1. + time), 0., 1. - log2(1. + time/2.)/log2(1. + 3.95));
}

----------------------------------------

TITLE: Adjusting Sky Horizon for Camera Position
DESCRIPTION: Example of maintaining the horizon's position relative to the camera's elevation by updating the camera offset.

LANGUAGE: javascript
CODE:
skyMaterial.cameraOffset.y = scene.activeCamera.globalPosition.y;

----------------------------------------

TITLE: Loading BabylonJS GUI Script
DESCRIPTION: CDN script tag for loading the BabylonJS GUI library. Note: Not recommended for production use.

LANGUAGE: html
CODE:
<script>https://cdn.babylonjs.com/gui/babylon.gui.min.js</script>

----------------------------------------

TITLE: Using PhysicsHelper for Complex Forces in Babylon.js
DESCRIPTION: Showcases the PhysicsHelper class in Babylon.js for creating advanced physical phenomena such as radial explosions, gravitational fields, updrafts, and vortexes. It demonstrates the syntax for each effect and how to enable/disable them.

LANGUAGE: javascript
CODE:
var physicsHelper = new BABYLON.PhysicsHelper(scene);

var origin = BABYLON.Vector3(0, 0, 0);
var radius = 10;
var strength = 20;
var falloff = BABYLON.PhysicsRadialImpulseFalloff.Linear; // or BABYLON.PhysicsRadialImpulseFalloff.Constant

var explosionEvent = physicsHelper.applyRadialExplosionImpulse( // or .applyRadialExplosionForce
    origin,
    radius,
    strength,
    falloff
);
// the second `radius` argument can also act as options: `.applyRadialExplosionImpulse(origin, { radius: radius, strength: strength, falloff: falloff })`

// or

var gravitationalFieldEvent = physicsHelper.gravitationalField(
    origin,
    radius,
    strength,
    falloff
);
// the second `radius` argument can also act as options: `.gravitationalField(origin, { radius: radius, strength: strength, falloff: falloff })`
gravitationalFieldEvent.enable(); // need to call, if you want to activate the gravitational field.
setTimeout(() => gravitationalFieldEvent.disable(), 3000);

// or

var updraftEvent = physicsHelper.updraft(
    origin,
    radius,
    strength,
    height,
    BABYLON.PhysicsUpdraftMode.Center // or BABYLON.PhysicsUpdraftMode.Perpendicular
);
// the second `radius` argument can also act as options: `.updraft(origin, { radius: radius, strength: strength, height: height, updraftMode: PhysicsUpdraftMode.Center })`
updraftEvent.enable();
setTimeout(() => updraftEvent.disable(), 5000);

// or

var vortexEvent = physicsHelper.vortex(
    origin,
    radius,
    strength,
    height
);
// the second `radius` argument can also act as options: `.vortex(origin, { radius: radius, strength: strength, height: height, centripetalForceThreshold: 0.7, centripetalForceMultiplier: 5, centrifugalForceMultiplier: 0.5, updraftForceMultiplier: 0.02 })`
vortexEvent.enable();
setTimeout(() => vortexEvent.disable(), 5000);

----------------------------------------

TITLE: Using PhysicsHelper for Complex Forces in Babylon.js
DESCRIPTION: Showcases the PhysicsHelper class in Babylon.js for creating advanced physical phenomena such as radial explosions, gravitational fields, updrafts, and vortexes. It demonstrates the syntax for each effect and how to enable/disable them.

LANGUAGE: javascript
CODE:
var physicsHelper = new BABYLON.PhysicsHelper(scene);

var origin = BABYLON.Vector3(0, 0, 0);
var radius = 10;
var strength = 20;
var falloff = BABYLON.PhysicsRadialImpulseFalloff.Linear; // or BABYLON.PhysicsRadialImpulseFalloff.Constant

var explosionEvent = physicsHelper.applyRadialExplosionImpulse( // or .applyRadialExplosionForce
    origin,
    radius,
    strength,
    falloff
);
// the second `radius` argument can also act as options: `.applyRadialExplosionImpulse(origin, { radius: radius, strength: strength, falloff: falloff })`

// or

var gravitationalFieldEvent = physicsHelper.gravitationalField(
    origin,
    radius,
    strength,
    falloff
);
// the second `radius` argument can also act as options: `.gravitationalField(origin, { radius: radius, strength: strength, falloff: falloff })`
gravitationalFieldEvent.enable(); // need to call, if you want to activate the gravitational field.
setTimeout(() => gravitationalFieldEvent.disable(), 3000);

// or

var updraftEvent = physicsHelper.updraft(
    origin,
    radius,
    strength,
    height,
    BABYLON.PhysicsUpdraftMode.Center // or BABYLON.PhysicsUpdraftMode.Perpendicular
);
// the second `radius` argument can also act as options: `.updraft(origin, { radius: radius, strength: strength, height: height, updraftMode: PhysicsUpdraftMode.Center })`
updraftEvent.enable();
setTimeout(() => updraftEvent.disable(), 5000);

// or

var vortexEvent = physicsHelper.vortex(
    origin,
    radius,
    strength,
    height
);
// the second `radius` argument can also act as options: `.vortex(origin, { radius: radius, strength: strength, height: height, centripetalForceThreshold: 0.7, centripetalForceMultiplier: 5, centrifugalForceMultiplier: 0.5, updraftForceMultiplier: 0.02 })`
vortexEvent.enable();
setTimeout(() => vortexEvent.disable(), 5000);

----------------------------------------

TITLE: Initializing Basic Fresnel Parameters in Babylon.js
DESCRIPTION: Creates basic Fresnel parameters for reflection effects in a material. This allows for controlling reflection intensity based on viewing angle.

LANGUAGE: javascript
CODE:
material.reflectionFresnelParameters = new BABYLON.FresnelParameters();

----------------------------------------

TITLE: Full Example of a Babylon.js Editor Script with Exposed Property
DESCRIPTION: This snippet provides a complete example of a Babylon.js Editor script that uses the @visibleInInspector decorator to expose a 'Speed' property and applies rotation to a mesh based on this property.

LANGUAGE: typescript
CODE:
import { Mesh } from "@babylonjs/core/Meshes/mesh";

import { visibleInInspector } from "../decorators";

export default class MyMeshComponent extends Mesh {
    @visibleInInspector("number", "Speed", 0.04, { min: 0, max: 1, step: 0.01 })
    private _speed: number = 1;

    /**
     * Called each frame.
     */
    public onUpdate(): void {
        this.rotation.y += 0.04 * this._speed;
    }
}

----------------------------------------

TITLE: Implementing Camera Components in Babylon.js
DESCRIPTION: Basic structure for camera components used specifically with camera game objects.

LANGUAGE: javascript
CODE:
    module PROJECT {
        export class NewCameraComponent extends BABYLON.CameraComponent {

            protected start() :void {
                console.log("Starting camera component for owner: " + this.camera.name);
            }
        }
    }

----------------------------------------

TITLE: HammerJS Touch Input Implementation
DESCRIPTION: Example of implementing touch controls using HammerJS library for ArcRotateCamera.

LANGUAGE: javascript
CODE:
// remove mouse input
camera.inputs.removeByType("ArcRotateCameraPointersInput");

// add hammer js input
const hammerJsInput = new ArcRotateCameraHammerJsInput();
// now you can set the parameters you like
// let's double the zoomSensitivity (default is 1)
hammerJsInput.zoomSensitivity = 2;
// add the input to the camera
camera.inputs.add(hammerJsInput);

----------------------------------------

TITLE: Creating Sphere and Triangle Path in BabylonJS
DESCRIPTION: Creates a sphere and defines a triangle path using line sequences with Vector3 points.

LANGUAGE: javascript
CODE:
const sphere = BABYLON.MeshBuilder.CreateSphere("sphere", {diameter: 0.25});

//end points for the line sequence in an array
//y component can be non zero
const points = [];
points.push(new BABYLON.Vector3(2, 0, 2));
points.push(new BABYLON.Vector3(2, 0, -2));
points.push(new BABYLON.Vector3(-2, 0, -2));
points.push(points[0]); //close the triangle;

BABYLON.MeshBuilder.CreateLines("triangle", {points: points})

----------------------------------------

TITLE: Dashed GreasedLine
DESCRIPTION: Create a dashed GreasedLine with custom dash settings

LANGUAGE: javascript
CODE:
const points = [-1, 0, 0, 1, 0, 0];
const line = BABYLON.CreateGreasedLine("line", { points }, { useDash: true, dashCount: 4, dashRatio: 0.5 });

----------------------------------------

TITLE: Creating a GUIPanel in BabylonJS
DESCRIPTION: Constructor for creating a new GUIPanel. It takes an id, options object, GUI manager, and an optional callback function as parameters.

LANGUAGE: javascript
CODE:
new GUIPanel(id, options, guimanager, append)

----------------------------------------

TITLE: Defining Standard Materials in Babylon.js
DESCRIPTION: This snippet demonstrates how to create three different standard materials with various properties such as diffuse color, bump texture, and emissive color.

LANGUAGE: javascript
CODE:
const material0 = new BABYLON.StandardMaterial("mat0", scene);
material0.diffuseColor = new BABYLON.Color3(1, 0, 0);
material0.bumpTexture = new BABYLON.Texture("normalMap.jpg", scene);

const material1 = new BABYLON.StandardMaterial("mat1", scene);
material1.diffuseColor = new BABYLON.Color3(0, 0, 1);

const material2 = new BABYLON.StandardMaterial("mat2", scene);
material2.emissiveColor = new BABYLON.Color3(0.4, 0, 0.4);

----------------------------------------

TITLE: Creating a 6 Degrees of Freedom Constraint in Babylon.js
DESCRIPTION: This example demonstrates how to create a 6 Degrees of Freedom constraint in Babylon.js. It sets up pivot points, perpendicular axes, and applies linear distance and angular rotation limits to the constraint.

LANGUAGE: javascript
CODE:
let constraint = new BABYLON.Physics6DoFConstraint({
    pivotA: new BABYLON.Vector3(0, -0.5, 0),
    pivotB: new BABYLON.Vector3(0, 0.5, 0),
    perpAxisA: new BABYLON.Vector3(1, 0, 0),
    perpAxisB: new BABYLON.Vector3(1, 0, 0),
}, [
    {axis: BABYLON.PhysicsConstraintAxis.LINEAR_DISTANCE, minLimit: 1, maxLimit: 2},
    {axis: BABYLON.PhysicsConstraintAxis.ANGULAR_Y, minLimit: 0, maxLimit: 1.58}
], scene);

----------------------------------------

TITLE: Point Proximity Query Interface
DESCRIPTION: Interface definition for querying the closest shape within a specified maximum distance from a point.

LANGUAGE: javascript
CODE:
export interface IPhysicsPointProximityQuery {
/**
* The position of the query
*/
position: Vector3;
/**
* Maximum distance to check for collisions. Can be set to 0 to check for overlaps.
*/
maxDistance: number;
/**
* Collision filter for the query.
*/
collisionFilter: IRaycastQuery;
}

----------------------------------------

TITLE: Resetting Skeleton to Rest Pose in Babylon.js
DESCRIPTION: Resets a skeleton to its rest pose, which is necessary when creating a skeleton programmatically.

LANGUAGE: javascript
CODE:
skeleton.returnToRest();

----------------------------------------

TITLE: Vue Component Implementation with Async Scene Method
DESCRIPTION: Vue component that integrates with BabylonJS scene and implements an async method to trigger mesh visibility animation. Includes a button to trigger the animation and canvas setup.

LANGUAGE: jsx
CODE:
<template>
  <div>
    <button @click="hide">Hide the cube</button>
    <br />
    <canvas ref="bjsCanvas" width="500" height="500" />
  </div>
</template>

<script>
import myScene from "../scenes/MyFirstScene";

export default {
  name: "BabylonScene",
  methods: {
    async hide() {
      await myScene.animateMeshVisibility("box", 1, 0, 0.3);
      alert("Done");
    },
  },
  mounted() {
    const bjsCanvas = this.$refs.bjsCanvas;
    if (bjsCanvas) {
      myScene.createScene(bjsCanvas);
    }
  },
};
</script>

----------------------------------------

TITLE: Using Projection Textures with Spot Lights in Babylon.js
DESCRIPTION: Shows how to use projection textures with spot lights in Babylon.js to simulate effects like stained glass or projector lights.

LANGUAGE: javascript
CODE:
const spotLight = new BABYLON.SpotLight("spot02", new BABYLON.Vector3(30, 40, 30), new BABYLON.Vector3(-1, -2, -1), 1.1, 16, scene);
spotLight.projectionTexture = new BABYLON.Texture("textures/stainedGlass.png", scene);

----------------------------------------

TITLE: Demonstrating Effect of Particle Spacing on Collision Speed in BabylonJS
DESCRIPTION: This code explores how the spacing between particles affects the speed increase phenomenon during collisions.

LANGUAGE: javascript
CODE:
// Code not provided in the original text, but referenced as Playground id=#1DJ7RH#2

----------------------------------------

TITLE: Configuring Rayleigh and Mie Scattering in Sky Material
DESCRIPTION: Configuration of atmospheric scattering parameters including Rayleigh scattering and Mie scattering properties.

LANGUAGE: javascript
CODE:
skyMaterial.rayleigh = 2; // Represents the sky appearance (globally)
skyMaterial.mieDirectionalG = 0.8;
skyMaterial.mieCoefficient = 0.005; // The mieCoefficient in interval [0, 0.1]

----------------------------------------

TITLE: Setting FollowCamera Parameters in Babylon.js
DESCRIPTION: Configure the FollowCamera's height offset, radius, rotation offset, acceleration, and max speed.

LANGUAGE: javascript
CODE:
camera.heightOffset = 8;
camera.radius = 1;
camera.rotationOffset = 0;
camera.cameraAcceleration = 0.005
camera.maxCameraSpeed = 10

----------------------------------------

TITLE: Adding Particles to an Expandable Solid Particle System in Babylon.js
DESCRIPTION: Shows how to add new particles to an existing expandable Solid Particle System and rebuild the mesh.

LANGUAGE: javascript
CODE:
var sps = new BABYLON.SolidParticleSystem("sps", scene, { expandable: true });
sps.addShape(model1, 100); // adds 100 particles from model1
sps.buildMesh();

// ... further in the code, when needed
sps.addShape(model2, 100); // adds 100 new particles from model2
sps.addShape(model3, 200); // and 200 particles from model3
sps.buildMesh(); // updates the SPS mesh geometry from the last particle additions
sps.setParticles();

----------------------------------------

TITLE: Creating Double-Sided Plane with Different Textures in BabylonJS
DESCRIPTION: Creates a plane mesh with different textures for front and back sides using the MeshBuilder. The mesh is set to DOUBLESIDE orientation and uses previously defined UV vectors.

LANGUAGE: javascript
CODE:
const plane = BABYLON.MeshBuilder.CreatePlane("plane", { height: 1, width: 0.665, sideOrientation: BABYLON.Mesh.DOUBLESIDE, frontUVs: f, backUVs: b }, scene);

----------------------------------------

TITLE: Accessing Animation Groups in Babylon.JS Editor
DESCRIPTION: Demonstrates how to use the @fromAnimationGroups decorator to retrieve references to animation groups in a Babylon.JS project.

LANGUAGE: typescript
CODE:
import { Mesh } from "@babylonjs/core/Meshes/mesh";
import { AnimationGroup } from "@babylonjs/core/Animations/animationGroup";

import { fromAnimationGroups } from "../decorators";

export default class MyMeshComponent extends Mesh {
    @fromAnimationGroups("walk")
    private _walk: AnimationGroup;

    public onStart(): void {
        this._walk.play(true);
    }
}

----------------------------------------

TITLE: Managing Pause Menu in BabylonJS
DESCRIPTION: Handles pause menu visibility and game state, including timer management and UI control updates.

LANGUAGE: javascript
CODE:
pauseBtn.onPointerDownObservable.add(() => {
    this._pauseMenu.isVisible = true;
    playerUI.addControl(this._pauseMenu);
    this.pauseBtn.isHitTestVisible = false;
    this.gamePaused = true;
    this._prevTime = this.time;
});

----------------------------------------

TITLE: Handling Animation End Events in BabylonJS
DESCRIPTION: Demonstrates how to use the onAnimationEndObservable to trigger a function when all animations in an AnimationGroup finish playing.

LANGUAGE: javascript
CODE:
animationGroup1.onAnimationEndObservable.add(function () {
  mesh2.material = redMaterial;
});

----------------------------------------

TITLE: Creating Heightmap from Square Ribbon in Babylon.js
DESCRIPTION: This code creates a heightmap from a square ribbon using an exponential path function. It demonstrates how to generate a complex terrain and apply a HeightmapImpostor to it.

LANGUAGE: javascript
CODE:
var exponentialPath = function (p) {
    var path = [];
    for (let i = -50; i <= 50; i++) {
        path.push(new BABYLON.Vector3(p-50, (Math.sin(p / 3) * 10 * Math.exp((i - p) / 100) + i / 3), i));
    }
    return path;
};
// let's populate arrayOfPaths with all these different paths
var arrayOfPaths = [];
for (let p = 0; p <= 100; p++) {
    arrayOfPaths[p] = exponentialPath(p);

}

var mesh = BABYLON.Mesh.CreateRibbon("ribbon", arrayOfPaths, false, false, 0, scene);
mesh.physicsImpostor = new BABYLON.PhysicsImpostor(mesh, BABYLON.PhysicsImpostor.HeightmapImpostor, { mass: 0, friction:1, restitution: 0.5 });

----------------------------------------

TITLE: Transforming MatrixCloner Root in BabylonJS
DESCRIPTION: Demonstrates how to transform all clones simultaneously by modifying the root object's properties. Shows scaling and rotation operations.

LANGUAGE: javascript
CODE:
mc.root.scaling.y = 2;
mc.root.rotation.x = Math.PI / 4;

----------------------------------------

TITLE: Mesh Rotation in BabylonJS
DESCRIPTION: Shows how to rotate a mesh around a specified axis by a given angle in local space.

LANGUAGE: javascript
CODE:
mesh.rotate(axis, angle, BABYLON.Space.LOCAL);

----------------------------------------

TITLE: Advanced MeshWriter Configuration with NPM
DESCRIPTION: Shows comprehensive MeshWriter setup using NPM installation, including font family, letter properties, and material colors configuration.

LANGUAGE: javascript
CODE:
let Writer = MeshWriter(this.scene, { scale: 0.25, defaultFont: "Arial" });
let textMesh = new Writer("Hello World", {
  "font-family": "Arial",
  "letter-height": 30,
  "letter-thickness": 12,
  color: "#1C3870",
  anchor: "center",
  colors: {
    diffuse: "#F0F0F0",
    specular: "#000000",
    ambient: "#F0F0F0",
    emissive: "#ff00f0"
  },
  position: {
    x: 0,
    y: 10,
    z: 0
  }
});

----------------------------------------

TITLE: Enabling Gizmos in GizmoManager for Babylon.js
DESCRIPTION: Demonstrates how to enable different types of gizmos (position, rotation, scale, bounding box) using the GizmoManager.

LANGUAGE: javascript
CODE:
gizmoManager.positionGizmoEnabled = true;
gizmoManager.rotationGizmoEnabled = true;
gizmoManager.scaleGizmoEnabled = true;
gizmoManager.boundingBoxGizmoEnabled = true;

----------------------------------------

TITLE: Creating Smart Filter with Pixelate Effect in JavaScript
DESCRIPTION: Demonstrates how to programmatically create a Smart Filter with a pixelate effect in Babylon.js. The code shows setting up input blocks for texture and intensity, and connecting them to a pixelate block.

LANGUAGE: javascript
CODE:
const smartFilter = new SmartFilter("Default");

const pixelateBlock = new PixelateBlock(smartFilter, "Pixelate");

const textureInputBlock = new InputBlock(smartFilter, "Texture", ConnectionPointType.Texture, null);
textureInputBlock.editorData = {
  url: "/assets/logo.png",
  urlTypeHint: "image",
  flipY: true,
  anisotropicFilteringLevel: null,
  forcedExtension: null,
};

const intensityInputBlock = new InputBlock(smartFilter, "Intensity", ConnectionPointType.Float, 0.5);
intensityInputBlock.editorData = {
  animationType: null,
  valueDeltaPerMs: null,
  min: 0.0,
  max: 1.0,
};

textureInputBlock.output.connectTo(pixelateBlock.input);
intensityInputBlock.output.connectTo(pixelateBlock.intensity);
pixelateBlock.output.connectTo(smartFilter.output);

----------------------------------------

TITLE: Creating Skull as Compound Body in Babylon.js
DESCRIPTION: This code snippet demonstrates how to create a skull as a compound body in Babylon.js. It uses an empty mesh as a parent for the compound body, creates standard meshes to fit over the irregular skull mesh, and sets up physics imposters with appropriate mass distribution.

LANGUAGE: javascript
CODE:
// Code not provided in the original text, but referenced in Playground link:
// https://playground.babylonjs.com/#UKNERM#0

----------------------------------------

TITLE: Creating BabylonScene Component in Vue 2
DESCRIPTION: Vue 2 component that sets up a canvas for BabylonJS and initializes the scene on mount.

LANGUAGE: jsx
CODE:
<template>
  <div>
    <canvas ref="bjsCanvas" width="500" height="500" />
  </div>
</template>

<script>
import { createScene } from "../scenes/MyFirstScene";

export default {
  name: "BabylonScene",

  mounted() {
    const bjsCanvas = this.$refs.bjsCanvas;
    if (bjsCanvas) {
      createScene(bjsCanvas);
    }
  },
};
</script>

----------------------------------------

TITLE: Depth Metric Generation in GLSL
DESCRIPTION: Shader code for computing normalized depth values between 0 and 1 for shadow mapping, handling reverse depth buffer cases.

LANGUAGE: c
CODE:
#if SM_USE_REVERSE_DEPTHBUFFER == 1
    vDepthMetricSM = (-gl_Position.z + depthValuesSM.x) / depthValuesSM.y + biasAndScaleSM.x;
#else
    vDepthMetricSM = (gl_Position.z + depthValuesSM.x) / depthValuesSM.y + biasAndScaleSM.x;
#endif

----------------------------------------

TITLE: Implementing Path Following Animation in BabylonJS
DESCRIPTION: Creates an animation system that makes the car follow a curved path while maintaining proper orientation and wheel rotation.

LANGUAGE: javascript
CODE:
var i = 0;
scene.registerAfterRender(function () {
    carBody.position.x = points[i].x;
    carBody.position.z = points[i].z;
    wheelFI.rotate(normals[i], Math.PI / 32, BABYLON.Space.WORLD);
    wheelFO.rotate(normals[i], Math.PI / 32, BABYLON.Space.WORLD);
    wheelRI.rotate(normals[i], Math.PI / 32, BABYLON.Space.WORLD);
    wheelRO.rotate(normals[i], Math.PI / 32, BABYLON.Space.WORLD);

    theta = Math.acos(BABYLON.Vector3.Dot(normals[i], normals[i + 1]));
    var dir = BABYLON.Vector3.Cross(normals[i], normals[i + 1]).y;
    var dir = dir / Math.abs(dir);
    carBody.rotate(BABYLON.Axis.Y, dir * theta, BABYLON.Space.WORLD);

    i = (i + 1) % (n - 1);
});

----------------------------------------

TITLE: Loading GUI as Texture for Mesh in Babylon.js
DESCRIPTION: Demonstrates how to load a GUI created in the GUI Editor as a texture and apply it to a mesh in a Babylon.js scene.

LANGUAGE: javascript
CODE:
let screenUI = BABYLON.GUI.AdvancedDynamicTexture.CreateForMeshTexture(device.screen, 2048, 2048, true, false);
screenUI.parseFromSnippetAsync("#WFL50L");

----------------------------------------

TITLE: Creating Sectioned Roof in Babylon.js
DESCRIPTION: This snippet demonstrates how to create a roof with different sections and heights. It defines separate roofprints, apexes, and planes for the main and small roof sections, then creates the roof meshes accordingly.

LANGUAGE: javascript
CODE:
var wholeRoofprint = roofprint(corners, overlap, height);
var mainRoofprint = roofprint(mainCorners, overlap, height);
var smallRoofprint = roofprint(smallCorners, overlap, height);

var ceiling = roofFloor(wholeRoofprint);

// ... (apex and plane definitions)

var roofSection = roof(mainRoofprint, apexes, planes, 2, height, 5.1);
var smallRoofSection = roof(smallRoofprint, smallApexes, smallPlanes, 2, height - 1, 5.1);

----------------------------------------

TITLE: Creating Faster Rotation Animation in Babylon.js
DESCRIPTION: This snippet modifies the rotation animation to create a faster rotation rate by increasing the rotation values in the key frames.

LANGUAGE: javascript
CODE:
const yRot = new BABYLON.Animation("yRot", "rotation.y", frameRate, BABYLON.Animation.ANIMATIONTYPE_FLOAT, BABYLON.Animation.ANIMATIONLOOPMODE_CYCLE);

const keyFramesR = [];

keyFramesR.push({
  frame: 0,
  value: 0,
});

keyFramesR.push({
  frame: frameRate,
  value: 4 * Math.PI,
});

keyFramesR.push({
  frame: 2 * frameRate,
  value: 8 * Math.PI,
});

yRot.setKeys(keyFramesR);

----------------------------------------

TITLE: Creating UV Vectors for Front and Back Textures in BabylonJS
DESCRIPTION: Defines Vector4 coordinates to split an image into front and back textures. The vectors specify UV coordinates where u0,v0 represent bottom-left and u1,v1 represent top-right of the texture region.

LANGUAGE: javascript
CODE:
const f = new BABYLON.Vector4(0.5, 0, 1, 1); // front image = half the whole image along the width
const b = new BABYLON.Vector4(0, 0, 0.5, 1); // back image = second half along the width

----------------------------------------

TITLE: Styling Babylon.js Canvas for Full-page Display
DESCRIPTION: CSS styling to make the Babylon.js canvas full-page width and height with fixed positioning for background display.

LANGUAGE: CSS
CODE:
.babylonExperience {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
}

----------------------------------------

TITLE: Cloning and Setting Up Azure Media Player 360 Plugin
DESCRIPTION: Commands for cloning the Babylon.js extensions repository and starting the local development server

LANGUAGE: bash
CODE:
git clone https://github.com/BabylonJS/Extensions.git
npm install
npm start

----------------------------------------

TITLE: Implementing Mesh Components in Babylon.js
DESCRIPTION: Basic structure for mesh components used with non-light and non-camera game objects.

LANGUAGE: javascript
CODE:
    module PROJECT {
        export class NewMeshComponent extends BABYLON.MeshComponent {

            protected start() :void {
                console.log("Starting mesh component for owner: " + this.mesh.name);
            }
        }
    }

----------------------------------------

TITLE: Managing Context Variables
DESCRIPTION: Shows how to set and get variables in an execution context.

LANGUAGE: javascript
CODE:
context.setVariable("myVar", 42);
const myVar = context.getVariable("myVar");

----------------------------------------

TITLE: Creating an ObjectCloner in BabylonJS
DESCRIPTION: This snippet demonstrates how to create an ObjectCloner with two input meshes (cube1 and cube2) and a template mesh (icoSphere). The ObjectCloner will distribute clones of the input meshes based on the facet positions of the template mesh.

LANGUAGE: JavaScript
CODE:
const oc = new BABYLONX.ObjectCloner([cube1, cube2], icoSphere, demo.scene);

----------------------------------------

TITLE: Extruding Car Body Shape in BabylonJS
DESCRIPTION: Creates the car body mesh by extruding the defined outline along the Y axis using MeshBuilder.ExtrudePolygon method.

LANGUAGE: javascript
CODE:
const car = BABYLON.MeshBuilder.ExtrudePolygon("car", {shape: outline, depth: 0.2});

----------------------------------------

TITLE: Specifying Attachable Meshes for GizmoManager in Babylon.js
DESCRIPTION: Sets the meshes that can have gizmos attached to them using the GizmoManager's attachableMeshes property.

LANGUAGE: javascript
CODE:
gizmoManager.attachableMeshes = [mesh1, mesh2, mesh3];

----------------------------------------

TITLE: Initializing Dynamic Terrain in BabylonJS
DESCRIPTION: Creates a dynamic terrain instance using the generated map data. Configures terrain parameters including map dimensions and subdivision count.

LANGUAGE: javascript
CODE:
const terrainSub = 50;
const params = {
  mapData: mapData,
  mapSubX: mapSubX,
  mapSubZ: mapSubZ,
  terrainSub: terrainSub,
};
terrain = new BABYLON.DynamicTerrain("terrain", params, scene);

----------------------------------------

TITLE: Default Viewer Configuration - JavaScript
DESCRIPTION: The default JSON configuration for the Babylon.js viewer, including template settings, camera behaviors, and engine configurations.

LANGUAGE: javascript
CODE:
{
    templates: {
        main: {
            html: defaultTemplate,
            params: {
                babylonFont: babylonFont,
                noEscape: true
            }
        },
        fillContainer: {
            html: fillContainer,
            params: {
                disable: false
            }
        },
        loadingScreen: {
            html: loadingScreen,
            params: {
                backgroundColor: "#000000",
                loadingImage: images.loading
            }
        },
        viewer: {
            html: defaultViewer,
            params: {
                enableDragAndDrop: false
            }
        },
        navBar: {
            html: navbar,
            params: {
                speedList: {
                    "0.5x": "0.5",
                    "1.0x": "1.0",
                    "1.5x": "1.5",
                    "2.0x": "2.0",
                },
                logoImage: images.babylonLogo,
                logoText: 'BabylonJS',
                logoLink: 'https://babylonjs.com',
                hideHelp: true,
                hideHd: true,
                hideVr: true,
                disableOnFullscreen: false,
                text: {
                    hdButton: "Toggle HD",
                    fullscreenButton: "Fullscreen",
                    helpButton: "Help",
                    vrButton: "Toggle VR"
                }
            },
            events: {
                pointerdown: {
                    '.navbar-control': true,
                    '.help-button': true
                },
                input: {
                    '.progress-wrapper': true
                },
                pointerup: {
                    '.progress-wrapper': true
                }
            }
        }
    },
    camera: {
        behaviors: {
            autoRotate: {
                type: 0
            },
            framing: {
                type: 2,
                zoomOnBoundingInfo: true,
                zoomStopsAnimation: false
            },
            bouncing: {
                type: 1
            }
        }
    },
    skybox: {},
    ground: {
        receiveShadows: true
    },
    engine: {
        antialiasing: true
    }
}

----------------------------------------

TITLE: Customizing Font in Digital Rain Post Process
DESCRIPTION: This snippet shows how to change the font used in the Digital Rain Post Process. The font is specified using CSS font syntax.

LANGUAGE: javascript
CODE:
var postProcess = new BABYLON.DigitalRainPostProcess("DigitalRain", camera, "3px Monospace");

----------------------------------------

TITLE: Observing WebXR State Changes in JavaScript
DESCRIPTION: This snippet demonstrates how to use the state observable of the WebXR helper to track changes in the XR session state.

LANGUAGE: javascript
CODE:
xrHelper.onStateChangedObservable.add((state) => {
    switch (state) {
        case WebXRState.IN_XR:
            // XR is initialized and already submitted one frame
        case WebXRState.ENTERING_XR:
            // xr is being initialized, enter XR request was made
        case WebXRState.EXITING_XR:
            // xr exit request was made. not yet done.
        case WebXRState.NOT_IN_XR:
            // self explanatory - either out or not yet in XR
    }
})

----------------------------------------

TITLE: Complex Rotation Sequence
DESCRIPTION: Demonstrates a complex sequence of rotations combining local and world space transformations using different axes.

LANGUAGE: javascript
CODE:
mesh.rotate(new BABYLON.Vector3(2, -3, 7), Math.PI / 3, BABYLON.Space.LOCAL);  
mesh.rotate(BABYLON.Axis.Y, -Math.PI / 2, BABYLON.Space.WORLD);
mesh.rotate(new BABYLON.Vector3(5.6, 7.8, - 3.4), 1.5 * Math.PI, BABYLON.Space.WORLD);
mesh.rotate(BABYLON.Axis.Z, -Math.PI, BABYLON.Space.LOCAL);

----------------------------------------

TITLE: Initializing Facebook Instant Game
DESCRIPTION: Implementation of Facebook Instant Game initialization process, including fetching platform-specific properties and creating the game instance.

LANGUAGE: javascript
CODE:
FBInstant.initializeAsync()
  .then(() => {
    // Many properties will be null until the initialization completes.
    // This is a good place to fetch them:
    let locale = FBInstant.getLocale(); // 'en_US' 'fr_FR'...
    let platform = FBInstant.getPlatform(); // 'IOS', 'ANDROID' or 'WEB'
    let sdkVersion = FBInstant.getSDKVersion(); // '3.0'
    let playerID = FBInstant.player.getID();

    console.log(locale, platform, sdkVersion, playerID);

    // The game is created here
    new Game("gameCanvas");
  })
  .catch((e) => {
    console.log(e);
  });

----------------------------------------

TITLE: Implementing GPU Picking in Babylon.js
DESCRIPTION: Demonstrates how to use GPU picking for improved performance with complex objects. This method renders the scene to a texture and uses unique colors for each mesh to determine the picked object.

LANGUAGE: JavaScript
CODE:
var picker = new BABYLON.GPUPicker();
picker.setPickingList(myMeshes);

scene.onPointerObservable.add(() => {
  if (picker.pickingInProgress) {
    return;
  }
  picker.pickAsync(scene.pointerX, scene.pointerY, scene, false).then((pickingInfo) => {
    if (pickingInfo) {
      console.log(pickingInfo.mesh.name);
    }
  });
});

----------------------------------------

TITLE: Synchronizing Interactive Physics Objects in BabylonJS
DESCRIPTION: Updates the position and rotation of interactive physics objects based on server data.

LANGUAGE: javascript
CODE:
let isUpdateBox=false;

room.onMessage("boxUpdate", (message) => {
  if(message.targetId==null||message.targetId==sessionId){
    isUpdateBox=true
    box.material.diffuseColor. = new BABYLON.Color3(1, 0, 0);
  }else{
    isUpdateBox=false
    box.material.diffuseColor = new BABYLON.Color3(0, 1, 0);
    box.position= BABYLON.Vector3.Lerp(
      box.position,
      new BABYLON.Vector3(
        message.position.x,
        message.position.y,
        message.position.z
      ),
      0.5)
    box.rotationQuaternion=BABYLON.Quaternion.Slerp(
      box.rotationQuaternion,
      new BABYLON.Quaternion(
        message.quaternion.x,
        message.quaternion.y,
        message.quaternion.z,
        message.quaternion.w
      ),
      0.4)
  }
});

engine.runRenderLoop(function() {
  if(room&&playerViews[sessionId]){
    // ...
    if(isUpdateBox){
      room.send('boxUpdate', {
        targetId:sessionId,
        position:{
          x: box.position.x,
          y: box.position.y,
          z:box.position.z
        },
        quaternion:{
          x:box.rotationQuaternion.x,
          y:box.rotationQuaternion.y,
          z:box.rotationQuaternion.z,
          w:box.rotationQuaternion.w
        }
      });
    }
  }
});

----------------------------------------

TITLE: Loading Embedded Assets in Babylon.js
DESCRIPTION: This snippet shows how to load embedded assets by creating a Blob from a JSON string and using URL.createObjectURL. It then uses SceneLoader.Append to load the asset into the scene.

LANGUAGE: javascript
CODE:
var mymodel = {
    [...]
};

var json = JSON.stringify(mymodel);
var blob = new Blob([json]);
var url = URL.createObjectURL(blob);

BABYLON.SceneLoader.Append(url, "", scene, function(scene) {
    scene.createDefaultCameraOrLight(true, true, true),
    scene.createDefaultEnvironment();
}, null, null, ".gltf");

----------------------------------------

TITLE: Implementing Shader Builder for Vertical Wave in JavaScript
DESCRIPTION: Uses the Shader Builder approach to create the vertical wave effect, providing an alternative to the custom shader material method.

LANGUAGE: JavaScript
CODE:
BABYLONX.ShaderBuilder.InitializeEngine();
		
var shaderMaterial =   new BABYLONX.ShaderBuilder()             
	.Solid({ b: 1 })
	.SetUniform('box_spacing', 'float')
    .Map({path:'amiga.jpg'  }) 
	.VertexShader(
        ' float bn = pos.x/box_spacing;\
          result = vec4( pos.x, pos.y + sin(time + bn/4.0), pos.z  ,1.);')
	.BuildMaterial(scene);

----------------------------------------

TITLE: Placing Meshes on Goldberg Polyhedron Faces
DESCRIPTION: Example of placing a box mesh on a specific face with position relative to face center and axes.

LANGUAGE: javascript
CODE:
const height = 2;
const width = 0.1;
const depth = 0.08;
const box = BABYLON.MeshBuilder.CreateBox("box", { width: width, depth: depth, height: height });
const position = new BABYLON.Vector3(0.53, height / 2, 0.34);
goldbergPoly.placeOnGoldbergFaceAt(box, 32, position);

----------------------------------------

TITLE: Drawing Curves on Dynamic Texture Canvas in Babylon.js
DESCRIPTION: Demonstrates drawing a quadratic curve on the canvas of a dynamic texture using the HTML5 Canvas API. The texture is updated after drawing.

LANGUAGE: javascript
CODE:
const ctx = myDynamicTexture.getContext();

ctx.beginPath();
ctx.moveTo(75, 25);
ctx.quadraticCurveTo(25, 25, 25, 62.5);
ctx.quadraticCurveTo(25, 100, 50, 100);
ctx.quadraticCurveTo(50, 120, 30, 125);
ctx.quadraticCurveTo(60, 120, 65, 100);
ctx.quadraticCurveTo(125, 100, 125, 62.5);
ctx.quadraticCurveTo(125, 25, 75, 25);
ctx.stroke();

myDynamicTexture.update();

----------------------------------------

TITLE: Batch Processing Compressed Textures with DOS Scripts
DESCRIPTION: These DOS commands demonstrate how to use the provided batch scripts to generate compressed textures in various formats. The scripts require PVRTexToolCLI.exe to be in the system path.

LANGUAGE: dos
CODE:
cd my-directory-with-images
make-ktx-batch Q
ktx-batch

----------------------------------------

TITLE: Adding Ramp Gradients in Babylon.js Particle System
DESCRIPTION: Demonstrates how to create a color gradient for particles using the addRampGradient method. This allows for complex color transitions over the lifetime of particles.

LANGUAGE: javascript
CODE:
particleSystem.addRampGradient(0.0, new BABYLON.Color3(1, 1, 1));
particleSystem.addRampGradient(0.09, new BABYLON.Color3(209/255, 204/255, 15/255));
particleSystem.addRampGradient(0.18, new BABYLON.Color3(221/255, 120/255, 14/255));
particleSystem.addRampGradient(0.28, new BABYLON.Color3(200/255, 43/255, 18/255));
particleSystem.addRampGradient(0.47, new BABYLON.Color3(115/255, 22/255, 15/255));
particleSystem.addRampGradient(0.88, new BABYLON.Color3(14/255, 14/255, 14/255));
particleSystem.addRampGradient(1.0, new BABYLON.Color3(14/255, 14/255, 14/255));

particleSystem.useRampGradients = true;

----------------------------------------

TITLE: Custom YAML Configuration Mapper Implementation
DESCRIPTION: Shows how to implement and register a custom configuration mapper for YAML format support.

LANGUAGE: typescript
CODE:
class YAMLMapper implements IMapper {
  map(yaml: YAMLThing): ViewerConfiguration {
    return this.convertToYaml(yaml);
  }

  // so, this needs to be actually implemented...
  convertYamlToJson(yaml) {}
}

----------------------------------------

TITLE: Configuring Equal Dash and Gap Sizes
DESCRIPTION: Demonstrates different ways to configure equal sized dashes and gaps using the dashSize and gapSize parameters.

LANGUAGE: javascript
CODE:
dashSize = 1;
gapSize = 1;

dashSize = 1000;
gapSize = 1000;

dashSize = 876;
gapSize = dashSize;

----------------------------------------

TITLE: Creating and Cloning Wheels in BabylonJS
DESCRIPTION: Creates cylinder wheels and positions them on the car using cloning. Sets up parent-child relationships and positions for all four wheels.

LANGUAGE: javascript
CODE:
const wheelRB = BABYLON.MeshBuilder.CreateCylinder("wheelRB", {diameter: 0.125, height: 0.05})
wheelRB.parent = car;
wheelRB.position.z = -0.1;
wheelRB.position.x = -0.2;
wheelRB.position.y = 0.035;

const wheelRF = wheelRB.clone("wheelRF");
wheelRF.position.x = 0.1;

const wheelLB = wheelRB.clone("wheelLB");
wheelLB.position.y = -0.2 - 0.035;

const wheelLF = wheelRF.clone("wheelLF");
wheelLF.position.y = -0.2 - 0.035;

----------------------------------------

TITLE: Registering Decal Map Plugin in ES6 with Tree Shaking
DESCRIPTION: Shows how to globally enable decal map plugin injection for all materials when using ES6 with tree shaking in Babylon.js.

LANGUAGE: javascript
CODE:
BABYLON.RegisterMaterialPlugin("DecalMap", (material) => {
    material.decalMap = new BABYLON.DecalMapConfiguration(material);
    material.decalMap.isEnabled = true;
    return material.decalMap;
});

----------------------------------------

TITLE: Modifying Scene Creation Function for TypeScript
DESCRIPTION: Example of how to modify the scene creation function to use TypeScript.

LANGUAGE: typescript
CODE:
const createScene = (canvas: Scene) => {

----------------------------------------

TITLE: Creating Basic Tiled Plane with MeshBuilder
DESCRIPTION: Basic syntax for creating a tiled plane using BABYLON.MeshBuilder with optional scene parameter.

LANGUAGE: javascript
CODE:
const tiledPlane = BABYLON.MeshBuilder.CreateTiledPlane("plane", options, scene);

----------------------------------------

TITLE: Setting Custom Recording Duration in Babylon.js
DESCRIPTION: This snippet shows how to set a custom recording duration when starting a video recording of a Babylon.js scene.

LANGUAGE: javascript
CODE:
if (BABYLON.VideoRecorder.IsSupported(engine)) {
    var recorder = new BABYLON.VideoRecorder(engine);
    recorder.startRecording("test.webm", 2);
}

----------------------------------------

TITLE: Configuring Sky Material Properties in Babylon.js
DESCRIPTION: Examples of configuring various properties of the Sky Material including turbidity, luminance, inclination, and azimuth to control the sky's appearance.

LANGUAGE: javascript
CODE:
skyMaterial.turbidity = 1; // Represents the amount (scattering) of haze as opposed to molecules in atmosphere
skyMaterial.luminance = 1; // Controls the overall luminance of sky in interval [0, 1190]
skyMaterial.inclination = 0.5; // The solar inclination, related to the solar azimuth in interval [0, 1]
skyMaterial.azimuth = 0.25; // The solar azimuth in interval [0, 1]

----------------------------------------

TITLE: Defining an Enum in Babylon.js
DESCRIPTION: Example of how to define and document an enum for asset task states in Babylon.js. The enum defines constants for initialization, running, done, and error states.

LANGUAGE: javascript
CODE:
/**
* Defines the list of states available for a task inside an AssetsManager
*/
export enum AssetTaskState {
    /**
     * Initialization
     */
    INIT,
    /**
     * Running
     */
    RUNNING,
    /**
     * Done
     */
    DONE,
    /**
     * Error
     */
    ERROR
}

----------------------------------------

TITLE: Wall Builder Prototype Extension for PolygonMeshBuilder in JavaScript
DESCRIPTION: This code extends the PolygonMeshBuilder prototype with a wallBuilder method to generate wall geometry based on corner positions.

LANGUAGE: JavaScript
CODE:
BABYLON.PolygonMeshBuilder.prototype.wallBuilder = function (w0, w1) {
    //Method implementation
    //...
};

----------------------------------------

TITLE: Implementing Camera Tilt Triggers in Babylon.js
DESCRIPTION: This code demonstrates how to implement camera tilt triggers in a Babylon.js game. It adjusts the camera's vertical tilt when the player enters specific areas, such as the festival area and destination area.

LANGUAGE: javascript
CODE:
if (this.mesh.intersectsMesh(this.scene.getMeshByName("festivalTrigger"))) {
    if (this._input.verticalAxis > 0) {
        this._yTilt.rotation = Vector3.Lerp(this._yTilt.rotation, Player.DOWN_TILT, 0.4);
    } else if (this._input.verticalAxis < 0) {
        this._yTilt.rotation = Vector3.Lerp(this._yTilt.rotation, Player.ORIGINAL_TILT, 0.4);
    }
}
if (this.mesh.intersectsMesh(this.scene.getMeshByName("destinationTrigger"))) {
    if (this._input.verticalAxis > 0) {
        this._yTilt.rotation = Vector3.Lerp(this._yTilt.rotation, Player.ORIGINAL_TILT, 0.4);
    } else if (this._input.verticalAxis < 0) {
        this._yTilt.rotation = Vector3.Lerp(this._yTilt.rotation, Player.DOWN_TILT, 0.4);
    }
}

----------------------------------------

TITLE: Implementing Mobile Input Handling in BabylonJS
DESCRIPTION: Updates the input handling system to support both keyboard and mobile touch inputs for character actions

LANGUAGE: javascript
CODE:
if (this.inputMap["Shift"] || this._mobileDash) {
    this.dashing = true;
} else {
    this.dashing = false;
}

----------------------------------------

TITLE: Track Animation Implementation
DESCRIPTION: Handles animation of objects along the track with speed controls and interpolation

LANGUAGE: javascript
CODE:
var nbPoints = points.length;
var i = 0;
var deltaI = 0;
var pace = Math.round(speed);
var drag = Math.round(1 / speed);

var carriagePositions = [];
var carriageRotations = [];
var contentsRotations = [];

var carPosition = BABYLON.Vector3.Zero();

while (i < nbPoints) {
  if (speed >= 1) {
    carriagePositions.push(points[i]);
    if (isFreight) {
      carriageRotations.push(BABYLON.Quaternion.FromRotationMatrix(track.rotations[i]));
    } else {
      carriageRotations.push(BABYLON.Quaternion.FromRotationMatrix(track.carriageRotations[i]));
      contentsRotations.push(BABYLON.Quaternion.FromRotationMatrix(track.passengerRotations[i]));
    }
    i += pace;
  } else {
    tempPosition.x = points[i].x + (deltaI * (points[(i + 1) % nbPoints].x - points[i].x)) / drag;
    tempPosition.y = points[i].y + (deltaI * (points[(i + 1) % nbPoints].y - points[i].y)) / drag;
    tempPosition.z = points[i].z + (deltaI * (points[(i + 1) % nbPoints].z - points[i].z)) / drag;

    carriagePositions.push(tempPosition.clone());

    if (isFreight) {
      carriageRotations.push(BABYLON.Quaternion.FromRotationMatrix(track.rotations[i]));
    } else {
      carriageRotations.push(BABYLON.Quaternion.FromRotationMatrix(track.carriageRotations[i]));
      contentsRotations.push(BABYLON.Quaternion.FromRotationMatrix(track.passengerRotations[i]));
    }
    i = Math.floor(i + (deltaI + 1) / drag);
    deltaI = (deltaI + 1) % drag;
  }
}

----------------------------------------

TITLE: Compounding to One Covering Mesh in Babylon.js
DESCRIPTION: This code snippet demonstrates how to compound to one of the covering meshes in Babylon.js. It creates standard meshes to fit over an irregular mesh, chooses one as the parent, and sets up physics imposters with assumed masses for each standard mesh.

LANGUAGE: javascript
CODE:
// Code not provided in the original text, but referenced in Playground link:
// https://playground.babylonjs.com/#492ZK0#8

----------------------------------------

TITLE: Processing TexturePacker Asynchronously in Babylon.js
DESCRIPTION: Demonstrates how to process the TexturePacker asynchronously, returning a Promise that can be used to handle success and error cases.

LANGUAGE: javascript
CODE:
let pack = new BABYLON.TexturePacker(name, targetMeshes, options, scene);
pack.processAsync().then(success).catch(error);

----------------------------------------

TITLE: Center Rotation Formulas
DESCRIPTION: Mathematical formulas for rotating vectors 120 degrees clockwise and counterclockwise about the center of triangle OAB

LANGUAGE: mathematics
CODE:
RC⁺(xi⃗ + yj⃗) = (m - x - y)i⃗ + (n + x)j⃗
RC⁻(xi⃗ + yj⃗) = (y - n)i⃗ + (m + n - x - y)j⃗

----------------------------------------

TITLE: Retrieving Sound References in Babylon.JS Editor
DESCRIPTION: Shows how to use the @fromSounds decorator to get references to sounds in a Babylon.JS scene. The sound must be loaded in the project either attached to a node or as a 2D sound.

LANGUAGE: typescript
CODE:
import { Mesh } from "@babylonjs/core/Meshes/mesh";
import { Sound } from "@babylonjs/core/Audio/sound";

import { fromSounds } from "../decorators";

export default class MyMeshComponent extends Mesh {
    @fromSounds("sounds/6sounds.mp3")
    private _sound: Sound;

    public onStart(): void {
        this._sound.play();
    }
}

----------------------------------------

TITLE: JavaScript Post-Process Depth Buffer Setup
DESCRIPTION: JavaScript code to set up depth buffer handling for the first post-process in the rendering chain.

LANGUAGE: javascript
CODE:
const firstPostProcess = camera._getFirstPostProcess() ;
if (!firstPostProcess) {
    return ;
}

firstPostProcess.onSizeChangedObservable.add(() => {
    if (!firstPostProcess.inputTexture.depthStencilTexture) {
        firstPostProcess.inputTexture.createDepthStencilTexture(
            0,
            true,
            this._engine.isStencilEnable,
        ) ;
    }
}) ;

----------------------------------------

TITLE: Growing Particles from Size 0 to Final Size in Babylon.js
DESCRIPTION: Example of customizing particle growth by setting initial size to 0 and gradually increasing to a final size.

LANGUAGE: javascript
CODE:
particleSystem.minSize = 0;
particleSystem.maxSize = 0;

particleSystem.finalSize = 1;

// In the update function
if (particle.age < particle.lifeTime * 0.35) {
  particle.size = (particleSystem.finalSize * particle.age) / (particle.lifeTime * 0.35);
}

----------------------------------------

TITLE: Applying UV Mapping to Car Body in Babylon.js
DESCRIPTION: This snippet demonstrates how to apply UV mapping to the extruded car body mesh. It sets up the UV coordinates for the top, bottom, and edge faces of the car body using the Vector4 class.

LANGUAGE: javascript
CODE:
faceUV[0] = new BABYLON.Vector4(0, 0.5, 0.38, 1);
faceUV[2] = new BABYLON.Vector4(0.38, 1, 0, 0.5);
faceUV[1] = new BABYLON.Vector4(0, 0, 1, 0.5);

----------------------------------------

TITLE: Implementing Selection Panel with Groups in Babylon.js
DESCRIPTION: Demonstrates how to create a selection panel with multiple control groups and configure its positioning and dimensions.

LANGUAGE: javascript
CODE:
const advancedTexture = BABYLON.GUI.AdvancedDynamicTexture.CreateFullscreenUI("UI");

const selectBox = new BABYLON.GUI.SelectionPanel("selectBox");
selectBox.width = 0.25;
selectBox.height = 0.52;
selectBox.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_LEFT;
selectBox.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_BOTTOM;

advancedTexture.addControl(selectBox);

selectBox.addGroup(rotateGroup);
selectBox.addGroup(transformGroup);
selectBox.addGroup(colorGroup);

----------------------------------------

TITLE: Defining a Class in Babylon.js
DESCRIPTION: Example of how to define and document a class for a HemisphericLight in Babylon.js. The class simulates ambient environment light with a reflection direction.

LANGUAGE: javascript
CODE:
/**
 * Defines a HemisphericLight object that simulates the ambient environment light
 * so the passed direction is the light reflection direction, not the incoming direction
 */
export class HemisphericLight extends Light {
  //All the parts defining the class in here
}

----------------------------------------

TITLE: Enabling Texture Transparency in Babylon.js
DESCRIPTION: Sets the hasAlpha property of a texture to true, allowing for transparency in textures with alpha channels.

LANGUAGE: javascript
CODE:
myMaterial.diffuseTexture.hasAlpha = true;

----------------------------------------

TITLE: Creating Box with Custom Face Materials
DESCRIPTION: Creates a box mesh with custom UV mappings for each face and enables texture wrapping to prevent rotation of partial images.

LANGUAGE: javascript
CODE:
const box = BABYLON.MeshBuilder.CreateBox("box", {faceUV: faceUV, wrap: true});

----------------------------------------

TITLE: Fur Material Property Customization
DESCRIPTION: Configuration of core fur material properties including length, angle, and color.

LANGUAGE: javascript
CODE:
furMaterial.furLength = 3;
furMaterial.furAngle = Math.PI / 6;
furMaterial.furColor = new BABYLON.Color3(0.44, 0.21, 0.02);

----------------------------------------

TITLE: Using getHierarchyBoundingVectors() in Babylon.js
DESCRIPTION: This code shows how to use the getHierarchyBoundingVectors() method to efficiently calculate bounding vectors for a parent node and all its children.

LANGUAGE: javascript
CODE:
let { min, max } = parent.getHierarchyBoundingVectors();

parent.setBoundingInfo(new BABYLON.BoundingInfo(min, max));

----------------------------------------

TITLE: Inserting Image Link in Markdown
DESCRIPTION: Shows how to properly link to images in the Babylon.js documentation using markdown syntax

LANGUAGE: markdown
CODE:
![quick description (for accessibility)](/img/features/divingDeeper/my_very_great_page/my-wonderful-image.jpg)

----------------------------------------

TITLE: Creating Basic Track
DESCRIPTION: Creates a track using points and section data to define the path and rotational behavior

LANGUAGE: javascript
CODE:
var track = createTrack(points, sections);

----------------------------------------

TITLE: Adding Touch Input Support with PEP.js in BabylonJS
DESCRIPTION: Adds the PEP.js library to enable touch input handling alongside pointer events

LANGUAGE: javascript
CODE:
<script src="https://code.jquery.com/pep/0.4.3/pep.js"></script>

----------------------------------------

TITLE: Mobile Device Detection in JavaScript
DESCRIPTION: Checks if the current device is mobile using user agent detection

LANGUAGE: javascript
CODE:
if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
    //make mobile controls
}

----------------------------------------

TITLE: Implementing IsoVector Class for Isometric Vector Operations in JavaScript
DESCRIPTION: Defines an IsoVector class with methods for vector operations such as addition, subtraction, rotation, and conversion to Cartesian coordinates. These operations are essential for working with isometric grids in the context of polyhedra generation.

LANGUAGE: javascript
CODE:
function IsoVector(x, y) { //x, y integers
    this.x = x;
    this.y = y;
};

IsoVector.prototype.length = function() {
    return Math.sqrt(this.x * this.x + this.y * this.y + this.x * this.y);
};

IsoVector.prototype.clone = function() {
    return new IsoVector(this.x, this.y);
};

// ... (other methods like add, subtract, rotate60About, etc.)

IsoVector.prototype.toCartesianOrigin = function(origin, size) { // origin Vector3, size real
    const point = BABYLON.Vector3.Zero();
    point.x = origin.x + 2 * this.x * size + this.y * size;
    point.y = origin.y + 3 * thrdR3 * this.y * size;
    return point;
};

----------------------------------------

TITLE: Configuring ArcRotateCamera for Over-the-Shoulder View in Babylon.js
DESCRIPTION: This code creates an ArcRotateCamera with specific parameters for an over-the-shoulder view. It sets the camera's initial position relative to the character and defines a target offset.

LANGUAGE: javascript
CODE:
const camera = new BABYLON.ArcRotateCamera("camera", Math.PI / 2, Math.PI / 2.5, 150, new BABYLON.Vector3(0, 60, 0));

----------------------------------------

TITLE: Setting Compressed Texture Formats in Babylon.js
DESCRIPTION: This snippet demonstrates how to specify the available compressed texture formats for the Babylon.js engine to use. It should be called early in the application setup after the engine instance is created.

LANGUAGE: javascript
CODE:
// order & case do not matter
const available = ["-astc.ktx", "-dxt.ktx", "-pvrtc.ktx", "-etc2.ktx", "-etc1.ktx"];
const formatUsed = engine.setTextureFormatToUse(available);

----------------------------------------

TITLE: Setting Multisample Render Target in Babylon.js
DESCRIPTION: Shows how to enable multisampling for render targets in Babylon.js, which improves antialiasing but may slow rendering.

LANGUAGE: JavaScript
CODE:
renderTarget.samples = 8; // Set to a value > 1 to enable multisampling

----------------------------------------

TITLE: Using Havok via CDN with UMD
DESCRIPTION: HTML script implementation for loading and initializing Havok using CDN with UMD format

LANGUAGE: html
CODE:
<script src="https://cdn.babylonjs.com/havok/HavokPhysics_umd.js"></script>
<script>
  let havokInstance;
  HavokPhysics().then((havok) => {
    havokInstance = havok;
  });
</script>

----------------------------------------

TITLE: Orienting an Agent Based on Velocity in Babylon.js
DESCRIPTION: Calculate and apply orientation to an agent based on its velocity vector. This example smoothly interpolates the rotation to avoid sudden changes.

LANGUAGE: javascript
CODE:
let velocity = crowd.getAgentVelocity(agentIndex);
if (velocity.length() > 0.2) {
  const desiredRotation = Math.atan2(velocity.x, velocity.z);
  // interpolate the rotation on Y to get a smoother orientation change
  ag.mesh.rotation.y = ag.mesh.rotation.y + (desiredRotation - ag.mesh.rotation.y) * 0.05;
}

----------------------------------------

TITLE: Applying UV Mapping to Car Wheels in Babylon.js
DESCRIPTION: This snippet shows how to apply UV mapping to the cylindrical wheel meshes. It sets up the UV coordinates for the top, edge, and bottom faces of the wheels using the Vector4 class.

LANGUAGE: javascript
CODE:
wheelUV[0] = new BABYLON.Vector4(0, 0, 1, 1);
wheelUV[1] = new BABYLON.Vector4(0, 0.5, 0, 0.5);
wheelUV[2] = new BABYLON.Vector4(0, 0, 1, 1);

----------------------------------------

TITLE: Creating and Using the XML Loader in JavaScript
DESCRIPTION: This snippet demonstrates how to create an XML Loader, load a layout, and interact with loaded elements. It also shows how to initialize the loader within a class context.

LANGUAGE: javascript
CODE:
const advancedTexture = BABYLON.GUI.AdvancedDynamicTexture.CreateFullscreenUI("UI");
const xmlLoader = new BABYLON.GUI.XmlLoader();

// Inside a class
const xmlLoader = new BABYLON.GUI.XmlLoader(this);

xmlLoader.loadLayout("layouts/testgui.xml", advancedTexture);

// Loading without attaching to advancedTexture
xmlLoader.loadLayout("layouts/testgui.xml", null);

// Using a callback after loading
xmlLoader.loadLayout("layouts/testgui.xml", advancedTexture, function () {
  xmlLoader.getNodeById("helloButton").onPointerClickObservable.add(clickEvent);
});

// Interacting with loaded elements
xmlLoader.getNodeById("helloButton");
xmlLoader.getNodes();
xmlLoader.isLoaded();

// Detaching and reattaching controls
const node = xmlLoader.getNodeById("firstContainer");
advancedTexture.removeControl(node);
advancedTexture.addControl(node);

----------------------------------------

TITLE: Defining Page Structure in JSON
DESCRIPTION: Example of how to add new pages to the documentation structure configuration file

LANGUAGE: javascript
CODE:
{
    "documentKeyAndUrl": {
        "friendlyName": "A friendly title to your document",
        "children": {},
        "content": "the markdown file that correlates to this document."
    }
}

----------------------------------------

TITLE: Initializing High-Level Fur Material
DESCRIPTION: Basic setup of fur material in high-level mode with texture generation and shell creation.

LANGUAGE: javascript
CODE:
furMaterial.highLevelFur = true;

var furTexture = BABYLON.FurMaterial.GenerateTexture("furTexture", scene);

furMaterial.furTexture = furTexture;
myMesh.material = furMaterial;

var quality = 30; // Average quality

// Create shells
var shells = BABYLON.FurMaterial.FurifyMesh(myMesh, quality);

----------------------------------------

TITLE: Correct Gamma Value Handling in Shaders
DESCRIPTION: Proper approach to handling gamma encoded values in shaders by first converting to linear space before calculations.

LANGUAGE: glsl
CODE:
// Gamma encoded value saved to file
pow(0.25, 1/2.2) = 0.5326

// Gamma encoded value loaded into shader and decoded to linear value
pow(0.5326, 2.2) = 0.25

// Linear value multiplied by 2.0
0.25 * 2.0 = 0.5

----------------------------------------

TITLE: Low-Level Fur Material Setup
DESCRIPTION: Basic mesh creation and fur material application in low-level mode with mesh subdivision requirements.

LANGUAGE: javascript
CODE:
furMaterial.highLevelFur = false;

var ground = BABYLON.MeshBuilder.CreateGround("ground", {width: 8, height: 8, subdivisions: 200}, scene);
var sphere = BABYLON.MeshBuilder.CreateSphere("sphere", {segments: 500, diameter: 8}, scene);

var furMaterial = new BABYLON.FurMaterial("fur_material", scene);
ground.material = furMaterial;

----------------------------------------

TITLE: Copying Animation Map in Mid Distance Sprite Map
DESCRIPTION: Code snippet showing how to copy the animation map from a background sprite map to a mid-distance level sprite map. This enables animation synchronization between different sprite map layers.

LANGUAGE: javascript
CODE:
levelBase.animationMap = background.animationMap

----------------------------------------

TITLE: Storing Character Animation Groups in BabylonJS
DESCRIPTION: This snippet shows how to store imported animation groups for a character in a BabylonJS game. It assigns different animations like idle, jump, land, run, and dash to class variables.

LANGUAGE: javascript
CODE:
this._idle = assets.animationGroups[1];
this._jump = assets.animationGroups[2];
this._land = assets.animationGroups[3];
this._run = assets.animationGroups[4];
this._dash = assets.animationGroups[0];

----------------------------------------

TITLE: Animating Player Based on State in BabylonJS
DESCRIPTION: This snippet shows how to animate a player character based on different states such as running, jumping, idle, and falling in a BabylonJS game.

LANGUAGE: javascript
CODE:
if (!this._dashPressed && !this._isFalling && !this._jumped 
    && (this._input.inputMap["ArrowUp"]
    || this._input.inputMap["ArrowDown"] 
    || this._input.inputMap["ArrowLeft"]
    || this._input.inputMap["ArrowRight"])) {

    this._currentAnim = this._run;
} else if (this._jumped && !this._isFalling && !this._dashPressed) {
    this._currentAnim = this._jump;
} else if (!this._isFalling && this._grounded) {
    this._currentAnim = this._idle;
} else if (this._isFalling) {
    this._currentAnim = this._land;
}

----------------------------------------

TITLE: Adding Custom Fonts to HTML for Babylon.js Game
DESCRIPTION: Demonstrates how to include custom Google Fonts in the game's HTML file for use in the Babylon.js application.

LANGUAGE: javascript
CODE:
<head>
    <meta charset="UTF-8">
    <title>Hanabi</title>

    <link href="https://fonts.googleapis.com/css2?family=Ceviche+One&family=Viga&display=swap" rel="stylesheet">
</head>

----------------------------------------

TITLE: Enabling Walking Locomotion on WebXRCamera
DESCRIPTION: Demonstrates how to enable the Walking Locomotion feature directly on the WebXRCamera. This approach is possible but not recommended as it may conflate virtual positional data with XR sensory readings.

LANGUAGE: javascript
CODE:
scene.createDefaultXRExperienceAsync({ disableTeleportation: true }).then((xr) => {
  xr.baseExperience.featuresManager.enableFeature(BABYLON.WebXRFeatureName.WALKING_LOCOMOTION, "latest", { locomotionTarget: xr.baseExperience.camera.parent });
});

----------------------------------------

TITLE: Enabling Logarithmic Depth Buffer in Babylon.js
DESCRIPTION: Enables logarithmic depth buffer for StandardMaterials in Babylon.js. This feature requires browser support for GL_EXT_frag_depth extension and will fall back to linear depth buffering if not supported.

LANGUAGE: javascript
CODE:
material.useLogarithmicDepth = true;

----------------------------------------

TITLE: Implementing Render Loop
DESCRIPTION: Sets up the render loop to coordinate rendering between CesiumJS and BabylonJS.

LANGUAGE: javascript
CODE:
engine.runRenderLoop(() => {
    viewer.render();
    moveBabylonCamera();
    scene.render();
});

----------------------------------------

TITLE: Configuring Refraction in PBR
DESCRIPTION: Setup refraction properties for PBR materials

LANGUAGE: javascript
CODE:
const glass = new BABYLON.PBRMaterial("glass", scene);
glass.reflectionTexture = hdrTexture;
glass.refractionTexture = hdrTexture;
glass.linkRefractionWithTransparency = true;
glass.indexOfRefraction = 0.52;
glass.alpha = 0; // Fully refractive material

----------------------------------------

TITLE: Creating SSR Post Process in Babylon.js
DESCRIPTION: Initializes a new screen space reflection post process with basic configuration.

LANGUAGE: javascript
CODE:
var ssr = new BABYLON.ScreenSpaceReflectionPostProcess("ssr", scene, 1.0, camera);

----------------------------------------

TITLE: Applying Animation to Wheel in Babylon.js
DESCRIPTION: Links the animation keyframes to the wheel mesh and starts the animation with looping enabled.

LANGUAGE: javascript
CODE:
//set the keys
animWheel.setKeys(wheelKeys);

//Link this animation to the right back wheel
wheelRB.animations = [];
wheelRB.animations.push(animWheel);

//Begin animation - object to animate, first frame, last frame and loop if true
scene.beginAnimation(wheelRB, 0, 30, true);

----------------------------------------

TITLE: Branch Block Implementation
DESCRIPTION: Creates conditional branching in the flow graph based on a condition input.

LANGUAGE: javascript
CODE:
const branch = new FlowGraphBranchBlock();

branch.condition.connectTo(conditionBlock.value);

branch.onTrue.connectTo(nextBlock1.in);
branch.onFalse.connectTo(nextBlock2.in);

----------------------------------------

TITLE: Particle Collision with Velocity Reversal in BabylonJS
DESCRIPTION: Implementation where colliding particles reverse their velocities while moving on a grid. Particles move at fixed speeds along x, y, z axes and collide with walls and other particles.

LANGUAGE: javascript
CODE:
https://playground.babylonjs.com/#CGSXR#1

----------------------------------------

TITLE: Basic Camera Control Attachment in Babylon.js
DESCRIPTION: Demonstrates how to attach camera controls to a canvas with optional prevention of default actions.

LANGUAGE: javascript
CODE:
camera.attachControl(canvas, true);

----------------------------------------

TITLE: Generating a Simple Pine Tree in Babylon.js
DESCRIPTION: This snippet demonstrates how to use the simplePineGenerator function to create a pine tree in a Babylon.js scene. The function takes parameters for the number of canopies, tree height, trunk and leaf materials, and the scene object.

LANGUAGE: javascript
CODE:
const tree = simplePineGenerator(canopies, height, trunkMaterial, leafMaterial, scene);

----------------------------------------

TITLE: Implementing Road Procedural Texture in Babylon.js
DESCRIPTION: This snippet demonstrates how to create a road material using the Road Procedural Texture in Babylon.js. It creates a standard material and assigns the road procedural texture as its diffuse texture.

LANGUAGE: javascript
CODE:
var roadmaterial = new BABYLON.StandardMaterial("roadMat", scene);
var roadmaterialpt = new BABYLON.RoadProceduralTexture("roadTex", 512, scene);
roadmaterial.diffuseTexture = roadmaterialpt;

----------------------------------------

TITLE: Generating Random Positions for a Sphere
DESCRIPTION: Shows how to use a RandomBlock to set random positions for each vertex in a sphere.

LANGUAGE: javascript
CODE:
// Create node geometry
var nodegeo = new BABYLON.NodeGeometry("nodegeo");

// Create source sphere
var sphere = new BABYLON.SphereBlock("sphere");

var setPositions = new BABYLON.SetPositionsBlock("set positions");
sphere.geometry.connectTo(setPositions.geometry);

var getRnd = new BABYLON.RandomBlock("random");
var rndMin = new BABYLON.GeometryInputBlock("rndMin", BABYLON.NodeGeometryBlockConnectionPointTypes.Vector3);
rndMin.value = BABYLON.Vector3.Zero();
var rndMax = new BABYLON.GeometryInputBlock("rndMax", BABYLON.NodeGeometryBlockConnectionPointTypes.Vector3);
rndMax.value = BABYLON.Vector3.One();
rndMin.output.connectTo(getRnd.min);
rndMax.output.connectTo(getRnd.max);
getRnd.output.connectTo(setPositions.positions);

// Create output
var output = new BABYLON.GeometryOutputBlock("geometryout");
nodegeo.outputBlock = output;
setPositions.output.connectTo(output.geometry);       

// Build and instantiate mesh
nodegeo.build();
var mesh = nodegeo.createMesh("nodegeomesh");

----------------------------------------

TITLE: Installing BabylonJS HTML Mesh Package
DESCRIPTION: Commands for installing the BabylonJS HTML Mesh package using npm, both as a UMD and ES6 module.

LANGUAGE: shell
CODE:
npm install babylonjs-addons --save

LANGUAGE: shell
CODE:
npm install @babylonjs/adddons --save

----------------------------------------

TITLE: Implementing Light Control Slider
DESCRIPTION: Creates and configures a slider for controlling scene light intensity

LANGUAGE: javascript
CODE:
const slider = new BABYLON.GUI.Slider();
slider.minimum = 0;
slider.maximum = 1;
slider.borderColor = "black";
slider.color = "#AAAAAA";
slider.background = "#white";
slider.value = 1;
slider.height = "20px";
slider.width = "200px";
panel.addControl(slider);

----------------------------------------

TITLE: Updating Character Movement from Keyboard Input in Babylon.js
DESCRIPTION: Handles keyboard input for character movement, updating vertical and horizontal movement values based on arrow key presses. Uses Scalar.Lerp for smooth transitions between movement states.

LANGUAGE: typescript
CODE:
private _updateFromKeyboard(): void {
    if (this.inputMap["ArrowUp"]) {
        this.vertical = Scalar.Lerp(this.vertical, 1, 0.2);
        this.verticalAxis = 1;

    } else if (this.inputMap["ArrowDown"]) {
        this.vertical = Scalar.Lerp(this.vertical, -1, 0.2);
        this.verticalAxis = -1;
    } else {
        this.vertical = 0;
        this.verticalAxis = 0;
    }

    if (this.inputMap["ArrowLeft"]) {
        this.horizontal = Scalar.Lerp(this.horizontal, -1, 0.2);
        this.horizontalAxis = -1;

    } else if (this.inputMap["ArrowRight"]) {
        this.horizontal = Scalar.Lerp(this.horizontal, 1, 0.2);
        this.horizontalAxis = 1;
    }
    else {
        this.horizontal = 0;
        this.horizontalAxis = 0;
    }
}

----------------------------------------

TITLE: Creating Multiple Firework Instances in BabylonJS
DESCRIPTION: Initializes multiple firework instances and sets up an observable to manage their execution.

LANGUAGE: javascript
CODE:
for (let i = 0; i < 20; i++) {
  this._fireworkObjs.push(new Firework(this._scene, i));
}

this._scene.onBeforeRenderObservable.add(() => {
  this._fireworkObjs.forEach((f) => {
    if (this._startFireworks) {
      f._startFirework();
    }
  });
});

----------------------------------------

TITLE: Initializing Tri-Planar Material with Diffuse Textures in Babylon.js
DESCRIPTION: This snippet demonstrates how to create a tri-planar material and set its diffuse textures for each axis. It shows that textures can be shared between axes.

LANGUAGE: javascript
CODE:
var triPlanarMaterial = new BABYLON.TriPlanarMaterial("triplanar", scene);

// The 3 diffuse textures must be set, even if they share the same texture reference
triPlanarMaterial.diffuseTextureX = new BABYLON.Texture("rock.png", scene);
triPlanarMaterial.diffuseTextureY = new BABYLON.Texture("grass.png", scene);
triPlanarMaterial.diffuseTextureZ = triPlanarMaterial.diffuseTextureX;

----------------------------------------

TITLE: Disabling Depth Renderer in Babylon.js
DESCRIPTION: Shows how to disable the depth renderer when it's no longer needed in the scene.

LANGUAGE: javascript
CODE:
scene.disableDepthRender();

----------------------------------------

TITLE: Animated MeshWriter Implementation
DESCRIPTION: Demonstrates how to create animated 3D text using MeshWriter with particle system updates and scene rendering.

LANGUAGE: javascript
CODE:
const SCALE = 0.25;
const TEXT_SIZE = 35;
const TEXT_THICKNESS = 10;

Writer = BABYLON.MeshWriter(scene, { scale: SCALE, defaultFont: "Arial" });
textMesh = new Writer("BABYLON JS", {
  "font-family": "Arial",
  anchor: "center",
  "letter-height": TEXT_SIZE,
  "letter-thickness": TEXT_THICKNESS,
  color: "#1C3870",
  colors: {
    diffuse: "#F0F0F0",
    specular: "#000000",
    ambient: "#F0F0F0",
    emissive: "#ff00f0"
  },
  position: {
    x: 0,
    y: 5,
    z: 70
  }
});

SPS = textMesh.getSPS();

SPS.updateParticle = (particle) => {
  particle.rotation.x -= 0.06;
};

scene.registerBeforeRender(() => {
  SPS.setParticles();
});

----------------------------------------

TITLE: Adjusting Camera Orbit in Babylon.js Viewer (HTML)
DESCRIPTION: This snippet demonstrates how to use the camera-orbit attribute in the Babylon.js viewer to adjust the camera's position relative to the 3D model. It sets the radius to 15 while keeping alpha and beta values automatic.

LANGUAGE: HTML
CODE:
<babylon-viewer model="path/to/model.glb" camera-orbit="auto auto 15"></babylon-viewer>

----------------------------------------

TITLE: Cartesian Coordinate Conversion
DESCRIPTION: Formula for converting isometric coordinates to Cartesian coordinates

LANGUAGE: mathematics
CODE:
(x, y) isometric = (x + 0.5y, 0.5√3y) cartesian

----------------------------------------

TITLE: Disposing SPS in JavaScript
DESCRIPTION: Shows how to properly dispose of a Solid Particle System and clean up its memory allocation.

LANGUAGE: javascript
CODE:
SPS.dispose();
SPS = null; // tells the GC the reference can be cleaned up also

----------------------------------------

TITLE: Animated Ascii Art Transition
DESCRIPTION: Implements an animated transition effect between normal rendering and Ascii Art using scene rendering loop.

LANGUAGE: javascript
CODE:
var postProcess = new BABYLON.AsciiArtPostProcess("AsciiArt", camera);
var alpha = 0;
scene.registerBeforeRender(function() {
    alpha += 0.01;
    postProcess.mixToNormal = Math.cos(alpha) * 0.5 + 0.5; // between 0 and 1.
});

----------------------------------------

TITLE: Setting Diffuse Texture in Background Material
DESCRIPTION: Demonstrates how to add a diffuse texture to a background material in Babylon.js

LANGUAGE: javascript
CODE:
backgroundMaterial.diffuseTexture = new BABYLON.Texture("textures/grass.jpg", scene);

----------------------------------------

TITLE: HTML Playground Component
DESCRIPTION: Shows how to embed a Babylon.js playground in documentation

LANGUAGE: html
CODE:
<Playground id="playgroundId" title="Playground title" description="A short description" image="Optional image url" />

----------------------------------------

TITLE: Handling Player Movement Updates
DESCRIPTION: Server-side logic for receiving and processing player position updates.

LANGUAGE: typescript
CODE:
onCreate(options: any) {
  this.setState(new MyRoomState());

  this.onMessage("updatePosition", (client, data) => {
    const player = this.state.players.get(client.sessionId);
    player.x = data.x;
    player.y = data.y;
    player.z = data.z;
  });
}

----------------------------------------

TITLE: Creating Player Characters in Colyseus Room
DESCRIPTION: Adds player meshes to the scene when they join the Colyseus room.

LANGUAGE: typescript
CODE:
client.joinOrCreate<StateHandler>("game").then((room) => {
  const playerViews: { [id: string]: BABYLON.Mesh } = {};

  room.state.players.onAdd = function (player, key) {
    // Our built-in 'sphere' shape. Params: name, subdivs, size, scene
    playerViews[key] = BABYLON.MeshBuilder.CreateSphere("sphere1", { segments: 16, diameter: 2 }, scene);
  };
});

----------------------------------------

TITLE: Disc World Animation with Multiple Children
DESCRIPTION: Creates a rotating disc with building boxes parented to it, showing complex parent-child relationships with multiple transformations.

LANGUAGE: javascript
CODE:
var phi = 0;
scene.registerAfterRender(function () {
    matrix = disc.getWorldMatrix();
    disc.rotate(BABYLON.Axis.Y, Math.PI / 150, BABYLON.Space.LOCAL);
    disc.rotate(BABYLON.Axis.Z, Math.PI / 200, BABYLON.Space.LOCAL);
    disc.position = new BABYLON.Vector3(15 * Math.cos(phi), 16 * Math.sin(phi), 5);
    phi += 0.01;
});

----------------------------------------

TITLE: Accessing Depth Map in Babylon.js Materials
DESCRIPTION: Demonstrates how to access and use the depth map texture in a standard material. The depth map can be applied as an emissive texture or used with other material properties.

LANGUAGE: javascript
CODE:
const mat = new BABYLON.StandardMaterial("mat01", scene);
mat.emissiveTexture = renderer.getDepthMap();

----------------------------------------

TITLE: Configuring Root Node and Scene Objects
DESCRIPTION: Creates and configures the root transform node and adds sample meshes with materials to the scene.

LANGUAGE: javascript
CODE:
const root_node = new BABYLON.TransformNode("BaseNode", scene);
root_node.lookAt(base_point_up.subtract(base_point));
root_node.addRotation(Math.PI / 2, 0, 0);

const box = BABYLON.MeshBuilder.CreateBox("box", {size: 10}, scene);
const material = new BABYLON.StandardMaterial("Material", scene);
material.emissiveColor = new BABYLON.Color3(1, 0, 0);
material.alpha = 0.5;
box.material = material;
box.parent = root_node;

const ground = BABYLON.MeshBuilder.CreateGround("ground", {
    width: 100,
    height: 100
}, scene);
ground.material = material;
ground.parent = root_node;

----------------------------------------

TITLE: Creating Tree with SPS Generator in Babylon.js
DESCRIPTION: Function call to create a tree using the SPS Tree Generator with customizable parameters for trunk, branches, forks, and leaves. The function returns a complete tree mesh with specified materials and geometric properties.

LANGUAGE: javascript
CODE:
const tree = createTree(trunkHeight, trunkTaper, trunkSlices, trunkMaterial, boughs, forks, forkAngle, forkRatio, branches, branchAngle, bowFreq, bowHeight, leavesOnBranch, leafWHRatio, leafMaterial, scene);

----------------------------------------

TITLE: Setting Refresh Rate for Reflection Probe in Babylon.js
DESCRIPTION: This snippet shows different options for setting the refresh rate of a reflection probe, controlling how often the cube textures are updated.

LANGUAGE: javascript
CODE:
probe.refreshRate = BABYLON.RenderTargetTexture.REFRESHRATE_RENDER_ONCE;
// or
probe.refreshRate = BABYLON.RenderTargetTexture.REFRESHRATE_RENDER_ONEVERYFRAME;
// or
probe.refreshRate = BABYLON.RenderTargetTexture.REFRESHRATE_RENDER_ONEVERYTWOFRAMES;
// or
probe.refreshRate = 3;

----------------------------------------

TITLE: Creating Streaming Background Music in Babylon.js
DESCRIPTION: Creates a streaming sound that loops continuously, ideal for background music. The sound starts playing automatically when created.

LANGUAGE: javascript
CODE:
BABYLON.CreateStreamingSoundAsync("name", "<sound file URL>", { loop: true, autoplay: true }, audioEngine);

----------------------------------------

TITLE: Implementing Multi-Key Controls in BabylonJS
DESCRIPTION: Sets up an action manager to handle multiple simultaneous key presses for car controls using A, D, and Space keys. Uses a map object to track key states.

LANGUAGE: javascript
CODE:
var map ={}; //object for multiple key presses
scene.actionManager = new BABYLON.ActionManager(scene);

scene.actionManager.registerAction(new BABYLON.ExecuteCodeAction(BABYLON.ActionManager.OnKeyDownTrigger, function (evt) {
  map[evt.sourceEvent.key] = evt.sourceEvent.type == "keydown";
}));

scene.actionManager.registerAction(new BABYLON.ExecuteCodeAction(BABYLON.ActionManager.OnKeyUpTrigger, function (evt) {
  map[evt.sourceEvent.key] = evt.sourceEvent.type == "keydown";
}));

----------------------------------------

TITLE: Handling Canvas Resize in Main Thread
DESCRIPTION: Event listener for window resize that communicates new canvas dimensions to the worker thread.

LANGUAGE: javascript
CODE:
window.addEventListener("resize", () => {
  worker.postMessage({ width: canvas.clientWidth, height: canvas.clientHeight });
});

----------------------------------------

TITLE: JavaScript Variable Type Best Practices
DESCRIPTION: Demonstrates best practices for maintaining consistent variable types to optimize JavaScript compiler performance.

LANGUAGE: javascript
CODE:
SPS.vars.myFloat = 0.01; // just keep setting float values to myFloat afterwards
SPS.vars.myInt = 5; // just keep setting integer values to myInt afterwards
SPS.vars.myString = "foo"; // just keep setting string values to myString afterwards

----------------------------------------

TITLE: Loading Animation from Snippet Server in Babylon.js
DESCRIPTION: This code snippet demonstrates how to load an animation from the Babylon.js snippet server and apply it to a sphere in the scene.

LANGUAGE: javascript
CODE:
let sphere = BABYLON.MeshBuilder.CreateSphere("sphere", {diameter: 2, segments: 32}, scene);
let animations = await BABYLON.Animation.CreateFromSnippetAsync('YOUR SNIPPET ID');
sphere.animations = animations;
scene.beginAnimation(sphere, 0, 100, true);

----------------------------------------

TITLE: Applying ZXZ World Space Rotations in Babylon.js
DESCRIPTION: Demonstrates how to apply rotations in ZXZ order using world space axes in Babylon.js. This is a standard Euler angle convention.

LANGUAGE: javascript
CODE:
mesh.rotate(BABYLON.Axis.Z, alpha, BABYLON.Space.WORLD);
mesh.rotate(BABYLON.Axis.X, beta, BABYLON.Space.WORLD);
mesh.rotate(BABYLON.Axis.Z, gamma, BABYLON.Space.WORLD);

----------------------------------------

TITLE: Storing Shader in ShaderStore for Babylon.js
DESCRIPTION: Example of storing a pixel shader in Babylon.js ShaderStore for use with CustomProceduralTexture.

LANGUAGE: javascript
CODE:
BABYLON.Effect.ShadersStore["LinesPixelShader"] = "#ifdef GL_ES\n" + "precision highp float;\n" + "#endif\n\n" + "varying vec2 vUV; \n" + "void main(void) {\n" + " gl_FragColor = vec4(vUV.x,vUV.y,-vUV.x, 1.0);\n" + "}\n" + "";

----------------------------------------

TITLE: Creating and Testing DiffuseEmissiveMaterial (JavaScript)
DESCRIPTION: This snippet demonstrates how to create an instance of the new DiffuseEmissiveMaterial, set its properties, and add it to the UI controls for testing.

LANGUAGE: javascript
CODE:
const diffuseEmissive = new BABYLON.DiffuseEmissiveMaterial("diffuseEmissive", scene);
diffuseEmissive.diffuseTexture = new BABYLON.Texture("textures/amiga.jpg", scene);
diffuseEmissive.diffuseTexture.uScale = 5;
diffuseEmissive.diffuseTexture.vScale = 5;

diffuseEmissive.emissiveTexture = new BABYLON.Texture("textures/amiga.jpg", scene);
diffuseEmissive.emissiveTexture.uScale = 10;
diffuseEmissive.emissiveTexture.vScale = 10;

LANGUAGE: javascript
CODE:
gui.add(options, "material", ["standard", "simple", "diffuseEmissive"]).onFinishChange(function () {
  switch (options.material) {
    case "diffuseEmissive":
      currentMaterial = diffuseEmissive;
      break;
    case "simple":
      currentMaterial = simple;
      break;
    default:
      currentMaterial = std;
      break;
  }

  currentMesh.material = currentMaterial;
});

----------------------------------------

TITLE: Collision Detection with Movement Logic
DESCRIPTION: Example showing a common but potentially problematic approach to handling sphere-wall collisions with movement logic.

LANGUAGE: javascript
CODE:
if(sphere.intersectsMesh(wall)) {
    //bounce sphere off wall
}
else {
    //move sphere left
}

----------------------------------------

TITLE: Implementing CloudBisProceduralTexture Class in TypeScript
DESCRIPTION: This TypeScript code defines the CloudBisProceduralTexture class, which inherits from ProceduralTexture. It sets up the texture, manages shader uniforms, and provides getters and setters for sky and cloud colors.

LANGUAGE: TypeScript
CODE:
module BABYLON {
    export class CloudBisProceduralTexture extends ProceduralTexture {
        private _skyColor = new Color4(0.15, 0.68, 1.0, 1.0);
        private _cloudColor = new Color4(1, 1, 1, 1.0);

        constructor(name: string, size: number, scene: Scene, fallbackTexture?: Texture, generateMipMaps?: boolean) {
            super(name, size, "cloudProceduralTexture", scene, fallbackTexture, generateMipMaps);
            this.updateShaderUniforms();
            this.refreshRate = 0;
        }

        public updateShaderUniforms() {
            this.setColor4("skyColor", this._skyColor);
            this.setColor4("cloudColor", this._cloudColor);
        }

        public get skyColor(): Color4 {
            return this._skyColor;
        }

        public set skyColor(value: Color4) {
            this._skyColor = value;
            this.updateShaderUniforms();
        }

        public get cloudColor(): Color4 {
            return this._cloudColor;
        }

        public set cloudColor(value: Color4) {
            this._cloudColor = value;
            this.updateShaderUniforms();
        }
    }
}

----------------------------------------

TITLE: Loading Particle System Using Promises
DESCRIPTION: Alternative approach to loading a particle system using Promises instead of async/await.

LANGUAGE: javascript
CODE:
BABYLON.ParticleHelper.CreateFromSnippetAsync("T54JV7#13", scene, false).then((system) => {
  system.emitter = sphere;
});

----------------------------------------

TITLE: Using DOM Element Shader in CustomProceduralTexture
DESCRIPTION: JavaScript code to create a CustomProceduralTexture using a shader stored in a DOM element in Babylon.js.

LANGUAGE: javascript
CODE:
const linesShader = { fragmentElement: "LinesPixelShader" };
const customProcText = new BABYLON.CustomProceduralTexture("customtext", linesShader, 1024, scene);

----------------------------------------

TITLE: Checking GUIProgress Visibility in BabylonJS
DESCRIPTION: Method to check if the progress bar GUI element is currently visible.

LANGUAGE: javascript
CODE:
isVisible() → void

----------------------------------------

TITLE: Accessing Quadratic Error Decimation in Babylon.js
DESCRIPTION: This example shows how to directly access and configure the QuadraticErrorSimplification class for more control over the simplification process.

LANGUAGE: javascript
CODE:
const decimator = new QuadraticErrorSimplification(meshToDecimate);

// Configure decimation parameters
decimator.decimationIterations = 100;
decimator.aggressiveness = 7;
decimator.syncIterations = 1000;

// Run simplification
simplify(settings, successCallback);

----------------------------------------

TITLE: Adjusting Object Position in Babylon.js
DESCRIPTION: This code snippet shows how to adjust the vertical position of a box object to sit on top of the ground plane. The box is moved up by half its height (0.5 units) to prevent it from intersecting with the ground.

LANGUAGE: javascript
CODE:
box.position.y = 0.5;  //box created with default size so height is 1

----------------------------------------

TITLE: Setting Up Deterministic Lockstep in Babylon.js
DESCRIPTION: Shows how to configure Babylon.js engine for deterministic lockstep to synchronize animations, physics, and game logic.

LANGUAGE: javascript
CODE:
this.engine = new BABYLON.Engine(theCanvas, true, {
  deterministicLockstep: true,
  lockstepMaxSteps: 4
});

const physEngine = new BABYLON.CannonJSPlugin(false);
newScene.enablePhysics(this.gravity, physEngine);
physEngine.setTimeStep(1 / 60);

newScene.onBeforeStepObservable.add(function (theScene) {
  console.log("Performing game logic, BEFORE animations and physics for stepId: " + theScene.getStepId());
});

newScene.onAfterStepObservable.add(function (theScene) {
  console.log("Performing game logic, AFTER animations and physics for stepId: " + theScene.getStepId());
});

----------------------------------------

TITLE: Implementing Keyboard Controls
DESCRIPTION: Sets up keyboard input handling for ball movement and throwing. Includes left/right movement and forward rolling impulse controls.

LANGUAGE: javascript
CODE:
scene.onKeyboardObservable.add((kbInfo) => {
    switch (kbInfo.type) {
        case BABYLON.KeyboardEventTypes.KEYDOWN:
            switch (kbInfo.event.key.toLowerCase()) {
                case "a":
                    bowlingBall.position.x += 0.1;
                    break;
                case "d":
                    bowlingBall.position.x -= 0.1;
                    break;
                case "w":
                    ballAggregate.body.applyImpulse(new BABYLON.Vector3(0, 0, 20), bowlingBall.getAbsolutePosition());
                    break;
            }
    }
});

----------------------------------------

TITLE: Converting Geodesic to Goldberg Polyhedron in JavaScript
DESCRIPTION: Provides functions to convert a Geodesic polyhedron to its dual Goldberg polyhedron. This involves creating new vertices at the centers of the Geodesic faces and connecting them to form the Goldberg faces.

LANGUAGE: javascript
CODE:
const setOrder = (m, faces, data) => {
    // ... (code for ordering face vertices)
}

const GDtoGP = function(GDdata) {
    const GPdata = {};
    GPdata.name = "GD dual";
    GPdata.category = ["Goldberg"];
    GPdata.vertex = [];
    GPdata.face = [];

    // ... (code for converting Geodesic to Goldberg)

    return GPdata;
};

----------------------------------------

TITLE: Creating a Sprite Manager for Trees in Babylon.js
DESCRIPTION: Initializes a SpriteManager for managing tree sprites. It specifies the manager name, texture path, capacity, and sprite dimensions.

LANGUAGE: javascript
CODE:
const spriteManagerTrees = new BABYLON.SpriteManager("treesManager", path to palm.png, 2000, {width: 512, height: 1024});

----------------------------------------

TITLE: Loading Animation from JSON File in Babylon.js
DESCRIPTION: This code snippet shows how to load an animation from a saved JSON file and apply it to a sphere in the Babylon.js scene.

LANGUAGE: javascript
CODE:
let sphere = BABYLON.MeshBuilder.CreateSphere("sphere", {diameter: 2, segments: 32}, scene);
let animations = await BABYLON.Animation.ParseFromFileAsync(null, "https://doc.babylonjs.com/examples/animations.json");
sphere.animations = animations;
scene.beginAnimation(sphere, 0, 100, true);

----------------------------------------

TITLE: Applying Wood Procedural Texture in Babylon.js
DESCRIPTION: This snippet demonstrates how to create a wood material using the Wood Procedural Texture in Babylon.js. It shows how to instantiate the texture, adjust its amplitude scale, and apply it to a standard material.

LANGUAGE: javascript
CODE:
var woodMaterial = new BABYLON.StandardMaterial("woodMat", scene);
var woodTexture = new BABYLON.WoodProceduralTexture("woodTex", 1024, scene);
woodTexture.ampScale = 80.0;
woodMaterial.diffuseTexture = woodTexture;

----------------------------------------

TITLE: Inlining Shader Functions for WebGPU Compatibility in Babylon.js
DESCRIPTION: This snippet demonstrates how to use the #define inline directive to enable function inlining in shader code. This is necessary for WebGPU compatibility when passing samplers to functions.

LANGUAGE: javascript
CODE:
#define inline
vec4 getPixel(sampler2D sampler, vec2 uv) {
    return texture2D(sampler, uv);
}

----------------------------------------

TITLE: Implementing Scroll-based State Management
DESCRIPTION: Logic to update the app state based on the current scroll position, affecting the 3D experience display.

LANGUAGE: JavaScript
CODE:
const handleScroll = () => {
    const scrollPosition = window.scrollY;
    const documentHeight = document.documentElement.scrollHeight - window.innerHeight;
    const scrollPercentage = scrollPosition / documentHeight;

    if (scrollPercentage < 0.25) {
        setState("title");
    } else if (scrollPercentage < 0.75) {
        setState("body");
    } else {
        setState("configuration");
    }

    if (experience) {
        experience.setScrollPercentage(scrollPercentage);
    }
};

----------------------------------------

TITLE: Adding Emissive Texture Support in Vertex Shader (GLSL)
DESCRIPTION: This snippet adds support for an emissive texture in the vertex shader by declaring necessary variables and calculating UV coordinates.

LANGUAGE: glsl
CODE:
#ifdef EMISSIVE
varying vec2 vEmissiveUV;
uniform mat4 emissiveMatrix;
uniform vec2 vEmissiveInfos;
#endif

LANGUAGE: glsl
CODE:
#ifdef EMISSIVE
	if (vEmissiveInfos.x == 0.)
	{
		vEmissiveUV = vec2(emissiveMatrix * vec4(uv, 1.0, 0.0));
	}
	else
	{
		vEmissiveUV = vec2(emissiveMatrix * vec4(uv2, 1.0, 0.0));
	}
#endif

----------------------------------------

TITLE: Disabling Teleportation in Default XR Experience
DESCRIPTION: Demonstrates how to disable teleportation when creating the default XR experience in Babylon.js. This is a prerequisite for using the Movement Module.

LANGUAGE: javascript
CODE:
const xr = await scene.createDefaultXRExperienceAsync({
  disableTeleportation: true,
});

----------------------------------------

TITLE: Using ShaderStore Shader in CustomProceduralTexture
DESCRIPTION: Creating a CustomProceduralTexture using a shader stored in ShaderStore in Babylon.js.

LANGUAGE: javascript
CODE:
const customProcText = new BABYLON.CustomProceduralTexture("customtext", "Lines", 1024, scene);

----------------------------------------

TITLE: Creating a GUIDialog in BabylonJS
DESCRIPTION: Creates a new GUIDialog instance with specified parameters. The dialog can be customized with various options and added to a GUI manager.

LANGUAGE: javascript
CODE:
new GUIDialog(id, options, guimanager, callback, append)

----------------------------------------

TITLE: Disposing GUIMeter in BabylonJS
DESCRIPTION: Method to dispose of the GUIMeter element and remove it from the GUI system.

LANGUAGE: javascript
CODE:
dispose() → void

----------------------------------------

TITLE: Computing Hotspot Position in Babylon.js
DESCRIPTION: Demonstrates how to compute a hotspot position using point indices and barycentric coordinates on a mesh.

LANGUAGE: javascript
CODE:
const hotspotQuery = {pointIndex:[6527,6526,6525],barycentric:[0.723, 0.079, 0.196]};
BABYLON.GetHotSpotToRef(mesh, hotspotQuery, worldPosition);

----------------------------------------

TITLE: Creating Multiple House Instances in Babylon.js
DESCRIPTION: Demonstrates a loop that creates multiple instances of houses, positioning and rotating them based on predefined data. This technique is used to efficiently populate a village scene with various house types.

LANGUAGE: javascript
CODE:
const houses = [];

for (let i = 0; i < places.length; i++) {
    if (places[i][0] === 1) {
        houses[i] = detached_house.createInstance("house" + i);
    }
    else {
        houses[i] = semi_house.createInstance("house" + i);
    }
    houses[i].rotation.y = places[i][1];
    houses[i].position.x = places[i][2];
    houses[i].position.z = places[i][3];
}

----------------------------------------

TITLE: Character Movement and Animation Control in Babylon.js
DESCRIPTION: This snippet demonstrates how to update the character's position and rotation based on keyboard input, and how to trigger the appropriate animations.

LANGUAGE: javascript
CODE:
if (inputMap["w"]) {
  hero.moveWithCollisions(hero.forward.scaleInPlace(heroSpeed));
  keydown = true;
}
if (inputMap["s"]) {
  hero.moveWithCollisions(hero.forward.scaleInPlace(-heroSpeedBackwards));
  keydown = true;
}
if (inputMap["a"]) {
  hero.rotate(BABYLON.Vector3.Up(), -heroRotationSpeed);
  keydown = true;
}
if (inputMap["d"]) {
  hero.rotate(BABYLON.Vector3.Up(), heroRotationSpeed);
  keydown = true;
}
if (inputMap["b"]) {
  keydown = true;
}

if (keydown) {
  if (!animating) {
    animating = true;
    if (inputMap["s"]) {
      //Walk backwards
      walkBackAnim.start(true, 1.0, walkBackAnim.from, walkBackAnim.to, false);
    } else if (inputMap["b"]) {
      //Samba!
      sambaAnim.start(true, 1.0, sambaAnim.from, sambaAnim.to, false);
    } else {
      //Walk
      walkAnim.start(true, 1.0, walkAnim.from, walkAnim.to, false);
    }
  }
}

----------------------------------------

TITLE: Configuring TypeScript for Babylon.js Project
DESCRIPTION: This tsconfig.json file sets up the TypeScript compiler options for a Babylon.js project, including target ECMAScript version, module settings, and other compiler flags.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "target": "es6",
    "lib": [
      "dom",
      "es6"
    ],
    "useDefineForClassFields": true,
    "module": "ESNext",
    "moduleResolution": "node",
    "noResolve": false,
    "isolatedModules": true,
    "removeComments": true,
    "esModuleInterop": true,
    "noImplicitAny": false,
    "noUnusedLocals": false,
    "noUnusedParameters": true,
    "noImplicitReturns": true,
    "skipLibCheck": true
  },
  "include": ["src"]
}

----------------------------------------

TITLE: Initializing Dynamic Terrain with SPS Integration
DESCRIPTION: Shows how to create a Dynamic Terrain instance with integrated SPMap and SPS functionality.

LANGUAGE: javascript
CODE:
const terrainSub = 100;
const params = {
  mapData: mapData,
  mapSubX: mapSubX,
  mapSubZ: mapSubZ,
  terrainSub: terrainSub,
  SPmapData: SPMap,
  sps: sps,
};
const terrain = new BABYLON.DynamicTerrain("t", params, scene);

----------------------------------------

TITLE: Creating a Torus Knot with Mesh in Babylon.js
DESCRIPTION: This snippet shows how to create a torus knot using the Mesh.CreateTorusKnot method in Babylon.js. It allows specifying parameters such as radius, tube thickness, radial and tubular segments, and winding numbers p and q.

LANGUAGE: javascript
CODE:
const knot = BABYLON.MeshBuilder.CreateTorusKnot("knot", {radius, tube, radialSegments, tubularSegments, p, q}, scene);

----------------------------------------

TITLE: Defining Custom Tint Block using JSON in BabylonJS Smart Filter Editor
DESCRIPTION: This JSON snippet defines a custom tint block for the Smart Filter Editor. It specifies the block type, namespace, shader program, and input connection points. The shader program includes GLSL code for applying a tint effect to an input texture.

LANGUAGE: JSON
CODE:
{
    "format": "shaderBlockDefinition",
    "formatVersion": 1,
    "blockType": "JSONTintBlock",
    "namespace": "Babylon.Demo.Effects",
    "shaderProgram": {
        "fragment": {
            "uniform": "\n               uniform sampler2D _input_;\n               uniform vec3 _tint_;\n               uniform float _amount_;",
            "mainFunctionName": "_mainImage_",
            "functions": [
                {
                    "name": "_mainImage_",
                    "code": "\n                        vec4 _mainImage_(vec2 vUV) {\n                            vec4 color = texture2D(_input_, vUV);\n                            vec3 tinted = mix(color.rgb, _tint_, _amount_);\n                            return vec4(tinted, color.a);\n                        }"
                }
            ]
        }
    },
    "inputConnectionPoints": [
        {
            "name": "input",
            "type": 2
        },
        {
            "name": "tint",
            "type": 3,
            "defaultValue": {
                "r": 1,
                "g": 0,
                "b": 0
            }
        },
        {
            "name": "amount",
            "type": 1,
            "defaultValue": 0.25
        }
    ],
    "disableOptimization": false
}

----------------------------------------

TITLE: Accessing glTF Morph Targets
DESCRIPTION: Shows how to access and modify morph target influences from a loaded glTF file.

LANGUAGE: javascript
CODE:
console.log(mesh.morphTargetManager);
myInfluence = mesh.morphTargetManager.getTarget(key);

----------------------------------------

TITLE: Fur Material Texture Application
DESCRIPTION: Implementation of height and diffuse textures for fur material effects.

LANGUAGE: javascript
CODE:
furMaterial.heightTexture = new BABYLON.Texture("speckles.jpg", scene);
furMaterial.diffuseTexture = new BABYLON.Texture("leopard_fur.jpg", scene);

----------------------------------------

TITLE: Installing Local Web Server
DESCRIPTION: Command to globally install a simple local web server using npm

LANGUAGE: bash
CODE:
npm -g install local-web-server

----------------------------------------

TITLE: Enabling Inspector in Babylon.js Viewer
DESCRIPTION: This HTML snippet shows how to enable the Inspector in Babylon.js Viewer by adding the scene.debug attribute to the babylon tag.

LANGUAGE: html
CODE:
<babylon extends="minimal" scene.debug="true" model="https://playground.babylonjs.com/scenes/Rabbit.babylon"></babylon>

----------------------------------------

TITLE: Markdown Link Example
DESCRIPTION: Shows how to format markdown links in documentation

LANGUAGE: markdown
CODE:
[use markdown](https://guides.github.com/features/mastering-markdown/)

----------------------------------------

TITLE: Fitting Text to Area with Dynamic Texture in Babylon.js
DESCRIPTION: Calculates the appropriate font size to fit text within a given area on a dynamic texture. It uses a temporary texture to measure text width and adjusts the font size accordingly.

LANGUAGE: javascript
CODE:
const DTWidth = planeWidth * 60;
const DTHeight = planeHeight * 60;
const dynamicTexture = new BABYLON.DynamicTexture("DynamicTexture", { width: DTWidth, height: DTHeight }, scene);

const ctx = dynamicTexture.getContext();
const size = 12; //any value will work
ctx.font = size + "px " + font_type;
const textWidth = ctx.measureText(text).width;

const ratio = textWidth / size;

const font_size = Math.floor(DTWidth / ratio);

const font = font_size + "px " + font_type;
dynamicTexture.drawText(text, null, null, font, "#000000", "#ffffff", true);

const mat = new BABYLON.StandardMaterial("mat", scene);
mat.diffuseTexture = dynamicTexture;
plane.material = mat;

----------------------------------------

TITLE: Creating Default Environment in Babylon.js
DESCRIPTION: Basic implementation of default environment setup using createDefaultEnvironment() method, which loads the default environmentSpecular.env file.

LANGUAGE: javascript
CODE:
scene.createDefaultEnvironment();

----------------------------------------

TITLE: Getting Value from GUITextfield in BabylonJS
DESCRIPTION: Method to retrieve the current value of the GUITextfield.

LANGUAGE: javascript
CODE:
getValue() → void

----------------------------------------

TITLE: Implementing SpriteMap in Babylon.js
DESCRIPTION: Creates a sprite map for rendering thousands of animated sprites in 2D/2.5D games. Requires JSON atlas, spritesheet texture, and initialization options.

LANGUAGE: javascript
CODE:
const mySpriteMap = new BABYLON.SpriteMap(name, atlasJSON, spriteSheetTexture, options, scene);

----------------------------------------

TITLE: Merging Meshes with Material Preservation in Babylon.js
DESCRIPTION: Shows how to merge meshes while preserving individual materials using the multiMultiMaterial parameter. This advanced usage allows for more complex combined objects.

LANGUAGE: javascript
CODE:
const house = BABYLON.Mesh.MergeMeshes([box, roof], true, false, null, false, true);

----------------------------------------

TITLE: Animating UFO Sprite in BabylonJS
DESCRIPTION: Creates and configures animation for a UFO sprite using the sprite manager. The animation loops through frames 0-16 with a 125ms delay between frames.

LANGUAGE: javascript
CODE:
const ufo = new BABYLON.Sprite("ufo", spriteManagerUFO);
ufo.playAnimation(0, 16, true, 125);

----------------------------------------

TITLE: Handling Interactive Physics Objects in Colyseus
DESCRIPTION: Manages the state of interactive physics objects (e.g., a box) across the network.

LANGUAGE: typescript
CODE:
export class GameRoom extends Room {
  maxClients = 8;
  boxData = {
    targetId: null,
    position: null,
    quaternion: null,
  };
  //...
  onCreate(options) {
    //...
    this.onMessage("boxUpdate", (client, message) => {
      this.boxData = message;
    });
  }
  onUpdate() {
    this.broadcast("boxUpdate", this.boxData);
    //...
  }
}

----------------------------------------

TITLE: Webpack Chunk Splitting Configuration
DESCRIPTION: Detailed webpack configuration for controlling chunk generation including shader and extension bundling

LANGUAGE: javascript
CODE:
optimization: {
        splitChunks: {
            cacheGroups: {
                webgpuShaders: {
                    name: "webgpu-shaders",
                    chunks: "all",
                    priority: 50,
                    enforce: true,
                    test: (module) => /\/ShadersWGSL\//.test(module.resource),
                },
                webglShaders: {
                    name: "webgl-shaders",
                    chunks: "all",
                    priority: 50,
                    enforce: true,
                    test: (module) => /\/Shaders\//.test(module.resource),
                },
                webgpuExtensions: {
                    name: "webgpu-extensions",
                    chunks: "all",
                    priority: 50,
                    enforce: true,
                    test: (module) => /\/WebGPU\//.test(module.resource),
                },
                babylonBundle: {
                    name: "babylonBundle",
                    chunks: "all",
                    priority: 30,
                    reuseExistingChunk: true,
                    test: (module) => /\/node_modules\/@babylonjs\//.test(module.resource),
                },
            },
        },
        usedExports: true,
        minimize: true,
    }

----------------------------------------

TITLE: Baking and Applying Vertex Animation Textures in Babylon.js
DESCRIPTION: This snippet demonstrates how to bake vertex animations into a texture, create a manager, and apply the animation to a mesh in Babylon.js. It includes loading a mesh, baking the animation, creating a texture, and setting up animation parameters.

LANGUAGE: javascript
CODE:
let baker = null,
  mesh = null;
const animationRanges = [{ from: 1, to: 20, name: "My animation" }];
BABYLON.SceneLoader.ImportMeshAsync("", "https://raw.githubusercontent.com/RaggarDK/Baby/baby/", "arr.babylon", scene, undefined)
  .then((importResult) => {
    mesh = importResult.meshes[0];
    // create the baker helper, so we can generate the texture
    baker = new BABYLON.VertexAnimationBaker(scene, mesh);
    // you can slice the animation here with several animation ranges.
    return baker.bakeVertexData(ranges);
  })
  .then((vertexData) => {
    // we got the vertex data. create the texture from it:
    const vertexTexture = baker.textureFromBakedVertexData(vertexData);
    // create a manager to store it.
    const manager = new BABYLON.BakedVertexAnimationManager(scene);
    // store the texture
    manager.texture = vertexTexture;

    // set the animation parameters. You can change this at any time.
    manager.setAnimationParameters(
      animationRanges[0].from, // initial frame
      animationRanges[0].to, // last frame
      0, // offset
      30, // frames per second
    );

    // associate the manager with the mesh
    mesh.bakedVertexAnimationManager = manager;

    // update the time to play the animation
    scene.registerBeforeRender(() => {
      manager.time += engine.getDeltaTime() / 1000.0;
    });
  });

----------------------------------------

TITLE: Creating Sphere Reticle in BabylonJS
DESCRIPTION: Creates a sphere-based reticle that changes color to indicate pickable objects. The reticle is positioned in front of the camera and is not pickable itself.

LANGUAGE: javascript
CODE:
var reticle = BABYLON.MeshBuilder.CreateSphere("reticle", { segments: 10, diameter: 0.03 }, scene);
var retmat = new BABYLON.StandardMaterial("reticalmaterial", scene);
retmat.emissiveColor = BABYLON.Color3.Red();
retmat.specularColor = BABYLON.Color3.Black();
reticle.material = retmat;
reticle.isPickable = false;
reticle.position.z = 2;

----------------------------------------

TITLE: Attaching SSAO Pipeline to Multiple Cameras in Babylon.js
DESCRIPTION: Initializes the SSAO rendering pipeline and automatically attaches it to an array of cameras. This method is useful when working with multiple camera views.

LANGUAGE: javascript
CODE:
const ssao = new BABYLON.SSAORenderingPipeline('ssaopipeline', scene, 0.75, [camera1 etc.]);

----------------------------------------

TITLE: Displaying Project File Structure in Windows Shell
DESCRIPTION: Shows the expected file structure after extracting the sample server files to the project directory.

LANGUAGE: shell
CODE:
C:\babylon\public\
C:\babylon\public\index.html
C:\babylon\public\babylonScene.js

C:\babylon\package.json
C:\babylon\readme.md
C:\babylon\server.js
C:\babylon\Windows_NPM_INSTALL.BAT
C:\babylon\Windows_START.BAT

----------------------------------------

TITLE: Retrieving Babylon.js Viewer Instance Using Callbacks
DESCRIPTION: This code shows how to retrieve a Babylon.js Viewer instance using both a basic callback and an observer approach with the viewerManager.

LANGUAGE: javascript
CODE:
// using basic callback
BabylonViewer.viewerManager.onViewerAdded = function (viewer) {
  console.log(viewer);
};

// user observers

BabylonViewer.viewerManager.onViewerAddedObservable.add(function (viewer) {
  console.log(viewer);
});

----------------------------------------

TITLE: Starting Local Web Server
DESCRIPTION: Command to start the local web server

LANGUAGE: bash
CODE:
ws

----------------------------------------

TITLE: Setting Up Cannon.js Physics
DESCRIPTION: Example of setting up Cannon.js physics engine with proper window configuration.

LANGUAGE: javascript
CODE:
import * as cannon from "cannon";

window.CANNON = cannon;
scene.enablePhysics(null, new CannonJSPlugin());

----------------------------------------

TITLE: Inverting Light Ray Direction in Babylon.js Volumetric Light Scattering
DESCRIPTION: Toggles the vertical direction of light rays in the Volumetric Light Scattering effect. When true, rays go downward; when false, rays go upward.

LANGUAGE: javascript
CODE:
vls.invert = true;

----------------------------------------

TITLE: Disposing GUISelect Element in BabylonJS
DESCRIPTION: Method to dispose of the GUISelect element and remove it from the GUI.

LANGUAGE: javascript
CODE:
dispose()

----------------------------------------

TITLE: Creating a GUIText Element in BabylonJS
DESCRIPTION: Constructor for creating a new GUIText element. It takes an id, options object, GUI manager, and an optional append flag.

LANGUAGE: javascript
CODE:
new GUIText(id, options, guimanager, append)

----------------------------------------

TITLE: Creating Textured Village Ground in Babylon.js
DESCRIPTION: Creates a flat ground for the village and applies a texture with alpha channel. Also creates a larger textured ground for the surrounding area using a height map.

LANGUAGE: javascript
CODE:
//Create Village ground
const groundMat = new BABYLON.StandardMaterial("groundMat");
groundMat.diffuseTexture = new BABYLON.Texture("https://assets.babylonjs.com/environments/villagegreen.png");
groundMat.diffuseTexture.hasAlpha = true;

const ground = BABYLON.MeshBuilder.CreateGround("ground", {width:24, height:24});
ground.material = groundMat;

//large ground
const largeGroundMat = new BABYLON.StandardMaterial("largeGroundMat");
largeGroundMat.diffuseTexture = new BABYLON.Texture("https://assets.babylonjs.com/environments/valleygrass.png");

const largeGround = BABYLON.MeshBuilder.CreateGroundFromHeightMap("largeGround", "https://assets.babylonjs.com/environments/villageheightmap.png", 
    {width:150, height:150, subdivisions: 20, minHeight:0, maxHeight: 4});
largeGround.material = largeGroundMat;
largeGround.position.y = -0.01;

----------------------------------------

TITLE: Defining Lamp Extrusion Path in BabylonJS
DESCRIPTION: Creates a 3D path for extruding the lamp post shape, defining the vertical pole and curved top section.

LANGUAGE: javascript
CODE:
const lampPath = [];
lampPath.push(new BABYLON.Vector3(0, 0, 0));
lampPath.push(new BABYLON.Vector3(0, 10, 0));
for(let i = 0; i < 20; i++) {
    lampPath.push(new BABYLON.Vector3(1 + Math.cos(Math.PI - i * Math.PI / 40), 10 + Math.sin(Math.PI - i * Math.PI / 40), 0));
}
lampPath.push(new BABYLON.Vector3(3, 11, 0));

----------------------------------------

TITLE: Applying Lightmaps to Meshes in Babylon.js
DESCRIPTION: This code snippet demonstrates how to apply a baked lightmap to meshes in a Babylon.js scene. It loads a glTF model and assigns the lightmap texture to each mesh.

LANGUAGE: javascript
CODE:
const createScene = function () {
    const scene = new BABYLON.Scene(engine);
    const camera = new BABYLON.ArcRotateCamera("camera", -Math.PI / 2, Math.PI / 2.5, 15, new BABYLON.Vector3(0, 0, 0));
    camera.attachControl(canvas, true);
    const light = new BABYLON.HemisphericLight("light", new BABYLON.Vector3(1, 1, 0));

    BABYLON.SceneLoader.ImportMeshAsync("", "https://yourcdnurl.com/", "yourmodel.glb").then((result) => {
        const lightmapTexture = new BABYLON.Texture("https://yourcdnurl.com/lightmap.jpg", scene);
        result.meshes.forEach((mesh) => {
            if (mesh.material) {
                mesh.material.lightmapTexture = lightmapTexture;
                mesh.material.useLightmapAsShadowmap = true;
            }
        });
    });

    return scene;
};

----------------------------------------

TITLE: Creating a VideoTexture in Babylon.js
DESCRIPTION: This code snippet demonstrates how to create a VideoTexture in Babylon.js, which can be used to apply video as a texture to 3D objects.

LANGUAGE: javascript
CODE:
new BABYLON.VideoTexture("name", "textures/video.ext", scene);

----------------------------------------

TITLE: Defining Fountain Profile in Babylon.js
DESCRIPTION: Creates an array of Vector3 points to define the profile of a fountain. This profile will be used with the CreateLathe method to generate a 3D fountain mesh.

LANGUAGE: javascript
CODE:
const fountainProfile = [
	new BABYLON.Vector3(0, 0, 0),
	new BABYLON.Vector3(10, 0, 0),
	new BABYLON.Vector3(10, 4, 0),
	new BABYLON.Vector3(8, 4, 0),
	new BABYLON.Vector3(8, 1, 0),
	new BABYLON.Vector3(1, 2, 0),
	new BABYLON.Vector3(1, 15, 0),
	new BABYLON.Vector3(3, 17, 0)
];

----------------------------------------

TITLE: Creating Wheels with Textures in BabylonJS
DESCRIPTION: Constructs textured wheels using cylinders with custom materials and UV mapping for realistic appearance.

LANGUAGE: javascript
CODE:
var wheelMaterial = new BABYLON.StandardMaterial("wheel_mat", scene);
var wheelTexture = new BABYLON.Texture("https://i.imgur.com/ZUWbT6L.png", scene);
wheelMaterial.diffuseTexture = wheelTexture;

var faceColors = [];
faceColors[1] = new BABYLON.Color3(0, 0, 0);

var faceUV = [];
faceUV[0] = new BABYLON.Vector4(0, 0, 1, 1);
faceUV[2] = new BABYLON.Vector4(0, 0, 1, 1);

var wheel = BABYLON.MeshBuilder.CreateCylinder("wheel", { diameter: 3, height: 1, tessellation: 24, faceColors: faceColors, faceUV: faceUV }, scene);
wheel.material = wheelMaterial;

wheel.rotation.x = Math.PI / 2;

----------------------------------------

TITLE: Creating Box with Face Materials
DESCRIPTION: Complete example of creating a box with face UV mapping and material application.

LANGUAGE: javascript
CODE:
const options = {
  width: 10,
  height: 3,
  depth: 5,
  faceUV: faceUV,
};

const box = BABYLON.MeshBuilder.CreateBox("box", options, scene);

const mat = new BABYLON.StandardMaterial("mat", scene);
const texture = new BABYLON.Texture("URL of Texture Atlas", scene);
mat.diffuseTexture = texture;
box.material = mat;

----------------------------------------

TITLE: Creating Lens Rendering Pipeline in Babylon.js
DESCRIPTION: Creates and attaches a lens rendering pipeline to a camera with specified parameters for post-processing effects.

LANGUAGE: javascript
CODE:
var lensEffect = new BABYLON.LensRenderingPipeline('lensEffects', parameters, scene, 1.0, camera);

----------------------------------------

TITLE: Defining Canvas Reference in TypeScript for Vue 3
DESCRIPTION: TypeScript code to define the canvas reference in a Vue 3 component.

LANGUAGE: typescript
CODE:
const bjsCanvas = ref<HTMLCanvasElement | null>(null);

----------------------------------------

TITLE: Advanced DOM Configuration with Multiple Parameters
DESCRIPTION: Demonstrates setting multiple configuration parameters including scene debug mode, antialiasing, and external configuration.

LANGUAGE: html
CODE:
<babylon extends="minimal" scene.debug="true" engine.antialiasing="false" model="https://playground.babylonjs.com/scenes/Rabbit.babylon" configuration="http://example.com/viewerConfig.json"></babylon>

----------------------------------------

TITLE: Webpack Configuration for Typescript
DESCRIPTION: Configure Webpack to use TypeScript with Babylon.js ES6 modules.

LANGUAGE: javascript
CODE:
module.exports = {
  resolve: {
    extensions: [".ts", ".js"],
  },
  module: {
    rules: [
      {
        test: /\.tsx?$/,
        loader: "ts-loader",
      },
    ],
  },
};

----------------------------------------

TITLE: Checking Visibility of GUISelect Element
DESCRIPTION: Method to check if the GUISelect element is currently visible.

LANGUAGE: javascript
CODE:
isVisible()

----------------------------------------

TITLE: GUILabel Visibility Methods
DESCRIPTION: Methods for controlling and checking the visibility state of a GUILabel instance.

LANGUAGE: typescript
CODE:
setVisible(bool: boolean, fade: boolean): void;
isVisible(): boolean;
dispose(): void;

----------------------------------------

TITLE: Creating a Sphere with Physics Impostor in Babylon.js V1
DESCRIPTION: This snippet demonstrates how to create a sphere with physics properties using the PhysicsImpostor in Babylon.js V1. It sets up a sphere mesh and applies physics properties such as mass, friction, and restitution.

LANGUAGE: javascript
CODE:
const sphere = BABYLON.MeshBuilder.CreateSphere("sphere", { diameter: 2, segments: 32 }, scene);
const impostor = new BABYLON.PhysicsImpostor(sphere, BABYLON.PhysicsImpostor.SphereImpostor, { mass: 1, friction: 0.2, restitution: 0.3 }, scene);

----------------------------------------

TITLE: Creating GUI Text Header
DESCRIPTION: Adds a text block header to the GUI panel

LANGUAGE: javascript
CODE:
const header = new BABYLON.GUI.TextBlock();
header.text = "Night to Day";
header.height = "30px";
header.color = "white";
panel.addControl(header);

----------------------------------------

TITLE: Scaling Box Mesh Using Vector3
DESCRIPTION: Demonstrates scaling a unit cube using a Vector3 object to set all dimensions at once.

LANGUAGE: javascript
CODE:
const box = BABYLON.MeshBuilder.CreateBox("box", {}); //unit cube
box.scaling = new BABYLON.Vector3(2, 1.5, 3);

----------------------------------------

TITLE: Including OBJ File Loader in HTML
DESCRIPTION: This snippet shows how to include the Babylon.js core library and the OBJ File Loader plugin in an HTML file. These script references are necessary to use the OBJ loader functionality.

LANGUAGE: html
CODE:
<script src="babylon.js"></script>
<script src="babylon.objFileLoader.js"></script>

----------------------------------------

TITLE: Enabling Snapshot Rendering in Babylon.js
DESCRIPTION: Demonstrates how to enable snapshot rendering mode in Babylon.js. This code sets the snapshotRendering property of the engine to true, which activates the feature for the next frame.

LANGUAGE: javascript
CODE:
engine.snapshotRendering = true;

----------------------------------------

TITLE: Setting up Physics and Scene Objects in BabylonJS
DESCRIPTION: Initializes the physics engine, creates a ground plane, and adds an interactive box object to the scene.

LANGUAGE: javascript
CODE:
scene.enablePhysics(new BABYLON.Vector3(0, -10, 0), new AmmoJSPlugin(true, Ammo));
var ground = BABYLON.MeshBuilder.CreateGround("ground1", { width: 160, height: 160, subdivisions: 2 }, scene);
ground.position.y = -5;
ground.physicsImpostor = new BABYLON.PhysicsImpostor(ground, BABYLON.PhysicsImpostor.BoxImpostor, { mass: 0, friction: 0.5, restitution: 0.7 }, scene);

var box = BABYLON.MeshBuilder.CreateBox("box", { size: 2 }, scene);
box.position.y = 1;
box.physicsImpostor = new BABYLON.PhysicsImpostor(box, BABYLON.PhysicsImpostor.BoxImpostor, { mass: 1, restitution: 0.9 }, scene);
box.material = new BABYLON.StandardMaterial("s-mat", scene);
box.material.diffuseColor = new BABYLON.Color3(0, 0, 1);
box.material.emissiveTexture = new BABYLON.Texture("./src/grass.png", scene);

----------------------------------------

TITLE: Initializing Lens Effect Parameters in Babylon.js
DESCRIPTION: Defines the configuration parameters for the lens rendering pipeline, controlling effects like edge blur and chromatic aberration.

LANGUAGE: javascript
CODE:
var parameters = {
  edge_blur: 1.0,
  chromatic_aberration: 1.0,
  distortion: 1.0,
  // etc.
};

----------------------------------------

TITLE: Installing Babylon.js Viewer via NPM
DESCRIPTION: Command to install the Babylon.js Viewer package using NPM package manager

LANGUAGE: bash
CODE:
npm install @babylonjs/viewer

----------------------------------------

TITLE: TypeScript Configuration
DESCRIPTION: Basic TypeScript configuration for a Babylon.js project.

LANGUAGE: json
CODE:
{
    "compilerOptions": {
        "module": "esNext",
        "target": "es5",
        "moduleResolution": "node",
    }
}

----------------------------------------

TITLE: Applying CubeTexture to Skybox
DESCRIPTION: Sets up the cube texture for the skybox using a specific directory of images.

LANGUAGE: javascript
CODE:
skyboxMaterial.reflectionTexture = new BABYLON.CubeTexture("textures/skybox", scene);
skyboxMaterial.reflectionTexture.coordinatesMode = BABYLON.Texture.SKYBOX_MODE;

----------------------------------------

TITLE: Implementing Custom Shadow Culling in Babylon.js
DESCRIPTION: Shows how to implement custom culling strategy for cascade shadow maps using getCustomRenderList.

LANGUAGE: typescript
CODE:
let rtt = csmShadowGenerator.getShadowMap();

rtt.getCustomRenderList = (layer, renderList, renderListLength) => {
  let meshList = [];
  // here do the culling for the cascade with index 'layer' by using the
  // getCascadeViewMatrix(layer), getCSMTransformMatrix(layer), getCascadeMinExtents(layer), etc
  // from csmShadowGenerator
  return meshList;
};

----------------------------------------

TITLE: Initializing MatrixCloner in BabylonJS
DESCRIPTION: Creates a new MatrixCloner instance that generates a 5x5x5 grid of clones from the given meshes. The cloner creates alternating copies of cube1 and cube2 in the specified pattern.

LANGUAGE: javascript
CODE:
const mc = new BABYLONX.MatrixCloner([cube1, cube2], demo.scene, { mcount: { x: 5, y: 5, z: 5 } });

----------------------------------------

TITLE: Disposing GUIRadio in BabylonJS
DESCRIPTION: Method to dispose of the GUIRadio element and remove it from the GUI.

LANGUAGE: javascript
CODE:
dispose() → void

----------------------------------------

TITLE: Stopping Babylon.js Video Recording Early
DESCRIPTION: This code demonstrates how to stop a video recording of a Babylon.js scene before the default duration has elapsed.

LANGUAGE: javascript
CODE:
if (BABYLON.VideoRecorder.IsSupported(engine)) {
    var recorder = new BABYLON.VideoRecorder(engine);
    recorder.startRecording();
    setTimeout(() => {
        recorder.stopRecording()
    }, 500);
}

----------------------------------------

TITLE: Implementing Water Material Controller for Babylon.js
DESCRIPTION: This TypeScript code defines a WaterMaterialController class that extends Babylon.js WaterMaterial. It handles the initialization, cloning, serialization, and parsing of water material properties exported from Unity. The controller also manages water-related mesh tags and rendering.

LANGUAGE: javascript
CODE:
module BABYLON {
    export class WaterMaterialController extends BABYLON.WaterMaterial {
        constructor(name: string, scene: Scene, public renderTargetSize: Vector2 = new Vector2(512, 512)) {
            super(name, scene, renderTargetSize);
            this.initializeInstance();
        }

        protected start() :void {
            const meshes:BABYLON.Mesh[] = this.getScene().getMeshesByTags(this.getWaterTagLabel());
            if (meshes != null && meshes.length > 0) {
                meshes.forEach(mesh => {
                    this.addToRenderList(mesh);
                });
            }
        }

        /* Shader Material Water Tag Functions */

        private _waterTagLabel:string = "WATER_TAG_0";
        protected getWaterTagLabel():string {
            return this._waterTagLabel;
        }
        protected setWaterTagIndex(index:number) : void {
            const tagIndex = (index >= 0) ? index : 0;
            this._waterTagLabel = "WATER_TAG_" + tagIndex.toString();
        }

        /* Shader Material Factory Class Functions */

        public clone(name: string): BABYLON.WaterMaterialController {
            return BABYLON.SerializationHelper.Clone(() => new BABYLON.WaterMaterialController(name, this.getScene()), this);
        }

        public serialize(): any {
            const serializationObject = BABYLON.SerializationHelper.Serialize(this);
            serializationObject.customType = "BABYLON.WaterMaterialController";
            return serializationObject;
        }

        public static Parse(source: any, scene: BABYLON.Scene, rootUrl: string): BABYLON.WaterMaterialController {
            const material =  BABYLON.SerializationHelper.Parse(() => new BABYLON.WaterMaterialController(source.name, scene), source, scene, rootUrl);
            let property = "_Properties";
            // Parse custom shader properties
            if (source.vectors4) {
                property = "_WaterColor";
                if (source.vectors4[property]) {
                    material.waterColor = BABYLON.Color3.FromArray(source.vectors4[property]);
                }
                property = "_SecondColor";
                if (source.vectors4[property]) {
                    material.waterColor2 = BABYLON.Color3.FromArray(source.vectors4[property]);
                }
            }
            if (source.floats) {
                let tagIndex:number = 0;
                property = "_TagIndex";
                if (source.floats[property]) {
                    tagIndex = source.floats[property];
                }
                if (tagIndex <= 0) tagIndex = 0;
                material.setWaterTagIndex(tagIndex);

                property = "_WindForce";
                if (source.floats[property]) {
                    material.windForce = source.floats[property];
                }
                property = "_WaveSpeed";
                if (source.floats[property]) {
                    material.waveSpeed = source.floats[property];
                }
                property = "_WaveLength";
                if (source.floats[property]) {
                    material.waveLength = source.floats[property];
                }
                property = "_WaveHeight";
                if (source.floats[property]) {
                    material.waveHeight = source.floats[property];
                }
                property = "_BumpHeight";
                if (source.floats[property]) {
                    material.bumpHeight = source.floats[property];
                }
                property = "_ColorBlendFactor";
                if (source.floats[property]) {
                    material.colorBlendFactor = source.floats[property];
                }
                property = "_SecondBlendFactor";
                if (source.floats[property]) {
                    material.colorBlendFactor2 = source.floats[property];
                }

                let windDirX:number = 0.0;
                let windDirY:number = 1.0;
                property = "_WindDirectionX";
                if (source.floats[property]) {
                    windDirX = source.floats[property];
                }
                property = "_WindDirectionY";
                if (source.floats[property]) {
                    windDirY = source.floats[property];
                }
                material.windDirection = new BABYLON.Vector2(windDirX, windDirY);
            }
            return material;
        }
    }
}

----------------------------------------

TITLE: Adding Glow Layer Effect in Babylon.js
DESCRIPTION: Creates a glow layer to add visual emphasis to objects in the scene, particularly useful for dark environments.

LANGUAGE: javascript
CODE:
const gl = new GlowLayer("glow", scene);
gl.intensity = 0.4;

----------------------------------------

TITLE: Registering Callback for New Lights in Babylon.js
DESCRIPTION: This code shows how to register a callback function that will be called when a new light is added to the scene, allowing for automatic configuration of layer masks for new lights.

LANGUAGE: javascript
CODE:
scene.onNewLightAdded = onNewLight;

onNewLight = function (newLight, positionInArray, scene) {
  newLight.excludeWithLayerMask = 0x10000000;
};

----------------------------------------

TITLE: GUI Implementation for Game States
DESCRIPTION: Setup of fullscreen UI elements and button controls for game state transitions

LANGUAGE: javascript
CODE:
const guiMenu = AdvancedDynamicTexture.CreateFullscreenUI("UI");
guiMenu.idealHeight = 720;

const startBtn = Button.CreateSimpleButton("start", "PLAY");
startBtn.width = 0.2;
startBtn.height = "40px";
startBtn.color = "white";
startBtn.top = "-14px";
startBtn.thickness = 0;
startBtn.verticalAlignment = Control.VERTICAL_ALIGNMENT_BOTTOM;
guiMenu.addControl(startBtn);

startBtn.onPointerDownObservable.add(() => {
    this._goToCutScene();
    scene.detachControl();
});

----------------------------------------

TITLE: Implementing Dynamic Watch Face in Babylon.js
DESCRIPTION: This snippet shows how to create a dynamic watch face using Babylon.js GUI and a coroutine mechanism to update the displayed time.

LANGUAGE: typescript
CODE:
private _createWatchFace(): void {
    const watchFace = GUI.AdvancedDynamicTexture.CreateForMesh(this._scene.getMeshByName("Watch Face"));
    const timeText = new GUI.TextBlock();
    timeText.fontSize = 350;
    timeText.color = "white";
    watchFace.addControl(timeText);

    let lastTime = "";
    this._scene.onBeforeRenderObservable.add(() => {
        const date = new Date();
        const hours = date.getHours().toString().padStart(2, "0");
        const minutes = date.getMinutes().toString().padStart(2, "0");
        const currentTime = `${hours}:${minutes}`;
        if (currentTime !== lastTime) {
            lastTime = currentTime;
            timeText.text = currentTime;
        }
    });
}

----------------------------------------

TITLE: Applying Texture Material to Mesh in BabylonJS
DESCRIPTION: Creates a StandardMaterial and applies a texture to it, then assigns the material to the mesh. This enables the different front and back textures to be displayed.

LANGUAGE: javascript
CODE:
const mat = new BABYLON.StandardMaterial("", scene);
mat.diffuseTexture = new BABYLON.Texture("URL to Image File", scene);
plane.material = mat;

----------------------------------------

TITLE: Creating a Basic Babylon.js Scene in TypeScript
DESCRIPTION: This TypeScript code creates a basic Babylon.js scene with a canvas, camera, light, and a sphere. It also includes functionality to toggle the debug layer with a keyboard shortcut.

LANGUAGE: typescript
CODE:
import "@babylonjs/core/Debug/debugLayer";
import "@babylonjs/inspector";
import "@babylonjs/loaders/glTF";
import { Engine, Scene, ArcRotateCamera, Vector3, HemisphericLight, Mesh, MeshBuilder } from "@babylonjs/core";

class App {
    constructor() {
        var canvas = document.createElement("canvas");
        canvas.style.width = "100%";
        canvas.style.height = "100%";
        canvas.id = "gameCanvas";
        document.body.appendChild(canvas);

        var engine = new Engine(canvas, true);
        var scene = new Scene(engine);

        var camera: ArcRotateCamera = new ArcRotateCamera("Camera", Math.PI / 2, Math.PI / 2, 2, Vector3.Zero(), scene);
        camera.attachControl(canvas, true);
        var light1: HemisphericLight = new HemisphericLight("light1", new Vector3(1, 1, 0), scene);
        var sphere: Mesh = MeshBuilder.CreateSphere("sphere", { diameter: 1 }, scene);

        window.addEventListener("keydown", (ev) => {
            if (ev.shiftKey && ev.ctrlKey && ev.altKey && (ev.key === "I" || ev.key === "i")) {
                if (scene.debugLayer.isVisible()) {
                    scene.debugLayer.hide();
                } else {
                    scene.debugLayer.show();
                }
            }
        });

        engine.runRenderLoop(() => {
            scene.render();
        });
    }
}
new App();

----------------------------------------

TITLE: Installing Babylon.js Controls Package
DESCRIPTION: NPM commands to install the required Babylon.js controls and core packages.

LANGUAGE: javascript
CODE:
npm install @babylonjs/controls
npm install @babylonjs/core

----------------------------------------

TITLE: Configuring Specular Over Alpha for glTF Loader in Babylon.js
DESCRIPTION: This code snippet sets the transparencyAsCoverage flag to true for the glTF loader plugin, which is required for 3D Commerce certification. It turns off specular over alpha rendering.

LANGUAGE: javascript
CODE:
SceneLoader.OnPluginActivatedObservable.add((plugin) => {
    if (plugin.name === "gltf") {
        const loader = plugin as GLTFFileLoader;
        loader.transparencyAsCoverage = true;
    }
});

----------------------------------------

TITLE: Stopping Particle Systems with Sub Emitters in Babylon.js
DESCRIPTION: Demonstrates different ways to stop particle systems with sub emitters, including stopping all systems or just the root system.

LANGUAGE: javascript
CODE:
particleSystem.stop(); 

particleSystem.stop(false);

----------------------------------------

TITLE: Implementing HtmlMesh in a Babylon.js Scene
DESCRIPTION: Shows how to use the HtmlMesh extension to incorporate HTML content as a scene mesh or overlay in a Babylon.js project.

LANGUAGE: javascript
CODE:
// Playground URL: https://playground.babylonjs.com/#HVHYJC#5

----------------------------------------

TITLE: Inserting 3D Models in WordPress with Babylon Viewer Shortcode
DESCRIPTION: This snippet demonstrates how to use the Babylon Viewer 3D WordPress plugin shortcode to display 3D models in WordPress posts and pages. The shortcode takes the URL of the 3D file as its content.

LANGUAGE: html
CODE:
[babylon]URL-OF-3D-FILE[/babylon]

----------------------------------------

TITLE: TypeScript Compiler Default Locations
DESCRIPTION: Default file system paths for TypeScript compiler installation on Mac OSX and Windows systems.

LANGUAGE: bash
CODE:
Mac OSX: /usr/local/bin/tsc

Windows: C:\Users\<YourName>\AppData\Roaming\npm\node_modules\typescript\bin\tsc

----------------------------------------

TITLE: Configuring Rocket Particle System in BabylonJS
DESCRIPTION: Sets up the particle system for the rocket trail with specific texture, color, and size gradients.

LANGUAGE: javascript
CODE:
let rocket = new ParticleSystem("rocket", 350, scene);
rocket.particleTexture = new Texture("./textures/flare.png", scene);
rocket.emitter = sphere;
rocket.emitRate = 20;
rocket.minEmitBox = new Vector3(0, 0, 0);
rocket.maxEmitBox = new Vector3(0, 0, 0);
rocket.color1 = new Color4(0.49, 0.57, 0.76);
rocket.color2 = new Color4(0.29, 0.29, 0.66);
rocket.colorDead = new Color4(0, 0, 0.2, 0.5);
rocket.minSize = 1;
rocket.maxSize = 1;
rocket.addSizeGradient(0, 1);
rocket.addSizeGradient(1, 0.01);
this._rocket = rocket;

----------------------------------------

TITLE: Creating Showroom Camera States in Babylon.js
DESCRIPTION: This code demonstrates how to create multiple camera states for a Showroom Camera in Babylon.js, including matchmoving and arc-rotate states.

LANGUAGE: typescript
CODE:
const camera = new ShowroomCamera("camera", this._scene);

camera.addState({
    name: "Overall",
    targetMesh: this._watchMesh,
    parent: this._scene.getTransformNodeByName("Camera Overall")
});

camera.addState({
    name: "Face",
    targetMesh: this._watchMesh,
    parent: this._scene.getTransformNodeByName("Camera Face")
});

camera.addState({
    name: "Band",
    targetMesh: this._watchMesh,
    parent: this._scene.getTransformNodeByName("Camera Band")
});

camera.addState({
    name: "Crown",
    targetMesh: this._watchMesh,
    parent: this._scene.getTransformNodeByName("Camera Crown")
});

const arcRotateState = camera.addArcRotateState({
    name: "Configuration",
    targetMesh: this._watchMesh
});

----------------------------------------

TITLE: Reusing Physics Shape for Complex Model in Babylon.js V2
DESCRIPTION: This snippet shows how to reuse a previously created physics shape for a complex imported model in Babylon.js V2. It demonstrates the advantage of separating shapes and bodies for improved memory usage and customizability.

LANGUAGE: javascript
CODE:
const complexModel = await BABYLON.SceneLoader.ImportMeshAsync(...);
const body = new BABYLON.PhysicsBody(complexModel, BABYLON.PhysicsMotionType.DYNAMIC, false, scene);
body.shape = sphereShape;
body.setMassProperties({mass: complexModelMass});

----------------------------------------

TITLE: Creating and Configuring Mix Material in Babylon.js
DESCRIPTION: This snippet demonstrates how to create a terrain, initialize a Mix Material, set up mix textures and diffuse textures, and apply the material to the terrain in Babylon.js.

LANGUAGE: javascript
CODE:
// Create a terrain
var terrain = BABYLON.Mesh.CreateGroundFromHeightMap("terrain", "heightMap.png", 100, 100, 100, 0, 10, scene, false);

// Create the mix material
var mix = new BABYLON.MixMaterial("mix", scene);

// Mix texture 1 (RGBA) is required
mix.mixTexture1 = new BABYLON.Texture("/playground/textures/mixMap.png", scene);

// Mix texture 2 (RGBA) is optional
mix.mixTexture2 = new BABYLON.Texture("/playground/textures/mixMap_2.png", scene);

// Diffuse textures (RGBA) attached to the "mixTexture1"
mix.diffuseTexture1 = new BABYLON.Texture("/playground/textures/floor.png", scene);
mix.diffuseTexture2 = new BABYLON.Texture("/playground/textures/rock.png", scene);
mix.diffuseTexture3 = new BABYLON.Texture("/playground/textures/grass.png", scene);
mix.diffuseTexture4 = new BABYLON.Texture("/playground/textures/floor.png", scene);

// Diffuse textures (RGBA) attached to the "mixTexture2"
mix.diffuseTexture5 = new BABYLON.Texture("/playground/textures/leopard_fur.jpg", scene);
mix.diffuseTexture6 = new BABYLON.Texture("/playground/textures/fur.jpg", scene);
mix.diffuseTexture7 = new BABYLON.Texture("/playground/textures/sand.jpg", scene);
mix.diffuseTexture8 = new BABYLON.Texture("/playground/textures/crate.png", scene);

// Apply the material
terrain.material = mix;

----------------------------------------

TITLE: Basic State Machine Setup in TypeScript
DESCRIPTION: Initial setup of the state machine with basic scene configuration and state enum definition

LANGUAGE: typescript
CODE:
//...imports here

//enum for states
enum State { START = 0, GAME = 1, LOSE = 2, CUTSCENE = 3 }

class App {
    private _scene: Scene;
    private _canvas: HTMLCanvasElement;
    private _engine: Engine;
    private _state: number = 0;

    constructor() {
        this._canvas = this._createCanvas();
        this._engine = new Engine(this._canvas, true);
        this._scene = new Scene(this._engine);

        var camera: ArcRotateCamera = new ArcRotateCamera("Camera", Math.PI / 2, Math.PI / 2, 2, Vector3.Zero(), this._scene);
        camera.attachControl(this._canvas, true);
        var light1: HemisphericLight = new HemisphericLight("light1", new Vector3(1, 1, 0), this._scene);
        var sphere: Mesh = MeshBuilder.CreateSphere("sphere", { diameter: 1 }, this._scene);

        window.addEventListener("keydown", (ev) => {
            if (ev.shiftKey && ev.ctrlKey && ev.altKey && ev.keyCode === 73) {
                if (this._scene.debugLayer.isVisible()) {
                    this._scene.debugLayer.hide();
                } else {
                    this._scene.debugLayer.show();
                }
            }
        });

        this._engine.runRenderLoop(() => {
            this._scene.render();
        });
    }
}
new App();

----------------------------------------

TITLE: Character Movement Sound Management in JavaScript
DESCRIPTION: Implements an observable pattern to handle character running sound effects with Safari compatibility fixes. Includes sound state management and proper cleanup.

LANGUAGE: javascript
CODE:
this.onRun.add((play) => {
  if (play && !this._walkingSfx.isPlaying) {
    this._walkingSfx.play();
  } else if (!play && this._walkingSfx.isPlaying) {
    this._walkingSfx.stop();
    this._walkingSfx.isPlaying = false; // make sure that walkingsfx.stop is called only once
  }
});

----------------------------------------

TITLE: Installing Babylon.js Timeline Dependencies
DESCRIPTION: NPM commands to install the required Babylon.js controls and core packages

LANGUAGE: bash
CODE:
npm install @babylonjs/controls
npm install @babylonjs/core

----------------------------------------

TITLE: Installing Babylon.js Controls and Core
DESCRIPTION: NPM commands to install the Babylon.js controls package and its peer dependency, the Babylon.js core package. It also includes instructions for installing preview versions.

LANGUAGE: bash
CODE:
npm install @babylonjs/controls
npm install @babylonjs/core

# For preview versions:
npm install @babylonjs/controls@preview
npm install @babylonjs/core@preview

----------------------------------------

TITLE: Setting Full Mass Properties for a Physics Body in Babylon.js
DESCRIPTION: Demonstrates setting all mass properties for a physics body in Babylon.js, including mass, center of mass, inertia, and inertia orientation. This level of detail should only be used when necessary.

LANGUAGE: javascript
CODE:
const body = new BABYLON.PhysicsBody(sphere, BABYLON.PhysicsMotionType.DYNAMIC, false, scene);
body.setMassProperties({
  mass: 1,
  centerOfMass: new BABYLON.Vector3(0, 1, 0),
  inertia: new BABYLON.Vector3(1, 1, 1),
  inertiaOrientation: new BABYLON.Quaternion(0, 0, 0, 1)
});

----------------------------------------

TITLE: Creating XML Layouts for Babylon.js GUI
DESCRIPTION: This snippet shows the structure of XML layouts for Babylon.js GUI, including examples of various controls like Rectangle, Button, Image, and Grid.

LANGUAGE: xml
CODE:
<?xml version="1.0"?>
<root>
    <Rectangle id="firstContainer" verticalAlignment="Control.HORIZONTAL_ALIGNMENT_TOP" background="yellow" width=".8" height=".4" color="Orange">
        <Button id="imageButton" name="imageButton" width="0.2" background="red" height="0.3">
                <Image id="image" source="assets/icon.png" width="1" height="1" name="image" stretch="Image.STRETCH_FILL" horizontalAlignment="Control.HORIZONTAL_ALIGNMENT_LEFT" />
        </Button>
    </Rectangle>
</root>

LANGUAGE: xml
CODE:
<Grid id="grid" name="grid" top="50px" background="black" height="200px" width="200px">
        <Row height="0.5" >
            <Column width="0.2">
            </Column>
            <Column width="0.5">
                <Rectangle id="1rect" thickness="0" name="1rect" background="green"></Rectangle>
            </Column>
        </Row>
        <Row height="0.5">
            <Column>
            </Column>
            <Column>
                <Rectangle id="2rect" thickness="0" name="2rect" background="red" ></Rectangle>
            </Column>
        </Row>
</Grid>

----------------------------------------

TITLE: Updating GUIProgress Value in BabylonJS
DESCRIPTION: Method to set the current value of the progress bar GUI element.

LANGUAGE: javascript
CODE:
updateValue(int) → void

----------------------------------------

TITLE: Dev Host Scene Creation Example
DESCRIPTION: Example of creating a 3D scene in the Babylon.js dev host environment

LANGUAGE: javascript
CODE:
import { canvas, engine } from "./index";
import "@dev/loaders";
import { Inspector } from "@dev/inspector";
import { ArcRotateCamera, CubeTexture, Scene, SceneLoader } from "@dev/core";
import { AdvancedDynamicTexture, Button } from "@dev/gui";

export const createScene = async function () {
    const scene = new Scene(engine);
    scene.createDefaultCameraOrLight(true);
    const hdrTexture = new CubeTexture("https://playground.babylonjs.com/textures/SpecularHDR.dds", scene);
    scene.createDefaultSkybox(hdrTexture, true, 10000);

    SceneLoader.AppendAsync("https://assets.babylonjs.com/meshes/webp/", "webp.gltf", scene, function (_newMeshes) {
        scene.activeCamera!.attachControl(canvas, false);
        (scene.activeCamera as ArcRotateCamera).radius = 80;
    });

    const advancedTexture = AdvancedDynamicTexture.CreateFullscreenUI("UI");

    const button1 = Button.CreateSimpleButton("but1", "Click Me");
    button1.width = "150px"
    button1.height = "40px";
    button1.color = "white";
    button1.cornerRadius = 20;
    button1.background = "green";
    button1.onPointerUpObservable.add(function() {
        alert("you did it!");
    });
    advancedTexture.addControl(button1);

    Inspector.Show(scene, {});

    return scene;
};

----------------------------------------

TITLE: Installing heyVR SDK via NPM
DESCRIPTION: Command to install the heyVR SDK package through NPM package manager.

LANGUAGE: bash
CODE:
npm i @heyvr/sdk-gameplay

----------------------------------------

TITLE: Checking GUIText Visibility in BabylonJS
DESCRIPTION: Method to check if a GUIText element is currently visible.

LANGUAGE: javascript
CODE:
isVisible(e) → void

----------------------------------------

TITLE: Adding Controls to Grid in BabylonJS
DESCRIPTION: Positions buttons within the grid layout for mobile controls

LANGUAGE: javascript
CODE:
actionGrid.addControl(dashBtn, 0, 1);
actionGrid.addControl(jumpBtn, 1, 0);

----------------------------------------

TITLE: Installing NPM Dependencies
DESCRIPTION: Command to install all NPM dependencies for the repository packages

LANGUAGE: bash
CODE:
npm install

----------------------------------------

TITLE: Implementing Game Timer Updates in BabylonJS
DESCRIPTION: Updates the game timer display by calculating elapsed time and formatting it according to game world time where 4 real minutes equals 1 game hour.

LANGUAGE: javascript
CODE:
if (!this._stopTimer && this._startTime != null) {
    let curTime = Math.floor((new Date().getTime() - this._startTime) / 1000) + this._prevTime;
    this.time = curTime;
    this._clockTime.text = this._formatTime(curTime);
}

----------------------------------------

TITLE: Creating Gradient Material in Babylon.js
DESCRIPTION: Creates a sphere with a gradient material that transitions smoothly between two colors. The example demonstrates setting up the mesh, creating the gradient material, configuring colors, and applying offset properties.

LANGUAGE: javascript
CODE:
var sphere = BABYLON.MeshBuilder.CreateSphere("sphere", { segments: 32, diameter: 2 }, scene);

var gradientMaterial = new BABYLON.GradientMaterial("grad", scene);
gradientMaterial.topColor = BABYLON.Color3.Red(); // Set the gradient top color
gradientMaterial.bottomColor = BABYLON.Color3.Blue(); // Set the gradient bottom color
gradientMaterial.offset = 0.25;

sphere.material = gradientMaterial;

----------------------------------------

TITLE: Optimizing Glow Layer in BabylonJS
DESCRIPTION: Demonstrates how to limit glow layer effects to specific meshes (lanterns) to reduce draw calls by adding only required meshes to the included list.

LANGUAGE: javascript
CODE:
this._environment._lanternObjs.forEach((lantern) => {
    gl.addIncludedOnlyMesh(lantern.mesh);
});

----------------------------------------

TITLE: Animation Block Implementation
DESCRIPTION: Block for playing animations and animation groups with various control options.

LANGUAGE: javascript
CODE:
// option 1 - use animation
const someAnimation = new Animation("someAnimation", "position.x", 30, Animation.ANIMATIONTYPE_FLOAT, Animation.ANIMATIONLOOPMODE_CYCLE);
const playAnimation = new FlowGraphPlayAnimationBlock();
playAnimation.animation.setValue(someAnimation, ctx);
playAnimation.object.setValue(mesh, ctx);
playAnimation.done.connectTo(nextBlock.in);

// option 2 - use animation group
const someAnimationGroup = new AnimationGroup("someAnimationGroup");
const playAnimationGroup = new FlowGraphPlayAnimationBlock();
playAnimationGroup.animationGroup.setValue(someAnimationGroup, ctx);
playAnimationGroup.done.connectTo(nextBlock.in);

----------------------------------------

TITLE: Applying Gravity to Character in Babylon.js
DESCRIPTION: Implements gravity for the character. It checks if the character is grounded, applies gravity when in air, and limits the falling speed.

LANGUAGE: typescript
CODE:
if (!this._isGrounded()) {
    this._gravity = this._gravity.addInPlace(Vector3.Up().scale(this._deltaTime * Player.GRAVITY));
    this._grounded = false;
}

if (this._gravity.y < -Player.JUMP_FORCE) {
    this._gravity.y = -Player.JUMP_FORCE;
}
this.mesh.moveWithCollisions(this._moveDirection.addInPlace(this._gravity));

if (this._isGrounded()) {
    this._gravity.y = 0;
    this._grounded = true;
    this._lastGroundPos.copyFrom(this.mesh.position);
}

----------------------------------------

TITLE: Enabling Logging in Flow Graph Context
DESCRIPTION: Demonstrates how to enable verbose logging for a Flow Graph context and access the logger.

LANGUAGE: javascript
CODE:
const ctx = graph.createContext();
ctx.enableLogging = true;

ctx.logger !== undefined;

ctx.logger.logToConsole = false;

// the array of actions
console.log(ctx.logger.log);

----------------------------------------

TITLE: Creating Resized Texture with Babylon.js Resizer
DESCRIPTION: JavaScript code showing how to use the Resizer control to create a resized Babylon.js texture from an image, video frame, or canvas content.

LANGUAGE: javascript
CODE:
const texture = resizer.getResizedTexture(imageToResize, { width: 128, height: 100 });

----------------------------------------

TITLE: Setting Center Reflection with Fresnel Parameters
DESCRIPTION: Configures Fresnel parameters to apply reflection in the center of objects by inverting the left and right colors.

LANGUAGE: javascript
CODE:
material.reflectionFresnelParameters.leftColor = BABYLON.Color3.Black();
material.reflectionFresnelParameters.rightColor = BABYLON.Color3.White();

----------------------------------------

TITLE: Creating Flow Graph
DESCRIPTION: Creates a new flow graph instance using the coordinator.

LANGUAGE: javascript
CODE:
const graph = coordinator.createGraph();

----------------------------------------

TITLE: Generating a Data Map
DESCRIPTION: Example of generating a data map using simplex noise.

LANGUAGE: javascript
CODE:
const mapSubX = 1000;
const mapSubZ = 800;
const seed = 0.3;
noise.seed(seed);
const mapData = new Float32Array(mapSubX * mapSubZ * 3);
for (let l = 0; l < mapSubZ; l++) {
  for (let w = 0; w < mapSubX; w++) {
    const x = (w - mapSubX * 0.5) * 5.0;
    const z = (l - mapSubZ * 0.5) * 2.0;
    const y = noise.simplex2(x, z);

    mapData[3 * (l * mapSubX + w)] = x;
    mapData[3 * (l * mapSubX + w) + 1] = y;
    mapData[3 * (l * mapSubX + w) + 2] = z;
  }
}

----------------------------------------

TITLE: Creating Engine Without Smoothing
DESCRIPTION: Creates a Babylon.js engine instance with built-in WebGL smoothing disabled, useful when using anti-aliasing with alpha tested meshes.

LANGUAGE: javascript
CODE:
engine = new BABYLON.Engine(canvas, false);

----------------------------------------

TITLE: Creating GUISlider Constructor in BabylonJS
DESCRIPTION: Constructor for creating a new GUI slider element with customizable options. Takes parameters for ID, options object, GUI manager instance, optional callback function, and append setting.

LANGUAGE: typescript
CODE:
new GUISlider(id: string, options: any, guimanager: GUIManager, callback?: () => void, append?: boolean)

----------------------------------------

TITLE: Handling Hotspot Updates in React Component
DESCRIPTION: Sets up an event listener to handle updates to hotspot positions in the 3D experience and update the React component state.

LANGUAGE: JavaScript
CODE:
const hotspotDefinitions = [
    { id: "sole", label: "Sole" },
    { id: "laces", label: "Laces" },
    { id: "upper", label: "Upper" },
    { id: "liner", label: "Liner" },
    { id: "toeCap", label: "Toe Cap" },
    { id: "tongue", label: "Tongue" },
    { id: "foxing", label: "Foxing" }
];

----------------------------------------

TITLE: Installing TypeScript Compiler Commands
DESCRIPTION: Terminal commands for installing TypeScript globally on Mac OSX and Windows systems using npm.

LANGUAGE: bash
CODE:
Mac OSX: sudo npm install -g typescript

Windows: npm install -g typescript

----------------------------------------

TITLE: Enabling WebXR Teleportation Feature
DESCRIPTION: Demonstrates how to manually enable the teleportation feature with custom configuration options.

LANGUAGE: javascript
CODE:
const featuresManager = xr.baseExperience.featuresManager;
featuresManager.enableFeature(WebXRFeatureName.TELEPORTATION, "stable", {
  xrInput: xr.input,
  floorMeshes: [ground, secondFloor, thirdFloor],
});

----------------------------------------

TITLE: Creating Grid Layout for Mobile Controls in BabylonJS
DESCRIPTION: Sets up a grid system for positioning mobile control buttons using BabylonJS GUI

LANGUAGE: javascript
CODE:
const actionGrid = new Grid();
actionGrid.addColumnDefinition(0.5);
actionGrid.addColumnDefinition(0.5);
actionGrid.addRowDefinition(0.5);
actionGrid.addRowDefinition(0.5);
actionContainer.addControl(actionGrid);

----------------------------------------

TITLE: Setting Up Character Animations in BabylonJS
DESCRIPTION: This code snippet demonstrates how to set up character animations in a BabylonJS game. It stops all animations, sets looping for specific animations, and initializes current and previous animations.

LANGUAGE: javascript
CODE:
this.scene.stopAllAnimations();
this._run.loopAnimation = true;
this._idle.loopAnimation = true;
//initialize current and previous
this._currentAnim = this._idle;
this._prevAnim = this._land;

----------------------------------------

TITLE: Registering Custom Material for Babylon.js File Loader (JavaScript)
DESCRIPTION: This snippet shows how to register a custom material class with Babylon.js file loader to enable loading from .babylon files.

LANGUAGE: javascript
CODE:
Tools.RegisteredExternalClasses["MyMaterial"] = MyMaterial;

----------------------------------------

TITLE: Disabling a View in Babylon.js
DESCRIPTION: Demonstrates how to disable a view in Babylon.js v5 and later. This can improve performance when certain canvases are offscreen.

LANGUAGE: javascript
CODE:
view.enabled = false;

----------------------------------------

TITLE: Customizing Normal Material with Diffuse Texture in Babylon.js
DESCRIPTION: This snippet shows how to add a diffuse texture to the Normal Material in Babylon.js. The normal colors will be mixed with the texture color, allowing for further customization of the material's appearance.

LANGUAGE: javascript
CODE:
normalMaterial.diffuseTexture = new BABYLON.Texture("textures/amiga.jpg", scene);

----------------------------------------

TITLE: Complete Background Material Setup
DESCRIPTION: Comprehensive example showing multiple background material features including diffuse texture, mirror reflection, and fresnel effects

LANGUAGE: javascript
CODE:
backgroundMaterial = new BABYLON.BackgroundMaterial("backgroundMaterial", scene);
backgroundMaterial.diffuseTexture = new BABYLON.Texture("https://assets.babylonjs.com/environments/backgroundGround.png", scene);
backgroundMaterial.diffuseTexture.hasAlpha = true;
backgroundMaterial.opacityFresnel = false;
backgroundMaterial.shadowLevel = 0.4;

mirror = new BABYLON.MirrorTexture("mirror", 512, scene);
mirror.mirrorPlane = new BABYLON.Plane(0, -1, 0, 0);
mirror.renderList.push(sphere);
backgroundMaterial.reflectionTexture = mirror;
backgroundMaterial.reflectionFresnel = true;
backgroundMaterial.reflectionStandardFresnelWeight = 0.8;

ground.material = backgroundMaterial;

----------------------------------------

TITLE: Setting Visibility of GUISelect Element
DESCRIPTION: Method to set the visibility of the GUISelect element, with an optional fade effect.

LANGUAGE: javascript
CODE:
setVisible(bool, fade)

----------------------------------------

TITLE: Resetting Rotation Quaternion in Babylon.js
DESCRIPTION: When importing meshes that have a rotationQuaternion set, it's necessary to reset it to null before applying a new rotation. This ensures proper rotation behavior for imported assets in Babylon.js scenes.

LANGUAGE: javascript
CODE:
mesh.rotationQuaternion = null;

----------------------------------------

TITLE: Creating the SSR Rendering Pipeline
DESCRIPTION: Demonstrates how to create an instance of the SSR rendering pipeline in Babylon.js. The pipeline requires a scene, camera, and optional parameters for customization.

LANGUAGE: JavaScript
CODE:
const ssr = new BABYLON.SSRRenderingPipeline(
  "ssr", // The name of the pipeline
  scene, // The scene to which the pipeline belongs
  [scene.activeCamera], // The list of cameras to attach the pipeline to
  false, // Whether or not to use the geometry buffer renderer (default: false, use the pre-pass renderer)
  BABYLON.Constants.TEXTURETYPE_UNSIGNED_BYTE, // The texture type used by the SSR effect (default: TEXTURETYPE_UNSIGNED_BYTE)
);

----------------------------------------

TITLE: Setting GUIProgress Visibility in BabylonJS
DESCRIPTION: Method to set the visibility of the progress bar GUI element, with an optional fade effect.

LANGUAGE: javascript
CODE:
setVisible(bool, fade) → void

----------------------------------------

TITLE: Pre-fetching Configuration Assets in JavaScript
DESCRIPTION: This code demonstrates a technique for pre-fetching large configuration assets using the JavaScript fetch API to improve loading performance.

LANGUAGE: javascript
CODE:
fetch("https://syntheticmagus.github.io/vaporwear-assets/studs.glb");
fetch("https://syntheticmagus.github.io/vaporwear-assets/materials.glb");

----------------------------------------

TITLE: Creating AssetContainer in Babylon.js
DESCRIPTION: Demonstrates how to create a new AssetContainer instance linked to a scene.

LANGUAGE: javascript
CODE:
const container = new BABYLON.AssetContainer(scene);

----------------------------------------

TITLE: Customizing Fire Animation Speed in Babylon.js
DESCRIPTION: Adjusts the speed of the fire animation effect by modifying the speed property of the fire material. The default speed value is 1.0.

LANGUAGE: javascript
CODE:
fireMaterial.speed = 5.0; // Default is 1.0

----------------------------------------

TITLE: Basic Babylon.js Scene Setup
DESCRIPTION: Set up a basic Babylon.js scene with a sphere and ground using ES6 imports.

LANGUAGE: javascript
CODE:
import { FreeCamera } from "@babylonjs/core/Cameras/freeCamera";
import { Engine } from "@babylonjs/core/Engines/engine";
import { HemisphericLight } from "@babylonjs/core/Lights/hemisphericLight";
import { Vector3 } from "@babylonjs/core/Maths/math.vector";
import { CreateGround } from "@babylonjs/core/Meshes/Builders/groundBuilder";
import { CreateSphere } from "@babylonjs/core/Meshes/Builders/sphereBuilder";
import { Scene } from "@babylonjs/core/scene";

import { GridMaterial } from "@babylonjs/materials/grid/gridMaterial";

const canvas = document.getElementById("renderCanvas");
const engine = new Engine(canvas);
var scene = new Scene(engine);

var camera = new FreeCamera("camera1", new Vector3(0, 5, -10), scene);
camera.setTarget(Vector3.Zero());
camera.attachControl(canvas, true);

var light = new HemisphericLight("light1", new Vector3(0, 1, 0), scene);
light.intensity = 0.7;

var material = new GridMaterial("grid", scene);

var sphere = CreateSphere("sphere1", { segments: 16, diameter: 2 }, scene);
sphere.position.y = 2;
sphere.material = material;

var ground = CreateGround("ground1", { width: 6, height: 6, subdivisions: 2 }, scene);
ground.material = material;

engine.runRenderLoop(() => {
  scene.render();
});

----------------------------------------

TITLE: Registering Intersection Triggers for Player in Babylon.js
DESCRIPTION: This code sets up intersection triggers for the player mesh, handling win conditions and world boundary detection. It uses Babylon.js ActionManager to register actions on specific mesh intersections.

LANGUAGE: javascript
CODE:
this.mesh.actionManager.registerAction(
    new ExecuteCodeAction(
        {
            trigger: ActionManager.OnIntersectionEnterTrigger,
            parameter: this.scene.getMeshByName("destination"),
        },
        () => {
            if (this.lanternsLit == 22) {
                this.win = true;
                this._yTilt.rotation = new Vector3(5.689773361501514, 0.23736477827122882, 0);
                this._yTilt.position = new Vector3(0, 6, 0);
                this.camera.position.y = 17;
            }
        },
    ),
);

this.mesh.actionManager.registerAction(
    new ExecuteCodeAction(
        {
            trigger: ActionManager.OnIntersectionEnterTrigger,
            parameter: this.scene.getMeshByName("ground"),
        },
        () => {
            this.mesh.position.copyFrom(this._lastGroundPos);
        },
    ),
);

----------------------------------------

TITLE: Adding Custom Blocks to Flow Graph Block Factory
DESCRIPTION: Demonstrates how to add custom blocks to the Flow Graph block factory for serialization support.

LANGUAGE: javascript
CODE:
export function blockFactory(blockName: FlowGraphBlockNames | string): () => Promise<typeof FlowGraphBlock> {
  switch (blockName) {
    case FlowGraphBlockNames.PlayAnimation:
      return async () => (await import("./Execution/Animation/flowGraphPlayAnimationBlock")).FlowGraphPlayAnimationBlock;
    // ...
    case FlowGraphBlockNames.MyNewBlock:
      return async () => (await import("./MyNewBlock")).FlowGraphMyNewBlock;
    //...
    default:
    //...
  }
}

export function addToBlockFactory(module: string, blockName: string, factory: () => Promise<typeof FlowGraphBlock>): void {
  customBlocks[`${module}/${blockName}`] = factory;
}

const module = "MyModuleBlocks";
addToBlockFactory(module, "ColorChangerBlock", async () => (await import("./MyNewBlock")).ColorChangerBlock);

----------------------------------------

TITLE: Creating a Custom Observable with Socket.io
DESCRIPTION: Example of creating a custom Observable to handle socket.io connection events in Babylon.js.

LANGUAGE: javascript
CODE:
import { io } from "socket.io-client";

const socket = io("/admin");

const onConnectObservable = new Observable();
const text1 = new BABYLON.GUI.TextBlock();

socket.on("connect", () => {
  onConnectObservable.notifyObservers();
});

onConnectObservable.add(() => {
  text1.text = "Connected";
});

----------------------------------------

TITLE: Optimizing NodeGeometry Evaluation
DESCRIPTION: Demonstrates how to optimize NodeGeometry by disabling context evaluation for certain blocks.

LANGUAGE: javascript
CODE:
myBlock.evaluateContext = false;

----------------------------------------

TITLE: Initializing Havok Physics with Async/Await
DESCRIPTION: Async function to initialize the Havok physics engine using ES modules

LANGUAGE: javascript
CODE:
import HavokPhysics from "@babylonjs/havok";

async function getInitializedHavok() {
  return await HavokPhysics();
}

----------------------------------------

TITLE: Video Mode Configuration in VideoDome
DESCRIPTION: Sets the video mode for different types of 360 videos: monoscopic, side-by-side stereoscopic, or top-bottom stereoscopic.

LANGUAGE: javascript
CODE:
videoDome.videoMode = BABYLON.VideoDome.MODE_MONOSCOPIC;
// or
videoDome.videoMode = BABYLON.VideoDome.MODE_SIDEBYSIDE;
// or
videoDome.videoMode = BABYLON.VideoDome.MODE_TOPBOTTOM;

----------------------------------------

TITLE: Creating GreasedLineRibbon using CreateGreasedLine function in JavaScript
DESCRIPTION: Demonstrates the basic usage of CreateGreasedLine function to create a GreasedLineRibbon. This is the easiest and recommended way to create a GreasedLineRibbon.

LANGUAGE: javascript
CODE:
const line = BABYLON.CreateGreasedLine("name", { points, ribbonOptions: { } })

----------------------------------------

TITLE: Adding Event Block to Graph
DESCRIPTION: Demonstrates how to add an event block to a flow graph for event handling.

LANGUAGE: javascript
CODE:
const eventblock = new MyNewEventblock();
graph.addEventBlock(eventblock);

----------------------------------------

TITLE: Getting Canvas Origin in GUIManager for JavaScript
DESCRIPTION: Retrieves the origin coordinates (x, y) of the canvas managed by the GUIManager. This method is useful for positioning GUI elements relative to the canvas.

LANGUAGE: javascript
CODE:
getCanvasOrigine()

----------------------------------------

TITLE: Customizing Babylon Viewer Configuration in HTML
DESCRIPTION: Configures the Babylon Viewer with specific settings, including disabling the navbar, removing the logo, and enabling 3D Commerce certified rendering.

LANGUAGE: html
CODE:
<babylon
    model="https://syntheticmagus.github.io/vaporwear-original-asset-host/watch_original.glb"
    templates.nav-bar.params.hideFullscreen="true"
    templates.nav-bar.params.hideHelp="true"
    templates.nav-bar.params.hideHdButton="true"
    templates.main.params.disableLogoBehavior="true"
    3d-commerce-certified>

----------------------------------------

TITLE: Moving Scene Assets to AssetContainer in Babylon.js
DESCRIPTION: Demonstrates how to move assets from an active scene into an AssetContainer while preserving specific assets like cameras.

LANGUAGE: javascript
CODE:
const keepAssets = new BABYLON.KeepAssets();
keepAssets.cameras.push(camera);
container.moveAllFromScene(keepAssets);

----------------------------------------

TITLE: Loading Images and Textures in Babylon.js
DESCRIPTION: Shows how to load images and textures using AssetsManager with success callbacks.

LANGUAGE: javascript
CODE:
const imageTask = assetsManager.addImageTask("image task", "img.jpg");
imageTask.onSuccess = function (task) {
  console.log(task.image.width);
};

const textureTask = assetsManager.addTextureTask("image task", "img.jpg");
textureTask.onSuccess = function (task) {
  material.diffuseTexture = task.texture;
};

----------------------------------------

TITLE: Cloning and Setting Up Lantern Animations in BabylonJS
DESCRIPTION: This snippet shows how to clone animation groups for multiple lantern instances and set them up in a BabylonJS game environment.

LANGUAGE: javascript
CODE:
let animGroupClone = new AnimationGroup("lanternAnimGroup " + i);
animGroupClone.addTargetedAnimation(assets.animationGroups.targetedAnimations[0].animation, lanternInstance);
let newLantern = new Lantern(this._lightmtl, lanternInstance, this._scene, assets.env.getChildTransformNodes(false).find(m => m.name === "lantern " + i).getAbsolutePosition(), animGroupClone);

----------------------------------------

TITLE: Creating Custom Scene Optimizer Options
DESCRIPTION: Initialization of SceneOptimizerOptions with custom target framerate and check rate.

LANGUAGE: javascript
CODE:
// With a target framerate of 50fps and a check|rate of 500ms
let optimizerOptions = new BABYLON.SceneOptimizerOptions(50, 500);

----------------------------------------

TITLE: Including Babylon.js and glTF File Loader Scripts
DESCRIPTION: HTML script tags to include Babylon.js core and the full version of the glTF File Loader, supporting both glTF 1.0 and 2.0.

LANGUAGE: html
CODE:
<script src="babylon.js"></script>
<script src="babylon.glTFFileLoader.js"></script>

----------------------------------------

TITLE: Sphere Mesh Creation for Firework Base
DESCRIPTION: JavaScript code to create and configure the base sphere mesh for the firework effect. Converts the mesh to flat shading for distinct facets.

LANGUAGE: JavaScript
CODE:
var sphere = BABYLON.MeshBuilder.CreateSphere("sphere", { diameter: 10 }, scene);
sphere.convertToFlatShadedMesh();

sphere.material = shaderMaterial;

----------------------------------------

TITLE: Configuring Tiled Navigation Mesh Parameters in Babylon.js
DESCRIPTION: Configuration object for creating a tiled navigation mesh that supports dynamic obstacles. Sets parameters like tile size, walkable slopes, and mesh simplification settings.

LANGUAGE: javascript
CODE:
const navmeshParameters = {
  cs: 0.2,
  ch: 0.2,
  walkableSlopeAngle: 0,
  walkableHeight: 0.0,
  walkableClimb: 0,
  walkableRadius: 1,
  maxEdgeLen: 12,
  maxSimplificationError: 1.3,
  minRegionArea: 8,
  mergeRegionArea: 20,
  maxVertsPerPoly: 6,
  detailSampleDist: 6,
  detailSampleMaxError: 15,
  borderSize: 1,
  tileSize: 20,
};

----------------------------------------

TITLE: Getting Color Value from GUIColor in BabylonJS
DESCRIPTION: Method to retrieve the color value of the GUIColor element. It returns the color in RGB format by default, or in hexadecimal format if specified.

LANGUAGE: typescript
CODE:
getColor(bool: rgb) → void

----------------------------------------

TITLE: Implementing Basic SPS Animation Render Loop
DESCRIPTION: Sets up the basic render loop for updating solid particles on each frame using scene.onBeforeRenderObservable.

LANGUAGE: javascript
CODE:
scene.onBeforeRenderObservable.add(() => {
    SPS.setParticles();
})

----------------------------------------

TITLE: Creating ReflectiveShadowMap Instance
DESCRIPTION: JavaScript code showing how to create and configure a ReflectiveShadowMap instance in Babylon.js

LANGUAGE: javascript
CODE:
const rsm = new BABYLON.ReflectiveShadowMap(scene, light, { width: 512, height: 512 });
rsm.addMesh();

----------------------------------------

TITLE: Creating a GUIFieldset in BabylonJS
DESCRIPTION: Constructor for creating a new GUIFieldset. It takes an id, options, a GUI manager, and an optional append parameter.

LANGUAGE: javascript
CODE:
new GUIFieldset(id, options, guimanager, append)

----------------------------------------

TITLE: React Component for Babylon.js Game Integration
DESCRIPTION: React component that initializes and renders the Babylon.js game in an Ionic app

LANGUAGE: typescript
CODE:
import { IonContent, IonPage } from '@ionic/react';
import { Component, createRef, RefObject } from 'react';
import { initializeBabylonApp } from 'fruit-fallin';
import './Home.css';

class BabylonGame extends Component {
  private _canvas: RefObject<HTMLCanvasElement>;

  constructor (props: any) {
    super(props);
    this._canvas = createRef();
  }

  public componentDidMount() {
    // Crude workaround for a loading timing issue
    setTimeout(() => {
      const babylonOptions = {
        canvas: this._canvas.current!,
        backgroundTitleUrl: "assets/game/background_title.jpg",
        backgroundGameUrl: "assets/game/background_game.jpg",
        buttonPlankUrl: "assets/game/button_plank.jpg",
        imageGameOverUrl: "assets/game/image_game_over.jpg",
        spritesheetButtonFrameUrl: "assets/game/spritesheet_button_frame.jpg",
        spritesheetFruitUrl: "assets/game/spritesheet_fruit.jpg",
        spritesheetMouthUrl: "assets/game/spritesheet_mouth.jpg",
        soundMusicUrl: "assets/game/sound_music.mp3",
        soundChompUrl: "assets/game/sound_chomp.mp3",
        soundChompYumUrl: "assets/game/sound_chomp_yum.mp3",
        soundChompYuckUrl: "assets/game/sound_chomp_yuck.mp3",
        soundCountdownUrl: "assets/game/sound_countdown.mp3",
        soundGoUrl: "assets/game/sound_go.mp3",
        soundClickUrl: "assets/game/sound_click.mp3",
      };
      initializeBabylonApp(babylonOptions);
    }, 200);
  }

  public render() {
      return <canvas id="babylonCanvas" width={window.innerWidth} height={window.innerHeight} style={{width: "100%", height: "100%"}} className="center" ref={this._canvas}></canvas>;
  }
}

const Home: React.FC = () => {
  return (
    <IonPage>
      <IonContent>
        <BabylonGame></BabylonGame>
      </IonContent>
    </IonPage>
  );
};

export default Home;

----------------------------------------

TITLE: Rotating Mesh Using Parent Object in Babylon.js
DESCRIPTION: Uses a parent object (sphere) as the center of rotation. The mesh is parented to the sphere, positioned, and then the sphere is rotated.

LANGUAGE: javascript
CODE:
sphere.position = CoR_At;

pilot.parent = sphere;
pilot.position = pilotStart;

sphere.rotate(axis, angle, BABYLON.Space.WORLD);

----------------------------------------

TITLE: Updating Other Players' Positions in BabylonJS
DESCRIPTION: Smoothly updates the positions of other players based on server data.

LANGUAGE: javascript
CODE:
player.position.onChange = () => {
  if (key != room.sessionId) {
    if (Math.abs(playerViews[key].position.x) < 0.2 && Math.abs(playerViews[key].position.y) < 0.5 && Math.abs(playerViews[key].position.x) < 0.2) {
      playerViews[key].position = new BABYLON.Vector3(player.position.x, player.position.y, player.position.z);
    } else {
      playerViews[key].physicsImpostor.setLinearVelocity(new BABYLON.Vector3((player.position.x - playerViews[key].position.x) * 10, (player.position.y - playerViews[key].position.y) * 10, (player.position.z - playerViews[key].position.z) * 10));

      playerViews[key].rotationQuaternion = BABYLON.Quaternion.Slerp(playerViews[key].rotationQuaternion, new BABYLON.Quaternion(player.quaternion.x, player.quaternion.y, player.quaternion.z, player.quaternion.w), 0.4);
    }
  }
};

----------------------------------------

TITLE: Adjusting Light Intensity in BabylonJS
DESCRIPTION: Reduces the intensity of the hemispheric light to make the spotlight more visible.

LANGUAGE: javascript
CODE:
light.intensity = 0.5;

----------------------------------------

TITLE: Loading Multiple glTF Assets in Parallel with Promises in Babylon.js
DESCRIPTION: This example shows how to load two glTF assets in parallel using Promise.all(), positioning and scaling them in the scene.

LANGUAGE: javascript
CODE:
const scene = new BABYLON.Scene(engine);

const baseUrl = "https://raw.githubusercontent.com/KhronosGroup/glTF-Sample-Models/master/2.0/";

Promise.all([
  BABYLON.SceneLoader.ImportMeshAsync(null, baseUrl + "BoomBox/glTF/", "BoomBox.gltf", scene).then(function (result) {
    result.meshes[0].position.x = 0.01;
  }),
  BABYLON.SceneLoader.ImportMeshAsync(null, baseUrl + "Avocado/glTF/", "Avocado.gltf", scene).then(function (result) {
    result.meshes[0].position.x = -0.01;
    result.meshes[0].position.y = -0.01;
    result.meshes[0].scaling.scaleInPlace(0.25);
  }),
]).then(() => {
  scene.createDefaultCameraOrLight(true, true, true);
  scene.activeCamera.alpha += Math.PI;
});

----------------------------------------

TITLE: Adding Custom Optimization Shorthand
DESCRIPTION: Demonstrates the shorthand method for adding custom optimizations using addCustomOptimization.

LANGUAGE: javascript
CODE:
// Using shorthand syntax, fn(onApply, onGetDescrition, priority)
options.addCustomOptimization(function () {
	// Some optimizing code
}, function () {
    return "Making optimizations...";
}, 0.6);

----------------------------------------

TITLE: Loading Asset into ArrayBuffer in Babylon.js
DESCRIPTION: This snippet shows how to load an asset file into an ArrayBuffer in memory using Babylon.js Tools.

LANGUAGE: javascript
CODE:
const assetArrayBuffer = await BABYLON.Tools.LoadFileAsync("scenes/BoomBox.glb", true);

----------------------------------------

TITLE: Managing Friction in Physics Objects
DESCRIPTION: Demonstrates how to set, get and modify friction properties of physics imposters both during creation and runtime.

LANGUAGE: javascript
CODE:
new BABYLON.PhysicsImpostor(mesh, BABYLON.PhysicsImpostor.BoxImpostor, { mass: 2, friction: 0.4 }, scene); //on creation

var friction = imposter.friction; // get friction;
imposter.friction = 0.1; //set friction.

----------------------------------------

TITLE: Enabling AutoRotation Behavior for ArcRotateCamera in Babylon.js
DESCRIPTION: This code shows how to enable the autoRotation behavior for an ArcRotateCamera. This behavior creates a smooth rotation of the camera when there is no user interaction.

LANGUAGE: javascript
CODE:
camera.useAutoRotationBehavior = true;

----------------------------------------

TITLE: Height Animation Using Cosine
DESCRIPTION: Demonstrates using a cosine function to create bouncing animation for particles.

LANGUAGE: javascript
CODE:
let y = h * (1 + Math.cos(angle))

----------------------------------------

TITLE: Defining Animation Keyframes in Babylon.js
DESCRIPTION: Sets up keyframe array defining the wheel's rotation from 0 to 2π (full rotation) over 30 frames.

LANGUAGE: javascript
CODE:
const wheelKeys = []; 

//At the animation key 0, the value of rotation.y is 0
wheelKeys.push({
    frame: 0,
    value: 0
});

//At the animation key 30, (after 1 sec since animation fps = 30) the value of rotation.y is 2PI for a complete rotation
wheelKeys.push({
    frame: 30,
    value: 2 * Math.PI
});

----------------------------------------

TITLE: Setting Visibility of GUIColor in BabylonJS
DESCRIPTION: Method to set the visibility of the GUIColor element. It takes a boolean parameter to determine whether to show or hide the element.

LANGUAGE: typescript
CODE:
setVisible(bool: fade) → void

----------------------------------------

TITLE: Starting Development Server
DESCRIPTION: Command to start development server in watch mode

LANGUAGE: bash
CODE:
npm run dev

----------------------------------------

TITLE: Starting a Simple Video Recording in Babylon.js
DESCRIPTION: This code snippet shows how to start a basic video recording of a Babylon.js scene using default settings.

LANGUAGE: javascript
CODE:
if (BABYLON.VideoRecorder.IsSupported(engine)) {
    var recorder = new BABYLON.VideoRecorder(engine);
    recorder.startRecording();
}

----------------------------------------

TITLE: Loading Colyseus SDK in Babylon.js
DESCRIPTION: Dynamically loads the Colyseus JavaScript SDK in the browser by injecting a script tag.

LANGUAGE: typescript
CODE:
var scriptUrl = "https://unpkg.com/colyseus.js@^0.15.0-preview.2/dist/colyseus.js";
var externalScript = document.createElement("script");
externalScript.src = scriptUrl;
document.head.appendChild(externalScript);

----------------------------------------

TITLE: Adding Slider Event Handler
DESCRIPTION: Implements an observable event handler to update light intensity based on slider value

LANGUAGE: javascript
CODE:
slider.onValueChangedObservable.add((value) => {
    if (light) {
        light.intensity = value;
    }
});

----------------------------------------

TITLE: Checking Video Recording Support in Babylon.js
DESCRIPTION: This snippet demonstrates how to check if the browser supports video recording of Babylon.js scenes using the VideoRecorder class.

LANGUAGE: javascript
CODE:
if (BABYLON.VideoRecorder.IsSupported(engine)) {
    var recorder = new BABYLON.VideoRecorder(engine);
}

----------------------------------------

TITLE: Implementing Custom Vertex and Fragment Shaders in Babylon.js
DESCRIPTION: Defines custom vertex and fragment shaders using BABYLON.Effect.ShadersStore. The shaders handle position, UV coordinates, and texture sampling.

LANGUAGE: javascript
CODE:
BABYLON.Effect.ShadersStore["customVertexShader"] = "\r\n" + "precision highp float;\r\n" + "// Attributes\r\n" + "attribute vec3 position;\r\n" + "attribute vec2 uv;\r\n" + "// Uniforms\r\n" + "uniform mat4 worldViewProjection;\r\n" + "// Varying\r\n" + "varying vec2 vUV;\r\n" + "void main(void) {\r\n" + "    gl_Position = worldViewProjection * vec4(position, 1.0);\r\n" + "    vUV = uv;\r\n" + "}\r\n";

BABYLON.Effect.ShadersStore["customFragmentShader"] = "\r\n" + "precision highp float;\r\n" + "varying vec2 vUV;\r\n" + "uniform sampler2D textureSampler;\r\n" + "void main(void) {\r\n" + "    gl_FragColor = texture2D(textureSampler, vUV);\r\n" + "}\r\n";

----------------------------------------

TITLE: Building Track Section in JavaScript
DESCRIPTION: Implements the createSection function to construct track data for a single section, including calculations for rail directions, rotations, and carriage positions.

LANGUAGE: javascript
CODE:
function createSection(points, startSection, endSection) {
  /***** Calculate the number of rails for the section *****/
  var railsFrom = startSection.start; //index of start of section
  var railsTo = endSection.start; //index of end of section
  if (endSection.start === 0) {
    railsTo = points.length;
  }

  var nbRails = railsTo - railsFrom;

  /***** Set the defaults for the section *****/
  var initialLean = startSection.options.lean === void 0 ? 0 : startSection.options.lean; //lean of carriage about direction axis at start, a phi variable
  var initialTurn = startSection.options.turn === void 0 ? 0 : startSection.options.turn; // turn of carriage around upright at start, a theta variable
  var leanTwists = startSection.options.leanTwists === void 0 ? 0 : startSection.options.leanTwists; //number of  lean twists (+ve counter clockwise, -ve clockwise)
  var leanWaves = startSection.options.leanWaves === void 0 ? 0 : startSection.options.leanWaves; //number of lean waves
  var leanWaveAngle = startSection.options.leanWaveAngle === void 0 ? 0 : startSection.options.leanWaveAngle; //angle for lean wave
  var turnTwists = startSection.options.turnTwists === void 0 ? 0 : startSection.options.turnTwists; //number of  turn twists (+ve counter clockwise, -ve clockwise)
  var turnWaves = startSection.options.turnWaves === void 0 ? 0 : startSection.options.turnWaves; //number of turn waves
  var turnWaveAngle = startSection.options.turnWaveAngle === void 0 ? 0 : startSection.options.turnWaveAngle; //angle for turn wave

  var finalLean = endSection.options.lean === void 0 ? 0 : endSection.options.lean;
  var finalTurn = endSection.options.turn === void 0 ? 0 : endSection.options.turn;

  /***** Check if both waves and  twists are used and ignore twists when so  *****/
  //lean waves supersede lean twists unless leanWaveAngle = 0
  if (leanWaves > 0 && Math.abs(leanTwists) > 0) {
    if (leanWaveAngle == 0) {
      leanWaves = 0;
    } else {
      leanTwists = 0;
    }
  }

  //turn waves supersede turn twists unless turnWaveAngle = 0
  if (turnWaves > 0 && Math.abs(turnTwists) > 0) {
    if (turnWaveAngle == 0) {
      turnWaves = 0;
    } else {
      turnTwists = 0;
    }
  }

  /***** Initiate the variables and their types *****/
  //rail transformation matrices for swivel and tilt rotations
  var rotationMatrixY = BABYLON.Matrix.Identity();
  var rotationMatrixZ = BABYLON.Matrix.Identity();
  var rotationMatrix = BABYLON.Matrix.Identity();

  var m = BABYLON.Matrix.Identity();
  var initialRailDirection = BABYLON.Axis.X;
  var initialUprightDirection = BABYLON.Axis.Y;
  var initialLevelDirection = BABYLON.Axis.Z;
  var railDirection = BABYLON.Vector3.Zero();
  var uprightDirection = BABYLON.Vector3.Zero(); //contains vector normal to rail direction after tilt
  var levelDirection = BABYLON.Vector3.Zero(); //contains vector normal to rail direction after swivel
  var leanDirection = BABYLON.Vector3.Zero(); // contains vector normal to rail direction after tilt, swivel and lean
  var turnDirection = BABYLON.Vector3.Zero();
  var carriageNormal = BABYLON.Vector3.Zero();
  var rotationMatrixLean = BABYLON.Matrix.Identity();
  var rotationMatrixTurn = BABYLON.Matrix.Identity();
  var rotationMatrixPassenger = BABYLON.Matrix.Identity();
  var initialPosition = BABYLON.Vector3.Zero();
  var rotation = BABYLON.Matrix.Identity(); //Overall rotation after tilt, swivel, lean and turn

  var tilt = 0; //tilt angle of rail after rotation about (0, 0, 1)
  var swivel = 0; //swivel angle of rail after rotation around (0, 1, 0)

  var railCount = 0; // determines how many rails along a section, used to control wave values

  //Set calculated values for variables
  var phi = initialLean;
  var theta = initialTurn;

  var gradLean = (finalLean - initialLean) / (nbRails - 1); // lean gradient
  var gradTurn = (finalTurn - initialTurn) / (nbRails - 1); // turn gradient

  var deltaPhi = (finalLean + 2 * leanTwists * Math.PI - initialLean) / nbRails; //increase in phi per rail for lean twist
  var deltaTheta = (finalTurn + 2 * turnTwists * Math.PI - initialTurn) / nbRails; //increase in theta per rail for lean twist

  /***** Loop over rails in section*****/

  for (let i = railsFrom; i < railsTo; i++) {
    points[(i + 1) % points.length].subtractToRef(points[i], railDirection); //direction of each rail
    railDirection.normalize();
    swivel = -Math.atan2(railDirection.z, railDirection.x); //swivel angle rail makes in xz plane
    tilt = Math.atan2(Math.abs(railDirection.y), Math.abs(railDirection.x)); // tilt angle rail makes in first quadrant of xy plane
    tilt *= Math.sign(railDirection.y); //tilt angle of rail in xy plane from -pi/2 to pi/2
    BABYLON.Matrix.RotationAxisToRef(BABYLON.Axis.Y, swivel, rotationMatrixY); //swivel angle to matrix rotation
    BABYLON.Matrix.RotationAxisToRef(BABYLON.Axis.Z, tilt, rotationMatrixZ); //tilt angle to matrix rotation
    rotationMatrixZ.multiplyToRef(rotationMatrixY, rotationMatrix); // form combined swivel and tilt matrix
    BABYLON.Vector3.TransformNormalToRef(initialUprightDirection, rotationMatrix, uprightDirection); //swivel, tilt act on carriage upright
    BABYLON.Vector3.TransformNormalToRef(initialLevelDirection, rotationMatrix, levelDirection); //swivel, tilt act on carriage level
    uprightDirection.normalize();
    levelDirection.normalize();

    if (leanWaves > 0) {
      phi = initialLean + railCount * gradLean + leanWaveAngle * Math.sin((railCount * leanWaves * Math.PI) / (nbRails - 1));
    } else {
      phi += deltaPhi;
    }
    if (turnWaves > 0) {
      theta = initialTurn + railCount * gradTurn + turnWaveAngle * Math.sin((railCount * turnWaves * Math.PI) / (nbRails - 1));
    } else {
      theta += deltaTheta;
    }
    railCount++;
    BABYLON.Matrix.RotationAxisToRef(railDirection, phi, rotationMatrixLean); // lean matrix
    BABYLON.Vector3.TransformNormalToRef(uprightDirection, rotationMatrixLean, carriageNormal); // lean applied to upright
    BABYLON.Matrix.RotationAxisToRef(carriageNormal, theta, rotationMatrixTurn); // turn applied to upright after lean

    BABYLON.Matrix.RotationAxisToRef(initialUprightDirection, theta, rotationMatrixPassenger); //just turn applied to upright
    passengerRotations.push(rotationMatrixPassenger.clone());

    rotationMatrix.multiplyToRef(rotationMatrixLean, rotation); //rotation from swivel, tilt, and lean only
    carriageRotations.push(rotation.clone());
    rotation.multiplyToRef(rotationMatrixTurn, rotation); //complete rotation from swivel, tilt, lean and turn
    rotations.push(rotation.clone());

    directions.push(railDirection.clone());
  }
}

----------------------------------------

TITLE: Running Multiple Animations Simultaneously in Babylon.js
DESCRIPTION: This snippet demonstrates how to run multiple animations simultaneously in Babylon.js. It applies the previously created animations to the camera, door hinge, and spotlights, creating a coordinated sequence of events.

LANGUAGE: javascript
CODE:
scene.beginDirectAnimation(camera, [movein, rotate], 0, 25 * frameRate, false);
scene.beginDirectAnimation(hinge, [sweep], 0, 25 * frameRate, false);
scene.beginDirectAnimation(spotLights[0], [lightDimmer], 0, 25 * frameRate, false);
scene.beginDirectAnimation(spotLights[1], [lightDimmer.clone()], 0, 25 * frameRate, false);

----------------------------------------

TITLE: Creating a GUIProgress Element in BabylonJS
DESCRIPTION: Constructor for creating a new GUIProgress element. It takes parameters for id, options, GUI manager, callback function, and append flag.

LANGUAGE: javascript
CODE:
new GUIProgress(id, options, guimanager, callback, append)

----------------------------------------

TITLE: Handling Picked Particles in Babylon.js
DESCRIPTION: This code snippet shows how to handle picked particles in a Babylon.js scene. It sets up a pointer down event, retrieves the picked particle data, and modifies the particle's properties (color and velocity) based on the interaction.

LANGUAGE: javascript
CODE:
var SPS = new BABYLON.SolidParticleSystem("SPS", scene, { isPickable: true });
// add shapes, build the mesh, init particles, etc
SPS.setParticles(); // initial SPS draw
SPS.refreshVisibleSize(); // force the BBox recomputation
scene.onPointerDown = function(evt, pickResult) {
  var meshFaceId = pickResult.faceId; // get the mesh picked face
  if (meshFaceId == -1) {
    return;
  } // return if nothing picked
  var picked = SPS.pickedParticle(pickResult); // get the picked particle data : idx and faceId
  var idx = picked.idx;                         
  var p = SPS.particles[idx];                   // get the actual picked particle
  p.color.r = 1; // turn it red
  p.color.b = 0;
  p.color.g = 0;
  p.velocity.y = -1; // drop it
  SPS.setParticles();
};

----------------------------------------

TITLE: Path Track Definition in BabylonJS
DESCRIPTION: Defines a track array with turn angles and distances for path following animation.

LANGUAGE: javascript
CODE:
const slide = function (turn, dist) { //after covering dist apply turn
    this.turn = turn;
    this.dist = dist;
}
const track = [];
track.push(new slide(Math.PI / 2, 4));  //first side length 4
track.push(new slide(3 * Math.PI / 4, 8)); //at finish of second side distance covered is 4 + 4
track.push(new slide(3 * Math.PI / 4, 8 + 4 * Math.sqrt(2))); //all three sides cover the distance 4 + 4 + 4 * sqrt(2)

----------------------------------------

TITLE: Creating GUI Elements with CastorGUI
DESCRIPTION: Demonstrates creation of GUI elements including textures and dialogs with text. Shows how to set up click handlers and position elements relative to the canvas.

LANGUAGE: javascript
CODE:
let myFunction = function () {
  alert("Yes, this work!");
};
let guiTexture = new GUITexture("life", "data/image.png", { w: 50, h: 50, x: 10, y: 0 }, guisystem, myFunction);

let optionsDialog = { w: guisystem.getCanvasSize().width - 20, h: 100, x: 8, y: guisystem.getCanvasSize().height - 110 };
let dialog = new GUIDialog("dialog", optionsDialog, guisystem);
dialog.setVisible(true);

let text = new GUIText("textDialog", { size: 15, text: "Display text here" }, guisystem, false);
dialog.add(text);

----------------------------------------

TITLE: Synchronizing Camera Controls
DESCRIPTION: Implements camera synchronization between CesiumJS and BabylonJS, including position and rotation calculations.

LANGUAGE: javascript
CODE:
function cart2vec(cart) {
    return new BABYLON.Vector3(cart.x, cart.z, cart.y);
}

const fov = Cesium.Math.toDegrees(viewer.camera.frustum.fovy);
camera.fov = fov / 180 * Math.PI;

const civm = viewer.camera.inverseViewMatrix;
const camera_matrix = BABYLON.Matrix.FromValues(
    civm[0 ], civm[1 ], civm[2 ], civm[3 ],
    civm[4 ], civm[5 ], civm[6 ], civm[7 ],
    civm[8 ], civm[9 ], civm[10], civm[11],
    civm[12], civm[13], civm[14], civm[15]
);

const scaling = BABYLON.Vector3.Zero(), rotation = BABYLON.Vector3.Zero(), transform = BABYLON.Vector3.Zero();
camera_matrix.decompose(scaling, rotation, transform);
const camera_pos = cart2vec(transform),
    camera_direction = cart2vec(viewer.camera.direction),
    camera_up = cart2vec(viewer.camera.up);

const rotation_y = Math.atan(camera_direction.z / camera_direction.x);
if (camera_direction.x < 0) rotation_y += Math.PI;
rotation_y = Math.PI / 2 - rotation_y;
const rotation_x = Math.asin(-camera_direction.y);
const camera_up_before_rotatez = new BABYLON.Vector3(-Math.cos(rotation_y), 0, Math.sin(rotation_y));
const rotation_z = Math.acos(camera_up.x * camera_up_before_rotatez.x + camera_up.y * camera_up_before_rotatez.y + camera_up.z * camera_up_before_rotatez.z);
rotation_z = Math.PI / 2 - rotation_z;
if (camera_up.y < 0) rotation_z = Math.PI - rotation_z;

camera.position.x = camera_pos.x - base_point.x;
camera.position.y = camera_pos.y - base_point.y;
camera.position.z = camera_pos.z - base_point.z;
camera.rotation.x = rotation_x;
camera.rotation.y = rotation_y;
camera.rotation.z = rotation_z;

----------------------------------------

TITLE: Running Timeline Render Loop
DESCRIPTION: TypeScript examples showing how to start the timeline render loop with optional custom callback

LANGUAGE: typescript
CODE:
timeline.runRenderLoop();

// With custom callback
timeline.runRenderLoop(() => {
    // Sync the timeline with a playing video
    if (!mainVideo.paused) {
        timeline.setCurrentTime(mainVideo.currentTime);
    }
});

----------------------------------------

TITLE: Creating a CubeTexture from Prefiltered Data in Babylon.js
DESCRIPTION: This code snippet demonstrates how to create a CubeTexture from prefiltered data in Babylon.js, typically used for environment mapping.

LANGUAGE: javascript
CODE:
new BABYLON.CubeTexture.CreateFromPrefilteredData("textures/filename", scene);

----------------------------------------

TITLE: Implementing Pointer Event Handler in BabylonJS
DESCRIPTION: Sets up a pointer observable to detect mouse clicks in the scene. Uses a boolean flag to track the particle system state and handles pointer down events.

LANGUAGE: javascript
CODE:
let switched = false;  //on off flag

scene.onPointerObservable.add((pointerInfo) => {      		
    switch (pointerInfo.type) {
		case BABYLON.PointerEventTypes.POINTERDOWN:
			if(pointerInfo.pickInfo.hit) {
                pointerDown(pointerInfo.pickInfo.pickedMesh)
            }
		break;
    }
});

----------------------------------------

TITLE: Computing Navigation Path
DESCRIPTION: Calculates a path between two points and creates a visual representation using dashed lines.

LANGUAGE: javascript
CODE:
const pathPoints = navigationPlugin.computePath(crowd.getAgentPosition(agent), navigationPlugin.getClosestPoint(destinationPoint));
pathLine = BABYLON.MeshBuilder.CreateDashedLines("ribbon", { points: pathPoints, updatable: true, instance: pathLine }, scene);

----------------------------------------

TITLE: Configuring WebXR Default Experience for AR in JavaScript
DESCRIPTION: This snippet shows how to configure the WebXR Default Experience for an AR session instead of VR using the uiOptions.

LANGUAGE: javascript
CODE:
var defaultXRExperience = await scene.createDefaultXRExperienceAsync({
    uiOptions: {
        sessionMode: 'immersive-ar'
    }
});

----------------------------------------

TITLE: Registering Material Plugin in Babylon.js
DESCRIPTION: Shows how to register a material plugin using a factory function that associates the plugin instance with a material.

LANGUAGE: javascript
CODE:
BABYLON.RegisterMaterialPlugin("BlackAndWhite", (material) => {
  material.blackandwhite = new BlackAndWhitePluginMaterial(material);
  return material.blackandwhite;
});

----------------------------------------

TITLE: Pattern Constants for Tiled Plane
DESCRIPTION: Available constants for configuring tile patterns including flipping and rotation options.

LANGUAGE: javascript
CODE:
BABYLON.Mesh.NO_FLIP,
BABYLON.Mesh.FLIP_TILE,
BABYLON.Mesh.ROTATE_TILE,
BABYLON.Mesh.FLIP_ROW,
BABYLON.Mesh.ROTATE_ROW,
BABYLON.Mesh.FLIP_N_ROTATE_TILE,
BABYLON.Mesh.FLIP_N_ROTATE_ROW

----------------------------------------

TITLE: Complete Node.js Implementation with Babylon.js NullEngine
DESCRIPTION: Full implementation example showing how to use Babylon.js NullEngine in Node.js environment, including mesh loading and rendering.

LANGUAGE: javascript
CODE:
var BABYLON = require("babylonjs");
var LOADERS = require("babylonjs-loaders");
global.XMLHttpRequest = require("xhr2").XMLHttpRequest;

var engine = new BABYLON.NullEngine();
var scene = new BABYLON.Scene(engine);

var light = new BABYLON.PointLight("Omni", new BABYLON.Vector3(20, 20, 100), scene);

var camera = new BABYLON.ArcRotateCamera("Camera", 0, 0.8, 100, BABYLON.Vector3.Zero(), scene);

BABYLON.SceneLoader.ImportMesh("", "https://playground.babylonjs.com/scenes/", "skull.babylon", scene, function (newMeshes) {
    camera.target = newMeshes[0];

    console.log("Meshes loaded from babylon file: " + newMeshes.length);
    for (let index = 0; index < newMeshes.length; index++) {
        console.log(newMeshes[index].toString());
    }

    BABYLON.SceneLoader.ImportMesh("", "https://www.babylonjs.com/assets/DamagedHelmet/glTF/", "DamagedHelmet.gltf", scene, function (meshes) {
        console.log("Meshes loaded from gltf file: " + meshes.length);
        for (let index = 0; index < meshes.length; index++) {
            console.log(meshes[index].toString());
        }
    });

    console.log("render started")
    engine.runRenderLoop(function() {
        scene.render();
    })
});

----------------------------------------

TITLE: Custom Material Assignment with Particle Position
DESCRIPTION: Demonstrates how to assign materials based on particle position using materialIndex property during initialization.

LANGUAGE: javascript
CODE:
var initParticle = function(particle, i) {
  particle.position.x = areaSize * (Math.random() - 0.5);
  particle.position.y = areaSize * (Math.random() - 0.5);
  particle.position.z = areaSize * (Math.random() - 0.5);
  if (particle.position.y > areaSize * 0.1) {
    particle.materialIndex = 1;
  }
};
var sps = new BABYLON.SolidParticleSystem("sps", scene, {
  useModelMaterial: true,
  updatable: false
});
sps.addShape(model1, 300, { positionFunction: initFunction });
sps.addShape(model2, 300, { positionFunction: initFunction });
sps.addShape(model3, 300, { positionFunction: initFunction });
sps.buildMesh();

----------------------------------------

TITLE: Character Position and Rotation Reset in BabylonJS
DESCRIPTION: Demonstrates how to reset character position and rotation using quaternions for imported models.

LANGUAGE: javascript
CODE:
dude.position = new BABYLON.Vector3(-6, 0, 0);
dude.rotate(BABYLON.Axis.Y, BABYLON.Tools.ToRadians(-95), BABYLON.Space.LOCAL);
const startRotation = dude.rotationQuaternion.clone(); //use clone so that variables are independent not linked copies

----------------------------------------

TITLE: Loading and Managing VRM Models in Babylon.js
DESCRIPTION: Complete example showing how to load a VRM file, handle secondary animations, perform model transformations, and work with humanoid bones and blend shapes.

LANGUAGE: javascript
CODE:
import * as BABYLON from "@babylonjs/core";

// has side-effect
// ref. https://webpack.js.org/guides/tree-shaking#mark-the-file-as-side-effect-free
import "babylon-vrm-loader";

// vrmFile is File object retrieved by <input type="file">.
const scene = await BABYLON.SceneLoader.LoadAsync("file:", vrmFile, engine);
const vrmManager = scene.metadata.vrmManagers[0];

// Update secondary animation
scene.onBeforeRenderObservable.add(() => {
  vrmManager.update(scene.getEngine().getDeltaTime());
});

// Model Transformation
vrmManager.rootMesh.translate(new BABYLON.Vector3(1, 0, 0), 1);

// Work with HumanoidBone
vrmManager.humanoidBone.leftUpperArm.addRotation(0, 1, 0);

// Work with BlendShape(MorphTarget)
vrmManager.morphing("Joy", 1.0);

----------------------------------------

TITLE: Including Poki SDK in HTML for Babylon.js Games
DESCRIPTION: Add the Poki Javascript SDK to the HTML head of your Babylon.js game. This script is required for integrating with the Poki platform.

LANGUAGE: html
CODE:
<script src="//game-cdn.poki.com/scripts/v2/poki-sdk.js"></script>

----------------------------------------

TITLE: Configuring Luminance Adaptation in Babylon.js Pipeline
DESCRIPTION: Sets up HDR and luminance adaptation parameters for the rendering pipeline.

LANGUAGE: javascript
CODE:
pipeline.HDREnabled = true;

// 1.0 is the default value. In dark zones, the camera will tend to adapt luminance
// and get the global image less dark. More the value is near 0.0, more the image will be bright
pipeline.hdrMinimumLuminance = 1.0;

// 0.5 is the default value. This simply sets the speed when the camera adapts the luminosity
// in bright zones
pipeline.hdrDecreaseRate = 0.5;

// 0.5 is the default value. This simply sets the speed when the camera adapts the luminosity
// in dark zones
pipeline.hdrIncreaseRate = 0.5;

----------------------------------------

TITLE: Setting Up Collision and Trigger Meshes in Babylon.js
DESCRIPTION: This snippet demonstrates how to configure different types of meshes for collisions and triggers in a Babylon.js scene. It sets properties for ground, stairs, collision meshes, and trigger volumes.

LANGUAGE: javascript
CODE:
if (m.name == "ground") {
    m.checkCollisions = false;
    m.isPickable = false;
}
if (m.name.includes("stairs") || m.name == "cityentranceground" || m.name == "fishingground.001" || m.name.includes("lilyflwr")) {
    m.checkCollisions = false;
    m.isPickable = false;
}
if (m.name.includes("collision")) {
    m.isVisible = false;
    m.isPickable = true;
}
if (m.name.includes("Trigger")) {
    m.isVisible = false;
    m.isPickable = false;
    m.checkCollisions = false;
}

----------------------------------------

TITLE: Scaling Box Mesh Using Individual Properties
DESCRIPTION: Shows how to scale a unit cube by setting individual scaling properties for each axis.

LANGUAGE: javascript
CODE:
const box = BABYLON.MeshBuilder.CreateBox("box", {}); //unit cube
box.scaling.x = 2;
box.scaling.y = 1.5;
box.scaling.z = 3;

----------------------------------------

TITLE: Implementing Babylon Viewer Animation Controls in HTML
DESCRIPTION: This code embeds a Babylon.js viewer that displays controls for playing, pausing, and adjusting the speed of animations in a model with multiple animations.

LANGUAGE: html
CODE:
<CodePen pen="JoPGaMq" tab="result" title="Babylon Viewer Animation" />

----------------------------------------

TITLE: Advanced Material Plugin with Color Modification in Babylon.js
DESCRIPTION: Implements a more complex material plugin with uniforms, enable/disable controls, and color modification capabilities. Supports both GLSL and WGSL shaders.

LANGUAGE: javascript
CODE:
class ColorifyPluginMaterial extends BABYLON.MaterialPluginBase {
  color = new BABYLON.Color3(1.0, 0.0, 0.0);

  get isEnabled() {
    return this._isEnabled;
  }

  set isEnabled(enabled) {
    if (this._isEnabled === enabled) {
      return;
    }
    this._isEnabled = enabled;
    this.markAllDefinesAsDirty();
    this._enable(this._isEnabled);
  }

  _isEnabled = false;

  constructor(material) {
    super(material, "Colorify", 200, { COLORIFY: false });
    this._varColorName = material instanceof BABYLON.PBRBaseMaterial ? "finalColor" : "color";
  }

  prepareDefines(defines, scene, mesh) {
    defines.COLORIFY = this._isEnabled;
  }

  getUniforms(shaderLanguage) {
    if (shaderLanguage === BABYLON.ShaderLanguage.WGSL) {
        return {
            "ubo": [
            { name: "myColor", size: 3, type: "vec3" },
            ]
        };
    }
    return {
      ubo: [{ name: "myColor", size: 3, type: "vec3" }],
      fragment: `#ifdef COLORIFY
                    uniform vec3 myColor;
                #endif`
    };
  }

  bindForSubMesh(uniformBuffer, scene, engine, subMesh) {
    if (this._isEnabled) {
      uniformBuffer.updateColor3("myColor", this.color);
    }
  }

  getClassName() {
    return "ColorifyPluginMaterial";
  }

  getCustomCode(shaderType, shaderLanguage) {
    if (shaderLanguage === BABYLON.ShaderLanguage.WGSL) {
        return shaderType === "vertex" ? null : {
            "CUSTOM_FRAGMENT_BEFORE_FRAGCOLOR": `
                #ifdef COLORIFY
                    ${this._varColorName} = vec4f(${this._varColorName}.rgb * uniforms.myColor, ${this._varColorName}.a);
                #endif
            `
        };
    }
    return shaderType === "vertex" ? null : {
          CUSTOM_FRAGMENT_BEFORE_FRAGCOLOR: `
                #ifdef COLORIFY
                    ${this._varColorName}.rgb *= myColor;
                #endif
            `
        };
  }
}

----------------------------------------

TITLE: Implementing Animation Loop for Vertical Wave in JavaScript
DESCRIPTION: Sets up the animation loop to update the time uniform in the shader, creating the wave motion effect.

LANGUAGE: JavaScript
CODE:
var time = 0;
scene.registerBeforeRender(function() {
    boxes.material.setFloat("time", time);
    time +=0.1;
});

----------------------------------------

TITLE: Importing Babylon.js in JavaScript/TypeScript
DESCRIPTION: Examples of importing Babylon.js modules using ES6 import syntax.

LANGUAGE: javascript
CODE:
import * as BABYLON from 'babylonjs';

// Or importing specific classes
import { Engine, Scene } from 'babylonjs';

----------------------------------------

TITLE: Disposing GUIColor Element in BabylonJS
DESCRIPTION: Method to dispose of the GUIColor element, removing it from the GUI and freeing associated resources.

LANGUAGE: typescript
CODE:
dispose() → void

----------------------------------------

TITLE: Simple SPS Material Assignment
DESCRIPTION: Basic implementation of material assignment in SPS using useModelMaterial parameter. This approach copies materials from model meshes to particles.

LANGUAGE: javascript
CODE:
var sps = new BABYLON.SolidParticleSystem("sps", scene, {
  useModelMaterial: true
});
sps.addShape(model1, 300);
sps.addShape(model2, 300);
sps.addShape(model3, 300);
sps.buildMesh();

----------------------------------------

TITLE: Checking Mesh Intersection in Babylon.js
DESCRIPTION: Demonstrates how to use the intersectsMesh method to detect collision between two meshes. This method checks if the bounding boxes of the meshes overlap.

LANGUAGE: javascript
CODE:
mesh1.intersectsMesh(mesh2);

----------------------------------------

TITLE: Creating Basic HTML Structure for Babylon.js Project
DESCRIPTION: This HTML snippet provides the basic structure for the index.html file in a Babylon.js project. It includes the necessary meta tags and an empty body where the Babylon.js canvas will be dynamically inserted.

LANGUAGE: html
CODE:
<!DOCTYPE html>
<html>
    <head>
        <meta charset="UTF-8">
        <title>Title of Your Project</title>
    </head>
    <body>
    </body>
</html>

----------------------------------------

TITLE: Including babylon-mmd via CDN in HTML
DESCRIPTION: HTML script tags to include Babylon.js, Havok Physics, and babylon-mmd from CDN for UMD module usage.

LANGUAGE: html
CODE:
<script src="https://cdn.babylonjs.com/babylon.js"></script>
<script src="https://cdn.babylonjs.com/havok/HavokPhysics_umd.js"></script>
<script src="https://www.unpkg.com/babylon-mmd/umd/babylon.mmd.min.js"></script>

----------------------------------------

TITLE: Applying Texture to ShaderMaterial
DESCRIPTION: Sets up and applies a texture to the shader material using setTexture method.

LANGUAGE: javascript
CODE:
const mainTexture = new BABYLON.Texture("amiga.jpg", scene);
shaderMaterial.setTexture("textureSampler", mainTexture);

----------------------------------------

TITLE: Disposing GUIText Element in BabylonJS
DESCRIPTION: Method to dispose of a GUIText element and remove it from the GUI system.

LANGUAGE: javascript
CODE:
dispose() → void

----------------------------------------

TITLE: Styling Split Layout Components
DESCRIPTION: CSS styles for creating an 80-20 split layout between the canvas holder and instructions panel. The holder takes 80% width while the instructions panel takes 20% width with a grey background.

LANGUAGE: html
CODE:
<style>
    #holder {
        width: 80%;
        height: 100%;
        float: left;
    }

    #instructions {
        width: 20%;
        height: 100%;
        float: left;
        background-color: grey;
    }
</style>

----------------------------------------

TITLE: Enabling Scene Collisions in Babylon.js
DESCRIPTION: Enables collision detection for the scene and camera.

LANGUAGE: javascript
CODE:
scene.collisionsEnabled = true;
camera.checkCollisions = true;

----------------------------------------

TITLE: Importing Babylon.js Viewer in JavaScript
DESCRIPTION: Shows how to import the Babylon.js viewer into a JavaScript project after NPM installation.

LANGUAGE: javascript
CODE:
import "babylonjs-viewer";

----------------------------------------

TITLE: Compounding Covering Meshes to Complex Mesh in Babylon.js
DESCRIPTION: This code snippet shows how to compound covering meshes to a complex mesh in Babylon.js. It creates standard meshes to fit over an irregular mesh, parents them to the irregular mesh, and sets up physics imposters with zero mass for standard meshes and total mass for the irregular mesh.

LANGUAGE: javascript
CODE:
// Code not provided in the original text, but referenced in Playground link:
// https://playground.babylonjs.com/#492ZK0#12

----------------------------------------

TITLE: Applying Post Process Filter
DESCRIPTION: Example of applying a black and white post-process filter to an image.

LANGUAGE: javascript
CODE:
const blackAndWhitePostProcess = new BlackAndWhitePostProcess("bw", 1, null, undefined, engine);
backAndWhiteFilter.filter(imageToProcess, blackAndWhitePostProcess);

----------------------------------------

TITLE: Configuring Individual Resource URLs
DESCRIPTION: Detailed configuration for specific Babylon.js resources including Draco decoder, KTX2 transcoding, and other components.

LANGUAGE: javascript
CODE:
const baseUrl = "https://foo.bar";

BABYLON.DracoDecoder.DefaultConfiguration = {
    wasmUrl: baseUrl + "/draco_wasm_wrapper_gltf.js",
    wasmBinaryUrl: baseUrl + "/draco_decoder_gltf.wasm",
    fallbackUrl: baseUrl + "/draco_decoder_gltf.js"
};

----------------------------------------

TITLE: Recycling Particles in Babylon.js
DESCRIPTION: Example of recycling particles in the updateParticle function of a Solid Particle System.

LANGUAGE: javascript
CODE:
SPS.updateParticle = function (particle) {
  particle.velocity--;
  if (particle.velocity < 0) {
    particle.alive = false;
    SPS.recycleParticle(particle); // call to your own recycle function
  }
};

----------------------------------------

TITLE: Creating Ground from Height Map in Babylon.js
DESCRIPTION: Creates a large ground mesh using a height map to define terrain elevation. The height map is a grayscale image where white represents the highest points and black the lowest.

LANGUAGE: javascript
CODE:
const largeGround = BABYLON.MeshBuilder.CreateGroundFromHeightMap("largeGround", "https://assets.babylonjs.com/environments/villageheightmap.png", 
    {width:150, height:150, subdivisions: 20, minHeight:0, maxHeight: 10});

----------------------------------------

TITLE: Formatting Game Time in BabylonJS
DESCRIPTION: Converts real time to game world time format, handling the conversion where 4 minutes of real time equals 1 hour of game time.

LANGUAGE: javascript
CODE:
let minsPassed = Math.floor(time / 60);
let secPassed = time % 240;
if (secPassed % 4 == 0) {
    this._mString = Math.floor(minsPassed / 4) + 11;
    this._sString = (secPassed / 4 < 10 ? "0" : "") + secPassed / 4;
}
let day = this._mString == 11 ? " PM" : " AM";
return this._mString + ":" + this._sString + day;

----------------------------------------

TITLE: Disposing GUITexture in BabylonJS
DESCRIPTION: Method to dispose of a GUITexture element and remove it from the scene.

LANGUAGE: typescript
CODE:
dispose(): void

----------------------------------------

TITLE: Excluding Skinned Mesh from Motion Blur in Babylon.js
DESCRIPTION: This snippet shows how to exclude a skinned mesh from bones velocity computation in the motion blur effect to optimize performance.

LANGUAGE: javascript
CODE:
// Now, the mesh "mySkinnedMesh" will not compute bones velocities and will save performances.
motionblur.excludeSkinnedMesh(mySkinnedMesh);

----------------------------------------

TITLE: Initializing Basic NullEngine Setup in Babylon.js
DESCRIPTION: Basic setup for creating a headless version of Babylon.js using NullEngine.

LANGUAGE: javascript
CODE:
var engine = new BABYLON.NullEngine();
var scene = new BABYLON.Scene(engine);

----------------------------------------

TITLE: Loading VMD Motion in Babylon.js
DESCRIPTION: TypeScript code to load a VMD motion file using VmdLoader in Babylon.js.

LANGUAGE: typescript
CODE:
const vmdLoader = new VmdLoader(scene);
const modelMotion = await vmdLoader.loadAsync("model_motion_1", "your_model_motion_path.vmd");

----------------------------------------

TITLE: Event Binding Configuration
DESCRIPTION: Example of configuring event bindings for template elements including pointer and drop events.

LANGUAGE: javascript
CODE:
navBar: {
    html: '<div class="button-container flex-container">  <div id="fullscreen-button" class="button"> <span>Full screen</span>> </div> </div>',
    events: {
        pointerdown: { 'fullscreen-button': true, 'some-other-id': true },
        drop: true
    }
}

----------------------------------------

TITLE: Creating Varying Rotation Rate Animation in Babylon.js
DESCRIPTION: This snippet adjusts the key frame positions to create a varying rotation rate animation in Babylon.js.

LANGUAGE: javascript
CODE:
const yRot = new BABYLON.Animation("yRot", "rotation.y", frameRate, BABYLON.Animation.ANIMATIONTYPE_FLOAT, BABYLON.Animation.ANIMATIONLOOPMODE_CYCLE);

const keyFramesR = [];

keyFramesR.push({
  frame: 0,
  value: 0,
});

keyFramesR.push({
  frame: 1.5 * frameRate,
  value: 4 * Math.PI,
});

keyFramesR.push({
  frame: 2 * frameRate,
  value: 8 * Math.PI,
});

yRot.setKeys(keyFramesR);

----------------------------------------

TITLE: Creating FollowCamera in Babylon.js
DESCRIPTION: Initialize a FollowCamera with a name, start position, and optional scene parameter.

LANGUAGE: javascript
CODE:
const camera = new BABYLON.FollowCamera("FollowCam", new BABYLON.Vector3(-6, 0, 0), scene);

----------------------------------------

TITLE: Disabling WebGL Context Loss Handling at Engine Creation
DESCRIPTION: Creates a new Babylon.js engine with WebGL context loss handling disabled. This reduces memory usage but removes automatic recovery from context loss events.

LANGUAGE: javascript
CODE:
var engine = new BABYLON.Engine(canvas, true, {doNotHandleContextLost: true});

----------------------------------------

TITLE: Disposing GUIProgress Element in BabylonJS
DESCRIPTION: Method to dispose of the GUIProgress element and remove it from the GUI.

LANGUAGE: javascript
CODE:
dispose() → void

----------------------------------------

TITLE: Creating Color Object for Particles in Babylon.js
DESCRIPTION: Shows how to create a new Color4 object to set particle color when using the positionFunction option.

LANGUAGE: javascript
CODE:
particle.color = new BABYLON.Color4(0.25, 0.333, 0.67, 0.88);

----------------------------------------

TITLE: Adjusting Ground Position in Babylon.js
DESCRIPTION: Slightly adjusts the position of the large ground to prevent flickering when overlapping with the village ground.

LANGUAGE: javascript
CODE:
largeGround.position.y = -0.01;

----------------------------------------

TITLE: Implementing Camera Rotation Triggers in Babylon.js
DESCRIPTION: This snippet shows how to implement camera rotation triggers in a Babylon.js game. It handles left/right rotation when the player enters specific trigger areas, using mesh intersection checks.

LANGUAGE: javascript
CODE:
if (this.mesh.intersectsMesh(this.scene.getMeshByName("cornerTrigger"))) {
    if (this._input.horizontalAxis > 0) {
        this._camRoot.rotation = Vector3.Lerp(this._camRoot.rotation, new Vector3(this._camRoot.rotation.x, Math.PI / 2, this._camRoot.rotation.z), 0.4);
    } else if (this._input.horizontalAxis < 0) {
        this._camRoot.rotation = Vector3.Lerp(this._camRoot.rotation, new Vector3(this._camRoot.rotation.x, Math.PI, this._camRoot.rotation.z), 0.4);
    }
}

----------------------------------------

TITLE: Setting Visibility of GUITextfield in BabylonJS
DESCRIPTION: Method to set the visibility of the GUITextfield, with an optional fade effect.

LANGUAGE: javascript
CODE:
setVisible(bool, fade) → void

----------------------------------------

TITLE: Creating Motion Blur Post Process in Babylon.js
DESCRIPTION: This snippet demonstrates how to create a motion blur post-process in Babylon.js. It initializes the effect with a name, scene, aspect ratio, and camera.

LANGUAGE: javascript
CODE:
var motionblur = new BABYLON.MotionBlurPostProcess(
    "mb", // The name of the effect.
    scene, // The scene containing the objects to blur according to their velocity.
    1.0, // The required width/height ratio to downsize to before computing the render pass.
    camera // The camera to apply the render pass to.
);

----------------------------------------

TITLE: Updating Mesh Matrix in Fast Snapshot Rendering Mode
DESCRIPTION: Shows how to update the position, rotation, scaling, or visibility of a mesh in fast snapshot rendering mode. The transferToEffect method is called to update the uniform buffer with the new world matrix.

LANGUAGE: javascript
CODE:
mesh.transferToEffect(world);

----------------------------------------

TITLE: Installing babylon-mmd with npm
DESCRIPTION: Command to install babylon-mmd and its dependencies using npm for ES6 module usage.

LANGUAGE: bash
CODE:
npm add @babylonjs/core @babylonjs/havok babylon-mmd

----------------------------------------

TITLE: Calculating Earth-like Gravity in Babylon.js
DESCRIPTION: Calculates a gravity vector that approximates Earth's gravity based on assumed frames per second.

LANGUAGE: javascript
CODE:
const assumedFramesPerSecond = 60;
const earthGravity = -9.81;
scene.gravity = new BABYLON.Vector3(0, earthGravity / assumedFramesPerSecond, 0);

----------------------------------------

TITLE: Loading TexturePacker from JSON in Babylon.js
DESCRIPTION: Illustrates how to create a blank TexturePacker and load it from a JSON string, using promises to handle success and error cases.

LANGUAGE: javascript
CODE:
let pack = new BABYLON.TexturePacker("", [], {}, scene);
pack.updateFromJSON(jsonString).then(success).catch(error);

----------------------------------------

TITLE: Event-Based Sound Playback in Babylon.js
DESCRIPTION: Shows how to play sounds in response to mouse clicks and keyboard events.

LANGUAGE: javascript
CODE:
const gunshot = new BABYLON.Sound("gunshot", "sounds/gunshot.wav", scene);

window.addEventListener("mousedown", function (evt) {
  // left click to fire
  if (evt.button === 0) {
    gunshot.play();
  }
});

window.addEventListener("keydown", function (evt) {
  // Press space key to fire
  if (evt.keyCode === 32) {
    gunshot.play();
  }
});

----------------------------------------

TITLE: Creating Basic Physics Joint
DESCRIPTION: Basic implementation of creating and connecting a physics joint between two bodies in Babylon.js. The joint type and joint data are specified when creating the joint.

LANGUAGE: javascript
CODE:
var joint = new BABYLON.PhysicsJoint(
  BABYLON.PhysicsJoint.TYPE_OF_JOINT,
  jointData
);

mainImpostor.addJoint(connectedImpostor, joint);

----------------------------------------

TITLE: Configuring Simplification Settings in Babylon.js
DESCRIPTION: This snippet shows how to create an array of simplification settings for the Auto-LOD system. It demonstrates both JavaScript and TypeScript approaches.

LANGUAGE: javascript
CODE:
[
  { quality: 0.9, distance: 25, optimizeMesh: true },
  { quality: 0.3, distance: 50, optimizeMesh: true },
];

LANGUAGE: typescript
CODE:
const settings: Array<ISimplificationSettings> = []; //in JS: const settings = [];
settings.push(new BABYLON.SimplificationSettings(0.8, 60));
settings.push(new BABYLON.SimplificationSettings(0.4, 150));

----------------------------------------

TITLE: Vertex Manipulation in SPS
DESCRIPTION: Demonstrates how to modify individual vertex positions of particles using a vertex function.

LANGUAGE: javascript
CODE:
var myVertexFunction = function(particle, vertex, i) {
  vertex.x *= Math.random() + 1;
};
SPS.addShape(box, 150, { vertexFunction: myVertexFunction });
SPS.buildMesh();

----------------------------------------

TITLE: Creating Lathe Fountain Mesh in Babylon.js
DESCRIPTION: Uses the CreateLathe method from Babylon.js MeshBuilder to create a fountain mesh. The method takes the previously defined fountainProfile as the shape and sets the mesh to be double-sided.

LANGUAGE: javascript
CODE:
const fountain = BABYLON.MeshBuilder.CreateLathe("fountain", {shape: fountainProfile, sideOrientation: BABYLON.Mesh.DOUBLESIDE}, scene);

----------------------------------------

TITLE: Extracting and Cloning Animation Groups in BabylonJS
DESCRIPTION: This code snippet demonstrates how to extract animations from imported assets and create new animation groups for lanterns in a BabylonJS game.

LANGUAGE: javascript
CODE:
const importedAnims = res.animationGroups;
let animation = [];
animation.push(importedAnims[0].targetedAnimations[0].animation);
importedAnims[0].dispose();
//create new animation group
let animGroup = new AnimationGroup("lanternAnimGroup");
animGroup.addTargetedAnimation(animation[0], res.meshes[1]);
return {
        //..other meshes,
        animationGroups: animGroup
        }

----------------------------------------

TITLE: Finding Selected Option in GUISelect
DESCRIPTION: Method to find the currently selected option in the GUISelect. It can optionally return the index of the selected option.

LANGUAGE: javascript
CODE:
findOptionSelected(bool: withIndex)

----------------------------------------

TITLE: Basic Babylon.js Viewer Usage
DESCRIPTION: Reference to a CodePen example showing basic usage of the Babylon Viewer in HTML

LANGUAGE: html
CODE:
<CodePen pen="ogvbyyW" tab="html,result" title="Babylon Viewer Basics" />

----------------------------------------

TITLE: Disposing GUIWindow in BabylonJS
DESCRIPTION: Method to dispose of the GUIWindow and delete its element.

LANGUAGE: javascript
CODE:
dispose() → void

----------------------------------------

TITLE: SPS Variable Management
DESCRIPTION: Example showing how to use the SPS.vars property for storing reusable variables that get properly cleaned up when the SPS is disposed.

LANGUAGE: javascript
CODE:
SPS.vars.tempVector = new BABYLON.Vector3(0, 0, 0);
// ...
SPS.dispose(); // cleans explicitly all your SPS.vars !

----------------------------------------

TITLE: Accessing Babylon Engine, Scene, and Camera Objects
DESCRIPTION: This code demonstrates how to access the Babylon Engine, Scene, and Camera objects from a Babylon.js Viewer instance.

LANGUAGE: javascript
CODE:
let viewer = getMeMyViewer();
viewer.sceneManager.scene instanceOf BABYLON.Scene; // true
viewer.engine instanceOf BABYLON.Engine; // true
viewer.sceneManager.camera instanceOf BABYLON.ArcRotateCamera; // true

----------------------------------------

TITLE: Enabling Teleport Mode Prestep in Babylon.js
DESCRIPTION: This snippet demonstrates how to enable the teleport mode prestep for a physics body in Babylon.js. It sets the disablePreStep property to false, which activates the teleport mode.

LANGUAGE: javascript
CODE:
aggregate.body.disablePreStep = false;

----------------------------------------

TITLE: Reusing Shapes with Physics Aggregates in Babylon.js
DESCRIPTION: This snippet shows how to reuse shapes when creating multiple Physics Aggregates in Babylon.js. It creates two sphere meshes and two aggregates, with the second aggregate reusing the shape from the first one for better performance.

LANGUAGE: javascript
CODE:
const sphere = BABYLON.Mesh.CreateSphere("sphere", 16, 2, scene);
const sphere2 = sphere.clone("sphere2");

const aggregate = new BABYLON.PhysicsAggregate(sphere, BABYLON.PhysicsShapeType.SPHERE, { mass: 1 }, scene);
const aggregate2 = new BABYLON.PhysicsAggregate(sphere2, aggregate.shape, { mass: 1 }, scene);

----------------------------------------

TITLE: Applying Fade-Out Effect to GUI Elements in JavaScript
DESCRIPTION: Applies a fade-out effect to a specified GUI element. This method can be used to smoothly hide GUI components.

LANGUAGE: javascript
CODE:
fadeOut(element)

----------------------------------------

TITLE: Enabling Offline Support in Babylon.js
DESCRIPTION: Configure the Babylon.js engine to enable offline support and IndexedDB storage. This is required for caching resources and enabling offline functionality.

LANGUAGE: javascript
CODE:
engine.enableOfflineSupport = true;
BABYLON.Database.IDBStorageEnabled = true;

----------------------------------------

TITLE: Importing PMX Model in Babylon.js
DESCRIPTION: TypeScript code to import a PMX model using SceneLoader.ImportMeshAsync in Babylon.js.

LANGUAGE: typescript
CODE:
import "babylon-mmd/esm/Loader/pmxLoader"; // side effect import

const mmdMesh = await SceneLoader.ImportMeshAsync(undefined, "your_model_path.pmx", undefined, scene).then((result) => result.meshes[0]);

----------------------------------------

TITLE: Adding CloudBis Texture to Test Page in JavaScript
DESCRIPTION: This JavaScript code snippet shows how to add the CloudBis procedural texture to the test page. It creates an instance of the texture and updates the UI controls to include the new texture option.

LANGUAGE: JavaScript
CODE:
const cloudBis = new BABYLON.CloudBisProceduralTexture("cloudPTBis", 256, scene);

gui.add(options, "texture", ["default", "fire", "wood", "cloud", "grass", "road", "brick", "marble", "starfield", "cloudBis"]).onFinishChange(function () {
  resetPTOptions();
  switch (options.texture) {
    // ... (other cases)
    case "cloudBis":
      currentTexture = cloudBis;
      addPToptions(cloudBis, ['skyColor', 'cloudColor']);
      break;
    // ... (default case)
  }

  std.diffuseTexture = currentTexture;
  window.enableTexture(options.texture);
});

----------------------------------------

TITLE: Setting Visibility of All GUI Elements in JavaScript
DESCRIPTION: Sets the visibility of all GUI elements managed by the GUIManager. The method takes a boolean parameter for visibility and an optional fade parameter for smooth transitions.

LANGUAGE: javascript
CODE:
setVisible(bool, fade)

----------------------------------------

TITLE: Accessing Vertex Properties in Babylon.js
DESCRIPTION: Shows the basic vertex properties that can be accessed and modified for solid particles including position, color and UV coordinates.

LANGUAGE: javascript
CODE:
vertex.position: Vector3 (x, y, z)
vertex.color: Color4 (r, g, b, a)
vertex.uv: Vector2 (x, y)

----------------------------------------

TITLE: Importing Digital Rain Post Process Script in HTML
DESCRIPTION: This snippet shows how to include the Digital Rain Post Process script in an HTML file. It's a prerequisite for using the effect in a Babylon.js scene.

LANGUAGE: html
CODE:
<script src="babylon.digitalRainPostProcess.js"></script>

----------------------------------------

TITLE: Disposing GUIPanel in BabylonJS
DESCRIPTION: Method to dispose of the GUIPanel and delete the element. It takes no parameters and returns void.

LANGUAGE: javascript
CODE:
dispose() → void

----------------------------------------

TITLE: Clearing Cached Texture Buffers in Babylon.js
DESCRIPTION: Removes cached texture buffer data used for serialization and rebuilding. This frees memory but prevents texture serialization and rebuilding.

LANGUAGE: javascript
CODE:
scene.cleanCachedTextureBuffer();

----------------------------------------

TITLE: Basic Mesh Digestion in Babylon.js
DESCRIPTION: Creates a torus knot mesh and digests it into particles using the Solid Particle System. Each facet of the mesh becomes a particle by default.

LANGUAGE: javascript
CODE:
var model = BABYLON.MeshBuilder.CreateTorusKnot("s", { radius: 20, tube: 6, tubularSegments: 64, radialSegments: 128 }, scene);
SPS.digest(model);
model.dispose();
SPS.buildMesh();

----------------------------------------

TITLE: Replacing Default UI with Slots in Babylon Viewer
DESCRIPTION: This HTML snippet demonstrates how to use slots to completely replace the default UI of the Babylon Viewer. It shows examples for replacing both the progress bar and the tool bar.

LANGUAGE: html
CODE:
<babylon-viewer>
  <div slot="progress-bar">
    <!-- Custom progress bar HTML -->
  </div>
  <div slot="tool-bar">
    <!-- Custom tool bar HTML -->
  </div>
</babylon-viewer>

----------------------------------------

TITLE: Creating GPU Particle System with Particle Helper in JavaScript
DESCRIPTION: Creates a GPU-accelerated particle system using the Particle Helper. The third parameter 'true' enables GPU particle processing for better performance.

LANGUAGE: javascript
CODE:
BABYLON.ParticleHelper.CreateAsync("sun", scene, true).then((set) => {
    set.start();
});

----------------------------------------

TITLE: Configuring Ragdoll Physics Shape Definitions
DESCRIPTION: Defines the physical properties and bone mappings for ragdoll components. Includes settings for size, rotation constraints, and positioning offsets for different body parts.

LANGUAGE: javascript
CODE:
const config = [
            { bones: ["root"], size: 0.6, boxOffset: 0.1 },
            // Arms.
            {
                bones: ["arm_r", "arm_l"],
                depth: 0.3,
                size: 0.3,
                width: 0.6,
                rotationAxis: BABYLON.Axis.Z,
                min: -1,
                max: 1,
                boxOffset: 0.3,
                boneOffsetAxis: BABYLON.Axis.X
            }
            ...

----------------------------------------

TITLE: Alignment Constants for Horizontal Positioning
DESCRIPTION: Constants for horizontal alignment of tiles on the plane.

LANGUAGE: javascript
CODE:
BABYLON.Mesh.CENTER,
BABYLON.Mesh.LEFT,
BABYLON.Mesh.RIGHT

----------------------------------------

TITLE: Declaring Navigation SceneManager Interface in TypeScript
DESCRIPTION: TypeScript declaration for the SceneManager class that provides navigation mesh functionality including path finding, agent movement, and navigation mesh management.

LANGUAGE: typescript
CODE:
declare module BABYLON {
    class SceneManager {
        /** Gets the native babylon mesh navigation tool */
        getNavigationTool(): Navigation;

        /** Gets the current navigation zone */
        getNavigationZone(): string;

        /** Finds a navigation path and returns a array of navigation positions */
        findNavigationPath(origin: BABYLON.Vector3, destination: BABYLON.Vector3): BABYLON.Vector3[];

        /** Gets true if the scene has a navigation mesh */
        hasNavigationMesh(): boolean;

        /** Returns the current scene's navigation mesh */
        getNavigationMesh(): BABYLON.AbstractMesh;

        /** Builds the current scene's navigation nodes */
        buildNavigationMesh(mesh: BABYLON.AbstractMesh): any;

        /** Returns a picked navigation point */
        getNavigationPoint(position: BABYLON.Vector3, raise?: number, length?: number): BABYLON.Vector3;

        /** Moves the specified navigation again along a path of positions */
        moveNavigationAgent(agent: BABYLON.AbstractMesh, path: BABYLON.Vector3[], speed?: number, loop?: boolean, callback?: () => void): void;

        /** Returns an array of navigation agents */
        getNavigationAgents(): BABYLON.Mesh[];

        /** Returns the specfied navigation agent info */
        getNavigationAgentInfo(agent: BABYLON.AbstractMesh): BABYLON.NavigationAgent;

        /** Returns the current scene's navigation area table */
        getNavigationAreaTable(): BABYLON.INavigationArea[];

        /** Returns the current scene's navigation area indexes */
        getNavigationAreaIndexes(): number[];

        /** Returns the current scene's navigation area names */
        getNavigationAreaName(index: number): string;

        /** Returns the current scene's navigation area cost */
        getNavigationAreaCost(index: number): number;
    }
}

----------------------------------------

TITLE: Git Repository Clone Command
DESCRIPTION: Command to clone the Babylon.js repository to local machine

LANGUAGE: bash
CODE:
git clone _**your repository address**_

----------------------------------------

TITLE: Adding Elements to a GUIGroup in BabylonJS
DESCRIPTION: Adds a GUIElement to the GUIGroup. This method allows you to organize multiple GUI elements within a single group for easier management.

LANGUAGE: typescript
CODE:
add(GUIElement) → void

----------------------------------------

TITLE: Creating an Expandable Solid Particle System in Babylon.js
DESCRIPTION: Demonstrates how to create an expandable Solid Particle System in Babylon.js using the 'expandable' option.

LANGUAGE: javascript
CODE:
var sps = new BABYLON.SolidParticleSystem("sps", scene, { expandable: true });

----------------------------------------

TITLE: Loading Meshes from GitHub in Babylon.js
DESCRIPTION: This snippet demonstrates how to load meshes from a GitHub repository using the raw.githubusercontent.com URL. It uses the SceneLoader.ImportMesh method to import a 3D model into the scene.

LANGUAGE: javascript
CODE:
BABYLON.SceneLoader.ImportMesh("", "https://raw.githubusercontent.com/BabylonJS/MeshesLibrary/master/", "PBR_Spheres.glb", scene);

----------------------------------------

TITLE: Rollup Chunk Configuration
DESCRIPTION: Rollup configuration for controlling chunk generation equivalent to the webpack configuration

LANGUAGE: javascript
CODE:
export default {
  // ...
  output: {
    dir: "output",
    manualChunks: (id) => {
      if (id.includes("ShadersWGSL")) {
        return "webgpu-shaders";
      } else if (id.includes("Shaders")) {
        return "webgl-shaders";
      } else if (id.includes("WebGPU")) {
        return "webgpu-extensions";
      } else if (id.includes("babylonjs")) {
        return "babylonjs";
      }
    },
  },
};

----------------------------------------

TITLE: Enabling Texture Transparency in Babylon.js
DESCRIPTION: Shows how to enable texture transparency for a Solid Particle System mesh.

LANGUAGE: javascript
CODE:
SPS.mesh.material.diffuseTexture.hasAlpha = true;

----------------------------------------

TITLE: Using Custom Babylon Viewer Element in HTML
DESCRIPTION: Shows how to use a custom-configured Babylon Viewer element in HTML markup.

LANGUAGE: html
CODE:
<my-babylon-viewer source="...">
</my-babylon-viewer>

----------------------------------------

TITLE: Using Diffuse Texture for Light Source in Babylon.js Volumetric Light Scattering
DESCRIPTION: Sets up the Volumetric Light Scattering effect to use the diffuse texture of the light source mesh for the light's color.

LANGUAGE: javascript
CODE:
vls.useDiffuseColor = false; // False as default
vls.mesh.material.diffuseTexture= new BABYLON.Texture(...);

----------------------------------------

TITLE: Retrieving Custom Mesh Position in Babylon.js Volumetric Light Scattering
DESCRIPTION: Obtains the current custom position set for the light source mesh in the Volumetric Light Scattering effect.

LANGUAGE: javascript
CODE:
const position = vls.getCustomMeshPosition();

----------------------------------------

TITLE: Retrieving Custom Mesh Position in Babylon.js Volumetric Light Scattering
DESCRIPTION: Obtains the current custom position set for the light source mesh in the Volumetric Light Scattering effect.

LANGUAGE: javascript
CODE:
const position = vls.getCustomMeshPosition();

----------------------------------------

TITLE: Loading Models from String Data in Babylon.js
DESCRIPTION: Examples of loading 3D models from string data, including base64 encoded binary data for GLB files.

LANGUAGE: typescript
CODE:
await BABYLON.AppendSceneAsync("data:" + gltfString, scene);

LANGUAGE: typescript
CODE:
const base64_model_content = "data:;base64,BASE 64 ENCODED DATA...";
await BABYLON.AppendSceneAsync(base64_model_content, scene);

LANGUAGE: typescript
CODE:
const objDataURL = "data:;base64,ZyB0ZXRyYWhlZHJvbgoKdiAx...";
await BABYLON.AppendSceneAsync(objDataURL, scene, { pluginExtension: "obj" });

----------------------------------------

TITLE: GreasedLine with Variable Width
DESCRIPTION: Create a GreasedLine with varying width along its length

LANGUAGE: javascript
CODE:
const points = [-1, 0, 0, -0.5, 0, 0, 0, 0, 0, 0.5, 0, 0, 1, 0, 0];
const widths = [1, 1, 2, 2, 3, 3, 2, 2];
const line = BABYLON.CreateGreaseLine("line", { points }, [widths]);

----------------------------------------

TITLE: Setting up a Motor on a Hinge Joint in Babylon.js
DESCRIPTION: This code demonstrates how to set up a motor on a hinge joint in Babylon.js. It creates a HingeJoint, adds it to the physics impostors, and sets the motor parameters.

LANGUAGE: javascript
CODE:
var joint1 = new BABYLON.HingeJoint({
    mainPivot: new BABYLON.Vector3(0, 0, 0), // Pivot on the main mesh
    connectedPivot: new BABYLON.Vector3(0, 0, 0), // pivot (connecting point) on the connected pivot
    mainAxis: new BABYLON.Vector3(0, 0, -1), // the hinge will turn on the Z axis
    connectedAxis: new BABYLON.Vector3(0, 0, -1) // Same as above - Z axis on the connected mesh
});
holder.physicsImpostor.addJoint(wheel.physicsImpostor, joint1); // attach holder (main) and wheel using the defined hinge joint

joint1.setMotor(3, 20); // start turning!

----------------------------------------

TITLE: Defining a Mesh in .babylon Format
DESCRIPTION: Illustrates how meshes are defined in the .babylon file, including properties for geometry, material, position, and animations.

LANGUAGE: javascript
CODE:
{
    "name": string,
    "id": string,
    "materialId": string,
    "geometryId": string,
    "position": vector3,
    "rotation": vector3,
    "scaling": vector3,
    "isVisible": boolean,
    "checkCollisions": boolean,
    "receiveShadows": boolean,
    "subMeshes": [],
    "animations": []
}

----------------------------------------

TITLE: Adding an Element to GUIFieldset in BabylonJS
DESCRIPTION: Method to add an element to the GUIFieldset.

LANGUAGE: javascript
CODE:
add(element) → void

----------------------------------------

TITLE: Setting Particle Gravity in Babylon.js
DESCRIPTION: Applies a gravity vector to particles, affecting their movement over time.

LANGUAGE: javascript
CODE:
particleSystem.gravity = new BABYLON.Vector3(0, -9.81, 0);

----------------------------------------

TITLE: Retrieving Initialized Babylon.js Viewer Instances
DESCRIPTION: This code shows two methods to retrieve already initialized Babylon.js Viewer instances, either by ID or by HTML element.

LANGUAGE: javascript
CODE:
// using the id
let viewer = BabylonViewer.viewerManager.getViewerById("viewer-id");
// using the viewer HTML element
let element = document.querySelector("babylon");
let viewer2 = BabylonViewer.viewerManager.getViewerByHTMLElement(element);

----------------------------------------

TITLE: Defining Basic Types in .babylon Format
DESCRIPTION: Demonstrates how basic types like Vector3, Vector4, Color3, Matrix, and Boolean are represented in the .babylon file format.

LANGUAGE: javascript
CODE:
{
    "Vector3": [1.1, 2.2, 3.3],
    "Vector4": [1.1, 2.2, 3.3, 4.4],
    "Color3": [0.2, 0.3, 0.5],
    "Matrix": [/* 16 floats */],
    "Boolean": true
}

----------------------------------------

TITLE: Importing Models with Scene Helpers
DESCRIPTION: Shows how to import 3D models and set up default camera and environment settings in the callback.

LANGUAGE: javascript
CODE:
BABYLON.SceneLoader.Append("https://www.babylonjs.com/assets/DamagedHelmet/glTF/", "DamagedHelmet.gltf", scene, function (meshes) {
  scene.createDefaultCameraOrLight(true, true, true);
  scene.createDefaultEnvironment();
});

----------------------------------------

TITLE: Using GetVariable Block in Flow Graph with Babylon.js
DESCRIPTION: This example shows how to use a GetVariable block in a flow graph to store and reuse a message. It logs the message to the console when the scene is loaded, demonstrating variable usage in flow graphs.

LANGUAGE: javascript
CODE:
const coord = new FlowGraphCoordinator({ scene });
const graph = coord.createGraph();
graph.createContext();
const sceneReady = new FlowGraphSceneReadyEventBlock();
graph.addEventBlock(sceneReady);

const log = new FlowGraphConsoleLogBlock();
const getVariableBlock = new FlowGraphGetVariableBlock({
  variable: "sceneReadyLogMessage",
  initialValue: "Hello Scene",
});
log.message.connectTo(getVariableBlock.value);
sceneReady.done.connectTo(log.in);

coord.start();

----------------------------------------

TITLE: Creating Control Groups in Babylon.js Selection Panel
DESCRIPTION: Demonstrates the creation of different types of control groups (checkbox, radio, slider) for use in selection panels.

LANGUAGE: javascript
CODE:
const transformGroup = new BABYLON.GUI.CheckboxGroup("Transformation");
const colorGroup = new BABYLON.GUI.RadioGroup("Color");
const rotateGroup = new BABYLON.GUI.SliderGroup("Rotation");

----------------------------------------

TITLE: Styling Babylon Viewer with CSS Variables
DESCRIPTION: This snippet demonstrates how to use CSS variables to customize the basic styling of the Babylon Viewer's default UI. It includes variables for foreground color, background hue, saturation, lightness, and opacity.

LANGUAGE: css
CODE:
babylon-viewer {
  --ui-foreground-color: #ffffff;
  --ui-background-hue: 200;
  --ui-background-saturation: 100%;
  --ui-background-lightness: 50%;
  --ui-background-opacity: 0.5;
}

----------------------------------------

TITLE: Comparing Sphere Shading in Babylon.js
DESCRIPTION: This playground compares the shading of spheres with shared normals and flat-shaded normals. It demonstrates how shared normals produce a rounder-looking sphere, while flat shading shows individual facets.

LANGUAGE: JavaScript
CODE:
<Playground id="#1H7L5C#38" title="Comparing Shading of Spheres" description="Simple example comparing shading of spheres."/>

----------------------------------------

TITLE: Comparing Sphere Shading in Babylon.js
DESCRIPTION: This playground compares the shading of spheres with shared normals and flat-shaded normals. It demonstrates how shared normals produce a rounder-looking sphere, while flat shading shows individual facets.

LANGUAGE: JavaScript
CODE:
<Playground id="#1H7L5C#38" title="Comparing Shading of Spheres" description="Simple example comparing shading of spheres."/>

----------------------------------------

TITLE: Creating Post Process from Node Material
DESCRIPTION: Creates a new post-process instance from a node material by attaching it to a camera.

LANGUAGE: javascript
CODE:
const postProcess = nodeMaterial.createPostProcess(camera);

----------------------------------------

TITLE: Handling Canvas Resize in Worker Thread
DESCRIPTION: Worker thread code that receives and applies new canvas dimensions from the main thread.

LANGUAGE: javascript
CODE:
var engine;
onmessage = function (evt) {
  if (evt.data.width) {
    canvas.width = evt.data.width;
    canvas.height = evt.data.height;
  }
};

----------------------------------------

TITLE: Implementing a Constructor in Babylon.js
DESCRIPTION: Example of how to implement and document a constructor for a Solid Particle object in Babylon.js. The constructor initializes various properties of the particle.

LANGUAGE: javascript
CODE:
/**
 * Creates a Solid Particle object
 * Don't create particles manually, use instead the Solid Particle System internal tools like _addParticle()
 * @param particleIndex is the particle index in the Solid Particle System pool. It's also the particle identifier
 * @param positionIndex is the starting index of the particle vertices in the SPS "positions" array
 * @param indiceIndex is the starting index of the particle indices in the SPS "indices" array
 * @param model is a reference to the model shape on what the particle is designed.
 * @param shapeId is the model shape identifier in the SPS
 * @param idxInShape is the index of the particle in the current model (ex: the 10th box of addShape(box, 30))
 * @param modelBoundingInfo is the reference to the model BoundingInfo used for intersection computations
 */
constructor(particleIndex: number, positionIndex: number, indiceIndex: number, model: Nullable<ModelShape>, shapeId: number, idxInShape: number, sps: SolidParticleSystem, modelBoundingInfo: Nullable<BoundingInfo> = null) {
    this.idx = particleIndex;
    this._pos = positionIndex;
    this._ind = indiceIndex;
    this._model = <ModelShape>model;
    this.shapeId = shapeId;
    this.idxInShape = idxInShape;
    this._sps = sps;
    if (modelBoundingInfo) {
        this._modelBoundingInfo = modelBoundingInfo;
        this._boundingInfo = new BoundingInfo(modelBoundingInfo.minimum, modelBoundingInfo.maximum);
    }
}

----------------------------------------

TITLE: GLSL Fluid Rendering Thickness Check
DESCRIPTION: GLSL shader code checking fluid thickness and depth values to determine visibility. Handles both fixed thickness and texture-based thickness scenarios.

LANGUAGE: glsl
CODE:
#ifndef FLUIDRENDERING_FIXED_THICKNESS
    if (depth >= cameraFar || depth <= 0. || thickness <= minimumThickness) {
#else
    if (depth >= cameraFar || depth <= 0. || bgDepth <= depthNonLinear) {
#endif
        vec3 backColor = texture2D(textureSampler, texCoord).rgb ;
        glFragColor = vec4(backColor, 1.) ;
        return;
    }

----------------------------------------

TITLE: Configuring Git User Settings
DESCRIPTION: Initial Git configuration commands to set up username and email globally

LANGUAGE: bash
CODE:
git config --global user.name "John Doe"
git config --global user.email johndoe@example.com

----------------------------------------

TITLE: Defining TypeScript JSX Type Declarations for Babylon Viewer in React
DESCRIPTION: This code snippet demonstrates how to create TypeScript type declarations for the Babylon Viewer HTML3DElement to be used in React JSX. It extends React's HTMLAttributes and declares the 'babylon-viewer' element with custom attributes.

LANGUAGE: typescript
CODE:
interface HTML3DElementAttributes
  extends React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement> {
  source?: string;
  environment?: string;
}

declare global {
  namespace JSX {
    interface IntrinsicElements {
      'babylon-viewer': HTML3DElementAttributes;
    }
  }
}

----------------------------------------

TITLE: Implementing LOD with Instances in Babylon.js
DESCRIPTION: This snippet shows how to use LOD with instances in Babylon.js. It creates multiple instances of a torus knot mesh with different LOD levels and positions them in a 3D grid.

LANGUAGE: javascript
CODE:
const count = 3;
const scale = 4;

const knot00 = BABYLON.Mesh.CreateTorusKnot("knot0", 0.5, 0.2, 128, 64, 2, 3, scene);
const knot01 = BABYLON.Mesh.CreateTorusKnot("knot1", 0.5, 0.2, 32, 16, 2, 3, scene);
const knot02 = BABYLON.Mesh.CreateTorusKnot("knot2", 0.5, 0.2, 24, 12, 2, 3, scene);
const knot03 = BABYLON.Mesh.CreateTorusKnot("knot3", 0.5, 0.2, 16, 8, 2, 3, scene);

knot00.setEnabled(false);

knot00.addLODLevel(15, knot01);
knot00.addLODLevel(30, knot02);
knot00.addLODLevel(45, knot03);
knot00.addLODLevel(55, null);

for (let x = -count; x <= count; x++) {
    for (let y = -count; y <= count; y++) {
        for (let z = 5; z < 10; z++) {
            const knot = knot00.createInstance("knotI"),
            knot.position = new BABYLON.Vector3(x * scale, y * scale, z * scale);
        }
    }
}

----------------------------------------

TITLE: Implementing an Execution Block in Flow Graph
DESCRIPTION: Demonstrates the implementation of an execution block (BranchBlock) that evaluates a condition and activates one of two branches.

LANGUAGE: javascript
CODE:
export class FlowGraphBranchBlock extends FlowGraphExecutionBlock {
    public readonly condition: FlowGraphDataConnection<boolean>;
    public readonly onTrue: FlowGraphSignalConnection;
    public readonly onFalse: FlowGraphSignalConnection;

    constructor(config?: IFlowGraphBlockConfiguration) {
        super(config);

        this.condition = this.registerDataInput("condition", RichTypeBoolean);
        this.onTrue = this._registerSignalOutput("onTrue");
        this.onFalse = this._registerSignalOutput("onFalse");
    }

    public _execute(context: FlowGraphContext): void {
        if (this.condition.getValue(context)) {
            this.onTrue._activateSignal(context);
        } else {
            this.onFalse._activateSignal(context);
        }
    }

    public override getClassName(): string {
        return FlowGraphBlockNames.Branch;
    }
}

----------------------------------------

TITLE: Per-Letter UV Mapping for 3D Text in Babylon.js
DESCRIPTION: This snippet demonstrates how to apply UV mapping per letter in a 3D text mesh using the perLetterFaceUV callback function in MeshBuilder.CreateText.

LANGUAGE: javascript
CODE:
const letterCount = 10;
    const step = 1 / letterCount;
    var myText = BABYLON.MeshBuilder.CreateText("myText", "HELLO WORLD", fontData, {
        size: 16,
        resolution: 64,
        depth: 10,
        perLetterFaceUV: (index) => {
            const startX = index * step;
            return [
                new BABYLON.Vector4(startX, 0, startX + step, 1),
                new BABYLON.Vector4(startX, 0, startX + step, 1),
                new BABYLON.Vector4(startX, 0, startX + step, 1),
            ];
        }
    });

----------------------------------------

TITLE: Babylon.js Viewer Camera Pose Configuration
DESCRIPTION: Example showing how to explicitly set the initial camera position and target for a Babylon.js viewer element, particularly useful for splat rendering.

LANGUAGE: html
CODE:
<babylon-viewer camera-orbit="3.14 auto 5" camera-target="auto 2 auto">

----------------------------------------

TITLE: Implementing Async Scene Creation in Vue 3
DESCRIPTION: Example of how to handle asynchronous scene creation in a Vue 3 component.

LANGUAGE: javascript
CODE:
onMounted(async () => {
  if (bjsCanvas.value) {
    await createScene(bjsCanvas.value);
  }
});

----------------------------------------

TITLE: Creating Custom Polyhedron Using MeshBuilder
DESCRIPTION: Demonstrates how to create a custom polyhedron using both MeshBuilder and Mesh classes in Babylon.js. Shows implementation with the heptagonal prism data structure.

LANGUAGE: javascript
CODE:
const heptagonalPrism = { "name":"Heptagonal Prism", "category":["Prism"], "vertex":[[0,0,1.090071],[0.796065,0,0.7446715],[-0.1498633,0.7818315,0.7446715],[-0.7396399,-0.2943675,0.7446715],[0.6462017,0.7818315,0.3992718],[1.049102,-0.2943675,-0.03143449],[-0.8895032,0.487464,0.3992718],[-0.8658909,-0.6614378,-0.03143449],[0.8992386,0.487464,-0.3768342],[0.5685687,-0.6614378,-0.6538232],[-1.015754,0.1203937,-0.3768342],[-0.2836832,-0.8247995,-0.6538232],[0.4187054,0.1203937,-0.9992228],[-0.4335465,-0.042968,-0.9992228]],
"face":[[0,1,4,2],[0,2,6,3],[1,5,8,4],[3,6,10,7],[5,9,12,8],[7,10,13,11],[9,11,13,12],[0,3,7,11,9,5,1],[2,4,8,12,13,10,6]]};

const heptPrism = BABYLON.MeshBuilder.CreatePolyhedron("h", {custom: heptagonalPrism}, scene);

//also possible
const heptPrism1 = BABYLON.Mesh.CreatePolyhedron("h", {custom: heptagonalPrism}, scene);

----------------------------------------

TITLE: Visualization Test Configuration
DESCRIPTION: JSON configuration for adding new visualization tests in Babylon.js

LANGUAGE: json
CODE:
{
  "title": "My new visualization test",
  "playgroundId": "#ABCDEF#12",
  "referenceImage": "nameOfReferenceImage.png",
  "excludedEngines": ["webgl1"],
  "renderCount": 2
}

----------------------------------------

TITLE: Updating Skeleton Animations with LayerMask in Babylon.js TypeScript
DESCRIPTION: Demonstrates how to handle skeleton animations when using layerMask to hide meshes. This solution ensures animated meshes remain properly updated across multiple cameras with different layerMasks by preparing the skeleton before each frame render.

LANGUAGE: typescript
CODE:
let scene: BABYLON.Scene
let avatar: BABYLON.TransformNode;

scene.onBeforeRenderObservable.add(onBeforeRender);

function onBeforeRender(scene:BABYLON.Scene, eventState: BABYLON.EventState){
    const meshes = avatar.getChildMeshes(false);

    meshes.forEach(prepareSkeleton);
}

function prepareSkeleton(mesh:BABYLON.AbstractMesh){
    const skeleton = mesh.skeleton;

    if (!skeleton) return;

    skeleton.prepare();
}

----------------------------------------

TITLE: Preventing Automatic Download of Babylon.js Recorded Video
DESCRIPTION: This example demonstrates how to prevent automatic download of the recorded video and instead handle the video blob data manually.

LANGUAGE: javascript
CODE:
if (BABYLON.VideoRecorder.IsSupported(engine)) {
    var recorder = new BABYLON.VideoRecorder(engine);
    recorder.startRecording(null, 1).then((videoBlob) => {
        // Do Something with the videoBlob.
    });
}

----------------------------------------

TITLE: Creating a Pipe Mesh Using CSG2 in Babylon.js
DESCRIPTION: Illustrates how to use Constructive Solid Geometry (CSG2) to create a complex pipe mesh by subtracting an inner cylinder from an outer cylinder. This function demonstrates the use of CSG2.FromMesh and CSG2.subtract operations.

LANGUAGE: typescript
CODE:
function createPipe(diamInner: number, diamOuter: number, height: number, scene: BABYLON.Scene): BABYLON.Mesh {
  // Create the outer wall using a Cylinder mesh
  const mOuter = BABYLON.MeshBuilder.CreateCylinder(
    "mOuter",
    {
      diameter: diamOuter,
      height: height,
    },
    scene,
  );
  // Create the inner wall using a Cylinder mesh
  const mInner = BABYLON.MeshBuilder.CreateCylinder(
    "mOuter",
    {
      diameter: diamInner,
      height: height,
    },
    scene,
  );
  // Create CSG objects from each mesh
  const outerCSG = BABYLON.CSG2.FromMesh(mOuter);
  const innerCSG = BABYLON.CSG2.FromMesh(mInner);

  // Create a new CSG object by subtracting the inner tube from the outer cylinder
  const pipeCSG = outerCSG.subtract(innerCSG);

  // Create the resulting mesh from the new CSG object
  const mPipe = pipeCSG.toMesh("mPipe", scene);

  // Dispose of the meshes, no longer needed
  mInner.dispose();
  mOuter.dispose();

  outerCSG.dispose();
  innerCSG.dispose();

  // Return the result
  return mPipe;
}

----------------------------------------

TITLE: Initializing PointerDragBehavior in Babylon.js
DESCRIPTION: Creates a PointerDragBehavior instance for dragging a mesh along a specified axis. The behavior can be customized to use object orientation, update the drag plane, and handle drag events.

LANGUAGE: javascript
CODE:
const pointerDragBehavior = new BABYLON.PointerDragBehavior({ dragAxis: new BABYLON.Vector3(0, 1, 0) });

pointerDragBehavior.useObjectOrientationForDragging = false;
pointerDragBehavior.updateDragPlane = false;

pointerDragBehavior.onDragStartObservable.add((event) => {
  console.log("dragStart");
  console.log(event);
});
pointerDragBehavior.onDragObservable.add((event) => {
  console.log("drag");
  console.log(event);
});
pointerDragBehavior.onDragEndObservable.add((event) => {
  console.log("dragEnd");
  console.log(event);
});

pointerDragBehavior.moveAttached = false;
pointerDragBehavior.enabled = false;

----------------------------------------

TITLE: Handlebars Syntax Examples in Babylon Viewer V1
DESCRIPTION: Demonstrates three equivalent ways to define camera behaviors using Handlebars syntax in Babylon Viewer V1. Shows the flexibility of Handlebars in allowing attributes and elements to be used interchangeably.

LANGUAGE: html
CODE:
<babylon camera.behaviors.auto-rotate="0" />

<babylon>
  <camera behaviors.auto-rotate="0" />
</babylon>

<babylon>
  <camera>
    <behaviors auto-rotate="0" />
  </camera>
</babylon>

----------------------------------------

TITLE: Checking Gamepad State in Babylon.js Scene Render Loop
DESCRIPTION: Demonstrates how to continuously check the current state of a gamepad within the scene's render loop in Babylon.js, allowing for real-time response to gamepad input.

LANGUAGE: javascript
CODE:
scene.registerBeforeRender(function () {
    if(gamepad instanceof BABYLON.Xbox360Pad){
        if(gamepad.buttonA){
            sphere.position.y+=0.05
        }
        sphere.position.x+=gamepad.leftStick.x*0.05
    }
}

----------------------------------------

TITLE: Configuring Object Colors and UVs
DESCRIPTION: Demonstrates how to set up color and UV mapping for terrain objects using SPColors and SPUVs arrays.

LANGUAGE: javascript
CODE:
const terrainSub = 100;
const terrainOptions = {
  terrainSub: terrainSub,
  mapData: mapData,
  mapSubX: mapSubX,
  mapSubZ: mapSubZ,
  mapColors: mapColors,
  SPmapData: SPmapData,
  sps: sps,
  SPcolorData: SPcolorData,
  SPuvData: SPuvData,
};
const terrain = new BABYLON.DynamicTerrain("dt", terrainOptions, scene);
terrain.mesh.material = terrainMaterial;
sps.mesh.material = objectMaterial;

----------------------------------------

TITLE: Implementing an Asynchronous Execution Block in Flow Graph
DESCRIPTION: Shows the implementation of an asynchronous execution block (SetDelayBlock) that sets a delay before activating an output signal.

LANGUAGE: javascript
CODE:
export class FlowGraphSetDelayBlock extends FlowGraphAsyncExecutionBlock {
    public static MaxParallelDelayCount = 100;
    public readonly cancel: FlowGraphSignalConnection;
    public readonly duration: FlowGraphDataConnection<number>;
    public readonly lastDelayIndex: FlowGraphDataConnection<number>;

    constructor(config?: IFlowGraphBlockConfiguration) {
        super(config);
        this.cancel = this._registerSignalInput("cancel");
        this.duration = this.registerDataInput("duration", RichTypeNumber);
        this.lastDelayIndex = this.registerDataOutput("lastDelayIndex", RichTypeNumber, -1);
    }

    public _preparePendingTasks(context: FlowGraphContext): void {
        const duration = this.duration.getValue(context);
        if (duration < 0 || isNaN(duration) || !isFinite(duration)) {
            this.error.payload = { message: "Invalid duration" };
            return this.error._activateSignal(context);
        }

        const activeDelays: number = context._getGlobalContextVariable("activeDelays", 0);
        if (activeDelays >= FlowGraphSetDelayBlock.MaxParallelDelayCount) {
            this.error.payload = { message: "Max parallel delays reached" };
            return this.error._activateSignal(context);
        }
        const lastDelayIndex: number = context._getGlobalContextVariable("lastDelayIndex", -1);

        const timers = context._getExecutionVariable(this, "pendingDelays", [] as AdvancedTimer[]);
        const scene = context.configuration.scene;
        const timer: AdvancedTimer = new AdvancedTimer({
            timeout: duration * 1000,
            contextObservable: scene.onBeforeRenderObservable,
            onEnded: () => this._onEnded(timer, context),
        });
        timer.start();
        const newIndex = lastDelayIndex + 1;
        this.lastDelayIndex.setValue(newIndex, context);
        context._setGlobalContextVariable("lastDelayIndex", newIndex);

        timers[newIndex] = timer;
        context._setExecutionVariable(this, "pendingDelays", timers);
    }

    public _cancelPendingTasks(context: FlowGraphContext): void {
        const timers = context._getExecutionVariable(this, "pendingDelays", [] as AdvancedTimer[]);
        for (const timer of timers) {
            timer?.dispose();
        }
        context._deleteExecutionVariable(this, "pendingDelays");
        this.lastDelayIndex.setValue(-1, context);
    }

    public _execute(context: FlowGraphContext, callingSignal: FlowGraphSignalConnection): void {
        if (callingSignal === this.cancel) {
            this._cancelPendingTasks(context);
            return;
        } else {
            this._preparePendingTasks(context);
            this.out._activateSignal(context);
        }
    }

    private _onEnded(timer: AdvancedTimer, context: FlowGraphContext) {
        const timers = context._getExecutionVariable(this, "pendingDelays", [] as AdvancedTimer[]);
        const index = timers.indexOf(timer);
        if (index !== -1) {
            timers.splice(index, 1);
        } else {
            Logger.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list");
        }
        context._removePendingBlock(this);
        this.done._activateSignal(context);
    }
}

----------------------------------------

TITLE: Basic GreasedLine Creation
DESCRIPTION: Create a basic GreasedLine with default settings

LANGUAGE: javascript
CODE:
const points = [-1, 0, 0, 1, 0, 0];
const line = BABYLON.CreateGreasedLine("line", { points });

----------------------------------------

TITLE: Integrating Babylon Viewer Material Variants Selection in HTML
DESCRIPTION: This snippet shows how to include a Babylon.js viewer that allows selection of different material variants for a glTF model.

LANGUAGE: html
CODE:
<CodePen pen="mybVGxP" tab="result" title="Babylon Viewer Material Variants" />

----------------------------------------

TITLE: Checking Mesh Visibility with Layer Masks in Babylon.js
DESCRIPTION: This snippet demonstrates how a bitwise AND operation is used to determine if a mesh is visible to a camera based on their layer masks.

LANGUAGE: javascript
CODE:
mesh.layerMask & (camera.layerMask !== 0);

----------------------------------------

TITLE: Creating Roof Mesh in Babylon.js
DESCRIPTION: This code creates the roof mesh using the roof function, which takes parameters including the roofprint, apexes, planes, rise, height, and UV base. It generates the complete roof structure as a mesh.

LANGUAGE: javascript
CODE:
var roofSection = roof(wholeRoofprint, apexes, planes, 2, height, 5.6);

----------------------------------------

TITLE: Including Specific Meshes in GlowLayer in Babylon.js
DESCRIPTION: Shows how to include only specific meshes in the glow effect using the addIncludedOnlyMesh function.

LANGUAGE: javascript
CODE:
const gl = new BABYLON.GlowLayer("glow", scene);
gl.addIncludedOnlyMesh(mesh);

----------------------------------------

TITLE: Creating Blank Sprite Manager in Babylon.js
DESCRIPTION: Shows how to create a new empty sprite manager by passing '_BLANK' as the snippet ID. This creates a fresh sprite manager instance that can be customized.

LANGUAGE: javascript
CODE:
BABYLON.SpriteManager.CreateFromSnippetAsync("_BLANK", scene);

----------------------------------------

TITLE: Creating Basic Cylinder Mesh in Babylon.js
DESCRIPTION: Creates a cylinder mesh with specified dimensions and tessellation parameters.

LANGUAGE: javascript
CODE:
const cylinder = BABYLON.MeshBuilder.CreateCylinder("mycylinder", { height: 7, diameterTop: 2, diameterBottom: 2, tessellation: 12, subdivisions: 1 }, scene);

----------------------------------------

TITLE: Defining a Public Method in Babylon.js
DESCRIPTION: Example of how to define and document a public method for transferring light data to an effect in Babylon.js. The method updates the effect with the light's direction and color.

LANGUAGE: javascript
CODE:
/**
 * Sets the passed Effect object with the HemisphericLight normalized direction and color and the passed name (string).
 * @param effect The effect to update
 * @param lightIndex The index of the light in the effect to update
 * @returns The hemispheric light
 */
public transferToEffect(effect: Effect, lightIndex: string): HemisphericLight {
    const normalizeDirection = Vector3.Normalize(this.direction);
    this._uniformBuffer.updateFloat4("vLightData",
normalizeDirection.x,
normalizeDirection.y,
normalizeDirection.z,
0.0,
lightIndex);
    this._uniformBuffer.updateColor3("vLightGround", this.groundColor.scale(this.intensity), lightIndex);
    return this;
}

----------------------------------------

TITLE: Defining HotSpots in Babylon.js Viewer HTML
DESCRIPTION: Example of defining surface and world hotspots in HTML for the Babylon.js Viewer. It shows how to set up hotspots for a solar system model.

LANGUAGE: html
CODE:
<babylon-viewer
    model="https://raw.githubusercontent.com/BabylonJS/Assets/master/meshes/SolarSystem/SolarSystem.glb"
    hotspots="{
        'earth': {
            'type': 'surface',
            'mesh': 'Earth',
            'faceId': 280,
            'barycentricCoordinates': [0.4, 0.3, 0.3]
        },
        'overview': {
            'type': 'world',
            'position': [0, 20, 0],
            'normal': [0, -1, 0],
            'cameraOrbit': {
                'alpha': 0,
                'beta': 0,
                'radius': 40
            }
        }
    }"
></babylon-viewer>

----------------------------------------

TITLE: Emission Rate and Lifetime Control in Babylon.js
DESCRIPTION: Methods for controlling particle emission rate and lifetime over system duration. Demonstrates how to vary particle generation and lifespan.

LANGUAGE: javascript
CODE:
particleSystem.targetStopDuration = 8;

particleSystem.addEmitRateGradient(0, 10);
particleSystem.addEmitRateGradient(1.0, 500);

particleSystem.addLifeTimeGradient(0, 0.5);
particleSystem.addLifeTimeGradient(1, 0);

----------------------------------------

TITLE: Particle Collision with Path Visualization in BabylonJS
DESCRIPTION: Demonstrates collision detection and response between two particles, showing their paths before and after collision.

LANGUAGE: javascript
CODE:
PG: <Playground id="#A4HZTV#1" title="Contact and Rebound" description="Shows the first contact position of two particles and their paths before and after collision."/>

----------------------------------------

TITLE: Template Configuration Interface Definition
DESCRIPTION: TypeScript interface defining the structure for template configuration including location, HTML content, parameters, and event handlers.

LANGUAGE: javascript
CODE:
export interface ITemplateConfiguration {
  location?: string; // #template-id OR http://example.com/loading.html
  html?: string; // raw html string
  id?: string;
  params?: { [key: string]: string | number | boolean | object };
  events?: {
    pointerdown?: boolean | { [id: string]: boolean },
    pointerup?: boolean | { [id: string]: boolean },
    pointermove?: boolean | { [id: string]: boolean },
    pointerover?: boolean | { [id: string]: boolean },
    pointerout?: boolean | { [id: string]: boolean },
    pointerenter?: boolean | { [id: string]: boolean },
    pointerleave?: boolean | { [id: string]: boolean },
    pointercancel?: boolean | { [id: string]: boolean },
    click?: boolean | { [id: string]: boolean },
    dragstart?: boolean | { [id: string]: boolean },
    drop?: boolean | { [id: string]: boolean },
    [key: string]: boolean | { [id: string]: boolean } | undefined,
  };
}

----------------------------------------

TITLE: BabylonJS Scene Vue Component with FPS Callback
DESCRIPTION: Vue component that initializes a BabylonJS scene and implements FPS data emission to parent component using callback approach.

LANGUAGE: Vue
CODE:
<template>
  <div>
    <canvas ref="bjsCanvas" width="500" height="500" />
  </div>
</template>

<script>
import { createScene } from "../scenes/MyFirstScene";

export default {
  name: "BabylonScene",

  mounted() {
    const bjsCanvas = this.$refs.bjsCanvas;
    if (bjsCanvas) {
      const fpsCallback = (fps) => {
        this.$emit("fps", fps);
      };
      createScene(bjsCanvas, fpsCallback);
    }
  },
};
</script>

----------------------------------------

TITLE: Setting Mesh Collisions in Babylon.js
DESCRIPTION: Enables collision detection for specific meshes in the scene.

LANGUAGE: javascript
CODE:
ground.checkCollisions = true;
box.checkCollisions = true;

----------------------------------------

TITLE: Custom Playground Component Example
DESCRIPTION: Example of using a custom Playground component in markdown to display interactive Babylon.js examples with preview functionality and search indexing.

LANGUAGE: html
CODE:
<Playground id="#Y642I8" title="Tinted Shadows Example" description="A Playground example of tinted shadows." />

----------------------------------------

TITLE: Setting Rendering Group for Skybox
DESCRIPTION: Configures rendering order to ensure skybox appears behind other objects.

LANGUAGE: javascript
CODE:
skybox.renderingGroupId = 0;

// Some other mesh
myMesh.renderingGroupId = 1;

----------------------------------------

TITLE: Loading Sprite Manager from Snippet Server in Babylon.js
DESCRIPTION: Demonstrates how to load a sprite manager from the Babylon.js snippet server using a specific snippet ID. The code also shows how to automatically open and select the manager in the debug layer.

LANGUAGE: javascript
CODE:
var spriteManagerPlayer = BABYLON.SpriteManager.CreateFromSnippetAsync(snippetID, scene).then(manager => {
        scene.debugLayer.show();
        scene.debugLayer.select(manager);
 });

----------------------------------------

TITLE: Storing Shader in DOM Element
DESCRIPTION: HTML code for storing a pixel shader in a script tag for use with CustomProceduralTexture in Babylon.js.

LANGUAGE: html
CODE:
<script type="application/pixelShader" id="LinesPixelShader">
  #ifdef GL_ES
  precision highp float;
  #endif
  varying vec2 vUV;
  void main(void) {
       gl_FragColor = vec4(vUV.x,vUV.y,-vUV.x, 1.0);
  }
</script>

----------------------------------------

TITLE: Implementing Conditional Block with Braces in Babylon.js
DESCRIPTION: Demonstrates the required brace placement convention in Babylon.js where braces must be used for every block, even for single-line statements. Braces start on the same line as the condition and end on the next line.

LANGUAGE: typescript
CODE:
if (condition) {
    this.doSomething();
}

----------------------------------------

TITLE: Displaying Babylon Viewer Progress Bar in HTML
DESCRIPTION: This snippet demonstrates how to embed a Babylon.js viewer that shows a loading progress bar for a large model.

LANGUAGE: html
CODE:
<CodePen pen="yyBexov" tab="result" title="Babylon Viewer Progress Bar" />

----------------------------------------

TITLE: Adjusting Light Intensity and Range in Babylon.js
DESCRIPTION: Demonstrates how to adjust the intensity and range of lights in a Babylon.js scene.

LANGUAGE: javascript
CODE:
light0.intensity = 0.5;
light1.intensity = 2.4;
light.range = 100;

----------------------------------------

TITLE: Controlling Lottie Animation in Babylon.js
DESCRIPTION: JavaScript code showing how to access and control the Lottie animation properties, such as play, pause, and getting the current frame.

LANGUAGE: javascript
CODE:
let lottieTexture = await LottieTexture.LoadFromUrlAsync("name", "/lottie.json", scene, {} /*option*/)

lottieTexture.lottieAnimation.play()
lottieTexture.lottieAnimation.pause()
lottieTexture.lottieAnimation.currentFrame()
//....

----------------------------------------

TITLE: Setting Blend Mode in Babylon.js Particle System
DESCRIPTION: Demonstrates how to set different blend modes for particles, which affect how they are rendered and blended with the scene. Examples include ONEONE and STANDARD blend modes.

LANGUAGE: javascript
CODE:
particleSystem.blendMode = BABYLON.ParticleSystem.BLENDMODE_ONEONE;

particleSystem.blendMode = BABYLON.ParticleSystem.BLENDMODE_STANDARD;

----------------------------------------

TITLE: Using ignoreParent Flag in Physics Impostor in Babylon.js
DESCRIPTION: This code shows how to use the ignoreParent flag when creating a physics impostor for a child mesh. This disables the compound behavior for the specific impostor.

LANGUAGE: javascript
CODE:
sphere2.physicsImpostor = new BABYLON.PhysicsImpostor(sphere2, BABYLON.PhysicsImpostor.SphereImpostor, {ignoreParent: true, mass: 2, restitution: 0.8});

----------------------------------------

TITLE: Setting Visibility of GUIPanel in BabylonJS
DESCRIPTION: Method to set the visibility of the GUIPanel. It takes a boolean parameter and an optional fade parameter, and returns void.

LANGUAGE: javascript
CODE:
setVisible(bool, fade) → void

----------------------------------------

TITLE: Main Template Configuration - Babylon.js Viewer
DESCRIPTION: HTML template configuration for the main viewer container with font and styling setup.

LANGUAGE: html
CODE:
<script id="main-template" type="text/x-babylon-viewer-template">
  <style>
      @font-face {
          font-family: 'babylon';
          src: url('{{babylonFont}}') format('woff');
          font-weight: normal;
          font-style: normal;
      }
      .icon {
          font-family: "babylon";
      }
  </style>
  {{#if fillScreen}}
  <style>
      html,
      body {
          width: 100%;
          height: 100%;
          margin: 0;
          padding: 0;
      }
  </style>
  {{/if}}
  <fill-container></fill-container>
</script>

----------------------------------------

TITLE: Setting Camera Ellipsoid in Babylon.js
DESCRIPTION: Defines the collision boundary around the camera using an ellipsoid Vector3.

LANGUAGE: javascript
CODE:
camera.ellipsoid = new BABYLON.Vector3(1, 1, 1);

----------------------------------------

TITLE: Creating a Sprite Map in Babylon.js
DESCRIPTION: Code snippet demonstrating how to create a sprite map in Babylon.js. It sets up a background size and initializes a new SpriteMap object with specific options.

LANGUAGE: javascript
CODE:
let backgroundSize = new BABYLON.Vector2(2, 2); //set the size of the sprite map stage

let background = new BABYLON.SpriteMap('background', atlasJSON, spriteSheet,
    {
        stageSize: backgroundSize,
        flipU: true//, //Sometimes you need to flip, depending on the sprite format.
    },
    scene
);

----------------------------------------

TITLE: Custom Particle Set Creation with Base URL in JavaScript
DESCRIPTION: Demonstrates how to set up and create custom particle sets by configuring the base assets URL and creating a custom particle system.

LANGUAGE: javascript
CODE:
var myParticleSet = new BABYLON.ParticleHelper.CreateAsync("tornado", scene).then(function(set) {
    set.start();
});

----------------------------------------

TITLE: Default Interpolation Functions for Animations in Babylon.js
DESCRIPTION: Shows the default interpolation functions used for different types of animations in Babylon.js.

LANGUAGE: javascript
CODE:
BABYLON.Animation.prototype.floatInterpolateFunction = function (startValue, endValue, gradient) {
  return startValue + (endValue - startValue) * gradient;
};

BABYLON.Animation.prototype.quaternionInterpolateFunction = function (startValue, endValue, gradient) {
  return BABYLON.Quaternion.Slerp(startValue, endValue, gradient);
};

BABYLON.Animation.prototype.vector3InterpolateFunction = function (startValue, endValue, gradient) {
  return BABYLON.Vector3.Lerp(startValue, endValue, gradient);
};

----------------------------------------

TITLE: Initializing Colyseus Server Project
DESCRIPTION: Command to create a new Colyseus server project using npm.

LANGUAGE: shell
CODE:
npm init colyseus-app ./babylonjs-multiplayer-server

----------------------------------------

TITLE: Template HTML Script Definition
DESCRIPTION: Example of defining a template using a script tag with the special Babylon.js viewer template type.

LANGUAGE: html
CODE:
<script id="loading-screen" type="text/x-babylon-viewer-template">
  <img class="loading-image" src="{{loadingImage}}">
</script>

----------------------------------------

TITLE: Broadcasting Player Data on Colyseus Server
DESCRIPTION: Handles player data updates on the server and broadcasts to all clients.

LANGUAGE: typescript
CODE:
onCreate (options) {
  //...
  this.onMessage("playData", (client, message) => {
    this.state.players.get(client.sessionId).playerData = message;
  });
  //...
}
onUpdate () {
  //...
  this.state.players.forEach((player, sessionId) => {
    player.position.x = player.playerData.position.x
    player.position.y = player.playerData.position.y
    player.position.z = player.playerData.position.z

    player.quaternion.x = player.playerData.quaternion.x
    player.quaternion.y = player.playerData.quaternion.y
    player.quaternion.z = player.playerData.quaternion.z
    player.quaternion.w = player.playerData.quaternion.w
  });
  //...
}

----------------------------------------

TITLE: Configuring Sprite Sheet Animation in Babylon.js
DESCRIPTION: Sets up the sprite sheet dimensions, cell range for animation, and animation speed for the particle system.

LANGUAGE: javascript
CODE:
particleSystem.spriteCellHeight = 64;
particleSystem.spriteCellWidth = 64;
particleSystem.startSpriteCellID = 0;
particleSystem.endSpriteCellID = 9;
particleSystem.spriteCellChangeSpeed = 4; // default is one

----------------------------------------

TITLE: Creating a Post-Process for Final Composition in Babylon.js
DESCRIPTION: This code creates a post-process to compose the final image by merging the base render with a caustic texture generated by a render target texture.

LANGUAGE: javascript
CODE:
var finalPass = new BABYLON.PostProcess(
    'Final compose shader', 
    'final', // shader name
    null, // attributes
    [ 'causticTexture' ], // textures
    1.0,  // options
    camera,
    BABYLON.Texture.BILINEAR_SAMPLINGMODE, // sampling
    engine // engine
);
finalPass.onApply = (effect) => {
    effect.setTexture('causticTexture', renderTarget); // pass the renderTarget as our second texture
};

----------------------------------------

TITLE: Installing Babylon.js Package
DESCRIPTION: Command to install a specific version of Babylon.js using npm. Version 2.5.0 is specified to avoid preview branch issues.

LANGUAGE: bash
CODE:
npm install babylonjs@2.5.0 --save

----------------------------------------

TITLE: Node Runtime Default Locations
DESCRIPTION: Default installation paths for Node.js runtime on Mac OSX and Windows operating systems.

LANGUAGE: bash
CODE:
Mac OSX: /usr/local/bin/node

Windows: C:\Program Files\nodejs\node.exe

----------------------------------------

TITLE: Setting Particle Texture in Babylon.js
DESCRIPTION: Assigns a sprite sheet texture to the particle system. The texture is set to not use mipmaps and to read data from top to bottom.

LANGUAGE: javascript
CODE:
particleSystem.particleTexture = new BABYLON.Texture("textures/player.png", scene, true, false);

----------------------------------------

TITLE: Configuring Antialiasing in Babylon.js Default Rendering Pipeline
DESCRIPTION: This code snippet shows how to configure MSAA and FXAA antialiasing in the default rendering pipeline. It sets the MSAA sample count and enables FXAA.

LANGUAGE: javascript
CODE:
pipeline.samples = 4;
pipeline.fxaaEnabled = true;

----------------------------------------

TITLE: FluidRendererGUI Class Implementation in TypeScript
DESCRIPTION: TypeScript version of the FluidRendererGUI class with type annotations and interfaces. It provides the same functionality as the JavaScript version but with added type safety.

LANGUAGE: typescript
CODE:
class FluidRendererGUI {
    private _gui: BABYLON.Nullable<lil.GUI>;
    private _visible: boolean;
    private _scene: BABYLON.Scene;
    private _showGeneralMenu: boolean;
    private _onKeyObserver: BABYLON.Nullable<BABYLON.Observer<BABYLON.KeyboardInfo>>;
    private _targetRendererIndex: number;
    private _targetRenderersGUIElements: lil.Controller[];
    private _renderObjectIndex: number;
    private _renderObjectsGUIElements: lil.Controller[];

    // ... (rest of the class implementation)
}

----------------------------------------

TITLE: Shape Proximity Query Implementation
DESCRIPTION: Example implementation of shape proximity query that checks for closest shapes from a given shape.

LANGUAGE: javascript
CODE:
hk.shapeProximity(
    {
        shape: shape1,
        position: mesh1.absolutePosition,
        rotation: mesh1.absoluteRotationQuaternion,
        maxDistance: 10
    },
    shapeLocalResult,
    hitWorldResult
);

----------------------------------------

TITLE: Multiple Sprite Picking Implementation
DESCRIPTION: Example of how to pick multiple overlapping sprites at once using multiPickSprite and rotate all selected sprites.

LANGUAGE: javascript
CODE:
const pickResult = scene.multiPickSprite(this.pointerX, this.pointerY);
for (let i = 0; i < pickResult.length; i++) {
    	pickResult[i].pickedSprite.angle += Math.PI / 4;
}

----------------------------------------

TITLE: Implementing Async Scene Creation in Vue 2
DESCRIPTION: Example of how to handle asynchronous scene creation in a Vue 2 component.

LANGUAGE: javascript
CODE:
async mounted() {
  const bjsCanvas = this.$refs.bjsCanvas;
  if (bjsCanvas) {
    await createScene(bjsCanvas);
  }
},

----------------------------------------

TITLE: Changing Tiles in a Sprite Map in Babylon.js
DESCRIPTION: Shows how to change one or multiple tiles in a sprite map using the spriteMap.changeTiles method. This allows assigning a specific sprite frame to one or more tiles in the map.

LANGUAGE: javascript
CODE:
spriteMap.changeTiles(layerID, tileID, frameID) //Change one tile
spriteMap.changeTiles(layerID, [tileID0, tileID1, ... tileIDn], frameID); //Change multiple tiles to sprite at frameID

----------------------------------------

TITLE: Adding Points with Index-based Positioning
DESCRIPTION: Add points with custom positioning based on index parameter

LANGUAGE: javascript
CODE:
var myfunc = function (particle, i, s) {
    particle.position = new BABYLON.Vector3(0.5 + 0.25 * Math.random(), i / 5000, 0.25 * Math.random());
    particle.color = new BABYLON.Color4(Math.random(), Math.random(), Math.random(), Math.random());
};
pcs.addPoints(10000, myfunc);
pcs.addPoints(10000, myfunc);

----------------------------------------

TITLE: Real-time Filter Animation
DESCRIPTION: Implementation of a real-time filter animation using render loop and custom uniforms.

LANGUAGE: javascript
CODE:
engine.runRenderLoop(() => {
    if (!otherTexture.isReady()) {
        return;
    }

    time += engine.getDeltaTime() / 1000;
    customEffectWrapper.effect.setTexture("otherTexture", otherTexture);
    customEffectWrapper.effect.setFloat3("colorOffset", Math.cos(time) * 0.5 + 0.5, 0, Math.sin(time) * 0.5 + 0.5);

    customFilter.render(mainTexture, customEffectWrapper);
});

----------------------------------------

TITLE: Setting UVs for Point Cloud Particles in Babylon.js
DESCRIPTION: This code snippet shows how to set UV coordinates for particles in a point cloud system. It demonstrates setting positions and UVs randomly, and applying a texture to the particle system mesh.

LANGUAGE: javascript
CODE:
var myfunc = function(particle) { 
    var x = Math.random();
    var y = Math.random();
    var z = 0;
    particle.position = new BABYLON.Vector3(x, y, z);
    //Relate uv values to positional values
    particle.uv.x = x;
    particle.uv.y = y; 
    }
    pcs.addPoints(5000, myfunc);

    pcs.buildMeshAsync().then(() => {
      pcs.mesh.material.emissiveColor = new BABYLON.Color3(0, 0, 0);
      pcs.mesh.material.emissiveTexture = myTexture;
    });

----------------------------------------

TITLE: Configuring Vertex Sharing for Soft Bodies
DESCRIPTION: Methods to prepare meshes for soft body physics by forcing shared vertices and increasing vertex count

LANGUAGE: javascript
CODE:
mesh.forceSharedVertices();
mesh.increaseVertices(4);

----------------------------------------

TITLE: Basic Gamma Value Calculations in Shaders
DESCRIPTION: Example showing gamma encoding and decoding calculations used in shaders for proper color space conversion.

LANGUAGE: glsl
CODE:
// Gamma encoded value saved to file
pow(0.25, 1/2.2) = 0.5326 

// Gamma encoded value loaded into a shader and multiply the value by 2.0
0.5326 * 2.0 = 1.0652

----------------------------------------

TITLE: Masking Animations in AnimationGroup in BabylonJS
DESCRIPTION: Demonstrates how to use AnimationGroupMask to control which animations within a group should be played or excluded based on target names.

LANGUAGE: javascript
CODE:
const mask1 = new BABYLON.AnimationGroupMask([sphereA.name, sphereB.name], BABYLON.AnimationGroupMaskMode.Include);
animGroup.mask = mask1;
const mask2 = new BABYLON.AnimationGroupMask([sphereA.name, sphereB.name], BABYLON.AnimationGroupMaskMode.Exclude);
animGroup.mask = mask2;

----------------------------------------

TITLE: Starting Development Server for Babylon.js Docs
DESCRIPTION: Command to start the local development server on port 3000.

LANGUAGE: bash
CODE:
npm run dev

----------------------------------------

TITLE: Setting Updateable Buffers for Thin Instances in JavaScript
DESCRIPTION: Shows how to set buffers as updateable or non-updateable for thin instances, which affects performance and the ability to modify the buffers later.

LANGUAGE: javascript
CODE:
sphere.thinInstanceSetBuffer("matrix", bufferMatrices, 16, false); // matrix buffer is updateable
sphere.thinInstanceSetBuffer("color", bufferColors, 4, true); // color buffer is not updateable

----------------------------------------

TITLE: Adding and Connecting Blocks in Node Material
DESCRIPTION: Demonstrates how to add input blocks, set their values, and connect blocks together to build a shader graph.

LANGUAGE: JavaScript
CODE:
const positionInput = new BABYLON.InputBlock("position");
positionInput.setAsAttribute("position");

const worldInput = new BABYLON.InputBlock("world");
worldInput.setAsSystemValue(BABYLON.NodeMaterialSystemValues.World);

const worldPos = new BABYLON.TransformBlock("worldPos");
positionInput.connectTo(worldPos);
worldInput.connectTo(worldPos);

----------------------------------------

TITLE: JSON Format for Sprite Packed Manager in Babylon.js
DESCRIPTION: This snippet shows the JSON format used by the Sprite Packed Manager. It includes frame information for multiple sprites, detailing their positions and sizes within the spritesheet.

LANGUAGE: javascript
CODE:
{
   "frames": {
		"eye.png": {
			"frame": {"x":0,"y":148,"w":400,"h":400},
			"rotated": false,
			"trimmed": false,
			"spriteSourceSize": {"x":0,"y":0,"w":400,"h":400},
			"sourceSize": {"w":400,"h":400}
		},
		"redman.png": {
			"frame": {"x":0,"y":0,"w":55,"h":97},
			"rotated": false,
			"trimmed": false,
			"spriteSourceSize": {"x":0,"y":0,"w":55,"h":97},
			"sourceSize": {"w":55,"h":97}
			},
		"spot.png": {
			"frame": {"x":199,"y":0,"w":148,"h":148},
			"rotated": false,
			"trimmed": false,
			"spriteSourceSize": {"x":0,"y":0,"w":148,"h":148},
			"sourceSize": {"w":148,"h":148}
		},
		"triangle.png": {
			"frame": {"x":55,"y":0,"w":144,"h":72},
			"rotated": false,
			"trimmed": false,
			"spriteSourceSize": {"x":0,"y":0,"w":144,"h":72},
			"sourceSize": {"w":144,"h":72}
		}
	},
	"meta": {
		"app": "https://www.codeandweb.com/texturepacker",
		"version": "1.0",
		"image": "pack1.png",
		"format": "RGBA8888",
		"size": {"w":400,"h":548},
		"scale": "1",
		"smartupdate": "$TexturePacker:SmartUpdate:c5944b8d86d99a167f95924d4a62d5c3:3ed0ae95f00621580b477fcf2f6edb75:5d0ff2351eb79b7bb8a91bc3358bcff4$"
	}
}

----------------------------------------

TITLE: Creating a Cylinder with Mesh in Babylon.js
DESCRIPTION: This snippet shows an alternative method to create a cylinder using BABYLON.MeshBuilder.CreateCylinder with specific parameters for height, diameterTop, diameterBottom, tessellation, and subdivisions.

LANGUAGE: javascript
CODE:
const cylinder = BABYLON.MeshBuilder.CreateCylinder("cylinder", {height, diameterTop, diameterBottom, tessellation, subdivisions}, scene);

----------------------------------------

TITLE: Loading Basic Cube Texture in Babylon.js
DESCRIPTION: Basic implementation for loading a standard cube texture without HDR support.

LANGUAGE: javascript
CODE:
scene.environmentTexture = new BABYLON.CubeTexture("textures/TropicalSunnyDay", scene);

----------------------------------------

TITLE: Custom Builder Function for SPS Particles
DESCRIPTION: Example of a custom builder function that sets properties for each particle in the system.

LANGUAGE: javascript
CODE:
const myBuilder = function(particle, i, s) {
  // set properties of particle
};

----------------------------------------

TITLE: Creating Mesh Loading Task in Babylon.js
DESCRIPTION: Adds a mesh loading task to the AssetsManager to load 3D models.

LANGUAGE: javascript
CODE:
const meshTask = assetsManager.addMeshTask("skull task", "", "scenes/", "skull.babylon");

----------------------------------------

TITLE: Scaling Mesh from Pivot Point in Babylon.js
DESCRIPTION: Extends BABYLON.Mesh.prototype with a method to scale a mesh from a specified pivot point. Takes a pivot point Vector3 and separate scaling factors for x, y, and z axes as parameters.

LANGUAGE: javascript
CODE:
BABYLON.Mesh.prototype.scaleFromPivot = function(pivotPoint, sx, sy, sz) {
	var _sx = sx / this.scaling.x;
	var _sy = sy / this.scaling.y;
	var _sz = sz / this.scaling.z;
	this.scaling = new BABYLON.Vector3(sx, sy, sz);	
	this.position = new BABYLON.Vector3(pivotPoint.x + _sx * (this.position.x - pivotPoint.x), pivotPoint.y + _sy * (this.position.y - pivotPoint.y), pivotPoint.z + _sz * (this.position.z - pivotPoint.z));
}

mesh.scaleFromPivotnew BABYLON.Vector3(1, 2, -1), 2, 6, 0.5);

----------------------------------------

TITLE: Vue App Component with FPS Display
DESCRIPTION: Main Vue application component that displays FPS data received from the BabylonJS scene component.

LANGUAGE: Vue
CODE:
<template>
  <div>
    <label>{{ fps }}</label>
    <BabylonScene @fps="fpsReceived" />
  </div>
</template>

<script>
import BabylonScene from "./components/BabylonScene.vue";

export default {
  name: "App",
  components: {
    BabylonScene,
  },
  data() {
    return {
      fps: 0,
    };
  },
  methods: {
    fpsReceived(fps) {
      this.fps = fps;
    },
  },
};
</script>

<style>
body {
  padding: 10px;
}

label {
  display: block;
}
</style>

----------------------------------------

TITLE: Configuring OBJ File Loader Settings in JavaScript
DESCRIPTION: These snippets show various configuration options for the OBJ File Loader. They include settings for UV optimization, vertex colors, normal computation, axis inversion, and material loading behavior.

LANGUAGE: javascript
CODE:
BABYLON.OBJFileLoader.OPTIMIZE_WITH_UV = true;

BABYLON.OBJFileLoader.UV_SCALE = new BABYLON.Vector2(xValue, yValue);

BABYLON.OBJFileLoader.IMPORT_VERTEX_COLORS = true;

BABYLON.OBJFileLoader.COMPUTE_NORMALS = true;

BABYLON.OBJFileLoader.OPTIMIZE_NORMALS = true;

BABYLON.OBJFileLoader.INVERT_Y = true;

BABYLON.OBJFileLoader.INVERT_TEXTURE_Y = true;

BABYLON.OBJFileLoader.MATERIAL_LOADING_FAILS_SILENTLY = false;

BABYLON.OBJFileLoader.SKIP_MATERIALS = true;

OBJFileLoader.USE_LEGACY_BEHAVIOR = true;

----------------------------------------

TITLE: Initializing WebVR Camera
DESCRIPTION: Creates and initializes a WebVR camera and attaches it to the canvas for user interaction.

LANGUAGE: javascript
CODE:
const camera = new BABYLON.WebVRFreeCamera("camera1", new BABYLON.Vector3(0, 0, 0), scene);

----------------------------------------

TITLE: Runtime Block Deserialization in TypeScript
DESCRIPTION: Code snippet showing how to deserialize and create a custom block at runtime using the Smart Filters API.

LANGUAGE: typescript
CODE:
const blockDefinition = importCustomBlockDefinition(serializedAnnotatedGlsl);
const block = CustomShaderBlock.Create(smartFilter, "Name Of This Instance", blockDefinition);

----------------------------------------

TITLE: Inefficient Particle Update Example
DESCRIPTION: Shows an inefficient way of updating particle velocities that creates unnecessary objects.

LANGUAGE: javascript
CODE:
pcs.updateParticle = function (particle) {
    var accel = new BABYLON.Vector3(0, 0.5, 0);
    particle.velocity = particle.velocity.add(accel);
    // ...
};

----------------------------------------

TITLE: Initializing Volumetric Light Scattering Post Process in Babylon.js
DESCRIPTION: Creates a new instance of the VolumetricLightScatteringPostProcess. It requires parameters such as name, ratio, camera, light source mesh, sample number, sampling mode, engine, and reusability flag.

LANGUAGE: javascript
CODE:
const vls = new BABYLON.VolumetricLightScatteringPostProcess("vls", 1.0, camera, lightSourceMesh, samplesNum, BABYLON.Texture.BILINEAR_SAMPLINGMODE, engine, false);

----------------------------------------

TITLE: Downloading TexturePacker Result in Babylon.js
DESCRIPTION: Shows how to download the processed texture package, allowing for specification of image type and quality.

LANGUAGE: javascript
CODE:
pack.processAsync().then(
    //Success
    ()=>{
        pack.download( type, ?quality);
    }
)

----------------------------------------

TITLE: Defining Frame Path in Babylon.js
DESCRIPTION: This snippet shows how to define the path of the frame using an array of Vector3 points in the XoY plane. The path represents the outer edge of the frame and determines its shape.

LANGUAGE: javascript
CODE:
path  = [
    new BABYLON.Vector3(-150, -100, 0),
    new BABYLON.Vector3(150, -100, 0),
    new BABYLON.Vector3(150, 100, 0),
    new BABYLON.Vector3(-150, 100, 0)
]; 

----------------------------------------

TITLE: Basic Pivot Point Operations in Babylon.js
DESCRIPTION: Core methods for setting and getting pivot points in a mesh. These functions allow you to set a pivot point, get its relative position, and get its absolute position in world space.

LANGUAGE: javascript
CODE:
mesh.setPivotPoint(Vector3);
mesh.getPivotPoint(); // returns Vector3
mesh.getAbsolutePivotPoint(); // returns Vector3

----------------------------------------

TITLE: Rendering Smart Filters to Custom Render Targets in Babylon.js
DESCRIPTION: Illustrates how to create a Smart Filter and render it to a custom RenderTargetWrapper instead of the canvas. It demonstrates setting up the filter, specifying the render target, and rendering a frame.

LANGUAGE: typescript
CODE:
// Create a SmartFilter
const smartFilter = new SmartFilter("Simplest");
const titleInput = new InputBlock(smartFilter, "logo", ConnectionPointType.Texture, logoTexture);
titleInput.output.connectTo(smartFilter.output);

// Tell the SmartFilter to render to RenderTargetWrapper we supply
smartFilter.outputBlock.renderTargetWrapper = myRenderTargetWrapper;

// Create a SmartFilterRuntime
const engine = new ThinEngine(canvas, true);
const runtime = await smartFilter.createRuntimeAsync(engine);

// Render one frame
runtime.render();

----------------------------------------

TITLE: Initializing SSAO Rendering Pipeline in Babylon.js
DESCRIPTION: Creates a new SSAO rendering pipeline with a specified ratio. The pipeline can be attached to cameras automatically or manually using the scene's rendering pipeline manager.

LANGUAGE: javascript
CODE:
const ssao = new BABYLON.SSAORenderingPipeline("ssaopipeline", scene, 0.75);

----------------------------------------

TITLE: Swapping Controller Handedness for Movement
DESCRIPTION: Demonstrates how to swap the handedness of the default movement configuration while maintaining feature sensitivity thresholds. This allows customization of which hand controls rotation vs. movement.

LANGUAGE: javascript
CODE:
const swappedHandednessConfiguration = [
  {
    allowedComponentTypes: [BABYLON.WebXRControllerComponent.THUMBSTICK_TYPE, BABYLON.WebXRControllerComponent.TOUCHPAD_TYPE],
    forceHandedness: "right",
    axisChangedHandler: (axes, movementState, featureContext, xrInput) => {
      movementState.rotateX = Math.abs(axes.x) > featureContext.rotationThreshold ? axes.x : 0;
      movementState.rotateY = Math.abs(axes.y) > featureContext.rotationThreshold ? axes.y : 0;
    },
  },
  {
    allowedComponentTypes: [WebXRControllerComponent.THUMBSTICK_TYPE, WebXRControllerComponent.TOUCHPAD_TYPE],
    forceHandedness: "left",
    axisChangedHandler: (axes, movementState, featureContext, xrInput) => {
      movementState.moveX = Math.abs(axes.x) > featureContext.movementThreshold ? axes.x : 0;
      movementState.moveY = Math.abs(axes.y) > featureContext.movementThreshold ? axes.y : 0;
    },
  },
];

const featureManager = xrHelper.baseExperience.featuresManager;

featureManager.enableFeature(BABYLON.WebXRFeatureName.MOVEMENT, "latest", {
  xrInput: xrHelper.input,
  customRegistrationConfigurations: swappedHandednessConfiguration,
});

----------------------------------------

TITLE: Implementing Perlin2D Noise Block in Node Material Editor
DESCRIPTION: JSON configuration for a custom Perlin noise block that generates 2D Perlin noise based on position, dimension, and time inputs. The block implements random number generation and noise interpolation.

LANGUAGE: json
CODE:
{
    "name": "Perlin2D",
    "comments": "Generates a Perlin noise single value given a vec2 and time",
    "target": "Neutral",
    "inParameters": [
        {
            "name": "p",
            "type": "Vector2"
        },
        {
            "name": "dim",
            "type": "Float"
        },
        {
            "name": "time",
            "type": "Float"
        }
    ],
    "outParameters": [
        {
            "name": "output",
            "type": "Float"
        }
    ],
    "functionName": "perlin",
    "code": [
        "float rand(vec2 co){return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);}", 
        "float rand(vec2 co, float l) {return rand(vec2(rand(co), l));}", 
        "float rand(vec2 co, float l, float t) {return rand(vec2(rand(co, l), t));}", 
        "", 
        "void perlin(vec2 p, float dim, float time, out float result) {", 
        "   vec2 pos = floor(p * dim);", 
        "   vec2 posx = pos + vec2(1.0, 0.0);", 
        "   vec2 posy = pos + vec2(0.0, 1.0);", 
        "   vec2 posxy = pos + vec2(1.0);", 
        "   ", 
        "   float c = rand(pos, dim, time);", 
        "   float cx = rand(posx, dim, time);", 
        "   float cy = rand(posy, dim, time);", 
        "   float cxy = rand(posxy, dim, time);", 
        "   ", 
        "   vec2 d = fract(p * dim);", 
        "   d = -0.5 * cos(d * 3.14159265358979323846) + 0.5;", 
        "   ", 
        "   float ccx = mix(c, cx, d.x);", 
        "   float cycxy = mix(cy, cxy, d.x);", 
        "   float center = mix(ccx, cycxy, d.y);", 
        "   ", 
        "   result = center * 2.0 - 1.0;", 
        "}"
    ]    
}

----------------------------------------

TITLE: Implementing AsyncBus Interface in TypeScript
DESCRIPTION: TypeScript interface and implementation for an asynchronous message bus using Mitt, providing async messaging capabilities between Vue and BabylonJS.

LANGUAGE: typescript
CODE:
export interface IAsyncBus {
    on(messageType: string, callback: (payload: any) => void): void;
    off(messageType: string, callback: (payload: any) => void): void;
    emit(messageType: string, payload?: any): void;
    emitAsync(messageType: string, payload?: any): Promise<any>;
}

----------------------------------------

TITLE: Optimizing and Rendering Complex Smart Filters in Babylon.js
DESCRIPTION: Shows how to create a more complex Smart Filter with multiple blocks, optimize it using SmartFilterOptimizer, and render it using RenderTargetGenerator with optimizations enabled.

LANGUAGE: typescript
CODE:
// Create a SmartFilter
const smartFilter = new SmartFilter("BlackAndWhiteAndPixelate");
const logoInput = new InputBlock(smartFilter, "logo", ConnectionPointType.Texture, createStrongRef(logoTexture));
const blackAndWhite = new BlackAndWhiteBlock(smartFilter, "blackAndWhite");
const pixelate = new PixelateBlock(smartFilter, "pixelate");
const pixelateIntensity = new InputBlock(smartFilter, "intensity", ConnectionPointType.Float, 0.4);

logoInput.output.connectTo(blackAndWhite.input);
blackAndWhite.output.connectTo(pixelate.input);
pixelateIntensity.output.connectTo(pixelate.intensity);
pixelate.output.connectTo(smartFilter.output);

// Create and call the optimizer
const optimizer = new SmartFilterOptimizer(smartFilter);
const optimizedSmartFilter = optimizer.optimize();

// Create a RenderTargetGenerator with optimization enabled
const rtg = new RenderTargetGenerator(true);

// Create the ThinEngine and the SmartFilterRuntime
const engine = new ThinEngine(canvas, true);
const runtime = await optimizedSmartFilter.createRuntimeAsync(engine, rtg);

// Render one frame
runtime.render();

----------------------------------------

TITLE: Installing Babylon.js Lottie Extension
DESCRIPTION: Command to install the Babylon.js Lottie extension and its core dependency using pnpm package manager.

LANGUAGE: shell
CODE:
pnpm add babylonjs-lottie @babylonjs/core

----------------------------------------

TITLE: Implementing Draw Calls Strategy in TypeScript
DESCRIPTION: Shows the implementation of the DrawCallsStrategy in the PerfCollectionStrategy class. It demonstrates how to set up observers, collect data, and clean up resources.

LANGUAGE: typescript
CODE:
public static DrawCallsStrategy(): PerfStrategyInitialization {
    return (scene) => {
        let drawCalls = 0;
        const onBeforeAnimationsObserver = scene.onBeforeAnimationsObservable.add(() => {
            scene.getEngine()._drawCalls.fetchNewFrame();
        });

        const onAfterRenderObserver = scene.onAfterRenderObservable.add(() => {
            drawCalls = scene.getEngine()._drawCalls.current;
        });

        return {
            id: "draw calls",
            getData: () => drawCalls,
            dispose: () => {
                scene.onBeforeAnimationsObservable.remove(onBeforeAnimationsObserver);
                scene.onAfterRenderObservable.remove(onAfterRenderObserver);
            },
        };
    };
}

----------------------------------------

TITLE: Global Structure of .babylon File
DESCRIPTION: Shows the overall structure of a .babylon file, including properties for scene settings, cameras, lights, materials, and more.

LANGUAGE: javascript
CODE:
{
    "autoClear": boolean,
    "clearColor": color3,
    "ambientColor": color3,
    "gravity": vector3,
    "cameras": [],
    "activeCamera_": string,
    "lights": [],
    "materials": [],
    "geometries": {},
    "meshes": [],
    "multiMaterials": [],
    "shadowGenerators": [],
    "skeletons": [],
    "particleSystems": [],
    "lensFlareSystems": [],
    "actions": [],
    "sounds": [],
    "collisionsEnabled": boolean,
    "physicsEnabled": boolean,
    "physicsGravity": vector3,
    "physicsEngine": string,
    "animations": [],
    "autoAnimate": boolean,
    "autoAnimateFrom": int,
    "autoAnimateTo": int,
    "autoAnimateLoop": boolean,
    "autoAnimateSpeed": number
}

----------------------------------------

TITLE: Enabling Debug Passes for IBL Shadows Pipeline in Babylon.js
DESCRIPTION: Enable debug passes for the IBL Shadows pipeline to help diagnose issues.

LANGUAGE: javascript
CODE:
shadowPipeline.allowDebugPasses = true;

----------------------------------------

TITLE: Installing Havok Package via NPM
DESCRIPTION: Command to install the Havok physics engine package using NPM

LANGUAGE: bash
CODE:
npm install @babylonjs/havok

----------------------------------------

TITLE: Hiding the Babylon.js Inspector
DESCRIPTION: Demonstrates how to hide the Babylon.js Inspector using both the scene debug layer and the Inspector object.

LANGUAGE: javascript
CODE:
scene.debugLayer.hide();

LANGUAGE: javascript
CODE:
Inspector.Hide(); // You don't need to pass the scene

----------------------------------------

TITLE: Teleporting an Agent in Babylon.js
DESCRIPTION: Instantly move an agent to a new position on the navigation mesh. This resets the agent's navigation state, requiring a new destination to be set afterwards.

LANGUAGE: javascript
CODE:
crowd.agentTeleport(agentIndex, navigationPlugin.getClosestPoint(destinationPoint));

----------------------------------------

TITLE: Accessing glTF Loader Extension Options in TypeScript
DESCRIPTION: This code shows how to access custom extension options within the extension class constructor. It retrieves the options from the loader's parent object.

LANGUAGE: typescript
CODE:
class MyCustomExtension implements IGLTFLoaderExtension {
    constructor (loader: GLTFLoader) {
        const options = loader.parent.extensionOptions["myCustomExtension"];
    }
}

----------------------------------------

TITLE: Performing a Basic Raycast in BabylonJS
DESCRIPTION: This snippet demonstrates how to perform a basic raycast using the BabylonJS physics engine. It creates a raycast result object, defines start and end points, and checks for collisions.

LANGUAGE: javascript
CODE:
var raycastResult = new BABYLON.PhysicsRaycastResult();
var start = new BABYLON.Vector3(1, 20, 2);
var end = new BABYLON.Vector3(1, -20, 2);
physicsEngine.raycastToRef(start, end, raycastResult);
if (raycastResult.hasHit) {
    console.log("Collision at ", raycastResult.hitPointWorld);
}

----------------------------------------

TITLE: Listening to Global and Mesh-specific Pointer Events in Babylon.js
DESCRIPTION: This snippet shows how to use the @onPointerEvent decorator to listen for pointer tap events globally and on a specific mesh. The second boolean parameter determines whether the event is listened to globally or only on the mesh.

LANGUAGE: typescript
CODE:
@onPointerEvent(PointerEventTypes.POINTERTAP, false)
protected _tapped(info: PointerInfo): void {
    // Called on the user clicks anywhere on the canvas.
}

@onPointerEvent(PointerEventTypes.POINTERTAP, true)
protected _tapped(info: PointerInfo): void {
    // Called on the user clicks on the mesh.
}

----------------------------------------

TITLE: Running Webpack Build Command
DESCRIPTION: Command to execute a one-time Webpack build of the project

LANGUAGE: bash
CODE:
npm run build

----------------------------------------

TITLE: Creating Ground from Heightmap Image in Babylon.js
DESCRIPTION: This snippet demonstrates how to create a ground mesh from a heightmap image and apply a physics impostor to it. It uses the CreateGroundFromHeightMap method and sets a HeightmapImpostor.

LANGUAGE: javascript
CODE:
var ground = BABYLON.Mesh.CreateGroundFromHeightMap("ground", "textures/worldHeightMap.jpg", 200, 200, 50, 0, 30, scene, false, function () {
    ground.physicsImpostor = new BABYLON.PhysicsImpostor(ground, BABYLON.PhysicsImpostor.HeightmapImpostor, { mass: 0 });
});

----------------------------------------

TITLE: Registering a glTF Loader Extension Factory in TypeScript
DESCRIPTION: This code shows how to register a glTF loader extension factory. The factory function dynamically imports the extension module and returns a new instance of the extension.

LANGUAGE: typescript
CODE:
import { registerGLTFExtension } from "@babylonjs/loaders/glTF/2.0";

registerGLTFExtension("myCustomExtension", true, async (loader) => {
    const { MyCustomExtension } = await import("./MyCustomExtension");
    return new MyCustomExtension(loader);
});

----------------------------------------

TITLE: Animating RadialCloner in BabylonJS
DESCRIPTION: Creates and starts an animation that modifies the startangle property of the RadialCloner.

LANGUAGE: javascript
CODE:
BABYLON.Animation.CreateAndStartAnimation('radanimation', rc, 'startangle', 30, 120, 0, 90);

----------------------------------------

TITLE: Markdown Tables - OpenPBR Parameters Support Status
DESCRIPTION: Series of markdown tables documenting the implementation status of various OpenPBR parameters in Babylon.js, organized by component groups including Base, Specular, Transmission, Subsurface, Coat, Fuzz, Emission, Thin-film, and Geometry.

LANGUAGE: markdown
CODE:
| Parameter                | Support in Babylon.js |
| ------------------------ | --------------------- |
| `base_weight`            | Present as `PBRBaseMaterial._baseWeightTexture` and `_baseWeight` |
| `base_color`             | Present as `PBRBaseMaterial._albedoTexture` and `_albedoColor` |
| `base_metalness`         | Present as `PBRBaseMaterial._metallicTexture` and `_metallic` |
| `base_diffuse_roughness` | Missing. |

LANGUAGE: markdown
CODE:
| Parameter                       | Support in Babylon.js |
| ------------------------------- | --------------------- |
| `specular_weight`               | Missing               |
| `specular_color`                | To be evaluated       |
| `specular_roughness`            | Present as `PBRBaseMaterial._microSurfaceTexture` and `_roughness` |
| `specular_roughness_anisotropy` | To be evaluated       |
| `specular_ior`                  | To be evaluated       |

----------------------------------------

TITLE: Initializing SceneRecorder and Tracking Changes in Babylon.js
DESCRIPTION: This snippet demonstrates how to create a SceneRecorder instance and start tracking changes in a Babylon.js scene. It's the first step in using the delta system.

LANGUAGE: javascript
CODE:
var recorder = new BABYLON.SceneRecorder();

recorder.track(scene);

----------------------------------------

TITLE: Delay Block Implementation
DESCRIPTION: Creates a timed delay in the execution flow using the scene's render loop.

LANGUAGE: javascript
CODE:
const setDelay = new FlowGraphSetDelayBlock();
setDelay.duration.setValue(2.5 /* seconds */, ctx);
setDelay.done.connectTo(nextBlock.in); // will be triggered 2.5 seconds after the in signal

----------------------------------------

TITLE: Initializing LinearCloner in BabylonJS
DESCRIPTION: Creates a LinearCloner instance that generates 10 clones (5 each of cube1 and cube2) with specified position increments. Uses relative interpolation mode.

LANGUAGE: javascript
CODE:
const lc = new BABYLONX.LinearCloner([cube1, cube2], demo.scene, { iModeRelative:true,count:10,P:{x:2,y:0,z:-1} });

----------------------------------------

TITLE: JavaScript Viewer Initialization
DESCRIPTION: Example of initializing the Babylon.js viewer using JavaScript with a custom configuration object.

LANGUAGE: javascript
CODE:
let domElement = document.getElementById("my-amazing-element");

let viewer = new BabylonViewer.DefaultViewer(domElement, {
  scene: {
    debug: true,
  },
  camera: {
    behaviors: {
      autoRotate: 0,
    },
  },
  model: {
    url: "https://playground.babylonjs.com/scenes/Rabbit.babylon",
  },
});

----------------------------------------

TITLE: Setting Lens Texture in Babylon.js Pipeline
DESCRIPTION: Adds a dirty lens effect by applying a mask texture to the rendering pipeline.

LANGUAGE: javascript
CODE:
// Just create a new BABYLON.Texture containing the dirty lens mask
pipeline.lensTexture = new BABYLON.Texture("lensdirt.jpg", scene);

----------------------------------------

TITLE: Styling Elements with CSS Class
DESCRIPTION: Example of CSS class definition for centering text and setting color to red

LANGUAGE: css
CODE:
.center
{
    text-align: center;
    color: red;
}

----------------------------------------

TITLE: Disposing GUITextfield in BabylonJS
DESCRIPTION: Method to dispose of the GUITextfield and remove it from the GUI.

LANGUAGE: javascript
CODE:
dispose() → void

----------------------------------------

TITLE: Retrieving GUI Elements by ID in JavaScript
DESCRIPTION: Fetches a specific GUI element using its ID. This method returns a GUIElement object corresponding to the provided ID string.

LANGUAGE: javascript
CODE:
getElementById(string)

----------------------------------------

TITLE: GUISpinner Methods Implementation
DESCRIPTION: Core methods available on GUISpinner instances for managing visibility, retrieving values, and cleanup.

LANGUAGE: typescript
CODE:
// Get the current number value
getNumber(): void

// Set visibility with optional fade effect
setVisible(visible: boolean, fade: boolean): void

// Check if element is visible
isVisible(): boolean

// Cleanup and remove element
dispose(): void

----------------------------------------

TITLE: Basic MeshWriter Initialization in BabylonJS
DESCRIPTION: Demonstrates basic initialization of MeshWriter to create 3D text meshes. Shows how to set scale, letter height, color and position.

LANGUAGE: javascript
CODE:
Writer = BABYLON.MeshWriter(scene, { scale: scale });
text1 = new Writer("ABC", {
  anchor: "center",
  "letter-height": 50,
  color: "#1C3870",
  position: {
    z: 20
  }
});

----------------------------------------

TITLE: Setting Visibility of a GUIGroup in BabylonJS
DESCRIPTION: Sets the visibility of the entire GUIGroup. This method allows you to show or hide all elements within the group simultaneously.

LANGUAGE: typescript
CODE:
setVisible(bool) → void

----------------------------------------

TITLE: Tracking File Loading Progress
DESCRIPTION: Example demonstrating how to track and display file loading progress using SceneLoader.

LANGUAGE: javascript
CODE:
BABYLON.SceneLoader.ImportMesh(
    "",
    "https://models.babylonjs.com/CornellBox/",
    "cornellBox.glb",
    scene,
    function () {
        scene.createDefaultCamera(true, true, true);
        scene.activeCamera.alpha = Math.PI / 2;
        engine.hideLoadingUI();
    },
    function (evt) {
        var loadedPercent = 0;
        if (evt.lengthComputable) {
            loadedPercent = (evt.loaded * 100 / evt.total).toFixed();
        } else {
            var dlCount = evt.loaded / (1024 * 1024);
            loadedPercent = Math.floor(dlCount * 100.0) / 100.0;
        }
        document.getElementById("loadingScreenPercent").innerHTML = loadedPercent;
    }
);

----------------------------------------

TITLE: Checking Visibility of GUIFieldset in BabylonJS
DESCRIPTION: Method to check if the GUIFieldset is visible.

LANGUAGE: javascript
CODE:
isVisible() → void

----------------------------------------

TITLE: Complete Multiple Scene Setup in Babylon.js
DESCRIPTION: Full implementation of multiple scene creation and management using separate creation functions.

LANGUAGE: javascript
CODE:
var createScene0 = function () {
  var scene0 = new BABYLON.Scene(engine);

  //Add camera, light and meshes for scene0

  return scene0;
};

var createScene1 = function () {
  var scene1 = new BABYLON.Scene(engine);

  //Add camera, light and meshes for scene1

  return scene1;
};

//Any other code
var scene0 = createScene0();
var scene1 = createScene1();

engine.runRenderLoop(function () {
  scene0.render();
  scene1.render();
});

----------------------------------------

TITLE: Checking Bounding Box Intersection in Babylon.js
DESCRIPTION: Initial check to determine if the point lies within the mesh's bounding box by comparing coordinates against minimum and maximum bounds.

LANGUAGE: javascript
CODE:
var boundInfo = this.getBoundingInfo();
var max = boundInfo.maximum;
var min = boundInfo.minimum;
if(point.x < min.x || point.x > max.x) {
	return false;
}
if(point.y < min.y || point.y > max.y) {
	return false;
}
if(point.z < min.z || point.z > max.z) {
	return false;
}

----------------------------------------

TITLE: Disabling Default Touch Action in Babylon.js Canvas
DESCRIPTION: This HTML snippet demonstrates how to disable the default touch action on the rendering canvas when using PEP for touch event support in Babylon.js.

LANGUAGE: javascript
CODE:
<canvas id="renderCanvas" touch-action="none"></canvas>

----------------------------------------

TITLE: Ray Casting Implementation
DESCRIPTION: Creates and casts a ray from the facet point to find intersection with the mesh, using mesh bounding sphere for ray length.

LANGUAGE: javascript
CODE:
var boundInfo = mesh.getBoundingInfo();
var diameter = 2 * boundInfo.boundingSphere.radius;

var ray = new BABYLON.Ray(facetPoint, direction, diameter);
var hitPoint = ray.intersectsMesh(mesh).pickedPoint;

----------------------------------------

TITLE: Creating Default Arc Rotate Camera
DESCRIPTION: Shows how to create an arc rotate camera with default settings, replacing existing camera and attaching controls.

LANGUAGE: javascript
CODE:
scene.createDefaultCamera(true, true, true);

----------------------------------------

TITLE: Loading JavaScript Files in Babylon.js
DESCRIPTION: This snippet demonstrates how to dynamically load a JavaScript file and execute code after it's loaded. It creates a script element, sets its source, and defines an onload callback.

LANGUAGE: javascript
CODE:
var url = "LINK ADDRESS";
var s = document.createElement("script");
s.src = url;
document.head.appendChild(s);

var createScene = function() {

    //Scene set up code

    s.onload = function() {
        //any code calling on loaded file code
    }
	
    return scene;
}

----------------------------------------

TITLE: Adding Keys to VirtualKeyboard in Babylon.js
DESCRIPTION: This snippet demonstrates how to add a row of keys to a VirtualKeyboard control in Babylon.js GUI.

LANGUAGE: JavaScript
CODE:
const keyboard = new BABYLON.GUI.VirtualKeyboard();
keyboard.addKeysRow(["1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "\u2190"]);

----------------------------------------

TITLE: Loading Textures from Imgur in Babylon.js
DESCRIPTION: This snippet demonstrates how to load textures from Imgur. It creates a new BABYLON.Texture object using a direct Imgur image URL.

LANGUAGE: javascript
CODE:
var texture = new BABYLON.Texture("https://i.imgur.com/yn98ktz.png", scene);

----------------------------------------

TITLE: Creating a Scroll Viewer in Babylon.js
DESCRIPTION: Demonstrates how to create a basic Scroll Viewer and add it to an advanced texture in Babylon.js GUI.

LANGUAGE: javascript
CODE:
const myScrollViewer = new BABYLON.GUI.ScrollViewer();
// OR
const myScrollViewer = new BABYLON.GUI.ScrollViewer("name");

const myAdvancedTexture = BABYLON.GUI.AdvancedDynamicTexture.CreateFullscreenUI("UI");
myAdvancedTexture.addControl(myScrollViewer);

myScrollViewer.addControl(myControl);

----------------------------------------

TITLE: Initializing and Closing Babylon.js Reflector in JavaScript
DESCRIPTION: This snippet demonstrates how to create a Reflector instance for a Babylon.js scene and how to close it. The Reflector is initialized with the scene object and connection details (hostname and port).

LANGUAGE: javascript
CODE:
const reflector = new BABYLON.Reflector(scene, "localhost", 1234);

// ...

reflector.close();

----------------------------------------

TITLE: Registering Basic Action in Babylon.js
DESCRIPTION: Demonstrates how to register an interpolation action that triggers when a mesh is picked, animating a light's diffuse color.

LANGUAGE: javascript
CODE:
mesh.actionManager.registerAction(new BABYLON.InterpolateValueAction(BABYLON.ActionManager.OnPickTrigger, light, "diffuse", BABYLON.Color3.Black(), 1000));

----------------------------------------

TITLE: Declaring Custom Uniform Buffer in WGSL for Babylon.js
DESCRIPTION: Shows how to declare a custom uniform buffer in WGSL for use with Babylon.js ShaderMaterial.

LANGUAGE: wgsl
CODE:
struct MyUBO {
    scale: f32,
};

var<uniform> myUBO: MyUBO;

----------------------------------------

TITLE: Chaining Actions in Babylon.js
DESCRIPTION: Shows how to chain multiple actions together using the then() method, combining interpolation and value setting actions.

LANGUAGE: javascript
CODE:
mesh.actionManager.registerAction(new BABYLON.InterpolateValueAction(BABYLON.ActionManager.OnPickTrigger, light, "diffuse", BABYLON.Color3.Black(), 1000)).then(new BABYLON.SetValueAction(BABYLON.ActionManager.NothingTrigger, mesh.material, "wireframe", false));

----------------------------------------

TITLE: Using SnapshotRenderingHelper in Babylon.js
DESCRIPTION: Shows how to use the SnapshotRenderingHelper class to simplify usage of fast snapshot rendering mode. This code creates an instance of the helper and enables snapshot rendering after the scene is loaded or created.

LANGUAGE: javascript
CODE:
const sr = new BABYLON.SnapshotRenderingHelper(scene);
...
// make sure your scene is loaded/created
...
sr.enableSnapshotRendering();

----------------------------------------

TITLE: Advanced Game Loop Coroutine
DESCRIPTION: Complex example showing how to implement a game loop using coroutines, including state management and animations.

LANGUAGE: javascript
CODE:
const playGame = function* () {
  displayGameLogo();

  while (!enterKeyPressed() && !escapeKeyPressed()) {
    yield;
  }

  if (escapeKeyPressed()) {
    return;
  }

  yield loadTheSceneAsync();

  spawnTheFirstMesh();
  yield;
  spawnTheSecondMesh();
  yield;
  spawnTheThirdMesh();
  yield;

  while (!escapeKeyPressed()) {
    if (jumpButtonPressed()) {
      const jump = function* () {
        for (let t = 0; t <= Math.PI; t += Math.PI / 30) {
          playerCharacter.y = Math.sin(t);
          yield;
        }
      };
      yield scene.onBeforeRenderObservable.runCoroutineAsync(jump());
    }

    yield;
  }

  yield saveGameStateAsync();

  showGoodbyeMessage();
};
scene.onBeforeRenderObservable.runCoroutineAsync(playGame());

----------------------------------------

TITLE: Resource Management with DrawWrapper
DESCRIPTION: Best practice for using engine.enableEffect() with DrawWrapper instead of Effect to prevent creation of unnecessary WebGPU resources each frame. Performance can be monitored through engine.countersLastFrame to ensure numEnableEffects is 0.

LANGUAGE: javascript
CODE:
engine.enableEffect(drawWrapper); // Recommended
// engine.enableEffect(effect); // Not recommended

----------------------------------------

TITLE: Creating VideoDome in Babylon.js
DESCRIPTION: Basic initialization of a VideoDome with configuration options. Requires a video URL and scene object. Options include resolution, clickToPlay, autoPlay, loop, size, and other video-related settings.

LANGUAGE: javascript
CODE:
videoDome = new BABYLON.VideoDome("videoDome", url, { < options > }, scene);

----------------------------------------

TITLE: Defining Pipeline State Positions Enum
DESCRIPTION: Enumerates the different state positions used in the pipeline cache tree, ordered by likelihood of state changes to optimize traversal performance.

LANGUAGE: javascript
CODE:
enum StatePosition {
    StencilReadMask = 0,
    StencilWriteMask = 1,
    DepthBias = 2,
    DepthBiasSlopeScale = 3,
    DepthStencilState = 4,
    MRTAttachments1 = 5,
    MRTAttachments2 = 6,
    RasterizationState = 7,
    ColorStates = 8,
    ShaderStage = 9,
    TextureStage = 10,
    VertexState = 11,

    NumStates = 12
}

----------------------------------------

TITLE: Configuring Mirror Reflection
DESCRIPTION: Sets up a mirror reflection texture for the background material

LANGUAGE: javascript
CODE:
mirror = new BABYLON.MirrorTexture("mirror", 512, scene);
mirror.mirrorPlane = new BABYLON.Plane(0, -1, 0, 0);
mirror.renderList.push(sphere);

backgroundMaterial.reflectionTexture = mirror;

----------------------------------------

TITLE: Defining a Material in .babylon Format
DESCRIPTION: Demonstrates how materials are defined in the .babylon file, including properties for color, textures, and lighting characteristics.

LANGUAGE: javascript
CODE:
{
    "name": string,
    "id": string,
    "ambient": color3,
    "diffuse": color3,
    "specular": color3,
    "specularPower": float,
    "emissive": color3,
    "alpha": float,
    "backFaceCulling": boolean,
    "diffuseTexture": {
        "name": string,
        "level": float,
        "hasAlpha": boolean,
        "coordinatesMode": int,
        "uOffset": float,
        "vOffset": float,
        "uScale": float,
        "vScale": float
    }
}

----------------------------------------

TITLE: Isometric Grid Vector Transformation Formula
DESCRIPTION: Mathematical formulas for rotating vectors on an isometric grid by 60 degrees clockwise and counterclockwise about a point

LANGUAGE: mathematics
CODE:
R⁺(xi⃗ + yj⃗) = -yi⃗ + (x + y)j⃗
R⁻(xi⃗ + yj⃗) = (x + y)i⃗ - xj⃗

----------------------------------------

TITLE: Creating Lathe Shape with Mesh Method in Babylon.js
DESCRIPTION: Creates a lathe shape using the traditional Mesh method with basic parameters. This method offers fewer customization options compared to MeshBuilder but provides essential functionality for simple lathe shapes.

LANGUAGE: javascript
CODE:
let lathe = BABYLON.Mesh.CreateLathe("lathe", shape, radius, tessellation, scene);
let lathe = BABYLON.Mesh.CreateLathe("lathe", shape, radius, tessellation, scene, updatable, sideOrientation);

----------------------------------------

TITLE: Handling Physics Collisions for Interactive Objects
DESCRIPTION: Detects collisions between players and interactive objects, updating ownership and synchronization.

LANGUAGE: javascript
CODE:
if (key === room.sessionId) {
  //...
  box.physicsImpostor.registerOnPhysicsCollide(playerViews[sessionId].physicsImpostor, function (main, collided) {
    room.send("boxUpdate", {
      targetId: sessionId,
      position: { x: box.position.x, y: box.position.y, z: box.position.z },
      quaternion: { x: box.rotationQuaternion.x, y: box.rotationQuaternion.y, z: box.rotationQuaternion.z, w: box.rotationQuaternion.w },
    });
  });
} else {
  //...
}

----------------------------------------

TITLE: Defining Heptagonal Prism Data Structure
DESCRIPTION: JSON structure defining vertices and faces for a heptagonal prism polyhedron. Contains coordinate data for vertices and face indices for construction.

LANGUAGE: javascript
CODE:
HeptagonalPrism : {
"name":"Heptagonal Prism",
"category":["Prism"],
"vertex":[[0,0,1.090071],[0.796065,0,0.7446715],[-0.1498633,0.7818315,0.7446715],[-0.7396399,-0.2943675,0.7446715],[0.6462017,0.7818315,0.3992718],[1.049102,-0.2943675,-0.03143449],[-0.8895032,0.487464,0.3992718],[-0.8658909,-0.6614378,-0.03143449],[0.8992386,0.487464,-0.3768342],[0.5685687,-0.6614378,-0.6538232],[-1.015754,0.1203937,-0.3768342],[-0.2836832,-0.8247995,-0.6538232],[0.4187054,0.1203937,-0.9992228],[-0.4335465,-0.042968,-0.9992228]],
"face":[[0,1,4,2],[0,2,6,3],[1,5,8,4],[3,6,10,7],[5,9,12,8],[7,10,13,11],[9,11,13,12],[0,3,7,11,9,5,1],[2,4,8,12,13,10,6]]}

----------------------------------------

TITLE: Finalizing Game Setup in Babylon.js
DESCRIPTION: Initializes the game and sets the player's position in the scene.

LANGUAGE: javascript
CODE:
//primitive character and setting
await this._initializeGameAsync(scene);

//--WHEN SCENE FINISHED LOADING--
await scene.whenReadyAsync();
scene.getMeshByName("outer").position = new Vector3(0, 3, 0);

----------------------------------------

TITLE: UV Mapping Configuration Example
DESCRIPTION: Example showing how to configure different UV mappings for front and back of the plane.

LANGUAGE: javascript
CODE:
const f = new BABYLON.Vector4(0.5,0, 1, 1);
const b = new BABYLON.Vector4(0,0, 0.5, 1);

const options = {
    frontUVs: f,
	backUVs: b,
	sideOrientation: BABYLON.Mesh.DOUBLESIDE
}

----------------------------------------

TITLE: Installing Babylon.js Core and Inspector via NPM
DESCRIPTION: These shell commands install the core Babylon.js library and the Babylon.js Inspector as development dependencies using NPM.

LANGUAGE: shell
CODE:
npm install --save-dev @babylonjs/core
npm install --save-dev @babylonjs/inspector

----------------------------------------

TITLE: Generating Circular Path Points in JavaScript
DESCRIPTION: This code snippet demonstrates how to generate points for a circular path in the XY plane using trigonometric functions.

LANGUAGE: javascript
CODE:
const path = [];
for(let theta = 0; theta < 2 * Math.PI; theta +=deltaTheta ) {
    path.push(new BABYLON.Vector3(radius * Math.cos(theta), radius * Math.sin(theta), 0));

----------------------------------------

TITLE: Implementing Ground Detection with Raycasts in Babylon.js
DESCRIPTION: Uses raycasts to detect the ground beneath the character. This function casts a ray downward from the character's position and checks for pickable meshes.

LANGUAGE: typescript
CODE:
let raycastFloorPos = new Vector3(this.mesh.position.x + offsetx, this.mesh.position.y + 0.5, this.mesh.position.z + offsetz);
let ray = new Ray(raycastFloorPos, Vector3.Up().scale(-1), raycastlen);

let predicate = function (mesh) {
    return mesh.isPickable && mesh.isEnabled();
}
let pick = this.scene.pickWithRay(ray, predicate);

if (pick.hit) {
    return pick.pickedPoint;
} else {
    return Vector3.Zero();
}

----------------------------------------

TITLE: Incrementing Position Components in Babylon.js
DESCRIPTION: Demonstrates how to incrementally adjust mesh position by adding values to individual coordinates. This method modifies the current position relative to its existing values.

LANGUAGE: javascript
CODE:
mesh.position.x += 2; //(-1 + 2, 2, 1) = (1, 2, 1)
mesh.position.y += 3; //(1, 2 + 3, 1) = (1, 5, 1)
mesh.position.z += 4; //(1, 5, 1 + 4) = (1, 5, 5)

----------------------------------------

TITLE: Setting FollowCamera Target in Babylon.js
DESCRIPTION: Set the target mesh for the FollowCamera to track.

LANGUAGE: javascript
CODE:
camera.lockedTarget = targetMesh;

----------------------------------------

TITLE: Starting the Particle System in Babylon.js
DESCRIPTION: Initiates the particle system animation.

LANGUAGE: javascript
CODE:
particleSystem.start();

----------------------------------------

TITLE: Component Management in Motion Controllers
DESCRIPTION: Examples of accessing and managing controller components, including getting component lists and accessing specific component types.

LANGUAGE: javascript
CODE:
const ids = motionController.getComponentIds();
// ids = ["a-button", "b-button", "xr-standard-trigger", .....]

----------------------------------------

TITLE: Configuring Billboard Mode in Babylon.js Particle System
DESCRIPTION: Shows how to configure billboard rendering for particles. Options include disabling billboard mode, setting Y-axis only billboarding, and using stretched billboard mode for direction-aligned particles.

LANGUAGE: javascript
CODE:
particleSystem.isBillboardBased = false;

particleSystem.billboardMode = BABYLON.ParticleSystem.BILLBOARDMODE_Y;

particleSystem.billboardMode = BABYLON.ParticleSystem.BILLBOARDMODE_STRETCHED;

----------------------------------------

TITLE: Controller Model Loading Event Handling
DESCRIPTION: Shows different approaches to handle controller model loading events, demonstrating both verbose and cleaner implementations.

LANGUAGE: javascript
CODE:
// async, async, async
xrInput.onControllerAddedObservable.add((inputSource) => {
  inputSource.onMotionControllerInitObservable.add((motionController) => {
    motionController.onMeshLoadedObservable.add((model) => {});
  });
});

// a little cleaner
xrInput.onControllerAddedObservable.add((inputSource) => {
  inputSource.onModelLoadedObservable.add((model) => {});
});

----------------------------------------

TITLE: Setting UV Coordinates for Particles in Babylon.js
DESCRIPTION: Example of setting UV coordinates for a particle to apply a specific region of a texture atlas.

LANGUAGE: javascript
CODE:
particle.uvs.x = 0.2; //the coordinate of lower left corner given by 20% of image width
particle.uvs.y = 0.1; //the coordinate of lower left corner given by 10% of image height
particle.uvs.z = 0.6; //the coordinate of upper right corner given by 60% of image width
particle.uvs.w = 0.3; //the coordinate of upper right corner given by 30% of image height

----------------------------------------

TITLE: Assigning Sprites to Tiles in Babylon.js
DESCRIPTION: This snippet shows how to assign sprites to specific tiles in a sprite map grid using the changeTiles method. It loops through 4 tiles and assigns different sprite frames to each.

LANGUAGE: javascript
CODE:
for(let i = 0; i < 4; i++){
    background.changeTiles(0, new BABYLON.Vector2(i % 2, Math.floor(i / 2)), 9 * i + 9)
}

----------------------------------------

TITLE: Initializing TAA Rendering Pipeline in Babylon.js
DESCRIPTION: This snippet demonstrates how to create and configure a Temporal Anti-Aliasing rendering pipeline in a Babylon.js scene. It sets up the pipeline with 8 samples and enables it for use.

LANGUAGE: javascript
CODE:
const taaRenderPipeline = new BABYLON.TAARenderingPipeline("taa", scene, [camera]);

taaRenderPipeline.isEnabled = true;
taaRenderPipeline.samples = 8;

----------------------------------------

TITLE: Animating a Sprite in Babylon.js
DESCRIPTION: Demonstrates how to animate a sprite by playing through a sequence of cells in a spritesheet. Parameters control the start and end cells, looping, and animation speed.

LANGUAGE: javascript
CODE:
mySprite.playAnimation(start cell, end cell, loop, delay);

----------------------------------------

TITLE: Handling Different Gamepad Types in Babylon.js
DESCRIPTION: Shows how to handle specific gamepad types, such as Xbox360 controllers and VR controllers, in Babylon.js. It demonstrates accessing unique properties and events for each type.

LANGUAGE: javascript
CODE:
gamepadManager.onGamepadConnectedObservable.add((gamepad, state)=>{
    if (gamepad instanceof BABYLON.Xbox360Pad) {
        gamepad.onButtonDownObservable.add((button, state)=>{
            console.log(BABYLON.Xbox360Button[button])
        })
    }
    if (gamepad instanceof BABYLON.PoseEnabledController) {
        gamepad.onMainButtonStateChangedObservable.add((button, state)=>{
            console.log(button.value)
        })
        const position = gamepad.devicePosition
        const rotation = gamepad.deviceRotationQuaternion
    }
}

----------------------------------------

TITLE: Configuring Bright Threshold in Babylon.js Pipeline
DESCRIPTION: Sets the brightness threshold for highlighted surfaces in the rendering pipeline.

LANGUAGE: javascript
CODE:
pipeline.brightThreshold = 0.8;

----------------------------------------

TITLE: Depth Values Setup in JavaScript
DESCRIPTION: JavaScript code showing how depth values are set up for the shader uniforms in Babylon.js.

LANGUAGE: javascript
CODE:
effect.setFloat2("depthValuesSM", this.getLight().getDepthMinZ(scene.activeCamera), this.getLight().getDepthMinZ(scene.activeCamera) + this.getLight().getDepthMaxZ(scene.activeCamera));

----------------------------------------

TITLE: Setting Prestep Type to Action Mode in Babylon.js
DESCRIPTION: This code shows how to set the prestep type to action mode for a physics body in Babylon.js. It uses the setPrestepType method with the PhysicsPrestepType.ACTION parameter.

LANGUAGE: javascript
CODE:
aggregate.body.setPrestepType(PhysicsPrestepType.ACTION);

----------------------------------------

TITLE: Creating Multiple Mesh Copies with Solid Particle System in Babylon.js
DESCRIPTION: Demonstrates how to create multiple copies of a mesh using the Solid Particle System. The code creates a tetrahedron, adds multiple copies to the SPS, and initializes particle properties like position, scale, and rotation with random values.

LANGUAGE: javascript
CODE:
SPS = new BABYLON.SolidParticleSystem("SPS", scene);  //create the SPS
const tetra = BABYLON.MeshBuilder.CreatePolyhedron("tetra", {}); //create the mesh
SPS.addShape(tetra, 1500);      // add as many copies as you want to the SPS
tetra.dispose(); //dispose of the original mesh
const spsMesh = SPS.buildMesh();  //builds the SPS mesh

//Set the function to initialise the particle properties
SPS.initParticles = () => {
    for (let p = 0; p < SPS.nbParticles; p++) {
        const particle = SPS.particles[p]  
        particle.position.x = BABYLON.Scalar.RandomRange(-50, 50);
        particle.position.y = BABYLON.Scalar.RandomRange(-50, 50);
        particle.position.z = BABYLON.Scalar.RandomRange(-50, 50);
    
        const scale = BABYLON.Scalar.RandomRange(0.5, 1.5);
        particle.scale.x = scale;
        particle.scale.y = scale;
        particle.scale.z = scale;

	        particle.rotation.x = BABYLON.Scalar.RandomRange(0, Math.PI);
	        particle.rotation.y = BABYLON.Scalar.RandomRange(0, Math.PI);
	        particle.rotation.z = BABYLON.Scalar.RandomRange(0, Math.PI);
    }
} ;


SPS.initParticles(); //call the initialising function
SPS.setParticles(); //apply the properties and display the mesh

----------------------------------------

TITLE: Parsing Loaded Text as JSON in Babylon.js
DESCRIPTION: This snippet demonstrates how to parse the loaded text file as JSON using JSON.parse(). It assumes the particleFile variable contains the loaded text file from the Asset Manager.

LANGUAGE: javascript
CODE:
assetsManager.onFinish = function (task) {
    console.log("task successful", task);

    // prepare to parse particle system files
    const particleJSON = JSON.parse(particleFile.text);
}

----------------------------------------

TITLE: Updating Bounding Box on Child Addition in Babylon.js
DESCRIPTION: This snippet demonstrates how to update the bounding box when a new child is added to a parent node, using onAfterWorldMatrixUpdateObservable and preventing infinite loops.

LANGUAGE: javascript
CODE:
parent.onAfterWorldMatrixUpdateObservable.add((v) => {
        setTimeout(() => {
            if (parent.detectReentrancy) {
                return;
            }
            parent.detectReentrancy = true;
            let { min, max } = parent.getHierarchyBoundingVectors();
            parent.setBoundingInfo(new BABYLON.BoundingInfo(min, max));
            setTimeout(() => {
                parent.detectReentrancy = false;
            });
        });
    })

----------------------------------------

TITLE: Implementing Progress Tracking for GLTF Loading
DESCRIPTION: Track and display loading progress for GLTF files and LODs, handling both computable and non-computable lengths.

LANGUAGE: javascript
CODE:
BABYLON.SceneLoader.AppendAsync(
  url,
  undefined,
  scene,
  function (event) {
    const percentage = event.lengthComputable ? " " + Math.floor((event.loaded / event.total) * 100) + "%" : "";
    if (lodNext === null) {
      if (event.total === 20) return;
      bottomLine.text = "Loading glTF..." + percentage;
    } else {
      bottomLine.text = "Loading '" + lodNames[lodNext] + "' LOD..." + percentage;
    }
  },
  ".glb"
);

----------------------------------------

TITLE: Implementing Fog in Vertex Shader for Babylon.js
DESCRIPTION: This snippet demonstrates a complete vertex shader implementation with fog support in Babylon.js. It includes the necessary attribute declarations, uniform variables, and fog-related includes.

LANGUAGE: GLSL
CODE:
BABYLON.Effect.ShadersStore["myVertexShader"] = `
precision highp float;
attribute vec3 position;
attribute vec2 uv;
uniform mat4 world;    
uniform mat4 view;    
uniform mat4 viewProjection;
varying vec2 vUV;

#include<fogVertexDeclaration>

void main() {
    vec4 p = vec4(position, 1.);
    vec4 worldPos = world * p;
    gl_Position = viewProjection * worldPos;
    vUV = uv;

    #include<fogVertex>
}`

----------------------------------------

TITLE: Loading a Node Material from a Snippet
DESCRIPTION: Shows how to load a Node Material from a saved snippet using a unique URL.

LANGUAGE: JavaScript
CODE:
BABYLON.NodeMaterial.ParseFromSnippetAsync("2F999G", scene).then((nodeMaterial) => {
  sphere.material = nodeMaterial;
});

----------------------------------------

TITLE: Updating Existing Post Process with Node Material
DESCRIPTION: Updates an existing post-process instance with a node material's effect. Shows initialization of post-process and subsequent effect creation.

LANGUAGE: javascript
CODE:
const myPostProcess = new BABYLON.PostProcess(...);
...
nodeMaterial.createEffectForPostProcess(myPostProcess);

----------------------------------------

TITLE: Creating GUITexture Constructor in BabylonJS
DESCRIPTION: Constructor for creating a new GUITexture element with specified parameters including id, image URL, options, and GUI manager. Supports optional callback function and append behavior.

LANGUAGE: typescript
CODE:
new GUITexture(id: string, imageUrl: string, options: any, guimanager: GUIManager, callback?: Function, append?: boolean)

----------------------------------------

TITLE: Declaring Variables in GLSL Shaders
DESCRIPTION: This snippet shows how to correctly declare and initialize variables in GLSL shaders. It demonstrates the importance of type consistency when assigning values to variables.

LANGUAGE: glsl
CODE:
int n = 2;
float r = 2.0;

----------------------------------------

TITLE: Setting GUICheckbox Visibility in BabylonJS
DESCRIPTION: Method to set the visibility of the GUICheckbox, with an optional fade effect.

LANGUAGE: javascript
CODE:
setVisible(bool, fade) → void

----------------------------------------

TITLE: Enabling Poisson Sampling
DESCRIPTION: Activates Poisson sampling filter for softer shadow edges.

LANGUAGE: javascript
CODE:
shadowGenerator.usePoissonSampling = true;

----------------------------------------

TITLE: Setting GUIRadio Visibility in BabylonJS
DESCRIPTION: Method to set the visibility of the radio button, with an optional fade effect.

LANGUAGE: javascript
CODE:
setVisible(bool, fade) → void

----------------------------------------

TITLE: MeshExploder Control Parameters in Babylon.js
DESCRIPTION: Shows how to control explosion effects using different numeric parameters. Demonstrates implosion and reset functionality.

LANGUAGE: javascript
CODE:
newExplosion.explode(-2); //Implodes
newExplosion.explode(0); //Resets

----------------------------------------

TITLE: Initializing CastorGUI Manager
DESCRIPTION: Creates a new GUIManager instance with canvas reference, custom CSS styling, and theme options. The manager handles canvas positioning and theme management.

LANGUAGE: javascript
CODE:
let canvas = document.getElementById("game");
let css = "button {cursor:pointer;}";
let options = { themeRoot: "../style/", themeGUI: "default", pixel: false };
let guisystem = new GUIManager(canvas, css, options);

----------------------------------------

TITLE: Creating URL for Blob in JavaScript
DESCRIPTION: This snippet creates a URL pointing to the Blob object in memory using URL.createObjectURL().

LANGUAGE: javascript
CODE:
const assetUrl = URL.createObjectURL(assetBlob);

----------------------------------------

TITLE: Loading Exported Fullscreen ADT in BabylonJS
DESCRIPTION: This snippet demonstrates how to load a fullscreen Advanced Dynamic Texture exported from the FigmaToBabylonJS plugin into a BabylonJS project.

LANGUAGE: typescript
CODE:
const guiData = require("../figmaToBabylonJS.json")
let advancedTexture = AdvancedDynamicTexture.CreateFullscreenUI("UI")
advancedTexture.parseSerializedObject(guiData, true)

----------------------------------------

TITLE: Importing OBJ File Loader in JavaScript
DESCRIPTION: This code demonstrates how to import the OBJ file importer statically in a JavaScript environment. However, this method is not recommended, and using the dynamic loader registration is preferred.

LANGUAGE: javascript
CODE:
import "@babylonjs/loaders/OBJ/objFileLoader";

----------------------------------------

TITLE: Implementing Xbox Live Authentication in Babylon.js
DESCRIPTION: This snippet demonstrates how to implement Xbox Live authentication in a Babylon.js scene controller. It includes a method for handling sign-in button clicks and managing Xbox Live user authentication.

LANGUAGE: javascript
CODE:
module PROJECT {
    export class TestSceneController extends BABYLON.MeshComponent {
        public constructor(owner: BABYLON.AbstractMesh, scene: BABYLON.Scene, tick: boolean = true, propertyBag: any = {}) {
            super(owner, scene, tick, propertyBag);
        }
        protected onSignInButton() :void {
            if (BABYLON.SceneManager.IsXboxLivePluginEnabled()) {
                var player:BABYLON.PlayerNumber.One = BABYLON.PlayerNumber.One;
                if (!BABYLON.SceneManager.IsXboxLiveUserSignedIn(null, player)) {
                    BABYLON.SceneManager.XboxLiveUserSignIn(player, (result: Microsoft.Xbox.Services.System.SignInResult) => {
                        var user = BABYLON.SceneManager.GetXboxLiveUser(player);
                        var msg = "(" + user.xboxUserId + ") - " + user.gamertag;
                        BABYLON.SceneManager.Alert(msg, "Xbox Live User Signed In");
                    }, (err)=>{
                        console.log(err);
                        var msg:string = "Encountered Sign Error";
                        BABYLON.Tools.Warn(msg);
                        BABYLON.SceneManager.Alert(msg, "Xbox Live Warning");
                    });
                } else {
                    BABYLON.Tools.Warn("Xbox Live User Already Signed In");
                    BABYLON.SceneManager.Alert("User Already Signed In", "Xbox Live Warning");
                }
            }
        }
    }
}

----------------------------------------

TITLE: Using Custom Importer with Options in TypeScript
DESCRIPTION: This snippet demonstrates how to use a custom importer with specific options when loading an asset container.

LANGUAGE: typescript
CODE:
await LoadAssetContainerAsync("path/to/model", scene, {
  pluginOptions: {
    myCustomImporter: {
      option1: "hello world",
      option2: 42,
    },
  },
});

----------------------------------------

TITLE: Setting Mesh Parent in Babylon.js
DESCRIPTION: Demonstrates how to set a parent-child relationship between two meshes in Babylon.js. This allows transformations applied to the parent to affect the child mesh as well.

LANGUAGE: javascript
CODE:
meshChild.parent = meshParent

----------------------------------------

TITLE: Creating a PhotoDome in Babylon.js
DESCRIPTION: Demonstrates how to create a PhotoDome object in a Babylon.js scene. The PhotoDome requires an equirectangular source image and accepts optional configuration parameters.

LANGUAGE: javascript
CODE:
photoDome = new BABYLON.PhotoDome("testdome", url, {<options>}, scene);

----------------------------------------

TITLE: Adding Interactive Examples
DESCRIPTION: HTML syntax for embedding Babylon.js Playground and Node Material Editor examples in documentation

LANGUAGE: html
CODE:
<Playground id="playgroundId" title="Playground title" description="A short description" image="Optional image url" />
<nme id="nmeId" title="NME title" description="A short description" />

----------------------------------------

TITLE: Using Dynamic Array and Object Sources in XML Layouts
DESCRIPTION: This snippet shows how to connect arrays or objects to XML layouts for dynamic content generation, using the dataSource attribute and curly bracket notation.

LANGUAGE: javascript
CODE:
const objTexts = {
  first: {
    name: "john",
    surname: "smith",
  },
  second: {
    name: "ben",
    surname: "Stiller",
  },
};

LANGUAGE: xml
CODE:
<StackPanel background="#ffffff" width="300px" top="100px" left="200px" id="panel" dataSource="text in {objTexts}">
       <Container  width="1" height="40px" >
           <TextBlock id="myImage" height="1" text="{{text.name}}" color="red" resizeToFit="true" fontSize="24"/>
           <TextBlock left="50px" height="1" text="{{text.surname}}" color="black" resizeToFit="true" fontSize="24"/>
       </Container>
</StackPanel>

----------------------------------------

TITLE: Creating an Editor Script Component in C#
DESCRIPTION: Example of a C# editor script component that defines design-time properties and sets the Babylon class name. It includes a custom property and demonstrates how to add items to the property bag during export.

LANGUAGE: csharp
CODE:
using System;
using UnityEditor;
using UnityEngine;
using Unity3D2Babylon;

namespace MyProject
{
    [Serializable]
    public class Person
    {
        public string first;
        public string last;
    }

    public class NewScriptComponent : EditorScriptComponent
    {
        [Header("-Script Properties-")]

        [BabylonProperty]
        public string hello = "Hello World";

        protected NewScriptComponent()
        {
            this.babylonClass = "BABYLON.SceneComponent";
            this.OnExportProperties = this.OnExportPropertiesHandler;
        }

        public void OnExportPropertiesHandler(SceneBuilder sceneBuilder, GameObject unityGameObject, Dictionary<string, object> propertyBag)
        {
            // Add Custom Property Bag Item
            propertyBag.Add("person", new Person { first = "Mackey", last = "Kinard" });
        }
    }

    [CustomEditor(typeof(NewScriptComponent)), CanEditMultipleObjects]
    public class NewScriptComponentEditor : Editor
    {
        public override void OnInspectorGUI()
        {
            // Draw Custom Inspector Properties
            DrawDefaultInspector();
            NewScriptComponent script = (NewScriptComponent)target;
        }
    }
}

----------------------------------------

TITLE: Initializing GUI3DManager in Babylon.js
DESCRIPTION: Creates a new GUI3DManager instance to manage 3D GUI controls in a Babylon.js scene.

LANGUAGE: javascript
CODE:
const manager = new BABYLON.GUI.GUI3DManager(scene);

----------------------------------------

TITLE: Creating BabylonJS Scene with FPS Callback
DESCRIPTION: Creates a BabylonJS scene with three colored cubes and implements FPS calculation via callback function. The scene includes a rotating green cube and renders the FPS count.

LANGUAGE: JavaScript
CODE:
import { Engine, Scene, FreeCamera, Vector3, MeshBuilder, StandardMaterial, Color3, HemisphericLight } from "@babylonjs/core";
const createScene = (canvas, fpsCallback) => {
  const engine = new Engine(canvas);
  const scene = new Scene(engine);

  const camera = new FreeCamera("camera1", new Vector3(0, 5, -10), scene);
  camera.setTarget(Vector3.Zero());
  camera.attachControl(canvas, true);

  new HemisphericLight("light", Vector3.Up(), scene);

  const boxRed = MeshBuilder.CreateBox("box-red", { size: 1 }, scene);
  const materialRed = new StandardMaterial("box-red-material", scene);
  materialRed.diffuseColor = Color3.Red();
  boxRed.material = materialRed;
  boxRed.position.x = -2;

  const boxBlue = MeshBuilder.CreateBox("box-yellow", { size: 1 }, scene);
  const materialYellow = new StandardMaterial("box-blue-material", scene);
  materialYellow.diffuseColor = Color3.Yellow();
  boxBlue.material = materialYellow;

  const boxGreen = MeshBuilder.CreateBox("box-green", { size: 1 }, scene);
  const materialGreen = new StandardMaterial("box-green-material", scene);
  materialGreen.diffuseColor = Color3.Green();
  boxGreen.material = materialGreen;
  boxGreen.position.x = 2;

  engine.runRenderLoop(() => {
    scene.render();

    boxGreen.rotation.y += 0.01;

    if (fpsCallback) {
      fpsCallback(engine.getFps().toFixed());
    }
  });
};

export { createScene };

----------------------------------------

TITLE: Performance Optimization for Multiple Passes in Babylon.js
DESCRIPTION: This snippet demonstrates performance optimization techniques for multiple rendering passes, including material cloning and freezing.

LANGUAGE: javascript
CODE:
let rttMaterials = [];
const getCausticMaterial = () => {
    let c = rttMaterial.clone();
    c.freeze(); // freeze because we'll only update uniforms
    rttMaterials.push(c);
    return c;
};

var grass0 = new BABYLON.StandardMaterial("grass0", scene);
grass0.diffuseTexture = new BABYLON.Texture("textures/grass.png", scene);
grass0.freeze();

var ground = BABYLON.MeshBuilder.CreateGround("ground", {width: 6, height: 6}, scene);
ground.material = grass0;
renderTarget.setMaterialForRendering(ground, getCausticMaterial());
renderTarget.renderList.push(ground);

scene.onBeforeRenderObservable.add(() => {
    // ... 
    rttMaterials.forEach((c) => c.setFloat('time', timeDiff));
});

----------------------------------------

TITLE: Setting Tile Size for Tri-Planar Material in Babylon.js
DESCRIPTION: This snippet shows how to customize the tile size of a tri-planar material, which affects the scale of the textures applied to the material.

LANGUAGE: javascript
CODE:
triPlanarMaterial.tileSize = 1.5;

----------------------------------------

TITLE: Extending Babylon.js Inspector with Custom Node Properties
DESCRIPTION: Shows how to add custom properties to a node for manipulation in the Babylon.js Inspector.

LANGUAGE: javascript
CODE:
myNode.inspectableCustomProperties = [
  {
    label: "My boolean field",
    propertyName: "myBooleanField",
    type: BABYLON.InspectableType.Checkbox,
  },
  {
    label: "My color field",
    propertyName: "myColor3Field",
    type: BABYLON.InspectableType.Color3,
  },
  {
    label: "My quaternion field",
    propertyName: "myQuaternionField",
    type: BABYLON.InspectableType.Quaternion,
  },
  {
    label: "My numeric range field",
    propertyName: "myRangeField",
    type: BABYLON.InspectableType.Slider,
    min: 0.5,
    max: 5.0,
    step: 0.1,
  },
  {
    label: "My string field",
    propertyName: "myStringField",
    type: BABYLON.InspectableType.String,
  },
  {
    label: "My vector field",
    propertyName: "myVector3Field",
    type: BABYLON.InspectableType.Vector3,
  },
  {
    label: "My tab field",
    type: BABYLON.InspectableType.Tab,
  },
  {
      label: "My options field",
      propertyName: "myOptionsField",
      options: [
          { label: "options1", value: 1 },
          { label: "options2", value: 2 }
      ],
      callback: (option)=>{
      
      },
      type: BABYLON.InspectableType.Options,

  },
  {
      label: "My button field",
      propertyName: "myButtonField",
      callback: ()=>{
      
      },
      type: BABYLON.InspectableType.Button,

  }
];