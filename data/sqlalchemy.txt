TITLE: Declaring ORM Models with SQLAlchemy
DESCRIPTION: Demonstrates how to declare SQLAlchemy ORM models using modern type hints and mapped columns. Creates User and Address models with a one-to-many relationship between them.

LANGUAGE: python
CODE:
from typing import List
from typing import Optional
from sqlalchemy import ForeignKey
from sqlalchemy import String
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.orm import relationship

class Base(DeclarativeBase):
    pass

class User(Base):
    __tablename__ = "user_account"

    id: Mapped[int] = mapped_column(primary_key=True)
    name: Mapped[str] = mapped_column(String(30))
    fullname: Mapped[Optional[str]]

    addresses: Mapped[List["Address"]] = relationship(
        back_populates="user", cascade="all, delete-orphan"
    )

    def __repr__(self) -> str:
        return f"User(id={self.id!r}, name={self.name!r}, fullname={self.fullname!r})"

class Address(Base):
    __tablename__ = "address"

    id: Mapped[int] = mapped_column(primary_key=True)
    email_address: Mapped[str]
    user_id: Mapped[int] = mapped_column(ForeignKey("user_account.id"))

    user: Mapped["User"] = relationship(back_populates="addresses")

    def __repr__(self) -> str:
        return f"Address(id={self.id!r}, email_address={self.email_address!r})"

----------------------------------------

TITLE: Initializing SQLAlchemy ORM Setup
DESCRIPTION: Basic setup for SQLAlchemy ORM with Declarative Base and necessary imports.

LANGUAGE: python
CODE:
from __future__ import annotations
from typing import List

from sqlalchemy import ForeignKey
from sqlalchemy import Integer
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import relationship


class Base(DeclarativeBase):
    pass

----------------------------------------

TITLE: Executing a Simple SQL Query with SQLAlchemy Core
DESCRIPTION: This snippet demonstrates how to connect to a database, execute a simple SQL query, and fetch the results using SQLAlchemy Core.

LANGUAGE: python
CODE:
from sqlalchemy import text

with engine.connect() as conn:
    result = conn.execute(text("select 'hello world'"))
    print(result.all())

----------------------------------------

TITLE: Creating Database Engine and Tables
DESCRIPTION: Shows how to create a SQLAlchemy engine instance for SQLite and generate database tables from the ORM models.

LANGUAGE: python
CODE:
from sqlalchemy import create_engine
engine = create_engine("sqlite://", echo=True)

Base.metadata.create_all(engine)

----------------------------------------

TITLE: Performing Database Operations with SQLAlchemy Session
DESCRIPTION: Demonstrates how to create, query, update and delete data using SQLAlchemy's Session object with the defined ORM models.

LANGUAGE: python
CODE:
from sqlalchemy.orm import Session

with Session(engine) as session:
    spongebob = User(
        name="spongebob",
        fullname="Spongebob Squarepants",
        addresses=[Address(email_address="spongebob@sqlalchemy.org")],
    )
    sandy = User(
        name="sandy",
        fullname="Sandy Cheeks",
        addresses=[
            Address(email_address="sandy@sqlalchemy.org"),
            Address(email_address="sandy@squirrelpower.org"),
        ],
    )
    patrick = User(name="patrick", fullname="Patrick Star")

    session.add_all([spongebob, sandy, patrick])
    session.commit()

----------------------------------------

TITLE: Inserting Rows using ORM in Python
DESCRIPTION: Demonstrates how to create User objects and add them to a Session to insert rows into the database.

LANGUAGE: python
CODE:
squidward = User(name="squidward", fullname="Squidward Tentacles")
krabs = User(name="ehkrabs", fullname="Eugene H. Krabs")

session = Session(engine)

session.add(squidward)
session.add(krabs)

----------------------------------------

TITLE: Initializing SQLAlchemy ORM Models and Relationships in Python
DESCRIPTION: Defines SQLAlchemy ORM models for User, Address, Order, and Item entities with their relationships and mappings. Sets up a memory SQLite database and populates it with sample data including user accounts and email addresses.

LANGUAGE: python
CODE:
from typing import List
from typing import Optional

from sqlalchemy import Column
from sqlalchemy import create_engine
from sqlalchemy import ForeignKey
from sqlalchemy import Table
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.orm import relationship
from sqlalchemy.orm import Session


class Base(DeclarativeBase):
    pass
class User(Base):
    __tablename__ = "user_account"
    id: Mapped[int] = mapped_column(primary_key=True)
    name: Mapped[str]
    fullname: Mapped[Optional[str]]
    addresses: Mapped[List["Address"]] = relationship(back_populates="user")
    orders: Mapped[List["Order"]] = relationship()

    def __repr__(self) -> str:
        return f"User(id={self.id!r}, name={self.name!r}, fullname={self.fullname!r})"
class Address(Base):
    __tablename__ = "address"
    id: Mapped[int] = mapped_column(primary_key=True)
    user_id: Mapped[int] = mapped_column(ForeignKey("user_account.id"))
    email_address: Mapped[str]
    user: Mapped[User] = relationship(back_populates="addresses")

    def __repr__(self) -> str:
        return f"Address(id={self.id!r}, email_address={self.email_address!r})"
order_items_table = Table(
    "order_items",
    Base.metadata,
    Column("order_id", ForeignKey("user_order.id"), primary_key=True),
    Column("item_id", ForeignKey("item.id"), primary_key=True),
)

class Order(Base):
    __tablename__ = "user_order"
    id: Mapped[int] = mapped_column(primary_key=True)
    user_id: Mapped[int] = mapped_column(ForeignKey("user_account.id"))
    items: Mapped[List["Item"]] = relationship(secondary=order_items_table)
class Item(Base):
    __tablename__ = "item"
    id: Mapped[int] = mapped_column(primary_key=True)
    name: Mapped[str]
    description: Mapped[str]
engine = create_engine("sqlite+pysqlite:///:memory:", echo=True)
Base.metadata.create_all(engine)
conn = engine.connect()
session = Session(conn)
session.add_all(
    [
        User(
            name="spongebob",
            fullname="Spongebob Squarepants",
            addresses=[Address(email_address="spongebob@sqlalchemy.org")],
        ),
        User(
            name="sandy",
            fullname="Sandy Cheeks",
            addresses=[
                Address(email_address="sandy@sqlalchemy.org"),
                Address(email_address="squirrel@squirrelpower.org"),
            ],
        ),
        User(
            name="patrick",
            fullname="Patrick Star",
            addresses=[Address(email_address="pat999@aol.com")],
        ),
        User(
            name="squidward",
            fullname="Squidward Tentacles",
            addresses=[Address(email_address="stentcl@sqlalchemy.org")],
        ),
        User(name="ehkrabs", fullname="Eugene H. Krabs"),
    ]
)
session.commit()
conn.begin()

----------------------------------------

TITLE: Defining ORM Mapped Classes with Declarative
DESCRIPTION: Shows how to define ORM mapped classes using modern declarative style with type annotations.

LANGUAGE: python
CODE:
from typing import List, Optional
from sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column, relationship

class Base(DeclarativeBase):
    pass

class User(Base):
    __tablename__ = "user_account"

    id: Mapped[int] = mapped_column(primary_key=True)
    name: Mapped[str] = mapped_column(String(30))
    fullname: Mapped[Optional[str]]

    addresses: Mapped[List["Address"]] = relationship(back_populates="user")

class Address(Base):
    __tablename__ = "address"

    id: Mapped[int] = mapped_column(primary_key=True)
    email_address: Mapped[str]
    user_id = mapped_column(ForeignKey("user_account.id"))

    user: Mapped[User] = relationship(back_populates="addresses")

----------------------------------------

TITLE: Creating a PostgreSQL Engine with psycopg2
DESCRIPTION: Example of creating a basic SQLAlchemy engine for PostgreSQL using the psycopg2 driver with username and password authentication.

LANGUAGE: python
CODE:
from sqlalchemy import create_engine

engine = create_engine("postgresql+psycopg2://scott:tiger@localhost:5432/mydatabase")

----------------------------------------

TITLE: Creating SQLAlchemy Engine for In-Memory SQLite Database in Python
DESCRIPTION: This snippet demonstrates how to create a SQLAlchemy Engine object for an in-memory SQLite database. It uses the create_engine() function with a SQLite connection URL and enables SQL echoing for debugging purposes.

LANGUAGE: python
CODE:
>>> from sqlalchemy import create_engine
>>> engine = create_engine("sqlite+pysqlite:///:memory:", echo=True)

----------------------------------------

TITLE: Implementing One-to-Many Relationship in SQLAlchemy ORM
DESCRIPTION: Demonstrates how to set up a one-to-many relationship between Parent and Child classes using SQLAlchemy ORM with Declarative mappings.

LANGUAGE: python
CODE:
class Parent(Base):
    __tablename__ = "parent_table"

    id: Mapped[int] = mapped_column(primary_key=True)
    children: Mapped[List["Child"]] = relationship()


class Child(Base):
    __tablename__ = "child_table"

    id: Mapped[int] = mapped_column(primary_key=True)
    parent_id: Mapped[int] = mapped_column(ForeignKey("parent_table.id"))

----------------------------------------

TITLE: Creating and Using a Session with Engine
DESCRIPTION: Demonstrates how to create a Session bound to an Engine and use it within a context manager for automatic closing.

LANGUAGE: python
CODE:
from sqlalchemy import create_engine
from sqlalchemy.orm import Session

engine = create_engine("postgresql+psycopg2://scott:tiger@localhost/")

with Session(engine) as session:
    session.add(some_object)
    session.add(some_other_object)
    session.commit()

----------------------------------------

TITLE: Implementing Bidirectional Many-to-One Relationship in SQLAlchemy ORM
DESCRIPTION: Shows how to create a bidirectional many-to-one relationship with back_populates parameter.

LANGUAGE: python
CODE:
class Parent(Base):
    __tablename__ = "parent_table"

    id: Mapped[int] = mapped_column(primary_key=True)
    child_id: Mapped[int] = mapped_column(ForeignKey("child_table.id"))
    child: Mapped["Child"] = relationship(back_populates="parents")


class Child(Base):
    __tablename__ = "child_table"

    id: Mapped[int] = mapped_column(primary_key=True)
    parents: Mapped[List["Parent"]] = relationship(back_populates="child")

----------------------------------------

TITLE: Basic Declarative Mapping with SQLAlchemy
DESCRIPTION: Example showing basic declarative class mapping using DeclarativeBase and mapped_column with type annotations.

LANGUAGE: python
CODE:
from sqlalchemy import Integer, String, ForeignKey
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column

class Base(DeclarativeBase):
    pass

class User(Base):
    __tablename__ = "user"

    id: Mapped[int] = mapped_column(primary_key=True)
    name: Mapped[str]
    fullname: Mapped[str] = mapped_column(String(30))
    nickname: Mapped[Optional[str]]

----------------------------------------

TITLE: Implementing Bidirectional One-to-Many Relationship in SQLAlchemy ORM
DESCRIPTION: Shows how to create a bidirectional one-to-many relationship with back_populates parameter.

LANGUAGE: python
CODE:
class Parent(Base):
    __tablename__ = "parent_table"

    id: Mapped[int] = mapped_column(primary_key=True)
    children: Mapped[List["Child"]] = relationship(back_populates="parent")


class Child(Base):
    __tablename__ = "child_table"

    id: Mapped[int] = mapped_column(primary_key=True)
    parent_id: Mapped[int] = mapped_column(ForeignKey("parent_table.id"))
    parent: Mapped["Parent"] = relationship(back_populates="children")

----------------------------------------

TITLE: Implementing Full User-Address Model with Declarative Base in SQLAlchemy
DESCRIPTION: Complete example showing how to create related User and Address models using declarative base approach with type hints, relationships, and column configurations.

LANGUAGE: python
CODE:
from datetime import datetime
from typing import List
from typing import Optional

from sqlalchemy import ForeignKey
from sqlalchemy import func
from sqlalchemy import Integer
from sqlalchemy import String
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.orm import relationship


class Base(DeclarativeBase):
    pass


class User(Base):
    __tablename__ = "user"

    id = mapped_column(Integer, primary_key=True)
    name: Mapped[str]
    fullname: Mapped[Optional[str]]
    nickname: Mapped[Optional[str]] = mapped_column(String(64))
    create_date: Mapped[datetime] = mapped_column(insert_default=func.now())

    addresses: Mapped[List["Address"]] = relationship(back_populates="user")


class Address(Base):
    __tablename__ = "address"

    id = mapped_column(Integer, primary_key=True)
    user_id = mapped_column(ForeignKey("user.id"))
    email_address: Mapped[str]

    user: Mapped["User"] = relationship(back_populates="addresses")

----------------------------------------

TITLE: Defining ORM Relationships with SQLAlchemy
DESCRIPTION: Example of defining one-to-many and many-to-one relationships between User and Address classes using SQLAlchemy ORM.

LANGUAGE: python
CODE:
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import relationship

class User(Base):
    __tablename__ = "user_account"

    # ... mapped_column() mappings

    addresses: Mapped[List["Address"]] = relationship(back_populates="user")

class Address(Base):
    __tablename__ = "address"

    # ... mapped_column() mappings

    user: Mapped["User"] = relationship(back_populates="addresses")

----------------------------------------

TITLE: Implementing Many-to-Many Relationship in SQLAlchemy ORM
DESCRIPTION: Shows how to create a many-to-many relationship using an association table.

LANGUAGE: python
CODE:
association_table = Table(
    "association_table",
    Base.metadata,
    Column("left_id", ForeignKey("left_table.id")),
    Column("right_id", ForeignKey("right_table.id")),
)


class Parent(Base):
    __tablename__ = "left_table"

    id: Mapped[int] = mapped_column(primary_key=True)
    children: Mapped[List[Child]] = relationship(secondary=association_table)


class Child(Base):
    __tablename__ = "right_table"

    id: Mapped[int] = mapped_column(primary_key=True)

----------------------------------------

TITLE: Basic SELECT Statement with SQLAlchemy Core
DESCRIPTION: Demonstrates how to create a simple SELECT statement using SQLAlchemy Core, selecting all columns from the user_table.

LANGUAGE: python
CODE:
>>> from sqlalchemy import select
>>> stmt = select(user_table).where(user_table.c.name == "spongebob")
>>> print(stmt)

LANGUAGE: sql
CODE:
SELECT user_account.id, user_account.name, user_account.fullname
FROM user_account
WHERE user_account.name = :name_1

----------------------------------------

TITLE: Basic Declarative Table Configuration with mapped_column()
DESCRIPTION: Demonstrates how to set up a basic table using Declarative with mapped_column() construct

LANGUAGE: python
CODE:
from sqlalchemy import Integer, String
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import mapped_column


class Base(DeclarativeBase):
    pass


class User(Base):
    __tablename__ = "user"

    id = mapped_column(Integer, primary_key=True)
    name = mapped_column(String(50), nullable=False)
    fullname = mapped_column(String)
    nickname = mapped_column(String(30))

----------------------------------------

TITLE: Defining RST Documentation Structure for SQLAlchemy Engine Topics
DESCRIPTION: ReStructuredText markup defining the documentation structure for SQLAlchemy engine and connection topics. Uses toctree directive to organize sub-sections.

LANGUAGE: rst
CODE:
.. toctree::
	:maxdepth: 3

	engines
	connections
	pooling
	events

----------------------------------------

TITLE: INSERT with RETURNING Clause
DESCRIPTION: Demonstrates how to use the RETURNING clause with INSERT statements to retrieve inserted values.

LANGUAGE: python
CODE:
insert_stmt = insert(address_table).returning(
    address_table.c.id, address_table.c.email_address
)

----------------------------------------

TITLE: Creating Tables with Foreign Keys
DESCRIPTION: Shows how to define tables with foreign key relationships between them using SQLAlchemy's schema constructs.

LANGUAGE: python
CODE:
employees = Table(
    "employees",
    metadata_obj,
    Column("employee_id", Integer, primary_key=True),
    Column("employee_name", String(60), nullable=False),
    Column("employee_dept", Integer, ForeignKey("departments.department_id")),
)

----------------------------------------

TITLE: Basic SQLAlchemy MetaData Usage
DESCRIPTION: Demonstrates creating a basic SQLAlchemy MetaData container and defining a table with columns and constraints.

LANGUAGE: python
CODE:
from sqlalchemy import MetaData

metadata_obj = MetaData()

from sqlalchemy import Table, Column, Integer, String

user = Table(
    "user",
    metadata_obj,
    Column("user_id", Integer, primary_key=True),
    Column("user_name", String(16), nullable=False),
    Column("email_address", String(60)),
    Column("nickname", String(50), nullable=False),
)

----------------------------------------

TITLE: Basic Engine Usage with Connection
DESCRIPTION: Example showing how to create an engine and execute a SQL statement using a connection

LANGUAGE: python
CODE:
from sqlalchemy import text

engine = create_engine("mysql+mysqldb://scott:tiger@localhost/test")

with engine.connect() as connection:
    result = connection.execute(text("select username from users"))
    for row in result:
        print("username:", row.username)

----------------------------------------

TITLE: Performing ORM Bulk Update
DESCRIPTION: Shows how to perform bulk updates on multiple records using the ORM update() construct with WHERE criteria.

LANGUAGE: python
CODE:
stmt = update(User)\
    .where(User.name.in_(["squidward", "sandy"]))\
    .values(fullname="Name starts with S")
session.execute(stmt)

----------------------------------------

TITLE: Querying with Session
DESCRIPTION: Demonstrates different querying techniques using a Session, including scalars() and execute() methods.

LANGUAGE: python
CODE:
from sqlalchemy import select

with Session(engine) as session:
    statement = select(User).filter_by(name="ed")
    user_obj = session.scalars(statement).all()

    statement = select(User.name, User.fullname)
    rows = session.execute(statement).all()

----------------------------------------

TITLE: Updating Objects with SQLAlchemy ORM
DESCRIPTION: Demonstrates how to update an object's attributes, which will be automatically tracked by the Session for later flushing to the database.

LANGUAGE: python
CODE:
sandy = session.execute(select(User).filter_by(name="sandy")).scalar_one()
sandy.fullname = "Sandy Squirrel"

----------------------------------------

TITLE: Single Table Inheritance Setup
DESCRIPTION: Shows how to map multiple classes to a single table using discriminator columns to differentiate between types.

LANGUAGE: python
CODE:
class Employee(Base):
    __tablename__ = "employee"
    id: Mapped[int] = mapped_column(primary_key=True)
    name: Mapped[str]
    type: Mapped[str]

    __mapper_args__ = {
        "polymorphic_on": "type",
        "polymorphic_identity": "employee",
    }

class Manager(Employee):
    manager_data: Mapped[str] = mapped_column(nullable=True)

    __mapper_args__ = {
        "polymorphic_identity": "manager",
    }

----------------------------------------

TITLE: Performing ORM Bulk Delete
DESCRIPTION: Demonstrates bulk deletion of records using the ORM delete() construct with WHERE criteria.

LANGUAGE: python
CODE:
stmt = delete(User).where(User.name.in_(["squidward", "sandy"]))
session.execute(stmt)

----------------------------------------

TITLE: Basic SQLAlchemy Session Transaction Example
DESCRIPTION: Demonstrates basic transaction management using SQLAlchemy Session with context managers.

LANGUAGE: python
CODE:
from sqlalchemy.orm import Session

session = Session(engine)

with session.begin():
    session.add(some_object())
    session.add(some_other_object())

----------------------------------------

TITLE: Persisting Related Objects with SQLAlchemy ORM
DESCRIPTION: Demonstrates how to create and persist related User and Address objects using SQLAlchemy ORM session.

LANGUAGE: python
CODE:
u1 = User(name="pkrabs", fullname="Pearl Krabs")
a1 = Address(email_address="pearl.krabs@gmail.com")
u1.addresses.append(a1)

session.add(u1)
session.commit()

----------------------------------------

TITLE: Concrete Table Inheritance Configuration
DESCRIPTION: Illustrates concrete table inheritance where each subclass has its own independent table with all necessary columns.

LANGUAGE: python
CODE:
from sqlalchemy.ext.declarative import ConcreteBase

class Employee(ConcreteBase, Base):
    __tablename__ = "employee"
    id = mapped_column(Integer, primary_key=True)
    name = mapped_column(String(50))

    __mapper_args__ = {
        "polymorphic_identity": "employee",
        "concrete": True
    }

class Manager(Employee):
    __tablename__ = "manager"
    id = mapped_column(Integer, primary_key=True)
    name = mapped_column(String(50))
    manager_data = mapped_column(String(40))

    __mapper_args__ = {
        "polymorphic_identity": "manager",
        "concrete": True
    }

----------------------------------------

TITLE: Using Session with Transaction Block
DESCRIPTION: Shows how to use a Session with an explicit transaction block using the begin() method.

LANGUAGE: python
CODE:
with Session(engine) as session:
    with session.begin():
        session.add(some_object)
        session.add(some_other_object)

----------------------------------------

TITLE: Basic SQLAlchemy Relationship with Backref
DESCRIPTION: Demonstrates basic usage of backref to create a bidirectional relationship between User and Address models. Creates automatic back-reference properties.

LANGUAGE: python
CODE:
from sqlalchemy import Column, ForeignKey, Integer, String
from sqlalchemy.orm import DeclarativeBase, relationship


class Base(DeclarativeBase):
    pass


class User(Base):
    __tablename__ = "user"
    id = mapped_column(Integer, primary_key=True)
    name = mapped_column(String)

    addresses = relationship("Address", backref="user")


class Address(Base):
    __tablename__ = "address"
    id = mapped_column(Integer, primary_key=True)
    email = mapped_column(String)
    user_id = mapped_column(Integer, ForeignKey("user.id"))

----------------------------------------

TITLE: Using Loader Options with Select Statements
DESCRIPTION: Examples of using various loader options with SQLAlchemy Select statements to control relationship loading behavior.

LANGUAGE: python
CODE:
from sqlalchemy import select
from sqlalchemy.orm import lazyload

# set children to load lazily
stmt = select(Parent).options(lazyload(Parent.children))

from sqlalchemy.orm import joinedload

# set children to load eagerly with a join
stmt = select(Parent).options(joinedload(Parent.children))

# Chained loader options
stmt = select(Parent).options(
    joinedload(Parent.children).subqueryload(Child.subelements)
)

----------------------------------------

TITLE: Expiring Objects in SQLAlchemy ORM
DESCRIPTION: Demonstrates how to expire specific attributes or all attributes of an object using the expire() method.

LANGUAGE: python
CODE:
# expire all ORM-mapped attributes on obj1
session.expire(obj1)

# expire only attributes obj1.attr1, obj1.attr2
session.expire(obj1, ["attr1", "attr2"])

----------------------------------------

TITLE: Configuring Cascade Behavior on Relationships in SQLAlchemy ORM
DESCRIPTION: Example of setting up cascade behavior on relationships using the cascade parameter

LANGUAGE: python
CODE:
class Order(Base):
    __tablename__ = "order"

    items = relationship("Item", cascade="all, delete-orphan")
    customer = relationship("User", cascade="save-update")

----------------------------------------

TITLE: Defining Table Schema with String Types in SQLAlchemy
DESCRIPTION: Demonstrates defining a database table using SQLAlchemy's String type. Shows both parameterless and parameterized usage of the String type for columns.

LANGUAGE: python
CODE:
from sqlalchemy import MetaData
from sqlalchemy import Table, Column, Integer, String

metadata_obj = MetaData()

user = Table(
    "user",
    metadata_obj,
    Column("user_name", String, primary_key=True),
    Column("email_address", String(60)),
)

----------------------------------------

TITLE: Demonstrating Delete Cascade in SQLAlchemy ORM
DESCRIPTION: Example showing how delete cascade works when deleting a parent object

LANGUAGE: python
CODE:
>>> sess.delete(user1)
>>> sess.commit()

LANGUAGE: sql
CODE:
DELETE FROM address WHERE address.id = ?
((1,), (2,))
DELETE FROM user WHERE user.id = ?
(1,)
COMMIT

----------------------------------------

TITLE: Transaction Management Using Connection Begin
DESCRIPTION: Example showing transaction management using Connection.begin() in SQLAlchemy

LANGUAGE: python
CODE:
with engine.connect() as connection:
    with connection.begin():
        connection.execute(some_table.insert(), {"x": 7, "y": "this is some data"})
        connection.execute(
            some_other_table.insert(), {"q": 8, "p": "this is some more data"}
        )

----------------------------------------

TITLE: Configuring Delete-Orphan Cascade in SQLAlchemy ORM
DESCRIPTION: Example of setting up delete-orphan cascade behavior

LANGUAGE: python
CODE:
class User(Base):
    __tablename__ = "user"

    # ...

    addresses = relationship("Address", cascade="all, delete-orphan")


# ...

del user.addresses[1]
session.flush()

----------------------------------------

TITLE: Defining Basic Point Composite with Dataclass
DESCRIPTION: Creates a basic Point composite type using Python dataclass to represent x,y coordinates.

LANGUAGE: python
CODE:
@dataclasses.dataclass
class Point:
    x: int
    y: int

----------------------------------------

TITLE: Initializing Basic Declarative Base Class in SQLAlchemy
DESCRIPTION: Shows how to create a basic declarative base class by subclassing DeclarativeBase. This is the foundation for creating mapped classes in SQLAlchemy ORM.

LANGUAGE: python
CODE:
from sqlalchemy.orm import DeclarativeBase

# declarative base class
class Base(DeclarativeBase):
    pass

----------------------------------------

TITLE: Reflecting a Single Table in SQLAlchemy
DESCRIPTION: Demonstrates how to reflect a single database table using the Table constructor with autoload_with. The example shows reflecting the 'messages' table and accessing its column names.

LANGUAGE: python
CODE:
>>> messages = Table("messages", metadata_obj, autoload_with=engine)
>>> [c.name for c in messages.columns]
['message_id', 'message_name', 'date']

----------------------------------------

TITLE: Table Creation and Schema Management
DESCRIPTION: Demonstrates creating and dropping database tables using SQLAlchemy's MetaData and Table objects.

LANGUAGE: python
CODE:
engine = create_engine("sqlite:///:memory:")

metadata_obj.create_all(engine)

# Drop specific table
employees.drop(engine)

# Create specific table with existence check
employees.create(engine, checkfirst=True)

----------------------------------------

TITLE: Implementing Email Validation with SQLAlchemy ORM Validator
DESCRIPTION: Demonstrates how to use the @validates decorator to add a simple email validation routine to an attribute. The validator raises an exception if the email address doesn't contain an '@' symbol.

LANGUAGE: python
CODE:
from sqlalchemy.orm import validates

class EmailAddress(Base):
    __tablename__ = "address"

    id = mapped_column(Integer, primary_key=True)
    email = mapped_column(String)

    @validates("email")
    def validate_email(self, key, address):
        if "@" not in address:
            raise ValueError("failed simple email validation")
        return address

----------------------------------------

TITLE: Creating URLs Programmatically
DESCRIPTION: Shows how to create database URLs programmatically using the URL.create() method instead of string formatting.

LANGUAGE: python
CODE:
from sqlalchemy import URL

url_object = URL.create(
    "postgresql+pg8000",
    username="dbuser",
    password="kx@jj5/g",  # plain (unescaped) text
    host="pghost10",
    database="appdb",
)

engine = create_engine(url_object)

----------------------------------------

TITLE: Implementing Many-to-One Relationship in SQLAlchemy ORM
DESCRIPTION: Demonstrates how to set up a many-to-one relationship between Parent and Child classes.

LANGUAGE: python
CODE:
class Parent(Base):
    __tablename__ = "parent_table"

    id: Mapped[int] = mapped_column(primary_key=True)
    child_id: Mapped[int] = mapped_column(ForeignKey("child_table.id"))
    child: Mapped["Child"] = relationship()


class Child(Base):
    __tablename__ = "child_table"

    id: Mapped[int] = mapped_column(primary_key=True)

----------------------------------------

TITLE: Basic INSERT Statement Construction in Python
DESCRIPTION: Demonstrates how to create a basic INSERT statement using SQLAlchemy's insert() function with explicit values.

LANGUAGE: python
CODE:
from sqlalchemy import insert
stmt = insert(user_table).values(name="spongebob", fullname="Spongebob Squarepants")

----------------------------------------

TITLE: Basic Event Registration with listen() Function in Python
DESCRIPTION: Demonstrates how to register an event listener for Pool connect events using the listen() function. The listener prints information about new DBAPI connections.

LANGUAGE: python
CODE:
from sqlalchemy.event import listen
from sqlalchemy.pool import Pool

def my_on_connect(dbapi_con, connection_record):
    print("New DBAPI connection:", dbapi_con)

listen(Pool, "connect", my_on_connect)

----------------------------------------

TITLE: Configuring Connection Pool with create_engine
DESCRIPTION: Example of configuring a QueuePool with custom size and overflow settings when creating an engine.

LANGUAGE: python
CODE:
engine = create_engine(
    "postgresql+psycopg2://me@localhost/mydb", pool_size=20, max_overflow=0
)

----------------------------------------

TITLE: Basic ORM Entity Selection
DESCRIPTION: Demonstrates basic selection of ORM entities using select() with filters

LANGUAGE: python
CODE:
from sqlalchemy import select
stmt = select(User).where(User.name == "spongebob")
result = session.execute(stmt)

----------------------------------------

TITLE: Executing Bulk INSERT with Parameters
DESCRIPTION: Shows how to execute multiple INSERT statements at once using a list of dictionaries as parameters.

LANGUAGE: python
CODE:
with engine.connect() as conn:
    result = conn.execute(
        insert(user_table),
        [
            {"name": "sandy", "fullname": "Sandy Cheeks"},
            {"name": "patrick", "fullname": "Patrick Star"},
        ],
    )
    conn.commit()

----------------------------------------

TITLE: Implementing One-to-One Relationship in SQLAlchemy ORM
DESCRIPTION: Demonstrates how to set up a one-to-one relationship between Parent and Child classes.

LANGUAGE: python
CODE:
class Parent(Base):
    __tablename__ = "parent_table"

    id: Mapped[int] = mapped_column(primary_key=True)
    child: Mapped["Child"] = relationship(back_populates="parent")


class Child(Base):
    __tablename__ = "child_table"

    id: Mapped[int] = mapped_column(primary_key=True)
    parent_id: Mapped[int] = mapped_column(ForeignKey("parent_table.id"))
    parent: Mapped["Parent"] = relationship(back_populates="child")

----------------------------------------

TITLE: Implementing caching with do_orm_execute event
DESCRIPTION: Example of using the do_orm_execute event to implement a simple caching mechanism for query results.

LANGUAGE: python
CODE:
from sqlalchemy.orm import loading

cache = {}

@event.listens_for(Session, "do_orm_execute")
def _do_orm_execute(orm_execute_state):
    if "my_cache_key" in orm_execute_state.execution_options:
        cache_key = orm_execute_state.execution_options["my_cache_key"]

        if cache_key in cache:
            frozen_result = cache[cache_key]
        else:
            frozen_result = orm_execute_state.invoke_statement().freeze()
            cache[cache_key] = frozen_result

        return loading.merge_frozen_result(
            orm_execute_state.session,
            orm_execute_state.statement,
            frozen_result,
            load=False,
        )

----------------------------------------

TITLE: Implementing Association Object Pattern
DESCRIPTION: Example demonstrating how to use association proxy with an explicit association object class to manage additional attributes while keeping the association object transparent.

LANGUAGE: python
CODE:
class User(Base):
    __tablename__ = "user"
    id: Mapped[int] = mapped_column(primary_key=True)
    name: Mapped[str] = mapped_column(String(64))

    user_keyword_associations: Mapped[List[UserKeywordAssociation]] = relationship(
        back_populates="user",
        cascade="all, delete-orphan",
    )

    keywords: AssociationProxy[List[Keyword]] = association_proxy(
        "user_keyword_associations",
        "keyword", 
        creator=lambda keyword_obj: UserKeywordAssociation(keyword=keyword_obj)
    )

----------------------------------------

TITLE: Basic UPDATE Statement in SQLAlchemy Core
DESCRIPTION: Demonstrates how to construct a basic UPDATE statement using SQLAlchemy Core to modify existing rows in a database table.

LANGUAGE: python
CODE:
from sqlalchemy import update
stmt = (
    update(user_table)
    .where(user_table.c.name == "patrick")
    .values(fullname="Patrick the Star")
)

----------------------------------------

TITLE: Implementing a Hybrid Property in SQLAlchemy ORM
DESCRIPTION: Shows how to use the hybrid_property decorator to create an attribute with both instance-level and class-level behavior. The hybrid property manipulates email addresses by adding/removing a domain.

LANGUAGE: python
CODE:
from sqlalchemy.ext.hybrid import hybrid_property

class EmailAddress(Base):
    __tablename__ = "email_address"

    id = mapped_column(Integer, primary_key=True)

    _email = mapped_column("email", String)

    @hybrid_property
    def email(self):
        """Return the value of _email up until the last twelve
        characters."""

        return self._email[:-12]

    @email.setter
    def email(self, email):
        """Set the value of _email, tacking on the twelve character
        value @example.com."""

        self._email = email + "@example.com"

    @email.expression
    def email(cls):
        """Produce a SQL expression that represents the value
        of the _email column, minus the last twelve characters."""

        return func.substr(cls._email, 0, func.length(cls._email) - 12)

----------------------------------------

TITLE: Joining Relationships
DESCRIPTION: Shows how to join between related entities using relationship attributes

LANGUAGE: python
CODE:
stmt = select(User).join(User.addresses)
print(stmt)

----------------------------------------

TITLE: Implementing Correlated Subqueries with column_property in SQLAlchemy
DESCRIPTION: Demonstrates how to create a column property that uses a correlated subquery to count related addresses for a user.

LANGUAGE: python
CODE:
from sqlalchemy.orm import column_property
from sqlalchemy import select, func
from sqlalchemy import Column, Integer, String, ForeignKey
from sqlalchemy.orm import DeclarativeBase

class Base(DeclarativeBase):
    pass

class Address(Base):
    __tablename__ = "address"
    id = mapped_column(Integer, primary_key=True)
    user_id = mapped_column(Integer, ForeignKey("user.id"))

class User(Base):
    __tablename__ = "user"
    id = mapped_column(Integer, primary_key=True)
    address_count = column_property(
        select(func.count(Address.id))
        .where(Address.user_id == id)
        .correlate_except(Address)
        .scalar_subquery()
    )

----------------------------------------

TITLE: SELECT with ORM Entities
DESCRIPTION: Demonstrates how to use SELECT with ORM entities and execute it using a Session.

LANGUAGE: python
CODE:
>>> stmt = select(User).where(User.name == "spongebob")
>>> with Session(engine) as session:
...     for row in session.execute(stmt):
...         print(row)

LANGUAGE: sql
CODE:
BEGIN (implicit)
SELECT user_account.id, user_account.name, user_account.fullname
FROM user_account
WHERE user_account.name = ?
[...] ('spongebob',)

LANGUAGE: python
CODE:
(User(id=1, name='spongebob', fullname='Spongebob Squarepants'),)

LANGUAGE: sql
CODE:
ROLLBACK

----------------------------------------

TITLE: Relationship EXISTS Queries
DESCRIPTION: Using relationship any() and has() methods to create EXISTS subqueries

LANGUAGE: python
CODE:
stmt = select(User.fullname).where(User.addresses.any(Address.email_address == "squirrel@squirrelpower.org"))

----------------------------------------

TITLE: Using SQL Count Function with SQLAlchemy
DESCRIPTION: Example showing how to use SQLAlchemy's func namespace to invoke the SQL COUNT function in a SELECT statement.

LANGUAGE: python
CODE:
select(func.count("*")).select_from(some_table)

----------------------------------------

TITLE: Mapping a Class to Complex Subqueries in SQLAlchemy
DESCRIPTION: Shows how to map a class to a complex SELECT statement that includes a join to a subquery. The example creates a Customer class mapped to a query that includes aggregated order information.

LANGUAGE: python
CODE:
from sqlalchemy import select, func

subq = (
    select(
        func.count(orders.c.id).label("order_count"),
        func.max(orders.c.price).label("highest_order"),
        orders.c.customer_id,
    )
    .group_by(orders.c.customer_id)
    .subquery()
)

customer_select = (
    select(customers, subq)
    .join_from(customers, subq, customers.c.id == subq.c.customer_id)
    .subquery()
)


class Customer(Base):
    __table__ = customer_select

----------------------------------------

TITLE: Adding global WHERE criteria with do_orm_execute event
DESCRIPTION: Example of using the do_orm_execute event to add a global WHERE condition to all SELECT statements for a specific entity.

LANGUAGE: python
CODE:
from sqlalchemy.orm import with_loader_criteria

Session = sessionmaker(engine)

@event.listens_for(Session, "do_orm_execute")
def _do_orm_execute(orm_execute_state):
    if (
        orm_execute_state.is_select
        and not orm_execute_state.is_column_load
        and not orm_execute_state.is_relationship_load
    ):
        orm_execute_state.statement = orm_execute_state.statement.options(
            with_loader_criteria(MyEntity.public == True)
        )

----------------------------------------

TITLE: Implementing Hybrid Property for String Concatenation in SQLAlchemy
DESCRIPTION: Shows how to create a hybrid property that combines firstname and lastname columns into a fullname attribute, working both at Python and SQL levels.

LANGUAGE: python
CODE:
from sqlalchemy.ext.hybrid import hybrid_property

class User(Base):
    __tablename__ = "user"
    id = mapped_column(Integer, primary_key=True)
    firstname = mapped_column(String(50))
    lastname = mapped_column(String(50))

    @hybrid_property
    def fullname(self):
        return self.firstname + " " + self.lastname

----------------------------------------

TITLE: Using SQLAlchemy's Insert Constructor
DESCRIPTION: Shows how to use the Insert constructor in SQLAlchemy. It includes methods for specifying dialect options, values, and returning clauses.

LANGUAGE: python
CODE:
insert_stmt = insert().with_dialect_options(**options).values(**values).returning(*expressions)

----------------------------------------

TITLE: Reflecting Views in SQLAlchemy
DESCRIPTION: Demonstrates reflecting a database view, including how to specify primary key and foreign key constraints that may not be automatically detected.

LANGUAGE: python
CODE:
my_view = Table(
    "some_view",
    metadata,
    Column("view_id", Integer, primary_key=True),
    Column("related_thing", Integer, ForeignKey("othertable.thing_id")),
    autoload_with=engine,
)

----------------------------------------

TITLE: Configuring Server-Side Version Counter with PostgreSQL xmin in SQLAlchemy ORM
DESCRIPTION: This snippet demonstrates how to use PostgreSQL's xmin system column as a server-side version counter in SQLAlchemy ORM. It configures the User model to use xmin for versioning without needing a custom generator.

LANGUAGE: python
CODE:
from sqlalchemy import FetchedValue

class User(Base):
    __tablename__ = "user"

    id = mapped_column(Integer, primary_key=True)
    name = mapped_column(String(50), nullable=False)
    xmin = mapped_column("xmin", String, system=True, server_default=FetchedValue())

    __mapper_args__ = {"version_id_col": xmin, "version_id_generator": False}

----------------------------------------

TITLE: SQLAlchemy SAVEPOINT Transaction Example
DESCRIPTION: Shows how to use SAVEPOINT transactions for partial rollbacks while maintaining the main transaction.

LANGUAGE: python
CODE:
with session.begin() as session:
    session.add(u1)
    session.add(u2)

    nested = session.begin_nested()  # establish a savepoint
    session.add(u3)
    nested.rollback()  # rolls back u3, keeps u1 and u2

----------------------------------------

TITLE: Many-to-One Self-Referential Relationship in SQLAlchemy
DESCRIPTION: Demonstrates configuring a many-to-one relationship using remote_side parameter to establish the parent relationship.

LANGUAGE: python
CODE:
class Node(Base):
    __tablename__ = "node"
    id = mapped_column(Integer, primary_key=True)
    parent_id = mapped_column(Integer, ForeignKey("node.id"))
    data = mapped_column(String(50))
    parent = relationship("Node", remote_side=[id])

----------------------------------------

TITLE: Session Management in Application Structure
DESCRIPTION: Illustrates the correct way to manage Session lifecycle in application functions, keeping it separate from data operations.

LANGUAGE: python
CODE:
class ThingOne:
    def go(self, session):
        session.execute(update(FooBar).values(x=5))

class ThingTwo:
    def go(self, session):
        session.execute(update(Widget).values(q=18))

def run_my_program():
    with Session() as session:
        with session.begin():
            ThingOne().go(session)
            ThingTwo().go(session)

----------------------------------------

TITLE: Configuring Simple Integer Version Counter in SQLAlchemy ORM
DESCRIPTION: This snippet demonstrates how to set up a basic integer version counter for a User model in SQLAlchemy ORM. It uses a 'version_id' column and configures it as the version_id_col in the mapper arguments.

LANGUAGE: python
CODE:
class User(Base):
    __tablename__ = "user"

    id = mapped_column(Integer, primary_key=True)
    version_id = mapped_column(Integer, nullable=False)
    name = mapped_column(String(50), nullable=False)

    __mapper_args__ = {"version_id_col": version_id}

----------------------------------------

TITLE: External Transaction Integration for Testing
DESCRIPTION: Pattern for integrating Session with external transactions in test suites.

LANGUAGE: python
CODE:
class SomeTest(TestCase):
    def setUp(self):
        self.connection = engine.connect()
        self.trans = self.connection.begin()
        self.session = Session(
            bind=self.connection,
            join_transaction_mode="create_savepoint"
        )

    def tearDown(self):
        self.session.close()
        self.trans.rollback()
        self.connection.close()

----------------------------------------

TITLE: One-to-Many SQLAlchemy Relationship Example
DESCRIPTION: Demonstrates mapping of a one-to-many relationship between Department and Employee tables using SQLAlchemy ORM.

LANGUAGE: sql
CODE:
CREATE TABLE department (
    id INTEGER PRIMARY KEY,
    name VARCHAR(30)
)

CREATE TABLE employee (
    id INTEGER PRIMARY KEY,
    name VARCHAR(30),
    dep_id INTEGER REFERENCES department(id)
)

LANGUAGE: python
CODE:
class Department(Base):
    __tablename__ = "department"
    id = Column(Integer, primary_key=True)
    name = Column(String(30))
    employees = relationship("Employee")

class Employee(Base):
    __tablename__ = "employee"
    id = Column(Integer, primary_key=True)
    name = Column(String(30))
    dep_id = Column(Integer, ForeignKey("department.id"))

----------------------------------------

TITLE: Using with_polymorphic() for Querying Subtypes
DESCRIPTION: Shows how to use with_polymorphic() to create a query that includes columns from both Manager and Engineer subtypes.

LANGUAGE: python
CODE:
from sqlalchemy.orm import with_polymorphic
employee_poly = with_polymorphic(Employee, [Engineer, Manager])
stmt = select(employee_poly).order_by(employee_poly.id)
objects = session.scalars(stmt).all()

----------------------------------------

TITLE: Basic Joined Table Inheritance Example
DESCRIPTION: Demonstrates how to implement joined table inheritance where each class has its own table connected via foreign keys.

LANGUAGE: python
CODE:
class Employee(Base):
    __tablename__ = "employee"
    id: Mapped[int] = mapped_column(primary_key=True)
    name: Mapped[str] 
    type: Mapped[str]

    __mapper_args__ = {
        "polymorphic_identity": "employee",
        "polymorphic_on": "type",
    }

class Engineer(Employee):
    __tablename__ = "engineer"
    id: Mapped[int] = mapped_column(ForeignKey("employee.id"), primary_key=True)
    engineer_name: Mapped[str]

    __mapper_args__ = {
        "polymorphic_identity": "engineer",
    }

----------------------------------------

TITLE: Defining Composite Foreign Key
DESCRIPTION: Example demonstrating how to create a composite foreign key constraint across multiple columns using ForeignKeyConstraint

LANGUAGE: python
CODE:
invoice_item = Table(
    "invoice_item",
    metadata_obj, 
    Column("item_id", Integer, primary_key=True),
    Column("item_name", String(60), nullable=False),
    Column("invoice_id", Integer, nullable=False),
    Column("ref_num", Integer, nullable=False),
    ForeignKeyConstraint(
        ["invoice_id", "ref_num"],
        ["invoice.invoice_id", "invoice.ref_num"]
    ),
)

----------------------------------------

TITLE: Implementing Basic Scalar Collection Proxy
DESCRIPTION: Example showing how to use association_proxy to create a simplified view of a many-to-many relationship between User and Keyword classes, allowing direct access to keyword strings.

LANGUAGE: python
CODE:
from __future__ import annotations

from typing import Final
from typing import List

from sqlalchemy import Column
from sqlalchemy import ForeignKey
from sqlalchemy import Integer
from sqlalchemy import String
from sqlalchemy import Table
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.orm import relationship
from sqlalchemy.ext.associationproxy import association_proxy
from sqlalchemy.ext.associationproxy import AssociationProxy


class Base(DeclarativeBase):
    pass


class User(Base):
    __tablename__ = "user"
    id: Mapped[int] = mapped_column(primary_key=True)
    name: Mapped[str] = mapped_column(String(64))
    kw: Mapped[List[Keyword]] = relationship(secondary=lambda: user_keyword_table)

    def __init__(self, name: str):
        self.name = name

    # proxy the 'keyword' attribute from the 'kw' relationship
    keywords: AssociationProxy[List[str]] = association_proxy("kw", "keyword")

----------------------------------------

TITLE: Querying Specific Subclass in Single Inheritance
DESCRIPTION: Shows how to query for a specific subclass (Engineer) in a single inheritance mapping.

LANGUAGE: python
CODE:
stmt = select(Engineer).order_by(Engineer.id)
objects = session.scalars(stmt).all()
for obj in objects:
    print(f"{obj}")

----------------------------------------

TITLE: Creating Custom UUID Type for SQLAlchemy
DESCRIPTION: Implementation of a platform-independent GUID type that uses UUID on PostgreSQL, UNIQUEIDENTIFIER on MSSQL, and CHAR on other backends

LANGUAGE: python
CODE:
from operator import attrgetter
from sqlalchemy.types import TypeDecorator, CHAR
from sqlalchemy.dialects.mssql import UNIQUEIDENTIFIER
from sqlalchemy.dialects.postgresql import UUID
import uuid

class GUID(TypeDecorator):
    impl = CHAR
    cache_ok = True
    _default_type = CHAR(32)
    _uuid_as_str = attrgetter("hex")

    def load_dialect_impl(self, dialect):
        if dialect.name == "postgresql":
            return dialect.type_descriptor(UUID())
        elif dialect.name == "mssql":
            return dialect.type_descriptor(UNIQUEIDENTIFIER())
        else:
            return dialect.type_descriptor(self._default_type)

    def process_bind_param(self, value, dialect):
        if value is None or dialect.name in ("postgresql", "mssql"):
            return value
        else:
            if not isinstance(value, uuid.UUID):
                value = uuid.UUID(value)
            return self._uuid_as_str(value)

    def process_result_value(self, value, dialect):
        if value is None:
            return value
        else:
            if not isinstance(value, uuid.UUID):
                value = uuid.UUID(value)
            return value

----------------------------------------

TITLE: Legacy Non-Dataclass Point Implementation
DESCRIPTION: Shows how to implement a composite type without using dataclasses, requiring manual implementation of comparison and value methods.

LANGUAGE: python
CODE:
class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def __composite_values__(self):
        return self.x, self.y

    def __repr__(self):
        return f"Point(x={self.x!r}, y={self.y!r})"

    def __eq__(self, other):
        return isinstance(other, Point) and other.x == self.x and other.y == self.y

    def __ne__(self, other):
        return not self.__eq__(other)

----------------------------------------

TITLE: Dynamic Mapper Arguments with Declarative in SQLAlchemy
DESCRIPTION: This example shows how to generate mapper arguments dynamically using a declared_attr method.

LANGUAGE: python
CODE:
from sqlalchemy import Column
from sqlalchemy import Integer
from sqlalchemy import select
from sqlalchemy import String
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import declared_attr


class ExcludeColsWFlag:
    @declared_attr
    def __mapper_args__(cls):
        return {
            "exclude_properties": [
                column.key
                for column in cls.__table__.c
                if column.info.get("exclude", False)
            ]
        }


class Base(DeclarativeBase):
    pass


class SomeClass(ExcludeColsWFlag, Base):
    __tablename__ = "some_table"

    id = mapped_column(Integer, primary_key=True)
    data = mapped_column(String)
    not_needed = mapped_column(String, info={"exclude": True})

----------------------------------------

TITLE: Inspecting Object State in SQLAlchemy ORM
DESCRIPTION: Demonstrates how to use the inspect() function to check the current state of a mapped object in SQLAlchemy ORM.

LANGUAGE: python
CODE:
>>> from sqlalchemy import inspect
>>> insp = inspect(my_object)
>>> insp.persistent
True

----------------------------------------

TITLE: Conditionally Creating a Trigger in PostgreSQL
DESCRIPTION: This example shows how to conditionally create a trigger in PostgreSQL using the execute_if method of the DDL construct. It creates a function and a trigger only if the database dialect is PostgreSQL.

LANGUAGE: python
CODE:
mytable = Table(
    "mytable",
    metadata,
    Column("id", Integer, primary_key=True),
    Column("data", String(50)),
)

func = DDL(
    "CREATE FUNCTION my_func() "
    "RETURNS TRIGGER AS $$ "
    "BEGIN "
    "NEW.data := 'ins'; "
    "RETURN NEW; "
    "END; $$ LANGUAGE PLPGSQL"
)

trigger = DDL(
    "CREATE TRIGGER dt_ins BEFORE INSERT ON mytable "
    "FOR EACH ROW EXECUTE PROCEDURE my_func();"
)

event.listen(mytable, "after_create", func.execute_if(dialect="postgresql"))

event.listen(mytable, "after_create", trigger.execute_if(dialect="postgresql"))

----------------------------------------

TITLE: Custom Composite Comparator Implementation
DESCRIPTION: Demonstrates how to implement custom comparison operations for composite types by extending CompositeProperty.Comparator.

LANGUAGE: python
CODE:
class PointComparator(CompositeProperty.Comparator):
    def __gt__(self, other):
        """redefine the 'greater than' operation"""
        return and_(*[
            a > b
            for a, b in zip(
                self.__clause_element__().clauses,
                dataclasses.astuple(other)
            )
        ])

----------------------------------------

TITLE: Creating Declarative Base with Custom Registry in SQLAlchemy
DESCRIPTION: Demonstrates how to create a declarative base class with a custom registry instance. This allows for more control over the mapping process.

LANGUAGE: python
CODE:
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import registry

reg = registry()

# declarative base class
class Base(DeclarativeBase):
    registry = reg

----------------------------------------

TITLE: Refreshing Objects in SQLAlchemy ORM
DESCRIPTION: Shows how to refresh an object's attributes from the database using the refresh() method.

LANGUAGE: python
CODE:
# reload all attributes on obj1
session.refresh(obj1)

# reload obj1.attr1, obj1.attr2
session.refresh(obj1, ["attr1", "attr2"])

----------------------------------------

TITLE: Tracking object lifecycle events
DESCRIPTION: Example of using various Session events to track object lifecycle state transitions.

LANGUAGE: python
CODE:
from sqlalchemy import event
from sqlalchemy.orm import sessionmaker

maker = sessionmaker()

@event.listens_for(maker, "pending_to_persistent")
@event.listens_for(maker, "deleted_to_persistent")
@event.listens_for(maker, "detached_to_persistent")
@event.listens_for(maker, "loaded_as_persistent")
def detect_all_persistent(session, instance):
    print("object is now persistent: %s" % instance)

----------------------------------------

TITLE: Custom Collection Implementation in SQLAlchemy
DESCRIPTION: Example of creating a custom list-like collection class with SQLAlchemy collection instrumentation

LANGUAGE: python
CODE:
class ListLike:
    def __init__(self):
        self.data = []

    def append(self, item):
        self.data.append(item)

    def remove(self, item):
        self.data.remove(item)

    def extend(self, items):
        self.data.extend(items)

    def __iter__(self):
        return iter(self.data)

    def foo(self):
        return "foo"

----------------------------------------

TITLE: Implementing Polymorphic Inheritance with Decorator Mapping in SQLAlchemy
DESCRIPTION: Demonstrates how to implement polymorphic inheritance using the decorator mapping approach, showing Person and Employee class hierarchies.

LANGUAGE: python
CODE:
from sqlalchemy.orm import registry

mapper_registry = registry()


@mapper_registry.mapped
class Person:
    __tablename__ = "person"

    person_id = mapped_column(Integer, primary_key=True)
    type = mapped_column(String, nullable=False)

    __mapper_args__ = {
        "polymorphic_on": type,
        "polymorphic_identity": "person",
    }


@mapper_registry.mapped
class Employee(Person):
    __tablename__ = "employee"

    person_id = mapped_column(ForeignKey("person.person_id"), primary_key=True)

    __mapper_args__ = {
        "polymorphic_identity": "employee",
    }

----------------------------------------

TITLE: SQLAlchemy Logical Operators
DESCRIPTION: Logical operations using AND, OR and NOT with select statements and boolean expressions.

LANGUAGE: python
CODE:
from sqlalchemy import and_, or_, not_
print((column("x") == 5) & (column("y") == 10))  # AND
print((column("x") == 5) | (column("y") == 10))  # OR
print(~(column("x") == 5))  # NOT

----------------------------------------

TITLE: New ORM Query Style using Session.execute()
DESCRIPTION: A 2.0-style ORM query execution example using Session.execute() and select() constructs rather than Query

LANGUAGE: python
CODE:
with Session(engine, future=True) as sess:
    stmt = (
        select(User)
        .where(User.name == "sandy")
        .join(User.addresses)
        .where(Address.email_address.like("%gmail%"))
    )

    result = sess.execute(stmt)

    for user in result.scalars():
        print(user)

----------------------------------------

TITLE: Using PostgreSQL DISTINCT ON in SQLAlchemy
DESCRIPTION: Demonstrates the new syntax extension for creating DISTINCT ON clauses in SQLAlchemy for PostgreSQL. The function _postgresql.distinct_on is introduced to replace the deprecated method of passing columns to Select.distinct.

LANGUAGE: Python
CODE:
from sqlalchemy.dialects import postgresql

# New syntax
query = select(...).distinct(postgresql.distinct_on(...))

# Deprecated syntax
# query = select(...).distinct(column1, column2)

----------------------------------------

TITLE: JSON String Marshalling Type in SQLAlchemy
DESCRIPTION: Implementation of a custom type that marshals Python dictionaries to/from JSON strings for storage in the database

LANGUAGE: python
CODE:
from sqlalchemy.types import TypeDecorator, VARCHAR
import json

class JSONEncodedDict(TypeDecorator):
    impl = VARCHAR
    cache_ok = True

    def process_bind_param(self, value, dialect):
        if value is not None:
            value = json.dumps(value)
        return value

    def process_result_value(self, value, dialect):
        if value is not None:
            value = json.loads(value)
        return value

----------------------------------------

TITLE: Closing SQLAlchemy Session and Connection in Python
DESCRIPTION: Demonstrates the proper sequence for cleaning up SQLAlchemy resources by closing both the session and database connection objects. This is important for releasing database resources and preventing connection leaks.

LANGUAGE: python
CODE:
>>> session.close()
>>> conn.close()

----------------------------------------

TITLE: Server Default Example
DESCRIPTION: Example showing how to specify server-side default values that are rendered in DDL.

LANGUAGE: python
CODE:
t = Table(
    "test",
    metadata_obj,
    Column("abc", String(20), server_default="abc"),
    Column("created_at", DateTime, server_default=func.sysdate()),
    Column("index_value", Integer, server_default=text("0")),
)

----------------------------------------

TITLE: Building a Baked Query with Lambda Functions in Python
DESCRIPTION: Demonstrates how to construct a baked query using lambda functions to define query steps. This allows for caching of query construction and conditional query building.

LANGUAGE: python
CODE:
from sqlalchemy import bindparam

def search_for_user(session, username, email=None):
    baked_query = bakery(lambda session: session.query(User))
    baked_query += lambda q: q.filter(User.name == bindparam("username"))

    baked_query += lambda q: q.order_by(User.id)

    if email:
        baked_query += lambda q: q.filter(User.email == bindparam("email"))

    result = baked_query(session).params(username=username, email=email).all()

    return result

----------------------------------------

TITLE: Basic Tox Test Command
DESCRIPTION: Basic command to run the test suite against a single Python interpreter using Tox

LANGUAGE: bash
CODE:
tox

----------------------------------------

TITLE: Creating Custom DDL Phrases with SQLAlchemy
DESCRIPTION: This snippet demonstrates how to create a custom DDL phrase using the DDL construct in SQLAlchemy. It adds a CHECK constraint to a 'users' table after it's created.

LANGUAGE: python
CODE:
event.listen(
    metadata,
    "after_create",
    DDL(
        "ALTER TABLE users ADD CONSTRAINT "
        "cst_user_name_length "
        " CHECK (length(user_name) >= 8)"
    ),
)

----------------------------------------

TITLE: Computed Column Example
DESCRIPTION: Example showing how to define computed columns using the GENERATED ALWAYS AS syntax.

LANGUAGE: python
CODE:
from sqlalchemy import Table, Column, MetaData, Integer, Computed

metadata_obj = MetaData()

square = Table(
    "square",
    metadata_obj,
    Column("id", Integer, primary_key=True),
    Column("side", Integer),
    Column("area", Integer, Computed("side * side")),
    Column("perimeter", Integer, Computed("4 * side")),
)

----------------------------------------

TITLE: Querying Single Inheritance Mapping
DESCRIPTION: Demonstrates how to query a single inheritance mapping for Employee objects, which includes all subtypes.

LANGUAGE: python
CODE:
stmt = select(Employee).order_by(Employee.id)
for obj in session.scalars(stmt):
    print(f"{obj}")

----------------------------------------

TITLE: Connection-Bound MetaData and Sessions in SQLAlchemy 0.4
DESCRIPTION: Demonstrates how to bind MetaData and Session objects explicitly to a connection in SQLAlchemy 0.4.

LANGUAGE: python
CODE:
conn = engine.connect()
sess = create_session(bind=conn)

----------------------------------------

TITLE: Conditionally Creating a CHECK Constraint in PostgreSQL
DESCRIPTION: This snippet demonstrates how to conditionally create a CHECK constraint in PostgreSQL by first checking if it exists in the database catalogs. It uses callable functions to determine whether to create or drop the constraint.

LANGUAGE: python
CODE:
def should_create(ddl, target, connection, **kw):
    row = connection.execute(
        "select conname from pg_constraint where conname='%s'" % ddl.element.name
    ).scalar()
    return not bool(row)


def should_drop(ddl, target, connection, **kw):
    return not should_create(ddl, target, connection, **kw)


event.listen(
    users,
    "after_create",
    DDL(
        "ALTER TABLE users ADD CONSTRAINT "
        "cst_user_name_length CHECK (length(user_name) >= 8)"
    ).execute_if(callable_=should_create),
)
event.listen(
    users,
    "before_drop",
    DDL("ALTER TABLE users DROP CONSTRAINT cst_user_name_length").execute_if(
        callable_=should_drop
    ),
)

----------------------------------------

TITLE: Implementing Association Object Pattern in SQLAlchemy ORM
DESCRIPTION: Demonstrates how to implement the association object pattern for a more complex many-to-many relationship.

LANGUAGE: python
CODE:
class Association(Base):
    __tablename__ = "association_table"
    left_id: Mapped[int] = mapped_column(ForeignKey("left_table.id"), primary_key=True)
    right_id: Mapped[int] = mapped_column(ForeignKey("right_table.id"), primary_key=True)
    extra_data: Mapped[Optional[str]]
    child: Mapped["Child"] = relationship()


class Parent(Base):
    __tablename__ = "left_table"
    id: Mapped[int] = mapped_column(primary_key=True)
    children: Mapped[List["Association"]] = relationship()


class Child(Base):
    __tablename__ = "right_table"
    id: Mapped[int] = mapped_column(primary_key=True)

----------------------------------------

TITLE: Basic Asyncio Core Usage Example
DESCRIPTION: Demonstrates basic usage of SQLAlchemy's asyncio core functionality with async engine and connection

LANGUAGE: python
CODE:
import asyncio

from sqlalchemy import Column
from sqlalchemy import MetaData
from sqlalchemy import select
from sqlalchemy import String
from sqlalchemy import Table
from sqlalchemy.ext.asyncio import create_async_engine

meta = MetaData()
t1 = Table("t1", meta, Column("name", String(50), primary_key=True))

async def async_main() -> None:
    engine = create_async_engine("sqlite+aiosqlite://", echo=True)

    async with engine.begin() as conn:
        await conn.run_sync(meta.drop_all)
        await conn.run_sync(meta.create_all)

        await conn.execute(
            t1.insert(), [{"name": "some name 1"}, {"name": "some name 2"}]
        )

    async with engine.connect() as conn:
        result = await conn.execute(select(t1).where(t1.c.name == "some name 1"))

        print(result.fetchall())

    await engine.dispose()

asyncio.run(async_main())

----------------------------------------

TITLE: RST Documentation Links and References
DESCRIPTION: ReStructuredText markup defining documentation navigation links, tutorial title, and organizing core and ORM reference sections.

LANGUAGE: rst
CODE:
.. |prev| replace:: :doc:`orm_related_objects`

.. |tutorial_title| replace:: SQLAlchemy 1.4 / 2.0 Tutorial

.. topic:: |tutorial_title|

      This page is part of the :doc:`index`.

      Previous: |prev|

----------------------------------------

TITLE: Conditional DDL Based on PostgreSQL Version
DESCRIPTION: This example shows how to create a conditional DDL that checks both the database dialect and version. It creates an index only for PostgreSQL version 14 and above.

LANGUAGE: python
CODE:
def only_pg_14(ddl_element, target, bind, dialect, **kw):
    return dialect.name == "postgresql" and dialect.server_version_info >= (14,)


my_table = Table(
    "my_table",
    meta,
    Column("id", Integer, primary_key=True),
    Column("num", Integer),
    Column("data", String),
    Index("my_pg_index", "data").ddl_if(callable_=only_pg_14),
)

----------------------------------------

TITLE: Implementing Self-Referential Relationships with post_update in SQLAlchemy
DESCRIPTION: Demonstrates how to configure mutually dependent relationships between Entry and Widget tables using post_update. The code shows proper configuration of foreign keys and relationships to handle circular dependencies.

LANGUAGE: python
CODE:
from sqlalchemy import Integer, ForeignKey
from sqlalchemy.orm import mapped_column
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import relationship


class Base(DeclarativeBase):
    pass


class Entry(Base):
    __tablename__ = "entry"
    entry_id = mapped_column(Integer, primary_key=True)
    widget_id = mapped_column(Integer, ForeignKey("widget.widget_id"))
    name = mapped_column(String(50))


class Widget(Base):
    __tablename__ = "widget"

    widget_id = mapped_column(Integer, primary_key=True)
    favorite_entry_id = mapped_column(
        Integer, ForeignKey("entry.entry_id", name="fk_favorite_entry")
    )
    name = mapped_column(String(50))

    entries = relationship(Entry, primaryjoin=widget_id == Entry.widget_id)
    favorite_entry = relationship(
        Entry, primaryjoin=favorite_entry_id == Entry.entry_id, post_update=True
    )

----------------------------------------

TITLE: Using load_only() to reduce loaded columns
DESCRIPTION: Example showing how to selectively load only specific columns when querying entities using load_only()

LANGUAGE: python
CODE:
>>> from sqlalchemy import select
>>> from sqlalchemy.orm import load_only
>>> stmt = select(Book).options(load_only(Book.title, Book.summary))
>>> books = session.scalars(stmt).all()

----------------------------------------

TITLE: Flushing Changes to Database in SQLAlchemy ORM
DESCRIPTION: Shows how to manually flush pending changes to the database using the Session's flush method.

LANGUAGE: python
CODE:
session.flush()

----------------------------------------

TITLE: Event Listener with Return Value Modifier in Python
DESCRIPTION: Shows how to create an event listener that returns a modified value using the retval=True modifier. Example demonstrates phone number validation/cleaning.

LANGUAGE: python
CODE:
def validate_phone(target, value, oldvalue, initiator):
    """Strip non-numeric characters from a phone number"""
    return re.sub(r"\D", "", value)

# setup listener on UserContact.phone attribute, instructing
# it to use the return value
listen(UserContact.phone, "set", validate_phone, retval=True)

----------------------------------------

TITLE: Implementing Mutable Primary Keys with Update Cascades in SQLAlchemy
DESCRIPTION: Shows how to set up mappings that support mutable primary keys with proper cascade behavior. The example uses ON UPDATE CASCADE functionality for referential integrity.

LANGUAGE: python
CODE:
class User(Base):
    __tablename__ = "user"
    __table_args__ = {"mysql_engine": "InnoDB"}

    username = mapped_column(String(50), primary_key=True)
    fullname = mapped_column(String(100))

    addresses = relationship("Address")


class Address(Base):
    __tablename__ = "address"
    __table_args__ = {"mysql_engine": "InnoDB"}

    email = mapped_column(String(50), primary_key=True)
    username = mapped_column(
        String(50), ForeignKey("user.username", onupdate="cascade")
    )

----------------------------------------

TITLE: Implementing Collection Validation in SQLAlchemy ORM
DESCRIPTION: Shows how to use the @validates decorator to validate items being added to a collection. The validator checks each address being added to ensure it contains an '@' symbol.

LANGUAGE: python
CODE:
from sqlalchemy.orm import validates

class User(Base):
    # ...

    addresses = relationship("Address")

    @validates("addresses")
    def validate_address(self, key, address):
        if "@" not in address.email:
            raise ValueError("failed simplified email validation")
        return address

----------------------------------------

TITLE: Using JSON/JSONB with ARRAY in PostgreSQL
DESCRIPTION: Example of creating a custom CastingArray type to use JSON or JSONB with ARRAY in PostgreSQL.

LANGUAGE: python
CODE:
class CastingArray(ARRAY):
    def bind_expression(self, bindvalue):
        return sa.cast(bindvalue, self)

Table(
    "mydata",
    metadata,
    Column("id", Integer, primary_key=True),
    Column("data", CastingArray(JSONB)),
)

----------------------------------------

TITLE: Handling Multiple Join Paths in SQLAlchemy ORM
DESCRIPTION: This snippet demonstrates how to handle multiple foreign key paths between two tables using the 'foreign_keys' argument in a relationship.

LANGUAGE: python
CODE:
class Customer(Base):
    __tablename__ = "customer"
    id = mapped_column(Integer, primary_key=True)
    name = mapped_column(String)

    billing_address_id = mapped_column(Integer, ForeignKey("address.id"))
    shipping_address_id = mapped_column(Integer, ForeignKey("address.id"))

    billing_address = relationship("Address", foreign_keys=[billing_address_id])
    shipping_address = relationship("Address", foreign_keys=[shipping_address_id])


class Address(Base):
    __tablename__ = "address"
    id = mapped_column(Integer, primary_key=True)
    street = mapped_column(String)
    city = mapped_column(String)
    state = mapped_column(String)
    zip = mapped_column(String)

----------------------------------------

TITLE: Installing SQLAlchemy with AsyncIO Support
DESCRIPTION: This command shows how to install SQLAlchemy with AsyncIO support, which includes the greenlet dependency.

LANGUAGE: text
CODE:
pip install sqlalchemy[asyncio]

----------------------------------------

TITLE: Handling Multiprocessing with Connection Pools
DESCRIPTION: Demonstrates how to properly handle connection pools when using multiprocessing.

LANGUAGE: python
CODE:
from multiprocessing import Pool

engine = create_engine("mysql+mysqldb://user:pass@host/dbname")


def run_in_process(some_data_record):
    with engine.connect() as conn:
        conn.execute(text("..."))


def initializer():
    engine.dispose(close=False)


with Pool(10, initializer=initializer) as p:
    p.map(run_in_process, data)

----------------------------------------

TITLE: Basic Mapped Dataclass using MappedAsDataclass Mixin
DESCRIPTION: Example of creating a basic SQLAlchemy ORM mapping using the MappedAsDataclass mixin with a declarative base class.

LANGUAGE: python
CODE:
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.orm import MappedAsDataclass

class Base(MappedAsDataclass, DeclarativeBase):
    """subclasses will be converted to dataclasses"""

class User(Base):
    __tablename__ = "user_account"

    id: Mapped[int] = mapped_column(init=False, primary_key=True)
    name: Mapped[str]

----------------------------------------

TITLE: Implementing Single Table Inheritance with SQLAlchemy ORM
DESCRIPTION: Demonstrates the setup of single table inheritance using SQLAlchemy ORM with a base Employee class and derived Manager and Engineer classes. Includes database connection setup and sample data insertion. Uses declarative mapping style with type-annotated fields.

LANGUAGE: python
CODE:
>>> from sqlalchemy import create_engine
>>> from sqlalchemy import ForeignKey
>>> from sqlalchemy.orm import DeclarativeBase
>>> from sqlalchemy.orm import Mapped
>>> from sqlalchemy.orm import mapped_column
>>> from sqlalchemy.orm import relationship
>>> from sqlalchemy.orm import Session
>>>
>>>
>>> class Base(DeclarativeBase):
...     pass
>>> class Employee(Base):
...     __tablename__ = "employee"
...     id: Mapped[int] = mapped_column(primary_key=True)
...     name: Mapped[str]
...     type: Mapped[str]
...
...     def __repr__(self):
...         return f"{self.__class__.__name__}({self.name!r})"
...
...     __mapper_args__ = {
...         "polymorphic_identity": "employee",
...         "polymorphic_on": "type",
...     }
>>> class Manager(Employee):
...     manager_name: Mapped[str] = mapped_column(nullable=True)
...     __mapper_args__ = {
...         "polymorphic_identity": "manager",
...     }
>>> class Engineer(Employee):
...     engineer_info: Mapped[str] = mapped_column(nullable=True)
...     __mapper_args__ = {
...         "polymorphic_identity": "engineer",
...     }
>>>
>>> engine = create_engine("sqlite://", echo=True)
>>>
>>> Base.metadata.create_all(engine)
BEGIN ...

>>> conn = engine.connect()
>>> from sqlalchemy.orm import Session
>>> session = Session(conn)
>>> session.add_all(
...     [
...         Manager(
...             name="Mr. Krabs",
...             manager_name="Eugene H. Krabs",
...         ),
...         Engineer(name="SpongeBob", engineer_info="Krabby Patty Master"),
...         Engineer(
...             name="Squidward",
...             engineer_info="Senior Customer Engagement Engineer",
...         ),
...     ],
... )
>>> session.commit()
BEGIN ...

----------------------------------------

TITLE: Specifying Alternate Join Conditions in SQLAlchemy ORM
DESCRIPTION: This example shows how to use the 'primaryjoin' argument to create a relationship with custom join conditions, including filtering criteria.

LANGUAGE: python
CODE:
class User(Base):
    __tablename__ = "user"
    id = mapped_column(Integer, primary_key=True)
    name = mapped_column(String)
    boston_addresses = relationship(
        "Address",
        primaryjoin="and_(User.id==Address.user_id, Address.city=='Boston')",
    )


class Address(Base):
    __tablename__ = "address"
    id = mapped_column(Integer, primary_key=True)
    user_id = mapped_column(Integer, ForeignKey("user.id"))

    street = mapped_column(String)
    city = mapped_column(String)
    state = mapped_column(String)
    zip = mapped_column(String)

----------------------------------------

TITLE: Setting Pool Recycle Time
DESCRIPTION: Demonstrates how to set a maximum age for connections in the pool.

LANGUAGE: python
CODE:
from sqlalchemy import create_engine

e = create_engine("mysql+mysqldb://scott:tiger@localhost/test", pool_recycle=3600)

----------------------------------------

TITLE: SQLAlchemy Basic Comparison Operators
DESCRIPTION: Basic comparison operators like equals, not equals, greater than, less than, etc. Used for comparing column values with other values or expressions.

LANGUAGE: python
CODE:
print(column("x") == 5)
print(column("x") != 5)
print(column("x") > 5)
print(column("x") < 5)
print(column("x") >= 5)
print(column("x") <= 5)
print(column("x").between(5, 10))

----------------------------------------

TITLE: Conditional DDL for Constraints and Indexes
DESCRIPTION: This snippet demonstrates how to use the ddl_if method to conditionally generate DDL for constraints and indexes based on the database dialect. It creates an index and a check constraint only for PostgreSQL.

LANGUAGE: python
CODE:
from sqlalchemy import CheckConstraint, Index
from sqlalchemy import MetaData, Table, Column
from sqlalchemy import Integer, String

meta = MetaData()

my_table = Table(
    "my_table",
    meta,
    Column("id", Integer, primary_key=True),
    Column("num", Integer),
    Column("data", String),
    Index("my_pg_index", "data").ddl_if(dialect="postgresql"),
    CheckConstraint("num > 5").ddl_if(dialect="postgresql"),
)

----------------------------------------

TITLE: Creating Custom Foreign Conditions in SQLAlchemy ORM
DESCRIPTION: This snippet demonstrates how to create a relationship with custom foreign key conditions using 'primaryjoin', 'foreign_keys', and 'remote_side' arguments.

LANGUAGE: python
CODE:
class HostEntry(Base):
    __tablename__ = "host_entry"

    id = mapped_column(Integer, primary_key=True)
    ip_address = mapped_column(INET)
    content = mapped_column(String(50))

    parent_host = relationship(
        "HostEntry",
        primaryjoin=ip_address == cast(content, INET),
        foreign_keys=content,
        remote_side=ip_address,
    )

----------------------------------------

TITLE: Asyncio ORM Usage Example
DESCRIPTION: Shows ORM usage with asyncio including model definition, session management, and queries

LANGUAGE: python
CODE:
from __future__ import annotations

import asyncio
import datetime
from typing import List

from sqlalchemy import ForeignKey
from sqlalchemy import func
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncAttrs
from sqlalchemy.ext.asyncio import async_sessionmaker
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.ext.asyncio import create_async_engine
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.orm import relationship
from sqlalchemy.orm import selectinload

class Base(AsyncAttrs, DeclarativeBase):
    pass

class B(Base):
    __tablename__ = "b"

    id: Mapped[int] = mapped_column(primary_key=True)
    a_id: Mapped[int] = mapped_column(ForeignKey("a.id"))
    data: Mapped[str]

class A(Base):
    __tablename__ = "a"

    id: Mapped[int] = mapped_column(primary_key=True)
    data: Mapped[str]
    create_date: Mapped[datetime.datetime] = mapped_column(server_default=func.now())
    bs: Mapped[List[B]] = relationship()

async def main():
    engine = create_async_engine("sqlite+aiosqlite://", echo=True)
    async_session = async_sessionmaker(engine, expire_on_commit=False)

    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)

    async with async_session() as session:
        async with session.begin():
            session.add_all([
                A(bs=[B(data="b1"), B(data="b2")], data="a1"),
                A(bs=[], data="a2"),
                A(bs=[B(data="b3"), B(data="b4")], data="a3"),
            ])

    await engine.dispose()

asyncio.run(main())

----------------------------------------

TITLE: Using RETURNING with ORM Bulk Insert
DESCRIPTION: Shows how to use the RETURNING clause with bulk insert operations to return newly inserted records as ORM objects.

LANGUAGE: python
CODE:
users = session.scalars(
    insert(User).returning(User),
    [
        {"name": "spongebob", "fullname": "Spongebob Squarepants"},
        {"name": "sandy", "fullname": "Sandy Cheeks"}
    ]
)

----------------------------------------

TITLE: Basic DELETE Statement in SQLAlchemy Core
DESCRIPTION: Shows how to construct a basic DELETE statement to remove rows from a database table.

LANGUAGE: python
CODE:
from sqlalchemy import delete
stmt = delete(user_table).where(user_table.c.name == "patrick")

----------------------------------------

TITLE: Self-Referential Many-to-Many Relationship in SQLAlchemy ORM
DESCRIPTION: This snippet demonstrates how to create a self-referential many-to-many relationship using 'primaryjoin' and 'secondaryjoin' arguments.

LANGUAGE: python
CODE:
node_to_node = Table(
    "node_to_node",
    Base.metadata,
    Column("left_node_id", Integer, ForeignKey("node.id"), primary_key=True),
    Column("right_node_id", Integer, ForeignKey("node.id"), primary_key=True),
)


class Node(Base):
    __tablename__ = "node"
    id: Mapped[int] = mapped_column(primary_key=True)
    label: Mapped[str]
    right_nodes: Mapped[List["Node"]] = relationship(
        "Node",
        secondary=node_to_node,
        primaryjoin=id == node_to_node.c.left_node_id,
        secondaryjoin=id == node_to_node.c.right_node_id,
        back_populates="left_nodes",
    )
    left_nodes: Mapped[List["Node"]] = relationship(
        "Node",
        secondary=node_to_node,
        primaryjoin=id == node_to_node.c.right_node_id,
        secondaryjoin=id == node_to_node.c.left_node_id,
        back_populates="right_nodes",
    )

----------------------------------------

TITLE: Mixing in Columns
DESCRIPTION: This example demonstrates how to include columns in mixin classes that will be automatically added to the tables of classes that use the mixin.

LANGUAGE: python
CODE:
class TimestampMixin:
    created_at: Mapped[datetime] = mapped_column(default=func.now())
    updated_at: Mapped[datetime]


class MyModel(TimestampMixin, Base):
    __tablename__ = "test"

    id: Mapped[int] = mapped_column(primary_key=True)
    name: Mapped[str]

----------------------------------------

TITLE: Mapping Declaratively with Reflected Tables
DESCRIPTION: Demonstrates how to map classes to tables reflected from an existing database

LANGUAGE: python
CODE:
from sqlalchemy import create_engine
from sqlalchemy import Table
from sqlalchemy.orm import DeclarativeBase

engine = create_engine("postgresql+psycopg2://user:pass@hostname/my_existing_database")


class Base(DeclarativeBase):
    pass


class MyClass(Base):
    __table__ = Table(
        "mytable",
        Base.metadata,
        autoload_with=engine,
    )

----------------------------------------

TITLE: Using column_property for SQL Expressions in SQLAlchemy
DESCRIPTION: Shows how to use column_property to map a SQL expression that concatenates firstname and lastname columns.

LANGUAGE: python
CODE:
from sqlalchemy.orm import column_property

class User(Base):
    __tablename__ = "user"
    id = mapped_column(Integer, primary_key=True)
    firstname = mapped_column(String(50))
    lastname = mapped_column(String(50))
    fullname = column_property(firstname + " " + lastname)

----------------------------------------

TITLE: Row-Limited Relationships with Window Functions in SQLAlchemy ORM
DESCRIPTION: This example shows how to create a relationship that limits the number of rows returned using a window function.

LANGUAGE: python
CODE:
partition = select(
    B, func.row_number().over(order_by=B.id, partition_by=B.a_id).label("index")
).alias()

partitioned_b = aliased(B, partition)

A.partitioned_bs = relationship(
    partitioned_b, primaryjoin=and_(partitioned_b.a_id == A.id, partition.c.index < 10)
)

----------------------------------------

TITLE: Using literals with proper string type inference
DESCRIPTION: String literals are now given appropriate String vs Unicode types based on content

LANGUAGE: python
CODE:
from sqlalchemy import literal

# ASCII-only string gets String type
lit1 = literal('hello')

# Non-ASCII string gets Unicode type 
lit2 = literal('hello 世界')

----------------------------------------

TITLE: Dictionary-Based Collection Proxy
DESCRIPTION: Example showing how to use association proxy with dictionary-based collections, using attribute_keyed_dict to map special_key values to keywords.

LANGUAGE: python
CODE:
class User(Base):
    __tablename__ = "user"
    id: Mapped[int] = mapped_column(primary_key=True)
    name: Mapped[str] = mapped_column(String(64))

    user_keyword_associations: Mapped[Dict[str, UserKeywordAssociation]] = relationship(
        back_populates="user",
        collection_class=attribute_keyed_dict("special_key"),
        cascade="all, delete-orphan",
    )
    
    keywords: AssociationProxy[Dict[str, Keyword]] = association_proxy(
        "user_keyword_associations",
        "keyword",
        creator=lambda k, v: UserKeywordAssociation(special_key=k, keyword=v),
    )

----------------------------------------

TITLE: Closing a SQLAlchemy ORM Session
DESCRIPTION: Shows how to properly close a Session, releasing connection resources and expunging all objects.

LANGUAGE: python
CODE:
session.close()

----------------------------------------

TITLE: Defining Write-Only Relationships in SQLAlchemy ORM
DESCRIPTION: Example showing how to define write-only relationships using SQLAlchemy ORM with Account and AccountTransaction models. This demonstrates configuration of a write-only collection that avoids loading large datasets into memory.

LANGUAGE: python
CODE:
from sqlalchemy import ForeignKey
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.orm import relationship
from sqlalchemy.orm import WriteOnlyMapped

class Base(DeclarativeBase):
    pass

class Account(Base):
    __tablename__ = "account"
    id: Mapped[int] = mapped_column(primary_key=True)
    identifier: Mapped[str]

    account_transactions: WriteOnlyMapped["AccountTransaction"] = relationship(
        cascade="all, delete-orphan",
        passive_deletes=True,
        order_by="AccountTransaction.timestamp",
    )

----------------------------------------

TITLE: Handling Table Drop Operations in SQLAlchemy with PostgreSQL
DESCRIPTION: Demonstrates the correct pattern for dropping tables when using PostgreSQL to avoid connection hanging issues. Shows how to properly close connections before dropping tables.

LANGUAGE: python
CODE:
connection = engine.connect()
result = connection.execute(mytable.select())

# fully read result sets
result.fetchall()

# close connections
connection.close()

# now locks are removed
mytable.drop(engine)

----------------------------------------

TITLE: Including Changelog Content in reStructuredText
DESCRIPTION: This snippet demonstrates how to include content from another file in a reStructuredText document. It specifically includes the changelog for SQLAlchemy 2.0, starting from line 5.

LANGUAGE: rst
CODE:
.. include:: changelog_20.rst
    :start-line: 5

----------------------------------------

TITLE: Defining HostEntry class with custom join condition in Python
DESCRIPTION: Example of defining a HostEntry class with a relationship using a custom join condition involving functions and type casting.

LANGUAGE: python
CODE:
class HostEntry(Base):
    __tablename__ = "host_entry"

    id = Column(Integer, primary_key=True)
    ip_address = Column(INET)
    content = Column(String(50))

    # relationship() using explicit foreign_keys, remote_side
    parent_host = relationship(
        "HostEntry",
        primaryjoin=ip_address == cast(content, INET),
        foreign_keys=content,
        remote_side=ip_address,
    )

----------------------------------------

TITLE: Importing InstanceEvents Class in SQLAlchemy ORM
DESCRIPTION: This code imports the InstanceEvents class from SQLAlchemy ORM. InstanceEvents focus on the construction and lifecycle of ORM mapped instances, including instantiation, loading, and refreshing operations.

LANGUAGE: python
CODE:
.. autoclass:: sqlalchemy.orm.InstanceEvents
   :members:

----------------------------------------

TITLE: Basic List Collection Example in SQLAlchemy ORM
DESCRIPTION: Demonstrates how to configure a basic list collection relationship between Parent and Child classes using SQLAlchemy's Declarative mapping style with Mapped annotations.

LANGUAGE: python
CODE:
from sqlalchemy import ForeignKey
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.orm import relationship

class Base(DeclarativeBase):
    pass

class Parent(Base):
    __tablename__ = "parent"

    parent_id: Mapped[int] = mapped_column(primary_key=True)

    # use a list
    children: Mapped[list["Child"]] = relationship()

class Child(Base):
    __tablename__ = "child"

    child_id: Mapped[int] = mapped_column(primary_key=True)
    parent_id: Mapped[int] = mapped_column(ForeignKey("parent.id"))

----------------------------------------

TITLE: Importing PostgreSQL Types in SQLAlchemy 0.6
DESCRIPTION: Shows how to import PostgreSQL-specific types in SQLAlchemy 0.6, which now exports types via the sqlalchemy.dialects package.

LANGUAGE: python
CODE:
from sqlalchemy.dialects.postgresql import (
    INTEGER,
    BIGINT,
    SMALLINT,
    VARCHAR,
    MACADDR,
    DATE,
    BYTEA,
)

----------------------------------------

TITLE: Using the enhanced PostgreSQL ARRAY type in Python
DESCRIPTION: Examples of using the enhanced PostgreSQL ARRAY type, including specifying dimensions and performing various operations on array columns.

LANGUAGE: python
CODE:
# old way, still works since PG supports N-dimensions per row:
Column("my_array", postgresql.ARRAY(Integer))

# new way, will render ARRAY with correct number of [] in DDL,
# will process binds and results more efficiently as we don't need
# to guess how many levels deep to go
Column("my_array", postgresql.ARRAY(Integer, dimensions=2))

result = conn.execute(select([mytable.c.arraycol[2]]))

result = conn.execute(select([mytable.c.arraycol[2:4]]))

conn.execute(mytable.update().values({mytable.c.arraycol[2:3]: [7, 8]}))

>>> from sqlalchemy.dialects import postgresql
>>> conn.scalar(select([postgresql.array([1, 2]) + postgresql.array([3, 4, 5])]))
[1, 2, 3, 4, 5]

select([mytable.c.arraycol + [4, 5, 6]])

----------------------------------------

TITLE: New Session Creation in SQLAlchemy 0.4
DESCRIPTION: Demonstrates the new session creation paradigm in SQLAlchemy 0.4 using sessionmaker and scoped_session.

LANGUAGE: python
CODE:
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

engine = create_engine("myengine://")
Session = sessionmaker(bind=engine, autoflush=True, transactional=True)

# use the new Session() freely
sess = Session()
sess.save(someobject)
sess.flush()

Session.configure(bind=create_engine(...))

from sqlalchemy.orm import scoped_session, sessionmaker

Session = scoped_session(sessionmaker(autoflush=True, transactional=True))
Session.configure(bind=engine)

u = User(name="wendy")

sess = Session()
sess.save(u)
sess.commit()

# Session constructor is thread-locally scoped.  Everyone gets the same
# Session in the thread when scope="thread".
sess2 = Session()
assert sess is sess2

# "assignmapper"-like functionality available via ScopedSession.mapper
Session.mapper(User, users_table)

u = User(name="wendy")

Session.commit()

----------------------------------------

TITLE: Dictionary Collection with Attribute Keying in SQLAlchemy
DESCRIPTION: Shows how to implement a dictionary collection using attribute_keyed_dict to map Note objects keyed by their keyword attribute

LANGUAGE: python
CODE:
from typing import Dict
from typing import Optional
from sqlalchemy import ForeignKey
from sqlalchemy.orm import attribute_keyed_dict
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.orm import relationship

class Item(Base):
    __tablename__ = "item"

    id: Mapped[int] = mapped_column(primary_key=True)

    notes: Mapped[Dict[str, "Note"]] = relationship(
        collection_class=attribute_keyed_dict("keyword"),
        cascade="all, delete-orphan",
    )

class Note(Base):
    __tablename__ = "note"

    id: Mapped[int] = mapped_column(primary_key=True)
    item_id: Mapped[int] = mapped_column(ForeignKey("item.id"))
    keyword: Mapped[str]
    text: Mapped[Optional[str]]

----------------------------------------

TITLE: Executing Multiple Inserts with Bind Parameters in SQLAlchemy 0.6
DESCRIPTION: Shows the stricter behavior of executemany operations in SQLAlchemy 0.6, where all parameter dictionaries must include the same keys.

LANGUAGE: python
CODE:
connection.execute(
    table.insert(),
    {"timestamp": today, "data": "row1"},
    {"timestamp": today, "data": "row2"},
    {"timestamp": today, "data": "row3"},  # Must include 'timestamp' key
)

----------------------------------------

TITLE: Defining Common Elements with Mixin Classes
DESCRIPTION: This example demonstrates how to create mixin classes that define common elements such as columns, table arguments, and mapper arguments that can be applied to multiple mapped classes.

LANGUAGE: python
CODE:
from sqlalchemy import ForeignKey
from sqlalchemy.orm import declared_attr
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.orm import relationship


class Base(DeclarativeBase):
    pass


class CommonMixin:
    """define a series of common elements that may be applied to mapped
    classes using this class as a mixin class."""

    @declared_attr.directive
    def __tablename__(cls) -> str:
        return cls.__name__.lower()

    __table_args__ = {"mysql_engine": "InnoDB"}
    __mapper_args__ = {"eager_defaults": True}

    id: Mapped[int] = mapped_column(primary_key=True)


class HasLogRecord:
    """mark classes that have a many-to-one relationship to the
    ``LogRecord`` class."""

    log_record_id: Mapped[int] = mapped_column(ForeignKey("logrecord.id"))

    @declared_attr
    def log_record(self) -> Mapped["LogRecord"]:
        return relationship("LogRecord")


class LogRecord(CommonMixin, Base):
    log_info: Mapped[str]


class MyModel(CommonMixin, HasLogRecord, Base):
    name: Mapped[str]

----------------------------------------

TITLE: Core Select statement without explicit FROM clause
DESCRIPTION: New select() construct behavior that requires explicit subquery creation

LANGUAGE: python
CODE:
sq1 = select(user.c.id, user.c.name).subquery()
stmt2 = select(addresses, sq1).select_from(addresses.join(sq1))

----------------------------------------

TITLE: Dataclass with Relationships
DESCRIPTION: Demonstrates how to configure relationships in a mapped dataclass including collection handling and defaults.

LANGUAGE: python
CODE:
from typing import List
from sqlalchemy import ForeignKey
from sqlalchemy.orm import Mapped, mapped_column, registry, relationship

reg = registry()

@reg.mapped_as_dataclass
class Parent:
    __tablename__ = "parent"
    id: Mapped[int] = mapped_column(primary_key=True)
    children: Mapped[List["Child"]] = relationship(
        default_factory=list, back_populates="parent"
    )

@reg.mapped_as_dataclass
class Child:
    __tablename__ = "child"
    id: Mapped[int] = mapped_column(primary_key=True)
    parent_id: Mapped[int] = mapped_column(ForeignKey("parent.id"))
    parent: Mapped["Parent"] = relationship(default=None)

----------------------------------------

TITLE: Creating a Custom DDL Element in SQLAlchemy 0.6
DESCRIPTION: Shows how to create a custom DDL element using the new compiler extension in SQLAlchemy 0.6.

LANGUAGE: python
CODE:
from sqlalchemy.schema import DDLElement
from sqlalchemy.ext.compiler import compiles

class AlterColumn(DDLElement):
    def __init__(self, column, cmd):
        self.column = column
        self.cmd = cmd

@compiles(AlterColumn)
def visit_alter_column(element, compiler, **kw):
    return "ALTER TABLE %s ALTER COLUMN %s %s ..." % (
        element.column.table.name,
        element.column.name,
        element.cmd,
    )

engine.execute(AlterColumn(table.c.mycolumn, "SET DEFAULT 'test'"))

----------------------------------------

TITLE: Using SQLAlchemy's Update Constructor
DESCRIPTION: Illustrates the usage of the Update constructor in SQLAlchemy. It includes methods for specifying returning clauses, conditions, dialect options, and values.

LANGUAGE: python
CODE:
update_stmt = update().returning(*expressions).where(condition).with_dialect_options(**options).values(**values)

----------------------------------------

TITLE: Programmatic Version Counter Management in SQLAlchemy ORM
DESCRIPTION: This example illustrates how to manually manage version counters in SQLAlchemy ORM. It sets up a User model with a UUID version counter that can be programmatically set and updated.

LANGUAGE: python
CODE:
import uuid

class User(Base):
    __tablename__ = "user"

    id = mapped_column(Integer, primary_key=True)
    version_uuid = mapped_column(String(32), nullable=False)
    name = mapped_column(String(50), nullable=False)

    __mapper_args__ = {"version_id_col": version_uuid, "version_id_generator": False}

u1 = User(name="u1", version_uuid=uuid.uuid4())

session.add(u1)
session.commit()

u1.name = "u2"
u1.version_uuid = uuid.uuid4()

session.commit()

----------------------------------------

TITLE: Implementing Cascading Declared Attributes in SQLAlchemy ORM
DESCRIPTION: Demonstrates the use of declared_attr.cascading to create distinct column objects for each class in an inheritance hierarchy. This example shows how to create an 'id' column that adapts to being a primary key or a foreign key based on the class's position in the hierarchy.

LANGUAGE: python
CODE:
class HasIdMixin:
    @declared_attr.cascading
    def id(cls) -> Mapped[int]:
        if has_inherited_table(cls):
            return mapped_column(ForeignKey("myclass.id"), primary_key=True)
        else:
            return mapped_column(Integer, primary_key=True)


class MyClass(HasIdMixin, Base):
    __tablename__ = "myclass"
    # ...


class MySubClass(MyClass):
    """ """

    # ...

----------------------------------------

TITLE: Implementing Custom GUID Version Counter in SQLAlchemy ORM
DESCRIPTION: This example shows how to use a custom GUID (UUID) as a version counter in SQLAlchemy ORM. It defines a User model with a 'version_uuid' column and uses a lambda function to generate new UUIDs for versioning.

LANGUAGE: python
CODE:
import uuid

class User(Base):
    __tablename__ = "user"

    id = mapped_column(Integer, primary_key=True)
    version_uuid = mapped_column(String(32), nullable=False)
    name = mapped_column(String(50), nullable=False)

    __mapper_args__ = {
        "version_id_col": version_uuid,
        "version_id_generator": lambda version: uuid.uuid4().hex,
    }

----------------------------------------

TITLE: Defining a Custom Operator in SQLAlchemy
DESCRIPTION: Example of creating a custom operator using the custom_op class in SQLAlchemy.

LANGUAGE: python
CODE:
from sqlalchemy import custom_op

# Creating a custom 'IS DISTINCT FROM' operator
is_distinct_from = custom_op('IS DISTINCT FROM')

----------------------------------------

TITLE: Demonstrating array_agg with a multi-array
DESCRIPTION: The array_agg function now properly handles None values and sets array dimensions correctly

LANGUAGE: python
CODE:
from sqlalchemy import array_agg, ARRAY

array_col = array_agg(some_column, type_=ARRAY(Integer, dimensions=1))
# Now accepts None values within multi-arrays

----------------------------------------

TITLE: Defining and Using Range Types in PostgreSQL
DESCRIPTION: Example of defining a table with a TSRANGE column and inserting data using the Range type in SQLAlchemy with PostgreSQL.

LANGUAGE: python
CODE:
from datetime import datetime

from sqlalchemy.dialects.postgresql import Range
from sqlalchemy.dialects.postgresql import TSRANGE
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column


class Base(DeclarativeBase):
    pass


class RoomBooking(Base):
    __tablename__ = "room_booking"

    id: Mapped[int] = mapped_column(primary_key=True)
    room: Mapped[str]
    during: Mapped[Range[datetime]] = mapped_column(TSRANGE)

from sqlalchemy import create_engine
from sqlalchemy.orm import Session

engine = create_engine("postgresql+psycopg://scott:tiger@pg14/dbname")

Base.metadata.create_all(engine)

with Session(engine) as session:
    booking = RoomBooking(
        room="101", during=Range(datetime(2013, 3, 23), datetime(2013, 3, 25))
    )
    session.add(booking)
    session.commit()

----------------------------------------

TITLE: Reflecting with Database-Agnostic Types in SQLAlchemy
DESCRIPTION: Shows how to use the column_reflect event to convert vendor-specific datatypes to generic SQLAlchemy types during reflection, allowing for database portability.

LANGUAGE: python
CODE:
from sqlalchemy import event
metadata_obj = MetaData()

@event.listens_for(metadata_obj, "column_reflect")
def genericize_datatypes(inspector, tablename, column_dict):
    column_dict["type"] = column_dict["type"].as_generic()

my_generic_table = Table("my_table", metadata_obj, autoload_with=mysql_engine)

----------------------------------------

TITLE: Importing SQLAlchemy ORM Attributes Module
DESCRIPTION: This code snippet sets the current module context to sqlalchemy.orm.attributes for documenting attribute-related functions.

LANGUAGE: python
CODE:
.. currentmodule:: sqlalchemy.orm.attributes

----------------------------------------

TITLE: Advanced Hybrid Property with Conditional Logic in SQLAlchemy
DESCRIPTION: Demonstrates a hybrid property implementation with conditional logic, using different expressions for Python and SQL contexts.

LANGUAGE: python
CODE:
from sqlalchemy.ext.hybrid import hybrid_property
from sqlalchemy.sql import case

class User(Base):
    __tablename__ = "user"
    id = mapped_column(Integer, primary_key=True)
    firstname = mapped_column(String(50))
    lastname = mapped_column(String(50))

    @hybrid_property
    def fullname(self):
        if self.firstname is not None:
            return self.firstname + " " + self.lastname
        else:
            return self.lastname

    @fullname.expression
    def fullname(cls):
        return case(
            (cls.firstname != None, cls.firstname + " " + cls.lastname),
            else_=cls.lastname,
        )

----------------------------------------

TITLE: SQL Expression Default
DESCRIPTION: Example showing SQL functions and expressions used as default values for columns.

LANGUAGE: python
CODE:
t = Table(
    "mytable",
    metadata_obj,
    Column("id", Integer, primary_key=True),
    Column("create_date", DateTime, default=func.now()),
    Column("key", String(20), 
           default=select(keyvalues.c.key).where(keyvalues.c.type="type1")),
    Column("last_modified", DateTime, onupdate=func.utc_timestamp()),
)

----------------------------------------

TITLE: Defining and Using Multirange Types in PostgreSQL
DESCRIPTION: Example of defining a table with a TSMULTIRANGE column and inserting data using a list of Range types in SQLAlchemy with PostgreSQL.

LANGUAGE: python
CODE:
from datetime import datetime
from typing import List

from sqlalchemy.dialects.postgresql import Range
from sqlalchemy.dialects.postgresql import TSMULTIRANGE
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column


class Base(DeclarativeBase):
    pass


class EventCalendar(Base):
    __tablename__ = "event_calendar"

    id: Mapped[int] = mapped_column(primary_key=True)
    event_name: Mapped[str]
    added: Mapped[datetime]
    in_session_periods: Mapped[List[Range[datetime]]] = mapped_column(TSMULTIRANGE)

from sqlalchemy import create_engine
from sqlalchemy import select
from sqlalchemy.orm import Session

engine = create_engine("postgresql+psycopg://scott:tiger@pg14/test")

Base.metadata.create_all(engine)

with Session(engine) as session:
    calendar = EventCalendar(
        event_name="SQLAlchemy Tutorial Sessions",
        in_session_periods=[
            Range(datetime(2013, 3, 23), datetime(2013, 3, 25)),
            Range(datetime(2013, 4, 12), datetime(2013, 4, 15)),
            Range(datetime(2013, 5, 9), datetime(2013, 5, 12)),
        ],
    )
    session.add(calendar)
    session.commit()

    for multirange in session.scalars(select(EventCalendar.in_session_periods)):
        for range_ in multirange:
            print(f"Start: {range_.lower}  End: {range_.upper}")

----------------------------------------

TITLE: Customizing Type Map for Declarative
DESCRIPTION: Demonstrates how to customize the type mapping for Declarative classes

LANGUAGE: python
CODE:
import datetime

from sqlalchemy import BIGINT, NVARCHAR, String, TIMESTAMP
from sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column


class Base(DeclarativeBase):
    type_annotation_map = {
        int: BIGINT,
        datetime.datetime: TIMESTAMP(timezone=True),
        str: String().with_variant(NVARCHAR, "mssql"),
    }


class SomeClass(Base):
    __tablename__ = "some_table"

    id: Mapped[int] = mapped_column(primary_key=True)
    date: Mapped[datetime.datetime]
    status: Mapped[str]

----------------------------------------

TITLE: Defining Folder relationship with self-referential composite foreign key in Python
DESCRIPTION: Example of defining a Folder class with a self-referential relationship using a composite foreign key where a column points to itself.

LANGUAGE: python
CODE:
class Folder(Base):
    __tablename__ = "folder"
    __table_args__ = (
        ForeignKeyConstraint(
            ["account_id", "parent_id"], ["folder.account_id", "folder.folder_id"]
        ),
    )

    account_id = Column(Integer, primary_key=True)
    folder_id = Column(Integer, primary_key=True)
    parent_id = Column(Integer)
    name = Column(String)

    parent_folder = relationship(
        "Folder", backref="child_folders", remote_side=[account_id, folder_id]
    )

----------------------------------------

TITLE: Querying Related Objects with SQLAlchemy ORM
DESCRIPTION: Shows how to use relationships in SQLAlchemy ORM queries, including joining and filtering.

LANGUAGE: python
CODE:
print(select(Address.email_address).select_from(User).join(User.addresses))

----------------------------------------

TITLE: Using MultiRange Sequence for Multirange Literals in PostgreSQL
DESCRIPTION: Example of using the MultiRange sequence to create multirange literals in SQLAlchemy with PostgreSQL.

LANGUAGE: python
CODE:
from sqlalchemy import literal
from sqlalchemy.dialects.postgresql import MultiRange

with Session(engine) as session:
    stmt = select(EventCalendar).where(
        EventCalendar.added.op("<@")(
            MultiRange(
                [
                    Range(datetime(2023, 1, 1), datetime(2013, 3, 31)),
                    Range(datetime(2023, 7, 1), datetime(2013, 9, 30)),
                ]
            )
        )
    )
    in_range = session.execute(stmt).all()

with engine.connect() as conn:
    row = conn.scalar(select(literal(MultiRange([Range(2, 4)]))))
    print(f"{row.lower} -> {row.upper}")

----------------------------------------

TITLE: Declarative with Imperative Table (Hybrid Declarative)
DESCRIPTION: Shows how to use Declarative mapping with a pre-existing Table object

LANGUAGE: python
CODE:
from sqlalchemy import Column, ForeignKey, Integer, String, Table
from sqlalchemy.orm import DeclarativeBase


class Base(DeclarativeBase):
    pass


user_table = Table(
    "user",
    Base.metadata,
    Column("id", Integer, primary_key=True),
    Column("name", String),
    Column("fullname", String),
    Column("nickname", String),
)


class User(Base):
    __table__ = user_table

----------------------------------------

TITLE: Using with_polymorphic() for polymorphic queries in Python
DESCRIPTION: Example of using with_polymorphic() to create a polymorphic alias for use in queries involving inheritance.

LANGUAGE: python
CODE:
from sqlalchemy.orm import with_polymorphic

palias = with_polymorphic(Person, [Engineer, Manager])
session.query(Company).join(palias, Company.employees).filter(
    or_(Engineer.language == "java", Manager.hair == "pointy")
)

----------------------------------------

TITLE: Mapping a Python Class to Multiple Joined Tables in SQLAlchemy
DESCRIPTION: Demonstrates how to map a single class to multiple joined tables using SQLAlchemy ORM. The example joins user and address tables and maps them to a single AddressUser class with composite primary key handling.

LANGUAGE: python
CODE:
from sqlalchemy import Table, Column, Integer, String, MetaData, join, ForeignKey
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import column_property

metadata_obj = MetaData()

# define two Table objects
user_table = Table(
    "user",
    metadata_obj,
    Column("id", Integer, primary_key=True),
    Column("name", String),
)

address_table = Table(
    "address",
    metadata_obj,
    Column("id", Integer, primary_key=True),
    Column("user_id", Integer, ForeignKey("user.id")),
    Column("email_address", String),
)

# define a join between them.  This
# takes place across the user.id and address.user_id
# columns.
user_address_join = join(user_table, address_table)


class Base(DeclarativeBase):
    metadata = metadata_obj


# map to it
class AddressUser(Base):
    __table__ = user_address_join

    id = column_property(user_table.c.id, address_table.c.user_id)
    address_id = address_table.c.id

----------------------------------------

TITLE: Importing Oracle Data Types in SQLAlchemy
DESCRIPTION: Example showing how to import Oracle-specific data types from SQLAlchemy dialect. These types include standard SQL types and Oracle-specific implementations that are valid for use with Oracle Database.

LANGUAGE: python
CODE:
from sqlalchemy.dialects.oracle import (
    BFILE,
    BLOB,
    CHAR,
    CLOB,
    DATE,
    DOUBLE_PRECISION,
    FLOAT,
    INTERVAL,
    LONG,
    NCLOB,
    NCHAR,
    NUMBER,
    NVARCHAR,
    NVARCHAR2,
    RAW,
    TIMESTAMP,
    VARCHAR,
    VARCHAR2,
)

----------------------------------------

TITLE: Querying Column Level Expressions in SQLAlchemy 0.5
DESCRIPTION: Demonstrates the new Query capabilities to create specific SELECT statements with column-level expressions and named tuples

LANGUAGE: python
CODE:
session.query(User.name, func.count(Address.id).label("numaddresses")).join(
    Address
).group_by(User.name)

----------------------------------------

TITLE: Declarative Mixin with Cascading Column Generation
DESCRIPTION: Example showing improvements to declarative mixins and cascading @declared_attr columns

LANGUAGE: python
CODE:
class HasIdMixin(object):
    @declared_attr.cascading
    def id(cls):
        if has_inherited_table(cls):
            return Column(ForeignKey('myclass.id'), primary_key=True)
        else:
            return Column(Integer, primary_key=True)

class MyClass(HasIdMixin, Base):
    __tablename__ = 'myclass'
    # ...

class MySubClass(MyClass):
    """"""
    # ...

----------------------------------------

TITLE: Configuring Cascade Behavior with Backref in SQLAlchemy ORM
DESCRIPTION: Example of setting up cascade behavior using the backref function

LANGUAGE: python
CODE:
class Item(Base):
    __tablename__ = "item"

    order = relationship(
        "Order", backref=backref("items", cascade="all, delete-orphan")
    )

----------------------------------------

TITLE: Reflecting All Tables at Once in SQLAlchemy
DESCRIPTION: Shows how to reflect all tables in a database at once using the MetaData.reflect() method. Also includes an example of using this to delete all rows from all tables.

LANGUAGE: python
CODE:
metadata_obj = MetaData()
metadata_obj.reflect(bind=someengine)
users_table = metadata_obj.tables["users"]
addresses_table = metadata_obj.tables["addresses"]

# Deleting all rows
with someengine.begin() as conn:
    for table in reversed(metadata_obj.sorted_tables):
        conn.execute(table.delete())

----------------------------------------

TITLE: Using Subqueries with SQLAlchemy Query
DESCRIPTION: Shows how to create complex queries using Query's subquery capabilities

LANGUAGE: python
CODE:
subq = (
    session.query(Keyword.id.label("keyword_id"))
    .filter(Keyword.name.in_(["beans", "carrots"]))
    .subquery()
)
recipes = session.query(Recipe).filter(
    exists()
    .where(Recipe.id == recipe_keywords.c.recipe_id)
    .where(recipe_keywords.c.keyword_id == subq.c.keyword_id)
)

----------------------------------------

TITLE: Demonstrating Save-Update Cascade in SQLAlchemy ORM
DESCRIPTION: Example showing how save-update cascade works when adding objects to a session

LANGUAGE: python
CODE:
>>> user1 = User()
>>> address1, address2 = Address(), Address()
>>> user1.addresses = [address1, address2]
>>> sess = Session()
>>> sess.add(user1)
>>> address1 in sess
True

----------------------------------------

TITLE: Defining Single Column Foreign Key
DESCRIPTION: Example showing how to define a foreign key constraint on a single column using the ForeignKey object

LANGUAGE: python
CODE:
user_preference = Table(
    "user_preference",
    metadata_obj,
    Column("pref_id", Integer, primary_key=True),
    Column("user_id", Integer, ForeignKey("user.user_id"), nullable=False),
    Column("pref_name", String(40), nullable=False),
    Column("pref_value", String(100)),
)

----------------------------------------

TITLE: SQLAlchemy Inspection Target Examples
DESCRIPTION: Demonstrates various inspection targets including Connectable objects, ClauseElements, mapped objects, classes, and attributes. Each target returns a specific type of inspection object providing relevant metadata.

LANGUAGE: python
CODE:
# Engine/Connection inspection
inspector = inspect(engine)  # returns Inspector object

# SQL expression inspection
table_inspect = inspect(Table)  # returns the Table object itself

# ORM object inspection
state = inspect(mapped_object)  # returns InstanceState

# Class inspection
mapper = inspect(SomeClass)  # returns Mapper

# Attribute inspection
attr_info = inspect(MyClass.some_attribute)  # returns QueryableAttribute

----------------------------------------

TITLE: Defining PostgreSQL EXCLUDE Constraints
DESCRIPTION: Example of defining an EXCLUDE constraint for a room booking table in SQLAlchemy with PostgreSQL.

LANGUAGE: python
CODE:
from sqlalchemy.dialects.postgresql import ExcludeConstraint, TSRANGE


class RoomBooking(Base):
    __tablename__ = "room_booking"

    room = Column(Integer(), primary_key=True)
    during = Column(TSRANGE())

    __table_args__ = (ExcludeConstraint(("room", "="), ("during", "&&")),)

----------------------------------------

TITLE: Using New Schema Constraints
DESCRIPTION: New UniqueConstraint and CheckConstraint classes were added to the schema package.

LANGUAGE: python
CODE:
from sqlalchemy import Table, Column, UniqueConstraint, CheckConstraint

table = Table('mytable', metadata,
    Column('id', Integer, primary_key=True),
    Column('name', String(50)),
    UniqueConstraint('name'),
    CheckConstraint('len(name) > 5')
)

----------------------------------------

TITLE: Importing MariaDB-Specific Data Types in SQLAlchemy
DESCRIPTION: Shows how to import additional data types specific to MariaDB from the SQLAlchemy MySQL dialect. These types (INET4 and INET6) are supported by MariaDB but not by standard MySQL.

LANGUAGE: Python
CODE:
from sqlalchemy.dialects.mysql import (
    INET4,
    INET6,
)

----------------------------------------

TITLE: Documenting SQLAlchemy ORM Relationship Functions
DESCRIPTION: These autodoc directives generate documentation for the main functions in the SQLAlchemy ORM relationships API, including relationship, backref, dynamic_loader, foreign, and remote.

LANGUAGE: restructuredtext
CODE:
.. autofunction:: relationship

.. autofunction:: backref

.. autofunction:: dynamic_loader

.. autofunction:: foreign

.. autofunction:: remote

----------------------------------------

TITLE: Defining Unique and Check Constraints
DESCRIPTION: Example showing how to define unique and check constraints at both column and table level

LANGUAGE: python
CODE:
mytable = Table(
    "mytable",
    metadata_obj,
    Column("col1", Integer, CheckConstraint("col1>5")),
    Column("col2", Integer),
    Column("col3", Integer),
    UniqueConstraint("col2", "col3", name="uix_1"),
    CheckConstraint("col2 > col3 + 5", name="check1")
)

----------------------------------------

TITLE: Using the New contains_eager() Option
DESCRIPTION: The contains_eager() option was added to specify properties that should be eagerly loaded from a result set.

LANGUAGE: python
CODE:
query = session.query(User).options(contains_eager(User.addresses))
user = query.filter(User.id == 1).one()

----------------------------------------

TITLE: Defining a Table with ARRAY of ENUM in PostgreSQL
DESCRIPTION: Example of creating a custom ArrayOfEnum type and using it to define a table column in SQLAlchemy with PostgreSQL.

LANGUAGE: python
CODE:
from sqlalchemy import TypeDecorator
from sqlalchemy.dialects.postgresql import ARRAY


class ArrayOfEnum(TypeDecorator):
    impl = ARRAY

    def bind_expression(self, bindvalue):
        return sa.cast(bindvalue, self)

    def result_processor(self, dialect, coltype):
        super_rp = super(ArrayOfEnum, self).result_processor(dialect, coltype)

        def handle_raw_string(value):
            inner = re.match(r"^{(.*)}$", value).group(1)
            return inner.split(",") if inner else []

        def process(value):
            if value is None:
                return None
            return super_rp(handle_raw_string(value))

        return process

Table(
    "mydata",
    metadata,
    Column("id", Integer, primary_key=True),
    Column("data", ArrayOfEnum(ENUM("a", "b", "c", name="myenum"))),
)

----------------------------------------

TITLE: Using Mixins with Mapped Inheritance Patterns
DESCRIPTION: This example demonstrates how to use mixins and base classes with different inheritance patterns, such as joined table inheritance and single table inheritance.

LANGUAGE: python
CODE:
class Tablename:
    @declared_attr.directive
    def __tablename__(cls) -> Optional[str]:
        return cls.__name__.lower()


class Person(Tablename, Base):
    id: Mapped[int] = mapped_column(primary_key=True)
    discriminator: Mapped[str]
    __mapper_args__ = {"polymorphic_on": "discriminator"}


class Engineer(Person):
    id: Mapped[int] = mapped_column(ForeignKey("person.id"), primary_key=True)

    primary_language: Mapped[str]

    __mapper_args__ = {"polymorphic_identity": "engineer"}


class Manager(Person):
    @declared_attr.directive
    def __tablename__(cls) -> Optional[str]:
        """override __tablename__ so that Manager is single-inheritance to Person"""

        return None

    __mapper_args__ = {"polymorphic_identity": "manager"}

----------------------------------------

TITLE: SQLAlchemy IN Operator Usage
DESCRIPTION: Demonstrates using the IN operator with lists of values, empty lists, and subqueries. Includes NOT IN usage and tuple comparisons.

LANGUAGE: python
CODE:
print(column("x").in_([1, 2, 3]))
print(column("x").not_in([1, 2, 3]))
print(~column("x").in_([1, 2, 3]))

----------------------------------------

TITLE: Implementing User-Address Model with Decorator Mapping in SQLAlchemy
DESCRIPTION: Shows how to create the same User-Address model using the decorator approach instead of declarative base, demonstrating an alternative mapping style.

LANGUAGE: python
CODE:
from datetime import datetime
from typing import List
from typing import Optional

from sqlalchemy import ForeignKey
from sqlalchemy import func
from sqlalchemy import Integer
from sqlalchemy import String
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.orm import registry
from sqlalchemy.orm import relationship

mapper_registry = registry()


@mapper_registry.mapped
class User:
    __tablename__ = "user"

    id = mapped_column(Integer, primary_key=True)
    name: Mapped[str]
    fullname: Mapped[Optional[str]]
    nickname: Mapped[Optional[str]] = mapped_column(String(64))
    create_date: Mapped[datetime] = mapped_column(insert_default=func.now())

    addresses: Mapped[List["Address"]] = relationship(back_populates="user")


@mapper_registry.mapped
class Address:
    __tablename__ = "address"

    id = mapped_column(Integer, primary_key=True)
    user_id = mapped_column(ForeignKey("user.id"))
    email_address: Mapped[str]

    user: Mapped["User"] = relationship(back_populates="addresses")

----------------------------------------

TITLE: Applying events to unmapped superclasses in Python
DESCRIPTION: Example of using the propagate=True flag to apply events to unmapped superclasses, which will be propagated to subclasses as they are mapped.

LANGUAGE: python
CODE:
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()


@event.listens_for("load", Base, propagate=True)
def on_load(target, context):
    print("New instance loaded:", target)


# on_load() will be applied to SomeClass
class SomeClass(Base):
    __tablename__ = "sometable"

    # ...

----------------------------------------

TITLE: Window Function Example
DESCRIPTION: Shows how to use the new window function feature with example SQL output

LANGUAGE: python
CODE:
from sqlalchemy.sql import table, column, select, func

empsalary = table("empsalary",
    column("depname"),
    column("empno"),
    column("salary"))

s = select([empsalary,
    func.avg(empsalary.c.salary).over(
        partition_by=empsalary.c.depname
    ).label('avg')])

print(s)

LANGUAGE: sql
CODE:
SELECT empsalary.depname, empsalary.empno, empsalary.salary,
avg(empsalary.salary) OVER (PARTITION BY empsalary.depname) AS avg
FROM empsalary

----------------------------------------

TITLE: SQLAlchemy Arithmetic Operators
DESCRIPTION: Basic arithmetic operations like addition, subtraction, multiplication, division and modulo.

LANGUAGE: python
CODE:
print(column("x") + 5)
print(column("x") - 5)
print(column("x") * 5)
print(column("x") / 5)
print(column("x") % 5)

----------------------------------------

TITLE: Importing ORM Features in SQLAlchemy 0.4
DESCRIPTION: Shows the correct way to import SQLAlchemy ORM features in version 0.4, which now requires explicit imports from sqlalchemy.orm.

LANGUAGE: python
CODE:
from sqlalchemy import *
from sqlalchemy.orm import *

----------------------------------------

TITLE: Enabling Pre-Ping for Connection Validation
DESCRIPTION: Shows how to enable the pre-ping feature to validate connections before use.

LANGUAGE: python
CODE:
engine = create_engine("mysql+pymysql://user:pw@host/db", pool_pre_ping=True)

----------------------------------------

TITLE: Dynamic Loader Relations in SQLAlchemy 0.4
DESCRIPTION: Shows how to use the new dynamic_loader() for relations that return a live Query object for read operations in SQLAlchemy 0.4.

LANGUAGE: python
CODE:
mapper(
    Foo,
    foo_table,
    properties={
        "bars": dynamic_loader(
            Bar,
            backref="foo",
            # <other relation() opts>
        )
    },
)

session = create_session(autoflush=True)
foo = session.query(Foo).first()

foo.bars.append(Bar(name="lala"))

for bar in foo.bars.filter(Bar.name == "lala"):
    print(bar)

session.commit()

----------------------------------------

TITLE: Composite Adjacency List Implementation in SQLAlchemy
DESCRIPTION: Shows a complex self-referential relationship using composite foreign keys where a column appears on both sides of the relationship.

LANGUAGE: python
CODE:
class Folder(Base):
    __tablename__ = "folder"
    __table_args__ = (
        ForeignKeyConstraint(
            ["account_id", "parent_id"], ["folder.account_id", "folder.folder_id"]
        ),
    )

    account_id = mapped_column(Integer, primary_key=True)
    folder_id = mapped_column(Integer, primary_key=True)
    parent_id = mapped_column(Integer)
    name = mapped_column(String)

    parent_folder = relationship(
        "Folder", back_populates="child_folders", remote_side=[account_id, folder_id]
    )

    child_folders = relationship("Folder", back_populates="parent_folder")

----------------------------------------

TITLE: Automatic Join Aliasing in SQLAlchemy 0.4
DESCRIPTION: Demonstrates the new automatic join aliasing feature in SQLAlchemy 0.4, which allows for easier self-referential and multi-join queries.

LANGUAGE: python
CODE:
session.query(Order).join("items", aliased=True).filter(Item.name="item 1").join(
    "items", aliased=True
).filter(Item.name == "item 3")

session.query(Order).join("items", id="j1", aliased=True).filter(
    Item.name == "item 1"
).join("items", aliased=True, id="j2").filter(Item.name == "item 3").add_entity(
    Item, id="j1"
).add_entity(
    Item, id="j2"
)

----------------------------------------

TITLE: Importing SQLite Data Types in SQLAlchemy
DESCRIPTION: Demonstrates how to import SQLite-specific data types from the SQLAlchemy dialect. These types are valid for use with SQLite and can be imported from the top-level dialect module.

LANGUAGE: python
CODE:
from sqlalchemy.dialects.sqlite import (
    BLOB,
    BOOLEAN,
    CHAR,
    DATE,
    DATETIME,
    DECIMAL,
    FLOAT,
    INTEGER,
    NUMERIC,
    JSON,
    SMALLINT,
    TEXT,
    TIME,
    TIMESTAMP,
    VARCHAR,
)

----------------------------------------

TITLE: Self-Referential Eager Loading in SQLAlchemy 0.4
DESCRIPTION: Shows how to set up self-referential eager loading with a specified join depth in SQLAlchemy 0.4.

LANGUAGE: python
CODE:
nodes = Table(
    "nodes",
    metadata,
    Column("id", Integer, primary_key=True),
    Column("parent_id", Integer, ForeignKey("nodes.id")),
    Column("name", String(30)),
)


class TreeNode(object):
    pass


mapper(
    TreeNode,
    nodes,
    properties={"children": relation(TreeNode, lazy=False, join_depth=3)},
)

create_session().query(TreeNode).all()

----------------------------------------

TITLE: Implementing a Synonym in SQLAlchemy ORM
DESCRIPTION: Demonstrates how to use the synonym function to create an alternative name for a mapped attribute. The synonym allows the attribute to be accessed by two different names.

LANGUAGE: python
CODE:
from sqlalchemy.orm import synonym

class MyClass(Base):
    __tablename__ = "my_table"

    id = mapped_column(Integer, primary_key=True)
    job_status = mapped_column(String(50))

    status = synonym("job_status")

----------------------------------------

TITLE: Implementing a Synonym with Custom Descriptor in SQLAlchemy ORM
DESCRIPTION: Shows how to create a synonym that references a user-defined descriptor. The synonym uses a property to modify the value of the attribute.

LANGUAGE: python
CODE:
class MyClass(Base):
    __tablename__ = "my_table"

    id = mapped_column(Integer, primary_key=True)
    status = mapped_column(String(50))

    @property
    def job_status(self):
        return "Status: " + self.status

    job_status = synonym("status", descriptor=job_status)

----------------------------------------

TITLE: Self-Referential Queries in SQLAlchemy 0.4
DESCRIPTION: Shows how to perform self-referential queries using the new join aliasing feature in SQLAlchemy 0.4.

LANGUAGE: python
CODE:
mapper(
    TreeNode,
    tree_nodes,
    properties={
        "children": relation(
            TreeNode, backref=backref("parent", remote_side=tree_nodes.id)
        )
    },
)

# query for node with child containing "bar" two levels deep
session.query(TreeNode).join(["children", "children"], aliased=True).filter_by(
    name="bar"
)

# search for the treenode along the path "n1/n12/n122"

# first find a Node with name="n122"
q = sess.query(Node).filter_by(name="n122")

# then join to parent with "n12"
q = q.join("parent", aliased=True).filter_by(name="n12")

# join again to the next parent with 'n1'.  use 'from_joinpoint'
# so we join from the previous point, instead of joining off the
# root table
q = q.join("parent", aliased=True, from_joinpoint=True).filter_by(name="n1")

node = q.first()

----------------------------------------

TITLE: Using Baked Queries with SQLAlchemy
DESCRIPTION: Example of using the new 'baked' query feature that provides caching for improved performance

LANGUAGE: python
CODE:
from sqlalchemy.ext import baked
from sqlalchemy import bindparam

bakery = baked.bakery()

def search_for_user(session, username, email=None):
    baked_query = bakery(lambda session: session.query(User))
    baked_query += lambda q: q.filter(User.name == bindparam('username'))
    
    baked_query += lambda q: q.order_by(User.id)

    if email:
        baked_query += lambda q: q.filter(User.email == bindparam('email'))

    result = baked_query(session).params(username=username, email=email).all()

    return result

----------------------------------------

TITLE: Implementing Custom Vertical Partitioning in SQLAlchemy ORM
DESCRIPTION: Shows how to create a custom Session class that implements more complex rule-based partitioning for database operations.

LANGUAGE: python
CODE:
class RoutingSession(Session):
    def get_bind(self, mapper=None, clause=None):
        if mapper and issubclass(mapper.class_, MyOtherClass):
            return engines["other"]
        elif self._flushing or isinstance(clause, (Update, Delete)):
            return engines["leader"]
        else:
            return engines[random.choice(["follower1", "follower2"])]

Session = sessionmaker(class_=RoutingSession)

----------------------------------------

TITLE: Implementing a Synonym Using Declarative Decorator in SQLAlchemy ORM
DESCRIPTION: Demonstrates how to use the synonym_for decorator to create a synonym in a more concise way when using the Declarative style.

LANGUAGE: python
CODE:
from sqlalchemy.ext.declarative import synonym_for

class MyClass(Base):
    __tablename__ = "my_table"

    id = mapped_column(Integer, primary_key=True)
    status = mapped_column(String(50))

    @synonym_for("status")
    @property
    def job_status(self):
        return "Status: " + self.status

----------------------------------------

TITLE: Using Collection Proxies in SQLAlchemy ORM
DESCRIPTION: Example showing usage of association proxies with custom getters and setters for collections

LANGUAGE: python
CODE:
obj.col = [newval1, newval2]
# or
obj.dictcol = {'foo': newval1, 'bar': newval2}

----------------------------------------

TITLE: Generating DDL Statements as Strings in SQLAlchemy
DESCRIPTION: Demonstrates different methods for generating CREATE TABLE and other DDL statements as strings, including engine-specific compilation

LANGUAGE: python
CODE:
from sqlalchemy.schema import CreateTable

print(CreateTable(mytable))

# Engine-specific DDL
print(CreateTable(mytable).compile(engine))

# Full metadata DDL dump
from sqlalchemy import create_mock_engine

def dump(sql, *multiparams, **params):
    print(sql.compile(dialect=engine.dialect))

engine = create_mock_engine("postgresql+psycopg2://", dump)
metadata_obj.create_all(engine, checkfirst=False)

----------------------------------------

TITLE: Importing AttributeEvents Class in SQLAlchemy ORM
DESCRIPTION: This snippet shows the import of the AttributeEvents class from SQLAlchemy ORM. AttributeEvents are triggered for operations on individual attributes of ORM mapped objects, useful for custom validation and backref handling.

LANGUAGE: python
CODE:
.. autoclass:: sqlalchemy.orm.AttributeEvents
   :members:

----------------------------------------

TITLE: SQLAlchemy Relationship with Custom Join Condition and Backref
DESCRIPTION: Shows how to create a relationship with a custom join condition using primaryjoin while maintaining bidirectional behavior with backref.

LANGUAGE: python
CODE:
from sqlalchemy import Column, ForeignKey, Integer, String
from sqlalchemy.orm import DeclarativeBase, relationship


class Base(DeclarativeBase):
    pass


class User(Base):
    __tablename__ = "user"
    id = mapped_column(Integer, primary_key=True)
    name = mapped_column(String)

    addresses = relationship(
        "Address",
        primaryjoin=(
            "and_(User.id==Address.user_id, Address.email.startswith('tony'))"
        ),
        backref="user",
    )


class Address(Base):
    __tablename__ = "address"
    id = mapped_column(Integer, primary_key=True)
    email = mapped_column(String)
    user_id = mapped_column(Integer, ForeignKey("user.id"))

----------------------------------------

TITLE: Configuring ScopedSession Extension Methods
DESCRIPTION: Example showing how to add extension methods to scoped_session in SQLAlchemy 0.4.7p1

LANGUAGE: python
CODE:
from sqlalchemy.orm.scoping import ScopedSession, instrument

setattr(ScopedSession, "add", instrument("add"))
setattr(ScopedSession, "add_all", instrument("add_all"))

----------------------------------------

TITLE: Overriding Reflected Columns in SQLAlchemy
DESCRIPTION: Shows how to override specific columns when reflecting a table, allowing customization of datatypes and constraints like primary keys.

LANGUAGE: python
CODE:
>>> mytable = Table(
...     "mytable",
...     metadata_obj,
...     Column(
...         "id", Integer, primary_key=True
...     ),  # override reflected 'id' to have primary key
...     Column("mydata", Unicode(50)),  # override reflected 'mydata' to be Unicode
...     # additional Column objects which require no change are reflected normally
...     autoload_with=some_engine,
... )

----------------------------------------

TITLE: Performing ORM Bulk Insert
DESCRIPTION: Demonstrates how to perform a bulk insert of multiple records using SQLAlchemy ORM's insert() construct with a list of parameter dictionaries.

LANGUAGE: python
CODE:
session.execute(
    insert(User),
    [
        {"name": "spongebob", "fullname": "Spongebob Squarepants"},
        {"name": "sandy", "fullname": "Sandy Cheeks"},
        {"name": "patrick", "fullname": "Patrick Star"},
        {"name": "squidward", "fullname": "Squidward Tentacles"},
        {"name": "ehkrabs", "fullname": "Eugene H. Krabs"},
    ],
)

----------------------------------------

TITLE: Embedding SQL Insert/Update Expressions in SQLAlchemy ORM Flush
DESCRIPTION: Demonstrates how to set a database column value to a SQL expression instead of a literal value during a flush operation.

LANGUAGE: python
CODE:
class SomeClass(Base):
    __tablename__ = "some_table"

    # ...

    value = mapped_column(Integer)


someobject = session.get(SomeClass, 5)

# set 'value' attribute to a SQL expression adding one
someobject.value = SomeClass.value + 1

# issues "UPDATE some_table SET value=value+1"
session.commit()

----------------------------------------

TITLE: Example Column Property Query
DESCRIPTION: Example showing usage of column property based queries and labeling behavior with entity aliasing

LANGUAGE: python
CODE:
query(Entity.some_prop, entity_alias.some_prop).order_by(Entity.some_prop, entity_alias.some_prop)

----------------------------------------

TITLE: Implementing Custom Type Compilation in SQLAlchemy
DESCRIPTION: Example showing how to override type compilation behavior for the BINARY type to render as BLOB on SQLite

LANGUAGE: python
CODE:
from sqlalchemy.ext.compiler import compiles
from sqlalchemy.types import BINARY

@compiles(BINARY, "sqlite")
def compile_binary_sqlite(type_, compiler, **kw):
    return "BLOB"

----------------------------------------

TITLE: Event Registration with listens_for Decorator in Python
DESCRIPTION: Shows how to register an event listener using the @listens_for decorator syntax. Accomplishes the same functionality as the listen() function example.

LANGUAGE: python
CODE:
from sqlalchemy.event import listens_for
from sqlalchemy.pool import Pool

@listens_for(Pool, "connect")
def my_on_connect(dbapi_con, connection_record):
    print("New DBAPI connection:", dbapi_con)

----------------------------------------

TITLE: Using SQL Expressions with SQLAlchemy Sessions
DESCRIPTION: Shows how to execute SQL expressions and strings within a Session's transactional context using the execute method.

LANGUAGE: python
CODE:
Session = sessionmaker(bind=engine)
session = Session()

# execute a string statement
result = session.execute(text("select * from table where id=:id"), {"id": 7})

# execute a SQL expression construct
result = session.execute(select(mytable).where(mytable.c.id == 7))

----------------------------------------

TITLE: INSERT FROM SELECT Example
DESCRIPTION: Example showing INSERT FROM SELECT statement with default values preserved

LANGUAGE: sql
CODE:
INSERT INTO table (columns) SELECT default_values FROM source_table

----------------------------------------

TITLE: Mixing in Relationships
DESCRIPTION: This example shows how to define relationships in mixin classes using the declared_attr decorator.

LANGUAGE: python
CODE:
class RefTargetMixin:
    target_id: Mapped[int] = mapped_column(ForeignKey("target.id"))

    @declared_attr
    def target(cls) -> Mapped["Target"]:
        return relationship("Target")


class Foo(RefTargetMixin, Base):
    __tablename__ = "foo"
    id: Mapped[int] = mapped_column(primary_key=True)


class Bar(RefTargetMixin, Base):
    __tablename__ = "bar"
    id: Mapped[int] = mapped_column(primary_key=True)

----------------------------------------

TITLE: Importing MySQL Data Types in SQLAlchemy
DESCRIPTION: Demonstrates how to import all supported MySQL data types from the SQLAlchemy MySQL dialect. These types are valid for use with MySQL databases and can be used in table definitions and queries.

LANGUAGE: Python
CODE:
from sqlalchemy.dialects.mysql import (
    BIGINT,
    BINARY,
    BIT,
    BLOB,
    BOOLEAN,
    CHAR,
    DATE,
    DATETIME,
    DECIMAL,
    DECIMAL,
    DOUBLE,
    ENUM,
    FLOAT,
    INTEGER,
    LONGBLOB,
    LONGTEXT,
    MEDIUMBLOB,
    MEDIUMINT,
    MEDIUMTEXT,
    NCHAR,
    NUMERIC,
    NVARCHAR,
    REAL,
    SET,
    SMALLINT,
    TEXT,
    TIME,
    TIMESTAMP,
    TINYBLOB,
    TINYINT,
    TINYTEXT,
    VARBINARY,
    VARCHAR,
    YEAR,
)

----------------------------------------

TITLE: Forcing NULL on a Column with a Default in SQLAlchemy ORM
DESCRIPTION: Illustrates how to explicitly set a column value to NULL even when the column has a default value.

LANGUAGE: python
CODE:
from sqlalchemy import null

obj = MyObject(id=1, data=null())
session.add(obj)
session.commit()  # INSERT with the 'data' column explicitly set as null();
# the ORM uses this directly, bypassing all client-
# and server-side defaults, and the database will
# persist this as the NULL value

----------------------------------------

TITLE: Using Custom Operators in Join Conditions with SQLAlchemy ORM
DESCRIPTION: This example shows how to use custom operators like PostgreSQL's '<<' operator in relationship join conditions.

LANGUAGE: python
CODE:
class IPA(Base):
    __tablename__ = "ip_address"

    id = mapped_column(Integer, primary_key=True)
    v4address = mapped_column(INET)

    network = relationship(
        "Network",
        primaryjoin="IPA.v4address.bool_op('<<')(foreign(Network.v4representation))",
        viewonly=True,
    )


class Network(Base):
    __tablename__ = "network"

    id = mapped_column(Integer, primary_key=True)
    v4representation = mapped_column(CIDR)

----------------------------------------

TITLE: SQLAlchemy Type System Module Declaration
DESCRIPTION: Sphinx documentation directive specifying the current module for type system documentation.

LANGUAGE: restructuredtext
CODE:
.. currentmodule:: sqlalchemy.types

----------------------------------------

TITLE: Using the Inspector API for Fine-Grained Reflection in SQLAlchemy
DESCRIPTION: Demonstrates using the Inspector API to perform low-level, backend-agnostic reflection of database schema information.

LANGUAGE: python
CODE:
from sqlalchemy import create_engine
from sqlalchemy import inspect

engine = create_engine("...")
insp = inspect(engine)
print(insp.get_table_names())

----------------------------------------

TITLE: Creating and Using a Scoped Session in SQLAlchemy
DESCRIPTION: Demonstrates how to create a scoped_session using a sessionmaker factory and use it to obtain Session objects. Shows that multiple calls to the registry return the same Session instance until removed.

LANGUAGE: python
CODE:
>>> from sqlalchemy.orm import scoped_session
>>> from sqlalchemy.orm import sessionmaker

>>> session_factory = sessionmaker(bind=some_engine)
>>> Session = scoped_session(session_factory)

>>> some_session = Session()
>>> some_other_session = Session()
>>> some_session is some_other_session
True

>>> Session.remove()

>>> new_session = Session()
>>> new_session is some_session
False

----------------------------------------

TITLE: Sorting Tables by Dependency in SQLAlchemy
DESCRIPTION: Shows how to retrieve tables in dependency order using MetaData.sorted_tables

LANGUAGE: python
CODE:
metadata_obj = MetaData()
# ... add Table objects to metadata
ti = metadata_obj.sorted_tables
for t in ti:
    print(t)

----------------------------------------

TITLE: Using SQLAlchemy's quoted_name Class
DESCRIPTION: Example of using the quoted_name class to control quoting of identifiers in SQL statements.

LANGUAGE: python
CODE:
from sqlalchemy import quoted_name

# Creating a quoted name that will always be quoted
always_quoted = quoted_name('my_column', quote=True)

----------------------------------------

TITLE: Auto-Transactional and Auto-Flushing Sessions in SQLAlchemy 0.4
DESCRIPTION: Shows how to configure and use auto-transactional and auto-flushing sessions in SQLAlchemy 0.4.

LANGUAGE: python
CODE:
Session = sessionmaker(bind=engine, autoflush=True, transactional=True)

u = User(name="wendy")

sess = Session()
sess.save(u)

# wendy is flushed, comes right back from a query
wendy = sess.query(User).filter_by(name="wendy").one()

----------------------------------------

TITLE: Docker Database Configuration Commands
DESCRIPTION: Docker commands for setting up various database systems including PostgreSQL, MySQL, MariaDB, MSSQL, and Oracle

LANGUAGE: bash
CODE:
docker run --rm -e POSTGRES_USER='scott' -e POSTGRES_PASSWORD='tiger' -e POSTGRES_DB='test' -p 127.0.0.1:5432:5432 -d --name postgres postgres

docker run --rm -e MYSQL_USER='scott' -e MYSQL_PASSWORD='tiger' -e MYSQL_DATABASE='test' -e MYSQL_ROOT_PASSWORD='password' -p 127.0.0.1:3306:3306 -d --name mysql mysql --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci

----------------------------------------

TITLE: Creating Tables with Foreign Key Constraints
DESCRIPTION: Demonstrates defining tables with foreign key relationships between them using SQLAlchemy Core.

LANGUAGE: python
CODE:
from sqlalchemy import ForeignKey

address_table = Table(
    "address",
    metadata_obj,
    Column("id", Integer, primary_key=True),
    Column("user_id", ForeignKey("user_account.id"), nullable=False),
    Column("email_address", String, nullable=False),
)

----------------------------------------

TITLE: Importing SQLAlchemy Inspection Module
DESCRIPTION: Shows the core import statement for accessing SQLAlchemy's inspection functionality. The inspection module provides tools for runtime introspection of SQLAlchemy objects.

LANGUAGE: python
CODE:
from sqlalchemy.inspection import inspect

----------------------------------------

TITLE: Transactional Methods on Sessions in SQLAlchemy 0.4
DESCRIPTION: Demonstrates the new transactional methods directly available on Session objects in SQLAlchemy 0.4.

LANGUAGE: python
CODE:
Session = sessionmaker(autoflush=True, transactional=False)

sess = Session()
sess.begin()

# use the session

sess.commit()  # commit transaction

Session = sessionmaker(autoflush=True, transactional=False)

conn = engine.connect()
trans = conn.begin()
sess = Session(bind=conn)

# ... session is transactional

# commit the outermost transaction
trans.commit()

----------------------------------------

TITLE: Augmenting the Base Class
DESCRIPTION: This example shows how to apply common elements directly to the base class, which will then be inherited by all derived classes.

LANGUAGE: python
CODE:
from sqlalchemy import ForeignKey
from sqlalchemy.orm import declared_attr
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.orm import relationship


class Base(DeclarativeBase):
    """define a series of common elements that may be applied to mapped
    classes using this class as a base class."""

    @declared_attr.directive
    def __tablename__(cls) -> str:
        return cls.__name__.lower()

    __table_args__ = {"mysql_engine": "InnoDB"}
    __mapper_args__ = {"eager_defaults": True}

    id: Mapped[int] = mapped_column(primary_key=True)


class HasLogRecord:
    """mark classes that have a many-to-one relationship to the
    ``LogRecord`` class."""

    log_record_id: Mapped[int] = mapped_column(ForeignKey("logrecord.id"))

    @declared_attr
    def log_record(self) -> Mapped["LogRecord"]:
        return relationship("LogRecord")


class LogRecord(Base):
    log_info: Mapped[str]


class MyModel(HasLogRecord, Base):
    name: Mapped[str]

----------------------------------------

TITLE: Committing Changes with SQLAlchemy Core
DESCRIPTION: This example shows how to create a table, insert data, and commit the changes using SQLAlchemy Core's 'commit as you go' style.

LANGUAGE: python
CODE:
with engine.connect() as conn:
    conn.execute(text("CREATE TABLE some_table (x int, y int)"))
    conn.execute(
        text("INSERT INTO some_table (x, y) VALUES (:x, :y)"),
        [{"x": 1, "y": 1}, {"x": 2, "y": 4}],
    )
    conn.commit()

----------------------------------------

TITLE: Documenting SQLAlchemy Core Exceptions with reStructuredText
DESCRIPTION: This snippet uses reStructuredText directives to set up documentation for SQLAlchemy's core exception classes. It defines a reference label and uses the automodule directive to automatically generate documentation for all members of the sqlalchemy.exc module.

LANGUAGE: reStructuredText
CODE:
.. _core_exceptions_toplevel:

Core Exceptions
===============

.. automodule:: sqlalchemy.exc
    :members:

----------------------------------------

TITLE: Composite Types in SQLAlchemy 0.4
DESCRIPTION: Demonstrates how to define and use composite types in SQLAlchemy 0.4, allowing custom datatypes composed of multiple columns.

LANGUAGE: python
CODE:
class Point(object):
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def __composite_values__(self):
        return self.x, self.y

    def __eq__(self, other):
        return other.x == self.x and other.y == self.y

    def __ne__(self, other):
        return not self.__eq__(other)

vertices = Table(
    "vertices",
    metadata,
    Column("id", Integer, primary_key=True),
    Column("x1", Integer),
    Column("y1", Integer),
    Column("x2", Integer),
    Column("y2", Integer),
)

class Vertex(object):
    def __init__(self, start, end):
        self.start = start
        self.end = end


mapper(
    Vertex,
    vertices,
    properties={
        "start": composite(Point, vertices.c.x1, vertices.c.y1),
        "end": composite(Point, vertices.c.x2, vertices.c.y2),
    },
)

v = Vertex(Point(3, 4), Point(26, 15))
session.save(v)
session.flush()

# works in queries too
q = session.query(Vertex).filter(Vertex.start == Point(3, 4))

----------------------------------------

TITLE: Deleting Objects with SQLAlchemy ORM
DESCRIPTION: Shows how to mark an object for deletion using the Session's delete method, which will be executed during the next flush.

LANGUAGE: python
CODE:
patrick = session.get(User, 3)
session.delete(patrick)

----------------------------------------

TITLE: Using 'Begin Once' Transaction Style in SQLAlchemy Core
DESCRIPTION: This snippet demonstrates the 'begin once' transaction style using SQLAlchemy Core, which automatically manages the transaction scope.

LANGUAGE: python
CODE:
with engine.begin() as conn:
    conn.execute(
        text("INSERT INTO some_table (x, y) VALUES (:x, :y)"),
        [{"x": 6, "y": 8}, {"x": 9, "y": 10}],
    )

----------------------------------------

TITLE: Importing SQL Expression Language Module in Python
DESCRIPTION: This snippet shows the import statement for the SQLAlchemy SQL expression module. It's used to access the classes and functions documented in this file.

LANGUAGE: python
CODE:
.. currentmodule:: sqlalchemy.sql.expression

----------------------------------------

TITLE: Using 'bind' Parameter in SQLAlchemy 0.4
DESCRIPTION: Demonstrates the use of the 'bind' parameter to replace various engine-related parameters from previous versions.

LANGUAGE: python
CODE:
myengine = create_engine("sqlite://")

meta = MetaData(myengine)

meta2 = MetaData()
meta2.bind = myengine

session = create_session(bind=myengine)

statement = select([table], bind=myengine)

----------------------------------------

TITLE: Defining Table Indexes
DESCRIPTION: Example demonstrating how to create different types of indexes on table columns

LANGUAGE: python
CODE:
mytable = Table(
    "mytable",
    metadata_obj,
    Column("col1", Integer, index=True),
    Column("col2", Integer, index=True, unique=True),
    Column("col3", Integer),
    Column("col4", Integer),
    Index("idx_col34", "col3", "col4"),
)

----------------------------------------

TITLE: Custom Pessimistic Connection Ping
DESCRIPTION: Illustrates a custom implementation of pessimistic connection pinging using engine events.

LANGUAGE: python
CODE:
from sqlalchemy import exc
from sqlalchemy import event
from sqlalchemy import select

some_engine = create_engine(...)


@event.listens_for(some_engine, "engine_connect")
def ping_connection(connection, branch):
    if branch:
        return

    try:
        connection.scalar(select(1))
    except exc.DBAPIError as err:
        if err.connection_invalidated:
            connection.scalar(select(1))
        else:
            raise

----------------------------------------

TITLE: Creating a Bakery Instance in Python
DESCRIPTION: Initializes a bakery object to store cached query data in an LRU cache with a default size of 200 elements.

LANGUAGE: python
CODE:
from sqlalchemy.ext import baked

bakery = baked.bakery()

----------------------------------------

TITLE: Configuring Engine Logging
DESCRIPTION: Example of setting up SQL query logging using Python's standard logging module with SQLAlchemy

LANGUAGE: python
CODE:
import logging

logging.basicConfig()
logging.getLogger("sqlalchemy.engine").setLevel(logging.INFO)

----------------------------------------

TITLE: Importing SQLAlchemy Types in 0.4
DESCRIPTION: Shows how to correctly import SQLAlchemy types in version 0.4, which requires an additional import statement.

LANGUAGE: python
CODE:
from sqlalchemy import *
from sqlalchemy import types


class UTCDateTime(types.TypeDecorator):
    pass

----------------------------------------

TITLE: Basic Node Class with Self-Referential Relationship in SQLAlchemy
DESCRIPTION: Defines a Node class representing a tree structure using a self-referential relationship. Includes a foreign key reference to itself and a one-to-many relationship for children.

LANGUAGE: python
CODE:
class Node(Base):
    __tablename__ = "node"
    id = mapped_column(Integer, primary_key=True)
    parent_id = mapped_column(Integer, ForeignKey("node.id"))
    data = mapped_column(String(50))
    children = relationship("Node")

----------------------------------------

TITLE: Using LIFO Pool Behavior
DESCRIPTION: Shows how to configure the connection pool to use LIFO (last-in, first-out) behavior.

LANGUAGE: python
CODE:
engine = create_engine("postgresql://", pool_use_lifo=True, pool_pre_ping=True)

----------------------------------------

TITLE: Basic SQL Expression Stringification in Python with SQLAlchemy
DESCRIPTION: Demonstrates how to convert a simple SQLAlchemy select statement to a string using the str() function.

LANGUAGE: python
CODE:
>>> from sqlalchemy import table, column, select
>>> t = table("my_table", column("x"))
>>> statement = select(t)
>>> print(str(statement))

LANGUAGE: sql
CODE:
SELECT my_table.x
FROM my_table

----------------------------------------

TITLE: Using Explicit Aliasing in ORM Queries
DESCRIPTION: Example of using explicit aliasing in SQLAlchemy ORM queries to avoid naming conflicts.

LANGUAGE: python
CODE:
from sqlalchemy.orm import aliased

a1 = aliased(Address)

q = (s.query(User)
      .join(User.addresses.of_type(a1))
      .filter(a1.email_address == "ed@foo.com")
      .all())

----------------------------------------

TITLE: UPDATE and DELETE with RETURNING Clause
DESCRIPTION: Demonstrates how to use the RETURNING clause with UPDATE and DELETE statements to return data from affected rows.

LANGUAGE: python
CODE:
update_stmt = (
    update(user_table)
    .where(user_table.c.name == "patrick")
    .values(fullname="Patrick the Star")
    .returning(user_table.c.id, user_table.c.name)
)

delete_stmt = (
    delete(user_table)
    .where(user_table.c.name == "patrick")
    .returning(user_table.c.id, user_table.c.name)
)

----------------------------------------

TITLE: Integrating Scoped Session with Web Framework in SQLAlchemy
DESCRIPTION: Illustrates how to integrate scoped_session with a custom web framework by using a request-scoped function and handling session removal at the end of each request.

LANGUAGE: python
CODE:
from my_web_framework import get_current_request, on_request_end
from sqlalchemy.orm import scoped_session, sessionmaker

Session = scoped_session(sessionmaker(bind=some_engine), scopefunc=get_current_request)


@on_request_end
def remove_session(req):
    Session.remove()

----------------------------------------

TITLE: Stringifying SQLAlchemy Expressions for Specific Databases
DESCRIPTION: Shows how to compile a SQLAlchemy statement for a specific database dialect using an Engine or Dialect object.

LANGUAGE: python
CODE:
from sqlalchemy import create_engine

engine = create_engine("mysql+pymysql://scott:tiger@localhost/test")
print(statement.compile(engine))

from sqlalchemy.dialects import postgresql

print(statement.compile(dialect=postgresql.dialect()))

----------------------------------------

TITLE: Implementing a Custom Descriptor in SQLAlchemy ORM
DESCRIPTION: Demonstrates how to create a custom descriptor for an attribute using Python properties. The descriptor reads and writes from a mapped attribute with a different name.

LANGUAGE: python
CODE:
class EmailAddress(Base):
    __tablename__ = "email_address"

    id = mapped_column(Integer, primary_key=True)

    # name the attribute with an underscore,
    # different from the column name
    _email = mapped_column("email", String)

    # then create an ".email" attribute
    # to get/set "._email"
    @property
    def email(self):
        return self._email

    @email.setter
    def email(self, email):
        self._email = email

----------------------------------------

TITLE: Defining RST Documentation Structure for SQLAlchemy Types
DESCRIPTION: ReStructuredText markup defining the documentation structure for SQLAlchemy's SQL datatype system, including a table of contents with links to type basics, custom types, and type API documentation.

LANGUAGE: rst
CODE:
.. _types_toplevel:

SQL Datatype Objects
=====================

.. toctree::
    :maxdepth: 3

    type_basics
    custom_types
    type_api

----------------------------------------

TITLE: Intercepting SELECT statements with do_orm_execute event
DESCRIPTION: Example of using the do_orm_execute event to add populate_existing option and an ORDER BY clause to SELECT statements for a specific entity.

LANGUAGE: python
CODE:
Session = sessionmaker(engine)

@event.listens_for(Session, "do_orm_execute")
def _do_orm_execute(orm_execute_state):
    if orm_execute_state.is_select:
        # add populate_existing for all SELECT statements
        orm_execute_state.update_execution_options(populate_existing=True)

        # check if the SELECT is against a certain entity and add an
        # ORDER BY if so
        col_descriptions = orm_execute_state.statement.column_descriptions

        if col_descriptions[0]["entity"] is MyEntity:
            orm_execute_state.statement = statement.order_by(MyEntity.name)

----------------------------------------

TITLE: Rendering Bound Parameters Inline with SQLAlchemy
DESCRIPTION: Demonstrates how to render a SQLAlchemy statement with bound parameters inlined, using the literal_binds flag.

LANGUAGE: python
CODE:
from sqlalchemy.sql import table, column, select

t = table("t", column("x"))

s = select(t).where(t.c.x == 5)

# **do not use** with untrusted input!!!
print(s.compile(compile_kwargs={"literal_binds": True}))

# to render for a specific dialect
print(s.compile(dialect=dialect, compile_kwargs={"literal_binds": True}))

# or if you have an Engine, pass as first argument
print(s.compile(some_engine, compile_kwargs={"literal_binds": True}))

----------------------------------------

TITLE: Using before_compile Event with Baked Queries in Python
DESCRIPTION: Shows how to use the before_compile event with baked queries by setting the bake_ok flag to True, allowing the event to modify the query while still caching the result.

LANGUAGE: python
CODE:
@event.listens_for(Query, "before_compile", retval=True, bake_ok=True)
def my_event(query):
    for desc in query.column_descriptions:
        if desc["type"] is User:
            entity = desc["entity"]
            query = query.filter(entity.deleted == False)
    return query

----------------------------------------

TITLE: Bulk Insert Operations with Write-Only Collections
DESCRIPTION: Example of performing bulk inserts with write-only collections, demonstrating how to efficiently add multiple new records to a large collection without loading existing data.

LANGUAGE: python
CODE:
session.execute(
    existing_account.account_transactions.insert(),
    [
        {"description": "transaction 1", "amount": Decimal("47.50")},
        {"description": "transaction 2", "amount": Decimal("-501.25")},
        {"description": "transaction 3", "amount": Decimal("1800.00")},
        {"description": "transaction 4", "amount": Decimal("-300.00")},
    ],
)

----------------------------------------

TITLE: New Query API in SQLAlchemy 0.4
DESCRIPTION: Demonstrates the new query API in SQLAlchemy 0.4, which uses methods like filter(), filter_by(), and first() instead of get_by() and select_by().

LANGUAGE: python
CODE:
User.query.filter_by(**kwargs).first()

User.query.filter_by(**kwargs).all()

User.query.filter(xxx).all()

----------------------------------------

TITLE: Custom UUID Stringification in SQLAlchemy
DESCRIPTION: Demonstrates a custom TypeDecorator for stringifying UUID types in SQLAlchemy statements.

LANGUAGE: python
CODE:
from sqlalchemy import TypeDecorator

class UUIDStringify(TypeDecorator):
    impl = UUID

    def process_literal_param(self, value, dialect):
        return repr(value)

from sqlalchemy import type_coerce

stmt = select(A).where(type_coerce(A.data, UUIDStringify) == uuid.uuid4())

print(stmt.compile(e, compile_kwargs={"literal_binds": True}))

----------------------------------------

TITLE: SQLAlchemy Type Classes Documentation
DESCRIPTION: Sphinx autoclass directives for generating documentation of core SQLAlchemy type system classes.

LANGUAGE: restructuredtext
CODE:
.. autoclass:: TypeEngine
   :members:


.. autoclass:: Concatenable
   :members:


.. autoclass:: Indexable
   :members:

.. autoclass:: NullType

.. autoclass:: ExternalType
    :members:

.. autoclass:: Variant
   :members: with_variant, __init__

----------------------------------------

TITLE: Implementing Backref-Aware Validation in SQLAlchemy ORM
DESCRIPTION: Shows how to use the @validates decorator with include_backrefs=False to prevent validation from occurring during backref operations.

LANGUAGE: python
CODE:
from sqlalchemy.orm import validates

class User(Base):
    # ...

    addresses = relationship("Address", backref="user")

    @validates("addresses", include_backrefs=False)
    def validate_address(self, key, address):
        if "@" not in address:
            raise ValueError("failed simplified email validation")
        return address

----------------------------------------

TITLE: SQL Clauses in Updates/Inserts in SQLAlchemy 0.4
DESCRIPTION: Demonstrates how to use SQL clauses directly in updates and inserts during a flush operation in SQLAlchemy 0.4.

LANGUAGE: python
CODE:
myobject.foo = mytable.c.value + 1

user.pwhash = func.md5(password)

order.hash = text("select hash from hashing_table")

----------------------------------------

TITLE: Documenting SQLAlchemy SyntaxExtension Class
DESCRIPTION: Autoclass directive for documenting the sqlalchemy.sql.SyntaxExtension class. This class is likely used for extending SQL syntax capabilities in SQLAlchemy.

LANGUAGE: restructuredtext
CODE:
.. autoclass:: sqlalchemy.sql.SyntaxExtension
    :members:

----------------------------------------

TITLE: Importing SQL Server Data Types in SQLAlchemy
DESCRIPTION: This snippet demonstrates how to import all UPPERCASE SQL Server data types from the top-level SQLAlchemy dialect. These types are valid for use with SQL Server and may originate from sqlalchemy.types or the local dialect.

LANGUAGE: python
CODE:
from sqlalchemy.dialects.mssql import (
    BIGINT,
    BINARY,
    BIT,
    CHAR,
    DATE,
    DATETIME,
    DATETIME2,
    DATETIMEOFFSET,
    DECIMAL,
    DOUBLE_PRECISION,
    FLOAT,
    IMAGE,
    INTEGER,
    JSON,
    MONEY,
    NCHAR,
    NTEXT,
    NUMERIC,
    NVARCHAR,
    REAL,
    SMALLDATETIME,
    SMALLINT,
    SMALLMONEY,
    SQL_VARIANT,
    TEXT,
    TIME,
    TIMESTAMP,
    TINYINT,
    UNIQUEIDENTIFIER,
    VARBINARY,
    VARCHAR,
)

----------------------------------------

TITLE: Using declared_attr.directive for PEP 484 Type Hinting in SQLAlchemy ORM
DESCRIPTION: Illustrates the use of declared_attr.directive to support PEP 484 typing tools. This decorator allows the return type of a declared attribute to be specified without using the Mapped generic class, which is useful for directive attributes like __tablename__.

LANGUAGE: python
CODE:
class CreateTableName:
    @declared_attr.directive
    def __tablename__(cls) -> str:
        return cls.__name__.lower()

----------------------------------------

TITLE: Implementing Remove Validation for Collections in SQLAlchemy ORM
DESCRIPTION: Demonstrates how to validate collection remove events using the @validates decorator with include_removes=True. The validator prevents items from being removed from the collection.

LANGUAGE: python
CODE:
from sqlalchemy.orm import validates

class User(Base):
    # ...

    addresses = relationship("Address")

    @validates("addresses", include_removes=True)
    def validate_address(self, key, address, is_remove):
        if is_remove:
            raise ValueError("not allowed to remove items from the collection")
        else:
            if "@" not in address.email:
                raise ValueError("failed simplified email validation")
            return address

----------------------------------------

TITLE: Using Subquery Eager Loading in SQLAlchemy 0.6
DESCRIPTION: Demonstrates the new subquery eager loading feature in SQLAlchemy 0.6 ORM, which can be more efficient for loading large collections.

LANGUAGE: python
CODE:
# Using subqueryload() option
session.query(Parent).options(subqueryload(Parent.children)).all()

# Using subqueryload_all() option
session.query(Parent).options(subqueryload_all(Parent.children, Child.grandchildren)).all()

# Using lazy='subquery' in relationship definition
relationship(Child, lazy='subquery')

----------------------------------------

TITLE: Demonstrating numpy.int64 Integration Issue with SQLAlchemy
DESCRIPTION: This code snippet illustrates the problem of using numpy.int64 with SQLAlchemy, which can lead to errors when interacting with the database or in SQLAlchemy's expression language.

LANGUAGE: python
CODE:
import numpy


class A(Base):
    __tablename__ = "a"

    id = Column(Integer, primary_key=True)
    data = Column(Integer)


# .. later
session.add(A(data=numpy.int64(10)))
session.commit()

----------------------------------------

TITLE: Importing SQLAlchemy ORM Relationships Module
DESCRIPTION: This snippet sets the current module context for the documentation to sqlalchemy.orm, which contains the relationships API functions.

LANGUAGE: python
CODE:
.. currentmodule:: sqlalchemy.orm

----------------------------------------

TITLE: Subquery Joins
DESCRIPTION: Example of joining to subqueries with aliased entities

LANGUAGE: python
CODE:
subq = select(Address).where(Address.email_address == "pat999@aol.com").subquery()
address_subq = aliased(Address, subq, name="address")
stmt = select(User, address_subq).join(address_subq)

----------------------------------------

TITLE: Using Inner Join for Eager Loading in SQLAlchemy 0.6
DESCRIPTION: Shows how to use the new innerjoin option for joined eager loading in SQLAlchemy 0.6, which can provide significant performance improvements.

LANGUAGE: python
CODE:
# At mapper level
mapper(Child, child)
mapper(
    Parent,
    parent,
    properties={"child": relationship(Child, lazy="joined", innerjoin=True)},
)

# At query time level
session.query(Parent).options(joinedload(Parent.child, innerjoin=True)).all()

----------------------------------------

TITLE: Configuring SQLAlchemy Dialect Entry Points in setup.py
DESCRIPTION: Setup script configuration for registering a dialect with SQLAlchemy's plugin system using setuptools entry points.

LANGUAGE: python
CODE:
entry_points = {
    "sqlalchemy.dialects": [
        "access.pyodbc = sqlalchemy_access.pyodbc:AccessDialect_pyodbc",
    ]
}

----------------------------------------

TITLE: Importing SQLAlchemy ORM Util Module
DESCRIPTION: This code snippet sets the current module context to sqlalchemy.orm.util for documenting specific utility functions.

LANGUAGE: python
CODE:
.. currentmodule:: sqlalchemy.orm.util

----------------------------------------

TITLE: Creating a Custom Connection Pool
DESCRIPTION: Demonstrates how to create a custom QueuePool with a custom connection function.

LANGUAGE: python
CODE:
import sqlalchemy.pool as pool
import psycopg2


def getconn():
    c = psycopg2.connect(user="ed", host="127.0.0.1", dbname="test")
    return c


mypool = pool.QueuePool(getconn, max_overflow=10, pool_size=5)

----------------------------------------

TITLE: Using of_type() with various ORM query methods in Python
DESCRIPTION: Examples of using of_type() with joinedload, subqueryload, contains_eager, and other ORM query methods to specify polymorphic loading.

LANGUAGE: python
CODE:
# use eager loading in conjunction with with_polymorphic targets
Job_P = with_polymorphic(Job, [SubJob, ExtraJob], aliased=True)
q = (
    s.query(DataContainer)
    .join(DataContainer.jobs.of_type(Job_P))
    .options(contains_eager(DataContainer.jobs.of_type(Job_P)))
)

# pass subclasses to eager loads (implicitly applies with_polymorphic)
q = s.query(ParentThing).options(
    joinedload_all(ParentThing.container, DataContainer.jobs.of_type(SubJob))
)

# control self-referential aliasing with any()/has()
Job_A = aliased(Job)
q = (
    s.query(Job)
    .join(DataContainer.jobs)
    .filter(
        DataContainer.jobs.of_type(Job_A).any(
            and_(Job_A.id < Job.id, Job_A.type == "fred")
        )
    )
)

----------------------------------------

TITLE: Configuring SQLAlchemy Dialect Test Bootstrap in conftest.py
DESCRIPTION: Test configuration script for registering the dialect and setting up SQLAlchemy's pytest plugin.

LANGUAGE: python
CODE:
from sqlalchemy.dialects import registry
import pytest

registry.register("access.pyodbc", "sqlalchemy_access.pyodbc", "AccessDialect_pyodbc")

pytest.register_assert_rewrite("sqlalchemy.testing.assertions")

from sqlalchemy.testing.plugin.pytestplugin import *

----------------------------------------

TITLE: Named Argument Style Event Listeners in Python
DESCRIPTION: Examples of using named argument style for event listeners by accepting **kw arguments. Shows both capturing all arguments as keywords and mixing positional with keyword arguments.

LANGUAGE: python
CODE:
from sqlalchemy.event import listens_for
from sqlalchemy.pool import Pool

@listens_for(Pool, "connect", named=True)
def my_on_connect(**kw):
    print("New DBAPI connection:", kw["dbapi_connection"])

LANGUAGE: python
CODE:
from sqlalchemy.event import listens_for
from sqlalchemy.pool import Pool

@listens_for(Pool, "connect", named=True)
def my_on_connect(dbapi_connection, **kw):
    print("New DBAPI connection:", dbapi_connection)
    print("Connection record:", kw["connection_record"])

----------------------------------------

TITLE: Using Joined Load Strategy in SQLAlchemy ORM
DESCRIPTION: Shows how to use joinedload to eagerly load related objects using a JOIN in the query.

LANGUAGE: python
CODE:
from sqlalchemy.orm import joinedload

stmt = (select(Address)
    .options(joinedload(Address.user, innerjoin=True))
    .order_by(Address.id))
for row in session.execute(stmt):
    print(f"{row.Address.email_address} {row.Address.user.name}")

----------------------------------------

TITLE: Using multiple-VALUES support for Insert in Python
DESCRIPTION: Example of using the new multiple-VALUES support for Insert, which allows inserting multiple rows in a single statement.

LANGUAGE: python
CODE:
users.insert().values(
    [
        {"name": "some name"},
        {"name": "some other name"},
        {"name": "yet another name"},
    ]
)

----------------------------------------

TITLE: Pytest Direct Testing Commands
DESCRIPTION: Examples of running tests directly with pytest, including parallel processing and database URI specification

LANGUAGE: bash
CODE:
pytest -n4
pytest --dburi=postgresql+psycopg2://scott:tiger@localhost/test  test/sql/test_query.py
pytest -n4 --db postgresql --db mysql

----------------------------------------

TITLE: Importing QueryEvents Class in SQLAlchemy ORM
DESCRIPTION: This code imports the QueryEvents class from SQLAlchemy ORM. QueryEvents provide hooks for query-related operations in the ORM.

LANGUAGE: python
CODE:
.. autoclass:: sqlalchemy.orm.QueryEvents
   :members:

----------------------------------------

TITLE: Redirecting to SQLAlchemy Query Guide in reStructuredText
DESCRIPTION: This snippet uses reStructuredText syntax to create a document-level redirection to the updated location of the SQLAlchemy query guide. It includes an orphan directive to prevent the document from being included in the table of contents.

LANGUAGE: reStructuredText
CODE:
:orphan:

This document has moved to :doc:`queryguide/query`

----------------------------------------

TITLE: Using type expressions in SQLAlchemy Core
DESCRIPTION: Example of defining a custom type with bind_expression and column_expression to apply SQL functions to values on the way in and out of the database.

LANGUAGE: python
CODE:
from sqlalchemy.types import String
from sqlalchemy import func, Table, Column, MetaData


class LowerString(String):
    def bind_expression(self, bindvalue):
        return func.lower(bindvalue)

    def column_expression(self, col):
        return func.lower(col)


metadata = MetaData()
test_table = Table("test_table", metadata, Column("data", LowerString))

----------------------------------------

TITLE: Installing SQLAlchemy Manually from Source
DESCRIPTION: This command demonstrates how to install SQLAlchemy manually using the setup.py script from the source distribution.

LANGUAGE: text
CODE:
python setup.py install

----------------------------------------

TITLE: Importing InstrumentationEvents Class in SQLAlchemy ORM
DESCRIPTION: This snippet demonstrates the import of the InstrumentationEvents class from SQLAlchemy ORM. InstrumentationEvents offer hooks for low-level instrumentation operations in the ORM.

LANGUAGE: python
CODE:
.. autoclass:: sqlalchemy.orm.InstrumentationEvents
   :members:

----------------------------------------

TITLE: Disabling Connection Pooling
DESCRIPTION: Shows how to disable connection pooling by using the NullPool implementation.

LANGUAGE: python
CODE:
from sqlalchemy.pool import NullPool

engine = create_engine(
    "postgresql+psycopg2://scott:tiger@localhost/test", poolclass=NullPool
)

----------------------------------------

TITLE: Using the new HSTORE type for PostgreSQL in Python
DESCRIPTION: Example of using the new HSTORE type for PostgreSQL, which provides support for key-value pair storage and operations.

LANGUAGE: python
CODE:
from sqlalchemy.dialects.postgresql import HSTORE

data = Table(
    "data_table",
    metadata,
    Column("id", Integer, primary_key=True),
    Column("hstore_data", HSTORE),
)

engine.execute(select([data.c.hstore_data["some_key"]])).scalar()

engine.execute(select([data.c.hstore_data.matrix()])).scalar()

----------------------------------------

TITLE: Defining Development Dependencies for SQLAlchemy Documentation
DESCRIPTION: Lists required Python packages for building SQLAlchemy documentation, including custom Sphinx extensions hosted on GitHub and PyPI packages. The dependencies include changelog management, parameter linking, custom Sphinx theme, and documentation utilities.

LANGUAGE: plaintext
CODE:
git+https://github.com/sqlalchemyorg/changelog.git#egg=changelog
git+https://github.com/sqlalchemyorg/sphinx-paramlinks.git#egg=sphinx-paramlinks
git+https://github.com/sqlalchemyorg/zzzeeksphinx.git#egg=zzzeeksphinx
sphinx-copybutton==0.5.1
sphinx-autobuild
typing-extensions

----------------------------------------

TITLE: MySQL Table Creation with Index
DESCRIPTION: Example of MySQL-specific table creation with an index using prefix parameter

LANGUAGE: sql
CODE:
CREATE TABLE t (
    col VARCHAR(255),
    FULLTEXT INDEX idx_col (col)
)

----------------------------------------

TITLE: SQLAlchemy 0.1.x Changelog Format
DESCRIPTION: Example of changelog entry format using reStructuredText markup for documenting SQLAlchemy version changes.

LANGUAGE: reStructuredText
CODE:
.. changelog::
    :version: 0.1.7
    :released: Fri May 05 2006

    .. change::
        :tags: 
        :tickets: 

      some fixes to topological sort algorithm

----------------------------------------

TITLE: Configuring SQLite DATE and TIME types in Python
DESCRIPTION: Examples of configuring SQLite DATE and TIME types with custom storage formats and regular expressions for parsing.

LANGUAGE: python
CODE:
Column("sometimestamp", sqlite.DATETIME(truncate_microseconds=True))
Column(
    "sometimestamp",
    sqlite.DATETIME(
        storage_format=(
            "%(year)04d%(month)02d%(day)02d"
            "%(hour)02d%(minute)02d%(second)02d%(microsecond)06d"
        ),
        regexp="(\d{4})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})(\d{6})",
    ),
)
Column(
    "somedate",
    sqlite.DATE(
        storage_format="%(month)02d/%(day)02d/%(year)04d",
        regexp="(?P<month>\d+)/(?P<day>\d+)/(?P<year>\d+)",
    ),
)

----------------------------------------

TITLE: Initializing SQLAlchemy ORM Models and Sample Data
DESCRIPTION: Defines SQLAlchemy ORM models for User and Book entities with relationships, creates an in-memory SQLite database, and populates it with sample data. The models include typed column definitions using Python type hints and SQLAlchemy's Mapped types.

LANGUAGE: python
CODE:
>>> from typing import List
>>> from typing import Optional
>>>
>>> from sqlalchemy import Column
>>> from sqlalchemy import create_engine
>>> from sqlalchemy import ForeignKey
>>> from sqlalchemy import LargeBinary
>>> from sqlalchemy import Table
>>> from sqlalchemy import Text
>>> from sqlalchemy.orm import DeclarativeBase
>>> from sqlalchemy.orm import Mapped
>>> from sqlalchemy.orm import mapped_column
>>> from sqlalchemy.orm import relationship
>>> from sqlalchemy.orm import Session
>>>
>>>
>>> class Base(DeclarativeBase):
...     pass
>>> class User(Base):
...     __tablename__ = "user_account"
...     id: Mapped[int] = mapped_column(primary_key=True)
...     name: Mapped[str]
...     fullname: Mapped[Optional[str]]
...     books: Mapped[List["Book"]] = relationship(back_populates="owner")
...
...     def __repr__(self) -> str:
...         return f"User(id={self.id!r}, name={self.name!r}, fullname={self.fullname!r})"
>>> class Book(Base):
...     __tablename__ = "book"
...     id: Mapped[int] = mapped_column(primary_key=True)
...     owner_id: Mapped[int] = mapped_column(ForeignKey("user_account.id"))
...     title: Mapped[str]
...     summary: Mapped[str] = mapped_column(Text)
...     cover_photo: Mapped[bytes] = mapped_column(LargeBinary)
...     owner: Mapped["User"] = relationship(back_populates="books")
...
...     def __repr__(self) -> str:
...         return f"Book(id={self.id!r}, title={self.title!r})"
>>> engine = create_engine("sqlite+pysqlite:///:memory:", echo=True)
>>> Base.metadata.create_all(engine)
BEGIN ...
>>> conn = engine.connect()
>>> session = Session(conn)
>>> session.add_all(
...     [
...         User(
...             name="spongebob",
...             fullname="Spongebob Squarepants",
...             books=[
...                 Book(
...                     title="100 Years of Krabby Patties",
...                     summary="some long summary",
...                     cover_photo=b"binary_image_data",
...                 ),
...                 Book(
...                     title="Sea Catch 22",
...                     summary="another long summary",
...                     cover_photo=b"binary_image_data",
...                 ),
...                 Book(
...                     title="The Sea Grapes of Wrath",
...                     summary="yet another summary",
...                     cover_photo=b"binary_image_data",
...                 ),
...             ],
...         ),
...         User(
...             name="sandy",
...             fullname="Sandy Cheeks",
...             books=[
...                 Book(
...                     title="A Nut Like No Other",
...                     summary="some long summary",
...                     cover_photo=b"binary_image_data",
...                 ),
...                 Book(
...                     title="Geodesic Domes: A Retrospective",
...                     summary="another long summary",
...                     cover_photo=b"binary_image_data",
...                 ),
...                 Book(
...                     title="Rocketry for Squirrels",
...                     summary="yet another summary",
...                     cover_photo=b"binary_image_data",
...                 ),
...             ],
...         ),
...     ]
... )
>>> session.commit()
BEGIN ... COMMIT
>>> session.close()
>>> conn.begin()
BEGIN ...

----------------------------------------

TITLE: PostgreSQL ON CONFLICT Syntax
DESCRIPTION: Example of PostgreSQL's INSERT ... ON CONFLICT DO UPDATE syntax usage

LANGUAGE: sql
CODE:
INSERT INTO table (col) VALUES (val)
ON CONFLICT (col) DO UPDATE
  SET col = EXCLUDED.col

----------------------------------------

TITLE: Implementing Native UUID Support for MariaDB in SQLAlchemy
DESCRIPTION: Change implementation that enables native UUID datatype support in MariaDB dialect for versions >= 10.7 when using SQLAlchemy's sqltypes.Uuid with default native_uuid=True parameter. The change affects DDL rendering and database communication, replacing the previous CHAR(32) implementation with the native UUID type.

LANGUAGE: sql
CODE:
UUID        -- New native datatype for MariaDB >= 10.7
CHAR(32)    -- Previous implementation

----------------------------------------

TITLE: Updating SQLAlchemy relationship.secondary Parameter Usage
DESCRIPTION: Describes the removal of eval() for processing relationship.secondary string parameters. String values should now directly reference table names in the local MetaData collection. For deferred resolution, lambda functions should be used instead.

LANGUAGE: python
CODE:
# Old approach (no longer supported):
relationship('ModelName', secondary='some_python_expression')

# New approach:
relationship('ModelName', secondary='table_name')  # direct table reference
# Or using lambda for deferred resolution:
relationship('ModelName', secondary=lambda: some_table)

----------------------------------------

TITLE: RST Documentation for SQLAlchemy Indexable Extension
DESCRIPTION: ReStructuredText documentation defining the structure and API reference for SQLAlchemy's indexable extension, including a reference anchor and automodule/autoclass directives.

LANGUAGE: rst
CODE:
.. _indexable_toplevel:

Indexable
=========

.. automodule:: sqlalchemy.ext.indexable

API Reference
-------------

.. autoclass:: sqlalchemy.ext.indexable.index_property
    :members:

----------------------------------------

TITLE: Configuring SQLAlchemy Logging
DESCRIPTION: SQLAlchemy 0.3.0 switched to using the standard Python logging module. Logging can be configured using the Python API.

LANGUAGE: python
CODE:
import logging

logging.getLogger('sqlalchemy').setLevel(logging.INFO)

----------------------------------------

TITLE: Importing SQLAlchemy Column Element Functions
DESCRIPTION: Example of importing foundational constructor functions from the SQLAlchemy namespace for building Expression Language constructs.

LANGUAGE: python
CODE:
from sqlalchemy import and_, bindparam, bitwise_not, case, cast, column, distinct, extract, false, func, lambda_stmt, literal, literal_column, not_, null, or_, outparam, text, true, try_cast, tuple_, type_coerce

----------------------------------------

TITLE: Modifying JSON Type's python_type Behavior in SQLAlchemy
DESCRIPTION: The python_type of the JSON class no longer returns 'dict'. Instead, it now uses the generic implementation, likely returning 'object' as per the new default behavior.

LANGUAGE: python
CODE:
JSON.python_type = TypeEngine.python_type

----------------------------------------

TITLE: Configuring RST Variables and Topic Blocks for SQLAlchemy Documentation
DESCRIPTION: ReStructuredText configuration showing variable substitutions and topic blocks for the ORM Querying Guide documentation. Includes navigation references and page title definitions.

LANGUAGE: rst
CODE:
.. note *_include.rst is a naming convention in conf.py

.. |tutorial_title| replace:: ORM Querying Guide

.. topic:: |tutorial_title|

      This page is part of the :doc:`index`.

      Previous: |prev|   |   Next: |next|

.. footer_topic:: |tutorial_title|

      Next Query Guide Section: |next|

----------------------------------------

TITLE: Updating TypeEngine.python_type Default Implementation in SQLAlchemy
DESCRIPTION: The default implementation of TypeEngine.python_type now returns 'object' instead of raising NotImplementedError. This change reflects that 'object' is the base for all types in Python 3.

LANGUAGE: python
CODE:
TypeEngine.python_type = object

----------------------------------------

TITLE: Mapping Composite Columns with DeclarativeBase
DESCRIPTION: Shows how to map composite columns using SQLAlchemy's DeclarativeBase with mapped_column and composite decorators.

LANGUAGE: python
CODE:
class Vertex(Base):
    __tablename__ = "vertices"

    id: Mapped[int] = mapped_column(primary_key=True)

    start: Mapped[Point] = composite(mapped_column("x1"), mapped_column("y1"))
    end: Mapped[Point] = composite(mapped_column("x2"), mapped_column("y2"))

    def __repr__(self):
        return f"Vertex(start={self.start}, end={self.end})"

----------------------------------------

TITLE: Adding driver_column_names Execution Option in SQLAlchemy
DESCRIPTION: Introduces the 'driver_column_names' execution option for SQLAlchemy's Connection class. This option disables the name normalization step for cursor.description, allowing exact column names from the DBAPI to be used in result sets. It's particularly useful for uppercase-default backends like Oracle and for plain textual SQL statements.

LANGUAGE: text
CODE:
:paramref:`_engine.Connection.execution_options.driver_column_names`

----------------------------------------

TITLE: Redirecting to SQLAlchemy Query Guide for Columns using reStructuredText
DESCRIPTION: This snippet uses reStructuredText syntax to create a document link that redirects users to the updated location of the SQLAlchemy query guide for columns. The ':orphan:' directive is used to suppress warnings about the document not being included in any toctree.

LANGUAGE: reStructuredText
CODE:
:orphan:

This document has moved to :doc:`queryguide/columns`

----------------------------------------

TITLE: Using MySQL LIMIT with SQLAlchemy UPDATE and DELETE
DESCRIPTION: Demonstrates the new _mysql.limit() function which can be applied to SQLAlchemy UPDATE and DELETE operations to add a LIMIT clause. This replaces the previous 'mysql_limit' dialect keyword argument.

LANGUAGE: python
CODE:
_mysql.limit(_sql.update())
_mysql.limit(_sql.delete())

----------------------------------------

TITLE: Importing SQLAlchemy Compiler Extension Module
DESCRIPTION: Automodule directive for importing and documenting the sqlalchemy.ext.compiler module. This module likely contains utilities for custom SQL compilation in SQLAlchemy.

LANGUAGE: restructuredtext
CODE:
.. automodule:: sqlalchemy.ext.compiler
    :members:

----------------------------------------

TITLE: Deprecating noload Relationship Loader Option in SQLAlchemy ORM
DESCRIPTION: The :func:`_orm.noload` relationship loader option and the `lazy='noload'` setting are being deprecated in SQLAlchemy ORM. These options were originally intended for custom loader patterns that are no longer applicable in modern SQLAlchemy versions.

LANGUAGE: text
CODE:
:func:`_orm.noload`

LANGUAGE: text
CODE:
lazy='noload'

----------------------------------------

TITLE: Creating RST Changelog Entry for SQLAlchemy
DESCRIPTION: Example of a properly formatted changelog entry using reStructuredText format. Demonstrates the use of tags, ticket references, and proper Sphinx markup for method, parameter, and class references.

LANGUAGE: restructuredtext
CODE:
.. change::
    :tags: bug, sql, orm
    :tickets: 4839, 3257

    Please use reStructuredText and Sphinx markup when possible.  For example
    method :meth:`.Index.create` and parameter
    :paramref:`.Index.create.checkfirst`, and :class:`.Table` which will
    subject to the relevant markup.  Also please note the indentions required
    for the text.

----------------------------------------

TITLE: Configuring Engine with Pool Size and Max Overflow
DESCRIPTION: Example of creating an SQLAlchemy Engine with specific pool size and max overflow settings.

LANGUAGE: python
CODE:
engine = create_engine("mysql+mysqldb://u:p@host/db", pool_size=10, max_overflow=20)

----------------------------------------

TITLE: Using with_expression for dynamic SQL expressions
DESCRIPTION: Example demonstrating how to load dynamic SQL expressions onto mapped objects using with_expression()

LANGUAGE: python
CODE:
>>> from sqlalchemy.orm import with_expression, query_expression
>>> class User(Base):
...     __tablename__ = "user_account"
...     id: Mapped[int] = mapped_column(primary_key=True)
...     name: Mapped[str]
...     book_count: Mapped[int] = query_expression()

>>> stmt = select(User).options(
...     with_expression(User.book_count, func.count(Book.id))
... )

----------------------------------------

TITLE: SQLAlchemy Frame Clause Method Change
DESCRIPTION: Describes the replacement of _format_frame_clause() method with visit_frame_clause() for handling SQL frame clause compilation in custom dialects. The change improves caching of OVER clause parameters for rows/range values to prevent cache saturation with numerically different but structurally identical queries.

LANGUAGE: python
CODE:
# Previous implementation (removed)
_format_frame_clause()

# New implementation
visit_frame_clause()

----------------------------------------

TITLE: Defining Changelog Version in reStructuredText
DESCRIPTION: This snippet shows how to define a changelog entry for a specific version in reStructuredText. It sets up the changelog for version 2.1.0b1 and includes notes from the unreleased 2.1 version.

LANGUAGE: rst
CODE:
.. changelog::
    :version: 2.1.0b1
    :include_notes_from: unreleased_21

----------------------------------------

TITLE: Checking Installed SQLAlchemy Version in Python
DESCRIPTION: This snippet demonstrates how to check the installed version of SQLAlchemy using Python's interactive prompt. It imports the sqlalchemy module and prints the version number.

LANGUAGE: python
CODE:
>>> import sqlalchemy
>>> sqlalchemy.__version__  # doctest: +SKIP
2.1.0

----------------------------------------

TITLE: Using RETURNING Clause in SQLAlchemy 0.6
DESCRIPTION: Demonstrates the new RETURNING support in SQLAlchemy 0.6 for insert, update, and delete operations on supported databases.

LANGUAGE: python
CODE:
result = connection.execute(
    table.insert().values(data="some data").returning(table.c.id, table.c.timestamp)
)
row = result.first()
print("ID:", row["id"], "Timestamp:", row["timestamp"])

----------------------------------------

TITLE: Using with_polymorphic() in SQLAlchemy ORM
DESCRIPTION: Enhancement to the with_polymorphic() function that changes how it handles single inheritance mappings. The base class specified now determines the basemost class loaded, including all descendant classes, matching joined inheritance behavior. The change also enables loading column-level results from multiple sibling classes simultaneously.

LANGUAGE: python
CODE:
_orm.with_polymorphic()

----------------------------------------

TITLE: RST Documentation Structure for SQLAlchemy Changes
DESCRIPTION: ReStructuredText markup defining the documentation structure for SQLAlchemy's changelog and migration guides. Includes toctree directives for organizing migration guides and changelogs from version 0.1 through 2.1.

LANGUAGE: rst
CODE:
.. _changelog_toplevel:

Changes and Migration
=====================

.. toctree::
   :titlesonly:

   migration_21

.. toctree::
   :titlesonly:

   changelog_21
   changelog_20
   changelog_14
   changelog_13
   changelog_12
   changelog_11
   changelog_10
   changelog_09
   changelog_08
   changelog_07
   changelog_06
   changelog_05
   changelog_04
   changelog_03
   changelog_02
   changelog_01

.. toctree::
   :titlesonly:

   migration_20
   whatsnew_20
   migration_14
   migration_13
   migration_12
   migration_11
   migration_10
   migration_09
   migration_08
   migration_07
   migration_06
   migration_05
   migration_04

----------------------------------------

TITLE: Installing SQLAlchemy Prerelease via pip
DESCRIPTION: This command demonstrates how to install the latest prerelease version of SQLAlchemy using pip with the --pre flag.

LANGUAGE: text
CODE:
pip install --pre sqlalchemy

----------------------------------------

TITLE: Using SQLAlchemy Column Element Modifier Functions
DESCRIPTION: Example of using modifier functions that are commonly available as methods on ColumnElement constructs.

LANGUAGE: python
CODE:
from sqlalchemy import all_, any_, asc, between, collate, desc, funcfilter, label, nulls_first, nulls_last, over, within_group

----------------------------------------

TITLE: Defining TOC Structure in Sphinx RST
DESCRIPTION: Sphinx reStructuredText directive that defines the documentation's table of contents structure. Uses toctree directive with titlesonly and includehidden options to organize major documentation sections.

LANGUAGE: rst
CODE:
.. toctree::
   :titlesonly:
   :includehidden:

   intro
   tutorial/index
   orm/index
   core/index
   dialects/index
   faq/index
   errors
   changelog/index

----------------------------------------

TITLE: Importing SessionEvents Class in SQLAlchemy ORM
DESCRIPTION: This snippet shows the import statement for the SessionEvents class from SQLAlchemy ORM. SessionEvents provide hooks for various session-level operations like persistence, object lifecycle, and execution events.

LANGUAGE: python
CODE:
.. autoclass:: sqlalchemy.orm.SessionEvents
   :members:

----------------------------------------

TITLE: Defining RST Documentation Structure for SQLAlchemy Core API
DESCRIPTION: ReStructuredText table of contents directive defining the structure of SQLAlchemy's Core API documentation sections.

LANGUAGE: rst
CODE:
===============
Core API Basics
===============

.. toctree::
    :maxdepth: 2

    event
    inspection
    exceptions
    internals

----------------------------------------

TITLE: Configuring Raiseload Strategy in SQLAlchemy ORM
DESCRIPTION: Shows how to configure the raiseload strategy to prevent lazy loading and potential N+1 query issues.

LANGUAGE: python
CODE:
class User(Base):
    __tablename__ = "user_account"
    id: Mapped[int] = mapped_column(primary_key=True)
    addresses: Mapped[List["Address"]] = relationship(
        back_populates="user", lazy="raise_on_sql"
    )

class Address(Base):
    __tablename__ = "address"
    id: Mapped[int] = mapped_column(primary_key=True)
    user_id: Mapped[int] = mapped_column(ForeignKey("user_account.id"))
    user: Mapped["User"] = relationship(back_populates="addresses", lazy="raise_on_sql")

----------------------------------------

TITLE: Configuring Relationships with Back-populates
DESCRIPTION: Example of setting up SQLAlchemy ORM relationships using back_populates to avoid cascade backref warnings.

LANGUAGE: python
CODE:
class Parent(Base):
    __tablename__ = "parent"
    id = Column(Integer, primary_key=True)
    children = relationship("Child", back_populates="parent")

class Child(Base):
    __tablename__ = "child"
    id = Column(Integer, primary_key=True)
    parent_id = Column(ForeignKey("parent.id"))
    parent = relationship("Parent", back_populates="children")

----------------------------------------

TITLE: Hybrid Table Mapping with Declarative in SQLAlchemy
DESCRIPTION: This example shows how to use hybrid table style mapping with declarative, where the Table object is defined separately from the mapped class.

LANGUAGE: python
CODE:
from sqlalchemy import Column, ForeignKey, Integer, String, Table, Text
from sqlalchemy.orm import column_property
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import deferred
from sqlalchemy.orm import relationship


class Base(DeclarativeBase):
    pass


class User(Base):
    __table__ = Table(
        "user",
        Base.metadata,
        Column("id", Integer, primary_key=True),
        Column("name", String),
        Column("firstname", String(50)),
        Column("lastname", String(50)),
    )

    fullname = column_property(__table__.c.firstname + " " + __table__.c.lastname)

    addresses = relationship("Address", back_populates="user")


class Address(Base):
    __table__ = Table(
        "address",
        Base.metadata,
        Column("id", Integer, primary_key=True),
        Column("user_id", ForeignKey("user.id")),
        Column("email_address", String),
        Column("address_statistics", Text),
    )

    address_statistics = deferred(__table__.c.address_statistics)

    user = relationship("User", back_populates="addresses")

----------------------------------------

TITLE: RST Documentation Structure for SQLAlchemy Instrumentation
DESCRIPTION: ReStructuredText markup defining the documentation structure for SQLAlchemy's instrumentation module, including section headers and autodoc directives for various components.

LANGUAGE: rst
CODE:
.. _instrumentation_toplevel:

Alternate Class Instrumentation
===============================

.. automodule:: sqlalchemy.ext.instrumentation

API Reference
-------------

.. autodata:: INSTRUMENTATION_MANAGER

.. autoclass:: sqlalchemy.orm.instrumentation.InstrumentationFactory

.. autoclass:: InstrumentationManager
    :members:
    :undoc-members:

.. autodata:: instrumentation_finders

.. autoclass:: ExtendedInstrumentationRegistry
    :members:

----------------------------------------

TITLE: Using Identity Token with Schema Translation in SQLAlchemy ORM
DESCRIPTION: Example demonstrating how to use identity tokens to handle objects with same primary keys from different schemas or shards.

LANGUAGE: python
CODE:
with Session(engine) as sess:
    obj1 = sess.scalar(
        select(MyTable)
        .where(MyTable.id == 1)
        .execution_options(
            schema_translate_map={None: "test_schema"},
            identity_token="test_schema",
        )
    )
    obj2 = sess.scalar(
        select(MyTable)
        .where(MyTable.id == 1)
        .execution_options(
            schema_translate_map={None: "test_schema_2"},
            identity_token="test_schema_2", 
        )
    )

----------------------------------------

TITLE: Resolving numpy Datatype Issues in SQLAlchemy Queries
DESCRIPTION: This code snippet demonstrates how to resolve issues with numpy datatypes by converting them to standard Python types before using them in SQLAlchemy operations.

LANGUAGE: python
CODE:
data = numpy.int64(10)

session.add(A(data=int(data)))

result = session.execute(select(A.data).where(int(data) == A.data))

session.commit()

----------------------------------------

TITLE: Defining RST Table of Contents for SQLAlchemy FAQ
DESCRIPTION: ReStructuredText markup defining the table of contents structure for SQLAlchemy's FAQ documentation, including section references and depth settings.

LANGUAGE: rst
CODE:
.. _faq_toplevel:

==========================
Frequently Asked Questions
==========================

.. toctree::
    :maxdepth: 2

    installation
    connections
    metadata_schema
    sqlexpressions
    ormconfiguration
    performance
    sessions
    thirdparty

----------------------------------------

TITLE: Using a Pool Instance Directly
DESCRIPTION: Shows how to use a connection pool directly without an SQLAlchemy Engine.

LANGUAGE: python
CODE:
from sqlalchemy import create_pool_from_url

my_pool = create_pool_from_url(
    "mysql+mysqldb://", max_overflow=5, pool_size=5, pre_ping=True
)

con = my_pool.connect()
# use the connection
...
# then close it
con.close()

----------------------------------------

TITLE: Rendering POSTCOMPILE Parameters in SQLAlchemy
DESCRIPTION: Shows how to render 'expanding' parameters (like those used in IN clauses) as bound parameters in SQLAlchemy.

LANGUAGE: python
CODE:
stmt = select(A).where(A.id.in_([1, 2, 3]))

e = create_engine("postgresql+psycopg2://")
print(stmt.compile(e, compile_kwargs={"render_postcompile": True}))

LANGUAGE: sql
CODE:
SELECT a.id, a.data
FROM a
WHERE a.id IN (%(id_1_1)s, %(id_1_2)s, %(id_1_3)s)

----------------------------------------

TITLE: Dialect Testing Configuration in setup.cfg
DESCRIPTION: Configuration file setup for pytest and SQLAlchemy testing framework with dialect-specific settings.

LANGUAGE: text
CODE:
[tool:pytest]
addopts= --tb native -v -r fxX --maxfail=25 -p no:warnings
python_files=test/*test_*.py

[sqla_testing]
requirement_cls=sqlalchemy_access.requirements:Requirements
profile_file=test/profiles.txt

[db]
default=access+pyodbc://admin@access_test
sqlite=sqlite:///:memory:

----------------------------------------

TITLE: Using the cache implementation
DESCRIPTION: Example of how to use the caching mechanism implemented with the do_orm_execute event.

LANGUAGE: python
CODE:
stmt = (
    select(User).where(User.name == "sandy").execution_options(my_cache_key="key_sandy")
)

result = session.execute(stmt)

----------------------------------------

TITLE: Installing SQLAlchemy via pip
DESCRIPTION: This command shows how to install the latest released version of SQLAlchemy using pip. It downloads the package from PyPI and installs it on the system.

LANGUAGE: text
CODE:
pip install sqlalchemy

----------------------------------------

TITLE: Implementing Dialect Requirements Class
DESCRIPTION: Example implementation of a Requirements class for specifying dialect capabilities and test exclusions.

LANGUAGE: python
CODE:
from sqlalchemy.testing.requirements import SuiteRequirements
from sqlalchemy.testing import exclusions

class Requirements(SuiteRequirements):
    @property
    def nullable_booleans(self):
        """Target database allows boolean columns to store NULL."""
        # Access Yes/No doesn't allow null
        return exclusions.closed()

    @property
    def returning(self):
        return exclusions.open()

----------------------------------------

TITLE: Reflecting Tables from Other Schemas in SQLAlchemy
DESCRIPTION: Explains how to reflect tables from specific database schemas, including setting default schemas and handling schema-qualified table names.

LANGUAGE: python
CODE:
>>> metadata_obj = MetaData(schema="project")
>>> metadata_obj.reflect(someengine)
>>> metadata_obj.tables["project.messages"]
Table('messages', MetaData(), Column('message_id', INTEGER(), table=<messages>), schema='project')

>>> messages = Table("messages", metadata_obj, schema="project", autoload_with=someengine)
>>> messages
Table('messages', MetaData(), Column('message_id', INTEGER(), table=<messages>), schema='project')

----------------------------------------

TITLE: Building SQLAlchemy Cython Extensions
DESCRIPTION: This series of commands shows how to manually build SQLAlchemy's Cython extensions, including installing Cython, building the extensions, and running the installation.

LANGUAGE: text
CODE:
# cd into SQLAlchemy source distribution
cd path/to/sqlalchemy

# install cython
pip install cython

# optionally build Cython extensions ahead of install
python setup.py build_ext

# run the install
python setup.py install

----------------------------------------

TITLE: Implementing Basic Dialect Test Suite
DESCRIPTION: Basic test suite implementation that imports SQLAlchemy's standard test suite with optional customizations.

LANGUAGE: python
CODE:
from sqlalchemy.testing.suite import *

from sqlalchemy.testing.suite import IntegerTest as _IntegerTest

class IntegerTest(_IntegerTest):
    @testing.skip("access")
    def test_huge_int(self):
        # bypass this test because Access ODBC fails with
        # [ODBC Microsoft Access Driver] Optional feature not implemented.
        return

----------------------------------------

TITLE: PostgreSQL Database Setup
DESCRIPTION: SQL commands for setting up PostgreSQL database with required extensions and configurations

LANGUAGE: sql
CODE:
create database test with owner=scott encoding='utf8' template=template0;
create extension hstore;
create extension citext;
ALTER DATABASE test SET default_text_search_config = 'pg_catalog.english'

----------------------------------------

TITLE: Building SQLAlchemy Using PEP 517
DESCRIPTION: This set of commands demonstrates how to build SQLAlchemy using PEP 517 techniques with the 'build' tool, including installing the build tool and creating source/wheel distributions.

LANGUAGE: text
CODE:
# cd into SQLAlchemy source distribution
cd path/to/sqlalchemy

# install build
pip install build

# build source / wheel dists
python -m build

----------------------------------------

TITLE: Advanced Tox Database Testing
DESCRIPTION: Commands for running tests against specific Python versions and database combinations

LANGUAGE: bash
CODE:
tox -e py311-sqlite
tox -e py311-sqlite-postgresql
tox -e py311-mysql-backendonly

----------------------------------------

TITLE: Filtering on Subclass Attributes with with_polymorphic()
DESCRIPTION: Demonstrates how to filter on subclass-specific attributes using with_polymorphic().

LANGUAGE: python
CODE:
from sqlalchemy import or_
employee_poly = with_polymorphic(Employee, [Engineer, Manager])
stmt = (
    select(employee_poly)
    .where(
        or_(
            employee_poly.Manager.manager_name == "Eugene H. Krabs",
            employee_poly.Engineer.engineer_info == "Senior Customer Engagement Engineer",
        )
    )
    .order_by(employee_poly.id)
)
objects = session.scalars(stmt).all()

----------------------------------------

TITLE: Importing SQLAlchemy ORM Exceptions Module
DESCRIPTION: This code snippet demonstrates how to import and document the SQLAlchemy ORM exceptions module using Sphinx autodoc directives.

LANGUAGE: python
CODE:
.. automodule:: sqlalchemy.orm.exc
    :members:

----------------------------------------

TITLE: Context-Sensitive Default Function
DESCRIPTION: Example showing how to access statement context in a default value function to compute values based on other columns.

LANGUAGE: python
CODE:
def mydefault(context):
    return context.get_current_parameters()["counter"] + 12

t = Table(
    "mytable",
    metadata_obj,
    Column("counter", Integer),
    Column("counter_plus_twelve", Integer, default=mydefault, onupdate=mydefault),
)

----------------------------------------

TITLE: Importing MapperEvents Class in SQLAlchemy ORM
DESCRIPTION: This snippet demonstrates the import of the MapperEvents class from SQLAlchemy ORM. MapperEvents offer hooks for mapper-level operations, including per-object persistence and mapper configuration events.

LANGUAGE: python
CODE:
.. autoclass:: sqlalchemy.orm.MapperEvents
   :members:

----------------------------------------

TITLE: Using Implicit Method Access with Scoped Session in SQLAlchemy
DESCRIPTION: Shows how the scoped_session object can be used directly as a proxy for the underlying Session, allowing method calls to be made on it directly.

LANGUAGE: python
CODE:
Session = scoped_session(some_factory)

# equivalent to:
#
# session = Session()
# print(session.scalars(select(MyClass)).all())
#
print(Session.scalars(select(MyClass)).all())

----------------------------------------

TITLE: Importing SQLAlchemy Automap Extension in Python
DESCRIPTION: This snippet shows how to import the automap module from SQLAlchemy's extensions. The automap extension is used for automatically generating ORM classes from existing database tables.

LANGUAGE: Python
CODE:
from sqlalchemy.ext.automap import automap_base

----------------------------------------

TITLE: Out Parameters for Oracle in SQLAlchemy 0.4
DESCRIPTION: Shows how to use out parameters with Oracle in SQLAlchemy 0.4.

LANGUAGE: python
CODE:
result = engine.execute(
    text(
        "begin foo(:x, :y, :z); end;",
        bindparams=[
            bindparam("x", Numeric),
            outparam("y", Numeric),
            outparam("z", Numeric),
        ],
    ),
    x=5,
)
assert result.out_parameters == {"y": 10, "z": 75}

----------------------------------------

TITLE: Using Subqueries with Baked Queries in Python
DESCRIPTION: Demonstrates how to use the to_query() method to retrieve a Query object from a baked query for use in subqueries.

LANGUAGE: python
CODE:
bakery = baked.bakery()

# a baked query that will end up being used as a subquery
my_subq = bakery(lambda s: s.query(User.id))
my_subq += lambda q: q.filter(User.id == Address.user_id)

# select a correlated subquery in the top columns list,
# we have the "session" argument, pass that
my_q = bakery(lambda s: s.query(Address.id, my_subq.to_query(s).as_scalar()))

# use a correlated subquery in some of the criteria, we have
# the "query" argument, pass that.
my_q += lambda q: q.filter(my_subq.to_query(q).exists())

----------------------------------------

TITLE: Direct DBAPI Connection Access
DESCRIPTION: Example showing how to access the raw DBAPI connection and execute stored procedures

LANGUAGE: python
CODE:
connection = engine.raw_connection()
try:
    cursor_obj = connection.cursor()
    cursor_obj.callproc("my_procedure", ["x", "y", "z"])
    results = list(cursor_obj.fetchall())
    cursor_obj.close()
    connection.commit()
finally:
    connection.close()

----------------------------------------

TITLE: Redirecting to SQLAlchemy Query Guide Inheritance Documentation
DESCRIPTION: This snippet uses reStructuredText syntax to create a document-level redirect to the 'inheritance' section of the SQLAlchemy query guide. The ':orphan:' directive indicates that this document should not be included in the table of contents.

LANGUAGE: reStructuredText
CODE:
:orphan:

This document has moved to :doc:`queryguide/inheritance`

----------------------------------------

TITLE: Configuring Mapper Options with Declarative in SQLAlchemy
DESCRIPTION: These examples demonstrate how to set various mapper options using the __mapper_args__ declarative class variable.

LANGUAGE: python
CODE:
class GroupUsers(Base):
    __tablename__ = "group_users"

    user_id = mapped_column(String(40))
    group_id = mapped_column(String(40))

    __mapper_args__ = {"primary_key": [user_id, group_id]}

LANGUAGE: python
CODE:
from datetime import datetime


class Widget(Base):
    __tablename__ = "widgets"

    id = mapped_column(Integer, primary_key=True)
    timestamp = mapped_column(DateTime, nullable=False)

    __mapper_args__ = {
        "version_id_col": timestamp,
        "version_id_generator": lambda v: datetime.now(),
    }

LANGUAGE: python
CODE:
class Person(Base):
    __tablename__ = "person"

    person_id = mapped_column(Integer, primary_key=True)
    type = mapped_column(String, nullable=False)

    __mapper_args__ = dict(
        polymorphic_on=type,
        polymorphic_identity="person",
    )


class Employee(Person):
    __mapper_args__ = dict(
        polymorphic_identity="employee",
    )

----------------------------------------

TITLE: Imperative Mapping with SQLAlchemy
DESCRIPTION: Example demonstrating imperative (classical) mapping using registry.map_imperatively() with explicitly defined Table objects.

LANGUAGE: python
CODE:
from sqlalchemy import Table, Column, Integer, String, ForeignKey
from sqlalchemy.orm import registry

mapper_registry = registry()

user_table = Table(
    "user",
    mapper_registry.metadata,
    Column("id", Integer, primary_key=True),
    Column("name", String(50)),
    Column("fullname", String(50)),
    Column("nickname", String(12)),
)

class User:
    pass

mapper_registry.map_imperatively(User, user_table)

----------------------------------------

TITLE: Property-Based Expression Constructs in SQLAlchemy 0.4
DESCRIPTION: Shows examples of new property-based expression constructs for querying in SQLAlchemy 0.4, which allow direct use of class attributes in queries.

LANGUAGE: python
CODE:
session.query(User).filter(and_(User.name == "fred", User.id > 17))

# comparison of scalar relations to an instance
filter(Address.user == user)

# return all users who contain a particular address
filter(User.addresses.contains(address))

# return all users who *dont* contain the address
filter(~User.address.contains(address))

# return all users who contain a particular address with
# the email_address like '%foo%'
filter(User.addresses.any(Address.email_address.like("%foo%")))

# same, email address equals 'foo@bar.com'.  can fall back to keyword
# args for simple comparisons
filter(User.addresses.any(email_address="foo@bar.com"))

# return all Addresses whose user attribute has the username 'ed'
filter(Address.user.has(name="ed"))

# return all Addresses whose user attribute has the username 'ed'
# and an id > 5 (mixing clauses with kwargs)
filter(Address.user.has(User.id > 5, name="ed"))

----------------------------------------

TITLE: Creating SQLAlchemy Engine and Database Tables in Python
DESCRIPTION: This snippet demonstrates how to create a SQLAlchemy engine for an in-memory SQLite database and use it to create all defined tables. It also shows how to establish a database connection and create a session for interacting with the database.

LANGUAGE: python
CODE:
engine = create_engine("sqlite://", echo=True)

Base.metadata.create_all(engine)

conn = engine.connect()
from sqlalchemy.orm import Session
session = Session(conn)

----------------------------------------

TITLE: Importing SQLAlchemy ORM Session Module
DESCRIPTION: This code snippet shows the import statement for the SQLAlchemy ORM session module. It sets the current module context for the following documentation.

LANGUAGE: python
CODE:
.. currentmodule:: sqlalchemy.orm

----------------------------------------

TITLE: Inserting Sample Data into SQLAlchemy ORM Models in Python
DESCRIPTION: This snippet shows how to insert sample data into the previously defined SQLAlchemy ORM models. It creates a Company instance with associated Manager and Engineer employees, as well as Paperwork for the manager. The data is then committed to the database using a session.

LANGUAGE: python
CODE:
session.add(
    Company(
        name="Krusty Krab",
        employees=[
            Manager(
                name="Mr. Krabs",
                manager_name="Eugene H. Krabs",
                paperwork=[
                    Paperwork(document_name="Secret Recipes"),
                    Paperwork(document_name="Krabby Patty Orders"),
                ],
            ),
            Engineer(name="SpongeBob", engineer_info="Krabby Patty Master"),
            Engineer(
                name="Squidward",
                engineer_info="Senior Customer Engagement Engineer",
            ),
        ],
    )
)
session.commit()

----------------------------------------

TITLE: Querying Manager Subclass with Joined Inheritance
DESCRIPTION: Demonstrates how to query the Manager subclass of Employee using joined inheritance. The query returns only Manager objects.

LANGUAGE: python
CODE:
from sqlalchemy import select
stmt = select(Manager).order_by(Manager.id)
managers = session.scalars(stmt).all()

----------------------------------------

TITLE: Creating PostgreSQL Table Schema Example
DESCRIPTION: Example demonstrating how to create a table schema using PostgreSQL-specific type imports. Shows the recommended pattern of importing and using dialect-specific types that match the actual database type names.

LANGUAGE: python
CODE:
from sqlalchemy.dialects.postgresql import base as pg

t = Table('mytable', metadata,
          Column('id', pg.INTEGER, primary_key=True),
          Column('name', pg.VARCHAR(300)),
          Column('inetaddr', pg.INET)
)

----------------------------------------

TITLE: Querying Manager Subclass with Joined Inheritance
DESCRIPTION: Demonstrates how to query the Manager subclass of Employee using joined inheritance. The query returns only Manager objects.

LANGUAGE: python
CODE:
from sqlalchemy import select
stmt = select(Manager).order_by(Manager.id)
managers = session.scalars(stmt).all()

----------------------------------------

TITLE: SQLAlchemy Backref with Custom Arguments
DESCRIPTION: Demonstrates how to specify custom arguments for the backref relationship using the backref() function, including setting the lazy loading strategy.

LANGUAGE: python
CODE:
from sqlalchemy.orm import backref

class User(Base):
    __tablename__ = "user"
    id = mapped_column(Integer, primary_key=True)
    name = mapped_column(String)

    addresses = relationship(
        "Address",
        backref=backref("user", lazy="joined"),
    )

----------------------------------------

TITLE: Installing SQLAlchemy Without Cython Extensions
DESCRIPTION: This command shows how to install SQLAlchemy without attempting to compile the Cython extensions by setting an environment variable before running the installation.

LANGUAGE: text
CODE:
export DISABLE_SQLALCHEMY_CEXT=1; python setup.py install

----------------------------------------

TITLE: Checking SQLAlchemy Version in Python
DESCRIPTION: Code snippet to verify the installed SQLAlchemy version, ensuring compatibility with version 2.1 for following the tutorial examples.

LANGUAGE: python
CODE:
>>> import sqlalchemy
>>> sqlalchemy.__version__  # doctest: +SKIP
2.1.0

----------------------------------------

TITLE: Setting up SQLAlchemy Engine and Session in Python
DESCRIPTION: This snippet creates an in-memory SQLite database using SQLAlchemy, creates all tables defined in the Base metadata, and sets up a session for database interactions.

LANGUAGE: python
CODE:
engine = create_engine("sqlite+pysqlite:///:memory:", echo=True)
Base.metadata.create_all(engine)
conn = engine.connect()
session = Session(conn)
conn.begin()

----------------------------------------

TITLE: Rolling Back Changes in SQLAlchemy ORM
DESCRIPTION: Demonstrates how to roll back changes made in the current transaction and expire all objects in the Session.

LANGUAGE: python
CODE:
session.rollback()

----------------------------------------

TITLE: Custom Integer Type with Operator Override
DESCRIPTION: Example showing how to create a custom Integer type that overrides the addition operator with custom SQL

LANGUAGE: python
CODE:
from sqlalchemy import Integer

class MyInt(Integer):
    class comparator_factory(Integer.Comparator):
        def __add__(self, other):
            return self.op("goofy")(other)

----------------------------------------

TITLE: Using Annotated Declarative Table with mapped_column()
DESCRIPTION: Shows how to use type annotations with mapped_column() for more explicit type declarations

LANGUAGE: python
CODE:
from typing import Optional

from sqlalchemy import String
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column


class Base(DeclarativeBase):
    pass


class User(Base):
    __tablename__ = "user"

    id: Mapped[int] = mapped_column(primary_key=True)
    name: Mapped[str] = mapped_column(String(50))
    fullname: Mapped[Optional[str]]
    nickname: Mapped[Optional[str]] = mapped_column(String(30))

----------------------------------------

TITLE: Installing SQLAlchemy with Asyncio Support via pip
DESCRIPTION: Command to install SQLAlchemy with asyncio support by explicitly including the greenlet dependency through setuptools extras. This is particularly important for platforms that don't have pre-built greenlet binary wheels, such as Apple M1.

LANGUAGE: text
CODE:
pip install sqlalchemy[asyncio]