TITLE: Using BatchWriter to Write Data to Accumulo in Java
DESCRIPTION: This snippet illustrates how to use a BatchWriter to efficiently send Mutations to Accumulo TabletServers. It shows setting up the BatchWriter with memory buffer, timeout, and thread parameters, then adding a mutation and closing the writer.

LANGUAGE: Java
CODE:
long memBuf = 1000000L; // bytes to store before sending a batch
long timeout = 1000L; // milliseconds to wait before sending
int numThreads = 10;

BatchWriter writer =
    conn.createBatchWriter("table", memBuf, timeout, numThreads)

writer.add(mutation);

writer.close();

----------------------------------------

TITLE: Initializing Accumulo Instance
DESCRIPTION: Command to initialize a new Accumulo instance. This sets up required data structures in Zookeeper and HDFS.

LANGUAGE: bash
CODE:
accumulo init

----------------------------------------

TITLE: Implementing SortedKeyValueIterator Interface in Java
DESCRIPTION: Core methods that need to be implemented when creating a custom Accumulo Iterator. Includes init, hasTop, next, seek, getTopKey, getTopValue, and deepCopy methods.

LANGUAGE: java
CODE:
void init(SortedKeyValueIterator<Key,Value> source, Map<String,String> options, IteratorEnvironment env) throws IOException;

boolean hasTop();

void next() throws IOException;

void seek(Range range, Collection<ByteSequence> columnFamilies, boolean inclusive) throws IOException;

Key getTopKey();

Value getTopValue();

SortedKeyValueIterator<Key,Value> deepCopy(IteratorEnvironment env);

----------------------------------------

TITLE: Basic Table Administration in Accumulo Shell
DESCRIPTION: Demonstrates how to list tables, create new tables, and delete tables using the Accumulo Shell. Also shows how to insert data and scan a table.

LANGUAGE: shell
CODE:
root@myinstance> tables
!METADATA

root@myinstance> createtable mytable

root@myinstance mytable>

root@myinstance mytable> tables
!METADATA
mytable

root@myinstance mytable> createtable testtable

root@myinstance testtable>

root@myinstance junk> deletetable testtable

root@myinstance>

root@myinstance mytable> scan

root@myinstance mytable> insert row1 colf colq value1
insert successful

root@myinstance mytable> scan
row1 colf:colq [] value1

----------------------------------------

TITLE: Connecting to Accumulo Instance
DESCRIPTION: Establishes connection to an Accumulo instance using ZooKeeper configuration and authentication credentials.

LANGUAGE: java
CODE:
String instanceName = "myinstance";
String zooServers = "zooserver-one,zooserver-two"
Instance inst = new ZooKeeperInstance(instanceName, zooServers);

Connector conn = inst.getConnector("user", "passwd");

----------------------------------------

TITLE: Configuring and Using BatchScanner in Java
DESCRIPTION: Java code snippet showing how to configure a BatchScanner with multiple ranges and a column family, and iterate through the results.

LANGUAGE: java
CODE:
ArrayList<Range> ranges = new ArrayList<Range>();
// populate list of ranges ...

try (BatchScanner bscan = client.createBatchScanner("table", auths, 10)) {
  bscan.setRanges(ranges);
  bscan.fetchColumnFamily("attributes");

  for (Entry<Key,Value> entry : bscan) {
    System.out.println(entry.getValue());
  }
}

----------------------------------------

TITLE: Creating a Mutation in Accumulo (Java)
DESCRIPTION: Demonstrates how to create a Mutation object in Accumulo, setting the row ID, column family, column qualifier, and value. This example shows the insertion of data for a superhero.

LANGUAGE: java
CODE:
Mutation mutation1 = new Mutation("id0001");
mutation1.put("hero","alias", "Batman");

----------------------------------------

TITLE: Starting Accumulo Service
DESCRIPTION: Command to start an Accumulo process as a background service.

LANGUAGE: bash
CODE:
accumulo-service tserver start

----------------------------------------

TITLE: Configuring Generic Crypto Service Factory in Accumulo Properties
DESCRIPTION: Sets up the GenericCryptoServiceFactory for encrypting all tables in Accumulo. This configuration is done in the accumulo.properties file.

LANGUAGE: properties
CODE:
instance.crypto.opts.factory=org.apache.accumulo.core.spi.crypto.GenericCryptoServiceFactory
general.custom.crypto.service=org.apache.accumulo.core.spi.crypto.AESCryptoService

----------------------------------------

TITLE: Adding Accumulo Core Dependency in Maven
DESCRIPTION: XML snippet for adding the accumulo-core dependency to a Maven project's pom.xml file.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>org.apache.accumulo</groupId>
  <artifactId>accumulo-core</artifactId>
  <version>{{ page.latest_release }}</version>
</dependency>

----------------------------------------

TITLE: Configuring and Using Scanner in Java
DESCRIPTION: Java code snippet demonstrating how to configure a Scanner with a range and column family, and iterate through the results.

LANGUAGE: java
CODE:
Authorizations auths = new Authorizations("public");

try (Scanner scan = client.createScanner("table", auths)) {
  scan.setRange(new Range("harry","john"));
  scan.fetchColumnFamily("attributes");

  for (Entry<Key,Value> entry : scan) {
    Text row = entry.getKey().getRow();
    Value value = entry.getValue();
  }
}

----------------------------------------

TITLE: Basic Table Operations in Accumulo
DESCRIPTION: Demonstrates creating mutations and writing data to an Accumulo table using column families and qualifiers. Shows how to insert user data with userid as the row ID.

LANGUAGE: java
CODE:
Mutation m = new Mutation(userid);
m.at().family("age").put(age);
m.at().family("address").put(address);
m.at().family("balance").put(account_balance);
writer.add(m);

----------------------------------------

TITLE: Creating BatchWriter in Java
DESCRIPTION: Java code snippet demonstrating how to create a BatchWriter object using an AccumuloClient.

LANGUAGE: java
CODE:
BatchWriter writer = client.createBatchWriter("table");

----------------------------------------

TITLE: Creating AccumuloClient with Builder Methods in Java
DESCRIPTION: Java code snippet showing how to create an AccumuloClient object using builder methods with instance, zookeeper, and authentication information.

LANGUAGE: java
CODE:
AccumuloClient client = Accumulo.newClient()
                              .to("myinstance", "zookeeper1,zookeeper2")
                              .as("myuser", "mypassword").build();

----------------------------------------

TITLE: Using BatchWriter for Data Writing
DESCRIPTION: Configures and uses BatchWriter to efficiently send mutations to TabletServers with batching support.

LANGUAGE: java
CODE:
long memBuf = 1000000L; // bytes to store before sending a batch
long timeout = 1000L; // milliseconds to wait before sending
int numThreads = 10;

BatchWriter writer =
    conn.createBatchWriter("table", memBuf, timeout, numThreads)

writer.add(mutation);

writer.close();

----------------------------------------

TITLE: Authenticating Users with Java API
DESCRIPTION: This code snippet shows how to authenticate a user named 'bob' with a password using the SecurityOperations interface in the Java API. It returns a boolean indicating if the authentication was successful.

LANGUAGE: java
CODE:
boolean valid = client.securityOperations().authenticateUser("bob", new PasswordToken("pass"));

----------------------------------------

TITLE: Proxy Configuration Example
DESCRIPTION: Configuration properties for setting up an Accumulo proxy server for non-Java clients.

LANGUAGE: properties
CODE:
protocolFactory=org.apache.thrift.protocol.TCompactProtocol$Factory
tokenClass=org.apache.accumulo.core.client.security.tokens.PasswordToken
port=42424
instance=test
zookeepers=localhost:2181

----------------------------------------

TITLE: Configuring and Using Scanner to Read Data from Accumulo in Java
DESCRIPTION: This code demonstrates how to set up and use a Scanner to read data from Accumulo. It includes specifying authorizations, setting a key range, fetching specific column families, and iterating over the results.

LANGUAGE: Java
CODE:
// specify which visibilities we are allowed to see
Authorizations auths = new Authorizations("public");

Scanner scan =
    conn.createScanner("table", auths);

scan.setRange(new Range("harry","john"));
scan.fetchFamily("attributes");

for(Entry<Key,Value> entry : scan) {
    String row = e.getKey().getRow();
    Value value = e.getValue();
}

----------------------------------------

TITLE: Creating and Populating Mutation in Java
DESCRIPTION: Java code snippet showing how to create a Mutation object and add column family, qualifier, visibility, and value information.

LANGUAGE: java
CODE:
Mutation mutation = new Mutation("row1");
mutation.at().family("myColFam1").qualifier("myColQual1").visibility("public").put("myValue1");
mutation.at().family("myColFam2").qualifier("myColQual2").visibility("public").put("myValue2");

----------------------------------------

TITLE: Writing Mutations to Accumulo Table using BatchWriter
DESCRIPTION: Uses a BatchWriter to write multiple mutations to the 'GothamPD' table in a single operation. The try-with-resources statement ensures proper closure of the writer.

LANGUAGE: java
CODE:
try (BatchWriter writer = client.createBatchWriter("GothamPD")) {
  writer.addMutation(mutation1);
  writer.addMutation(mutation2);
  writer.addMutation(mutation3);
}

----------------------------------------

TITLE: Re-seek Logic for Accumulo Iterators in Java
DESCRIPTION: Outline of the 're-seek' case where a client resumes a scan after a pause, demonstrating how to set up the correct range for continuing iteration.

LANGUAGE: java
CODE:
// Given the above
List<KeyValue> batch = getNextBatch();

// thread goes away (client stops asking for the next batch).

// Eventually client comes back
// Setup as before...
Range userRange = getRangeFromClient();
Range actualRange = new Range(getLastKeyReturned(), false, userRange.getEndKey(), userRange.isEndKeyInclusive());

// Use the actualRange, not the user provided one
topIter.seek(actualRange);

----------------------------------------

TITLE: Using BatchWriter to Write Mutation in Java
DESCRIPTION: Java code snippet demonstrating how to use a BatchWriter to write a Mutation to an Accumulo table.

LANGUAGE: java
CODE:
try (BatchWriter writer = client.createBatchWriter("mytable")) {
  Mutation m = new Mutation("row1");
  m.at().family("myfam").qualifier("myqual").visibility("public").put("myval");
  writer.addMutation(m);
}

----------------------------------------

TITLE: Creating Scanner with Authorizations in Java
DESCRIPTION: Java code snippet showing how to create a Scanner object with specific Authorizations.

LANGUAGE: java
CODE:
Scanner s = client.createScanner("table", new Authorizations("public"));

----------------------------------------

TITLE: Creating Mutation for Writing Data in Accumulo using Java
DESCRIPTION: This code shows how to create a Mutation object to represent changes to columns of a single row in Accumulo. It includes setting row ID, column family, qualifier, visibility, timestamp, and value.

LANGUAGE: Java
CODE:
Text rowID = new Text("row1");
Text colFam = new Text("myColFam");
Text colQual = new Text("myColQual");
ColumnVisibility colVis = new ColumnVisibility("public");
long timestamp = System.currentTimeMillis();

Value value = new Value("myValue".getBytes());

Mutation mutation = new Mutation(rowID);
mutation.put(colFam, colQual, colVis, timestamp, value);

----------------------------------------

TITLE: Starting the Accumulo Shell
DESCRIPTION: Command to start the Accumulo Shell, prompting for a username. The shell will then ask for the corresponding password.

LANGUAGE: shell
CODE:
$ACCUMULO_HOME/bin/accumulo shell -u [username]

----------------------------------------

TITLE: Document-Partitioned Index Search
DESCRIPTION: Shows implementation of document search using IntersectingIterator for efficient multi-term document lookup.

LANGUAGE: java
CODE:
Text[] terms = {new Text("the"), new Text("white"), new Text("house")};

try (BatchScanner bscan = client.createBatchScanner(table, auths, 20)) {

  IteratorSetting iter = new IteratorSetting(20, "ii", IntersectingIterator.class);
  IntersectingIterator.setColumnFamilies(iter, terms);

  bscan.addScanIterator(iter);
  bscan.setRanges(Collections.singleton(new Range()));

  for (Entry<Key,Value> entry : bscan) {
    System.out.println(" " + entry.getKey().getColumnQualifier());
  }
}

----------------------------------------

TITLE: Setting Up User Permissions in Accumulo
DESCRIPTION: Creates a new local user 'commissioner' with specific authorizations and grants table read permissions. Shows how to manage user security and table access in Accumulo.

LANGUAGE: java
CODE:
client.securityOperations().createLocalUser("commissioner", new PasswordToken("gordonrocks"));
client.securityOperations().changeUserAuthorizations("commissioner", auths);
client.securityOperations().grantTablePermission("commissioner", "GothamPD", TablePermission.READ);

----------------------------------------

TITLE: Implementing Conditional Address Update in Accumulo with Java
DESCRIPTION: This method uses Accumulo's ConditionalWriter to update an address only if it matches an expected value. It demonstrates how to create a ConditionalWriter, set conditions, and perform a conditional mutation.

LANGUAGE: java
CODE:
boolean setAddress(AccumuloClient client, String id, String expectedAddr, String newAddr) {
  try (ConditionalWriter writer = client.createConditionalWriter("GothamPD", new ConditionalWriterConfig())) {
    Condition condition = new Condition("location", "home");
    if (expectedAddr != null) {
      condition.setValue(expectedAddr);
    }
    ConditionalMutation mutation = new ConditionalMutation(id, condition);
    mutation.put("location", "home", newAddr);
    return writer.write(mutation).getStatus() == ConditionalWriter.Status.ACCEPTED;
  } catch (Exception e) {
    throw new RuntimeException();
  }
}

----------------------------------------

TITLE: Creating and Writing Mutations
DESCRIPTION: Creates a mutation object representing changes to columns of a single row and writes it using BatchWriter.

LANGUAGE: java
CODE:
Text rowID = new Text("row1");
Text colFam = new Text("myColFam");
Text colQual = new Text("myColQual");
ColumnVisibility colVis = new ColumnVisibility("public");
long timestamp = System.currentTimeMillis();

Value value = new Value("myValue".getBytes());

Mutation mutation = new Mutation(rowID);
mutation.put(colFam, colQual, colVis, timestamp, value);

----------------------------------------

TITLE: Changing User Passwords in Accumulo Shell
DESCRIPTION: This snippet demonstrates how to change the password for a user named 'bob' using the Accumulo shell. It prompts for the current password of the root user and the new password for 'bob'.

LANGUAGE: console
CODE:
root@uno> passwd -u bob
Enter current password for 'root': ******
Enter new password for 'bob': ***

----------------------------------------

TITLE: Configuring AccumuloInputFormat for MapReduce Job in Java
DESCRIPTION: Sets up AccumuloInputFormat options for a MapReduce job, including user authentication, table selection, and ZooKeeper instance configuration. Also shows optional settings for restricting input to specific row ranges, columns, or using regex matching.

LANGUAGE: java
CODE:
Job job = new Job(getConf());
AccumuloInputFormat.setInputInfo(job,
        "user",
        "passwd".getBytes(),
        "table",
        new Authorizations());

AccumuloInputFormat.setZooKeeperInstance(job, "myinstance",
        "zooserver-one,zooserver-two");

// Optional settings:

// To restrict Accumulo to a set of row ranges:
ArrayList<Range> ranges = new ArrayList<Range>();
// populate array list of row ranges ...
AccumuloInputFormat.setRanges(job, ranges);

// To restrict accumulo to a list of columns:
ArrayList<Pair<Text,Text>> columns = new ArrayList<Pair<Text,Text>>();
// populate list of columns
AccumuloInputFormat.fetchColumns(job, columns);

// To use a regular expression to match row IDs:
AccumuloInputFormat.setRegex(job, RegexType.ROW, "^.*");

----------------------------------------

TITLE: Updating and Scanning Aggregated Data in Apache Accumulo
DESCRIPTION: Adds new statistics and scans the table to demonstrate the continuous update of relevant statistics using the SummingCombiner iterator.

LANGUAGE: java
CODE:
mutation1 = new Mutation("id0001");
mutation1.put("hero", "villainsCaptured", "4");
mutation2 = new Mutation("id0002");
mutation2.put("hero", "villainsCaptured", "2");

try (BatchWriter writer = client.createBatchWriter("GothamCrimeStats")) {
  writer.addMutation(mutation1);
  writer.addMutation(mutation2);
}

try ( org.apache.accumulo.core.client.Scanner scan = client.createScanner("GothamCrimeStats", Authorizations.EMPTY)) {
  for(Map.Entry<Key, Value> entry : scan) {
    System.out.printf("Key : %-52s  Value : %s\n", entry.getKey(), entry.getValue());
  }
}

----------------------------------------

TITLE: Basic Accumulo Shell Commands
DESCRIPTION: Core shell commands for basic operations like help, authentication, and system information

LANGUAGE: shell
CODE:
? [ <command> <command> ] [-?] [-np]
about [-?] [-v]
authenticate <username> [-?]
bye [-?]
classpath [-?]
clear [-?]
cls [-?]

----------------------------------------

TITLE: Scanning and Printing Accumulo Table Data
DESCRIPTION: Demonstrates how to create a Scanner, iterate through all entries in the 'GothamPD' table, and print the key-value pairs. The Scanner is created with empty authorizations.

LANGUAGE: java
CODE:
try (ScannerBase scan = client.createScanner("GothamPD", Authorizations.EMPTY)) {
  System.out.println("Gotham Police Department Persons of Interest:");
    for (Map.Entry<Key, Value> entry : scan) {
    System.out.printf("Key : %-50s  Value : %s\n", entry.getKey(), entry.getValue());
  }
}

----------------------------------------

TITLE: Reading Data with Scanner
DESCRIPTION: Uses Scanner to retrieve key-value pairs with support for ranges and column filtering.

LANGUAGE: java
CODE:
// specify which visibilities we are allowed to see
Authorizations auths = new Authorizations("public");

Scanner scan =
    conn.createScanner("table", auths);

scan.setRange(new Range("harry","john"));
scan.fetchFamily("attributes");

for(Entry<Key,Value> entry : scan) {
    String row = e.getKey().getRow();
    Value value = e.getValue();
}

----------------------------------------

TITLE: Creating, Writing, and Reading an Accumulo Table using Java Client
DESCRIPTION: This snippet showcases how to create a table, write data to it, and read from it using the ReadWriteExample class. It demonstrates the command to run the example with options for creating a table, writing data, and reading it back.

LANGUAGE: bash
CODE:
$ bin/accumulo $PACKAGE.ReadWriteExample -u root -p mypassword -i instance -z zookeeper --createtable --create --read

----------------------------------------

TITLE: Creating AccumuloClient from Properties File in Java
DESCRIPTION: Java code snippet demonstrating how to create an AccumuloClient object using an accumulo-client.properties file.

LANGUAGE: java
CODE:
AccumuloClient client = Accumulo.newClient()
                              .from("/path/to/accumulo-client.properties").build();

----------------------------------------

TITLE: Configuring Micrometer Metrics Properties
DESCRIPTION: Properties required in accumulo.properties file to enable Micrometer metrics collection, including JVM metrics and registry factory configuration.

LANGUAGE: properties
CODE:
general.micrometer.enabled=true
general.micrometer.jvm.metrics.enabled=true
general.micrometer.factory=

----------------------------------------

TITLE: Creating and Populating Test Table in Accumulo
DESCRIPTION: Demonstrates creating a new table, listing tables, inserting data and flushing changes to disk.

LANGUAGE: shell
CODE:
shell> createtable test

shell> tables -l
accumulo.metadata    =>        !0
accumulo.root        =>        `r
test                 =>         2
trace                =>         1

shell> insert a b c d

shell> flush -w

----------------------------------------

TITLE: Configuring Scan Executors in Accumulo
DESCRIPTION: Commands to set up scan executors with different thread counts and assign them to specific tables. This includes creating tables, configuring executor threads, and setting table scan dispatchers.

LANGUAGE: shell
CODE:
createtable LOW1
createtable LOW2
createtable HIGH
createtable NORM1
createtable NORM2
config -s tserver.scan.executors.default.threads=4
config -s tserver.scan.executors.low.threads=1
config -s tserver.scan.executors.high.threads=8

LANGUAGE: shell
CODE:
config -t LOW1 -s table.scan.dispatcher=org.apache.accumulo.core.spi.scan.SimpleScanDispatcher
config -t LOW1 -s table.scan.dispatcher.opts.executor=low
config -t LOW2 -s table.scan.dispatcher=org.apache.accumulo.core.spi.scan.SimpleScanDispatcher
config -t LOW2 -s table.scan.dispatcher.opts.executor=low
config -t HIGH -s table.scan.dispatcher=org.apache.accumulo.core.spi.scan.SimpleScanDispatcher
config -t HIGH -s table.scan.dispatcher.opts.executor=high

----------------------------------------

TITLE: Using BatchScanner for Multiple Ranges
DESCRIPTION: Implements BatchScanner to efficiently retrieve multiple non-consecutive ranges in parallel.

LANGUAGE: java
CODE:
ArrayList<Range> ranges = new ArrayList<Range>();
// populate list of ranges ...

BatchScanner bscan =
    conn.createBatchScanner("table", auths, 10);

bscan.setRanges(ranges);
bscan.fetchFamily("attributes");

for(Entry<Key,Value> entry : scan)
    System.out.println(e.getValue());

----------------------------------------

TITLE: Specifying User Authorizations in Java
DESCRIPTION: This code snippet shows how to create an Authorization object with multiple security tokens and use it to create a Scanner. It demonstrates setting up authorizations for a user with both admin and system level access.

LANGUAGE: java
CODE:
// user possess both admin and system level access
Authorization auths = new Authorization("admin","system");

Scanner s = connector.createScanner("table", auths);

----------------------------------------

TITLE: Creating Table and Inserting Data in Apache Accumulo
DESCRIPTION: Creates a new table 'GothamCrimeStats' and inserts data for Batman and Robin's villain capture statistics using mutations and a batch writer.

LANGUAGE: java
CODE:
client.tableOperations().create("GothamCrimeStats");

Mutation mutation1 = new Mutation("id0001");
mutation1.put("hero", "alias", "Batman");

// last three days of Batman's statistics
mutation1.put("hero", "villainsCaptured", "2");
mutation1.put("hero", "villainsCaptured", "1");
mutation1.put("hero", "villainsCaptured", "5");

Mutation mutation2 = new Mutation("id0002");
mutation2.put("hero", "alias", "Robin");

// last three days of Robin's statistics
mutation2.put("hero", "villainsCaptured", "1");
mutation2.put("hero", "villainsCaptured", "0");
mutation2.put("hero", "villainsCaptured", "2");

try (BatchWriter writer = client.createBatchWriter("GothamCrimeStats")) {
  writer.addMutation(mutation1);
  writer.addMutation(mutation2);
}

----------------------------------------

TITLE: Creating Accumulo Table
DESCRIPTION: Creates a new table named 'GothamPD' in Accumulo using the client's table operations.

LANGUAGE: java
CODE:
client.tableOperations().create("GothamPD");

----------------------------------------

TITLE: Creating Authorization and Column Visibility in Accumulo
DESCRIPTION: Creates a new authorization and column visibility for securing secret identities. Demonstrates initialization of authorization strings and creation of ColumnVisibility objects.

LANGUAGE: java
CODE:
String secretId = "secretId";
Authorizations auths = new Authorizations(secretId);
ColumnVisibility colVis = new ColumnVisibility(secretId);

----------------------------------------

TITLE: Reading and Writing Data with MASC Spark Connector in Python
DESCRIPTION: Demonstrates how to read from and write to Accumulo using the MASC Spark connector in Python. It includes setting up Accumulo properties, defining a schema, and performing read and write operations with a Spark DataFrame.

LANGUAGE: python
CODE:
from configparser import ConfigParser
from pyspark.sql import types as T

def get_properties(properties_file):
    """Read Accumulo client properties file"""
    config = ConfigParser()
    with open(properties_file) as stream:
        config.read_string("[top]\n" + stream.read())
    return dict(config['top'])

properties = get_properties('/opt/muchos/install/accumulo-2.0.0/conf/accumulo-client.properties')
properties['table'] = 'demo_table' # Define Accumulo table where data will be written
properties['rowkey'] = 'id'        # Identify column to use as the key for Accumulo rows

# define the schema
schema = T.StructType([
  T.StructField("sentiment", T.IntegerType(), True),
  T.StructField("date", T.StringType(), True),
  T.StructField("query_string", T.StringType(), True),
  T.StructField("user", T.StringType(), True),
  T.StructField("text", T.StringType(), True)
])

# Read from Accumulo
df = (spark
      .read
      .format("com.microsoft.accumulo")
      .options(**options)  # define Accumulo properties
      .schema(schema))     # define schema for data retrieval

# Write to Accumulo
properties['table'] = 'output_table'

(df
 .write
 .format("com.microsoft.accumulo")
 .options(**options)
 .save())

----------------------------------------

TITLE: Table Maintenance Operations in Accumulo Shell
DESCRIPTION: Shows how to perform table maintenance operations such as compaction and flushing using the Accumulo Shell.

LANGUAGE: shell
CODE:
root@myinstance mytable> compact -t mytable
07 16:13:53,201 [shell.Shell] INFO : Compaction of table mytable
scheduled for 20100707161353EDT

root@myinstance mytable> flush -t mytable
07 16:14:19,351 [shell.Shell] INFO : Flush of table mytable
initiated...

----------------------------------------

TITLE: Setting User Authorization in Accumulo Shell
DESCRIPTION: Command to set the 'exampleVis' authorization for a specific username using the Accumulo shell.

LANGUAGE: bash
CODE:
./bin/accumulo shell -u root -e "setauths -u username -s exampleVis"

----------------------------------------

TITLE: Data Manipulation in Accumulo
DESCRIPTION: Shows basic data operations including scanning and inserting data into a table with visibility labels.

LANGUAGE: console
CODE:
root@myinstance mytable> scan

root@myinstance mytable> insert row1 colf colq value1
insert successful

root@myinstance mytable> scan
row1 colf:colq [] value1

----------------------------------------

TITLE: Using BatchScanner for Parallel Queries
DESCRIPTION: Demonstrates using BatchScanner with 5 query threads to process multiple ranges in parallel. Calculates average years of service for villains within specified ID ranges.

LANGUAGE: java
CODE:
try (BatchScanner batchScanner = client.createBatchScanner("GothamBatch", Authorizations.EMPTY, 5)) {

  // Create a collection of 2 sample ranges and set it to the batchScanner
  List<Range> ranges = new ArrayList<Range>();

  // Create a collection of 2 sample ranges and set it to the batchScanner
  ranges.add(new Range("id1000", "id1999"));
  ranges.add(new Range("id9000", "id9999"));
  batchScanner.setRanges(ranges);

  // Fetch just the columns we want
  batchScanner.fetchColumn(new Text("villain"), new Text("yearsOfService"));

  // Calculate average years of service
  long villianCount = batchScanner.stream().count();
  Double average = batchScanner.stream().map(Map.Entry::getValue).map(Value::toString).mapToLong(Long::valueOf).average().getAsDouble();
  System.out.println("The average years of service of " + villianCount + " villians is " + average);
}

----------------------------------------

TITLE: Creating Ranges in Java for Accumulo
DESCRIPTION: Demonstrates different ways to create Range objects in Accumulo, including ranges for specific keys, entire rows, and row ranges.

LANGUAGE: java
CODE:
Range r1 = new Range(startKey, endKey);  // Creates a range from startKey inclusive to endKey inclusive.
Range r2 = new Range(row);               // Creates a range that covers an entire row.
Range r3 = new Range(startRow, endRow);  // Creates a range from startRow inclusive to endRow inclusive.

----------------------------------------

TITLE: Configuring MapReduce Job for Accumulo Output
DESCRIPTION: Configure a MapReduce job to write output to an Accumulo table using AccumuloOutputFormat. This includes setting up client properties and specifying the default output table.

LANGUAGE: java
CODE:
Job job = Job.getInstance();
job.setOutputFormatClass(AccumuloOutputFormat.class);
Properties props = Accumulo.newClientProperties().to("myinstance","zoo1,zoo2")
                        .as("user", "passwd").build();
AccumuloOutputFormat.configure().clientProperties(props)
    .defaultTable("mytable").store(job);

----------------------------------------

TITLE: Pre-splitting Accumulo Table Using Shell Command
DESCRIPTION: This command pre-splits an Accumulo table using a local split file to create multiple tablets, enabling parallel ingest across the cluster.

LANGUAGE: shell
CODE:
user@myinstance mytable> addsplits -sf /local_splitfile -t mytable

----------------------------------------

TITLE: User Administration in Accumulo Shell
DESCRIPTION: Illustrates user administration tasks in the Accumulo shell, including creating users, authenticating, granting permissions, and revoking permissions.

LANGUAGE: shell
CODE:
root@myinstance mytable> createuser bob
Enter new password for 'bob': *********
Please confirm new password for 'bob': *********

root@myinstance mytable> authenticate bob
Enter current password for 'bob': *********
Valid

root@myinstance mytable> grant System.CREATE_TABLE -s -u bob

root@myinstance mytable> user bob
Enter current password for 'bob': *********

bob@myinstance mytable> userpermissions
System permissions: System.CREATE_TABLE
Table permissions (!METADATA): Table.READ
Table permissions (mytable): NONE

bob@myinstance mytable> createtable bobstable
bob@myinstance bobstable>

bob@myinstance bobstable> user root
Enter current password for 'root': *********

root@myinstance bobstable> revoke System.CREATE_TABLE -s -u bob

----------------------------------------

TITLE: Writing to Accumulo Table using Bulk Import in Spark
DESCRIPTION: Java code snippet demonstrating how to write data to an Accumulo table using Bulk Import in a Spark application. It partitions data, writes it to RFiles using AccumuloFileOutputFormat, and then bulk imports the RFiles into Accumulo.

LANGUAGE: java
CODE:
JavaPairRDD<Key, Value> dataToWrite = ... ;
Job job = Job.getInstance();
AccumuloFileOutputFormat.configure().outputPath(outputDir).store(job);
Partitioner partitioner = new AccumuloRangePartitioner("3", "7");
JavaPairRDD<Key, Value> partData = dataPlus5K.repartitionAndSortWithinPartitions(partitioner);
partData.saveAsNewAPIHadoopFile(outputDir.toString(), Key.class, Value.class,
    AccumuloFileOutputFormat.class);

try (AccumuloClient client = Accumulo.newClient().from(props).build()) {
  client.tableOperations().importDirectory(outputDir.toString()).to(outputTable).load();
}

----------------------------------------

TITLE: Launching Accumulo Shell
DESCRIPTION: Command to start the Accumulo shell interface as the root user.

LANGUAGE: bash
CODE:
accumulo shell -u root

----------------------------------------

TITLE: Creating Scanner with Authorizations in Accumulo
DESCRIPTION: Shows how to create a scanner with specific authorizations. Demonstrates setting up user access permissions for querying data.

LANGUAGE: java
CODE:
// user possess both admin and system level access
Authorization auths = new Authorization("admin","system");

Scanner s = connector.createScanner("table", auths);

----------------------------------------

TITLE: Reading and Writing Rows in Accumulo using Java Client
DESCRIPTION: This example uses the RowOperations class to demonstrate reading and writing rows in Accumulo using BatchWriter and Scanner. It shows how to execute the example and displays sample output of the operations.

LANGUAGE: bash
CODE:
$ bin/accumulo $PACKAGE.RowOperations -u root -p mypassword -i instance -z zookeeper

----------------------------------------

TITLE: Writing to Accumulo Table using BatchWriter in Spark
DESCRIPTION: Java code snippet showing how to write data to an Accumulo table using a BatchWriter in a Spark application. It creates an AccumuloClient for each partition and writes data using a BatchWriter.

LANGUAGE: java
CODE:
Properties props = Accumulo.newClientProperties()
                    .from("/path/to/accumulo-client.properties").build();
JavaPairRDD<Key, Value> dataToWrite = ... ;
dataToWrite.foreachPartition(iter -> {
  try (AccumuloClient client = Accumulo.newClient().from(props).build();
       BatchWriter bw = client.createBatchWriter(outputTable)) {
    iter.forEachRemaining(kv -> {
      Key key = kv._1;
      Value val = kv._2;
      Mutation m = new Mutation(key.getRow());
      m.at().family(key.getColumnFamily()).qualifier(key.getColumnQualifier())
          .visibility(key.getColumnVisibility()).timestamp(key.getTimestamp()).put(val);
      bw.addMutation(m);
    });
  }
});

----------------------------------------

TITLE: Initializing Mock Accumulo Connection
DESCRIPTION: Code showing how to create a connection to Mock Accumulo for testing purposes.

LANGUAGE: java
CODE:
Instance instance = new MockInstance();

----------------------------------------

TITLE: Configuring MapReduce Job for Accumulo Input
DESCRIPTION: Configure a MapReduce job to read input from an Accumulo table using AccumuloInputFormat. This includes setting up client properties and optional configurations like ranges, columns, and iterators.

LANGUAGE: java
CODE:
Job job = Job.getInstance();
job.setInputFormatClass(AccumuloInputFormat.class);
Properties props = Accumulo.newClientProperties().to("myinstance","zoo1,zoo2")
                        .as("user", "passwd").build();
AccumuloInputFormat.configure().clientProperties(props).table(table).store(job);

LANGUAGE: java
CODE:
List<Range> ranges = new ArrayList<Range>();
Collection<IteratorSetting.Column> columns = new ArrayList<IteratorSetting.Column>();
// populate ranges & columns
IteratorSetting is = new IteratorSetting(30, RexExFilter.class);
RegExFilter.setRegexs(is, ".*suffix", null, null, null, true);

AccumuloInputFormat.configure().clientProperties(props).table(table)
    .auths(Authorizations.EMPTY) // optional: default to user's auths if not set
    .ranges(ranges)              // optional: only read specified ranges
    .fetchColumns(columns)       // optional: only read specified columns
    .addIterator(is)             // optional: add iterator that matches row IDs
    .store(job);

----------------------------------------

TITLE: Implementing YieldingKeyValueIterator Interface in Java
DESCRIPTION: Optional method to implement for iterators that may take a long time to process, allowing them to yield control to other scans.

LANGUAGE: java
CODE:
default void enableYielding(YieldCallback callback) { }

----------------------------------------

TITLE: Accumulo Setup Prerequisites
DESCRIPTION: Initial setup commands and environment requirements for running Accumulo examples. Requires setting instance name, zookeeper servers, username, and password.

LANGUAGE: bash
CODE:
$ cd $ACCUMULO_HOME

----------------------------------------

TITLE: Creating and Testing Constrained Accumulo Table via Shell
DESCRIPTION: This snippet shows the process of creating an Accumulo table with constraints, configuring the constraints, and attempting to insert data that violates these constraints. It demonstrates how the constraints prevent invalid data from being inserted into the table.

LANGUAGE: shell
CODE:
$ ./bin/accumulo shell -u username -p pass

Shell - Apache Accumulo Interactive Shell
- 
- version: 1.3.x-incubating
- instance name: instance
- instance id: 00000000-0000-0000-0000-000000000000
- 
- type 'help' for a list of available commands
- 
username@instance> createtable testConstraints
username@instance testConstraints> config -t testConstraints -s table.constraint.1=org.apache.accumulo.examples.constraints.NumericValueConstraint
username@instance testConstraints> config -t testConstraints -s table.constraint.2=org.apache.accumulo.examples.constraints.AlphaNumKeyConstrain                                                                                                    
username@instance testConstraints> insert r1 cf1 cq1 1111
username@instance testConstraints> insert r1 cf1 cq1 ABC
  Constraint Failures:
      ConstraintViolationSummary(constrainClass:org.apache.accumulo.examples.constraints.NumericValueConstraint, violationCode:1, violationDescription:Value is not numeric, numberOfViolatingMutations:1)
username@instance testConstraints> insert r1! cf1 cq1 ABC 
  Constraint Failures:
      ConstraintViolationSummary(constrainClass:org.apache.accumulo.examples.constraints.NumericValueConstraint, violationCode:1, violationDescription:Value is not numeric, numberOfViolatingMutations:1)
      ConstraintViolationSummary(constrainClass:org.apache.accumulo.examples.constraints.AlphaNumKeyConstraint, violationCode:1, violationDescription:Row was not alpha numeric, numberOfViolatingMutations:1)
username@instance testConstraints> scan
r1 cf1:cq1 []    1111
username@instance testConstraints>

----------------------------------------

TITLE: Executing Accumulo Bulk Ingest Workflow
DESCRIPTION: A sequence of commands that demonstrate the complete bulk ingest process in Accumulo. The workflow includes setting up a table with split points, generating test data, performing bulk ingest, and verifying the ingested data. The commands use various Java classes from the org.apache.accumulo.examples.simple.mapreduce.bulk package.

LANGUAGE: bash
CODE:
$ PKG=org.apache.accumulo.examples.simple.mapreduce.bulk
$ ARGS="-i instance -z zookeepers -u username -p password"
$ ./bin/accumulo $PKG.SetupTable $ARGS -t test_bulk row_00000333 row_00000666
$ ./bin/accumulo $PKG.GenerateTestData --start-row 0 --count 1000 --output bulk/test_1.txt
$ ./bin/tool.sh lib/accumulo-examples-simple.jar $PKG.BulkIngestExample $ARGS -t test_bulk --inputDir bulk --workDir tmp/bulkWork
$ ./bin/accumulo $PKG.VerifyIngest $ARGS -t test_bulk --start-row 0 --count 1000

----------------------------------------

TITLE: Starting Accumulo Cluster
DESCRIPTION: Command to start all configured Accumulo services across the cluster.

LANGUAGE: bash
CODE:
accumulo-cluster start

----------------------------------------

TITLE: Inserting Data with Mutations in Accumulo
DESCRIPTION: Demonstrates how to create Mutation objects and add key-value pairs for Batman, Robin, and Joker. Each entity is represented by a unique row ID and multiple column families.

LANGUAGE: java
CODE:
Mutation mutation1 = new Mutation("id0001");
mutation1.put("hero","alias", "Batman");
mutation1.put("hero","name", "Bruce Wayne");
mutation1.put("hero","wearsCape?", "true");

Mutation mutation2 = new Mutation("id0002");
mutation2.put("hero","alias", "Robin");
mutation2.put("hero","name", "Dick Grayson");
mutation2.put("hero","wearsCape?", "true");

Mutation mutation3 = new Mutation("id0003");
mutation3.put("villain","alias", "Joker");
mutation3.put("villain","name", "Unknown");
mutation3.put("villain","wearsCape?", "false");

----------------------------------------

TITLE: Scanning Accumulo Table with Authorized User
DESCRIPTION: Creates a new client for the 'commissioner' user and scans the 'GothamPD' table with proper authorizations.

LANGUAGE: java
CODE:
try (AccumuloClient commishClient = Accumulo.newClient().from(client.properties()).as("commissioner", "gordonrocks").build()) {
  try (ScannerBase scan = commishClient.createScanner("GothamPD", auths)) {
    System.out.println("Gotham Police Department Persons of Interest:");
    for (Map.Entry<Key, Value> entry : scan) {
      System.out.printf("Key : %-50s  Value : %s\n", entry.getKey(), entry.getValue());
    }
  }
}

----------------------------------------

TITLE: Revoking System Permission in Java API
DESCRIPTION: Demonstrates how to revoke the CREATE_TABLE system permission from a user named 'bob' using the Accumulo Java API's SecurityOperations.

LANGUAGE: java
CODE:
client.securityOperations().revokeSystemPermission("bob", SystemPermission.CREATE_TABLE);

----------------------------------------

TITLE: Scanner Creation and Column Retrieval
DESCRIPTION: Shows how to create a scanner to retrieve specific columns for a given userid range. Demonstrates client connection and scan configuration.

LANGUAGE: java
CODE:
AccumuloClient client = Accumulo.newClient()
                          .from("/path/to/accumulo-client.properties").build();
Range r = new Range(userid, userid); // single row
Scanner s = client.createScanner("userdata", auths);
s.setRange(r);
s.fetchColumnFamily("age");

for (Entry<Key,Value> entry : s) {
  System.out.println(entry.getValue().toString());
}

----------------------------------------

TITLE: Configuring Accumulo Client Properties
DESCRIPTION: Properties file configuration for Accumulo clients including instance settings, authentication, batch operations, SSL/SASL security, and tracing capabilities. These properties are set in accumulo-client.properties file and have been part of the API since version 2.0.0 unless otherwise specified.

LANGUAGE: properties
CODE:
instance.name=
instance.zookeepers=localhost:2181
instance.zookeepers.timeout=30s
auth.type=password
auth.principal=
auth.token=
batch.writer.durability=default
batch.writer.latency.max=120s
batch.writer.memory.max=50M
batch.writer.threads.max=3
batch.writer.timeout.max=0
batch.scanner.num.query.threads=3
scanner.batch.size=1000
ssl.enabled=false
ssl.keystore.password=
ssl.keystore.path=
ssl.keystore.type=jks
ssl.truststore.password=
ssl.truststore.path=
ssl.truststore.type=jks
ssl.use.jsse=false
sasl.enabled=false
sasl.kerberos.server.primary=accumulo
sasl.qop=auth
trace.span.receivers=org.apache.accumulo.tracer.ZooTraceClient
trace.zookeeper.path=/tracers

----------------------------------------

TITLE: Configuring Visibility Constraints
DESCRIPTION: Demonstrates setting up visibility constraints to limit users to only insert data they can read. Shows how to configure table-level security constraints and their effects on data insertion.

LANGUAGE: shell
CODE:
root@instance vistest> config -t vistest -s table.constraint.1=org.apache.accumulo.core.security.VisibilityConstraint
username@instance vistest> insert row f4 q4 v4 -l spinach|broccoli

----------------------------------------

TITLE: Creating a New User in Accumulo Shell
DESCRIPTION: This snippet demonstrates how to create a new user in Accumulo and attempt to create a table without proper permissions.

LANGUAGE: shell
CODE:
root@instance> createuser username
Enter new password for 'username': ********
Please confirm new password for 'username': ********
root@instance> user username
Enter password for user username: ********
username@instance> createtable vistest
06 10:48:47,931 [shell.Shell] ERROR: org.apache.accumulo.core.client.AccumuloSecurityException: Error PERMISSION_DENIED - User does not have permission to perform this action
username@instance> userpermissions
System permissions: 

Table permissions (!METADATA): Table.READ
username@instance> 

----------------------------------------

TITLE: Security Label Expression Examples in Accumulo
DESCRIPTION: Shows various examples of security label expressions using logical operators. Demonstrates how to combine security tokens using AND (&) and OR (|) operators with proper grouping.

LANGUAGE: java
CODE:
// Users must have admin privileges:
admin

// Users must have admin and audit privileges
admin&audit

// Users with either admin or audit privileges
admin|audit

// Users must have audit and one or both of admin or system
(admin|system)&audit

----------------------------------------

TITLE: Creating Basic Table Entry in Accumulo
DESCRIPTION: Demonstrates how to create a basic table entry using Mutation object with userid as row ID and different column families for storing user attributes.

LANGUAGE: java
CODE:
Mutation m = new Mutation(new Text(userid));
m.put(new Text("age"), age);
m.put(new Text("address"), address);
m.put(new Text("balance"), account_balance);

writer.add(m);

----------------------------------------

TITLE: Creating Accumulo Table and Authorization
DESCRIPTION: Creates a new table called 'GothamPD' and sets up authorization and visibility for 'secretId'.

LANGUAGE: java
CODE:
client.tableOperations().create("GothamPD");
String secretId = "secretId";
Authorizations auths = new Authorizations(secretId);
ColumnVisibility colVis = new ColumnVisibility(secretId);

----------------------------------------

TITLE: Batch Scanning Index Entries in Accumulo
DESCRIPTION: Demonstrates how to perform batch scanning of index entries using BatchScanner to efficiently retrieve multiple matching rows.

LANGUAGE: java
CODE:
Text term = new Text("mySearchTerm");

HashSet<Text> matchingRows = new HashSet<Text>();

Scanner indexScanner = createScanner("index", auths);
indexScanner.setRange(new Range(term, term));

for(Entry<Key,Value> entry : indexScanner)
    matchingRows.add(new Text(entry.getKey().getColumnQualifier()));

BatchScanner bscan = conn.createBatchScanner("table", auths, 10);

bscan.setRanges(matchingRows);
bscan.fetchFamily("attributes");

for(Entry<Key,Value> entry : scan)
    System.out.println(entry.getValue());

----------------------------------------

TITLE: Creating New Accumulo User
DESCRIPTION: Shows the process of creating a new user account and attempting to create a table without proper permissions.

LANGUAGE: shell
CODE:
root@instance> createuser username
Enter new password for 'username': ********
Please confirm new password for 'username': ********
root@instance> user username
Enter password for user username: ********
username@instance> createtable vistest
06 10:48:47,931 [shell.Shell] ERROR: org.apache.accumulo.core.client.AccumuloSecurityException: Error PERMISSION_DENIED - User does not have permission to perform this action
username@instance> userpermissions
System permissions:

Table permissions (accumulo.metadata): Table.READ
username@instance>

----------------------------------------

TITLE: Configuring AccumuloInputFormat in Java
DESCRIPTION: Demonstrates how to set up AccumuloInputFormat options for a MapReduce job. This includes specifying user credentials, table name, and Zookeeper instance details. Optional settings for row ranges, columns, and regex matching are also shown.

LANGUAGE: java
CODE:
Job job = new Job(getConf());
AccumuloInputFormat.setInputInfo(job,
        "user",
        "passwd".getBytes(),
        "table",
        new Authorizations());

AccumuloInputFormat.setZooKeeperInstance(job, "myinstance",
        "zooserver-one,zooserver-two");

// Optional settings:
ArrayList<Range> ranges = new ArrayList<Range>();
// populate array list of row ranges ...
AccumuloInputFormat.setRanges(job, ranges);

ArrayList<Pair<Text,Text>> columns = new ArrayList<Pair<Text,Text>>();
// populate list of columns
AccumuloInputFormat.fetchColumns(job, columns);

AccumuloInputFormat.setRegex(job, RegexType.ROW, "^.*");

----------------------------------------

TITLE: Enabling Data Block Cache for a Table in Accumulo Shell
DESCRIPTION: This command enables the data block cache for a specific table named 'mytable' using the Accumulo shell. It sets the 'table.cache.block.enable' property to 'true'.

LANGUAGE: shell
CODE:
config -t mytable -s table.cache.block.enable=true

----------------------------------------

TITLE: Practical Replication Configuration Example
DESCRIPTION: A series of commands to set up replication between two Accumulo instances named 'primary' and 'peer'.

LANGUAGE: console
CODE:
root@peer> createtable my_table
root@peer> createuser peer
root@peer> grant -t my_table -u peer Table.WRITE
root@peer> grant -t my_table -u peer Table.READ
root@peer> tables -l

root@primary> createtable my_table
root@primary> config -s replication.peer.peer=org.apache.accumulo.tserver.replication.AccumuloReplicaSystem,peer,$peer_zk_quorum
root@primary> config -s replication.peer.user.peer=peer
root@primary> config -s replication.peer.password.peer=peer
root@primary> config -t my_table -s table.replication.target.peer=$peer_table_id
root@primary> config -t my_table -s table.replication=true

----------------------------------------

TITLE: Running Sequential Batch Writer in Accumulo
DESCRIPTION: This command runs the SequentialBatchWriter class to write 10000 entries with sequential rows and random 50-byte values to the 'batchtest1' table.

LANGUAGE: shell
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.simple.client.SequentialBatchWriter -i instance -z zookeepers -u username -p password -t batchtest1 --start 0 --num 10000 --size 50 --batchMemory 20M --batchLatency 500 --batchThreads 20 --vis exampleVis

----------------------------------------

TITLE: Running Sequential Batch Writer in Accumulo
DESCRIPTION: This command runs the SequentialBatchWriter class to write 10000 entries with sequential rows and random 50-byte values to the 'batchtest1' table.

LANGUAGE: shell
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.simple.client.SequentialBatchWriter -i instance -z zookeepers -u username -p password -t batchtest1 --start 0 --num 10000 --size 50 --batchMemory 20M --batchLatency 500 --batchThreads 20 --vis exampleVis

----------------------------------------

TITLE: Granting System Permission in Accumulo Shell
DESCRIPTION: Demonstrates how to grant the CREATE_TABLE system permission to a user named 'bob' using the Accumulo shell.

LANGUAGE: console
CODE:
root@uno> grant System.CREATE_TABLE -s -u bob

----------------------------------------

TITLE: Configuring Iterators via Java API
DESCRIPTION: Examples of adding iterators to Accumulo scanners programmatically, including setting iterator options.

LANGUAGE: java
CODE:
scanner.addIterator(new IteratorSetting(
    15, // priority
    "myiter", // name this iterator
    "com.company.MyIterator" // class name
));

LANGUAGE: java
CODE:
IteratorSetting iter = new IteratorSetting(...);
iter.addOption("myoptionname", "myoptionvalue");
scanner.addIterator(iter)

----------------------------------------

TITLE: Managing Locality Groups with Java Client API
DESCRIPTION: Example showing how to configure locality groups programmatically using the Accumulo client API. Demonstrates creating locality group mappings and applying them to a table.

LANGUAGE: java
CODE:
AccumuloClient client = Accumulo.newClient()
                          .from("/path/to/accumulo-client.properties").build();

HashMap<String,Set<Text>> localityGroups = new HashMap<String, Set<Text>>();

HashSet<Text> metadataColumns = new HashSet<Text>();
metadataColumns.add(new Text("domain"));
metadataColumns.add(new Text("link"));

HashSet<Text> contentColumns = new HashSet<Text>();
contentColumns.add(new Text("body"));
contentColumns.add(new Text("images"));

localityGroups.put("metadata", metadataColumns);
localityGroups.put("content", contentColumns);

client.tableOperations().setLocalityGroups("mytable", localityGroups);

// existing locality groups can be obtained as follows
Map<String, Set<Text>> groups = client.tableOperations().getLocalityGroups("mytable");

----------------------------------------

TITLE: Retrieving Column Data from Accumulo
DESCRIPTION: Shows how to retrieve specific column data for a given userid using Scanner with a specific range and column family filter.

LANGUAGE: java
CODE:
Range r = new Range(userid, userid); // single row
Scanner s = conn.createScanner("userdata", auths);
s.setRange(r);
s.fetchColumnFamily(new Text("age"));

for(Entry<Key,Value> entry : s)
    System.out.println(entry.getValue().toString());

----------------------------------------

TITLE: Implementing Summing Combiner Iterator in Apache Accumulo
DESCRIPTION: Sets up a SummingCombiner iterator to keep a running total of captured villains in the 'GothamCrimeStats' table.

LANGUAGE: java
CODE:
import org.apache.accumulo.core.iterators.user.SummingCombiner;
import org.apache.accumulo.core.iterators.LongCombiner

IteratorSetting scSetting = new IteratorSetting(30, "sum", SummingCombiner.class);
LongCombiner.setEncodingType(scSetting, LongCombiner.Type.STRING);
scSetting.addOption("columns", "hero:villainsCaptured");
client.tableOperations().checkIteratorConflicts("GothamCrimeStats", scSetting, EnumSet.allOf(IteratorScope.class));
client.tableOperations().attachIterator("GothamCrimeStats", scSetting);

----------------------------------------

TITLE: Using DelegationTokens in MapReduce
DESCRIPTION: Example code showing how to use delegation tokens with MapReduce jobs for Accumulo authentication.

LANGUAGE: java
CODE:
KerberosToken kt = new KerberosToken();
AccumuloClient client = Accumulo.newClient().to("myinstance", "zoo1,zoo2")
                          .as(principal, kt).build();
DelegationToken dt = client.securityOperations().getDelegationToken();
Properties props = Accumulo.newClientProperties().from(client.properties())
                          .as(principal, dt).build();

// Reading from Accumulo
AccumuloInputFormat.configure().clientProperties(props).store(job);

// Writing to Accumulo
AccumuloOutputFormat.configure().clientProperties(props).store(job);

----------------------------------------

TITLE: Configuring Compaction Services in Accumulo Shell
DESCRIPTION: Shell commands to create and configure compaction services cs1 and cs2 with different executors, and set up the table 'ci' to use these services for system and user compactions.

LANGUAGE: shell
CODE:
config -s tserver.compaction.major.service.cs1.planner=org.apache.accumulo.core.spi.compaction.DefaultCompactionPlanner
config -s 'tserver.compaction.major.service.cs1.planner.opts.executors=[{"name":"small","type":"internal","maxSize":"16M","numThreads":8},{"name":"medium","type":"internal","maxSize":"128M","numThreads":4},{"name":"large","type":"internal","numThreads":2}]'
config -s tserver.compaction.major.service.cs2.planner=org.apache.accumulo.core.spi.compaction.DefaultCompactionPlanner
config -s 'tserver.compaction.major.service.cs2.planner.opts.executors=[{"name":"small","type":"internal","maxSize":"16M","numThreads":4},{"name":"medium","type":"internal","maxSize":"128M","numThreads":2},{"name":"large","type":"internal","numThreads":1}]'
config -s tserver.compaction.major.service.cs2.rate.limit=40M
config -t ci -s table.compaction.dispatcher=org.apache.accumulo.core.spi.compaction.SimpleCompactionDispatcher
config -t ci -s table.compaction.dispatcher.opts.service=cs1
config -t ci -s table.compaction.dispatcher.opts.service.user=cs2

----------------------------------------

TITLE: Setting System Configuration in Accumulo Shell
DESCRIPTION: Shows how to set a system-wide configuration property using the Accumulo shell.

LANGUAGE: shell
CODE:
config -s PROPERTY=VALUE

----------------------------------------

TITLE: Setting Range on Accumulo Scanner in Java
DESCRIPTION: Shows how to set a specific range on an Accumulo Scanner to efficiently retrieve a subset of data. This example sets a range for rows from 'id0000' to 'id0010'.

LANGUAGE: java
CODE:
scanner.setRange(new Range("id0000", "id0010"));  // returns rows from id0000 to id0010

----------------------------------------

TITLE: Running Continuous Query Example
DESCRIPTION: Command to execute the ContinuousQuery program which performs random term queries using 5 terms per document.

LANGUAGE: shell
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.shard.ContinuousQuery instance zookeepers shard doc2term username password 5

----------------------------------------

TITLE: Reverse Date Lexicoding
DESCRIPTION: Shows how to combine ReverseLexicoder with DateLexicoder to achieve reverse chronological sorting.

LANGUAGE: java
CODE:
// create new date lexicoder and reverse lexicoder
DateLexicoder dateEncoder = new DateLexicoder();
ReverseLexicoder reverseEncoder = new ReverseLexicoder(dateEncoder);

// truncate date to hours
long epoch = System.currentTimeMillis();
Date hour = new Date(epoch - (epoch % 3600000));

// encode the rowId so that it sorts in reverse lexicographic order
Mutation mutation = new Mutation(reverseEncoder.encode(hour));
mutation.at().family("colf").qualifier("colq").put(new byte[]{});

----------------------------------------

TITLE: Sequential Batch Writing in Accumulo
DESCRIPTION: Command to write 10000 sequential entries with random 50-byte values using SequentialBatchWriter. Configures batch memory, latency, threads, and visibility settings.

LANGUAGE: bash
CODE:
./bin/accumulo org.apache.accumulo.examples.simple.client.SequentialBatchWriter -i instance -z zookeepers -u username -p password -t batchtest1 --start 0 --num 10000 --size 50 --batchMemory 20M --batchLatency 500 --batchThreads 20 --vis exampleVis

----------------------------------------

TITLE: Configuring MapReduce Job for RFile Output
DESCRIPTION: Configure a MapReduce job to write output as RFiles in HDFS using AccumuloFileOutputFormat. These files can later be bulk imported into Accumulo.

LANGUAGE: java
CODE:
Job job = Job.getInstance();
job.setOutputFormatClass(AccumuloFileOutputFormat.class);
AccumuloFileOutputFormat.configure()
    .outputPath(new Path("hdfs://localhost:8020/myoutput/")).store(job);

----------------------------------------

TITLE: Creating Users in Accumulo Shell
DESCRIPTION: This snippet demonstrates how to create a new user named 'bob' using the Accumulo shell. It prompts for a password and confirmation.

LANGUAGE: console
CODE:
root@uno> createuser bob
Enter new password for 'bob': ****
Please confirm new password for 'bob': ****

----------------------------------------

TITLE: Implementing FileDecrypter Interface in Java
DESCRIPTION: Demonstrates the method required for implementing a custom FileDecrypter in Accumulo. This interface is used for decrypting data streams.

LANGUAGE: java
CODE:
public interface FileDecrypter {
  InputStream decryptStream(InputStream inputStream) throws CryptoService.CryptoException;
}

----------------------------------------

TITLE: Ingesting File Data into Accumulo
DESCRIPTION: This command uses the FileDataIngest class to ingest a file into Accumulo. It specifies the instance, zookeepers, credentials, table name, authorizations, chunk size, and the file to ingest.

LANGUAGE: Bash
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.simple.filedata.FileDataIngest -i instance -z zookeepers -u username -p password -t dataTable --auths exampleVis --chunk 1000 $ACCUMULO_HOME/README

----------------------------------------

TITLE: Inserting Data with Visibility Labels
DESCRIPTION: Shows how to insert data with different visibility expressions using AND (&) and OR (|) operators.

LANGUAGE: shell
CODE:
username@instance vistest> insert row f1 q1 v1 -l A
username@instance vistest> insert row f2 q2 v2 -l A&B
username@instance vistest> insert row f3 q3 v3 -l apple&carrot|broccoli|spinach
06 11:19:01,432 [shell.Shell] ERROR: org.apache.accumulo.core.util.BadArgumentException: cannot mix | and & near index 12
apple&carrot|broccoli|spinach
                ^
username@instance vistest> insert row f3 q3 v3 -l (apple&carrot)|broccoli|spinach
username@instance vistest>

----------------------------------------

TITLE: Setting Table Configuration in Accumulo Shell
DESCRIPTION: Shows how to set a configuration property for a specific table using the Accumulo shell.

LANGUAGE: shell
CODE:
config -t TABLE -s PROPERTY=VALUE

----------------------------------------

TITLE: Setting User Authorizations
DESCRIPTION: Demonstrates setting user authorizations and scanning data with different authorization levels.

LANGUAGE: shell
CODE:
username@instance vistest> setauths -s A,B,broccoli -u username
root@instance vistest> user username
Enter password for user username: ********
username@instance vistest> scan
row f1:q1 [A]    v1
row f2:q2 [A&B]    v2
row f3:q3 [(apple&carrot)|broccoli|spinach]    v3
username@instance vistest> scan -s B
username@instance vistest>

----------------------------------------

TITLE: Searching File Names in Accumulo Index Table
DESCRIPTION: These commands demonstrate how to use the QueryUtil class to perform searches on file or directory names in the index table. They show various search patterns, including exact matches, prefixes, suffixes, and combinations.

LANGUAGE: bash
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.simple.dirlist.QueryUtil -i instance -z zookeepers -u username -p password -t indexTable --auths exampleVis --path filename --search
$ ./bin/accumulo org.apache.accumulo.examples.simple.dirlist.QueryUtil -i instance -z zookeepers -u username -p password -t indexTable --auths exampleVis --path 'filename*' --search
$ ./bin/accumulo org.apache.accumulo.examples.simple.dirlist.QueryUtil -i instance -z zookeepers -u username -p password -t indexTable --auths exampleVis --path '*jar' --search
$ ./bin/accumulo org.apache.accumulo.examples.simple.dirlist.QueryUtil -i instance -z zookeepers -u username -p password -t indexTable --auths exampleVis --path 'filename*jar' --search

----------------------------------------

TITLE: Setting Iterators Programmatically in Accumulo
DESCRIPTION: Shows how to programmatically set iterators for a scanner using the Accumulo Java API.

LANGUAGE: Java
CODE:
scanner.addIterator(new IteratorSetting(
    15, // priority
    "myiter", // name this iterator
    "com.company.MyIterator" // class name
));

IteratorSetting iter = new IteratorSetting(...);
iter.addOption("myoptionname", "myoptionvalue");
scanner.addIterator(iter)

----------------------------------------

TITLE: Connecting to Mini Accumulo Cluster
DESCRIPTION: Code demonstrating how to establish a client connection to a running Mini Accumulo Cluster instance.

LANGUAGE: java
CODE:
Instance instance = new ZooKeeperInstance(accumulo.getInstanceName(), accumulo.getZooKeepers());
Connector conn = instance.getConnector("root", "password");

----------------------------------------

TITLE: Executing Bulk Ingest Pipeline in Accumulo
DESCRIPTION: A series of commands that demonstrate the complete bulk ingest process including setting up a table with split points, generating test data, performing bulk ingest, and verifying the results. The example creates 1000 rows of test data and ingests them into a table named 'test_bulk'.

LANGUAGE: bash
CODE:
$ PKG=org.apache.accumulo.examples.simple.mapreduce.bulk
$ ARGS="-i instance -z zookeepers -u username -p password"
$ ./bin/accumulo $PKG.SetupTable $ARGS -t test_bulk row_00000333 row_00000666
$ ./bin/accumulo $PKG.GenerateTestData --start-row 0 --count 1000 --output bulk/test_1.txt
$ ./bin/tool.sh lib/accumulo-examples-simple.jar $PKG.BulkIngestExample $ARGS -t test_bulk --inputDir bulk --workDir tmp/bulkWork
$ ./bin/accumulo $PKG.VerifyIngest $ARGS -t test_bulk --start-row 0 --count 1000

----------------------------------------

TITLE: Ingesting Filesystem Data into Accumulo
DESCRIPTION: This command uses the Ingest class to recursively list files and directories, storing their information in Accumulo tables. It specifies the instance, zookeepers, username, password, visibility, chunk size, and the directory to ingest.

LANGUAGE: bash
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.simple.dirlist.Ingest -i instance -z zookeepers -u username -p password --vis exampleVis --chunkSize 100000 /local/username/workspace

----------------------------------------

TITLE: Granting Table Creation Permission
DESCRIPTION: Demonstrates granting System.CREATE_TABLE permission to a user and verifying the new permissions.

LANGUAGE: shell
CODE:
username@instance> user root
Enter password for user root: ********
root@instance> grant -s System.CREATE_TABLE -u username
root@instance> user username
Enter password for user username: ********
username@instance> createtable vistest
username@instance> userpermissions
System permissions: System.CREATE_TABLE

Table permissions (accumulo.metadata): Table.READ
Table permissions (vistest): Table.READ, Table.WRITE, Table.BULK_IMPORT, Table.ALTER_TABLE, Table.GRANT, Table.DROP_TABLE
username@instance vistest>

----------------------------------------

TITLE: Submitting Spark Job with Accumulo Configuration
DESCRIPTION: Command to submit a Spark job with a shaded jar and Accumulo client properties file. This sets up the Spark application to connect to an Accumulo instance.

LANGUAGE: bash
CODE:
$SPARK_HOME/bin/spark-submit \
  --class com.my.spark.job.MainClass \
  --master yarn \
  --deploy-mode client \
  /path/to/spark-job-shaded.jar \
  /path/to/accumulo-client.properties

----------------------------------------

TITLE: Running Sequential Batch Writer
DESCRIPTION: Command to execute the SequentialBatchWriter which writes 10000 entries with 50-byte random values to the batchtest1 table.

LANGUAGE: bash
CODE:
./bin/accumulo org.apache.accumulo.examples.simple.client.SequentialBatchWriter instance zookeepers username password batchtest1 0 10000 50 20000000 500 20 exampleVis

----------------------------------------

TITLE: Creating and Configuring AgeOffFilter in Apache Accumulo (Shell)
DESCRIPTION: This snippet demonstrates creating a table, setting up an AgeOffFilter for scanning with a 30-second time-to-live, inserting data, and observing the filter's effect. It showcases the basic usage of filters in Accumulo.

LANGUAGE: shell
CODE:
username@instance> createtable filtertest
username@instance filtertest> setiter -t filtertest -scan -p 10 -n myfilter -ageoff
AgeOffFilter removes entries with timestamps more than <ttl> milliseconds old
----------> set AgeOffFilter parameter negate, default false keeps k/v that pass accept method, true rejects k/v that pass accept method:
----------> set AgeOffFilter parameter ttl, time to live (milliseconds): 30000
----------> set AgeOffFilter parameter currentTime, if set, use the given value as the absolute time in milliseconds as the current time of day:
username@instance filtertest> scan
username@instance filtertest> insert foo a b c
username@instance filtertest> scan
foo a:b []    c
username@instance filtertest>

----------------------------------------

TITLE: Running InterferenceTest With Isolation
DESCRIPTION: Example showing how running InterferenceTest with isolation enabled prevents inconsistent reads. The command runs for 5000 iterations and demonstrates consistent row values with no errors.

LANGUAGE: bash
CODE:
./bin/accumulo org.apache.accumulo.examples.simple.isolation.InterferenceTest instance zookeepers username password isotest 5000 true

----------------------------------------

TITLE: Executing TeraSort Data Ingestion with MapReduce
DESCRIPTION: Command to run the TeraSortIngest MapReduce job that generates and ingests random data into Accumulo. Parameters control the size and characteristics of the generated data, including key sizes, value sizes, and number of splits.

LANGUAGE: bash
CODE:
bin/tool.sh lib/accumulo-examples-simple.jar org.apache.accumulo.examples.simple.mapreduce.TeraSortIngest \
-i instance -z zookeepers -u user -p password \
--count 10 \
--minKeySize 10 \
--maxKeySize 10 \
--minValueSize 78 \
--maxValueSize 78 \
--table sort \
--splits 10 \

----------------------------------------

TITLE: Creating Authorizations for Accumulo Scanner in Java
DESCRIPTION: Shows how to create an Authorizations object with multiple access levels and use it to initialize a Scanner. This is used when reading data to ensure the client has appropriate access.

LANGUAGE: java
CODE:
// user possesses both admin and system level access
Authorizations auths = new Authorizations("admin","system");

Scanner s = client.createScanner("table", auths);

----------------------------------------

TITLE: Stopping Mini Accumulo Cluster
DESCRIPTION: Code showing how to properly shutdown a Mini Accumulo Cluster instance.

LANGUAGE: java
CODE:
accumulo.stop()
// delete your temporary folder

----------------------------------------

TITLE: Enabling Replication on a Table
DESCRIPTION: Enable replication for a specific table and configure its replication target.

LANGUAGE: console
CODE:
root@accumulo_primary> config -t my_table -s table.replication=true
root@accumulo_primary> config -t my_table -s table.replication.target.accumulo_peer=2

----------------------------------------

TITLE: Inserting Data into Accumulo Table using BatchWriter
DESCRIPTION: Java command to execute the InsertWithBatchWriter class, which inserts 10K rows (50K entries) into the 'hellotable' Accumulo table.

LANGUAGE: shell
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.simple.helloworld.InsertWithBatchWriter -i instance -z zookeepers -u username -p password -t hellotable

----------------------------------------

TITLE: Querying Accumulo Index Table with BatchScanner in Java
DESCRIPTION: Illustrates how to use a BatchScanner to efficiently lookup multiple rowIDs from an index table. It scans the index for matching terms and then retrieves the corresponding rows from the main table.

LANGUAGE: java
CODE:
Text term = new Text("mySearchTerm");

HashSet<Text> matchingRows = new HashSet<Text>();

Scanner indexScanner = createScanner("index", auths);
indexScanner.setRange(new Range(term, term));

// we retrieve the matching rowIDs and create a set of ranges
for(Entry<Key,Value> entry : indexScanner)
    matchingRows.add(new Text(entry.getValue()));

// now we pass the set of rowIDs to the batch scanner to retrieve them
BatchScanner bscan = conn.createBatchScanner("table", auths, 10);

bscan.setRanges(matchingRows);
bscan.fetchFamily("attributes");

for(Entry<Key,Value> entry : scan)
    System.out.println(e.getValue());

----------------------------------------

TITLE: Configuring and Using StatsCombiner in Accumulo Shell
DESCRIPTION: Shell commands demonstrating how to create a table, set up StatsCombiner with different configurations for decimal and hexadecimal bases, and insert/query data. Shows the combiner automatically calculating statistics on numeric values.

LANGUAGE: shell
CODE:
$ bin/accumulo shell -u username
Enter current password for 'username'@'instance': ***

Shell - Apache Accumulo Interactive Shell
- 
- version: 1.4.x
- instance name: instance
- instance id: 00000000-0000-0000-0000-000000000000
- 
- type 'help' for a list of available commands
- 
username@instance> createtable runners
username@instance runners> setiter -t runners -p 10 -scan -minc -majc -n decStats -class org.apache.accumulo.examples.simple.combiner.StatsCombiner
Combiner that keeps track of min, max, sum, and count
----------> set StatsCombiner parameter all, set to true to apply Combiner to every column, otherwise leave blank. if true, columns option will be ignored.: 
----------> set StatsCombiner parameter columns, <col fam>[:<col qual>]{,<col fam>[:<col qual>]} escape non aplhanum chars using %<hex>.: stat
----------> set StatsCombiner parameter radix, radix/base of the numbers: 10
username@instance runners> setiter -t runners -p 11 -scan -minc -majc -n hexStats -class org.apache.accumulo.examples.simple.combiner.StatsCombiner
Combiner that keeps track of min, max, sum, and count
----------> set StatsCombiner parameter all, set to true to apply Combiner to every column, otherwise leave blank. if true, columns option will be ignored.: 
----------> set StatsCombiner parameter columns, <col fam>[:<col qual>]{,<col fam>[:<col qual>]} escape non aplhanum chars using %<hex>.: hstat
----------> set StatsCombiner parameter radix, radix/base of the numbers: 16
username@instance runners> insert 123456 name first Joe
username@instance runners> insert 123456 stat marathon 240
username@instance runners> scan
123456 name:first []    Joe
123456 stat:marathon []    240,240,240,1
username@instance runners> insert 123456 stat marathon 230
username@instance runners> insert 123456 stat marathon 220
username@instance runners> scan
123456 name:first []    Joe
123456 stat:marathon []    220,240,690,3
username@instance runners> insert 123456 hstat virtualMarathon 6a
username@instance runners> insert 123456 hstat virtualMarathon 6b
username@instance runners> scan
123456 hstat:virtualMarathon []    6a,6b,d5,2
123456 name:first []    Joe
123456 stat:marathon []    220,240,690,3

----------------------------------------

TITLE: Scanning and Reading Data
DESCRIPTION: Creates a scanner to read and print all rows from the GothamPD table, using empty authorizations. Demonstrates how to iterate through and display Key-Value pairs.

LANGUAGE: java
CODE:
try (ScannerBase scan = client.createScanner("GothamPD", Authorizations.EMPTY)) {
   System.out.println("Gotham Police Department Persons of Interest:");
   for(Map.Entry<Key, Value> entry : scan) {
     System.out.printf("Key : %-50s  Value : %s\n", entry.getKey(), entry.getValue());
   }
}

----------------------------------------

TITLE: Creating and Populating Accumulo Table
DESCRIPTION: Shell commands showing table creation, data insertion, and split configuration in Accumulo. Demonstrates basic table operations and preparation for export.

LANGUAGE: shell
CODE:
root@test16> createtable table1
root@test16 table1> insert a cf1 cq1 v1
root@test16 table1> insert h cf1 cq1 v2
root@test16 table1> insert z cf1 cq1 v3
root@test16 table1> insert z cf1 cq2 v4
root@test16 table1> addsplits -t table1 b r
root@test16 table1> scan
a cf1:cq1 []    v1
h cf1:cq1 []    v2
z cf1:cq1 []    v3
z cf1:cq2 []    v4
root@test16> config -t table1 -s table.split.threshold=100M
root@test16 table1> clonetable table1 table1_exp
root@test16 table1> offline table1_exp
root@test16 table1> exporttable -t table1_exp /tmp/table1_export
root@test16 table1> quit

----------------------------------------

TITLE: Implementing Reducer for Accumulo Output in Java
DESCRIPTION: Shows how to create a Reducer class to write to an Accumulo table using AccumuloOutputFormat. The Reducer processes WritableComparable-Writable pairs and outputs Text-Mutation pairs, where Text specifies the output table name.

LANGUAGE: java
CODE:
class MyReducer extends Reducer<WritableComparable, Writable, Text, Mutation> {

    public void reduce(WritableComparable key, Iterable<Text> values, Context c) {
        
        Mutation m;
        
        // create the mutation based on input key and value
        
        c.write(new Text("output-table"), m);
    }
}

----------------------------------------

TITLE: Setting User Authorization in Accumulo Shell
DESCRIPTION: Command to set the 'exampleVis' authorization for a user using the Accumulo shell.

LANGUAGE: bash
CODE:
./bin/accumulo shell -u root -e "setauths -u username -s exampleVis"

----------------------------------------

TITLE: Setting Up StatsCombiner in Accumulo Shell
DESCRIPTION: Shell commands showing how to create a table and configure StatsCombiner for both decimal (base 10) and hexadecimal (base 16) statistics calculation. The combiner is applied to 'stat' and 'hstat' column families respectively.

LANGUAGE: shell
CODE:
$ bin/accumulo shell -u username
Enter current password for 'username'@'instance': ***

Shell - Apache Accumulo Interactive Shell
-
- version: 1.7.4
- instance name: instance
- instance id: 00000000-0000-0000-0000-000000000000
-
- type 'help' for a list of available commands
-
username@instance> createtable runners
username@instance runners> setiter -t runners -p 10 -scan -minc -majc -n decStats -class org.apache.accumulo.examples.simple.combiner.StatsCombiner
Combiner that keeps track of min, max, sum, and count
----------> set StatsCombiner parameter all, set to true to apply Combiner to every column, otherwise leave blank. if true, columns option will be ignored.:
----------> set StatsCombiner parameter columns, <col fam>[:<col qual>]{,<col fam>[:<col qual>]} escape non aplhanum chars using %<hex>.: stat
----------> set StatsCombiner parameter radix, radix/base of the numbers: 10
username@instance runners> setiter -t runners -p 11 -scan -minc -majc -n hexStats -class org.apache.accumulo.examples.simple.combiner.StatsCombiner
Combiner that keeps track of min, max, sum, and count
----------> set StatsCombiner parameter all, set to true to apply Combiner to every column, otherwise leave blank. if true, columns option will be ignored.:
----------> set StatsCombiner parameter columns, <col fam>[:<col qual>]{,<col fam>[:<col qual>]} escape non aplhanum chars using %<hex>.: hstat
----------> set StatsCombiner parameter radix, radix/base of the numbers: 16

----------------------------------------

TITLE: Initial AgeOffFilter Setup - Accumulo Shell Commands
DESCRIPTION: Creates a test table and configures an AgeOffFilter for scan operations with a 30-second TTL. Shows basic insert and scan operations to demonstrate the filter's effect.

LANGUAGE: shell
CODE:
username@instance> createtable filtertest
username@instance filtertest> setiter -t filtertest -scan -p 10 -n myfilter -ageoff
AgeOffFilter removes entries with timestamps more than <ttl> milliseconds old
----------> set AgeOffFilter parameter negate, default false keeps k/v that pass accept method, true rejects k/v that pass accept method:
----------> set AgeOffFilter parameter ttl, time to live (milliseconds): 30000
----------> set AgeOffFilter parameter currentTime, if set, use the given value as the absolute time in milliseconds as the current time of day:
username@instance filtertest> scan
username@instance filtertest> insert foo a b c
username@instance filtertest> scan
foo a:b []    c
username@instance filtertest>

----------------------------------------

TITLE: Installing Accumulo Binary
DESCRIPTION: Command to extract the Accumulo tarball to the installation directory specified by $ACCUMULO_HOME.

LANGUAGE: bash
CODE:
$ tar xzf $ACCUMULO_HOME/accumulo.tar.gz

----------------------------------------

TITLE: Executing Accumulo Bulk Ingest Commands
DESCRIPTION: A sequence of shell commands that demonstrate the complete bulk ingest process. Commands include setting up a table with split points, generating test data, performing bulk ingest using MapReduce, and verifying the ingested data. The process requires Accumulo instance name, zookeeper list, username, and password as parameters.

LANGUAGE: shell
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.mapreduce.bulk.SetupTable instance zookeepers username password test_bulk row_00000333 row_00000666
$ ./bin/accumulo org.apache.accumulo.examples.mapreduce.bulk.GenerateTestData 0 1000 bulk/test_1.txt

$ ./bin/tool.sh lib/accumulo-examples-*[^c].jar org.apache.accumulo.examples.mapreduce.bulk.BulkIngestExample instance zookeepers username password test_bulk bulk tmp/bulkWork
$ ./bin/accumulo org.apache.accumulo.examples.mapreduce.bulk.VerifyIngest instance zookeepers username password test_bulk 0 1000

----------------------------------------

TITLE: Implementing Reducer for Accumulo Output in Java
DESCRIPTION: Defines a Reducer class to write to an Accumulo table. The Reducer processes WritableComparable-Writable pairs and outputs Text-Mutation pairs, where the Text specifies the output table name and Mutation contains the data to be written.

LANGUAGE: java
CODE:
class MyReducer extends Reducer<WritableComparable, Writable, Text, Mutation> {

    public void reduce(WritableComparable key, Iterator<Text> values, Context c) {
        
        Mutation m;
        
        // create the mutation based on input key and value
        
        c.write(new Text("output-table"), m);
    }
}

----------------------------------------

TITLE: Creating and Testing Accumulo Table Constraints
DESCRIPTION: This snippet shows how to create a table with constraints in Accumulo, set up AlphaNumKeyConstraint and NumericValueConstraint, and test their effectiveness by attempting various inserts. It demonstrates successful and failed insert attempts based on the defined constraints.

LANGUAGE: shell
CODE:
$ ./bin/accumulo shell -u username -p password

Shell - Apache Accumulo Interactive Shell
- 
- version: 1.4.x
- instance name: instance
- instance id: 00000000-0000-0000-0000-000000000000
- 
- type 'help' for a list of available commands
- 
username@instance> createtable testConstraints
username@instance testConstraints> config -t testConstraints -s table.constraint.1=org.apache.accumulo.examples.simple.constraints.NumericValueConstraint
username@instance testConstraints> config -t testConstraints -s table.constraint.2=org.apache.accumulo.examples.simple.constraints.AlphaNumKeyConstraint
username@instance testConstraints> insert r1 cf1 cq1 1111
username@instance testConstraints> insert r1 cf1 cq1 ABC
  Constraint Failures:
      ConstraintViolationSummary(constrainClass:org.apache.accumulo.examples.simple.constraints.NumericValueConstraint, violationCode:1, violationDescription:Value is not numeric, numberOfViolatingMutations:1)
username@instance testConstraints> insert r1! cf1 cq1 ABC 
  Constraint Failures:
      ConstraintViolationSummary(constrainClass:org.apache.accumulo.examples.simple.constraints.NumericValueConstraint, violationCode:1, violationDescription:Value is not numeric, numberOfViolatingMutations:1)
      ConstraintViolationSummary(constrainClass:org.apache.accumulo.examples.simple.constraints.AlphaNumKeyConstraint, violationCode:1, violationDescription:Row was not alpha numeric, numberOfViolatingMutations:1)
username@instance testConstraints> scan
r1 cf1:cq1 []    1111
username@instance testConstraints>

----------------------------------------

TITLE: Configuring AgeOff Filter in Accumulo
DESCRIPTION: Demonstrates how to set up an AgeOff filter for a table using the Accumulo shell.

LANGUAGE: Shell
CODE:
user@myinstance> createtable filtertest
user@myinstance filtertest> setiter -t filtertest -scan -minc -majc -p 10 -n myfilter -ageoff
AgeOffFilter removes entries with timestamps more than <ttl> milliseconds old
----------> set org.apache.accumulo.core.iterators.user.AgeOffFilter parameter negate, default false keeps k/v that pass accept method, true rejects k/v that pass accept method: 
----------> set org.apache.accumulo.core.iterators.user.AgeOffFilter parameter ttl, time to live (milliseconds): 3000
----------> set org.apache.accumulo.core.iterators.user.AgeOffFilter parameter currentTime, if set, use the given value as the absolute time in milliseconds as the current time of day: 

----------------------------------------

TITLE: Cloning Tables in Accumulo
DESCRIPTION: Shows how to clone a table and perform operations on the clone using the Accumulo shell.

LANGUAGE: Shell
CODE:
root@a14> createtable people
root@a14 people> insert 890435 name last Doe
root@a14 people> insert 890435 name first John
root@a14 people> clonetable people test  
root@a14 people> insert 890436 name first Jane
root@a14 people> insert 890436 name last Doe  
root@a14 people> scan
890435 name:first []    John
890435 name:last []    Doe
890436 name:first []    Jane
890436 name:last []    Doe
root@a14 people> table test
root@a14 test> scan
890435 name:first []    John
890435 name:last []    Doe

----------------------------------------

TITLE: Configuring User Authorizations
DESCRIPTION: Demonstrates setting user authorizations and scanning data with different authorization sets

LANGUAGE: shell
CODE:
username@instance vistest> setauths -s A,B,broccoli -u username
root@instance vistest> user username
Enter password for user username: ********
username@instance vistest> scan
row f1:q1 [A]    v1
row f2:q2 [A&B]    v2
row f3:q3 [(apple&carrot)|broccoli|spinach]    v3
username@instance vistest> scan -s B
username@instance vistest>

----------------------------------------

TITLE: User Administration in Accumulo
DESCRIPTION: Shows user management operations including creating users, authentication, granting and revoking permissions.

LANGUAGE: console
CODE:
root@myinstance mytable> createuser bob
Enter new password for 'bob': *********
Please confirm new password for 'bob': *********

root@myinstance mytable> authenticate bob
Enter current password for 'bob': *********
Valid

root@myinstance mytable> grant System.CREATE_TABLE -s -u bob

root@myinstance mytable> user bob
Enter current password for 'bob': *********

bob@myinstance mytable> userpermissions
System permissions: System.CREATE_TABLE
Table permissions (accumulo.metadata): Table.READ
Table permissions (mytable): NONE

bob@myinstance mytable> createtable bobstable

bob@myinstance bobstable>

bob@myinstance bobstable> user root
Enter current password for 'root': *********

root@myinstance bobstable> revoke System.CREATE_TABLE -s -u bob

----------------------------------------

TITLE: Ingesting File Data into Accumulo
DESCRIPTION: This command uses the FileDataIngest class to archive a file into Accumulo. It specifies the instance, zookeepers, credentials, table name, authorizations, chunk size, and the file to ingest.

LANGUAGE: shell
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.simple.filedata.FileDataIngest -i instance -z zookeepers -u username -p password -t dataTable --auths exampleVis --chunk 1000 $ACCUMULO_HOME/README

----------------------------------------

TITLE: Granting System Permissions
DESCRIPTION: Shows how to grant table creation permissions to a user and verify the updated permissions. Demonstrates the process of switching between root and regular user contexts.

LANGUAGE: shell
CODE:
username@instance> user root
Enter password for user root: ********
root@instance> grant -s System.CREATE_TABLE -u username
root@instance> user username
Enter password for user username: ********
username@instance> createtable vistest
username@instance> userpermissions

----------------------------------------

TITLE: Configuring Aggregating Iterator
DESCRIPTION: Shows how to configure an aggregating iterator for a table using the Accumulo shell and demonstrates its effect on data.

LANGUAGE: shell
CODE:
user@myinstance> createtable perDayCounts -a
day=org.apache.accumulo.core.iterators.aggregation.StringSummation

user@myinstance perDayCounts> insert row1 day 20080101 1
user@myinstance perDayCounts> insert row1 day 20080101 1
user@myinstance perDayCounts> insert row1 day 20080103 1
user@myinstance perDayCounts> insert row2 day 20080101 1
user@myinstance perDayCounts> insert row3 day 20080101 1

user@myinstance perDayCounts> scan
row1 day:20080101 [] 2
row1 day:20080103 [] 1
row2 day:20080101 [] 2

----------------------------------------

TITLE: Querying Existing Values with RandomBatchScanner
DESCRIPTION: Command to perform 500 random queries against the table using the same seed as data insertion.

LANGUAGE: bash
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.client.RandomBatchScanner -s 7 instance zookeepers username password bloom_test 500 0 1000000000 50 20 exampleVis

----------------------------------------

TITLE: Running TeraSortIngest MapReduce Job in Accumulo
DESCRIPTION: Command to run the TeraSortIngest MapReduce job that generates and stores random data in Accumulo. Includes parameters for controlling data size, key/value sizes, and table configuration.

LANGUAGE: shell
CODE:
bin/tool.sh lib/accumulo-examples-simple.jar org.apache.accumulo.examples.simple.mapreduce.TeraSortIngest \
-i instance -z zookeepers -u user -p password \
--count 10 \
--minKeySize 10 \
--maxKeySize 10 \
--minValueSize 78 \
--maxValueSize 78 \
--table sort \
--splits 10 \

----------------------------------------

TITLE: Configuring a Combiner in Accumulo
DESCRIPTION: Shows how to set up a SummingCombiner for a table using the Accumulo shell.

LANGUAGE: Shell
CODE:
root@a14 perDayCounts> setiter -t perDayCounts -p 10 -scan -minc -majc -n daycount 
                           -class org.apache.accumulo.core.iterators.user.SummingCombiner
TypedValueCombiner can interpret Values as a variety of number encodings 
  (VLong, Long, or String) before combining
----------> set SummingCombiner parameter columns, 
            <col fam>[:<col qual>]{,<col fam>[:<col qual>]} : day
----------> set SummingCombiner parameter type, <VARNUM|LONG|STRING>: STRING

----------------------------------------

TITLE: Configuring AccumuloOutputFormat in Java
DESCRIPTION: Shows how to set up AccumuloOutputFormat options for a MapReduce job. This includes specifying user credentials, default table, and Zookeeper instance details. Optional settings for latency and mutation buffer size are also demonstrated.

LANGUAGE: java
CODE:
boolean createTables = true;
String defaultTable = "mytable";

AccumuloOutputFormat.setOutputInfo(job,
        "user",
        "passwd".getBytes(),
        createTables,
        defaultTable);

AccumuloOutputFormat.setZooKeeperInstance(job, "myinstance",
        "zooserver-one,zooserver-two");

// Optional Settings:
AccumuloOutputFormat.setMaxLatency(job, 300); // milliseconds
AccumuloOutputFormat.setMaxMutationBufferSize(job, 5000000); // bytes

----------------------------------------

TITLE: Enabling Visibility Constraint for Accumulo Table
DESCRIPTION: This shell command demonstrates how to add a visibility constraint to an existing Accumulo table. It configures the table to use the VisibilityConstraint class to prevent users from writing data they cannot read.

LANGUAGE: shell
CODE:
config -t table -s table.constraint.1=org.apache.accumulo.core.security.VisibilityConstraint

----------------------------------------

TITLE: Flushing Accumulo Table
DESCRIPTION: Flushes the 'bloom_test' table to ensure all data is written to disk before querying.

LANGUAGE: shell
CODE:
$ ./bin/accumulo shell -u username -p password -e 'flush -t bloom_test -w'
05 10:40:06,069 [shell.Shell] INFO : Flush of table bloom_test completed.

----------------------------------------

TITLE: Modifying Multiple System Properties with Java API
DESCRIPTION: Shows how to add, modify, and remove multiple system properties in a single operation using the Accumulo Java API.

LANGUAGE: java
CODE:
client.instanceOperations().modifyProperties(properties -> {
  properties.remove("table.file.max");
  properties.put("table.bloom.enabled", "true");
  properties.put("table.bloom.error.rate", "0.75");
  properties.put("table.bloom.size", "128000");
});

----------------------------------------

TITLE: User Administration in Accumulo Shell
DESCRIPTION: Demonstrates user administration tasks including creating users, authenticating, granting permissions, and revoking permissions using the Accumulo Shell.

LANGUAGE: shell
CODE:
root@myinstance mytable> createuser bob
Enter new password for 'bob': *********
Please confirm new password for 'bob': *********

root@myinstance mytable> authenticate bob
Enter current password for 'bob': *********
Valid

root@myinstance mytable> grant System.CREATE_TABLE -s -u bob

root@myinstance mytable> user bob
Enter current password for 'bob': *********

bob@myinstance mytable> userpermissions
System permissions: System.CREATE_TABLE
Table permissions (!METADATA): Table.READ
Table permissions (mytable): NONE

bob@myinstance mytable> createtable bobstable
bob@myinstance bobstable>

bob@myinstance bobstable> user root
Enter current password for 'root': *********

root@myinstance bobstable> revoke System.CREATE_TABLE -s -u bob

----------------------------------------

TITLE: Sample FATE ZooKeeper Paths
DESCRIPTION: Concrete examples of FATE transaction paths in ZooKeeper, showing the structure for transaction data, debug information, and REPOs.

LANGUAGE: plaintext
CODE:
/accumulo/dcbf6855-8eac-4b44-a4a9-7ad39caafe9a/fate/tx_4dd46d49d60f1a17
/accumulo/dcbf6855-8eac-4b44-a4a9-7ad39caafe9a/fate/tx_4dd46d49d60f1a17/debug
/accumulo/dcbf6855-8eac-4b44-a4a9-7ad39caafe9a/fate/tx_4dd46d49d60f1a17/repo_0000000002
/accumulo/dcbf6855-8eac-4b44-a4a9-7ad39caafe9a/fate/tx_4dd46d49d60f1a17/repo_0000000000

----------------------------------------

TITLE: Creating Accumulo Table with Combiner
DESCRIPTION: This snippet demonstrates how to create an Accumulo table named 'wordCount' and set up a SummingCombiner for the 'count' column family.

LANGUAGE: shell
CODE:
$ ./bin/accumulo shell -u username -p password
Shell - Apache Accumulo Interactive Shell
- version: 1.7.4
- instance name: instance
- instance id: 00000000-0000-0000-0000-000000000000
-
- type 'help' for a list of available commands
-
username@instance> createtable wordCount
username@instance wordCount> setiter -class org.apache.accumulo.core.iterators.user.SummingCombiner -p 10 -t wordCount -majc -minc -scan
SummingCombiner interprets Values as Longs and adds them together. A variety of encodings (variable length, fixed length, or string) are available
----------> set SummingCombiner parameter all, set to true to apply Combiner to every column, otherwise leave blank. if true, columns option will be ignored.: false
----------> set SummingCombiner parameter columns, <col fam>[:<col qual>]{,<col fam>[:<col qual>]} escape non-alphanum chars using %<hex>.: count
----------> set SummingCombiner parameter lossy, if true, failed decodes are ignored. Otherwise combiner will error on failed decodes (default false): <TRUE|FALSE>: false
----------> set SummingCombiner parameter type, <VARLEN|FIXEDLEN|STRING|fullClassName>: STRING
username@instance wordCount> quit

----------------------------------------

TITLE: Configuring Constraints in Accumulo
DESCRIPTION: Demonstrates how to set up constraints on an Accumulo table using the shell interface.

LANGUAGE: Shell
CODE:
user@myinstance mytable> config -t mytable -s table.constraint.1=com.test.ExampleConstraint
user@myinstance mytable> config -t mytable -s table.constraint.2=com.test.AnotherConstraint
user@myinstance mytable> config -t mytable -f constraint

----------------------------------------

TITLE: Deleting a Range of Data in Accumulo
DESCRIPTION: Demonstrates how to delete a range of data from a table using the Accumulo shell.

LANGUAGE: Shell
CODE:
root@myinstance> deleterange -t myTable -s 2010 -e 2011

root@myinstance> deleterange -t myTable -e 2011 --force

----------------------------------------

TITLE: Creating AccumuloClient with KerberosToken in Java
DESCRIPTION: Java code snippet showing how to create an AccumuloClient object using a KerberosToken for authentication.

LANGUAGE: java
CODE:
KerberosToken token = new KerberosToken();
AccumuloClient client = Accumulo.newClient().to("myinstance", "zookeeper1,zookeper2")
                              .as(token.getPrincipal(), token).build();

----------------------------------------

TITLE: Installing Accumulo 1.x from Binary Distribution
DESCRIPTION: Commands to unpack the Accumulo binary distribution in the installation location. This is the first step in setting up Accumulo.

LANGUAGE: bash
CODE:
cd <install_location>
tar xzf <some_dir>/accumulo-X.Y.Z-bin.tar.gz
cd accumulo-X.Y.Z

----------------------------------------

TITLE: Creating and Testing Accumulo Table Constraints via Shell Commands
DESCRIPTION: Shell commands demonstrating the creation of a table with alphanumeric key and numeric value constraints, followed by test insertions that show constraint enforcement. The example shows both valid and invalid insert attempts.

LANGUAGE: shell
CODE:
$ ./bin/accumulo shell -u username -p password

Shell - Apache Accumulo Interactive Shell
-
- version: 1.6.0
- instance name: instance
- instance id: 00000000-0000-0000-0000-000000000000
-
- type 'help' for a list of available commands
-
username@instance> createtable testConstraints
username@instance testConstraints> constraint -a org.apache.accumulo.examples.simple.constraints.NumericValueConstraint
username@instance testConstraints> constraint -a org.apache.accumulo.examples.simple.constraints.AlphaNumKeyConstraint
username@instance testConstraints> insert r1 cf1 cq1 1111
username@instance testConstraints> insert r1 cf1 cq1 ABC
  Constraint Failures:
      ConstraintViolationSummary(constrainClass:org.apache.accumulo.examples.simple.constraints.NumericValueConstraint, violationCode:1, violationDescription:Value is not numeric, numberOfViolatingMutations:1)
username@instance testConstraints> insert r1! cf1 cq1 ABC
  Constraint Failures:
      ConstraintViolationSummary(constrainClass:org.apache.accumulo.examples.simple.constraints.NumericValueConstraint, violationCode:1, violationDescription:Value is not numeric, numberOfViolatingMutations:1)
      ConstraintViolationSummary(constrainClass:org.apache.accumulo.examples.simple.constraints.AlphaNumKeyConstraint, violationCode:1, violationDescription:Row was not alpha numeric, numberOfViolatingMutations:1)
username@instance testConstraints> scan
r1 cf1:cq1 []    1111
username@instance testConstraints>

----------------------------------------

TITLE: Creating and Testing Accumulo Table Constraints via Shell Commands
DESCRIPTION: Shell commands demonstrating the creation of a table with alphanumeric key and numeric value constraints, followed by test insertions that show constraint enforcement. The example shows both valid and invalid insert attempts.

LANGUAGE: shell
CODE:
$ ./bin/accumulo shell -u username -p password

Shell - Apache Accumulo Interactive Shell
-
- version: 1.6.0
- instance name: instance
- instance id: 00000000-0000-0000-0000-000000000000
-
- type 'help' for a list of available commands
-
username@instance> createtable testConstraints
username@instance testConstraints> constraint -a org.apache.accumulo.examples.simple.constraints.NumericValueConstraint
username@instance testConstraints> constraint -a org.apache.accumulo.examples.simple.constraints.AlphaNumKeyConstraint
username@instance testConstraints> insert r1 cf1 cq1 1111
username@instance testConstraints> insert r1 cf1 cq1 ABC
  Constraint Failures:
      ConstraintViolationSummary(constrainClass:org.apache.accumulo.examples.simple.constraints.NumericValueConstraint, violationCode:1, violationDescription:Value is not numeric, numberOfViolatingMutations:1)
username@instance testConstraints> insert r1! cf1 cq1 ABC
  Constraint Failures:
      ConstraintViolationSummary(constrainClass:org.apache.accumulo.examples.simple.constraints.NumericValueConstraint, violationCode:1, violationDescription:Value is not numeric, numberOfViolatingMutations:1)
      ConstraintViolationSummary(constrainClass:org.apache.accumulo.examples.simple.constraints.AlphaNumKeyConstraint, violationCode:1, violationDescription:Row was not alpha numeric, numberOfViolatingMutations:1)
username@instance testConstraints> scan
r1 cf1:cq1 []    1111
username@instance testConstraints>

----------------------------------------

TITLE: Running InterferenceTest Without Isolation
DESCRIPTION: Example command showing how to run the InterferenceTest program without isolation enabled for 5000 iterations. This demonstrates inconsistent row reads where multiple values are visible during concurrent updates.

LANGUAGE: bash
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.simple.isolation.InterferenceTest -i instance -z zookeepers -u username -p password -t isotest --iterations 5000

----------------------------------------

TITLE: Reading from Accumulo Table using AccumuloInputFormat in Spark
DESCRIPTION: Java code snippet demonstrating how to read data from an Accumulo table using AccumuloInputFormat in a Spark application. It configures the job and creates a JavaPairRDD containing Key-Value pairs from the Accumulo table.

LANGUAGE: java
CODE:
Job job = Job.getInstance();
AccumuloInputFormat.configure().clientProperties(props).table(inputTable).store(job);
JavaPairRDD<Key,Value> data = sc.newAPIHadoopRDD(job.getConfiguration(),
    AccumuloInputFormat.class, Key.class, Value.class);

----------------------------------------

TITLE: Configuring NameNode URI Replacements in Accumulo
DESCRIPTION: Configuration setting for replacing old NameNode URIs with new ones in Accumulo metadata. This is used when NameNode locations change and requires an Accumulo restart to take effect.

LANGUAGE: properties
CODE:
instance.volumes.replacements=hdfs://ns1:9001 hdfs://nsA:9001, hdfs://ns2:9001 hdfs://nsB:9001

----------------------------------------

TITLE: Inserting data with MapReduce in Java
DESCRIPTION: This command runs a Java program that inserts data into Accumulo using MapReduce writers, providing an alternative to BatchWriter.

LANGUAGE: shell
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.helloworld.InsertWithOutputFormat instance zookeepers hellotable username password

----------------------------------------

TITLE: Multi-File Table Creation without Bloom Filters
DESCRIPTION: Shows the process of creating a table with multiple files without bloom filters, including configuration and data insertion steps.

LANGUAGE: shell
CODE:
$ ARGS="-i instance -z zookeepers -u username -p password -t bloom_test1 --num 1000000 --min 0 --max 1000000000 --size 50 --batchMemory 2M --batchLatency 60s --batchThreads 3 --vis exampleVis"
$ ./bin/accumulo org.apache.accumulo.examples.simple.client.RandomBatchWriter --seed 7 $ARGS
$ ./bin/accumulo shell -u username -p password -e 'flush -t bloom_test1 -w'

----------------------------------------

TITLE: Inserting Data with BatchWriter
DESCRIPTION: Java command to run InsertWithBatchWriter class which inserts 50K entries into the hellotable using BatchWriter.

LANGUAGE: shell
CODE:
./bin/accumulo org.apache.accumulo.examples.simple.helloworld.InsertWithBatchWriter -i instance -z zookeepers -u username -p password -t hellotable

----------------------------------------

TITLE: Setting Iterators via the Accumulo Shell
DESCRIPTION: Demonstrates how to set iterators for a table using the Accumulo shell command.

LANGUAGE: Shell
CODE:
user@myinstance mytable> setiter -t mytable -scan -p 10 -n myiter

----------------------------------------

TITLE: Creating Accumulo Table with SummingCombiner for Word Count
DESCRIPTION: This snippet shows how to create an Accumulo table named 'wordCount' and set up a SummingCombiner iterator for the 'count' column family. This is necessary for aggregating word counts in the MapReduce job.

LANGUAGE: shell
CODE:
$ ./bin/accumulo shell -u username -p password
Shell - Apache Accumulo Interactive Shell
- version: 1.6.0
- instance name: instance
- instance id: 00000000-0000-0000-0000-000000000000
-
- type 'help' for a list of available commands
-
username@instance> createtable wordCount
username@instance wordCount> setiter -class org.apache.accumulo.core.iterators.user.SummingCombiner -p 10 -t wordCount -majc -minc -scan
SummingCombiner interprets Values as Longs and adds them together. A variety of encodings (variable length, fixed length, or string) are available
----------> set SummingCombiner parameter all, set to true to apply Combiner to every column, otherwise leave blank. if true, columns option will be ignored.: false
----------> set SummingCombiner parameter columns, <col fam>[:<col qual>]{,<col fam>[:<col qual>]} escape non-alphanum chars using %<hex>.: count
----------> set SummingCombiner parameter lossy, if true, failed decodes are ignored. Otherwise combiner will error on failed decodes (default false): <TRUE|FALSE>: false
----------> set SummingCombiner parameter type, <VARLEN|FIXEDLEN|STRING|fullClassName>: STRING
username@instance wordCount> quit

----------------------------------------

TITLE: Setting User Authorizations in Accumulo Shell
DESCRIPTION: This command uses the Accumulo shell to set authorizations for a user, allowing them to view data with specific visibility labels.

LANGUAGE: bash
CODE:
$ ./bin/accumulo shell -u root -e 'setauths -u username -s exampleVis'

----------------------------------------

TITLE: Running InterferenceTest With Isolation
DESCRIPTION: Example command showing how to run the InterferenceTest program with isolation enabled for 5000 iterations. This demonstrates consistent row reads where concurrent updates do not cause inconsistent views.

LANGUAGE: bash
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.simple.isolation.InterferenceTest -i instance -z zookeepers -u username -p password -t isotest --iterations 5000 --isolated

----------------------------------------

TITLE: Running Apache Accumulo Reservation System (ARS) Example
DESCRIPTION: This snippet demonstrates how to run the Apache Accumulo Reservation System example from the command line. It shows various commands for reserving, canceling, and listing reservations for a room.

LANGUAGE: bash
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.simple.reservations.ARS
>connect test16 localhost root secret ars
  connected
>
  Commands :
    reserve <what> <when> <who> {who}
    cancel <what> <when> <who>
    list <what> <when>
>reserve room06 20140101 alice bob eve mallory trent
                   bob : RESERVED
               mallory : WAIT_LISTED
                 alice : WAIT_LISTED
                 trent : WAIT_LISTED
                   eve : WAIT_LISTED
>list room06 20140101
  Reservation holder : bob
  Wait list : [mallory, alice, trent, eve]
>cancel room06 20140101 alice
>cancel room06 20140101 bob
>list room06 20140101
  Reservation holder : mallory
  Wait list : [trent, eve]
>quit

----------------------------------------

TITLE: Listing HDFS Erasure Coding Policies - Bash Command
DESCRIPTION: Shows how to list configured EC policies in HDFS using the hdfs ec command. Displays enabled and disabled policies with their configurations.

LANGUAGE: bash
CODE:
$ hdfs ec -listPolicies

----------------------------------------

TITLE: Listing Accumulo 2.0.0 Scripts
DESCRIPTION: Shows the simplified bin directory contents in Accumulo 2.0.0, with only 4 consolidated scripts.

LANGUAGE: bash
CODE:
$ ls accumulo-2.0.0/bin/
accumulo  accumulo-cluster  accumulo-service  accumulo-util

----------------------------------------

TITLE: Setting Up AgeOffFilter in Accumulo
DESCRIPTION: Shows the basic setup of AgeOffFilter on a new table including table creation and iterator setup with a 30-second TTL.

LANGUAGE: shell
CODE:
username@instance> createtable filtertest
username@instance filtertest> setiter -t filtertest -scan -p 10 -n myfilter -ageoff
AgeOffFilter removes entries with timestamps more than <ttl> milliseconds old
----------> set AgeOffFilter parameter negate, default false keeps k/v that pass accept method, true rejects k/v that pass accept method: 
----------> set AgeOffFilter parameter ttl, time to live (milliseconds): 30000
----------> set AgeOffFilter parameter currentTime, if set, use the given value as the absolute time in milliseconds as the current time of day: 
username@instance filtertest> scan
username@instance filtertest> insert foo a b c
username@instance filtertest> scan
foo a:b []    c
username@instance filtertest> scan
username@instance filtertest>

----------------------------------------

TITLE: Querying Accumulo Shard Index for Terms
DESCRIPTION: Command to query the shard index for files containing specific terms ('foo' and 'bar') using the Query.java program.

LANGUAGE: bash
CODE:
$ cd $ACCUMULO_HOME
$ ./bin/accumulo org.apache.accumulo.examples.simple.shard.Query -i instance -z zookeepers -t shard -u username -p password foo bar

----------------------------------------

TITLE: Reading and Writing Rows in Accumulo using Java Client
DESCRIPTION: This example uses the RowOperations class to demonstrate reading and writing rows using BatchWriter and Scanner. It shows the output of various row operations.

LANGUAGE: Bash
CODE:
$ bin/accumulo $PACKAGE.RowOperations -u root -p mypassword -i instance -z zookeeper

----------------------------------------

TITLE: Managing Locality Groups via the Accumulo Java Client API
DESCRIPTION: Shows how to programmatically set locality groups for a table using the Accumulo Java client API.

LANGUAGE: Java
CODE:
Connector conn;

HashMap<String,Set<Text>> localityGroups =
    new HashMap<String, Set<Text>>();

HashSet<Text> metadataColumns = new HashSet<Text>();
metadataColumns.add(new Text("domain"));
metadataColumns.add(new Text("link"));

HashSet<Text> contentColumns = new HashSet<Text>();
contentColumns.add(new Text("body"));
contentColumns.add(new Text("images"));

localityGroups.put("metadata", metadataColumns);
localityGroups.put("content", contentColumns);

conn.tableOperations().setLocalityGroups("mytable", localityGroups);

// existing locality groups can be obtained as follows
Map<String, Set<Text>> groups =
    conn.tableOperations().getLocalityGroups("mytable");

----------------------------------------

TITLE: Using listtablets Shell Command in Accumulo
DESCRIPTION: Examples of using the new listtablets command in the Accumulo shell to display detailed tablet information.

LANGUAGE: shell
CODE:
root@uno> listtablets -t test_ingest -h
2021-01-04T15:12:47,663 [Shell.audit] INFO : root@uno> listtablets -t test_ingest -h
NUM  TABLET_DIR      FILES WALS  ENTRIES   SIZE      STATUS     LOCATION                       ID    START (Exclusive)    END
TABLE: test_ingest
1    t-0000007       1     0            60       552 HOSTED     CURRENT:ip-10-113-12-25:9997   2     -INF                 row_0000000005
2    t-0000006       1     0           500     2.71K HOSTED     CURRENT:ip-10-113-12-25:9997   2     row_0000000005       row_0000000055
3    t-0000008       1     0         5.00K    24.74K HOSTED     CURRENT:ip-10-113-12-25:9997   2     row_0000000055       row_0000000555
4    default_tablet  1     0         4.44K    22.01K HOSTED     CURRENT:ip-10-113-12-25:9997   2     row_0000000555       +INF
root@uno> listtablets -t accumulo.metadata
2021-01-04T15:13:21,750 [Shell.audit] INFO : root@uno> listtablets -t accumulo.metadata
NUM  TABLET_DIR      FILES WALS  ENTRIES   SIZE      STATUS     LOCATION                       ID    START (Exclusive)    END
TABLE: accumulo.metadata
1    table_info      2     0     7         524       HOSTED     CURRENT:ip-10-113-12-25:9997   !0    -INF                 ~
2    default_tablet  0     0     0         0         HOSTED     CURRENT:ip-10-113-12-25:9997   !0    ~                    +INF

----------------------------------------

TITLE: Granting Metadata Table Write Permissions in Accumulo Shell
DESCRIPTION: This Accumulo shell command grants write permissions on the metadata table to the root user, allowing for manual modifications.

LANGUAGE: shell
CODE:
shell> grant -u root Table.WRITE -t accumulo.metadata

----------------------------------------

TITLE: Configuring ClassLoader Context in Accumulo Properties
DESCRIPTION: Example of specifying a ClassLoader context in the Accumulo properties file.

LANGUAGE: properties
CODE:
# Application A classpath, loads jars from HDFS and local file system
general.vfs.context.classpath.app1=hdfs://localhost:8020/applicationA/classpath/.*.jar,file:///opt/applicationA/lib/.*.jar

----------------------------------------

TITLE: Running Accumulo Reservation System Example
DESCRIPTION: This snippet shows how to run the Accumulo Reservation System (ARS) example and interact with it using various commands. It demonstrates reserving a room for multiple users, listing reservations, and canceling reservations.

LANGUAGE: shell
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.simple.reservations.ARS
>connect test16 localhost root secret ars
  connected
>
  Commands :
    reserve <what> <when> <who> {who}
    cancel <what> <when> <who>
    list <what> <when>
>reserve room06 20140101 alice bob eve mallory trent
                   bob : RESERVED
               mallory : WAIT_LISTED
                 alice : WAIT_LISTED
                 trent : WAIT_LISTED
                   eve : WAIT_LISTED
>list room06 20140101
  Reservation holder : bob
  Wait list : [mallory, alice, trent, eve]
>cancel room06 20140101 alice
>cancel room06 20140101 bob
>list room06 20140101
  Reservation holder : mallory
  Wait list : [trent, eve]
>quit

----------------------------------------

TITLE: Inserting Random Data into Accumulo Table
DESCRIPTION: Inserts 1 million random values into the 'bloom_test' table using RandomBatchWriter. Rows range from 0 to 1 billion, with a random seed of 7.

LANGUAGE: shell
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.simple.client.RandomBatchWriter -s 7 instance zookeepers username password bloom_test 1000000 0 1000000000 50 2000000 60000 3 exampleVis

----------------------------------------

TITLE: Scanning table in Accumulo shell
DESCRIPTION: These commands select the 'hellotable' and perform a scan to view all entries in the Accumulo shell.

LANGUAGE: shell
CODE:
username@instance> table hellotable
username@instance hellotable> scan

----------------------------------------

TITLE: Implementing Custom CryptoService Interface in Java
DESCRIPTION: Provides the interface methods required for implementing a custom CryptoService in Accumulo. This interface is part of the Accumulo API.

LANGUAGE: java
CODE:
public interface CryptoService {
  void init(Map<String,String> conf) throws CryptoException;
  FileEncrypter getFileEncrypter(CryptoEnvironment environment);
  FileDecrypter getFileDecrypter(CryptoEnvironment environment);
}

----------------------------------------

TITLE: Inserting Random Data into Accumulo Table
DESCRIPTION: This snippet demonstrates how to insert 1 million random values into the 'bloom_test' table using the RandomBatchWriter example class.

LANGUAGE: shell
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.simple.client.RandomBatchWriter --seed 7 -i instance -z zookeepers -u username -p password -t bloom_test --num 1000000 --min 0 --max 1000000000 --size 50 --batchMemory 2M --batchLatency 60s --batchThreads 3 --vis exampleVis

----------------------------------------

TITLE: Viewing User Permissions in Accumulo Shell
DESCRIPTION: Illustrates how to list all permissions for a user named 'bob' using the Accumulo shell, including system, namespace, and table permissions.

LANGUAGE: console
CODE:
root@uno> userpermissions -u bob
System permissions: System.CREATE_TABLE, System.DROP_TABLE

Namespace permissions (accumulo): Namespace.READ

Table permissions (accumulo.metadata): Table.READ
Table permissions (accumulo.replication): Table.READ
Table permissions (accumulo.root): Table.READ

----------------------------------------

TITLE: Displaying Help for Accumulo Shell Commands
DESCRIPTION: Shows how to get help information for Accumulo shell commands using the '?' command. This provides details on command usage, options, and descriptions.

LANGUAGE: shell
CODE:
? [ <command> <command> ] [-?] [-np] [-nw]

----------------------------------------

TITLE: Scanning Accumulo Table for Updated Data
DESCRIPTION: This Accumulo shell command scans the dataTable again to view the updated data, including the histogram stored in the 'info' column family.

LANGUAGE: Accumulo Shell
CODE:
> scan -t dataTable

----------------------------------------

TITLE: Downloading and Extracting Accumulo Binary Distribution
DESCRIPTION: Commands to download and extract the Accumulo binary distribution to an installation directory.

LANGUAGE: bash
CODE:
cd <install directory>
tar xzf accumulo-{{ page.latest_release }}-bin.tar.gz
cd accumulo-{{ page.latest_release }}

----------------------------------------

TITLE: Shard Table Sampling Configuration
DESCRIPTION: Configures sampling for a shard table using RowColumnSampler with specific parameters for document indexing purposes. Includes compaction command to rebuild sample data.

LANGUAGE: shell
CODE:
config -t shard -s table.sampler.opt.hasher=murmur3_32
config -t shard -s table.sampler.opt.modulus=101
config -t shard -s table.sampler.opt.qualifier=true
config -t shard -s table.sampler=org.apache.accumulo.core.client.sample.RowColumnSampler
compact -t shard --sf-no-sample -w

----------------------------------------

TITLE: Running Word Count MapReduce Job with Accumulo in Bash
DESCRIPTION: This snippet shows how to execute the word count MapReduce job using the Accumulo examples jar file.

LANGUAGE: bash
CODE:
$ bin/tool.sh lib/accumulo-examples-simple.jar org.apache.accumulo.examples.simple.mapreduce.WordCount -i instance -z zookeepers  --input /user/username/wc -t wordCount -u username -p password

11/02/07 18:20:11 INFO input.FileInputFormat: Total input paths to process : 1
11/02/07 18:20:12 INFO mapred.JobClient: Running job: job_201102071740_0003
11/02/07 18:20:13 INFO mapred.JobClient:  map 0% reduce 0%
11/02/07 18:20:20 INFO mapred.JobClient:  map 100% reduce 0%
11/02/07 18:20:22 INFO mapred.JobClient: Job complete: job_201102071740_0003
11/02/07 18:20:22 INFO mapred.JobClient: Counters: 6
11/02/07 18:20:22 INFO mapred.JobClient:   Job Counters
11/02/07 18:20:22 INFO mapred.JobClient:     Launched map tasks=1
11/02/07 18:20:22 INFO mapred.JobClient:     Data-local map tasks=1
11/02/07 18:20:22 INFO mapred.JobClient:   FileSystemCounters
11/02/07 18:20:22 INFO mapred.JobClient:     HDFS_BYTES_READ=10487
11/02/07 18:20:22 INFO mapred.JobClient:   Map-Reduce Framework
11/02/07 18:20:22 INFO mapred.JobClient:     Map input records=255
11/02/07 18:20:22 INFO mapred.JobClient:     Spilled Records=0
11/02/07 18:20:22 INFO mapred.JobClient:     Map output records=1452

----------------------------------------

TITLE: Reading data range with Java program
DESCRIPTION: This command runs a Java program that reads all data between two specified rows (row_0 and row_1001) from the 'hellotable'.

LANGUAGE: shell
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.helloworld.ReadData instance zookeepers hellotable username password row_0 row_1001

----------------------------------------

TITLE: Configuring Classpath Context
DESCRIPTION: Sets up the VFS classpath context in Accumulo to reference the jar in HDFS.

LANGUAGE: shell
CODE:
config -s general.vfs.context.classpath.cx1=hdfs://<namenode host>:<namenode port>/user1/lib

----------------------------------------

TITLE: Running InterferenceTest without Isolation in Accumulo
DESCRIPTION: This command executes the InterferenceTest program without isolation for 5000 iterations. It demonstrates how scanning without isolation can lead to inconsistent views of the data during concurrent updates.

LANGUAGE: bash
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.simple.isolation.InterferenceTest -i instance -z zookeepers -u username -p password -t isotest --iterations 5000

----------------------------------------

TITLE: Running SequentialBatchWriter in Accumulo
DESCRIPTION: This command executes the SequentialBatchWriter class to write 10000 entries with random 50-byte values to the 'batchtest1' table.

LANGUAGE: bash
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.simple.client.SequentialBatchWriter -i instance -z zookeepers -u username -p password -t batchtest1 --start 0 --num 10000 --size 50 --batchMemory 20M --batchLatency 500 --batchThreads 20 --vis exampleVis

----------------------------------------

TITLE: Authenticating Users in Accumulo Shell
DESCRIPTION: This snippet demonstrates how to authenticate a user named 'bob' using the Accumulo shell. It prompts for the user's password and confirms if it's valid.

LANGUAGE: console
CODE:
root@myinstance mytable> authenticate bob
Enter current password for 'bob': ****
Valid

----------------------------------------

TITLE: Importing Bulk Data using Accumulo Shell
DESCRIPTION: Command to import bulk data files into Accumulo from HDFS directories, with support for handling failed imports.

LANGUAGE: shell
CODE:
user@myinstance mytable> importdirectory /files_dir /failures

----------------------------------------

TITLE: Inserting Sample Data into Accumulo Table
DESCRIPTION: This snippet shows how to use the Accumulo shell to create a table and insert sample data for the Table-to-File example.

LANGUAGE: shell
CODE:
$ ./bin/accumulo shell -u username -p password
Shell - Apache Accumulo Interactive Shell
- version: 1.6.0
- instance name: instance
- instance id: 00000000-0000-0000-0000-000000000000
-
- type 'help' for a list of available commands
-
username@instance> createtable input
username@instance> insert dog cf cq dogvalue
username@instance> insert cat cf cq catvalue
username@instance> insert junk family qualifier junkvalue
username@instance> quit

----------------------------------------

TITLE: ZooKeeper Path Structure for FATE Transactions
DESCRIPTION: Example of the ZooKeeper path structure used to store FATE transaction data, including the transaction ID and associated REPOs.

LANGUAGE: plaintext
CODE:
/accumulo/[INSTANCE_ID]/fate/tx_[TXID]

----------------------------------------

TITLE: Configuring ZooKeeper and Write-Ahead Log in Accumulo
DESCRIPTION: XML configuration snippet for specifying ZooKeeper servers and the write-ahead log directory in Accumulo's accumulo-site.xml file.

LANGUAGE: xml
CODE:
<property>
    <name>zookeeper</name>
    <value>zooserver-one:2181,zooserver-two:2181</value>
    <description>list of zookeeper servers</description>
</property>
<property>
    <name>walog</name>
    <value>/var/accumulo/walogs</value>
    <description>local directory for write ahead logs</description>
</property>

----------------------------------------

TITLE: Configuring ZooKeeper and Write-Ahead Log in Accumulo
DESCRIPTION: XML configuration snippet for specifying ZooKeeper servers and the write-ahead log directory in Accumulo's accumulo-site.xml file.

LANGUAGE: xml
CODE:
<property>
    <name>zookeeper</name>
    <value>zooserver-one:2181,zooserver-two:2181</value>
    <description>list of zookeeper servers</description>
</property>
<property>
    <name>walog</name>
    <value>/var/accumulo/walogs</value>
    <description>local directory for write ahead logs</description>
</property>

----------------------------------------

TITLE: Verifying Results in Accumulo Shell
DESCRIPTION: Shell commands to scan the table and verify the computed row hashes have been stored.

LANGUAGE: shell
CODE:
$ ./bin/accumulo shell -u username -p password
Shell - Apache Accumulo Interactive Shell
- version: 1.5.0
- instance name: instance
- instance id: 00000000-0000-0000-0000-000000000000
-
- type 'help' for a list of available commands
-
username@instance> scan -t input
a-row cf:cq []    value
a-row cf-HASHTYPE:cq-MD5BASE64 []    IGPBYI1uC6+AJJxC4r5YBA==
b-row cf:cq []    value
b-row cf-HASHTYPE:cq-MD5BASE64 []    IGPBYI1uC6+AJJxC4r5YBA==
username@instance>

----------------------------------------

TITLE: Configuring AgeOffFilter for Multiple Scopes
DESCRIPTION: Demonstrates how to set up AgeOffFilter for minc and majc scopes using the -class flag, followed by flush and compact operations to force data ageoff.

LANGUAGE: shell
CODE:
username@instance filtertest> setiter -t filtertest -minc -majc -p 10 -n myfilter -class org.apache.accumulo.core.iterators.user.AgeOffFilter
AgeOffFilter removes entries with timestamps more than <ttl> milliseconds old
----------> set AgeOffFilter parameter negate, default false keeps k/v that pass accept method, true rejects k/v that pass accept method: 
----------> set AgeOffFilter parameter ttl, time to live (milliseconds): 30000
----------> set AgeOffFilter parameter currentTime, if set, use the given value as the absolute time in milliseconds as the current time of day: 
username@instance filtertest> flush
06 10:42:24,806 [shell.Shell] INFO : Flush of table filtertest initiated...
username@instance filtertest> compact
06 10:42:36,781 [shell.Shell] INFO : Compaction of table filtertest started for given range
username@instance filtertest> flush -t filtertest -w
06 10:42:52,881 [shell.Shell] INFO : Flush of table filtertest completed.
username@instance filtertest> compact -t filtertest -w
06 10:43:00,632 [shell.Shell] INFO : Compacting table ...
06 10:43:01,307 [shell.Shell] INFO : Compaction of table filtertest completed for given range

----------------------------------------

TITLE: Running RowHash MapReduce Job on Accumulo
DESCRIPTION: This command executes the RowHash MapReduce job using the accumulo-examples-simple.jar. It processes the 'input' table and computes hashes for rows containing the specified column.

LANGUAGE: shell
CODE:
$ bin/tool.sh lib/accumulo-examples-simple.jar org.apache.accumulo.examples.simple.mapreduce.RowHash -u user -p passwd -i instance -t input --column cf:cq

----------------------------------------

TITLE: Removing Users in Accumulo Shell
DESCRIPTION: This snippet demonstrates how to remove a user named 'bob' using the Accumulo shell. It prompts for confirmation before removing the user.

LANGUAGE: console
CODE:
root@uno> dropuser bob
dropuser { bob } (yes|no)? yes

----------------------------------------

TITLE: Querying Directory Contents
DESCRIPTION: These commands use the QueryUtil class to list the contents of specific directories stored in the Accumulo tables.

LANGUAGE: bash
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.simple.dirlist.QueryUtil -i instance -z zookeepers -u username -p password -t dirTable --auths exampleVis --path /local/username
$ ./bin/accumulo org.apache.accumulo.examples.simple.dirlist.QueryUtil -i instance -z zookeepers -u username -p password -t dirTable --auths exampleVis --path /local/username/workspace

----------------------------------------

TITLE: Copying Filter JAR to HDFS
DESCRIPTION: Copies the FooFilter.jar containing the custom filter implementation from local filesystem to HDFS.

LANGUAGE: shell
CODE:
hadoop fs -copyFromLocal $ACCUMULO_HOME/test/src/test/resources/FooFilter.jar /user1/lib

----------------------------------------

TITLE: Running Specific Unit Tests in Accumulo
DESCRIPTION: This command allows running specific unit tests in the Accumulo project using Maven. It demonstrates how to target individual test classes and skip the requirement for tests to exist.

LANGUAGE: bash
CODE:
mvn package -Dtest=MyTest -DfailIfNoTests=false

----------------------------------------

TITLE: Running InterferenceTest without Isolation in Apache Accumulo
DESCRIPTION: Executes the InterferenceTest program without isolation for 5000 iterations. This command demonstrates how scanning without isolation can lead to inconsistent reads when data is being concurrently modified.

LANGUAGE: bash
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.simple.isolation.InterferenceTest -i instance -z zookeepers -u username -p password -t isotest --iterations 5000

----------------------------------------

TITLE: Generating Certificate Authority Using OpenSSL
DESCRIPTION: Shell commands to create a certificate authority (CA) by generating a private key, certificate request, and importing into a Java KeyStore. This creates the truststore.jks file containing the CA's public key.

LANGUAGE: shell
CODE:
# Create a private key
openssl genrsa -des3 -out root.key 4096

# Create a certificate request using the private key
openssl req -x509 -new -key root.key -days 365 -out root.pem

# Generate a Base64-encoded version of the PEM just created
openssl x509 -outform der -in root.pem -out root.der

# Import the key into a Java KeyStore
keytool -import -alias root-key -keystore truststore.jks -file root.der

# Remove the DER formatted key file (as we don't need it anymore)
rm root.der

----------------------------------------

TITLE: Reversing Shard Index in Accumulo
DESCRIPTION: Command to run the Reverse program which populates the doc2term table from the shard table.

LANGUAGE: bash
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.simple.shard.Reverse instance zookeepers shard doc2term username password

----------------------------------------

TITLE: Running Continuous Query on Accumulo Shard Index
DESCRIPTION: Command to execute the ContinuousQuery.java program, which performs continuous random queries using 5 terms per document. It displays the number of matching documents and query time for each set of terms.

LANGUAGE: bash
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.simple.shard.ContinuousQuery -i instance -z zookeepers --shardTable shard --doc2Term doc2term -u username -p password --terms 5

----------------------------------------

TITLE: Viewing MapReduce Job Output in HDFS
DESCRIPTION: These commands list the contents of the output directory in HDFS and display the extracted data from the MapReduce job.

LANGUAGE: shell
CODE:
$ hadoop fs -ls /tmp/output
-rw-r--r--   1 username supergroup          0 2013-01-10 14:44 /tmp/output/_SUCCESS
drwxr-xr-x   - username supergroup          0 2013-01-10 14:44 /tmp/output/_logs
drwxr-xr-x   - username supergroup          0 2013-01-10 14:44 /tmp/output/_logs/history
-rw-r--r--   1 username supergroup       9049 2013-01-10 14:44 /tmp/output/_logs/history/job_201301081658_0011_1357847072863_username_TableToFile%5F1357847071434
-rw-r--r--   1 username supergroup      26172 2013-01-10 14:44 /tmp/output/_logs/history/job_201301081658_0011_conf.xml
-rw-r--r--   1 username supergroup         50 2013-01-10 14:44 /tmp/output/part-m-00000

$ hadoop fs -text /tmp/output/output/part-m-00000
catrow cf:cq []    catvalue
dogrow cf:cq []    dogvalue

----------------------------------------

TITLE: Populating doc2term Table Using Reverse.java
DESCRIPTION: Command to run the Reverse.java program, which populates the doc2term table based on the shard table data.

LANGUAGE: bash
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.simple.shard.Reverse -i instance -z zookeepers --shardTable shard --doc2Term doc2term -u username -p password

----------------------------------------

TITLE: Viewing Iterator Configuration - Accumulo Shell Commands
DESCRIPTION: Demonstrates how to view the complete iterator configuration for a table using the config command with iterator filter.

LANGUAGE: shell
CODE:
username@instance filtertest> config -t filtertest -f iterator
---------+---------------------------------------------+---------------------------------------------------------------------------
SCOPE    | NAME                                        | VALUE
---------+---------------------------------------------+---------------------------------------------------------------------------
table    | table.iterator.majc.myfilter .............. | 10,org.apache.accumulo.core.iterators.user.AgeOffFilter
table    | table.iterator.majc.myfilter.opt.ttl ...... | 30000
table    | table.iterator.majc.vers .................. | 20,org.apache.accumulo.core.iterators.user.VersioningIterator
table    | table.iterator.majc.vers.opt.maxVersions .. | 1
table    | table.iterator.minc.myfilter .............. | 10,org.apache.accumulo.core.iterators.user.AgeOffFilter
table    | table.iterator.minc.myfilter.opt.ttl ...... | 30000
table    | table.iterator.minc.vers .................. | 20,org.apache.accumulo.core.iterators.user.VersioningIterator
table    | table.iterator.minc.vers.opt.maxVersions .. | 1
table    | table.iterator.scan.myfilter .............. | 10,org.apache.accumulo.core.iterators.user.AgeOffFilter
table    | table.iterator.scan.myfilter.opt.ttl ...... | 30000
table    | table.iterator.scan.vers .................. | 20,org.apache.accumulo.core.iterators.user.VersioningIterator
table    | table.iterator.scan.vers.opt.maxVersions .. | 1
---------+---------------------------------------------+---------------------------------------------------------------------------
username@instance filtertest>

----------------------------------------

TITLE: Configuring Versioning in Accumulo
DESCRIPTION: Demonstrates how to configure versioning options for a table using the Accumulo shell.

LANGUAGE: Shell
CODE:
user@myinstance mytable> config -t mytable -s
table.iterator.scan.vers.opt.maxVersions=3

user@myinstance mytable> config -t mytable -s
table.iterator.minc.vers.opt.maxVersions=3

user@myinstance mytable> config -t mytable -s
table.iterator.majc.vers.opt.maxVersions=3

----------------------------------------

TITLE: Configuring Visibility Constraints
DESCRIPTION: Demonstrates how to set up visibility constraints to ensure users can only insert data they can read.

LANGUAGE: shell
CODE:
username@instance vistest> user root
Enter password for user root: ******
root@instance vistest> config -t vistest -s table.constraint.1=org.apache.accumulo.core.security.VisibilityConstraint
root@instance vistest> user username
Enter password for user username: ********
username@instance vistest> insert row f4 q4 v4 -l spinach

----------------------------------------

TITLE: Accessing Docker Container Shell for Website Development
DESCRIPTION: Docker command to run a container with shell access, useful for modifying dependencies or the Gemfile. This mounts the current working directory to ensure changes are reflected locally.

LANGUAGE: bash
CODE:
docker run -v "$PWD":/mnt/workdir -it webdev /bin/bash

----------------------------------------

TITLE: Creating Empty Write-Ahead Log File Header
DESCRIPTION: This command creates a valid, empty Write-Ahead Log (WAL) file header, which can be used to replace corrupt WAL files in Accumulo.

LANGUAGE: shell
CODE:
$ echo -n -e '--- Log File Header (v2) ---\x00\x00\x00\x00' > empty.wal

----------------------------------------

TITLE: Enabling Constraints on Accumulo Table
DESCRIPTION: Demonstrates how to enable constraints on an Accumulo table using the shell configuration commands.

LANGUAGE: shell
CODE:
user@myinstance mytable> config -t mytable -s table.constraint.1=com.test.ExampleConstraint
user@myinstance mytable> config -t mytable -s table.constraint.2=com.test.AnotherConstraint
user@myinstance mytable> config -t mytable -f constraint
---------+--------------------------------+----------------------------
SCOPE    | NAME                           | VALUE
---------+--------------------------------+----------------------------
table    | table.constraint.1............ | com.test.ExampleConstraint
table    | table.constraint.2............ | com.test.AnotherConstraint
---------+--------------------------------+----------------------------

----------------------------------------

TITLE: Running Commands in Accumulo Shell
DESCRIPTION: This snippet shows the convention used for commands intended to be run in the Accumulo shell within the examples.

LANGUAGE: accumulo
CODE:
> command

----------------------------------------

TITLE: Creating and Configuring AgeOffFilter for Scan
DESCRIPTION: Shows the process of creating a table and setting up an AgeOffFilter for scan operations with a 30-second time-to-live (TTL). Demonstrates basic insert and scan operations to verify filter behavior.

LANGUAGE: shell
CODE:
username@instance> createtable filtertest
username@instance filtertest> setiter -t filtertest -scan -p 10 -n myfilter -ageoff
AgeOffFilter removes entries with timestamps more than <ttl> milliseconds old
----------> set AgeOffFilter parameter negate, default false keeps k/v that pass accept method, true rejects k/v that pass accept method: 
----------> set AgeOffFilter parameter ttl, time to live (milliseconds): 30000
----------> set AgeOffFilter parameter currentTime, if set, use the given value as the absolute time in milliseconds as the current time of day: 
username@instance filtertest> scan
username@instance filtertest> insert foo a b c
username@instance filtertest> scan
foo a:b []    c
username@instance filtertest>

----------------------------------------

TITLE: Viewing Ingested Filesystem Data in Accumulo
DESCRIPTION: This command runs the Viewer class to browse the ingested filesystem data. It specifies the Accumulo instance, zookeepers, credentials, tables, authorizations, and the path to view.

LANGUAGE: bash
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.simple.dirlist.Viewer -i instance -z zookeepers -u username -p password -t dirTable --dataTable dataTable --auths exampleVis --path /local/username/workspace

----------------------------------------

TITLE: Configuring AgeOffFilter for All Scopes - Accumulo Shell Commands
DESCRIPTION: Shows how to configure AgeOffFilter for minor and major compaction scopes using the class flag, followed by flush and compact operations to force data cleanup.

LANGUAGE: shell
CODE:
username@instance filtertest> setiter -t filtertest -minc -majc -p 10 -n myfilter -class org.apache.accumulo.core.iterators.user.AgeOffFilter
AgeOffFilter removes entries with timestamps more than <ttl> milliseconds old
----------> set AgeOffFilter parameter negate, default false keeps k/v that pass accept method, true rejects k/v that pass accept method:
----------> set AgeOffFilter parameter ttl, time to live (milliseconds): 30000
----------> set AgeOffFilter parameter currentTime, if set, use the given value as the absolute time in milliseconds as the current time of day:
username@instance filtertest> flush
06 10:42:24,806 [shell.Shell] INFO : Flush of table filtertest initiated...
username@instance filtertest> compact
06 10:42:36,781 [shell.Shell] INFO : Compaction of table filtertest started for given range
username@instance filtertest> flush -t filtertest -w
06 10:42:52,881 [shell.Shell] INFO : Flush of table filtertest completed.
username@instance filtertest> compact -t filtertest -w
06 10:43:00,632 [shell.Shell] INFO : Compacting table ...
06 10:43:01,307 [shell.Shell] INFO : Compaction of table filtertest completed for given range
username@instance filtertest>

----------------------------------------

TITLE: Executing Row Operations Example
DESCRIPTION: Demonstrates running the RowOperations class to perform read and write operations using BatchWriter and Scanner.

LANGUAGE: bash
CODE:
$ bin/accumulo $PACKAGE.RowOperations -u root -p mypassword -i instance -z zookeeper

----------------------------------------

TITLE: Random Data Insertion with BatchWriter
DESCRIPTION: Demonstrates inserting random values into the Accumulo table using RandomBatchWriter with specific batch parameters and visibility settings.

LANGUAGE: shell
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.simple.client.RandomBatchWriter --seed 7 -i instance -z zookeepers -u username -p password -t bloom_test --num 1000000 --min 0 --max 1000000000 --size 50 --batchMemory 2M --batchLatency 60s --batchThreads 3 --vis exampleVis

----------------------------------------

TITLE: Serving Jekyll Website Locally
DESCRIPTION: Bundler command to build and serve the Accumulo website locally using Jekyll's built-in webserver. The -w flag enables automatic rebuilding when files are changed.

LANGUAGE: bash
CODE:
bundle exec jekyll serve -w

----------------------------------------

TITLE: Replacing Corrupt WAL File in HDFS
DESCRIPTION: These HDFS commands move an empty WAL file to HDFS and replace a corrupt WAL file, allowing Accumulo to recover from WAL corruption.

LANGUAGE: shell
CODE:
$ hdfs dfs -moveFromLocal empty.wal /user/accumulo/empty.wal
$ hdfs dfs -mv /user/accumulo/empty.wal /accumulo/wal/tserver-4.example.com+10011/26abec5b-63e7-40dd-9fa1-b8ad2436606e

----------------------------------------

TITLE: Creating Empty RFile in Accumulo
DESCRIPTION: This Java command creates an empty RFile, which can be used to replace corrupt data files in Accumulo's HDFS directory structure.

LANGUAGE: shell
CODE:
$ accumulo org.apache.accumulo.core.file.rfile.CreateEmpty /path/to/empty/file/empty.rf

----------------------------------------

TITLE: Configuring AgeOffFilter for Compaction and Flushing
DESCRIPTION: Demonstrates how to set up AgeOffFilter for minor and major compactions using the -class flag, followed by manual flush and compact operations to enforce data cleanup.

LANGUAGE: shell
CODE:
username@instance filtertest> setiter -t filtertest -minc -majc -p 10 -n myfilter -class org.apache.accumulo.core.iterators.user.AgeOffFilter
AgeOffFilter removes entries with timestamps more than <ttl> milliseconds old
----------> set AgeOffFilter parameter negate, default false keeps k/v that pass accept method, true rejects k/v that pass accept method: 
----------> set AgeOffFilter parameter ttl, time to live (milliseconds): 30000
----------> set AgeOffFilter parameter currentTime, if set, use the given value as the absolute time in milliseconds as the current time of day: 
username@instance filtertest> flush
06 10:42:24,806 [shell.Shell] INFO : Flush of table filtertest initiated...
username@instance filtertest> compact
06 10:42:36,781 [shell.Shell] INFO : Compaction of table filtertest started for given range
username@instance filtertest> flush -t filtertest -w
06 10:42:52,881 [shell.Shell] INFO : Flush of table filtertest completed.
username@instance filtertest> compact -t filtertest -w
06 10:43:00,632 [shell.Shell] INFO : Compacting table ...
06 10:43:01,307 [shell.Shell] INFO : Compaction of table filtertest completed for given range

----------------------------------------

TITLE: Importing and Verifying Table Data
DESCRIPTION: Shell commands demonstrating table import process and verification of imported data, splits, and configuration.

LANGUAGE: shell
CODE:
root@test16> importtable table1_copy /tmp/table1_export_dest
root@test16> table table1_copy
root@test16 table1_copy> scan
a cf1:cq1 []    v1
h cf1:cq1 []    v2
z cf1:cq1 []    v3
z cf1:cq2 []    v4
root@test16 table1_copy> getsplits -t table1_copy
b
r
root@test16> config -t table1_copy -f split
---------+--------------------------+-------------------------------------------
SCOPE    | NAME                     | VALUE
---------+--------------------------+-------------------------------------------
default  | table.split.threshold .. | 1G
table    |    @override ........... | 100M
---------+--------------------------+-------------------------------------------
root@test16> tables -l
accumulo.metadata    =>        !0
accumulo.root        =>        +r
table1_copy          =>         5
trace                =>         1
root@test16 table1_copy> scan -t accumulo.metadata -b 5 -c srv:time
5;b srv:time []    M1343224500467
5;r srv:time []    M1343224500467
5< srv:time []    M1343224500467

----------------------------------------

TITLE: Viewing Ingested Filesystem Data with GUI
DESCRIPTION: This command launches the Viewer class, which provides a graphical interface for browsing the filesystem information stored in Accumulo tables.

LANGUAGE: bash
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.simple.dirlist.Viewer -i instance -z zookeepers -u username -p password -t dirTable --dataTable dataTable --auths exampleVis --path /local/username/workspace

----------------------------------------

TITLE: Scanning Table in Shell
DESCRIPTION: Accumulo shell commands to select and scan the hellotable to view all entries.

LANGUAGE: shell
CODE:
table hellotable
scan

----------------------------------------

TITLE: Viewing Iterator Configuration
DESCRIPTION: Shows how to view the configured iterator settings for a table using the config command with iterator filter.

LANGUAGE: shell
CODE:
username@instance filtertest> config -t filtertest -f iterator
---------+---------------------------------------------+---------------------------------------------------------------------------
SCOPE    | NAME                                        | VALUE
---------+---------------------------------------------+---------------------------------------------------------------------------
table    | table.iterator.majc.myfilter .............. | 10,org.apache.accumulo.core.iterators.user.AgeOffFilter
table    | table.iterator.majc.myfilter.opt.ttl ...... | 30000
table    | table.iterator.majc.vers .................. | 20,org.apache.accumulo.core.iterators.user.VersioningIterator
table    | table.iterator.majc.vers.opt.maxVersions .. | 1
table    | table.iterator.minc.myfilter .............. | 10,org.apache.accumulo.core.iterators.user.AgeOffFilter
table    | table.iterator.minc.myfilter.opt.ttl ...... | 30000
table    | table.iterator.minc.vers .................. | 20,org.apache.accumulo.core.iterators.user.VersioningIterator
table    | table.iterator.minc.vers.opt.maxVersions .. | 1
table    | table.iterator.scan.myfilter .............. | 10,org.apache.accumulo.core.iterators.user.AgeOffFilter
table    | table.iterator.scan.myfilter.opt.ttl ...... | 30000
table    | table.iterator.scan.vers .................. | 20,org.apache.accumulo.core.iterators.user.VersioningIterator
table    | table.iterator.scan.vers.opt.maxVersions .. | 1

----------------------------------------

TITLE: Configuring Accumulo to Send Metrics to InfluxDB
DESCRIPTION: Configuration for the Accumulo hadoop-metrics2-accumulo.properties file to send Graphite metrics to InfluxDB. Requires replacing <INFLUXDB_HOST> with the actual host address.

LANGUAGE: properties
CODE:
*.period=30
accumulo.sink.graphite.class=org.apache.hadoop.metrics2.sink.GraphiteSink
accumulo.sink.graphite.server_host=<INFLUXDB_HOST>
accumulo.sink.graphite.server_port=2003
accumulo.sink.graphite.metrics_prefix=accumulo

----------------------------------------

TITLE: Enabling Bloom Filters in Accumulo
DESCRIPTION: Shows how to enable bloom filters for a table using the Accumulo shell.

LANGUAGE: Shell
CODE:
user@myinstance> config -t mytable -s table.bloom.enabled=true

----------------------------------------

TITLE: Setting up Accumulo with Metrics using Uno
DESCRIPTION: Command to set up Accumulo with metrics support using the Uno tool. This automatically configures InfluxDB and Grafana for viewing Accumulo metrics.

LANGUAGE: bash
CODE:
uno setup accumulo --with-metrics

----------------------------------------

TITLE: Running Local WAL Recovery Utility in Accumulo
DESCRIPTION: This command runs the LocalWALRecovery utility to recover Write-Ahead Log files from local disk after upgrading Accumulo versions.

LANGUAGE: shell
CODE:
accumulo org.apache.accumulo.tserver.log.LocalWALRecovery

----------------------------------------

TITLE: Initializing Sample Data in Accumulo Shell
DESCRIPTION: Creates a table named 'input' and inserts sample key-value pairs using the Accumulo shell interface. Demonstrates basic data insertion commands.

LANGUAGE: shell
CODE:
$ ./bin/accumulo shell -u username -p password
Shell - Apache Accumulo Interactive Shell
- version: 1.5.0
- instance name: instance
- instance id: 00000000-0000-0000-0000-000000000000
-
- type 'help' for a list of available commands
-
username@instance> createtable input
username@instance> insert dog cf cq dogvalue
username@instance> insert cat cf cq catvalue
username@instance> insert junk family qualifier junkvalue
username@instance> quit

----------------------------------------

TITLE: Configuring OpenTelemetry JavaAgent in accumulo-env.sh
DESCRIPTION: Configuration to uncomment in accumulo-env.sh to set up OpenTelemetry Java Agent.

LANGUAGE: bash
CODE:
## Optionally setup OpenTelemetry SDK AutoConfigure
## See https://github.com/open-telemetry/opentelemetry-java/tree/main/sdk-extensions/autoconfigure
#JAVA_OPTS=('-Dotel.traces.exporter=jaeger' '-Dotel.metrics.exporter=none' '-Dotel.logs.exporter=none' "${JAVA_OPTS[@]}")
## Optionally setup OpenTelemetry Java Agent
## See https://github.com/open-telemetry/opentelemetry-java-instrumentation for more options
#JAVA_OPTS=('-javaagent:path/to/opentelemetry-javaagent.jar' "${JAVA_OPTS[@]}")

----------------------------------------

TITLE: Run MapReduce Word Count Job
DESCRIPTION: Command to execute the word count MapReduce job using the Accumulo examples jar file.

LANGUAGE: shell
CODE:
$ bin/tool.sh lib/accumulo-examples-simple.jar org.apache.accumulo.examples.simple.mapreduce.WordCount -i instance -z zookeepers  --input /user/username/wc -t wordCount -u username -p password

----------------------------------------

TITLE: Creating and Configuring Accumulo Table with Bloom Filters
DESCRIPTION: This snippet shows how to create a table named 'bloom_test' in Accumulo and enable bloom filters for it using the Accumulo shell.

LANGUAGE: shell
CODE:
$ ./bin/accumulo shell -u username -p password
Shell - Apache Accumulo Interactive Shell
- version: 1.5.0
- instance name: instance
- instance id: 00000000-0000-0000-0000-000000000000
- 
- type 'help' for a list of available commands
- 
username@instance> setauths -u username -s exampleVis
username@instance> createtable bloom_test
username@instance bloom_test> config -t bloom_test -s table.bloom.enabled=true
username@instance bloom_test> exit

----------------------------------------

TITLE: Running SequentialBatchWriter in Accumulo
DESCRIPTION: This command executes the SequentialBatchWriter to write 10000 entries with sequential rows and random 50-byte values to the 'batchtest1' table.

LANGUAGE: shell
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.simple.client.SequentialBatchWriter -i instance -z zookeepers -u username -p password -t batchtest1 --start 0 --num 10000 --size 50 --batchMemory 20M --batchLatency 500 --batchThreads 20 --vis exampleVis

----------------------------------------

TITLE: Running Continuous Queries on Accumulo Shard Index
DESCRIPTION: This command runs the ContinuousQuery.java program, which selects 5 random terms from each document and continuously queries them. It requires instance, zookeeper, shard table, doc2term table, username, password, and number of terms parameters.

LANGUAGE: bash
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.simple.shard.ContinuousQuery -i instance -z zookeepers --shardTable shard --doc2Term doc2term -u username -p password --terms 5

----------------------------------------

TITLE: Searching File Names in Accumulo Index
DESCRIPTION: These commands demonstrate using QueryUtil to search for file or directory names in the index table. They show various search patterns including exact match, prefix, suffix, and wildcard searches.

LANGUAGE: bash
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.simple.dirlist.QueryUtil -i instance -z zookeepers -u username -p password -t indexTable --auths exampleVis --path filename --search
$ ./bin/accumulo org.apache.accumulo.examples.simple.dirlist.QueryUtil -i instance -z zookeepers -u username -p password -t indexTable --auths exampleVis --path 'filename*' --search
$ ./bin/accumulo org.apache.accumulo.examples.simple.dirlist.QueryUtil -i instance -z zookeepers -u username -p password -t indexTable --auths exampleVis --path '*jar' --search
$ ./bin/accumulo org.apache.accumulo.examples.simple.dirlist.QueryUtil -i instance -z zookeepers -u username -p password -t indexTable --auths exampleVis --path 'filename*jar' --search

----------------------------------------

TITLE: Changing Instance Secret
DESCRIPTION: Example of using the ChangeSecret utility to modify the instance secret that all Accumulo servers must know. The instance must be shut down to use this tool.

LANGUAGE: bash
CODE:
$ accumulo admin changeSecret

----------------------------------------

TITLE: Scanning Ingested Data in Accumulo Shell
DESCRIPTION: This Accumulo shell command scans the dataTable to view the ingested file data. The row is the MD5 hash of the file.

LANGUAGE: shell
CODE:
> scan -t dataTable

----------------------------------------

TITLE: Configuring AgeOffFilter for All Scopes
DESCRIPTION: Demonstrates setting up AgeOffFilter for scan, minor compaction (minc), and major compaction (majc) scopes, followed by forcing a flush and compaction to clean aged data.

LANGUAGE: shell
CODE:
username@instance filtertest> setiter -t filtertest -scan -minc -majc -p 10 -n myfilter -filter
FilteringIterator uses Filters to accept or reject key/value pairs
----------> entering options: <filterPriorityNumber> <ageoff|regex|filterClass>
----------> set org.apache.accumulo.core.iterators.FilteringIterator option (<name> <value>, hit enter to skip): 0 ageoff
----------> set org.apache.accumulo.core.iterators.FilteringIterator option (<name> <value>, hit enter to skip): 
AgeOffFilter removes entries with timestamps more than <ttl> milliseconds old
----------> set org.apache.accumulo.core.iterators.filter.AgeOffFilter parameter currentTime, if set, use the given value as the absolute time in milliseconds as the current time of day: 
----------> set org.apache.accumulo.core.iterators.filter.AgeOffFilter parameter ttl, time to live (milliseconds): 30000

username@instance filtertest> flush -t filtertest
username@instance filtertest> compact -t filtertest

----------------------------------------

TITLE: Searching File and Directory Names in Accumulo
DESCRIPTION: These commands use the QueryUtil class to perform searches on file or directory names stored in the indexTable. They demonstrate various search patterns including wildcards.

LANGUAGE: bash
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.simple.dirlist.QueryUtil instance zookeepers username password indexTable exampleVis filename -search
$ ./bin/accumulo org.apache.accumulo.examples.simple.dirlist.QueryUtil instance zookeepers username password indexTable exampleVis 'filename*' -search
$ ./bin/accumulo org.apache.accumulo.examples.simple.dirlist.QueryUtil instance zookeepers username password indexTable exampleVis '*jar' -search
$ ./bin/accumulo org.apache.accumulo.examples.simple.dirlist.QueryUtil instance zookeepers username password indexTable exampleVis filename*jar -search

----------------------------------------

TITLE: Indexing Java Files Using Accumulo Shard Index
DESCRIPTION: Command to index all Java files in the Accumulo source code using the Index.java program. It specifies the instance, zookeepers, table, username, password, and number of partitions.

LANGUAGE: bash
CODE:
$ cd /local/username/workspace/accumulo/
$ find core/src server/src -name "*.java" | xargs ./bin/accumulo org.apache.accumulo.examples.simple.shard.Index -i instance -z zookeepers -t shard -u username -p password --partitions 30

----------------------------------------

TITLE: Running Interference Test Without Isolation
DESCRIPTION: Executes the InterferenceTest program without isolation enabled for 5000 iterations, demonstrating how inconsistent row values can be observed when scanning concurrent updates.

LANGUAGE: bash
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.simple.isolation.InterferenceTest -i instance -z zookeepers -u username -p password -t isotest --iterations 5000

----------------------------------------

TITLE: Accumulo Shell Data Scan Command
DESCRIPTION: Shell command to scan and view data in the specified Accumulo table.

LANGUAGE: shell
CODE:
scan -t dataTable

----------------------------------------

TITLE: Running Java Data Reader
DESCRIPTION: Command to execute the Java program that reads data from specified row range with connection parameters.

LANGUAGE: shell
CODE:
./bin/accumulo org.apache.accumulo.examples.simple.helloworld.ReadData -i instance -z zookeepers -u username -p password -t hellotable --startKey row_0 --endKey row_1001

----------------------------------------

TITLE: Querying Accumulo Shard Index
DESCRIPTION: This command queries the shard index to find all files containing the terms 'foo' and 'bar'. It uses the Query.java program and requires instance, zookeeper, table, username, and password parameters.

LANGUAGE: bash
CODE:
$ cd $ACCUMULO_HOME
$ ./bin/accumulo org.apache.accumulo.examples.simple.shard.Query -i instance -z zookeepers -t shard -u username -p password foo bar

----------------------------------------

TITLE: Counting Files and Directories in Accumulo
DESCRIPTION: This command runs the FileCount class to compute recursive counts of directories and files, storing the results back in the dirTable. It requires scan authorizations for reading and a visibility for writing data.

LANGUAGE: bash
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.simple.dirlist.FileCount -i instance -z zookeepers -u username -p password -t dirTable --auths exampleVis

----------------------------------------

TITLE: Configuring SSL Properties in Accumulo
DESCRIPTION: Properties required in accumulo.properties file to enable SSL for the Accumulo monitor interface. Includes keystore and truststore configurations.

LANGUAGE: properties
CODE:
monitor.ssl.keyStore=
monitor.ssl.keyStorePassword=
monitor.ssl.trustStore=
monitor.ssl.trustStorePassword=
monitor.ssl.include.ciphers=
monitor.ssl.exclude.ciphers=

----------------------------------------

TITLE: Accumulo Shell Commands for Table Export
DESCRIPTION: Demonstrates creating a table, inserting test data, adding splits, cloning the table, and exporting it. Shows basic table operations and preparation for export.

LANGUAGE: shell
CODE:
root@test15> createtable table1
root@test15 table1> insert a cf1 cq1 v1
root@test15 table1> insert h cf1 cq1 v2
root@test15 table1> insert z cf1 cq1 v3
root@test15 table1> insert z cf1 cq2 v4
root@test15 table1> addsplits -t table1 b r
root@test15 table1> scan
a cf1:cq1 []    v1
h cf1:cq1 []    v2
z cf1:cq1 []    v3
z cf1:cq2 []    v4
root@test15> config -t table1 -s table.split.threshold=100M
root@test15 table1> clonetable table1 table1_exp
root@test15 table1> offline table1_exp
root@test15 table1> exporttable -t table1_exp /tmp/table1_export
root@test15 table1> quit

----------------------------------------

TITLE: Copying Example Configurations in Apache Accumulo
DESCRIPTION: Command to copy example configuration files for a 3GB native standalone setup into the Accumulo configuration directory.

LANGUAGE: bash
CODE:
cp $ACCUMULO_HOME/conf/examples/3G/native-standalone/* $ACCUMULO_HOME/conf

----------------------------------------

TITLE: Examining Export Files and Running DistCp
DESCRIPTION: HDFS commands to inspect export files and execute distributed copy operation for table data transfer.

LANGUAGE: bash
CODE:
$ hadoop fs -ls /tmp/table1_export
Found 2 items
-rw-r--r--   3 user supergroup        162 2012-07-25 09:56 /tmp/table1_export/distcp.txt
-rw-r--r--   3 user supergroup        821 2012-07-25 09:56 /tmp/table1_export/exportMetadata.zip
$ hadoop fs -cat /tmp/table1_export/distcp.txt
hdfs://n1.example.com:6093/accumulo/tables/3/default_tablet/F0000000.rf
hdfs://n1.example.com:6093/tmp/table1_export/exportMetadata.zip
$ hadoop distcp -f /tmp/table1_export/distcp.txt /tmp/table1_export_dest

----------------------------------------

TITLE: Using StatsCombiner with Base-16 Configuration
DESCRIPTION: Example showing the setup of StatsCombiner for hexadecimal values and subsequent data manipulation operations.

LANGUAGE: shell
CODE:
username@instance runners> setiter -t runners -p 11 -scan -minc -majc -n hexStats -class org.apache.accumulo.examples.simple.combiner.StatsCombiner
Combiner that keeps track of min, max, sum, and count
----------> set StatsCombiner parameter all, set to true to apply Combiner to every column, otherwise leave blank. if true, columns option will be ignored.: 
----------> set StatsCombiner parameter columns, <col fam>[:<col qual>]{,<col fam>[:<col qual>]} escape non aplhanum chars using %<hex>.: hstat
----------> set StatsCombiner parameter radix, radix/base of the numbers: 16

----------------------------------------

TITLE: Running InterferenceTest with Isolation in Accumulo
DESCRIPTION: This command runs the InterferenceTest program with isolation enabled for 5000 iterations. It shows how using isolation prevents inconsistent views of the data during concurrent updates.

LANGUAGE: bash
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.simple.isolation.InterferenceTest -i instance -z zookeepers -u username -p password -t isotest --iterations 5000 --isolated

----------------------------------------

TITLE: Executing Regex Pattern Matching with MapReduce
DESCRIPTION: Command to run the RegexExample MapReduce job that searches for rows starting with 'dog' pattern. Demonstrates usage of the regex pattern matching functionality.

LANGUAGE: shell
CODE:
$ bin/tool.sh lib/accumulo-examples-simple.jar org.apache.accumulo.examples.simple.mapreduce.RegexExample -u user -p passwd -i instance -t input --rowRegex 'dog.*' --output /tmp/output

----------------------------------------

TITLE: Creating and Configuring Initial AgeOffFilter
DESCRIPTION: Creates a new table and sets up an AgeOffFilter for scan scope with a 30-second TTL. Demonstrates basic insert and scan operations to show the filter in action.

LANGUAGE: shell
CODE:
username@instance> createtable filtertest
username@instance filtertest> setiter -t filtertest -scan -p 10 -n myfilter -ageoff
AgeOffFilter removes entries with timestamps more than <ttl> milliseconds old
----------> set AgeOffFilter parameter negate, default false keeps k/v that pass accept method, true rejects k/v that pass accept method:
----------> set AgeOffFilter parameter ttl, time to live (milliseconds): 30000
----------> set AgeOffFilter parameter currentTime, if set, use the given value as the absolute time in milliseconds as the current time of day:
username@instance filtertest> scan
username@instance filtertest> insert foo a b c
username@instance filtertest> scan
foo a:b []    c
username@instance filtertest>

----------------------------------------

TITLE: Running InterferenceTest with Isolation in Apache Accumulo
DESCRIPTION: Executes the InterferenceTest program with isolation enabled for 5000 iterations. This command shows how using isolation prevents inconsistent reads even when data is being concurrently modified.

LANGUAGE: bash
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.simple.isolation.InterferenceTest -i instance -z zookeepers -u username -p password -t isotest --iterations 5000 --isolated

----------------------------------------

TITLE: Setting User Authorizations in Accumulo
DESCRIPTION: Shell command to set authorizations for a user in Accumulo. This is necessary to allow the user to view the ingested data with the specified visibility.

LANGUAGE: bash
CODE:
$ ./bin/accumulo shell -u root -e 'setauths -u username -s exampleVis'

----------------------------------------

TITLE: Accumulo JShell Welcome Message in Java
DESCRIPTION: The welcome message displayed when Accumulo JShell starts, showing the pre-loaded Accumulo client object.

LANGUAGE: java
CODE:
Preparing JShell for Apache Accumulo

Use 'client' to interact with Accumulo

|  Welcome to JShell -- Version 11
|  For an introduction type: /help intro

jshell>

----------------------------------------

TITLE: Searching File Names with Wildcards
DESCRIPTION: Example commands for searching file or directory names using wildcards. Searches are performed on the dirindex table.

LANGUAGE: bash
CODE:
./bin/accumulo org.apache.accumulo.examples.dirlist.QueryUtil instance zookeepers username password dirindex exampleVis filename -search
./bin/accumulo org.apache.accumulo.examples.dirlist.QueryUtil instance zookeepers username password dirindex exampleVis 'filename*' -search
./bin/accumulo org.apache.accumulo.examples.dirlist.QueryUtil instance zookeepers username password dirindex exampleVis '*jar' -search
./bin/accumulo org.apache.accumulo.examples.dirlist.QueryUtil instance zookeepers username password dirindex exampleVis filename*jar -search

----------------------------------------

TITLE: Counting Files and Directories
DESCRIPTION: This command runs the FileCount class to compute recursive counts of files and directories, storing the results back into the dirTable.

LANGUAGE: bash
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.simple.dirlist.FileCount -i instance -z zookeepers -u username -p password -t dirTable --auths exampleVis

----------------------------------------

TITLE: Running Commands in Accumulo Shell
DESCRIPTION: Shows the convention for running commands in the Accumulo shell. Commands are prefixed with '>' and are executed within the Accumulo shell environment.

LANGUAGE: accumulo
CODE:
> command

----------------------------------------

TITLE: Create Accumulo Table with Combiner
DESCRIPTION: Shell commands to create an Accumulo table named 'wordCount' and configure a SummingCombiner iterator for counting words.

LANGUAGE: shell
CODE:
$ ./bin/accumulo shell -u username -p password
username@instance> createtable wordCount
username@instance wordCount> setiter -class org.apache.accumulo.core.iterators.user.SummingCombiner -p 10 -t wordCount -majc -minc -scan

----------------------------------------

TITLE: Running BatchWriter Insert Program
DESCRIPTION: Command to execute the Java program that inserts 50K entries using BatchWriter with specified connection parameters.

LANGUAGE: shell
CODE:
./bin/accumulo org.apache.accumulo.examples.simple.helloworld.InsertWithBatchWriter -i instance -z zookeepers -u username -p password -t hellotable

----------------------------------------

TITLE: Creating Accumulo Table without Bloom Filters
DESCRIPTION: This snippet shows how to create a table named 'bloom_test1' without bloom filters and configure its compaction ratio.

LANGUAGE: shell
CODE:
$ ./bin/accumulo shell -u username -p password
Shell - Apache Accumulo Interactive Shell
- version: 1.5.0
- instance name: instance
- instance id: 00000000-0000-0000-0000-000000000000
- 
- type 'help' for a list of available commands
- 
username@instance> setauths -u username -s exampleVis
username@instance> createtable bloom_test1
username@instance bloom_test1> config -t bloom_test1 -s table.compaction.major.ratio=7
username@instance bloom_test1> exit

----------------------------------------

TITLE: Running Commands in Accumulo Shell
DESCRIPTION: Example of how Accumulo shell commands are presented in the documentation. These commands are meant to be executed within the Accumulo shell interface.

LANGUAGE: accumulo
CODE:
> command

----------------------------------------

TITLE: Querying Accumulo Instances using ListInstances
DESCRIPTION: Command to list all Accumulo instances using a specific ZooKeeper instance, showing instance names, IDs and manager locations.

LANGUAGE: bash
CODE:
$ accumulo org.apache.accumulo.server.util.ListInstances
INFO : Using ZooKeepers localhost:2181

 Instance Name       | Instance ID                          | Manager
---------------------+--------------------------------------+-------------------------------
              "test" | 6140b72e-edd8-4126-b2f5-e74a8bbe323b |                127.0.0.1:9999

----------------------------------------

TITLE: Querying Directory Contents in Accumulo
DESCRIPTION: Commands to run the QueryUtil.java class for listing the contents of specific directories stored in Accumulo. It demonstrates querying different paths within the ingested file system structure.

LANGUAGE: bash
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.simple.dirlist.QueryUtil -i instance -z zookeepers -u username -p password -t dirTable --auths exampleVis --path /local/username
$ ./bin/accumulo org.apache.accumulo.examples.simple.dirlist.QueryUtil -i instance -z zookeepers -u username -p password -t dirTable --auths exampleVis --path /local/username/workspace

----------------------------------------

TITLE: Demonstrating Custom Filter Functionality in Apache Accumulo
DESCRIPTION: These commands insert two rows into the table and perform a scan, showing that the custom filter successfully suppresses rows containing 'foo'.

LANGUAGE: shell
CODE:
root@test15 nofoo> insert foo1 f1 q1 v1
root@test15 nofoo> insert noo1 f1 q1 v2
root@test15 nofoo> scan
noo1 f1:q1 []    v2
root@test15 nofoo>

----------------------------------------

TITLE: Configuring Intersecting Iterator for Document-Partitioned Indexing in Accumulo
DESCRIPTION: Demonstrates how to set up a BatchScanner with an Intersecting Iterator to perform efficient set intersection operations on the TabletServer for document-partitioned indexing.

LANGUAGE: java
CODE:
Text[] terms = {new Text("the"), new Text("white"), new Text("house")};

BatchScanner bs = conn.createBatchScanner(table, auths, 20);
bs.setScanIterators(20, IntersectingIterator.class.getName(), "ii");

// tells scanner to look for terms in the column family and sends terms
bs.setScanIteratorOption("ii",
    IntersectingIterator.columnFamiliesOptionName,
    IntersectingIterator.encodeColumns(terms));

bs.setRanges(Collections.singleton(new Range()));

for(Entry<Key,Value> entry : bs) {
    System.out.println(" " + entry.getKey().getColumnQualifier());
}

----------------------------------------

TITLE: Examining Export Files and DistCp Operation
DESCRIPTION: HDFS commands to examine the exported files and perform distributed copy of the table data using hadoop distcp.

LANGUAGE: bash
CODE:
$ hadoop fs -ls /tmp/table1_export
Found 2 items
-rw-r--r--   3 user supergroup        162 2012-07-25 09:56 /tmp/table1_export/distcp.txt
-rw-r--r--   3 user supergroup        821 2012-07-25 09:56 /tmp/table1_export/exportMetadata.zip
$ hadoop fs -cat /tmp/table1_export/distcp.txt
hdfs://n1.example.com:6093/accumulo/tables/3/default_tablet/F0000000.rf
hdfs://n1.example.com:6093/tmp/table1_export/exportMetadata.zip

$ hadoop distcp -f /tmp/table1_export/distcp.txt /tmp/table1_export_dest

----------------------------------------

TITLE: Indexing Java Files in Accumulo
DESCRIPTION: This command indexes all Java files in the Accumulo source code using the Index.java program. It uses 30 partitions and requires instance, zookeeper, table, username, and password parameters.

LANGUAGE: bash
CODE:
$ cd /local/username/workspace/accumulo/
$ find core/src server/src -name "*.java" | xargs ./bin/accumulo org.apache.accumulo.examples.simple.shard.Index -i instance -z zookeepers -t shard -u username -p password --partitions 30

----------------------------------------

TITLE: Inserting Random Data into Accumulo Table
DESCRIPTION: Uses RandomBatchWriter to insert 1 million random values into the 'bloom_test' table. The rows range from 0 to 1 billion, with a random seed of 7.

LANGUAGE: shell
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.simple.client.RandomBatchWriter --seed 7 -i instance -z zookeepers -u username -p password -t bloom_test --num 1000000 --min 0 --max 1000000000 --size 50 --batchMemory 2M --batchLatency 60s --batchThreads 3 --vis exampleVis

----------------------------------------

TITLE: Creating, Writing, and Reading from an Accumulo Table using Java Client
DESCRIPTION: This snippet uses the ReadWriteExample class to create a table, write data to it, and then read from it. It demonstrates basic table operations in Accumulo.

LANGUAGE: Bash
CODE:
$ bin/accumulo $PACKAGE.ReadWriteExample -u root -p mypassword -i instance -z zookeeper --createtable --create --read

----------------------------------------

TITLE: Enabling Tracing in Accumulo Shell
DESCRIPTION: Shell commands for enabling and disabling tracing functionality in the Accumulo command line interface.

LANGUAGE: markdown
CODE:
trace on
trace off

----------------------------------------

TITLE: Testing MaxMutationSize Constraint with TestIngest in Java
DESCRIPTION: This snippet shows how to test the MaxMutationSize constraint by attempting to ingest a single row with 10,000 columns using the TestIngest class. The command will fail due to exceeding the mutation size limit set by the constraint.

LANGUAGE: shell
CODE:
$ ./bin/accumulo org.apache.accumulo.test.TestIngest -i instance -z zookeepers -u username -p password --rows 1 --cols 10000 
ERROR : Constraint violates : ConstraintViolationSummary(constrainClass:org.apache.accumulo.examples.simple.constraints.MaxMutationSize, violationCode:0, violationDescription:mutation exceeded maximum size of 188160, numberOfViolatingMutations:1)

----------------------------------------

TITLE: Creating Table and Setting Classpath Context in Apache Accumulo
DESCRIPTION: These commands create a new table 'nofoo' and configure it to use the previously defined classpath context 'cx1'. This allows the table to access classes from the external jar.

LANGUAGE: shell
CODE:
root@test15> createtable nofoo

root@test15 nofoo> config -t nofoo -s table.classpath.context=cx1

----------------------------------------

TITLE: Scanning Accumulo Table After Reservation Example
DESCRIPTION: This snippet shows how to scan the Accumulo table after running the reservation example. It displays the current state of reservations and the transaction sequence number.

LANGUAGE: bash
CODE:
root@test16> table ars
root@test16 ars> scan
room06:20140101 res:0001 []    mallory
room06:20140101 res:0003 []    trent
room06:20140101 res:0004 []    eve
room06:20140101 tx:seq []    6

----------------------------------------

TITLE: Verifying RowHash Results in Accumulo Table
DESCRIPTION: This snippet shows how to use the Accumulo shell to scan the 'input' table and verify the computed hash values for each row.

LANGUAGE: shell
CODE:
$ ./bin/accumulo shell -u username -p password
Shell - Apache Accumulo Interactive Shell
- version: 1.5.0
- instance name: instance
- instance id: 00000000-0000-0000-0000-000000000000
- 
- type 'help' for a list of available commands
- 
username@instance> scan -t input
a-row cf:cq []    value
a-row cf-HASHTYPE:cq-MD5BASE64 []    IGPBYI1uC6+AJJxC4r5YBA==
b-row cf:cq []    value
b-row cf-HASHTYPE:cq-MD5BASE64 []    IGPBYI1uC6+AJJxC4r5YBA==
username@instance>

----------------------------------------

TITLE: Granting Table Creation Permissions
DESCRIPTION: Shows how to grant System.CREATE_TABLE permission to a user and verify the new permissions.

LANGUAGE: shell
CODE:
username@instance> user root
Enter password for user root: ********
root@instance> grant -s System.CREATE_TABLE -u username
root@instance> user username 
Enter password for user username: ********
username@instance> createtable vistest
username@instance> userpermissions
System permissions: System.CREATE_TABLE

Table permissions (!METADATA): Table.READ
Table permissions (vistest): Table.READ, Table.WRITE, Table.BULK_IMPORT, Table.ALTER_TABLE, Table.GRANT, Table.DROP_TABLE
username@instance vistest> 

----------------------------------------

TITLE: Inserting Data with Visibility Labels
DESCRIPTION: Demonstrates how to insert data with different visibility expressions, including simple and complex boolean combinations.

LANGUAGE: shell
CODE:
username@instance vistest> insert row f1 q1 v1 -l A
username@instance vistest> insert row f2 q2 v2 -l A&B
username@instance vistest> insert row f3 q3 v3 -l apple&carrot|broccoli|spinach
username@instance vistest> insert row f3 q3 v3 -l (apple&carrot)|broccoli|spinach

----------------------------------------

TITLE: Inserting Data into Accumulo Table without Bloom Filters
DESCRIPTION: This snippet demonstrates how to insert data into the 'bloom_test1' table using RandomBatchWriter with different seeds and flushing after each batch.

LANGUAGE: shell
CODE:
$ ARGS="-i instance -z zookeepers -u username -p password -t bloom_test1 --num 1000000 --min 0 --max 1000000000 --size 50 --batchMemory 2M --batchLatency 60s --batchThreads 3 --vis exampleVis"
$ ./bin/accumulo org.apache.accumulo.examples.simple.client.RandomBatchWriter --seed 7 $ARGS
$ ./bin/accumulo shell -u username -p password -e 'flush -t bloom_test1 -w'
$ ./bin/accumulo org.apache.accumulo.examples.simple.client.RandomBatchWriter --seed 8 $ARGS
$ ./bin/accumulo shell -u username -p password -e 'flush -t bloom_test1 -w'
$ ./bin/accumulo org.apache.accumulo.examples.simple.client.RandomBatchWriter --seed 9 $ARGS
$ ./bin/accumulo shell -u username -p password -e 'flush -t bloom_test1 -w'

----------------------------------------

TITLE: Granting Table Creation Permission in Accumulo
DESCRIPTION: This snippet shows how to grant the System.CREATE_TABLE permission to a user and then create a table successfully.

LANGUAGE: shell
CODE:
username@instance> user root
Enter password for user root: ********
root@instance> grant -s System.CREATE_TABLE -u username
root@instance> user username 
Enter password for user username: ********
username@instance> createtable vistest
username@instance> userpermissions
System permissions: System.CREATE_TABLE

Table permissions (!METADATA): Table.READ
Table permissions (vistest): Table.READ, Table.WRITE, Table.BULK_IMPORT, Table.ALTER_TABLE, Table.GRANT, Table.DROP_TABLE
username@instance vistest> 

----------------------------------------

TITLE: Listing Accumulo 1.8.0 Scripts
DESCRIPTION: Shows the contents of the bin directory in Accumulo 1.8.0, demonstrating the large number of scripts present in the older version.

LANGUAGE: bash
CODE:
$ ls accumulo-1.8.0/bin/
accumulo             build_native_library.sh  generate_monitor_certificate.sh  start-here.sh    stop-server.sh
accumulo_watcher.sh  check-slaves             LogForwarder.sh                  start-server.sh  tdown.sh
bootstrap_config.sh  config-server.sh         start-all.sh                     stop-all.sh      tool.sh
bootstrap_hdfs.sh    config.sh                start-daemon.sh                  stop-here.sh     tup.sh

----------------------------------------

TITLE: Creating Table and Adding Splits in Accumulo Shell
DESCRIPTION: Creates a new table 'testRGB' and adds splits to create tablet groups with patterns 01, 02, 03, and 04.

LANGUAGE: shell
CODE:
root@accumulo> createtable testRGB
root@accumulo testRGB> addsplits -t testRGB 01b 01m 01r 01z  02b 02m 02r 02z 03b 03m 03r 03z 04a 04b 04c 04d 04e 04f 04g 04h 04i 04j 04k 04l 04m 04n 04o 04p
root@accumulo testRGB> tables -l

----------------------------------------

TITLE: Creating Accumulo Table with Bloom Filters
DESCRIPTION: Shell commands to create a new table named 'bloom_test' and enable bloom filters on it using the Accumulo shell.

LANGUAGE: shell
CODE:
$ ./accumulo shell -u username -p password
Shell - Apache Accumulo Interactive Shell
- version: 1.3.x-incubating
- instance name: instance
- instance id: 00000000-0000-0000-0000-000000000000
- 
- type 'help' for a list of available commands
- 
username@instance> setauths -u username -s exampleVis
username@instance> createtable bloom_test
username@instance bloom_test> config -t bloom_test -s table.bloom.enabled=true
username@instance bloom_test> exit

----------------------------------------

TITLE: Generating Tour Page Links with Liquid in Markdown
DESCRIPTION: This snippet uses Liquid templating to generate a list of links to the Accumulo tour pages. It iterates through a predefined list of tour pages and creates a numbered list with links to each page.

LANGUAGE: markdown
CODE:
{% for p in tour_pages %}
  {% assign doc_url = p | prepend: '/tour/' | append: '/' %}
  {% assign link_to_page = site.pages | where:'url',doc_url | first %}
  1. [{{ link_to_page.title }}]({{ doc_url }})
{% endfor %}

----------------------------------------

TITLE: Demonstrating StatsCombiner Operations
DESCRIPTION: Example operations showing how the StatsCombiner processes both decimal and hexadecimal values, demonstrating the min, max, sum, and count calculations.

LANGUAGE: shell
CODE:
username@instance runners> insert 123456 name first Joe
username@instance runners> insert 123456 stat marathon 240
username@instance runners> scan
123456 name:first []    Joe
123456 stat:marathon []    240,240,240,1
username@instance runners> insert 123456 stat marathon 230
username@instance runners> insert 123456 stat marathon 220
username@instance runners> scan
123456 name:first []    Joe
123456 stat:marathon []    220,240,690,3
username@instance runners> insert 123456 hstat virtualMarathon 6a
username@instance runners> insert 123456 hstat virtualMarathon 6b
username@instance runners> scan
123456 hstat:virtualMarathon []    6a,6b,d5,2
123456 name:first []    Joe
123456 stat:marathon []    220,240,690,3

----------------------------------------

TITLE: Demonstrating StatsCombiner Operations
DESCRIPTION: Example operations showing how the StatsCombiner processes both decimal and hexadecimal values, demonstrating the min, max, sum, and count calculations.

LANGUAGE: shell
CODE:
username@instance runners> insert 123456 name first Joe
username@instance runners> insert 123456 stat marathon 240
username@instance runners> scan
123456 name:first []    Joe
123456 stat:marathon []    240,240,240,1
username@instance runners> insert 123456 stat marathon 230
username@instance runners> insert 123456 stat marathon 220
username@instance runners> scan
123456 name:first []    Joe
123456 stat:marathon []    220,240,690,3
username@instance runners> insert 123456 hstat virtualMarathon 6a
username@instance runners> insert 123456 hstat virtualMarathon 6b
username@instance runners> scan
123456 hstat:virtualMarathon []    6a,6b,d5,2
123456 name:first []    Joe
123456 stat:marathon []    220,240,690,3

----------------------------------------

TITLE: Viewing MapReduce Job Results
DESCRIPTION: Commands to inspect the output files generated by the MapReduce job in HDFS and view the matched results.

LANGUAGE: shell
CODE:
$ hadoop fs -ls /tmp/output
Found 3 items
-rw-r--r--   1 username supergroup          0 2013-01-10 14:11 /tmp/output/_SUCCESS
drwxr-xr-x   - username supergroup          0 2013-01-10 14:10 /tmp/output/_logs
-rw-r--r--   1 username supergroup         51 2013-01-10 14:10 /tmp/output/part-m-00000

LANGUAGE: shell
CODE:
$ hadoop fs -text /tmp/output/output/part-m-00000
dogrow dogcf:dogcq [] 1357844987994 false    dogvalue

----------------------------------------

TITLE: Generating Random Encryption Key with OpenSSL
DESCRIPTION: Creates a random 32-byte key file for use with the AESCryptoService using OpenSSL.

LANGUAGE: shell
CODE:
openssl rand -out /path/to/keyfile 32

----------------------------------------

TITLE: Querying Accumulo Table without Bloom Filters
DESCRIPTION: This snippet shows how to query the 'bloom_test1' table (without bloom filters) using RandomBatchScanner.

LANGUAGE: shell
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.simple.client.RandomBatchScanner --seed 7 -i instance -z zookeepers -u username -p password -t bloom_test1 --num 500 --min 0 --max 1000000000 --size 50 --scanThreads 20 --auths exampleVis
Generating 500 random queries...finished
35.09 lookups/sec  14.25 secs
num results : 500
Generating 500 random queries...finished
35.33 lookups/sec  14.15 secs
num results : 500

----------------------------------------

TITLE: Using Proxy Client API
DESCRIPTION: Example of using the proxy client API to perform basic operations like login and data manipulation.

LANGUAGE: java
CODE:
Map password = new HashMap<String,String>();
password.put("password", "secret");
ByteBuffer token = client.login("root", password);

client.createTable(token, "myTable", true, TimeType.MILLIS);

String writer = client.createWriter(token, "myTable", new WriterOptions());

Map<ByteBuffer, List<ColumnUpdate> cells> cellsToUpdate = //...

client.updateAndFlush(writer, "myTable", cellsToUpdate);

client.closeWriter(writer);

----------------------------------------

TITLE: Flushing Accumulo Table
DESCRIPTION: Shell commands to flush the bloom_test table to ensure data is written to disk.

LANGUAGE: shell
CODE:
$ ./bin/accumulo shell -u username -p password
username@instance> flush -t bloom_test
Flush of table bloom_test initiated...
username@instance> exit

----------------------------------------

TITLE: Executing Concurrent Writes with Accumulo's Conditional Writer
DESCRIPTION: This output demonstrates the execution of concurrent writes using Accumulo's Conditional Writer. It shows multiple threads attempting to modify an address, with retries on rejected mutations, resulting in a final updated address.

LANGUAGE: text
CODE:
GothamPD table already exists...proceeding...
Thread  52 attempting change '   1007 Mountain Dr, Gotham, New York  ' -> '1007 Mountain Dr, Gotham, New York'
Thread  91 attempting change '   1007 Mountain Dr, Gotham, New York  ' -> '   1007 Mountain Dr, Gotham, NY  '
Thread  90 attempting change '   1007 Mountain Dr, Gotham, New York  ' -> '   1007 Mountain Dr, Gotham, New York  '
Thread  90 attempting change '1007 Mountain Dr, Gotham, New York' -> '1007 Mountain Dr, Gotham, New York'
Thread  91 attempting change '1007 Mountain Dr, Gotham, New York' -> '1007 Mountain Dr, Gotham, NY'
Final address : '1007 Mountain Dr, Gotham, NY'

----------------------------------------

TITLE: Running CharacterHistogram MapReduce Job
DESCRIPTION: This command runs the CharacterHistogram MapReduce job to compute and store byte frequency histograms for the ingested files. It adds this information to the 'info' column family.

LANGUAGE: Bash
CODE:
$ bin/tool.sh lib/accumulo-examples-simple.jar org.apache.accumulo.examples.simple.filedata.CharacterHistogram -i instance -z zookeepers -u username -p password -t dataTable --auths exampleVis --vis exampleVis

----------------------------------------

TITLE: Retrieving Accumulo Instance ID using Java
DESCRIPTION: This code snippet shows how to retrieve the instance ID of an Accumulo cluster using the instanceOperations() method of the AccumuloClient object.

LANGUAGE: java
CODE:
System.out.println(client.instanceOperations().getInstanceID());

----------------------------------------

TITLE: Creating Accumulo Tables for Shard Example
DESCRIPTION: These commands create two Accumulo tables named 'shard' and 'doc2term' required for the shard example.

LANGUAGE: bash
CODE:
username@instance> createtable shard
username@instance shard> createtable doc2term

----------------------------------------

TITLE: Scanning Sorted Data in Accumulo Shell
DESCRIPTION: Commands to access the Accumulo shell and scan the sorted data from the generated table. Shows how to verify the results of the TeraSortIngest operation.

LANGUAGE: bash
CODE:
./bin/accumulo shell -u username -p password

LANGUAGE: text
CODE:
username@instance> scan -t sort
+l-$$OE/ZH c:         4 []    GGGGGGGGGGWWWWWWWWWWMMMMMMMMMMCCCCCCCCCCSSSSSSSSSSIIIIIIIIIIYYYYYYYYYYOOOOOOOO
,C)wDw//u= c:        10 []    CCCCCCCCCCSSSSSSSSSSIIIIIIIIIIYYYYYYYYYYOOOOOOOOOOEEEEEEEEEEUUUUUUUUUUKKKKKKKK
75@~?'WdUF c:         1 []    IIIIIIIIIIYYYYYYYYYYOOOOOOOOOOEEEEEEEEEEUUUUUUUUUUKKKKKKKKKKAAAAAAAAAAQQQQQQQQ
;L+!2rT~hd c:         8 []    MMMMMMMMMMCCCCCCCCCCSSSSSSSSSSIIIIIIIIIIYYYYYYYYYYOOOOOOOOOOEEEEEEEEEEUUUUUUUU
LsS8)|.ZLD c:         5 []    OOOOOOOOOOEEEEEEEEEEUUUUUUUUUUKKKKKKKKKKAAAAAAAAAAQQQQQQQQQQGGGGGGGGGGWWWWWWWW
M^*dDE;6^< c:         9 []    UUUUUUUUUUKKKKKKKKKKAAAAAAAAAAQQQQQQQQQQGGGGGGGGGGWWWWWWWWWWMMMMMMMMMMCCCCCCCC
^Eu)<n#kdP c:         3 []    YYYYYYYYYYOOOOOOOOOOEEEEEEEEEEUUUUUUUUUUKKKKKKKKKKAAAAAAAAAAQQQQQQQQQQGGGGGGGG
le5awB.$sm c:         6 []    WWWWWWWWWWMMMMMMMMMMCCCCCCCCCCSSSSSSSSSSIIIIIIIIIIYYYYYYYYYYOOOOOOOOOOEEEEEEEE
q__[fwhKFg c:         7 []    EEEEEEEEEEUUUUUUUUUUKKKKKKKKKKAAAAAAAAAAQQQQQQQQQQGGGGGGGGGGWWWWWWWWWWMMMMMMMM
w[o||:N&H, c:         2 []    QQQQQQQQQQGGGGGGGGGGWWWWWWWWWWMMMMMMMMMMCCCCCCCCCCSSSSSSSSSSIIIIIIIIIIYYYYYYYY

----------------------------------------

TITLE: Creating and Configuring Table with Custom Classpath
DESCRIPTION: Create a new table and configure it to use the custom classpath context

LANGUAGE: shell
CODE:
createtable nofoo

LANGUAGE: shell
CODE:
config -t nofoo -s table.classpath.context=cx1

----------------------------------------

TITLE: Writing Mutations to Accumulo Table
DESCRIPTION: Uses a BatchWriter to write the mutations to the 'GothamPD' table.

LANGUAGE: java
CODE:
try (BatchWriter writer = client.createBatchWriter("GothamPD")) {
  writer.addMutation(mutation1);
  writer.addMutation(mutation2);
  writer.addMutation(mutation3);
}

----------------------------------------

TITLE: Creating and Exporting Accumulo Table
DESCRIPTION: Shell commands demonstrating table creation, data insertion, splitting, cloning and exporting. Shows how to create a table, insert test data, add splits, clone the table and export it.

LANGUAGE: shell
CODE:
root@test15> createtable table1
root@test15 table1> insert a cf1 cq1 v1
root@test15 table1> insert h cf1 cq1 v2
root@test15 table1> insert z cf1 cq1 v3
root@test15 table1> insert z cf1 cq2 v4
root@test15 table1> addsplits -t table1 b r
root@test15 table1> scan
a cf1:cq1 []    v1
h cf1:cq1 []    v2
z cf1:cq1 []    v3
z cf1:cq2 []    v4
root@test15> config -t table1 -s table.split.threshold=100M
root@test15 table1> clonetable table1 table1_exp
root@test15 table1> offline table1_exp
root@test15 table1> exporttable -t table1_exp /tmp/table1_export
root@test15 table1> quit

----------------------------------------

TITLE: Querying Directory Contents in Accumulo
DESCRIPTION: These commands use the QueryUtil class to list the contents of specific directories stored in Accumulo. They specify the instance, zookeepers, username, password, table, authorizations, and the path to query.

LANGUAGE: bash
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.simple.dirlist.QueryUtil -i instance -z zookeepers -u username -p password -t dirTable --auths exampleVis --path /local/username
$ ./bin/accumulo org.apache.accumulo.examples.simple.dirlist.QueryUtil -i instance -z zookeepers -u username -p password -t dirTable --auths exampleVis --path /local/username/workspace

----------------------------------------

TITLE: Starting Accumulo Cluster
DESCRIPTION: Command to start all Accumulo processes across the cluster. Requires passwordless SSH to be set up between nodes.

LANGUAGE: bash
CODE:
./bin/start-all.sh

----------------------------------------

TITLE: Accumulo 1.8.0 Command Usage
DESCRIPTION: Shows the basic command usage output in Accumulo 1.8.0.

LANGUAGE: bash
CODE:
$ ./accumulo-1.8.0/bin/accumulo
accumulo admin | check-server-config | classpath | create-token | gc | help | info | init | jar <jar> [<main class>] args |
  login-info | master | minicluster | monitor | proxy | rfile-info | shell | tracer | tserver | version | zookeeper | <accumulo class> args

----------------------------------------

TITLE: Querying Accumulo Table with RandomBatchScanner
DESCRIPTION: This snippet demonstrates how to perform 500 random queries against the 'bloom_test' table using the RandomBatchScanner example class.

LANGUAGE: shell
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.simple.client.RandomBatchScanner --seed 7 -i instance -z zookeepers -u username -p password -t bloom_test --num 500 --min 0 --max 1000000000 --size 50 --batchThreads 20 --auths exampleVis
Generating 500 random queries...finished
96.19 lookups/sec   5.20 secs
num results : 500
Generating 500 random queries...finished
102.35 lookups/sec   4.89 secs
num results : 500

----------------------------------------

TITLE: Running Accumulo MapReduce Job with Token File Authentication
DESCRIPTION: This snippet shows how to run the WordCount MapReduce job using a token file for authentication instead of providing the password directly. It demonstrates the use of the '-tf' option to specify the token file.

LANGUAGE: shell
CODE:
$ ./bin/tool.sh lib/accumulo-examples-simple.jar org.apache.accumulo.examples.simple.mapreduce.WordCount -i instance -z zookeepers  --input /user/username/wc -t wordCount -u username -tf tokenfile

----------------------------------------

TITLE: Querying Accumulo Table for Word Count Results
DESCRIPTION: This snippet shows how to use the Accumulo shell to query the 'wordCount' table and retrieve the word count results after the MapReduce job has completed.

LANGUAGE: shell
CODE:
$ ./bin/accumulo shell -u username -p password
username@instance> table wordCount
username@instance wordCount> scan -b the
the count:20080906 []    75
their count:20080906 []    2
them count:20080906 []    1
then count:20080906 []    1
there count:20080906 []    1
these count:20080906 []    3
this count:20080906 []    6
through count:20080906 []    1
time count:20080906 []    3
time. count:20080906 []    1
to count:20080906 []    27
total count:20080906 []    1
tserver, count:20080906 []    1
tserver.compaction.major.concurrent.max count:20080906 []    1
...

----------------------------------------

TITLE: Creating a Table in Accumulo
DESCRIPTION: This Accumulo shell command creates a new table named 'nofoo'.

LANGUAGE: shell
CODE:
createtable nofoo

----------------------------------------

TITLE: Demonstrating JShell Commands and Snippet Execution
DESCRIPTION: Illustrates the usage of various JShell commands like /list, /list <id>, /list <name>, and /<id> for managing and executing code snippets.

LANGUAGE: java
CODE:
jshell> var x = 12;
x ==> 12

jshell> var y = 23;
y ==> 23

jshell> int add(int x, int y) {
   ...>   return x + y;
   ...> }
|  created method add(int,int)

jshell> add(4,5);
$6 ==> 9

jshell> /list

   1 : System.out.println("Preparing JShell for Apache Accumulo");
   2 : var x = 12;
   3 : var y = 23;
   4 : int add(int x, int y) {
         return x + y;
       }

 jshell> /list add

   5 : int add(int x, int y) {
         return x + y;
       }

jshell> /list 4

   4 : int add(int x, int y) {
         return x + y;
       }

jshell> /4
add(4,5);
$8 ==> 9

----------------------------------------

TITLE: Hadoop DistCp Command for Data Transfer
DESCRIPTION: Shows the distcp command used to copy the exported table data to a new location for import.

LANGUAGE: bash
CODE:
$ hadoop distcp -f /tmp/table1_export/distcp.txt /tmp/table1_export_dest

----------------------------------------

TITLE: Scanning Sorted Data in Accumulo Shell
DESCRIPTION: Commands to access the Accumulo shell and scan the sorted data from the specified table. Shows the format of the stored key-value pairs.

LANGUAGE: shell
CODE:
./bin/accumulo shell -u username -p password
username@instance> scan -t sort

----------------------------------------

TITLE: Initializing Accumulo
DESCRIPTION: Command to initialize Accumulo, setting up data storage locations in Zookeeper and HDFS. This step prompts for instance name and root password.

LANGUAGE: bash
CODE:
./bin/accumulo init

----------------------------------------

TITLE: Using RFile Info Tool - Basic Metadata
DESCRIPTION: Example of using the rfile-info command to examine metadata of an Accumulo storage file, showing information like locality groups, block counts, and key ranges.

LANGUAGE: bash
CODE:
$ accumulo rfile-info /accumulo/tables/1/default_tablet/A000000n.rf

----------------------------------------

TITLE: Running RandomBatchScanner in Accumulo
DESCRIPTION: This command executes the RandomBatchScanner class to perform 100 random queries on the 'batchtest1' table and verify the values.

LANGUAGE: bash
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.simple.client.RandomBatchScanner -i instance -z zookeepers -u username -p password -t batchtest1 --num 100 --min 0 --max 10000 --size 50 --scanThreads 20 --auths exampleVis

----------------------------------------

TITLE: Retrieving Address from Accumulo using Java
DESCRIPTION: This method retrieves an address from Accumulo using a scanner. It uses an IsolatedScanner to read the value of a specific key.

LANGUAGE: java
CODE:
String getAddress(AccumuloClient client, String id)  {
  try (org.apache.accumulo.core.client.Scanner scan = new IsolatedScanner(client.createScanner("GothamPD", Authorizations.EMPTY))) {
    scan.setRange(Range.exact(id, "location", "home"));
    for (Map.Entry<Key, Value> entry : scan) {
      return entry.getValue().toString();
    }
    return null;
  } catch (TableNotFoundException e) {
    throw new RuntimeException(e);
  }
}

----------------------------------------

TITLE: Random Batch Scanning in Accumulo
DESCRIPTION: Command to perform 100 random queries on the written data using RandomBatchScanner. Configures scan threads and authorization settings.

LANGUAGE: bash
CODE:
./bin/accumulo org.apache.accumulo.examples.simple.client.RandomBatchScanner -i instance -z zookeepers -u username -p password -t batchtest1 --num 100 --min 0 --max 10000 --size 50 --scanThreads 20 --auths exampleVis

----------------------------------------

TITLE: Inserting Test Data in Accumulo Shell
DESCRIPTION: Commands to create a table and insert sample data using the Accumulo shell interface. Creates a table named 'input' and inserts two records with dog and cat related data.

LANGUAGE: shell
CODE:
$ ./bin/accumulo shell -u username -p password
Shell - Apache Accumulo Interactive Shell
- version: 1.6.0
- instance name: instance
- instance id: 00000000-0000-0000-0000-000000000000
-
- type 'help' for a list of available commands
-
username@instance> createtable input
username@instance> insert dogrow dogcf dogcq dogvalue
username@instance> insert catrow catcf catcq catvalue
username@instance> quit

----------------------------------------

TITLE: Scanning Accumulo Table for RowHash Results
DESCRIPTION: Uses the Accumulo shell to scan the 'input' table and display the original data along with the computed hashes. This step verifies the successful execution of the RowHash job.

LANGUAGE: shell
CODE:
$ ./bin/accumulo shell -u username -p password
Shell - Apache Accumulo Interactive Shell
- version: 1.6.0
- instance name: instance
- instance id: 00000000-0000-0000-0000-000000000000
-
- type 'help' for a list of available commands
-
username@instance> scan -t input
a-row cf:cq []    value
a-row cf-HASHTYPE:cq-MD5BASE64 []    IGPBYI1uC6+AJJxC4r5YBA==
b-row cf:cq []    value
b-row cf-HASHTYPE:cq-MD5BASE64 []    IGPBYI1uC6+AJJxC4r5YBA==
username@instance>

----------------------------------------

TITLE: Inserting Test Data in Accumulo Shell
DESCRIPTION: Commands to create a table and insert sample data using the Accumulo shell interface. Creates a table named 'input' and inserts two records with dog and cat related data.

LANGUAGE: shell
CODE:
$ ./bin/accumulo shell -u username -p password
Shell - Apache Accumulo Interactive Shell
- version: 1.6.0
- instance name: instance
- instance id: 00000000-0000-0000-0000-000000000000
-
- type 'help' for a list of available commands
-
username@instance> createtable input
username@instance> insert dogrow dogcf dogcq dogvalue
username@instance> insert catrow catcf catcq catvalue
username@instance> quit

----------------------------------------

TITLE: Configuring Accumulo with Bootstrap Script
DESCRIPTION: Command to run the bootstrap configuration script, which assists in setting up initial configuration files for Accumulo.

LANGUAGE: bash
CODE:
./bin/bootstrap_config.sh

----------------------------------------

TITLE: Setting HDFS Permissions and Initializing Accumulo
DESCRIPTION: These commands set the necessary HDFS permissions, initialize Accumulo, and then restore the root HDFS permissions.

LANGUAGE: bash
CODE:
sudo -u hdfs hdfs dfs -chmod 777 /
sudo -u accumulo accumulo init
sudo -u hdfs hdfs dfs -chmod 755 /

----------------------------------------

TITLE: Example Output of Sorted Data
DESCRIPTION: Sample output showing the format of the sorted data in Accumulo, displaying keys and their corresponding values with column families.

LANGUAGE: text
CODE:
+l-$$OE/ZH c:         4 []    GGGGGGGGGGWWWWWWWWWWMMMMMMMMMMCCCCCCCCCCSSSSSSSSSSIIIIIIIIIIYYYYYYYYYYOOOOOOOO
,C)wDw//u= c:        10 []    CCCCCCCCCCSSSSSSSSSSIIIIIIIIIIYYYYYYYYYYOOOOOOOOOOEEEEEEEEEEUUUUUUUUUUKKKKKKKK
75@~?'WdUF c:         1 []    IIIIIIIIIIYYYYYYYYYYOOOOOOOOOOEEEEEEEEEEUUUUUUUUUUKKKKKKKKKKAAAAAAAAAAQQQQQQQQ
;L+!2rT~hd c:         8 []    MMMMMMMMMMCCCCCCCCCCSSSSSSSSSSIIIIIIIIIIYYYYYYYYYYOOOOOOOOOOEEEEEEEEEEUUUUUUUU
LsS8)|.ZLD c:         5 []    OOOOOOOOOOEEEEEEEEEEUUUUUUUUUUKKKKKKKKKKAAAAAAAAAAQQQQQQQQQQGGGGGGGGGGWWWWWWWW
M^*dDE;6^< c:         9 []    UUUUUUUUUUKKKKKKKKKKAAAAAAAAAAQQQQQQQQQQGGGGGGGGGGWWWWWWWWWWMMMMMMMMMMCCCCCCCC
^Eu)<n#kdP c:         3 []    YYYYYYYYYYOOOOOOOOOOEEEEEEEEEEUUUUUUUUUUKKKKKKKKKKAAAAAAAAAAQQQQQQQQQQGGGGGGGG
le5awB.$sm c:         6 []    WWWWWWWWWWMMMMMMMMMMCCCCCCCCCCSSSSSSSSSSIIIIIIIIIIYYYYYYYYYYOOOOOOOOOOEEEEEEEE
q__[fwhKFg c:         7 []    EEEEEEEEEEUUUUUUUUUUKKKKKKKKKKAAAAAAAAAAQQQQQQQQQQGGGGGGGGGGWWWWWWWWWWMMMMMMMM
w[o||:N&H, c:         2 []    QQQQQQQQQQGGGGGGGGGGWWWWWWWWWWMMMMMMMMMMCCCCCCCCCCSSSSSSSSSSIIIIIIIIIIYYYYYYYY

----------------------------------------

TITLE: Inserting data with BatchWriter in Java
DESCRIPTION: This command runs a Java program that inserts 10K rows (50K entries) into Accumulo using BatchWriter. Each row has 5 entries.

LANGUAGE: shell
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.helloworld.InsertWithBatchWriter instance zookeepers hellotable username password

----------------------------------------

TITLE: Accumulo Shell Commands for Table Import
DESCRIPTION: Demonstrates importing the exported table data into a new table and verifying the data, splits, and configuration were preserved.

LANGUAGE: shell
CODE:
root@test15> importtable table1_copy /tmp/table1_export_dest
root@test15> table table1_copy
root@test15 table1_copy> scan
a cf1:cq1 []    v1
h cf1:cq1 []    v2
z cf1:cq1 []    v3
z cf1:cq2 []    v4
root@test15 table1_copy> getsplits -t table1_copy
b
r
root@test15> config -t table1_copy -f split
---------+--------------------------+-------------------------------------------
SCOPE    | NAME                     | VALUE
---------+--------------------------+-------------------------------------------
default  | table.split.threshold .. | 1G
table    |    @override ........... | 100M
---------+--------------------------+-------------------------------------------
root@test15> tables -l
accumulo.metadata    =>        !0
accumulo.root        =>        +r
table1_copy          =>         5
trace                =>         1
root@test15 table1_copy> scan -t accumulo.metadata -b 5 -c srv:time
5;b srv:time []    M1343224500467
5;r srv:time []    M1343224500467
5< srv:time []    M1343224500467

----------------------------------------

TITLE: Searching File and Directory Names
DESCRIPTION: These commands demonstrate how to use QueryUtil to perform searches on file or directory names, including wildcard searches, on the indexTable.

LANGUAGE: bash
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.simple.dirlist.QueryUtil -i instance -z zookeepers -u username -p password -t indexTable --auths exampleVis --path filename --search
$ ./bin/accumulo org.apache.accumulo.examples.simple.dirlist.QueryUtil -i instance -z zookeepers -u username -p password -t indexTable --auths exampleVis --path 'filename*' --search
$ ./bin/accumulo org.apache.accumulo.examples.simple.dirlist.QueryUtil -i instance -z zookeepers -u username -p password -t indexTable --auths exampleVis --path '*jar' --search
$ ./bin/accumulo org.apache.accumulo.examples.simple.dirlist.QueryUtil -i instance -z zookeepers -u username -p password -t indexTable --auths exampleVis --path 'filename*jar' --search

----------------------------------------

TITLE: Running RowHash MapReduce Job on Accumulo
DESCRIPTION: Executes the RowHash MapReduce job using the accumulo-examples-simple.jar. This job computes and inserts hashes for each row in the 'input' table that contains the specified column 'cf:cq'.

LANGUAGE: shell
CODE:
$ bin/tool.sh lib/accumulo-examples-simple.jar org.apache.accumulo.examples.simple.mapreduce.RowHash -u user -p passwd -i instance -t input --column cf:cq

----------------------------------------

TITLE: Inserting Sample Data into Accumulo Table
DESCRIPTION: This snippet shows how to create a table and insert sample data using the Accumulo shell. It creates a table named 'input' and inserts three key-value pairs.

LANGUAGE: shell
CODE:
$ ./bin/accumulo shell -u username -p password
Shell - Apache Accumulo Interactive Shell
- version: 1.5.0
- instance name: instance
- instance id: 00000000-0000-0000-0000-000000000000
- 
- type 'help' for a list of available commands
- 
username@instance> createtable input
username@instance> insert dog cf cq dogvalue
username@instance> insert cat cf cq catvalue
username@instance> insert junk family qualifier junkvalue
username@instance> quit

----------------------------------------

TITLE: Pushing Branch to Fork Repository
DESCRIPTION: Git command to push the local feature branch to a forked repository on GitHub, making it available for creating a pull request.

LANGUAGE: bash
CODE:
git push origin accumulo-4321

----------------------------------------

TITLE: Decommissioning Accumulo Nodes
DESCRIPTION: Command to gracefully shutdown tablet servers when removing nodes from the cluster.

LANGUAGE: bash
CODE:
$ACCUMULO_HOME/bin/accumulo admin stop <host(s)> {<host> ...}

----------------------------------------

TITLE: Configuring Sample Set in Accumulo
DESCRIPTION: Sets up table sampling configuration using murmur3_32 hash function with modulus 3. Shows how to configure the RowSampler for the table.

LANGUAGE: shell
CODE:
config -t sampex -s table.sampler.opt.hasher=murmur3_32
config -t sampex -s table.sampler.opt.modulus=3
config -t sampex -s table.sampler=org.apache.accumulo.core.client.sample.RowSampler

----------------------------------------

TITLE: Creating Accumulo Table via Shell
DESCRIPTION: Commands to log into Accumulo shell and create a new table named 'hellotable'

LANGUAGE: shell
CODE:
$ ./bin/accumulo shell -u username -p password
username@instance> createtable hellotable

----------------------------------------

TITLE: Inserting Data with MapReduce
DESCRIPTION: Command to insert data using MapReduce writers through a Java program

LANGUAGE: shell
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.simple.helloworld.InsertWithOutputFormat instance zookeepers username password hellotable

----------------------------------------

TITLE: Copying Files to HDFS for Word Count Processing
DESCRIPTION: This snippet shows how to copy a file to HDFS and verify its presence for word count processing.

LANGUAGE: shell
CODE:
$ hadoop fs -copyFromLocal $ACCUMULO_HOME/README /user/username/wc/Accumulo.README
$ hadoop fs -ls /user/username/wc
Found 1 items
-rw-r--r--   2 username supergroup       9359 2009-07-15 17:54 /user/username/wc/Accumulo.README

----------------------------------------

TITLE: Defining Search Results Display in HTML
DESCRIPTION: This HTML snippet creates elements for displaying search status and results. It includes a div for status messages and a table for showing search results.

LANGUAGE: HTML
CODE:
<div id="search_status"></div>

<table class="table table-striped"><tbody id="search_results"></tbody></table>

----------------------------------------

TITLE: Executing Bulk Ingest Process in Accumulo
DESCRIPTION: This bash script demonstrates the complete process of bulk ingesting data into Accumulo. It includes steps for setting up a table, generating test data, performing the bulk ingest, and verifying the ingested data. The script uses various Accumulo commands and custom Java classes.

LANGUAGE: bash
CODE:
$ PKG=org.apache.accumulo.examples.simple.mapreduce.bulk
$ ARGS="-i instance -z zookeepers -u username -p password"
$ ./bin/accumulo $PKG.SetupTable $ARGS -t test_bulk row_00000333 row_00000666
$ ./bin/accumulo $PKG.GenerateTestData --start-row 0 --count 1000 --output bulk/test_1.txt
$ ./bin/tool.sh lib/accumulo-examples-simple.jar $PKG.BulkIngestExample $ARGS -t test_bulk --inputDir bulk --workDir tmp/bulkWork
$ ./bin/accumulo $PKG.VerifyIngest $ARGS -t test_bulk --start-row 0 --count 1000

----------------------------------------

TITLE: Assigning Classpath Context to Accumulo Table
DESCRIPTION: This command configures the 'nofoo' table to use the previously defined 'cx1' classpath context.

LANGUAGE: shell
CODE:
config -t nofoo -s table.classpath.context=cx1

----------------------------------------

TITLE: Configuring Hadoop Client for Local Filesystem
DESCRIPTION: This XML snippet configures Hadoop to use a more reliable filesystem implementation for local file storage.

LANGUAGE: xml
CODE:
  <property>
    <name>fs.file.impl</name>
    <value>org.apache.hadoop.fs.RawLocalFileSystem</value>
  </property>

----------------------------------------

TITLE: Running Multiple TabletServers on a Single Node
DESCRIPTION: Commands to start multiple TabletServer instances on a single node using environment variables.

LANGUAGE: bash
CODE:
ACCUMULO_SERVICE_INSTANCE=1 ./bin/accumulo tserver &> ./logs/tserver1.out &
ACCUMULO_SERVICE_INSTANCE=2 ./bin/accumulo tserver &> ./logs/tserver2.out &

----------------------------------------

TITLE: Running RowHash MapReduce Job
DESCRIPTION: Command to execute the RowHash MapReduce job that computes hashes for rows in the input table.

LANGUAGE: shell
CODE:
$ bin/tool.sh lib/accumulo-examples-simple.jar org.apache.accumulo.examples.simple.mapreduce.RowHash -u user -p passwd -i instance -t input --column cf:cq

----------------------------------------

TITLE: Querying Terms from Accumulo Shard
DESCRIPTION: Example command showing how to query the shard table for files containing specific terms ('foo' and 'bar').

LANGUAGE: bash
CODE:
$ cd $ACCUMULO_HOME
$ ./bin/accumulo org.apache.accumulo.examples.simple.shard.Query instance zookeepers shard username password foo bar

----------------------------------------

TITLE: Configuring Visibility Constraints in Accumulo
DESCRIPTION: This snippet shows how to set a constraint that limits users to only insert data they can read themselves, using the VisibilityConstraint.

LANGUAGE: shell
CODE:
username@instance vistest> user root
Enter password for user root: ******
root@instance vistest> config -t vistest -s table.constraint.1=org.apache.accumulo.core.security.VisibilityConstraint    
root@instance vistest> user username
Enter password for user username: ********
username@instance vistest> insert row f4 q4 v4 -l spinach                                                                
    Constraint Failures:
        ConstraintViolationSummary(constrainClass:org.apache.accumulo.core.security.VisibilityConstraint, violationCode:2, violationDescription:User does not have authorization on column visibility, numberOfViolatingMutations:1)
username@instance vistest> insert row f4 q4 v4 -l spinach|broccoli
username@instance vistest> scan
row f1:q1 [A]    v1
row f2:q2 [A&B]    v2
row f3:q3 [(apple&carrot)|broccoli|spinach]    v3
row f4:q4 [spinach|broccoli]    v4
username@instance vistest> 

----------------------------------------

TITLE: Scanning Table via Shell
DESCRIPTION: Commands to select and scan the hellotable using the Accumulo shell interface.

LANGUAGE: shell
CODE:
table hellotable
scan

----------------------------------------

TITLE: Creating Table with Bloom Filters
DESCRIPTION: Shows how to create an Accumulo table and enable bloom filters using the Accumulo shell.

LANGUAGE: shell
CODE:
$ ./bin/accumulo shell -u username -p password
Shell - Apache Accumulo Interactive Shell
- version: 1.6.0
- instance name: instance
- instance id: 00000000-0000-0000-0000-000000000000
-
- type 'help' for a list of available commands
-
username@instance> setauths -u username -s exampleVis
username@instance> createtable bloom_test
username@instance bloom_test> config -t bloom_test -s table.bloom.enabled=true
username@instance bloom_test> exit

----------------------------------------

TITLE: Demonstrating Filter Functionality in Accumulo
DESCRIPTION: These commands insert two rows into the 'nofoo' table and perform a scan to show that the FooFilter is working by suppressing rows containing 'foo'.

LANGUAGE: shell
CODE:
insert foo1 f1 q1 v1
insert noo1 f1 q1 v2
scan

----------------------------------------

TITLE: Copy Files to HDFS
DESCRIPTION: Commands to copy the Accumulo README file to HDFS and verify its presence.

LANGUAGE: shell
CODE:
$ hadoop fs -copyFromLocal $ACCUMULO_HOME/README /user/username/wc/Accumulo.README
$ hadoop fs -ls /user/username/wc

----------------------------------------

TITLE: Creating New Documentation Collection for Major Release
DESCRIPTION: This snippet demonstrates how to create a new documentation collection for a major release.

LANGUAGE: bash
CODE:
cp -r _docs-2 _docs-3

----------------------------------------

TITLE: Creating Table and Setting Combiners in Apache Accumulo Shell
DESCRIPTION: This snippet demonstrates how to create a table named 'runners' and set up two StatsCombiner iterators with different configurations for decimal and hexadecimal statistics.

LANGUAGE: shell
CODE:
$ bin/accumulo shell -u username
Enter current password for 'username'@'instance': ***

Shell - Apache Accumulo Interactive Shell
-
- version: 1.5.0
- instance name: instance
- instance id: 00000000-0000-0000-0000-000000000000
-
- type 'help' for a list of available commands
-
username@instance> createtable runners
username@instance runners> setiter -t runners -p 10 -scan -minc -majc -n decStats -class org.apache.accumulo.examples.simple.combiner.StatsCombiner
Combiner that keeps track of min, max, sum, and count
----------> set StatsCombiner parameter all, set to true to apply Combiner to every column, otherwise leave blank. if true, columns option will be ignored.:
----------> set StatsCombiner parameter columns, <col fam>[:<col qual>]{,<col fam>[:<col qual>]} escape non-alphanum chars using %<hex>.: stat
----------> set StatsCombiner parameter reduceOnFullCompactionOnly, If true, only reduce on full major compactions.  Defaults to false. :
----------> set StatsCombiner parameter radix, radix/base of the numbers: 10
username@instance runners> setiter -t runners -p 11 -scan -minc -majc -n hexStats -class org.apache.accumulo.examples.simple.combiner.StatsCombiner
Combiner that keeps track of min, max, sum, and count
----------> set StatsCombiner parameter all, set to true to apply Combiner to every column, otherwise leave blank. if true, columns option will be ignored.:
----------> set StatsCombiner parameter columns, <col fam>[:<col qual>]{,<col fam>[:<col qual>]} escape non-alphanum chars using %<hex>.: hstat
----------> set StatsCombiner parameter reduceOnFullCompactionOnly, If true, only reduce on full major compactions.  Defaults to false. : 
----------> set StatsCombiner parameter radix, radix/base of the numbers: 16

----------------------------------------

TITLE: Creating Token File for Accumulo Authentication in Bash
DESCRIPTION: This snippet shows how to create a token file for Accumulo authentication, which can be used instead of providing a password directly in MapReduce jobs.

LANGUAGE: bash
CODE:
$ ./bin/accumulo create-token
$ ./bin/accumulo create-token -u root -p secret -f root.pw

----------------------------------------

TITLE: Creating Accumulo Tables for Shard Example
DESCRIPTION: Commands to create the required 'shard' and 'doc2term' tables in Accumulo for the example programs.

LANGUAGE: bash
CODE:
username@instance> createtable shard
username@instance shard> createtable doc2term

----------------------------------------

TITLE: Running Read Write Example
DESCRIPTION: Shows how to execute ReadWriteExample.java to create a table, write data, and read it back using various flags.

LANGUAGE: bash
CODE:
bin/accumulo $PACKAGE.ReadWriteExample -u root -p mypassword -i instance -z zookeeper --createtable --create --read

----------------------------------------

TITLE: Generating Host Certificates Using OpenSSL
DESCRIPTION: Shell commands to generate individual certificates and keystores for each host in the Accumulo instance. Creates server.jks containing the host-specific certificate signed by the CA.

LANGUAGE: shell
CODE:
# Create the private key for our server
openssl genrsa -out server.key 4096

# Generate a certificate signing request (CSR) with our private key
openssl req -new -key server.key -out server.csr

# Use the CSR and the CA to create a certificate for the server (a reply to the CSR)
openssl x509 -req -in server.csr -CA root.pem -CAkey root.key -CAcreateserial \
    -out server.crt -days 365

# Use the certificate and the private key for our server to create PKCS12 file
openssl pkcs12 -export -in server.crt -inkey server.key -certfile server.crt \
    -name 'server-key' -out server.p12

# Create a Java KeyStore for the server using the PKCS12 file (private key)
keytool -importkeystore -srckeystore server.p12 -srcstoretype pkcs12 -destkeystore \
    server.jks -deststoretype JKS

# Remove the PKCS12 file as we don't need it
rm server.p12

# Import the CA-signed certificate to the keystore
keytool -import -trustcacerts -alias server-crt -file server.crt -keystore server.jks

----------------------------------------

TITLE: Executing Specific Integration Tests in Accumulo
DESCRIPTION: This Maven command runs specific integration tests while skipping unit tests. It shows how to target multiple integration test classes and ignore the absence of unit tests.

LANGUAGE: bash
CODE:
mvn verify -Dtest=NoSuchTestExists -Dit.test=MyIT,YourIT -DfailIfNoTests=false

----------------------------------------

TITLE: Scanning Sorted Data in Accumulo Shell
DESCRIPTION: This snippet demonstrates how to use the Accumulo shell to scan the sorted data after the MapReduce job completes. It logs into the Accumulo shell and performs a scan on the 'sort' table.

LANGUAGE: bash
CODE:
$ ./bin/accumulo shell -u username -p password

LANGUAGE: accumulo
CODE:
username@instance> scan -t sort

----------------------------------------

TITLE: Copying Custom Filter JAR to HDFS
DESCRIPTION: This command copies the FooFilter.jar from the local filesystem to HDFS, making it available for Accumulo to use.

LANGUAGE: shell
CODE:
hadoop fs -copyFromLocal $ACCUMULO_HOME/test/src/test/resources/FooFilter.jar /user1/lib

----------------------------------------

TITLE: Creating Table in Accumulo Shell
DESCRIPTION: This command creates a new table named 'batchtest1' in Accumulo using the shell interface.

LANGUAGE: bash
CODE:
$ ./bin/accumulo shell -u username -e "createtable batchtest1"

----------------------------------------

TITLE: Running Sunny-Day Integration Tests for Accumulo
DESCRIPTION: This Maven command runs basic integration tests, checkstyle, and findbugs on the Accumulo codebase. It's useful for verifying changes before submitting a pull request.

LANGUAGE: bash
CODE:
mvn verify -Psunny

----------------------------------------

TITLE: Table Maintenance Operations in Accumulo Shell
DESCRIPTION: Shows how to perform table maintenance operations such as compaction and flushing using the Accumulo shell.

LANGUAGE: shell
CODE:
root@myinstance mytable> compact -t mytable
07 16:13:53,201 [shell.Shell] INFO : Compaction of table mytable
scheduled for 20100707161353EDT

root@myinstance mytable> flush -t mytable
07 16:14:19,351 [shell.Shell] INFO : Flush of table mytable
initiated...

----------------------------------------

TITLE: Copying Files to HDFS for Word Count in Bash
DESCRIPTION: This snippet shows how to copy a local README file to HDFS for use in the word count example.

LANGUAGE: bash
CODE:
$ hadoop fs -copyFromLocal $ACCUMULO_HOME/README /user/username/wc/Accumulo.README
$ hadoop fs -ls /user/username/wc
Found 1 items
-rw-r--r--   2 username supergroup       9359 2009-07-15 17:54 /user/username/wc/Accumulo.README

----------------------------------------

TITLE: Counting Files and Directories in Accumulo
DESCRIPTION: This command runs the FileCount class to compute recursive counts of files and directories stored in the dirTable. The results are written back to the same table, demonstrating Accumulo's read-write capabilities.

LANGUAGE: bash
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.simple.dirlist.FileCount instance zookeepers username password dirTable exampleVis exampleVis

----------------------------------------

TITLE: Reading Data with Java Program
DESCRIPTION: Command to execute Java program that reads data from specified row range in Accumulo table

LANGUAGE: shell
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.simple.helloworld.ReadData -i instance -z zookeepers -u username -p password -t hellotable --startKey row_0 --endKey row_1001

----------------------------------------

TITLE: Creating a Table with Logical Time in Accumulo
DESCRIPTION: Shows how to create a table using logical time in Accumulo via the shell.

LANGUAGE: Shell
CODE:
user@myinstance> createtable -tl logical

----------------------------------------

TITLE: Testing MaxMutationSize Constraint with Large Mutation in Accumulo
DESCRIPTION: This snippet demonstrates an attempt to ingest a single row with 10,000 columns, which exceeds the memory limit set by the MaxMutationSize constraint. The command uses the TestIngest class to perform the ingestion, resulting in a constraint violation error.

LANGUAGE: shell
CODE:
$ ./bin/accumulo org.apache.accumulo.test.TestIngest -i instance -z zookeepers -u username -p password --rows 1 --cols 10000 
ERROR : Constraint violates : ConstraintViolationSummary(constrainClass:org.apache.accumulo.examples.simple.constraints.MaxMutationSize, violationCode:0, violationDescription:mutation exceeded maximum size of 188160, numberOfViolatingMutations:1)

----------------------------------------

TITLE: Querying Accumulo Table with RandomBatchScanner
DESCRIPTION: Performs 500 random queries against the 'bloom_test' table using the same seed as insertion, demonstrating query performance for existing values.

LANGUAGE: shell
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.simple.client.RandomBatchScanner --seed 7 -i instance -z zookeepers -u username -p password -t bloom_test --num 500 --min 0 --max 1000000000 --size 50 --batchThreads 20 --auths exampleVis

----------------------------------------

TITLE: Testing MaxMutationSize Constraint with Large Mutation in Accumulo
DESCRIPTION: This snippet demonstrates an attempt to ingest a single row with 10,000 columns, which exceeds the memory limit set by the MaxMutationSize constraint. The command uses the TestIngest class to perform the ingestion, resulting in a constraint violation error.

LANGUAGE: shell
CODE:
$ ./bin/accumulo org.apache.accumulo.test.TestIngest -i instance -z zookeepers -u username -p password --rows 1 --cols 10000 
ERROR : Constraint violates : ConstraintViolationSummary(constrainClass:org.apache.accumulo.examples.simple.constraints.MaxMutationSize, violationCode:0, violationDescription:mutation exceeded maximum size of 188160, numberOfViolatingMutations:1)

----------------------------------------

TITLE: Flushing Accumulo Table
DESCRIPTION: Flushes the 'bloom_test' table to ensure all data is written to disk before querying.

LANGUAGE: shell
CODE:
$ ./bin/accumulo shell -u username -p password -e 'flush -t bloom_test -w'
05 10:40:06,069 [shell.Shell] INFO : Flush of table bloom_test completed.

----------------------------------------

TITLE: Comparing Value Contents with Byte Array in Java
DESCRIPTION: Shows how to use the new contentEquals method to compare a Value object's contents with a byte array, replacing the previous Value.equals(byte[]) functionality.

LANGUAGE: Java
CODE:
Value value = new Value("content".getBytes());
boolean isEqual = value.contentEquals("content".getBytes());

----------------------------------------

TITLE: Bootstrap Configuration Script for Apache Accumulo
DESCRIPTION: Command to run the interactive configuration bootstrap script that helps set up Accumulo based on memory usage, map type, and Hadoop version.

LANGUAGE: bash
CODE:
$ACCUMULO_HOME/bin/bootstrap_config.sh

----------------------------------------

TITLE: Running RowHash MapReduce Job
DESCRIPTION: Command to execute the RowHash MapReduce job that computes hashes for rows containing the specified column.

LANGUAGE: shell
CODE:
$ bin/tool.sh lib/accumulo-examples-simple.jar org.apache.accumulo.examples.simple.mapreduce.RowHash -u user -p passwd -i instance -t input --column cf:cq

----------------------------------------

TITLE: Modifying Multiple Namespace Properties with Java API
DESCRIPTION: Demonstrates adding, modifying, and removing multiple namespace properties in a single operation using the Accumulo Java API.

LANGUAGE: java
CODE:
client.namespaceOperations().modifyProperties("mynamespace", properties -> {
        properties.remove("table.file.max");
        properties.put("table.bloom.enabled", "true");
        properties.put("table.bloom.error.rate", "0.75");
        properties.put("table.bloom.size", "128000");
        });

----------------------------------------

TITLE: Scanning Table in Accumulo Shell
DESCRIPTION: Commands to select and scan a table in the Accumulo shell to view entries

LANGUAGE: shell
CODE:
username@instance> table hellotable
username@instance hellotable> scan

----------------------------------------

TITLE: Enabling Bloom Filters on Accumulo Table
DESCRIPTION: Shows how to enable bloom filters for a table using the Accumulo shell command.

LANGUAGE: shell
CODE:
user@myinstance> config -t mytable -s table.bloom.enabled=true

----------------------------------------

TITLE: Compacting Small Files via Shell Command
DESCRIPTION: Example shell command to compact all files less than 10MB in a table, if the tablet has at least two files meeting this criteria.

LANGUAGE: Shell
CODE:
compact -t foo --min-files 2 --sf-lt-esize 10M

----------------------------------------

TITLE: Querying Accumulo Table for Non-Existing Values
DESCRIPTION: Performs 500 random queries with a different seed, demonstrating improved performance due to bloom filters when querying for non-existing values.

LANGUAGE: shell
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.simple.client.RandomBatchScanner --seed 8 -i instance -z zookeepers -u username -p password -t bloom_test --num 500 --min 0 --max 1000000000 --size 50 --batchThreads 20 --auths exampleVis

----------------------------------------

TITLE: Creating Table and Setting MaxMutationSize Constraint in Accumulo Shell
DESCRIPTION: This snippet shows how to create a table named 'test_ingest' and set the MaxMutationSize constraint using the Accumulo shell. The constraint is configured to reject mutations larger than 1/256th of the tablet server's working memory.

LANGUAGE: shell
CODE:
$ ./bin/accumulo shell -u username -p password

Shell - Apache Accumulo Interactive Shell
- 
- version: 1.5.0
- instance name: instance
- instance id: 00000000-0000-0000-0000-000000000000
- 
- type 'help' for a list of available commands
- 
username@instance> createtable test_ingest
username@instance test_ingest> config -t test_ingest -s table.constraint.1=org.apache.accumulo.examples.simple.constraints.MaxMutationSize
username@instance test_ingest> 

----------------------------------------

TITLE: Flushing Accumulo Table
DESCRIPTION: This snippet shows how to flush the 'bloom_test' table using the Accumulo shell.

LANGUAGE: shell
CODE:
$ ./bin/accumulo shell -u username -p password -e 'flush -t bloom_test -w'
05 10:40:06,069 [shell.Shell] INFO : Flush of table bloom_test completed.

----------------------------------------

TITLE: Memory Configuration Example in Java
DESCRIPTION: Example showing the new support for both upper and lower case memory unit specifications in Accumulo configurations

LANGUAGE: text
CODE:
2G or 2g  // Both formats now supported for memory specifications

----------------------------------------

TITLE: Copying Input Data to HDFS
DESCRIPTION: This snippet shows how to copy a local file to HDFS and verify its presence for use in the word count example.

LANGUAGE: shell
CODE:
$ hadoop fs -copyFromLocal $ACCUMULO_HOME/README /user/username/wc/Accumulo.README
$ hadoop fs -ls /user/username/wc
Found 1 items
-rw-r--r--   2 username supergroup       9359 2009-07-15 17:54 /user/username/wc/Accumulo.README

----------------------------------------

TITLE: Initializing Data in Accumulo Shell
DESCRIPTION: Commands to create a table and insert sample data using the Accumulo shell interface.

LANGUAGE: shell
CODE:
$ ./bin/accumulo shell -u username -p password
Shell - Apache Accumulo Interactive Shell
- version: 1.7.4
- instance name: instance
- instance id: 00000000-0000-0000-0000-000000000000
-
- type 'help' for a list of available commands
-
username@instance> createtable input
username@instance> insert a-row cf cq value
username@instance> insert b-row cf cq value
username@instance> quit

----------------------------------------

TITLE: Overriding Accumulo Server Properties on Command Line
DESCRIPTION: Demonstrates how to override Accumulo server properties when starting a tablet server process using command-line options.

LANGUAGE: bash
CODE:
accumulo tserver -o instance.secret=mysecret -o instance.zookeeper.host=localhost:2181

----------------------------------------

TITLE: Running Row Operations Example
DESCRIPTION: Demonstrates using RowOperations.java to perform read and write operations on rows using BatchWriter and Scanner.

LANGUAGE: bash
CODE:
bin/accumulo $PACKAGE.RowOperations -u root -p mypassword -i instance -z zookeeper

----------------------------------------

TITLE: Managing Locality Groups via Accumulo Shell
DESCRIPTION: Demonstrates how to set and get locality groups for a table using the Accumulo shell commands.

LANGUAGE: shell
CODE:
usage: setgroups <group>=<col fam>{,<col fam>}{ <group>=<col fam>{,<col
fam>}} [-?] -t <table>

user@myinstance mytable> setgroups -t mytable group_one=colf1,colf2

user@myinstance mytable> getgroups -t mytable
group_one=colf1,colf2

----------------------------------------

TITLE: Creating Accumulo Table with Bloom Filters
DESCRIPTION: Creates a table named 'bloom_test' in Accumulo and enables bloom filters. Also sets user authorizations for visibility labels.

LANGUAGE: shell
CODE:
$ ./bin/accumulo shell -u username -p password
Shell - Apache Accumulo Interactive Shell
- version: 1.7.4
- instance name: instance
- instance id: 00000000-0000-0000-0000-000000000000
-
- type 'help' for a list of available commands
-
username@instance> setauths -u username -s exampleVis
username@instance> createtable bloom_test
username@instance bloom_test> config -t bloom_test -s table.bloom.enabled=true
username@instance bloom_test> exit

----------------------------------------

TITLE: Scanning Accumulo Table for Updated File Data with Histograms
DESCRIPTION: This Accumulo shell command scans the 'dataTable' again to view the updated file data, now including the character histograms stored in the 'info' column family.

LANGUAGE: shell
CODE:
> scan -t dataTable

----------------------------------------

TITLE: Configuring Accumulo Java Options
DESCRIPTION: Java options configuration for Accumulo including OpenSSL path and memory settings.

LANGUAGE: bash
CODE:
JAVA_OPTS=("${ACCUMULO_JAVA_OPTS[@]}"
  '-XX:+UseConcMarkSweepGC'
  '-XX:CMSInitiatingOccupancyFraction=75'
  '-XX:+CMSClassUnloadingEnabled'
  '-XX:OnOutOfMemoryError=kill -9 %p'
  '-XX:-OmitStackTraceInFastThrow'
  '-Djava.net.preferIPv4Stack=true'
  '-Dorg.wildfly.openssl.path=/usr/lib64'
  "-Daccumulo.native.lib.path=${lib}/native")

----------------------------------------

TITLE: Creating Python Client for Accumulo
DESCRIPTION: Series of commands to set up a Python 2.7 environment and create a client that interacts with Accumulo through the Proxy.

LANGUAGE: bash
CODE:
mkdir accumulo-client/
cd accumulo-client/
pipenv --python 2.7
pipenv install thrift
pipenv install -e /path/to/accumulo-proxy/src/main/python
cp /path/to/accumulo-proxy/src/main/python/basic_client.py .
# Edit credentials if needed
vim basic_client.py
pipenv run python2 basic_client.py

----------------------------------------

TITLE: Generating Certificate Authority with OpenSSL and Java Keytool
DESCRIPTION: Commands to create a certificate authority, generate its private key, create a certificate, and import it into a Java KeyStore for use as a truststore.

LANGUAGE: bash
CODE:
# Create a private key
openssl genrsa -des3 -out root.key 4096

# Create a certificate request using the private key
openssl req -x509 -new -key root.key -days 365 -out root.pem

# Generate a Base64-encoded version of the PEM just created
openssl x509 -outform der -in root.pem -out root.der

# Import the key into a Java KeyStore
keytool -import -alias root-key -keystore truststore.jks -file root.der

# Remove the DER formatted key file (as we don't need it anymore)
rm root.der

----------------------------------------

TITLE: Querying Terms in Accumulo Shard
DESCRIPTION: Example command showing how to query the shard table for documents containing specific terms ('foo' and 'bar').

LANGUAGE: bash
CODE:
$ cd $ACCUMULO_HOME
$ ./bin/accumulo org.apache.accumulo.examples.simple.shard.Query -i instance -z zookeepers -t shard -u username -p password foo bar

----------------------------------------

TITLE: Ingesting File System Data into Accumulo
DESCRIPTION: Command to run the Ingest.java class, which recursively lists files and directories under a given path and stores their information in Accumulo tables. It specifies the Accumulo instance, zookeepers, username, password, visibility, chunk size, and the directory to ingest.

LANGUAGE: bash
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.simple.dirlist.Ingest -i instance -z zookeepers -u username -p password --vis exampleVis --chunkSize 100000 /local/username/workspace

----------------------------------------

TITLE: Creating Kerberos Principal
DESCRIPTION: Creates a Kerberos principal with a random key for Accumulo server processes.

LANGUAGE: shell
CODE:
kadmin.local -q "addprinc -randkey accumulo/host.domain.com"

----------------------------------------

TITLE: Reading Data with Java
DESCRIPTION: Java command to run ReadData class which reads entries between specified row keys from hellotable.

LANGUAGE: shell
CODE:
./bin/accumulo org.apache.accumulo.examples.simple.helloworld.ReadData -i instance -z zookeepers -u username -p password -t hellotable --startKey row_0 --endKey row_1001

----------------------------------------

TITLE: Markdown Performance Comparison Tables
DESCRIPTION: Tables showing performance benchmarks comparing different EC configurations and replication strategies for sequential read/write operations and random access patterns.

LANGUAGE: markdown
CODE:
|Encoding|16 executors|128 executors|
|--------|-----------:|------------:|
|Replication|2.19 GB/s|4.13 GB/s|
|RS 6-3 64KB|6.33 GB/s|8.11 GB/s|
|RS 6-3 1MB|6.22 GB/s|7.93 GB/s|
|RS 10-4 1MB|7.09 GB/s|8.34 GB/s|

----------------------------------------

TITLE: Configuring Custom Filter Iterator in Accumulo
DESCRIPTION: This command sets up the FooFilter as an iterator on the 'nofoo' table, applying it to scans, minor compactions, and major compactions.

LANGUAGE: shell
CODE:
setiter -n foofilter -p 10 -scan -minc -majc -class org.apache.accumulo.test.FooFilter

----------------------------------------

TITLE: Character Histogram MapReduce Execution Command
DESCRIPTION: Command to run the CharacterHistogram MapReduce job that computes and stores byte frequency histograms for files in the Accumulo table.

LANGUAGE: shell
CODE:
bin/tool.sh lib/accumulo-examples-simple.jar org.apache.accumulo.examples.simple.filedata.CharacterHistogram -i instance -z zookeepers -u username -p password -t dataTable --auths exampleVis --vis exampleVis

----------------------------------------

TITLE: Stopping Accumulo Cluster
DESCRIPTION: Command to stop all Accumulo processes across the cluster when finished using the system.

LANGUAGE: bash
CODE:
./bin/stop-all.sh

----------------------------------------

TITLE: Configuring Hadoop core-site.xml for S3 Access
DESCRIPTION: XML configuration for Hadoop's core-site.xml file to enable S3 access. It includes settings for S3 access keys and connection limits.

LANGUAGE: xml
CODE:
<property>
  <name>fs.s3a.access.key</name>
  <value>KEY</value>
</property>
<property>
  <name>fs.s3a.secret.key</name>
  <value>SECRET</value>
</property>
<!-- without this setting Accumulo tservers would have problems when trying to open lots of files -->
<property>
  <name>fs.s3a.connection.maximum</name>
  <value>128</value>
</property>

----------------------------------------

TITLE: Viewing Ingested File System Data
DESCRIPTION: This command runs the Viewer class to browse the ingested file system data stored in Accumulo. It specifies the instance, zookeepers, username, password, tables, authorizations, and the path to view.

LANGUAGE: bash
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.simple.dirlist.Viewer -i instance -z zookeepers -u username -p password -t dirTable --dataTable dataTable --auths exampleVis --path /local/username/workspace

----------------------------------------

TITLE: Creating Accumulo Tables for Shard Example
DESCRIPTION: Commands to create the required 'shard' and 'doc2term' tables in Accumulo for the shard example implementation.

LANGUAGE: bash
CODE:
username@instance> createtable shard
username@instance shard> createtable doc2term

----------------------------------------

TITLE: Ingesting File System Data into Accumulo
DESCRIPTION: This command uses the Ingest class to recursively list files and directories, storing their information in Accumulo tables. It specifies the instance, zookeepers, username, password, visibility, chunk size, and the directory to ingest.

LANGUAGE: bash
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.simple.dirlist.Ingest -i instance -z zookeepers -u username -p password --vis exampleVis --chunkSize 100000 /local/username/workspace

----------------------------------------

TITLE: Querying Terms from Shard Index
DESCRIPTION: Example command showing how to query the index for files containing specific terms ('foo' and 'bar').

LANGUAGE: shell
CODE:
$ cd $ACCUMULO_HOME
$ ./bin/accumulo org.apache.accumulo.examples.shard.Query instance zookeepers shard username password foo bar

----------------------------------------

TITLE: Deleting Tables in Accumulo
DESCRIPTION: Demonstrates the process of deleting a table using the 'deletetable' command with confirmation prompt.

LANGUAGE: console
CODE:
root@myinstance testtable> deletetable testtable
deletetable { testtable } (yes|no)? yes
Table: [testtable] has been deleted.

----------------------------------------

TITLE: Configuring Classpath Context in Accumulo
DESCRIPTION: This Accumulo shell command sets up a classpath context named 'cx1' that points to the location of the FooFilter.jar in HDFS.

LANGUAGE: shell
CODE:
config -s general.vfs.context.classpath.cx1=hdfs://<namenode host>:<namenode port>/user1/lib

----------------------------------------

TITLE: Setting User Authorizations in Accumulo
DESCRIPTION: This command sets the authorizations for a user in Accumulo, allowing them to view data with the specified visibility.

LANGUAGE: bash
CODE:
$ ./bin/accumulo shell -u root -e 'setauths -u username -s exampleVis'

----------------------------------------

TITLE: Running RenameMasterDirInZK Utility in Accumulo 2.1
DESCRIPTION: Command to run the RenameMasterDirInZK utility after installing Accumulo 2.1 but before starting it, if the manager is not started using the provided scripts.

LANGUAGE: bash
CODE:
${ACCUMULO_HOME}/bin/accumulo org.apache.accumulo.manager.upgrade.RenameMasterDirInZK

----------------------------------------

TITLE: Setting up Accumulo Environment with Uno
DESCRIPTION: Commands to set up Accumulo and configure the shell environment

LANGUAGE: bash
CODE:
./bin/uno setup accumulo\neval "$(./bin/uno env)"

----------------------------------------

TITLE: Performing bulk ingest using MapReduce
DESCRIPTION: Executes the BulkIngestExample MapReduce job to ingest the generated test data into Accumulo.

LANGUAGE: bash
CODE:
$ ./bin/tool.sh lib/examples-simple-*[^cs].jar org.apache.accumulo.examples.simple.mapreduce.bulk.BulkIngestExample instance zookeepers username password test_bulk bulk tmp/bulkWork

----------------------------------------

TITLE: Verifying bulk ingest results
DESCRIPTION: Runs the VerifyIngest class to confirm that 1000 rows were successfully ingested into Accumulo.

LANGUAGE: bash
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.simple.mapreduce.bulk.VerifyIngest instance zookeepers username password test_bulk 0 1000

----------------------------------------

TITLE: Configuring DeletesSummarizer and Compaction Strategy
DESCRIPTION: Shows how to configure DeletesSummarizer and TooManyDeletesCompactionStrategy, demonstrating automatic compaction based on delete ratios.

LANGUAGE: console
CODE:
root@uno summary_test> config -t summary_test -s table.summarizer.del=org.apache.accumulo.core.client.summary.summarizers.DeletesSummarizer
root@uno summary_test> compact -w
root@uno summary_test> config -t summary_test -s table.compaction.major.ratio=10
root@uno summary_test> config -t summary_test -s table.majc.compaction.strategy=org.apache.accumulo.tserver.compaction.strategies.TooManyDeletesCompactionStrategy

----------------------------------------

TITLE: Demonstrating Concurrent Writes in Accumulo using Java
DESCRIPTION: This method demonstrates concurrent writes to the same address in Accumulo. It creates multiple threads that modify the address simultaneously, showing potential data loss issues.

LANGUAGE: java
CODE:
void concurrent_writes() throws Exception {
  try {
    client.tableOperations().create("GothamPD");
  } catch (TableExistsException e) {
    System.out.println("GothamPD table already exists...proceeding...");
  }
  String id = "id0001";
  setAddress(client, id, null, "   1007 Mountain Drive, Gotham, New York  ");
  Future<Void> future1 = modifyAddress(client, id, String::trim);
  Future<Void> future2 = modifyAddress(client, id, addr -> addr.replace("Drive", "Dr"));
  Future<Void> future3 = modifyAddress(client, id, addr -> addr.replace("New York", "NY"));
  future1.get();
  future2.get();
  future3.get();
  System.out.println("Final address : '" + getAddress(client, id) + "'");
}

----------------------------------------

TITLE: Basic Table Administration in Accumulo Shell
DESCRIPTION: Examples of basic table administration commands in the Accumulo shell, including listing tables, creating tables, and deleting tables.

LANGUAGE: shell
CODE:
root@myinstance> tables
!METADATA

root@myinstance> createtable mytable

root@myinstance mytable>

root@myinstance mytable> tables
!METADATA
mytable

root@myinstance mytable> createtable testtable

root@myinstance testtable>

root@myinstance junk> deletetable testtable

root@myinstance>

----------------------------------------

TITLE: Installing Uno for Single-Node Accumulo Deployment
DESCRIPTION: Commands to clone and set up the Uno repository for single-node Accumulo deployment

LANGUAGE: bash
CODE:
git clone https://github.com/apache/fluo-uno.git\ncd fluo-uno

----------------------------------------

TITLE: Handling Classpath Context Errors in Accumulo
DESCRIPTION: This series of commands demonstrates the error that occurs when trying to use the FooFilter on a table without the correct classpath context, and how to resolve it.

LANGUAGE: shell
CODE:
createtable nofootwo
setiter -n foofilter -p 10 -scan -minc -majc -class org.apache.accumulo.test.FooFilter
config -t nofootwo -s table.classpath.context=cx1
setiter -n foofilter -p 10 -scan -minc -majc -class org.apache.accumulo.test.FooFilter

----------------------------------------

TITLE: Setting User Authorizations in Accumulo
DESCRIPTION: This command sets the authorizations for a user to access the ingested data. It uses the Accumulo shell to grant the 'exampleVis' authorization to the specified user.

LANGUAGE: bash
CODE:
$ ./bin/accumulo shell -u root -e 'setauths -u username -s exampleVis'

----------------------------------------

TITLE: Testing MaxMutation Size Constraint with TestIngest
DESCRIPTION: Demonstrates attempt to ingest data that exceeds the configured mutation size limit, resulting in a constraint violation error.

LANGUAGE: bash
CODE:
$ ./bin/accumulo org.apache.accumulo.test.TestIngest -i instance -z zookeepers -u username -p password --rows 1 --cols 10000
ERROR : Constraint violates : ConstraintViolationSummary(constrainClass:org.apache.accumulo.examples.simple.constraints.MaxMutationSize, violationCode:0, violationDescription:mutation exceeded maximum size of 188160, numberOfViolatingMutations:1)

----------------------------------------

TITLE: Configuring Accumulo Server SSL Settings
DESCRIPTION: XML configuration settings for enabling SSL in Accumulo servers, including keystore and truststore paths and passwords.

LANGUAGE: xml
CODE:
<property>
  <name>rpc.javax.net.ssl.keyStore</name>
  <value>/path/to/server.jks</value>
</property>
<property>
  <name>rpc.javax.net.ssl.keyStorePassword</name>
  <value>server_password</value>
</property>
<property>
  <name>rpc.javax.net.ssl.trustStore</name>
  <value>/path/to/truststore.jks</value>
</property>
<property>
  <name>rpc.javax.net.ssl.trustStorePassword</name>
  <value>truststore_password</value>
</property>
<property>
  <name>instance.rpc.ssl.enabled</name>
  <value>true</value>
</property>

----------------------------------------

TITLE: Viewing Iterator Configuration
DESCRIPTION: Shows how to view the current iterator settings for a table using the config command with iterator filter.

LANGUAGE: shell
CODE:
username@instance filtertest> config -t filtertest -f iterator
---------+---------------------------------------------+---------------------------------------------------------------------------
SCOPE    | NAME                                        | VALUE
---------+---------------------------------------------+---------------------------------------------------------------------------
table    | table.iterator.majc.myfilter .............. | 10,org.apache.accumulo.core.iterators.user.AgeOffFilter
table    | table.iterator.majc.myfilter.opt.ttl ...... | 30000
table    | table.iterator.majc.vers .................. | 20,org.apache.accumulo.core.iterators.user.VersioningIterator
table    | table.iterator.majc.vers.opt.maxVersions .. | 1
table    | table.iterator.minc.myfilter .............. | 10,org.apache.accumulo.core.iterators.user.AgeOffFilter
table    | table.iterator.minc.myfilter.opt.ttl ...... | 30000
table    | table.iterator.minc.vers .................. | 20,org.apache.accumulo.core.iterators.user.VersioningIterator
table    | table.iterator.minc.vers.opt.maxVersions .. | 1
table    | table.iterator.scan.myfilter .............. | 10,org.apache.accumulo.core.iterators.user.AgeOffFilter
table    | table.iterator.scan.myfilter.opt.ttl ...... | 30000
table    | table.iterator.scan.vers .................. | 20,org.apache.accumulo.core.iterators.user.VersioningIterator
table    | table.iterator.scan.vers.opt.maxVersions .. | 1
---------+---------------------------------------------+---------------------------------------------------------------------------
username@instance filtertest>

----------------------------------------

TITLE: Generating test data for bulk ingest
DESCRIPTION: Creates 1000 rows of test data in HDFS using the GenerateTestData class.

LANGUAGE: bash
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.simple.mapreduce.bulk.GenerateTestData 0 1000 bulk/test_1.txt

----------------------------------------

TITLE: Configuring RegexGroupBalancer Settings
DESCRIPTION: Sets up the RegexGroupBalancer with pattern matching for two digits and default group configuration.

LANGUAGE: shell
CODE:
root@accumulo testRGB> config -t testRGB -s table.custom.balancer.group.regex.pattern=(\\d\\d).*
root@accumulo testRGB> config -t testRGB -s table.custom.balancer.group.regex.default=04
root@accumulo testRGB> config -t testRGB -s table.balancer=org.apache.accumulo.server.master.balancer.RegexGroupBalancer

----------------------------------------

TITLE: Running Continuous Queries on Accumulo Shard
DESCRIPTION: Command to execute continuous random queries using 5 terms per document, demonstrating the ContinuousQuery program.

LANGUAGE: bash
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.simple.shard.ContinuousQuery instance zookeepers shard doc2term username password 5

----------------------------------------

TITLE: Creating AccumuloClient from Properties File in Java
DESCRIPTION: This code snippet demonstrates how to create an AccumuloClient object in Java using the accumulo-client.properties file. It utilizes the Accumulo.newClient() method to build the client from the specified properties file path.

LANGUAGE: java
CODE:
AccumuloClient client = Accumulo.newClient().from("/path/to/accumulo-client.properties").build();

----------------------------------------

TITLE: Inserting Sample Data into Accumulo Table using Shell
DESCRIPTION: This snippet demonstrates how to use the Accumulo shell to create a table and insert sample data. It creates a table named 'input' and inserts three key-value pairs.

LANGUAGE: shell
CODE:
$ ./bin/accumulo shell -u username -p password
Shell - Apache Accumulo Interactive Shell
- version: 1.7.4
- instance name: instance
- instance id: 00000000-0000-0000-0000-000000000000
-
- type 'help' for a list of available commands
-
username@instance> createtable input
username@instance> insert dog cf cq dogvalue
username@instance> insert cat cf cq catvalue
username@instance> insert junk family qualifier junkvalue
username@instance> quit

----------------------------------------

TITLE: Copying Input Data to HDFS for Accumulo MapReduce Job
DESCRIPTION: This snippet demonstrates how to copy a local file to HDFS for use as input in the MapReduce job. It uses the Accumulo README file as an example.

LANGUAGE: shell
CODE:
$ hadoop fs -copyFromLocal $ACCUMULO_HOME/README /user/username/wc/Accumulo.README
$ hadoop fs -ls /user/username/wc
Found 1 items
-rw-r--r--   2 username supergroup       9359 2009-07-15 17:54 /user/username/wc/Accumulo.README

----------------------------------------

TITLE: Defining Classloader Contexts in Accumulo XML
DESCRIPTION: This XML snippet shows how to define classloader contexts in the accumulo-site.xml file. It includes examples for two applications (app1 and app2) with different classpath configurations and delegation behavior.

LANGUAGE: xml
CODE:
<property>
  <name>general.vfs.context.classpath.app1</name>
  <value>hdfs://localhost:8020/applicationA/classpath/.*.jar,file:///opt/applicationA/lib/.*.jar</value>
  <description>Application A classpath, loads jars from HDFS and local file system</description>
</property>

<property>
  <name>general.vfs.context.classpath.app2.delegation=post</name>
  <value>hdfs://localhost:8020/applicationB/classpath/.*.jar,http://my-webserver/applicationB/.*.jar</value>
  <description>Application B classpath, loads jars from HDFS and HTTP, does not delegate to parent first</description>
</property>

----------------------------------------

TITLE: Configuring hdfs-site.xml for Accumulo Multi-Volume Support
DESCRIPTION: This XML configuration defines multiple HDFS nameservices, configures HA NameNodes, and sets up shared edit directories and failover providers for Accumulo's Multi-Volume Support.

LANGUAGE: xml
CODE:
<property>
  <name>dfs.nameservices</name>
  <value>nameserviceA,nameserviceB</value>
</property>
<property>
  <name>dfs.ha.namenodes.nameserviceA</name>
  <value>nn1,nn2</value>
</property>
<property>
  <name>dfs.ha.namenodes.nameserviceB</name>
  <value>nn3,nn4</value>
</property>
<property>
  <name>dfs.namenode.rpc-address.nameserviceA.nn1</name>
  <value>host1:8020</value>
</property>
<property>
  <name>dfs.namenode.rpc-address.nameserviceA.nn2</name>
  <value>host2:8020</value>
</property>
<property>
  <name>dfs.namenode.http-address.nameserviceA.nn1</name>
  <value>host1:50070</value>
</property>
<property>
  <name>dfs.namenode.http-address.nameserviceA.nn2</name>
  <value>host2:50070</value>
</property>
<property>
  <name>dfs.namenode.rpc-address.nameserviceB.nn3</name>
  <value>host3:8020</value>
</property>
<property>
  <name>dfs.namenode.rpc-address.nameserviceB.nn4</name>
  <value>host4:8020</value>
</property>
<property>
  <name>dfs.namenode.http-address.nameserviceB.nn3</name>
  <value>host3:50070</value>
</property>
<property>
  <name>dfs.namenode.http-address.nameserviceB.nn4</name>
  <value>host4:50070</value>
</property>
<property>
  <name>dfs.namenode.shared.edits.dir.nameserviceA.nn1</name>
  <value>qjournal://jHost1:8485;jHost2:8485;jHost3:8485/nameserviceA</value>
</property>
<property>
  <name>dfs.namenode.shared.edits.dir.nameserviceA.nn2</name>
  <value>qjournal://jHost1:8485;jHost2:8485;jHost3:8485/nameserviceA</value>
</property>
<property>
  <name>dfs.namenode.shared.edits.dir.nameserviceB.nn3</name>
  <value>qjournal://jHost1:8485;jHost2:8485;jHost3:8485/nameserviceB</value>
</property>
<property>
  <name>dfs.namenode.shared.edits.dir.nameserviceB.nn4</name>
  <value>qjournal://jHost1:8485;jHost2:8485;jHost3:8485/nameserviceB</value>
</property>
<property>
  <name>dfs.client.failover.proxy.provider.nameserviceA</name>
  <value>org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider</value>
</property>
<property>
  <name>dfs.client.failover.proxy.provider.nameserviceB</name>
  <value>org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider</value>
</property>
<property>
  <name>dfs.ha.automatic-failover.enabled.nameserviceA</name>
  <value>true</value>
</property>
<property>
  <name>dfs.ha.automatic-failover.enabled.nameserviceB</name>
  <value>true</value>
</property>

----------------------------------------

TITLE: Configuring Accumulo Client SSL Settings
DESCRIPTION: Properties file configuration for enabling SSL in Accumulo clients, including keystore and truststore settings.

LANGUAGE: properties
CODE:
instance.rpc.ssl.enabled true
rpc.javax.net.ssl.keyStore  /path/to/client-keystore.jks
rpc.javax.net.ssl.keyStorePassword  client-password
rpc.javax.net.ssl.trustStore  /path/to/truststore.jks
rpc.javax.net.ssl.trustStorePassword  truststore-password

----------------------------------------

TITLE: Setting up Accumulo table for bulk ingest
DESCRIPTION: Creates a table named 'test_bulk' with two initial split points using the SetupTable class.

LANGUAGE: bash
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.simple.mapreduce.bulk.SetupTable instance zookeepers username password test_bulk row_00000333 row_00000666

----------------------------------------

TITLE: Creating Table in Accumulo Shell
DESCRIPTION: This command creates the 'batchtest1' table in Accumulo shell, which is required for the batch writing and scanning example.

LANGUAGE: shell
CODE:
$ ./bin/accumulo shell -u username -e "createtable batchtest1"

----------------------------------------

TITLE: Creating Table with Bloom Filters - Accumulo Shell
DESCRIPTION: Creates a table named bloom_test and enables bloom filters using Accumulo shell commands.

LANGUAGE: shell
CODE:
$ ./bin/accumulo shell -u username -p password
Shell - Apache Accumulo Interactive Shell
- version: 1.5.0
- instance name: instance
- instance id: 00000000-0000-0000-0000-000000000000
-
- type 'help' for a list of available commands
-
username@instance> setauths -u username -s exampleVis
username@instance> createtable bloom_test
username@instance bloom_test> config -t bloom_test -s table.bloom.enabled=true
username@instance bloom_test> exit

----------------------------------------

TITLE: Creating Table with Bloom Filters - Accumulo Shell
DESCRIPTION: Creates a table named bloom_test and enables bloom filters using Accumulo shell commands.

LANGUAGE: shell
CODE:
$ ./bin/accumulo shell -u username -p password
Shell - Apache Accumulo Interactive Shell
- version: 1.5.0
- instance name: instance
- instance id: 00000000-0000-0000-0000-000000000000
-
- type 'help' for a list of available commands
-
username@instance> setauths -u username -s exampleVis
username@instance> createtable bloom_test
username@instance bloom_test> config -t bloom_test -s table.bloom.enabled=true
username@instance bloom_test> exit

----------------------------------------

TITLE: Logging into Accumulo Shell
DESCRIPTION: Command to log into the Accumulo shell with username and password authentication.

LANGUAGE: shell
CODE:
./bin/accumulo shell -u username -p password

----------------------------------------

TITLE: Starting Apache Accumulo Services
DESCRIPTION: Command to start all Accumulo services after initialization.

LANGUAGE: bash
CODE:
$ACCUMULO_HOME/bin/start-all.sh

----------------------------------------

TITLE: Running Accumulo Flush Command
DESCRIPTION: Example of how to run the Flush class to flush an Accumulo table. Requires root access and connection parameters.

LANGUAGE: bash
CODE:
$ PACKAGE=org.apache.accumulo.examples.simple.client
$ bin/accumulo $PACKAGE.Flush -u root -p mypassword -i instance -z zookeeper -t trace

----------------------------------------

TITLE: Importing and Verifying Accumulo Table
DESCRIPTION: Shows the process of importing the copied table data into a new table using Accumulo shell commands. It also demonstrates how to verify the imported data, splits, and configuration.

LANGUAGE: shell
CODE:
root@test17> importtable table1_copy /tmp/table1_export_dest
root@test17> table table1_copy
root@test17 table1_copy> scan
a cf1:cq1 []    v1
h cf1:cq1 []    v2
z cf1:cq1 []    v3
z cf1:cq2 []    v4
root@test17 table1_copy> getsplits -t table1_copy
b
r
root@test17> config -t table1_copy -f split
---------+--------------------------+-------------------------------------------
SCOPE    | NAME                     | VALUE
---------+--------------------------+-------------------------------------------
default  | table.split.threshold .. | 1G
table    |    @override ........... | 100M
---------+--------------------------+-------------------------------------------
root@test17> tables -l
accumulo.metadata    =>        !0
accumulo.root        =>        +r
table1_copy          =>         5
trace                =>         1
root@test17 table1_copy> scan -t accumulo.metadata -b 5 -c srv:time
5;b srv:time []    M1343224500467
5;r srv:time []    M1343224500467
5< srv:time []    M1343224500467

----------------------------------------

TITLE: Creating Git Branch for Accumulo Contribution
DESCRIPTION: Git command to create and checkout a new branch for working on an Accumulo issue. The branch name follows the convention of including the issue number.

LANGUAGE: bash
CODE:
git checkout -b accumulo-4321

----------------------------------------

TITLE: Building Native Maps in Apache Accumulo
DESCRIPTION: Command to build the native map library which provides fast insert and read operations through C++ implementation.

LANGUAGE: bash
CODE:
build_native_map.sh

----------------------------------------

TITLE: Reading Data with Java Client
DESCRIPTION: Command to run Java program that reads data between specified row ranges

LANGUAGE: shell
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.simple.helloworld.ReadData instance zookeepers username password hellotable row_0 row_1001

----------------------------------------

TITLE: Ingesting File System Data into Accumulo Tables
DESCRIPTION: This command uses the Ingest class to recursively list files and directories, storing their information in Accumulo tables. It takes parameters for Accumulo instance, credentials, table names, visibility, chunk size, and the directory to ingest.

LANGUAGE: bash
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.simple.dirlist.Ingest instance zookeepers username password dirTable indexTable dataTable exampleVis 100000 /local/username/workspace

----------------------------------------

TITLE: Querying Word Count Results in Accumulo Shell
DESCRIPTION: This snippet demonstrates how to query the 'wordCount' table in Accumulo to view the results of the word count job.

LANGUAGE: bash
CODE:
$ ./bin/accumulo shell -u username -p password
username@instance> table wordCount
username@instance wordCount> scan -b the
the count:20080906 []    75
their count:20080906 []    2
them count:20080906 []    1
then count:20080906 []    1
there count:20080906 []    1
these count:20080906 []    3
this count:20080906 []    6
through count:20080906 []    1
time count:20080906 []    3
time. count:20080906 []    1
to count:20080906 []    27
total count:20080906 []    1
tserver, count:20080906 []    1
tserver.compaction.major.concurrent.max count:20080906 []    1
...

----------------------------------------

TITLE: Creating a table in Accumulo shell
DESCRIPTION: This command creates a new table named 'hellotable' in Accumulo using the shell interface.

LANGUAGE: shell
CODE:
username@instance> createtable hellotable

----------------------------------------

TITLE: Creating a table in Accumulo shell
DESCRIPTION: This command creates a new table named 'hellotable' in Accumulo using the shell interface.

LANGUAGE: shell
CODE:
username@instance> createtable hellotable

----------------------------------------

TITLE: Installing Accumulo from Tarball
DESCRIPTION: Command to extract the Accumulo tarball into the installation directory. This step should be repeated on each machine in the cluster.

LANGUAGE: bash
CODE:
$ tar xzf $ACCUMULO_HOME/accumulo.tar.gz

----------------------------------------

TITLE: Setting Table Configuration using Java API
DESCRIPTION: Demonstrates setting a configuration property for a specific table using the Accumulo Java API's TableOperations.

LANGUAGE: java
CODE:
client.tableOperations().setProperty("mytable", "table.durability", "log");

----------------------------------------

TITLE: Copying Exported Accumulo Table Using DistCp
DESCRIPTION: Demonstrates how to use Hadoop's distcp command to copy the exported table files to a new location in HDFS. This step is necessary before importing the table.

LANGUAGE: bash
CODE:
$ hadoop distcp -f /tmp/table1_export/distcp.txt /tmp/table1_export_dest

----------------------------------------

TITLE: Configuring Muchos Properties
DESCRIPTION: Commands to create and edit Muchos configuration file for AWS deployment

LANGUAGE: bash
CODE:
cp conf/muchos.props.example conf/muchos.props\nvim conf/muchos.props

----------------------------------------

TITLE: Sample ZooKeeper ACL Output
DESCRIPTION: Example output from the zoo-info-viewer utility showing ACL permissions for different ZooKeeper nodes in Accumulo.

LANGUAGE: text
CODE:
ACCUMULO_OKAY:NOT_PRIVATE /accumulo/f491223b-1413-494e-b75a-c2ca018db00f cdrwa:accumulo, r:anyone
ACCUMULO_OKAY:PRIVATE /accumulo/f491223b-1413-494e-b75a-c2ca018db00f/config cdrwa:accumulo
ERROR_ACCUMULO_MISSING_SOME:NOT_PRIVATE /accumulo/f491223b-1413-494e-b75a-c2ca018db00f/users/root/Namespaces r:accumulo, r:anyone

----------------------------------------

TITLE: ZooKeeper Configuration for Digest Authentication
DESCRIPTION: Configuration property to add to zoo.cfg for enabling superDigest authentication.

LANGUAGE: properties
CODE:
DigestAuthenticationProvider.superDigest=accumulo:$digest

----------------------------------------

TITLE: Running Character Histogram MapReduce Job
DESCRIPTION: Command to execute the CharacterHistogram MapReduce job that computes byte frequency histograms for stored files. The results are stored in the 'info' column family.

LANGUAGE: shell
CODE:
bin/tool.sh lib/examples-simple*[^cs].jar org.apache.accumulo.examples.simple.filedata.CharacterHistogram instance zookeepers username password dataTable exampleVis exampleVis

----------------------------------------

TITLE: Querying Word Count Results
DESCRIPTION: This snippet demonstrates how to query the Accumulo 'wordCount' table to view the results of the word count operation.

LANGUAGE: shell
CODE:
$ ./bin/accumulo shell -u username -p password
username@instance> table wordCount
username@instance wordCount> scan -b the
the count:20080906 []    75
their count:20080906 []    2
them count:20080906 []    1
then count:20080906 []    1
there count:20080906 []    1
these count:20080906 []    3
this count:20080906 []    6
through count:20080906 []    1
time count:20080906 []    3
time. count:20080906 []    1
to count:20080906 []    27
total count:20080906 []    1
tserver, count:20080906 []    1
tserver.compaction.major.concurrent.max count:20080906 []    1

----------------------------------------

TITLE: Copying Custom Filter Jar to HDFS in Apache Accumulo
DESCRIPTION: This command copies the FooFilter.jar from the local Accumulo test resources to HDFS. This jar contains a custom filter that will be used in the subsequent steps.

LANGUAGE: shell
CODE:
$ hadoop fs -copyFromLocal $ACCUMULO_HOME/test/src/test/resources/FooFilter.jar /user1/lib

----------------------------------------

TITLE: Installing Accumulo Binary Distribution
DESCRIPTION: Commands to download and extract the Accumulo binary distribution package.

LANGUAGE: bash
CODE:
tar xzf /path/to/accumulo-{{ page.latest_release}}-bin.tar.gz
cd accumulo-{{ page.latest_release }}

----------------------------------------

TITLE: Deleting WAL References from Metadata Table in Accumulo Shell
DESCRIPTION: This Accumulo shell command removes a Write-Ahead Log (WAL) reference from the metadata table, used when recovering from corrupt WAL files.

LANGUAGE: shell
CODE:
shell> delete 3< log 127.0.0.1+9997/0cb7ce52-ac46-4bf7-ae1d-acdcfaa97995

----------------------------------------

TITLE: Setting Namespace Configuration in Accumulo Shell
DESCRIPTION: Demonstrates setting a configuration property for a specific namespace using the Accumulo shell.

LANGUAGE: shell
CODE:
config -ns NAMESPACE -s PROPERTY=VALUE

----------------------------------------

TITLE: Inspecting Exported Accumulo Table Files in HDFS
DESCRIPTION: Shows how to list and view the contents of the exported table files in HDFS using hadoop fs commands. This includes viewing the distcp.txt file which contains the list of files to be copied.

LANGUAGE: bash
CODE:
$ hadoop fs -ls /tmp/table1_export
Found 2 items
-rw-r--r--   3 user supergroup        162 2012-07-25 09:56 /tmp/table1_export/distcp.txt
-rw-r--r--   3 user supergroup        821 2012-07-25 09:56 /tmp/table1_export/exportMetadata.zip
$ hadoop fs -cat /tmp/table1_export/distcp.txt
hdfs://n1.example.com:6093/accumulo/tables/3/default_tablet/F0000000.rf
hdfs://n1.example.com:6093/tmp/table1_export/exportMetadata.zip

----------------------------------------

TITLE: Viewing Accumulo Table Files in HDFS
DESCRIPTION: This snippet demonstrates how to view the files of an Accumulo table in HDFS and inspect the RFile information.

LANGUAGE: shell
CODE:
$ ./bin/accumulo shell -u username -p password -e 'tables -l'
!METADATA       =>         !0
bloom_test1     =>         o7
bloom_test2     =>         o8
trace           =>          1

$ hadoop fs -lsr /accumulo/tables/o8
drwxr-xr-x   - username supergroup          0 2012-01-10 14:02 /accumulo/tables/o8/default_tablet
-rw-r--r--   3 username supergroup   52672650 2012-01-10 14:01 /accumulo/tables/o8/default_tablet/F00000dj.rf
-rw-r--r--   3 username supergroup   52436176 2012-01-10 14:01 /accumulo/tables/o8/default_tablet/F00000dk.rf
-rw-r--r--   3 username supergroup   52850173 2012-01-10 14:02 /accumulo/tables/o8/default_tablet/F00000dl.rf

$ ./bin/accumulo rfile-info /accumulo/tables/o8/default_tablet/F00000dj.rf
Locality group         : <DEFAULT>
  Start block          : 0
  Num   blocks         : 752
  Index level 0        : 43,598 bytes  1 blocks
  First key            : row_0000001169 foo:1 [exampleVis] 1326222052539 false
  Last key             : row_0999999421 foo:1 [exampleVis] 1326222052058 false
  Num entries          : 999,536
  Column families      : [foo]

Meta block     : BCFile.index
  Raw size             : 4 bytes
  Compressed size      : 12 bytes
  Compression type     : gz

Meta block     : RFile.index
  Raw size             : 43,696 bytes
  Compressed size      : 15,592 bytes
  Compression type     : gz

Meta block     : acu_bloom
  Raw size             : 1,540,292 bytes
  Compressed size      : 1,433,115 bytes
  Compression type     : gz

----------------------------------------

TITLE: Implementing FileEncrypter Interface in Java
DESCRIPTION: Shows the methods required for implementing a custom FileEncrypter in Accumulo. This interface is used for encrypting data streams.

LANGUAGE: java
CODE:
public interface FileEncrypter {
  OutputStream encryptStream(OutputStream outputStream) throws CryptoService.CryptoException;
  byte[] getDecryptionParameters();
}

----------------------------------------

TITLE: Viewing MapReduce Results in HDFS
DESCRIPTION: Commands to list and view the results of the regex search stored in HDFS. Shows the output files generated by the MapReduce job and displays the matching content.

LANGUAGE: shell
CODE:
$ hadoop fs -ls /tmp/output
Found 3 items
-rw-r--r--   1 username supergroup          0 2013-01-10 14:11 /tmp/output/_SUCCESS
drwxr-xr-x   - username supergroup          0 2013-01-10 14:10 /tmp/output/_logs
-rw-r--r--   1 username supergroup         51 2013-01-10 14:10 /tmp/output/part-m-00000

LANGUAGE: shell
CODE:
$ hadoop fs -text /tmp/output/part-m-00000
dogrow dogcf:dogcq [] 1357844987994 false    dogvalue

----------------------------------------

TITLE: Viewing MapReduce Results in HDFS
DESCRIPTION: Commands to list and view the results of the regex search stored in HDFS. Shows the output files generated by the MapReduce job and displays the matching content.

LANGUAGE: shell
CODE:
$ hadoop fs -ls /tmp/output
Found 3 items
-rw-r--r--   1 username supergroup          0 2013-01-10 14:11 /tmp/output/_SUCCESS
drwxr-xr-x   - username supergroup          0 2013-01-10 14:10 /tmp/output/_logs
-rw-r--r--   1 username supergroup         51 2013-01-10 14:10 /tmp/output/part-m-00000

LANGUAGE: shell
CODE:
$ hadoop fs -text /tmp/output/part-m-00000
dogrow dogcf:dogcq [] 1357844987994 false    dogvalue

----------------------------------------

TITLE: Ingesting File Data into Accumulo
DESCRIPTION: Command to ingest a file into Accumulo using FileDataIngest class. The command takes parameters for instance, zookeeper, credentials, table name, visibility, chunk size, and file path.

LANGUAGE: shell
CODE:
./bin/accumulo org.apache.accumulo.examples.simple.filedata.FileDataIngest instance zookeepers username password dataTable exampleVis 1000 $ACCUMULO_HOME/README

----------------------------------------

TITLE: Creating and Testing Accumulo Table Constraints via Shell Commands
DESCRIPTION: Example shell session showing how to create a table with constraints, add constraint classes, and test constraint violations. Demonstrates both alphanumeric key constraints and numeric value constraints.

LANGUAGE: shell
CODE:
$ ./bin/accumulo shell -u username -p password

Shell - Apache Accumulo Interactive Shell
-
- version: 1.7.4
- instance name: instance
- instance id: 00000000-0000-0000-0000-000000000000
-
- type 'help' for a list of available commands
-
username@instance> createtable testConstraints
username@instance testConstraints> constraint -a org.apache.accumulo.examples.simple.constraints.NumericValueConstraint
username@instance testConstraints> constraint -a org.apache.accumulo.examples.simple.constraints.AlphaNumKeyConstraint
username@instance testConstraints> insert r1 cf1 cq1 1111
username@instance testConstraints> insert r1 cf1 cq1 ABC
  Constraint Failures:
      ConstraintViolationSummary(constrainClass:org.apache.accumulo.examples.simple.constraints.NumericValueConstraint, violationCode:1, violationDescription:Value is not numeric, numberOfViolatingMutations:1)
username@instance testConstraints> insert r1! cf1 cq1 ABC
  Constraint Failures:
      ConstraintViolationSummary(constrainClass:org.apache.accumulo.examples.simple.constraints.NumericValueConstraint, violationCode:1, violationDescription:Value is not numeric, numberOfViolatingMutations:1)
      ConstraintViolationSummary(constrainClass:org.apache.accumulo.examples.simple.constraints.AlphaNumKeyConstraint, violationCode:1, violationDescription:Row was not alpha numeric, numberOfViolatingMutations:1)
username@instance testConstraints> scan
r1 cf1:cq1 []    1111
username@instance testConstraints>

----------------------------------------

TITLE: Accessing Accumulo Shell
DESCRIPTION: Command to run the Accumulo shell as the root user, providing command-line access to the Accumulo instance.

LANGUAGE: bash
CODE:
./bin/accumulo shell -u root

----------------------------------------

TITLE: User Management Commands
DESCRIPTION: Commands for managing users, permissions, and authentication in Accumulo

LANGUAGE: shell
CODE:
createuser <username> [-?] [-s <comma-separated-authorizations>]
deleteuser <username> [-?]
setauths [-?] -c | -s <comma-separated-authorizations> [-u <user>]
getauths [-?] [-u <user>]

----------------------------------------

TITLE: Cloning Accumulo Proxy Repository in Bash
DESCRIPTION: This command clones the Accumulo Proxy repository from GitHub, which is the first step in setting up the proxy server.

LANGUAGE: bash
CODE:
git clone https://github.com/apache/accumulo-proxy

----------------------------------------

TITLE: Viewing MapReduce Job Output in HDFS
DESCRIPTION: This snippet demonstrates how to list the contents of the output directory in HDFS and view the extracted data from the MapReduce job.

LANGUAGE: shell
CODE:
$ hadoop fs -ls /tmp/output
-rw-r--r--   1 username supergroup          0 2013-01-10 14:44 /tmp/output/_SUCCESS
drwxr-xr-x   - username supergroup          0 2013-01-10 14:44 /tmp/output/_logs
drwxr-xr-x   - username supergroup          0 2013-01-10 14:44 /tmp/output/_logs/history
-rw-r--r--   1 username supergroup       9049 2013-01-10 14:44 /tmp/output/_logs/history/job_201301081658_0011_1357847072863_username_TableToFile%5F1357847071434
-rw-r--r--   1 username supergroup      26172 2013-01-10 14:44 /tmp/output/_logs/history/job_201301081658_0011_conf.xml
-rw-r--r--   1 username supergroup         50 2013-01-10 14:44 /tmp/output/part-m-00000

$ hadoop fs -text /tmp/output/output/part-m-00000
catrow cf:cq []    catvalue
dogrow cf:cq []    dogvalue

----------------------------------------

TITLE: Setting Up MiniAccumuloInstance for Integration Testing in Java
DESCRIPTION: Java code example showing how to set up a MiniAccumuloInstance connector for integration testing with the Accumulo Maven Plugin.

LANGUAGE: java
CODE:
private static Connector conn;

@BeforeClass
public static void setUp() throws Exception {
  String instanceName = "plugin-it-instance";
  Instance instance = new MiniAccumuloInstance(instanceName, new File("target/accumulo-maven-plugin/" + instanceName));
  conn = instance.getConnector("root", new PasswordToken("ITSecret"));
}

----------------------------------------

TITLE: Disabling Crypto in Accumulo Properties
DESCRIPTION: Disables encryption for all tables when using the AESCryptoService. This setting is added to the accumulo.properties file.

LANGUAGE: properties
CODE:
general.custom.crypto.enabled=false

----------------------------------------

TITLE: Configuring AgeOffFilter for Minor and Major Compactions in Apache Accumulo (Shell)
DESCRIPTION: This snippet shows how to set up the AgeOffFilter for minor and major compactions using the -class flag. It also demonstrates flushing and compacting the table to force an ageoff of persisted data.

LANGUAGE: shell
CODE:
username@instance filtertest> setiter -t filtertest -minc -majc -p 10 -n myfilter -class org.apache.accumulo.core.iterators.user.AgeOffFilter
AgeOffFilter removes entries with timestamps more than <ttl> milliseconds old
----------> set AgeOffFilter parameter negate, default false keeps k/v that pass accept method, true rejects k/v that pass accept method:
----------> set AgeOffFilter parameter ttl, time to live (milliseconds): 30000
----------> set AgeOffFilter parameter currentTime, if set, use the given value as the absolute time in milliseconds as the current time of day:
username@instance filtertest> flush
06 10:42:24,806 [shell.Shell] INFO : Flush of table filtertest initiated...
username@instance filtertest> compact
06 10:42:36,781 [shell.Shell] INFO : Compaction of table filtertest started for given range
username@instance filtertest> flush -t filtertest -w
06 10:42:52,881 [shell.Shell] INFO : Flush of table filtertest completed.
username@instance filtertest> compact -t filtertest -w
06 10:43:00,632 [shell.Shell] INFO : Compacting table ...
06 10:43:01,307 [shell.Shell] INFO : Compaction of table filtertest completed for given range
username@instance filtertest>

----------------------------------------

TITLE: Viewing Iterator Configuration
DESCRIPTION: Shows how to inspect the configured iterators and their settings using the config command, displaying settings across all scopes including scan, minor compaction, and major compaction.

LANGUAGE: shell
CODE:
username@instance filtertest> config -t filtertest -f iterator
---------+---------------------------------------------+---------------------------------------------------------------------------
SCOPE    | NAME                                        | VALUE
---------+---------------------------------------------+---------------------------------------------------------------------------
table    | table.iterator.majc.myfilter .............. | 10,org.apache.accumulo.core.iterators.user.AgeOffFilter
table    | table.iterator.majc.myfilter.opt.ttl ...... | 30000
table    | table.iterator.majc.vers .................. | 20,org.apache.accumulo.core.iterators.user.VersioningIterator
table    | table.iterator.majc.vers.opt.maxVersions .. | 1
table    | table.iterator.minc.myfilter .............. | 10,org.apache.accumulo.core.iterators.user.AgeOffFilter
table    | table.iterator.minc.myfilter.opt.ttl ...... | 30000
table    | table.iterator.minc.vers .................. | 20,org.apache.accumulo.core.iterators.user.VersioningIterator
table    | table.iterator.minc.vers.opt.maxVersions .. | 1
table    | table.iterator.scan.myfilter .............. | 10,org.apache.accumulo.core.iterators.user.AgeOffFilter
table    | table.iterator.scan.myfilter.opt.ttl ...... | 30000
table    | table.iterator.scan.vers .................. | 20,org.apache.accumulo.core.iterators.user.VersioningIterator
table    | table.iterator.scan.vers.opt.maxVersions .. | 1

----------------------------------------

TITLE: Running Random Batch Scanner in Accumulo
DESCRIPTION: This command runs the RandomBatchScanner class to perform 100 random queries on the 'batchtest1' table, verifying the values of the randomly selected rows.

LANGUAGE: shell
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.simple.client.RandomBatchScanner -i instance -z zookeepers -u username -p password -t batchtest1 --num 100 --min 0 --max 10000 --size 50 --scanThreads 20 --auths exampleVis

----------------------------------------

TITLE: Creating Users with Java API
DESCRIPTION: This code snippet shows how to create a new local user named 'bob' with a password using the SecurityOperations interface in the Java API.

LANGUAGE: java
CODE:
client.securityOperations().createLocalUser("bob", new PasswordToken("pass"));

----------------------------------------

TITLE: Scanning Accumulo Metadata Table
DESCRIPTION: Shows how to examine metadata entries for a table, displaying various system metadata fields like file locations, server assignments, and configuration details.

LANGUAGE: shell
CODE:
shell> table accumulo.metadata
shell> scan -b 3; -e 3<
3< file:/default_tablet/F000009y.rf []    186,1
3< last:13fe86cd27101e5 []    127.0.0.1:9997
3< loc:13fe86cd27101e5 []    127.0.0.1:9997
3< srv:dir []    /default_tablet
3< srv:flush []    1
3< srv:lock []    tservers/127.0.0.1:9997/zlock-0000000001$13fe86cd27101e5
3< srv:time []    M1373998392323
3< ~tab:~pr []    \x00

----------------------------------------

TITLE: Configuring Per Table Crypto Service Factory in Accumulo Properties
DESCRIPTION: Sets up the PerTableCryptoServiceFactory for encrypting specific tables in Accumulo. This configuration is done in the accumulo.properties file.

LANGUAGE: properties
CODE:
instance.crypto.opts.factory=org.apache.accumulo.core.spi.crypto.PerTableCryptoServiceFactory
general.custom.crypto.recovery.service=org.apache.accumulo.core.spi.crypto.AESCryptoService
general.custom.crypto.wal.service=org.apache.accumulo.core.spi.crypto.AESCryptoService

----------------------------------------

TITLE: Revoking System Permission in Accumulo Shell
DESCRIPTION: Shows how to revoke the CREATE_TABLE system permission from a user named 'bob' using the Accumulo shell.

LANGUAGE: console
CODE:
root@uno> revoke System.CREATE_TABLE -s -u bob

----------------------------------------

TITLE: Viewing MapReduce Job Output in HDFS
DESCRIPTION: These commands list the contents of the output directory in HDFS and display the contents of the output file, showing the extracted key-value pairs.

LANGUAGE: shell
CODE:
$ hadoop fs -ls /tmp/output
-rw-r--r--   1 username supergroup          0 2013-01-10 14:44 /tmp/output/_SUCCESS
drwxr-xr-x   - username supergroup          0 2013-01-10 14:44 /tmp/output/_logs
drwxr-xr-x   - username supergroup          0 2013-01-10 14:44 /tmp/output/_logs/history
-rw-r--r--   1 username supergroup       9049 2013-01-10 14:44 /tmp/output/_logs/history/job_201301081658_0011_1357847072863_username_TableToFile%5F1357847071434
-rw-r--r--   1 username supergroup      26172 2013-01-10 14:44 /tmp/output/_logs/history/job_201301081658_0011_conf.xml
-rw-r--r--   1 username supergroup         50 2013-01-10 14:44 /tmp/output/part-m-00000

LANGUAGE: shell
CODE:
$ hadoop fs -text /tmp/output/output/part-m-00000
catrow cf:cq []    catvalue
dogrow cf:cq []    dogvalue
$

----------------------------------------

TITLE: Generating Chronological Release List for Accumulo
DESCRIPTION: This snippet iterates through all releases, groups them by year, and generates HTML for each release entry. It includes logic for displaying different status indicators and formatting based on the release properties.

LANGUAGE: liquid
CODE:
{% assign all_releases = site.categories.release | sort: 'date' | reverse %}
{% for release in all_releases %}
  {% assign current_release_year = release.date | date: "%Y" %}
  {% if forloop.first %}
    {% assign header_year = current_release_year %}
  <hr>
  <h3>{{ header_year }}</h3>
  {% elsif current_release_year != header_year %}
    {% assign header_year = current_release_year %}
  <hr>
  <h3>{{ header_year }}</h3>
  {% endif %}
  {% assign release_link = '&nbsp;<a href="' | append: site.baseurl | append: release.url | append: '">' | append: release.title | append: '</a>' %}
  {% if release.LTM %}{% assign ltm_or_not = ltm_btn %}{% else %}{% assign ltm_or_not = nonltm_btn %}{% endif %}
  <div class="row" style="margin-top: 15px; font-family: monospace">
    <div class="col-md-1">{{ release.date | date: "%b&nbsp;%d" }}</div>
    <div class="col-md-10">{% if release.draft %}
      {{ draft_btn }}&nbsp;{{ ltm_or_not }}<em><strong>{{ release_link }}</strong></em>
    {% elsif release.archived or release.archived_critical %}
      {{ archived_btn }}{{ release_link }}
    {% else %}
      {{ ltm_or_not }}<strong>{{ release_link }}</strong>
    {% endif %}</div>
  </div>
{% endfor %}

----------------------------------------

TITLE: Extracting Keytab File
DESCRIPTION: Extracts a keytab file for Accumulo host authentication.

LANGUAGE: shell
CODE:
kadmin.local -q "xst -k accumulo.hostname.keytab accumulo/host.domain.com"

----------------------------------------

TITLE: Listing Accumulo 2.0.0 Configuration Files
DESCRIPTION: Shows the streamlined configuration files in Accumulo 2.0.0's conf directory.

LANGUAGE: bash
CODE:
$ ls accumulo-2.0.0/conf/
accumulo-env.sh  accumulo-site.xml  client.conf  log4j-monitor.properties  log4j.properties  log4j-service.properties  templates

----------------------------------------

TITLE: Indexing Java Files into Accumulo
DESCRIPTION: Command to recursively find and index all Java files from the Accumulo source code into the shard table.

LANGUAGE: shell
CODE:
$ cd /local/user1/workspace/accumulo/
$ find src -name "*.java" | xargs ./bin/accumulo org.apache.accumulo.examples.shard.Index instance zookeepers shard username password 30

----------------------------------------

TITLE: Table Version Control API
DESCRIPTION: Method for creating tables with or without versioning enabled.

LANGUAGE: java
CODE:
client.tableOperations.create(String tableName, boolean limitVersion);

----------------------------------------

TITLE: Running Accumulo Flush Command
DESCRIPTION: Example of running the Flush.java client to flush an Accumulo table. Requires root access credentials and instance information.

LANGUAGE: bash
CODE:
PACKAGE=org.apache.accumulo.examples.simple.client
bin/accumulo $PACKAGE.Flush -u root -p mypassword -i instance -z zookeeper -t trace

----------------------------------------

TITLE: Creating Accumulo Table via Shell
DESCRIPTION: Command to create a new table named 'hellotable' in Accumulo using the shell interface.

LANGUAGE: shell
CODE:
createtable hellotable

----------------------------------------

TITLE: Granting System Permission in Java API
DESCRIPTION: Shows how to grant the CREATE_TABLE system permission to a user named 'bob' using the Accumulo Java API's SecurityOperations.

LANGUAGE: java
CODE:
client.securityOperations().grantSystem("bob", SystemPermission.CREATE_TABLE);

----------------------------------------

TITLE: Running TableToFile MapReduce Job
DESCRIPTION: This command executes the TableToFile MapReduce job to extract rows containing the column 'cf:cq' from the input table and write them to an output file in HDFS.

LANGUAGE: shell
CODE:
$ bin/tool.sh lib/accumulo-examples-simple.jar org.apache.accumulo.examples.simple.mapreduce.TableToFile -u user -p passwd -i instance -t input --columns cf:cq --output /tmp/output

----------------------------------------

TITLE: Compacting Bulk Imported Files via Shell Command
DESCRIPTION: Example shell command to compact all bulk imported files in a table.

LANGUAGE: Shell
CODE:
compact -t foo --sf-ename I.*

----------------------------------------

TITLE: Listing Tables in Accumulo
DESCRIPTION: Demonstrates the use of the 'tables' command to list all existing tables in the Accumulo instance.

LANGUAGE: console
CODE:
root@myinstance> tables
accumulo.metadata
accumulo.root

----------------------------------------

TITLE: Cloning Accumulo Proxy Repository
DESCRIPTION: Command to clone the Accumulo Proxy repository from GitHub.

LANGUAGE: bash
CODE:
git clone https://github.com/apache/accumulo-proxy

----------------------------------------

TITLE: Running MapReduce Word Count Job
DESCRIPTION: Command to execute the MapReduce word count job with specified parameters including instance name, ZooKeeper servers, input/output locations, and credentials.

LANGUAGE: bash
CODE:
bin/tool.sh lib/accumulo-examples-*[^c].jar org.apache.accumulo.examples.mapreduce.WordCount instance zookeepers /user/user1/wc wordCount -u username -p password

----------------------------------------

TITLE: Executing TableToFile MapReduce Job
DESCRIPTION: Runs the TableToFile MapReduce job to extract columns matching 'cf:cq' from the input table and write them to HDFS. Shows the command and resulting file structure.

LANGUAGE: bash
CODE:
$ bin/tool.sh lib/accumulo-examples-simple.jar org.apache.accumulo.examples.simple.mapreduce.TableToFile -u user -p passwd -i instance -t input --columns cf:cq --output /tmp/output

$ hadoop fs -ls /tmp/output
-rw-r--r--   1 username supergroup          0 2013-01-10 14:44 /tmp/output/_SUCCESS
drwxr-xr-x   - username supergroup          0 2013-01-10 14:44 /tmp/output/_logs
drwxr-xr-x   - username supergroup          0 2013-01-10 14:44 /tmp/output/_logs/history
-rw-r--r--   1 username supergroup       9049 2013-01-10 14:44 /tmp/output/_logs/history/job_201301081658_0011_1357847072863_username_TableToFile%5F1357847071434
-rw-r--r--   1 username supergroup      26172 2013-01-10 14:44 /tmp/output/_logs/history/job_201301081658_0011_conf.xml
-rw-r--r--   1 username supergroup         50 2013-01-10 14:44 /tmp/output/part-m-00000

----------------------------------------

TITLE: Viewing Ingested File System Data in Accumulo
DESCRIPTION: Command to run the Viewer.java class, which provides a GUI for browsing the file system information stored in Accumulo. It specifies the Accumulo instance, zookeepers, username, password, tables, authorizations, and the path to view.

LANGUAGE: bash
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.simple.dirlist.Viewer -i instance -z zookeepers -u username -p password -t dirTable --dataTable dataTable --auths exampleVis --path /local/username/workspace

----------------------------------------

TITLE: Creating Accumulo Table via Shell
DESCRIPTION: Command to create a new table named 'hellotable' using the Accumulo shell interface.

LANGUAGE: shell
CODE:
createtable hellotable

----------------------------------------

TITLE: Adding Accumulo MapReduce Dependency in Maven
DESCRIPTION: Add the Accumulo Hadoop MapReduce dependency to your Maven pom.xml file to use Accumulo's MapReduce API.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>org.apache.accumulo</groupId>
  <artifactId>accumulo-hadoop-mapreduce</artifactId>
  <version>{{ page.latest_release }}</version>
</dependency>

----------------------------------------

TITLE: Removing Users with Java API
DESCRIPTION: This code snippet shows how to remove a local user named 'bob' using the SecurityOperations interface in the Java API.

LANGUAGE: java
CODE:
client.securityOperations().dropLocalUser("bob");

----------------------------------------

TITLE: Copying Generated Docs for Website Update
DESCRIPTION: This snippet shows how to copy generated documentation files to the accumulo-website repository.

LANGUAGE: bash
CODE:
cp /path/to/accumulo/core/target/generated-docs/*-properties.md /path/to/accumulo-website/_docs-2/configuration/

----------------------------------------

TITLE: TabletServer Iterator Invocation in Java
DESCRIPTION: General outline of how TabletServers invoke Iterators, including initialization, seeking, and processing of key-value pairs.

LANGUAGE: java
CODE:
List<KeyValue> batch;
Range range = getRangeFromClient();
while (!overSizeLimit(batch)) {
    SortedKeyValueIterator source = getSystemIterator();

    for (String clzName : getUserIterators()) {
        Class<?> clz = Class.forName(clzName);
        SortedKeyValueIterator iter = (SortedKeyValueIterator) clz.newInstance();
        iter.init(source, opts, env);
        source = iter;
    }

    // read a batch of data to return to client from
    // the last iterator, the "top"
    SortedKeyValueIterator topIter = source;

    YieldCallback cb = new YieldCallback();
    topIter.enableYielding(cb)

    topIter.seek(range, ...)

    while (topIter.hasTop() && !overSizeLimit(batch)) {
        key = topIter.getTopKey()
        val = topIter.getTopValue()
        batch.add(new KeyValue(key, val)
        // remember the last key returned
        setLastKeyReturned(key);
        if (systemDataSourcesChanged()) {
            // code does not show isolation case, which will
            // keep using same data sources until a row boundary is hit
            range = new Range(key, false, range.endKey(), range.endKeyInclusive());
            break;
        }
        topIter.next()
    }

    if (cb.hasYielded()) {
        // remember the yield key as the last key returned
        setLastKeyReturned(cb.getKey());
        break;
    }
}
//return batch of key values to client

----------------------------------------

TITLE: Generating Host Certificates and Keystores
DESCRIPTION: Commands to generate individual certificates and keystores for each host in the Accumulo cluster, including creating private keys, certificate signing requests, and importing into Java KeyStores.

LANGUAGE: bash
CODE:
# Create the private key for our server
openssl genrsa -out server.key 4096

# Generate a certificate signing request (CSR) with our private key
openssl req -new -key server.key -out server.csr

# Use the CSR and the CA to create a certificate for the server (a reply to the CSR)
openssl x509 -req -in server.csr -CA root.pem -CAkey root.key -CAcreateserial -out server.crt -days 365

# Use the certificate and the private key for our server to create PKCS12 file
openssl pkcs12 -export -in server.crt -inkey server.key -certfile server.crt -name 'server-key' -out server.p12

# Create a Java KeyStore for the server using the PKCS12 file (private key)
keytool -importkeystore -srckeystore server.p12 -srcstoretype pkcs12 -destkeystore server.jks -deststoretype JKS

# Remove the PKCS12 file as we don't need it
rm server.p12

# Import the CA-signed certificate to the keystore
keytool -import -trustcacerts -alias server-crt -file server.crt -keystore server.jks

----------------------------------------

TITLE: Copying Input Data to HDFS
DESCRIPTION: Commands to copy the Accumulo README file to HDFS as sample input data and verify its presence.

LANGUAGE: bash
CODE:
$ hadoop fs -copyFromLocal $ACCUMULO_HOME/README /user/username/wc/Accumulo.README
$ hadoop fs -ls /user/username/wc

----------------------------------------

TITLE: Inserting Data with Visibility Labels
DESCRIPTION: Examples of inserting data with different visibility expressions, showing both simple and complex visibility patterns. Demonstrates proper syntax for combining visibility tokens with AND (&) and OR (|) operators.

LANGUAGE: shell
CODE:
username@instance vistest> insert row f1 q1 v1 -l A
username@instance vistest> insert row f2 q2 v2 -l A&B
username@instance vistest> insert row f3 q3 v3 -l (apple&carrot)|broccoli|spinach

----------------------------------------

TITLE: Pre-splitting Tables in Accumulo Shell
DESCRIPTION: Command to pre-split an Accumulo table using a split file to create multiple tablets for improved ingest parallelism.

LANGUAGE: shell
CODE:
user@myinstance mytable> addsplits -sf /local_splitfile -t mytable

----------------------------------------

TITLE: Inserting Random Data - Bash Command
DESCRIPTION: Inserts 1 million random values into the Accumulo table using RandomBatchWriter with specified parameters.

LANGUAGE: bash
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.simple.client.RandomBatchWriter --seed 7 -i instance -z zookeepers -u username -p password -t bloom_test --num 1000000 --min 0 --max 1000000000 --size 50 --batchMemory 2M --batchLatency 60s --batchThreads 3 --vis exampleVis

----------------------------------------

TITLE: Pre-splitting Tables in Accumulo Shell
DESCRIPTION: Command to pre-split an Accumulo table using a split file to create multiple tablets for improved ingest parallelism.

LANGUAGE: shell
CODE:
user@myinstance mytable> addsplits -sf /local_splitfile -t mytable

----------------------------------------

TITLE: Configuring Block Cache Usage for Scans in Accumulo
DESCRIPTION: Command to configure how the block cache is used for scans with a specific execution hint. This example sets 'opportunistic' cache usage for the 'gamma' executor.

LANGUAGE: shell
CODE:
config -t tex -s table.scan.dispatcher.opts.cacheUsage.gamma=opportunistic

----------------------------------------

TITLE: Configuring StatsCombiner in Accumulo Shell
DESCRIPTION: Commands for creating a table and setting up StatsCombiner with base-10 and base-16 configurations. Shows how to configure the combiner for different column families with different numeric bases.

LANGUAGE: shell
CODE:
$ bin/accumulo shell -u username
Enter current password for 'username'@'instance': ***

Shell - Apache Accumulo Interactive Shell
- 
- version: 1.5.0
- instance name: instance
- instance id: 00000000-0000-0000-0000-000000000000
- 
- type 'help' for a list of available commands
- 
username@instance> createtable runners
username@instance runners> setiter -t runners -p 10 -scan -minc -majc -n decStats -class org.apache.accumulo.examples.simple.combiner.StatsCombiner
Combiner that keeps track of min, max, sum, and count
----------> set StatsCombiner parameter all, set to true to apply Combiner to every column, otherwise leave blank. if true, columns option will be ignored.: 
----------> set StatsCombiner parameter columns, <col fam>[:<col qual>]{,<col fam>[:<col qual>]} escape non aplhanum chars using %<hex>.: stat
----------> set StatsCombiner parameter radix, radix/base of the numbers: 10

----------------------------------------

TITLE: Configuring Compaction Strategy in Java API
DESCRIPTION: Example of how to configure a compaction strategy for a user-initiated compaction using the Java API. This allows for custom logic to decide which files are involved in a major compaction.

LANGUAGE: Java
CODE:
Connection conn = ...
CompactionStrategyConfig csConfig = new CompactionStrategyConfig(strategyClassName).setOptions(strategyOpts);
CompactionConfig compactionConfig = new CompactionConfig().setCompactionStrategy(csConfig);
connector.tableOperations().compact(tableName, compactionConfig)

----------------------------------------

TITLE: Retrieving Split Points for Accumulo Table
DESCRIPTION: This shell command retrieves the split points of an Accumulo table, which can be used to configure a MapReduce job for bulk ingest preparation.

LANGUAGE: shell
CODE:
user@myinstance mytable> getsplits

----------------------------------------

TITLE: Starting Multiple TabletServers with accumulo-cluster Script
DESCRIPTION: Commands to start and stop multiple TabletServers using the accumulo-cluster script with the NUM_TSERVERS environment variable.

LANGUAGE: bash
CODE:
NUM_TSERVERS=2 ./bin/accumulo-cluster start-here
NUM_TSERVERS=2 ./bin/accumulo-cluster stop-here

NUM_TSERVERS=2 ./bin/accumulo-cluster start
NUM_TSERVERS=2 ./bin/accumulo-cluster stop

----------------------------------------

TITLE: Creating and Configuring AgeOffFilter in Accumulo
DESCRIPTION: Shows the process of creating a table and setting up an AgeOffFilter with a 30-second TTL for scan operations. The filter will remove entries older than 30 seconds during queries.

LANGUAGE: shell
CODE:
username@instance> createtable filtertest
username@instance filtertest> setiter -t filtertest -scan -p 10 -n myfilter -filter
FilteringIterator uses Filters to accept or reject key/value pairs
----------> entering options: <filterPriorityNumber> <ageoff|regex|filterClass>
----------> set org.apache.accumulo.core.iterators.FilteringIterator option (<name> <value>, hit enter to skip): 0 ageoff
----------> set org.apache.accumulo.core.iterators.FilteringIterator option (<name> <value>, hit enter to skip): 
AgeOffFilter removes entries with timestamps more than <ttl> milliseconds old
----------> set org.apache.accumulo.core.iterators.filter.AgeOffFilter parameter currentTime, if set, use the given value as the absolute time in milliseconds as the current time of day: 
----------> set org.apache.accumulo.core.iterators.filter.AgeOffFilter parameter ttl, time to live (milliseconds): 30000

----------------------------------------

TITLE: Inserting Data with Visibilities in Accumulo
DESCRIPTION: This snippet demonstrates how to insert data with different visibility labels, including complex boolean expressions.

LANGUAGE: shell
CODE:
username@instance vistest> insert row f1 q1 v1 -l A
username@instance vistest> insert row f2 q2 v2 -l A&B
username@instance vistest> insert row f3 q3 v3 -l apple&carrot|broccoli|spinach
06 11:19:01,432 [shell.Shell] ERROR: org.apache.accumulo.core.util.BadArgumentException: cannot mix | and & near index 12
apple&carrot|broccoli|spinach
            ^
username@instance vistest> insert row f3 q3 v3 -l (apple&carrot)|broccoli|spinach
username@instance vistest> 

----------------------------------------

TITLE: Scanning Updated Data with Histogram in Accumulo Shell
DESCRIPTION: This Accumulo shell command scans the dataTable again to view the added histogram information stored in the 'info' column family.

LANGUAGE: shell
CODE:
> scan -t dataTable

----------------------------------------

TITLE: Displaying Variables in Accumulo JShell
DESCRIPTION: Shows the use of the /vars command to display all currently defined variables, including the Accumulo client object.

LANGUAGE: java
CODE:
jshell> /vars
|    URL clientPropUrl = file:<path_to_accumulo_dir>/conf/accumulo-client.properties
|    AccumuloClient client = org.apache.accumulo.core.clientImpl.ClientContext@7cbee484

----------------------------------------

TITLE: Viewing Table Configuration in Accumulo Shell
DESCRIPTION: Demonstrates how to view the configuration for a specific table using the Accumulo shell, showing the precedence of different configuration scopes.

LANGUAGE: shell
CODE:
root@accumulo-instance> config -t foo
---------+---------------------------------------------+-----------------------
SCOPE    | NAME                                        | VALUE
---------+---------------------------------------------+-----------------------
default  | table.bloom.enabled ....................... | false
default  | table.bloom.error.rate .................... | 0.5%
default  | table.bloom.hash.type ..................... | murmur
default  | table.bloom.load.threshold ................ | 1
default  | table.bloom.size .......................... | 1048576
default  | table.cache.block.enable .................. | false
default  | table.cache.index.enable .................. | false
default  | table.compaction.major.everything.at ...... | 19700101000000GMT
default  | table.compaction.major.everything.idle .... | 1h
default  | table.compaction.major.ratio .............. | 1.3
site     |    @override .............................. | 1.4
system   |    @override .............................. | 1.5
table    |    @override .............................. | 1.6
default  | table.compaction.minor.idle ............... | 5m
default  | table.compaction.minor.logs.threshold ..... | 3
default  | table.failures.ignore ..................... | false

----------------------------------------

TITLE: Updating Maven Dependency for Accumulo 2.0
DESCRIPTION: XML snippet to update the Maven dependency for Accumulo Core to version 2.0.1 in a project's pom.xml file.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>org.apache.accumulo</groupId>
  <artifactId>accumulo-core</artifactId>
  <version>2.0.1</version>
</dependency>

----------------------------------------

TITLE: Flushing an Accumulo Table using Java Client
DESCRIPTION: This snippet demonstrates how to flush an Accumulo table using the Flush class from the simple client examples. It requires the user to provide authentication details and instance information.

LANGUAGE: bash
CODE:
$ PACKAGE=org.apache.accumulo.examples.simple.client
$ bin/accumulo $PACKAGE.Flush -u root -p mypassword -i instance -z zookeeper -t trace

----------------------------------------

TITLE: Creating ZooKeeper Snapshot in Accumulo
DESCRIPTION: Command to create a snapshot of the current ZooKeeper contents as a backup before upgrading to Accumulo 2.1.

LANGUAGE: bash
CODE:
$ACCUMULO_HOME/bin/accumulo dump-zoo --xml --root /accumulo | tee PATH_TO_SNAPSHOT

----------------------------------------

TITLE: Creating Table with MaxMutationSize Constraint in Accumulo Shell
DESCRIPTION: This snippet demonstrates how to create a table named 'test_ingest' and apply the MaxMutationSize constraint using the Accumulo shell. The constraint limits mutation size to 1/256th of the tablet server's working memory.

LANGUAGE: shell
CODE:
$ ./bin/accumulo shell -u username -p password

Shell - Apache Accumulo Interactive Shell
-
- version: 1.5.0
- instance name: instance
- instance id: 00000000-0000-0000-0000-000000000000
-
- type 'help' for a list of available commands
-
username@instance> createtable test_ingest
username@instance test_ingest> config -t test_ingest -s table.constraint.1=org.apache.accumulo.examples.simple.constraints.MaxMutationSize
username@instance test_ingest>

----------------------------------------

TITLE: Ingesting File Data into Accumulo
DESCRIPTION: This command uses the FileDataIngest class to ingest a file into Accumulo. It specifies the instance, zookeepers, credentials, table name, authorizations, chunk size, and the file to ingest.

LANGUAGE: shell
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.simple.filedata.FileDataIngest -i instance -z zookeepers -u username -p password -t dataTable --auths exampleVis --chunk 1000 $ACCUMULO_HOME/README

----------------------------------------

TITLE: Querying Directory Contents
DESCRIPTION: Commands to list contents of specific directories using QueryUtil class.

LANGUAGE: bash
CODE:
./bin/accumulo org.apache.accumulo.examples.dirlist.QueryUtil instance zookeepers username password direxample exampleVis /local/user1
./bin/accumulo org.apache.accumulo.examples.dirlist.QueryUtil instance zookeepers username password direxample exampleVis /local/user1/workspace

----------------------------------------

TITLE: Table Management Commands
DESCRIPTION: Commands for creating, modifying, and managing Accumulo tables including splits and compaction

LANGUAGE: shell
CODE:
createtable <tableName> [-?] [-a <<columnfamily>[:<columnqualifier>]=<aggregation_class>>] [-b64] [-cc <table>]
deletetable <tableName> [-?]
renametable <current table name> <new table name> [-?]
compact [-?] [-override] -p <pattern> | -t <tableName>

----------------------------------------

TITLE: Ingesting File Data into Accumulo
DESCRIPTION: This command uses the FileDataIngest class to ingest a file into Accumulo. It specifies the instance, zookeepers, credentials, table name, authorizations, chunk size, and the file to ingest.

LANGUAGE: shell
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.simple.filedata.FileDataIngest -i instance -z zookeepers -u username -p password -t dataTable --auths exampleVis --chunk 1000 $ACCUMULO_HOME/README

----------------------------------------

TITLE: Listing Imports in Accumulo JShell
DESCRIPTION: Demonstrates the use of the /imports command to list all currently loaded imports in the JShell session, including Accumulo-specific libraries.

LANGUAGE: java
CODE:
jshell> /imports
|    import java.io.*
|    import java.math.*
|    import java.net.*
|    import java.nio.file.*
|    import java.util.*
|    import java.util.concurrent.*
|    import java.util.function.*
|    import java.util.prefs.*
|    import java.util.regex.*
|    import java.util.stream.*
|    import org.apache.accumulo.core.client.*
|    import org.apache.accumulo.core.client.admin.*
|    import org.apache.accumulo.core.client.admin.compaction.*
|    import org.apache.accumulo.core.client.lexicoder.*
|    import org.apache.accumulo.core.client.mapred.*
|    import org.apache.accumulo.core.client.mapreduce.*
|    import org.apache.accumulo.core.client.mapreduce.lib.partition.*
|    import org.apache.accumulo.core.client.replication.*
|    import org.apache.accumulo.core.client.rfile.*
|    import org.apache.accumulo.core.client.sample.*
|    import org.apache.accumulo.core.client.security.*
|    import org.apache.accumulo.core.client.security.tokens.*
|    import org.apache.accumulo.core.client.summary.*
|    import org.apache.accumulo.core.client.summary.summarizers.*
|    import org.apache.accumulo.core.data.*
|    import org.apache.accumulo.core.data.constraints.*
|    import org.apache.accumulo.core.security.*
|    import org.apache.accumulo.minicluster.*
|    import org.apache.accumulo.hadoop.mapreduce.*
|    import org.apache.accumulo.hadoop.mapreduce.partition.*
|    import org.apache.hadoop.io.Text

----------------------------------------

TITLE: Creating and Querying Summary Statistics in Accumulo Shell
DESCRIPTION: Example showing how to create a table, insert data with various visibilities, and query summary statistics. Demonstrates basic table operations and data insertion with security labels.

LANGUAGE: console
CODE:
root@uno> createtable summary_test
root@uno summary_test> setauths -u root -s PI,GEO,TIME
root@uno summary_test> insert 3b503bd name last Doe
root@uno summary_test> insert 3b503bd name first John
root@uno summary_test> insert 3b503bd contact address "123 Park Ave, NY, NY" -l PI&GEO
root@uno summary_test> insert 3b503bd date birth "1/11/1942" -l PI&TIME
root@uno summary_test> insert 3b503bd date married "5/11/1962" -l PI&TIME
root@uno summary_test> insert 3b503bd contact home_phone 1-123-456-7890 -l PI
root@uno summary_test> insert d5d18dd contact address "50 Lake Shore Dr, Chicago, IL" -l PI&GEO
root@uno summary_test> insert d5d18dd name first Jane
root@uno summary_test> insert d5d18dd name last Doe
root@uno summary_test> insert d5d18dd date birth 8/15/1969 -l PI&TIME
root@uno summary_test> scan -s PI,GEO,TIME

----------------------------------------

TITLE: Flushing an Accumulo Table using Java Client
DESCRIPTION: This snippet demonstrates how to use the Flush class to flush an Accumulo table. It requires the user to provide authentication details and Accumulo instance information.

LANGUAGE: Bash
CODE:
$ PACKAGE=org.apache.accumulo.examples.simple.client
$ bin/accumulo $PACKAGE.Flush -u root -p mypassword -i instance -z zookeeper -t trace

----------------------------------------

TITLE: FATE Admin Command Syntax
DESCRIPTION: Command syntax for executing FATE administrative operations in the Accumulo shell.

LANGUAGE: plaintext
CODE:
> accumulo admin fate --[option]

----------------------------------------

TITLE: Configuring Accumulo Table Durability Settings via Shell Commands
DESCRIPTION: Shell commands demonstrating how to view and configure table durability settings in Accumulo, including checking default values and overriding table-specific settings.

LANGUAGE: shell
CODE:
root@uno> config -s table.durability=flush
root@uno foo> config -t foo -f table.durability
-----------+---------------------+----------------------------------------------
SCOPE      | NAME                | VALUE
-----------+---------------------+----------------------------------------------
default    | table.durability .. | sync
system     |    @override ...... | flush
-----------+---------------------+----------------------------------------------
root@uno> config -t accumulo.metadata -f table.durability
-----------+---------------------+----------------------------------------------
SCOPE      | NAME                | VALUE
-----------+---------------------+----------------------------------------------
default    | table.durability .. | sync
system     |    @override ...... | flush
table      |    @override ...... | sync
-----------+---------------------+----------------------------------------------
root@uno> config -t accumulo.metadata -d table.durability
root@uno> config -t accumulo.metadata -f table.durability
-----------+---------------------+----------------------------------------------
SCOPE      | NAME                | VALUE
-----------+---------------------+----------------------------------------------
default    | table.durability .. | sync
system     |    @override ...... | flush
-----------+---------------------+----------------------------------------------

----------------------------------------

TITLE: Ingesting File System Data into Accumulo
DESCRIPTION: Command to ingest directory structure metadata into Accumulo tables using the Ingest class. Creates 'direxample' and 'dirindex' tables.

LANGUAGE: bash
CODE:
./bin/accumulo org.apache.accumulo.examples.dirlist.Ingest instance zookeepers username password direxample dirindex exampleVis /local/user1/workspace

----------------------------------------

TITLE: Pushing Signed Git Tag
DESCRIPTION: This snippet demonstrates how to push the signed Git tag to the upstream repository.

LANGUAGE: bash
CODE:
git push upstream rel/1.10.0

----------------------------------------

TITLE: Configuring AccumuloOutputFormat for MapReduce Job in Java
DESCRIPTION: Sets up AccumuloOutputFormat options for a MapReduce job, including user authentication, table creation settings, and ZooKeeper instance configuration. Also shows optional settings for configuring latency and mutation buffer size.

LANGUAGE: java
CODE:
boolean createTables = true;
String defaultTable = "mytable";

AccumuloOutputFormat.setOutputInfo(job,
        "user",
        "passwd".getBytes(),
        createTables,
        defaultTable);

AccumuloOutputFormat.setZooKeeperInstance(job, "myinstance",
        "zooserver-one,zooserver-two");

// Optional Settings:
AccumuloOutputFormat.setMaxLatency(job, 300); // milliseconds
AccumuloOutputFormat.setMaxMutationBufferSize(job, 5000000); // bytes

----------------------------------------

TITLE: Querying Accumulo Table for Word Count Results
DESCRIPTION: This snippet demonstrates how to query the Accumulo table to retrieve the word count results after the MapReduce job completes.

LANGUAGE: shell
CODE:
$ ./bin/accumulo shell -u username -p password
username@instance> table wordCount
username@instance wordCount> scan -b the
the count:20080906 []    75
their count:20080906 []    2
them count:20080906 []    1
then count:20080906 []    1
there count:20080906 []    1
these count:20080906 []    3
this count:20080906 []    6
through count:20080906 []    1
time count:20080906 []    3
time. count:20080906 []    1
to count:20080906 []    27
total count:20080906 []    1
tserver, count:20080906 []    1
tserver.compaction.major.concurrent.max count:20080906 []    1
...

----------------------------------------

TITLE: Querying Accumulo Table for Word Count Results
DESCRIPTION: This snippet demonstrates how to query the Accumulo table to retrieve the word count results after the MapReduce job completes.

LANGUAGE: shell
CODE:
$ ./bin/accumulo shell -u username -p password
username@instance> table wordCount
username@instance wordCount> scan -b the
the count:20080906 []    75
their count:20080906 []    2
them count:20080906 []    1
then count:20080906 []    1
there count:20080906 []    1
these count:20080906 []    3
this count:20080906 []    6
through count:20080906 []    1
time count:20080906 []    3
time. count:20080906 []    1
to count:20080906 []    27
total count:20080906 []    1
tserver, count:20080906 []    1
tserver.compaction.major.concurrent.max count:20080906 []    1
...

----------------------------------------

TITLE: Enabling Data Block Cache for a Table Programmatically in Java
DESCRIPTION: This Java code snippet demonstrates how to enable the data block cache for a table named 'mytable' using the TableOperations API. It sets the 'table.cache.block.enable' property to 'true'.

LANGUAGE: java
CODE:
client.tableOperations().setProperty("mytable", "table.cache.block.enable", "true");

----------------------------------------

TITLE: Creating AccumuloClient from Java Properties Object
DESCRIPTION: Java code snippet demonstrating how to create an AccumuloClient object using a Java Properties object with Accumulo configuration settings.

LANGUAGE: java
CODE:
Properties props = new Properties()
props.put("instance.name", "myinstance")
props.put("instance.zookeepers", "zookeeper1,zookeeper2")
props.put("auth.type", "password")
props.put("auth.principal", "myuser")
props.put("auth.token", "mypassword")
AccumuloClient client = Accumulo.newClient().from(props).build();

----------------------------------------

TITLE: Running Continuous Queries on Accumulo Shard Index
DESCRIPTION: Command to execute the ContinuousQuery.java program, which performs continuous random queries using 5 terms per document.

LANGUAGE: bash
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.simple.shard.ContinuousQuery -i instance -z zookeepers --shardTable shard --doc2Term doc2term -u username -p password --terms 5

----------------------------------------

TITLE: Building Docker Image for Website Development
DESCRIPTION: Docker command to build a containerized development environment for the Accumulo website. This creates a 'webdev' image with all necessary build prerequisites installed.

LANGUAGE: bash
CODE:
docker build -t webdev .

----------------------------------------

TITLE: Running Reverse Index Population
DESCRIPTION: Command to populate the doc2term table using the Reverse program, which creates a mapping of documents to terms.

LANGUAGE: bash
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.simple.shard.Reverse -i instance -z zookeepers --shardTable shard --doc2Term doc2term -u username -p password

----------------------------------------

TITLE: Querying Non-Existing Values with RandomBatchScanner
DESCRIPTION: Command to perform 500 random queries using a different seed to demonstrate bloom filter performance benefits.

LANGUAGE: bash
CODE:
$ ../bin/accumulo org.apache.accumulo.examples.client.RandomBatchScanner -s 8 instance zookeepers username password bloom_test 500 0 1000000000 50 20 exampleVis

----------------------------------------

TITLE: Cloning Accumulo Examples Repository
DESCRIPTION: Clones the Accumulo Examples repository for integration testing.

LANGUAGE: shell
CODE:
$ git clone https://github.com/apache/accumulo-examples.git

----------------------------------------

TITLE: Initializing Data in Accumulo Shell
DESCRIPTION: Commands to create a table and insert sample data using the Accumulo shell interface. Creates a table named 'input' and inserts two records with dog and cat related data.

LANGUAGE: shell
CODE:
$ ./bin/accumulo shell -u username -p password
Shell - Apache Accumulo Interactive Shell
- version: 1.5.0
- instance name: instance
- instance id: 00000000-0000-0000-0000-000000000000
-
- type 'help' for a list of available commands
-
username@instance> createtable input
username@instance> insert dogrow dogcf dogcq dogvalue
username@instance> insert catrow catcf catcq catvalue
username@instance> quit

----------------------------------------

TITLE: Listing Accumulo Tables using Java
DESCRIPTION: This snippet demonstrates how to list the default tables in Accumulo using the tableOperations() method of the AccumuloClient object.

LANGUAGE: java
CODE:
client.tableOperations().list().forEach(System.out::println);

----------------------------------------

TITLE: YAML Front Matter Redirect Configuration
DESCRIPTION: YAML configuration block that sets up a page redirect to the Accumulo quickstart documentation. Uses Jekyll front matter syntax to define the page title and redirect destination.

LANGUAGE: yaml
CODE:
---
title: Apache Accumulo Documentation
redirect_to: /docs/2.x/getting-started/quickstart
---

----------------------------------------

TITLE: Indexing Java Files into Accumulo Shard Table
DESCRIPTION: Bash command to index all Java files in the Accumulo source code into the 'shard' table using the Index.java program.

LANGUAGE: bash
CODE:
$ cd /local/username/workspace/accumulo/
$ find core/src server/src -name "*.java" | xargs ./bin/accumulo org.apache.accumulo.examples.simple.shard.Index -i instance -z zookeepers -t shard -u username -p password --partitions 30

----------------------------------------

TITLE: Updating Property Documentation in Bash
DESCRIPTION: Bash commands to regenerate server and client property documentation files for Accumulo releases. This process involves building Accumulo and copying the generated files to the website repository.

LANGUAGE: bash
CODE:
ACCUMULO_SITE_CLONE=<accumulo website clone location, with main branch checked out>
ACCUMULO_CLONE=<accumulo clone location>
cd "$ACCUMULO_CLONE"
mvn package -DskipTests
cp ./core/target/generated-docs/*.md "$ACCUMULO_SITE_CLONE"/_docs-2/configuration/

----------------------------------------

TITLE: Setting User Authorization in Accumulo Shell
DESCRIPTION: Commands to set the 'exampleVis' authorization for a user using the Accumulo shell as root.

LANGUAGE: shell
CODE:
$ ./bin/accumulo shell -u root
> setauths -u username -s exampleVis
> exit

----------------------------------------

TITLE: Creating Table in Accumulo Shell
DESCRIPTION: Commands to create the 'batchtest1' table using the Accumulo shell.

LANGUAGE: shell
CODE:
$ ./bin/accumulo shell -u username
> createtable batchtest1
> exit

----------------------------------------

TITLE: Setting Release Version Environment Variables
DESCRIPTION: Sets environment variables for the release version and staging repository ID used in testing.

LANGUAGE: shell
CODE:
export RC_VERSION=1.10.0
export RC_STAGING=1070

----------------------------------------

TITLE: Creating Accumulo Tables for Shard Example
DESCRIPTION: Commands to create the necessary Accumulo tables 'shard' and 'doc2term' for the shard example.

LANGUAGE: bash
CODE:
username@instance> createtable shard
username@instance shard> createtable doc2term

----------------------------------------

TITLE: Starting Individual Accumulo Process
DESCRIPTION: Command to start an individual Accumulo process (tablet server) in the foreground.

LANGUAGE: bash
CODE:
accumulo tserver

----------------------------------------

TITLE: Creating Table in Accumulo Shell
DESCRIPTION: This command creates the 'batchtest1' table in Accumulo, which is required for the batch writing and scanning example.

LANGUAGE: shell
CODE:
$ ./bin/accumulo shell -u username -e "createtable batchtest1"

----------------------------------------

TITLE: Pre-splitting Tables in Accumulo
DESCRIPTION: Demonstrates how to pre-split a table when creating it using the Accumulo shell.

LANGUAGE: Shell
CODE:
root@myinstance> createtable newTable
root@myinstance> addsplits -t newTable g n t

----------------------------------------

TITLE: Creating Cluster Configuration
DESCRIPTION: Command to create default cluster configuration files from templates.

LANGUAGE: bash
CODE:
accumulo-cluster create-config

----------------------------------------

TITLE: Scanning Data Table Contents
DESCRIPTION: Accumulo shell command to view the contents of the data table containing archived file data. The row IDs are MD5 hashes of the stored files.

LANGUAGE: shell
CODE:
scan -t dataTable

----------------------------------------

TITLE: Importing Bulk Data in Accumulo Shell
DESCRIPTION: Command to import bulk data files into Accumulo from HDFS directories, with support for tracking failed imports.

LANGUAGE: shell
CODE:
user@myinstance mytable> importdirectory /files_dir /failures

----------------------------------------

TITLE: Merging Changes Across Multiple Versions in Git
DESCRIPTION: Git commands for merging changes across multiple versions of Accumulo. This process involves merging from earlier versions to later versions and handling potential conflicts.

LANGUAGE: bash
CODE:
git checkout new-version && git merge --stat old-version

LANGUAGE: bash
CODE:
git checkout new-version && git merge --no-commit old-version

----------------------------------------

TITLE: Basic Table Creation and Data Insertion in Accumulo Shell
DESCRIPTION: Creates a new table 'sampex' and inserts document metadata including content and URLs. Demonstrates basic Accumulo shell commands for data insertion.

LANGUAGE: shell
CODE:
createtable sampex
insert 9255 doc content 'abcde'
insert 9255 doc url file://foo.txt
insert 8934 doc content 'accumulo scales'
insert 8934 doc url file://accumulo_notes.txt
insert 2317 doc content 'milk, eggs, bread, parmigiano-reggiano'
insert 2317 doc url file://groceries/9.txt
insert 3900 doc content 'EC2 ate my homework'
insert 3900 doc uril file://final_project.txt

----------------------------------------

TITLE: Verifying Sorted Data in Accumulo Shell
DESCRIPTION: Commands to connect to the Accumulo shell and scan the sorted data from the specified table to verify the results of the TeraSort operation.

LANGUAGE: shell
CODE:
./bin/accumulo shell -u username -p password
username@instance> scan -t sort

----------------------------------------

TITLE: Merging Tablets in Accumulo
DESCRIPTION: Shows various ways to merge tablets in Accumulo using the shell commands.

LANGUAGE: Shell
CODE:
root@myinstance> merge -t myTable -s A -e Z

root@myinstance> config -t myTable -s table.split.threshold=2G

root@myinstance> merge -t myTable -s 100M

root@myinstance> merge -t myTable -s 100M --force

root@myinstance> config -t myTable -s table.split.threshold=256M
root@myinstance> merge -t myTable

----------------------------------------

TITLE: Creating Tables in Accumulo
DESCRIPTION: Shows how to create a new table using the 'createtable' command and verify its creation.

LANGUAGE: console
CODE:
root@myinstance> createtable mytable
root@myinstance mytable> tables
accumulo.metadata
accumulo.root
mytable

----------------------------------------

TITLE: Configuring Uno for Accumulo Proxy
DESCRIPTION: Configuration settings for uno.conf to enable Accumulo Proxy as a post-run plugin.

LANGUAGE: bash
CODE:
export POST_RUN_PLUGINS="accumulo-proxy"
export PROXY_REPO=/path/to/accumulo-proxy

----------------------------------------

TITLE: Running Docker Container for Website Development
DESCRIPTION: Docker command to run a container using the 'webdev' image. This mounts the current working directory and exposes port 4000 for local website preview.

LANGUAGE: bash
CODE:
docker run -d -v "$PWD":/mnt/workdir -p 4000:4000 webdev

----------------------------------------

TITLE: Applying Patches from Contributors in Git
DESCRIPTION: A series of Git commands to apply patches from contributors to the Accumulo project. This process includes checking out the correct branch, verifying and applying the patch, and pushing the changes.

LANGUAGE: bash
CODE:
git checkout 1.10

LANGUAGE: bash
CODE:
git apply --stat ACCUMULO-12345.patch

LANGUAGE: bash
CODE:
git apply --check ACCUMULO-12345.patch

LANGUAGE: bash
CODE:
git am --signoff < ACCUMULO-12345.patch

LANGUAGE: bash
CODE:
git push origin 1.10

LANGUAGE: bash
CODE:
git checkout main && git merge 1.10

----------------------------------------

TITLE: Setting GEM_HOME Environment Variable in Bash
DESCRIPTION: Bash command to set the GEM_HOME environment variable, allowing for local installation of Ruby gems without sudo privileges. This is recommended when using an OS-packaged version of Ruby.

LANGUAGE: bash
CODE:
# in .bashrc
export GEM_HOME=$HOME/.gem/ruby

----------------------------------------

TITLE: Converting Accumulo Properties in ZooKeeper
DESCRIPTION: Command to convert Accumulo properties in ZooKeeper to the new format used in version 2.1.

LANGUAGE: bash
CODE:
$ACCUMULO_HOME/bin/accumulo config-upgrade

----------------------------------------

TITLE: Initializing Mini Accumulo Cluster
DESCRIPTION: Code showing how to start and configure a Mini Accumulo Cluster for integration testing.

LANGUAGE: java
CODE:
File tempDirectory = // JUnit and Guava supply mechanisms for creating temp directories
MiniAccumuloCluster accumulo = new MiniAccumuloCluster(tempDirectory, "password");
accumulo.start();

----------------------------------------

TITLE: Installing Jekyll Dependencies with Bundler
DESCRIPTION: Bundler command to install Jekyll and other dependencies required to run the Accumulo website. This command should be run in the root directory of the website repository.

LANGUAGE: bash
CODE:
bundle install

----------------------------------------

TITLE: Accumulo Data Operations Example
DESCRIPTION: Example demonstrating table creation, data insertion, and scanning operations using Accumulo's Java API within JShell

LANGUAGE: java
CODE:
// Create a table called "GothamPD".
client.tableOperations().create("GothamPD");

// Create a Mutation object to hold all changes to a row in a table.
// Each row has a unique row ID.
Mutation mutation = new Mutation("id0001");

// Create key/value pairs for Batman. Put them in the "hero" family.
mutation.put("hero", "alias", "Batman");
mutation.put("hero", "name", "Bruce Wayne");
mutation.put("hero", "wearsCape?", "true");

// Create a BatchWriter to the GothamPD table and add your mutation to it.
// Try w/ resources will close for us.
try (BatchWriter writer = client.createBatchWriter("GothamPD")) {
    writer.addMutation(mutation);
}

// Read and print all rows of the "GothamPD" table.
// Try w/ resources will close for us.
try (ScannerBase scan = client.createScanner("GothamPD", Authorizations.EMPTY)) {
  System.out.println("Gotham Police Department Persons of Interest:");

  // A Scanner is an extension of java.lang.Iterable so behaves just like one.
  scan.forEach((k, v) -> System.out.printf("Key : %-50s Value : %s\n", k, v));
}

----------------------------------------

TITLE: Initializing PairLexicoder for String and Integer Encoding in Java
DESCRIPTION: Example of using the new Lexicoder API to encode pairs of String and Integer values for proper lexicographic sorting in Accumulo.

LANGUAGE: java
CODE:
PairLexicoder plex = new PairLexicoder(new StringLexicoder(), new IntegerLexicoder());
byte[] ba1 = plex.encode(new ComparablePair<String, Integer>("b",1));
byte[] ba2 = plex.encode(new ComparablePair<String, Integer>("aa",1));
byte[] ba3 = plex.encode(new ComparablePair<String, Integer>("a",2));
byte[] ba4 = plex.encode(new ComparablePair<String, Integer>("a",1));
byte[] ba5 = plex.encode(new ComparablePair<String, Integer>("aa",-3));

//sorting ba1,ba2,ba3,ba4, and ba5 lexicographically will result in the same order as sorting the ComparablePairs

----------------------------------------

TITLE: Initiating External Compaction in Accumulo
DESCRIPTION: Java script to create a table, ingest data, and trigger external compaction in Accumulo. It creates 20 files of 35MB each and initiates compaction.

LANGUAGE: java
CODE:
import org.apache.accumulo.core.conf.Property; 

int dataSize = 35_000_000; 
byte[] data = new byte[dataSize]; 
Arrays.fill(data, (byte) 65); 
String tableName = "testTable"; 

void ingestAndCompact() throws Exception {
   try { 
       client.tableOperations().delete(tableName); 
   } catch (TableNotFoundException e) { 
       // ignore 
   } 
   
   System.out.println("Creating table " + tableName); 
   client.tableOperations().create(tableName); 
   
   // This is done to avoid system compactions, we want to initiate the compactions manually 
   client.tableOperations().setProperty(tableName, Property.TABLE_MAJC_RATIO.getKey(), "1000"); 
   // Configure for external compaction 
   client.instanceOperations().setProperty("tserver.compaction.major.service.cs1.planner","org.apache.accumulo.core.spi.compaction.DefaultCompactionPlanner"); 
   client.instanceOperations().setProperty("tserver.compaction.major.service.cs1.planner.opts.executors","[{\"name\":\"large\",\"type\":\"external\",\"queue\":\"q1\"}]"); 
   
   client.tableOperations().setProperty(tableName, "table.compaction.dispatcher", "org.apache.accumulo.core.spi.compaction.SimpleCompactionDispatcher"); 
   client.tableOperations().setProperty(tableName, "table.compaction.dispatcher.opts.service", "cs1"); 
   
   int numFiles = 20; 
   
   try (var writer = client.createBatchWriter(tableName)) { 
       for (int i = 0; i < numFiles; i++) { 
           Mutation mut = new Mutation("r" + i); 
           mut.at().family("cf").qualifier("cq").put(data); 
           writer.addMutation(mut); 
           writer.flush();   
   
           System.out.println("Writing " + dataSize + " bytes to a single value"); 
           client.tableOperations().flush(tableName, null, null, true); 
       } 
   }   
   
   System.out.println("Compacting table"); 
   client.tableOperations().compact(tableName, new CompactionConfig().setWait(true)); 
   System.out.println("Finished table compaction");
} 

ingestAndCompact(); 
// Optionally sleep and ingestAndCompact() again, or just execute the script again.

----------------------------------------

TITLE: Configuring Visibility Constraints
DESCRIPTION: Shows how to configure visibility constraints to restrict users from inserting data they cannot read.

LANGUAGE: shell
CODE:
username@instance vistest> user root
Enter password for user root: ******
root@instance vistest> config -t vistest -s table.constraint.1=org.apache.accumulo.core.security.VisibilityConstraint
root@instance vistest> user username
Enter password for user username: ********
username@instance vistest> insert row f4 q4 v4 -l spinach
    Constraint Failures:
        ConstraintViolationSummary(constrainClass:org.apache.accumulo.core.security.VisibilityConstraint, violationCode:2, violationDescription:User does not have authorization on column visibility, numberOfViolatingMutations:1)
username@instance vistest> insert row f4 q4 v4 -l spinach|broccoli
username@instance vistest> scan
row f1:q1 [A]    v1
row f2:q2 [A&B]    v2
row f3:q3 [(apple&carrot)|broccoli|spinach]    v3
row f4:q4 [spinach|broccoli]    v4
username@instance vistest>

----------------------------------------

TITLE: Creating Accumulo User with Authorizations
DESCRIPTION: Creates a new user 'commissioner' with 'secretId' authorization and grants table read permission.

LANGUAGE: java
CODE:
client.securityOperations().createLocalUser("commissioner", new PasswordToken("gordonrocks"));
client.securityOperations().changeUserAuthorizations("commissioner", auths);
client.securityOperations().grantTablePermission("commissioner", "GothamPD", TablePermission.READ);

----------------------------------------

TITLE: Configuring MapReduce with Mock Accumulo
DESCRIPTION: Code demonstrating how to configure AccumuloInputFormat and AccumuloOutputFormat with Mock Accumulo for MapReduce jobs.

LANGUAGE: java
CODE:
// ... set up job configuration
AccumuloInputFormat.setMockInstance(job, "mockInstance");
AccumuloOutputFormat.setMockInstance(job, "mockInstance");

----------------------------------------

TITLE: Installing Bundler with Ruby Gem
DESCRIPTION: Ruby gem command to install Bundler, a dependency management tool for Ruby projects. This step is not necessary for Ruby versions 2.6 and later, as Bundler is included as a default gem.

LANGUAGE: bash
CODE:
# not necessary in Ruby >2.6, since it is a default gem since 2.6
gem install bundler

----------------------------------------

TITLE: Implementing Mapper for Accumulo Input in Java
DESCRIPTION: Demonstrates how to create a Mapper class to read from an Accumulo table using AccumuloInputFormat. The Mapper processes Key-Value pairs from Accumulo and transforms them into WritableComparable-Writable pairs.

LANGUAGE: java
CODE:
class MyMapper extends Mapper<Key,Value,WritableComparable,Writable> {
    public void map(Key k, Value v, Context c) {
        // transform key and value data here
    }
}

----------------------------------------

TITLE: Creating Secure Mutations with Column Visibility in Java
DESCRIPTION: Demonstrates how to create a mutation with a security label using ColumnVisibility. Shows the basic structure for adding security labels to key-value pairs in Accumulo.

LANGUAGE: java
CODE:
Text rowID = new Text("row1");
Text colFam = new Text("myColFam");
Text colQual = new Text("myColQual");
ColumnVisibility colVis = new ColumnVisibility("public");
long timestamp = System.currentTimeMillis();

Value value = new Value("myValue");

Mutation mutation = new Mutation(rowID);
mutation.put(colFam, colQual, colVis, timestamp, value);

----------------------------------------

TITLE: Starting Compaction Coordinator
DESCRIPTION: Command to start the Compaction Coordinator process.

LANGUAGE: shell
CODE:
bin/accumulo compaction-coordinator

----------------------------------------

TITLE: Downloading Jaeger Docker Image
DESCRIPTION: Command to pull the Jaeger all-in-one Docker image for tracing.

LANGUAGE: bash
CODE:
docker pull jaegertracing/all-in-one:1.35

----------------------------------------

TITLE: Initializing Accumulo Instance and Connector in Java
DESCRIPTION: This snippet demonstrates how to initialize an Accumulo instance and create a Connector object for client operations. It requires the instance name and ZooKeeper server addresses.

LANGUAGE: Java
CODE:
String instanceName = "myinstance";
String zooServers = "zooserver-one,zooserver-two"
Instance inst = new ZooKeeperInstance(instanceName, zooServers);

Connector conn = new Connector(inst, "user","passwd".getBytes());

----------------------------------------

TITLE: Initializing Accumulo Instance and Connector in Java
DESCRIPTION: This snippet demonstrates how to initialize an Accumulo instance and create a Connector object for client operations. It requires the instance name and ZooKeeper server addresses.

LANGUAGE: Java
CODE:
String instanceName = "myinstance";
String zooServers = "zooserver-one,zooserver-two"
Instance inst = new ZooKeeperInstance(instanceName, zooServers);

Connector conn = new Connector(inst, "user","passwd".getBytes());

----------------------------------------

TITLE: Creating Secure Mutations with Column Visibility in Java
DESCRIPTION: Demonstrates how to create a mutation with a security label using ColumnVisibility. Shows the basic structure for adding security labels to key-value pairs in Accumulo.

LANGUAGE: java
CODE:
Text rowID = new Text("row1");
Text colFam = new Text("myColFam");
Text colQual = new Text("myColQual");
ColumnVisibility colVis = new ColumnVisibility("public");
long timestamp = System.currentTimeMillis();

Value value = new Value("myValue");

Mutation mutation = new Mutation(rowID);
mutation.put(colFam, colQual, colVis, timestamp, value);

----------------------------------------

TITLE: Configuring Accumulo Properties for Tracing
DESCRIPTION: Property to add to accumulo.properties and accumulo-client.properties files to enable OpenTelemetry tracing.

LANGUAGE: properties
CODE:
# OpenTelemetry settings
general.opentelemetry.enabled=true

----------------------------------------

TITLE: Cleaning Git Working Directory in Accumulo Project
DESCRIPTION: This series of Git commands demonstrates how to clean the working directory when switching between major development branches in Accumulo. It helps resolve issues with the RAT plugin caused by leftover build files.

LANGUAGE: bash
CODE:
git add path/to/file/that/has/changed
git add path/to/other/file
git clean -df

----------------------------------------

TITLE: Data Manipulation Commands
DESCRIPTION: Commands for inserting, scanning, and manipulating data within Accumulo tables

LANGUAGE: shell
CODE:
insert <row> <colfamily> <colqualifier> <value> [-?] [-l <expression>] [-t <timestamp>]
scan [-?] [-b <start-row>] [-c <<columnfamily>[:<columnqualifier>]>] [-e <end-row>]
delete <row> <colfamily> <colqualifier> [-?] [-l <expression>] [-t <timestamp>]

----------------------------------------

TITLE: Assigning Compaction Service to Table
DESCRIPTION: Shell commands to assign compaction service cs1 to a table named ci using SimpleCompactionDispatcher.

LANGUAGE: shell
CODE:
config -t ci -s table.compaction.dispatcher=org.apache.accumulo.core.spi.compaction.SimpleCompactionDispatcher
config -t ci -s table.compaction.dispatcher.opts.service=cs1

----------------------------------------

TITLE: Downloading Telegraf Configuration and Grafana Dashboard
DESCRIPTION: Commands to download and configure Telegraf and Grafana dashboard files.

LANGUAGE: bash
CODE:
cd /tmp/metrics/telegraf/conf
wget https://raw.githubusercontent.com/apache/accumulo-testing/main/contrib/terraform-testing-infrastructure/modules/config-files/templates/telegraf.conf.tftpl
cat telegraf.conf.tftpl | sed "s/\${manager_ip}/localhost/" > telegraf.conf
cd /tmp/metrics/grafana-dashboards
wget https://raw.githubusercontent.com/apache/accumulo-testing/main/contrib/terraform-testing-infrastructure/modules/config-files/files/grafana_dashboards/accumulo-dashboard.json
wget https://raw.githubusercontent.com/apache/accumulo-testing/main/contrib/terraform-testing-infrastructure/modules/config-files/files/grafana_dashboards/accumulo-dashboard.yaml

----------------------------------------

TITLE: Executing Scans with Execution Hints in Accumulo
DESCRIPTION: Commands to start scans with specific execution hints, demonstrating how to use different executors and priorities based on the configured system.

LANGUAGE: shell
CODE:
scan -t tex --execution-hints scan_type=gamma

LANGUAGE: shell
CODE:
scan -t tex --execution-hints scan_type=alpha

----------------------------------------

TITLE: Initializing Standard Accumulo Client Connection
DESCRIPTION: Standard code for establishing a connection to a regular Accumulo instance using ZooKeeper.

LANGUAGE: java
CODE:
Instance instance = new ZooKeeperInstance(...);
Connector conn = instance.getConnector(user, passwd);

----------------------------------------

TITLE: Starting TIG Docker Container
DESCRIPTION: Docker command to start the Telegraf-InfluxDB-Grafana stack container.

LANGUAGE: bash
CODE:
docker run --ulimit nofile=66000:66000 -d --rm \
    --name tig-stack \
    -p 3003:3003 \
    -p 3004:8888 \
    -p 8086:8086 \
    -p 22022:22 \
    -p 8125:8125/udp \
    -v /tmp/metrics/influxdb:/var/lib/influxdb \
    -v /tmp/metrics/grafana:/var/lib/grafana \
    -v /tmp/metrics/telegraf/conf:/etc/telegraf \
    -v /tmp/metrics/grafana-dashboards:/etc/grafana/provisioning/dashboards \
    artlov/docker-telegraf-influxdb-grafana:latest

----------------------------------------

TITLE: Running Integration Tests
DESCRIPTION: Executes Maven integration tests using the temporary settings file and specified release version.

LANGUAGE: shell
CODE:
$ mvn -s /tmp/accumulo-rc-maven.xml clean verify -Daccumulo.version=$RC_VERSION

----------------------------------------

TITLE: Setting User Authorization in Accumulo Shell
DESCRIPTION: This command sets the 'exampleVis' authorization for a user in Accumulo shell. It's a prerequisite for running the batch writing and scanning example.

LANGUAGE: shell
CODE:
$ ./bin/accumulo shell -u root -e "setauths -u username -s exampleVis"

----------------------------------------

TITLE: Starting JShell Accumulo
DESCRIPTION: Commands to start JShell with default or custom scripts in Accumulo's installation directory

LANGUAGE: bash
CODE:
$ bin/accumulo jshell

LANGUAGE: bash
CODE:
$ bin/accumulo jshell --startup file/path/to/custom_script.jsh

----------------------------------------

TITLE: Configuring Grafana to Load Dashboard Templates
DESCRIPTION: Grafana configuration snippet to enable loading of dashboard JSON templates from a specified directory. Requires setting the correct path for <GRAFANA_HOME>.

LANGUAGE: properties
CODE:
[dashboards.json]
enabled = true
path = <GRAFANA_HOME>/dashboards

----------------------------------------

TITLE: Using BatchScanner for Efficient Multi-Range Queries in Accumulo with Java
DESCRIPTION: This snippet shows how to use a BatchScanner for efficient retrieval of multiple non-consecutive ranges simultaneously in Accumulo. It includes setting up the BatchScanner, specifying multiple ranges, and iterating over the results.

LANGUAGE: Java
CODE:
ArrayList<Range> ranges = new ArrayList<Range>();
// populate list of ranges ...

BatchScanner bscan =
    conn.createBatchScanner("table", auths, 10);

bscan.setRanges(ranges);
bscan.fetchFamily("attributes");

for(Entry<Key,Value> entry : scan)
    System.out.println(e.getValue());

----------------------------------------

TITLE: Creating New Accumulo User
DESCRIPTION: Demonstrates creating a new user in Accumulo and shows the default permissions. The example illustrates that new users don't have table creation permissions by default.

LANGUAGE: shell
CODE:
root@instance> createuser username
Enter new password for 'username': ********
Please confirm new password for 'username': ********
root@instance> user username
Enter password for user username: ********
username@instance> createtable vistest
username@instance> userpermissions

----------------------------------------

TITLE: Configuring Major Compaction Service
DESCRIPTION: Configuration for defining a compaction service named cs1 using DefaultCompactionPlanner with three thread pools (small, medium, large) and size thresholds.

LANGUAGE: yaml
CODE:
tserver.compaction.major.service.cs1.planner=org.apache.accumulo.core.spi.compaction.DefaultCompactionPlanner
tserver.compaction.major.service.cs1.planner.opts.executors=[
{"name":"small","type":"internal","maxSize":"16M","numThreads":8},
{"name":"medium","type":"internal","maxSize":"128M","numThreads":4},
{"name":"large","type":"internal","numThreads":2}]

----------------------------------------

TITLE: Batch Writing Villain Data
DESCRIPTION: Generates and writes 10,000 rows of villain data using BatchWriter. Each row contains villain information including alias, years of service, and cape status.

LANGUAGE: java
CODE:
try (BatchWriter writer = client.createBatchWriter("GothamBatch")) {
  for (int i = 0; i < 10_000; i++) {
    Mutation m = new Mutation(String.format("id%04d", i));
    m.put("villain", "alias", "henchman" + i);
    m.put("villain", "yearsOfService", "" + (new Random().nextInt(50)));
    m.put("villain", "wearsCape?", "false");
   writer.addMutation(m);
  }
}

----------------------------------------

TITLE: Initializing Accumulo
DESCRIPTION: This command initializes Accumulo as the 'accumulo' user, which is necessary because Accumulo services run under this user account.

LANGUAGE: bash
CODE:
sudo -u accumulo accumulo init

----------------------------------------

TITLE: Setting Up Accumulo with Uno
DESCRIPTION: Command to set up Accumulo using Uno, which will also start the Accumulo Proxy.

LANGUAGE: bash
CODE:
uno setup accumulo

----------------------------------------

TITLE: Configuring InfluxDB for Accumulo Metrics
DESCRIPTION: InfluxDB configuration snippet for accepting metrics in Graphite format from Accumulo. It includes templates to transform Graphite metrics into a usable format for InfluxDB.

LANGUAGE: properties
CODE:
[[graphite]]
  bind-address = ":2003"
  enabled = true
  database = "accumulo_metrics"
  protocol = "tcp"
  consistency-level = "one"
  separator = "_"
  batch-size = 1000
  batch-pending = 5
  batch-timeout = "1s"
  templates = [
    "accumulo.*.*.*.*.*.*.* measurement.measurement.measurement.d.e.f.host.measurement",
    "accumulo.*.*.*.*.*.* measurement.measurement.measurement.d.e.host.measurement",
    "accumulo.*.*.*.*.* measurement.measurement.measurement.d.host.measurement",
  ]

----------------------------------------

TITLE: Indexing Java Files into Accumulo Shard
DESCRIPTION: Command to index all Java source files from the Accumulo codebase into the shard table using the Index program.

LANGUAGE: bash
CODE:
$ cd /local/username/workspace/accumulo/
$ find src -name "*.java" | xargs ./bin/accumulo org.apache.accumulo.examples.simple.shard.Index instance zookeepers shard username password 30

----------------------------------------

TITLE: Initializing Accumulo Table with Sample Data
DESCRIPTION: This snippet demonstrates how to create a table named 'input' and insert sample data using the Accumulo shell.

LANGUAGE: shell
CODE:
$ ./bin/accumulo shell -u username -p password
Shell - Apache Accumulo Interactive Shell
- version: 1.5.0
- instance name: instance
- instance id: 00000000-0000-0000-0000-000000000000
- 
- type 'help' for a list of available commands
- 
username@instance> createtable input
username@instance> insert a-row cf cq value
username@instance> insert b-row cf cq value
username@instance> quit

----------------------------------------

TITLE: Creating Keys and Mutations with New Fluent API in Java
DESCRIPTION: Shows examples of using the new fluent APIs for creating Keys and Mutations in Accumulo 2.0. It demonstrates how to create a Key using a builder pattern and how to create a Mutation with mixed String and byte[] types.

LANGUAGE: java
CODE:
Key newKey = Key.builder().row("foo").family("bar").build();

Mutation m = new Mutation("row0017");
m.at().family("001").qualifier(new byte[] {0,1}).put("v99");
m.at().family("002").qualifier(new byte[] {0,1}).delete();

----------------------------------------

TITLE: Creating Accumulo Table
DESCRIPTION: Creates a new table named 'GothamBatch' in Accumulo using the client's table operations.

LANGUAGE: java
CODE:
client.tableOperations().create("GothamBatch");

----------------------------------------

TITLE: Configuring Scan Prioritizer in Accumulo
DESCRIPTION: Command to set up the IdleRatioScanPrioritizer for the default scan executor. This prioritizer orders the queue based on the ratio of run time to idle time.

LANGUAGE: shell
CODE:
tserver.scan.executors.default.prioritizer=org.apache.accumulo.core.spi.scan.IdleRatioScanPrioritizer

----------------------------------------

TITLE: Defining Checkstyle Rules for Accumulo API Validation
DESCRIPTION: This XML configuration sets up Checkstyle rules to enforce proper Accumulo API usage. It configures the TreeWalker module with the ImportControl check, referencing an external import control configuration file.

LANGUAGE: xml
CODE:
<!DOCTYPE module PUBLIC "-//Puppy Crawl//DTD Check Configuration 1.3//EN" "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">
<module name="Checker">
  <property name="charset" value="UTF-8"/>
  <module name="TreeWalker">
    <!--check that only Accumulo public APIs are imported-->
    <module name="ImportControl">
      <property name="file" value="import-control.xml"/>
    </module>
  </module>
</module>

----------------------------------------

TITLE: Merging Metadata Table Splits in Accumulo Shell
DESCRIPTION: Example of merging away old splits in the metadata table after upgrading to Accumulo 2.1.0.

LANGUAGE: shell
CODE:
root@uno> getsplits -t accumulo.metadata
2<
~
~del55
~dela7
~delhdfs://localhost:8020/accumulo/tables/2/default_tablet/F00000a0.rf
~delhdfs://localhost:8020/accumulo/tables/2/default_tablet/F00000kb.rf
root@uno> merge -t accumulo.metadata -b ~delhdfs -e ~delhdfs~
root@uno> getsplits -t accumulo.metadata
2<
~
~del55
~dela7

----------------------------------------

TITLE: Connecting to Accumulo Using New Fluent API in Java
DESCRIPTION: Demonstrates the new simplified way to connect to Accumulo using a fluent API. It shows how to create an AccumuloClient with minimal code and imports, and includes an example of creating a new table.

LANGUAGE: java
CODE:
import org.apache.accumulo.core.client.Accumulo;
import org.apache.accumulo.core.client.AccumuloClient;

try (AccumuloClient client = Accumulo.newClient()
          .to("instance", "zk")
          .as("user", "pass").build()) {
      // use the client
      client.tableOperations().create("newTable");
    }

----------------------------------------

TITLE: ZooKeeper Content Dump
DESCRIPTION: Commands to view and backup ZooKeeper contents using the dump-zoo utility, with options to output as XML.

LANGUAGE: bash
CODE:
$ accumulo-util dump-zoo --xml --root /accumulo >dump.xml

----------------------------------------

TITLE: Initializing Apache Accumulo
DESCRIPTION: Command to initialize Accumulo instance and set root user password.

LANGUAGE: bash
CODE:
accumulo init

----------------------------------------

TITLE: Setting Address in Accumulo using Java BatchWriter
DESCRIPTION: This method sets an address in Accumulo using a BatchWriter. It creates a mutation and adds it to the writer.

LANGUAGE: java
CODE:
boolean setAddress(AccumuloClient client, String id, String expectedAddr, String newAddr) {
  try (BatchWriter writer = client.createBatchWriter("GothamPD")) {
    Mutation mutation = new Mutation(id);
    mutation.put("location", "home", newAddr);
    writer.addMutation(mutation);
    return true;
  } catch (Exception e) {
    throw new RuntimeException(e);
  }
}

----------------------------------------

TITLE: Configuring Custom Table Tags in Accumulo
DESCRIPTION: Example of setting custom table tags in Accumulo using properties with a specific prefix.

LANGUAGE: properties
CODE:
table.custom.* = <custom_value>

----------------------------------------

TITLE: Configuring Hadoop Environment for ADLS Gen2
DESCRIPTION: Bash environment variables setup for enabling Hadoop Azure support and OpenSSL implementation of TLS.

LANGUAGE: bash
CODE:
export HADOOP_OPTIONAL_TOOLS="hadoop-azure"
export HADOOP_OPTS="-Dorg.wildfly.openssl.path=<path/to/OpenSSL/libraries> ${HADOOP_OPTS}"

----------------------------------------

TITLE: Reading Old DateLexicoder Data in Java
DESCRIPTION: Code snippet demonstrating how to read data stored using the broken DateLexicoder implementation prior to the fix in ACCUMULO-3385.

LANGUAGE: java
CODE:
Lexicoder lex = new ULongLexicoder();
for (Entry<Key, Value> e : scanner) {
  Date d = new Date(lex.decode(TextUtil.getBytes(e.getKey().getRow())));
  // ...
}

----------------------------------------

TITLE: Updating KEYS File in SVN Repository
DESCRIPTION: This snippet demonstrates how to clone the SVN repository, update the KEYS file, and commit changes using git-svn.

LANGUAGE: bash
CODE:
# install git-svn
sudo yum install -y git-svn
# clone the SVN repo into the directory accumulo-dist-gitsvn
git svn clone https://dist.apache.org/repos/dist/release/accumulo accumulo-dist-gitsvn
cd accumulo-dist-gitsvn
# make changes to KEYS file, then commit the changes locally
git add KEYS
git commit
# push the changes to the remote SVN repo
git svn dcommit --username=<ASF_Username>

----------------------------------------

TITLE: Scanning Accumulo Table with Empty Authorizations
DESCRIPTION: Scans the 'GothamPD' table with empty authorizations, which will not show protected columns.

LANGUAGE: java
CODE:
try (ScannerBase scan = client.createScanner("GothamPD", Authorizations.EMPTY)) {
  System.out.println("Gotham Police Department Persons of Interest:");
    for (Map.Entry<Key, Value> entry : scan) {
    System.out.printf("Key : %-50s  Value : %s\n", entry.getKey(), entry.getValue());
  }
}

----------------------------------------

TITLE: Initializing Accumulo Environment for Authorization Example
DESCRIPTION: Deletes existing table and user to start with a clean slate for the authorization example.

LANGUAGE: java
CODE:
client.tableOperations().delete("GothamPD");
client.securityOperations().dropLocalUser("commissioner");

----------------------------------------

TITLE: Setting User Authorizations in Accumulo
DESCRIPTION: This snippet demonstrates how to set authorizations for a user, which requires the System.ALTER_USER permission, typically held by the root user.

LANGUAGE: shell
CODE:
username@instance vistest> setauths -s A
06 11:53:42,056 [shell.Shell] ERROR: org.apache.accumulo.core.client.AccumuloSecurityException: Error PERMISSION_DENIED - User does not have permission to perform this action
username@instance vistest> 

username@instance vistest> user root
Enter password for user root: ********
root@instance vistest> setauths -s A -u username
root@instance vistest> user username
Enter password for user username: ********
username@instance vistest> scan -s A
row f1:q1 [A]    v1
username@instance vistest> scan
row f1:q1 [A]    v1
username@instance vistest> 

----------------------------------------

TITLE: Deploying Accumulo Cluster with Muchos
DESCRIPTION: Commands to launch and set up an Accumulo cluster on AWS using Muchos

LANGUAGE: bash
CODE:
muchos launch -c mycluster\nmuchos setup

----------------------------------------

TITLE: Importing RFiles into Accumulo Table
DESCRIPTION: This Accumulo shell command imports RFiles from a directory into a table, used when recovering data after a Zookeeper quorum loss.

LANGUAGE: shell
CODE:
user@instance new_table> importdirectory /new-table-1 /new-table-1-failures false

----------------------------------------

TITLE: Markdown Content for Contributing to Accumulo Website
DESCRIPTION: This markdown snippet outlines the process for contributing to the Accumulo website. It includes instructions for creating pull requests, testing changes locally, and links to additional resources.

LANGUAGE: markdown
CODE:
# Contributing to the Accumulo Website

Contributions to the website can be made by creating pull requests to this repo on GitHub.

Before creating a pull request, follow the instructions in the [README.md] to test
your changes by running the website locally.

If you cannot run the website locally, it's OK to submit your pull request. A committer
will test your changes before merging.

For general information on contributing to Accumulo projects, check out the
[How To Contribute][contribute] page.

[README.md]: README.md
[contribute]: /how-to-contribute/

----------------------------------------

TITLE: Scanning Accumulo Table with Unauthorized User
DESCRIPTION: Attempts to scan the 'GothamPD' table with 'secretId' authorization, which fails due to lack of user permissions.

LANGUAGE: java
CODE:
try (ScannerBase scan = client.createScanner("GothamPD", auths)) {
   System.out.println("Gotham Police Department Persons of Interest:");
     for (Map.Entry<Key, Value> entry : scan)
       System.out.printf("Key : %-50s  Value : %s\n", entry.getKey(), entry.getValue());
     }

----------------------------------------

TITLE: Creating Git Tag for Release
DESCRIPTION: This snippet shows the command to create a signed Git tag for the final release commit.

LANGUAGE: bash
CODE:
git tag -f -m 'Apache Accumulo 1.10.0' -s rel/1.10.0 4d261254

----------------------------------------

TITLE: Creating Accumulo Table in Java
DESCRIPTION: Creates a new table named 'GothamPD' in Accumulo using the tableOperations() method.

LANGUAGE: java
CODE:
client.tableOperations().create("GothamPD");

----------------------------------------

TITLE: Creating Token File for Authentication
DESCRIPTION: This snippet shows how to create a token file for authentication in MapReduce jobs, which avoids exposing passwords in job configurations.

LANGUAGE: shell
CODE:
$ ./bin/accumulo create-token
$ ./bin/accumulo create-token -u root -p secret -f root.pw

----------------------------------------

TITLE: Installing Muchos for Cluster Deployment
DESCRIPTION: Commands to clone and initialize Muchos for cluster deployment

LANGUAGE: bash
CODE:
git clone https://github.com/apache/fluo-muchos.git\ncd fluo-muchos

----------------------------------------

TITLE: Checking Offline Tablets in Accumulo
DESCRIPTION: This command uses the Accumulo CLI to check for any tablets that are offline in the cluster.

LANGUAGE: shell
CODE:
$ accumulo admin checkTablets

----------------------------------------

TITLE: Generating Test Data with BatchWriter in Accumulo
DESCRIPTION: Creates a sample dataset of 10,000 villain records in the GothamPD table using Accumulo's BatchWriter. Each record contains an ID, alias, years of service, and cape status.

LANGUAGE: java
CODE:
try (BatchWriter writer = client.createBatchWriter("GothamPD")) {
  for (int i = 0; i < 10_000; i++) {
    Mutation m = new Mutation(String.format("id%04d", i));
    m.put("villain", "alias", "henchman" + i);
    m.put("villain", "yearsOfService", "" + (new Random().nextInt(50)));
    m.put("villain", "wearsCape?", "false");
    writer.addMutation(m);
  }
}

----------------------------------------

TITLE: Scanning Accumulo Table for Ingested File Data
DESCRIPTION: This Accumulo shell command scans the 'dataTable' to view the ingested file data. The row key is the MD5 hash of the file.

LANGUAGE: shell
CODE:
> scan -t dataTable

----------------------------------------

TITLE: Building Accumulo Package with Maven
DESCRIPTION: This command builds Accumulo from source, creating a deployable package. It uses Maven to compile the code, run tests, and package the results into a tarball.

LANGUAGE: bash
CODE:
mvn package

----------------------------------------

TITLE: Defining Status Indicators for Accumulo Releases
DESCRIPTION: This snippet defines variables for different status indicators used in the release list, including archived, draft, LTM (Long Term Maintenance), and non-LTM badges.

LANGUAGE: liquid
CODE:
{% assign archived_btn = '<a href="https://archive.apache.org/dist/accumulo/"><span class="badge bg-secondary">Archive</span></a>' %}
{% assign draft_btn = '<span class="badge bg-danger">&nbsp;DRAFT!&nbsp;</span>' %}
{% assign ltm_btn = '<a href="' | append: site.baseurl | append: '/contributor/versioning#LTM"><span class="badge bg-success">&nbsp;&nbsp;LTM&nbsp;&nbsp;</span></a>' %}
{% assign nonltm_btn = '<a href="' | append: site.baseurl | append: '/contributor/versioning#LTM"><span class="badge bg-warning">non-LTM</span></a>' %}

----------------------------------------

TITLE: Setting Custom Iterator from External Jar in Apache Accumulo
DESCRIPTION: This command sets up an iterator named 'foofilter' using the FooFilter class from the external jar. It applies the filter to scan, minor compaction, and major compaction operations.

LANGUAGE: shell
CODE:
root@test15 nofoo> setiter -n foofilter -p 10 -scan -minc -majc -class org.apache.accumulo.test.FooFilter
Filter accepts or rejects each Key/Value pair
----------> set FooFilter parameter negate, default false keeps k/v that pass accept method, true rejects k/v that pass accept method: false

----------------------------------------

TITLE: Setting Up SSH Tunnel for Monitor Pages
DESCRIPTION: This command sets up an SSH tunnel to view the Hadoop and Accumulo monitor pages when running in a cloud environment like EC2.

LANGUAGE: bash
CODE:
ssh -L50070:localhost:50070 -L50095:localhost:50095 <user>@<host>

----------------------------------------

TITLE: Table Maintenance Operations
DESCRIPTION: Demonstrates maintenance operations including compacting and flushing tables.

LANGUAGE: console
CODE:
root@myinstance mytable> compact -t mytable
07 16:13:53,201 [shell.Shell] INFO : Compaction of table mytable started for given range

root@myinstance mytable> flush -t mytable
07 16:14:19,351 [shell.Shell] INFO : Flush of table mytable initiated...

----------------------------------------

TITLE: Inserting Data into Accumulo Table using Java
DESCRIPTION: Demonstrates how to insert data into an Accumulo table using a Mutation object. The code uses the userid as the row ID and stores other attributes as column families.

LANGUAGE: java
CODE:
Mutation m = new Mutation(new Text(userid));
m.put(new Text("age"), age);
m.put(new Text("address"), address);
m.put(new Text("balance"), account_balance);

writer.add(m);

----------------------------------------

TITLE: Initializing Data in Accumulo Shell
DESCRIPTION: Commands to create a table and insert sample data using the Accumulo shell interface. Creates 'input' table and inserts two records with dog and cat related data.

LANGUAGE: shell
CODE:
$ ./bin/accumulo shell -u username -p password
Shell - Apache Accumulo Interactive Shell
- version: 1.5.0
- instance name: instance
- instance id: 00000000-0000-0000-0000-000000000000
- 
- type 'help' for a list of available commands
- 
username@instance> createtable input
username@instance> insert dogrow dogcf dogcq dogvalue
username@instance> insert catrow catcf catcq catvalue
username@instance> quit

----------------------------------------

TITLE: Updating Download Links with JavaScript
DESCRIPTION: This JavaScript function updates the href attributes of download links based on the selected Apache mirror. It's used to dynamically change download URLs when a user selects a different mirror.

LANGUAGE: javascript
CODE:
var updateLinks = function(mirror) {
  $('a[link-suffix]').each(function(i, obj) {
    $(obj).attr('href', mirror.replace(/\/+$/, "") + $(obj).attr('link-suffix'));
  });
};

----------------------------------------

TITLE: Converting Apache IDs to Profile Links with jQuery
DESCRIPTION: This JavaScript snippet uses jQuery to convert Apache IDs for committers into links to their Apache profiles on people.apache.org. It targets the first cell of each row in the committers table body.

LANGUAGE: JavaScript
CODE:
$(function() {
  $('table.committers tbody tr td:first-child').each(function(i, obj) {
    var apacheid = $(obj).text();
    $(obj).html('<a href="https://people.apache.org/phonebook.html?uid=' + apacheid + '">' + apacheid + '</a>');
  });
});

----------------------------------------

TITLE: Configuring Accumulo Properties for S3 and HDFS
DESCRIPTION: INI-style configuration for accumulo.properties to set up Accumulo with S3 and HDFS volumes, using PreferredVolumeChooser for volume selection.

LANGUAGE: ini
CODE:
instance.volumes=hdfs://<name node>/accumulo,s3a://<bucket>/accumulo
general.volume.chooser=org.apache.accumulo.server.fs.PreferredVolumeChooser
general.custom.volume.preferred.default=s3a://<bucket>/accumulo
general.custom.volume.preferred.logger=hdfs://<namenode>/accumulo

----------------------------------------

TITLE: Starting and Enabling ZooKeeper Service
DESCRIPTION: These commands start the ZooKeeper service and enable it to run on system reboot.

LANGUAGE: bash
CODE:
sudo systemctl start zookeeper.service
sudo systemctl enable zookeeper.service

----------------------------------------

TITLE: Starting Accumulo Shell
DESCRIPTION: Command to launch the Accumulo interactive shell with a specified username. The shell will prompt for authentication and display version and instance information.

LANGUAGE: console
CODE:
accumulo shell -u [username]

----------------------------------------

TITLE: Changing User Passwords with Java API
DESCRIPTION: This code snippet shows how to change the password for a local user named 'bob' using the SecurityOperations interface in the Java API.

LANGUAGE: java
CODE:
client.securityOperations().changeLocalUserPassword("bob", new PasswordToken("pass"));

----------------------------------------

TITLE: Creating and Configuring Table with Custom Classpath
DESCRIPTION: Creates a new table and configures it to use the custom classpath context.

LANGUAGE: shell
CODE:
createtable nofoo

LANGUAGE: shell
CODE:
config -t nofoo -s table.classpath.context=cx1

----------------------------------------

TITLE: Including JavaScript Libraries for Search Functionality
DESCRIPTION: This snippet includes necessary JavaScript files for implementing the search functionality. It links to the Lunr.js library and a custom search.js file.

LANGUAGE: HTML
CODE:
<script src="/js/lunr/2.3.9/lunr.min.js"></script>
<script src="/js/search.js"></script>

----------------------------------------

TITLE: Regex Pattern for Non-API Imports (Accumulo 2.0+)
DESCRIPTION: Simplified regular expression pattern for matching non-API imports in Accumulo 2.0 and later versions. Includes support for the new MapReduce module and reflects relocated sub-packages.

LANGUAGE: regex
CODE:
import\s+org\.apache\.accumulo\.(?!(core\.(client|data|iterators|security)|minicluster|hadoop)\.).*

----------------------------------------

TITLE: Inserting and Scanning Data with StatsCombiner in Apache Accumulo
DESCRIPTION: This snippet shows how to insert data into the 'runners' table and scan it to observe the effects of the StatsCombiner on both decimal and hexadecimal values.

LANGUAGE: shell
CODE:
username@instance runners> insert 123456 name first Joe
username@instance runners> insert 123456 stat marathon 240
username@instance runners> scan
123456 name:first []    Joe
123456 stat:marathon []    240,240,240,1
username@instance runners> insert 123456 stat marathon 230
username@instance runners> insert 123456 stat marathon 220
username@instance runners> scan
123456 name:first []    Joe
123456 stat:marathon []    220,240,690,3
username@instance runners> insert 123456 hstat virtualMarathon 6a
username@instance runners> insert 123456 hstat virtualMarathon 6b
username@instance runners> scan
123456 hstat:virtualMarathon []    6a,6b,d5,2
123456 name:first []    Joe
123456 stat:marathon []    220,240,690,3

----------------------------------------

TITLE: Accumulo Service and Cluster Command Usage
DESCRIPTION: Shows the usage information for the new accumulo-service and accumulo-cluster commands.

LANGUAGE: bash
CODE:
$ ./accumulo-2.0.0/bin/accumulo-service

Usage: accumulo-service <service> <command>

Services:
  gc          Accumulo garbage collector
  monitor     Accumulo monitor
  master      Accumulo master
  tserver     Accumulo tserver
  tracer      Accumulo tracer

Commands:
  start       Starts service
  stop        Stops service
  kill        Kills service

$ ./accumulo-2.0.0/bin/accumulo-cluster

Usage: accumulo-cluster <command> (<argument> ...)

Commands:
  create-config       Creates cluster config
  start               Starts Accumulo cluster
  stop                Stops Accumulo cluster
  start-non-tservers  Starts all services except tservers
  start-tservers      Starts all tservers on cluster
  stop-tservers       Stops all tservers on cluster
  start-here          Starts all services on this node
  stop-here           Stops all services on this node

----------------------------------------

TITLE: BatchScanner Index Lookup
DESCRIPTION: Demonstrates using BatchScanner to efficiently look up multiple rows from an index table.

LANGUAGE: java
CODE:
HashSet<Range> matchingRows = new HashSet<Range>();

// first we scan the index for IDs of rows matching our query
try (Scanner indexScanner = client.createScanner("index", auths)) {
  indexScanner.setRange(Range.exact("mySearchTerm");

  // we retrieve the matching rowIDs and create a set of ranges
  for (Entry<Key,Value> entry : indexScanner) {
    matchingRows.add(new Range(entry.getKey().getColumnQualifier()));
  }
}

// now we pass the set of rowIDs to the batch scanner to retrieve them
try (BatchScanner bscan = client.createBatchScanner("table", auths, 10)) {
  bscan.setRanges(matchingRows);
  bscan.fetchColumnFamily("attributes");

  for (Entry<Key,Value> entry : bscan) {
    System.out.println(entry.getValue());
  }
}

----------------------------------------

TITLE: Writing Labeled Data in Accumulo using Java
DESCRIPTION: Demonstrates how to write data with security labels to Accumulo using a BatchWriter. The example shows setting different visibility levels for salary and pay period information.

LANGUAGE: java
CODE:
try (BatchWriter writer = client.createBatchWriter("employees")) {
  Mutation mut = new Mutation("employee1");
  mut.at().family("pay").qualifier("salary").visibility("payroll").value("50000");
  mut.at().family("pay").qualifier("period").visibility("public").value("monthly");
  writer.addMutation(mut)
}

----------------------------------------

TITLE: Generating News Archive with Jekyll and Liquid
DESCRIPTION: This snippet uses Jekyll and Liquid templating to create a news archive page. It filters visible posts, groups them by year, and displays them with year headers and post details.

LANGUAGE: liquid
CODE:
{% assign visible_posts = site.posts | where:"draft",false %}
{% assign header_year = visible_posts[0].date | date: "%Y" %}
<h3>{{header_year}}</h3>
{% for post in visible_posts %}
  {% assign post_year = post.date | date: "%Y" %}
  {% if post_year != header_year %}
    {% assign header_year = post_year %}
    <hr>
    <h3>{{ header_year }}</h3>
  {% endif %}
  <div class="row" style="margin-top: 15px">
    <div class="col-md-1">{{ post.date | date: "%b %d" }}</div>
    <div class="col-md-10"><a href="{{ site.baseurl }}{{ post.url }}">{{ post.title }}</a></div>
  </div>
{% endfor %}

----------------------------------------

TITLE: Configuring YAML Front Matter for Redirect in Jekyll
DESCRIPTION: This YAML front matter block sets up a page redirect using Jekyll. It specifies the title of the page and the destination URL for the redirect.

LANGUAGE: yaml
CODE:
---
title: Latest User Manual
redirect_to: /docs/2.x/
---

----------------------------------------

TITLE: Running Accumulo Shell
DESCRIPTION: This command starts the Accumulo shell, connecting to the specified ZooKeeper host and Accumulo instance with the root user credentials.

LANGUAGE: bash
CODE:
accumulo shell -u root -zh <zk-dns-name>:2181 -zi <instanceName>

----------------------------------------

TITLE: Setting Global Flush Configuration Commands
DESCRIPTION: Shell commands to configure all Accumulo tables to use 'flush' durability setting by updating system defaults and removing table-specific overrides.

LANGUAGE: shell
CODE:
config -s table.durability=flush
config -t accumulo.metadata -d table.durability
config -t accumulo.root -d table.durability

----------------------------------------

TITLE: Converting Accumulo Configuration from XML to Properties
DESCRIPTION: Command to convert the accumulo-site.xml configuration file to the new accumulo.properties format in Accumulo 2.0.

LANGUAGE: bash
CODE:
accumulo convert-config -x old/accumulo-site.xml -p new/accumulo.properties

----------------------------------------

TITLE: Creating and Populating Accumulo Table with SortedSetAggregator
DESCRIPTION: Shows the process of creating a table with aggregation enabled, inserting data, and viewing the aggregated results. The example uses the SortedSetAggregator to combine and sort multiple values associated with the same keys.

LANGUAGE: shell
CODE:
$ bin/accumulo shell -u username
Enter current password for 'username'@'instance': ***

Shell - Apache Accumulo Interactive Shell
- 
- version: 1.3.x-incubating
- instance name: instance
- instance id: 00000000-0000-0000-0000-000000000000
- 
- type 'help' for a list of available commands
- 
username@instance> createtable aggtest1 -a app=org.apache.accumulo.examples.aggregation.SortedSetAggregator
username@instance aggtest1> insert foo app 1 a
username@instance aggtest1> insert foo app 1 b
username@instance aggtest1> scan
foo app:1 []  a,b
username@instance aggtest1> insert foo app 1 z,1,foo,w
username@instance aggtest1> scan
foo app:1 []  1,a,b,foo,w,z
username@instance aggtest1> insert foo app 2 cat,dog,muskrat
username@instance aggtest1> insert foo app 2 mouse,bird
username@instance aggtest1> scan
foo app:1 []  1,a,b,foo,w,z
foo app:2 []  bird,cat,dog,mouse,muskrat
username@instance aggtest1>

----------------------------------------

TITLE: Listing Accumulo 1.8.0 Configuration Files
DESCRIPTION: Displays the configuration files present in Accumulo 1.8.0's conf directory.

LANGUAGE: bash
CODE:
$ ls accumulo-1.8.0/conf/
accumulo-env.sh          auditLog.xml  generic_logger.properties            masters                    slaves
accumulo-metrics.xml     client.conf   generic_logger.xml                   monitor                    templates
accumulo.policy.example  examples      hadoop-metrics2-accumulo.properties  monitor_logger.properties  tracers
accumulo-site.xml        gc            log4j.properties                     monitor_logger.xml

----------------------------------------

TITLE: Configuring YAML Redirect for Accumulo API Docs
DESCRIPTION: YAML front matter configuration that sets up a page redirect from the Latest Java API page to the current version of Accumulo's API documentation.

LANGUAGE: yaml
CODE:
---
title: Latest Java API
redirect_to: /docs/2.x/apidocs/
---

----------------------------------------

TITLE: Defining Snapshot Data Schema in JSON
DESCRIPTION: This JSON snippet illustrates a potential schema for storing snapshot data. It includes version information, Accumulo version, serialized Zookeeper data, and garbage collection information. The schema is designed with upgrade and downgrade considerations in mind.

LANGUAGE: json
CODE:
{
  "snapshot_schema_version" : 1
  "accumulo_version" : 2.1.2
  "zookeeper_data" : "serialized zookeeper snapshot"
  "garbage_collection_data" : {
     "schema_version" : 1
     "referenced_dirs" : []
     "referenced_files" : []
  }
}

----------------------------------------

TITLE: Replacing Corrupt RFile with Empty File in HDFS
DESCRIPTION: These HDFS commands remove a corrupt RFile and replace it with an empty file to allow Accumulo to resolve references.

LANGUAGE: shell
CODE:
$ hadoop fs –rm /accumulo/tables/corrupt/file/thename.rf; \
hadoop fs -mv /path/to/empty/file/empty.rf /accumulo/tables/corrupt/file/thename.rf

----------------------------------------

TITLE: Configuring VFS Classpath in Accumulo XML
DESCRIPTION: This XML snippet demonstrates how to configure the general.vfs.classpaths property in the accumulo-site.xml file. It sets up a system-level VFS classloader to load Accumulo jars from HDFS.

LANGUAGE: xml
CODE:
<property>
  <name>general.vfs.classpaths</name>
  <value>hdfs://localhost:8020/accumulo/system-classpath</value>
  <description>Configuration for a system level vfs classloader. Accumulo jars can be configured here and loaded out of HDFS.</description>
</property>

----------------------------------------

TITLE: Viewing Accumulo Configuration in ZooKeeper
DESCRIPTION: Command to verify the configuration using the zoo-info-viewer utility after property conversion in Accumulo 2.1.

LANGUAGE: bash
CODE:
$ACCUMULO_HOME/bin/accumulo zoo-info-viewer  --print-props

----------------------------------------

TITLE: Running InterferenceTest Without Isolation
DESCRIPTION: Example showing how running InterferenceTest without isolation enabled leads to inconsistent reads across row columns. The command runs for 5000 iterations and demonstrates errors where different values are observed in the same row.

LANGUAGE: bash
CODE:
./bin/accumulo org.apache.accumulo.examples.simple.isolation.InterferenceTest instance zookeepers username password isotest 5000 false

----------------------------------------

TITLE: Accumulo 2.0.0 Help Command Output
DESCRIPTION: Displays the improved, organized help output in Accumulo 2.0.0 showing commands grouped by category.

LANGUAGE: bash
CODE:
$ ./accumulo-2.0.0/bin/accumulo help

Usage: accumulo <command> [-h] (<argument> ...)

  -h   Prints usage for specified command

Core Commands:
  init                           Initializes Accumulo
  shell                          Runs Accumulo shell
  classpath                      Prints Accumulo classpath
  version                        Prints Accumulo version
  admin                          Executes administrative commands
  info                           Prints Accumulo cluster info
  help                           Prints usage
  <main class> args              Runs Java <main class> located on Accumulo classpath

Process Commands:
  gc                             Starts Accumulo garbage collector
  master                         Starts Accumulo master
  monitor                        Starts Accumulo monitor
  minicluster                    Starts Accumulo minicluster
  proxy                          Starts Accumulo proxy
  tserver                        Starts Accumulo tablet server
  tracer                         Starts Accumulo tracer
  zookeeper                      Starts Apache Zookeeper instance

Advanced Commands:
  check-server-config            Checks server config
  create-token                   Creates authentication token
  login-info                     Prints Accumulo login info
  rfile-info                     Prints rfile info

----------------------------------------

TITLE: File Data Ingestion Command in Accumulo
DESCRIPTION: Command to ingest a file into Accumulo using FileDataIngest class. Parameters include instance, zookeepers, username, password, table name, authorizations, and chunk size.

LANGUAGE: shell
CODE:
./bin/accumulo org.apache.accumulo.examples.simple.filedata.FileDataIngest -i instance -z zookeepers -u username -p password -t dataTable --auths exampleVis --chunk 1000 $ACCUMULO_HOME/README

----------------------------------------

TITLE: Configuring AgeOffFilter for Multiple Scopes with Flush and Compact
DESCRIPTION: Sets up AgeOffFilter for minc and majc scopes using the class flag, then demonstrates how to flush and compact the table to force data ageoff.

LANGUAGE: shell
CODE:
username@instance filtertest> setiter -t filtertest -minc -majc -p 10 -n myfilter -class org.apache.accumulo.core.iterators.user.AgeOffFilter
AgeOffFilter removes entries with timestamps more than <ttl> milliseconds old
----------> set AgeOffFilter parameter negate, default false keeps k/v that pass accept method, true rejects k/v that pass accept method:
----------> set AgeOffFilter parameter ttl, time to live (milliseconds): 30000
----------> set AgeOffFilter parameter currentTime, if set, use the given value as the absolute time in milliseconds as the current time of day:
username@instance filtertest> flush
06 10:42:24,806 [shell.Shell] INFO : Flush of table filtertest initiated...
username@instance filtertest> compact
06 10:42:36,781 [shell.Shell] INFO : Compaction of table filtertest started for given range
username@instance filtertest> flush -t filtertest -w
06 10:42:52,881 [shell.Shell] INFO : Flush of table filtertest completed.
username@instance filtertest> compact -t filtertest -w
06 10:43:00,632 [shell.Shell] INFO : Compacting table ...
06 10:43:01,307 [shell.Shell] INFO : Compaction of table filtertest completed for given range
username@instance filtertest>

----------------------------------------

TITLE: Implementing Apache Project Footer with HTML/Markdown
DESCRIPTION: Footer template combining HTML and Markdown to display Apache Software Foundation copyright notice, license information, trademark disclaimers and support button. Uses Liquid templating for dynamic year generation.

LANGUAGE: HTML
CODE:
<footer markdown="1">

[![Support the ASF][SUPPORT_IMG]{: #asf-logo height="100"}][SUPPORT_URL]

Copyright &copy; 2011-{{ site.time | date: '%Y' }} [The&nbsp;Apache&nbsp;Software&nbsp;Foundation][ASF].
Licensed under the [Apache&nbsp;License,&nbsp;Version&nbsp;2.0][AL2].

Apache®, the names of Apache projects and their logos, and the multicolor feather
logo are registered trademarks or trademarks of The Apache Software Foundation
in the United States and/or other countries.

</footer>

[ASF]: https://www.apache.org
[AL2]: https://www.apache.org/licenses/
[SUPPORT_IMG]:https://www.apache.org/images/SupportApache-small.png
[SUPPORT_URL]:https://www.apache.org/foundation/contributing

----------------------------------------

TITLE: Creating Accumulo Mutations with Column Visibility
DESCRIPTION: Creates three Mutation objects with different column visibilities for heroes and villains.

LANGUAGE: java
CODE:
Mutation mutation1 = new Mutation("id0001");
mutation1.put("hero", "alias", "Batman");
mutation1.put("hero", "name", colVis, "Bruce Wayne");
mutation1.put("hero", "wearsCape?", "true");

Mutation mutation2 = new Mutation("id0002");
mutation2.put("hero", "alias", "Robin");
mutation2.put("hero", "name", colVis, "Dick Grayson");
mutation2.put("hero", "wearsCape?", "true");

Mutation mutation3 = new Mutation("id0003");
mutation3.put("villain", "alias", "Joker");
mutation3.put("villain", "name", "Unknown");
mutation3.put("villain", "wearsCape?", "false");

----------------------------------------

TITLE: Building Relocated Hadoop-AWS JAR
DESCRIPTION: Bash commands to build a relocated hadoop-aws JAR file as a workaround for HADOOP-16080. This JAR needs to be copied to all cluster nodes.

LANGUAGE: bash
CODE:
mkdir -p /tmp/haws-reloc
cd /tmp/haws-reloc
# get the Maven pom file that builds a relocated jar
wget https://gist.githubusercontent.com/keith-turner/f6dcbd33342732e42695d66509239983/raw/714cb801eb49084e0ceef5c6eb4027334fd51f87/pom.xml
mvn package -Dhadoop.version=<your hadoop version>
# the new jar will be in target
ls target/

----------------------------------------

TITLE: Tracking Compactor Process Memory Usage
DESCRIPTION: Bash script to monitor the Resident Set Size (RSS) of a specified process ID over time. It outputs data every 5 seconds for an hour or until stopped.

LANGUAGE: bash
CODE:
#!/bin/bash 
PID=$1 
echo "Tracking PID: $PID" 
DURATION=3600 # for 1 hour 
INTERVAL=5    # every 5 seconds 
rm output_mem_usage.log 

while [ $DURATION -gt 0 ]; do 
    ps -o %mem,rss -p $PID | tail -n +2 >> output_mem_usage.log 
    sleep $INTERVAL 
    DURATION=$((DURATION - INTERVAL)) 
done

----------------------------------------

TITLE: Accessing Accumulo Shell
DESCRIPTION: Command to log into the Accumulo shell with username and password authentication.

LANGUAGE: shell
CODE:
./bin/accumulo shell -u username -p password

----------------------------------------

TITLE: Configuring Encrypted RFile Access
DESCRIPTION: Properties configuration required to examine encrypted RFiles using the PerTableCryptoServiceFactory and AESCryptoService.

LANGUAGE: properties
CODE:
general.custom.crypto.key.uri=<path-to-key>/data-encryption.key
instance.crypto.opts.factory=org.apache.accumulo.core.spi.crypto.PerTableCryptoServiceFactory
table.crypto.opts.service=org.apache.accumulo.core.spi.crypto.AESCryptoService

----------------------------------------

TITLE: Creating Cluster Configuration
DESCRIPTION: Command to generate host configuration files using the accumulo-cluster script.

LANGUAGE: bash
CODE:
$ ./bin/accumulo-cluster create-config

----------------------------------------

TITLE: Configuring Uno for Accumulo Proxy in Bash
DESCRIPTION: This configuration snippet for uno.conf sets up Uno to start the Accumulo Proxy. It specifies the post-run plugin and the path to the proxy repository.

LANGUAGE: bash
CODE:
export POST_RUN_PLUGINS="accumulo-proxy"
export PROXY_REPO=/path/to/accumulo-proxy

----------------------------------------

TITLE: Viewing Results in Accumulo Shell
DESCRIPTION: Commands to scan the table and view the computed hash values stored alongside the original data.

LANGUAGE: shell
CODE:
$ ./bin/accumulo shell -u username -p password
Shell - Apache Accumulo Interactive Shell
- version: 1.7.4
- instance name: instance
- instance id: 00000000-0000-0000-0000-000000000000
-
- type 'help' for a list of available commands
-
username@instance> scan -t input
a-row cf:cq []    value
a-row cf-HASHTYPE:cq-MD5BASE64 []    IGPBYI1uC6+AJJxC4r5YBA==
b-row cf:cq []    value
b-row cf-HASHTYPE:cq-MD5BASE64 []    IGPBYI1uC6+AJJxC4r5YBA==
username@instance>

----------------------------------------

TITLE: Ingesting Filesystem Data into Accumulo
DESCRIPTION: This command uses the Ingest class to recursively list files and directories, storing their information in Accumulo tables. It specifies the instance, zookeepers, credentials, visibility, chunk size, and target directory.

LANGUAGE: bash
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.simple.dirlist.Ingest -i instance -z zookeepers -u username -p password --vis exampleVis --chunkSize 100000 /local/username/workspace

----------------------------------------

TITLE: Configuring Import Control for Accumulo API Validation
DESCRIPTION: This XML configuration defines the import control rules for Accumulo API usage. It specifies which Accumulo packages are allowed to be imported (public API) and disallows all other Accumulo packages to ensure only public APIs are used.

LANGUAGE: xml
CODE:
<!DOCTYPE import-control PUBLIC
    "-//Checkstyle//DTD ImportControl Configuration 1.4//EN"
    "https://checkstyle.org/dtds/import_control_1_4.dtd">

<!-- This checkstyle rule is configured to ensure only use of Accumulo API -->
<import-control pkg="insert-your-package-name" strategyOnMismatch="allowed">
    <!-- API packages -->
    <allow pkg="org.apache.accumulo.core.client"/>
    <allow pkg="org.apache.accumulo.core.data"/>
    <allow pkg="org.apache.accumulo.core.security"/>
    <allow pkg="org.apache.accumulo.core.iterators"/>
    <allow pkg="org.apache.accumulo.minicluster"/>
    <allow pkg="org.apache.accumulo.hadoop.mapreduce"/>

    <!-- disallow everything else coming from accumulo -->
    <disallow pkg="org.apache.accumulo"/>
</import-control>

----------------------------------------

TITLE: Configuring Classpath Context
DESCRIPTION: Set up the VFS classpath context in Accumulo to reference the jar in HDFS

LANGUAGE: shell
CODE:
config -s general.vfs.context.classpath.cx1=hdfs://<namenode host>:<namenode port>/user1/lib

----------------------------------------

TITLE: Configuring AESCryptoService Key in Accumulo Properties
DESCRIPTION: Specifies the location of the encryption key file for the AESCryptoService. This configuration is added to the accumulo.properties file.

LANGUAGE: properties
CODE:
general.custom.crypto.key.uri=file:///secure/path/to/crypto-key-file

----------------------------------------

TITLE: Configuring AESCryptoService Key in Accumulo Properties
DESCRIPTION: Specifies the location of the encryption key file for the AESCryptoService. This configuration is added to the accumulo.properties file.

LANGUAGE: properties
CODE:
general.custom.crypto.key.uri=file:///secure/path/to/crypto-key-file

----------------------------------------

TITLE: Implementing Mapper for Accumulo Input in Java
DESCRIPTION: Defines a Mapper class to read from an Accumulo table. The Mapper processes Key-Value pairs from Accumulo and transforms them into WritableComparable-Writable pairs for further processing.

LANGUAGE: java
CODE:
class MyMapper extends Mapper<Key,Value,WritableComparable,Writable> {
    public void map(Key k, Value v, Context c) {
        // transform key and value data here
    }
}

----------------------------------------

TITLE: Inserting Data with BatchWriter
DESCRIPTION: Command to run Java program that inserts 50K entries using BatchWriter

LANGUAGE: shell
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.simple.helloworld.InsertWithBatchWriter instance zookeepers username password hellotable

----------------------------------------

TITLE: jQuery and Sizzle.js MIT License Text
DESCRIPTION: Complete MIT license text covering both jQuery v3.6.1 and the included Sizzle.js library. Contains copyright notices, permissions, warranty disclaimers, and liability limitations. Also includes notes about externally maintained libraries in node_modules.

LANGUAGE: text
CODE:
jQuery v 3.6.1
Copyright OpenJS Foundation and other contributors, https://openjsf.org/

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

******************************************

The jQuery JavaScript Library v3.6.1 also includes Sizzle.js

Sizzle.js includes the following license:

Copyright JS Foundation and other contributors, https://js.foundation/

This software consists of voluntary contributions made by many
individuals. For exact contribution history, see the revision history
available at https://github.com/jquery/sizzle

The following license applies to all parts of this software except as
documented below:

====

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

====

All files located in the node_modules and external directories are
externally maintained libraries used by this software which have their
own licenses; we recommend you read them, as their terms may differ from
the terms above.

*********************

----------------------------------------

TITLE: Executing Regex Search with MapReduce
DESCRIPTION: Command to run the RegexExample MapReduce job that searches for rows starting with 'dog' pattern. Uses the accumulo-examples-simple.jar to execute the search and output results to HDFS.

LANGUAGE: shell
CODE:
$ bin/tool.sh lib/accumulo-examples-simple.jar org.apache.accumulo.examples.simple.mapreduce.RegexExample -u user -p passwd -i instance -t input --rowRegex 'dog.*' --output /tmp/output

----------------------------------------

TITLE: Implementing Mapper for Accumulo Input in Java
DESCRIPTION: Defines a Mapper class to read from an Accumulo table. The Mapper processes Key-Value pairs from Accumulo and transforms them into WritableComparable-Writable pairs for further processing.

LANGUAGE: java
CODE:
class MyMapper extends Mapper<Key,Value,WritableComparable,Writable> {
    public void map(Key k, Value v, Context c) {
        // transform key and value data here
    }
}

----------------------------------------

TITLE: Starting Accumulo Services
DESCRIPTION: These commands start all the Accumulo services (master, tserver, gc, tracer, and monitor) and enable them to start automatically on system boot.

LANGUAGE: bash
CODE:
sudo systemctl start accumulo-{master,tserver,gc,tracer,monitor}.service
sudo systemctl enable accumulo-{master,tserver,gc,tracer,monitor}.service

----------------------------------------

TITLE: Copying Filter JAR to HDFS
DESCRIPTION: Copy the FooFilter.jar file from Accumulo test resources to HDFS user directory

LANGUAGE: shell
CODE:
hadoop fs -copyFromLocal $ACCUMULO_HOME/test/src/test/resources/FooFilter.jar /user1/lib

----------------------------------------

TITLE: Configuring Client-Side Hints for Scan Execution in Accumulo
DESCRIPTION: Commands to set up a system that allows scanners to provide hints for executor selection and scan prioritization. This includes creating executors, setting up prioritizers, and configuring a table to use these features.

LANGUAGE: shell
CODE:
config -s tserver.scan.executors.special.threads=8
config -s tserver.scan.executors.special.prioritizer=org.apache.accumulo.core.spi.scan.HintScanPrioritizer
config -s tserver.scan.executors.special.prioritizer.opts.priority.alpha=1
config -s tserver.scan.executors.special.prioritizer.opts.priority.gamma=3
createtable tex
config -t tex -s table.scan.dispatcher=org.apache.accumulo.core.spi.scan.SimpleScanDispatcher
config -t tex -s table.scan.dispatcher.opts.executor.alpha=special
config -t tex -s table.scan.dispatcher.opts.executor.gamma=special

----------------------------------------

TITLE: Creating Accumulo Table with Combiner in Accumulo Shell
DESCRIPTION: This snippet demonstrates how to create an Accumulo table named 'wordCount' and set up a SummingCombiner for the 'count' column family.

LANGUAGE: bash
CODE:
$ ./bin/accumulo shell -u username -p password
Shell - Apache Accumulo Interactive Shell
- version: 1.5.0
- instance name: instance
- instance id: 00000000-0000-0000-0000-000000000000
-
- type 'help' for a list of available commands
-
username@instance> createtable wordCount
username@instance wordCount> setiter -class org.apache.accumulo.core.iterators.user.SummingCombiner -p 10 -t wordCount -majc -minc -scan
SummingCombiner interprets Values as Longs and adds them together. A variety of encodings (variable length, fixed length, or string) are available
----------> set SummingCombiner parameter all, set to true to apply Combiner to every column, otherwise leave blank. if true, columns option will be ignored.: false
----------> set SummingCombiner parameter columns, <col fam>[:<col qual>]{,<col fam>[:<col qual>]} escape non-alphanum chars using %<hex>.: count
----------> set SummingCombiner parameter lossy, if true, failed decodes are ignored. Otherwise combiner will error on failed decodes (default false): <TRUE|FALSE>: false
----------> set SummingCombiner parameter type, <VARLEN|FIXEDLEN|STRING|fullClassName>: STRING
username@instance wordCount> quit

----------------------------------------

TITLE: Running LocalWALRecovery Tool for Accumulo 1.4 to 1.6 Upgrade
DESCRIPTION: Command to run the LocalWALRecovery tool on each node that previously ran an instance of the Logger role when upgrading from Accumulo 1.4 to 1.6.

LANGUAGE: bash
CODE:
$ACCUMULO_HOME/bin/accumulo org.apache.accumulo.tserver.log.LocalWALRecovery

----------------------------------------

TITLE: Querying Accumulo Table with Non-Existent Data
DESCRIPTION: Performs 500 random queries using a different seed, resulting in no matches. Demonstrates faster lookups due to bloom filters.

LANGUAGE: shell
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.simple.client.RandomBatchScanner -s 8 instance zookeepers username password bloom_test 500 0 1000000000 50 20 exampleVis
Generating 500 random queries...finished
2212.39 lookups/sec   0.23 secs
num results : 0
Did not find 500 rows
Generating 500 random queries...finished
4464.29 lookups/sec   0.11 secs
num results : 0
Did not find 500 rows

----------------------------------------

TITLE: Creating Accumulo Table
DESCRIPTION: Command to create a new table named 'batchtest1' in Accumulo.

LANGUAGE: bash
CODE:
./bin/accumulo shell -u username -e "createtable batchtest1"

----------------------------------------

TITLE: Configuring Hadoop core-site.xml for Azure Authentication
DESCRIPTION: XML configuration for setting up Azure Managed Identity authentication in Hadoop's core-site.xml. Includes OAuth settings and MSI token provider configuration.

LANGUAGE: xml
CODE:
<property>
  <name>fs.azure.account.auth.type</name>
  <value>OAuth</value>
</property>
<property>
  <name>fs.azure.account.oauth.provider.type</name>
  <value>org.apache.hadoop.fs.azurebfs.oauth2.MsiTokenProvider</value>
</property>
<property>
  <name>fs.azure.account.oauth2.msi.tenant</name>
  <value>TenantID</value>
</property>
<property>
  <name>fs.azure.account.oauth2.client.id</name>
  <value>ClientID</value>
</property>

----------------------------------------

TITLE: Creating Accumulo Tables for Shard Example
DESCRIPTION: Commands to create the 'shard' and 'doc2term' tables in Accumulo, which are required for the shard example.

LANGUAGE: bash
CODE:
username@instance> createtable shard
username@instance shard> createtable doc2term

----------------------------------------

TITLE: Configuring Kerberos Authentication for Replication
DESCRIPTION: Set up Kerberos authentication for a replication peer using a keytab file.

LANGUAGE: console
CODE:
accumulo@EXAMPLE.COM@accumulo_primary> config -s replication.peer.user.peer1=replication@EXAMPLE.COM
accumulo@EXAMPLE.COM@accumulo_primary> config -s replication.peer.keytab.peer1=/path/to/replication.keytab

----------------------------------------

TITLE: Configuring accumulo-site.xml for Multi-Volume Support
DESCRIPTION: This XML configuration specifies the HDFS volumes that Accumulo should use for its Multi-Volume Support feature, allowing it to distribute data across multiple HDFS nameservices.

LANGUAGE: xml
CODE:
<property>
  <name>instance.volumes</name>
  <value>hdfs://nameserviceA/accumulo,hdfs://nameserviceB/accumulo</value>
</property>

----------------------------------------

TITLE: Viewing Exported Data
DESCRIPTION: Displays the contents of the exported data file using the Hadoop filesystem text viewer command.

LANGUAGE: bash
CODE:
$ hadoop fs -text /tmp/output/output/part-m-00000
catrow cf:cq [] catvalue
dogrow cf:cq [] dogvalue
$

----------------------------------------

TITLE: Adding Accumulo Nodes
DESCRIPTION: Command to start Accumulo tablet servers on new nodes after adding them to the cluster configuration.

LANGUAGE: bash
CODE:
$ACCUMULO_HOME/bin/accumulo admin start <host(s)> {<host> ...}

----------------------------------------

TITLE: Inserting Data with BatchWriter
DESCRIPTION: Command to execute Java program that inserts 50K entries into Accumulo using BatchWriter

LANGUAGE: shell
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.simple.helloworld.InsertWithBatchWriter -i instance -z zookeepers -u username -p password -t hellotable

----------------------------------------

TITLE: Downloading Telegraf-Influx-Grafana Docker Image
DESCRIPTION: Command to pull the latest Telegraf-Influx-Grafana Docker image for metrics visualization.

LANGUAGE: bash
CODE:
docker pull artlov/docker-telegraf-influxdb-grafana:latest

----------------------------------------

TITLE: Running TableToFile MapReduce Job
DESCRIPTION: This command runs the TableToFile class to extract rows containing the column 'cf:cq' from the 'input' table and write them to a file in HDFS at '/tmp/output'.

LANGUAGE: shell
CODE:
$ bin/tool.sh lib/accumulo-examples-simple.jar org.apache.accumulo.examples.simple.mapreduce.TableToFile -u user -p passwd -i instance -t input --columns cf:cq --output /tmp/output

----------------------------------------

TITLE: Downloading OpenTelemetry Java Agent
DESCRIPTION: Command to download the OpenTelemetry Java Agent JAR file.

LANGUAGE: bash
CODE:
wget -O opentelemetry-javaagent-1.15.0.jar https://search.maven.org/remotecontent?filepath=io/opentelemetry/javaagent/opentelemetry-javaagent/1.15.0/opentelemetry-javaagent-1.15.0.jar

----------------------------------------

TITLE: Generating ZooKeeper Authentication Digest
DESCRIPTION: Command to generate a digest authentication value for ZooKeeper using the DigestAuthenticationProvider.

LANGUAGE: bash
CODE:
export CLASSPATH="lib/*"
java org.apache.zookeeper.server.auth.DigestAuthenticationProvider accumulo:$secret

----------------------------------------

TITLE: HDFS Commands for Export Verification
DESCRIPTION: Shows how to verify the exported files in HDFS and examine the contents of the distcp.txt file that contains paths for data transfer.

LANGUAGE: bash
CODE:
$ hadoop fs -ls /tmp/table1_export
Found 2 items
-rw-r--r--   3 user supergroup        162 2012-07-25 09:56 /tmp/table1_export/distcp.txt
-rw-r--r--   3 user supergroup        821 2012-07-25 09:56 /tmp/table1_export/exportMetadata.zip
$ hadoop fs -cat /tmp/table1_export/distcp.txt
hdfs://n1.example.com:6093/accumulo/tables/3/default_tablet/F0000000.rf
hdfs://n1.example.com:6093/tmp/table1_export/exportMetadata.zip

----------------------------------------

TITLE: Retrieving Data from Accumulo Table using Java Scanner
DESCRIPTION: Shows how to retrieve specific columns for a given userid using an Accumulo Scanner. It sets a range for a single row and fetches a specific column family.

LANGUAGE: java
CODE:
Range r = new Range(userid, userid); // single row
Scanner s = conn.createScanner("userdata", auths);
s.setRange(r);
s.fetchColumnFamily(new Text("age"));

for(Entry<Key,Value> entry : s)
    System.out.println(entry.getValue().toString());

----------------------------------------

TITLE: Configuring Multiple NameNode Volumes in Accumulo
DESCRIPTION: Configuration setting for specifying multiple HDFS NameNode servers using comma-separated URI references. This allows Accumulo to distribute load across multiple NameNodes for better performance.

LANGUAGE: properties
CODE:
instance.volumes=hdfs://ns1:9001,hdfs://ns2:9001

----------------------------------------

TITLE: Building Javadocs for Release
DESCRIPTION: This snippet shows the Maven command to build Javadocs for the release.

LANGUAGE: bash
CODE:
mvn clean package javadoc:aggregate -DskipTests -Paggregate-javadocs

----------------------------------------

TITLE: Querying Directory Contents in Accumulo
DESCRIPTION: These commands use the QueryUtil class to list the contents of specific directories stored in Accumulo. They demonstrate querying different paths within the ingested filesystem data.

LANGUAGE: bash
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.simple.dirlist.QueryUtil -i instance -z zookeepers -u username -p password -t dirTable --auths exampleVis --path /local/username
$ ./bin/accumulo org.apache.accumulo.examples.simple.dirlist.QueryUtil -i instance -z zookeepers -u username -p password -t dirTable --auths exampleVis --path /local/username/workspace

----------------------------------------

TITLE: Configuring System Properties for TestStatsDRegistryFactory
DESCRIPTION: System properties to add to JAVA_OPTS in accumulo-env.sh for configuring TestStatsDRegistryFactory.

LANGUAGE: bash
CODE:
"-Dtest.meter.registry.host=127.0.0.1"
"-Dtest.meter.registry.port=8125"

----------------------------------------

TITLE: Creating Accumulo Table with Bloom Filters
DESCRIPTION: Creates a table named 'bloom_test' in Accumulo and enables bloom filters for improved query performance.

LANGUAGE: shell
CODE:
$ ./bin/accumulo shell -u username -p password
Shell - Apache Accumulo Interactive Shell
- version: 1.4.x
- instance name: instance
- instance id: 00000000-0000-0000-0000-000000000000
- 
- type 'help' for a list of available commands
- 
username@instance> setauths -u username -s exampleVis
username@instance> createtable bloom_test
username@instance bloom_test> config -t bloom_test -s table.bloom.enabled=true
username@instance bloom_test> exit

----------------------------------------

TITLE: Displaying jQuery v3.6.1 and Sizzle.js License Text
DESCRIPTION: This snippet contains the full text of the MIT license for jQuery v3.6.1 and Sizzle.js. It outlines the permissions granted to users, including rights to use, modify, and distribute the software, as well as the conditions and limitations of the license.

LANGUAGE: plaintext
CODE:
jQuery v 3.6.1
Copyright OpenJS Foundation and other contributors, https://openjsf.org/

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

******************************************

The jQuery JavaScript Library v3.6.1 also includes Sizzle.js

Sizzle.js includes the following license:

Copyright JS Foundation and other contributors, https://js.foundation/

This software consists of voluntary contributions made by many
individuals. For exact contribution history, see the revision history
available at https://github.com/jquery/sizzle

The following license applies to all parts of this software except as
documented below:

====

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

====

All files located in the node_modules and external directories are
externally maintained libraries used by this software which have their
own licenses; we recommend you read them, as their terms may differ from
the terms above.

----------------------------------------

TITLE: Managing Locality Groups via Java Client API
DESCRIPTION: Shows how to programmatically set and get locality groups for a table using the Accumulo Java client API.

LANGUAGE: java
CODE:
Connector conn;

HashMap<String,Set<Text>> localityGroups =
    new HashMap<String, Set<Text>>();

HashSet<Text> metadataColumns = new HashSet<Text>();
metadataColumns.add(new Text("domain"));
metadataColumns.add(new Text("link"));

HashSet<Text> contentColumns = new HashSet<Text>();
contentColumns.add(new Text("body"));
contentColumns.add(new Text("images"));

localityGroups.put("metadata", metadataColumns);
localityGroups.put("content", contentColumns);

conn.tableOperations().setLocalityGroups("mytable", localityGroups);

// existing locality groups can be obtained as follows
Map<String, Set<Text>> groups =
    conn.tableOperations().getLocalityGroups("mytable");

----------------------------------------

TITLE: Setting Namespace Configuration using Java API
DESCRIPTION: Shows how to set a configuration property for a specific namespace using the Accumulo Java API's NamespaceOperations.

LANGUAGE: java
CODE:
client.namespaceOperations().setProperty("mynamespace", "table.durability", "sync");

----------------------------------------

TITLE: Configuring HDFS DataNode Xcievers
DESCRIPTION: XML configuration to increase the number of maximum Xcievers for HDFS DataNodes to support larger clusters.

LANGUAGE: xml
CODE:
<property>
    <name>dfs.datanode.max.xcievers</name>
    <value>4096</value>
</property>

----------------------------------------

TITLE: Creating New Accumulo User
DESCRIPTION: Shows the process of creating a new user account in Accumulo and attempting to create a table without proper permissions

LANGUAGE: shell
CODE:
root@instance> createuser username
Enter new password for 'username': ********
Please confirm new password for 'username': ********
root@instance> user username
Enter password for user username: ********
username@instance> createtable vistest
06 10:48:47,931 [shell.Shell] ERROR: org.apache.accumulo.core.client.AccumuloSecurityException: Error PERMISSION_DENIED - User does not have permission to perform this action
username@instance> userpermissions
System permissions:

Table permissions (accumulo.metadata): Table.READ
username@instance>

----------------------------------------

TITLE: Downloading Micrometer StatsD Meter Registry JAR
DESCRIPTION: Command to download the Micrometer StatsD Meter Registry JAR file.

LANGUAGE: bash
CODE:
wget -O micrometer-registry-statsd-1.9.1.jar https://search.maven.org/remotecontent?filepath=io/micrometer/micrometer-registry-statsd/1.9.1/micrometer-registry-statsd-1.9.1.jar

----------------------------------------

TITLE: Starting Jaeger Docker Container
DESCRIPTION: Docker command to start the Jaeger all-in-one container for tracing visualization.

LANGUAGE: bash
CODE:
docker run -d --rm --name jaeger \
    -e COLLECTOR_ZIPKIN_HOST_PORT=:9411 \
    -p 5775:5775/udp \
    -p 6831:6831/udp \
    -p 6832:6832/udp \
    -p 5778:5778 \
    -p 16686:16686 \
    -p 14268:14268 \
    -p 14250:14250 \
    -p 9411:9411 jaegertracing/all-in-one:1.35

----------------------------------------

TITLE: jQuery UI MIT License and Terms
DESCRIPTION: The full license text for jQuery UI, including the MIT license, CC0 waiver for sample code, and notes about external library licenses.

LANGUAGE: text
CODE:
Copyright jQuery Foundation and other contributors, https://jquery.org/

This software consists of voluntary contributions made by many
individuals. For exact contribution history, see the revision history
available at https://github.com/jquery/jquery-ui

The following license applies to all parts of this software except as
documented below:

====

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

====

Copyright and related rights for sample code are waived via CC0. Sample
code is defined as all source code contained within the demos directory.

CC0: http://creativecommons.org/publicdomain/zero/1.0/

====

All files located in the node_modules and external directories are
externally maintained libraries used by this software which have their
own licenses; we recommend you read them, as their terms may differ from
the terms above.

----------------------------------------

TITLE: Importing Bulk Data into Accumulo Table
DESCRIPTION: This shell command imports bulk data files into an Accumulo table from a specified HDFS directory, with a separate directory for failed imports.

LANGUAGE: shell
CODE:
user@myinstance mytable> importdirectory /files_dir /failures

----------------------------------------

TITLE: Running Random Batch Scanner
DESCRIPTION: Command to execute the RandomBatchScanner which performs 100 random queries on the written data and verifies the values.

LANGUAGE: bash
CODE:
./bin/accumulo org.apache.accumulo.examples.simple.client.RandomBatchScanner instance zookeepers username password batchtest1 100 0 10000 50 20 exampleVis

----------------------------------------

TITLE: Creating Global Keytab
DESCRIPTION: Creates a single keytab file containing credentials for all Accumulo principals.

LANGUAGE: shell
CODE:
kadmin.local -q "xst -k accumulo.service.keytab -glob accumulo*"

----------------------------------------

TITLE: Inserting Sample Data into Accumulo Table
DESCRIPTION: Uses the Accumulo shell to create a table named 'input' and insert two rows of sample data. This setup is required before running the RowHash example.

LANGUAGE: shell
CODE:
$ ./bin/accumulo shell -u username -p password
Shell - Apache Accumulo Interactive Shell
- version: 1.6.0
- instance name: instance
- instance id: 00000000-0000-0000-0000-000000000000
-
- type 'help' for a list of available commands
-
username@instance> createtable input
username@instance> insert a-row cf cq value
username@instance> insert b-row cf cq value
username@instance> quit

----------------------------------------

TITLE: Creating Directories for Docker Container
DESCRIPTION: Commands to create and set permissions for directories used by the Docker container.

LANGUAGE: bash
CODE:
mkdir -p /tmp/metrics/influxdb
chmod 777 /tmp/metrics/influxdb
mkdir /tmp/metrics/grafana
mkdir /tmp/metrics/grafana-dashboards
mkdir -p /tmp/metrics/telegraf/conf

----------------------------------------

TITLE: Creating Accumulo Table via Shell
DESCRIPTION: Commands to log into Accumulo shell and create a new table named 'hellotable'

LANGUAGE: shell
CODE:
$ ./bin/accumulo shell -u username -p password
username@instance> createtable hellotable

----------------------------------------

TITLE: Configuring AgeOff Filter Iterator
DESCRIPTION: Demonstrates how to configure an AgeOff filter iterator to remove data older than 30 seconds using the Accumulo shell.

LANGUAGE: shell
CODE:
user@myinstance> createtable filtertest
user@myinstance filtertest> setiter -t filtertest -scan -minc -majc -p
10 -n myfilter -filter

FilteringIterator uses Filters to accept or reject key/value pairs
----------> entering options: <filterPriorityNumber>
<ageoff|regex|filterClass>

----------> set org.apache.accumulo.core.iterators.FilteringIterator option
(<name> <value>, hit enter to skip): 0 ageoff

----------> set org.apache.accumulo.core.iterators.FilteringIterator option
(<name> <value>, hit enter to skip):
AgeOffFilter removes entries with timestamps more than <ttl>
milliseconds old

----------> set org.apache.accumulo.core.iterators.filter.AgeOffFilter parameter
currentTime, if set, use the given value as the absolute time in
milliseconds as the current time of day:

----------> set org.apache.accumulo.core.iterators.filter.AgeOffFilter parameter
ttl, time to live (milliseconds): 30000

user@myinstance filtertest>
user@myinstance filtertest> scan
user@myinstance filtertest> insert foo a b c
insert successful
user@myinstance filtertest> scan
foo a:b [] c

... wait 30 seconds ...

user@myinstance filtertest> scan
user@myinstance filtertest>

----------------------------------------

TITLE: Scanning Data in Apache Accumulo
DESCRIPTION: Performs a scan on the 'GothamCrimeStats' table to retrieve and display all entries. This demonstrates the effect of the default versioning iterator.

LANGUAGE: java
CODE:
try (ScannerBase scan = client.createScanner("GothamCrimeStats", Authorizations.EMPTY)) {
  System.out.println("Gotham Police Department Crime Statistics:");
  for(Map.Entry<Key, Value> entry : scan) {
    System.out.printf("Key : %-52s  Value : %s\n", entry.getKey(), entry.getValue());
  }
}

----------------------------------------

TITLE: Modifying Multiple Table Properties with Java API
DESCRIPTION: Shows how to add, modify, and remove multiple table properties in a single operation using the Accumulo Java API.

LANGUAGE: java
CODE:
client.tableOperations().modifyProperties("mytable", properties -> {
        properties.remove("table.file.max");
        properties.put("table.bloom.enabled", "true");
        properties.put("table.bloom.error.rate", "0.75");
        properties.put("table.bloom.size", "128000");
        });

----------------------------------------

TITLE: Creating Encrypted Table in Accumulo Shell
DESCRIPTION: Creates a new table with encryption enabled using the AESCryptoService. This command is executed in the Accumulo shell.

LANGUAGE: shell
CODE:
createtable table1 -prop table.crypto.opts.service=org.apache.accumulo.core.spi.crypto.AESCryptoService

----------------------------------------

TITLE: Running TeraSortIngest MapReduce Job in Accumulo
DESCRIPTION: This command executes the TeraSortIngest MapReduce job to generate and store random data in Accumulo. It specifies various parameters such as instance, zookeepers, user credentials, data size, and table information.

LANGUAGE: bash
CODE:
$ bin/tool.sh lib/accumulo-examples-simple.jar org.apache.accumulo.examples.simple.mapreduce.TeraSortIngest \
-i instance -z zookeepers -u user -p password \
--count 10 \
--minKeySize 10 \
--maxKeySize 10 \
--minValueSize 78 \
--maxValueSize 78 \
--table sort \
--splits 10 \

----------------------------------------

TITLE: Configuring Maven Checkstyle Plugin for Accumulo API Validation
DESCRIPTION: This XML snippet configures the Maven Checkstyle plugin to check for proper Accumulo API usage during the build process. It specifies the plugin version, execution goals, and references a custom Checkstyle configuration file.

LANGUAGE: xml
CODE:
<plugin>
    <!-- This was added to ensure project only uses Accumulo's public API -->
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-checkstyle-plugin</artifactId>
    <version>3.1.0</version>
    <executions>
      <execution>
        <id>check-style</id>
        <goals>
          <goal>check</goal>
        </goals>
        <configuration>
          <configLocation>checkstyle.xml</configLocation>
        </configuration>
      </execution>
    </executions>
  </plugin>

----------------------------------------

TITLE: Viewing Ingested File System Data with GUI
DESCRIPTION: This command launches the Viewer class, which provides a graphical interface for browsing the file system information stored in Accumulo. It requires Accumulo instance details, credentials, table names, and the root directory to view.

LANGUAGE: bash
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.simple.dirlist.Viewer instance zookeepers username password dirTable dataTable exampleVis /local/username/workspace

----------------------------------------

TITLE: Configuring Maven Settings for Apache Release
DESCRIPTION: This snippet shows the structure of the Maven settings.xml file for configuring Apache ID and password for releases.

LANGUAGE: xml
CODE:
<server>
  <!-- Apache ID and encrypted password configuration -->
</server>

----------------------------------------

TITLE: Running Bash Commands in Accumulo Home Directory
DESCRIPTION: Demonstrates the convention for running bash commands in the Accumulo home directory. Commands are prefixed with '$' and should be executed from $ACCUMULO_HOME.

LANGUAGE: bash
CODE:
$ command

----------------------------------------

TITLE: Creating Accumulo Client with New API in Java
DESCRIPTION: Example of using the new fluent API to create an Accumulo client. This replaces the deprecated Connector and ZooKeeperInstance objects with AccumuloClient created from the Accumulo entry point.

LANGUAGE: Java
CODE:
AccumuloClient client = Accumulo.newClient()
    .to("instance", "zookeepers")
    .as("user", "password")
    .build();

----------------------------------------

TITLE: Fetching Apache Mirrors on Page Load
DESCRIPTION: This jQuery code fetches the list of Apache mirrors when the page is ready. It calls the mirrorsCallback function with the JSON response from the Apache mirrors API.

LANGUAGE: javascript
CODE:
$(function() { $.getJSON("https://accumulo.apache.org/mirrors.cgi?as_json", mirrorsCallback); });

----------------------------------------

TITLE: Scanning Accumulo Table in Shell
DESCRIPTION: This Accumulo shell command scans the dataTable to view the ingested file data. The row is the MD5 hash of the file.

LANGUAGE: Accumulo Shell
CODE:
> scan -t dataTable

----------------------------------------

TITLE: Configuring Accumulo Properties for Azure Storage
DESCRIPTION: Accumulo properties configuration for setting up volume choosers and storage locations in both HDFS and Azure Data Lake Storage.

LANGUAGE: ini
CODE:
instance.volumes=hdfs://<namenode>/accumulo,abfss://<file_system>@<storage_account_name>.dfs.core.windows.net/accumulo
general.volume.chooser=org.apache.accumulo.server.fs.PreferredVolumeChooser
general.custom.volume.preferred.default=abfss://<file_system>@<storage_account_name>.dfs.core.windows.net/accumulo
general.custom.volume.preferred.logger=hdfs://<namenode>/accumulo

----------------------------------------

TITLE: Setting Iterators via Accumulo Shell
DESCRIPTION: Demonstrates how to set iterators for a table using the Accumulo shell command.

LANGUAGE: shell
CODE:
usage: setiter [-?] -agg | -class <name> | -filter | -nolabel | 
-regex | -vers [-majc] [-minc] [-n <itername>] -p <pri> [-scan] 
[-t <table>]

user@myinstance mytable> setiter -t mytable -scan -p 10 -n myiter

----------------------------------------

TITLE: Setting Iterators via Accumulo Shell
DESCRIPTION: Demonstrates how to set iterators for a table using the Accumulo shell command.

LANGUAGE: shell
CODE:
usage: setiter [-?] -agg | -class <name> | -filter | -nolabel | 
-regex | -vers [-majc] [-minc] [-n <itername>] -p <pri> [-scan] 
[-t <table>]

user@myinstance mytable> setiter -t mytable -scan -p 10 -n myiter

----------------------------------------

TITLE: Creating Search Form in HTML
DESCRIPTION: This snippet defines an HTML form for the search functionality. It includes an input field for the search query and a submit button.

LANGUAGE: HTML
CODE:
<div class="row">
  <div class="col-lg-6">
    <form action="get" id="site_search">
      <div class="input-group">
        <input class="form-control" type="text" id="search_box" placeholder="Search for...">
        <button class="btn btn-secondary" type="submit">Search</button>
      </div>
    </form>
  </div>
</div>

----------------------------------------

TITLE: Querying Directory Contents in Accumulo
DESCRIPTION: These commands use the QueryUtil class to list the contents of specific directories stored in Accumulo. They demonstrate how to retrieve information from the dirTable.

LANGUAGE: bash
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.simple.dirlist.QueryUtil instance zookeepers username password dirTable exampleVis /local/username
$ ./bin/accumulo org.apache.accumulo.examples.simple.dirlist.QueryUtil instance zookeepers username password dirTable exampleVis /local/username/workspace

----------------------------------------

TITLE: Running Commands in Accumulo Shell
DESCRIPTION: Shows the prefix used for commands that should be run in the Accumulo shell.

LANGUAGE: accumulo
CODE:
> command

----------------------------------------

TITLE: Configuring Accumulo Classpath for S3
DESCRIPTION: Bash commands to modify accumulo-env.sh, adding necessary S3 JARs to the Accumulo classpath. Versions may vary depending on Hadoop version.

LANGUAGE: bash
CODE:
CLASSPATH="${conf}:${lib}/*:${HADOOP_CONF_DIR}:${ZOOKEEPER_HOME}/*:${HADOOP_HOME}/share/hadoop/client/*"
CLASSPATH="${CLASSPATH}:/somedir/hadoop-aws-relocated.3.2.0.jar"
CLASSPATH="${CLASSPATH}:${HADOOP_HOME}/share/hadoop/tools/lib/aws-java-sdk-bundle-1.11.375.jar"
# The following are dependencies needed by by the previous jars and are subject to change
CLASSPATH="${CLASSPATH}:${HADOOP_HOME}/share/hadoop/common/lib/jaxb-api-2.2.11.jar"
CLASSPATH="${CLASSPATH}:${HADOOP_HOME}/share/hadoop/common/lib/jaxb-impl-2.2.3-1.jar"
CLASSPATH="${CLASSPATH}:${HADOOP_HOME}/share/hadoop/common/lib/commons-lang3-3.7jar"
export CLASSPATH

----------------------------------------

TITLE: Querying Accumulo Shard Index for Specific Terms
DESCRIPTION: Command to query the shard index for files containing specific terms ('foo' and 'bar') using the Query.java program.

LANGUAGE: bash
CODE:
$ cd $ACCUMULO_HOME
$ ./bin/accumulo org.apache.accumulo.examples.simple.shard.Query -i instance -z zookeepers -t shard -u username -p password foo bar

----------------------------------------

TITLE: Building Accumulo Native Code
DESCRIPTION: Command to build Accumulo's optional native code, which improves performance and stability. This step is recommended but not mandatory.

LANGUAGE: bash
CODE:
./bin/build_native_library.sh

----------------------------------------

TITLE: Running File Count MapReduce Job
DESCRIPTION: Command to execute MapReduce job for counting direct children and descendants in the file system structure.

LANGUAGE: bash
CODE:
./bin/tool.sh lib/accumulo-examples-*[^c].jar org.apache.accumulo.examples.dirlist.FileCountMR instance zookeepers username password direxample direxample exampleVis exampleVis

----------------------------------------

TITLE: Running Bash Commands in Accumulo Home Directory
DESCRIPTION: Demonstrates the prefix used for bash commands that should be run from the Accumulo home directory.

LANGUAGE: bash
CODE:
$ command

----------------------------------------

TITLE: Running TeraSortIngest MapReduce Job in Accumulo
DESCRIPTION: Command to execute the TeraSortIngest MapReduce job with configurable parameters for data generation. Parameters control the size and characteristics of the generated data, including key sizes, value sizes, and number of splits.

LANGUAGE: bash
CODE:
bin/tool.sh lib/accumulo-examples-simple.jar org.apache.accumulo.examples.simple.mapreduce.TeraSortIngest \
-i instance -z zookeepers -u user -p password \
--count 10 \
--minKeySize 10 \
--maxKeySize 10 \
--minValueSize 78 \
--maxValueSize 78 \
--table sort \
--splits 10 \

----------------------------------------

TITLE: Setting Up ZooKeeper Configuration
DESCRIPTION: This command copies the sample ZooKeeper configuration file to create the actual configuration.

LANGUAGE: bash
CODE:
sudo cp /etc/zookeeper/zoo_sample.cfg /etc/zookeeper/zoo.cfg

----------------------------------------

TITLE: Reading Data from Accumulo Table using Java
DESCRIPTION: Java command to execute the ReadData class, which reads entries from 'hellotable' between specified start and end keys.

LANGUAGE: shell
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.simple.helloworld.ReadData -i instance -z zookeepers -u username -p password -t hellotable --startKey row_0 --endKey row_1001

----------------------------------------

TITLE: Reading Data from Accumulo Table using Java
DESCRIPTION: Java command to execute the ReadData class, which reads entries from 'hellotable' between specified start and end keys.

LANGUAGE: shell
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.simple.helloworld.ReadData -i instance -z zookeepers -u username -p password -t hellotable --startKey row_0 --endKey row_1001

----------------------------------------

TITLE: Populating Apache Mirror Selection Dropdown
DESCRIPTION: This JavaScript function creates an HTML dropdown menu for selecting Apache download mirrors. It populates the dropdown with preferred, HTTP, FTP, and backup mirrors from a JSON response.

LANGUAGE: javascript
CODE:
var mirrorsCallback = function(json) {
  var htmlContent = '<div class="row align-items-center mb-3"><div class="col-3"><h5>Select an Apache download mirror:</h5></div>' +
    '<div class="col-5"><select class="form-select" id="apache-mirror-select">';
  htmlContent += '<optgroup label="Preferred Mirror (based on location)">';
  htmlContent += '<option selected="selected">' + json.preferred + '</option>';
  htmlContent += '</optgroup>';
  if (json.hasOwnProperty('http')) {
    htmlContent += '<optgroup label="HTTP Mirrors">';
    for (var i = 0; i < json.http.length; i++) {
      htmlContent += '<option>' + json.http[i] + '</option>';
    }
    htmlContent += '</optgroup>';
  }
  if (json.hasOwnProperty('ftp')) {
    htmlContent += '<optgroup label="FTP Mirrors">';
    for (var i = 0; i < json.ftp.length; i++) {
      htmlContent += '<option>' + json.ftp[i] + '</option>';
    }
    htmlContent += '</optgroup>';
  }
  if (json.hasOwnProperty('backup')) {
    htmlContent += '<optgroup label="Backup Mirrors">';
    for (var i = 0; i < json.backup.length; i++) {
      htmlContent += '<option>' + json.backup[i] + '</option>';
    }
    htmlContent += '</optgroup>';
  }
  htmlContent += '</select></div></div>';

  $("#mirror_selection").html(htmlContent);

  $( "#apache-mirror-select" ).change(function() {
    var mirror = $("#apache-mirror-select option:selected").text();
    updateLinks(mirror);
  });

  updateLinks(json.preferred);
};

----------------------------------------

TITLE: Regex Pattern for Non-API Imports (Accumulo 1.x)
DESCRIPTION: Regular expression pattern that matches import statements that are not part of Accumulo's public API for version 1.x. Helps identify potentially problematic imports in projects using Accumulo.

LANGUAGE: regex
CODE:
import\s+org\.apache\.accumulo\.(.*\.(impl|thrift|crypto)\..*|(?!(core\.(client|data|security)|minicluster)\.).*))

----------------------------------------

TITLE: Starting the Accumulo Shell
DESCRIPTION: Command to start the Accumulo shell interface. It requires specifying a username and will prompt for the corresponding password.

LANGUAGE: shell
CODE:
$ACCUMULO_HOME/bin/accumulo shell -u [username]

----------------------------------------

TITLE: Using Token File in MapReduce Job
DESCRIPTION: This snippet demonstrates how to use a token file for authentication when running a MapReduce job with Accumulo.

LANGUAGE: shell
CODE:
$ hadoop fs -put root.pw root.pw
$ ./bin/tool.sh lib/accumulo-examples-simple.jar org.apache.accumulo.examples.simple.mapreduce.WordCount -i instance -z zookeepers  --input /user/username/wc -t wordCount -u username -tf tokenfile
$ bin/tool.sh lib/accumulo-examples-simple.jar org.apache.accumulo.examples.simple.mapreduce.TokenFileWordCount instance zookeepers username tokenfile /user/username/wc wordCount

----------------------------------------

TITLE: Installing Accumulo and Dependencies on Fedora 25
DESCRIPTION: This command installs Accumulo, Java JDK, tuned, vim, and Hadoop native libraries using the dnf package manager.

LANGUAGE: bash
CODE:
sudo dnf install accumulo java-1.8.0-openjdk-devel tuned vim hadoop-common-native

----------------------------------------

TITLE: Running MapReduce Word Count Job
DESCRIPTION: This snippet shows how to run the WordCount MapReduce job using the Accumulo examples jar file. It processes the input data and stores the results in the 'wordCount' table.

LANGUAGE: shell
CODE:
$ bin/tool.sh lib/accumulo-examples-simple.jar org.apache.accumulo.examples.simple.mapreduce.WordCount -i instance -z zookeepers  --input /user/username/wc -t wordCount -u username -p password

11/02/07 18:20:11 INFO input.FileInputFormat: Total input paths to process : 1
11/02/07 18:20:12 INFO mapred.JobClient: Running job: job_201102071740_0003
11/02/07 18:20:13 INFO mapred.JobClient:  map 0% reduce 0%
11/02/07 18:20:20 INFO mapred.JobClient:  map 100% reduce 0%
11/02/07 18:20:22 INFO mapred.JobClient: Job complete: job_201102071740_0003
11/02/07 18:20:22 INFO mapred.JobClient: Counters: 6
11/02/07 18:20:22 INFO mapred.JobClient:   Job Counters
11/02/07 18:20:22 INFO mapred.JobClient:     Launched map tasks=1
11/02/07 18:20:22 INFO mapred.JobClient:     Data-local map tasks=1
11/02/07 18:20:22 INFO mapred.JobClient:   FileSystemCounters
11/02/07 18:20:22 INFO mapred.JobClient:     HDFS_BYTES_READ=10487
11/02/07 18:20:22 INFO mapred.JobClient:   Map-Reduce Framework
11/02/07 18:20:22 INFO mapred.JobClient:     Map input records=255
11/02/07 18:20:22 INFO mapred.JobClient:     Spilled Records=0
11/02/07 18:20:22 INFO mapred.JobClient:     Map output records=1452

----------------------------------------

TITLE: Configuring Accumulo for HA Namenode Migration
DESCRIPTION: Example of configuring Accumulo properties for migrating from a non-HA to an HA Namenode setup.

LANGUAGE: properties
CODE:
# instance.dfs.uri and instance.dfs.dir should not be set
instance.volumes=hdfs://nameservice1/accumulo
instance.volumes.replacements=hdfs://namenode.example.com:8020/accumulo hdfs://nameservice1/accumulo

----------------------------------------

TITLE: Jekyll Redirect Configuration in Markdown
DESCRIPTION: Front matter configuration for Jekyll to redirect users to the Accumulo Examples GitHub repository

LANGUAGE: markdown
CODE:
---
title: Latest Accumulo Examples
redirect_to: https://github.com/apache/accumulo-examples
---

----------------------------------------

TITLE: Scanning Accumulo Table After Reservation Example
DESCRIPTION: This snippet shows how to scan the Accumulo table after running the reservation example. It displays the final state of the reservations, including the reservation holder and wait list entries.

LANGUAGE: shell
CODE:
root@test16> table ars
root@test16 ars> scan
room06:20140101 res:0001 []    mallory
room06:20140101 res:0003 []    trent
room06:20140101 res:0004 []    eve
room06:20140101 tx:seq []    6

----------------------------------------

TITLE: Running MapReduce Word Count Job
DESCRIPTION: This snippet shows how to run the WordCount MapReduce job using the Accumulo examples jar file. It processes the input data and stores the results in the 'wordCount' table.

LANGUAGE: shell
CODE:
$ bin/tool.sh lib/accumulo-examples-simple.jar org.apache.accumulo.examples.simple.mapreduce.WordCount -i instance -z zookeepers  --input /user/username/wc -t wordCount -u username -p password

11/02/07 18:20:11 INFO input.FileInputFormat: Total input paths to process : 1
11/02/07 18:20:12 INFO mapred.JobClient: Running job: job_201102071740_0003
11/02/07 18:20:13 INFO mapred.JobClient:  map 0% reduce 0%
11/02/07 18:20:20 INFO mapred.JobClient:  map 100% reduce 0%
11/02/07 18:20:22 INFO mapred.JobClient: Job complete: job_201102071740_0003
11/02/07 18:20:22 INFO mapred.JobClient: Counters: 6
11/02/07 18:20:22 INFO mapred.JobClient:   Job Counters
11/02/07 18:20:22 INFO mapred.JobClient:     Launched map tasks=1
11/02/07 18:20:22 INFO mapred.JobClient:     Data-local map tasks=1
11/02/07 18:20:22 INFO mapred.JobClient:   FileSystemCounters
11/02/07 18:20:22 INFO mapred.JobClient:     HDFS_BYTES_READ=10487
11/02/07 18:20:22 INFO mapred.JobClient:   Map-Reduce Framework
11/02/07 18:20:22 INFO mapred.JobClient:     Map input records=255
11/02/07 18:20:22 INFO mapred.JobClient:     Spilled Records=0
11/02/07 18:20:22 INFO mapred.JobClient:     Map output records=1452

----------------------------------------

TITLE: Configuring core-site.xml for Accumulo Multi-Volume Support
DESCRIPTION: This XML configuration sets up ViewFS, defines mount points for multiple HDFS nameservices, and configures HA fencing methods and ZooKeeper quorum for Accumulo's Multi-Volume Support.

LANGUAGE: xml
CODE:
<property>
  <name>fs.defaultFS</name>
  <value>viewfs:///</value>
</property>
<property>
  <name>fs.viewfs.mounttable.default.link./nameserviceA</name>
  <value>hdfs://nameserviceA</value>
</property>
<property>
  <name>fs.viewfs.mounttable.default.link./nameserviceB</name>
  <value>hdfs://nameserviceB</value>
</property>
<property>
  <name>fs.viewfs.mounttable.default.link./nameserviceA/accumulo/instance_id</name>
  <value>hdfs://nameserviceA/accumulo/instance_id</value>
  <description>Workaround for ACCUMULO-2719</description>
</property>
<property>
  <name>dfs.ha.fencing.methods</name>
  <value>sshfence(hdfs:22)
         shell(/bin/true)</value>
</property>
<property>
  <name>dfs.ha.fencing.ssh.private-key-files</name>
  <value><PRIVATE_KEY_LOCATION></value>
</property>
<property>
  <name>dfs.ha.fencing.ssh.connect-timeout</name>
  <value>30000</value>
</property>
<property>
  <name>ha.zookeeper.quorum</name>
  <value>zkHost1:2181,zkHost2:2181,zkHost3:2181</value>
</property>

----------------------------------------

TITLE: Setting and Getting EC Policies - HDFS Commands
DESCRIPTION: Demonstrates how to set and retrieve EC policies for HDFS directories using the hdfs ec command.

LANGUAGE: bash
CODE:
$ hadoop fs -mkdir foo
$ hdfs ec -setPolicy -policy RS-6-3-64k -path foo
$ hdfs ec -getPolicy -path foo
$ hadoop fs -mkdir foo/bar
$ hdfs ec -getPolicy -path foo/bar

----------------------------------------

TITLE: jQuery UI MIT and CC0 License Text
DESCRIPTION: Complete license text for jQuery UI including MIT license terms for main software, CC0 waiver for sample code, and notice about external library licenses.

LANGUAGE: text
CODE:
Copyright jQuery Foundation and other contributors, https://jquery.org/

This software consists of voluntary contributions made by many
individuals. For exact contribution history, see the revision history
available at https://github.com/jquery/jquery-ui

The following license applies to all parts of this software except as
documented below:

====

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

====

Copyright and related rights for sample code are waived via CC0. Sample
code is defined as all source code contained within the demos directory.

CC0: http://creativecommons.org/publicdomain/zero/1.0/

====

All files located in the node_modules and external directories are
externally maintained libraries used by this software which have their
own licenses; we recommend you read them, as their terms may differ from
the terms above.

----------------------------------------

TITLE: Configuring Accumulo Tracing Settings
DESCRIPTION: Configuration settings required to enable tracing in Accumulo. Requires setting general.opentelemetry.enabled to true and configuring the GlobalOpenTelemetry member variable.

LANGUAGE: markdown
CODE:
* [general.opentelemetry.enabled] must be set to `true`
* The `io.opentelemetry.api.GlobalOpenTelemetry.globalOpenTelemetry` member variable must be set.

----------------------------------------

TITLE: Client Cleanup Utility Usage
DESCRIPTION: Demonstrates usage of the new CleanUp utility to prevent PermGen leaks in application containers

LANGUAGE: java
CODE:
org.apache.accumulo.core.util.CleanUp.cleanUp(); // Call to stop background threads

----------------------------------------

TITLE: Formatting HDFS NameNode
DESCRIPTION: This command formats the HDFS NameNode, which is necessary before starting Hadoop services in a multi-node setup.

LANGUAGE: bash
CODE:
sudo -u hdfs hdfs namenode -format

----------------------------------------

TITLE: Displaying jQuery UI License Text
DESCRIPTION: This snippet contains the full text of the jQuery UI license, which is based on the MIT license. It includes copyright information, terms of use, warranty disclaimers, and additional notes about sample code and external libraries.

LANGUAGE: plaintext
CODE:
Copyright jQuery Foundation and other contributors, https://jquery.org/

This software consists of voluntary contributions made by many
individuals. For exact contribution history, see the revision history
available at https://github.com/jquery/jquery-ui

The following license applies to all parts of this software except as
documented below:

====

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

====

Copyright and related rights for sample code are waived via CC0. Sample
code is defined as all source code contained within the demos directory.

CC0: http://creativecommons.org/publicdomain/zero/1.0/

====

All files located in the node_modules and external directories are
externally maintained libraries used by this software which have their
own licenses; we recommend you read them, as their terms may differ from
the terms above.

----------------------------------------

TITLE: Configuring Accumulo Properties for Metrics
DESCRIPTION: Properties to add to accumulo.properties file to enable and configure Micrometer metrics.

LANGUAGE: properties
CODE:
# Micrometer settings
general.micrometer.enabled=true
general.micrometer.jvm.metrics.enabled=true
general.micrometer.factory=org.apache.accumulo.test.metrics.TestStatsDRegistryFactory

----------------------------------------

TITLE: Setting System Configuration using Java API
DESCRIPTION: Demonstrates setting a system-wide configuration property using the Accumulo Java API's InstanceOperations.

LANGUAGE: java
CODE:
client.instanceOperations().setProperty("table.durability", "flush");

----------------------------------------

TITLE: Configuring Classpath Context in Apache Accumulo Shell
DESCRIPTION: This command sets up a classpath context named 'cx1' in Accumulo, pointing to the location of the custom jar in HDFS. This allows tables to reference external jars for custom functionality.

LANGUAGE: shell
CODE:
root@test15> config -s general.vfs.context.classpath.cx1=hdfs://<namenode host>:<namenode port>/user1/lib/[^.].*.jar

----------------------------------------

TITLE: Running Continuous Query Example
DESCRIPTION: Command to execute continuous random queries using 5 terms per document, displaying matching document counts and query times.

LANGUAGE: bash
CODE:
$ ./bin/accumulo org.apache.accumulo.examples.simple.shard.ContinuousQuery -i instance -z zookeepers --shardTable shard --doc2Term doc2term -u username -p password --terms 5

----------------------------------------

TITLE: Creating and Using Constraints in Apache Accumulo Shell
DESCRIPTION: This snippet demonstrates how to create a table with constraints, add specific constraints, and attempt inserts that violate these constraints. It shows the constraint violation messages and the final state of the table.

LANGUAGE: shell
CODE:
$ ./bin/accumulo shell -u username -p password

Shell - Apache Accumulo Interactive Shell
-
- version: 1.5.0
- instance name: instance
- instance id: 00000000-0000-0000-0000-000000000000
-
- type 'help' for a list of available commands
-
username@instance> createtable testConstraints
username@instance testConstraints> constraint -a org.apache.accumulo.examples.simple.constraints.NumericValueConstraint
username@instance testConstraints> constraint -a org.apache.accumulo.examples.simple.constraints.AlphaNumKeyConstraint
username@instance testConstraints> insert r1 cf1 cq1 1111
username@instance testConstraints> insert r1 cf1 cq1 ABC
  Constraint Failures:
      ConstraintViolationSummary(constrainClass:org.apache.accumulo.examples.simple.constraints.NumericValueConstraint, violationCode:1, violationDescription:Value is not numeric, numberOfViolatingMutations:1)
username@instance testConstraints> insert r1! cf1 cq1 ABC
  Constraint Failures:
      ConstraintViolationSummary(constrainClass:org.apache.accumulo.examples.simple.constraints.NumericValueConstraint, violationCode:1, violationDescription:Value is not numeric, numberOfViolatingMutations:1)
      ConstraintViolationSummary(constrainClass:org.apache.accumulo.examples.simple.constraints.AlphaNumKeyConstraint, violationCode:1, violationDescription:Row was not alpha numeric, numberOfViolatingMutations:1)
username@instance testConstraints> scan
r1 cf1:cq1 []    1111
username@instance testConstraints>

----------------------------------------

TITLE: Retrieving Split Points in Accumulo Shell
DESCRIPTION: Command to retrieve the split points of an Accumulo table, useful for configuring MapReduce range partitioner for bulk ingest.

LANGUAGE: shell
CODE:
user@myinstance mytable> getsplits
aa
ab
ac
...
zx
zy
zz

----------------------------------------

TITLE: Setting Iterators Programmatically in Java
DESCRIPTION: Shows how to set iterators programmatically using the Accumulo Java client API.

LANGUAGE: java
CODE:
scanner.setScanIterators(
    15, // priority
    "com.company.MyIterator", // class name
    "myiter"); // name this iterator

----------------------------------------

TITLE: Setting Iterators Programmatically in Java
DESCRIPTION: Shows how to set iterators programmatically using the Accumulo Java client API.

LANGUAGE: java
CODE:
scanner.setScanIterators(
    15, // priority
    "com.company.MyIterator", // class name
    "myiter"); // name this iterator