TITLE: Implementing JWT Authentication Decorator in Sanic
DESCRIPTION: Defines a protected decorator that checks for a valid JWT token in the request. If the token is valid, the decorated function is executed; otherwise, an unauthorized response is returned.

LANGUAGE: python
CODE:
from functools import wraps

import jwt
from sanic import text


def check_token(request):
    if not request.token:
        return False

    try:
        jwt.decode(
            request.token, request.app.config.SECRET, algorithms=["HS256"]
        )
    except jwt.exceptions.InvalidTokenError:
        return False
    else:
        return True


def protected(wrapped):
    def decorator(f):
        @wraps(f)
        async def decorated_function(request, *args, **kwargs):
            is_authenticated = check_token(request)

            if is_authenticated:
                response = await f(request, *args, **kwargs)
                return response
            else:
                return text("You are unauthorized.", 401)

        return decorated_function

    return decorator(wrapped)

----------------------------------------

TITLE: Creating Hello World Application - Python
DESCRIPTION: Basic Sanic application setup with a single route handler returning 'Hello, world.' Shows the core structure of a Sanic application including async handler and explicit response typing.

LANGUAGE: python
CODE:
from sanic import Sanic
from sanic.response import text

app = Sanic("MyHelloWorldApp")

@app.get("/")
async def hello_world(request):
    return text("Hello, world.")

----------------------------------------

TITLE: Initializing a Basic Sanic Server in Python
DESCRIPTION: This snippet demonstrates how to create a simple Sanic application with a single route that returns 'Hello, world.' It showcases the basic structure of a Sanic app and how to define a route handler.

LANGUAGE: python
CODE:
from sanic import Sanic
from sanic.response import text

app = Sanic("MyHelloWorldApp")

@app.get("/")
async def hello_world(request):
    return text("Hello, world.")

----------------------------------------

TITLE: Basic Sanic Handler Implementation
DESCRIPTION: Demonstrates the basic structure of both synchronous and asynchronous handlers in Sanic. Each handler takes a request parameter and returns an HTTPResponse.

LANGUAGE: python
CODE:
def i_am_a_handler(request):
    return HTTPResponse()

async def i_am_ALSO_a_handler(request):
    return HTTPResponse()

----------------------------------------

TITLE: Basic Route Decorators in Sanic
DESCRIPTION: Examples of different route decorators used in Sanic for defining endpoints.

LANGUAGE: python
CODE:
@app.route("/stairway")
...

@app.get("/to")
...

@app.post("/heaven")
...

----------------------------------------

TITLE: Implementing JWT-based Login in Sanic
DESCRIPTION: Creates a login blueprint with a POST route that generates a JWT token using the server's secret key. This token is returned to the client for use in subsequent authenticated requests.

LANGUAGE: python
CODE:
import jwt
from sanic import Blueprint, text

login = Blueprint("login", url_prefix="/login")


@login.post("/")
async def do_login(request):
    token = jwt.encode({}, request.app.config.SECRET)
    return text(token)

----------------------------------------

TITLE: Configuring Sanic Server with Protected Route
DESCRIPTION: Sets up a Sanic server with a secret key, imports a login blueprint, and defines a protected route. The @protected decorator is used to secure the /secret endpoint.

LANGUAGE: python
CODE:
from sanic import Sanic, text

from auth import protected
from login import login

app = Sanic("AuthApp")
app.config.SECRET = "KEEP_IT_SECRET_KEEP_IT_SAFE"
app.blueprint(login)


@app.get("/secret")
@protected
async def secret(request):
    return text("To go fast, you must be fast.")

----------------------------------------

TITLE: Initializing Basic Sanic Application
DESCRIPTION: Creates a basic Sanic application instance with a custom name. This is typically done in a server.py file.

LANGUAGE: python
CODE:
from sanic import Sanic

app = Sanic("MyHelloWorldApp")

----------------------------------------

TITLE: Implementing API Versioning with Sanic Blueprints
DESCRIPTION: Demonstrates how to use Blueprints to create versioned APIs and group multiple Blueprints under a single version.

LANGUAGE: python
CODE:
auth1 = Blueprint("auth", url_prefix="/auth", version=1)
auth2 = Blueprint("auth", url_prefix="/auth", version=2)

LANGUAGE: python
CODE:
from auth_blueprints import auth1, auth2

app = Sanic(__name__)
app.blueprint(auth1)
app.blueprint(auth2)

LANGUAGE: python
CODE:
auth = Blueprint("auth", url_prefix="/auth")
metrics = Blueprint("metrics", url_prefix="/metrics")

group = Blueprint.group(auth, metrics, version="v1")

----------------------------------------

TITLE: Setting Basic Sanic Configuration Values in Python
DESCRIPTION: Demonstrates how to set configuration values using dot notation and dictionary-style access on the Sanic application object.

LANGUAGE: python
CODE:
app = Sanic("myapp")
app.config.DB_NAME = "appdb"
app.config["DB_USER"] = "appuser"

----------------------------------------

TITLE: JSON Response Handling in Sanic
DESCRIPTION: Demonstrates JSON response handling with custom JSON encoder options and global configuration.

LANGUAGE: python
CODE:
from sanic.response import json

@app.route("/")
async def handler(request):
    return json({"foo": "bar"})

LANGUAGE: python
CODE:
from orjson import dumps

json({"foo": "bar"}, dumps=dumps)

LANGUAGE: python
CODE:
from orjson import dumps

app = Sanic(..., dumps=dumps)

----------------------------------------

TITLE: Defining Sanic Application and Route Handler
DESCRIPTION: Shows how to create a basic Sanic application with a route handler for the root path, returning a JSON response.

LANGUAGE: python
CODE:
# ./path/to/server.py
from sanic import Sanic, Request, json

app = Sanic("TestApp")


@app.get("/")
async def handler(request: Request):
    return json({"foo": "bar"})

----------------------------------------

TITLE: Implementing Contextual Exceptions in Sanic
DESCRIPTION: Shows how to create and raise contextual exceptions with dynamic messages and additional context information.

LANGUAGE: python
CODE:
class TeapotError(SanicException):
    status_code = 418

    @property
    def message(self):
        return f"Sorry {self.extra['name']}, I cannot make you coffee"

raise TeapotError(extra={"name": "Adam"})

raise TeapotError(context={"foo": "bar"})

----------------------------------------

TITLE: Defining Custom Exception Classes in Sanic
DESCRIPTION: Demonstrates how to create custom exception classes with default messages and status codes.

LANGUAGE: python
CODE:
class CustomError(SanicException):
    message = "Something bad happened"

raise CustomError
# or
raise CustomError("Override the default message with something else")

class TeapotError(SanicException):
    status_code = 418
    message = "Sorry, I cannot brew coffee"

raise TeapotError
# or
raise TeapotError(status_code=400)

----------------------------------------

TITLE: Updating Sanic Configuration with a Dictionary in Python
DESCRIPTION: Shows how to use the update() method to set multiple configuration values at once using a dictionary.

LANGUAGE: python
CODE:
db_settings = {
    'DB_HOST': 'localhost',
    'DB_NAME': 'appdb',
    'DB_USER': 'appuser'
}
app.config.update(db_settings)

----------------------------------------

TITLE: Enabling Zero Downtime Restarts in Sanic
DESCRIPTION: This code demonstrates how to enable zero-downtime reloading when restarting workers in Sanic. It uses the zero_downtime argument in the multiplexer's restart method.

LANGUAGE: python
CODE:
app.m.restart(zero_downtime=True)

----------------------------------------

TITLE: URL Generation in Sanic
DESCRIPTION: Shows how to generate URLs for routes using app.url_for() method in Sanic.

LANGUAGE: python
CODE:
@app.route('/')
async def index(request):
    # generate a URL for the endpoint `post_handler`
    url = app.url_for('post_handler', post_id=5)

    # Redirect to `/posts/5`
    return redirect(url)

@app.route('/posts/<post_id>')
async def post_handler(request, post_id):
    ...

----------------------------------------

TITLE: Testing JWT Authentication in Sanic with cURL
DESCRIPTION: Demonstrates how to test the JWT authentication flow using cURL commands. It shows requests to the protected route without a token, obtaining a token via login, and accessing the protected route with both valid and invalid tokens.

LANGUAGE: bash
CODE:
$ curl localhost:9999/secret -i
HTTP/1.1 401 Unauthorized
content-length: 21
connection: keep-alive
content-type: text/plain; charset=utf-8

You are unauthorized.

$ curl localhost:9999/login -X POST                                                                                                                                                                               7 â†µ
eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.e30.rjxS7ztIGt5tpiRWS8BGLUqjQFca4QOetHcZTi061DE

$ curl localhost:9999/secret -i -H "Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.e30.rjxS7ztIGt5tpiRWS8BGLUqjQFca4QOetHcZTi061DE"
HTTP/1.1 200 OK
content-length: 29
connection: keep-alive
content-type: text/plain; charset=utf-8

To go fast, you must be fast.

$ curl localhost:9999/secret -i -H "Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.e30.BAD"                                        
HTTP/1.1 401 Unauthorized
content-length: 21
connection: keep-alive
content-type: text/plain; charset=utf-8

You are unauthorized.

----------------------------------------

TITLE: HTTP Method-Specific Decorators in Sanic
DESCRIPTION: Examples of HTTP method-specific decorators (GET, POST, PUT, PATCH, DELETE, HEAD, OPTIONS) in Sanic.

LANGUAGE: python
CODE:
@app.get('/test')
async def handler(request):
    return text('OK')

@app.post('/test')
async def handler(request):
    return text('OK')

@app.put('/test')
async def handler(request):
    return text('OK')

@app.patch('/test')
async def handler(request):
    return text('OK')

@app.delete('/test')
async def handler(request):
    return text('OK')

@app.head('/test')
async def handler(request):
    return empty()

@app.options('/test')
async def handler(request):
    return empty()

----------------------------------------

TITLE: Basic HTTP Response Handler in Sanic
DESCRIPTION: Demonstrates the most basic way to create and return an HTTP response using Sanic's HTTPResponse class.

LANGUAGE: python
CODE:
from sanic import HTTPResponse, Sanic

app = Sanic("TestApp")


@app.route("")
def handler(_):
    return HTTPResponse()

----------------------------------------

TITLE: Configuring OpenAPI Metadata in Sanic
DESCRIPTION: Example of customizing the OpenAPI specification metadata using the describe method. Shows how to set API title, version, and description with markdown support using textwrap.dedent for cleaner multi-line strings.

LANGUAGE: python
CODE:
from textwrap import dedent

app.ext.openapi.describe(
    "Testing API",
    version="1.2.3",
    description=dedent(
        """
        # Info
        This is a description. It is a good place to add some _extra_ doccumentation.

        **MARKDOWN** is supported.
        """
    ),
)

----------------------------------------

TITLE: Implementing WebSocket Routes in Sanic
DESCRIPTION: Demonstrates two methods of setting up WebSocket routes in Sanic: using the add_websocket_route() method or the @app.websocket decorator. Both approaches achieve the same outcome of creating a WebSocket endpoint.

LANGUAGE: python
CODE:
from sanic import Request, Websocket

async def feed(request: Request, ws: Websocket):
    pass

app.add_websocket_route(feed, "/feed")

LANGUAGE: python
CODE:
from sanic import Request, Websocket

@app.websocket("/feed")
async def feed(request: Request, ws: Websocket):
    pass

----------------------------------------

TITLE: Adding Routes Programmatically in Sanic
DESCRIPTION: Demonstrates how to add routes programmatically using app.add_route() method in Sanic.

LANGUAGE: python
CODE:
async def handler(request):
    return text("OK")

app.add_route(handler, "/test")

----------------------------------------

TITLE: Implementing WebSocket Routes in Sanic
DESCRIPTION: Demonstrates two methods of setting up WebSocket routes in Sanic: using the add_websocket_route() method or the @app.websocket decorator. Both approaches achieve the same outcome of creating a WebSocket endpoint.

LANGUAGE: python
CODE:
from sanic import Request, Websocket

async def feed(request: Request, ws: Websocket):
    pass

app.add_websocket_route(feed, "/feed")

LANGUAGE: python
CODE:
from sanic import Request, Websocket

@app.websocket("/feed")
async def feed(request: Request, ws: Websocket):
    pass

----------------------------------------

TITLE: Setting Application Context
DESCRIPTION: Demonstrates the correct way to attach objects to the Sanic application context using the ctx attribute, which was introduced in v21.3 to prevent name conflicts.

LANGUAGE: python
CODE:
app = Sanic("MyApp")
app.ctx.db = Database()

----------------------------------------

TITLE: Retrieving Sanic App from Registry
DESCRIPTION: Shows how to retrieve a Sanic application instance from the registry using get_app(), which is useful for accessing the app from different locations.

LANGUAGE: python
CODE:
from sanic import Sanic

app = Sanic("my_awesome_server")

# ./path/to/somewhere_else.py
from sanic import Sanic

app = Sanic.get_app("my_awesome_server")

----------------------------------------

TITLE: Creating and Registering a Sanic Blueprint
DESCRIPTION: Demonstrates how to create a Blueprint, define a route within it, and register it with a Sanic application instance.

LANGUAGE: python
CODE:
# ./my_blueprint.py
from sanic.response import json
from sanic import Blueprint

bp = Blueprint("my_blueprint")

@bp.route("/")
async def bp_root(request):
    return json({"my": "blueprint"})

LANGUAGE: python
CODE:
from sanic import Sanic
from my_blueprint import bp

app = Sanic(__name__)
app.blueprint(bp)

----------------------------------------

TITLE: HTML Response Handler in Sanic
DESCRIPTION: Returns an HTML document with UTF-8 encoding and content-type text/html.

LANGUAGE: python
CODE:
from sanic.response import html

@app.route("/")
async def handler(request):
    return html('<!DOCTYPE html><html lang="en"><meta charset="UTF-8"><div>Hi ðŸ˜Ž</div>')

----------------------------------------

TITLE: Basic WebSocket Echo Handler in Sanic
DESCRIPTION: Implements a basic WebSocket echo server that sends an initial message and then echoes back any received messages. Uses the ws.send() and ws.recv() methods for message handling.

LANGUAGE: python
CODE:
from sanic import Request, Websocket

@app.websocket("/feed")
async def feed(request: Request, ws: Websocket):
    while True:
        data = "hello!"
        print("Sending: " + data)
        await ws.send(data)
        data = await ws.recv()
        print("Received: " + data)

----------------------------------------

TITLE: Asynchronous Handler with Sleep
DESCRIPTION: Shows an asynchronous handler implementation using asyncio.sleep, demonstrating improved performance over synchronous version.

LANGUAGE: python
CODE:
@app.get("/async")
async def async_handler(request):
    await asyncio.sleep(0.1)
    return text("Done.")

----------------------------------------

TITLE: Using Shorthand Decorators for Middleware in Sanic
DESCRIPTION: Demonstrates the preferred usage of shorthand decorators @app.on_request and @app.on_response for middleware.

LANGUAGE: python
CODE:
@app.on_request
async def extract_user(request):
    ...

@app.on_response
async def prevent_xss(request, response):
    ...

----------------------------------------

TITLE: Basic Decorator Usage in Sanic Route Handler
DESCRIPTION: Example showing multiple decorators applied to a Sanic route handler for authorization, parameter validation, and user injection.

LANGUAGE: python
CODE:
@app.get("/orders")
@authorized("view_order")
@validate_list_params()
@inject_user()
async def get_order_details(request, params, user):
    ...

----------------------------------------

TITLE: Basic Decorator Usage in Sanic Route Handler
DESCRIPTION: Example showing multiple decorators applied to a Sanic route handler for authorization, parameter validation, and user injection.

LANGUAGE: python
CODE:
@app.get("/orders")
@authorized("view_order")
@validate_list_params()
@inject_user()
async def get_order_details(request, params, user):
    ...

----------------------------------------

TITLE: Running Sanic in Production Mode
DESCRIPTION: Demonstrates how to run Sanic in production mode with optimized settings for better performance.

LANGUAGE: bash
CODE:
sanic path.to.server:app

LANGUAGE: bash
CODE:
sanic path.to.server:app --no-access-logs

----------------------------------------

TITLE: Basic Class-Based View Implementation
DESCRIPTION: Shows how to implement a basic class-based view by subclassing HTTPMethodView. This provides a cleaner way to handle multiple HTTP methods at the same endpoint.

LANGUAGE: python
CODE:
from sanic.views import HTTPMethodView

class FooBar(HTTPMethodView):
    async def get(self, request):
        ...
        
    async def post(self, request):
        ...
        
    async def put(self, request):
        ...

app.add_route(FooBar.as_view(), "/foobar")

----------------------------------------

TITLE: File Response Handling in Sanic
DESCRIPTION: Shows different ways to serve files including mime type and filename customization.

LANGUAGE: python
CODE:
from sanic.response import file

@app.route("/")
async def handler(request):
    return await file("/path/to/whatever.png")

LANGUAGE: python
CODE:
file("/path/to/whatever.png", mime_type="image/png")

LANGUAGE: python
CODE:
file("/path/to/whatever.png", filename="super-awesome-incredible.png")

----------------------------------------

TITLE: Basic DB Setup Listener Registration
DESCRIPTION: Example showing how to register a database setup listener using the register_listener method. The listener runs before server startup to initialize a database connection.

LANGUAGE: python
CODE:
async def setup_db(app):
    app.ctx.db = await db_setup()

app.register_listener(setup_db, "before_server_start")

----------------------------------------

TITLE: Implementing WebSocket Support in Sanic
DESCRIPTION: This snippet demonstrates how to set up a WebSocket endpoint in Sanic. It shows a simple echo server that receives messages and sends them back to the client.

LANGUAGE: python
CODE:
from sanic import Request, Websocket

@app.websocket("/feed")
async def feed(request: Request, ws: Websocket):
    async for msg in ws:
        await ws.send(msg)

----------------------------------------

TITLE: Creating Shared Context Between Worker Processes in Sanic
DESCRIPTION: This snippet shows how to create a shared Queue object accessible to all worker processes in Sanic. The shared object must be created in the main process and attached inside the main_process_start listener.

LANGUAGE: python
CODE:
from multiprocessing import Queue

@app.main_process_start
async def main_process_start(app):
    app.shared_ctx.queue = Queue()

----------------------------------------

TITLE: Middleware Execution Order in Sanic
DESCRIPTION: Demonstrates the order of execution for request and response middleware, including a route handler. Request middleware executes in order of declaration, while response middleware executes in reverse order.

LANGUAGE: python
CODE:
@app.on_request
async def middleware_1(request):
    print("middleware_1")


@app.on_request
async def middleware_2(request):
    print("middleware_2")


@app.on_response
async def middleware_3(request, response):
    print("middleware_3")


@app.on_response
async def middleware_4(request, response):
    print("middleware_4")
    
@app.get("/handler")
async def handler(request):
    print("~ handler ~")
    return text("Done.")

----------------------------------------

TITLE: Managing Request Context in Sanic
DESCRIPTION: Example of using request context (request.ctx) to store user information across middleware and handlers

LANGUAGE: python
CODE:
@app.on_request
async def run_before_handler(request):
    request.ctx.user = await fetch_user_by_token(request.token)

@app.route('/hi')
async def hi_my_name_is(request):
    return text("Hi, my name is {}".format(request.ctx.user.name))

----------------------------------------

TITLE: Creating and Adding Background Task in Sanic
DESCRIPTION: Demonstrates how to create an asynchronous function and add it as a background task to a Sanic application. The task will print a message after a 5-second delay.

LANGUAGE: python
CODE:
async def notify_server_started_after_five_seconds():
    await asyncio.sleep(5)
    print('Server successfully started!')

app.add_task(notify_server_started_after_five_seconds())

----------------------------------------

TITLE: Modifying Request and Response in Sanic Middleware
DESCRIPTION: Shows how middleware can modify request context and response headers, and includes a route handler. Demonstrates the order of execution for middleware and handlers.

LANGUAGE: python
CODE:
@app.on_request
async def add_key(request):
    # Arbitrary data may be stored in request context:
    request.ctx.foo = "bar"


@app.on_response
async def custom_banner(request, response):
    response.headers["Server"] = "Fake-Server"


@app.on_response
async def prevent_xss(request, response):
    response.headers["x-xss-protection"] = "1; mode=block"


@app.get("/")
async def index(request):
    return text(request.ctx.foo)

----------------------------------------

TITLE: Implementing Name Prefixing for Blueprint Groups in Sanic
DESCRIPTION: Demonstrates the new name_prefix parameter for blueprint groups in Sanic, which allows for nested blueprints and groups to be composable while maintaining unique route names.

LANGUAGE: python
CODE:
bp1 = Blueprint("bp1", url_prefix="/bp1")
bp2 = Blueprint("bp2", url_prefix="/bp2")

bp1.add_route(lambda _: ..., "/", name="route1")
bp2.add_route(lambda _: ..., "/", name="route2")

group_a = Blueprint.group(
    bp1, bp2, url_prefix="/group-a", name_prefix="group-a"
)
group_b = Blueprint.group(
    bp1, bp2, url_prefix="/group-b", name_prefix="group-b"
)

app = Sanic("TestApp")
app.blueprint(group_a)
app.blueprint(group_b)

----------------------------------------

TITLE: Complete Class-Based View Example
DESCRIPTION: Demonstrates a complete implementation of a class-based view with all common HTTP methods (GET, POST, PUT, PATCH, DELETE) and both sync and async handlers.

LANGUAGE: python
CODE:
from sanic.views import HTTPMethodView
from sanic.response import text

class SimpleView(HTTPMethodView):

  def get(self, request):
      return text("I am get method")

  # You can also use async syntax
  async def post(self, request):
      return text("I am post method")

  def put(self, request):
      return text("I am put method")

  def patch(self, request):
      return text("I am patch method")

  def delete(self, request):
      return text("I am delete method")

app.add_route(SimpleView.as_view(), "/")

----------------------------------------

TITLE: File Streaming in Sanic
DESCRIPTION: Demonstrates streaming large files like videos to clients.

LANGUAGE: python
CODE:
from sanic.response import file_stream

@app.route("/")
async def handler(request):
    return await file_stream("/path/to/whatever.mp4")

----------------------------------------

TITLE: Implementing a Proxied Sanic Application in Python
DESCRIPTION: This snippet shows how to create a basic Sanic application that is designed to run behind a reverse proxy. It includes handling of forwarded headers to display the correct client IP address and URL.

LANGUAGE: python
CODE:
from sanic import Sanic
from sanic.response import text

app = Sanic("proxied_example")

@app.get("/")
def index(request):
    # This should display external (public) addresses:
    return text(
        f"{request.remote_addr} connected to {request.url_for('index')}\n"
        f"Forwarded: {request.forwarded}\n"
    )

----------------------------------------

TITLE: Configuring Sanic Application Settings
DESCRIPTION: Demonstrates different methods of configuring Sanic application settings using both dot notation and dictionary-style updates.

LANGUAGE: python
CODE:
app = Sanic('myapp')

app.config.DB_NAME = 'appdb'
app.config['DB_USER'] = 'appuser'

db_settings = {
    'DB_HOST': 'localhost',
    'DB_NAME': 'appdb',
    'DB_USER': 'appuser'
}
app.config.update(db_settings)

----------------------------------------

TITLE: Host Header and URL Construction in Sanic
DESCRIPTION: Shows how to handle host headers and construct URLs dynamically using request.host and url_for methods.

LANGUAGE: python
CODE:
app.config.SERVER_NAME = "https://example.com"

@app.route("/hosts", name="foo")
async def handler(request):
    return json(
        {
            "effective host": request.host,
            "host header": request.headers.get("host"),
            "forwarded host": request.forwarded.get("host"),
            "you are here": request.url_for("foo"),
        }
    )

----------------------------------------

TITLE: Configuring Sanic Server with CORS Support
DESCRIPTION: Main server configuration that sets up routes and registers CORS-related listeners and middleware. Demonstrates basic route setup with GET and POST methods.

LANGUAGE: python
CODE:
from sanic import Sanic, text

from cors import add_cors_headers
from options import setup_options

app = Sanic("app")


@app.route("/", methods=["GET", "POST"])
async def do_stuff(request):
    return text("...")


# Add OPTIONS handlers to any route that is missing it
app.register_listener(setup_options, "before_server_start")

# Fill in CORS headers
app.register_middleware(add_cors_headers, "response")

----------------------------------------

TITLE: Implementing Exception Handlers in Sanic
DESCRIPTION: Shows how to implement custom exception handlers using decorators and the error_handler.add() method.

LANGUAGE: python
CODE:
from sanic.exceptions import NotFound

@app.exception(NotFound, SomeCustomException)
async def ignore_404s(request, exception):
    return text("Yep, I totally found the page: {}".format(request.url))

@app.exception(Exception)
async def catch_anything(request, exception):
    ...

async def server_error_handler(request, exception):
    return text("Oops, server error", status=500)

app.error_handler.add(Exception, server_error_handler)

----------------------------------------

TITLE: Running Sanic with HTTPS using CLI
DESCRIPTION: Demonstrates how to run a Sanic application with HTTPS using the command-line interface, automatically loading certificate files.

LANGUAGE: sh
CODE:
sudo sanic myserver:app -H :: -p 443 \
  --tls /etc/letsencrypt/live/example.com/

----------------------------------------

TITLE: Running Sanic Simple Server
DESCRIPTION: Shows how to use Sanic's Simple Server to serve static files from a directory.

LANGUAGE: bash
CODE:
sanic ./path/to/dir --simple

LANGUAGE: bash
CODE:
sanic ./path/to/dir --simple --reload --reload-dir=./path/to/dir

----------------------------------------

TITLE: Dockerfile for Sanic Application
DESCRIPTION: Defines a Dockerfile to build an image for the Sanic application. It uses the official Sanic base image, copies the application files, installs dependencies, and sets the command to run the server.

LANGUAGE: dockerfile
CODE:
FROM sanicframework/sanic:3.8-latest

WORKDIR /sanic

COPY . .

RUN pip install -r requirements.txt

EXPOSE 8000

CMD ["python", "server.py"]

----------------------------------------

TITLE: Authorization Decorator Implementation
DESCRIPTION: Complete implementation of an authorization decorator that checks client authorization status before allowing access to the route handler.

LANGUAGE: python
CODE:
from functools import wraps
from sanic.response import json

def authorized():
    def decorator(f):
        @wraps(f)
        async def decorated_function(request, *args, **kwargs):
            # run some method that checks the request
            # for the client's authorization status
            is_authorized = await check_request_for_authorization_status(request)

            if is_authorized:
                # the user is authorized.
                # run the handler method and return the response
                response = await f(request, *args, **kwargs)
                return response
            else:
                # the user is not authorized.
                return json({"status": "not_authorized"}, 403)
        return decorated_function
    return decorator


@app.route("/")
@authorized()
async def test(request):
    return json({"status": "authorized"})

----------------------------------------

TITLE: File Streaming in Sanic
DESCRIPTION: Example of streaming a large file using file_stream function with custom chunk size and headers.

LANGUAGE: python
CODE:
@app.route("/mp4")
async def handler_file_stream(request):
    return await response.file_stream(
        "/path/to/sample.mp4",
        chunk_size=1024,
        mime_type="application/metalink4+xml",
        headers={
            "Content-Disposition": 'Attachment; filename="nicer_name.meta4"',
            "Content-Type": "application/metalink4+xml",
        },
    )

----------------------------------------

TITLE: Using SSL Context for Full Control
DESCRIPTION: Shows how to use ssl.SSLContext for full control over SSL configuration, including loading certificate chain and setting up for client authentication.

LANGUAGE: python
CODE:
import ssl

context = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)
context.load_cert_chain("certs/fullchain.pem", "certs/privkey.pem")

app.run(host="0.0.0.0", port=8443, ssl=context)

----------------------------------------

TITLE: Running Sanic with Multiple Workers
DESCRIPTION: Demonstrates how to run Sanic with multiple worker processes using command-line arguments.

LANGUAGE: bash
CODE:
sanic server:app --host=0.0.0.0 --port=1337 --workers=4

----------------------------------------

TITLE: File Streaming with Content-Length in Sanic
DESCRIPTION: Implementation of file streaming with manual Content-Length header addition using aiofiles.

LANGUAGE: python
CODE:
from aiofiles import os as async_os
from sanic.response import file_stream

@app.route("/")
async def index(request):
    file_path = "/srv/www/whatever.png"

    file_stat = await async_os.stat(file_path)
    headers = {"Content-Length": str(file_stat.st_size)}

    return await file_stream(
        file_path,
        headers=headers,
    )

----------------------------------------

TITLE: Registering Middleware in Sanic
DESCRIPTION: Demonstrates how to register middleware using the register_middleware method. The middleware extracts user information from the request.

LANGUAGE: python
CODE:
async def extract_user(request):
    request.ctx.user = await extract_user_from_request(request)

app.register_middleware(extract_user, "request")

----------------------------------------

TITLE: Decorator-based Listener Registration
DESCRIPTION: Demonstrates using the @app.listener decorator to register a database setup function as a server startup listener.

LANGUAGE: python
CODE:
@app.listener("before_server_start")
async def setup_db(app):
    app.ctx.db = await db_setup()

----------------------------------------

TITLE: Handling JSON Request Body in Sanic
DESCRIPTION: Example of accessing JSON data from request body using request.json property

LANGUAGE: bash
CODE:
$ curl localhost:8000 -d '{"foo": "bar"}'

LANGUAGE: python
CODE:
>>> print(request.json)
{'foo': 'bar'}

----------------------------------------

TITLE: Defining Security Schemes in Sanic OpenAPI
DESCRIPTION: This snippet demonstrates how to define various security schemes in Sanic using the OpenAPI extension. It includes examples for apiKey, HTTP (bearer and basic), and OAuth2 security schemes.

LANGUAGE: python
CODE:
app.ext.openapi.add_security_scheme("api_key", "apiKey")
app.ext.openapi.add_security_scheme(
    "token",
    "http",
    scheme="bearer",
    bearer_format="JWT",
)
app.ext.openapi.add_security_scheme("token2", "http")
app.ext.openapi.add_security_scheme(
    "oldschool",
    "http",
    scheme="basic",
)
app.ext.openapi.add_security_scheme(
    "oa2",
    "oauth2",
    flows={
        "implicit": {
            "authorizationUrl": "http://example.com/auth",
            "scopes": {
                "on:two": "something",
                "three:four": "something else",
                "threefour": "something else...",
            },
        }
    },
)

----------------------------------------

TITLE: Writing Cookies to Response in Sanic Python
DESCRIPTION: This example shows how to set a cookie on the response object in a Sanic route handler. It creates a text response and adds a cookie named 'test' with various parameters including domain and httponly flag.

LANGUAGE: python
CODE:
@app.route("/cookie")
async def test(request):
    response = text("There's a cookie up in this response")
    response.add_cookie(
        "test",
        "It worked!",
        domain=".yummy-yummy-cookie.com",
        httponly=True
    )
    return response

----------------------------------------

TITLE: Websocket Routes in Sanic
DESCRIPTION: Demonstrates how to define websocket routes in Sanic using both decorator and programmatic approaches.

LANGUAGE: python
CODE:
async def handler(request, ws):
    message = "Start"
    while True:
        await ws.send(message)
        message = await ws.recv()

app.add_websocket_route(handler, "/test")

@app.websocket("/test")
async def handler(request, ws):
    message = "Start"
    while True:
        await ws.send(message)
        message = await ws.recv()

----------------------------------------

TITLE: Additional Constructors for Dependency Injection
DESCRIPTION: Shows how to use a custom constructor (Person.create) for dependency injection and inject multiple objects (PersonID and Person) based on the function signature.

LANGUAGE: python
CODE:
@dataclass
class PersonID:
    person_id: int


@dataclass
class Person:
    person_id: PersonID
    name: str
    age: int

    @classmethod
    async def create(cls, request: Request, person_id: int):
        return cls(person_id=PersonID(person_id), name="noname", age=111)



app.ext.add_dependency(Person, Person.create)
app.ext.add_dependency(PersonID)

@app.get("/person/<person_id:int>")
async def person_details(
    request: Request, person_id: PersonID, person: Person
):
    return text(f"{person_id}\n{person}")

----------------------------------------

TITLE: Initializing Basic Logging in Sanic Python Application
DESCRIPTION: This snippet demonstrates how to set up basic logging in a Sanic application using the default settings. It includes creating a route that logs a message and running the server with debug and access logging enabled.

LANGUAGE: python
CODE:
from sanic import Sanic
from sanic.log import logger
from sanic.response import text

app = Sanic('logging_example')

@app.route('/')
async def test(request):
    logger.info('Here is your log')
    return text('Hello World!')

if __name__ == "__main__":
  app.run(debug=True, access_log=True)

----------------------------------------

TITLE: Response Streaming in Sanic
DESCRIPTION: Example of streaming response content to the client using the respond method and sending chunks of data.

LANGUAGE: python
CODE:
@app.route("/")
async def test(request):
    response = await request.respond(content_type="text/csv")
    await response.send("foo,")
    await response.send("bar")

    # Optionally, you can explicitly end the stream by calling:
    await response.eof()

----------------------------------------

TITLE: Specifying HTTP Methods for Routes in Sanic
DESCRIPTION: Shows how to specify multiple HTTP methods for a route using app.add_route() in Sanic.

LANGUAGE: python
CODE:
app.add_route(
    handler,
    '/test',
    methods=["POST", "PUT"],
)

----------------------------------------

TITLE: Creating Composable Blueprint Structures in Sanic
DESCRIPTION: Illustrates how to create complex, nested Blueprint structures for highly modular application design.

LANGUAGE: python
CODE:
app = Sanic(__name__)
blueprint_1 = Blueprint("blueprint_1", url_prefix="/bp1")
blueprint_2 = Blueprint("blueprint_2", url_prefix="/bp2")
group = Blueprint.group(
    blueprint_1,
    blueprint_2,
    version=1,
    version_prefix="/api/v",
    url_prefix="/grouped",
    strict_slashes=True,
)
primary = Blueprint.group(group, url_prefix="/primary")


@blueprint_1.route("/")
def blueprint_1_default_route(request):
    return text("BP1_OK")


@blueprint_2.route("/")
def blueprint_2_default_route(request):
    return text("BP2_OK")


app.blueprint(group)
app.blueprint(primary)
app.blueprint(blueprint_1)

----------------------------------------

TITLE: Deleting Cookies in Sanic Python
DESCRIPTION: This snippet illustrates two methods of removing cookies in a Sanic route handler. It shows how to delete a cookie immediately and how to set a cookie with a short expiration time.

LANGUAGE: python
CODE:
@app.route("/cookie")
async def test(request):
    response = text("Time to eat some cookies muahaha")

    # This cookie will be set to expire in 0 seconds
    response.delete_cookie("eat_me")

    # This cookie will self destruct in 5 seconds
    response.add_cookie("fast_bake", "Be quick!", max_age=5)

    return response

----------------------------------------

TITLE: Static File Serving in Sanic
DESCRIPTION: Shows how to serve static files and directories using app.static() method in Sanic.

LANGUAGE: python
CODE:
app.static("/static/", "/path/to/directory/")

app.static("/", "/path/to/index.html")

app.static(
    "/user/uploads/",
    "/path/to/uploads/",
    name="uploads",
)

----------------------------------------

TITLE: Using Docstrings for Sanic Endpoint Documentation
DESCRIPTION: This snippet demonstrates how a function's docstring is used to create the summary and description in the OpenAPI documentation. The first line becomes the summary, and the rest becomes the description.

LANGUAGE: python
CODE:
@app.get("/foo")
async def handler(request, something: str):
    """This is a simple foo handler

    It is helpful to know that you could also use **markdown** inside your
    docstrings.

    - one
    - two
    - three"""
    return text(">>>")

LANGUAGE: json
CODE:
"paths": {
  "/foo": {
    "get": {
      "summary": "This is a simple foo handler",
      "description": "It is helpful to know that you could also use **markdown** inside your<br>docstrings.<br><br>- one<br>- two<br>- three",
      "responses": {
        "default": {
          "description": "OK"
        }
      },
      "operationId": "get_handler"
    }
  }
}

----------------------------------------

TITLE: Enabling Development Mode in Sanic via CLI
DESCRIPTION: Shows how to enable development mode in Sanic, which combines debug mode and automatic reloading. This is a convenient option for local development.

LANGUAGE: sh
CODE:
sanic path.to:app --dev

LANGUAGE: sh
CODE:
sanic path.to:app -d

----------------------------------------

TITLE: Adding Custom Type Converters for Sanic Configuration
DESCRIPTION: Demonstrates how to add custom type converters for Sanic configuration values, using UUID as an example.

LANGUAGE: python
CODE:
app = Sanic(..., config=Config(converters=[UUID]))

----------------------------------------

TITLE: Running Sanic with HTTP/3 Support
DESCRIPTION: Demonstrates how to start Sanic with HTTP/3 support using command-line arguments and Python code.

LANGUAGE: bash
CODE:
sanic path.to.server:app --http=3

LANGUAGE: bash
CODE:
sanic path.to.server:app -3

LANGUAGE: python
CODE:
app.run(version=3)

----------------------------------------

TITLE: Initializing Sanic Application for OpenAPI
DESCRIPTION: Basic setup of a Sanic application that will automatically generate API documentation. The OpenAPI documentation will be available at multiple endpoints including /docs, /docs/redoc, and /docs/swagger.

LANGUAGE: python
CODE:
from sanic import Sanic

app = Sanic("MyApp")

# Add all of your views

----------------------------------------

TITLE: OPTIONS Request Handler Setup
DESCRIPTION: Implementation of OPTIONS request handling functionality. Includes route compilation, handler wrapping, and automatic OPTIONS endpoint setup for existing routes.

LANGUAGE: python
CODE:
from collections import defaultdict
from typing import Dict, FrozenSet

from sanic import Sanic, response
from sanic.router import Route

from cors import _add_cors_headers


def _compile_routes_needing_options(
    routes: Dict[str, Route]
) -> Dict[str, FrozenSet]:
    needs_options = defaultdict(list)
    # This is 21.12 and later. You will need to change this for older versions.
    for route in routes.values():
        if "OPTIONS" not in route.methods:
            needs_options[route.uri].extend(route.methods)

    return {
        uri: frozenset(methods) for uri, methods in dict(needs_options).items()
    }


def _options_wrapper(handler, methods):
    def wrapped_handler(request, *args, **kwargs):
        nonlocal methods
        return handler(request, methods)

    return wrapped_handler


async def options_handler(request, methods) -> response.HTTPResponse:
    resp = response.empty()
    _add_cors_headers(resp, methods)
    return resp


def setup_options(app: Sanic, _):
    app.router.reset()
    needs_options = _compile_routes_needing_options(app.router.routes_all)
    for uri, methods in needs_options.items():
        app.add_route(
            _options_wrapper(options_handler, methods),
            uri,
            methods=["OPTIONS"],
        )
    app.router.finalize()

----------------------------------------

TITLE: Adding Signals in Sanic
DESCRIPTION: Shows different methods to add signal handlers, including using decorators and conditional signals.

LANGUAGE: python
CODE:
async def my_signal_handler():
    print("something happened")

app.add_signal(my_signal_handler, "something.happened.ohmy")

LANGUAGE: python
CODE:
@app.signal("something.happened.ohmy")
async def my_signal_handler():
    print("something happened")

LANGUAGE: python
CODE:
async def my_signal_handler1():
    print("something happened")

app.add_signal(
    my_signal_handler,
    "something.happened.ohmy1",
    conditions={"some_condition": "value"}
)

@app.signal("something.happened.ohmy2", conditions={"some_condition": "value"})
async def my_signal_handler2():
    print("something happened")

LANGUAGE: python
CODE:
bp = Blueprint("foo")

@bp.signal("something.happened.ohmy")
async def my_signal_handler():
    print("something happened")

----------------------------------------

TITLE: Loading Sanic Configuration from a Class
DESCRIPTION: Shows how to use a custom class to define and load configuration values into a Sanic application.

LANGUAGE: python
CODE:
class MyConfig:
    A = 1
    B = 2

app.update_config(MyConfig)

----------------------------------------

TITLE: Controlling Sanic Workers Using Multiplexer
DESCRIPTION: This code demonstrates various ways to control Sanic workers using the multiplexer, including terminating the application, restarting specific workers, or restarting all workers.

LANGUAGE: python
CODE:
# shutdown the entire application and all processes
app.m.name.terminate()

# restart the current worker only
app.m.name.restart()

# restart specific workers only (comma delimited)
app.m.name.restart("Sanic-Server-4-0,Sanic-Server-7-0")

# restart ALL workers
app.m.name.restart(all_workers=True)  # Available v22.12+

----------------------------------------

TITLE: Registering Routes with SQLAlchemy in Sanic
DESCRIPTION: Python code demonstrating how to register routes in Sanic using SQLAlchemy for database operations.

LANGUAGE: python
CODE:
# ./server.py
from sqlalchemy import select
from sqlalchemy.orm import selectinload
from sanic.response import json

from models import Car, Person


@app.post("/user")
async def create_user(request):
    session = request.ctx.session
    async with session.begin():
        car = Car(brand="Tesla")
        person = Person(name="foo", cars=[car])
        session.add_all([person])
    return json(person.to_dict())


@app.get("/user/<pk:int>")
async def get_user(request, pk):
    session = request.ctx.session
    async with session.begin():
        stmt = select(Person).where(Person.id == pk).options(selectinload(Person.cars))
        result = await session.execute(stmt)
        person = result.scalar()

    if not person:
        return json({})

    return json(person.to_dict())

----------------------------------------

TITLE: Docker Compose Configuration for Sanic and Nginx
DESCRIPTION: Docker Compose YAML file defining services for the Sanic application and Nginx. It sets up networking, port mappings, and volume mounts for the Nginx configuration.

LANGUAGE: yaml
CODE:
version: "3"

services:
  mysanic:
    image: my-sanic-image
    ports:
      - "8000:8000"
    restart: always

  mynginx:
    image: nginx:1.13.6-alpine
    ports:
      - "80:80"
    depends_on:
      - mysanic
    volumes:
      - ./mysanic.conf:/etc/nginx/conf.d/mysanic.conf
    restart: always

networks:
  default:
    driver: bridge

----------------------------------------

TITLE: Setting Custom Response Headers in Sanic
DESCRIPTION: Demonstrates setting custom response headers both in route handlers and middleware functions.

LANGUAGE: python
CODE:
@app.route("/")
async def handler(request):
    return text("Done.", headers={"content-language": "en-US"})

@app.middleware("response")
async def add_csp(request, response):
    response.headers["content-security-policy"] = "default-src 'none'; script-src 'self'; connect-src 'self'; img-src 'self'; style-src 'self';base-uri 'self';form-action 'self'"

----------------------------------------

TITLE: Running Sanic with ASGI Servers
DESCRIPTION: Demonstrates how to run Sanic applications using ASGI-compliant web servers like Uvicorn and Hypercorn.

LANGUAGE: bash
CODE:
uvicorn myapp:app

LANGUAGE: bash
CODE:
hypercorn myapp:app

----------------------------------------

TITLE: Setting Custom Response Headers in Sanic
DESCRIPTION: Demonstrates setting custom response headers both in route handlers and middleware functions.

LANGUAGE: python
CODE:
@app.route("/")
async def handler(request):
    return text("Done.", headers={"content-language": "en-US"})

@app.middleware("response")
async def add_csp(request, response):
    response.headers["content-security-policy"] = "default-src 'none'; script-src 'self'; connect-src 'self'; img-src 'self'; style-src 'self';base-uri 'self';form-action 'self'"

----------------------------------------

TITLE: Implementing Universal Exception Signal in Sanic
DESCRIPTION: Demonstrates how to use the new universal exception signal in Sanic to catch and report all exceptions raised during server runtime. This can be used for consistent error handling and reporting.

LANGUAGE: python
CODE:
from sanic.signals import Event

@app.signal(Event.SERVER_LIFECYCLE_EXCEPTION)
async def catch_any_exception(app: Sanic, exception: Exception):
    app.ctx.my_error_reporter_utility.error(exception)

----------------------------------------

TITLE: Request Streaming with HTTPMethodView in Sanic
DESCRIPTION: Implementation of a streaming request handler using HTTPMethodView class. The handler reads the request body in chunks and concatenates them until the stream is complete.

LANGUAGE: python
CODE:
from sanic.views import stream

class SimpleView(HTTPMethodView):
    @stream
    async def post(self, request):
        result = ""
        while True:
            body = await request.stream.read()
            if body is None:
                break
            result += body.decode("utf-8")
        return text(result)

----------------------------------------

TITLE: Creating a Custom Error Handler Class in Sanic
DESCRIPTION: Demonstrates how to create a custom error handler by subclassing Sanic's ErrorHandler.

LANGUAGE: python
CODE:
from sanic.handlers import ErrorHandler

class CustomErrorHandler(ErrorHandler):
    def default(self, request: Request, exception: Exception) -> HTTPResponse:
        ''' handles errors that have no error handlers assigned '''
        # You custom error handling logic...
        status_code = getattr(exception, "status_code", 500)
        return json({
          "error": str(exception),
          "foo": "bar"
        }, status=status_code)

app.error_handler = CustomErrorHandler()

----------------------------------------

TITLE: Complete Listener Implementation Example
DESCRIPTION: Comprehensive example showing all listener types and their execution order across multiple workers.

LANGUAGE: python
CODE:
@app.listener("before_server_start")
async def listener_1(app, loop):
    print("listener_1")

@app.before_server_start
async def listener_2(app, loop):
    print("listener_2")

@app.listener("after_server_start")
async def listener_3(app, loop):
    print("listener_3")

@app.after_server_start
async def listener_4(app, loop):
    print("listener_4")

@app.listener("before_server_stop")
async def listener_5(app, loop):
    print("listener_5")

@app.before_server_stop
async def listener_6(app, loop):
    print("listener_6")

@app.listener("after_server_stop")
async def listener_7(app, loop):
    print("listener_7")

@app.after_server_stop
async def listener_8(app, loop):
    print("listener_8")

LANGUAGE: bash
CODE:
[pid: 1000000] [INFO] Goin' Fast @ http://127.0.0.1:9999
[pid: 1000000] [INFO] listener_0
[pid: 1111111] [INFO] listener_1
[pid: 1111111] [INFO] listener_2
[pid: 1111111] [INFO] listener_3
[pid: 1111111] [INFO] listener_4
[pid: 1111111] [INFO] Starting worker [1111111]
[pid: 1222222] [INFO] listener_1
[pid: 1222222] [INFO] listener_2
[pid: 1222222] [INFO] listener_3
[pid: 1222222] [INFO] listener_4
[pid: 1222222] [INFO] Starting worker [1222222]
[pid: 1111111] [INFO] Stopping worker [1111111]
[pid: 1222222] [INFO] Stopping worker [1222222]
[pid: 1222222] [INFO] listener_6
[pid: 1222222] [INFO] listener_5
[pid: 1222222] [INFO] listener_8
[pid: 1222222] [INFO] listener_7
[pid: 1111111] [INFO] listener_6
[pid: 1111111] [INFO] listener_5
[pid: 1111111] [INFO] listener_8
[pid: 1111111] [INFO] listener_7
[pid: 1000000] [INFO] listener_9
[pid: 1000000] [INFO] Server Stopped

----------------------------------------

TITLE: Using Built-in Signals in Sanic
DESCRIPTION: Demonstrates how to use Sanic's built-in signals and the Event enum for easier signal handling.

LANGUAGE: python
CODE:
@app.signal("http.lifecycle.complete")
async def my_signal_handler(conn_info):
    print("Connection has been closed")

LANGUAGE: python
CODE:
from sanic.signals import Event

@app.signal(Event.HTTP_LIFECYCLE_COMPLETE)
async def my_signal_handler(conn_info):
    print("Connection has been closed")

----------------------------------------

TITLE: Using Named Tasks with WebSockets in Sanic
DESCRIPTION: Illustrates a practical example of using named tasks with WebSockets in Sanic. It creates a task for receiving messages and cleans up the task when the WebSocket closes.

LANGUAGE: python
CODE:
async def receiver(ws):
    while True:
        message = await ws.recv()
        if not message:
            break
        print(f"Received: {message}")

@app.websocket("/feed")
async def feed(request, ws):
    task_name = f"receiver:{request.id}"
    request.app.add_task(receiver(ws), name=task_name)
    try:
        while True:
            await request.app.event("my.custom.event")
            await ws.send("A message")
    finally:
        # When the websocket closes, let's cleanup the task
        await request.app.cancel_task(task_name)
        request.app.purge_tasks()

----------------------------------------

TITLE: CORS Headers Implementation
DESCRIPTION: Implementation of CORS header management functions. Includes helper functions to add necessary CORS headers to responses and handle both normal and OPTIONS requests.

LANGUAGE: python
CODE:
from typing import Iterable


def _add_cors_headers(response, methods: Iterable[str]) -> None:
    allow_methods = list(set(methods))
    if "OPTIONS" not in allow_methods:
        allow_methods.append("OPTIONS")
    headers = {
        "Access-Control-Allow-Methods": ",".join(allow_methods),
        "Access-Control-Allow-Origin": "mydomain.com",
        "Access-Control-Allow-Credentials": "true",
        "Access-Control-Allow-Headers": (
            "origin, content-type, accept, "
            "authorization, x-xsrf-token, x-request-id"
        ),
    }
    response.headers.extend(headers)


def add_cors_headers(request, response):
    if request.method != "OPTIONS":
        methods = [method for method in request.route.methods]
        _add_cors_headers(response, methods)

----------------------------------------

TITLE: Using Signals with Blueprints in Sanic
DESCRIPTION: Demonstrates how signals work with blueprints, including scoping and dispatch behavior.

LANGUAGE: python
CODE:
bp = Blueprint("bp")

app_counter = 0
bp_counter = 0

@app.signal("foo.bar.baz")
def app_signal():
    nonlocal app_counter
    app_counter += 1

@bp.signal("foo.bar.baz")
def bp_signal():
    nonlocal bp_counter
    bp_counter += 1

await app.dispatch("foo.bar.baz")
assert app_counter == 1
assert bp_counter == 1

await bp.dispatch("foo.bar.baz")
assert app_counter == 1
assert bp_counter == 2

----------------------------------------

TITLE: Implementing Per-Route Versioning in Sanic
DESCRIPTION: This snippet demonstrates how to add version numbers directly to individual routes in Sanic. It shows two different versions of the same endpoint, each responding with a different message.

LANGUAGE: python
CODE:
# /v1/text
@app.route("/text", version=1)
def handle_request(request):
    return response.text("Hello world! Version 1")

# /v2/text
@app.route("/text", version=2)
def handle_request(request):
    return response.text("Hello world! Version 2")

----------------------------------------

TITLE: Configuring TLS for Production
DESCRIPTION: Shows how to configure TLS encryption for the Inspector in production environments.

LANGUAGE: python
CODE:
app.config.INSPECTOR_TLS_CERT = "/path/to/cert.pem"
app.config.INSPECTOR_TLS_KEY = "/path/to/key.pem"

----------------------------------------

TITLE: Class-Wide Decorators in Views
DESCRIPTION: Demonstrates how to apply decorators to all methods in a class-based view using the decorators class variable.

LANGUAGE: python
CODE:
class ViewWithDecorator(HTTPMethodView):
  decorators = [some_decorator_here]

  def get(self, request, name):
    return text("Hello I have a decorator")

  def post(self, request, name):
    return text("Hello I also have a decorator")

app.add_route(ViewWithDecorator.as_view(), "/url")

----------------------------------------

TITLE: Raising SanicException in Python
DESCRIPTION: Demonstrates how to raise a SanicException with a custom message and status code in a Sanic route handler.

LANGUAGE: python
CODE:
from sanic.exceptions import SanicException

@app.route("/youshallnotpass")
async def no_no(request):
        raise SanicException("Something went wrong.", status_code=501)

----------------------------------------

TITLE: Using @openapi.definition Decorator
DESCRIPTION: Example of using the @openapi.definition decorator to define multiple aspects of an API operation, including body, summary, tag, and response.

LANGUAGE: python
CODE:
@openapi.definition(
    body=RequestBody(UserProfile, required=True),
    summary="User profile update",
    tag="one",
    response=[Success, Response(Failure, status=400)],
)

----------------------------------------

TITLE: Implementing Error Reporting in Sanic
DESCRIPTION: Demonstrates how to implement an error reporting handler using the report_exception signal in Sanic.

LANGUAGE: python
CODE:
@app.report_exception
async def catch_any_exception(app: Sanic, exception: Exception):
    print("Caught exception:", exception)

----------------------------------------

TITLE: Custom Configuration Implementation
DESCRIPTION: Shows how to create and use a custom configuration class by subclassing Sanic's Config class to add custom properties or logic.

LANGUAGE: python
CODE:
from sanic.config import Config

class MyConfig(Config):
    FOO = "bar"

app = Sanic(..., config=MyConfig())

----------------------------------------

TITLE: Styling the 'Hello World' Page (CSS)
DESCRIPTION: This CSS file provides styling for the 'Hello World' web page. It sets up the layout, colors, and background image for the page, creating a visually appealing design.

LANGUAGE: css
CODE:
#hello_world {
    width: 1000px;
    margin-left: auto;
    margin-right: auto;
    margin-top: 100px;

    padding: 100px;
    color: aqua;
    text-align: center;
    font-size: 100px;
    font-family: monospace;

    background-color: rgba(0, 0, 0, 0.75);

    border-radius: 10px;
    box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.75);
}

body {
    background-image: url("/files/lake.jpg");
    background-repeat: no-repeat;
    background-size: cover;
}

----------------------------------------

TITLE: Creating Named Tasks in Sanic (Python 3.8+)
DESCRIPTION: Demonstrates how to create, retrieve, cancel, and purge named tasks in Sanic. This feature is only supported in Python 3.8 and above.

LANGUAGE: python
CODE:
app.add_task(slow_work, name="slow_task")

LANGUAGE: python
CODE:
task = app.get_task("slow_task")

LANGUAGE: python
CODE:
await app.cancel_task("slow_task")

LANGUAGE: python
CODE:
app.purge_tasks()

----------------------------------------

TITLE: Running Sanic in Single Process Mode
DESCRIPTION: These examples demonstrate different ways to run Sanic in single process mode, which opts out of running multiple processes and disables features that require multiple processes.

LANGUAGE: sh
CODE:
sanic path.to.server:app --single-process

LANGUAGE: python
CODE:
if __name__ == "__main__":
    app.run(single_process=True)

LANGUAGE: python
CODE:
if __name__ == "__main__":
    app.prepare(single_process=True)
    Sanic.serve_single()

----------------------------------------

TITLE: Running Sanic Application with Factory
DESCRIPTION: Shows different ways to run a Sanic application created using a factory function.

LANGUAGE: bash
CODE:
sanic server:create_app --factory

LANGUAGE: bash
CODE:
sanic "server:create_app()"

LANGUAGE: bash
CODE:
sanic server:create_app

----------------------------------------

TITLE: Using @openapi.description Decorator
DESCRIPTION: Example of using the @openapi.description decorator to provide a detailed description of an API operation, including Markdown formatting.

LANGUAGE: python
CODE:
@openapi.description(
    """This is a **description**.

## You can use `markdown`

- And
- make
- lists.
"""
)

----------------------------------------

TITLE: Directory Structure for Sanic Docker Project
DESCRIPTION: Shows the basic file structure for a Sanic project to be containerized with Docker.

LANGUAGE: text
CODE:
# /path/to/SanicDocker
SanicDocker
â”œâ”€â”€ requirements.txt
â”œâ”€â”€ dockerfile
â””â”€â”€ server.py

----------------------------------------

TITLE: Directory Structure for Sanic Docker Project
DESCRIPTION: Shows the basic file structure for a Sanic project to be containerized with Docker.

LANGUAGE: text
CODE:
# /path/to/SanicDocker
SanicDocker
â”œâ”€â”€ requirements.txt
â”œâ”€â”€ dockerfile
â””â”€â”€ server.py

----------------------------------------

TITLE: Running Sanic with Gunicorn
DESCRIPTION: Shows how to run a Sanic application using Gunicorn with the Uvicorn worker class.

LANGUAGE: bash
CODE:
gunicorn myapp:app --bind 0.0.0.0:1337 --worker-class uvicorn.workers.UvicornWorker

----------------------------------------

TITLE: Defining Sanic Application Factory
DESCRIPTION: Demonstrates how to create a Sanic application using the factory pattern, which returns an instance of Sanic.

LANGUAGE: python
CODE:
from sanic import Sanic

def create_app() -> Sanic:
    app = Sanic("MyApp")

    return app

----------------------------------------

TITLE: Raising NotFound Exception in Sanic Login Route
DESCRIPTION: Shows how to raise a NotFound exception in a login route when a user is not found.

LANGUAGE: python
CODE:
from sanic import exceptions

@app.route("/login")
async def login(request):
    user = await some_login_func(request)
    if not user:
        raise exceptions.NotFound(
            f"Could not find user with username={request.json.username}"
        )

----------------------------------------

TITLE: Serving Static Files with Sanic
DESCRIPTION: These snippets show different ways to serve static files using Sanic. They demonstrate how to serve a single file, a directory, and how to enable automatic index serving and directory browsing.

LANGUAGE: python
CODE:
app.static("/", "/path/to/index.html")
app.static("/uploads/", "/path/to/uploads/")

LANGUAGE: python
CODE:
app.static(
    "/uploads/",
    "/path/to/uploads/",
    index="index.html"
)

LANGUAGE: python
CODE:
app.static(
    "/uploads/",
    "/path/to/uploads/",
    directory_view=True
)

----------------------------------------

TITLE: Configuring Nginx as a Reverse Proxy for Sanic
DESCRIPTION: This Nginx configuration sets up SSL, defines an upstream for the Sanic application, configures proxying with keep-alive and WebSocket support, and includes redirects for WWW to non-WWW and HTTP to HTTPS.

LANGUAGE: nginx
CODE:
# Files managed by Certbot
ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;
ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;

# Sanic service
upstream example.com {
  keepalive 100;
  server 127.0.0.1:8001;
  #server unix:/tmp//sanic.sock;
}

server {
  server_name example.com;
  listen 443 ssl http2 default_server;
  listen [::]:443 ssl http2 default_server;
  # Serve static files if found, otherwise proxy to Sanic
  location / {
    root /srv/sanicexample/static;
    try_files $uri @sanic;
  }
  location @sanic {
    proxy_pass http://$server_name;
    # Allow fast streaming HTTP/1.1 pipes (keep-alive, unbuffered)
    proxy_http_version 1.1;
    proxy_request_buffering off;
    proxy_buffering off;
    proxy_set_header forwarded by=\"_$hostname\";$for_addr;proto=$scheme;host=\"$http_host\";
    # Allow websockets and keep-alive (avoid connection: close)
    proxy_set_header connection "upgrade";
    proxy_set_header upgrade $http_upgrade;
  }
}

# Redirect WWW to no-WWW
server {
  listen 443 ssl http2;
  listen [::]:443 ssl http2;
  server_name ~^www\.(.*)$;
  return 308 $scheme://$1$request_uri;
}

# Redirect all HTTP to HTTPS with no-WWW
server {
  listen 80 default_server;
  listen [::]:80 default_server;
  server_name ~^(?:www\.)?(.*)$;
  return 308 https://$1$request_uri;
}

# Forwarded for= client IP address formatting
map $remote_addr $for_addr {
  ~^[0-9.]+$          "for=$remote_addr";        # IPv4 client address
  ~^[0-9A-Fa-f:.]+$   "for=\"[$remote_addr]\"";  # IPv6 bracketed and quoted
  default             "for=unknown";             # Unix socket
}

----------------------------------------

TITLE: Accessing Authorization Tokens in Sanic
DESCRIPTION: Demonstrates how to access Bearer or Token authorization headers through the request.token property.

LANGUAGE: python
CODE:
@app.route("/")
async def handler(request):
    return text(request.token)

----------------------------------------

TITLE: Factory Pattern Sanic Application
DESCRIPTION: Shows how to implement a factory pattern for Sanic application creation, useful for dynamic initialization. Includes CLI command with --factory flag.

LANGUAGE: sh
CODE:
sanic path.to.server:create_app --factory

LANGUAGE: python
CODE:
# server.py
def create_app():
    app = Sanic("TestApp")

    @app.get("/")
    async def handler(request: Request):
        return json({"foo": "bar"})

    return app

----------------------------------------

TITLE: Implementing TRACE and CONNECT Methods in Sanic
DESCRIPTION: Example showing how to implement TRACE and CONNECT HTTP methods using the route decorator in Sanic Extensions.

LANGUAGE: python
CODE:
@app.route("/", methods=["trace", "connect"])
async def handler(_):
    return empty()

----------------------------------------

TITLE: Creating a Systemd Service Unit for Sanic Application
DESCRIPTION: This systemd unit file defines a service for running the Sanic application, including environment variables, working directory, and restart policies.

LANGUAGE: systemd
CODE:
[Unit]
Description=Sanic Example

[Service]
DynamicUser=Yes
WorkingDirectory=/srv/sanicservice
Environment=SANIC_PROXY_SECRET=_hostname
ExecStart=sanic proxied_example --port 8001 --fast
Restart=always

[Install]
WantedBy=multi-user.target

----------------------------------------

TITLE: Extracting Objects from Request for Dependency Injection
DESCRIPTION: Shows how to extract and preprocess details from the request to create a UserProfile object, demonstrating a more complex use case of dependency injection.

LANGUAGE: python
CODE:
@dataclass
class User:
    name: str


@dataclass
class UserProfile:
    user: User
    age: int = field(default=0)
    email: str = field(default="")

    def __json__(self):
        return ujson.dumps(
            {
                "name": self.user.name,
                "age": self.age,
                "email": self.email,
            }
        )


async def fake_request_to_db(body):
    today = date.today()
    email = f'{body["name"]}@something.com'.lower()
    difference = today - date.fromisoformat(body["birthday"])
    age = int(difference.days / 365)
    return UserProfile(
        User(body["name"]),
        age=age,
        email=email,
    )


async def compile_profile(request: Request):
    await request.receive_body()
    profile = await fake_request_to_db(request.json)
    return profile


app.ext.add_dependency(UserProfile, compile_profile)


@app.patch("/profile")
async def update_profile(request, profile: UserProfile):
    return json(profile)

----------------------------------------

TITLE: Defining Tortoise-ORM Model
DESCRIPTION: Python code defining a Tortoise-ORM model for the Users entity.

LANGUAGE: python
CODE:
# ./models.py
from tortoise import Model, fields


class Users(Model):
    id = fields.IntField(pk=True)
    name = fields.CharField(50)

    def __str__(self):
        return f"I am {self.name}"

----------------------------------------

TITLE: HTML Generation using html5tagger in Sanic
DESCRIPTION: Shows how to use html5tagger to generate HTML content programmatically with Python, including table creation and formatted text.

LANGUAGE: python
CODE:
from html5tagger import Document
from sanic import Request, Sanic, html

app = Sanic("TestApp")


@app.get("/")
async def handler(request: Request):
    doc = Document("My Website")
    doc.h1("Hello, world.")
    with doc.table(id="data"):
        doc.tr.th("First").th("Second").th("Third")
        doc.tr.td(1).td(2).td(3)
    doc.p(class_="text")("A paragraph with ")
    doc.a(href="/files")("a link")(" and ").em("formatting")
    return html(doc)

LANGUAGE: html
CODE:
<!DOCTYPE html>
<meta charset="utf-8">
<title>My Website</title>
<h1>Hello, world.</h1>
<table id=data>
    <tr>
        <th>First
        <th>Second
        <th>Third
    <tr>
        <td>1
        <td>2
        <td>3
</table>
<p class=text>
    A paragraph with <a href="/files">a link</a> and <em>formatting</em>

----------------------------------------

TITLE: Overriding CORS Settings for Specific Routes in Sanic
DESCRIPTION: Shows how to use the @sanic_ext.cors() decorator to override app-wide CORS settings for a specific route. This example sets a different origin for a particular endpoint.

LANGUAGE: python
CODE:
from sanic_ext import cors

app.config.CORS_ORIGINS = "https://foo.com"


@app.get("/", host="bar.com")
@cors(origins="https://bar.com")
async def hello_world(request):
    return text("Hello, world.")

----------------------------------------

TITLE: Creating Custom Serializer in Sanic
DESCRIPTION: Shows how to create and use a custom serializer function with the @serializer decorator. The custom function returns a JSON response with additional metadata.

LANGUAGE: python
CODE:
def message(retval, request, action, status):
    return json(
        {
            "request_id": str(request.id),
            "action": action,
            "message": retval,
        },
        status=status,
    )


@app.post("/<action>")
@serializer(message)
async def do_action(request, action: str):
    return "This is a message"

----------------------------------------

TITLE: Running Sanic in Single Process Mode
DESCRIPTION: Demonstrates how to run Sanic in a single process, disabling auto-reload and the worker manager.

LANGUAGE: bash
CODE:
sanic server:app --host=0.0.0.0 --port=1337 --single-process

----------------------------------------

TITLE: Decorator Pattern without Arguments
DESCRIPTION: Template for creating decorators that don't accept any arguments and can be used directly.

LANGUAGE: python
CODE:
def foobar(func):
    def decorator(f):
        @wraps(f)
        async def decorated_function(request, *args, **kwargs):

            response = f(request, *args, **kwargs)
            if isawaitable(response):
                response = await response

            return response

        return decorated_function

    return decorator(func)

----------------------------------------

TITLE: Path Parameters in Class-Based Views
DESCRIPTION: Shows how to use path parameters with class-based views, allowing dynamic URL routing with parameter capture.

LANGUAGE: python
CODE:
class NameView(HTTPMethodView):

  def get(self, request, name):
    return text("Hello {}".format(name))

app.add_route(NameView.as_view(), "/<name>")

----------------------------------------

TITLE: Using SanicASGITestClient in Python
DESCRIPTION: Shows how to use the async ASGI test client for testing Sanic applications. This client executes Sanic as an ASGI application without spinning up a server.

LANGUAGE: python
CODE:
await app.asgi_client.get("/path/to/endpoint")

----------------------------------------

TITLE: Asynchronous ASGI Client Implementation
DESCRIPTION: Example of writing an asynchronous test using Sanic's ASGI client with pytest-asyncio. Demonstrates async test fixture setup and assertions.

LANGUAGE: python
CODE:
import pytest
from sanic import Sanic, response

@pytest.fixture
def app():
    sanic_app = Sanic(__name__)

    @sanic_app.get("/")
    def basic(request):
        return response.text("foo")

    return sanic_app

@pytest.mark.asyncio
async def test_basic_asgi_client(app):
    request, response = await app.asgi_client.get("/")

    assert request.method.lower() == "get"
    assert response.body == b"foo"
    assert response.status == 200

----------------------------------------

TITLE: Loading Sanic Configuration from a Dictionary
DESCRIPTION: Demonstrates how to update Sanic configuration using a dictionary with the update_config method.

LANGUAGE: python
CODE:
app.update_config({"A": 1, "B": 2})

----------------------------------------

TITLE: Decorator Pattern with Required Arguments
DESCRIPTION: Template for creating decorators that always require arguments when implemented.

LANGUAGE: python
CODE:
def foobar(arg1, arg2):
    def decorator(f):
        @wraps(f)
        async def decorated_function(request, *args, **kwargs):

            response = f(request, *args, **kwargs)
            if isawaitable(response):
                response = await response

            return response

        return decorated_function

    return decorator

----------------------------------------

TITLE: Validating Multiple Input Sources in Sanic
DESCRIPTION: This snippet demonstrates how to use the validate decorator to validate multiple input sources (JSON, query, and form data) in a single Sanic route handler.

LANGUAGE: python
CODE:
@validate(
    json=ModelA,
    query=ModelB,
    form=ModelC,
)

----------------------------------------

TITLE: Synchronous Test Client Implementation
DESCRIPTION: Example of writing a synchronous test using Sanic's test client. Shows how to create a test fixture with a basic route and perform GET request assertions.

LANGUAGE: python
CODE:
import pytest
from sanic import Sanic, response


@pytest.fixture
def app():
    sanic_app = Sanic("TestSanic")

    @sanic_app.get("/")
    def basic(request):
        return response.text("foo")

    return sanic_app

def test_basic_test_client(app):
    request, response = app.test_client.get("/")

    assert request.method.lower() == "get"
    assert response.body == b"foo"
    assert response.status == 200

----------------------------------------

TITLE: Loading Sanic Configuration from a Python File
DESCRIPTION: Shows how to load configuration values into a Sanic application from an external Python file.

LANGUAGE: python
CODE:
# my_config.py
A = 1
B = 2

LANGUAGE: python
CODE:
>>> app.update_config("/path/to/my_config.py")
>>> print(app.config.A)
1

----------------------------------------

TITLE: Sanic Extensions UI Configuration Options
DESCRIPTION: Configuration table showing all available options for customizing the Sanic Extensions UI documentation, including endpoint paths, UI preferences, and display settings.

LANGUAGE: markdown
CODE:
| **Key**                    | **Type**        | **Default**         | **Desctiption**                                              |
| -------------------------- | --------------- | ------------------- | ------------------------------------------------------------ |
| `OAS_IGNORE_HEAD`          | `bool`          | `True`              | Whether to display `HEAD` endpoints.                         |
| `OAS_IGNORE_OPTIONS`       | `bool`          | `True`              | Whether to display `OPTIONS` endpoints.                      |
| `OAS_PATH_TO_REDOC_HTML`   | `Optional[str]` | `None`              | Path to HTML to override the default Redoc HTML              |
| `OAS_PATH_TO_SWAGGER_HTML` | `Optional[str]` | `None`              | Path to HTML to override the default Swagger HTML            |
| `OAS_UI_DEFAULT`           | `Optional[str]` | `"redoc"`           | Can be set to `redoc` or `swagger`. Controls which UI to display on the base route. If set to `None`, then the base route will not be setup. |
| `OAS_UI_REDOC`             | `bool`          | `True`              | Whether to enable Redoc UI.                                  |
| `OAS_UI_SWAGGER`           | `bool`          | `True`              | Whether to enable Swagger UI.                                |
| `OAS_URI_TO_CONFIG`        | `str`           | `"/openapi-config"` | URI path to the OpenAPI config used by Swagger               |
| `OAS_URI_TO_JSON`          | `str`           | `"/openapi.json"`   | URI path to the JSON document.                               |
| `OAS_URI_TO_REDOC`         | `str`           | `"/redoc"`          | URI path to Redoc.                                           |
| `OAS_URI_TO_SWAGGER`       | `str`           | `"/swagger"`        | URI path to Swagger.                                         |
| `OAS_URL_PREFIX`           | `str`           | `"/docs"`           | URL prefix to use for the Blueprint for OpenAPI docs.        |

----------------------------------------

TITLE: Using API Key Authentication
DESCRIPTION: Demonstrates how to access the Inspector with API key authentication.

LANGUAGE: sh
CODE:
sanic inspect --api-key=Super-Secret-200

LANGUAGE: sh
CODE:
curl http://localhost:6457  -H "Authorization: Bearer Super-Secret-200"

----------------------------------------

TITLE: Basic Sanic Application Initialization
DESCRIPTION: Demonstrates running a basic Sanic application using CLI and direct instantiation. Shows a simple endpoint implementation returning JSON response.

LANGUAGE: sh
CODE:
sanic path.to.server:app

LANGUAGE: python
CODE:
# server.py
app = Sanic("TestApp")

@app.get("/")
async def handler(request: Request):
    return json({"foo": "bar"})

----------------------------------------

TITLE: Docker Run Command for Sanic Container
DESCRIPTION: Shell command to run a container from the built Sanic image, mapping port 8000 and running in detached mode.

LANGUAGE: shell
CODE:
docker run --name mysanic -p 8000:8000 -d my-sanic-image

----------------------------------------

TITLE: Using @openapi.parameter Decorator
DESCRIPTION: Examples of using the @openapi.parameter decorator to specify parameters for an API operation.

LANGUAGE: python
CODE:
@openapi.parameter("thing")

LANGUAGE: python
CODE:
@openapi.parameter(parameter=Parameter("foobar", deprecated=True))

LANGUAGE: python
CODE:
@openapi.parameter("Authorization", str, "header")

LANGUAGE: python
CODE:
@openapi.parameter("thing", required=True, allowEmptyValue=False)

----------------------------------------

TITLE: Enabling Sanic Inspector via Configuration
DESCRIPTION: Enables the Sanic Inspector by setting a configuration value after application creation.

LANGUAGE: python
CODE:
app = Sanic("TestApp")
app.config.INSPECTOR = True

----------------------------------------

TITLE: Running Sanic as a Module
DESCRIPTION: Shows how to run a Sanic application directly as a Python module using command-line arguments.

LANGUAGE: bash
CODE:
python -m sanic server.app --host=0.0.0.0 --port=1337 --workers=4

----------------------------------------

TITLE: Implementing Blueprint Group Versioning in Sanic
DESCRIPTION: This snippet demonstrates how to use blueprint groups for version management in Sanic. It shows the versioning hierarchy and how different levels of versioning (route, blueprint, group) interact.

LANGUAGE: python
CODE:
from sanic.blueprints import Blueprint
from sanic.response import json

bp1 = Blueprint(
    name="blueprint-1",
    url_prefix="/bp1",
    version=1.25,
)
bp2 = Blueprint(
    name="blueprint-2",
    url_prefix="/bp2",
)

group = Blueprint.group(
    [bp1, bp2],
    url_prefix="/bp-group",
    version="v2",
)

# GET /v1.25/bp-group/bp1/endpoint-1
@bp1.get("/endpoint-1")
async def handle_endpoint_1_bp1(request):
    return json({"Source": "blueprint-1/endpoint-1"})

# GET /v2/bp-group/bp2/endpoint-2
@bp2.get("/endpoint-1")
async def handle_endpoint_1_bp2(request):
    return json({"Source": "blueprint-2/endpoint-1"})

# GET /v1/bp-group/bp2/endpoint-2
@bp2.get("/endpoint-2", version=1)
async def handle_endpoint_2_bp2(request):
    return json({"Source": "blueprint-2/endpoint-2"})

----------------------------------------

TITLE: Registering Routes with Tortoise-ORM in Sanic
DESCRIPTION: Python code demonstrating how to register routes in Sanic using Tortoise-ORM for database operations.

LANGUAGE: python
CODE:
# ./main.py

from models import Users
from sanic import Sanic, response


@app.route("/user")
async def list_all(request):
    users = await Users.all()
    return response.json({"users": [str(user) for user in users]})


@app.route("/user/<pk:int>")
async def get_user(request, pk):
    user = await Users.query(pk=pk)
    return response.json({"user": str(user)})

if __name__ == "__main__":
    app.run(port=5000)

----------------------------------------

TITLE: Using TLS-Enabled Inspector
DESCRIPTION: Demonstrates how to access the Inspector when TLS is enabled.

LANGUAGE: sh
CODE:
sanic inspect --secure --host=<somewhere>

LANGUAGE: sh
CODE:
curl https://<somewhere>:6457

----------------------------------------

TITLE: Using Blueprint Groups with Custom Version Prefix in Sanic
DESCRIPTION: This snippet demonstrates how to use blueprint groups with a custom version prefix in Sanic. It shows how to load all '/api' routes into a single BlueprintGroup with a specific version prefix.

LANGUAGE: python
CODE:
# /v1/my/path
app = Sanic(__name__)
v2ip = Blueprint("v2ip", url_prefix="/ip", version=2)
api = Blueprint.group(v2ip, version_prefix="/api/version")

# /api/version2/ip
@v2ip.get("/")
async def handler(request):
    return text(request.ip)

app.blueprint(api)

----------------------------------------

TITLE: Running Sanic with Maximum CPU Performance
DESCRIPTION: Shows how to run Sanic with the maximum number of workers based on system constraints using the --fast option.

LANGUAGE: bash
CODE:
sanic server:app --host=0.0.0.0 --port=1337 --fast

----------------------------------------

TITLE: Routing Websocket Handlers in Sanic
DESCRIPTION: Demonstrates two methods of routing websocket handlers in Sanic: using add_websocket_route() and using the @app.websocket decorator.

LANGUAGE: python
CODE:
async def feed(request, ws):
    pass

app.add_websocket_route(feed, "/feed")

LANGUAGE: python
CODE:
@app.websocket("/feed")
async def feed(request, ws):
    pass

----------------------------------------

TITLE: Using Signal Events Enum in Sanic Python
DESCRIPTION: Shows how to use the Event enum for signal handling in Sanic applications.

LANGUAGE: python
CODE:
from sanic.signals import Event

@app.signal(Event.HTTP_LIFECYCLE_BEGIN)
async def connection_opened(conn_info):
    ...

----------------------------------------

TITLE: Implementing Autodiscovery Utility
DESCRIPTION: Utility function that recursively discovers and registers blueprints from specified modules. Handles both module objects and string paths, supporting recursive directory scanning.

LANGUAGE: python
CODE:
from glob import glob
from importlib import import_module, util
from inspect import getmembers
from pathlib import Path
from types import ModuleType
from typing import Union

from sanic.blueprints import Blueprint


def autodiscover(
    app, *module_names: Union[str, ModuleType], recursive: bool = False
):
    mod = app.__module__
    blueprints = set()
    _imported = set()

    def _find_bps(module):
        nonlocal blueprints

        for _, member in getmembers(module):
            if isinstance(member, Blueprint):
                blueprints.add(member)

    for module in module_names:
        if isinstance(module, str):
            module = import_module(module, mod)
            _imported.add(module.__file__)
        _find_bps(module)

        if recursive:
            base = Path(module.__file__).parent
            for path in glob(f"{base}/**/*.py", recursive=True):
                if path not in _imported:
                    name = "module"
                    if "__init__" in path:
                        *_, name, __ = path.split("/")
                    spec = util.spec_from_file_location(name, path)
                    specmod = util.module_from_spec(spec)
                    _imported.add(path)
                    spec.loader.exec_module(specmod)
                    _find_bps(specmod)

    for bp in blueprints:
        app.blueprint(bp)

----------------------------------------

TITLE: Running Sanic Server - Shell
DESCRIPTION: Command to launch a Sanic server using the production-ready built-in server.

LANGUAGE: sh
CODE:
sanic server

----------------------------------------

TITLE: Installing Jinja2 for Sanic Extensions
DESCRIPTION: Command to install Jinja2, which is required for templating with Sanic Extensions.

LANGUAGE: shell
CODE:
pip install Jinja2

----------------------------------------

TITLE: Configuring Inspector Authentication
DESCRIPTION: Demonstrates setting up API key authentication for the Inspector.

LANGUAGE: python
CODE:
app.config.INSPECTOR_API_KEY = "Super-Secret-200"

----------------------------------------

TITLE: Auto-injecting Sanic App into Background Task
DESCRIPTION: Shows how Sanic automatically injects the app object into a background task function. The function prints the app name after a 5-second delay.

LANGUAGE: python
CODE:
async def auto_inject(app):
    await asyncio.sleep(5)
    print(app.name)

app.add_task(auto_inject)

----------------------------------------

TITLE: Implementing Custom Inspector Commands
DESCRIPTION: Demonstrates how to create custom inspector commands by subclassing the Inspector class.

LANGUAGE: python
CODE:
from sanic import json
from sanic.worker.inspector import Inspector


class MyInspector(Inspector):
    async def something(self, *args, **kwargs):
        print(args)
        print(kwargs)


app = Sanic("TestApp", inspector_class=MyInspector, inspector=True)

----------------------------------------

TITLE: Configuring TLS for Sanic Inspector
DESCRIPTION: Example of configuring TLS certificate and key for securing Inspector communications.

LANGUAGE: python
CODE:
app.config.INSPECTOR_TLS_CERT = "/path/to/cert.pem"
app.config.INSPECTOR_TLS_KEY = "/path/to/key.pem"

----------------------------------------

TITLE: Connection Context Management in Sanic
DESCRIPTION: Demonstrates how to share state between multiple requests using connection context

LANGUAGE: python
CODE:
@app.on_request
async def increment_foo(request):
    if not hasattr(request.conn_info.ctx, "foo"):
        request.conn_info.ctx.foo = 0
    request.conn_info.ctx.foo += 1

@app.get("/")
async def count_foo(request):
    return text(f"request.conn_info.ctx.foo={request.conn_info.ctx.foo}")

----------------------------------------

TITLE: Registering a Custom Process with Sanic Manager
DESCRIPTION: This snippet shows how to register a custom process with the Sanic manager. The process is registered in the main_process_ready listener using the manage method.

LANGUAGE: python
CODE:
@app.main_process_ready
async def ready(app: Sanic, _):
#   app.manager.manage(<name>, <callable>, <kwargs>)
    app.manager.manage("MyProcess", my_process, {"foo": "bar"})

----------------------------------------

TITLE: Running Sanic Application with CLI
DESCRIPTION: Demonstrates how to run a Sanic application using the command-line interface, specifying the application module path.

LANGUAGE: bash
CODE:
sanic path.to.server:app

----------------------------------------

TITLE: Configuring API Key Authentication
DESCRIPTION: Shows how to set up API key authentication for the Inspector.

LANGUAGE: python
CODE:
app.config.INSPECTOR_API_KEY = "Super-Secret-200"

----------------------------------------

TITLE: Scaling Worker Processes
DESCRIPTION: Example of using the Inspector to scale worker processes.

LANGUAGE: bash
CODE:
$ sanic inspect scale 3

----------------------------------------

TITLE: Running Sanic Application with CLI
DESCRIPTION: Demonstrates how to run a Sanic application using the command-line interface, specifying the application module path.

LANGUAGE: bash
CODE:
sanic path.to.server:app

----------------------------------------

TITLE: Shortened Listener Decorator
DESCRIPTION: Demonstrates the shortened decorator syntax for registering listeners, useful with IDE autocomplete.

LANGUAGE: python
CODE:
@app.before_server_start
async def setup_db(app):
    app.ctx.db = await db_setup()

----------------------------------------

TITLE: Installing Sanic Framework - Shell
DESCRIPTION: Basic pip command to install the Sanic framework.

LANGUAGE: sh
CODE:
pip install sanic

----------------------------------------

TITLE: Disabling uvloop in Sanic Python
DESCRIPTION: Shows how to disable uvloop usage in Sanic through configuration.

LANGUAGE: python
CODE:
app.config.USE_UVLOOP = False

----------------------------------------

TITLE: Increasing Worker Acknowledgement Timeout in Python
DESCRIPTION: This snippet shows how to increase the worker acknowledgement timeout to one minute by setting the WorkerManager.THRESHOLD value. This should be set as early as possible in the application.

LANGUAGE: python
CODE:
from sanic.worker.manager import WorkerManager

WorkerManager.THRESHOLD = 600

----------------------------------------

TITLE: Accessing All Worker States in Sanic
DESCRIPTION: This snippet shows how to access and print the state information for all running processes in Sanic, including the main process, server processes, and non-server processes.

LANGUAGE: python
CODE:
@app.on_request
async def print_state(request: Request):
    print(request.app.m.workers)

----------------------------------------

TITLE: Accessing Shared Context in Sanic Request Handler
DESCRIPTION: This code demonstrates how to access and use a shared context object (in this case, a Queue) within a Sanic request handler. The shared object is available wherever the application instance is accessible.

LANGUAGE: python
CODE:
from multiprocessing import Queue

@app.get("")
async def handler(request):
    request.app.shared_ctx.queue.put(1)
    ...

----------------------------------------

TITLE: Creating a Shared Queue in Sanic's Main Process
DESCRIPTION: Illustrates how to create a shared multiprocessing Queue in Sanic's main process, taking advantage of the early setting of the multiprocessing start method.

LANGUAGE: python
CODE:
from multiprocessing import Queue

@app.main_process_start
async def main_process_start(app):
    app.shared_ctx.queue = Queue()

----------------------------------------

TITLE: Configuring Noisy Exceptions in Sanic Python
DESCRIPTION: Demonstrates how to enable noisy exceptions, which forces all exceptions to be logged regardless of their quiet property.

LANGUAGE: python
CODE:
app.config.NOISY_EXCEPTIONS = True

----------------------------------------

TITLE: Accessing Shared Context in Sanic Request Handler
DESCRIPTION: This code demonstrates how to access and use a shared context object (in this case, a Queue) within a Sanic request handler. The shared object is available wherever the application instance is accessible.

LANGUAGE: python
CODE:
from multiprocessing import Queue

@app.get("")
async def handler(request):
    request.app.shared_ctx.queue.put(1)
    ...

----------------------------------------

TITLE: Modifying Worker Manager Threshold in Python
DESCRIPTION: This snippet shows how to increase the worker acknowledgement timeout by modifying the WorkerManager.THRESHOLD value. This is useful when your application needs more time to start up.

LANGUAGE: python
CODE:
from sanic.worker.manager import WorkerManager

WorkerManager.THRESHOLD = 100  # Value is in 0.1s

----------------------------------------

TITLE: Enabling Automatic TLS in Sanic via CLI
DESCRIPTION: Shows how to enable automatic TLS certificate generation when running the Sanic server. This is useful for testing HTTPS in a local development environment.

LANGUAGE: sh
CODE:
sanic path.to.server:app --auto-tls --debug

----------------------------------------

TITLE: Implementing Custom Typed Sanic Application and Request in Python
DESCRIPTION: Shows how to create custom Config, Context, and Request classes with proper type annotations for Sanic. This enables fully-typed config, app.ctx, and request.ctx objects, improving the developer experience with better IDE integration.

LANGUAGE: python
CODE:
from sanic import Request, Sanic
from sanic.config import Config

class CustomConfig(Config):
    pass

class Foo:
    pass

class RequestContext:
    foo: Foo

class CustomRequest(Request[Sanic[CustomConfig, Foo], RequestContext]):
    @staticmethod
    def make_context() -> RequestContext:
        ctx = RequestContext()
        ctx.foo = Foo()
        return ctx

app = Sanic(
    "test", config=CustomConfig(), ctx=Foo(), request_class=CustomRequest
)

@app.get("/")
async def handler(request: CustomRequest):
   ...

----------------------------------------

TITLE: Excluding Docstrings from Sanic Endpoint Documentation
DESCRIPTION: This snippet shows how to exclude a docstring from being used in the auto-documentation. It uses the @openapi.no_autodoc decorator to disable auto-documentation for a single handler.

LANGUAGE: python
CODE:
@app.get("/foo")
@openapi.no_autodoc
async def handler(request, something: str):
    """This is a docstring about internal info only. Do not parse it.
    """
    return text("...")

----------------------------------------

TITLE: Running Sanic with Both HTTP/3 and HTTP/1.1
DESCRIPTION: Shows how to run Sanic with both HTTP/3 and HTTP/1.1 support simultaneously.

LANGUAGE: bash
CODE:
sanic path.to.server:app --http=3 --http=1

LANGUAGE: bash
CODE:
sanic path.to.server:app -3 -1

LANGUAGE: python
CODE:
app.prepare(version=3)
app.prepare(version=1)
Sanic.serve()

----------------------------------------

TITLE: Synchronous Handler with Sleep
DESCRIPTION: Demonstrates a synchronous handler with blocking sleep operation, showing potential performance limitations.

LANGUAGE: python
CODE:
@app.get("/sync")
def sync_handler(request):
    time.sleep(0.1)
    return text("Done.")

----------------------------------------

TITLE: Initializing Sanic Application with Generic Types in Python
DESCRIPTION: Demonstrates how to use the new generic types for Sanic application to provide type hints for config and ctx objects. This improves IDE autocompletion and type checking.

LANGUAGE: python
CODE:
from sanic import Sanic
app = Sanic("test")
reveal_type(app)  # N: Revealed type is "sanic.app.Sanic[sanic.config.Config, types.SimpleNamespace]"

----------------------------------------

TITLE: Initializing Sanic Inspector with Flag
DESCRIPTION: Creates a Sanic application instance with the inspector enabled using a constructor flag.

LANGUAGE: python
CODE:
app = Sanic("TestApp", inspector=True)

----------------------------------------

TITLE: Configuring Inspector Host and Port in Sanic
DESCRIPTION: This snippet shows how to configure the host and port for the Sanic Inspector, which exposes a small HTTP service for controlling the application.

LANGUAGE: python
CODE:
app.config.INSPECTOR_HOST =  "localhost"
app.config.INSPECTOR_PORT =  6457

----------------------------------------

TITLE: Rendering Template as Return Object in Sanic
DESCRIPTION: Rendering a template by returning an HTTPResponse object. This method allows for more customization of the response.

LANGUAGE: python
CODE:
from sanic_ext import render

@app.get("/alt")
async def handler(request: Request):
    return await render(
        "foo.html", context={"seq": ["three", "four"]}, status=400
    )

----------------------------------------

TITLE: Accessing Shared Context in Sanic Handlers
DESCRIPTION: Shows how to access the shared context object in various Sanic handlers and middleware.

LANGUAGE: python
CODE:
@app.before_server_starts
async def before_server_starts(app):
    assert isinstance(app.shared_ctx.queue, Queue)

@app.on_request
async def on_request(request):
    assert isinstance(request.app.shared_ctx.queue, Queue)

@app.get("/")
async def handler(request):
    assert isinstance(request.app.shared_ctx.queue, Queue)

----------------------------------------

TITLE: Using @openapi.secured Decorator
DESCRIPTION: Examples of using the @openapi.secured decorator to specify security requirements for an API operation.

LANGUAGE: python
CODE:
@openapi.secured()

LANGUAGE: python
CODE:
@openapi.secured("foo")

LANGUAGE: python
CODE:
@openapi.secured("token1", "token2")

LANGUAGE: python
CODE:
@openapi.secured({"my_api_key": []})

LANGUAGE: python
CODE:
@openapi.secured(my_api_key=[])

----------------------------------------

TITLE: Changing Sanic Start Method in Python
DESCRIPTION: This code demonstrates how to change Sanic's process start method from the default 'spawn' to 'fork'. This should only be done if you're aware of the implications of different start methods.

LANGUAGE: python
CODE:
from sanic import Sanic

Sanic.start_method = "fork"

----------------------------------------

TITLE: Enabling Sanic Health Monitor in Python
DESCRIPTION: This snippet shows how to enable the health monitor in Sanic by setting the HEALTH configuration option to True. This is required to opt-in to using the health monitor feature.

LANGUAGE: python
CODE:
app.config.HEALTH = True

----------------------------------------

TITLE: Installing Mayim and Sanic Extensions
DESCRIPTION: Command to install Sanic extensions and Mayim with PostgreSQL support using pip.

LANGUAGE: shell
CODE:
pip install sanic-ext
pip install mayim[postgres]

----------------------------------------

TITLE: Type Annotation for Path Parameters in Sanic
DESCRIPTION: This example shows how to use Python type annotations to control path parameter types in Sanic routes. It demonstrates automatic type conversion based on the function signature.

LANGUAGE: python
CODE:
@app.route("/<one>/<two>/<three>")
def handler(request: Request, one: int, two: float, three: UUID):
    ...

----------------------------------------

TITLE: Iterating Over Websocket Messages in Sanic
DESCRIPTION: Demonstrates the new ability to iterate over websocket messages using an async for loop.

LANGUAGE: python
CODE:
from sanic import Request, Websocket

@app.websocket("/ws")
async def ws_echo_handler(request: Request, ws: Websocket):
    async for msg in ws:
        await ws.send(msg)

----------------------------------------

TITLE: Installing Tortoise-ORM
DESCRIPTION: Shell command to install Tortoise-ORM using pip.

LANGUAGE: shell
CODE:
pip install -U tortoise-orm

----------------------------------------

TITLE: Installing SQLAlchemy and aiomysql
DESCRIPTION: Shell command to install SQLAlchemy and aiomysql for async database operations with Sanic.

LANGUAGE: shell
CODE:
pip install -U sqlalchemy
pip install -U aiomysql

----------------------------------------

TITLE: Simplified WebSocket Message Loop in Sanic
DESCRIPTION: Shows a simplified approach to handling WebSocket messages using an async for loop. This feature was added in Sanic v22.9 and provides a more elegant way to handle message processing.

LANGUAGE: python
CODE:
from sanic import Request, Websocket

@app.websocket("/feed")
async def feed(request: Request, ws: Websocket):
    async for msg in ws:
        await ws.send(msg)

----------------------------------------

TITLE: Specifying Static Resource Type in Sanic
DESCRIPTION: This snippet demonstrates how to explicitly specify the resource type when defining a static endpoint in Sanic. It shows setting the resource_type to 'file' for a specific file path.

LANGUAGE: python
CODE:
static("/", "/path/to/some/file", resource_type="file")

----------------------------------------

TITLE: Simplified WebSocket Message Loop in Sanic
DESCRIPTION: Shows a simplified approach to handling WebSocket messages using an async for loop. This feature was added in Sanic v22.9 and provides a more elegant way to handle message processing.

LANGUAGE: python
CODE:
from sanic import Request, Websocket

@app.websocket("/feed")
async def feed(request: Request, ws: Websocket):
    async for msg in ws:
        await ws.send(msg)

----------------------------------------

TITLE: Initializing Sanic Application with Autodiscovery
DESCRIPTION: Main server file that initializes a Sanic application and sets up autodiscovery for blueprints and listeners. Uses the autodiscover utility to recursively find and register components.

LANGUAGE: python
CODE:
from sanic import Sanic
from sanic.response import empty

import blueprints
from utility import autodiscover

app = Sanic("auto", register=True)
autodiscover(
    app,
    blueprints,
    "parent.child",
    "listeners.something",
    recursive=True,
)

app.route("/")(lambda _: empty())

----------------------------------------

TITLE: Initializing Sanic Application with Autodiscovery
DESCRIPTION: Main server file that initializes a Sanic application and sets up autodiscovery for blueprints and listeners. Uses the autodiscover utility to recursively find and register components.

LANGUAGE: python
CODE:
from sanic import Sanic
from sanic.response import empty

import blueprints
from utility import autodiscover

app = Sanic("auto", register=True)
autodiscover(
    app,
    blueprints,
    "parent.child",
    "listeners.something",
    recursive=True,
)

app.route("/")(lambda _: empty())

----------------------------------------

TITLE: SQL Query for Selecting Countries with Mayim
DESCRIPTION: SQL query to select all countries with their capital cities, used in Mayim ORM.

LANGUAGE: sql
CODE:
-- ./queries/select_all_countries.sql
SELECT country.code,
    country.name,
    country.continent,
    country.region,
    (
        SELECT row_to_json(q)
        FROM (
                SELECT city.id,
                    city.name,
                    city.district,
                    city.population
            ) q
    ) capital
FROM country
    JOIN city ON country.capital = city.id
ORDER BY country.name ASC
LIMIT $limit OFFSET $offset;

----------------------------------------

TITLE: Setting Cache Control Headers in Sanic File Response
DESCRIPTION: Demonstrates the improved API for setting Cache-Control headers in Sanic's file response helper.

LANGUAGE: python
CODE:
file(
    ...,
    last_modified=...,
    max_age=...,
    no_store=...,
)

----------------------------------------

TITLE: Custom Type Casting for Environment Variables in Sanic Python
DESCRIPTION: Demonstrates how to add custom type converters for environment variables in Sanic configuration.

LANGUAGE: python
CODE:
app = Sanic(..., config=Config(converters=[UUID]))

----------------------------------------

TITLE: Sending HTTP Requests to Tortoise-ORM-integrated Sanic App
DESCRIPTION: Shell commands to send POST and GET requests to the Sanic app integrated with Tortoise-ORM.

LANGUAGE: shell
CODE:
curl --location --request POST 'http://127.0.0.1:8000/user'
{"users":["I am foo", "I am bar"]}

curl --location --request GET 'http://127.0.0.1:8000/user/1'
{"user": "I am foo"}

----------------------------------------

TITLE: Defining Pydantic Models for Mayim ORM
DESCRIPTION: Python code defining Pydantic models for City and Country entities to be used with Mayim ORM.

LANGUAGE: python
CODE:
# ./models.py
from pydantic import BaseModel


class City(BaseModel):
    id: int
    name: str
    district: str
    population: int


class Country(BaseModel):
    code: str
    name: str
    continent: str
    region: str
    capital: City

----------------------------------------

TITLE: Using Sanic Inspector CLI Help Command
DESCRIPTION: Demonstrates the new CLI interface for the Sanic Inspector showing available commands and options.

LANGUAGE: bash
CODE:
$ sanic inspect --help

----------------------------------------

TITLE: Upgrading Streaming Responses in Sanic Python
DESCRIPTION: Shows the new recommended way to implement streaming responses in Sanic, replacing the deprecated stream method.

LANGUAGE: python
CODE:
async def sample_streaming_fn(response):
    await response.write("foo,")
    await response.write("bar")

@app.route("/")
async def test(request: Request):
    response = await request.respond(content_type="text/csv")
    await response.send("foo,")
    await response.send("bar")

----------------------------------------

TITLE: Custom Request Class Implementation in Sanic
DESCRIPTION: Shows how to create a custom Request class with additional functionality

LANGUAGE: python
CODE:
from sanic import Sanic, Request

class CustomRequest(Request):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.user_id = self.headers.get("X-User-ID")

app = Sanic("Example", request_class=CustomRequest)

----------------------------------------

TITLE: Creating Sanic App with Tortoise-ORM Integration
DESCRIPTION: Python code to create a Sanic app instance and integrate Tortoise-ORM using register_tortoise.

LANGUAGE: python
CODE:
# ./main.py

from models import Users
from tortoise.contrib.sanic import register_tortoise

app = Sanic(__name__)


register_tortoise(
    app, db_url="mysql://root:root@localhost/test", modules={"models": ["models"]}, generate_schemas=True
)

----------------------------------------

TITLE: Handling WebSocket Disconnection in Python
DESCRIPTION: This snippet demonstrates how to catch a CancelledError when a user closes a WebSocket connection in Sanic. It uses a try-except block within an infinite loop to detect disconnection.

LANGUAGE: python
CODE:
@app.websocket("/")
async def handler(request, ws):
    try:
        while True:
            await asyncio.sleep(0.25)
    except asyncio.CancelledError:
        print("User closed connection")

----------------------------------------

TITLE: Defining Route with Error Format in Python
DESCRIPTION: This code snippet shows how to explicitly control the exception format for a specific route in Sanic. It uses the error_format parameter in the route decorator to specify JSON as the error format.

LANGUAGE: python
CODE:
@app.route("/", error_format="json")
async def handler(request):
    pass

----------------------------------------

TITLE: Configuring Sanic Project Metadata and Dependencies in TOML
DESCRIPTION: Defines the project name, version, author information, and required Python version. It also lists the project's dependencies and development dependencies.

LANGUAGE: toml
CODE:
[project]
name = "sanic"
version = "23.6.0"
description = "Build fast. Run fast."
authors = [
    {name = "Sanic Community", email = "admhpkns@gmail.com"}
]
requires-python = ">=3.8"
readme = "README.rst"
license = {file = "LICENSE"}
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Web Environment",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]

dependencies = [
    "sanic-routing==23.6.0",
    "sanic-testing==23.6.0",
    "websockets==11.*",
    "httptools>=0.0.10",
    "uvloop>=0.5.3; sys_platform != 'win32' and implementation_name == 'cpython'",
    "ujson>=1.35",
    "aiofiles>=0.6.0",
    "multidict>=5.0",
    "packaging>=21.3",
    "tracerite>=1.1.0",
]

[project.optional-dependencies]
http3 = ["aioquic>=0.9.20,<1.0"]
extras = ["uvicorn"]

[project.urls]
Homepage = "https://sanicframework.org"
Documentation = "https://sanic.readthedocs.io"
Repository = "https://github.com/sanic-org/sanic"
Changelog = "https://sanic.readthedocs.io/en/stable/sanic/changelog.html"

[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
include = ["sanic*"]

[tool.black]
line-length = 82
include = '\.pyi?$'
extend-exclude = '''
/examples/
/stubs/
/setup.py
/pyproject.toml
'''

[tool.pytest.ini_options]
minversion = "6.2"
addopts = "-ra -v --strict-markers"
testpaths = [
    "tests",
]
asyncio_mode = "auto"

[tool.coverage.run]
branch = true
source = [
    "tests",
    "sanic",
]
omit = [
    "site-packages",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if TYPE_CHECKING:",
    "raise NotImplementedError",
    "pass",
]
ignore_errors = true

[tool.ruff]
line-length = 82
src = ["sanic", "tests"]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "UP",  # pyupgrade
]
ignore = [
    "E203",  # slice notation whitespace
    "E501",  # line length violation
    "W503",  # line break before binary operator
]

[tool.ruff.isort]
combine-as-imports = true
force-wrap-aliases = true
known-first-party = ["sanic"]

[tool.ruff.pycodestyle]
max-line-length = 82

----------------------------------------

TITLE: Registering SQLAlchemy Middleware in Sanic
DESCRIPTION: Python code to register SQLAlchemy middleware for session management in Sanic.

LANGUAGE: python
CODE:
# ./server.py
from contextvars import ContextVar

from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import sessionmaker

_sessionmaker = sessionmaker(bind, AsyncSession, expire_on_commit=False)

_base_model_session_ctx = ContextVar("session")

@app.middleware("request")
async def inject_session(request):
    request.ctx.session = _sessionmaker()
    request.ctx.session_ctx_token = _base_model_session_ctx.set(request.ctx.session)


@app.middleware("response")
async def close_session(request, response):
    if hasattr(request.ctx, "session_ctx_token"):
        _base_model_session_ctx.reset(request.ctx.session_ctx_token)
        await request.ctx.session.close()

----------------------------------------

TITLE: Adding a Shared Context Object in Sanic
DESCRIPTION: Demonstrates how to add a shared Queue object between worker processes using the main_process_start listener.

LANGUAGE: python
CODE:
from multiprocessing import Queue

@app.main_process_start
async def main_process_start(app):
    app.shared_ctx.queue = Queue()

----------------------------------------

TITLE: Accessing Sanic Application Multiplexer
DESCRIPTION: Shows how to access the application multiplexer to print the current state in a request handler.

LANGUAGE: python
CODE:
@app.on_request
async def print_state(request: Request):
    print(request.app.m.state)

----------------------------------------

TITLE: Sending HTTP Request to Mayim-integrated Sanic App
DESCRIPTION: Shell command to send a GET request to the Sanic app integrated with Mayim ORM.

LANGUAGE: shell
CODE:
curl 'http://127.0.0.1:8000'
{"countries":[{"code":"AFG","name":"Afghanistan","continent":"Asia","region":"Southern and Central Asia","capital":{"id":1,"name":"Kabul","district":"Kabol","population":1780000}},{"code":"ALB","name":"Albania","continent":"Europe","region":"Southern Europe","capital":{"id":34,"name":"Tirana","district":"Tirana","population":270000}},{"code":"DZA","name":"Algeria","continent":"Africa","region":"Northern Africa","capital":{"id":35,"name":"Alger","district":"Alger","population":2168000}},{"code":"ASM","name":"American Samoa","continent":"Oceania","region":"Polynesia","capital":{"id":54,"name":"Fagatogo","district":"Tutuila","population":2323}}]}

----------------------------------------

TITLE: Using @openapi.response Decorator
DESCRIPTION: Examples of using the @openapi.response decorator to specify response details for an API operation.

LANGUAGE: python
CODE:
@openapi.response(200, str, "This is endpoint returns a string")

LANGUAGE: python
CODE:
@openapi.response(200, {"text/plain": str}, "...")

LANGUAGE: python
CODE:
@openapi.response(response=Response(UserProfile, description="..."))

LANGUAGE: python
CODE:
@openapi.response(
    response=Response(
        {
            "application/json": UserProfile,
        },
        description="...",
        status=201,
    )
)

LANGUAGE: python
CODE:
@openapi.response(200, UserProfile, "...")

LANGUAGE: python
CODE:
@openapi.response(
    200,
    {
        "application/json": UserProfile,
    },
    "Description...",
)

----------------------------------------

TITLE: Starting Docker Compose and Sanic Application
DESCRIPTION: These Bash commands start the Docker Compose setup and run the Sanic application. The Sanic app is configured to listen on all interfaces at port 9999.

LANGUAGE: bash
CODE:
$ docker-compose up -d
$ sanic server.app --port=9999 --host=0.0.0.0

----------------------------------------

TITLE: Adding Route Context in Sanic Python
DESCRIPTION: Shows how to add context to route definitions using the ctx_ prefix, which can be accessed in middleware or handlers.

LANGUAGE: python
CODE:
@app.get("/1", ctx_label="something")
async def handler1(request):
    ...

@app.get("/2", ctx_label="something")
async def handler2(request):
    ...

@app.get("/99")
async def handler99(request):
    ...

@app.on_request
async def do_something(request):
    if request.route.ctx.label == "something":
        ...

----------------------------------------

TITLE: Securing Specific Routes in Sanic OpenAPI
DESCRIPTION: This snippet illustrates different methods of securing specific routes in a Sanic application using the OpenAPI extension. It shows how to use docstrings, decorators, and the openapi.definition method to apply security schemes.

LANGUAGE: python
CODE:
@app.route("/one")
async def handler1(request):
    """
    openapi:
    ---
    security:
        - foo: []
    """


@app.route("/two")
@openapi.secured("foo")
@openapi.secured({"bar": []})
@openapi.secured(baz=[])
async def handler2(request):
    ...


@app.route("/three")
@openapi.definition(secured="foo")
@openapi.definition(secured={"bar": []})
async def handler3(request):
    ...

----------------------------------------

TITLE: Using @openapi.summary Decorator
DESCRIPTION: Example of using the @openapi.summary decorator to provide a brief summary of an API operation.

LANGUAGE: python
CODE:
@openapi.summary("This is an endpoint")

----------------------------------------

TITLE: HTTP to HTTPS Redirection Server
DESCRIPTION: Implements a Sanic application for redirecting HTTP requests to HTTPS and serving ACME/certbot files for certificate renewals.

LANGUAGE: python
CODE:
from sanic import Sanic, exceptions, response

app = Sanic("http_redir")

# Serve ACME/certbot files without HTTPS, for certificate renewals
app.static("/.well-known", "/var/www/.well-known", resource_type="dir")

@app.exception(exceptions.NotFound, exceptions.MethodNotSupported)
def redirect_everything_else(request, exception):
    server, path = request.server_name, request.path
    if server and path.startswith("/"):
        return response.redirect(f"https://{server}{path}", status=308)
    return response.text("Bad Request. Please use HTTPS!", status=400)

----------------------------------------

TITLE: Expanded HTTPMethodView Usage in Python
DESCRIPTION: Demonstrates the new ways to attach class-based views in Sanic, including using the 'attach' method and class definition with '__init_subclass__'.

LANGUAGE: python
CODE:
class DummyView(HTTPMethodView):
    ...

app.add_route(DummyView.as_view(), "/dummy")

LANGUAGE: python
CODE:
class DummyView(HTTPMethodView):
    ...

DummyView.attach(app, "/")

LANGUAGE: python
CODE:
class DummyView(HTTPMethodView, attach=app, uri="/"):
    ...

LANGUAGE: python
CODE:
from sanic import Sanic, HTTPMethodView

class DummyView(HTTPMethodView, attach=Sanic.get_app(), uri="/"):
    ...

----------------------------------------

TITLE: Custom Inspector Commands
DESCRIPTION: Example of using a custom Inspector command via CLI.

LANGUAGE: bash
CODE:
$ sanic inspect foo --bar

----------------------------------------

TITLE: Using @openapi.tag Decorator
DESCRIPTION: Examples of using the @openapi.tag decorator to add tags to an API operation.

LANGUAGE: python
CODE:
@openapi.tag("foo")

LANGUAGE: python
CODE:
@openapi.tag("foo", Tag("bar"))

----------------------------------------

TITLE: Adding OpenAPI YAML to Sanic Endpoint Docstrings
DESCRIPTION: This example shows how to add valid OpenAPI YAML to a docstring for more detailed documentation. The YAML is added after a line containing 'openapi:' and can include various OpenAPI specifications.

LANGUAGE: python
CODE:
@app.get("/foo")
async def handler(request, something: str):
    """This is a simple foo handler

    Now we will add some more details

    openapi:
    ---
    operationId: fooDots
    tags:
      - one
      - two
    parameters:
      - name: limit
        in: query
        description: How many items to return at one time (max 100)
        required: false
        schema:
          type: integer
          format: int32
    responses:
      '200':
        description: Just some dots
    """
    return text("...")

LANGUAGE: json
CODE:
"paths": {
  "/foo": {
    "get": {
      "operationId": "fooDots",
      "summary": "This is a simple foo handler",
      "description": "Now we will add some more details",
      "tags": [
        "one",
        "two"
      ],
      "parameters": [
        {
          "name": "limit",
          "in": "query",
          "description": "How many items to return at one time (max 100)",
          "required": false,
          "schema": {
            "type": "integer",
            "format": "int32"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "Just some dots"
        }
      }
    }
  }
}

----------------------------------------

TITLE: Signal Event Auto-registration in Python
DESCRIPTION: Illustrates how to use the new auto-registration feature for signal events in Sanic, allowing for more flexible event handling.

LANGUAGE: python
CODE:
@app.signal("do.something.start")
async def signal_handler():
    await do_something()
    await app.dispatch("do.something.complete")

# somethere else in your app:
await app.event("do.something.complete")

----------------------------------------

TITLE: Defining and Validating Pydantic Model in Sanic
DESCRIPTION: This snippet demonstrates how to create a Pydantic model for a Person and use it for JSON body validation in a Sanic POST route handler.

LANGUAGE: python
CODE:
class Person(BaseModel):
    name: str
    age: int

LANGUAGE: python
CODE:
from sanic_ext import validate

@app.post("/person")
@validate(json=Person)
async def handler(request, body: Person):
    return json(body.dict())

----------------------------------------

TITLE: Reading Cookies from Request in Sanic Python
DESCRIPTION: This snippet demonstrates how to access cookies from the request object in a Sanic route handler. It retrieves a specific cookie named 'test' using the get() method.

LANGUAGE: python
CODE:
@app.route("/cookie")
async def test(request):
    test_cookie = request.cookies.get("test")
    return text(f"Test cookie: {test_cookie}")

----------------------------------------

TITLE: Using Basic SanicTestClient in Python
DESCRIPTION: Demonstrates the basic usage of SanicTestClient to make HTTP requests to test endpoints. This is the simplest way to use the test client as Sanic handles the setup automatically.

LANGUAGE: python
CODE:
app.test_client.get("/path/to/endpoint")

----------------------------------------

TITLE: Version Prefix Configuration in Python
DESCRIPTION: Demonstrates how to alter the version prefix in Sanic route definitions, allowing for more flexible API versioning schemes.

LANGUAGE: python
CODE:
# /api/v1/my/path
app.route("/my/path", version=1, version_prefix="/api/v")

----------------------------------------

TITLE: Injecting Services using Low-Level API
DESCRIPTION: Demonstrates how to inject services (like database connections) using the lower-level add_dependency method, making typed objects available throughout the application.

LANGUAGE: python
CODE:
class FakeConnection:
    async def execute(self, query: str, **arguments):
        return "result"


@app.before_server_start
async def setup_db(app, _):
    app.ctx.db_conn = FakeConnection()
    app.ext.add_dependency(FakeConnection, get_db)


def get_db(request: Request):
    return request.app.ctx.db_conn




@app.get("/")
async def handler(request, conn: FakeConnection):
    response = await conn.execute("...")
    return text(response)

----------------------------------------

TITLE: Handling Request IDs in Sanic
DESCRIPTION: Shows how to access X-Request-ID header values through the request.id property.

LANGUAGE: python
CODE:
@app.route("/")
async def handler(request):
    return text(request.id)

----------------------------------------

TITLE: Running Sanic Server with Multiple TLS Certificates
DESCRIPTION: Demonstrates how to run a Sanic server with multiple TLS certificates for different domains.

LANGUAGE: python
CODE:
app.run(
    ssl=[
        "/etc/letsencrypt/live/example.com/",
        "/etc/letsencrypt/live/mysite.example/",
    ]
)

----------------------------------------

TITLE: Inline Streaming with EOF in Python
DESCRIPTION: Shows how to use the new 'response.eof()' method for inline streaming in Sanic, which should be called once the final data has been pushed to the client.

LANGUAGE: python
CODE:
@app.route("/")
async def test(request):
    response = await request.respond(content_type="text/csv")
    await response.send("foo,")
    await response.send("bar")
    await response.eof()
    return response

----------------------------------------

TITLE: Custom Config and Context Objects in Python
DESCRIPTION: Demonstrates how to pass custom configuration and context objects to Sanic applications, allowing for more flexible application setup.

LANGUAGE: python
CODE:
class CustomConfig(Config):
    ...

config = CustomConfig()
app = Sanic("custom", config=config)
assert isinstance(app.config, CustomConfig)

LANGUAGE: python
CODE:
class CustomContext:
    ...

ctx = CustomContext()
app = Sanic("custom", ctx=ctx)
assert isinstance(app.ctx, CustomContext)

----------------------------------------

TITLE: Adding Request ID to Response Headers
DESCRIPTION: Example of adding X-Request-ID to response headers using response middleware.

LANGUAGE: python
CODE:
@app.route("/")
async def handler(request):
    return text(str(request.id))

@app.on_response
async def add_request_id_header(request, response):
    response.headers["X-Request-ID"] = request.id

----------------------------------------

TITLE: Using TLS with Inspector CLI
DESCRIPTION: Shows how to connect to a TLS-enabled Inspector instance using the CLI.

LANGUAGE: bash
CODE:
$ sanic inspect --secure

----------------------------------------

TITLE: Defining Path Parameters with New Types in Python
DESCRIPTION: Demonstrates how to use the new 'str' and 'float' path parameter types in Sanic route definitions, replacing the deprecated 'string' and 'number' types.

LANGUAGE: python
CODE:
@app.get("/<foo:str>/<bar:float>")
async def handler(request, foo: str, bar: float):
    ...

----------------------------------------

TITLE: Enabling Automatic Reloader in Sanic via CLI
DESCRIPTION: Shows how to enable the automatic reloader feature in Sanic using the CLI. This allows the application to restart automatically when Python files are changed.

LANGUAGE: sh
CODE:
sanic path.to:app --reload

LANGUAGE: sh
CODE:
sanic path.to:app -r

----------------------------------------

TITLE: Using Decorator for Request Middleware in Sanic
DESCRIPTION: Shows how to use the @app.middleware decorator to attach request middleware for user extraction.

LANGUAGE: python
CODE:
@app.middleware("request")
async def extract_user(request):
    request.ctx.user = await extract_user_from_request(request)

----------------------------------------

TITLE: Copying Sanic Blueprints
DESCRIPTION: Shows how to create a copy of a Blueprint with a new name and potentially different version, useful for creating multiple versions of an API.

LANGUAGE: python
CODE:
v1 = Blueprint("Version1", version=1)

@v1.route("/something")
def something(request):
    pass

v2 = v1.copy("Version2", version=2)

app.blueprint(v1)
app.blueprint(v2)

----------------------------------------

TITLE: Using JSONResponse Update Methods
DESCRIPTION: Demonstrates the new JSONResponse class with methods to update JSON response body.

LANGUAGE: python
CODE:
resp = json({"foo": "bar"})
resp.update({"another": "value"})

----------------------------------------

TITLE: Configuring Sanic Application for Mounting
DESCRIPTION: This Python code creates a Sanic application with a configured server name and a route handler. It demonstrates how to generate an external URL for the mounted application.

LANGUAGE: python
CODE:
# server.py
from sanic import Sanic, text

app = Sanic("app")
app.config.SERVER_NAME = "example.com/api"


@app.route("/foo")
def handler(request):
    url = app.url_for("handler", _external=True)
    return text(f"URL: {url}")

----------------------------------------

TITLE: Text Response Handler in Sanic
DESCRIPTION: Returns a plain text response with UTF-8 encoding and content-type text/plain.

LANGUAGE: python
CODE:
from sanic.response import text

@app.route("/")
async def handler(request):
    return text("Hi ðŸ˜Ž")

----------------------------------------

TITLE: Docker Build Command for Sanic Image
DESCRIPTION: Shell command to build the Docker image for the Sanic application, tagging it as 'my-sanic-image'.

LANGUAGE: shell
CODE:
docker build -t my-sanic-image .

----------------------------------------

TITLE: Using Authentication with Inspector CLI
DESCRIPTION: Shows how to authenticate with the Inspector using an API key via CLI and curl.

LANGUAGE: bash
CODE:
$ sanic inspect --api-key=Super-Secret-200

LANGUAGE: bash
CODE:
$ curl http://localhost:6457  -H "Authorization: Bearer Super-Secret-200"

----------------------------------------

TITLE: Accessing General Request Headers in Sanic
DESCRIPTION: Examples of different methods to access request headers including get(), getone(), and getall() for handling multiple header values.

LANGUAGE: python
CODE:
@app.route("/")
async def handler(request):
    return json(
        {
            "foo_weakref": request.headers["foo"],
            "foo_get": request.headers.get("Foo"),
            "foo_getone": request.headers.getone("FOO"),
            "foo_getall": request.headers.getall("fOo"),
            "all": list(request.headers.items()),
        }
    )

----------------------------------------

TITLE: Redirect Response in Sanic
DESCRIPTION: Sends a 302 redirect response to a different path.

LANGUAGE: python
CODE:
from sanic.response import redirect

@app.route("/")
async def handler(request):
    return redirect("/login")

----------------------------------------

TITLE: Using @openapi.document Decorator
DESCRIPTION: Examples of using the @openapi.document decorator to specify external documentation for an API operation.

LANGUAGE: python
CODE:
@openapi.document("http://example.com/docs")

LANGUAGE: python
CODE:
@openapi.document(ExternalDocumentation("http://example.com/more"))

----------------------------------------

TITLE: Remote Inspector Access Example
DESCRIPTION: Shows how to connect to a remote Sanic Inspector instance using host parameter.

LANGUAGE: bash
CODE:
$ sanic inspect --host=1.2.3.4

----------------------------------------

TITLE: Accessing Worker State in Sanic Request Handler
DESCRIPTION: This snippet shows how to access and print the current worker's state information using the multiplexer (app.m) within a Sanic request handler.

LANGUAGE: python
CODE:
@app.on_request
async def print_state(request: Request):
    print(request.app.m.name)
    print(request.app.m.pid)
    print(request.app.m.state)

----------------------------------------

TITLE: Path Parameters in Sanic Routes
DESCRIPTION: Demonstrates the use of path parameters in Sanic routes, including type casting.

LANGUAGE: python
CODE:
@app.get("/tag/<tag>")
async def tag_handler(request, tag):
    return text("Tag - {}".format(tag))

@app.get("/foo/<foo_id:uuid>")
async def uuid_handler(request, foo_id: UUID):
    return text("UUID - {}".format(foo_id))

----------------------------------------

TITLE: Using Custom Inspector Commands
DESCRIPTION: Shows usage of custom inspector commands via CLI and HTTP with arguments.

LANGUAGE: sh
CODE:
sanic inspect something one two three --four --no-five --six=6

LANGUAGE: sh
CODE:
curl http://localhost:6457/something \
  --json '{"args":["one", "two", "three"], "four":true, "five":false, "six":6}'

----------------------------------------

TITLE: Implementing Reload Process Listeners in Sanic
DESCRIPTION: Shows how to implement reload process listeners for auto-reload functionality.

LANGUAGE: python
CODE:
@app.reload_process_start
async def reload_start(*_):
    print(">>>>>> reload_start <<<<<<")


@app.reload_process_stop
async def reload_stop(*_):
    print(">>>>>> reload_stop <<<<<<")

----------------------------------------

TITLE: Setting Custom JSON Loads Function in Sanic
DESCRIPTION: Shows how to set a custom JSON loads function globally in a Sanic application.

LANGUAGE: python
CODE:
from orjson import loads

app = Sanic("Test", loads=loads)

----------------------------------------

TITLE: Explicitly Injecting Sanic App into Background Task
DESCRIPTION: Demonstrates how to explicitly pass the Sanic app object to a background task function. The function prints the app name after a 5-second delay.

LANGUAGE: python
CODE:
async def explicit_inject(app):
    await asyncio.sleep(5)
    print(app.name)

app.add_task(explicit_inject(app))

----------------------------------------

TITLE: Managing Background Tasks in Sanic Python
DESCRIPTION: Demonstrates how to add, retrieve, and cancel named background tasks in a Sanic application.

LANGUAGE: python
CODE:
app.add_task(dummy, name="dummy_task")
task = app.get_task("dummy_task")

app.cancel_task("dummy_task")

----------------------------------------

TITLE: Implementing Empty String Path Parameters in Sanic
DESCRIPTION: Demonstrates the new strorempty parameter type for handling empty string matches in route parameters.

LANGUAGE: python
CODE:
@app.get("/path/to/<foo:strorempty>")
async def handler(request, foo)
    ...

----------------------------------------

TITLE: Rendering Template with Sanic Decorator
DESCRIPTION: Using a Sanic decorator to pre-load and render a template file. This method is fastest as templates are predefined at startup.

LANGUAGE: python
CODE:
@app.get("/")
@app.ext.template("foo.html")
async def handler(request: Request):
    return {"seq": ["one", "two"]}

----------------------------------------

TITLE: Legacy Listener with Loop Injection
DESCRIPTION: Shows the pre-v22.3 listener pattern that includes both app and loop parameters in the function signature.

LANGUAGE: python
CODE:
@app.listener("before_server_start")
async def setup_db(app, loop):
    app.ctx.db = await db_setup()

----------------------------------------

TITLE: Securing All Endpoints in Sanic OpenAPI
DESCRIPTION: This snippet shows how to secure all endpoints in a Sanic application using the OpenAPI extension. It demonstrates securing without specifying a scheme and with a specific scheme.

LANGUAGE: python
CODE:
app.ext.openapi.secured()
app.ext.openapi.secured("token")

----------------------------------------

TITLE: Running Arbitrary Processes in Sanic
DESCRIPTION: Demonstrates how to register and run arbitrary processes using the main_process_ready listener.

LANGUAGE: python
CODE:
@app.main_process_ready
async def ready(app: Sanic, _):
    app.manager.manage("MyProcess", my_process, {"foo": "bar"})
#   app.manager.manage(<name>, <callable>, <kwargs>)

----------------------------------------

TITLE: Accessing Host Information and Dynamic URL Construction in Sanic
DESCRIPTION: Shows how to access effective host name, host header, forwarded host, and construct dynamic URLs in a Sanic route handler. It demonstrates the use of request.host and request.url_for methods.

LANGUAGE: python
CODE:
app.config.SERVER_NAME = "https://example.com"

@app.route("/hosts", name="foo")
async def handler(request):
    return json(
        {
            "effective host": request.host,
            "host header": request.headers.get("host"),
            "forwarded host": request.forwarded.get("host"),
            "you are here": request.url_for("foo"),
        }
    )

LANGUAGE: bash
CODE:
$ curl localhost:8000/hosts
{
  "effective host": "example.com",
  "host header": "localhost:8000",
  "forwarded host": null,
  "you are here": "https://example.com/hosts"
}

----------------------------------------

TITLE: Defining and Using Dynamic Events in Sanic
DESCRIPTION: Shows how to define and use dynamic events with path parameters in Sanic signals.

LANGUAGE: python
CODE:
@app.signal("foo.bar.<thing>")
async def signal_handler(thing):
    print(f"[signal_handler] {thing=}")

@app.get("/")
async def trigger(request):
    await app.dispatch("foo.bar.baz")
    return response.text("Done.")

----------------------------------------

TITLE: Initializing Multiple Sanic Applications with Multi-serve
DESCRIPTION: Demonstrates how to run multiple Sanic applications concurrently bound to different ports using the new multi-serve API.

LANGUAGE: python
CODE:
app = Sanic("One")
app2 = Sanic("Two")

app.prepare(port=9999)
app.prepare(port=9998)
app.prepare(port=9997)
app2.prepare(port=8888)
app2.prepare(port=8887)

Sanic.serve()

----------------------------------------

TITLE: Connection Context Management Example
DESCRIPTION: Demonstration of using connection-level context to maintain state across multiple requests on the same connection.

LANGUAGE: python
CODE:
@app.on_request
async def increment_foo(request):
    if not hasattr(request.conn_info.ctx, "foo"):
        request.conn_info.ctx.foo = 0
    request.conn_info.ctx.foo += 1

@app.get("/")
async def count_foo(request):
    return text(f"request.conn_info.ctx.foo={request.conn_info.ctx.foo}")

----------------------------------------

TITLE: Implementing a Websocket Handler in Sanic
DESCRIPTION: Shows how to create a websocket handler function that maintains a communication loop, sending and receiving data using the ws.send() and ws.recv() methods.

LANGUAGE: python
CODE:
@app.websocket("/feed")
async def feed(request, ws):
    while True:
        data = "hello!"
        print("Sending: " + data)
        await ws.send(data)
        data = await ws.recv()
        print("Received: " + data)

----------------------------------------

TITLE: Configuring Dependency Injection Signal
DESCRIPTION: Demonstrates how to change the signal at which dependencies are injected, allowing for more control over the injection process.

LANGUAGE: python
CODE:
app.config.INJECTION_SIGNAL = "http.handler.before"

----------------------------------------

TITLE: Implementing Fixed Serializer in Sanic
DESCRIPTION: Demonstrates how to use a fixed serializer decorator to predefine the response format for routes that consistently return the same type of response. It also shows how to include status codes in the serializer.

LANGUAGE: python
CODE:
from sanic_ext import serializer

@app.get("/<name>")
@serializer(text)
async def hello_world(request, name: str):
    if name.isnumeric():
        return "hello " * int(name)
    return f"Hello, {name}"

@app.post("/")
@serializer(text, status=202)
async def create_something(request):
    ...

----------------------------------------

TITLE: Docker Compose Up Command
DESCRIPTION: Shell command to start the services defined in the docker-compose.yml file in detached mode.

LANGUAGE: shell
CODE:
docker-compose up -d

----------------------------------------

TITLE: Enabling Inspector in Sanic Configuration
DESCRIPTION: This code demonstrates how to enable the Sanic Inspector, which allows external access to the state of the running instance and exposes multiplexer functionality to the CLI.

LANGUAGE: python
CODE:
app.config.INSPECTOR = True

----------------------------------------

TITLE: Adding Listeners to Sanic Blueprints
DESCRIPTION: Shows how to implement server lifecycle listeners within a Blueprint for setup and teardown operations.

LANGUAGE: python
CODE:
@bp.listener("before_server_start")
async def before_server_start(app, loop):
    ...

@bp.listener("after_server_stop")
async def after_server_stop(app, loop):
    ...

----------------------------------------

TITLE: Implementing Request Counter in Sanic
DESCRIPTION: Explains how to use the CountedRequest class to automatically track the number of requests processed per worker process. It shows how to set up the request class and access the request count in a handler.

LANGUAGE: python
CODE:
from sanic_ext import CountedRequest

app = Sanic(..., request_class=CountedRequest)

@app.get("/")
async def handler(request: CountedRequest):
    return json({"count": request.count})

----------------------------------------

TITLE: Using TestManager for Client Setup in Python
DESCRIPTION: Demonstrates using TestManager to set up both SanicTestClient and SanicASGITestClient simultaneously. This is a convenience approach for managing multiple test clients.

LANGUAGE: python
CODE:
from sanic_testing import TestManager

mgr = TestManager(app)
app.test_client.get("/path/to/endpoint")
# or
mgr.test_client.get("/path/to/endpoint")

----------------------------------------

TITLE: Creating a Custom Long-Running Process for Sanic
DESCRIPTION: This code demonstrates how to create a custom long-running process that can be managed by Sanic. It includes handling for shutdown signals using a try-except block with KeyboardInterrupt.

LANGUAGE: python
CODE:
from time import sleep

def my_process(foo):
    try:
        while True:
            sleep(1)
    except KeyboardInterrupt:
        print("done")

----------------------------------------

TITLE: Handling Exceptions in Sanic Blueprints
DESCRIPTION: Shows how to define exception handlers specific to a Blueprint for custom error handling.

LANGUAGE: python
CODE:
@bp.exception(NotFound)
def ignore_404s(request, exception):
    return text("Yep, I totally found the page: {}".format(request.url))

----------------------------------------

TITLE: Using Type-Annotated Config Object for Sanic Extension in Python
DESCRIPTION: Demonstrates the use of a type-annotated Config object for Sanic extension. This method enhances the development experience by providing IDE support for configuration options.

LANGUAGE: python
CODE:
from sanic_ext import Config

app = Sanic("MyApp")
app.extend(config=Config(oas_url_prefix="/apidocs"))

----------------------------------------

TITLE: Manually Extending Sanic with Configuration in Python
DESCRIPTION: Shows how to manually extend Sanic with configuration settings using keyword arguments. This method provides more control over the extension process.

LANGUAGE: python
CODE:
app = Sanic("MyApp")
app.extend(oas_url_prefix="/apidocs")

----------------------------------------

TITLE: Request Streaming with Decorator in Sanic
DESCRIPTION: Example of enabling request streaming using the route decorator with stream parameter set to True.

LANGUAGE: python
CODE:
@app.post("/stream", stream=True)
async def handler(request):
        ...
        body = await request.stream.read()
        ...

----------------------------------------

TITLE: Configuring Automatic TLS Certificate Creator in Sanic
DESCRIPTION: Demonstrates how to configure the automatic TLS certificate creator in Sanic. This feature allows for easy HTTPS setup in local development environments.

LANGUAGE: python
CODE:
app.config.LOCAL_CERT_CREATOR = "auto"
app.config.LOCAL_CERT_CREATOR = "mkcert"
app.config.LOCAL_CERT_CREATOR = "trustme"

----------------------------------------

TITLE: Custom Status Code Response in Sanic
DESCRIPTION: Shows how to return a response with a custom HTTP status code.

LANGUAGE: python
CODE:
@app.post("/")
async def create_new(request):
    new_thing = await do_create(request)
    return json({"created": True, "id": new_thing.thing_id}, status=201)

----------------------------------------

TITLE: Manually Extending Sanic with Configuration in Python
DESCRIPTION: Shows how to manually extend Sanic with configuration settings using keyword arguments. This method provides more control over the extension process.

LANGUAGE: python
CODE:
app = Sanic("MyApp")
app.extend(oas_url_prefix="/apidocs")

----------------------------------------

TITLE: Setting Middleware Priority in Sanic
DESCRIPTION: Illustrates how to assign priority to middleware to modify its execution order. Higher priority values result in earlier execution.

LANGUAGE: python
CODE:
@app.on_request
async def low_priority(request):
    ...

@app.on_request(priority=99)
async def high_priority(request):
    ...

----------------------------------------

TITLE: Loading Sanic Configuration from Environment Variables
DESCRIPTION: Demonstrates how to set Sanic configuration values using environment variables with the SANIC_ prefix.

LANGUAGE: bash
CODE:
$ export SANIC_REQUEST_TIMEOUT=10

LANGUAGE: python
CODE:
>>> print(app.config.REQUEST_TIMEOUT)
10

----------------------------------------

TITLE: Installing Specific Sanic Version with pip
DESCRIPTION: Commands to install and pin Sanic v20.12LTS version for compatibility with existing implementations.

LANGUAGE: bash
CODE:
pip install "sanic>=20.12,<20.13"
pip freeze > requirements.txt

----------------------------------------

TITLE: Configuring Sanic Extensions in Python
DESCRIPTION: Demonstrates how to configure Sanic Extensions using the app.config attribute. This method allows for easy configuration of extension settings.

LANGUAGE: python
CODE:
app = Sanic("MyApp")
app.config.OAS_URL_PREFIX = "/apidocs"

----------------------------------------

TITLE: Defining Custom Exception with Default Message in Python
DESCRIPTION: This code demonstrates how to create a custom exception class derived from SanicException with a default exception message. It allows for consistent error messaging across multiple uses of the exception.

LANGUAGE: python
CODE:
class TeaError(SanicException):
    message = "Tempest in a teapot"


raise TeaError

----------------------------------------

TITLE: Customizing Sanic Environment Variable Prefix
DESCRIPTION: Shows how to change the prefix that Sanic uses for loading configuration from environment variables.

LANGUAGE: bash
CODE:
$ export MYAPP_REQUEST_TIMEOUT=10

LANGUAGE: python
CODE:
>>> app = Sanic(__name__, env_prefix='MYAPP_')
>>> print(app.config.REQUEST_TIMEOUT)
10

----------------------------------------

TITLE: Creating Sanic App with SQLAlchemy Async Engine
DESCRIPTION: Python code to create a Sanic app instance and set up an async SQLAlchemy engine.

LANGUAGE: python
CODE:
# ./server.py
from sanic import Sanic
from sqlalchemy.ext.asyncio import create_async_engine

app = Sanic("my_app")

bind = create_async_engine("mysql+aiomysql://root:root@localhost/test", echo=True)

----------------------------------------

TITLE: Injecting Services using High-Level API
DESCRIPTION: Shows how to use the higher-level dependency method for injecting services, which is simpler and more appropriate for objects that exist throughout the application's lifetime.

LANGUAGE: python
CODE:
class FakeConnection:
    async def execute(self, query: str, **arguments):
        return "result"


@app.before_server_start
async def setup_db(app, _):
    db_conn = FakeConnection()
    app.ext.dependency(db_conn)


@app.get("/")
async def handler(request, conn: FakeConnection):
    response = await conn.execute("...")
    return text(response)

----------------------------------------

TITLE: Implementing Static Redirects in Sanic (Python)
DESCRIPTION: This Python script sets up a Sanic web application with static redirects and static file serving. It uses a dictionary to define redirects and creates route handlers dynamically. The script also serves static files and client resources.

LANGUAGE: python
CODE:
### SETUP ###
import typing
import sanic, sanic.response

# Create the Sanic app
app = sanic.Sanic(__name__)

# This dictionary represents your "static"
# redirects. For example, these values
# could be pulled from a configuration file.
REDIRECTS = {
    '/':'/hello_world',                     # Redirect '/' to '/hello_world'
    '/hello_world':'/hello_world.html'      # Redirect '/hello_world' to 'hello_world.html'
}

# This function will return another function
# that will return the configured value
# regardless of the arguments passed to it.
def get_static_function(value:typing.Any) -> typing.Callable[..., typing.Any]:
    return lambda *_, **__: value

### ROUTING ###
# Iterate through the redirects
for src, dest in REDIRECTS.items():                            
    # Create the redirect response object         
    response:sanic.HTTPResponse = sanic.response.redirect(dest)

    # Create the handler function. Typically,
    # only a sanic.Request object is passed
    # to the function. This object will be 
    # ignored.
    handler = get_static_function(response)

    # Route the src path to the handler
    app.route(src)(handler)

# Route some file and client resources
app.static('/files/', 'files')
app.static('/', 'client')

### RUN ###
if __name__ == '__main__':
    app.run(
        '127.0.0.1',
        10000
    )

----------------------------------------

TITLE: Using Low-level app.run API
DESCRIPTION: Demonstrates how to use the low-level app.run API to start a Sanic application with custom configuration.

LANGUAGE: python
CODE:
# server.py
app = Sanic("MyApp")

if __name__ == "__main__":
    app.run(host='0.0.0.0', port=1337, access_log=False)

----------------------------------------

TITLE: Starting Sanic Server with HTTP/3 Support
DESCRIPTION: Shows how to start a Sanic server with HTTP/3 support using command line options or Python code.

LANGUAGE: bash
CODE:
$ sanic path.to.server:app --http=3

$ sanic path.to.server:app -3

LANGUAGE: python
CODE:
app.run(version=3)

----------------------------------------

TITLE: Arbitrary Constructors for Dependency Injection
DESCRIPTION: Demonstrates how to use arbitrary constructors without requiring the Request object, useful for creating objects that should only exist for the lifetime of a single request.

LANGUAGE: python
CODE:
class Alpha:
    ...


class Beta:
    def __init__(self, alpha: Alpha) -> None:
        self.alpha = alpha

app.ext.add_dependency(Alpha)
app.ext.add_dependency(Beta)

@app.get("/beta")
async def handler(request: Request, beta: Beta):
    assert isinstance(beta.alpha, Alpha)

----------------------------------------

TITLE: Creating Sanic App with Mayim Integration
DESCRIPTION: Python code to create a Sanic app instance and integrate Mayim ORM using SanicMayimExtension.

LANGUAGE: python
CODE:
# ./server.py
from sanic import Sanic, Request, json
from sanic_ext import Extend
from mayim.executor import PostgresExecutor
from mayim.extensions import SanicMayimExtension
from models import Country


class CountryExecutor(PostgresExecutor):
    async def select_all_countries(
        self, limit: int = 4, offset: int = 0
    ) -> list[Country]:
        ...


app = Sanic("Test")
Extend.register(
    SanicMayimExtension(
        executors=[CountryExecutor],
        dsn="postgres://...",
    )
)

----------------------------------------

TITLE: Basic Caddy Reverse Proxy Command
DESCRIPTION: Simple command line instruction for running Caddy as a reverse proxy with automatic HTTPS and HTTP/3 support.

LANGUAGE: bash
CODE:
caddy reverse-proxy --from example.com --to :8001

----------------------------------------

TITLE: Configuring Multiple Domains with Specific Name Matching
DESCRIPTION: Shows how to configure SSL for multiple domains with specific name matching rules and preventing fallback for unknown hostnames.

LANGUAGE: python
CODE:
ssl = [
    None,  # No fallback if names do not match!
    {
        "cert": "certs/example.com/fullchain.pem",
        "key": "certs/example.com/privkey.pem",
        "names": ["example.com", "*.bigcorp.test"],
    }
]
app.run(host="0.0.0.0", port=8443, ssl=ssl)

----------------------------------------

TITLE: Basic Dependency Injection in Sanic
DESCRIPTION: Demonstrates a simple use case of dependency injection to recast a value into an IceCream object based on the matched path parameter.

LANGUAGE: python
CODE:
@dataclass
class IceCream:
    flavor: str

    def __str__(self) -> str:
        return f"{self.flavor.title()} (Yum!)"


app.ext.add_dependency(IceCream)


@app.get("/<flavor:str>")
async def ice_cream(request, flavor: IceCream):
    return text(f"You chose: {flavor}")

----------------------------------------

TITLE: Configuring Additional Reload Directories in Sanic via CLI
DESCRIPTION: Demonstrates how to specify additional directories for the automatic reloader to watch. This is useful for reloading on changes to non-Python files like templates.

LANGUAGE: sh
CODE:
sanic path.to:app --reload --reload-dir=/path/to/templates

LANGUAGE: sh
CODE:
sanic path.to:app -r -R /path/to/one -R /path/to/two

----------------------------------------

TITLE: Initializing Proxied Sanic Application
DESCRIPTION: Basic Sanic application setup that displays client connection information and forwarded headers. This example demonstrates how to create a simple endpoint that shows external addressing information.

LANGUAGE: python
CODE:
from sanic import Sanic
from sanic.response import text

app = Sanic("proxied_example")

@app.get("/")
def index(request):
    # This should display external (public) addresses:
    return text(
        f"{request.remote_addr} connected to {request.url_for('index')}\n"
        f"Forwarded: {request.forwarded}\n"
    )

----------------------------------------

TITLE: Request Streaming with add_route Method in Sanic
DESCRIPTION: Configuration of request streaming using the add_route method for blueprint routes.

LANGUAGE: python
CODE:
bp.add_route(
    bp_handler,
    "/bp_stream",
    methods=["POST"],
    stream=True,
)

----------------------------------------

TITLE: Enabling Sanic Background Logger in Python
DESCRIPTION: This code snippet shows how to enable the background logger in Sanic. By default, the background logger is disabled, and this configuration option opts-in to use it.

LANGUAGE: python
CODE:
app.config.LOGGING = True

----------------------------------------

TITLE: Sending HTTP Requests to SQLAlchemy-integrated Sanic App
DESCRIPTION: Shell commands to send POST and GET requests to the Sanic app integrated with SQLAlchemy.

LANGUAGE: shell
CODE:
curl --location --request POST 'http://127.0.0.1:8000/user'
{"name":"foo","cars":[{"brand":"Tesla"}]}

curl --location --request GET 'http://127.0.0.1:8000/user/1'
{"name":"foo","cars":[{"brand":"Tesla"}]}

----------------------------------------

TITLE: Basic Sanic Application in Python
DESCRIPTION: Defines a simple Sanic application with a single route returning 'OK!' when accessed. The server is configured to run on all interfaces (0.0.0.0) and port 8000.

LANGUAGE: python
CODE:
app = Sanic("MySanicApp")

@app.get('/')
async def hello(request):
    return text("OK!")

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8000)

----------------------------------------

TITLE: Running Sanic Server in Debug Mode via CLI
DESCRIPTION: Demonstrates how to start a Sanic server in debug mode using the command line interface. This enables verbose output and disables runtime optimizations.

LANGUAGE: sh
CODE:
sanic server:app --host=0.0.0.0 --port=1234 --debug

----------------------------------------

TITLE: HTML Template Example for Sanic and Jinja
DESCRIPTION: An example HTML template file (foo.html) that demonstrates basic Jinja syntax for use with Sanic Extensions.

LANGUAGE: html
CODE:
<!DOCTYPE html>
<html lang="en">

    <head>
        <title>My Webpage</title>
    </head>

    <body>
        <h1>Hello, world!!!!</h1>
        <ul>
            {% for item in seq %}
            <li>{{ item }}</li>
            {% endfor %}
        </ul>
    </body>

</html>

----------------------------------------

TITLE: Accessing Authorization Token in Sanic Request Handler
DESCRIPTION: Demonstrates how to access the Authorization token from the request header in a Sanic route handler. The token is automatically parsed from 'Token' or 'Bearer' prefixed Authorization headers.

LANGUAGE: python
CODE:
@app.route("/")
async def handler(request):
    return text(request.token)

LANGUAGE: bash
CODE:
$ curl localhost:8000 \
    -H "Authorization: Token ABCDEF12345679"
ABCDEF12345679

LANGUAGE: bash
CODE:
$ curl localhost:8000 \
    -H "Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c

----------------------------------------

TITLE: Installing Sanic Extensions via pip
DESCRIPTION: Commands to install Sanic Extensions either bundled with Sanic or as a standalone package

LANGUAGE: bash
CODE:
pip install sanic[ext]

LANGUAGE: bash
CODE:
pip install sanic-ext

----------------------------------------

TITLE: Implementing Response Middleware in Sanic
DESCRIPTION: Illustrates the implementation of response middleware to set XSS protection headers.

LANGUAGE: python
CODE:
@app.middleware('response')
async def prevent_xss(request, response):
    response.headers["x-xss-protection"] = "1; mode=block"

----------------------------------------

TITLE: Implementing OPTIONS Request Handler in Sanic
DESCRIPTION: Example of a GET route that automatically supports OPTIONS requests through Sanic Extensions. Shows how CORS protection is enabled by default.

LANGUAGE: python
CODE:
@app.get("/")
async def hello_world(request):
    return text("Hello, world.")

----------------------------------------

TITLE: Extending Sanic with Dictionary Configuration in Python
DESCRIPTION: Illustrates how to extend Sanic using a dictionary for configuration. This approach allows for multiple settings to be passed at once.

LANGUAGE: python
CODE:
app = Sanic("MyApp")
app.extend(config={"oas_url_prefix": "/apidocs"})

----------------------------------------

TITLE: Rendering Template from String in Sanic
DESCRIPTION: Demonstrates how to render a template from a string instead of a file, useful for dynamically generated templates.

LANGUAGE: python
CODE:
from sanic_ext import render
from textwrap import dedent

@app.get("/")
async def handler(request):
    template = dedent("""
        <!DOCTYPE html>
        <html lang="en">

            <head>
                <title>My Webpage</title>
            </head>

            <body>
                <h1>Hello, world!!!!</h1>
                <ul>
                    {% for item in seq %}
                    <li>{{ item }}</li>
                    {% endfor %}
                </ul>
            </body>

        </html>
    """)
    return await render(
        template_source=template,
        context={"seq": ["three", "four"]},
        app=app,
    )

----------------------------------------

TITLE: Installing pytest-asyncio Plugin
DESCRIPTION: Command to install the pytest-asyncio plugin for async testing support.

LANGUAGE: bash
CODE:
pip install pytest-asyncio

----------------------------------------

TITLE: Implementing HEAD Request Handler in Sanic
DESCRIPTION: Example of a GET route that automatically supports HEAD requests through Sanic Extensions. The route returns a simple text response.

LANGUAGE: python
CODE:
@app.get("/")
async def hello_world(request):
    return text("Hello, world.")

----------------------------------------

TITLE: Modern Cookie Management in Sanic
DESCRIPTION: Demonstrates the new, more intuitive way to set cookies with domain and HTTP-only flags in Sanic responses.

LANGUAGE: python
CODE:
response = text("There's a cookie up in this response")
response.add_cookie(
    "test",
    "It worked!",
    domain=".yummy-yummy-cookie.com",
    httponly=True
)

----------------------------------------

TITLE: Manual SanicTestClient Instantiation in Python
DESCRIPTION: Shows how to manually instantiate a SanicTestClient instance for testing Sanic applications. This approach gives more control over the test client setup.

LANGUAGE: python
CODE:
from sanic_testing.testing import SanicTestClient

test_client = SanicTestClient(app)
test_client.get("/path/to/endpoint")

----------------------------------------

TITLE: Configuring Sanic Extensions in Python
DESCRIPTION: Demonstrates how to configure Sanic Extensions using the app.extend method, with optional type hinting using the Config object.

LANGUAGE: python
CODE:
# This is optional, not required
app = Sanic("MyApp")
app.extend(config={"oas_url_prefix": "/apidocs"})

LANGUAGE: python
CODE:
# This is optional, not required
from sanic_ext import Config

app = Sanic("MyApp")
app.extend(config=Config(oas_url_prefix="/apidocs"))

----------------------------------------

TITLE: Legacy Sanic Extensions Setup (v21.9)
DESCRIPTION: Deprecated method for initializing Sanic Extensions using explicit Extend class initialization

LANGUAGE: python
CODE:
from sanic import Sanic
from sanic.response import text
from sanic_ext import Extend

app = Sanic("MyHelloWorldApp")
Extend(app)

@app.get("/")
async def hello_world(request):
    return text("Hello, world.")

----------------------------------------

TITLE: Setting Application Context in Sanic Python
DESCRIPTION: Demonstrates how to properly set application context using the ctx object instead of directly setting properties on the Sanic or Blueprint object.

LANGUAGE: python
CODE:
app = Sanic("MyApp")
app.ctx.db = Database()

----------------------------------------

TITLE: Initializing ReusableClient in Python
DESCRIPTION: Demonstrates how to create a ReusableClient instance for persistent service testing. This client allows control over the server lifecycle.

LANGUAGE: python
CODE:
from sanic_testing.reusable import ReusableClient

client = ReusableClient(app)

----------------------------------------

TITLE: Modern Sanic Extensions Hello World (v21.12+)
DESCRIPTION: Basic Sanic application using automatic extension setup. No explicit extension initialization required when sanic-ext is installed.

LANGUAGE: python
CODE:
from sanic import Sanic
from sanic.response import text

app = Sanic("MyHelloWorldApp")

@app.get("/")
async def hello_world(request):
    return text("Hello, world.")

----------------------------------------

TITLE: Registering Custom Extensions in Sanic
DESCRIPTION: Simple example showing how to register a custom extension using the Extend.register method introduced in Sanic v22.9.

LANGUAGE: python
CODE:
from sanic_ext import Extend, Extension

class MyCustomExtension(Extension):
    ...

Extend.register(MyCustomExtension())

----------------------------------------

TITLE: Using ReusableClient with Context Manager in Python
DESCRIPTION: Shows how to use ReusableClient within a context manager to manage server lifecycle. The server remains active for multiple requests and shuts down when exiting the context.

LANGUAGE: python
CODE:
from sanic_testing.reusable import ReusableClient

def test_multiple_endpoints_on_same_server(app):
    client = ReusableClient(app)
    with client:
        _, response = client.get("/path/to/1")
        assert response.status == 200

        _, response = client.get("/path/to/2")
        assert response.status == 200

----------------------------------------

TITLE: Creating and Using Blueprint Groups in Sanic
DESCRIPTION: Illustrates how to create Blueprint groups to organize related Blueprints and register them collectively with the application.

LANGUAGE: python
CODE:
# api/content/__init__.py
from sanic import Blueprint
from .static import static
from .authors import authors

content = Blueprint.group(static, authors, url_prefix="/content")

LANGUAGE: python
CODE:
# api/__init__.py
from sanic import Blueprint
from .content import content
from .info import info

api = Blueprint.group(content, info, url_prefix="/api")

LANGUAGE: python
CODE:
# app.py
from sanic import Sanic
from .api import api

app = Sanic(__name__)
app.blueprint(api)

----------------------------------------

TITLE: Implementing AutoMonitor Extension in Sanic
DESCRIPTION: Example implementation of a custom Sanic extension that monitors endpoints. The extension demonstrates the required name and startup components, along with optional label and included methods for enhanced functionality.

LANGUAGE: python
CODE:
from sanic import Request, Sanic, json
from sanic_ext import Extend, Extension

app = Sanic(__name__)
app.config.MONITOR = True


class AutoMonitor(Extension):
    name = "automonitor"

    def startup(self, bootstrap) -> None:
        if self.included():
            self.app.before_server_start(self.ensure_monitor_set)
            self.app.on_request(self.monitor)

    @staticmethod
    async def monitor(request: Request):
        if request.route and request.route.ctx.monitor:
            print("....")

    @staticmethod
    async def ensure_monitor_set(app: Sanic):
        for route in app.router.routes:
            if not hasattr(route.ctx, "monitor"):
                route.ctx.monitor = False

    def label(self):
        has_monitor = [
            route
            for route in self.app.router.routes
            if getattr(route.ctx, "monitor", None)
        ]
        return f"{len(has_monitor)} endpoint(s)"

    def included(self):
        return self.app.config.MONITOR


Extend.register(AutoMonitor)


@app.get("/", ctx_monitor=True)
async def handler(request: Request):
    return json({"foo": "bar"})

----------------------------------------

TITLE: Implementing Basic CORS Protection in Sanic
DESCRIPTION: Demonstrates how to enable basic CORS protection in a Sanic application using Sanic Extensions. It shows setting the CORS_ORIGINS configuration and creating a simple route.

LANGUAGE: python
CODE:
from sanic import Sanic, text
from sanic_ext import Extend

app = Sanic(__name__)
app.config.CORS_ORIGINS = "http://foobar.com,http://bar.com"
Extend(app)

@app.get("/")
async def hello_world(request):
    return text("Hello, world.")

----------------------------------------

TITLE: Installing Sanic Testing Package
DESCRIPTION: Command to install Sanic Testing package from PyPI using pip.

LANGUAGE: bash
CODE:
pip install sanic-testing

----------------------------------------

TITLE: Flexible Decorator Pattern with Optional Arguments
DESCRIPTION: Template for creating decorators that can be used both with and without arguments using keyword-only parameters.

LANGUAGE: python
CODE:
def foobar(maybe_func=None, *, arg1=None, arg2=None):
    def decorator(f):
        @wraps(f)
        async def decorated_function(request, *args, **kwargs):

            response = f(request, *args, **kwargs)
            if isawaitable(response):
                response = await response

            return response

        return decorated_function

    return decorator(maybe_func) if maybe_func else decorator

----------------------------------------

TITLE: Using @openapi.operation Decorator
DESCRIPTION: Example of using the @openapi.operation decorator to set the operation ID for an API operation.

LANGUAGE: python
CODE:
@openapi.operation("doNothing")

----------------------------------------

TITLE: Defining a Forwarded Endpoint in Sanic
DESCRIPTION: Creates a route in Sanic that returns JSON with information about the request, including remote address, scheme, server name, port, and forwarded headers.

LANGUAGE: python
CODE:
@app.route("/fwd")
async def forwarded(request):
    return json(
        {
            "remote_addr": request.remote_addr,
            "scheme": request.scheme,
            "server_name": request.server_name,
            "server_port": request.server_port,
            "forwarded": request.forwarded,
        }
    )

----------------------------------------

TITLE: Defining and Validating Attrs Model in Sanic
DESCRIPTION: This snippet shows how to define an Attrs model for a Person and use it for JSON body validation in a Sanic POST route handler.

LANGUAGE: python
CODE:
@attrs.define
class Person:
    name: str
    age: int

LANGUAGE: python
CODE:
from sanic_ext import validate

@app.post("/person")
@validate(json=Person)
async def handler(request, body: Person):
    return json(attrs.asdict(body))

----------------------------------------

TITLE: Configuring SSL with Separate Cert and Key Files
DESCRIPTION: Demonstrates how to configure SSL in Sanic by specifying separate certificate and key files, with an optional password for encrypted keys.

LANGUAGE: python
CODE:
ssl = {
    "cert": "/path/to/fullchain.pem",
    "key": "/path/to/privkey.pem",
    "password": "for encrypted privkey file",   # Optional
}
app.run(host="0.0.0.0", port=8443, ssl=ssl)

----------------------------------------

TITLE: Defining a Sample User Profile Model
DESCRIPTION: Example of a simple UserProfile class used in subsequent decorator examples to represent a model object.

LANGUAGE: python
CODE:
class UserProfile:
    name: str
    age: int
    email: str

----------------------------------------

TITLE: Using @openapi.body Decorator
DESCRIPTION: Examples of using the @openapi.body decorator to specify the request body for an API operation.

LANGUAGE: python
CODE:
@openapi.body(UserProfile)

LANGUAGE: python
CODE:
@openapi.body({"application/json": UserProfile})

LANGUAGE: python
CODE:
@openapi.body(RequestBody({"application/json": UserProfile}))

LANGUAGE: python
CODE:
@openapi.body({"content": UserProfile})

LANGUAGE: python
CODE:
@openapi.body(RequestBody(UserProfile))

LANGUAGE: python
CODE:
@openapi.body({"application/json": {"description": ...}})

----------------------------------------

TITLE: Querying Sanic Health Diagnostics Endpoint
DESCRIPTION: This snippet demonstrates the output of the diagnostics endpoint, which provides information about the worker state. It shows the structure of the JSON response, including details about the main process, server processes, and reloader process.

LANGUAGE: json
CODE:
$ curl http://localhost:8000/__health__
{
    'Sanic-Main': {'pid': 99997},
    'Sanic-Server-0-0': {
        'server': True,
        'state': 'ACKED',
        'pid': 9999,
        'start_at': datetime.datetime(2022, 10, 1, 0, 0, 0, 0, tzinfo=datetime.timezone.utc),
        'starts': 2,
        'restart_at': datetime.datetime(2022, 10, 1, 0, 0, 12, 861332, tzinfo=datetime.timezone.utc)
    },
    'Sanic-Reloader-0': {
        'server': False,
        'state': 'STARTED',
        'pid': 99998,
        'start_at': datetime.datetime(2022, 10, 1, 0, 0, 0, 0, tzinfo=datetime.timezone.utc),
        'starts': 1
    }
}

----------------------------------------

TITLE: Obtaining SSL Certificates using Certbot
DESCRIPTION: This bash command shows how to use Certbot to obtain SSL certificates for the specified domains, which will be used in the Nginx configuration for HTTPS.

LANGUAGE: bash
CODE:
certbot -d example.com -d www.example.com

----------------------------------------

TITLE: Dynamic AppLoader Implementation
DESCRIPTION: Advanced implementation using AppLoader for dynamic application creation across worker processes. Demonstrates custom naming and endpoint attachment with command-line argument support.

LANGUAGE: python
CODE:
import sys
from functools import partial

from sanic import Request, Sanic, json
from sanic.worker.loader import AppLoader


def attach_endpoints(app: Sanic):
    @app.get("/")
    async def handler(request: Request):
        return json({"app_name": request.app.name})


def create_app(app_name: str) -> Sanic:
    app = Sanic(app_name)
    attach_endpoints(app)
    return app


if __name__ == "__main__":
    app_name = sys.argv[-1]
    loader = AppLoader(factory=partial(create_app, app_name))
    app = loader.load()
    app.prepare(port=9999, dev=True)
    Sanic.serve(primary=app, app_loader=loader)

LANGUAGE: sh
CODE:
python path/to/server.py MyTestAppName

----------------------------------------

TITLE: Type-Annotated Handler Example
DESCRIPTION: Demonstrates a fully type-annotated handler using Python type hints for Request and HTTPResponse types.

LANGUAGE: python
CODE:
from sanic.response import HTTPResponse, text
from sanic.request import Request

@app.get("/typed")
async def typed_handler(request: Request) -> HTTPResponse:
    return text("Done.")

----------------------------------------

TITLE: Accessing Request ID in Sanic
DESCRIPTION: Shows how to access the request ID in a Sanic route handler. The request ID can be set via the X-Request-ID header or is automatically generated if not provided.

LANGUAGE: python
CODE:
@app.route("/")
async def handler(request):
    return text(request.id)

LANGUAGE: bash
CODE:
$ curl localhost:8000 \
    -H "X-Request-ID: ABCDEF12345679"
ABCDEF12345679

----------------------------------------

TITLE: Nginx Configuration for Sanic Proxy
DESCRIPTION: Nginx server block configuration to proxy requests to the Sanic application running in a Docker container.

LANGUAGE: nginx
CODE:
server {
    listen 80;
    listen [::]:80;
    location / {
      proxy_pass http://mysanic:8000/;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection upgrade;
      proxy_set_header Accept-Encoding gzip;
    }
}

----------------------------------------

TITLE: Accessing Inspector via CLI and HTTP
DESCRIPTION: Shows how to access the Sanic Inspector through both CLI and HTTP interfaces.

LANGUAGE: sh
CODE:
sanic inspect

LANGUAGE: sh
CODE:
curl http://localhost:6457

----------------------------------------

TITLE: Applying OpenAPI Decorators to Sanic Route Handler
DESCRIPTION: Demonstrates how to apply OpenAPI decorators to a Sanic route handler, including summary and description. The Sanic route decorator should be the outermost decorator.

LANGUAGE: python
CODE:
from sanic_ext import openapi

@app.get("/path/to/<something>")
@openapi.summary("This is a summary")
@openapi.description("This is a description")
async def handler(request, something: str):
    ...

----------------------------------------

TITLE: Adding X-Request-ID Header to Response in Sanic
DESCRIPTION: Shows how to add the X-Request-ID header to the response using a response listener in Sanic. It demonstrates accessing the request ID and setting it in the response headers.

LANGUAGE: python
CODE:
@app.route("/")
async def handler(request):
    return text(str(request.id))

@app.on_response
async def add_request_id_header(request, response):
    response.headers["X-Request-ID"] = request.id

LANGUAGE: bash
CODE:
$ curl localhost:8000 -i
HTTP/1.1 200 OK
X-Request-ID: 805a958e-9906-4e7a-8fe0-cbe83590431b
content-length: 36
connection: keep-alive
content-type: text/plain; charset=utf-8

805a958e-9906-4e7a-8fe0-cbe83590431b

----------------------------------------

TITLE: Creating a Basic HTML Page for 'Hello World' (HTML)
DESCRIPTION: This HTML file creates a simple 'Hello World' web page. It includes a link to an external CSS file for styling and sets up a basic structure for the content.

LANGUAGE: html
CODE:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Hello World</title>
</head>
<link rel="stylesheet" href="/hello_world.css">
<body>
    <div id='hello_world'>
        Hello world!
    </div>
</body>
</html>

----------------------------------------

TITLE: Initializing Sanic Application with Debug Route in Python
DESCRIPTION: Sets up a basic Sanic application with a single route that returns a JSON response. This snippet demonstrates the core structure of a Sanic app.

LANGUAGE: python
CODE:
# server.py
from sanic import Sanic
from sanic.response import json

app = Sanic(__name__)

@app.route("/")
async def hello_world(request):
    return json({"hello": "world"})

----------------------------------------

TITLE: Raw Bytes Response in Sanic
DESCRIPTION: Sends raw bytes without encoding the body with application/octet-stream content type.

LANGUAGE: python
CODE:
from sanic.response import raw

@app.route("/")
async def handler(request):
    return raw(b"raw bytes")

----------------------------------------

TITLE: Initializing Sanic Configuration with a Dictionary in Python
DESCRIPTION: This snippet demonstrates how to initialize a Sanic application's configuration using a dictionary. It shows the basic setup and how to access configuration values.

LANGUAGE: python
CODE:
from sanic import Sanic

app = Sanic("myapp")
app.config.update({
    "DB_NAME": "appdb",
    "DB_USER": "appuser",
})

print(app.config["DB_NAME"])
print(app.config.DB_USER)

----------------------------------------

TITLE: Accessing Accept Header in Sanic Request
DESCRIPTION: This snippet shows how to access and use the Accept header from a Sanic request object. It demonstrates printing the accept property and checking if a specific content type is accepted.

LANGUAGE: python
CODE:
print(request.accept)
# ["*/*"]

"text/plain" in request.accept

----------------------------------------

TITLE: Advanced Caddy Configuration with Static File Handling
DESCRIPTION: Advanced Caddyfile configuration demonstrating static file serving with fallback to Sanic application, including Brotli compression and Unix socket support.

LANGUAGE: caddy
CODE:
app.example.com {
    # Look for static files first, proxy to Sanic if not found
    route {
        file_server {
            root /srv/sanicexample/static
            precompress br                     # brotli your large scripts and styles
            pass_thru
        }
        reverse_proxy unix//tmp/sanic.socket   # sanic --unix /tmp/sanic.socket
    }
}

----------------------------------------

TITLE: Defining and Using Signals in Sanic
DESCRIPTION: Demonstrates how to define a signal handler for user registration and dispatch it from a route handler.

LANGUAGE: python
CODE:
@app.signal("user.registration.created")
async def send_registration_email(**context):
    await send_email(context["email"], template="registration")

@app.post("/register")
async def handle_registration(request):
    await do_registration(request)
    await request.app.dispatch(
        "user.registration.created",
        context={"email": request.json.email}
    })

----------------------------------------

TITLE: Configuring Sanic Docker Image
DESCRIPTION: This Dockerfile sets up a Python environment and installs Sanic along with its dependencies. It uses a multi-stage build process to create a smaller final image.

LANGUAGE: Dockerfile
CODE:
FROM python:3.7-slim as base

FROM base as builder

RUN mkdir /install
WORKDIR /install

COPY requirements.txt /requirements.txt
RUN pip install --install-option="--prefix=/install" -r /requirements.txt

FROM base

COPY --from=builder /install /usr/local
COPY . /app

WORKDIR /app

EXPOSE 8000

CMD ["python", "main.py"]

----------------------------------------

TITLE: Accessing and Manipulating Request Headers in Sanic
DESCRIPTION: Demonstrates various methods to access and manipulate request headers in a Sanic route handler. It shows how to use different methods like get, getone, and getall to retrieve header values.

LANGUAGE: python
CODE:
@app.route("/")
async def handler(request):
    return json(
        {
            "foo_weakref": request.headers["foo"],
            "foo_get": request.headers.get("Foo"),
            "foo_getone": request.headers.getone("FOO"),
            "foo_getall": request.headers.getall("fOo"),
            "all": list(request.headers.items()),
        }
    )

LANGUAGE: bash
CODE:
$ curl localhost:9999/headers -H "Foo: one" -H "FOO: two"|jq
{
  "foo_weakref": "one",
  "foo_get": "one",
  "foo_getone": "one",
  "foo_getall": [
    "one",
    "two"
  ],
  "all": [
    [
      "host",
      "localhost:9999"
    ],
    [
      "user-agent",
      "curl/7.76.1"
    ],
    [
      "accept",
      "*/*"
    ],
    [
      "foo",
      "one"
    ],
    [
      "foo",
      "two"
    ]
  ]
}

----------------------------------------

TITLE: Basic Caddy Configuration File
DESCRIPTION: Simple Caddyfile configuration for reverse proxying to a Sanic application.

LANGUAGE: caddy
CODE:
example.com {
    reverse_proxy localhost:8001
}

----------------------------------------

TITLE: Registering Routes with Mayim Executor
DESCRIPTION: Python code demonstrating how to register a route in Sanic using Mayim's CountryExecutor.

LANGUAGE: python
CODE:
@app.get("/")
async def handler(request: Request, executor: CountryExecutor):
    countries = await executor.select_all_countries()
    return json({"countries": [country.dict() for country in co

----------------------------------------

TITLE: Configuring Websocket Parameters in Sanic
DESCRIPTION: Demonstrates how to configure various websocket parameters in Sanic, including maximum size, queue size, read and write limits, and ping interval and timeout.

LANGUAGE: python
CODE:
app.config.WEBSOCKET_MAX_SIZE = 2 ** 20
app.config.WEBSOCKET_MAX_QUEUE = 32
app.config.WEBSOCKET_READ_LIMIT = 2 ** 16
app.config.WEBSOCKET_WRITE_LIMIT = 2 ** 16
app.config.WEBSOCKET_PING_INTERVAL = 20
app.config.WEBSOCKET_PING_TIMEOUT = 20

----------------------------------------

TITLE: HTTP Methods as Enum in Python
DESCRIPTION: Shows how to use the new HTTPMethod enum in Sanic route definitions, which can be used interchangeably with strings for method specifications.

LANGUAGE: python
CODE:
from sanic import Sanic, HTTPMethod

@app.route("/", methods=["post", "PUT", HTTPMethod.PATCH])
async def handler(...):
    ...

----------------------------------------

TITLE: Running Sanic Application with Forwarded Secret Configuration
DESCRIPTION: This bash command demonstrates how to run the Sanic application with the SANIC_FORWARDED_SECRET configuration, which is used to identify the trusted proxy for obtaining remote addresses.

LANGUAGE: bash
CODE:
SANIC_FORWARDED_SECRET=_hostname sanic proxied_example --port 8001

----------------------------------------

TITLE: Implementing a Websocket Handler in Sanic
DESCRIPTION: Shows how to create a websocket handler that continuously sends and receives messages. The handler uses a while loop and the send() and recv() methods of the websocket object.

LANGUAGE: python
CODE:
@app.websocket("/feed")
async def feed(request, ws):
    while True:
        data = "hello!"
        print("Sending: " + data)
        await ws.send(data)
        data = await ws.recv()
        print("Received: " + data)

----------------------------------------

TITLE: Factory Application Pattern in Python
DESCRIPTION: Shows how to implement the factory pattern for creating Sanic applications, which can be launched using the new '--factory' CLI flag.

LANGUAGE: python
CODE:
from sanic import Blueprint, Sanic, text

bp = Blueprint(__file__)

@bp.get("/")
async def handler(request):
    return text("ðŸ˜Ž")

def create_app() -> Sanic:
    app = Sanic(__file__)
    app.blueprint(bp)
    return app

----------------------------------------

TITLE: Obtaining Let's Encrypt Certificates using Certbot
DESCRIPTION: Shows how to obtain free SSL certificates from Let's Encrypt using Certbot, with options for ECDSA keys and preferred certificate chain.

LANGUAGE: sh
CODE:
sudo certbot certonly --key-type ecdsa --preferred-chain "ISRG Root X1" -d example.com -d www.example.com

----------------------------------------

TITLE: Installing Sanic with Extensions - Shell
DESCRIPTION: Installation commands for Sanic with Extensions package, showing both combined and separate installation methods.

LANGUAGE: sh
CODE:
pip install sanic[ext]

LANGUAGE: sh
CODE:
pip install sanic sanic-ext

----------------------------------------

TITLE: Loading Sanic Configuration from Environment Variables in Python
DESCRIPTION: This snippet illustrates how to load configuration settings for a Sanic application from environment variables. It shows the use of the load_environment_vars method and demonstrates prioritization of config sources.

LANGUAGE: python
CODE:
import os
from sanic import Sanic

os.environ["SANIC_DB_NAME"] = "appdb"
os.environ["SANIC_DB_USER"] = "appuser"

app = Sanic("myapp")
app.config.load_environment_vars(prefix="SANIC_")

print(app.config.DB_NAME)
print(app.config.DB_USER)

----------------------------------------

TITLE: Defining SQLAlchemy ORM Models
DESCRIPTION: Python code defining SQLAlchemy ORM models for Person and Car entities.

LANGUAGE: python
CODE:
# ./models.py
from sqlalchemy import INTEGER, Column, ForeignKey, String
from sqlalchemy.orm import declarative_base, relationship

Base = declarative_base()


class BaseModel(Base):
    __abstract__ = True
    id = Column(INTEGER(), primary_key=True)


class Person(BaseModel):
    __tablename__ = "person"
    name = Column(String())
    cars = relationship("Car")

    def to_dict(self):
        return {"name": self.name, "cars": [{"brand": car.brand} for car in self.cars]}


class Car(BaseModel):
    __tablename__ = "car"

    brand = Column(String())
    user_id = Column(ForeignKey("person.id"))
    user = relationship("Person", back_populates="cars")

----------------------------------------

TITLE: Implementing Contextual Exceptions in Sanic Python
DESCRIPTION: Shows how to create and raise custom exceptions with dynamic messages and additional context in Sanic.

LANGUAGE: python
CODE:
class TeapotError(SanicException):
    status_code = 418

    @property
    def message(self):
        return f"Sorry {self.extra['name']}, I cannot make you coffee"

raise TeapotError(extra={"name": "Adam"})

----------------------------------------

TITLE: Defining Slug Path Parameter in Python
DESCRIPTION: Illustrates how to use the new 'slug' path parameter type in Sanic route definitions, which must consist of lowercase letters or digits and may contain hyphens.

LANGUAGE: python
CODE:
@app.get("/articles/<article_slug:slug>")
async def article(request, article_slug: str):
    ...

----------------------------------------

TITLE: Testing the Mounted Application
DESCRIPTION: This Bash command tests the mounted application by sending a curl request to the Nginx server, which then forwards it to the Sanic application.

LANGUAGE: bash
CODE:
$ curl localhost/api/foo
URL: http://example.com/api/foo

----------------------------------------

TITLE: Implementing Server Listeners with Optional Loop Parameter
DESCRIPTION: Shows how to implement server listeners with and without the loop parameter.

LANGUAGE: python
CODE:
@app.before_server_start
async def without(app):
    ...

@app.before_server_start
async def with(app, loop):
    ...

----------------------------------------

TITLE: Unquote Parameter Handling in Routes
DESCRIPTION: Example showing how to handle non-ASCII characters in route parameters using the unquote parameter.

LANGUAGE: python
CODE:
@app.route("/overload/<param>", methods=["GET"], unquote=True)
async def handler2(request, param):
    return text("OK2 " + param)

request, response = app.test_client.get("/overload/æ‚¨å¥½")
assert response.text == "OK2 æ‚¨å¥½"

----------------------------------------

TITLE: Database Streaming with asyncpg in Sanic
DESCRIPTION: Implementation of streaming database records to the client using asyncpg's asynchronous cursor.

LANGUAGE: python
CODE:
@app.route("/")
async def index(request):
    response = await request.respond()
    conn = await asyncpg.connect(database='test')
    async with conn.transaction():
        async for record in conn.cursor('SELECT generate_series(0, 10)'):
            await response.send(record[0])

----------------------------------------

TITLE: Implementing File Extension Path Parameters in Sanic Routes
DESCRIPTION: Shows how to use the new file extension path parameter type to handle dynamic file routes with optional extension restrictions.

LANGUAGE: python
CODE:
@app.get("/path/to/<filename:ext>")
async def handler(request, filename, ext):
    ...

LANGUAGE: python
CODE:
@app.get("/path/to/<filename=int:ext=jpg>")
async def handler(request, filename, ext):
    ...

----------------------------------------

TITLE: Integrating Pydantic with Sanic OpenAPI
DESCRIPTION: Example of integrating Pydantic models with Sanic OpenAPI decorators to generate schema automatically.

LANGUAGE: python
CODE:
from sanic import Sanic, json
from sanic_ext import validate, openapi
from pydantic import BaseModel, Field

class Test(BaseModel):
    foo: str = Field(description="Foo Description", example="FOOO")
    bar: str = "test"


app = Sanic("test")

@app.get("/")
@openapi.definition(
    body={'application/json': Test.schema()},
)
@validate(json=Test)
async def get(request):
    return json({})

----------------------------------------

TITLE: Configuring Proxy Settings in Sanic
DESCRIPTION: Sets up the FORWARDED_SECRET, REAL_IP_HEADER, and PROXIES_COUNT configuration values in a Sanic application to handle proxy headers.

LANGUAGE: python
CODE:
app.config.FORWARDED_SECRET = "super-duper-secret"
app.config.REAL_IP_HEADER = "CF-Connecting-IP"
app.config.PROXIES_COUNT = 2

----------------------------------------

TITLE: Running Sanic with Multiple HTTP Versions
DESCRIPTION: Demonstrates how to run a Sanic server with both HTTP/3 and HTTP/1.1 simultaneously using command line options or Python code.

LANGUAGE: bash
CODE:
$ sanic path.to.server:app --http=3 --http=1

$ sanic path.to.server:app -3 -1

LANGUAGE: python
CODE:
app.prepre(version=3)
app.prepre(version=1)
Sanic.serve()

----------------------------------------

TITLE: Blueprint Implementation Examples
DESCRIPTION: Collection of blueprint implementations showing different ways to register server start listeners in various module locations.

LANGUAGE: python
CODE:
from sanic import Blueprint
from sanic.log import logger

level1 = Blueprint("level1")

@level1.after_server_start
def print_something(app, loop):
    logger.debug("something @ level1")

LANGUAGE: python
CODE:
from sanic import Blueprint
from sanic.log import logger

level3 = Blueprint("level3")

@level3.after_server_start
def print_something(app, loop):
    logger.debug("something @ level3")

----------------------------------------

TITLE: URL Generation for Class-Based Views
DESCRIPTION: Demonstrates how to generate URLs for class-based views using app.url_for() and redirect to those URLs.

LANGUAGE: python
CODE:
@app.route("/")
def index(request):
    url = app.url_for("SpecialClassView")
    return redirect(url)


class SpecialClassView(HTTPMethodView):
    def get(self, request):
        return text("Hello from the Special Class View!")


app.add_route(SpecialClassView.as_view(), "/special_class_view")

----------------------------------------

TITLE: Accessing Current Request in Sanic
DESCRIPTION: Shows how to retrieve the current request object when outside of a request handler in Sanic.

LANGUAGE: python
CODE:
from sanic import Request

Request.get_current()

----------------------------------------

TITLE: Using Sanic's App Inspector
DESCRIPTION: These snippets demonstrate how to use Sanic's App Inspector to monitor and manage running applications. They show how to inspect the application state and issue commands like scaling the number of workers.

LANGUAGE: sh
CODE:
sanic inspect

LANGUAGE: sh
CODE:
sanic inspect scale 4

LANGUAGE: sh
CODE:
sanic inspect migrations

----------------------------------------

TITLE: Method-Specific Decorators in Views
DESCRIPTION: Shows how to apply decorators to specific HTTP methods within a class-based view rather than decorating all methods.

LANGUAGE: python
CODE:
class ViewWithSomeDecorator(HTTPMethodView):

    @staticmethod
    @some_decorator_here
    def get(request, name):
        return text("Hello I have a decorator")

    def post(self, request, name):
        return text("Hello I do not have any decorators")

    @some_decorator_here
    def patch(self, request, name):
        return text("Hello I have a decorator")

----------------------------------------

TITLE: Defining Middleware Priority in Sanic
DESCRIPTION: Illustrates how to assign priority to middleware functions to control their execution order.

LANGUAGE: python
CODE:
@app.on_request
async def low_priority(_):
    ...

@app.on_request(priority=10)
async def high_priority(_):
    ...

----------------------------------------

TITLE: Running a Sanic Server from Command Line
DESCRIPTION: This snippet shows the command to start a Sanic server and the resulting output. It demonstrates how Sanic provides detailed information about the server configuration and extensions when starting up.

LANGUAGE: sh
CODE:
sanic path.to.server:app
[2023-01-31 12:34:56 +0000] [999996] [INFO] Sanic v22.12.0
[2023-01-31 12:34:56 +0000] [999996] [INFO] Goin' Fast @ http://127.0.0.1:8000
[2023-01-31 12:34:56 +0000] [999996] [INFO] mode: production, single worker
[2023-01-31 12:34:56 +0000] [999996] [INFO] server: sanic, HTTP/1.1
[2023-01-31 12:34:56 +0000] [999996] [INFO] python: 3.10.9
[2023-01-31 12:34:56 +0000] [999996] [INFO] platform: SomeOS-9.8.7
[2023-01-31 12:34:56 +0000] [999996] [INFO] packages: sanic-routing==22.8.0, sanic-testing==22.12.0, sanic-ext==22.12.0
[2023-01-31 12:34:56 +0000] [999997] [INFO] Sanic Extensions:
[2023-01-31 12:34:56 +0000] [999997] [INFO]   > injection [12 dependencies; 7 constants]
[2023-01-31 12:34:56 +0000] [999997] [INFO]   > openapi [http://127.0.0.1:8000/docs]
[2023-01-31 12:34:56 +0000] [999997] [INFO]   > http 
[2023-01-31 12:34:56 +0000] [999997] [INFO]   > templating [jinja2==3.1.2]
[2023-01-31 12:34:56 +0000] [999997] [INFO] Starting worker [999997]

----------------------------------------

TITLE: Using Custom Version Prefix in Sanic Routes
DESCRIPTION: This example shows how to use a custom version prefix in Sanic routes. It demonstrates mounting versioned routes on '/api' using the version_prefix parameter.

LANGUAGE: python
CODE:
# /v1/my/path
app.route("/my/path", version=1, version_prefix="/api/v")

----------------------------------------

TITLE: Serving Static Files with Sanic Blueprints
DESCRIPTION: Demonstrates how to set up static file handlers within a Blueprint and generate URLs for static files.

LANGUAGE: python
CODE:
bp = Blueprint("bp", url_prefix="/bp")
bp.static("/web/path", "/folder/to/serve")
bp.static("/web/path", "/folder/to/server", name="uploads")

LANGUAGE: python
CODE:
>>> print(app.url_for("static", name="bp.uploads", filename="file.txt"))
'/bp/web/path/file.txt'

----------------------------------------

TITLE: Dispatching Events with Context in Sanic
DESCRIPTION: Shows how to dispatch events with additional context information in Sanic.

LANGUAGE: python
CODE:
@app.signal("user.registration.created")
async def send_registration_email(**context):
    print(context)

await app.dispatch(
    "user.registration.created",
    context={"hello": "world"}
)

----------------------------------------

TITLE: Sanic Version Pattern Format
DESCRIPTION: Defines the calendar versioning pattern used by Sanic, following YY.MM.MICRO format where YY is year, MM is month, and MICRO is the patch version starting at 0.

LANGUAGE: plaintext
CODE:
YY.MM.MICRO

----------------------------------------

TITLE: Running Sanic with TLS Support
DESCRIPTION: These snippets show different ways to start a Sanic server with TLS support. It demonstrates how to specify certificate and key files, use a directory containing the necessary files, or enable auto-TLS for development.

LANGUAGE: sh
CODE:
sanic path.to.server:app --cert=/path/to/bundle.crt --key=/path/to/privkey.pem

LANGUAGE: sh
CODE:
sanic path.to.server:app --tls=/path/to/certs

LANGUAGE: sh
CODE:
sanic path.to.server:app --dev --auto-tls

----------------------------------------

TITLE: Configuring Nginx for Reverse Proxy
DESCRIPTION: This Nginx configuration sets up a reverse proxy to forward requests from /api/ to the Sanic application. It also sets the appropriate Host header for proper routing.

LANGUAGE: nginx
CODE:
# conf
server {
    listen 80;

    # Computed data service
    location /api/ {
        proxy_pass http://<YOUR IP ADDRESS>:9999/;
        proxy_set_header Host example.com;
    }
}

----------------------------------------

TITLE: Route Context in Sanic
DESCRIPTION: Demonstrates how to add context to routes using ctx_ prefix in Sanic.

LANGUAGE: python
CODE:
@app.get("/1", ctx_label="something")
async def handler1(request):
    ...

@app.get("/2", ctx_label="something")
async def handler2(request):
    ...

@app.get("/99")
async def handler99(request):
    ...

@app.on_request
async def do_something(request):
    if request.route.ctx.label == "something":
        ...

----------------------------------------

TITLE: Modifying Request Match Info in Sanic Middleware
DESCRIPTION: Demonstrates how to modify request.match_info in middleware, converting URL slugs from hyphenated to underscore format.

LANGUAGE: python
CODE:
@app.on_request
def convert_slug_to_underscore(request: Request):
    request.match_info["slug"] = request.match_info["slug"].replace("-", "_")


@app.get("/<slug:slug>")
async def handler(request, slug):
    return text(slug)

----------------------------------------

TITLE: Route Decorator with HTTP Methods in Sanic
DESCRIPTION: Demonstrates the use of route decorator with specified HTTP methods in Sanic.

LANGUAGE: python
CODE:
@app.route('/test', methods=["POST", "PUT"])
async def handler(request):
    return text('OK')

----------------------------------------

TITLE: Early Response in Sanic Middleware
DESCRIPTION: Shows how middleware can return an HTTPResponse to halt further processing, including preventing the execution of the route handler.

LANGUAGE: python
CODE:
@app.on_request
async def halt_request(request):
    return text("I halted the request")

@app.on_response
async def halt_response(request, response):
    return text("I halted the response")

----------------------------------------

TITLE: Simple Route Handler with Decorator
DESCRIPTION: Example of a basic route handler using the @app.get decorator to define an endpoint. Shows how to return a text response.

LANGUAGE: python
CODE:
from sanic.response import text

@app.get("/foo")
async def foo_handler(request):
    return text("I said foo!")

----------------------------------------

TITLE: Defining and Validating Dataclass Model in Sanic
DESCRIPTION: This snippet shows how to define a dataclass model for search parameters and use it for query validation in a Sanic route handler.

LANGUAGE: python
CODE:
@dataclass
class SearchParams:
    q: str

LANGUAGE: python
CODE:
from sanic_ext import validate

@app.route("/search")
@validate(query=SearchParams)
async def handler(request, query: SearchParams):
    return json(asdict(query))

----------------------------------------

TITLE: Creating a Custom Authorization Decorator in Sanic
DESCRIPTION: Illustrates how to create a custom authorization decorator for Sanic routes. This decorator checks the client's authorization status and either allows the request to proceed or returns a 'not authorized' response.

LANGUAGE: python
CODE:
from functools import wraps
from sanic.response import json

def authorized():
    def decorator(f):
        @wraps(f)
        async def decorated_function(request, *args, **kwargs):
            # run some method that checks the request
            # for the client's authorization status
            is_authorized = await check_request_for_authorization_status(request)

            if is_authorized:
                # the user is authorized.
                # run the handler method and return the response
                response = await f(request, *args, **kwargs)
                return response
            else:
                # the user is not authorized.
                return json({"status": "not_authorized"}, 403)
        return decorated_function
    return decorator


@app.route("/")
@authorized()
async def test(request):
    return json({"status": "authorized"})

----------------------------------------

TITLE: Running Sanic with HTTPS using Python
DESCRIPTION: Shows how to run a Sanic application with HTTPS using Python code, specifying the SSL certificate directory.

LANGUAGE: python
CODE:
app.run("::", 443, ssl="/etc/letsencrypt/live/example.com/")