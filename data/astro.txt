TITLE: Basic Astro Component Structure
DESCRIPTION: Shows the fundamental structure of an Astro component with a component script section and template section separated by code fence.

LANGUAGE: astro
CODE:
---
// Component Script (JavaScript)
---
<!-- Component Template (HTML + JS Expressions) -->

----------------------------------------

TITLE: Using TypeScript with Markdown Layouts in Astro
DESCRIPTION: This example demonstrates how to use TypeScript with Markdown layouts in Astro, including type definitions for frontmatter properties.

LANGUAGE: astro
CODE:
---
import type { MarkdownLayoutProps } from 'astro';

type Props = MarkdownLayoutProps<{
  // Define frontmatter props here
  title: string;
  author: string;
  date: string;
}>;

// Now, `frontmatter`, `url`, and other Markdown layout properties
// are accessible with type safety
const { frontmatter, url } = Astro.props;
---
<html>
  <head>
    <meta charset="utf-8">
    <link rel="canonical" href={new URL(url, Astro.site).pathname}>
    <title>{frontmatter.title}</title>
  </head>
  <body>
    <h1>{frontmatter.title} by {frontmatter.author}</h1>
    <slot />
    <p>Written on: {frontmatter.date}</p>
  </body>
</html>

----------------------------------------

TITLE: Fetching user session with Auth.js
DESCRIPTION: Retrieving the user's session information using Auth.js in an Astro component.

LANGUAGE: astro
CODE:
---
import Layout from 'src/layouts/Base.astro';
import { getSession } from 'auth-astro/server';

const session = await getSession(Astro.request);
---
<Layout>
  {
    session ? (
      <p>Welcome {session.user?.name}</p>
    ) : (
      <p>Not logged in</p>
    )
  }
</Layout>

----------------------------------------

TITLE: Slots Implementation
DESCRIPTION: Demonstrates the usage of named and default slots for content projection in Astro components.

LANGUAGE: astro
CODE:
---
import Header from './Header.astro';
import Logo from './Logo.astro';
import Footer from './Footer.astro';

const { title } = Astro.props;
---
<div id="content-wrapper">
  <Header />
  <slot name="after-header" />
  <Logo />
  <h1>{title}</h1>
  <slot />
  <Footer />
  <slot name="after-footer" />
</div>

----------------------------------------

TITLE: Creating Interactive Confetti Button Component in Astro
DESCRIPTION: Demonstrates how to create a button component that triggers a confetti animation using the canvas-confetti npm module and event listeners.

LANGUAGE: astro
CODE:
<button data-confetti-button>Celebrate!</button>

<script>
  // Import npm modules.
  import confetti from 'canvas-confetti';

  // Find our component DOM on the page.
  const buttons = document.querySelectorAll('[data-confetti-button]');

  // Add event listeners to fire confetti when a button is clicked.
  buttons.forEach((button) => {
    button.addEventListener('click', () => confetti());
  });
</script>

----------------------------------------

TITLE: Component Template Features
DESCRIPTION: Shows various features available in the component template including HTML, JavaScript expressions, and component imports.

LANGUAGE: astro
CODE:
---
import Banner from '../components/Banner.astro';
import Avatar from '../components/Avatar.astro';
import ReactPokemonComponent from '../components/ReactPokemonComponent.jsx';
const myFavoritePokemon = [/* ... */];
const { title } = Astro.props;
---
<!-- HTML comments supported! -->
{/* JS comment syntax is also valid! */}

<Banner />
<h1>Hello, world!</h1>

<p>{title}</p>

<Avatar server:defer>
  <svg slot="fallback" class="generic-avatar" transition:name="avatar">...</svg>
</Avatar>

<ReactPokemonComponent client:visible />

<ul>
  {myFavoritePokemon.map((data) => <li>{data.name}</li>)}
</ul>

<p class:list={["add", "dynamic", { classNames: true }]} />

----------------------------------------

TITLE: Custom Greeting Component with Data Attributes
DESCRIPTION: Creates a reusable greeting component that passes server-side variables to client-side JavaScript using data attributes.

LANGUAGE: astro
CODE:
---
const { message = 'Welcome, world!' } = Astro.props;
---

<astro-greet data-message={message}>
  <button>Say hi!</button>
</astro-greet>

<script>
  class AstroGreet extends HTMLElement {
    connectedCallback() {
      const message = this.dataset.message;
      const button = this.querySelector('button');
      button.addEventListener('click', () => {
        alert(message);
      });
    }
  }

  customElements.define('astro-greet', AstroGreet);
</script>

----------------------------------------

TITLE: Basic Middleware Implementation in Astro
DESCRIPTION: Creates a basic middleware function that intercepts requests and modifies locals object to share data across components.

LANGUAGE: javascript
CODE:
export function onRequest (context, next) {
    context.locals.title = "New title";
    return next();
};

----------------------------------------

TITLE: Interactive Framework Components with Hydration
DESCRIPTION: Shows different hydration patterns using client directives to make framework components interactive. Includes examples of load, visible, and client-only rendering strategies.

LANGUAGE: astro
CODE:
---
import InteractiveButton from '../components/InteractiveButton.jsx';
import InteractiveCounter from '../components/InteractiveCounter.jsx';
import InteractiveModal from '../components/InteractiveModal.svelte';
---
<!-- This component's JS will begin importing when the page loads -->
<InteractiveButton client:load />

<!-- This component's JS will not be sent to the client until
the user scrolls down and the component is visible on the page -->
<InteractiveCounter client:visible />

<!-- This component won't render on the server, but will render on the client when the page loads -->
<InteractiveModal client:only="svelte" />

----------------------------------------

TITLE: Creating a Basic Astro Layout Component
DESCRIPTION: This snippet demonstrates how to create a basic layout component in Astro, including a page shell, navigation, and a slot for content injection.

LANGUAGE: astro
CODE:
---
// src/layouts/MySiteLayout.astro
import BaseHead from '../components/BaseHead.astro';
import Footer from '../components/Footer.astro';
const { title } = Astro.props;
---
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <BaseHead title={title}/>
  </head>
  <body>
    <nav>
      <a href="#">Home</a>
      <a href="#">Posts</a>
      <a href="#">Contact</a>
    </nav>
    <h1>{title}</h1>
    <article>
      <slot /> <!-- your content is injected here -->
    </article>
    <Footer />
  </body>
  <style>
    h1 {
      font-size: 2rem;
    }
  </style>
</html>

----------------------------------------

TITLE: Fetching and Rendering Data in Astro Component
DESCRIPTION: This snippet demonstrates how to fetch data from an API in an Astro component, render it in HTML, and pass it to other components as props. It uses top-level await and the fetch API to make an HTTP request.

LANGUAGE: astro
CODE:
---
// src/components/User.astro
import Contact from "../components/Contact.jsx";
import Location from "../components/Location.astro";

const response = await fetch("https://randomuser.me/api/");
const data = await response.json();
const randomUser = data.results[0];
---
<!-- Data fetched at build can be rendered in HTML -->
<h1>User</h1>
<h2>{randomUser.name.first} {randomUser.name.last}</h2>

<!-- Data fetched at build can be passed to components as props -->
<Contact client:load email={randomUser.email} />
<Location city={randomUser.location.city} />

----------------------------------------

TITLE: Installing Astro via yarn
DESCRIPTION: Command to create a new Astro project using yarn.

LANGUAGE: bash
CODE:
# create a new project with yarn
yarn create astro

----------------------------------------

TITLE: Implementing Theme Toggle Functionality with JavaScript
DESCRIPTION: Client-side script that handles theme toggling, local storage management, and system preference detection.

LANGUAGE: javascript
CODE:
const theme = (() => {
  const localStorageTheme = localStorage?.getItem("theme") ?? '';
  if (['dark', 'light'].includes(localStorageTheme)) {
    return localStorageTheme;
  }
  if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
    return 'dark';
  }
    return 'light';
})();
        
if (theme === 'light') {
  document.documentElement.classList.remove('dark');
} else {
  document.documentElement.classList.add('dark');
}

window.localStorage.setItem('theme', theme);

const handleToggleClick = () => {
  const element = document.documentElement;
  element.classList.toggle("dark");
  
  const isDark = element.classList.contains("dark");
  localStorage.setItem("theme", isDark ? "dark" : "light");
}

document.getElementById("themeToggle")?.addEventListener("click", handleToggleClick);

----------------------------------------

TITLE: Installing Astro using npm
DESCRIPTION: Command to create a new Astro project using npm. This is part of the quick start guide for setting up an Astro project.

LANGUAGE: sh
CODE:
# create a new project with npm
npm create astro@latest

----------------------------------------

TITLE: Creating Better Auth client for React
DESCRIPTION: Setting up a Better Auth client for use with React in an Astro project.

LANGUAGE: typescript
CODE:
import { createAuthClient } from 'better-auth/react';

export const authClient = createAuthClient();

export const { signIn, signOut } = authClient;

----------------------------------------

TITLE: Defining an Astro Action
DESCRIPTION: Example of defining a basic Astro Action in the server object exported from src/actions/index.ts. It uses defineAction to create a getGreeting action with input validation and a handler function.

LANGUAGE: typescript
CODE:
import { defineAction } from 'astro:actions';
import { z } from 'astro:schema';

export const server = {
  getGreeting: defineAction({
    input: z.object({
      name: z.string(),
    }),
    handler: async (input) => {
      return `Hello, ${input.name}!`
    }
  })
}

----------------------------------------

TITLE: Importing Content Collection APIs in Astro
DESCRIPTION: Shows the main imports available from the astro:content module including utilities for collection definition, querying, and rendering.

LANGUAGE: javascript
CODE:
import { 
  z,
  defineCollection,
  getCollection,
  getEntry,
  getEntries,
  reference,
  render
 } from 'astro:content';

----------------------------------------

TITLE: Creating Base Layout Component in Astro
DESCRIPTION: Defines a basic layout component with header, footer, and global styles. Includes meta tags and script imports for a standard HTML page structure.

LANGUAGE: astro
CODE:
---
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import '../styles/global.css';
const pageTitle = "Home Page";
---
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>{pageTitle}</title>
  </head>
  <body>
    <Header />
    <h1>{pageTitle}</h1>
    <Footer />
    <script>
      import "../scripts/menu.js";
    </script>
  </body>
</html>

----------------------------------------

TITLE: Defining Content Collections in TypeScript
DESCRIPTION: Example of defining content collections using the defineCollection function and specifying loaders and schemas.

LANGUAGE: typescript
CODE:
import { defineCollection, z } from 'astro:content';
import { glob, file } from 'astro/loaders';

const blog = defineCollection({
  loader: glob({ pattern: "**/*.md", base: "./src/data/blog" }),
  schema: z.object({
    title: z.string(),
    description: z.string(),
    pubDate: z.coerce.date(),
    updatedDate: z.coerce.date().optional(),
  })
});

const dogs = defineCollection({
  loader: file("src/data/dogs.json"),
  schema: z.object({
    id: z.string(),
    breed: z.string(),
    temperament: z.array(z.string()),
  }),
});

export const collections = { blog, dogs };

----------------------------------------

TITLE: Adding Integrations to Astro Configuration
DESCRIPTION: This snippet demonstrates how to add integrations to an Astro project's configuration file. It shows three different ways to import and use integrations: from an installed npm package, from a local file, and as an inline object.

LANGUAGE: javascript
CODE:
// astro.config.mjs
import { defineConfig } from 'astro/config';
import installedIntegration from '@astrojs/vue';
import localIntegration from './my-integration.js';

export default defineConfig({
  integrations: [
    // 1. Imported from an installed npm package
    installedIntegration(),
    // 2. Imported from a local JS file
    localIntegration(),
    // 3. An inline object
    {name: 'namespace:id', hooks: { /* ... */ }},
  ]
});

----------------------------------------

TITLE: Defining Content Collections in TypeScript
DESCRIPTION: Example of defining content collections using the defineCollection function and specifying loaders and schemas.

LANGUAGE: typescript
CODE:
import { defineCollection, z } from 'astro:content';
import { glob, file } from 'astro/loaders';

const blog = defineCollection({
  loader: glob({ pattern: "**/*.md", base: "./src/data/blog" }),
  schema: z.object({
    title: z.string(),
    description: z.string(),
    pubDate: z.coerce.date(),
    updatedDate: z.coerce.date().optional(),
  })
});

const dogs = defineCollection({
  loader: file("src/data/dogs.json"),
  schema: z.object({
    id: z.string(),
    breed: z.string(),
    temperament: z.array(z.string()),
  }),
});

export const collections = { blog, dogs };

----------------------------------------

TITLE: Defining Astro Configuration in JavaScript
DESCRIPTION: Demonstrates how to create and use the Astro configuration file (astro.config.mjs) to set project-wide options using the defineConfig helper function.

LANGUAGE: javascript
CODE:
// astro.config.mjs
import { defineConfig } from "astro/config";

export default defineConfig({
  // your configuration options here...
});

----------------------------------------

TITLE: Defining Content Collections in TypeScript
DESCRIPTION: Example of defining content collections using the defineCollection function and specifying loaders and schemas.

LANGUAGE: typescript
CODE:
import { defineCollection, z } from 'astro:content';
import { glob, file } from 'astro/loaders';

const blog = defineCollection({
  loader: glob({ pattern: "**/*.md", base: "./src/data/blog" }),
  schema: z.object({
    title: z.string(),
    description: z.string(),
    pubDate: z.coerce.date(),
    updatedDate: z.coerce.date().optional(),
  })
});

const dogs = defineCollection({
  loader: file("src/data/dogs.json"),
  schema: z.object({
    id: z.string(),
    breed: z.string(),
    temperament: z.array(z.string()),
  }),
});

export const collections = { blog, dogs };

----------------------------------------

TITLE: Creating a Reusable Head Component in Astro
DESCRIPTION: Demonstrates how to create a reusable Head component in Astro for managing common metadata and SEO tags across multiple pages.

LANGUAGE: astro
CODE:
---
import Favicon from "../assets/Favicon.astro";
import SomeOtherTags from "./SomeOtherTags.astro";

const { title = "My Astro Website", ...props } = Astro.props;
---
<link rel="sitemap" href="/sitemap-index.xml">
<title>{title}</title>
<meta name="description" content="Welcome to my new Astro site!">

<!-- Web analytics -->
<script data-goatcounter="https://my-account.goatcounter.com/count" async src="//gc.zgo.at/count.js"></script>

<!-- Open Graph tags -->
<meta property="og:title" content="My New Astro Website" />
<meta property="og:type" content="website" />
<meta property="og:url" content="http://www.example.com/" />
<meta property="og:description" content="Welcome to my new Astro site!" />
<meta property="og:image" content="https://www.example.com/_astro/seo-banner.BZD7kegZ.webp">
<meta property="og:image:alt" content="">

<SomeOtherTags />

<Favicon />

----------------------------------------

TITLE: Initial Blocking Data Fetch Implementation
DESCRIPTION: Basic Astro page implementation that blocks rendering while awaiting data from two API endpoints. This approach delays the initial page render until all data is fetched.

LANGUAGE: astro
CODE:
---
const personResponse = await fetch('https://randomuser.me/api/');
const personData = await personResponse.json();
const randomPerson = personData.results[0];
const factResponse = await fetch('https://catfact.ninja/fact');
const factData = await factResponse.json();
---
<html>
  <head>
    <title>A name and a fact</title>
  </head>
  <body>
    <h2>A name</h2>
    <p>{randomPerson.name.first}</p>
    <h2>A fact</h2>
    <p>{factData.fact}</p>
  </body>
</html>

----------------------------------------

TITLE: Testing Astro Components with Container API
DESCRIPTION: Example of testing Astro components using the experimental Container API with Vitest.

LANGUAGE: javascript
CODE:
import { experimental_AstroContainer as AstroContainer } from 'astro/container';
import { expect, test } from 'vitest';
import Card from '../src/components/Card.astro';

test('Card with slots', async () => {
	const container = await AstroContainer.create();
	const result = await container.renderToString(Card, {
		slots: {
			default: 'Card content',
		},
	});

	expect(result).toContain('This is a card');
	expect(result).toContain('Card content');
});

----------------------------------------

TITLE: Installing Astro DB Integration
DESCRIPTION: Install the @astrojs/db integration using the astro add command.

LANGUAGE: bash
CODE:
npx astro add db

----------------------------------------

TITLE: Component Props with TypeScript
DESCRIPTION: Shows how to define and use props in an Astro component using TypeScript interfaces.

LANGUAGE: astro
CODE:
---
interface Props {
  name: string;
  greeting?: string;
}

const { greeting = "Hello", name } = Astro.props;
---
<h2>{greeting}, {name}!</h2>

----------------------------------------

TITLE: Server Island Component in Astro
DESCRIPTION: Demonstrates creation of a server island using the server:defer directive for parallel server-side rendering.

LANGUAGE: astro
CODE:
---
import Avatar from "../components/Avatar.astro";
---
<Avatar server:defer />

----------------------------------------

TITLE: Implementing Feedback Form Component
DESCRIPTION: Creates a form component with name, email, and message fields, including form submission handling and response display. Available in multiple UI frameworks including React, Preact, Solid, Vue, and Svelte.

LANGUAGE: tsx
CODE:
import { useState } from "react";
import type { FormEvent } from "react";

export default function Form() {
  const [responseMessage, setResponseMessage] = useState("");

  async function submit(e: FormEvent<HTMLFormElement>) {
    e.preventDefault();
    const formData = new FormData(e.target as HTMLFormElement);
    const response = await fetch("/api/feedback", {
      method: "POST",
      body: formData,
    });
    const data = await response.json();
    if (data.message) {
      setResponseMessage(data.message);
    }
  }

  return (
    <form onSubmit={submit}>
      <label htmlFor="name">
        Name
        <input type="text" id="name" name="name" autoComplete="name" required />
      </label>
      <label htmlFor="email">
        Email
        <input type="email" id="email" name="email" autoComplete="email" required />
      </label>
      <label htmlFor="message">
        Message
        <textarea id="message" name="message" autoComplete="off" required />
      </label>
      <button>Send</button>
      {responseMessage && <p>{responseMessage}</p>}
    </form>
  );
}

----------------------------------------

TITLE: Defining Astro DB Tables in TypeScript
DESCRIPTION: Shows how to define database tables using the defineTable() and column utilities from astro:db. This example configures a Comment table with required text columns for author and body.

LANGUAGE: typescript
CODE:
import { defineDb, defineTable, column } from 'astro:db';

const Comment = defineTable({
  columns: {
    author: column.text(),
    body: column.text(),
  }
})

export default defineDb({
  tables: { Comment },
})

----------------------------------------

TITLE: Inserting Data in Astro DB
DESCRIPTION: Insert data into database tables using form submissions or Astro actions.

LANGUAGE: astro
CODE:
---
import { db, Comment } from 'astro:db';

if (Astro.request.method === 'POST') {
  const formData = await Astro.request.formData();
  const author = formData.get('author');
  const body = formData.get('body');
  if (typeof author === 'string' && typeof body === 'string') {
    await db.insert(Comment).values({ author, body });
  }
}

const comments = await db.select().from(Comment);
---

<form method="POST" style="display: grid">
	<label for="author">Author</label>
	<input id="author" name="author" />

	<label for="body">Body</label>
	<textarea id="body" name="body"></textarea>

	<button type="submit">Submit</button>
</form>

<!-- Render `comments` -->

----------------------------------------

TITLE: Accessing Markdown Content in Astro Components
DESCRIPTION: Example showing how to import and display Markdown content in Astro components using dynamic expressions and file imports.

LANGUAGE: markdown
CODE:
---
title: 'The greatest post of all time'
author: 'Ben'
---

Here is my _great_ post!

LANGUAGE: astro
CODE:
---
import * as greatPost from './posts/great-post.md';
const posts = Object.values(import.meta.glob('./posts/*.md', { eager: true }));
---

<p>{greatPost.frontmatter.title}</p>
<p>Written by: {greatPost.frontmatter.author}</p>

<p>Post Archive:</p>
<ul>
  {posts.map(post => <li><a href={post.url}>{post.frontmatter.title}</a></li>)}
</ul>

----------------------------------------

TITLE: Dynamic Multi-Level Page Generation
DESCRIPTION: Example of generating multiple pages at different URL depths using rest parameters and props.

LANGUAGE: astro
CODE:
---
export function getStaticPaths() {
  const pages = [
    {
      slug: undefined,
      title: "Astro Store",
      text: "Welcome to the Astro store!",
    },
    {
      slug: "products",
      title: "Astro products",
      text: "We have lots of products for you",
    },
    {
      slug: "products/astro-handbook",
      title: "The ultimate Astro handbook",
      text: "If you want to learn Astro, you must read this book.",
    },
  ];
  
  return pages.map(({ slug, title, text }) => {
    return {
      params: { slug },
      props: { title, text },
    };
  });
}

const { title, text } = Astro.props;
---
<html>
  <head>
    <title>{title}</title>
  </head>
  <body>
    <h1>{title}</h1>
    <p>{text}</p>
  </body>
</html>

----------------------------------------

TITLE: Implementing Server-Side Validation in Astro
DESCRIPTION: This snippet shows comprehensive server-side validation for the registration form. It checks for valid input, performs database checks, and handles error messages.

LANGUAGE: astro
CODE:
---
import { isRegistered, registerUser } from "../../data/users"
import { isValidEmail } from "../../utils/isValidEmail";

const errors = { username: "", email: "", password: "" };
if (Astro.request.method === "POST") {
  try {
    const data = await Astro.request.formData();
    const name = data.get("username");
    const email = data.get("email");
    const password = data.get("password");
    if (typeof name !== "string" || name.length < 1) {
      errors.username += "Please enter a username. ";
    }
    if (typeof email !== "string" || !isValidEmail(email)) {
      errors.email += "Email is not valid. ";
    } else if (await isRegistered(email)) {
      errors.email += "Email is already registered. ";
    }
    if (typeof password !== "string" || password.length < 6) {
      errors.password += "Password must be at least 6 characters. ";
    }
    const hasErrors = Object.values(errors).some(msg => msg)
    if (!hasErrors) {
      await registerUser({name, email, password});
      return Astro.redirect("/login");
    }
  } catch (error) {
    if (error instanceof Error) {
      console.error(error.message);
    }
  }
}
---

----------------------------------------

TITLE: Using an Astro Layout Component
DESCRIPTION: This snippet shows how to use a layout component in an Astro page file, wrapping the page content within the layout.

LANGUAGE: astro
CODE:
---
import MySiteLayout from '../layouts/MySiteLayout.astro';
---
<MySiteLayout title="Home Page">
  <p>My page content, wrapped in a layout!</p>
</MySiteLayout>

----------------------------------------

TITLE: Avatar Component with Dynamic Content in Astro
DESCRIPTION: Demonstrates a server island component that fetches user-specific content using cookies.

LANGUAGE: astro
CODE:
---
import { getUserAvatar } from '../sessions';
const userSession = Astro.cookies.get('session');
const avatarURL = await getUserAvatar(userSession);
---
<img alt="User avatar" src={avatarURL} />

----------------------------------------

TITLE: GitHub Action Workflow for Astro Deployment
DESCRIPTION: This YAML configuration sets up a GitHub Action workflow to automatically build and deploy an Astro site to GitHub Pages when changes are pushed to the main branch.

LANGUAGE: yaml
CODE:
name: Deploy to GitHub Pages

on:
  # Trigger the workflow every time you push to the `main` branch
  # Using a different branch name? Replace `main` with your branch's name
  push:
    branches: [ main ]
  # Allows you to run this workflow manually from the Actions tab on GitHub.
  workflow_dispatch:
  
# Allow this job to clone the repo and create a page deployment
permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout your repository using git
        uses: actions/checkout@v4
      - name: Install, build, and upload your site
        uses: withastro/action@v3
        # with:
          # path: . # The root location of your Astro project inside the repository. (optional)
          # node-version: 20 # The specific version of Node that should be used to build your site. Defaults to 20. (optional)
          # package-manager: pnpm@latest # The Node package manager that should be used to install dependencies and build your site. Automatically detected based on your lockfile. (optional)

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

----------------------------------------

TITLE: Adding Astro Integrations
DESCRIPTION: Shows how to add integrations to extend Astro's functionality.

LANGUAGE: javascript
CODE:
import react from '@astrojs/react';
import mdx from '@astrojs/mdx';
{
  // Example: Add React + MDX support to Astro
  integrations: [react(), mdx()]
}

----------------------------------------

TITLE: Using cookies in an Astro page
DESCRIPTION: Illustrates how to check, get, and set cookies in a server-rendered Astro page, implementing a page view counter.

LANGUAGE: astro
CODE:
---
export const prerender = false; // Not needed in 'server' mode

let counter = 0

if (Astro.cookies.has('counter')) {
  const cookie = Astro.cookies.get('counter')
  const value = cookie?.number()
  if (value !== undefined && !isNaN(value)) counter = value + 1
}

Astro.cookies.set('counter', String(counter))
---
<html>
  <h1>Counter = {counter}</h1>
</html>

----------------------------------------

TITLE: Configuring Auth.js providers
DESCRIPTION: Setting up authentication providers in the auth.config.ts file for Auth.js.

LANGUAGE: typescript
CODE:
import GitHub from '@auth/core/providers/github';
import { defineConfig } from 'auth-astro';

export default defineConfig({
	providers: [
		GitHub({
			clientId: import.meta.env.GITHUB_CLIENT_ID,
			clientSecret: import.meta.env.GITHUB_CLIENT_SECRET,
		}),
	],
});

----------------------------------------

TITLE: Configuring Astro Site URL
DESCRIPTION: Shows how to set the site URL in the Astro configuration.

LANGUAGE: javascript
CODE:
{
  site: 'https://www.my-site.dev'
}

----------------------------------------

TITLE: Adding Site-wide View Transitions in Astro
DESCRIPTION: Import and add the ClientRouter component to a common <head> or shared layout component for site-wide view transitions.

LANGUAGE: astro
CODE:
---
import { ClientRouter } from 'astro:transitions';
---
<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
<meta name="generator" content={Astro.generator} />

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />

<ClientRouter />

----------------------------------------

TITLE: TypeScript Component Props in Astro
DESCRIPTION: Example of typing component props using TypeScript interface in Astro components.

LANGUAGE: astro
CODE:
---
interface Props {
  name: string;
  greeting?: string;
}

const { greeting = "Hello", name } = Astro.props;
---
<h2>{greeting}, {name}!</h2>

----------------------------------------

TITLE: CSS Variables with define:vars
DESCRIPTION: Shows how to pass CSS variables from component frontmatter to styles using the define:vars directive.

LANGUAGE: astro
CODE:
---
const foregroundColor = "rgb(221 243 228)";
const backgroundColor = "rgb(24 121 78)";
---
<style define:vars={{ foregroundColor, backgroundColor }}>
  h1 {
    background-color: var(--backgroundColor);
    color: var(--foregroundColor);
  }
</style>
<h1>Hello</h1>

----------------------------------------

TITLE: Configuring Astro Project in JavaScript
DESCRIPTION: This snippet represents the astro.config.mjs file, which is used to configure an Astro project. It supports various file formats and can include settings for integrations, build options, and server options.

LANGUAGE: javascript
CODE:
// astro.config.mjs
// Configuration options for your Astro project

export default {
  // Your configuration options here
}

----------------------------------------

TITLE: WordPress Index Page Implementation
DESCRIPTION: Creates an index page that lists dinosaur posts fetched from WordPress API, including titles and content with links to individual pages.

LANGUAGE: astro
CODE:
---
import Layout from "../layouts/Layout.astro";

let res = await fetch("https://norian.studio/wp-json/wp/v2/dinos");
let posts = await res.json();
---
<Layout title="Dinos!">
  <section>
    <h1>List of Dinosaurs</h1>
    {
      posts.map((post) => (
        <article>
          <h2>
            <a href={`/dinos/${post.slug}/`} set:html={post.title.rendered} />
          </h2>
          <Fragment set:html={post.content.rendered} />
        </article>
      ))
    }
  </section>
</Layout>

----------------------------------------

TITLE: Static Framework Component Usage in Astro
DESCRIPTION: Demonstrates how to import and use a React component statically in an Astro component. The component will render as HTML without client-side JavaScript.

LANGUAGE: astro
CODE:
---
import MyReactComponent from '../components/MyReactComponent.jsx';
---
<html>
  <body>
    <h1>Use React components directly in Astro!</h1>
    <MyReactComponent />
  </body>
</html>

----------------------------------------

TITLE: Configuring Astro with astro.config.mjs
DESCRIPTION: Basic configuration file for Astro projects, allowing customization of build and runtime settings.

LANGUAGE: js
CODE:
import { defineConfig } from "astro/config";

// https://astro.build/config
export default defineConfig({});

----------------------------------------

TITLE: Layout Component Usage
DESCRIPTION: Demonstrates how to use layout components to wrap page content in Astro.

LANGUAGE: astro
CODE:
---
import MySiteLayout from "../layouts/MySiteLayout.astro";
---
<MySiteLayout>
  <p>My page content, wrapped in a layout!</p>
</MySiteLayout>

----------------------------------------

TITLE: Handling POST Requests with JSON Data in Astro
DESCRIPTION: This snippet shows how to handle POST requests with JSON data in an Astro endpoint. It checks the Content-Type header and processes the JSON body accordingly.

LANGUAGE: typescript
CODE:
export const POST: APIRoute = async ({ request }) => {
  if (request.headers.get("Content-Type") === "application/json") {
    const body = await request.json();
    const name = body.name;
    return new Response(JSON.stringify({
      message: "Your name was: " + name
    }), {
      status: 200
    })
  }
  return new Response(null, { status: 400 });
}

----------------------------------------

TITLE: Defining Collections with glob() Loader in TypeScript
DESCRIPTION: Example of using the glob() loader to define collections for pages, blog posts, and authors. It demonstrates different patterns and options for loading files.

LANGUAGE: typescript
CODE:
import { defineCollection } from 'astro:content';
import { glob } from 'astro/loaders';

const pages = defineCollection({
  /* Retrieve all Markdown files in your pages directory. */
  loader: glob({ pattern: "**/*.md", base: "./src/data/pages" }),
  schema: /* ... */
});
const blog = defineCollection({
  /* Retrieve all Markdown and MDX files in your blog directory. */
  loader: glob({ pattern: "**/*.(md|mdx)", base: "./src/data/blog" }),
  schema: /* ... */
});
const authors = defineCollection({
  /* Retrieve all JSON files in your authors directory while retaining
   * uppercase letters in the ID. */
  loader: glob({
    pattern: '**/*.json',
    base: "./src/data/authors",
    generateId: ({ entry }) => entry.replace(/\.json$/, ''),
  }),
  schema: /* ... */
});

----------------------------------------

TITLE: Configuring Astro Deployment Settings
DESCRIPTION: Shows how to configure deployment-related settings in the Astro config file, including site URL, base path, and trailing slash behavior.

LANGUAGE: javascript
CODE:
import { defineConfig } from "astro/config";

export default defineConfig({
  site: "https://www.example.com",
  base: "/docs",
  trailingSlash: "always",
});

----------------------------------------

TITLE: Firestore CRUD Operations in Astro
DESCRIPTION: Implements Create, Read, Update, and Delete operations for a 'friends' collection in Firestore.

LANGUAGE: typescript
CODE:
import type { APIRoute } from "astro";
import { app } from "../../../firebase/server";
import { getFirestore } from "firebase-admin/firestore";

const db = getFirestore(app);
const friendsRef = db.collection("friends");

export const POST: APIRoute = async ({ params, redirect, request }) => {
  const formData = await request.formData();
  const name = formData.get("name")?.toString();
  const age = formData.get("age")?.toString();
  const isBestFriend = formData.get("isBestFriend") === "on";

  if (!name || !age) {
    return new Response("Faltan campos obligatorios", {
      status: 400,
    });
  }

  if (!params.id) {
    return new Response("No se puede encontrar el amigo", {
      status: 404,
    });
  }

  try {
    await friendsRef.doc(params.id).update({
      name,
      age: parseInt(age),
      isBestFriend,
    });
  } catch (error) {
    return new Response("Algo salió mal", {
      status: 500,
    });
  }
  return redirect("/dashboard");
};

export const DELETE: APIRoute = async ({ params, redirect }) => {
  if (!params.id) {
    return new Response("No se puede encontrar el amigo", {
      status: 404,
    });
  }

  try {
    await friendsRef.doc(params.id).delete();
  } catch (error) {
    return new Response("Algo salió mal", {
      status: 500,
    });
  }
  return redirect("/dashboard");
};

----------------------------------------

TITLE: Dynamic Route Parameters in Astro
DESCRIPTION: Implementation of dynamic routing using parameters in file names with getStaticPaths() for static site generation.

LANGUAGE: astro
CODE:
---
export function getStaticPaths() {
  return [
    { params: { dog: "clifford" }},
    { params: { dog: "rover" }},
    { params: { dog: "spot" }},
  ];
}

const { dog } = Astro.params;
---
<div>Good dog, {dog}!</div>

----------------------------------------

TITLE: Manual i18n Routing Implementation
DESCRIPTION: Example showing how to implement custom i18n routing logic using Astro's middleware system.

LANGUAGE: javascript
CODE:
import { defineMiddleware } from "astro:middleware";
import { redirectToDefaultLocale } from "astro:i18n";
export const onRequest = defineMiddleware(async (ctx, next) => {
  if (ctx.url.startsWith("/about")) {
    return next();
  } else {
    return redirectToDefaultLocale(302);
  }
})

----------------------------------------

TITLE: Complex Data Storage in Middleware
DESCRIPTION: Demonstrates storing complex data types like functions and objects in middleware locals.

LANGUAGE: javascript
CODE:
export function onRequest (context, next) {
    context.locals.user.name = "John Wick";
    context.locals.welcomeTitle = () => {
        return "Welcome back " + locals.user.name;
    };
    return next();
};

----------------------------------------

TITLE: Authorizing Users in an Astro Action Handler
DESCRIPTION: Example of adding authorization checks to an Astro Action handler. It checks for a user in the context.locals object and throws an ActionError if the user is not authorized.

LANGUAGE: typescript
CODE:
import { defineAction, ActionError } from 'astro:actions';

export const server = {
  getUserSettings: defineAction({
    handler: async (_input, context) => {
      if (!context.locals.user) {
        throw new ActionError({ code: 'UNAUTHORIZED' });
      }
      return { /* data on success */ };
    }
  })
}

----------------------------------------

TITLE: Fetching Drupal articles in Astro component
DESCRIPTION: Demonstrates how to fetch and display Drupal articles in an Astro component using the drupal-jsonapi-params package.

LANGUAGE: astro
CODE:
---
import {Jsona} from "jsona";
import {DrupalJsonApiParams} from "drupal-jsonapi-params";
import type {TJsonApiBody} from "jsona/lib/JsonaTypes";

// Get the Drupal base URL
export const baseUrl: string = import.meta.env.DRUPAL_BASE_URL;

// Generate the JSON:API Query. Get all title and body from published articles.
const params: DrupalJsonApiParams = new DrupalJsonApiParams();
params.addFields("node--article", [
        "title",
        "body",
    ])
    .addFilter("status", "1");
// Generates the query string.
const path: string = params.getQueryString();
const url: string = baseUrl + '/jsonapi/node/article?' + path;

// Get the articles
const request: Response = await fetch(url);
const json: string | TJsonApiBody = await request.json();
// Initiate Jsona.
const dataFormatter: Jsona = new Jsona();
// Deserialise the response.
const articles = dataFormatter.deserialize(json);
---
<body>
 {articles?.length ? articles.map((article: any) => (
    <section>
      <h2>{article.title}</h2>
      <article set:html={article.body.value}></article>
    </section>
 )): <div><h1>No Content found</h1></div> }
</body>

----------------------------------------

TITLE: Defining a Custom Object Loader in TypeScript
DESCRIPTION: Example of creating a custom object loader with configuration options, a load() method, and an optional schema definition.

LANGUAGE: typescript
CODE:
import type { Loader, LoaderContext } from 'astro/loaders';
import { z } from 'astro:content';
import { loadFeedData } from "./feed.js";

// Define any options that the loader needs
export function myLoader(options: { url: string, apiKey: string }): Loader {
  // Configure the loader
  const feedUrl = new URL(options.url);
  // Return a loader object
  return {
    name: "my-loader",
    // Called when updating the collection.
    load: async (context: LoaderContext): Promise<void> => {
      // Load data and update the store
      const response = await loadFeedData(feedUrl, options.apiKey);
    },
    // Optionally, define the schema of an entry.
    // It will be overridden by user-defined schema.
    schema: async () => z.object({
      // ...
    })
  };
}

----------------------------------------

TITLE: Defining Environment Variables in .env
DESCRIPTION: Example of setting both secret and public environment variables in a .env file. Public variables are prefixed with PUBLIC_ and accessible client-side.

LANGUAGE: ini
CODE:
SECRET_PASSWORD=password123
PUBLIC_ANYBODY=there

----------------------------------------

TITLE: Configuring Basic TSConfig for Astro
DESCRIPTION: Basic TypeScript configuration setup for Astro projects using the base template configuration.

LANGUAGE: json
CODE:
{
  "extends": "astro/tsconfigs/base",
  "include": [".astro/types.d.ts", "**/*"],
  "exclude": ["dist"]
}

----------------------------------------

TITLE: Adding TypeScript Types to Astro Layout
DESCRIPTION: This example demonstrates how to add TypeScript type safety to an Astro layout component by defining an interface for the component props.

LANGUAGE: astro
CODE:
---
interface Props { 
  title: string;
  description: string;
  publishDate: string;
  viewCount: number;
}
const { title, description, publishDate, viewCount } = Astro.props;
---
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="description" content={description}>
    <title>{title}</title>
  </head>
  <body>
    <header>
      <p>Published on {publishDate}</p>
      <p>Viewed by {viewCount} folks</p>
    </header>
    <main>
      <slot />
    </main>
  </body>
</html>

----------------------------------------

TITLE: Configuring auth-astro in Astro config
DESCRIPTION: Adding the auth-astro integration to the Astro configuration file.

LANGUAGE: typescript
CODE:
import { defineConfig } from 'astro/config';
import auth from 'auth-astro';

export default defineConfig({
  // ...
  integrations: [auth()],
});

----------------------------------------

TITLE: GraphQL Query in Astro Component
DESCRIPTION: This snippet demonstrates how to make a GraphQL query using fetch in an Astro component. It shows setting up the request with the appropriate headers and body, and then rendering the fetched data in the component template.

LANGUAGE: astro
CODE:
---
const response = await fetch(
  "https://swapi-graphql.netlify.app/.netlify/functions/index",
  {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      query: `
        query getFilm ($id:ID!) {
          film(id: $id) {
            title
            releaseDate
          }
        }
      `,
      variables: {
        id: "ZmlsbXM6MQ==",
      },
    }),
  }
);


const json = await response.json();
const { film } = json.data;
---
<h1>Fetching information about Star Wars: A New Hope</h1>
<h2>Title: {film.title}</h2>
<p>Year: {film.releaseDate}</p>

----------------------------------------

TITLE: Setting Supabase Environment Variables in Astro
DESCRIPTION: This snippet shows how to add Supabase credentials to the .env file in an Astro project. It includes the Supabase URL and anonymous key.

LANGUAGE: ini
CODE:
SUPABASE_URL=YOUR_SUPABASE_URL
SUPABASE_ANON_KEY=YOUR_SUPABASE_ANON_KEY

----------------------------------------

TITLE: Creating User Sign-in Page in Astro
DESCRIPTION: This Astro component creates a sign-in page with a form that sends a POST request to the sign-in endpoint. It also checks for existing tokens and redirects if present.

LANGUAGE: astro
CODE:
---
import Layout from "../layouts/Layout.astro";

const { cookies, redirect } = Astro;

const accessToken = cookies.get("sb-access-token");
const refreshToken = cookies.get("sb-refresh-token");

if (accessToken && refreshToken) {
  return redirect("/dashboard");
}
---

<Layout title="Sign in">
  <h1>Sign in</h1>
  <p>New here? <a href="/register">Create an account</a></p>
  <form action="/api/auth/signin" method="post">
    <label for="email">Email</label>
    <input type="email" name="email" id="email" />
    <label for="password">Password</label>
    <input type="password" name="password" id="password" />
    <button type="submit">Login</button>
  </form>
</Layout>

----------------------------------------

TITLE: Configuring TypeScript for React in Astro
DESCRIPTION: JSON configuration to add React JSX support to the project's tsconfig.json file.

LANGUAGE: json
CODE:
{
  "extends": "astro/tsconfigs/strict",
  "include": [".astro/types.d.ts", "**/*"],
  "exclude": ["dist"],
  "compilerOptions": {
    "jsx": "react-jsx",
    "jsxImportSource": "react"
  }
}

----------------------------------------

TITLE: Creating Preact Greeting Component
DESCRIPTION: Defines a Preact component that displays a random greeting message and allows users to generate new greetings on button click.

LANGUAGE: jsx
CODE:
import { useState } from 'preact/hooks';

export default function Greeting({messages}) {

  const randomMessage = () => messages[(Math.floor(Math.random() * messages.length))];
  
  const [greeting, setGreeting] = useState(messages[0]);

  return (
    <div> 
      <h3>{greeting}! Thank you for visiting!</h3>
      <button onClick={() => setGreeting(randomMessage())}>
        New Greeting
      </button>
    </div>
  );
}

----------------------------------------

TITLE: Configuring MDX in Astro
DESCRIPTION: JavaScript configuration for MDX integration with various options.

LANGUAGE: javascript
CODE:
import { defineConfig } from 'astro/config';
import mdx from '@astrojs/mdx';
import remarkToc from 'remark-toc';
import rehypePresetMinify from 'rehype-preset-minify';

export default defineConfig({
  // ...
  integrations: [
    mdx({
      syntaxHighlight: 'shiki',
      shikiConfig: { theme: 'dracula' },
      remarkPlugins: [remarkToc],
      rehypePlugins: [rehypePresetMinify],
      remarkRehype: { footnoteLabel: 'Footnotes' },
      gfm: false,
    }),
  ],
});

----------------------------------------

TITLE: Creating a Main Layout Component in Astro
DESCRIPTION: Shows how to create a main layout component in Astro that includes the Head component and provides a structure for page content.

LANGUAGE: astro
CODE:
---
import Head from "./Head.astro";

const { ...props } = Astro.props;
---
<html>
  <head>
    <meta charset="utf-8">
    <Head />
    <!-- Additional head elements -->
  </head>
  <body>
    <!-- Page content goes here -->
  </body>
</html>

----------------------------------------

TITLE: Starting Astro Development Server with npm
DESCRIPTION: Command to start the Astro development server using npm, allowing you to see your website in action and make live changes.

LANGUAGE: shell
CODE:
npm run dev

----------------------------------------

TITLE: Prop Passing to Framework Components
DESCRIPTION: Demonstrates how to pass props from Astro components to framework components including initial values and configurations.

LANGUAGE: astro
CODE:
---
import TodoList from '../components/TodoList.jsx';
import Counter from '../components/Counter.svelte';
---
<div>
  <TodoList initialTodos={["learn Astro", "review PRs"]} />
  <Counter startingCount={1} />
</div>

----------------------------------------

TITLE: Creating a Static JSON Endpoint in Astro
DESCRIPTION: This snippet demonstrates how to create a static JSON endpoint in Astro. It exports a GET function that returns a Response object with JSON data.

LANGUAGE: typescript
CODE:
// Example: src/pages/builtwith.json.ts
// Outputs: /builtwith.json
export async function GET({params, request}) {
  return new Response(
    JSON.stringify({
      name: 'Astro',
      url: 'https://astro.build/'
    })
  )
}

----------------------------------------

TITLE: Manually installing auth-astro
DESCRIPTION: Commands to manually install auth-astro and its dependencies using different package managers.

LANGUAGE: shell
CODE:
npm install auth-astro @auth/core@^0.18.6

LANGUAGE: shell
CODE:
pnpm add auth-astro @auth/core@^0.18.6

LANGUAGE: shell
CODE:
yarn add auth-astro @auth/core@^0.18.6

----------------------------------------

TITLE: Prop Passing to Framework Components
DESCRIPTION: Demonstrates how to pass props from Astro components to framework components including initial values and configurations.

LANGUAGE: astro
CODE:
---
import TodoList from '../components/TodoList.jsx';
import Counter from '../components/Counter.svelte';
---
<div>
  <TodoList initialTodos={["learn Astro", "review PRs"]} />
  <Counter startingCount={1} />
</div>

----------------------------------------

TITLE: Creating a Binary Image Endpoint in Astro
DESCRIPTION: This snippet shows how to create an endpoint that produces a binary PNG image in Astro. It fetches an image and returns it as a Response with an ArrayBuffer.

LANGUAGE: typescript
CODE:
export async function GET({ params, request }) {
  const response = await fetch("https://docs.astro.build/assets/full-logo-light.png");
  return new Response(await response.arrayBuffer());
}

----------------------------------------

TITLE: Querying Collections in Astro Components
DESCRIPTION: Example of querying content collections and using the data in Astro components.

LANGUAGE: astro
CODE:
---
import { getCollection } from 'astro:content';
const posts = await getCollection('blog');
---
<h1>My posts</h1>
<ul>
  {posts.map(post => (
    <li><a href={`/blog/${post.id}`}>{post.data.title}</a></li>
  ))}
</ul>

----------------------------------------

TITLE: Protecting routes with Better Auth middleware
DESCRIPTION: Implementing route protection using Better Auth middleware in an Astro project.

LANGUAGE: typescript
CODE:
import { auth } from "../../../auth"; // import your Better Auth instance
import { defineMiddleware } from "astro:middleware";

export const onRequest = defineMiddleware(async (context, next) => {
	const isAuthed = await auth.api
		.getSession({
			headers: context.request.headers,
		})
	if (context.url.pathname === "/dashboard" && !isAuthed) {
		return context.redirect("/");
	}
	return next();
});

----------------------------------------

TITLE: Implementing Lemon Squeezy Checkout in Astro
DESCRIPTION: Basic setup for adding a Lemon Squeezy checkout button to an Astro page. Includes script loading and button implementation for payment overlay.

LANGUAGE: html
CODE:
<script src="https://app.lemonsqueezy.com/js/lemon.js" defer></script>

LANGUAGE: html
CODE:
<a class="lemonsqueezy-button" href="https://demo.lemonsqueezy.com/checkout/...">
  Buy Now
</a>

----------------------------------------

TITLE: Querying Collections in Astro Components
DESCRIPTION: Example of querying content collections and using the data in Astro components.

LANGUAGE: astro
CODE:
---
import { getCollection } from 'astro:content';
const posts = await getCollection('blog');
---
<h1>My posts</h1>
<ul>
  {posts.map(post => (
    <li><a href={`/blog/${post.id}`}>{post.data.title}</a></li>
  ))}
</ul>

----------------------------------------

TITLE: Initializing Firebase Client in Astro
DESCRIPTION: Initializes the Firebase client-side SDK using configuration details from the Firebase project.

LANGUAGE: typescript
CODE:
import { initializeApp } from "firebase/app";

const firebaseConfig = {
  apiKey: "my-public-api-key",
  authDomain: "my-auth-domain",
  projectId: "my-project-id",
  storageBucket: "my-storage-bucket",
  messagingSenderId: "my-sender-id",
  appId: "my-app-id",
};

export const app = initializeApp(firebaseConfig);

----------------------------------------

TITLE: Fetching and Rendering Catalogue Paths from Crystallize in Astro
DESCRIPTION: This snippet shows how to create a Crystallize API client, define a GraphQL query to fetch catalogue paths, and render the results in an Astro component. It uses the @crystallize/js-api-client package to interact with the Crystallize API.

LANGUAGE: astro
CODE:
---
// Fetch your catalogue paths from Crystallize GraphQL API

import BaseLayout from '../../layouts/BaseLayout.astro';
import { createClient } from '@crystallize/js-api-client';

const apiClient = createClient({
  tenantIdentifier: 'furniture'
});

const query = `
  query getCataloguePaths{
    catalogue(language: "en", path: "/shop") {
      name
      children {
        name
        path
      }
    }
  }
`
const { data: { catalogue } } = await apiClient.catalogueApi(query)
---
<BaseLayout>
  <h1>{catalogue.name}</h1>
  <nav>
    <ul>
      {catalogue.children.map(child => (
        <li><a href={child.path}>{child.name}</a></li>
      ))}
    </ul>
  </nav>
</BaseLayout>

----------------------------------------

TITLE: Initializing Firebase Client in Astro
DESCRIPTION: Initializes the Firebase client-side SDK using configuration details from the Firebase project.

LANGUAGE: typescript
CODE:
import { initializeApp } from "firebase/app";

const firebaseConfig = {
  apiKey: "my-public-api-key",
  authDomain: "my-auth-domain",
  projectId: "my-project-id",
  storageBucket: "my-storage-bucket",
  messagingSenderId: "my-sender-id",
  appId: "my-app-id",
};

export const app = initializeApp(firebaseConfig);

----------------------------------------

TITLE: Initializing Firebase Client in Astro
DESCRIPTION: Initializes the Firebase client-side SDK using configuration details from the Firebase project.

LANGUAGE: typescript
CODE:
import { initializeApp } from "firebase/app";

const firebaseConfig = {
  apiKey: "my-public-api-key",
  authDomain: "my-auth-domain",
  projectId: "my-project-id",
  storageBucket: "my-storage-bucket",
  messagingSenderId: "my-sender-id",
  appId: "my-app-id",
};

export const app = initializeApp(firebaseConfig);

----------------------------------------

TITLE: Basic Netlify Configuration File
DESCRIPTION: Basic netlify.toml configuration file specifying build commands and publish directory.

LANGUAGE: toml
CODE:
[build]
  command = "npm run build"
  publish = "dist"

----------------------------------------

TITLE: Custom Endpoint Implementation in TypeScript for Astro Image Service
DESCRIPTION: This TypeScript code demonstrates how to create a custom endpoint for image transformation in Astro. It uses the getConfiguredImageService and imageConfig utilities to process images.

LANGUAGE: typescript
CODE:
import type { APIRoute } from "astro";
import { getConfiguredImageService, imageConfig } from 'astro:assets';

export const GET: APIRoute = async ({ request }) => {
  const imageService = await getConfiguredImageService();

  const imageTransform = imageService.parseURL(new URL(request.url), imageConfig);
  // ... fetch the image from imageTransform.src and store it in inputBuffer
  const { data, format } = await imageService.transform(inputBuffer, imageTransform, imageConfig);
  return new Response(data, {
			status: 200,
			headers: {
				'Content-Type': mime.getType(format) || ''
      }
    }
  );
}

----------------------------------------

TITLE: Multi-stage Docker Build Configuration
DESCRIPTION: Advanced multi-stage Dockerfile for optimized builds with dependency caching and SSR support

LANGUAGE: docker
CODE:
FROM node:lts AS base
WORKDIR /app

COPY package.json package-lock.json ./

FROM base AS prod-deps
RUN npm install --omit=dev

FROM base AS build-deps
RUN npm install

FROM build-deps AS build
COPY . .
RUN npm run build

FROM base AS runtime
COPY --from=prod-deps /app/node_modules ./node_modules
COPY --from=build /app/dist ./dist

ENV HOST=0.0.0.0
ENV PORT=4321
EXPOSE 4321
CMD node ./dist/server/entry.mjs

----------------------------------------

TITLE: Calling an Astro Action from Client-Side JavaScript
DESCRIPTION: Example of calling the getGreeting Astro Action from a client-side script in an Astro component. It imports the actions from astro:actions and calls the action when a button is clicked.

LANGUAGE: astro
CODE:
<button>Get greeting</button>

<script>
import { actions } from 'astro:actions';

const button = document.querySelector('button');
button?.addEventListener('click', async () => {
  const { data, error } = await actions.getGreeting({ name: "Houston" });
  if (!error) alert(data);
})
</script>

----------------------------------------

TITLE: Fetching Data in Framework Component (Preact)
DESCRIPTION: This example shows how to fetch data in a Preact component using the global fetch function. It demonstrates making an HTTP request, handling the response, and rendering the data in the component.

LANGUAGE: tsx
CODE:
import type { FunctionalComponent } from 'preact';

const data = await fetch('https://example.com/movies.json').then((response) => response.json());

// Components that are build-time rendered also log to the CLI.
// When rendered with a `client:*` directive, they also log to the browser console.
console.log(data);

const Movies: FunctionalComponent = () => {
  // Output the result to the page
  return <div>{JSON.stringify(data)}</div>;
};

export default Movies;

----------------------------------------

TITLE: Querying Turso Database in Astro Component
DESCRIPTION: Example of fetching and displaying data from Turso database in an Astro component.

LANGUAGE: astro
CODE:
---
import { turso } from '../turso'

const { rows } = await turso.execute('SELECT * FROM posts')
---

<ul>
  {rows.map((post) => (
    <li>{post.title}</li>
  ))}
</ul>

----------------------------------------

TITLE: Connecting to Remote Databases in Astro DB
DESCRIPTION: Set environment variables to connect Astro DB to a remote libSQL database.

LANGUAGE: bash
CODE:
ASTRO_DB_REMOTE_URL=libsql://andromeda-houston.turso.io
ASTRO_DB_APP_TOKEN=eyJhbGciOiJF...3ahJpTkKDw

----------------------------------------

TITLE: Customizing View Transition Animations in Astro
DESCRIPTION: Define custom keyframe animations and use them with the transition:animate directive for custom page transition effects.

LANGUAGE: astro
CODE:
<style is:global>
  @keyframes bump {
    0% {
      opacity: 0;
      transform: scale(1) translateX(200px);
    }
    50% {
      opacity: 0.5;
      transform: scale(1.1);
    }
    100% {
      opacity: 1;
      transform: scale(1) translateX(0);
    }
  }
</style>

LANGUAGE: astro
CODE:
---
const anim = {
  old: {
    name: 'bump',
    duration: '0.5s',
    easing: 'ease-in',
    direction: 'reverse',
  },
  new: {
    name: 'bump',
    duration: '0.5s',
    easing: 'ease-in-out',
  },
};

const customTransition = {
  forwards: anim,
  backwards: anim,
};
---

<header transition:animate={customTransition}> ... </header>

----------------------------------------

TITLE: Connecting to Remote Databases in Astro DB
DESCRIPTION: Set environment variables to connect Astro DB to a remote libSQL database.

LANGUAGE: bash
CODE:
ASTRO_DB_REMOTE_URL=libsql://andromeda-houston.turso.io
ASTRO_DB_APP_TOKEN=eyJhbGciOiJF...3ahJpTkKDw

----------------------------------------

TITLE: Customizing View Transition Animations in Astro
DESCRIPTION: Define custom keyframe animations and use them with the transition:animate directive for custom page transition effects.

LANGUAGE: astro
CODE:
<style is:global>
  @keyframes bump {
    0% {
      opacity: 0;
      transform: scale(1) translateX(200px);
    }
    50% {
      opacity: 0.5;
      transform: scale(1.1);
    }
    100% {
      opacity: 1;
      transform: scale(1) translateX(0);
    }
  }
</style>

LANGUAGE: astro
CODE:
---
const anim = {
  old: {
    name: 'bump',
    duration: '0.5s',
    easing: 'ease-in',
    direction: 'reverse',
  },
  new: {
    name: 'bump',
    duration: '0.5s',
    easing: 'ease-in-out',
  },
};

const customTransition = {
  forwards: anim,
  backwards: anim,
};
---

<header transition:animate={customTransition}> ... </header>

----------------------------------------

TITLE: Creating Dynamic Tag Pages in Astro
DESCRIPTION: This code creates a dynamic [tag].astro page that generates routes for each tag used in blog posts. It uses getStaticPaths() to define the routes and pass props to each page.

LANGUAGE: astro
CODE:
---
import BaseLayout from '../../layouts/BaseLayout.astro';

export async function getStaticPaths() {
  return [
    { params: { tag: "astro" } },
    { params: { tag: "successes" } },
    { params: { tag: "community" } },
    { params: { tag: "blogging" } },
    { params: { tag: "setbacks" } },
    { params: { tag: "learning in public" } },
  ];
}

const { tag } = Astro.params;
---
<BaseLayout pageTitle={tag}>
  <p>Posts tagged with {tag}</p>
</BaseLayout>

----------------------------------------

TITLE: Configuring Astro Environment Variables
DESCRIPTION: Demonstrates how to configure type-safe environment variables in Astro.

LANGUAGE: javascript
CODE:
// astro.config.mjs
import { defineConfig, envField } from "astro/config"

export default defineConfig({
  env: {
    schema: {
      API_URL: envField.string({ context: "client", access: "public", optional: true }),
      PORT: envField.number({ context: "server", access: "public", default: 4321 }),
      API_SECRET: envField.string({ context: "server", access: "secret" }),
    }
  }
})

----------------------------------------

TITLE: Custom 500 Error Page with Error Handling
DESCRIPTION: Demonstrates how to create a custom 500 error page with typed error prop handling.

LANGUAGE: astro
CODE:
---
interface Props {
  error: unknown;
}

const { error } = Astro.props;
---
<div>{error instanceof Error ? error.message : "Unknown error"}</div>

----------------------------------------

TITLE: Utilisation d'une action Astro avec un formulaire HTML
DESCRIPTION: Montre comment utiliser une action Astro avec un formulaire HTML standard pour des soumissions sans JavaScript.

LANGUAGE: astro
CODE:
---
import { actions } from 'astro:actions';
---

<form method="POST" action={actions.logout}>
  <button>Se déconnecter</button>
</form>

----------------------------------------

TITLE: Querying Content Collections in Astro Components
DESCRIPTION: Examples of using getCollection() to query content collection entries with optional filtering by frontmatter values.

LANGUAGE: astro
CODE:
---
import { getCollection } from 'astro:content';

// Get all `src/content/blog/` entries
const allBlogPosts = await getCollection('blog');

// Only return posts with `draft: true` in the frontmatter
const draftBlogPosts = await getCollection('blog', ({ data }) => {
  return data.draft === true;
});
---

----------------------------------------

TITLE: Creating a Custom Card Component with Dynamic Image Import in Astro
DESCRIPTION: This code snippet shows how to create an Astro component that dynamically imports and displays an image. It uses the import.meta.glob function to handle image imports and includes error handling for invalid file paths.

LANGUAGE: astro
CODE:
---
import type { ImageMetadata } from 'astro';
import { Image } from 'astro:assets';
interface Props {
   imagePath: string;
   altText: string;
   name: string;
   age: number;
}

const { imagePath, altText, name, age } = Astro.props;
const images = import.meta.glob<{ default: ImageMetadata }>('/src/assets/*.{jpeg,jpg,png,gif}');
if (!images[imagePath]) throw new Error(`"${imagePath}" does not exist in glob: "src/assets/*.{jpeg,jpg,png,gif}"`);
---
<div class="card">
    <h2>{name}</h2>
    <p>Age: {age}</p>
    <Image src={images[imagePath]()} alt={altText} />
</div>

----------------------------------------

TITLE: Integrating Form Component in Astro Page
DESCRIPTION: Shows how to import and use the feedback form component in an Astro page with client-side hydration.

LANGUAGE: astro
CODE:
---
import FeedbackForm from "../components/FeedbackForm"
---
<FeedbackForm client:load />

----------------------------------------

TITLE: Basic Scoped Styles in Astro Component
DESCRIPTION: Demonstrates basic scoped styling in an Astro component using the style tag. Styles are automatically scoped to the component.

LANGUAGE: astro
CODE:
<style>
  h1 { color: red; }
</style>

----------------------------------------

TITLE: Custom Web Component for Heart Counter
DESCRIPTION: Implements a custom element that tracks and displays the number of times a heart button is clicked using Web Components API.

LANGUAGE: astro
CODE:
<astro-heart>
  <button aria-label="Heart">💜</button> × <span>0</span>
</astro-heart>

<script>
  class AstroHeart extends HTMLElement {
    connectedCallback() {
      let count = 0;

      const heartButton = this.querySelector('button');
      const countSpan = this.querySelector('span');

      heartButton.addEventListener('click', () => {
        count++;
        countSpan.textContent = count.toString();
      });
    }
  }

  customElements.define('astro-heart', AstroHeart);
</script>

----------------------------------------

TITLE: Basic Image Component Usage in Astro
DESCRIPTION: Shows how to import and use the Image component to display local, public and remote images with proper optimization.

LANGUAGE: astro
CODE:
---
import { Image } from 'astro:assets';
import localBirdImage from '../../images/subfolder/localBirdImage.png';
---
<Image src={localBirdImage} alt="A bird sitting on a nest of eggs." />
<Image src="/images/bird-in-public-folder.jpg" alt="A bird." width="50" height="50" />
<Image src="https://example.com/remote-bird.jpg" alt="A bird." width="50" height="50" />

<img src={localBirdImage.src} alt="A bird sitting on a nest of eggs.">
<img src="/images/bird-in-public-folder.jpg" alt="A bird.">
<img src="https://example.com/remote-bird.jpg" alt="A bird.">

----------------------------------------

TITLE: Fetching and Rendering Statamic Data with GraphQL in Astro
DESCRIPTION: This snippet shows how to use Statamic's GraphQL API to fetch data and render it in an Astro component. It retrieves posts from a collection, including pagination info, and displays their titles and content.

LANGUAGE: astro
CODE:
---
const graphqlQuery = {
  query: `
    query Entries($page: Int, $locale: String) {
      entries(
        collection: "posts"
        sort: "date asc"
        limit: 20
        page: $page
        filter: { locale: $locale }
      ) {
        current_page
        has_more_pages
        data {
          title
          ... on Entry_Posts_Post {
              content
            }
        }
      }
    }
  `,
  variables: {
    page: page,
    locale: locale,
  },
};

const res = await fetch("https://[YOUR-SITE]/graphql", {
  method: "POST",
  headers: { "Content-Type": "application/json" },
  body: JSON.stringify(graphqlQuery),
})

const { data } = await res.json();
const entries = data?.entries;
---
<h1>Astro + Statamic 🚀</h1>
{
  entries.data.map((post) => (
      <h2 set:html={post.title} />
      <p set:html={post.content} />
  ))
}

----------------------------------------

TITLE: Generating Astro Tag Pages from Existing Tags
DESCRIPTION: This advanced code automatically generates tag pages for all unique tags used in blog posts, filtering posts for each tag and passing them as props.

LANGUAGE: astro
CODE:
---
import BaseLayout from '../../layouts/BaseLayout.astro';
import BlogPost from '../../components/BlogPost.astro';

export async function getStaticPaths() {
  const allPosts = Object.values(import.meta.glob('../posts/*.md', { eager: true }));
  
  const uniqueTags = [...new Set(allPosts.map((post: any) => post.frontmatter.tags).flat())];

  return uniqueTags.map((tag) => {
    const filteredPosts = allPosts.filter((post: any) => post.frontmatter.tags.includes(tag));
    return {
      params: { tag },
      props: { posts: filteredPosts },
    };
  });
}

const { tag } = Astro.params;
const { posts } = Astro.props;
---
<BaseLayout pageTitle={tag}>
  <p>Posts tagged with {tag}</p>
  <ul>
    {posts.map((post: any) => <BlogPost url={post.url} title={post.frontmatter.title}/>)}
  </ul>
</BaseLayout>

----------------------------------------

TITLE: Defining Collections with file() Loader in TypeScript
DESCRIPTION: Example of using the file() loader to define collections for authors and products. It shows how to load data from a JSON file and a CSV file with a custom parser.

LANGUAGE: typescript
CODE:
import { defineCollection } from 'astro:content';
import { file } from 'astro/loaders';

const authors = defineCollection({
  /* Retrieve all entries from a JSON file. */
  loader: file("src/data/authors.json"),
  schema: /* ... */
});
const products = defineCollection({
  /* Retrieve all entries from a CSV file using a custom parser. */
  loader: file("src/data/products.csv", {
    parser: (fileContent) => { /* your parser logic */ },
  }),
  schema: /* ... */
});

----------------------------------------

TITLE: Basic Image Component Usage in Astro
DESCRIPTION: Shows how to import and use the Image component to display local, public and remote images with proper optimization.

LANGUAGE: astro
CODE:
---
import { Image } from 'astro:assets';
import localBirdImage from '../../images/subfolder/localBirdImage.png';
---
<Image src={localBirdImage} alt="A bird sitting on a nest of eggs." />
<Image src="/images/bird-in-public-folder.jpg" alt="A bird." width="50" height="50" />
<Image src="https://example.com/remote-bird.jpg" alt="A bird." width="50" height="50" />

<img src={localBirdImage.src} alt="A bird sitting on a nest of eggs.">
<img src="/images/bird-in-public-folder.jpg" alt="A bird.">
<img src="https://example.com/remote-bird.jpg" alt="A bird.">

----------------------------------------

TITLE: Manually installing @astrojs/react and dependencies
DESCRIPTION: Commands to manually install @astrojs/react and its peer dependencies using different package managers.

LANGUAGE: sh
CODE:
npm install @astrojs/react
npm install react react-dom @types/react @types/react-dom

LANGUAGE: sh
CODE:
pnpm add @astrojs/react
pnpm add react react-dom @types/react @types/react-dom

LANGUAGE: sh
CODE:
yarn add @astrojs/react
yarn add react react-dom @types/react @types/react-dom

----------------------------------------

TITLE: Creating Custom Animation in Astro
DESCRIPTION: Example demonstrating how to define custom view transition animations with forward and backward behaviors.

LANGUAGE: astro
CODE:
---
const anim = {
  old: {
    name: 'fadeIn',
    duration: '0.2s',
    easing: 'linear',
    fillMode: 'forwards',
  },
  new: {
    name: 'fadeOut',
    duration: '0.3s',
    easing: 'linear',
    fillMode: 'backwards',
  }
};

const myFade = {
	forwards: anim,
	backwards: anim,
};
---

<header transition:animate={myFade}> ... </header>

----------------------------------------

TITLE: Converting Next.js Component to Astro
DESCRIPTION: Example of converting a Next.js StarCount component to an Astro component, showing differences in syntax and data fetching.

LANGUAGE: jsx
CODE:
import Header from "./header";
import Footer from "./footer";
import "./layout.css";

export async function getStaticProps() {
    const res = await fetch("https://api.github.com/repos/withastro/astro");
    const json = await res.json();
    return {
        props: { message: json.message, stars: json.stargazers_count || 0 },
    }
}

const Component = ({ stars, message }) => {
    
    return (
        <>
            <Header />
            <p style={{
                backgroundColor: `#f4f4f4`,
                padding: `1em 1.5em`,
                textAlign: `center`,
                marginBottom: `1em`
            }}>Astro has {stars} 🧑‍🚀</p>
            <Footer />
        </>
    )
}

export default Component;

LANGUAGE: astro
CODE:
---
import Header from "./header";
import Footer from "./footer";
import "./layout.css";

const res = await fetch("https://api.github.com/repos/withastro/astro");
const json = await res.json();
const message = json.message;
const stars = json.stargazers_count || 0;
---
<Header />
<p class="banner">Astro has {stars} 🧑‍🚀</p>
<Footer />

<style>
  .banner {
    background-color: #f4f4f4; 
    padding: 1em 1.5em;
    text-align: center;
    margin-bottom: 1em;
  }
<style>

----------------------------------------

TITLE: Content Redaction Middleware Example
DESCRIPTION: Implements middleware to replace sensitive information with redacted text in the response HTML.

LANGUAGE: javascript
CODE:
export const onRequest = async (context, next) => {
    const response = await next();
    const html = await response.text();
    const redactedHtml = html.replaceAll("PRIVATE INFO", "REDACTED");
    
    return new Response(redactedHtml, {
        status: 200,
        headers: response.headers
    });
};

----------------------------------------

TITLE: Generating Dynamic Article Pages with Astro
DESCRIPTION: Implements on-demand rendering for Strapi articles using dynamic routes in Astro.

LANGUAGE: astro
CODE:
---
import fetchApi from '../../../lib/strapi';
import type Article from '../../../interfaces/article';

const { slug } = Astro.params;

let article: Article;

try {
  article = await fetchApi<Article>({
    endpoint: 'articles',
    wrappedByKey: 'data',
    wrappedByList: true,
    query: {
      'filters[slug][$eq]': slug || '',
    },
  });
} catch (error) {
  return Astro.redirect('/404');
}
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <title>{article.attributes.title}</title>
  </head>

  <body>
    <main>
      <img src={import.meta.env.STRAPI_URL + article.attributes.image.data.attributes.url} />

      <h1>{article.attributes.title}</h1>

      <!-- Render plain text -->
      <p>{article.attributes.content}</p>
      <!-- Render markdown -->
      <MyMarkdownComponent>
        {article.attributes.content}
      </MyMarkdownComponent>
      <!-- Render html -->
      <Fragment set:html={article.attributes.content} />
    </main>
  </body>
</html>

----------------------------------------

TITLE: Using Alpine.js in Astro Component
DESCRIPTION: Demonstrates how to use Alpine.js directives within an Astro component. This example uses the Collapse plugin to toggle content visibility.

LANGUAGE: astro
CODE:
<html>
	<head>
		<!-- ... -->
		<script defer src="https://cdn.jsdelivr.net/npm/@alpinejs/collapse@3.x.x/dist/cdn.min.js"></script>
	</head>
	<body>
    <!-- ... -->
		<div x-data="{ expanded: false }">
			<button @click="expanded = ! expanded">Toggle Content</button>

			<p id="foo" x-show="expanded" x-collapse>
        Lorem ipsum
			</p>
		</div>
	</body>
</html>

----------------------------------------

TITLE: Interactive Client Island Component in Astro
DESCRIPTION: Shows how to make a component interactive using the client:load directive for client-side hydration.

LANGUAGE: astro
CODE:
<MyReactComponent client:load />

----------------------------------------

TITLE: Configuring Astro for Vercel SSR
DESCRIPTION: Configuration setup in astro.config.mjs to enable server-side rendering with the Vercel adapter.

LANGUAGE: javascript
CODE:
import { defineConfig } from 'astro/config';
import vercel from '@astrojs/vercel';

export default defineConfig({
  output: 'server',
  adapter: vercel(),
});

----------------------------------------

TITLE: Server Island with Fallback Content in Astro
DESCRIPTION: Example of implementing fallback content for a server island component while the main content loads.

LANGUAGE: astro
CODE:
---
import Avatar from '../components/Avatar.astro';
import GenericAvatar from '../components/GenericAvatar.astro';
---
<Avatar server:defer>
  <GenericAvatar slot="fallback" />
</Avatar>

----------------------------------------

TITLE: Displaying Form with Error Messages in Astro
DESCRIPTION: This snippet shows the complete registration form with error message display. It combines the HTML form with server-side validation results.

LANGUAGE: astro
CODE:
<h1>Register</h1>
<form method="POST">
  <label>
    Username:
    <input type="text" name="username" />
  </label>
  {errors.username && <p>{errors.username}</p>}
  <label>
    Email:
    <input type="email" name="email" required />
  </label>
  {errors.email && <p>{errors.email}</p>}
  <label>
    Password:
    <input type="password" name="password" required minlength="6" />
  </label>
  {errors.password && <p>{errors.password}</p>}
  <button>Register</button>
</form>

----------------------------------------

TITLE: Defining Content Collection Schema in TypeScript
DESCRIPTION: Creates a schema for blog posts using Zod to define and validate the structure of post frontmatter including title, date, description, author, image and tags.

LANGUAGE: typescript
CODE:
import { glob } from "astro/loaders";
import { z, defineCollection } from "astro:content";
const blog = defineCollection({
    loader: glob({ pattern: '**/[^_]*.md', base: "./src/blog" }),
    schema: z.object({
      title: z.string(),
      pubDate: z.date(),
      description: z.string(),
      author: z.string(),
      image: z.object({
        url: z.string(),
        alt: z.string()
      }),
      tags: z.array(z.string())
    })
});
export const collections = { blog };

----------------------------------------

TITLE: Implementing Paddle Checkout in Astro
DESCRIPTION: Configuration for Paddle payment processing, including initialization script and customizable checkout button implementation.

LANGUAGE: html
CODE:
<script src="https://cdn.paddle.com/paddle/v2/paddle.js"></script>
<script type="text/javascript">
  Paddle.Setup({ 
    token: '7d279f61a3499fed520f7cd8c08' // replace with a client-side token
  });
</script>

LANGUAGE: html
CODE:
<a 
  href="#"
  class="paddle_button"
  data-display-mode="overlay"
  data-theme="light"
  data-locale="en"
  data-success-url="https://example.com/thankyou"
  data-items='[
    {
      "priceId": "pri_01gs59hve0hrz6nyybj56z04eq", 
      "quantity": 1
    }
  ]'
>
  Buy now
</a>

----------------------------------------

TITLE: Using Components in MDX
DESCRIPTION: Example of importing and using a React component in an MDX file.

LANGUAGE: mdx
CODE:
---
title: My first post
---
import ReactCounter from '../components/ReactCounter.jsx';

I just started my new Astro blog! 

Here is my counter component, working in MDX:
<ReactCounter client:load />

----------------------------------------

TITLE: Seeding Development Data in Astro DB
DESCRIPTION: Seed initial development data into database tables using the db/seed.ts file.

LANGUAGE: typescript
CODE:
import { db, Comment, Author } from 'astro:db';

export default async function() {
  await db.insert(Author).values([
    { id: 1, name: "Kasim" },
    { id: 2, name: "Mina" },
  ]);

  await db.insert(Comment).values([
    { authorId: 1, body: 'Hope you like Astro DB!' },
    { authorId: 2, body: 'Enjoy!'},
  ])
}

----------------------------------------

TITLE: Image Configuration in Astro Config
DESCRIPTION: Shows how to configure authorized domains and remote patterns for image optimization.

LANGUAGE: typescript
CODE:
// astro.config.mjs
export default defineConfig({
  image: {
    domains: ["astro.build"],
    remotePatterns: [{ protocol: "https" }],
  }
});

----------------------------------------

TITLE: Fetching and Rendering Caisy CMS Content in Astro
DESCRIPTION: This code snippet demonstrates how to use graphql-request and Caisy's rich text renderer to fetch CMS data and display content on an Astro page. It includes setting up the GraphQL client, querying blog article data, and rendering the content.

LANGUAGE: astro
CODE:
---
import RichTextRenderer from '@caisy/rich-text-astro-renderer';
import { gql, GraphQLClient } from 'graphql-request';

const params = Astro.params;

const client = new GraphQLClient(
	`https://cloud.caisy.io/api/v3/e/${import.meta.env.CAISY_PROJECT_ID}/graphql`,
	{
		headers: {
			'x-caisy-apikey': import.meta.env.CAISY_API_KEY
		}
	}
);
const gqlResponse = await client.request(
	gql`
		query allBlogArticle($slug: String) {
			allBlogArticle(where: { slug: { eq: $slug } }) {
				edges {
					node {
						text {
							json
						}
						title
						slug
						id
					}
				}
			}
		}
	`,
	{ slug: params.slug }
);

const post = gqlResponse?.allBlogArticle?.edges?.[0]?.node;
---
<h1>{post.title}</h1>
<RichTextRenderer node={post.text.json} />

----------------------------------------

TITLE: Seeding Development Data in Astro DB
DESCRIPTION: Seed initial development data into database tables using the db/seed.ts file.

LANGUAGE: typescript
CODE:
import { db, Comment, Author } from 'astro:db';

export default async function() {
  await db.insert(Author).values([
    { id: 1, name: "Kasim" },
    { id: 2, name: "Mina" },
  ]);

  await db.insert(Comment).values([
    { authorId: 1, body: 'Hope you like Astro DB!' },
    { authorId: 2, body: 'Enjoy!'},
  ])
}

----------------------------------------

TITLE: Image Configuration in Astro Config
DESCRIPTION: Shows how to configure authorized domains and remote patterns for image optimization.

LANGUAGE: typescript
CODE:
// astro.config.mjs
export default defineConfig({
  image: {
    domains: ["astro.build"],
    remotePatterns: [{ protocol: "https" }],
  }
});

----------------------------------------

TITLE: Astro Dynamic Post Page
DESCRIPTION: Implements dynamic route generation for individual blog posts using PayloadCMS data, including static path generation for build-time rendering.

LANGUAGE: astro
CODE:
---
import PostLayout from "../../layouts/PostLayout.astro"

const {title, content} = Astro.props

// The getStaticPaths() is required for static Astro sites.
// If using SSR, you will not need this function.
export async function getStaticPaths() {
    let data = await fetch("http://localhost:5000/api/posts")
    let posts = await data.json()

    return posts.docs.map((post) => {
        return {
            params: {slug: post.slug},
            props: {title: post.title, content: post.content},
        };
    });
} 
---
<PostLayout title={title}>
    <article>
        <h1 set:html={title} />
        <p set:html={content} />
    </article>
</PostLayout>

----------------------------------------

TITLE: Configuring Astro for GitHub Pages Deployment
DESCRIPTION: This snippet shows how to configure the 'site' and 'base' options in the Astro configuration file for deploying to a GitHub Pages URL.

LANGUAGE: javascript
CODE:
import { defineConfig } from 'astro/config'

export default defineConfig({
  site: 'https://astronaut.github.io',
  base: 'my-repo',
})

----------------------------------------

TITLE: Installing Storyblok Dependencies
DESCRIPTION: Commands for installing required Storyblok and Vite dependencies using different package managers.

LANGUAGE: shell
CODE:
npm install @storyblok/astro vite

LANGUAGE: shell
CODE:
pnpm add @storyblok/astro vite

LANGUAGE: shell
CODE:
yarn add @storyblok/astro vite

----------------------------------------

TITLE: Returning a Response object in an Astro page
DESCRIPTION: Demonstrates how to return a custom Response object from a server-rendered Astro page, handling different scenarios like 404 errors and redirects.

LANGUAGE: astro
CODE:
---
export const prerender = false; // Not needed in 'server' mode

import { getProduct } from '../api';

const product = await getProduct(Astro.params.id);

// No product found
if (!product) {
  return new Response(null, {
    status: 404,
    statusText: 'Not found'
  });
}

// The product is no longer available
if (!product.isAvailable) {
  return Astro.redirect("/products", 301);
}
---
<html>
  <!-- Page here... -->
</html>

----------------------------------------

TITLE: Using the Picture Component in Astro
DESCRIPTION: Shows how to use the Picture component to create responsive images with multiple formats.

LANGUAGE: astro
CODE:
---
import { Picture } from 'astro:assets';
import myImage from "../assets/my_image.png"; // Image is 1600x900
---

<!-- `alt` is mandatory on the Picture component -->
<Picture src={myImage} formats={['avif', 'webp']} alt="A description of my image." />

LANGUAGE: html
CODE:
<!-- Output -->
<picture>
  <source srcset="/_astro/my_image.hash.avif" type="image/avif" />
  <source srcset="/_astro/my_image.hash.webp" type="image/webp" />
  <img
    src="/_astro/my_image.hash.png"
    width="1600"
    height="900"
    decoding="async"
    loading="lazy"
    alt="A description of my image."
  />
</picture>

----------------------------------------

TITLE: Initializing GraphQL Client and Fetching Hashnode Data in TypeScript
DESCRIPTION: TypeScript code for setting up a GraphQL client using graphql-request and defining functions to fetch all posts and individual post data from Hashnode's API.

LANGUAGE: typescript
CODE:
import { gql, GraphQLClient } from "graphql-request";
import type { AllPostsData, PostData } from "./schema";

export const getClient = () => { 
  return new GraphQLClient("https://gql.hashnode.com") 
}

const myHashnodeURL = "astroplayground.hashnode.dev";

export const getAllPosts = async () => {
  const client = getClient();

  const allPosts = await client.request<AllPostsData>(
    gql`
      query allPosts {
        publication(host: "${myHashnodeURL}") {
          id
          title
          posts(first: 20) {
            pageInfo{
              hasNextPage
              endCursor
            }
            edges {
              node {
                id
                author{
                  name
                  profilePicture
                }
                title
                subtitle
                brief
                slug
                coverImage {
                  url
                }
                tags {
                  name
                  slug
                }
                publishedAt
                readTimeInMinutes
              }
            }
          }
        }
      }
    `
  );

  return allPosts;
};


export const getPost = async (slug: string) => {
  const client = getClient();

  const data = await client.request<PostData>(
    gql`
      query postDetails($slug: String!) {
        publication(host: "${myHashnodeURL}") {
          id
          post(slug: $slug) {
            id
            author{
              name
              profilePicture
            }
            publishedAt
            title
            subtitle
            readTimeInMinutes
            content{
              html
            }
            tags {
              name
              slug
            }
            coverImage {
              url
            }
          }
        }
      }
    `,
    { slug: slug }
  );
      
  return data.publication.post;
};

----------------------------------------

TITLE: Handling Script Behavior with View Transitions in Astro
DESCRIPTION: Wrap scripts in event listeners to ensure they run at the proper time during client-side navigation.

LANGUAGE: javascript
CODE:
<script>
document.addEventListener('astro:page-load', () => {
  document.querySelector('.hamburger').addEventListener('click', () => {
    document.querySelector('.nav-links').classList.toggle('expanded');
  });
});
</script>

----------------------------------------

TITLE: Basic HTML Navigation in Astro
DESCRIPTION: Example of using standard HTML anchor tags for navigation between routes in Astro.

LANGUAGE: astro
CODE:
<p>Read more <a href="/about/">about</a> Astro!</p>

<!-- With `base: "/docs"` configured -->
<p>Learn more in our <a href="/docs/reference/">reference</a> section!</p>

----------------------------------------

TITLE: Querying Data in Astro DB
DESCRIPTION: Use the db ORM to query data from database tables in Astro pages or components.

LANGUAGE: astro
CODE:
---
import { db, Comment } from 'astro:db';

const comments = await db.select().from(Comment);
---

<h2>Comments</h2>

{
  comments.map(({ author, body }) => (
    <article>
      <p>Author: {author}</p>
      <p>{body}</p>
    </article>
  ))
}

----------------------------------------

TITLE: TypeScript Interface for Astro Dev Server
DESCRIPTION: Defines the TypeScript interface for the development server object returned by the dev() function.

LANGUAGE: typescript
CODE:
export interface DevServer {
	address: AddressInfo;
	handle: (req: http.IncomingMessage, res: http.ServerResponse<http.IncomingMessage>) => void;
	watcher: vite.FSWatcher;
	stop(): Promise<void>;
}

----------------------------------------

TITLE: Generating Dynamic Blog Post Pages in Astro
DESCRIPTION: Astro component that generates individual blog post pages using dynamic routing and Cosmic data.

LANGUAGE: astro
CODE:
---
import { getAllPosts } from '../../lib/cosmic'
import { Image } from 'astro:assets'

export async function getStaticPaths() {
  const data = (await getAllPosts()) || []

  return data.map((post) => {
    return {
      params: { slug: post.slug },
      props: { post }
    }
  })
}

const { post } = Astro.props
---

<article class="mx-auto max-w-screen-md pt-20">
  <section class="border-b pb-8">
    <h1 class="text-4xl font-bold">{post.title}</h1>
    <div class="my-4"></div>
    <span class="text-sm font-semibold">{post.metadata.author?.title}</span>
  </section>
  {
    post.metadata.cover_image && (
      <Image
        src={post.metadata.cover_image.imgix_url}
        format="webp"
        width={1200}
        height={675}
        aspectRatio={16 / 9}
        quality={50}
        alt={`Cover image for the blog ${post.title}`}
        class={'my-12 rounded-md shadow-lg'}
      />
    )
  }
  <div set:html={post.metadata.content} />
</article>

----------------------------------------

TITLE: Triggering Navigation Programmatically in Astro
DESCRIPTION: Use the navigate function from astro:transitions/client to trigger client-side navigation in scripts or framework components.

LANGUAGE: javascript
CODE:
import { navigate } from 'astro:transitions/client';

// Navigate to the selected option automatically.
document.querySelector('select').onchange = (event) => {
  let href = event.target.value;
  navigate(href);
};

----------------------------------------

TITLE: Using Transition Directives in Astro
DESCRIPTION: Use transition:name and transition:animate directives to control element matching and animation during page transitions.

LANGUAGE: astro
CODE:
<aside transition:name="hero">

LANGUAGE: astro
CODE:
<video controls="" autoplay="" transition:persist>
	<source src="https://ia804502.us.archive.org/33/items/GoldenGa1939_3/GoldenGa1939_3_512kb.mp4" type="video/mp4">
</video>

----------------------------------------

TITLE: Setting Drupal URL in .env file
DESCRIPTION: Adds the Drupal base URL to the .env file for use in the Astro project.

LANGUAGE: ini
CODE:
DRUPAL_BASE_URL="https://drupal.ddev.site/"

----------------------------------------

TITLE: Custom Domain Configuration for i18n
DESCRIPTION: Configuration example showing how to set up custom domains for different languages in a server-rendered Astro project.

LANGUAGE: javascript
CODE:
import { defineConfig } from "astro/config"
export default defineConfig({
  site: "https://example.com",
  output: "server",
  adapter: node({
    mode: 'standalone',
  }),
  i18n: {
    locales: ["es", "en", "fr", "ja"],
    defaultLocale: "en",
    routing: {
      prefixDefaultLocale: false
    },
    domains: {
      fr: "https://fr.example.com",
      es: "https://example.es"
    }
  }
})

----------------------------------------

TITLE: Configuring Storyblok Integration in Astro
DESCRIPTION: Configuration setup for Storyblok integration in astro.config.mjs including access token and component mapping.

LANGUAGE: js
CODE:
import { defineConfig } from 'astro/config';
import storyblok from '@storyblok/astro';
import { loadEnv } from 'vite';

const env = loadEnv("", process.cwd(), 'STORYBLOK');

export default defineConfig({
  integrations: [
    storyblok({
      accessToken: env.STORYBLOK_TOKEN,
      components: {
        // Add your components here
      },
      apiOptions: {
        region: 'us', // optional,  or 'eu' (default)
      },
    })
  ],
});

----------------------------------------

TITLE: Configuring Image Service in Astro Configuration File
DESCRIPTION: This JavaScript code snippet shows how to configure the image service in the Astro configuration file (astro.config.mjs). It demonstrates setting the service entrypoint and optional service-specific configuration.

LANGUAGE: javascript
CODE:
import { defineConfig } from "astro/config";

export default defineConfig({
  image: {
    service: {
      entrypoint: "your-entrypoint", // 'astro/assets/services/sharp' | string,
      config: {
        // ... service-specific config. Optional.
      }
    }
  },
});

----------------------------------------

TITLE: Creating a Markdown Layout in Astro
DESCRIPTION: This snippet shows how to create a layout component specifically for Markdown pages, accessing frontmatter data and providing a slot for content.

LANGUAGE: astro
CODE:
---
// 1. The frontmatter prop gives access to frontmatter and other data
const { frontmatter } = Astro.props;
---
<html>
  <head>
    <!-- Add other Head elements here, like styles and meta tags. -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta charset="utf-8">
    <title>{frontmatter.title}</title>
  </head>
  <body>
    <!-- Add other UI components here, like common headers and footers. -->
    <h1>{frontmatter.title} by {frontmatter.author}</h1>
    <!-- 2. Rendered HTML will be passed into the default slot. -->
    <slot />
    <p>Written on: {frontmatter.date}</p>
  </body>
</html>

----------------------------------------

TITLE: Creating a 404 Page in Astro
DESCRIPTION: Implements a simple 404 error page for handling not found articles in the Astro project.

LANGUAGE: astro
CODE:
<html lang="en">
  <head>
    <title>Not found</title>
  </head>
  <body>
    <p>Sorry, this page does not exist.</p>
    <img src="https://http.cat/404" />
  </body>
</html>

----------------------------------------

TITLE: Mixed Framework Components in Astro
DESCRIPTION: Example of using components from multiple frameworks (React, Svelte, Vue) within the same Astro component.

LANGUAGE: astro
CODE:
---
import MyReactComponent from '../components/MyReactComponent.jsx';
import MySvelteComponent from '../components/MySvelteComponent.svelte';
import MyVueComponent from '../components/MyVueComponent.vue';
---
<div>
  <MySvelteComponent />
  <MyReactComponent />
  <MyVueComponent />
</div>

----------------------------------------

TITLE: Enabling Prefetch in Astro Configuration
DESCRIPTION: Demonstrates how to enable prefetching in the Astro configuration file. This snippet shows the basic setup to turn on prefetching for the project.

LANGUAGE: javascript
CODE:
import { defineConfig } from 'astro/config';

export default defineConfig({
  prefetch: true
});

----------------------------------------

TITLE: Creating a Nano Store for State Management
DESCRIPTION: Initializes a Nano Store atom to track a boolean state for dialog visibility.

LANGUAGE: typescript
CODE:
import { atom } from 'nanostores';

export const isOpen = atom(false);

----------------------------------------

TITLE: Querying Xata Database in Astro Component
DESCRIPTION: Demonstrates how to use the XataClient to query posts from a Xata database in an Astro component. It retrieves the first 50 posts and renders their titles in a list.

LANGUAGE: astro
CODE:
---
import { XataClient } from '../../xata';
 
const xata = new XataClient({
  apiKey: import.meta.env.XATA_API_KEY,
  branch: import.meta.env.XATA_BRANCH
});

const { records } = await xata.db.Posts.getPaginated({
  pagination: {
    size: 50
  }
})
---

<ul>
  {records.map((post) => (
    <li>{post.title}</li>
  ))}
</ul>

----------------------------------------

TITLE: Using Better Auth in Astro components
DESCRIPTION: Implementing sign-in and sign-out functionality using Better Auth in an Astro component.

LANGUAGE: astro
CODE:
---
import Layout from 'src/layouts/Base.astro';
---
<Layout>
  <button id="login">Login</button>
  <button id="logout">Logout</button>

  <script>
    const { signIn, signOut } = await import("./lib/auth-client")
    document.querySelector("#login").onclick = () => signIn.social({
      provider: "github",
      callbackURL: "/dashboard",
    })
    document.querySelector("#logout").onclick = () => signOut()
  </script>
</Layout>

----------------------------------------

TITLE: Creating Social Media Component in Astro
DESCRIPTION: This snippet shows how to create a reusable Social Media component that accepts platform and username as props.

LANGUAGE: astro
CODE:
---
const { platform, username } = Astro.props;
---
<a href={`https://www.${platform}.com/${username}`}>{platform}</a>

----------------------------------------

TITLE: Calling an Astro Action from an HTML Form
DESCRIPTION: Example of calling an Astro Action using an HTML form's action attribute. It sets the form's method to POST and uses the action from the imported actions object.

LANGUAGE: astro
CODE:
---
import { actions } from 'astro:actions';
---

<form method="POST" action={actions.logout}>
  <button>Log out</button>
</form>

----------------------------------------

TITLE: Setting Strapi URL in .env file
DESCRIPTION: Adds the Strapi URL as an environment variable in the .env file for use in the Astro project.

LANGUAGE: ini
CODE:
STRAPI_URL="http://127.0.0.1:1337" # or use your IP address

----------------------------------------

TITLE: Registering Local Font with @font-face
DESCRIPTION: CSS code for registering a custom local font file using @font-face declaration. Specifies the font family name, source file path, and font display settings.

LANGUAGE: css
CODE:
@font-face {
  font-family: 'DistantGalaxy';
  src: url('/fonts/DistantGalaxy.woff') format('woff');
  font-weight: normal;
  font-style: normal;
  font-display: swap;
}

----------------------------------------

TITLE: Dynamic Page Generation with WordPress API
DESCRIPTION: Implements dynamic route generation for individual dinosaur pages using WordPress API data and Astro's dynamic routing capabilities.

LANGUAGE: astro
CODE:
---
import Layout from '../../layouts/Layout.astro';

const { slug } = Astro.params;

let res = await fetch(`https://norian.studio/wp-json/wp/v2/dinos?slug=${slug}`);
let [post] = await res.json();

export async function getStaticPaths() {
  let data = await fetch("https://norian.studio/wp-json/wp/v2/dinos");
  let posts = await data.json();

  return posts.map((post) => ({
    params: { slug: post.slug },
    props: { post: post },
  }));
}
---
<Layout title={post.title.rendered}>
  <article>
    <h1 set:html={post.title.rendered} />
    <Fragment set:html={post.content.rendered} />
  </article>
</Layout>

----------------------------------------

TITLE: Mixed Framework Components in Astro
DESCRIPTION: Example of using components from multiple frameworks (React, Svelte, Vue) within the same Astro component.

LANGUAGE: astro
CODE:
---
import MyReactComponent from '../components/MyReactComponent.jsx';
import MySvelteComponent from '../components/MySvelteComponent.svelte';
import MyVueComponent from '../components/MyVueComponent.vue';
---
<div>
  <MySvelteComponent />
  <MyReactComponent />
  <MyVueComponent />
</div>

----------------------------------------

TITLE: Configuring AWS Amplify Build Settings for PNPM
DESCRIPTION: YAML configuration for AWS Amplify build settings using PNPM package manager. It specifies the build process, artifacts, and caching for an Astro project.

LANGUAGE: yaml
CODE:
version: 1
frontend:
  phases:
    preBuild:
      commands:
        - npm i -g pnpm
        - pnpm config set store-dir .pnpm-store
        - pnpm i
    build:
      commands:
        - pnpm run build
  artifacts:
    baseDirectory: /dist
    files:
      - '**/*'
  cache:
    paths:
      - .pnpm-store/**/*

----------------------------------------

TITLE: Blog Index Page Implementation
DESCRIPTION: Fetches and displays a list of blog posts from Builder.io using their API.

LANGUAGE: astro
CODE:
---

const builderAPIpublicKey = import.meta.env.BUILDER_API_PUBLIC_KEY;
const builderModel = import.meta.env.BUILDER_BLOGPOST_MODEL;

const { results: posts } = await fetch(
  `https://cdn.builder.io/api/v3/content/${builderModel}?${new URLSearchParams({
    apiKey: builderAPIpublicKey,
    fields: ["data.slug", "data.title"].join(","),
    cachebust: "true",
  }).toString()}`
)
  .then((res) => res.json())
  .catch();
---

<html lang="en">
  <head>
    <title>Blog Index</title>
  </head>
  <body>
    <ul>
      {
        posts.flatMap(({ data: { slug, title } }) => (
          <li>
            <a href={`/posts/${slug}`}>{title}</a>
          </li>
        ))
      }
    </ul>
  </body>
</html>

----------------------------------------

TITLE: Using getActionPath for Custom Action Calls in Astro
DESCRIPTION: This example shows how to use getActionPath() to execute an action call as a fetch() operation with custom headers. It demonstrates calling a 'like' action with an Authorization header and the keepalive option.

LANGUAGE: javascript
CODE:
<script>
import { actions, getActionPath } from 'astro:actions'

await fetch(getActionPath(actions.like), {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
    Authorization: 'Bearer YOUR_TOKEN'
  },
  body: JSON.stringify({ id: 'YOUR_ID' }),
  keepalive: true
})
</script>

----------------------------------------

TITLE: Configuring Vitest for Astro
DESCRIPTION: Setup configuration for Vitest testing framework in an Astro project using getViteConfig helper.

LANGUAGE: javascript
CODE:
// vitest.config.ts
/// <reference types="vitest" />
import { getViteConfig } from 'astro/config';

export default getViteConfig({
  test: {
    // Vitest configuration options
  },
});

----------------------------------------

TITLE: Creating an Astro page to display Drupal articles
DESCRIPTION: Sets up an Astro page component to fetch and display a list of Drupal articles.

LANGUAGE: astro
CODE:
---
import {Jsona} from "jsona";
import {DrupalJsonApiParams} from "drupal-jsonapi-params";
import type {TJsonApiBody} from "jsona/lib/JsonaTypes";

import type { DrupalNode } from "../types";
import {getArticles} from "../api/drupal";

// Get all published articles.
const articles = await getArticles();
---
<html lang="en">
  <head>
    <title>My news site</title>
  </head>
  <body>
    <h1>My news site</h1>
    <ul>
      {articles.map((article: DrupalNode) => (
        <li>
          <a href={article.path.alias.replace("internal:en/", "")}>
            <h2>{article.title}</h2>
            <p>Published on {article.created}</p>
          </a>
        </li>
      ))}
    </ul>
  </body>
</html>

----------------------------------------

TITLE: Fetching Contentful Data in Astro Component
DESCRIPTION: Demonstrates how to fetch blog post data from Contentful and render it in an Astro component.

LANGUAGE: astro
CODE:
---
import { contentfulClient } from "../lib/contentful";
import { documentToHtmlString } from "@contentful/rich-text-html-renderer";
import type { EntryFieldTypes } from "contentful";

interface BlogPost {
  contentTypeId: "blogPost",
  fields: {
    title: EntryFieldTypes.Text
    content: EntryFieldTypes.RichText,
  }
}

const entries = await contentfulClient.getEntries<BlogPost>({
  content_type: "blogPost",
});
---
<body>
  {entries.items.map((item) => (
    <section>
      <h2>{item.fields.title}</h2>
      <article set:html={documentToHtmlString(item.fields.content)}></article>
    </section>
  ))}
</body>

----------------------------------------

TITLE: Creating a GET Endpoint in TypeScript for Astro
DESCRIPTION: This snippet defines a GET endpoint that returns a JSON response with a greeting. It uses the APIRoute type from Astro for type safety.

LANGUAGE: typescript
CODE:
import type { APIRoute } from 'astro'

export const GET: APIRoute = () => {
  return new Response(
    JSON.stringify({
      greeting: 'Hello',
    }),
  )
}

----------------------------------------

TITLE: Optimized Page with Component-Based Data Fetching
DESCRIPTION: Improved page implementation using separate components for data fetching, allowing progressive rendering of the page structure while data loads.

LANGUAGE: astro
CODE:
---
import RandomName from '../components/RandomName.astro';
import RandomFact from '../components/RandomFact.astro';
---
<html>
  <head>
    <title>A name and a fact</title>
  </head>
  <body>
    <h2>A name</h2>
    <RandomName />
    <h2>A fact</h2>
    <RandomFact />
  </body>
</html>

----------------------------------------

TITLE: Creating Global CSS Styles for Astro
DESCRIPTION: Defines global CSS styles for an Astro project, including background color, font family, layout, and typography settings.

LANGUAGE: css
CODE:
html {
  background-color: #f1f5f9;
  font-family: sans-serif;
}

body {
  margin: 0 auto;
  width: 100%;
  max-width: 80ch;
  padding: 1rem;
  line-height: 1.5;
}

* {
  box-sizing: border-box;
}

h1 {
  margin: 1rem 0;
  font-size: 2.5rem;
}

----------------------------------------

TITLE: Importing NPM Packages in Astro
DESCRIPTION: Shows how to import and use NPM packages in Astro components.

LANGUAGE: astro
CODE:
---
import { Icon } from 'astro-icon';
---

----------------------------------------

TITLE: Configuring Astro Markdown Options
DESCRIPTION: Demonstrates how to configure Markdown processing options in Astro.

LANGUAGE: javascript
CODE:
import { defineConfig } from 'astro/config';

export default defineConfig({
  markdown: {
    shikiConfig: {
      // Choose from Shiki's built-in themes (or add your own)
      // https://shiki.style/themes
      theme: 'dracula',
      // Alternatively, provide multiple themes
      // See note below for using dual light/dark themes
      themes: {
        light: 'github-light',
        dark: 'github-dark',
      },
      // Disable the default colors
      // https://shiki.style/guide/dual-themes#without-default-color
      // (Added in v4.12.0)
      defaultColor: false,
      // Add custom languages
      // Note: Shiki has countless langs built-in, including .astro!
      // https://shiki.style/languages
      langs: [],
      // Add custom aliases for languages
      // Map an alias to a Shiki language ID: https://shiki.style/languages#bundled-languages
      // https://shiki.style/guide/load-lang#custom-language-aliases
      langAlias: {
        cjs: "javascript"
      },
      // Enable word wrap to prevent horizontal scrolling
      wrap: true,
      // Add custom transformers: https://shiki.style/guide/transformers
      // Find common transformers: https://shiki.style/packages/transformers
      transformers: [],
    },
  },
});

----------------------------------------

TITLE: Implementing Local Image Service in JavaScript
DESCRIPTION: This code snippet shows how to implement a local image service for Astro. It includes methods for URL generation, parsing, image transformation, and setting HTML attributes.

LANGUAGE: javascript
CODE:
import type { LocalImageService, AstroConfig } from "astro";

const service: LocalImageService = {
  getURL(options: ImageTransform, imageConfig: AstroConfig['image']) {
    const searchParams = new URLSearchParams();
		searchParams.append('href', typeof options.src === "string" ? options.src : options.src.src);
		options.width && searchParams.append('w', options.width.toString());
		options.height && searchParams.append('h', options.height.toString());
		options.quality && searchParams.append('q', options.quality.toString());
		options.format && searchParams.append('f', options.format);
    return `/my_custom_endpoint_that_transforms_images?${searchParams}`;
    // Or use the built-in endpoint, which will call your parseURL and transform functions:
    // return `/_image?${searchParams}`;
  },
  parseURL(url: URL, imageConfig) {
    return {
      src: params.get('href')!,
      width: params.has('w') ? parseInt(params.get('w')!) : undefined,
      height: params.has('h') ? parseInt(params.get('h')!) : undefined,
			format: params.get('f'),
      quality: params.get('q'),
    };
  },
  transform(buffer: Uint8Array, options: { src: string, [key: string]: any }, imageConfig): { data: Uint8Array, format: OutputFormat } {
    const { buffer } = mySuperLibraryThatEncodesImages(options);
    return {
      data: buffer,
      format: options.format,
    };
  },
  getHTMLAttributes(options, imageConfig) {
		let targetWidth = options.width;
		let targetHeight = options.height;
		if (typeof options.src === "object") {
			const aspectRatio = options.src.width / options.src.height;

			if (targetHeight && !targetWidth) {
				targetWidth = Math.round(targetHeight * aspectRatio);
			} else if (targetWidth && !targetHeight) {
				targetHeight = Math.round(targetWidth / aspectRatio);
			}
		}

		const { src, width, height, format, quality, ...attributes } = options;

		return {
			...attributes,
			width: targetWidth,
			height: targetHeight,
			loading: attributes.loading ?? 'lazy',
			decoding: attributes.decoding ?? 'async',
		};
	},
  propertiesToHash: ['src', 'width', 'height', 'format', 'quality'], 
};
export default service;

----------------------------------------

TITLE: TypeScript Environment Variables Declaration
DESCRIPTION: Defines TypeScript interface for Builder.io environment variables to enable IntelliSense support.

LANGUAGE: typescript
CODE:
interface ImportMetaEnv {
  readonly BUILDER_API_PUBLIC_KEY: string;
}

----------------------------------------

TITLE: Configuring Astro for Cloudflare SSR Deployment
DESCRIPTION: This code snippet demonstrates how to configure the Astro config file (astro.config.mjs) to use the Cloudflare adapter for server-side rendering (SSR) deployment.

LANGUAGE: js
CODE:
import { defineConfig } from 'astro/config';
import cloudflare from '@astrojs/cloudflare';

export default defineConfig({
  output: 'server',
  adapter: cloudflare()
});

----------------------------------------

TITLE: Defining an Action with Input Validation in TypeScript
DESCRIPTION: This example demonstrates how to use defineAction() to create a new action with input validation using Zod. It defines a 'getGreeting' action that accepts a name input and returns a greeting message.

LANGUAGE: typescript
CODE:
import { defineAction } from 'astro:actions';
import { z } from 'astro:schema';

export const server = {
  getGreeting: defineAction({
    input: z.object({
      name: z.string(),
    }),
    handler: async (input, context) => {
      return `Hello, ${input.name}!`
    }
  })
}

----------------------------------------

TITLE: Implementing Server Start Function
DESCRIPTION: Demonstrates how to implement a start function for hosts that require manual server initialization.

LANGUAGE: javascript
CODE:
import { App } from 'astro/app';
import http from 'http';

export function start(manifest) {
  const app = new App(manifest);

  addEventListener('fetch', event => {
    event.respondWith(
      app.render(event.request)
    );
  });
}

----------------------------------------

TITLE: Updating Sign-in Endpoint for OAuth in Astro
DESCRIPTION: This TypeScript snippet updates the sign-in endpoint to handle both password-based and OAuth authentication in an Astro project.

LANGUAGE: typescript
CODE:
import type { APIRoute } from "astro";
import { supabase } from "../../../lib/supabase";
import type { Provider } from "@supabase/supabase-js";

export const POST: APIRoute = async ({ request, cookies, redirect }) => {
  const formData = await request.formData();
  const email = formData.get("email")?.toString();
  const password = formData.get("password")?.toString();
  const provider = formData.get("provider")?.toString();

  const validProviders = ["google", "github", "discord"];

  if (provider && validProviders.includes(provider)) {
    const { data, error } = await supabase.auth.signInWithOAuth({
      provider: provider as Provider,
      options: {
        redirectTo: "http://localhost:4321/api/auth/callback"
      },
    });

    if (error) {
      return new Response(error.message, { status: 500 });
    }

    return redirect(data.url);
  }

  if (!email || !password) {
    return new Response("Email and password are required", { status: 400 });
  }

  const { data, error } = await supabase.auth.signInWithPassword({
    email,
    password,
  });

  if (error) {
    return new Response(error.message, { status: 500 });
  }

  const { access_token, refresh_token } = data.session;
  cookies.set("sb-access-token", access_token, {
    path: "/",
  });
  cookies.set("sb-refresh-token", refresh_token, {
    path: "/",
  });
  return redirect("/dashboard");
};

----------------------------------------

TITLE: Configuring Content Types with Markdoc Support
DESCRIPTION: Extended JSON configuration that includes Markdoc file type specification in the content type definition.

LANGUAGE: json
CODE:
"frontMatter.taxonomy.contentTypes": [
  {
    "name": "default",
    "pageBundle": false,
    "previewPath": "'blog'",
    "filePrefix": null,
    "fileType": "mdoc",
    "fields": [
      {
        "title": "Title",
        "name": "title",
        "type": "string",
        "single": true
      },
      {
        "title": "Description",
        "name": "description",
        "type": "string"
      },
      {
        "title": "Publishing date",
        "name": "pubDate",
        "type": "datetime",
        "default": "{{now}}",
        "isPublishDate": true
      },
      {
        "title": "Content preview",
        "name": "heroImage",
        "type": "image",
        "isPreviewImage": true
      }
    ]
  }
]

----------------------------------------

TITLE: Creating User Dashboard Page in Astro
DESCRIPTION: This Astro component creates a dashboard page that checks for valid authentication tokens and displays user information if authenticated.

LANGUAGE: astro
CODE:
---
import Layout from "../layouts/Layout.astro";
import { supabase } from "../lib/supabase";

const accessToken = Astro.cookies.get("sb-access-token");
const refreshToken = Astro.cookies.get("sb-refresh-token");

if (!accessToken || !refreshToken) {
  return Astro.redirect("/signin");
}

let session;
try {
  session = await supabase.auth.setSession({
    refresh_token: refreshToken.value,
    access_token: accessToken.value,
  });
  if (session.error) {
    Astro.cookies.delete("sb-access-token", {
      path: "/",
    });
    Astro.cookies.delete("sb-refresh-token", {
      path: "/",
    });
    return Astro.redirect("/signin");
  }
} catch (error) {
  Astro.cookies.delete("sb-access-token", {
    path: "/",
  });
  Astro.cookies.delete("sb-refresh-token", {
    path: "/",
  });
  return Astro.redirect("/signin");
}

const email = session.data.user?.email;
---
<Layout title="dashboard">
  <h1>Welcome {email}</h1>
  <p>We are happy to see you here</p>
  <form action="/api/auth/signout">
    <button type="submit">Sign out</button>
  </form>
</Layout>

----------------------------------------

TITLE: Type Declarations in Astro
DESCRIPTION: Example of custom type declarations and Astro type references in environment declaration file.

LANGUAGE: typescript
CODE:
// Custom types declarations
declare var myString: string;

// Astro types, not necessary if you already have a `tsconfig.json`
/// <reference path="../.astro/types.d.ts" />

----------------------------------------

TITLE: Passing Props to Layout Component
DESCRIPTION: Shows how to pass and receive props in a layout component using Astro.props for dynamic page titles.

LANGUAGE: astro
CODE:
---
import BaseLayout from '../layouts/BaseLayout.astro';
const pageTitle = "Home Page";
---
<BaseLayout pageTitle={pageTitle}>
  <h2>My awesome blog subtitle</h2>
</BaseLayout>

----------------------------------------

TITLE: Applying Custom Font in Astro Component
DESCRIPTION: Astro component example showing how to apply a custom font to specific elements using CSS styling within a component.

LANGUAGE: astro
CODE:
---
---

<h1>In a galaxy far, far away...</h1>

<p>Custom fonts make my headings much cooler!</p>

<style>
h1 {
  font-family: 'DistantGalaxy', sans-serif;
}
</style>

----------------------------------------

TITLE: Configuring Sentry in Astro Config
DESCRIPTION: JavaScript code snippet for configuring Sentry in the Astro configuration file. It includes setting up the DSN, project name, and authentication token.

LANGUAGE: javascript
CODE:
import { defineConfig } from 'astro/config';
import sentry from '@sentry/astro';

export default defineConfig({
  integrations: [
    sentry({
      dsn: 'https://examplePublicKey@o0.ingest.sentry.io/0',
      sourceMapsUploadOptions: {
        project: 'example-project',
        authToken: process.env.SENTRY_AUTH_TOKEN,
      },
    }),
  ],
});

----------------------------------------

TITLE: Mounting Better Auth handler in Astro
DESCRIPTION: Setting up the Better Auth handler in an Astro API route.

LANGUAGE: typescript
CODE:
import { auth } from "../../../lib/auth"; // import your Better Auth instance
import type { APIRoute } from "astro";

export const ALL: APIRoute = async (ctx) => {
	return auth.handler(ctx.request);
};

----------------------------------------

TITLE: Configuring Decap CMS Collections in YAML
DESCRIPTION: YAML configuration for defining a blog collection in Decap CMS, including field definitions for frontmatter properties.

LANGUAGE: yaml
CODE:
collections:
  - name: "blog" # Used in routes, e.g., /admin/collections/blog
    label: "Blog" # Used in the UI
    folder: "src/content/blog" # The path to the folder where the documents are stored
    create: true # Allow users to create new documents in this collection
    fields: # The fields for each document, usually in frontmatter
      - { label: "Layout", name: "layout", widget: "hidden", default: "blog" }
      - { label: "Title", name: "title", widget: "string" }
      - { label: "Publish Date", name: "date", widget: "datetime" }
      - { label: "Featured Image", name: "thumbnail", widget: "image" }
      - { label: "Rating (scale of 1-5)", name: "rating", widget: "number" }
      - { label: "Body", name: "body", widget: "markdown" }

----------------------------------------

TITLE: Setting Astro Base Path
DESCRIPTION: Demonstrates how to configure the base path for Astro deployment.

LANGUAGE: javascript
CODE:
{
  base: '/docs'
}

----------------------------------------

TITLE: Installing auth-astro integration
DESCRIPTION: Commands to install the auth-astro integration using different package managers.

LANGUAGE: shell
CODE:
npx astro add auth-astro

LANGUAGE: shell
CODE:
pnpm astro add auth-astro

LANGUAGE: shell
CODE:
yarn astro add auth-astro

----------------------------------------

TITLE: Working with Cookies in Astro
DESCRIPTION: Demonstrates cookie manipulation using Astro.cookies with methods for getting, setting and deleting cookies

LANGUAGE: typescript
CODE:
Astro.cookies.set('cookieName', value, {
  maxAge: 3600,
  httpOnly: true,
  secure: true
});

const cookie = Astro.cookies.get('cookieName');
Astro.cookies.delete('cookieName');

----------------------------------------

TITLE: Dynamic Tags in Astro
DESCRIPTION: Demonstrates using dynamic tag names and component references for flexible template rendering.

LANGUAGE: astro
CODE:
---
import MyComponent from "./MyComponent.astro";
const Element = 'div'
const Component = MyComponent;
---
<Element>Hello!</Element> <!-- renders as <div>Hello!</div> -->
<Component /> <!-- renders as <MyComponent /> -->

----------------------------------------

TITLE: Working with Cookies in Astro
DESCRIPTION: Demonstrates cookie manipulation using Astro.cookies with methods for getting, setting and deleting cookies

LANGUAGE: typescript
CODE:
Astro.cookies.set('cookieName', value, {
  maxAge: 3600,
  httpOnly: true,
  secure: true
});

const cookie = Astro.cookies.get('cookieName');
Astro.cookies.delete('cookieName');

----------------------------------------

TITLE: Fetching and Rendering Statamic Data with REST API in Astro
DESCRIPTION: This snippet demonstrates how to fetch data from Statamic's REST API and render it in an Astro component. It retrieves posts from a collection and displays their titles and content.

LANGUAGE: astro
CODE:
---
const res = await fetch("https://[YOUR-SITE]/api/collections/posts/entries?sort=-date")
const posts = await res.json()
---
<h1>Astro + Statamic 🚀</h1>
{
  posts.map((post) => (
      <h2 set:html={post.title} />
      <p set:html={post.content} />
  ))
}

----------------------------------------

TITLE: Migrating Next.js Pokédex to Astro
DESCRIPTION: A step-by-step example of converting a Next.js Pokédex component to Astro, demonstrating changes in syntax and data fetching.

LANGUAGE: astro
CODE:
---
import Layout from '../layouts/layout.astro';

const res = await fetch("https://pokeapi.co/api/v2/pokemon?limit=151");
const resJson = await res.json();
const pokemons = resJson.results.map(pokemon => {
    const name = pokemon.name;
    // https://pokeapi.co/api/v2/pokemon/1/
    const url = pokemon.url;
    const id = url.split("/")[url.split("/").length - 2];
    return {
        name,
        url,
        id
    }
});
---

<Layout>
  <ul class="plain-list pokeList">
      {pokemons.map((pokemon) => (
          <li class="pokemonListItem" key={pokemon.name}>
              <a class="pokemonContainer" href={`/pokemon/${pokemon.name}`}>
                  <p class="pokemonId">No. {pokemon.id}</p>
                  <img class="pokemonImage" src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${pokemon.id}.png`} alt={`${pokemon.name} picture`}/>
                  <h2 class="pokemonName">{pokemon.name}</h2>
              </a>
          </li>
      ))}
  </ul>
</Layout>

----------------------------------------

TITLE: Disabling Prefetch in Astro Configuration
DESCRIPTION: Demonstrates how to completely disable prefetching in the Astro configuration file when using View Transitions.

LANGUAGE: javascript
CODE:
import { defineConfig } from 'astro/config';

export default defineConfig({
  // Disable prefetch completely
  prefetch: false
});

----------------------------------------

TITLE: Configuring Environment Variables for Ghost API
DESCRIPTION: Sets up the Ghost Content API key in an environment file for secure access.

LANGUAGE: ini
CODE:
CONTENT_API_KEY=YOUR_API_KEY

----------------------------------------

TITLE: Querying Neon Database in Astro Component
DESCRIPTION: Demonstrates how to use the Neon client to query the database and display the current time in an Astro component.

LANGUAGE: astro
CODE:
---
import { sql } from '../lib/neon';

const response =  await  sql`SELECT NOW() as current_time`;
const currentTime = response[0].current_time;
---

<h1>Current Time</h1>
<p>The time is: {currentTime}</p>

----------------------------------------

TITLE: Using Cloudinary Video Player in Astro
DESCRIPTION: Example of using the CldVideoPlayer component to embed and optimize videos in an Astro component.

LANGUAGE: jsx
CODE:
---
import { CldVideoPlayer } from 'astro-cloudinary';
---
<CldVideoPlayer
  src="<Public ID>"
  width="<Width>"
  height="<Height>"
/>

----------------------------------------

TITLE: Remote Markdown Fetching Example
DESCRIPTION: Example of fetching and rendering remote Markdown content using the marked library in an Astro component.

LANGUAGE: astro
CODE:
---
import { marked } from 'marked';
const response = await fetch('https://raw.githubusercontent.com/wiki/adam-p/markdown-here/Markdown-Cheatsheet.md');
const markdown = await response.text();
const content = marked.parse(markdown);
---
<article set:html={content} />

----------------------------------------

TITLE: Dynamic Class List Using class:list
DESCRIPTION: Demonstrates using the class:list utility to conditionally combine CSS classes based on props or other logic.

LANGUAGE: astro
CODE:
---
const { isRed } = Astro.props;
---
<!-- If `isRed` is truthy, class will be "box red". -->
<!-- If `isRed` is falsy, class will be "box". -->
<div class:list={['box', { red: isRed }]}><slot /></div>

<style>
  .box { border: 1px solid blue; }
  .red { border-color: red; }
</style>

----------------------------------------

TITLE: Manually Upgrading Specific Astro Integrations
DESCRIPTION: These commands demonstrate how to manually upgrade specific Astro integrations (React and Tailwind in this example) using different package managers.

LANGUAGE: shell
CODE:
# Using npm
npm install @astrojs/react@latest @astrojs/tailwind@latest

# Using pnpm
pnpm add @astrojs/react@latest @astrojs/tailwind@latest

# Using yarn
yarn add @astrojs/react@latest @astrojs/tailwind@latest

----------------------------------------

TITLE: Importing and Using Public Assets in Astro
DESCRIPTION: Demonstrates how to reference files from the public/ directory in Astro components using direct URL paths.

LANGUAGE: astro
CODE:
// To link to /public/reports/annual/2024.pdf
Download the <a href="/reports/annual/2024.pdf">2024 annual statement as a PDF</a>.

// To display /public/assets/cats/ginger.jpg
<img src="/assets/cats/ginger.jpg" alt="An orange cat sleeping on a bed.">

----------------------------------------

TITLE: Configuring Astro Session Storage
DESCRIPTION: Demonstrates how to configure session storage for Astro.

LANGUAGE: javascript
CODE:
  {
    session: {
      // Required: the name of the Unstorage driver
      driver: 'redis',
      // The required options depend on the driver
      options: {
        url: process.env.REDIS_URL,
      },
    }
  }

----------------------------------------

TITLE: Configuring Astro Session Storage
DESCRIPTION: Demonstrates how to configure session storage for Astro.

LANGUAGE: javascript
CODE:
  {
    session: {
      // Required: the name of the Unstorage driver
      driver: 'redis',
      // The required options depend on the driver
      options: {
        url: process.env.REDIS_URL,
      },
    }
  }

----------------------------------------

TITLE: Creating a Dashboard Page with Firestore Data in Astro
DESCRIPTION: Fetches and displays a list of friends from Firestore, including links to view and edit each friend's details.

LANGUAGE: astro
CODE:
---
import { app } from "../firebase/server";
import { getFirestore } from "firebase-admin/firestore";
import Layout from "../layouts/Layout.astro";

interface Friend {
  id: string;
  name: string;
  age: number;
  isBestFriend: boolean;
}

const db = getFirestore(app);
const friendsRef = db.collection("friends");
const friendsSnapshot = await friendsRef.get();
const friends = friendsSnapshot.docs.map((doc) => ({
  id: doc.id,
  ...doc.data(),
})) as Friend[];
---

<Layout title="My friends">
  <h1>Friends</h1>
  <ul>
    {
      friends.map((friend) => (
        <li>
          <a href={`/friend/${friend.id}`}>{friend.name}</a>
          <span>({friend.age})</span>
          <strong>{friend.isBestFriend ? "Bestie" : "Friend"}</strong>
          <a href={`/edit/${friend.id}`}>Edit</a>
        </li>
      ))
    }
  </ul>
</Layout>

----------------------------------------

TITLE: Installing Preact Package with Yarn
DESCRIPTION: Command to install the Preact package using yarn if it's not automatically installed as a peer dependency.

LANGUAGE: shell
CODE:
yarn add preact

----------------------------------------

TITLE: Uploading Files with Cloudinary Node.js SDK in Astro
DESCRIPTION: Example of uploading a file using the Cloudinary Node.js SDK in an Astro component.

LANGUAGE: js
CODE:
await cloudinary.uploader.upload('./path/to/file');

----------------------------------------

TITLE: TypeScript Environment Variable Type Definitions
DESCRIPTION: Configuration for TypeScript IntelliSense support for custom environment variables by defining interfaces for ImportMetaEnv.

LANGUAGE: typescript
CODE:
interface ImportMetaEnv {
  readonly DB_PASSWORD: string;
  readonly PUBLIC_POKEAPI: string;
  // more env variables...
}

interface ImportMeta {
  readonly env: ImportMetaEnv;
}

----------------------------------------

TITLE: Accessing Middleware Data in Astro Components
DESCRIPTION: Shows how to access data stored in locals from an Astro component file.

LANGUAGE: astro
CODE:
---
const data = Astro.locals;
---
<h1>{data.title}</h1>
<p>This {data.property} is from middleware.</p>

----------------------------------------

TITLE: Implementing Article Detail Query
DESCRIPTION: GraphQL query to fetch detailed article content by slug, including text content and associated assets.

LANGUAGE: javascript
CODE:
const GetArticleBySlug = `
query ($slug: String) {
   Article (slug: $slug) {
     _id
     title
     content {
       __typename
       ... on Text {
         body
         text
       }
       ... on Assets {
         items {
           url
         }
       }
     }
   }
}`

export default GetArticleBySlug

----------------------------------------

TITLE: Configuring SSR Docker Setup for Astro
DESCRIPTION: Basic Dockerfile configuration for server-side rendering Astro applications using Node.js on port 4321. Requires the Node adapter to be installed.

LANGUAGE: docker
CODE:
FROM node:lts AS runtime
WORKDIR /app

COPY . .

RUN npm install
RUN npm run build

ENV HOST=0.0.0.0
ENV PORT=4321
EXPOSE 4321
CMD node ./dist/server/entry.mjs

----------------------------------------

TITLE: Building and Pushing Docker Images for Google Cloud Deployment
DESCRIPTION: This snippet demonstrates how to build a Docker image locally, tag it, and push it to Google Cloud's Artifact Registry. It includes placeholders for project-specific values that need to be replaced.

LANGUAGE: bash
CODE:
# build your container
docker build .

docker tag SOURCE_IMAGE HOSTNAME/PROJECT-ID/TARGET-IMAGE:TAG

# Push your image to a registry
docker push HOSTNAME/PROJECT-ID/IMAGE:TAG

----------------------------------------

TITLE: Loading Environment Variables in Config
DESCRIPTION: Example of manually loading environment variables in Astro configuration using Vite's loadEnv helper.

LANGUAGE: javascript
CODE:
import { loadEnv } from "vite";

const { SECRET_PASSWORD } = loadEnv(process.env.NODE_ENV, process.cwd(), "");

----------------------------------------

TITLE: Using Astro Box Component with Checklist
DESCRIPTION: This snippet demonstrates the usage of the Box and Checklist components in the tutorial. It creates a checklist within a box, prompting the user to confirm their readiness to build Astro components.

LANGUAGE: astro
CODE:
<Box icon="check-list">
## Checklist

<Checklist>
- [ ] I am ready to build some Astro components!
</Checklist>
</Box>

----------------------------------------

TITLE: Configuring Astro to Use Vue Integration
DESCRIPTION: JavaScript code snippet showing how to configure the Vue integration in the Astro configuration file.

LANGUAGE: javascript
CODE:
import { defineConfig } from 'astro/config';
import vue from '@astrojs/vue';

export default defineConfig({
  // ...
  integrations: [vue()],
});

----------------------------------------

TITLE: Configuring Cloudinary in Astro using Node.js SDK
DESCRIPTION: Example of configuring a Cloudinary instance in an Astro component using the Node.js SDK.

LANGUAGE: js
CODE:
---
import { v2 as cloudinary } from "cloudinary";

cloudinary.config({
  cloud_name: import.meta.env.PUBLIC_CLOUDINARY_CLOUD_NAME,
  api_key: import.meta.env.PUBLIC_CLOUDINARY_API_KEY,
  api_secret: import.meta.env.CLOUDINARY_API_SECRET,
});
---

----------------------------------------

TITLE: Configuring Astro Markdown Syntax Highlighting
DESCRIPTION: Shows how to configure syntax highlighting for Markdown code blocks in Astro.

LANGUAGE: javascript
CODE:
{
  markdown: {
    // Example: Switch to use prism for syntax highlighting in Markdown
    syntaxHighlight: 'prism',
  }
}

----------------------------------------

TITLE: Installing Surge CLI Globally
DESCRIPTION: This command installs the Surge CLI globally on your system, which is a prerequisite for deploying to Surge.

LANGUAGE: shell
CODE:
npm install -g surge

----------------------------------------

TITLE: Creating Strapi API Wrapper Function
DESCRIPTION: Implements a reusable function to fetch data from the Strapi API, handling various parameters and response structures.

LANGUAGE: typescript
CODE:
interface Props {
  endpoint: string;
  query?: Record<string, string>;
  wrappedByKey?: string;
  wrappedByList?: boolean;
}

export default async function fetchApi<T>({
  endpoint,
  query,
  wrappedByKey,
  wrappedByList,
}: Props): Promise<T> {
  if (endpoint.startsWith('/')) {
    endpoint = endpoint.slice(1);
  }

  const url = new URL(`${import.meta.env.STRAPI_URL}/api/${endpoint}`);

  if (query) {
    Object.entries(query).forEach(([key, value]) => {
      url.searchParams.append(key, value);
    });
  }
  const res = await fetch(url.toString());
  let data = await res.json();

  if (wrappedByKey) {
    data = data[wrappedByKey];
  }

  if (wrappedByList) {
    data = data[0];
  }

  return data as T;
}

----------------------------------------

TITLE: Deploying Astro Site to Fly.io using CLI
DESCRIPTION: This command launches the Fly.io deployment process for an Astro project. It automatically detects Astro, configures settings, builds the image, and deploys to the Fly.io platform.

LANGUAGE: bash
CODE:
fly launch

----------------------------------------

TITLE: TypeScript Environment Variable Type Definition
DESCRIPTION: Adds TypeScript type definitions for environment variables to enable IntelliSense support.

LANGUAGE: typescript
CODE:
interface ImportMetaEnv {
  readonly CONTENT_API_KEY: string;
}

----------------------------------------

TITLE: Creating Localized Links in Astro
DESCRIPTION: Use the getRelativeLocaleUrl() helper function to generate localized links in Astro components.

LANGUAGE: astro
CODE:
---
import { getRelativeLocaleUrl } from 'astro:i18n';

// defaultLocale es "es"
const aboutURL = getRelativeLocaleUrl("es", "about");
---

<a href="/get-started/">¡Vamos!</a>
<a href={getRelativeLocaleUrl('es', 'blog')}>Blog</a>
<a href={aboutURL}>Acerca</a>

----------------------------------------

TITLE: Configuring Node.js Server Start Script
DESCRIPTION: Package.json configuration for running an on-demand Node.js Astro application on Clever Cloud port 8080.

LANGUAGE: json
CODE:
"scripts": {
  "start": "node ./dist/server/entry.mjs --host 0.0.0.0 --port 8080",
}

----------------------------------------

TITLE: Implementing Multiple HTTP Methods in Astro Endpoints
DESCRIPTION: This snippet demonstrates how to handle different HTTP methods (GET, POST, DELETE) in Astro endpoints, including a catchall method for unspecified requests.

LANGUAGE: typescript
CODE:
export const GET: APIRoute = ({ params, request }) => {
  return new Response(JSON.stringify({
      message: "Isso foi um GET!"
    })
  )
}

export const POST: APIRoute = ({ request }) => {
  return new Response(JSON.stringify({
      message: "Isso foi um POST!"
    })
  )
}

export const DELETE: APIRoute = ({ request }) => {
  return new Response(JSON.stringify({
      message: "Isso foi um DELETE!"
    })
  )
}

export const ALL: APIRoute = ({ request }) => {
  return new Response(JSON.stringify({
      message: `Isso foi um ${request.method}!`
    })
  )
}

----------------------------------------

TITLE: Fetching Blog Posts from Cosmic in JavaScript
DESCRIPTION: JavaScript function to fetch blog post data from Cosmic using the SDK and environment variables.

LANGUAGE: javascript
CODE:
import { createBucketClient } from '@cosmicjs/sdk'

const cosmic = createBucketClient({
  bucketSlug: import.meta.env.PUBLIC_COSMIC_BUCKET_SLUG,
  readKey: import.meta.env.PUBLIC_COSMIC_READ_KEY
})

export async function getAllPosts() {
  const data = await cosmic.objects
    .find({
      type: 'posts'
    })
    .props('title,slug,metadata,created_at')
  return data.objects
}

----------------------------------------

TITLE: Initializing Fleek Project
DESCRIPTION: This command initializes a Fleek project, generating a configuration file for deployment.

LANGUAGE: bash
CODE:
fleek sites init

----------------------------------------

TITLE: Typing Xata Environment Variables in TypeScript
DESCRIPTION: Defines TypeScript types for Xata environment variables in the src/env.d.ts file. This provides type safety and IntelliSense for Xata-related environment variables in the project.

LANGUAGE: ts
CODE:
interface ImportMetaEnv {
  readonly XATA_API_KEY: string;
  readonly XATA_BRANCH?: string;
}

interface ImportMeta {
  readonly env: ImportMetaEnv;
}

----------------------------------------

TITLE: Configuring Astro for Zeabur SSR
DESCRIPTION: Configuration setup in astro.config.mjs to enable server-side rendering with the Zeabur adapter.

LANGUAGE: javascript
CODE:
import { defineConfig } from 'astro/config';
import zeabur from '@zeabur/astro-adapter/serverless';

export default defineConfig({
  output: 'server',
  adapter: zeabur(),
});

----------------------------------------

TITLE: Astro Blog Index Page
DESCRIPTION: Creates an Astro page that fetches and displays a list of blog posts from PayloadCMS, including titles with links to individual post pages.

LANGUAGE: astro
CODE:
---
import HomeLayout from "../layouts/HomeLayout.astro";

const res = await fetch("http://localhost:5000/api/posts") // http://localhost:4321/api/posts by default
const posts = await res.json()
---

<HomeLayout title='Astro Blog'>
	<h1>Astro + PayloadCMS 🚀</h1>
	<h2>Blog posts list:</h2>
	<ul>
		{
			posts.docs.map((post) =>(
				<li>
					<a href={`posts/${post.slug}`} set:html={post.title} />
				</li>
			))
		}
	</ul>
</HomeLayout>

----------------------------------------

TITLE: Configuring AWS Amplify Build Settings for NPM
DESCRIPTION: YAML configuration for AWS Amplify build settings using NPM package manager. It defines the build process, artifacts, and caching for an Astro project.

LANGUAGE: yaml
CODE:
version: 1
frontend:
  phases:
    preBuild:
      commands:
        - npm ci
    build:
      commands:
        - npm run build
  artifacts:
    baseDirectory: /dist
    files:
      - '**/*'
  cache:
    paths:
      - node_modules/**/*

----------------------------------------

TITLE: Configuring Turso Environment Variables
DESCRIPTION: Example of setting up the required environment variables for Turso in the .env file.

LANGUAGE: ini
CODE:
TURSO_DATABASE_URL=libsql://...
TURSO_AUTH_TOKEN=

----------------------------------------

TITLE: Using Frontmatter in MDX
DESCRIPTION: Example of using frontmatter variables in an MDX file.

LANGUAGE: mdx
CODE:
---
title: 'My first MDX post'
author: 'Houston'
---

# {frontmatter.title}

Written by: {frontmatter.author}

----------------------------------------

TITLE: Importing JavaScript Modules in Astro
DESCRIPTION: Shows how to import JavaScript modules using ESM syntax in Astro components.

LANGUAGE: javascript
CODE:
import { getUser } from './user.js';

----------------------------------------

TITLE: Configuring Render Build Settings
DESCRIPTION: Essential build configuration parameters for deploying an Astro site to Render.com. Specifies the build command and publish directory for both static and server-side rendered sites.

LANGUAGE: plaintext
CODE:
Build Command: npm run build
Publish Directory: dist (for static sites)
Publish Directory: dist/client (for sites with on-demand rendering)

----------------------------------------

TITLE: Installing and Using Wrangler CLI for Cloudflare Pages Deployment
DESCRIPTION: This snippet demonstrates how to install Wrangler CLI, authenticate with Cloudflare, build the Astro project, and deploy it to Cloudflare Pages using command-line commands.

LANGUAGE: bash
CODE:
# Install Wrangler CLI
npm install -g wrangler
# Login to Cloudflare account from CLI
wrangler login
# Run your build command
npm run build
# Create new deployment
npx wrangler pages deploy dist

----------------------------------------

TITLE: Implementing Dynamic Post Pages
DESCRIPTION: Creates dynamic routes for individual blog posts using Ghost content API data.

LANGUAGE: astro
CODE:
---
import { ghostClient } from '../../lib/ghost';
export async function getStaticPaths() {
    const posts = await ghostClient.posts
        .browse({
            limit: 'all',
        })
        .catch((err) => {
            console.error(err);
        });
    return posts.map((post) => {
        return {
            params: {
                slug: post.slug,
            },
            props: {
                post: post,
            },
        };
    });
}
const { post } = Astro.props;
---
<!DOCTYPE html>
<html lang="en">
    <head>
        <title>{post.title}</title>
    </head>
    <body>
        <img src={post.feature_image} alt={post.title} />
        <h1>{post.title}</h1>
        <p>{post.reading_time} min read</p>
        <Fragment set:html={post.html} />
    </body>
</html>

----------------------------------------

TITLE: Using the ViewTransitions Component for Page Transitions
DESCRIPTION: Demonstrates how to add view transitions to pages using the ViewTransitions component.

LANGUAGE: astro
CODE:
---
import { ViewTransitions } from 'astro:transitions';
---
<html lang="es">
  <head>
    <title>Mi página de inicio</title>
    <ViewTransitions />
  </head>
  <body>
    <h1>¡Bienvenido a mi página web!</h1>
  </body>
</html>

----------------------------------------

TITLE: Configuring PayloadCMS Collection in TypeScript
DESCRIPTION: Defines a PayloadCMS collection configuration for blog posts with title, content, and slug fields. This setup creates the basic structure for content management in PayloadCMS.

LANGUAGE: typescript
CODE:
import { CollectionConfig } from "payload/types";

const Posts: CollectionConfig = {
  slug: "posts",
  admin: {
    useAsTitle: "title",
  },
  access: {
    read: () => true,
  },

  fields: [
    {
      name: "title",
      type: "text",
      required: true,
    },
    {
      name: "content",
      type: "text",
      required: true,
    },
    {
      name: "slug",
      type: "text",
      required: true,
    },
  ],
};

export default Posts;

----------------------------------------

TITLE: Installing Edgio CLI
DESCRIPTION: Command to globally install the Edgio CLI tool using npm package manager.

LANGUAGE: bash
CODE:
npm install -g @edgio/cli

----------------------------------------

TITLE: Installing Ghost API Dependencies
DESCRIPTION: Commands for installing the Ghost content API client and TypeScript type definitions using different package managers.

LANGUAGE: shell
CODE:
npm install @tryghost/content-api
npm install --save @types/tryghost__content-api

----------------------------------------

TITLE: Building Astro Project for Production with pnpm
DESCRIPTION: Command to build a production-ready version of your Astro site using pnpm, generating optimized files in a separate folder.

LANGUAGE: shell
CODE:
pnpm build

----------------------------------------

TITLE: Dynamic Blog Post Page Generation
DESCRIPTION: Creates dynamic routes for individual blog posts using Builder.io content and Astro's getStaticPaths.

LANGUAGE: astro
CODE:
---
export async function getStaticPaths() {
  const builderModel = import.meta.env.BUILDER_BLOGPOST_MODEL;
  const builderAPIpublicKey = import.meta.env.BUILDER_API_PUBLIC_KEY;
  const { results: posts } = await fetch(
    `https://cdn.builder.io/api/v3/content/${builderModel}?${new URLSearchParams(
      {
        apiKey: builderAPIpublicKey,
        fields: ["data.slug", "data.title"].join(","),
        cachebust: "true",
      }
    ).toString()}`
  )
    .then((res) => res.json())
    .catch
    ();
  return posts.map(({ data: { slug, title } }) => ({
    params: { slug },
    props: { title },
  }))
}
const { slug } = Astro.params;
const { title } = Astro.props;
const builderModel = import.meta.env.BUILDER_BLOGPOST_MODEL;
const builderAPIpublicKey = import.meta.env.BUILDER_API_PUBLIC_KEY;
const encodedUrl = encodeURIComponent("moot");
const { html: postHTML } = await fetch(
  `https://cdn.builder.io/api/v1/qwik/${builderModel}?${new URLSearchParams({
    apiKey: builderAPIpublicKey,
    url: encodedUrl,
    "query.data.slug": slug,
    cachebust: "true",
  }).toString()}`
)
  .then((res) => res.json())
  .catch();
---
<html lang="en">
  <head>
    <title>{title}</title>
  </head>
  <body>
    <header>This is your header</header>
    <article>
      <Fragment set:html={postHTML} />
    </article>
    <footer>This is your footer</footer>
  </body>
</html>

----------------------------------------

TITLE: Using getPathByLocale and getLocaleByPath in Astro
DESCRIPTION: This example demonstrates how to use getPathByLocale and getLocaleByPath functions to work with custom locale paths.

LANGUAGE: astro
CODE:
---
import { getPathByLocale, getLocaleByPath } from 'astro:i18n';

getPathByLocale("fr"); // returns "french"
getPathByLocale("fr-CA"); // returns "french"

getLocaleByPath("french"); // returns "fr" because that's the first code configured
---

----------------------------------------

TITLE: Customizing Prefetch with View Transitions
DESCRIPTION: Shows how to customize the prefetch configuration when using View Transitions, enabling prefetch but only for links with the data-astro-prefetch attribute.

LANGUAGE: javascript
CODE:
import { defineConfig } from 'astro/config';

export default defineConfig({
  // Keep prefetch, but only prefetch for links with `data-astro-prefetch`
  prefetch: {
    prefetchAll: false
  }
});

----------------------------------------

TITLE: Creating Basic HTML Form in Astro
DESCRIPTION: This snippet shows how to create a basic HTML form for user registration in an Astro page. It includes input fields for username, email, and password.

LANGUAGE: astro
CODE:
<h1>Register</h1>
<form>
  <label>
    Username:
    <input type="text" name="username" />
  </label>
  <label>
    Email:
    <input type="email" name="email" />
  </label>
  <label>
    Password:
    <input type="password" name="password" />
  </label>
  <button>Submit</button>
</form>

----------------------------------------

TITLE: Using SQL Placeholders with Turso in Astro
DESCRIPTION: Demonstrates how to use SQL placeholders to pass variables when querying the Turso database in an Astro component.

LANGUAGE: astro
CODE:
---
import { turso } from '../turso'

const { slug } = Astro.params

const { rows } = await turso.execute({
  sql: 'SELECT * FROM posts WHERE slug = ?',
  args: [slug!]
})
---

<h1>{rows[0].title}</h1>

----------------------------------------

TITLE: Fetching and Rendering ButterCMS Collection Data in Astro
DESCRIPTION: Retrieve a collection from ButterCMS and render its contents in an Astro component. This example fetches shop items and displays their name, price, and description.

LANGUAGE: astro
CODE:
---
import { butterClient } from "../lib/buttercms";
const response = await butterClient.content.retrieve(["shopitem"]);

interface ShopItem {
	name: string,
	price: number,
	description: string,
}

const items = response.data.data.shopitem as ShopItem[];
---
<body>
	{items.map(item => <div>
		<h2>{item.name} - ${item.price}</h2>
		<p set:html={item.description}></p>
	</div>)}
</body>

----------------------------------------

TITLE: Importing JSON Data in Astro
DESCRIPTION: Demonstrates how to import JSON files as objects in Astro components.

LANGUAGE: javascript
CODE:
// Load the JSON object via the default export
import json from './data.json';

----------------------------------------

TITLE: Installing Dependencies and Building Astro Site with Node.js
DESCRIPTION: Basic Node.js commands to install project dependencies and build the Astro site for deployment. These commands should be added to the Node.js action in Buddy's pipeline.

LANGUAGE: bash
CODE:
npm install
npm run build

----------------------------------------

TITLE: Configuring SST Bucket and Astro Integration
DESCRIPTION: Configuration setup for SST showing how to create a public bucket and link it to an Astro application. This allows the Astro site to interact with AWS S3 storage.

LANGUAGE: typescript
CODE:
const bucket = new sst.aws.Bucket("MyBucket", {
  access: "public",
});
new sst.aws.Astro("MyWeb", {
  link: [bucket],
});

----------------------------------------

TITLE: Creating Basic HTML Form in Astro
DESCRIPTION: This snippet shows how to create a basic HTML form for user registration in an Astro page. It includes input fields for username, email, and password.

LANGUAGE: astro
CODE:
<h1>Register</h1>
<form>
  <label>
    Username:
    <input type="text" name="username" />
  </label>
  <label>
    Email:
    <input type="email" name="email" />
  </label>
  <label>
    Password:
    <input type="password" name="password" />
  </label>
  <button>Submit</button>
</form>

----------------------------------------

TITLE: Converting Nuxt Data Fetching to Astro
DESCRIPTION: Example of converting Nuxt's asyncData method to Astro's server-side data fetching within the component's frontmatter.

LANGUAGE: javascript
CODE:
{
  // ...
  async asyncData() {
    const res = await fetch("https://pokeapi.co/api/v2/pokemon?limit=151")
    const resJson = await res.json();
    const pokemons = resJson.results;
    return {
      pokemons,
    }
  },
}

LANGUAGE: astro
CODE:
---
const res = await fetch("https://pokeapi.co/api/v2/pokemon?limit=151")
const resJson = await res.json();
const pokemons = resJson.results;
---

<!-- Your template here -->

----------------------------------------

TITLE: Configuring Custom Fonts in Tailwind
DESCRIPTION: CSS configuration for adding custom fonts to Tailwind's font stack through global styles.

LANGUAGE: css
CODE:
@import 'tailwindcss';

@theme {
  --font-sans: 'Inter', 'sans-serif'; 
}

----------------------------------------

TITLE: Configuring Neon Database Branches in Astro Environment
DESCRIPTION: Sets up separate environment variables for development and production database branches in Neon for an Astro project.

LANGUAGE: ini
CODE:
NEON_DATABASE_URL=your_development_branch_url

LANGUAGE: ini
CODE:
NEON_DATABASE_URL=your_production_branch_url

----------------------------------------

TITLE: Installing Dependencies and Building Astro Site with Node.js
DESCRIPTION: Basic Node.js commands to install project dependencies and build the Astro site for deployment. These commands should be added to the Node.js action in Buddy's pipeline.

LANGUAGE: bash
CODE:
npm install
npm run build

----------------------------------------

TITLE: Creating POST Endpoint for reCAPTCHA Verification in Astro
DESCRIPTION: This code creates a POST endpoint that accepts reCAPTCHA data, verifies it with the reCAPTCHA API, and returns the response. It securely handles the secret key and can use environment variables.

LANGUAGE: javascript
CODE:
export async function POST({ request }) {
  const data = await request.json();

  const recaptchaURL = 'https://www.google.com/recaptcha/api/siteverify';
  const requestHeaders = {
    'Content-Type': 'application/x-www-form-urlencoded'
  };
  const requestBody = new URLSearchParams({
    secret: "YOUR_SITE_SECRET_KEY",   // This can be an environment variable
    response: data.recaptcha          // The token passed in from the client
  });

  const response = await fetch(recaptchaURL, {
    method: "POST",
    headers: requestHeaders,
    body: requestBody.toString()
  });

  const responseData = await response.json();

  return new Response(JSON.stringify(responseData), { status: 200 });
}

----------------------------------------

TITLE: Implementing AddToCartForm Component
DESCRIPTION: Shows how to use the addCartItem function in an AddToCartForm component across different frameworks.

LANGUAGE: jsx
CODE:
import { addCartItem, isCartOpen } from '../cartStore';

export default function AddToCartForm({ children }) {
  const hardcodedItemInfo = {
    id: 'astronaut-figurine',
    name: 'Astronaut Figurine',
    imageSrc: '/images/astronaut-figurine.png',
  }

  function addToCart(e) {
    e.preventDefault();
    isCartOpen.set(true);
    addCartItem(hardcodedItemInfo);
  }

  return (
    <form onSubmit={addToCart}>
      {children}
    </form>
  )
}

----------------------------------------

TITLE: Installing Cloudflare Adapter with NPM
DESCRIPTION: Command to install the Cloudflare adapter using npm package manager.

LANGUAGE: sh
CODE:
npx astro add cloudflare

----------------------------------------

TITLE: Fetching and Rendering ButterCMS Page Data in Astro
DESCRIPTION: Retrieve a single page from ButterCMS and render its fields in an Astro component. This example fetches a simple page and displays its SEO title, headline, and hero image.

LANGUAGE: astro
CODE:
---
import { butterClient } from "../lib/buttercms";
const response = await butterClient.page.retrieve("*", "simple-page");
const pageData = response.data.data;

interface Fields {
  seo_title: string,
  headline: string,
  hero_image: string,
}

const fields = pageData.fields as Fields;
---
<html>
  <title>{fields.seo_title}</title>
  <body>
    <h1>{fields.headline}</h1>
    <img src={fields.hero_image} />
  </body>
</html>

----------------------------------------

TITLE: Installing Svelte Integration with NPM
DESCRIPTION: Command to install the @astrojs/svelte package using npm package manager.

LANGUAGE: sh
CODE:
npx astro add svelte

----------------------------------------

TITLE: Using Data Props with getStaticPaths
DESCRIPTION: Example demonstrating how to pass additional data to generated pages using props in getStaticPaths.

LANGUAGE: astro
CODE:
---
export async function getStaticPaths() {
  const data = await fetch('...').then(response => response.json());

  return data.map((post) => {
    return {
      params: { id: post.id },
      props: { post },
    };
  });
}

const { id } = Astro.params;
const { post } = Astro.props;
---
<h1>{id}: {post.name}</h1>

----------------------------------------

TITLE: Defining Xata Database URL in .xatarc
DESCRIPTION: Specifies the Xata database URL in the .xatarc configuration file. This URL is used to connect to the specific Xata database for the project.

LANGUAGE: ini
CODE:
{
  "databaseUrl": "https://your-database-url"
}

----------------------------------------

TITLE: Manual Vercel Adapter Installation
DESCRIPTION: Commands for manually installing the @astrojs/vercel adapter using different package managers.

LANGUAGE: shell
CODE:
npm install @astrojs/vercel

LANGUAGE: shell
CODE:
pnpm add @astrojs/vercel

LANGUAGE: shell
CODE:
yarn add @astrojs/vercel

----------------------------------------

TITLE: Initializing Contentful Client in Astro
DESCRIPTION: Creates a Contentful client instance using environment variables and exports it for use in Astro components.

LANGUAGE: typescript
CODE:
import * as contentful from "contentful";

export const contentfulClient = contentful.createClient({
  space: import.meta.env.CONTENTFUL_SPACE_ID,
  accessToken: import.meta.env.DEV
    ? import.meta.env.CONTENTFUL_PREVIEW_TOKEN
    : import.meta.env.CONTENTFUL_DELIVERY_TOKEN,
  host: import.meta.env.DEV ? "preview.contentful.com" : "cdn.contentful.com",
});

----------------------------------------

TITLE: Building Astro Site Locally
DESCRIPTION: Commands for building an Astro site locally using different package managers. The build output is placed in the dist/ directory by default.

LANGUAGE: shell
CODE:
npm run build

LANGUAGE: shell
CODE:
pnpm run build

LANGUAGE: shell
CODE:
yarn run build

----------------------------------------

TITLE: Picture Component for Responsive Images
DESCRIPTION: Demonstrates using the Picture component to create responsive images with multiple formats.

LANGUAGE: astro
CODE:
---
import { Picture } from 'astro:assets';
import myImage from '../assets/my_image.png';
---

<Picture src={myImage} formats={['avif', 'webp']} alt="A description of my image." />

----------------------------------------

TITLE: Creating a Map Store for Cart Items
DESCRIPTION: Defines a map store to manage cart items and provides a function to add items to the cart.

LANGUAGE: typescript
CODE:
import { atom, map } from 'nanostores';

export const isCartOpen = atom(false);

export type CartItem = {
  id: string;
  name: string;
  imageSrc: string;
  quantity: number;
}

export const cartItems = map<Record<string, CartItem>>({});

type ItemDisplayInfo = Pick<CartItem, 'id' | 'name' | 'imageSrc'>;
export function addCartItem({ id, name, imageSrc }: ItemDisplayInfo) {
  const existingEntry = cartItems.get()[id];
  if (existingEntry) {
    cartItems.setKey(id, {
      ...existingEntry,
      quantity: existingEntry.quantity + 1,
    });
  } else {
    cartItems.setKey(
      id,
      { id, name, imageSrc, quantity: 1 }
    );
  }
}

----------------------------------------

TITLE: Picture Component for Responsive Images
DESCRIPTION: Demonstrates using the Picture component to create responsive images with multiple formats.

LANGUAGE: astro
CODE:
---
import { Picture } from 'astro:assets';
import myImage from '../assets/my_image.png';
---

<Picture src={myImage} formats={['avif', 'webp']} alt="A description of my image." />

----------------------------------------

TITLE: Picture Component for Responsive Images
DESCRIPTION: Demonstrates using the Picture component to create responsive images with multiple formats.

LANGUAGE: astro
CODE:
---
import { Picture } from 'astro:assets';
import myImage from '../assets/my_image.png';
---

<Picture src={myImage} formats={['avif', 'webp']} alt="A description of my image." />

----------------------------------------

TITLE: Importing Warning Component in Astro
DESCRIPTION: Imports a warning component that indicates this is an auto-generated file that shouldn't be edited directly.

LANGUAGE: astro
CODE:
import DontEditWarning from '~/components/DontEditWarning.astro'

<DontEditWarning />

----------------------------------------

TITLE: Creating GET API Endpoint in TypeScript
DESCRIPTION: Implements a simple GET endpoint that returns a JSON response containing a greeting message. The endpoint is defined using Astro's APIRoute type.

LANGUAGE: typescript
CODE:
import type { APIRoute } from 'astro'

export const GET: APIRoute = () => {
  return new Response(
    JSON.stringify({
      greeting: 'Hola',
    }),
  )
}

----------------------------------------

TITLE: Installing Node Adapter with Package Managers
DESCRIPTION: Commands for installing @astrojs/node adapter using different package managers (npm, pnpm, yarn).

LANGUAGE: sh
CODE:
npx astro add node

LANGUAGE: sh
CODE:
pnpm astro add node

LANGUAGE: sh
CODE:
yarn astro add node

----------------------------------------

TITLE: Fetching and Rendering Dynamic Modular Content from DatoCMS
DESCRIPTION: Query and render dynamic modular content blocks (text and image) from DatoCMS on the home page.

LANGUAGE: astro
CODE:
---
import Image from '../components/Image.astro';
import Text from '../components/Text.astro';

const response = await fetch('https://graphql.datocms.com/', {
	method: 'POST',
	headers: {
		'Content-Type': 'application/json',
		Accept: 'application/json',
		Authorization: `Bearer ${import.meta.env.DATOCMS_API_KEY}`,
	},
	body: JSON.stringify({
		query: `query Homepage {
          home {
            title
            content {
              ... on ImageRecord {
                _modelApiKey
               image{
                url
               }
              }
              ... on TextRecord {
                _modelApiKey
                text(markdown: true)
              }
            }
          }
        }
      `,
	}),
});

const json = await response.json();
const data = json.data.home;
---

<h1>{data.title}</h1>
{
  data.content.map((item: any) => {
    switch (item._modelApiKey) {
      case 'image':
        return <Image item={item} />;
      case 'text':
        return <Text item={item} />;
      default:
        return null;
    }
  })
}

----------------------------------------

TITLE: Manually Installing @astrojs/vue Package with Yarn
DESCRIPTION: Command to manually install the @astrojs/vue package using yarn.

LANGUAGE: sh
CODE:
yarn add @astrojs/vue

----------------------------------------

TITLE: Implementing getStaticPaths for Dynamic Routes
DESCRIPTION: Example showing how to use getStaticPaths to generate multiple static routes from a single component with parameters.

LANGUAGE: astro
CODE:
---
export async function getStaticPaths() {
  return [
    { params: { post: '1' } },
    { params: { post: '2' } },
  ];
}
---
<!-- Your HTML template here. -->

----------------------------------------

TITLE: Initial Astro Home Page Template
DESCRIPTION: The default template for an Astro home page (index.astro) showing the basic HTML structure with head and body sections.

LANGUAGE: astro
CODE:
---
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} >
    <title>Astro</title>
  </head>
  <body>
    <h1>Astro</h1>
  </body>
</html>

----------------------------------------

TITLE: RSS Feed Generation with Content Collections
DESCRIPTION: Updates the RSS feed generation to use content collections instead of file-based routing, mapping post data to RSS items.

LANGUAGE: javascript
CODE:
import rss from '@astrojs/rss';
import { getCollection } from 'astro:content';

export async function GET(context) {
  const posts = await getCollection("blog");
  return rss({
    title: 'Astro Learner | Blog',
    description: 'My journey learning Astro',
    site: context.site,
    items: posts.map((post) => ({
      title: post.data.title,
      pubDate: post.data.pubDate,
      description: post.data.description,
      link: `/posts/${post.id}/`,
    })),
    customData: `<language>en-us</language>`,
  })
}

----------------------------------------

TITLE: Configuring GitHub Actions Workflow for AWS Deployment
DESCRIPTION: YAML configuration for a GitHub Actions workflow that deploys an Astro site to AWS S3 and invalidates CloudFront distribution on push to the main branch.

LANGUAGE: yaml
CODE:
name: Deploy Website

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Install modules
        run: npm ci
      - name: Build application
        run: npm run build
      - name: Deploy to S3
        run: aws s3 sync --delete ./dist/ s3://${{ secrets.BUCKET_ID }}
      - name: Create CloudFront invalidation
        run: aws cloudfront create-invalidation --distribution-id ${{ secrets.DISTRIBUTION_ID }} --paths "/*"

----------------------------------------

TITLE: Dynamic Blog Post Routes with Umbraco
DESCRIPTION: Dynamic routing component that generates individual blog post pages from Umbraco CMS content using getStaticPaths.

LANGUAGE: astro
CODE:
---
import Layout from '../layouts/Layout.astro';

export async function getStaticPaths() {
    let data = await fetch("http://localhost/umbraco/delivery/api/v2/content?filter=contentType:article");
    let articles = await data.json();
    
    return articles.items.map((article: any) => ({
        params: { slug: article.route.path },
        props: { article: article },
    }));
}

const { article } = Astro.props;
---

<Layout>
  <h1>{article.properties.title}</h1>
  <p>{article.properties.articleDate}</p>
  <div set:html={article.properties.content?.markup}></div>
</Layout>

----------------------------------------

TITLE: Initializing Turso Client in Astro
DESCRIPTION: TypeScript code to create a Turso client instance using the environment variables.

LANGUAGE: typescript
CODE:
import { createClient } from "@libsql/client/web";

export const turso = createClient({
  url: import.meta.env.TURSO_DATABASE_URL,
  authToken: import.meta.env.TURSO_AUTH_TOKEN,
});

----------------------------------------

TITLE: Logging into Fleek CLI
DESCRIPTION: This command logs the user into their Fleek account via the terminal.

LANGUAGE: bash
CODE:
fleek login

----------------------------------------

TITLE: Implementing Reading Time Display in Content Collections
DESCRIPTION: Example of how to display reading time in Astro templates using content collections

LANGUAGE: astro
CODE:
---
import { getCollection, render } from 'astro:content';

export async function getStaticPaths() {
  const blog = await getCollection('blog');
  return blog.map(entry => ({
    params: { slug: entry.id },
    props: { entry },
  }));
}

const { entry } = Astro.props;
const { Content, remarkPluginFrontmatter } = await render(entry);
---

<html>
  <head>...</head>
  <body>
    ...
    <p>{remarkPluginFrontmatter.minutesRead}</p>
    ...
  </body>
</html>

----------------------------------------

TITLE: Uploading Built Files to S3 Bucket using AWS CLI
DESCRIPTION: Bash command to upload the built files from the 'dist' directory to an S3 bucket using the AWS CLI.

LANGUAGE: bash
CODE:
aws s3 cp dist/ s3://<BUCKET_NAME>/ --recursive

----------------------------------------

TITLE: Defining Database Tables in Astro DB
DESCRIPTION: Configure database tables in the db/config.ts file using defineDb and defineTable utilities.

LANGUAGE: typescript
CODE:
import { defineDb, defineTable, column } from 'astro:db';

const Comment = defineTable({
  columns: {
    author: column.text(),
    body: column.text(),
  }
})

export default defineDb({
  tables: { Comment },
})

----------------------------------------

TITLE: Defining Database Tables in Astro DB
DESCRIPTION: Configure database tables in the db/config.ts file using defineDb and defineTable utilities.

LANGUAGE: typescript
CODE:
import { defineDb, defineTable, column } from 'astro:db';

const Comment = defineTable({
  columns: {
    author: column.text(),
    body: column.text(),
  }
})

export default defineDb({
  tables: { Comment },
})

----------------------------------------

TITLE: Implementing Firestore CRUD Operations in Astro
DESCRIPTION: Creates server endpoints for interacting with a Firestore database, including creating, updating, and deleting documents.

LANGUAGE: typescript
CODE:
import type { APIRoute } from "astro";
import { app } from "../../../firebase/server";
import { getFirestore } from "firebase-admin/firestore";

export const POST: APIRoute = async ({ request, redirect }) => {
  const formData = await request.formData();
  const name = formData.get("name")?.toString();
  const age = formData.get("age")?.toString();
  const isBestFriend = formData.get("isBestFriend") === "on";

  if (!name || !age) {
    return new Response("Missing required fields", {
      status: 400,
    });
  }
  try {
    const db = getFirestore(app);
    const friendsRef = db.collection("friends");
    await friendsRef.add({
      name,
      age: parseInt(age),
      isBestFriend,
    });
  } catch (error) {
    return new Response("Something went wrong", {
      status: 500,
    });
  }
  return redirect("/dashboard");
};

----------------------------------------

TITLE: Installing Netlify Adapter via Package Managers
DESCRIPTION: Commands to install the @astrojs/netlify adapter using different package managers (npm, pnpm, yarn).

LANGUAGE: shell
CODE:
npx astro add netlify

LANGUAGE: shell
CODE:
pnpm astro add netlify

LANGUAGE: shell
CODE:
yarn astro add netlify

----------------------------------------

TITLE: Playwright Test Configuration for Astro
DESCRIPTION: Configuration setup for running Playwright tests with a development web server in an Astro project.

LANGUAGE: javascript
CODE:
import { defineConfig } from '@playwright/test';

export default defineConfig({
  webServer: {
    command: 'npm run preview',
    url: 'http://localhost:4321/',
    timeout: 120 * 1000,
    reuseExistingServer: !process.env.CI,
  },
  use: {
    baseURL: 'http://localhost:4321/',
  },
});

----------------------------------------

TITLE: Adding Framework Renderers to Container
DESCRIPTION: Shows how to add React and Svelte renderers to an Astro container for rendering framework components.

LANGUAGE: javascript
CODE:
import { getContainerRenderer as reactContainerRenderer } from "@astrojs/react";
import { getContainerRenderer as svelteContainerRenderer } from "@astrojs/svelte";
import { loadRenderers } from "astro:container";

const renderers = await loadRenderers([reactContainerRenderer(), svelteContainerRenderer()]);
const container = await experimental_AstroContainer.create({
    renderers
})
const result = await container.renderToString(ReactWrapper);

----------------------------------------

TITLE: Database Error Handling Implementation
DESCRIPTION: Example of using isDbError() utility to handle database errors in an API route

LANGUAGE: ts
CODE:
import { db, Comment, isDbError } from 'astro:db';
import type { APIRoute } from 'astro';

export const POST: APIRoute = (ctx) => {
  try {
    await db.insert(Comment).values({
      id: ctx.params.id,
      content: 'Hello, world!'
    });
  } catch (e) {
    if (isDbError(e)) {
      return new Response(`Cannot insert comment with id ${id}\n\n${e.message}`, { status: 400 });
    }
    return new Response('An unexpected error occurred', { status: 500 });
  }

  return new Response(null, { status: 201 });
};

----------------------------------------

TITLE: Fetching Data from Hygraph in Astro Component
DESCRIPTION: Demonstrates how to fetch blog posts from Hygraph using GraphQL queries and display them in an Astro component.

LANGUAGE: astro
CODE:
---
interface Post {
	title: string;
}

const query = {
	method: "POST",
	headers: { "Content-Type": "application/json" },
	body: JSON.stringify({
		query: `
      {
        blogPosts {
          title
        }
      }`,
	}),
};

const response = await fetch(import.meta.env.HYGRAPH_ENDPOINT, query);
const json = await response.json();
const posts: Post[] = json.data.blogPosts;
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>Astro</title>
	</head>
	<body>
		<h1>Astro</h1>
		{
			posts.map((post) => (
				<div>
					<h2>{post.title}</h2>
				</div>
			))
		}
	</body>
</html>

----------------------------------------

TITLE: VS Code Markdoc Configuration
DESCRIPTION: JSON configuration for VS Code Markdoc language support

LANGUAGE: json
CODE:
[
  {
    "id": "my-site",
    "path": "src/content",
    "schema": {
      "path": "markdoc.config.mjs",
      "type": "esm",
      "property": "default",
      "watch": true
    }
  }
]

----------------------------------------

TITLE: Configuring Page Partials in Astro
DESCRIPTION: Example of configuring a page as a partial by setting the partial flag to true, which excludes the default HTML wrapper.

LANGUAGE: astro
CODE:
---
export const partial = true
---
<!-- Generated HTML available at a URL -->
<!-- Available to a rendering library -->

----------------------------------------

TITLE: Creating a Server Endpoint with Error Handling in Astro
DESCRIPTION: This snippet shows how to create a server endpoint in Astro with error handling. It demonstrates accessing params, querying a database, and returning appropriate responses based on the result.

LANGUAGE: javascript
CODE:
import { getProduct } from '../db';

export async function GET({ params }) {
  const id = params.id;
  const product = await getProduct(id);

  if (!product) {
    return new Response(null, {
      status: 404,
      statusText: 'Not found'
    });
  }

  return new Response(
    JSON.stringify(product), {
      status: 200,
      headers: {
        "Content-Type": "application/json"
      }
    }
  );
}

----------------------------------------

TITLE: Setting API Key in Environment Variable
DESCRIPTION: Add the DatoCMS API key to the .env file for secure access.

LANGUAGE: ini
CODE:
DATOCMS_API_KEY=YOUR_API_KEY

----------------------------------------

TITLE: Configuring Component package.json
DESCRIPTION: Example package.json configuration for an Astro component. Includes essential fields like name, description, version, and exports for proper NPM packaging.

LANGUAGE: json
CODE:
{
  "name": "my-component",
  "description": "Component description",
  "version": "1.0.0",
  "homepage": "https://github.com/owner/project#readme",
  "type": "module",
  "exports": {
    ".": "./index.js",
    "./astro": "./MyAstroComponent.astro",
    "./react": "./MyReactComponent.jsx"
  },
  "files": ["index.js", "MyAstroComponent.astro", "MyReactComponent.jsx"],
  "keywords": ["astro", "withastro", "astro-component", "...", "..."]
}

----------------------------------------

TITLE: Using requestHasLocale in Astro Middleware
DESCRIPTION: This example shows how to use the requestHasLocale function in an Astro middleware to check if the current URL contains a configured locale.

LANGUAGE: javascript
CODE:
import { defineMiddleware } from "astro:middleware";
import { requestHasLocale } from "astro:i18n";

export const onRequest = defineMiddleware(async (context, next) => {
  if (requestHasLocale(context)) {
    return next();
  }
  return new Response("Not found", { status: 404 });
})

----------------------------------------

TITLE: Building Astro Project with Azion CLI
DESCRIPTION: Command to build your Astro project locally using the Azion CLI.

LANGUAGE: bash
CODE:
azion build

----------------------------------------

TITLE: Initializing Firebase Admin SDK in Astro
DESCRIPTION: Sets up the Firebase Admin SDK on the server-side using environment variables for authentication.

LANGUAGE: typescript
CODE:
import type { ServiceAccount } from "firebase-admin";
import { initializeApp, cert, getApps } from "firebase-admin/app";

const activeApps = getApps();
const serviceAccount = {
  type: "service_account",
  project_id: import.meta.env.FIREBASE_PROJECT_ID,
  private_key_id: import.meta.env.FIREBASE_PRIVATE_KEY_ID,
  private_key: import.meta.env.FIREBASE_PRIVATE_KEY,
  client_email: import.meta.env.FIREBASE_CLIENT_EMAIL,
  client_id: import.meta.env.FIREBASE_CLIENT_ID,
  auth_uri: import.meta.env.FIREBASE_AUTH_URI,
  token_uri: import.meta.env.FIREBASE_TOKEN_URI,
  auth_provider_x509_cert_url: import.meta.env.FIREBASE_AUTH_CERT_URL,
  client_x509_cert_url: import.meta.env.FIREBASE_CLIENT_CERT_URL,
};

const initApp = () => {
  if (import.meta.env.PROD) {
    console.info('PROD env detected. Using default service account.')
    return initializeApp()
  }
  console.info('Loading service account from env.')
  return initializeApp({
    credential: cert(serviceAccount as ServiceAccount)
  })
}

export const app = activeApps.length === 0 ? initApp() : activeApps[0];

----------------------------------------

TITLE: Initializing Firebase Admin SDK in Astro
DESCRIPTION: Sets up the Firebase Admin SDK on the server-side using environment variables for authentication.

LANGUAGE: typescript
CODE:
import type { ServiceAccount } from "firebase-admin";
import { initializeApp, cert, getApps } from "firebase-admin/app";

const activeApps = getApps();
const serviceAccount = {
  type: "service_account",
  project_id: import.meta.env.FIREBASE_PROJECT_ID,
  private_key_id: import.meta.env.FIREBASE_PRIVATE_KEY_ID,
  private_key: import.meta.env.FIREBASE_PRIVATE_KEY,
  client_email: import.meta.env.FIREBASE_CLIENT_EMAIL,
  client_id: import.meta.env.FIREBASE_CLIENT_ID,
  auth_uri: import.meta.env.FIREBASE_AUTH_URI,
  token_uri: import.meta.env.FIREBASE_TOKEN_URI,
  auth_provider_x509_cert_url: import.meta.env.FIREBASE_AUTH_CERT_URL,
  client_x509_cert_url: import.meta.env.FIREBASE_CLIENT_CERT_URL,
};

const initApp = () => {
  if (import.meta.env.PROD) {
    console.info('PROD env detected. Using default service account.')
    return initializeApp()
  }
  console.info('Loading service account from env.')
  return initializeApp({
    credential: cert(serviceAccount as ServiceAccount)
  })
}

export const app = activeApps.length === 0 ? initApp() : activeApps[0];

----------------------------------------

TITLE: Deploying Site to Heroku
DESCRIPTION: Commands to deploy the site to Heroku and open the deployed application in a browser.

LANGUAGE: bash
CODE:
# publish site
$ git push heroku master

# opens a browser to view the Dashboard version of Heroku CI
$ heroku open

----------------------------------------

TITLE: Accessing Component Props with Astro.props
DESCRIPTION: Demonstrates how to access props passed to an Astro component using Astro.props.

LANGUAGE: astro
CODE:
---
// src/components/Heading.astro
const { title, date } = Astro.props;
---
<div>
  <h1>{title}</h1>
  <p>{date}</p>
</div>

----------------------------------------

TITLE: Using Astro.glob() to Load Local Files
DESCRIPTION: Example of using Astro.glob() to load Markdown files from a specific directory and render their contents.

LANGUAGE: astro
CODE:
---
// src/components/my-component.astro
const posts = await Astro.glob('../pages/post/*.md'); // devuelve un array de artículos encontrados en ./src/pages/post/*.md
---

<div>
{posts.slice(0, 3).map((post) => (
  <article>
    <h2>{post.frontmatter.title}</h2>
    <p>{post.frontmatter.description}</p>
    <a href={post.url}>Read more</a>
  </article>
))}
</div>

----------------------------------------

TITLE: Creating Rich Text Widget Component for ApostropheCMS
DESCRIPTION: Astro component implementation for rich text content editing with ApostropheCMS.

LANGUAGE: javascript
CODE:
---
const { widget } = Astro.props;
const { content } = widget;
---
<Fragment set:html={ content }></Fragment>

----------------------------------------

TITLE: Manually Installing @astrojs/preact Package with PNPM
DESCRIPTION: Command to manually install the @astrojs/preact package using pnpm.

LANGUAGE: shell
CODE:
pnpm add @astrojs/preact

----------------------------------------

TITLE: Displaying Blog Posts in Astro Component
DESCRIPTION: Astro component that fetches blog post data and renders a list of posts using a Card component.

LANGUAGE: astro
CODE:
---
import Card from '../components/Card.astro'
import { getAllPosts } from '../lib/cosmic'

const data = await getAllPosts()
---

<section>
  <ul class="grid gap-8 md:grid-cols-2">
    {
      data.map((post) => (
        <Card
          title={post.title}
          href={post.slug}
          body={post.metadata.excerpt}
          tags={post.metadata.tags.map((tag) => tag)}
        />
      ))
    }
  </ul>
</section>

----------------------------------------

TITLE: Configuring Astro Markdown Plugins
DESCRIPTION: Demonstrates how to add remark and rehype plugins to customize Markdown processing.

LANGUAGE: javascript
CODE:
import remarkToc from 'remark-toc';
{
  markdown: {
    remarkPlugins: [ [remarkToc, { heading: "contents"} ] ]
  }
}

LANGUAGE: javascript
CODE:
import { rehypeAccessibleEmojis } from 'rehype-accessible-emojis';
{
  markdown: {
    rehypePlugins: [rehypeAccessibleEmojis]
  }
}

----------------------------------------

TITLE: RSS Feed with Content Collections
DESCRIPTION: Implementation of RSS feed using content collections to generate feed items with metadata

LANGUAGE: javascript
CODE:
import rss from '@astrojs/rss';
import { getCollection } from 'astro:content';

export async function GET(context) {
  const blog = await getCollection('blog');
  return rss({
    title: 'Buzz's Blog',
    description: 'A humble Astronaut's guide to the stars',
    site: context.site,
    items: blog.map((post) => ({
      title: post.data.title,
      pubDate: post.data.pubDate,
      description: post.data.description,
      link: `/blog/${post.id}/`,
    })),
  });
}

----------------------------------------

TITLE: Creating Static Project Configuration in YAML
DESCRIPTION: YAML configuration for creating a static Astro project on Zerops with a static service.

LANGUAGE: yaml
CODE:
project:
  name: recipe-astro
services:
  - hostname: app
    type: static

----------------------------------------

TITLE: Menu Toggle JavaScript Implementation
DESCRIPTION: JavaScript code to handle hamburger menu click events and toggle navigation visibility.

LANGUAGE: javascript
CODE:
document.querySelector('.hamburger').addEventListener('click', () => {
  document.querySelector('.nav-links').classList.toggle('expanded');
});

----------------------------------------

TITLE: Configuring Node.js Version for Azure Deployment
DESCRIPTION: Package.json configuration to specify the required Node.js version (18.0.0 or higher) to prevent build failures in the GitHub Action deployment process.

LANGUAGE: json
CODE:
  "engines": {
    "node": ">=18.0.0"
  },

----------------------------------------

TITLE: NGINX Server Configuration
DESCRIPTION: NGINX configuration file for serving Astro static sites with gzip compression and error handling

LANGUAGE: nginx
CODE:
worker_processes  1;

events {
  worker_connections  1024;
}

http {
  server {
    listen 8080;
    server_name   _;

    root   /usr/share/nginx/html;
    index  index.html index.htm;
    include /etc/nginx/mime.types;

    gzip on;
    gzip_min_length 1000;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;

    error_page 404 /404.html;
    location = /404.html {
            root /usr/share/nginx/html;
            internal;
    }

    location / {
            try_files $uri $uri/index.html =404;
    }
  }
}

----------------------------------------

TITLE: Implementing Dev Toolbar App Logic
DESCRIPTION: Defines the core functionality of the dev toolbar app using the defineToolbarApp function. It creates an h1 element with a random motivational message and updates it when the app is toggled.

LANGUAGE: typescript
CODE:
import { defineToolbarApp } from "astro/toolbar";

const motivationalMessages = [
  "You're doing great!",
  "Keep up the good work!",
  "You're awesome!",
  "You're a star!",
];

export default defineToolbarApp({
    init(canvas, app) {
      const h1 = document.createElement('h1');
      h1.textContent = motivationalMessages[Math.floor(Math.random() * motivationalMessages.length)];
      
      canvas.append(h1);

      // Display a random message when the app is toggled
      app.onToggled(({ state }) => {
        const newMessage = motivationalMessages[Math.floor(Math.random() * motivationalMessages.length)];
        h1.textContent = newMessage;
      });
    },
});

----------------------------------------

TITLE: Configuring astro.config.mjs for Astro SSR Deployment on Kinsta
DESCRIPTION: This snippet shows the necessary configuration in astro.config.mjs for deploying an Astro SSR site to Kinsta Application Hosting. It sets up the output mode, node adapter, and server host configuration.

LANGUAGE: javascript
CODE:
import { defineConfig } from 'astro/config';
import node from "@astrojs/node";

export default defineConfig({
  output: 'server',
  adapter: node({
    mode: "standalone"
  }),
  server: {
    host: true
  }
});

----------------------------------------

TITLE: SSR Site Deployment Configuration
DESCRIPTION: Zerops deployment configuration for SSR Astro sites, including build, environment variables, and runtime configuration.

LANGUAGE: yaml
CODE:
zerops:
  - setup: app
    build:
      base: nodejs@20
      buildCommands:
        - npm i
        - npm run build
      deployFiles:
        - dist
        - package.json
        - node_modules
    run:
      base: nodejs@20
      ports:
        - port: 3000
          httpSupport: true
      envVariables:
        PORT: 3000
        HOST: 0.0.0.0
      start: npm start

----------------------------------------

TITLE: Using the Picture Component for Responsive Images
DESCRIPTION: Shows how to use the built-in Picture component to display responsive images with multiple formats.

LANGUAGE: astro
CODE:
---
import { Picture } from 'astro:assets';
import myImage from "../assets/my_image.png"; // La imagen es 1600x900
---
<!-- `alt` es obligatorio en el componente Image -->
<Picture src={myImage} formats={['avif', 'webp']} alt="Una descripción de mi imagen." />

----------------------------------------

TITLE: Generating Dockerfile for Astro Project
DESCRIPTION: These commands use the Dockerfile generator to create a Dockerfile for Astro projects. The first command is for Node applications, while the second is for Bun applications.

LANGUAGE: bash
CODE:
npx dockerfile

LANGUAGE: bash
CODE:
bunx dockerfile

----------------------------------------

TITLE: Converting Gatsby Layout to Astro
DESCRIPTION: A step-by-step guide for converting a Gatsby layout component to an Astro layout.

LANGUAGE: astro
CODE:
---
import '../styles/style.css';
const { title, pathname } = Astro.props
---
<html>
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <title>Astro</title>
  </head>
  <body>
    <div class="global-wrapper">
      <header class="global-header">
        { pathname === "/" 
        ? 
          <h1 class="main-heading">
          <a href="/">{title}</a>
          </h1>
        : 
          <h1 class="main-heading">
          <a class="header-link-home" href="/">Home</a>
          </h1>
        }  
      </header>
      <main>
        <slot />
      </main>
      <footer>
        &#169; {new Date().getFullYear()}, Built with
        {` `}
        <a href="https://www.astro.build">Astro</a>
      </footer>
    </div>
  </body>
</html>

----------------------------------------

TITLE: Global Styles with is:global Directive
DESCRIPTION: Shows how to create global, unscoped CSS styles using the is:global directive that apply across the entire site.

LANGUAGE: astro
CODE:
<style is:global>
  /* Unscoped, delivered as-is to the browser.
     Applies to all <h1> tags on your site. */
  h1 { color: red; }
</style>

----------------------------------------

TITLE: Configuring Astro Vite Options
DESCRIPTION: Shows how to pass additional Vite configuration options to Astro.

LANGUAGE: javascript
CODE:
{
  vite: {
    ssr: {
      // Example: Force a broken package to skip SSR processing, if needed
      external: ['broken-npm-package'],
    }
  }
}

LANGUAGE: javascript
CODE:
{
  vite: {
    // Example: Add custom vite plugins directly to your Astro project
    plugins: [myPlugin()],
  }
}

----------------------------------------

TITLE: Creating an Astro Project from Blog Template using yarn
DESCRIPTION: This command creates a new Astro project using the blog template starter. It utilizes the yarn package manager to initialize the project.

LANGUAGE: shell
CODE:
yarn create astro --template blog

----------------------------------------

TITLE: Generating Dynamic Post Pages in Astro
DESCRIPTION: Astro component code for dynamically generating individual post pages using Hashnode data, including static path generation and post content rendering.

LANGUAGE: astro
CODE:
---
import { getAllPosts, getPost } from '../../lib/client';


export async function getStaticPaths() {
  const data = await getAllPosts();
  const allPosts = data.publication.posts.edges;
  return allPosts.map((post) => {
    return {
      params: { slug: post.node.slug },
    }
  })
}
const { slug } = Astro.params;
const post = await getPost(slug);

---
<!DOCTYPE html>
<html lang="en">
    <head>
        <title>{post.title}</title>
    </head>
    <body>
        <img src={post.coverImage.url} alt={post.title} />

        <h1>{post.title}</h1>
        <p>{post.readTimeInMinutes} min read</p>

        <Fragment set:html={post.content.html} />
    </body>
</html>

----------------------------------------

TITLE: Configuring Astro Security Settings
DESCRIPTION: Shows how to configure security settings for Astro SSR.

LANGUAGE: javascript
CODE:
// astro.config.mjs
export default defineConfig({
  output: "server",
  security: {
    checkOrigin: false
  }
})

----------------------------------------

TITLE: Configuring Astro for Netlify SSR
DESCRIPTION: Configuration setup in astro.config.mjs to enable server-side rendering with Netlify adapter.

LANGUAGE: javascript
CODE:
import { defineConfig } from 'astro/config';
import netlify from '@astrojs/netlify';

export default defineConfig({
  output: 'server',
  adapter: netlify(),
});

----------------------------------------

TITLE: Importing Middleware Functions in Astro
DESCRIPTION: Demonstrates how to import various middleware-related functions from the 'astro:middleware' module. These functions include sequence, createContext, trySerializeLocals, and defineMiddleware.

LANGUAGE: javascript
CODE:
import { 
  sequence,
  createContext,
  trySerializeLocals,
  defineMiddleware,
 } from 'astro:middleware';

----------------------------------------

TITLE: Configuring Astro Build Format
DESCRIPTION: Demonstrates how to control the output file format for Astro builds.

LANGUAGE: javascript
CODE:
{
  build: {
    // Example: Generate `page.html` instead of `page/index.html` during build.
    format: 'file'
  }
}

----------------------------------------

TITLE: Configuring Edgio for SSR
DESCRIPTION: JavaScript configuration for enabling Server Side Rendering in Edgio. Specifies the path to the standalone server file that runs Astro SSR.

LANGUAGE: javascript
CODE:
// edgio.config.js
import { join } from 'path'

module.exports = {
  astro: {
    // The path of the standalone server that runs Astro SSR.
    // The dependencies for this file are automatically bundled.
    appPath: join(process.cwd(), 'dist', 'server', 'entry.mjs'),
  },
};

----------------------------------------

TITLE: Creating User Sign-out Endpoint in Astro
DESCRIPTION: This TypeScript snippet creates a server endpoint for user sign-out by removing Supabase tokens in an Astro project.

LANGUAGE: typescript
CODE:
import type { APIRoute } from "astro";

export const GET: APIRoute = async ({ cookies, redirect }) => {
  cookies.delete("sb-access-token", { path: "/" });
  cookies.delete("sb-refresh-token", { path: "/" });
  return redirect("/signin");
};

----------------------------------------

TITLE: Creating Basic Navigation Component in Astro
DESCRIPTION: Creates a basic navigation component with links to Home, About, and Blog pages. This component can be reused across multiple pages to maintain consistent navigation.

LANGUAGE: astro
CODE:
---
---
<a href="/">Home</a>
<a href="/about/">About</a>
<a href="/blog/">Blog</a>

----------------------------------------

TITLE: Adding Prefetch Attribute to HTML Links
DESCRIPTION: Shows how to add the data-astro-prefetch attribute to HTML anchor tags to enable prefetching for specific links.

LANGUAGE: html
CODE:
<a href="/about" data-astro-prefetch>


----------------------------------------

TITLE: Installing Sentry SDK for Astro using pnpm
DESCRIPTION: Command to install the Sentry SDK for Astro using pnpm package manager.

LANGUAGE: shell
CODE:
pnpm astro add @sentry/astro

----------------------------------------

TITLE: Creating dynamic routes for Drupal articles in Astro
DESCRIPTION: Implements dynamic routing in Astro to generate individual pages for each Drupal article.

LANGUAGE: astro
CODE:
---
import {Jsona} from "jsona";
import {DrupalJsonApiParams} from "drupal-jsonapi-params";
import type {TJsonApiBody} from "jsona/lib/JsonaTypes";

import type { DrupalNode } from "../../types";
import {getArticles} from "../../api/drupal";

// Get all published articles.
export async function getStaticPaths() {
    const articles = await getArticles();
    return articles.map((article: DrupalNode) => {
        return {
            params: {
                path: article.path.alias.split('/')[2]
            },
            props: {
                title: article.title,
                body: article.body,
                date: new Date(article.created).toLocaleDateString('en-EN', {
                    day: "numeric",
                    month: "long",
                    year: "numeric"
                })
            }
        }
    });
}

const {title, date, body} = Astro.props;
---
<html lang="en">
  <head>
    <title>{title}</title>
  </head>
  <body>
    <h1>{title}</h1>
    <time>{date}</time>
    <article set:html={body.value} />
  </body>
</html>

----------------------------------------

TITLE: Configuring Astro Root Directory
DESCRIPTION: Demonstrates how to set the root directory for Astro projects.

LANGUAGE: javascript
CODE:
{
  root: './my-project-directory'
}

----------------------------------------

TITLE: Using the Prism Component in Astro
DESCRIPTION: Demonstrates how to use the <Prism /> component for Prism-based syntax highlighting in Astro files.

LANGUAGE: astro
CODE:
---
import { Prism } from '@astrojs/prism';
---
<Prism lang="js" code={`const foo = 'bar';`} />

----------------------------------------

TITLE: Importing and Rendering a React App in Astro
DESCRIPTION: This snippet demonstrates how to import a React app's root component into an Astro file and render it using a client directive for interactivity.

LANGUAGE: astro
CODE:
---
// Import your root App component
import App from '../cra-project/App.jsx';
---
<!-- Use a client directive to load your app -->
<App client:load />

----------------------------------------

TITLE: Setting ButterCMS API Token in Environment Variables
DESCRIPTION: Add the ButterCMS API token to a .env file in the root of the Astro project. This allows secure access to the ButterCMS API.

LANGUAGE: ini
CODE:
BUTTER_TOKEN=YOUR_API_TOKEN_HERE

----------------------------------------

TITLE: Using Astro Dev Server API
DESCRIPTION: Example of using the dev() function to programmatically start Astro's development server.

LANGUAGE: javascript
CODE:
import { dev } from "astro";

const devServer = await dev({
  root: "./my-project",
});

// Stop the server if needed
await devServer.stop();

----------------------------------------

TITLE: Configuring Astro Inline Stylesheets
DESCRIPTION: Shows how to control whether project styles are inlined or sent as separate CSS files.

LANGUAGE: javascript
CODE:
{
	build: {
		inlineStylesheets: `never`,
	},
}

----------------------------------------

TITLE: UI Translation Configuration
DESCRIPTION: TypeScript configuration for storing and managing UI translation strings.

LANGUAGE: typescript
CODE:
// src/i18n/ui.ts
export const languages = {
  en: 'English',
  fr: 'Français',
};

export const defaultLang = 'en';

export const ui = {
  en: {
    'nav.home': 'Home',
    'nav.about': 'About',
    'nav.twitter': 'Twitter',
  },
  fr: {
    'nav.home': 'Accueil',
    'nav.about': 'À propos',
  }
} as const;

----------------------------------------

TITLE: Enabling on-demand rendering for an Astro page
DESCRIPTION: Demonstrates how to opt-out of prerendering for a specific page by adding the 'prerender = false' export. This allows the page to be rendered on-demand by the server.

LANGUAGE: astro
CODE:
---
export const prerender = false
---
<html>
<!--
This content will be server-rendered on demand!
Just add an adapter integration for a server runtime!
All other pages are statically-generated at build time!
-->
<html>

----------------------------------------

TITLE: Setting PNPM Environment Variables for Static Deployment
DESCRIPTION: Environment variables configuration for deploying static Astro sites with PNPM on Clever Cloud.

LANGUAGE: shell
CODE:
CC_POST_BUILD_HOOK="pnpm build"
CC_PRE_BUILD_HOOK="npm install -g pnpm && pnpm install && pnpm run astro telemetry disable"
CC_WEBROOT="/dist"

----------------------------------------

TITLE: Creating First Markdown Blog Post in Astro
DESCRIPTION: Sample blog post demonstrating Markdown syntax with frontmatter configuration including title, date, description, author, image, and tags.

LANGUAGE: markdown
CODE:
---
title: 'My First Blog Post'
pubDate: 2022-07-01
description: 'This is the first post of my new Astro blog.'
author: 'Astro Learner'
image:
    url: 'https://docs.astro.build/assets/rose.webp' 
    alt: 'The Astro logo on a dark background with a pink glow.'
tags: ["astro", "blogging", "learning in public"]
---
# My First Blog Post

Published on: 2022-07-01

Welcome to my _new blog_ about learning Astro! Here, I will share my learning journey as I build a new website.

## What I've accomplished

1. **Installing Astro**: First, I created a new Astro project and set up my online accounts.

2. **Making Pages**: I then learned how to make pages by creating new `.astro` files and placing them in the `src/pages/` folder.

3. **Making Blog Posts**: This is my first blog post! I now have Astro pages and Markdown posts!

## What's next

I will finish the Astro tutorial, and then keep adding more posts. Watch this space for more to come.

----------------------------------------

TITLE: Generating Cloudinary Image URLs for Social Media Cards
DESCRIPTION: Example of using getCldOgImageUrl to generate URLs for Open Graph images in Astro layouts.

LANGUAGE: jsx
CODE:
---
import { getCldOgImageUrl } from 'astro-cloudinary/helpers';
const ogImageUrl = getCldOgImageUrl({ src: '<Public ID>' });
---
<meta property="og:image" content={ogImageUrl} />
<meta property="og:image:secure_url" content={ogImageUrl} />
<meta property="og:image:width" content="1200" />
<meta property="og:image:height" content="630" />
<meta property="twitter:title" content="<Twitter Title>" />
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:image" content={ogImageUrl} />

----------------------------------------

TITLE: Creating a New Astro Project using npm
DESCRIPTION: Command to create a new Astro project using npm and the minimal template.

LANGUAGE: shell
CODE:
# create a new project with npm
npm create astro@latest -- --template minimal

----------------------------------------

TITLE: Configuring Astro for SolidJS Integration
DESCRIPTION: Configuration setup in astro.config.mjs to enable SolidJS integration in an Astro project.

LANGUAGE: javascript
CODE:
import { defineConfig } from 'astro/config';
import solidJs from '@astrojs/solid-js';

export default defineConfig({
  // ...
  integrations: [solidJs()],
});

----------------------------------------

TITLE: Configuring Astro Server Options
DESCRIPTION: Shows how to customize the Astro dev server settings.

LANGUAGE: javascript
CODE:
{
  server: { port: 1234, host: true}
}

LANGUAGE: javascript
CODE:
{
  // Example: Use the function syntax to customize based on command
  server: ({ command }) => ({ port: command === 'dev' ? 4321 : 4000 })
}

----------------------------------------

TITLE: Installing Vercel Adapter with Package Managers
DESCRIPTION: Commands for installing the Vercel adapter using different package managers (npm, pnpm, yarn) via the astro add command.

LANGUAGE: shell
CODE:
npx astro add vercel

LANGUAGE: shell
CODE:
pnpm astro add vercel

LANGUAGE: shell
CODE:
yarn astro add vercel

----------------------------------------

TITLE: Table Column Configuration Example
DESCRIPTION: Example showing how to configure table columns with different data types and constraints

LANGUAGE: ts
CODE:
import { defineTable, column, NOW } from 'astro:db';

const Comment = defineTable({
	columns: {
		id: column.number({ primaryKey: true }),
		author: column.text(),
		content: column.text({ optional: true }),
		published: column.date({ default: NOW }),
	},
});

----------------------------------------

TITLE: Updating Image Src with Base Path
DESCRIPTION: Changes to update image src attributes to include the base path when using a configured base value.

LANGUAGE: astro
CODE:
// To access public/images/my-image.png:

<img src="/docs/images/my-image.png" alt="">

----------------------------------------

TITLE: Customizing Astro Integration Options
DESCRIPTION: This snippet demonstrates how to pass custom options to an Astro integration when adding it to the configuration.

LANGUAGE: javascript
CODE:
integrations: [
  // Example: Customize your integration with function arguments
  sitemap({filter: true})
]

----------------------------------------

TITLE: Creating Firebase Authentication Endpoints in Astro
DESCRIPTION: Implements server endpoints for user authentication including sign-in, sign-out, and registration.

LANGUAGE: typescript
CODE:
import type { APIRoute } from "astro";
import { app } from "../../../firebase/server";
import { getAuth } from "firebase-admin/auth";

export const GET: APIRoute = async ({ request, cookies, redirect }) => {
  const auth = getAuth(app);

  const idToken = request.headers.get("Authorization")?.split("Bearer ")[1];
  if (!idToken) {
    return new Response(
      "No token found",
      { status: 401 }
    );
  }

  try {
    await auth.verifyIdToken(idToken);
  } catch (error) {
    return new Response(
      "Invalid token",
      { status: 401 }
    );
  }

  const fiveDays = 60 * 60 * 24 * 5 * 1000;
  const sessionCookie = await auth.createSessionCookie(idToken, {
    expiresIn: fiveDays,
  });

  cookies.set("__session", sessionCookie, {
    path: "/",
  });

  return redirect("/dashboard");
};

----------------------------------------

TITLE: Creating Firebase Authentication Endpoints in Astro
DESCRIPTION: Implements server endpoints for user authentication including sign-in, sign-out, and registration.

LANGUAGE: typescript
CODE:
import type { APIRoute } from "astro";
import { app } from "../../../firebase/server";
import { getAuth } from "firebase-admin/auth";

export const GET: APIRoute = async ({ request, cookies, redirect }) => {
  const auth = getAuth(app);

  const idToken = request.headers.get("Authorization")?.split("Bearer ")[1];
  if (!idToken) {
    return new Response(
      "No token found",
      { status: 401 }
    );
  }

  try {
    await auth.verifyIdToken(idToken);
  } catch (error) {
    return new Response(
      "Invalid token",
      { status: 401 }
    );
  }

  const fiveDays = 60 * 60 * 24 * 5 * 1000;
  const sessionCookie = await auth.createSessionCookie(idToken, {
    expiresIn: fiveDays,
  });

  cookies.set("__session", sessionCookie, {
    path: "/",
  });

  return redirect("/dashboard");
};

----------------------------------------

TITLE: Creating Firebase Authentication Endpoints in Astro
DESCRIPTION: Implements server endpoints for user authentication including sign-in, sign-out, and registration.

LANGUAGE: typescript
CODE:
import type { APIRoute } from "astro";
import { app } from "../../../firebase/server";
import { getAuth } from "firebase-admin/auth";

export const GET: APIRoute = async ({ request, cookies, redirect }) => {
  const auth = getAuth(app);

  const idToken = request.headers.get("Authorization")?.split("Bearer ")[1];
  if (!idToken) {
    return new Response(
      "No token found",
      { status: 401 }
    );
  }

  try {
    await auth.verifyIdToken(idToken);
  } catch (error) {
    return new Response(
      "Invalid token",
      { status: 401 }
    );
  }

  const fiveDays = 60 * 60 * 24 * 5 * 1000;
  const sessionCookie = await auth.createSessionCookie(idToken, {
    expiresIn: fiveDays,
  });

  cookies.set("__session", sessionCookie, {
    path: "/",
  });

  return redirect("/dashboard");
};

----------------------------------------

TITLE: Updating Endpoint Return Values
DESCRIPTION: Changes to update endpoints to return a Response object instead of a simple object.

LANGUAGE: diff
CODE:
  export async function GET() {
-   return { body: { "title": "Bob's blog" }};
+   return new Response(JSON.stringify({ "title": "Bob's blog" }));
  }

----------------------------------------

TITLE: Configuring Media Uploads in Decap CMS
DESCRIPTION: YAML configuration for specifying media upload folders in Decap CMS.

LANGUAGE: yaml
CODE:
media_folder: "src/assets/images" # Location where files will be stored in the repo 
public_folder: "src/assets/images" # The src attribute for uploaded media

----------------------------------------

TITLE: Using getAbsoluteLocaleUrl in Astro
DESCRIPTION: This example shows how to use the getAbsoluteLocaleUrl function to generate absolute URLs for different locales and paths, assuming a site configuration.

LANGUAGE: astro
CODE:
---
import { getAbsoluteLocaleUrl } from 'astro:i18n';

// If `site` is set to be `https://example.com`

getAbsoluteLocaleUrl("fr"); 
// returns https://example.com/fr

getAbsoluteLocaleUrl("fr", ""); 
// returns https://example.com/fr/

getAbsoluteLocaleUrl("fr", "getting-started"); 
// returns https://example.com/fr/getting-started

getAbsoluteLocaleUrl("fr_CA", "getting-started", {
  prependWith: "blog"
}); 
// returns https://example.com/blog/fr-ca/getting-started

getAbsoluteLocaleUrl("fr_CA", "getting-started", {
  prependWith: "blog",
  normalizeLocale: false
}); 
// returns https://example.com/blog/fr_CA/getting-started
---

----------------------------------------

TITLE: Disabling Astro Redirects Output
DESCRIPTION: Demonstrates how to disable the output of redirects to HTML during Astro builds.

LANGUAGE: javascript
CODE:
{
  build: {
    redirects: false
  }
}

----------------------------------------

TITLE: Accessing Component Props in Astro
DESCRIPTION: Demonstrates how to access props passed to an Astro component using Astro.props

LANGUAGE: astro
CODE:
---
// src/components/Heading.astro
const { title, date } = Astro.props;
---
<div>
  <h1>{title}</h1>
  <p>{date}</p>
</div>

----------------------------------------

TITLE: Importing Client-Side Transition Functions in Astro
DESCRIPTION: Shows how to import various client-side transition functions and utilities from the astro:transitions/client module.

LANGUAGE: astro
CODE:
<script>
  import { 
    navigate,
    supportsViewTransitions,
    transitionEnabledOnThisPage,
    getFallback,
    swapFunctions,
  } from 'astro:transitions/client';
</script>

----------------------------------------

TITLE: Configuring Netlify Edge Functions
DESCRIPTION: Configuration for enabling edge middleware functionality in Netlify adapter.

LANGUAGE: javascript
CODE:
import { defineConfig } from 'astro/config';
import netlify from '@astrojs/netlify/functions';

export default defineConfig({
  output: 'server',
  adapter: netlify({
    edgeMiddleware: true
  }),
});

----------------------------------------

TITLE: Importing MDX Content in Astro
DESCRIPTION: Astro code to import and use exported variables from MDX files.

LANGUAGE: astro
CODE:
---
const matches = import.meta.glob('./posts/*.mdx', { eager: true });
const posts = Object.values(matches);
---

{posts.map(post => <p>{post.title}</p>)}

----------------------------------------

TITLE: Running Astro Development Server with npm
DESCRIPTION: Command to start the Astro development server using npm.

LANGUAGE: shell
CODE:
npm run dev

----------------------------------------

TITLE: Creating Drupal API utility functions in TypeScript
DESCRIPTION: Defines utility functions for fetching data from Drupal, including a generic fetchUrl function and a specific getArticles function.

LANGUAGE: typescript
CODE:
import {Jsona} from "jsona";
import {DrupalJsonApiParams} from "drupal-jsonapi-params";
import type {DrupalNode} from "../types.ts";
import type {TJsonApiBody} from "jsona/lib/JsonaTypes";

// Get the Drupal Base Url.
export const baseUrl: string = import.meta.env.DRUPAL_BASE_URL;

/**
 * Fetch url from Drupal.
 *
 * @param url
 *
 * @return Promise<TJsonaModel | TJsonaModel[]> as Promise<any>
 */
export const fetchUrl = async (url: string): Promise<any> => {
    const request: Response = await fetch(url);
    const json: string | TJsonApiBody = await request.json();
    const dataFormatter: Jsona = new Jsona();
    return dataFormatter.deserialize(json);
}

/**
 * Get all published articles.
 *
 * @return Promise<DrupalNode[]>
 */
export const getArticles = async (): Promise<DrupalNode[]> => {
    const params: DrupalJsonApiParams = new DrupalJsonApiParams();
    params
        .addFields("node--article", [
            "title",
            "path",
            "body",
            "created",
        ])
        .addFilter("status", "1");
    const path: string = params.getQueryString();
    return await fetchUrl(baseUrl + '/jsonapi/node/article?' + path);
}

----------------------------------------

TITLE: Output Directory Configuration
DESCRIPTION: Astro configuration for specifying the output and public directories. Sets the build output to 'public' directory as required by GitLab Pages.

LANGUAGE: javascript
CODE:
import { defineConfig } from 'astro/config';

export default defineConfig({
  outDir: 'public',
  publicDir: 'static',
});

----------------------------------------

TITLE: Static Site Generation for Individual Blog Posts
DESCRIPTION: Implements static route generation for individual blog post pages using getStaticPaths.

LANGUAGE: astro
CODE:
---
import type { Blogpost } from "flotiq-api-ts";
import { flotiq } from "../../lib/flotiq";

export async function getStaticPaths() {
  const posts = await flotiq.BlogpostAPI.list();
  return posts.data?.map((post) => ({
    params: { slug: post.slug },
    props: post
  })) || []
}
const post: Blogpost = Astro.props;
---
<html lang="en">
  <title>{post.title}</title>
  <body>
    <h1>{post.title}</h1>
    <div set:html={post.content}/>
  </body>
</html>

----------------------------------------

TITLE: Adding Test Error Button in Astro
DESCRIPTION: Astro code snippet for adding a button that throws a test error when clicked, used for testing Sentry error reporting.

LANGUAGE: astro
CODE:
<button onclick="throw new Error('This is a test error')">Throw test error</button>

----------------------------------------

TITLE: Adding Markdown Plugins
DESCRIPTION: Configuration example for adding remark and rehype plugins to customize Markdown processing in Astro.

LANGUAGE: javascript
CODE:
import { defineConfig } from 'astro/config';
import remarkToc from 'remark-toc';
import { rehypeAccessibleEmojis } from 'rehype-accessible-emojis';

export default defineConfig({
  markdown: {
    remarkPlugins: [ [remarkToc, { heading: 'toc', maxDepth: 3 } ] ],
    rehypePlugins: [rehypeAccessibleEmojis],
  },
});

----------------------------------------

TITLE: Updating Image Component Usage
DESCRIPTION: Example of updating the usage of the Image component with new properties.

LANGUAGE: astro
CODE:
---
import rocket from '../images/rocket.svg';
---
<img src={rocket} width="250" height="250" alt="A rocketship in space." />

<img src={rocket.src} width={rocket.width} height={rocket.height} alt="A rocketship in space." />

----------------------------------------

TITLE: Creating a Text Component for DatoCMS Modular Content
DESCRIPTION: Define an Astro component to render a text block from DatoCMS modular content.

LANGUAGE: astro
CODE:
---
export interface TextProps {
	text: string
}

export interface Props {
	item: TextProps
}

const { item } = Astro.props;
---

<div set:html={item.text} />

----------------------------------------

TITLE: Prerendering a static page in server mode
DESCRIPTION: Demonstrates how to opt-in to prerendering for a specific page when the project is configured for server-side rendering by default.

LANGUAGE: astro
CODE:
---
export const prerender = true
---
<html>
<!--
`output: 'server'` is configured, but this page is static!
The rest of my site is rendered on demand!
-->
<html>

----------------------------------------

TITLE: Configuring Astro Assets Prefix
DESCRIPTION: Demonstrates how to set a prefix for Astro-generated asset links.

LANGUAGE: javascript
CODE:
{
  build: {
    assetsPrefix: 'https://cdn.example.com'
  }
}

LANGUAGE: javascript
CODE:
{
  build: {
    assetsPrefix: {
      'js': 'https://js.cdn.example.com',
      'mjs': 'https://js.cdn.example.com',
      'css': 'https://css.cdn.example.com',
      'fallback': 'https://cdn.example.com'
    }
  }
}

----------------------------------------

TITLE: Setting Astro Output Mode
DESCRIPTION: Shows how to configure the output mode for Astro builds.

LANGUAGE: javascript
CODE:
import { defineConfig } from 'astro/config';

export default defineConfig({
  output: 'static'
})

----------------------------------------

TITLE: Updating package.json Preview Script
DESCRIPTION: Modified package.json configuration to use Deno for preview functionality.

LANGUAGE: json
CODE:
{
  "scripts": {
    "dev": "astro dev",
    "start": "astro dev",
    "build": "astro build",
    "preview": "deno run --allow-net --allow-read --allow-env ./dist/server/entry.mjs"
  }
}

----------------------------------------

TITLE: Creating Blog Page Content in Astro
DESCRIPTION: HTML structure for the Blog page with navigation and initial content.

LANGUAGE: astro
CODE:
<body>
  <a href="/">Home</a>
  <a href="/about/">About</a>
  <a href="/blog/">Blog</a>

  <h1>My Astro Site</h1>
  <h1>My Astro Learning Blog</h1>
  <p>This is where I will post about my journey learning Astro.</p>
</body>

----------------------------------------

TITLE: Zerops CLI Installation and Usage
DESCRIPTION: Commands for installing Zerops CLI and triggering deployments from the command line.

LANGUAGE: shell
CODE:
npm i -g @zerops/zcli
zcli login <token>
zcli push

----------------------------------------

TITLE: Setting Astro Output Mode
DESCRIPTION: Shows how to configure the output mode for Astro builds.

LANGUAGE: javascript
CODE:
import { defineConfig } from 'astro/config';

export default defineConfig({
  output: 'static'
})

----------------------------------------

TITLE: Removing Duplicate Title Display
DESCRIPTION: Shows the final layout configuration after removing the duplicate title display for cleaner output.

LANGUAGE: astro
CODE:
<BaseLayout pageTitle={frontmatter.title}>
  <p>{frontmatter.pubDate.toString().slice(0,10)}</p>
  <p><em>{frontmatter.description}</em></p>
  <p>Written by: {frontmatter.author}</p>
  <img src={frontmatter.image.url} width="300" alt={frontmatter.image.alt} />
  <slot />
</BaseLayout>

----------------------------------------

TITLE: Using Environment Variables in TypeScript
DESCRIPTION: Example of accessing environment variables in TypeScript using import.meta.env.

LANGUAGE: typescript
CODE:
const isProd = import.meta.env.PROD;
const isDev = import.meta.env.DEV;

----------------------------------------

TITLE: Initializing Edgio in Astro Project
DESCRIPTION: Command to initialize Edgio configuration in an Astro project.

LANGUAGE: bash
CODE:
edgio init

----------------------------------------

TITLE: Configuring Neon Database URL in Astro Environment
DESCRIPTION: Sets up the Neon database connection string as an environment variable in the .env file of an Astro project.

LANGUAGE: ini
CODE:
NEON_DATABASE_URL="postgresql://<user>:<password>@<endpoint_hostname>.neon.tech:<port>/<dbname>?sslmode=require"

----------------------------------------

TITLE: Configuring Astro Public Directory
DESCRIPTION: Demonstrates how to set the public directory for static assets in Astro.

LANGUAGE: javascript
CODE:
{
  publicDir: './my-custom-publicDir-directory'
}

----------------------------------------

TITLE: Installing Latest TypeScript Version
DESCRIPTION: Command to install the latest version of TypeScript as a dev dependency.

LANGUAGE: bash
CODE:
npm install typescript@latest --save-dev

----------------------------------------

TITLE: Creating a basic Astro page
DESCRIPTION: Example of a simple Astro page component with frontmatter and HTML template.

LANGUAGE: astro
CODE:
---
// Welcome to Astro! Everything between these triple-dash code fences
// is your "component frontmatter". It never runs in the browser.
console.log('This runs in your terminal, not the browser!');
---
<!-- Below is your "component template." It's just HTML, but with
    some magic sprinkled in to help you build great templates. -->
<html>
  <body>
    <h1>Hello, World!</h1>
  </body>
</html>
<style>
  h1 {
    color: orange;
  }
</style>

----------------------------------------

TITLE: Upgrading Astro and Integrations using yarn
DESCRIPTION: Commands to upgrade Astro to v3.x and update React and Tailwind integrations using yarn.

LANGUAGE: shell
CODE:
# Upgrade to Astro v3.x
yarn add astro@latest

# Example: upgrade React and Tailwind integrations
yarn add @astrojs/react@latest @astrojs/tailwind@latest

----------------------------------------

TITLE: Initializing Ghost API Client
DESCRIPTION: Creates and configures the Ghost content API client instance with site credentials.

LANGUAGE: typescript
CODE:
import GhostContentAPI from '@tryghost/content-api';

export const ghostClient = new GhostContentAPI({
    url: 'http://127.0.0.1:2368',
    key: import.meta.env.CONTENT_API_KEY,
    version: 'v5.0',
});

----------------------------------------

TITLE: Adding Slot Element to BaseLayout
DESCRIPTION: Demonstrates how to add a slot element to the layout component to enable content injection from child components.

LANGUAGE: astro
CODE:
---
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import '../styles/global.css';
const pageTitle = "Home Page";
---
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>{pageTitle}</title>
  </head>
  <body>
    <Header />
    <h1>{pageTitle}</h1>
    <slot />
    <Footer />
    <script>
      import "../scripts/menu.js";
    </script>
  </body>
</html>

----------------------------------------

TITLE: Configuring Supabase Client for OAuth in Astro
DESCRIPTION: This TypeScript snippet configures the Supabase client to use PKCE authentication flow for OAuth in an Astro project.

LANGUAGE: typescript
CODE:
import { createClient } from "@supabase/supabase-js";

export const supabase = createClient(
  import.meta.env.SUPABASE_URL,
  import.meta.env.SUPABASE_ANON_KEY,
  {
    auth: {
      flowType: "pkce",
    },
  },
);

----------------------------------------

TITLE: Initializing Git and Heroku App Setup
DESCRIPTION: Series of commands to initialize git repository, create a new Heroku app, and configure the static buildpack for deployment.

LANGUAGE: bash
CODE:
# version change
$ git init
$ git add .
$ git commit -m "My site ready for deployment."

# creates a new app with a specified name
$ heroku apps:create example

# set buildpack for static sites
$ heroku buildpacks:set https://github.com/heroku/heroku-buildpack-static.git

----------------------------------------

TITLE: Configuring Environment Variables in .env
DESCRIPTION: Sets up Builder.io API key and model name as environment variables for the Astro project.

LANGUAGE: ini
CODE:
BUILDER_API_PUBLIC_KEY=YOUR_API_KEY
BUILDER_BLOGPOST_MODEL='blogpost'

----------------------------------------

TITLE: Loading WASM in Astro
DESCRIPTION: Demonstrates how to load and initialize WebAssembly (WASM) files in Astro components.

LANGUAGE: javascript
CODE:
// Loads and initializes the requested WASM file
const wasm = await WebAssembly.instantiateStreaming(fetch('/example.wasm'));

----------------------------------------

TITLE: Configuring Astro Image Remote Patterns
DESCRIPTION: Shows how to define permitted image source URL patterns for remote image optimization.

LANGUAGE: javascript
CODE:
{
  image: {
    // Example: allow processing all images from your aws s3 bucket
    remotePatterns: [{
      protocol: 'https',
      hostname: '**.amazonaws.com',
    }],
  },
}

----------------------------------------

TITLE: Tutorial Checklist Component
DESCRIPTION: Implementation of a checklist component for tracking tutorial progress using Astro Box and Checklist components.

LANGUAGE: jsx
CODE:
<Box icon="check-list">

## Checklist for moving on

<Checklist>
- [ ] I'm ready to build this thing!
</Checklist>
</Box>

----------------------------------------

TITLE: Creating BlogPost Component for Storyblok
DESCRIPTION: Astro component implementation for rendering blog post content from Storyblok.

LANGUAGE: astro
CODE:
---
import { storyblokEditable, renderRichText } from '@storyblok/astro'

const { blok } = Astro.props
const content = renderRichText(blok.content)
---

<article {...storyblokEditable(blok)}>
  <h1>{blok.title}</h1>
  <p>{blok.description}</p>
  <Fragment set:html={content} />
</article>

----------------------------------------

TITLE: Building Astro Site
DESCRIPTION: This command builds your Astro site, preparing it for deployment. It should be run from your project's root directory.

LANGUAGE: shell
CODE:
npm run build

----------------------------------------

TITLE: Example of Generated Sitemap File
DESCRIPTION: Example of a generated sitemap-0.xml file for a two-page website.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9" xmlns:news="http://www.google.com/schemas/sitemap-news/0.9" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:image="http://www.google.com/schemas/sitemap-image/1.1" xmlns:video="http://www.google.com/schemas/sitemap-video/1.1">
  <url>
    <loc>https://stargazers.club/</loc>
  </url>
  <url>
    <loc>https://stargazers.club/second-page/</loc>
  </url>
</urlset>

----------------------------------------

TITLE: Defining Hashnode Data Schema with Zod in TypeScript
DESCRIPTION: TypeScript code using Zod to define the schema for Hashnode post data, including types for individual posts and collections of posts.

LANGUAGE: typescript
CODE:
import { z } from "astro/zod";

export const PostSchema = z.object({
    id: z.string(),
    author: z.object({
        name: z.string(),
        profilePicture: z.string(),
        }),
    publishedAt: z.string(),
    title: z.string(),
    subtitle: z.string(),
    brief: z.string(),
    slug: z.string(),
    readTimeInMinutes: z.number(),
    content: z.object({
        html: z.string(),
    }),
    tags: z.array(z.object({
        name: z.string(),
        slug: z.string(),
    })),
    coverImage: z.object({
        url: z.string(),
    }),
})

export const AllPostsDataSchema = z.object({
    id: z.string(),
    publication: z.object({
        title: z.string(),
        posts: z.object({
            pageInfo: z.object({
                hasNextPage: z.boolean(),
                endCursor: z.string(),
            }),
            edges: z.array(z.object({
                node: PostSchema,
            })),
        }),
    }),
})

export const PostDataSchema = z.object({
    id: z.string(),
    publication: z.object({
        title: z.string(),
        post: PostSchema,
    }),
})

export type Post = z.infer<typeof PostSchema>
export type AllPostsData = z.infer<typeof AllPostsDataSchema>
export type PostData = z.infer<typeof PostDataSchema>

----------------------------------------

TITLE: Creating Hamburger Menu Component in Astro
DESCRIPTION: Creates a basic hamburger menu component with three horizontal lines using Astro component syntax.

LANGUAGE: astro
CODE:
--- 
---
<div class="hamburger">
  <span class="line"></span>
  <span class="line"></span>
  <span class="line"></span>
</div>

----------------------------------------

TITLE: Scoped CSS specificity changes in Astro v1.0
DESCRIPTION: Examples showing how scoped CSS specificity is preserved in Astro v1.0 using the :where() pseudo-class

LANGUAGE: css
CODE:
div:where(.astro-XXXXXX) { color: red; } /* 0-0-1 specificity */

----------------------------------------

TITLE: Fetching WordPress Posts in Astro
DESCRIPTION: Demonstrates how to fetch and display WordPress posts using the REST API endpoint. Shows rendering of post titles and content using Astro's set:html directive.

LANGUAGE: astro
CODE:
---
const res = await fetch("https://[YOUR-SITE]/wp-json/wp/v2/posts");
const posts = await res.json();
---
<h1>Astro + WordPress 🚀</h1>
{
  posts.map((post) => (
      <h2 set:html={post.title.rendered} />
      <p set:html={post.content.rendered} />
  ))
}

----------------------------------------

TITLE: Configuring On-Demand Rendering in Astro
DESCRIPTION: Example of configuring a page for on-demand server rendering by setting prerender to false, overriding the default static rendering behavior.

LANGUAGE: astro
CODE:
---
export const prerender = false
---
<!-- server-rendered content -->
<!-- the rest of my site is static -->

----------------------------------------

TITLE: Initializing Supabase Client in Astro
DESCRIPTION: This TypeScript snippet initializes the Supabase client using environment variables in an Astro project.

LANGUAGE: typescript
CODE:
import { createClient } from "@supabase/supabase-js";

export const supabase = createClient(
  import.meta.env.SUPABASE_URL,
  import.meta.env.SUPABASE_ANON_KEY,
);

----------------------------------------

TITLE: Defining Article Interface for Strapi Content
DESCRIPTION: Creates a TypeScript interface to represent the structure of article data returned from Strapi.

LANGUAGE: typescript
CODE:
export default interface Article {
  id: number;
  attributes: {
    title: string;
    description: string;
    content: string;
    slug: string;
    createdAt: string;
    updatedAt: string;
    publishedAt: string;
  };
}

----------------------------------------

TITLE: Configuring AWS Amplify Build Settings for Yarn
DESCRIPTION: YAML configuration for AWS Amplify build settings using Yarn package manager. It outlines the build process, artifacts, and caching for an Astro project.

LANGUAGE: yaml
CODE:
version: 1
frontend:
  phases:
    preBuild:
      commands:
        - yarn install
    build:
      commands:
        - yarn build
  artifacts:
    baseDirectory: /dist
    files:
      - '**/*'
  cache:
    paths:
      - node_modules/**/*

----------------------------------------

TITLE: Astro Theme Card Component Usage
DESCRIPTION: Implementation of a Grid component containing a Card component to display the Sendit theme.

LANGUAGE: astro
CODE:
<Grid>
    <Card title="Sendit" href="https://astro.build/themes/details/sendit/" thumbnail="sendit.png"/>
</Grid>

----------------------------------------

TITLE: Demonstrating Correct Usage of getStaticPaths in Astro
DESCRIPTION: This snippet shows the correct way to return params from getStaticPaths in an Astro file. The params property should be an object containing key-value pairs for dynamic route segments.

LANGUAGE: astro
CODE:
---
export async function getStaticPaths() {
	return [
		{ params: { slug: "blog" } },
		{ params: { slug: "about" } }
	];
}
---

----------------------------------------

TITLE: Configuring Site URL in Astro Config
DESCRIPTION: Adding the site URL configuration to the Astro config file for RSS feed generation

LANGUAGE: javascript
CODE:
import { defineConfig } from "astro/config";

export default defineConfig({
  site: "https://example.com"
});

----------------------------------------

TITLE: Creating a Reusable BlogPost Component in Astro
DESCRIPTION: Defines a reusable BlogPost component that accepts title and url props to display individual blog post links.

LANGUAGE: astro
CODE:
---
const { title, url } = Astro.props
---
<li><a href={url}>{title}</a></li>

----------------------------------------

TITLE: Initializing Sitecore JSS Project with Astro
DESCRIPTION: Command to create a new Astro project with Sitecore JSS integration using the official project initialization tool.

LANGUAGE: shell
CODE:
npx @astro-sitecore-jss/create-astro-sitecore-jss@latest

----------------------------------------

TITLE: Installing Alpine.js Integration with yarn
DESCRIPTION: Uses yarn to install the @astrojs/alpinejs integration package for Astro projects.

LANGUAGE: shell
CODE:
yarn astro add alpinejs

----------------------------------------

TITLE: Replacing ResponseWithEncoding with ArrayBuffer
DESCRIPTION: Changes to replace the deprecated ResponseWithEncoding utility with an ArrayBuffer for file responses.

LANGUAGE: diff
CODE:
  export async function GET() {
    const file = await fs.readFile('./bob.png');
-   return new ResponseWithEncoding(file.toString('binary'), undefined, 'binary');
+   return new Response(file.buffer);
  }

----------------------------------------

TITLE: Creating a Server-Side Endpoint with Error Handling in Astro
DESCRIPTION: This example shows how to create a server-side endpoint in Astro that handles dynamic routes, performs database queries, and returns appropriate HTTP status codes and headers.

LANGUAGE: javascript
CODE:
import { getProduct } from '../db';

export async function GET({ params }) {
  const id = params.id;
  const product = await getProduct(id);

  if (!product) {
    return new Response(null, {
      status: 404,
      statusText: 'Não encontrado'
    });
  }

  return new Response(
    JSON.stringify(product), {
      status: 200,
      headers: {
        "Content-Type": "application/json"
      }
    }
  );
}

----------------------------------------

TITLE: Configuring Environment Variables
DESCRIPTION: Configure type-safe environment variables for your Astro project.

LANGUAGE: js
CODE:
// astro.config.mjs
import { defineConfig, envField } from "astro/config"

export default defineConfig({
  env: {
    schema: {
      API_URL: envField.string({ context: "client", access: "public", optional: true }),
      PORT: envField.number({ context: "server", access: "public", default: 4321 }),
      API_SECRET: envField.string({ context: "server", access: "secret" }),
    }
  }
})

----------------------------------------

TITLE: Configuring Default Prefetch Strategy in Astro
DESCRIPTION: Shows how to change the default prefetch strategy in the Astro configuration file, using the prefetch.defaultStrategy option.

LANGUAGE: javascript
CODE:
import { defineConfig } from 'astro/config';

export default defineConfig({
  prefetch: {
    defaultStrategy: 'viewport'
  }
});

----------------------------------------

TITLE: Basic Hello World Component with Console Log
DESCRIPTION: Shows a simple Astro component that logs a message to the browser console when loaded.

LANGUAGE: astro
CODE:
<h1>Welcome, world!</h1>

<script>
  console.log('Welcome, browser console!');
</script>

----------------------------------------

TITLE: Configuring i18n
DESCRIPTION: Configure internationalization options for your Astro site.

LANGUAGE: js
CODE:
export default defineConfig({
	i18n: {
		defaultLocale: "en",
		locales: ["en", "fr", "pt-br", "es"],
		fallback: {
			pt: "es",
		  fr: "en"
		}
	}
})

----------------------------------------

TITLE: Protecting routes with Clerk middleware
DESCRIPTION: Implementing route protection using Clerk middleware in an Astro project.

LANGUAGE: typescript
CODE:
import { clerkMiddleware, createRouteMatcher } from '@clerk/astro/server';

const isProtectedRoute = createRouteMatcher([
  '/dashboard(.*)',
  '/forum(.*)',
]);

export const onRequest = clerkMiddleware((auth, context) => {
  if (!auth().userId && isProtectedRoute(context.request)) {
    return auth().redirectToSignIn();
  }
});

----------------------------------------

TITLE: Configuring Package Workspaces in package.json
DESCRIPTION: JSON configuration for setting up workspaces in the root package.json file. This allows for development of multiple packages within a single project.

LANGUAGE: json
CODE:
{
  "name": "my-project",
  "workspaces": ["demo", "packages/*"]
}

----------------------------------------

TITLE: Converting Next.js Data Fetching to Astro
DESCRIPTION: Example of how to fetch data in Astro, replacing Next.js' getStaticProps with direct fetch calls in the frontmatter.

LANGUAGE: astro
CODE:
---
import { getCollection } from 'astro:content';

// Get all `src/content/blog/` entries
const allBlogPosts = await getCollection('blog');

// Get all `src/pages/posts/` entries
const allPosts = Object.values(import.meta.glob('../pages/posts/*.md', { eager: true }));

const response = await fetch('https://randomuser.me/api/');
const data = await response.json();
const randomUser = data.results[0];
---

----------------------------------------

TITLE: Configuring S3 Bucket Policy for Public Access
DESCRIPTION: JSON configuration for an S3 bucket policy that allows public read access to all objects in the bucket.

LANGUAGE: json
CODE:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "PublicReadGetObject",
      "Effect": "Allow",
      "Principal": "*",
      "Action": "s3:GetObject",
      "Resource": "arn:aws:s3:::<BUCKET_NAME>/*"
    }
  ]
}

----------------------------------------

TITLE: Configuring Cloudflare Image Service
DESCRIPTION: Example of configuring the Cloudflare image service in the Astro config file.

LANGUAGE: javascript
CODE:
import {defineConfig} from "astro/config";
import cloudflare from '@astrojs/cloudflare';

export default defineConfig({
  adapter: cloudflare({
     imageService: 'cloudflare'
  }),
  output: 'server'
})

----------------------------------------

TITLE: Configuring Prepr API Client
DESCRIPTION: Implementation of the Prepr API client function for making GraphQL queries to the CMS endpoint.

LANGUAGE: javascript
CODE:
export async function Prepr(query, variables) {
    const response = await fetch(import.meta.env.PREPR_ENDPOINT, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ query, variables }),
    })
    return response
}

----------------------------------------

TITLE: Creating Basic Tag Index Page with Astro Layout
DESCRIPTION: Sets up the initial tag index page using BaseLayout component and defining the page title.

LANGUAGE: astro
CODE:
---
import BaseLayout from '../../layouts/BaseLayout.astro';
const pageTitle = "Tag Index";
---
<BaseLayout pageTitle={pageTitle}></BaseLayout>

----------------------------------------

TITLE: Updating app.render Signature in Integrations API
DESCRIPTION: Changes to the app.render() method signature in the Integrations API to accept routeData and locals as properties of a single object.

LANGUAGE: diff
CODE:
- app.render(request, routeData, locals)
+ app.render(request, { routeData, locals })

----------------------------------------

TITLE: Enabling Vue JSX Support in Astro Config
DESCRIPTION: Configuration to enable Vue JSX support in the Astro project.

LANGUAGE: javascript
CODE:
import { defineConfig } from 'astro/config';
import vue from '@astrojs/vue';

export default defineConfig({
  // ...
  integrations: [vue({ jsx: true })],
});

----------------------------------------

TITLE: Configuring package.json for Astro SSR Deployment on Kinsta
DESCRIPTION: This snippet demonstrates the required configuration in package.json for deploying an Astro SSR site to Kinsta Application Hosting. It includes adding a name field, setting up build and start scripts, and installing the '@astrojs/node' package.

LANGUAGE: json
CODE:
{
  "name": "anything", // This is required, but the value does not matter.
  "scripts": {
    "dev": "astro dev",
    "start": "node ./dist/server/entry.mjs",
    "build": "astro build",
    "preview": "astro preview",
    "astro": "astro"
  },
  "dependencies": {
    "astro": "^2.2.0",
    "@astrojs/node": "^5.1.1"
  },
}

----------------------------------------

TITLE: Debugging with Console.log in Astro Components
DESCRIPTION: Demonstrates how to use console.log for debugging in both server-side and client-side contexts within Astro components.

LANGUAGE: astro
CODE:
---
console.log('Hi! I\'m the server. This is logged in the terminal where Astro is running.');
---

<script>
console.log('Hi! I\'m the client. This is logged in browser dev console.');
</script>

----------------------------------------

TITLE: Setting Astro Output Directory
DESCRIPTION: Shows how to configure the output directory for Astro builds.

LANGUAGE: javascript
CODE:
{
  outDir: './my-custom-build-directory'
}

----------------------------------------

TITLE: Configuring Remark Rehype
DESCRIPTION: Pass options to remark-rehype.

LANGUAGE: js
CODE:
{
  markdown: {
    // Example: Translate footnote text to a different language, in this case german
    remarkRehype: { footnoteLabel: "Fussnoten", footnoteBackLabel: "Zurück zur Referenz"},
  },
};

----------------------------------------

TITLE: Initializing Neon Client in Astro
DESCRIPTION: Creates a Neon client using the @neondatabase/serverless package and the configured environment variable in an Astro project.

LANGUAGE: typescript
CODE:
import { neon } from '@neondatabase/serverless';

export const sql = neon(import.meta.env.NEON_DATABASE_URL);

----------------------------------------

TITLE: Configuring Shiki Theme in Astro Config
DESCRIPTION: Sets the default Shiki theme for Markdown code blocks in the Astro configuration file.

LANGUAGE: js
CODE:
import { defineConfig } from 'astro/config';

export default defineConfig({
  markdown: {
    shikiConfig: {
      theme: 'dracula',
    },
  },
});

----------------------------------------

TITLE: Installing Vercel CLI
DESCRIPTION: Commands for installing the Vercel CLI globally and initiating deployment using different package managers.

LANGUAGE: shell
CODE:
npm install -g vercel
vercel

LANGUAGE: shell
CODE:
pnpm add -g vercel
vercel

LANGUAGE: shell
CODE:
yarn global add vercel
vercel

----------------------------------------

TITLE: Adding Dark Theme Styles in CSS
DESCRIPTION: Defines CSS styles for dark theme, including background color and text color changes.

LANGUAGE: css
CODE:
html.dark {
  background-color: #0d0950;
  color: #fff;
}

.dark .nav-links a {
  color: #fff;
}

----------------------------------------

TITLE: Basic Astro Layout Component
DESCRIPTION: Basic HTML layout component for an Astro blog application using Umbraco CMS.

LANGUAGE: astro
CODE:
---
---
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title>My Blog with Astro and Umbraco</title>
</head>
<body>
    <main>
        <slot />
    </main>
</body>
</html>

----------------------------------------

TITLE: Using CSS Variables with define:vars Directive
DESCRIPTION: Demonstrates how to define variables in frontmatter and use them in CSS styles using Astro's define:vars directive.

LANGUAGE: astro
CODE:
---
const skillColor = "navy";
---

LANGUAGE: astro
CODE:
<style define:vars={{skillColor}}>
  h1 {
    color: purple;
    font-size: 4rem;
  }
  .skill {
    color: var(--skillColor);
    font-weight: bold;
  }
</style>

----------------------------------------

TITLE: Setting SVG Rendering Mode
DESCRIPTION: Example showing how to override the default SVG rendering mode for a specific component.

LANGUAGE: astro
CODE:
---
import Logo from '../assets/logo.svg';
---

<Logo size={64} mode="sprite" />

----------------------------------------

TITLE: Installing @astrojs/rss Package
DESCRIPTION: Commands for installing the Astro RSS package using different package managers (npm, pnpm, yarn)

LANGUAGE: shell
CODE:
npm install @astrojs/rss

LANGUAGE: shell
CODE:
pnpm add @astrojs/rss

LANGUAGE: shell
CODE:
yarn add @astrojs/rss

----------------------------------------

TITLE: Installing Deno Adapter - Package Manager Commands
DESCRIPTION: Commands for installing the @deno/astro-adapter using different package managers (npm, pnpm, yarn).

LANGUAGE: shell
CODE:
npm install @deno/astro-adapter
pnpm install @deno/astro-adapter
yarn add @deno/astro-adapter

----------------------------------------

TITLE: Manually Installing @astrojs/vue Package with NPM
DESCRIPTION: Command to manually install the @astrojs/vue package using npm.

LANGUAGE: sh
CODE:
npm install @astrojs/vue

----------------------------------------

TITLE: Deploying Astro Site to Firebase Hosting
DESCRIPTION: Deploy your Astro site to Firebase Hosting. This command builds your Astro site and deploys it to Firebase.

LANGUAGE: shell
CODE:
npx firebase deploy --only hosting

LANGUAGE: shell
CODE:
pnpm exec firebase deploy --only hosting

LANGUAGE: shell
CODE:
yarn firebase deploy --only hosting

----------------------------------------

TITLE: Creating Dynamic Article Pages
DESCRIPTION: Astro component for rendering individual article pages using dynamic routing and the article detail query.

LANGUAGE: astro
CODE:
---
import Layout from '../layouts/Layout.astro';
import {Prepr} from '../lib/prepr.js';
import GetArticleBySlug from '../queries/get-article-by-slug.js';

const { slug } = Astro.params;
const response = await Prepr(GetArticleBySlug, {slug})
const { data } = await response.json()
const article = data.Article
---

<Layout title={article.title}>
  <main>
    <h1>{article.title}</h1>
    {
      article.content.map((content) => (
        <div>
          {
            content.__typename === "Assets" &&
            <img src={content.items[0].url} width="300" height="250"/>
          }
          {
            content.__typename === 'Text' &&
            <div set:html={content.body}></div>
          }
        </div>
      ))
    }
  </main>
</Layout>

----------------------------------------

TITLE: Configuring SmartyPants
DESCRIPTION: Enable or disable the SmartyPants formatter.

LANGUAGE: js
CODE:
{
  markdown: {
    smartypants: false,
  }
}

----------------------------------------

TITLE: Configuring Astro for React integration
DESCRIPTION: JavaScript configuration to add the React integration to an Astro project's config file.

LANGUAGE: javascript
CODE:
import { defineConfig } from 'astro/config';
import react from '@astrojs/react';

export default defineConfig({
  // ...
  integrations: [react()],
});

----------------------------------------

TITLE: Configuring Markdown Syntax Highlighting
DESCRIPTION: Choose which syntax highlighter to use for Markdown code blocks.

LANGUAGE: js
CODE:
{
  markdown: {
    // Example: Switch to use prism for syntax highlighting in Markdown
    syntaxHighlight: 'prism',
  }
}

----------------------------------------

TITLE: Creating IAM Policy for S3 and CloudFront Access
DESCRIPTION: JSON configuration for an IAM policy that grants permissions to upload files to S3 and invalidate CloudFront distribution files.

LANGUAGE: json
CODE:
{
  "Version": "2012-10-17",
  "Statement": [
      {
          "Sid": "VisualEditor0",
          "Effect": "Allow",
          "Action": [
              "s3:PutObject",
              "s3:ListBucket",
              "s3:DeleteObject",
              "cloudfront:CreateInvalidation"
          ],
          "Resource": [
              "<DISTRIBUTION_ARN>",
              "arn:aws:s3:::<BUCKET_NAME>/*",
              "arn:aws:s3:::<BUCKET_NAME>"
          ]
      }
  ]
}

----------------------------------------

TITLE: Defining Empty Collection for Content Layer API Migration
DESCRIPTION: This code shows how to define an empty collection when migrating from legacy collections to the new Content Layer API. It creates a 'blog' collection without specifying any schema, allowing Astro to generate an appropriate definition.

LANGUAGE: javascript
CODE:
// src/content/config.ts
import { defineCollection, z } from 'astro:content';

const blog = defineCollection({ })
 
export const collections = { blog };

----------------------------------------

TITLE: Defining Middleware with Type Safety in Astro
DESCRIPTION: Shows how to use the defineMiddleware() utility function to create middleware with automatic type safety for the context and next parameters.

LANGUAGE: typescript
CODE:
// src/middleware.ts
import { defineMiddleware } from "astro:middleware";

// `context` and `next` are automatically typed
export const onRequest = defineMiddleware((context, next) => {

});

----------------------------------------

TITLE: Updating package.json Dev Script for Tina
DESCRIPTION: Modification of the package.json development script to integrate Tina CMS with Astro's development server.

LANGUAGE: json
CODE:
{
    "scripts": {
        "dev": "astro dev",
        "dev": "tinacms dev -c \"astro dev\""
    }
}

----------------------------------------

TITLE: Basic Svelte Configuration Setup
DESCRIPTION: Initial setup for svelte.config.js to enable Vite preprocessing for Svelte components.

LANGUAGE: js
CODE:
import { vitePreprocess } from '@astrojs/svelte';

export default {
  preprocess: vitePreprocess(),
}

----------------------------------------

TITLE: Basic i18n Configuration in Astro
DESCRIPTION: Basic configuration example showing how to set up i18n routing in Astro with supported locales and default language.

LANGUAGE: javascript
CODE:
import { defineConfig } from "astro/config"
export default defineConfig({
  i18n: {
    locales: ["es", "en", "pt-br"],
    defaultLocale: "en",
  }
})

----------------------------------------

TITLE: Initializing ButterCMS Client in JavaScript
DESCRIPTION: Create a buttercms.js file to initialize and export the ButterCMS client using the API token from environment variables. This client can be used throughout the project for API calls.

LANGUAGE: javascript
CODE:
import Butter from "buttercms";

export const butterClient = Butter(import.meta.env.BUTTER_TOKEN);

----------------------------------------

TITLE: Sequencing Middleware Functions in Astro
DESCRIPTION: Demonstrates how to use the sequence() function to combine multiple middleware functions and execute them in a specific order.

LANGUAGE: javascript
CODE:
import { sequence } from "astro:middleware";

async function validation(_, next) {...}
async function auth(_, next) {...}
async function greeting(_, next) {...}

export const onRequest = sequence(validation, auth, greeting);

----------------------------------------

TITLE: Basic i18n Configuration in Astro
DESCRIPTION: Basic configuration example showing how to set up i18n routing in Astro with supported locales and default language.

LANGUAGE: javascript
CODE:
import { defineConfig } from "astro/config"
export default defineConfig({
  i18n: {
    locales: ["es", "en", "pt-br"],
    defaultLocale: "en",
  }
})

----------------------------------------

TITLE: Deploying to Surge
DESCRIPTION: This command deploys your built Astro site to Surge. It assumes your built files are in a 'dist' directory.

LANGUAGE: shell
CODE:
surge dist

----------------------------------------

TITLE: Installing @astrojs/vue Integration with NPM
DESCRIPTION: Command to install the @astrojs/vue integration using npm package manager.

LANGUAGE: sh
CODE:
npx astro add vue

----------------------------------------

TITLE: Updating site configuration with trailing slash
DESCRIPTION: JavaScript configuration update to add a trailing slash to the site URL in astro.config.mjs.

LANGUAGE: javascript
CODE:
// astro.config.mjs
import { defineConfig } from 'astro/config';

export default defineConfig({
  site: 'https://example.com/',
});

----------------------------------------

TITLE: Updating app.render() arguments in Adapter API
DESCRIPTION: Update app.render() to pass routeData and locals as properties of a single renderOptions object

LANGUAGE: js
CODE:
const response = await app.render(request, routeData, locals);
const response = await app.render(request, {routeData, locals});

----------------------------------------

TITLE: Configuring Markdown and MDX separately
DESCRIPTION: JavaScript configuration example showing how to set Markdown and MDX options independently in astro.config.mjs.

LANGUAGE: javascript
CODE:
// astro.config.mjs
import { defineConfig } from 'astro/config';
import mdx from '@astrojs/mdx';

export default defineConfig({
  markdown: {
    remarkPlugins: [remarkPlugin1],
    gfm: true,
  },
  integrations: [
    mdx({
      remarkPlugins: [remarkPlugin2],
      gfm: false,
    })
  ]
});

----------------------------------------

TITLE: Setting Allowed Image Domains
DESCRIPTION: Define a list of permitted origin domains for remote image optimization.

LANGUAGE: js
CODE:
// astro.config.mjs
{
  image: {
    // Example: Allow remote image optimization from a single domain
    domains: ['astro.build'],
  },
}

----------------------------------------

TITLE: SolidJS Component with Resource Example
DESCRIPTION: Example of a SolidJS component using createResource for async data fetching with automatic Suspense boundary handling.

LANGUAGE: tsx
CODE:
function CharacterName() {
  const [name] = createResource(() =>
    fetch('https://swapi.dev/api/people/1')
      .then((result) => result.json())
      .then((data) => data.name)
  );

  return (
    <>
      <h2>Name:</h2>
      <div>{name()}</div>
    </>
  );
}

----------------------------------------

TITLE: Basic Astro Page Structure
DESCRIPTION: Initial structure of an Astro page showing the basic HTML template setup

LANGUAGE: astro
CODE:
---
---
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <title>Astro</title>
  </head>
  <body>
    <a href="/">Home</a>
    <a href="/about/">About</a>
    <a href="/blog/">Blog</a>
    <h1>About Me</h1>
    <h2>... and my new Astro site!</h2>
    <p>I am working through Astro's introductory tutorial.</p>
  </body>
</html>

----------------------------------------

TITLE: Using redirectToFallback in Astro Middleware
DESCRIPTION: This example demonstrates how to use the redirectToFallback function in an Astro middleware to handle fallback redirects based on the i18n configuration.

LANGUAGE: javascript
CODE:
import { defineMiddleware } from "astro:middleware";
import { redirectToFallback } from "astro:i18n";

export const onRequest = defineMiddleware(async (context, next) => {
  const response = await next();
  if (response.status >= 300) {
    return redirectToFallback(context, response)
  }
  return response;
})

----------------------------------------

TITLE: Implementing a GET Endpoint in Astro
DESCRIPTION: This snippet demonstrates the correct way to implement a GET endpoint in Astro. It returns a Response object with JSON data, which is the expected behavior for an endpoint.

LANGUAGE: typescript
CODE:
import type { APIContext } from 'astro';

export async function GET({ request, url, cookies }: APIContext): Promise<Response> {
    return Response.json({
        success: true,
        result: 'Data from Astro Endpoint!'
    })
}

----------------------------------------

TITLE: Installing Netlify Adapter for Astro SSR
DESCRIPTION: Command to add the Netlify adapter to an Astro project for enabling server-side rendering.

LANGUAGE: bash
CODE:
npx astro add netlify

----------------------------------------

TITLE: Configuring TypeScript for Environment Variables
DESCRIPTION: Defines the ImportMetaEnv interface to provide IntelliSense for the STRAPI_URL environment variable in TypeScript.

LANGUAGE: typescript
CODE:
interface ImportMetaEnv {
  readonly STRAPI_URL: string;
}

----------------------------------------

TITLE: Using Social Media Component in Footer
DESCRIPTION: This snippet demonstrates how to use the Social Media component multiple times in the Footer, passing different props each time.

LANGUAGE: astro
CODE:
---
import Social from './Social.astro';
---

<footer>
  <Social platform="twitter" username="astrodotbuild" />
  <Social platform="github" username="withastro" />
  <Social platform="youtube" username="astrodotbuild" />
</footer>

----------------------------------------

TITLE: Querying Content Collections with getCollection()
DESCRIPTION: Shows how to query content collections using getCollection() with optional filtering.

LANGUAGE: astro
CODE:
---
import { getCollection } from 'astro:content';
// Obtiene todas las entradas de `src/content/blog/`
const allBlogPosts = await getCollection('blog');
// Solo regresa artīculos con `draft: true` en el frontmatter
const draftBlogPosts = await getCollection('blog', ({ data }) => {
  return data.draft === true;
});
---

----------------------------------------

TITLE: Basic Content Fetching in Astro
DESCRIPTION: Example of fetching blog posts from Kontent.ai and rendering them in an Astro component.

LANGUAGE: astro
CODE:
---
import { deliveryClient } from "../lib/kontent";

const blogPosts = await deliveryClient
    .items()
    .type("blogPost")
    .toPromise()
---
<html lang="en">
	<head>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width" />
		<title>Astro</title>
	</head>
	<body>
        <ul>
        {blogPosts.data.items.map(blogPost => (
            <li>{blogPost.elements.title.value}</li>
        ))}
        </ul>
    </body>
</html>

----------------------------------------

TITLE: Initializing Flotiq SDK Configuration
DESCRIPTION: Creates a reusable Flotiq API client instance using the configured API key.

LANGUAGE: typescript
CODE:
import { FlotiqApi } from "flotiq-api-ts";

export const flotiq = new FlotiqApi(import.meta.env.FLOTIQ_API_KEY);

----------------------------------------

TITLE: Using Astro's Image Component
DESCRIPTION: Demonstrates how to use Astro's built-in Image component for optimized images.

LANGUAGE: astro
CODE:
---
import { Image } from 'astro:assets';
import rocket from '../assets/rocket.png';
---
<Image src={rocket} alt="A rocketship in space." />
<img src={rocket.src} alt="A rocketship in space.">

----------------------------------------

TITLE: Manually Installing Partytown Integration with Yarn in Astro
DESCRIPTION: Command to manually install the @astrojs/partytown package using Yarn package manager in an Astro project.

LANGUAGE: sh
CODE:
yarn add @astrojs/partytown

----------------------------------------

TITLE: Using Script and Style Directives in Astro
DESCRIPTION: Demonstrates the usage of is:global and is:inline directives for <script> and <style> tags.

LANGUAGE: astro
CODE:
<style is:global>
  body a { color: red; }
</style>

<style is:inline>
  /* inline: relative & npm package imports are not supported. */
  @import '/assets/some-public-styles.css';
  span { color: green; }
</style>

<script is:inline>
  /* inline: relative & npm package imports are not supported. */
  console.log('I am inlined right here in the final output HTML.');
</script>

----------------------------------------

TITLE: Configuring Image Service
DESCRIPTION: Set the image service used for Astro's assets support.

LANGUAGE: js
CODE:
{
  image: {
    // Example: Enable Sharp-based image service with custom config
    service: {
			 entrypoint: 'astro/assets/services/sharp',
			 config: {
				limitInputPixels: false,
      },
		 },
  },
}

----------------------------------------

TITLE: Gatsby 레이아웃을 Astro 레이아웃으로 변환
DESCRIPTION: Gatsby의 레이아웃 컴포넌트를 Astro 레이아웃 파일로 변환하는 과정을 단계별로 보여줍니다.

LANGUAGE: astro
CODE:
---
import '../styles/style.css';
const { title, pathname } = Astro.props
---
<html>
  <head>
    <meta charset=\"utf-8\" />
    <link rel=\"icon\" type=\"image/svg+xml\" href=\"/favicon.svg\" />
    <meta name=\"viewport\" content=\"width=device-width\" />
    <title>Astro</title>
  </head>
  <body>
    <div class=\"global-wrapper\">
      <header class=\"global-header\">
        { pathname === \"/\"
        ?
          <h1 class=\"main-heading\">
          <a href=\"/\">{title}</a>
          </h1>
        :
          <h1 class=\"main-heading\">
          <a class=\"header-link-home\" href=\"/\">Home</a>
          </h1>
        }
      </header>
      <main>
        <slot />
      </main>
      <footer>
        &#169; {new Date().getFullYear()}, Built with
        {` `}
        <a href=\"https://www.astro.build\">Astro</a>
      </footer>
    </div>
  </body>
</html>

----------------------------------------

TITLE: Generating Static Article Pages with Astro
DESCRIPTION: Uses getStaticPaths to generate static pages for each Strapi article in an Astro project.

LANGUAGE: astro
CODE:
---
import fetchApi from '../../lib/strapi';
import type Article from '../../interfaces/article';

export async function getStaticPaths() {
  const articles = await fetchApi<Article[]>({
    endpoint: 'articles',
    wrappedByKey: 'data',
  });

  return articles.map((article) => ({
    params: { slug: article.attributes.slug },
    props: article,
  }));
}
type Props = Article;

const article = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <title>{article.attributes.title}</title>
  </head>

  <body>
    <main>
      <img src={import.meta.env.STRAPI_URL + article.attributes.image.data.attributes.url} />

      <h1>{article.attributes.title}</h1>

      <!-- Render plain text -->
      <p>{article.attributes.content}</p>
      <!-- Render markdown -->
      <MyMarkdownComponent>
        {article.attributes.content}
      </MyMarkdownComponent>
      <!-- Render html -->
      <Fragment set:html={article.attributes.content} />
    </main>
  </body>
</html>

----------------------------------------

TITLE: Setting Scoped Style Strategy
DESCRIPTION: Specify how Astro should scope styles within components.

LANGUAGE: js
CODE:
{
  scopedStyleStrategy: 'class'
}

----------------------------------------

TITLE: Configuring Astro with Preact Integration
DESCRIPTION: JavaScript configuration to add the Preact integration to an Astro project's config file.

LANGUAGE: javascript
CODE:
import { defineConfig } from 'astro/config';
import preact from '@astrojs/preact';

export default defineConfig({
  // ...
  integrations: [preact()],
});

----------------------------------------

TITLE: Updating ViewTransitions import and component name
DESCRIPTION: Replace the ViewTransitions import and component with the renamed ClientRouter in Astro v5.0

LANGUAGE: astro
CODE:
import { ViewTransitions } from 'astro:transitions';
import { ClientRouter } from 'astro:transitions';

<html>
  <head>
    ...
   <ViewTransitions />
   <ClientRouter />
  </head>
</html>

----------------------------------------

TITLE: Using redirectToDefaultLocale in Astro Middleware
DESCRIPTION: This example shows how to use the redirectToDefaultLocale function in an Astro middleware to redirect to the default locale.

LANGUAGE: javascript
CODE:
import { defineMiddleware } from "astro:middleware";
import { redirectToDefaultLocale } from "astro:i18n";

export const onRequest = defineMiddleware((context, next) => {
  if (context.url.pathname.startsWith("/about")) {
    return next();
  } else {
    return redirectToDefaultLocale(context, 302);
  }
})

----------------------------------------

TITLE: Importing View Transitions Components in Astro
DESCRIPTION: Demonstrates how to import the ClientRouter component and transition utilities from the astro:transitions module.

LANGUAGE: typescript
CODE:
import { ClientRouter, fade, slide } from 'astro:transitions';

----------------------------------------

TITLE: Configuring Astro for Deno Deployment
DESCRIPTION: Configuration setup in astro.config.mjs to enable Deno adapter and server output mode.

LANGUAGE: javascript
CODE:
import { defineConfig } from 'astro/config';
import deno from '@deno/astro-adapter';

export default defineConfig({
  output: 'server',
  adapter: deno(),
});

----------------------------------------

TITLE: Importing Astro Components
DESCRIPTION: Basic Astro component imports for Grid and Card components used in the documentation page layout.

LANGUAGE: astro
CODE:
import Grid from '~/components/FluidGrid.astro'
import Card from '~/components/ShowcaseCard.astro'

----------------------------------------

TITLE: Configuring Vite
DESCRIPTION: Pass additional configuration options to Vite.

LANGUAGE: js
CODE:
{
  vite: {
    ssr: {
      // Example: Force a package to be excluded from SSR processing
      external: ['broken-npm-package'],
    }
  }
}

LANGUAGE: js
CODE:
{
  vite: {
    // Example: Add custom Vite plugins directly to your Astro project
    plugins: [myPlugin()],
  }
}

----------------------------------------

TITLE: Implementing Basic Server Island Component in Astro
DESCRIPTION: Shows how to create a basic server island component using the server:defer directive.

LANGUAGE: astro
CODE:
---
import Avatar from '../components/Avatar.astro';
---
<Avatar server:defer />

----------------------------------------

TITLE: Configuring Cloudinary Content Loader for Astro Collections
DESCRIPTION: Example of setting up the Cloudinary content loader for Astro content collections.

LANGUAGE: js
CODE:
import { defineCollection } from 'astro:content';
import { cldAssetsLoader } from 'astro-cloudinary/loaders';

export const collections = {
  assets: defineCollection({
    loader: cldAssetsLoader({
      folder: '<Folder>' // Optional, without loads root directory
    })
  }),
}

----------------------------------------

TITLE: Implementing Server Exports Handler
DESCRIPTION: Shows how to implement a server exports handler for serverless hosts that expect specific function exports.

LANGUAGE: javascript
CODE:
import { App } from 'astro/app';

export function createExports(manifest) {
  const app = new App(manifest);

  const handler = (event, context) => {
    // ...
  };

  return { handler };
}

----------------------------------------

TITLE: Installing Partytown Integration with Yarn in Astro
DESCRIPTION: Command to install the @astrojs/partytown integration using Yarn package manager in an Astro project.

LANGUAGE: sh
CODE:
yarn astro add partytown

----------------------------------------

TITLE: Configuring Build Format
DESCRIPTION: Control the output file format for each page.

LANGUAGE: js
CODE:
{
  build: {
    // Example: Generate `page.html` instead of `page/index.html` during build.
    format: 'file'
  }
}

----------------------------------------

TITLE: Hydrating Interactive Framework Components in Astro
DESCRIPTION: Shows how to use client directives to hydrate framework components, making them interactive on the client-side. Different hydration strategies are demonstrated.

LANGUAGE: astro
CODE:
---
import InteractiveButton from '../components/InteractiveButton.jsx';
import InteractiveCounter from '../components/InteractiveCounter.jsx';
import InteractiveModal from '../components/InteractiveModal.svelte';
---
<InteractiveButton client:load />

<InteractiveCounter client:visible />

<InteractiveModal client:only="svelte" />

----------------------------------------

TITLE: Configuring Public Directory
DESCRIPTION: Set the directory for your static assets.

LANGUAGE: js
CODE:
{
  publicDir: './my-custom-publicDir-directory'
}

----------------------------------------

TITLE: GitLab CI/CD Pipeline Configuration
DESCRIPTION: GitLab CI/CD pipeline configuration for automatically building and deploying the Astro site. Specifies Node.js environment, build steps, and artifact paths.

LANGUAGE: yaml
CODE:
pages:
  image: node:lts

  before_script:
    - npm ci

  script:
    - npm run build

  artifacts:
    paths:
      - public

  only:
    - main

----------------------------------------

TITLE: Using Image URL in SVG
DESCRIPTION: Example of using an image URL in an SVG element.

LANGUAGE: astro
CODE:
---
import Sprite from '../assets/logo.svg?url';
---

<svg>
  <use xlink:href={Sprite + '#cart'} />
</svg>

----------------------------------------

TITLE: TypeScript Environment Variable Types Definition
DESCRIPTION: Type definitions for Kontent.ai environment variables to enable TypeScript IntelliSense.

LANGUAGE: typescript
CODE:
interface ImportMetaEnv {
  readonly KONTENT_ENVIRONMENT_ID: string;
  readonly KONTENT_PREVIEW_API_KEY: string;
}

----------------------------------------

TITLE: Authenticating Azion CLI
DESCRIPTION: Command to authenticate the Azion CLI with your Azion account.

LANGUAGE: bash
CODE:
azion login

----------------------------------------

TITLE: Setting PNPM Environment Variables for Node.js Deployment
DESCRIPTION: Environment variables configuration for deploying Astro with PNPM on Clever Cloud Node.js environment.

LANGUAGE: shell
CODE:
CC_NODE_BUILD_TOOL="custom"
CC_PRE_BUILD_HOOK="npm install -g pnpm && pnpm install"
CC_CUSTOM_BUILD_TOOL="pnpm run astro telemetry disable && pnpm build"

----------------------------------------

TITLE: Setting up Prepr Environment Variables
DESCRIPTION: Configuration for the Prepr API endpoint in the project's environment file.

LANGUAGE: ini
CODE:
PREPR_ENDPOINT=YOUR_PREPR_API_URL

----------------------------------------

TITLE: Accessing Cloudflare Runtime in Astro Components
DESCRIPTION: Example of accessing Cloudflare runtime variables in an Astro component.

LANGUAGE: astro
CODE:
---
const { env } = Astro.locals.runtime;
const myVariable = env.MY_VARIABLE;
---

----------------------------------------

TITLE: Creating Ghost Posts Index Page
DESCRIPTION: Builds an index page that displays a list of Ghost blog posts with links to individual post pages.

LANGUAGE: astro
CODE:
---
import { ghostClient } from '../lib/ghost';
const posts = await ghostClient.posts
    .browse({
        limit: 'all',
    })
    .catch((err) => {
        console.error(err);
    });
---

<html lang="en">
    <head>
        <title>Astro + Ghost 👻</title>
    </head>
    <body>
        {
            posts.map((post) => (
                <a href={`/post/${post.slug}`}>
                    <h1> {post.title} </h1>
                </a>
            ))
        }
    </body>
</html>

----------------------------------------

TITLE: Fetching and Displaying Blog Posts in Astro
DESCRIPTION: Demonstrates how to fetch blog posts from Flotiq and render them in an Astro template with title, slug, and content.

LANGUAGE: astro
CODE:
---
import { flotiq } from "../lib/flotiq";

const posts = await flotiq.BlogpostAPI.list();
---
<html lang="en">
	<head>
		<title>Astro</title>
	</head>
	<body>
		{posts.data?.map((post) => (
			<section>
				<a href={`/posts/${post.slug}`}>
				  <h2>{post.title}</h2>
            </a>
				<div>{post.internal?.createdAt}</div>
				<div set:html={post.content}/>
			</section>
		))}
	</body>
</html>

----------------------------------------

TITLE: Configuring Remote Image Patterns
DESCRIPTION: Define a list of permitted URL patterns for remote image optimization.

LANGUAGE: js
CODE:
{
  image: {
    // Example: Allow processing all images from AWS S3 bucket
    remotePatterns: [{
      protocol: 'https',
      hostname: '**.amazonaws.com',
    }],
  },
}

----------------------------------------

TITLE: Configuring Root Directory
DESCRIPTION: Set the project root directory when running Astro commands outside of the default directory.

LANGUAGE: js
CODE:
{
  root: './my-project-directory'
}

----------------------------------------

TITLE: Implementing Image Processing Logic
DESCRIPTION: Processes both mobile and desktop images using getImage function with specific dimensions and format settings.

LANGUAGE: astro
CODE:
const mobileImg = await getImage({
    src: mobileImgUrl,
    format: "webp",
    width: 200,
    height: 200,
});

const desktopImg = await getImage({
    src: desktopImgUrl,
    format: "webp",
    width: 800,
    height: 200,
});

----------------------------------------

TITLE: Importing CSS Files in Astro
DESCRIPTION: Shows how to import and apply CSS files in Astro components.

LANGUAGE: javascript
CODE:
// Load and inject 'style.css' onto the page
import './style.css';

----------------------------------------

TITLE: Setting Output Mode
DESCRIPTION: Specify the output target for your Astro build.

LANGUAGE: js
CODE:
import { defineConfig } from 'astro/config';

export default defineConfig({
  output: 'static'
})

----------------------------------------

TITLE: Updating ViewTransitions Import
DESCRIPTION: Example of updating the import of the ViewTransitions component.

LANGUAGE: astro
CODE:
---
import { ViewTransitions } from "astro:components astro:transitions"
---
<html lang="en">
  <head>
    <title>My Homepage</title>
    <ViewTransitions />
  </head>
  <body>
    <h1>Welcome to my website!</h1>
  </body>
</html>

----------------------------------------

TITLE: Implementing reCAPTCHA Client Interface in Astro
DESCRIPTION: Creates a client-side implementation of reCAPTCHA including the necessary script loading, button configuration, and verification handling. This component sends the captcha token to the server endpoint and handles the verification response.

LANGUAGE: astro
CODE:
<html>
  <head>
    <script is:inline src="https://www.google.com/recaptcha/api.js"></script>
  </head>

  <body>
    <button class="g-recaptcha" 
      data-sitekey="PUBLIC_SITE_KEY" 
      data-callback="onSubmit" 
      data-action="submit"> Click me to verify the captcha challenge! </button>

    <script is:inline>
      function onSubmit(token) {
        fetch("/recaptcha", {
          method: "POST",
          body: JSON.stringify({ recaptcha: token })
        })
        .then((response) => response.json())
        .then((gResponse) => {
          if (gResponse.success) {
            // Captcha verification was a success
          } else {
            // Captcha verification failed
          }
        })
      }
    </script>
  </body>
</html>

----------------------------------------

TITLE: Defining GraphQL Query for Articles List
DESCRIPTION: GraphQL query to fetch all articles from Prepr CMS with their IDs, slugs, and titles.

LANGUAGE: javascript
CODE:
const GetArticles = `
query {
    Articles {
      items {
        _id
        _slug
        title
    }
  }
}
`
export default GetArticles

----------------------------------------

TITLE: Setting Environment Variables for Kontent.ai in Astro
DESCRIPTION: Configuration of environment variables for Kontent.ai credentials including Environment ID and Preview API key.

LANGUAGE: ini
CODE:
KONTENT_ENVIRONMENT_ID=YOUR_ENVIRONMENT_ID
KONTENT_PREVIEW_API_KEY=YOUR_PREVIEW_API_KEY

----------------------------------------

TITLE: Implementing reCAPTCHA Client Interface in Astro
DESCRIPTION: Creates a client-side implementation of reCAPTCHA including the necessary script loading, button configuration, and verification handling. This component sends the captcha token to the server endpoint and handles the verification response.

LANGUAGE: astro
CODE:
<html>
  <head>
    <script is:inline src="https://www.google.com/recaptcha/api.js"></script>
  </head>

  <body>
    <button class="g-recaptcha" 
      data-sitekey="PUBLIC_SITE_KEY" 
      data-callback="onSubmit" 
      data-action="submit"> Click me to verify the captcha challenge! </button>

    <script is:inline>
      function onSubmit(token) {
        fetch("/recaptcha", {
          method: "POST",
          body: JSON.stringify({ recaptcha: token })
        })
        .then((response) => response.json())
        .then((gResponse) => {
          if (gResponse.success) {
            // Captcha verification was a success
          } else {
            // Captcha verification failed
          }
        })
      }
    </script>
  </body>
</html>

----------------------------------------

TITLE: Implementing Last Modified Display in Content Collections
DESCRIPTION: Example of displaying the last modified time in an Astro page using content collections

LANGUAGE: astro
CODE:
---
import { getCollection, render } from 'astro:content';
import dayjs from "dayjs";
import utc from "dayjs/plugin/utc";

dayjs.extend(utc);

export async function getStaticPaths() {
  const blog = await getCollection('blog');
  return blog.map(entry => ({
    params: { slug: entry.id },
    props: { entry },
  }));
}

const { entry } = Astro.props;
const { Content, remarkPluginFrontmatter } = await render(entry);

const lastModified = dayjs(remarkPluginFrontmatter.lastModified)
  .utc()
  .format("HH:mm:ss DD MMMM YYYY UTC");
---

<html>
  <head>...</head>
  <body>
    ...
    <p>Last Modified: {lastModified}</p>
    ...
  </body>
</html>

----------------------------------------

TITLE: Configuring Vue App Entrypoint in Astro
DESCRIPTION: Setting up a custom Vue app entrypoint in the Astro configuration to extend the Vue app instance.

LANGUAGE: javascript
CODE:
import { defineConfig } from 'astro/config';
import vue from '@astrojs/vue';

export default defineConfig({
  // ...
  integrations: [vue({ appEntrypoint: '/src/pages/_app' })],
});

----------------------------------------

TITLE: Configuring Cache Directory
DESCRIPTION: Sets the directory for caching build artifacts to speed up subsequent builds.

LANGUAGE: js
CODE:
{
  cacheDir: './my-custom-cache-directory'
}

----------------------------------------

TITLE: Configuring Hygraph Environment Variables in Astro
DESCRIPTION: Sets up the Hygraph API endpoint environment variable for use in the Astro project.

LANGUAGE: ini
CODE:
HYGRAPH_ENDPOINT=YOUR_HIGH_PERFORMANCE_API

----------------------------------------

TITLE: Configuring Astro Prefetch Options
DESCRIPTION: Shows how to configure prefetching for links in Astro.

LANGUAGE: javascript
CODE:
prefetch: {
	prefetchAll: true
}

----------------------------------------

TITLE: Programmatic Prefetching in Astro
DESCRIPTION: Demonstrates how to use the prefetch() function from the astro:prefetch module to programmatically prefetch pages in client-side scripts.

LANGUAGE: html
CODE:
<button id="btn">Click me</button>

<script>
  import { prefetch } from 'astro:prefetch';

  const btn = document.getElementById('btn');
  btn.addEventListener('click', () => {
    prefetch('/about');
  });
</script>

----------------------------------------

TITLE: Demonstrating Middleware Loading Error in Astro (TypeScript)
DESCRIPTION: This code snippet shows an example of how an error can be thrown while loading middleware in Astro. It imports the defineMiddleware function, deliberately throws an error, and then attempts to define middleware.

LANGUAGE: typescript
CODE:
import {defineMiddleware} from "astro:middleware";
throw new Error("Error thrown while loading the middleware.")
export const onRequest = defineMiddleware(() => {
  return "string"
});

----------------------------------------

TITLE: Creating Image Widget Component for ApostropheCMS
DESCRIPTION: Astro component implementation for image widget with placeholder support.

LANGUAGE: javascript
CODE:
---
const { widget } = Astro.props;
const placeholder = widget?.aposPlaceholder;
const src = placeholder ?
  '/images/image-widget-placeholder.jpg' :
  widget?._image[0]?.attachment?._urls['full'];
---
<style>
  .img-widget {
    width: 100%;
  }
</style>
<img class="img-widget" {src} />

----------------------------------------

TITLE: astro:config:setup 钩子示例
DESCRIPTION: 展示了astro:config:setup钩子的用法,用于设置项目配置。

LANGUAGE: javascript
CODE:
export default {
  name: 'my-integration',
  hooks: {
    'astro:config:setup': ({ updateConfig }) => {
      updateConfig({
        // 更新配置
      });
    }
  }
}

----------------------------------------

TITLE: Configuring No-op Image Service
DESCRIPTION: Example of configuring the no-op image service in the Astro configuration file.

LANGUAGE: javascript
CODE:
import { defineConfig } from 'astro/config';

export default defineConfig({
  image: {
    service: {
      entrypoint: 'astro/assets/services/noop'
    }
  }
});

----------------------------------------

TITLE: Fetching Articles from Umbraco API
DESCRIPTION: Astro component that fetches and displays articles from Umbraco's Content Delivery API, including article name, date, and content markup.

LANGUAGE: astro
CODE:
---
const res = await fetch('http://localhost/umbraco/delivery/api/v2/content?filter=contentType:article');
const articles = await res.json();
---
<h1>Astro + Umbraco 🚀</h1>
{
  articles.items.map((article) => (
      <h1>{article.name}</h1>
      <p>{article.properties.articleDate}</p>
      <div set:html={article.properties.content?.markup}></div>
  ))
}

----------------------------------------

TITLE: Styling Navigation and Hamburger Menu
DESCRIPTION: CSS styles for the hamburger menu component and responsive navigation, including mobile-first design and media queries.

LANGUAGE: css
CODE:
.hamburger {
  padding-right: 20px;
  cursor: pointer;
}

.hamburger .line {
  display: block;
  width: 40px;
  height: 5px;
  margin-bottom: 10px;
  background-color: #ff9776;
}

.nav-links {
  width: 100%;
  top: 5rem;
  left: 48px;
  background-color: #ff9776;
  display: none;
  margin: 0;
}

.nav-links a {
  display: block;
  text-align: center;
  padding: 10px 0;
  text-decoration: none;
  font-size: 1.2rem;
  font-weight: bold;
  text-transform: uppercase;
}

.nav-links a:hover, a:focus {
  background-color: #ff9776;
}

.expanded {
  display: unset;
}

@media screen and (min-width: 636px) {
  .nav-links {
    margin-left: 5em;
    display: block;
    position: static;
    width: auto;
    background: none;
  }

  .nav-links a {
    display: inline-block;
    padding: 15px 20px;
  }

  .hamburger {
    display: none;
  }
}

----------------------------------------

TITLE: Kontent.ai Delivery Client Setup
DESCRIPTION: Configuration of Kontent.ai delivery client for content fetching.

LANGUAGE: typescript
CODE:
import { createDeliveryClient } from "@kontent-ai/delivery-sdk";

export const deliveryClient = createDeliveryClient({
    environmentId: import.meta.env.KONTENT_ENVIRONMENT_ID,
    previewApiKey: import.meta.env.KONTENT_PREVIEW_API_KEY,
});

----------------------------------------

TITLE: Installing Cloudinary Node.js SDK
DESCRIPTION: Commands to install the Cloudinary Node.js SDK using different package managers.

LANGUAGE: shell
CODE:
npm install cloudinary

LANGUAGE: shell
CODE:
pnpm add cloudinary

LANGUAGE: shell
CODE:
yarn add cloudinary

----------------------------------------

TITLE: Configuring Sitemap XSL Stylesheet
DESCRIPTION: Example of how to set a custom XSL stylesheet URL for the sitemap.

LANGUAGE: javascript
CODE:
import { defineConfig } from 'astro/config';
import sitemap from '@astrojs/sitemap';

export default defineConfig({
  site: 'https://example.com',
  integrations: [
    sitemap({
      xslURL: '/sitemap.xsl'
    }),
  ],
});

----------------------------------------

TITLE: Removing handleForms Prop from ViewTransitions Component
DESCRIPTION: Changes to remove the deprecated handleForms prop from the ViewTransitions component as form submission is now handled by default.

LANGUAGE: astro
CODE:
---
import { ViewTransitions } from "astro:transitions";
---
<html>
  <head>
    <ViewTransitions handleForms />
  </head>
  <body>
    <!-- stuff here -->
  </body>
</html>

----------------------------------------

TITLE: Configuring HTML Compression
DESCRIPTION: Enable or disable HTML compression in Astro output.

LANGUAGE: js
CODE:
{
  compressHTML: false
}

----------------------------------------

TITLE: Manually Installing @astrojs/vue Package with PNPM
DESCRIPTION: Command to manually install the @astrojs/vue package using pnpm.

LANGUAGE: sh
CODE:
pnpm add @astrojs/vue

----------------------------------------

TITLE: Installing @rollup/plugin-yaml with npm
DESCRIPTION: Install the @rollup/plugin-yaml package as a dev dependency using npm.

LANGUAGE: shell
CODE:
npm install @rollup/plugin-yaml --save-dev

----------------------------------------

TITLE: Creating a Custom Loader Function in TypeScript
DESCRIPTION: Example of creating a custom loader function that fetches data from an API and returns an array of entries with unique IDs.

LANGUAGE: typescript
CODE:
const countries = defineCollection({
  loader: async () => {
    const response = await fetch("https://restcountries.com/v3.1/all");
    const data = await response.json();
    // Must return an array of entries with an id property
    // or an object with IDs as keys and entries as values
    return data.map((country) => ({
      id: country.cca3,
      ...country,
    }));
  },
  schema: /* ... */
});

----------------------------------------

TITLE: Customizing Vue JSX Compiler in Astro Config
DESCRIPTION: Example of customizing the Vue JSX compiler options in the Astro configuration.

LANGUAGE: javascript
CODE:
import { defineConfig } from 'astro/config';
import vue from '@astrojs/vue';

export default defineConfig({
  // ...
  integrations: [
    vue({
      jsx: {
        // treat any tag that starts with ion- as custom elements
        isCustomElement: (tag) => tag.startsWith('ion-'),
      },
    }),
  ],
});

----------------------------------------

TITLE: Keystatic Configuration Setup
DESCRIPTION: TypeScript configuration file for defining Keystatic content schema and storage settings.

LANGUAGE: typescript
CODE:
// keystatic.config.ts
import { config, fields, collection } from '@keystatic/core';

export default config({
  storage: {
    kind: 'local',
  },

  collections: {
    posts: collection({
      label: 'Posts',
      slugField: 'title',
      path: 'src/content/posts/*',
      format: { contentField: 'content' },
      schema: {
        title: fields.slug({ name: { label: 'Title' } }),
        content: fields.markdoc({
          label: 'Content',
        }),
      },
    }),
  },
});

----------------------------------------

TITLE: Disabling HTML Compression
DESCRIPTION: Controls whether HTML output is minified to reduce file sizes.

LANGUAGE: js
CODE:
{
  compressHTML: false
}

----------------------------------------

TITLE: Accessing Netlify Edge Context in Astro Components
DESCRIPTION: Example of accessing Netlify edge function context data within an Astro component.

LANGUAGE: astro
CODE:
---
const {
  geo: { city },
} = Astro.locals.netlify.context;
---

<h1>Hello there, friendly visitor from {city}!</h1>

----------------------------------------

TITLE: Configuring Shiki for Syntax Highlighting
DESCRIPTION: Customize Shiki syntax highlighter options for Markdown code blocks.

LANGUAGE: js
CODE:
import { defineConfig } from 'astro/config';
export default defineConfig({
  markdown: {
    shikiConfig: {
      // Choose from Shiki's built-in themes (or add your own)
      // https://shiki.style/themes
      theme: 'dracula',
      // Add custom languages
      // Note: Shiki has countless langs built-in, including .astro!
      // https://shiki.style/languages
      langs: [],
      // Enable word wrap to prevent horizontal scrolling
      wrap: true,
    },
  },
});

----------------------------------------

TITLE: Redirection dans Astro
DESCRIPTION: Exemple de redirection d'un utilisateur vers une page de connexion en utilisant Astro.redirect().

LANGUAGE: astro
CODE:
---
import { isLoggedIn } from '../utils';

const cookie = Astro.request.headers.get('cookie');

// Si l'utilisateur n'est pas connecté, redirigez-le vers la page de connexion
if (!isLoggedIn(cookie)) {
  return Astro.redirect('/login');
}
---

<p>Informations de l'utilisateur</p>

----------------------------------------

TITLE: Updating TypeScript Reference in env.d.ts
DESCRIPTION: Example of updating the TypeScript reference in the env.d.ts file.

LANGUAGE: typescript
CODE:
/// <reference types="astro/client-image" />
/// <reference types="astro/client" />

----------------------------------------

TITLE: Configuring Astro Server Host
DESCRIPTION: Demonstrates how to set which network IP addresses the server should listen on.

LANGUAGE: javascript
CODE:
{
  server: { host: true }
}

----------------------------------------

TITLE: Implementing Responsive Navigation Styles
DESCRIPTION: Adds CSS styles for responsive navigation including mobile-first design and media queries for larger screens.

LANGUAGE: css
CODE:
/* nav styles */

.nav-links {
  width: 100%;
  top: 5rem;
  left: 48px;
  background-color: #ff9776;
  display: none;
  margin: 0;
}

.nav-links a {
  display: block;
  text-align: center;
  padding: 10px 0;
  text-decoration: none;
  font-size: 1.2rem;
  font-weight: bold;
  text-transform: uppercase;
}

.nav-links a:hover,
.nav-links a:focus {
  background-color: #ff9776;
}

.expanded {
  display: unset;
}

@media screen and (min-width: 636px) {
  .nav-links {
    margin-left: 5em;
    display: block;
    position: static;
    width: auto;
    background: none;
  }

  .nav-links a {
    display: inline-block;
    padding: 15px 20px;
  }
}

----------------------------------------

TITLE: Configuring Astro Image Endpoint
DESCRIPTION: Demonstrates how to set a custom image endpoint for image optimization.

LANGUAGE: javascript
CODE:
{
  image: {
    // Example: Use a custom image endpoint at `/custom_endpoint`
    endpoint: {
		 	route: '/custom_endpoint',
		 	entrypoint: 'src/my_endpoint.ts',
		},
  },
}

----------------------------------------

TITLE: Using Cloudinary Image Component in Astro
DESCRIPTION: Example of using the CldImage component to display and optimize images in an Astro component.

LANGUAGE: jsx
CODE:
---
import { CldImage } from 'astro-cloudinary';
---
<CldImage
  src="<Public ID>"
  width="<Width>"
  height="<Height>"
  alt="<Description>"
/>

----------------------------------------

TITLE: Configuring Sitemap Filter
DESCRIPTION: Example of how to configure a filter function for the sitemap integration.

LANGUAGE: javascript
CODE:
import { defineConfig } from 'astro/config';
import sitemap from '@astrojs/sitemap';

export default defineConfig({
  site: 'https://stargazers.club',
  integrations: [
    sitemap({
      filter: (page) => page !== 'https://stargazers.club/secret-vip-lounge/',
    }),
  ],
});

----------------------------------------

TITLE: Setting Client Directory
DESCRIPTION: Control the output folder for client-side CSS and JavaScript when building a site with SSR pages.

LANGUAGE: js
CODE:
{
  output: 'server',
  build: {
    client: './client'
  }
}

----------------------------------------

TITLE: Manual NPM Installation of Svelte Dependencies
DESCRIPTION: Commands to manually install @astrojs/svelte and its peer dependencies using npm.

LANGUAGE: sh
CODE:
npm install @astrojs/svelte

LANGUAGE: sh
CODE:
npm install svelte typescript

----------------------------------------

TITLE: Using define:vars Directive in Astro
DESCRIPTION: Shows how to pass server-side variables to client-side <script> and <style> tags using define:vars.

LANGUAGE: astro
CODE:
---
const foregroundColor = "rgb(221 243 228)";
const backgroundColor = "rgb(24 121 78)";
const message = "Astro is awesome!";
---
<style define:vars={{ textColor: foregroundColor, backgroundColor }}>
  h1 {
    background-color: var(--backgroundColor);
    color: var(--textColor);
  }
</style>

<script define:vars={{ message }}>
  alert(message);
</script>

----------------------------------------

TITLE: Markdown Section Headers
DESCRIPTION: Markdown headers defining the structure of the error reference documentation file

LANGUAGE: markdown
CODE:
---
# NOTE: This file is auto-generated from 'scripts/error-docgen.mjs'
# Do not make edits to it directly, they will be overwritten.
# Instead, change this file: https://github.com/withastro/astro/blob/main/packages/astro/src/core/errors/errors-data.ts
# Translators, please remove this note and the <DontEditWarning/> component.

title: Error reference
i18nReady: true
githubURL: https://github.com/withastro/astro/blob/main/packages/astro/src/core/errors/errors-data.ts
---

----------------------------------------

TITLE: Creating Custom Alpine.js Entrypoint
DESCRIPTION: Defines a custom entrypoint for Alpine.js in an Astro project. This example adds the 'intersect' plugin to Alpine.js.

LANGUAGE: typescript
CODE:
import type { Alpine } from 'alpinejs'
import intersect from '@alpinejs/intersect'

export default (Alpine: Alpine) => {
    Alpine.plugin(intersect)
}

----------------------------------------

TITLE: Setting Light and Dark Mode Shiki Themes
DESCRIPTION: Configures dual Shiki themes for light and dark mode in the Astro configuration file.

LANGUAGE: js
CODE:
import { defineConfig } from 'astro/config';

export default defineConfig({
  markdown: {
    shikiConfig: {
      themes: {
        light: 'github-light',
        dark: 'github-dark',
      },
    },
  },
});

----------------------------------------

TITLE: Creating a Blog Post in Markdown
DESCRIPTION: Example markdown blog post with frontmatter including layout, title, author, description, image metadata, publication date, and tags.

LANGUAGE: markdown
CODE:
---
layout: ../../layouts/MarkdownPostLayout.astro
title: My Fourth Blog Post
author: Astro Learner
description: "This post will show up on its own!"
image: 
    url: "https://docs.astro.build/default-og-image.png"
    alt: "The word astro against an illustration of planets and stars."
pubDate: 2022-08-08
tags: ["astro", "successes"]
---
This post should show up with my other blog posts, because `import.meta.glob()` is returning a list of all my posts in order to create my list.

----------------------------------------

TITLE: Gatsby Link를 HTML 앵커 태그로 변환
DESCRIPTION: Gatsby의 Link 컴포넌트를 표준 HTML 앵커 태그로 변환하는 방법을 보여줍니다.

LANGUAGE: astro
CODE:
<Link to=\"/blog\">Blog</Link>
<a href=\"/blog\">Blog</a>

----------------------------------------

TITLE: Updating params handling in getStaticPaths
DESCRIPTION: Manually decode params values passed to getStaticPaths as they are no longer automatically decoded

LANGUAGE: astro
CODE:
---
export function getStaticPaths() {
  return [
    { params: { id: "%5Bpage%5D" } },
    { params: { id: decodeURI("%5Bpage%5D") } },
  ]
}

const { id } = Astro.params;
---

----------------------------------------

TITLE: Creating Header Component in Astro
DESCRIPTION: Creates a new Header component that wraps the Navigation component inside semantic HTML header and nav elements.

LANGUAGE: astro
CODE:
---
import Navigation from './Navigation.astro';
---
<header>
  <nav>
    <Navigation />
  </nav>
</header>

----------------------------------------

TITLE: Installing Astro via pnpm
DESCRIPTION: Command to create a new Astro project using pnpm.

LANGUAGE: bash
CODE:
# create a new project with pnpm
pnpm create astro@latest

----------------------------------------

TITLE: Installing Astro Starlight Template with Yarn
DESCRIPTION: Command to create a new Astro project using the Starlight documentation template with Yarn package manager.

LANGUAGE: shell
CODE:
yarn create astro --template starlight

----------------------------------------

TITLE: Configuring Partytown Options in Astro Config
DESCRIPTION: JavaScript code snippet showing how to pass configuration options to the Partytown integration in the Astro configuration file.

LANGUAGE: javascript
CODE:
export default defineConfig({
  // ...
  integrations: [
    partytown({
      config: {
        // options go here
      },
    }),
  ],
});

----------------------------------------

TITLE: PayloadCMS Server Configuration
DESCRIPTION: Configures the PayloadCMS server settings including collections, TypeScript output, and GraphQL schema generation.

LANGUAGE: typescript
CODE:
import { buildConfig } from "payload/config";
import path from "path";

import Users from "./collections/Users";
import Posts from "./collections/Posts";

export default buildConfig({
  serverURL: "http://localhost:4321",
  admin: {
    user: Users.slug,
  },
  collections: [Users, Posts],
  typescript: {
    outputFile: path.resolve(__dirname, "payload-types.ts"),
  },
  graphQL: {
    schemaOutputFile: path.resolve(__dirname, "generated-schema.graphql"),
  },
});

----------------------------------------

TITLE: Setting Source Directory
DESCRIPTION: Specifies the folder from which Astro will read your project files.

LANGUAGE: js
CODE:
{
  srcDir: './www',
}

----------------------------------------

TITLE: Basic Vercel Adapter Configuration
DESCRIPTION: Basic configuration setup for @astrojs/vercel adapter in astro.config.mjs file

LANGUAGE: javascript
CODE:
import { defineConfig } from 'astro/config';
import vercel from '@astrojs/vercel';

export default defineConfig({
  // ...
  output: 'server',
  adapter: vercel(),
});

----------------------------------------

TITLE: NightwatchJS Test Example
DESCRIPTION: Example of writing and running end-to-end tests using NightwatchJS in an Astro project.

LANGUAGE: javascript
CODE:
describe('Astro testing with Nightwatch', function () {
    before(browser => browser.navigateTo('http://localhost:4321/'));

    it("check that the title is correct", function (browser) {
        browser.assert.titleEquals('Astro is awesome!')
    });

    after(browser => browser.end());
});

----------------------------------------

TITLE: Importing Astro Components
DESCRIPTION: Import statements for Box and Checklist components used in the tutorial layout.

LANGUAGE: astro
CODE:
import Box from '~/components/tutorial/Box.astro';
import Checklist from '~/components/Checklist.astro';

----------------------------------------

TITLE: Enabling Prefetch for All Links by Default
DESCRIPTION: Demonstrates how to configure Astro to prefetch all links by default, using the prefetch.prefetchAll option in the configuration file.

LANGUAGE: javascript
CODE:
import { defineConfig } from 'astro/config';

export default defineConfig({
  prefetch: {
    prefetchAll: true
  }
});

----------------------------------------

TITLE: Handling POST Requests with JSON Data in Astro
DESCRIPTION: This example shows how to handle POST requests with JSON data in an Astro endpoint, including checking content type and parsing the request body.

LANGUAGE: typescript
CODE:
export const POST: APIRoute = async ({ request }) => {
  if (request.headers.get("Content-Type") === "application/json") {
    const body = await request.json();
    const name = body.name;
    return new Response(JSON.stringify({
      message: "Seu nome é: " + name
    }), {
      status: 200
    })
  }
  return new Response(null, { status: 400 });
}

----------------------------------------

TITLE: Converting Nuxt Dynamic Routes to Astro
DESCRIPTION: Example of converting Nuxt's dynamic route generation to Astro's getStaticPaths function for static site generation.

LANGUAGE: javascript
CODE:
{
	// ...
    generate: {
        async routes() {
          // Axios is required here unless you're using Node 18
          const res = await axios.get("https://pokeapi.co/api/v2/pokemon?limit=151")
          const pokemons = res.data.results;
          return pokemons.map(pokemon => {
            return '/pokemon/' + pokemon.name
          })
        }
      }
}

LANGUAGE: astro
CODE:
---
export const getStaticPaths = async () => {
  const res = await fetch("https://pokeapi.co/api/v2/pokemon?limit=151")
  const resJson = await res.json();
  const pokemons = resJson.results;
  return pokemons.map(({ name }) => ({
      params: { name },
    }))
}
// ...
---
<!-- Your template here -->

----------------------------------------

TITLE: Using the Image Component in Astro
DESCRIPTION: Demonstrates basic usage of the Image component to display an optimized image with required alt text.

LANGUAGE: astro
CODE:
---
// import the Image component and the image
import { Image } from 'astro:assets';
import myImage from "../assets/my_image.png"; // Image is 1600x900
---

<!-- `alt` is mandatory on the Image component -->
<Image src={myImage} alt="A description of my image." />

LANGUAGE: html
CODE:
<!-- Output -->
<!-- Image is optimized, proper attributes are enforced -->
<img
  src="/_astro/my_image.hash.webp"
  width="1600"
  height="900"
  decoding="async"
  loading="lazy"
  alt="A description of my image."
/>

----------------------------------------

TITLE: Updating create-astro command for new projects
DESCRIPTION: Remove --typescript flag from create-astro command as TypeScript settings are now standardized

LANGUAGE: shell
CODE:
-npm create astro@latest -- --template <example-name> --typescript strict
+npm create astro@latest -- --template <example-name>

----------------------------------------

TITLE: Adding Navigation Link for Blog Page
DESCRIPTION: Updated navigation structure including a link to the new blog page.

LANGUAGE: astro
CODE:
<body>
  <a href="/">Home</a>
  <a href="/about/">About</a>
  <a href="/blog/">Blog</a>

  <h1>My Astro Site</h1>
</body>

----------------------------------------

TITLE: Styling Social Media Component in Astro
DESCRIPTION: This snippet shows how to add CSS styles to the Social Media component using Astro's component-scoped styling.

LANGUAGE: astro
CODE:
---
const { platform, username } = Astro.props;
---
<a href={`https://www.${platform}.com/${username}`}>{platform}</a>

<style>
  a {
    padding: 0.5rem 1rem;
    color: white;
    background-color: #4c1d95;
    text-decoration: none;
  }
</style>

----------------------------------------

TITLE: Running Astro Development Server with pnpm
DESCRIPTION: Command to start the Astro development server using pnpm.

LANGUAGE: shell
CODE:
pnpm run dev

----------------------------------------

TITLE: Implementing Snipcart in Astro
DESCRIPTION: Complete Snipcart integration example including initialization, configuration, and product button implementation with custom attributes.

LANGUAGE: html
CODE:
<script>
  window.SnipcartSettings = {
    publicApiKey: "YOUR_API_KEY",
    loadStrategy: "manual",
    version: "3.7.1",
    addProductBehavior: "none",
    modalStyle: "side",
  };
</script>

LANGUAGE: html
CODE:
<button
  class="snipcart-add-item"
  data-item-id="astro-print"
  data-item-price="39.99"
  data-item-description="A framed print of the Astro logo."
  data-item-image="/assets/images/astro-print.jpg"
  data-item-name="Astro Print"
  data-item-custom1-name="Frame color"
  data-item-custom1-options="Brown|Silver[+10.00]|Gold[+20.00]"
  data-item-custom2-name="Delivery instructions"
  data-item-custom2-type="textarea"
>
  Add to cart
</button>

LANGUAGE: html
CODE:
<button class="snipcart-checkout">Click here to checkout</button>

----------------------------------------

TITLE: Installing @astrojs/preact Integration with NPM
DESCRIPTION: Command to install the @astrojs/preact integration using npm package manager.

LANGUAGE: shell
CODE:
npx astro add preact

----------------------------------------

TITLE: Displaying Hashnode Posts List in Astro Component
DESCRIPTION: Astro component code for fetching and displaying a list of Hashnode blog posts, including title, brief, cover image, and a link to the full post.

LANGUAGE: astro
CODE:
---
import { getAllPosts } from '../lib/client';

const data = await getAllPosts();
const allPosts = data.publication.posts.edges;

---

<html lang="en">
    <head>
        <title>Astro + Hashnode</title>
    </head>
    <body>

        {
            allPosts.map((post) => (
                <div>
                    <h2>{post.node.title}</h2>
                    <p>{post.node.brief}</p>
                    <img src={post.node.coverImage.url} alt={post.node.title} />
                    <a href={`/post/${post.node.slug}`}>Read more</a>
                </div>
            ))
        }
    </body>
</html>

----------------------------------------

TITLE: Disabling Partytown Debug Mode in Astro Config
DESCRIPTION: JavaScript code snippet demonstrating how to disable Partytown's debug mode in the Astro configuration file.

LANGUAGE: javascript
CODE:
export default defineConfig({
  // ...
  integrations: [
    partytown({
      // Example: Disable debug mode.
      config: { debug: false },
    }),
  ],
});

----------------------------------------

TITLE: Importing Components in Astro
DESCRIPTION: This snippet demonstrates importing various custom components used in the tutorial, including Box, Checklist, MultipleChoice, and Option from specific paths.

LANGUAGE: astro
CODE:
import Box from '~/components/tutorial/Box.astro';
import Checklist from '~/components/Checklist.astro';
import MultipleChoice from '~/components/tutorial/MultipleChoice.astro';
import Option from '~/components/tutorial/Option.astro';

----------------------------------------

TITLE: Adding Alpine.js TypeScript Intellisense
DESCRIPTION: Adds TypeScript type definitions for Alpine.js to enable IDE autocompletion. This should be added to the project's environment declaration file.

LANGUAGE: typescript
CODE:
interface Window {
  Alpine: import('alpinejs').Alpine;
}

----------------------------------------

TITLE: Starting Astro Development Server with pnpm
DESCRIPTION: Command to start the Astro development server using pnpm, enabling live preview and development of your Astro project.

LANGUAGE: shell
CODE:
pnpm run dev

----------------------------------------

TITLE: Defining Supabase Environment Variables Types in Astro
DESCRIPTION: This TypeScript snippet defines the types for Supabase environment variables to provide IntelliSense in an Astro project.

LANGUAGE: typescript
CODE:
interface ImportMetaEnv {
  readonly SUPABASE_URL: string
  readonly SUPABASE_ANON_KEY: string
}

interface ImportMeta {
  readonly env: ImportMetaEnv
}

----------------------------------------

TITLE: API Endpoint Session Management
DESCRIPTION: Implementation of session handling in an API endpoint for managing cart items.

LANGUAGE: typescript
CODE:
import type { APIContext } from 'astro';

export async function POST(req: Request, context: APIContext) {
  const cart = await context.session.get('cart');
  cart.push(req.body.item);
  await context.session.set('cart', cart);
  return Response.json(cart);
}

----------------------------------------

TITLE: Updating RouteData type to IntegrationRouteData in integrations
DESCRIPTION: Update adapter to change the type of entryPoints from RouteData to IntegrationRouteData

LANGUAGE: js
CODE:
import type {RouteData} from 'astro';
import type {IntegrationRouteData} from "astro"

function useRoute(route: RouteData) {
function useRoute(route: IntegrationRouteData) {
}

----------------------------------------

TITLE: Error Message and Documentation Content
DESCRIPTION: Main content of the error documentation including the error message, explanation of what went wrong, and reference links.

LANGUAGE: markdown
CODE:
> **NoMatchingStaticPathFound**: A `getStaticPaths()` route pattern was matched, but no matching static path was found for requested path `PATH_NAME`.

## What went wrong?
A [dynamic route](/en/guides/routing/#dynamic-routes) was matched, but no corresponding path was found for the requested parameters. This is often caused by a typo in either the generated or the requested path.

**See Also:**
-  [getStaticPaths()](/en/reference/routing-reference/#getstaticpaths)

----------------------------------------

TITLE: Importing Navigation Component in Astro Page
DESCRIPTION: Shows how to import and implement the Navigation component in an Astro page file. Includes the import statement and component usage, replacing individual navigation links.

LANGUAGE: astro
CODE:
---
import Navigation from '../components/Navigation.astro';
import "../styles/global.css";

const pageTitle = "Home Page";
---

----------------------------------------

TITLE: Astro Component Import
DESCRIPTION: Import statement for the DontEditWarning component used in the error documentation.

LANGUAGE: astro
CODE:
import DontEditWarning from '~/components/DontEditWarning.astro'

----------------------------------------

TITLE: Setting Up CNAME for Custom Domain
DESCRIPTION: This snippet shows the content of a CNAME file used to set up a custom subdomain for GitHub Pages deployment.

LANGUAGE: plaintext
CODE:
sub.mydomain.com

----------------------------------------

TITLE: Configuring Astro Client Directory
DESCRIPTION: Shows how to set the output directory for client-side CSS and JavaScript in Astro SSR builds.

LANGUAGE: javascript
CODE:
{
  output: 'server',
  build: {
    client: './client'
  }
}

----------------------------------------

TITLE: Using Image Component with Valid Sources in Astro
DESCRIPTION: This snippet demonstrates the correct usage of the Image component in Astro, showing how to use both imported images and remote image URLs as valid src values.

LANGUAGE: astro
CODE:
---
import { Image } from "astro:assets";
import myImage from "../assets/my_image.png";
---

<Image src={myImage} alt="..." />
<Image src="https://example.com/logo.png" width={300} height={300} alt="..." />

----------------------------------------

TITLE: Calling a Server Endpoint in an Astro Page
DESCRIPTION: This snippet demonstrates how to import and call a server endpoint from an Astro page's component script. It uses the Astro global to provide request context and displays the response data in the page content.

LANGUAGE: astro
CODE:
---
import { GET } from './api/hello.ts'

let response = await GET(Astro)
const data = await response.json()
---

<h1>{data.greeting} world!</h1>

----------------------------------------

TITLE: Adding Drupal credentials to .env file
DESCRIPTION: Shows examples of adding various Drupal authentication credentials to the .env file.

LANGUAGE: ini
CODE:
DRUPAL_BASIC_USERNAME="editor"
DRUPAL_BASIC_PASSWORD="editor"
DRUPAL_JWT_TOKEN="abc123"

----------------------------------------

TITLE: Basic Database Configuration
DESCRIPTION: Initial database configuration setup with empty tables definition

LANGUAGE: ts
CODE:
// db/config.ts
import { defineDb } from 'astro:db';

export default defineDb({
  tables: {},
})

----------------------------------------

TITLE: Calling a Server Endpoint in an Astro Page
DESCRIPTION: This snippet demonstrates how to import and call a server endpoint from an Astro page's component script. It uses the Astro global to provide request context and displays the response data in the page content.

LANGUAGE: astro
CODE:
---
import { GET } from './api/hello.ts'

let response = await GET(Astro)
const data = await response.json()
---

<h1>{data.greeting} world!</h1>

----------------------------------------

TITLE: Installing Preact in Astro Project
DESCRIPTION: Commands to add Preact support to an Astro project using different package managers.

LANGUAGE: sh
CODE:
npx astro add preact

LANGUAGE: sh
CODE:
pnpm astro add preact

LANGUAGE: sh
CODE:
yarn astro add preact

----------------------------------------

TITLE: Installing Alpine.js Integration with pnpm
DESCRIPTION: Uses pnpm to install the @astrojs/alpinejs integration package for Astro projects.

LANGUAGE: shell
CODE:
pnpm astro add alpinejs

----------------------------------------

TITLE: Installing Keystatic Core Packages
DESCRIPTION: Commands to install core Keystatic packages using different package managers.

LANGUAGE: shell
CODE:
npm install @keystatic/core @keystatic/astro

LANGUAGE: shell
CODE:
pnpm add @keystatic/core @keystatic/astro

LANGUAGE: shell
CODE:
yarn add @keystatic/core @keystatic/astro

----------------------------------------

TITLE: Configuring Astro Sessions in Config File
DESCRIPTION: Configuration setup for enabling experimental sessions in Astro with adapter and driver options.

LANGUAGE: javascript
CODE:
{
  adapter: node({
    mode: "standalone",
  }),
  experimental: {
    session: true,
  },
}

----------------------------------------

TITLE: Configuring Vite Options
DESCRIPTION: Passes additional configuration options to Vite for advanced customization.

LANGUAGE: js
CODE:
{
  vite: {
    ssr: {
      external: ['broken-npm-package'],
    }
  }
}

----------------------------------------

TITLE: Upgrading Astro and Official Integrations using PNPM
DESCRIPTION: Command to upgrade Astro and its official integrations to the latest version using PNPM.

LANGUAGE: shell
CODE:
pnpm dlx @astrojs/upgrade

----------------------------------------

TITLE: Enabling experimental.preserveScriptOrder in Astro Configuration
DESCRIPTION: This snippet shows how to enable the experimental.preserveScriptOrder feature in the Astro configuration file. It sets the flag to true, which will preserve the order of <style> and <script> tags in the rendered output.

LANGUAGE: javascript
CODE:
import { defineConfig } from "astro/config"

export default defineConfig({
  experimental: {
    preserveScriptOrder: true
  }
})

----------------------------------------

TITLE: Updating MDX configuration
DESCRIPTION: JavaScript configuration update to replace extendPlugins with new options in the MDX integration configuration.

LANGUAGE: javascript
CODE:
// astro.config.mjs
import { defineConfig } from 'astro/config';
import mdx from '@astrojs/mdx';

export default defineConfig({
  integrations: [
    mdx({
      extendMarkdownConfig: false,
      smartypants: true,
      gfm: true,
    }),
  ],
});

----------------------------------------

TITLE: Image Metadata Error Definition in MDX
DESCRIPTION: Error documentation page structure for image metadata processing failures in Astro. Includes frontmatter configuration, imports, and error message formatting.

LANGUAGE: mdx
CODE:
---
# NOTE: This file is auto-generated from 'scripts/error-docgen.mjs'
# Do not make edits to it directly, they will be overwritten.
# Instead, change this file: https://github.com/withastro/astro/blob/main/packages/astro/src/core/errors/errors-data.ts
# Translators, please remove this note and the <DontEditWarning/> component.

title: Could not process image metadata.
i18nReady: true
githubURL: https://github.com/withastro/astro/blob/main/packages/astro/src/core/errors/errors-data.ts
---
import DontEditWarning from '~/components/DontEditWarning.astro'

<DontEditWarning />


> Could not process image metadata for `IMAGE_PATH`.

## What went wrong?
Astro could not process the metadata of an image you imported. This is often caused by a corrupted or malformed image and re-exporting the image from your image editor may fix this issue.

**See Also:**
-  [Images](/en/guides/images/)

----------------------------------------

TITLE: Adding Basic Page Styles with Astro Style Tag
DESCRIPTION: Demonstrates how to add a style tag to an Astro page to style the h1 element with purple color and large font size.

LANGUAGE: astro
CODE:
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <title>{pageTitle}</title>
    <style>
      h1 {
        color: purple;
        font-size: 4rem;
      }
    </style>
  </head>

----------------------------------------

TITLE: Astro Component Import and Usage
DESCRIPTION: Imports and uses a DontEditWarning component in an Astro documentation page. This is part of the error documentation structure.

LANGUAGE: astro
CODE:
import DontEditWarning from '~/components/DontEditWarning.astro'

<DontEditWarning />

----------------------------------------

TITLE: Accessing SST Resources in Astro Components
DESCRIPTION: Example of how to access SST resources like buckets within Astro components using the SST Resource utility.

LANGUAGE: astro
CODE:
---
import { Resource } from "sst"
console.log(Resource.MyBucket.name)
---

----------------------------------------

TITLE: Configuring Astro Dev Toolbar
DESCRIPTION: Demonstrates how to enable or disable the Astro Dev Toolbar.

LANGUAGE: javascript
CODE:
{
  devToolbar: { enabled: false }
}

----------------------------------------

TITLE: Configuring package.json for Static Astro Deployment on Kinsta
DESCRIPTION: This snippet shows the necessary configuration in package.json for deploying a static Astro site to Kinsta Application Hosting. It includes adding a name field, setting up build and start scripts, and installing the 'serve' package.

LANGUAGE: json
CODE:
{
  "name": "anything", // This is required, but the value does not matter.
  "scripts": {
    "dev": "astro dev",
    "start": "serve dist/",
    "build": "astro build",
    "preview": "astro preview",
    "astro": "astro"
  },
  "dependencies": {
    "astro": "^2.2.0",
    "serve": "^14.0.1"
  },
}

----------------------------------------

TITLE: Implementing Dynamic Routing for JSON Endpoints in Astro
DESCRIPTION: This snippet demonstrates how to use dynamic routing for JSON endpoints in Astro. It exports a GET function and a getStaticPaths function to generate multiple endpoints.

LANGUAGE: typescript
CODE:
import type { APIRoute } from 'astro';

const usernames = ["Sarah", "Chris", "Yan", "Elian"]

export const GET: APIRoute = ({ params, request }) => {
  const id = params.id;
  return new Response(
    JSON.stringify({
      name: usernames[id]
    })
  )
}

export function getStaticPaths() {
  return [ 
    { params: { id: "0"} },
    { params: { id: "1"} },
    { params: { id: "2"} },
    { params: { id: "3"} }
  ]
}

----------------------------------------

TITLE: Using is:raw Directive in Astro
DESCRIPTION: Demonstrates how to use the is:raw directive to treat child content as raw text, ignoring Astro templating syntax.

LANGUAGE: astro
CODE:
---
import Katex from '../components/Katex.astro';
---
<Katex is:raw>Some conflicting {syntax} here</Katex>

----------------------------------------

TITLE: Basic Page Linking in Astro
DESCRIPTION: Demonstrates how to create links between pages using standard HTML anchor tags in Astro components.

LANGUAGE: astro
CODE:
Read more <a href="/authors/sonali/">about Sonali</a>.

----------------------------------------

TITLE: Configuring MDX Integration in Astro
DESCRIPTION: JavaScript code to apply the MDX integration in the Astro configuration file.

LANGUAGE: javascript
CODE:
import { defineConfig } from 'astro/config';
import mdx from '@astrojs/mdx';

export default defineConfig({
  // ...
  integrations: [mdx()],
});

----------------------------------------

TITLE: Updating Astro.glob() for MDX files
DESCRIPTION: Examples of updating Astro.glob() to work with MDX files

LANGUAGE: astro
CODE:
---
// Multiple imports with Astro.glob
const mdxPosts = await Astro.glob('./posts/*.mdx');
---

{mdxPosts.map(Post => <Post.default />)}

LANGUAGE: astro
CODE:
---
// Import a single page
import { default as About } from './about.mdx';
---

<About />

----------------------------------------

TITLE: Upgrading Astro and integrations via pnpm
DESCRIPTION: Shell commands to upgrade Astro and its integrations to the latest version using pnpm.

LANGUAGE: shell
CODE:
# Upgrade to Astro v2.x
pnpm add astro@latest

# Example: upgrade React and Tailwind integrations
pnpm add @astrojs/react@latest @astrojs/tailwind@latest

----------------------------------------

TITLE: Configuring Client Prerendering in Astro
DESCRIPTION: This snippet demonstrates how to enable client prerendering and configure prefetch options in the Astro configuration file. It sets prefetch to fetch all links and use the viewport strategy by default, while enabling the experimental client prerender feature.

LANGUAGE: javascript
CODE:
// astro.config.mjs
{
  prefetch: {
    prefetchAll: true,
    defaultStrategy: 'viewport',
  },
	experimental: {
		clientPrerender: true,
	},
}

----------------------------------------

TITLE: Updating RSS feed configuration
DESCRIPTION: JavaScript code update to use the new pagesGlobToRssItems wrapper for generating RSS feed items.

LANGUAGE: javascript
CODE:
// src/pages/rss.xml.js
import rss, {
  pagesGlobToRssItems
} from '@astrojs/rss';

export async function get(context) {
  return rss({
    items: await pagesGlobToRssItems(
      import.meta.glob('./blog/*.{md,mdx}'),
    ),
  });
}

----------------------------------------

TITLE: Defining Astro Error Documentation in Markdown
DESCRIPTION: This snippet defines the structure and content of an error documentation page in Astro. It includes metadata, a title, and placeholders for dynamic error information.

LANGUAGE: markdown
CODE:
---
# NOTE: This file is auto-generated from 'scripts/error-docgen.mjs'
# Do not make edits to it directly, they will be overwritten.
# Instead, change this file: https://github.com/withastro/astro/blob/main/packages/astro/src/core/errors/errors-data.ts
# Translators, please remove this note and the <DontEditWarning/> component.

title: Session data could not be saved.
i18nReady: true
githubURL: https://github.com/withastro/astro/blob/main/packages/astro/src/core/errors/errors-data.ts
---
import DontEditWarning from '~/components/DontEditWarning.astro'

<DontEditWarning />


> Error when saving session data with driver `DRIVER`. `ERROR`

## What went wrong?
Thrown when the session data could not be saved.

**See Also:**
-  [experimental.session](/en/reference/experimental-flags/sessions/)

----------------------------------------

TITLE: Variable Definition and Usage in Astro
DESCRIPTION: Demonstrates how to define variables in frontmatter and use them in the template using curly braces

LANGUAGE: astro
CODE:
---
const identity = {
  firstName: "Sarah",
  country: "Canada",
  occupation: "Technical Writer",
  hobbies: ["photography", "birdwatching", "baseball"]
};
const skills = ["HTML", "CSS", "JavaScript", "React", "Astro", "Writing Docs"];
---
<p>Here are a few facts about me:</p>
<ul>
  <li>My name is {identity.firstName}.</li>
  <li>I live in {identity.country} and I work as a {identity.occupation}.</li>
</ul>

----------------------------------------

TITLE: Astro Tutorial Frontmatter Configuration
DESCRIPTION: Frontmatter configuration for an Astro tutorial page defining metadata like type, title, sidebar label and i18n status.

LANGUAGE: yaml
CODE:
---
type: tutorial
unitTitle: 'Welcome, world!'
title: Build your first Astro Blog
sidebar:
  label: 'Tutorial: Build a blog'
description: >
  Learn the basics of Astro with a project-based tutorial. All the background
  knowledge you need to get started!
i18nReady: true
---

----------------------------------------

TITLE: Using DontEditWarning Component
DESCRIPTION: Renders the DontEditWarning component to display an editing warning message.

LANGUAGE: astro
CODE:
<DontEditWarning />

----------------------------------------

TITLE: Creating an Astro Layout Component
DESCRIPTION: Example of an Astro layout component that provides a basic HTML structure with a slot for page content.

LANGUAGE: astro
CODE:
---
---
<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>Astro</title>
	</head>
	<body>
    <!-- Wrap the slot element with your existing layout templating -->
		<slot />
	</body>
</html>

----------------------------------------

TITLE: Updating MDX server renderer import for Container API
DESCRIPTION: Update the import location for the MDX server renderer when using the experimental Astro Container API

LANGUAGE: ts
CODE:
import mdxRenderer from "astro/jsx/server.js";
import mdxRenderer from "@astrojs/mdx/server.js";

----------------------------------------

TITLE: Package.json Start Script Configuration
DESCRIPTION: Script configuration in package.json for running SSR Astro sites on Node.js.

LANGUAGE: json
CODE:
"scripts": {
  "start": "node ./dist/server/entry.mjs"
}

----------------------------------------

TITLE: Configuring Xata Environment Variables in .env
DESCRIPTION: Sets up the Xata API key and branch name in the project's .env file. These variables are used to authenticate and specify the Xata branch for database operations.

LANGUAGE: ini
CODE:
XATA_API_KEY=hash_key

# Xata branch that will be used
# if there's not a xata branch with
# the same name as your git branch
XATA_BRANCH=main

----------------------------------------

TITLE: Using DontEditWarning Component in Astro Markdown
DESCRIPTION: This code snippet demonstrates the usage of the imported 'DontEditWarning' component within the Astro Markdown file. It's placed at the beginning of the content to warn users against editing the auto-generated file.

LANGUAGE: markdown
CODE:
<DontEditWarning />

----------------------------------------

TITLE: Installing Astro DB via Package Managers
DESCRIPTION: Commands to install the Astro DB integration using different package managers (npm, pnpm, yarn)

LANGUAGE: sh
CODE:
npx astro add db

LANGUAGE: sh
CODE:
pnpm astro add db

LANGUAGE: sh
CODE:
yarn astro add db

----------------------------------------

TITLE: Implementing External Image Service in JavaScript
DESCRIPTION: This snippet demonstrates how to create an external image service for Astro. It includes methods for validating options, generating URLs, and setting HTML attributes.

LANGUAGE: javascript
CODE:
import type { ExternalImageService, ImageTransform, AstroConfig } from "astro";

const service: ExternalImageService = {
  validateOptions(options: ImageTransform, imageConfig: AstroConfig['image']) {
    const serviceConfig = imageConfig.service.config;

    // Enforce the user set max width.
    if (options.width > serviceConfig.maxWidth) {
      console.warn(`Image width ${options.width} exceeds max width ${serviceConfig.maxWidth}. Falling back to max width.`);
      options.width = serviceConfig.maxWidth;
    }

    return options;
  },
  getURL(options, imageConfig) {
    return `https://mysupercdn.com/${options.src}?q=${options.quality}&w=${options.width}&h=${options.height}`;
  },
  getHTMLAttributes(options, imageConfig) {
    const { src, format, quality, ...attributes } = options;
		return {
			...attributes,
			loading: options.loading ?? 'lazy',
			decoding: options.decoding ?? 'async',
		};
	}
};


export default service;

----------------------------------------

TITLE: Configuring Session Support
DESCRIPTION: Configure experimental session support by specifying a storage driver and options.

LANGUAGE: js
CODE:
  {
    session: {
      // Required: Name of driver on Unstorage
      driver: 'redis',
      // Required depending on the driver
      options: {
        url: process.env.REDIS_URL,
      },
    }
  }

----------------------------------------

TITLE: Using DontEditWarning Component in Astro
DESCRIPTION: This snippet demonstrates the usage of the DontEditWarning component within the Astro file. It's a self-closing tag that likely renders a warning message.

LANGUAGE: astro
CODE:
<DontEditWarning />

----------------------------------------

TITLE: Adding Remark Plugins
DESCRIPTION: Customize how your Markdown is built with Remark plugins.

LANGUAGE: js
CODE:
import remarkToc from 'remark-toc';
{
  markdown: {
    remarkPlugins: [ [remarkToc, { heading: "contents" }] ]
  }
}

----------------------------------------

TITLE: Correct Usage of getImage() Function in Astro
DESCRIPTION: This snippet demonstrates the correct way to use the getImage() function in Astro. It shows how to import the function and an image, and how to pass an object with the desired image properties as the first parameter.

LANGUAGE: typescript
CODE:
import { getImage } from "astro:assets";
import myImage from "../assets/my_image.png";

const optimizedImage = await getImage({src: myImage, width: 300, height: 300});

----------------------------------------

TITLE: Using DontEditWarning Component in Astro
DESCRIPTION: This snippet demonstrates the usage of the DontEditWarning component in the Astro file. It's a self-closing tag, indicating that the component doesn't have any content or props passed to it.

LANGUAGE: astro
CODE:
<DontEditWarning />

----------------------------------------

TITLE: Implementing Last Modified Display in Markdown Layout
DESCRIPTION: Example of displaying the last modified time in an Astro layout for Markdown files

LANGUAGE: astro
CODE:
---
import dayjs from "dayjs";
import utc from "dayjs/plugin/utc";

dayjs.extend(utc);

const lastModified = dayjs()
  .utc(Astro.props.frontmatter.lastModified)
  .format("HH:mm:ss DD MMMM YYYY UTC");
---

<html>
  <head>...</head>
  <body>
    <p>{lastModified}</p>
    <slot />
  </body>
</html>

----------------------------------------

TITLE: Importing DontEditWarning Component in Astro
DESCRIPTION: This snippet imports a custom Astro component named 'DontEditWarning' from the components directory. It's used to display a warning message about not editing the auto-generated file.

LANGUAGE: astro
CODE:
import DontEditWarning from '~/components/DontEditWarning.astro'

----------------------------------------

TITLE: Creating About Page Content in Astro
DESCRIPTION: HTML structure for the About page showing how to add content and modify the existing template.

LANGUAGE: astro
CODE:
<body>
  <h1>My Astro Site</h1>
  <h1>About Me</h1>
  <h2>... and my new Astro site!</h2>

  <p>I am working through Astro's introductory tutorial. This is the second page on my website, and it's the first one I built myself!</p>

  <p>This site will update as I complete more of the tutorial, so keep checking back and see how my journey is going!</p>
</body>

----------------------------------------

TITLE: Astro Component Imports
DESCRIPTION: Import statements for Astro components used in the tutorial page including Checklist, Box, and Lede components.

LANGUAGE: astro
CODE:
import Checklist from '~/components/Checklist.astro';
import Box from '~/components/tutorial/Box.astro';
import Lede from '~/components/tutorial/Lede.astro';

----------------------------------------

TITLE: Example Invalid Content Entry Object
DESCRIPTION: JSON example showing an invalid content entry where the ID is a number instead of the required string type.

LANGUAGE: json
CODE:
{
  "id": 1,
  "title": "Hello, World!"
}

----------------------------------------

TITLE: Importing MigrationGuidesNav Component in Astro
DESCRIPTION: This snippet demonstrates how to import a custom Astro component called MigrationGuidesNav. It's likely used to display navigation for various migration guides.

LANGUAGE: astro
CODE:
import MigrationGuidesNav from '~/components/MigrationGuidesNav.astro';

----------------------------------------

TITLE: Configuring Cloudflare Routes
DESCRIPTION: Example of configuring custom route patterns for Cloudflare in the Astro config file.

LANGUAGE: javascript
CODE:
export default defineConfig({
  adapter: cloudflare({
    routes: {
      extend: {
        include: [{ pattern: '/static' }], // Route a prerended page to the SSR function for on-demand rendering
        exclude: [{ pattern: '/pagefind/*' }], // Use Starlight's pagefind search, which is generated statically at build time
      }
    },
  }),
});

----------------------------------------

TITLE: Installing Sentry SDK for Astro using yarn
DESCRIPTION: Command to install the Sentry SDK for Astro using yarn package manager.

LANGUAGE: shell
CODE:
yarn astro add @sentry/astro

----------------------------------------

TITLE: Creating Astro Container Instance
DESCRIPTION: Demonstrates how to create a new instance of the Astro container using the experimental API.

LANGUAGE: javascript
CODE:
import { experimental_AstroContainer } from "astro/container";

const container = await experimental_AstroContainer.create();

----------------------------------------

TITLE: Optimizing MDX Output
DESCRIPTION: Configuration to enable MDX optimization for faster builds.

LANGUAGE: javascript
CODE:
import { defineConfig } from 'astro/config';
import mdx from '@astrojs/mdx';

export default defineConfig({
  // ...
  integrations: [
    mdx({
      optimize: true,
    }),
  ],
});

----------------------------------------

TITLE: Configuring Redirects Output
DESCRIPTION: Specify whether to output redirects to HTML during build.

LANGUAGE: js
CODE:
{
  build: {
    redirects: false
  }
}

----------------------------------------

TITLE: Configuring Dev Toolbar in Astro Config
DESCRIPTION: Shows how to disable the dev toolbar for all project users by setting devToolbar configuration in the Astro config file.

LANGUAGE: javascript
CODE:
import { defineConfig } from "astro/config";

export default defineConfig({
  devToolbar: {
    enabled: false
  }
});

----------------------------------------

TITLE: Using Warning Component in Astro Template
DESCRIPTION: Component usage in the template to display the auto-generation warning.

LANGUAGE: astro
CODE:
<DontEditWarning />

----------------------------------------

TITLE: Creating Reading Time Remark Plugin
DESCRIPTION: Implementation of a remark plugin that calculates reading time for Markdown content using reading-time and mdast-util-to-string packages

LANGUAGE: javascript
CODE:
import getReadingTime from 'reading-time';
import { toString } from 'mdast-util-to-string';

export function remarkReadingTime() {
  return function (tree, { data }) {
    const textOnPage = toString(tree);
    const readingTime = getReadingTime(textOnPage);
    // readingTime.text will give us minutes read as a friendly string,
    // i.e. "3 min read"
    data.astro.frontmatter.minutesRead = readingTime.text;
  };
}

----------------------------------------

TITLE: Astro Component Imports in Markdown
DESCRIPTION: Import statements for various Astro components used in the tutorial page including Checklist, Box, PreCheck, Steps, and Badge components.

LANGUAGE: markdown
CODE:
import Checklist from '~/components/Checklist.astro';
import Box from '~/components/tutorial/Box.astro';
import PreCheck from '~/components/tutorial/PreCheck.astro';
import { Steps } from '@astrojs/starlight/components';
import Badge from "~/components/Badge.astro"

----------------------------------------

TITLE: Importing Components in Astro
DESCRIPTION: This snippet demonstrates how to import custom components in an Astro file. It imports the Checklist and Box components from specific paths.

LANGUAGE: astro
CODE:
import Checklist from '~/components/Checklist.astro';
import Box from '~/components/tutorial/Box.astro';

----------------------------------------

TITLE: Creating Astro Integration for Dev Toolbar App
DESCRIPTION: Sets up an Astro integration that adds a custom dev toolbar app to the project. It uses the astro:config:setup hook to register the app with the dev toolbar.

LANGUAGE: typescript
CODE:
import { fileURLToPath } from 'node:url';
import type { AstroIntegration } from 'astro';

export default {
  name: 'my-astro-integration',
  hooks: {
    'astro:config:setup': ({ addDevToolbarApp }) => {  
      addDevToolbarApp({
        id: "my-toolbar-app",
        name: "My Toolbar App",
        icon: "🚀",
        entrypoint: fileURLToPath(new URL('./app.ts', import.meta.url))
      });
    },
  },
} satisfies AstroIntegration;

----------------------------------------

TITLE: Importing DontEditWarning Component in Astro
DESCRIPTION: Imports a warning component that indicates this file should not be directly edited as it is auto-generated.

LANGUAGE: astro
CODE:
import DontEditWarning from '~/components/DontEditWarning.astro'

----------------------------------------

TITLE: Installing Astro Blog Template with PNPM
DESCRIPTION: Command to create a new Astro project using the official blog template starter via PNPM package manager.

LANGUAGE: shell
CODE:
pnpm create astro@latest --template blog

----------------------------------------

TITLE: Setting Output Directory
DESCRIPTION: Configure where Astro will write your final build.

LANGUAGE: js
CODE:
{
  outDir: './my-custom-build-directory'
}

----------------------------------------

TITLE: Typing Cloudflare Runtime in Astro
DESCRIPTION: Example of adding TypeScript types for Cloudflare runtime in an Astro project.

LANGUAGE: typescript
CODE:
type Runtime = import('@astrojs/cloudflare').Runtime<Env>;

declare namespace App {
  interface Locals extends Runtime {
    otherLocals: {
      test: string;
    };
  }
}

----------------------------------------

TITLE: Docker Ignore Configuration
DESCRIPTION: Standard .dockerignore configuration to exclude unnecessary files from Docker builds

LANGUAGE: docker
CODE:
.DS_Store
node_modules
dist

----------------------------------------

TITLE: Creating a new Astro project with Bun
DESCRIPTION: Use the create-astro command to set up a new Astro project using Bun as the package manager and runtime.

LANGUAGE: bash
CODE:
bunx create-astro@latest my-astro-project-using-bun

----------------------------------------

TITLE: Adding Sitemap Link to robots.txt
DESCRIPTION: Example of how to add a sitemap link to the robots.txt file of a website.

LANGUAGE: plaintext
CODE:
# public/robots.txt
User-agent: *
Allow: /

Sitemap: https://<YOUR SITE>/sitemap-index.xml

----------------------------------------

TITLE: Installing Astro via npm
DESCRIPTION: Command to create a new Astro project using npm.

LANGUAGE: bash
CODE:
# create a new project with npm
npm create astro@latest

----------------------------------------

TITLE: Importing Error Warning Component in Astro
DESCRIPTION: Imports a warning component that indicates the file should not be edited directly as it is auto-generated.

LANGUAGE: astro
CODE:
import DontEditWarning from '~/components/DontEditWarning.astro'

----------------------------------------

TITLE: Updating content fetching
DESCRIPTION: Astro component code showing how to fetch Markdown files using Astro.glob() instead of the removed Astro.fetchContent() method.

LANGUAGE: javascript
CODE:
---
// src/pages/index.astro
const allPosts = await Astro.glob('./posts/*.md');
---

----------------------------------------

TITLE: Installing Better Auth
DESCRIPTION: Commands to install Better Auth using different package managers.

LANGUAGE: shell
CODE:
npm install better-auth

LANGUAGE: shell
CODE:
pnpm add better-auth

LANGUAGE: shell
CODE:
yarn add better-auth

----------------------------------------

TITLE: Markdown Error Documentation Content
DESCRIPTION: Markdown content describing the error message, cause, and provides links to related documentation.

LANGUAGE: markdown
CODE:
> **PageNumberParamNotFound**: [paginate()] page number param `PARAM_NAME` not found in your filepath.

## What went wrong?
The page number parameter was not found in your filepath.

**See Also:**
-  [Pagination](/en/guides/routing/#pagination)

----------------------------------------

TITLE: Displaying Astro Project File Tree in Markdown
DESCRIPTION: This code snippet shows the file structure of a typical Astro project using a custom FileTree component. It includes directories for public assets, source code, and configuration files.

LANGUAGE: markdown
CODE:
<FileTree>
- public/
  - robots.txt
  - favicon.svg
  - my-cv.pdf
- src/
    - blog/
      - post1.md
      - post2.md
      - post3.md
  - components/
    - Header.astro
    - Button.jsx
  - images/
    - image1.jpg
    - image2.jpg
    - image3.jpg
  - layouts/
    - PostLayout.astro
  - pages/
    - posts/
      - [post].astro
    - about.astro
    - **index.astro**
    - rss.xml.js
  - styles/
    - global.css
  - content.config.ts
- astro.config.mjs
- package.json
- tsconfig.json
</FileTree>

----------------------------------------

TITLE: Running Astro Development Server with yarn
DESCRIPTION: Command to start the Astro development server using yarn.

LANGUAGE: shell
CODE:
yarn run dev

----------------------------------------

TITLE: Configuring Astro with Remark Plugin
DESCRIPTION: Configuration to add the custom remark plugin to Astro's markdown processing

LANGUAGE: javascript
CODE:
import { defineConfig } from 'astro/config';
import { remarkModifiedTime } from './remark-modified-time.mjs';

export default defineConfig({
  markdown: {
    remarkPlugins: [remarkModifiedTime],
  },
});

----------------------------------------

TITLE: Manual Netlify Adapter Installation
DESCRIPTION: Commands to manually install the @astrojs/netlify package using different package managers.

LANGUAGE: shell
CODE:
npm install @astrojs/netlify

LANGUAGE: shell
CODE:
pnpm add @astrojs/netlify

LANGUAGE: shell
CODE:
yarn add @astrojs/netlify

----------------------------------------

TITLE: Installing Astro Blog Template with NPM
DESCRIPTION: Command to create a new Astro project using the blog template starter with NPM package manager.

LANGUAGE: shell
CODE:
npm create astro@latest -- --template blog

----------------------------------------

TITLE: Example Error Message in Markdown
DESCRIPTION: Shows an example of the error message displayed when an invalid prerender export is detected.

LANGUAGE: markdown
CODE:
> **Example error messages:**<br/>
InvalidPrerenderExport: A `prerender` export has been detected, but its value cannot be statically analyzed.

----------------------------------------

TITLE: Disabling Astro HTML Compression
DESCRIPTION: Shows how to disable HTML compression in Astro.

LANGUAGE: javascript
CODE:
{
  compressHTML: false
}

----------------------------------------

TITLE: Initializing Component with Image Import
DESCRIPTION: Basic setup of an Astro component with image import functionality.

LANGUAGE: astro
CODE:
---
import { Image } from 'astro:assets';
---

----------------------------------------

TITLE: On-demand Route Generation for Blog Posts
DESCRIPTION: Implements dynamic route generation for blog posts using server-side rendering with 404 handling.

LANGUAGE: astro
CODE:
---
import type { Blogpost } from "flotiq-api-ts";
import { flotiq } from "../../lib/flotiq";

const { slug } = Astro.params;
let post: Blogpost;

const blogpostList = await flotiq.BlogpostAPI.list({
  filters: JSON.stringify({
    slug: {
      type: 'equals',
      filter: slug,
    }
  }),
  limit: 1
});

if (blogpostList.data?.[0]) {
  post = blogpostList.data[0]
} else {
  return Astro.redirect('/404');
}
---
<html lang="en">
  <title>{post.title}</title>
  <body>
    <h1>{post.title}</h1>
    <div set:html={post.content}/>
  </body>
</html>

----------------------------------------

TITLE: Example Error Message in Markdown
DESCRIPTION: Shows an example of the error message displayed when an invalid prerender export is detected.

LANGUAGE: markdown
CODE:
> **Example error messages:**<br/>
InvalidPrerenderExport: A `prerender` export has been detected, but its value cannot be statically analyzed.

----------------------------------------

TITLE: Defining Astro Configuration
DESCRIPTION: Basic structure for defining Astro configuration options using the defineConfig function.

LANGUAGE: js
CODE:
// astro.config.mjs
import { defineConfig } from 'astro/config'

export default defineConfig({
  // your configuration options here...
})

----------------------------------------

TITLE: Demonstrating Correct Usage of client:only Directive in Astro
DESCRIPTION: This snippet shows the proper way to use the client:only directive in Astro by providing a hint for the renderer. It's essential when using client:only to specify which renderer should be used, as the component is not processed on the server.

LANGUAGE: astro
CODE:
<SomeReactComponent client:only="react" />

----------------------------------------

TITLE: Creating reCAPTCHA Verification Endpoint in Astro
DESCRIPTION: Implements a POST endpoint that securely verifies reCAPTCHA tokens using Google's verification API. The endpoint accepts a token from the client and returns the verification response while keeping the secret key secure on the server side.

LANGUAGE: javascript
CODE:
export async function POST({ request }) {
  const data = await request.json();

  const recaptchaURL = 'https://www.google.com/recaptcha/api/siteverify';
  const requestHeaders = {
    'Content-Type': 'application/x-www-form-urlencoded'
  };
  const requestBody = new URLSearchParams({
    secret: "YOUR_SITE_SECRET_KEY",   // This can be an environment variable
    response: data.recaptcha          // The token passed in from the client
  });

  const response = await fetch(recaptchaURL, {
    method: "POST",
    headers: requestHeaders,
    body: requestBody.toString()
  });

  const responseData = await response.json();

  return new Response(JSON.stringify(responseData), { status: 200 });
}

----------------------------------------

TITLE: Importing DontEditWarning Component in Astro
DESCRIPTION: This snippet imports a custom Astro component named DontEditWarning, likely used to display a warning message about not editing the auto-generated file directly.

LANGUAGE: astro
CODE:
import DontEditWarning from '~/components/DontEditWarning.astro'

----------------------------------------

TITLE: Creating a New Astro Project using pnpm
DESCRIPTION: Command to create a new Astro project using pnpm and the minimal template.

LANGUAGE: shell
CODE:
# create a new project with pnpm
pnpm create astro@latest --template minimal

----------------------------------------

TITLE: Configuring Partytown Forward Events in Astro Config
DESCRIPTION: JavaScript code snippet showing how to configure forwarding events for Partytown in the Astro configuration file.

LANGUAGE: javascript
CODE:
export default defineConfig({
  // ...
  integrations: [
    partytown({
      // Example: Add dataLayer.push as a forwarding-event.
      config: {
        forward: ['dataLayer.push'],
      },
    }),
  ],
});

----------------------------------------

TITLE: Enabling experimental React children parsing in Astro
DESCRIPTION: JavaScript configuration to enable the experimentalReactChildren flag for improved compatibility with certain React libraries.

LANGUAGE: javascript
CODE:
import { defineConfig } from 'astro/config';
import react from '@astrojs/react';

export default defineConfig({
  // ...
  integrations: [
    react({
      experimentalReactChildren: true,
    }),
  ],
});

----------------------------------------

TITLE: RandomName Component with Isolated Data Fetch
DESCRIPTION: Separate component for fetching and displaying random names, enabling parallel data fetching and progressive rendering.

LANGUAGE: astro
CODE:
---
const personResponse = await fetch('https://randomuser.me/api/');
const personData = await personResponse.json();
const randomPerson = personData.results[0];
---
<p>{randomPerson.name.first}</p>

----------------------------------------

TITLE: Configuring package.json scripts for Astro
DESCRIPTION: JSON snippet showing the recommended scripts configuration for an Astro project in package.json.

LANGUAGE: json
CODE:
{
  "scripts": {
    "dev": "astro dev",
    "build": "astro build",
    "preview": "astro preview"
  },
}

----------------------------------------

TITLE: Cypress Configuration and Test Example
DESCRIPTION: Basic setup and example test for running Cypress end-to-end tests in an Astro project.

LANGUAGE: javascript
CODE:
import { defineConfig } from 'cypress'

export default defineConfig({
  e2e: {
    supportFile: false
  }
})

LANGUAGE: javascript
CODE:
it('titles are correct', () => {
  const page = cy.visit('http://localhost:4321');

  page.get('title').should('have.text', 'Astro is awesome!')
  page.get('h1').should('have.text', 'Hello world from Astro');
});

----------------------------------------

TITLE: Creating a dynamic endpoint in Astro
DESCRIPTION: Shows how to create a server-rendered endpoint that generates a random number on each request. The 'prerender = false' export ensures it's not statically generated.

LANGUAGE: javascript
CODE:
export const prerender = false;

export async function GET() {
  let number = Math.random();
  return new Response(
    JSON.stringify({
      number,
      message: `Here's a random number: ${number}`,
    }),
  );
}

----------------------------------------

TITLE: Setting Astro Source Directory
DESCRIPTION: Shows how to configure the source directory for Astro projects.

LANGUAGE: javascript
CODE:
{
  srcDir: './www'
}

----------------------------------------

TITLE: Installing rehype-external-links Plugin with pnpm
DESCRIPTION: Command to install the rehype-external-links plugin using pnpm package manager.

LANGUAGE: shell
CODE:
pnpm add rehype-external-links

----------------------------------------

TITLE: Manual Renderer Configuration
DESCRIPTION: Demonstrates how to manually configure renderers for React, Vue and MDX when using the container at runtime.

LANGUAGE: javascript
CODE:
import reactRenderer from "@astrojs/react/server.js";
import vueRenderer from "@astrojs/vue/server.js";
import mdxRenderer from "@astrojs/mdx/server.js";

const container = await experimental_AstroContainer.create();
container.addServerRenderer({renderer: vueRenderer});
container.addServerRenderer({renderer: mdxRenderer});

container.addServerRenderer({ renderer: reactRenderer });
container.addClientRenderer({ name: "@astrojs/react", entrypoint: "@astrojs/react/client.js" });

----------------------------------------

TITLE: Creating User Registration Page in Astro
DESCRIPTION: This Astro component creates a registration page with a form that sends a POST request to the registration endpoint.

LANGUAGE: astro
CODE:
---
import Layout from "../layouts/Layout.astro";
---

<Layout title="Register">
  <h1>Register</h1>
  <p>Already have an account? <a href="/signin">Sign in</a></p>
  <form action="/api/auth/register" method="post">
    <label for="email">Email</label>
    <input type="email" name="email" id="email" />
    <label for="password">Password</label>
    <input type="password" name="password" id="password" />
    <button type="submit">Register</button>
  </form>
</Layout>

----------------------------------------

TITLE: Using DontEditWarning Component in Astro
DESCRIPTION: This code snippet demonstrates the usage of the DontEditWarning component in an Astro file. It's a self-closing tag, indicating that the component is rendered without any content or props.

LANGUAGE: astro
CODE:
<DontEditWarning />

----------------------------------------

TITLE: Removing Experimental Flags in Astro Configuration
DESCRIPTION: Example of removing experimental flags for assets and view transitions from the Astro configuration file.

LANGUAGE: javascript
CODE:
// astro.config.mjs
import { defineConfig } from 'astro/config';

export default defineConfig({
  experimental: {
    assets: true,
    viewTransitions: true,
  },
})

----------------------------------------

TITLE: Converting Nuxt data fetching to Astro
DESCRIPTION: Example of converting Nuxt's asyncData function to Astro's server-side data fetching in the component frontmatter.

LANGUAGE: vue
CODE:
{
  // ...
  async asyncData() {
    const res = await fetch("https://pokeapi.co/api/v2/pokemon?limit=151")
    const resJson = await res.json();
    const pokemons = resJson.results;
    return {
      pokemons,
    }
  },
}

LANGUAGE: astro
CODE:
---
const res = await fetch("https://pokeapi.co/api/v2/pokemon?limit=151")
const resJson = await res.json();
const pokemons = resJson.results;
---

<!-- Your template code here -->

----------------------------------------

TITLE: Using client:media Directive in Astro
DESCRIPTION: This snippet demonstrates the correct usage of the client:media directive in Astro. It shows how to provide a media query parameter when using the directive with a Counter component.

LANGUAGE: astro
CODE:
<Counter client:media="(max-width: 640px)" />

----------------------------------------

TITLE: Language Navigation Component
DESCRIPTION: Astro component for language selection and navigation between translated pages.

LANGUAGE: astro
CODE:
---
// src/components/LanguagePicker.astro
import { languages } from '../i18n/ui';
---
<ul>
  {Object.entries(languages).map(([lang, label]) => (
    <li>
      <a href={`/${lang}/`}>{label}</a>
    </li>
  ))}
</ul>

----------------------------------------

TITLE: Importing DontEditWarning Component in Markdown
DESCRIPTION: This snippet imports a component called DontEditWarning, which is likely used to display a warning message about not editing the auto-generated file.

LANGUAGE: markdown
CODE:
import DontEditWarning from '~/components/DontEditWarning.astro'

----------------------------------------

TITLE: Checking Node.js Version in Terminal
DESCRIPTION: Command to verify the installed version of Node.js. Requires version v18.17.1 or v20.3.0 or later (excluding v19) for Astro compatibility.

LANGUAGE: sh
CODE:
node -v

// Example output
v18.17.1

----------------------------------------

TITLE: Displaying Markdown Content for Action Query String Error in Astro
DESCRIPTION: This markdown snippet defines the structure and content of the error documentation page. It includes a title, metadata, and explanatory text about the error.

LANGUAGE: markdown
CODE:
---
# NOTE: This file is auto-generated from 'scripts/error-docgen.mjs'
# Do not make edits to it directly, they will be overwritten.
# Instead, change this file: https://github.com/withastro/astro/blob/main/packages/astro/src/core/errors/errors-data.ts
# Translators, please remove this note and the <DontEditWarning/> component.

title: An invalid Action query string was passed by a form.
i18nReady: true
githubURL: https://github.com/withastro/astro/blob/main/packages/astro/src/core/errors/errors-data.ts
---
import DontEditWarning from '~/components/DontEditWarning.astro'

<DontEditWarning />


:::caution[Deprecated]
This error is from an older version of Astro and is no longer in use. If you are unable to upgrade your project to a more recent version, then you can consult [unmaintained snapshots of older documentation](/en/upgrade-astro/#older-docs-unmaintained) for assistance.
:::


> **ActionQueryStringInvalidError**: The server received the query string `?_astroAction=ACTION_NAME`, but could not find an action with that name. If you changed an action's name in development, remove this query param from your URL and refresh.

## What went wrong?
The server received the query string `?_astroAction=name`, but could not find an action with that name. Use the action function's `.queryString` property to retrieve the form `action` URL.

**See Also:**
-  [Actions RFC](https://github.com/withastro/roadmap/blob/actions/proposals/0046-actions.md)

----------------------------------------

TITLE: Markdown Page with Layout
DESCRIPTION: Shows how to create a Markdown page with a specified layout component.

LANGUAGE: markdown
CODE:
---
layout: ../layouts/MySiteLayout.astro
title: My Markdown page
---
# Title

This is my page, written in **Markdown.**

----------------------------------------

TITLE: Creating Responsive Picture Element
DESCRIPTION: Implements a picture element with media queries to display different images based on viewport size.

LANGUAGE: astro
CODE:
<picture>
    <source media="(max-width: 799px)" srcset={mobileImg.src} />
    <source media="(min-width: 800px)" srcset={desktopImg.src} />
    <img src={desktopImg.src} alt={alt} />
</picture>

----------------------------------------

TITLE: Styling List Items with Class Names
DESCRIPTION: Shows how to add class names to dynamically generated list items and style them using CSS.

LANGUAGE: astro
CODE:
<p>My skills are:</p>
<ul>
  {skills.map((skill) => <li class="skill">{skill}</li>)}
</ul>

LANGUAGE: astro
CODE:
<style>
  h1 {
    color: purple;
    font-size: 4rem;
  }
  .skill {
    color: green;
    font-weight: bold;
  }
</style>

----------------------------------------

TITLE: Using Clerk components in Astro
DESCRIPTION: Implementing Clerk authentication components in an Astro component.

LANGUAGE: astro
CODE:
---
import Layout from 'src/layouts/Base.astro';
import { SignedIn, SignedOut, UserButton, SignInButton } from '@clerk/astro/components';
---

<Layout>
    <SignedIn>
        <UserButton />
    </SignedIn>
    <SignedOut>
        <SignInButton />
    </SignedOut>
</Layout>

----------------------------------------

TITLE: Installing Specific Astro Versions
DESCRIPTION: Commands to install specific versions of Astro and its integrations using different package managers.

LANGUAGE: shell
CODE:
npm install astro@4.5.3 @astrojs/react@3.0.10

LANGUAGE: shell
CODE:
pnpm add astro@4.5.3 @astrojs/react@3.0.10

LANGUAGE: shell
CODE:
yarn add astro@4.5.3 @astrojs/react@3.0.10

----------------------------------------

TITLE: Installing dayjs Package
DESCRIPTION: Commands to install the dayjs package using different package managers (npm, pnpm, yarn)

LANGUAGE: shell
CODE:
npm install dayjs

LANGUAGE: shell
CODE:
pnpm add dayjs

LANGUAGE: shell
CODE:
yarn add dayjs

----------------------------------------

TITLE: Configuring Sitemap Changefreq, Lastmod, and Priority
DESCRIPTION: Example of how to set changefreq, lastmod, and priority options for the sitemap.

LANGUAGE: javascript
CODE:
import { defineConfig } from 'astro/config';
import sitemap from '@astrojs/sitemap';

export default defineConfig({
  site: 'https://stargazers.club',
  integrations: [
    sitemap({
      changefreq: 'weekly',
      priority: 0.7,
      lastmod: new Date('2022-02-24'),
    }),
  ],
});

----------------------------------------

TITLE: Configuring Astro DB Tables
DESCRIPTION: Example of defining a table in Astro DB, including column types and configurations.

LANGUAGE: typescript
CODE:
import { defineTable, column, NOW } from 'astro:db';

const Comment = defineTable({
	columns: {
		id: column.number({ primaryKey: true }),
		author: column.text(),
		content: column.text({ optional: true }),
		published: column.date({ default: NOW }),
	},
});

----------------------------------------

TITLE: Installing @astrojs/sitemap Integration
DESCRIPTION: Commands to install the @astrojs/sitemap integration using different package managers.

LANGUAGE: shell
CODE:
npx astro add sitemap

LANGUAGE: shell
CODE:
pnpm astro add sitemap

LANGUAGE: shell
CODE:
yarn astro add sitemap

----------------------------------------

TITLE: Astro Locals Error Message
DESCRIPTION: Error message and explanation for the LocalsReassigned error that occurs when attempting to directly assign to the locals property.

LANGUAGE: markdown
CODE:
> **LocalsReassigned**: `locals` can not be assigned directly.

## What went wrong?
Thrown when a value is being set as the `locals` field on the Astro global or context.

----------------------------------------

TITLE: Basic RSS Feed Configuration
DESCRIPTION: Initial setup of RSS feed configuration file with title, description, and site parameters

LANGUAGE: javascript
CODE:
import rss from '@astrojs/rss';

export function GET(context) {
  return rss({
    // `<title>` field in output xml
    title: 'Buzz's Blog',
    // `<description>` field in output xml
    description: 'A humble Astronaut's guide to the stars',
    // Pull in your project "site" from the endpoint context
    site: context.site,
    // Array of `<item>`s in output xml
    items: [],
    // (optional) inject custom xml
    customData: `<language>en-us</language>`,
  });
}

----------------------------------------

TITLE: Displaying Astro Error Message for No Matching Renderer
DESCRIPTION: This code snippet shows the error message displayed when no matching renderer is found for a component in Astro. It uses placeholders for the component name and renderer count.

LANGUAGE: markdown
CODE:
> Unable to render `COMPONENT_NAME`. There are `RENDERER_COUNT` renderer(s) configured in your `astro.config.mjs` file, but none were able to server-side render `COMPONENT_NAME`.

----------------------------------------

TITLE: Specifying Node Version in .nvmrc
DESCRIPTION: Example of specifying Node version 18.14.1 in a .nvmrc file.

LANGUAGE: bash
CODE:
18.14.1

----------------------------------------

TITLE: Installing @astrojs/preact Integration with Yarn
DESCRIPTION: Command to install the @astrojs/preact integration using yarn package manager.

LANGUAGE: shell
CODE:
yarn astro add preact

----------------------------------------

TITLE: Updating injectRoute API Usage
DESCRIPTION: Changes to the injectRoute API to use 'entrypoint' instead of 'entryPoint' for consistency with other Astro APIs.

LANGUAGE: javascript
CODE:
injectRoute({
  pattern: '/fancy-dashboard',
  entryPoint: '@fancy/dashboard/dashboard.astro'
  entrypoint: '@fancy/dashboard/dashboard.astro'
});

----------------------------------------

TITLE: Installing Dependencies via Package Managers
DESCRIPTION: Commands to install reading-time and mdast-util-to-string packages using different package managers

LANGUAGE: shell
CODE:
npm install reading-time mdast-util-to-string

LANGUAGE: shell
CODE:
pnpm add reading-time mdast-util-to-string

LANGUAGE: shell
CODE:
yarn add reading-time mdast-util-to-string

----------------------------------------

TITLE: Using notFound in Astro Middleware
DESCRIPTION: This example shows how to use the notFound function in an Astro middleware to handle 404 errors for non-localized paths.

LANGUAGE: javascript
CODE:
import { defineMiddleware } from "astro:middleware";
import { notFound } from "astro:i18n";

export const onRequest = defineMiddleware((context, next) => {
  const pathNotFound = notFound(context);
  if (pathNotFound) {
    return pathNotFound;
  }
  return next();
})

----------------------------------------

TITLE: Ignoring Slow Connection for Programmatic Prefetching
DESCRIPTION: Shows how to use the ignoreSlowConnection option with the prefetch() function to force prefetching even on slow connections or data saver mode.

LANGUAGE: javascript
CODE:
// Prefetch even on data saver mode or slow connection
prefetch('/about', { ignoreSlowConnection: true });

----------------------------------------

TITLE: Fetching user session with Better Auth
DESCRIPTION: Retrieving the user's session information using Better Auth in an Astro component.

LANGUAGE: astro
CODE:
---
import { auth } from "../../../lib/auth"; // import your Better Auth instance

const session = await auth.api.getSession({
	headers: Astro.request.headers,
});
---

<p>{session.user?.name}</p>

----------------------------------------

TITLE: Configuring Astro Adapter
DESCRIPTION: Demonstrates how to set up an adapter for Astro SSR deployment.

LANGUAGE: javascript
CODE:
import netlify from '@astrojs/netlify';
{
  // Example: Build for Netlify serverless deployment
  adapter: netlify(),
}

----------------------------------------

TITLE: Implementing CartFlyout Component
DESCRIPTION: Demonstrates how to render cart items in a CartFlyout component using the cartItems store across different frameworks.

LANGUAGE: jsx
CODE:
import { useStore } from '@nanostores/react';
import { isCartOpen, cartItems } from '../cartStore';

export default function CartFlyout() {
  const $isCartOpen = useStore(isCartOpen);
  const $cartItems = useStore(cartItems);

  return $isCartOpen ? (
    <aside>
      {Object.values($cartItems).length ? (
        <ul>
          {Object.values($cartItems).map(cartItem => (
            <li>
              <img src={cartItem.imageSrc} alt={cartItem.name} />
              <h3>{cartItem.name}</h3>
              <p>Quantity: {cartItem.quantity}</p>
            </li>
          ))}
        </ul>
      ) : <p>Your cart is empty!</p>}
    </aside>
  ) : null;
}

----------------------------------------

TITLE: Express.js Server Integration
DESCRIPTION: Example of integrating Astro's SSR handler with an Express.js server in middleware mode.

LANGUAGE: javascript
CODE:
import express from 'express';
import { handler as ssrHandler } from './dist/server/entry.mjs';

const app = express();
const base = '/';
app.use(base, express.static('dist/client/'));
app.use(ssrHandler);

app.listen(8080);

----------------------------------------

TITLE: Session Types Definition
DESCRIPTION: TypeScript type definitions for session data to enable type checking and autocompletion.

LANGUAGE: typescript
CODE:
declare namespace App {
  interface SessionData {
    user: {
      id: string;
      name: string;
    };
    cart: string[];
  }
}

----------------------------------------

TITLE: Error Message Display in Markdown
DESCRIPTION: Displays the error message for invalid glob patterns and provides guidance on proper glob pattern formatting.

LANGUAGE: markdown
CODE:
> **InvalidGlob**: Invalid glob pattern: `GLOB_PATTERN`. Glob patterns must start with './', '../' or '/'.

## What went wrong?
Astro encountered an invalid glob pattern. This is often caused by the glob pattern not being a valid file path.

**See Also:**
-  [Glob Patterns](/en/guides/imports/#glob-patterns)

----------------------------------------

TITLE: Manual Installation of Astro DB Integration
DESCRIPTION: Steps to manually install the Astro DB integration, including package installation and configuration in astro.config.mjs.

LANGUAGE: shell
CODE:
npm install @astrojs/db

LANGUAGE: typescript
CODE:
import { defineConfig } from 'astro/config';
import db from '@astrojs/db';

export default defineConfig({
  integrations: [
   db()
  ]
});

----------------------------------------

TITLE: Использование Astro.cookies для работы с куки
DESCRIPTION: Примеры использования Astro.cookies для чтения, установки и удаления куки

LANGUAGE: astro
CODE:
---
// Чтение куки
const userId = Astro.cookies.get('userId');

// Установка куки
Astro.cookies.set('userId', '1234', {
  httpOnly: true,
  secure: true,
  maxAge: 60 * 60 * 24 * 7 // 1 неделя
});

// Удаление куки  
Astro.cookies.delete('userId');
---

----------------------------------------

TITLE: Frontmatter Configuration in Markdown/MDX
DESCRIPTION: Frontmatter configuration block defining metadata for the error documentation page, including title, i18n status, and GitHub source URL.

LANGUAGE: markdown
CODE:
---
# NOTE: This file is auto-generated from 'scripts/error-docgen.mjs'
# Do not make edits to it directly, they will be overwritten.
# Instead, change this file: https://github.com/withastro/astro/blob/main/packages/astro/src/core/errors/errors-data.ts
# Translators, please remove this note and the <DontEditWarning/> component.

title: Invalid frontmatter injection.
i18nReady: true
githubURL: https://github.com/withastro/astro/blob/main/packages/astro/src/core/errors/errors-data.ts
---

----------------------------------------

TITLE: RSS Schema Configuration
DESCRIPTION: Definition of content collection schema using RSS schema for validation

LANGUAGE: javascript
CODE:
import { defineCollection } from 'astro:content';
import { rssSchema } from '@astrojs/rss';

const blog = defineCollection({
  schema: rssSchema,
});

export const collections = { blog };

----------------------------------------

TITLE: Importing DontEditWarning Component in Astro
DESCRIPTION: Import statement for a warning component used to prevent manual edits to auto-generated files.

LANGUAGE: jsx
CODE:
import DontEditWarning from '~/components/DontEditWarning.astro'

----------------------------------------

TITLE: Removing legacy Astro-Flavored Markdown configuration
DESCRIPTION: JavaScript configuration update to remove the deprecated legacy.astroFlavoredMarkdown option from astro.config.mjs.

LANGUAGE: javascript
CODE:
// astro.config.mjs
export default defineConfig({
  // Remove this block
  // legacy: {
  //   astroFlavoredMarkdown: true,
  // },
})

----------------------------------------

TITLE: Customizing Vue Compiler Options in Astro Config
DESCRIPTION: Example of customizing Vue compiler options in the Astro configuration file, including setting custom elements.

LANGUAGE: javascript
CODE:
import { defineConfig } from 'astro/config';
import vue from '@astrojs/vue';

export default defineConfig({
  // ...
  integrations: [
    vue({
      template: {
        compilerOptions: {
          // treat any tag that starts with ion- as custom elements
          isCustomElement: (tag) => tag.startsWith('ion-'),
        },
      },
      // ...
    }),
  ],
});

----------------------------------------

TITLE: Manually Installing Alpine.js Integration with yarn
DESCRIPTION: Uses yarn to manually install the @astrojs/alpinejs integration package and its peer dependencies for Astro projects.

LANGUAGE: shell
CODE:
yarn add @astrojs/alpinejs

LANGUAGE: shell
CODE:
yarn add alpinejs @types/alpinejs

----------------------------------------

TITLE: Content Collection Schema Definition
DESCRIPTION: TypeScript configuration for blog content collections with multilingual support.

LANGUAGE: typescript
CODE:
//src/content.config.ts
import { defineCollection, z } from 'astro:content';

const blogCollection = defineCollection({
  schema: z.object({
    title: z.string(),
    author: z.string(),
    date: z.date()
  })
});

export const collections = {
  'blog': blogCollection
};

----------------------------------------

TITLE: Starting Keystatic Development Server
DESCRIPTION: Command to start the local development server for Keystatic.

LANGUAGE: shell
CODE:
npm run dev

----------------------------------------

TITLE: Handling Action Results in Astro Components
DESCRIPTION: Example of using Astro.getActionResult() to handle the result of an Astro Action in an Astro component. It checks for errors and displays a success message if the action was successful.

LANGUAGE: astro
CODE:
---
import { actions } from 'astro:actions';

const result = Astro.getActionResult(actions.addToCart);
---

{result && !result.error && (
  <p class="success">Added {result.data.productName} to cart</p>
)}

<!--...-->

----------------------------------------

TITLE: Dynamically Generating Blog Post Links in Astro
DESCRIPTION: Replaces static list items with a dynamic map over all blog posts to generate links automatically from post metadata.

LANGUAGE: astro
CODE:
{allPosts.map((post: any) => <li><a href={post.url}>{post.frontmatter.title}</a></li>)}

----------------------------------------

TITLE: Using Images in React Components
DESCRIPTION: Demonstrates how to import and use local images in React components.

LANGUAGE: jsx
CODE:
import stars from "../assets/stars.png";

export default function ReactImage () {
  return (
    <img src={stars.src} alt="A starry sky." />
  )
}

----------------------------------------

TITLE: Building Astro project with npm
DESCRIPTION: Command to build the Astro project using npm, which will generate the bundle analysis files.

LANGUAGE: shell
CODE:
npm run build

----------------------------------------

TITLE: Adding Rehype Plugins
DESCRIPTION: Customize how your Markdown output is processed with Rehype plugins.

LANGUAGE: js
CODE:
import { rehypeAccessibleEmojis } from 'rehype-accessible-emojis';
{
  markdown: {
    rehypePlugins: [rehypeAccessibleEmojis]
  }
}

----------------------------------------

TITLE: Adding @tailwindcss/typography plugin to Tailwind configuration
DESCRIPTION: CSS code to import Tailwind and add the @tailwindcss/typography plugin to the Tailwind configuration file.

LANGUAGE: css
CODE:
@import 'tailwindcss';
@plugin '@tailwindcss/typography';

----------------------------------------

TITLE: Displaying Invalid Dynamic Route Error in Markdown
DESCRIPTION: This snippet shows the markdown structure for displaying the invalid dynamic route error message. It includes a blockquote with the error details and placeholders for specific values.

LANGUAGE: markdown
CODE:
> **InvalidDynamicRoute**: The INVALID_PARAM param for route ROUTE is invalid. Received **RECEIVED**.

----------------------------------------

TITLE: Adding Astro integrations with Bun
DESCRIPTION: Use the astro add command with Bun to install official Astro integrations.

LANGUAGE: bash
CODE:
bunx astro add react

----------------------------------------

TITLE: Importing DontEditWarning Component in Astro
DESCRIPTION: Import statement for a warning component used to indicate the file should not be manually edited.

LANGUAGE: astro
CODE:
import DontEditWarning from '~/components/DontEditWarning.astro'

----------------------------------------

TITLE: Installing Astro integrations and frameworks
DESCRIPTION: Commands to install Astro integrations and their corresponding frameworks

LANGUAGE: shell
CODE:
# Install your new integrations and frameworks:
# (Read the full walkthrough: https://docs.astro.build/en/guides/integrations-guide)
npm install @astrojs/lit lit
npm install @astrojs/react react react-dom

----------------------------------------

TITLE: Upgrading Astro and official integrations using npm
DESCRIPTION: Use the @astrojs/upgrade package to upgrade Astro and official integrations to v5.0

LANGUAGE: shell
CODE:
npx @astrojs/upgrade

----------------------------------------

TITLE: Configuring Alpine.js Integration with Custom Entrypoint
DESCRIPTION: Configures the Alpine.js integration in Astro with a custom entrypoint. This allows for advanced customization of Alpine.js behavior.

LANGUAGE: javascript
CODE:
import { defineConfig } from 'astro/config';
import alpine from '@astrojs/alpinejs';

export default defineConfig({
  // ...
  integrations: [alpine({ entrypoint: '/src/entrypoint' })],
});

----------------------------------------

TITLE: Configuring rehype-external-links in Astro Config
DESCRIPTION: TypeScript code snippet for importing and configuring the rehype-external-links plugin in the astro.config.mjs file. It demonstrates how to add the plugin to the rehypePlugins array with options to add an icon to external links.

LANGUAGE: typescript
CODE:
// ...
import rehypeExternalLinks from 'rehype-external-links';

export default defineConfig({
  // ...
  markdown: {
    rehypePlugins: [
      [
        rehypeExternalLinks,
        {
          content: { type: 'text', value: ' 🔗' }
        }
      ],
    ]
  },
});

----------------------------------------

TITLE: Astro Container Options Type Definition
DESCRIPTION: TypeScript interface defining the configuration options for creating an Astro container.

LANGUAGE: typescript
CODE:
export type AstroContainerOptions = {
	streaming?: boolean;
	renderers?: AddServerRenderer[];
};

export type AddServerRenderer =
	| {
			renderer: NamedSSRLoadedRendererValue;
			name: never;
	  }
	| {
			renderer: SSRLoadedRendererValue;
			name: string;
	  };

----------------------------------------

TITLE: Example Markdown Content
DESCRIPTION: Sample Markdown content structure for a Keystatic post.

LANGUAGE: markdown
CODE:
---
title: My First Post
---

This is my very first post. I am **super** excited!

----------------------------------------

TITLE: Creating POST API Endpoint in Astro
DESCRIPTION: Implements a POST endpoint that receives and validates form data, returning appropriate JSON responses. Uses request.formData() to process incoming form submissions.

LANGUAGE: typescript
CODE:
export const prerender = false;
import type { APIRoute } from "astro";

export const POST: APIRoute = async ({ request }) => {
  const data = await request.formData();
  const name = data.get("name");
  const email = data.get("email");
  const message = data.get("message");
  if (!name || !email || !message) {
    return new Response(
      JSON.stringify({
        message: "Missing required fields",
      }),
      { status: 400 }
    );
  }
  return new Response(
    JSON.stringify({
      message: "Success!"
    }),
    { status: 200 }
  );
};

----------------------------------------

TITLE: Creating RSS Feed Configuration
DESCRIPTION: JavaScript code for configuring the RSS feed including title, description, and content generation from markdown files

LANGUAGE: javascript
CODE:
import rss, { pagesGlobToRssItems } from '@astrojs/rss';

export async function GET(context) {
  return rss({
    title: 'Astro Learner | Blog',
    description: 'My journey learning Astro',
    site: context.site,
    items: await pagesGlobToRssItems(import.meta.glob('./**/*.md')),
    customData: `<language>en-us</language>`,
  });
}

----------------------------------------

TITLE: Configuring Image Collections in Content Collections
DESCRIPTION: Shows how to configure and validate image metadata in content collections using Zod.

LANGUAGE: typescript
CODE:
import { defineCollection, z } from "astro:content";

const blogCollection = defineCollection({
	schema: ({ image }) => z.object({
		title: z.string(),
		cover: image().refine((img) => img.width >= 1080, {
			message: "Cover image must be at least 1080 pixels wide!",
		}),
		coverAlt: z.string(),
	}),
});

export const collections = {
	blog: blogCollection,
};

----------------------------------------

TITLE: Upgrading Astro and Official Integrations with Package Managers
DESCRIPTION: Commands to automatically upgrade Astro and all official integrations to their latest versions using different package managers.

LANGUAGE: shell
CODE:
npx @astrojs/upgrade

LANGUAGE: shell
CODE:
pnpm dlx @astrojs/upgrade

LANGUAGE: shell
CODE:
yarn dlx @astrojs/upgrade

----------------------------------------

TITLE: Using Astro Component
DESCRIPTION: Renders the DontEditWarning component to display a warning message about not editing the auto-generated file.

LANGUAGE: astro
CODE:
<DontEditWarning />

----------------------------------------

TITLE: Using DontEditWarning Component in Astro
DESCRIPTION: This snippet demonstrates the usage of the imported DontEditWarning component within the Astro file.

LANGUAGE: astro
CODE:
<DontEditWarning />

----------------------------------------

TITLE: Updating TypeScript configuration for Astro v5.0
DESCRIPTION: Add include and exclude properties to tsconfig.json for Astro's recommended TypeScript settings

LANGUAGE: ts
CODE:
{
  "extends": "astro/tsconfigs/base",
  "include": [".astro/types.d.ts", "**/*"],
  "exclude": ["dist"]
}

----------------------------------------

TITLE: Installing Astro Starlight Template using yarn
DESCRIPTION: Command to create a new Astro project using the Starlight docs theme starter template with yarn.

LANGUAGE: shell
CODE:
yarn create astro --template starlight

----------------------------------------

TITLE: Invalid Component Usage Example
DESCRIPTION: Examples showing incorrect and correct ways to render Astro components. The incorrect way attempts to call components as functions, while the correct approach uses JSX-like component syntax.

LANGUAGE: jsx
CODE:
// Incorrect usage
Component()
{items.map(Component)}

// Correct usage
<Component />
{items.map(item => <Component {...item} />)}

----------------------------------------

TITLE: Installing rollup-plugin-visualizer with npm
DESCRIPTION: Command to install rollup-plugin-visualizer as a development dependency using npm package manager.

LANGUAGE: shell
CODE:
npm install rollup-plugin-visualizer --save-dev

----------------------------------------

TITLE: Updating Transition Animate Directive
DESCRIPTION: Examples of updating the transition:animate directive.

LANGUAGE: astro
CODE:
<div transition:name="name" transition:animate="morph initial" />

LANGUAGE: astro
CODE:
<div transition:name="name" transition:animate="initial" />

LANGUAGE: astro
CODE:
<div transition:name="name" transition:animate="fade" />

LANGUAGE: astro
CODE:
<html transition:animate="none">
  <head></head>
  <body>
    <h1>Hello world!</h1>
  </body>
</html>

----------------------------------------

TITLE: Using Shiki Transformers with Code Component
DESCRIPTION: Applies Shiki transformers to the <Code /> component for advanced code block styling and functionality.

LANGUAGE: astro
CODE:
---
import { transformerNotationFocus, transformerMetaHighlight } from '@shikijs/transformers'
import { Code } from 'astro:components'
const code = `const foo = 'hello'
const bar = ' world'
console.log(foo + bar) // [!code focus]
`
---
<Code
  code={code}
  lang="js"
  transformers={[transformerMetaHighlight()]}
  meta="{1,3}"
/>
  
<style is:global>
  pre.has-focused .line:not(.focused) {
    filter: blur(1px);
  }
</style>

----------------------------------------

TITLE: Cloning Request Before Reading Body in Astro
DESCRIPTION: This snippet demonstrates how to properly clone a request before reading its body, allowing for subsequent use of Astro.rewrite(). It shows how to use the clone() method on the request object to create a copy that can be safely read without affecting the original request.

LANGUAGE: javascript
CODE:
const data = await Astro.request.clone().formData();

Astro.rewrite("/target")

----------------------------------------

TITLE: Configuring NPM Overrides for React Compatibility
DESCRIPTION: JSON configuration to override React dependencies with Preact compatibility layer in package.json.

LANGUAGE: json
CODE:
{
  "overrides": {
    "react": "npm:@preact/compat@latest",
    "react-dom": "npm:@preact/compat@latest"
  }
}

----------------------------------------

TITLE: Configuring Prettier for Astro
DESCRIPTION: Prettier configuration file setup for Astro projects, including plugin configuration and parser settings.

LANGUAGE: json
CODE:
{
  "plugins": ["prettier-plugin-astro"],
  "overrides": [
    {
      "files": "*.astro",
      "options": {
        "parser": "astro"
      }
    }
  ]
}

----------------------------------------

TITLE: TypeScript Interface for Astro Inline Configuration
DESCRIPTION: Defines the TypeScript interface for inline Astro configuration options that extends the base user config.

LANGUAGE: typescript
CODE:
interface AstroInlineConfig extends AstroUserConfig {
	configFile?: string | false;
	mode?: string;
	logLevel?: "debug" | "info" | "warn" | "error" | "silent";
}

----------------------------------------

TITLE: Defining Component Props with TypeScript
DESCRIPTION: Defines the component interface using TypeScript, including props for mobile and desktop image URLs and alt text.

LANGUAGE: astro
CODE:
---
import type { ImageMetadata } from "astro";
import { getImage } from "astro:assets";

interface Props {
    mobileImgUrl: string | ImageMetadata;
    desktopImgUrl: string | ImageMetadata;
    alt: string;
}

const { mobileImgUrl, desktopImgUrl, alt } = Astro.props;
---


----------------------------------------

TITLE: Starting Astro Development Server
DESCRIPTION: Commands for starting the Astro development server using different package managers

LANGUAGE: shell
CODE:
npm run dev

LANGUAGE: shell
CODE:
pnpm run dev

LANGUAGE: shell
CODE:
yarn run dev

----------------------------------------

TITLE: Enabling JSON Schema Generation in tsconfig.json
DESCRIPTION: Configuration settings required for enabling TypeScript strict checks and JavaScript support

LANGUAGE: json
CODE:
{
  "extends": "astro/tsconfigs/base",
  "compilerOptions": {
    "strictNullChecks": true,
    "allowJs": true
  }
}

----------------------------------------

TITLE: Starting Astro Development Server
DESCRIPTION: Commands to start Astro's development server using different package managers (npm, pnpm, yarn)

LANGUAGE: shell
CODE:
# start the development server
npx astro dev

LANGUAGE: shell
CODE:
# start the development server
pnpm astro dev

LANGUAGE: shell
CODE:
# start the development server
yarn astro dev

----------------------------------------

TITLE: Displaying Error Message for Deprecated Functions in Astro
DESCRIPTION: This markdown snippet defines an error message for the deprecated use of getDataEntryById or getEntryBySlug functions in Astro. It includes a title, internationalization status, GitHub URL, and a blockquote with the error message.

LANGUAGE: markdown
CODE:
---
# NOTE: This file is auto-generated from 'scripts/error-docgen.mjs'
# Do not make edits to it directly, they will be overwritten.
# Instead, change this file: https://github.com/withastro/astro/blob/main/packages/astro/src/core/errors/errors-data.ts
# Translators, please remove this note and the <DontEditWarning/> component.

title: Invalid use of getDataEntryById or getEntryBySlug function.
i18nReady: true
githubURL: https://github.com/withastro/astro/blob/main/packages/astro/src/core/errors/errors-data.ts
---
import DontEditWarning from '~/components/DontEditWarning.astro'

<DontEditWarning />


> **GetEntryDeprecationError**: The `METHOD` function is deprecated and cannot be used to query the "COLLECTION" collection. Use `getEntry` instead.

## What went wrong?
The `getDataEntryById` and `getEntryBySlug` functions are deprecated and cannot be used with content layer collections. Use the `getEntry` function instead.

----------------------------------------

TITLE: Rendering ContributorList Component
DESCRIPTION: JSX-style component usage to display a list of contributors from a specific GitHub repository.

LANGUAGE: astro
CODE:
<ContributorList githubRepo="withastro/docs" />

----------------------------------------

TITLE: Importing DontEditWarning Component in Astro
DESCRIPTION: Import statement for the DontEditWarning component used in the error documentation page.

LANGUAGE: astro
CODE:
import DontEditWarning from '~/components/DontEditWarning.astro'

----------------------------------------

TITLE: Updating TypeScript Configuration
DESCRIPTION: Example of updating the TypeScript configuration in tsconfig.json.

LANGUAGE: json
CODE:
{
	"compilerOptions": {
	  "types": ["@astrojs/image/client"]
	  "types": ["astro/client"]
	}
}

----------------------------------------

TITLE: Configuring Astro with Svelte Integration
DESCRIPTION: Configuration setup in astro.config.mjs to enable Svelte integration in an Astro project.

LANGUAGE: js
CODE:
import { defineConfig } from 'astro/config';
import svelte from '@astrojs/svelte';

export default defineConfig({
  // ...
  integrations: [svelte()],
});

----------------------------------------

TITLE: Astro Component Import
DESCRIPTION: Import statement for the DontEditWarning component used in the error documentation.

LANGUAGE: html
CODE:
import DontEditWarning from '~/components/DontEditWarning.astro'

<DontEditWarning />

----------------------------------------

TITLE: Creating Basic Astro Adapter Integration
DESCRIPTION: Demonstrates how to create a basic Astro adapter integration by implementing the setAdapter API in the astro:config:done hook.

LANGUAGE: javascript
CODE:
export default function createIntegration() {
  return {
    name: '@matthewp/my-adapter',
    hooks: {
      'astro:config:done': ({ setAdapter }) => {
        setAdapter({
          name: '@matthewp/my-adapter',
          serverEntrypoint: '@matthewp/my-adapter/server.js',
          supportedAstroFeatures: {
              staticOutput: 'stable'
          }
        });
      },
    },
  };
}

----------------------------------------

TITLE: Manual Package Installation with Multiple Integrations
DESCRIPTION: Commands to manually upgrade Astro and specific integrations like React and Tailwind using different package managers.

LANGUAGE: shell
CODE:
npm install astro@latest @astrojs/react@latest @astrojs/tailwind@latest

LANGUAGE: shell
CODE:
pnpm add astro@latest @astrojs/react@latest @astrojs/tailwind@latest

LANGUAGE: shell
CODE:
yarn add astro@latest @astrojs/react@latest @astrojs/tailwind@latest

----------------------------------------

TITLE: Installing @rollup/plugin-yaml with yarn
DESCRIPTION: Install the @rollup/plugin-yaml package as a dev dependency using yarn.

LANGUAGE: shell
CODE:
yarn add @rollup/plugin-yaml --save-dev

----------------------------------------

TITLE: TypeScript Interface for Build Options
DESCRIPTION: Defines the TypeScript interface for build configuration options.

LANGUAGE: typescript
CODE:
export interface BuildOptions {
	devOutput?: boolean;
	teardownCompiler?: boolean;
}

----------------------------------------

TITLE: Initializing Custom Image Component with Imports
DESCRIPTION: Sets up the initial component structure by importing the getImage function from Astro assets.

LANGUAGE: astro
CODE:
---
 import { getImage } from "astro:assets";
---


----------------------------------------

TITLE: Integrating Preact Component in Astro Page
DESCRIPTION: Demonstrates how to import and use the Preact Greeting component in an Astro page, including the use of the client:load directive for interactivity.

LANGUAGE: astro
CODE:
---
import BaseLayout from '../layouts/BaseLayout.astro';
import Greeting from '../components/Greeting';
const pageTitle = "Home Page";
---
<BaseLayout pageTitle={pageTitle}>
  <h2>My awesome blog subtitle</h2>
  <Greeting client:load messages={["Hej", "Hallo", "Hola", "Habari"]} />
</BaseLayout>

----------------------------------------

TITLE: Creating a Static JSON Endpoint in Astro
DESCRIPTION: This snippet demonstrates how to create a static JSON endpoint in Astro. It exports a GET function that returns a Response object with JSON data.

LANGUAGE: typescript
CODE:
export async function GET({params, request}) {
  return new Response(
    JSON.stringify({
      name: 'Astro',
      url: 'https://astro.build/'
    })
  )
}

----------------------------------------

TITLE: Configuring Content Types in Front Matter CMS
DESCRIPTION: JSON configuration for defining content types in frontmatter.json. This setup matches the Astro blog template's content collection schema with fields for title, description, publishing date, and hero image.

LANGUAGE: json
CODE:
"frontMatter.taxonomy.contentTypes": [
  {
    "name": "default",
    "pageBundle": false,
    "previewPath": "'blog'",
    "filePrefix": null,
    "fields": [
      {
        "title": "Title",
        "name": "title",
        "type": "string",
        "single": true
      },
      {
        "title": "Description",
        "name": "description",
        "type": "string"
      },
      {
        "title": "Publishing date",
        "name": "pubDate",
        "type": "datetime",
        "default": "{{now}}",
        "isPublishDate": true
      },
      {
        "title": "Content preview",
        "name": "heroImage",
        "type": "image",
        "isPreviewImage": true
      }
    ]
  }
]

----------------------------------------

TITLE: Importing DontEditWarning Component in Astro
DESCRIPTION: This code snippet imports a custom Astro component named 'DontEditWarning' from the project's components directory. It's used to display a warning message about not editing the auto-generated file.

LANGUAGE: markdown
CODE:
import DontEditWarning from '~/components/DontEditWarning.astro'

----------------------------------------

TITLE: Warning Component Usage in Astro
DESCRIPTION: Renders the warning component to prevent direct edits to the auto-generated file.

LANGUAGE: astro
CODE:
<DontEditWarning />

----------------------------------------

TITLE: Specifying Supported Features in Adapters
DESCRIPTION: Changes to require adapters to specify supported features using the supportedAstroFeatures property.

LANGUAGE: javascript
CODE:
export default function createIntegration() {
  return {
    name: '@matthewp/my-adapter',
    hooks: {
      'astro:config:done': ({ setAdapter }) => {
        setAdapter({
          name: '@matthewp/my-adapter',
          serverEntrypoint: '@matthewp/my-adapter/server.js',
          supportedAstroFeatures: {
              staticOutput: 'stable'
          }
        });
      },
    },
  };
}

----------------------------------------

TITLE: Upgrading Astro and official integrations using yarn
DESCRIPTION: Use the @astrojs/upgrade package with yarn to upgrade Astro and official integrations to v5.0

LANGUAGE: shell
CODE:
yarn dlx @astrojs/upgrade

----------------------------------------

TITLE: Importing Warning Component in Astro
DESCRIPTION: Imports a warning component to indicate the file should not be edited directly as it is auto-generated.

LANGUAGE: astro
CODE:
import DontEditWarning from '~/components/DontEditWarning.astro'

----------------------------------------

TITLE: Configuring Astro i18n Options
DESCRIPTION: Shows how to configure internationalization options in Astro.

LANGUAGE: javascript
CODE:
export default defineConfig({
	i18n: {
		defaultLocale: "en",
		locales: ["en", "fr", "pt-br", "es"],
		fallback: {
			pt: "es",
		  fr: "en"
		}
	}
})

----------------------------------------

TITLE: Configuring individual Markdown plugins
DESCRIPTION: JavaScript configuration update to disable GitHub-Flavored Markdown and SmartyPants plugins individually in astro.config.mjs.

LANGUAGE: javascript
CODE:
// astro.config.mjs
import { defineConfig } from 'astro/config';

export default defineConfig({
  markdown: {
    smartypants: false,
    gfm: false,
  }
});

----------------------------------------

TITLE: Installing @astrojs/react with yarn
DESCRIPTION: Command to install the @astrojs/react integration using yarn package manager.

LANGUAGE: sh
CODE:
yarn astro add react

----------------------------------------

TITLE: Implementing Custom Vue App Entrypoint
DESCRIPTION: Example of a custom Vue app entrypoint file that adds a plugin to the Vue app instance.

LANGUAGE: typescript
CODE:
import type { App } from 'vue';
import i18nPlugin from 'my-vue-i18n-plugin';

export default (app: App) => {
  app.use(i18nPlugin);
};

----------------------------------------

TITLE: Using middleware Function in Astro
DESCRIPTION: This example demonstrates how to use the middleware function to create a custom i18n middleware with additional logic in Astro.

LANGUAGE: javascript
CODE:
import { middleware } from "astro:i18n";
import { sequence, defineMiddleware } from "astro:middleware";

const customLogic = defineMiddleware(async (context, next) => {
  const response = await next();

  // Custom logic after resolving the response.
  // It's possible to catch the response coming from Astro i18n middleware.

  return response;
});

export const onRequest = sequence(customLogic, middleware({
	prefixDefaultLocale: true,
	redirectToDefaultLocale: false
}))

----------------------------------------

TITLE: Updating supportedAstroFeatures in Adapter API
DESCRIPTION: Update supportedAstroFeatures to use new sharpImageService property and limited support option

LANGUAGE: ts
CODE:
supportedAstroFeatures: {
  assets: {
    supportKind: "stable",
    isSharpCompatible: true,
    isSquooshCompatible: true,
  },
  sharpImageService: {
    support: "limited",
    message: 'This adapter supports the built-in sharp image service, but with some limitations.'
  }
}

----------------------------------------

TITLE: Using Undefined for Rest Parameters in Astro getStaticPaths
DESCRIPTION: This snippet demonstrates how to use undefined in routes with rest parameters to represent a path with no parameters passed in the URL. It shows examples of different parameter values and their corresponding routes.

LANGUAGE: astro
CODE:
---
export async function getStaticPaths() {
	return [
		{ params: { id: 1 } } // /route/1
		{ params: { id: 2 } } // /route/2
		{ params: { id: undefined } } // /route/
	];
}
---

----------------------------------------

TITLE: Configuring @rollup/plugin-yaml in Astro
DESCRIPTION: Import the yaml plugin and add it to the Vite plugins array in the Astro configuration file.

LANGUAGE: javascript
CODE:
import { defineConfig } from 'astro/config';
import yaml from '@rollup/plugin-yaml';

export default defineConfig({
  vite: {
    plugins: [yaml()]
  }
});

----------------------------------------

TITLE: Complete Tag Index Page Implementation
DESCRIPTION: Full implementation of the tag index page including tag fetching, rendering, and styling.

LANGUAGE: astro
CODE:
--- 
import BaseLayout from '../../layouts/BaseLayout.astro';
const allPosts = Object.values(import.meta.glob('../posts/*.md', { eager: true }));
const tags = [...new Set(allPosts.map((post: any) => post.frontmatter.tags).flat())];
const pageTitle = "Tag Index";
---
<BaseLayout pageTitle={pageTitle}>
  <div class="tags">
    {tags.map((tag) => (
      <p class="tag"><a href={`/tags/${tag}`}>{tag}</a></p>
    ))}
  </div>
</BaseLayout>
<style>
  a {
    color: #00539F;
  }

  .tags {
    display: flex; 
    flex-wrap: wrap; 
  }

  .tag {
    margin: 0.25em;
    border: dotted 1px #a1a1a1;
    border-radius: .5em;
    padding: .5em 1em;
    font-size: 1.15em;
    background-color: #F8FCFD;
  }
</style>

----------------------------------------

TITLE: Implementando paginação em Astro
DESCRIPTION: Demonstra como usar a função paginate() para gerar páginas paginadas a partir de um array de dados.

LANGUAGE: astro
CODE:
---
// Exemplo: src/pages/astronautas/[pagina].astro
export async function getStaticPaths({ paginate }) {
  const paginasAstronautas = [{
    astronauta: 'Neil Armstrong',
  }, {
    astronauta: 'Buzz Aldrin',
  }, {
    astronauta: 'Sally Ride',
  }, {
    astronauta: 'John Glenn',
  }];
  // Gera páginas a partir de nosso array de astronautas, com 2 por página
  return paginate(paginasAstronautas, { pageSize: 2 });
}
// Todos os dados paginados são passados para a prop "page".
const { page } = Astro.props;
---

<!--Mostra o número da página atual. Astro.params.page também pode ser utilizado!-->
<h1>Página {page.currentPage}</h1>
<ul>
  <!--Lista o array de informações sobre astronautas-->
  {page.data.map(({ astronauta }) => <li>{astronauta}</li>)}
</ul>

----------------------------------------

TITLE: Configuring Supported File Types for Markdoc
DESCRIPTION: JSON configuration to specify supported file types for Front Matter CMS, including Markdoc support.

LANGUAGE: json
CODE:
"frontMatter.content.supportedFileTypes": [ "md", "markdown", "mdx", "mdoc" ]

----------------------------------------

TITLE: Adding Svelte configuration file
DESCRIPTION: JavaScript configuration file (svelte.config.js) required for Svelte IDE support in Astro v2.

LANGUAGE: javascript
CODE:
// svelte.config.js
import { vitePreprocess } from '@astrojs/svelte';

export default {
  preprocess: vitePreprocess(),
};

----------------------------------------

TITLE: Checking Node.js version
DESCRIPTION: Shell command to check the installed version of Node.js, which should be 16.12.0 or later for Astro v2.

LANGUAGE: shell
CODE:
node -v

----------------------------------------

TITLE: Implementing getStaticPaths with params in Astro
DESCRIPTION: This snippet demonstrates the correct usage of the params property in a getStaticPaths function for an Astro route. It shows how to create a dynamic route for a blog post with an ID parameter.

LANGUAGE: astro
CODE:
---
export async function getStaticPaths() {
	return [
		{ params: { id: '1' } }
	];
}
---

----------------------------------------

TITLE: Configuring Astro Server Port
DESCRIPTION: Shows how to set which port the server should listen on.

LANGUAGE: javascript
CODE:
{
  server: { port: 8080 }
}

----------------------------------------

TITLE: Updating Astro dependencies with Yarn
DESCRIPTION: Commands to update Astro and all dependencies using Yarn

LANGUAGE: shell
CODE:
# updates the astro dependency:
yarn upgrade astro
# or, to update all dependencies:
yarn upgrade

----------------------------------------

TITLE: Using Partytown in HTML Scripts
DESCRIPTION: HTML code snippet demonstrating how to use Partytown by adding the type="text/partytown" attribute to a script tag.

LANGUAGE: html
CODE:
<script type="text/partytown" src="fancy-analytics.js"></script>

----------------------------------------

TITLE: Installing Astro Starlight Template with NPM
DESCRIPTION: Command to create a new Astro project using the Starlight documentation template with NPM package manager.

LANGUAGE: shell
CODE:
npm create astro@latest -- --template starlight

----------------------------------------

TITLE: Updating Astro dependencies with pnpm
DESCRIPTION: Commands to update Astro and all dependencies using pnpm

LANGUAGE: shell
CODE:
# updates the astro dependency:
pnpm upgrade astro
# or, to update all dependencies:
pnpm upgrade

----------------------------------------

TITLE: Updating form action handling for HTML forms
DESCRIPTION: Update handling of action results that rely on redirects in HTML form actions

LANGUAGE: astro
CODE:
---
import { actions } from 'astro:actions';

const result = Astro.getActionResult(actions.newsletter);
if (!result?.error) {
  // Embed relevant result data in the URL if needed
  // example: redirect(`/confirmation?email=${result.data.email}`);
  return redirect('/confirmation');
}
---

<form method="POST" action={'/confirmation' + actions.newsletter}>
  <label>E-mail <input required type="email" name="email" /></label>
  <button>Sign up</button>
</form>

----------------------------------------

TITLE: Astro CLI Help Output
DESCRIPTION: Output of the astro --help command showing all available commands and global flags

LANGUAGE: bash
CODE:
astro [command] [...flags]

Commands
              add  Add an integration.
            build  Build your project and write it to disk.
            check  Check your project for errors.
       create-key  Create a cryptography key
              dev  Start the development server.
             docs  Open documentation in your web browser.
             info  List info about your current Astro setup.
          preview  Preview your build locally.
             sync  Generate TypeScript types for all Astro modules.
      preferences  Configure user preferences.
        telemetry  Configure telemetry settings.

Global Flags
  --config <path>  Specify your config file.
    --root <path>  Specify your project root folder.
     --site <url>  Specify your project site.
--base <pathname>  Specify your project base.
        --verbose  Enable verbose logging.
         --silent  Disable all logging.
        --version  Show the version number and exit.
           --help  Show this help message.

----------------------------------------

TITLE: Rendering Astro Components in JSX
DESCRIPTION: JSX code for rendering various Astro components to structure the landing page. It includes Card, ListCard, and SplitCard components for organizing content.

LANGUAGE: jsx
CODE:
<CardGrid>
  <Card title="What will you build with Astro?" icon="laptop">
    Explore [Astro starter themes](https://astro.build/themes/) for blogs, portfolios, docs, landing pages, SaaS, marketing, ecommerce sites, and more!
  </Card>

  <Card title="Take a guided tour" icon="star">
    Complete our introductory [Build a Blog Tutorial](/en/tutorial/0-introduction/) to learn the basics and create your first Astro site.
  </Card>

  <SplitCard title="Start a new project" icon="rocket">
    ```sh
    # create a new project with npm
    npm create astro@latest
    ```
    
    Our [installation guide](/en/install-and-setup/) has step-by-step instructions for installing Astro using our CLI wizard, creating a new project from an existing Astro GitHub repository, and for installing Astro manually.
  </SplitCard>

  <ListCard title="Learn" icon="open-book">
    - [Astro's main features](/en/concepts/why-astro/)
    - [Islands architecture](/en/concepts/islands/)
    - [Astro components](/en/basics/astro-components/)
    - [The Astro template syntax](/en/reference/astro-syntax/)
  </ListCard>

  <ListCard title="Extend" icon="puzzle">
    - [Add integrations like React, and Tailwind](/en/guides/integrations-guide/)
    - [Create type safe content collections](/en/guides/content-collections/)
    - [Enhance navigation with view transitions](/en/guides/view-transitions/)
    - [Connect a headless CMS to your project](/en/guides/cms/)
  </ListCard>
</CardGrid>

<Discord title="Have a question or want to get involved?" cta="Join our Discord"/>

----------------------------------------

TITLE: Static Page Redirect in Astro
DESCRIPTION: Meta refresh redirect implementation for static sites to handle default language routing.

LANGUAGE: astro
CODE:
---
// src/pages/index.astro
---
<meta http-equiv="refresh" content="0;url=/en/" />

----------------------------------------

TITLE: Setting Scoped Style Strategy
DESCRIPTION: Specifies the strategy used for scoping styles within Astro components.

LANGUAGE: js
CODE:
{
  scopedStyleStrategy: 'class'
}

----------------------------------------

TITLE: Creating Responsive Picture Element with Media Queries in Astro
DESCRIPTION: Generate a <picture> element with <source> tags for different viewport sizes, using the generated mobile and desktop images.

LANGUAGE: astro
CODE:
<picture>
    <source media="(max-width: 799px)" srcset={mobileImg.src} />
    <source media="(min-width: 800px)" srcset={desktopImg.src} />
    <img src={desktopImg.src} alt={alt} />
</picture>

----------------------------------------

TITLE: Installing Cloudinary Astro SDK
DESCRIPTION: Commands to install the Cloudinary Astro SDK using different package managers.

LANGUAGE: shell
CODE:
npm install astro-cloudinary

LANGUAGE: shell
CODE:
pnpm add astro-cloudinary

LANGUAGE: shell
CODE:
yarn add astro-cloudinary

----------------------------------------

TITLE: Using DontEditWarning Component
DESCRIPTION: JSX component usage for displaying an edit warning message.

LANGUAGE: jsx
CODE:
<DontEditWarning />

----------------------------------------

TITLE: Defining Astro Error Documentation in Markdown
DESCRIPTION: This markdown snippet defines the structure and content for documenting an Astro error. It includes frontmatter with metadata, imports a component, and provides the error message with a brief explanation.

LANGUAGE: markdown
CODE:
---
# NOTE: This file is auto-generated from 'scripts/error-docgen.mjs'
# Do not make edits to it directly, they will be overwritten.
# Instead, change this file: https://github.com/withastro/astro/blob/main/packages/astro/src/core/errors/errors-data.ts
# Translators, please remove this note and the <DontEditWarning/> component.

title: Astro couldn't find the correct page to render
i18nReady: true
githubURL: https://github.com/withastro/astro/blob/main/packages/astro/src/core/errors/errors-data.ts
---
import DontEditWarning from '~/components/DontEditWarning.astro'

<DontEditWarning />


> **FailedToFindPageMapSSR**: Astro couldn't find the correct page to render, probably because it wasn't correctly mapped for SSR usage. This is an internal error. Please file an issue.

## What went wrong?
Astro couldn't find the correct page to render, probably because it wasn't correctly mapped for SSR usage. This is an internal error.

----------------------------------------

TITLE: Astro Responsive Image Component Usage
DESCRIPTION: Examples of using Image component with different layout configurations

LANGUAGE: astro
CODE:
---
import { Image } from 'astro:assets';
import myImage from '../assets/my_image.png';
---
<Image src={myImage} alt="This will use responsive layout" width={800} height={600} />
<Image src={myImage} alt="This will use full-width layout" layout="full-width" />
<Image src={myImage} alt="This will disable responsive images" layout="none" />

----------------------------------------

TITLE: Converting Gatsby Link to HTML anchor tag in Astro
DESCRIPTION: Shows how to replace Gatsby's Link component with a standard HTML anchor tag in Astro.

LANGUAGE: astro
CODE:
<Link to="/blog">Blog</Link>
<a href="/blog">Blog</a>

----------------------------------------

TITLE: Importing DontEditWarning Component in Astro
DESCRIPTION: This snippet imports a custom component named DontEditWarning from the components directory. It's likely used to display a warning message about not editing the auto-generated file.

LANGUAGE: astro
CODE:
import DontEditWarning from '~/components/DontEditWarning.astro'

----------------------------------------

TITLE: Using Server Directives in Astro
DESCRIPTION: Shows how to use the server:defer directive to create server island components.

LANGUAGE: astro
CODE:
<Avatar server:defer />

----------------------------------------

TITLE: Example Astro Component with Multiple Style and Script Tags
DESCRIPTION: This snippet demonstrates an Astro component with multiple <style> and <script> tags. It's used to illustrate how the order of these tags is affected by the experimental.preserveScriptOrder feature.

LANGUAGE: astro
CODE:
<p>I am a component</p>
<style>
  body {
    background: red;
  }
</style>
<style>
  body {
    background: yellow;
  }
</style>
<script>
    console.log("hello")
</script>
<script>
    console.log("world!")
</script>

----------------------------------------

TITLE: Configuring Astro with Node Adapter
DESCRIPTION: Configuration setup in astro.config.mjs to enable the Node adapter with standalone mode.

LANGUAGE: javascript
CODE:
import { defineConfig } from 'astro/config';
import node from '@astrojs/node';

export default defineConfig({
  output: 'server',
  adapter: node({
    mode: 'standalone',
  }),
});

----------------------------------------

TITLE: Installing SolidJS Integration with Package Managers
DESCRIPTION: Commands for installing @astrojs/solid-js and its peer dependencies using different package managers (npm, pnpm, yarn).

LANGUAGE: sh
CODE:
npx astro add solid
# or
pnpm astro add solid
# or
yarn astro add solid

----------------------------------------

TITLE: Importing from astro:env API
DESCRIPTION: Demonstrates how to import the getSecret helper function from the astro:env module.

LANGUAGE: javascript
CODE:
import { 
  getSecret,
 } from 'astro:env';

----------------------------------------

TITLE: Upgrading Astro and official integrations using pnpm
DESCRIPTION: Use the @astrojs/upgrade package with pnpm to upgrade Astro and official integrations to v5.0

LANGUAGE: shell
CODE:
pnpm dlx @astrojs/upgrade

----------------------------------------

TITLE: Enabling Preact Compat Mode in Astro Config
DESCRIPTION: JavaScript configuration to enable Preact's React compatibility layer in the Astro config file.

LANGUAGE: javascript
CODE:
import { defineConfig } from 'astro/config';
import preact from '@astrojs/preact';

export default defineConfig({
  integrations: [preact({ compat: true })],
});

----------------------------------------

TITLE: Creating Git-based Remark Plugin
DESCRIPTION: Implementation of a remark plugin that uses Git history to determine the last modified time of a file

LANGUAGE: javascript
CODE:
import { execSync } from "child_process";

export function remarkModifiedTime() {
  return function (tree, file) {
    const filepath = file.history[0];
    const result = execSync(`git log -1 --pretty="format:%cI" "${filepath}"`);
    file.data.astro.frontmatter.lastModified = result.toString();
  };
}

----------------------------------------

TITLE: Importing Other Assets in Astro
DESCRIPTION: Shows how to import various asset types like images and text files in Astro components.

LANGUAGE: jsx
CODE:
import imgReference from './image.png'; // imgReference === '/src/image.png'
import svgReference from './image.svg'; // svgReference === '/src/image.svg'
import txtReference from './words.txt'; // txtReference === '/src/words.txt'

// This example uses JSX, but you can use import references with any framework.
<img src={imgReference.src} alt="image description" />;

----------------------------------------

TITLE: Setting Server Entry
DESCRIPTION: Specify the file name of the server entry point when building for SSR.

LANGUAGE: js
CODE:
{
  build: {
    serverEntry: 'main.mjs'
  }
}

----------------------------------------

TITLE: Configuring Cloudinary Environment Variables
DESCRIPTION: Example of setting up Cloudinary credentials in a .env file for use in an Astro project.

LANGUAGE: shell
CODE:
PUBLIC_CLOUDINARY_CLOUD_NAME="<Your Cloud Name>"

// Only needed if using CldUploadWidget or cldAssetsLoader
PUBLIC_CLOUDINARY_API_KEY="<Your API Key>"
CLOUDINARY_API_SECRET="<Your API Secret>"

----------------------------------------

TITLE: Toggling Astro Integrations Conditionally
DESCRIPTION: This code shows how to conditionally enable or disable an Astro integration based on the operating system.

LANGUAGE: javascript
CODE:
integrations: [
  // Example: Skip building a sitemap on Windows
  process.platform !== 'win32' && sitemap()
]

----------------------------------------

TITLE: Starting Local Development Server with Azion CLI
DESCRIPTION: Command to start the local development server for previewing your Astro application using Azion CLI.

LANGUAGE: bash
CODE:
azion dev

----------------------------------------

TITLE: Correcting ESM Image Import Usage with getImage()
DESCRIPTION: Demonstrates the correct way to pass an ESM-imported image to the getImage() function by wrapping it in an object with a src property. This is required for proper image optimization handling in Astro.

LANGUAGE: diff
CODE:
import { getImage } from "astro:assets";
import myImage from "../assets/my_image.png";
- const optimizedImage = await getImage( myImage );
+ const optimizedImage = await getImage({ src: myImage });

----------------------------------------

TITLE: Defining a Dev Toolbar App Structure
DESCRIPTION: Shows the basic structure of a Dev Toolbar app using the defineToolbarApp function, including initialization and cleanup logic.

LANGUAGE: typescript
CODE:
import { defineToolbarApp } from "astro/toolbar";

export default defineToolbarApp({
  init(canvas) {
    const text = document.createTextNode('Hello World!');
    canvas.appendChild(text);
  },
  beforeTogglingOff() {
    const confirmation = window.confirm('Really exit?');
    return confirmation;
  } 
});

----------------------------------------

TITLE: Generated HTML Without Experimental Flag
DESCRIPTION: This HTML snippet shows how Astro generates the heading ID by default, without the experimental flag enabled. The trailing hyphen is removed from the ID.

LANGUAGE: html
CODE:
<h2 id="picture"><code>&lt;Picture /&gt;</h2>

----------------------------------------

TITLE: Configuring Content Collection Loader for MDX
DESCRIPTION: TypeScript code to configure a content collection loader to include MDX files.

LANGUAGE: typescript
CODE:
import { defineCollection, z } from 'astro:content';
import { glob } from 'astro/loaders';

const blog = defineCollection({
  loader: glob({ pattern: "**/*.{md,mdx}", base: "./src/blog" }),
  schema: z.object({
    title: z.string(),
    description: z.string(),
    pubDate: z.coerce.date(),
  })
});

export const collections = { blog };

----------------------------------------

TITLE: Configuring TypeScript for Preact in Astro
DESCRIPTION: JSON configuration to add Preact support to the TypeScript config file in an Astro project.

LANGUAGE: json
CODE:
{
  "extends": "astro/tsconfigs/strict",
  "include": [".astro/types.d.ts", "**/*"],
  "exclude": ["dist"],
  "compilerOptions": {
    "jsx": "react-jsx",
    "jsxImportSource": "preact"
  }
}

----------------------------------------

TITLE: Использование Astro.props для доступа к входным параметрам компонента
DESCRIPTION: Пример получения входных параметров компонента через Astro.props

LANGUAGE: astro
CODE:
---
// src/components/Heading.astro
const { title, date } = Astro.props;
---
<div>
  <h1>{title}</h1>
  <p>{date}</p>
</div>

----------------------------------------

TITLE: Upgrading Astro and Official Integrations using Yarn
DESCRIPTION: Command to upgrade Astro and its official integrations to the latest version using Yarn.

LANGUAGE: shell
CODE:
yarn dlx @astrojs/upgrade

----------------------------------------

TITLE: Manually Installing @astrojs/sitemap
DESCRIPTION: Commands to manually install the @astrojs/sitemap package using different package managers.

LANGUAGE: shell
CODE:
npm install @astrojs/sitemap

LANGUAGE: shell
CODE:
pnpm add @astrojs/sitemap

LANGUAGE: shell
CODE:
yarn add @astrojs/sitemap

----------------------------------------

TITLE: Implementing Lit Components with Client-Side Script in Astro
DESCRIPTION: Demonstrates how to use Lit components in Astro by importing and using custom elements through a client-side script tag after the Lit integration deprecation.

LANGUAGE: astro
CODE:
<script>
  import "../components/MyTabs";
</script>

<my-tabs title="These are my tabs">...</my-tabs>

----------------------------------------

TITLE: Using the Prose component to render Markdown content in Astro
DESCRIPTION: Astro page that queries a collection entry, renders its content, and wraps it with the Prose component for Tailwind Typography styling.

LANGUAGE: astro
CODE:
---
import Prose from '../components/Prose.astro';
import Layout from '../layouts/Layout.astro';
import { getEntry, render } from 'astro:content';

const entry = await getEntry('collection', 'entry');
const { Content } = await render(entry);
---
<Layout>
  <Prose>
    <Content />
  </Prose>
</Layout>

----------------------------------------

TITLE: Importing Astro Components
DESCRIPTION: Imports custom Astro components for use in the page layout. These components include CMSGuidesNav, ReadMore, and Badge.

LANGUAGE: astro
CODE:
import CMSGuidesNav from '~/components/CMSGuidesNav.astro';
import ReadMore from '~/components/ReadMore.astro';
import Badge from "~/components/Badge.astro"

----------------------------------------

TITLE: Setting Server Port
DESCRIPTION: Set which port the server should listen on.

LANGUAGE: js
CODE:
{
  server: { port: 8080 }
}

----------------------------------------

TITLE: Adding Astro Integrations
DESCRIPTION: Commands to add React and Markdoc integrations to an Astro project using different package managers.

LANGUAGE: shell
CODE:
npx astro add react markdoc

LANGUAGE: shell
CODE:
pnpm astro add react markdoc

LANGUAGE: shell
CODE:
yarn astro add react markdoc

----------------------------------------

TITLE: Astro Grid Component Usage
DESCRIPTION: Example of using Grid and Card components to display theme showcase

LANGUAGE: astro
CODE:
<Grid>
  <Card title="The Balanced Chef" href="https://astro.build/themes/details/the-balanced-chef/" thumbnail="astro-chef-project.png"/>
</Grid>

----------------------------------------

TITLE: Demonstrating Correct Usage of Image Component in Astro
DESCRIPTION: This snippet shows how to properly use the Image component in Astro with both imported and remote images. It demonstrates the correct format for the 'src' attribute.

LANGUAGE: astro
CODE:
---
import { Image } from "astro:assets";
import myImage from "../assets/my_image.png";
---

<Image src={myImage} alt="..." />
<Image src="https://example.com/logo.png" width={300} height={300} alt="..." />

----------------------------------------

TITLE: Replacing Astro.canonicalURL with new URL constructor
DESCRIPTION: Example of replacing the deprecated Astro.canonicalURL with a new URL constructor using Astro.url and Astro.site

LANGUAGE: js
CODE:
// Before:
const canonicalURL = Astro.canonicalURL;
// After:
const canonicalURL = new URL(Astro.url.pathname, Astro.site);

----------------------------------------

TITLE: Installing @tailwindcss/typography with pnpm
DESCRIPTION: Command to install the @tailwindcss/typography package using pnpm.

LANGUAGE: shell
CODE:
pnpm add -D @tailwindcss/typography

----------------------------------------

TITLE: Client-Server Communication in Dev Toolbar App
DESCRIPTION: Shows how to implement client-server communication in a Dev Toolbar app using the server object.

LANGUAGE: typescript
CODE:
export default defineToolbarApp({
  init(canvas, app, server) {
    server.send('my-message', { message: 'Hello!' });

    server.on('server-message', (data) => {
      console.log(data.message);
    });
  },
});

----------------------------------------

TITLE: Configuring Default SVG Mode
DESCRIPTION: Configuration example showing how to set the default SVG rendering mode to sprite sheet generation.

LANGUAGE: javascript
CODE:
{
  experimental: {
    svg: {
      mode: 'sprite',
    }
  },
}

----------------------------------------

TITLE: Manually Installing MDX Integration with NPM
DESCRIPTION: Command to manually install the @astrojs/mdx package using NPM package manager.

LANGUAGE: shell
CODE:
npm install @astrojs/mdx

----------------------------------------

TITLE: Astro Content Schema Error Import Component
DESCRIPTION: Imports a warning component that indicates this is an auto-generated file that should not be directly edited.

LANGUAGE: astro
CODE:
import DontEditWarning from '~/components/DontEditWarning.astro'

----------------------------------------

TITLE: Configuring Astro Server Entry
DESCRIPTION: Shows how to specify the file name of the server entrypoint for Astro SSR builds.

LANGUAGE: javascript
CODE:
{
  build: {
    serverEntry: 'main.mjs'
  }
}

----------------------------------------

TITLE: Upgrading Astro and Official Integrations using NPM
DESCRIPTION: Command to upgrade Astro and its official integrations to the latest version using NPM.

LANGUAGE: shell
CODE:
npx @astrojs/upgrade

----------------------------------------

TITLE: Installing Partytown Integration with PNPM in Astro
DESCRIPTION: Command to install the @astrojs/partytown integration using PNPM package manager in an Astro project.

LANGUAGE: sh
CODE:
pnpm astro add partytown

----------------------------------------

TITLE: Using Custom Shiki Theme in Astro Config
DESCRIPTION: Imports and applies a custom Shiki theme from a local file in the Astro configuration.

LANGUAGE: js
CODE:
import { defineConfig } from 'astro/config';
import customTheme from './my-shiki-theme.json';

export default defineConfig({
  markdown: {
    shikiConfig: { 
      theme: customTheme,
    },
  },
});

----------------------------------------

TITLE: Configuring Alpine.js Integration in Astro
DESCRIPTION: Adds the Alpine.js integration to the Astro configuration file. This enables Alpine.js support in the Astro project.

LANGUAGE: javascript
CODE:
import { defineConfig } from 'astro/config';
import alpinejs from '@astrojs/alpinejs';

export default defineConfig({
  // ...
  integrations: [alpinejs()],
});

----------------------------------------

TITLE: Setting Server Headers
DESCRIPTION: Set custom headers to be sent in astro dev and astro preview.

LANGUAGE: js
CODE:
{
  server: { headers: {} }
}

----------------------------------------

TITLE: Deploying to Edgio
DESCRIPTION: Command to deploy the Astro site to Edgio's platform.

LANGUAGE: bash
CODE:
edgio deploy

----------------------------------------

TITLE: Configuring Responsive Images in Astro Config
DESCRIPTION: Basic configuration to enable experimental responsive images support in astro.config.mjs

LANGUAGE: javascript
CODE:
{
  experimental: {
    responsiveImages: true,
  },
}

----------------------------------------

TITLE: Using set:html Directive in Astro
DESCRIPTION: Shows how to use the set:html directive to inject raw HTML content into an element.

LANGUAGE: astro
CODE:
---
const rawHTMLString = "Hello <strong>World</strong>"
---
<h1>{rawHTMLString}</h1>
  <!-- Output: <h1>Hello &lt;strong&gt;World&lt;/strong&gt;</h1> -->
<h1 set:html={rawHTMLString} />
  <!-- Output: <h1>Hello <strong>World</strong></h1> -->

----------------------------------------

TITLE: Creating a Custom Card Component with Dynamic Image Import in Astro
DESCRIPTION: This snippet shows how to create an Astro component that dynamically imports and displays images. It uses the import.meta.glob function to handle image imports and the Image component from astro:assets for rendering.

LANGUAGE: astro
CODE:
---
import type { ImageMetadata } from 'astro';
import { Image } from 'astro:assets';

interface Props {
   imagePath: string;
   altText: string;
   name: string;
   age: number;
}

const { imagePath, altText, name, age } = Astro.props;
const images = import.meta.glob<{ default: ImageMetadata }>('/src/assets/*.{jpeg,jpg,png,gif}');
if (!images[imagePath]) throw new Error(`"${imagePath}" does not exist in glob: "src/assets/*.{jpeg,jpg,png,gif}"`);
---
<div class="card">
    <h2>{name}</h2>
    <p>Age: {age}</p>
    <Image src={images[imagePath]()} alt={altText} />
</div>

----------------------------------------

TITLE: Dynamic HTML Generation
DESCRIPTION: Example of generating dynamic HTML content using array mapping and conditional rendering.

LANGUAGE: astro
CODE:
---
const items = ["Dog", "Cat", "Platypus"];
---
<ul>
  {items.map((item) => (
    <li>{item}</li>
  ))}
</ul>

----------------------------------------

TITLE: Configuring Astro Collection Entry Error Page
DESCRIPTION: YAML frontmatter configuration for an error documentation page. Defines metadata including title, i18n status, and GitHub source URL.

LANGUAGE: yaml
CODE:
---
title: Data collection entry failed to parse.
i18nReady: true
githubURL: https://github.com/withastro/astro/blob/main/packages/astro/src/core/errors/errors-data.ts
---

----------------------------------------

TITLE: Configuring Markdoc Integration in Astro Config
DESCRIPTION: Adding Markdoc integration to astro.config.mjs configuration file

LANGUAGE: javascript
CODE:
import { defineConfig } from 'astro/config';
import markdoc from '@astrojs/markdoc';
export default defineConfig({
  // ...
  integrations: [markdoc()],
});

----------------------------------------

TITLE: Removing View Transitions Experimental Flag
DESCRIPTION: Example of removing the view transitions experimental flag from the Astro configuration file.

LANGUAGE: javascript
CODE:
import { defineConfig } from 'astro/config';

export default defineConfig({
  experimental: {
   viewTransitions: true
  }
});

----------------------------------------

TITLE: Middleware Astro pour la gestion des résultats d'action
DESCRIPTION: Exemple de middleware Astro pour gérer les résultats d'action, incluant la persistance des sessions et la redirection.

LANGUAGE: typescript
CODE:
import { defineMiddleware } from 'astro:middleware';
import { getActionContext } from 'astro:actions';
import { randomUUID } from "node:crypto";
import { getStore } from "@netlify/blobs";

export const onRequest = defineMiddleware(async (context, next) => {
  if (context.isPrerendered) return next();
  
  const { action, setActionResult, serializeActionResult } =
    getActionContext(context);
  const actionStore = getStore("action-session");
  
  const sessionId = context.cookies.get("action-session-id")?.value;
  const session = sessionId
    ? await actionStore.get(sessionId, {
        type: "json",
      })
    : undefined;
  
  if (session) {
    setActionResult(session.actionName, session.actionResult);
    await actionStore.delete(sessionId);
    context.cookies.delete("action-session-id");
    return next();
  }
  
  if (action?.calledFrom === "form") {
    const actionResult = await action.handler();
    const sessionId = randomUUID();
    await actionStore.setJSON(sessionId, {
      actionName: action.name,
      actionResult: serializeActionResult(actionResult),
    });
    context.cookies.set("action-session-id", sessionId);
    if (actionResult.error) {
      const referer = context.request.headers.get("Referer");
      if (!referer) {
        throw new Error(
          "Internal: Referer unexpectedly missing from Action POST request.",
        );
      }
      return context.redirect(referer);
    }
    return context.redirect(context.originPathname);
  }
  
  return next();
});

----------------------------------------

TITLE: Removing @astrojs/image Integration
DESCRIPTION: Example of removing the @astrojs/image integration from the Astro configuration file.

LANGUAGE: javascript
CODE:
// astro.config.mjs
import { defineConfig } from 'astro/config';
import image from '@astrojs/image';

export default defineConfig({
  integrations: [
    image(),
  ]
})

----------------------------------------

TITLE: Error Message Component Import
DESCRIPTION: Imports and renders a warning component for the documentation page.

LANGUAGE: html
CODE:
import DontEditWarning from '~/components/DontEditWarning.astro'

<DontEditWarning />

----------------------------------------

TITLE: Installing graphql-request Package in Astro Project
DESCRIPTION: Commands for installing the graphql-request package using different package managers (npm, pnpm, yarn) in an Astro project.

LANGUAGE: shell
CODE:
npm install graphql-request

LANGUAGE: shell
CODE:
pnpm add graphql-request

LANGUAGE: shell
CODE:
yarn add graphql-request

----------------------------------------

TITLE: Applying Dark Mode CSS for Shiki Themes
DESCRIPTION: Adds CSS to apply Shiki's dark mode theme using media queries for all Markdown code blocks.

LANGUAGE: css
CODE:
@media (prefers-color-scheme: dark) {
  .astro-code,
  .astro-code span {
    color: var(--shiki-dark) !important;
    background-color: var(--shiki-dark-bg) !important;
    /* Optional, if you also want font styles */
    font-style: var(--shiki-dark-font-style) !important;
    font-weight: var(--shiki-dark-font-weight) !important;
    text-decoration: var(--shiki-dark-text-decoration) !important;
  }
}

----------------------------------------

TITLE: Manually Installing Alpine.js Integration with npm
DESCRIPTION: Uses npm to manually install the @astrojs/alpinejs integration package and its peer dependencies for Astro projects.

LANGUAGE: shell
CODE:
npm install @astrojs/alpinejs

LANGUAGE: shell
CODE:
npm install alpinejs @types/alpinejs

----------------------------------------

TITLE: Configuring Adapter for SSR
DESCRIPTION: Use a build adapter for deploying to your favorite server, serverless, or edge host.

LANGUAGE: js
CODE:
import netlify from '@astrojs/netlify';
{
  // Example: Build for Netlify serverless deployment
  adapter: netlify(),
}

----------------------------------------

TITLE: Importing Actions API Functions in JavaScript
DESCRIPTION: This snippet shows how to import various utility functions and constructors from the astro:actions module. These imports are essential for defining and working with actions in Astro.

LANGUAGE: javascript
CODE:
import { 
  actions,
  defineAction,
  isInputError,
  isActionError,
  ActionError,
 } from 'astro:actions';

----------------------------------------

TITLE: Использование Astro.request для доступа к данным запроса
DESCRIPTION: Пример получения URL и заголовков запроса через Astro.request

LANGUAGE: astro
CODE:
<p>Received a {Astro.request.method} request to "{Astro.request.url}".</p>
<p>Received request headers: <code>{JSON.stringify(Object.fromEntries(Astro.request.headers))}</code>

----------------------------------------

TITLE: Configuring No-op Passthrough Image Service
DESCRIPTION: Example of configuring a no-op image service for environments that don't support Sharp image optimization.

LANGUAGE: javascript
CODE:
import { defineConfig, passthroughImageService } from 'astro/config';

export default defineConfig({
  image: {
    service: passthroughImageService()
  }
});

----------------------------------------

TITLE: Installing Partytown Integration with NPM in Astro
DESCRIPTION: Command to install the @astrojs/partytown integration using NPM package manager in an Astro project.

LANGUAGE: sh
CODE:
npx astro add partytown

----------------------------------------

TITLE: Setting Assets Prefix
DESCRIPTION: Specify the prefix for Astro-generated asset links.

LANGUAGE: js
CODE:
{
  build: {
    assetsPrefix: 'https://cdn.example.com'
  }
}

LANGUAGE: js
CODE:
{
  build: {
    assetsPrefix: {
      'js': 'https://js.cdn.example.com',
      'mjs': 'https://js.cdn.example.com',
      'css': 'https://css.cdn.example.com',
      'fallback': 'https://cdn.example.com'
    }
  }
}

----------------------------------------

TITLE: Configuring Collection Types with TypeScript
DESCRIPTION: Basic configuration example showing how to define a content collection with type and schema definitions

LANGUAGE: typescript
CODE:
// src/content/config.ts
import { z, defineCollection } from 'astro:content';

const blogCollection = defineCollection({
  type: 'content',
  schema: z.object({
    title: z.string(),
    tags: z.array(z.string()),
    image: z.string().optional(),
  }),
});

export const collections = {
  'blog': blogCollection,
};

----------------------------------------

TITLE: Importing DontEditWarning Component in Astro
DESCRIPTION: Imports a warning component that indicates this file should not be edited directly as it is auto-generated.

LANGUAGE: astro
CODE:
import DontEditWarning from '~/components/DontEditWarning.astro'

----------------------------------------

TITLE: Configuring Node.js Compatibility for Cloudflare
DESCRIPTION: Example of configuring Vite for Node.js compatibility in Cloudflare.

LANGUAGE: javascript
CODE:
import {defineConfig} from "astro/config";
import cloudflare from '@astrojs/cloudflare';

export default defineConfig({
  adapter: cloudflare({}),
  output: 'server',
  vite: {
		ssr: {
			external: ['node:buffer'],
		},
	},
})

----------------------------------------

TITLE: Setting Yarn Environment Variables for Static Deployment
DESCRIPTION: Environment variables configuration for deploying static Astro sites with Yarn on Clever Cloud.

LANGUAGE: shell
CODE:
CC_POST_BUILD_HOOK="yarn build"
CC_PRE_BUILD_HOOK="yarn && yarn run astro telemetry disable"
CC_WEBROOT="/dist"

----------------------------------------

TITLE: Importing Error Warning Component in Astro
DESCRIPTION: Import statement for a warning component used to indicate the auto-generated nature of the documentation.

LANGUAGE: astro
CODE:
import DontEditWarning from '~/components/DontEditWarning.astro'

----------------------------------------

TITLE: Upgrading Astro and Integrations using pnpm
DESCRIPTION: Commands to upgrade Astro to v3.x and update React and Tailwind integrations using pnpm.

LANGUAGE: shell
CODE:
# Upgrade to Astro v3.x
pnpm add astro@latest

# Example: upgrade React and Tailwind integrations
pnpm add @astrojs/react@latest @astrojs/tailwind@latest

----------------------------------------

TITLE: Updating Shiki CSS variable theme color token names
DESCRIPTION: Update Shiki CSS variable theme color token names to align with Shiki v1 defaults

LANGUAGE: css
CODE:
:root {
  --astro-code-color-text: #000;
  --astro-code-color-background: #fff;
  --astro-code-foreground: #000;
  --astro-code-background: #fff;
}

----------------------------------------

TITLE: Installing Astro Blog Template with Yarn
DESCRIPTION: Command to create a new Astro project using the blog template starter with Yarn package manager.

LANGUAGE: shell
CODE:
yarn create astro --template blog

----------------------------------------

TITLE: Installing Nano Stores for Different Frameworks
DESCRIPTION: Commands to install Nano Stores and framework-specific helper packages for Preact, React, Solid, Svelte, and Vue.

LANGUAGE: shell
CODE:
npm install nanostores @nanostores/preact

LANGUAGE: shell
CODE:
npm install nanostores @nanostores/react

LANGUAGE: shell
CODE:
npm install nanostores @nanostores/solid

LANGUAGE: shell
CODE:
npm install nanostores

LANGUAGE: shell
CODE:
npm install nanostores @nanostores/vue

----------------------------------------

TITLE: Updating attribute value handling for non-boolean HTML attributes
DESCRIPTION: Update code relying on attribute values to match new non-boolean attribute value rendering

LANGUAGE: js
CODE:
el.getAttribute('inherit') === ''
el.getAttribute('inherit') === 'false'

el.hasAttribute('data-light')
el.dataset.light === 'true'

----------------------------------------

TITLE: Importing Astro Components
DESCRIPTION: Component imports for tutorial checklist and box elements used in the setup guide.

LANGUAGE: jsx
CODE:
import Checklist from '~/components/Checklist.astro';
import Box from '~/components/tutorial/Box.astro';

----------------------------------------

TITLE: Defining a Content Collection in Astro
DESCRIPTION: Example of defining a content collection with a loader and schema in Astro's content config file.

LANGUAGE: typescript
CODE:
import { defineCollection, z } from 'astro:content';
import { glob, file } from 'astro/loaders';

const blog = defineCollection({
  loader: glob({ pattern: "**/*.md", base: "./src/data/blog" }),
  schema: z.object({
    title: z.string(),
    description: z.string(),
    pubDate: z.coerce.date(),
    updatedDate: z.coerce.date().optional(),
  })
});

export const collections = { blog };

----------------------------------------

TITLE: Markdown Frontmatter Configuration
DESCRIPTION: YAML frontmatter that configures the error documentation page metadata including title, i18n status, and source code URL.

LANGUAGE: markdown
CODE:
---
title: Content entry is missing an ID
i18nReady: true
githubURL: https://github.com/withastro/astro/blob/main/packages/astro/src/core/errors/errors-data.ts
---

----------------------------------------

TITLE: Rendering DontEditWarning Component
DESCRIPTION: Renders the warning component to display an edit prevention message.

LANGUAGE: astro
CODE:
<DontEditWarning />

----------------------------------------

TITLE: Configuring Cloudflare Platform Proxy
DESCRIPTION: Example of configuring the Cloudflare platform proxy in the Astro config file.

LANGUAGE: javascript
CODE:
import cloudflare from '@astrojs/cloudflare';
import { defineConfig } from 'astro/config';

export default defineConfig({
	adapter: cloudflare({
		platformProxy: {
			enabled: true,
			configPath: 'wrangler.json',
			experimentalJsonConfig: true,
			persist: {
				path: './.cache/wrangler/v3'
			},
		},
	}),
});

----------------------------------------

TITLE: Deploying Static Files with Azion CLI
DESCRIPTION: Command to deploy your static files using the Azion CLI.

LANGUAGE: bash
CODE:
azion deploy

----------------------------------------

TITLE: Configuring Astro Server Headers
DESCRIPTION: Shows how to set custom HTTP response headers for the dev server.

LANGUAGE: javascript
CODE:
{
  server: { headers: { 'x-custom-header': 'custom-value' } }
}

----------------------------------------

TITLE: Upgrading Astro and Integrations using npm
DESCRIPTION: Commands to upgrade Astro to v3.x and update React and Tailwind integrations using npm.

LANGUAGE: shell
CODE:
# Upgrade to Astro v3.x
npm install astro@latest

# Example: upgrade React and Tailwind integrations
npm install @astrojs/react@latest @astrojs/tailwind@latest

----------------------------------------

TITLE: Creating Localized Links in Astro
DESCRIPTION: Example showing how to create localized links using Astro's i18n helper functions and manual URL paths.

LANGUAGE: astro
CODE:
---
import { getRelativeLocaleUrl } from 'astro:i18n';

// defaultLocale is "es"
const aboutURL = getRelativeLocaleUrl("es", "about");
---

<a href="/get-started/">¡Vamos!</a>
<a href={getRelativeLocaleUrl('es', 'blog')}>Blog</a>
<a href={aboutURL}>Acerca</a>

----------------------------------------

TITLE: Installing Astro Starlight Template with NPM
DESCRIPTION: Command to create a new Astro project using the Starlight documentation theme template via NPM package manager.

LANGUAGE: shell
CODE:
npm create astro@latest -- --template starlight

----------------------------------------

TITLE: Importing TypeScript Modules in Astro
DESCRIPTION: Demonstrates importing TypeScript modules and types in Astro components.

LANGUAGE: typescript
CODE:
import { getUser } from './user';
import type { UserType } from './user';

----------------------------------------

TITLE: Installing Astro Starlight Template with PNPM
DESCRIPTION: Command to create a new Astro project using the Starlight documentation template with PNPM package manager.

LANGUAGE: shell
CODE:
pnpm create astro@latest --template starlight

----------------------------------------

TITLE: Importing Assets Components and Functions from astro:assets
DESCRIPTION: Shows how to import the core image components and helper functions from the astro:assets module.

LANGUAGE: js
CODE:
import { 
  Image,
  Picture,
  getImage,
  inferRemoteSize,
 } from 'astro:assets';

----------------------------------------

TITLE: Declaring Environment Variable Type in TypeScript
DESCRIPTION: Define the type for the DATOCMS_API_KEY environment variable in the env.d.ts file for TypeScript support.

LANGUAGE: typescript
CODE:
interface ImportMetaEnv {
  readonly DATOCMS_API_KEY: string;
}

----------------------------------------

TITLE: Enabling Vue DevTools in Astro Config
DESCRIPTION: Configuration to enable Vue DevTools in development mode for an Astro project.

LANGUAGE: javascript
CODE:
import { defineConfig } from 'astro/config';
import vue from '@astrojs/vue';

export default defineConfig({
  // ...
  integrations: [vue({ devtools: true })],
});

----------------------------------------

TITLE: Importing Astro Component
DESCRIPTION: Imports a warning component that indicates this file should not be edited directly as it is auto-generated.

LANGUAGE: astro
CODE:
import DontEditWarning from '~/components/DontEditWarning.astro'

----------------------------------------

TITLE: Importing DontEditWarning Component in Astro
DESCRIPTION: Import statement for a warning component used to prevent manual edits to auto-generated files.

LANGUAGE: astro
CODE:
import DontEditWarning from '~/components/DontEditWarning.astro'

----------------------------------------

TITLE: Astro Frontmatter Configuration
DESCRIPTION: Frontmatter configuration for the deployment guide page, specifying metadata like title, description, sidebar label, and internationalization status.

LANGUAGE: markdown
CODE:
---
title: Deploy your Astro Site to Stormkit
description: Deploy your Astro site to Stormkit
sidebar:
  label: Stormkit
type: deploy
i18nReady: true
---

----------------------------------------

TITLE: Installing Alpine.js Integration with npm
DESCRIPTION: Uses npm to install the @astrojs/alpinejs integration package for Astro projects.

LANGUAGE: shell
CODE:
npx astro add alpinejs

----------------------------------------

TITLE: Authenticating with Heroku CLI
DESCRIPTION: Command to login to Heroku using the CLI tool. Requires Heroku CLI to be installed and a Heroku account.

LANGUAGE: bash
CODE:
$ heroku login

----------------------------------------

TITLE: Importing DontEditWarning Component in Astro
DESCRIPTION: Imports a warning component used to prevent manual edits to auto-generated documentation.

LANGUAGE: astro
CODE:
import DontEditWarning from '~/components/DontEditWarning.astro'

----------------------------------------

TITLE: Configuring Passthrough Image Service in Astro
DESCRIPTION: Configuration code to set up a passthrough image service when Sharp is not needed. This alternative configuration bypasses image processing entirely.

LANGUAGE: javascript
CODE:
import { defineConfig, passthroughImageService } from "astro/config";
export default defineConfig({
 image: {
   service: passthroughImageService(),
 },
});

----------------------------------------

TITLE: Installing MDX Integration with NPM
DESCRIPTION: Command to install the @astrojs/mdx integration using NPM package manager.

LANGUAGE: shell
CODE:
npx astro add mdx

----------------------------------------

TITLE: Using Client Directives in Astro
DESCRIPTION: Demonstrates the usage of various client directives for hydrating UI framework components.

LANGUAGE: astro
CODE:
<BuyButton client:load />
<ShowHideButton client:idle />
<HeavyImageCarousel client:visible />
<SidebarToggle client:media="(max-width: 50em)" />
<SomeReactComponent client:only="react" />

----------------------------------------

TITLE: Installing Astro Blog Template with Yarn
DESCRIPTION: Command to create a new Astro project using the official blog template starter via Yarn package manager.

LANGUAGE: shell
CODE:
yarn create astro --template blog

----------------------------------------

TITLE: Installing Astro with Starlight Template using Package Managers
DESCRIPTION: Commands for creating a new Astro project with the Starlight documentation template using different package managers (npm, pnpm, and yarn).

LANGUAGE: shell
CODE:
npm create astro@latest -- --template starlight

LANGUAGE: shell
CODE:
pnpm create astro@latest --template starlight

LANGUAGE: shell
CODE:
yarn create astro --template starlight

----------------------------------------

TITLE: Importing DontEditWarning Component in Markdown
DESCRIPTION: This code snippet imports a component named DontEditWarning from a specific path. It's likely used to display a warning message about not editing the auto-generated file directly.

LANGUAGE: markdown
CODE:
import DontEditWarning from '~/components/DontEditWarning.astro'

----------------------------------------

TITLE: Defining Astro Error Documentation in Markdown
DESCRIPTION: This snippet defines the frontmatter and structure for an Astro error documentation page. It includes metadata such as the title, i18n readiness, and GitHub URL. The content explains that this error is deprecated and now results in a warning instead.

LANGUAGE: markdown
CODE:
---
# NOTE: This file is auto-generated from 'scripts/error-docgen.mjs'
# Do not make edits to it directly, they will be overwritten.
# Instead, change this file: https://github.com/withastro/astro/blob/main/packages/astro/src/core/errors/errors-data.ts
# Translators, please remove this note and the <DontEditWarning/> component.

title: Collection does not exist
i18nReady: true
githubURL: https://github.com/withastro/astro/blob/main/packages/astro/src/core/errors/errors-data.ts
---
import DontEditWarning from '~/components/DontEditWarning.astro'

<DontEditWarning />


:::caution[Deprecated]
Collections that do not exist no longer result in an error. A warning is given instead.
:::

> A collection queried via `getCollection()` does not exist.

## What went wrong?
When querying a collection, ensure a collection directory with the requested name exists under `src/content/`.

----------------------------------------

TITLE: SSR Project Configuration in YAML
DESCRIPTION: YAML configuration for creating an SSR Astro project on Zerops with Node.js service.

LANGUAGE: yaml
CODE:
project:
  name: recipe-astro
services:
  - hostname: app
    type: nodejs@20

----------------------------------------

TITLE: Initializing Firebase Hosting for Astro Project
DESCRIPTION: Initialize Firebase Hosting in your Astro project. This creates firebase.json and .firebaserc files in the project root.

LANGUAGE: shell
CODE:
npx firebase init hosting

LANGUAGE: shell
CODE:
pnpm exec firebase init hosting

LANGUAGE: shell
CODE:
yarn firebase init hosting

----------------------------------------

TITLE: Installing Preact Package with PNPM
DESCRIPTION: Command to install the Preact package using pnpm if it's not automatically installed as a peer dependency.

LANGUAGE: shell
CODE:
pnpm add preact

----------------------------------------

TITLE: Utilisation des paramètres d'URL dans Astro
DESCRIPTION: Exemple d'accès aux paramètres d'URL dynamiques dans un composant Astro via Astro.params.

LANGUAGE: astro
CODE:
---
export function getStaticPaths() {
  return [
    { params: { id: '1' } },
    { params: { id: '2' } },
    { params: { id: '3' } }
  ];
}
const { id } = Astro.params;
---
<h1>{id}</h1>

----------------------------------------

TITLE: Using DontEditWarning Component in Astro
DESCRIPTION: This snippet demonstrates the usage of the DontEditWarning component within the Astro file. It's a self-closing tag, indicating that the component doesn't have any content or properties passed to it.

LANGUAGE: astro
CODE:
<DontEditWarning />

----------------------------------------

TITLE: Importing Astro Components
DESCRIPTION: Demonstrates importing required Astro components and utilities for the tutorial page

LANGUAGE: astro
CODE:
import Checklist from '~/components/Checklist.astro';
import Box from '~/components/tutorial/Box.astro';
import { Steps } from '@astrojs/starlight/components';

----------------------------------------

TITLE: Using class:list Directive in Astro
DESCRIPTION: Demonstrates how to use the class:list directive to dynamically generate CSS classes for an element.

LANGUAGE: astro
CODE:
<span class:list={[ 'hello goodbye', { world: true }, [ 'friend' ] ]} />

----------------------------------------

TITLE: Creating New Astro Blog Project with Yarn
DESCRIPTION: Command to create a new Astro project using the official blog template starter with Yarn package manager.

LANGUAGE: shell
CODE:
yarn create astro --template blog

----------------------------------------

TITLE: Converting Gatsby GraphQL Queries to Astro
DESCRIPTION: Shows how to replace Gatsby's GraphQL queries with Astro's import.meta.glob() or getCollection() for accessing data from local files.

LANGUAGE: astro
CODE:
---
import { graphql } from "gatsby"
import { getCollection } from 'astro:content';

// Get all `src/content/blog/` entries
const allBlogPosts = await getCollection('blog');

// Get all `src/pages/posts/` entries
const allPosts = Object.values(import.meta.glob('../pages/post/*.md', { eager: true }));
---

export const pageQuery = graphql`
  {
    allMarkdownRemark(sort: { frontmatter: { date: DESC } }) {
      nodes {
        excerpt
        fields {
          slug
        }
        frontmatter {
          date(formatString: "MMMM DD, YYYY")
          title
          description
        }
      }
    }
  }
`

----------------------------------------

TITLE: Installing @astrojs/react with pnpm
DESCRIPTION: Command to install the @astrojs/react integration using pnpm package manager.

LANGUAGE: sh
CODE:
pnpm astro add react

----------------------------------------

TITLE: Using DontEditWarning Component in Astro Template
DESCRIPTION: Renders the DontEditWarning component in the template to warn users against direct edits.

LANGUAGE: astro
CODE:
<DontEditWarning />

----------------------------------------

TITLE: Displaying Astro Error Documentation in Markdown
DESCRIPTION: This snippet shows the structure of an Astro error documentation page. It includes frontmatter with metadata, an import statement for a warning component, and the main content of the error message with an explanation.

LANGUAGE: markdown
CODE:
---
# NOTE: This file is auto-generated from 'scripts/error-docgen.mjs'
# Do not make edits to it directly, they will be overwritten.
# Instead, change this file: https://github.com/withastro/astro/blob/main/packages/astro/src/core/errors/errors-data.ts
# Translators, please remove this note and the <DontEditWarning/> component.

title: An invalid Action query string was passed by a form.
i18nReady: true
githubURL: https://github.com/withastro/astro/blob/main/packages/astro/src/core/errors/errors-data.ts
---
import DontEditWarning from '~/components/DontEditWarning.astro'

<DontEditWarning />


:::caution[Deprecated]
Deprecated since version 4.13.2.
:::

> **ActionsUsedWithForGetError**: Action ACTION_NAME was called from a form using a GET request, but only POST requests are supported. This often occurs if `method="POST"` is missing on the form.

## What went wrong?
Action was called from a form using a GET request, but only POST requests are supported. This often occurs if `method="POST"` is missing on the form.

**See Also:**
-  [Actions RFC](https://github.com/withastro/roadmap/blob/actions/proposals/0046-actions.md)

----------------------------------------

TITLE: Static Site Deployment Configuration
DESCRIPTION: Zerops deployment configuration for static Astro sites, including build and deployment steps using Node.js.

LANGUAGE: yaml
CODE:
zerops:
  - setup: app
    build:
      base: nodejs@20
      buildCommands:
        - npm i
        - npm build
      deployFiles:
        - dist/~
    run:
      base: static

----------------------------------------

TITLE: Installing ApostropheCMS Dependencies in Astro
DESCRIPTION: Package installation commands for required ApostropheCMS dependencies using different package managers.

LANGUAGE: shell
CODE:
npm install @apostrophecms/apostrophe-astro vite @astro/node

LANGUAGE: shell
CODE:
pnpm add @apostrophecms/apostrophe-astro vite @astro/node

LANGUAGE: shell
CODE:
yarn add @apostrophecms/apostrophe-astro vite @astro/node

----------------------------------------

TITLE: Disabling streaming for React components in Astro
DESCRIPTION: JavaScript configuration to disable streaming for React components, which can help with certain CSS-in-JS libraries.

LANGUAGE: javascript
CODE:
import { defineConfig } from 'astro/config';
import react from '@astrojs/react';

export default defineConfig({
  // ...
  integrations: [
    react({
      experimentalDisableStreaming: true,
    }),
  ],
});

----------------------------------------

TITLE: Configuring Sitemap i18n
DESCRIPTION: Example of how to configure internationalization options for the sitemap.

LANGUAGE: javascript
CODE:
import { defineConfig } from 'astro/config';
import sitemap from '@astrojs/sitemap';

export default defineConfig({
  site: 'https://stargazers.club',
  integrations: [
    sitemap({
      i18n: {
        defaultLocale: 'en', // All urls that don't contain `es` or `fr` after `https://stargazers.club/` will be treated as default locale, i.e. `en`
        locales: {
          en: 'en-US', // The `defaultLocale` value must present in `locales` keys
          es: 'es-ES',
          fr: 'fr-CA',
        },
      },
    }),
  ],
});

----------------------------------------

TITLE: Displaying Astro Error: Failed to Load Module SSR
DESCRIPTION: This code snippet shows the error message displayed when Astro fails to import a file during server-side rendering. It uses a placeholder for the import name.

LANGUAGE: markdown
CODE:
> **FailedToLoadModuleSSR**: Could not import `IMPORT_NAME`.

----------------------------------------

TITLE: Installing Astro Blog Template with NPM
DESCRIPTION: Command to create a new Astro project using the official blog template starter via NPM package manager.

LANGUAGE: shell
CODE:
npm create astro@latest -- --template blog

----------------------------------------

TITLE: Package.json Scripts Configuration
DESCRIPTION: Common script configurations in package.json for running Astro commands

LANGUAGE: json
CODE:
{
  "scripts": {
    "dev": "astro dev",
    "build": "astro build",
    "preview": "astro preview"
  }
}

----------------------------------------

TITLE: Converting Vue SFC to Astro component
DESCRIPTION: Example of converting a Vue single-file component to an Astro component, showing syntax changes for templating, script, and styles.

LANGUAGE: vue
CODE:
<template>
  <div>
    <p v-if="message === 'Not found'">
      The repository you're looking up doesn't exist
    </p>
    <div v-else>
      <Header/>
      <p class="banner">Astro has {{stars}} 🧑‍🚀</p>
      <Footer />
    </div>
  </div>
</template>

<script>
import Vue from 'vue'

export default Vue.extend({
  name: 'IndexPage',
  async asyncData() {
    const res = await fetch('https://api.github.com/repos/withastro/astro')
    const json = await res.json();
    return {
      message: json.message,
      stars: json.stargazers_count || 0,
    };
  }
});
</script>

<style scoped>
.banner {
  background-color: #f4f4f4;
  padding: 1em 1.5em;
  text-align: center;
  margin-bottom: 1em;
}
<style>

LANGUAGE: astro
CODE:
---
import Header from "./header";
import Footer from './footer';
import "./layout.css";

const res = await fetch('https://api.github.com/repos/withastro/astro')
const json = await res.json()
const message = json.message;
const stars = json.stargazers_count || 0;
---

{message === "Not Found" ? 
      <p>The repository you're looking up doesn't exist</p> :
      <>
            <Header />
            <p class="banner">Astro has {stars} 🧑‍🚀</p>
            <Footer />
        </> 
}

<style>
  .banner {
    background-color: #f4f4f4; 
    padding: 1em 1.5em;
    text-align: center;
    margin-bottom: 1em;
  }
<style>

----------------------------------------

TITLE: Converting a React Component to an Astro Component
DESCRIPTION: This example compares a React component with its Astro equivalent, demonstrating how to convert JSX syntax, handle data fetching, and manage styling in Astro.

LANGUAGE: jsx
CODE:
import React, { useState, useEffect } from 'react';
import Header from './Header';
import Footer from './Footer';

const Component = () => {
    const [stars, setStars] = useState(0);
    const [message, setMessage] = useState('');

    useEffect(() => {
        const fetchData = async () => {
            const res = await fetch('https://api.github.com/repos/withastro/astro');
            const json = await res.json();

            setStars(json.stargazers_count || 0);
            setMessage(json.message);
        };

        fetchData();
    }, []);

    return (
        <>
            <Header />
            <p style={{
                backgroundColor: `#f4f4f4`,
                padding: `1em 1.5em`,
                textAlign: `center`,
                marginBottom: `1em`
            }}>Astro has {stars} 🧑‍🚀</p>
            <Footer />
        </>
    )
};

export default Component;

LANGUAGE: astro
CODE:
---
import Header from './Header.astro';
import Footer from './Footer.astro';
import './layout.css';
const res = await fetch('https://api.github.com/repos/withastro/astro')
const json = await res.json();
const message = json.message;
const stars = json.stargazers_count || 0;
---
<Header />
<p class="banner">Astro has {stars} 🧑‍🚀</p>
<Footer />
<style>
  .banner {
    background-color: #f4f4f4; 
    padding: 1em 1.5em;
    text-align: center;
    margin-bottom: 1em;
  }
<style>

----------------------------------------

TITLE: Installing Cypress for testing Astro with Bun
DESCRIPTION: Add Cypress as a development dependency for end-to-end testing in an Astro project using Bun.

LANGUAGE: bash
CODE:
bun add cypress --dev

----------------------------------------

TITLE: Example Error Message in Markdown
DESCRIPTION: This code block demonstrates an example error message that occurs when frontmatter in a content collection is invalid. It shows specific issues with required fields and date formatting.

LANGUAGE: markdown
CODE:
> **Example error message:**<br/>
Could not parse frontmatter in **blog** → **post.md**<br/>
"title" is required.<br/>
"date" must be a valid date.

----------------------------------------

TITLE: Configuring Astro for Custom Domain Deployment
DESCRIPTION: This snippet demonstrates how to set the 'site' option in the Astro configuration file when using a custom domain with GitHub Pages.

LANGUAGE: javascript
CODE:
import { defineConfig } from 'astro/config'

export default defineConfig({
  site: 'https://example.com',
})

----------------------------------------

TITLE: Configuring Astro for Custom Domain Deployment
DESCRIPTION: This snippet demonstrates how to set the 'site' option in the Astro configuration file when using a custom domain with GitHub Pages.

LANGUAGE: javascript
CODE:
import { defineConfig } from 'astro/config'

export default defineConfig({
  site: 'https://example.com',
})

----------------------------------------

TITLE: Setting Environment Variables for ApostropheCMS-Astro Integration
DESCRIPTION: Creates environment variable configuration for communication between Astro and ApostropheCMS projects.

LANGUAGE: ini
CODE:
APOS_EXTERNAL_FRONT_KEY='RandomStrongString'

----------------------------------------

TITLE: Creating an Astro Project from Blog Template using pnpm
DESCRIPTION: This command creates a new Astro project using the blog template starter. It utilizes the pnpm package manager to initialize the project.

LANGUAGE: shell
CODE:
pnpm create astro@latest --template blog

----------------------------------------

TITLE: Enabling Experimental Features
DESCRIPTION: Activates experimental features in Astro, such as content collection caching.

LANGUAGE: js
CODE:
{
	experimental: {
		contentCollectionCache: true,
	},
}

----------------------------------------

TITLE: Displaying Astro Error: Unsupported astro:env getSecret
DESCRIPTION: This markdown snippet defines the structure and content for documenting a deprecated Astro error. It includes frontmatter metadata, imports a component, and provides a caution notice about the error's deprecated status.

LANGUAGE: markdown
CODE:
---
# NOTE: This file is auto-generated from 'scripts/error-docgen.mjs'
# Do not make edits to it directly, they will be overwritten.
# Instead, change this file: https://github.com/withastro/astro/blob/main/packages/astro/src/core/errors/errors-data.ts
# Translators, please remove this note and the <DontEditWarning/> component.

title: Unsupported astro:env getSecret
i18nReady: true
githubURL: https://github.com/withastro/astro/blob/main/packages/astro/src/core/errors/errors-data.ts
---
import DontEditWarning from '~/components/DontEditWarning.astro'

<DontEditWarning />


:::caution[Deprecated]
This error is from an older version of Astro and is no longer in use. If you are unable to upgrade your project to a more recent version, then you can consult [unmaintained snapshots of older documentation](/en/upgrade-astro/#older-docs-unmaintained) for assistance.
:::


> **EnvUnsupportedGetSecret**: `astro:env/server` exported function `getSecret` is not supported by your adapter.

## What went wrong?
The `astro:env/server` exported function `getSecret()` is not supported by your adapter.

----------------------------------------

TITLE: Installing dependencies with Bun
DESCRIPTION: Use Bun to install project dependencies for an Astro project.

LANGUAGE: bash
CODE:
bun install

----------------------------------------

TITLE: Installing Astro Blog Template with yarn
DESCRIPTION: Command to create a new Astro project using the blog template with yarn package manager.

LANGUAGE: shell
CODE:
yarn create astro --template blog

----------------------------------------

TITLE: Using Astro Config Merge Function
DESCRIPTION: Example of using mergeConfig() to combine multiple Astro configurations.

LANGUAGE: typescript
CODE:
import { mergeConfig } from "astro/config";

mergeConfig(
  {
    output: 'static',
    site: 'https://example.com',
    integrations: [tailwind()],
    server: ({command}) => ({
      port: command === 'dev' ? 4321 : 1234,
    }),
	  build: {
		  client: './custom-client',
	  },
  },
  {
    output: 'server',
    base: '/astro',
    integrations: [mdx()],
    server: ({command}) => ({
      host: command === 'dev' ? 'localhost' : 'site.localhost',
    }),
	  build: {
		  server: './custom-server',
	  },
  }
);

----------------------------------------

TITLE: Manually Installing Partytown Integration with PNPM in Astro
DESCRIPTION: Command to manually install the @astrojs/partytown package using PNPM package manager in an Astro project.

LANGUAGE: sh
CODE:
pnpm add @astrojs/partytown

----------------------------------------

TITLE: Implementing Card Component Template
DESCRIPTION: Complete implementation of the card component with error handling and dynamic image rendering.

LANGUAGE: astro
CODE:
---
import type { ImageMetadata } from 'astro';
import { Image } from 'astro:assets';

interface Props {
   imagePath: string;
   altText: string;
   name: string;
   age: number;
}

const { imagePath, altText, name, age } = Astro.props;
const images = import.meta.glob<{ default: ImageMetadata }>('/src/assets/*.{jpeg,jpg,png,gif}');
if (!images[imagePath]) throw new Error(`"${imagePath}" does not exist in glob: "src/assets/*.{jpeg,jpg,png,gif}"`);
---
<div class="card">
    <h2>{name}</h2>
    <p>Age: {age}</p>
    <Image src={images[imagePath]()} alt={altText} />
</div>

----------------------------------------

TITLE: Running Astro development server with Bun
DESCRIPTION: Start the Astro development server using Bun as the runtime.

LANGUAGE: bash
CODE:
bunx --bun astro dev

----------------------------------------

TITLE: Error Message Block in Markdown
DESCRIPTION: Markdown block showing the ResponseSentError message indicating that response modifications are not allowed after sending.

LANGUAGE: markdown
CODE:
> **ResponseSentError**: The response has already been sent to the browser and cannot be altered.

----------------------------------------

TITLE: Importing Steps Component in Markdown
DESCRIPTION: This snippet imports the Steps component from the Starlight package, which is likely used to create a step-by-step guide in the Markdown content.

LANGUAGE: markdown
CODE:
import { Steps } from '@astrojs/starlight/components';

----------------------------------------

TITLE: Authenticating Firebase CLI for Astro Deployment
DESCRIPTION: Authenticate the Firebase CLI with your Google account. This command opens a browser window for login.

LANGUAGE: shell
CODE:
npx firebase login

LANGUAGE: shell
CODE:
pnpm exec firebase login

LANGUAGE: shell
CODE:
yarn firebase login

----------------------------------------

TITLE: Installing @tailwindcss/typography with yarn
DESCRIPTION: Command to install the @tailwindcss/typography package using yarn.

LANGUAGE: shell
CODE:
yarn add --dev @tailwindcss/typography

----------------------------------------

TITLE: Customizing Fade Transition in Astro
DESCRIPTION: Demonstrates how to use the fade utility function to customize the duration of the fade transition.

LANGUAGE: astro
CODE:
---
import { fade } from 'astro:transitions';
---

<!-- Fade transition with the default duration -->
<div transition:animate="fade" />

<!-- Fade transition with a duration of 400 milliseconds -->
<div transition:animate={fade({ duration: '0.4s' })} />

----------------------------------------

TITLE: Displaying ActionCalledFromServerError in Markdown
DESCRIPTION: This snippet shows the markdown representation of the ActionCalledFromServerError, including the error message and explanation of what went wrong.

LANGUAGE: markdown
CODE:
> **ActionCalledFromServerError**: Action called from a server page or endpoint without using `Astro.callAction()`. This wrapper must be used to call actions from server code.

## What went wrong?
Action called from a server page or endpoint without using `Astro.callAction()`.

**See Also:**
-  [`Astro.callAction()` reference](/en/reference/api-reference/#callaction)

----------------------------------------

TITLE: Installing rollup-plugin-visualizer with pnpm
DESCRIPTION: Command to install rollup-plugin-visualizer as a development dependency using pnpm package manager.

LANGUAGE: shell
CODE:
pnpm add rollup-plugin-visualizer --save-dev

----------------------------------------

TITLE: Importing DontEditWarning Component in Astro
DESCRIPTION: This snippet imports a custom 'DontEditWarning' component from the components directory in an Astro project. It's used to display a warning message about not editing auto-generated files.

LANGUAGE: astro
CODE:
import DontEditWarning from '~/components/DontEditWarning.astro'

----------------------------------------

TITLE: Updating Image Component Import and Usage
DESCRIPTION: Example of updating the import and usage of the Image component.

LANGUAGE: astro
CODE:
---
import { Image } from '@astrojs/image/components';
import { Image } from 'astro:assets';
import localImage from '../assets/logo.png';
const localAlt = 'The Astro Logo';
---

<Image
  src={localImage}
  width={300}
  aspectRatio="16:9"
  alt={localAlt}
/>

----------------------------------------

TITLE: Using DontEditWarning Component in Astro
DESCRIPTION: This code snippet demonstrates the usage of the DontEditWarning component within the Astro file, likely to display a warning message to translators or editors.

LANGUAGE: astro
CODE:
<DontEditWarning />

----------------------------------------

TITLE: Setting Site URL for Sitemap Generation
DESCRIPTION: Example of how to set the site URL in the Astro configuration for sitemap generation.

LANGUAGE: javascript
CODE:
import { defineConfig } from 'astro/config';
import sitemap from '@astrojs/sitemap';

export default defineConfig({
  site: 'https://stargazers.club',
  integrations: [sitemap()],
  // ...
});

----------------------------------------

TITLE: Installing Firebase CLI for Astro Deployment
DESCRIPTION: Install the Firebase CLI tool to interact with Firebase from the terminal. This step is necessary for deploying Astro sites to Firebase Hosting.

LANGUAGE: shell
CODE:
npm install firebase-tools

LANGUAGE: shell
CODE:
pnpm add firebase-tools

LANGUAGE: shell
CODE:
yarn add firebase-tools

----------------------------------------

TITLE: Building an Astro site with Bun
DESCRIPTION: Build an Astro site for production using Bun as the runtime.

LANGUAGE: bash
CODE:
bunx --bun astro build

----------------------------------------

TITLE: Using getSecret Helper Function
DESCRIPTION: Shows how to use the getSecret() helper function to retrieve raw environment variable values by key. This example demonstrates accessing a boolean feature flag as a string value.

LANGUAGE: javascript
CODE:
import {
  FEATURE_FLAG, // boolean
  getSecret
} from 'astro:env/server'

getSecret('FEATURE_FLAG') // string | undefined

----------------------------------------

TITLE: Configuring Sitemap Entry Limit
DESCRIPTION: Example of how to set the maximum number of entries per sitemap file.

LANGUAGE: javascript
CODE:
import { defineConfig } from 'astro/config';
import sitemap from '@astrojs/sitemap';

export default defineConfig({
  site: 'https://stargazers.club',
  integrations: [
    sitemap({
      entryLimit: 10000,
    }),
  ],
});

----------------------------------------

TITLE: Defining YAML Frontmatter for Astro Error Documentation
DESCRIPTION: YAML frontmatter block defining metadata for an Astro error documentation page. It includes the error title, internationalization status, and a link to the source file on GitHub.

LANGUAGE: yaml
CODE:
---
# NOTE: This file is auto-generated from 'scripts/error-docgen.mjs'
# Do not make edits to it directly, they will be overwritten.
# Instead, change this file: https://github.com/withastro/astro/blob/main/packages/astro/src/core/errors/errors-data.ts
# Translators, please remove this note and the <DontEditWarning/> component.

title: An unknown error occurred while reading or writing files to disk.
i18nReady: true
githubURL: https://github.com/withastro/astro/blob/main/packages/astro/src/core/errors/errors-data.ts
---

----------------------------------------

TITLE: Frontmatter Configuration in Markdown
DESCRIPTION: Defines metadata for the error documentation page including title, i18n status, and GitHub URL reference.

LANGUAGE: markdown
CODE:
---
# NOTE: This file is auto-generated from 'scripts/error-docgen.mjs'
# Do not make edits to it directly, they will be overwritten.
# Instead, change this file: https://github.com/withastro/astro/blob/main/packages/astro/src/core/errors/errors-data.ts
# Translators, please remove this note and the <DontEditWarning/> component.

title: Duplicate content entry slug.
i18nReady: true
githubURL: https://github.com/withastro/astro/blob/main/packages/astro/src/core/errors/errors-data.ts
---

----------------------------------------

TITLE: Installing rehype-external-links Plugin with npm
DESCRIPTION: Command to install the rehype-external-links plugin using npm package manager.

LANGUAGE: shell
CODE:
npm install rehype-external-links

----------------------------------------

TITLE: Displaying Astro Error: Unsupported Image Conversion
DESCRIPTION: This snippet shows the Markdown structure for displaying the 'Unsupported image conversion' error in Astro's documentation. It includes the error title, internationalization status, and GitHub URL for the source file.

LANGUAGE: markdown
CODE:
---
title: Unsupported image conversion
i18nReady: true
githubURL: https://github.com/withastro/astro/blob/main/packages/astro/src/core/errors/errors-data.ts
---

----------------------------------------

TITLE: Using Images in Markdown
DESCRIPTION: Example of using images in Markdown files with new syntax.

LANGUAGE: markdown
CODE:
# My Markdown Page

<!-- Local images now possible! -->
![A starry night sky.](../../images/stars.png)

<!-- Keep your images next to your content! -->
![A starry night sky.](./stars.png)

----------------------------------------

TITLE: Using Exported Variables in MDX
DESCRIPTION: Example of exporting and using a variable in an MDX file.

LANGUAGE: mdx
CODE:
export const title = 'My first MDX post'

# {title}

----------------------------------------

TITLE: Adding Bun types to an Astro project
DESCRIPTION: Install the @types/bun package to add Bun runtime types to your Astro project.

LANGUAGE: bash
CODE:
bun add -d @types/bun

----------------------------------------

TITLE: Displaying Example Error Message in Markdown
DESCRIPTION: This code snippet demonstrates how to format an example error message in Markdown, showing a schema mismatch for a blog post entry.

LANGUAGE: markdown
CODE:
> **Example error message:**<br/>
**blog** → **post** frontmatter does not match collection schema.<br/>
"title" is required.<br/>
"date" must be a valid date.

----------------------------------------

TITLE: Example of Generated Sitemap Index File
DESCRIPTION: Example of a generated sitemap-index.xml file for a website.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
  <sitemapindex xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
  <sitemap>
    <loc>https://stargazers.club/sitemap-0.xml</loc>
  </sitemap>
</sitemapindex>

----------------------------------------

TITLE: Adding SSR adapter for Astro with Bun
DESCRIPTION: Install an SSR adapter (e.g., Vercel) for on-demand rendering in an Astro project using Bun.

LANGUAGE: bash
CODE:
bunx astro add vercel

----------------------------------------

TITLE: Building Astro project with yarn
DESCRIPTION: Command to build the Astro project using yarn, which will generate the bundle analysis files.

LANGUAGE: shell
CODE:
yarn build

----------------------------------------

TITLE: Configuring Svelte Extensions in Astro
DESCRIPTION: Example of setting Svelte file extensions in the Astro configuration file.

LANGUAGE: js
CODE:
import { defineConfig } from 'astro/config';
import svelte from '@astrojs/svelte';

export default defineConfig({
  integrations: [svelte({ extensions: ['.svelte'] })],
});

----------------------------------------

TITLE: Generating Static Routes from Collections
DESCRIPTION: Example of generating static routes from content collection entries using getStaticPaths.

LANGUAGE: astro
CODE:
---
import { getCollection, render } from 'astro:content';
export async function getStaticPaths() {
  const posts = await getCollection('blog');
  return posts.map(post => ({
    params: { id: post.id },
    props: { post },
  }));
}
const { post } = Astro.props;
const { Content } = await render(post);
---
<h1>{post.data.title}</h1>
<Content />

----------------------------------------

TITLE: Configuring Public Directory
DESCRIPTION: Sets the folder for static assets that will be served at the root during development and copied to the build folder.

LANGUAGE: js
CODE:
{
  publicDir: './my-custom-publicDir-directory',
}

----------------------------------------

TITLE: Advanced CSS Variable Usage
DESCRIPTION: Shows how to use multiple CSS variables for comprehensive styling of elements including color, font-weight, and text transformation.

LANGUAGE: astro
CODE:
<style define:vars={{skillColor, fontWeight, textCase}}>
  h1 {
    color: purple;
    font-size: 4rem;
  }
  .skill {
    color: var(--skillColor);
    font-weight: var(--fontWeight);
    text-transform: var(--textCase);
  }
</style>

----------------------------------------

TITLE: Installing @tailwindcss/typography with npm
DESCRIPTION: Command to install the @tailwindcss/typography package using npm.

LANGUAGE: shell
CODE:
npm install -D @tailwindcss/typography

----------------------------------------

TITLE: Warning Component Usage in Astro
DESCRIPTION: Implementation of the DontEditWarning component in the error documentation page.

LANGUAGE: astro
CODE:
<DontEditWarning />

----------------------------------------

TITLE: Removing extendDefaultPlugins configuration
DESCRIPTION: JavaScript configuration update to remove the deprecated extendDefaultPlugins option from astro.config.mjs.

LANGUAGE: javascript
CODE:
// astro.config.mjs
import { defineConfig } from 'astro/config';

export default defineConfig({
  markdown: {
    // Remove this line
    // extendDefaultPlugins,
  }
});

----------------------------------------

TITLE: Generating Static Routes from Collections
DESCRIPTION: Example of generating static routes from content collection entries using getStaticPaths.

LANGUAGE: astro
CODE:
---
import { getCollection, render } from 'astro:content';
export async function getStaticPaths() {
  const posts = await getCollection('blog');
  return posts.map(post => ({
    params: { id: post.id },
    props: { post },
  }));
}
const { post } = Astro.props;
const { Content } = await render(post);
---
<h1>{post.data.title}</h1>
<Content />

----------------------------------------

TITLE: Generating Static Routes from Collections
DESCRIPTION: Example of generating static routes from content collection entries using getStaticPaths.

LANGUAGE: astro
CODE:
---
import { getCollection, render } from 'astro:content';
export async function getStaticPaths() {
  const posts = await getCollection('blog');
  return posts.map(post => ({
    params: { id: post.id },
    props: { post },
  }));
}
const { post } = Astro.props;
const { Content } = await render(post);
---
<h1>{post.data.title}</h1>
<Content />

----------------------------------------

TITLE: Configuring Astro Features Support in JavaScript
DESCRIPTION: Demonstrates how to configure supported Astro features in an adapter, including experimental asset support.

LANGUAGE: javascript
CODE:
export default function createIntegration() {
  return {
    name: '@matthewp/my-adapter',
    hooks: {
      'astro:config:done': ({ setAdapter }) => {
        setAdapter({
          name: '@matthewp/my-adapter',
          serverEntrypoint: '@matthewp/my-adapter/server.js',
          supportedAstroFeatures: {
            assets: {
              supportKind: "experimental",
              isSharpCompatible: false,
              isSquooshCompatible: false
            }
          }  
        });
      },
    },
  };
}

----------------------------------------

TITLE: Generating Dynamic robots.txt File
DESCRIPTION: Example of how to generate a dynamic robots.txt file using TypeScript in Astro.

LANGUAGE: typescript
CODE:
import type { APIRoute } from 'astro';

const getRobotsTxt = (sitemapURL: URL) => `
User-agent: *
Allow: /

Sitemap: ${sitemapURL.href}
`;

export const GET: APIRoute = ({ site }) => {
  const sitemapURL = new URL('sitemap-index.xml', site);
  return new Response(getRobotsTxt(sitemapURL));
};

----------------------------------------

TITLE: Creating an Astro project from a GitHub template
DESCRIPTION: Create a new Astro project using Bun, specifying a GitHub repository as a template.

LANGUAGE: bash
CODE:
bunx create-astro@latest my-astro-project-using-bun --template eliancodes/brutal

----------------------------------------

TITLE: Building Astro project with pnpm
DESCRIPTION: Command to build the Astro project using pnpm, which will generate the bundle analysis files.

LANGUAGE: shell
CODE:
pnpm build

----------------------------------------

TITLE: Using Images in MDX Files
DESCRIPTION: Examples of using images in MDX files with various methods including Image component, HTML img tag, and Markdown syntax.

LANGUAGE: mdx
CODE:
---
title: Le titre de ma page
---
import { Image } from 'astro:assets';
import rocket from '../assets/rocket.png';

# Ma Page MDX

// Image locale stockée dans le même dossier
![Houston dans la nature](houston.png)

// Image locale stockée dans src/assets/
<Image src={rocket} alt="Une fusée dans l'espace." />
<img src={rocket.src} alt="Une fusée dans l'espace." />
![Une fusée dans l'espace.](../assets/rocket.png)

// Image stockée dans public/images/
<Image src="/images/stars.png" alt="Un ciel étoilé." />
<img src="/images/stars.png" alt="Un ciel étoilé." />
![Un ciel étoilé.](/images/stars.png)

// Image distante sur un autre serveur
<Image src="https://example.com/images/remote-image.png" />
<img src="https://example.com/images/remote-image.png" />
![Astro](https://example.com/images/remote-image.png)

----------------------------------------

TITLE: Using Astro Components with JSX-like Syntax
DESCRIPTION: This snippet shows how to use imported Astro components with a JSX-like syntax. It demonstrates the Box component with an icon prop and the Checklist component as its child.

LANGUAGE: astro
CODE:
<Box icon="check-list">
## Checklist

<Checklist>
- [ ] I am ready to make some new pages for my Astro website!
</Checklist>
</Box>

----------------------------------------

TITLE: Action Not Found Error Message in Markdown
DESCRIPTION: Displays the error message for when an action cannot be found by the server, including a placeholder for the action name and guidance for resolution.

LANGUAGE: markdown
CODE:
> **ActionNotFoundError**: The server received a request for an action named `ACTION_NAME` but could not find a match. If you renamed an action, check that you've updated your `actions/index` file and your calling code to match.

----------------------------------------

TITLE: Installing Svelte Integration with Yarn
DESCRIPTION: Command to install the @astrojs/svelte package using yarn package manager.

LANGUAGE: sh
CODE:
yarn astro add svelte

----------------------------------------

TITLE: Image Component Usage Examples in Astro
DESCRIPTION: Demonstrates correct and incorrect ways to use the Image component with local and remote images in Astro. Shows proper image importing patterns and common mistakes to avoid.

LANGUAGE: astro
CODE:
---
import { Image } from "astro:assets";
import myImage from "../my_image.png";
---

<!-- GOOD: `src` is the full imported image. -->
<Image src={myImage} alt="Cool image" />

<!-- GOOD: `src` is a URL. -->
<Image src="https://example.com/my_image.png" alt="Cool image" />

<!-- BAD: `src` is an image's `src` path instead of the full image object. -->
<Image src={myImage.src} alt="Cool image" />

<!-- BAD: `src` is a string filepath. -->
<Image src="../my_image.png" alt="Cool image" />

----------------------------------------

TITLE: Upgrading Astro and integrations via yarn
DESCRIPTION: Shell commands to upgrade Astro and its integrations to the latest version using yarn.

LANGUAGE: shell
CODE:
# Upgrade to Astro v2.x
yarn add astro@latest

# Example: upgrade React and Tailwind integrations
yarn add @astrojs/react@latest @astrojs/tailwind@latest

----------------------------------------

TITLE: Recursive Component Rendering
DESCRIPTION: Shows how to use Astro.self for recursive component rendering with nested data structures.

LANGUAGE: astro
CODE:
---
// NestedList.astro
const { items } = Astro.props;
---
<ul class="nested-list">
  {items.map((item) => (
    <li>
      {Array.isArray(item) ? (
        <Astro.self items={item} />
      ) : (
        item
      )}
    </li>
  ))}
</ul>

----------------------------------------

TITLE: Adding Sitemap Link to HTML Head
DESCRIPTION: Example of how to add a sitemap link to the HTML head of a website.

LANGUAGE: html
CODE:
<head>
  <link rel="sitemap" href="/sitemap-index.xml" />
</head>

----------------------------------------

TITLE: Manually Installing @astrojs/preact Package with NPM
DESCRIPTION: Command to manually install the @astrojs/preact package using npm.

LANGUAGE: shell
CODE:
npm install @astrojs/preact

----------------------------------------

TITLE: Creating a New Astro Project using yarn
DESCRIPTION: Command to create a new Astro project using yarn and the minimal template.

LANGUAGE: shell
CODE:
# create a new project with yarn
yarn create astro --template minimal

----------------------------------------

TITLE: Configuring rollup-plugin-visualizer in Astro
DESCRIPTION: Configuration setup in astro.config.mjs to integrate rollup-plugin-visualizer with options for generating an HTML stats file.

LANGUAGE: javascript
CODE:
// @ts-check
import { defineConfig } from 'astro/config';
import { visualizer } from "rollup-plugin-visualizer";

export default defineConfig({
vite: {
    plugins: [visualizer({
        emitFile: true,
        filename: "stats.html",
    })]
}
});

----------------------------------------

TITLE: Importing Astro Components for Recipe Navigation
DESCRIPTION: This snippet imports two Astro components: RecipesNav and ReadMore. These components are likely used to enhance the navigation and readability of the recipe page.

LANGUAGE: astro
CODE:
import RecipesNav from '~/components/RecipesNav.astro';
import ReadMore from '~/components/ReadMore.astro';

----------------------------------------

TITLE: ISR Configuration
DESCRIPTION: Configuration for Incremental Static Regeneration (ISR) with cache control options

LANGUAGE: javascript
CODE:
import { defineConfig } from 'astro/config';
import vercel from '@astrojs/vercel';

export default defineConfig({
    output: "server",
    adapter: vercel({
        isr: {
            bypassToken: "005556d774a8",
            exclude: [
              '/preview', 
              '/auth/[page]',
              /^/api\.+/
            ]
        }
    })
})

----------------------------------------

TITLE: Creating Footer Component in Astro
DESCRIPTION: This snippet shows how to create a basic Footer component in Astro with a link to a social media platform.

LANGUAGE: astro
CODE:
---
const platform = "github";
const username = "withastro";
---

<footer>
  <p>Learn more about my projects on <a href={`https://www.${platform}.com/${username}`}>{platform}</a>!</p>
</footer>

----------------------------------------

TITLE: Obtaining Turso Database URL and Auth Token
DESCRIPTION: Commands to retrieve the Turso database URL and create an auth token using the Turso CLI.

LANGUAGE: bash
CODE:
turso db show <database-name> --url

LANGUAGE: bash
CODE:
turso db tokens create <database-name>

----------------------------------------

TITLE: Importing DontEditWarning Component in Astro
DESCRIPTION: Imports the DontEditWarning component and demonstrates frontmatter configuration for an error documentation page.

LANGUAGE: astro
CODE:
---
# NOTE: This file is auto-generated from 'scripts/error-docgen.mjs'
# Do not make edits to it directly, they will be overwritten.
# Instead, change this file: https://github.com/withastro/astro/blob/main/packages/astro/src/core/errors/errors-data.ts
# Translators, please remove this note and the <DontEditWarning/> component.

title: Invalid glob pattern.
i18nReady: true
githubURL: https://github.com/withastro/astro/blob/main/packages/astro/src/core/errors/errors-data.ts
---
import DontEditWarning from '~/components/DontEditWarning.astro'

<DontEditWarning />

----------------------------------------

TITLE: Setting Build Concurrency
DESCRIPTION: Configure the number of pages to build in parallel.

LANGUAGE: js
CODE:
{
  build: {
    concurrency: 2
  }
}

----------------------------------------

TITLE: Debug Component Syntax Variations
DESCRIPTION: Demonstrates different syntax options for using the Debug component in Astro templates.

LANGUAGE: astro
CODE:
---
import { Debug } from 'astro:components';
const sum = (a, b) => a + b;
const answer = sum(2, 4);
---
<!-- Example: All three examples are equivalent. -->
<Debug answer={sum(2, 4)} />
<Debug {{answer: sum(2, 4)}} />
<Debug {answer} />

----------------------------------------

TITLE: Configuring Partytown Integration in Astro Config
DESCRIPTION: JavaScript code snippet showing how to apply the Partytown integration in the Astro configuration file (astro.config.mjs).

LANGUAGE: javascript
CODE:
import { defineConfig } from 'astro/config';
import partytown from '@astrojs/partytown';

export default defineConfig({
  // ...
  integrations: [partytown()],
});

----------------------------------------

TITLE: Multiple Choice Component Implementation
DESCRIPTION: Example of using the MultipleChoice and Option components to create an interactive quiz about site updates

LANGUAGE: jsx
CODE:
<MultipleChoice>
    <Option>
      I open a terminal, run `create astro`, and then visit my Netlify URL.
    </Option>
    <Option>
      I change a setting in my Netlify app, then start a new Astro project on astro.new.
    </Option>
    <Option isCorrect>
      I make an edit to `index.astro`. I commit and push my changes to GitHub. Netlify will handle the rest!
    </Option>
  </MultipleChoice>

----------------------------------------

TITLE: Importing and Using SVG Components
DESCRIPTION: Example showing how to import and use an SVG file as a component in Astro.

LANGUAGE: astro
CODE:
---
import Logo from './path/to/svg/file.svg';
---

<Logo />

----------------------------------------

TITLE: Adding Navigation Links Structure
DESCRIPTION: Updates the Navigation component to wrap links in a div with nav-links class for styling.

LANGUAGE: astro
CODE:
---
---
<div class="nav-links">
  <a href="/">Home</a>
  <a href="/about">About</a>
  <a href="/blog">Blog</a>
</div>

----------------------------------------

TITLE: Configuring Astro Scoped Style Strategy
DESCRIPTION: Demonstrates how to set the scoped style strategy for Astro components.

LANGUAGE: javascript
CODE:
{
  scopedStyleStrategy: 'class'
}

----------------------------------------

TITLE: Adding BaseLayout Import to MarkdownPostLayout
DESCRIPTION: Shows how to import and wrap BaseLayout around the blog post template while passing the pageTitle prop.

LANGUAGE: astro
CODE:
---
import BaseLayout from './BaseLayout.astro';
const { frontmatter } = Astro.props;
---
<BaseLayout pageTitle={frontmatter.title}>
  <meta charset="utf-8" />
  <h1>{frontmatter.title}</h1>
  <p>{frontmatter.pubDate.toString().slice(0,10)}</p>
  <p><em>{frontmatter.description}</em></p>
  <p>Written by: {frontmatter.author}</p>
  <img src={frontmatter.image.url} width="300" alt={frontmatter.image.alt} />
  <slot />
</BaseLayout>

----------------------------------------

TITLE: Setting Site URL
DESCRIPTION: Configure the full URL where your site will be deployed.

LANGUAGE: js
CODE:
{
  site: 'https://www.my-site.dev'
}

----------------------------------------

TITLE: Importing DontEditWarning Component in Astro
DESCRIPTION: This snippet imports a custom Astro component named DontEditWarning, likely used to display a warning message about not editing the auto-generated file.

LANGUAGE: astro
CODE:
import DontEditWarning from '~/components/DontEditWarning.astro'

----------------------------------------

TITLE: Starting Astro Development Server with yarn
DESCRIPTION: Command to start the Astro development server using yarn, allowing for real-time development and preview of your Astro site.

LANGUAGE: shell
CODE:
yarn run dev

----------------------------------------

TITLE: Updating dev toolbar app definition
DESCRIPTION: Update dev toolbar app definition to use new object shape instead of deprecated string signature

LANGUAGE: js
CODE:
// Old shape
addDevToolbarApp("./my-dev-toolbar-app.mjs");

// New shape
addDevToolbarApp({
  id: "my-app",
  name: "My App",
  icon: "<svg>...</svg>",
  entrypoint: "./my-dev-toolbar-app.mjs",
});

----------------------------------------

TITLE: Updating asset path resolution
DESCRIPTION: Astro component code showing how to resolve asset paths using import statements instead of the removed Astro.resolve() method.

LANGUAGE: javascript
CODE:
---
// src/pages/index.astro
import 'style.css';
import imageUrl from './image.png';
---

<img src={imageUrl} />

----------------------------------------

TITLE: TypeScript Configuration for SolidJS
DESCRIPTION: Required TypeScript configuration in tsconfig.json for SolidJS JSX support.

LANGUAGE: json
CODE:
{
  "extends": "astro/tsconfigs/strict",
  "include": [".astro/types.d.ts", "**/*"],
  "exclude": ["dist"],
  "compilerOptions": {
    "jsx": "preserve",
    "jsxImportSource": "solid-js"
  }
}

----------------------------------------

TITLE: Astro Frontmatter Configuration
DESCRIPTION: YAML frontmatter configuration for the tutorial page defining type, title, description and i18n readiness.

LANGUAGE: yaml
CODE:
---
type: tutorial
title: Store your repository online
description: |-
  Tutorial: Build your first Astro blog —
  Create a GitHub repo for your tutorial project
i18nReady: true
---

----------------------------------------

TITLE: Importing DontEditWarning Component in Astro
DESCRIPTION: This snippet imports a custom Astro component called 'DontEditWarning' from the '~/components/' directory. The component is likely used to display a warning message about not editing the auto-generated file.

LANGUAGE: astro
CODE:
import DontEditWarning from '~/components/DontEditWarning.astro'

----------------------------------------

TITLE: Importing Global CSS in Astro Component
DESCRIPTION: Demonstrates how to import a global CSS file into an Astro component's frontmatter. This allows the global styles to be applied to the page.

LANGUAGE: astro
CODE:
---
import '../styles/global.css';

const pageTitle = "About Me";

const identity = {
  firstName: "Sarah",
  country: "Canada",
  occupation: "Technical Writer",
  hobbies: ["photography", "birdwatching", "baseball"],
};

const skills = ["HTML", "CSS", "JavaScript", "React", "Astro", "Writing Docs"];

const happy = true;
const finished = false;
const goal = 3;

const skillColor = "navy";
const fontWeight = "bold";
const textCase = "uppercase";
---

----------------------------------------

TITLE: Astro Image Configuration Settings
DESCRIPTION: Configuration settings for default image behavior including layout and experimental options

LANGUAGE: javascript
CODE:
{
  image: {
    // Used for all Markdown images; not configurable per-image
    // Used for all `<Image />` and `<Picture />` components unless overridden with a prop
    experimentalLayout: 'responsive',
  },
  experimental: {
    responsiveImages: true,
  },
}

----------------------------------------

TITLE: Initializing Blog Post Data with import.meta.glob in Astro
DESCRIPTION: Uses import.meta.glob() to retrieve data from all markdown blog posts in the posts directory. Sets up the basic blog page structure with a static title and post list.

LANGUAGE: astro
CODE:
---
import BaseLayout from '../layouts/BaseLayout.astro'
const allPosts = Object.values(import.meta.glob('./posts/*.md', { eager: true }));
const pageTitle = "My Astro Learning Blog";
---
<BaseLayout pageTitle={pageTitle}>
  <p>This is where I will post about my journey learning Astro.</p>
  <ul>
    <li><a href="/posts/post-1/">Post 1</a></li>
    <li><a href="/posts/post-2/">Post 2</a></li>
    <li><a href="/posts/post-3/">Post 3</a></li>
  </ul>
</BaseLayout>

----------------------------------------

TITLE: Configuring Prefetch
DESCRIPTION: Enable prefetching for faster page transitions.

LANGUAGE: js
CODE:
prefetch: {
	prefetchAll: true
}

----------------------------------------

TITLE: Importing DontEditWarning Component in Astro
DESCRIPTION: This code snippet imports the DontEditWarning component from the components directory. This component is likely used to display a warning message about not editing the auto-generated file.

LANGUAGE: astro
CODE:
import DontEditWarning from '~/components/DontEditWarning.astro'

----------------------------------------

TITLE: Rendering DontEditWarning Component in Astro
DESCRIPTION: This snippet renders the imported DontEditWarning component. It's used to display a warning message to users or contributors about not editing the auto-generated file directly.

LANGUAGE: astro
CODE:
<DontEditWarning />

----------------------------------------

TITLE: Converting Astro-flavored Markdown to MDX
DESCRIPTION: Example of converting an Astro-flavored Markdown file to MDX format

LANGUAGE: mdx
CODE:
// src/pages/posts/my-post.mdx
---
layout: '../../layouts/BaseLayout.astro'
title: 'Migrating to MDX'
date: 2022-07-26
tags: ["markdown", "mdx", "astro"]
---
import ReactCounter from '../../components/ReactCounter.jsx'

# {frontmatter.title}

Here is my counter component, working in MDX:

<ReactCounter client:load />

----------------------------------------

TITLE: Configuring multiple JSX frameworks in Astro
DESCRIPTION: JavaScript configuration to specify include paths for multiple JSX frameworks in an Astro project.

LANGUAGE: javascript
CODE:
import { defineConfig } from 'astro/config';
import preact from '@astrojs/preact';
import react from '@astrojs/react';
import svelte from '@astrojs/svelte';
import vue from '@astrojs/vue';
import solid from '@astrojs/solid-js';

export default defineConfig({
  integrations: [
    preact({
      include: ['**/preact/*'],
    }),
    react({
      include: ['**/react/*'],
    }),
    solid({
      include: ['**/solid/*'],
    }),
  ],
});

----------------------------------------

TITLE: Adding Navigation Links in Astro
DESCRIPTION: Implementation of navigation links between pages using standard HTML anchor tags.

LANGUAGE: astro
CODE:
<a href="/">Home</a>
<a href="/about/">About</a>

<h1>About Me</h1>
<h2>... and my new Astro site!</h2>

----------------------------------------

TITLE: Importing DontEditWarning Component in Astro
DESCRIPTION: This snippet imports a custom Astro component called DontEditWarning, which is likely used to display a warning message about not editing the auto-generated file.

LANGUAGE: astro
CODE:
import DontEditWarning from '~/components/DontEditWarning.astro'

----------------------------------------

TITLE: Using DontEditWarning Component
DESCRIPTION: Implementation of the DontEditWarning component in the error documentation page.

LANGUAGE: astro
CODE:
<DontEditWarning />

----------------------------------------

TITLE: Astro Responsive Image HTML Output
DESCRIPTION: Generated HTML markup for responsive images with automatically calculated srcset and sizes

LANGUAGE: html
CODE:
<img
  src="/_astro/my_image.hash3.webp"
  srcset="/_astro/my_image.hash1.webp 640w,
      /_astro/my_image.hash2.webp 750w,
      /_astro/my_image.hash3.webp 800w,
      /_astro/my_image.hash4.webp 828w,
      /_astro/my_image.hash5.webp 1080w,
      /_astro/my_image.hash6.webp 1280w,
      /_astro/my_image.hash7.webp 1600w"
  alt="A description of my image"
  sizes="(min-width: 800px) 800px, 100vw"
  loading="lazy"
  decoding="async"
  fetchpriority="auto"
  width="800"
  height="600"
  style="--w: 800; --h: 600; --fit: cover; --pos: center;"
  data-astro-image="responsive"
>

----------------------------------------

TITLE: Importing Astro Components in Tutorial
DESCRIPTION: This code snippet shows the import statements for various Astro components used in the tutorial, including Box, Checklist, MultipleChoice, and Option.

LANGUAGE: astro
CODE:
import Box from '~/components/tutorial/Box.astro';
import Checklist from '~/components/Checklist.astro';
import MultipleChoice from '~/components/tutorial/MultipleChoice.astro';
import Option from '~/components/tutorial/Option.astro';

----------------------------------------

TITLE: Error Warning Component Import in Astro
DESCRIPTION: Import statement for a warning component used in the error documentation. The component is imported from the components directory.

LANGUAGE: astro
CODE:
import DontEditWarning from '~/components/DontEditWarning.astro'

----------------------------------------

TITLE: Using DontEditWarning Component in Astro
DESCRIPTION: Component usage to display edit warning in auto-generated documentation

LANGUAGE: astro
CODE:
<DontEditWarning />

----------------------------------------

TITLE: Importing DontEditWarning Component in Astro
DESCRIPTION: This snippet imports a custom Astro component named DontEditWarning. It's likely used to display a warning message about not editing the auto-generated file.

LANGUAGE: astro
CODE:
import DontEditWarning from '~/components/DontEditWarning.astro'

----------------------------------------

TITLE: Importing DontEditWarning Component in Astro
DESCRIPTION: This code snippet imports a DontEditWarning component from the components directory in an Astro file. It's likely used to display a warning message about not editing the auto-generated file.

LANGUAGE: astro
CODE:
import DontEditWarning from '~/components/DontEditWarning.astro'

----------------------------------------

TITLE: Installing rollup-plugin-visualizer with yarn
DESCRIPTION: Command to install rollup-plugin-visualizer as a development dependency using yarn package manager.

LANGUAGE: shell
CODE:
yarn add rollup-plugin-visualizer --save-dev

----------------------------------------

TITLE: Configuring Astro with Keystatic Integration
DESCRIPTION: Configuration file setup to integrate Keystatic with Astro project settings.

LANGUAGE: javascript
CODE:
// astro.config.mjs
import { defineConfig } from 'astro/config'

import react from '@astrojs/react'
import markdoc from '@astrojs/markdoc'
import keystatic from '@keystatic/astro'

// https://astro.build/config
export default defineConfig({
  integrations: [react(), markdoc(), keystatic()],
  output: 'static',
})

----------------------------------------

TITLE: Implementing Layout in Index Page
DESCRIPTION: Shows how to use the BaseLayout component in a page file and pass content through the layout using slots.

LANGUAGE: astro
CODE:
---
import BaseLayout from '../layouts/BaseLayout.astro';
const pageTitle = "Home Page";
---
<BaseLayout>
  <h2>My awesome blog subtitle</h2>
</BaseLayout>

----------------------------------------

TITLE: Displaying Astro Error: Invalid Slot Name
DESCRIPTION: This code snippet shows the structure of an Astro error documentation page. It includes frontmatter with metadata, imports a warning component, and displays the error message with an explanation.

LANGUAGE: markdown
CODE:
---
# NOTE: This file is auto-generated from 'scripts/error-docgen.mjs'
# Do not make edits to it directly, they will be overwritten.
# Instead, change this file: https://github.com/withastro/astro/blob/main/packages/astro/src/core/errors/errors-data.ts
# Translators, please remove this note and the <DontEditWarning/> component.

title: Invalid slot name.
i18nReady: true
githubURL: https://github.com/withastro/astro/blob/main/packages/astro/src/core/errors/errors-data.ts
---
import DontEditWarning from '~/components/DontEditWarning.astro'

<DontEditWarning />


> **ReservedSlotName**: Unable to create a slot named `SLOT_NAME`. `SLOT_NAME` is a reserved slot name. Please update the name of this slot.

## What went wrong?
Certain words cannot be used for slot names due to being already used internally.

**See Also:**
-  [Named slots](/en/basics/astro-components/#named-slots)

----------------------------------------

TITLE: Importing DontEditWarning Component in Astro
DESCRIPTION: Imports a warning component that indicates the file should not be manually edited since it is auto-generated.

LANGUAGE: astro
CODE:
import DontEditWarning from '~/components/DontEditWarning.astro'

----------------------------------------

TITLE: Using Node.js Builtins in Astro
DESCRIPTION: Shows how to use Node.js builtin modules in Astro components using the node: prefix.

LANGUAGE: astro
CODE:
---
// Example: import the "fs/promises" builtin from Node.js
import fs from 'node:fs/promises';

const url = new URL('../../package.json', import.meta.url);
const json = await fs.readFile(url, 'utf-8');
const data = JSON.parse(json);
---

<span>Version: {data.version}</span>

----------------------------------------

TITLE: Setting Output Directory
DESCRIPTION: Specifies the folder where Astro will write the final build output.

LANGUAGE: js
CODE:
{
  outDir: './my-custom-build-directory',
}

----------------------------------------

TITLE: Displaying Markdown Content for 'No Client Entrypoint' Error in Astro
DESCRIPTION: This snippet shows the Markdown content for documenting the 'No Client Entrypoint' error in Astro. It includes the error title, internationalization status, GitHub URL, and a warning component import.

LANGUAGE: markdown
CODE:
---
# NOTE: This file is auto-generated from 'scripts/error-docgen.mjs'
# Do not make edits to it directly, they will be overwritten.
# Instead, change this file: https://github.com/withastro/astro/blob/main/packages/astro/src/core/errors/errors-data.ts
# Translators, please remove this note and the <DontEditWarning/> component.

title: No client entrypoint specified in renderer.
i18nReady: true
githubURL: https://github.com/withastro/astro/blob/main/packages/astro/src/core/errors/errors-data.ts
---
import DontEditWarning from '~/components/DontEditWarning.astro'

<DontEditWarning />


> **NoClientEntrypoint**: `COMPONENT_NAME` component has a `client:CLIENT_DIRECTIVE` directive, but no client entrypoint was provided by `RENDERER_NAME`.

## What went wrong?
Astro tried to hydrate a component on the client, but the renderer used does not provide a client entrypoint to use to hydrate.

**See Also:**
-  [addRenderer option](/en/reference/integrations-reference/#addrenderer-option)
-  [Hydrating framework components](/en/guides/framework-components/#hydrating-interactive-components)

----------------------------------------

TITLE: Importing DontEditWarning Component in Astro
DESCRIPTION: Import statement for a warning component used to prevent manual edits to auto-generated files

LANGUAGE: astro
CODE:
import DontEditWarning from '~/components/DontEditWarning.astro'

----------------------------------------

TITLE: Implementing getStaticPaths in Astro TypeScript
DESCRIPTION: Example of the correct implementation of getStaticPaths function that returns an array of objects with params. Each object should contain a params property with the dynamic route parameters.

LANGUAGE: typescript
CODE:
export async function getStaticPaths() {
	return [ // <-- Array
		{ params: { slug: "blog" } }, // <-- Object
		{ params: { slug: "about" } }
	];
}

----------------------------------------

TITLE: Importing and Using Astro Components in Markdown
DESCRIPTION: Markdown content that imports and uses an Astro component called 'DontEditWarning'. This is likely used to display a warning message in the error documentation.

LANGUAGE: markdown
CODE:
import DontEditWarning from '~/components/DontEditWarning.astro'

<DontEditWarning />


## What went wrong?
An unknown error occurred while reading or writing files to disk. It can be caused by many things, eg. missing permissions or a file not existing we attempt to read.

----------------------------------------

TITLE: Including Decap CMS Script in HTML
DESCRIPTION: HTML snippet for including the Decap CMS script in the body of an HTML page.

LANGUAGE: html
CODE:
<body>
  <!-- Include the script that builds the page and powers Decap CMS -->
  <script src="https://unpkg.com/decap-cms@^3.1.2/dist/decap-cms.js"></script>
</body>

----------------------------------------

TITLE: Basic Static Component Rendering in Astro
DESCRIPTION: Demonstrates default static rendering of a React component in Astro without client-side JavaScript.

LANGUAGE: astro
CODE:
<MyReactComponent />

----------------------------------------

TITLE: Defining Astro Redirect Error in Markdown
DESCRIPTION: This markdown snippet defines the structure and content for an error message related to redirects in Astro. It includes a title, i18n readiness flag, GitHub URL, and import statement for a warning component.

LANGUAGE: markdown
CODE:
---
# NOTE: This file is auto-generated from 'scripts/error-docgen.mjs'
# Do not make edits to it directly, they will be overwritten.
# Instead, change this file: https://github.com/withastro/astro/blob/main/packages/astro/src/core/errors/errors-data.ts
# Translators, please remove this note and the <DontEditWarning/> component.

title: A redirect must be given a location with the Location header.
i18nReady: true
githubURL: https://github.com/withastro/astro/blob/main/packages/astro/src/core/errors/errors-data.ts
---
import DontEditWarning from '~/components/DontEditWarning.astro'

<DontEditWarning />


## What went wrong?
A redirect must be given a location with the `Location` header.

**See Also:**
-  [Astro.redirect](/en/reference/api-reference/#redirect)

----------------------------------------

TITLE: Configuring Astro Build Concurrency
DESCRIPTION: Demonstrates how to set the number of pages to build in parallel.

LANGUAGE: javascript
CODE:
{
  build: {
    concurrency: 2
  }
}

----------------------------------------

TITLE: Adding Integrations
DESCRIPTION: Extends Astro with custom integrations for frameworks, new features, or libraries.

LANGUAGE: js
CODE:
import react from '@astrojs/react';
import tailwind from '@astrojs/tailwind';
{
  // Example: Add React + Tailwind support to Astro
  integrations: [react(), tailwind()],
}

----------------------------------------

TITLE: Astro Content Schema Error Example
DESCRIPTION: Example error message showing validation failures for blog post content where required fields are missing or invalid.

LANGUAGE: markdown
CODE:
> **Example error message:**<br/>
**blog** → **post** data does not match collection schema.<br/>
"title" is required.<br/>
"date" must be a valid date.

----------------------------------------

TITLE: Importing Warning Component in Astro
DESCRIPTION: Imports a DontEditWarning component that displays a warning about auto-generated content.

LANGUAGE: astro
CODE:
import DontEditWarning from '~/components/DontEditWarning.astro'

----------------------------------------

TITLE: Using DontEditWarning Component in Astro
DESCRIPTION: This snippet demonstrates the usage of the DontEditWarning component within the Astro file. It's placed at the beginning of the content to warn users against editing the auto-generated file.

LANGUAGE: astro
CODE:
<DontEditWarning />

----------------------------------------

TITLE: Displaying Astro Error: Session Storage Initialization Failure
DESCRIPTION: This markdown snippet defines the structure and content for documenting an Astro error related to session storage initialization failure. It includes frontmatter with metadata, imports a component, and displays the error message with additional context.

LANGUAGE: markdown
CODE:
---
# NOTE: This file is auto-generated from 'scripts/error-docgen.mjs'
# Do not make edits to it directly, they will be overwritten.
# Instead, change this file: https://github.com/withastro/astro/blob/main/packages/astro/src/core/errors/errors-data.ts
# Translators, please remove this note and the <DontEditWarning/> component.

title: Session storage could not be initialized.
i18nReady: true
githubURL: https://github.com/withastro/astro/blob/main/packages/astro/src/core/errors/errors-data.ts
---
import DontEditWarning from '~/components/DontEditWarning.astro'

<DontEditWarning />


> Error when initializing session storage with driver `DRIVER`. `ERROR`

## What went wrong?
Thrown when the session storage could not be initialized.

**See Also:**
-  [experimental.session](/en/reference/experimental-flags/sessions/)

----------------------------------------

TITLE: Importing YAML Data in Astro
DESCRIPTION: Import YAML data using an import statement in your Astro project.

LANGUAGE: javascript
CODE:
import yml from './data.yml';

----------------------------------------

TITLE: Creating Decap CMS Admin Page in HTML
DESCRIPTION: HTML structure for the Decap CMS admin page, including necessary meta tags and script inclusion.

LANGUAGE: html
CODE:
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="robots" content="noindex" />
    <link href="/admin/config.yml" type="text/yaml" rel="cms-config-url" />
    <title>Content Manager</title>
  </head>
  <body>
    <script src="https://unpkg.com/decap-cms@^3.1.2/dist/decap-cms.js"></script>
  </body>
</html>

----------------------------------------

TITLE: Cloning the Astro Docs Repository with Git
DESCRIPTION: Command to clone the Astro documentation repository to your local machine using Git.

LANGUAGE: shell
CODE:
git clone git@github.com:withastro/docs.git

----------------------------------------

TITLE: Displaying Astro Error: NoAdapterInstalledServerIslands
DESCRIPTION: This markdown snippet defines the error message and explanation for the 'NoAdapterInstalledServerIslands' error in Astro. It includes the error title, message, and a brief explanation of what went wrong.

LANGUAGE: markdown
CODE:
> **NoAdapterInstalledServerIslands**: Cannot use server islands without an adapter. Please install and configure the appropriate server adapter for your final deployment.

## What went wrong?
To use server islands, the same constraints exist as for sever-side rendering, so an adapter is needed.

**See Also:**
-  [On-demand Rendering](/en/guides/on-demand-rendering/)

----------------------------------------

TITLE: Using DontEditWarning Component in Astro
DESCRIPTION: This snippet demonstrates the usage of the imported 'DontEditWarning' component in the Astro file. It's placed at the beginning of the content to warn users against editing the auto-generated file.

LANGUAGE: astro
CODE:
<DontEditWarning />

----------------------------------------

TITLE: Using Astro.url to Access Current URL Information
DESCRIPTION: Demonstrates how to access and use different parts of the current URL using Astro.url.

LANGUAGE: astro
CODE:
<h1>La URL actual es: {Astro.url}</h1>
<h1>El nombre de la ruta URL actual es: {Astro.url.pathname}</h1>
<h1>El origen de la URL actual es: {Astro.url.origin}</h1>

----------------------------------------

TITLE: Configuring Redirects
DESCRIPTION: Specifies a mapping of redirects where the key is the route to match and the value is the route to redirect to.

LANGUAGE: js
CODE:
{
  redirects: {
    '/old': '/new',
    '/blog/[...slug]': '/articles/[...slug]',
  }
}

----------------------------------------

TITLE: Importing DontEditWarning Component in Astro
DESCRIPTION: Imports and renders a warning component to prevent manual edits to the auto-generated documentation file.

LANGUAGE: astro
CODE:
import DontEditWarning from '~/components/DontEditWarning.astro'

<DontEditWarning />

----------------------------------------

TITLE: Using DontEditWarning Component in Astro
DESCRIPTION: This snippet demonstrates the usage of the imported 'DontEditWarning' component in the Astro file. It's placed at the beginning of the content to warn users about not editing the auto-generated file.

LANGUAGE: astro
CODE:
<DontEditWarning />

----------------------------------------

TITLE: Importing DontEditWarning Component in Astro
DESCRIPTION: This snippet imports a component named DontEditWarning from the components directory. It's likely used to display a warning message about not editing the auto-generated file.

LANGUAGE: astro
CODE:
import DontEditWarning from '~/components/DontEditWarning.astro'

----------------------------------------

TITLE: Using DontEditWarning Component in Astro
DESCRIPTION: Renders the DontEditWarning component to display a warning message about not editing the auto-generated file.

LANGUAGE: astro
CODE:
<DontEditWarning />

----------------------------------------

TITLE: Configuring Astro for ApostropheCMS Integration
DESCRIPTION: Configuration setup in astro.config.mjs for ApostropheCMS integration including Vite SSR settings.

LANGUAGE: javascript
CODE:
import { defineConfig } from 'astro/config';
import node from '@astrojs/node';
import apostrophe from '@apostrophecms/apostrophe-astro';
import { loadEnv } from 'vite';

const env = loadEnv("", process.cwd(), 'APOS');

export default defineConfig({
  output: 'server',
  adapter: node({
    mode: 'standalone'
  }),
  integrations: [
    apostrophe({
      aposHost: 'http://localhost:3000',
      widgetsMapping: './src/widgets',
      templatesMapping: './src/templates'
    })
  ],
  vite: {
    ssr: {
      noExternal: [ '@apostrophecms/apostrophe-astro' ],
    },
    define: {
      'process.env.APOS_EXTERNAL_FRONT_KEY': JSON.stringify(env.APOS_EXTERNAL_FRONT_KEY),
      'process.env.APOS_HOST': JSON.stringify(env.APOS_HOST)
    }
  }
});

----------------------------------------

TITLE: Installing Prettier for Astro
DESCRIPTION: Commands to install Prettier and the Astro Prettier plugin using different package managers.

LANGUAGE: shell
CODE:
npm install --save-dev --save-exact prettier prettier-plugin-astro

LANGUAGE: shell
CODE:
pnpm add --save-dev --save-exact prettier prettier-plugin-astro

LANGUAGE: shell
CODE:
yarn add --dev --exact prettier prettier-plugin-astro

----------------------------------------

TITLE: Defining Invalid Middleware in Astro (TypeScript)
DESCRIPTION: This snippet demonstrates an incorrect implementation of Astro middleware that returns a string instead of a Response object, which will trigger the MiddlewareNotAResponse error in development mode.

LANGUAGE: typescript
CODE:
import {defineMiddleware} from "astro:middleware";
export const onRequest = defineMiddleware(() => {
  return "string"
});

----------------------------------------

TITLE: Exporting Components in index.js
DESCRIPTION: JavaScript code for the main package entrypoint (index.js). This file exports the components, allowing them to be imported by users of the package.

LANGUAGE: javascript
CODE:
export { default as MyAstroComponent } from './MyAstroComponent.astro';

export { default as MyReactComponent } from './MyReactComponent.jsx';

----------------------------------------

TITLE: Using import.meta.glob() in Astro
DESCRIPTION: Shows how to use Vite's import.meta.glob() function to import multiple files matching a glob pattern in Astro components.

LANGUAGE: astro
CODE:
---
// imports all files that end with `.md` in `./src/pages/post/`
const matches = import.meta.glob('../pages/post/*.md', { eager: true }); 
const posts = Object.values(matches);
---
<!-- Renders an <article> for the first 5 blog posts -->
<div>
{posts.slice(0, 4).map((post) => (
  <article>
    <h2>{post.frontmatter.title}</h2>
    <p>{post.frontmatter.description}</p>
    <a href={post.url}>Read more</a>
  </article>
))}
</div>

----------------------------------------

TITLE: Setting Trailing Slash Behavior
DESCRIPTION: Configures how the dev server handles trailing slashes in URLs, with options for 'always', 'never', or 'ignore'.

LANGUAGE: js
CODE:
{
  // Example: Require a trailing slash during development
  trailingSlash: 'always',
}

----------------------------------------

TITLE: Importing DontEditWarning Component in Astro
DESCRIPTION: This snippet imports a DontEditWarning component from the components directory. It's likely used to display a warning message about not editing auto-generated files.

LANGUAGE: astro
CODE:
import DontEditWarning from '~/components/DontEditWarning.astro'

----------------------------------------

TITLE: Astro Responsive Image CSS Styles
DESCRIPTION: CSS styles applied to responsive images for proper resizing and display

LANGUAGE: css
CODE:
[data-astro-image] {
  width: 100%;
  height: auto;
  object-fit: var(--fit);
  object-position: var(--pos);
  aspect-ratio: var(--w) / var(--h)
}

[data-astro-image=responsive] {
  max-width: calc(var(--w) * 1px);
  max-height: calc(var(--h) * 1px)
}

[data-astro-image=fixed] {
  width: calc(var(--w) * 1px);
  height: calc(var(--h) * 1px)
}

----------------------------------------

TITLE: Defining Astro Error Documentation in Markdown
DESCRIPTION: This snippet defines the structure and content of an Astro error documentation page. It includes metadata, a title, internationalization status, and a GitHub URL. The content explains the error, its cause, and provides a link to related documentation.

LANGUAGE: markdown
CODE:
---
# NOTE: This file is auto-generated from 'scripts/error-docgen.mjs'
# Do not make edits to it directly, they will be overwritten.
# Instead, change this file: https://github.com/withastro/astro/blob/main/packages/astro/src/core/errors/errors-data.ts
# Translators, please remove this note and the <DontEditWarning/> component.

title: Unsupported or malformed URL.
i18nReady: true
githubURL: https://github.com/withastro/astro/blob/main/packages/astro/src/core/errors/errors-data.ts
---
import DontEditWarning from '~/components/DontEditWarning.astro'

<DontEditWarning />


> **UnsupportedExternalRedirect**: An external redirect must start with http or https, and must be a valid URL.

## What went wrong?
An external redirect must start with http or https, and must be a valid URL.

**See Also:**
-  [Astro.redirect](/en/reference/api-reference/#redirect)

----------------------------------------

TITLE: Frontmatter Configuration for Astro Error Doc
DESCRIPTION: YAML frontmatter configuration for the error documentation page, including metadata like title, i18n status, and GitHub URL reference.

LANGUAGE: markdown-frontmatter
CODE:
---
# NOTE: This file is auto-generated from 'scripts/error-docgen.mjs'
# Do not make edits to it directly, they will be overwritten.
# Instead, change this file: https://github.com/withastro/astro/blob/main/packages/astro/src/core/errors/errors-data.ts
# Translators, please remove this note and the <DontEditWarning/> component.

title: No static path found for requested path.
i18nReady: true
githubURL: https://github.com/withastro/astro/blob/main/packages/astro/src/core/errors/errors-data.ts
---

----------------------------------------

TITLE: Configuring GitHub-Flavored Markdown
DESCRIPTION: Enable or disable GitHub-flavored Markdown.

LANGUAGE: js
CODE:
{
  markdown: {
    gfm: false,
  }
}

----------------------------------------

TITLE: Rendering Read More Section with External Badge
DESCRIPTION: Renders a ReadMore component with a link to external CMS resources, including a Badge component to indicate an external link.

LANGUAGE: astro
CODE:
<ReadMore> Explore a [list of over 100 headless content management systems](https://jamstack.org/headless-cms/) <Badge text="External" /></ReadMore>

----------------------------------------

TITLE: Using DontEditWarning Component in Astro
DESCRIPTION: This code snippet demonstrates the use of the DontEditWarning component in the Astro file. It's placed at the beginning of the content to warn users against editing the auto-generated file.

LANGUAGE: astro
CODE:
<DontEditWarning />

----------------------------------------

TITLE: Displaying Auto-Generation Warning in Astro
DESCRIPTION: Renders the warning component to inform users that the file is auto-generated and should not be edited directly.

LANGUAGE: astro
CODE:
<DontEditWarning />

----------------------------------------

TITLE: Using getImage() Function in Astro
DESCRIPTION: Demonstrates how to use the getImage() function to generate optimized images for use outside of HTML.

LANGUAGE: astro
CODE:
---
import { getImage } from "astro:assets";
import myBackground from "../background.png";

const optimizedBackground = await getImage({src: myBackground, format: 'webp'});
---

<div style={`background-image: url(${optimizedBackground.src});`}></div>

----------------------------------------

TITLE: Configuring Base Path
DESCRIPTION: Sets the base path for deployment, used as the root for pages and assets in development and production.

LANGUAGE: js
CODE:
{
  base: '/docs',
}

----------------------------------------

TITLE: Using DontEditWarning Component
DESCRIPTION: Implementation of the DontEditWarning component in the documentation.

LANGUAGE: astro
CODE:
<DontEditWarning />

----------------------------------------

TITLE: Enabling Experimental Flags in Astro Configuration
DESCRIPTION: This snippet demonstrates how to enable experimental flags in the Astro configuration file. It uses the defineConfig function from 'astro/config' to set up the configuration object with an experimental section.

LANGUAGE: javascript
CODE:
import { defineConfig } from 'astro/config';

export default defineConfig({
    experimental: {
        // enable experimental flags
        // to try out new features
    },
});

----------------------------------------

TITLE: Using the Custom Card Component in an Astro Page
DESCRIPTION: This snippet demonstrates how to import and use the custom card component in an Astro page, passing the required props including the image path.

LANGUAGE: astro
CODE:
---
import MyCustomCardComponent from '../components/MyCustomCardComponent.astro';
---
<MyCustomCardComponent 
    imagePath="/src/assets/avatar-1.jpg"
    altText="Une photo de Priya sur fond de mur de briques."
    name="Priya"
    age={25}
/>

----------------------------------------

TITLE: Displaying Markdown Content for Missing Image Dimensions Error in Astro
DESCRIPTION: This snippet shows the markdown content for documenting an Astro error related to missing image dimensions. It includes a title, metadata, import statement, and the error message with an explanation.

LANGUAGE: markdown
CODE:
---
# NOTE: This file is auto-generated from 'scripts/error-docgen.mjs'
# Do not make edits to it directly, they will be overwritten.
# Instead, change this file: https://github.com/withastro/astro/blob/main/packages/astro/src/core/errors/errors-data.ts
# Translators, please remove this note and the <DontEditWarning/> component.

title: Missing image dimensions
i18nReady: true
githubURL: https://github.com/withastro/astro/blob/main/packages/astro/src/core/errors/errors-data.ts
---
import DontEditWarning from '~/components/DontEditWarning.astro'

<DontEditWarning />


> Missing width and height attributes for `IMAGE_URL`. When using remote images, both dimensions are required in order to avoid cumulative layout shift (CLS).

## What went wrong?
For remote images, `width` and `height` cannot automatically be inferred from the original file. To avoid cumulative layout shift (CLS), either specify these two properties, or set [`inferSize`](/en/reference/modules/astro-assets/#infersize) to `true` to fetch a remote image's original dimensions.

If your image is inside your `src` folder, you probably meant to import it instead. See [the Imports guide for more information](/en/guides/imports/#other-assets).

**See Also:**
-  [Images](/en/guides/images/)
-  [Image component#width-and-height-required](/en/reference/modules/astro-assets/#width-and-height-required-for-images-in-public)

----------------------------------------

TITLE: Setting Contentful Environment Variables in Astro
DESCRIPTION: Creates an .env file to store Contentful credentials and configures TypeScript types for environment variables.

LANGUAGE: ini
CODE:
CONTENTFUL_SPACE_ID=YOUR_SPACE_ID
CONTENTFUL_DELIVERY_TOKEN=YOUR_DELIVERY_TOKEN
CONTENTFUL_PREVIEW_TOKEN=YOUR_PREVIEW_TOKEN

LANGUAGE: typescript
CODE:
interface ImportMetaEnv {
  readonly CONTENTFUL_SPACE_ID: string;
  readonly CONTENTFUL_DELIVERY_TOKEN: string;
  readonly CONTENTFUL_PREVIEW_TOKEN: string;
}

----------------------------------------

TITLE: Setting Environment Variables for Storyblok
DESCRIPTION: Configuration of environment variables for Storyblok integration using a .env file.

LANGUAGE: ini
CODE:
STORYBLOK_TOKEN=YOUR_PREVIEW_TOKEN

----------------------------------------

TITLE: Demonstrating Valid and Invalid Route Parameters in Astro getStaticPaths
DESCRIPTION: This snippet shows examples of valid and invalid parameter types for the getStaticPaths function in an Astro route file. It demonstrates that strings and numbers are acceptable, while boolean values are not.

LANGUAGE: astro
CODE:
---
export async function getStaticPaths() {
	return [
		{ params: { id: '1' } } // Works
		{ params: { id: 2 } } // Works
		{ params: { id: false } } // Does not work
	];
}
---

----------------------------------------

TITLE: Error Message Template
DESCRIPTION: Template for the rewrite error message showing the invalid route and optional stack trace.

LANGUAGE: markdown
CODE:
> **RewriteEncounteredAnError**: The route ROUTE that you tried to render doesn't exist, or it emitted an error during the rendering phase. STACK ? STACK : ''.

----------------------------------------

TITLE: Importing DontEditWarning Component in Astro
DESCRIPTION: Frontmatter and component import section for the error documentation page. Includes metadata and warning component import.

LANGUAGE: astro
CODE:
---
# NOTE: This file is auto-generated from 'scripts/error-docgen.mjs'
# Do not make edits to it directly, they will be overwritten.
# Instead, change this file: https://github.com/withastro/astro/blob/main/packages/astro/src/core/errors/errors-data.ts
# Translators, please remove this note and the <DontEditWarning/> component.

title: locals must not be reassigned.
i18nReady: true
githubURL: https://github.com/withastro/astro/blob/main/packages/astro/src/core/errors/errors-data.ts
---
import DontEditWarning from '~/components/DontEditWarning.astro'

<DontEditWarning />

----------------------------------------

TITLE: Demonstrating Invalid Prerender Export in Astro
DESCRIPTION: This snippet shows an example error message for an invalid prerender export in Astro. The error occurs when the prerender export value cannot be statically analyzed.

LANGUAGE: markdown
CODE:
> **Mensaje de error de ejemplo:**<br/>
InvalidPrerenderExport: Se ha detectado una exportación `prerender`, pero su valor no se puede analizar estáticamente.

----------------------------------------

TITLE: Importing Astro Component
DESCRIPTION: Import statement for a warning component that prevents manual editing of auto-generated files.

LANGUAGE: astro
CODE:
import DontEditWarning from '~/components/DontEditWarning.astro'

----------------------------------------

TITLE: Configuring rehypeHeadingIds Plugin with Compatibility Mode
DESCRIPTION: This code snippet shows how to enable compatibility mode when using the rehypeHeadingIds plugin directly in the Astro configuration. It sets the headingIdCompat option to true.

LANGUAGE: javascript
CODE:
import { defineConfig } from 'astro/config';
import { rehypeHeadingIds } from '@astrojs/markdown-remark';
import { otherPluginThatReliesOnHeadingIDs } from 'some/plugin/source';

export default defineConfig({
  markdown: {
    rehypePlugins: [
      [rehypeHeadingIds, { headingIdCompat: true }],
      otherPluginThatReliesOnHeadingIDs,
    ],
  },
});

----------------------------------------

TITLE: Using the Card Component
DESCRIPTION: Example implementation of the custom card component in an Astro page.

LANGUAGE: astro
CODE:
---
import MyCustomCardComponent from '../components/MyCustomCardComponent.astro';
---
<MyCustomCardComponent 
    imagePath="/src/assets/avatar-1.jpg"
    altText="A headshot of Priya against a brick wall background."
    name="Priya"
    age={25}
/>

----------------------------------------

TITLE: Defining Error Message for Invalid Image Service in Astro
DESCRIPTION: This snippet defines the error message and provides context for an issue related to loading the image service in Astro. It includes the error title, a brief description, and additional information for troubleshooting.

LANGUAGE: markdown
CODE:
> **InvalidImageService**: There was an error loading the configured image service. Please see the stack trace for more information.

## What went wrong?
There was an error while loading the configured image service. This can be caused by various factors, such as your image service not properly exporting a compatible object in its default export, or an incorrect path.

If you believe that your service is properly configured and this error is wrong, please [open an issue](https://astro.build/issues/).

**See Also:**
-  [Image Service API](/en/reference/image-service-reference/)

----------------------------------------

TITLE: Setting Image Endpoint
DESCRIPTION: Configure the endpoint used for image optimization in development and SSR.

LANGUAGE: js
CODE:
{
  image: {
    // Example: Use a custom image endpoint at `/custom_endpoint`
    endpoint: {
      route: '/custom_endpoint',
      entrypoint: 'src/my_endpoint.ts',
    },
  },
}

----------------------------------------

TITLE: Creating Dynamic Routes for Blog Posts in Astro
DESCRIPTION: Sets up dynamic routing for individual blog posts using Astro's getStaticPaths function and Contentful data.

LANGUAGE: astro
CODE:
---
import { contentfulClient } from "../../lib/contentful";
import { documentToHtmlString } from "@contentful/rich-text-html-renderer";
import type { BlogPost } from "../../lib/contentful";

export async function getStaticPaths() {
  const entries = await contentfulClient.getEntries<BlogPost>({
    content_type: "blogPost",
  });

  const pages = entries.items.map((item) => ({
    params: { slug: item.fields.slug },
    props: {
      title: item.fields.title,
      content: documentToHtmlString(item.fields.content),
      date: new Date(item.fields.date).toLocaleDateString(),
    },
  }));
  return pages;
}

const { content, title, date } = Astro.props;
---
<html lang="en">
  <head>
    <title>{title}</title>
  </head>
  <body>
    <h1>{title}</h1>
    <time>{date}</time>
    <article set:html={content} />
  </body>
</html>

----------------------------------------

TITLE: Installing Sentry SDK for Astro using npm
DESCRIPTION: Command to install the Sentry SDK for Astro using npm package manager.

LANGUAGE: shell
CODE:
npx astro add @sentry/astro

----------------------------------------

TITLE: Importing DontEditWarning Component in Astro
DESCRIPTION: Import statement for a warning component used to prevent manual edits to auto-generated files.

LANGUAGE: astro
CODE:
import DontEditWarning from '~/components/DontEditWarning.astro'

----------------------------------------

TITLE: Defining Astro Error Documentation in Markdown
DESCRIPTION: This snippet defines the frontmatter and content structure for an Astro error documentation page. It includes metadata such as title, i18n readiness, and GitHub URL, as well as the error message and explanation.

LANGUAGE: markdown
CODE:
---
# NOTE: This file is auto-generated from 'scripts/error-docgen.mjs'
# Do not make edits to it directly, they will be overwritten.
# Instead, change this file: https://github.com/withastro/astro/blob/main/packages/astro/src/core/errors/errors-data.ts
# Translators, please remove this note and the <DontEditWarning/> component.

title: Session flag not set
i18nReady: true
githubURL: https://github.com/withastro/astro/blob/main/packages/astro/src/core/errors/errors-data.ts
---
import DontEditWarning from '~/components/DontEditWarning.astro'

<DontEditWarning />


> Session config was provided without enabling the `experimental.session` flag

## What went wrong?
Thrown when session storage is configured but the `experimental.session` flag is not enabled.

**See Also:**
-  [experimental.session](/en/reference/experimental-flags/sessions/)


----------------------------------------

TITLE: Importing DontEditWarning Component in Astro
DESCRIPTION: This snippet imports a component named DontEditWarning from the components directory. It's used to display a warning message about not editing the auto-generated file.

LANGUAGE: astro
CODE:
import DontEditWarning from '~/components/DontEditWarning.astro'

----------------------------------------

TITLE: Configuring prefixDefaultLocale in Astro
DESCRIPTION: Set the prefixDefaultLocale option to false (default) or true to control URL prefixing for the default locale.

LANGUAGE: javascript
CODE:
import { defineConfig } from "astro/config"
export default defineConfig({
  i18n: {
    defaultLocale: "en",
    locales: ["es", "en", "fr"],
    routing: {
        prefixDefaultLocale: false
    }
  }
})

----------------------------------------

TITLE: Using DontEditWarning Component in Markdown
DESCRIPTION: This code snippet demonstrates the usage of the imported DontEditWarning component within the markdown file. It's placed at the beginning of the document to warn users against editing the file directly.

LANGUAGE: markdown
CODE:
<DontEditWarning />

----------------------------------------

TITLE: Configuring Astro Server Directory
DESCRIPTION: Demonstrates how to set the output directory for server JavaScript in Astro SSR builds.

LANGUAGE: javascript
CODE:
{
  build: {
    server: './server'
  }
}

----------------------------------------

TITLE: Manipulation des cookies dans Astro
DESCRIPTION: Exemples d'utilisation des méthodes de l'objet Astro.cookies pour manipuler les cookies.

LANGUAGE: astro
CODE:
// Obtenir un cookie
const cookieValue = Astro.cookies.get('cookieName').value;

// Définir un cookie
Astro.cookies.set('cookieName', 'cookieValue', {
  path: '/',
  httpOnly: true,
  secure: true,
  maxAge: 60 * 60 * 24 * 7 // 1 semaine
});

// Supprimer un cookie
Astro.cookies.delete('cookieName');

----------------------------------------

TITLE: Displaying Astro Error: IncompatibleDescriptorOptions
DESCRIPTION: This snippet shows the error message and explanation for the 'IncompatibleDescriptorOptions' error in Astro. It indicates that only one of 'densities' or 'widths' can be specified when constructing a 'srcset' attribute for images.

LANGUAGE: markdown
CODE:
> **IncompatibleDescriptorOptions**: Only one of `densities` or `widths` can be specified. In most cases, you'll probably want to use only `widths` if you require specific widths.

----------------------------------------

TITLE: Server-Side Rendering Contentful Blog Posts in Astro
DESCRIPTION: Implements server-side rendering for blog posts using Astro's SSR mode and Contentful data.

LANGUAGE: astro
CODE:
---
import Layout from "../../layouts/Layout.astro";
import { contentfulClient } from "../../lib/contentful";
import { documentToHtmlString } from "@contentful/rich-text-html-renderer";
import type { BlogPost } from "../../lib/contentful";

let post;
const { slug } = Astro.params;
try {
  const data = await contentfulClient.getEntries<BlogPost>({
    content_type: "blogPost",
    "fields.slug": slug,
  });
  const { title, date, content } = data.items[0].fields;
  post = {
    title,
    date: new Date(date).toLocaleDateString(),
    content: documentToHtmlString(content),
  };
} catch (error) {
  return Astro.redirect("/404");
}
---
<html lang="en">
  <head>
    <title>{post?.title}</title>
  </head>
  <body>
    <h1>{post?.title}</h1>
    <time>{post?.date}</time>
    <article set:html={post?.content} />
  </body>
</html>

----------------------------------------

TITLE: Installing Host CLI with Package Managers
DESCRIPTION: Commands for installing a host's CLI globally using different package managers (npm, pnpm, yarn). Example shows Netlify CLI installation.

LANGUAGE: shell
CODE:
npm install --global netlify-cli

LANGUAGE: shell
CODE:
pnpm add --global netlify-cli

LANGUAGE: shell
CODE:
yarn global add netlify-cli

----------------------------------------

TITLE: Demonstrating Astro.glob() Usage Error in Markdown
DESCRIPTION: This code snippet shows the error message and explanation for using Astro.glob() outside of an Astro file. It suggests using import.meta.glob() as an alternative.

LANGUAGE: markdown
CODE:
> **AstroGlobUsedOutside**: `Astro.glob(GLOB_STR)` can only be used in `.astro` files. `import.meta.glob(GLOB_STR)` can be used instead to achieve a similar result.

## What went wrong?
`Astro.glob()` can only be used in `.astro` files. You can use [`import.meta.glob()`](https://vite.dev/guide/features.html#glob-import) instead to achieve the same result.

**See Also:**
-  [Astro.glob](/en/reference/api-reference/#astroglob)

----------------------------------------

TITLE: Building Astro Project for Production with npm
DESCRIPTION: Command to build a deploy-ready version of your Astro site using npm, creating a separate folder with optimized files.

LANGUAGE: shell
CODE:
npm run build

----------------------------------------

TITLE: Error Documentation Frontmatter in Astro
DESCRIPTION: YAML frontmatter configuration for the error documentation page, including metadata like title, i18n status, and GitHub URL reference.

LANGUAGE: yaml
CODE:
---
title: Unhandled rejection
i18nReady: true
githubURL: https://github.com/withastro/astro/blob/main/packages/astro/src/core/errors/errors-data.ts
---

----------------------------------------

TITLE: Using React Components in Astro Pages
DESCRIPTION: Demonstrates how to import and use a React component within an Astro page component. The React component is rendered statically by default.

LANGUAGE: astro
CODE:
---
import MyReactComponent from '../components/MyReactComponent.jsx';
---
<html>
  <body>
    <h1>¡Usa componentes de React directamente en Astro!</h1>
    <MyReactComponent />
  </body>
</html>

----------------------------------------

TITLE: Configuring Astro Redirects
DESCRIPTION: Demonstrates how to set up redirects in the Astro configuration.

LANGUAGE: javascript
CODE:
export default defineConfig({
  redirects: {
   '/old': '/new',
   '/blog/[...slug]': '/articles/[...slug]',
   '/about': 'https://example.com/about',
   '/news': {
     status: 302,
     destination: 'https://example.com/news'
 	},
   // '/product1/', '/product1' // Note, this is not supported
	}
})

----------------------------------------

TITLE: Displaying Image Missing Alt Error in Markdown
DESCRIPTION: This snippet shows the error message displayed when an Image component is missing the required 'alt' property. It emphasizes the importance of alt text for accessibility.

LANGUAGE: markdown
CODE:
> **ImageMissingAlt**: Image missing "alt" property. "alt" text is required to describe important images on the page.

----------------------------------------

TITLE: Configuring Astro Redirects
DESCRIPTION: Demonstrates how to set up redirects in the Astro configuration.

LANGUAGE: javascript
CODE:
export default defineConfig({
  redirects: {
   '/old': '/new',
   '/blog/[...slug]': '/articles/[...slug]',
   '/about': 'https://example.com/about',
   '/news': {
     status: 302,
     destination: 'https://example.com/news'
 	},
   // '/product1/', '/product1' // Note, this is not supported
	}
})

----------------------------------------

TITLE: Использование компонента ViewTransitions для анимации переходов между страницами
DESCRIPTION: Пример добавления компонента ViewTransitions для включения анимированных переходов между страницами

LANGUAGE: astro
CODE:
---
import { ViewTransitions } from 'astro:transitions';
---
<html lang="en">
  <head>
    <title>My Homepage</title>
    <ViewTransitions />
  </head>
  <body>
    <h1>Welcome to my website!</h1>
  </body>
</html>

----------------------------------------

TITLE: Displaying Markdown Content for Invalid Environment Variable Error
DESCRIPTION: This markdown snippet defines the structure and content for the error documentation page. It includes a title, metadata, and a caution notice about the error being deprecated.

LANGUAGE: markdown
CODE:
---
# NOTE: This file is auto-generated from 'scripts/error-docgen.mjs'
# Do not make edits to it directly, they will be overwritten.
# Instead, change this file: https://github.com/withastro/astro/blob/main/packages/astro/src/core/errors/errors-data.ts
# Translators, please remove this note and the <DontEditWarning/> component.

title: Invalid Environment Variable
i18nReady: true
githubURL: https://github.com/withastro/astro/blob/main/packages/astro/src/core/errors/errors-data.ts
---
import DontEditWarning from '~/components/DontEditWarning.astro'

<DontEditWarning />


:::caution[Deprecated]
This error is from an older version of Astro and is no longer in use. If you are unable to upgrade your project to a more recent version, then you can consult [unmaintained snapshots of older documentation](/en/upgrade-astro/#older-docs-unmaintained) for assistance.
:::

> **EnvInvalidVariable**: The following environment variable does not match the data type and/or properties defined in `experimental.env.schema`: KEY is not of type TYPE

## What went wrong?
An environment variable does not match the data type and/or properties defined in `experimental.env.schema`.

----------------------------------------

TITLE: Configuring Dev Toolbar
DESCRIPTION: Enable or disable the Astro dev toolbar.

LANGUAGE: js
CODE:
{
  devToolbar: { enabled: false }
}

----------------------------------------

TITLE: Configuring Astro Trailing Slash Behavior
DESCRIPTION: Shows how to set the trailing slash behavior for Astro routes.

LANGUAGE: javascript
CODE:
{
  // Example: Require a trailing slash during development
  trailingSlash: 'always'
}

----------------------------------------

TITLE: Fetching and Displaying DatoCMS Content in Astro
DESCRIPTION: Query the DatoCMS GraphQL API to fetch the home page title and display it on the index page.

LANGUAGE: astro
CODE:
---
const response = await fetch('https://graphql.datocms.com/', {
	method: 'POST',
	headers: {
		'Content-Type': 'application/json',
		Accept: 'application/json',
		Authorization: `Bearer ${import.meta.env.DATOCMS_API_KEY}`,
	},
	body: JSON.stringify({
		query: `query Homepage {
          home {
            title
          }
        }
      `,
	}),
});

const json = await response.json();
const data = json.data.home;
---

<h1>{data.title}</h1>

----------------------------------------

TITLE: Converting Vue Component to Astro Component
DESCRIPTION: Example of converting a Vue Single File Component (SFC) to an Astro component, demonstrating changes in syntax and structure.

LANGUAGE: vue
CODE:
<template>
  <div>
    <p v-if="message === 'Not found'">
      The repository you're looking up doesn't exist
    </p>
    <div v-else>
      <Header/>
      <p class="banner">Astro has {{stars}} 🧑‍🚀</p>
      <Footer />
    </div>
  </div>
</template>

<script>
import Vue from 'vue'

export default Vue.extend({
  name: 'IndexPage',
  async asyncData() {
    const res = await fetch('https://api.github.com/repos/withastro/astro')
    const json = await res.json();
    return {
      message: json.message,
      stars: json.stargazers_count || 0,
    };
  }
});
</script>

<style scoped>
.banner {
  background-color: #f4f4f4;
  padding: 1em 1.5em;
  text-align: center;
  margin-bottom: 1em;
}
<style>

LANGUAGE: astro
CODE:
---
import Header from "./header";
import Footer from './footer';
import "./layout.css";

const res = await fetch('https://api.github.com/repos/withastro/astro')
const json = await res.json()
const message = json.message;
const stars = json.stargazers_count || 0;
---

{message === "Not Found" ? 
      <p>The repository you're looking up doesn't exist</p> :
      <>
            <Header />
            <p class="banner">Astro has {stars} 🧑‍🚀</p>
            <Footer />
        </> 
}

<style>
  .banner {
    background-color: #f4f4f4; 
    padding: 1em 1.5em;
    text-align: center;
    margin-bottom: 1em;
  }
<style>

----------------------------------------

TITLE: Defining AstroGlobNoMatch Error in Markdown
DESCRIPTION: This snippet defines the error message and provides an explanation for the AstroGlobNoMatch error in Astro projects. It also includes a link to the Astro.glob() documentation.

LANGUAGE: markdown
CODE:
> **AstroGlobNoMatch**: `Astro.glob(GLOB_STR)` did not return any matching files.

## What went wrong?
`Astro.glob()` did not return any matching files. There might be a typo in the glob pattern.

**See Also:**
-  [Astro.glob](/en/reference/api-reference/#astroglob)

----------------------------------------

TITLE: Updating About Page Configuration in Astro
DESCRIPTION: Code snippet showing the frontmatter configuration for an About page component in Astro, including variable definitions for personal information, skills, and styling properties. The snippet demonstrates a change in the 'finished' variable from false to true.

LANGUAGE: astro
CODE:
---
import BaseLayout from "../layouts/BaseLayout.astro";
const pageTitle = "About Me";
const happy = true;
const finished = false;
const finished = true;
const goal = 3;
const identity = {
  firstName: "Sarah",
  country: "Canada",
  occupation: "Technical Writer",
  hobbies: ["photography", "birdwatching", "baseball"],
};
const skills = ["HTML", "CSS", "JavaScript", "React", "Astro", "Writing Docs"];
const skillColor = "navy";
const fontWeight = "bold";
const textCase = "uppercase";
---

----------------------------------------

TITLE: Using Images in Svelte Components
DESCRIPTION: Shows how to import and use local images in Svelte components.

LANGUAGE: svelte
CODE:
<script>
  import stars from '../assets/stars.png';
</script>

<img src={stars.src} alt="A starry sky." />

----------------------------------------

TITLE: Astro Component Import
DESCRIPTION: Import statement for the DontEditWarning component used in the error documentation.

LANGUAGE: mdx
CODE:
import DontEditWarning from '~/components/DontEditWarning.astro'

----------------------------------------

TITLE: Configuring Astro Trailing Slash Behavior
DESCRIPTION: Shows how to set the trailing slash behavior for Astro routes.

LANGUAGE: javascript
CODE:
{
  // Example: Require a trailing slash during development
  trailingSlash: 'always'
}

----------------------------------------

TITLE: Using app.render for Request Handling in JavaScript
DESCRIPTION: Shows how to use the app.render method to handle incoming requests and generate responses in an Astro adapter.

LANGUAGE: javascript
CODE:
import { App } from 'astro/app';
import http from 'http';

export function start(manifest) {
  const app = new App(manifest);

  addEventListener('fetch', event => {
    event.respondWith(
      app.render(event.request)
    );
  });
}

----------------------------------------

TITLE: Using DontEditWarning Component in Astro
DESCRIPTION: This snippet demonstrates the usage of the DontEditWarning component in an Astro file. It's placed at the beginning of the document to warn users against editing the auto-generated content.

LANGUAGE: astro
CODE:
<DontEditWarning />

----------------------------------------

TITLE: Installing Cosmic JavaScript SDK with npm
DESCRIPTION: Command to install the Cosmic JavaScript SDK using npm package manager.

LANGUAGE: shell
CODE:
npm install @cosmicjs/sdk

----------------------------------------

TITLE: Installing Astro Starlight Template with Yarn
DESCRIPTION: Command to create a new Astro project using the Starlight documentation theme template via Yarn package manager.

LANGUAGE: shell
CODE:
yarn create astro --template starlight

----------------------------------------

TITLE: Importing DontEditWarning Component in Astro
DESCRIPTION: This snippet imports a component named DontEditWarning from the components directory. It's used to display a warning message about not editing the auto-generated file.

LANGUAGE: astro
CODE:
import DontEditWarning from '~/components/DontEditWarning.astro'

----------------------------------------

TITLE: Configuring Astro Server Open Option
DESCRIPTION: Demonstrates how to control whether the dev server should open in the browser window on startup.

LANGUAGE: javascript
CODE:
{
  server: { open: "/about" }
}

----------------------------------------

TITLE: Firebase Authentication Sign-in Endpoint in Astro
DESCRIPTION: Handles user sign-in by verifying the ID token and creating a session cookie.

LANGUAGE: typescript
CODE:
import type { APIRoute } from "astro";
import { app } from "../../../firebase/server";
import { getAuth } from "firebase-admin/auth";

export const GET: APIRoute = async ({ request, cookies, redirect }) => {
  const auth = getAuth(app);

  const idToken = request.headers.get("Authorization")?.split("Bearer ")[1];
  if (!idToken) {
    return new Response(
      "Token no encontrado",
      { status: 401 }
    );
  }

  try {
    await auth.verifyIdToken(idToken);
  } catch (error) {
    return new Response(
      "Token invalido",
      { status: 401 }
    );
  }

  const fiveDays = 60 * 60 * 24 * 5 * 1000;
  const sessionCookie = await auth.createSessionCookie(idToken, {
    expiresIn: fiveDays,
  });

  cookies.set("__session", sessionCookie, {
    path: "/",
  });

  return redirect("/dashboard");
};

----------------------------------------

TITLE: Defining Astro Configuration
DESCRIPTION: Demonstrates how to define an Astro configuration file using the defineConfig function.

LANGUAGE: javascript
CODE:
// astro.config.mjs
import { defineConfig } from 'astro/config'

export default defineConfig({
  // your configuration options here...
})

----------------------------------------

TITLE: Storing Non-Serializable Data in Astro.locals (TypeScript)
DESCRIPTION: This snippet demonstrates an incorrect usage of Astro.locals where a function is being stored, which is not serializable. This will throw a LocalsNotSerializable error in development mode.

LANGUAGE: typescript
CODE:
import {defineMiddleware} from "astro/middleware";
export const onRequest = defineMiddleware((context, next) => {
  context.locals = {
    foo() {
      alert("Hello world!")
    }
  };
  return next();
});

----------------------------------------

TITLE: Defining Astro Configuration
DESCRIPTION: Demonstrates how to define an Astro configuration file using the defineConfig function.

LANGUAGE: javascript
CODE:
// astro.config.mjs
import { defineConfig } from 'astro/config'

export default defineConfig({
  // your configuration options here...
})

----------------------------------------

TITLE: Consuming API Endpoint in Astro Component
DESCRIPTION: Shows how to import and call a GET endpoint directly from an Astro component's server-side script, accessing the response data in the template.

LANGUAGE: astro
CODE:
---
import { GET } from './api/hello.ts'

let response = await GET(Astro)
const data = await response.json()
---

<h1>{data.greeting} mundo!</h1>

----------------------------------------

TITLE: Defining RouteNotFound Error in Markdown
DESCRIPTION: This snippet defines the RouteNotFound error in Markdown format. It includes the error title, internationalization status, GitHub URL for the source, and a brief description of the error.

LANGUAGE: markdown
CODE:
---
# NOTE: This file is auto-generated from 'scripts/error-docgen.mjs'
# Do not make edits to it directly, they will be overwritten.
# Instead, change this file: https://github.com/withastro/astro/blob/main/packages/astro/src/core/errors/errors-data.ts
# Translators, please remove this note and the <DontEditWarning/> component.

title: Route not found.
i18nReady: true
githubURL: https://github.com/withastro/astro/blob/main/packages/astro/src/core/errors/errors-data.ts
---
import DontEditWarning from '~/components/DontEditWarning.astro'

<DontEditWarning />


> **RouteNotFound**: Astro could not find a route that matches the one you requested.

## What went wrong?
Astro couldn't find a route matching the one provided by the user

----------------------------------------

TITLE: Using Unsupported Image Formats in Astro
DESCRIPTION: Demonstrates how to handle unsupported image formats like GIFs by using a direct img tag instead of Astro's image optimization services. Shows proper usage of image properties including src, width, height, and alt attributes.

LANGUAGE: astro
CODE:
---
import rocket from '../assets/images/rocket.gif';
---

<img src={rocket.src} width={rocket.width} height={rocket.height} alt="A rocketship in space." />

----------------------------------------

TITLE: Configuring Cosmic API Keys in Astro Environment
DESCRIPTION: Environment variable configuration for Cosmic bucket slug and read key in an Astro project.

LANGUAGE: ini
CODE:
PUBLIC_COSMIC_BUCKET_SLUG=YOUR_BUCKET_SLUG
PUBLIC_COSMIC_READ_KEY=YOUR_READ_KEY

----------------------------------------

TITLE: Converting Gatsby Children Props to Astro Slots
DESCRIPTION: Demonstrates how to replace Gatsby's children prop with Astro's slot element.

LANGUAGE: astro
CODE:
---
---
export default function MyComponent(props) { 
    return (
      <div>
        {props.children}
      </div>
    );  
}

<div>
  <slot />
</div>

----------------------------------------

TITLE: Setting Global Web Crawler Permissions in robots.txt
DESCRIPTION: Configures universal access permissions for all web crawlers. Uses the wildcard User-agent (*) to target all bots and explicitly allows access to all paths with Allow: /

LANGUAGE: robotstxt
CODE:
User-agent: *
Allow: /

----------------------------------------

TITLE: Static Apache Docker Configuration
DESCRIPTION: Dockerfile setup for serving static Astro sites using Apache httpd on port 80

LANGUAGE: docker
CODE:
FROM node:lts AS build
WORKDIR /app
COPY . .
RUN npm i
RUN npm run build

FROM httpd:2.4 AS runtime
COPY --from=build /app/dist /usr/local/apache2/htdocs/
EXPOSE 80

----------------------------------------

TITLE: Handling Form Submission in Astro Frontmatter
DESCRIPTION: This snippet demonstrates how to process form submissions on the server-side using Astro's frontmatter. It includes form data extraction, validation, and error handling.

LANGUAGE: astro
CODE:
---
import { isRegistered, registerUser } from "../../data/users"
import { isValidEmail } from "../../utils/isValidEmail";

const errors = { username: "", email: "", password: "" };
if (Astro.request.method === "POST") {
  try {
    const data = await Astro.request.formData();
    const name = data.get("username");
    const email = data.get("email");
    const password = data.get("password");
    if (typeof name !== "string" || name.length < 1) {
      errors.username += "Please enter a username. ";
    }
    if (typeof email !== "string" || !isValidEmail(email)) {
      errors.email += "Email is not valid. ";
    } else if (await isRegistered(email)) {
      errors.email += "Email is already registered. ";
    }
    if (typeof password !== "string" || password.length < 6) {
      errors.password += "Password must be at least 6 characters. ";
    }
    const hasErrors = Object.values(errors).some(msg => msg)
    if (!hasErrors) {
      await registerUser({name, email, password});
      return Astro.redirect("/login");
    }
  } catch (error) {
    if (error instanceof Error) {
      console.error(error.message);
    }
  }
}
---
<h1>Registro</h1>
<form method="POST">
  <label>
    Usuario:
    <input type="text" name="username" />
  </label>
  {errors.username && <p>{errors.username}</p>}
  <label>
    Correo electrónico:
    <input type="email" name="email" required />
  </label>
  {errors.email && <p>{errors.email}</p>}
  <label>
    Contraseña:
    <input type="password" name="password" required minlength="6" />
  </label>
  {errors.password && <p>{errors.password}</p>}
  <button>Registro</button>
</form>

----------------------------------------

TITLE: Importing Warning Component in Astro
DESCRIPTION: Imports a DontEditWarning component that is displayed at the top of the error documentation page.

LANGUAGE: astro
CODE:
import DontEditWarning from '~/components/DontEditWarning.astro'

<DontEditWarning />

----------------------------------------

TITLE: Installing Astro Blog Template with PNPM
DESCRIPTION: Command to create a new Astro project using the blog template starter with PNPM package manager.

LANGUAGE: shell
CODE:
pnpm create astro@latest --template blog

----------------------------------------

TITLE: Nesting Hydrated Framework Components in Astro
DESCRIPTION: Shows how to nest hydrated framework components within other components in an Astro file.

LANGUAGE: astro
CODE:
---
import MyReactSidebar from '../components/MyReactSidebar.jsx';
import MyReactButton from '../components/MyReactButton.jsx';
import MySvelteButton from '../components/MySvelteButton.svelte';
---

<MyReactSidebar>
  <p>Aquí hay una barra lateral con texto y un botón.</p>
  <div slot="actions">
    <MyReactButton client:idle />
    <MySvelteButton client:load />
  </div>
</MyReactSidebar>

----------------------------------------

TITLE: Inserting DontEditWarning Component in Astro Markdown
DESCRIPTION: This snippet inserts the DontEditWarning component into the Astro Markdown file, which will render the warning message in the final output.

LANGUAGE: astro
CODE:
<DontEditWarning />

----------------------------------------

TITLE: TypeScript Environment Variable Type Definitions
DESCRIPTION: Defines TypeScript types for environment variables to enable IntelliSense support.

LANGUAGE: typescript
CODE:
interface ImportMetaEnv {
  readonly HYGRAPH_ENDPOINT: string;
}

----------------------------------------

TITLE: Updating Astro dependencies with npm
DESCRIPTION: Commands to update Astro and all dependencies using npm

LANGUAGE: shell
CODE:
# updates the astro dependency:
npm upgrade astro
# or, to update all dependencies:
npm upgrade

----------------------------------------

TITLE: Creating a New Branch for Astro Docs Contribution
DESCRIPTION: Git command to create and switch to a new branch for making contributions to the Astro docs.

LANGUAGE: shell
CODE:
git checkout -b add/partial-hydration-typo-fix

----------------------------------------

TITLE: Displaying GetStaticPathsRequired Error in Astro
DESCRIPTION: This code snippet shows the error message displayed when a getStaticPaths() function is required but not provided for dynamic routes in Astro's static mode. It includes the error title and a brief explanation of the issue.

LANGUAGE: markdown
CODE:
> **GetStaticPathsRequired**: `getStaticPaths()` function is required for dynamic routes. Make sure that you `export` a `getStaticPaths` function from your dynamic route.

----------------------------------------

TITLE: Adding Client-Side Validation to HTML Form in Astro
DESCRIPTION: This snippet enhances the registration form with client-side validation using HTML attributes such as 'required' and 'minlength' to ensure data integrity before submission.

LANGUAGE: astro
CODE:
<h1>Registro</h1>
<form>
  <label>
    Usuario:
    <input type="text" name="username" required />
  </label>
  <label>
    Correo electrónico:
    <input type="email" name="email" required />
  </label>
  <label>
    Contraseña:
    <input type="password" name="password" required minlength="6" />
  </label>
  <button>Enviar</button>
</form>

----------------------------------------

TITLE: Using DontEditWarning Component in Astro
DESCRIPTION: This snippet demonstrates the usage of the 'DontEditWarning' component in an Astro file. It's placed at the beginning of the content to warn users against editing the auto-generated file.

LANGUAGE: astro
CODE:
<DontEditWarning />

----------------------------------------

TITLE: Using React Components in Astro
DESCRIPTION: This example shows how to import and use React components directly in an Astro file, demonstrating the ability to mix Astro and React components.

LANGUAGE: astro
CODE:
---
import MyReactComponent from '../components/MyReactComponent.jsx';
---
<html>
  <body>
    <h1>Use React components directly in Astro!</h1>
    <MyReactComponent />
  </body>
</html>

----------------------------------------

TITLE: Using Named Slots with Framework Components in Astro
DESCRIPTION: Demonstrates how to use named slots to pass specific children to framework components. Examples for React and Svelte are provided.

LANGUAGE: astro
CODE:
---
import MySidebar from '../components/MySidebar.jsx';
---
<MySidebar>
  <h2 slot="title">Menu</h2>
  <p>Aquí hay una barra lateral con texto y un botón.</p>
  <ul slot="social-links">
    <li><a href="https://twitter.com/astrodotbuild">Twitter</a></li>
    <li><a href="https://github.com/withastro">GitHub</a></li>
  </ul>
</MySidebar>

LANGUAGE: jsx
CODE:
export default function MySidebar(props) {
  return (
    <aside>
      <header>{props.title}</header>
      <main>{props.children}</main>
      <footer>{props.socialLinks}</footer>
    </aside>
  )
}

LANGUAGE: svelte
CODE:
<aside>
  <header><slot name="title" /></header>
  <main><slot /></main>
  <footer><slot name="social-links" /></footer>
</aside>

----------------------------------------

TITLE: Importing DontEditWarning Component in Astro
DESCRIPTION: Imports a component that displays a warning about not editing the auto-generated file directly.

LANGUAGE: astro
CODE:
import DontEditWarning from '~/components/DontEditWarning.astro'

----------------------------------------

TITLE: Displaying Astro Error: SessionWithoutSupportedAdapterOutputError
DESCRIPTION: This snippet shows the error message displayed when sessions are used with an adapter that doesn't support server output. It explains that the adapter must set "server" in the buildOutput adapter feature.

LANGUAGE: markdown
CODE:
> **SessionWithoutSupportedAdapterOutputError**: Sessions require an adapter that supports server output. The adapter must set "server" in the `buildOutput` adapter feature.

----------------------------------------

TITLE: Defining Neon Environment Variables for TypeScript in Astro
DESCRIPTION: Defines the Neon database URL environment variable in a TypeScript declaration file for better type support in an Astro project.

LANGUAGE: typescript
CODE:
interface ImportMetaEnv {
  readonly NEON_DATABASE_URL: string;
}

interface ImportMeta {
  readonly env: ImportMetaEnv;
}

----------------------------------------

TITLE: Configuring Remote Repository for Astro Docs Fork
DESCRIPTION: Git command to add the upstream remote repository for the Astro docs project fork.

LANGUAGE: shell
CODE:
git remote add upstream git@github.com:withastro/docs.git

----------------------------------------

TITLE: Updating IntegrationRouteData.distURL handling
DESCRIPTION: Update code to handle IntegrationRouteData.distURL as an array of URLs

LANGUAGE: js
CODE:
if (route.distURL) {
  if (route.distURL.endsWith('index.html')) {
    // do something
  }
  for (const url of route.distURL) {
    if (url.endsWith('index.html')) {
      // do something
    }
  }
}

----------------------------------------

TITLE: Accès à l'URL actuelle dans Astro
DESCRIPTION: Exemple d'utilisation de Astro.url pour accéder aux informations de l'URL actuelle.

LANGUAGE: astro
CODE:
<h1>L'URL actuelle est : {Astro.url}</h1>
<h1>Le chemin d'accès actuel de l'URL est : {Astro.url.pathname}</h1>
<h1>L'origine de l'URL actuelle est : {Astro.url.origin}</h1>

----------------------------------------

TITLE: Importing ContributorList Component in Astro
DESCRIPTION: Frontmatter configuration and component import statement for an Astro documentation page about contributing.

LANGUAGE: markdown
CODE:
---
title: Contribute to Astro
description: How to get involved and contribute to Astro.
i18nReady: true
---
import ContributorList from '~/components/ContributorList.astro'

----------------------------------------

TITLE: Using the Custom Card Component in an Astro Page
DESCRIPTION: This snippet demonstrates how to import and use the custom card component in an Astro page, passing the required props including the image path.

LANGUAGE: astro
CODE:
---
import MyCustomCardComponent from '../components/MyCustomCardComponent.astro';
---
<MyCustomCardComponent 
    imagePath="/src/assets/avatar-1.jpg"
    altText="A headshot of Priya against a brick wall background."
    name="Priya"
    age={25}
/>

----------------------------------------

TITLE: Configuring Custom Language Routes in Astro
DESCRIPTION: Define custom URL paths for specific language codes and variations.

LANGUAGE: javascript
CODE:
import { defineConfig } from "astro/config"
export default defineConfig({
  i18n: {
    defaultLocale: "en",
    locales: ["es", "en", {
        path: "french", // no slashes included
        codes: ["fr", "fr-BR", "fr-CA"]
    }],
    routing: {
        prefixDefaultLocale: true
    }
})

----------------------------------------

TITLE: Configuring i18n in Astro Config
DESCRIPTION: Example configuration to enable internationalization in Astro by setting default locale and supported locales. This configuration is required before using the astro:i18n module.

LANGUAGE: javascript
CODE:
import { defineConfig } from 'astro'
export default defineConfig({
 i18n: {
	 locales: ['en', 'fr'],
	 defaultLocale: 'en',
	},
})

----------------------------------------

TITLE: Importing BackendGuidesNav Component in Astro
DESCRIPTION: This code snippet imports a custom Astro component named BackendGuidesNav. This component is likely used to display navigation for various backend service guides within the document.

LANGUAGE: astro
CODE:
import BackendGuidesNav from '~/components/BackendGuidesNav.astro';

----------------------------------------

TITLE: Linking Blog Posts in Astro Component
DESCRIPTION: Astro component showing how to create navigation links and a list of blog post links in the blog index page.

LANGUAGE: astro
CODE:
---
---
<html lang="en">
  <head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width" />
    <title>Astro</title>
  </head>
  <body>
    <a href="/">Home</a>
    <a href="/about/">About</a>
    <a href="/blog/">Blog</a>

    <h1>My Astro Learning Blog</h1>
    <p>This is where I will post about my journey learning Astro.</p>
    <ul>
      <li><a href="/posts/post-1/">Post 1</a></li>
      <li><a href="/posts/post-2/">Post 2</a></li>
      <li><a href="/posts/post-3/">Post 3</a></li>
    </ul>
  </body>
</html>

----------------------------------------

TITLE: Installing Dependencies and Running Astro Docs Locally
DESCRIPTION: Commands to install project dependencies using pnpm and start the development server for the Astro docs.

LANGUAGE: shell
CODE:
pnpm install

pnpm run dev

----------------------------------------

TITLE: Adding JSON Schema References
DESCRIPTION: Example showing how to add schema references to JSON content files

LANGUAGE: json
CODE:
{
  "$schema": "../../../.astro/collections/authors.schema.json",
  "name": "Armand",
  "skills": ["Astro", "Starlight"]
}

----------------------------------------

TITLE: Using Images in Content Collections
DESCRIPTION: Example of declaring an associated image in a content collection entry and using it in a blog index page.

LANGUAGE: markdown
CODE:
---
title: "Mon premier article de blog"
cover: "./firstpostcover.jpeg" # se résoudra en "src/content/blog/firstblogcover.jpeg"
coverAlt: "Photographie d'un coucher de soleil derrière une chaîne de montagnes."
---

Ceci est un article de blog

LANGUAGE: typescript
CODE:
import { defineCollection, z } from "astro:content";

const blogCollection = defineCollection({
	schema: ({ image }) => z.object({
		title: z.string(),
		cover: image(),
		coverAlt: z.string(),
	}),
});

export const collections = {
	blog: blogCollection,
};

LANGUAGE: astro
CODE:
---
import { Image } from "astro:assets";
import { getCollection } from "astro:content";
const allBlogPosts = await getCollection("blog");
---

{
	allBlogPosts.map((post) => (
		<div>
			<Image src={post.data.cover} alt={post.data.coverAlt} />
			<h2>
				<a href={"/blog/" + post.slug}>{post.data.title}</a>
			</h2>
		</div>
	))
}

----------------------------------------

TITLE: Displaying Reading Time in Markdown Layouts
DESCRIPTION: Implementation of reading time display in Astro Markdown layout templates

LANGUAGE: astro
CODE:
---
const { minutesRead } = Astro.props.frontmatter;
---

<html>
  <head>...</head>
  <body>
    <p>{minutesRead}</p>
    <slot />
  </body>
</html>

----------------------------------------

TITLE: Configuring Server Open Behavior
DESCRIPTION: Control whether the dev server should open the site in your browser on startup.

LANGUAGE: js
CODE:
{
  server: { open: "/about" }
}

----------------------------------------

TITLE: Applying Theme Before Page Render
DESCRIPTION: Use the astro:after-swap event to apply a theme before the new page is rendered.

LANGUAGE: astro
CODE:
<script is:inline>
  function applyTheme() {
    localStorage.theme === 'dark' 
      ? document.documentElement.classList.add("dark")
      : document.documentElement.classList.remove("dark");
  }
  
  document.addEventListener('astro:after-swap', applyTheme);
  applyTheme(); 
</script>

----------------------------------------

TITLE: Définition d'une action Astro de base
DESCRIPTION: Définit une action 'getGreeting' qui prend un nom en entrée et renvoie un message d'accueil.

LANGUAGE: typescript
CODE:
import { defineAction } from 'astro:actions';
import { z } from 'astro:schema';

export const server = {
  getGreeting: defineAction({
    input: z.object({
      name: z.string(),
    }),
    handler: async (input) => {
      return `Bonjour, ${input.name} !`
    }
  })
}

----------------------------------------

TITLE: YAML Frontmatter Configuration for Error Documentation
DESCRIPTION: YAML frontmatter that defines metadata for the error documentation page, including title, i18n status, and GitHub source URL.

LANGUAGE: yaml
CODE:
---
title: Page number param not found.
i18nReady: true
githubURL: https://github.com/withastro/astro/blob/main/packages/astro/src/core/errors/errors-data.ts
---

----------------------------------------

TITLE: Creating User Registration Endpoint in Astro
DESCRIPTION: This TypeScript snippet creates a server endpoint for user registration using Supabase in an Astro project.

LANGUAGE: typescript
CODE:
import type { APIRoute } from "astro";
import { supabase } from "../../../lib/supabase";

export const POST: APIRoute = async ({ request, redirect }) => {
  const formData = await request.formData();
  const email = formData.get("email")?.toString();
  const password = formData.get("password")?.toString();

  if (!email || !password) {
    return new Response("Email and password are required", { status: 400 });
  }

  const { error } = await supabase.auth.signUp({
    email,
    password,
  });

  if (error) {
    return new Response(error.message, { status: 500 });
  }

  return redirect("/signin");
};

----------------------------------------

TITLE: Astro Page Frontmatter Configuration
DESCRIPTION: YAML frontmatter configuration for the tutorial page defining metadata like type, title, and description

LANGUAGE: yaml
CODE:
---
type: tutorial
unitTitle: Create and deploy your first Astro site
title: 'Check in: Unit 1 - Setup'
description: >
  Tutorial: Build your first Astro blog —

  Prepare your development environment, and create and deploy your first Astro
  site
i18nReady: true
---

----------------------------------------

TITLE: Modifying Astro Page Content
DESCRIPTION: Example showing how to modify the page heading text from 'Astro' to 'My Astro Site' in the body section.

LANGUAGE: astro
CODE:
<body>
  <h1>Astro</h1>
  <h1>My Astro Site</h1>
</body>

----------------------------------------

TITLE: Using the Image Component for Optimization
DESCRIPTION: Example of using the Astro Image component to display optimized versions of local and remote images.

LANGUAGE: astro
CODE:
---
import { Image } from 'astro:assets';
import myImage from '../assets/my_image.png'; // Image est en 1600x900
---

<!-- `alt` est obligatoire pour le composant Image -->
<Image src={myImage} alt="La description de mon image." />

----------------------------------------

TITLE: Running Prettier Format Command
DESCRIPTION: Commands to run Prettier formatting on Astro files using different package managers.

LANGUAGE: shell
CODE:
npx prettier . --write

LANGUAGE: shell
CODE:
pnpm exec prettier . --write

LANGUAGE: shell
CODE:
yarn exec prettier . --write

----------------------------------------

TITLE: Configuring Server Host
DESCRIPTION: Set which network IP addresses the server should listen on.

LANGUAGE: js
CODE:
{
  server: { host: true }
}

----------------------------------------

TITLE: Using Transition Directives in Astro
DESCRIPTION: Apply transition directives to page elements for finer control over navigation behavior.

LANGUAGE: astro
CODE:
<aside transition:name="hero">

----------------------------------------

TITLE: Définition d'une action Astro acceptant des données de formulaire
DESCRIPTION: Définit une action 'newsletter' qui accepte et valide les données d'un formulaire d'inscription à une newsletter.

LANGUAGE: typescript
CODE:
import { defineAction } from 'astro:actions';
import { z } from 'astro:schema';

export const server = {
  newsletter: defineAction({
    accept: 'form',
    input: z.object({
      email: z.string().email(),
      terms: z.boolean(),
    }),
    handler: async ({ email, terms }) => { /* ... */ },
  })
}

----------------------------------------

TITLE: Creating User Sign-in Endpoint in Astro
DESCRIPTION: This TypeScript snippet creates a server endpoint for user sign-in using Supabase in an Astro project.

LANGUAGE: typescript
CODE:
import type { APIRoute } from "astro";
import { supabase } from "../../../lib/supabase";

export const POST: APIRoute = async ({ request, cookies, redirect }) => {
  const formData = await request.formData();
  const email = formData.get("email")?.toString();
  const password = formData.get("password")?.toString();

  if (!email || !password) {
    return new Response("Email and password are required", { status: 400 });
  }

  const { data, error } = await supabase.auth.signInWithPassword({
    email,
    password,
  });

  if (error) {
    return new Response(error.message, { status: 500 });
  }

  const { access_token, refresh_token } = data.session;
  cookies.set("sb-access-token", access_token, {
    path: "/",
  });
  cookies.set("sb-refresh-token", refresh_token, {
    path: "/",
  });
  return redirect("/dashboard");
};

----------------------------------------

TITLE: Configuring Sitemap Serialize Function
DESCRIPTION: Example of how to use the serialize function to customize sitemap entries.

LANGUAGE: javascript
CODE:
import { defineConfig } from 'astro/config';
import sitemap from '@astrojs/sitemap';

export default defineConfig({
  site: 'https://stargazers.club',
  integrations: [
    sitemap({
      serialize(item) {
        if (/exclude-from-sitemap/.test(item.url)) {
          return undefined;
        }
        if (/your-special-page/.test(item.url)) {
          item.changefreq = 'daily';
          item.lastmod = new Date();
          item.priority = 0.9;
        }
        return item;
      },
    }),
  ],
});

----------------------------------------

TITLE: Installing Playwright for testing Astro with Bun
DESCRIPTION: Set up Playwright for end-to-end testing in an Astro project using Bun.

LANGUAGE: bash
CODE:
bun create playwright

----------------------------------------

TITLE: Configuring Foreign Keys in Astro DB
DESCRIPTION: Example of setting up foreign key relationships between tables in Astro DB.

LANGUAGE: typescript
CODE:
import { defineTable, column } from 'astro:db';

const Author = defineTable({
   columns: {
     firstName: column.text(),
     lastName: column.text(),
   },
 });

 const Comment = defineTable({
   columns: {
     authorFirstName: column.text(),
     authorLastName: column.text(),
     body: column.text(),
   },
   foreignKeys: [
     {
       columns: ["authorFirstName", "authorLastName"],
       references: () => [Author.columns.firstName, Author.columns.lastName],
     },
   ],
 });

----------------------------------------

TITLE: Importing Warning Component in Astro
DESCRIPTION: Imports a DontEditWarning component to display on the error documentation page.

LANGUAGE: astro
CODE:
import DontEditWarning from '~/components/DontEditWarning.astro'

----------------------------------------

TITLE: Configuring Assets Directory
DESCRIPTION: Specify the directory for Astro-generated assets in the build output.

LANGUAGE: js
CODE:
{
  build: {
    assets: '_custom'
  }
}

----------------------------------------

TITLE: Removing Duplicate Meta Tag
DESCRIPTION: Demonstrates removing the redundant meta tag that is already included in BaseLayout.

LANGUAGE: astro
CODE:
---
import BaseLayout from './BaseLayout.astro';
const { frontmatter } = Astro.props;
---
<BaseLayout pageTitle={frontmatter.title}>
  <h1>{frontmatter.title}</h1>
  <p>{frontmatter.pubDate.toString().slice(0,10)}</p>
  <p><em>{frontmatter.description}</em></p>
  <p>Written by: {frontmatter.author}</p>
  <img src={frontmatter.image.url} width="300" alt={frontmatter.image.alt} />
  <slot />
</BaseLayout>

----------------------------------------

TITLE: Gestion des résultats d'action Astro côté serveur
DESCRIPTION: Illustre comment gérer les résultats d'une action Astro côté serveur, y compris la redirection et l'affichage des erreurs.

LANGUAGE: astro
CODE:
---
import { actions } from 'astro:actions';

const result = Astro.getActionResult(actions.createProduct);
if (result && !result.error) {
  return Astro.redirect(`/products/${result.data.id}`);
}
---

<form method="POST" action={actions.createProduct}>
  <!--...-->
</form>

----------------------------------------

TITLE: MDX Error Message Block
DESCRIPTION: Markdown block containing the error message displayed when the MDX integration is missing.

LANGUAGE: markdown
CODE:
> **MdxIntegrationMissingError**: Unable to render FILE. Ensure that the `@astrojs/mdx` integration is installed.

----------------------------------------

TITLE: Accepting Form Data in an Astro Action
DESCRIPTION: Example of configuring an Astro Action to accept form data instead of JSON. It sets the accept property to 'form' in the defineAction call.

LANGUAGE: typescript
CODE:
import { defineAction } from 'astro:actions';
import { z } from 'astro:schema';

export const server = {
  comment: defineAction({
    accept: 'form',
    input: z.object(/* ... */),
    handler: async (input) => { /* ... */ },
  })
}

----------------------------------------

TITLE: Configuring @astrojs/sitemap in Astro Config
DESCRIPTION: Example of how to import and add the sitemap integration to the Astro configuration file.

LANGUAGE: javascript
CODE:
import { defineConfig } from 'astro/config';
import sitemap from '@astrojs/sitemap';

export default defineConfig({
  // ...
  integrations: [sitemap()],
});

----------------------------------------

TITLE: Importing DontEditWarning Component in Astro
DESCRIPTION: Imports a warning component that indicates this file should not be directly edited as it is auto-generated.

LANGUAGE: astro
CODE:
import DontEditWarning from '~/components/DontEditWarning.astro'

----------------------------------------

TITLE: Configuring Table Indexes in Astro DB
DESCRIPTION: Example of defining table indexes to improve query performance for specific columns.

LANGUAGE: typescript
CODE:
import { defineTable, column } from 'astro:db';

const Comment = defineTable({
   columns: {
     authorId: column.number(),
     body: column.text(),
   },
   indexes: {
     author_idx: { on: ["authorId"], unique: true },
   },
 });

----------------------------------------

TITLE: Incorrect Middleware Implementation in Astro (TypeScript)
DESCRIPTION: This code snippet demonstrates an incorrect implementation of Astro middleware that doesn't return a Response or call the next function. It causes the 'MiddlewareNoDataOrNextCalled' error.

LANGUAGE: typescript
CODE:
import {defineMiddleware} from "astro:middleware";
export const onRequest = defineMiddleware((context, _) => {
	// doesn't return anything or call `next`
	context.locals.someData = false;
});

----------------------------------------

TITLE: Configuring Cache Directory
DESCRIPTION: Set the directory for caching build artifacts.

LANGUAGE: js
CODE:
{
  cacheDir: './my-custom-cache-directory'
}

----------------------------------------

TITLE: Enabling Serialized Configuration in Astro Config
DESCRIPTION: Configuration setup to enable the experimental serialized configuration feature in an Astro project by setting the serializeConfig flag.

LANGUAGE: javascript
CODE:
import { defineConfig } from "astro/config"

export default defineConfig({
  experimental: {
    serializeConfig: true
  }
})

----------------------------------------

TITLE: Initializing Custom Image Component in Astro
DESCRIPTION: Create a new Astro component and import the getImage function. Define the component's props for mobile and desktop image URLs and alt text.

LANGUAGE: astro
CODE:
---
import type { ImageMetadata } from "astro";
import { getImage } from "astro:assets";

interface Props {
    mobileImgUrl: string | ImageMetadata;
    desktopImgUrl: string | ImageMetadata;
    alt: string;
}

const { mobileImgUrl, desktopImgUrl, alt } = Astro.props;
---

----------------------------------------

TITLE: Pushing Schema Changes in Astro DB
DESCRIPTION: Push local schema changes to the remote database using the CLI command.

LANGUAGE: bash
CODE:
npm run astro db push --remote

----------------------------------------

TITLE: Configuring Astro Cache Directory
DESCRIPTION: Demonstrates how to set the cache directory for Astro builds.

LANGUAGE: javascript
CODE:
{
  cacheDir: './my-custom-cache-directory'
}

----------------------------------------

TITLE: Using DontEditWarning Component in Astro
DESCRIPTION: This snippet demonstrates the usage of the DontEditWarning component in the Astro file. It's a self-closing tag, indicating that the component is being rendered without any additional content.

LANGUAGE: astro
CODE:
<DontEditWarning />

----------------------------------------

TITLE: Customizing Swap Implementation
DESCRIPTION: Override the default swap implementation using the astro:before-swap event.

LANGUAGE: astro
CODE:
<script is:inline>
  document.addEventListener('astro:before-swap', event => {
    event.swap = () => {
      diff(document, event.newDocument);
    };
  });
</script>

----------------------------------------

TITLE: Implementing createExports for Serverless Hosts in JavaScript
DESCRIPTION: Demonstrates how to implement the createExports function in the server entrypoint file to export a handler function for serverless environments.

LANGUAGE: javascript
CODE:
import { App } from 'astro/app';

export function createExports(manifest) {
  const app = new App(manifest);

  const handler = (event, context) => {
    // ...
  };

  return { handler };
}

----------------------------------------

TITLE: Configuring Redirects
DESCRIPTION: Define redirect rules for your Astro site.

LANGUAGE: js
CODE:
export default defineConfig({
  redirects: {
   '/old': '/new',
   '/blog/[...slug]': '/articles/[...slug]',
   '/about': 'https://example.com/about',
   '/news': {
     status: 302,
     destination: 'https://example.com/news'
 	}
	}
})

----------------------------------------

TITLE: Customizing Vue DevTools in Astro Config
DESCRIPTION: Example of customizing Vue DevTools options in the Astro configuration, including setting a preferred editor.

LANGUAGE: javascript
CODE:
import { defineConfig } from "astro/config";
import vue from "@astrojs/vue";

export default defineConfig({
  // ...
  integrations: [
    vue({
      devtools: { launchEditor: "webstorm" },
    }),
  ],
});

----------------------------------------

TITLE: Использование компонента Image для оптимизации изображений
DESCRIPTION: Пример использования компонента Image для оптимизации и отображения изображения

LANGUAGE: astro
CODE:
---
// импортируем компонент Image и изображение
import { Image } from 'astro:assets';
import myImage from "../assets/my_image.png"; // Изображение имеет размер 1600x900
---

<!-- `alt` является обязательным для компонента Image -->
<Image src={myImage} alt="Описание моего изображения." />

----------------------------------------

TITLE: Using DontEditWarning Component in Markdown
DESCRIPTION: This snippet inserts the DontEditWarning component into the Markdown document, likely to display a warning message about not editing the file directly.

LANGUAGE: markdown
CODE:
<DontEditWarning />

----------------------------------------

TITLE: Adding Auth.js environment variables
DESCRIPTION: Setting up required environment variables for Auth.js in the .env file.

LANGUAGE: shell
CODE:
AUTH_TRUST_HOST=true
AUTH_SECRET=<my-auth-secret>

----------------------------------------

TITLE: Using getRelativeLocaleUrl in Astro
DESCRIPTION: This example demonstrates how to use the getRelativeLocaleUrl function to generate relative URLs for different locales and paths.

LANGUAGE: astro
CODE:
---
import { getRelativeLocaleUrl } from 'astro:i18n';

getRelativeLocaleUrl("fr");
// returns /fr

getRelativeLocaleUrl("fr", "");
// returns /fr/

getRelativeLocaleUrl("fr", "getting-started");
// returns /fr/getting-started

getRelativeLocaleUrl("fr_CA", "getting-started", {
  prependWith: "blog"
}); 
// returns /blog/fr-ca/getting-started

getRelativeLocaleUrl("fr_CA", "getting-started", {
  prependWith: "blog",
  normalizeLocale: false
}); 
// returns /blog/fr_CA/getting-started
---

----------------------------------------

TITLE: Configuring Server Options
DESCRIPTION: Customizes the development server settings for port and host.

LANGUAGE: js
CODE:
{
  server: { port: 1234, host: true},
}

----------------------------------------

TITLE: Implementing Dynamic Routing in Astro Endpoints
DESCRIPTION: This snippet demonstrates how to use dynamic routing in Astro endpoints. It exports a GET function and a getStaticPaths function to generate multiple endpoints based on parameters.

LANGUAGE: typescript
CODE:
import type { APIRoute } from 'astro';

const usuarios = ["Sarah", "Chris", "Yan", "Elian"]

export const GET: APIRoute = ({ params, request }) => {
  const id = params.id;
  return new Response(
    JSON.stringify({
      name: usuarios[id]
    })
  )
}

export function getStaticPaths() {
  return [ 
    { params: { id: "0"} },
    { params: { id: "1"} },
    { params: { id: "2"} },
    { params: { id: "3"} }
  ]
}

----------------------------------------

TITLE: Updating TypeScript Reference in env.d.ts
DESCRIPTION: Example of updating the TypeScript reference in the env.d.ts file.

LANGUAGE: typescript
CODE:
/// <reference types="@astrojs/image/client" />
/// <reference types="astro/client" />

----------------------------------------

TITLE: Setting Trailing Slash Behavior
DESCRIPTION: Configure how Astro handles trailing slashes in URLs.

LANGUAGE: js
CODE:
{
  // Example: Require trailing slashes during development
  trailingSlash: 'always'
}

----------------------------------------

TITLE: Installing @astrojs/vue Integration with Yarn
DESCRIPTION: Command to install the @astrojs/vue integration using yarn package manager.

LANGUAGE: sh
CODE:
yarn astro add vue

----------------------------------------

TITLE: Setting Site URL
DESCRIPTION: Configures the final URL where the site will be deployed, used for generating sitemaps and canonical URLs.

LANGUAGE: js
CODE:
{
  site: 'https://www.my-site.dev',
}

----------------------------------------

TITLE: Converting Gatsby Inline Styles to Astro
DESCRIPTION: Shows how to convert Gatsby's inline style objects to inline HTML style attributes in Astro.

LANGUAGE: astro
CODE:
<div style={{backgroundColor: `#f4f4f4`, padding: `1em`}}>{message}</div>
<div style="background-color: #f4f4f4; padding: 1em;">{message}</div>

----------------------------------------

TITLE: Setting SVG Component Attributes
DESCRIPTION: Example demonstrating how to pass standard SVG attributes to an SVG component.

LANGUAGE: astro
CODE:
---
import Logo from '../assets/logo.svg';
---

<Logo width={64} height={64} fill="currentColor" />

----------------------------------------

TITLE: Using Image Component in Astro
DESCRIPTION: Demonstrates how to use the built-in Image component for optimized image rendering with automatic width/height inference and CLS prevention

LANGUAGE: astro
CODE:
---
import { Image } from 'astro:assets';
import myImage from '../assets/my_image.png';
---
<Image src={myImage} alt="A description of my image." />

----------------------------------------

TITLE: Remote Image Configuration
DESCRIPTION: Shows how to configure authorized domains for remote image optimization in Astro config

LANGUAGE: typescript
CODE:
export default defineConfig({
  image: {
    domains: ["astro.build"],
  }
});

----------------------------------------

TITLE: Updating Image Import Path
DESCRIPTION: Example of updating the import path for an image file.

LANGUAGE: astro
CODE:
---
import rocket from '~/assets/rocket.png';
import rocket from '../../assets/rocket.png';
---

----------------------------------------

TITLE: Defining Astro Configuration
DESCRIPTION: Basic structure for defining Astro configuration using the defineConfig function.

LANGUAGE: js
CODE:
// astro.config.mjs
import { defineConfig } from 'astro/config'

export default defineConfig({
  // Your configuration here...
})

----------------------------------------

TITLE: Multiple JSX Framework Configuration
DESCRIPTION: Configuration example for using multiple JSX frameworks (React, Preact, Solid) together in an Astro project.

LANGUAGE: javascript
CODE:
import { defineConfig } from 'astro/config';
import preact from '@astrojs/preact';
import react from '@astrojs/react';
import solid from '@astrojs/solid-js';

export default defineConfig({
  integrations: [
    preact({
      include: ['**/preact/*'],
    }),
    react({
      include: ['**/react/*'],
    }),
    solid({
      include: ['**/solid/*', '**/node_modules/@suid/material/**'],
    }),
  ],
});

----------------------------------------

TITLE: Configuring Base Path
DESCRIPTION: Set the base path for your project, useful when deploying to a subdirectory.

LANGUAGE: js
CODE:
{
  base: '/docs'
}

----------------------------------------

TITLE: Correct Prerender Export Usage in JavaScript
DESCRIPTION: Demonstrates the correct way to use the prerender export in Astro projects, emphasizing the need for static analysis.

LANGUAGE: javascript
CODE:
export const prerender = true

----------------------------------------

TITLE: Building Astro Project for Production with yarn
DESCRIPTION: Command to build a production version of your Astro site using yarn, creating optimized files in a separate folder for deployment.

LANGUAGE: shell
CODE:
yarn run build

----------------------------------------

TITLE: Updating paginate() URL handling with base configuration
DESCRIPTION: Remove manual base value prepending as it's now automatically included in page.url

LANGUAGE: astro
CODE:
---
export async function getStaticPaths({ paginate }) {
  const astronautPages = [{
    astronaut: 'Neil Armstrong',
  }, {
    astronaut: 'Buzz Aldrin',
  }, {
    astronaut: 'Sally Ride',
  }, {
    astronaut: 'John Glenn',
  }];
  return paginate(astronautPages, { pageSize: 1 });
}
const { page } = Astro.props;
// `base: /'docs'` configured in `astro.config.mjs`
const prev = "/docs" + page.url.prev;
const prev = page.url.prev;
---
<a id="prev" href={prev}>Back</a>

----------------------------------------

TITLE: Handling Scripts in View Transitions
DESCRIPTION: Wrap existing scripts in event listeners to ensure they run at appropriate times during navigation.

LANGUAGE: javascript
CODE:
document.addEventListener('astro:page-load', () => {
  document.querySelector('.hamburger').addEventListener('click', () => {
    document.querySelector('.nav-links').classList.toggle('expanded');
  });
});

----------------------------------------

TITLE: Navegando entre páginas no Astro
DESCRIPTION: Demonstra como usar elementos <a> padrão do HTML para navegação entre rotas no Astro.

LANGUAGE: astro
CODE:
<p>Leia mais <a href="/sobre/">sobre</a> Astro!</p>

----------------------------------------

TITLE: Replacing getHeaders with getHeadings
DESCRIPTION: Changes to replace the deprecated getHeaders() Markdown export with getHeadings().

LANGUAGE: javascript
CODE:
const posts = await Astro.glob('../content/blog/*.mdx');
const firstPostHeadings = posts.at(0).getHeaders();
const firstPostHeadings = posts.at(0).getHeadings();

----------------------------------------

TITLE: Querying Content Collections in Astro
DESCRIPTION: Example of querying a content collection and using the results in an Astro component.

LANGUAGE: astro
CODE:
---
import { getCollection } from 'astro:content';
const posts = await getCollection('blog');
---
<h1>My posts</h1>
<ul>
  {posts.map(post => (
    <li><a href={`/blog/${post.id}`}>{post.data.title}</a></li>
  ))}
</ul>

----------------------------------------

TITLE: Dynamic Attributes in Astro
DESCRIPTION: Shows how to use variables for dynamic attribute values in both HTML elements and components.

LANGUAGE: astro
CODE:
---
const name = "Astro";
---
<h1 class={name}>Attribute expressions are supported</h1>

<MyComponent templateLiteralNameAttribute={`MyNameIs${name}`} />

----------------------------------------

TITLE: Adding Integrations
DESCRIPTION: Extend Astro's functionality with custom integrations.

LANGUAGE: js
CODE:
import react from '@astrojs/react';
import mdx from '@astrojs/mdx';
{
  // Example: Add React + MDX support
  integrations: [react(), mdx()]
}

----------------------------------------

TITLE: Defining TypeScript Props Interface
DESCRIPTION: TypeScript interface definition for component props including image path, alt text, name, and age.

LANGUAGE: astro
CODE:
---
import { Image } from 'astro:assets';

interface Props {
   imagePath: string;
   altText: string;
   name: string;
   age: number;
}

const { imagePath, altText, name, age } = Astro.props;
---

----------------------------------------

TITLE: TypeScript Interface for Preview Server
DESCRIPTION: Defines the TypeScript interface for the preview server object returned by the preview() function.

LANGUAGE: typescript
CODE:
export interface PreviewServer {
	host?: string;
	port: number;
	closed(): Promise<void>;
	stop(): Promise<void>;
}

----------------------------------------

TITLE: Creating a new Astro project
DESCRIPTION: Use the create astro command to start a new Astro project via the CLI wizard or using an official starter template.

LANGUAGE: shell
CODE:
# Start the Astro CLI wizard
npm create astro@latest

# Create a new project with an official example 
npm create astro@latest -- --template <example-name>

----------------------------------------

TITLE: Использование getCollection() для запроса коллекций контента
DESCRIPTION: Пример запроса всех записей из коллекции blog и фильтрации черновиков

LANGUAGE: astro
CODE:
---
import { getCollection } from 'astro:content';

// Получение всех записей `src/content/blog/`
const allBlogPosts = await getCollection('blog');

// Возвращаем только посты с `draft: true` во frontmatter
const draftBlogPosts = await getCollection('blog', ({ data }) => {
  return data.draft === true;
});
---

----------------------------------------

TITLE: Updating Type Reference in env.d.ts
DESCRIPTION: Changes to update the type reference in env.d.ts from astro/client-image to astro/client.

LANGUAGE: typescript
CODE:
  /// <reference types="astro/client-image" />
  /// <reference types="astro/client" />

----------------------------------------

TITLE: Использование Astro.redirect() для перенаправления
DESCRIPTION: Пример перенаправления пользователя на страницу входа, если он не авторизован

LANGUAGE: astro
CODE:
---
import { isLoggedIn } from '../utils';

const cookie = Astro.request.headers.get('cookie');

// Если пользователь не вошел в систему, перенаправьте его на страницу входа в систему
if (!isLoggedIn(cookie)) {
  return Astro.redirect('/login');
}
---

----------------------------------------

TITLE: Adding data-astro-reload Attribute to Opt Out of Form Submission Handling
DESCRIPTION: Changes to add the data-astro-reload attribute to form elements to opt out of automatic form submission handling with ViewTransitions.

LANGUAGE: astro
CODE:
<form action="/contact" data-astro-reload>
  <!-- -->
</form>

----------------------------------------

TITLE: Setting Source Directory
DESCRIPTION: Configure the directory where Astro will read your site from.

LANGUAGE: js
CODE:
{
  srcDir: './www'
}

----------------------------------------

TITLE: Correctly Structuring getStaticPaths Return Value in TypeScript
DESCRIPTION: This snippet demonstrates the correct way to structure the return value of getStaticPaths function in Astro. It should return an array of objects, each containing a params property with the necessary routing parameters.

LANGUAGE: typescript
CODE:
export async function getStaticPaths() {
	return [ // <-- Array
		{ params: { slug: "blog" } },
		{ params: { slug: "about" } }
	];
}

----------------------------------------

TITLE: Creating a Prose component for Tailwind Typography in Astro
DESCRIPTION: Astro component that wraps content with Tailwind Typography classes and element modifiers for styling Markdown content.

LANGUAGE: astro
CODE:
---
---
<div 
  class="prose dark:prose-invert 
  prose-h1:font-bold prose-h1:text-xl 
  prose-a:text-blue-600 prose-p:text-justify prose-img:rounded-xl 
  prose-headings:underline">
  <slot />
</div>

----------------------------------------

TITLE: Creating an Atom Store for Cart State
DESCRIPTION: Defines an atom store to manage the open/closed state of the cart flyout.

LANGUAGE: javascript
CODE:
import { atom } from 'nanostores';

export const isCartOpen = atom(false);

----------------------------------------

TITLE: Implementing Client-Side reCAPTCHA Verification in Astro
DESCRIPTION: This Astro component sets up the client-side implementation of reCAPTCHA. It includes the reCAPTCHA script, a button with reCAPTCHA attributes, and a JavaScript function to handle the verification process by sending the token to the server endpoint.

LANGUAGE: astro
CODE:
<html>
  <head>
    <script is:inline src="https://www.google.com/recaptcha/api.js"></script>
  </head>

  <body>
    <button class="g-recaptcha" 
      data-sitekey="PUBLIC_SITE_KEY" 
      data-callback="onSubmit" 
      data-action="submit"> Click me to verify the captcha challenge! </button>

    <script is:inline>
      function onSubmit(token) {
        fetch("/recaptcha", {
          method: "POST",
          body: JSON.stringify({ recaptcha: token })
        })
        .then((response) => response.json())
        .then((gResponse) => {
          if (gResponse.success) {
            // La verifica Captcha è riuscita
          } else {
            // La verifica Captcha è fallita
          }
        })
      }
    </script>
  </body>
</html>

----------------------------------------

TITLE: Converting Nuxt Pokémon data fetching to Astro
DESCRIPTION: A complete example of converting a Nuxt page that fetches Pokémon data to an equivalent Astro page.

LANGUAGE: vue
CODE:
<template>
  <ul class="plain-list pokeList">
    <li v-for="pokemon of pokemons" class="pokemonListItem" :key="pokemon.name">
      <NuxtLink class="pokemonContainer" :to="`/pokemon/${pokemon.name}`">
        <p class="pokemonId">No. {{pokemon.id}}</p>
        <img
          class="pokemonImage"
          :src="`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${pokemon.id}.png`" 
          :alt="`${pokemon.name} picture`"/>
        <h2 class="pokemonName">{{pokemon.name}}</h2>
      </NuxtLink>
    </li>
  </ul>
</template>

<script>
import Vue from 'vue'
export default Vue.extend({
  name: 'IndexPage',
  layout: 'default',
  async asyncData() {
    const res = await fetch("https://pokeapi.co/api/v2/pokemon?limit=151")
    const resJson = await res.json();
    const pokemons = resJson.results.map(pokemon => {
        const name = pokemon.name;
        // https://pokeapi.co/api/v2/pokemon/1/
        const url = pokemon.url;
        const id = url.split("/")[url.split("/").length - 2];
        return {
            name,
            url,
            id
        }
    });
    return {
      pokemons,
    }
  },
  head() {
    return {
      title: "Pokedex: Generation 1"
    }
  }
});
</script>

<style scoped>
.pokeList {
  display: grid;
  grid-template-columns: repeat( auto-fit, minmax(250px, 1fr) );
  gap: 1rem;
}

/* ... */
</style>

LANGUAGE: astro
CODE:
---
import Layout from '../layouts/layout.astro';

const res = await fetch("https://pokeapi.co/api/v2/pokemon?limit=151");
const resJson = await res.json();
const pokemons = resJson.results.map(pokemon => {
    const name = pokemon.name;
    // https://pokeapi.co/api/v2/pokemon/1/
    const url = pokemon.url;
    const id = url.split("/")[url.split("/").length - 2];
    return {
        name,
        url,
        id
    }
});
---

<Layout title="Pokedex: Generation 1">
  <ul class="plain-list pokeList">
    {pokemons.map((pokemon) => (
      <li class="pokemonListItem" key={pokemon.name}>
        <a class="pokemonContainer" href={`/pokemon/${pokemon.name}`}>
          <p class="pokemonId">No. {pokemon.id}</p>
          <img class="pokemonImage" src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${pokemon.id}.png`} alt={`${pokemon.name} picture`}/>
          <h2 class="pokemonName">{pokemon.name}</h2>
        </a>
      </li>
    ))}
  </ul>
</Layout>

<style>
.pokeList {
  display: grid;
  grid-template-columns: repeat( auto-fit, minmax(250px, 1fr) );
  gap: 1rem;
}

/* ... */
</style>

----------------------------------------

TITLE: Updating context.locals handling in middleware
DESCRIPTION: Update middleware to append values to existing locals object instead of replacing it

LANGUAGE: js
CODE:
ctx.locals = {
Object.assign(ctx.locals, {
  one: 1,
  two: 2
}
})

----------------------------------------

TITLE: Definindo rotas dinâmicas em Astro
DESCRIPTION: Mostra como criar rotas dinâmicas usando getStaticPaths() para gerar múltiplas páginas a partir de um único arquivo.

LANGUAGE: astro
CODE:
---
export function getStaticPaths() {
  return [
    {params: {cachorro: 'clifford'}},
    {params: {cachorro: 'rover'}},
    {params: {cachorro: 'spot'}},
  ];
}

const { cachorro } = Astro.params;
---
<div>Bom garoto, {cachorro}!</div>

----------------------------------------

TITLE: Configuring Astro with Reading Time Plugin
DESCRIPTION: Configuration setup to enable the reading time plugin in Astro project

LANGUAGE: javascript
CODE:
import { defineConfig } from 'astro/config';
import { remarkReadingTime } from './remark-reading-time.mjs';

export default defineConfig({
  markdown: {
    remarkPlugins: [remarkReadingTime],
  },
});

----------------------------------------

TITLE: Configuring Security Options
DESCRIPTION: Enable security measures for Astro websites.

LANGUAGE: js
CODE:
// astro.config.mjs
export default defineConfig({
  output: "server",
  security: {
    checkOrigin: false
  }
})

----------------------------------------

TITLE: NGINX Docker Configuration
DESCRIPTION: Dockerfile configuration for serving Astro sites using NGINX on port 8080

LANGUAGE: docker
CODE:
FROM node:lts AS build
WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .
RUN npm run build

FROM nginx:alpine AS runtime
COPY ./nginx/nginx.conf /etc/nginx/nginx.conf
COPY --from=build /app/dist /usr/share/nginx/html
EXPOSE 8080

----------------------------------------

TITLE: Initializing Astro Component Project with NPM
DESCRIPTION: Command to create a new Astro component project using the official component template. This sets up the initial project structure and configuration.

LANGUAGE: bash
CODE:
npm create astro@latest my-new-component-directory -- --template component

----------------------------------------

TITLE: Updating compiledContent() usage for Markdown imports
DESCRIPTION: Update code to use await when calling compiledContent() on Markdown imports

LANGUAGE: astro
CODE:
---
import * as myPost from "../blog/post.md";

const content = myPost.compiledContent();
const content = await myPost.compiledContent();
---

<Fragment set:html={content} />

----------------------------------------

TITLE: Using Images in Markdown Files
DESCRIPTION: Examples of using images in Markdown files with standard Markdown syntax.

LANGUAGE: markdown
CODE:
<!-- src/pages/post-1.md -->

# Ma Page Markdown

<!-- Image locale stockée dans src/assets/ -->
<!-- Utiliser un chemin d'accès relatif ou un alias d'importation -->
![Un ciel étoilé.](../assets/stars.png)

<!-- Image stockée dans public/images/ -->
<!-- Utiliser le chemin d'accès relatif à public/ -->
![Un ciel étoilé.](/images/stars.png)

<!-- Image distante sur un autre serveur -->
<!-- Utiliser l'URL complète de l'image -->
![Astro](https://example.com/images/remote-image.png)

----------------------------------------

TITLE: Configuring Astro Image Service
DESCRIPTION: Shows how to set the image service for Astro's assets support.

LANGUAGE: javascript
CODE:
{
  image: {
    // Example: Enable the Sharp-based image service with a custom config
    service: {
			 entrypoint: 'astro/assets/services/sharp',
			 config: {
				 limitInputPixels: false,
      },
		 },
  },
}

----------------------------------------

TITLE: Configuring Inline Stylesheets
DESCRIPTION: Control whether project styles are sent as separate CSS files or inlined into <style> tags.

LANGUAGE: js
CODE:
{
	build: {
		inlineStylesheets: `never`,
	},
}

----------------------------------------

TITLE: Example Error Message in Markdown
DESCRIPTION: Demonstrates the format of the error message when frontmatter doesn't match the collection schema. It shows which file caused the error and specifies the validation issues.

LANGUAGE: markdown
CODE:
> **Example error message:**<br/>
**blog** → **post.md** frontmatter does not match collection schema.<br/>
"title" is required.<br/>
"date" must be a valid date.

----------------------------------------

TITLE: Astro Partial Page Implementation
DESCRIPTION: Shows how to create a partial page component that can be dynamically loaded.

LANGUAGE: astro
CODE:
---
export const partial = true;
---
<li>I'm a partial!</li>

----------------------------------------

TITLE: Using the Picture Component for Responsive Images
DESCRIPTION: Example of using the Astro Picture component to create responsive images with multiple formats and sizes.

LANGUAGE: astro
CODE:
---
import { Picture } from 'astro:assets';
import myImage from '../assets/my_image.png'; // Image est de 1600x900
---

<!-- `alt` est obligatoire pour le composant Image -->
<Picture src={myImage} formats={['avif', 'webp']} alt="Une description de mon image." />

----------------------------------------

TITLE: Updating package.json for Wrangler Preview
DESCRIPTION: This snippet shows how to modify the preview script in package.json to use Wrangler for local preview instead of Astro's built-in preview command.

LANGUAGE: json
CODE:
"preview": "wrangler pages dev ./dist"

----------------------------------------

TITLE: Specifying Prefetch Strategy for Individual Links
DESCRIPTION: Demonstrates how to set a specific prefetch strategy for an individual link using the data-astro-prefetch attribute.

LANGUAGE: html
CODE:
<a href="/about" data-astro-prefetch="tap">About</a>


----------------------------------------

TITLE: Initializing Firebase Server-Side in Astro
DESCRIPTION: Sets up the Firebase Admin SDK on the server-side using environment variables for secure configuration.

LANGUAGE: typescript
CODE:
import type { ServiceAccount } from "firebase-admin";
import { initializeApp, cert, getApps } from "firebase-admin/app";

const activeApps = getApps();
const serviceAccount = {
  type: "service_account",
  project_id: import.meta.env.FIREBASE_PROJECT_ID,
  private_key_id: import.meta.env.FIREBASE_PRIVATE_KEY_ID,
  private_key: import.meta.env.FIREBASE_PRIVATE_KEY,
  client_email: import.meta.env.FIREBASE_CLIENT_EMAIL,
  client_id: import.meta.env.FIREBASE_CLIENT_ID,
  auth_uri: import.meta.env.FIREBASE_AUTH_URI,
  token_uri: import.meta.env.FIREBASE_TOKEN_URI,
  auth_provider_x509_cert_url: import.meta.env.FIREBASE_AUTH_CERT_URL,
  client_x509_cert_url: import.meta.env.FIREBASE_CLIENT_CERT_URL,
};

const initApp = () => {
  if (import.meta.env.PROD) {
    console.info('cPROD env détecté. Utilisation du compte de service par défaut.')
    return initializeApp()
  }
  console.info("Chargement du compte de service à partir de l'environnement.")
  return initializeApp({
    credential: cert(serviceAccount as ServiceAccount)
  })
}

export const app = activeApps.length === 0 ? initApp() : activeApps[0];

----------------------------------------

TITLE: Using DontEditWarning Component in Astro
DESCRIPTION: This snippet demonstrates the usage of the DontEditWarning component in the Astro file. It's a self-closing tag, indicating that the component doesn't accept any children or props.

LANGUAGE: astro
CODE:
<DontEditWarning />

----------------------------------------

TITLE: Setting Response Status and Headers with Astro.response
DESCRIPTION: Examples of setting response status, status text, and headers using Astro.response.

LANGUAGE: astro
CODE:
---
if(condition) {
  Astro.response.status = 404;
  Astro.response.statusText = 'Not found';
}
---

LANGUAGE: astro
CODE:
---
Astro.response.headers.set('Set-Cookie', 'a=b; Path=/;');
---

----------------------------------------

TITLE: Pushing Astro DB Schema Changes to Remote Database
DESCRIPTION: Shows how to push local schema changes to a remote Astro DB database using the CLI command.

LANGUAGE: bash
CODE:
astro db push --remote

----------------------------------------

TITLE: Using the Image Component for Optimized Images
DESCRIPTION: Demonstrates how to use the built-in Image component to display and optimize images.

LANGUAGE: astro
CODE:
---
// Importa el componente Image y la imagen
import { Image } from 'astro:assets';
import myImage from "../assets/my_image.png"; // La imagen es 1600x900
---
<!-- `alt` es obligatorio en el componente Image -->
<Image src={myImage} alt="Una descripción de mi imagen." />

----------------------------------------

TITLE: Using Warning Component in Astro
DESCRIPTION: Usage of the DontEditWarning component in the error documentation page.

LANGUAGE: astro
CODE:
<DontEditWarning />

----------------------------------------

TITLE: Configuring i18n Routing in Astro
DESCRIPTION: Set up basic i18n configuration in the Astro config file, specifying the default locale and supported locales.

LANGUAGE: javascript
CODE:
import { defineConfig } from "astro/config"
export default defineConfig({
  i18n: {
    defaultLocale: "en",
    locales: ["es", "en", "pt-br"],
  }
})

----------------------------------------

TITLE: Initializing Firebase Admin SDK in Astro
DESCRIPTION: Sets up the Firebase Admin SDK for server-side operations using environment variables for credentials.

LANGUAGE: typescript
CODE:
import type { ServiceAccount } from "firebase-admin";
import { initializeApp, cert, getApps } from "firebase-admin/app";

const activeApps = getApps();
const serviceAccount = {
  type: "service_account",
  project_id: import.meta.env.FIREBASE_PROJECT_ID,
  private_key_id: import.meta.env.FIREBASE_PRIVATE_KEY_ID,
  private_key: import.meta.env.FIREBASE_PRIVATE_KEY,
  client_email: import.meta.env.FIREBASE_CLIENT_EMAIL,
  client_id: import.meta.env.FIREBASE_CLIENT_ID,
  auth_uri: import.meta.env.FIREBASE_AUTH_URI,
  token_uri: import.meta.env.FIREBASE_TOKEN_URI,
  auth_provider_x509_cert_url: import.meta.env.FIREBASE_AUTH_CERT_URL,
  client_x509_cert_url: import.meta.env.FIREBASE_CLIENT_CERT_URL,
};

const initApp = () => {
  if (import.meta.env.PROD) {
    console.info('PROD env detected. Using default service account.')
    return initializeApp()
  }
  console.info('Loading service account from env.')
  return initializeApp({
    credential: cert(serviceAccount as ServiceAccount)
  })
}

export const app = activeApps.length === 0 ? initApp() : activeApps[0];

----------------------------------------

TITLE: Generated HTML With Experimental Flag
DESCRIPTION: This HTML snippet demonstrates how Astro generates the heading ID with the experimental flag enabled. The trailing hyphen is retained, making it compatible with platforms like GitHub.

LANGUAGE: html
CODE:
<h2 id="picture-"><code>&lt;Picture /&gt;</h2>

----------------------------------------

TITLE: Initializing Firebase Client in Astro
DESCRIPTION: Initializes the Firebase client-side SDK using configuration from the web app credentials.

LANGUAGE: typescript
CODE:
import { initializeApp } from "firebase/app";

const firebaseConfig = {
  apiKey: "mi-clave-publica-de-la-api",
  authDomain: "mi-dominio-autentificado",
  projectId: "el-id-de-mi-proyecto",
  storageBucket: "mi-bucket-de-almacenamiento",
  messagingSenderId: "el-id-de-mi-emisor",
  appId: "el-id-de-mi-app",
};

export const app = initializeApp(firebaseConfig);

----------------------------------------

TITLE: Example Markdown Heading with Special Characters
DESCRIPTION: This snippet demonstrates a Markdown heading that contains special characters, which is used to illustrate the difference in ID generation with and without the experimental flag.

LANGUAGE: markdown
CODE:
## `<Picture />`

----------------------------------------

TITLE: Adding Layout Property to Markdown Frontmatter
DESCRIPTION: This snippet shows how to specify a layout for a Markdown blog post by adding the layout property to the frontmatter. It also includes other common frontmatter properties for a blog post.

LANGUAGE: markdown
CODE:
---
layout: ../../layouts/MarkdownPostLayout.astro
title: 'My First Blog Post'
pubDate: 2022-07-01
description: 'This is the first post of my new Astro blog.'
author: 'Astro Learner'
image:
    url: 'https://docs.astro.build/assets/rose.webp' 
    alt: 'The Astro logo on a dark background with a pink glow.'
tags: ["astro", "blogging", "learning in public"]
---

----------------------------------------

TITLE: Adding ClientRouter to a Common Head Component
DESCRIPTION: Import and add the ClientRouter component to a shared head component for site-wide view transitions.

LANGUAGE: astro
CODE:
---
import { ClientRouter } from 'astro:transitions';
---
<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
<meta name="generator" content={Astro.generator} />

<!-- 기본 메타 태그 -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />

<ClientRouter />

----------------------------------------

TITLE: Using Custom Image Component in Astro Page
DESCRIPTION: Import and use the custom image component in an Astro page, passing the required props for mobile and desktop images.

LANGUAGE: astro
CODE:
---
import MyCustomImageComponent from "../components/MyCustomImageComponent.astro";
import mobileImage from "../images/mobile-profile-image.jpg";
import desktopImage from "../images/desktop-profile-image.jpg";
---

<MyCustomImageComponent
    mobileImgUrl={mobileImage}
    desktopImgUrl={desktopImage}
    alt="imagem de perfil do usuário"
/>

----------------------------------------

TITLE: Accès aux propriétés du composant dans Astro
DESCRIPTION: Exemple d'accès aux propriétés transmises à un composant Astro via l'objet Astro.props.

LANGUAGE: astro
CODE:
---
// src/components/Heading.astro
const { title, date } = Astro.props;
---
<div>
  <h1>{title}</h1>
  <p>{date}</p>
</div>

----------------------------------------

TITLE: 定义基本的Astro集成
DESCRIPTION: 展示了一个基本的Astro集成结构,包括name属性和hooks对象。

LANGUAGE: typescript
CODE:
interface AstroIntegration {
  name: string;
  hooks: {
    // 各种钩子函数
  };
}

----------------------------------------

TITLE: Использование Astro.glob() для загрузки локальных файлов
DESCRIPTION: Пример использования Astro.glob() для загрузки нескольких файлов Markdown и отображения их содержимого

LANGUAGE: astro
CODE:
---
// src/components/my-component.astro
const posts = await Astro.glob('../pages/post/*.md'); // returns an array of posts that live at ./src/pages/post/*.md
---

<div>
{posts.slice(0, 3).map((post) => (
  <article>
    <h2>{post.frontmatter.title}</h2>
    <p>{post.frontmatter.description}</p>
    <a href={post.url}>Read more</a>
  </article>
))}
</div>

----------------------------------------

TITLE: Importing DontEditWarning Component in Astro
DESCRIPTION: This snippet imports a DontEditWarning component from the components directory. It's likely used to display a warning message about not editing the auto-generated file.

LANGUAGE: astro
CODE:
import DontEditWarning from '~/components/DontEditWarning.astro'

----------------------------------------

TITLE: Importing DontEditWarning Component in Astro
DESCRIPTION: This code snippet imports a custom Astro component named DontEditWarning, likely used to display a warning message about not editing the auto-generated file.

LANGUAGE: astro
CODE:
import DontEditWarning from '~/components/DontEditWarning.astro'

----------------------------------------

TITLE: Importing Warning Component in Astro
DESCRIPTION: Imports a DontEditWarning component from the components directory.

LANGUAGE: astro
CODE:
import DontEditWarning from '~/components/DontEditWarning.astro'

----------------------------------------

TITLE: Installing Astro Blog Template using Package Managers
DESCRIPTION: Commands to create a new Astro project using the blog template starter through different package managers (npm, pnpm, yarn).

LANGUAGE: shell
CODE:
npm create astro@latest -- --template blog

LANGUAGE: shell
CODE:
pnpm create astro@latest --template blog

LANGUAGE: shell
CODE:
yarn create astro --template blog

----------------------------------------

TITLE: Creating a New Astro Project
DESCRIPTION: Commands to create a new Astro project using npm, pnpm, or yarn package managers.

LANGUAGE: shell
CODE:
# launch the Astro CLI Wizard 
npm create astro@latest

# create a new project with an official example
npm create astro@latest -- --template <example-name>

LANGUAGE: shell
CODE:
# launch the Astro CLI Wizard 
pnpm create astro@latest

# create a new project with an official example
pnpm create astro@latest --template <example-name>

LANGUAGE: shell
CODE:
# launch the Astro CLI Wizard 
yarn create astro@latest

# create a new project with an official example
yarn create astro@latest --template <example-name>

----------------------------------------

TITLE: Creating an Astro Project from Blog Template using npm
DESCRIPTION: This command creates a new Astro project using the blog template starter. It utilizes the npm package manager to initialize the project.

LANGUAGE: shell
CODE:
npm create astro@latest -- --template blog

----------------------------------------

TITLE: Installing Astro Starlight Template using pnpm
DESCRIPTION: Command to create a new Astro project using the Starlight docs theme starter template with pnpm.

LANGUAGE: shell
CODE:
pnpm create astro@latest --template starlight

----------------------------------------

TITLE: Installing Astro DB Integration via Package Manager
DESCRIPTION: Commands to install the Astro DB integration using different package managers (npm, pnpm, yarn).

LANGUAGE: shell
CODE:
npx astro add db

LANGUAGE: shell
CODE:
pnpm astro add db

LANGUAGE: shell
CODE:
yarn astro add db