TITLE: Implementing Dev Server Middleware in React Native
DESCRIPTION: This snippet demonstrates how to use the createDevMiddleware API to attach middleware to a dev server like Metro. It shows the setup of middleware and WebSocket endpoints for React Native development features.

LANGUAGE: javascript
CODE:
import { createDevMiddleware } from '@react-native/dev-middleware';

function myDevServerImpl(args) {
  ...

  const {middleware, websocketEndpoints} = createDevMiddleware({
    projectRoot: metroConfig.projectRoot,
    serverBaseUrl: `http://${args.host}:${args.port}`,
    logger,
  });

  await Metro.runServer(metroConfig, {
    host: args.host,
    ...,
    unstable_extraMiddleware: [
      middleware,
      // Optionally extend with additional HTTP middleware
    ],
    websocketEndpoints: {
      ...websocketEndpoints,
      // Optionally extend with additional WebSocket endpoints
    },
  });
}

----------------------------------------

TITLE: Importing Debugger Frontend Path in JavaScript
DESCRIPTION: Demonstrates how to import and use the debugger frontend path from the package. The frontendPath variable contains the absolute path to the directory with frontend assets.

LANGUAGE: javascript
CODE:
const frontendPath = require('@react-native/debugger-frontend');

// Pass frontendPath to a static server, etc

----------------------------------------

TITLE: Starting React Native Development Server with CLI
DESCRIPTION: This command starts the React Native development server using the community CLI plugin. It accepts various options to customize the server configuration.

LANGUAGE: sh
CODE:
npx @react-native-community/cli start [options]

----------------------------------------

TITLE: Installing @react-native/babel-plugin-codegen with Yarn
DESCRIPTION: This command installs the necessary dependencies for @react-native/babel-plugin-codegen using Yarn. It includes @babel/core as a development dependency.

LANGUAGE: bash
CODE:
yarn add --dev @babel/core @react-native/babel-plugin-codegen

----------------------------------------

TITLE: Defining Feature Flags Configuration in JavaScript
DESCRIPTION: Example of how to define feature flags in the ReactNativeFeatureFlags.config.js file, showing both common and JS-only flag definitions with descriptions and default values.

LANGUAGE: javascript
CODE:
module.exports = {
  common: {
    enableNativeBehavior: {
      description: 'Enable some behavior both in native and in JS.',
      defaultValue: false
    }
  },
  jsOnly: {
    enableJSBehavior: {
      description: 'Enables some behavior in the JS layer.',
      defaultValue: false
    }
  }
};

----------------------------------------

TITLE: Configuring ESLint for React Native Plugin
DESCRIPTION: JSON configuration to add the @react-native plugin to the ESLint configuration. This should be added to the .eslintrc file or the eslintConfig field in package.json.

LANGUAGE: json
CODE:
{
    "plugins": ["@react-native"]
}

----------------------------------------

TITLE: Configuring ESLint for React Native
DESCRIPTION: JSON configuration to extend the React Native ESLint rules in your project's .eslintrc file or package.json eslintConfig field.

LANGUAGE: json
CODE:
{
    "extends": "@react-native"
}

----------------------------------------

TITLE: Building React Native Bundle with CLI
DESCRIPTION: This command builds the bundle for a React Native application using the community CLI plugin. It requires specifying an entry file and accepts various options to customize the build process.

LANGUAGE: sh
CODE:
npx @react-native-community/cli bundle --entry-file <path> [options]

----------------------------------------

TITLE: Running Danger CLI for React Native Pull Requests
DESCRIPTION: This command demonstrates how to use the Danger CLI to analyze a GitHub pull request for the React Native project. It requires a GitHub Public Access Token (PAT) to be set as an environment variable.

LANGUAGE: bash
CODE:
DANGER_GITHUB_API_TOKEN=ghp_<REDACTED> yarn danger pr https://github.com/facebook/react-native/pull/1234

----------------------------------------

TITLE: Installing React Native ESLint Config Dependencies
DESCRIPTION: Command to install the required dependencies including ESLint, Prettier, and the React Native ESLint configuration using Yarn package manager.

LANGUAGE: bash
CODE:
yarn add --dev eslint prettier @react-native/eslint-config

----------------------------------------

TITLE: Initializing React Native Project for RNTester
DESCRIPTION: Commands to clone the React Native repository and install dependencies for the RNTester project.

LANGUAGE: sh
CODE:
git clone https://github.com/facebook/react-native.git
cd react-native
yarn install

----------------------------------------

TITLE: Accessing Feature Flags in JavaScript
DESCRIPTION: Example of how to access both common and JS-only feature flags in JavaScript code.

LANGUAGE: javascript
CODE:
import * as ReactNativeFeatureFlags from 'react-native/src/private/featureflags/ReactNativeFeatureFlags';

if (ReactNativeFeatureFlags.enableNativeBehavior()) {
  // Native flag
}

if (ReactNativeFeatureFlags.enableJSBehavior()) {
  // JS-only flag
}

----------------------------------------

TITLE: Accessing Feature Flags in JavaScript
DESCRIPTION: Example of how to access both common and JS-only feature flags in JavaScript code.

LANGUAGE: javascript
CODE:
import * as ReactNativeFeatureFlags from 'react-native/src/private/featureflags/ReactNativeFeatureFlags';

if (ReactNativeFeatureFlags.enableNativeBehavior()) {
  // Native flag
}

if (ReactNativeFeatureFlags.enableJSBehavior()) {
  // JS-only flag
}

----------------------------------------

TITLE: Using Android Clean Command in Terminal
DESCRIPTION: Example of how to use the implemented Android clean command from the terminal, showing the expected output format.

LANGUAGE: bash
CODE:
$ ./fancy-framework android clean
üßπ let me clean your Android caches
    Gradle: // a bunch of gradle output
    Gradle: ....

----------------------------------------

TITLE: Defining React and React Native Dependencies in package.json
DESCRIPTION: This snippet shows how React and React Native versions are aligned in the package.json file of a new app template. It uses React Native version 0.68.1 as an example.

LANGUAGE: json
CODE:
  "dependencies": {
    "react": "17.0.2",
    "react-native": "0.68.1"
  },

----------------------------------------

TITLE: Installing @react-native/virtualized-lists using Yarn
DESCRIPTION: Command to install the @react-native/virtualized-lists package using Yarn package manager. This is the recommended installation method for the package.

LANGUAGE: bash
CODE:
yarn add @react-native/virtualized-lists

----------------------------------------

TITLE: React Native Release Commands Overview
DESCRIPTION: Markdown documentation outlining three main release management commands: create-release-commit for triggering new releases, set-version for bumping package versions across workspaces, and set-rn-artifacts-version for updating native files (deprecated).

LANGUAGE: markdown
CODE:
# scripts/releases

Scripts related to creating a React Native release. These are the lower level entry points used by [**scripts/releases-ci**](https://github.com/facebook/react-native/tree/main/scripts/releases-ci).

## Commands

For information on command arguments, run `node <command> --help`.

### `create-release-commit`

Creates a release commit to trigger a new release.

### `set-version`

Bump the version of all packages.

- Updates `package.json` metadata for all workspaces and the project root.
- Updates relevant native files in the `react-native` package.

If `--skipReactNativeVersion` is passed, the `react-native` package version will be left unmodified as `"1000.0.0"` (special static version on `main`), and native files will not be touched.

### `set-rn-artifacts-version`

> [!Note]
> **Deprecated**: Prefer `set-version`. This entry point is a subset of `set-version`, and is used only by test workflows. We will replace these call sites in future.

----------------------------------------

TITLE: Implementing Android Clean Command with React Native CLI Utils
DESCRIPTION: Demonstrates how to create an Android clean command using commander.js and @react-native/core-cli-utils. The code sets up a CLI command that cleans Android build caches with error handling and logging.

LANGUAGE: javascript
CODE:
import { Command } from 'commander';
import cli from '@react-native/core-cli-utils';
import debug from 'debug';

const android = new Command('android');

const frameworkFindsAndroidSrcDir = "...";
const tasks = cli.clean.android(frameworkFindsAndroidSrcDir);
const log = debug('fancy-framework:android');

android
    .command('clean')
    .description(cli.clean.android)
    .action(async () => {
        const log = debug('fancy-framework:android:clean');
        log(`üßπ let me clean your Android caches`);
        // Add other caches your framework needs besides the normal React Native caches
        // here.
        for (const task of tasks) {
            try {
                log(`\t ${task.label}`);
                // See: https://github.com/sindresorhus/execa#lines
                const {stdout} = await task.action({ lines: true })
                log(stdout.join('\n\tGradle: '));
            } catch (e) {
                log(`\t ‚ö†Ô∏è whoops: ${e.message}`);
            }
        }
    });

----------------------------------------

TITLE: Configuring Hermes Executor Build in CMake for React Native
DESCRIPTION: This CMake script sets up the build configuration for the Hermes executor in React Native. It defines the hermes_executor_common library, sets include directories, links necessary dependencies, and configures compiler options based on the build type.

LANGUAGE: CMake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB_RECURSE hermes_executor_SRC CONFIGURE_DEPENDS *.cpp)
add_library(
        hermes_executor_common
        OBJECT
        ${hermes_executor_SRC}
)
target_include_directories(hermes_executor_common PUBLIC .)
target_link_libraries(hermes_executor_common
        hermes-engine::libhermes
        hermes_inspector_modern
        jsi
        reactnative
)

target_compile_reactnative_options(hermes_executor_common PRIVATE)
if(${CMAKE_BUILD_TYPE} MATCHES Debug)
        target_compile_options(
                hermes_executor_common
                PRIVATE
                -DHERMES_ENABLE_DEBUGGER=1
        )
else()
        target_compile_options(
                hermes_executor_common
                PRIVATE
                -DNDEBUG
        )
endif()

----------------------------------------

TITLE: Installing React Native JS Polyfills Package
DESCRIPTION: Command to install the @react-native/js-polyfills package using Yarn package manager.

LANGUAGE: bash
CODE:
yarn add @react-native/js-polyfills

----------------------------------------

TITLE: Configuring JSI Library Build with CMake
DESCRIPTION: Sets up CMake configuration for building the JSI (JavaScript Interface) shared library. Includes compilation flags, source file globbing, and linking with dependencies like folly_runtime and glog.

LANGUAGE: cmake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB jsi_SRC CONFIGURE_DEPENDS jsi/*.cpp)
add_library(jsi SHARED ${jsi_SRC})

target_include_directories(jsi PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})

target_link_libraries(jsi
        folly_runtime
        glog)

target_compile_reactnative_options(jsi PRIVATE "ReactNative")
target_compile_options(jsi PRIVATE -O3 -Wno-unused-lambda-capture)

----------------------------------------

TITLE: CI Release Script Commands Documentation
DESCRIPTION: Documentation of three main CI commands used in React Native release process: prepare-package-for-release for preparing files and creating release commits, publish-npm for publishing the main package, and publish-updated-packages for publishing related packages when triggered.

LANGUAGE: markdown
CODE:
# scripts/releases-ci

CI-only release scripts ‚Äî intended to run from a CI workflow (GitHub Actions).

## Commands

For information on command arguments, run `node <command> --help`.

### `prepare-package-for-release`

Prepares files within the `react-native` package and template for the target release version. Writes a new commit and tag, which will trigger `publish-npm.js` in a new workflow.

### `publish-npm`

Prepares release artifacts and publishes the `react-native` package to npm.

### `publish-updated-packages`

Publishes all updated packages (excluding `react-native`) to npm. Triggered when a commit on a release branch contains `#publish-packages-to-npm`.

----------------------------------------

TITLE: Configuring Yoga Core CMake Build
DESCRIPTION: Sets up the CMake project for building the Yoga Core static library. Includes source file collection, target configuration, and conditional Android logging support. Enables interprocedural optimization when supported.

LANGUAGE: cmake
CODE:
cmake_minimum_required(VERSION 3.13...3.26)
project(yogacore)
set(CMAKE_VERBOSE_MAKEFILE on)

if(TARGET yogacore)
    return()
endif()

include(CheckIPOSupported)

set(YOGA_ROOT ${CMAKE_CURRENT_SOURCE_DIR}/..)
include(${YOGA_ROOT}/cmake/project-defaults.cmake)


file(GLOB SOURCES CONFIGURE_DEPENDS
    ${CMAKE_CURRENT_SOURCE_DIR}/*.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/**/*.cpp)

add_library(yogacore STATIC ${SOURCES})

# Yoga conditionally uses <android/log> when building for Android
if (ANDROID)
    target_link_libraries(yogacore log)
endif()

check_ipo_supported(RESULT result)
if(result)
  set_target_properties(yogacore PROPERTIES
    CMAKE_INTERPROCEDURAL_OPTIMIZATION true)
endif()

target_include_directories(yogacore
    PUBLIC
    $<BUILD_INTERFACE:${YOGA_ROOT}>
    $<INSTALL_INTERFACE:${CMAKE_INSTALL_PREFIX}/include/yoga>)

----------------------------------------

TITLE: Installing @react-native/codegen with Yarn
DESCRIPTION: This command installs the @react-native/codegen package as a development dependency using Yarn package manager.

LANGUAGE: bash
CODE:
yarn add --dev @react-native/codegen

----------------------------------------

TITLE: Configuring CMake Build for React Native View Component
DESCRIPTION: Configures CMake build settings for the React Native view renderer component. Sets up source files, include paths, and links required dependencies including Folly, glog, JSI, and Yoga. Enables verbose build output and adds compiler options for pedantic warnings.

LANGUAGE: cmake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB rrc_view_SRC CONFIGURE_DEPENDS
        *.cpp
        platform/android/react/renderer/components/view/*.cpp)

add_library(rrc_view OBJECT ${rrc_view_SRC})

target_include_directories(rrc_view
        PUBLIC
          ${REACT_COMMON_DIR}
          ${CMAKE_CURRENT_SOURCE_DIR}/platform/android/
)

target_link_libraries(rrc_view
        folly_runtime
        glog
        glog_init
        jsi
        logger
        react_debug
        react_renderer_core
        react_renderer_css
        react_renderer_debug
        react_renderer_graphics
        yoga)
target_compile_reactnative_options(rrc_view PRIVATE "Fabric")
target_compile_options(rrc_view PRIVATE -Wpedantic)

----------------------------------------

TITLE: Executing Code Analysis Bot for React Native Pull Requests
DESCRIPTION: This command shows how to run the Code Analysis Bot to perform lint checks and other analyses on a GitHub pull request for the React Native project. It requires a GitHub token and the pull request number to be set as environment variables.

LANGUAGE: bash
CODE:
GITHUB_TOKEN=[ENV_ABOVE] GITHUB_PR_NUMBER=1234 yarn lint-ci

----------------------------------------

TITLE: Comparing Incorrect vs Correct Label Usage in HTML Forms
DESCRIPTION: Demonstrates the difference between incorrect usage of label 'for' attribute referring to form field 'name' versus the correct usage referring to form field 'id' attribute. This impacts both browser autofill capabilities and accessibility tool functionality.

LANGUAGE: html
CODE:
<label for="fieldName">   <!-- Incorrect: referring to name attribute -->
<input name="fieldName" type="text">

<label for="field-id">     <!-- Correct: referring to id attribute -->
<input id="field-id" type="text">

----------------------------------------

TITLE: Configuring React Native Image Manager Build
DESCRIPTION: Configures CMake build settings for the React Native image manager renderer library. Sets up source files, include paths, and links required dependencies like Folly, Yoga, and other React Native components. Includes special compiler options for Fabric architecture.

LANGUAGE: cmake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_renderer_imagemanager_SRC CONFIGURE_DEPENDS
        *.cpp
        platform/android/react/renderer/imagemanager/*.cpp)

add_library(react_renderer_imagemanager
        OBJECT
        ${react_renderer_imagemanager_SRC})

target_include_directories(react_renderer_imagemanager
        PUBLIC
          ${REACT_COMMON_DIR}
          ${CMAKE_CURRENT_SOURCE_DIR}/platform/android/
        PRIVATE
          ${CMAKE_CURRENT_SOURCE_DIR}
        )

target_link_libraries(react_renderer_imagemanager
        folly_runtime
        mapbufferjni
        react_debug
        react_renderer_core
        react_renderer_debug
        react_renderer_graphics
        react_renderer_mounting
        reactnativejni
        yoga)
target_compile_reactnative_options(react_renderer_imagemanager PRIVATE "Fabric")
target_compile_options(react_renderer_imagemanager PRIVATE -Wpedantic)

----------------------------------------

TITLE: Running RNTester on Android
DESCRIPTION: Command to build and run RNTester on Android from the root of the repository.

LANGUAGE: sh
CODE:
yarn android

----------------------------------------

TITLE: Configuring CMake Build for React Native Attributed String Renderer
DESCRIPTION: Sets up CMake build configuration for the React Native attributed string renderer library. Includes compiler flags, dependencies, and linking to required libraries like Folly, Glog, and Yoga.

LANGUAGE: cmake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_renderer_attributedstring_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_renderer_attributedstring OBJECT ${react_renderer_attributedstring_SRC})

target_include_directories(react_renderer_attributedstring PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(react_renderer_attributedstring
        folly_runtime
        glog
        glog_init
        react_debug
        rrc_view
        react_renderer_core
        react_renderer_debug
        react_renderer_graphics
        react_renderer_mapbuffer
        react_utils
        rrc_view
        yoga
)
target_compile_reactnative_options(react_renderer_attributedstring PRIVATE "Fabric")
target_compile_options(react_renderer_attributedstring PRIVATE -Wpedantic)

----------------------------------------

TITLE: Demonstrating Incorrect Label Usage in HTML Forms
DESCRIPTION: Shows how labels with 'for' attributes should correctly reference form element IDs for proper accessibility and browser autofill functionality.

LANGUAGE: html
CODE:
<label for=FORM_ELEMENT>

----------------------------------------

TITLE: Installing React Native Babel Preset with npm
DESCRIPTION: Command to install @react-native/babel-preset as a development dependency using npm package manager.

LANGUAGE: sh
CODE:
npm i @react-native/babel-preset --save-dev

----------------------------------------

TITLE: Configuring Fabric JNI Library Build in CMake
DESCRIPTION: Configures the build for the Fabric JNI library by setting up source files, include directories, and linking multiple dependencies. The configuration includes React Native core libraries, renderer components, and various UI management modules.

LANGUAGE: cmake
CODE:
cmake_minimum_required(VERSION 3.13)

include(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)
include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB fabricjni_SRCS CONFIGURE_DEPENDS *.cpp)

add_library(
        fabricjni
        OBJECT
        ${fabricjni_SRCS}
)

target_include_directories(fabricjni PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})

target_merge_so(fabricjni)

target_link_libraries(
        fabricjni
        fbjni
        folly_runtime
        glog
        jsi
        mapbufferjni
        react_codegen_rncore
        react_debug
        react_featureflags
        react_renderer_animations
        react_renderer_attributedstring
        react_renderer_componentregistry
        react_renderer_core
        react_renderer_css
        react_renderer_debug
        react_renderer_dom
        react_renderer_graphics
        react_renderer_imagemanager
        react_renderer_mapbuffer
        react_renderer_mounting
        react_renderer_runtimescheduler
        react_renderer_scheduler
        react_renderer_telemetry
        react_renderer_textlayoutmanager
        react_renderer_uimanager
        react_renderer_uimanager_consistency
        rrc_legacyviewmanagerinterop
        react_utils
        reactnativejni
        rrc_image
        rrc_modal
        rrc_progressbar
        rrc_root
        rrc_safeareaview
        rrc_scrollview
        rrc_switch
        rrc_text
        rrc_textinput
        rrc_unimplementedview
        rrc_view
        yoga
)

target_compile_reactnative_options(fabricjni PRIVATE "Fabric")

----------------------------------------

TITLE: Defining Analytics Native Module Interface in JavaScript
DESCRIPTION: This snippet shows the initial interface definition for an Analytics Native Module in React Native.

LANGUAGE: javascript
CODE:
export interface Spec extends TurboModule {
  log: (eventName: string, content: string) => void;
}

----------------------------------------

TITLE: Configuring React Native JNI Library Build in CMake
DESCRIPTION: This CMake script sets up the build configuration for the React Native JNI library. It includes necessary directories, defines the library target, specifies source files, and sets up linking and compilation options.

LANGUAGE: CMake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB reactnativejni_SRC CONFIGURE_DEPENDS *.cpp)

include(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)

add_library(
        reactnativejni
        OBJECT
        ${reactnativejni_SRC}
)
target_merge_so(reactnativejni)

target_include_directories(reactnativejni PUBLIC ../../)

target_link_libraries(reactnativejni
        android
        callinvokerholder
        fbjni
        folly_runtime
        glog_init
        logger
        react_cxxreact
        react_renderer_runtimescheduler
        runtimeexecutor
        yoga
        )
target_compile_reactnative_options(reactnativejni PRIVATE)
target_compile_options(reactnativejni PRIVATE -Wno-unused-lambda-capture)

----------------------------------------

TITLE: Building React Native Test Package
DESCRIPTION: Commands to install dependencies, build the package, and run React Native codegen. This should be executed in sequence to properly set up the test package.

LANGUAGE: shell
CODE:
yarn install
yarn build
npx react-native codegen

----------------------------------------

TITLE: Configuring Yoga Library Build in CMake
DESCRIPTION: Sets up the build configuration for the Yoga library including source files, include directories, library dependencies, and compilation options. The configuration enables hidden visibility and O3 optimization level.

LANGUAGE: cmake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)
include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB yoga_SRC CONFIGURE_DEPENDS jni/*.cpp)
add_library(yoga OBJECT ${yoga_SRC})

target_include_directories(yoga PUBLIC jni)
target_merge_so(yoga)

target_link_libraries(yoga
        yogacore
        fbjni
        log
        android
)

target_compile_reactnative_options(yoga PRIVATE)
target_compile_options(yoga PRIVATE -fvisibility=hidden -O3)

----------------------------------------

TITLE: Cleaning iOS Build Files for RNTester
DESCRIPTION: Commands to clean up generated files and folders for a fresh installation of RNTester on iOS.

LANGUAGE: sh
CODE:
cd packages/rn-tester
yarn clean-ios

----------------------------------------

TITLE: Installing React Native Metro Dependencies
DESCRIPTION: Command to install required Metro-related dependencies using yarn package manager. Installs js-polyfills, metro-config, metro-babel-transformer, metro-runtime, and metro-config packages.

LANGUAGE: bash
CODE:
yarn add --dev @react-native/js-polyfills metro-config @react-native/metro-babel-transformer metro-runtime @react-native/metro-config

----------------------------------------

TITLE: Configuring CMake GLog Library Build
DESCRIPTION: Sets up the build configuration for the GLog logging library as a static library. Includes source files, compilation flags, and directory settings for both private and public includes.

LANGUAGE: cmake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

add_library(glog
        STATIC
        glog-0.3.5/src/demangle.cc
        glog-0.3.5/src/logging.cc
        glog-0.3.5/src/raw_logging.cc
        glog-0.3.5/src/signalhandler.cc
        glog-0.3.5/src/symbolize.cc
        glog-0.3.5/src/utilities.cc
        glog-0.3.5/src/vlog_is_on.cc
        )

target_include_directories(glog PRIVATE .)
target_include_directories(glog PUBLIC exported)

target_compile_reactnative_options(glog PRIVATE)

target_compile_options(glog PRIVATE
        -Wwrite-strings
        -Woverloaded-virtual
        -Wno-sign-compare
        -DNDEBUG
        -g
        -O2
        -DHAVE_PREAD=1
)

----------------------------------------

TITLE: Safe Addition of New Union Value to Color Scheme Interface
DESCRIPTION: This snippet demonstrates how to safely add a new value to the color scheme union by creating a new optional method.

LANGUAGE: javascript
CODE:
export interface Spec extends TurboModule {
  +setColorScheme: (color: 'light' | 'dark') => void
  +setColorSchemeWithSystem?: (color: 'light' | 'dark' | 'system') => void
}

----------------------------------------

TITLE: Configuring Folly Compiler Flags in CMake
DESCRIPTION: Defines compiler flags for building Folly library with specific feature toggles and platform configurations. These flags control various Folly behaviors including coroutines, mobile optimizations, and error handling approaches.

LANGUAGE: cmake
CODE:
SET(folly_FLAGS
        -DFOLLY_NO_CONFIG=1
        -DFOLLY_HAVE_CLOCK_GETTIME=1
        -DFOLLY_USE_LIBCPP=1
        -DFOLLY_CFG_NO_COROUTINES=1
        -DFOLLY_MOBILE=1
        -DFOLLY_HAVE_RECVMMSG=1
        -DFOLLY_HAVE_PTHREAD=1
        -DFOLLY_HAVE_XSI_STRERROR_R=1
        )

----------------------------------------

TITLE: Configuring CMake for React Native Text Component
DESCRIPTION: Sets up CMake configuration for building the React Native Text component library. It defines the minimum CMake version, includes necessary flags, creates the library target, and sets up include directories and linked libraries.

LANGUAGE: CMake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB rrc_text_SRC CONFIGURE_DEPENDS *.cpp)
add_library(rrc_text OBJECT ${rrc_text_SRC})

target_include_directories(rrc_text PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(rrc_text
        glog
        folly_runtime
        glog_init
        jsi
        react_debug
        react_renderer_attributedstring
        react_renderer_core
        react_renderer_debug
        react_renderer_graphics
        react_renderer_mapbuffer
        react_renderer_mounting
        react_renderer_textlayoutmanager
        react_utils
        rrc_view
        yoga
)
target_compile_reactnative_options(rrc_text PRIVATE "Fabric")
target_compile_options(rrc_text PRIVATE -Wpedantic)

----------------------------------------

TITLE: Configuring CMake Build for React Native Modal
DESCRIPTION: Sets up CMake configuration for building the React Native Modal component as a static library. Defines include directories, links required dependencies, and sets compilation options for the Fabric architecture.

LANGUAGE: cmake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB rrc_modal_SRC CONFIGURE_DEPENDS *.cpp)
add_library(rrc_modal STATIC ${rrc_modal_SRC})

target_include_directories(rrc_modal PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(rrc_modal
        glog
        folly_runtime
        glog_init
        react_codegen_rncore
        react_renderer_componentregistry
        react_renderer_core
        react_renderer_debug
        react_renderer_graphics
        react_renderer_imagemanager
        react_renderer_uimanager
        rrc_image
        rrc_view
        yoga
)
target_compile_reactnative_options(rrc_modal PRIVATE "Fabric")
target_compile_options(rrc_modal PRIVATE -Wpedantic)

----------------------------------------

TITLE: Configuring Fabric Flag in RNTester's Podfile
DESCRIPTION: Ruby code snippet to disable the Fabric flag in the RNTester's Podfile for testing non-fabric components.

LANGUAGE: ruby
CODE:
fabric_enabled = false

----------------------------------------

TITLE: Modified Color Scheme Enum in JavaScript
DESCRIPTION: This snippet shows a modification to the TestEnum, changing the SYSTEM value, which can lead to compatibility issues.

LANGUAGE: javascript
CODE:
enum TestEnum {
  LIGHT = 1,
  DARK = 2,
  SYSTEM = -1,
}

----------------------------------------

TITLE: Configuring React Native DOM Renderer Build
DESCRIPTION: Sets up CMake build configuration for the React Native DOM renderer library. Includes source files, sets include directories, and configures linking with required dependencies. Also sets compiler flags for pedantic warnings and Fabric-specific options.

LANGUAGE: cmake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_renderer_dom_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_renderer_dom OBJECT ${react_renderer_dom_SRC})

target_include_directories(react_renderer_dom PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(react_renderer_dom
        react_renderer_core
        react_renderer_graphics
        rrc_root
        rrc_text)
target_compile_reactnative_options(react_renderer_dom PRIVATE "Fabric")
target_compile_options(react_renderer_dom PRIVATE -Wpedantic)

----------------------------------------

TITLE: Configuring CMake for React Native Renderer Leak Checker Library
DESCRIPTION: This CMake snippet sets up the build configuration for the React Native renderer leak checker. It defines the minimum CMake version, includes necessary utilities, specifies source files, and configures the library with appropriate dependencies and compiler options.

LANGUAGE: CMake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_renderer_leakchecker_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_renderer_leakchecker STATIC ${react_renderer_leakchecker_SRC})

target_include_directories(react_renderer_leakchecker PUBLIC ${REACT_COMMON_DIR})
target_link_libraries(react_renderer_leakchecker
        glog
        react_renderer_core
        runtimeexecutor)
target_compile_reactnative_options(react_renderer_leakchecker PRIVATE "Fabric")
target_compile_options(react_renderer_leakchecker PRIVATE -Wpedantic)

----------------------------------------

TITLE: Installing @react-native/eslint-plugin-specs with Yarn
DESCRIPTION: This command installs the @react-native/eslint-plugin-specs package as a development dependency using Yarn. It's noted that npm 3+ and npx can be used as alternatives to Yarn.

LANGUAGE: bash
CODE:
yarn add --dev @react-native/eslint-plugin-specs

----------------------------------------

TITLE: Defining Color Scheme Enum in JavaScript
DESCRIPTION: This snippet defines an enum for color scheme options, which can cause issues if enum values are changed.

LANGUAGE: javascript
CODE:
enum TestEnum {
  LIGHT = 1,
  DARK = 2,
  SYSTEM = 3,
}

export interface Spec extends TurboModule {
  getColorScheme: () => TestEnum;
}

----------------------------------------

TITLE: Configuring React Native Timing Library in CMake
DESCRIPTION: This CMake script sets up the React Native timing library. It sets the minimum CMake version, enables verbose output, includes React Native specific flags, and creates an interface library with appropriate compile options and include directories.

LANGUAGE: CMake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

add_library(react_timing INTERFACE)

target_include_directories(react_timing INTERFACE ${REACT_COMMON_DIR})
target_compile_reactnative_options(react_timing INTERFACE)
target_compile_options(react_timing INTERFACE -Wpedantic)

----------------------------------------

TITLE: Configuring CMake for React Native Microtasks Module
DESCRIPTION: This CMake snippet sets up the build configuration for the React Native microtasks native module. It defines the minimum CMake version, includes React Native flags, compiles source files, and sets up include directories and linking options.

LANGUAGE: CMake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_nativemodule_microtasks_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_nativemodule_microtasks OBJECT ${react_nativemodule_microtasks_SRC})

target_include_directories(react_nativemodule_microtasks PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(react_nativemodule_microtasks
        react_codegen_rncore
        react_cxxreact
)
target_compile_reactnative_options(react_nativemodule_microtasks PRIVATE "ReactNative")
target_compile_options(react_nativemodule_microtasks PRIVATE -Wpedantic)

----------------------------------------

TITLE: Safe Modification of Color Scheme Enum
DESCRIPTION: This snippet shows how to safely modify the TestEnum by adding a new value while maintaining the old one for compatibility.

LANGUAGE: javascript
CODE:
enum TestEnum {
  LIGHT = 1,
  DARK = 2,
  SYSTEM = 3,
  SYSTEM_ALSO = -1,
}

----------------------------------------

TITLE: Blob Support
DESCRIPTION: Added Blob support for uploading files and networking.

LANGUAGE: JavaScript
CODE:
// Example of using Blob
fetch(url, { method: 'POST', body: blob });

----------------------------------------

TITLE: Configuring CMake for JSInspector Library in React Native Android
DESCRIPTION: This CMake snippet sets up the build configuration for the JSInspector library. It includes necessary files, defines the library source, sets include directories, links required libraries, and configures compilation options.

LANGUAGE: CMake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)
include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB jsinspector_SRC CONFIGURE_DEPENDS *.cpp)
add_library(jsinspector OBJECT ${jsinspector_SRC})
target_merge_so(jsinspector)

target_include_directories(jsinspector PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(jsinspector
        folly_runtime
        glog
        jsinspector_network
        jsinspector_tracing
        react_featureflags
        runtimeexecutor
)
target_compile_reactnative_options(jsinspector PRIVATE)
target_compile_options(jsinspector PRIVATE
        $<$<CONFIG:Debug>:-DREACT_NATIVE_DEBUGGER_ENABLED=1>
        $<$<CONFIG:Debug>:-DREACT_NATIVE_DEBUGGER_ENABLED_DEVONLY=1>
)

----------------------------------------

TITLE: Configuring CallInvoker Library in CMake for React Native
DESCRIPTION: Sets up the CallInvoker interface library with specific include directories and compilation options. It requires CMake version 3.13 or higher and includes React Native specific flags.

LANGUAGE: cmake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

add_library(callinvoker INTERFACE)

target_include_directories(callinvoker INTERFACE .)
target_compile_reactnative_options(callinvoker INTERFACE)
target_compile_options(callinvoker INTERFACE -Wpedantic)

----------------------------------------

TITLE: Adding React Common Subdirectory Function
DESCRIPTION: Defines a helper function to add React Common subdirectories to the build system, specifically used for including the Yoga library.

LANGUAGE: cmake
CODE:
function(add_react_common_subdir relative_path)
  add_subdirectory(${REACT_COMMON_DIR}/${relative_path} src/${relative_path})
endfunction()

# Third-party downloaded targets

# Common targets
add_react_common_subdir(yoga)

----------------------------------------

TITLE: Configuring UIManagerJNI Library Build in CMake for React Native Android
DESCRIPTION: This CMake snippet sets up the build configuration for the UIManagerJNI library. It includes necessary files, defines the library target, specifies source files, sets include directories, and links required dependencies. The configuration also applies React Native specific compile options.

LANGUAGE: CMake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)
include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB uimanagerjni_SRC CONFIGURE_DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/*.cpp)
add_library(uimanagerjni
        OBJECT
            ${uimanagerjni_SRC}
            $<TARGET_OBJECTS:react_renderer_graphics>
            $<TARGET_OBJECTS:rrc_legacyviewmanagerinterop>
            $<TARGET_OBJECTS:rrc_view>
)
target_merge_so(uimanagerjni)

target_include_directories(uimanagerjni PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})

target_link_libraries(uimanagerjni
        bridgelessnativeviewconfig
        callinvokerholder
        fbjni
        folly_runtime
        glog
        glog_init
        jsi
        log
        react_renderer_componentregistry
        reactnativejni
        rrc_native
        yoga
)

target_compile_reactnative_options(uimanagerjni PRIVATE "ReactNative")

----------------------------------------

TITLE: Defining Color Scheme Interface with Union Type
DESCRIPTION: This snippet shows an interface for setting color scheme using a union type, which can lead to compatibility issues if modified.

LANGUAGE: javascript
CODE:
export interface Spec extends TurboModule {
  // You add 'system' to this union
  +setColorScheme: (color: 'light' | 'dark') => void;
}

----------------------------------------

TITLE: Configuring Boost Library for React Native with CMake
DESCRIPTION: Sets up CMake project for Boost library integration in React Native. It enables ASM language support, gathers ASM source files, creates a static library, and configures include directories and compile options.

LANGUAGE: CMake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

ENABLE_LANGUAGE(ASM)
file(GLOB_RECURSE
        boostasm_SRC
        CONFIGURE_DEPENDS
        ${CMAKE_CURRENT_SOURCE_DIR}/asm/${ANDROID_ABI}/*.S)
add_library(boost STATIC ${boostasm_SRC})

set_target_properties(boost PROPERTIES LINKER_LANGUAGE CXX)

target_include_directories(boost PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/boost_1_83_0)
target_compile_options(boost PRIVATE -fexceptions -frtti)

----------------------------------------

TITLE: Configuring CMake Project and Build Settings
DESCRIPTION: Sets up the initial CMake configuration including project name, minimum version, and basic build options. Enables verbose output and adds build-id linking option.

LANGUAGE: cmake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

project(fantom_tester)

# Convert input paths to CMake format (with forward slashes)
file(TO_CMAKE_PATH "${REACT_COMMON_DIR}" REACT_COMMON_DIR)

# Make sure every shared lib includes a .note.gnu.build-id header
add_link_options(-Wl,--build-id)

----------------------------------------

TITLE: Configuring Fast Float Library with CMake for React Native
DESCRIPTION: This CMake snippet sets up the Fast Float library as an interface target. It includes the necessary directories and applies React Native specific compile options. The configuration requires CMake version 3.13 or higher and uses React Native's common CMake utilities.

LANGUAGE: cmake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

add_library(fast_float INTERFACE)

target_include_directories(fast_float INTERFACE include)
target_compile_reactnative_options(fast_float INTERFACE)

----------------------------------------

TITLE: Safe Addition of New Method to Analytics Interface
DESCRIPTION: This snippet demonstrates how to safely add a new method to the Analytics interface by making it optional.

LANGUAGE: javascript
CODE:
export interface Spec extends TurboModule {
  log: (eventName: string, content: string) => void;
  logError?: (message: string) => void;
}

----------------------------------------

TITLE: Setting C++ Standard Configuration
DESCRIPTION: Configures the C++ standard to C++14 and makes it a requirement for the build.

LANGUAGE: cmake
CODE:
set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

----------------------------------------

TITLE: Installing React Native Normalize Colors Package
DESCRIPTION: Command to install @react-native/normalize-colors package as a dev dependency using yarn package manager.

LANGUAGE: bash
CODE:
yarn add --dev @react-native/normalize-colors

----------------------------------------

TITLE: Configuring CMake Build for Glog Initialization
DESCRIPTION: Sets up CMake build configuration for Glog initialization library. Includes compilation options for exceptions and frame pointers, links required libraries, and sets up include directories.

LANGUAGE: cmake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

add_compile_options(-fexceptions -fno-omit-frame-pointer)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

add_library(glog_init OBJECT glog_init.cpp)

target_include_directories(glog_init PUBLIC .)

target_link_libraries(glog_init log glog)
target_compile_reactnative_options(glog_init PRIVATE)

----------------------------------------

TITLE: Accessing Feature Flags in C++
DESCRIPTION: Example of how to access feature flags in C++ code using the ReactNativeFeatureFlags interface.

LANGUAGE: c++
CODE:
#include <react/featureflags/ReactNativeFeatureFlags.h>

if (ReactNativeFeatureFlags::enableNativeBehavior()) {
  // do something
}

----------------------------------------

TITLE: Testing React Native Gradle Plugin
DESCRIPTION: Commands to run tests for the gradle plugin. Requires running from the React Native root folder with dependencies installed.

LANGUAGE: shell
CODE:
yarn

LANGUAGE: shell
CODE:
./gradlew -p packages/gradle-plugin test

----------------------------------------

TITLE: Adding New Method to Analytics Native Module Interface
DESCRIPTION: This snippet demonstrates adding a new method 'logError' to the existing Analytics Native Module interface, which could cause compatibility issues.

LANGUAGE: javascript
CODE:
export interface Spec extends TurboModule {
  log: (eventName: string, content: string) => void;
  logError: (message: string) => void;
}

----------------------------------------

TITLE: Installing React Native Gradle Plugin
DESCRIPTION: Command to install the @react-native/gradle-plugin package using Yarn package manager.

LANGUAGE: shell
CODE:
yarn add @react-native/gradle-plugin

----------------------------------------

TITLE: Using New logError Method in JavaScript
DESCRIPTION: This snippet shows how the newly added logError method would be used in JavaScript code.

LANGUAGE: javascript
CODE:
NativeAnalytics.logError('Oh No! We hit a crash')

----------------------------------------

TITLE: Installing React Native ESLint Plugin with Yarn
DESCRIPTION: Command to install the @react-native/eslint-plugin and its dependencies using Yarn. This is typically used for development purposes.

LANGUAGE: bash
CODE:
yarn add --dev eslint @react-native/eslint-plugin

----------------------------------------

TITLE: Overriding Feature Flags in C++
DESCRIPTION: Example of how to override feature flags in C++ by creating a custom implementation class.

LANGUAGE: c++
CODE:
#include <react/featureflags/ReactNativeFeatureFlags.h>
#include <react/featureflags/ReactNativeFeatureFlagsDefaults.h>

class CustomReactNativeFeatureFlags : public ReactNativeFeatureFlagsDefaults {
 public:
  CustomReactNativeFeatureFlags();

  bool enableNativeBehavior() override {
    return true;
  }
}

ReactNativeFeatureFlags::override(std::make_unique<CustomReactNativeFeatureFlags>());

----------------------------------------

TITLE: Updating Debugger Frontend Assets via Shell Commands
DESCRIPTION: Shell commands for updating the compiled assets in the dist/ folder. Shows commands for both main and stable branch updates using the sync-and-build script.

LANGUAGE: shell
CODE:
# For main
node scripts/debugger-frontend/sync-and-build --branch main

# For stable branches (e.g. '0.73-stable')
node scripts/debugger-frontend/sync-and-build --branch 0.73-stable

----------------------------------------

TITLE: Overriding Feature Flags in Kotlin
DESCRIPTION: Example of how to override feature flags in Kotlin using an anonymous object implementation.

LANGUAGE: kotlin
CODE:
import com.facebook.react.internal.featureflags.ReactNativeFeatureFlags
import com.facebook.react.internal.featureflags.ReactNativeFeatureFlagsDefaults

fun overrideFeatureFlags() {
  ReactNativeFeatureFlags.override(object : ReactNativeFeatureFlagsDefaults() {
    override fun useMicrotasks(): Boolean = true
  })
}

----------------------------------------

TITLE: Running Tests for Assets Registry Package
DESCRIPTION: Series of commands to run tests for the assets registry package from the React Native root folder. Requires initial dependency installation followed by jest test execution.

LANGUAGE: bash
CODE:
yarn
yarn jest packages/assets

----------------------------------------

TITLE: Overriding Feature Flags in JavaScript
DESCRIPTION: Example of how to override JS-only feature flags in JavaScript code.

LANGUAGE: javascript
CODE:
import * as ReactNativeFeatureFlags from 'react-native/src/private/featureflags/ReactNativeFeatureFlags';

ReactNativeFeatureFlags.override({
  enableJSBehavior: () => true,
});

----------------------------------------

TITLE: Installing React Native Assets Registry Package
DESCRIPTION: Command to install @react-native/assets-registry as a development dependency using yarn package manager.

LANGUAGE: bash
CODE:
yarn add --dev @react-native/assets-registry

----------------------------------------

TITLE: Safe Usage of Optional logError Method
DESCRIPTION: This snippet shows how to safely use the optional logError method by checking for its existence before calling.

LANGUAGE: javascript
CODE:
if (NativeAnalytics.logError) {
  NativeAnalytics.logError('Oh No! We hit a crash');
}

----------------------------------------

TITLE: Configuring React Native Utils Library Build with CMake
DESCRIPTION: Sets up CMake build configuration for React Native utils library. Defines compilation requirements, includes necessary dependencies, and configures build flags. Links against required libraries like glog and jsireact while enabling Fabric support.

LANGUAGE: cmake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_utils_SRC CONFIGURE_DEPENDS *.cpp *.mm)
add_library(react_utils OBJECT ${react_utils_SRC})

target_include_directories(react_utils PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(react_utils
        glog
        glog_init
        jsireact
        react_debug)
target_compile_reactnative_options(react_utils PRIVATE "Fabric")
target_compile_options(react_utils PRIVATE -Wpedantic)

----------------------------------------

TITLE: Configuring OSCompat Library Build in CMake for React Native
DESCRIPTION: This CMake script sets up the build configuration for the OSCompat library in React Native. It sets the minimum CMake version, enables verbose output, includes React Native specific flags, and defines the library target with its source files and compilation options.

LANGUAGE: CMake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB oscompat_SRC CONFIGURE_DEPENDS *.cpp)
add_library(oscompat OBJECT ${oscompat_SRC})

target_include_directories(oscompat PUBLIC .)
target_compile_reactnative_options(oscompat PRIVATE)

----------------------------------------

TITLE: Using Compatibility Check Tool in JavaScript
DESCRIPTION: This snippet demonstrates how to use the @react-native/compatibility-check package to compare schemas and detect incompatible changes.

LANGUAGE: javascript
CODE:
import {compareSchemas} from '@react-native/compatibility-check';
const util = require('util');

async function run(argv: Argv, STDERR: string) {
  const debug = (log: mixed) => {
    argv.debug &&
      console.info(util.inspect(log, {showHidden: false, depth: null}));
  };

  const currentSchema =
    JSON.parse(/*you'll read the file generated by codegen wherever it is in your app*/);
  const previousSchema =
    JSON.parse(/*you'll read the schema file that you persisted from when your native app was built*/);

  const safetyResult = compareSchemas(currentSchema, previousSchema);

  const summary = safetyResult.getSummary();
  switch (summary.status) {
    case 'ok':
      debug('No changes in boundary');
      console.log(JSON.stringify(summary));
      break;
    case 'patchable':
      debug('Changes in boundary, but are compatible');
      debug(result.getDebugInfo());
      console.log(JSON.stringify(summary));
      break;
    default:
      debug(result.getDebugInfo());
      console.error(JSON.stringify(result.getErrors()));
      throw new Error(`Incompatible changes in boundary`);
  }
}

----------------------------------------

TITLE: Configuring and Building JSI React Library with CMake
DESCRIPTION: This CMake script sets up the jsireact library, including its source files, include directories, and linked libraries. It also applies React Native-specific compilation flags and optimizations.

LANGUAGE: CMake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

add_library(jsireact
        OBJECT
        jsireact/JSIExecutor.cpp
        jsireact/JSINativeModules.cpp)

target_include_directories(jsireact PUBLIC .)

target_link_libraries(jsireact
        react_cxxreact
        reactperflogger
        folly_runtime
        glog
        jsi)

target_compile_reactnative_options(jsireact PRIVATE)
target_compile_options(jsireact PRIVATE -O3)

----------------------------------------

TITLE: Updating Feature Flags via Shell Command
DESCRIPTION: Command to regenerate feature flags code after making changes to definitions.

LANGUAGE: shell
CODE:
yarn featureflags --update

----------------------------------------

TITLE: Setting Up Installation Rules
DESCRIPTION: Configures the installation of JSI header files, excluding test files.

LANGUAGE: cmake
CODE:
install(DIRECTORY "${PROJECT_SOURCE_DIR}/API/jsi/" DESTINATION include
  FILES_MATCHING PATTERN "*.h"
  PATTERN "test" EXCLUDE)

----------------------------------------

TITLE: Configuring babel.config.js for React Native
DESCRIPTION: Basic babel configuration that loads the React Native preset in a babel.config.js file. This enables custom Babel configurations while maintaining React Native's default transformations.

LANGUAGE: json
CODE:
{
  "presets": ["module:@react-native/babel-preset"]
}

----------------------------------------

TITLE: Configuring Compiler-Specific Flags
DESCRIPTION: Sets compiler-specific flags based on the compiler being used. Handles Clang/GNU and MSVC compilers differently.

LANGUAGE: cmake
CODE:
set(jsi_compile_flags "")
if ("${CMAKE_CXX_COMPILER_ID}" MATCHES "Clang" OR
    "${CMAKE_CXX_COMPILER_ID}" MATCHES "GNU")
  list(APPEND jsi_compile_flags "-Wno-non-virtual-dtor")
elseif ("${CMAKE_CXX_COMPILER_ID}" MATCHES "MSVC")
  # Turn on Error Handling in MSVC, otherwise objects are not destructed
  # when they go out of scope due to exceptions.
  list(APPEND jsi_compile_flags "/EHsc")
endif()
target_compile_options(jsi PRIVATE ${jsi_compile_flags})

----------------------------------------

TITLE: Initializing Basic RNTester Platform Test Component in React Native
DESCRIPTION: Demonstrates the basic setup of a platform test case using RNTesterPlatformTest component. Shows how to structure a test with title, description, and instructions.

LANGUAGE: javascript
CODE:
function ExampleTestCase ({ harness }) { /* ... */ }

<RNTesterPlatformTest
  title="Example Test"
  description="Imagine there's a detailed description of this example test here"
  instructions={[
    "This is the example test's first step",
    "A second step",
    "A third step",
  ]}
  component={ExampleTestCase}
/>

----------------------------------------

TITLE: Defining JSI Library Target
DESCRIPTION: Creates the JSI library target and sets its include directories.

LANGUAGE: cmake
CODE:
add_library(jsi
        jsi.cpp)

target_include_directories(jsi PUBLIC ..)

----------------------------------------

TITLE: Implementing Synchronous Layout Testing in React Native
DESCRIPTION: Shows implementation of a synchronous test case that verifies view layout dimensions using the test harness. Uses refs and callbacks to measure view dimensions and make assertions.

LANGUAGE: javascript
CODE:
const EXPECTED_WIDTH = 100;
const EXPECTED_HEIGHT = 200;

function BasicLayoutTestCase({harness}) {
  const viewRef = useRef(null);

  const runTest = useCallback(() => {
    const view = viewRef.current;
    if (view != null) {
      view.measureInWindow(({width, height}) => {
        harness.test(({assert_equals}) => {
          assert_equals(
            width,
            EXPECTED_WIDTH,
            `view's computed width should be ${EXPECTED_WIDTH}`,
          );
          assert_equals(
            height,
            EXPECTED_HEIGHT,
            `view's computed width should be ${EXPECTED_HEIGHT}`,
          );
        }, "view's width and height are correct");
      });
    }
  }, [harness]);

  return (
    <>
      <View
        ref={viewRef}
        style={{width: EXPECTED_WIDTH, height: EXPECTED_HEIGHT}}
      />
      <Button title="Start Test" onPress={runTest} />
    </>
  );
}

----------------------------------------

TITLE: Configuring CMake for React Native DevTools Runtime Settings Library
DESCRIPTION: This CMake script sets up the build configuration for the 'react_devtoolsruntimesettingscxx' library. It defines the minimum CMake version, includes necessary utilities, and configures the library with appropriate compile options and dependencies.

LANGUAGE: CMake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

add_library(react_devtoolsruntimesettingscxx INTERFACE)

target_include_directories(react_devtoolsruntimesettingscxx INTERFACE .)

target_link_libraries(react_devtoolsruntimesettingscxx jsi)
target_compile_reactnative_options(react_devtoolsruntimesettingscxx PRIVATE)
target_compile_options(react_devtoolsruntimesettingscxx PRIVATE -Wpedantic)

----------------------------------------

TITLE: Running E2E Local Test Setup for React Native
DESCRIPTION: Command to set up, build, and install a given test app configuration for React Native release testing.

LANGUAGE: JavaScript
CODE:
node test-e2e-local --help

----------------------------------------

TITLE: Configuring CMake for React Native CxxReact Library
DESCRIPTION: This CMake snippet sets up the build configuration for the React Native CxxReact library. It defines the minimum CMake version, sets verbose output, includes React Native flags, glob source files, creates the library target, sets include directories, links dependencies, and configures compiler options.

LANGUAGE: CMake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_cxxreact_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_cxxreact OBJECT ${react_cxxreact_SRC})

target_include_directories(react_cxxreact PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(react_cxxreact
        boost
        callinvoker
        folly_runtime
        glog
        jsi
        jsinspector
        logger
        reactperflogger
        runtimeexecutor
        react_debug)

target_compile_reactnative_options(react_cxxreact PRIVATE "ReactNative")
target_compile_options(react_cxxreact PRIVATE -Wno-unused-lambda-capture)

----------------------------------------

TITLE: Cleaning E2E Local Test Environment for React Native
DESCRIPTION: Command to clean up all file system and cache state between React Native release tests.

LANGUAGE: JavaScript
CODE:
node test-e2e-local-clean

----------------------------------------

TITLE: Configuring TurboModule JSI Library Build in CMake
DESCRIPTION: Sets up the build configuration for the turbomodulejsijni library (to be renamed to react_nativemodule_manager). Includes source files, dependencies, and linking instructions for the TurboModule system implementation.

LANGUAGE: cmake
CODE:
add_library(
        turbomodulejsijni
        OBJECT
        ReactCommon/BindingsInstallerHolder.cpp
        ReactCommon/OnLoad.cpp
        ReactCommon/TurboModuleManager.cpp
        $<TARGET_OBJECTS:logger>
        $<TARGET_OBJECTS:react_bridging>
)
target_merge_so(turbomodulejsijni)

target_include_directories(
        turbomodulejsijni
        PUBLIC
        ${CMAKE_CURRENT_SOURCE_DIR}
)

target_link_libraries(turbomodulejsijni
        fbjni
        jsi
        react_nativemodule_core
        callinvokerholder
        reactperfloggerjni)
target_compile_reactnative_options(turbomodulejsijni PRIVATE)

----------------------------------------

TITLE: Building React Native Packages Shell Commands
DESCRIPTION: Basic shell commands for building all packages or specific packages in the React Native monorepo, including cleaning build directories.

LANGUAGE: shell
CODE:
# Build all packages
yarn build

# Build a specific package
yarn build dev-middleware

# Clean build directories
yarn clean

----------------------------------------

TITLE: Configuring CallInvokerHolder Library Build in CMake
DESCRIPTION: Defines the build configuration for the callinvokerholder library, which handles method call invocation. Includes source files, include directories, and dependencies like fbjni and runtimeexecutor.

LANGUAGE: cmake
CODE:
add_library(
        callinvokerholder
        OBJECT
        ReactCommon/CallInvokerHolder.cpp
        ReactCommon/NativeMethodCallInvokerHolder.cpp
)

target_include_directories(callinvokerholder
        PUBLIC
        ${CMAKE_CURRENT_SOURCE_DIR}
        )

target_link_libraries(callinvokerholder
        fbjni
        runtimeexecutor
        callinvoker
        reactperfloggerjni)
target_compile_reactnative_options(callinvokerholder PRIVATE)

----------------------------------------

TITLE: Running Tests for @react-native/codegen
DESCRIPTION: These commands demonstrate how to run tests for the @react-native/codegen package from the React Native root folder. It includes installing dependencies and running Jest tests.

LANGUAGE: bash
CODE:
yarn

LANGUAGE: bash
CODE:
yarn jest packages/react-native-codegen

----------------------------------------

TITLE: Configuring CMake Build for React Native Bridgeless Instance
DESCRIPTION: Sets up CMake build configuration for the React Native bridgeless instance library. Includes necessary dependencies, compiles source files, and configures linking options. Enables debugger support in Debug configuration and includes various React Native related libraries.

LANGUAGE: cmake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)
include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB_RECURSE bridgeless_jni_SRC CONFIGURE_DEPENDS *.cpp)

add_library(rninstance
        OBJECT
        ${bridgeless_jni_SRC}
)

target_compile_reactnative_options(rninstance PRIVATE)
target_compile_options(rninstance PRIVATE $<$<CONFIG:Debug>:-DHERMES_ENABLE_DEBUGGER=1>)

target_merge_so(rninstance)
target_include_directories(rninstance PUBLIC .)
target_link_libraries(
        rninstance
        fabricjni
        react_featureflagsjni
        turbomodulejsijni
        jsi
        jsitooling
        fbjni
        bridgeless
)

----------------------------------------

TITLE: Running Tests for @react-native/eslint-plugin-specs
DESCRIPTION: These commands are used to run tests for the eslint-plugin-specs package. They should be executed from the React Native root folder. The first command installs dependencies, and the second runs the Jest tests specifically for this package.

LANGUAGE: bash
CODE:
yarn

LANGUAGE: bash
CODE:
yarn jest packages/eslint-plugin-specs

----------------------------------------

TITLE: Configuring CxxReactPackage Library in CMake for React Native
DESCRIPTION: This CMake snippet sets up the react_cxxreactpackage interface library. It defines include directories, links necessary libraries, and sets compile options. The library is configured with React Native specific flags and a warning suppression.

LANGUAGE: CMake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

add_library(react_cxxreactpackage INTERFACE)

target_include_directories(react_cxxreactpackage
        INTERFACE
        ${CMAKE_CURRENT_SOURCE_DIR}
)

target_link_libraries(react_cxxreactpackage
        INTERFACE
        fb
        fbjni)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)
target_compile_reactnative_options(react_cxxreactpackage INTERFACE)
target_compile_options(react_cxxreactpackage INTERFACE -Wno-unused-lambda-capture)

----------------------------------------

TITLE: Configuring ReactPerfLoggerJNI CMake Build
DESCRIPTION: Sets up CMake configuration for the reactperfloggerjni interface library. Defines include directories and links required dependencies including fbjni, android, and reactperflogger. Requires CMake 3.13 or higher and includes React Native specific build flags.

LANGUAGE: cmake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

add_library(reactperfloggerjni INTERFACE)

target_include_directories(reactperfloggerjni
        INTERFACE
          ${CMAKE_CURRENT_SOURCE_DIR}
)

target_link_libraries(reactperfloggerjni
        INTERFACE
        fbjni
        android
        reactperflogger)

target_compile_reactnative_options(reactperfloggerjni INTERFACE)

----------------------------------------

TITLE: Testing React Native Normalize Colors Package
DESCRIPTION: Commands to run tests for the normalize-colors package from the React Native root folder. Requires installing dependencies first.

LANGUAGE: bash
CODE:
yarn
yarn jest packages/normalize-color

----------------------------------------

TITLE: Configuring CMake for React Native New Architecture Defaults Library
DESCRIPTION: This CMake snippet sets up the build configuration for the 'react_newarchdefaults' library. It includes necessary files, defines source files, sets up the library target, and configures include directories, linked libraries, and compilation options.

LANGUAGE: CMake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)
include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_newarchdefaults_SRC CONFIGURE_DEPENDS *.cpp)

add_library(react_newarchdefaults OBJECT ${react_newarchdefaults_SRC})

target_merge_so(react_newarchdefaults)

target_include_directories(react_newarchdefaults PUBLIC .)

target_link_libraries(react_newarchdefaults
        fbjni
        fabricjni
        react_featureflagsjni
        react_nativemodule_core
        react_codegen_rncore
        react_cxxreactpackage
        react_nativemodule_defaults
        react_nativemodule_dom
        react_nativemodule_featureflags
        react_nativemodule_microtasks
        react_nativemodule_idlecallbacks
        jsi)

target_compile_reactnative_options(react_newarchdefaults PRIVATE "ReactNative")

----------------------------------------

TITLE: Running Metro Config Tests
DESCRIPTION: Two-step process for running package tests, including installing dependencies and executing Jest tests for the metro-config package.

LANGUAGE: bash
CODE:
yarn

LANGUAGE: bash
CODE:
yarn jest packages/metro-config

----------------------------------------

TITLE: Configuring JSC Executor Library Build in CMake
DESCRIPTION: Sets up the build configuration for the JSC executor library including compilation options, source files, and dependencies. Handles NDK version-specific linking of unwinding libraries and includes special patches for exception handling.

LANGUAGE: cmake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

add_compile_options(-fvisibility=hidden -fexceptions -frtti)

include(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)
include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB jscexecutor_SRC CONFIGURE_DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/*.cpp)
add_library(jscexecutor OBJECT ${jscexecutor_SRC})

target_include_directories(jscexecutor PRIVATE ${CMAKE_CURRENT_SOURCE_DIR})
target_merge_so(jscexecutor)

if(ANDROID_NDK_REVISION VERSION_LESS "23.0.0")
  set(LIB_UNWIND gcc)
else()
  set(LIB_UNWIND unwind)
endif()

target_link_libraries(jscexecutor
        ${LIB_UNWIND}
        jscruntime
        jsi
        reactnative)
target_compile_reactnative_options(jscexecutor PRIVATE)

----------------------------------------

TITLE: JavaScript Eval Restrictions in CSP
DESCRIPTION: Demonstrates JavaScript functions that are typically blocked by Content Security Policy due to string evaluation risks. Includes eval(), new Function(), and string-based setTimeout/setInterval calls that should be avoided for security.

LANGUAGE: javascript
CODE:
eval()
new Function()
setTimeout([string], ...)
setInterval([string], ...)

----------------------------------------

TITLE: Configuring CMake for Hermes Tooling Library in React Native
DESCRIPTION: This CMake snippet sets up the 'hermestooling' shared library, which merges various Hermes-related libraries for React Native. It includes object files, links dependencies, sets include directories, and applies compile options.

LANGUAGE: CMake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)
include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

add_library(hermestooling
        SHARED
        $<TARGET_OBJECTS:bridgelesshermes>
        $<TARGET_OBJECTS:hermes_executor>
        $<TARGET_OBJECTS:hermes_executor_common>
        $<TARGET_OBJECTS:hermes_inspector_modern>
        $<TARGET_OBJECTS:hermesinstancejni>
        $<TARGET_OBJECTS:jni_lib_merge_glue>
        $<TARGET_OBJECTS:jsijniprofiler>
)
target_merge_so(hermestooling)
target_link_libraries(hermestooling
        PUBLIC
        reactnative
        jsi
        hermes-engine::libhermes
)
target_include_directories(hermestooling
        PUBLIC
        $<TARGET_PROPERTY:bridgelesshermes,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:hermes_executor,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:hermes_executor_common,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:hermes_inspector_modern,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:hermesinstancejni,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:jsijniprofiler,INTERFACE_INCLUDE_DIRECTORIES>
)
target_compile_reactnative_options(hermestooling PRIVATE)

----------------------------------------

TITLE: Restricting Attribution Reporting in iframes with HTML
DESCRIPTION: Example of how to disable the Attribution Reporting API in an iframe using the allow attribute.

LANGUAGE: html
CODE:
<iframe src="..." allow="attribution-reporting 'none'">

----------------------------------------

TITLE: Configuring and Building Hermes Executor Library with CMake
DESCRIPTION: This CMake script sets up the build configuration for the Hermes executor library in React Native. It defines the library target, includes necessary files, sets compilation flags, and links required dependencies. The script also enables debugging support for debug builds.

LANGUAGE: CMake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

file(GLOB_RECURSE hermes_executor_SRC CONFIGURE_DEPENDS *.cpp)

include(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)
include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

add_library(hermes_executor
        OBJECT
        ${hermes_executor_SRC}
)
target_merge_so(hermes_executor)
target_include_directories(hermes_executor PRIVATE .)
target_link_libraries(
        hermes_executor
        hermes_executor_common
        hermes-engine::libhermes
        jsi
        reactnative
)
target_compile_reactnative_options(hermes_executor PRIVATE)
target_compile_options(hermes_executor PRIVATE $<$<CONFIG:Debug>:-DHERMES_ENABLE_DEBUGGER=1>)

----------------------------------------

TITLE: Commenting on Disabled getUserInfo() Function in React Native
DESCRIPTION: This comment explains that the getUserInfo() function is disabled because the user is signed out of the Identity Provider (IDP). It suggests that user authentication is required before this function can be used.

LANGUAGE: Markdown
CODE:
# getUserInfo() is disabled because the IDP Sign-In Status is signed-out.

----------------------------------------

TITLE: Configuring React Native Feature Flags JNI Library in CMake
DESCRIPTION: This CMake snippet configures the build for the React Native Feature Flags JNI library. It sets the minimum CMake version, includes utility files, defines the library target, sets include directories, links dependencies, and applies React Native-specific compilation options.

LANGUAGE: CMake
CODE:
cmake_minimum_required(VERSION 3.13)

include(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)
include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_featureflagsjni_SRCS CONFIGURE_DEPENDS *.cpp)

add_library(
        react_featureflagsjni
        OBJECT
        ${react_featureflagsjni_SRCS}
)

target_include_directories(react_featureflagsjni PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})

target_link_libraries(
        react_featureflagsjni
        fbjni
        react_featureflags
        reactnativejni
)

target_merge_so(react_featureflagsjni)
target_compile_reactnative_options(react_featureflagsjni PRIVATE "ReactNative")

----------------------------------------

TITLE: Associating Labels with Form Fields in React Native JSX
DESCRIPTION: This snippet demonstrates two methods to properly associate labels with form fields in React Native JSX. The first method involves nesting the input within the label, while the second uses matching 'for' and 'id' attributes.

LANGUAGE: jsx
CODE:
// Method 1: Nesting input in label
<label>
  Field Label
  <input type="text" />
</label>

// Method 2: Using 'for' and 'id' attributes
<label for="fieldId">Field Label</label>
<input id="fieldId" type="text" />

----------------------------------------

TITLE: Configuring React Native DevSupport JNI Library Build
DESCRIPTION: Defines CMake build configuration for the React Native DevSupport JNI library. Sets minimum CMake version, enables verbose output, includes required utility files, and configures library compilation with necessary dependencies and options.

LANGUAGE: cmake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)
include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_devsupportjni_SRC CONFIGURE_DEPENDS *.cpp)

add_library(react_devsupportjni OBJECT ${react_devsupportjni_SRC})

target_merge_so(react_devsupportjni)

target_include_directories(react_devsupportjni PUBLIC .)

target_link_libraries(react_devsupportjni
        fbjni
        jsinspector)

target_compile_reactnative_options(react_devsupportjni PRIVATE "ReactNative")

----------------------------------------

TITLE: Implementing Autocomplete in React Native Form Elements
DESCRIPTION: Demonstrates how to properly configure form fields with autocomplete attributes to support browser autofill functionality. The autocomplete attribute should be added to form elements that have id or name attributes.

LANGUAGE: jsx
CODE:
<TextInput
  id="email"
  name="email"
  autocomplete="email"
/>

----------------------------------------

TITLE: Disabling Compression Dictionary in React Native
DESCRIPTION: A comment in the configuration file indicates that the compression dictionary feature is disabled by project settings.

LANGUAGE: Markdown
CODE:
# Compression Dictionary is disabled by settings

----------------------------------------

TITLE: Importing Hermes Shared Library with CMake
DESCRIPTION: Configures CMake to import the Hermes JavaScript engine as a shared library. Sets the minimum CMake version to 3.13, enables verbose build output, and specifies the library location based on the Android ABI.

LANGUAGE: cmake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

add_library(hermes SHARED IMPORTED GLOBAL)
set_target_properties(hermes
        PROPERTIES
        IMPORTED_LOCATION
        ${CMAKE_CURRENT_SOURCE_DIR}/jni/${ANDROID_ABI}/libhermes.so)

----------------------------------------

TITLE: Describing Non-standard Autocomplete Attribute Usage in React Native
DESCRIPTION: This snippet explains the issue of using non-standard autocomplete attribute values in React Native form fields. It emphasizes the potential problems with browser autofill functionality and suggests using valid autocomplete values as a solution.

LANGUAGE: markdown
CODE:
# Non-standard `autocomplete` attribute value

An `autocomplete` attribute of a form field uses a non-standard HTML value. This might prevent the browser from correctly autofilling the form.

To fix this issue, use a valid `autocomplete` value.

----------------------------------------

TITLE: Creating React Native Unit Test Executable
DESCRIPTION: Defines and configures the React Native unit test executable with its source files and dependencies.

LANGUAGE: CMake
CODE:
add_executable(reactnative_unittest
  ${REACT_COMMON_DIR}/cxxreact/tests/jsarg_helpers.cpp
  ${REACT_COMMON_DIR}/cxxreact/tests/jsbigstring.cpp
  # ... [additional test source files]
  )

target_compile_reactnative_options(reactnative_unittest PRIVATE)
target_compile_options(reactnative_unittest PRIVATE -DHERMES_ENABLE_DEBUGGER)

target_link_libraries(reactnative_unittest
  fabricjni
  folly_runtime
  glog
  glog_init
  gtest_main
  hermes-engine::libhermes
  # ... [additional linked libraries]
)

----------------------------------------

TITLE: Handling getUserInfo() Failure in React Native
DESCRIPTION: This code snippet represents a comment explaining why the getUserInfo() function failed. It indicates that the failure occurred because none of the received accounts were identified as returning accounts.

LANGUAGE: JavaScript
CODE:
# getUserInfo() failed because no account received was a returning account.

----------------------------------------

TITLE: Configuring ccache and Build ID
DESCRIPTION: Sets up ccache if found and adds a build ID to shared libraries.

LANGUAGE: CMake
CODE:
find_program(CCACHE_FOUND ccache)
if(CCACHE_FOUND)
  set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ccache)
  set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK ccache)
endif(CCACHE_FOUND)

add_link_options(-Wl,--build-id)

----------------------------------------

TITLE: Including React Native Flags and Setting Paths
DESCRIPTION: Includes React Native flags and converts input paths to CMake format with forward slashes.

LANGUAGE: CMake
CODE:
include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(TO_CMAKE_PATH "${REACT_ANDROID_DIR}" REACT_ANDROID_DIR)
file(TO_CMAKE_PATH "${REACT_BUILD_DIR}" REACT_BUILD_DIR)
file(TO_CMAKE_PATH "${REACT_COMMON_DIR}" REACT_COMMON_DIR)

----------------------------------------

TITLE: Setting Request Mode for CORS Bypass
DESCRIPTION: Demonstrates how to set a request's mode to 'no-cors' to bypass CORS requirements when an opaque response is acceptable. Note that this approach makes the response content inaccessible.

LANGUAGE: javascript
CODE:
no-cors

----------------------------------------

TITLE: Configuring Gradle for Custom CMake Integration
DESCRIPTION: Example showing how to extend the Android Gradle build configuration to use a custom CMake file location.

LANGUAGE: gradle
CODE:
android {
    // Other config here...
    externalNativeBuild {
        cmake {
            path "src/main/jni/CMakeLists.txt"
        }
    }
}

----------------------------------------

TITLE: Configuring CMake Build for React Native Bridgeless
DESCRIPTION: Sets up CMake build configuration for React Native bridgeless mode. Defines compilation options, includes directories, and specifies library dependencies. Includes debug configuration for Hermes debugger support.

LANGUAGE: cmake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB bridgeless_SRC "*.cpp")

add_library(bridgeless
        OBJECT
        ${bridgeless_SRC}
)
target_compile_reactnative_options(bridgeless PRIVATE)
target_compile_options(bridgeless PRIVATE $<$<CONFIG:Debug>:-DHERMES_ENABLE_DEBUGGER=1>)
target_include_directories(bridgeless PUBLIC .)

target_link_libraries(
        bridgeless
        jserrorhandler
        fabricjni
        react_featureflagsjni
        turbomodulejsijni
        jsi
        jsitooling
        jsireact
        react_utils
        jsinspector
        react_featureflags
        react_performance_timeline
        react_utils
)

----------------------------------------

TITLE: Configuring CMake Build for React Native Code Generation
DESCRIPTION: Sets up CMake build configuration for React Native C++ code generation, including compiler flags, include directories, and library dependencies. Targets C++20 standard with exceptions and RTTI enabled.

LANGUAGE: cmake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

file(GLOB react_codegen_SRCS CONFIGURE_DEPENDS *.cpp react/renderer/components/OSSLibraryExampleSpec/*.cpp)

add_library(
  react_codegen_OSSLibraryExampleSpec
  OBJECT
  ${react_codegen_SRCS}
)

target_include_directories(react_codegen_OSSLibraryExampleSpec PUBLIC . react/renderer/components/OSSLibraryExampleSpec)

target_link_libraries(
  react_codegen_OSSLibraryExampleSpec
  fbjni
  jsi
  reactnative
)

target_compile_options(
  react_codegen_OSSLibraryExampleSpec
  PRIVATE
  -DLOG_TAG=\"ReactNative\"
  -fexceptions
  -frtti
  -std=c++20
  -Wall
)

----------------------------------------

TITLE: Configuring CMake Text Input Component Build
DESCRIPTION: Configures CMake build settings for React Native text input component, including source files, include directories, and library dependencies. Sets up compiler flags and links required libraries for the Fabric renderer architecture.

LANGUAGE: cmake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB rrc_textinput_SRC CONFIGURE_DEPENDS *.cpp platform/android/react/renderer/components/androidtextinput/*.cpp)
add_library(rrc_textinput OBJECT ${rrc_textinput_SRC})

target_include_directories(rrc_textinput PUBLIC . ${CMAKE_CURRENT_SOURCE_DIR}/platform/android/)

target_link_libraries(rrc_textinput
        glog
        folly_runtime
        glog_init
        jsi
        react_debug
        react_renderer_attributedstring
        react_renderer_componentregistry
        react_renderer_core
        react_renderer_debug
        react_renderer_graphics
        react_renderer_imagemanager
        react_renderer_mapbuffer
        react_renderer_mounting
        react_renderer_textlayoutmanager
        react_renderer_uimanager
        react_utils
        rrc_image
        rrc_text
        rrc_view
        yoga
)
target_compile_reactnative_options(rrc_textinput PRIVATE "Fabric")
target_compile_options(rrc_textinput PRIVATE -Wpedantic)

----------------------------------------

TITLE: Testing React Native JS Polyfills Package
DESCRIPTION: Commands to run tests for the polyfills package. Requires execution from the React Native root folder and includes dependency installation.

LANGUAGE: bash
CODE:
yarn

LANGUAGE: bash
CODE:
yarn jest packages/polyfills

----------------------------------------

TITLE: Configuring CMake for React Native Component Registry
DESCRIPTION: This CMake snippet sets up the build configuration for the React Native component registry library. It defines the minimum CMake version, enables verbose output, includes custom flags, gathers source files, and sets up the library with its dependencies and compilation options.

LANGUAGE: CMake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_renderer_componentregistry_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_renderer_componentregistry OBJECT ${react_renderer_componentregistry_SRC})

target_include_directories(react_renderer_componentregistry PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(react_renderer_componentregistry
        folly_runtime
        glog_init
        jsi
        react_debug
        react_renderer_core
        react_renderer_debug
        react_utils
        rrc_legacyviewmanagerinterop
)
target_compile_reactnative_options(react_renderer_componentregistry PRIVATE "Fabric")
target_compile_options(react_renderer_componentregistry PRIVATE -Wpedantic)

----------------------------------------

TITLE: Configuring CMake for JSInspector Tracing Library in React Native
DESCRIPTION: This CMake snippet sets up the build configuration for the jsinspector_tracing library. It includes necessary files, defines the library target, sets include directories, links dependencies, and configures compiler options.

LANGUAGE: CMake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)
include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB jsinspector_tracing_SRC CONFIGURE_DEPENDS *.cpp)

add_library(jsinspector_tracing OBJECT ${jsinspector_tracing_SRC})
target_merge_so(jsinspector_tracing)

target_include_directories(jsinspector_tracing PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(jsinspector_tracing
        folly_runtime
        oscompat
)
target_compile_reactnative_options(jsinspector_tracing PRIVATE)
target_compile_options(jsinspector_tracing PRIVATE -Wpedantic)

----------------------------------------

TITLE: Configuring CMake for React Native CSS Renderer
DESCRIPTION: This CMake script sets up the build configuration for the React Native CSS renderer. It determines if the library should be interface-only or object-based, sets up include directories, links dependencies, and applies compile options.

LANGUAGE: CMake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_renderer_css_SRC CONFIGURE_DEPENDS *.cpp)

# We need to create library as INTERFACE if it is header only
if("${react_renderer_css_SRC}" STREQUAL "")
  add_library(react_renderer_css INTERFACE)

  target_include_directories(react_renderer_css INTERFACE ${REACT_COMMON_DIR})
  target_link_libraries(react_renderer_css INTERFACE
        fast_float
        glog
        react_debug
        react_utils)
  target_compile_reactnative_options(react_renderer_css INTERFACE "Fabric")
  target_compile_options(react_renderer_css INTERFACE -Wpedantic)
else()
  add_library(react_renderer_css OBJECT ${react_renderer_css_SRC})

  target_include_directories(react_renderer_css PUBLIC ${REACT_COMMON_DIR})
  target_link_libraries(react_renderer_css
        fast_float
        glog
        react_debug
        react_utils)
  target_compile_reactnative_options(react_renderer_css PRIVATE "Fabric")
  target_compile_options(react_renderer_css PRIVATE -Wpedantic)
endif()

----------------------------------------

TITLE: Configuring and Building React Native UIManager Library with CMake
DESCRIPTION: This CMake script sets up the build configuration for the React Native UIManager library. It includes necessary files, defines the library target, sets include directories, links required libraries, and applies specific compilation options.

LANGUAGE: CMake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_renderer_uimanager_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_renderer_uimanager OBJECT ${react_renderer_uimanager_SRC})

target_include_directories(react_renderer_uimanager PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(react_renderer_uimanager
        glog
        folly_runtime
        jsi
        react_cxxreact
        react_debug
        react_featureflags
        react_renderer_componentregistry
        react_renderer_consistency
        react_renderer_uimanager_consistency
        react_renderer_core
        react_renderer_debug
        react_renderer_dom
        react_renderer_graphics
        react_renderer_leakchecker
        react_renderer_runtimescheduler
        react_renderer_mounting
        rrc_root
        rrc_view
        runtimeexecutor
)
target_compile_reactnative_options(react_renderer_uimanager PRIVATE "Fabric")
target_compile_options(react_renderer_uimanager PRIVATE -Wno-unused-local-typedef)
target_compile_options(react_renderer_uimanager PRIVATE -Wpedantic)

----------------------------------------

TITLE: Configuring CMake Build Settings for Yoga in React Native
DESCRIPTION: Sets up CMake build configuration with release mode optimizations enabled for all builds to improve Yoga performance in React Native. Note that this trades debugging capability for better performance.

LANGUAGE: cmake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

# Yoga by default does not enable optimizations in debug builds. Enable -O2
# for all builds in RN for faster debug app performance (at the cost of not
# being able to debug inside Yoga)
set(CMAKE_BUILD_TYPE Release)

add_subdirectory(yoga)

----------------------------------------

TITLE: Configuring Bridgeless Hermes Library Build in CMake
DESCRIPTION: Sets up the build configuration for the Bridgeless Hermes library. It includes necessary dependencies like hermes-engine, JSI, and React Native core. The configuration also handles debug builds with special compiler options for the debugger.

LANGUAGE: cmake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB_RECURSE bridgeless_hermes_SRC CONFIGURE_DEPENDS *.cpp)
add_library(
        bridgelesshermes
        OBJECT
        ${bridgeless_hermes_SRC}
)
target_include_directories(bridgelesshermes PUBLIC .)

target_link_libraries(bridgelesshermes
        hermes-engine::libhermes
        hermes_executor_common
        hermes_inspector_modern
        jsi
        jsinspector
        reactnative
)

target_compile_reactnative_options(bridgelesshermes PRIVATE "Fabric")
if(${CMAKE_BUILD_TYPE} MATCHES Debug)
        target_compile_options(
                bridgelesshermes
                PRIVATE
                -DHERMES_ENABLE_DEBUGGER=1
        )
endif()

----------------------------------------

TITLE: Configuring CMake for React Native Text Layout Manager Library
DESCRIPTION: This CMake script sets up the compilation of the React Native Text Layout Manager library. It defines the source files, include directories, linked libraries, and compiler options for the project.

LANGUAGE: CMake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_renderer_textlayourmanager_SRC CONFIGURE_DEPENDS
        *.cpp
        platform/android/react/renderer/textlayoutmanager/*.cpp)

add_library(react_renderer_textlayoutmanager
        OBJECT
        ${react_renderer_textlayourmanager_SRC})

target_include_directories(react_renderer_textlayoutmanager
        PUBLIC
          .
          ${REACT_COMMON_DIR}
          ${CMAKE_CURRENT_SOURCE_DIR}/platform/android/
)

target_link_libraries(react_renderer_textlayoutmanager
        glog
        fbjni
        folly_runtime
        mapbufferjni
        react_debug
        react_renderer_attributedstring
        react_renderer_componentregistry
        react_renderer_core
        react_renderer_debug
        react_renderer_graphics
        react_renderer_mapbuffer
        react_renderer_mounting
        react_renderer_telemetry
        react_utils
        reactnativejni
        yoga
)
target_compile_reactnative_options(react_renderer_textlayoutmanager PRIVATE "Fabric")
target_compile_options(react_renderer_textlayoutmanager PRIVATE -Wpedantic)

----------------------------------------

TITLE: Configuring CMake for React Native Native Module Core Library
DESCRIPTION: This CMake script sets up the build configuration for the react_nativemodule_core library. It specifies source files, include directories, linked libraries, and compilation options. The library is built as an OBJECT library and includes various React Native dependencies.

LANGUAGE: CMake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_nativemodule_core_SRC CONFIGURE_DEPENDS
        ReactCommon/*.cpp
        platform/android/ReactCommon/*.cpp)
add_library(react_nativemodule_core
        OBJECT
        ${react_nativemodule_core_SRC})

target_include_directories(react_nativemodule_core
        PUBLIC
          ${CMAKE_CURRENT_SOURCE_DIR}
          ${CMAKE_CURRENT_SOURCE_DIR}/platform/android/
        )

target_link_libraries(react_nativemodule_core
        fbjni
        folly_runtime
        glog
        jsi
        react_bridging
        react_debug
        react_utils
        react_featureflags
        reactperflogger
        reactnativejni)
target_compile_reactnative_options(react_nativemodule_core PRIVATE "ReactNative")
target_compile_options(react_nativemodule_core PRIVATE -Wpedantic)

----------------------------------------

TITLE: Configuring and Building React Native Runtime Scheduler Library with CMake
DESCRIPTION: This CMake script sets up the build configuration for the React Native runtime scheduler library. It defines the source files, include directories, linked libraries, and compilation options. The script also sets specific React Native flags and pedantic compilation warnings.

LANGUAGE: CMake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_renderer_runtimescheduler_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_renderer_runtimescheduler STATIC ${react_renderer_runtimescheduler_SRC})

target_include_directories(react_renderer_runtimescheduler PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(react_renderer_runtimescheduler
        callinvoker
        jsi
        react_debug
        react_performance_timeline
        react_renderer_consistency
        react_renderer_debug
        react_timing
        react_utils
        react_featureflags
        runtimeexecutor
        jsinspector_tracing)
target_compile_reactnative_options(react_renderer_runtimescheduler PRIVATE "Fabric")
target_compile_options(react_renderer_runtimescheduler PRIVATE -Wpedantic)

----------------------------------------

TITLE: Configuring React Native Debug Library Build
DESCRIPTION: CMake configuration that sets up the react_debug library with required dependencies, compilation flags, and build options. It includes Folly runtime and logging dependencies, sets pedantic warnings, and configures debug/release specific options.

LANGUAGE: cmake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_debug_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_debug OBJECT ${react_debug_SRC})

target_include_directories(react_debug PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(react_debug log folly_runtime)

target_compile_reactnative_options(react_debug PRIVATE "Fabric")
target_compile_options(react_debug PRIVATE -Wpedantic)
if(NOT ${CMAKE_BUILD_TYPE} MATCHES Debug)
        target_compile_options(react_debug PUBLIC -DNDEBUG)
endif()

----------------------------------------

TITLE: Configuring React Native Element Renderer Build in CMake
DESCRIPTION: Sets up CMake build configuration for the React Native element renderer library. Includes setting minimum CMake version, verbose output, linking required dependencies, and setting compiler options with special focus on Fabric architecture support.

LANGUAGE: cmake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_renderer_element_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_renderer_element OBJECT ${react_renderer_element_SRC})

target_include_directories(react_renderer_element PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(react_renderer_element
        folly_runtime
        glog
        react_renderer_core
        react_renderer_componentregistry
)
target_compile_reactnative_options(react_renderer_element PRIVATE "Fabric")
target_compile_options(react_renderer_element PRIVATE -Wpedantic)

----------------------------------------

TITLE: Configuring React Native Debug Renderer Build
DESCRIPTION: Configures CMake build settings for the React Native debug renderer library. Sets up include directories, links required libraries, and configures compiler options with debugging support.

LANGUAGE: cmake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_renderer_debug_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_renderer_debug OBJECT ${react_renderer_debug_SRC})

target_include_directories(react_renderer_debug PUBLIC ${REACT_COMMON_DIR})
target_link_libraries(react_renderer_debug folly_runtime react_debug)
target_compile_reactnative_options(react_renderer_debug PRIVATE "Fabric")
target_compile_options(react_renderer_debug PRIVATE -Wpedantic)

----------------------------------------

TITLE: Configuring CMake for React Native Renderer Observers Events Library
DESCRIPTION: This CMake snippet sets up the build configuration for the react_renderer_observers_events library. It includes necessary files, defines the library target, sets include directories, links dependencies, and configures compiler options.

LANGUAGE: CMake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_renderer_observers_events_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_renderer_observers_events OBJECT ${react_renderer_observers_events_SRC})

target_include_directories(react_renderer_observers_events PUBLIC ${REACT_COMMON_DIR})
target_link_libraries(react_renderer_observers_events
        react_performance_timeline
        react_timing
        react_renderer_core
        react_renderer_runtimescheduler
        react_featureflags
        react_renderer_uimanager
        react_utils)
target_compile_reactnative_options(react_renderer_observers_events PRIVATE "Fabric")
target_compile_options(react_renderer_observers_events PRIVATE -Wpedantic)

----------------------------------------

TITLE: Configuring CMake for React Native Renderer Consistency Library
DESCRIPTION: This CMake snippet sets up the build configuration for the React Native renderer consistency library. It defines the minimum CMake version, enables verbose output, includes React Native specific flags, and creates an object library from the source files with specific compilation options.

LANGUAGE: CMake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_renderer_consistency_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_renderer_consistency OBJECT ${react_renderer_consistency_SRC})

target_include_directories(react_renderer_consistency PUBLIC ${REACT_COMMON_DIR})
target_compile_reactnative_options(react_renderer_consistency PRIVATE "Fabric")
target_compile_options(react_renderer_consistency PRIVATE -Wpedantic)

----------------------------------------

TITLE: Configuring React Native Renderer Core Build Settings
DESCRIPTION: Sets up CMake build configuration for React Native's renderer core library. Defines include directories, links required dependencies, and sets compilation options for the react_renderer_core target.

LANGUAGE: cmake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_renderer_core_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_renderer_core OBJECT ${react_renderer_core_SRC})

target_include_directories(react_renderer_core PUBLIC ${REACT_COMMON_DIR})
target_link_libraries(react_renderer_core
        folly_runtime
        glog
        jsi
        logger
        react_debug
        react_featureflags
        react_renderer_debug
        react_renderer_graphics
        react_renderer_mapbuffer
        react_renderer_runtimescheduler
        react_utils
        runtimeexecutor)
target_compile_reactnative_options(react_renderer_core PRIVATE "Fabric")
target_compile_options(react_renderer_core PRIVATE -Wpedantic)

----------------------------------------

TITLE: Configuring CMake for React Native ProgressBar Component
DESCRIPTION: This CMake script sets up the build configuration for the React Native ProgressBar component. It defines the source files, include directories, and linked libraries required to build the component as part of the React Native Fabric renderer. The script also sets compiler flags and options specific to the Fabric architecture.

LANGUAGE: CMake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB rrc_progressbar_SRC CONFIGURE_DEPENDS android/react/renderer/components/progressbar/*.cpp)
add_library(rrc_progressbar OBJECT ${rrc_progressbar_SRC})

target_include_directories(rrc_progressbar
        PUBLIC
        ${CMAKE_CURRENT_SOURCE_DIR}/android/
)

target_link_libraries(rrc_progressbar
        glog
        fbjni
        folly_runtime
        glog_init
        react_codegen_rncore
        react_debug
        react_renderer_componentregistry
        react_renderer_core
        react_renderer_debug
        react_renderer_graphics
        react_renderer_uimanager
        reactnativejni
        rrc_view
        yoga
)
target_compile_reactnative_options(rrc_progressbar PRIVATE "Fabric")
target_compile_options(rrc_progressbar PRIVATE -Wpedantic)

----------------------------------------

TITLE: Defining and Configuring libreactnative.so
DESCRIPTION: Creates the main React Native shared library target and configures its dependencies, compile options, and include directories.

LANGUAGE: CMake
CODE:
add_library(reactnative
        SHARED
          $<TARGET_OBJECTS:bridgeless>
          $<TARGET_OBJECTS:bridgelessnativeviewconfig>
          # ... [additional target objects]
)
target_merge_so(reactnative)

target_link_libraries(reactnative
          PUBLIC
            android
            double-conversion
            fbjni
            folly_runtime
            glog
            jsi
            log
            yogacore
)

target_compile_reactnative_options(reactnative PRIVATE)

target_include_directories(reactnative
        PUBLIC
        $<TARGET_PROPERTY:bridgeless,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:bridgelessnativeviewconfig,INTERFACE_INCLUDE_DIRECTORIES>
        # ... [additional include directories]
)

----------------------------------------

TITLE: Configuring CMake Build for Legacy View Manager Interop Library
DESCRIPTION: Sets up CMake configuration for building the legacy view manager interop library. Includes setting minimum CMake version, verbose output, gathering source files, and configuring library dependencies including glog, folly, JSI, and Yoga.

LANGUAGE: cmake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB rrc_legacyviewmanagerinterop_SRC CONFIGURE_DEPENDS *.cpp)
add_library(rrc_legacyviewmanagerinterop OBJECT ${rrc_legacyviewmanagerinterop_SRC})

target_include_directories(rrc_legacyviewmanagerinterop PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(rrc_legacyviewmanagerinterop
        glog
        glog_init
        folly_runtime
        jsi
        react_renderer_core
        rrc_view
        yoga
)
target_compile_reactnative_options(rrc_legacyviewmanagerinterop PRIVATE "Fabric")
target_compile_options(rrc_legacyviewmanagerinterop PRIVATE -Wpedantic)

----------------------------------------

TITLE: Configuring React Native C++ Module Build Settings
DESCRIPTION: Sets up core CMake configuration including compiler options and dependencies for a React Native C++ module. Configures compilation with C++20 support, exceptions, and RTTI enabled, while linking against core React Native libraries.

LANGUAGE: cmake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

add_compile_options(
        -fexceptions
        -frtti
        -std=c++20
        -Wall
        -Wpedantic
        -DFOLLY_NO_CONFIG=1
        -DLOG_TAG=\"ReactNative\")

file(GLOB nativecxxmoduleexample_SRC CONFIGURE_DEPENDS *.cpp)
add_library(nativecxxmoduleexample STATIC ${nativecxxmoduleexample_SRC})

target_include_directories(nativecxxmoduleexample PUBLIC .)

target_link_libraries(nativecxxmoduleexample
        fbjni
        jsi
        reactnative
)

if (TARGET react_codegen_AppSpecs)
    target_include_directories(react_codegen_AppSpecs PUBLIC .)
    target_link_libraries(nativecxxmoduleexample react_codegen_AppSpecs)
endif ()

----------------------------------------

TITLE: Configuring CMake for React Native Image Module
DESCRIPTION: This CMake script sets up the compilation of the React Native image module. It defines the source files, includes necessary directories, links required libraries, and sets compiler options for the 'rrc_image' target.

LANGUAGE: CMake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB rrc_image_SRC CONFIGURE_DEPENDS *.cpp)
add_library(rrc_image OBJECT ${rrc_image_SRC})

target_include_directories(rrc_image PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(rrc_image
        glog
        folly_runtime
        glog_init
        jsi
        react_debug
        react_utils
        react_renderer_core
        react_renderer_debug
        react_renderer_graphics
        react_renderer_imagemanager
        react_renderer_mapbuffer
        rrc_view
        yoga
)
target_compile_reactnative_options(rrc_image PRIVATE "Fabric")
target_compile_options(rrc_image PRIVATE -Wpedantic)

----------------------------------------

TITLE: Configuring CMake for JSInspector Network Library in React Native
DESCRIPTION: This CMake script sets up the build environment for the JSInspector Network library. It specifies compiler options, includes custom utilities, defines the library target, and sets up its dependencies. The script is designed to work within the React Native project structure.

LANGUAGE: CMake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)

add_compile_options(
        -fexceptions
        -std=c++20
        -Wall
        -Wpedantic)

file(GLOB jsinspector_network_SRC CONFIGURE_DEPENDS *.cpp)

add_library(jsinspector_network OBJECT ${jsinspector_network_SRC})
target_merge_so(jsinspector_network)

target_include_directories(jsinspector_network PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(jsinspector_network
        folly_runtime
        jsinspector_cdp
)

----------------------------------------

TITLE: Configuring React Native Native Component Build
DESCRIPTION: CMake configuration that creates and configures the rrc_native library. It sets up include directories, links required dependencies like folly_runtime and jsi, and configures compilation options including Fabric support.

LANGUAGE: cmake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB rrc_native_SRC CONFIGURE_DEPENDS *.cpp)
add_library(rrc_native OBJECT ${rrc_native_SRC})

target_include_directories(rrc_native PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(rrc_native
        folly_runtime
        glog_init
        jsi
        react_debug
        react_renderer_core
        react_renderer_debug
        react_utils
        callinvoker
)
target_compile_reactnative_options(rrc_native PRIVATE "Fabric")
target_compile_options(rrc_native PRIVATE -Wpedantic)

----------------------------------------

TITLE: Defining Helper Functions for Adding Subdirectories
DESCRIPTION: Creates helper functions to add subdirectories for React Android, React Build, and React Common components.

LANGUAGE: CMake
CODE:
function(add_react_android_subdir relative_path)
  add_subdirectory(${REACT_ANDROID_DIR}/${relative_path} ReactAndroid/${relative_path})
endfunction()

function(add_react_build_subdir relative_path)
  add_subdirectory(${REACT_BUILD_DIR}/${relative_path} build/${relative_path})
endfunction()

function(add_react_third_party_ndk_subdir relative_path)
  add_react_build_subdir(third-party-ndk/${relative_path})
endfunction()

function(add_react_common_subdir relative_path)
  add_subdirectory(${REACT_COMMON_DIR}/${relative_path} ReactCommon/${relative_path})
endfunction()

----------------------------------------

TITLE: Configuring CMake for React Native Idle Callbacks Module
DESCRIPTION: This CMake snippet sets up the build configuration for a React Native module handling idle callbacks. It defines the minimum CMake version, includes necessary files, sets up the library target, and configures compilation options and linked libraries.

LANGUAGE: CMake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)
file(GLOB react_nativemodule_idlecallbacks_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_nativemodule_idlecallbacks OBJECT ${react_nativemodule_idlecallbacks_SRC})

target_include_directories(react_nativemodule_idlecallbacks PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(react_nativemodule_idlecallbacks
        react_codegen_rncore
        react_cxxreact
        react_renderer_runtimescheduler
)
target_compile_reactnative_options(react_nativemodule_idlecallbacks PRIVATE "ReactNative")
target_compile_options(react_nativemodule_idlecallbacks PRIVATE -Wpedantic)

----------------------------------------

TITLE: Adding React Native Dependencies and Targets
DESCRIPTION: Adds third-party prefabs, downloaded targets, common targets, and ReactAndroid JNI targets to the project.

LANGUAGE: CMake
CODE:
find_package(hermes-engine REQUIRED CONFIG)
find_package(fbjni REQUIRED CONFIG)
find_package(jsc-android REQUIRED CONFIG)
add_library(fbjni ALIAS fbjni::fbjni)
add_library(jsc ALIAS jsc-android::jsc)

# Third-party downloaded targets
add_react_third_party_ndk_subdir(glog)
add_react_third_party_ndk_subdir(boost)
add_react_third_party_ndk_subdir(double-conversion)
add_react_third_party_ndk_subdir(fast_float)
add_react_third_party_ndk_subdir(fmt)
add_react_third_party_ndk_subdir(folly)
add_react_third_party_ndk_subdir(googletest)

# Common targets
add_react_common_subdir(yoga)
# ... [additional common targets]

# ReactAndroid JNI targets
add_react_build_subdir(generated/source/codegen/jni)
add_react_android_subdir(src/main/jni/first-party/fbgloginit)
# ... [additional JNI targets]

----------------------------------------

TITLE: Configuring CMake Build for React Native DevTools Runtime Settings
DESCRIPTION: Sets up CMake configuration for building the DevTools Runtime Settings native module. Includes setting minimum CMake version, verbose output, compiler flags, and linking dependencies.

LANGUAGE: cmake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_nativemodule_devtoolsruntimesettings_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_nativemodule_devtoolsruntimesettings OBJECT ${react_nativemodule_devtoolsruntimesettings_SRC})

target_include_directories(react_nativemodule_devtoolsruntimesettings PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(react_nativemodule_devtoolsruntimesettings
        react_devtoolsruntimesettingscxx
)
target_compile_reactnative_options(react_nativemodule_devtoolsruntimesettings PRIVATE "ReactNative")
target_compile_options(react_nativemodule_devtoolsruntimesettings PRIVATE -Wpedantic)

----------------------------------------

TITLE: Configuring React Native DOM Module Build
DESCRIPTION: Configures CMake build settings for React Native DOM native module. Sets up include directories, links required libraries, and defines compilation options. Requires CMake 3.13 or higher and depends on React Native common utilities.

LANGUAGE: cmake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_nativemodule_dom_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_nativemodule_dom
        OBJECT
            ${react_nativemodule_dom_SRC}
            $<TARGET_OBJECTS:react_codegen_rncore>
)

target_include_directories(react_nativemodule_dom PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(react_nativemodule_dom
        rrc_root
        react_codegen_rncore
        react_cxxreact
        react_renderer_dom
        react_renderer_uimanager
)
target_compile_reactnative_options(react_nativemodule_dom PRIVATE "ReactNative")
target_compile_options(react_nativemodule_dom PRIVATE -Wpedantic)

----------------------------------------

TITLE: Configuring React Native Bridging Library Build
DESCRIPTION: Sets up CMake build configuration for React Native bridging library. Includes setting minimum CMake version, verbose output, compilation flags, and linking required dependencies like JSI and CallInvoker.

LANGUAGE: cmake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_bridging_SRC CONFIGURE_DEPENDS *.cpp)

add_library(react_bridging OBJECT ${react_bridging_SRC})

target_include_directories(react_bridging PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(react_bridging jsi callinvoker)
target_compile_reactnative_options(react_bridging PRIVATE "ReactNative")
target_compile_options(react_bridging PRIVATE -Wpedantic)

----------------------------------------

TITLE: Configuring CMake for Sample TurboModule in React Native
DESCRIPTION: This CMake script sets up the build environment for a sample TurboModule in React Native. It defines the minimum CMake version, sets verbose output, includes React Native flags, and configures the sampleturbomodule library with necessary include directories and linked libraries.

LANGUAGE: CMake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB sampleturbomodule_SRC CONFIGURE_DEPENDS ReactCommon/*.cpp)
add_library(sampleturbomodule STATIC ${sampleturbomodule_SRC})

target_include_directories(sampleturbomodule PUBLIC .)

target_link_libraries(sampleturbomodule
        fbjni
        jsi
        reactnative
)

target_compile_reactnative_options(sampleturbomodule PRIVATE "ReactNative")
target_compile_options(sampleturbomodule PRIVATE -Wpedantic)

----------------------------------------

TITLE: Configuring CMake for JSInspector CDP Library in React Native
DESCRIPTION: This CMake script sets up the build configuration for the JSInspector CDP library. It specifies compilation options, includes necessary utilities, defines the library target, and sets up linking with required dependencies.

LANGUAGE: CMake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)

add_compile_options(
        -fexceptions
        -std=c++20
        -Wall
        -Wpedantic)

file(GLOB jsinspector_cdp_SRC CONFIGURE_DEPENDS *.cpp)

add_library(jsinspector_cdp OBJECT ${jsinspector_cdp_SRC})
target_merge_so(jsinspector_cdp)

target_include_directories(jsinspector_cdp PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(jsinspector_cdp
        folly_runtime
)

----------------------------------------

TITLE: Configuring CMake for React Native UIManager Consistency Module
DESCRIPTION: This CMake snippet sets up the build configuration for the React Native UIManager consistency module. It defines the minimum CMake version, includes necessary utilities, sets up source files, and configures compilation options and linked libraries.

LANGUAGE: CMake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_renderer_uimanager_consistency_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_renderer_uimanager_consistency OBJECT ${react_renderer_uimanager_consistency_SRC})

target_include_directories(react_renderer_uimanager_consistency PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(react_renderer_uimanager_consistency
        glog
        rrc_root
        react_renderer_consistency
        react_renderer_mounting)
target_compile_reactnative_options(react_renderer_uimanager_consistency PRIVATE "Fabric")
target_compile_options(react_renderer_uimanager_consistency PRIVATE -Wpedantic)

----------------------------------------

TITLE: Configuring Hermes Inspector Modern Library Build in CMake
DESCRIPTION: Configures the build settings for the Hermes Inspector Modern library. Sets up compilation options, includes necessary dependencies, and configures debug mode settings. The library is built from Chrome-related source files and links against Hermes engine, JSI, and React Native.

LANGUAGE: cmake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB hermesinspectormodern_SRC CONFIGURE_DEPENDS chrome/*.cpp)

add_library(hermes_inspector_modern
        OBJECT
        ${hermesinspectormodern_SRC})

target_compile_reactnative_options(hermes_inspector_modern PRIVATE)

if(${CMAKE_BUILD_TYPE} MATCHES Debug)
        target_compile_options(
                hermes_inspector_modern
                PRIVATE
                -DHERMES_ENABLE_DEBUGGER=1
        )
endif()

target_include_directories(hermes_inspector_modern PUBLIC ${REACT_COMMON_DIR})
target_link_libraries(hermes_inspector_modern
        hermes-engine::libhermes
        jsi
        reactnative)

----------------------------------------

TITLE: Metro Bundler Improvements
DESCRIPTION: Metro (formerly react-native-packager) was upgraded to v0.24.2 with performance enhancements.



----------------------------------------

TITLE: Configuring CMake for Hermes Instance JNI Library in React Native
DESCRIPTION: This CMake script sets up the build configuration for the Hermes Instance JNI library. It includes necessary dependencies, defines the library target, specifies source files, and sets compilation flags. The script also links required libraries and applies React Native-specific compile options.

LANGUAGE: CMake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)
include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB_RECURSE hermes_instance_jni_SRC CONFIGURE_DEPENDS *.cpp)

add_library(hermesinstancejni
        OBJECT
        ${hermes_instance_jni_SRC}
)
target_include_directories(hermesinstancejni PRIVATE .)
target_merge_so(hermesinstancejni)

target_link_libraries(hermesinstancejni
        hermes-engine::libhermes
        jsitooling
        fbjni
        bridgelesshermes
        reactnative
)

target_compile_reactnative_options(hermesinstancejni PRIVATE)
target_compile_options(hermesinstancejni PRIVATE $<$<CONFIG:Debug>:-DHERMES_ENABLE_DEBUGGER=1>)

----------------------------------------

TITLE: Upgrading to React 16.2
DESCRIPTION: React was upgraded to v16.2.0, bringing support for React Fragments.

LANGUAGE: JavaScript
CODE:
// Example of using React Fragment
<>
  <Text>Hello</Text>
  <Text>World</Text>
</>

----------------------------------------

TITLE: Configuring React Native Performance Timeline Library Build
DESCRIPTION: Sets up CMake build configuration for the React Native performance timeline library. Defines compilation options, includes necessary directories, and links required dependencies like jsinspector_tracing and reactperflogger.

LANGUAGE: cmake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_performance_timeline_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_performance_timeline OBJECT ${react_performance_timeline_SRC})

target_compile_reactnative_options(react_performance_timeline PRIVATE "ReactNative")
target_compile_options(react_performance_timeline PRIVATE -Wpedantic)

target_include_directories(react_performance_timeline PUBLIC ${REACT_COMMON_DIR})
target_link_libraries(react_performance_timeline
        jsinspector_tracing
        reactperflogger
        react_timing
        react_cxxreact)

----------------------------------------

TITLE: Markdown Structure for React Native Subsystem Documentation
DESCRIPTION: Template structure for documenting a React Native subsystem, including sections for description, usage, design, and system relationships. The template provides placeholders for detailed documentation and system interconnections.

LANGUAGE: markdown
CODE:
# _Subsystem name_

* [Main doc](../__docs__/README.md)

_Description of the subsystem with the necessary context._

## Usage

_Explanation of how the subsystem is used._

## Design

_Explain how the subsystem is designed, relevant implementation details, etc. Ideally include an Excalidraw diagram._

## Relationship with other systems

### Part of

- _A single bullet for the parent subsystem. Link to the documentation of that subsystem if it exists._

### Part of this

- _One bullet point for each subsystem that is part of this one. Link to the documentation of those subsystems if it exists._

### Used by this

- _One bullet point for each subsystem used by this one, explaining why it uses it and how. Link to the documentation of those subsystems if it exists._

### Uses this

- _One bullet point for each subsystem using this one, explaining why it uses it and how. Link to the documentation of those subsystems if it exists._

----------------------------------------

TITLE: Configuring CMake Build for React Native Feature Flags Module
DESCRIPTION: Sets up CMake build configuration for the React Native feature flags native module. Defines minimum CMake version, includes required dependencies, sets up the library target with source files, and configures compilation options and linking.

LANGUAGE: cmake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_nativemodule_featureflags_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_nativemodule_featureflags OBJECT ${react_nativemodule_featureflags_SRC})

target_include_directories(react_nativemodule_featureflags PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(react_nativemodule_featureflags
        react_codegen_rncore
        react_cxxreact
        react_featureflags
)
target_compile_reactnative_options(react_nativemodule_featureflags PRIVATE "ReactNative")
target_compile_options(react_nativemodule_featureflags PRIVATE -Wpedantic)

----------------------------------------

TITLE: Documenting Directory Structure in Markdown
DESCRIPTION: Example directory structure showing the hierarchical organization of React Native documentation using __docs__ folders

LANGUAGE: markdown
CODE:
- `<root>/__docs__/README.md` (with links to subsystems 1, 2, etc.)
  - `Subsystem 1/__docs__/README.md` (with links to root and subsystems 1.1, 1.2, etc.)
    - `Subsystem 1.1/__docs__/README.md` (with links to subsystem 1 and subsystems 1.1.1, 1.1.2, etc.)
    - `Subsystem 1.2/__docs__/README.md`
  - `Subsystem 2/__docs__/README.md`

----------------------------------------

TITLE: Configuring JSC Runtime Library Build in CMake
DESCRIPTION: Configures the build process for the JSC Runtime library in React Native. Sets up include directories, links required dependencies, and configures compilation options including optimization flags. The library is built from JSCRuntime.h and JSCRuntime.cpp source files.

LANGUAGE: cmake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)
include(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)

add_library(jscruntime
        OBJECT
        JSCRuntime.h
        JSCRuntime.cpp)

target_include_directories(jscruntime PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})
target_merge_so(jscruntime)

target_link_libraries(jscruntime
        jsc
        jsi
        reactnative)

if(NOT ${CMAKE_BUILD_TYPE} MATCHES Debug)
        target_compile_options(jscruntime PRIVATE -DNDEBUG)
endif()

target_compile_reactnative_options(jscruntime PRIVATE "ReactNative")
target_compile_options(jscruntime PRIVATE -O3 -Wno-unused-lambda-capture)

----------------------------------------

TITLE: Configuring React Native Feature Flags Library in CMake
DESCRIPTION: This CMake snippet sets up the React Native feature flags library. It defines the minimum CMake version, includes necessary utilities, gathers source files, and configures the library target with appropriate include directories and compilation options.

LANGUAGE: CMake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_featureflags_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_featureflags OBJECT ${react_featureflags_SRC})

target_include_directories(react_featureflags PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(react_featureflags folly_runtime)
target_compile_reactnative_options(react_featureflags PRIVATE "ReactNative")
target_compile_options(react_featureflags PRIVATE -Wpedantic)

----------------------------------------

TITLE: Configuring CMake for 'fmt' Library in React Native
DESCRIPTION: This CMake script sets up the 'fmt' library as a static library for a React Native project. It sets the minimum CMake version, enables verbose output, includes React Native specific flags, and configures the 'fmt' library with appropriate include directories and compilation options.

LANGUAGE: CMake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

add_library(fmt STATIC src/format.cc)

target_include_directories(fmt PUBLIC include)
target_compile_reactnative_options(fmt PRIVATE)

----------------------------------------

TITLE: Running tests for @react-native/virtualized-lists
DESCRIPTION: Commands to run tests for the @react-native/virtualized-lists package. These commands should be executed from the React Native root folder. It includes installing dependencies and running Jest tests specifically for the virtualized-lists package.

LANGUAGE: bash
CODE:
yarn

LANGUAGE: bash
CODE:
yarn jest packages/virtualized-lists

----------------------------------------

TITLE: Configuring React Native Android CMake Project
DESCRIPTION: Sets up the CMake project for React Native Android, including minimum version, project name, and verbose output.

LANGUAGE: CMake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

project(ReactAndroid)

----------------------------------------

TITLE: Installing JSC for Android in RNTester
DESCRIPTION: Commands to install and start RNTester with JavaScriptCore (JSC) instead of Hermes on Android.

LANGUAGE: sh
CODE:
cd packages/rn-tester
yarn install-android-jsc
yarn start

----------------------------------------

TITLE: Configuring CMake for JSI Tooling Library in React Native
DESCRIPTION: This CMake snippet sets up the build configuration for the 'jsitooling' library in React Native. It defines the source files, include directories, linked libraries, and compilation options for the library.

LANGUAGE: CMake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)
file(GLOB jsitooling_SRC CONFIGURE_DEPENDS react/runtime/*.cpp)
add_library(jsitooling OBJECT ${jsitooling_SRC})

target_include_directories(jsitooling
    PUBLIC
    ${REACT_COMMON_DIR}
    ${CMAKE_CURRENT_SOURCE_DIR}
)

target_link_libraries(jsitooling
        react_cxxreact
        folly_runtime
        glog
        jsi)

target_compile_reactnative_options(jsitooling PRIVATE "ReactNative")
target_compile_options(jsitooling PRIVATE -Wpedantic)

----------------------------------------

TITLE: Configuring Double Conversion Library Build in CMake for React Native
DESCRIPTION: This CMake script sets up the build configuration for the double-conversion library. It defines the library as a static library, specifies source files, sets include directories, and applies compilation flags. The script also includes React Native specific compilation options.

LANGUAGE: CMake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

add_library(double-conversion
        STATIC
        double-conversion/bignum.cc
        double-conversion/bignum-dtoa.cc
        double-conversion/cached-powers.cc
        double-conversion/diy-fp.cc
        double-conversion/double-conversion.cc
        double-conversion/fast-dtoa.cc
        double-conversion/fixed-dtoa.cc
        double-conversion/strtod.cc)

target_include_directories(double-conversion PUBLIC .)

target_compile_reactnative_options(double-conversion PRIVATE)
target_compile_options(double-conversion PRIVATE -Wno-unused-variable -Wno-unused-local-typedefs)

----------------------------------------

TITLE: Accessing Feature Flags in Kotlin
DESCRIPTION: Example of how to access feature flags in Kotlin code using the ReactNativeFeatureFlags class.

LANGUAGE: kotlin
CODE:
import com.facebook.react.internal.featureflags.ReactNativeFeatureFlags

fun someMethod() {
  if (ReactNativeFeatureFlags.enableNativeBehavior()) {
    // do something
  }
}

----------------------------------------

TITLE: Accessing Feature Flags in Kotlin
DESCRIPTION: Example of how to access feature flags in Kotlin code using the ReactNativeFeatureFlags class.

LANGUAGE: kotlin
CODE:
import com.facebook.react.internal.featureflags.ReactNativeFeatureFlags

fun someMethod() {
  if (ReactNativeFeatureFlags.enableNativeBehavior()) {
    // do something
  }
}

----------------------------------------

TITLE: Configuring CMake for React Native Android Switch Component
DESCRIPTION: This CMake snippet sets up the build configuration for the React Native Android Switch component. It specifies the minimum CMake version, includes necessary files, defines source files, and configures the library with its dependencies and compile options.

LANGUAGE: CMake
CODE:
cmake_minimum_required(VERSION 3.13)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB rrc_switch_SRCS CONFIGURE_DEPENDS androidswitch/react/renderer/components/androidswitch/*.cpp)

add_library(
        rrc_switch
        STATIC
        ${rrc_switch_SRCS}
)

target_include_directories(rrc_switch PUBLIC androidswitch/)

target_link_libraries(
        rrc_switch
        glog
        fbjni
        folly_runtime
        glog_init
        react_codegen_rncore
        react_debug
        react_renderer_componentregistry
        react_renderer_core
        react_renderer_debug
        react_renderer_graphics
        react_renderer_uimanager
        reactnativejni
        rrc_view
        yoga
)

target_compile_reactnative_options(rrc_switch PRIVATE "Fabric")
target_compile_options(rrc_switch PRIVATE -Wpedantic)

----------------------------------------

TITLE: Displaying DevTools Settings Persistence Table in Markdown
DESCRIPTION: This markdown table compares the persistence of two DevTools settings modules across native and JavaScript VM restarts in React Native.

LANGUAGE: markdown
CODE:
| Module | Survives native restarts | Survives JavaScript VM restarts |
| --- | --- | --- |
| DevToolsRuntimeSettings | No | Yes
| DevToolsSettings | Yes | Yes

----------------------------------------

TITLE: Demonstrating Invalid @property Rule in CSS for React Native
DESCRIPTION: This code snippet represents a placeholder for an invalid @property rule in CSS. The rule is ignored by React Native due to containing an invalid property or missing a required one.

LANGUAGE: css
CODE:
{PLACEHOLDER_property}

----------------------------------------

TITLE: Configuring CMake for React Native Graphics Renderer
DESCRIPTION: Sets up CMake configuration for building the React Native graphics renderer library. It defines the source files, includes directories, links dependencies, and sets compiler options.

LANGUAGE: CMake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_renderer_graphics_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_renderer_graphics OBJECT ${react_renderer_graphics_SRC})

target_include_directories(react_renderer_graphics
        PUBLIC
          ${REACT_COMMON_DIR}
          ${CMAKE_CURRENT_SOURCE_DIR}/platform/android/
        )

target_link_libraries(react_renderer_graphics
        glog
        fbjni
        folly_runtime
        react_debug
        react_utils
)
target_compile_reactnative_options(react_renderer_graphics PRIVATE "Fabric")
target_compile_options(react_renderer_graphics PRIVATE -Wpedantic)

----------------------------------------

TITLE: Form Field Attribute Examples - React Native JSX
DESCRIPTION: Examples demonstrating proper implementation of id and name attributes on form field elements to enable browser autofill functionality. While not strictly required, these attributes improve form usability and accessibility.

LANGUAGE: jsx
CODE:
// Good - Form field with id attribute
<TextInput id="username" />

// Good - Form field with name attribute
<TextInput name="email" />

// Good - Form field with both attributes
<TextInput id="password" name="password" />

// Not recommended - Form field missing both attributes
<TextInput />

----------------------------------------

TITLE: Configuring CMake for React Native Popup Menu Android
DESCRIPTION: Sets up CMake build configuration for React Native Popup Menu Android component. It defines the minimum CMake version, creates a library from source files, sets include directories, links required libraries, and specifies compilation options.

LANGUAGE: CMake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

file(GLOB react_codegen_SRCS CONFIGURE_DEPENDS *.cpp react/renderer/components/ReactPopupMenuAndroidSpecs/*.cpp)

add_library(
  react_codegen_ReactPopupMenuAndroidSpecs
  OBJECT
  ${react_codegen_SRCS}
)

target_include_directories(react_codegen_ReactPopupMenuAndroidSpecs PUBLIC . react/renderer/components/ReactPopupMenuAndroidSpecs)

target_link_libraries(
  react_codegen_ReactPopupMenuAndroidSpecs
  fbjni
  jsi
  reactnative
)

target_compile_options(
  react_codegen_ReactPopupMenuAndroidSpecs
  PRIVATE
  -DLOG_TAG=\"ReactNative\"
  -fexceptions
  -frtti
  -std=c++20
  -Wall
)

----------------------------------------

TITLE: Displaying Error Message for getUserInfo() Failure in React Native
DESCRIPTION: This code snippet shows an error message that is displayed when the getUserInfo() function fails due to an untrusted configuration URL. It highlights a security-related issue in the application's setup.

LANGUAGE: markdown
CODE:
# getUserInfo() failed because the config URL is not potentially trustworthy.

----------------------------------------

TITLE: Configuring CMake Build for React Native Unimplemented View
DESCRIPTION: Sets up CMake configuration for building the unimplemented view component as a static library. Includes necessary dependencies like glog, folly, JSI, and React Renderer components while setting compiler options and flags.

LANGUAGE: cmake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB rrc_unimplementedview_SRC CONFIGURE_DEPENDS *.cpp)
add_library(rrc_unimplementedview STATIC ${rrc_unimplementedview_SRC})

target_include_directories(rrc_unimplementedview PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(rrc_unimplementedview
        glog
        folly_runtime
        glog_init
        jsi
        react_debug
        react_renderer_core
        react_renderer_debug
        react_renderer_graphics
        rrc_view
        yoga
)
target_compile_reactnative_options(rrc_unimplementedview PRIVATE "Fabric")
target_compile_options(rrc_unimplementedview PRIVATE -Wpedantic)

----------------------------------------

TITLE: Markdown Template Structure
DESCRIPTION: Basic markdown template structure with placeholder variables for title and message content

LANGUAGE: markdown
CODE:
# {PLACEHOLDER_title}

{PLACEHOLDER_message}

----------------------------------------

TITLE: Configuring CMake for React Native ScrollView Component
DESCRIPTION: This CMake script sets up the build configuration for the React Native ScrollView component. It defines the source files, includes necessary directories, links required libraries, and sets compile options for the Fabric architecture.

LANGUAGE: CMake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB rrc_scrollview_SRC CONFIGURE_DEPENDS *.cpp platform/android/react/renderer/components/scrollview/*.cpp)
add_library(rrc_scrollview STATIC ${rrc_scrollview_SRC})

target_include_directories(rrc_scrollview PUBLIC ${REACT_COMMON_DIR} . ${CMAKE_CURRENT_SOURCE_DIR}/platform/android/)

target_link_libraries(rrc_scrollview
        glog
        folly_runtime
        glog_init
        jsi
        react_debug
        react_renderer_core
        react_renderer_debug
        react_renderer_graphics
        react_renderer_mapbuffer
        rrc_view
        yoga
)
target_compile_reactnative_options(rrc_scrollview PRIVATE "Fabric")
target_compile_options(rrc_scrollview PRIVATE -Wpedantic)

----------------------------------------

TITLE: Converting String to Trusted Type in JavaScript
DESCRIPTION: This snippet demonstrates two methods to convert a string into a Trusted Type: defining a policy with specific creation functions, or using a default policy. These methods help in securely modifying the DOM and preventing cross-site scripting attacks.

LANGUAGE: javascript
CODE:
// Method 1: Define a policy and use its creation functions
const policy = trustedTypes.createPolicy('myPolicy', {
  createHTML: (string) => string,
  createScript: (string) => string,
  createScriptURL: (string) => string
});

// Method 2: Define a default policy
trustedTypes.createPolicy('default', {
  createHTML: (string) => string,
  createScript: (string) => string,
  createScriptURL: (string) => string
});

----------------------------------------

TITLE: Configuring and Building React Native MapBuffer Renderer with CMake
DESCRIPTION: This CMake script configures and builds the React Native MapBuffer renderer as an object library. It sets up include directories, links necessary libraries, and applies specific compilation flags.

LANGUAGE: CMake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)
file(GLOB react_renderer_mapbuffer_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_renderer_mapbuffer OBJECT ${react_renderer_mapbuffer_SRC})

target_include_directories(react_renderer_mapbuffer PUBLIC ${REACT_COMMON_DIR})
target_link_libraries(react_renderer_mapbuffer glog glog_init react_debug)
target_compile_reactnative_options(react_renderer_mapbuffer PRIVATE "Fabric")
target_compile_options(react_renderer_mapbuffer PRIVATE -Wpedantic)

----------------------------------------

TITLE: CSP Script Source Directive Configuration
DESCRIPTION: Shows the CSP directive needed to enable string evaluation if absolutely required, though this comes with security risks.

LANGUAGE: http
CODE:
script-src 'unsafe-eval'

----------------------------------------

TITLE: Configuring MapBuffer JNI Library Build in CMake
DESCRIPTION: Configures the build process for the MapBuffer JNI library. Sets up include paths, source files, and links required dependencies like fbjni, folly_runtime, and yoga. Includes special handling for React Native Fabric architecture.

LANGUAGE: cmake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)
include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB mapbuffer_SRC CONFIGURE_DEPENDS
        ${CMAKE_CURRENT_SOURCE_DIR}/react/common/mapbuffer/*.cpp)

add_library(mapbufferjni OBJECT ${mapbuffer_SRC})

target_include_directories(mapbufferjni
        PUBLIC
          ${CMAKE_CURRENT_SOURCE_DIR}
        PRIVATE
          ${CMAKE_CURRENT_SOURCE_DIR}/react/common/mapbuffer/
)

target_merge_so(mapbufferjni)

target_link_libraries(mapbufferjni
        fbjni
        folly_runtime
        glog
        glog_init
        react_debug
        react_renderer_mapbuffer
        react_utils
        yoga
)

target_compile_reactnative_options(mapbufferjni PRIVATE "Fabric")

----------------------------------------

TITLE: Setting Cross-Origin Resource Policy Header
DESCRIPTION: Adds a Cross-Origin-Resource-Policy header to allow cross-origin access to resources. Note that enabling this makes the resource accessible to any website, which may have security implications.

LANGUAGE: http
CODE:
Cross-Origin-Resource-Policy: cross-origin

----------------------------------------

TITLE: Configuring React Native Renderer Mounting Library in CMake
DESCRIPTION: This CMake snippet sets up the build configuration for the React Native renderer mounting library. It defines source files, include directories, and linked libraries for the 'react_renderer_mounting' target. The configuration includes various React Native components and external dependencies like Folly and glog.

LANGUAGE: CMake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_renderer_mounting_SRC CONFIGURE_DEPENDS
        *.cpp
        internal/*.cpp
        stubs/*.cpp)
add_library(react_renderer_mounting OBJECT ${react_renderer_mounting_SRC})

target_include_directories(react_renderer_mounting PRIVATE .)
target_include_directories(react_renderer_mounting PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(react_renderer_mounting
        folly_runtime
        glog
        glog_init
        jsi
        react_debug
        react_renderer_core
        react_renderer_debug
        react_renderer_graphics
        react_renderer_telemetry
        react_utils
        rrc_root
        rrc_view
        yoga)
target_compile_reactnative_options(react_renderer_mounting PRIVATE "Fabric")
target_compile_options(react_renderer_mounting PRIVATE -Wpedantic)

----------------------------------------

TITLE: Setting HTML5 DOCTYPE Declaration
DESCRIPTION: The proper DOCTYPE declaration to ensure pages render in No Quirks Mode instead of Quirks Mode. Adding this declaration at the start of HTML documents will ensure standard-compliant rendering.

LANGUAGE: html
CODE:
<!DOCTYPE html>

----------------------------------------

TITLE: Configuring React Native Renderer Scheduler Library in CMake
DESCRIPTION: Sets up the CMake project for building the React Native renderer scheduler static library. It defines source files, include directories, linked libraries, and specific compilation flags.

LANGUAGE: CMake
CODE:
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_renderer_scheduler_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_renderer_scheduler STATIC ${react_renderer_scheduler_SRC})

target_include_directories(react_renderer_scheduler PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(react_renderer_scheduler
        folly_runtime
        glog
        jsi
        react_debug
        react_featureflags
        react_performance_timeline
        react_renderer_componentregistry
        react_renderer_core
        react_renderer_debug
        react_renderer_graphics
        react_renderer_mounting
        react_renderer_observers_events
        react_renderer_runtimescheduler
        react_renderer_uimanager
        react_utils
        rrc_root
        rrc_view
        yoga
)
target_compile_reactnative_options(react_renderer_scheduler PRIVATE "Fabric")
target_compile_options(react_renderer_scheduler PRIVATE -Wpedantic)