TITLE: Optimized Dockerfile for Layer Caching
DESCRIPTION: This Dockerfile example shows how to structure the build process to leverage layer caching, improving build times by only reinstalling dependencies when necessary.

LANGUAGE: dockerfile
CODE:
# syntax=docker/dockerfile:1
FROM node:lts-alpine
WORKDIR /app
COPY package.json yarn.lock ./
RUN yarn install --production
COPY . .
CMD ["node", "src/index.js"]

----------------------------------------

TITLE: Installing Latest Docker Engine on CentOS
DESCRIPTION: Commands to install the latest version of Docker Engine and its dependencies, start the Docker service, and verify the installation.

LANGUAGE: bash
CODE:
sudo dnf install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
sudo systemctl enable --now docker
sudo docker run hello-world

----------------------------------------

TITLE: Checking Kernel Support for Seccomp in Linux
DESCRIPTION: This command checks if the current Linux kernel supports seccomp by grepping the kernel configuration file.

LANGUAGE: console
CODE:
$ grep CONFIG_SECCOMP= /boot/config-$(uname -r)
CONFIG_SECCOMP=y

----------------------------------------

TITLE: Multi-stage Dockerfile for Node.js Development
DESCRIPTION: Multi-stage Dockerfile that supports both development and production environments for a Node.js application. Includes development dependencies and nodemon for development stage.

LANGUAGE: dockerfile
CODE:
# syntax=docker/dockerfile:1

ARG NODE_VERSION=18.0.0

FROM node:${NODE_VERSION}-alpine as base
WORKDIR /usr/src/app
EXPOSE 3000

FROM base as dev
RUN --mount=type=bind,source=package.json,target=package.json \
    --mount=type=bind,source=package-lock.json,target=package-lock.json \
    --mount=type=cache,target=/root/.npm \
    npm ci --include=dev
USER node
COPY . .
CMD npm run dev

FROM base as prod
RUN --mount=type=bind,source=package.json,target=package.json \
    --mount=type=bind,source=package-lock.json,target=package-lock.json \
    --mount=type=cache,target=/root/.npm \
    npm ci --omit=dev
USER node
COPY . .
CMD node src/index.js

----------------------------------------

TITLE: GitHub Actions Workflow for Docker Image Testing and Deployment
DESCRIPTION: A complete GitHub Actions workflow that builds a Docker image, tests it locally, and then performs a multi-platform build and push. The workflow includes Docker Hub authentication, QEMU setup for multi-architecture support, and Buildx configuration.

LANGUAGE: yaml
CODE:
name: ci

on:
  push:

env:
  TEST_TAG: user/app:test
  LATEST_TAG: user/app:latest

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and export to Docker
        uses: docker/build-push-action@v6
        with:
          load: true
          tags: ${{ env.TEST_TAG }}

      - name: Test
        run: |
          docker run --rm ${{ env.TEST_TAG }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.LATEST_TAG }}

----------------------------------------

TITLE: GitHub Actions Workflow Configuration
DESCRIPTION: YAML configuration for GitHub Actions workflow that builds and pushes a Docker image to Docker Hub. Includes authentication, buildx setup, and multi-platform build configuration.

LANGUAGE: yaml
CODE:
name: ci

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ vars.DOCKER_USERNAME }}/${{ github.event.repository.name }}:latest

----------------------------------------

TITLE: Optimized Layer Ordering in Dockerfile
DESCRIPTION: Improved Dockerfile structure that separates dependency installation from application code to better utilize cache layers.

LANGUAGE: dockerfile
CODE:
# syntax=docker/dockerfile:1
FROM node
WORKDIR /app
COPY package.json yarn.lock .
RUN npm install
COPY . .
RUN npm build

----------------------------------------

TITLE: Basic Dockerfile Structure
DESCRIPTION: Shows the basic structure and syntax of a Dockerfile, including comments and instructions.

LANGUAGE: dockerfile
CODE:
# Comment
INSTRUCTION arguments

----------------------------------------

TITLE: Using Multi-Stage Builds in Dockerfile
DESCRIPTION: Demonstrates how to use multi-stage builds to reduce the size of the final image and create a cleaner separation between building and output.

LANGUAGE: Dockerfile
CODE:
# syntax=docker/dockerfile:1

FROM scratch AS src
ARG DOTNET_VERSION=8.0.0-preview.6.23329.7
ADD --checksum=sha256:270d731bd08040c6a3228115de1f74b91cf441c584139ff8f8f6503447cebdbb \
    https://dotnetcli.azureedge.net/dotnet/Runtime/$DOTNET_VERSION/dotnet-runtime-$DOTNET_VERSION-linux-arm64.tar.gz /dotnet.tar.gz

FROM mcr.microsoft.com/dotnet/runtime-deps:8.0.0-preview.6-bookworm-slim-arm64v8 AS installer

# Retrieve .NET Runtime
RUN --mount=from=src,target=/src <<EOF
mkdir -p /dotnet
tar -oxzf /src/dotnet.tar.gz -C /dotnet
EOF

FROM mcr.microsoft.com/dotnet/runtime-deps:8.0.0-preview.6-bookworm-slim-arm64v8

COPY --from=installer /dotnet /usr/share/dotnet
RUN ln -s /usr/share/dotnet/dotnet /usr/bin/dotnet

----------------------------------------

TITLE: Creating a Multi-stage Dockerfile for Go Application
DESCRIPTION: This Dockerfile demonstrates a multi-stage build for a Go application. It uses a golang image to build the binary and a scratch image for the final stage, resulting in a smaller production image.

LANGUAGE: dockerfile
CODE:
# syntax=docker/dockerfile:1
FROM golang:{{% param "example_go_version" %}}
WORKDIR /src
COPY <<EOF ./main.go
package main

import "fmt"

func main() {
  fmt.Println("hello, world")
}
EOF
RUN go build -o /bin/hello ./main.go

FROM scratch
COPY --from=0 /bin/hello /bin/hello
CMD ["/bin/hello"]

----------------------------------------

TITLE: Basic Docker Compose Network Configuration
DESCRIPTION: Simple example showing how to configure basic networking between a web service and database in Docker Compose. Demonstrates port mapping and service discovery.

LANGUAGE: yaml
CODE:
services:
  web:
    build: .
    ports:
      - "8000:8000"
  db:
    image: postgres
    ports:
      - "8001:5432"

----------------------------------------

TITLE: Multi-stage Dockerfile for Optimized Go Build
DESCRIPTION: An advanced Dockerfile using multi-stage builds to create a smaller and more secure final image. Uses distroless base image and includes a testing stage.

LANGUAGE: dockerfile
CODE:
# syntax=docker/dockerfile:1

FROM golang:1.19 AS build-stage

WORKDIR /app

COPY go.mod go.sum ./
RUN go mod download

COPY *.go ./

RUN CGO_ENABLED=0 GOOS=linux go build -o /docker-gs-ping

FROM build-stage AS run-test-stage
RUN go test -v ./...

FROM gcr.io/distroless/base-debian11 AS build-release-stage

WORKDIR /

COPY --from=build-stage /docker-gs-ping /docker-gs-ping

EXPOSE 8080

USER nonroot:nonroot

ENTRYPOINT ["/docker-gs-ping"]

----------------------------------------

TITLE: Installing Latest Docker Engine on RHEL
DESCRIPTION: This command installs the latest version of Docker Engine, along with the CLI, containerd, and plugins for Buildx and Compose. It uses the dnf package manager to install the packages from the previously configured Docker repository.

LANGUAGE: bash
CODE:
$ sudo dnf install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

----------------------------------------

TITLE: Creating a Service in Docker Swarm
DESCRIPTION: This command creates a service named 'helloworld' with one replica, using an Alpine Linux container that pings docker.com.

LANGUAGE: console
CODE:
$ docker service create --replicas 1 --name helloworld alpine ping docker.com

9uk4639qpg7npwf3fn2aasksr

----------------------------------------

TITLE: Configuring Docker Compose for Node.js with PostgreSQL
DESCRIPTION: Docker Compose configuration that sets up a Node.js application with a PostgreSQL database. Includes volume persistence, environment variables, and health checks.

LANGUAGE: yaml
CODE:
services:
  server:
    build:
      context: .
    environment:
      NODE_ENV: production
      POSTGRES_HOST: db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD_FILE: /run/secrets/db-password
      POSTGRES_DB: example
    ports:
      - 3000:3000
    depends_on:
      db:
        condition: service_healthy
    secrets:
      - db-password
  db:
    image: postgres
    restart: always
    user: postgres
    secrets:
      - db-password
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=example
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    expose:
      - 5432
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
volumes:
  db-data:
secrets:
  db-password:
    file: db/password.txt

----------------------------------------

TITLE: Restricting Container Access with iptables Rules
DESCRIPTION: Examples of using iptables to restrict external access to containers based on source IP addresses and ranges.

LANGUAGE: bash
CODE:
$ iptables -I DOCKER-USER -i ext_if ! -s 192.0.2.2 -j DROP
$ iptables -I DOCKER-USER -i ext_if ! -s 192.0.2.0/24 -j DROP
$ iptables -I DOCKER-USER -m iprange -i ext_if ! --src-range 192.0.2.1-192.0.2.3 -j DROP

----------------------------------------

TITLE: Spring Boot Application Java Code
DESCRIPTION: This Java code creates a simple Spring Boot web application that responds with "Hello World" when a user visits its homepage.

LANGUAGE: java
CODE:
package com.example.spring_boot_docker;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;


@RestController
@SpringBootApplication
public class SpringBootDockerApplication {

    @RequestMapping("/")
        public String home() {
        return "Hello World";
    }

	public static void main(String[] args) {
		SpringApplication.run(SpringBootDockerApplication.class, args);
	}

}

----------------------------------------

TITLE: Basic Docker Bind Mount Syntax
DESCRIPTION: Shows the basic syntax for creating bind mounts using both --mount and --volume flags.

LANGUAGE: console
CODE:
$ docker run --mount type=bind,src=<host-path>,dst=<container-path>
$ docker run --volume <host-path>:<container-path>

----------------------------------------

TITLE: Configuring Registry Cache with GitHub Actions in Docker
DESCRIPTION: This example shows how to import/export cache from a cache manifest or image configuration on the registry using GitHub Actions. It includes steps for Docker Hub login, Buildx setup, and build/push with registry caching.

LANGUAGE: yaml
CODE:
name: ci

on:
  push:

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: user/app:latest
          cache-from: type=registry,ref=user/app:buildcache
          cache-to: type=registry,ref=user/app:buildcache,mode=max

----------------------------------------

TITLE: Using Previous Stage as New Stage in Dockerfile
DESCRIPTION: This Dockerfile shows how to use a previous stage as a new stage. It creates a builder stage and then uses it as the base for two subsequent stages, each compiling a different source file.

LANGUAGE: dockerfile
CODE:
# syntax=docker/dockerfile:1

FROM alpine:latest AS builder
RUN apk --no-cache add build-base

FROM builder AS build1
COPY source1.cpp source.cpp
RUN g++ -o /binary source.cpp

FROM builder AS build2
COPY source2.cpp source.cpp
RUN g++ -o /binary source.cpp

----------------------------------------

TITLE: Restricting Container Resource Usage in Docker
DESCRIPTION: This command demonstrates how to limit CPU and memory usage for a Docker container using the `--memory` and `--cpus` flags with `docker run`.

LANGUAGE: console
CODE:
$ docker run -e POSTGRES_PASSWORD=secret --memory="512m" --cpus="0.5" postgres

----------------------------------------

TITLE: Configuring Multi-stage Dockerfile for Rails Production
DESCRIPTION: A production-ready multi-stage Dockerfile that builds and runs a Rails application. It includes separate build and runtime stages to optimize image size, handles dependencies, asset compilation, and security configurations.

LANGUAGE: dockerfile
CODE:
# syntax=docker/dockerfile:1
# check=error=true

# This Dockerfile is designed for production, not development.
# docker build -t app .
# docker run -d -p 80:80 -e RAILS_MASTER_KEY=<value from config/master.key> --name app app

# For a containerized dev environment, see Dev Containers: https://guides.rubyonrails.org/getting_started_with_devcontainer.html

# Make sure RUBY_VERSION matches the Ruby version in .ruby-version
ARG RUBY_VERSION=3.3.6
FROM docker.io/library/ruby:$RUBY_VERSION-slim AS base

# Rails app lives here
WORKDIR /rails

# Install base packages
# Replace libpq-dev with sqlite3 if using SQLite, or libmysqlclient-dev if using MySQL
RUN apt-get update -qq && \
    apt-get install --no-install-recommends -y curl libjemalloc2 libvips libpq-dev && \
    rm -rf /var/lib/apt/lists /var/cache/apt/archives

# Set production environment
ENV RAILS_ENV="production" \
    BUNDLE_DEPLOYMENT="1" \
    BUNDLE_PATH="/usr/local/bundle" \
    BUNDLE_WITHOUT="development"

# Throw-away build stage to reduce size of final image
FROM base AS build

# Install packages needed to build gems
RUN apt-get update -qq && \
    apt-get install --no-install-recommends -y build-essential curl git pkg-config libyaml-dev && \
    rm -rf /var/lib/apt/lists /var/cache/apt/archives

# Copy application code
COPY . .

# Precompile bootsnap code for faster boot times
RUN bundle exec bootsnap precompile app/ lib/

# Precompiling assets for production without requiring secret RAILS_MASTER_KEY
RUN SECRET_KEY_BASE_DUMMY=1 ./bin/rails assets:precompile

# Final stage for app image
FROM base

# Copy built artifacts: gems, application
COPY --from=build "${BUNDLE_PATH}" "${BUNDLE_PATH}"
COPY --from=build /rails /rails

# Run and own only the runtime files as a non-root user for security
RUN groupadd --system --gid 1000 rails && \
    useradd rails --uid 1000 --gid 1000 --create-home --shell /bin/bash && \
    chown -R rails:rails db log storage tmp
USER 1000:1000

# Entrypoint prepares the database.
ENTRYPOINT ["/rails/bin/docker-entrypoint"]

# Start server via Thruster by default, this can be overwritten at runtime
EXPOSE 80
CMD ["./bin/thrust", "./bin/rails", "server"]

----------------------------------------

TITLE: Starting and Managing Rootless Docker Daemon
DESCRIPTION: Commands to manage Docker daemon lifecycle using systemd in rootless mode

LANGUAGE: console
CODE:
$ systemctl --user start docker
$ systemctl --user enable docker
$ sudo loginctl enable-linger $(whoami)

----------------------------------------

TITLE: Configuring Compose for Python Development with Database
DESCRIPTION: Updated compose.yaml file that includes a database service, volume for data persistence, and environment variables for the server service.

LANGUAGE: YAML
CODE:
services:
  server:
    build:
      context: .
    ports:
      - 8001:8001
    environment:
      - POSTGRES_SERVER=db
      - POSTGRES_USER=postgres
      - POSTGRES_DB=example
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    depends_on:
      db:
        condition: service_healthy
    secrets:
      - db-password
  db:
    image: postgres
    restart: always
    user: postgres
    secrets:
      - db-password
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=example
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    expose:
      - 5432
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
volumes:
  db-data:
secrets:
  db-password:
    file: db/password.txt

----------------------------------------

TITLE: Initializing Docker Swarm
DESCRIPTION: Basic command to initialize a Docker swarm, which sets up the current node as a manager and returns the worker join token.

LANGUAGE: console
CODE:
$ docker swarm init
Swarm initialized: current node (dxn1zf6l61qsb1josjja83ngz) is now a manager.

To add a worker to this swarm, run the following command:

    docker swarm join \
    --token SWMTKN-1-49nj1cmql0jkz5s954yi3oex3nedyz0fb0xx14ie39trti4wxv-8vxv8rssmk743ojnwacrr2e7c \
    192.168.99.100:2377

To add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.

----------------------------------------

TITLE: Dockerfile for Java Development with Debugging
DESCRIPTION: This Dockerfile sets up a multi-stage build for a Java application, including a development stage with debugging capabilities. It uses Eclipse Temurin as the base image and configures the JVM for remote debugging.

LANGUAGE: dockerfile
CODE:
# syntax=docker/dockerfile:1

FROM eclipse-temurin:21-jdk-jammy as deps
WORKDIR /build
COPY --chmod=0755 mvnw mvnw
COPY .mvn/ .mvn/
RUN --mount=type=bind,source=pom.xml,target=pom.xml \
    --mount=type=cache,target=/root/.m2 ./mvnw dependency:go-offline -DskipTests

FROM deps as package
WORKDIR /build
COPY ./src src/
RUN --mount=type=bind,source=pom.xml,target=pom.xml \
    --mount=type=cache,target=/root/.m2 \
    ./mvnw package -DskipTests && \
    mv target/$(./mvnw help:evaluate -Dexpression=project.artifactId -q -DforceStdout)-$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout).jar target/app.jar

FROM package as extract
WORKDIR /build
RUN java -Djarmode=layertools -jar target/app.jar extract --destination target/extracted

FROM extract as development
WORKDIR /build
RUN cp -r /build/target/extracted/dependencies/. ./
RUN cp -r /build/target/extracted/spring-boot-loader/. ./
RUN cp -r /build/target/extracted/snapshot-dependencies/. ./
RUN cp -r /build/target/extracted/application/. ./
ENV JAVA_TOOL_OPTIONS -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:8000
CMD [ "java", "-Dspring.profiles.active=postgres", "org.springframework.boot.loader.launch.JarLauncher" ]

FROM eclipse-temurin:21-jre-jammy AS final
ARG UID=10001
RUN adduser \
    --disabled-password \
    --gecos "" \
    --home "/nonexistent" \
    --shell "/sbin/nologin" \
    --no-create-home \
    --uid "${UID}" \
    appuser
USER appuser
COPY --from=extract build/target/extracted/dependencies/ ./
COPY --from=extract build/target/extracted/spring-boot-loader/ ./
COPY --from=extract build/target/extracted/snapshot-dependencies/ ./
COPY --from=extract build/target/extracted/application/ ./
EXPOSE 8080
ENTRYPOINT [ "java", "-Dspring.profiles.active=postgres", "org.springframework.boot.loader.launch.JarLauncher" ]

----------------------------------------

TITLE: Initializing Docker Assets with docker init
DESCRIPTION: Demonstrates the interactive process of using docker init to create necessary Docker configuration files for the PHP application.

LANGUAGE: console
CODE:
$ docker init
Welcome to the Docker Init CLI!

This utility will walk you through creating the following files with sensible defaults for your project:
  - .dockerignore
  - Dockerfile
  - compose.yaml
  - README.Docker.md

Let's get started!

? What application platform does your project use? PHP with Apache
? What version of PHP do you want to use? 8.2
? What's the relative directory (with a leading .) for your app? ./src
? What local port do you want to use to access your server? 9000

----------------------------------------

TITLE: ADD and COPY Instructions
DESCRIPTION: Shows the syntax and usage of ADD and COPY instructions for adding files to the image.

LANGUAGE: dockerfile
CODE:
ADD [--chown=<user>:<group>] <src>... <dest>
ADD [--chown=<user>:<group>] ["<src>",... "<dest>"]
COPY [--chown=<user>:<group>] <src>... <dest>
COPY [--chown=<user>:<group>] ["<src>",... "<dest>"]

----------------------------------------

TITLE: Cloning .NET Sample Application
DESCRIPTION: Command to clone the Docker .NET sample application repository.

LANGUAGE: console
CODE:
$ git clone https://github.com/docker/docker-dotnet-sample

----------------------------------------

TITLE: Docker Init Configuration
DESCRIPTION: Interactive Docker initialization process showing the configuration of a Python FastAPI application with specified runtime parameters.

LANGUAGE: console
CODE:
$ docker init
Welcome to the Docker Init CLI!

This utility will walk you through creating the following files with sensible defaults for your project:
  - .dockerignore
  - Dockerfile
  - compose.yaml
  - README.Docker.md

Let's get started!

? What application platform does your project use? Python
? What version of Python do you want to use? 3.11.4
? What port do you want your app to listen on? 8000
? What is the command to run your app? python3 -m uvicorn app:app --host=0.0.0.0 --port=8000

----------------------------------------

TITLE: Docker Compose Configuration for Java Application
DESCRIPTION: Docker Compose configuration file that defines the Java application service with port mapping and optional database service configuration.

LANGUAGE: yaml
CODE:
services:
  server:
    build:
      context: .
    ports:
      - 8080:8080

----------------------------------------

TITLE: Docker Compose Configuration for Laravel Production
DESCRIPTION: Defines services, volumes, and networks for a production-ready Laravel environment using Docker Compose. Includes configurations for web server, PHP-FPM, PHP-CLI, PostgreSQL, and Redis.

LANGUAGE: yaml
CODE:
services:
  web:
    build:
      context: .
      dockerfile: ./docker/production/nginx/Dockerfile
    restart: unless-stopped # Automatically restart unless the service is explicitly stopped
    volumes:
      # Mount the 'laravel-storage' volume to '/var/www/storage' inside the container.
      # -----------------------------------------------------------
      # This volume stores persistent data like uploaded files and cache.
      # The ':ro' option mounts it as read-only in the 'web' service because Nginx only needs to read these files.
      # The 'php-fpm' service mounts the same volume without ':ro' to allow write operations.
      # -----------------------------------------------------------
      - laravel-storage-production:/var/www/storage:ro
    networks:
      - laravel-production
    ports:
      # Map port 80 inside the container to the port specified by 'NGINX_PORT' on the host machine.
      # -----------------------------------------------------------
      # This allows external access to the Nginx web server running inside the container.
      # For example, if 'NGINX_PORT' is set to '8080', accessing 'http://localhost:8080' will reach the application.
      # -----------------------------------------------------------
      - "${NGINX_PORT:-80}:80"
    depends_on:
      php-fpm:
        condition: service_healthy # Wait for php-fpm health check

  php-fpm:
    # For the php-fpm service, we will create a custom image to install the necessary PHP extensions and setup proper permissions.
    build:
      context: .
      dockerfile: ./docker/common/php-fpm/Dockerfile
      target: production # Use the 'production' stage in the Dockerfile
    restart: unless-stopped
    volumes:
      - laravel-storage-production:/var/www/storage # Mount the storage volume
    env_file:
      - .env
    networks:
      - laravel-production
    healthcheck:
      test: ["CMD-SHELL", "php-fpm-healthcheck || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
    # The 'depends_on' attribute with 'condition: service_healthy' ensures that
    # this service will not start until the 'postgres' service passes its health check.
    # This prevents the application from trying to connect to the database before it's ready.
    depends_on:
      postgres:
        condition: service_healthy

  # The 'php-cli' service provides a command-line interface for running Artisan commands and other CLI tasks.
  # -----------------------------------------------------------
  # This is useful for running migrations, seeders, or any custom scripts.
  # It shares the same codebase and environment as the 'php-fpm' service.
  # -----------------------------------------------------------
  php-cli:
    build:
      context: .
      dockerfile: ./docker/php-cli/Dockerfile
    tty: true # Enables an interactive terminal
    stdin_open: true # Keeps standard input open for 'docker exec'
    env_file:
      - .env
    networks:
      - laravel

  postgres:
    image: postgres:16
    restart: unless-stopped
    user: postgres
    ports:
      - "${POSTGRES_PORT}:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DATABASE}
      - POSTGRES_USER=${POSTGRES_USERNAME}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres-data-production:/var/lib/postgresql/data
    networks:
      - laravel-production
    # Health check for PostgreSQL
    # -----------------------------------------------------------
    # Health checks allow Docker to determine if a service is operational.
    # The 'pg_isready' command checks if PostgreSQL is ready to accept connections.
    # This prevents dependent services from starting before the database is ready.
    # -----------------------------------------------------------
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:alpine
    restart: unless-stopped # Automatically restart unless the service is explicitly stopped
    networks:
      - laravel-production
    # Health check for Redis
    # -----------------------------------------------------------
    # Checks if Redis is responding to the 'PING' command.
    # This ensures that the service is not only running but also operational.
    # -----------------------------------------------------------
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

networks:
  # Attach the service to the 'laravel-production' network.
  # -----------------------------------------------------------
  # This custom network allows all services within it to communicate using their service names as hostnames.
  # For example, 'php-fpm' can connect to 'postgres' by using 'postgres' as the hostname.
  # -----------------------------------------------------------
  laravel-production:

volumes:
  postgres-data-production:
  laravel-storage-production:

----------------------------------------

TITLE: Default Network Configuration Override
DESCRIPTION: Shows how to customize the default network settings in Docker Compose by specifying a custom driver.

LANGUAGE: yaml
CODE:
services:
  web:
    build: .
    ports:
      - "8000:8000"
  db:
    image: postgres

networks:
  default:
    driver: custom-driver-1

----------------------------------------

TITLE: Dockerfile for PHP-FPM in Laravel Production Environment
DESCRIPTION: Creates an optimized PHP-FPM image for Laravel production, including necessary PHP extensions and configurations. Uses multi-stage builds for efficiency.

LANGUAGE: dockerfile
CODE:
# Stage 1: Build environment and Composer dependencies
FROM php:8.3-fpm AS builder

# Install system dependencies and PHP extensions for Laravel with MySQL/PostgreSQL support.
# Dependencies in this stage are only required for building the final image.
# Node.js and asset building are handled in the Nginx stage, not here.
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    unzip \
    libpq-dev \
    libonig-dev \
    libssl-dev \
    libxml2-dev \
    libcurl4-openssl-dev \
    libicu-dev \
    libzip-dev \
    && docker-php-ext-install -j$(nproc) \
    pdo_mysql \
    pdo_pgsql \
    pgsql \
    opcache \
    intl \
    zip \
    bcmath \
    soap \
    && pecl install redis \
    && docker-php-ext-enable redis \
    && apt-get autoremove -y && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Set the working directory inside the container
WORKDIR /var/www

# Copy the entire Laravel application code into the container
# -----------------------------------------------------------
# In Laravel, `composer install` may trigger scripts
# needing access to application code.
# For example, the `post-autoload-dump` event might execute
# Artisan commands like `php artisan package:discover`. If the
# application code (including the `artisan` file) is not
# present, these commands will fail, leading to build errors.
#
# By copying the entire application code before running
# `composer install`, we ensure that all necessary files are
# available, allowing these scripts to run successfully.
# In other cases, it would be possible to copy composer files
# first, to leverage Docker's layer caching mechanism.
# -----------------------------------------------------------
COPY . /var/www

# Install Composer and dependencies
RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer \
    && composer install --no-dev --optimize-autoloader --no-interaction --no-progress --prefer-dist

# Stage 2: Production environment
FROM php:8.3-fpm

# Install only runtime libraries needed in production
# libfcgi-bin and procps are required for the php-fpm-healthcheck script
RUN apt-get update && apt-get install -y --no-install-recommends \
    libpq-dev \
    libicu-dev \
    libzip-dev \
    libfcgi-bin \
    procps \
    && apt-get autoremove -y && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Download and install php-fpm health check script
RUN curl -o /usr/local/bin/php-fpm-healthcheck \
    https://raw.githubusercontent.com/renatomefi/php-fpm-healthcheck/master/php-fpm-healthcheck \
    && chmod +x /usr/local/bin/php-fpm-healthcheck

# Copy the initialization script
COPY ./docker/php-fpm/entrypoint.sh /usr/local/bin/entrypoint.sh
RUN chmod +x /usr/local/bin/entrypoint.sh

# Copy the initial storage structure
COPY ./storage /var/www/storage-init

# Copy PHP extensions and libraries from the builder stage
COPY --from=builder /usr/local/lib/php/extensions/ /usr/local/lib/php/extensions/
COPY --from=builder /usr/local/etc/php/conf.d/ /usr/local/etc/php/conf.d/
COPY --from=builder /usr/local/bin/docker-php-ext-* /usr/local/bin/

# Use the recommended production PHP configuration
# -----------------------------------------------------------
# PHP provides development and production configurations.
# Here, we replace the default php.ini with the production
# version to apply settings optimized for performance and
# security in a live environment.
# -----------------------------------------------------------
RUN mv "$PHP_INI_DIR/php.ini-production" "$PHP_INI_DIR/php.ini"

# Enable PHP-FPM status page by modifying zz-docker.conf with sed
RUN sed -i '/\[www\]/a pm.status_path = /status' /usr/local/etc/php-fpm.d/zz-docker.conf
# Update the variables_order to include E (for ENV)
#RUN sed -i 's/variables_order = "GPCS"/variables_order = "EGPCS"/' "$PHP_INI_DIR/php.ini"

# Copy the application code and dependencies from the build stage
COPY --from=builder /var/www /var/www

# Set working directory
WORKDIR /var/www

# Ensure correct permissions
RUN chown -R www-data:www-data /var/www

# Switch to the non-privileged user to run the application
USER www-data

# Change the default command to run the entrypoint script
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]

# Expose port 9000 and start php-fpm server
EXPOSE 9000
CMD ["php-fpm"]

----------------------------------------

TITLE: Secure Docker Daemon Configuration
DESCRIPTION: Command to start Docker daemon with TLS verification and certificate authentication.

LANGUAGE: console
CODE:
$ dockerd \
    --tlsverify \
    --tlscacert=ca.pem \
    --tlscert=server-cert.pem \
    --tlskey=server-key.pem \
    -H=0.0.0.0:2376

----------------------------------------

TITLE: Analyzing Docker Image Vulnerabilities with Scout CVEs
DESCRIPTION: This command performs a detailed analysis of vulnerabilities in a Docker image, filtering by severity and package type.

LANGUAGE: bash
CODE:
docker scout cves --format only-packages --only-vuln-packages \
  --only-severity critical postgres:13.1

----------------------------------------

TITLE: Multi-stage Java Application Dockerfile
DESCRIPTION: Dockerfile that implements a multi-stage build process for a Java application, including dependency resolution, building, and creating a minimal runtime image with proper security considerations.

LANGUAGE: dockerfile
CODE:
# syntax=docker/dockerfile:1

FROM eclipse-temurin:21-jdk-jammy as deps

WORKDIR /build

COPY --chmod=0755 mvnw mvnw
COPY .mvn/ .mvn/

RUN --mount=type=bind,source=pom.xml,target=pom.xml \
    --mount=type=cache,target=/root/.m2 ./mvnw dependency:go-offline -DskipTests

FROM deps as package

WORKDIR /build

COPY ./src src/
RUN --mount=type=bind,source=pom.xml,target=pom.xml \
    --mount=type=cache,target=/root/.m2 \
    ./mvnw package -DskipTests && \
    mv target/$(./mvnw help:evaluate -Dexpression=project.artifactId -q -DforceStdout)-$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout).jar target/app.jar

FROM package as extract

WORKDIR /build

RUN java -Djarmode=layertools -jar target/app.jar extract --destination target/extracted

FROM eclipse-temurin:21-jre-jammy AS final

ARG UID=10001
RUN adduser \
    --disabled-password \
    --gecos "" \
    --home "/nonexistent" \
    --shell "/sbin/nologin" \
    --no-create-home \
    --uid "${UID}" \
    appuser
USER appuser

COPY --from=extract build/target/extracted/dependencies/ ./
COPY --from=extract build/target/extracted/spring-boot-loader/ ./
COPY --from=extract build/target/extracted/snapshot-dependencies/ ./
COPY --from=extract build/target/extracted/application/ ./

EXPOSE 8080

ENTRYPOINT [ "java", "org.springframework.boot.loader.launch.JarLauncher" ]

----------------------------------------

TITLE: GitHub Actions Workflow for Docker Image Registry Copy
DESCRIPTION: GitHub Actions workflow that builds multi-platform Docker images and copies them between Docker Hub and GitHub Container Registry. The workflow includes steps for registry authentication, QEMU setup for multi-platform builds, Buildx configuration, and image copying using buildx imagetools.

LANGUAGE: yaml
CODE:
name: ci

on:
  push:

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            user/app:latest
            user/app:1.0.0

      - name: Push image to GHCR
        run: |
          docker buildx imagetools create \
            --tag ghcr.io/user/app:latest \
            --tag ghcr.io/user/app:1.0.0 \
            user/app:latest

----------------------------------------

TITLE: Setting up Docker's APT Repository on Raspberry Pi OS
DESCRIPTION: Commands to configure Docker's official APT repository, including adding GPG keys and repository sources.

LANGUAGE: bash
CODE:
# Add Docker's official GPG key:
sudo apt-get update
sudo apt-get install ca-certificates curl
sudo install -m 0755 -d /etc/apt/keyrings
sudo curl -fsSL https://download.docker.com/linux/raspbian/gpg -o /etc/apt/keyrings/docker.asc
sudo chmod a+r /etc/apt/keyrings/docker.asc

# Add the repository to Apt sources:
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/raspbian \
  $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt-get update

----------------------------------------

TITLE: Starting a Container with a Volume
DESCRIPTION: Demonstrates how to start a container with a volume using both the --mount and -v syntax options.

LANGUAGE: console
CODE:
$ docker run -d \
  --name devtest \
  --mount source=myvol2,target=/app \
  nginx:latest

LANGUAGE: console
CODE:
$ docker run -d \
  --name devtest \
  -v myvol2:/app \
  nginx:latest

----------------------------------------

TITLE: Configuring RAG Application Services in Docker Compose
DESCRIPTION: YAML configuration for the RAG application services in the docker-compose.yaml file. This snippet defines the winy service, specifying build context, environment variables, container name, port mapping, and dependencies.

LANGUAGE: yaml
CODE:
winy:
  build:
    context: ./app
    dockerfile: Dockerfile
  environment:
    - QDRANT_CLIENT=http://qdrant:6333 # Specifies the url for the qdrant database
    - OLLAMA=http://ollama:11434 # Specifies the url for the ollama service
  container_name: winy
  ports:
    - "8501:8501"
  depends_on:
    - qdrant
    - ollama

----------------------------------------

TITLE: Naming Stages in Multi-stage Dockerfile
DESCRIPTION: This Dockerfile shows how to name stages in a multi-stage build. It uses the AS keyword to name stages and references the stage name in the COPY instruction.

LANGUAGE: dockerfile
CODE:
# syntax=docker/dockerfile:1
FROM golang:{{% param "example_go_version" %}} AS build
WORKDIR /src
COPY <<EOF /src/main.go
package main

import "fmt"

func main() {
  fmt.Println("hello, world")
}
EOF
RUN go build -o /bin/hello ./main.go

FROM scratch
COPY --from=build /bin/hello /bin/hello
CMD ["/bin/hello"]

----------------------------------------

TITLE: Docker Container Management with Go SDK
DESCRIPTION: Complete example showing how to pull an image, create and start a container, wait for completion and get logs using the Go SDK

LANGUAGE: go
CODE:
package main

import (
	"context"
	"io"
	"os"

	"github.com/docker/docker/api/types/container"
        "github.com/docker/docker/api/types/image"
	"github.com/docker/docker/client"
	"github.com/docker/docker/pkg/stdcopy"
)

func main() {
    ctx := context.Background()
    cli, err := client.NewClientWithOpts(client.FromEnv, client.WithAPIVersionNegotiation())
    if err != nil {
        panic(err)
    }
    defer cli.Close()

    reader, err := cli.ImagePull(ctx, "docker.io/library/alpine", image.PullOptions{})
    if err != nil {
        panic(err)
    }
    io.Copy(os.Stdout, reader)

    resp, err := cli.ContainerCreate(ctx, &container.Config{
        Image: "alpine",
        Cmd:   []string{"echo", "hello world"},
    }, nil, nil, nil, "")
    if err != nil {
        panic(err)
    }

    if err := cli.ContainerStart(ctx, resp.ID, container.StartOptions{}); err != nil {
        panic(err)
    }

    statusCh, errCh := cli.ContainerWait(ctx, resp.ID, container.WaitConditionNotRunning)
    select {
    case err := <-errCh:
        if err != nil {
            panic(err)
        }
    case <-statusCh:
    }

    out, err := cli.ContainerLogs(ctx, resp.ID, container.LogsOptions{ShowStdout: true})
    if err != nil {
        panic(err)
    }

    stdcopy.StdCopy(os.Stdout, os.Stderr, out)
}

----------------------------------------

TITLE: Multi-stage Dockerfile for Demonstrating BuildKit Behavior
DESCRIPTION: This Dockerfile demonstrates the difference in behavior between the legacy Docker Engine builder and BuildKit. It contains three stages to illustrate how BuildKit only processes the necessary stages.

LANGUAGE: dockerfile
CODE:
# syntax=docker/dockerfile:1
FROM ubuntu AS base
RUN echo "base"

FROM base AS stage1
RUN echo "stage1"

FROM base AS stage2
RUN echo "stage2"

----------------------------------------

TITLE: Listing Docker Images
DESCRIPTION: Demonstrates how to list available Docker images using the docker image ls command.

LANGUAGE: console
CODE:
$ docker image ls

----------------------------------------

TITLE: GitHub Actions Workflow for Docker Build and Push
DESCRIPTION: GitHub Actions workflow configuration that logs into Docker Hub, sets up Docker Buildx, and builds and pushes a Docker image to Docker Hub on pushes to the main branch.

LANGUAGE: yaml
CODE:
name: ci

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ vars.DOCKER_USERNAME }}/${{ github.event.repository.name }}:latest

----------------------------------------

TITLE: Loading and Unloading AppArmor Profiles
DESCRIPTION: Commands for loading a new AppArmor profile and running a container with it, followed by commands to unload the profile.

LANGUAGE: console
CODE:
$ apparmor_parser -r -W /path/to/your_profile
$ docker run --rm -it --security-opt apparmor=your_profile hello-world
$ apparmor_parser -R /path/to/profile

----------------------------------------

TITLE: Basic Service Extension in Docker Compose
DESCRIPTION: Demonstrates how to extend a service configuration from another file using the extends keyword.

LANGUAGE: yaml
CODE:
services:
  web:
    extends:
      file: common-services.yml
      service: webapp

----------------------------------------

TITLE: Docker Init Configuration Dialog
DESCRIPTION: Interactive command line dialog for initializing Docker configuration for a Node.js application, setting up Node version, package manager, start command, and port.

LANGUAGE: console
CODE:
$ docker init
Welcome to the Docker Init CLI!

This utility will walk you through creating the following files with sensible defaults for your project:
  - .dockerignore
  - Dockerfile
  - compose.yaml
  - README.Docker.md

Let's get started!

? What application platform does your project use? Node
? What version of Node do you want to use? 18.0.0
? Which package manager do you want to use? npm
? What command do you want to use to start the app: node src/index.js
? What port does your server listen on? 3000

----------------------------------------

TITLE: Running an Interactive Ubuntu Container with Docker
DESCRIPTION: This command demonstrates how to run an Ubuntu container interactively, attaching it to the local command-line session and executing /bin/bash. It illustrates the process of container creation, image pulling, and runtime behavior.

LANGUAGE: console
CODE:
$ docker run -i -t ubuntu /bin/bash

----------------------------------------

TITLE: Creating User-Defined Overlay Network
DESCRIPTION: Create a custom overlay network and deploy an nginx service using the network with port mapping.

LANGUAGE: console
CODE:
$ docker network create -d overlay nginx-net

$ docker service create \
  --name my-nginx \
  --publish target=80,published=80 \
  --replicas=5 \
  --network nginx-net \
  nginx

----------------------------------------

TITLE: Configuring Docker Compose for Java Development
DESCRIPTION: This YAML snippet defines a Docker Compose configuration for a Java application with a PostgreSQL database. It sets up services for the server and database, including volume persistence and health checks.

LANGUAGE: yaml
CODE:
services:
  server:
    build:
      context: .
    ports:
      - 8080:8080
    depends_on:
      db:
        condition: service_healthy
    environment:
      - POSTGRES_URL=jdbc:postgresql://db:5432/petclinic
  db:
    image: postgres
    restart: always
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=petclinic
      - POSTGRES_USER=petclinic
      - POSTGRES_PASSWORD=petclinic
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "petclinic"]
      interval: 10s
      timeout: 5s
      retries: 5
volumes:
  db-data:

----------------------------------------

TITLE: Node.js Dockerfile Configuration
DESCRIPTION: Dockerfile for containerizing a Node.js application, including base image setup, dependency installation, security configurations, and application deployment settings.

LANGUAGE: dockerfile
CODE:
# syntax=docker/dockerfile:1

ARG NODE_VERSION=18.0.0

FROM node:${NODE_VERSION}-alpine

ENV NODE_ENV production

WORKDIR /usr/src/app

RUN --mount=type=bind,source=package.json,target=package.json \
    --mount=type=bind,source=package-lock.json,target=package-lock.json \
    --mount=type=cache,target=/root/.npm \
    npm ci --omit=dev

USER node

COPY . .

EXPOSE 3000

CMD node src/index.js

----------------------------------------

TITLE: Creating Workspace Dockerfile for Laravel Development
DESCRIPTION: Defines a Dockerfile for a workspace container that provides a dedicated shell for asset compilation, Artisan/Composer commands, and other CLI tasks. It includes PHP extensions, Xdebug, Composer, and Node.js.

LANGUAGE: dockerfile
CODE:
# docker/development/workspace/Dockerfile
# Use the official PHP CLI image as the base
FROM php:8.3-cli

# Set environment variables for user and group ID
ARG UID=1000
ARG GID=1000
ARG NODE_VERSION=22.0.0

# Install system dependencies and build libraries
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    unzip \
    libpq-dev \
    libonig-dev \
    libssl-dev \
    libxml2-dev \
    libcurl4-openssl-dev \
    libicu-dev \
    libzip-dev \
    && docker-php-ext-install -j$(nproc) \
    pdo_mysql \
    pdo_pgsql \
    pgsql \
    opcache \
    intl \
    zip \
    bcmath \
    soap \
    && pecl install redis xdebug \
    && docker-php-ext-enable redis xdebug\
    && curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer \
    && apt-get autoremove -y && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Use ARG to define environment variables passed from the Docker build command or Docker Compose.
ARG XDEBUG_ENABLED
ARG XDEBUG_MODE
ARG XDEBUG_HOST
ARG XDEBUG_IDE_KEY
ARG XDEBUG_LOG
ARG XDEBUG_LOG_LEVEL

# Configure Xdebug if enabled
RUN if [ "${XDEBUG_ENABLED}" = "true" ]; then \
    docker-php-ext-enable xdebug && \
    echo "xdebug.mode=${XDEBUG_MODE}" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini && \
    echo "xdebug.idekey=${XDEBUG_IDE_KEY}" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini && \
    echo "xdebug.log=${XDEBUG_LOG}" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini && \
    echo "xdebug.log_level=${XDEBUG_LOG_LEVEL}" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini && \
    echo "xdebug.client_host=${XDEBUG_HOST}" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini ; \
    echo "xdebug.start_with_request=yes" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini ; \
fi

# If the group already exists, use it; otherwise, create the 'www' group
RUN if getent group ${GID}; then \
      useradd -m -u ${UID} -g ${GID} -s /bin/bash www; \
    else \
      groupadd -g ${GID} www && \
      useradd -m -u ${UID} -g www -s /bin/bash www; \
    fi && \
    usermod -aG sudo www && \
    echo 'www ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers

# Switch to the non-root user to install NVM and Node.js
USER www

# Install NVM (Node Version Manager) as the www user
RUN export NVM_DIR="$HOME/.nvm" && \
    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.0/install.sh | bash && \
    [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh" && \
    nvm install ${NODE_VERSION} && \
    nvm alias default ${NODE_VERSION} && \
    nvm use default

# Ensure NVM is available for all future shells
RUN echo 'export NVM_DIR="$HOME/.nvm"' >> /home/www/.bashrc && \
    echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> /home/www/.bashrc && \
    echo '[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"' >> /home/www/.bashrc

# Set the working directory
WORKDIR /var/www

# Override the entrypoint to avoid the default php entrypoint
ENTRYPOINT []

# Default command to keep the container running
CMD ["bash"]

----------------------------------------

TITLE: Creating Non-Root User in Dockerfile
DESCRIPTION: Shows how to create a non-root user and group in a Dockerfile for running services without privileges.

LANGUAGE: Dockerfile
CODE:
RUN groupadd -r postgres && useradd --no-log-init -r -g postgres postgres

----------------------------------------

TITLE: Development Container Configuration with Multi-stage Build
DESCRIPTION: Enhanced Dockerfile that creates separate stages for production and development environments, including dev dependencies and testing setup.

LANGUAGE: dockerfile
CODE:
# syntax=docker/dockerfile:1

FROM composer:lts as prod-deps
WORKDIR /app
RUN --mount=type=bind,source=./composer.json,target=composer.json \
    --mount=type=bind,source=./composer.lock,target=composer.lock \
    --mount=type=cache,target=/tmp/cache \
    composer install --no-dev --no-interaction

FROM composer:lts as dev-deps
WORKDIR /app
RUN --mount=type=bind,source=./composer.json,target=composer.json \
    --mount=type=bind,source=./composer.lock,target=composer.lock \
    --mount=type=cache,target=/tmp/cache \
    composer install --no-interaction

FROM php:8.2-apache as base
RUN docker-php-ext-install pdo pdo_mysql
COPY ./src /var/www/html

FROM base as development
COPY ./tests /var/www/html/tests
RUN mv "$PHP_INI_DIR/php.ini-development" "$PHP_INI_DIR/php.ini"
COPY --from=dev-deps app/vendor/ /var/www/html/vendor

FROM base as final
RUN mv "$PHP_INI_DIR/php.ini-production" "$PHP_INI_DIR/php.ini"
COPY --from=prod-deps app/vendor/ /var/www/html/vendor
USER www-data

----------------------------------------

TITLE: Configuring Docker Remote Access via daemon.json
DESCRIPTION: JSON configuration to set Docker daemon hosts array for accepting connections on both Unix socket and TCP port 2375.

LANGUAGE: json
CODE:
{
  "hosts": ["unix:///var/run/docker.sock", "tcp://127.0.0.1:2375"]
}

----------------------------------------

TITLE: Running a Container using Docker SDKs and API
DESCRIPTION: This example demonstrates how to run a container using the Docker Go SDK, Python SDK, and HTTP API. It pulls the Alpine image, creates and starts a container that echoes "hello world", waits for it to finish, and prints the logs.

LANGUAGE: Go
CODE:
package main

import (
	"context"
	"io"
	"os"

	"github.com/docker/docker/api/types/container"
	"github.com/docker/docker/api/types/image"
	"github.com/docker/docker/client"
	"github.com/docker/docker/pkg/stdcopy"
)

func main() {
	ctx := context.Background()
	cli, err := client.NewClientWithOpts(client.FromEnv, client.WithAPIVersionNegotiation())
	if err != nil {
		panic(err)
	}
	defer cli.Close()

	reader, err := cli.ImagePull(ctx, "docker.io/library/alpine", image.PullOptions{})
	if err != nil {
		panic(err)
	}

	defer reader.Close()
	// cli.ImagePull is asynchronous.
	// The reader needs to be read completely for the pull operation to complete.
	// If stdout is not required, consider using io.Discard instead of os.Stdout.
	io.Copy(os.Stdout, reader)

	resp, err := cli.ContainerCreate(ctx, &container.Config{
		Image: "alpine",
		Cmd:   []string{"echo", "hello world"},
		Tty:   false,
	}, nil, nil, nil, "")
	if err != nil {
		panic(err)
	}

	if err := cli.ContainerStart(ctx, resp.ID, container.StartOptions{}); err != nil {
		panic(err)
	}

	statusCh, errCh := cli.ContainerWait(ctx, resp.ID, container.WaitConditionNotRunning)
	select {
	case err := <-errCh:
		if err != nil {
			panic(err)
		}
	case <-statusCh:
	}

	out, err := cli.ContainerLogs(ctx, resp.ID, container.LogsOptions{ShowStdout: true})
	if err != nil {
		panic(err)
	}

	stdcopy.StdCopy(os.Stdout, os.Stderr, out)
}

LANGUAGE: Python
CODE:
import docker
client = docker.from_env()
print(client.containers.run("alpine", ["echo", "hello", "world"]))

LANGUAGE: HTTP
CODE:
$ curl --unix-socket /var/run/docker.sock -H "Content-Type: application/json" \
  -d '{"Image": "alpine", "Cmd": ["echo", "hello world"]}' \
  -X POST http://localhost/v{{% param "latest_engine_api_version" %}}/containers/create
{"Id":"1c6594faf5","Warnings":null}

$ curl --unix-socket /var/run/docker.sock -X POST http://localhost/v{{% param "latest_engine_api_version" %}}/containers/1c6594faf5/start

$ curl --unix-socket /var/run/docker.sock -X POST http://localhost/v{{% param "latest_engine_api_version" %}}/containers/1c6594faf5/wait
{"StatusCode":0}

$ curl --unix-socket /var/run/docker.sock "http://localhost/v{{% param "latest_engine_api_version" %}}/containers/1c6594faf5/logs?stdout=1"
hello world

----------------------------------------

TITLE: Docker Compose Configuration for MySQL and phpMyAdmin
DESCRIPTION: Docker Compose file defining services for MySQL database and phpMyAdmin with volume persistence and networking

LANGUAGE: yaml
CODE:
services:
  db:
    image: mysql:latest
    environment:
      MYSQL_ROOT_PASSWORD: my-secret-pw
      MYSQL_DATABASE: mydb
    ports:
      - 3307:3306
    volumes:
      - my-db-volume:/var/lib/mysql

  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    environment:
      PMA_HOST: db
      PMA_PORT: 3306
      MYSQL_ROOT_PASSWORD: my-secret-pw
    ports:
      - 8080:80
    depends_on:
      - db

volumes:
  my-db-volume:

----------------------------------------

TITLE: Tagging Docker Image with Version
DESCRIPTION: This console command tags the Docker image with a version number, allowing for better version control and management of images.

LANGUAGE: console
CODE:
docker tag <YOUR_DOCKER_USERNAME>/docker-quickstart <YOUR_DOCKER_USERNAME>/docker-quickstart:1.0

----------------------------------------

TITLE: Configuring Docker Compose Test Service
DESCRIPTION: Example docker-compose.test.yml configuration that defines a test service (sut) which builds the repository and runs tests. The sut service's return code determines test success (0) or failure (non-0).

LANGUAGE: yaml
CODE:
services:
  sut:
    build: .
    command: run_tests.sh

----------------------------------------

TITLE: Enhanced Dockerfile with Cache Optimization
DESCRIPTION: Optimized Dockerfile that separates dependency installation from application code copying to improve cache utilization.

LANGUAGE: dockerfile
CODE:
FROM node:20-alpine
WORKDIR /app
COPY package.json yarn.lock ./
RUN yarn install --production
COPY . .
EXPOSE 3000
CMD ["node", "src/index.js"]

----------------------------------------

TITLE: Installing PHP Database Extensions in Dockerfile
DESCRIPTION: Dockerfile configuration that installs PDO and MySQL extensions for PHP database connectivity. Includes multi-stage build setup for dependencies and application deployment.

LANGUAGE: dockerfile
CODE:
# syntax=docker/dockerfile:1

FROM composer:lts as deps
WORKDIR /app
RUN --mount=type=bind,source=composer.json,target=composer.json \
    --mount=type=bind,source=composer.lock,target=composer.lock \
    --mount=type=cache,target=/tmp/cache \
    composer install --no-dev --no-interaction

FROM php:8.2-apache as final
RUN docker-php-ext-install pdo pdo_mysql
RUN mv "$PHP_INI_DIR/php.ini-production" "$PHP_INI_DIR/php.ini"
COPY --from=deps app/vendor/ /var/www/html/vendor
COPY ./src /var/www/html
USER www-data

----------------------------------------

TITLE: Docker Container Configuration
DESCRIPTION: Dockerfile containing instructions for building the application container

LANGUAGE: dockerfile
CODE:
FROM python:3.8-slim
WORKDIR /app
COPY requirements.txt /app
RUN pip install --no-cache-dir -r requirements.txt
RUN python -m spacy download en_core_web_sm
COPY *.py /app
COPY entrypoint.sh /app
RUN chmod +x /app/entrypoint.sh
ENTRYPOINT ["/app/entrypoint.sh"]

----------------------------------------

TITLE: Distributed Multi-Platform Docker Build with Matrix Strategy
DESCRIPTION: This workflow uses a matrix strategy to distribute the build for each platform across multiple runners. It builds the image for each platform on a dedicated runner, pushes by digest, and then creates manifest lists using the buildx imagetools create command.

LANGUAGE: yaml
CODE:
name: ci

on:
  push:

env:
  REGISTRY_IMAGE: user/app

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v6
        with:
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          tags: ${{ env.REGISTRY_IMAGE }}
          outputs: type=image,push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Create manifest list and push
        working-directory: ${{ runner.temp }}/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}

----------------------------------------

TITLE: Initializing Docker Swarm with Manager Node
DESCRIPTION: This command initializes a new Docker swarm and configures the current node as the manager. The --advertise-addr flag specifies the IP address that other nodes will use to join the swarm.

LANGUAGE: console
CODE:
$ docker swarm init --advertise-addr <MANAGER-IP>

----------------------------------------

TITLE: Defining Build Targets with Docker Buildx Bake in HCL
DESCRIPTION: This HCL code snippet demonstrates how to define a Bake file with multiple build targets and a default group. It specifies build contexts, Dockerfiles, build arguments, and tags for frontend and backend targets.

LANGUAGE: hcl
CODE:
group "default" {
  targets = ["frontend", "backend"]
}

target "frontend" {
  context = "./frontend"
  dockerfile = "frontend.Dockerfile"
  args = {
    NODE_VERSION = "22"
  }
  tags = ["myapp/frontend:latest"]
}

target "backend" {
  context = "./backend"
  dockerfile = "backend.Dockerfile"
  args = {
    GO_VERSION = "{{% param "example_go_version" %}}"
  }
  tags = ["myapp/backend:latest"]
}

----------------------------------------

TITLE: Distributed Multi-Platform Docker Build with Bake
DESCRIPTION: This GitHub Actions workflow demonstrates a distributed multi-platform Docker build using Bake. It prepares a matrix of platforms, builds images for each platform, and then merges the results into a multi-platform image.

LANGUAGE: yaml
CODE:
name: ci

on:
  push:

env:
  REGISTRY_IMAGE: user/app

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.platforms.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create matrix
        id: platforms
        run: |
          echo "matrix=$(docker buildx bake image-all --print | jq -cr '.target."image-all".platforms')" >>${GITHUB_OUTPUT}

      - name: Show matrix
        run: |
          echo ${{ steps.platforms.outputs.matrix }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}

      - name: Rename meta bake definition file
        run: |
          mv "${{ steps.meta.outputs.bake-file }}" "${{ runner.temp }}/bake-meta.json"

      - name: Upload meta bake definition
        uses: actions/upload-artifact@v4
        with:
          name: bake-meta
          path: ${{ runner.temp }}/bake-meta.json
          if-no-files-found: error
          retention-days: 1

  build:
    runs-on: ubuntu-latest
    needs:
      - prepare
    strategy:
      fail-fast: false
      matrix:
        platform: ${{ fromJson(needs.prepare.outputs.matrix) }}
    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Download meta bake definition
        uses: actions/download-artifact@v4
        with:
          name: bake-meta
          path: ${{ runner.temp }}
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build
        id: bake
        uses: docker/bake-action@v6
        with:
          files: |
            ./docker-bake.hcl
            cwd://${{ runner.temp }}/bake-meta.json
          targets: image
          set: |
            *.tags=${{ env.REGISTRY_IMAGE }}
            *.platform=${{ matrix.platform }}
            *.output=type=image,push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ fromJSON(steps.bake.outputs.metadata).image['containerimage.digest'] }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Download meta bake definition
        uses: actions/download-artifact@v4
        with:
          name: bake-meta
          path: ${{ runner.temp }}

      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create manifest list and push
        working-directory: ${{ runner.temp }}/digests
        run: |
          docker buildx imagetools create $(jq -cr '.target."docker-metadata-action".tags | map(select(startswith("${{ env.REGISTRY_IMAGE }}")) | "-t " + .) | join(" ")' ${{ runner.temp }}/bake-meta.json) \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:$(jq -r '.target."docker-metadata-action".args.DOCKER_META_VERSION' ${{ runner.temp }}/bake-meta.json)

----------------------------------------

TITLE: Multi-stage Dockerfile for Node.js Testing
DESCRIPTION: This Dockerfile defines multiple stages for development, production, and testing. The test stage installs dependencies, copies the application code, and runs the tests using npm run test.

LANGUAGE: Dockerfile
CODE:
# syntax=docker/dockerfile:1

ARG NODE_VERSION=18.0.0

FROM node:${NODE_VERSION}-alpine as base
WORKDIR /usr/src/app
EXPOSE 3000

FROM base as dev
RUN --mount=type=bind,source=package.json,target=package.json \
    --mount=type=bind,source=package-lock.json,target=package-lock.json \
    --mount=type=cache,target=/root/.npm \
    npm ci --include=dev
USER node
COPY . .
CMD npm run dev

FROM base as prod
RUN --mount=type=bind,source=package.json,target=package.json \
    --mount=type=bind,source=package-lock.json,target=package-lock.json \
    --mount=type=cache,target=/root/.npm \
    npm ci --omit=dev
USER node
COPY . .
CMD node src/index.js

FROM base as test
ENV NODE_ENV test
RUN --mount=type=bind,source=package.json,target=package.json \
    --mount=type=bind,source=package-lock.json,target=package-lock.json \
    --mount=type=cache,target=/root/.npm \
    npm ci --include=dev
USER node
COPY . .
RUN npm run test

----------------------------------------

TITLE: Using Git Commit Timestamp with docker/build-push-action
DESCRIPTION: GitHub Actions workflow that extracts the Git commit timestamp and uses it as SOURCE_DATE_EPOCH when building Docker images with docker/build-push-action. This ensures builds are reproducible based on commit timing.

LANGUAGE: yaml
CODE:
name: ci

on:
  push:

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Get Git commit timestamps
        run: echo "TIMESTAMP=$(git log -1 --pretty=%ct)" >> $GITHUB_ENV

      - name: Build
        uses: docker/build-push-action@v6
        with:
          tags: user/app:latest
        env:
          SOURCE_DATE_EPOCH: ${{ env.TIMESTAMP }}

----------------------------------------

TITLE: Implementing Unix Epoch Timestamp Build with docker/build-push-action
DESCRIPTION: GitHub Actions workflow configuration that sets SOURCE_DATE_EPOCH to 0 (Unix epoch) when building Docker images using docker/build-push-action. This ensures reproducible builds with consistent timestamps.

LANGUAGE: yaml
CODE:
name: ci

on:
  push:

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build
        uses: docker/build-push-action@v6
        with:
          tags: user/app:latest
        env:
          SOURCE_DATE_EPOCH: 0

----------------------------------------

TITLE: Advanced Service Configuration in Docker Compose
DESCRIPTION: This example shows a more complex service setup with a proxy service using Nginx, mounting a configuration file, exposing ports, and depending on a backend service. The backend service builds an image from a Dockerfile.

LANGUAGE: yaml
CODE:
services:
  proxy:
    image: nginx
    volumes:
      - type: bind
        source: ./proxy/nginx.conf
        target: /etc/nginx/conf.d/default.conf
        read_only: true
    ports:
      - 80:80
    depends_on:
      - backend

  backend:
    build:
      context: backend
      target: builder

----------------------------------------

TITLE: Basic Compose File Service Definition with Bake
DESCRIPTION: Example compose.yaml file showing service definitions with build configurations including cache settings and platform specifications using YAML anchors.

LANGUAGE: yaml
CODE:
services:
  webapp-dev:
    build: &build-dev
      dockerfile: Dockerfile.webapp
      tags:
        - docker.io/username/webapp:latest
      cache_from:
        - docker.io/username/webapp:cache
      cache_to:
        - docker.io/username/webapp:cache

  webapp-release:
    build:
      <<: *build-dev
      x-bake:
        platforms:
          - linux/amd64
          - linux/arm64

  db:
    image: docker.io/username/db
    build:
      dockerfile: Dockerfile.db

----------------------------------------

TITLE: Complete Docker Compose YAML for Multi-Container App
DESCRIPTION: This snippet shows the complete Docker Compose YAML file that defines both the app and MySQL services, including all necessary configurations for running a multi-container application.

LANGUAGE: yaml
CODE:
services:
  app:
    image: node:18-alpine
    command: sh -c "yarn install && yarn run dev"
    ports:
      - 127.0.0.1:3000:3000
    working_dir: /app
    volumes:
      - ./:/app
    environment:
      MYSQL_HOST: mysql
      MYSQL_USER: root
      MYSQL_PASSWORD: secret
      MYSQL_DB: todos

  mysql:
    image: mysql:8.0
    volumes:
      - todo-mysql-data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: secret
      MYSQL_DATABASE: todos

volumes:
  todo-mysql-data:

----------------------------------------

TITLE: Generating and Loading Docker Trust Keys
DESCRIPTION: Demonstrates how to generate a new Docker trust key pair and how to load an existing private key for signing images.

LANGUAGE: bash
CODE:
$ docker trust key generate jeff
Generating key for jeff...
Enter passphrase for new jeff key with ID 9deed25:
Repeat passphrase for new jeff key with ID 9deed25:
Successfully generated and loaded private key. Corresponding public key available: /home/ubuntu/Documents/mytrustdir/jeff.pub

LANGUAGE: bash
CODE:
$ docker trust key load key.pem --name jeff
Loading key from "key.pem"...
Enter passphrase for new jeff key with ID 8ae710e:
Repeat passphrase for new jeff key with ID 8ae710e:
Successfully imported key from key.pem

----------------------------------------

TITLE: Dockerfile for Text Classification Application
DESCRIPTION: This Dockerfile sets up the environment for running the text classification application in a Docker container. It uses a Python 3.8 slim image, installs dependencies, and copies the application files.

LANGUAGE: dockerfile
CODE:
FROM python:3.8-slim
WORKDIR /app
COPY requirements.txt /app
RUN pip install --no-cache-dir -r requirements.txt
RUN python -m spacy download en_core_web_sm
COPY *.py /app
COPY entrypoint.sh /app
RUN chmod +x /app/entrypoint.sh
ENTRYPOINT ["/app/entrypoint.sh"]

----------------------------------------

TITLE: Pushing Docker Image to Registry
DESCRIPTION: Command to push the built Docker image to Docker Hub registry

LANGUAGE: console
CODE:
$ docker push <DOCKER_USERNAME>/getting-started-todo-app

----------------------------------------

TITLE: Running Docker Compose with Development Profile
DESCRIPTION: Demonstrates how to use Docker Compose profiles to start services associated with the development environment. This command activates only the services tagged with the 'dev' profile while leaving other services inactive.

LANGUAGE: console
CODE:
$ docker compose --profile dev up

----------------------------------------

TITLE: GitHub Actions Workflow for Node.js Docker CI/CD
DESCRIPTION: YAML configuration for a GitHub Actions workflow that builds, tests, and pushes a Node.js Docker image to Docker Hub. It includes steps for logging into Docker Hub, setting up Docker Buildx, and using multi-platform builds.

LANGUAGE: yaml
CODE:
name: ci

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and test
        uses: docker/build-push-action@v6
        with:
          target: test
          load: true

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64,linux/arm64
          push: true
          target: prod
          tags: ${{ vars.DOCKER_USERNAME }}/${{ github.event.repository.name }}:latest

----------------------------------------

TITLE: Building Application Image
DESCRIPTION: Series of commands to create and commit a new application image with a Node.js script.

LANGUAGE: console
CODE:
$ docker run --name=app-container -ti node-base

LANGUAGE: console
CODE:
$ echo 'console.log("Hello from an app")' > app.js

LANGUAGE: console
CODE:
$ docker container commit -c "CMD node app.js" -m "Add app" app-container sample-app

----------------------------------------

TITLE: Basic Multi-Platform Docker Build Command
DESCRIPTION: Example command showing how to build a Docker image for multiple platforms using buildx.

LANGUAGE: console
CODE:
$ docker buildx build --platform linux/amd64,linux/arm64 .

----------------------------------------

TITLE: Launching BuildKit Daemon for Unix Socket Connection
DESCRIPTION: This command starts a BuildKit daemon instance listening on a Unix socket, which can be used with the remote driver.

LANGUAGE: console
CODE:
$ sudo ./buildkitd --group $(id -gn) --addr unix://$HOME/buildkitd.sock

----------------------------------------

TITLE: Configuring Docker Compose for Development with Debugging
DESCRIPTION: This YAML snippet updates the Docker Compose configuration to use the development stage of the Dockerfile and exposes the debugging port. It also adds Compose Watch for automatic rebuilds during development.

LANGUAGE: yaml
CODE:
services:
  server:
    build:
      context: .
      target: development
    ports:
      - 8080:8080
      - 8000:8000
    depends_on:
      db:
        condition: service_healthy
    environment:
      - POSTGRES_URL=jdbc:postgresql://db:5432/petclinic
    develop:
      watch:
        - action: rebuild
          path: .
  db:
    image: postgres
    restart: always
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=petclinic
      - POSTGRES_USER=petclinic
      - POSTGRES_PASSWORD=petclinic
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "petclinic"]
      interval: 10s
      timeout: 5s
      retries: 5
volumes:
  db-data:

----------------------------------------

TITLE: Simple Multi-Platform Dockerfile
DESCRIPTION: Basic Dockerfile example that demonstrates platform-specific build arguments for cross-compilation.

LANGUAGE: dockerfile
CODE:
# syntax=docker/dockerfile:1
FROM --platform=$BUILDPLATFORM golang:alpine AS build
ARG TARGETPLATFORM
ARG BUILDPLATFORM
RUN echo "I am running on $BUILDPLATFORM, building for $TARGETPLATFORM" > /log
FROM alpine
COPY --from=build /log /log

----------------------------------------

TITLE: GitHub Actions Workflow for Docker Scout Policy Evaluation
DESCRIPTION: A complete GitHub Actions workflow that builds a Docker image and performs policy evaluation using Docker Scout. The workflow authenticates with registries, builds images, and compares policy compliance against a production baseline. It includes permissions handling and conditional execution for pull requests.

LANGUAGE: yaml
CODE:
name: Docker

on:
  push:
    tags: ["*"]
    branches:
      - "main"
  pull_request:
    branches: ["**"]

env:
  REGISTRY: docker.io
  IMAGE_NAME: <IMAGE_NAME>
  DOCKER_ORG: <ORG>

jobs:
  build:
    permissions:
      pull-requests: write

    runs-on: ubuntu-latest
    steps:
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_TOKEN }}
      
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}

      - name: Build image
        id: build-and-push
        uses: docker/build-push-action@v4
        with:
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          sbom: ${{ github.event_name != 'pull_request' }}
          provenance: ${{ github.event_name != 'pull_request' }}
          push: ${{ github.event_name != 'pull_request' }}
          load: ${{ github.event_name == 'pull_request' }}

      - name: Authenticate with Docker
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PAT }}

      - name: Compare
        if: ${{ github.event_name == 'pull_request' }}
        uses: docker/scout-action@v1
        with:
          command: compare
          image: ${{ steps.meta.outputs.tags }}
          to-env: production
          platform: "linux/amd64"
          ignore-unchanged: true
          only-severities: critical,high
          organization: ${{ env.DOCKER_ORG }}
          exit-on: policy

----------------------------------------

TITLE: Using Local Cache with GitHub Actions in Docker
DESCRIPTION: This snippet shows how to use GitHub cache with the local cache exporter in Docker builds. It includes steps for caching Docker layers, building and pushing the image, and a workaround for moving the cache to prevent indefinite growth.

LANGUAGE: yaml
CODE:
name: ci

on:
  push:

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: ${{ runner.temp }}/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: user/app:latest
          cache-from: type=local,src=${{ runner.temp }}/.buildx-cache
          cache-to: type=local,dest=${{ runner.temp }}/.buildx-cache-new,mode=max

      - # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
        name: Move cache
        run: |
          rm -rf ${{ runner.temp }}/.buildx-cache
          mv ${{ runner.temp }}/.buildx-cache-new ${{ runner.temp }}/.buildx-cache

----------------------------------------

TITLE: Defining Kubernetes Deployment and Service in YAML
DESCRIPTION: This YAML file defines a Kubernetes Deployment for a web application and a NodePort Service to expose it. The Deployment creates a single replica of a pod running the 'getting-started' image, while the Service routes traffic from port 30001 to the pod's port 3000.

LANGUAGE: yaml
CODE:
apiVersion: apps/v1
kind: Deployment
metadata:
  name: bb-demo
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      bb: web
  template:
    metadata:
      labels:
        bb: web
    spec:
      containers:
        - name: bb-site
          image: getting-started
          imagePullPolicy: Never
---
apiVersion: v1
kind: Service
metadata:
  name: bb-entrypoint
  namespace: default
spec:
  type: NodePort
  selector:
    bb: web
  ports:
    - port: 3000
      targetPort: 3000
      nodePort: 30001

----------------------------------------

TITLE: Running Docker Container with Custom Seccomp Profile
DESCRIPTION: This command demonstrates how to run a Docker container with a custom seccomp profile using the --security-opt flag.

LANGUAGE: console
CODE:
$ docker run --rm \
             -it \
             --security-opt seccomp=/path/to/seccomp/profile.json \
             hello-world

----------------------------------------

TITLE: Rebuilding and Redeploying Docker Service
DESCRIPTION: Commands to rebuild and redeploy a specific service in Docker Compose. The --no-deps flag ensures only the specified service is recreated without affecting its dependencies.

LANGUAGE: console
CODE:
$ docker compose build web
$ docker compose up --no-deps -d web

----------------------------------------

TITLE: Full Bake Configuration with Advanced Features
DESCRIPTION: Complete HCL configuration for Bake, including multi-platform support, annotations, and attestations.

LANGUAGE: hcl
CODE:
group "default" {
  targets = ["vote", "result", "worker"]
}

target "_common" {
  annotations = ["org.opencontainers.image.authors=username"]
  platforms = ["linux/amd64", "linux/arm64"]
  attest = [
    "type=provenance,mode=max",
    "type=sbom"
  ]
}

target "vote" {
  inherits = ["_common"]
  target = "final"
}

target "result" {
  inherits = ["_common"]
}

target "worker" {
  inherits = ["_common"]
}

----------------------------------------

TITLE: Creating Basic Macvlan Network in Bridge Mode
DESCRIPTION: Creates a Macvlan network that bridges with a physical network interface using the specified subnet and gateway configurations.

LANGUAGE: bash
CODE:
docker network create -d macvlan \
  --subnet=172.16.86.0/24 \
  --gateway=172.16.86.1 \
  -o parent=eth0 pub_net

----------------------------------------

TITLE: Docker Compose Configuration
DESCRIPTION: Docker Compose configuration for orchestrating the Node.js application container, including service definition, port mapping, and environment settings.

LANGUAGE: yaml
CODE:
services:
  server:
    build:
      context: .
    environment:
      NODE_ENV: production
    ports:
      - 3000:3000

----------------------------------------

TITLE: Dockerfile for Sentiment Analysis Application
DESCRIPTION: Dockerfile contents for building the Docker image to run the sentiment analysis application.

LANGUAGE: dockerfile
CODE:
FROM python:3.8-slim
WORKDIR /app
COPY requirements.txt /app
RUN pip install --no-cache-dir -r requirements.txt
RUN python -m spacy download en_core_web_sm
COPY *.py /app
COPY entrypoint.sh /app
RUN chmod +x /app/entrypoint.sh
ENTRYPOINT ["/app/entrypoint.sh"]

----------------------------------------

TITLE: Docker Compose Include with Override Path
DESCRIPTION: Shows how to include a third-party compose file with a local override file to customize the configuration.

LANGUAGE: yaml
CODE:
include:
  - path : 
      - third-party/compose.yaml
      - override.yaml  # local override for third-party model

----------------------------------------

TITLE: Multi-stage Dockerfile for Spring Boot
DESCRIPTION: This multi-stage Dockerfile separates the build and runtime environments. It uses a JDK image for building and a JRE image for the final runtime, resulting in a smaller and more secure final image.

LANGUAGE: dockerfile
CODE:
FROM eclipse-temurin:21.0.2_13-jdk-jammy AS builder
WORKDIR /opt/app
COPY .mvn/ .mvn
COPY mvnw pom.xml ./
RUN ./mvnw dependency:go-offline
COPY ./src ./src
RUN ./mvnw clean install

FROM eclipse-temurin:21.0.2_13-jre-jammy AS final
WORKDIR /opt/app
EXPOSE 8080
COPY --from=builder /opt/app/target/*.jar /opt/app/*.jar
ENTRYPOINT ["java", "-jar", "/opt/app/*.jar"]

----------------------------------------

TITLE: Listing Docker Contexts
DESCRIPTION: Shows how to list available Docker contexts using the docker context ls command. Displays context names, descriptions, and endpoints.

LANGUAGE: console
CODE:
$ docker context ls
NAME        DESCRIPTION                               DOCKER ENDPOINT               ERROR
default *                                             unix:///var/run/docker.sock

----------------------------------------

TITLE: Docker Compose Configuration with MariaDB
DESCRIPTION: Compose file setup that defines services for PHP application server, MariaDB database, and volume persistence. Includes environment configuration and health checks.

LANGUAGE: yaml
CODE:
services:
  server:
    build:
      context: .
    ports:
      - 9000:80
    depends_on:
      db:
        condition: service_healthy
    secrets:
      - db-password
    environment:
      - PASSWORD_FILE_PATH=/run/secrets/db-password
      - DB_HOST=db
      - DB_NAME=example
      - DB_USER=root
  db:
    image: mariadb
    restart: always
    user: root
    secrets:
      - db-password
    volumes:
      - db-data:/var/lib/mysql
    environment:
      - MARIADB_ROOT_PASSWORD_FILE=/run/secrets/db-password
      - MARIADB_DATABASE=example
    expose:
      - 3306
    healthcheck:
      test:
        [
          "CMD",
          "/usr/local/bin/healthcheck.sh",
          "--su-mysql",
          "--connect",
          "--innodb_initialized",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
volumes:
  db-data:
secrets:
  db-password:
    file: db/password.txt

----------------------------------------

TITLE: Building Docker Image
DESCRIPTION: Command to build the Docker image with the tag 'hello'.

LANGUAGE: bash
CODE:
$ docker build -t hello .

----------------------------------------

TITLE: Configuring BuildKit Daemon with TOML
DESCRIPTION: Complete example of a buildkitd.toml configuration file showing all available options including global settings, worker configurations (OCI and containerd), registry settings, and frontend controls. The configuration demonstrates debug settings, resource limits, garbage collection policies, and security parameters.

LANGUAGE: toml
CODE:
# debug enables additional debug logging
debug = true
# trace enables additional trace logging (very verbose, with potential performance impacts)
trace = true
# root is where all buildkit state is stored.
root = "/var/lib/buildkit"
# insecure-entitlements allows insecure entitlements, disabled by default.
insecure-entitlements = [ "network.host", "security.insecure" ]

[log]
  # log formatter: json or text
  format = "text"

[dns]
  nameservers=["1.1.1.1","8.8.8.8"]
  options=["edns0"]
  searchDomains=["example.com"]

[grpc]
  address = [ "tcp://0.0.0.0:1234" ]
  # debugAddress is address for attaching go profiles and debuggers.
  debugAddress = "0.0.0.0:6060"
  uid = 0
  gid = 0
  [grpc.tls]
    cert = "/etc/buildkit/tls.crt"
    key = "/etc/buildkit/tls.key"
    ca = "/etc/buildkit/tlsca.crt"

[otel]
  # OTEL collector trace socket path
  socketPath = "/run/buildkit/otel-grpc.sock"

[cdi]
  # Disables support of the Container Device Interface (CDI).
  disabled = true
  # List of directories to scan for CDI spec files.
  specDirs = ["/etc/cdi", "/var/run/cdi", "/etc/buildkit/cdi"]

[history]
  maxAge = 172800
  maxEntries = 50

[worker.oci]
  enabled = true
  platforms = [ "linux/amd64", "linux/arm64" ]
  snapshotter = "auto"
  rootless = false
  noProcessSandbox = false
  gc = true
  reservedSpace = "30%"
  maxUsedSpace = "60%"
  minFreeSpace = "20GB"
  binary = ""
  apparmor-profile = ""
  max-parallelism = 4
  cniPoolSize = 16

  [worker.oci.labels]
    "foo" = "bar"

  [[worker.oci.gcpolicy]]
    reservedSpace = "512MB"
    maxUsedSpace = "1GB"
    minFreeSpace = "10GB"
    keepDuration = "48h"
    filters = [ "type==source.local", "type==exec.cachemount", "type==source.git.checkout"]
  [[worker.oci.gcpolicy]]
    all = true
    reservedSpace = 1024000000

[worker.containerd]
  address = "/run/containerd/containerd.sock"
  enabled = true
  platforms = [ "linux/amd64", "linux/arm64" ]
  namespace = "buildkit"
  gc = true
  reservedSpace = "30%"
  maxUsedSpace = "60%"
  minFreeSpace = "20GB"
  cniPoolSize = 16
  defaultCgroupParent = "buildkit"

  [worker.containerd.labels]
    "foo" = "bar"

  [worker.containerd.runtime]
    name = "io.containerd.runc.v2"
    path = "/path/to/containerd/runc/shim"
    options = { BinaryName = "runc" }

  [[worker.containerd.gcpolicy]]
    reservedSpace = 512000000
    keepDuration = 172800
    filters = [ "type==source.local", "type==exec.cachemount", "type==source.git.checkout"]
  [[worker.containerd.gcpolicy]]
    all = true
    reservedSpace = 1024000000

[registry."docker.io"]
  mirrors = ["yourmirror.local:5000", "core.harbor.domain/proxy.docker.io"]
  http = true
  insecure = true
  ca=["/etc/config/myca.pem"]
  [[registry."docker.io".keypair]]
    key="/etc/config/key.pem"
    cert="/etc/config/cert.pem"

[registry."yourmirror.local:5000"]
  http = true

[frontend."dockerfile.v0"]
  enabled = true

[frontend."gateway.v0"]
  enabled = true
  allowedRepositories = []

[system]
  platformsCacheMaxAge = "1h"


----------------------------------------

TITLE: NVIDIA GPU Status Output
DESCRIPTION: Example output from nvidia-smi showing GPU status inside container

LANGUAGE: bash
CODE:
+-------------------------------------------------------------------------------+
| NVIDIA-SMI 384.130            	Driver Version: 384.130               	|
|-------------------------------+----------------------+------------------------+
| GPU  Name 	   Persistence-M| Bus-Id    	Disp.A | Volatile Uncorr. ECC   |
| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M.   |
|===============================+======================+========================|
|   0  GRID K520       	Off  | 00000000:00:03.0 Off |                  N/A      |
| N/A   36C	P0    39W / 125W |  	0MiB /  4036MiB |      0%  	Default |
+-------------------------------+----------------------+------------------------+
+-------------------------------------------------------------------------------+
| Processes:                                                       GPU Memory   |
|  GPU   	PID   Type   Process name                         	Usage  	|
|===============================================================================|
|  No running processes found                                                   |
+-------------------------------------------------------------------------------+

----------------------------------------

TITLE: Configuring Compose Watch with Sync and Restart Actions
DESCRIPTION: This YAML snippet demonstrates how to use both sync and sync+restart actions in Compose Watch. It includes rules for syncing web files, ignoring node_modules, and restarting the service when nginx.conf changes.

LANGUAGE: yaml
CODE:
services:
  web:
    build: .
    command: npm start
    develop:
      watch:
        - action: sync
          path: ./web
          target: /app/web
          ignore:
            - node_modules/
        - action: sync+restart
          path: ./proxy/nginx.conf
          target: /etc/nginx/conf.d/default.conf

  backend:
    build:
      context: backend
      target: builder

----------------------------------------

TITLE: Configuring Ruby on Rails Docker Environment
DESCRIPTION: This Dockerfile sets up a Ruby on Rails environment using Ruby 3.2. It installs necessary dependencies, sets up the database, and prepares the Rails application for deployment.

LANGUAGE: Dockerfile
CODE:
FROM ruby:3.2
RUN apt-get update -qq && apt-get install -y nodejs postgresql-client
WORKDIR /myapp
COPY Gemfile /myapp/Gemfile
COPY Gemfile.lock /myapp/Gemfile.lock
RUN bundle install

# Add a script to be executed every time the container starts.
COPY entrypoint.sh /usr/bin/
RUN chmod +x /usr/bin/entrypoint.sh
ENTRYPOINT ["entrypoint.sh"]
EXPOSE 3000

# Configure the main process to run when running the image
CMD ["rails", "server", "-b", "0.0.0.0"]

----------------------------------------

TITLE: Listing Docker Compose Services
DESCRIPTION: Command to list all services along with their current status.

LANGUAGE: console
CODE:
$ docker compose ps

----------------------------------------

TITLE: Configuring Multi-Service Dev Environment with Docker Compose
DESCRIPTION: Example compose-dev.yaml configuration that sets up a development environment with backend, database, and proxy services. Includes volume and secret management for a MariaDB database setup with health checks.

LANGUAGE: yaml
CODE:
version: "3.7"
services:
  backend:
    build:
      context: backend
      target: development
    secrets:
      - db-password
    depends_on:
      - db
  db:
    image: mariadb
    restart: always
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "127.0.0.1", "--silent" ]
      interval: 3s
      retries: 5
      start_period: 30s
    secrets:
      - db-password
    volumes:
      - db-data:/var/lib/mysql
    environment:
      - MYSQL_DATABASE=example
      - MYSQL_ROOT_PASSWORD_FILE=/run/secrets/db-password
    expose:
      - 3306
  proxy:
    build: proxy
    ports:
      - 8080:80
    depends_on:
      - backend
volumes:
  db-data:
secrets:
  db-password:
    file: db/password.txt

----------------------------------------

TITLE: Publishing a Docker Image
DESCRIPTION: Demonstrates how to push a tagged image to a registry using the docker push command.

LANGUAGE: console
CODE:
docker push my-username/my-image

----------------------------------------

TITLE: Complete Example of Creating and Using a Kubernetes Builder
DESCRIPTION: This set of commands demonstrates the full process of creating a namespace, creating a Kubernetes builder, listing builders, and building an image using the Kubernetes builder.

LANGUAGE: console
CODE:
$ kubectl create namespace buildkit

$ docker buildx create \
  --bootstrap \
  --name=kube \
  --driver=kubernetes \
  --driver-opt=namespace=buildkit

$ docker buildx ls

$ kubectl -n buildkit get deployments
$ kubectl -n buildkit get pods

$ docker buildx build \
  --builder=kube \
  -t <registry>/<image> \
  --push .

----------------------------------------

TITLE: Setting up GenAI stack with GPU acceleration on Linux
DESCRIPTION: Commands to clone the GenAI stack repository, start the Docker containers with GPU support, and configure the environment file.

LANGUAGE: bash
CODE:
git clone https://github.com/docker/genai-stack
docker compose --profile linux-gpu up -d
mv env.example .env
nano .env

----------------------------------------

TITLE: Docker Compose Service Linking Configuration
DESCRIPTION: Example showing how to create service aliases using links in Docker Compose, allowing a service to be reachable by multiple hostnames.

LANGUAGE: yaml
CODE:
services:
  web:
    build: .
    links:
      - "db:database"
  db:
    image: postgres

----------------------------------------

TITLE: Configuring Docker Daemon Proxy Settings in JSON
DESCRIPTION: This JSON snippet shows how to configure HTTP and HTTPS proxy settings, as well as no-proxy exceptions, in the daemon.json configuration file for the Docker daemon.

LANGUAGE: json
CODE:
{
  "proxies": {
    "http-proxy": "http://proxy.example.com:3128",
    "https-proxy": "https://proxy.example.com:3129",
    "no-proxy": "*.test.example.com,.example.org,127.0.0.0/8"
  }
}

----------------------------------------

TITLE: Creating Docker Assets with Docker Init
DESCRIPTION: Using Docker Init to create necessary Docker assets for a Python project, including Dockerfile, compose.yaml, and .dockerignore.

LANGUAGE: Shell
CODE:
$ docker init

----------------------------------------

TITLE: GitHub Actions Workflow Configuration
DESCRIPTION: YAML configuration for GitHub Actions workflow that handles Docker image building and pushing to Docker Hub. Includes authentication, buildx setup, and multi-architecture build support.

LANGUAGE: yaml
CODE:
name: ci

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ vars.DOCKER_USERNAME }}/${{ github.event.repository.name }}:latest

----------------------------------------

TITLE: Viewing Docker Compose Logs
DESCRIPTION: This console command shows how to view the logs of all services defined in the Docker Compose file, with the logs being followed in real-time.

LANGUAGE: console
CODE:
$ docker compose logs -f

----------------------------------------

TITLE: Configuring GitHub Actions Workflow for Docker Image Build and Push
DESCRIPTION: This YAML snippet sets up a GitHub Actions workflow to build and push Docker images. It includes steps for authentication, metadata extraction, and using Docker buildx.

LANGUAGE: yaml
CODE:
name: Docker

on:
  push:
    tags: ["*"]
    branches:
      - "main"
  pull_request:
    branches: ["**"]

env:
  # Hostname of your registry
  REGISTRY: docker.io
  # Image repository, without hostname and tag
  IMAGE_NAME: ${{ github.repository }}
  SHA: ${{ github.event.pull_request.head.sha || github.event.after }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write

    steps:
      # Authenticate to the container registry
      - name: Authenticate to registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_TOKEN }}
      
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v3

      # Extract metadata (tags, labels) for Docker
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          labels: |
            org.opencontainers.image.revision=${{ env.SHA }}
          tags: |
            type=edge,branch=$repo.default_branch
            type=semver,pattern=v{{version}}
            type=sha,prefix=,suffix=,format=short

      # Build and push Docker image with Buildx
      # (don't push on PR, load instead)
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v6
        with:
          sbom: ${{ github.event_name != 'pull_request' }}
          provenance: ${{ github.event_name != 'pull_request' }}
          push: ${{ github.event_name != 'pull_request' }}
          load: ${{ github.event_name == 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

----------------------------------------

TITLE: Defining Simple Services in Docker Compose
DESCRIPTION: This example demonstrates how to define two basic services, set their images, map ports, and configure environment variables using Docker Compose.

LANGUAGE: yaml
CODE:
services:
  web:
    image: nginx:latest
    ports:
      - "8080:80"

  db:
    image: postgres:13
    environment:
      POSTGRES_USER: example
      POSTGRES_DB: exampledb

----------------------------------------

TITLE: Deploying C++ Application to Kubernetes
DESCRIPTION: These console commands deploy the C++ application to Kubernetes using the YAML file, verify the deployment and service creation, and then tear down the application. The commands use kubectl to interact with the Kubernetes cluster.

LANGUAGE: console
CODE:
$ kubectl apply -f docker-kubernetes.yml
$ kubectl get deployments
$ kubectl get services
$ kubectl delete -f docker-kubernetes.yml

----------------------------------------

TITLE: Adding Bearer Token Authentication to Prometheus Configuration
DESCRIPTION: This YAML snippet shows how to add bearer token authentication to the Prometheus configuration. It defines the authorization type and the path to the credentials file containing the Personal Access Token.

LANGUAGE: yaml
CODE:
scrape_configs:
  - job_name: $ORG
    authorization:
      type: Bearer
      credentials_file: /etc/prometheus/token

----------------------------------------

TITLE: Cloning Docker Getting Started Project
DESCRIPTION: Clone the Docker getting-started-todo-app project from GitHub and navigate to the project directory.

LANGUAGE: console
CODE:
$ git clone https://github.com/docker/getting-started-todo-app
$ cd getting-started-todo-app

----------------------------------------

TITLE: Running Ubuntu Container with Bind Mount
DESCRIPTION: Command to start an Ubuntu container with a bind mount that shares the current directory. Shows different syntax for various shells.

LANGUAGE: bash
CODE:
docker run -it --mount type=bind,src="$(pwd)",target=/src ubuntu bash

LANGUAGE: powershell
CODE:
docker run -it --mount "type=bind,src=$($pwd),target=/src" ubuntu bash

----------------------------------------

TITLE: Docker Compose Configuration
DESCRIPTION: Docker Compose configuration for running the Python application service with port mapping.

LANGUAGE: yaml
CODE:
services:
  server:
    build:
      context: .
    ports:
      - 8000:8000

----------------------------------------

TITLE: Listing Available Docker Buildx Builders
DESCRIPTION: Lists all available Docker Buildx builders on the system, showing their names, drivers, and status using the docker buildx ls command.

LANGUAGE: bash
CODE:
$ docker buildx ls
NAME/NODE       DRIVER/ENDPOINT      STATUS   BUILDKIT PLATFORMS
default *       docker
  default       default              running  v0.11.6  linux/amd64, linux/amd64/v2, linux/amd64/v3, linux/386
my_builder      docker-container
  my_builder0   default              running  v0.11.6  linux/amd64, linux/amd64/v2, linux/amd64/v3, linux/386

----------------------------------------

TITLE: Dockerfile for Wrapper Script Approach
DESCRIPTION: This Dockerfile sets up an Ubuntu-based container with multiple processes managed by a wrapper script. It copies the necessary process executables and the wrapper script, then sets the CMD to run the wrapper.

LANGUAGE: dockerfile
CODE:
# syntax=docker/dockerfile:1
FROM ubuntu:latest
COPY my_first_process my_first_process
COPY my_second_process my_second_process
COPY my_wrapper_script.sh my_wrapper_script.sh
CMD ./my_wrapper_script.sh

----------------------------------------

TITLE: Inspecting Docker Service Details in JSON Format
DESCRIPTION: Demonstrates how to get detailed service information in JSON format, including version, creation time, specifications, and endpoint configuration.

LANGUAGE: console
CODE:
[manager1]$ docker service inspect helloworld
[
{
    "ID": "9uk4639qpg7npwf3fn2aasksr",
    "Version": {
        "Index": 418
    },
    "CreatedAt": "2016-06-16T21:57:11.622222327Z",
    "UpdatedAt": "2016-06-16T21:57:11.622222327Z",
    "Spec": {
        "Name": "helloworld",
        "TaskTemplate": {
            "ContainerSpec": {
                "Image": "alpine",
                "Args": [
                    "ping",
                    "docker.com"
                ]
            },
            "Resources": {
                "Limits": {},
                "Reservations": {}
            },
            "RestartPolicy": {
                "Condition": "any",
                "MaxAttempts": 0
            },
            "Placement": {}
        },
        "Mode": {
            "Replicated": {
                "Replicas": 1
            }
        },
        "UpdateConfig": {
            "Parallelism": 1
        },
        "EndpointSpec": {
            "Mode": "vip"
        }
    },
    "Endpoint": {
        "Spec": {}
    }
}
]

----------------------------------------

TITLE: Equivalent Complex Bake Configuration in HCL
DESCRIPTION: This snippet demonstrates the Bake equivalent of the complex Docker build command. It includes settings for context, dockerfile, tags, build arguments, cache, and platforms.

LANGUAGE: hcl
CODE:
target "myapp" {
  context = "."
  dockerfile = "Dockerfile"
  tags = ["myapp:latest"]
  args = {
    foo = "bar"
  }
  no-cache = true
  platforms = ["linux/amd64", "linux/arm64"]
}

----------------------------------------

TITLE: Configuring the Default Bridge Network in Docker
DESCRIPTION: Example of a daemon.json configuration file for customizing the default bridge network settings.

LANGUAGE: json
CODE:
{
  "bip": "192.168.1.1/24",
  "fixed-cidr": "192.168.1.0/25",
  "mtu": 1500,
  "default-gateway": "192.168.1.254",
  "dns": ["10.20.1.2","10.20.1.3"]
}

----------------------------------------

TITLE: Basic Docker Compose Build Examples
DESCRIPTION: Demonstrates basic build configurations in a Docker Compose file, including simple path-based builds and Git repository builds.

LANGUAGE: yaml
CODE:
services:
  frontend:
    image: example/webapp
    build: ./webapp

  backend:
    image: example/database
    build:
      context: backend
      dockerfile: ../backend.Dockerfile

  custom:
    build: ~/custom

----------------------------------------

TITLE: Running MySQL Container via CLI
DESCRIPTION: Command to run a MySQL container with environment variables for root password and database name

LANGUAGE: console
CODE:
$ docker run --name my-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -e MYSQL_DATABASE=mydb -d mysql:latest

----------------------------------------

TITLE: Running a Docker Container with Docker Desktop
DESCRIPTION: This command runs a Docker container in detached mode, mapping port 8080 on the host to port 80 in the container, using the 'docker/welcome-to-docker' image.

LANGUAGE: console
CODE:
$ docker run -d -p 8080:80 docker/welcome-to-docker

----------------------------------------

TITLE: Installing Specific Docker Version on CentOS
DESCRIPTION: Commands to list available Docker versions, install a specific version, and verify the installation.

LANGUAGE: bash
CODE:
dnf list docker-ce --showduplicates | sort -r
sudo dnf install docker-ce-<VERSION_STRING> docker-ce-cli-<VERSION_STRING> containerd.io docker-buildx-plugin docker-compose-plugin

----------------------------------------

TITLE: Inspecting trust data for a repository
DESCRIPTION: Uses Docker Trust to inspect and display trust information for a repository.

LANGUAGE: bash
CODE:
$ docker trust inspect --pretty registry.example.com/admin/demo

No signatures for registry.example.com/admin/demo


List of signers and their keys for registry.example.com/admin/demo

SIGNER              KEYS
jeff                1091060d7bfd

Administrative keys for registry.example.com/admin/demo

  Repository Key:	b0014f8e4863df2d028095b74efcb05d872c3591de0af06652944e310d96598d
  Root Key:	64d147e59e44870311dd2d80b9f7840039115ef3dfa5008127d769a5f657a5d7

----------------------------------------

TITLE: Building and Loading Multi-Platform Docker Image with Containerd Image Store
DESCRIPTION: This workflow enables the containerd image store for Docker Engine, builds a multi-platform image, and loads the results into the GitHub runner's local image store. It uses the docker/setup-docker-action to customize Docker Engine settings.

LANGUAGE: yaml
CODE:
name: ci

on:
  push:

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker
        uses: docker/setup-docker-action@v4
        with:
          daemon-config: |
            {
              "debug": true,
              "features": {
                "containerd-snapshotter": true
              }
            }

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64,linux/arm64
          load: true
          tags: user/app:latest

----------------------------------------

TITLE: Neovim Multi-Platform Build Dockerfile
DESCRIPTION: Dockerfile for building Neovim across multiple platforms using a multi-stage build process.

LANGUAGE: dockerfile
CODE:
# syntax=docker/dockerfile:1
FROM debian:bookworm AS build
WORKDIR /work
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    apt-get update && apt-get install -y \
    build-essential \
    cmake \
    curl \
    gettext \
    ninja-build \
    unzip
ADD https://github.com/neovim/neovim.git#stable .
RUN make CMAKE_BUILD_TYPE=RelWithDebInfo

FROM scratch
COPY --from=build /work/build/bin/nvim /

----------------------------------------

TITLE: Dockerfile for Nginx in Laravel Production Environment
DESCRIPTION: Creates an Nginx image for serving a Laravel application in production. Uses multi-stage builds to handle asset compilation and final image creation.

LANGUAGE: dockerfile
CODE:
# docker/nginx/Dockerfile
# Stage 1: Build assets
FROM debian AS builder

# Install Node.js and build tools
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    nodejs \
    npm \
    && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Set working directory
WORKDIR /var/www

# Copy Laravel application code
COPY . /var/www

# Install Node.js dependencies and build assets
RUN npm install && npm run build

# Stage 2: Nginx production image
FROM nginx:alpine

# Copy custom Nginx configuration
# -----------------------------------------------------------
# Replace the default Nginx configuration with our custom one
# that is optimized for serving a Laravel application.
# -----------------------------------------------------------
COPY ./docker/nginx/nginx.conf /etc/nginx/nginx.conf

# Copy Laravel's public assets from the builder stage
# -----------------------------------------------------------
# We only need the 'public' directory from our Laravel app.
# -----------------------------------------------------------
COPY --from=builder /var/www/public /var/www/public

# Set the working directory to the public folder
WORKDIR /var/www/public

# Expose port 80 and start Nginx
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]

----------------------------------------

TITLE: Supervisord Configuration for Docker Logging
DESCRIPTION: This supervisord configuration ensures that the stdout and stderr of managed processes are correctly redirected to the Docker container logs. It sets up non-daemonized operation and configures logging for a sample application.

LANGUAGE: ini
CODE:
[supervisord]
nodaemon=true
logfile=/dev/null
logfile_maxbytes=0

[program:app]
stdout_logfile=/dev/fd/1
stdout_logfile_maxbytes=0
redirect_stderr=true

----------------------------------------

TITLE: Configuring Dockerfile for Spring Boot Application
DESCRIPTION: This Dockerfile sets up a multi-stage build process for a Spring Boot application. It uses OpenJDK 17 as the base image, copies the application JAR, and configures the container to run the Spring Boot app.

LANGUAGE: dockerfile
CODE:
FROM eclipse-temurin:17-jdk-alpine as build
WORKDIR /workspace/app

COPY mvnw .
COPY .mvn .mvn
COPY pom.xml .
COPY src src

RUN ./mvnw install -DskipTests
RUN mkdir -p target/dependency && (cd target/dependency; jar -xf ../*.jar)

FROM eclipse-temurin:17-jdk-alpine
VOLUME /tmp
ARG DEPENDENCY=/workspace/app/target/dependency
COPY --from=build ${DEPENDENCY}/BOOT-INF/lib /app/lib
COPY --from=build ${DEPENDENCY}/META-INF /app/META-INF
COPY --from=build ${DEPENDENCY}/BOOT-INF/classes /app
ENTRYPOINT ["java","-cp","app:app/lib/*","com.example.restservice.RestServiceApplication"]

----------------------------------------

TITLE: Demonstrating Correct Usage of CMD and HEALTHCHECK in Dockerfile
DESCRIPTION: This example shows the correct usage of CMD and HEALTHCHECK instructions in a Dockerfile. It includes a top-level CMD for the main application and a separate CMD within the HEALTHCHECK instruction.

LANGUAGE: dockerfile
CODE:
FROM python:alpine
RUN apk add curl
HEALTHCHECK --interval=1s --timeout=3s \
  CMD ["curl", "-f", "http://localhost:8080"]
CMD ["python", "-m", "http.server", "8080"]

----------------------------------------

TITLE: Deploying Docker Compose with Production Config
DESCRIPTION: Command to start Docker Compose using both default and production configuration files. This allows for environment-specific overrides while maintaining the base configuration.

LANGUAGE: console
CODE:
$ docker compose -f compose.yaml -f compose.production.yaml up -d

----------------------------------------

TITLE: GitHub Actions Workflow Configuration for Docker Build and Push
DESCRIPTION: YAML configuration for GitHub Actions workflow that handles Docker image building and pushing to Docker Hub. The workflow includes authentication, buildx setup, and multi-architecture build support.

LANGUAGE: yaml
CODE:
name: ci

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      -
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Build and push
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ vars.DOCKER_USERNAME }}/${{ github.event.repository.name }}:latest

----------------------------------------

TITLE: Viewing CVEs with Organization Flag in Docker Scout
DESCRIPTION: Command to view CVEs for an image using a specific organization context. Uses the --org flag for per-command organization specification.

LANGUAGE: bash
CODE:
docker scout cves --org <organization> <image>

----------------------------------------

TITLE: Backing up Docker Trust Keys using tar
DESCRIPTION: Command to securely backup Docker trust private keys by creating an encrypted archive. Uses umask to set secure file permissions before and after the backup.

LANGUAGE: console
CODE:
$ umask 077; tar -zcvf private_keys_backup.tar.gz ~/.docker/trust/private; umask 022

----------------------------------------

TITLE: Configuring Netplan to Unmanage Docker Interfaces
DESCRIPTION: This YAML configuration for Netplan prevents it from overriding network configurations for Docker interfaces.

LANGUAGE: yaml
CODE:
network:
  ethernets:
    all:
      dhcp4: true
      dhcp6: true
      match:
        name: en*
  renderer: networkd
  version: 2

----------------------------------------

TITLE: Basic Dockerfile for Go Application
DESCRIPTION: A Dockerfile that builds a Go application using the official golang:1.19 base image. Includes steps for dependency management, source code copying, and application building.

LANGUAGE: dockerfile
CODE:
# syntax=docker/dockerfile:1

FROM golang:1.19

WORKDIR /app

COPY go.mod go.sum ./
RUN go mod download

COPY *.go ./

RUN CGO_ENABLED=0 GOOS=linux go build -o /docker-gs-ping

EXPOSE 8080

CMD ["/docker-gs-ping"]

----------------------------------------

TITLE: Defining Qdrant Database Service in Docker Compose
DESCRIPTION: This YAML snippet defines a Qdrant vector database service in a Docker Compose file. It specifies the image, container name, port mapping, and volume for data persistence.

LANGUAGE: yaml
CODE:
services:
  qdrant:
    image: qdrant/qdrant
    container_name: qdrant
    ports:
      - "6333:6333"
    volumes:
      - qdrant_data:/qdrant/storage

----------------------------------------

TITLE: Listing Docker Swarm Nodes
DESCRIPTION: Command to view all nodes in a Docker swarm showing their ID, hostname, status, availability and manager status. Must be run from a manager node.

LANGUAGE: console
CODE:
$ docker node ls

ID                           HOSTNAME  STATUS  AVAILABILITY  MANAGER STATUS
46aqrk4e473hjbt745z53cr3t    node-5    Ready   Active        Reachable
61pi3d91s0w3b90ijw3deeb2q    node-4    Ready   Active        Reachable
a5b2m3oghd48m8eu391pefq5u    node-3    Ready   Active
e7p8btxeu3ioshyuj6lxiv6g0    node-2    Ready   Active
ehkv3bcimagdese79dn78otj5 *  node-1    Ready   Active        Leader

----------------------------------------

TITLE: Implementing Cache Mounts in Docker with GitHub Actions
DESCRIPTION: This example demonstrates a workaround for preserving cache mounts in GitHub Actions cache using buildkit-cache-dance. It includes a Dockerfile for a Go project and a CI action that implements this caching strategy.

LANGUAGE: dockerfile
CODE:
FROM golang:1.21.1-alpine as base-build

WORKDIR /build
RUN go env -w GOMODCACHE=/root/.cache/go-build

COPY go.mod go.sum ./
RUN --mount=type=cache,target=/root/.cache/go-build go mod download

COPY ./src ./
RUN --mount=type=cache,target=/root/.cache/go-build go build -o /bin/app /build/src
...

LANGUAGE: yaml
CODE:
name: ci

on:
  push:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: user/app
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Go Build Cache for Docker
        uses: actions/cache@v4
        with:
          path: go-build-cache
          key: ${{ runner.os }}-go-build-cache-${{ hashFiles('**/go.sum') }}

      - name: Inject go-build-cache
        uses: reproducible-containers/buildkit-cache-dance@4b2444fec0c0fb9dbf175a96c094720a692ef810 # v2.1.4
        with:
          cache-source: go-build-cache

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max
          file: build/package/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64

----------------------------------------

TITLE: Docker Compose Configuration for Rails
DESCRIPTION: A Docker Compose configuration file that defines the Rails application service, including environment variables and port mapping.

LANGUAGE: yaml
CODE:
services:
  web:
    build: .
    environment:
      - RAILS_MASTER_KEY
    ports:
      - "3000:80"

----------------------------------------

TITLE: Disconnecting a Container from a User-Defined Bridge Network in Docker
DESCRIPTION: Shows how to disconnect a running container from a user-defined bridge network.

LANGUAGE: console
CODE:
$ docker network disconnect my-net my-nginx

----------------------------------------

TITLE: Running Docker Scout as Container
DESCRIPTION: Command to run Docker Scout CLI using a container image with Docker Hub authentication.

LANGUAGE: console
CODE:
$ docker run -it \
  -e DOCKER_SCOUT_HUB_USER=<your Docker Hub user name> \
  -e DOCKER_SCOUT_HUB_PASSWORD=<your Docker Hub PAT>  \
  docker/scout-cli <command>

----------------------------------------

TITLE: Using Amazon S3 Cache for Docker Build
DESCRIPTION: This snippet demonstrates how to use Amazon S3 for caching Docker builds. It shows the syntax for both pushing to and pulling from an S3 cache using the buildx command. The command includes parameters for specifying the region, bucket, and cache image name.

LANGUAGE: console
CODE:
$ docker buildx build --push -t <user>/<image> \
  --cache-to type=s3,region=<region>,bucket=<bucket>,name=<cache-image>[,parameters...] \
  --cache-from type=s3,region=<region>,bucket=<bucket>,name=<cache-image> .

----------------------------------------

TITLE: GPU Access Container Launch
DESCRIPTION: Examples of exposing GPUs to containers using the --gpus flag

LANGUAGE: console
CODE:
$ docker run -it --rm --gpus all ubuntu nvidia-smi

----------------------------------------

TITLE: Build Arguments Configuration
DESCRIPTION: Demonstrates how to configure build arguments in the Compose file using different syntax options.

LANGUAGE: yaml
CODE:
build:
  context: .
  args:
    GIT_COMMIT: cdc3b19

LANGUAGE: yaml
CODE:
build:
  context: .
  args:
    - GIT_COMMIT=cdc3b19

----------------------------------------

TITLE: Dockerfile for Containerizing a Bun Application
DESCRIPTION: This Dockerfile sets up a container for a Bun application. It uses the official Bun image, sets the working directory, copies the application files, exposes the necessary port, and specifies the command to run the server.

LANGUAGE: dockerfile
CODE:
# Use the Bun image as the base image
FROM oven/bun:latest

# Set the working directory in the container
WORKDIR /app

# Copy the current directory contents into the container at /app
COPY . .

# Expose the port on which the API will listen
EXPOSE 3000

# Run the server when the container launches
CMD ["bun", "server.js"]

----------------------------------------

TITLE: Compose Configuration with Additional Contexts
DESCRIPTION: YAML configuration showing how to properly declare image dependencies using additional_contexts

LANGUAGE: yaml
CODE:
services:
  a:
     image: service_a
     build: 
       dockerfile: a.Dockerfile
  b:
     image: service_b
     build:
       dockerfile: b.Dockerfile
       additional_contexts:
         service_a: "service:a"

----------------------------------------

TITLE: Loading delegation key into Docker trust store
DESCRIPTION: Imports a manually generated private key into the local Docker trust store.

LANGUAGE: bash
CODE:
$ docker trust key load delegation.key --name jeff

Loading key from "delegation.key"...
Enter passphrase for new jeff key with ID 8ae710e: 
Repeat passphrase for new jeff key with ID 8ae710e: 
Successfully imported key from delegation.key

----------------------------------------

TITLE: Using Secrets in Docker Compose
DESCRIPTION: An example Docker Compose file that uses secrets for a WordPress and MySQL setup.

LANGUAGE: yaml
CODE:
services:
   db:
     image: mysql:latest
     volumes:
       - db_data:/var/lib/mysql
     environment:
       MYSQL_ROOT_PASSWORD_FILE: /run/secrets/db_root_password
       MYSQL_DATABASE: wordpress
       MYSQL_USER: wordpress
       MYSQL_PASSWORD_FILE: /run/secrets/db_password
     secrets:
       - db_root_password
       - db_password

   wordpress:
     depends_on:
       - db
     image: wordpress:latest
     ports:
       - "8000:80"
     environment:
       WORDPRESS_DB_HOST: db:3306
       WORDPRESS_DB_USER: wordpress
       WORDPRESS_DB_PASSWORD_FILE: /run/secrets/db_password
     secrets:
       - db_password


secrets:
   db_password:
     file: db_password.txt
   db_root_password:
     file: db_root_password.txt

volumes:
    db_data:

----------------------------------------

TITLE: Creating Docker Context with SSH Connection
DESCRIPTION: Creates a Docker context to connect to a remote daemon using SSH authentication.

LANGUAGE: console
CODE:
$ docker context create \
    --docker host=ssh://docker-user@host1.example.com \
    --description="Remote engine" \
    my-remote-engine

----------------------------------------

TITLE: Docker Compose Configuration
DESCRIPTION: Docker Compose file defining the multi-container setup with Go application and CockroachDB database

LANGUAGE: yaml
CODE:
version: "3.8"

services:
  docker-gs-ping-roach:
    depends_on:
      - roach
    build:
      context: .
    container_name: rest-server
    hostname: rest-server
    networks:
      - mynet
    ports:
      - 80:8080
    environment:
      - PGUSER=${PGUSER:-totoro}
      - PGPASSWORD=${PGPASSWORD:?database password not set}
      - PGHOST=${PGHOST:-db}
      - PGPORT=${PGPORT:-26257}
      - PGDATABASE=${PGDATABASE:-mydb}
    deploy:
      restart_policy:
        condition: on-failure
  roach:
    image: cockroachdb/cockroach:latest-v20.1
    container_name: roach
    hostname: db
    networks:
      - mynet
    ports:
      - 26257:26257
      - 8080:8080
    volumes:
      - roach:/cockroach/cockroach-data
    command: start-single-node --insecure

volumes:
  roach:

networks:
  mynet:
    driver: bridge

----------------------------------------

TITLE: Specifying a Base Image in Dockerfile
DESCRIPTION: This snippet shows how to specify a base image in a Dockerfile using the FROM instruction. It uses debian as an example base image.

LANGUAGE: dockerfile
CODE:
FROM debian

----------------------------------------

TITLE: Using env_file Attribute in Docker Compose
DESCRIPTION: Shows how to use external environment files to configure container environments using the env_file attribute.

LANGUAGE: yaml
CODE:
services:
  webapp:
    env_file: "webapp.env"

----------------------------------------

TITLE: Viewing Service Task Distribution in Docker Swarm
DESCRIPTION: This command shows how the swarm manager has assigned tasks to different nodes for the Redis service.

LANGUAGE: bash
CODE:
$ docker service ps redis

----------------------------------------

TITLE: Implementing a Go Backend for Docker Extension
DESCRIPTION: A Go backend service that exposes a single route returning a JSON payload. It uses the echo framework and listens on a Unix domain socket.

LANGUAGE: go
CODE:
package main

import (
	"flag"
	"log"
	"net"
	"net/http"
	"os"

	"github.com/labstack/echo"
	"github.com/sirupsen/logrus"
)

func main() {
	var socketPath string
	flag.StringVar(&socketPath, "socket", "/run/guest/volumes-service.sock", "Unix domain socket to listen on")
	flag.Parse()

	os.RemoveAll(socketPath)

	logrus.New().Infof("Starting listening on %s\n", socketPath)
	router := echo.New()
	router.HideBanner = true

	startURL := ""

	ln, err := listen(socketPath)
	if err != nil {
		log.Fatal(err)
	}
	router.Listener = ln

	router.GET("/hello", hello)

	log.Fatal(router.Start(startURL))
}

func listen(path string) (net.Listener, error) {
	return net.Listen("unix", path)
}

func hello(ctx echo.Context) error {
	return ctx.JSON(http.StatusOK, HTTPMessageBody{Message: "hello world"})
}

type HTTPMessageBody struct {
	Message string
}

----------------------------------------

TITLE: Creating Docker Group and Adding User
DESCRIPTION: Commands to create a docker group and add the current user to enable running Docker without sudo privileges.

LANGUAGE: bash
CODE:
sudo groupadd docker

LANGUAGE: bash
CODE:
sudo usermod -aG docker $USER

----------------------------------------

TITLE: Creating Provenance Attestations with Docker Buildx
DESCRIPTION: Commands to create provenance attestations using docker buildx build with the --attest option or --provenance shorthand.

LANGUAGE: console
CODE:
$ docker buildx build --tag <namespace>/<image>:<version> \
    --attest type=provenance,mode=[min,max] .

----------------------------------------

TITLE: GitHub Actions CI/CD Workflow
DESCRIPTION: GitHub Actions workflow configuration for building, testing, and pushing Docker images to Docker Hub. Includes login, build, test, and multi-platform image push steps.

LANGUAGE: yaml
CODE:
name: ci

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and test
        uses: docker/build-push-action@v6
        with:
          target: test
          load: true

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64,linux/arm64
          push: true
          target: final
          tags: ${{ vars.DOCKER_USERNAME }}/${{ github.event.repository.name }}:latest

----------------------------------------

TITLE: Kafka Docker Compose Configuration
DESCRIPTION: Docker Compose configuration for setting up Kafka with multiple listeners for both docker and host communication. Includes essential KRaft mode settings and broker configuration.

LANGUAGE: yaml
CODE:
services:
  kafka:
    image: apache/kafka-native
    ports:
      - "9092:9092"
    environment:
      # Configure listeners for both docker and host communication
      KAFKA_LISTENERS: CONTROLLER://localhost:9091,HOST://0.0.0.0:9092,DOCKER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: HOST://localhost:9092,DOCKER://kafka:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,DOCKER:PLAINTEXT,HOST:PLAINTEXT

      # Settings required for KRaft mode
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9091

      # Listener to use for broker-to-broker communication
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER

      # Required for a single node cluster
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

----------------------------------------

TITLE: Listing delegations using Notary CLI
DESCRIPTION: Uses the Notary CLI to list delegations and associated keys for a repository.

LANGUAGE: bash
CODE:
$ notary delegation list registry.example.com/admin/demo

ROLE                PATHS             KEY IDS                                                             THRESHOLD
----                -----             -------                                                             ---------
targets/jeff        "" <all paths>    1091060d7bfd938dfa5be703fa057974f9322a4faef6f580334f3d6df44c02d1    1
                                          
targets/releases    "" <all paths>    1091060d7bfd938dfa5be703fa057974f9322a4faef6f580334f3d6df44c02d1    1 

----------------------------------------

TITLE: Running Docker Container with Local Logging Driver
DESCRIPTION: This example demonstrates how to run a Docker container using the local logging driver with specific options. It sets the maximum log size to 10 megabytes for an Alpine container.

LANGUAGE: console
CODE:
$ docker run \
      --log-driver local --log-opt max-size=10m \
      alpine echo hello world

----------------------------------------

TITLE: JupyterLab Dockerfile Configuration
DESCRIPTION: Dockerfile that creates a custom JupyterLab image with pre-installed data science packages.

LANGUAGE: dockerfile
CODE:
# syntax=docker/dockerfile:1

FROM quay.io/jupyter/base-notebook
RUN pip install --no-cache-dir matplotlib scikit-learn

----------------------------------------

TITLE: Client Service Configuration with Traefik Labels
DESCRIPTION: Configures a client service in Docker Compose with Traefik labels for routing.

LANGUAGE: yaml
CODE:
services:
  # …
  client:
    image: nginx:alpine
    volumes:
      - "./client:/usr/share/nginx/html"
    labels:
      traefik.http.routers.client.rule: "Host(`localhost`)"

----------------------------------------

TITLE: Creating Dual-Stack IPv4/IPv6 Macvlan Network
DESCRIPTION: Demonstrates how to create a Macvlan network supporting both IPv4 and IPv6 addressing with multiple subnets.

LANGUAGE: bash
CODE:
docker network create -d macvlan \
    --subnet=192.168.216.0/24 --subnet=192.168.218.0/24 \
    --gateway=192.168.216.1 --gateway=192.168.218.1 \
    --subnet=2001:db8:abc8::/64 --gateway=2001:db8:abc8::10 \
     -o parent=eth0.218 \
     -o macvlan_mode=bridge macvlan216

----------------------------------------

TITLE: Defining Kubernetes Deployment and Service for Java Application
DESCRIPTION: This YAML file defines a Kubernetes Deployment and Service for a Java application. The Deployment creates a pod with one container using the image built in a previous CI/CD step. The Service exposes the application on port 30001.

LANGUAGE: yaml
CODE:
apiVersion: apps/v1
kind: Deployment
metadata:
  name: docker-java-demo
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      service: server
  template:
    metadata:
      labels:
        service: server
    spec:
      containers:
        - name: server-service
          image: DOCKER_USERNAME/REPO_NAME
          imagePullPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: service-entrypoint
  namespace: default
spec:
  type: NodePort
  selector:
    service: server
  ports:
    - port: 8080
      targetPort: 8080
      nodePort: 30001

----------------------------------------

TITLE: Creating an IPv6-Enabled User-Defined Bridge Network in Docker
DESCRIPTION: Demonstrates how to create a user-defined bridge network with IPv6 support and a specified subnet.

LANGUAGE: console
CODE:
$ docker network create --ipv6 --subnet 2001:db8:1234::/64 my-net

----------------------------------------

TITLE: Firewalld Configuration for Docker Remote Access
DESCRIPTION: XML configuration for firewalld to allow incoming and outgoing Docker API requests through the firewall.

LANGUAGE: xml
CODE:
<direct>
  [ <rule ipv="ipv6" table="filter" chain="FORWARD_direct" priority="0"> -i zt0 -j ACCEPT </rule> ]
  [ <rule ipv="ipv6" table="filter" chain="FORWARD_direct" priority="0"> -o zt0 -j ACCEPT </rule> ]
</direct>

----------------------------------------

TITLE: Defining Shared Volumes in Docker Compose
DESCRIPTION: This example demonstrates a two-service setup where a database's data directory is shared with another service as a volume named 'db-data' for periodic backups.

LANGUAGE: yaml
CODE:
services:
  backend:
    image: example/database
    volumes:
      - db-data:/etc/data

  backup:
    image: backup-service
    volumes:
      - db-data:/var/lib/backup/data

volumes:
  db-data:

----------------------------------------

TITLE: Creating a User-Defined Bridge Network in Docker
DESCRIPTION: Demonstrates how to create a custom bridge network using the docker network create command.

LANGUAGE: console
CODE:
$ docker network create my-net

----------------------------------------

TITLE: Updating Compose file to use development container
DESCRIPTION: This YAML snippet shows how to modify the Compose file to use the development stage of the Dockerfile for local development.

LANGUAGE: yaml
CODE:
services:
  server:
    build:
      context: .
      target: development
    ports:
      - 8080:80
    depends_on:
      db:
        condition: service_healthy
    develop:
      watch:
        - action: rebuild
          path: .
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80'

----------------------------------------

TITLE: Basic Dockerfile Configuration for Node.js App
DESCRIPTION: Initial Dockerfile setup for a Node.js application showing basic configuration with node:20-alpine base image.

LANGUAGE: dockerfile
CODE:
FROM node:20-alpine
WORKDIR /app
COPY . .
RUN yarn install --production
CMD ["node", "./src/index.js"]

----------------------------------------

TITLE: Signing and Pushing Docker Images with Content Trust
DESCRIPTION: Demonstrates how to sign a Docker image tag and push it to a registry using Docker Content Trust.

LANGUAGE: bash
CODE:
$ docker trust sign registry.example.com/admin/demo:1
Signing and pushing trust data for local image registry.example.com/admin/demo:1, may overwrite remote trust data
The push refers to repository [registry.example.com/admin/demo]
7bff100f35cb: Pushed
1: digest: sha256:3d2e482b82608d153a374df3357c0291589a61cc194ec4a9ca2381073a17f58e size: 528
Signing and pushing trust metadata
Enter passphrase for signer key with ID 8ae710e:
Successfully signed registry.example.com/admin/demo:1

LANGUAGE: bash
CODE:
$ export DOCKER_CONTENT_TRUST=1

$ docker push registry.example.com/admin/demo:1
The push refers to repository [registry.example.com/admin/demo:1]
7bff100f35cb: Pushed
1: digest: sha256:3d2e482b82608d153a374df3357c0291589a61cc194ec4a9ca2381073a17f58e size: 528
Signing and pushing trust metadata
Enter passphrase for signer key with ID 8ae710e:
Successfully signed registry.example.com/admin/demo:1

----------------------------------------

TITLE: Secure Docker Client Connection
DESCRIPTION: Command to connect to Docker daemon using TLS certificate authentication.

LANGUAGE: console
CODE:
$ docker --tlsverify \
    --tlscacert=ca.pem \
    --tlscert=cert.pem \
    --tlskey=key.pem \
    -H=$HOST:2376 version

----------------------------------------

TITLE: Extracting SBOM from Local Image
DESCRIPTION: Command to extract SBOM from a local image during build process and save to a file using the scout-sbom-indexer generator.

LANGUAGE: console
CODE:
docker build --attest type=sbom,generator=docker/scout-sbom-indexer:latest \
  --output build .

----------------------------------------

TITLE: Auto-starting Profiles with Dependency Resolution in Docker Compose
DESCRIPTION: This example demonstrates auto-starting profiles and dependency resolution in Docker Compose. It shows a configuration with a profiled migration service and how to run it without explicitly enabling the profile.

LANGUAGE: yaml
CODE:
services:
  backend:
    image: backend

  db:
    image: mysql

  db-migrations:
    image: backend
    command: myapp migrate
    depends_on:
      - db
    profiles:
      - tools

----------------------------------------

TITLE: Setting Custom Names for Volumes in Docker Compose
DESCRIPTION: This snippet demonstrates how to set a custom name for a volume, which can be useful for referencing volumes with special characters or parameterizing volume names.

LANGUAGE: yaml
CODE:
volumes:
  db-data:
    name: "my-app-data"

LANGUAGE: yaml
CODE:
volumes:
  db-data:
    name: ${DATABASE_VOLUME}

LANGUAGE: yaml
CODE:
volumes:
  db-data:
    external: true
    name: actual-name-of-volume

----------------------------------------

TITLE: Creating and Using Custom Bridge Network
DESCRIPTION: Demonstrates how to create a custom bridge network and run a container within it. Uses the bridge network driver which is Docker's default networking driver.

LANGUAGE: console
CODE:
$ docker network create -d bridge my-net
$ docker run --network=my-net -itd --name=container3 busybox

----------------------------------------

TITLE: Configuring Ruby 3.2 Docker Environment with Alpine Linux
DESCRIPTION: This Dockerfile creates a lightweight Ruby 3.2 environment using Alpine Linux. It installs minimal dependencies and sets up the application, resulting in a smaller image size.

LANGUAGE: Dockerfile
CODE:
FROM ruby:3.2-alpine

# throw errors if Gemfile has been modified since Gemfile.lock
RUN bundle config --global frozen 1

WORKDIR /usr/src/app

COPY Gemfile Gemfile.lock ./
RUN bundle install

COPY . .

CMD ["./your-daemon-or-script.rb"]

----------------------------------------

TITLE: Verifying Docker Installation
DESCRIPTION: Command to verify Docker installation by running the hello-world container.

LANGUAGE: console
CODE:
$ sudo docker run hello-world

----------------------------------------

TITLE: Building and Running a Docker Image from Scratch
DESCRIPTION: These commands show how to build a Docker image from the previous Dockerfile and run it. It assumes the 'hello' executable is in the build context.

LANGUAGE: bash
CODE:
$ docker build --tag hello .
$ docker run --rm hello

----------------------------------------

TITLE: Initializing Docker Swarm with Specific IP
DESCRIPTION: This example demonstrates initializing a Docker swarm with a specific IP address (192.168.99.100). The output includes tokens for adding worker and manager nodes to the swarm.

LANGUAGE: console
CODE:
$ docker swarm init --advertise-addr 192.168.99.100
Swarm initialized: current node (dxn1zf6l61qsb1josjja83ngz) is now a manager.

To add a worker to this swarm, run the following command:

    docker swarm join \
    --token SWMTKN-1-49nj1cmql0jkz5s954yi3oex3nedyz0fb0xx14ie39trti4wxv-8vxv8rssmk743ojnwacrr2e7c \
    192.168.99.100:2377

To add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.

----------------------------------------

TITLE: Build-Push-Action with Custom GitHub Token
DESCRIPTION: Example showing how to configure build-push-action with a custom GitHub token to avoid API throttling issues.

LANGUAGE: yaml
CODE:
- name: Build and push
  uses: docker/build-push-action@v6
  with:
    context: .
    push: true
    tags: "<registry>/<image>:latest"
    cache-from: type=gha
    cache-to: type=gha,mode=max
    github-token: ${{ secrets.MY_CUSTOM_TOKEN }}

----------------------------------------

TITLE: Viewing CVEs While Ignoring Suppressed Vulnerabilities
DESCRIPTION: Command to view CVEs for an image while excluding suppressed vulnerabilities from the output using the --ignore-suppressed flag.

LANGUAGE: bash
CODE:
docker scout cves --ignore-suppressed <image>

----------------------------------------

TITLE: Defining MySQL Service in Docker Compose YAML
DESCRIPTION: This snippet demonstrates the YAML configuration for the MySQL service in the Docker Compose file. It includes image specification, volume mapping, and environment variables for database setup.

LANGUAGE: yaml
CODE:
services:
  mysql:
    image: mysql:8.0
    volumes:
      - todo-mysql-data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: secret
      MYSQL_DATABASE: todos

volumes:
  todo-mysql-data:

----------------------------------------

TITLE: Kubernetes Configuration for Rust Application Deployment
DESCRIPTION: Kubernetes YAML configuration that defines deployments and services for a Rust application and PostgreSQL database. Includes container specifications, environment variables, port mappings, and service definitions.

LANGUAGE: yaml
CODE:
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    service: server
  name: server
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      service: server
  strategy: {}
  template:
    metadata:
      labels:
        service: server
    spec:
      initContainers:
        - name: wait-for-db
          image: busybox:1.28
          command:
            [
              "sh",
              "-c",
              'until nc -zv db 5432; do echo "waiting for db"; sleep 2; done;',
            ]
      containers:
        - image: DOCKER_USERNAME/REPO_NAME
          name: server
          imagePullPolicy: Always
          ports:
            - containerPort: 8000
              hostPort: 5000
              protocol: TCP
          env:
            - name: ADDRESS
              value: 0.0.0.0:8000
            - name: PG_DBNAME
              value: example
            - name: PG_HOST
              value: db
            - name: PG_PASSWORD
              value: mysecretpassword
            - name: PG_USER
              value: postgres
            - name: RUST_LOG
              value: debug
          resources: {}
      restartPolicy: Always
status: {}

----------------------------------------

TITLE: Verifying Storage Driver Configuration
DESCRIPTION: Command to verify the active storage driver using docker info

LANGUAGE: console
CODE:
$ docker info

Storage Driver: vfs
...

----------------------------------------

TITLE: Using ENTRYPOINT with Helper Script in Dockerfile
DESCRIPTION: Demonstrates how to use ENTRYPOINT with a helper script to allow flexible container execution.

LANGUAGE: Dockerfile
CODE:
COPY ./docker-entrypoint.sh /
ENTRYPOINT ["/docker-entrypoint.sh"]
CMD ["postgres"]

----------------------------------------

TITLE: Multi-Stage Dockerfile Examples
DESCRIPTION: Two Dockerfiles demonstrating image layer sharing and multi-stage builds with a base and final image.

LANGUAGE: dockerfile
CODE:
# syntax=docker/dockerfile:1
FROM alpine
RUN apk add --no-cache bash

LANGUAGE: dockerfile
CODE:
# syntax=docker/dockerfile:1
FROM acme/my-base-image:1.0
COPY . /app
RUN chmod +x /app/hello.sh
CMD /app/hello.sh

----------------------------------------

TITLE: Using Target as Build Context in Docker Bake
DESCRIPTION: Demonstrates how to use one target's output as a build context for another target. Includes base Dockerfile, main Dockerfile, and the corresponding Bake configuration.

LANGUAGE: dockerfile
CODE:
FROM scratch

LANGUAGE: dockerfile
CODE:
# syntax=docker/dockerfile:1
FROM baseapp
RUN echo "Hello world"

LANGUAGE: hcl
CODE:
target "base" {
  dockerfile = "baseapp.Dockerfile"
}

target "app" {
  contexts = {
    baseapp = "target:base"
  }
}

----------------------------------------

TITLE: Inspecting Docker Service Details with Pretty Format
DESCRIPTION: Shows how to use docker service inspect with --pretty flag to display formatted service details including ID, name, mode, replicas, and container specifications.

LANGUAGE: console
CODE:
[manager1]$ docker service inspect --pretty helloworld

ID:		9uk4639qpg7npwf3fn2aasksr
Name:		helloworld
Service Mode:	REPLICATED
 Replicas:		1
Placement:
UpdateConfig:
 Parallelism:	1
ContainerSpec:
 Image:		alpine
 Args:	ping docker.com
Resources:
Endpoint Mode:  vip

----------------------------------------

TITLE: Linux Docker Diagnostics Commands
DESCRIPTION: Commands for running Docker Desktop diagnostics and accessing logs on Linux systems.

LANGUAGE: bash
CODE:
$ /opt/docker-desktop/bin/com.docker.diagnose
$ /opt/docker-desktop/bin/com.docker.diagnose gather -upload
$ unzip –l /tmp/<your-diagnostics-ID>.zip
$ journalctl --user --unit=docker-desktop

----------------------------------------

TITLE: Docker Stats Command Example
DESCRIPTION: Shows how to use docker stats command to stream container runtime metrics including CPU, memory usage, memory limit and network I/O metrics.

LANGUAGE: console
CODE:
$ docker stats redis1 redis2

CONTAINER           CPU %               MEM USAGE / LIMIT     MEM %               NET I/O             BLOCK I/O
redis1              0.07%               796 KB / 64 MB        1.21%               788 B / 648 B       3.568 MB / 512 KB
redis2              0.07%               2.746 MB / 64 MB      4.29%               1.266 KB / 648 B    12.4 MB / 0 B

----------------------------------------

TITLE: Building Multi-Platform Docker Image with QEMU Emulation
DESCRIPTION: This GitHub Actions workflow demonstrates how to build a multi-platform Docker image using QEMU emulation. It sets up QEMU and Docker Buildx, then builds and pushes the image for multiple platforms.

LANGUAGE: yaml
CODE:
name: ci

on:
  push:

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64,linux/arm64
          push: true
          tags: user/app:latest

----------------------------------------

TITLE: API Service Configuration with Path-based Routing
DESCRIPTION: Sets up an API service in Docker Compose with Traefik labels for path-based routing.

LANGUAGE: yaml
CODE:
services:
  # …
  api:
    build: ./dev/api
    volumes:
      - "./api:/var/www/html/api"
    labels:
      traefik.http.routers.api.rule: "Host(`localhost`) && PathPrefix(`/api`)"

----------------------------------------

TITLE: Dockerfile for NER Application
DESCRIPTION: Dockerfile defining the container environment for the NER application, including base image, working directory, dependency installation, and application setup.

LANGUAGE: dockerfile
CODE:
FROM python:3.8-slim
WORKDIR /app
COPY requirements.txt /app
RUN pip install --no-cache-dir -r requirements.txt
RUN python -m spacy download en_core_web_sm
COPY *.py /app
COPY entrypoint.sh /app
RUN chmod +x /app/entrypoint.sh
ENTRYPOINT ["/app/entrypoint.sh"]

----------------------------------------

TITLE: Privileged Container tmpfs Mount
DESCRIPTION: Demonstrates how to create a tmpfs mount in a privileged container for advanced options not supported by --tmpfs flag.

LANGUAGE: console
CODE:
$ docker run --privileged -it debian sh
/# mount -t tmpfs -o <options> tmpfs /data

----------------------------------------

TITLE: Configuring Default Builder GC for Docker Desktop
DESCRIPTION: This JSON snippet shows the default builder configuration for the 'docker' driver in Docker Desktop, setting the build cache size limit and enabling garbage collection.

LANGUAGE: json
CODE:
{
  "builder": {
    "gc": {
      "defaultKeepStorage": "20GB",
      "enabled": true
    }
  }
}

----------------------------------------

TITLE: Configuring Compose Watch for Automatic Updates
DESCRIPTION: Updated compose.yaml file that includes Compose Watch instructions for automatically updating running services as code changes.

LANGUAGE: YAML
CODE:
services:
  server:
    build:
      context: .
    ports:
      - 8001:8001
    environment:
      - POSTGRES_SERVER=db
      - POSTGRES_USER=postgres
      - POSTGRES_DB=example
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    depends_on:
      db:
        condition: service_healthy
    secrets:
      - db-password
    develop:
      watch:
        - action: rebuild
          path: .
  db:
    image: postgres
    restart: always
    user: postgres
    secrets:
      - db-password
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=example
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    expose:
      - 5432
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
volumes:
  db-data:
secrets:
  db-password:
    file: db/password.txt

----------------------------------------

TITLE: Python Flask Application with Redis Counter
DESCRIPTION: A simple Flask web application that uses Redis to maintain a visit counter. The app increments a counter in Redis each time the root endpoint is accessed.

LANGUAGE: python
CODE:
from flask import Flask
from redis import Redis

app = Flask(__name__)
redis = Redis(host='redis', port=6379)

@app.route('/')
def hello():
    count = redis.incr('hits')
    return 'Hello World! I have been seen {} times.\n'.format(count)

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8000, debug=True)

----------------------------------------

TITLE: Using Volumes with Docker Compose
DESCRIPTION: Shows how to define and use a volume in a Docker Compose YAML file.

LANGUAGE: yaml
CODE:
services:
  frontend:
    image: node:lts
    volumes:
      - myapp:/home/node/app
volumes:
  myapp:

----------------------------------------

TITLE: TLS Certificate Generation for Docker Daemon
DESCRIPTION: Series of OpenSSL commands to generate CA, server, and client certificates for secure Docker daemon communication.

LANGUAGE: console
CODE:
$ openssl genrsa -aes256 -out ca-key.pem 4096
$ openssl req -new -x509 -days 365 -key ca-key.pem -sha256 -out ca.pem
$ openssl genrsa -out server-key.pem 4096
$ openssl req -subj "/CN=$HOST" -sha256 -new -key server-key.pem -out server.csr

----------------------------------------

TITLE: Setting HTTP Proxy in Docker Systemd Service File
DESCRIPTION: This systemd configuration snippet demonstrates how to set the HTTP_PROXY environment variable for the Docker service using a drop-in file.

LANGUAGE: systemd
CODE:
[Service]
Environment="HTTP_PROXY=http://proxy.example.com:3128"

----------------------------------------

TITLE: Loading Docker Build Results with GitHub Actions Workflow
DESCRIPTION: GitHub Actions workflow configuration that builds a Docker image and loads it into the local Docker daemon. Uses docker/setup-buildx-action and docker/build-push-action with the load option enabled to make the image available through docker images command.

LANGUAGE: yaml
CODE:
name: ci

on:
  push:

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build
        uses: docker/build-push-action@v6
        with:
          load: true
          tags: myimage:latest
      
      - name: Inspect
        run: |
          docker image inspect myimage:latest

----------------------------------------

TITLE: Pruning All Unused Docker Images
DESCRIPTION: This command removes all images that aren't used by existing containers. It uses the -a flag to include all unused images, not just dangling ones.

LANGUAGE: console
CODE:
$ docker image prune -a

WARNING! This will remove all images without at least one container associated to them.
Are you sure you want to continue? [y/N] y

----------------------------------------

TITLE: Checking Disk Image Size
DESCRIPTION: Command to check the actual size of Docker disk image file

LANGUAGE: console
CODE:
$ cd ~/Library/Containers/com.docker.docker/Data/vms/0/data
$ ls -klsh Docker.raw

----------------------------------------

TITLE: ENTRYPOINT Instruction Usage
DESCRIPTION: Shows how to use the ENTRYPOINT instruction to configure a container that will run as an executable.

LANGUAGE: dockerfile
CODE:
ENTRYPOINT ["executable", "param1", "param2"]
ENTRYPOINT command param1 param2

----------------------------------------

TITLE: Basic devicemapper configuration in daemon.json
DESCRIPTION: JSON configuration to enable the devicemapper storage driver in Docker's daemon.json file

LANGUAGE: json
CODE:
{
  "storage-driver": "devicemapper"
}

----------------------------------------

TITLE: Mount Command with Size and Mode Options
DESCRIPTION: Example showing how to use the --mount flag with specific tmpfs size and mode settings.

LANGUAGE: console
CODE:
$ docker run --mount type=tmpfs,dst=/app,tmpfs-size=21474836480,tmpfs-mode=1770

----------------------------------------

TITLE: Running Wasm Application with Docker Compose
DESCRIPTION: This snippet shows a Docker Compose file configuration for running a Wasm application. It specifies the image, platform, and runtime for the Wasm container.

LANGUAGE: yaml
CODE:
services:
  app:
    image: secondstate/rust-example-hello
    platform: wasi/wasm
    runtime: io.containerd.wasmedge.v1

----------------------------------------

TITLE: Registry Cache Backend Command Usage
DESCRIPTION: Example of using the registry cache backend with import and export cache functionality in Docker Buildx.

LANGUAGE: bash
CODE:
docker buildx build --push -t <registry>/<image> \
  --cache-to type=registry,ref=<registry>/<cache-image>[,parameters...] \
  --cache-from type=registry,ref=<registry>/<cache-image>[,parameters...] .

----------------------------------------

TITLE: Docker Container Configuration
DESCRIPTION: Dockerfile that sets up the Python environment, installs dependencies, and configures the application entry point.

LANGUAGE: dockerfile
CODE:
FROM python:3.8-slim
WORKDIR /app
COPY requirements.txt /app
RUN pip install --no-cache-dir -r requirements.txt
RUN python -m spacy download en_core_web_sm
COPY *.py /app
COPY entrypoint.sh /app
RUN chmod +x /app/entrypoint.sh
ENTRYPOINT ["/app/entrypoint.sh"]

----------------------------------------

TITLE: Setting Multiple Proxy Environment Variables in Docker Systemd Service File
DESCRIPTION: This systemd configuration snippet demonstrates how to set both HTTP_PROXY and HTTPS_PROXY environment variables for the Docker service using a drop-in file.

LANGUAGE: systemd
CODE:
[Service]
Environment="HTTP_PROXY=http://proxy.example.com:3128"
Environment="HTTPS_PROXY=https://proxy.example.com:3129"

----------------------------------------

TITLE: Inefficient Layer Ordering in Dockerfile
DESCRIPTION: Example of inefficient Dockerfile organization where dependencies are reinstalled unnecessarily due to poor layer ordering.

LANGUAGE: dockerfile
CODE:
# syntax=docker/dockerfile:1
FROM node
WORKDIR /app
COPY . .
RUN npm install
RUN npm build

----------------------------------------

TITLE: Building Wasm Module Dockerfile
DESCRIPTION: This Dockerfile snippet demonstrates how to build a Wasm application. It copies the Wasm module from a build stage and sets it as the ENTRYPOINT.

LANGUAGE: dockerfile
CODE:
# syntax=docker/dockerfile:1
FROM scratch
COPY --from=build /build/hello_world.wasm /hello_world.wasm
ENTRYPOINT [ "/hello_world.wasm" ]

----------------------------------------

TITLE: Adding Device to BTRFS Volume
DESCRIPTION: Commands to add a new block device to a BTRFS volume and balance the filesystem.

LANGUAGE: console
CODE:
$ sudo btrfs device add /dev/svdh /var/lib/docker

$ sudo btrfs filesystem balance /var/lib/docker

----------------------------------------

TITLE: Implementing Pre-Stop Hook with Docker Compose
DESCRIPTION: Example demonstrating how to set up a pre-stop hook in Docker Compose to execute cleanup operations before container shutdown. The hook runs a cleanup script before the container stops.

LANGUAGE: yaml
CODE:
services:
  app:
    image: backend
    pre_stop:
      - command: ./data_flush.sh

----------------------------------------

TITLE: Creating a Docker Secret
DESCRIPTION: Use the docker secret create command to create a secret from standard input.

LANGUAGE: console
CODE:
$ printf "This is a secret" | docker secret create my_secret_data -

----------------------------------------

TITLE: Installing CA Certificates in Docker Image
DESCRIPTION: Dockerfile instructions for installing and configuring CA certificates during image build. This snippet demonstrates the process of installing the ca-certificates package, copying a custom certificate, and updating the certificate store.

LANGUAGE: dockerfile
CODE:
# Install the ca-certificate package
RUN apt-get update && apt-get install -y ca-certificates
# Copy the CA certificate from the context to the build container
COPY your_certificate.crt /usr/local/share/ca-certificates/
# Update the CA certificates in the container
RUN update-ca-certificates

----------------------------------------

TITLE: Docker Compose Service Definition
DESCRIPTION: Compose file that defines the application services - a web service using the built image and a Redis service using the official Redis Alpine image.

LANGUAGE: yaml
CODE:
  services:
    web:
      image: 127.0.0.1:5000/stackdemo
      build: .
      ports:
        - "8000:8000"
    redis:
      image: redis:alpine

----------------------------------------

TITLE: Configuring Docker Daemon with JSON File
DESCRIPTION: Example of a JSON configuration file for the Docker daemon. This snippet shows how to set the data root directory for Docker.

LANGUAGE: json
CODE:
{
  "data-root": "/mnt/docker-data"
}

----------------------------------------

TITLE: Creating Nginx Service with Secrets
DESCRIPTION: Create an Nginx service with access to the secrets and publish port 443.

LANGUAGE: console
CODE:
$ docker service create \
     --name nginx \
     --secret site.key \
     --secret site.crt \
     --secret site.conf \
     --publish published=3000,target=443 \
     nginx:latest \
     sh -c "ln -s /run/secrets/site.conf /etc/nginx/conf.d/site.conf && exec nginx -g 'daemon off;'"

----------------------------------------

TITLE: Docker Container Configuration
DESCRIPTION: Dockerfile that defines how to build the Python application container, using Python 3.4 Alpine as the base image and installing required dependencies.

LANGUAGE: dockerfile
CODE:
# syntax=docker/dockerfile:1
FROM python:3.4-alpine
ADD . /code
WORKDIR /code
RUN pip install -r requirements.txt
CMD ["python", "app.py"]

----------------------------------------

TITLE: Enabling containerd Snapshotter Configuration in daemon.json
DESCRIPTION: JSON configuration to enable containerd snapshotters feature in Docker Engine daemon configuration file. This needs to be added to /etc/docker/daemon.json.

LANGUAGE: json
CODE:
{
  "features": {
    "containerd-snapshotter": true
  }
}

----------------------------------------

TITLE: Using a Volume Driver
DESCRIPTION: Shows how to create a volume using the vieux/sshfs volume driver for remote storage.

LANGUAGE: console
CODE:
$ docker volume create --driver vieux/sshfs \
  -o sshcmd=test@node2:/home/test \
  -o password=testpassword \
  sshvolume

----------------------------------------

TITLE: Detailed GC Policy Configuration for Docker Driver
DESCRIPTION: This JSON configuration demonstrates a more detailed set of GC policies for the Docker driver, including specific rules for different types of cache and age thresholds.

LANGUAGE: json
CODE:
{
  "builder": {
    "gc": {
      "enabled": true,
      "policy": [
        {
          "keepStorage": "2.764GB",
          "filter": [
            "unused-for=48h",
            "type==source.local,type==exec.cachemount,type==source.git.checkout"
          ]
        },
        { "keepStorage": "20GB", "filter": ["unused-for=1440h"] },
        { "keepStorage": "20GB" },
        { "keepStorage": "20GB", "all": true }
      ]
    }
  }
}

----------------------------------------

TITLE: Connecting a Container to a User-Defined Bridge Network in Docker
DESCRIPTION: Shows how to create a new container and connect it to a user-defined bridge network, while also publishing a port.

LANGUAGE: console
CODE:
$ docker create --name my-nginx \
  --network my-net \
  --publish 8080:80 \
  nginx:latest

----------------------------------------

TITLE: Pruning Unused Docker Volumes
DESCRIPTION: This command removes all volumes not used by at least one container. It prompts for confirmation before execution.

LANGUAGE: console
CODE:
$ docker volume prune

WARNING! This will remove all volumes not used by at least one container.
Are you sure you want to continue? [y/N] y

----------------------------------------

TITLE: Connecting a Running Container to a User-Defined Bridge Network in Docker
DESCRIPTION: Demonstrates how to connect an already-running container to an existing user-defined bridge network.

LANGUAGE: console
CODE:
$ docker network connect my-net my-nginx

----------------------------------------

TITLE: Usage of docker dev start Command
DESCRIPTION: Demonstrates the usage of the docker dev start command to start a specific dev environment.

LANGUAGE: bash
CODE:
docker dev start DEV_ENV_NAME

----------------------------------------

TITLE: HEALTHCHECK Instruction
DESCRIPTION: Shows how to use the HEALTHCHECK instruction to specify how Docker should test a container to check if it's still working.

LANGUAGE: dockerfile
CODE:
HEALTHCHECK --interval=5m --timeout=3s \
  CMD curl -f http://localhost/ || exit 1

----------------------------------------

TITLE: Installing Docker Desktop RPM package on Fedora
DESCRIPTION: Command to install the Docker Desktop RPM package using dnf package manager. This installs Docker Desktop in the default location /opt/docker-desktop.

LANGUAGE: bash
CODE:
$ sudo dnf install ./docker-desktop-x86_64.rpm

----------------------------------------

TITLE: Configuring Custom Address Pools in Docker Swarm
DESCRIPTION: Commands demonstrating how to initialize a swarm with custom address pools and subnet masks for overlay networks.

LANGUAGE: console
CODE:
$ docker swarm init --default-addr-pool <IP range in CIDR> [--default-addr-pool <IP range in CIDR> --default-addr-pool-mask-length <CIDR value>]

LANGUAGE: console
CODE:
$ docker swarm init --default-addr-pool 10.20.0.0/16

LANGUAGE: console
CODE:
$ docker swarm init --default-addr-pool 10.20.0.0/16 --default-addr-pool 10.30.0.0/16 --default-addr-pool-mask-length 26

----------------------------------------

TITLE: Initializing Docker Assets with docker init
DESCRIPTION: This snippet shows the interactive process of using 'docker init' to create necessary Docker assets for containerizing the application. It prompts for application platform, Python version, port, and command to run the app.

LANGUAGE: bash
CODE:
$ docker init
Welcome to the Docker Init CLI!

This utility will walk you through creating the following files with sensible defaults for your project:
  - .dockerignore
  - Dockerfile
  - compose.yaml
  - README.Docker.md

Let's get started!

? What application platform does your project use? Python
? What version of Python do you want to use? 3.11.4
? What port do you want your app to listen on? 8000
? What is the command to run your app? streamlit run app.py --server.address=0.0.0.0 --server.port=8000

----------------------------------------

TITLE: Configuring Endpoint Mode in Docker Compose
DESCRIPTION: Demonstrates how to configure service discovery method using endpoint_mode with VIP (Virtual IP) strategy for a web application deployment.

LANGUAGE: yaml
CODE:
services:
  frontend:
    image: example/webapp
    ports:
      - "8080:80"
    deploy:
      mode: replicated
      replicas: 2
      endpoint_mode: vip

----------------------------------------

TITLE: Starting Docker Compose Services
DESCRIPTION: Command to start all services defined in the compose.yaml file using Docker Compose CLI.

LANGUAGE: console
CODE:
$ docker compose up

----------------------------------------

TITLE: PowerShell Installation Command
DESCRIPTION: Installing Docker Desktop using PowerShell with the Start-Process cmdlet.

LANGUAGE: powershell
CODE:
Start-Process 'Docker Desktop Installer.exe' -Wait install

----------------------------------------

TITLE: Running PHP Tests with Docker Compose
DESCRIPTION: This command uses Docker Compose to run PHPUnit tests inside a container. It builds the server service, runs the tests, and removes the container afterward.

LANGUAGE: console
CODE:
$ docker compose run --build --rm server ./vendor/bin/phpunit tests/HelloWorldTest.php

----------------------------------------

TITLE: Using Templated Docker Configs
DESCRIPTION: Demonstrates how to create and use a templated Docker config with a Nginx service, using the golang template driver.

LANGUAGE: bash
CODE:
docker config create --template-driver golang homepage index.html.tmpl

docker service create \
     --name hello-template \
     --env HELLO="Docker" \
     --config source=homepage,target=/usr/share/nginx/html/index.html \
     --publish published=3000,target=80 \
     nginx:alpine

----------------------------------------

TITLE: Upgrading Docker Desktop on Fedora
DESCRIPTION: Commands to remove the previous version of Docker Desktop and install the new version using dnf package manager. This process is required for each upgrade.

LANGUAGE: bash
CODE:
$ sudo dnf remove docker-desktop
$ sudo dnf install ./docker-desktop-x86_64.rpm

----------------------------------------

TITLE: IPTables Network Metrics Setup
DESCRIPTION: Commands to setup iptables rules for tracking outbound HTTP traffic metrics

LANGUAGE: console
CODE:
$ iptables -I OUTPUT -p tcp --sport 80
$ iptables -nxvL OUTPUT

----------------------------------------

TITLE: Custom BuildKit GC Policies
DESCRIPTION: This TOML configuration demonstrates custom GC policies for BuildKit, allowing fine-grained control over cache retention based on cache type, duration, and disk space thresholds.

LANGUAGE: toml
CODE:
# Custom GC Policy 1: Remove unused local contexts older than 24 hours
[[worker.oci.gcpolicy]]
  filters = ["type==source.local"]
  keepDuration = "24h"
  reservedSpace = "5GB"
  maxUsedSpace = "50GB"

# Custom GC Policy 2: Remove remote Git contexts older than 30 days
[[worker.oci.gcpolicy]]
  filters = ["type==source.git.checkout"]
  keepDuration = "720h"
  reservedSpace = "5GB"
  maxUsedSpace = "30GB"

# Custom GC Policy 3: Aggressively clean all cache if disk usage exceeds 90GB
[[worker.oci.gcpolicy]]
  all = true
  reservedSpace = "5GB"
  maxUsedSpace = "90GB"

----------------------------------------

TITLE: Configuring Jenkins Pipeline for Docker Scout Security Scanning
DESCRIPTION: A Jenkins pipeline configuration that installs Docker Scout CLI, authenticates with Docker Hub, and performs vulnerability scanning on container images. The pipeline requires Docker Hub credentials and fails on critical or high severity vulnerabilities.

LANGUAGE: groovy
CODE:
pipeline {
    agent {
        // Agent details
    }

    environment {
        DOCKER_HUB = credentials('jenkins-docker-hub-credentials')
        IMAGE_TAG  = 'myorg/scout-demo-service:latest'
    }

    stages {
        stage('Analyze image') {
            steps {
                // Install Docker Scout
                sh 'curl -sSfL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh | sh -s -- -b /usr/local/bin'

                // Log into Docker Hub
                sh 'echo $DOCKER_HUB_PSW | docker login -u $DOCKER_HUB_USR --password-stdin'

                // Analyze and fail on critical or high vulnerabilities
                sh 'docker-scout cves $IMAGE_TAG --exit-code --only-severity critical,high'
            }
        }
    }
}

----------------------------------------

TITLE: Pushing Docker Images to Multiple Registries using GitHub Actions Workflow
DESCRIPTION: This GitHub Actions workflow logs into Docker Hub and GitHub Container Registry, sets up QEMU and Docker Buildx for multi-platform builds, and pushes a Docker image to both registries with multiple tags. It uses environment variables and secrets for authentication.

LANGUAGE: yaml
CODE:
name: ci

on:
  push:

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            user/app:latest
            user/app:1.0.0
            ghcr.io/user/app:latest
            ghcr.io/user/app:1.0.0

----------------------------------------

TITLE: Container Network Stack Sharing with Redis Example
DESCRIPTION: Shows how to run a Redis container binding to localhost and connect to it using redis-cli through shared network namespace.

LANGUAGE: console
CODE:
$ docker run -d --name redis example/redis --bind 127.0.0.1
$ docker run --rm -it --network container:redis example/redis-cli -h 127.0.0.1

----------------------------------------

TITLE: Pruning Stopped Docker Containers
DESCRIPTION: This command removes all stopped containers. It prompts for confirmation before execution.

LANGUAGE: console
CODE:
$ docker container prune

WARNING! This will remove all stopped containers.
Are you sure you want to continue? [y/N] y

----------------------------------------

TITLE: Configuring overlay2 Storage Driver
DESCRIPTION: JSON configuration to set overlay2 as the Docker storage driver in daemon.json

LANGUAGE: json
CODE:
{
  "storage-driver": "overlay2"
}

----------------------------------------

TITLE: Pushing Docker Image to Docker Hub Repository
DESCRIPTION: This console command pushes the tagged Docker image to the user's Docker Hub repository, making it available for sharing and deployment.

LANGUAGE: console
CODE:
docker push <YOUR_DOCKER_USERNAME>/docker-quickstart:1.0

----------------------------------------

TITLE: Custom BuildKit Image with CNI Support
DESCRIPTION: Dockerfile for creating a custom BuildKit image with CNI networking support, including CNI plugins installation.

LANGUAGE: dockerfile
CODE:
# syntax=docker/dockerfile:1

ARG BUILDKIT_VERSION=v{{% param "buildkit_version" %}}
ARG CNI_VERSION=v1.0.1

FROM --platform=$BUILDPLATFORM alpine AS cni-plugins
RUN apk add --no-cache curl
ARG CNI_VERSION
ARG TARGETOS
ARG TARGETARCH
WORKDIR /opt/cni/bin
RUN curl -Ls https://github.com/containernetworking/plugins/releases/download/$CNI_VERSION/cni-plugins-$TARGETOS-$TARGETARCH-$CNI_VERSION.tgz | tar xzv

FROM moby/buildkit:${BUILDKIT_VERSION}
ARG BUILDKIT_VERSION
RUN apk add --no-cache iptables
COPY --from=cni-plugins /opt/cni/bin /opt/cni/bin
ADD https://raw.githubusercontent.com/moby/buildkit/${BUILDKIT_VERSION}/hack/fixtures/cni.json /etc/buildkit/cni.json

----------------------------------------

TITLE: Running Node.js Tests with Docker Compose
DESCRIPTION: This command uses Docker Compose to run the test script defined in package.json inside a container. It demonstrates how to execute tests during local development.

LANGUAGE: Console
CODE:
$ docker compose run server npm run test

----------------------------------------

TITLE: Configuring Docker Desktop Settings via admin-settings.json
DESCRIPTION: JSON configuration file that specifies Docker Desktop settings and their lock status. This file controls various aspects like container isolation, proxy settings, filesystem sharing, and feature toggles. The configuration allows administrators to enforce standardized settings across an organization.

LANGUAGE: json
CODE:
{
  "configurationFileVersion": 2,
  "exposeDockerAPIOnTCP2375": {
    "locked": true,
    "value": false
  },
  "proxy": {
    "locked": true,
    "mode": "system",
    "http": "",
    "https": "",
    "exclude": [],
    "windowsDockerdPort": 65000,
    "enableKerberosNtlm": false
  },
  "containersProxy": {
    "locked": true,
    "mode": "manual",
    "http": "",
    "https": "",
    "exclude": [],
    "pac":"",
    "transparentPorts": ""
  },
  "enhancedContainerIsolation": {
    "locked": true,
    "value": true,
    "dockerSocketMount": {
      "imageList": {
        "images": [
          "docker.io/localstack/localstack:*",
          "docker.io/testcontainers/ryuk:*"
        ]
      },
      "commandList": {
        "type": "deny",
        "commands": ["push"]
      }
    }
  },
  "linuxVM": {
    "wslEngineEnabled": {
      "locked": false,
      "value": false
    },
    "dockerDaemonOptions": {
      "locked": false,
      "value":"{\"debug\": false}"
    },
    "vpnkitCIDR": {
      "locked": false,
      "value":"192.168.65.0/24"
    }
  },
  "kubernetes": {
     "locked": false,
     "enabled": false,
     "showSystemContainers": false,
     "imagesRepository": ""
  },
  "windowsContainers": {
    "dockerDaemonOptions": {
      "locked": false,
      "value":"{\"debug\": false}"
    }
  },
  "disableUpdate": {
    "locked": false,
    "value": false
  },
  "analyticsEnabled": {
    "locked": false,
    "value": true
  },
  "extensionsEnabled": {
    "locked": true,
    "value": false
  },
  "scout": {
    "locked": false,
    "sbomIndexing": true,
    "useBackgroundIndexing": true
  },
  "allowExperimentalFeatures": {
    "locked": false,
    "value": false
  },
  "allowBetaFeatures": {
    "locked": false,
    "value": false
  },
  "blockDockerLoad": {
    "locked": false,
    "value": true
  },
  "filesharingAllowedDirectories": [
    {
      "path": "$HOME",
      "sharedByDefault": true
    },
    {
      "path":"$TMP",
      "sharedByDefault": false
    }
  ],
  "useVirtualizationFrameworkVirtioFS": {
    "locked": true,
    "value": true
  },
  "useVirtualizationFrameworkRosetta": {
    "locked": true,
    "value": true
  },
  "useGrpcfuse": {
    "locked": true,
    "value": true
  },
  "displayedOnboarding": {
    "locked": true,
    "value": true
  },
  "desktopTerminalEnabled": {
    "locked": false,
    "value": false
  }
}

----------------------------------------

TITLE: Deploying Kubernetes Application with kubectl
DESCRIPTION: These shell commands demonstrate how to deploy the Kubernetes application defined in the YAML file, check its status, and then delete it. The commands use kubectl to interact with the Kubernetes cluster.

LANGUAGE: shell
CODE:
$ kubectl apply -f bb.yaml
$ kubectl get deployments
$ kubectl get services
$ kubectl delete -f bb.yaml

----------------------------------------

TITLE: Defining Docker Compose Configuration for Django
DESCRIPTION: This docker-compose.yml file defines the services required for a Django application, including a web service and a database service. It sets up volume mapping and environment variables for development.

LANGUAGE: YAML
CODE:
services:
  db:
    image: postgres
    volumes:
      - ./data/db:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
  web:
    build: .
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - .:/code
    ports:
      - "8000:8000"
    environment:
      - POSTGRES_NAME=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    depends_on:
      - db

----------------------------------------

TITLE: Inspecting Docker Swarm Manager Node Status
DESCRIPTION: Commands to check the health and status of a manager node, including its reachability as a manager and readiness as a worker.

LANGUAGE: bash
CODE:
docker node inspect manager1 --format "{{ .ManagerStatus.Reachability }}"

LANGUAGE: bash
CODE:
docker node inspect manager1 --format "{{ .Status.State }}"

----------------------------------------

TITLE: Standalone Container Overlay Network Setup
DESCRIPTION: Create an attachable overlay network and run containers on different hosts to demonstrate cross-host container communication.

LANGUAGE: console
CODE:
$ docker network create --driver=overlay --attachable test-net

$ docker run -it --name alpine1 --network test-net alpine

$ docker run -dit --name alpine2 --network test-net alpine

----------------------------------------

TITLE: YAML Front Matter for Rails Docker Samples
DESCRIPTION: YAML configuration block defining metadata for the Rails Docker samples page. It specifies the title, description, service type, and URL aliases for the content.

LANGUAGE: yaml
CODE:
---
title: Rails samples
description: Docker samples for Rails.
service: rails
aliases:
- /samples/rails/
---

----------------------------------------

TITLE: Custom Nginx AppArmor Profile
DESCRIPTION: A complete custom AppArmor profile for securing Nginx containers with specific permissions and restrictions.

LANGUAGE: c
CODE:
#include <tunables/global>

profile docker-nginx flags=(attach_disconnected,mediate_deleted) {
  #include <abstractions/base>

  network inet tcp,
  network inet udp,
  network inet icmp,

  deny network raw,

  deny network packet,

  file,
  umount,

  deny /bin/** wl,
  deny /boot/** wl,
  deny /dev/** wl,
  deny /etc/** wl,
  deny /home/** wl,
  deny /lib/** wl,
  deny /lib64/** wl,
  deny /media/** wl,
  deny /mnt/** wl,
  deny /opt/** wl,
  deny /proc/** wl,
  deny /root/** wl,
  deny /sbin/** wl,
  deny /srv/** wl,
  deny /tmp/** wl,
  deny /sys/** wl,
  deny /usr/** wl,

  audit /** w,

  /var/run/nginx.pid w,

  /usr/sbin/nginx ix,

  deny /bin/dash mrwklx,
  deny /bin/sh mrwklx,
  deny /usr/bin/top mrwklx,


  capability chown,
  capability dac_override,
  capability setuid,
  capability setgid,
  capability net_bind_service,

  deny @{PROC}/* w,
  deny @{PROC}/{[^1-9],[^1-9][^0-9],[^1-9s][^0-9y][^0-9s],[^1-9][^0-9][^0-9][^0-9]*}/** w,
  deny @{PROC}/sys/[^k]** w,
  deny @{PROC}/sys/kernel/{?,??,[^s][^h][^m]**} w,
  deny @{PROC}/sysrq-trigger rwklx,
  deny @{PROC}/mem rwklx,
  deny @{PROC}/kmem rwklx,
  deny @{PROC}/kcore rwklx,

  deny mount,

  deny /sys/[^f]*/** wklx,
  deny /sys/f[^s]*/** wklx,
  deny /sys/fs/[^c]*/** wklx,
  deny /sys/fs/c[^g]*/** wklx,
  deny /sys/fs/cg[^r]*/** wklx,
  deny /sys/firmware/** rwklx,
  deny /sys/kernel/security/** rwklx,
}

----------------------------------------

TITLE: Installing prerequisites on RHEL 8
DESCRIPTION: Commands to enable CodeReady Linux Builder repository, install EPEL, and install the 'pass' package on RHEL 8.

LANGUAGE: bash
CODE:
$ sudo subscription-manager repos --enable codeready-builder-for-rhel-8-$(arch)-rpms
$ sudo dnf install https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm
$ sudo dnf install pass

----------------------------------------

TITLE: Inspecting a Specific Docker Plugin
DESCRIPTION: This command provides detailed information about a specific Docker plugin.

LANGUAGE: bash
CODE:
docker inspect

----------------------------------------

TITLE: Building Image with Attestations
DESCRIPTION: Build and push a new image version with SBOM and provenance attestations.

LANGUAGE: bash
CODE:
$ docker build --provenance=true --sbom=true --push -t <ORG_NAME>/scout-demo:v3 .

----------------------------------------

TITLE: Running JupyterLab Container
DESCRIPTION: Command to run a JupyterLab container with port mapping and custom access token.

LANGUAGE: console
CODE:
docker run --rm -p 8889:8888 quay.io/jupyter/base-notebook start-notebook.py --NotebookApp.token='my-token'

----------------------------------------

TITLE: Creating a Dockerfile for PHP Application
DESCRIPTION: This Dockerfile sets up a PHP environment using the official PHP image. It installs additional PHP extensions and configures the Apache web server.

LANGUAGE: Dockerfile
CODE:
FROM php:7.4-apache

RUN docker-php-ext-install pdo pdo_mysql

EXPOSE 80

----------------------------------------

TITLE: Fixing Docker Directory Permissions
DESCRIPTION: Commands to correct ownership and permissions of the Docker configuration directory when previously run with sudo.

LANGUAGE: bash
CODE:
sudo chown "$USER":"$USER" /home/"$USER"/.docker -R
sudo chmod g+rwx "$HOME/.docker" -R

----------------------------------------

TITLE: Creating a Docker Volume
DESCRIPTION: Creates a new Docker volume named 'my-vol' using the docker volume create command.

LANGUAGE: console
CODE:
$ docker volume create my-vol

----------------------------------------

TITLE: MySQL Table Initialization Script
DESCRIPTION: SQL script to create and populate a table when container starts

LANGUAGE: sql
CODE:
CREATE TABLE IF NOT EXISTS mydb.myothertable (
  column_name VARCHAR(255)
);

INSERT INTO mydb.myothertable (column_name) VALUES ('other_value');

----------------------------------------

TITLE: Running Node.js Development Container
DESCRIPTION: Command to run a Node.js container with bind mount for development, including live reload with nodemon. Mounts source code and installs dependencies.

LANGUAGE: bash
CODE:
docker run -dp 127.0.0.1:3000:3000 \
    -w /app --mount type=bind,src="$(pwd)",target=/app \
    node:18-alpine \
    sh -c "yarn install && yarn run dev"

----------------------------------------

TITLE: Enabling Docker Scout for Image Repository
DESCRIPTION: Enable Docker Scout for your image repository using the CLI command.

LANGUAGE: bash
CODE:
$ docker scout repo enable --org <ORG_NAME> <ORG_NAME>/scout-demo

----------------------------------------

TITLE: Installing and Using SSHFS Plugin in Docker
DESCRIPTION: Example commands showing how to install the SSHFS plugin, verify its status, create and use a volume, and clean up. Demonstrates plugin installation workflow with permission handling.

LANGUAGE: console
CODE:
$ docker plugin install vieux/sshfs

Plugin "vieux/sshfs" is requesting the following privileges:
- network: [host]
- capabilities: [CAP_SYS_ADMIN]
Do you grant the above permissions? [y/N] y

vieux/sshfs

----------------------------------------

TITLE: Defining Ollama LLM Service in Docker Compose
DESCRIPTION: This YAML snippet defines an Ollama LLM service in a Docker Compose file. It includes GPU access configuration for supported systems.

LANGUAGE: yaml
CODE:
ollama:
  image: ollama/ollama
  container_name: ollama
  ports:
    - "8000:8000"
  deploy:
    resources:
      reservations:
        devices:
          - driver: nvidia
            count: 1
            capabilities: [gpu]

----------------------------------------

TITLE: Custom Named Network Configuration
DESCRIPTION: Example showing how to create networks with custom names in Docker Compose.

LANGUAGE: yaml
CODE:
services:
  # ...
networks:
  frontend:
    name: custom_frontend
    driver: custom-driver-1

----------------------------------------

TITLE: Installing a Docker Logging Driver Plugin
DESCRIPTION: This command installs a logging driver plugin in Docker. Replace <org/image> with the specific plugin information provided by the developer.

LANGUAGE: bash
CODE:
docker plugin install <org/image>

----------------------------------------

TITLE: Docker Compose Configuration with Ollama Service
DESCRIPTION: Extended Docker Compose configuration that includes Ollama LLM service with GPU support and volume configuration.

LANGUAGE: yaml
CODE:
services:
  server:
    build:
      context: .
    ports:
      - 8000:8000
    env_file:
      - .env
    depends_on:
      database:
        condition: service_healthy
  database:
    image: neo4j:5.11
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      - NEO4J_AUTH=${NEO4J_USERNAME}/${NEO4J_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider localhost:7474 || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 5
  ollama:
    image: ollama/ollama:latest
    ports:
      - "11434:11434"
    volumes:
      - ollama_volume:/root/.ollama
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
volumes:
  ollama_volume:

----------------------------------------

TITLE: Docker Compose Configuration
DESCRIPTION: Docker Compose configuration for Postgres with environment variables and volume mapping

LANGUAGE: yaml
CODE:
services:
  db:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: my_postgres_db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: mysecretpassword
      POSTGRES_DB: sampledb
    ports:
      - "5432:5432"
    volumes:
      - data_sql:/var/lib/postgresql/data

volumes:
  data_sql:

----------------------------------------

TITLE: Docker Compose Bind Mount Configuration
DESCRIPTION: Example of configuring a bind mount in a Docker Compose YAML file.

LANGUAGE: yaml
CODE:
services:
  frontend:
    image: node:lts
    volumes:
      - type: bind
        source: ./static
        target: /opt/app/static
volumes:
  myapp:

----------------------------------------

TITLE: Integrating Docker Scout for Image Comparison in GitHub Actions
DESCRIPTION: This YAML snippet adds steps to authenticate with Docker and run Docker Scout for comparing images between pull requests and production environments. It uses the docker/scout-action to perform the comparison.

LANGUAGE: yaml
CODE:
      # You can skip this step if Docker Hub is your registry
      # and you already authenticated before
      - name: Authenticate to Docker
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PAT }}

      # Compare the image built in the pull request with the one in production
      - name: Docker Scout
        id: docker-scout
        if: ${{ github.event_name == 'pull_request' }}
        uses: docker/scout-action@v1
        with:
          command: compare
          image: ${{ steps.meta.outputs.tags }}
          to-env: production
          ignore-unchanged: true
          only-severities: critical,high
          github-token: ${{ secrets.GITHUB_TOKEN }}

----------------------------------------

TITLE: Running Node.js Todo App Container
DESCRIPTION: Launches the Node.js application container with MySQL connection environment variables and network configuration

LANGUAGE: console
CODE:
docker run -dp 127.0.0.1:3000:3000 \
  -w /app -v "$(pwd):/app" \
  --network todo-app \
  -e MYSQL_HOST=mysql \
  -e MYSQL_USER=root \
  -e MYSQL_PASSWORD=secret \
  -e MYSQL_DB=todos \
  node:18-alpine \
  sh -c "yarn install && yarn run dev"

----------------------------------------

TITLE: Manually Starting Docker Daemon
DESCRIPTION: This command directly starts the Docker daemon using the dockerd command. It runs in the foreground and outputs logs to the terminal. Sudo may be required depending on the system configuration.

LANGUAGE: console
CODE:
$ dockerd

INFO[0000] +job init_networkdriver()
INFO[0000] +job serveapi(unix:///var/run/docker.sock)
INFO[0000] Listening for HTTP on unix (/var/run/docker.sock)

----------------------------------------

TITLE: Configuring Fluentd Logging Driver in daemon.json
DESCRIPTION: Example of setting the Fluentd logging driver as the default for Docker daemon using the daemon.json configuration file. This snippet sets the log driver to 'fluentd' and specifies the Fluentd daemon address.

LANGUAGE: json
CODE:
{
  "log-driver": "fluentd",
  "log-opts": {
    "fluentd-address": "fluentdhost:24224"
  }
}

----------------------------------------

TITLE: Configuring Azure Blob Storage Cache with Docker Buildx
DESCRIPTION: Example command showing how to configure Docker Buildx to use Azure Blob Storage for build caching. Uses the --cache-to and --cache-from flags to specify the Azure blob storage cache configuration with optional parameters.

LANGUAGE: console
CODE:
$ docker buildx build --push -t <registry>/<image> \
  --cache-to type=azblob,name=<cache-image>[,parameters...] \
  --cache-from type=azblob,name=<cache-image>[,parameters...] .

----------------------------------------

TITLE: Common Service Configuration Template
DESCRIPTION: Shows a template service configuration that can be extended by other services.

LANGUAGE: yaml
CODE:
services:
  webapp:
    build: .
    ports:
      - "8000:8000"
    volumes:
      - "/data"

----------------------------------------

TITLE: Python Script for Reading Container Logs
DESCRIPTION: Example Python script using the systemd module to retrieve container logs from the journal API.

LANGUAGE: python
CODE:
import systemd.journal

reader = systemd.journal.Reader()
reader.add_match('CONTAINER_NAME=web')

for msg in reader:
    print '{CONTAINER_ID_FULL}: {MESSAGE}'.format(**msg)

----------------------------------------

TITLE: Defining Docker Compose Configuration for Trust Sandbox
DESCRIPTION: YAML configuration for setting up a Docker content trust sandbox environment with a Notary server, local registry, and trustsandbox container.

LANGUAGE: yaml
CODE:
version: "2"
services:
  notaryserver:
    image: dockersecurity/notary_autobuilds:server-v0.5.1
    volumes:
      - notarycerts:/var/lib/notary/fixtures
    networks:
      - sandbox
    environment:
      - NOTARY_SERVER_STORAGE_TYPE=memory
      - NOTARY_SERVER_TRUST_SERVICE_TYPE=local
  sandboxregistry:
    image: registry:2.4.1
    networks:
      - sandbox
    container_name: sandboxregistry
  trustsandbox:
    image: docker:dind
    networks:
      - sandbox
    volumes:
      - notarycerts:/notarycerts
    privileged: true
    container_name: trustsandbox
    entrypoint: ""
    command: |-
        sh -c '
            cp /notarycerts/root-ca.crt /usr/local/share/ca-certificates/root-ca.crt &&
            update-ca-certificates &&
            dockerd-entrypoint.sh --insecure-registry sandboxregistry:5000'
volumes:
  notarycerts:
    external: false
networks:
  sandbox:
    external: false

----------------------------------------

TITLE: Running Python Application with Compose Watch
DESCRIPTION: Command to run the Python application using Docker Compose with the watch feature enabled.

LANGUAGE: Shell
CODE:
$ docker compose watch

----------------------------------------

TITLE: Test Configuration in Docker Buildx Bake
DESCRIPTION: HCL configuration for running tests using BuildKit as a task runner with cacheonly output type.

LANGUAGE: hcl
CODE:
target "test" {
  target = "test"
  output = ["type=cacheonly"]
}

----------------------------------------

TITLE: Create User-Defined Network
DESCRIPTION: Create a user-defined bridge network named alpine-net

LANGUAGE: console
CODE:
$ docker network create --driver bridge alpine-net

----------------------------------------

TITLE: Running Docker Container with Splunk Logging
DESCRIPTION: This console command demonstrates how to run a Docker container with the Splunk logging driver, specifying the token, URL, and other logging options.

LANGUAGE: bash
CODE:
$ docker run \
    --log-driver=splunk \
    --log-opt splunk-token=176FCEBF-4CF5-4EDF-91BC-703796522D20 \
    --log-opt splunk-url=https://splunkhost:8088 \
    --log-opt splunk-capath=/path/to/cert/cacert.pem \
    --log-opt splunk-caname=SplunkServerDefaultCert \
    --log-opt tag="{{.Name}}/{{.FullID}}" \
    --log-opt labels=location \
    --log-opt env=TEST \
    --env "TEST=false" \
    --label location=west \
    your/application

----------------------------------------

TITLE: Exporting Docker Build Cache Using Inline Storage
DESCRIPTION: Shows how to export build cache using the inline storage type. This method embeds the cache directly into the image being pushed.

LANGUAGE: console
CODE:
$ docker buildx build --push -t <registry>/<image> \
  --cache-to type=inline .

----------------------------------------

TITLE: Pulling Docker Images from Registry
DESCRIPTION: Command to restore Docker images from Docker Hub registry.

LANGUAGE: bash
CODE:
docker image pull

----------------------------------------

TITLE: Basic JSON Log Format Example
DESCRIPTION: Example of the standard JSON log entry format used by Docker's json-file logging driver. Shows the structure including log message, stream type, and timestamp.

LANGUAGE: json
CODE:
{
  "log": "Log line is here\n",
  "stream": "stdout",
  "time": "2019-01-01T11:11:11.111111111Z"
}

----------------------------------------

TITLE: Building Docker Image
DESCRIPTION: Command to build a Docker image with a specific username tag. The period at the end indicates the build context is the current directory.

LANGUAGE: console
CODE:
$ docker build -t <DOCKER_USERNAME>/getting-started-todo-app .

----------------------------------------

TITLE: Using External Volumes in Docker Compose
DESCRIPTION: This snippet shows how to use an existing external volume in a Docker Compose configuration, specifying that the volume lifecycle is managed outside of the application.

LANGUAGE: yaml
CODE:
services:
  backend:
    image: example/database
    volumes:
      - db-data:/etc/data

volumes:
  db-data:
    external: true

----------------------------------------

TITLE: Building Wasmtime Shim from Source
DESCRIPTION: Dockerfile commands to build the Wasmtime containerd shim binary

LANGUAGE: console
CODE:
$ docker build --output . - <<EOF
FROM rust:latest as build
RUN cargo install \
    --git https://github.com/containerd/runwasi.git \
    --bin containerd-shim-wasmtime-v1 \
    --root /out \
    containerd-shim-wasmtime
FROM scratch
COPY --from=build /out/bin /
EOF

----------------------------------------

TITLE: GitHub Actions Workflow for Docker Build and Push
DESCRIPTION: YAML configuration for a GitHub Actions workflow that builds a Docker image, runs tests, and pushes the image to Docker Hub. It uses Docker Buildx for multi-platform builds and includes steps for logging into Docker Hub.

LANGUAGE: yaml
CODE:
name: ci

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and test
        uses: docker/build-push-action@v6
        with:
          target: build
          load: true

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64,linux/arm64
          push: true
          target: final
          tags: ${{ vars.DOCKER_USERNAME }}/${{ github.event.repository.name }}:latest

----------------------------------------

TITLE: Retrieving Logs Using journalctl
DESCRIPTION: Commands demonstrating different ways to retrieve and filter container logs using journalctl.

LANGUAGE: console
CODE:
$ sudo journalctl CONTAINER_NAME=webserver
$ sudo journalctl -b CONTAINER_NAME=webserver
$ sudo journalctl -o json CONTAINER_NAME=webserver
$ sudo journalctl -b CONTAINER_NAME=webserver --all

----------------------------------------

TITLE: Creating IPv6 Network in Docker
DESCRIPTION: Examples of creating IPv6-enabled networks using docker network create command and Docker Compose configuration.

LANGUAGE: console
CODE:
$ docker network create --ipv6 ip6net

LANGUAGE: console
CODE:
$ docker network create --ipv6 --subnet 2001:db8::/64 ip6net

LANGUAGE: yaml
CODE:
 networks:
   ip6net:
     enable_ipv6: true
     ipam:
       config:
         - subnet: 2001:db8::/64

----------------------------------------

TITLE: Creating Configuration Profile for Docker Desktop Sign-in Enforcement (Mac)
DESCRIPTION: This XML snippet shows the structure of a configuration profile (.mobileconfig file) used to enforce sign-in for Docker Desktop on macOS. It includes payload information and the 'allowedOrgs' key for specifying allowed organizations.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
  <dict>
    <key>PayloadContent</key>
    <array>
      <dict>
        <key>PayloadType</key>
        <string>com.docker.config</string>
        <key>PayloadVersion</key>
        <integer>1</integer>
        <key>PayloadIdentifier</key>
        <string>com.docker.config</string>
        <key>PayloadUUID</key>
        <string>eed295b0-a650-40b0-9dda-90efb12be3c7</string>
        <key>PayloadDisplayName</key>
        <string>Docker Desktop Configuration</string>
        <key>PayloadDescription</key>
        <string>Configuration profile to manage Docker Desktop settings.</string>
        <key>PayloadOrganization</key>
        <string>Your Company Name</string>
        <key>allowedOrgs</key>
        <string>first_org;second_org</string>
      </dict>
    </array>
    <key>PayloadType</key>
    <string>Configuration</string>
    <key>PayloadVersion</key>
    <integer>1</integer>
    <key>PayloadIdentifier</key>
    <string>com.yourcompany.docker.config</string>
    <key>PayloadUUID</key>
    <string>0deedb64-7dc9-46e5-b6bf-69d64a9561ce</string>
    <key>PayloadDisplayName</key>
    <string>Docker Desktop Config Profile</string>
    <key>PayloadDescription</key>
    <string>Config profile to enforce Docker Desktop settings for allowed organizations.</string>
    <key>PayloadOrganization</key>
    <string>Your Company Name</string>
  </dict>
</plist>

----------------------------------------

TITLE: Creating Docker Service with Published Port
DESCRIPTION: Example of creating a Docker service with port publishing using the routing mesh. Demonstrates the syntax for specifying published and target ports.

LANGUAGE: console
CODE:
$ docker service create \
  --name <SERVICE-NAME> \
  --publish published=<PUBLISHED-PORT>,target=<CONTAINER-PORT> \
  <IMAGE>

----------------------------------------

TITLE: Configuring YAML Metadata for Docker Documentation
DESCRIPTION: YAML configuration block that sets metadata properties for Docker documentation. Specifies build rendering behavior, page title, and content weight for organizing documentation structure.

LANGUAGE: yaml
CODE:
build:
  render: never
title: Metadata
weight: 80

----------------------------------------

TITLE: Setting Up Docker Repository on RHEL
DESCRIPTION: These commands install the necessary plugin for managing DNF repositories and add the Docker repository to the system. This setup is required before installing Docker Engine from the repository.

LANGUAGE: bash
CODE:
$ sudo dnf -y install dnf-plugins-core
$ sudo dnf config-manager --add-repo https://download.docker.com/linux/rhel/docker-ce.repo

----------------------------------------

TITLE: Configuring iptables rules with conntrack for Docker
DESCRIPTION: Commands to set up iptables rules using conntrack extension to match original IP and port in network requests.

LANGUAGE: bash
CODE:
$ sudo iptables -I DOCKER-USER -p tcp -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
$ sudo iptables -I DOCKER-USER -p tcp -m conntrack --ctorigdst 198.51.100.2 --ctorigdstport 80 -j ACCEPT

----------------------------------------

TITLE: AWS IAM Policy for CloudWatch Logs
DESCRIPTION: Required IAM policy configuration to allow log creation and event publishing to CloudWatch Logs.

LANGUAGE: json
CODE:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": ["logs:CreateLogStream", "logs:PutLogEvents"],
      "Effect": "Allow",
      "Resource": "*"
    }
  ]
}

----------------------------------------

TITLE: Creating Nginx Container with tmpfs Mount
DESCRIPTION: Complete example of creating an Nginx container with a tmpfs mount, including verification and cleanup commands.

LANGUAGE: console
CODE:
$ docker run -d \
  -it \
  --name tmptest \
  --mount type=tmpfs,destination=/app \
  nginx:latest

$ docker inspect tmptest --format '{{ json .Mounts }}'

$ docker stop tmptest
$ docker rm tmptest

----------------------------------------

TITLE: Nginx Dockerfile Log Configuration
DESCRIPTION: Demonstrates how the official nginx image configures logging by creating symbolic links from log files to stdout/stderr streams for container logging.

LANGUAGE: dockerfile
CODE:
# Symlink nginx log files to stdout/stderr
RUN ln -sf /dev/stdout /var/log/nginx/access.log \
    && ln -sf /dev/stderr /var/log/nginx/error.log

----------------------------------------

TITLE: Configuring Test Environment Variables in Docker Compose
DESCRIPTION: Example showing how to declare build environment variables in a docker-compose.test.yml file for automated testing using the sut service.

LANGUAGE: yaml
CODE:
services:
  sut:
    build: .
    command: run_tests.sh
    environment:
      - SOURCE_BRANCH

----------------------------------------

TITLE: Usage of docker dev stop Command
DESCRIPTION: Shows how to use the docker dev stop command to stop a specific dev environment.

LANGUAGE: bash
CODE:
docker dev stop DEV_ENV_NAME

----------------------------------------

TITLE: Testing Python API Endpoints with cURL
DESCRIPTION: cURL commands to test the API endpoints of the Python application for creating and retrieving data.

LANGUAGE: Shell
CODE:
$ curl -X 'POST' \
  'http://localhost:8001/heroes/' \
  -H 'accept: application/json' \
  -H 'Content-Type: application/json' \
  -d '{
  "id": 1,
  "name": "my hero",
  "secret_name": "austing",
  "age": 12
}'

LANGUAGE: Shell
CODE:
$ curl -X 'GET' \
  'http://localhost:8001/heroes/' \
  -H 'accept: application/json'

----------------------------------------

TITLE: Defining DockerCommand Interface in TypeScript
DESCRIPTION: This snippet defines the DockerCommand interface with a single property 'exec' of type Exec. It's part of the Docker extension API introduced in version 0.2.0.

LANGUAGE: typescript
CODE:
interface DockerCommand {
  exec: Exec;
}

----------------------------------------

TITLE: Docker Compose Sync+Exec Configuration Example
DESCRIPTION: Shows how to configure a service to sync files and execute commands after file changes, including command execution parameters like user privileges and working directory.

LANGUAGE: yaml
CODE:
services:
  frontend:
    image: ...
    develop:
      watch: 
        # sync content then run command to reload service without interruption
        - path: ./etc/config
          action: sync+exec
          target: /etc/config/
          exec:
            command: app reload

----------------------------------------

TITLE: Starting NetCat Container with Host Networking
DESCRIPTION: Command to start a netcat container that listens on port 8000 using host network mode.

LANGUAGE: console
CODE:
$ docker run --rm -it --net=host nicolaka/netshoot nc -lkv 0.0.0.0 8000

----------------------------------------

TITLE: Installing Rootless Docker with Package Manager
DESCRIPTION: Commands to install and configure Docker to run in rootless mode using package managers like apt/dnf

LANGUAGE: console
CODE:
$ dockerd-rootless-setuptool.sh install
[INFO] Creating /home/testuser/.config/systemd/user/docker.service
...
[INFO] Installed docker.service successfully.
[INFO] To control docker.service, run: `systemctl --user (start|stop|restart) docker.service`
[INFO] To run docker.service on system startup, run: `sudo loginctl enable-linger testuser`

----------------------------------------

TITLE: Switching Kubernetes Context to Docker Desktop
DESCRIPTION: Use kubectl to switch the current context to docker-desktop, ensuring commands are executed against the correct cluster.

LANGUAGE: console
CODE:
$ kubectl config get-contexts
$ kubectl config use-context docker-desktop

----------------------------------------

TITLE: Creating Docker Builder with Jaeger Integration
DESCRIPTION: Creates a docker-container builder named 'mybuilder' with host network access and Jaeger trace collection configured via environment variables.

LANGUAGE: console
CODE:
docker buildx create --use \
  --name mybuilder \
  --driver docker-container \
  --driver-opt "network=host" \
  --driver-opt "env.JAEGER_TRACE=localhost:6831"

----------------------------------------

TITLE: Multiple Cache Sources Configuration
DESCRIPTION: Example showing how to import cache from multiple locations using the registry cache backend, specifically from both current branch and main branch.

LANGUAGE: bash
CODE:
docker buildx build --push -t <registry>/<image> \
  --cache-to type=registry,ref=<registry>/<cache-image>:<branch> \
  --cache-from type=registry,ref=<registry>/<cache-image>:<branch> \
  --cache-from type=registry,ref=<registry>/<cache-image>:main .

----------------------------------------

TITLE: Building Docker Image with Proxy Settings
DESCRIPTION: Example showing how to build a Docker image while verifying proxy environment variables are correctly passed to the build context.

LANGUAGE: console
CODE:
$ docker build \
  --no-cache \
  --progress=plain \
  - <<EOF
FROM alpine
RUN env | grep -i _PROXY
EOF

----------------------------------------

TITLE: Configuring Driver Options for Volumes in Docker Compose
DESCRIPTION: This example demonstrates how to set driver-specific options for a volume using the driver_opts attribute, in this case configuring an NFS volume.

LANGUAGE: yaml
CODE:
volumes:
  example:
    driver_opts:
      type: "nfs"
      o: "addr=10.40.0.199,nolock,soft,rw"
      device: ":/docker/example"

----------------------------------------

TITLE: Testing WireMock API Endpoint
DESCRIPTION: cURL command to test the mock weather API endpoint and its response

LANGUAGE: console
CODE:
$ curl http://localhost:8080/api/v1/getWeather\?city\=Bengaluru

----------------------------------------

TITLE: Installing Docker Desktop DEB Package on Ubuntu
DESCRIPTION: Commands to update apt repository and install the Docker Desktop package. Note that an expected permission-related error message may appear during installation.

LANGUAGE: bash
CODE:
sudo apt-get update
sudo apt-get install ./docker-desktop-amd64.deb

----------------------------------------

TITLE: Listing Docker Images using SDKs and API
DESCRIPTION: This example shows how to list all Docker images on the system using the Docker Go SDK, Python SDK, and HTTP API. It retrieves and prints the IDs of all available images.

LANGUAGE: Go
CODE:
package main

import (
	"context"
	"fmt"

	"github.com/docker/docker/api/types/image"
	"github.com/docker/docker/client"
)

func main() {
	ctx := context.Background()
	cli, err := client.NewClientWithOpts(client.FromEnv, client.WithAPIVersionNegotiation())
	if err != nil {
		panic(err)
	}
	defer cli.Close()

	images, err := cli.ImageList(ctx, image.ListOptions{})
	if err != nil {
		panic(err)
	}

	for _, image := range images {
		fmt.Println(image.ID)
	}
}

LANGUAGE: Python
CODE:
import docker
client = docker.from_env()
for image in client.images.list():
  print(image.id)

LANGUAGE: HTTP
CODE:
$ curl --unix-socket /var/run/docker.sock http://localhost/v{{% param "latest_engine_api_version" %}}/images/json
[{
  "Id":"sha256:31d9a31e1dd803470c5a151b8919ef1988ac3efd44281ac59d43ad623f275dcd",
  "ParentId":"sha256:ee4603260daafe1a8c2f3b78fd760922918ab2441cbb2853ed5c439e59c52f96",
  ...
}]

----------------------------------------

TITLE: Integrating Docker Scout in Azure DevOps Pipeline
DESCRIPTION: This YAML snippet demonstrates how to set up an Azure DevOps pipeline stage to record the environment using Docker Scout. It includes steps for running the Docker Scout CLI container.

LANGUAGE: yaml
CODE:
trigger:
  - main

resources:
  - repo: self

variables:
  tag: "$(Build.BuildId)"
  image: "namespace/repo"

stages:
  - stage: Docker Scout
    displayName: Docker Scout environment integration
    jobs:
      - job: Record
        displayName: Record environment
        pool:
          vmImage: ubuntu-latest
        steps:
          - task: Docker@2
          - script: docker run -it \
              -e DOCKER_SCOUT_HUB_USER=$DOCKER_SCOUT_HUB_USER \
              -e DOCKER_SCOUT_HUB_PASSWORD=$DOCKER_SCOUT_HUB_PASSWORD \
              docker/scout-cli:1.0.2 environment \
              --org "<MY_DOCKER_ORG>" \
              "<ENVIRONMENT>" $(image):$(tag)

----------------------------------------

TITLE: Defining File-Based Config in Docker Compose YAML
DESCRIPTION: This snippet demonstrates how to create a config named 'http_config' using the contents of a file named 'httpd.conf'.

LANGUAGE: yaml
CODE:
configs:
  http_config:
    file: ./httpd.conf

----------------------------------------

TITLE: Creating User-Defined Functions in Docker Bake
DESCRIPTION: Shows how to create a custom 'increment' function that adds 1 to a given number. Demonstrates the syntax for defining custom functions with parameters and results.

LANGUAGE: hcl
CODE:
function "increment" {
  params = [number]
  result = number + 1
}

group "default" {
  targets = ["webapp"]
}

target "webapp" {
  args = {
    buildno = "${increment(123)}"
  }
}

LANGUAGE: json
CODE:
{
  "group": {
    "default": {
      "targets": ["webapp"]
    }
  },
  "target": {
    "webapp": {
      "context": ".",
      "dockerfile": "Dockerfile",
      "args": {
        "buildno": "124"
      }
    }
  }
}

----------------------------------------

TITLE: Multi-stage Dockerfile for Java Testing
DESCRIPTION: A multi-stage Dockerfile that sets up Java testing environment using Eclipse Temurin JDK. Includes stages for testing, dependency management, packaging, and final runtime. Uses Maven wrapper for build and test execution.

LANGUAGE: dockerfile
CODE:
# syntax=docker/dockerfile:1

FROM eclipse-temurin:21-jdk-jammy as base
WORKDIR /build
COPY --chmod=0755 mvnw mvnw
COPY .mvn/ .mvn/

FROM base as test
WORKDIR /build
COPY ./src src/
RUN --mount=type=bind,source=pom.xml,target=pom.xml \
    --mount=type=cache,target=/root/.m2 \
    ./mvnw test

FROM base as deps
WORKDIR /build
RUN --mount=type=bind,source=pom.xml,target=pom.xml \
    --mount=type=cache,target=/root/.m2 \
    ./mvnw dependency:go-offline -DskipTests

FROM deps as package
WORKDIR /build
COPY ./src src/
RUN --mount=type=bind,source=pom.xml,target=pom.xml \
    --mount=type=cache,target=/root/.m2 \
    ./mvnw package -DskipTests && \
    mv target/$(./mvnw help:evaluate -Dexpression=project.artifactId -q -DforceStdout)-$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout).jar target/app.jar

FROM package as extract
WORKDIR /build
RUN java -Djarmode=layertools -jar target/app.jar extract --destination target/extracted

FROM extract as development
WORKDIR /build
RUN cp -r /build/target/extracted/dependencies/. ./
RUN cp -r /build/target/extracted/spring-boot-loader/. ./
RUN cp -r /build/target/extracted/snapshot-dependencies/. ./
RUN cp -r /build/target/extracted/application/. ./
ENV JAVA_TOOL_OPTIONS="-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:8000"
CMD [ "java", "-Dspring.profiles.active=postgres", "org.springframework.boot.loader.launch.JarLauncher" ]

FROM eclipse-temurin:21-jre-jammy AS final
ARG UID=10001
RUN adduser \
    --disabled-password \
    --gecos "" \
    --home "/nonexistent" \
    --shell "/sbin/nologin" \
    --no-create-home \
    --uid "${UID}" \
    appuser
USER appuser
COPY --from=extract build/target/extracted/dependencies/ ./
COPY --from=extract build/target/extracted/spring-boot-loader/ ./
COPY --from=extract build/target/extracted/snapshot-dependencies/ ./
COPY --from=extract build/target/extracted/application/ ./
EXPOSE 8080
ENTRYPOINT [ "java", "-Dspring.profiles.active=postgres", "org.springframework.boot.loader.launch.JarLauncher" ]

----------------------------------------

TITLE: Executing Docker BuildX Build with Local and Tar Exporters
DESCRIPTION: Commands demonstrating how to build using Docker BuildX with local and tar exporters. The local exporter outputs files and directories directly, while the tar exporter bundles the output into a tarball. Both exporters support a 'dest' parameter to specify the output location.

LANGUAGE: console
CODE:
$ docker buildx build --output type=local[,parameters] .
$ docker buildx build --output type=tar[,parameters] .

----------------------------------------

TITLE: Building to Cache Only with Cloud Builder
DESCRIPTION: Command to build an image with a tag using the cloud builder, but only output to the build cache without loading to local image store.

LANGUAGE: bash
CODE:
$ docker buildx build --builder cloud-<ORG>-<BUILDER_NAME> \
  --platform linux/amd64,linux/arm64 \
  --tag <IMAGE> \
  --output type=cacheonly .

----------------------------------------

TITLE: Running Alpine Container with Macvlan Network
DESCRIPTION: Launches an Alpine Linux container connected to the macvlan network with interactive shell access.

LANGUAGE: bash
CODE:
docker run --rm -dit \
  --network my-macvlan-net \
  --name my-macvlan-alpine \
  alpine:latest \
  ash

----------------------------------------

TITLE: Making Custom HTTP Request with Docker Extension HttpService in TypeScript
DESCRIPTION: Demonstrates how to perform a custom HTTP request to a backend service using the Docker extension API. This method accepts a configuration object with URL, method, headers, and data, returning a Promise that resolves to the response data.

LANGUAGE: typescript
CODE:
ddClient.extension.vm.service
 .request({ url: "/url", method: "GET", headers: { 'header-key': 'header-value' }, data: { ... }})
 .then((value: any) => console.log(value));

----------------------------------------

TITLE: Starting Kafka Container
DESCRIPTION: Docker command to start a Kafka container with port 9092 exposed to the host

LANGUAGE: console
CODE:
$ docker run -d --name=kafka -p 9092:9092 apache/kafka

----------------------------------------

TITLE: Pushing Docker Image to Organization Repository
DESCRIPTION: Command to push a Docker image that has been tagged with an organization namespace to the organization's repository.

LANGUAGE: console
CODE:
$ docker push new_org/docker101tutorial

----------------------------------------

TITLE: Pulling Docker Images with Content Trust Enabled
DESCRIPTION: Shows the behavior of docker pull command when Docker Content Trust is enabled, demonstrating the difference between pulling signed and unsigned images.

LANGUAGE: bash
CODE:
$ docker pull registry.example.com/user/image:1
Error: remote trust data does not exist for registry.example.com/user/image: registry.example.com does not have trust data for registry.example.com/user/image

$ docker pull registry.example.com/user/image@sha256:d149ab53f8718e987c3a3024bb8aa0e2caadf6c0328f1d9d850b2a2a67f2819a
sha256:ee7491c9c31db1ffb7673d91e9fac5d6354a89d0e97408567e09df069a1687c1: Pulling from user/image
ff3a5c916c92: Pull complete
a59a168caba3: Pull complete
Digest: sha256:ee7491c9c31db1ffb7673d91e9fac5d6354a89d0e97408567e09df069a1687c1
Status: Downloaded newer image for registry.example.com/user/image@sha256:ee7491c9c31db1ffb7673d91e9fac5d6354a89d0e97408567e09df069a1687c1

----------------------------------------

TITLE: Launching Postgres Container with Docker
DESCRIPTION: Docker command to start a Postgres container with password authentication and port mapping

LANGUAGE: console
CODE:
docker run -d --name postgres -p 5432:5432 -e POSTGRES_PASSWORD=mysecretpassword postgres

----------------------------------------

TITLE: Cloning the Sample RAG Application Repository
DESCRIPTION: Command to clone the sample RAG application repository from GitHub. This provides the necessary files and structure for the containerization process.

LANGUAGE: console
CODE:
$ git clone https://github.com/mfranzon/winy.git

----------------------------------------

TITLE: Installing Docker on Windows Server
DESCRIPTION: PowerShell commands for installing Docker Engine on Windows Server, including service registration and verification.

LANGUAGE: powershell
CODE:
PS C:\> Expand-Archive /path/to/<FILE>.zip -DestinationPath $Env:ProgramFiles
PS C:\> &$Env:ProgramFiles\Docker\dockerd --register-service
PS C:\> Start-Service docker
PS C:\> &$Env:ProgramFiles\Docker\docker run hello-world:nanoserver

----------------------------------------

TITLE: Port Mapping with Specific Host Port
DESCRIPTION: Shows how to map container port 5000 to host port 80 using the -p flag.

LANGUAGE: console
CODE:
$ docker run -d -p 80:5000 training/webapp python app.py

----------------------------------------

TITLE: Pruning Docker Images with Time Filter
DESCRIPTION: This command prunes all unused images that were created more than 24 hours ago. It demonstrates the use of the --filter flag with a time-based condition.

LANGUAGE: console
CODE:
$ docker image prune -a --filter "until=24h"

----------------------------------------

TITLE: Running Nginx Container with Port Publishing in Docker
DESCRIPTION: Shows different ways to publish ports when running an Nginx container, including explicit port mapping and publishing all exposed ports.

LANGUAGE: console
CODE:
$ docker run -d -p 80:80 --name webserver nginx

$ docker run --publish 8000:80 --name webserver nginx

$ docker run -p 8000:80 --name webserver nginx

$ docker run -d -P --name webserver nginx

----------------------------------------

TITLE: Viewing Docker Image History
DESCRIPTION: Shows how to view the build history of a Docker image using the docker image history command.

LANGUAGE: console
CODE:
$ docker image history mobywhale/concepts-build-image-demo

----------------------------------------

TITLE: Docker Commands for Build Tracking
DESCRIPTION: List of Docker commands that are tracked as build operations in the Insights feature, including docker build, buildx, and compose commands.

LANGUAGE: bash
CODE:
docker build
docker buildx b
docker buildx bake
docker buildx build
docker buildx f
docker builder b
docker builder bake
docker builder build
docker builder f
docker compose build
docker compose up --build
docker image build

----------------------------------------

TITLE: Setting Executable Permissions
DESCRIPTION: Commands to set executable permissions for the Docker Compose binary, with options for single-user and all-users installation.

LANGUAGE: console
CODE:
$ chmod +x $DOCKER_CONFIG/cli-plugins/docker-compose

# For all users:
$ sudo chmod +x /usr/local/lib/docker/cli-plugins/docker-compose

----------------------------------------

TITLE: Passing Shell Environment Variables in Docker Compose
DESCRIPTION: Shows how to pass environment variables from the shell directly to containers without setting explicit values.

LANGUAGE: yaml
CODE:
web:
  environment:
    - DEBUG

----------------------------------------

TITLE: Creating Secrets for Nginx
DESCRIPTION: Create secrets for the Nginx TLS key, certificate, and configuration file.

LANGUAGE: console
CODE:
$ docker secret create site.key site.key
$ docker secret create site.crt site.crt
$ docker secret create site.conf site.conf

----------------------------------------

TITLE: Starting Services with Complex Profile Dependencies
DESCRIPTION: These console commands demonstrate starting services with complex profile dependencies. It shows how to handle cases where dependent services have different profiles.

LANGUAGE: console
CODE:
# Only start "web"
$ docker compose up -d

# Start mock-backend (and, if necessary, db)
# by implicitly enabling profiles `dev`
$ docker compose up -d mock-backend

# This fails because profiles "dev" is not enabled
$ docker compose up phpmyadmin

----------------------------------------

TITLE: HTML Comment for Source Code Reference
DESCRIPTION: HTML comment indicating that the page content is auto-generated and directing contributors to the source repository for content changes.

LANGUAGE: html
CODE:
<!--
Sorry, but the contents of this page are automatically generated from
Docker's source code. If you want to suggest a change to the text that appears
here, you'll need to find the string by searching this repo:
https://github.com/docker/compose
-->

----------------------------------------

TITLE: Docker Compose Override Configuration
DESCRIPTION: Demonstrates how to use compose.override.yaml to modify services from included files with custom ports and volumes.

LANGUAGE: yaml
CODE:
services:
  service-1:
    # override included service-1 to enable debugger port
    ports:
      - 2345:2345

  service-2:
    # override included service-2 to use local data folder containing test data
    volumes:
      - ./data:/data

----------------------------------------

TITLE: Configuring Docker CLI for OpenTelemetry Export
DESCRIPTION: Sets the environment variable to configure Docker CLI to export telemetry data to the OpenTelemetry collector.

LANGUAGE: bash
CODE:
$ export DOCKER_CLI_OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317

----------------------------------------

TITLE: Pushing Generic OCI Artifact to Docker Hub
DESCRIPTION: Commands to create and push a generic artifact file to Docker Hub. Requires ORAS CLI version 0.15 or later.

LANGUAGE: console
CODE:
$ touch myartifact.txt

LANGUAGE: console
CODE:
$ oras login -u hubuser registry-1.docker.io

LANGUAGE: console
CODE:
$ oras push registry-1.docker.io/docker/demo:0.0.1 myartifact.txt:text/plain

----------------------------------------

TITLE: Installing Docker Desktop Package on Arch Linux
DESCRIPTION: Command to install the Docker Desktop package using pacman package manager. Installs the package to the default location at /opt/docker-desktop.

LANGUAGE: bash
CODE:
sudo pacman -U ./docker-desktop-x86_64.pkg.tar.zst

----------------------------------------

TITLE: Initial Docker TLS Setup Commands
DESCRIPTION: Commands to clone the Docker repository and generate TLS certificates using boot2docker environment.

LANGUAGE: bash
CODE:
$ boot2docker ssh
root@boot2docker:/# git clone https://github.com/moby/moby
root@boot2docker:/# cd docker/docs/articles/https
root@boot2docker:/# make cert

----------------------------------------

TITLE: Configuring Docker Daemon for Prometheus Metrics in JSON
DESCRIPTION: This JSON configuration enables Docker to expose Prometheus-compatible metrics on port 9323 via the loopback interface. It should be added to the daemon.json file.

LANGUAGE: json
CODE:
{
  "metrics-addr": "127.0.0.1:9323"
}

----------------------------------------

TITLE: Adding Basic Docker Image Annotation
DESCRIPTION: Demonstrates how to add a simple annotation to a Docker image during build using the --annotation flag.

LANGUAGE: console
CODE:
$ docker build --push --annotation "foo=bar" .

----------------------------------------

TITLE: Docker Event Streaming
DESCRIPTION: Example of streaming Docker events with JSON formatting and filtering. Shows how to handle event parsing and output processing.

LANGUAGE: typescript
CODE:
await ddClient.docker.cli.exec(
  "events",
  ["--format", "{{ json . }}", "--filter", "container=my-container"],
  {
    stream: {
      onOutput(data) {
        if (data.stdout) {
          const event = JSON.parse(data.stdout);
          console.log(event);
        } else {
          console.log(data.stderr);
        }
      },
      onClose(exitCode) {
        console.log("onClose with exit code " + exitCode);
      },
      splitOutputLines: true,
    },
  }
);

----------------------------------------

TITLE: Building Container Image with Docker Exporter
DESCRIPTION: Command to build a container image using the Docker exporter with optional parameters

LANGUAGE: console
CODE:
$ docker buildx build --output type=docker[,parameters] .

----------------------------------------

TITLE: Invoking Backend from React Frontend in Docker Extension
DESCRIPTION: A React component that uses the Docker Desktop Client to invoke the /hello route from the backend service and display the response.

LANGUAGE: tsx
CODE:
// ui/src/App.tsx
import React, { useEffect } from 'react';
import { createDockerDesktopClient } from "@docker/extension-api-client";

//obtain docker desktop extension client
const ddClient = createDockerDesktopClient();

export function App() {
  const ddClient = createDockerDesktopClient();
  const [hello, setHello] = useState<string>();

  useEffect(() => {
    const getHello = async () => {
      const result = await ddClient.extension.vm?.service?.get('/hello');
      setHello(JSON.stringify(result));
    }
    getHello()
  }, []);

  return (
    <Typography>{hello}</Typography>
  );
}

----------------------------------------

TITLE: Overriding CMD and ENTRYPOINT in Docker Compose
DESCRIPTION: This YAML snippet shows how to override the default CMD and ENTRYPOINT for a Postgres container in a Docker Compose file.

LANGUAGE: yaml
CODE:
services:
  postgres:
    image: postgres
    entrypoint: ["docker-entrypoint.sh", "postgres"]
    command: ["-h", "localhost", "-p", "5432"]
    environment:
      POSTGRES_PASSWORD: secret

----------------------------------------

TITLE: Stopping Specific Profiles with Docker Compose
DESCRIPTION: These commands demonstrate how to stop services associated with specific profiles using the Docker Compose CLI. It shows using both the --profile option and the COMPOSE_PROFILES environment variable.

LANGUAGE: console
CODE:
$ docker compose --profile debug down
$ COMPOSE_PROFILES=debug docker compose down

----------------------------------------

TITLE: Draining a Manager Node in Docker Swarm
DESCRIPTION: Command to drain a manager node, making it unavailable for tasks while maintaining its manager role. This helps prevent resource contention on manager nodes.

LANGUAGE: bash
CODE:
docker node update --availability drain <NODE>

----------------------------------------

TITLE: Viewing Task States in Docker Swarm using Command Line
DESCRIPTION: This snippet demonstrates how to use the 'docker service ps' command to view the current state of tasks for a specific service in Docker Swarm. It shows the task ID, name, image, node, desired state, current state, error messages, and ports.

LANGUAGE: console
CODE:
$ docker service ps webserver
ID             NAME              IMAGE    NODE        DESIRED STATE  CURRENT STATE            ERROR                              PORTS
owsz0yp6z375   webserver.1       nginx    UbuntuVM    Running        Running 44 seconds ago
j91iahr8s74p    \_ webserver.1   nginx    UbuntuVM    Shutdown       Failed 50 seconds ago    "No such container: webserver.…"
7dyaszg13mw2    \_ webserver.1   nginx    UbuntuVM    Shutdown       Failed 5 hours ago       "No such container: webserver.…"

----------------------------------------

TITLE: Creating Docker Build Attestations
DESCRIPTION: Command syntax for generating SBOM and provenance attestations during Docker image builds. These attestations provide detailed metadata about image contents and build processes.

LANGUAGE: bash
CODE:
docker buildx build --provenance --sbom

----------------------------------------

TITLE: Core Docker Extension CLI Commands
DESCRIPTION: Essential command-line interface commands for managing Docker extensions, including commands for enabling/disabling extensions, development operations, installation, listing, removal, updates, and validation.

LANGUAGE: bash
CODE:
docker extension enable

LANGUAGE: bash
CODE:
docker extension dev

LANGUAGE: bash
CODE:
docker extension disable

LANGUAGE: bash
CODE:
docker extension init

LANGUAGE: bash
CODE:
docker extension install

LANGUAGE: bash
CODE:
docker extension ls

LANGUAGE: bash
CODE:
docker extension rm

LANGUAGE: bash
CODE:
docker extension update

LANGUAGE: bash
CODE:
docker extension validate

----------------------------------------

TITLE: Installing Docker Compose on Linux - Download and Setup
DESCRIPTION: Commands to download Docker Compose binary and set proper permissions on Linux systems. Includes steps for downloading the binary, setting executable permissions, and creating an optional symbolic link for system-wide access.

LANGUAGE: console
CODE:
$ curl -SL https://github.com/docker/compose/releases/download/{{% param "compose_version" %}}/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose

LANGUAGE: console
CODE:
$ chmod +x /usr/local/bin/docker-compose

LANGUAGE: console
CODE:
$ sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose

----------------------------------------

TITLE: Multiple Exporters Usage
DESCRIPTION: Example demonstrating how to use multiple exporters in a single build command

LANGUAGE: console
CODE:
$ docker buildx build \
  --output type=registry,tag=<registry>/<image> \
  --output type=local,dest=<path/to/output> \
  --load .

----------------------------------------

TITLE: Extension Metadata Configuration
DESCRIPTION: JSON configuration in metadata.json to specify host binary locations for different platforms

LANGUAGE: json
CODE:
{
  "vm": {
    ...
  },
  "ui": {
    ...
  },
  "host": {
    "binaries": [
      {
        "darwin": [
          {
            "path": "/darwin/hello.sh"
          }
        ],
        "linux": [
          {
            "path": "/linux/hello.sh"
          }
        ],
        "windows": [
          {
            "path": "/windows/hello.cmd"
          }
        ]
      }
    ]
  }
}

----------------------------------------

TITLE: Docker Run Command with Custom GCP Project Settings
DESCRIPTION: Example of running a Docker container with gcplogs driver configured for use outside Google Cloud, specifying project, zone, and instance name.

LANGUAGE: console
CODE:
$ docker run \
    --log-driver=gcplogs \
    --log-opt gcp-project=test-project \
    --log-opt gcp-meta-zone=west1 \
    --log-opt gcp-meta-name=`hostname` \
    your/application

----------------------------------------

TITLE: Opening External Browser for OAuth 2.0 Authentication in Docker Extension
DESCRIPTION: This snippet demonstrates how to use the ddClient.host.openExternal API to open a browser window for user authentication. It constructs the authorization URL with necessary parameters like response_type, client_id, and redirect_uri.

LANGUAGE: typescript
CODE:
window.ddClient.openExternal("https://authorization-server.com/authorize?\n  response_type=code\n  &client_id=T70hJ3ls5VTYG8ylX3CZsfIu\n  &redirect_uri=${REDIRECT_URI});

----------------------------------------

TITLE: Cloud Provider Extensions Example
DESCRIPTION: Shows how to use extensions for cloud-specific deployment configurations.

LANGUAGE: yaml
CODE:
service:
  backend:
    deploy:
      placement:
        x-aws-role: "arn:aws:iam::XXXXXXXXXXXX:role/foo"
        x-aws-region: "eu-west-3"
        x-azure-region: "france-central"

----------------------------------------

TITLE: Updating Node Availability in Docker Swarm
DESCRIPTION: Command to change a node's availability status to drain, which prevents it from receiving new tasks and moves existing tasks to other nodes.

LANGUAGE: console
CODE:
$ docker node update --availability drain node-1

node-1

----------------------------------------

TITLE: Docker Compose Configuration for JupyterLab
DESCRIPTION: Docker Compose configuration for running JupyterLab with volume mounting and port mapping.

LANGUAGE: yaml
CODE:
services:
  jupyter:
    build:
      context: .
    ports:
      - 8889:8888
    volumes:
      - jupyter-data:/home/jovyan/work
    command: start-notebook.py --NotebookApp.token='my-token'

volumes:
  jupyter-data:
    name: jupyter-data

----------------------------------------

TITLE: Docker Run Command with Read-Write Permissions
DESCRIPTION: Example showing how to grant read-write permissions when creating a bind mount.

LANGUAGE: console
CODE:
$ docker run -v HOST-DIRECTORY:/CONTAINER-DIRECTORY:rw nginx

----------------------------------------

TITLE: Setting OCI Annotations in Build Output
DESCRIPTION: Example command showing how to set OCI annotations when building an image with either exporter type

LANGUAGE: console
CODE:
$ docker buildx build \
    --output "type=<type>,name=<registry>/<image>,annotation.org.opencontainers.image.title=<title>" .

----------------------------------------

TITLE: Project Structure for Laravel Docker Setup
DESCRIPTION: Illustrates the directory structure for a Laravel project with Docker configurations, including separate directories for development and production environments.

LANGUAGE: plaintext
CODE:
my-laravel-app/
├── app/
├── bootstrap/
├── config/
├── database/
├── public/
├── docker/
│   ├── common/
│   │   └── php-fpm/
│   │       └── Dockerfile
│   ├── development/
│   ├── production/
│   │   ├── php-fpm/
│   │   │   └── entrypoint.sh
│   │   └── nginx
│   │       ├── Dockerfile
│   │       └── nginx.conf
├── compose.dev.yaml
├── compose.prod.yaml
├── .dockerignore
├── .env
├── vendor/
├── ...

----------------------------------------

TITLE: Configuring Deployment Modes in Docker Compose
DESCRIPTION: Illustrates different deployment modes including global, replicated-job, and global-job configurations for various service types.

LANGUAGE: yaml
CODE:
services:
  frontend:
    image: example/webapp
    deploy:
      mode: global

  batch-job:
    image: example/processor
    deploy:
      mode: replicated-job
      replicas: 5

  maintenance:
    image: example/updater
    deploy:
      mode: global-job

----------------------------------------

TITLE: GitHub Actions Workflow with SSH Setup
DESCRIPTION: Workflow configuration that sets up SSH authentication for Docker builds, enabling access to private repositories during the build process.

LANGUAGE: yaml
CODE:
name: ci

on:
  push:

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Set up SSH
        uses: MrSquaare/ssh-setup-action@2d028b70b5e397cf8314c6eaea229a6c3e34977a # v3.1.0
        with:
          host: github.com
          private-key: ${{ secrets.SSH_GITHUB_PPK }}
          private-key-name: github-ppk

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          ssh: default
          push: true
          tags: user/app:latest

----------------------------------------

TITLE: Analyzing Registry Docker Image with Scout
DESCRIPTION: Shows how to use the 'registry://' prefix with 'docker scout cves' to force analysis of the registry version of an image, bypassing any local copies.

LANGUAGE: console
CODE:
$ docker scout cves registry://<image>

----------------------------------------

TITLE: Streaming Docker Command Output
DESCRIPTION: Implementation of streaming Docker command output with event handlers for stdout, stderr, errors, and process closure. Includes example for container log streaming and handling process termination.

LANGUAGE: typescript
CODE:
await ddClient.docker.cli.exec("logs", ["-f", "..."], {
  stream: {
    onOutput(data) {
      if (data.stdout) {
        console.error(data.stdout);
      } else {
        console.log(data.stderr);
      }
    },
    onError(error) {
      console.error(error);
    },
    onClose(exitCode) {
      console.log("onClose with exit code " + exitCode);
    },
    splitOutputLines: true,
  },
});

----------------------------------------

TITLE: Checking Current Docker Storage Driver
DESCRIPTION: Command to display the current storage driver configuration using docker info command. Shows storage driver type and backing filesystem information.

LANGUAGE: bash
CODE:
$ docker info

Containers: 0
Images: 0
Storage Driver: overlay2
 Backing Filesystem: xfs
<...>

----------------------------------------

TITLE: Performing HEAD Request with Docker Extension HttpService in TypeScript
DESCRIPTION: Illustrates how to perform an HTTP HEAD request to a backend service using the Docker extension API. This method accepts a URL and returns a Promise that resolves to the response data.

LANGUAGE: typescript
CODE:
ddClient.extension.vm.service
 .head("/some/service")
 .then((value: any) => console.log(value));

----------------------------------------

TITLE: Exchanging Authorization Code for Access Token in Docker Extension
DESCRIPTION: This snippet shows the structure of a POST request to exchange the authorization code for an access token. It includes parameters such as client_id, client_secret, redirect_uri, and the authorization code.

LANGUAGE: text
CODE:
POST https://authorization-server.com/token\n&client_id=T70hJ3ls5VTYG8ylX3CZsfIu\n&client_secret=YABbyHQShPeO1T3NDQZP8q5m3Jpb_UPNmIzqhLDCScSnRyVG\n&redirect_uri=${REDIRECT_URI}\n&code=N949tDLuf9ai_DaOKyuFBXStCNMQzuQbtC1QbvLv-AXqPJ_f

----------------------------------------

TITLE: Advanced Docker Mount Command
DESCRIPTION: Example of using the --mount flag for more granular control over bind mounting with readonly option.

LANGUAGE: console
CODE:
$ docker run --mount type=bind,source=/HOST/PATH,target=/CONTAINER/PATH,readonly nginx

----------------------------------------

TITLE: Configuring Shim with Options in Daemon JSON
DESCRIPTION: Extended JSON configuration for a containerd shim with additional runtime options

LANGUAGE: json
CODE:
{
  "runtimes": {
    "gvisor": {
      "runtimeType": "io.containerd.runsc.v1",
      "options": {
        "TypeUrl": "io.containerd.runsc.v1.options",
        "ConfigPath": "/etc/containerd/runsc.toml"
      }
    }
  }
}

----------------------------------------

TITLE: Using SBOM Files with Docker Scout GitHub Action
DESCRIPTION: Demonstrates how to use SBOM files in SPDX or in-toto SPDX format with the Docker Scout GitHub Action.

LANGUAGE: yaml
CODE:
uses: docker/scout-action@v1
with:
    command: cves
    image: sbom://alpine.spdx.json

----------------------------------------

TITLE: Deploying Node.js Application to Kubernetes
DESCRIPTION: These shell commands demonstrate how to deploy the Node.js application to Kubernetes using kubectl. It includes applying the YAML file, checking deployments and services, and deleting the application.

LANGUAGE: shell
CODE:
$ kubectl apply -f docker-node-kubernetes.yaml
$ kubectl get deployments
$ kubectl get services
$ kubectl delete -f docker-node-kubernetes.yaml

----------------------------------------

TITLE: Leaving and Removing Nodes from Docker Swarm
DESCRIPTION: Commands to remove a node from the swarm and subsequently remove it from the node list.

LANGUAGE: console
CODE:
$ docker swarm leave

Node left the swarm.

$ docker node rm node-2

----------------------------------------

TITLE: Docker Daemon JSON Configuration
DESCRIPTION: Example configuration in daemon.json for setting json-file as the default logging driver with log rotation options. Demonstrates setting max file size and number of log files.

LANGUAGE: json
CODE:
{
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "10m",
    "max-file": "3"
  }
}

----------------------------------------

TITLE: Basic GPU Access Configuration in Docker Compose
DESCRIPTION: Example compose.yaml configuration that enables access to a single GPU device using the NVIDIA driver. The service runs nvidia-smi command to verify GPU access.

LANGUAGE: yaml
CODE:
services:
  test:
    image: nvidia/cuda:12.3.1-base-ubuntu20.04
    command: nvidia-smi
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

----------------------------------------

TITLE: Exporting Image Layout to File
DESCRIPTION: Example showing how to export build results to OCI image layout format with filesystem structure

LANGUAGE: console
CODE:
$ docker buildx build --output type=oci,dest=./image.tar .
[+] Building 0.8s (7/7) FINISHED
 ...
 => exporting to oci image format                                                                     0.0s
 => exporting layers                                                                                  0.0s
 => exporting manifest sha256:c1ef01a0a0ef94a7064d5cbce408075730410060e253ff8525d1e5f7e27bc900        0.0s
 => exporting config sha256:eadab326c1866dd247efb52cb715ba742bd0f05b6a205439f107cf91b3abc853          0.0s
 => sending tarball                                                                                   0.0s

----------------------------------------

TITLE: Opening File Dialog in Docker Extensions
DESCRIPTION: Demonstrates how to open a file selector dialog using the Docker Desktop UI API. Supports customization through dialog properties and handles user selection results.

LANGUAGE: typescript
CODE:
const result = await ddClient.desktopUI.dialog.showOpenDialog({
  properties: ["openDirectory"],
});
if (!result.canceled) {
  console.log(result.paths);
}

----------------------------------------

TITLE: Label Interpolation Non-Working Example in Docker Compose
DESCRIPTION: Shows an example where variable interpolation does not work in label keys due to YAML structure limitations.

LANGUAGE: yaml
CODE:
services:
  foo:
    labels:
      "$VAR_NOT_INTERPOLATED_BY_COMPOSE": "BAR"

----------------------------------------

TITLE: Stopping All Running Containers using Docker SDKs and API
DESCRIPTION: This example shows how to stop all running containers using the Docker Go SDK, Python SDK, and HTTP API. It retrieves a list of containers and stops each one.

LANGUAGE: Go
CODE:
package main

import (
	"context"
	"fmt"

	containertypes "github.com/docker/docker/api/types/container"
	"github.com/docker/docker/client"
)

func main() {
	ctx := context.Background()
	cli, err := client.NewClientWithOpts(client.FromEnv, client.WithAPIVersionNegotiation())
	if err != nil {
		panic(err)
	}
	defer cli.Close()

	containers, err := cli.ContainerList(ctx, containertypes.ListOptions{})
	if err != nil {
		panic(err)
	}

	for _, container := range containers {
		fmt.Print("Stopping container ", container.ID[:10], "... ")
		noWaitTimeout := 0 // to not wait for the container to exit gracefully
		if err := cli.ContainerStop(ctx, container.ID, containertypes.StopOptions{Timeout: &noWaitTimeout}); err != nil {
			panic(err)
		}
		fmt.Println("Success")
	}
}

LANGUAGE: Python
CODE:
import docker
client = docker.from_env()
for container in client.containers.list():
  container.stop()

LANGUAGE: HTTP
CODE:
$ curl --unix-socket /var/run/docker.sock http://localhost/v{{% param "latest_engine_api_version" %}}/containers/json
[{
  "Id":"ae63e8b89a26f01f6b4b2c9a7817c31a1b6196acf560f66586fbc8809ffcd772",
  "Names":["/tender_wing"],
  "Image":"bfirsh/reticulate-splines",
  ...
}]

$ curl --unix-socket /var/run/docker.sock \
  -X POST http://localhost/v{{% param "latest_engine_api_version" %}}/containers/ae63e8b89a26/stop

----------------------------------------

TITLE: Multiple Extensions with YAML Merge
DESCRIPTION: Demonstrates using multiple extensions with YAML merge to combine and override configurations.

LANGUAGE: yaml
CODE:
x-environment: &default-environment
  FOO: BAR
  ZOT: QUIX
x-keys: &keys
  KEY: VALUE
services:
  frontend:
    image: example/webapp
    environment: 
      << : [*default-environment, *keys]
      YET_ANOTHER: VARIABLE

----------------------------------------

TITLE: Initializing Swarm with Custom Address Pool
DESCRIPTION: Initializes a Docker swarm with custom address pool configurations for network allocation.

LANGUAGE: console
CODE:
$ docker swarm init --default-addr-pool 10.20.0.0/16 --default-addr-pool-mask-length 26

----------------------------------------

TITLE: Using Expressions with Variables in Docker Bake HCL
DESCRIPTION: This snippet demonstrates how to use expressions with variables in a Docker Bake HCL file. It sets build arguments based on variable values using conditional expressions.

LANGUAGE: hcl
CODE:
variable "FOO" {
  default = 3
}

variable "IS_FOO" {
  default = true
}

target "app" {
  args = {
    v1 = FOO > 5 ? "higher" : "lower"
    v2 = IS_FOO ? "yes" : "no"
  }
}

----------------------------------------

TITLE: Overriding CMD and ENTRYPOINT with Docker Run
DESCRIPTION: This command demonstrates how to override the default CMD and ENTRYPOINT for a Postgres container using the `docker run` command.

LANGUAGE: console
CODE:
$ docker run -e POSTGRES_PASSWORD=secret postgres docker-entrypoint.sh -h localhost -p 5432

----------------------------------------

TITLE: SBOM Attestation JSON Structure
DESCRIPTION: Shows a truncated example of an SBOM attestation in the in-toto JSON format, including subject, predicate, files, packages, and relationships.

LANGUAGE: json
CODE:
{
  "_type": "https://in-toto.io/Statement/v0.1",
  "predicateType": "https://spdx.dev/Document",
  "subject": [
    {
      "name": "pkg:docker/<registry>/<image>@<tag/digest>?platform=<platform>",
      "digest": {
        "sha256": "e8275b2b76280af67e26f068e5d585eb905f8dfd2f1918b3229db98133cb4862"
      }
    }
  ],
  "predicate": {
    "SPDXID": "SPDXRef-DOCUMENT",
    "creationInfo": {
      "created": "2022-12-15T11:47:54.546747383Z",
      "creators": ["Organization: Anchore, Inc", "Tool: syft-v0.60.3"],
      "licenseListVersion": "3.18"
    },
    "dataLicense": "CC0-1.0",
    "documentNamespace": "https://anchore.com/syft/dir/run/src/core-da0f600b-7f0a-4de0-8432-f83703e6bc4f",
    "name": "/run/src/core",
    "files": [
      {
        "SPDXID": "SPDXRef-1ac501c94e2f9f81",
        "comment": "layerID: sha256:9b18e9b68314027565b90ff6189d65942c0f7986da80df008b8431276885218e",
        "fileName": "/bin/busybox",
        "licenseConcluded": "NOASSERTION"
      }
    ],
    "packages": [
      {
        "name": "busybox",
        "originator": "Person: Sören Tempel <soeren+alpine@soeren-tempel.net>",
        "sourceInfo": "acquired package info from APK DB: lib/apk/db/installed",
        "versionInfo": "1.35.0-r17",
        "SPDXID": "SPDXRef-980737451f148c56",
        "description": "Size optimized toolbox of many common UNIX utilities",
        "downloadLocation": "https://busybox.net/",
        "licenseConcluded": "GPL-2.0-only",
        "licenseDeclared": "GPL-2.0-only"
      }
    ],
    "relationships": [
      {
        "relatedSpdxElement": "SPDXRef-1ac501c94e2f9f81",
        "relationshipType": "CONTAINS",
        "spdxElementId": "SPDXRef-980737451f148c56"
      }
    ],
    "spdxVersion": "SPDX-2.2"
  }
}

----------------------------------------

TITLE: Deploying Java Application to Kubernetes
DESCRIPTION: This shell command applies the Kubernetes YAML file to create the Deployment and Service objects in the local Kubernetes cluster.

LANGUAGE: shell
CODE:
$ kubectl apply -f docker-java-kubernetes.yaml

----------------------------------------

TITLE: Backing up Docker Data
DESCRIPTION: Command to create a backup copy of the Docker data directory

LANGUAGE: bash
CODE:
$ cp -au /var/lib/docker /var/lib/docker.bk

----------------------------------------

TITLE: Creating Macvlan Network in 802.1Q Trunk Bridge Mode
DESCRIPTION: Configures a Macvlan network using 802.1Q sub-interface for more granular routing and filtering control.

LANGUAGE: bash
CODE:
docker network create -d macvlan \
    --subnet=192.168.50.0/24 \
    --gateway=192.168.50.1 \
    -o parent=eth0.50 macvlan50

----------------------------------------

TITLE: Installing Docker Compose on Ubuntu/Debian
DESCRIPTION: Commands to update package index and install Docker Compose plugin on Ubuntu and Debian-based systems.

LANGUAGE: console
CODE:
$ sudo apt-get update
$ sudo apt-get install docker-compose-plugin

----------------------------------------

TITLE: Removing a Docker Service
DESCRIPTION: This command removes the 'helloworld' service from the Docker swarm. It uses the 'docker service rm' command followed by the service name.

LANGUAGE: bash
CODE:
$ docker service rm helloworld

helloworld

----------------------------------------

TITLE: Using Named Contexts with Container Builder in GitHub Actions
DESCRIPTION: This snippet demonstrates how to use named contexts with a container builder in GitHub Actions. It sets up a local registry service, builds a base image, pushes it to the local registry, and then uses it as a named context in a subsequent build.

LANGUAGE: dockerfile
CODE:
# syntax=docker/dockerfile:1
FROM alpine
RUN echo "Hello World"

LANGUAGE: yaml
CODE:
name: ci

on:
  push:

jobs:
  docker:
    runs-on: ubuntu-latest
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          # network=host driver-opt needed to push to local registry
          driver-opts: network=host

      - name: Build base image
        uses: docker/build-push-action@v6
        with:
          context: "{{defaultContext}}:base"
          tags: localhost:5000/my-base-image:latest
          push: true

      - name: Build
        uses: docker/build-push-action@v6
        with:
          build-contexts: |
            alpine=docker-image://localhost:5000/my-base-image:latest
          tags: myimage:latest

----------------------------------------

TITLE: Viewing Basic SBOM Output with Docker Scout CLI
DESCRIPTION: Basic command to view SBOM information for a Docker image using the docker scout sbom command. Outputs in default JSON format.

LANGUAGE: console
CODE:
docker scout sbom [IMAGE]

----------------------------------------

TITLE: Systemd Service Configuration for GCP Credentials
DESCRIPTION: Systemd service configuration example showing how to set Google application credentials for the Docker daemon.

LANGUAGE: ini
CODE:
[Service]
Environment="GOOGLE_APPLICATION_CREDENTIALS=uQWVCPkMTI34bpssr1HI"

----------------------------------------

TITLE: Debugging Docker Format Data
DESCRIPTION: Shows how to display all available data fields in JSON format for formatting purposes.

LANGUAGE: console
CODE:
$ docker container ls --format='{{json .}}'

----------------------------------------

TITLE: Basic Docker Daemon CloudWatch Configuration
DESCRIPTION: Configuration in daemon.json to set awslogs as the default logging driver with region specification.

LANGUAGE: json
CODE:
{
  "log-driver": "awslogs",
  "log-opts": {
    "awslogs-region": "us-east-1"
  }
}

----------------------------------------

TITLE: Defining VM Section with Image in Docker Extension Metadata
DESCRIPTION: This snippet shows how to configure the VM section using an image. It uses the ${DESKTOP_PLUGIN_IMAGE} variable to refer to the image packaging the extension.

LANGUAGE: json
CODE:
"vm": {
    "image":"${DESKTOP_PLUGIN_IMAGE}"
},

----------------------------------------

TITLE: Installing Node.js in Container
DESCRIPTION: Commands to update package repository and install Node.js in the container.

LANGUAGE: console
CODE:
$ apt update && apt install -y nodejs

----------------------------------------

TITLE: Dockerfile with Skip Checks Configuration
DESCRIPTION: Example Dockerfile that demonstrates how to skip specific build checks using the check directive.

LANGUAGE: dockerfile
CODE:
# syntax=docker/dockerfile:1
# check=skip=JSONArgsRecommended,StageNameCasing

FROM alpine AS BASE_STAGE
CMD echo "Hello, world!"

----------------------------------------

TITLE: Defining Docker ExtensionCli Interface in TypeScript
DESCRIPTION: TypeScript interface definition for Docker extension CLI functionality. It contains a single property 'exec' that references the Exec interface type.

LANGUAGE: typescript
CODE:
interface ExtensionCli {
    exec: Exec;
}

----------------------------------------

TITLE: Running Deno Application with Compose Watch
DESCRIPTION: This command starts the Deno application using Docker Compose with the watch feature enabled for real-time updates.

LANGUAGE: console
CODE:
$ docker compose watch

----------------------------------------

TITLE: Configuring Dockerfile for React-based Docker Desktop Extension
DESCRIPTION: This Dockerfile sets up a build environment for a React-based Docker Desktop extension. It uses a multi-stage build to compile the frontend assets and then creates the final extension image with the necessary labels and files.

LANGUAGE: dockerfile
CODE:
# syntax=docker/dockerfile:1
FROM --platform=$BUILDPLATFORM node:18.9-alpine3.15 AS client-builder
WORKDIR /ui
# cache packages in layer
COPY ui/package.json /ui/package.json
COPY ui/package-lock.json /ui/package-lock.json
RUN --mount=type=cache,target=/usr/src/app/.npm \
    npm set cache /usr/src/app/.npm && \
    npm ci
# install
COPY ui /ui
RUN npm run build

FROM alpine
LABEL org.opencontainers.image.title="My extension" \
    org.opencontainers.image.description="Your Desktop Extension Description" \
    org.opencontainers.image.vendor="Awesome Inc." \
    com.docker.desktop.extension.api.version="0.3.3" \
    com.docker.desktop.extension.icon="https://www.docker.com/wp-content/uploads/2022/03/Moby-logo.png" \
    com.docker.extension.screenshots="" \
    com.docker.extension.detailed-description="" \
    com.docker.extension.publisher-url="" \
    com.docker.extension.additional-urls="" \
    com.docker.extension.changelog=""

COPY metadata.json .
COPY docker.svg .
COPY --from=client-builder /ui/build ui

----------------------------------------

TITLE: Starting Multiple Profiles with Docker Compose
DESCRIPTION: This snippet shows how to enable multiple profiles simultaneously using the Docker Compose CLI. It demonstrates using multiple --profile flags and comma-separated COMPOSE_PROFILES values.

LANGUAGE: console
CODE:
$ docker compose --profile frontend --profile debug up
$ COMPOSE_PROFILES=frontend,debug docker compose up

----------------------------------------

TITLE: Docker CLI Login with Organization Access Token
DESCRIPTION: Command to authenticate with Docker CLI using an organization access token. Users must replace YOUR_ORG with their organization name and use the OAT as the password when prompted.

LANGUAGE: console
CODE:
$ docker login --username <YOUR_ORG>

----------------------------------------

TITLE: Tagging Docker Image for Organization Repository
DESCRIPTION: Command to tag a Docker image with an organization namespace, preparing it for transfer from a personal to an organization repository.

LANGUAGE: console
CODE:
$ docker tag namespace1/docker101tutorial <new_org>/docker101tutorial

----------------------------------------

TITLE: Valid Empty ARG Usage in FROM Statement (Dockerfile)
DESCRIPTION: This example illustrates a valid use of an ARG that can be empty, as the resulting image reference would still be valid without it.

LANGUAGE: dockerfile
CODE:
ARG VARIANT
FROM busybox:stable${VARIANT}

----------------------------------------

TITLE: Checking Kernel Config for Docker Requirements
DESCRIPTION: A bash script to check if the kernel is configured correctly for Docker.

LANGUAGE: bash
CODE:
#!/bin/bash

config=$(cat /proc/config.gz | gunzip)

echo "--- Namespaces ---"
echo " $(grep CONFIG_NAMESPACES=y $config || echo MISSING)"
echo " $(grep CONFIG_UTS_NS=y $config || echo MISSING)"
echo " $(grep CONFIG_IPC_NS=y $config || echo MISSING)"
echo " $(grep CONFIG_PID_NS=y $config || echo MISSING)"
echo " $(grep CONFIG_NET_NS=y $config || echo MISSING)"


----------------------------------------

TITLE: Configuring Proxy Settings with NO_PROXY in Docker Systemd Service File
DESCRIPTION: This systemd configuration snippet shows how to set HTTP_PROXY, HTTPS_PROXY, and NO_PROXY environment variables for the Docker service, including exceptions for internal registries.

LANGUAGE: systemd
CODE:
[Service]
Environment="HTTP_PROXY=http://proxy.example.com:3128"
Environment="HTTPS_PROXY=https://proxy.example.com:3129"
Environment="NO_PROXY=localhost,127.0.0.1,docker-registry.example.com,.corp"

----------------------------------------

TITLE: Creating VEX Document with vexctl CLI
DESCRIPTION: Example command using vexctl to create a VEX document for a Docker image, specifying vulnerability details and status.

LANGUAGE: bash
CODE:
vexctl create \
  --author="author@example.com" \
  --product="pkg:docker/example/app@v1" \
  --subcomponents="pkg:npm/express@4.17.1" \
  --vuln="CVE-2022-24999" \
  --status="not_affected" \
  --justification="vulnerable_code_not_in_execute_path" \
  --file="CVE-2022-24999.vex.json"

----------------------------------------

TITLE: Configuring Nginx with Docker Configs and Secrets
DESCRIPTION: Advanced example showing how to use Docker configs and secrets to configure an Nginx service with HTTPS.

LANGUAGE: bash
CODE:
docker secret create site.key site.key
docker secret create site.crt site.crt
docker config create site.conf site.conf

docker service create \
     --name nginx \
     --secret site.key \
     --secret site.crt \
     --config source=site.conf,target=/etc/nginx/conf.d/site.conf,mode=0440 \
     --publish published=3000,target=443 \
     nginx:latest \
     sh -c "exec nginx -g 'daemon off;'"

----------------------------------------

TITLE: Docker Run Command
DESCRIPTION: Command to run the application container interactively

LANGUAGE: console
CODE:
$ docker run -it basic-nlp 04_text_summarization.py

----------------------------------------

TITLE: Implementing React Component for Docker Desktop Extension
DESCRIPTION: This React component uses the Docker Desktop Extension API client to fetch and display a list of containers. It demonstrates how to interact with Docker CLI and present the results in a table format.

LANGUAGE: typescript
CODE:
// ui/src/App.tsx
import React, { useEffect } from 'react';
import {
  Paper,
  Stack,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Typography
} from "@mui/material";
import { createDockerDesktopClient } from "@docker/extension-api-client";

//obtain docker desktop extension client
const ddClient = createDockerDesktopClient();

export function App() {
  const [containers, setContainers] = React.useState<any[]>([]);

  useEffect(() => {
    // List all containers
    ddClient.docker.cli.exec('ps', ['--all', '--format', '"{{json .}}"']).then((result) => {
      // result.parseJsonLines() parses the output of the command into an array of objects
      setContainers(result.parseJsonLines());
    });
  }, []);

  return (
    <Stack>
      <Typography data-testid="heading" variant="h3" role="title">
        Container list
      </Typography>
      <Typography
      data-testid="subheading"
      variant="body1"
      color="text.secondary"
      sx={{ mt: 2 }}
    >
      Simple list of containers using Docker Extensions SDK.
      </Typography>
      <TableContainer sx={{mt:2}}>
        <Table>
          <TableHead>
            <TableRow>
              <TableCell>Container id</TableCell>
              <TableCell>Image</TableCell>
              <TableCell>Command</TableCell>
              <TableCell>Created</TableCell>
              <TableCell>Status</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {containers.map((container) => (
              <TableRow
                key={container.ID}
                sx={{ '&:last-child td, &:last-child th': { border: 0 } }}
              >
                <TableCell>{container.ID}</TableCell>
                <TableCell>{container.Image}</TableCell>
                <TableCell>{container.Command}</TableCell>
                <TableCell>{container.CreatedAt}</TableCell>
                <TableCell>{container.Status}</TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>
    </Stack>
  );
}

----------------------------------------

TITLE: Basic Nginx Configuration with TLS
DESCRIPTION: A simple Nginx configuration that serves static files over HTTPS using secrets for the TLS certificate and key.

LANGUAGE: nginx
CODE:
server {
    listen                443 ssl;
    server_name           localhost;
    ssl_certificate       /run/secrets/site.crt;
    ssl_certificate_key   /run/secrets/site.key;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }
}

----------------------------------------

TITLE: Running Docker Container with Default AppArmor Profile
DESCRIPTION: Command to run a container with the default docker-default AppArmor security profile explicitly specified.

LANGUAGE: console
CODE:
$ docker run --rm -it --security-opt apparmor=docker-default hello-world

----------------------------------------

TITLE: Dockerfile for PHP Application with Test Stage
DESCRIPTION: This Dockerfile sets up a multi-stage build for a PHP application, including stages for production and development dependencies, a base image, development environment, test execution, and a final production image.

LANGUAGE: dockerfile
CODE:
# syntax=docker/dockerfile:1

FROM composer:lts as prod-deps
WORKDIR /app
RUN --mount=type=bind,source=./composer.json,target=composer.json \
    --mount=type=bind,source=./composer.lock,target=composer.lock \
    --mount=type=cache,target=/tmp/cache \
    composer install --no-dev --no-interaction

FROM composer:lts as dev-deps
WORKDIR /app
RUN --mount=type=bind,source=./composer.json,target=composer.json \
    --mount=type=bind,source=./composer.lock,target=composer.lock \
    --mount=type=cache,target=/tmp/cache \
    composer install --no-interaction

FROM php:8.2-apache as base
RUN docker-php-ext-install pdo pdo_mysql
COPY ./src /var/www/html

FROM base as development
COPY ./tests /var/www/html/tests
RUN mv "$PHP_INI_DIR/php.ini-development" "$PHP_INI_DIR/php.ini"
COPY --from=dev-deps app/vendor/ /var/www/html/vendor

FROM development as test
WORKDIR /var/www/html
RUN ./vendor/bin/phpunit tests/HelloWorldTest.php

FROM base as final
RUN mv "$PHP_INI_DIR/php.ini-production" "$PHP_INI_DIR/php.ini"
COPY --from=prod-deps app/vendor/ /var/www/html/vendor
USER www-data

----------------------------------------

TITLE: Defining Vote Service Build Configuration in Compose
DESCRIPTION: YAML snippet showing the build configuration for the vote service in the Docker Compose file.

LANGUAGE: yaml
CODE:
services:
  vote:
    build:
      context: ./vote # Build context
      target: dev # Dockerfile stage

----------------------------------------

TITLE: Creating Prometheus Configuration in YAML
DESCRIPTION: This YAML configuration file sets up Prometheus to scrape metrics from itself and the Docker daemon. It defines global settings, rule files, and scrape configurations for both Prometheus and Docker targets.

LANGUAGE: yaml
CODE:
# my global config
global:
  scrape_interval: 15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.
  evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.
  # scrape_timeout is set to the global default (10s).

  # Attach these labels to any time series or alerts when communicating with
  # external systems (federation, remote storage, Alertmanager).
  external_labels:
    monitor: "codelab-monitor"

# Load rules once and periodically evaluate them according to the global 'evaluation_interval'.
rule_files:
  # - "first.rules"
  # - "second.rules"

# A scrape configuration containing exactly one endpoint to scrape:
# Here it's Prometheus itself.
scrape_configs:
  # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.
  - job_name: prometheus

    # metrics_path defaults to '/metrics'
    # scheme defaults to 'http'.

    static_configs:
      - targets: ["localhost:9090"]

  - job_name: docker
      # metrics_path defaults to '/metrics'
      # scheme defaults to 'http'.

    static_configs:
      - targets: ["host.docker.internal:9323"]

----------------------------------------

TITLE: GELF Logging Example with Alpine Container
DESCRIPTION: Example showing how to run an Alpine container with GELF logging configured to send logs to a specific GELF server address.

LANGUAGE: console
CODE:
$ docker run -dit \
    --log-driver=gelf \
    --log-opt gelf-address=udp://192.168.0.42:12201 \
    alpine sh

----------------------------------------

TITLE: Customizing Default Build Group in Bake
DESCRIPTION: HCL configuration to customize the default build group in the Bake file.

LANGUAGE: hcl
CODE:
group "default" {
  targets = ["vote", "result", "worker"]
}

----------------------------------------

TITLE: Connecting to Host Service from Docker Container
DESCRIPTION: Demonstrates how to connect to a service running on the host from within a Docker container using the host.docker.internal DNS name.

LANGUAGE: console
CODE:
$ docker run --rm -it alpine sh
# apk add curl
# curl http://host.docker.internal:8000
# exit

----------------------------------------

TITLE: Running Ollama LLM with GPU Support
DESCRIPTION: Shows how to run the Llama2 large language model using the Ollama Docker image with GPU support enabled. The example includes both container startup and model execution commands.

LANGUAGE: console
CODE:
docker run --gpus=all -d -v ollama:/root/.ollama -p 11434:11434 --name ollama ollama/ollama
docker exec -it ollama ollama run llama2

----------------------------------------

TITLE: Running Sentiment Analysis Application in Docker Container
DESCRIPTION: Docker command to run the sentiment analysis application in a container.

LANGUAGE: shell
CODE:
$ docker run -it basic-nlp 01_sentiment_analysis.py

----------------------------------------

TITLE: Pruning Multiple Docker Resources
DESCRIPTION: This command prunes stopped containers, unused networks, dangling images, and unused build cache. It prompts for confirmation before execution.

LANGUAGE: console
CODE:
$ docker system prune

WARNING! This will remove:
        - all stopped containers
        - all networks not used by at least one container
        - all dangling images
        - unused build cache

Are you sure you want to continue? [y/N] y

----------------------------------------

TITLE: Renaming Git Branch to 'main'
DESCRIPTION: Command to rename the current Git branch to 'main'.

LANGUAGE: console
CODE:
$ git branch -M main

----------------------------------------

TITLE: Handling SSL Certificate Verification
DESCRIPTION: Python code block to handle SSL certificate verification issues when downloading NLTK data.

LANGUAGE: python
CODE:
try:
    _create_unverified_https_context = ssl._create_unverified_context
except AttributeError:
    pass
else:
    ssl._create_default_https_context = _create_unverified_https_context

----------------------------------------

TITLE: Multi-stage Build for Java Application
DESCRIPTION: This Dockerfile demonstrates a multi-stage build for a Java application, separating the build environment from the runtime environment to reduce the final image size.

LANGUAGE: dockerfile
CODE:
# syntax=docker/dockerfile:1
FROM maven AS build
WORKDIR /app
COPY . .
RUN mvn package

FROM tomcat
COPY --from=build /app/target/file.war /usr/local/tomcat/webapps

----------------------------------------

TITLE: Checking Docker Hub Pull Rate Limits
DESCRIPTION: Command to retrieve headers containing pull rate limit information from Docker Hub using a previously obtained authentication token.

LANGUAGE: bash
CODE:
$ curl --head -H "Authorization: Bearer $TOKEN" https://registry-1.docker.io/v2/ratelimitpreview/test/manifests/latest

----------------------------------------

TITLE: Managing Docker Swarm Node Roles
DESCRIPTION: Commands to promote workers to managers and demote managers to workers while maintaining the swarm quorum.

LANGUAGE: console
CODE:
$ docker node promote node-3 node-2

Node node-3 promoted to a manager in the swarm.
Node node-2 promoted to a manager in the swarm.

$ docker node demote node-3 node-2

Manager node-3 demoted in the swarm.
Manager node-2 demoted in the swarm.

----------------------------------------

TITLE: Viewing Docker Swarm Information
DESCRIPTION: This command displays information about the current state of the Docker swarm, including the number of containers, swarm status, and node details.

LANGUAGE: console
CODE:
$ docker info

Containers: 2
Running: 0
Paused: 0
Stopped: 2
  ...snip...
Swarm: active
  NodeID: dxn1zf6l61qsb1josjja83ngz
  Is Manager: true
  Managers: 1
  Nodes: 1
  ...snip...

----------------------------------------

TITLE: Usage of docker dev rm Command
DESCRIPTION: Illustrates how to use the docker dev rm command to remove a specific dev environment.

LANGUAGE: bash
CODE:
docker dev rm DEV_ENV_NAME

----------------------------------------

TITLE: Running Multiple Postgres Instances with Docker
DESCRIPTION: These commands show how to start two Postgres containers with different port mappings to avoid conflicts.

LANGUAGE: console
CODE:
$ docker run -d -e POSTGRES_PASSWORD=secret -p 5432:5432 postgres
$ docker run -d -e POSTGRES_PASSWORD=secret -p 5433:5432 postgres

----------------------------------------

TITLE: Container Network Metrics Collection
DESCRIPTION: Script to collect network interface metrics from within a container's network namespace

LANGUAGE: console
CODE:
$ TASKS=/sys/fs/cgroup/devices/docker/$CID*/tasks
$ PID=$(head -n 1 $TASKS)
$ mkdir -p /var/run/netns
$ ln -sf /proc/$PID/ns/net /var/run/netns/$CID
$ ip netns exec $CID netstat -i

----------------------------------------

TITLE: Creating Service on Overlay Network
DESCRIPTION: Creates a service with multiple replicas and attaches it to an existing overlay network.

LANGUAGE: console
CODE:
$ docker service create \
  --replicas 3 \
  --name my-web \
  --network my-network \
  nginx

----------------------------------------

TITLE: Running Nginx Container with Port Mapping
DESCRIPTION: Command to pull and run the Nginx web server container with port 8080 mapped to container port 80.

LANGUAGE: console
CODE:
$ docker run -p 8080:80 --rm nginx

----------------------------------------

TITLE: GitHub Actions Workflow Configuration
DESCRIPTION: YAML configuration for GitHub Actions workflow that handles Docker image building and pushing to Docker Hub. Includes authentication, build setup, and multi-architecture image building.

LANGUAGE: yaml
CODE:
name: ci

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ vars.DOCKER_USERNAME }}/${{ github.event.repository.name }}:latest

----------------------------------------

TITLE: Deploying Application to Kubernetes
DESCRIPTION: Commands for deploying the application to Kubernetes using kubectl, including applying the configuration and verifying the deployment and service status.

LANGUAGE: console
CODE:
$ kubectl apply -f docker-ruby-on-rails-kubernetes.yaml

----------------------------------------

TITLE: Running Container with Volume Mount
DESCRIPTION: Starts a container with a volume mounted to persist todo app data at /etc/todos.

LANGUAGE: console
CODE:
$ docker run -dp 127.0.0.1:3000:3000 --mount type=volume,src=todo-db,target=/etc/todos getting-started

----------------------------------------

TITLE: Running Container with Host Networking
DESCRIPTION: Command to start a container with host networking enabled.

LANGUAGE: console
CODE:
$ docker run --rm -it --net=host nicolaka/netshoot

----------------------------------------

TITLE: Cache Invalidation for Specific Stage - Console
DESCRIPTION: Example showing how to invalidate cache for a specific build stage using --no-cache-filter option.

LANGUAGE: console
CODE:
$ docker build --no-cache-filter install .

----------------------------------------

TITLE: HTML Comment for Documentation Source
DESCRIPTION: HTML comment block indicating that the page is automatically generated and providing instructions for suggesting changes through GitHub.

LANGUAGE: html
CODE:
<!--
This page is automatically generated from Docker's source code. If you want to
suggest a change to the text that appears here, open a ticket or pull request
in the source repository on GitHub:

https://github.com/docker/cli
-->

----------------------------------------

TITLE: Installing Docker Compose on RPM-based Systems
DESCRIPTION: Commands to update package index and install Docker Compose plugin on RPM-based distributions like CentOS, RHEL, and Fedora.

LANGUAGE: console
CODE:
$ sudo yum update
$ sudo yum install docker-compose-plugin

----------------------------------------

TITLE: Pushing Tagged Docker Image to Repository
DESCRIPTION: This command demonstrates how to push a tagged Docker image to a repository on Docker Hub. It uses the docker push command followed by the fully qualified image name including the organization or user namespace, repository name, and tag.

LANGUAGE: console
CODE:
$ docker push <org-or-user-namespace>/<repo-name>:<tag>

----------------------------------------

TITLE: Listing Available Docker Buildx Builders
DESCRIPTION: This command displays the available builder instances in Docker Buildx. It shows the name, driver, status, BuildKit version, and supported platforms for each builder. The selected builder is marked with an asterisk.

LANGUAGE: bash
CODE:
$ docker buildx ls
NAME/NODE       DRIVER/ENDPOINT      STATUS   BUILDKIT PLATFORMS
default *       docker
  default       default              running  v0.11.6  linux/amd64, linux/amd64/v2, linux/amd64/v3, linux/386
my_builder      docker-container
  my_builder0   default              running  v0.11.6  linux/amd64, linux/amd64/v2, linux/amd64/v3, linux/386

----------------------------------------

TITLE: Correct Usage of ENTRYPOINT in Exec Form
DESCRIPTION: An example of correctly using the exec form for ENTRYPOINT, allowing the program to receive OS signals and run as PID 1.

LANGUAGE: dockerfile
CODE:
FROM alpine
ENTRYPOINT ["my-program", "start"]
# entrypoint becomes: my-program start

----------------------------------------

TITLE: Pruning Docker Networks with Time Filter
DESCRIPTION: This command prunes networks that are older than 24 hours. It demonstrates the use of the --filter flag with a time-based condition.

LANGUAGE: console
CODE:
$ docker network prune --filter "until=24h"

----------------------------------------

TITLE: Defining YAML Metadata for Docker Guides
DESCRIPTION: Example of required YAML front matter metadata for Docker guide documents, including title, description, tags and other optional fields.

LANGUAGE: yaml
CODE:
---
title: Deploy a machine learning model with Docker
linkTitle: Docker for ML deployment
description: Learn how to containerize and deploy a machine learning model using Docker.
summary: |
  This guide walks you through the steps to containerize a machine learning
  model and deploy it using Docker, enabling scalable and portable AI
  solutions.
tags: [machine-learning, deployment]
languages: [python]
params:
  time: 30 minutes
---

----------------------------------------

TITLE: Pinning Buildx Version in GitHub Actions
DESCRIPTION: Demonstrates how to pin to a specific version of Buildx using the 'version' input in the Setup Buildx Action.

LANGUAGE: yaml
CODE:
- name: Set up Docker Buildx
  uses: docker/setup-buildx-action@v3
  with:
    version: v0.10.0

----------------------------------------

TITLE: Basic Usage of docker dev CLI Plugin
DESCRIPTION: Shows the basic usage syntax for the docker dev CLI plugin. This command is used to access various Dev Environments functionalities.

LANGUAGE: bash
CODE:
docker dev [OPTIONS] COMMAND

----------------------------------------

TITLE: Configuring Python Application Kubernetes Deployment
DESCRIPTION: YAML configuration for deploying a Python FastAPI application to Kubernetes, including Deployment and NodePort Service. Sets up environment variables for database connection and exposes the application on port 30001.

LANGUAGE: yaml
CODE:
apiVersion: apps/v1
kind: Deployment
metadata:
  name: docker-python-demo
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      service: fastapi
  template:
    metadata:
      labels:
        service: fastapi
    spec:
      containers:
        - name: fastapi-service
          image: DOCKER_USERNAME/REPO_NAME
          imagePullPolicy: Always
          env:
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: POSTGRES_PASSWORD
            - name: POSTGRES_USER
              value: postgres
            - name: POSTGRES_DB
              value: example
            - name: POSTGRES_SERVER
              value: postgres
            - name: POSTGRES_PORT
              value: "5432"
          ports:
            - containerPort: 8001
---
apiVersion: v1
kind: Service
metadata:
  name: service-entrypoint
  namespace: default
spec:
  type: NodePort
  selector:
    service: fastapi
  ports:
    - port: 8001
      targetPort: 8001
      nodePort: 30001

----------------------------------------

TITLE: Scaling BuildKit with Multiple Replicas
DESCRIPTION: This example demonstrates creating a Kubernetes builder with 4 replica BuildKit pods, showcasing the scalability feature of the Kubernetes driver.

LANGUAGE: console
CODE:
$ docker buildx create \
  --bootstrap \
  --name=kube \
  --driver=kubernetes \
  --driver-opt=namespace=buildkit,replicas=4

----------------------------------------

TITLE: Unit Reference Format
DESCRIPTION: Example table showing correct and incorrect ways to reference measurement units in documentation.

LANGUAGE: markdown
CODE:
| Correct | Incorrect |
| --- | --- |
| 10 GB | 10GB |
| 10 GB | 10 gb |
| 10 GB | 10 gigabytes |

----------------------------------------

TITLE: Cloning Sample R Application Repository
DESCRIPTION: Command to clone the sample R application repository containing database connection logic.

LANGUAGE: console
CODE:
$ git clone https://github.com/mfranzon/r-docker-dev.git

----------------------------------------

TITLE: Checking Kubernetes API Server Reachability in TypeScript
DESCRIPTION: This snippet demonstrates how to use the ddClient.extension.host?.cli.exec API to check if the Kubernetes API server is reachable for a specific context. It executes the kubectl command with appropriate arguments.

LANGUAGE: typescript
CODE:
const output = await ddClient.extension.host?.cli.exec("kubectl", [
  "cluster-info",
  "--request-timeout",
  "2s",
  "--context",
  "docker-desktop",
]);

----------------------------------------

TITLE: Multi-Platform Build Command
DESCRIPTION: Command to build the Rust program for multiple platforms (amd64 and arm64) and export the binaries to a specified directory.

LANGUAGE: console
CODE:
$ docker build --platform=linux/amd64,linux/arm64 --output=out .
$ tree out/
out/
├── linux_amd64
│   └── hello
└── linux_arm64
    └── hello

3 directories, 2 files

----------------------------------------

TITLE: Loading Docker Trust Delegation Key
DESCRIPTION: Demonstrates how to import a delegation private key into the Docker trust store using environment variables for automation.

LANGUAGE: console
CODE:
$ export DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE="mypassphrase123"

$ docker trust key load delegation.key --name jeff
Loading key from "delegation.key"...
Successfully imported key from delegation.key

----------------------------------------

TITLE: Cleaning Docker System
DESCRIPTION: Commands for cleaning up Docker resources and reclaiming space

LANGUAGE: console
CODE:
$ docker system prune

LANGUAGE: console
CODE:
$ docker run --privileged --pid=host docker/desktop-reclaim-space

----------------------------------------

TITLE: Docker Compose Watch Command Options Table
DESCRIPTION: Markdown table detailing the available options for the docker compose alpha watch command, including dry-run mode, no-up flag, and quiet mode settings.

LANGUAGE: markdown
CODE:
| Name        | Type | Default | Description                                   |
|:------------|:-----|:--------|:----------------------------------------------|
| `--dry-run` |      |         | Execute command in dry run mode               |
| `--no-up`   |      |         | Do not build & start services before watching |
| `--quiet`   |      |         | hide build output                             |

----------------------------------------

TITLE: Initializing Pass Storage for Docker Credentials
DESCRIPTION: Command to initialize the pass password store using the generated GPG key for secure credential storage.

LANGUAGE: console
CODE:
$ pass init <your_generated_gpg-id_public_key>

----------------------------------------

TITLE: Configuring Compose Watch for Deno Services
DESCRIPTION: This YAML snippet demonstrates how to add Compose Watch instructions to a compose.yml file for automatically updating Deno services during development.

LANGUAGE: yaml
CODE:
services:
  server:
    image: deno-server
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    develop:
      watch:
        - action: rebuild
          path: .

----------------------------------------

TITLE: Multi-Architecture Build Example
DESCRIPTION: Command demonstrating how to build images for multiple architectures (amd64 and arm64) using QEMU emulation.

LANGUAGE: console
CODE:
$ docker buildx build \
  --builder=container \
  --platform=linux/amd64,linux/arm64 \
  -t <registry>/<image> \
  --push .

----------------------------------------

TITLE: Running Container with Custom Runtime
DESCRIPTION: Example of running a container with an alternative runtime using the --runtime flag

LANGUAGE: console
CODE:
$ docker run --runtime io.containerd.kata.v2 hello-world

----------------------------------------

TITLE: Docker Compose Configuration with Database
DESCRIPTION: Complete Docker Compose configuration defining a Shiny app service and PostgreSQL database with volumes and secrets.

LANGUAGE: yaml
CODE:
services:
  shiny-app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - 3838:3838
    environment:
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    depends_on:
      db:
        condition: service_healthy
    secrets:
      - db-password
    develop:
      watch:
        - action: rebuild
          path: .
  db:
    image: postgres
    restart: always
    user: postgres
    secrets:
      - db-password
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=example
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    expose:
      - 5432
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
volumes:
  db-data:
secrets:
  db-password:
    file: db/password.txt

----------------------------------------

TITLE: Updating Git Remote URL
DESCRIPTION: Command to update the Git remote URL to point to a new GitHub repository. Requires replacing placeholder values for username and repository name.

LANGUAGE: console
CODE:
$ git remote set-url origin https://github.com/your-username/your-repository.git

----------------------------------------

TITLE: Extended Bake Configuration with x-bake
DESCRIPTION: Advanced compose file using x-bake extension field to specify additional build parameters like platforms, caching, and secrets.

LANGUAGE: yaml
CODE:
services:
  addon:
    image: ct-addon:bar
    build:
      context: .
      dockerfile: ./Dockerfile
      args:
        CT_ECR: foo
        CT_TAG: bar
      x-bake:
        tags:
          - ct-addon:foo
          - ct-addon:alp
        platforms:
          - linux/amd64
          - linux/arm64
        cache-from:
          - user/app:cache
          - type=local,src=path/to/cache
        cache-to:
          - type=local,dest=path/to/cache
        pull: true

  aws:
    image: ct-fake-aws:bar
    build:
      dockerfile: ./aws.Dockerfile
      args:
        CT_ECR: foo
        CT_TAG: bar
      x-bake:
        secret:
          - id=mysecret,src=./secret
          - id=mysecret2,src=./secret2
        platforms: linux/arm64
        output: type=docker
        no-cache: true

----------------------------------------

TITLE: Dockerfile for PHP-CLI in Laravel Production Environment
DESCRIPTION: Creates a PHP-CLI image for running Artisan commands and other CLI tasks in a Laravel production environment. Uses multi-stage builds for efficiency.

LANGUAGE: dockerfile
CODE:
# Stage 1: Build environment and Composer dependencies
FROM php:8.3-cli AS builder

# Install system dependencies and PHP extensions required for Laravel + MySQL/PostgreSQL support
# Some dependencies are required for PHP extensions only in the build stage
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    unzip \
    libpq-dev \
    libonig-dev \
    libssl-dev \
    libxml2-dev \
    libcurl4-openssl-dev \
    libicu-dev \
    libzip-dev \
    && docker-php-ext-install -j$(nproc) \
    pdo_mysql \
    pdo_pgsql \
    pgsql \
    opcache \
    intl \
    zip \
    bcmath \
    soap \
    && pecl install redis \
    && docker-php-ext-enable redis \
    && apt-get autoremove -y && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Set the working directory inside the container
WORKDIR /var/www

# Copy the entire Laravel application code into the container
COPY . /var/www

# Install Composer and dependencies
RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer \
    && composer install --no-dev --optimize-autoloader --no-interaction --no-progress --prefer-dist

# Stage 2: Production environment
FROM php:8.3-cli

# Install client libraries required for php extensions in runtime
RUN apt-get update && apt-get install -y --no-install-recommends \
    libpq-dev \
    libicu-dev \
    libzip-dev \
    && apt-get autoremove -y && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Copy PHP extensions and libraries from the builder stage
COPY --from=builder /usr/local/lib/php/extensions/ /usr/local/lib/php/extensions/
COPY --from=builder /usr/local/etc/php/conf.d/ /usr/local/etc/php/conf.d/
COPY --from=builder /usr/local/bin/docker-php-ext-* /usr/local/bin/

# Use the default production configuration for PHP runtime arguments
RUN mv "$PHP_INI_DIR/php.ini-production" "$PHP_INI_DIR/php.ini"

# Copy the application code and dependencies from the build stage
COPY --from=builder /var/www /var/www

# Set working directory
WORKDIR /var/www

# Ensure correct permissions
RUN chown -R www-data:www-data /var/www

# Switch to the non-privileged user to run the application
USER www-data

# Default command: Provide a bash shell to allow running any command
CMD ["bash"]

----------------------------------------

TITLE: Combining Local and Remote Bake Definitions in HCL
DESCRIPTION: This HCL snippet demonstrates a local Bake definition that can be combined with a remote definition. It sets an argument 'HELLO' with a value of 'foo'.

LANGUAGE: hcl
CODE:
# local.hcl
target "default" {
  args = {
    HELLO = "foo"
  }
}

----------------------------------------

TITLE: Container Linking Example
DESCRIPTION: Shows how to create and link containers using the --link flag for container communication.

LANGUAGE: console
CODE:
$ docker run -d --name db training/postgres
$ docker container rm -f web
$ docker run -d -P --name web --link db:db training/webapp python app.py

----------------------------------------

TITLE: Starting Container and Reading Logs with Dual Logging
DESCRIPTION: Commands showing container start and successful log reading with dual logging enabled

LANGUAGE: console
CODE:
$ docker run -d busybox --name testlog top
$ docker logs 7d6ac83a89a0
2019-02-04T19:48:15.423Z [INFO]  core: marked as sealed
2019-02-04T19:48:15.423Z [INFO]  core: pre-seal teardown starting
2019-02-04T19:48:15.423Z [INFO]  core: stopping cluster listeners
2019-02-04T19:48:15.423Z [INFO]  core: shutting down forwarding rpc listeners
2019-02-04T19:48:15.423Z [INFO]  core: forwarding rpc listeners stopped
2019-02-04T19:48:15.599Z [INFO]  core: rpc listeners successfully shut down
2019-02-04T19:48:15.599Z [INFO]  core: cluster listeners successfully shut down

----------------------------------------

TITLE: Installing Docker Client on macOS
DESCRIPTION: Commands for extracting and setting up Docker client binaries on macOS, including clearing extended attributes.

LANGUAGE: bash
CODE:
$ tar xzvf /path/to/<FILE>.tar.gz
$ sudo xattr -rc docker
$ sudo cp docker/docker /usr/local/bin/
$ sudo docker -H <hostname> run hello-world

----------------------------------------

TITLE: Pruning Unused Docker Networks
DESCRIPTION: This command removes all networks not used by at least one container. It prompts for confirmation before execution.

LANGUAGE: console
CODE:
$ docker network prune

WARNING! This will remove all networks not used by at least one container.
Are you sure you want to continue? [y/N] y

----------------------------------------

TITLE: Checking Docker Storage Usage
DESCRIPTION: Command to display detailed space usage information for Docker containers and images

LANGUAGE: console
CODE:
$ docker system df -v

----------------------------------------

TITLE: Renaming Git Branch to 'main'
DESCRIPTION: Command to rename the current Git branch to 'main'.

LANGUAGE: Bash
CODE:
$ git branch -M main

----------------------------------------

TITLE: Defining Kubernetes Deployment and Service for C++ Application
DESCRIPTION: This YAML file defines a Kubernetes Deployment and NodePort Service for a C++ application. The Deployment creates a pod with one container using the image built in a previous CI/CD step. The Service exposes the application on port 30001.

LANGUAGE: yaml
CODE:
apiVersion: apps/v1
kind: Deployment
metadata:
  name: docker-c-plus-plus-demo
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      service: ok-api
  template:
    metadata:
      labels:
        service: ok-api
    spec:
      containers:
        - name: ok-api-service
          image: DOCKER_USERNAME/REPO_NAME
          imagePullPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: service-entrypoint
  namespace: default
spec:
  type: NodePort
  selector:
    service: ok-api
  ports:
    - port: 8080
      targetPort: 8080
      nodePort: 30001

----------------------------------------

TITLE: Setting OpenTelemetry Endpoint for Docker CLI
DESCRIPTION: Sets the environment variable to specify the endpoint for the OpenTelemetry collector where Docker CLI should send telemetry data.

LANGUAGE: bash
CODE:
DOCKER_CLI_OTEL_EXPORTER_OTLP_ENDPOINT=<endpoint>

----------------------------------------

TITLE: Cloning the Sample Application Repository
DESCRIPTION: Command to clone the sample application's Git repository containing the NER code and Docker configuration.

LANGUAGE: shell
CODE:
$ git clone https://github.com/harsh4870/Docker-NLP.git

----------------------------------------

TITLE: Basic GitHub Actions Workflow for Docker Build
DESCRIPTION: Example GitHub Actions workflow configuration for building and pushing Docker images with build checks enabled.

LANGUAGE: yaml
CODE:
name: Build and push Docker images
on:
  push:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Build and push
        uses: docker/build-push-action@v6.6.0

----------------------------------------

TITLE: Extracting Docker Binaries on Linux
DESCRIPTION: Commands for extracting Docker binary archives and copying executables to system path on Linux systems.

LANGUAGE: bash
CODE:
$ tar xzvf /path/to/<FILE>.tar.gz
$ sudo cp docker/* /usr/bin/

----------------------------------------

TITLE: Creating a Kubernetes Builder with Buildx
DESCRIPTION: This command creates a new Buildx builder named 'kube' using the Kubernetes driver. It bootstraps the builder and allows passing driver-specific options.

LANGUAGE: console
CODE:
$ docker buildx create \
  --bootstrap \
  --name=kube \
  --driver=kubernetes \
  --driver-opt=[key=value,...]

----------------------------------------

TITLE: HCL Override File Configuration
DESCRIPTION: Shows how to create an override file that modifies the default variable value.

LANGUAGE: hcl
CODE:
variable "TAG" {
  default = "bar"
}

----------------------------------------

TITLE: Importing Cache from Registry
DESCRIPTION: Demonstrates how to import previously exported cache from a registry for use in a new build operation.

LANGUAGE: console
CODE:
$ docker buildx build --push -t <registry>/<image> \
  --cache-from type=registry,ref=<registry>/<image> .

----------------------------------------

TITLE: Adding Metadata Labels to Volumes in Docker Compose
DESCRIPTION: This example illustrates how to add metadata labels to volumes using both array and dictionary formats, following the recommended reverse-DNS notation.

LANGUAGE: yaml
CODE:
volumes:
  db-data:
    labels:
      com.example.description: "Database volume"
      com.example.department: "IT/Ops"
      com.example.label-with-empty-value: ""

LANGUAGE: yaml
CODE:
volumes:
  db-data:
    labels:
      - "com.example.description=Database volume"
      - "com.example.department=IT/Ops"
      - "com.example.label-with-empty-value"

----------------------------------------

TITLE: Python Dependencies Configuration
DESCRIPTION: Requirements file specifying necessary Python packages for the application

LANGUAGE: text
CODE:
# 04 text_summarization
bert-extractive-summarizer==0.10.1

torch==2.1.2

----------------------------------------

TITLE: Including External Compose Files with Long Syntax in YAML
DESCRIPTION: Illustrates the long syntax for including external Compose files, which provides more control over the sub-project parsing. This includes specifying the project directory and environment file explicitly.

LANGUAGE: yaml
CODE:
include:
   - path: ../commons/compose.yaml
     project_directory: ..
     env_file: ../another/.env

----------------------------------------

TITLE: Dockerfile with Combined Check Parameters
DESCRIPTION: Example showing how to combine multiple check parameters in a Dockerfile for both skipping checks and error handling.

LANGUAGE: dockerfile
CODE:
# syntax=docker/dockerfile:1
# check=skip=JSONArgsRecommended,StageNameCasing;error=true

----------------------------------------

TITLE: YAML Frontmatter Configuration for Docker CLI Documentation
DESCRIPTION: YAML frontmatter defining the metadata and layout configuration for the Docker config inspect command documentation page. Includes data folder location, file name, page title, and URL aliases.

LANGUAGE: yaml
CODE:
datafolder: engine-cli
datafile: docker_config_inspect
title: docker config inspect
aliases:
- /edge/engine/reference/commandline/config_inspect/
- /engine/reference/commandline/config_inspect/
layout: cli

----------------------------------------

TITLE: Docker Ignore Configuration
DESCRIPTION: Dockerignore file that specifies which files and directories should be excluded from the Docker build context.

LANGUAGE: text
CODE:
**/.classpath
**/.dockerignore
**/.env
**/.git
**/.gitignore
**/.project
**/.settings
**/.toolstarget
**/.vs
**/.vscode
**/.next
**/.cache
**/*.*proj.user
**/*.dbmdl
**/*.jfm
**/charts
**/docker-compose*
**/compose.y*ml
**/target
**/Dockerfile*
**/node_modules
**/npm-debug.log
**/obj
**/secrets.dev.yaml
**/values.dev.yaml
**/vendor
LICENSE
README.md

----------------------------------------

TITLE: Installing a Docker Plugin
DESCRIPTION: This command installs a Docker plugin from the specified repository. It prompts for user confirmation and sets plugin privileges.

LANGUAGE: bash
CODE:
$ docker plugin install vieux/sshfs

Plugin "vieux/sshfs" is requesting the following privileges:
 - network: [host]
 - device: [/dev/fuse]
 - capabilities: [CAP_SYS_ADMIN]
Do you grant the above permissions? [y/N] y
vieux/sshfs

The plugin vieux/sshfs is now installed

----------------------------------------

TITLE: Deprecated Methods for Executing and Streaming Host Commands in TypeScript
DESCRIPTION: Demonstrates deprecated methods for executing commands on the host and streaming their output using window.ddClient.execHostCmd() and window.ddClient.spawnHostCmd().

LANGUAGE: typescript
CODE:
window.ddClient.execHostCmd(`cliShippedOnHost xxx`).then((cmdResult: any) => {
  console.log(cmdResult);
});

window.ddClient.spawnHostCmd(
  `cliShippedOnHost`,
  [`arg1`, `arg2`],
  (data: any, err: any) => {
    console.log(data.stdout, data.stderr);
    // Once the command exits we get the status code
    if (data.code) {
      console.log(data.code);
    }
  }
);

----------------------------------------

TITLE: Pushing Docker Image to New Personal Repository
DESCRIPTION: Command to push a newly tagged Docker image to a different personal repository namespace.

LANGUAGE: console
CODE:
$ docker push new_namespace/docker101tutorial

----------------------------------------

TITLE: Node Assignment with NodeSelector and Tolerations
DESCRIPTION: This command shows how to create a Kubernetes builder with specific node assignment using nodeSelector and tolerations options.

LANGUAGE: console
CODE:
$ docker buildx create \
  --bootstrap \
  --name=kube \
  --driver=kubernetes \
  '--driver-opt="nodeselector=label1=value1,label2=value2","tolerations=key=key1,value=value1"'

----------------------------------------

TITLE: Running MySQL Container
DESCRIPTION: Starts a MySQL 8.0 container with network configuration, volume mounting, and environment variables for database initialization

LANGUAGE: console
CODE:
docker run -d \
    --network todo-app --network-alias mysql \
    -v todo-mysql-data:/var/lib/mysql \
    -e MYSQL_ROOT_PASSWORD=secret \
    -e MYSQL_DATABASE=todos \
    mysql:8.0

----------------------------------------

TITLE: Kubernetes Deployment and Service Configuration for Bun Application
DESCRIPTION: YAML configuration defining a Kubernetes Deployment and NodePort Service for a Bun application. The Deployment creates a pod with one container, while the Service enables access to the application through port 30001.

LANGUAGE: yaml
CODE:
apiVersion: apps/v1
kind: Deployment
metadata:
  name: docker-bun-demo
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: bun-api
  template:
    metadata:
      labels:
        app: bun-api
    spec:
      containers:
       - name: bun-api
         image: DOCKER_USERNAME/REPO_NAME
         imagePullPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: service-entrypoint
  namespace: default
spec:
  type: NodePort
  selector:
    app: bun-api
  ports:
  - port: 3000
    targetPort: 3000
    nodePort: 30001

----------------------------------------

TITLE: Using Multiple Environment Files in Docker Compose
DESCRIPTION: Demonstrates how to use multiple .env files and override variables using the --env-file option in Docker Compose.

LANGUAGE: console
CODE:
$ cat .env
TAG=v1.5
$ cat ./config/.env.dev
TAG=v1.6
$ cat compose.yaml
services:
  web:
    image: "webapp:${TAG}"

LANGUAGE: console
CODE:
$ docker compose config
services:
  web:
    image: 'webapp:v1.5'

LANGUAGE: console
CODE:
$ docker compose --env-file ./config/.env.dev config
services:
  web:
    image: 'webapp:v1.6'

----------------------------------------

TITLE: Validating Docker Extension Image
DESCRIPTION: Command to validate a built Docker extension image, checking required labels and metadata configuration.

LANGUAGE: console
CODE:
$ docker extension validate <name-of-your-extension>

----------------------------------------

TITLE: Building Docker Image with Cloud Builder
DESCRIPTION: Command to build a Docker image using the Docker Build Cloud builder. It specifies the builder name and image tag.

LANGUAGE: bash
CODE:
$ docker buildx build --builder cloud-<ORG>-<BUILDER_NAME> --tag <IMAGE> .

----------------------------------------

TITLE: GitHub Actions Workflow with Secret Configuration
DESCRIPTION: GitHub Actions workflow that sets up Docker Buildx and exposes secrets to the build process. Includes QEMU setup for multi-platform builds.

LANGUAGE: yaml
CODE:
name: ci

on:
  push:

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64,linux/arm64
          tags: user/app:latest
          secrets: |
            "github_token=${{ secrets.GITHUB_TOKEN }}"

----------------------------------------

TITLE: Uninstalling Legacy Docker Packages on CentOS
DESCRIPTION: Command to remove any conflicting or older Docker packages from the system before installing the official Docker Engine.

LANGUAGE: bash
CODE:
sudo dnf remove docker \
                  docker-client \
                  docker-client-latest \
                  docker-common \
                  docker-latest \
                  docker-latest-logrotate \
                  docker-logrotate \
                  docker-engine

----------------------------------------

TITLE: Using Specific Cache Version with Digest
DESCRIPTION: Example of using a specific cache version by specifying the digest parameter when importing cache from a local directory.

LANGUAGE: console
CODE:
$ docker buildx build --push -t <registry>/<image> \
  --cache-to type=local,dest=path/to/local/dir \
  --cache-from type=local,ref=path/to/local/dir,digest=sha256:6982c70595cb91769f61cd1e064cf5f41d5357387bab6b18c0164c5f98c1f707 .

----------------------------------------

TITLE: Setting Docker Plugin Configuration in Bash
DESCRIPTION: This snippet demonstrates the usage of the 'docker plugin set' command to configure a Docker plugin. It shows the basic syntax and provides an example of setting a specific setting for a plugin.

LANGUAGE: bash
CODE:
docker plugin set PLUGIN KEY=VALUE [KEY=VALUE...]

----------------------------------------

TITLE: Viewing Images for a Docker Scout Environment
DESCRIPTION: This command displays the images assigned to a specific environment (in this case, 'production') using Docker Scout.

LANGUAGE: bash
CODE:
$ docker scout env production

----------------------------------------

TITLE: Conditional Product-Specific Template Configuration
DESCRIPTION: Conditional logic to modify template variables when the product context is set to 'admin', updating links and navigation instructions for the Admin Console interface.

LANGUAGE: go
CODE:
{{ if eq (.Get "product") "admin" }}
  {{ $product_link = "the [Admin Console](https://admin.docker.com)" }}
  {{ $domain_navigation = "Select your organization on the **Choose profile** page, and then select **Domain management**." }}
  {{ $sso_link = "[SSO](/security/for-admins/single-sign-on/)" }}
  {{ $scim_link = "[SCIM](/security/for-admins/provisioning/scim/)" }}
{{ end }}

----------------------------------------

TITLE: Creating Custom Overlay Network
DESCRIPTION: Creates an overlay network with custom subnet and gateway configurations.

LANGUAGE: console
CODE:
$ docker network create \
  --driver overlay \
  --subnet 10.0.9.0/24 \
  --gateway 10.0.9.99 \
  my-network

----------------------------------------

TITLE: Managing Docker Swarm Join Tokens
DESCRIPTION: Commands for retrieving and rotating swarm join tokens for both worker and manager nodes.

LANGUAGE: console
CODE:
$ docker swarm join-token worker

To add a worker to this swarm, run the following command:

    docker swarm join \
    --token SWMTKN-1-49nj1cmql0jkz5s954yi3oex3nedyz0fb0xx14ie39trti4wxv-8vxv8rssmk743ojnwacrr2e7c \
    192.168.99.100:2377

This node joined a swarm as a worker.

LANGUAGE: console
CODE:
$ docker swarm join-token manager

To add a manager to this swarm, run the following command:

    docker swarm join \
    --token SWMTKN-1-59egwe8qangbzbqb3ryawxzk3jn97ifahlsrw01yar60pmkr90-bdjfnkcflhooyafetgjod97sz \
    192.168.99.100:2377

LANGUAGE: console
CODE:
$ docker swarm join-token --quiet worker

SWMTKN-1-49nj1cmql0jkz5s954yi3oex3nedyz0fb0xx14ie39trti4wxv-8vxv8rssmk743ojnwacrr2e7c

LANGUAGE: console
CODE:
$ docker swarm join-token  --rotate worker

To add a worker to this swarm, run the following command:

    docker swarm join \
    --token SWMTKN-1-2kscvs0zuymrsc9t0ocyy1rdns9dhaodvpl639j2bqx55uptag-ebmn5u927reawo27s3azntd44 \
    192.168.99.100:2377

----------------------------------------

TITLE: Configuring Local Logging Driver in Docker Daemon JSON
DESCRIPTION: This snippet shows how to set the local logging driver as the default and configure the max-size option in the daemon.json file. It sets the log driver to 'local' and limits the maximum log size to 10 megabytes.

LANGUAGE: json
CODE:
{
  "log-driver": "local",
  "log-opts": {
    "max-size": "10m"
  }
}

----------------------------------------

TITLE: Installing Package with RUN Instruction - Dockerfile
DESCRIPTION: Example demonstrating how to install curl using a RUN instruction in a multi-stage Dockerfile, highlighting cache behavior.

LANGUAGE: dockerfile
CODE:
FROM alpine:{{% param "example_alpine_version" %}} AS install
RUN apk add curl

----------------------------------------

TITLE: Docker Container Mount Command Example
DESCRIPTION: Example showing how to bind mount host files into a container using the docker run command with the -v flag.

LANGUAGE: bash
CODE:
docker run -v /path/to/host/file:/mnt ...

----------------------------------------

TITLE: Creating Custom Ingress Network
DESCRIPTION: Creates a custom ingress network with specific MTU, subnet and gateway settings.

LANGUAGE: console
CODE:
$ docker network create \
  --driver overlay \
  --ingress \
  --subnet=10.11.0.0/16 \
  --gateway=10.11.0.2 \
  --opt com.docker.network.driver.mtu=1200 \
  my-ingress

----------------------------------------

TITLE: Creating a Read-Only Volume
DESCRIPTION: Demonstrates how to mount a volume as read-only using both the --mount and -v syntax options.

LANGUAGE: console
CODE:
$ docker run -d \
  --name=nginxtest \
  --mount source=nginx-vol,destination=/usr/share/nginx/html,readonly \
  nginx:latest

LANGUAGE: console
CODE:
$ docker run -d \
  --name=nginxtest \
  -v nginx-vol:/usr/share/nginx/html:ro \
  nginx:latest

----------------------------------------

TITLE: Analyzing Image Vulnerabilities
DESCRIPTION: Use Docker Scout to analyze vulnerabilities in the Express package of the built image.

LANGUAGE: bash
CODE:
$ docker scout cves --only-package express

----------------------------------------

TITLE: Conservative GC Configuration for Docker Driver
DESCRIPTION: This JSON snippet shows a more conservative GC configuration for the Docker driver with higher thresholds and less aggressive pruning policies.

LANGUAGE: json
CODE:
{
  "builder": {
    "gc": {
      "enabled": true,
      "defaultKeepStorage": "50GB",
      "policy": [
        { "keepStorage": "0", "filter": ["unused-for=1440h"] },
        { "keepStorage": "0" },
        { "keepStorage": "100GB", "all": true }
      ]
    }
  }
}

----------------------------------------

TITLE: Printing Container Logs using Docker SDKs and API
DESCRIPTION: This example demonstrates how to print the logs of a specific container using the Docker Go SDK, Python SDK, and HTTP API. It retrieves and outputs the logs for a given container ID.

LANGUAGE: Go
CODE:
package main

import (
	"context"
	"io"
	"os"

	"github.com/docker/docker/api/types/container"
	"github.com/docker/docker/client"
)

func main() {
	ctx := context.Background()
	cli, err := client.NewClientWithOpts(client.FromEnv, client.WithAPIVersionNegotiation())
	if err != nil {
		panic(err)
	}
	defer cli.Close()

	options := container.LogsOptions{ShowStdout: true}
	// Replace this ID with a container that really exists
	out, err := cli.ContainerLogs(ctx, "f1064a8a4c82", options)
	if err != nil {
		panic(err)
	}

	io.Copy(os.Stdout, out)
}

LANGUAGE: Python
CODE:
import docker
client = docker.from_env()
container = client.containers.get('f1064a8a4c82')
print(container.logs())

LANGUAGE: HTTP
CODE:
$ curl --unix-socket /var/run/docker.sock "http://localhost/v{{% param "latest_engine_api_version" %}}/containers/ca5f55cdb/logs?stdout=1"
Reticulating spline 1...
Reticulating spline 2...
Reticulating spline 3...
Reticulating spline 4...
Reticulating spline 5...

----------------------------------------

TITLE: Configuring Prometheus Job for Docker Scout Metrics
DESCRIPTION: This YAML configuration defines a Prometheus job for scraping metrics from the Docker Scout API. It specifies the metrics path, scheme, and target for a given organization.

LANGUAGE: yaml
CODE:
scrape_configs:
  - job_name: <ORG>
    metrics_path: /v1/exporter/org/<ORG>/metrics
    scheme: https
    static_configs:
      - targets:
          - api.scout.docker.com

----------------------------------------

TITLE: Volume Plugin Remove Request
DESCRIPTION: JSON request format for removing a volume through the plugin API

LANGUAGE: json
CODE:
{
    "Name": "volume_name"
}

----------------------------------------

TITLE: Starting UI Development Server
DESCRIPTION: Commands to start a development server for hot reloading UI changes during development.

LANGUAGE: console
CODE:
$ cd ui
$ npm run dev

----------------------------------------

TITLE: Running Container with Custom Network in Docker
DESCRIPTION: Example showing how to run a container using a custom network created with a network driver plugin. This demonstrates connecting a container to a network managed by a third-party plugin.

LANGUAGE: console
CODE:
$ docker run --network=mynet busybox top

----------------------------------------

TITLE: Docker Scout Linux Configuration
DESCRIPTION: Commands and configuration for manually installing Docker Scout on Linux systems, including directory creation and binary setup.

LANGUAGE: console
CODE:
$ mkdir -p $HOME/.docker/scout

LANGUAGE: json
CODE:
{
  "cliPluginsExtraDirs": [
    "/home/<USER>/.docker/scout"
  ]
}

----------------------------------------

TITLE: Configuring a Container to Use a Logging Driver Plugin
DESCRIPTION: This command runs a container and configures it to use a specific logging driver plugin. Additional options can be specified using --log-opt flags.

LANGUAGE: bash
CODE:
docker run --log-driver <plugin-name> --log-opt <option-name>=<option-value>

----------------------------------------

TITLE: Setting Default Cloud Builder
DESCRIPTION: Command to set the Docker Build Cloud builder as the default builder globally.

LANGUAGE: bash
CODE:
$ docker buildx use cloud-<ORG>-<BUILDER_NAME> --global

----------------------------------------

TITLE: Using Syft JSON SBOM with Docker Scout GitHub Action
DESCRIPTION: Shows how to use SBOM files in syft-json format with the Docker Scout GitHub Action.

LANGUAGE: yaml
CODE:
uses: docker/scout-action@v1
with:
    command: cves
    image: sbom://alpine.syft.json

----------------------------------------

TITLE: Enabling IPv6 for the Default Bridge Network in Docker
DESCRIPTION: Example of a daemon.json configuration to enable and configure IPv6 for the default bridge network.

LANGUAGE: json
CODE:
{
  "ipv6": true,
  "bip6": "2001:db8::1111/64",
  "fixed-cidr-v6": "2001:db8::/64",
  "default-gateway-v6": "2001:db8:abcd::89"
}

----------------------------------------

TITLE: Creating a Minimal Base Image Using Scratch in Dockerfile
DESCRIPTION: This snippet demonstrates how to create a minimal base image using the scratch image in a Dockerfile. It adds a 'hello' executable and sets it as the command to run.

LANGUAGE: dockerfile
CODE:
# syntax=docker/dockerfile:1
FROM scratch
ADD hello /
CMD ["/hello"]

----------------------------------------

TITLE: Docker Container Management with HTTP API
DESCRIPTION: Series of curl commands demonstrating container creation, starting, waiting and log retrieval using the Docker Engine HTTP API directly

LANGUAGE: shell
CODE:
$ curl --unix-socket /var/run/docker.sock -H "Content-Type: application/json" \
  -d '{"Image": "alpine", "Cmd": ["echo", "hello world"]}' \
  -X POST http://localhost/v{{% param "latest_engine_api_version" %}}/containers/create
{"Id":"1c6594faf5","Warnings":null}

$ curl --unix-socket /var/run/docker.sock -X POST http://localhost/v{{% param "latest_engine_api_version" %}}/containers/1c6594faf5/start

$ curl --unix-socket /var/run/docker.sock -X POST http://localhost/v{{% param "latest_engine_api_version" %}}/containers/1c6594faf5/wait
{"StatusCode":0}

$ curl --unix-socket /var/run/docker.sock "http://localhost/v{{% param "latest_engine_api_version" %}}/containers/1c6594faf5/logs?stdout=1"
hello world

----------------------------------------

TITLE: Creating Network with Custom Driver in Docker
DESCRIPTION: Example showing how to create a Docker network using a custom network driver plugin (weave). This demonstrates the basic syntax for creating a network with a third-party network driver.

LANGUAGE: console
CODE:
$ docker network create --driver weave mynet

----------------------------------------

TITLE: Creating registry.json File via PowerShell (Windows)
DESCRIPTION: This PowerShell command creates a registry.json file at the specified path with the allowed organizations for Docker Desktop sign-in enforcement on Windows.

LANGUAGE: powershell
CODE:
PS>  Set-Content /ProgramData/DockerDesktop/registry.json '{"allowedOrgs":["myorg"]}'

----------------------------------------

TITLE: Running PostgreSQL Container Configuration
DESCRIPTION: Docker command to run PostgreSQL container with volume mounting, network configuration, and environment variables

LANGUAGE: console
CODE:
$ docker run --rm -d --mount \
  "type=volume,src=db-data,target=/var/lib/postgresql/data" \
  -p 5432:5432 \
  --network postgresnet \
  --name db \
  -e POSTGRES_PASSWORD=mysecretpassword \
  -e POSTGRES_DB=example \
  postgres

----------------------------------------

TITLE: Adding Labels to Docker Swarm Nodes
DESCRIPTION: Command to add metadata labels to a node, which can be used for node organization and service constraints.

LANGUAGE: console
CODE:
$ docker node update --label-add foo --label-add bar=baz node-1

node-1

----------------------------------------

TITLE: Installing Docker Desktop Package on Debian
DESCRIPTION: Commands to update package index and install Docker Desktop using the downloaded DEB package

LANGUAGE: bash
CODE:
$ sudo apt-get update
$ sudo apt-get install ./docker-desktop-amd64.deb

----------------------------------------

TITLE: Configuring Resource Saver Timeout in settings-store.json
DESCRIPTION: JSON configuration file paths and the autoPauseTimeoutSeconds setting that controls the idle timeout duration for Resource Saver mode. The timeout must be greater than 30 seconds.

LANGUAGE: plaintext
CODE:
Mac: ~/Library/Group Containers/group.com.docker/settings-store.json
Windows: C:\Users\[USERNAME]\AppData\Roaming\Docker\settings-store.json
Linux: ~/.docker/desktop/settings-store.json

----------------------------------------

TITLE: Running Java Application in Docker Container
DESCRIPTION: This shell command runs the Java application in a Docker container. It maps port 8080 from the container to the host and names the container 'my-java-container'.

LANGUAGE: Shell
CODE:
docker run -d -p 8080:8080 --name my-java-container my-java-app

----------------------------------------

TITLE: Configuring Notary client with JSON config file
DESCRIPTION: Creates a Notary client configuration file specifying trust directory and remote server details.

LANGUAGE: json
CODE:
{
  "trust_dir" : "~/.docker/trust",
  "remote_server": {
    "url": "https://registry.example.com",
    "root_ca": "../.docker/ca.pem"
  }
}

----------------------------------------

TITLE: BuildKit PATH Configuration on Windows
DESCRIPTION: PowerShell commands to install BuildKit binaries and configure system PATH

LANGUAGE: powershell
CODE:
Copy-Item -Path ".\bin" -Destination "$Env:ProgramFiles\buildkit" -Recurse -Force
$Path = [Environment]::GetEnvironmentVariable("PATH", "Machine") + `
    [IO.Path]::PathSeparator + "$Env:ProgramFiles\buildkit"
[Environment]::SetEnvironmentVariable( "Path", $Path, "Machine")
$Env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + `
    [System.Environment]::GetEnvironmentVariable("Path","User")

----------------------------------------

TITLE: Verifying containerd Snapshotter Configuration
DESCRIPTION: Command to verify the active driver status showing containerd snapshotter configuration and its output.

LANGUAGE: console
CODE:
$ docker info -f '{{ .DriverStatus }}'
[[driver-type io.containerd.snapshotter.v1]]

----------------------------------------

TITLE: Configuring Project Name in Docker Compose
DESCRIPTION: Example demonstrating how to set a project name in Docker Compose and use it via interpolation. The project name is accessed through the COMPOSE_PROJECT_NAME environment variable within the service configuration.

LANGUAGE: yaml
CODE:
name: myapp

services:
  foo:
    image: busybox
    command: echo "I'm running ${COMPOSE_PROJECT_NAME}"

----------------------------------------

TITLE: Dockerfile with Error Check Configuration
DESCRIPTION: Example Dockerfile that enables strict error checking for build violations using the check directive.

LANGUAGE: dockerfile
CODE:
# syntax=docker/dockerfile:1
# check=error=true

FROM alpine
CMD echo "Hello, world!"

----------------------------------------

TITLE: Configuring systemd for Docker Daemon
DESCRIPTION: This systemd configuration removes the default -H argument when starting the Docker daemon, allowing for custom host configurations.

LANGUAGE: systemd
CODE:
[Service]
ExecStart=
ExecStart=/usr/bin/dockerd

----------------------------------------

TITLE: OCI Media Types Configuration
DESCRIPTION: Examples of configuring OCI media types for cache storage, including options for registries that don't support image indices.

LANGUAGE: bash
CODE:
docker buildx build --push -t <registry>/<image> \
  --cache-to type=registry,ref=<registry>/<cache-image>,oci-mediatypes=true \
  --cache-from type=registry,ref=<registry>/<cache-image> .

LANGUAGE: bash
CODE:
docker buildx build --push -t <registry>/<image> \
  --cache-to type=registry,ref=<registry>/<cache-image>,oci-mediatypes=true,image-manifest=true \
  --cache-from type=registry,ref=<registry>/<cache-image> .

----------------------------------------

TITLE: Displaying Error Toast in Docker Extension API (TypeScript)
DESCRIPTION: This snippet illustrates how to display an error toast message using the Docker extension API. It employs the 'error' method of the toast interface to show a temporary error notification to the user.

LANGUAGE: typescript
CODE:
ddClient.desktopUI.toast.error("message");

----------------------------------------

TITLE: Checking Docker Containers After Cleanup
DESCRIPTION: This command lists running Docker containers after the cleanup process, showing that all task containers from the removed service have been terminated.

LANGUAGE: bash
CODE:
$ docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS     NAMES

----------------------------------------

TITLE: Fixing Docker Compose Symlink on MacOS
DESCRIPTION: Commands to fix broken Docker Compose symlink on MacOS after Docker Desktop auto-update by removing the old symlink and creating a new one pointing to the Docker Compose V2 binary.

LANGUAGE: bash
CODE:
$ sudo rm /usr/local/bin/docker-compose
$ sudo ln -s /Applications/Docker.app/Contents/Resources/cli-plugins/docker-compose /usr/local/bin/docker-compose

----------------------------------------

TITLE: Docker Compose Configuration for Rust Application
DESCRIPTION: Docker Compose configuration defining services for both the Rust application and PostgreSQL database with proper networking and volume management

LANGUAGE: yaml
CODE:
services:
  server:
    build:
      context: .
      target: final
    ports:
      - 8000:8000
    environment:
      - PG_DBNAME=example
      - PG_HOST=db
      - PG_USER=postgres
      - PG_PASSWORD=mysecretpassword
      - ADDRESS=0.0.0.0:8000
      - RUST_LOG=debug
    depends_on:
      db:
        condition: service_healthy
  db:
    image: postgres
    restart: always
    user: postgres
    secrets:
      - db-password
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=example
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    expose:
      - 5432
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
volumes:
  db-data:
secrets:
  db-password:
    file: db/password.txt

----------------------------------------

TITLE: Displaying Docker Image Identifier Format
DESCRIPTION: Shows the format of a Docker image identifier, including optional registry host and port, repository name, and tag.

LANGUAGE: text
CODE:
[REGISTRY_HOST[:REGISTRY_PORT]/]REPOSITORY[:TAG]

----------------------------------------

TITLE: Creating a cloud builder endpoint using Docker CLI
DESCRIPTION: This command adds a cloud builder endpoint to the local environment. It requires specifying the organization and builder name.

LANGUAGE: bash
CODE:
$ docker buildx create --driver cloud <ORG>/<BUILDER_NAME>

----------------------------------------

TITLE: SSH Configuration for Docker CLI
DESCRIPTION: Configures SSH settings for optimal Docker CLI connection reuse.

LANGUAGE: text
CODE:
ControlMaster     auto
ControlPath       ~/.ssh/control-%C
ControlPersist    yes

----------------------------------------

TITLE: Deploying Docker Stack Commands
DESCRIPTION: Shell commands for deploying and managing a Docker Swarm stack, including deployment, service listing, and stack removal.

LANGUAGE: shell
CODE:
$ docker stack deploy -c bb-stack.yaml demo

LANGUAGE: shell
CODE:
Creating network demo_default
Creating service demo_bb-app

LANGUAGE: shell
CODE:
$ docker service ls

LANGUAGE: shell
CODE:
ID                  NAME                MODE                REPLICAS            IMAGE               PORTS
il7elwunymbs        demo_bb-app         replicated          1/1                 getting-started:latest   *:8000->3000/tcp

LANGUAGE: shell
CODE:
$ docker stack rm demo

----------------------------------------

TITLE: Upgrading Docker Desktop on Ubuntu
DESCRIPTION: Command to upgrade Docker Desktop by installing the new DEB package

LANGUAGE: bash
CODE:
sudo apt-get install ./docker-desktop-amd64.deb

----------------------------------------

TITLE: Revoking Docker Content Trust Signatures
DESCRIPTION: Demonstrates how to remove remote trust data for a Docker image tag using the docker trust revoke command.

LANGUAGE: bash
CODE:
$ docker trust revoke registry.example.com/admin/demo:1
Enter passphrase for signer key with ID 8ae710e:
Successfully deleted signature for registry.example.com/admin/demo:1

----------------------------------------

TITLE: Reading SBOM from Standard Input with Docker Scout CLI
DESCRIPTION: Shows how to use the sbom:// protocol to read a Docker Scout SBOM from standard input.

LANGUAGE: console
CODE:
$ docker scout sbom IMAGE | docker scout qv sbom://

----------------------------------------

TITLE: Filtering SBOM by Package Type in Docker Scout
DESCRIPTION: This command filters the SBOM output to display only APK packages for the Alpine image using the Docker Scout tool.

LANGUAGE: console
CODE:
$ docker scout sbom --format list --only-package-type apk alpine

----------------------------------------

TITLE: Pushing Local Repository to GitHub
DESCRIPTION: Series of Git commands to stage all changes, commit them, and push the local repository to the main branch on GitHub.

LANGUAGE: console
CODE:
$ git add -A
$ git commit -m "my commit"
$ git push -u origin main

----------------------------------------

TITLE: Starting Docker Service
DESCRIPTION: Command to start the Docker daemon after configuration

LANGUAGE: bash
CODE:
$ sudo systemctl start docker

----------------------------------------

TITLE: Setting Up Docker Repository on Fedora
DESCRIPTION: Commands to install dnf-plugins-core and configure the Docker repository for package installation.

LANGUAGE: console
CODE:
$ sudo dnf -y install dnf-plugins-core
$ sudo dnf-3 config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo

----------------------------------------

TITLE: Setting up Fish Shell Completion
DESCRIPTION: Commands to generate and install Docker CLI completion for Fish shell.

LANGUAGE: console
CODE:
$ mkdir -p ~/.config/fish/completions\n$ docker completion fish > ~/.config/fish/completions/docker.fish

----------------------------------------

TITLE: Listing Docker Swarm Nodes
DESCRIPTION: Command to list all nodes in the swarm, showing their ID, hostname, status, availability, and manager status. Must be run from a manager node.

LANGUAGE: console
CODE:
$ docker node ls

----------------------------------------

TITLE: Disabling Dual Logging Cache Configuration
DESCRIPTION: Example of Docker daemon configuration to disable dual logging cache when using Splunk driver

LANGUAGE: console
CODE:
{
  "log-driver": "splunk",
  "log-opts": {
    "cache-disabled": "true",
    ... (options for "splunk" logging driver)
  }
}

----------------------------------------

TITLE: Environment Configuration for Production
DESCRIPTION: Environment variable configuration for using the live AccuWeather API

LANGUAGE: plaintext
CODE:
ACCUWEATHER_API_KEY=XXXXXX
API_ENDPOINT_BASE=http://dataservice.accuweather.com

----------------------------------------

TITLE: Context Deduplication in Docker Bake
DESCRIPTION: Shows how to optimize build performance by deduplicating context transfers when building multiple targets concurrently. Includes example configurations for both the issue and solution.

LANGUAGE: hcl
CODE:
group "default" {
  targets = ["target1", "target2"]
}

target "ctx" {
  context = "."
  target = "ctx"
}

target "target1" {
  target = "target1"
  contexts = {
    ctx = "target:ctx"
  }
}

target "target2" {
  target = "target2"
  contexts = {
    ctx = "target:ctx"
  }
}

LANGUAGE: dockerfile
CODE:
FROM scratch AS ctx
COPY --link . .

FROM golang:alpine AS target1
WORKDIR /work
RUN --mount=from=ctx \
    go build -o /out/client ./cmd/client \

FROM golang:alpine AS target2
WORKDIR /work
RUN --mount=from=ctx \
    go build -o /out/server ./cmd/server

----------------------------------------

TITLE: Configuring VM Section with Compose File in Docker Extension Metadata
DESCRIPTION: This snippet demonstrates how to define the VM section using a compose.yaml file, which allows for more complex service configurations.

LANGUAGE: json
CODE:
"vm": {
    "composefile": "compose.yaml"
},

----------------------------------------

TITLE: Disabling Hardware Acceleration in Docker Desktop
DESCRIPTION: This JSON snippet demonstrates how to disable hardware acceleration in Docker Desktop by modifying the settings-store.json file.

LANGUAGE: JSON
CODE:
"disableHardwareAcceleration": true

----------------------------------------

TITLE: Configuring Docker Scout Organization
DESCRIPTION: Set the Docker organization for policy evaluation using the Docker Scout CLI.

LANGUAGE: bash
CODE:
$ docker scout config organization <ORG_NAME>

----------------------------------------

TITLE: Pruning Docker System with Time Filter
DESCRIPTION: This command prunes all unused Docker resources older than 24 hours. It demonstrates the use of the --filter flag with a time-based condition for system-wide pruning.

LANGUAGE: console
CODE:
$ docker system prune --filter "until=24h"

----------------------------------------

TITLE: Displaying Too Many Requests Error in Docker CLI
DESCRIPTION: This snippet shows the error message displayed when a user has reached the abuse rate limit. It indicates that the user has sent too many requests in a short period.

LANGUAGE: text
CODE:
Too Many Requests

----------------------------------------

TITLE: Reloading Shell Configuration
DESCRIPTION: Command to reload the Bash shell configuration after making changes.

LANGUAGE: console
CODE:
$ source ~/.bashrc

----------------------------------------

TITLE: Filtering CVEs with CISA KEV in Docker Scout CLI
DESCRIPTION: Demonstrates how to use the --only-cisa-kev flag with the docker scout cves command to filter CVEs listed in the CISA Known Exploited Vulnerabilities catalog.

LANGUAGE: console
CODE:
$ docker scout cves [IMAGE] --only-cisa-kev

----------------------------------------

TITLE: Pushing Container Volume as OCI Artifact
DESCRIPTION: Commands to create and push a container volume to Docker Hub as an OCI artifact. Requires ORAS CLI version 0.15 or later.

LANGUAGE: console
CODE:
$ touch myvolume.txt

LANGUAGE: console
CODE:
$ oras login -u hubuser registry-1.docker.io

LANGUAGE: console
CODE:
$ oras push registry-1.docker.io/docker/demo:0.0.1 \
     --artifact-type=application/vnd.docker.volume.v1+tar.gz \
     myvolume.txt:text/plain

----------------------------------------

TITLE: Building and Running the C++ Application with Docker Compose
DESCRIPTION: This command uses Docker Compose to build and run the C++ application in the foreground, allowing you to see the output in the terminal.

LANGUAGE: console
CODE:
$ docker compose up --build

----------------------------------------

TITLE: Configuring CircleCI Base Environment
DESCRIPTION: Sets up the base CircleCI configuration including the Docker image and environment variables for the workflow.

LANGUAGE: yaml
CODE:
version: 2.1

jobs:
  build:
    docker:
      - image: cimg/base:stable
    environment:
      IMAGE_TAG: docker/scout-demo-service:latest

----------------------------------------

TITLE: Configuring GitHub Actions Workflow for Docker Image Tagging and Labeling
DESCRIPTION: This YAML configuration sets up a GitHub Actions workflow to automatically manage Docker image tags and labels. It uses the Docker Metadata Action to generate tags based on various events and Git metadata, and includes steps for logging into Docker registries and building/pushing the image.

LANGUAGE: yaml
CODE:
name: ci

on:
  schedule:
    - cron: "0 10 * * *"
  push:
    branches:
      - "**"
    tags:
      - "v*.*.*"
  pull_request:

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
            name/app
            ghcr.io/username/app
          # generate Docker tags based on the following events/attributes
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

----------------------------------------

TITLE: Setting up Docker's package repository
DESCRIPTION: Command to add Docker's package repository to the system.

LANGUAGE: bash
CODE:
$ sudo dnf config-manager --add-repo https://download.docker.com/linux/rhel/docker-ce.repo

----------------------------------------

TITLE: Simple Hello World Bash Script
DESCRIPTION: Basic bash script used to demonstrate Docker layer functionality.

LANGUAGE: bash
CODE:
#!/usr/bin/env bash
echo "Hello world"

----------------------------------------

TITLE: Enrolling Organization with Docker Scout
DESCRIPTION: Enroll your organization with Docker Scout using the CLI command.

LANGUAGE: bash
CODE:
$ docker scout enroll <ORG_NAME>

----------------------------------------

TITLE: Example Mount Inspection JSON Output
DESCRIPTION: Sample JSON output from docker inspect showing bind mount configuration details.

LANGUAGE: json
CODE:
"Mounts": [
    {
        "Type": "bind",
        "Source": "/tmp/source/target",
        "Destination": "/app",
        "Mode": "",
        "RW": true,
        "Propagation": "rprivate"
    }
]

----------------------------------------

TITLE: Committing and Pushing to GitHub Repository
DESCRIPTION: Series of Git commands to stage all changes, commit them, and push to the 'main' branch of the GitHub repository.

LANGUAGE: Bash
CODE:
$ git add -A
$ git commit -m "my first commit"
$ git push -u origin main

----------------------------------------

TITLE: Custom Network Configuration in Docker Compose
DESCRIPTION: Advanced networking example showing how to define custom networks with specific drivers and options, creating isolated network segments between services.

LANGUAGE: yaml
CODE:
services:
  proxy:
    build: ./proxy
    networks:
      - frontend
  app:
    build: ./app
    networks:
      - frontend
      - backend
  db:
    image: postgres
    networks:
      - backend

networks:
  frontend:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.host_binding_ipv4: "127.0.0.1"
  backend:
    driver: custom-driver

----------------------------------------

TITLE: Installing Specific Docker Engine Version
DESCRIPTION: Commands to list available Docker versions and install a specific version of Docker Engine.

LANGUAGE: console
CODE:
# List the available versions:
$ apt-cache madison docker-ce | awk '{ print $3 }'

$ VERSION_STRING=5:version-1~raspbian.12~bookworm
$ sudo apt-get install docker-ce=$VERSION_STRING docker-ce-cli=$VERSION_STRING containerd.io docker-buildx-plugin docker-compose-plugin

----------------------------------------

TITLE: Uninstalling Old Docker Versions on RHEL
DESCRIPTION: This command removes any conflicting packages that might interfere with the installation of the official Docker Engine. It uses the dnf package manager to remove various Docker-related packages.

LANGUAGE: bash
CODE:
$ sudo dnf remove docker \
                  docker-client \
                  docker-client-latest \
                  docker-common \
                  docker-latest \
                  docker-latest-logrotate \
                  docker-logrotate \
                  docker-engine \
                  podman \
                  runc

----------------------------------------

TITLE: Starting Container and Reading Logs without Dual Logging
DESCRIPTION: Commands demonstrating container start and log reading attempt when dual logging is disabled

LANGUAGE: console
CODE:
$ docker run -d busybox --name testlog top
$ docker logs 7d6ac83a89a0
Error response from daemon: configured logging driver does not support reading

----------------------------------------

TITLE: Creating 802.1Q Trunked Macvlan Network
DESCRIPTION: Creates a macvlan network using 802.1Q VLAN trunking with eth0.10 as parent interface.

LANGUAGE: bash
CODE:
docker network create -d macvlan \
  --subnet=172.16.86.0/24 \
  --gateway=172.16.86.1 \
  -o parent=eth0.10 \
  my-8021q-macvlan-net

----------------------------------------

TITLE: Initializing Docker Swarm Volume Plugin Setup
DESCRIPTION: Series of commands to initialize a swarm manager, join a worker node, and install a sample volume plugin. Shows the basic setup required for using volume plugins in swarm mode.

LANGUAGE: console
CODE:
$ docker swarm init
Swarm initialized: current node (dxn1zf6l61qsb1josjja83ngz) is now a manager.

LANGUAGE: console
CODE:
$ docker swarm join \
  --token SWMTKN-1-49nj1cmql0jkz5s954yi3oex3nedyz0fb0xx14ie39trti4wxv-8vxv8rssmk743ojnwacrr2e7c \
  192.168.99.100:2377

LANGUAGE: console
CODE:
$ docker plugin install tiborvass/sample-volume-plugin
$ docker volume create -d tiborvass/sample-volume-plugin --name pluginVol

----------------------------------------

TITLE: Setting Dockerfile Syntax via Command Line Argument
DESCRIPTION: Shows how to use the BUILDKIT_SYNTAX build argument to specify the Dockerfile syntax image when running the docker build command.

LANGUAGE: bash
CODE:
$ docker build --build-arg BUILDKIT_SYNTAX=docker/dockerfile:1 .

----------------------------------------

TITLE: Including Multiple Compose Files with Long Syntax in YAML
DESCRIPTION: Demonstrates how to include and merge multiple Compose files using the long syntax. This allows for more complex configurations and overrides.

LANGUAGE: yaml
CODE:
include:
   - path:
       - ../commons/compose.yaml
       - ./commons-override.yaml

----------------------------------------

TITLE: Installing Docker Desktop via Command Line
DESCRIPTION: Command line installation of Docker Desktop using the installer executable with optional configuration flags.

LANGUAGE: console
CODE:
$ "Docker Desktop Installer.exe" install

----------------------------------------

TITLE: Running Docker Container without Default Seccomp Profile
DESCRIPTION: This command shows how to run a Docker container without the default seccomp profile by using the 'unconfined' option.

LANGUAGE: console
CODE:
$ docker run --rm -it --security-opt seccomp=unconfined debian:latest \
    unshare --map-root-user --user sh -c whoami

----------------------------------------

TITLE: Pruning Docker Volumes with Label Filter
DESCRIPTION: This command prunes volumes that don't have the 'keep' label. It demonstrates the use of the --filter flag with a label-based condition.

LANGUAGE: console
CODE:
$ docker volume prune --filter "label!=keep"

----------------------------------------

TITLE: Declaring External Config in Docker Compose YAML
DESCRIPTION: This example shows how to declare an external config named 'http_config', which Compose will look up instead of creating.

LANGUAGE: yaml
CODE:
configs:
  http_config:
    external: true

----------------------------------------

TITLE: Checking Docker Containers Before Cleanup
DESCRIPTION: This command lists running Docker containers, showing that task containers from the removed service may still be present for a short time after service removal.

LANGUAGE: bash
CODE:
$ docker ps

CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS     NAMES
db1651f50347        alpine:latest       "ping docker.com"        44 minutes ago      Up 46 seconds                 helloworld.5.9lkmos2beppihw95vdwxy1j3w
43bf6e532a92        alpine:latest       "ping docker.com"        44 minutes ago      Up 46 seconds                 helloworld.3.a71i8rp6fua79ad43ycocl4t2
5a0fb65d8fa7        alpine:latest       "ping docker.com"        44 minutes ago      Up 45 seconds                 helloworld.2.2jpgensh7d935qdc857pxulfr
afb0ba67076f        alpine:latest       "ping docker.com"        44 minutes ago      Up 46 seconds                 helloworld.4.1c47o7tluz7drve4vkm2m5olx
688172d3bfaa        alpine:latest       "ping docker.com"        45 minutes ago      Up About a minute             helloworld.1.74nbhb3fhud8jfrhigd7s29we

----------------------------------------

TITLE: Configuring VFS Storage Driver with Size Quota
DESCRIPTION: JSON configuration for setting VFS as the storage driver with a size limit of 256MB

LANGUAGE: json
CODE:
{
  "storage-driver": "vfs",
  "storage-opts": ["size=256M"]
}

----------------------------------------

TITLE: Cloning and Setting Up WireMock Repository
DESCRIPTION: Commands for cloning the WireMock demo repository and starting the Docker Compose stack

LANGUAGE: console
CODE:
$ git clone https://github.com/dockersamples/wiremock-node-docker
$ cd wiremock-node-docker/
$ docker compose up -d

----------------------------------------

TITLE: Debug Docker Desktop MSI Installation
DESCRIPTION: PowerShell command to run the MSI installer with verbose logging enabled for debugging installation failures.

LANGUAGE: powershell
CODE:
msiexec /i "DockerDesktop.msi" /L*V ".\msi.log"

----------------------------------------

TITLE: Base Webapp Service Configuration
DESCRIPTION: Basic compose.yaml configuration for a webapp service defining image, ports, and volumes

LANGUAGE: yaml
CODE:
webapp:
  image: examples/web
  ports:
    - "8000:8000"
  volumes:
    - "/data"

----------------------------------------

TITLE: Running C++ Application with Compose Watch
DESCRIPTION: Command to start the C++ application using Docker Compose with the watch feature enabled for real-time updates.

LANGUAGE: console
CODE:
$ docker compose watch

----------------------------------------

TITLE: Starting Docker Desktop via CLI
DESCRIPTION: The 'docker desktop start' command is used to start Docker Desktop from the command line. However, there's an important limitation when using this command via SSH on Windows systems.

LANGUAGE: shell
CODE:
docker desktop start

----------------------------------------

TITLE: Markdown Front Matter for Docker Manifest Documentation
DESCRIPTION: YAML-style front matter defining metadata for the Docker manifest documentation page. It specifies the data folder, file name, title, aliases for URL redirection, and layout template.

LANGUAGE: markdown
CODE:
---
datafolder: engine-cli
datafile: docker_manifest
title: docker manifest
aliases:
- /edge/engine/reference/commandline/manifest/
- /engine/reference/commandline/manifest/
layout: cli
---

----------------------------------------

TITLE: Uninstalling Docker Engine
DESCRIPTION: Commands to completely remove Docker Engine and its components, including configuration files and data.

LANGUAGE: console
CODE:
$ sudo apt-get purge docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin docker-ce-rootless-extras
$ sudo rm -rf /var/lib/docker
$ sudo rm -rf /var/lib/containerd
$ sudo rm /etc/apt/sources.list.d/docker.list
$ sudo rm /etc/apt/keyrings/docker.asc

----------------------------------------

TITLE: Port Warning Message in Host Network Mode
DESCRIPTION: Example console output showing the warning message when attempting to publish ports in host network mode.

LANGUAGE: console
CODE:
WARNING: Published ports are discarded when using host network mode

----------------------------------------

TITLE: Creating a Cloud Engine with CLI in Project Harmonia
DESCRIPTION: This command creates a cloud engine named 'cloudengine' with standard size and AMD64 architecture, and switches to use it immediately. It demonstrates how to set up a remote Docker context for cloud-based development.

LANGUAGE: bash
CODE:
$ docker harmonia engine create cloudengine --type "standard-amd64"  --use

----------------------------------------

TITLE: Markdown Include Statement
DESCRIPTION: A Markdown include statement that imports content from a hub-categories file

LANGUAGE: markdown
CODE:
{{% include "hub-categories.md" %}}

----------------------------------------

TITLE: Docker Compose CP Command Options Table
DESCRIPTION: Markdown table displaying the available options for the docker compose cp command, including flags for archive mode, dry run, symbolic link following, and container index selection.

LANGUAGE: markdown
CODE:
| Name                  | Type   | Default | Description                                             |
|:----------------------|:-------|:--------|:--------------------------------------------------------|
| `--all`               | `bool` |         | Include containers created by the run command           |
| `-a`, `--archive`     | `bool` |         | Archive mode (copy all uid/gid information)             |
| `--dry-run`           | `bool` |         | Execute command in dry run mode                         |
| `-L`, `--follow-link` | `bool` |         | Always follow symbol link in SRC_PATH                   |
| `--index`             | `int`  | `0`     | Index of the container if service has multiple replicas |

----------------------------------------

TITLE: Cloning the PHP Sample Application Repository
DESCRIPTION: Uses git to clone the Docker PHP sample application repository to the local machine.

LANGUAGE: console
CODE:
$ git clone https://github.com/docker/docker-php-sample

----------------------------------------

TITLE: Compose Configuration for Multi-stage Builds
DESCRIPTION: YAML configuration for building services using multi-stage targets

LANGUAGE: yaml
CODE:
services:
  a:
     build:
       target: service_a
  b:
     build:
       target: service_b

----------------------------------------

TITLE: Configuring Docker Build Environment in GitLab CI
DESCRIPTION: Sets up the Docker build environment with Docker-in-Docker (DinD) service and installs Docker Scout CLI. Includes authentication setup for Docker registry access.

LANGUAGE: yaml
CODE:
docker-build:
  image: docker:latest
  stage: build
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY

    # Install curl and the Docker Scout CLI
    - |
      apk add --update curl
      curl -sSfL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh | sh -s -- 
      apk del curl 
      rm -rf /var/cache/apk/*
    # Login to Docker Hub required for Docker Scout CLI
    - echo "$DOCKER_HUB_PAT" | docker login -u "$DOCKER_HUB_USER" --password-stdin

----------------------------------------

TITLE: Converting Certificate Format
DESCRIPTION: Command to convert a certificate from DER format to CRT format using OpenSSL.

LANGUAGE: console
CODE:
$ openssl x509 -in cacert.der -inform DER -out myca.crt

----------------------------------------

TITLE: Maximum Mode Provenance Attestation JSON Structure
DESCRIPTION: Comprehensive JSON structure showing the maximum (mode=max) provenance attestation output including detailed build information, LLB definitions, and layer metadata.

LANGUAGE: json
CODE:
{
  "_type": "https://in-toto.io/Statement/v0.1",
  "predicateType": "https://slsa.dev/provenance/v0.2",
  "subject": [
    {
      "name": "pkg:docker/<registry>/<image>@<tag/digest>?platform=<platform>",
      "digest": {
        "sha256": "e8275b2b76280af67e26f068e5d585eb905f8dfd2f1918b3229db98133cb4862"
      }
    }
  ],
  "predicate": {
    "builder": { "id": "" },
    "buildType": "https://mobyproject.org/buildkit@v1",
    "materials": [
      {
        "uri": "pkg:docker/docker/dockerfile@1",
        "digest": {
          "sha256": "9ba7531bd80fb0a858632727cf7a112fbfd19b17e94c4e84ced81e24ef1a0dbc"
        }
      },
      {
        "uri": "pkg:docker/golang@1.19.4-alpine?platform=linux%2Farm64",
        "digest": {
          "sha256": "a9b24b67dc83b3383d22a14941c2b2b2ca6a103d805cac6820fd1355943beaf1"
        }
      }
    ],
    "buildConfig": {
      "llbDefinition": [
        {
          "id": "step4",
          "op": {
            "Op": {
              "exec": {
                "meta": {
                  "args": ["/bin/sh", "-c", "go mod download -x"],
                  "env": [
                    "PATH=/go/bin:/usr/local/go/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
                    "GOLANG_VERSION=1.19.4",
                    "GOPATH=/go",
                    "CGO_ENABLED=0"
                  ],
                  "cwd": "/src"
                },
                "mounts": [
                  { "input": 0, "dest": "/", "output": 0 },
                  {
                    "input": -1,
                    "dest": "/go/pkg/mod",
                    "output": -1,
                    "mountType": 3,
                    "cacheOpt": { "ID": "//go/pkg/mod" }
                  },
                  {
                    "input": 1,
                    "selector": "/go.mod",
                    "dest": "/src/go.mod",
                    "output": -1,
                    "readonly": true
                  },
                  {
                    "input": 1,
                    "selector": "/go.sum",
                    "dest": "/src/go.sum",
                    "output": -1,
                    "readonly": true
                  }
                ]
              }
            },
            "platform": { "Architecture": "arm64", "OS": "linux" },
            "constraints": {}
          },
          "inputs": ["step3:0", "step1:0"]
        }
      ]
    },
    "metadata": {
      "buildInvocationID": "edf52vxjyf9b6o5qd7vgx0gru",
      "buildStartedOn": "2022-12-15T15:38:13.391980297Z",
      "buildFinishedOn": "2022-12-15T15:38:14.274565297Z",
      "reproducible": false,
      "completeness": {
        "parameters": true,
        "environment": true,
        "materials": false
      },
      "https://mobyproject.org/buildkit@v1#metadata": {
        "vcs": {
          "revision": "a9ba846486420e07d30db1107411ac3697ecab68-dirty",
          "source": "git@github.com:<org>/<repo>.git"
        },
        "source": {
          "locations": {
            "step4": {
              "locations": [
                {
                  "ranges": [
                    { "start": { "line": 5 }, "end": { "line": 5 } },
                    { "start": { "line": 6 }, "end": { "line": 6 } },
                    { "start": { "line": 7 }, "end": { "line": 7 } },
                    { "start": { "line": 8 }, "end": { "line": 8 } }
                  ]
                }
              ]
            }
          },
          "infos": [
            {
              "filename": "Dockerfile",
              "data": "RlJPTSBhbHBpbmU6bGF0ZXN0Cg==",
              "llbDefinition": [
                {
                  "id": "step0",
                  "op": {
                    "Op": {
                      "source": {
                        "identifier": "local://dockerfile",
                        "attrs": {
                          "local.differ": "none",
                          "local.followpaths": "[\"Dockerfile\",\"Dockerfile.dockerignore\",\"dockerfile\"]",
                          "local.session": "s4j58ngehdal1b5hn7msiqaqe",
                          "local.sharedkeyhint": "dockerfile"
                        }
                      }
                    },
                    "constraints": {}
                  }
                },
                { "id": "step1", "op": { "Op": null }, "inputs": ["step0:0"] }
              ]
            }
          ]
        },
        "layers": {
          "step2:0": [
            [
              {
                "mediaType": "application/vnd.docker.image.rootfs.diff.tar.gzip",
                "digest": "sha256:261da4162673b93e5c0e7700a3718d40bcc086dbf24b1ec9b54bca0b82300626",
                "size": 3259190
              },
              {
                "mediaType": "application/vnd.docker.image.rootfs.diff.tar.gzip",
                "digest": "sha256:bc729abf26b5aade3c4426d388b5ea6907fe357dec915ac323bb2fa592d6288f",
                "size": 286218
              },
              {
                "mediaType": "application/vnd.docker.image.rootfs.diff.tar.gzip",
                "digest": "sha256:7f1d6579712341e8062db43195deb2d84f63b0f2d1ed7c3d2074891085ea1b56",
                "size": 116878653
              },
              {
                "mediaType": "application/vnd.docker.image.rootfs.diff.tar.gzip",
                "digest": "sha256:652874aefa1343799c619d092ab9280b25f96d97939d5d796437e7288f5599c9",
                "size": 156
              }
            ]
          ]
        }
      }
    }
  }
}

----------------------------------------

TITLE: Pushing All Images from a Repository to Docker Scout
DESCRIPTION: This command watches a repository and pushes all images, not just new ones, to Docker Scout.

LANGUAGE: console
CODE:
$ docker scout watch--org my-org --repository registry.example.com/my-service --all-images

----------------------------------------

TITLE: Docker Volume Configuration Examples
DESCRIPTION: The volumes attribute in Docker allows defining mount points that can be accessed by service containers. Supports volume, bind, tmpfs, and npipe mount types. Volumes can be declared at service level for single-service use or at top-level for multi-service sharing.

LANGUAGE: docker
CODE:
volumes:

----------------------------------------

TITLE: Listing Docker Containers in TypeScript
DESCRIPTION: Demonstrates how to list running Docker containers using the Docker extension API. By default, it lists only running containers, but can be configured to show all containers including stopped ones.

LANGUAGE: typescript
CODE:
const containers = await ddClient.docker.listContainers();

----------------------------------------

TITLE: Docker Run Command with Log Rotation
DESCRIPTION: Example showing how to start an Alpine container with log rotation settings, specifying maximum file size and number of log files.

LANGUAGE: console
CODE:
$ docker run -it --log-opt max-size=10m --log-opt max-file=3 alpine ash

----------------------------------------

TITLE: Inspecting Multi-Arch Docker Extension Image
DESCRIPTION: Uses Docker Buildx imagetools to inspect the manifest of a multi-arch Docker extension image, verifying its availability for different architectures.

LANGUAGE: console
CODE:
$ docker buildx imagetools inspect username/my-extension:0.0.1

----------------------------------------

TITLE: Handling Port Allocation Errors in Docker Desktop
DESCRIPTION: These console snippets show error messages encountered when a port is already in use or allocated.

LANGUAGE: console
CODE:
Bind for 0.0.0.0:8080 failed: port is already allocated

LANGUAGE: console
CODE:
listen tcp:0.0.0.0:8080: bind: address is already in use

----------------------------------------

TITLE: Homebrew Docker Desktop Reinstallation
DESCRIPTION: Commands to reinstall Docker Desktop using Homebrew package manager on macOS.

LANGUAGE: bash
CODE:
brew update
brew reinstall --cask docker

----------------------------------------

TITLE: Inspecting Node Status in Docker Swarm
DESCRIPTION: This command provides detailed information about a specific node, including its availability status.

LANGUAGE: bash
CODE:
$ docker node inspect --pretty worker1

----------------------------------------

TITLE: Adding a signer to a repository using Docker Trust
DESCRIPTION: Initializes a repository and adds a signer's public key to the targets/releases delegation.

LANGUAGE: bash
CODE:
$ docker trust signer add --key cert.pem jeff registry.example.com/admin/demo

Adding signer "jeff" to registry.example.com/admin/demo...
Initializing signed repository for registry.example.com/admin/demo...
Enter passphrase for root key with ID f6c6a4b: 
Enter passphrase for new repository key with ID b0014f8: 
Repeat passphrase for new repository key with ID b0014f8: 
Successfully initialized "registry.example.com/admin/demo"
Successfully added signer: jeff to registry.example.com/admin/demo

----------------------------------------

TITLE: AWS S3 Client Configuration in Node.js
DESCRIPTION: JavaScript code showing how to configure the AWS S3 client to connect to LocalStack using environment variables.

LANGUAGE: js
CODE:
const s3 = new S3Client({
  endpoint: process.env.S3_ENDPOINT_URL,
  credentials: {
    accessKeyId: process.env.AWS_ACCESS_KEY_ID || 'default_access_key',
    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY || 'default_secret_key',  
  },
});

----------------------------------------

TITLE: Displaying Docker Service Tasks in Quiet Mode in Bash
DESCRIPTION: This command uses the '--quiet' option to display only the task IDs of the 'redis' service tasks.

LANGUAGE: bash
CODE:
docker service ps --quiet redis

----------------------------------------

TITLE: Listing Docker Images
DESCRIPTION: Command to list all downloaded Docker images on the local system

LANGUAGE: bash
CODE:
docker image ls

----------------------------------------

TITLE: Enabling Docker Autostart with Systemd
DESCRIPTION: Commands to enable Docker and containerd services to start automatically on system boot using systemd.

LANGUAGE: bash
CODE:
sudo systemctl enable docker.service
sudo systemctl enable containerd.service

----------------------------------------

TITLE: Starting Docker Daemon with Systemd
DESCRIPTION: This command uses systemctl to start the Docker daemon service on systems that use systemd, such as Ubuntu and Debian. It requires sudo privileges.

LANGUAGE: console
CODE:
$ sudo systemctl start docker

----------------------------------------

TITLE: Building Multi-Arch Docker Extension with Buildx
DESCRIPTION: Uses Docker Buildx to build and push a Docker extension for multiple architectures (linux/amd64 and linux/arm64) to Docker Hub.

LANGUAGE: console
CODE:
$ docker buildx build --push --platform=linux/amd64,linux/arm64 --tag=username/my-extension:0.0.1 .

----------------------------------------

TITLE: Cache Persistence Example
DESCRIPTION: Series of commands demonstrating how to create, remove, and recreate a builder while maintaining cache state using the --keep-state flag.

LANGUAGE: console
CODE:
# setup a builder
$ docker buildx create --name=container --driver=docker-container --use --bootstrap
container
$ docker buildx ls
NAME/NODE       DRIVER/ENDPOINT              STATUS   BUILDKIT PLATFORMS
container *     docker-container
  container0    desktop-linux                running  v0.10.5  linux/amd64
$ docker volume ls
DRIVER    VOLUME NAME
local     buildx_buildkit_container0_state

# remove the builder while persisting state
$ docker buildx rm --keep-state container
$ docker volume ls
DRIVER    VOLUME NAME
local     buildx_buildkit_container0_state

# the newly created driver with the same name will have all the state of the previous one!
$ docker buildx create --name=container --driver=docker-container --use --bootstrap
container

----------------------------------------

TITLE: Building Docker Image for Java Application
DESCRIPTION: This shell command builds a Docker image for the Java application using the Dockerfile in the current directory. It tags the image as 'my-java-app'.

LANGUAGE: Shell
CODE:
docker build -t my-java-app .

----------------------------------------

TITLE: Running a Named Rust Docker Container
DESCRIPTION: Start a Rust Docker container with a custom name for easier identification.

LANGUAGE: bash
CODE:
$ docker run -d -p 3001:8000 --name docker-rust-container docker-rust-image

----------------------------------------

TITLE: Same-File Service Extension
DESCRIPTION: Demonstrates how to extend services within the same Compose file.

LANGUAGE: yaml
CODE:
services:
  web:
    build: alpine
    extends: webapp
  webapp:
    environment:
      - DEBUG=1

----------------------------------------

TITLE: Configuring Docker Daemon with Registry Mirror in JSON
DESCRIPTION: This JSON configuration for the Docker daemon specifies a registry mirror. It should be added to the /etc/docker/daemon.json file to make the change persistent.

LANGUAGE: json
CODE:
{
  "registry-mirrors": ["https://<my-docker-mirror-host>"]
}

----------------------------------------

TITLE: Enabling Hyper-V for Docker Desktop on Windows
DESCRIPTION: This console command enables Hyper-V at Windows startup for Docker Desktop.

LANGUAGE: console
CODE:
bcdedit /set hypervisorlaunchtype auto

----------------------------------------

TITLE: Dockerfile with SSH Mount for Private Repository Access
DESCRIPTION: Advanced Dockerfile configuration that uses SSH mounting to access private GitHub repositories and fetch Go modules securely.

LANGUAGE: dockerfile
CODE:
# syntax=docker/dockerfile:1

ARG GO_VERSION="{{% param example_go_version %}}"

FROM golang:${GO_VERSION}-alpine AS base
ENV CGO_ENABLED=0
ENV GOPRIVATE="github.com/foo/*"
RUN apk add --no-cache file git rsync openssh-client
RUN mkdir -p -m 0700 ~/.ssh && ssh-keyscan github.com >> ~/.ssh/known_hosts
WORKDIR /src

FROM base AS vendor
RUN --mount=type=ssh <<EOT
  set -e
  echo "Setting Git SSH protocol"
  git config --global url."git@github.com:".insteadOf "https://github.com/"
  (
    set +e
    ssh -T git@github.com
    if [ ! "$?" = "1" ]; then
      echo "No GitHub SSH key loaded exiting..."
      exit 1
    fi
  )
EOT
RUN --mount=type=bind,target=. \
    --mount=type=cache,target=/go/pkg/mod \
    --mount=type=ssh \
    go mod download -x

FROM vendor AS build
RUN --mount=type=bind,target=. \
    --mount=type=cache,target=/go/pkg/mod \
    --mount=type=cache,target=/root/.cache \
    go build ...

----------------------------------------

TITLE: Docker Daemon IPv6 Configuration
DESCRIPTION: JSON configuration for enabling IPv6 on the default bridge network in Docker daemon

LANGUAGE: json
CODE:
{
  "ipv6": true,
  "fixed-cidr-v6": "2001:db8:1::/64"
}

----------------------------------------

TITLE: Manually uninstalling Docker Compose CLI plugin for current user
DESCRIPTION: Command to manually remove the Docker Compose CLI plugin for the current user, typically used when installed via curl.

LANGUAGE: console
CODE:
$ rm $DOCKER_CONFIG/cli-plugins/docker-compose

----------------------------------------

TITLE: Using a Wrapper Script with JSON-formatted ENTRYPOINT
DESCRIPTION: A workaround that uses a wrapper script to enable shell features while still using JSON format for ENTRYPOINT.

LANGUAGE: dockerfile
CODE:
FROM alpine
RUN apk add bash
COPY --chmod=755 <<EOT /entrypoint.sh
#!/usr/bin/env bash
set -e
my-background-process &
my-program start
EOT
ENTRYPOINT ["/entrypoint.sh"]

----------------------------------------

TITLE: Updating Compose file for .NET application with database
DESCRIPTION: This YAML snippet defines a Compose file for a .NET application with a PostgreSQL database service and volume for data persistence.

LANGUAGE: yaml
CODE:
services:
  server:
    build:
      context: .
      target: final
    ports:
      - 8080:8080
    depends_on:
      db:
        condition: service_healthy
  db:
    image: postgres
    restart: always
    user: postgres
    secrets:
      - db-password
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=example
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    expose:
      - 5432
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
volumes:
  db-data:
secrets:
  db-password:
    file: db/password.txt

----------------------------------------

TITLE: Configuring Registry Mirror in BuildKit
DESCRIPTION: TOML configuration for setting up a registry mirror in BuildKit, redirecting docker.io pulls to mirror.gcr.io with debug logging enabled.

LANGUAGE: toml
CODE:
debug = true
[registry."docker.io"]
  mirrors = ["mirror.gcr.io"]

----------------------------------------

TITLE: Building and Installing Docker Desktop Extension
DESCRIPTION: These commands demonstrate how to build the Docker extension image and install it in Docker Desktop.

LANGUAGE: bash
CODE:
docker build --tag=awesome-inc/my-extension:latest .
docker extension install awesome-inc/my-extension:latest

----------------------------------------

TITLE: Checking Node Availability in Docker Swarm
DESCRIPTION: This command lists all nodes in the swarm and their current status, including availability.

LANGUAGE: bash
CODE:
$ docker node ls

----------------------------------------

TITLE: Configuring SSH Agent Forwarding in Docker Compose
DESCRIPTION: Illustrates how to enable SSH agent forwarding in a Docker Compose service by binding the SSH agent socket and setting the SSH_AUTH_SOCK environment variable.

LANGUAGE: yaml
CODE:
services:
  web:
    image: nginx:alpine
    volumes:
      - type: bind
        source: /run/host-services/ssh-auth.sock
        target: /run/host-services/ssh-auth.sock
    environment:
      - SSH_AUTH_SOCK=/run/host-services/ssh-auth.sock

----------------------------------------

TITLE: Streaming Docker CLI Output in TypeScript
DESCRIPTION: Shows how to stream the output of a Docker CLI command execution. This is useful for long-running commands or when you need to process the output as a stream.

LANGUAGE: typescript
CODE:
await ddClient.docker.cli.exec("logs", ["-f", "..."], {
  stream: {
    onOutput(data): void {
        // As we can receive both `stdout` and `stderr`, we wrap them in a JSON object
        JSON.stringify(
          {
            stdout: data.stdout,
            stderr: data.stderr,
          },
          null,
          "  "
        );
    },
    onError(error: any): void {
      console.error(error);
    },
    onClose(exitCode: number): void {
      console.log("onClose with exit code " + exitCode);
    },
  },
});

----------------------------------------

TITLE: Database Initialization SQL Script
DESCRIPTION: SQL script to create a sample database with users table and initial data

LANGUAGE: sql
CODE:
CREATE DATABASE sampledb;

\c sampledb

CREATE TABLE users (
  id SERIAL PRIMARY KEY,
  name VARCHAR(50),
  email VARCHAR(100) UNIQUE
);

INSERT INTO users (name, email) VALUES
  ('Alpha', 'alpha@example.com'),
  ('Beta', 'beta@example.com'),
  ('Gamma', 'gamma@example.com');

----------------------------------------

TITLE: Updating Python Application Code
DESCRIPTION: Example of updating the Python application code to demonstrate automatic rebuilding with Compose Watch.

LANGUAGE: diff
CODE:
-    return 'Hello, Docker!'
+    return 'Hello, Docker!!!'

----------------------------------------

TITLE: Running Container with IPv6 Network
DESCRIPTION: Commands for running and testing a container with IPv6 connectivity

LANGUAGE: console
CODE:
$ docker run --rm --network ip6net -p 80:80 traefik/whoami

LANGUAGE: console
CODE:
$ curl http://[::1]:80

----------------------------------------

TITLE: Combining Multiple Docker Filters
DESCRIPTION: Demonstrates how to combine multiple filters to show images matching either alpine:latest or busybox, illustrating logical OR operation with filters.

LANGUAGE: console
CODE:
$ docker images
REPOSITORY   TAG       IMAGE ID       CREATED       SIZE
ubuntu       20.04     33a5cc25d22c   2 hours ago   101MB
ubuntu       18.04     152dc042452c   2 hours ago   88.1MB
alpine       3.16      a8cbb8c69ee7   2 hours ago   8.67MB
alpine       latest    7144f7bab3d4   2 hours ago   11.7MB
busybox      uclibc    3e516f71d880   2 hours ago   2.4MB
busybox      glibc     7338d0c72c65   2 hours ago   6.09MB
$ docker images --filter reference=alpine:latest --filter=reference=busybox
REPOSITORY   TAG       IMAGE ID       CREATED       SIZE
alpine       latest    7144f7bab3d4   2 hours ago   11.7MB
busybox      uclibc    3e516f71d880   2 hours ago   2.4MB
busybox      glibc     7338d0c72c65   2 hours ago   6.09MB

----------------------------------------

TITLE: Verifying AUFS Kernel Support in Linux
DESCRIPTION: This command checks if the Linux kernel supports AUFS by searching for 'aufs' in the /proc/filesystems file.

LANGUAGE: bash
CODE:
$ grep aufs /proc/filesystems

nodev   aufs

----------------------------------------

TITLE: Removing Docker Data and Configuration on RHEL
DESCRIPTION: These commands remove the Docker data directory and containerd state directory. This step is typically performed after uninstalling Docker to clean up any remaining data and configuration files.

LANGUAGE: bash
CODE:
$ sudo rm -rf /var/lib/docker
$ sudo rm -rf /var/lib/containerd

----------------------------------------

TITLE: Including External Compose Files with Short Syntax in YAML
DESCRIPTION: Demonstrates how to use the short syntax to include external Compose files and reference services defined in them. This allows for modular Compose file organization and reuse of common configurations.

LANGUAGE: yaml
CODE:
include:
  - ../commons/compose.yaml
  - ../another_domain/compose.yaml

services:
  webapp:
    depends_on:
      - included-service # defined by another_domain

----------------------------------------

TITLE: Pulling Docker Image from Personal Repository
DESCRIPTION: Command to pull a Docker image from a personal namespace repository. This is the first step in moving an image between repositories.

LANGUAGE: console
CODE:
$ docker pull namespace1/docker101tutorial

----------------------------------------

TITLE: Building and Running Test Container
DESCRIPTION: Commands showing how to build and run the test container with restart policy, demonstrating foreground container behavior.

LANGUAGE: console
CODE:
$ docker build -t startstop .
$ docker run --restart always startstop
Starting...
1
2
3
4
5
Exiting...
$ docker ps
CONTAINER ID   IMAGE       COMMAND                  CREATED         STATUS         PORTS     NAMES
081991b35afe   startstop   "/bin/sh -c /start.sh"   9 seconds ago   Up 4 seconds             gallant_easley
$ docker container attach 081991b35afe
4
5
Exiting...
$

----------------------------------------

TITLE: Pulling Docker Images via CLI
DESCRIPTION: Command to download a Docker image from Docker Hub using the docker pull command

LANGUAGE: bash
CODE:
docker pull docker/welcome-to-docker

----------------------------------------

TITLE: Disabling Docker Autostart
DESCRIPTION: Commands to disable automatic startup of Docker and containerd services on system boot.

LANGUAGE: bash
CODE:
sudo systemctl disable docker.service
sudo systemctl disable containerd.service

----------------------------------------

TITLE: OpenTelemetry Collector Configuration
DESCRIPTION: Configures the OpenTelemetry collector to receive signals over gRPC and HTTP, and establish an endpoint for Prometheus to scrape metrics from.

LANGUAGE: yaml
CODE:
# Receive signals over gRPC and HTTP
receivers:
  otlp:
    protocols:
      grpc:
      http:

# Establish an endpoint for Prometheus to scrape from
exporters:
  prometheus:
    endpoint: "0.0.0.0:8889"

service:
  pipelines:
    metrics:
      receivers: [otlp]
      exporters: [prometheus]

----------------------------------------

TITLE: Stopping a Docker Container
DESCRIPTION: Stop a running Docker container using its name or ID.

LANGUAGE: bash
CODE:
$ docker stop wonderful_kalam

----------------------------------------

TITLE: Running Profiled Services in Docker Compose
DESCRIPTION: This console snippet shows how to run a profiled service (db-migrations) without explicitly enabling its profile. The profile is automatically enabled when the service is targeted.

LANGUAGE: console
CODE:
# Only start backend and db
$ docker compose up -d

# This runs db-migrations (and,if necessary, start db)
# by implicitly enabling the profiles `tools`
$ docker compose run db-migrations

----------------------------------------

TITLE: Managing Certificates in Running Container
DESCRIPTION: Series of commands for copying and installing CA certificates in a running Docker container.

LANGUAGE: console
CODE:
$ docker cp myca.crt <containerid>:/tmp

LANGUAGE: console
CODE:
$ docker exec -it <containerid> sh

LANGUAGE: console
CODE:
# apt-get update && apt-get install -y ca-certificates

LANGUAGE: console
CODE:
# cp /tmp/myca.crt /usr/local/share/ca-certificates/root_cert.crt

LANGUAGE: console
CODE:
# update-ca-certificates

LANGUAGE: console
CODE:
# curl https://example.com

----------------------------------------

TITLE: Configuring Build Cascade in YAML
DESCRIPTION: YAML configuration that sets the build.render property to 'never' within a cascade block. This configuration affects how builds are rendered in the project.

LANGUAGE: yaml
CODE:
---
cascade:
  build:
    render: never
---

----------------------------------------

TITLE: Running a Rust Docker Container in Detached Mode
DESCRIPTION: Start a Rust Docker container in the background using detached mode.

LANGUAGE: bash
CODE:
$ docker run -d -p 3001:8000 docker-rust-image

----------------------------------------

TITLE: Sample Release Note Entry
DESCRIPTION: Example of how release notes are structured in the document, showing version number, release date, upgrades, new features, and bug fixes.

LANGUAGE: Markdown
CODE:
### Docker Community Edition 18.03.1-ce-win65 2018-04-30

* Upgrades
  - [Docker 18.03.1-ce](https://github.com/docker/docker-ce/releases/tag/v18.03.1-ce)
  - [Docker compose 1.21.1](https://github.com/docker/compose/releases/tag/1.21.1)
  - [Notary 0.6.1](https://github.com/docker/notary/releases/tag/v0.6.1)

* Bug fixes and minor changes
  - Fix startup failure when the HOME environment variable is already defined (typically started from the command line). Fixes [docker/for-win#1880](https://github.com/docker/for-win/issues/1880)
  - Fix startup failure due to incompatibility with other programs (like Razer Synapse 3). Fixes [docker/for-win#1723](https://github.com/docker/for-win/issues/1723)

----------------------------------------

TITLE: Configuring Docker Container Registry Build Settings
DESCRIPTION: This YAML snippet defines build settings for a Docker container registry page. It specifies that the page should never be rendered and sets the title for the content.

LANGUAGE: yaml
CODE:
build:
  render: never
title: Container registries

----------------------------------------

TITLE: Port Range Mapping Configuration
DESCRIPTION: Example of mapping container port to a range of host ports between 8000-9000.

LANGUAGE: console
CODE:
$ docker run -d -p 8000-9000:5000 training/webapp python app.py

----------------------------------------

TITLE: Docker Build and Security Scanning Script
DESCRIPTION: Implements conditional Docker image building and security scanning logic. Performs CVE scanning on default branch builds and comparison scanning on feature branch builds.

LANGUAGE: yaml
CODE:
script:
  - |
    if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
      tag=""
      echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
    else
      tag=":$CI_COMMIT_REF_SLUG"
      echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
    fi
  - docker build --pull -t "$CI_REGISTRY_IMAGE${tag}" .
  - |
    if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
      # Get a CVE report for the built image and fail the pipeline when critical or high CVEs are detected
      docker scout cves "$CI_REGISTRY_IMAGE${tag}" --exit-code --only-severity critical,high    
    else
      # Compare image from branch with latest image from the default branch and fail if new critical or high CVEs are detected
      docker scout compare "$CI_REGISTRY_IMAGE${tag}" --to "$CI_REGISTRY_IMAGE:latest" --exit-code --only-severity critical,high --ignore-unchanged
    fi

  - docker push "$CI_REGISTRY_IMAGE${tag}"

----------------------------------------

TITLE: Defining CircleCI Workflow Steps
DESCRIPTION: Configures the steps for checking out code, setting up Docker environment, installing Docker Scout, building the image, and running security scans. Includes authentication with Docker Hub and CVE scanning configuration.

LANGUAGE: yaml
CODE:
steps:
  # Checkout the repository files
  - checkout
  
  # Set up a separate Docker environment to run `docker` commands in
  - setup_remote_docker:
      version: 20.10.24

  # Install Docker Scout and login to Docker Hub
  - run:
      name: Install Docker Scout
      command: |
        env
        curl -sSfL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh | sh -s -- -b /home/circleci/bin
        echo $DOCKER_HUB_PAT | docker login -u $DOCKER_HUB_USER --password-stdin

  # Build the Docker image
  - run:
      name: Build Docker image
      command: docker build -t $IMAGE_TAG .
  
  # Run Docker Scout          
  - run:
      name: Scan image for CVEs
      command: |
        docker-scout cves $IMAGE_TAG --exit-code --only-severity critical,high

----------------------------------------

TITLE: Formatting Go Code in Documentation
DESCRIPTION: Shows how to format Go code in documentation using the 'go' language code block. This example demonstrates a Go map with nested structures.

LANGUAGE: go
CODE:
incoming := map[string]interface{}{
    "asdf": 1,
    "qwer": []interface{}{},
    "zxcv": []interface{}{
        map[string]interface{}{},
        true,
        int(1e9),
        "tyui",
    },
}

----------------------------------------

TITLE: Pass Initialization Output Example
DESCRIPTION: Example output showing successful initialization of the pass password store.

LANGUAGE: console
CODE:
mkdir: created directory '/home/molly/.password-store/'
Password store initialized for <generated_gpg-id_public_key>

----------------------------------------

TITLE: Uninstalling Docker Desktop on Ubuntu and Debian
DESCRIPTION: Commands to remove Docker Desktop and perform a complete cleanup on Ubuntu and Debian systems using apt package manager.

LANGUAGE: bash
CODE:
$ sudo apt remove docker-desktop
$ rm -r $HOME/.docker/desktop
$ sudo rm /usr/local/bin/com.docker.cli
$ sudo apt purge docker-desktop

----------------------------------------

TITLE: JSON Formatting in Docker Output
DESCRIPTION: Demonstrates how to format Docker inspect output as JSON for the Mounts field.

LANGUAGE: console
CODE:
$ docker inspect --format '{{json .Mounts}}' container

----------------------------------------

TITLE: Verifying Docker Compose Installation
DESCRIPTION: Command to verify Docker Compose installation and its expected output showing the version number.

LANGUAGE: console
CODE:
$ docker compose version

LANGUAGE: text
CODE:
Docker Compose version vN.N.N

----------------------------------------

TITLE: Using Negated Label Filters in Docker
DESCRIPTION: Examples of using negated filters with Docker container prune command, showing both single and multiple negated label filters.

LANGUAGE: console
CODE:
$ docker container prune --filter "label!=foo"

LANGUAGE: console
CODE:
$ docker container prune --filter "label!=foo" --filter "label!=bar"

----------------------------------------

TITLE: Pulling Ubuntu Docker Image
DESCRIPTION: This command demonstrates pulling a Docker image (ubuntu:latest) comprising five layers using the docker pull command.

LANGUAGE: bash
CODE:
$ docker pull ubuntu

Using default tag: latest
latest: Pulling from library/ubuntu
b6f892c0043b: Pull complete
55010f332b04: Pull complete
2955fb827c94: Pull complete
3deef3fcbd30: Pull complete
cf9722e506aa: Pull complete
Digest: sha256:382452f82a8bbd34443b2c727650af46aced0f94a44463c62a9848133ecb1aa8
Status: Downloaded newer image for ubuntu:latest

----------------------------------------

TITLE: Installing Docker SBOM CLI Plugin
DESCRIPTION: Command to install the Docker SBOM CLI plugin for Docker Engine environments

LANGUAGE: bash
CODE:
$ curl -sSfL https://raw.githubusercontent.com/docker/sbom-cli-plugin/main/install.sh | sh -s --

----------------------------------------

TITLE: Rebuilding and Pushing Updated Image
DESCRIPTION: Rebuild the Docker image with the updated package version and push it to Docker Hub.

LANGUAGE: bash
CODE:
$ docker build --push -t <ORG_NAME>/scout-demo:v2 .

----------------------------------------

TITLE: GPG Key Generation Output Example
DESCRIPTION: Example output showing the interactive GPG key generation process including user ID construction.

LANGUAGE: console
CODE:
...
GnuPG needs to construct a user ID to identify your key.

Real name: Molly
Email address: molly@example.com
You selected this USER-ID:
   "Molly <molly@example.com>"

Change (N)ame, (E)mail, or (O)kay/(Q)uit? O
...
pubrsa3072 2022-03-31 [SC] [expires: 2024-03-30]
 <generated gpg-id public key>
uid          Molly <molly@example.com>
subrsa3072  2022-03-31 [E] [expires: 2024-03-30]

----------------------------------------

TITLE: Sample JSON Response from Java API Endpoint
DESCRIPTION: This JSON snippet shows a sample response from the /vets endpoint of the Spring Pet Clinic application. It demonstrates the structure of the data returned by the API.

LANGUAGE: json
CODE:
{
  "vetList": [
    {
      "id": 1,
      "firstName": "James",
      "lastName": "Carter",
      "specialties": [],
      "nrOfSpecialties": 0,
      "new": false
    },
    {
      "id": 2,
      "firstName": "Helen",
      "lastName": "Leary",
      "specialties": [{ "id": 1, "name": "radiology", "new": false }],
      "nrOfSpecialties": 1,
      "new": false
    },
    {
      "id": 3,
      "firstName": "Linda",
      "lastName": "Douglas",
      "specialties": [
        { "id": 3, "name": "dentistry", "new": false },
        { "id": 2, "name": "surgery", "new": false }
      ],
      "nrOfSpecialties": 2,
      "new": false
    },
    {
      "id": 4,
      "firstName": "Rafael",
      "lastName": "Ortega",
      "specialties": [{ "id": 2, "name": "surgery", "new": false }],
      "nrOfSpecialties": 1,
      "new": false
    },
    {
      "id": 5,
      "firstName": "Henry",
      "lastName": "Stevens",
      "specialties": [{ "id": 1, "name": "radiology", "new": false }],
      "nrOfSpecialties": 1,
      "new": false
    },
    {
      "id": 6,
      "firstName": "Sharon",
      "lastName": "Jenkins",
      "specialties": [],
      "nrOfSpecialties": 0,
      "new": false
    }
  ]
}

----------------------------------------

TITLE: Markdown Markup for Accordion Component in Docker Docs
DESCRIPTION: This snippet provides the raw markdown markup used to create an accordion component in Docker's documentation. It includes the necessary shortcode syntax and demonstrates how to embed a code block within the accordion.

LANGUAGE: markdown
CODE:
{{</* accordion title="Accordion example" */>}}

```console
$ docker run hello-world
```

{{</* /accordion */>}}

----------------------------------------

TITLE: Configuring Max-Level Provenance Attestations in GitHub Actions
DESCRIPTION: This YAML snippet demonstrates how to set up a GitHub Actions workflow to build and push a Docker image with max-level provenance attestations. It includes steps for logging into Docker Hub, setting up Docker Buildx, extracting metadata, and building/pushing the image with provenance mode set to max.

LANGUAGE: yaml
CODE:
name: ci

on:
  push:

env:
  IMAGE_NAME: user/app

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}

      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          push: true
          provenance: mode=max
          tags: ${{ steps.meta.outputs.tags }}

----------------------------------------

TITLE: Listing Docker Containers
DESCRIPTION: Display a list of running Docker containers using the docker ps command.

LANGUAGE: bash
CODE:
$ docker ps

----------------------------------------

TITLE: Multiple Service Extension Example
DESCRIPTION: Shows how to extend services while including both the original and extended services in the final configuration.

LANGUAGE: yaml
CODE:
services:
  web:
    build: alpine
    command: echo
    extends:
      file: common-services.yml
      service: webapp
  webapp:
    extends:
      file: common-services.yml
      service: webapp

----------------------------------------

TITLE: Configuring bash-completion in Shell Config
DESCRIPTION: Commands to add bash-completion source configuration to shell initialization files (.bashrc or .bash_profile).

LANGUAGE: bash
CODE:
# On Linux:\ncat <<EOT >> ~/.bashrc\nif [ -f /etc/bash_completion ]; then\n    . /etc/bash_completion\nfi\nEOT\n\n# On macOS / with Homebrew:\ncat <<EOT >> ~/.bash_profile\n[[ -r "$(brew --prefix)/etc/profile.d/bash_completion.sh" ]] && . "$(brew --prefix)/etc/profile.d/bash_completion.sh"\nEOT

----------------------------------------

TITLE: Enabling User Namespace Remapping in Docker Daemon Configuration
DESCRIPTION: JSON configuration in /etc/docker/daemon.json to enable user namespace remapping for Docker. This example uses the 'testuser' for remapping.

LANGUAGE: json
CODE:
{
  "userns-remap": "testuser"
}

----------------------------------------

TITLE: Main Execution Loop for Text Classification
DESCRIPTION: This snippet contains the main execution loop that continuously prompts the user for input text, analyzes its sentiment, and prints the results along with the model's accuracy and classification report.

LANGUAGE: python
CODE:
if __name__ == "__main__":
    while True:
        input_text = input("Enter the text for classification (type 'exit' to end): ")

        if input_text.lower() == 'exit':
            print("Exiting...")
            break

        input_text_score = sia.polarity_scores(input_text)["compound"]
        input_text_classification = 0 if input_text_score > threshold else 1

        print(f"Accuracy: {accuracy:.2f}")
        print("\nVADER Classification Report:")
        print(report_vader)

        print(f"\nTest Text (Positive): '{input_text}'")
        print(f"Predicted Sentiment: {'Positive' if input_text_classification == 0 else 'Negative'}")

----------------------------------------

TITLE: Server Output Display
DESCRIPTION: Output showing the Echo web framework server starting up inside the container.

LANGUAGE: text
CODE:
   ____    __
  / __/___/ /  ___
 / _// __/ _ \/ _ \
/___/\__/_//_/\___/ v4.10.2
High performance, minimalist Go web framework
https://echo.labstack.com
____________________________________O/_______
                                    O\
⇨ http server started on [::]:8080

----------------------------------------

TITLE: Listing Docker Images in TypeScript
DESCRIPTION: Shows how to retrieve a list of local Docker images using the Docker extension API. This can be used to display available images or perform operations on them.

LANGUAGE: typescript
CODE:
const images = await ddClient.docker.listImages();

----------------------------------------

TITLE: Building Docker Image with Custom Build Argument
DESCRIPTION: This console command shows how to build a Docker image using a custom build argument to override the default value specified in the Dockerfile.

LANGUAGE: console
CODE:
$ docker buildx build --build-arg ALPINE_VERSION=edge .

----------------------------------------

TITLE: Using Interpolated Variables with Include in YAML
DESCRIPTION: Shows how to use interpolated variables with the 'include' directive, allowing for dynamic inclusion of Compose files based on environment variables. This example also demonstrates specifying mandatory variables.

LANGUAGE: yaml
CODE:
include:
  -${INCLUDE_PATH:?FOO}/compose.yaml

----------------------------------------

TITLE: Cloning TensorFlow.js Face Detection Repository
DESCRIPTION: Command to clone the sample application repository containing the TensorFlow.js face detection implementation.

LANGUAGE: console
CODE:
$ git clone https://github.com/harsh4870/TensorJS-Face-Detection

----------------------------------------

TITLE: Dockerfile ARG Example
DESCRIPTION: Shows how to use build arguments in a Dockerfile with the ARG instruction.

LANGUAGE: dockerfile
CODE:
ARG GIT_COMMIT
RUN echo "Based on commit: $GIT_COMMIT"

----------------------------------------

TITLE: Installing Latest Docker Engine on Fedora
DESCRIPTION: Command to install the latest version of Docker Engine and its components including CLI, containerd, buildx plugin, and compose plugin.

LANGUAGE: console
CODE:
$ sudo dnf install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

----------------------------------------

TITLE: Installing Latest Docker Engine on Fedora
DESCRIPTION: Command to install the latest version of Docker Engine and its components including CLI, containerd, buildx plugin, and compose plugin.

LANGUAGE: console
CODE:
$ sudo dnf install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

----------------------------------------

TITLE: Viewing Docker Compose Logs
DESCRIPTION: Command to view the logs of running containers for debugging purposes.

LANGUAGE: console
CODE:
$ docker compose logs

----------------------------------------

TITLE: Defining DesktopUI Interface Properties in TypeScript
DESCRIPTION: Interface definition for Docker Desktop's UI functionality, including readonly properties for toast notifications, dialog management, and navigation between different sections of the application. Available since version 0.2.0 of the SDK.

LANGUAGE: typescript
CODE:
interface DesktopUI {
  readonly toast: Toast;
  readonly dialog: Dialog;
  readonly navigate: NavigationIntents;
}

----------------------------------------

TITLE: Accessing VM shell in Docker Desktop 2.3.0.2
DESCRIPTION: Command to open a shell in the Docker Desktop virtual machine after removal of the serial console from hyperkit.

LANGUAGE: Shell
CODE:
nc -U ~/Library/Containers/com.docker.docker/Data/debug-shell.sock

----------------------------------------

TITLE: Handling Certificate Errors in Docker Desktop
DESCRIPTION: This snippet shows the error message encountered when certificates are not set up correctly for Docker Desktop, along with the corresponding registry logs.

LANGUAGE: console
CODE:
Error response from daemon: Get http://192.168.203.139:5858/v2/: malformed HTTP response "\x15\x03\x01\x00\x02\x02"

LANGUAGE: console
CODE:
2017/06/20 18:15:30 http: TLS handshake error from 192.168.203.139:52882: tls: client didn't provide a certificate
2017/06/20 18:15:30 http: TLS handshake error from 192.168.203.139:52883: tls: first record does not look like a TLS handshake

----------------------------------------

TITLE: Downloading NLTK Resources for Sentiment Analysis
DESCRIPTION: This snippet downloads the 'vader_lexicon' resource, which is required by NLTK's SentimentIntensityAnalyzer for sentiment analysis.

LANGUAGE: python
CODE:
nltk.download('vader_lexicon')

----------------------------------------

TITLE: Filtering Docker Service Tasks by State in Bash
DESCRIPTION: This example demonstrates how to use the 'docker service ps' command with the '--filter' option to show only running tasks of a service.

LANGUAGE: bash
CODE:
docker service ps --filter "desired-state=running" redis

----------------------------------------

TITLE: JSON Message Format Example for Splunk Logging
DESCRIPTION: These JSON snippets demonstrate the JSON message format used by the Splunk logging driver when 'splunk-format=json' is set. It shows how both string and JSON object messages are handled.

LANGUAGE: json
CODE:
{
  "attrs": {
    "env1": "val1",
    "label1": "label1"
  },
  "tag": "MyImage/MyContainer",
  "source": "stdout",
  "line": "my message"
}

LANGUAGE: json
CODE:
{
  "attrs": {
    "env1": "val1",
    "label1": "label1"
  },
  "tag": "MyImage/MyContainer",
  "source": "stdout",
  "line": {
    "foo": "bar"
  }
}

----------------------------------------

TITLE: Creating an IPv6-Only User-Defined Bridge Network in Docker
DESCRIPTION: Shows how to create a user-defined bridge network that only uses IPv6, skipping IPv4 address configuration.

LANGUAGE: console
CODE:
$ docker network create --ipv6 --ipv4=false v6net

----------------------------------------

TITLE: Docker Private Image Pull Example
DESCRIPTION: Example showing how to pull a private image after setting up authentication.

LANGUAGE: console
CODE:
$ docker pull molly/privateimage
Using default tag: latest
latest: Pulling from molly/privateimage
3b9cc81c3203: Pull complete 
Digest: sha256:3c6b73ce467f04d4897d7a7439782721fd28ec9bf62ea2ad9e81a5fb7fb3ff96
Status: Downloaded newer image for molly/privateimage:latest
docker.io/molly/privateimage:latest

----------------------------------------

TITLE: Setting up Zsh Completion without Oh My Zsh
DESCRIPTION: Commands to set up Docker CLI completion for Zsh without Oh My Zsh, including FPATH configuration.

LANGUAGE: console
CODE:
$ mkdir -p ~/.docker/completions\n$ docker completion zsh > ~/.docker/completions/_docker

LANGUAGE: console
CODE:
$ cat <<"EOT" >> ~/.zshrc\nFPATH="$HOME/.docker/completions:$FPATH"\nautoload -Uz compinit\ncompinit\nEOT

----------------------------------------

TITLE: Creating a development container in Dockerfile
DESCRIPTION: This Dockerfile snippet demonstrates how to add a development stage for a .NET application, including both development and production stages.

LANGUAGE: dockerfile
CODE:
FROM --platform=$BUILDPLATFORM mcr.microsoft.com/dotnet/sdk:8.0-alpine AS build
ARG TARGETARCH
COPY . /source
WORKDIR /source/src
RUN --mount=type=cache,id=nuget,target=/root/.nuget/packages \
    dotnet publish -a ${TARGETARCH/amd64/x64} --use-current-runtime --self-contained false -o /app

FROM mcr.microsoft.com/dotnet/sdk:8.0-alpine AS development
COPY . /source
WORKDIR /source/src
CMD dotnet run --no-launch-profile

FROM mcr.microsoft.com/dotnet/aspnet:8.0-alpine AS final
WORKDIR /app
COPY --from=build /app .
ARG UID=10001
RUN adduser \
    --disabled-password \
    --gecos "" \
    --home "/nonexistent" \
    --shell "/sbin/nologin" \
    --no-create-home \
    --uid "${UID}" \
    appuser
USER appuser
ENTRYPOINT ["dotnet", "myWebApp.dll"]

----------------------------------------

TITLE: Starting Docker Engine Service
DESCRIPTION: Command to enable and start the Docker Engine service using systemctl.

LANGUAGE: console
CODE:
$ sudo systemctl enable --now docker

----------------------------------------

TITLE: Starting Docker Engine Service
DESCRIPTION: Command to enable and start the Docker Engine service using systemctl.

LANGUAGE: console
CODE:
$ sudo systemctl enable --now docker

----------------------------------------

TITLE: Configuring Docker Release Documentation Build Settings
DESCRIPTION: YAML configuration that defines build settings and metadata for Docker release documentation. Sets the render option to 'never', specifies the page title as 'Releases', and sets a weight value of 70 for page ordering.

LANGUAGE: yaml
CODE:
build:
  render: never
title: Releases
weight: 70

----------------------------------------

TITLE: Configuring Docker Client Proxy Settings in JSON
DESCRIPTION: JSON configuration example for setting up HTTP, HTTPS, and exclusion patterns in Docker client proxy settings. The configuration is stored in ~/.docker/config.json and affects new containers and builds.

LANGUAGE: json
CODE:
{
 "proxies": {
   "default": {
     "httpProxy": "http://proxy.example.com:3128",
     "httpsProxy": "https://proxy.example.com:3129",
     "noProxy": "*.test.example.com,.example.org,127.0.0.0/8"
   }
 }
}

----------------------------------------

TITLE: Running a Rust Docker Container
DESCRIPTION: Run a Rust Docker image as a container using the docker run command.

LANGUAGE: bash
CODE:
$ docker run docker-rust-image

----------------------------------------

TITLE: Multi-stage Dockerfile for Shared Base Image
DESCRIPTION: Demonstrates using multi-stage builds to share common base layers between services. Uses Alpine Linux with OpenSSL as a shared base.

LANGUAGE: dockerfile
CODE:
FROM alpine as base
RUN /bin/sh -c apk add --update --no-cache openssl

FROM base as service_a
# build service a
...

FROM base as service_b
# build service b
...

----------------------------------------

TITLE: Manually generating RSA key and certificate
DESCRIPTION: Demonstrates manual generation of a 2048-bit RSA key and self-signed certificate using OpenSSL.

LANGUAGE: bash
CODE:
$ openssl genrsa -out delegation.key 2048

$ openssl req -new -sha256 -key delegation.key -out delegation.csr

$ openssl x509 -req -sha256 -days 365 -in delegation.csr -signkey delegation.key -out delegation.crt

----------------------------------------

TITLE: Sample Python Data Science Code
DESCRIPTION: Example Python code using scikit-learn to create a scatter plot of the Iris dataset.

LANGUAGE: python
CODE:
from sklearn import datasets

iris = datasets.load_iris()
import matplotlib.pyplot as plt

_, ax = plt.subplots()
scatter = ax.scatter(iris.data[:, 0], iris.data[:, 1], c=iris.target)
ax.set(xlabel=iris.feature_names[0], ylabel=iris.feature_names[1])
_ = ax.legend(
   scatter.legend_elements()[0], iris.target_names, loc="lower right", title="Classes"
)

----------------------------------------

TITLE: Committing and Pushing to GitHub Repository
DESCRIPTION: Series of Git commands to stage changes, commit, and push the local repository to GitHub.

LANGUAGE: console
CODE:
$ git add -A
$ git commit -m "my first commit"
$ git push -u origin main

----------------------------------------

TITLE: Project Directory Structure
DESCRIPTION: Shows the file structure of the R application project, including source files, Docker configuration files, and documentation.

LANGUAGE: text
CODE:
├── r-docker-dev/
│ ├── src/
│ │ └── app.R
│ ├── src_db/
│ │ └── app_db.R
│ ├── compose.yaml
│ ├── Dockerfile
│ └── README.md

----------------------------------------

TITLE: Basic Docker Image Dockerfile Example
DESCRIPTION: Example Dockerfile showing basic image layer creation with FROM, LABEL, COPY, RUN and CMD instructions.

LANGUAGE: dockerfile
CODE:
# syntax=docker/dockerfile:1

FROM ubuntu:22.04
LABEL org.opencontainers.image.authors="org@example.com"
COPY . /app
RUN make /app
RUN rm -r $HOME/.cache
CMD python /app/app.py

----------------------------------------

TITLE: Adding SBOM Attestations in GitHub Actions Workflow
DESCRIPTION: This YAML snippet shows how to configure a GitHub Actions workflow to build and push a Docker image with SBOM attestations. It includes steps for Docker Hub login, Buildx setup, metadata extraction, and building/pushing the image with SBOM attestations enabled.

LANGUAGE: yaml
CODE:
name: ci

on:
  push:

env:
  IMAGE_NAME: user/app

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}

      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          sbom: true
          push: true
          tags: ${{ steps.meta.outputs.tags }}

----------------------------------------

TITLE: Building and Pushing Docker Image
DESCRIPTION: Build the Docker image and push it to Docker Hub with a specific tag.

LANGUAGE: bash
CODE:
$ docker build --push -t <ORG_NAME>/scout-demo:v1 .

----------------------------------------

TITLE: Configuring Datadog Agent for Docker Scout Metrics
DESCRIPTION: This YAML configuration sets up the Datadog agent to scrape metrics from the Docker Scout API. It defines the OpenMetrics endpoint, namespace, metrics to collect, and authentication using a Docker PAT.

LANGUAGE: yaml
CODE:
instances:
  - openmetrics_endpoint: "https://api.scout.docker.com/v1/exporter/org/dockerscoutpolicy/metrics"
    namespace: "scout-metrics-exporter"
    metrics:
      - scout_*
    auth_token:
      reader:
        type: file
        path: /var/run/secrets/scout-metrics-exporter/token
      writer:
        type: header
        name: Authorization
        value: Bearer <TOKEN>

----------------------------------------

TITLE: Uninstalling Docker Engine on RHEL
DESCRIPTION: This command removes the Docker Engine, CLI, containerd, and Docker Compose packages from the system. It uses the dnf package manager to uninstall the Docker-related packages.

LANGUAGE: bash
CODE:
$ sudo dnf remove docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin docker-ce-rootless-extras

----------------------------------------

TITLE: Uninstalling Docker Engine on RHEL
DESCRIPTION: This command removes the Docker Engine, CLI, containerd, and Docker Compose packages from the system. It uses the dnf package manager to uninstall the Docker-related packages.

LANGUAGE: bash
CODE:
$ sudo dnf remove docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin docker-ce-rootless-extras

----------------------------------------

TITLE: Starting Specific Profiles with Docker Compose CLI
DESCRIPTION: These commands show how to start specific profiles using the Docker Compose CLI. It demonstrates using the --profile option and the COMPOSE_PROFILES environment variable to enable profiles.

LANGUAGE: console
CODE:
$ docker compose --profile debug up
$ COMPOSE_PROFILES=debug docker compose up

----------------------------------------

TITLE: Creating plist File for Docker Desktop Sign-in Enforcement (Mac)
DESCRIPTION: This XML snippet shows the content of a plist file used to enforce sign-in for Docker Desktop on macOS. It includes the 'allowedOrgs' key with an array of allowed organization names.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
  <dict>
    <key>allowedOrgs</key>
    <array>
      <string>myorg1</string>
      <string>myorg2</string>
    </array>
  </dict>
</plist>

----------------------------------------

TITLE: Upgrading Docker Desktop on Debian
DESCRIPTION: Command to upgrade Docker Desktop using the new DEB package

LANGUAGE: bash
CODE:
$ sudo apt-get install ./docker-desktop-amd64.deb

----------------------------------------

TITLE: Draining a Node in Docker Swarm
DESCRIPTION: This command sets a specific node (worker1) to 'Drain' availability, preventing it from receiving new tasks.

LANGUAGE: bash
CODE:
$ docker node update --availability drain worker1

----------------------------------------

TITLE: Displaying SSL Certificate Error in Docker
DESCRIPTION: Shows the error message that occurs when Docker cannot verify the validity of the certificate presented by Zscaler.

LANGUAGE: plaintext
CODE:
x509: certificate signed by unknown authority

----------------------------------------

TITLE: Creating Basic Overlay Network
DESCRIPTION: Creates a basic overlay network for swarm services without any custom options using the overlay driver.

LANGUAGE: console
CODE:
$ docker network create \
  --driver overlay \
  my-network

----------------------------------------

TITLE: Creating Registry Key for Docker Desktop Sign-in Enforcement (Windows)
DESCRIPTION: This snippet demonstrates how to create a registry key to enforce sign-in for Docker Desktop on Windows. It specifies the key path and the multi-string value 'allowedOrgs' to be set with organization names.

LANGUAGE: console
CODE:
$ HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Docker\Docker Desktop

----------------------------------------

TITLE: Adding Watch Section in Docker Compose
DESCRIPTION: Add watch configuration to services in compose.yaml to enable automatic rebuilds on file changes.

LANGUAGE: yaml
CODE:
watch:
  # configuration goes here

----------------------------------------

TITLE: Creating Docker Volume
DESCRIPTION: Creates a named volume for persisting todo app data.

LANGUAGE: console
CODE:
$ docker volume create todo-db

----------------------------------------

TITLE: GitHub Actions Workflow with Cache Configuration
DESCRIPTION: Example GitHub Actions workflow configuration that implements external cache storage using Docker registry.

LANGUAGE: yaml
CODE:
name: ci

on:
  push:

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: user/app:latest
          cache-from: type=registry,ref=user/app:buildcache
          cache-to: type=registry,ref=user/app:buildcache,mode=max

----------------------------------------

TITLE: Comparing SBOMs with Docker Scout GitHub Action
DESCRIPTION: Shows how to use the sbom:// prefix for image comparison in the Docker Scout GitHub Action.

LANGUAGE: yaml
CODE:
uses: docker/scout-action@v1
with:
  command: compare
  image: sbom://image1.json
  to: sbom://image2.json

----------------------------------------

TITLE: Running Ollama Model Pull Command
DESCRIPTION: Console command to pull the Llama2 model for Ollama LLM service.

LANGUAGE: console
CODE:
$ ollama pull llama2

----------------------------------------

TITLE: Common Configuration File Example
DESCRIPTION: Shows a common configuration file that defines shared service attributes.

LANGUAGE: yaml
CODE:
services:
  app:
    build: .
    environment:
      CONFIG_FILE_PATH: /code/config
      API_KEY: xxxyyy
    cpu_shares: 5

----------------------------------------

TITLE: Checking Docker Component Versions
DESCRIPTION: Commands to verify the installed versions of Docker Compose, Docker CLI, and detailed Docker version information

LANGUAGE: console
CODE:
$ docker compose version
Docker Compose version v2.29.1

$ docker --version
Docker version 27.1.1, build 6312585

$ docker version
Client: 
 Version:           23.0.5
 API version:       1.42
 Go version:        go1.21.12
<...>

----------------------------------------

TITLE: Listing Docker Containers and Images in TypeScript
DESCRIPTION: Examples of using the Docker extension API to list containers and images using the ddClient interface. These are the preferred current methods for accessing Docker objects.

LANGUAGE: typescript
CODE:
const containers = await ddClient.docker.listContainers();

const images = await ddClient.docker.listImages();

----------------------------------------

TITLE: Configuring Docker Compose Watch for Bun Development
DESCRIPTION: Docker Compose configuration that enables automatic rebuilding of services when code changes are detected. The configuration includes service definition with watch instructions for live updates.

LANGUAGE: yaml
CODE:
services:
  server:
    image: bun-server
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    develop:
      watch:
        - action: rebuild
          path: .

----------------------------------------

TITLE: Cloning Docker Getting Started Repository
DESCRIPTION: Commands to clone the getting-started-todo-app repository and navigate to the project directory

LANGUAGE: console
CODE:
$ git clone https://github.com/docker/getting-started-todo-app
$ cd getting-started-todo-app

----------------------------------------

TITLE: Front Matter Configuration in YAML
DESCRIPTION: Build configuration front matter that specifies build parameters for the documentation page. Sets list, publishResources, and render properties to control document generation behavior.

LANGUAGE: yaml
CODE:
_build:
  list: never
  publishResources: false
  render: never

----------------------------------------

TITLE: YAML Configuration for Docker Documentation Structure
DESCRIPTION: YAML front matter configuration that defines the structure, navigation, and content organization for Docker's documentation portal. It includes metadata, layout settings, and organized sections for different Docker products and features.

LANGUAGE: yaml
CODE:
title: Manuals
description: Learn how to install, set up, configure, and use Docker products with this collection of user guides
keywords: docker, docs, manuals, products, user guides, how-to
url: /manuals/
layout: wide
params:
  icon: description
  sidebar:
    groups:
      - Open source
      - Products
      - Platform
  notoc: true
  open-source:
  - title: Docker Build
    description: Build and ship any application anywhere.
    icon: build
    link: /build/
  - title: Docker Engine
    description: The industry-leading container runtime.
    icon: developer_board
    link: /engine/
  # ... additional sections omitted for brevity

----------------------------------------

TITLE: Mapping Container Ports to Host Ports in Docker
DESCRIPTION: This command demonstrates how to use the `-p` option with `docker run` to map container ports to host ports, allowing multiple instances of a container to run without conflicts.

LANGUAGE: console
CODE:
$ docker run -d -p HOST_PORT:CONTAINER_PORT postgres

----------------------------------------

TITLE: Checking UID/GID Mapping Configuration
DESCRIPTION: Commands to verify the user has necessary subordinate UID/GID mappings configured in /etc/subuid and /etc/subgid

LANGUAGE: console
CODE:
$ id -u
1001
$ whoami
testuser
$ grep ^$(whoami): /etc/subuid
testuser:231072:65536
$ grep ^$(whoami): /etc/subgid
testuser:231072:65536

----------------------------------------

TITLE: Setting Service Labels in Docker Compose
DESCRIPTION: Shows how to add metadata labels to a service deployment that are only set on the service level, not on containers.

LANGUAGE: yaml
CODE:
services:
  frontend:
    image: example/webapp
    deploy:
      labels:
        com.example.description: "This label will appear on the web service"

----------------------------------------

TITLE: Go Cross-Compilation Dockerfile
DESCRIPTION: Dockerfile showing how to cross-compile a Go application for multiple platforms using build arguments.

LANGUAGE: dockerfile
CODE:
# syntax=docker/dockerfile:1
FROM --platform=$BUILDPLATFORM golang:alpine AS build
ARG TARGETOS
ARG TARGETARCH
WORKDIR /app
ADD https://github.com/dvdksn/buildme.git#eb6279e0ad8a10003718656c6867539bd9426ad8 .
RUN GOOS=${TARGETOS} GOARCH=${TARGETARCH} go build -o server .

FROM alpine
COPY --from=build /app/server /server
ENTRYPOINT ["/server"]

----------------------------------------

TITLE: Neo4j Cypher query for schema visualization
DESCRIPTION: Cypher query to visualize the schema of the Neo4j database.

LANGUAGE: cypher
CODE:
CALL db.schema.visualization()

----------------------------------------

TITLE: Validating Docker Extension Metadata File
DESCRIPTION: Command to validate just the metadata.json file of a Docker extension before building the image.

LANGUAGE: console
CODE:
$ docker extension validate /path/to/metadata.json

----------------------------------------

TITLE: Running Docker Compose Watch Mode
DESCRIPTION: Command to start Docker Compose in watch mode, which monitors file changes and automatically rebuilds services.

LANGUAGE: shell
CODE:
docker compose up --watch

----------------------------------------

TITLE: Running Jaeger Container for Telemetry Collection
DESCRIPTION: Creates a Jaeger container for collecting OpenTelemetry traces, exposing UDP port 6831 for collection and port 16686 for the web interface.

LANGUAGE: console
CODE:
docker run -d --name jaeger -p "6831:6831/udp" -p "16686:16686" --restart unless-stopped jaegertracing/all-in-one

----------------------------------------

TITLE: Nextcloud YAML Front Matter Configuration
DESCRIPTION: YAML front matter metadata configuration for Nextcloud Docker samples documentation. Defines the page title, description, service type and URL aliases.

LANGUAGE: yaml
CODE:
---
title: Nextcloud samples
description: Docker samples for Nextcloud.
service: nextcloud
aliases:
- /samples/nexcloud/
---

----------------------------------------

TITLE: Viewing Updated Task List for a Service
DESCRIPTION: This command displays the updated task list for a specific service after scaling, showing the distribution of tasks across nodes.

LANGUAGE: bash
CODE:
$ docker service ps helloworld

NAME                                    IMAGE   NODE      DESIRED STATE  CURRENT STATE
helloworld.1.8p1vev3fq5zm0mi8g0as41w35  alpine  worker2   Running        Running 7 minutes
helloworld.2.c7a7tcdq5s0uk3qr88mf8xco6  alpine  worker1   Running        Running 24 seconds
helloworld.3.6crl09vdcalvtfehfh69ogfb1  alpine  worker1   Running        Running 24 seconds
helloworld.4.auky6trawmdlcne8ad8phb0f1  alpine  manager1  Running        Running 24 seconds
helloworld.5.ba19kca06l18zujfwxyc5lkyn  alpine  worker2   Running        Running 24 seconds

----------------------------------------

TITLE: Embedding VEX Document in Docker Image
DESCRIPTION: Dockerfile example showing how to embed VEX documents into the image filesystem during build.

LANGUAGE: dockerfile
CODE:
# syntax=docker/dockerfile:1

FROM alpine
COPY .vex/* /var/lib/db/

----------------------------------------

TITLE: Enabling Docker Desktop Autostart
DESCRIPTION: Command to configure Docker Desktop to automatically start on system sign-in using systemctl

LANGUAGE: console
CODE:
$ systemctl --user enable docker-desktop

----------------------------------------

TITLE: Default Platform Usage in Dockerfile
DESCRIPTION: Example showing recommended approach of omitting the --platform flag to use default platform settings.

LANGUAGE: dockerfile
CODE:
FROM alpine AS base
RUN apk add --no-cache git

----------------------------------------

TITLE: Creating Custom Builder with Docker Container Driver
DESCRIPTION: Command to create a custom builder using the docker-container driver for multi-platform builds.

LANGUAGE: console
CODE:
$ docker buildx create \
  --name container-builder \
  --driver docker-container \
  --bootstrap --use

----------------------------------------

TITLE: Setting Placement Constraints in Docker Compose
DESCRIPTION: Examples of defining placement constraints and preferences for container deployment across nodes.

LANGUAGE: yaml
CODE:
deploy:
  placement:
    constraints:
      - disktype=ssd

LANGUAGE: yaml
CODE:
deploy:
  placement:
    preferences:
      - spread: node.labels.zone

----------------------------------------

TITLE: Implementing a Wrapper Script for Multiple Processes in Bash
DESCRIPTION: This snippet demonstrates how to create a wrapper script that starts multiple processes and handles their lifecycle. It starts two processes in the background and waits for either to exit.

LANGUAGE: bash
CODE:
#!/bin/bash

# Start the first process
./my_first_process &

# Start the second process
./my_second_process &

# Wait for any process to exit
wait -n

# Exit with status of process that exited first
exit $?

----------------------------------------

TITLE: Using Variable Interpolation in Docker Compose Environment
DESCRIPTION: Demonstrates environment variable interpolation syntax in Docker Compose, which provides warnings if variables are not set.

LANGUAGE: yaml
CODE:
web:
  environment:
    - DEBUG=${DEBUG}

----------------------------------------

TITLE: Opening Chrome DevTools for Docker Extension
DESCRIPTION: Command to enable Chrome DevTools debugging for a specific Docker extension. This allows inspection of the extension when selecting the Extensions tab.

LANGUAGE: console
CODE:
$ docker extension dev debug <name-of-your-extensions>

----------------------------------------

TITLE: Cloning Example Voting App Repository
DESCRIPTION: Commands to clone the example voting app repository and navigate to its directory.

LANGUAGE: console
CODE:
$ git clone https://github.com/dvdksn/example-voting-app.git
$ cd example-voting-app

----------------------------------------

TITLE: Correct Usage of Predefined Variable in Dockerfile ARG Instruction
DESCRIPTION: Demonstrates correct usage of a predefined variable '$PYTHON_VERSION' from a base image in a Dockerfile ARG instruction. This ensures the variable is properly defined and available.

LANGUAGE: dockerfile
CODE:
FROM python AS base
ARG VERSION=$PYTHON_VERSION

----------------------------------------

TITLE: YAML Front Matter Configuration
DESCRIPTION: YAML configuration block defining metadata for the Docker version command documentation page, including data folder structure, file name, title, and URL aliases.

LANGUAGE: yaml
CODE:
datafolder: engine-cli
datafile: docker_version
title: docker version
aliases:
- /edge/engine/reference/commandline/version/
- /engine/reference/commandline/version/
layout: cli

----------------------------------------

TITLE: Running the Containerized PHP Application
DESCRIPTION: Uses Docker Compose to build and run the containerized PHP application in the foreground.

LANGUAGE: console
CODE:
$ docker compose up --build

----------------------------------------

TITLE: Killing Docker Processes on macOS
DESCRIPTION: Commands to terminate Docker processes and remove privileged helper tools before reinstallation or patching.

LANGUAGE: bash
CODE:
sudo launchctl bootout system/com.docker.vmnetd 2>/dev/null || true
sudo launchctl bootout system/com.docker.socket 2>/dev/null || true

sudo rm /Library/PrivilegedHelperTools/com.docker.vmnetd || true
sudo rm /Library/PrivilegedHelperTools/com.docker.socket || true

ps aux | grep -i docker | awk '{print $2}' | sudo xargs kill -9 2>/dev/null

----------------------------------------

TITLE: Running Container with GELF Logging
DESCRIPTION: Command line example showing how to run a container with GELF logging driver configuration. Demonstrates setting the log driver and GELF address options at container runtime.

LANGUAGE: console
CODE:
$ docker run \
      --log-driver gelf --log-opt gelf-address=udp://1.2.3.4:12201 \
      alpine echo hello world

----------------------------------------

TITLE: Inspecting Local Cache Directory Structure
DESCRIPTION: Shows the OCI image layout structure of the local cache directory and its contents, including the index.json file format.

LANGUAGE: console
CODE:
$ ls cache
blobs  index.json  ingest
$ cat cache/index.json | jq
{
  "schemaVersion": 2,
  "manifests": [
    {
      "mediaType": "application/vnd.oci.image.index.v1+json",
      "digest": "sha256:6982c70595cb91769f61cd1e064cf5f41d5357387bab6b18c0164c5f98c1f707",
      "size": 1560,
      "annotations": {
        "org.opencontainers.image.ref.name": "latest"
      }
    }
  ]
}

----------------------------------------

TITLE: Creating Docker Container Builder
DESCRIPTION: Command to create a new builder named 'container' using the Docker container driver with optional driver-specific parameters.

LANGUAGE: console
CODE:
$ docker buildx create \
  --name container \
  --driver=docker-container \
  --driver-opt=[key=value,...]
container

----------------------------------------

TITLE: Neo4j Cypher query for relationship types
DESCRIPTION: Cypher query to list all relationship types in the Neo4j database.

LANGUAGE: cypher
CODE:
CALL db.relationshipTypes()

----------------------------------------

TITLE: Installing Docker Scout Using Installation Script
DESCRIPTION: Commands to download and execute the Docker Scout installation script from GitHub.

LANGUAGE: console
CODE:
$ curl -fsSL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh -o install-scout.sh
$ sh install-scout.sh

----------------------------------------

TITLE: Uninstalling Docker Engine and Components
DESCRIPTION: Commands to remove Docker Engine, associated components, and clean up Docker data directories.

LANGUAGE: console
CODE:
$ sudo dnf remove docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin docker-ce-rootless-extras
$ sudo rm -rf /var/lib/docker
$ sudo rm -rf /var/lib/containerd

----------------------------------------

TITLE: HTML Comment for Documentation Source
DESCRIPTION: HTML comment block indicating the documentation is automatically generated and providing guidance for contributing changes through GitHub.

LANGUAGE: html
CODE:
<!--
This page is automatically generated from Docker's source code. If you want to
suggest a change to the text that appears here, open a ticket or pull request
in the source repository on GitHub:

https://github.com/docker/cli
-->

----------------------------------------

TITLE: Configuring UI Source for Development
DESCRIPTION: Command to configure Docker Desktop to use a local development server as the frontend source for an extension.

LANGUAGE: console
CODE:
$ docker extension dev ui-source <name-of-your-extensions> http://localhost:3000

----------------------------------------

TITLE: Using Variables in Custom Functions
DESCRIPTION: Demonstrates how to use global variables within custom functions to create dynamic tag names. Shows variable reference and string interpolation in function definitions.

LANGUAGE: hcl
CODE:
variable "REPO" {
  default = "user/repo"
}

function "tag" {
  params = [tag]
  result = ["${REPO}:${tag}"]
}

target "webapp" {
  tags = tag("v1")
}

LANGUAGE: json
CODE:
{
  "group": {
    "default": {
      "targets": ["webapp"]
    }
  },
  "target": {
    "webapp": {
      "context": ".",
      "dockerfile": "Dockerfile",
      "tags": ["user/repo:v1"]
    }
  }
}

----------------------------------------

TITLE: Creating New Docker Context
DESCRIPTION: Shows how to create a new Docker context with a specified endpoint using the docker context create command.

LANGUAGE: console
CODE:
$ docker context create docker-test --docker host=tcp://docker:2375
docker-test
Successfully created context "docker-test"

----------------------------------------

TITLE: Running Docker Compose Application
DESCRIPTION: Commands for building and running the containerized Node.js application using Docker Compose, including both foreground and background execution options.

LANGUAGE: console
CODE:
$ docker compose up --build

LANGUAGE: console
CODE:
$ docker compose up --build -d

LANGUAGE: console
CODE:
$ docker compose down

----------------------------------------

TITLE: Incorrect Usage of Undeclared ARG in Dockerfile FROM
DESCRIPTION: This example demonstrates the incorrect usage of an undeclared build argument in a FROM instruction, which will trigger the UndefinedArgInFrom rule warning.

LANGUAGE: dockerfile
CODE:
FROM node:22${VARIANT} AS jsbuilder

----------------------------------------

TITLE: Using Built-in HCL Functions with Docker Bake
DESCRIPTION: Demonstrates using the built-in 'add' function from go-cty standard library to manipulate build arguments. Shows how to use mathematical operations in HCL configuration.

LANGUAGE: hcl
CODE:
variable "TAG" {
  default = "latest"
}

group "default" {
  targets = ["webapp"]
}

target "webapp" {
  args = {
    buildno = "${add(123, 1)}"
  }
}

LANGUAGE: json
CODE:
{
  "group": {
    "default": {
      "targets": ["webapp"]
    }
  },
  "target": {
    "webapp": {
      "context": ".",
      "dockerfile": "Dockerfile",
      "args": {
        "buildno": "124"
      }
    }
  }
}

----------------------------------------

TITLE: YAML Frontmatter Configuration for Docker Trust Sign Documentation
DESCRIPTION: YAML configuration block that defines metadata for the Docker trust sign documentation page, including the data folder, file name, title and URL aliases.

LANGUAGE: yaml
CODE:
datafolder: engine-cli
datafile: docker_trust_sign
title: docker trust sign
aliases:
- /edge/engine/reference/commandline/trust_sign/
- /engine/reference/commandline/trust_sign/
layout: cli

----------------------------------------

TITLE: Configuring Compose Watch for C++ Development
DESCRIPTION: YAML configuration for Docker Compose file to enable Compose Watch. This setup automatically rebuilds the container when changes are detected in the project directory.

LANGUAGE: yaml
CODE:
services:
  ok-api:
    image: ok-api
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    develop:
      watch:
        - action: rebuild
          path: .

----------------------------------------

TITLE: Creating Custom Ingress Rules using Compose Extensions
DESCRIPTION: This template shows how to use custom Compose extensions (x-virtual-host) to generate Kubernetes Ingress rules for services.

LANGUAGE: yaml
CODE:
{{ $project := .name }}
#! {{ $name }}-ingress.yaml
# Generated code, do not edit
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: virtual-host-ingress
  namespace: {{ $project }}
spec:
  rules:  
{{ range $name, $service := .services }}
{{ if $service.x-virtual-host }}
  - host: ${{ $service.x-virtual-host }}
    http:
      paths:
      - path: "/"
        backend:
          service:
            name: ${{ name }}
            port:
              number: 80  
{{ end }}
{{ end }}

----------------------------------------

TITLE: Python Text Summarization Imports
DESCRIPTION: Import statement for the Summarizer class from the summarizer package

LANGUAGE: python
CODE:
from summarizer import Summarizer

----------------------------------------

TITLE: Running a Container in the Background using Docker SDKs and API
DESCRIPTION: This example shows how to run a container in detached mode (background) using the Docker Go SDK, Python SDK, and HTTP API. It pulls the specified image, creates and starts a container, and returns the container ID.

LANGUAGE: Go
CODE:
package main

import (
	"context"
	"fmt"
	"io"
	"os"

	"github.com/docker/docker/api/types/container"
	"github.com/docker/docker/api/types/image"
	"github.com/docker/docker/client"
)

func main() {
	ctx := context.Background()
	cli, err := client.NewClientWithOpts(client.FromEnv, client.WithAPIVersionNegotiation())
	if err != nil {
		panic(err)
	}
	defer cli.Close()

	imageName := "bfirsh/reticulate-splines"

	out, err := cli.ImagePull(ctx, imageName, image.PullOptions{})
	if err != nil {
		panic(err)
	}
	defer out.Close()
	io.Copy(os.Stdout, out)

	resp, err := cli.ContainerCreate(ctx, &container.Config{
		Image: imageName,
	}, nil, nil, nil, "")
	if err != nil {
		panic(err)
	}

	if err := cli.ContainerStart(ctx, resp.ID, container.StartOptions{}); err != nil {
		panic(err)
	}

	fmt.Println(resp.ID)
}

LANGUAGE: Python
CODE:
import docker
client = docker.from_env()
container = client.containers.run("bfirsh/reticulate-splines", detach=True)
print(container.id)

LANGUAGE: HTTP
CODE:
$ curl --unix-socket /var/run/docker.sock -H "Content-Type: application/json" \
  -d '{"Image": "bfirsh/reticulate-splines"}' \
  -X POST http://localhost/v{{% param "latest_engine_api_version" %}}/containers/create
{"Id":"1c6594faf5","Warnings":null}

$ curl --unix-socket /var/run/docker.sock -X POST http://localhost/v{{% param "latest_engine_api_version" %}}/containers/1c6594faf5/start

----------------------------------------

TITLE: Converting Compose Files with Compose Bridge
DESCRIPTION: Basic command to convert a Docker Compose file to Kubernetes resources using Compose Bridge. The command looks for a compose.yaml file in the current directory and generates corresponding Kubernetes manifests.

LANGUAGE: console
CODE:
$ compose-bridge convert

----------------------------------------

TITLE: Incorrect FROM/AS Casing Example
DESCRIPTION: Demonstrates incorrect usage where FROM is uppercase but AS is lowercase, creating inconsistent styling.

LANGUAGE: dockerfile
CODE:
FROM debian:latest as builder

----------------------------------------

TITLE: Installing prerequisites on RHEL 9
DESCRIPTION: Commands to enable CodeReady Linux Builder repository, install EPEL, and install the 'pass' package on RHEL 9.

LANGUAGE: bash
CODE:
$ sudo subscription-manager repos --enable codeready-builder-for-rhel-9-$(arch)-rpms
$ sudo dnf install https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm
$ sudo dnf install pass

----------------------------------------

TITLE: Querying Time in Kiribati Using Gordon AI
DESCRIPTION: This bash command demonstrates how to use Gordon AI to query the time in Kiribati, utilizing the configured MCP time server.

LANGUAGE: bash
CODE:
$ docker ai 'what time is it now in kiribati?'

    • Calling get_current_time

  The current time in Kiribati (Tarawa) is 9:38 PM on January 7, 2025.

----------------------------------------

TITLE: Dockerfile with Experimental Checks
DESCRIPTION: Example showing how to enable experimental build checks in a Dockerfile.

LANGUAGE: dockerfile
CODE:
# syntax=docker/dockerfile:1
# check=experimental=JSONArgsRecommended,StageNameCasing

----------------------------------------

TITLE: Starting Docker Compose Application
DESCRIPTION: This console command builds and starts the Docker Compose application, which includes the Qdrant database and other defined services.

LANGUAGE: console
CODE:
$ docker compose up --build

----------------------------------------

TITLE: YAML Frontmatter Configuration for Release Notes Page
DESCRIPTION: YAML configuration block defining metadata for the release notes documentation page, including title, description, keywords, and navigation parameters.

LANGUAGE: yaml
CODE:
---
title: Release notes for Docker Home, the Admin Console, billing, security, and subscription features
linkTitle: Release notes
description: Learn about the new features, bug fixes, and breaking changes for Docker Home, the Admin Console, and billing and subscription features
keywords: Docker Home, Docker Admin Console, billing, subscription, security, admin, releases, what's new
weight: 60
params:
  sidebar:
    group: Platform
tags: [Release notes, admin]
---

----------------------------------------

TITLE: Configuring Update Policy in Docker Compose
DESCRIPTION: Shows how to configure rolling updates with parallelism, delay, and execution order settings.

LANGUAGE: yaml
CODE:
deploy:
  update_config:
    parallelism: 2
    delay: 10s
    order: stop-first

----------------------------------------

TITLE: Viewing Containers on Current Node
DESCRIPTION: This command lists the containers running on the current node, showing the container ID, image, command, creation time, status, ports, and names.

LANGUAGE: bash
CODE:
$ docker ps

CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
528d68040f95        alpine:latest       "ping docker.com"   About a minute ago   Up About a minute                       helloworld.4.auky6trawmdlcne8ad8phb0f1

----------------------------------------

TITLE: Docker Container Volume Mount Command
DESCRIPTION: Example commands showing how to create and mount a volume using the Flocker volume driver

LANGUAGE: console
CODE:
$ docker volume create --driver=flocker volumename

$ docker container run -it --volume volumename:/data busybox sh

----------------------------------------

TITLE: Building and Pushing Docker Image with Attestations
DESCRIPTION: This command builds a Docker image with provenance and SBOM attestations, then pushes it to a registry for analysis.

LANGUAGE: bash
CODE:
docker build --push --tag <org>/<image:tag> --provenance=true --sbom=true .

----------------------------------------

TITLE: YAML Front Matter Configuration for Docker Scout CVEs Documentation
DESCRIPTION: YAML configuration block that defines metadata for the Docker Scout CVEs documentation page, including folder structure, file naming, and page layout settings.

LANGUAGE: yaml
CODE:
datafolder: scout-cli
datafile: docker_scout_cves
aliases:
- /engine/reference/commandline/scout_cves
title: docker scout cves
layout: cli

----------------------------------------

TITLE: Building with Docker Compose and Cloud Builder
DESCRIPTION: Commands to set the cloud builder as the selected builder and then run a Docker Compose build.

LANGUAGE: bash
CODE:
$ docker buildx use cloud-<ORG>-<BUILDER_NAME>
$ docker compose build

----------------------------------------

TITLE: OCI Artifact Attestation Manifest
DESCRIPTION: Shows the JSON structure of an attestation manifest using the OCI artifact format, including artifactType, empty config descriptor, and subject fields.

LANGUAGE: json
CODE:
{
  "schemaVersion": 2,
  "mediaType": "application/vnd.oci.image.manifest.v1+json",
  "artifactType": "application/vnd.docker.attestation.manifest.v1+json",
  "config": {
    "mediaType": "application/vnd.oci.empty.v1+json",
    "size": 2,
    "digest": "sha256:44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a",
    "data": "e30="
  },
  "layers": [
    {
      "mediaType": "application/vnd.in-toto+json",
      "size": 2208,
      "digest": "sha256:6d2f2c714a6bee3cf9e4d3cb9a966b629efea2dd8556ed81f19bd597b3325286",
      "annotations": {
        "in-toto.io/predicate-type": "https://slsa.dev/provenance/v0.2"
      }
    }
  ],
  "subject": {
    "mediaType": "application/vnd.oci.image.manifest.v1+json",
    "size": 1054,
    "digest": "sha256:bc2046336420a2852ecf915786c20f73c4c1b50d7803aae1fd30c971a7d1cead",
    "platform": {
      "architecture": "amd64",
      "os": "linux"
    }
  }
}

----------------------------------------

TITLE: Listing Installed Docker Plugins
DESCRIPTION: This command lists all installed Docker plugins, including logging driver plugins.

LANGUAGE: bash
CODE:
docker plugin ls

----------------------------------------

TITLE: Splitting Test Data for Text Classification
DESCRIPTION: This code splits the predefined dataset into training and testing sets using scikit-learn's train_test_split function. It allocates 20% of the data for testing.

LANGUAGE: python
CODE:
X_train, X_test, y_train, y_test = train_test_split(texts, labels, test_size=0.2, random_state=42)

----------------------------------------

TITLE: Recording Image to Stream
DESCRIPTION: Example showing how to record a Docker image to a specific stream with platform specification

LANGUAGE: console
CODE:
$ %[1]s %[2]s stage-cluster-234 namespace/repo:stage-latest --platform linux/amd64
✓ Pulled
✓ Successfully recorded namespace/repo:stage-latest in stream stage-cluster-234

----------------------------------------

TITLE: Byte Value Specification Examples
DESCRIPTION: Shows the format for specifying byte values in configurations.

LANGUAGE: text
CODE:
    2b
    1024kb
    2048k
    300m
    1gb

----------------------------------------

TITLE: Sending PATCH Request with Docker Extension HttpService in TypeScript
DESCRIPTION: Demonstrates how to perform an HTTP PATCH request to a backend service using the Docker extension API. This method accepts a URL and data payload, returning a Promise that resolves to the response data.

LANGUAGE: typescript
CODE:
ddClient.extension.vm.service
 .patch("/some/service", { ... })
 .then((value: any) => console.log(value));

----------------------------------------

TITLE: Uninstalling Docker Engine from CentOS
DESCRIPTION: Commands to remove Docker Engine and its components, including optional cleanup of Docker data directories.

LANGUAGE: bash
CODE:
sudo dnf remove docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin docker-ce-rootless-extras
sudo rm -rf /var/lib/docker
sudo rm -rf /var/lib/containerd

----------------------------------------

TITLE: Dockerfile for Custom Kompose-based Transformation
DESCRIPTION: This Dockerfile demonstrates how to create a custom Compose Bridge transformation using Kompose, an existing conversion tool for Docker Compose to Kubernetes.

LANGUAGE: dockerfile
CODE:
FROM alpine

# Get kompose from github release page
RUN apk add --no-cache curl
ARG VERSION=1.32.0
RUN ARCH=$(uname -m | sed 's/armv7l/arm/g' | sed 's/aarch64/arm64/g' | sed 's/x86_64/amd64/g') && \
    curl -fsL \
    "https://github.com/kubernetes/kompose/releases/download/v${VERSION}/kompose-linux-${ARCH}" \
    -o /usr/bin/kompose
RUN chmod +x /usr/bin/kompose

CMD ["/usr/bin/kompose", "convert", "-f", "/in/compose.yaml", "--out", "/out"]

----------------------------------------

TITLE: Listing and Managing Containers using Docker SDKs and API
DESCRIPTION: This example demonstrates how to list running containers using the Docker Go SDK, Python SDK, and HTTP API. It retrieves a list of containers and prints their IDs.

LANGUAGE: Go
CODE:
package main

import (
	"context"
	"fmt"

	containertypes "github.com/docker/docker/api/types/container"
	"github.com/docker/docker/client"
)

func main() {
	ctx := context.Background()
	cli, err := client.NewClientWithOpts(client.FromEnv, client.WithAPIVersionNegotiation())
	if err != nil {
		panic(err)
	}
	defer cli.Close()

	containers, err := cli.ContainerList(ctx, containertypes.ListOptions{})
	if err != nil {
		panic(err)
	}

	for _, container := range containers {
		fmt.Println(container.ID)
	}
}

LANGUAGE: Python
CODE:
import docker
client = docker.from_env()
for container in client.containers.list():
  print(container.id)

LANGUAGE: HTTP
CODE:
$ curl --unix-socket /var/run/docker.sock http://localhost/v{{% param "latest_engine_api_version" %}}/containers/json
[{
  "Id":"ae63e8b89a26f01f6b4b2c9a7817c31a1b6196acf560f66586fbc8809ffcd772",
  "Names":["/tender_wing"],
  "Image":"bfirsh/reticulate-splines",
  ...
}]

----------------------------------------

TITLE: Cloning Notary Repository
DESCRIPTION: This command clones the Notary repository from GitHub, which is the first step in deploying Notary Server.

LANGUAGE: console
CODE:
$ git clone https://github.com/theupdateframework/notary.git

----------------------------------------

TITLE: Disabling All Organization Repositories
DESCRIPTION: Shows how to disable Docker Scout for all repositories within an organization using the --all flag.

LANGUAGE: console
CODE:
$ docker scout repo disable --all

----------------------------------------

TITLE: Reactivating a Drained Node in Docker Swarm
DESCRIPTION: This command returns a previously drained node (worker1) to an active state, allowing it to receive new tasks.

LANGUAGE: bash
CODE:
$ docker node update --availability active worker1

----------------------------------------

TITLE: Configuring GELF Logging Driver in daemon.json
DESCRIPTION: JSON configuration example for setting GELF as the default logging driver in Docker daemon configuration file. Specifies the log driver and GELF server address.

LANGUAGE: json
CODE:
{
  "log-driver": "gelf",
  "log-opts": {
    "gelf-address": "udp://1.2.3.4:12201"
  }
}

----------------------------------------

TITLE: Specifying Custom Dockerfile Syntax in Dockerfile
DESCRIPTION: Demonstrates how to set a custom Dockerfile frontend using the syntax directive. This allows using external implementations distributed as Docker images.

LANGUAGE: dockerfile
CODE:
# syntax=[remote image reference]

----------------------------------------

TITLE: Importing Required Libraries for Text Classification in Python
DESCRIPTION: This snippet imports the necessary Python libraries for text classification, including NLTK for natural language processing, scikit-learn for machine learning metrics, and SSL for handling certificate issues.

LANGUAGE: python
CODE:
import nltk
from nltk.sentiment import SentimentIntensityAnalyzer
from sklearn.metrics import accuracy_score, classification_report
from sklearn.model_selection import train_test_split
import ssl

----------------------------------------

TITLE: Updating Docker Desktop Extension
DESCRIPTION: These commands show how to rebuild and update an existing Docker Desktop extension after making code changes.

LANGUAGE: bash
CODE:
docker build --tag=awesome-inc/my-extension:latest .
docker extension update awesome-inc/my-extension:latest

----------------------------------------

TITLE: Docker Repository Permissions Table
DESCRIPTION: A markdown table showing the detailed breakdown of permission levels (Read-only, Read & Write, Admin) and their corresponding capabilities for repository management in Docker.

LANGUAGE: markdown
CODE:
| Action | Read-only | Read & Write | Admin |
|:------------------:|:---------:|:------------:|:-----:|
| Pull a Repository | ✅ | ✅ | ✅ |
| View a Repository | ✅ | ✅ | ✅ |
| Push a Repository | ❌ | ✅ | ✅ |
| Edit a Repository | ❌ | ❌ | ✅ |
| Delete a Repository | ❌ | ❌ | ✅ |
| Update a Repository Description | ❌ | ❌ | ✅ |
| View Builds | ✅ | ✅ | ✅ |
| Cancel Builds | ❌ | ✅ | ✅ |
| Retry Builds | ❌ | ✅ | ✅ |
| Trigger Builds | ❌ | ✅ | ✅ |
| Edit Build Settings | ❌ | ❌ | ✅ |

----------------------------------------

TITLE: Creating IPv6-only Network
DESCRIPTION: Example of creating a Docker network with IPv6 enabled and IPv4 disabled using network create command.

LANGUAGE: console
CODE:
$ docker network create --ipv6 --ipv4=false v6net

----------------------------------------

TITLE: Resource Limiting Configuration
DESCRIPTION: TOML configuration for limiting BuildKit solver parallelism to optimize resource usage.

LANGUAGE: toml
CODE:
# /etc/buildkitd.toml
[worker.oci]
  max-parallelism = 4

----------------------------------------

TITLE: Generic HTTP Request Implementation
DESCRIPTION: Demonstrates making a generic HTTP request with custom configuration. This method is deprecated in favor of HttpService.request.

LANGUAGE: typescript
CODE:
window.ddClient.backend
 .request({ url: "/url", method: "GET", headers: { 'header-key': 'header-value' }, data: { ... }})
 .then((value: any) => console.log(value));

----------------------------------------

TITLE: Checking Docker Host Connection in Bash
DESCRIPTION: This snippet demonstrates how to check which host the Docker client is connecting to by examining the DOCKER_HOST environment variable.

LANGUAGE: bash
CODE:
$ env | grep DOCKER_HOST

----------------------------------------

TITLE: Defining RequestConfig Interface in TypeScript
DESCRIPTION: Interface definition for HTTP request configuration in Docker extensions. It specifies required properties for making HTTP requests including the URL, method, headers, and request data. Available since version 0.2.0.

LANGUAGE: typescript
CODE:
interface RequestConfig {
  readonly url: string;
  readonly method: string;
  readonly headers: Record<string, string>;
  readonly data: any;
}

----------------------------------------

TITLE: Installing Latest Docker Engine Packages
DESCRIPTION: Command to install the latest version of Docker Engine and related packages using apt-get.

LANGUAGE: console
CODE:
$ sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

----------------------------------------

TITLE: HTML Frontend for Face Detection Application
DESCRIPTION: Frontend implementation including necessary TensorFlow.js libraries, styling, and video elements for face detection.

LANGUAGE: html
CODE:
<style>
  body {
    margin: 25px;
  }

  .true {
    color: green;
  }

  .false {
    color: red;
  }

  #main {
    position: relative;
    margin: 50px 0;
  }

  canvas {
    position: absolute;
    top: 0;
    left: 0;
  }

  #description {
    margin-top: 20px;
    width: 600px;
  }

  #description-title {
    font-weight: bold;
    font-size: 18px;
  }
</style>

<body>
  <div id="main">
    <video
      id="video"
      playsinline
      style="
      -webkit-transform: scaleX(-1);
      transform: scaleX(-1);
      width: auto;
      height: auto;
      "
    ></video>
    <canvas id="output"></canvas>
    <video
      id="video"
      playsinline
      style="
      -webkit-transform: scaleX(-1);
      transform: scaleX(-1);
      visibility: hidden;
      width: auto;
      height: auto;
      "
    ></video>
  </div>
</body>

----------------------------------------

TITLE: Docker Compose Stop Command Usage
DESCRIPTION: The 'docker compose stop' command stops running containers without removing them. These containers can be restarted using 'docker compose start'. The command supports options for dry run mode and specifying a shutdown timeout.

LANGUAGE: markdown
CODE:
# docker compose stop

<!---MARKER_GEN_START-->
Stops running containers without removing them. They can be started again with `docker compose start`.

### Options

| Name              | Type   | Default | Description                           |
|:------------------|:-------|:--------|:--------------------------------------|
| `--dry-run`       | `bool` |         | Execute command in dry run mode       |
| `-t`, `--timeout` | `int`  | `0`     | Specify a shutdown timeout in seconds |


<!---MARKER_GEN_END-->

## Description

Stops running containers without removing them. They can be started again with `docker compose start`.

----------------------------------------

TITLE: Pulling a Docker Image with Authentication using SDKs and API
DESCRIPTION: This example shows how to pull a Docker image with authentication using the Docker Go SDK, Python SDK, and HTTP API. It demonstrates how to provide credentials for pulling images from private registries.

LANGUAGE: Go
CODE:
package main

import (
	"context"
	"encoding/base64"
	"encoding/json"
	"io"
	"os"

	"github.com/docker/docker/api/types/image"
	"github.com/docker/docker/api/types/registry"
	"github.com/docker/docker/client"
)

func main() {
	ctx := context.Background()
	cli, err := client.NewClientWithOpts(client.FromEnv, client.WithAPIVersionNegotiation())
	if err != nil {
		panic(err)
	}
	defer cli.Close()

	authConfig := registry.AuthConfig{
		Username: "username",
		Password: "password",
	}
	encodedJSON, err := json.Marshal(authConfig)
	if err != nil {
		panic(err)
	}
	authStr := base64.URLEncoding.EncodeToString(encodedJSON)

	out, err := cli.ImagePull(ctx, "alpine", image.PullOptions{RegistryAuth: authStr})
	if err != nil {
		panic(err)
	}

	defer out.Close()
	io.Copy(os.Stdout, out)
}

LANGUAGE: Python
CODE:
import docker
client = docker.from_env()
image = client.images.pull("alpine")
print(image.id)

LANGUAGE: HTTP
CODE:
$ JSON=$(echo '{"username": "string", "password": "string", "serveraddress": "string"}' | base64)

$ curl --unix-socket /var/run/docker.sock \
  -H "Content-Type: application/tar"
  -X POST "http://localhost/v{{% param "latest_engine_api_version" %}}/images/create?fromImage=alpine"
  -H "X-Registry-Auth"
  -d "$JSON"
{"status":"Pulling from library/alpine","id":"3.1"}
{"status":"Pulling fs layer","progressDetail":{},"id":"8f13703509f7"}
{"status":"Downloading","progressDetail":{"current":32768,"total":2244027},"progress":"[\u003e                                                  ] 32.77 kB/2.244 MB","id":"8f13703509f7"}
...

----------------------------------------

TITLE: Running BuildKit in Docker Container
DESCRIPTION: This command starts a Docker container running BuildKit, exposing it on port 1234 and setting up TLS certificates for secure communication.

LANGUAGE: console
CODE:
$ docker run -d --rm \
  --name=remote-buildkitd \
  --privileged \
  -p 1234:1234 \
  -v $PWD/.certs:/etc/buildkit/certs \
  moby/buildkit:latest \
  --addr tcp://0.0.0.0:1234 \
  --tlscacert /etc/buildkit/certs/daemon/ca.pem \
  --tlscert /etc/buildkit/certs/daemon/cert.pem \
  --tlskey /etc/buildkit/certs/daemon/key.pem

----------------------------------------

TITLE: Docker Compose Configuration for LocalStack Stack
DESCRIPTION: Docker Compose file defining the complete application stack with frontend, backend, MongoDB, and LocalStack services.

LANGUAGE: yaml
CODE:
services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - 5000:5000
    depends_on:
      - localstack
      - mongodb
    env_file:
      - backend/.env

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - 5173:5173
    depends_on:
      - backend
    environment:
      - REACT_APP_API_URL=http://backend:5000/api

  mongodb:
    image: mongo
    container_name: mongodb
    volumes:
      - mongodbdata:/data/db
    ports:
      - 27017:27017

  localstack:
    image: localstack/localstack
    container_name: localstack
    ports:
      - 4566:4566
    environment:
      - SERVICES=s3
      - GATEWAY_LISTEN=0.0.0.0:4566
    volumes:
      - ./localstack:/docker-entrypoint-initaws.d"

volumes:
  mongodbdata:

----------------------------------------

TITLE: Creating Docker Network for Traefik Demo
DESCRIPTION: Creates a Docker network named 'traefik-demo' for container communication.

LANGUAGE: console
CODE:
$ docker network create traefik-demo

----------------------------------------

TITLE: Defining ExecOptions Interface for Docker Extension API in TypeScript
DESCRIPTION: This code snippet defines the ExecOptions interface, which is part of the Docker extension API. It includes optional properties for specifying the current working directory (cwd) and environment variables (env) for execution. This interface is also extended by the SpawnOptions interface.

LANGUAGE: typescript
CODE:
interface ExecOptions {
  cwd?: string;
  env?: ProcessEnv;
}

----------------------------------------

TITLE: Setting Execute Permissions for Kubectl Plugin
DESCRIPTION: Command to make the kubectl-compose_bridge binary executable in the system.

LANGUAGE: console
CODE:
$ chmod +x /usr/local/bin/kubectl-compose_bridge

----------------------------------------

TITLE: Docker Compose PS Status Filtering
DESCRIPTION: Examples showing how to filter containers by their status using the --status flag.

LANGUAGE: console
CODE:
$ docker compose ps --status=running
NAME            IMAGE     COMMAND           SERVICE    CREATED         STATUS          PORTS
example-foo-1   alpine    "/entrypoint.…"   foo        4 seconds ago   Up 2 seconds    0.0.0.0:8080->80/tcp

$ docker compose ps --status=exited
NAME            IMAGE     COMMAND           SERVICE    CREATED         STATUS          PORTS
example-bar-1   alpine    "/entrypoint.…"   bar        4 seconds ago   exited (0)

----------------------------------------

TITLE: Configuring Compose Watch for a Node.js Application
DESCRIPTION: This YAML snippet shows how to configure Compose Watch for a Node.js application. It includes rules for syncing source files and rebuilding the container when package.json changes.

LANGUAGE: yaml
CODE:
services:
  web:
    build: .
    command: npm start
    develop:
      watch:
        - action: sync
          path: ./web
          target: /src/web
          ignore:
            - node_modules/
        - action: rebuild
          path: package.json

----------------------------------------

TITLE: Configuring Compose Watch for a Node.js Application
DESCRIPTION: This YAML snippet shows how to configure Compose Watch for a Node.js application. It includes rules for syncing source files and rebuilding the container when package.json changes.

LANGUAGE: yaml
CODE:
services:
  web:
    build: .
    command: npm start
    develop:
      watch:
        - action: sync
          path: ./web
          target: /src/web
          ignore:
            - node_modules/
        - action: rebuild
          path: package.json

----------------------------------------

TITLE: Using Split Function in Docker Format
DESCRIPTION: Shows how to split a string into a list using the split function in Docker inspect command.

LANGUAGE: console
CODE:
$ docker inspect --format '{{split .Image ":"}}' container

----------------------------------------

TITLE: Connecting to Docker Engine API via Unix Socket
DESCRIPTION: Example showing how to configure the DOCKER_HOST environment variable to connect to Docker Engine through a Unix socket. This is applicable for Mac and Windows WSL 2 users.

LANGUAGE: console
CODE:
$ export DOCKER_HOST=unix:///var/run/docker.sock

----------------------------------------

TITLE: Loading spaCy Language Model
DESCRIPTION: Loading the small English language model for spaCy, which is used for NLP tasks including named entity recognition.

LANGUAGE: python
CODE:
nlp = spacy.load("en_core_web_sm")

----------------------------------------

TITLE: Defining Profiles in Docker Compose YAML
DESCRIPTION: This YAML snippet demonstrates how to define profiles for different services in a Docker Compose file. It shows services with and without profiles, and illustrates dependencies between services.

LANGUAGE: yaml
CODE:
services:
  web:
    image: web_image

  test_lib:
    image: test_lib_image
    profiles:
      - test

  coverage_lib:
    image: coverage_lib_image
    depends_on:
      - test_lib
    profiles:
      - test

  debug_lib:
    image: debug_lib_image
    depends_on:
      - test_lib
    profiles:
      - debug

----------------------------------------

TITLE: YAML Front Matter Configuration for Docker Compose Kill Documentation
DESCRIPTION: YAML front matter block defining metadata and routing configuration for the Docker Compose kill command documentation page. Includes data folder location, file name, page title, and URL aliases for documentation routing.

LANGUAGE: yaml
CODE:
datafolder: compose-cli
datafile: docker_compose_kill
title: docker compose kill
aliases:
- /compose/reference/kill/
- /engine/reference/commandline/compose_kill/
layout: cli

----------------------------------------

TITLE: YAML Frontmatter Configuration
DESCRIPTION: YAML frontmatter defining metadata for the documentation page including folder structure, file name, title, layout and URL aliases.

LANGUAGE: yaml
CODE:
datafolder: compose-cli
datafile: docker_compose_watch
title: docker compose watch
layout: cli
aliases:
- /engine/reference/commandline/compose_watch/

----------------------------------------

TITLE: Inspecting Docker Context Details
DESCRIPTION: Demonstrates how to inspect detailed information about a Docker context using docker context inspect command.

LANGUAGE: console
CODE:
$ docker context inspect default
[
    {
        "Name": "default",
        "Metadata": {},
        "Endpoints": {
            "docker": {
                "Host": "unix:///var/run/docker.sock",
                "SkipTLSVerify": false
            }
        },
        "TLSMaterial": {},
        "Storage": {
            "MetadataPath": "\u003cIN MEMORY\u003e",
            "TLSPath": "\u003cIN MEMORY\u003e"
        }
    }
]

----------------------------------------

TITLE: Adding Docker Trust Delegation Public Key
DESCRIPTION: Shows the process of adding a delegation public key to a repository, including initialization if needed, using environment variables for root and repository passphrases.

LANGUAGE: console
CODE:
# Export the Local Root Key Passphrase if required.
$ export DOCKER_CONTENT_TRUST_ROOT_PASSPHRASE="rootpassphrase123"

# Export the Repository Passphrase
$ export DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE="repopassphrase123"

# Initialize Repo and Push Delegation
$ docker trust signer add --key delegation.crt jeff registry.example.com/admin/demo
Adding signer "jeff" to registry.example.com/admin/demo...
Initializing signed repository for registry.example.com/admin/demo...
Successfully initialized "registry.example.com/admin/demo"
Successfully added signer: registry.example.com/admin/demo

----------------------------------------

TITLE: Generating Bash Completion Script
DESCRIPTION: Commands to create directory and generate Docker CLI completion script for Bash.

LANGUAGE: console
CODE:
$ mkdir -p ~/.local/share/bash-completion/completions\n$ docker completion bash > ~/.local/share/bash-completion/completions/docker

----------------------------------------

TITLE: Cloning C++ Docker Sample Repository
DESCRIPTION: Command to clone the sample C++ Docker application repository and navigate to the project directory.

LANGUAGE: console
CODE:
$ git clone https://github.com/dockersamples/c-plus-plus-docker.git && cd c-plus-plus-docker

----------------------------------------

TITLE: Pruning Dangling Docker Images
DESCRIPTION: This command removes all dangling images, which are images that aren't tagged and aren't referenced by any container. It prompts for confirmation before execution.

LANGUAGE: console
CODE:
$ docker image prune

WARNING! This will remove all dangling images.
Are you sure you want to continue? [y/N] y

----------------------------------------

TITLE: Defining SpawnOptions Interface in TypeScript
DESCRIPTION: Interface definition for SpawnOptions that extends ExecOptions, providing configuration for process spawning in Docker extensions. Includes optional properties for current working directory (cwd), environment variables (env), and required stream configuration.

LANGUAGE: typescript
CODE:
interface SpawnOptions extends ExecOptions {
    cwd?: string;
    env?: ProcessEnv;
    stream: ExecStreamOptions;
}

----------------------------------------

TITLE: Running Alpine Container with 802.1Q Macvlan Network
DESCRIPTION: Launches an Alpine Linux container connected to the 802.1Q trunked macvlan network.

LANGUAGE: bash
CODE:
docker run --rm -itd \
  --network my-8021q-macvlan-net \
  --name my-second-macvlan-alpine \
  alpine:latest \
  ash

----------------------------------------

TITLE: Pulling Ollama Model on Host Machine
DESCRIPTION: This console command pulls the llama2 model to Ollama when running it outside of a container.

LANGUAGE: console
CODE:
$ ollama pull llama2

----------------------------------------

TITLE: Volume Plugin Capabilities Request/Response
DESCRIPTION: JSON request and response format for querying plugin capabilities

LANGUAGE: json
CODE:
Request: {}

Response: {
  "Capabilities": {
    "Scope": "global"
  }
}

----------------------------------------

TITLE: Matrix Build Configuration
DESCRIPTION: Advanced Bake configuration using matrices to build multiple variants (release and debug) in parallel.

LANGUAGE: hcl
CODE:
target "bin-all" {
  inherits = ["bin-cross"]
  matrix = {
    mode = ["release", "debug"]
  }
  name = "bin-${mode}"
  args = {
    BUILD_TAGS = mode
  }
  output = ["build/bin/${mode}"]
}

----------------------------------------

TITLE: Creating a Remote Buildx Driver
DESCRIPTION: This snippet demonstrates how to create a new Buildx builder using the remote driver, connecting to a BuildKit instance at tcp://localhost:1234.

LANGUAGE: console
CODE:
$ docker buildx create \
  --name remote \
  --driver remote \
  tcp://localhost:1234

----------------------------------------

TITLE: Custom MySQL Dockerfile
DESCRIPTION: Dockerfile for creating a customized MySQL image with initialization scripts

LANGUAGE: dockerfile
CODE:
# syntax=docker/dockerfile:1

# Use the base image mysql:latest
FROM mysql:latest

# Set environment variables
ENV MYSQL_DATABASE mydb

# Copy custom scripts or configuration files from your host to the container
COPY ./scripts/ /docker-entrypoint-initdb.d/

----------------------------------------

TITLE: TypeScript Interface Definition - ExecStreamOptions
DESCRIPTION: Defines the ExecStreamOptions interface for handling command execution streams in Docker extensions. Includes callbacks for output handling, error management, and process completion. Introduced in version 0.2.2.

LANGUAGE: typescript
CODE:
interface ExecStreamOptions {
  onOutput?: (data: { stdout: string; stderr?: undefined } | { stdout?: undefined; stderr: string }) => void;
  onError?: (error: any) => void;
  onClose?: (exitCode: number) => void;
  splitOutputLines?: Readonly<boolean>;
}

----------------------------------------

TITLE: Verifying Kubectl Plugin Installation
DESCRIPTION: Command to verify that the compose-bridge plugin is properly recognized by kubectl.

LANGUAGE: console
CODE:
$ kubectl plugin list

----------------------------------------

TITLE: YAML Front Matter Configuration for Flask Docker Documentation
DESCRIPTION: YAML header metadata for a documentation page about Flask Docker examples. Defines the title, description, service type and URL aliases.

LANGUAGE: yaml
CODE:
title: Flask samples
description: Docker samples for Flask.
service: flask
aliases:
- /samples/flask/

----------------------------------------

TITLE: Incorrect Usage of ENTRYPOINT in Shell Form
DESCRIPTION: An example of incorrectly using the shell form for ENTRYPOINT, which prevents the program from receiving OS signals.

LANGUAGE: dockerfile
CODE:
FROM alpine
ENTRYPOINT my-program start
# entrypoint becomes: /bin/sh -c my-program start

----------------------------------------

TITLE: Formatting Callouts in HTML
DESCRIPTION: This snippet shows how to format various types of callouts (Note, Tip, Important, Warning, Caution) in HTML for Docker documentation. Each callout is represented as a blockquote with a specific identifier.

LANGUAGE: html
CODE:
> [!NOTE]
>
> Note the way the `get_hit_count` function is written. This basic retry
> loop lets us attempt our request multiple times if the redis service is
> not available. This is useful at startup while the application comes
> online, but also makes our application more resilient if the Redis
> service needs to be restarted anytime during the app's lifetime. In a
> cluster, this also helps handling momentary connection drops between
> nodes.

> [!TIP]
>
> For a smaller base image, use `alpine`.

> [!IMPORTANT]
>
> Treat access tokens like your password and keep them secret. Store your
> tokens securely (for example, in a credential manager).

> [!WARNING]
>
> Removing Volumes
>
> By default, named volumes in your compose file are NOT removed when running
> `docker compose down`. If you want to remove the volumes, you will need to add
> the `--volumes` flag.
>
> The Docker Desktop Dashboard does not remove volumes when you delete the app stack.

> [!CAUTION]
>
> Here be dragons.

----------------------------------------

TITLE: Verifying Docker Remote Access Configuration
DESCRIPTION: Console command to verify Docker daemon is listening on configured network ports using netstat.

LANGUAGE: console
CODE:
$ sudo netstat -lntp | grep dockerd
tcp        0      0 127.0.0.1:2375          0.0.0.0:*               LISTEN      3758/dockerd

----------------------------------------

TITLE: Listing Kubernetes Nodes with kubectl
DESCRIPTION: Use kubectl to list available nodes in the Kubernetes cluster, confirming successful installation and configuration.

LANGUAGE: console
CODE:
$ kubectl get nodes
NAME                 STATUS    ROLES            AGE       VERSION
docker-desktop       Ready     control-plane    3h        v1.29.1

----------------------------------------

TITLE: Building Custom Nginx Image
DESCRIPTION: Command to build a custom Nginx image using the Dockerfile and tag it with a username.

LANGUAGE: console
CODE:
$ docker build -t <YOUR-USERNAME>/nginx-custom .

----------------------------------------

TITLE: Testing Node.js Installation
DESCRIPTION: Command to verify Node.js installation by running a simple hello world script.

LANGUAGE: console
CODE:
$ node -e 'console.log("Hello world!")'

----------------------------------------

TITLE: Filtering Docker Images by Reference
DESCRIPTION: Shows how to filter Docker images to show only Alpine images using the reference filter. Includes example output before and after filtering.

LANGUAGE: console
CODE:
$ docker images
REPOSITORY   TAG       IMAGE ID       CREATED          SIZE
ubuntu       20.04     33a5cc25d22c   36 minutes ago   101MB
ubuntu       18.04     152dc042452c   36 minutes ago   88.1MB
alpine       3.16      a8cbb8c69ee7   40 minutes ago   8.67MB
alpine       latest    7144f7bab3d4   40 minutes ago   11.7MB
busybox      uclibc    3e516f71d880   48 minutes ago   2.4MB
busybox      glibc     7338d0c72c65   48 minutes ago   6.09MB
$ docker images --filter reference=alpine
REPOSITORY   TAG       IMAGE ID       CREATED          SIZE
alpine       3.16      a8cbb8c69ee7   40 minutes ago   8.67MB
alpine       latest    7144f7bab3d4   40 minutes ago   11.7MB

----------------------------------------

TITLE: Basic Variable Interpolation in Docker Compose
DESCRIPTION: Demonstrates how to use a variable from an .env file in a Docker Compose file, and how to verify the interpolation using the config command.

LANGUAGE: console
CODE:
$ cat .env
TAG=v1.5

LANGUAGE: yaml
CODE:
$ cat compose.yaml
services:
  web:
    image: "webapp:${TAG}"

LANGUAGE: console
CODE:
$ docker compose config
services:
  web:
    image: 'webapp:v1.5'

----------------------------------------

TITLE: Configuring YAML Front Matter for Docker Guides Landing Page
DESCRIPTION: YAML configuration block that defines the metadata and layout settings for the Docker guides landing page. Includes title, link title, description, icon parameter, layout type, and URL aliases for redirects.

LANGUAGE: yaml
CODE:
---
title: Docker guides
linkTitle: Guides
description: Explore the Docker guides
params:
  icon: developer_guide
layout: landing
aliases:
  - /guides/language/
  - /language/
  - /learning-paths/
---

----------------------------------------

TITLE: Pruning All Docker Resources Including Volumes
DESCRIPTION: This command prunes all unused Docker resources, including volumes. It uses the --volumes flag to include volume pruning.

LANGUAGE: console
CODE:
$ docker system prune --volumes

WARNING! This will remove:
        - all stopped containers
        - all networks not used by at least one container
        - all volumes not used by at least one container
        - all dangling images
        - all build cache

Are you sure you want to continue? [y/N] y

----------------------------------------

TITLE: YAML Front Matter Configuration for Docker Context Documentation
DESCRIPTION: YAML front matter configuration block that defines metadata for the Docker context documentation page, including folder location, filename, title, layout and URL aliases.

LANGUAGE: yaml
CODE:
datafolder: engine-cli
datafile: docker_context
title: docker context
layout: cli
aliases:
- /engine/reference/commandline/context/

----------------------------------------

TITLE: Configuring metadata.json for Docker Desktop Extension
DESCRIPTION: This JSON configuration specifies the icon, dashboard tab title, and frontend application details for the Docker Desktop extension.

LANGUAGE: json
CODE:
{
  "icon": "docker.svg",
  "ui": {
    "dashboard-tab": {
      "title": "UI Extension",
      "root": "/ui",
      "src": "index.html"
    }
  }
}

----------------------------------------

TITLE: Listing Docker Images
DESCRIPTION: Command to list local Docker images and its sample output showing the newly created image

LANGUAGE: console
CODE:
$ docker image ls

REPOSITORY                          TAG       IMAGE ID       CREATED          SIZE
mobydock/getting-started-todo-app   latest    1543656c9290   2 minutes ago    1.12GB
...

----------------------------------------

TITLE: YAML Configuration for Docker PS Command Documentation
DESCRIPTION: YAML frontmatter configuration that specifies rendering behavior and sidebar navigation for the docker ps command documentation.

LANGUAGE: yaml
CODE:
---
title: docker ps
build:
  render: never
sidebar:
  goto: /reference/cli/docker/container/ls/
---

----------------------------------------

TITLE: Defining YAML Frontmatter for Go in Docker Documentation
DESCRIPTION: This YAML snippet defines metadata for a page about Go in Docker documentation. It specifies the title and an icon URL for the Go programming language.

LANGUAGE: yaml
CODE:
---
title: Go
params:
  icon: https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/go/go-original.svg
---

----------------------------------------

TITLE: Rust Application Dockerfile Configuration
DESCRIPTION: Multi-stage Dockerfile for building and running a Rust application with proper security considerations and optimization

LANGUAGE: dockerfile
CODE:
# syntax=docker/dockerfile:1

ARG RUST_VERSION=1.70.0
ARG APP_NAME=react-rust-postgres
FROM rust:${RUST_VERSION}-slim-bullseye AS build
ARG APP_NAME
WORKDIR /app

RUN --mount=type=bind,source=src,target=src \
    --mount=type=bind,source=Cargo.toml,target=Cargo.toml \
    --mount=type=bind,source=Cargo.lock,target=Cargo.lock \
    --mount=type=cache,target=/app/target/ \
    --mount=type=cache,target=/usr/local/cargo/registry/ \
    --mount=type=bind,source=migrations,target=migrations \
    <<EOF
set -e
cargo build --locked --release
cp ./target/release/$APP_NAME /bin/server
EOF

FROM debian:bullseye-slim AS final

ARG UID=10001
RUN adduser \
    --disabled-password \
    --gecos "" \
    --home "/nonexistent" \
    --shell "/sbin/nologin" \
    --no-create-home \
    --uid "${UID}" \
    appuser
USER appuser

COPY --from=build /bin/server /bin/

EXPOSE 8000

CMD ["/bin/server"]

----------------------------------------

TITLE: Defining App Service in Docker Compose YAML
DESCRIPTION: This snippet shows the complete YAML configuration for the app service in the Docker Compose file. It includes image specification, command, port mapping, working directory, volume mounting, and environment variables.

LANGUAGE: yaml
CODE:
services:
  app:
    image: node:18-alpine
    command: sh -c "yarn install && yarn run dev"
    ports:
      - 127.0.0.1:3000:3000
    working_dir: /app
    volumes:
      - ./:/app
    environment:
      MYSQL_HOST: mysql
      MYSQL_USER: root
      MYSQL_PASSWORD: secret
      MYSQL_DB: todos

----------------------------------------

TITLE: Viewing Docker Image History
DESCRIPTION: Command to display the layer history of a Docker image

LANGUAGE: bash
CODE:
docker image history docker/welcome-to-docker

----------------------------------------

TITLE: Implementing PUT Request with Docker Extension HttpService in TypeScript
DESCRIPTION: Illustrates how to perform an HTTP PUT request to a backend service using the Docker extension API. This method takes a URL and data payload, returning a Promise that resolves to the response data.

LANGUAGE: typescript
CODE:
ddClient.extension.vm.service
 .put("/some/service", { ... })
 .then((value: any) => console.log(value));

----------------------------------------

TITLE: Specifying Python Dependencies
DESCRIPTION: Contents of the requirements.txt file specifying the NLTK package required for the sentiment analysis application.

LANGUAGE: text
CODE:
# 01 sentiment_analysis
nltk==3.6.5

...

----------------------------------------

TITLE: YAML Frontmatter Configuration for Docker CLI Documentation
DESCRIPTION: YAML frontmatter configuration block defining metadata for the Docker manifest annotate command documentation page, including folder structure, file naming, and URL aliases.

LANGUAGE: yaml
CODE:
datafolder: engine-cli
datafile: docker_manifest_annotate
title: docker manifest annotate
aliases:
- /edge/engine/reference/commandline/manifest_annotate/
- /engine/reference/commandline/manifest_annotate/
layout: cli

----------------------------------------

TITLE: YAML Front Matter Configuration
DESCRIPTION: YAML configuration block defining metadata for the documentation page, including the data folder, file name, title, and URL aliases for the checkpoint command documentation.

LANGUAGE: yaml
CODE:
---
datafolder: engine-cli
datafile: docker_checkpoint
title: docker checkpoint
aliases:
- /edge/engine/reference/commandline/checkpoint/
- /engine/reference/commandline/checkpoint/
layout: cli
---

----------------------------------------

TITLE: Inspecting Individual Docker Swarm Node
DESCRIPTION: Command to inspect detailed information about a specific node in human-readable format, including its status, platform, resources, and plugin information.

LANGUAGE: console
CODE:
$ docker node inspect self --pretty

ID:                     ehkv3bcimagdese79dn78otj5
Hostname:               node-1
Joined at:              2016-06-16 22:52:44.9910662 +0000 utc
Status:
 State:                 Ready
 Availability:          Active
Manager Status:
 Address:               172.17.0.2:2377
 Raft Status:           Reachable
 Leader:                Yes
Platform:
 Operating System:      linux
 Architecture:          x86_64
Resources:
 CPUs:                  2
 Memory:                1.954 GiB
Plugins:
  Network:              overlay, host, bridge, overlay, null
  Volume:               local
Engine Version:         1.12.0-dev

----------------------------------------

TITLE: Default BuildKit GC Configuration
DESCRIPTION: This TOML configuration shows the default GC policies for BuildKit, including global thresholds and specific policies for different types of cache.

LANGUAGE: toml
CODE:
# Global defaults
[worker.oci]
  gc = true
  reservedSpace = "10GB"
  maxUsedSpace = "100GB"
  minFreeSpace = "20%"

# Policy 1
[[worker.oci.gcpolicy]]
  filters = [ "type==source.local", "type==exec.cachemount", "type==source.git.checkout" ]
  keepDuration = "48h"
  maxUsedSpace = "512MB"

# Policy 2
[[worker.oci.gcpolicy]]
  keepDuration = "1440h" # 60 days
  reservedSpace = "10GB"
  maxUsedSpace = "100GB"

# Policy 3
[[worker.oci.gcpolicy]]
  reservedSpace = "10GB"
  maxUsedSpace = "100GB"

# Policy 4
[[worker.oci.gcpolicy]]
  all = true
  reservedSpace = "10GB"
  maxUsedSpace = "100GB"

----------------------------------------

TITLE: Generating CycloneDX SBOM with Docker Scout CLI
DESCRIPTION: Shows how to use the new --format=cyclonedx flag with the docker scout sbom command to output the SBOM in CycloneDX format.

LANGUAGE: console
CODE:
$ docker scout sbom --format=cyclonedx

----------------------------------------

TITLE: Running Quick Policy Compliance Check
DESCRIPTION: Perform a quick policy compliance check on the built image using Docker Scout.

LANGUAGE: bash
CODE:
$ docker scout quickview

----------------------------------------

TITLE: YAML Front Matter Configuration for Docker Trust Revoke Documentation
DESCRIPTION: YAML configuration block that defines metadata for the Docker trust revoke command documentation page, including the data folder, file name, title, and URL aliases.

LANGUAGE: yaml
CODE:
---
datafolder: engine-cli
datafile: docker_trust_revoke
title: docker trust revoke
aliases:
- /edge/engine/reference/commandline/trust_revoke/
- /engine/reference/commandline/trust_revoke/
layout: cli
---

----------------------------------------

TITLE: YAML Front Matter for Docker Compose Build Documentation
DESCRIPTION: YAML front matter metadata block defining the documentation page properties including path, aliases, and layout settings.

LANGUAGE: yaml
CODE:
---
datafolder: compose-cli
datafile: docker_compose_build
title: docker compose build
aliases:
- /compose/reference/build/
- /engine/reference/commandline/compose_build/
layout: cli
---

----------------------------------------

TITLE: Multi-platform Build Error Example in Docker
DESCRIPTION: Demonstrates the error message shown when attempting to build multi-platform images without containerd image store enabled. Shows the limitation of the default Docker driver.

LANGUAGE: console
CODE:
$ docker build --platform=linux/amd64,linux/arm64 .
[+] Building 0.0s (0/0)
ERROR: Multi-platform build is not supported for the docker driver.
Switch to a different driver, or turn on the containerd image store, and try again.
Learn more at https://docs.docker.com/go/build-multi-platform/

----------------------------------------

TITLE: Multi-Platform Build with Cloud Builder
DESCRIPTION: Command to perform a multi-platform build using the cloud builder, specifying platforms and pushing the result.

LANGUAGE: bash
CODE:
$ docker buildx build --builder cloud-<ORG>-<BUILDER_NAME> \
  --platform linux/amd64,linux/arm64 \
  --tag <IMAGE> \
  --push .

----------------------------------------

TITLE: Configuring Docker Extensions Settings JSON
DESCRIPTION: Example of the settings configuration file used to disable extensions organization-wide. This file is stored in different locations depending on the operating system.

LANGUAGE: json
CODE:
{
  "extensionsEnabled": false
}

----------------------------------------

TITLE: Starting Compose Watch
DESCRIPTION: Command to run the application with Compose Watch for automatic updates.

LANGUAGE: console
CODE:
$ docker compose watch

----------------------------------------

TITLE: Listening to ETW Events using logman in Windows
DESCRIPTION: This snippet demonstrates how to use the logman utility to listen to ETW events from the Docker container logs. It includes steps to start logging, run containers with the etwlogs driver, stop logging, and convert the output to a human-readable format.

LANGUAGE: text
CODE:
1. logman start -ets DockerContainerLogs -p {a3693192-9ed6-46d2-a981-f8226c8363bd} 0 0 -o trace.etl
2. Run your container(s) with the etwlogs driver, by adding
   --log-driver=etwlogs to the Docker run command, and generate log messages.
3. logman stop -ets DockerContainerLogs
4. This generates an etl file that contains the events. One way to convert this
   file into human-readable form is to run: tracerpt -y trace.etl.

----------------------------------------

TITLE: Dockerfile with Secret Mount Configuration
DESCRIPTION: Demonstrates how to configure a Dockerfile to use GitHub token secrets mounted during build time.

LANGUAGE: dockerfile
CODE:
# syntax=docker/dockerfile:1
FROM alpine
RUN --mount=type=secret,id=github_token,env=GITHUB_TOKEN ...

----------------------------------------

TITLE: Performing HTTP GET Request to Backend Service in TypeScript
DESCRIPTION: Demonstrates how to use the ddClient.extension.vm.service.get() method to perform an HTTP GET request to a backend service and log the response.

LANGUAGE: typescript
CODE:
ddClient.extension.vm.service
 .get("/some/service")
 .then((value: any) => console.log(value)

----------------------------------------

TITLE: Listing Docker Resources
DESCRIPTION: Commands to list Docker images and containers

LANGUAGE: console
CODE:
$ docker image ls

LANGUAGE: console
CODE:
$ docker container ls -a

----------------------------------------

TITLE: YAML Frontmatter Configuration for Docker Image History Documentation
DESCRIPTION: YAML configuration block that defines metadata for the Docker image history command documentation page, including the data folder location, file name, page title, and URL aliases.

LANGUAGE: yaml
CODE:
datafolder: engine-cli
datafile: docker_image_history
title: docker image history
aliases:
- /edge/engine/reference/commandline/image_history/
- /engine/reference/commandline/image_history/
- /engine/reference/commandline/history/
layout: cli

----------------------------------------

TITLE: YAML Front Matter Configuration for Docker CLI Documentation
DESCRIPTION: YAML configuration block that defines metadata for the Docker secret inspect command documentation page, including the data folder, file name, title, and URL aliases.

LANGUAGE: yaml
CODE:
datafolder: engine-cli
datafile: docker_secret_inspect
title: docker secret inspect
aliases:
- /edge/engine/reference/commandline/secret_inspect/
- /engine/reference/commandline/secret_inspect/
layout: cli

----------------------------------------

TITLE: Starting Docker Compose Services for OpenTelemetry
DESCRIPTION: Launches the Docker Compose services defined for OpenTelemetry and Prometheus setup.

LANGUAGE: bash
CODE:
$ docker compose up

----------------------------------------

TITLE: Running Docker Compose in Detached Mode
DESCRIPTION: Command to build and run the containerized R application in detached (background) mode.

LANGUAGE: console
CODE:
$ docker compose up --build -d

----------------------------------------

TITLE: Defining Build Configuration in YAML for Docker Documentation
DESCRIPTION: This YAML snippet specifies metadata for a documentation page about running Docker containers. It sets the build rendering to 'never', defines the page title, and assigns a weight for ordering.

LANGUAGE: yaml
CODE:
---
build:
  render: never
title: Running containers
weight: 30
---

----------------------------------------

TITLE: Navigating to Containers View in Docker Desktop
DESCRIPTION: Method to navigate to the Containers tab view in Docker Desktop UI

LANGUAGE: typescript
CODE:
ddClient.desktopUI.navigate.viewContainers()

----------------------------------------

TITLE: Main Execution Block for NER Application
DESCRIPTION: The main execution block of the NER application, including an infinite loop for continuous input and processing of text for entity recognition.

LANGUAGE: python
CODE:
if __name__ == "__main__":
    while True:
        input_text = input("Enter the text for entity recognition (type 'exit' to end): ")
        if input_text.lower() == 'exit':
            print("Exiting...")
            break
        doc = nlp(input_text)
        for ent in doc.ents:
            print(f"Entity: {ent.text}, Type: {ent.label_}")

----------------------------------------

TITLE: YAML Frontmatter Configuration for Docker Container Update Documentation
DESCRIPTION: YAML frontmatter that defines the metadata and layout settings for the Docker container update documentation page. Includes data folder location, file name, page title, and URL aliases for different versions of the documentation.

LANGUAGE: yaml
CODE:
datafolder: engine-cli
datafile: docker_container_update
title: docker container update
aliases:
- /edge/engine/reference/commandline/container_update/
- /engine/reference/commandline/container_update/
- /engine/reference/commandline/update/
layout: cli

----------------------------------------

TITLE: Configuring metadata.json for Docker Extension with Backend
DESCRIPTION: Updates the metadata.json file to include the vm section, which specifies the image name for the backend service.

LANGUAGE: json
CODE:
{
  "vm": {
    "image": "${DESKTOP_PLUGIN_IMAGE}"
  },
  "icon": "docker.svg",
  "ui": {
    ...
  }
}

----------------------------------------

TITLE: Documenting Docker Compose Alpha Viz Command Options in Markdown
DESCRIPTION: This code snippet presents a markdown table that lists and describes the available options for the 'docker compose alpha viz' command. It includes option names, types, default values, and descriptions for each parameter.

LANGUAGE: markdown
CODE:
| Name                 | Type   | Default | Description                                                                                        |
|:---------------------|:-------|:--------|:---------------------------------------------------------------------------------------------------|
| `--dry-run`          | `bool` |         | Execute command in dry run mode                                                                    |
| `--image`            | `bool` |         | Include service's image name in output graph                                                       |
| `--indentation-size` | `int`  | `1`     | Number of tabs or spaces to use for indentation                                                    |
| `--networks`         | `bool` |         | Include service's attached networks in output graph                                                |
| `--ports`            | `bool` |         | Include service's exposed ports in output graph                                                    |
| `--spaces`           | `bool` |         | If given, space character ' ' will be used to indent,<br>otherwise tab character '\t' will be used |

----------------------------------------

TITLE: Unsetting Cloud Builder as Default
DESCRIPTION: Command to revert to the default Docker builder, removing the cloud builder as the default option.

LANGUAGE: bash
CODE:
$ docker context use default

----------------------------------------

TITLE: Defining Basic Docker Extension Metadata in JSON
DESCRIPTION: This snippet shows the basic structure of a metadata.json file for a Docker extension. It includes placeholders for icon, UI, VM, and host configurations.

LANGUAGE: json
CODE:
{
    "icon": "extension-icon.svg",
    "ui": ...
    "vm": ...
    "host": ...
}

----------------------------------------

TITLE: YAML Frontmatter Configuration for Docker Swarm Documentation
DESCRIPTION: YAML frontmatter configuration block defining the metadata for the Docker swarm unlock command documentation page, including the data folder location, file name, title, and URL aliases.

LANGUAGE: yaml
CODE:
---
datafolder: engine-cli
datafile: docker_swarm_unlock
title: docker swarm unlock
aliases:
- /edge/engine/reference/commandline/swarm_unlock/
- /engine/reference/commandline/swarm_unlock/
layout: cli
---

----------------------------------------

TITLE: YAML Front Matter Configuration for Docker Plugin Docs
DESCRIPTION: YAML configuration block that defines metadata for the Docker plugin inspect documentation page, including the data folder location, file name, page title and URL aliases.

LANGUAGE: yaml
CODE:
---
datafolder: engine-cli
datafile: docker_plugin_inspect
title: docker plugin inspect
aliases:
- /edge/engine/reference/commandline/plugin_inspect/
- /engine/reference/commandline/plugin_inspect/
layout: cli
---

----------------------------------------

TITLE: Cloning the Sample GenAI Application Repository
DESCRIPTION: This command clones the sample generative AI application repository to the local machine. The application is a PDF reader that uses LangChain, Streamlit, Ollama, and Neo4j.

LANGUAGE: bash
CODE:
$ git clone https://github.com/craig-osterhout/docker-genai-sample

----------------------------------------

TITLE: Extracting SBOM from Remote Image
DESCRIPTION: Command to extract SBOM from a remote image in registry and save it to a local SPDX JSON file.

LANGUAGE: console
CODE:
docker buildx imagetools inspect <image> --format "{{ json .SBOM }}" > sbom.spdx.json

----------------------------------------

TITLE: Downloading Docker Images Before Account Deactivation
DESCRIPTION: Command to download and save Docker images and their tags before deactivating an organization account. This ensures preservation of important container images.

LANGUAGE: bash
CODE:
docker pull -a <image>:<tag>

----------------------------------------

TITLE: ETW Event Message Format for Docker Container Logs
DESCRIPTION: This snippet shows the structured format of the ETW event message string for Docker container logs. It includes fields for container name, image name, container ID, image ID, log source, and the actual log message.

LANGUAGE: text
CODE:
container_name: %s, image_name: %s, container_id: %s, image_id: %s, source: [stdout | stderr], log: %s

----------------------------------------

TITLE: Configuring Docker Debug Settings in YAML
DESCRIPTION: Basic YAML configuration that sets build rendering to 'never', defines the title as 'Debugging', and assigns a weight value of 110. This appears to be a configuration file for managing debug-related build parameters in a Docker project.

LANGUAGE: yaml
CODE:
build:
  render: never
title: Debugging
weight: 110

----------------------------------------

TITLE: Cloning C++ Sample Repository
DESCRIPTION: Command to clone the sample C++ application repository from GitHub.

LANGUAGE: bash
CODE:
$ git clone https://github.com/dockersamples/c-plus-plus-docker.git

----------------------------------------

TITLE: Viewing Container Logs in Docker Desktop
DESCRIPTION: Method to navigate to a container's logs view using its full container ID

LANGUAGE: typescript
CODE:
await ddClient.desktopUI.navigate.viewContainerLogs(id)

----------------------------------------

TITLE: YAML Frontmatter Configuration for Docker Buildx DU Documentation
DESCRIPTION: YAML frontmatter metadata configuration for the Docker Buildx disk usage (du) command documentation page. Specifies the datafolder, datafile, title, layout and URL aliases.

LANGUAGE: yaml
CODE:
datafolder: buildx
datafile: docker_buildx_du
title: docker buildx du
layout: cli
aliases:
- /engine/reference/commandline/buildx_du/

----------------------------------------

TITLE: YAML Front Matter Configuration for Docker Buildx Documentation
DESCRIPTION: YAML front matter configuration block defining metadata for the Docker Buildx documentation page, including data folder location, file name, title, layout, and URL aliases.

LANGUAGE: yaml
CODE:
datafolder: buildx
datafile: docker_buildx
title: docker buildx
layout: cli
aliases:
- /engine/reference/commandline/buildx/

----------------------------------------

TITLE: Listing Services in Docker Swarm
DESCRIPTION: This command lists all running services in the Docker swarm, showing their ID, name, scale, image, and command.

LANGUAGE: console
CODE:
$ docker service ls

ID            NAME        SCALE  IMAGE   COMMAND
9uk4639qpg7n  helloworld  1/1    alpine  ping docker.com

----------------------------------------

TITLE: Downloading NLTK Resources
DESCRIPTION: Python code to download required NLTK resources for sentiment analysis.

LANGUAGE: python
CODE:
nltk.download('vader_lexicon')
nltk.download('punkt')

----------------------------------------

TITLE: Traefik File Provider Configuration
DESCRIPTION: Defines routing rules for non-containerized workloads using Traefik's File provider.

LANGUAGE: yaml
CODE:
http:
  routers:
    native-api:
      rule: "Host(`localhost`) && PathPrefix(`/api`)"
      service: native-api
    native-client:
      rule: "Host(`localhost`)"
      service: native-client

  services:
    native-api:
      loadBalancer:
        servers:
          - url: "http://host.docker.internal:3000/"
    native-client:
      loadBalancer:
        servers:
          - url: "http://host.docker.internal:5173/"

----------------------------------------

TITLE: Inspecting Container in Docker Desktop
DESCRIPTION: Method to navigate to container inspection view using container ID

LANGUAGE: typescript
CODE:
await ddClient.desktopUI.navigate.viewContainerInspect(id)

----------------------------------------

TITLE: Navigating to Single Container View in Docker Desktop
DESCRIPTION: Method to navigate to a specific container's view using its full container ID

LANGUAGE: typescript
CODE:
await ddClient.desktopUI.navigate.viewContainer(id)

----------------------------------------

TITLE: Inspecting Image Index Annotations
DESCRIPTION: Example output of inspecting annotations on an image index using docker buildx imagetools inspect command.

LANGUAGE: console
CODE:
$ docker buildx imagetools inspect <IMAGE> --raw
{
  "schemaVersion": 2,
  "mediaType": "application/vnd.oci.image.index.v1+json",
  "manifests": [
    {
      "mediaType": "application/vnd.oci.image.manifest.v1+json",
      "digest": "sha256:d20246ef744b1d05a1dd69d0b3fa907db007c07f79fe3e68c17223439be9fefb",
      "size": 911,
      "annotations": {
        "org.opencontainers.image.documentation": "https://foo.example/docs",
      },
      "platform": {
        "architecture": "amd64",
        "os": "linux"
      }
    },
  ],
  "annotations": {
    "org.opencontainers.image.authors": "dvdksn"
  }
}

----------------------------------------

TITLE: Configuring YAML Build Settings for Docker Documentation
DESCRIPTION: YAML configuration block defining build parameters and page metadata including rendering settings, title, and page weight for a developer documentation section.

LANGUAGE: yaml
CODE:
build:
  render: never
title: For developers
weight: 20

----------------------------------------

TITLE: Deleting Cloud Engine in Project Harmonia
DESCRIPTION: This command removes a cloud engine from Project Harmonia. It's used to clean up resources and manage cloud environments when they're no longer needed.

LANGUAGE: bash
CODE:
$ docker harmonia engine delete <name-of-engine>

----------------------------------------

TITLE: YAML Frontmatter Configuration for Docker Container Attach Documentation
DESCRIPTION: YAML configuration block that defines metadata for the Docker container attach command documentation page, including the data folder, file name, title, and URL aliases.

LANGUAGE: yaml
CODE:
datafolder: engine-cli
datafile: docker_container_attach
title: docker container attach
aliases:
- /edge/engine/reference/commandline/container_attach/
- /engine/reference/commandline/attach/
- /engine/reference/commandline/container_attach/
layout: cli

----------------------------------------

TITLE: Configuring Live Restore in Docker Daemon JSON
DESCRIPTION: JSON configuration to enable live-restore feature in Docker daemon configuration file. This should be added to /etc/docker/daemon.json on Linux systems or through Docker Desktop settings on Windows/Mac.

LANGUAGE: json
CODE:
{
  "live-restore": true
}

----------------------------------------

TITLE: Configuring GitHub Actions Docker Desktop Setup
DESCRIPTION: YAML configuration to start Docker Desktop in GitHub Actions using docker/desktop-action. This step is required to run extension tests in CI environment.

LANGUAGE: yaml
CODE:
steps:
  - id: start_desktop
    uses: docker/desktop-action/start@v0.1.0

----------------------------------------

TITLE: HTML Comment for Source Code Reference
DESCRIPTION: HTML comment block indicating that the page is auto-generated and providing instructions for suggesting changes through GitHub.

LANGUAGE: html
CODE:
<!--
This page is automatically generated from Docker's source code. If you want to
suggest a change to the text that appears here, open a ticket or pull request
in the source repository on GitHub:

https://github.com/docker/cli
-->

----------------------------------------

TITLE: Setting Git Remote URL for GitHub Repository
DESCRIPTION: Command to change the Git remote URL to point to the newly created GitHub repository. Replace 'your-username' and 'your-repository' with appropriate values.

LANGUAGE: console
CODE:
$ git remote set-url origin https://github.com/your-username/your-repository.git

----------------------------------------

TITLE: Relative Path Resolution Example
DESCRIPTION: Illustrates how relative paths are handled when extending services across different directories.

LANGUAGE: yaml
CODE:
services:
  webapp:
    image: example
    extends:
      file: ../commons/compose.yaml
      service: base

LANGUAGE: yaml
CODE:
services:
  base:
    env_file: ./container.env

LANGUAGE: yaml
CODE:
services:
  webapp:
    image: example
    env_file: 
      - ../commons/container.env

----------------------------------------

TITLE: Saving Docker Images to Local Tar File
DESCRIPTION: Command to save one or more Docker images to a local tar archive file for backup purposes.

LANGUAGE: bash
CODE:
docker image save -o images.tar image1 [image2 ...]

----------------------------------------

TITLE: Inline Message Format Example for Splunk Logging
DESCRIPTION: This JSON snippet illustrates the inline message format used by the Splunk logging driver. It shows how log messages are structured with attributes, tags, and the actual log line.

LANGUAGE: json
CODE:
{
  "attrs": {
    "env1": "val1",
    "label1": "label1"
  },
  "tag": "MyImage/MyContainer",
  "source": "stdout",
  "line": "my message"
}

LANGUAGE: json
CODE:
{
  "attrs": {
    "env1": "val1",
    "label1": "label1"
  },
  "tag": "MyImage/MyContainer",
  "source": "stdout",
  "line": "{\"foo\": \"bar\"}"
}

----------------------------------------

TITLE: Memory-Constrained Container Launch
DESCRIPTION: Commands demonstrating how to limit CPU usage to 50% using different methods

LANGUAGE: console
CODE:
$ docker run -it --cpus=".5" ubuntu /bin/bash

LANGUAGE: console
CODE:
$ docker run -it --cpu-period=100000 --cpu-quota=50000 ubuntu /bin/bash

----------------------------------------

TITLE: Customizing Vote Target in Bake
DESCRIPTION: HCL configuration to override the target stage for the vote service in the Bake file.

LANGUAGE: hcl
CODE:
target "vote" {
  target = "final"
}

----------------------------------------

TITLE: Generating SBOM for Docker Image
DESCRIPTION: Commands to generate SBOM using both Docker SBOM and Scout CLI plugins

LANGUAGE: bash
CODE:
$ docker sbom hello

LANGUAGE: bash
CODE:
$ docker scout sbom --format=list hello

----------------------------------------

TITLE: Opening Container Terminal in Docker Desktop
DESCRIPTION: Method to open terminal window for a specific container using its ID

LANGUAGE: typescript
CODE:
await ddClient.desktopUI.navigate.viewContainerTerminal(id)

----------------------------------------

TITLE: ECI Configuration JSON Example
DESCRIPTION: Example configuration in admin-settings.json showing how to configure Docker socket mount permissions and command restrictions.

LANGUAGE: json
CODE:
{
  "configurationFileVersion": 2,
  "enhancedContainerIsolation": {
    "locked": true,
    "value": true,
    "dockerSocketMount": {
      "imageList": {
        "images": [
          "docker.io/localstack/localstack:*",
          "docker.io/testcontainers/ryuk:*",
          "docker:cli"
        ],
        "allowDerivedImages": true
      },
      "commandList": {
        "type": "deny",
        "commands": ["push"]
      }
    }
  }
}

----------------------------------------

TITLE: Running Docker Container with Custom Local Logging Options
DESCRIPTION: This snippet shows how to start an Alpine container with custom local logging options. It sets a maximum of 3 log files, each no larger than 10 megabytes.

LANGUAGE: console
CODE:
$ docker run -it --log-driver local --log-opt max-size=10m --log-opt max-file=3 alpine ash

----------------------------------------

TITLE: Building Docker Image for Sentiment Analysis
DESCRIPTION: Docker command to build the image for the sentiment analysis application.

LANGUAGE: shell
CODE:
$ docker build -t basic-nlp .

----------------------------------------

TITLE: Installing Zscaler Root Certificate in Debian-based Docker Image
DESCRIPTION: Demonstrates how to copy the Zscaler root certificate into a Debian-based Docker image and update the trust store during the build process.

LANGUAGE: dockerfile
CODE:
FROM debian:bookworm
COPY zscaler-root-ca.crt /usr/local/share/ca-certificates/zscaler-root-ca.crt
RUN apt-get update && \
    apt-get install -y ca-certificates && \
    update-ca-certificates

----------------------------------------

TITLE: Viewing Specific Volume in Docker Desktop
DESCRIPTION: Method to view details of a specific volume by name

LANGUAGE: typescript
CODE:
await ddClient.desktopUI.navigate.viewVolume(volume)

----------------------------------------

TITLE: Defining Metadata for Docker Image Inspect Documentation
DESCRIPTION: YAML frontmatter defining metadata for the 'docker image inspect' command documentation page. It specifies the data folder, file name, title, aliases, and layout for the page.

LANGUAGE: yaml
CODE:
---
datafolder: engine-cli
datafile: docker_image_inspect
title: docker image inspect
aliases:
- /edge/engine/reference/commandline/image_inspect/
- /engine/reference/commandline/image_inspect/
layout: cli
---

----------------------------------------

TITLE: Reading SBOM from Syft Output with Docker Scout CLI
DESCRIPTION: Shows how to pipe Syft output directly into the Docker Scout CLI for CVE analysis.

LANGUAGE: console
CODE:
$ syft -o json alpine | docker scout cves sbom://

----------------------------------------

TITLE: Setting VAT Number for German Tax ID
DESCRIPTION: Example showing the correct format for entering a German VAT number in Docker's billing system, including the required country prefix.

LANGUAGE: text
CODE:
DE123456789

----------------------------------------

TITLE: Defining Laravel Project Structure with Docker
DESCRIPTION: Shows the directory structure for a Laravel project with Docker configurations, including separate development and production setups.

LANGUAGE: plaintext
CODE:
my-laravel-app/
├── app/
├── bootstrap/
├── config/
├── database/
├── public/
├── docker/
│   ├── common/
│   │   └── php-fpm/
│   │       └── Dockerfile
│   ├── development/
│   │   ├── php-fpm/
│   │   │   └── entrypoint.sh
│   │   ├── workspace/
│   │   │   └── Dockerfile
│   │   └── nginx
│   │       ├── Dockerfile
│   │       └── nginx.conf
│   └── production/
├── compose.dev.yaml
├── compose.prod.yaml
├── .dockerignore
├── .env
├── vendor/
├── ...

----------------------------------------

TITLE: Handling Unix Domain Socket Errors in Docker Desktop
DESCRIPTION: These console snippets show error messages related to Unix domain socket path length limitations on Mac and Linux platforms.

LANGUAGE: console
CODE:
[vpnkit-bridge][F] listen unix <HOME>/Library/Containers/com.docker.docker/Data/http-proxy-control.sock: bind: invalid argument

LANGUAGE: console
CODE:
[com.docker.backend][E] listen(vsock:4099) failed: listen unix <HOME>/Library/Containers/com.docker.docker/Data/vms/0/00000002.00001003: bind: invalid argument

----------------------------------------

TITLE: Configuring Registry Proxy Settings in YAML
DESCRIPTION: This YAML configuration sets up the proxy settings for a Docker registry to act as a pull-through cache. It specifies the remote URL for Docker Hub and optional authentication credentials.

LANGUAGE: yaml
CODE:
proxy:
  remoteurl: https://registry-1.docker.io
  username: [username]
  password: [password]

----------------------------------------

TITLE: Configuring Docker Daemon with Dual Logging
DESCRIPTION: Example showing Docker daemon configuration with Splunk logging driver and enabled cache

LANGUAGE: console
CODE:
{
  "log-driver": "splunk",
  "log-opts": {
    ... (options for "splunk" logging driver)
  }
}

----------------------------------------

TITLE: Generating SPDX Format SBOM
DESCRIPTION: Command to generate SBOM in SPDX format using the --format spdx flag with Docker Scout.

LANGUAGE: console
CODE:
docker scout sbom --format spdx [IMAGE]

----------------------------------------

TITLE: Formatting Markdown in Documentation
DESCRIPTION: Shows how to format Markdown within documentation, including nested code blocks. This example demonstrates a simple Markdown heading and a nested Go code block.

LANGUAGE: markdown
CODE:
# Hello

```go
log.Println("did something")
```

----------------------------------------

TITLE: Neo4j Cypher query for counting node types
DESCRIPTION: Cypher query to count distinct node types in the Neo4j database and order them by count.

LANGUAGE: cypher
CODE:
MATCH (n)
RETURN DISTINCT labels(n) AS NodeTypes, count(*) AS Count
ORDER BY Count DESC;

----------------------------------------

TITLE: Basic Docker Compose Include Example
DESCRIPTION: Demonstrates basic usage of the include directive to incorporate an external compose file containing serviceB into the main configuration.

LANGUAGE: yaml
CODE:
include:
  - my-compose-include.yaml  #with serviceB declared
services:
  serviceA:
    build: .
    depends_on:
      - serviceB #use serviceB directly as if it was declared in this Compose file

----------------------------------------

TITLE: Persisting Kubeconfig in Extension's Backend Container in TypeScript
DESCRIPTION: This function retrieves the kubeconfig for a specific context and stores it in the extension's backend container. It uses ddClient.extension.host?.cli.exec to get the kubeconfig and ddClient.extension.vm?.service?.post to store it.

LANGUAGE: typescript
CODE:
export const updateKubeconfig = async () => {
  const kubeConfig = await ddClient.extension.host?.cli.exec("kubectl", [
    "config",
    "view",
    "--raw",
    "--minify",
    "--context",
    "docker-desktop",
  ]);
  if (kubeConfig?.stderr) {
    console.log("error", kubeConfig?.stderr);
    return false;
  }

  // call backend container to store the kubeconfig retrieved into the container's memory or filesystem
  try {
    await ddClient.extension.vm?.service?.post("/store-kube-config", {
      data: kubeConfig?.stdout,
    });
  } catch (err) {
    console.log("error", JSON.stringify(err));
  }
};

----------------------------------------

TITLE: Docker Content Trust Build Example
DESCRIPTION: Shows a Dockerfile example and build commands demonstrating content trust verification during image builds.

LANGUAGE: dockerfile
CODE:
# syntax=docker/dockerfile:1
FROM docker/trusttest:latest
RUN echo

LANGUAGE: console
CODE:
$  docker build -t docker/trusttest:testing .
Using default tag: latest
latest: Pulling from docker/trusttest

b3dbab3810fc: Pull complete
a9539b34a6ab: Pull complete
Digest: sha256:d149ab53f871

LANGUAGE: console
CODE:
$  docker build -t docker/trusttest:testing .
unable to process Dockerfile: No trust data for notrust

----------------------------------------

TITLE: Defining an Ubuntu Upstart Job for Docker
DESCRIPTION: An example of an Upstart job definition for Docker on Ubuntu systems.

LANGUAGE: bash
CODE:
description "Docker daemon"

start on filesystem and started lxc-net
stop on runlevel [!2345]

respawn

script
    /usr/bin/docker -d
end script

----------------------------------------

TITLE: Running Docker Compose Build
DESCRIPTION: Command to build and run the containerized application using Docker Compose.

LANGUAGE: console
CODE:
$ docker compose up --build

----------------------------------------

TITLE: Viewing Container Stats in Docker Desktop
DESCRIPTION: Method to view container statistics including CPU, memory, disk and network usage

LANGUAGE: typescript
CODE:
await ddClient.desktopUI.navigate.viewContainerStats(id)

----------------------------------------

TITLE: Using Syft JSON SBOM with Docker Scout CLI
DESCRIPTION: Demonstrates how to use SBOM files in syft-json format with the Docker Scout CLI.

LANGUAGE: console
CODE:
$ docker scout cves sbom://path/to/sbom.syft.json

----------------------------------------

TITLE: Docker Users Group Management Script
DESCRIPTION: PowerShell script to create the docker-users group and add the current user to it, useful for MDM deployments.

LANGUAGE: powershell
CODE:
$Group = "docker-users"
$CurrentUser = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name

# Create the group
New-LocalGroup -Name $Group

# Add the user to the group
Add-LocalGroupMember -Group $Group -Member $CurrentUser

----------------------------------------

TITLE: Using Bash Job Control for Process Management
DESCRIPTION: This bash script demonstrates how to use job control to manage multiple processes. It starts a main process in the background, runs a helper process, and then brings the main process back to the foreground.

LANGUAGE: bash
CODE:
#!/bin/bash

# turn on bash's job control
set -m

# Start the primary process and put it in the background
./my_main_process &

# Start the helper process
./my_helper_process

# the my_helper_process might need to know how to wait on the
# primary process to start before it does its work and returns


# now we bring the primary process back into the foreground
# and leave it there
fg %1

----------------------------------------

TITLE: JavaScript Face Detection Implementation
DESCRIPTION: Core implementation of face detection using TensorFlow.js and BlazeFace model, including camera setup and real-time detection rendering.

LANGUAGE: javascript
CODE:
const stats = new Stats();
stats.showPanel(0);
document.body.prepend(stats.domElement);

let model, ctx, videoWidth, videoHeight, video, canvas;

const state = {
  backend: "wasm",
};

const gui = new dat.GUI();
gui
  .add(state, "backend", ["wasm", "webgl", "cpu"])
  .onChange(async (backend) => {
    await tf.setBackend(backend);
    addFlagLables();
  });

async function setupCamera() {
  video = document.getElementById("video");

  const stream = await navigator.mediaDevices.getUserMedia({
    audio: false,
    video: { facingMode: "user" },
  });
  video.srcObject = stream;

  return new Promise((resolve) => {
    video.onloadedmetadata = () => {
      resolve(video);
    };
  });
}

----------------------------------------

TITLE: Defining RequestConfigV0 Interface Properties in TypeScript
DESCRIPTION: This snippet defines the properties of the RequestConfigV0 interface. It includes url, method, headers, and data, all of which are readonly properties used to configure API requests in Docker extensions.

LANGUAGE: typescript
CODE:
interface RequestConfigV0 {
  readonly url: string;
  readonly method: string;
  readonly headers: Record<string, string>;
  readonly data: any;
}

----------------------------------------

TITLE: Defining OpenDialogResult Interface in TypeScript
DESCRIPTION: TypeScript interface definition for handling file dialog results in Docker extensions. Contains properties for tracking dialog cancellation status, selected file paths, and macOS-specific security bookmarks.

LANGUAGE: typescript
CODE:
interface OpenDialogResult {
    readonly canceled: boolean;    // Whether the dialog was canceled
    readonly filePaths: string[];  // Array of chosen file paths
    readonly bookmarks?: string[]; // Optional macOS security bookmarks
}

----------------------------------------

TITLE: Configuring YAML Frontmatter for Docker Push Documentation
DESCRIPTION: This YAML snippet defines the frontmatter for a documentation page about the 'docker push' command. It sets the page title, disables rendering, and specifies the sidebar navigation link.

LANGUAGE: yaml
CODE:
---
title: docker push
build:
  render: never
sidebar:
  goto: /reference/cli/docker/image/push/
---

----------------------------------------

TITLE: Configuring Docker Team Collaboration Settings in YAML
DESCRIPTION: YAML configuration that disables build rendering and sets the document title for team collaboration documentation.

LANGUAGE: yaml
CODE:
build:
  render: never
title: Team collaboration

----------------------------------------

TITLE: Integrating Docker Scout in CircleCI Workflow
DESCRIPTION: This YAML snippet demonstrates how to set up a CircleCI job to record the environment using Docker Scout. It includes steps for determining the image tag and running the Docker Scout CLI container.

LANGUAGE: yaml
CODE:
version: 2.1

jobs:
  record_environment:
    machine:
      image: ubuntu-2204:current
    image: namespace/repo
    steps:
      - run: |
          if [[ -z "$CIRCLE_TAG" ]]; then
            tag="$CIRCLE_TAG"
            echo "Running tag '$CIRCLE_TAG'"
          else
            tag="$CIRCLE_BRANCH"
            echo "Running on branch '$CI_COMMIT_BRANCH'"
          fi    
          echo "tag = $tag"
      - run: docker run -it \
          -e DOCKER_SCOUT_HUB_USER=$DOCKER_SCOUT_HUB_USER \
          -e DOCKER_SCOUT_HUB_PASSWORD=$DOCKER_SCOUT_HUB_PASSWORD \
          docker/scout-cli:1.0.2 environment \
          --org "<MY_DOCKER_ORG>" \
          "<ENVIRONMENT>" ${image}:${tag}

----------------------------------------

TITLE: Starting Docker Compose Watch
DESCRIPTION: Use Docker Compose to start the development environment and watch for changes.

LANGUAGE: console
CODE:
$ docker compose watch

----------------------------------------

TITLE: Loading Docker Images from Tar File
DESCRIPTION: Command to restore Docker images from a local tar archive file.

LANGUAGE: bash
CODE:
docker image load -i images.tar

----------------------------------------

TITLE: Starting Docker Desktop Service via systemctl
DESCRIPTION: Command to start the Docker Desktop service using systemctl user service management

LANGUAGE: console
CODE:
$ systemctl --user start docker-desktop

----------------------------------------

TITLE: Using VPNKit in Docker Desktop
DESCRIPTION: This JSON snippet shows how to configure Docker Desktop to use VPNKit instead of gVisor for networking.

LANGUAGE: JSON
CODE:
"networkType":"vpnkit"

----------------------------------------

TITLE: Highlighting Specific Lines in Go Code
DESCRIPTION: Demonstrates how to highlight specific lines in a code block using the hl_lines attribute. This example highlights lines 7 and 8 in a Go code snippet.

LANGUAGE: go
CODE:
incoming := map[string]interface{}{
    "asdf": 1,
    "qwer": []interface{}{},
    "zxcv": []interface{}{
        map[string]interface{}{},
        true,
        int(1e9),
        "tyui",
    },
}

----------------------------------------

TITLE: Building and Running the Application with Docker Compose
DESCRIPTION: Command to build and run the application using Docker Compose.

LANGUAGE: console
CODE:
$ docker compose up --build

----------------------------------------

TITLE: Using Docker Configs with Windows IIS Service
DESCRIPTION: Shows how to create and use a Docker config containing HTML content with a Microsoft IIS service on Windows.

LANGUAGE: powershell
CODE:
docker config create homepage index.html

docker service create
    --name my-iis
    --publish published=8000,target=8000
    --config src=homepage,target="\inetpub\wwwroot\index.html"
    microsoft/iis:nanoserver

----------------------------------------

TITLE: Running a Container with Port Mapping in Docker
DESCRIPTION: Demonstrates how to run a Docker container with port mapping, making the container's port 80 available on the host's port 80.

LANGUAGE: console
CODE:
$ docker run -p 80:80 -d nginx

----------------------------------------

TITLE: Docker for Mac Release Notes Example
DESCRIPTION: Sample release notes entry showing typical format with version, date, upgrades, and changes

LANGUAGE: markdown
CODE:
### Docker Community Edition 18.06.1-ce-mac73 2018-08-29

* Upgrades
  - [Docker 18.06.1-ce](https://github.com/docker/docker-ce/releases/tag/v18.06.1-ce)

* Bug fixes and minor changes
  - Fix local DNS failing to resolve inside containers.

----------------------------------------

TITLE: Signing Docker Image with Content Trust
DESCRIPTION: Demonstrates how to sign a Docker image using content trust with the repository passphrase set via environment variable.

LANGUAGE: console
CODE:
$ export DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE="mypassphrase123"

$ docker trust sign registry.example.com/admin/demo:1
Signing and pushing trust data for local image registry.example.com/admin/demo:1, may overwrite remote trust data
The push refers to repository [registry.example.com/admin/demo]
428c97da766c: Layer already exists
2: digest: sha256:1a6fd470b9ce10849be79e99529a88371dff60c60aab424c077007f6979b4812 size: 524
Signing and pushing trust metadata
Successfully signed registry.example.com/admin/demo:1

----------------------------------------

TITLE: Signing Docker Image with Content Trust
DESCRIPTION: Demonstrates how to sign a Docker image using content trust with the repository passphrase set via environment variable.

LANGUAGE: console
CODE:
$ export DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE="mypassphrase123"

$ docker trust sign registry.example.com/admin/demo:1
Signing and pushing trust data for local image registry.example.com/admin/demo:1, may overwrite remote trust data
The push refers to repository [registry.example.com/admin/demo]
428c97da766c: Layer already exists
2: digest: sha256:1a6fd470b9ce10849be79e99529a88371dff60c60aab424c077007f6979b4812 size: 524
Signing and pushing trust metadata
Successfully signed registry.example.com/admin/demo:1

----------------------------------------

TITLE: Persisting Kubeconfig in Docker Volume in TypeScript
DESCRIPTION: This snippet demonstrates how to persist the kubeconfig file in a Docker volume. It retrieves the kubeconfig using kubectl and then uses a temporary Alpine container to write it to a volume.

LANGUAGE: typescript
CODE:
const kubeConfig = await ddClient.extension.host?.cli.exec("kubectl", [
  "config",
  "view",
  "--raw",
  "--minify",
  "--context",
  "docker-desktop",
]);
if (kubeConfig?.stderr) {
  console.log("error", kubeConfig?.stderr);
  return false;
}

await ddClient.docker.cli.exec("run", [
  "--rm",
  "-v",
  "my-vol:/tmp",
  "alpine",
  "/bin/sh",
  "-c",
  `"touch /tmp/.kube/config && echo '${kubeConfig?.stdout}' > /tmp/.kube/config"`,
]);

----------------------------------------

TITLE: Starting Docker Compose Watch
DESCRIPTION: Command to start the application with Docker Compose Watch enabled for automatic updates.

LANGUAGE: console
CODE:
$ docker compose watch

----------------------------------------

TITLE: Defining ServiceError Interface in TypeScript
DESCRIPTION: Interface definition for handling HTTP error responses in Docker extensions. Includes properties for error name, message, and HTTP status code. Used since version 0.2.0 of the SDK.

LANGUAGE: typescript
CODE:
interface ServiceError {
    name: string;
    message: string;
    statusCode: number;
}

----------------------------------------

TITLE: Comparing Docker Scout Environments
DESCRIPTION: This command compares the latest version of an image with its version in the production environment using Docker Scout.

LANGUAGE: bash
CODE:
$ docker scout compare --to-env production myorg/webapp:latest

----------------------------------------

TITLE: Adding SSL Certificates
DESCRIPTION: Commands for adding custom CA certificates to the system

LANGUAGE: console
CODE:
$ sudo security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain ca.crt

LANGUAGE: console
CODE:
$ security add-trusted-cert -d -r trustRoot -k ~/Library/Keychains/login.keychain ca.crt

----------------------------------------

TITLE: Configuring Search Page in YAML for Docker Documentation
DESCRIPTION: This YAML snippet defines the configuration for the search page in Docker documentation. It sets the title, specifies the layout to be used, and includes parameters to exclude the page from the sitemap and assign an icon.

LANGUAGE: yaml
CODE:
---
title: Search
layout: search
params:
  sitemap: false
  icon: search
---

----------------------------------------

TITLE: Downloading Ollama Model
DESCRIPTION: This console command downloads a specified Ollama model using a provided script.

LANGUAGE: console
CODE:
. ./download_model.sh <model-name>

----------------------------------------

TITLE: Importing Required Libraries for Sentiment Analysis
DESCRIPTION: Python code snippet importing NLTK, SentimentIntensityAnalyzer, and SSL modules for the sentiment analysis application.

LANGUAGE: python
CODE:
import nltk
from nltk.sentiment import SentimentIntensityAnalyzer
import ssl

----------------------------------------

TITLE: Starting the GenAI Application
DESCRIPTION: Console command to build and start all services defined in the Docker Compose configuration.

LANGUAGE: console
CODE:
$ docker compose up --build

----------------------------------------

TITLE: Docker Image Tag Command Syntax
DESCRIPTION: Displays the syntax for using the 'docker image tag' command. It shows the required SOURCE_IMAGE and TARGET_IMAGE parameters.

LANGUAGE: bash
CODE:
docker image tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]

----------------------------------------

TITLE: Configuring YAML Front Matter for Docker Extension API Docs
DESCRIPTION: YAML front matter configuration that specifies build settings and page title for Docker Extension API documentation. The build render is set to 'never' and defines the page title.

LANGUAGE: yaml
CODE:
build:
  render: never
title: Extension APIs

----------------------------------------

TITLE: Pushing a Docker Image to Registry
DESCRIPTION: Demonstrates how to push a built Docker image to a registry using the docker push command.

LANGUAGE: console
CODE:
$ docker push <YOUR_DOCKER_USERNAME>/concepts-build-image-demo

----------------------------------------

TITLE: Setting Dockerfile Labs Syntax Version 1.14.0
DESCRIPTION: Specifies the experimental labs version of Dockerfile syntax, enabling experimental features like CDI device support with the RUN --device flag.

LANGUAGE: dockerfile
CODE:
# syntax=docker.io/docker/dockerfile-upstream:1.14.0-labs

----------------------------------------

TITLE: Building Docker image with attestations
DESCRIPTION: Command to build a Docker image with SBOM and provenance attestations for policy compliance.

LANGUAGE: bash
CODE:
docker buildx build --provenance=true --sbom=true -t <IMAGE> --push .

----------------------------------------

TITLE: Installing Terminal Dependency for Docker Desktop on Debian
DESCRIPTION: Command to install the required gnome-terminal package for non-Gnome Desktop environments

LANGUAGE: bash
CODE:
$ sudo apt install gnome-terminal

----------------------------------------

TITLE: Extension Test Cleanup
DESCRIPTION: TypeScript code for cleaning up after tests by stopping the Docker Desktop Dashboard and uninstalling the extension.

LANGUAGE: typescript
CODE:
afterAll(async () => {
  dashboard?.stop();
  await exec(`docker extension uninstall my/extension`);
});

----------------------------------------

TITLE: Python Configuration YAML Definition
DESCRIPTION: YAML frontmatter defining Python configuration parameters including the icon path for Python's visual representation.

LANGUAGE: yaml
CODE:
---
title: Python
params:
  icon: https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/python/python-original.svg
---

----------------------------------------

TITLE: Basic Docker Compose Backend Configuration
DESCRIPTION: Example reference to a compose.yaml file that can be used to configure backend services with specific options like volume mounts and capabilities.

LANGUAGE: yaml
CODE:
compose.yaml

----------------------------------------

TITLE: Building Docker Image from Cloned Project
DESCRIPTION: This console command builds a Docker image from the cloned project, tagging it with the user's Docker username and 'docker-quickstart' as the repository name.

LANGUAGE: console
CODE:
docker build -t <YOUR_DOCKER_USERNAME>/docker-quickstart .

----------------------------------------

TITLE: Uninstalling Docker Desktop on Fedora
DESCRIPTION: Commands to remove Docker Desktop and perform a complete cleanup on Fedora systems using dnf package manager.

LANGUAGE: bash
CODE:
$ sudo dnf remove docker-desktop
$ rm -r $HOME/.docker/desktop
$ sudo rm /usr/local/bin/com.docker.cli

----------------------------------------

TITLE: Using Join Function in Docker Format
DESCRIPTION: Demonstrates how to concatenate a list of strings with a separator using the join function in Docker inspect command. Shows different syntax for POSIX and Windows shells.

LANGUAGE: console
CODE:
$ docker inspect --format '{{join .Args " , "}}'

LANGUAGE: console
CODE:
$ docker inspect --format '{{join .Args \" , \"}}'

----------------------------------------

TITLE: List Containers API Response
DESCRIPTION: Example response from the list containers API endpoint.

LANGUAGE: HTTP
CODE:
HTTP/1.1 200 OK
Content-Type: application/json

[{
  "Id": "8dfafdbc3a40",
  "Names":["/boring_feynman"],
  "Image": "ubuntu:latest",
  "ImageID": "d74508fb6632491cea586a1fd7d748dfc5274cd6fdfedee309ecdcbc2bf5cb82",
  "Command": "echo 1",
  "Created": 1367854155,
  "State": "exited",
  "Status": "Exit 0",
  "Ports": [{"PrivatePort": 2222, "PublicPort": 3333, "Type": "tcp"}],
  "Labels": {
    "com.example.vendor": "Acme",
    "com.example.license": "GPL",
    "com.example.version": "1.0"
  },
  "SizeRw": 12288,
  "SizeRootFs": 0,
  "HostConfig": {
    "NetworkMode": "default"
  },
  "NetworkSettings": {
    "Networks": {
      "bridge": {
        "IPAMConfig": null,
        "Links": null,
        "Aliases": null,
        "NetworkID": "7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812",
        "EndpointID": "2cdc4edb1ded3631c81f57966563e5c8525b81121bb3706a9a9a3ae102711f3f",
        "Gateway": "172.17.0.1",
        "IPAddress": "172.17.0.2",
        "IPPrefixLen": 16,
        "IPv6Gateway": "",
        "GlobalIPv6Address": "",
        "GlobalIPv6PrefixLen": 0,
        "MacAddress": "02:42:ac:11:00:02"
      }
    }
  },
  "Mounts": [{
    "Name": "fac362...80535",
    "Source": "/data",
    "Destination": "/data",
    "Driver": "local",
    "Mode": "ro,Z",
    "RW": false,
    "Propagation": ""
  }]
}]

----------------------------------------

TITLE: Building Docker Image with Test Execution
DESCRIPTION: This command builds a Docker image, targeting the build stage, and runs the tests during the build process. It uses the --progress=plain flag to show build output and --no-cache to ensure tests always run.

LANGUAGE: console
CODE:
$ docker build -t dotnet-docker-image-test --progress=plain --no-cache --target build .

----------------------------------------

TITLE: Defining YAML Frontmatter for Docker Hub Documentation
DESCRIPTION: This YAML snippet defines metadata for the Docker Hub documentation page, including description, keywords, title, and aliases.

LANGUAGE: yaml
CODE:
---
description: Set up automated builds
keywords: automated, build, images, Docker Hub
title: Set up automated builds
linkTitle: Set up
weight: 10
aliases:
- /docker-hub/builds/automated-build/
- /docker-hub/builds/classic/
- /docker-hub/builds/
---

----------------------------------------

TITLE: Displaying Certificate Information for a Worker Node
DESCRIPTION: This snippet shows the output of a certificate from a worker node in a Docker swarm. It includes details such as the version, serial number, signature algorithm, issuer, validity period, and subject information.

LANGUAGE: bash
CODE:
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number:
            3b:1c:06:91:73:fb:16:ff:69:c3:f7:a2:fe:96:c1:73:e2:80:97:3b
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: CN=swarm-ca
        Validity
            Not Before: Aug 30 02:39:00 2016 GMT
            Not After : Nov 28 03:39:00 2016 GMT
        Subject: O=ec2adilxf4ngv7ev8fwsi61i7, OU=swarm-worker, CN=dw02poa4vqvzxi5c10gm4pq2g
...snip...

----------------------------------------

TITLE: Certificate Update Output
DESCRIPTION: Example output showing successful certificate installation in a Docker container.

LANGUAGE: plaintext
CODE:
Updating certificates in /etc/ssl/certs...
rehash: warning: skipping ca-certificates.crt, it does not contain exactly one certificate or CRL
1 added, 0 removed; done.

LANGUAGE: plaintext
CODE:
<!doctype html>
<html>
<head>
    <title>Example Domain</title>
...

----------------------------------------

TITLE: Incorrect Docker COPY Implementation
DESCRIPTION: Example showing incorrect usage of COPY command attempting to copy an ignored file from tmp directory

LANGUAGE: dockerfile
CODE:
FROM scratch
COPY ./tmp/helloworld.txt /helloworld.txt

----------------------------------------

TITLE: Docker Configuration for TensorFlow.js Application
DESCRIPTION: Dockerfile configuration for building and running the TensorFlow.js face detection application using Nginx.

LANGUAGE: dockerfile
CODE:
FROM nginx:stable-alpine3.17-slim
WORKDIR /usr/share/nginx/html
COPY . .

----------------------------------------

TITLE: Main Program Loop Implementation
DESCRIPTION: Creates an infinite loop that handles user input and performs text translation using Googletrans, with an exit condition.

LANGUAGE: python
CODE:
if __name__ == "__main__":
    while True:
        input_text = input("Enter the text for translation (type 'exit' to end): ")

        if input_text.lower() == 'exit':
            print("Exiting...")
            break

        translator = Translator()
        translated_text = translator.translate(input_text, dest='fr').text
        print(f"Original Text: {input_text}")
        print(f"Translated Text: {translated_text}")

----------------------------------------

TITLE: Binding Privileged Ports Error in Docker Desktop for Mac
DESCRIPTION: Example of an error message when attempting to bind a privileged port without the necessary permissions in Docker Desktop for Mac versions 4.17 and earlier.

LANGUAGE: bash
CODE:
$ docker run -p 127.0.0.1:80:80 docker/getting-started

docker: Error response from daemon: Ports are not available: exposing port
TCP 127.0.0.1:80 -> 0.0.0.0:0: failed to connect to /var/run/com.docker.vmnetd.sock:
is vmnetd running?: dial unix /var/run/com.docker.vmnetd.sock: connect: connection
refused.
ERRO[0003] error waiting for container: context canceled

----------------------------------------

TITLE: Dockerfile for Postgres with Pre-seeding
DESCRIPTION: Dockerfile configuration to include initialization SQL script in Postgres image

LANGUAGE: plaintext
CODE:
# syntax=docker/dockerfile:1
FROM postgres:latest
COPY seed.sql /docker-entrypoint-initdb.d/

----------------------------------------

TITLE: Navigating to Volumes View in Docker Desktop
DESCRIPTION: Method to navigate to the Volumes tab

LANGUAGE: typescript
CODE:
ddClient.desktopUI.navigate.viewVolumes()

----------------------------------------

TITLE: Installing gnome-terminal for non-GNOME environments
DESCRIPTION: Command to install gnome-terminal for non-GNOME desktop environments.

LANGUAGE: bash
CODE:
$ sudo dnf install gnome-terminal

----------------------------------------

TITLE: Initializing Docker Swarm Manager
DESCRIPTION: Initialize a Docker swarm on the manager node using swarm init command with the manager's IP address.

LANGUAGE: console
CODE:
$ docker swarm init --advertise-addr=<IP-ADDRESS-OF-MANAGER>

----------------------------------------

TITLE: Installing Docker Scout CLI Plugin
DESCRIPTION: Command to install the Docker Scout CLI plugin for Docker Engine environments

LANGUAGE: bash
CODE:
$ curl -sSfL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh | sh -s --

----------------------------------------

TITLE: Running the C++ Application in Detached Mode
DESCRIPTION: This command builds and runs the C++ application in the background using Docker Compose, detaching it from the terminal.

LANGUAGE: console
CODE:
$ docker compose up --build -d

----------------------------------------

TITLE: Configuring UI Section in Docker Extension Metadata
DESCRIPTION: This snippet demonstrates how to define the UI section in the metadata.json file. It specifies a new dashboard tab for the extension, including its title, root directory, and entry point.

LANGUAGE: json
CODE:
"ui":{
    "dashboard-tab":
    {
        "title":"MyTitle",
        "root":"/ui",
        "src":"index.html"
    }
}

----------------------------------------

TITLE: Setting Docker Context Environment Variable
DESCRIPTION: Demonstrates how to set the current Docker context using environment variables in both PowerShell and Bash.

LANGUAGE: powershell
CODE:
> $env:DOCKER_CONTEXT='docker-test'

LANGUAGE: bash
CODE:
$ export DOCKER_CONTEXT=docker-test

----------------------------------------

TITLE: Configuring Docker Documentation How-tos Section in YAML
DESCRIPTION: This YAML snippet defines the configuration for a Docker documentation section on 'How-tos'. It specifies build settings, sets the title, and assigns a weight for ordering purposes.

LANGUAGE: yaml
CODE:
build:
  render: never
title: How-tos
weight: 50

----------------------------------------

TITLE: Executing Commands in VM Extension
DESCRIPTION: Example of executing a command inside the backend container using execInVMExtension. This method is deprecated in favor of ExtensionCli.exec.

LANGUAGE: typescript
CODE:
const output = await window.ddClient.backend.execInVMExtension(
  `cliShippedInTheVm xxx`
);

console.log(output);

----------------------------------------

TITLE: Uninstalling Docker Desktop via Mac Command Line
DESCRIPTION: Command to uninstall Docker Desktop using the terminal on macOS. This uses the uninstall script provided with the Docker Desktop application.

LANGUAGE: bash
CODE:
$ /Applications/Docker.app/Contents/MacOS/uninstall

----------------------------------------

TITLE: Running a Container with Custom Port Mapping in Docker
DESCRIPTION: Shows how to run a Docker container with custom port mapping, connecting the container's port 80 to the host's port 8000.

LANGUAGE: console
CODE:
$ docker run -p 8000:80 -d nginx

----------------------------------------

TITLE: Attestation Layer Content Example
DESCRIPTION: Example of an attestation layer containing SBOM data in SPDX format.

LANGUAGE: json
CODE:
{
  "_type": "https://in-toto.io/Statement/v0.1",
  "predicateType": "https://spdx.dev/Document",
  "subject": [
    {
      "name": "_",
      "digest": {
        "sha256": "23678f31b3b3586c4fb318aecfe64a96a1f0916ba8faf9b2be2abee63fa9e827"
      }
    }
  ],
  "predicate": {
    "SPDXID": "SPDXRef-DOCUMENT",
    "spdxVersion": "SPDX-2.2",
    ...
}

----------------------------------------

TITLE: Running Container to Generate Network Traffic
DESCRIPTION: This Docker command runs an Alpine container that installs packages to generate network traffic, which can be observed in the Prometheus graph.

LANGUAGE: console
CODE:
$ docker run --rm alpine apk add git make musl-dev go

----------------------------------------

TITLE: Mounting BTRFS Filesystem
DESCRIPTION: Command to mount a BTRFS filesystem to Docker's directory.

LANGUAGE: console
CODE:
$ sudo mount -t btrfs /dev/xvdf /var/lib/docker

----------------------------------------

TITLE: Defining Kubernetes Deployment and Service for .NET Application
DESCRIPTION: This YAML file defines Kubernetes objects for deploying a .NET application and its database. It includes Deployments for the server and database, and Services for exposing them. The server uses an init container to wait for the database to be ready.

LANGUAGE: yaml
CODE:
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    service: server
  name: server
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      service: server
  strategy: {}
  template:
    metadata:
      labels:
        service: server
    spec:
      initContainers:
        - name: wait-for-db
          image: busybox:1.28
          command:
            [
              "sh",
              "-c",
              'until nc -zv db 5432; do echo "waiting for db"; sleep 2; done;',
            ]
      containers:
        - image: DOCKER_USERNAME/REPO_NAME
          name: server
          imagePullPolicy: Always
          ports:
            - containerPort: 80
              hostPort: 8080
              protocol: TCP
          resources: {}
      restartPolicy: Always
status: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    service: db
  name: db
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      service: db
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        service: db
    spec:
      containers:
        - env:
            - name: POSTGRES_DB
              value: example
            - name: POSTGRES_PASSWORD
              value: example
          image: postgres
          name: db
          ports:
            - containerPort: 5432
              protocol: TCP
          resources: {}
      restartPolicy: Always
status: {}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    service: server
  name: server
  namespace: default
spec:
  type: NodePort
  ports:
    - name: "8080"
      port: 8080
      targetPort: 80
      nodePort: 30001
  selector:
    service: server
status:
  loadBalancer: {}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    service: db
  name: db
  namespace: default
spec:
  ports:
    - name: "5432"
      port: 5432
      targetPort: 5432
  selector:
    service: db
status:
  loadBalancer: {}

----------------------------------------

TITLE: Demonstrating Linux User Namespace Mapping
DESCRIPTION: Shows how root user (0) in container maps to unprivileged user IDs in Docker Desktop Linux VM using uid_map

LANGUAGE: console
CODE:
$ docker run -it --rm --name=first alpine
/ # cat /proc/self/uid_map
         0     100000      65536

----------------------------------------

TITLE: Installing Docker Client Binary on Arch Linux
DESCRIPTION: Commands to download and install the Docker client binary from official Docker repositories. Downloads the static binary, extracts it, and moves it to the system binary location.

LANGUAGE: bash
CODE:
wget https://download.docker.com/linux/static/stable/x86_64/docker-{{% param "docker_ce_version" %}}.tgz -qO- | tar xvfz - docker/docker --strip-components=1
mv ./docker /usr/local/bin

----------------------------------------

TITLE: Displaying Enhanced Service Account Add-on Tiers in Markdown
DESCRIPTION: This snippet presents a markdown table showing the different tiers of Enhanced Service Account add-ons and their corresponding pull rates per day. It includes a footnote explaining potential exceeding of pull limits.

LANGUAGE: markdown
CODE:
| Tier | Pull Rates Per Day\* |
| ------ | ------ |
| 1 | 5,000-10,000 |
| 2 | 10,000-25,000 |
| 3 | 25,000-50,000 |
| 4 | 50,000-100,000 |
| 5 | 100,000+ |

<sub>*The service account may exceed Pulls by up to 25% for up to 20 days during the year without incurring additional fees. Reports on consumption are available upon request.<sub>

----------------------------------------

TITLE: Using Docker Scout CLI
DESCRIPTION: Basic usage syntax for the Docker Scout command line tool. It shows how to invoke Docker Scout with a specific command.

LANGUAGE: bash
CODE:
docker scout COMMAND

----------------------------------------

TITLE: Running Custom Nginx Container
DESCRIPTION: Command to run the custom Nginx container with port mapping to test the modifications.

LANGUAGE: console
CODE:
$ docker run -p 8080:80 --rm <YOUR-USERNAME>/nginx-custom

----------------------------------------

TITLE: Defining Kubernetes Deployment and Service for PHP Application
DESCRIPTION: This YAML file defines a Kubernetes Deployment and a NodePort Service for a PHP application. The Deployment creates a pod with one container using the image built in a previous CI/CD step. The Service exposes the application on port 30001.

LANGUAGE: yaml
CODE:
apiVersion: apps/v1
kind: Deployment
metadata:
  name: docker-php-demo
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      hello-php: web
  template:
    metadata:
      labels:
        hello-php: web
    spec:
      containers:
        - name: hello-site
          image: DOCKER_USERNAME/REPO_NAME
          imagePullPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: php-entrypoint
  namespace: default
spec:
  type: NodePort
  selector:
    hello-php: web
  ports:
    - port: 80
      targetPort: 80
      nodePort: 30001

----------------------------------------

TITLE: JavaScript Database Seeding Script
DESCRIPTION: Node.js script using pg library to programmatically seed Postgres database with todos table and sample data

LANGUAGE: javascript
CODE:
require('dotenv').config();
const { Pool } = require('pg');

const pool = new Pool({
  user: process.env.POSTGRES_USER,
  host: process.env.POSTGRES_DB_HOST,
  database: process.env.POSTGRES_DB,
  port: process.env.POSTGRES_PORT,
  password: process.env.POSTGRES_PASSWORD,
});

const seedData = async () => {
  try {
    await pool.query(`DROP TABLE IF EXISTS todos;`);
    await pool.query(`
      CREATE TABLE todos (
        id SERIAL PRIMARY KEY,
        task VARCHAR(255) NOT NULL,
        completed BOOLEAN DEFAULT false
      );
    `);
    await pool.query(`
      INSERT INTO todos (task, completed) VALUES
      ('Watch netflix', false),
      ('Finish podcast', false),
      ('Pick up kid', false);
    `);
    console.log('Database seeded successfully!');
  } catch (err) {
    console.error('Error seeding the database', err);
  } finally {
    pool.end();
  }
};

seedData();

----------------------------------------

TITLE: Navigating to Dev Environments in Docker Desktop
DESCRIPTION: Method to navigate to the Dev Environments window

LANGUAGE: typescript
CODE:
ddClient.desktopUI.navigate.viewDevEnvironments()

----------------------------------------

TITLE: Environment Variable Type Coercion Example
DESCRIPTION: Demonstrates how environment variables are coerced into appropriate types when overriding variables in Bake configurations.

LANGUAGE: hcl
CODE:
variable "PORT" {
  default = 3000
}

group "default" {
  targets = ["backend", "frontend"]
}

target "backend" {
  args = {
    PORT = PORT
  }
}

target "frontend" {
  args = {
    PORT = add(PORT, 1)
  }
}

----------------------------------------

TITLE: Basic Docker Desktop Extension File Structure
DESCRIPTION: Shows the required directory structure for a minimal Docker Desktop frontend extension.

LANGUAGE: bash
CODE:
.
├── Dockerfile # (1)
├── metadata.json # (2)
└── ui # (3)
    └── index.html

----------------------------------------

TITLE: Function Configuration Extension Example
DESCRIPTION: Shows how to use extensions to share common function configurations across multiple services.

LANGUAGE: yaml
CODE:
x-function: &function
 labels:
   function: "true"
 depends_on:
   - gateway
 networks:
   - functions
 deploy:
   placement:
     constraints:
       - 'node.platform.os == linux'
services:
 nodeinfo:
   <<: *function
   image: functions/nodeinfo:latest
   environment:
     no_proxy: "gateway"
     https_proxy: $https_proxy
 echoit:
   <<: *function
   image: functions/alpine:health
   environment:
     fprocess: "cat"
     no_proxy: "gateway"
     https_proxy: $https_proxy

----------------------------------------

TITLE: Building Docker Image with SBOM Attestation
DESCRIPTION: Commands to build the Docker image with SBOM attestation enabled and verify the SBOM attachment

LANGUAGE: bash
CODE:
$ docker buildx build --sbom=true -t hello:sbom .

LANGUAGE: bash
CODE:
$ docker scout sbom --format=list hello:sbom

----------------------------------------

TITLE: Building and Pushing Multi-Arch Docker Extension
DESCRIPTION: Uses the make command to build and push a Docker extension for both linux/amd64 and linux/arm64 architectures to Docker Hub.

LANGUAGE: console
CODE:
$ make push-extension

----------------------------------------

TITLE: Starting Docker Service
DESCRIPTION: Command to start the Docker daemon using systemctl

LANGUAGE: console
CODE:
$ sudo systemctl start docker

----------------------------------------

TITLE: Creating and Pushing Helm Chart to Docker Hub
DESCRIPTION: Series of commands to create a Helm chart, package it, and push it to Docker Hub. Requires Helm 3.0.0 or later and Docker Hub credentials.

LANGUAGE: console
CODE:
$ helm create demo

LANGUAGE: console
CODE:
$ helm package demo

LANGUAGE: console
CODE:
$ helm registry login registry-1.docker.io -u hubuser

LANGUAGE: console
CODE:
$ helm push demo-0.1.0.tgz oci://registry-1.docker.io/docker

----------------------------------------

TITLE: Creating and Pushing Helm Chart to Docker Hub
DESCRIPTION: Series of commands to create a Helm chart, package it, and push it to Docker Hub. Requires Helm 3.0.0 or later and Docker Hub credentials.

LANGUAGE: console
CODE:
$ helm create demo

LANGUAGE: console
CODE:
$ helm package demo

LANGUAGE: console
CODE:
$ helm registry login registry-1.docker.io -u hubuser

LANGUAGE: console
CODE:
$ helm push demo-0.1.0.tgz oci://registry-1.docker.io/docker

----------------------------------------

TITLE: Page Metadata Config
DESCRIPTION: YAML frontmatter configuration specifying page metadata and navigation settings

LANGUAGE: yaml
CODE:
description: Change log / release notes for Docker Desktop for Mac 3.x
keywords: Docker Desktop for Mac 3.x release notes
title: Docker Desktop for Mac 3.x release notes
toc_min: 1
toc_max: 2
aliases:
- /desktop/mac/previous-versions/
- /docker-for-mac/previous-versions/
- /desktop/mac/release-notes/3.x/
sitemap: false

----------------------------------------

TITLE: Listing Docker Images in TypeScript
DESCRIPTION: Shows how to use the listImages method to get a list of Docker images. This method is deprecated and will be removed in a future version.

LANGUAGE: typescript
CODE:
const images = await window.ddClient.listImages();

----------------------------------------

TITLE: Creating Docker Container from Image
DESCRIPTION: Command to recreate containers from saved images after restoration.

LANGUAGE: bash
CODE:
docker run

----------------------------------------

TITLE: Watching All Repositories in a Registry
DESCRIPTION: This command watches all repositories in a specified registry and pushes new images to Docker Scout.

LANGUAGE: console
CODE:
$ docker scout watch --org my-org --registry registry.example.com

----------------------------------------

TITLE: Persisting and Retrieving Kubeconfig in localStorage in TypeScript
DESCRIPTION: These snippets show how to persist the kubeconfig in the browser's localStorage and how to retrieve it later. This method is useful for persisting data when navigating out of the extension.

LANGUAGE: typescript
CODE:
localStorage.setItem("kubeconfig", kubeConfig);

LANGUAGE: typescript
CODE:
localStorage.getItem("kubeconfig");

----------------------------------------

TITLE: Repository Events Table in Markdown
DESCRIPTION: A table defining repository-level events and their descriptions for Docker activity logs, including repository creation, updates, and tag management.

LANGUAGE: markdown
CODE:
| Event | Description |
|:--|:--|
| Repository Created | Activities related to the creation of a new repository |
| Repository Deleted | Activities related to the deletion of a repository |
| Repository Updated | Activities related to updating the description, full description, or status of a repository |

----------------------------------------

TITLE: Initializing Sentiment Analyzer and Generating Predictions
DESCRIPTION: This snippet initializes the SentimentIntensityAnalyzer, generates sentiment scores for test data, and classifies them as positive or negative based on a threshold.

LANGUAGE: python
CODE:
sia = SentimentIntensityAnalyzer()
vader_predictions = [sia.polarity_scores(text)["compound"] for text in X_test]
threshold = 0.2
vader_classifications = [0 if score > threshold else 1 for score in vader_predictions]

----------------------------------------

TITLE: Restricted Bind Mount Example
DESCRIPTION: Demonstrates prevention of mounting sensitive host system files into containers

LANGUAGE: console
CODE:
$ docker run -it --rm -v /etc/docker/daemon.json:/mnt/daemon.json alpine
docker: Error response from daemon: failed to create shim task: OCI runtime create failed: error in the container spec: can't mount /etc/docker/daemon.json because it's configured as a restricted host mount: unknown

----------------------------------------

TITLE: Configuring Ruby 3.2 Docker Environment
DESCRIPTION: This Dockerfile sets up a Ruby 3.2 environment using the official Ruby image. It installs necessary dependencies, sets up the working directory, and configures the application.

LANGUAGE: Dockerfile
CODE:
FROM ruby:3.2

# throw errors if Gemfile has been modified since Gemfile.lock
RUN bundle config --global frozen 1

WORKDIR /usr/src/app

COPY Gemfile Gemfile.lock ./
RUN bundle install

COPY . .

CMD ["./your-daemon-or-script.rb"]

----------------------------------------

TITLE: Docker Engine Daemon Configuration Example
DESCRIPTION: Example JSON configuration for the Docker daemon used to run containers in Docker Desktop. Shows basic builder garbage collection settings.

LANGUAGE: json
CODE:
{
  "builder": {
    "gc": {
      "defaultKeepStorage": "20GB",
      "enabled": true
    }
  },
  "experimental": false
}

----------------------------------------

TITLE: Basic Docker Scout Recommendations Command
DESCRIPTION: Shows how to display base image update recommendations for a specific golang version.

LANGUAGE: console
CODE:
$ docker scout recommendations golang:1.19.4

----------------------------------------

TITLE: Upgrading Docker Desktop
DESCRIPTION: Commands to remove the previous version of Docker Desktop and install the new version.

LANGUAGE: bash
CODE:
$ sudo dnf remove docker-desktop
$ sudo dnf install ./docker-desktop-<arch>-rhel.rpm

----------------------------------------

TITLE: Stopping the Detached C++ Application
DESCRIPTION: This command stops and removes the containers created by Docker Compose for the C++ application running in detached mode.

LANGUAGE: console
CODE:
$ docker compose down

----------------------------------------

TITLE: Mount System Call Restrictions
DESCRIPTION: Shows how privileged containers are prevented from modifying read-only bind mounts

LANGUAGE: console
CODE:
$ docker run -it --rm --cap-add SYS_ADMIN -v $HOME:/mnt:ro alpine
/ # mount -o remount,rw /mnt /mnt
mount: permission denied (are you root?)

----------------------------------------

TITLE: Running Docker Compose with Build
DESCRIPTION: Command to start the application using Docker Compose with build option.

LANGUAGE: console
CODE:
$ docker compose up --build

----------------------------------------

TITLE: Opening External URLs in TypeScript
DESCRIPTION: Demonstrates how to open an external URL using the system default browser with the openExternal method. This method is deprecated and will be replaced by the openExternal method in the Host interface.

LANGUAGE: typescript
CODE:
window.ddClient.openExternal("https://docker.com");

----------------------------------------

TITLE: Configuring YAML Front Matter for Docker CLI Documentation
DESCRIPTION: This YAML snippet defines the front matter for a documentation page about Docker's CLI. It specifies build settings, page title, and weight for ordering in the documentation structure.

LANGUAGE: yaml
CODE:
---
build:
  render: never
title: CLI
weight: 50
---

----------------------------------------

TITLE: Navigating to Container Logs in Docker Desktop UI
DESCRIPTION: Demonstrates how to navigate to a specific container's logs using the Docker Desktop UI API. Includes error handling and toast notification if navigation fails.

LANGUAGE: typescript
CODE:
const id = '8c7881e6a107';
try {
  await ddClient.desktopUI.navigate.viewContainerLogs(id);
} catch (e) {
  console.error(e);
  ddClient.desktopUI.toast.error(
    `Failed to navigate to logs for container "${id}".`
  );
}

----------------------------------------

TITLE: Inspecting Docker Volume
DESCRIPTION: Shows how to inspect volume details including the storage location on the host machine.

LANGUAGE: console
CODE:
$ docker volume inspect todo-db

----------------------------------------

TITLE: Docker Run Command with GCP Logging Options
DESCRIPTION: Example of running a Docker container with gcplogs driver and various logging options including labels and environment variables.

LANGUAGE: console
CODE:
$ docker run \
    --log-driver=gcplogs \
    --log-opt labels=location \
    --log-opt env=TEST \
    --log-opt gcp-log-cmd=true \
    --env "TEST=false" \
    --label location=west \
    your/application

----------------------------------------

TITLE: YAML Frontmatter Configuration for Docker FAQs
DESCRIPTION: YAML configuration block that specifies the build settings, title and weight for a Docker FAQ documentation page. The build render is set to never, indicating this page should not be processed during build.

LANGUAGE: yaml
CODE:
build:
  render: never
title: FAQs
weight: 30

----------------------------------------

TITLE: Configuring MCP Filesystem Server in gordon-mcp.yml
DESCRIPTION: This YAML snippet shows how to configure the MCP filesystem server with a bind mount to provide filesystem access to Gordon.

LANGUAGE: yaml
CODE:
services:
  fs:
    image: mcp/filesystem
    command:
      - /rootfs
    volumes:
      - .:/rootfs

----------------------------------------

TITLE: Introducing Docker Debug in Markdown
DESCRIPTION: This snippet introduces Docker Debug as a replacement for debugging with 'docker exec'. It highlights the ability to get a shell into any container or image, including slim ones, without modifications and with customizable debugging tools.

LANGUAGE: markdown
CODE:
> **Introducing Docker Debug**
>
> To easily get a debug shell into any container, use `docker debug`. Docker
> Debug is a replacement for debugging with `docker exec`. With it, you can get
> a shell into any container or image, even slim ones, without modifications.
> Plus, you can bring along your favorite debugging tools in its customizable
> toolbox.
>
> Explore [Docker Debug](../debug.md) now.

----------------------------------------

TITLE: Introducing Docker Debug in Markdown
DESCRIPTION: This snippet introduces Docker Debug as a replacement for debugging with 'docker exec'. It highlights the ability to get a shell into any container or image, including slim ones, without modifications and with customizable debugging tools.

LANGUAGE: markdown
CODE:
> **Introducing Docker Debug**
>
> To easily get a debug shell into any container, use `docker debug`. Docker
> Debug is a replacement for debugging with `docker exec`. With it, you can get
> a shell into any container or image, even slim ones, without modifications.
> Plus, you can bring along your favorite debugging tools in its customizable
> toolbox.
>
> Explore [Docker Debug](../debug.md) now.

----------------------------------------

TITLE: Creating Docker Swarm Stack Configuration
DESCRIPTION: YAML configuration file for deploying a containerized application using Docker Swarm. Defines a service named bb-app that exposes port 3000 internally and maps to port 8000 externally.

LANGUAGE: yaml
CODE:
version: "3.7"

services:
  bb-app:
    image: getting-started
    ports:
      - "8000:3000"

----------------------------------------

TITLE: Creating Docker Networks with Custom Gateway Modes
DESCRIPTION: Commands demonstrating how to create Docker networks with specific gateway modes for IPv6 routing.

LANGUAGE: bash
CODE:
$ docker network create --ipv6 --subnet 2001:db8::/64 -o com.docker.network.bridge.gateway_mode_ipv6=routed mynet
$ docker run --network=mynet -p 8080:80 myimage
$ docker run --network mynet -p '[::]::80'

----------------------------------------

TITLE: Docker Compose PS Filter Option
DESCRIPTION: Example showing how to use the --filter flag to filter containers by status.

LANGUAGE: console
CODE:
$ docker compose ps --filter status=running
NAME            IMAGE     COMMAND           SERVICE    CREATED         STATUS          PORTS
example-foo-1   alpine    "/entrypoint.…"   foo        4 seconds ago   Up 2 seconds    0.0.0.0:8080->80/tcp

----------------------------------------

TITLE: Displaying Docker Compose Service Status
DESCRIPTION: Example output of the docker compose ps command, showing the status of running services.

LANGUAGE: text
CODE:
$ docker compose ps

NAME                IMAGE                COMMAND                  SERVICE             CREATED             STATUS              PORTS
example-frontend-1  example/webapp       "nginx -g 'daemon of…"   frontend            2 minutes ago       Up 2 minutes        0.0.0.0:443->8043/tcp
example-backend-1   example/database     "docker-entrypoint.s…"   backend             2 minutes ago       Up 2 minutes

----------------------------------------

TITLE: Verifying Storage Driver Configuration
DESCRIPTION: Command to verify the active storage driver configuration using docker info

LANGUAGE: bash
CODE:
$ docker info

Containers: 0
Images: 0
Storage Driver: overlay2
 Backing Filesystem: xfs
 Supports d_type: true
 Native Overlay Diff: true
<...>

----------------------------------------

TITLE: Displaying the C++ Docker Project Structure
DESCRIPTION: This snippet shows the directory structure of the cloned C++ Docker project, including the Dockerfile, compose.yml, and source code files.

LANGUAGE: text
CODE:
├── c-plus-plus-docker/
│ ├── compose.yml
│ ├── Dockerfile
│ ├── LICENSE
│ ├── ok_api.cpp
│ └── README.md

----------------------------------------

TITLE: Checking WSL Version Command
DESCRIPTION: Command to verify the installed WSL version on Windows, required for ECI support. WSL 2 version 1.1.3.0 or later is needed.

LANGUAGE: shell
CODE:
wsl --version

----------------------------------------

TITLE: Building Container Image with OCI Exporter
DESCRIPTION: Command to build a container image using the OCI exporter with optional parameters

LANGUAGE: console
CODE:
$ docker buildx build --output type=oci[,parameters] .

----------------------------------------

TITLE: Docker Compose PS with JSON Formatting
DESCRIPTION: Example demonstrating JSON output format for programmatic processing of container information.

LANGUAGE: console
CODE:
$ docker compose ps --format json
[{"ID":"1553b0236cf4d2715845f053a4ee97042c4f9a2ef655731ee34f1f7940eaa41a","Name":"example-bar-1","Command":"/docker-entrypoint.sh nginx -g 'daemon off;'","Project":"example","Service":"bar","State":"exited","Health":"","ExitCode":0,"Publishers":null},{"ID":"f02a4efaabb67416e1ff127d51c4b5578634a0ad5743bd65225ff7d1909a3fa0","Name":"example-foo-1","Command":"/docker-entrypoint.sh nginx -g 'daemon off;'","Project":"example","Service":"foo","State":"running","Health":"","ExitCode":0,"Publishers":[{"URL":"0.0.0.0","TargetPort":80,"PublishedPort":8080,"Protocol":"tcp"}]}]

----------------------------------------

TITLE: Dockerfile for Supervisord Process Management
DESCRIPTION: This Dockerfile sets up an Ubuntu-based container with supervisord for managing multiple processes. It installs supervisord, copies the necessary configuration and process executables, and sets supervisord as the entry point.

LANGUAGE: dockerfile
CODE:
# syntax=docker/dockerfile:1
FROM ubuntu:latest
RUN apt-get update && apt-get install -y supervisor
RUN mkdir -p /var/log/supervisor
COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf
COPY my_first_process my_first_process
COPY my_second_process my_second_process
CMD ["/usr/bin/supervisord"]

----------------------------------------

TITLE: Stopping the Bun Application
DESCRIPTION: This command stops and removes the containers, networks, and volumes created by Docker Compose for the Bun application.

LANGUAGE: console
CODE:
$ docker compose down

----------------------------------------

TITLE: Removing Docker Containers
DESCRIPTION: Remove one or more Docker containers using their names.

LANGUAGE: bash
CODE:
$ docker rm wonderful_kalam friendly_montalcini tender_bose

----------------------------------------

TITLE: Listing Docker Containers in TypeScript
DESCRIPTION: Demonstrates how to use the listContainers method to retrieve a list of running Docker containers. This method is deprecated and will be removed in a future version.

LANGUAGE: typescript
CODE:
const containers = await window.ddClient.listContainers();

----------------------------------------

TITLE: Configuring Kubernetes Deployment and Service
DESCRIPTION: Kubernetes YAML configuration that defines a Deployment with one replica of a Deno application container and a NodePort Service to expose the application on port 30001. The Deployment manages the pod lifecycle while the Service handles network routing.

LANGUAGE: yaml
CODE:
apiVersion: apps/v1
kind: Deployment
metadata:
  name: docker-deno-demo
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: deno-api
  template:
    metadata:
      labels:
        app: deno-api
    spec:
      containers:
       - name: deno-api
         image: DOCKER_USERNAME/REPO_NAME
         imagePullPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: service-entrypoint
  namespace: default
spec:
  type: NodePort
  selector:
    app: deno-api
  ports:
  - port: 8000
    targetPort: 8000
    nodePort: 30001

----------------------------------------

TITLE: Cloning Python Docker Development Example Repository
DESCRIPTION: Command to clone the sample Python application repository for Docker development.

LANGUAGE: Shell
CODE:
$ git clone https://github.com/estebanx64/python-docker-dev-example

----------------------------------------

TITLE: Running a Command with Service Ports in Docker Compose
DESCRIPTION: Shows how to run a command while exposing all service ports to the host using the --service-ports option.

LANGUAGE: console
CODE:
$ docker compose run --service-ports web python manage.py shell

----------------------------------------

TITLE: Inspecting Provenance Attestations
DESCRIPTION: Commands to inspect provenance attestations using docker buildx imagetools inspect with various formatting options.

LANGUAGE: console
CODE:
$ docker buildx imagetools inspect <namespace>/<image>:<version> \
    --format "{{ json .Provenance.SLSA }}"

----------------------------------------

TITLE: Using Multiple Isolated BuildKit Builders in GitHub Actions
DESCRIPTION: Demonstrates how to set up and use multiple isolated BuildKit builders for different build tasks within a single GitHub Actions workflow.

LANGUAGE: yaml
CODE:
name: ci

on:
  push:

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Set up builder1
        uses: docker/setup-buildx-action@v3
        id: builder1
      
      - name: Set up builder2
        uses: docker/setup-buildx-action@v3
        id: builder2
      
      - name: Build against builder1
        uses: docker/build-push-action@v6
        with:
          builder: ${{ steps.builder1.outputs.name }}
          target: mytarget1
      
      - name: Build against builder2
        uses: docker/build-push-action@v6
        with:
          builder: ${{ steps.builder2.outputs.name }}
          target: mytarget2

----------------------------------------

TITLE: YAML Frontmatter Configuration for Docker Container Stop Documentation
DESCRIPTION: YAML configuration block defining metadata for the Docker container stop command documentation, including the data folder, file name, title, and URL aliases.

LANGUAGE: yaml
CODE:
datafolder: engine-cli
datafile: docker_container_stop
title: docker container stop
aliases:
- /edge/engine/reference/commandline/container_stop/
- /engine/reference/commandline/container_stop/
- /engine/reference/commandline/stop/
layout: cli

----------------------------------------

TITLE: Inspecting Docker Builder Configuration
DESCRIPTION: Inspects and bootstraps the configured builder to verify setup and initialization.

LANGUAGE: console
CODE:
docker buildx inspect --bootstrap

----------------------------------------

TITLE: Configuring Windows DNS Proxy in daemon.json
DESCRIPTION: JSON configuration to enable the Windows DNS proxy feature for native Windows containers. This allows the internal DNS server to forward requests to external resolvers.

LANGUAGE: json
CODE:
{
  "features": {
    "windows-dns-proxy": true
  }
}

----------------------------------------

TITLE: Updating Vulnerable Package Version
DESCRIPTION: Update the package.json file to use a non-vulnerable version of Express.

LANGUAGE: diff
CODE:
   "dependencies": {
-    "express": "4.17.1"
+    "express": "4.17.3"
   }

----------------------------------------

TITLE: Updating Git Remote URL
DESCRIPTION: Command to update the Git remote URL to point to a new GitHub repository. Requires replacing placeholder values with actual GitHub username and repository name.

LANGUAGE: console
CODE:
$ git remote set-url origin https://github.com/your-username/your-repository.git

----------------------------------------

TITLE: Basic Docker Daemon Usage
DESCRIPTION: Shows the basic usage syntax for the Docker daemon command (dockerd) with available options.

LANGUAGE: markdown
CODE:
Usage:	dockerd [OPTIONS]

A self-sufficient runtime for containers.

Options:
      --add-runtime runtime                   Register an additional OCI compatible runtime (default [])
      --authorization-plugin list             Authorization plugins to load
      --bip string                            IPv4 address for the default bridge
      --bip6 string                           IPv6 address for the default bridge
  -b, --bridge string                         Attach containers to a network bridge
      --cdi-spec-dir list                     CDI specification directories to use
      --cgroup-parent string                  Set parent cgroup for all containers
      --config-file string                    Daemon configuration file (default "/etc/docker/daemon.json")
      --containerd string                     containerd grpc address
      --containerd-namespace string           Containerd namespace to use (default "moby")
      --containerd-plugins-namespace string   Containerd namespace to use for plugins (default "plugins.moby")
      --cpu-rt-period int                     Limit the CPU real-time period in microseconds for the
                                              parent cgroup for all containers (not supported with cgroups v2)
      --cpu-rt-runtime int                    Limit the CPU real-time runtime in microseconds for the
                                              parent cgroup for all containers (not supported with cgroups v2)
      --cri-containerd                        start containerd with cri
      --data-root string                      Root directory of persistent Docker state (default "/var/lib/docker")
  -D, --debug                                 Enable debug mode
      --default-address-pool pool-options     Default address pools for node specific local networks
      --default-cgroupns-mode string          Default mode for containers cgroup namespace ("host" | "private") (default "private")
      --default-gateway ip                    Default gateway IPv4 address for the default bridge network
      --default-gateway-v6 ip                 Default gateway IPv6 address for the default bridge network
      --default-ipc-mode string               Default mode for containers ipc ("shareable" | "private") (default "private")
      --default-network-opt mapmap            Default network options (default map[])
      --default-runtime string                Default OCI runtime for containers (default "runc")
      --default-shm-size bytes                Default shm size for containers (default 64MiB)
      --default-ulimit ulimit                 Default ulimits for containers (default [])
      --dns list                              DNS server to use
      --dns-opt list                          DNS options to use
      --dns-search list                       DNS search domains to use
      --exec-opt list                         Runtime execution options
      --exec-root string                      Root directory for execution state files (default "/var/run/docker")
      --experimental                          Enable experimental features
      --feature map                           Enable feature in the daemon
      --fixed-cidr string                     IPv4 subnet for the default bridge network
      --fixed-cidr-v6 string                  IPv6 subnet for the default bridge network
  -G, --group string                          Group for the unix socket (default "docker")
      --help                                  Print usage
  -H, --host list                             Daemon socket(s) to connect to
      --host-gateway-ip list                  IP addresses that the special 'host-gateway' string in --add-host resolves to.
                                              Defaults to the IP addresses of the default bridge
      --http-proxy string                     HTTP proxy URL to use for outgoing traffic
      --https-proxy string                    HTTPS proxy URL to use for outgoing traffic
      --icc                                   Enable inter-container communication for the default bridge network (default true)
      --init                                  Run an init in the container to forward signals and reap processes
      --init-path string                      Path to the docker-init binary
      --insecure-registry list                Enable insecure registry communication
      --ip ip                                 Host IP for port publishing from the default bridge network (default 0.0.0.0)
      --ip-forward                            Enable IP forwarding in system configuration (default true)
      --ip-forward-no-drop                    Do not set the filter-FORWARD policy to DROP when enabling IP forwarding
      --ip-masq                               Enable IP masquerading for the default bridge network (default true)
      --ip6tables                             Enable addition of ip6tables rules (default true)
      --iptables                              Enable addition of iptables rules (default true)
      --ipv6                                  Enable IPv6 networking for the default bridge network
      --label list                            Set key=value labels to the daemon
      --live-restore                          Enable live restore of docker when containers are still running
      --log-driver string                     Default driver for container logs (default "json-file")
      --log-format string                     Set the logging format ("text"|"json") (default "text")
  -l, --log-level string                      Set the logging level ("debug"|"info"|"warn"|"error"|"fatal") (default "info")
      --log-opt map                           Default log driver options for containers (default map[])
      --max-concurrent-downloads int          Set the max concurrent downloads (default 3)
      --max-concurrent-uploads int            Set the max concurrent uploads (default 5)
      --max-download-attempts int             Set the max download attempts for each pull (default 5)
      --metrics-addr string                   Set default address and port to serve the metrics api on
      --mtu int                               Set the MTU for the default "bridge" network (default 1500)
      --network-control-plane-mtu int         Network Control plane MTU (default 1500)
      --no-new-privileges                     Set no-new-privileges by default for new containers
      --no-proxy string                       Comma-separated list of hosts or IP addresses for which the proxy is skipped
      --node-generic-resource list            Advertise user-defined resource
  -p, --pidfile string                        Path to use for daemon PID file (default "/var/run/docker.pid")
      --raw-logs                              Full timestamps without ANSI coloring
      --registry-mirror list                  Preferred registry mirror
      --rootless                              Enable rootless mode; typically used with RootlessKit
      --seccomp-profile string                Path to seccomp profile. Set to "unconfined" to disable the default seccomp profile (default "builtin")
      --selinux-enabled                       Enable selinux support
      --shutdown-timeout int                  Set the default shutdown timeout (default 15)
  -s, --storage-driver string                 Storage driver to use
      --storage-opt list                      Storage driver options
      --swarm-default-advertise-addr string   Set default address or interface for swarm advertised address
      --tls                                   Use TLS; implied by --tlsverify
      --tlscacert string                      Trust certs signed only by this CA (default "~/.docker/ca.pem")
      --tlscert string                        Path to TLS certificate file (default "~/.docker/cert.pem")
      --tlskey string                         Path to TLS key file (default "~/.docker/key.pem")
      --tlsverify                             Use TLS and verify the remote
      --userland-proxy                        Use userland proxy for loopback traffic (default true)
      --userland-proxy-path string            Path to the userland proxy binary
      --userns-remap string                   User/Group setting for user namespaces
      --validate                              Validate daemon configuration and exit
  -v, --version                               Print version information and quit

----------------------------------------

TITLE: Modifying Dockerfile Source Directory
DESCRIPTION: Diff showing modification to the Dockerfile COPY instruction to use database-enabled source files.

LANGUAGE: diff
CODE:
-COPY src/ .
+COPY src_db/ .

----------------------------------------

TITLE: Verifying VEX Documents with Docker Scout
DESCRIPTION: Command to verify VEX documents by applying them to a local image analysis using Docker Scout CLI.

LANGUAGE: bash
CODE:
docker scout cves <IMAGE> --vex-location .

----------------------------------------

TITLE: Building and Installing Docker Desktop Extension
DESCRIPTION: Commands for building and installing the extension in Docker Desktop.

LANGUAGE: bash
CODE:
$ docker build --tag=awesome-inc/my-extension:latest .
$ docker extension install awesome-inc/my-extension:latest

----------------------------------------

TITLE: Integrating Docker Scout in GitLab CI Pipeline
DESCRIPTION: This YAML snippet shows how to configure a GitLab CI job to record the environment using Docker Scout. It uses the Docker executor and includes logic for determining the image tag.

LANGUAGE: yaml
CODE:
variables:
  image: namespace/repo

record_environment:
  image: docker/scout-cli:1.0.2
  script:
    - |
      if [[ -z "$CI_COMMIT_TAG" ]]; then
        tag="latest"
        echo "Running tag '$CI_COMMIT_TAG'"
      else
        tag="$CI_COMMIT_REF_SLUG"
        echo "Running on branch '$CI_COMMIT_BRANCH'"
      fi    
      echo "tag = $tag"
    - environment --org <MY_DOCKER_ORG> "PRODUCTION" ${image}:${tag}

----------------------------------------

TITLE: Implementing Summary Bar in Markdown
DESCRIPTION: This snippet demonstrates how to add a summary bar shortcode in Markdown for Docker documentation. The summary bar is used to display feature-specific information such as required subscription, availability, version requirements, and intended user role.

LANGUAGE: markdown
CODE:
{{</* summary-bar feature_name="PKG installer" */>}}

----------------------------------------

TITLE: Managing Network Plugin Service Deployment
DESCRIPTION: Commands showing service creation, scaling, and container distribution across nodes based on network plugin availability.

LANGUAGE: console
CODE:
$ docker service create --network globalnet --name myservice --replicas=8 mrjana/simpleweb simpleweb
$ docker service scale myservice=0
$ docker service scale myservice=8

----------------------------------------

TITLE: Adding a Signer to Docker Content Trust
DESCRIPTION: Shows how to add a signer to a Docker repository using a public key certificate.

LANGUAGE: bash
CODE:
$ docker trust signer add --key cert.pem jeff registry.example.com/admin/demo
Adding signer "jeff" to registry.example.com/admin/demo...
Enter passphrase for new repository key with ID 10b5e94:

----------------------------------------

TITLE: Configuring Docker Daemon with Authorization Plugins
DESCRIPTION: Command to enable authorization plugins when starting the Docker daemon. Multiple plugins can be specified using repeated flags.

LANGUAGE: bash
CODE:
$ dockerd --authorization-plugin=plugin1 --authorization-plugin=plugin2,...

----------------------------------------

TITLE: Comparing SBOMs with Docker Scout CLI
DESCRIPTION: Illustrates how to use the sbom:// prefix for image comparison in the docker scout compare command.

LANGUAGE: console
CODE:
$ docker scout compare sbom://image1.json --to sbom://image2.json

----------------------------------------

TITLE: Handling SSL Certificate Verification for NLTK Downloads
DESCRIPTION: This code block provides a workaround for SSL certificate verification issues that may occur when downloading NLTK data. It creates an unverified HTTPS context to bypass certificate checks.

LANGUAGE: python
CODE:
try:
    _create_unverified_https_context = ssl._create_unverified_context
except AttributeError:
    pass
else:
    ssl._create_default_https_context = _create_unverified_https_context

----------------------------------------

TITLE: Comparing Specific Package Types and Severities
DESCRIPTION: This example shows how to use the 'docker scout compare' command to compare only maven packages and display only critical vulnerabilities for those packages.

LANGUAGE: console
CODE:
$ docker scout compare --only-package-type maven --only-severity critical --to namespace/repo:latest namespace/repo:v1.2.3-pre

----------------------------------------

TITLE: Kubernetes Deployment Commands
DESCRIPTION: Console commands for deploying and managing the Kubernetes resources, including applying configurations, checking deployment status, and cleaning up resources.

LANGUAGE: console
CODE:
$ kubectl apply -f docker-postgres-kubernetes.yaml
$ kubectl apply -f docker-python-kubernetes.yaml
$ kubectl get deployments
$ kubectl get services
$ curl http://localhost:30001/
$ kubectl delete -f docker-python-kubernetes.yaml
$ kubectl delete -f docker-postgres-kubernetes.yaml

----------------------------------------

TITLE: Correct Usage of Declared ARG in Dockerfile FROM
DESCRIPTION: This example shows the correct way to use a build argument in a FROM instruction by first declaring it with an ARG instruction, avoiding the UndefinedArgInFrom rule warning.

LANGUAGE: dockerfile
CODE:
ARG VARIANT="-alpine3.20"
FROM node:22${VARIANT} AS jsbuilder

----------------------------------------

TITLE: Pushing Docker Image to Docker Hub
DESCRIPTION: Command to push a Docker image to Docker Hub repository. Replace YOUR-USER-NAME with your Docker ID.

LANGUAGE: bash
CODE:
docker push YOUR-USER-NAME/getting-started

----------------------------------------

TITLE: Creating IPvlan L2 Network
DESCRIPTION: Creates an IPvlan network in L2 mode as an alternative to Macvlan, supporting multiple subnets and gateways.

LANGUAGE: bash
CODE:
docker network create -d ipvlan \
    --subnet=192.168.210.0/24 \
    --subnet=192.168.212.0/24 \
    --gateway=192.168.210.254 \
    --gateway=192.168.212.254 \
     -o ipvlan_mode=l2 -o parent=eth0 ipvlan210

----------------------------------------

TITLE: Configuring BuildKit in Docker Daemon
DESCRIPTION: JSON configuration to enable BuildKit by default in the Docker daemon settings

LANGUAGE: json
CODE:
{
  "features": {
    "buildkit": true
  }
}

----------------------------------------

TITLE: File Path Reference for Docker Settings Management
DESCRIPTION: References to the configuration files used in Docker Settings Management, including admin-settings.json and settings-store.json (or settings.json for Docker Desktop 4.34 and earlier).

LANGUAGE: plaintext
CODE:
admin-settings.json
settings-store.json
settings.json

----------------------------------------

TITLE: Example VAT Number Format
DESCRIPTION: Demonstrates the correct format for entering a VAT number, using Germany as an example. VAT numbers must include the country prefix.

LANGUAGE: text
CODE:
DE123456789

----------------------------------------

TITLE: Example OpenVEX JSON Document
DESCRIPTION: Sample JSON output of a VEX document generated by the vexctl command, showing the structure and content of an OpenVEX document.

LANGUAGE: json
CODE:
{
  "@context": "https://openvex.dev/ns/v0.2.0",
  "@id": "https://openvex.dev/docs/public/vex-749f79b50f5f2f0f07747c2de9f1239b37c2bda663579f87a35e5f0fdfc13de5",
  "author": "author@example.com",
  "timestamp": "2024-05-27T13:20:22.395824+02:00",
  "version": 1,
  "statements": [
    {
      "vulnerability": {
        "name": "CVE-2022-24999"
      },
      "timestamp": "2024-05-27T13:20:22.395829+02:00",
      "products": [
        {
          "@id": "pkg:docker/example/app@v1",
          "subcomponents": [
            {
              "@id": "pkg:npm/express@4.17.1"
            }
          ]
        }
      ],
      "status": "not_affected",
      "justification": "vulnerable_code_not_in_execute_path"
    }
  ]
}

----------------------------------------

TITLE: Running Docker Container Basic Command
DESCRIPTION: Basic command to run a Docker container from a Go application image.

LANGUAGE: console
CODE:
$ docker run docker-gs-ping

----------------------------------------

TITLE: Viewing Docker Image Layers with History Command
DESCRIPTION: This snippet demonstrates how to use the 'docker image history' command to view the layers in a Docker image, including their creation commands and sizes.

LANGUAGE: console
CODE:
$ docker image history getting-started

----------------------------------------

TITLE: Installing and Configuring Network Plugin
DESCRIPTION: Steps to install a global scope network plugin and create a network using the plugin in a swarm environment.

LANGUAGE: console
CODE:
$ docker plugin install bboreham/weave2
$ docker network create --driver=bboreham/weave2:latest globalnet

$ docker network ls
NETWORK ID          NAME                DRIVER                   SCOPE
qlj7ueteg6ly        globalnet           bboreham/weave2:latest   swarm

----------------------------------------

TITLE: Database Password Configuration
DESCRIPTION: Content for the database password file used by the Compose configuration.

LANGUAGE: text
CODE:
mysecretpassword

----------------------------------------

TITLE: Explicitly Specifying Shell in Dockerfile
DESCRIPTION: Another workaround that explicitly specifies the shell to use, suppressing warnings about shell form usage.

LANGUAGE: dockerfile
CODE:
FROM alpine
RUN apk add bash
SHELL ["/bin/bash", "-c"]
ENTRYPOINT echo "hello world"

----------------------------------------

TITLE: Creating and Using Custom Docker Networks
DESCRIPTION: This set of commands demonstrates how to create a custom Docker network and connect a Postgres container to it for better isolation and communication.

LANGUAGE: console
CODE:
$ docker network create mynetwork
$ docker network ls
$ docker run -d -e POSTGRES_PASSWORD=secret -p 5434:5432 --network mynetwork postgres

----------------------------------------

TITLE: Running Docker Scout Artifactory Agent
DESCRIPTION: Docker run command to start the Docker Scout Artifactory agent. This command mounts the configuration file and uses the v1 tag of the agent image.

LANGUAGE: bash
CODE:
docker run \
  --mount type=bind,src=/var/opt/artifactory-agent,target=/opt/artifactory-agent/data \
  docker/artifactory-agent:v1

----------------------------------------

TITLE: Creating Docker Service with Volume Plugin
DESCRIPTION: Commands to create and verify a Docker service that uses a volume plugin, demonstrating how services are scheduled based on plugin availability.

LANGUAGE: console
CODE:
$ docker service create --name my-service --mount type=volume,volume-driver=tiborvass/sample-volume-plugin,source=pluginVol,destination=/tmp busybox top

$ docker service ls
z1sj8bb8jnfn  my-service   replicated  1/1       busybox:latest

----------------------------------------

TITLE: Traefik Configuration in Docker Compose
DESCRIPTION: Defines Traefik service configuration in a Docker Compose file.

LANGUAGE: yaml
CODE:
services:
  proxy:
    image: traefik:v3.1.2
    command: --providers.docker
    ports:
      - 80:80
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

----------------------------------------

TITLE: Defining AuthZPlugin.AuthZReq JSON Request Schema
DESCRIPTION: JSON schema for the request sent to the authorization plugin's AuthZReq method. Contains user and request details.

LANGUAGE: json
CODE:
{
    "User":              "The user identification",
    "UserAuthNMethod":   "The authentication method used",
    "RequestMethod":     "The HTTP method",
    "RequestURI":        "The HTTP request URI",
    "RequestBody":       "Byte array containing the raw HTTP request body",
    "RequestHeader":     "Byte array containing the raw HTTP request header as a map[string][]string "
}

----------------------------------------

TITLE: Python Main Execution Block
DESCRIPTION: Main program loop for text summarization application including input handling and summarization logic

LANGUAGE: python
CODE:
if __name__ == "__main__":
   while True:
      input_text = input("Enter the text for summarization (type 'exit' to end): ")

      if input_text.lower() == 'exit':
         print("Exiting...")
         break
      bert_model = Summarizer()
      summary = bert_model(input_text)
      print(summary)

----------------------------------------

TITLE: Comparing Local Build to Registry Image
DESCRIPTION: This snippet shows how to compare a local build of an image with the same tag from the registry using the 'docker scout compare' command.

LANGUAGE: console
CODE:
$ docker scout compare local://namespace/repo:latest --to registry://namespace/repo:latest

----------------------------------------

TITLE: Running Docker Compose in Detached Mode
DESCRIPTION: Command to run the containerized application in detached mode using Docker Compose.

LANGUAGE: console
CODE:
$ docker compose up --build -d

----------------------------------------

TITLE: In-toto Attestation Statement Structure
DESCRIPTION: Schema for in-toto attestation statements with subject and predicate fields used for storing attestation metadata.

LANGUAGE: json
CODE:
{
    "_type": "https://in-toto.io/Statement/v0.1",
    "subject": [
      {
        "name": "<NAME>",
        "digest": {"<ALGORITHM>": "<HEX_VALUE>"}
      },
      ...
    ],
    "predicateType": "<URI>",
    "predicate": { ... }
  }

----------------------------------------

TITLE: Checking File Existence in New Container
DESCRIPTION: Shows how to verify file existence in a separate container, demonstrating filesystem isolation between containers.

LANGUAGE: console
CODE:
$ docker run --rm alpine stat greeting.txt

----------------------------------------

TITLE: Using BuildKit in Standalone Mode with Kubernetes Driver
DESCRIPTION: Shows how to use BuildKit in standalone mode with the Kubernetes driver on a self-hosted runner in GitHub Actions.

LANGUAGE: yaml
CODE:
name: ci

on:
  push:

jobs:
  buildx:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: kubernetes
      
      - name: Build
        run: |
          buildx build .

----------------------------------------

TITLE: Building a Docker Image with Bake Command
DESCRIPTION: This snippet demonstrates how to build a Docker image using the Bake command. It uses the previously defined 'myapp' target to build the image.

LANGUAGE: console
CODE:
$ docker buildx bake myapp

----------------------------------------

TITLE: Listing Docker Scout Environments
DESCRIPTION: This command lists all available environments for an organization using Docker Scout. It can be used with the default organization or a specified one using the --org flag.

LANGUAGE: bash
CODE:
$ docker scout env

LANGUAGE: bash
CODE:
$ docker scout env --org <org>

----------------------------------------

TITLE: Viewing Specific Image in Docker Desktop
DESCRIPTION: Method to view details of a specific image using its ID and tag

LANGUAGE: typescript
CODE:
await ddClient.desktopUI.navigate.viewImage(id, tag)

----------------------------------------

TITLE: Comparing Local Project to Registry Image with Docker Scout
DESCRIPTION: Illustrates using 'docker scout compare' to compare analysis of local source code with a registry image, using both 'fs://' and 'registry://' prefixes.

LANGUAGE: console
CODE:
$ docker scout compare fs://. --to registry://docker/scout-cli:latest --ignore-unchanged

----------------------------------------

TITLE: Defining AuthZPlugin.AuthZRes JSON Response Schema
DESCRIPTION: JSON schema for the response returned by the authorization plugin's AuthZRes method. Indicates whether the response is allowed or denied.

LANGUAGE: json
CODE:
{
   "Allow":              "Determined whether the user is allowed or not",
   "Msg":                "The authorization message",
   "Err":                "The error message if things go wrong"
}

----------------------------------------

TITLE: Cloning R Sample Application Repository
DESCRIPTION: Command to clone the sample R application repository and change into its directory.

LANGUAGE: console
CODE:
$ git clone https://github.com/mfranzon/r-docker-dev.git && cd r-docker-dev

----------------------------------------

TITLE: Project File Structure
DESCRIPTION: Output showing the contents of the project directory.

LANGUAGE: text
CODE:
Dockerfile  hello.cpp

----------------------------------------

TITLE: Updating Compose file for automatic service updates
DESCRIPTION: This YAML snippet shows how to add Compose Watch instructions to automatically update running services when code changes are detected.

LANGUAGE: yaml
CODE:
services:
  server:
    build:
      context: .
      target: final
    ports:
      - 8080:80
    depends_on:
      db:
        condition: service_healthy
    develop:
      watch:
        - action: rebuild
          path: .

----------------------------------------

TITLE: Configuring YAML Frontmatter for Docker Admin Docs
DESCRIPTION: YAML frontmatter configuration block that sets page rendering options, title and weight for a Docker administration documentation page. The build.render setting prevents automatic rendering while weight controls page ordering.

LANGUAGE: yaml
CODE:
---
build:
  render: never
title: For admins
weight: 10
---

----------------------------------------

TITLE: Basic Docker Buildx Build with Inline Cache
DESCRIPTION: Demonstrates how to build and push a Docker image while using inline cache storage. The command combines pushing the image and cache in a single operation.

LANGUAGE: console
CODE:
$ docker buildx build --push -t <registry>/<image> \
  --cache-to type=inline \
  --cache-from type=registry,ref=<registry>/<image> .

----------------------------------------

TITLE: Image Config Example
DESCRIPTION: Example of an image config used for compatibility purposes in attestation manifests.

LANGUAGE: json
CODE:
{
  "architecture": "unknown",
  "os": "unknown",
  "config": {},
  "rootfs": {
    "type": "layers",
    "diff_ids": [
      "sha256:133ae3f9bcc385295b66c2d83b28c25a9f294ce20954d5cf922dda860429734a"
    ]
  }
}

----------------------------------------

TITLE: Extracting Rexray Rootfs from Docker Image
DESCRIPTION: This shell script creates a container from the Rexray image, exports its filesystem, and extracts it to a temporary directory. This rootfs will be used to create the Docker plugin.

LANGUAGE: sh
CODE:
TMPDIR=/tmp/rexray  # for the purpose of this example
 # create container without running it, to extract the rootfs from image
docker create --name rexray "$image"
 # save the rootfs to a tar archive
docker export -o $TMPDIR/rexray.tar rexray
 # extract rootfs from tar archive to a rootfs folder
( mkdir -p $TMPDIR/rootfs; cd $TMPDIR/rootfs; tar xf ../rexray.tar )

----------------------------------------

TITLE: Configuring Previous Releases Page Settings in YAML
DESCRIPTION: YAML configuration block that defines build settings and page metadata for a previous releases documentation page. Specifies rendering behavior, page title, navigation weight, and sitemap inclusion status.

LANGUAGE: yaml
CODE:
build:
  render: never
title: Previous releases
weight: 200
sitemap: false

----------------------------------------

TITLE: Recording an Image to a Docker Scout Environment with Platform Specification
DESCRIPTION: Shows how to record an image to a specific Docker Scout environment ('staging') for a particular platform (linux/amd64).

LANGUAGE: console
CODE:
$ docker scout environment staging namespace/repo:stage-latest --platform linux/amd64
✓ Pulled
✓ Successfully recorded namespace/repo:stage-latest in environment staging

----------------------------------------

TITLE: Inspecting Docker Plugin Details
DESCRIPTION: This command displays detailed information about a specific Docker plugin, including its configuration and settings.

LANGUAGE: bash
CODE:
$ docker plugin inspect tiborvass/sample-volume-plugin:latest

[
  {
      "Id": "69553ca1d123",
      "Name": "tiborvass/sample-volume-plugin:latest",
      "PluginReference": "tiborvas/sample-volume-plugin:latest",
      "Enabled": true,
      "Config": {
          "Mounts": [
              {
                  "Name": "",
                  "Description": "",
                  "Settable": null,
                  "Source": "/data",
                  "Destination": "/data",
                  "Type": "bind",
                  "Options": [
                      "rbind"
                  ]
              }
          ],
          "Env": [
              "DEBUG=0"
          ],
          "Args": null,
          "Devices": null
      },
      "Manifest": {
          "ManifestVersion": "v0",
          "Description": "A sample volume plugin for Docker",
          "Documentation": "https://docs.docker.com/engine/extend/plugins/",
          "Interface": {
              "Types": [
                  "docker.volumedriver/1.0"
              ],
              "Socket": "plugins.sock"
          },
          "Entrypoint": [
              "/usr/bin/sample-volume-plugin",
              "/data"
          ],
          "Workdir": "",
          "User": {},
          "Network": {
              "Type": "host"
          },
          "Capabilities": null,
          "Mounts": [
              {
                  "Name": "",
                  "Description": "",
                  "Settable": null,
                  "Source": "/data",
                  "Destination": "/data",
                  "Type": "bind",
                  "Options": [
                      "rbind"
                  ]
              }
          ],
          "Devices": [
              {
                  "Name": "",
                  "Description": "",
                  "Settable": null,
                  "Path": "/dev/fuse"
              }
          ],
          "Env": [
              {
                  "Name": "DEBUG",
                  "Description": "",
                  "Settable": null,
                  "Value": "0"
              }
          ],
          "Args": {
              "Name": "args",
              "Description": "",
              "Settable": null,
              "Value": []
          }
      }
  }
]

----------------------------------------

TITLE: Configuring PostgreSQL Kubernetes Deployment
DESCRIPTION: YAML configuration for deploying PostgreSQL database to Kubernetes, including Deployment, Service, PersistentVolumeClaim, and Secret resources. Sets up a PostgreSQL instance with persistent storage and secure password handling.

LANGUAGE: yaml
CODE:
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_DB
              value: example
            - name: POSTGRES_USER
              value: postgres
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: POSTGRES_PASSWORD
          volumeMounts:
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
      volumes:
        - name: postgres-data
          persistentVolumeClaim:
            claimName: postgres-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: default
spec:
  ports:
    - port: 5432
  selector:
    app: postgres
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
  namespace: default
type: Opaque
data:
  POSTGRES_PASSWORD: cG9zdGdyZXNfcGFzc3dvcmQ=

----------------------------------------

TITLE: Kafka UI Docker Compose Configuration
DESCRIPTION: Docker Compose configuration for adding Kafbat UI visualization tool to the Kafka cluster setup

LANGUAGE: yaml
CODE:
services:
  kafka-ui:
    image: kafbat/kafka-ui:main
    ports:
      - 8080:8080
    environment:
      DYNAMIC_CONFIG_ENABLED: "true"
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9093
    depends_on:
      - kafka

----------------------------------------

TITLE: Creating registry.json File for Docker Desktop Sign-in Enforcement (All Platforms)
DESCRIPTION: This JSON snippet shows the content of a registry.json file used to enforce sign-in for Docker Desktop across all platforms. It includes the 'allowedOrgs' key with an array of allowed organization names.

LANGUAGE: json
CODE:
{
"allowedOrgs": ["myorg1", "myorg2"]
}

----------------------------------------

TITLE: YAML Front Matter Configuration for Docker Image Remove Documentation
DESCRIPTION: YAML configuration block defining metadata for the Docker image removal command documentation page, including the data folder, filename, title, URL aliases, and layout type.

LANGUAGE: yaml
CODE:
datafolder: engine-cli
datafile: docker_image_rm
title: docker image rm
aliases:
- /edge/engine/reference/commandline/image_rm/
- /engine/reference/commandline/image_rm/
- /engine/reference/commandline/rmi/
- /reference/cli/docker/rmi/
layout: cli

----------------------------------------

TITLE: Environment Configuration for API Keys
DESCRIPTION: Example of the .env file structure for specifying OpenAI and Pinecone API keys.

LANGUAGE: text
CODE:
#----------------------------------------------------------------------------
# OpenAI
#----------------------------------------------------------------------------
OPENAI_TOKEN=your-api-key # Replace your-api-key with your personal API key

#----------------------------------------------------------------------------
# Pinecone
#----------------------------------------------------------------------------
PINECONE_TOKEN=your-api-key # Replace your-api-key with your personal API key

----------------------------------------

TITLE: Configuring Default Organization for Docker Scout
DESCRIPTION: This command changes the default organization for all docker scout commands, including the env command.

LANGUAGE: bash
CODE:
$ docker scout config organization <org>

----------------------------------------

TITLE: Azure Resource Manager (ARM) Template Reference
DESCRIPTION: ARM template JSON that creates required Azure resources including EventGrid Topic, Subscription, and registry token for Docker Scout integration. Used to establish necessary infrastructure for ACR integration.

LANGUAGE: json
CODE:
{{ transform.Remarshal "json" $data }}

----------------------------------------

TITLE: Multi-stage Build for React Application
DESCRIPTION: This Dockerfile shows a multi-stage build for a React application, using Node.js for building and Nginx for serving the static files, resulting in a smaller production image.

LANGUAGE: dockerfile
CODE:
# syntax=docker/dockerfile:1
FROM node:lts AS build
WORKDIR /app
COPY package* yarn.lock ./
RUN yarn install
COPY public ./public
COPY src ./src
RUN yarn run build

FROM nginx:alpine
COPY --from=build /app/build /usr/share/nginx/html

----------------------------------------

TITLE: Disabling GitHub Actions Build Summary in YAML Configuration
DESCRIPTION: YAML configuration snippet showing how to disable the Docker build summary by setting the DOCKER_BUILD_SUMMARY environment variable to false in the build step.

LANGUAGE: yaml
CODE:
      - name: Build
        uses: docker/build-push-action@v6
        env:
          DOCKER_BUILD_SUMMARY: false
        with:
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

----------------------------------------

TITLE: Cloning Spring PetClinic Sample Application
DESCRIPTION: Command to clone the Spring PetClinic sample application repository from GitHub.

LANGUAGE: console
CODE:
$ git clone https://github.com/spring-projects/spring-petclinic.git

----------------------------------------

TITLE: Configuring Host Section in Docker Extension Metadata
DESCRIPTION: This snippet demonstrates how to define the host section in the metadata.json file. It specifies binaries that Docker Desktop should copy to the host system, with platform-specific paths.

LANGUAGE: json
CODE:
"host": {
    "binaries": [
      {
        "darwin": [
          {
            "path": "/darwin/myBinary"
          },
        ],
        "windows": [
          {
            "path": "/windows/myBinary.exe"
          },
        ],
        "linux": [
          {
            "path": "/linux/myBinary"
          },
        ]
      }
    ]
  }

----------------------------------------

TITLE: Docker Init Configuration Dialog
DESCRIPTION: Interactive dialog showing the configuration process for initializing Docker assets, including choices for platform, project name, .NET version, and port settings.

LANGUAGE: console
CODE:
$ docker init
Welcome to the Docker Init CLI!

This utility will walk you through creating the following files with sensible defaults for your project:
  - .dockerignore
  - Dockerfile
  - compose.yaml
  - README.Docker.md

Let's get started!

? What application platform does your project use? ASP.NET Core
? What's the name of your solution's main project? myWebApp
? What version of .NET do you want to use? 8.0
? What local port do you want to use to access your server? 8080

----------------------------------------

TITLE: Configuring YAML Front Matter for Docker Basics Documentation
DESCRIPTION: This YAML snippet defines the configuration for a Docker documentation page about the basics. It sets the build rendering to 'never', specifies the title as 'The basics', and assigns a weight of 10 to the page for ordering purposes.

LANGUAGE: yaml
CODE:
---
build:
  render: never
title: The basics
weight: 10
---

----------------------------------------

TITLE: Executing Docker Buildx Bake Command
DESCRIPTION: This console command demonstrates how to invoke a build using the Bake file. It executes the 'default' group, which builds the 'frontend' and 'backend' targets concurrently.

LANGUAGE: console
CODE:
$ docker buildx bake

----------------------------------------

TITLE: Build Configuration Source Definition
DESCRIPTION: Shows how build configuration source is specified including Git repository details, SHA1 digest, and entry point information.

LANGUAGE: json
CODE:
{
    "invocation": {
      "configSource": {
        "uri": "https://github.com/moby/buildkit.git#refs/tags/v0.11.0",
        "digest": {
          "sha1": "4b220de5058abfd01ff619c9d2ff6b09a049bea0"
        },
        "entryPoint": "Dockerfile"
      }
    }

----------------------------------------

TITLE: Debugging Docker Plugins with runc
DESCRIPTION: Commands demonstrating how to debug plugins using runc to list running plugins, access logs, and execute commands within the plugin container context.

LANGUAGE: console
CODE:
$ sudo runc --root /run/docker/runtime-runc/plugins.moby list

ID                                                                 PID         STATUS      BUNDLE                                                                                                                                       CREATED                          OWNER
93f1e7dbfe11c938782c2993628c895cf28e2274072c4a346a6002446c949b25   15806       running     /run/docker/containerd/daemon/io.containerd.runtime.v1.linux/moby-plugins/93f1e7dbfe11c938782c2993628c895cf28e2274072c4a346a6002446c949b25   2018-02-08T21:40:08.621358213Z   root

----------------------------------------

TITLE: Accessing Nested Attributes in Compose Model using Go Templates
DESCRIPTION: This example shows how to access nested attributes in the Compose model using dot notation within Go templates, specifically checking the deployment mode of a service.

LANGUAGE: yaml
CODE:
# iterate over a yaml sequence
{{ range $name, $service := .services }}
  # access a nested attribute using dot notation
  {{ if eq $service.deploy.mode "global" }}
kind: DaemonSet
  {{ end }}
{{ end }}

----------------------------------------

TITLE: Enabling Docker Scout for All Organization Repositories
DESCRIPTION: This command enables Docker Scout for all repositories within an organization. It uses the '--all' flag to apply the action to all repositories.

LANGUAGE: console
CODE:
$ docker scout repo enable --all

----------------------------------------

TITLE: Docker Daemon Configuration File Example (Linux)
DESCRIPTION: Provides a full example of the allowed configuration options for the Docker daemon on Linux systems.

LANGUAGE: json
CODE:
{
  "authorization-plugins": [],
  "bip": "",
  "bip6": "",
  "bridge": "",
  "builder": {
    "gc": {
      "enabled": true,
      "defaultKeepStorage": "10GB",
      "policy": [
        { "keepStorage": "10GB", "filter": ["unused-for=2200h"] },
        { "keepStorage": "50GB", "filter": ["unused-for=3300h"] },
        { "keepStorage": "100GB", "all": true }
      ]
    }
  },
  "cgroup-parent": "",
  "containerd": "/run/containerd/containerd.sock",
  "containerd-namespace": "docker",
  "containerd-plugins-namespace": "docker-plugins",
  "data-root": "",
  "debug": true,
  "default-address-pools": [
    {
      "base": "172.30.0.0/16",
      "size": 24
    },
    {
      "base": "172.31.0.0/16",
      "size": 24
    }
  ],
  "default-cgroupns-mode": "private",
  "default-gateway": "",
  "default-gateway-v6": "",
  "default-network-opts": {},
  "default-runtime": "runc",
  "default-shm-size": "64M",
  "default-ulimits": {
    "nofile": {
      "Hard": 64000,
      "Name": "nofile",
      "Soft": 64000
    }
  },
  "dns": [],
  "dns-opts": [],
  "dns-search": [],
  "exec-opts": [],
  "exec-root": "",
  "experimental": false,
  "features": {
    "cdi": true,
    "containerd-snapshotter": true
  },
  "fixed-cidr": "",
  "fixed-cidr-v6": "",
  "group": "",
  "host-gateway-ip": "",
  "hosts": [],
  "proxies": {
    "http-proxy": "http://proxy.example.com:80",
    "https-proxy": "https://proxy.example.com:443",
    "no-proxy": "*.test.example.com,.example.org"
  },
  "icc": false,
  "init": false,
  "init-path": "/usr/libexec/docker-init",
  "insecure-registries": [],
  "ip": "0.0.0.0",
  "ip-forward": false,
  "ip-masq": false,
  "iptables": false,
  "ip6tables": false,
  "ipv6": false,
  "labels": [],
  "live-restore": true,
  "log-driver": "json-file",
  "log-format": "text",
  "log-level": "",
  "log-opts": {
    "cache-disabled": "false",
    "cache-max-file": "5",
    "cache-max-size": "20m",
    "cache-compress": "true",
    "env": "os,customer",
    "labels": "somelabel",
    "max-file": "5",
    "max-size": "10m"
  },
  "max-concurrent-downloads": 3,
  "max-concurrent-uploads": 5,
  "max-download-attempts": 5,
  "mtu": 0,
  "no-new-privileges": false,
  "node-generic-resources": [
    "NVIDIA-GPU=UUID1",
    "NVIDIA-GPU=UUID2"
  ],
  "pidfile": "",
  "raw-logs": false,
  "registry-mirrors": [],
  "runtimes": {
    "cc-runtime": {
      "path": "/usr/bin/cc-runtime"
    },
    "custom": {
      "path": "/usr/local/bin/my-runc-replacement",
      "runtimeArgs": [
        "--debug"
      ]
    }
  },
  "seccomp-profile": "",
  "selinux-enabled": false,
  "shutdown-timeout": 15,
  "storage-driver": "",
  "storage-opts": [],
  "swarm-default-advertise-addr": "",
  "tls": true,
  "tlscacert": "",
  "tlscert": "",
  "tlskey": "",
  "tlsverify": true,
  "userland-proxy": false,
  "userland-proxy-path": "/usr/libexec/docker-proxy",
  "userns-remap": ""
}

----------------------------------------

TITLE: Executing Extension Binary on Host using TypeScript
DESCRIPTION: Demonstrates how to execute a shipped binary (kubectl -h) on the host using ddClient.extension.host.cli.exec().

LANGUAGE: typescript
CODE:
await ddClient.extension.host.cli.exec("kubectl", ["-h"]);

----------------------------------------

TITLE: Updating runc in Docker Engine 18.02
DESCRIPTION: Updates runc to fix hang issues during start and exec operations. This update addresses runtime stability in the 18.02 release.

LANGUAGE: markdown
CODE:
* Update runc to fix hang during start and exec [moby/moby#36097](https://github.com/moby/moby/pull/36097)

----------------------------------------

TITLE: phpMyAdmin Service Configuration
DESCRIPTION: Configures phpMyAdmin service in Docker Compose with Traefik labels and environment variables.

LANGUAGE: yaml
CODE:
services:
  # …
  phpmyadmin:
    image: phpmyadmin:5.2.1
    labels:
      traefik.http.routers.db.rule: "Host(`db.localhost`)"
    environment:
      PMA_USER: root
      PMA_PASSWORD: password

----------------------------------------

TITLE: Generating Multiple Kubernetes Manifests using Go Templates
DESCRIPTION: This snippet demonstrates how to use Go templating to iterate over services in a compose.yaml file and generate separate Kubernetes manifest files for each service.

LANGUAGE: yaml
CODE:
{{ range $name, $service := .services }}
---
#! {{ $name }}-manifest.yaml
# Generated code, do not edit
key: value
## ...
{{ end }}

----------------------------------------

TITLE: Environment Variables Extension with YAML Anchors
DESCRIPTION: Demonstrates using extensions to share environment variables across multiple services using YAML anchors.

LANGUAGE: yaml
CODE:
x-env: &env
  environment:
    - CONFIG_KEY
    - EXAMPLE_KEY
 
services:
  first:
    <<: *env
    image: my-image:latest
  second:
    <<: *env
    image: another-image:latest

----------------------------------------

TITLE: Authenticating with JFrog Artifactory using Docker CLI
DESCRIPTION: Example of logging into JFrog Artifactory using the docker login command. This is required for local image analysis.

LANGUAGE: bash
CODE:
docker login {URL}

----------------------------------------

TITLE: Kubernetes Deployment Commands
DESCRIPTION: Shell commands for deploying and managing the Rust application in Kubernetes, including deployment creation, status checking, and cleanup.

LANGUAGE: shell
CODE:
$ kubectl apply -f docker-rust-kubernetes.yaml
$ kubectl get deployments
$ kubectl get services
$ curl http://localhost:30001/users
$ kubectl delete -f docker-rust-kubernetes.yaml

----------------------------------------

TITLE: Building and Running the Containerized Application
DESCRIPTION: This command builds and runs the containerized application using Docker Compose. It starts the application and makes it accessible at http://localhost:8000.

LANGUAGE: bash
CODE:
$ docker compose up --build

----------------------------------------

TITLE: Cloning the Bun Docker Sample Application
DESCRIPTION: This command clones the sample Bun application repository and changes the current directory to the cloned repository.

LANGUAGE: console
CODE:
$ git clone https://github.com/dockersamples/bun-docker.git && cd bun-docker

----------------------------------------

TITLE: Creating and Using a Simple Docker Config
DESCRIPTION: Demonstrates how to create a basic Docker config and use it with a Redis service.

LANGUAGE: bash
CODE:
echo "This is a config" | docker config create my-config -

docker service create --name redis --config my-config redis:alpine

docker service ps redis

docker container exec $(docker ps --filter name=redis -q) cat /my-config

----------------------------------------

TITLE: Running .NET Tests with Docker Compose
DESCRIPTION: This command uses Docker Compose to run .NET tests inside a container. It builds the service, runs the container, executes the tests, and then removes the container.

LANGUAGE: console
CODE:
$ docker compose run --build --rm server dotnet test /source/tests

----------------------------------------

TITLE: Configuring Stop Signal in Docker Compose YAML
DESCRIPTION: This snippet demonstrates how to set a custom stop signal for a service in a Docker Compose file. It sets the stop_signal to SIGINT for a web service.

LANGUAGE: yaml
CODE:
services:
  web:
    build: .
    stop_signal: SIGINT

----------------------------------------

TITLE: Committing Container Changes
DESCRIPTION: Command to commit container changes as a new image layer with Node.js installed.

LANGUAGE: console
CODE:
$ docker container commit -m "Add node" base-container node-base

----------------------------------------

TITLE: Single-stage Dockerfile for Spring Boot
DESCRIPTION: This Dockerfile sets up a build environment for a Spring Boot application using Maven and JDK. It copies the necessary files and sets up the command to run the application.

LANGUAGE: dockerfile
CODE:
FROM eclipse-temurin:21.0.2_13-jdk-jammy
WORKDIR /app
COPY .mvn/ .mvn
COPY mvnw pom.xml ./
RUN ./mvnw dependency:go-offline
COPY src ./src
CMD ["./mvnw", "spring-boot:run"]

----------------------------------------

TITLE: HCL Bake File Structure
DESCRIPTION: Same basic Bake file structure shown in HCL format

LANGUAGE: hcl
CODE:
variable "TAG" {
  default = "latest"
}

group "default" {
  targets = ["webapp"]
}

target "webapp" {
  dockerfile = "Dockerfile"
  tags = ["docker.io/username/webapp:${TAG}"]
}

----------------------------------------

TITLE: Setting Multiple Compose Files Path
DESCRIPTION: Example showing how to specify multiple Compose files using COMPOSE_FILE environment variable with path separators.

LANGUAGE: shell
CODE:
COMPOSE_FILE=compose.yaml:compose.prod.yaml

----------------------------------------

TITLE: Using Helper Functions in Compose Bridge Templates
DESCRIPTION: This snippet demonstrates the use of the 'seconds' helper function to convert a healthcheck interval into seconds for a Kubernetes manifest.

LANGUAGE: yaml
CODE:
{{ if $service.healthcheck.interval }}
            periodSeconds: {{ $service.healthcheck.interval | seconds }}{{ end }}
{{ end }}

----------------------------------------

TITLE: Enabling Docker Scout for a Specific Repository
DESCRIPTION: This command enables Docker Scout for a specific repository. It uses the basic syntax of the 'docker scout repo enable' command followed by the repository name.

LANGUAGE: console
CODE:
$ docker scout repo enable my/repository

----------------------------------------

TITLE: Git Repository Configuration Commands
DESCRIPTION: Commands for configuring and pushing code to a GitHub repository. Sets the remote origin and pushes initial code.

LANGUAGE: bash
CODE:
git remote set-url origin https://github.com/your-username/your-repository.git

LANGUAGE: bash
CODE:
git add -A
git commit -m "my commit"
git push -u origin main

----------------------------------------

TITLE: Defining C# Documentation Metadata in YAML
DESCRIPTION: YAML frontmatter defining metadata for a C# documentation page, including title and icon path parameters.

LANGUAGE: yaml
CODE:
---
title: C#
params:
  icon: https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/csharp/csharp-original.svg
---

----------------------------------------

TITLE: Installing Specific Docker Engine Version on RHEL
DESCRIPTION: This command installs a specific version of Docker Engine and its components. Replace <VERSION_STRING> with the desired version number. It allows for precise control over the installed Docker version.

LANGUAGE: bash
CODE:
$ sudo dnf install docker-ce-<VERSION_STRING> docker-ce-cli-<VERSION_STRING> containerd.io docker-buildx-plugin docker-compose-plugin

----------------------------------------

TITLE: Enabling Docker Scout for Filtered Repositories
DESCRIPTION: This command enables Docker Scout for repositories that match a specific filter. It uses the '--filter' option to specify a regular expression for filtering repository names.

LANGUAGE: console
CODE:
$ docker scout repo enable --filter namespace/backend

----------------------------------------

TITLE: Non-compliant Dockerfile for Default Non-Root User policy
DESCRIPTION: Example of a multi-stage Dockerfile that doesn't set a non-root user for the runtime stage.

LANGUAGE: dockerfile
CODE:
FROM alpine AS builder
COPY Makefile ./src /
RUN make build

FROM alpine AS runtime
COPY --from=builder bin/production /app
ENTRYPOINT ["/app/production"]

----------------------------------------

TITLE: Non-compliant Dockerfile for Default Non-Root User policy
DESCRIPTION: Example of a multi-stage Dockerfile that doesn't set a non-root user for the runtime stage.

LANGUAGE: dockerfile
CODE:
FROM alpine AS builder
COPY Makefile ./src /
RUN make build

FROM alpine AS runtime
COPY --from=builder bin/production /app
ENTRYPOINT ["/app/production"]

----------------------------------------

TITLE: Accessing WSL from Windows Terminal
DESCRIPTION: This command opens the default WSL Linux distribution from the Windows terminal. It's the first step in accessing your Linux development environment.

LANGUAGE: console
CODE:
$ wsl

----------------------------------------

TITLE: Basic Docker Volume Mount Command
DESCRIPTION: Example of using the -v flag to create a bind mount between host and container directories.

LANGUAGE: console
CODE:
$ docker run -v /HOST/PATH:/CONTAINER/PATH -it nginx

----------------------------------------

TITLE: Kubernetes Deployment Commands
DESCRIPTION: Shell commands for deploying, verifying, and removing the Bun application on Kubernetes. Includes commands for applying configurations, checking deployment status, and cleaning up resources.

LANGUAGE: console
CODE:
$ kubectl apply -f docker-kubernetes.yml

LANGUAGE: shell
CODE:
deployment.apps/docker-bun-demo created
service/service-entrypoint created

LANGUAGE: console
CODE:
$ kubectl get deployments

LANGUAGE: shell
CODE:
NAME                 READY   UP-TO-DATE   AVAILABLE    AGE
docker-bun-demo       1/1     1            1           10s

LANGUAGE: console
CODE:
$ kubectl get services

LANGUAGE: shell
CODE:
NAME                 TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)          AGE
kubernetes           ClusterIP   10.96.0.1        <none>        443/TCP          88m
service-entrypoint   NodePort    10.105.145.223   <none>        3000:30001/TCP   83s

LANGUAGE: console
CODE:
$ kubectl delete -f docker-kubernetes.yml

----------------------------------------

TITLE: Custom Network Configuration
DESCRIPTION: Series of commands showing how to create and use a custom network with a Docker container builder.

LANGUAGE: console
CODE:
$ docker network create foonet
$ docker buildx create --use \
  --name mybuilder \
  --driver docker-container \
  --driver-opt "network=foonet"
$ docker buildx inspect --bootstrap
$ docker inspect buildx_buildkit_mybuilder0 --format={{.NetworkSettings.Networks}}
map[foonet:0xc00018c0c0]

----------------------------------------

TITLE: Rust Page Configuration in YAML Frontmatter
DESCRIPTION: YAML frontmatter configuration block defining metadata for a Rust documentation page, including the title and icon path using the Devicon CDN.

LANGUAGE: yaml
CODE:
title: Rust
params:
  icon: https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/rust/rust-original.svg

----------------------------------------

TITLE: Docker Scout Update-Only Recommendations
DESCRIPTION: Shows how to display only base image update recommendations using the --only-update flag.

LANGUAGE: console
CODE:
$ docker scout recommendations --only-update golang:1.19.4

----------------------------------------

TITLE: Dockerfile with Lowercase Instructions (Good Example)
DESCRIPTION: Example showing correct all lowercase casing for Dockerfile instructions.

LANGUAGE: dockerfile
CODE:
from alpine
run echo hello > /greeting.txt
entrypoint ["cat", "/greeting.txt"]

----------------------------------------

TITLE: Demonstrating Typo Detection in Dockerfile ENV Instruction
DESCRIPTION: Illustrates how the check can detect typos in variable names. In this example, 'PAHT' is likely a typo for 'PATH' in an ENV instruction.

LANGUAGE: dockerfile
CODE:
FROM alpine
ENV PATH=$PAHT:/app/bin

----------------------------------------

TITLE: Configuring Azure Pipeline Trigger and Variables for Docker Image Build
DESCRIPTION: This YAML snippet sets up the pipeline trigger for the main branch and defines variables for the Docker image tag and name. It uses the build ID as the tag and specifies a sample image repository.

LANGUAGE: yaml
CODE:
trigger:
  - main

resources:
  - repo: self

variables:
  tag: "$(Build.BuildId)"
  image: "vonwig/nodejs-service"

----------------------------------------

TITLE: Disabling Repository from Specific Registry
DESCRIPTION: Examples how to disable Docker Scout for a repository in a specific container registry using the --registry flag.

LANGUAGE: console
CODE:
$ docker scout repo disable my/repository --registry 123456.dkr.ecr.us-east-1.amazonaws.com

----------------------------------------

TITLE: Python Dockerfile Configuration
DESCRIPTION: Dockerfile for building a Python application container with security best practices and optimized dependency management.

LANGUAGE: dockerfile
CODE:
# syntax=docker/dockerfile:1

ARG PYTHON_VERSION=3.11.4
FROM python:${PYTHON_VERSION}-slim AS base

ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1

WORKDIR /app

ARG UID=10001
RUN adduser \
    --disabled-password \
    --gecos "" \
    --home "/nonexistent" \
    --shell "/sbin/nologin" \
    --no-create-home \
    --uid "${UID}" \
    appuser

RUN --mount=type=cache,target=/root/.cache/pip \
    --mount=type=bind,source=requirements.txt,target=requirements.txt \
    python -m pip install -r requirements.txt

USER appuser

COPY . .

EXPOSE 8000

CMD python3 -m uvicorn app:app --host=0.0.0.0 --port=8000

----------------------------------------

TITLE: Python Dockerfile Configuration
DESCRIPTION: Dockerfile for building a Python application container with security best practices and optimized dependency management.

LANGUAGE: dockerfile
CODE:
# syntax=docker/dockerfile:1

ARG PYTHON_VERSION=3.11.4
FROM python:${PYTHON_VERSION}-slim AS base

ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1

WORKDIR /app

ARG UID=10001
RUN adduser \
    --disabled-password \
    --gecos "" \
    --home "/nonexistent" \
    --shell "/sbin/nologin" \
    --no-create-home \
    --uid "${UID}" \
    appuser

RUN --mount=type=cache,target=/root/.cache/pip \
    --mount=type=bind,source=requirements.txt,target=requirements.txt \
    python -m pip install -r requirements.txt

USER appuser

COPY . .

EXPOSE 8000

CMD python3 -m uvicorn app:app --host=0.0.0.0 --port=8000

----------------------------------------

TITLE: Extended Docker Compose Service Configuration
DESCRIPTION: Shows how to extend a service configuration with additional build and environment settings.

LANGUAGE: yaml
CODE:
services:
  webapp:
    build: .
    environment:
      - DEBUG=1

----------------------------------------

TITLE: Inspecting Container Runtime Configuration
DESCRIPTION: Docker command to inspect the container runtime and verify if Enhanced Container Isolation is active by checking if Sysbox runtime is being used.

LANGUAGE: console
CODE:
$ docker inspect --format='{{.HostConfig.Runtime}}' my_container

----------------------------------------

TITLE: Generating Markdown Vulnerability Report
DESCRIPTION: Demonstrates how to generate a vulnerability report in Markdown format using the '--format markdown' option.

LANGUAGE: console
CODE:
$ docker scout cves --format markdown alpine
✓ Pulled
✓ SBOM of image already cached, 19 packages indexed
✗ Detected 1 vulnerable package with 3 vulnerabilities
<h2>:mag: Vulnerabilities of <code>alpine</code></h2>

<details open="true"><summary>:package: Image Reference</strong> <code>alpine</code></summary>
<table>
<tr><td>digest</td><td><code>sha256:e3bd82196e98898cae9fe7fbfd6e2436530485974dc4fb3b7ddb69134eda2407</code></td><tr><tr><td>vulnerabilities</td><td><img alt="critical: 0" src="https://img.shields.io/badge/critical-0-lightgrey"/> <img alt="high: 0" src="https://img.shields.io/badge/high-0-lightgrey"/> <img alt="medium: 2" src="https://img.shields.io/badge/medium-2-fbb552"/> <img alt="low: 0" src="https://img.shields.io/badge/low-0-lightgrey"/> <img alt="unspecified: 1" src="https://img.shields.io/badge/unspecified-1-lightgrey"/></td></tr>
<tr><td>platform</td><td>linux/arm64</td></tr>
<tr><td>size</td><td>3.3 MB</td></tr>
<tr><td>packages</td><td>19</td></tr>
</table>
</details></table>
</details>
...

----------------------------------------

TITLE: Build Secrets Configuration
DESCRIPTION: Shows how to configure build secrets using both short and long syntax in a Compose file.

LANGUAGE: yaml
CODE:
services:
  frontend:
    build:
      context: .
      secrets:
        - source: server-certificate
          target: server.cert
          uid: "103"
          gid: "103"
          mode: 0440
secrets:
  server-certificate:
    external: true

----------------------------------------

TITLE: Configuring Docker Documentation Build Parameters in YAML
DESCRIPTION: YAML configuration that specifies build settings for Docker documentation. It sets the build to never render, defines the page title as 'Latest', configures sidebar navigation to point to the latest engine API reference, and sets the page weight to 20.

LANGUAGE: yaml
CODE:
build:
  render: never
title: Latest
params:
  sidebar:
    goto: /reference/api/engine/latest/
weight: 20

----------------------------------------

TITLE: Sharing Container Port in Project Harmonia
DESCRIPTION: This command creates a publicly accessible URL for a container port in the cloud engine. It enables easy sharing of cloud-based applications with teammates.

LANGUAGE: bash
CODE:
$ docker harmonia engine share create cloudengine 3000

----------------------------------------

TITLE: Configuring Rexray Plugin for Amazon EBS
DESCRIPTION: This JSON configuration file defines the plugin's properties, including its entrypoint, environment variables, interface, and required Linux capabilities. It specifies the EBS-specific settings and the necessary permissions for device access.

LANGUAGE: json
CODE:
{
      "Args": {
        "Description": "",
        "Name": "",
        "Settable": null,
        "Value": null
      },
      "Description": "A proof-of-concept EBS plugin (using rexray) for Docker",
      "Documentation": "https://github.com/tiborvass/rexray-plugin",
      "Entrypoint": [
        "/usr/bin/rexray", "service", "start", "-f"
      ],
      "Env": [
        {
          "Description": "",
          "Name": "REXRAY_SERVICE",
          "Settable": [
            "value"
          ],
          "Value": "ebs"
        },
        {
          "Description": "",
          "Name": "EBS_ACCESSKEY",
          "Settable": [
            "value"
          ],
          "Value": ""
        },
        {
          "Description": "",
          "Name": "EBS_SECRETKEY",
          "Settable": [
            "value"
          ],
          "Value": ""
        }
      ],
      "Interface": {
        "Socket": "rexray.sock",
        "Types": [
          "docker.volumedriver/1.0"
        ]
      },
      "Linux": {
        "AllowAllDevices": true,
        "Capabilities": ["CAP_SYS_ADMIN"],
        "Devices": null
      },
      "Mounts": [
        {
          "Source": "/dev",
          "Destination": "/dev",
          "Type": "bind",
          "Options": ["rbind"]
        }
      ],
      "Network": {
        "Type": "host"
      },
      "PropagatedMount": "/var/lib/libstorage/volumes",
      "User": {},
      "WorkDir": ""
}

----------------------------------------

TITLE: Network Debugging with Netshoot
DESCRIPTION: Demonstrates using the nicolaka/netshoot container for DNS lookup and network troubleshooting

LANGUAGE: console
CODE:
docker run -it --network todo-app nicolaka/netshoot

----------------------------------------

TITLE: Specifying Volume Driver in Docker Compose
DESCRIPTION: This snippet shows how to specify a custom volume driver for a volume named 'db-data' in the top-level volumes section.

LANGUAGE: yaml
CODE:
volumes:
  db-data:
    driver: foobar

----------------------------------------

TITLE: Combining ARG and ENV for Configurable Node.js Builds
DESCRIPTION: This Dockerfile example demonstrates how to combine build arguments and environment variables to allow runtime configuration of NODE_ENV. It allows overriding the default production environment at build time.

LANGUAGE: Dockerfile
CODE:
# syntax=docker/dockerfile:1

FROM node:20
ARG NODE_ENV=production
ENV NODE_ENV=$NODE_ENV
WORKDIR /app
COPY package*.json ./
RUN npm ci && npm cache clean --force
COPY . .
CMD ["node", "app.js"]

----------------------------------------

TITLE: Using Docker Compose Kill with Custom Signal
DESCRIPTION: Example showing how to use the docker compose kill command with a custom SIGINT signal to stop running containers. The command can be modified with different signal types using the -s flag.

LANGUAGE: console
CODE:
$ docker compose kill -s SIGINT

----------------------------------------

TITLE: Dockerfile with Uppercase Instructions (Good Example)
DESCRIPTION: Example showing correct all uppercase casing for Dockerfile instructions.

LANGUAGE: dockerfile
CODE:
FROM alpine
RUN echo hello > /greeting.txt
ENTRYPOINT ["cat", "/greeting.txt"]

----------------------------------------

TITLE: Builder ID Configuration in SLSA Provenance
DESCRIPTION: Example showing the builder.id field format in SLSA provenance, which contains the build URL when available.

LANGUAGE: json
CODE:
{
    "builder": {
      "id": "https://github.com/docker/buildx/actions/runs/3709599520"
    }
}

----------------------------------------

TITLE: Docker Compose Restart Command Options Table
DESCRIPTION: Table of command-line options available for the docker compose restart command, including dry-run mode, dependency handling, and timeout settings.

LANGUAGE: markdown
CODE:
| Name              | Type   | Default | Description                           |
|:------------------|:-------|:--------|:--------------------------------------|
| `--dry-run`       | `bool` |         | Execute command in dry run mode       |
| `--no-deps`       | `bool` |         | Don't restart dependent services      |
| `-t`, `--timeout` | `int`  | `0`     | Specify a shutdown timeout in seconds |

----------------------------------------

TITLE: Defining CircleCI Workflow
DESCRIPTION: Specifies the workflow name and associates it with the build job.

LANGUAGE: yaml
CODE:
workflows:
  build-docker-image:
    jobs:
      - build

----------------------------------------

TITLE: Pushing an Image to Docker Scout using Docker CLI
DESCRIPTION: This example demonstrates how to use the 'docker scout push' command to push an image to Docker Scout. It specifies the organization and the full image reference.

LANGUAGE: console
CODE:
$ docker scout push --org my-org registry.example.com/repo:tag

----------------------------------------

TITLE: Example Docker Compose Development Configuration
DESCRIPTION: Demonstrates configuration of development features including file watching for both frontend and backend services. Shows sync and rebuild actions based on file changes.

LANGUAGE: yaml
CODE:
services:
  frontend:
    image: example/webapp
    build: ./webapp
    develop:
      watch: 
        # sync static content
        - path: ./webapp/html
          action: sync
          target: /var/www
          ignore:
            - node_modules/

  backend:
    image: example/backend
    build: ./backend
    develop:
      watch: 
        # rebuild image and recreate service
        - path: ./backend/src
          action: rebuild

----------------------------------------

TITLE: Uninstalling Legacy Docker Packages on Fedora
DESCRIPTION: Command to remove all old or conflicting Docker packages from the system using dnf package manager.

LANGUAGE: console
CODE:
$ sudo dnf remove docker \
                  docker-client \
                  docker-client-latest \
                  docker-common \
                  docker-latest \
                  docker-latest-logrotate \
                  docker-logrotate \
                  docker-selinux \
                  docker-engine-selinux \
                  docker-engine

----------------------------------------

TITLE: Importing spaCy Library in Python
DESCRIPTION: Importing the spaCy library, which is used for natural language processing tasks including named entity recognition.

LANGUAGE: python
CODE:
import spacy

----------------------------------------

TITLE: Docker Scout Version Command Output Example
DESCRIPTION: This snippet demonstrates the output of the 'docker scout version' command. It includes ASCII art, version number, Go runtime version, operating system, architecture, and git commit hash.

LANGUAGE: console
CODE:
$ docker scout version

      ⢀⢀⢀             ⣀⣀⡤⣔⢖⣖⢽⢝
   ⡠⡢⡣⡣⡣⡣⡣⡣⡢⡀    ⢀⣠⢴⡲⣫⡺⣜⢞⢮⡳⡵⡹⡅
  ⡜⡜⡜⡜⡜⡜⠜⠈⠈        ⠁⠙⠮⣺⡪⡯⣺⡪⡯⣺ 
 ⢘⢜⢜⢜⢜⠜               ⠈⠪⡳⡵⣹⡪⠇ 
 ⠨⡪⡪⡪⠂    ⢀⡤⣖⢽⡹⣝⡝⣖⢤⡀    ⠘⢝⢮⡚       _____                 _   
  ⠱⡱⠁    ⡴⡫⣞⢮⡳⣝⢮⡺⣪⡳⣝⢦    ⠘⡵⠁      / ____| Docker        | |  
   ⠁    ⣸⢝⣕⢗⡵⣝⢮⡳⣝⢮⡺⣪⡳⣣    ⠁      | (___   ___ ___  _   _| |_ 
        ⣗⣝⢮⡳⣝⢮⡳⣝⢮⡳⣝⢮⢮⡳            \___ \ / __/ _ \| | | | __|
   ⢀    ⢱⡳⡵⣹⡪⡳⣝⢮⡳⣝⢮⡳⡣⡏    ⡀       ____) | (_| (_) | |_| | |_ 
  ⢀⢾⠄    ⠫⣞⢮⡺⣝⢮⡳⣝⢮⡳⣝⠝    ⢠⢣⢂     |_____/ \___\___/ \__,_|\___|
  ⡼⣕⢗⡄    ⠈⠓⠝⢮⡳⣝⠮⠳⠙     ⢠⢢⢣⢣  
 ⢰⡫⡮⡳⣝⢦⡀              ⢀⢔⢕⢕⢕⢕⠅ 
 ⡯⣎⢯⡺⣪⡳⣝⢖⣄⣀        ⡀⡠⡢⡣⡣⡣⡣⡣⡃  
⢸⢝⢮⡳⣝⢮⡺⣪⡳⠕⠗⠉⠁    ⠘⠜⡜⡜⡜⡜⡜⡜⠜⠈   
⡯⡳⠳⠝⠊⠓⠉             ⠈⠈⠈⠈      



version: v1.0.9 (go1.21.3 - darwin/arm64)
git commit: 8bf95bf60d084af341f70e8263342f71b0a3cd16

----------------------------------------

TITLE: Pushing Local Repository to GitHub
DESCRIPTION: Series of Git commands to stage, commit, and push the local repository to GitHub, initializing the remote repository with the local content.

LANGUAGE: console
CODE:
$ git add -A
$ git commit -m "my commit"
$ git push -u origin main

----------------------------------------

TITLE: Listing Kubernetes Contexts in TypeScript
DESCRIPTION: This code snippet shows how to list available Kubernetes contexts using the kubectl command through the ddClient.extension.host?.cli.exec API. It retrieves the contexts in JSON format.

LANGUAGE: typescript
CODE:
const output = await ddClient.extension.host?.cli.exec("kubectl", [
  "config",
  "view",
  "-o",
  "jsonpath='{.contexts}'",
]);

----------------------------------------

TITLE: Listing Running Containers in Project Harmonia
DESCRIPTION: This command lists all running containers in the cloud engine. It's used to verify that the Nginx container is running in the cloud environment.

LANGUAGE: bash
CODE:
$ docker ps

----------------------------------------

TITLE: Start Alpine Containers
DESCRIPTION: Commands to start two detached Alpine containers connected to the default bridge network

LANGUAGE: console
CODE:
$ docker run -dit --name alpine1 alpine ash

$ docker run -dit --name alpine2 alpine ash

----------------------------------------

TITLE: Creating Base Docker Container
DESCRIPTION: Command to create and run a new Ubuntu container that will serve as the base for creating a custom Node.js image.

LANGUAGE: console
CODE:
$ docker run --name=base-container -ti ubuntu

----------------------------------------

TITLE: Running Docker Container on Remote Instance
DESCRIPTION: Command to run a Docker container on a new instance, binding to all interfaces. Replace YOUR-USER-NAME with your Docker ID.

LANGUAGE: bash
CODE:
docker run -dp 0.0.0.0:3000:3000 YOUR-USER-NAME/getting-started

----------------------------------------

TITLE: Complete Multi-Service Base Configuration
DESCRIPTION: Base compose.yaml with multiple services including web, db, and cache

LANGUAGE: yaml
CODE:
services:
  web:
    image: example/my_web_app:latest
    depends_on:
      - db
      - cache

  db:
    image: postgres:latest

  cache:
    image: redis:latest

----------------------------------------

TITLE: Installing gnome-terminal on Fedora for Docker Desktop
DESCRIPTION: Command to install gnome-terminal using dnf package manager, which is required for non-GNOME desktop environments to run Docker Desktop.

LANGUAGE: bash
CODE:
$ sudo dnf install gnome-terminal

----------------------------------------

TITLE: StartLogging Request Format in JSON
DESCRIPTION: JSON structure for the /LogDriver.StartLogging request containing file path and container info.

LANGUAGE: json
CODE:
{
  "File": "/path/to/file/stream",
  "Info": {
          "ContainerID": "123456"
  }
}

----------------------------------------

TITLE: Remote Bake Definition JSON Example
DESCRIPTION: This JSON snippet shows an example of a remote Bake definition. It defines a group and a target for building a binary, specifying the context, dockerfile, build arguments, target, platforms, and output.

LANGUAGE: json
CODE:
{
  "group": {
    "default": {
      "targets": ["binary"]
    }
  },
  "target": {
    "binary": {
      "context": "https://github.com/docker/cli.git#v20.10.11",
      "dockerfile": "Dockerfile",
      "args": {
        "BASE_VARIANT": "alpine",
        "GO_STRIP": "",
        "VERSION": ""
      },
      "target": "binary",
      "platforms": ["local"],
      "output": ["build"]
    }
  }
}

----------------------------------------

TITLE: Executing Docker Scout Version Command
DESCRIPTION: This command displays the version information for Docker Scout. It shows the version number, Go runtime version, operating system, architecture, and git commit hash.

LANGUAGE: bash
CODE:
docker scout version

----------------------------------------

TITLE: Integrating Docker Scout in Jenkins Pipeline
DESCRIPTION: This Groovy snippet shows how to configure a Jenkins pipeline stage to analyze an image using Docker Scout. It includes steps for installing the Docker Scout CLI, logging into Docker Hub, and running the analysis.

LANGUAGE: groovy
CODE:
stage('Analyze image') {
    steps {
        // Install Docker Scout
        sh 'curl -sSfL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh | sh -s -- -b /usr/local/bin'
        
        // Log into Docker Hub
        sh 'echo $DOCKER_SCOUT_HUB_PASSWORD | docker login -u $DOCKER_SCOUT_HUB_USER --password-stdin'

        // Analyze and fail on critical or high vulnerabilities
        sh 'docker-scout environment --org "<MY_DOCKER_ORG>" "<ENVIRONMENT>" $IMAGE_TAG
    }
}

----------------------------------------

TITLE: Defining Docker Scout Integration List Command Options in Markdown
DESCRIPTION: This snippet defines a Markdown table listing the options available for the 'docker scout integration list' command. It includes the option names, their types, default values, and descriptions.

LANGUAGE: markdown
CODE:
| Name     | Type     | Default | Description                               |
|:---------|:---------|:--------|:------------------------------------------|
| `--name` | `string` |         | Name of integration configuration to list |
| `--org`  | `string` |         | Namespace of the Docker organization      |

----------------------------------------

TITLE: Optional Environment Files Configuration in Docker Compose
DESCRIPTION: Demonstrates how to configure optional environment files with the required field introduced in Docker Compose 2.24.0.

LANGUAGE: yaml
CODE:
env_file:
  - path: ./default.env
    required: true # default
  - path: ./override.env
    required: false

----------------------------------------

TITLE: Checking Docker Desktop Status via CLI
DESCRIPTION: This command retrieves the current status of Docker Desktop. It's useful for quickly determining if Docker Desktop is running, stopped, or in an error state.

LANGUAGE: bash
CODE:
docker desktop status

----------------------------------------

TITLE: Running Prometheus Container with Docker CLI
DESCRIPTION: This Docker command runs a Prometheus container, mounting the configuration file, exposing port 9090, and adding the host's internal IP to the container's hosts file for Docker Desktop compatibility.

LANGUAGE: console
CODE:
$ docker run --name my-prometheus \
    --mount type=bind,source=/tmp/prometheus.yml,destination=/etc/prometheus/prometheus.yml \
    -p 9090:9090 \
    --add-host host.docker.internal=host-gateway \
    prom/prometheus

----------------------------------------

TITLE: Documenting Docker Compose Alpha Options in Markdown
DESCRIPTION: This snippet shows a markdown table detailing the options available for Docker Compose alpha commands, including their names, types, default values, and descriptions.

LANGUAGE: markdown
CODE:
| Name        | Type | Default | Description                     |
|:------------|:-----|:--------|:--------------------------------|
| `--dry-run` |      |         | Execute command in dry run mode |

----------------------------------------

TITLE: Basic tmpfs Mount Commands in Docker
DESCRIPTION: Shows the two primary methods for creating tmpfs mounts in Docker containers using either --mount or --tmpfs flags.

LANGUAGE: console
CODE:
$ docker run --mount type=tmpfs,dst=<mount-path>
$ docker run --tmpfs <mount-path>

----------------------------------------

TITLE: Generating delegation key pair using Docker Trust
DESCRIPTION: Uses Docker Trust to generate a delegation key pair and load the private key into the local Docker trust store.

LANGUAGE: bash
CODE:
$ docker trust key generate jeff

Generating key for jeff...
Enter passphrase for new jeff key with ID 9deed25: 
Repeat passphrase for new jeff key with ID 9deed25: 
Successfully generated and loaded private key. Corresponding public key available: /home/ubuntu/Documents/mytrustdir/jeff.pub

----------------------------------------

TITLE: Creating a Redis Service in Docker Swarm
DESCRIPTION: This command creates a Redis service with 3 replicas and a 10-second update delay.

LANGUAGE: bash
CODE:
$ docker service create --replicas 3 --name redis --update-delay 10s redis:7.4.0

----------------------------------------

TITLE: HTTP POST Request Implementation
DESCRIPTION: Shows how to make an HTTP POST request to a backend service. This method is deprecated in favor of HttpService.post.

LANGUAGE: typescript
CODE:
window.ddClient.backend
 .post("/some/service", { ... })
 .then((value: any) => console.log(value));

----------------------------------------

TITLE: Tabs Component Markdown Structure
DESCRIPTION: Shows the markdown syntax for implementing the tabs component with multiple language examples

LANGUAGE: markdown
CODE:
{{</* tabs */>}}
{{</* tab name="JavaScript" */>}}

```js
console.log("hello world")
```

{{</* /tab */>}}
{{</* tab name="Go" */>}}

```go
fmt.Println("hello world")
```

{{</* /tab */>}}
{{</* /tabs */>}}

----------------------------------------

TITLE: Specifying Multiple Environment Files in Include with YAML
DESCRIPTION: Shows how to specify multiple environment files when including external Compose files. This allows for more granular control over variable interpolation and environment-specific configurations.

LANGUAGE: yaml
CODE:
include:
   - path: ../another/compose.yaml
     env_file:
       - ../another/.env
       - ../another/dev.env

----------------------------------------

TITLE: Organization Events Table in Markdown
DESCRIPTION: A table defining organization-level events and their descriptions for Docker activity logs, including team, member, and organization management activities.

LANGUAGE: markdown
CODE:
| Event | Description |
|:--|:--|
| Team Created | Activities related to the creation of a team |
| Team Updated | Activities related to the modification of a team |
| Team Deleted | Activities related to the deletion of a team |

----------------------------------------

TITLE: Implementing Docker Plugin Activation Handshake
DESCRIPTION: JSON response for the Plugin.Activate API call. This handshake informs Docker about which subsystems the plugin implements, allowing Docker to send relevant events to the plugin.

LANGUAGE: json
CODE:
{
    "Implements": ["VolumeDriver"]
}

----------------------------------------

TITLE: Installing Gnome Terminal on Ubuntu
DESCRIPTION: Command to install the required gnome-terminal package for non-Gnome Desktop environments

LANGUAGE: bash
CODE:
sudo apt install gnome-terminal

----------------------------------------

TITLE: Deleting Temporary Data with Docker Scout
DESCRIPTION: Example showing how to delete temporary data using the docker scout cache prune command. This command prompts for confirmation before deleting the data.

LANGUAGE: console
CODE:
$ docker scout cache prune
? Are you sure to delete all temporary data? Yes
    ✓ temporary data deleted

----------------------------------------

TITLE: Retrieving Image Manifests in API v1.48
DESCRIPTION: GET /images/{name}/json response now includes a Manifests field containing information about sub-manifests in the image index when the manifests query parameter is set to true.

LANGUAGE: json
CODE:
GET /images/{name}/json?manifests=true

----------------------------------------

TITLE: Building and Pushing Wasm Image with Buildx
DESCRIPTION: This console snippet shows how to build and push a Wasm image using Docker Buildx. It specifies the wasi/wasm platform for the build process.

LANGUAGE: console
CODE:
$ docker buildx build --platform wasi/wasm -t username/hello-world .
...
=> exporting to image                                                                             0.0s
=> => exporting layers                                                                            0.0s
=> => exporting manifest sha256:2ca02b5be86607511da8dc688234a5a00ab4d58294ab9f6beaba48ab3ba8de56  0.0s
=> => exporting config sha256:a45b465c3b6760a1a9fd2eda9112bc7e3169c9722bf9e77cf8c20b37295f954b    0.0s
=> => naming to docker.io/username/hello-world:latest                                            0.0s
=> => unpacking to docker.io/username/hello-world:latest                                         0.0s
$ docker push username/hello-world

----------------------------------------

TITLE: Enrolling an Organization with Docker Scout
DESCRIPTION: The 'docker scout enroll' command is used to enroll an organization with Docker Scout. This command is part of the Docker CLI and is specifically used for Docker Scout operations.

LANGUAGE: markdown
CODE:
# docker scout enroll

<!---MARKER_GEN_START-->
Enroll an organization with Docker Scout


<!---MARKER_GEN_END-->

## Description

The `docker scout enroll` command enrolls an organization with Docker Scout.

----------------------------------------

TITLE: YAML Frontmatter Configuration for Docker Image CLI Documentation
DESCRIPTION: YAML frontmatter configuration block that defines metadata for the Docker image CLI documentation page, including the data folder, file name, title, and URL aliases.

LANGUAGE: yaml
CODE:
datafolder: engine-cli
datafile: docker_image
title: docker image
aliases:
- /edge/engine/reference/commandline/image/
- /engine/reference/commandline/image/
layout: cli

----------------------------------------

TITLE: String Case Manipulation in Docker Format
DESCRIPTION: Examples of using lower, upper, and title case transformations in Docker format commands.

LANGUAGE: console
CODE:
$ docker inspect --format "{{lower .Name}}" container

LANGUAGE: console
CODE:
$ docker inspect --format "{{title .Name}}" container

LANGUAGE: console
CODE:
$ docker inspect --format "{{upper .Name}}" container

----------------------------------------

TITLE: JSON Bake File Structure
DESCRIPTION: Example of basic Bake file structure in JSON format defining variables, groups and targets

LANGUAGE: json
CODE:
{
  "variable": {
    "TAG": {
      "default": "latest"
    }
  },
  "group": {
    "default": {
      "targets": ["webapp"]
    }
  },
  "target": {
    "webapp": {
      "dockerfile": "Dockerfile",
      "tags": ["docker.io/username/webapp:${TAG}"]
    }
  }
}

----------------------------------------

TITLE: Listing Docker Scout Configuration
DESCRIPTION: This snippet demonstrates how to list existing Docker Scout configuration using the 'docker scout config' command. It shows the current value of the 'organization' key.

LANGUAGE: console
CODE:
$ docker scout config
organization=my-org-namespace

----------------------------------------

TITLE: Running the Containerized Application
DESCRIPTION: Commands to build and run the containerized Java application using Docker Compose, both in foreground and detached modes.

LANGUAGE: console
CODE:
$ docker compose up --build

LANGUAGE: console
CODE:
$ docker compose up --build -d

LANGUAGE: console
CODE:
$ docker compose down

----------------------------------------

TITLE: Attestation Manifest Structure
DESCRIPTION: Illustrates the JSON structure of an attestation manifest, including schema version, media types, config, and layers.

LANGUAGE: json
CODE:
{
  "schemaVersion": 2,
  "mediaType": "application/vnd.oci.image.manifest.v1+json",
  "config": {
    "mediaType": "application/vnd.oci.image.config.v1+json",
    "size": 167,
    "digest": "sha256:916d7437a36dd0e258e64d9c5a373ca5c9618eeb1555e79bd82066e593f9afae"
  },
  "layers": [
    {
      "mediaType": "application/vnd.in-toto+json",
      "size": 1833349,
      "digest": "sha256:3138024b98ed5aa8e3008285a458cd25a987202f2500ce1a9d07d8e1420f5491",
      "annotations": {
        "in-toto.io/predicate-type": "https://spdx.dev/Document"
      }
    }
  ]
}

----------------------------------------

TITLE: Inspecting a Removed Docker Service
DESCRIPTION: This command attempts to inspect the 'helloworld' service after its removal. It demonstrates that the service no longer exists in the swarm.

LANGUAGE: bash
CODE:
$ docker service inspect helloworld
[]
Status: Error: no such service: helloworld, Code: 1

----------------------------------------

TITLE: HTTP HEAD Request Implementation
DESCRIPTION: Shows how to make an HTTP HEAD request to a backend service. This method is deprecated in favor of HttpService.head.

LANGUAGE: typescript
CODE:
window.ddClient.backend
 .head("/some/service")
 .then((value: any) => console.log(value));

----------------------------------------

TITLE: Tagging a Docker Image During Build
DESCRIPTION: Demonstrates how to tag an image with a memorable name during the build process using the -t flag.

LANGUAGE: console
CODE:
docker build -t my-username/my-image .

----------------------------------------

TITLE: Markdown Link Syntax for Docker Documentation
DESCRIPTION: Demonstrates the basic markdown syntax for creating external and internal links in Docker documentation. Shows how to link to external websites that open in new tabs and internal documentation pages that open in the same tab.

LANGUAGE: markdown
CODE:
[External links](https://docker.com)
[Internal links](links.md)

----------------------------------------

TITLE: Implementing Docker Documentation Badges in Go
DESCRIPTION: Shortcode syntax for creating colored badges in Docker documentation. Shows how to create both standalone badges and badges that function as links.

LANGUAGE: go
CODE:
{{</* badge color=amber text="amber badge" */>}}
[{{</* badge color="blue" text="badge with a link" */>}}](../overview.md)

----------------------------------------

TITLE: Billing Events Table in Markdown
DESCRIPTION: A table defining billing-related events and their descriptions for Docker activity logs, including plan changes and seat management.

LANGUAGE: markdown
CODE:
| Event | Description |
|:--|:--|
| Plan Upgraded | Occurs when your organization's billing plan is upgraded to a higher tier plan.|
| Plan Downgraded | Occurs when your organization's billing plan is downgraded to a lower tier plan. |
| Seat Added | Occurs when a seat is added to your organization's billing plan. |

----------------------------------------

TITLE: Dockerfile with Inconsistent Casing (Bad Example)
DESCRIPTION: Example showing incorrect mixed casing in Dockerfile instructions, which should be avoided.

LANGUAGE: dockerfile
CODE:
From alpine
Run echo hello > /greeting.txt
EntRYpOiNT ["cat", "/greeting.txt"]

----------------------------------------

TITLE: Usage of docker dev version Command
DESCRIPTION: Illustrates the usage of the docker dev version command to show Docker Dev version information. It includes options for formatting output and displaying only the version number.

LANGUAGE: bash
CODE:
docker dev version [OPTIONS]

----------------------------------------

TITLE: Generating Markdown Output for Image Comparison
DESCRIPTION: This snippet demonstrates how to generate a markdown-formatted output when comparing two Docker images using the 'docker scout compare' command.

LANGUAGE: console
CODE:
$ docker scout compare --format markdown --to namespace/repo:latest namespace/repo:v1.2.3-pre

----------------------------------------

TITLE: Setting Docker Host Environment Variable for Unix Socket Connection
DESCRIPTION: This snippet demonstrates how to set the DOCKER_HOST environment variable to connect to Docker instances through Unix sockets. This is useful for applications like Apache Maven that expect these settings.

LANGUAGE: console
CODE:
$ export DOCKER_HOST=unix:///var/run/docker.sock

----------------------------------------

TITLE: Printing Docker Scout Configuration Value
DESCRIPTION: This example shows how to print a specific configuration value using the 'docker scout config' command followed by the key name. It retrieves the value of the 'organization' key.

LANGUAGE: console
CODE:
$ docker scout config organization
my-org-namespace

----------------------------------------

TITLE: Development-specific Docker Compose Configuration
DESCRIPTION: Extended Docker Compose configuration for development environment with bind mounts for source code, debug port exposure, and development target specification.

LANGUAGE: yaml
CODE:
services:
  server:
    build:
      context: .
      target: dev
    ports:
      - 3000:3000
      - 9229:9229
    volumes:
      - ./src:/usr/src/app/src

----------------------------------------

TITLE: Development-specific Docker Compose Configuration
DESCRIPTION: Extended Docker Compose configuration for development environment with bind mounts for source code, debug port exposure, and development target specification.

LANGUAGE: yaml
CODE:
services:
  server:
    build:
      context: .
      target: dev
    ports:
      - 3000:3000
      - 9229:9229
    volumes:
      - ./src:/usr/src/app/src

----------------------------------------

TITLE: Defining Documentation Icons in YAML
DESCRIPTION: YAML configuration defining icon mappings for various Docker documentation topics. Includes metadata like description and title, followed by a grid of icon definitions with title, icon name, and description for each entry.

LANGUAGE: yaml
CODE:
---
description: Icons used across docs
title: Icons
grid:
  - title: "Install"
    icon: "download"
    description: Icon name = download
  - title: "FAQs"
    icon: "help"
    description: Icon name = help
  # ... additional entries omitted for brevity ...
  - title: "General settings"
    icon: "settings"
    description: Icon name = settings
---

----------------------------------------

TITLE: Build Timeout Message Example in Docker Hub
DESCRIPTION: Example log message displayed when a Docker Hub build is cancelled due to reaching the 4-hour execution time limit or manual cancellation.

LANGUAGE: text
CODE:
2022-11-02T17:42:27Z The build was cancelled or exceeded the maximum execution time.

----------------------------------------

TITLE: Build Timeout Message Example in Docker Hub
DESCRIPTION: Example log message displayed when a Docker Hub build is cancelled due to reaching the 4-hour execution time limit or manual cancellation.

LANGUAGE: text
CODE:
2022-11-02T17:42:27Z The build was cancelled or exceeded the maximum execution time.

----------------------------------------

TITLE: Volume Plugin Mount Request
DESCRIPTION: JSON request format for mounting a volume through the plugin API

LANGUAGE: json
CODE:
{
    "Name": "volume_name",
    "ID": "b87d7442095999a92b65b3d9691e697b61713829cc0ffd1bb72e4ccd51aa4d6c"
}

----------------------------------------

TITLE: CMD Instruction Examples
DESCRIPTION: Demonstrates different ways to use the CMD instruction to specify default commands or parameters.

LANGUAGE: dockerfile
CODE:
CMD ["executable","param1","param2"]
CMD ["param1","param2"]
CMD command param1 param2

----------------------------------------

TITLE: Dockerfile for Multi-Arch Docker Extension with Architecture-Specific Binaries
DESCRIPTION: Demonstrates how to download and include architecture-specific binaries (kubectl) in a Docker extension image based on the target architecture.

LANGUAGE: Dockerfile
CODE:
#syntax=docker/dockerfile:1.3-labs

FROM alpine AS dl
WORKDIR /tmp
RUN apk add --no-cache curl tar
ARG TARGETARCH
RUN <<EOT ash
    mkdir -p /out/darwin
    curl -fSsLo /out/darwin/kubectl "https://dl.k8s.io/release/$(curl -Ls https://dl.k8s.io/release/stable.txt)/bin/darwin/${TARGETARCH}/kubectl"
    chmod a+x /out/darwin/kubectl
EOT
RUN <<EOT ash
    if [ "amd64" = "$TARGETARCH" ]; then
        mkdir -p /out/windows
        curl -fSsLo /out/windows/kubectl.exe "https://dl.k8s.io/release/$(curl -Ls https://dl.k8s.io/release/stable.txt)/bin/windows/amd64/kubectl.exe"
    fi
EOT

FROM alpine
LABEL org.opencontainers.image.title="example-extension" \
    org.opencontainers.image.description="My Example Extension" \
    org.opencontainers.image.vendor="Docker Inc." \
    com.docker.desktop.extension.api.version=">= 0.3.3"

COPY --from=dl /out /

----------------------------------------

TITLE: Adding Second Worker Node to Docker Swarm
DESCRIPTION: Command to join a second worker node (worker2) to the existing swarm using the same join token and manager address.

LANGUAGE: console
CODE:
$ docker swarm join \
  --token SWMTKN-1-49nj1cmql0jkz5s954yi3oex3nedyz0fb0xx14ie39trti4wxv-8vxv8rssmk743ojnwacrr2e7c \
  192.168.99.100:2377

----------------------------------------

TITLE: Executing Command in Extension Backend Container using TypeScript
DESCRIPTION: Demonstrates how to execute a command (ls -l) inside the backend container using ddClient.extension.vm.cli.exec().

LANGUAGE: typescript
CODE:
await ddClient.extension.vm.cli.exec("ls", ["-l"]);

----------------------------------------

TITLE: Demonstrating Image Formatting in Markdown for Docker Documentation
DESCRIPTION: This code snippet showcases different ways to include and format images in Docker documentation using Markdown. It demonstrates small images, large images, setting image sizes with query parameters, and adding borders to images.

LANGUAGE: markdown
CODE:
- A small image: ![a small image](/assets/images/footer_moby_icon.png)

- Large images occupy the full width of the reading column by default:

  ![a pretty wide image](/assets/images/banner_image_24512.png)

- Image size can be set using query parameters: `?h=<height>&w=<width>`

  ![a pretty wide image](/assets/images/banner_image_24512.png?w=100&h=50)

- Image with a border, also set with a query parameter: `?border=true`

  ![a small image](/assets/images/footer_moby_icon.png?border=true)

----------------------------------------

TITLE: Reusing Built Image in Subsequent Steps with GitHub Actions
DESCRIPTION: This example shows how to build a base image and then use it as a named context in a subsequent build step within a GitHub Actions workflow. It uses the 'docker' driver to enable loading of the built image.

LANGUAGE: dockerfile
CODE:
# syntax=docker/dockerfile:1
FROM alpine
RUN echo "Hello World"

LANGUAGE: yaml
CODE:
name: ci

on:
  push:

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker

      - name: Build base image
        uses: docker/build-push-action@v6
        with:
          context: "{{defaultContext}}:base"
          load: true
          tags: my-base-image:latest

      - name: Build
        uses: docker/build-push-action@v6
        with:
          build-contexts: |
            alpine=docker-image://my-base-image:latest
          tags: myimage:latest

----------------------------------------

TITLE: Incorrect Dockerfile Stage Name Case
DESCRIPTION: Example of incorrect stage name usage with mixed case characters.

LANGUAGE: dockerfile
CODE:
FROM alpine AS BuilderBase

----------------------------------------

TITLE: Usage of docker dev open Command
DESCRIPTION: Shows the usage of the docker dev open command to open a Dev Environment with the IDE. It requires the dev environment name and container reference, with an option to specify the editor.

LANGUAGE: bash
CODE:
docker dev open DEV_ENV_NAME CONTAINER_REF [OPTIONS]

----------------------------------------

TITLE: Docker Compose Commit Command Options Table
DESCRIPTION: Markdown table defining the available options for the Docker Compose commit command, including parameters for author information, Dockerfile modifications, execution mode, container selection, commit messages, and pause behavior during commit.

LANGUAGE: markdown
CODE:
| Name              | Type     | Default | Description                                                |
|:------------------|:---------|:--------|:-----------------------------------------------------------|
|-a, --author      | string   |         | Author (e.g., "John Hannibal Smith <hannibal@a-team.com>") |
|-c, --change      | list     |         | Apply Dockerfile instruction to the created image          |
|--dry-run         | bool     |         | Execute command in dry run mode                            |
|--index           | int      | 0       | index of the container if service has multiple replicas.   |
|-m, --message     | string   |         | Commit message                                             |
|-p, --pause       | bool     | true    | Pause container during commit                              |

----------------------------------------

TITLE: Defining Docker Component Dependencies
DESCRIPTION: Specifies the required versions of core Docker components and tools using Go module syntax. Each line defines a specific dependency with its associated version constraint.

LANGUAGE: go
CODE:
# github.com/moby/moby v28.0.1+incompatible
# github.com/moby/buildkit v0.20.0
# github.com/docker/buildx v0.21.2
# github.com/docker/cli v28.0.1+incompatible
# github.com/docker/compose/v2 v2.33.1
# github.com/docker/scout-cli v1.15.0

----------------------------------------

TITLE: Running Docker Compose in Project Harmonia Cloud Engine
DESCRIPTION: This command runs a Docker Compose project in the cloud engine. It demonstrates how to deploy multi-container applications in the cloud environment.

LANGUAGE: bash
CODE:
$ docker compose up -d

----------------------------------------

TITLE: Implementing StopMetrics Endpoint for Docker MetricsCollector
DESCRIPTION: The StopMetrics endpoint signals that the metrics socket is no longer available. It requires an empty request and returns a response with an optional error message.

LANGUAGE: json
CODE:
// Request:
{}

// Response:
{
  "Err": ""
}

----------------------------------------

TITLE: Defining Multi-Container Application in Docker Compose
DESCRIPTION: Example YAML configuration for a multi-container application with frontend and backend services, networks, volumes, configs, and secrets.

LANGUAGE: yaml
CODE:
services:
  frontend:
    image: example/webapp
    ports:
      - "443:8043"
    networks:
      - front-tier
      - back-tier
    configs:
      - httpd-config
    secrets:
      - server-certificate

  backend:
    image: example/database
    volumes:
      - db-data:/etc/data
    networks:
      - back-tier

volumes:
  db-data:
    driver: flocker
    driver_opts:
      size: "10GiB"

configs:
  httpd-config:
    external: true

secrets:
  server-certificate:
    external: true

networks:
  # The presence of these objects is sufficient to define them
  front-tier: {}
  back-tier: {}

----------------------------------------

TITLE: Defining Multi-Container Application in Docker Compose
DESCRIPTION: Example YAML configuration for a multi-container application with frontend and backend services, networks, volumes, configs, and secrets.

LANGUAGE: yaml
CODE:
services:
  frontend:
    image: example/webapp
    ports:
      - "443:8043"
    networks:
      - front-tier
      - back-tier
    configs:
      - httpd-config
    secrets:
      - server-certificate

  backend:
    image: example/database
    volumes:
      - db-data:/etc/data
    networks:
      - back-tier

volumes:
  db-data:
    driver: flocker
    driver_opts:
      size: "10GiB"

configs:
  httpd-config:
    external: true

secrets:
  server-certificate:
    external: true

networks:
  # The presence of these objects is sufficient to define them
  front-tier: {}
  back-tier: {}

----------------------------------------

TITLE: Rendering Accordion Component in Docker Docs
DESCRIPTION: This snippet demonstrates how to render an accordion component in Docker's documentation. It includes a title and a console command within the accordion.

LANGUAGE: markdown
CODE:
{{< accordion title="Accordion example" >}}

```console
$ docker run hello-world
```

{{< /accordion >}}

----------------------------------------

TITLE: Listing All Docker Containers
DESCRIPTION: Display all Docker containers, including stopped ones, using the --all flag.

LANGUAGE: bash
CODE:
$ docker ps -a

----------------------------------------

TITLE: Incorrect Usage of Undefined Build Argument in Dockerfile
DESCRIPTION: Demonstrates incorrect usage of an undefined build argument '$foo' in a Dockerfile COPY instruction. This can lead to unexpected behavior or errors.

LANGUAGE: dockerfile
CODE:
FROM alpine AS base
COPY $foo .

----------------------------------------

TITLE: Correct Usage of Build Argument in Dockerfile
DESCRIPTION: Shows the correct way to use a build argument in a Dockerfile by declaring it with ARG before use. This ensures the variable is properly defined.

LANGUAGE: dockerfile
CODE:
FROM alpine AS base
ARG foo
COPY $foo .

----------------------------------------

TITLE: Fetching Remote Bake Definition with Docker Buildx
DESCRIPTION: This snippet demonstrates how to fetch and execute a Bake definition from a remote Git repository using Docker Buildx. It prints the build plan without executing it.

LANGUAGE: console
CODE:
$ docker buildx bake "https://github.com/docker/cli.git#v20.10.11" --print

----------------------------------------

TITLE: Adding First Worker Node to Docker Swarm
DESCRIPTION: Command to join a worker node to an existing swarm using a join token. This connects worker1 to the swarm manager at the specified IP address and port.

LANGUAGE: console
CODE:
$ docker swarm join \
  --token  SWMTKN-1-49nj1cmql0jkz5s954yi3oex3nedyz0fb0xx14ie39trti4wxv-8vxv8rssmk743ojnwacrr2e7c \
  192.168.99.100:2377

----------------------------------------

TITLE: Defining Docker Extension Image Labels in Dockerfile
DESCRIPTION: This snippet demonstrates how to define various required and optional labels for a Docker extension image in a Dockerfile. It includes examples of specifying the extension title, description, vendor, API version, icon, screenshots, and other metadata.

LANGUAGE: dockerfile
CODE:
LABEL org.opencontainers.image.title="my-extension"
LABEL org.opencontainers.image.description="This extension is cool."
LABEL org.opencontainers.image.vendor="Acme, Inc."
LABEL com.docker.desktop.extension.api.version=">= 0.1.0"
LABEL com.docker.desktop.extension.icon="https://example.com/assets/image.svg"
LABEL com.docker.extension.screenshots="[{\"alt\":\"alternative text for image 1\",\"url\":\"https://example.com/image1.png\"},{\"alt\":\"alternative text for image2\",\"url\":\"https://example.com/image2.jpg\"}]"
LABEL com.docker.extension.detailed-description="<h1>My detailed description</h1>"
LABEL com.docker.extension.publisher-url="https://example.com"
LABEL com.docker.extension.additional-urls="[{\"title\":\"Documentation\",\"url\":\"https://example.com/docs\"},{\"title\":\"Support\",\"url\":\"https://example.com/bar/support\"},{\"title\":\"Terms of Service\",\"url\":\"https://example.com/tos\"},{\"title\":\"Privacy policy\",\"url\":\"https://example.com/privacy\"}]"
LABEL com.docker.extension.changelog="<p>Extension changelog<ul><li>New feature A</li><li>Bug fix on feature B</li></ul></p>"
LABEL com.docker.extension.account-info="required"
LABEL com.docker.extension.categories="kubernetes,security"

----------------------------------------

TITLE: Tagging an Existing Docker Image
DESCRIPTION: Shows how to add another tag to an existing image using the docker image tag command.

LANGUAGE: console
CODE:
docker image tag my-username/my-image another-username/another-image:v1

----------------------------------------

TITLE: YAML Front Matter Configuration for Docker Search Documentation
DESCRIPTION: YAML configuration block that defines metadata for the Docker search command documentation page, including the data folder location, filename, title and URL aliases.

LANGUAGE: yaml
CODE:
---
datafolder: engine-cli
datafile: docker_search
title: docker search
aliases:
- /edge/engine/reference/commandline/search/
- /engine/reference/commandline/search/
layout: cli
---

----------------------------------------

TITLE: Configuring YAML Frontmatter for Docker Logging Documentation
DESCRIPTION: YAML frontmatter block that specifies build configuration and page title for Docker logging drivers documentation. The build.render property is set to 'never' and the title is set to 'Logging drivers'.

LANGUAGE: yaml
CODE:
---
build:
  render: never
title: Logging drivers
---

----------------------------------------

TITLE: Removing a signer from a repository
DESCRIPTION: Removes a signer's delegation and associated keys from a repository using Docker Trust.

LANGUAGE: bash
CODE:
$ docker trust signer remove ben registry.example.com/admin/demo
Removing signer "ben" from registry.example.com/admin/demo...
Enter passphrase for repository key with ID b0014f8: 
Successfully removed ben from registry.example.com/admin/demo

----------------------------------------

TITLE: Testing Rexray EBS Plugin with Docker Commands
DESCRIPTION: This shell script demonstrates how to set plugin parameters, enable the plugin, create an EBS volume, and use it with Docker containers. It showcases the basic functionality of the Rexray EBS plugin.

LANGUAGE: sh
CODE:
docker plugin set tiborvass/rexray-plugin EBS_ACCESSKEY=$AWS_ACCESSKEY EBS_SECRETKEY=$AWS_SECRETKEY`
docker plugin enable tiborvass/rexray-plugin
docker volume create -d tiborvass/rexray-plugin my-ebs-volume
docker volume ls
docker run --rm -v my-ebs-volume:/volume busybox sh -c 'echo bye > /volume/hi'
docker run --rm -v my-ebs-volume:/volume busybox cat /volume/hi

----------------------------------------

TITLE: Streaming Container Events in JSON Format with Docker Compose
DESCRIPTION: This snippet demonstrates the JSON output format when using the 'docker compose events' command with the --json flag. It shows the structure of event data including timestamp, event type, action, container ID, service name, and additional attributes.

LANGUAGE: json
CODE:
{
    "time": "2015-11-20T18:01:03.615550",
    "type": "container",
    "action": "create",
    "id": "213cf7...5fc39a",
    "service": "web",
    "attributes": {
      "name": "application_web_1",
      "image": "alpine:edge"
    }
}

----------------------------------------

TITLE: Running Troubleshooting Command in Project Harmonia
DESCRIPTION: This command prints helpful troubleshooting information for Project Harmonia. It's useful for diagnosing issues and gathering system information when problems occur.

LANGUAGE: bash
CODE:
$ docker harmonia doctor

----------------------------------------

TITLE: ReadLogs Configuration in Go
DESCRIPTION: Golang struct definition for log reading configuration options.

LANGUAGE: go
CODE:
type ReadConfig struct {
	Since  time.Time
	Tail   int
	Follow bool
}

----------------------------------------

TITLE: Running the Bun Application in Detached Mode
DESCRIPTION: This command builds and runs the Bun application in detached mode using Docker Compose. The -d flag runs the containers in the background.

LANGUAGE: console
CODE:
$ docker compose up --build -d

----------------------------------------

TITLE: Installing Docker Engine from RPM Package
DESCRIPTION: Command to install Docker Engine using a downloaded RPM package file.

LANGUAGE: console
CODE:
$ sudo dnf install /path/to/package.rpm

----------------------------------------

TITLE: Running Named Container
DESCRIPTION: Command to run container with a custom name for better identification.

LANGUAGE: console
CODE:
$ docker run -d -p 8080:8080 --name rest-server docker-gs-ping

----------------------------------------

TITLE: Using Default Value for ARG in FROM Statement (Dockerfile)
DESCRIPTION: This snippet demonstrates how to use a default value for an ARG in a FROM statement when the build argument is not provided. It ensures a valid image reference in all cases.

LANGUAGE: dockerfile
CODE:
ARG TAG
FROM alpine:${TAG:-3.14}

----------------------------------------

TITLE: Implementing Single Card Shortcode in Go
DESCRIPTION: Example of using the card shortcode to create a single card component with title, icon, link and description parameters.

LANGUAGE: go
CODE:
{{< card
  title="Get your Docker on"
  icon=favorite
  link=https://docs.docker.com/
  description="Build, share, and run your apps with Docker" >}}

----------------------------------------

TITLE: Starting Docker Daemon with Command-line Flags
DESCRIPTION: Example of manually starting the Docker daemon using command-line flags to configure TLS settings and specify the host.

LANGUAGE: console
CODE:
$ dockerd --debug \
  --tls=true \
  --tlscert=/var/docker/server.pem \
  --tlskey=/var/docker/serverkey.pem \
  --host tcp://192.168.59.3:2376

----------------------------------------

TITLE: Starting Docker Daemon on Linux
DESCRIPTION: Commands for starting the Docker daemon and verifying the installation by running a test container.

LANGUAGE: bash
CODE:
$ sudo dockerd &
$ sudo docker run hello-world

----------------------------------------

TITLE: Executing Commands with Docker Exec Interface
DESCRIPTION: Method for executing basic commands and returning results as a Promise. Takes a command string, array of arguments, and optional ExecOptions parameter.

LANGUAGE: typescript
CODE:
Exec(cmd: string, args: string[], options?: ExecOptions): Promise<ExecResult>

----------------------------------------

TITLE: Listing Docker Plugins
DESCRIPTION: This command lists all installed Docker plugins, showing their names, descriptions, and enabled status.

LANGUAGE: bash
CODE:
$ docker plugin ls

ID                  NAME                             DESCRIPTION                     ENABLED
69553ca1d123        tiborvass/sample-volume-plugin   A sample volume plugin         true

----------------------------------------

TITLE: Using Local Context with Remote Bake Definition in HCL
DESCRIPTION: This HCL snippet demonstrates how to use a local context with a remote Bake definition. It uses the 'cwd://' prefix to reference the current working directory and includes an inline Dockerfile.

LANGUAGE: hcl
CODE:
target "default" {
  context = "cwd://"
  dockerfile-inline = <<EOT
FROM alpine
WORKDIR /src
COPY . .
RUN ls -l && stop
EOT
}

----------------------------------------

TITLE: Setting Git Remote URL for GitHub Repository
DESCRIPTION: Command to change the Git remote URL to the newly created GitHub repository. Replace 'your-username' and 'your-repository' with appropriate values.

LANGUAGE: console
CODE:
$ git remote set-url origin https://github.com/your-username/your-repository.git

----------------------------------------

TITLE: Removing a local delegation private key
DESCRIPTION: Uses the Notary CLI to remove a local delegation private key from the Docker trust store.

LANGUAGE: bash
CODE:
$ notary key remove 1091060d7bfd938dfa5be703fa057974f9322a4faef6f580334f3d6df44c02d1

Are you sure you want to remove 1091060d7bfd938dfa5be703fa057974f9322a4faef6f580334f3d6df44c02d1 (role jeff) from /home/ubuntu/.docker/trust/private?  (yes/no)  y

Deleted 1091060d7bfd938dfa5be703fa057974f9322a4faef6f580334f3d6df44c02d1 (role jeff) from /home/ubuntu/.docker/trust/private.

----------------------------------------

TITLE: Checking Kubernetes Version with kubectl
DESCRIPTION: Use the kubectl command to verify the installed version of Kubernetes on Docker Desktop.

LANGUAGE: console
CODE:
$ kubectl version

----------------------------------------

TITLE: Committing a Docker Container using SDKs and API
DESCRIPTION: This example demonstrates how to commit a Docker container to create a new image using the Docker Go SDK, Python SDK, and HTTP API. It creates a container, runs a command, and then commits the changes to a new image.

LANGUAGE: Go
CODE:
package main

import (
	"context"
	"fmt"

	"github.com/docker/docker/api/types/container"
	"github.com/docker/docker/client"
)

func main() {
	ctx := context.Background()
	cli, err := client.NewClientWithOpts(client.FromEnv, client.WithAPIVersionNegotiation())
	if err != nil {
		panic(err)
	}
	defer cli.Close()

	createResp, err := cli.ContainerCreate(ctx, &container.Config{
		Image: "alpine",
		Cmd:   []string{"touch", "/helloworld"},
	}, nil, nil, nil, "")
	if err != nil {
		panic(err)
	}

	if err := cli.ContainerStart(ctx, createResp.ID, container.StartOptions{}); err != nil {
		panic(err)
	}

	statusCh, errCh := cli.ContainerWait(ctx, createResp.ID, container.WaitConditionNotRunning)
	select {
	case err := <-errCh:
		if err != nil {
			panic(err)
		}
	case <-statusCh:
	}

	commitResp, err := cli.ContainerCommit(ctx, createResp.ID, container.CommitOptions{Reference: "helloworld"})
	if err != nil {
		panic(err)
	}

	fmt.Println(commitResp.ID)
}

LANGUAGE: Python
CODE:
import docker
client = docker.from_env()
container = client.containers.run("alpine", ["touch", "/helloworld"], detach=True)
container.wait()
image = container.commit("helloworld")
print(image.id)

LANGUAGE: HTTP
CODE:
$ docker run -d alpine touch /helloworld
0888269a9d584f0fa8fc96b3c0d8d57969ceea3a64acf47cd34eebb4744dbc52
$ curl --unix-socket /var/run/docker.sock\
  -X POST "http://localhost/v{{% param "latest_engine_api_version" %}}/commit?container=0888269a9d&repo=helloworld"
{"Id":"sha256:6c86a5cd4b87f2771648ce619e319f3e508394b5bfc2cdbd2d60f59d52acda6c"}

----------------------------------------

TITLE: Neo4j Cypher query for deleting all data
DESCRIPTION: Cypher query to delete all nodes and relationships in the Neo4j database.

LANGUAGE: cypher
CODE:
MATCH (n)
DETACH DELETE n;

----------------------------------------

TITLE: Demonstrating Variable Placeholder Syntax in Bash
DESCRIPTION: Shows how to use placeholder values in code examples using the format <[A-Z_]+>. This syntax is reserved for variable names and will be rendered in a special color and font style.

LANGUAGE: bash
CODE:
export name=<MY_NAME>

----------------------------------------

TITLE: Correct WORKDIR Usage in Dockerfile
DESCRIPTION: Example showing correct usage of WORKDIR with absolute path, ensuring consistent directory location regardless of base image changes.

LANGUAGE: dockerfile
CODE:
FROM nginx AS web
WORKDIR /usr/share/nginx/html
COPY public .

----------------------------------------

TITLE: Docker Compose Basic Command Structure
DESCRIPTION: Shows the basic syntax for Docker Compose CLI commands including file specification and options.

LANGUAGE: text
CODE:
docker compose [-f <arg>...] [options] [COMMAND] [ARGS...]

----------------------------------------

TITLE: Uninstalling Docker Desktop via Windows Command Line
DESCRIPTION: Commands to uninstall Docker Desktop using PowerShell or Command Prompt on Windows. This process uses the Docker Desktop Installer executable to perform the uninstallation.

LANGUAGE: powershell
CODE:
$ Start-Process 'Docker Desktop Installer.exe' -Wait uninstall

LANGUAGE: batch
CODE:
$ start /w "" "Docker Desktop Installer.exe" uninstall

----------------------------------------

TITLE: Deprecated Docker Desktop Navigation Methods
DESCRIPTION: Lists deprecated navigation methods for Docker Desktop UI, including navigation to containers, images, volumes, and dev environments. These methods will be removed in future versions.

LANGUAGE: typescript
CODE:
window.ddClient.navigateToContainers();
// id - the full container id, e.g. `46b57e400d801762e9e115734bf902a2450d89669d85881058a46136520aca28`
window.ddClient.navigateToContainer(id);
window.ddClient.navigateToContainerLogs(id);
window.ddClient.navigateToContainerInspect(id);
window.ddClient.navigateToContainerStats(id);

window.ddClient.navigateToImages();
window.ddClient.navigateToImage(id, tag);

window.ddClient.navigateToVolumes();
window.ddClient.navigateToVolume(volume);

window.ddClient.navigateToDevEnvironments();

----------------------------------------

TITLE: Docker Documentation Keywords Regex Pattern
DESCRIPTION: A collection of regex patterns defining approved keywords and terms for Docker documentation, including product names, technologies, and technical concepts. The patterns use case-insensitive matching and include variations of terms.

LANGUAGE: regex
CODE:
(?i)[A-Z]{2,}'?s

----------------------------------------

TITLE: Configuring Grid Data in YAML Front Matter
DESCRIPTION: Example of defining grid content in YAML front matter, showing how to specify multiple cards with their properties.

LANGUAGE: yaml
CODE:
# front matter section of a page
title: some page
grid:
  - title: "Docker Engine"
    description: Vrrrrooooommm
    icon: "developer_board"
    link: "/engine/"
  - title: "Docker Build"
    description: Clang bang
    icon: "build"
    link: "/build/"

----------------------------------------

TITLE: Verifying Docker Installation on RHEL
DESCRIPTION: This command runs the hello-world Docker image to verify that the Docker Engine installation was successful. It downloads the test image and runs it in a container, which prints a confirmation message if everything is working correctly.

LANGUAGE: bash
CODE:
$ sudo docker run hello-world

----------------------------------------

TITLE: Configuring External Prometheus for Docker Daemon
DESCRIPTION: This YAML configuration snippet shows how to add a Docker daemon as a scrape target for an external Prometheus instance.

LANGUAGE: yaml
CODE:
- job_name: docker
  static_configs:
    - targets: ["docker.daemon.example:<PORT>"]

----------------------------------------

TITLE: Setting HTTPS Proxy in Docker Systemd Service File
DESCRIPTION: This systemd configuration snippet shows how to set the HTTPS_PROXY environment variable for the Docker service using a drop-in file.

LANGUAGE: systemd
CODE:
[Service]
Environment="HTTPS_PROXY=https://proxy.example.com:3129"

----------------------------------------

TITLE: YAML Frontmatter Configuration
DESCRIPTION: YAML frontmatter defining metadata for the Docker manifest push command documentation page. Includes data folder location, file name, page title, URL aliases, and layout specification.

LANGUAGE: yaml
CODE:
datafolder: engine-cli
datafile: docker_manifest_push
title: docker manifest push
aliases:
- /edge/engine/reference/commandline/manifest_push/
- /engine/reference/commandline/manifest_push/
layout: cli

----------------------------------------

TITLE: Configuring Metadata for Docker Exec Command Documentation
DESCRIPTION: This YAML snippet defines the title, build settings, and sidebar navigation for the 'docker exec' command documentation page. It specifies that the page should not be rendered and provides a navigation link to the full command reference.

LANGUAGE: yaml
CODE:
---
title: docker exec
build:
  render: never
sidebar:
  goto: /reference/cli/docker/container/exec/
---

----------------------------------------

TITLE: Defining Local Named Contexts in HCL
DESCRIPTION: This HCL snippet shows how to define local directories as named contexts in a Bake file. It uses the 'cwd://' prefix to specify a path relative to the current working directory.

LANGUAGE: hcl
CODE:
target "default" {
  contexts = {
    docs = "cwd://src/docs/content"
  }
  dockerfile = "Dockerfile"
}

----------------------------------------

TITLE: YAML Frontmatter Configuration for Docker Scout Documentation
DESCRIPTION: YAML configuration block defining the documentation page structure, navigation, and content grid for Docker Scout. Includes page metadata, navigation settings, and feature section definitions.

LANGUAGE: yaml
CODE:
---
title: Docker Scout
weight: 40
keywords: scout, supply chain, vulnerabilities, packages, cves, scan, analysis, analyze
description:
  Get an overview on Docker Scout to proactively enhance your software supply chain security
aliases:
  - /engine/scan/
params:
  sidebar:
    group: Products
grid:
  - title: Quickstart
    link: /scout/quickstart/
    description: Learn what Docker Scout can do, and how to get started.
    icon: explore
  - title: Image analysis
    link: /scout/image-analysis/
    description: Reveal and dig into the composition of your images.
    icon: radar
  - title: Advisory database
    link: /scout/advisory-db-sources/
    description: Learn about the information sources that Docker Scout uses.
    icon: database
  - title: Integrations
    description: |
      Connect Docker Scout with your CI, registries, and other third-party services.
    link: /scout/integrations/
    icon: multiple_stop
  - title: Dashboard
    link: /scout/dashboard/
    description: |
      The web interface for Docker Scout.
    icon: dashboard
  - title: Policy
    link: /scout/policy/
    description: |
      Ensure that your artifacts align with supply chain best practices.
    icon: policy
  - title: Upgrade
    link: /subscription/change/
    description: |
      The free plan includes up to 1 repository. Upgrade for more.
    icon: upgrade
---

----------------------------------------

TITLE: Formatting Interactive Shell Commands
DESCRIPTION: Demonstrates how to format interactive shell commands using the 'console' language code block. This example includes the user prompt symbol ($) to indicate an interactive shell.

LANGUAGE: console
CODE:
$ echo "deb https://packages.docker.com/1.12/apt/repo ubuntu-trusty main" | sudo tee /etc/apt/sources.list.d/docker.list

----------------------------------------

TITLE: Checking Proxy Environment Variables in Docker Container
DESCRIPTION: Console command demonstrating how to verify proxy environment variables are correctly set within a running container using Alpine Linux.

LANGUAGE: console
CODE:
$ docker run --rm alpine sh -c 'env | grep -i  _PROXY'

----------------------------------------

TITLE: Installing Docker Go SDK
DESCRIPTION: Command to install the Docker Engine SDK for Go using go get

LANGUAGE: shell
CODE:
$ go get github.com/docker/docker/client

----------------------------------------

TITLE: Formatting PowerShell Commands in Documentation
DESCRIPTION: Illustrates how to format PowerShell commands in documentation using the 'powershell' language code block. This example shows commands for installing Docker on Windows.

LANGUAGE: powershell
CODE:
Install-Module DockerMsftProvider -Force
Install-Package Docker -ProviderName DockerMsftProvider -Force
[System.Environment]::SetEnvironmentVariable("DOCKER_FIPS", "1", "Machine")
Expand-Archive docker-18.09.1.zip -DestinationPath $Env:ProgramFiles -Force

----------------------------------------

TITLE: Error Output for Inconsistent Casing
DESCRIPTION: Example error message shown when inconsistent instruction casing is detected.

LANGUAGE: text
CODE:
Command 'EntryPoint' should be consistently cased

----------------------------------------

TITLE: Defining Front Matter in YAML for Docker Documentation
DESCRIPTION: This snippet demonstrates the structure and required fields for the front matter of a Docker documentation page. It includes metadata such as title, description, keywords, and various optional parameters for page rendering and navigation.

LANGUAGE: yaml
CODE:
---
description: Instructions for installing Docker Engine on Ubuntu
keywords: requirements, apt, installation, ubuntu, install, uninstall, upgrade, update
title: Install Docker Engine on Ubuntu
aliases:
- /ee/docker-ee/ubuntu/
- /engine/installation/linux/docker-ce/ubuntu/
- /engine/installation/linux/docker-ee/ubuntu/
- /engine/installation/linux/ubuntu/
- /engine/installation/linux/ubuntulinux/
- /engine/installation/ubuntulinux/
- /install/linux/docker-ce/ubuntu/
- /install/linux/docker-ee/ubuntu/
- /install/linux/ubuntu/
- /installation/ubuntulinux/
toc_max: 4
---

----------------------------------------

TITLE: Basic Volume Anchor Usage in Docker Compose
DESCRIPTION: Demonstrates how to create and reuse volume configurations using YAML anchors and aliases. The default-volume anchor is created from db-data configuration and reused for metrics volume.

LANGUAGE: yaml
CODE:
volumes:
  db-data: &default-volume
    driver: default
  metrics: *default-volume

----------------------------------------

TITLE: Docker Stack Deploy Command Usage
DESCRIPTION: Example of the docker stack deploy command that requires using the legacy Compose v3 file format. This command is not compatible with the latest Compose specification format.

LANGUAGE: bash
CODE:
docker stack deploy

----------------------------------------

TITLE: Removing all trust data from a repository
DESCRIPTION: Demonstrates using the Notary CLI to remove all trust data from a repository, including keys and signatures.

LANGUAGE: bash
CODE:
$ notary delete registry.example.com/admin/demo --remote

Deleting trust data for repository registry.example.com/admin/demo
Enter username: admin
Enter password: 
Successfully deleted local and remote trust data for repository registry.example.com/admin/demo

$ docker trust inspect --pretty registry.example.com/admin/demo

No signatures or cannot access registry.example.com/admin/demo

----------------------------------------

TITLE: Docker Buildx Build Command with GHA Cache
DESCRIPTION: Example of using docker buildx build command with GitHub Actions cache parameters for pushing and caching an image build.

LANGUAGE: console
CODE:
$ docker buildx build --push -t <registry>/<image> \
  --cache-to type=gha[,parameters...] \
  --cache-from type=gha[,parameters...] .

----------------------------------------

TITLE: Docker File and Command References
DESCRIPTION: Various Docker-specific file names and commands that require code formatting in documentation

LANGUAGE: markdown
CODE:
compose.yaml\ndocker compose\nK8s

----------------------------------------

TITLE: Tagging Docker Image for New Personal Repository
DESCRIPTION: Command to tag a Docker image with a new namespace, preparing it for transfer to a different personal repository.

LANGUAGE: console
CODE:
$ docker tag namespace1/docker101tutorial new_namespace/docker101tutorial

----------------------------------------

TITLE: Configuring Systemd Service for Docker Plugin
DESCRIPTION: Systemd service configuration file for a Docker plugin. This setup ensures the plugin starts before Docker and after the network, and requires its corresponding socket file.

LANGUAGE: systemd
CODE:
[Unit]
Description=Your plugin
Before=docker.service
After=network.target your-plugin.socket
Requires=your-plugin.socket docker.service

[Service]
ExecStart=/usr/lib/docker/your-plugin

[Install]
WantedBy=multi-user.target

----------------------------------------

TITLE: YAML Front Matter Configuration for Docker Context Import Documentation
DESCRIPTION: YAML front matter configuration block that defines metadata for the Docker context import command documentation page, including the data folder, file name, layout, and URL aliases.

LANGUAGE: yaml
CODE:
datafolder: engine-cli
datafile: docker_context_import
title: docker context import
layout: cli
aliases:
- /engine/reference/commandline/context_import/

----------------------------------------

TITLE: Displaying Docker Daemon Help Information
DESCRIPTION: Command to display help information for the Docker daemon, showing available configuration options.

LANGUAGE: console
CODE:
$ dockerd --help

----------------------------------------

TITLE: YAML Frontmatter Configuration for Docker Context Documentation
DESCRIPTION: YAML configuration block that defines metadata for the Docker context rm command documentation page, including layout settings and URL aliases.

LANGUAGE: yaml
CODE:
datafolder: engine-cli
datafile: docker_context_rm
title: docker context rm
layout: cli
aliases:
- /engine/reference/commandline/context_rm/

----------------------------------------

TITLE: Windows Feature Installation for BuildKit
DESCRIPTION: PowerShell command to enable required Windows features for BuildKit functionality

LANGUAGE: powershell
CODE:
> Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V, Containers -All

----------------------------------------

TITLE: Retrieving Docker Hub Authentication Token
DESCRIPTION: Commands to obtain an authentication token for Docker Hub, either anonymously or with user credentials. This token is used to check pull rate limits.

LANGUAGE: bash
CODE:
$ TOKEN=$(curl "https://auth.docker.io/token?service=registry.docker.io&scope=repository:ratelimitpreview/test:pull" | jq -r .token)

LANGUAGE: bash
CODE:
$ TOKEN=$(curl --user 'username:password' "https://auth.docker.io/token?service=registry.docker.io&scope=repository:ratelimitpreview/test:pull" | jq -r .token)

----------------------------------------

TITLE: Docker Container Management with Python SDK
DESCRIPTION: Simple example showing how to run a container with the Python SDK

LANGUAGE: python
CODE:
import docker
client = docker.from_env()
print(client.containers.run("alpine", ["echo", "hello", "world"]))

----------------------------------------

TITLE: Basic Docker Buildx Cache Configuration
DESCRIPTION: Demonstrates the basic syntax for configuring local cache storage with Docker Buildx build command, showing both cache import and export options.

LANGUAGE: console
CODE:
$ docker buildx build --push -t <registry>/<image> \
  --cache-to type=local,dest=path/to/local/dir[,parameters...] \
  --cache-from type=local,src=path/to/local/dir .

----------------------------------------

TITLE: Running Docker Hello World Container
DESCRIPTION: Example command demonstrating how to run the hello-world container in Docker.

LANGUAGE: bash
CODE:
$ docker run hello-world

----------------------------------------

TITLE: Image Index with Attestation Example
DESCRIPTION: Example of an image index containing both an AMD64 image descriptor and its corresponding attestation manifest descriptor.

LANGUAGE: json
CODE:
{
  "mediaType": "application/vnd.oci.image.index.v1+json",
  "schemaVersion": 2,
  "manifests": [
    {
      "mediaType": "application/vnd.oci.image.manifest.v1+json",
      "digest": "sha256:23678f31b3b3586c4fb318aecfe64a96a1f0916ba8faf9b2be2abee63fa9e827",
      "size": 1234,
      "platform": {
        "architecture": "amd64",
        "os": "linux"
      }
    },
    {
      "mediaType": "application/vnd.oci.image.manifest.v1+json",
      "digest": "sha256:02cb9aa7600e73fcf41ee9f0f19cc03122b2d8be43d41ce4b21335118f5dd943",
      "size": 1234,
      "annotations": {
        "vnd.docker.reference.digest": "sha256:23678f31b3b3586c4fb318aecfe64a96a1f0916ba8faf9b2be2abee63fa9e827",
        "vnd.docker.reference.type": "attestation-manifest"
      },
      "platform": {
         "architecture": "unknown",
         "os": "unknown"
      }
    }
  ]
}

----------------------------------------

TITLE: Docker Compose Configuration Comment
DESCRIPTION: HTML comment indicating that the page content is auto-generated from Docker's source code and providing guidance for suggesting changes.

LANGUAGE: html
CODE:
<!--
Sorry, but the contents of this page are automatically generated from
Docker's source code. If you want to suggest a change to the text that appears
here, you'll need to find the string by searching this repo:
https://github.com/docker/compose
-->

----------------------------------------

TITLE: HTML Comment for Docker CLI Source Code Reference
DESCRIPTION: HTML comment providing information about the automatic generation of the page from Docker's source code and instructions for suggesting changes through GitHub.

LANGUAGE: html
CODE:
<!--
This page is automatically generated from Docker's source code. If you want to
suggest a change to the text that appears here, open a ticket or pull request
in the source repository on GitHub:

https://github.com/docker/cli
-->

----------------------------------------

TITLE: Dockerfile for Bash Job Control Approach
DESCRIPTION: This Dockerfile sets up an Ubuntu-based container using bash job control for managing multiple processes. It copies the necessary process executables and the wrapper script that implements job control.

LANGUAGE: dockerfile
CODE:
# syntax=docker/dockerfile:1
FROM ubuntu:latest
COPY my_main_process my_main_process
COPY my_helper_process my_helper_process
COPY my_wrapper_script.sh my_wrapper_script.sh
CMD ./my_wrapper_script.sh

----------------------------------------

TITLE: Configuring Proxy Settings for Docker Daemon
DESCRIPTION: Demonstrates how to configure proxy settings for the Docker daemon using environment variables, configuration file, or command-line options.

LANGUAGE: console
CODE:
$ cat > /etc/docker/daemon.json
{ "host-gateway-ips": ["192.0.2.1", "2001:db8::1111"]}
$ sudo systemctl restart docker
$ docker run -it --add-host host.docker.internal:host-gateway \
  busybox ping host.docker.internal 
PING host.docker.internal (192.0.2.1): 56 data bytes
$ docker run -it --add-host host.docker.internal:host-gateway \
  busybox ping -6 host.docker.internal
PING host.docker.internal (2001:db8::1111): 56 data bytes

----------------------------------------

TITLE: Cloning Deno Sample Application with Git
DESCRIPTION: This command clones the docker-deno sample repository and changes the current directory to the cloned project.

LANGUAGE: console
CODE:
$ git clone https://github.com/dockersamples/docker-deno.git && cd docker-deno

----------------------------------------

TITLE: Removing Docker Desktop Residual Files on Mac
DESCRIPTION: Commands to remove remaining Docker Desktop files and directories after uninstallation on macOS. This ensures a complete cleanup of the application data.

LANGUAGE: bash
CODE:
$ rm -rf ~/Library/Group\ Containers/group.com.docker
$ rm -rf ~/.docker

----------------------------------------

TITLE: Removing Docker Desktop Residual Files on Mac
DESCRIPTION: Commands to remove remaining Docker Desktop files and directories after uninstallation on macOS. This ensures a complete cleanup of the application data.

LANGUAGE: bash
CODE:
$ rm -rf ~/Library/Group\ Containers/group.com.docker
$ rm -rf ~/.docker

----------------------------------------

TITLE: Listing VFS Layer Directories
DESCRIPTION: Commands to list and show size of VFS layer directories

LANGUAGE: console
CODE:
$ ls -l /var/lib/docker/vfs/dir/

total 0
drwxr-xr-x.  2 root root  19 Aug  2 18:19 3262dfbe53dac3e1ab7dcc8ad5d8c4d586a11d2ac3c4234892e34bff7f6b821e
drwxr-xr-x. 21 root root 224 Aug  2 18:23 6af21814449345f55d88c403e66564faad965d6afa84b294ae6e740c9ded2561
drwxr-xr-x. 21 root root 224 Aug  2 18:23 6d3be4585ba32f9f5cbff0110e8d07aea5f5b9fbb1439677c27e7dfee263171c
drwxr-xr-x. 21 root root 224 Aug  2 18:23 9ecd2d88ca177413ab89f987e1507325285a7418fc76d0dcb4bc021447ba2bab
drwxr-xr-x. 21 root root 224 Aug  2 18:23 a292ac6341a65bf3a5da7b7c251e19de1294bd2ec32828de621d41c7ad31f895
drwxr-xr-x. 21 root root 224 Aug  2 18:23 e92be7a4a4e3ccbb7dd87695bca1a0ea373d4f673f455491b1342b33ed91446b

LANGUAGE: console
CODE:
$ du -sh /var/lib/docker/vfs/dir/*

4.0K	/var/lib/docker/vfs/dir/3262dfbe53dac3e1ab7dcc8ad5d8c4d586a11d2ac3c4234892e34bff7f6b821e
125M	/var/lib/docker/vfs/dir/6af21814449345f55d88c403e66564faad965d6afa84b294ae6e740c9ded2561
104M	/var/lib/docker/vfs/dir/6d3be4585ba32f9f5cbff0110e8d07aea5f5b9fbb1439677c27e7dfee263171c
125M	/var/lib/docker/vfs/dir/9ecd2d88ca177413ab89f987e1507325285a7418fc76d0dcb4bc021447ba2bab
104M	/var/lib/docker/vfs/dir/a292ac6341a65bf3a5da7b7c251e19de1294bd2ec32828de621d41c7ad31f895
104M	/var/lib/docker/vfs/dir/e92be7a4a4e3ccbb7dd87695bca1a0ea373d4f673f455491b1342b33ed91446b

----------------------------------------

TITLE: Label Interpolation Working Example in Docker Compose
DESCRIPTION: Demonstrates the correct syntax for variable interpolation in labels using the equal sign notation.

LANGUAGE: yaml
CODE:
services:
  foo:
    labels:
      - "$VAR_INTERPOLATED_BY_COMPOSE=BAR"

----------------------------------------

TITLE: HTML Comment for Documentation Source
DESCRIPTION: HTML comment block indicating that the page is automatically generated and providing instructions for suggesting changes through GitHub.

LANGUAGE: html
CODE:
<!--
This page is automatically generated from Docker's source code. If you want to
suggest a change to the text that appears here, open a ticket or pull request
in the source repository on GitHub:

https://github.com/docker/cli
-->

----------------------------------------

TITLE: Verifying Docker Installation
DESCRIPTION: Command to verify successful Docker installation by running the hello-world container.

LANGUAGE: console
CODE:
$ sudo docker run hello-world

----------------------------------------

TITLE: YAML Front Matter Configuration for Docker Desktop Logs
DESCRIPTION: YAML configuration block that defines metadata for Docker Desktop CLI logs documentation page. Specifies the data folder, file name, page title and layout settings.

LANGUAGE: yaml
CODE:
datafolder: desktop-cli
datafile: docker_desktop_logs
title: docker desktop logs
layout: cli

----------------------------------------

TITLE: Updating containerd in Docker (Go)
DESCRIPTION: Update the version of containerd used in Docker to 1.0.3.

LANGUAGE: Go
CODE:
Containerd: update to 1.0.3 release [moby/moby#36749](https://github.com/moby/moby/pull/36749)

----------------------------------------

TITLE: Configuring Docker Build Settings in YAML
DESCRIPTION: Basic YAML configuration that sets build parameters and page metadata for a Docker project. Specifies that the build should never render and sets the page title to 'Manage' with a weight of 30.

LANGUAGE: yaml
CODE:
build:
  render: never
title: Manage
weight: 30

----------------------------------------

TITLE: YAML Front Matter Configuration for Docker Buildx Documentation
DESCRIPTION: YAML front matter block defining metadata for the Docker buildx use command documentation page, including the data folder, file name, title, layout and URL aliases.

LANGUAGE: yaml
CODE:
datafolder: buildx
datafile: docker_buildx_use
title: docker buildx use
layout: cli
aliases:
- /engine/reference/commandline/buildx_use/

----------------------------------------

TITLE: Basic Hello World Examples in Multiple Languages
DESCRIPTION: Demonstrates basic console output in JavaScript and Go using the tabs component

LANGUAGE: javascript
CODE:
console.log("hello world")

LANGUAGE: go
CODE:
fmt.Println("hello world")

----------------------------------------

TITLE: Formatting HTML in Documentation
DESCRIPTION: Demonstrates how to format HTML in documentation using the 'html' language code block. This example shows a simple HTML structure with a title.

LANGUAGE: html
CODE:
<!DOCTYPE html>
<html>
<head>
<title>Welcome to nginx!</title>
</head>
</html>

----------------------------------------

TITLE: Setting up GenAI stack with CPU on Linux
DESCRIPTION: Commands to clone the GenAI stack repository, start the Docker containers without GPU support, and configure the environment file.

LANGUAGE: bash
CODE:
git clone https://github.com/docker/genai-stack
docker compose --profile linux up -d
mv env.example .env
nano .env

----------------------------------------

TITLE: Extended Environment Configuration in Docker Compose
DESCRIPTION: Demonstrates how to extend an anchored configuration by adding additional values while maintaining the base configuration.

LANGUAGE: yaml
CODE:
services:
  first:
    image: my-image:latest
    environment: &env
      FOO: BAR
      ZOT: QUIX
  second:
    image: another-image:latest
    environment:
      <<: *env
      YET_ANOTHER: VARIABLE

----------------------------------------

TITLE: Update Git Remote URL Command
DESCRIPTION: Command to update the Git remote URL to point to a new GitHub repository. Requires replacing placeholder values for username and repository name.

LANGUAGE: bash
CODE:
git remote set-url origin https://github.com/your-username/your-repository.git

----------------------------------------

TITLE: Formatting Docker Service Task Output in Bash
DESCRIPTION: This example shows how to use the '--format' option to customize the output of the 'docker service ps' command, displaying only the node ID and name of each task.

LANGUAGE: bash
CODE:
docker service ps --format "{{.Node.ID}}: {{.Node.Hostname}}" redis

----------------------------------------

TITLE: Stopping and Removing Docker Compose Services
DESCRIPTION: Command to stop and remove all running services defined in the compose.yaml file.

LANGUAGE: console
CODE:
$ docker compose down

----------------------------------------

TITLE: Removing Privileged Helper Process in Docker Desktop for Mac
DESCRIPTION: Commands to check for, unload, and remove the privileged helper process (com.docker.vmnetd) in Docker Desktop for Mac.

LANGUAGE: bash
CODE:
$ ps aux | grep vmnetd
root             28739   0.0  0.0 34859128    228   ??  Ss    6:03PM   0:00.06 /Library/PrivilegedHelperTools/com.docker.vmnetd
user             32222   0.0  0.0 34122828    808 s000  R+   12:55PM   0:00.00 grep vmnetd

$ sudo launchctl unload -w /Library/LaunchDaemons/com.docker.vmnetd.plist
Password:

$ ps aux | grep vmnetd
user             32242   0.0  0.0 34122828    716 s000  R+   12:55PM   0:00.00 grep vmnetd

$ rm /Library/LaunchDaemons/com.docker.vmnetd.plist

$ rm /Library/PrivilegedHelperTools/com.docker.vmnetd

----------------------------------------

TITLE: Implementing Grid Shortcode in Go
DESCRIPTION: Shows how to implement the grid shortcode for displaying multiple cards in a responsive grid layout.

LANGUAGE: go
CODE:
{{< grid >}}

----------------------------------------

TITLE: Displaying Warning Toast in Docker Extension API (TypeScript)
DESCRIPTION: This code shows how to display a warning toast message using the Docker extension API. It uses the 'warning' method of the toast interface to present a temporary warning notification to the user.

LANGUAGE: typescript
CODE:
ddClient.desktopUI.toast.warning("message");

----------------------------------------

TITLE: Analyzing Local Project with Docker Scout
DESCRIPTION: Demonstrates using the 'fs://' prefix with 'docker scout quickview' to analyze local source code directly, without building it into a container image.

LANGUAGE: console
CODE:
$ docker scout quickview fs://.

----------------------------------------

TITLE: YAML Front Matter Configuration for Docker Node Remove Documentation
DESCRIPTION: YAML configuration block defining metadata for the Docker node rm command documentation page, including file paths, aliases, and layout information.

LANGUAGE: yaml
CODE:
datafolder: engine-cli
datafile: docker_node_rm
title: docker node rm
aliases:
- /edge/engine/reference/commandline/node_rm/
- /engine/reference/commandline/node_rm/
layout: cli

----------------------------------------

TITLE: Pushing Custom Image to Docker Hub
DESCRIPTION: Command to push the custom Nginx image to Docker Hub repository.

LANGUAGE: console
CODE:
$ docker push <YOUR-USERNAME>/nginx-custom

----------------------------------------

TITLE: Configuring Docker Scout Organization in CLI
DESCRIPTION: Command to configure the Docker organization for viewing exceptions in the CLI. This is required to view exceptions created for your organization.

LANGUAGE: bash
CODE:
docker scout configure organization <organization>

----------------------------------------

TITLE: HTTP Request Examples with Tab Groups
DESCRIPTION: Shows how to make HTTP requests in JavaScript and Go using grouped tabs for synchronized selection

LANGUAGE: javascript
CODE:
const res = await fetch("/users/1")

LANGUAGE: go
CODE:
resp, err := http.Get("/users/1")

----------------------------------------

TITLE: Formatting Ruby Code in Documentation
DESCRIPTION: Shows how to format Ruby code in documentation using the 'ruby' language code block. This example demonstrates a Ruby block for creating and starting a Docker service.

LANGUAGE: ruby
CODE:
docker_service 'default' do
  action [:create, :start]
end

----------------------------------------

TITLE: Certificate Directory Structure
DESCRIPTION: Example directory structures for Docker certificates

LANGUAGE: text
CODE:
/Users/<user>/.docker/certs.d/
└── <MyRegistry>:<Port>
   ├── ca.crt
   ├── client.cert
   └── client.key

LANGUAGE: text
CODE:
/etc/docker/certs.d/        <-- Certificate directory
└── localhost:5000          <-- Hostname:port
   ├── client.cert          <-- Client certificate
   ├── client.key           <-- Client key
   └── ca.crt               <-- Certificate authority that signed
                                the registry certificate

----------------------------------------

TITLE: ARG Instruction for Build-time Variables
DESCRIPTION: Demonstrates how to use the ARG instruction to define variables that users can pass at build-time.

LANGUAGE: dockerfile
CODE:
ARG <name>[=<default value>]

FROM busybox
ARG user1=someuser
ARG buildno=1

----------------------------------------

TITLE: Git Push Commands
DESCRIPTION: Series of Git commands to stage, commit, and push local changes to the GitHub repository.

LANGUAGE: console
CODE:
$ git add -A
$ git commit -m "my commit"
$ git push -u origin main

----------------------------------------

TITLE: Setting Environment Variables in Docker Containers
DESCRIPTION: This example shows how to set an environment variable inside a Docker container using the `-e` flag with the `docker run` command.

LANGUAGE: console
CODE:
$ docker run -e foo=bar postgres env

----------------------------------------

TITLE: Listing Project Files
DESCRIPTION: Commands to navigate to the project directory and list its contents.

LANGUAGE: bash
CODE:
$ cd c-plus-plus-docker/hello
$ ls

----------------------------------------

TITLE: Stopping Docker Service
DESCRIPTION: Command to stop the Docker daemon using systemctl

LANGUAGE: console
CODE:
$ sudo systemctl stop docker

----------------------------------------

TITLE: MDM Script for Docker Desktop Repair
DESCRIPTION: Administrative script to stop Docker services, remove old binaries, and install new ones for enterprise environments.

LANGUAGE: bash
CODE:
#!/bin/bash

# Stop the docker services
echo "Stopping Docker..."
sudo pkill -i docker

# Stop the vmnetd service
echo "Stopping com.docker.vmnetd service..."
sudo launchctl bootout system /Library/LaunchDaemons/com.docker.vmnetd.plist

# Stop the socket service
echo "Stopping com.docker.socket service..."
sudo launchctl bootout system /Library/LaunchDaemons/com.docker.socket.plist

# Remove vmnetd binary
echo "Removing com.docker.vmnetd binary..."
sudo rm -f /Library/PrivilegedHelperTools/com.docker.vmnetd

# Remove socket binary
echo "Removing com.docker.socket binary..."
sudo rm -f /Library/PrivilegedHelperTools/com.docker.socket

# Install new binaries
echo "Install new binaries..."
sudo cp /Applications/Docker.app/Contents/Library/LaunchServices/com.docker.vmnetd /Library/PrivilegedHelperTools/
sudo cp /Applications/Docker.app/Contents/MacOS/com.docker.socket /Library/PrivilegedHelperTools/

----------------------------------------

TITLE: Running Docker Container with Journald Logger
DESCRIPTION: Command to run a Docker container with Journald logging driver and custom logging options including labels and environment variables.

LANGUAGE: console
CODE:
$ docker run \
    --log-driver=journald \
    --log-opt labels=location \
    --log-opt env=TEST \
    --env "TEST=false" \
    --label location=west \
    your/application

----------------------------------------

TITLE: YAML Front Matter for Docker Context ls Documentation
DESCRIPTION: YAML configuration for the documentation page of the 'docker context ls' command. It specifies the data folder, file name, title, layout, and aliases for the page.

LANGUAGE: yaml
CODE:
---
datafolder: engine-cli
datafile: docker_context_ls
title: docker context ls
layout: cli
aliases:
- /engine/reference/commandline/context_ls/
---

----------------------------------------

TITLE: Displaying Success Toast in Docker Extension API (TypeScript)
DESCRIPTION: This snippet demonstrates how to display a success toast message using the Docker extension API. It utilizes the 'success' method of the toast interface to show a temporary notification to the user.

LANGUAGE: typescript
CODE:
ddClient.desktopUI.toast.success("message");

----------------------------------------

TITLE: Detailed Vulnerability Analysis of Local Project
DESCRIPTION: Shows how to use 'docker scout cves' with the 'fs://' prefix and additional flags to get detailed vulnerability information for local source code, filtered by severity.

LANGUAGE: console
CODE:
$ docker scout cves --details --only-severity high fs://.

----------------------------------------

TITLE: YAML Front Matter Configuration for Docker Volume Update Documentation
DESCRIPTION: YAML configuration metadata that defines the documentation page structure, including folder location, file name, aliases, title and layout settings.

LANGUAGE: yaml
CODE:
datafolder: engine-cli
datafile: docker_volume_update
aliases:
- /engine/reference/commandline/volume_update
title: docker volume update
layout: cli

----------------------------------------

TITLE: Displaying Pull Rate Limit Error in Docker CLI
DESCRIPTION: This snippet shows the error message displayed when a user has reached their pull rate limit. It indicates that the user needs to authenticate or upgrade their account to increase the limit.

LANGUAGE: text
CODE:
You have reached your pull rate limit. You may increase the limit by authenticating and upgrading: https://www.docker.com/increase-rate-limits

----------------------------------------

TITLE: Calculating Docker Scout Health Score Percentage
DESCRIPTION: Formula for calculating the percentage score based on points achieved versus total possible points in Docker Scout health evaluation system.

LANGUAGE: text
CODE:
Percentage = (Points / Total) * 100

----------------------------------------

TITLE: Docker Address Pool Configuration
DESCRIPTION: Example configurations for Docker's default address pools including IPv6 support

LANGUAGE: json
CODE:
{
  "default-address-pools": [
    { "base": "172.17.0.0/16", "size": 16 },
    { "base": "172.18.0.0/16", "size": 16 },
    { "base": "172.19.0.0/16", "size": 16 },
    { "base": "172.20.0.0/14", "size": 16 },
    { "base": "172.24.0.0/14", "size": 16 },
    { "base": "172.28.0.0/14", "size": 16 },
    { "base": "192.168.0.0/16", "size": 20 },
    { "base": "2001:db8::/56", "size": 64 }
  ]
}

----------------------------------------

TITLE: Azure AD Expression Mapping Configuration
DESCRIPTION: Expression mapping configuration for role assignment in Azure AD using SingleAppRoleAssignment function.

LANGUAGE: text
CODE:
Switch(SingleAppRoleAssignment([appRoleAssignments]), "member", "My Corp Administrator", "owner", "My Corp Editor", "editor")

----------------------------------------

TITLE: Python Dependencies Configuration
DESCRIPTION: Specifies the required Python package (Googletrans) in the requirements.txt file.

LANGUAGE: text
CODE:
# 05 language_translation
googletrans==4.0.0-rc1

----------------------------------------

TITLE: Localhost Interface Port Binding
DESCRIPTION: Demonstrates binding container port to localhost interface on specific and dynamic ports.

LANGUAGE: console
CODE:
$ docker run -d -p 127.0.0.1:80:5000 training/webapp python app.py

LANGUAGE: console
CODE:
$ docker run -d -p 127.0.0.1::5000 training/webapp python app.py

----------------------------------------

TITLE: Creating File Sync for Cloud Engine in Project Harmonia
DESCRIPTION: This command creates a file synchronization between the local environment and the cloud engine. It enables developers to work with local files while running applications in the cloud.

LANGUAGE: bash
CODE:
$ docker harmonia file-sync create --engine cloudengine $PWD

----------------------------------------

TITLE: Running a Container from Built Image
DESCRIPTION: Shows how to run a container using the image ID obtained from the build process.

LANGUAGE: console
CODE:
docker run sha256:9924dfd9350407b3df01d1a0e1033b1e543523ce7d5d5e2c83a724480ebe8f00

----------------------------------------

TITLE: Restarting a Docker Container
DESCRIPTION: Restart a stopped Docker container using its name.

LANGUAGE: bash
CODE:
$ docker restart wonderful_kalam

----------------------------------------

TITLE: Creating an Ubuntu Base Image Using Debootstrap and Docker Import
DESCRIPTION: This snippet demonstrates how to create an Ubuntu base image using debootstrap to create a minimal filesystem, then importing it into Docker using the docker import command.

LANGUAGE: bash
CODE:
$ sudo debootstrap focal focal > /dev/null
$ sudo tar -C focal -c . | docker import - focal

sha256:81ec9a55a92a5618161f68ae691d092bf14d700129093158297b3d01593f4ee3

$ docker run focal cat /etc/lsb-release

DISTRIB_ID=Ubuntu
DISTRIB_RELEASE=20.04
DISTRIB_CODENAME=focal
DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"

----------------------------------------

TITLE: Build Command with Secret and Cache Control - Console
DESCRIPTION: Example Docker build command demonstrating how to pass secrets and control cache invalidation using build arguments.

LANGUAGE: console
CODE:
$ TOKEN="tkn_pat123456" docker build --secret id=TOKEN --build-arg CACHEBUST=1 .

----------------------------------------

TITLE: Adding Chown Flag to ADD/COPY Commands in Dockerfile
DESCRIPTION: Adds a new '--chown' flag to ADD and COPY commands in Dockerfiles. This allows specifying the user and group ownership of files and directories copied into the image.

LANGUAGE: Dockerfile
CODE:
ADD --chown=<user>:<group> <src> <dest>
COPY --chown=<user>:<group> <src> <dest>

----------------------------------------

TITLE: Navigating to Images View in Docker Desktop
DESCRIPTION: Method to navigate to the Images tab in Docker Desktop

LANGUAGE: typescript
CODE:
await ddClient.desktopUI.navigate.viewImages()

----------------------------------------

TITLE: Running the Containerized RAG Application
DESCRIPTION: Docker Compose command to build and run the containerized RAG application. This command builds the Docker images and starts the services defined in the docker-compose.yaml file.

LANGUAGE: console
CODE:
$ docker compose up --build

----------------------------------------

TITLE: Deprecated Backend Communication Methods in TypeScript
DESCRIPTION: Shows various deprecated methods for communicating with the backend, including GET, POST, PUT, PATCH, DELETE, HEAD, and custom requests using window.ddClient.backend.

LANGUAGE: typescript
CODE:
window.ddClient.backend
  .get("/some/service")
  .then((value: any) => console.log(value));

window.ddClient.backend
  .post("/some/service", { ... })
  .then((value: any) => console.log(value));

window.ddClient.backend
  .put("/some/service", { ... })
  .then((value: any) => console.log(value));

window.ddClient.backend
  .patch("/some/service", { ... })
  .then((value: any) => console.log(value));

window.ddClient.backend
  .delete("/some/service")
  .then((value: any) => console.log(value));

window.ddClient.backend
  .head("/some/service")
  .then((value: any) => console.log(value));

window.ddClient.backend
  .request({ url: "/url", method: "GET", headers: { 'header-key': 'header-value' }, data: { ... }})
  .then((value: any) => console.log(value));

----------------------------------------

TITLE: Starting Traefik Container with Docker Provider
DESCRIPTION: Runs a Traefik container, exposing it on port 80 and configuring it to use the Docker provider.

LANGUAGE: console
CODE:
$ docker run -d --network=traefik-demo -p 80:80 -v /var/run/docker.sock:/var/run/docker.sock traefik:v3.1.2 --providers.docker

----------------------------------------

TITLE: Cloning the Docker Scout Demo Service Repository
DESCRIPTION: Clone the example project repository containing a vulnerable Node.js application.

LANGUAGE: bash
CODE:
$ git clone https://github.com/docker/scout-demo-service.git

----------------------------------------

TITLE: Setting environment variables in Dockerfile (recommended syntax)
DESCRIPTION: The recommended syntax for setting multiple environment variables in a single ENV instruction in Dockerfiles.

LANGUAGE: dockerfile
CODE:
ENV ONE="" TWO="" THREE="world"

----------------------------------------

TITLE: Port Mapping Configuration
DESCRIPTION: Example showing port mapping configuration for containers with IPv4 and IPv6 support

LANGUAGE: bash
CODE:
-p 80       # Same ephemeral port allocated for 0.0.0.0 and ::
-p 8080-8083:80  # Same port from range for both address families
-p 127.0.0.1::80 -p '[::1]::80'  # Same port for specific addresses

----------------------------------------

TITLE: YAML Frontmatter Configuration for Docker Secret Create Documentation
DESCRIPTION: YAML configuration header that defines metadata for the Docker secret create command documentation page, including the data folder, file name, title, and URL aliases.

LANGUAGE: yaml
CODE:
---
datafolder: engine-cli
datafile: docker_secret_create
title: docker secret create
aliases:
- /edge/engine/reference/commandline/secret_create/
- /engine/reference/commandline/secret_create/
layout: cli
---

----------------------------------------

TITLE: Basic Docker Compose Extension Example
DESCRIPTION: Demonstrates basic usage of extensions with custom fields and service configuration.

LANGUAGE: yaml
CODE:
x-custom:
  foo:
    - bar
    - zot

services:
  webapp:
    image: example/webapp
    x-foo: bar

----------------------------------------

TITLE: Publishing Ports for a Rust Docker Container
DESCRIPTION: Run a Rust Docker container with port mapping to expose the container's port 8000 to the host's port 3001.

LANGUAGE: bash
CODE:
$ docker run --publish 3001:8000 docker-rust-image

----------------------------------------

TITLE: Building a Docker Image with Basic Command
DESCRIPTION: Demonstrates the most basic docker build command, which builds an image from a Dockerfile in the current directory.

LANGUAGE: bash
CODE:
docker build .

----------------------------------------

TITLE: Creating Project Directory Commands
DESCRIPTION: Console commands to create and navigate to a new directory for the example project.

LANGUAGE: console
CODE:
$ mkdir hello-world-bin
$ cd hello-world-bin

----------------------------------------

TITLE: Creating Container with Image Mount in API v1.48
DESCRIPTION: POST /containers/create now supports Mount of type image for mounting an image inside a container.

LANGUAGE: json
CODE:
POST /containers/create
{
  "Image": "nginx",
  "HostConfig": {
    "Mounts": [
      {
        "Type": "image",
        "Source": "myapp:latest",
        "Target": "/app"
      }
    ]
  }
}

----------------------------------------

TITLE: Configuring GCP Logging Driver in daemon.json
DESCRIPTION: JSON configuration for setting gcplogs as the default logging driver in Docker's daemon.json file with custom metadata name.

LANGUAGE: json
CODE:
{
  "log-driver": "gcplogs",
  "log-opts": {
    "gcp-meta-name": "example-instance-12345"
  }
}

----------------------------------------

TITLE: Listing Docker Service Tasks in Bash
DESCRIPTION: The 'docker service ps' command lists the tasks of one or more services. It can be used with various options to filter and format the output.

LANGUAGE: bash
CODE:
docker service ps [OPTIONS] SERVICE [SERVICE...]

----------------------------------------

TITLE: Opening External URLs with Docker Extension Host API
DESCRIPTION: Demonstrates how to use the openExternal method to launch the system default browser with a specified URL. The URL must use either http or https protocol.

LANGUAGE: typescript
CODE:
ddClient.host.openExternal("https://docker.com");

----------------------------------------

TITLE: Inserting records into PostgreSQL database
DESCRIPTION: This console snippet demonstrates how to connect to a PostgreSQL database in a Docker container and insert a record.

LANGUAGE: console
CODE:
$ docker exec -it 39fdcf0aff7b psql -d example -U postgres
example=# INSERT INTO "Students" ("ID", "LastName", "FirstMidName", "EnrollmentDate") VALUES (DEFAULT, 'Whale', 'Moby', '2013-03-20');

----------------------------------------

TITLE: Running Docker Compose Commands - Console
DESCRIPTION: Console commands for building and running the Deno application using Docker Compose, including options for background execution.

LANGUAGE: console
CODE:
$ docker compose up --build

LANGUAGE: console
CODE:
$ docker compose up --build -d

LANGUAGE: console
CODE:
$ docker compose down

----------------------------------------

TITLE: Installing Docker Desktop RPM package
DESCRIPTION: Command to install the Docker Desktop RPM package using dnf.

LANGUAGE: bash
CODE:
$ sudo dnf install ./docker-desktop-x86_64-rhel.rpm

----------------------------------------

TITLE: Attaching VEX Document as Attestation
DESCRIPTION: Commands to build a Docker image with provenance and SBOM, then attach a VEX document as an attestation using Docker Scout CLI.

LANGUAGE: bash
CODE:
docker build --provenance=true --sbom=true --tag <IMAGE> --push .

docker scout attestation add \
  --file <cve-id>.vex.json \
  --predicate-type https://openvex.dev/ns/v0.2.0 \
  <IMAGE>

----------------------------------------

TITLE: Defining AuthZPlugin.AuthZRes JSON Request Schema
DESCRIPTION: JSON schema for the request sent to the authorization plugin's AuthZRes method. Contains user, request, and response details.

LANGUAGE: json
CODE:
{
    "User":              "The user identification",
    "UserAuthNMethod":   "The authentication method used",
    "RequestMethod":     "The HTTP method",
    "RequestURI":        "The HTTP request URI",
    "RequestBody":       "Byte array containing the raw HTTP request body",
    "RequestHeader":     "Byte array containing the raw HTTP request header as a map[string][]string",
    "ResponseBody":      "Byte array containing the raw HTTP response body",
    "ResponseHeader":    "Byte array containing the raw HTTP response header as a map[string][]string",
    "ResponseStatusCode":"Response status code"
}

----------------------------------------

TITLE: Updating Golang version in Docker (Go)
DESCRIPTION: Bump the version of Go used to build Docker to 1.9.5.

LANGUAGE: Go
CODE:
Bump Golang to 1.9.5 [moby/moby#36779](https://github.com/moby/moby/pull/36779) [docker/cli#986](https://github.com/docker/cli/pull/986)

----------------------------------------

TITLE: Incorrect WORKDIR Usage in Dockerfile
DESCRIPTION: Example showing incorrect usage of WORKDIR with relative path, which could break if the base image's working directory changes.

LANGUAGE: dockerfile
CODE:
FROM nginx AS web
WORKDIR usr/share/nginx/html
COPY public .

----------------------------------------

TITLE: Building Docker Image for NER Application
DESCRIPTION: Command to build a Docker image for the NER application using the Dockerfile in the current directory.

LANGUAGE: shell
CODE:
$ docker build -t basic-nlp .

----------------------------------------

TITLE: Updating Docker Swarm Node Attributes using CLI
DESCRIPTION: This command allows updating various attributes of a node in a Docker Swarm cluster. It can modify settings such as availability, labels, and role.

LANGUAGE: bash
CODE:
docker node update [OPTIONS] NODE

----------------------------------------

TITLE: Configuring YAML Front Matter for Docker Stack CLI Documentation
DESCRIPTION: This YAML snippet defines metadata for the Docker stack CLI documentation page. It specifies the data folder, file name, title, aliases for URL routing, and layout template to be used.

LANGUAGE: yaml
CODE:
---
datafolder: engine-cli
datafile: docker_stack
title: docker stack
aliases:
- /edge/engine/reference/commandline/stack/
- /engine/reference/commandline/stack/
layout: cli
---

----------------------------------------

TITLE: Running container with Red Hat subscription data
DESCRIPTION: Example command to run a container with Red Hat subscription data attached.

LANGUAGE: bash
CODE:
$ docker run --rm -it -v "/etc/pki/entitlement:/etc/pki/entitlement" -v "/etc/rhsm:/etc/rhsm-host" -v "/etc/yum.repos.d/redhat.repo:/etc/yum.repos.d/redhat.repo" registry.access.redhat.com/ubi9

----------------------------------------

TITLE: Correct FROM Instruction Without Redundant Platform Specification
DESCRIPTION: This snippet shows the correct way to write the FROM instruction without the unnecessary --platform argument. The default platform is already set to the target output platform.

LANGUAGE: dockerfile
CODE:
FROM alpine AS builder
RUN apk add --no-cache git

----------------------------------------

TITLE: Configuring PropagatedMount for Docker Metrics Plugin
DESCRIPTION: Set the PropagatedMount in the plugin's config.json to allow the plugin to receive updated mounts from Docker.

LANGUAGE: json
CODE:
"PropagatedMount": "/run/docker"

----------------------------------------

TITLE: Opening External URLs in Docker Extensions
DESCRIPTION: Shows how to open external URLs using the system default browser through the Docker Desktop host API. Only supports HTTP and HTTPS protocols.

LANGUAGE: typescript
CODE:
ddClient.host.openExternal("https://docker.com");

LANGUAGE: typescript
CODE:
window.ddClient.openExternal("https://docker.com");

----------------------------------------

TITLE: Setting Git Remote URL for GitHub Repository
DESCRIPTION: Command to update the Git remote URL to point to the newly created GitHub repository. Replace 'your-username' and 'your-repository' with actual values.

LANGUAGE: console
CODE:
$ git remote set-url origin https://github.com/your-username/your-repository.git

----------------------------------------

TITLE: Deploying Kubernetes Resources
DESCRIPTION: Shell commands for deploying the Kubernetes resources and verifying their status. Includes commands to apply the configuration, check deployment status, list services, and clean up resources.

LANGUAGE: shell
CODE:
$ kubectl apply -f docker-kubernetes.yml

LANGUAGE: shell
CODE:
$ kubectl get deployments

LANGUAGE: shell
CODE:
$ kubectl get services

LANGUAGE: shell
CODE:
$ kubectl delete -f docker-kubernetes.yml

----------------------------------------

TITLE: Using Remote Bake Definition in GitHub Actions YAML
DESCRIPTION: This YAML snippet shows how to use a remote Bake definition in a GitHub Actions workflow. It combines a remote definition with a local metadata file generated by the docker/metadata-action.

LANGUAGE: yaml
CODE:
      - name: Build
        uses: docker/bake-action@v6
        with:
          files: |
            ./docker-bake.hcl
            cwd://${{ steps.meta.outputs.bake-file }}
          targets: build

----------------------------------------

TITLE: Configuring Docker Scout Artifactory Agent
DESCRIPTION: Sample JSON configuration for the Docker Scout Artifactory agent. This configuration file specifies agent details, Docker organization information, and Artifactory connection settings.

LANGUAGE: json
CODE:
{
  "agent_id": "acme-prod-agent",
  "docker": {
    "organization_name": "acme",
    "username": "mobythewhale",
    "pat": "dckr_pat__dsaCAs_xL3kNyupAa7dwO1alwg"
  },
  "artifactory": [
    {
      "base_url": "https://acme.jfrog.io",
      "username": "acmeagent",
      "password": "hayKMvFKkFp42RAwKz2K",
      "image_filters": [
        {
          "repository": "dev-local",
          "images": ["internal/repo1", "internal/repo2"]
        },
        {
          "repository": "prod-local",
          "images": ["staging/repo1", "prod/repo1"]
        }
      ]
    }
  ]
}

----------------------------------------

TITLE: LogDriver Info Struct Definition in Go
DESCRIPTION: Golang struct definition for container information passed to logging drivers.

LANGUAGE: go
CODE:
type Info struct {
	Config              map[string]string
	ContainerID         string
	ContainerName       string
	ContainerEntrypoint string
	ContainerArgs       []string
	ContainerImageID    string
	ContainerImageName  string
	ContainerCreated    time.Time
	ContainerEnv        []string
	ContainerLabels     map[string]string
	LogPath             string
	DaemonName          string
}

----------------------------------------

TITLE: Apache httpd Dockerfile Log Configuration
DESCRIPTION: Shows how the official Apache httpd image configures the application to write output directly to stdout/stderr through process file descriptors.

LANGUAGE: dockerfile
CODE:
# Configure httpd to write logs to stdout/stderr
RUN sed -i \
    -e 's!^CustomLog.*!CustomLog /proc/self/fd/1 common!g' \
    -e 's!^ErrorLog.*!ErrorLog /proc/self/fd/2!g' \
    conf/httpd.conf

----------------------------------------

TITLE: Running the Bun Application with Docker Compose
DESCRIPTION: This command builds and runs the Bun application using Docker Compose. The --build flag ensures that the image is rebuilt if there are any changes.

LANGUAGE: console
CODE:
$ docker compose up --build

----------------------------------------

TITLE: Checking Docker Storage Driver
DESCRIPTION: This command displays Docker information, including the current storage driver in use.

LANGUAGE: bash
CODE:
$ docker info

<truncated output>
Storage Driver: aufs
 Root Dir: /var/lib/docker/aufs
 Backing Filesystem: extfs
 Dirs: 0
 Dirperm1 Supported: true
<truncated output>

----------------------------------------

TITLE: Creating registry.json File via Terminal (Mac/Linux)
DESCRIPTION: These terminal commands create a registry.json file at the specified path with the allowed organizations for Docker Desktop sign-in enforcement on Mac or Linux.

LANGUAGE: console
CODE:
$ sudo mkdir -p "/Library/Application Support/com.docker.docker"
$ echo '{"allowedOrgs":["myorg"]}' | sudo tee "/Library/Application Support/com.docker.docker/registry.json"

----------------------------------------

TITLE: Development Override Configuration
DESCRIPTION: Development-specific overrides including build context, volumes, ports, and debug settings

LANGUAGE: yaml
CODE:
services:
  web:
    build: .
    volumes:
      - '.:/code'
    ports:
      - 8883:80
    environment:
      DEBUG: 'true'

  db:
    command: '-d'
    ports:
     - 5432:5432

  cache:
    ports:
      - 6379:6379

----------------------------------------

TITLE: Forcing Docker Swarm Cluster Recovery
DESCRIPTION: Command to initialize a new swarm cluster when recovering from a loss of quorum, using the force-new-cluster flag.

LANGUAGE: bash
CODE:
docker swarm init --force-new-cluster --advertise-addr node01:2377

----------------------------------------

TITLE: Correct FROM/AS Lowercase Example
DESCRIPTION: Shows correct usage with both FROM and AS keywords in lowercase for consistent styling.

LANGUAGE: dockerfile
CODE:
from debian:latest as deb-builder

----------------------------------------

TITLE: Formatting Dockerfile in Documentation
DESCRIPTION: Demonstrates how to format a Dockerfile in documentation using the 'dockerfile' language code block. This example shows a Dockerfile for setting up a PostgreSQL server.

LANGUAGE: dockerfile
CODE:
# syntax=docker/dockerfile:1

FROM ubuntu

RUN apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8

RUN echo "deb http://apt.postgresql.org/pub/repos/apt/ precise-pgdg main" > /etc/apt/sources.list.d/pgdg.list

RUN apt-get update && apt-get install -y python-software-properties software-properties-common postgresql-9.3 postgresql-client-9.3 postgresql-contrib-9.3

# Note: The official Debian and Ubuntu images automatically ``apt-get clean``
# after each ``apt-get``

USER postgres

RUN    /etc/init.d/postgresql start &&\
    psql --command "CREATE USER docker WITH SUPERUSER PASSWORD 'docker';" &&\
    createdb -O docker docker

RUN echo "host all  all    0.0.0.0/0  md5" >> /etc/postgresql/9.3/main/pg_hba.conf

RUN echo "listen_addresses='*'" >> /etc/postgresql/9.3/main/postgresql.conf

EXPOSE 5432

VOLUME  ["/etc/postgresql", "/var/log/postgresql", "/var/lib/postgresql"]

CMD ["/usr/lib/postgresql/9.3/bin/postgres", "-D", "/var/lib/postgresql/9.3/main", "-c", "config_file=/etc/postgresql/9.3/main/postgresql.conf"]

----------------------------------------

TITLE: YAML Front Matter Configuration for Docker Volume Inspect Documentation
DESCRIPTION: YAML configuration block defining metadata for the Docker volume inspect command documentation page, including data folder location, file name, page title and URL aliases.

LANGUAGE: yaml
CODE:
datafolder: engine-cli
datafile: docker_volume_inspect
title: docker volume inspect
aliases:
- /edge/engine/reference/commandline/volume_inspect/
- /engine/reference/commandline/volume_inspect/
layout: cli

----------------------------------------

TITLE: Enabling Docker Scout Offline Mode
DESCRIPTION: Command to enable offline mode for Docker Scout analysis. When enabled, Docker Scout will not make outbound requests to external systems for package information.

LANGUAGE: bash
CODE:
$ export DOCKER_SCOUT_OFFLINE=true

----------------------------------------

TITLE: Docker Run Command with Logging Options
DESCRIPTION: Example of running a container with specific json-file logging options using the docker run command. Shows how to set maximum log file size.

LANGUAGE: console
CODE:
$ docker run \
      --log-driver json-file --log-opt max-size=10m \
      alpine echo hello world

----------------------------------------

TITLE: Cloning the Sample Application Repository
DESCRIPTION: Commands to clone the sample todo-list application repository and navigate to its directory.

LANGUAGE: console
CODE:
$ git clone https://github.com/dockersamples/todo-list-localstack-docker
$ cd todo-list-localstack-docker

----------------------------------------

TITLE: Formatting Docker Output as Table
DESCRIPTION: Shows how to format Docker image list output as a table with specific columns using the table function.

LANGUAGE: console
CODE:
$ docker image list --format "table {{.ID}}\t{{.Repository}}\t{{.Tag}}\t{{.Size}}"

----------------------------------------

TITLE: Configuring YAML Frontmatter for Docker Style Guide
DESCRIPTION: YAML configuration block that sets up the page metadata for a Docker style guide document. Specifies that the page should never be rendered, sets the title, and assigns a weight of 20 for ordering purposes.

LANGUAGE: yaml
CODE:
build:
  render: never
title: Style guide
weight: 20

----------------------------------------

TITLE: Displaying Docker Compose Stats Command Options in Markdown
DESCRIPTION: This snippet presents a markdown table listing the options available for the 'docker compose stats' command. It includes option names, types, default values, and detailed descriptions for each option.

LANGUAGE: markdown
CODE:
| Name          | Type     | Default | Description                                                                                                                                                                                                                                                                                                                                                                                                                  |
|:--------------|:---------|:--------|:---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| `-a`, `--all` | `bool`   |         | Show all containers (default shows just running)                                                                                                                                                                                                                                                                                                                                                                             |
| `--dry-run`   | `bool`   |         | Execute command in dry run mode                                                                                                                                                                                                                                                                                                                                                                                              |
| `--format`    | `string` |         | Format output using a custom template:<br>'table':            Print output in table format with column headers (default)<br>'table TEMPLATE':   Print output in table format using the given Go template<br>'json':             Print in JSON format<br>'TEMPLATE':         Print output using the given Go template.<br>Refer to https://docs.docker.com/engine/cli/formatting/ for more information about formatting output with templates |
| `--no-stream` | `bool`   |         | Disable streaming stats and only pull the first result                                                                                                                                                                                                                                                                                                                                                                       |
| `--no-trunc`  | `bool`   |         | Do not truncate output                                                                                                                                                                                                                                                                                                                                                                                       |

----------------------------------------

TITLE: Installing GNOME extensions on RHEL 9
DESCRIPTION: Commands to install and enable AppIndicator and KStatusNotifierItem GNOME extensions on RHEL 9.

LANGUAGE: bash
CODE:
$ sudo dnf install gnome-shell-extension-appindicator
$ sudo gnome-extensions enable appindicatorsupport@rgcjonas.gmail.com

----------------------------------------

TITLE: Enabling BuildKit Container Logs in GitHub Actions
DESCRIPTION: Configures the Setup Buildx Action to display BuildKit container logs by setting the '--debug' buildkitd flag.

LANGUAGE: yaml
CODE:
name: ci

on:
  push:

jobs:
  buildx:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug
      
      - name: Build
        uses: docker/build-push-action@v6

----------------------------------------

TITLE: Partial Override with YAML Merge in Docker Compose
DESCRIPTION: Illustrates how to use YAML merge type to partially override volume configurations while maintaining common settings.

LANGUAGE: yaml
CODE:
services:
  backend:
    image: example/database
    volumes:
      - db-data
      - metrics
volumes:
  db-data: &default-volume
    driver: default
    name: "data"
  metrics:
    <<: *default-volume
    name: "metrics"

----------------------------------------

TITLE: Performing GET Request with Docker Extension HttpService in TypeScript
DESCRIPTION: Demonstrates how to perform an HTTP GET request to a backend service using the Docker extension API. This method returns a Promise that resolves to the response data.

LANGUAGE: typescript
CODE:
ddClient.extension.vm.service
 .get("/some/service")
 .then((value: any) => console.log(value)

----------------------------------------

TITLE: YAML Front Matter Configuration for Docker CLI Documentation
DESCRIPTION: YAML front matter configuration block that defines metadata for the Docker container rename command documentation page, including data folder location, file name, title, and URL aliases.

LANGUAGE: yaml
CODE:
datafolder: engine-cli
datafile: docker_container_rename
title: docker container rename
aliases:
- /edge/engine/reference/commandline/container_rename/
- /engine/reference/commandline/container_rename/
- /engine/reference/commandline/rename/
layout: cli

----------------------------------------

TITLE: Configuring Dockerfile for Binary Integration
DESCRIPTION: Dockerfile commands to copy and set permissions for platform-specific binaries

LANGUAGE: dockerfile
CODE:
# Copy the binaries into the right folder
COPY --chmod=0755 binaries/windows/hello.cmd /windows/hello.cmd
COPY --chmod=0755 binaries/unix/hello.sh /linux/hello.sh
COPY --chmod=0755 binaries/unix/hello.sh /darwin/hello.sh

----------------------------------------

TITLE: Organization-Specific Policy Evaluation in Docker Scout
DESCRIPTION: Shows how to evaluate policies against an image for a specific Docker organization using the --org flag.

LANGUAGE: console
CODE:
$ docker scout policy dockerscoutpolicy/customers-api-service:0.0.1 --org dockerscoutpolicy

----------------------------------------

TITLE: Formatting YAML in Documentation
DESCRIPTION: Shows how to format YAML in documentation using the 'yaml' language code block. This example demonstrates a YAML configuration for a Docker service with environment variables and volume mounts.

LANGUAGE: yaml
CODE:
authorizedkeys:
  image: dockercloud/authorizedkeys
  deployment_strategy: every_node
  autodestroy: always
  environment:
    - AUTHORIZED_KEYS=ssh-rsa AAAAB3Nsomelongsshkeystringhereu9UzQbVKy9o00NqXa5jkmZ9Yd0BJBjFmb3WwUR8sJWZVTPFL
  volumes:
    /root:/user:rw

----------------------------------------

TITLE: Implementing Docker Build and Scout CVE Scanning in Azure Pipeline
DESCRIPTION: This YAML snippet defines a stage for building a Docker image and running Docker Scout CVE scanning. It includes steps for building the image, installing the Docker Scout CLI, logging into Docker Hub, and running a CVE report with specific severity filters.

LANGUAGE: yaml
CODE:
stages:
  - stage: Build
    displayName: Build image
    jobs:
      - job: Build
        displayName: Build
        pool:
          vmImage: ubuntu-latest
        steps:
          - task: Docker@2
            displayName: Build an image
            inputs:
              command: build
              dockerfile: "$(Build.SourcesDirectory)/Dockerfile"
              repository: $(image)
              tags: |
                $(tag)
          - task: CmdLine@2
            displayName: Find CVEs on image
            inputs:
              script: |
                # Install the Docker Scout CLI
                curl -sSfL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh | sh -s --
                # Login to Docker Hub required for Docker Scout CLI
                echo $(DOCKER_HUB_PAT) | docker login -u $(DOCKER_HUB_USER) --password-stdin
                # Get a CVE report for the built image and fail the pipeline when critical or high CVEs are detected
                docker scout cves $(image):$(tag) --exit-code --only-severity critical,high

----------------------------------------

TITLE: Environment Variables Reuse in Docker Compose
DESCRIPTION: Shows how to share environment variable configurations between multiple services using anchors and aliases.

LANGUAGE: yaml
CODE:
services:
  first:
    image: my-image:latest
    environment: &env
      - CONFIG_KEY
      - EXAMPLE_KEY
      - DEMO_VAR
  second:
    image: another-image:latest
    environment: *env

----------------------------------------

TITLE: Using Compose Bridge as Kubectl Plugin
DESCRIPTION: Example command syntax for using compose-bridge as a kubectl plugin after installation.

LANGUAGE: console
CODE:
$ kubectl compose-bridge [command]

----------------------------------------

TITLE: Usage of docker dev create Command
DESCRIPTION: Shows how to use the docker dev create command to create a new dev environment. It requires a REPOSITORY_URL and has options for detached mode and opening the IDE after creation.

LANGUAGE: bash
CODE:
docker dev create [OPTIONS] REPOSITORY_URL

----------------------------------------

TITLE: Formatting JSON in Documentation
DESCRIPTION: Illustrates how to format JSON in documentation using the 'json' language code block. This example shows a JSON configuration for a server with TLS settings.

LANGUAGE: json
CODE:
"server": {
  "http_addr": ":4443",
  "tls_key_file": "./fixtures/notary-server.key",
  "tls_cert_file": "./fixtures/notary-server.crt"
}

----------------------------------------

TITLE: Correct FROM/AS Uppercase Example
DESCRIPTION: Shows correct usage with both FROM and AS keywords in uppercase for consistent styling.

LANGUAGE: dockerfile
CODE:
FROM debian:latest AS deb-builder

----------------------------------------

TITLE: Using Println in Docker Format
DESCRIPTION: Demonstrates how to print network IP addresses on separate lines using println function.

LANGUAGE: console
CODE:
$ docker inspect --format='{{range .NetworkSettings.Networks}}{{println .IPAddress}}{{end}}' container

----------------------------------------

TITLE: Configuring Dockerfile for Docker Desktop Extension
DESCRIPTION: Dockerfile configuration that specifies extension metadata, labels, and includes necessary frontend files.

LANGUAGE: dockerfile
CODE:
# syntax=docker/dockerfile:1
FROM scratch

LABEL org.opencontainers.image.title="Minimal frontend" \
    org.opencontainers.image.description="A sample extension to show how easy it's to get started with Desktop Extensions." \
    org.opencontainers.image.vendor="Awesome Inc." \
    com.docker.desktop.extension.api.version="0.3.3" \
    com.docker.desktop.extension.icon="https://www.docker.com/wp-content/uploads/2022/03/Moby-logo.png"

COPY ui ./ui
COPY metadata.json .

----------------------------------------

TITLE: Checking Docker Version Information
DESCRIPTION: Example of using the docker version command to check API version compatibility between client and server

LANGUAGE: console
CODE:
$ docker version
Client: Docker Engine - Community
 Version:           28.0.0
 API version:       1.48
 Go version:        go1.23.6
 Git commit:        f9ced58
 Built:             Wed Feb 19 22:11:04 2025
 OS/Arch:           linux/amd64
 Context:           default

Server: Docker Engine - Community
 Engine:
  Version:          28.0.0
  API version:      1.48 (minimum version 1.24)
  Go version:       go1.23.6
  Git commit:       af898ab
  Built:            Wed Feb 19 22:11:04 2025
  OS/Arch:          linux/amd64

----------------------------------------

TITLE: Executing POST Request with Docker Extension HttpService in TypeScript
DESCRIPTION: Shows how to perform an HTTP POST request to a backend service using the Docker extension API. This method accepts a URL and data payload, returning a Promise that resolves to the response data.

LANGUAGE: typescript
CODE:
ddClient.extension.vm.service
 .post("/some/service", { ... })
 .then((value: any) => console.log(value));

----------------------------------------

TITLE: Secondary Container User Namespace Mapping
DESCRIPTION: Demonstrates unique user ID mapping range for a second container instance

LANGUAGE: console
CODE:
$ docker run -it --rm --name=second alpine
/ # cat /proc/self/uid_map
         0     165536      65536

----------------------------------------

TITLE: Invalid Usage of ARG in FROM Statement (Dockerfile)
DESCRIPTION: This example demonstrates an incorrect way of using an ARG instruction without a default value in a FROM statement. This approach may lead to an invalid build if the ARG is not provided.

LANGUAGE: dockerfile
CODE:
ARG TAG
FROM busybox:${TAG}

----------------------------------------

TITLE: Docker Scout Attestation Command Structure
DESCRIPTION: Markdown table showing the subcommands available for Docker Scout attestation functionality, including the 'add' command for adding attestations to images.

LANGUAGE: markdown
CODE:
| Name                              | Description              |
|:----------------------------------|:-------------------------|
| [`add`](scout_attestation_add.md) | Add attestation to image |

----------------------------------------

TITLE: YAML Front Matter Configuration for Docker Scout Documentation
DESCRIPTION: YAML configuration block that defines metadata for the documentation page, including folder paths, file names, aliases, and layout settings.

LANGUAGE: yaml
CODE:
datafolder: scout-cli
datafile: docker_scout_sbom
aliases:
- /engine/reference/commandline/scout_sbom
title: docker scout sbom
layout: cli

----------------------------------------

TITLE: Pulling a Docker Image using SDKs and API
DESCRIPTION: This example demonstrates how to pull a Docker image using the Docker Go SDK, Python SDK, and HTTP API. It pulls the Alpine image and prints the progress or the image ID.

LANGUAGE: Go
CODE:
package main

import (
	"context"
	"io"
	"os"

	"github.com/docker/docker/api/types/image"
	"github.com/docker/docker/client"
)

func main() {
	ctx := context.Background()
	cli, err := client.NewClientWithOpts(client.FromEnv, client.WithAPIVersionNegotiation())
	if err != nil {
		panic(err)
	}
	defer cli.Close()

	out, err := cli.ImagePull(ctx, "alpine", image.PullOptions{})
	if err != nil {
		panic(err)
	}

	defer out.Close()

	io.Copy(os.Stdout, out)
}

LANGUAGE: Python
CODE:
import docker
client = docker.from_env()
image = client.images.pull("alpine")
print(image.id)

LANGUAGE: HTTP
CODE:
$ curl --unix-socket /var/run/docker.sock \
  -X POST "http://localhost/v{{% param "latest_engine_api_version" %}}/images/create?fromImage=alpine"
{"status":"Pulling from library/alpine","id":"3.1"}
{"status":"Pulling fs layer","progressDetail":{},"id":"8f13703509f7"}
{"status":"Downloading","progressDetail":{"current":32768,"total":2244027},"progress":"[\u003e                                                  ] 32.77 kB/2.244 MB","id":"8f13703509f7"}
...

----------------------------------------

TITLE: Activating Group Changes
DESCRIPTION: Command to activate group membership changes without logging out.

LANGUAGE: bash
CODE:
newgrp docker

----------------------------------------

TITLE: Deprecated Docker Object Access Methods
DESCRIPTION: Legacy methods for accessing Docker containers and images through the window.ddClient interface. These methods are deprecated and will be removed in future versions.

LANGUAGE: typescript
CODE:
const containers = await window.ddClient.listContainers();

const images = await window.ddClient.listImages();

----------------------------------------

TITLE: Usage of docker dev logs Command
DESCRIPTION: Demonstrates how to use the docker dev logs command to trace logs from a specific dev environment.

LANGUAGE: bash
CODE:
docker dev logs [OPTIONS] DEV_ENV_NAME

----------------------------------------

TITLE: Formatting INI Configuration in Documentation
DESCRIPTION: Illustrates how to format INI configuration files in documentation using the 'ini' language code block. This example shows a supervisord configuration with an SSHD program.

LANGUAGE: ini
CODE:
[supervisord]
nodaemon=true

[program:sshd]
command=/usr/sbin/sshd -D

----------------------------------------

TITLE: Demonstrating Incorrect Multiple ENTRYPOINT Instructions in Dockerfile
DESCRIPTION: This example shows an incorrect usage of multiple ENTRYPOINT instructions in a Dockerfile. Only the last ENTRYPOINT instruction ('Hello, Sweden!') will be executed, overriding the previous one.

LANGUAGE: dockerfile
CODE:
FROM alpine
ENTRYPOINT ["echo", "Hello, Norway!"]
ENTRYPOINT ["echo", "Hello, Sweden!"]
# Only "Hello, Sweden!" will be printed

----------------------------------------

TITLE: Creating File in Alpine Container
DESCRIPTION: Demonstrates file creation in an Alpine container to show container filesystem isolation.

LANGUAGE: console
CODE:
$ docker run --rm alpine touch greeting.txt

----------------------------------------

TITLE: Basic HCL Bake Configuration with Variable Override
DESCRIPTION: Demonstrates a basic Docker Bake configuration file with a variable definition and target configuration that can be overridden.

LANGUAGE: hcl
CODE:
variable "TAG" {
  default = "foo"
}

target "default" {
  tags = ["username/my-app:${TAG}"]
}

----------------------------------------

TITLE: Implementing Sentiment Analysis Function
DESCRIPTION: Python function to perform sentiment analysis on input text using NLTK's SentimentIntensityAnalyzer.

LANGUAGE: python
CODE:
def perform_semantic_analysis(text):
    sid = SentimentIntensityAnalyzer()
    sentiment_score = sid.polarity_scores(text)

    if sentiment_score['compound'] >= 0.05:
        return "Positive"
    elif sentiment_score['compound'] <= -0.05:
        return "Negative"
    else:
        return "Neutral"

----------------------------------------

TITLE: Executing DELETE Request with Docker Extension HttpService in TypeScript
DESCRIPTION: Shows how to perform an HTTP DELETE request to a backend service using the Docker extension API. This method takes a URL and returns a Promise that resolves to the response data.

LANGUAGE: typescript
CODE:
ddClient.extension.vm.service
 .delete("/some/service")
 .then((value: any) => console.log(value));

----------------------------------------

TITLE: Viewing Docker Service Tasks Status
DESCRIPTION: Shows how to check which nodes are running service tasks and their current states using docker service ps command.

LANGUAGE: console
CODE:
[manager1]$ docker service ps helloworld

NAME                                    IMAGE   NODE     DESIRED STATE  CURRENT STATE           ERROR               PORTS
helloworld.1.8p1vev3fq5zm0mi8g0as41w35  alpine  worker2  Running        Running 3 minutes

----------------------------------------

TITLE: Docker Compose Pause Command Options Table
DESCRIPTION: Markdown table showing the available options for the docker compose pause command, including the --dry-run flag which enables dry run mode execution.

LANGUAGE: markdown
CODE:
| Name        | Type   | Default | Description                     |
|:------------|:-------|:--------|:--------------------------------|
|`--dry-run` | `bool` |         | Execute command in dry run mode |

----------------------------------------

TITLE: Command Options Table
DESCRIPTION: Markdown table listing all available options for the docker compose up command, including option names, types, default values and descriptions.

LANGUAGE: markdown
CODE:
| Name                           | Type          | Default  | Description                                                                                                                                         |
|:-------------------------------|:--------------|:---------|:----------------------------------------------------------------------------------------------------------------------------------------------------|
| `--abort-on-container-exit`    | `bool`        |          | Stops all containers if any container was stopped. Incompatible with -d                                                                             |
| `--abort-on-container-failure` | `bool`        |          | Stops all containers if any container exited with failure. Incompatible with -d                                                                     |
| `--always-recreate-deps`       | `bool`        |          | Recreate dependent containers. Incompatible with --no-recreate.                                                                                     |
| `--attach`                     | `stringArray` |          | Restrict attaching to the specified services. Incompatible with --attach-dependencies.                                                              |
| `--attach-dependencies`        | `bool`        |          | Automatically attach to log output of dependent services                                                                                            |
| `--build`                      | `bool`        |          | Build images before starting containers                                                                                                             |
| `-d`, `--detach`               | `bool`        |          | Detached mode: Run containers in the background                                                                                                     |
| `--dry-run`                    | `bool`        |          | Execute command in dry run mode                                                                                                                     |
| `--exit-code-from`             | `string`      |          | Return the exit code of the selected service container. Implies --abort-on-container-exit                                                           |
| `--force-recreate`             | `bool`        |          | Recreate containers even if their configuration and image haven't changed                                                                           |
| `--menu`                       | `bool`        |          | Enable interactive shortcuts when running attached. Incompatible with --detach. Can also be enable/disable by setting COMPOSE_MENU environment var. |
| `--no-attach`                  | `stringArray` |          | Do not attach (stream logs) to the specified services                                                                                               |
| `--no-build`                   | `bool`        |          | Don't build an image, even if it's policy                                                                                                           |
| `--no-color`                   | `bool`        |          | Produce monochrome output                                                                                                                           |
| `--no-deps`                    | `bool`        |          | Don't start linked services                                                                                                                         |
| `--no-log-prefix`              | `bool`        |          | Don't print prefix in logs                                                                                                                          |
| `--no-recreate`                | `bool`        |          | If containers already exist, don't recreate them. Incompatible with --force-recreate.                                                               |
| `--no-start`                   | `bool`        |          | Don't start the services after creating them                                                                                                        |
| `--pull`                       | `string`      | `policy` | Pull image before running ("always"|"missing"|"never")                                                                                            |
| `--quiet-pull`                 | `bool`        |          | Pull without printing progress information                                                                                                          |
| `--remove-orphans`             | `bool`        |          | Remove containers for services not defined in the Compose file                                                                                      |
| `-V`, `--renew-anon-volumes`   | `bool`        |          | Recreate anonymous volumes instead of retrieving data from the previous containers                                                                  |
| `--scale`                      | `stringArray` |          | Scale SERVICE to NUM instances. Overrides the `scale` setting in the Compose file if present.                                                       |
| `-t`, `--timeout`              | `int`         | `0`      | Use this timeout in seconds for container shutdown when attached or when containers are already running                                             |
| `--timestamps`                 | `bool`        |          | Show timestamps                                                                                                                                     |
| `--wait`                       | `bool`        |          | Wait for services to be running|healthy. Implies detached mode.                                                                                    |
| `--wait-timeout`               | `int`         | `0`      | Maximum duration in seconds to wait for the project to be running|healthy                                                                          |
| `-w`, `--watch`                | `bool`        |          | Watch source code and rebuild/refresh containers when files are updated.                                                                            |
| `-y`, `--y`                    | `bool`        |          | Assume "yes" as answer to all prompts and run non-interactively                                                                                     |

----------------------------------------

TITLE: Setting Default Shared Memory Size
DESCRIPTION: Adds a new daemon option --default-shm-size to set the default shared memory size for containers.

LANGUAGE: Markdown
CODE:
+ Add daemon option `--default-shm-size` [#29692](https://github.com/docker/docker/pull/29692)

----------------------------------------

TITLE: Setting Up Docker Repository on CentOS
DESCRIPTION: Commands to install repository management tools and add the official Docker repository to the system.

LANGUAGE: bash
CODE:
sudo dnf -y install dnf-plugins-core
sudo dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo

----------------------------------------

TITLE: Streaming Command Output from Backend Container in TypeScript
DESCRIPTION: Shows how to stream the output of a command (ls -l) executed in the backend container, handling stdout, stderr, errors, and close events.

LANGUAGE: typescript
CODE:
await ddClient.extension.vm.cli.exec("ls", ["-l"], {
  stream: {
    onOutput(data) {
      if (data.stdout) {
        console.error(data.stdout);
      } else {
        console.log(data.stderr);
      }
    },
    onError(error) {
      console.error(error);
    },
    onClose(exitCode) {
      console.log("onClose with exit code " + exitCode);
    },
  },
});

----------------------------------------

TITLE: Check Docker Memory Support
DESCRIPTION: Example output from docker info command showing lack of swap limit support

LANGUAGE: console
CODE:
WARNING: No swap limit support

----------------------------------------

TITLE: Starting Local Development Server for Docker Docs
DESCRIPTION: Commands to check out a branch and start the local development server using Docker Compose. This allows for local preview and automatic rebuilding of the site when changes are made.

LANGUAGE: console
CODE:
$ git checkout -b <branch>
$ docker compose watch

----------------------------------------

TITLE: Output Example for WorkdirRelativePath Rule
DESCRIPTION: Example output message when the WorkdirRelativePath rule is violated.

LANGUAGE: text
CODE:
Relative workdir 'app/src' can have unexpected results if the base image changes

----------------------------------------

TITLE: Modifying Backend Greeting in Node.js
DESCRIPTION: Update the backend API to return a random greeting from a predefined list.

LANGUAGE: javascript
CODE:
const GREETINGS = [
    "Whalecome!",
    "All hands on deck!",
    "Charting the course ahead!",
];

module.exports = async (req, res) => {
    res.send({
        greeting: GREETINGS[ Math.floor( Math.random() * GREETINGS.length )],
    });
};

----------------------------------------

TITLE: Adding Annotations with build-push-action in GitHub Actions
DESCRIPTION: This YAML configuration sets up a GitHub Actions workflow to build and push a Docker image with OCI annotations. It uses docker/metadata-action to extract metadata and docker/build-push-action to build and push the image with the generated annotations.

LANGUAGE: yaml
CODE:
name: ci

on:
  push:

env:
  IMAGE_NAME: user/app

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          tags: ${{ steps.meta.outputs.tags }}
          annotations: ${{ steps.meta.outputs.annotations }}
          push: true

----------------------------------------

TITLE: Exporting and Importing Docker Contexts
DESCRIPTION: Shows how to export and import Docker contexts between different hosts.

LANGUAGE: console
CODE:
$ docker context export docker-test
Written file "docker-test.dockercontext"

$ docker context import docker-test docker-test.dockercontext
docker-test
Successfully imported context "docker-test"

----------------------------------------

TITLE: Defining RawExecResult Interface in TypeScript
DESCRIPTION: TypeScript interface definition for RawExecResult that captures the result of executed Docker commands. Contains properties for the command string, execution status, signal information, exit code, and standard output/error streams.

LANGUAGE: typescript
CODE:
interface RawExecResult {
  readonly cmd?: string;
  readonly killed?: boolean;
  readonly signal?: string;
  readonly code?: number;
  readonly stdout: string;
  readonly stderr: string;
}

----------------------------------------

TITLE: Dockerignore Configuration
DESCRIPTION: Basic .dockerignore file configuration to exclude node_modules directory from the build context.

LANGUAGE: plaintext
CODE:
node_modules

----------------------------------------

TITLE: Executing Docker Commands in TypeScript
DESCRIPTION: Shows how to directly execute Docker binary commands using the execDockerCmd method. This method is deprecated and will be replaced by the exec method.

LANGUAGE: typescript
CODE:
const output = await window.ddClient.execDockerCmd("info");

----------------------------------------

TITLE: Running a Command Without Starting Linked Containers in Docker Compose
DESCRIPTION: Shows how to run a command for a service without starting linked containers using the --no-deps flag.

LANGUAGE: console
CODE:
$ docker compose run --no-deps web python manage.py shell

----------------------------------------

TITLE: Modifying MobyLinux.ps1 to reinstate DockerNAT
DESCRIPTION: Temporary workaround to reinstate DockerNAT by modifying the MobyLinux.ps1 file

LANGUAGE: PowerShell
CODE:
$SwitchName = "DockerNAT"

----------------------------------------

TITLE: Executing Commands in Docker Container
DESCRIPTION: Example of executing a command inside a Docker container using the execInContainer method. This method is deprecated and will be removed in a future version.

LANGUAGE: typescript
CODE:
const output = await window.ddClient.backend.execInContainer(container, cmd);

console.log(output);

----------------------------------------

TITLE: Configuring Docker Remote Access via Systemd Unit File
DESCRIPTION: Systemd unit file configuration to enable Docker daemon to listen on both Unix socket and TCP port 2375. This allows remote access while maintaining local socket connectivity.

LANGUAGE: systemd
CODE:
[Service]
ExecStart=
ExecStart=/usr/bin/dockerd -H fd:// -H tcp://127.0.0.1:2375

----------------------------------------

TITLE: Connecting to NetCat Container from Host
DESCRIPTION: Command to connect to the netcat container from the host machine.

LANGUAGE: console
CODE:
$ nc localhost 8000

----------------------------------------

TITLE: Group Formatting Error Message
DESCRIPTION: Error message displayed when Docker group names are not properly formatted according to the required '<organization name>:<team name>' pattern.

LANGUAGE: text
CODE:
Some of the groups assigned to the user are not formatted as '<organization name>:<team name>'. Directory groups will be ignored and user will be provisioned into the default organization and team.

----------------------------------------

TITLE: Using Docker Build with a Non-Default Builder
DESCRIPTION: These commands demonstrate how to use the docker build command with a non-default builder. You can either specify the builder explicitly using the --builder flag or the BUILDX_BUILDER environment variable, or configure Buildx as the default client.

LANGUAGE: bash
CODE:
$ BUILDX_BUILDER=my_builder docker build .
$ docker build --builder my_builder .
$ docker buildx install

----------------------------------------

TITLE: Configuring IPTables for Docker Swarm Security
DESCRIPTION: Sets up an iptables rule to only accept encrypted packets on the Data Path Port (4789), enhancing security by dropping unencrypted VXLAN traffic. This is recommended when running Swarm on untrusted networks.

LANGUAGE: bash
CODE:
iptables -I INPUT -m udp --dport 4789 -m policy --dir in --pol none -j DROP

----------------------------------------

TITLE: Git Commands for Initial Push
DESCRIPTION: Series of Git commands to stage all changes, create a commit, and push to the main branch of the remote repository.

LANGUAGE: console
CODE:
$ git add -A
$ git commit -m "my commit"
$ git push -u origin main

----------------------------------------

TITLE: Sample Docker Build Output
DESCRIPTION: Shows an example of the output produced when building a Docker image, including the steps executed and the resulting image ID.

LANGUAGE: console
CODE:
$ docker build .
[+] Building 3.5s (11/11) FINISHED                                              docker:desktop-linux
 => [internal] load build definition from Dockerfile                                            0.0s
 => => transferring dockerfile: 308B                                                            0.0s
 => [internal] load metadata for docker.io/library/python:3.12                                  0.0s
 => [internal] load .dockerignore                                                               0.0s
 => => transferring context: 2B                                                                 0.0s
 => [1/6] FROM docker.io/library/python:3.12                                                    0.0s
 => [internal] load build context                                                               0.0s
 => => transferring context: 123B                                                               0.0s
 => [2/6] WORKDIR /usr/local/app                                                                0.0s
 => [3/6] RUN useradd app                                                                       0.1s
 => [4/6] COPY ./requirements.txt ./requirements.txt                                            0.0s
 => [5/6] RUN pip install --no-cache-dir --upgrade -r requirements.txt                          3.2s
 => [6/6] COPY ./app ./app                                                                      0.0s
 => exporting to image                                                                          0.1s
 => => exporting layers                                                                         0.1s
 => => writing image sha256:9924dfd9350407b3df01d1a0e1033b1e543523ce7d5d5e2c83a724480ebe8f00    0.0s

----------------------------------------

TITLE: Configuring Docker client for content trust server
DESCRIPTION: Sets the Docker Content Trust server URL environment variable for self-hosted or 3rd party registries.

LANGUAGE: bash
CODE:
$ export DOCKER_CONTENT_TRUST_SERVER=https://<URL>:<PORT>

----------------------------------------

TITLE: Creating Client Certificates for Docker Registry Authentication
DESCRIPTION: Use OpenSSL commands to generate an RSA key and create a certificate for client authentication with a Docker registry. This process creates a client key and certificate pair.

LANGUAGE: bash
CODE:
$ openssl genrsa -out client.key 4096
$ openssl req -new -x509 -text -key client.key -out client.cert

----------------------------------------

TITLE: Initializing Docker Desktop Client in TypeScript for Extension Development
DESCRIPTION: This snippet demonstrates how to import and create a Docker Desktop client instance for use in a Docker extension. The client provides access to various APIs for interacting with Docker Desktop and the extension backend.

LANGUAGE: Typescript
CODE:
import { createDockerDesktopClient } from '@docker/extension-api-client';

export function App() {
  // obtain Docker Desktop client
  const ddClient = createDockerDesktopClient();
  // use ddClient to perform extension actions
}

----------------------------------------

TITLE: Docker Image Tag Usage Example
DESCRIPTION: Demonstrates how to use the 'docker image tag' command to create a new tag for an existing image. In this example, it tags the 'ubuntu:latest' image as 'myrepo/myimage:v1'.

LANGUAGE: bash
CODE:
$ docker image tag ubuntu:latest myrepo/myimage:v1

----------------------------------------

TITLE: Defining YAML Frontmatter for Docker Init Documentation
DESCRIPTION: YAML frontmatter configuration that defines metadata for the docker init command documentation page, including folder structure, layout settings, and URL aliases.

LANGUAGE: yaml
CODE:
datafolder: init-cli
datafile: docker_init
title: docker init
layout: cli
aliases:
- /engine/reference/commandline/init/

----------------------------------------

TITLE: Docker Compose Export Command Options Table
DESCRIPTION: Markdown table defining the available options for the docker compose export command. Includes options for dry run mode, container index selection, and output file specification.

LANGUAGE: markdown
CODE:
| Name             | Type     | Default | Description                                              |
|:-----------------|:---------|:--------|:---------------------------------------------------------|
| `--dry-run`      | `bool`   |         | Execute command in dry run mode                          |
| `--index`        | `int`    | `0`     | index of the container if service has multiple replicas. |
| `-o`, `--output` | `string` |         | Write to a file, instead of STDOUT                       |

----------------------------------------

TITLE: Correct Dockerfile Stage Name Case
DESCRIPTION: Example of correct stage name usage with all lowercase characters and hyphen separator.

LANGUAGE: dockerfile
CODE:
FROM alpine AS builder-base

----------------------------------------

TITLE: Configuring Runtime Shim in Daemon JSON
DESCRIPTION: JSON configuration for registering a containerd runtime shim in the Docker daemon config

LANGUAGE: json
CODE:
{
  "runtimes": {
    "foo": {
      "runtimeType": "/path/to/containerd-shim-foobar-v1"
    }
  }
}

----------------------------------------

TITLE: Extended Services with Specific Configurations
DESCRIPTION: Demonstrates how multiple services can extend a common configuration while adding their own specific settings.

LANGUAGE: yaml
CODE:
services:
  webapp:
    extends:
      file: common.yaml
      service: app
    command: /code/run_web_app
    ports:
      - 8080:8080
    depends_on:
      - queue
      - db

  queue_worker:
    extends:
      file: common.yaml
      service: app
    command: /code/run_worker
    depends_on:
      - queue

----------------------------------------

TITLE: Multi-Platform Build with QEMU
DESCRIPTION: This command demonstrates how to use the Kubernetes driver to build multi-platform images for amd64 and arm64 architectures using QEMU emulation.

LANGUAGE: console
CODE:
$ docker buildx build \
  --builder=kube \
  --platform=linux/amd64,linux/arm64 \
  -t <user>/<image> \
  --push .

----------------------------------------

TITLE: Multi-stage Docker Build with Zscaler Certificate Installation
DESCRIPTION: Illustrates a multi-stage Docker build process where the Zscaler root certificate is installed in the final runtime image, ensuring certificate availability in the production environment.

LANGUAGE: dockerfile
CODE:
FROM debian:bookworm AS build
WORKDIR /build
RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    curl \
    git
RUN --mount=target=. cmake -B output/

FROM debian:bookworm-slim AS final
ADD --checksum=sha256:24454f830cdb571e2c4ad15481119c43b3cafd48dd869a9b2945d1036d1dc68d \
    https://artifacts.example/certs/zscaler-root-ca.crt /usr/local/share/ca-certificates/zscaler-root-ca.crt
RUN apt-get update && \
    apt-get install -y ca-certificates && \
    update-ca-certificates
WORKDIR /app
COPY --from=build /build/output/bin .
ENTRYPOINT ["/app/bin"]

----------------------------------------

TITLE: Listing Docker Swarm Nodes
DESCRIPTION: This command lists information about all nodes in the Docker swarm, including their ID, hostname, status, availability, and manager status.

LANGUAGE: console
CODE:
$ docker node ls

ID                           HOSTNAME  STATUS  AVAILABILITY  MANAGER STATUS
dxn1zf6l61qsb1josjja83ngz *  manager1  Ready   Active        Leader

----------------------------------------

TITLE: Adding Annotations with bake-action in GitHub Actions
DESCRIPTION: This YAML configuration demonstrates a GitHub Actions workflow that uses docker/bake-action to build and push a Docker image with OCI annotations. It utilizes docker/metadata-action to generate metadata and applies the annotations using bake files.

LANGUAGE: yaml
CODE:
name: ci

on:
  push:

env:
  IMAGE_NAME: user/app

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}

      - name: Build
        uses: docker/bake-action@v6
        with:
          files: |
            ./docker-bake.hcl
            cwd://${{ steps.meta.outputs.bake-file-tags }}
            cwd://${{ steps.meta.outputs.bake-file-annotations }}
          push: true

----------------------------------------

TITLE: Running Welcome Container with Different Hostname
DESCRIPTION: Starts a 'Welcome to Docker' container with a different hostname for Traefik routing.

LANGUAGE: console
CODE:
$ docker run -d --network=traefik-demo --label 'traefik.http.routers.welcome.rule=Host(`welcome.localhost`)' docker/welcome-to-docker

----------------------------------------

TITLE: Setting Dockerfile Syntax Version 1.13.0
DESCRIPTION: Specifies Dockerfile syntax version 1.13.0, adding support for new Windows-specific build args and PATH updates.

LANGUAGE: dockerfile
CODE:
# syntax=docker/dockerfile:1.13.0

----------------------------------------

TITLE: Main Loop for User Input and Sentiment Analysis
DESCRIPTION: Python main loop to accept user input, perform sentiment analysis, and display results.

LANGUAGE: python
CODE:
if __name__ == "__main__":
    while True:
        input_text = input("Enter the text for semantic analysis (type 'exit' to end): ")

        if input_text.lower() == 'exit':
            print("Exiting...")
            break

        result = perform_semantic_analysis(input_text)
        print(f"Sentiment: {result}")

----------------------------------------

TITLE: Logging into Docker account using CLI
DESCRIPTION: This command logs the user into their Docker account, which is a prerequisite for using Docker Build Cloud.

LANGUAGE: bash
CODE:
$ docker login

----------------------------------------

TITLE: Git Repository Configuration Commands
DESCRIPTION: Console commands for configuring and pushing code to a GitHub repository. These commands update the remote origin and push the initial codebase.

LANGUAGE: console
CODE:
$ git remote set-url origin https://github.com/your-username/your-repository.git

LANGUAGE: console
CODE:
$ git add -A
$ git commit -m "my commit"
$ git push -u origin main

----------------------------------------

TITLE: Loading/Saving Images with Platform Specification in API v1.48
DESCRIPTION: POST /images/{name}/load and GET /images/{name}/get now support a platform parameter to specify a platform for loading/saving images.

LANGUAGE: json
CODE:
POST /images/{name}/load?platform={"os":"linux","architecture":"arm64"}

----------------------------------------

TITLE: Displaying Docker Compose Create Command Options in Markdown
DESCRIPTION: A markdown table listing the options for the 'docker compose create' command, including their names, types, default values, and descriptions. This table provides a comprehensive overview of the command's functionality and configuration options.

LANGUAGE: markdown
CODE:
| Name               | Type          | Default  | Description                                                                                   |
|:-------------------|:--------------|:---------|:----------------------------------------------------------------------------------------------|
| `--build`          | `bool`        |          | Build images before starting containers                                                       |
| `--dry-run`        | `bool`        |          | Execute command in dry run mode                                                               |
| `--force-recreate` | `bool`        |          | Recreate containers even if their configuration and image haven't changed                     |
| `--no-build`       | `bool`        |          | Don't build an image, even if it's policy                                                     |
| `--no-recreate`    | `bool`        |          | If containers already exist, don't recreate them. Incompatible with --force-recreate.         |
| `--pull`           | `string`      | `policy` | Pull image before running ("always"|"missing"|"never"|"build")                             |
| `--quiet-pull`     | `bool`        |          | Pull without printing progress information                                                    |
| `--remove-orphans` | `bool`        |          | Remove containers for services not defined in the Compose file                                |
| `--scale`          | `stringArray` |          | Scale SERVICE to NUM instances. Overrides the `scale` setting in the Compose file if present. |
| `-y`, `--y`        | `bool`        |          | Assume "yes" as answer to all prompts and run non-interactively                               |

----------------------------------------

TITLE: Incorrect Platform Flag Usage in Dockerfile
DESCRIPTION: Example showing incorrect usage of --platform flag with a hardcoded value, which limits build flexibility.

LANGUAGE: dockerfile
CODE:
FROM --platform=linux/amd64 alpine AS base
RUN apk add --no-cache git

----------------------------------------

TITLE: Basic Dockerfile for Ruby Applications
DESCRIPTION: A simple Dockerfile template for Ruby applications. It uses the official Ruby image as a base, sets the working directory, copies the application files, installs dependencies using Bundler, and specifies the command to run the application.

LANGUAGE: Dockerfile
CODE:
FROM ruby:2.5

# throw errors if Gemfile has been modified since Gemfile.lock
RUN bundle config --global frozen 1

WORKDIR /usr/src/app

COPY Gemfile Gemfile.lock ./
RUN bundle install

COPY . .

CMD ["./your-daemon-or-script.rb"]

----------------------------------------

TITLE: Building Docker Image with Test Stage
DESCRIPTION: This command builds a Docker image using the test stage as the target. It displays the build output, disables caching to ensure tests always run, and specifies the test stage as the build target.

LANGUAGE: console
CODE:
$ docker build -t php-docker-image-test --progress plain --no-cache --target test .

----------------------------------------

TITLE: Fluentd Configuration for Docker Logging
DESCRIPTION: Sample Fluentd configuration file (test.conf) for handling Docker logs. This configuration sets up a forward source and outputs all matched logs to stdout.

LANGUAGE: text
CODE:
<source>
  @type forward
</source>

<match *>
  @type stdout
</match>

----------------------------------------

TITLE: Usage of docker dev list Command
DESCRIPTION: Illustrates the usage of the docker dev list command to list all dev environments. It includes options for formatting output and quiet mode.

LANGUAGE: bash
CODE:
docker dev list [OPTIONS]

----------------------------------------

TITLE: Publishing Nginx Service on Port 8080
DESCRIPTION: Practical example of creating an Nginx service that publishes port 80 internally to port 8080 externally with 2 replicas.

LANGUAGE: console
CODE:
$ docker service create \
  --name my-web \
  --publish published=8080,target=80 \
  --replicas 2 \
  nginx

----------------------------------------

TITLE: Configuring YAML Build Settings for Docker Documentation
DESCRIPTION: YAML front matter configuration that sets build parameters and page metadata for a Docker documentation page about building. Specifies that the page should never be rendered and sets the page title and weight.

LANGUAGE: yaml
CODE:
build:
  render: never
title: Building
weight: 20

----------------------------------------

TITLE: Defining Python Dependencies in requirements.txt
DESCRIPTION: This snippet shows the contents of the requirements.txt file, which specifies the necessary Python packages for the text classification application.

LANGUAGE: text
CODE:
# 01 sentiment_analysis
nltk==3.6.5

...

# 03 text_classification
scikit-learn==1.3.2

...

----------------------------------------

TITLE: Testing Docker Content Trust Operations in Sandbox
DESCRIPTION: Shell commands for pulling, tagging, and pushing images with content trust enabled in the sandbox environment.

LANGUAGE: bash
CODE:
docker pull docker/trusttest
docker tag docker/trusttest sandboxregistry:5000/test/trusttest:latest
export DOCKER_CONTENT_TRUST=1
export DOCKER_CONTENT_TRUST_SERVER=https://notaryserver:4443
docker pull sandboxregistry:5000/test/trusttest
docker push sandboxregistry:5000/test/trusttest:latest
docker pull sandboxregistry:5000/test/trusttest

----------------------------------------

TITLE: Environment Configuration for LocalStack
DESCRIPTION: Environment variables configuration for connecting to LocalStack and MongoDB services.

LANGUAGE: plaintext
CODE:
MONGODB_URI=mongodb://mongodb:27017/todos
AWS_ACCESS_KEY_ID=test
AWS_SECRET_ACCESS_KEY=test
S3_BUCKET_NAME=mysamplebucket
S3_ENDPOINT_URL=http://localstack:4566
AWS_REGION=us-east-1

----------------------------------------

TITLE: Python Dependencies Definition
DESCRIPTION: Requirements file specifying Flask and Redis as Python package dependencies for the application.

LANGUAGE: text
CODE:
flask
redis

----------------------------------------

TITLE: Configuring GitHub Actions Workflow for Docker Build and Push
DESCRIPTION: GitHub Actions workflow configuration that authenticates with Docker Hub, sets up Buildx, and builds/pushes a Docker image. The workflow triggers on pushes to the main branch and uses repository secrets for Docker Hub credentials.

LANGUAGE: yaml
CODE:
name: Build and push Docker image

on:
  push:
    branches:
      - main

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ vars.DOCKER_USERNAME }}/${{ github.event.repository.name }}:latest

----------------------------------------

TITLE: IdP-Initiated Sign In Error
DESCRIPTION: Error message displayed when attempting to use unsupported IdP-initiated SAML flow.

LANGUAGE: text
CODE:
IdP-Initiated sign in is not enabled for connection '$ssoConnection'.

----------------------------------------

TITLE: Setting Default Cgroup Parent for Docker Daemon
DESCRIPTION: Demonstrates how to set the default cgroup parent for containers using the --cgroup-parent option.

LANGUAGE: console
CODE:
$ dockerd --cgroup-parent=/foobar

----------------------------------------

TITLE: Redundant Platform Specification in Dockerfile FROM Instruction
DESCRIPTION: This snippet demonstrates an incorrect usage of the --platform argument in a Dockerfile's FROM instruction. Setting the platform to $TARGETPLATFORM is redundant as it's the default behavior.

LANGUAGE: dockerfile
CODE:
FROM --platform=$TARGETPLATFORM alpine AS builder
RUN apk add --no-cache git

----------------------------------------

TITLE: Compose File Structure
DESCRIPTION: Basic structure of the compose.yaml and docker-stack.yml files used in Docker Compose for defining services and deployments.

LANGUAGE: yaml
CODE:
---
description: Summary of samples related to Compose
keywords: documentation, docs, docker, compose, samples
title: Sample apps with Compose
linkTitle: Sample apps
weight: 30
aliases:
- /compose/samples-for-compose/
---

----------------------------------------

TITLE: Creating Remote Buildx Driver for Docker Container
DESCRIPTION: This snippet demonstrates how to create a Buildx builder using the remote driver, connecting to a BuildKit instance running in a Docker container with TLS certificates.

LANGUAGE: console
CODE:
$ docker buildx create \
  --name remote-container \
  --driver remote \
  --driver-opt cacert=${PWD}/.certs/client/ca.pem,cert=${PWD}/.certs/client/cert.pem,key=${PWD}/.certs/client/key.pem,servername=<TLS_SERVER_NAME> \
  tcp://localhost:1234

----------------------------------------

TITLE: Example ETW Event Message for Docker Container Log
DESCRIPTION: This YAML snippet provides an example of an actual ETW event message for a Docker container log. It includes all the fields described in the message format, with sample values for each field.

LANGUAGE: yaml
CODE:
container_name: backstabbing_spence,
image_name: windowsservercore,
container_id: f14bb55aa862d7596b03a33251c1be7dbbec8056bbdead1da8ec5ecebbe29731,
image_id: sha256:2f9e19bd998d3565b4f345ac9aaf6e3fc555406239a4fb1b1ba879673713824b,
source: stdout,
log: Hello world!

----------------------------------------

TITLE: Mounting Linux Filesystem in Docker Run Command
DESCRIPTION: Demonstrates the recommended way to bind-mount files from the Linux filesystem into a Docker container for better performance and inotify event support.

LANGUAGE: bash
CODE:
docker run -v ~/my-project:/sources <my-image>

----------------------------------------

TITLE: HAProxy Load Balancer Configuration
DESCRIPTION: Example configuration for HAProxy to balance requests between swarm nodes on port 8080.

LANGUAGE: bash
CODE:
global
        log /dev/log    local0
        log /dev/log    local1 notice
...snip...

# Configure HAProxy to listen on port 80
frontend http_front
   bind *:80
   stats uri /haproxy?stats
   default_backend http_back

# Configure HAProxy to route requests to swarm nodes on port 8080
backend http_back
   balance roundrobin
   server node1 192.168.99.100:8080 check
   server node2 192.168.99.101:8080 check
   server node3 192.168.99.102:8080 check

----------------------------------------

TITLE: Enabling BuildKit via Environment Variable
DESCRIPTION: Command to enable BuildKit for a single build by setting the DOCKER_BUILDKIT environment variable

LANGUAGE: console
CODE:
$ DOCKER_BUILDKIT=1 docker build .

----------------------------------------

TITLE: Creating Docker Volume and Network for PostgreSQL
DESCRIPTION: Commands to create a Docker volume for persistent data storage and a network for container communication

LANGUAGE: console
CODE:
$ docker volume create db-data
$ docker network create postgresnet

----------------------------------------

TITLE: Metadata JSON for Multi-Arch Docker Extension with Architecture-Specific Binaries
DESCRIPTION: Specifies the paths for architecture-specific binaries (kubectl) in the metadata.json file of a Docker extension, ensuring correct deployment on different platforms.

LANGUAGE: json
CODE:
{
  "icon": "docker.svg",
  "ui": {
    "dashboard-tab": {
      "title": "Example Extension",
      "src": "index.html",
      "root": "ui"
    }
  },
  "host": {
    "binaries": [
      {
        "darwin": [
          {
            "path": "/darwin/kubectl"
          }
        ],
        "windows": [
          {
            "path": "/windows/kubectl.exe"
          }
        ]
      }
    ]
  }
}

----------------------------------------

TITLE: YAML Frontmatter Configuration for Docker Node Documentation
DESCRIPTION: YAML configuration block defining metadata for the Docker node CLI documentation page, including the title, aliases for URL routing, and layout specification.

LANGUAGE: yaml
CODE:
datafolder: engine-cli
datafile: docker_node
title: docker node
aliases:
- /edge/engine/reference/commandline/node/
- /engine/reference/commandline/node/
layout: cli

----------------------------------------

TITLE: Running Docker Compose Stack
DESCRIPTION: This console command demonstrates how to start the application stack defined in the Docker Compose file, running the containers in detached mode.

LANGUAGE: console
CODE:
$ docker compose up -d

----------------------------------------

TITLE: Searching Docker Images via CLI
DESCRIPTION: Command to search for Docker images in Docker Hub using the docker search command

LANGUAGE: bash
CODE:
docker search docker/welcome-to-docker

----------------------------------------

TITLE: Volume Plugin Create Request
DESCRIPTION: JSON request format for creating a new volume through the plugin API

LANGUAGE: json
CODE:
{
    "Name": "volume_name",
    "Opts": {}
}

----------------------------------------

TITLE: Error Output Format for FROM/AS Casing Mismatch
DESCRIPTION: Shows the error message format when FROM and AS keywords have inconsistent casing.

LANGUAGE: text
CODE:
'as' and 'FROM' keywords' casing do not match

----------------------------------------

TITLE: Configuring Multiple Compose Profiles
DESCRIPTION: Example demonstrating how to enable multiple profiles using COMPOSE_PROFILES environment variable with comma separator.

LANGUAGE: shell
CODE:
COMPOSE_PROFILES=frontend,debug

----------------------------------------

TITLE: Creating Remote Buildx Driver for Kubernetes
DESCRIPTION: This command creates a Buildx builder using the remote driver, connecting to a BuildKit service deployed in Kubernetes with TLS certificates.

LANGUAGE: console
CODE:
$ docker buildx create \
  --name remote-kubernetes \
  --driver remote \
  --driver-opt cacert=${PWD}/.certs/client/ca.pem,cert=${PWD}/.certs/client/cert.pem,key=${PWD}/.certs/client/key.pem \
  tcp://buildkitd.default.svc:1234

----------------------------------------

TITLE: Initializing Deno Server with Oak Framework - TypeScript
DESCRIPTION: A simple Deno server implementation using the Oak framework that creates an API endpoint returning a JSON response on port 8000.

LANGUAGE: typescript
CODE:
import { Application, Router } from "https://deno.land/x/oak@v12.0.0/mod.ts";

const app = new Application();
const router = new Router();

// Define a route that returns JSON
router.get("/", (context) => {
  context.response.body = { Status: "OK" };
  context.response.type = "application/json";
});

app.use(router.routes());
app.use(router.allowedMethods());

console.log("Server running on http://localhost:8000");
await app.listen({ port: 8000 });

----------------------------------------

TITLE: Docker Compose List Command Options
DESCRIPTION: Table of command line options available for the 'docker compose ls' command. Includes flags for showing all projects, dry run mode, filtering, output formatting, and quiet mode.

LANGUAGE: markdown
CODE:
| Name            | Type     | Default | Description                                |
|:----------------|:---------|:--------|:-------------------------------------------|
| `-a`, `--all`   | `bool`   |         | Show all stopped Compose projects          |
| `--dry-run`     | `bool`   |         | Execute command in dry run mode            |
| `--filter`      | `filter` |         | Filter output based on conditions provided |
| `--format`      | `string` | `table` | Format the output. Values: [table \| json] |
| `-q`, `--quiet` | `bool`   |         | Only display project names                 |

----------------------------------------

TITLE: Listing local delegation keys using Notary CLI
DESCRIPTION: Uses the Notary CLI to list keys imported into the local Docker trust store.

LANGUAGE: bash
CODE:
$ notary key list

ROLE       GUN                          KEY ID                                                              LOCATION
----       ---                          ------                                                              --------
root                                    f6c6a4b00fefd8751f86194c7d87a3bede444540eb3378c4a11ce10852ab1f96    /home/ubuntu/.docker/trust/private
jeff                                    9deed251daa1aa6f9d5f9b752847647cf8d705da0763aa5467650d0987ed5306    /home/ubuntu/.docker/trust/private

----------------------------------------

TITLE: Build Secret Handling with Cache Invalidation - Dockerfile
DESCRIPTION: Example showing how to handle build secrets with cache invalidation control using build arguments and secret mounts.

LANGUAGE: dockerfile
CODE:
FROM alpine
ARG CACHEBUST
RUN --mount=type=secret,id=TOKEN,env=TOKEN \
    some-command ...

----------------------------------------

TITLE: Database Setup SQL Commands
DESCRIPTION: SQL commands for initializing the CockroachDB database and user

LANGUAGE: sql
CODE:
CREATE DATABASE mydb;
CREATE USER totoro;
GRANT ALL ON DATABASE mydb TO totoro;

----------------------------------------

TITLE: Configuring Docker Build and Title Settings in YAML
DESCRIPTION: Basic YAML configuration that disables build rendering and sets a documentation title for source code management.

LANGUAGE: yaml
CODE:
---
build:
  render: never
title: Source code management
---

----------------------------------------

TITLE: Running Docker Scout Quickview Analysis
DESCRIPTION: This command provides a quick overview of vulnerabilities in a specified image and its base image using Docker Scout.

LANGUAGE: bash
CODE:
docker scout quickview traefik:latest

----------------------------------------

TITLE: Insufficient Seats Error
DESCRIPTION: Error message shown when there are not enough available seats in the organization for user provisioning.

LANGUAGE: text
CODE:
Not enough seats in organization '$orgName'. Add more seats or contact your administrator.

----------------------------------------

TITLE: YAML Front Matter Configuration for Docker Builder Documentation
DESCRIPTION: YAML front matter configuration block that specifies metadata for the Docker builder CLI documentation page, including the data folder location, filename, title, layout and URL aliases.

LANGUAGE: yaml
CODE:
datafolder: engine-cli
datafile: docker_builder
title: docker builder
layout: cli
aliases:
- /engine/reference/commandline/builder/

----------------------------------------

TITLE: Docker Socket Mount Denied Example
DESCRIPTION: Example showing default behavior of ECI blocking Docker socket mount attempts for unauthorized containers.

LANGUAGE: console
CODE:
$ docker run -it --rm -v /var/run/docker.sock:/var/run/docker.sock docker:cli
docker: Error response from daemon: enhanced container isolation: docker socket mount denied for container with image "docker.io/library/docker"; image is not in the allowed list; if you wish to allow it, configure the docker socket image list in the Docker Desktop settings.

----------------------------------------

TITLE: Setting environment variables in Dockerfile (legacy syntax)
DESCRIPTION: The legacy syntax for setting environment variables in Dockerfiles using space-separated values is deprecated. Users should use the '=' syntax instead.

LANGUAGE: dockerfile
CODE:
ENV ONE TWO= THREE=world

----------------------------------------

TITLE: Using Reserved Words as Stage Names in Dockerfile (Incorrect)
DESCRIPTION: This snippet demonstrates the incorrect use of reserved words 'scratch' and 'context' as stage names in a Dockerfile. These reserved words should not be used as stage names in multi-stage builds.

LANGUAGE: dockerfile
CODE:
FROM alpine AS scratch
FROM alpine AS context

----------------------------------------

TITLE: Displaying Error Message for Typo in Dockerfile Variable
DESCRIPTION: Shows the output message when a typo is detected in a variable name. This helps developers quickly identify and correct typos in their Dockerfiles.

LANGUAGE: text
CODE:
Usage of undefined variable '$PAHT' (did you mean $PATH?)

----------------------------------------

TITLE: YAML Frontmatter Configuration for Spark Docker Documentation
DESCRIPTION: YAML frontmatter configuration block defining metadata for a documentation page about Spark Docker samples. Includes title, description, service identifier and URL aliases.

LANGUAGE: yaml
CODE:
---
title: Spark samples
description: Docker samples for Spark.
service: spark
aliases:
- /samples/spark/
---

----------------------------------------

TITLE: Displaying Compose Bridge Help
DESCRIPTION: Command to view all available flags and options for the compose-bridge convert command.

LANGUAGE: console
CODE:
$ compose-bridge convert --help

----------------------------------------

TITLE: Defining Docker Plugin JSON Specification
DESCRIPTION: JSON structure for defining a Docker plugin, including name, address, and optional TLS configuration. This specification is used for plugin discovery and configuration.

LANGUAGE: json
CODE:
{
  "Name": "plugin-example",
  "Addr": "https://example.com/docker/plugin",
  "TLSConfig": {
    "InsecureSkipVerify": false,
    "CAFile": "/usr/shared/docker/certs/example-ca.pem",
    "CertFile": "/usr/shared/docker/certs/example-cert.pem",
    "KeyFile": "/usr/shared/docker/certs/example-key.pem"
  }
}

----------------------------------------

TITLE: Removing a key from a delegation using Notary CLI
DESCRIPTION: Demonstrates removing a specific key from both targets/releases and targets/<name> delegations.

LANGUAGE: bash
CODE:
$ notary delegation remove registry.example.com/admin/demo targets/releases 1091060d7bfd938dfa5be703fa057974f9322a4faef6f580334f3d6df44c02d1 --publish

$ notary delegation remove registry.example.com/admin/demo targets/jeff 1091060d7bfd938dfa5be703fa057974f9322a4faef6f580334f3d6df44c02d1 --publish

----------------------------------------

TITLE: Usage of docker dev check Command
DESCRIPTION: Demonstrates the usage of the docker dev check command, which is used to check Dev Environments. It includes an optional --format flag to format the output.

LANGUAGE: bash
CODE:
docker dev check [OPTIONS]

----------------------------------------

TITLE: Cloning Bun Sample Application
DESCRIPTION: Command to clone the sample Bun application repository from GitHub and change into the project directory.

LANGUAGE: console
CODE:
$ git clone https://github.com/dockersamples/bun-docker.git && cd bun-docker

----------------------------------------

TITLE: Creating Kubernetes Deployment and Service YAML for Node.js Application
DESCRIPTION: This YAML file defines a Kubernetes Deployment and Service for a Node.js application. The Deployment creates a pod with a container using the specified Docker image, while the Service exposes the application on port 30001.

LANGUAGE: yaml
CODE:
apiVersion: apps/v1
kind: Deployment
metadata:
  name: docker-nodejs-demo
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      todo: web
  template:
    metadata:
      labels:
        todo: web
    spec:
      containers:
        - name: todo-site
          image: DOCKER_USERNAME/REPO_NAME
          imagePullPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: todo-entrypoint
  namespace: default
spec:
  type: NodePort
  selector:
    todo: web
  ports:
    - port: 3000
      targetPort: 3000
      nodePort: 30001

----------------------------------------

TITLE: Direct-LVM Configuration with Full Options
DESCRIPTION: Complete JSON configuration for devicemapper in direct-lvm mode with all available options set

LANGUAGE: json
CODE:
{
  "storage-driver": "devicemapper",
  "storage-opts": [
    "dm.directlvm_device=/dev/xdf",
    "dm.thinp_percent=95",
    "dm.thinp_metapercent=1",
    "dm.thinp_autoextend_threshold=80",
    "dm.thinp_autoextend_percent=20",
    "dm.directlvm_device_force=false"
  ]
}

----------------------------------------

TITLE: Session Not Found Error
DESCRIPTION: Error message shown when the authentication session cannot be found or has been disrupted.

LANGUAGE: text
CODE:
We couldn't find your session. You may have pressed the back button, refreshed the page, opened too many sign-in dialogs, or there is some issue with cookies. Try signing in again. If the issue persists, contact your administrator.

----------------------------------------

TITLE: Dockerfile with SBOM Attestation Support
DESCRIPTION: Dockerfile configuration that enables SBOM scanning during build stage and creates a minimal C++ application image

LANGUAGE: dockerfile
CODE:
ARG BUILDKIT_SBOM_SCAN_STAGE=true

FROM ubuntu:latest AS build

RUN apt-get update && apt-get install -y build-essential

WORKDIR /app

COPY hello.cpp .

RUN g++ -o hello hello.cpp -static

# --------------------
FROM scratch

COPY --from=build /app/hello /hello

CMD ["/hello"]

----------------------------------------

TITLE: Environment Configuration for Local Development
DESCRIPTION: Environment variable configuration for directing API calls to WireMock server

LANGUAGE: plaintext
CODE:
API_ENDPOINT_BASE=http://localhost:8080

----------------------------------------

TITLE: Displaying Docker Documentation Logo in Markdown
DESCRIPTION: This snippet shows how to embed an image of the Docker Documentation logo using Markdown syntax. The image is set to a maximum width of 50% of its container.

LANGUAGE: markdown
CODE:
<img src="static/assets/images/docker-docs.png" alt="Welcome to Docker Documentation" style="max-width: 50%;">

----------------------------------------

TITLE: Issue Reference - Docker Engine Pull Request
DESCRIPTION: GitHub pull request reference for a Docker Engine issue fix

LANGUAGE: markdown
CODE:
[docker/engine#156](https://github.com/docker/engine/pull/156)

----------------------------------------

TITLE: Running Docker Build Checks
DESCRIPTION: Command to execute BuildKit's build configuration analysis using the --check flag. This performs validation against pre-defined rules without producing a build output.

LANGUAGE: console
CODE:
$ docker build --check .

----------------------------------------

TITLE: Release Notes Table Entry
DESCRIPTION: YAML front matter table defining CVE vulnerability details

LANGUAGE: yaml
CODE:
CVE                                                         | Component     | Fix version | Severity         |
| ----------------------------------------------------------- | ------------- | ----------- | ---------------- |
| [CVE-2024-21626](https://scout.docker.com/v/CVE-2024-21626) | runc          | 1.1.12      | High, CVSS 8.6   |
| [CVE-2024-24557](https://scout.docker.com/v/CVE-2024-24557) | Docker Engine | 24.0.9      | Medium, CVSS 6.9 |

----------------------------------------

TITLE: Creating a Secret from a File in Docker Compose
DESCRIPTION: This snippet demonstrates how to create a secret named 'server-certificate' from a file named 'server.cert' in the current directory. The secret will be registered as a platform secret with the name '<project_name>_server-certificate' when the application is deployed.

LANGUAGE: yaml
CODE:
secrets:
  server-certificate:
    file: ./server.cert

----------------------------------------

TITLE: Running a Basic Command with Docker Compose
DESCRIPTION: Demonstrates how to run a basic command (bash) for a service (web) using Docker Compose.

LANGUAGE: console
CODE:
$ docker compose run web bash

----------------------------------------

TITLE: Creating Platform-Specific Shell Scripts
DESCRIPTION: Sample shell scripts for Mac/Linux and Windows that output a hello message with a parameter

LANGUAGE: bash
CODE:
#!/bin/sh
echo "Hello, $1!"

LANGUAGE: bash
CODE:
@echo off
echo "Hello, %1!"

----------------------------------------

TITLE: Custom Build Hook with Build Arguments
DESCRIPTION: Example build hook that uses docker build arguments to set custom variables using Docker Hub build settings.

LANGUAGE: bash
CODE:
docker build --build-arg CUSTOM=$VAR -f $DOCKERFILE_PATH -t $IMAGE_NAME .

----------------------------------------

TITLE: Creating Inline Config with Variable Interpolation in Docker Compose YAML
DESCRIPTION: This snippet illustrates how to create a config named 'app_config' with inline content, using variable interpolation for dynamic configuration.

LANGUAGE: yaml
CODE:
configs:
  app_config:
    content: |
      debug=${DEBUG}
      spring.application.admin.enabled=${DEBUG}
      spring.application.name=${COMPOSE_PROJECT_NAME}

----------------------------------------

TITLE: Installing Composer in PHP Docker Container
DESCRIPTION: This Dockerfile snippet shows how to install Composer, the PHP dependency manager, within a Docker container.

LANGUAGE: Dockerfile
CODE:
FROM php:7.4-cli

RUN php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
RUN php composer-setup.php --install-dir=/usr/local/bin --filename=composer
RUN php -r "unlink('composer-setup.php');"

WORKDIR /app

COPY . .

RUN composer install

----------------------------------------

TITLE: Updating Dockerfile to Run Tests During Build
DESCRIPTION: This Dockerfile modification adds a step to run .NET tests during the build stage. It uses a multi-stage build process for development and production environments.

LANGUAGE: dockerfile
CODE:
# syntax=docker/dockerfile:1

FROM --platform=$BUILDPLATFORM mcr.microsoft.com/dotnet/sdk:8.0-alpine AS build
ARG TARGETARCH
COPY . /source
WORKDIR /source/src
RUN --mount=type=cache,id=nuget,target=/root/.nuget/packages \
    dotnet publish -a ${TARGETARCH/amd64/x64} --use-current-runtime --self-contained false -o /app
RUN dotnet test /source/tests

FROM mcr.microsoft.com/dotnet/sdk:8.0-alpine AS development
COPY . /source
WORKDIR /source/src
CMD dotnet run --no-launch-profile

FROM mcr.microsoft.com/dotnet/aspnet:8.0-alpine AS final
WORKDIR /app
COPY --from=build /app .
ARG UID=10001
RUN adduser \
    --disabled-password \
    --gecos "" \
    --home "/nonexistent" \
    --shell "/sbin/nologin" \
    --no-create-home \
    --uid "${UID}" \
    appuser
USER appuser
ENTRYPOINT ["dotnet", "myWebApp.dll"]

----------------------------------------

TITLE: Non-compliant Dockerfile for Default Non-Root User policy
DESCRIPTION: Example of a Dockerfile that doesn't specify a non-root user, making it non-compliant with the Default Non-Root User policy.

LANGUAGE: dockerfile
CODE:
FROM alpine
RUN echo "Hi"

----------------------------------------

TITLE: GitHub Actions Workflow for Docker Build and Push
DESCRIPTION: YAML configuration for a GitHub Actions workflow that builds, tests, and pushes a Docker image to Docker Hub. It includes steps for logging into Docker Hub, setting up Docker Buildx, and using multi-platform builds.

LANGUAGE: YAML
CODE:
name: ci

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and test
        uses: docker/build-push-action@v6
        with:
          target: test
          load: true

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64,linux/arm64
          push: true
          target: final
          tags: ${{ vars.DOCKER_USERNAME }}/${{ github.event.repository.name }}:latest

----------------------------------------

TITLE: HTTP PUT Request Implementation
DESCRIPTION: Demonstrates making an HTTP PUT request to a backend service. This method is deprecated in favor of HttpService.put.

LANGUAGE: typescript
CODE:
window.ddClient.backend
 .put("/some/service", { ... })
 .then((value: any) => console.log(value));

----------------------------------------

TITLE: Configuring Build Settings for Docker Project in YAML
DESCRIPTION: This YAML snippet defines a cascade of build settings for a Docker project. It specifies that the build should never be listed or rendered, and resources should not be published.

LANGUAGE: yaml
CODE:
---
cascade:
- build:
    list: never
    publishResources: false
    render: never
---

----------------------------------------

TITLE: Security Fix Reference - CVE Link
DESCRIPTION: URL reference to the CVE-2019-5736 security vulnerability details

LANGUAGE: markdown
CODE:
[CVE-2019-5736](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-5736)

----------------------------------------

TITLE: Correct Usage of ARG with Default Value in FROM Statement (Dockerfile)
DESCRIPTION: This snippet shows the proper way to use an ARG instruction with a default value in a FROM statement. This ensures a valid build even if no build argument is provided.

LANGUAGE: dockerfile
CODE:
ARG TAG=latest
FROM busybox:${TAG}

----------------------------------------

TITLE: HTML Comment for Documentation Source
DESCRIPTION: HTML comment block indicating that the page is automatically generated and providing instructions for suggesting changes through GitHub.

LANGUAGE: html
CODE:
<!--
This page is automatically generated from Docker's source code. If you want to
suggest a change to the text that appears here, open a ticket or pull request
in the source repository on GitHub:

https://github.com/docker/cli
-->

----------------------------------------

TITLE: Setting Multiple Environment Files
DESCRIPTION: Example showing how to specify multiple environment files using COMPOSE_ENV_FILES with comma separator.

LANGUAGE: shell
CODE:
COMPOSE_ENV_FILES=.env.envfile1, .env.envfile2

----------------------------------------

TITLE: Configuring Annotations in Docker Bake HCL
DESCRIPTION: Shows how to specify annotations in a Bake configuration file using HCL syntax for registry output.

LANGUAGE: hcl
CODE:
target "default" {
  output = ["type=registry"]
  annotations = ["foo=bar"]
}

----------------------------------------

TITLE: Creating a Compose File for Docker Extension VM
DESCRIPTION: This YAML snippet shows an example of a compose.yaml file referenced in the VM section. It defines a service using the extension image and includes a volume definition.

LANGUAGE: yaml
CODE:
services:
  myExtension:
    image: ${DESKTOP_PLUGIN_IMAGE}
    volumes:
      - /host/path:/container/path

----------------------------------------

TITLE: Formatting BTRFS Filesystem
DESCRIPTION: Command to format block devices as a BTRFS filesystem.

LANGUAGE: console
CODE:
$ sudo mkfs.btrfs -f /dev/xvdf /dev/xvdg

----------------------------------------

TITLE: Querying Docker Scout Policy Status via CLI
DESCRIPTION: Demonstrates how to check policy status for a specific Docker image using the docker scout policy command. The command evaluates policies like license compliance, security vulnerabilities, and supply chain attestations.

LANGUAGE: bash
CODE:
docker scout policy \
  --org dockerscoutpolicy \
  --platform linux/amd64 \
  dockerscoutpolicy/email-api-service:0.0.2

----------------------------------------

TITLE: Using External Image as a Stage in Dockerfile
DESCRIPTION: This snippet demonstrates how to use an external image as a stage in a multi-stage Dockerfile. It copies a file from the nginx image into the current build stage.

LANGUAGE: dockerfile
CODE:
COPY --from=nginx:latest /etc/nginx/nginx.conf /nginx.conf

----------------------------------------

TITLE: Complex Docker Build Command with Multiple Options
DESCRIPTION: This snippet shows a more complex `docker build` command with multiple options including build arguments, cache settings, and multi-platform builds.

LANGUAGE: console
CODE:
$ docker build \
  -f Dockerfile \
  -t myapp:latest \
  --build-arg foo=bar \
  --no-cache \
  --platform linux/amd64,linux/arm64 \
  .

----------------------------------------

TITLE: Displaying All Policy Results for Both Images
DESCRIPTION: This snippet illustrates how to use the 'docker scout compare' command to show all policy results for both images being compared.

LANGUAGE: console
CODE:
docker scout compare --to namespace/repo:latest namespace/repo:v1.2.3-pre

----------------------------------------

TITLE: Installing Docker Desktop MSI Without Restart
DESCRIPTION: PowerShell command to install Docker Desktop using MSI while suppressing the automatic restart prompt.

LANGUAGE: powershell
CODE:
msiexec /i "DockerDesktop.msi" /L*V ".\msi.log" /norestart

----------------------------------------

TITLE: Containerizing Rexray for Amazon EBS in Dockerfile
DESCRIPTION: This Dockerfile creates a container image with Rexray installed, which will be used as the basis for the Docker volume plugin. It downloads and installs Rexray, and sets up the necessary directories.

LANGUAGE: dockerfile
CODE:
FROM debian:jessie
RUN apt-get update && apt-get install -y --no-install-recommends wget ca-certificates
RUN wget https://dl.bintray.com/emccode/rexray/stable/0.6.4/rexray-Linux-x86_64-0.6.4.tar.gz -O rexray.tar.gz && tar -xvzf rexray.tar.gz -C /usr/bin && rm rexray.tar.gz
RUN mkdir -p /run/docker/plugins /var/lib/libstorage/volumes
ENTRYPOINT ["rexray"]
CMD ["--help"]

----------------------------------------

TITLE: Cloning the Sample Application Repository
DESCRIPTION: Command to clone the sample application's Git repository containing the sentiment analysis code and Dockerfile.

LANGUAGE: shell
CODE:
$ git clone https://github.com/harsh4870/Docker-NLP.git

----------------------------------------

TITLE: Docker Trust Key Loss Error Message
DESCRIPTION: Example error message displayed when attempting to use content that was signed with a lost or compromised key.

LANGUAGE: console
CODE:
Warning: potential malicious behavior - trust data has insufficient signatures for remote repository docker.io/my/image: valid signatures did not meet threshold

----------------------------------------

TITLE: Building Image with SBOM Attestation
DESCRIPTION: Command to build a Docker image with SBOM attestation using the Docker Scout SBOM generator plugin.

LANGUAGE: console
CODE:
docker build --tag <org>/<image> \
  --attest type=sbom,generator=docker/scout-sbom-indexer:latest \
  --push .

----------------------------------------

TITLE: Generating SBOM for Most Recent Image with Docker Scout
DESCRIPTION: This command generates and displays the SBOM for the most recently built Docker image using the Docker Scout tool.

LANGUAGE: console
CODE:
$ docker scout sbom

----------------------------------------

TITLE: Basic Docker Compose Service Definition
DESCRIPTION: Example of a basic service definition in Docker Compose YAML format, showing image, ports, and volume configuration.

LANGUAGE: yaml
CODE:
services:
  webapp:
    image: examples/web
    ports:
      - "8000:8000"
    volumes:
      - "/data"

----------------------------------------

TITLE: Triggering Docker CLI Telemetry Export
DESCRIPTION: Executes a Docker command to trigger the CLI into sending a metric signal to the OpenTelemetry collector.

LANGUAGE: bash
CODE:
$ docker version

----------------------------------------

TITLE: Adding User to Docker Users Group
DESCRIPTION: Command to add a user to the docker-users group for non-admin access.

LANGUAGE: console
CODE:
$ net localgroup docker-users <user> /add

----------------------------------------

TITLE: Extension Metadata Configuration
DESCRIPTION: JSON configuration defining the extension's UI properties including dashboard tab details and frontend source location.

LANGUAGE: json
CODE:
{
  "ui": {
    "dashboard-tab": {
      "title": "Minimal frontend",
      "root": "/ui",
      "src": "index.html"
    }
  }
}

----------------------------------------

TITLE: Compliant Dockerfile for Default Non-Root User policy
DESCRIPTION: Example of a multi-stage Dockerfile that sets a non-root user for the runtime stage, making it compliant with the Default Non-Root User policy.

LANGUAGE: dockerfile
CODE:
FROM alpine AS builder
COPY Makefile ./src /
RUN make build

FROM alpine AS runtime
COPY --from=builder bin/production /app
USER nonroot
ENTRYPOINT ["/app/production"]

----------------------------------------

TITLE: Adding Non-Root User to Dockerfile
DESCRIPTION: Modify the Dockerfile to use a non-root user for improved security.

LANGUAGE: diff
CODE:
  CMD ["node","/app/app.js"]
  EXPOSE 3000
+ USER appuser

----------------------------------------

TITLE: Running Docker Commands with Path Conversion in Git Bash
DESCRIPTION: This console command demonstrates how to run Docker commands in Git Bash while disabling MSYS path conversion.

LANGUAGE: console
CODE:
$ MSYS_NO_PATHCONV=1 docker run --rm -ti -v $(pwd):/work alpine

----------------------------------------

TITLE: Displaying Full SBOM in JSON Format with Docker Scout
DESCRIPTION: This command generates and displays the full SBOM in JSON format for the Alpine image using the Docker Scout tool.

LANGUAGE: console
CODE:
$ docker scout sbom alpine

----------------------------------------

TITLE: Deprecated Docker Command Execution
DESCRIPTION: Legacy methods for executing Docker commands and handling command output. These methods are deprecated and will be replaced by the newer exec() interface.

LANGUAGE: typescript
CODE:
const output = await window.ddClient.execDockerCmd(
  "info",
  "--format",
  '"{{ json . }}"'
);

window.ddClient.spawnDockerCmd("logs", ["-f", "..."], (data, error) => {
  console.log(data.stdout);
});

----------------------------------------

TITLE: Installing Docker Desktop for Non-Admin Windows Users
DESCRIPTION: Command line installation of Docker Desktop on Windows with the --always-run-service flag to enable non-administrator usage.

LANGUAGE: console
CODE:
$ "Docker Desktop Installer.exe" install —always-run-service

----------------------------------------

TITLE: Building Docker Image with Node.js Tests
DESCRIPTION: This command builds a Docker image using the test stage of the Dockerfile. It runs the tests during the build process and will fail the build if tests fail.

LANGUAGE: Console
CODE:
$ docker build -t node-docker-image-test --progress=plain --no-cache --target test .

----------------------------------------

TITLE: YAML Front Matter Configuration for Docker CLI Documentation
DESCRIPTION: YAML configuration block that defines metadata for the Docker service inspect command documentation page, including the title, aliases for URL routing, and layout specification.

LANGUAGE: yaml
CODE:
datafolder: engine-cli
datafile: docker_service_inspect
title: docker service inspect
aliases:
- /edge/engine/reference/commandline/service_inspect/
- /engine/reference/commandline/service_inspect/
layout: cli

----------------------------------------

TITLE: Disabling Single Docker Scout Repository
DESCRIPTION: Demonstrates how to disable Docker Scout for a specific repository using the basic command syntax.

LANGUAGE: console
CODE:
$ docker scout repo disable my/repository

----------------------------------------

TITLE: Creating Buttons in Docker Documentation using Go Shortcodes
DESCRIPTION: This snippet demonstrates how to use a custom Go shortcode to create a button in Docker's documentation. The shortcode takes two parameters: 'url' for the button's destination and 'text' for the button's label.

LANGUAGE: go
CODE:
{{</* button url="https://example.com/" text="hello" */>}}

----------------------------------------

TITLE: JSON Output of Bake Build Configuration
DESCRIPTION: JSON representation of the Bake build configuration showing groups and targets.

LANGUAGE: json
CODE:
{
  "group": {
    "default": {
      "targets": [
        "vote",
        "result",
        "worker",
        "seed"
      ]
    }
  },
  "target": {
    "result": {
      "context": "result",
      "dockerfile": "Dockerfile",
    },
    "seed": {
      "context": "seed-data",
      "dockerfile": "Dockerfile",
    },
    "vote": {
      "context": "vote",
      "dockerfile": "Dockerfile",
      "target": "dev",
    },
    "worker": {
      "context": "worker",
      "dockerfile": "Dockerfile",
    }
  }
}

----------------------------------------

TITLE: Visualizing Registry and Repository Relationship with ASCII Diagram
DESCRIPTION: This ASCII diagram illustrates the hierarchical relationship between a registry, repositories, and container images, showing how images are organized within repositories inside a registry.

LANGUAGE: goat
CODE:
+---------------------------------------+
|               Registry                |
|---------------------------------------|
|                                       |
|    +-----------------------------+    |
|    |        Repository A         |    |
|    |-----------------------------|
|    |   Image: project-a:v1.0     |    |
|    |   Image: project-a:v2.0     |    |
|    +-----------------------------+    |
|                                       |
|    +-----------------------------+    |
|    |        Repository B         |    |
|    |-----------------------------|
|    |   Image: project-b:v1.0     |    |
|    |   Image: project-b:v1.1     |    |
|    |   Image: project-b:v2.0     |    |
|    +-----------------------------+    |
|                                       |
+---------------------------------------+

----------------------------------------

TITLE: Command-line Installation of Docker Desktop on Mac
DESCRIPTION: Series of commands to install Docker Desktop on Mac from the command line after downloading the Docker.dmg file. This method installs Docker Desktop in the Applications folder.

LANGUAGE: bash
CODE:
$ sudo hdiutil attach Docker.dmg
$ sudo /Volumes/Docker/Docker.app/Contents/MacOS/install
$ sudo hdiutil detach /Volumes/Docker

----------------------------------------

TITLE: Configuring YAML Build Settings for Docker Documentation
DESCRIPTION: YAML configuration block that specifies build parameters and metadata for a Docker documentation page. Sets rendering behavior and defines page properties including title and weight.

LANGUAGE: yaml
CODE:
build:
  render: never
title: Deep dive
weight: 60

----------------------------------------

TITLE: Running Nginx Container in Project Harmonia Cloud Engine
DESCRIPTION: This command runs an Nginx container in the cloud engine, mapping port 80 of the container to port 8080 of the host. It demonstrates how to deploy a web server in the cloud environment.

LANGUAGE: bash
CODE:
$ docker run -d --name cloudnginx -p 8080:80 nginx

----------------------------------------

TITLE: Real-time CPU Scheduling Container Launch
DESCRIPTION: Example of launching a container with real-time CPU scheduling configuration

LANGUAGE: console
CODE:
$ docker run -it \
    --cpu-rt-runtime=950000 \
    --ulimit rtprio=99 \
    --cap-add=sys_nice \
    debian:jessie

----------------------------------------

TITLE: Dynamic Platform Variable Usage in Dockerfile
DESCRIPTION: Example showing proper usage of --platform flag with a build-time variable for platform flexibility.

LANGUAGE: dockerfile
CODE:
FROM --platform=${BUILDPLATFORM} alpine AS base
RUN apk add --no-cache git

----------------------------------------

TITLE: Docker Scout Refresh-Only Recommendations
DESCRIPTION: Demonstrates how to show only base image refresh recommendations using the --only-refresh flag.

LANGUAGE: console
CODE:
$ docker scout recommendations --only-refresh golang:1.19.4

----------------------------------------

TITLE: Inspecting a Docker Buildx Builder
DESCRIPTION: Inspects a Docker Buildx builder using the docker buildx inspect command. The --bootstrap flag can be added to start the builder if it's not active.

LANGUAGE: bash
CODE:
$ docker buildx inspect --bootstrap my_builder
[+] Building 1.7s (1/1) FINISHED                                                                  
 => [internal] booting buildkit                                                              1.7s
 => => pulling image moby/buildkit:buildx-stable-1                                           1.3s
 => => creating container buildx_buildkit_my_builder0                                        0.4s
Name:          my_builder
Driver:        docker-container
Last Activity: 2023-06-21 18:28:37 +0000 UTC

Nodes:
Name:      my_builder0
Endpoint:  unix:///var/run/docker.sock
Status:    running
Buildkit:  v0.11.6
Platforms: linux/arm64, linux/amd64, linux/amd64/v2, linux/riscv64, linux/ppc64le, linux/s390x, linux/386, linux/mips64le, linux/mips64, linux/arm/v7, linux/arm/v6

----------------------------------------

TITLE: Windows Docker Diagnostics Commands
DESCRIPTION: Commands for running Docker Desktop diagnostics and accessing logs on Windows systems using PowerShell.

LANGUAGE: powershell
CODE:
$ C:\Program Files\Docker\Docker\resources\com.docker.diagnose.exe
$ & "C:\Program Files\Docker\Docker\resources\com.docker.diagnose.exe" gather -upload
$ Expand-Archive -LiteralPath "C:\Users\testUser\AppData\Local\Temp\5DE9978A-3848-429E-8776-950FC869186F\20230607101602.zip" -DestinationPath "C:\Users\testuser\AppData\Local\Temp\5DE9978A-3848-429E-8776-950FC869186F\20230607101602"
$ code $Env:LOCALAPPDATA\Docker\log

----------------------------------------

TITLE: Removing Java Application from Kubernetes
DESCRIPTION: This shell command deletes the Kubernetes Deployment and Service objects, effectively removing the Java application from the cluster.

LANGUAGE: shell
CODE:
$ kubectl delete -f docker-java-kubernetes.yaml

----------------------------------------

TITLE: Setting Docker API Version Environment Variable
DESCRIPTION: Example showing how to force a specific API version using the DOCKER_API_VERSION environment variable

LANGUAGE: console
CODE:
$ DOCKER_API_VERSION={{ $major }}.{{ math.Sub $minor 1 }}

----------------------------------------

TITLE: Analyzing Vulnerabilities from a Docker Save Tarball
DESCRIPTION: Demonstrates how to analyze vulnerabilities from a Docker image saved as a tarball using the 'docker save' and 'docker scout cves' commands.

LANGUAGE: console
CODE:
$ docker save alpine > alpine.tar

$ docker scout cves archive://alpine.tar
Analyzing archive alpine.tar
✓ Archive read
✓ SBOM of image already cached, 18 packages indexed
✓ No vulnerable package detected

----------------------------------------

TITLE: Configuring Docker Release Notes Page in YAML
DESCRIPTION: This YAML configuration sets up the Docker release notes page. It disables build rendering, sets the page title to 'Release notes', and configures the sidebar to display items in reverse order.

LANGUAGE: yaml
CODE:
---
build:
  render: never
title: Release notes
sidebar:
  reverse: true
---

----------------------------------------

TITLE: Creating Bake Configuration File
DESCRIPTION: Command to create a new Bake configuration file.

LANGUAGE: console
CODE:
$ touch docker-bake.hcl

----------------------------------------

TITLE: Code Update Example
DESCRIPTION: Example of updating the UI text in the application code to demonstrate live reload functionality with bind mounts.

LANGUAGE: diff
CODE:
- {submitting ? 'Adding...' : 'Add Item'}
+ {submitting ? 'Adding...' : 'Add'}

----------------------------------------

TITLE: Installing Rosetta 2 on Mac with Apple Silicon
DESCRIPTION: Command to install Rosetta 2 manually from the command line on Mac systems with Apple silicon. Rosetta 2 is recommended for the best experience with Docker Desktop.

LANGUAGE: bash
CODE:
$ softwareupdate --install-rosetta

----------------------------------------

TITLE: YAML Frontmatter Configuration for Docker SSO Documentation
DESCRIPTION: Basic YAML frontmatter configuration that specifies build settings and page title for a Docker SSO documentation page. The build.render property is set to 'never' indicating this may be a template or partial file.

LANGUAGE: yaml
CODE:
build:
  render: never
title: Single sign-on

----------------------------------------

TITLE: Removing Docker Extension
DESCRIPTION: Command to completely remove a Docker extension from Docker Desktop.

LANGUAGE: console
CODE:
$ docker extension rm <name-of-your-extension>

----------------------------------------

TITLE: Streaming Command Execution with Docker Exec Interface
DESCRIPTION: Method for executing commands with streaming output capabilities. Used for long-running commands or continuous output streams like container logs. Requires command string, arguments array, and SpawnOptions parameter.

LANGUAGE: typescript
CODE:
Exec(cmd: string, args: string[], options: SpawnOptions): ExecProcess

----------------------------------------

TITLE: HTML Comment for Source Code Reference
DESCRIPTION: An HTML comment providing information about the automatic generation of the page from Docker's source code and instructions for suggesting changes through GitHub.

LANGUAGE: html
CODE:
<!--
This page is automatically generated from Docker's source code. If you want to
suggest a change to the text that appears here, open a ticket or pull request
in the source repository on GitHub:

https://github.com/docker/cli
-->

----------------------------------------

TITLE: Adding templated secrets and configs API support (Go)
DESCRIPTION: Add API support for templated secrets and configs in Docker.

LANGUAGE: Go
CODE:
Add API support for templated secrets and configs [moby/moby#33702](https://github.com/moby/moby/pull/33702) and [moby/moby#36366](https://github.com/moby/moby/pull/36366)

----------------------------------------

TITLE: Cloning the C++ Docker Sample Repository
DESCRIPTION: This command clones the sample C++ Docker repository from GitHub, which contains the necessary files for containerizing a C++ application.

LANGUAGE: console
CODE:
$ git clone https://github.com/dockersamples/c-plus-plus-docker.git

----------------------------------------

TITLE: Checking Disk Usage of Docker Buildx Builders
DESCRIPTION: Displays the disk usage of Docker Buildx builders using the docker buildx du command. The --builder flag can be used to check usage for a specific builder.

LANGUAGE: bash
CODE:
$ docker buildx du --builder my_builder
ID                                        RECLAIMABLE SIZE        LAST ACCESSED
olkri5gq6zsh8q2819i69aq6l                 true        797.2MB     37 seconds ago
6km4kasxgsywxkm6cxybdumbb*                true        438.5MB     36 seconds ago
qh3wwwda7gx2s5u4hsk0kp4w7                 true        213.8MB     37 seconds ago
54qq1egqem8max3lxq6180cj8                 true        200.2MB     37 seconds ago
ndlp969ku0950bmrw9muolw0c*                true        116.7MB     37 seconds ago
u52rcsnfd1brwc0chwsesb3io*                true        116.7MB     37 seconds ago
rzoeay0s4nmss8ub59z6lwj7d                 true        46.25MB     4 minutes ago
itk1iibhmv7awmidiwbef633q                 true        33.33MB     37 seconds ago
4p78yqnbmgt6xhcxqitdieeln                 true        19.46MB     4 minutes ago
dgkjvv4ay0szmr9bl7ynla7fy*                true        19.24MB     36 seconds ago
tuep198kmcw299qc9e4d1a8q2                 true        8.663MB     4 minutes ago
n1wzhauk9rpmt6ib1es7dktvj                 true        20.7kB      4 minutes ago
0a2xfhinvndki99y69157udlm                 true        16.56kB     37 seconds ago
gf0z1ypz54npfererqfeyhinn                 true        16.38kB     37 seconds ago
nz505f12cnsu739dw2pw0q78c                 true        8.192kB     37 seconds ago
hwpcyq5hdfvioltmkxu7fzwhb*                true        8.192kB     37 seconds ago
acekq89snc7j6im1rjdizvsg1*                true        8.192kB     37 seconds ago
Reclaimable:  2.01GB
Total:        2.01GB

----------------------------------------

TITLE: Cloning the Sample Application Repository
DESCRIPTION: Command to clone the GitHub repository containing the sample application code.

LANGUAGE: console
CODE:
$ git clone https://github.com/Davidnet/docker-genai.git

----------------------------------------

TITLE: Docker Compose Configuration with Watch Mode
DESCRIPTION: Docker Compose configuration for development with file watching capabilities for automatic updates.

LANGUAGE: yaml
CODE:
services:
  server:
    build:
      context: .
    ports:
      - 80:80
    develop:
      watch:
        - action: sync
          path: .
          target: /usr/share/nginx/html

----------------------------------------

TITLE: Comparing Most Recently Built Image to Latest Tag
DESCRIPTION: This example demonstrates how to use the 'docker scout compare' command to compare the most recently built image with the latest tag of a repository.

LANGUAGE: console
CODE:
$ docker scout compare --to namespace/repo:latest

----------------------------------------

TITLE: Configuring Systemd Socket for Docker Plugin
DESCRIPTION: Systemd socket configuration file for a Docker plugin. This setup defines the Unix socket that the plugin will listen on for communication with the Docker daemon.

LANGUAGE: systemd
CODE:
[Unit]
Description=Your plugin

[Socket]
ListenStream=/run/docker/plugins/your-plugin.sock

[Install]
WantedBy=sockets.target

----------------------------------------

TITLE: Extension Metadata Configuration
DESCRIPTION: Reference to metadata.json file that configures and controls extension components including UI, VM, and host sections.

LANGUAGE: json
CODE:
metadata.json

----------------------------------------

TITLE: Specifying DNS Servers in Docker Daemon Configuration
DESCRIPTION: This JSON configuration for the Docker daemon specifies custom DNS servers to use for name resolution.

LANGUAGE: json
CODE:
{
  "dns": ["8.8.8.8", "8.8.4.4"]
}

----------------------------------------

TITLE: Installing GNOME extensions on RHEL 8
DESCRIPTION: Commands to install and enable AppIndicator and KStatusNotifierItem GNOME extensions on RHEL 8.

LANGUAGE: bash
CODE:
$ sudo dnf install gnome-shell-extension-appindicator
$ sudo dnf install gnome-shell-extension-desktop-icons
$ sudo gnome-shell-extension-tool -e appindicatorsupport@rgcjonas.gmail.com

----------------------------------------

TITLE: Failed PID Namespace Sharing
DESCRIPTION: Shows error when attempting to share PID namespace with host system

LANGUAGE: console
CODE:
$ docker run -it --rm --pid=host alpine
docker: Error response from daemon: failed to create shim task: OCI runtime create failed: error in the container spec: invalid or unsupported container spec: sysbox containers can't share namespaces [pid] with the host (because they use the linux user-namespace for isolation): unknown.

----------------------------------------

TITLE: Executing Docker CLI Commands
DESCRIPTION: Example of executing Docker CLI commands using the exec method, which returns command output including both stdout and stderr. Includes JSON formatting and parsing capabilities.

LANGUAGE: typescript
CODE:
const result = await ddClient.docker.cli.exec("info", [
  "--format",
  '"{{ json . }}"',
]);

LANGUAGE: json
CODE:
{
  "stderr": "...",
  "stdout": "..."
}

----------------------------------------

TITLE: Multi-stage Dockerfile for C++ Application
DESCRIPTION: Dockerfile containing two stages: a build stage using Ubuntu to compile the C++ code and a runtime stage using scratch image to run the compiled binary.

LANGUAGE: dockerfile
CODE:
# Stage 1: Build stage
FROM ubuntu:latest AS build

# Install build-essential for compiling C++ code
RUN apt-get update && apt-get install -y build-essential

# Set the working directory
WORKDIR /app

# Copy the source code into the container
COPY hello.cpp .

# Compile the C++ code statically to ensure it doesn't depend on runtime libraries
RUN g++ -o hello hello.cpp -static

# Stage 2: Runtime stage
FROM scratch

# Copy the static binary from the build stage
COPY --from=build /app/hello /hello

# Command to run the binary
CMD ["/hello"]

----------------------------------------

TITLE: Running Redis Container with Restart Policy
DESCRIPTION: Example command showing how to start a Redis container with an unless-stopped restart policy.

LANGUAGE: console
CODE:
$ docker run -d --restart unless-stopped redis

----------------------------------------

TITLE: HTML Comment for Documentation Source
DESCRIPTION: HTML comment block indicating that the page is automatically generated and providing instructions for suggesting changes through GitHub.

LANGUAGE: html
CODE:
<!--
This page is automatically generated from Docker's source code. If you want to
suggest a change to the text that appears here, open a ticket or pull request
in the source repository on GitHub:

https://github.com/docker/cli
-->

----------------------------------------

TITLE: Cloning Repository Command
DESCRIPTION: Git command to clone the sample application repository

LANGUAGE: console
CODE:
$ git clone https://github.com/harsh4870/Docker-NLP.git

----------------------------------------

TITLE: Configuring Docker Build Settings in YAML
DESCRIPTION: Basic YAML configuration that specifies build rendering settings and page metadata including title and weight parameters.

LANGUAGE: yaml
CODE:
build:
  render: never
title: Explore
weight: 40

----------------------------------------

TITLE: Configuring YAML Frontmatter for Docker Documentation
DESCRIPTION: YAML configuration block that sets up document metadata including build settings, title, and weight. The build parameter prevents automatic rendering while weight determines the document's position in navigation.

LANGUAGE: yaml
CODE:
build:
  render: never
title: Docker concepts
weight: 40

----------------------------------------

TITLE: Converting Files to Unix-style Line Endings
DESCRIPTION: This console command converts files to Unix-style line endings to avoid syntax errors in Docker containers.

LANGUAGE: console
CODE:
$ dos2unix script.sh

----------------------------------------

TITLE: Inspecting Docker Context in Project Harmonia
DESCRIPTION: This command inspects the current Docker context to verify the newly created cloud engine. It's used to confirm that the user is now operating in the cloud environment.

LANGUAGE: bash
CODE:
$ docker context inspect

----------------------------------------

TITLE: Docker Compose Unpause Command Options Table
DESCRIPTION: Markdown table showing the available options for the Docker Compose unpause command, including the dry-run option which allows execution in dry run mode.

LANGUAGE: markdown
CODE:
| Name        | Type   | Default | Description                     |
|:------------|:-------|:--------|:--------------------------------|
|`--dry-run` | `bool` |         | Execute command in dry run mode |

----------------------------------------

TITLE: Docker Compose Command
DESCRIPTION: Core docker compose up command syntax that builds, creates, starts and attaches to containers for services.

LANGUAGE: markdown
CODE:
# docker compose up

----------------------------------------

TITLE: Configuring Docker Desktop Engine Documentation Layout
DESCRIPTION: YAML frontmatter that defines metadata for Docker Desktop engine documentation, including data folder structure, filename, title and layout settings.

LANGUAGE: yaml
CODE:
---
datafolder: desktop-cli
datafile: docker_desktop_engine
title: docker desktop engine
layout: cli
---

----------------------------------------

TITLE: Docker Ignore Configuration
DESCRIPTION: Configuration file specifying which files and directories should be excluded from the Docker build context.

LANGUAGE: text
CODE:
**/.classpath
**/.dockerignore
**/.env
**/.git
**/.gitignore
**/.project
**/.settings
**/.toolstarget
**/.vs
**/.vscode
**/.next
**/.cache
**/*.*proj.user
**/*.dbmdl
**/*.jfm
**/charts
**/docker-compose*
**/compose.y*ml
**/Dockerfile*
**/node_modules
**/npm-debug.log
**/obj
**/secrets.dev.yaml
**/values.dev.yaml
**/build
**/dist
LICENSE
README.md

----------------------------------------

TITLE: Setting BuildKit Max Parallelism in GitHub Actions
DESCRIPTION: Demonstrates how to limit the parallelism of the BuildKit solver using a dedicated configuration file in the repository.

LANGUAGE: toml
CODE:
# .github/buildkitd.toml
[worker.oci]
  max-parallelism = 4

LANGUAGE: yaml
CODE:
name: ci

on:
  push:

jobs:
  buildx:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          config: .github/buildkitd.toml

----------------------------------------

TITLE: Updating WSL Command
DESCRIPTION: Command to update WSL to the latest version on Windows systems.

LANGUAGE: shell
CODE:
wsl --update

----------------------------------------

TITLE: Testing Pull of Tampered Image with Content Trust
DESCRIPTION: Shell commands for attempting to pull a tampered image with content trust enabled, demonstrating how Docker rejects the corrupted image.

LANGUAGE: bash
CODE:
docker image ls | grep trusttest
docker image rm -f cc7629d1331a
docker pull sandboxregistry:5000/test/trusttest

----------------------------------------

TITLE: YAML Frontmatter Configuration
DESCRIPTION: YAML configuration block defining the page metadata including the data folder, file name, title, aliases, and layout settings for the Docker Compose documentation.

LANGUAGE: yaml
CODE:
---
datafolder: compose-cli
datafile: docker_compose_restart
title: docker compose restart
aliases:
- /compose/reference/restart/
- /engine/reference/commandline/compose_restart/
layout: cli
---

----------------------------------------

TITLE: Adding Host Entry for Docker Build
DESCRIPTION: Adds the --add-host flag to docker build command, allowing users to add custom host-to-IP mappings.

LANGUAGE: Markdown
CODE:
+ Add `--add-host` for docker build [#30383](https://github.com/docker/docker/pull/30383)

----------------------------------------

TITLE: YAML Front Matter Configuration for Docker CLI Documentation
DESCRIPTION: YAML front matter configuration block defining metadata for the Docker stack services command documentation page, including aliases and layout settings.

LANGUAGE: yaml
CODE:
datafolder: engine-cli
datafile: docker_stack_services
title: docker stack services
aliases:
- /edge/engine/reference/commandline/stack_services/
- /engine/reference/commandline/stack_services/
layout: cli

----------------------------------------

TITLE: Configuring Dockerfile for Docker Extension with Go Backend
DESCRIPTION: A Dockerfile that builds the Go backend application, copies the binary to the extension's container filesystem, and starts the binary when the container starts.

LANGUAGE: dockerfile
CODE:
# syntax=docker/dockerfile:1
FROM node:17.7-alpine3.14 AS client-builder
# ... build frontend application

# Build the Go backend
FROM golang:1.17-alpine AS builder
ENV CGO_ENABLED=0
WORKDIR /backend
COPY vm/go.* .
RUN --mount=type=cache,target=/go/pkg/mod \
    --mount=type=cache,target=/root/.cache/go-build \
    go mod download
COPY vm/. .
RUN --mount=type=cache,target=/go/pkg/mod \
    --mount=type=cache,target=/root/.cache/go-build \
    go build -trimpath -ldflags="-s -w" -o bin/service

FROM alpine:3.15
# ... add labels and copy the frontend application

COPY --from=builder /backend/bin/service /
CMD /service -socket /run/guest-services/extension-allthethings-extension.sock

----------------------------------------

TITLE: Attestation Manifest Example
DESCRIPTION: Example of an attestation manifest containing an in-toto attestation with SPDX document predicate type.

LANGUAGE: json
CODE:
{
  "mediaType": "application/vnd.oci.image.manifest.v1+json",
  "schemaVersion": 2,
  "config": {
    "mediaType": "application/vnd.oci.image.config.v1+json",
    "digest": "sha256:a781560066f20ec9c28f2115a95a886e5e71c7c7aa9d8fd680678498b82f3ea3",
    "size": 123
  },
  "layers": [
    {
      "mediaType": "application/vnd.in-toto+json",
      "digest": "sha256:133ae3f9bcc385295b66c2d83b28c25a9f294ce20954d5cf922dda860429734a",
      "size": 1234,
      "annotations": {
        "in-toto.io/predicate-type": "https://spdx.dev/Document"
      }
    }
  ]
}

----------------------------------------

TITLE: Formatting Python Code in Documentation
DESCRIPTION: Demonstrates how to format Python code in documentation using the 'python' language code block. This example shows a Python function using environment variables and socket operations.

LANGUAGE: python
CODE:
return html.format(name=os.getenv('NAME', "world"), hostname=socket.gethostname(), visits=visits)

----------------------------------------

TITLE: Mac Docker Diagnostics Commands
DESCRIPTION: Commands for running Docker Desktop diagnostics and accessing logs on Mac systems.

LANGUAGE: bash
CODE:
$ /Applications/Docker.app/Contents/MacOS/com.docker.diagnose
$ /Applications/Docker.app/Contents/MacOS/com.docker.diagnose gather -upload
$ open /tmp/<your-diagnostics-ID>.zip
$ pred='process matches ".*(ocker|vpnkit).*" || (process in {"taskgated-helper", "launchservicesd", "kernel"} && eventMessage contains[c] "docker")'
$ /usr/bin/log stream --style syslog --level=debug --color=always --predicate "$pred"

----------------------------------------

TITLE: Docker Compose Multiple File Usage
DESCRIPTION: Demonstrates how to use multiple Compose files with the -f flag to combine configurations.

LANGUAGE: console
CODE:
$ docker compose -f docker-compose.yml -f docker-compose.admin.yml run backup_db

----------------------------------------

TITLE: Defining Options for Docker Compose Wait Command in Markdown
DESCRIPTION: This markdown table defines the options available for the 'docker compose wait' command. It includes the option names, types, default values, and descriptions.

LANGUAGE: markdown
CODE:
| Name             | Type   | Default | Description                                  |
|:-----------------|:-------|:--------|:---------------------------------------------|
| `--down-project` | `bool` |         | Drops project when the first container stops |
| `--dry-run`      | `bool` |         | Execute command in dry run mode              |

----------------------------------------

TITLE: Generating GPG Key for Docker Desktop Linux Authentication
DESCRIPTION: Command to generate a GPG key required for initializing pass authentication in Docker Desktop for Linux.

LANGUAGE: console
CODE:
$ gpg --generate-key

----------------------------------------

TITLE: Rust Hello World Dockerfile
DESCRIPTION: Dockerfile that compiles a simple Rust program using multi-stage builds. The first stage compiles the program, and the second stage creates a minimal image with just the binary.

LANGUAGE: dockerfile
CODE:
# syntax=docker/dockerfile:1
FROM rust:alpine AS build
WORKDIR /src
COPY <<EOT hello.rs
fn main() {
    println!("Hello World!");
}
EOT
RUN rustc -o /bin/hello hello.rs

FROM scratch
COPY --from=build /bin/hello /
ENTRYPOINT ["/hello"]

----------------------------------------

TITLE: Invalid Name ID Format Error
DESCRIPTION: Error message displayed when the Name ID provided by the identity provider is not in email address format.

LANGUAGE: text
CODE:
The name ID sent by the identity provider is not an email address. Contact your company administrator.

----------------------------------------

TITLE: Running Automated Tests with Docker Compose
DESCRIPTION: This snippet demonstrates how to use Docker Compose commands to create an isolated testing environment, run tests, and then tear down the environment. It shows the simplicity of managing the test lifecycle using Compose.

LANGUAGE: console
CODE:
$ docker compose up -d
$ ./run_tests
$ docker compose down

----------------------------------------

TITLE: Pipeline Execution Rules
DESCRIPTION: Defines conditions for when the pipeline should run, requiring the presence of a Dockerfile and a commit to the CI branch.

LANGUAGE: yaml
CODE:
rules:
  - if: $CI_COMMIT_BRANCH
    exists:
      - Dockerfile

----------------------------------------

TITLE: Using GitHub Cache API Backend with Docker in GitHub Actions
DESCRIPTION: This snippet illustrates how to use the GitHub Actions cache exporter backend, which utilizes the GitHub Cache API. It's specifically designed for use within a GitHub Action workflow context.

LANGUAGE: yaml
CODE:
name: ci

on:
  push:

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: user/app:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

----------------------------------------

TITLE: HTML Comment for Documentation Source
DESCRIPTION: HTML comment block indicating that the page is automatically generated and providing instructions for contributing changes through GitHub.

LANGUAGE: html
CODE:
<!--
This page is automatically generated from Docker's source code. If you want to
suggest a change to the text that appears here, open a ticket or pull request
in the source repository on GitHub:

https://github.com/docker/cli
-->

----------------------------------------

TITLE: Executing Host Commands in TypeScript
DESCRIPTION: Demonstrates how to execute binaries defined in the host section of the extension metadata using the execHostCmd method. This method is deprecated and will be replaced by the exec method.

LANGUAGE: typescript
CODE:
window.ddClient.execHostCmd(`cliShippedOnHost xxx`).then((cmdResult: any) => {
 console.log(cmdResult);
});

----------------------------------------

TITLE: Listing Docker Compose Images Command Options
DESCRIPTION: This snippet presents a markdown table detailing the options available for the 'docker compose images' command. It includes option names, types, default values, and descriptions.

LANGUAGE: markdown
CODE:
| Name            | Type     | Default | Description                                |
|:----------------|:---------|:--------|:-------------------------------------------|
| `--dry-run`     | `bool`   |         | Execute command in dry run mode            |
| `--format`      | `string` | `table` | Format the output. Values: [table \| json] |
| `-q`, `--quiet` | `bool`   |         | Only display IDs                           |

----------------------------------------

TITLE: Configuring Docker Build Settings in YAML
DESCRIPTION: Basic YAML configuration for a documentation page that specifies build settings and page metadata. Includes render settings, page title, and weight parameters.

LANGUAGE: yaml
CODE:
build:
  render: never
title: Useful components
weight: 50

----------------------------------------

TITLE: Listing Kubernetes Namespaces in TypeScript
DESCRIPTION: This snippet demonstrates how to list Kubernetes namespaces using the kubectl command through the ddClient.extension.host?.cli.exec API. It retrieves namespace names without headers.

LANGUAGE: typescript
CODE:
const output = await ddClient.extension.host?.cli.exec("kubectl", [
  "get",
  "namespaces",
  "--no-headers",
  "-o",
  'custom-columns=":metadata.name"',
  "--context",
  "docker-desktop",
]);

----------------------------------------

TITLE: Stopping a Container in Project Harmonia
DESCRIPTION: This command stops the running Nginx container in the cloud engine. It demonstrates how to manage container lifecycle in the cloud environment.

LANGUAGE: bash
CODE:
$ docker kill cloudnginx

----------------------------------------

TITLE: Configuring Default Network Options
DESCRIPTION: Demonstrates how to configure default network options for the bridge driver using the daemon.json file.

LANGUAGE: json
CODE:
{
  "default-network-opts": {
    "bridge": {
      "com.docker.network.bridge.host_binding_ipv4": "127.0.0.1",
      "com.docker.network.driver.mtu": "1234"
    }
  }
}

----------------------------------------

TITLE: Docker Compose Watch Command Options Table
DESCRIPTION: Markdown table displaying the available options for the docker compose watch command, including dry-run mode, no-up flag, pruning, and quiet mode settings.

LANGUAGE: markdown
CODE:
| Name        | Type   | Default | Description                                   |
|:------------|:-------|:--------|:----------------------------------------------|
| `--dry-run` | `bool` |         | Execute command in dry run mode               |
| `--no-up`   | `bool` |         | Do not build & start services before watching |
| `--prune`   | `bool` |         | Prune dangling images on rebuild              |
| `--quiet`   | `bool` |         | hide build output                             |

----------------------------------------

TITLE: Setting up Zsh Completion with Oh My Zsh
DESCRIPTION: Commands to generate and install Docker CLI completion for Zsh when using Oh My Zsh.

LANGUAGE: console
CODE:
$ mkdir -p ~/.oh-my-zsh/completions\n$ docker completion zsh > ~/.oh-my-zsh/completions/_docker

----------------------------------------

TITLE: Using Docker Driver with Buildx in Console
DESCRIPTION: This snippet demonstrates how to use the Docker driver with Buildx. The Docker driver is used by default, so no special configuration is needed. It simply shows the command to build a Docker image using Buildx in the current directory.

LANGUAGE: console
CODE:
# The Docker driver is used by buildx by default
docker buildx build .

----------------------------------------

TITLE: YAML Front Matter for Docker Engine API v1.42 Documentation
DESCRIPTION: YAML front matter block defining metadata for the Docker Engine API v1.42 documentation page, including the link title, page title, and URL aliases.

LANGUAGE: yaml
CODE:
linkTitle: v1.42
title: Docker Engine API v1.42 reference
aliases:
  - /engine/api/v1.42/

----------------------------------------

TITLE: Configuring Registry Mirror in GitHub Actions
DESCRIPTION: Sets up a registry mirror for BuildKit using an inline configuration block in the Setup Buildx Action.

LANGUAGE: yaml
CODE:
name: ci

on:
  push:

jobs:
  buildx:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-config-inline: |
            [registry."docker.io"]
              mirrors = ["mirror.gcr.io"]

----------------------------------------

TITLE: Basic Docker Filter Command Syntax
DESCRIPTION: Demonstrates the basic syntax for using the --filter flag with Docker commands. Shows how to specify key-value pairs with operators for filtering.

LANGUAGE: console
CODE:
$ docker COMMAND --filter "KEY=VALUE"

----------------------------------------

TITLE: Checking Kubernetes Service Status
DESCRIPTION: This shell command lists the Kubernetes services to confirm that the Java application service is properly exposed.

LANGUAGE: shell
CODE:
$ kubectl get services

----------------------------------------

TITLE: Accessing Host Service from Container
DESCRIPTION: Command to access a service running on port 80 of the host from within a container.

LANGUAGE: console
CODE:
$ nc localhost 80

----------------------------------------

TITLE: Checking WSL2 Kernel Version
DESCRIPTION: Command to determine the current kernel version running in WSL2 environment. This information is crucial for matching custom kernel versions with the official distribution.

LANGUAGE: bash
CODE:
wsl.exe --system uname -r

----------------------------------------

TITLE: Displaying SBOM Package List in Docker Scout
DESCRIPTION: This command displays the list of packages in the SBOM for the Alpine image using the Docker Scout tool.

LANGUAGE: console
CODE:
$ docker scout sbom --format list alpine

----------------------------------------

TITLE: Configuring YAML Frontmatter for Testcontainers Cloud Page
DESCRIPTION: YAML frontmatter configuration block that defines metadata for a documentation page about Testcontainers Cloud. Includes title, weight for ordering, and sidebar parameters with grouping and external link.

LANGUAGE: yaml
CODE:
title: Testcontainers Cloud
weight: 70
params:
  sidebar:
    group: Products
    goto: "https://testcontainers.com/cloud/docs/"

----------------------------------------

TITLE: Filtering CVEs with CISA KEV in Docker Scout GitHub Action
DESCRIPTION: Shows how to use the only-cisa-kev option in the Docker Scout GitHub Action to filter CVEs listed in the CISA Known Exploited Vulnerabilities catalog.

LANGUAGE: yaml
CODE:
uses: docker/scout-action@v1
with:
  command: cves
  image: [IMAGE]
  only-cisa-kev: true

----------------------------------------

TITLE: Implementing StartMetrics Endpoint for Docker MetricsCollector
DESCRIPTION: The StartMetrics endpoint signals that the metrics socket is available for scraping. It requires an empty request and returns a response with an optional error message.

LANGUAGE: json
CODE:
// Request:
{}

// Response:
{
  "Err": ""
}

----------------------------------------

TITLE: Running Docker Container
DESCRIPTION: Commands to run the Docker container and attempt to list files.

LANGUAGE: bash
CODE:
$ docker run hello
$ docker run hello ls

----------------------------------------

TITLE: Pinning Alpine Image Version with Docker Bake
DESCRIPTION: Demonstrates how to pin a specific Alpine image version using additional build contexts in Docker Bake. The Dockerfile creates a basic Alpine container while the HCL configuration pins it to version 3.13.

LANGUAGE: dockerfile
CODE:
# syntax=docker/dockerfile:1
FROM alpine
RUN echo "Hello world"

LANGUAGE: hcl
CODE:
target "app" {
  contexts = {
    alpine = "docker-image://alpine:3.13"
  }
}

----------------------------------------

TITLE: Running Wasm Application with Docker Run
DESCRIPTION: This snippet demonstrates how to start a Wasm container using the docker run command. It specifies the Wasm runtime and platform.

LANGUAGE: console
CODE:
$ docker run \
  --runtime=io.containerd.wasmedge.v1 \
  --platform=wasi/wasm \
  secondstate/rust-example-hello

----------------------------------------

TITLE: Manually uninstalling Docker Compose CLI plugin for all users
DESCRIPTION: Command to manually remove the Docker Compose CLI plugin for all users on the system.

LANGUAGE: console
CODE:
$ rm /usr/local/lib/docker/cli-plugins/docker-compose

----------------------------------------

TITLE: Uninstalling Docker Compose CLI plugin on Ubuntu/Debian
DESCRIPTION: Command to remove the Docker Compose CLI plugin on Ubuntu or Debian-based systems using apt-get.

LANGUAGE: console
CODE:
$ sudo apt-get remove docker-compose-plugin

----------------------------------------

TITLE: Configuring Annotation Levels in GitHub Actions
DESCRIPTION: This YAML snippet shows how to configure annotation levels for OCI image components in a GitHub Actions workflow. It sets the DOCKER_METADATA_ANNOTATIONS_LEVELS environment variable to specify annotation levels for both the image index and manifests.

LANGUAGE: yaml
CODE:
name: ci

on:
  push:

env:
  IMAGE_NAME: user/app

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
        env:
          DOCKER_METADATA_ANNOTATIONS_LEVELS: manifest,index

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          tags: ${{ steps.meta.outputs.tags }}
          annotations: ${{ steps.meta.outputs.annotations }}
          push: true

----------------------------------------

TITLE: Docker Compose Exec Command Options Table
DESCRIPTION: A markdown table listing all available options for the 'docker compose exec' command, including their names, types, default values, and descriptions.

LANGUAGE: markdown
CODE:
| Name              | Type          | Default | Description                                                                      |
|:------------------|:--------------|:--------|:----------------------------------------------------------------------------------|
| `-d`, `--detach`  | `bool`        |         | Detached mode: Run command in the background                                     |
| `--dry-run`       | `bool`        |         | Execute command in dry run mode                                                  |
| `-e`, `--env`     | `stringArray` |         | Set environment variables                                                        |
| `--index`         | `int`         | `0`     | Index of the container if service has multiple replicas                          |
| `-T`, `--no-TTY`  | `bool`        | `true`  | Disable pseudo-TTY allocation. By default `docker compose exec` allocates a TTY. |
| `--privileged`    | `bool`        |         | Give extended privileges to the process                                          |
| `-u`, `--user`    | `string`      |         | Run the command as this user                                                     |
| `-w`, `--workdir` | `string`      |         | Path to workdir directory for this command                                       |

----------------------------------------

TITLE: Building Multi-Platform Docker Image
DESCRIPTION: Command to build a Docker image for the amd64 platform, compatible with Play with Docker. Replace YOUR-USER-NAME with your Docker ID.

LANGUAGE: bash
CODE:
docker build --platform linux/amd64 -t YOUR-USER-NAME/getting-started .

----------------------------------------

TITLE: Submit Docker Feedback via CLI
DESCRIPTION: Using the docker feedback command to submit feedback directly from the command line interface

LANGUAGE: bash
CODE:
docker feedback

----------------------------------------

TITLE: Opening VS Code in WSL Project Directory
DESCRIPTION: This command opens Visual Studio Code in the current directory within the WSL environment. It assumes you've navigated to your project directory in WSL first.

LANGUAGE: console
CODE:
$ code .

----------------------------------------

TITLE: Accessing Docker Desktop VM in WSL
DESCRIPTION: Command that demonstrates how users can access the Docker Desktop Linux VM as root in WSL environment.

LANGUAGE: shell
CODE:
wsl -d docker-desktop

----------------------------------------

TITLE: Configuring Docker Troubleshooting Page Settings in YAML
DESCRIPTION: YAML configuration that specifies build parameters and metadata for a Docker troubleshooting documentation page. Sets the build render option to 'never', defines the page title as 'Troubleshoot', and assigns a weight of 40 for page ordering.

LANGUAGE: yaml
CODE:
build:
  render: never
title: Troubleshoot
weight: 40

----------------------------------------

TITLE: Tagging Docker Image for Repository
DESCRIPTION: Command to tag an existing Docker image with a new name for pushing to Docker Hub. Replace YOUR-USER-NAME with your Docker ID.

LANGUAGE: bash
CODE:
docker tag getting-started YOUR-USER-NAME/getting-started

----------------------------------------

TITLE: Listing Shared Ports in Project Harmonia
DESCRIPTION: This command lists all shared ports for the current Docker context in Project Harmonia. It helps manage and track publicly accessible endpoints for cloud-based applications.

LANGUAGE: bash
CODE:
$ docker harmonia engine share list

----------------------------------------

TITLE: Docker Template Variable Definition
DESCRIPTION: Hugo template variables defining product links and navigation instructions for SSO configuration based on product type.

LANGUAGE: html
CODE:
{{ $product_link := "[Docker Hub](https://hub.docker.com)" }}
{{ $sso_navigation := `Navigate to the SSO settings page for your organization. Select **Organizations**, your organization, **Settings**, and then **Security**.` }}

{{ if eq (.Get "product") "admin" }}
  {{ $product_link = "the [Admin Console](https://admin.docker.com)" }}
  {{ $sso_navigation = "Select your organization or company from the **Choose profile** page, and then select **SSO and SCIM**. Note that when an organization is part of a company, you must select the company and configure SSO for that organization at the company level. Each organization can have its own SSO configuration and domain, but it must be configured at the company level." }}
{{ end }}

----------------------------------------

TITLE: Basic Docker Scout CVEs Command Syntax
DESCRIPTION: Demonstrates the basic syntax for the 'docker scout cves' command, showing the command structure and placeholder for options and arguments.

LANGUAGE: console
CODE:
docker scout cves [OPTIONS] [IMAGE|DIRECTORY|ARCHIVE]

----------------------------------------

TITLE: Running Docker Container with Fluentd Logging Driver
DESCRIPTION: Command-line examples for running Docker containers with the Fluentd logging driver. These commands demonstrate how to specify the log driver and set the Fluentd daemon address.

LANGUAGE: console
CODE:
$ docker run --log-driver=fluentd ...
$ docker run --log-driver=fluentd --log-opt fluentd-address=fluentdhost:24224

----------------------------------------

TITLE: Plugin Configuration JSON Structure
DESCRIPTION: Example configuration file for a Docker volume plugin showing required fields including description, documentation, entrypoint, network settings, and Linux capabilities.

LANGUAGE: json
CODE:
{
  "description": "sshFS plugin for Docker",
  "documentation": "https://docs.docker.com/engine/extend/plugins/",
  "entrypoint": ["/docker-volume-sshfs"],
  "network": {
    "type": "host"
  },
  "interface": {
    "types": ["docker.volumedriver/1.0"],
    "socket": "sshfs.sock"
  },
  "linux": {
    "capabilities": ["CAP_SYS_ADMIN"]
  }
}

----------------------------------------

TITLE: Complex Profile Dependencies in Docker Compose YAML
DESCRIPTION: This YAML snippet demonstrates a more complex setup with multiple profiled services and dependencies. It shows how profiles interact with service dependencies.

LANGUAGE: yaml
CODE:
services:
  web:
    image: web

  mock-backend:
    image: backend
    profiles: ["dev"]
    depends_on:
      - db

  db:
    image: mysql
    profiles: ["dev"]

  phpmyadmin:
    image: phpmyadmin
    profiles: ["debug"]
    depends_on:
      - db

----------------------------------------

TITLE: Markdown frontmatter configuration for release notes page
DESCRIPTION: YAML frontmatter configuration for the Docker Engine release notes page that defines metadata like title, keywords, and aliases

LANGUAGE: yaml
CODE:
---
title: Docker Engine version 28 release notes
linkTitle: Engine v28
description: Learn about the new features, bug fixes, and breaking changes for Docker Engine
keywords: docker, docker engine, ce, whats new, release notes
toc_min: 1
toc_max: 2
tags:
  - Release notes
aliases:
- /engine/release-notes/
- /engine/release-notes/latest/
- /release-notes/docker-ce/
- /release-notes/docker-engine/
- /engine/release-notes/28.0/
---

----------------------------------------

TITLE: Docker Build-Push-Action with GHA Cache
DESCRIPTION: GitHub Actions workflow configuration using docker/build-push-action with automatic GHA cache integration.

LANGUAGE: yaml
CODE:
- name: Build and push
  uses: docker/build-push-action@v6
  with:
    context: .
    push: true
    tags: "<registry>/<image>:latest"
    cache-from: type=gha
    cache-to: type=gha,mode=max

----------------------------------------

TITLE: Displaying Project Directory Structure
DESCRIPTION: Shows the directory structure of the PHP project after initializing Docker assets.

LANGUAGE: text
CODE:
├── docker-php-sample/
│ ├── .git/
│ ├── src/
│ ├── tests/
│ ├── .dockerignore
│ ├── .gitignore
│ ├── compose.yaml
│ ├── composer.json
│ ├── composer.lock
│ ├── Dockerfile
│ ├── README.Docker.md
│ └── README.md

----------------------------------------

TITLE: Custom Nginx Dockerfile Definition
DESCRIPTION: Dockerfile that extends the official Nginx image to create a custom container with a modified index page.

LANGUAGE: dockerfile
CODE:
FROM nginx
RUN echo "<h1>Hello world from Docker!</h1>" > /usr/share/nginx/html/index.html

----------------------------------------

TITLE: HTTP PATCH Request Implementation
DESCRIPTION: Shows how to make an HTTP PATCH request to a backend service. This method is deprecated in favor of HttpService.patch.

LANGUAGE: typescript
CODE:
window.ddClient.backend
 .patch("/some/service", { ... })
 .then((value: any) => console.log(value));

----------------------------------------

TITLE: Basic Docker Compose Command with Multiple Files
DESCRIPTION: Example of using multiple Compose files with the -f flag to run a backup_db service

LANGUAGE: console
CODE:
$ docker compose -f compose.yaml -f compose.admin.yaml run backup_db

----------------------------------------

TITLE: Analyzing SPDX File with Docker Scout Quickview
DESCRIPTION: Example demonstrating how to analyze an SPDX file generated from an Alpine image using syft and piping it to docker scout quickview.

LANGUAGE: console
CODE:
$  syft -o spdx-json alpine:3.16.1 | docker scout quickview sbom://
 ✔ Loaded image                                                                                                                              alpine:3.16.1
 ✔ Parsed image                                                                    sha256:3d81c46cd8756ddb6db9ec36fa06a6fb71c287fb265232ba516739dc67a5f07d
 ✔ Cataloged contents                                                                     274a317d88b54f9e67799244a1250cad3fe7080f45249fa9167d1f871218d35f
   ├── ✔ Packages                        [14 packages]
   ├── ✔ File digests                    [75 files]
   ├── ✔ File metadata                   [75 locations]
   └── ✔ Executables                     [16 executables]

  Target   │ <stdin>        │    1C     2H     8M     0L
    digest │  274a317d88b5  │

----------------------------------------

TITLE: Configuring Docker Release Notes Page Settings in YAML
DESCRIPTION: YAML configuration that sets up a documentation page for Docker release notes. Specifies that the page should never be rendered during build, sets the title to 'Release notes', and assigns a weight of 999 for ordering purposes.

LANGUAGE: yaml
CODE:
build:\n  render: never\ntitle: Release notes\nweight: 999

----------------------------------------

TITLE: Setting Environment Variables for Node.js Application Build
DESCRIPTION: This Dockerfile example shows how to set an environment variable (NODE_ENV) to configure the build process for a Node.js application. It demonstrates setting the production environment before installing dependencies.

LANGUAGE: Dockerfile
CODE:
# syntax=docker/dockerfile:1

FROM node:20
WORKDIR /app
COPY package*.json ./
ENV NODE_ENV=production
RUN npm ci && npm cache clean --force
COPY . .
CMD ["node", "app.js"]

----------------------------------------

TITLE: Incorrect Usage of Undefined Variable in Dockerfile ARG Instruction
DESCRIPTION: Illustrates incorrect usage of an undefined variable '$foo' in a Dockerfile ARG instruction. This can lead to unexpected values or errors.

LANGUAGE: dockerfile
CODE:
FROM alpine AS base
ARG VERSION=$foo

----------------------------------------

TITLE: Running Docker Container with Custom Log Tag
DESCRIPTION: This command demonstrates how to run a Docker container with a custom log tag using the Fluentd log driver.

LANGUAGE: console
CODE:
$ docker run --log-driver=fluentd --log-opt fluentd-address=myhost.local:24224 --log-opt tag="mailer"

----------------------------------------

TITLE: Changing Background Color in SCSS
DESCRIPTION: Update the background color of the application using SCSS.

LANGUAGE: css
CODE:
body {
    background-color: #99bbff;
    margin-top: 50px;
    font-family: 'Lato';
}

----------------------------------------

TITLE: Docker Compose Main Configuration with Multiple Includes
DESCRIPTION: Example of including multiple team-specific compose files in the main configuration.

LANGUAGE: yaml
CODE:
include:
  - team-1/compose.yaml # declare service-1
  - team-2/compose.yaml # declare service-2

----------------------------------------

TITLE: Creating Remote Buildx Driver with Unix Socket
DESCRIPTION: This snippet shows how to create a Buildx builder using the remote driver, connecting to a BuildKit instance via a Unix socket.

LANGUAGE: console
CODE:
$ docker buildx create \
  --name remote-unix \
  --driver remote \
  unix://$HOME/buildkitd.sock

----------------------------------------

TITLE: Configuring Splunk Logging Driver in daemon.json
DESCRIPTION: This JSON snippet shows how to configure the Splunk logging driver as the default driver in the daemon.json configuration file. It sets the log-driver to 'splunk' and specifies log-opts for the Splunk token and URL.

LANGUAGE: json
CODE:
{
  "log-driver": "splunk",
  "log-opts": {
    "splunk-token": "",
    "splunk-url": "",
    ...
  }
}

----------------------------------------

TITLE: Displaying 500 Response Code Error in Docker CLI
DESCRIPTION: This snippet shows the error message displayed when there is a temporary Docker Hub service issue. It indicates an unexpected server error has occurred.

LANGUAGE: text
CODE:
Unexpected status code 500

----------------------------------------

TITLE: Stopping Docker Compose
DESCRIPTION: Command to stop and remove the running containers.

LANGUAGE: console
CODE:
$ docker compose down

----------------------------------------

TITLE: Conditional Product-Specific Template Logic
DESCRIPTION: Conditional template logic that sets different navigation instructions and product links based on the 'admin' product parameter.

LANGUAGE: golang
CODE:
{{ if eq (.Get "product") "admin" }}
  {{ $product_link = "the [Admin Console](https://app.docker.com/admin)" }}
  {{ $sso_navigation = "Select your organization or company from the **Choose profile** page, and then select **SSO and SCIM**." }}
{{ end }}

----------------------------------------

TITLE: Converting Compose Files from Different Directory
DESCRIPTION: Command to convert a Docker Compose file located in a different directory using the -f flag to specify the file path.

LANGUAGE: console
CODE:
$ compose-bridge convert -f <path-to-file>/compose.yaml

----------------------------------------

TITLE: Stopping Docker Compose Project in Project Harmonia
DESCRIPTION: This command stops and removes all containers, networks, and volumes defined in the Docker Compose file. It's used for cleaning up resources in the cloud engine.

LANGUAGE: bash
CODE:
$ docker compose down

----------------------------------------

TITLE: YAML Front Matter for Node.js Docker Documentation
DESCRIPTION: YAML metadata block defining the title, description, service type and URL aliases for a Node.js Docker samples documentation page.

LANGUAGE: yaml
CODE:
---
title: Node.js samples
description: Docker samples for Node.js.
service: nodejs
aliases:
- /samples/nodejs/
---

----------------------------------------

TITLE: ENV Instruction for Setting Environment Variables
DESCRIPTION: Demonstrates how to use the ENV instruction to set environment variables in the image.

LANGUAGE: dockerfile
CODE:
ENV MY_NAME="John Doe"
ENV MY_DOG=Rex\ The\ Dog
ENV MY_CAT=fluffy

----------------------------------------

TITLE: Rotating Docker Configs
DESCRIPTION: Demonstrates how to update a Docker config by creating a new version and updating the service to use it.

LANGUAGE: bash
CODE:
docker config create site-v2.conf site.conf

docker service update \
  --config-rm site.conf \
  --config-add source=site-v2.conf,target=/etc/nginx/conf.d/site.conf,mode=0440 \
  nginx

----------------------------------------

TITLE: Sample Compose Bridge Conversion Output
DESCRIPTION: Example output showing the Kubernetes resource files generated by Compose Bridge, including deployments, services, network policies, and volume claims.

LANGUAGE: console
CODE:
$ compose-bridge convert -f compose.yaml 
Kubernetes resource api-deployment.yaml created
Kubernetes resource db-deployment.yaml created
Kubernetes resource web-deployment.yaml created
Kubernetes resource api-expose.yaml created
Kubernetes resource db-expose.yaml created
Kubernetes resource web-expose.yaml created
Kubernetes resource 0-avatars-namespace.yaml created
Kubernetes resource default-network-policy.yaml created
Kubernetes resource private-network-policy.yaml created
Kubernetes resource public-network-policy.yaml created
Kubernetes resource db-db_data-persistentVolumeClaim.yaml created
Kubernetes resource api-service.yaml created
Kubernetes resource web-service.yaml created
Kubernetes resource kustomization.yaml created
Kubernetes resource db-db_data-persistentVolumeClaim.yaml created
Kubernetes resource api-service.yaml created
Kubernetes resource web-service.yaml created
Kubernetes resource kustomization.yaml created

----------------------------------------

TITLE: Docker API Connection Examples
DESCRIPTION: Examples showing different methods to connect to the Docker daemon API, including SSH and socket-based connections.

LANGUAGE: bash
CODE:
DOCKER_HOST=ssh://USER@HOST
ssh -L /path/to/docker.sock:/var/run/docker.sock

----------------------------------------

TITLE: HTML Comment for Source Code Attribution
DESCRIPTION: HTML comment block indicating that the page is automatically generated from Docker's source code and providing instructions for suggesting changes via GitHub.

LANGUAGE: html
CODE:
<!--
This page is automatically generated from Docker's source code. If you want to
suggest a change to the text that appears here, open a ticket or pull request
in the source repository on GitHub:

https://github.com/docker/cli
-->

----------------------------------------

TITLE: Manual Installation of Docker Compose Plugin
DESCRIPTION: Commands for manually downloading and installing Docker Compose CLI plugin for a single user, including creating necessary directories and downloading the binary.

LANGUAGE: console
CODE:
$ DOCKER_CONFIG=${DOCKER_CONFIG:-$HOME/.docker}
$ mkdir -p $DOCKER_CONFIG/cli-plugins
$ curl -SL https://github.com/docker/compose/releases/download/{{% param "compose_version" %}}/docker-compose-linux-x86_64 -o $DOCKER_CONFIG/cli-plugins/docker-compose

----------------------------------------

TITLE: Incorrect Usage of Secrets in Dockerfile ARG Command
DESCRIPTION: This snippet demonstrates an insecure practice of using a secret value (AWS_SECRET_ACCESS_KEY) as an ARG in a Dockerfile. This approach is discouraged as it can lead to the secret persisting in the final image.

LANGUAGE: dockerfile
CODE:
FROM scratch
ARG AWS_SECRET_ACCESS_KEY

----------------------------------------

TITLE: Configuring Docker Documentation Page Settings in YAML
DESCRIPTION: YAML frontmatter configuration that sets up a documentation page for Docker how-to guides. Specifies build settings, page title, and weight for navigation ordering.

LANGUAGE: yaml
CODE:
build:
  render: never
title: How-tos
weight: 40

----------------------------------------

TITLE: Creating Collapsible Dockerfile Code Blocks
DESCRIPTION: Shows how to create a collapsible code block for a Dockerfile using the collapse attribute. This example includes a multi-stage Dockerfile with various build steps and configurations.

LANGUAGE: dockerfile
CODE:
# syntax=docker/dockerfile:1

ARG GO_VERSION="1.21"

FROM golang:${GO_VERSION}-alpine AS base
ENV CGO_ENABLED=0
ENV GOPRIVATE="github.com/foo/*"
RUN apk add --no-cache file git rsync openssh-client
RUN mkdir -p -m 0700 ~/.ssh && ssh-keyscan github.com >> ~/.ssh/known_hosts
WORKDIR /src

FROM base AS vendor
# this step configure git and checks the ssh key is loaded
RUN --mount=type=ssh <<EOT
  set -e
  echo "Setting Git SSH protocol"
  git config --global url."git@github.com:".insteadOf "https://github.com/"
  (
    set +e
    ssh -T git@github.com
    if [ ! "$?" = "1" ]; then
      echo "No GitHub SSH key loaded exiting..."
      exit 1
    fi
  )
EOT
# this one download go modules
RUN --mount=type=bind,target=. \
    --mount=type=cache,target=/go/pkg/mod \
    --mount=type=ssh \
    go mod download -x

FROM vendor AS build
RUN --mount=type=bind,target=. \
    --mount=type=cache,target=/go/pkg/mod \
    --mount=type=cache,target=/root/.cache \
    go build ...

----------------------------------------

TITLE: Displaying Docker CLI Help Output
DESCRIPTION: Wraps the output of docker CLI --help to the terminal width for improved readability.

LANGUAGE: Markdown
CODE:
* Output of docker CLI --help is now wrapped to the terminal width [#28751](https://github.com/docker/docker/pull/28751)

----------------------------------------

TITLE: Inspecting Docker Content Trust Data
DESCRIPTION: Shows how to view remote trust data for a Docker image tag or repository using the docker trust inspect command.

LANGUAGE: bash
CODE:
$ docker trust inspect --pretty registry.example.com/admin/demo:1

Signatures for registry.example.com/admin/demo:1

SIGNED TAG          DIGEST                                                             SIGNERS
1                   3d2e482b82608d153a374df3357c0291589a61cc194ec4a9ca2381073a17f58e   jeff

List of signers and their keys for registry.example.com/admin/demo:1

SIGNER              KEYS
jeff                8ae710e3ba82

Administrative keys for registry.example.com/admin/demo:1

  Repository Key:	10b5e94c916a0977471cc08fa56c1a5679819b2005ba6a257aa78ce76d3a1e27
  Root Key:	84ca6e4416416d78c4597e754f38517bea95ab427e5f95871f90d460573071fc

----------------------------------------

TITLE: Variable Definition using Go Templates
DESCRIPTION: Template variables defining product links and navigation instructions that change based on product context (admin vs default).

LANGUAGE: go-template
CODE:
{{ $product_link := "[Docker Hub](https://hub.docker.com)" }}
{{ $sso_navigation := `Navigate to the SSO settings page for your organization. Select **Organizations**, your organization, **Settings**, and then **Security**.` }}

{{ if eq (.Get "product") "admin" }}
  {{ $product_link = "the [Admin Console](https://admin.docker.com)" }}
  {{ $sso_navigation = "Select your organization or company from the **Choose profile** page, and then select **SSO and SCIM**. Note that when an organization is part of a company, you must select the company and configure SSO for that organization at the company level. Each organization can have its own SSO configuration and domain, but it must be configured at the company level." }}
{{ end }}

----------------------------------------

TITLE: Publishing Ports and Running Container
DESCRIPTION: Command to run container with port publishing, mapping container port 8080 to host port 8080.

LANGUAGE: console
CODE:
$ docker run --publish 8080:8080 docker-gs-ping

----------------------------------------

TITLE: Monitoring Docker container logs
DESCRIPTION: Command to view the logs of the Docker containers to monitor the download and initialization progress.

LANGUAGE: bash
CODE:
docker compose logs

----------------------------------------

TITLE: Explicitly setting root user in Dockerfile
DESCRIPTION: Example of a Dockerfile that explicitly sets the root user, which is non-compliant with the Default Non-Root User policy.

LANGUAGE: dockerfile
CODE:
FROM alpine
USER root
RUN echo "Hi"

----------------------------------------

TITLE: Example of Setting Docker Plugin Configuration in Bash
DESCRIPTION: This example shows how to use the 'docker plugin set' command to configure a specific setting for the 'sample-volume-plugin' plugin. It sets the 'DEBUG' environment variable to '1'.

LANGUAGE: bash
CODE:
$ docker plugin set sample-volume-plugin DEBUG=1

----------------------------------------

TITLE: Running Container in Detached Mode
DESCRIPTION: Command to run container in background (detached) mode with port mapping.

LANGUAGE: console
CODE:
$ docker run -d -p 8080:8080 docker-gs-ping

----------------------------------------

TITLE: Configuring a Bake Target in HCL
DESCRIPTION: This snippet shows how to express the same build configuration using Bake in HCL format. It defines a target named 'myapp' with context, dockerfile, and tag specifications.

LANGUAGE: hcl
CODE:
target "myapp" {
  context = "."
  dockerfile = "Dockerfile"
  tags = ["myapp:latest"]
}

----------------------------------------

TITLE: Using SBOM Files with Docker Scout CLI
DESCRIPTION: Illustrates how to use SBOM files in SPDX or in-toto SPDX format with the Docker Scout CLI.

LANGUAGE: console
CODE:
$ docker scout cves sbom://path/to/sbom.spdx.json

----------------------------------------

TITLE: Successful Docker Socket Mount Example
DESCRIPTION: Example showing successful Docker socket mount for an authorized container.

LANGUAGE: console
CODE:
$ docker run -it -v /var/run/docker.sock:/var/run/docker.sock docker:cli sh
/ #

----------------------------------------

TITLE: Uninstalling Docker Desktop While Preserving Data
DESCRIPTION: PowerShell command to uninstall Docker Desktop version 4.30 or later while keeping underlying data like VMs using the -keep-data flag.

LANGUAGE: powershell
CODE:
& 'C:\Program Files\Docker\Docker\Docker Desktop Installer.exe' uninstall -keep-data

----------------------------------------

TITLE: Proxy Auto-Configuration (PAC) File Implementation
DESCRIPTION: JavaScript PAC file example that defines proxy routing rules for different network destinations. Includes logic for internal corporate access, local network routing, and request blocking.

LANGUAGE: javascript
CODE:
function FindProxyForURL(url, host) {
	if (localHostOrDomainIs(host, 'internal.corp')) {
		return "PROXY 10.0.0.1:3128";
	}
	if (isInNet(host, "192.168.0.0", "255.255.255.0")) {
	    return "DIRECT";
	}
    return "PROXY reject.docker.internal:1234";
}

----------------------------------------

TITLE: Starting Notary Server with Docker Compose
DESCRIPTION: This command builds and starts Notary Server using Docker Compose with the sample certificates provided in the repository.

LANGUAGE: console
CODE:
$ docker compose up -d

----------------------------------------

TITLE: SSO Organization Management Template Variables
DESCRIPTION: Go template variables defining product links and navigation instructions that change based on whether the context is admin or regular user interface.

LANGUAGE: gotemplate
CODE:
{{ $product_link := "[Docker Hub](https://hub.docker.com)" }}
{{ $sso_navigation := "Select **Organizations**, your company, and then **Settings**." }}
{{ if eq (.Get "product") "admin" }}
  {{ $product_link = "the [Admin Console](https://app.docker.com/admin)" }}
  {{ $sso_navigation = "Select your company from the **Choose profile** page, and then select **SSO and SCIM**." }}
{{ end }}

----------------------------------------

TITLE: System Context Installation Example
DESCRIPTION: PowerShell command demonstrating how to install Docker Desktop MSI in system context using psexec.

LANGUAGE: powershell
CODE:
psexec -i -s msiexec /i "DockerDesktop.msi"

----------------------------------------

TITLE: Starting Docker Engine on RHEL
DESCRIPTION: This command enables and starts the Docker Engine systemd service. It configures Docker to start automatically on system boot and immediately starts the service.

LANGUAGE: bash
CODE:
$ sudo systemctl enable --now docker

----------------------------------------

TITLE: Cloning and Configuring Docker Docs Repository
DESCRIPTION: Instructions for forking, cloning, and configuring the Docker docs repository for contribution. This includes setting up the remote to sync with the upstream repository and prevent accidental pushes.

LANGUAGE: console
CODE:
$ git clone https://github.com/<your-username>/docs
$ cd docs
$ git remote add upstream https://github.com/docker/docs.git
$ git remote set-url --push upstream no_pushing

----------------------------------------

TITLE: Generating SBOM for Docker Image Tarball
DESCRIPTION: Demonstrates how to use the 'archive://' prefix with 'docker scout sbom' to generate an SBOM in SPDX format for a Docker image tarball created with 'docker save'.

LANGUAGE: console
CODE:
$ docker pull docker/scout-cli:latest
$ docker save docker/scout-cli:latest -o scout-cli.tar
$ docker scout sbom --format spdx -o sbom.spdx.json archive://scout-cli.tar

----------------------------------------

TITLE: Running NVIDIA CUDA Sample Benchmark in Docker
DESCRIPTION: Demonstrates how to run a GPU benchmark using the NVIDIA CUDA sample container with the --gpus=all flag to verify GPU support is working correctly.

LANGUAGE: console
CODE:
docker run --rm -it --gpus=all nvcr.io/nvidia/k8s/cuda-sample:nbody nbody -gpu -benchmark

----------------------------------------

TITLE: Updating Git Remote URL for GitHub Repository
DESCRIPTION: Console command to update the git remote URL to point to a new GitHub repository. Requires replacing placeholders for username and repository name.

LANGUAGE: console
CODE:
$ git remote set-url origin https://github.com/your-username/your-repository.git

----------------------------------------

TITLE: Docker Documentation List Formatting
DESCRIPTION: Complete markdown example showing various list formatting options including bullet points, numbered lists, nested content, notes, code blocks, and tables.

LANGUAGE: markdown
CODE:
- Bullet list item 1
- Bullet list item 2
- Bullet list item 3

1.  Numbered list item 1. Two spaces between the period and the first letter
    helps with alignment.

2.  Numbered list item 2. Let's put a note in it.

    > [!NOTE]: We did it!

3.  Numbered list item 3 with a code block in it. You need the blank line before
    the code block happens.

    ```bash
    $ docker run hello-world
    ```

4.  Numbered list item 4 with a bullet list inside it and a numbered list
    inside that.

    - Sub-item 1
    - Sub-item 2

      1.  Sub-sub-item 1
      2.  Sub-sub-item-2 with a table inside it.
          Indentation is super important.

          | Header 1 | Header 2 |
          | -------- | -------- |
          | Thing 1  | Thing 2  |
          | Thing 3  | Thing 4  |

----------------------------------------

TITLE: Creating Pageless Sidebar Entries in Docker Documentation
DESCRIPTION: This snippet shows how to create a pageless sidebar entry that links to another page using the sidebar.goto parameter. It's useful for adding sidebar links without creating a separate page.

LANGUAGE: markdown
CODE:
---
title: Dummy sidebar link
build:
  render: never
sidebar:
  goto: /some/other/page/
weight: 30
---

----------------------------------------

TITLE: Using Ternary Operators in Docker Bake HCL
DESCRIPTION: This example shows how to use ternary operators in a Docker Bake HCL file to conditionally add a tag when a variable is not empty. It uses the built-in 'notequal' function.

LANGUAGE: hcl
CODE:
variable "TAG" {}

target "default" {
  context="."
  dockerfile="Dockerfile"
  tags = [
    "my-image:latest",
    notequal("",TAG) ? "my-image:${TAG}": "",
  ]
}

----------------------------------------

TITLE: Configuring Docker Daemon Metrics
DESCRIPTION: Shows how to configure the Docker daemon to serve metrics on a specific address and port.

LANGUAGE: console
CODE:
$ dockerd --metrics-addr 127.0.0.1:9323

----------------------------------------

TITLE: Docker TLS Server Execution
DESCRIPTION: Command to run the Docker server with TLS configuration.

LANGUAGE: bash
CODE:
root@boot2docker:/# sudo make run

----------------------------------------

TITLE: Create Container API Request
DESCRIPTION: Example request to create a container using the Docker Engine API.

LANGUAGE: HTTP
CODE:
POST /v1.24/containers/create HTTP/1.1
Content-Type: application/json
Content-Length: 12345

{
  "Hostname": "",
  "Domainname": "",
  "User": "",
  "AttachStdin": false,
  "AttachStdout": true,
  "AttachStderr": true,
  "Tty": false,
  "OpenStdin": false,
  "StdinOnce": false,
  "Env": [
    "FOO=bar",
    "BAZ=quux"
  ],
  "Cmd": [
    "date"
  ],
  "Entrypoint": "",
  "Image": "ubuntu",
  "Labels": {
    "com.example.vendor": "Acme",
    "com.example.license": "GPL",
    "com.example.version": "1.0"
  },
  "Volumes": {
    "/volumes/data": {}
  },
  "WorkingDir": "",
  "NetworkDisabled": false,
  "MacAddress": "12:34:56:78:9a:bc",
  "ExposedPorts": {
    "22/tcp": {}
  },
  "StopSignal": "SIGTERM",
  "HostConfig": {
    "Binds": ["/tmp:/tmp"],
    "Links": ["redis3:redis"],
    "Memory": 0,
    "MemorySwap": 0,
    "MemoryReservation": 0,
    "KernelMemory": 0,
    "CpuPercent": 80,
    "CpuShares": 512,
    "CpuPeriod": 100000,
    "CpuQuota": 50000,
    "CpusetCpus": "0,1",
    "CpusetMems": "0,1",
    "MaximumIOps": 0,
    "MaximumIOBps": 0,
    "BlkioWeight": 300,
    "BlkioWeightDevice": [{}],
    "BlkioDeviceReadBps": [{}],
    "BlkioDeviceReadIOps": [{}],
    "BlkioDeviceWriteBps": [{}],
    "BlkioDeviceWriteIOps": [{}],
    "MemorySwappiness": 60,
    "OomKillDisable": false,
    "OomScoreAdj": 500,
    "PidMode": "",
    "PidsLimit": -1,
    "PortBindings": { "22/tcp": [{ "HostPort": "11022" }] },
    "PublishAllPorts": false,
    "Privileged": false,
    "ReadonlyRootfs": false,
    "Dns": ["8.8.8.8"],
    "DnsOptions": [""],
    "DnsSearch": [""],
    "ExtraHosts": null,
    "VolumesFrom": ["parent", "other:ro"],
    "CapAdd": ["NET_ADMIN"],
    "CapDrop": ["MKNOD"],
    "GroupAdd": ["newgroup"],
    "RestartPolicy": { "Name": "", "MaximumRetryCount": 0 },
    "NetworkMode": "bridge",
    "Devices": [],
    "Ulimits": [{}],
    "LogConfig": { "Type": "json-file", "Config": {} },
    "SecurityOpt": [],
    "StorageOpt": {},
    "CgroupParent": "",
    "VolumeDriver": "",
    "ShmSize": 67108864
  }
}

----------------------------------------

TITLE: Docker Compose PS with All Containers
DESCRIPTION: Example showing how to list all containers including stopped ones using the --all flag.

LANGUAGE: console
CODE:
$ docker compose ps --all
NAME            IMAGE     COMMAND           SERVICE    CREATED         STATUS          PORTS
example-foo-1   alpine    "/entrypoint.…"   foo        4 seconds ago   Up 2 seconds    0.0.0.0:8080->80/tcp
example-bar-1   alpine    "/entrypoint.…"   bar        4 seconds ago   exited (0)

----------------------------------------

TITLE: Adding SCTP port mapping support in Docker (Go)
DESCRIPTION: Add support for SCTP port mapping in Docker, bumping the API version to 1.37.

LANGUAGE: Go
CODE:
Support SCTP port mapping (bump up API to v1.37) [moby/moby#33922](https://github.com/moby/moby/pull/33922)

----------------------------------------

TITLE: Setting Environment Variables via Command Line
DESCRIPTION: Shows how to set environment variables temporarily using docker compose run command with the -e flag.

LANGUAGE: console
CODE:
$ docker compose run -e DEBUG=1 web python console.py

----------------------------------------

TITLE: Duration Specification Examples
DESCRIPTION: Shows the format for specifying duration values in configurations.

LANGUAGE: text
CODE:
  10ms
  40s
  1m30s
  1h5m30s20ms

----------------------------------------

TITLE: Tampering with Image Data in Sandbox Registry
DESCRIPTION: Shell commands for accessing the sandbox registry container and modifying image layer data to simulate a malicious attack.

LANGUAGE: bash
CODE:
docker container exec -it sandboxregistry bash
ls -l /var/lib/registry/docker/registry/v2/repositories/test/trusttest/_layers/sha256
cd /var/lib/registry/docker/registry/v2/blobs/sha256/aa/aac0c133338db2b18ff054943cee3267fe50c75cdee969aed88b1992539ed042
echo "Malicious data" > data

----------------------------------------

TITLE: Formatting Bash Scripts in Documentation
DESCRIPTION: Illustrates how to format Bash scripts in documentation using the 'bash' language code block. This example shows a simple Bash script for adding a Docker repository.

LANGUAGE: bash
CODE:
#!/usr/bin/bash
echo "deb https://packages.docker.com/1.12/apt/repo ubuntu-trusty main" | sudo tee /etc/apt/sources.list.d/docker.list

----------------------------------------

TITLE: Configuring PHP Settings in Docker
DESCRIPTION: This snippet demonstrates how to modify PHP configuration settings within a Docker container using a custom php.ini file.

LANGUAGE: Dockerfile
CODE:
FROM php:7.4-apache

COPY custom-php.ini /usr/local/etc/php/conf.d/

RUN docker-php-ext-install pdo pdo_mysql

----------------------------------------

TITLE: Enabling Docker Scout for a Repository in a Specific Registry
DESCRIPTION: This command enables Docker Scout for a repository in a specific container registry. It uses the '--registry' option to specify the registry URL.

LANGUAGE: console
CODE:
$ docker scout repo enable my/repository --registry 123456.dkr.ecr.us-east-1.amazonaws.com

----------------------------------------

TITLE: Installing Docker Extension via Command Line
DESCRIPTION: Demonstrates how to install a Docker extension using the command line interface. This method directly installs the extension without providing a preview.

LANGUAGE: console
CODE:
docker extension install my/awesome-extension:latest

----------------------------------------

TITLE: Upgrading Containerd in Docker Engine 18.02
DESCRIPTION: Bumps the version of containerd to 1.0.1 (commit 9b55aab90508bd389d7654c4baf173a981477d55). This upgrade is part of the runtime improvements in the 18.02 release.

LANGUAGE: markdown
CODE:
* Bump containerd to 1.0.1 (9b55aab90508bd389d7654c4baf173a981477d55) [moby/moby#35986](https://github.com/moby/moby/pull/35986)

----------------------------------------

TITLE: Installing Compose Bridge as Kubectl Plugin
DESCRIPTION: Steps to rename the compose-bridge binary and make it executable as a kubectl plugin. This enables direct integration with kubectl command-line operations.

LANGUAGE: console
CODE:
$ mv /path/to/compose-bridge /usr/local/bin/kubectl-compose_bridge

----------------------------------------

TITLE: Installing Compose Bridge as Kubectl Plugin
DESCRIPTION: Steps to rename the compose-bridge binary and make it executable as a kubectl plugin. This enables direct integration with kubectl command-line operations.

LANGUAGE: console
CODE:
$ mv /path/to/compose-bridge /usr/local/bin/kubectl-compose_bridge

----------------------------------------

TITLE: Building a Custom Docker Image
DESCRIPTION: Shows how to build a custom Docker image with a specific tag, replacing YOUR_DOCKER_USERNAME with the actual Docker Hub username.

LANGUAGE: console
CODE:
$ docker build -t <YOUR_DOCKER_USERNAME>/concepts-build-image-demo .

----------------------------------------

TITLE: Implementing Ring Buffer for Container Logs
DESCRIPTION: Adds an optional ring buffer for container logs, potentially improving log management and performance.

LANGUAGE: Markdown
CODE:
+ Implement optional ring buffer for container logs [#28762](https://github.com/docker/docker/pull/28762)

----------------------------------------

TITLE: Executing Docker Feedback Command in Bash
DESCRIPTION: This snippet demonstrates the use of the 'docker feedback' command to submit feedback directly from the command line for users who obtained Docker Compose through Docker Desktop.

LANGUAGE: bash
CODE:
docker feedback

----------------------------------------

TITLE: Analyzing Local Docker Image with Scout
DESCRIPTION: Demonstrates using the default 'docker scout cves' command to analyze a local Docker image. If the image doesn't exist locally, Docker pulls it before analysis.

LANGUAGE: console
CODE:
$ docker scout cves <image>

----------------------------------------

TITLE: Embedding Video with iframe in HTML
DESCRIPTION: This snippet demonstrates how to embed a video on a Docker documentation page using an iframe element. It includes necessary attributes for responsiveness and accessibility.

LANGUAGE: html
CODE:
<iframe
  class="border-0 w-full aspect-video mb-8"
  allow="fullscreen"
  title=""
  src=""
  ></iframe>

----------------------------------------

TITLE: Installing gnu-tar on macOS
DESCRIPTION: Commands to install gnu-tar using Homebrew and add it to the PATH on macOS to work around xattr issues.

LANGUAGE: console
CODE:
$ brew install gnu-tar
$ echo 'PATH="/opt/homebrew/opt/gnu-tar/libexec/gnubin:$PATH"' >> ~/.zshrc
$ source ~/.zshrc

----------------------------------------

TITLE: Environment Configuration in Docker Compose for Laravel
DESCRIPTION: Example environment variable configuration in Docker Compose for enabling Xdebug in development environment.

LANGUAGE: yaml
CODE:
XDEBUG_ENABLED=true

----------------------------------------

TITLE: Comparing Images Ignoring Base Images
DESCRIPTION: This example illustrates how to use the 'docker scout compare' command to compare two images while ignoring differences in base images.

LANGUAGE: console
CODE:
$ docker scout compare --ignore-base --to namespace/repo:latest namespace/repo:v1.2.3-pre

----------------------------------------

TITLE: Node.js Weather API Implementation
DESCRIPTION: Main application code showing the implementation of weather API endpoint with environment variable configuration and API key validation

LANGUAGE: javascript
CODE:
require("dotenv").config();

const express = require("express");
const axios = require("axios");

const router = express.Router();
const API_ENDPOINT_BASE = process.env.API_ENDPOINT_BASE;
const API_KEY = process.env.ACCUWEATHER_API_KEY;

console.log('API_ENDPOINT_BASE:', API_ENDPOINT_BASE);
console.log('ACCUWEATHER_API_KEY is set:', !!API_KEY);

if (!API_ENDPOINT_BASE) {
  throw new Error("API_ENDPOINT_BASE is not defined in environment variables");
}

if (API_ENDPOINT_BASE !== 'http://localhost:8080' && !API_KEY) {
  throw new Error("ACCUWEATHER_API_KEY is not defined in environment variables");
}

async function fetchLocationKey(townName) {
  const { data: locationData } = await
axios.get(`${API_ENDPOINT_BASE}/locations/v1/cities/search`, {
    params: { q: townName, details: false, apikey: API_KEY },
  });
  return locationData[0]?.Key;
}

----------------------------------------

TITLE: Installing bash-completion Package
DESCRIPTION: Commands for installing the bash-completion package using different package managers (APT, Homebrew, and pacman).

LANGUAGE: bash
CODE:
# Install using APT:\nsudo apt install bash-completion\n\n# Install using Homebrew (Bash version 4 or later):\nbrew install bash-completion@2\n# Homebrew install for older versions of Bash:\nbrew install bash-completion\n\n# With pacman:\nsudo pacman -S bash-completion

----------------------------------------

TITLE: Implementing Inline Cache with GitHub Actions in Docker
DESCRIPTION: This snippet demonstrates how to use the inline cache exporter with GitHub Actions. It includes steps for logging into Docker Hub, setting up Docker Buildx, and building and pushing an image with inline caching.

LANGUAGE: yaml
CODE:
name: ci

on:
  push:

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: user/app:latest
          cache-from: type=registry,ref=user/app:latest
          cache-to: type=inline

----------------------------------------

TITLE: Test Stage Dockerfile Configuration
DESCRIPTION: Dockerfile configuration for test stage with Go test execution and cache mounting.

LANGUAGE: dockerfile
CODE:
FROM base AS test
RUN --mount=target=. \
    --mount=type=cache,target=/go/pkg/mod \
    go test .

----------------------------------------

TITLE: Running Docker Container from Created Image
DESCRIPTION: This console command runs a Docker container from the newly created image, mapping port 8080 on the host to port 8080 in the container.

LANGUAGE: console
CODE:
docker run -d -p 8080:8080 <YOUR_DOCKER_USERNAME>/docker-quickstart

----------------------------------------

TITLE: Running Validation Tests for Docker Docs
DESCRIPTION: Command to run local tests that check for broken links, incorrectly formatted markup, and other issues before pushing changes and opening a pull request.

LANGUAGE: console
CODE:
$ docker buildx bake validate

----------------------------------------

TITLE: Generating Docker Extension Share URL
DESCRIPTION: Shows how to create a share URL for a Docker extension using the command line. This URL allows users to preview the extension before installation.

LANGUAGE: console
CODE:
$ docker extension share my/awesome-extension:0.0.1

----------------------------------------

TITLE: Creating a Native Multi-Architecture Builder
DESCRIPTION: These commands show how to create a Kubernetes builder with native support for multiple architectures by appending nodes for different platforms.

LANGUAGE: console
CODE:
$ docker buildx create \
  --bootstrap \
  --name=kube \
  --driver=kubernetes \
  --platform=linux/amd64 \
  --node=builder-amd64 \
  --driver-opt=namespace=buildkit,nodeselector="kubernetes.io/arch=amd64"

$ docker buildx create \
  --append \
  --bootstrap \
  --name=kube \
  --driver=kubernetes \
  --platform=linux/arm64 \
  --node=builder-arm64 \
  --driver-opt=namespace=buildkit,nodeselector="kubernetes.io/arch=arm64"

----------------------------------------

TITLE: Creating a Native Multi-Architecture Builder
DESCRIPTION: These commands show how to create a Kubernetes builder with native support for multiple architectures by appending nodes for different platforms.

LANGUAGE: console
CODE:
$ docker buildx create \
  --bootstrap \
  --name=kube \
  --driver=kubernetes \
  --platform=linux/amd64 \
  --node=builder-amd64 \
  --driver-opt=namespace=buildkit,nodeselector="kubernetes.io/arch=amd64"

$ docker buildx create \
  --append \
  --bootstrap \
  --name=kube \
  --driver=kubernetes \
  --platform=linux/arm64 \
  --node=builder-arm64 \
  --driver-opt=namespace=buildkit,nodeselector="kubernetes.io/arch=arm64"

----------------------------------------

TITLE: Correct Docker COPY Implementation
DESCRIPTION: Example showing correct usage of COPY command with a file that is not excluded by .dockerignore

LANGUAGE: dockerfile
CODE:
FROM scratch
COPY ./forever/helloworld.txt /helloworld.txt

----------------------------------------

TITLE: Configuring Dockerfile for Deno Application
DESCRIPTION: Dockerfile configuration for containerizing a Deno application, using the official Deno base image and implementing security best practices.

LANGUAGE: dockerfile
CODE:
# Use the official Deno image
FROM denoland/deno:latest

# Set the working directory
WORKDIR /app

# Copy server code into the container
COPY server.ts .

# Set permissions (optional but recommended for security)
USER deno

# Expose port 8000
EXPOSE 8000

# Run the Deno server
CMD ["run", "--allow-net", "server.ts"]

----------------------------------------

TITLE: YAML Frontmatter Configuration for Docker System DF Documentation
DESCRIPTION: YAML configuration block that defines metadata for the documentation page, including the data folder location, file name, page title, URL aliases, and layout template.

LANGUAGE: yaml
CODE:
datafolder: engine-cli
datafile: docker_system_df
title: docker system df
aliases:
- /edge/engine/reference/commandline/system_df/
- /engine/reference/commandline/system_df/
layout: cli

----------------------------------------

TITLE: Basic Docker Compose PS Usage
DESCRIPTION: Basic example showing how to list running containers in a Compose project with their status and port mappings.

LANGUAGE: console
CODE:
$ docker compose ps
NAME            IMAGE     COMMAND           SERVICE    CREATED         STATUS          PORTS
example-foo-1   alpine    "/entrypoint.…"   foo        4 seconds ago   Up 2 seconds    0.0.0.0:8080->80/tcp

----------------------------------------

TITLE: HTTP GET Request Implementation
DESCRIPTION: Demonstrates making an HTTP GET request to a backend service. This method is deprecated in favor of HttpService.get.

LANGUAGE: typescript
CODE:
window.ddClient.backend
 .get("/some/service")
 .then((value: any) => console.log(value));

----------------------------------------

TITLE: Configuring Dockerfile for Compose Watch Compatibility
DESCRIPTION: This Dockerfile snippet demonstrates how to set up a Node.js application container for use with Compose Watch. It includes creating a non-privileged user, installing dependencies, and copying source files with the correct ownership.

LANGUAGE: dockerfile
CODE:
# Run as a non-privileged user
FROM node:18
RUN useradd -ms /bin/sh -u 1001 app
USER app

# Install dependencies
WORKDIR /app
COPY package.json package-lock.json ./
RUN npm install

# Copy source files into application directory
COPY --chown=app:app . /app

----------------------------------------

TITLE: Configuring Dockerfile for Compose Watch Compatibility
DESCRIPTION: This Dockerfile snippet demonstrates how to set up a Node.js application container for use with Compose Watch. It includes creating a non-privileged user, installing dependencies, and copying source files with the correct ownership.

LANGUAGE: dockerfile
CODE:
# Run as a non-privileged user
FROM node:18
RUN useradd -ms /bin/sh -u 1001 app
USER app

# Install dependencies
WORKDIR /app
COPY package.json package-lock.json ./
RUN npm install

# Copy source files into application directory
COPY --chown=app:app . /app

----------------------------------------

TITLE: Installing Docker Desktop for Non-Admin Mac Users
DESCRIPTION: Command line installation of Docker Desktop on Mac with user-specific privileges using the --user flag to enable non-administrator usage.

LANGUAGE: console
CODE:
$ /Applications/Docker.app/Contents/MacOS/install --user=<userid>

----------------------------------------

TITLE: Running Docker Compose with JSON Configuration
DESCRIPTION: This command shows how to use a JSON file instead of YAML for Docker Compose configuration. It specifies a custom filename to use JSON format.

LANGUAGE: bash
CODE:
$ docker compose -f docker-compose.json up

----------------------------------------

TITLE: Configuring Air-gapped Container Settings in Docker Desktop
DESCRIPTION: JSON configuration for Docker Desktop's admin-settings.json file to set up container proxy rules. Defines proxy mode, URLs, port restrictions and locking settings.

LANGUAGE: json
CODE:
{
  "configurationFileVersion": 2,
  "containersProxy": {
    "locked": true,
    "mode": "manual",
    "http": "",
    "https": "",
    "exclude": [],
    "pac": "http://192.168.1.16:62039/proxy.pac",
    "transparentPorts": "*"
  }
}

----------------------------------------

TITLE: React Component for Host Binary Execution
DESCRIPTION: React component that demonstrates invoking host binaries using the Docker Desktop Client API

LANGUAGE: typescript
CODE:
export function App() {
  const ddClient = createDockerDesktopClient();
  const [hello, setHello] = useState("");

  useEffect(() => {
    const run = async () => {
      let binary = "hello.sh";
      if (ddClient.host.platform === 'win32') {
        binary = "hello.cmd";
      }

      const result = await ddClient.extension.host?.cli.exec(binary, ["world"]);
      setHello(result?.stdout);

    };
    run();
  }, [ddClient]);
    
  return (
    <div>
      {hello}
    </div>
  );
}

----------------------------------------

TITLE: Defining Options for Docker Compose Attach Command in Markdown
DESCRIPTION: This markdown snippet defines a table of options for the 'docker compose attach' command. It includes option names, types, default values, and descriptions for various parameters such as detach keys, dry run mode, container index, stdin attachment, and signal proxying.

LANGUAGE: markdown
CODE:
| Name            | Type     | Default | Description                                               |
|:----------------|:---------|:--------|:----------------------------------------------------------|
| `--detach-keys` | `string` |         | Override the key sequence for detaching from a container. |
| `--dry-run`     | `bool`   |         | Execute command in dry run mode                           |
| `--index`       | `int`    | `0`     | index of the container if service has multiple replicas.  |
| `--no-stdin`    | `bool`   |         | Do not attach STDIN                                       |
| `--sig-proxy`   | `bool`   | `true`  | Proxy all received signals to the process                 |

----------------------------------------

TITLE: Retrieving Image History in API v1.48
DESCRIPTION: GET /images/{name}/history now supports a platform parameter to specify a platform for showing image history.

LANGUAGE: json
CODE:
GET /images/{name}/history?platform={"os":"linux","architecture":"amd64"}

----------------------------------------

TITLE: Docker Container Run Commands with Bind Mount
DESCRIPTION: Examples showing how to run an Apache HTTP server container with bind mount using both -v and --mount syntax.

LANGUAGE: console
CODE:
$ docker run -d --name my_site -p 8080:80 -v .:/usr/local/apache2/htdocs/ httpd:2.4

LANGUAGE: console
CODE:
$ docker run -d --name my_site -p 8080:80 --mount type=bind,source=./,target=/usr/local/apache2/htdocs/ httpd:2.4

----------------------------------------

TITLE: Resetting Docker Extension Debug Mode
DESCRIPTION: Command to disable the automatic opening of Chrome DevTools for a Docker extension.

LANGUAGE: console
CODE:
$ docker extension dev reset <name-of-your-extensions>

----------------------------------------

TITLE: Basic Bake Command Example
DESCRIPTION: Example showing basic usage of docker buildx bake command with file flag

LANGUAGE: console
CODE:
$ docker buildx bake --file ../docker/bake.hcl --print

----------------------------------------

TITLE: YAML Frontmatter for Docker API Documentation
DESCRIPTION: YAML frontmatter block defining metadata for the Docker Engine API v1.25 documentation page, including the title, link title and URL aliases.

LANGUAGE: yaml
CODE:
---
title: Docker Engine API v1.25 reference
linkTitle: v1.25
aliases:
- /engine/api/v1.25/
---

----------------------------------------

TITLE: Displaying Toast Notifications in Docker Extensions
DESCRIPTION: Shows how to display success, warning, and error toast notifications using the Docker Desktop UI API. These notifications appear temporarily and don't require user interaction.

LANGUAGE: typescript
CODE:
ddClient.desktopUI.toast.success("message");

LANGUAGE: typescript
CODE:
ddClient.desktopUI.toast.warning("message");

LANGUAGE: typescript
CODE:
ddClient.desktopUI.toast.error("message");

----------------------------------------

TITLE: Pulling Ubuntu Image Example
DESCRIPTION: Example of pulling an Ubuntu image showing layer download process

LANGUAGE: console
CODE:
$ docker pull ubuntu

Using default tag: latest
latest: Pulling from library/ubuntu
e0a742c2abfd: Pull complete
486cb8339a27: Pull complete
dc6f0d824617: Pull complete
4f7a5649a30e: Pull complete
672363445ad2: Pull complete
Digest: sha256:84c334414e2bfdcae99509a6add166bbb4fa4041dc3fa6af08046a66fed3005f
Status: Downloaded newer image for ubuntu:latest

----------------------------------------

TITLE: LogDriver Capabilities Format in JSON
DESCRIPTION: JSON structures for the optional /LogDriver.Capabilities endpoint.

LANGUAGE: json
CODE:
{
  "ReadLogs": true
}

----------------------------------------

TITLE: Displaying Error Message for Undefined Variable in Dockerfile
DESCRIPTION: Shows the output message when an undefined variable is used in a Dockerfile. This helps developers identify and correct issues with variable usage.

LANGUAGE: text
CODE:
Usage of undefined variable '$foo'

----------------------------------------

TITLE: Direct-LVM Manual Configuration
DESCRIPTION: JSON configuration for manually configured direct-lvm mode with essential options

LANGUAGE: json
CODE:
{
    "storage-driver": "devicemapper",
    "storage-opts": [
    "dm.thinpooldev=/dev/mapper/docker-thinpool",
    "dm.use_deferred_removal=true",
    "dm.use_deferred_deletion=true"
    ]
}

----------------------------------------

TITLE: Configuring Docker Build YAML Frontmatter
DESCRIPTION: YAML configuration block that sets up build parameters and page metadata. It disables rendering with 'never' setting, sets the page title to 'Part one: Build', and assigns a weight of 30 for page ordering.

LANGUAGE: yaml
CODE:
build:
  render: never
title: "Part one: Build"
weight: 30

----------------------------------------

TITLE: Creating Simple Macvlan Bridge Network in Docker
DESCRIPTION: Creates a macvlan network called my-macvlan-net with specified subnet and gateway, using eth0 as the parent interface.

LANGUAGE: bash
CODE:
docker network create -d macvlan \
  --subnet=172.16.86.0/24 \
  --gateway=172.16.86.1 \
  -o parent=eth0 \
  my-macvlan-net

----------------------------------------

TITLE: Updating Docker Context
DESCRIPTION: Demonstrates how to update properties of an existing Docker context.

LANGUAGE: console
CODE:
$ docker context update docker-test --description "Test context"
docker-test
Successfully updated context "docker-test"

----------------------------------------

TITLE: Running Fluentd Container for Docker Logging
DESCRIPTION: Docker command to run a Fluentd container configured for receiving logs from other Docker containers. It maps the necessary port and mounts the configuration file.

LANGUAGE: console
CODE:
$ docker run -it -p 24224:24224 -v /path/to/conf/test.conf:/fluentd/etc/test.conf -e FLUENTD_CONF=test.conf fluent/fluentd:latest

----------------------------------------

TITLE: Docker Compose CloudWatch Logging Configuration
DESCRIPTION: Example of configuring CloudWatch logging in a Docker Compose service definition.

LANGUAGE: yaml
CODE:
myservice:
  logging:
    driver: awslogs
    options:
      awslogs-region: us-east-1

----------------------------------------

TITLE: Assigning Profiles to Services in Docker Compose YAML
DESCRIPTION: This snippet demonstrates how to assign profiles to services in a Docker Compose YAML file. It shows services with and without profiles, and explains how they behave when starting the composition.

LANGUAGE: yaml
CODE:
services:
  frontend:
    image: frontend
    profiles: [frontend]

  phpmyadmin:
    image: phpmyadmin
    depends_on: [db]
    profiles: [debug]

  backend:
    image: backend

  db:
    image: mysql

----------------------------------------

TITLE: Override Configuration for Development
DESCRIPTION: Example of a development override file that adds environment variables to the base configuration

LANGUAGE: yaml
CODE:
webapp:
  environment:
    - DEBUG=1

----------------------------------------

TITLE: Production Override Configuration
DESCRIPTION: Production-specific overrides with different port mappings and environment variables

LANGUAGE: yaml
CODE:
services:
  web:
    ports:
      - 80:80
    environment:
      PRODUCTION: 'true'

  cache:
    environment:
      TTL: '500'

----------------------------------------

TITLE: Implementing Post-Start Hook with Docker Compose
DESCRIPTION: Example showing how to configure a post-start hook in Docker Compose to change volume ownership after container startup. The hook runs as root while the container runs as a non-root user for security.

LANGUAGE: yaml
CODE:
services:
  app:
    image: backend
    user: 1001
    volumes:
      - data:/data    
    post_start:
      - command: chown -R /data 1001:1001
        user: root

volumes:
  data: {} # a Docker volume is created with root ownership

----------------------------------------

TITLE: Minimal Mode Provenance Attestation JSON Structure
DESCRIPTION: Example JSON structure showing the minimal (mode=min) provenance attestation output including basic build information like timestamps, materials, and source details.

LANGUAGE: json
CODE:
{
  "_type": "https://in-toto.io/Statement/v0.1",
  "predicateType": "https://slsa.dev/provenance/v0.2",
  "subject": [
    {
      "name": "pkg:docker/<registry>/<image>@<tag/digest>?platform=<platform>",
      "digest": {
        "sha256": "e8275b2b76280af67e26f068e5d585eb905f8dfd2f1918b3229db98133cb4862"
      }
    }
  ],
  "predicate": {
    "builder": { "id": "" },
    "buildType": "https://mobyproject.org/buildkit@v1",
    "materials": [
      {
        "uri": "pkg:docker/docker/dockerfile@1",
        "digest": {
          "sha256": "9ba7531bd80fb0a858632727cf7a112fbfd19b17e94c4e84ced81e24ef1a0dbc"
        }
      },
      {
        "uri": "pkg:docker/golang@1.19.4-alpine?platform=linux%2Farm64",
        "digest": {
          "sha256": "a9b24b67dc83b3383d22a14941c2b2b2ca6a103d805cac6820fd1355943beaf1"
        }
      }
    ],
    "invocation": {
      "configSource": { "entryPoint": "Dockerfile" },
      "parameters": {
        "frontend": "gateway.v0",
        "args": {
          "cmdline": "docker/dockerfile:1",
          "source": "docker/dockerfile:1",
          "target": "binaries"
        },
        "locals": [{ "name": "context" }, { "name": "dockerfile" }]
      },
      "environment": { "platform": "linux/arm64" }
    },
    "metadata": {
      "buildInvocationID": "c4a87v0sxhliuewig10gnsb6v",
      "buildStartedOn": "2022-12-16T08:26:28.651359794Z",
      "buildFinishedOn": "2022-12-16T08:26:29.625483253Z",
      "reproducible": false,
      "completeness": {
        "parameters": true,
        "environment": true,
        "materials": false
      },
      "https://mobyproject.org/buildkit@v1#metadata": {
        "vcs": {
          "revision": "a9ba846486420e07d30db1107411ac3697ecab68",
          "source": "git@github.com:<org>/<repo>.git"
        }
      }
    }
  }
}

----------------------------------------

TITLE: Configuring Multi-Node BuildKit Setup in GitHub Actions
DESCRIPTION: Illustrates how to set up a multi-node BuildKit configuration using remote nodes with TLS authentication in GitHub Actions.

LANGUAGE: yaml
CODE:
name: ci

on:
  push:

jobs:
  buildx:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: remote
          endpoint: tcp://oneprovider:1234
          append: |
            - endpoint: tcp://graviton2:1234
              platforms: linux/arm64
            - endpoint: tcp://linuxone:1234
              platforms: linux/s390x
        env:
          BUILDER_NODE_0_AUTH_TLS_CACERT: ${{ secrets.ONEPROVIDER_CA }}
          BUILDER_NODE_0_AUTH_TLS_CERT: ${{ secrets.ONEPROVIDER_CERT }}
          BUILDER_NODE_0_AUTH_TLS_KEY: ${{ secrets.ONEPROVIDER_KEY }}
          BUILDER_NODE_1_AUTH_TLS_CACERT: ${{ secrets.GRAVITON2_CA }}
          BUILDER_NODE_1_AUTH_TLS_CERT: ${{ secrets.GRAVITON2_CERT }}
          BUILDER_NODE_1_AUTH_TLS_KEY: ${{ secrets.GRAVITON2_KEY }}
          BUILDER_NODE_2_AUTH_TLS_CACERT: ${{ secrets.LINUXONE_CA }}
          BUILDER_NODE_2_AUTH_TLS_CERT: ${{ secrets.LINUXONE_CERT }}
          BUILDER_NODE_2_AUTH_TLS_KEY: ${{ secrets.LINUXONE_KEY }}

----------------------------------------

TITLE: Configuring SSH Authentication for Remote BuildKit in GitHub Actions
DESCRIPTION: Sets up SSH authentication for connecting to a remote BuildKit endpoint using the docker-container driver in GitHub Actions.

LANGUAGE: yaml
CODE:
name: ci

on:
  push:

jobs:
  buildx:
    runs-on: ubuntu-latest
    steps:
      - name: Set up SSH
        uses: MrSquaare/ssh-setup-action@2d028b70b5e397cf8314c6eaea229a6c3e34977a # v3.1.0
        with:
          host: graviton2
          private-key: ${{ secrets.SSH_PRIVATE_KEY }}
          private-key-name: aws_graviton2
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          endpoint: ssh://me@graviton2

----------------------------------------

TITLE: Disabling Build Record Upload in GitHub Actions YAML
DESCRIPTION: YAML configuration snippet demonstrating how to disable the build record archive upload by setting the DOCKER_BUILD_RECORD_UPLOAD environment variable to false.

LANGUAGE: yaml
CODE:
      - name: Build
        uses: docker/build-push-action@v6
        env:
          DOCKER_BUILD_RECORD_UPLOAD: false
        with:
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

----------------------------------------

TITLE: Bind Mount Usage in Docker Run
DESCRIPTION: Examples of using bind mounts with docker run command using different syntax options.

LANGUAGE: bash
CODE:
# bind mount using the -v flag
docker run -v $(pwd):/path/in/container image-name
# bind mount using the --mount flag
docker run --mount=type=bind,src=.,dst=/path/in/container image-name

----------------------------------------

TITLE: Using Build Argument for Inline Cache Export
DESCRIPTION: Alternative method to enable inline cache export using the BUILDKIT_INLINE_CACHE build argument instead of the --cache-to flag.

LANGUAGE: console
CODE:
$ docker buildx build --push -t <registry>/<image> \
  --build-arg BUILDKIT_INLINE_CACHE=1 .

----------------------------------------

TITLE: Cache Mode Configuration
DESCRIPTION: Example of setting cache mode to max when using the registry backend for more comprehensive caching of build layers.

LANGUAGE: bash
CODE:
docker buildx build --push -t <registry>/<image> \
  --cache-to type=registry,ref=<registry>/<cache-image>,mode=max \
  --cache-from type=registry,ref=<registry>/<cache-image> .

----------------------------------------

TITLE: Cache Compression Configuration
DESCRIPTION: Example of configuring zstd compression for the registry cache backend to optimize cache storage and transfer.

LANGUAGE: bash
CODE:
docker buildx build --push -t <registry>/<image> \
  --cache-to type=registry,ref=<registry>/<cache-image>,compression=zstd \
  --cache-from type=registry,ref=<registry>/<cache-image> .

----------------------------------------

TITLE: Creating a New Docker Buildx Builder
DESCRIPTION: Creates a new Docker Buildx builder using the docker buildx create command. By default, it uses the docker-container driver if no driver is specified.

LANGUAGE: bash
CODE:
$ docker buildx create --name=<builder-name>

----------------------------------------

TITLE: Examples of Custom Dockerfile Syntax References
DESCRIPTION: Provides examples of how to reference different Dockerfile syntax images, including official Docker images and custom repositories.

LANGUAGE: dockerfile
CODE:
# syntax=docker/dockerfile:1
# syntax=docker.io/docker/dockerfile:1
# syntax=example.com/user/repo:tag@sha256:abcdef...

----------------------------------------

TITLE: Performing Arithmetic Operations in Docker Bake HCL
DESCRIPTION: This snippet demonstrates how to perform arithmetic operations in a Docker Bake HCL file. It multiplies two numbers and uses the result as a build argument.

LANGUAGE: hcl
CODE:
sum = 7*6

target "default" {
  args = {
    answer = sum
  }
}

----------------------------------------

TITLE: Fetching Zscaler Root Certificate from Artifact Repository in Docker Build
DESCRIPTION: Shows how to fetch the Zscaler root certificate directly from an artifact repository during Docker image build, using the ADD instruction with checksum verification.

LANGUAGE: dockerfile
CODE:
FROM debian:bookworm
ADD --checksum=sha256:24454f830cdb571e2c4ad15481119c43b3cafd48dd869a9b2945d1036d1dc68d \
    https://artifacts.example/certs/zscaler-root-ca.crt /usr/local/share/ca-certificates/zscaler-root-ca.crt
RUN apt-get update && \
    apt-get install -y ca-certificates && \
    update-ca-certificates

----------------------------------------

TITLE: Running Nginx Container with Traefik Labels
DESCRIPTION: Starts an Nginx container with Traefik labels for HTTP routing configuration.

LANGUAGE: console
CODE:
$ docker run -d --network=traefik-demo --label 'traefik.http.routers.nginx.rule=Host(`nginx.localhost`)' nginx

----------------------------------------

TITLE: Git Commands for Initial Repository Push
DESCRIPTION: Series of git commands to stage all changes, create a commit, and push to the main branch of the remote repository.

LANGUAGE: console
CODE:
$ git add -A
$ git commit -m "my commit"
$ git push -u origin main

----------------------------------------

TITLE: Cloning Python Application Repository
DESCRIPTION: Command to clone the sample Python FastAPI application repository and change into its directory.

LANGUAGE: console
CODE:
$ git clone https://github.com/estebanx64/python-docker-example && cd python-docker-example

----------------------------------------

TITLE: Importing Googletrans Translator
DESCRIPTION: Imports the Translator class from the Googletrans library to enable language translation functionality.

LANGUAGE: python
CODE:
from googletrans import Translator

----------------------------------------

TITLE: Testing Java Application Health Endpoint
DESCRIPTION: This curl command sends a GET request to the application's health endpoint to verify that it's running and accessible through the Kubernetes service.

LANGUAGE: shell
CODE:
$ curl --request GET \
  --url http://localhost:30001/actuator/health \
  --header 'content-type: application/json'

----------------------------------------

TITLE: Configuring Docker Compose for GenAI Database Service
DESCRIPTION: Docker Compose configuration that sets up a Neo4j database service and defines environment variables for connections. Includes healthcheck configuration and port mappings.

LANGUAGE: yaml
CODE:
services:
  server:
    build:
      context: .
    ports:
      - 8000:8000
    env_file:
      - .env
    depends_on:
      database:
        condition: service_healthy
  database:
    image: neo4j:5.11
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      - NEO4J_AUTH=${NEO4J_USERNAME}/${NEO4J_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider localhost:7474 || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 5

----------------------------------------

TITLE: Building Services with Docker Compose
DESCRIPTION: Commands to build specific services or all services using Docker Compose.

LANGUAGE: console
CODE:
$ docker compose build vote

$ docker compose build

----------------------------------------

TITLE: Variable Definition for Product Links using Go Templates
DESCRIPTION: Defines template variables for product-specific links and navigation instructions using Go template syntax.

LANGUAGE: golang
CODE:
{{ $product_link := "[Docker Hub](https://hub.docker.com)" }}
{{ $sso_navigation := `Navigate to the SSO settings page for your organization. Select **Organizations**, your organization, **Settings**, and then **Security**.` }}

----------------------------------------

TITLE: Generating Environment-Specific Robots.txt with Hugo Templates
DESCRIPTION: Hugo template that generates different robots.txt content based on the environment. In production, it allows all crawling and includes sitemap reference. In non-production environments, it blocks all crawling to prevent search engine indexing of preview sites.

LANGUAGE: hugo
CODE:
{{- /*
	For Netlify deployments, we disallow all routes to prevent search
	engines from indexing our preview sites.
	*/
-}}

{{- if hugo.IsProduction -}}
User-agent: *


Sitemap: {{ "sitemap.xml" | absURL }}
{{- else -}}
# Disable all indexing on staging websites and Netlify previews to prevent
# them showing up in search results.
User-agent: *
Disallow: /
{{- end }}

----------------------------------------

TITLE: Defining YAML Front Matter for Docker Documentation Tags Page
DESCRIPTION: This YAML snippet defines the front matter for a page about browsing Docker documentation by tags. It specifies the page title and an icon parameter.

LANGUAGE: yaml
CODE:
---
title: Tags
params:
  icon: tag
---

----------------------------------------

TITLE: Creating a Secret from an Environment Variable in Docker Compose
DESCRIPTION: This example shows how to create a secret named 'token' from the value of an environment variable 'OAUTH_TOKEN'. The secret will be registered as a platform secret with the name '<project_name>_token' when the application is deployed.

LANGUAGE: yaml
CODE:
secrets:
  token:
    environment: "OAUTH_TOKEN"

----------------------------------------

TITLE: Configuring Resource Constraints in Docker Compose
DESCRIPTION: Demonstrates how to set resource limits and reservations for CPU, memory, and PIDs in a service deployment.

LANGUAGE: yaml
CODE:
services:
  frontend:
    image: example/webapp
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 50M
          pids: 1
        reservations:
          cpus: '0.25'
          memory: 20M

----------------------------------------

TITLE: Specifying recursive read-only bind mounts in Docker run command
DESCRIPTION: Example of using the new bind-recursive option when creating a read-only bind mount with Docker run.

LANGUAGE: bash
CODE:
docker run --mount type=bind,src=SRC,dst=DST,readonly,bind-recursive=writable IMAGE

----------------------------------------

TITLE: Installing Docker CE packages
DESCRIPTION: Command to install Docker CE packages, including the daemon, client and container runtime on Ubuntu.

LANGUAGE: console
CODE:
$ sudo apt-get install docker-ce docker-ce-cli containerd.io

----------------------------------------

TITLE: Multi-stage Node.js Build with Slim Base Image
DESCRIPTION: Demonstrates a multi-stage build pattern using Node.js, where the first stage uses the full Node.js image for building dependencies, and the second stage uses the slim variant for a smaller production image.

LANGUAGE: dockerfile
CODE:
FROM node:latest AS build
WORKDIR /app
COPY package.json package-lock.json ./
RUN npm ci
COPY . ./
FROM node:slim
WORKDIR /app
COPY --from=build /app /app
CMD ["node", "app.js"]

----------------------------------------

TITLE: Creating Docker Network
DESCRIPTION: Creates a new Docker network named todo-app for container communication

LANGUAGE: console
CODE:
docker network create todo-app

----------------------------------------

TITLE: File Type Reference Format
DESCRIPTION: Example table showing correct and incorrect ways to reference file types in documentation.

LANGUAGE: markdown
CODE:
| Correct | Incorrect |
| --- | --- |
| a PNG file | a .png file |
| a Bash file | an .sh file |

----------------------------------------

TITLE: Demonstrating Docker Command Example
DESCRIPTION: Example of how to format Docker commands in documentation using proper command prompt symbols and context.

LANGUAGE: bash
CODE:
user@host $ docker extension install <name-of-your-extension>