TITLE: Running Basic kubectl Command
DESCRIPTION: Basic syntax for running the kubectl command with optional flags. This is the core command format for interacting with a Kubernetes cluster.

LANGUAGE: shell
CODE:
kubectl [flags]

----------------------------------------

TITLE: Creating Kubernetes Deployment using YAML
DESCRIPTION: Example manifest showing required fields and object spec for a Kubernetes Deployment. Demonstrates the basic structure including apiVersion, kind, metadata, and spec fields.

LANGUAGE: yaml
CODE:
{{% code_sample file="application/deployment.yaml" %}}

----------------------------------------

TITLE: Common kubectl Operations
DESCRIPTION: Examples of common kubectl operations like apply, get, describe, delete, exec, and logs

LANGUAGE: shell
CODE:
# Create a service
kubectl apply -f example-service.yaml

# List all pods
kubectl get pods

# Display pod details
kubectl describe pods/<pod-name>

# Delete resources
kubectl delete -f pod.yaml

# Execute command in pod
kubectl exec <pod-name> -- date

# View pod logs
kubectl logs <pod-name>

----------------------------------------

TITLE: Creating a DaemonSet in Kubernetes YAML
DESCRIPTION: This YAML snippet describes a DaemonSet that runs the fluentd-elasticsearch Docker image. It demonstrates the basic structure of a DaemonSet configuration.

LANGUAGE: yaml
CODE:
{{% code_sample file="controllers/daemonset.yaml" %}}

----------------------------------------

TITLE: Creating and Scaling Kubernetes Deployments
DESCRIPTION: Shows how to create a Kubernetes Deployment, scale it, and set rollout parameters using kubectl create, scale, and patch commands.

LANGUAGE: shell
CODE:
kubectl create deployment my-nginx --image=nginx:1.14.2

LANGUAGE: none
CODE:
deployment.apps/my-nginx created

LANGUAGE: shell
CODE:
kubectl scale --replicas 1 deployments/my-nginx --subresource='scale' --type='merge' -p '{"spec":{"replicas": 1}}'

LANGUAGE: none
CODE:
deployment.apps/my-nginx scaled

LANGUAGE: shell
CODE:
kubectl patch --type='merge' -p '{"spec":{"strategy":{"rollingUpdate":{"maxSurge": "100%" }}}}'

LANGUAGE: none
CODE:
deployment.apps/my-nginx patched

----------------------------------------

TITLE: Creating MongoDB Service in Kubernetes
DESCRIPTION: This command creates a Kubernetes Service to expose the MongoDB deployment on the network. It applies a YAML file using kubectl.

LANGUAGE: shell
CODE:
kubectl apply -f https://k8s.io/examples/application/mongodb/mongo-service.yaml

----------------------------------------

TITLE: Applying Updated Kubernetes Deployment YAML
DESCRIPTION: This shell command applies the updated Deployment YAML file to modify the existing nginx deployment in the Kubernetes cluster.

LANGUAGE: shell
CODE:
kubectl apply -f https://k8s.io/examples/application/deployment-update.yaml

----------------------------------------

TITLE: Creating a ConfigMap from a Directory
DESCRIPTION: Use kubectl to create a ConfigMap from multiple files in a directory.

LANGUAGE: shell
CODE:
kubectl create configmap game-config --from-file=configure-pod-container/configmap/

----------------------------------------

TITLE: ResourceQuota Status Output
DESCRIPTION: Example YAML output showing the ResourceQuota configuration and usage status.

LANGUAGE: yaml
CODE:
spec:
  hard:
    pods: "2"
status:
  hard:
    pods: "2"
  used:
    pods: "0"

----------------------------------------

TITLE: Basic Job YAML Configuration
DESCRIPTION: Example YAML configuration for a basic Kubernetes Job that computes pi

LANGUAGE: yaml
CODE:
apiVersion: batch/v1
kind: Job
metadata:
  name: pi-with-timeout
spec:
  backoffLimit: 5
  activeDeadlineSeconds: 100
  template:
    spec:
      containers:
      - name: pi
        image: perl:5.34.0
        command: ["perl", "-Mbignum=bpi", "-wle", "print bpi(2000)"]
      restartPolicy: Never

----------------------------------------

TITLE: Reconciling RBAC Resources from a File in Kubernetes
DESCRIPTION: This command reconciles RBAC (Role-Based Access Control) resources from a specified YAML file. It creates missing objects, updates existing roles with new permissions, and modifies bindings to include specified subjects.

LANGUAGE: bash
CODE:
kubectl auth reconcile -f my-rbac-rules.yaml

----------------------------------------

TITLE: Installing and Running Process Viewer in Kubernetes Pod
DESCRIPTION: These commands update package lists, install the 'procps' package, and list running processes within the Container, useful for debugging and monitoring.

LANGUAGE: shell
CODE:
root@redis:/data/redis# apt-get update
root@redis:/data/redis# apt-get install procps
root@redis:/data/redis# ps aux

----------------------------------------

TITLE: Checking Deployment Status with kubectl
DESCRIPTION: Shell commands to check the status of a Kubernetes Deployment using kubectl, including getting Deployment details and rollout status.

LANGUAGE: Shell
CODE:
kubectl get deployments
kubectl rollout status deployment/nginx-deployment

----------------------------------------

TITLE: Retrieving Kubernetes Secret Data
DESCRIPTION: kubectl command to retrieve and display the contents of a Secret object in YAML format.

LANGUAGE: shell
CODE:
kubectl get secret mysecret -o yaml

----------------------------------------

TITLE: Pausing and Resuming a Kubernetes Deployment Rollout
DESCRIPTION: Shell commands to pause and resume a Kubernetes Deployment rollout using kubectl rollout.

LANGUAGE: Shell
CODE:
kubectl rollout pause deployment/nginx-deployment
kubectl rollout resume deployment/nginx-deployment

----------------------------------------

TITLE: Checking Deployment Status with kubectl
DESCRIPTION: Shell commands to check the status of a Kubernetes Deployment using kubectl, including getting Deployment details and rollout status.

LANGUAGE: Shell
CODE:
kubectl get deployments
kubectl rollout status deployment/nginx-deployment

----------------------------------------

TITLE: Basic Job YAML Configuration
DESCRIPTION: Example YAML configuration for a basic Kubernetes Job that computes pi

LANGUAGE: yaml
CODE:
apiVersion: batch/v1
kind: Job
metadata:
  name: pi-with-timeout
spec:
  backoffLimit: 5
  activeDeadlineSeconds: 100
  template:
    spec:
      containers:
      - name: pi
        image: perl:5.34.0
        command: ["perl", "-Mbignum=bpi", "-wle", "print bpi(2000)"]
      restartPolicy: Never

----------------------------------------

TITLE: Creating a Simple Pod in Kubernetes
DESCRIPTION: This YAML snippet defines a simple Pod that runs a single container with the nginx:1.14.2 image.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: nginx
spec:
  containers:
  - name: nginx
    image: nginx:1.14.2
    ports:
    - containerPort: 80

----------------------------------------

TITLE: Common kubectl get Usage Examples
DESCRIPTION: Demonstrates common usage patterns for kubectl get including listing pods, viewing detailed information, and filtering resources

LANGUAGE: bash
CODE:
# List all pods in ps output format
kubectl get pods

# List all pods with more information
kubectl get pods -o wide

# List a single replication controller
kubectl get replicationcontroller web

# List deployments in JSON format
kubectl get deployments.v1.apps -o json

# List a single pod in JSON format
kubectl get -o json pod web-pod-13je7

# List resources from a directory with kustomization.yaml
kubectl get -k dir/

# List custom columns
kubectl get pod test-pod -o custom-columns=CONTAINER:.spec.containers[0].name,IMAGE:.spec.containers[0].image

----------------------------------------

TITLE: Labeling a WordPress Deployment in Kubernetes
DESCRIPTION: This example shows how to apply the full set of recommended labels to a Deployment object for a WordPress application. It includes labels for name, instance, version, managed-by, component, and part-of fields.

LANGUAGE: yaml
CODE:
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: wordpress
    app.kubernetes.io/instance: wordpress-abcxyz
    app.kubernetes.io/version: "4.9.4"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: server
    app.kubernetes.io/part-of: wordpress
...

----------------------------------------

TITLE: Multi-Port Service Definition
DESCRIPTION: Example showing how to configure a Service that exposes multiple ports

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Service
metadata:
  name: my-service
spec:
  selector:
    app.kubernetes.io/name: MyApp
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 9376
    - name: https
      protocol: TCP
      port: 443
      targetPort: 9377

----------------------------------------

TITLE: Multi-Port Service Definition
DESCRIPTION: Example showing how to configure a Service that exposes multiple ports

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Service
metadata:
  name: my-service
spec:
  selector:
    app.kubernetes.io/name: MyApp
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 9376
    - name: https
      protocol: TCP
      port: 443
      targetPort: 9377

----------------------------------------

TITLE: Network Policy Configuration
DESCRIPTION: Sample network policy configuration for restricting pod communication

LANGUAGE: yaml
CODE:
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny-all
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress

----------------------------------------

TITLE: Creating a Basic Nginx Deployment in Kubernetes YAML
DESCRIPTION: YAML configuration for creating a basic Nginx Deployment with 3 replicas in Kubernetes. Specifies the Deployment metadata, Pod template, and container details.

LANGUAGE: YAML
CODE:
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  labels:
    app: nginx
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.14.2
        ports:
        - containerPort: 80

----------------------------------------

TITLE: Creating a PersistentVolumeClaim Using a Specific Storage Class in Kubernetes
DESCRIPTION: This YAML snippet defines a PersistentVolumeClaim that requests 30Gi of storage using the 'fast' storage class, which results in an SSD-like Persistent Disk being automatically provisioned.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: claim1
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: fast
  resources:
    requests:
      storage: 30Gi

----------------------------------------

TITLE: Describing Pod Status in Kubernetes
DESCRIPTION: Command to view detailed information about a pod's current state and recent events

LANGUAGE: shell
CODE:
kubectl describe pods ${POD_NAME}

----------------------------------------

TITLE: Restarting Kubelet
DESCRIPTION: This command restarts the kubelet service after configuration changes.

LANGUAGE: shell
CODE:
systemctl start kubelet

----------------------------------------

TITLE: Basic kubectl Command Syntax
DESCRIPTION: The basic syntax for using the kubectl command line tool to interact with a Kubernetes cluster. The command accepts various flags for authentication, configuration, and operation customization.

LANGUAGE: bash
CODE:
kubectl [flags]

----------------------------------------

TITLE: Headless Service and Pod DNS Configuration
DESCRIPTION: YAML configuration demonstrating a headless Service and two Pods with hostname and subdomain settings for DNS resolution.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Service
metadata:
  name: busybox-subdomain
spec:
  selector:
    name: busybox
  clusterIP: None
  ports:
  - name: foo
    port: 1234
---
apiVersion: v1
kind: Pod
metadata:
  name: busybox1
  labels:
    name: busybox
spec:
  hostname: busybox-1
  subdomain: busybox-subdomain
  containers:
  - image: busybox:1.28
    command:
      - sleep
      - "3600"
    name: busybox
---
apiVersion: v1
kind: Pod
metadata:
  name: busybox2
  labels:
    name: busybox
spec:
  hostname: busybox-2
  subdomain: busybox-subdomain
  containers:
  - image: busybox:1.28
    command:
      - sleep
      - "3600"
    name: busybox

----------------------------------------

TITLE: Updating kube-apiserver Manifest for Encryption
DESCRIPTION: Example of how to modify the kube-apiserver static pod manifest to enable encryption.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  annotations:
    kubeadm.kubernetes.io/kube-apiserver.advertise-address.endpoint: 10.20.30.40:443
  creationTimestamp: null
  labels:
    app.kubernetes.io/component: kube-apiserver
    tier: control-plane
  name: kube-apiserver
  namespace: kube-system
spec:
  containers:
  - command:
    - kube-apiserver
    ...
    - --encryption-provider-config=/etc/kubernetes/enc/enc.yaml  # add this line
    volumeMounts:
    ...
    - name: enc                           # add this line
      mountPath: /etc/kubernetes/enc      # add this line
      readOnly: true                      # add this line
    ...
  volumes:
  ...
  - name: enc                             # add this line
    hostPath:                             # add this line
      path: /etc/kubernetes/enc           # add this line
      type: DirectoryOrCreate             # add this line
  ...

----------------------------------------

TITLE: Configuring Container Security Context in Kubernetes YAML
DESCRIPTION: Example showing recommended container-level security context settings, including disabling privilege escalation, configuring read-only root filesystem, and managing capabilities.

LANGUAGE: yaml
CODE:
securityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  privileged: false
  capabilities:
    drop: ["ALL"]

----------------------------------------

TITLE: Creating a Basic Nginx Deployment in Kubernetes YAML
DESCRIPTION: YAML configuration for creating a basic Nginx Deployment with 3 replicas in Kubernetes. Specifies the Deployment metadata, Pod template, and container details.

LANGUAGE: YAML
CODE:
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  labels:
    app: nginx
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.14.2
        ports:
        - containerPort: 80

----------------------------------------

TITLE: Using Environment Variables in Kubernetes Pod Configuration YAML
DESCRIPTION: This YAML configuration demonstrates how to use environment variables within the Pod's configuration. It sets multiple environment variables and uses them in the container's command arguments.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: print-greeting
spec:
  containers:
  - name: env-print-demo
    image: bash
    env:
    - name: GREETING
      value: "Warm greetings to"
    - name: HONORIFIC
      value: "The Most Honorable"
    - name: NAME
      value: "Kubernetes"
    - name: MESSAGE
      value: "$(GREETING) $(HONORIFIC) $(NAME)"
    command: ["echo"]
    args: ["$(MESSAGE)"]

----------------------------------------

TITLE: Deploying Sidecar Container Example
DESCRIPTION: YAML configuration example showing how to define a Deployment with two containers, where one is a sidecar container. The sidecar container provides supporting functionality to the main application container.

LANGUAGE: yaml
CODE:
{{% code_sample language="yaml" file="application/deployment-sidecar.yaml" %}}

----------------------------------------

TITLE: Deploying Sidecar Container Example
DESCRIPTION: YAML configuration example showing how to define a Deployment with two containers, where one is a sidecar container. The sidecar container provides supporting functionality to the main application container.

LANGUAGE: yaml
CODE:
{{% code_sample language="yaml" file="application/deployment-sidecar.yaml" %}}

----------------------------------------

TITLE: Delete a Pod
DESCRIPTION: Delete a specific Pod by name in a namespace.

LANGUAGE: Go
CODE:
DELETE /api/v1/namespaces/{namespace}/pods/{name}

----------------------------------------

TITLE: Creating Nginx Deployment Using Imperative Command
DESCRIPTION: Creates a Deployment object that runs an nginx container using kubectl's imperative command approach. This is a simple one-line command suitable for development and testing.

LANGUAGE: sh
CODE:
kubectl create deployment nginx --image nginx

----------------------------------------

TITLE: Accessing API using jsonpath
DESCRIPTION: This shell script demonstrates how to use jsonpath to extract the API server address and token, then use them to access the Kubernetes API directly.

LANGUAGE: shell
CODE:
APISERVER=$(kubectl config view --minify -o jsonpath='{.clusters[0].cluster.server}')
TOKEN=$(kubectl get secret default-token -o jsonpath='{.data.token}' | base64 --decode)

curl $APISERVER/api --header "Authorization: Bearer $TOKEN" --insecure

----------------------------------------

TITLE: Applying Pod Configuration and Verifying Status
DESCRIPTION: These commands apply the Pod configuration, check the Pod's status, and execute a shell within the running container to verify the projected volume contents.

LANGUAGE: shell
CODE:
kubectl apply -f https://k8s.io/examples/pods/storage/projected.yaml
kubectl get --watch pod test-projected-volume
kubectl exec -it test-projected-volume -- /bin/sh
ls /projected-volume/

----------------------------------------

TITLE: Draining Kubernetes Node
DESCRIPTION: Command to safely drain a node before maintenance by marking it unschedulable and evicting workloads.

LANGUAGE: shell
CODE:
kubectl drain <node-to-drain> --ignore-daemonsets

----------------------------------------

TITLE: External etcd Configuration
DESCRIPTION: YAML configuration for setting up Kubernetes cluster with external etcd nodes.

LANGUAGE: yaml
CODE:
---
apiVersion: kubeadm.k8s.io/v1beta4
kind: ClusterConfiguration
kubernetesVersion: stable
controlPlaneEndpoint: "LOAD_BALANCER_DNS:LOAD_BALANCER_PORT"
etcd:
  external:
    endpoints:
      - https://ETCD_0_IP:2379
      - https://ETCD_1_IP:2379
      - https://ETCD_2_IP:2379
    caFile: /etc/kubernetes/pki/etcd/ca.crt
    certFile: /etc/kubernetes/pki/apiserver-etcd-client.crt
    keyFile: /etc/kubernetes/pki/apiserver-etcd-client.key

----------------------------------------

TITLE: Defining Pod Readiness Gates in YAML
DESCRIPTION: Example of specifying readiness gates in a Pod specification and the corresponding status conditions.

LANGUAGE: yaml
CODE:
kind: Pod
...
spec:
  readinessGates:
    - conditionType: "www.example.com/feature-1"
status:
  conditions:
    - type: Ready                              # a built in PodCondition
      status: "False"
      lastProbeTime: null
      lastTransitionTime: 2018-01-01T00:00:00Z
    - type: "www.example.com/feature-1"        # an extra PodCondition
      status: "False"
      lastProbeTime: null
      lastTransitionTime: 2018-01-01T00:00:00Z
  containerStatuses:
    - containerID: docker://abcd...
      ready: true
...

----------------------------------------

TITLE: List Pods in a Namespace
DESCRIPTION: List or watch Pod objects in a specific namespace.

LANGUAGE: Go
CODE:
GET /api/v1/namespaces/{namespace}/pods

----------------------------------------

TITLE: Downloading kubectl Binary with curl on Linux
DESCRIPTION: This snippet demonstrates how to download the latest kubectl binary for Linux using curl. It includes separate commands for x86-64 and ARM64 architectures.

LANGUAGE: bash
CODE:
curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"

LANGUAGE: bash
CODE:
curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/arm64/kubectl"

----------------------------------------

TITLE: Deleting Kubernetes Deployment
DESCRIPTION: Demonstrates how to delete a Kubernetes deployment using the kubectl delete command.

LANGUAGE: shell
CODE:
kubectl delete deployment/nginx

----------------------------------------

TITLE: Creating a Pod with Environment Variables in Kubernetes YAML
DESCRIPTION: This YAML configuration defines a Pod named 'envar-demo' with a single container. It sets two environment variables: DEMO_GREETING and DEMO_FAREWELL.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: envar-demo
  labels:
    purpose: demonstrate-envars
spec:
  containers:
  - name: envar-demo-container
    image: gcr.io/google-samples/node-hello:1.0
    env:
    - name: DEMO_GREETING
      value: "Hello from the environment"
    - name: DEMO_FAREWELL
      value: "Such a sweet sorrow"

----------------------------------------

TITLE: Attaching to a Running Container with Docker
DESCRIPTION: This snippet demonstrates how to attach to a running container using the Docker CLI.

LANGUAGE: shell
CODE:
docker ps

LANGUAGE: shell
CODE:
docker attach 55c103fa1296

----------------------------------------

TITLE: Creating a Pod Using kubectl Command
DESCRIPTION: This shell command demonstrates how to create a Pod in Kubernetes using kubectl and a YAML file.

LANGUAGE: shell
CODE:
kubectl apply -f https://k8s.io/examples/pods/simple-pod.yaml

----------------------------------------

TITLE: Basic StatefulSet and Headless Service Configuration
DESCRIPTION: Example of configuring a StatefulSet with 3 nginx replicas and an associated headless service. Includes persistent volume claims, pod templates, and service configuration.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Service
metadata:
  name: nginx
  labels:
    app: nginx
spec:
  ports:
  - port: 80
    name: web
  clusterIP: None
  selector:
    app: nginx
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: web
spec:
  selector:
    matchLabels:
      app: nginx
  serviceName: "nginx"
  replicas: 3
  minReadySeconds: 10
  template:
    metadata:
      labels:
        app: nginx
    spec:
      terminationGracePeriodSeconds: 10
      containers:
      - name: nginx
        image: registry.k8s.io/nginx-slim:0.24
        ports:
        - containerPort: 80
          name: web
        volumeMounts:
        - name: www
          mountPath: /usr/share/nginx/html
  volumeClaimTemplates:
  - metadata:
      name: www
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: "my-storage-class"
      resources:
        requests:
          storage: 1Gi

----------------------------------------

TITLE: Initializing Kubernetes Cluster with kubeadm Config (YAML)
DESCRIPTION: Example of a fully populated YAML configuration file containing multiple configuration types to be used during a kubeadm init run.

LANGUAGE: yaml
CODE:
apiVersion: kubeadm.k8s.io/v1beta4
kind: InitConfiguration
bootstrapTokens:
  - token: "9a08jv.c0izixklcxtmnze7"
    description: "kubeadm bootstrap token"
    ttl: "24h"
  - token: "783bde.3f89s0fje9f38fhf"
    description: "another bootstrap token"
    usages:
  - authentication
  - signing
    groups:
  - system:bootstrappers:kubeadm:default-node-token

nodeRegistration:
  name: "ec2-10-100-0-1"
  criSocket: "unix:///var/run/containerd/containerd.sock"
  taints:
    - key: "kubeadmNode"
      value: "someValue"
      effect: "NoSchedule"
  kubeletExtraArgs:
    - name: v
      value: "5"
  ignorePreflightErrors:
    - IsPrivilegedUser
  imagePullPolicy: "IfNotPresent"
  imagePullSerial: true

localAPIEndpoint:
  advertiseAddress: "10.100.0.1"
  bindPort: 6443
certificateKey: "e6a2eb8581237ab72a4f494f30285ec12a9694d750b9785706a83bfcbbbd2204"
skipPhases:
  - preflight
timeouts:
  controlPlaneComponentHealthCheck: "60s"
  kubenetesAPICall: "40s"
---
apiVersion: kubeadm.k8s.io/v1beta4
kind: ClusterConfiguration
etcd:

  # one of local or external
  local:
    imageRepository: "registry.k8s.io"
    imageTag: "3.2.24"
    dataDir: "/var/lib/etcd"
    extraArgs:
      - name: listen-client-urls
        value: http://10.100.0.1:2379
    extraEnvs:
      - name: SOME_VAR
        value: SOME_VALUE
    serverCertSANs:
      - ec2-10-100-0-1.compute-1.amazonaws.com
    peerCertSANs:
      - 10.100.0.1
  # external:
  #   endpoints:
  #     - 10.100.0.1:2379
  #     - 10.100.0.2:2379
  #   caFile: "/etcd/kubernetes/pki/etcd/etcd-ca.crt"
  #   certFile: "/etcd/kubernetes/pki/etcd/etcd.crt"
  #   keyFile: "/etcd/kubernetes/pki/etcd/etcd.key"

networking:
  serviceSubnet: "10.96.0.0/16"
  podSubnet: "10.244.0.0/24"
  dnsDomain: "cluster.local"
kubernetesVersion: "v1.21.0"
controlPlaneEndpoint: "10.100.0.1:6443"
apiServer:
  extraArgs:
    - name: authorization-mode
      value: Node,RBAC
  extraEnvs:
    - name: SOME_VAR
      value: SOME_VALUE
  extraVolumes:
    - name: "some-volume"
      hostPath: "/etc/some-path"
      mountPath: "/etc/some-pod-path"
      readOnly: false
      pathType: File
  certSANs:
    - "10.100.1.1"
    - "ec2-10-100-0-1.compute-1.amazonaws.com"

controllerManager:
  extraArgs:
    - name: node-cidr-mask-size
      value: "20"
  extraVolumes:
    - name: "some-volume"
      hostPath: "/etc/some-path"
      mountPath: "/etc/some-pod-path"
      readOnly: false
      pathType: File

scheduler:
  extraArgs:
    - name: address
      value: 10.100.0.1
  extraVolumes:
    - name: "some-volume"
      hostPath: "/etc/some-path"
      mountPath: "/etc/some-pod-path"
      readOnly: false
      pathType: File

certificatesDir: "/etc/kubernetes/pki"
imageRepository: "registry.k8s.io"
clusterName: "example-cluster"
encryptionAlgorithm: ECDSA-P256
dns:
  disabled: true  # disable CoreDNS
proxy:
  disabled: true   # disable kube-proxy

---
apiVersion: kubelet.config.k8s.io/v1beta1
kind: KubeletConfiguration
# kubelet specific options here
---
apiVersion: kubeproxy.config.k8s.io/v1alpha1
kind: KubeProxyConfiguration
# kube-proxy specific options here

----------------------------------------

TITLE: Creating a Kubernetes Secret Manifest
DESCRIPTION: YAML configuration for a Kubernetes Secret object with base64 encoded data fields for username and password.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Secret
metadata:
  name: mysecret
type: Opaque
data:
  username: YWRtaW4=
  password: MWYyZDFlMmU2N2Rm

----------------------------------------

TITLE: Generating ExecCredential Output
DESCRIPTION: Example JSON output from a client-go credential plugin

LANGUAGE: json
CODE:
{
  "apiVersion": "client.authentication.k8s.io/v1",
  "kind": "ExecCredential",
  "status": {
    "token": "my-bearer-token",
    "expirationTimestamp": "2018-03-05T17:30:20-08:00"
  }
}

----------------------------------------

TITLE: Creating a Basic Authentication Secret
DESCRIPTION: Example YAML configuration for creating a basic authentication Secret. This stores a username and password for basic auth.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Secret
metadata:
  name: secret-basic-auth
type: kubernetes.io/basic-auth
stringData:
  username: admin
  password: t0p-Secret

----------------------------------------

TITLE: Creating a Basic Authentication Secret
DESCRIPTION: Example YAML configuration for creating a basic authentication Secret. This stores a username and password for basic auth.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Secret
metadata:
  name: secret-basic-auth
type: kubernetes.io/basic-auth
stringData:
  username: admin
  password: t0p-Secret

----------------------------------------

TITLE: Creating a CronJob Configuration in YAML
DESCRIPTION: This YAML manifest defines a CronJob that runs a simple demonstration task every minute in a Kubernetes cluster.

LANGUAGE: yaml
CODE:
{{% code_sample file="application/job/cronjob.yaml" %}}

----------------------------------------

TITLE: Defining RBAC ClusterRole for Prometheus Metrics Access in Kubernetes
DESCRIPTION: This YAML snippet defines a ClusterRole that grants read access to the /metrics endpoint, allowing Prometheus or other monitoring tools to scrape metrics from Kubernetes components.

LANGUAGE: yaml
CODE:
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
rules:
  - nonResourceURLs:
      - "/metrics"
    verbs:
      - get

----------------------------------------

TITLE: Mounting ConfigMap as Volume in Pod
DESCRIPTION: Example demonstrating how to mount a ConfigMap as a volume in a Pod specification using the Redis image.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: mypod
spec:
  containers:
  - name: mypod
    image: redis
    volumeMounts:
    - name: foo
      mountPath: "/etc/foo"
      readOnly: true
  volumes:
  - name: foo
    configMap:
      name: myconfigmap

----------------------------------------

TITLE: Creating Hostname Deployment
DESCRIPTION: Deployment configuration for creating a test service with multiple replicas

LANGUAGE: yaml
CODE:
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: hostnames
  name: hostnames
spec:
  selector:
    matchLabels:
      app: hostnames
  replicas: 3
  template:
    metadata:
      labels:
        app: hostnames
    spec:
      containers:
      - name: hostnames
        image: registry.k8s.io/serve_hostname

----------------------------------------

TITLE: Creating Hostname Deployment
DESCRIPTION: Deployment configuration for creating a test service with multiple replicas

LANGUAGE: yaml
CODE:
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: hostnames
  name: hostnames
spec:
  selector:
    matchLabels:
      app: hostnames
  replicas: 3
  template:
    metadata:
      labels:
        app: hostnames
    spec:
      containers:
      - name: hostnames
        image: registry.k8s.io/serve_hostname

----------------------------------------

TITLE: Defining CredentialProviderResponse Struct in Go
DESCRIPTION: Defines the structure for a CredentialProviderResponse, which holds credentials that the kubelet should use for the specified image. This struct is used by plugins to respond to kubelet requests via stdout.

LANGUAGE: go
CODE:
type CredentialProviderResponse struct {
    metav1.TypeMeta `json:",inline"`
    CacheKeyType PluginCacheKeyType `json:"cacheKeyType"`
    CacheDuration *metav1.Duration `json:"cacheDuration,omitempty"`
    Auth map[string]AuthConfig `json:"auth,omitempty"`
}

----------------------------------------

TITLE: Defining a Simple Role in Kubernetes RBAC
DESCRIPTION: YAML definition for a simple Role that grants read access to pods in the default namespace.

LANGUAGE: yaml
CODE:
{{% code_sample file="access/simple-role.yaml" %}}

----------------------------------------

TITLE: Creating Kubernetes Service
DESCRIPTION: Expose the deployment as a LoadBalancer service to make it accessible from outside the cluster

LANGUAGE: shell
CODE:
kubectl expose deployment hello-node --type=LoadBalancer --port=8080

----------------------------------------

TITLE: Using Goldmark Markdown Renderer in Hugo
DESCRIPTION: Example of using Goldmark Markdown Renderer with Hugo shortcodes in Kubernetes documentation.

LANGUAGE: markdown
CODE:
{{< note >}}
Kubernetes documentation uses
[Goldmark Markdown Renderer](https://github.com/yuin/goldmark)
with some adjustments along with a few
[Hugo Shortcodes](/docs/contribute/style/hugo-shortcodes/) to support
glossary entries, tabs, and representing feature state.
{{< /note >}}

----------------------------------------

TITLE: Applying Pod Manifest with Preferred Node Affinity
DESCRIPTION: This command applies a pod manifest that uses preferred node affinity to schedule the pod, preferring nodes with the 'disktype=ssd' label.

LANGUAGE: shell
CODE:
kubectl apply -f https://k8s.io/examples/pods/pod-nginx-preferred-affinity.yaml

----------------------------------------

TITLE: Creating Minikube Cluster
DESCRIPTION: Initialize a local Kubernetes cluster using Minikube

LANGUAGE: shell
CODE:
minikube start

----------------------------------------

TITLE: Configuring Pod Security Context in Kubernetes YAML
DESCRIPTION: Example showing recommended security context settings at the Pod level, including running as non-root, configuring user/group permissions, and setting appropriate file system access.

LANGUAGE: yaml
CODE:
securityContext:
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 3000
  fsGroup: 2000

----------------------------------------

TITLE: PersistentVolume with GID Annotation
DESCRIPTION: YAML configuration showing how to annotate a PersistentVolume with a GID for access control.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv1
  annotations:
    pv.beta.kubernetes.io/gid: "1234"

----------------------------------------

TITLE: Creating a PersistentVolumeClaim from an Existing PVC in Kubernetes YAML
DESCRIPTION: Example YAML definition for a PersistentVolumeClaim that is cloned from an existing PVC, demonstrating volume cloning.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: cloned-pvc
spec:
  storageClassName: my-csi-plugin
  dataSource:
    name: existing-src-pvc-name
    kind: PersistentVolumeClaim
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

----------------------------------------

TITLE: Creating ConfigMap for Environment Variables
DESCRIPTION: Example showing how to create a ConfigMap with username and access level properties for environment variables.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: ConfigMap
metadata:
  name: myconfigmap
data:
  username: k8s-admin
  access_level: "1"

----------------------------------------

TITLE: Creating a Storage Class for SSD Disk Provisioning in Kubernetes
DESCRIPTION: This YAML snippet defines a StorageClass named 'fast' that provisions SSD-like persistent disks using the kubernetes.io/gce-pd provisioner.

LANGUAGE: yaml
CODE:
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: fast
provisioner: kubernetes.io/gce-pd
parameters:
  type: pd-ssd

----------------------------------------

TITLE: Creating Nginx Deployment
DESCRIPTION: Creates a deployment using nginx with resource requests and limits specified

LANGUAGE: shell
CODE:
kubectl apply -f https://k8s.io/examples/application/nginx-with-request.yaml

----------------------------------------

TITLE: Generating Encryption Key on Linux/macOS
DESCRIPTION: Command to generate a 32-byte random key and base64 encode it on Linux or macOS systems.

LANGUAGE: shell
CODE:
head -c 32 /dev/urandom | base64

----------------------------------------

TITLE: Creating a PersistentVolumeClaim from an Existing PVC in Kubernetes YAML
DESCRIPTION: Example YAML definition for a PersistentVolumeClaim that is cloned from an existing PVC, demonstrating volume cloning.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: cloned-pvc
spec:
  storageClassName: my-csi-plugin
  dataSource:
    name: existing-src-pvc-name
    kind: PersistentVolumeClaim
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

----------------------------------------

TITLE: Creating a Bootstrap Token Secret (Literal Values)
DESCRIPTION: Example YAML configuration for creating a bootstrap token Secret with literal string values.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Secret
metadata:
  # Note how the Secret is named
  name: bootstrap-token-5emitj
  # A bootstrap token Secret usually resides in the kube-system namespace
  namespace: kube-system
type: bootstrap.kubernetes.io/token
stringData:
  auth-extra-groups: "system:bootstrappers:kubeadm:default-node-token"
  expiration: "2020-09-13T04:39:10Z"
  # This token ID is used in the name
  token-id: "5emitj"
  token-secret: "kq4gihvszzgn1p0r"
  # This token can be used for authentication
  usage-bootstrap-authentication: "true"
  # This token can be used for signing
  usage-bootstrap-signing: "true"

----------------------------------------

TITLE: Defining Basic Service
DESCRIPTION: Example of defining a basic Kubernetes Service that targets pods with label app.kubernetes.io/name=MyApp on port 9376

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Service
metadata:
  name: my-service
spec:
  selector:
    app.kubernetes.io/name: MyApp
  ports:
    - protocol: TCP
      port: 80
      targetPort: 9376

----------------------------------------

TITLE: Configuring Job and Headless Service for Pod Communication
DESCRIPTION: Complete YAML configuration that sets up a headless service and a Job with indexed completion mode to enable pod-to-pod communication using hostnames. The Job creates 3 pods that must successfully ping each other to complete.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Service
metadata:
  name: headless-svc
spec:
  clusterIP: None # clusterIP must be None to create a headless service
  selector:
    job-name: example-job # must match Job name
---
apiVersion: batch/v1
kind: Job
metadata:
  name: example-job
spec:
  completions: 3
  parallelism: 3
  completionMode: Indexed
  template:
    spec:
      subdomain: headless-svc # has to match Service name
      restartPolicy: Never
      containers:
      - name: example-workload
        image: bash:latest
        command:
        - bash
        - -c
        - |
          for i in 0 1 2
          do
            gotStatus="-1"
            wantStatus="0"             
            while [ $gotStatus -ne $wantStatus ]
            do                                       
              ping -c 1 example-job-${i}.headless-svc > /dev/null 2>&1
              gotStatus=$?                
              if [ $gotStatus -ne $wantStatus ]; then
                echo "Failed to ping pod example-job-${i}.headless-svc, retrying in 1 second..."
                sleep 1
              fi
            done                                                         
            echo "Successfully pinged pod: example-job-${i}.headless-svc"
          done

----------------------------------------

TITLE: Defining a Horizontal Pod Autoscaler for a ReplicaSet
DESCRIPTION: This YAML file defines a Horizontal Pod Autoscaler that targets the 'frontend' ReplicaSet, automatically scaling it based on CPU usage.

LANGUAGE: yaml
CODE:
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: frontend-scaler
spec:
  scaleTargetRef:
    kind: ReplicaSet
    name: frontend
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 50

----------------------------------------

TITLE: Creating a Role with kubectl in Kubernetes
DESCRIPTION: Commands to create various types of Roles using kubectl.

LANGUAGE: shell
CODE:
kubectl create role pod-reader --verb=get --verb=list --verb=watch --resource=pods

kubectl create role pod-reader --verb=get --resource=pods --resource-name=readablepod --resource-name=anotherpod

kubectl create role foo --verb=get,list,watch --resource=replicasets.apps

kubectl create role foo --verb=get,list,watch --resource=pods,pods/status

kubectl create role my-component-lease-holder --verb=get,list,watch,update --resource=lease --resource-name=my-component

----------------------------------------

TITLE: Deploying MySQL PersistentVolume and PersistentVolumeClaim in Kubernetes
DESCRIPTION: This YAML configuration creates a PersistentVolume and PersistentVolumeClaim for MySQL storage. It defines a 20G volume that can be used by the MySQL deployment.

LANGUAGE: yaml
CODE:
{{% code_sample file="application/mysql/mysql-pv.yaml" %}}

----------------------------------------

TITLE: Configuring kubelet for etcd service management in Kubernetes
DESCRIPTION: This snippet shows how to configure the kubelet to manage etcd as a service. It creates configuration files for the kubelet and restarts the service.

LANGUAGE: bash
CODE:
cat << EOF > /etc/systemd/system/kubelet.service.d/kubelet.conf
# Replace "systemd" with the cgroup driver of your container runtime. The default value in the kubelet is "cgroupfs".
# Replace the value of "containerRuntimeEndpoint" for a different container runtime if needed.
#
apiVersion: kubelet.config.k8s.io/v1beta1
kind: KubeletConfiguration
authentication:
  anonymous:
    enabled: false
  webhook:
    enabled: false
authorization:
  mode: AlwaysAllow
cgroupDriver: systemd
address: 127.0.0.1
containerRuntimeEndpoint: unix:///var/run/containerd/containerd.sock
staticPodPath: /etc/kubernetes/manifests
EOF

cat << EOF > /etc/systemd/system/kubelet.service.d/20-etcd-service-manager.conf
[Service]
ExecStart=
ExecStart=/usr/bin/kubelet --config=/etc/systemd/system/kubelet.service.d/kubelet.conf
Restart=always
EOF

systemctl daemon-reload
systemctl restart kubelet

----------------------------------------

TITLE: Defining Basic Service
DESCRIPTION: Example of defining a basic Kubernetes Service that targets pods with label app.kubernetes.io/name=MyApp on port 9376

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Service
metadata:
  name: my-service
spec:
  selector:
    app.kubernetes.io/name: MyApp
  ports:
    - protocol: TCP
      port: 80
      targetPort: 9376

----------------------------------------

TITLE: Defining Basic Service
DESCRIPTION: Example of defining a basic Kubernetes Service that targets pods with label app.kubernetes.io/name=MyApp on port 9376

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Service
metadata:
  name: my-service
spec:
  selector:
    app.kubernetes.io/name: MyApp
  ports:
    - protocol: TCP
      port: 80
      targetPort: 9376

----------------------------------------

TITLE: Updating a StatefulSet with Rolling Update Strategy
DESCRIPTION: This command updates the container image of the StatefulSet using a rolling update strategy.

LANGUAGE: shell
CODE:
kubectl patch statefulset web --type='json' -p='[{"op": "replace", "path": "/spec/template/spec/containers/0/image", "value":"registry.k8s.io/nginx-slim:0.24"}]'

----------------------------------------

TITLE: Filtering Container Images by Namespace in Kubernetes
DESCRIPTION: This command lists Container images for Pods in a specific namespace (kube-system). It shows how to use the --namespace flag to target a particular namespace when retrieving Container images.

LANGUAGE: shell
CODE:
kubectl get pods --namespace kube-system -o jsonpath="{.items[*].spec.containers[*].image}"

----------------------------------------

TITLE: Defining a Kubernetes Pod with emptyDir Volume in YAML
DESCRIPTION: This YAML configuration defines a Pod named 'redis' with a single Container and an emptyDir Volume mounted at /data. The Volume provides persistent storage for the Container throughout the Pod's lifecycle.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: redis
spec:
  containers:
  - name: redis
    image: redis
    volumeMounts:
    - name: redis-storage
      mountPath: /data/redis
  volumes:
  - name: redis-storage
    emptyDir: {}

----------------------------------------

TITLE: Setting Up Networking with Flannel
DESCRIPTION: Updates Flannel image locations and applies the Flannel manifest.

LANGUAGE: bash
CODE:
sed -i 's/image: docker\.io/image: localhost:5000/g' kube-flannel.yaml
kubectl apply -f kube-flannel.yaml

----------------------------------------

TITLE: Configurable Container Restart Delay in Kubelet Configuration
DESCRIPTION: Examples of configuring the maximum delay between container start retries in kubelet configuration.

LANGUAGE: yaml
CODE:
# container restart delays will start at 10s, increasing
# 2x each time they are restarted, to a maximum of 100s
kind: KubeletConfiguration
crashLoopBackOff:
    maxContainerRestartPeriod: "100s"

LANGUAGE: yaml
CODE:
# delays between container restarts will always be 2s
kind: KubeletConfiguration
crashLoopBackOff:
    maxContainerRestartPeriod: "2s"

----------------------------------------

TITLE: Two Files Counter Pod Configuration
DESCRIPTION: YAML manifest for a Pod that writes to two different log files using different formats.

LANGUAGE: yaml
CODE:
{{% code_sample file="admin/logging/two-files-counter-pod.yaml" %}}

----------------------------------------

TITLE: Default Deny NetworkPolicy
DESCRIPTION: A NetworkPolicy that denies all ingress traffic by default when applied to a namespace.

LANGUAGE: yaml
CODE:
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny
spec:
  podSelector:

----------------------------------------

TITLE: Creating Kubernetes Resources with kubectl create
DESCRIPTION: The kubectl create command is used to create resources in a Kubernetes cluster from a file or stdin. It supports both JSON and YAML formats.

LANGUAGE: bash
CODE:
kubectl create -f FILENAME

----------------------------------------

TITLE: Defining Container Environment Variables using ConfigMap
DESCRIPTION: Use ConfigMap data to define environment variables in a Pod specification.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: dapi-test-pod
spec:
  containers:
    - name: test-container
      image: k8s.gcr.io/busybox
      command: [ "/bin/sh", "-c", "env" ]
      env:
        - name: SPECIAL_LEVEL_KEY
          valueFrom:
            configMapKeyRef:
              name: special-config
              key: special.how
  restartPolicy: Never

----------------------------------------

TITLE: Registering a Device Plugin with gRPC in Kubernetes
DESCRIPTION: This gRPC service definition shows how a device plugin registers itself with the kubelet in Kubernetes. It includes the Register method that the plugin calls to register.

LANGUAGE: gRPC
CODE:
service Registration {
	rpc Register(RegisterRequest) returns (Empty) {}
}

----------------------------------------

TITLE: Two Files Counter Pod Configuration
DESCRIPTION: YAML manifest for a Pod that writes to two different log files using different formats.

LANGUAGE: yaml
CODE:
{{% code_sample file="admin/logging/two-files-counter-pod.yaml" %}}

----------------------------------------

TITLE: Creating Pods with Production and Test Credentials using Secrets
DESCRIPTION: Provides an example of creating two Pods, one consuming production credentials and another consuming test credentials, both stored as Secrets.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: List
items:
- kind: Pod
  apiVersion: v1
  metadata:
    name: prod-db-client-pod
    labels:
      name: prod-db-client
  spec:
    volumes:
    - name: secret-volume
      secret:
        secretName: prod-db-secret
    containers:
    - name: db-client-container
      image: myClientImage
      volumeMounts:
      - name: secret-volume
        readOnly: true
        mountPath: "/etc/secret-volume"
- kind: Pod
  apiVersion: v1
  metadata:
    name: test-db-client-pod
    labels:
      name: test-db-client
  spec:
    volumes:
    - name: secret-volume
      secret:
        secretName: test-db-secret
    containers:
    - name: db-client-container
      image: myClientImage
      volumeMounts:
      - name: secret-volume
        readOnly: true
        mountPath: "/etc/secret-volume"

----------------------------------------

TITLE: Defining a Kubernetes Pod with Two Containers and a Shared Volume
DESCRIPTION: This YAML configuration defines a Pod named 'two-containers' with two containers (nginx and debian) that share a Volume named 'shared-data'. The debian container writes to the shared volume, which is then served by the nginx container.

LANGUAGE: yaml
CODE:
{{% code_sample file="pods/two-container-pod.yaml" %}}

----------------------------------------

TITLE: Creating a Pod with Access to Secret Data via Volume
DESCRIPTION: Illustrates the YAML configuration for creating a Pod that mounts a Secret as a volume, allowing the container to access the secret data as files.

LANGUAGE: yaml
CODE:
{{% code_sample file="pods/inject/secret-pod.yaml" %}}

----------------------------------------

TITLE: Kubernetes Event Query Command
DESCRIPTION: Command to check for invalid cross-namespace owner reference events in Kubernetes

LANGUAGE: shell
CODE:
kubectl get events -A --field-selector=reason=OwnerRefInvalidNamespace

----------------------------------------

TITLE: Creating a ReplicaSet using kubectl
DESCRIPTION: This command applies the ReplicaSet definition from a YAML file to create the ReplicaSet in a Kubernetes cluster.

LANGUAGE: shell
CODE:
kubectl apply -f https://kubernetes.io/examples/controllers/frontend.yaml

----------------------------------------

TITLE: Running a Command in a Shell within Kubernetes Pod
DESCRIPTION: This YAML configuration shows how to run a command in a shell within a Kubernetes pod, useful for executing complex commands or shell scripts.

LANGUAGE: yaml
CODE:
command: ["/bin/sh"]
args: ["-c", "while true; do echo hello; sleep 10;done"]

----------------------------------------

TITLE: Generating Super-Admin Kubeconfig with Kubeadm
DESCRIPTION: Command to generate a kubeconfig file for the Kubernetes super-admin. The generated file will be saved as super-admin.conf in the specified kubeconfig directory.

LANGUAGE: bash
CODE:
kubeadm init phase kubeconfig super-admin [flags]

----------------------------------------

TITLE: Applying Multiple Kubernetes Manifests
DESCRIPTION: Demonstrates how to apply multiple Kubernetes manifest files using kubectl apply with multiple -f arguments.

LANGUAGE: shell
CODE:
kubectl apply -f https://k8s.io/examples/application/nginx/nginx-svc.yaml \
  -f https://k8s.io/examples/application/nginx/nginx-deployment.yaml

----------------------------------------

TITLE: Creating a File in Kubernetes Pod Volume
DESCRIPTION: These shell commands navigate to the mounted Volume directory and create a test file, demonstrating file creation within the persistent storage.

LANGUAGE: shell
CODE:
root@redis:/data# cd /data/redis/
root@redis:/data/redis# echo Hello > test-file

----------------------------------------

TITLE: Creating Basic Ingress in Kubernetes
DESCRIPTION: Basic syntax for creating an ingress resource with name and routing rules

LANGUAGE: bash
CODE:
kubectl create ingress NAME --rule=host/path=service:port[,tls[=secret]]

----------------------------------------

TITLE: Defining a Name-based Virtual Hosting Ingress
DESCRIPTION: An example of an Ingress that uses name-based virtual hosting to route traffic to different backend services.

LANGUAGE: yaml
CODE:
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: name-virtual-host-ingress
spec:
  rules:
  - host: foo.bar.com
    http:
      paths:
      - pathType: Prefix
        path: "/"
        backend:
          service:
            name: service1
            port:
              number: 80
  - host: bar.foo.com
    http:
      paths:
      - pathType: Prefix
        path: "/"
        backend:
          service:
            name: service2
            port:
              number: 80

----------------------------------------

TITLE: Applying Kubernetes Configurations
DESCRIPTION: Shell commands to apply the Kubernetes configurations for creating the backend and frontend Deployments and Services.

LANGUAGE: shell
CODE:
kubectl apply -f https://k8s.io/examples/service/access/backend-deployment.yaml
kubectl apply -f https://k8s.io/examples/service/access/backend-service.yaml
kubectl apply -f https://k8s.io/examples/service/access/frontend-deployment.yaml
kubectl apply -f https://k8s.io/examples/service/access/frontend-service.yaml

----------------------------------------

TITLE: Running a Command in a Shell within Kubernetes Pod
DESCRIPTION: This YAML configuration shows how to run a command in a shell within a Kubernetes pod, useful for executing complex commands or shell scripts.

LANGUAGE: yaml
CODE:
command: ["/bin/sh"]
args: ["-c", "while true; do echo hello; sleep 10;done"]

----------------------------------------

TITLE: Creating the Kubernetes Pod
DESCRIPTION: This kubectl command applies the Pod configuration, creating the Pod with the Init Container and application Container.

LANGUAGE: shell
CODE:
kubectl apply -f https://k8s.io/examples/pods/init-containers.yaml

----------------------------------------

TITLE: Defining a PersistentVolume in Kubernetes YAML
DESCRIPTION: Example YAML definition for a PersistentVolume resource in Kubernetes, specifying capacity, access modes, reclaim policy, and NFS-specific configuration.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv0003
spec:
  capacity:
    storage: 5Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Recycle
  storageClassName: slow
  mountOptions:
    - hard
    - nfsvers=4.1
  nfs:
    path: /tmp
    server: 172.17.0.2

----------------------------------------

TITLE: Creating a ServiceAccount Token Secret
DESCRIPTION: Example YAML configuration for creating a ServiceAccount token Secret. This declares a Secret of type kubernetes.io/service-account-token and specifies the associated ServiceAccount name.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Secret
metadata:
  name: secret-sa-sample
  annotations:
    kubernetes.io/service-account.name: "sa-name"
type: kubernetes.io/service-account-token
data:
  # You don't need to include any data here,
  # the contents will be populated by the controller manager
  extra: YmFyCg==

----------------------------------------

TITLE: Creating Secrets in Kubernetes using kubectl
DESCRIPTION: This command creates a secret with a specified type in Kubernetes. It supports creating docker-registry secrets for accessing container registries, generic secrets for opaque data, and tls secrets for TLS certificates and associated keys.

LANGUAGE: bash
CODE:
kubectl create secret (docker-registry | generic | tls)

----------------------------------------

TITLE: Defining a PersistentVolume in Kubernetes YAML
DESCRIPTION: Example YAML definition for a PersistentVolume resource in Kubernetes, specifying capacity, access modes, reclaim policy, and NFS-specific configuration.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv0003
spec:
  capacity:
    storage: 5Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Recycle
  storageClassName: slow
  mountOptions:
    - hard
    - nfsvers=4.1
  nfs:
    path: /tmp
    server: 172.17.0.2

----------------------------------------

TITLE: Creating Namespace with Baseline Pod Security Standard
DESCRIPTION: YAML configuration for creating a new namespace that enforces baseline pod security standards while auditing and warning against restricted policy violations. The configuration pins security policy versions to the current Kubernetes version.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Namespace
metadata:
  name: my-baseline-namespace
  labels:
    pod-security.kubernetes.io/enforce: baseline
    pod-security.kubernetes.io/enforce-version: v{{< skew currentVersion >}}
    pod-security.kubernetes.io/audit: restricted
    pod-security.kubernetes.io/audit-version: v{{< skew currentVersion >}}
    pod-security.kubernetes.io/warn: restricted
    pod-security.kubernetes.io/warn-version: v{{< skew currentVersion >}}

----------------------------------------

TITLE: Defining an Ingress with Wildcard Hosts
DESCRIPTION: An example of an Ingress resource that uses wildcard hostnames for routing.

LANGUAGE: yaml
CODE:
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress-wildcard-host
spec:
  rules:
  - host: "foo.bar.com"
    http:
      paths:
      - pathType: Prefix
        path: "/bar"
        backend:
          service:
            name: service1
            port:
              number: 80
  - host: "*.foo.com"
    http:
      paths:
      - pathType: Prefix
        path: "/foo"
        backend:
          service:
            name: service2
            port:
              number: 80

----------------------------------------

TITLE: Defining a PersistentVolume in Kubernetes YAML
DESCRIPTION: Example YAML definition for a PersistentVolume resource in Kubernetes, specifying capacity, access modes, reclaim policy, and NFS-specific configuration.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv0003
spec:
  capacity:
    storage: 5Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Recycle
  storageClassName: slow
  mountOptions:
    - hard
    - nfsvers=4.1
  nfs:
    path: /tmp
    server: 172.17.0.2

----------------------------------------

TITLE: Defining a Name-based Virtual Hosting Ingress
DESCRIPTION: An example of an Ingress that uses name-based virtual hosting to route traffic to different backend services.

LANGUAGE: yaml
CODE:
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: name-virtual-host-ingress
spec:
  rules:
  - host: foo.bar.com
    http:
      paths:
      - pathType: Prefix
        path: "/"
        backend:
          service:
            name: service1
            port:
              number: 80
  - host: bar.foo.com
    http:
      paths:
      - pathType: Prefix
        path: "/"
        backend:
          service:
            name: service2
            port:
              number: 80

----------------------------------------

TITLE: Configuring Projected Volume with Secrets and Non-Default Permissions in Kubernetes YAML
DESCRIPTION: Example YAML configuration for a Kubernetes Pod using a projected volume with secrets and non-default permission mode settings.

LANGUAGE: yaml
CODE:
{{% code_sample file="pods/storage/projected-secrets-nondefault-permission-mode.yaml" %}}

----------------------------------------

TITLE: Recursive Kubernetes Operations
DESCRIPTION: Demonstrates how to perform recursive operations on Kubernetes resources organized in subdirectories using the --recursive flag.

LANGUAGE: shell
CODE:
kubectl apply -f project/k8s/development --recursive

LANGUAGE: none
CODE:
configmap/my-config created
deployment.apps/my-deployment created
persistentvolumeclaim/my-pvc created

LANGUAGE: shell
CODE:
kubectl apply -f project/k8s/namespaces -f project/k8s/development --recursive

LANGUAGE: none
CODE:
namespace/development created
namespace/staging created
configmap/my-config created
deployment.apps/my-deployment created
persistentvolumeclaim/my-pvc created

----------------------------------------

TITLE: Creating a ClusterRole with kubectl in Kubernetes
DESCRIPTION: Commands to create various types of ClusterRoles using kubectl.

LANGUAGE: shell
CODE:
kubectl create clusterrole pod-reader --verb=get,list,watch --resource=pods

kubectl create clusterrole pod-reader --verb=get --resource=pods --resource-name=readablepod --resource-name=anotherpod

kubectl create clusterrole foo --verb=get,list,watch --resource=replicasets.apps

kubectl create clusterrole foo --verb=get,list,watch --resource=pods,pods/status

kubectl create clusterrole "foo" --verb=get --non-resource-url=/logs/*

kubectl create clusterrole monitoring --aggregation-rule="rbac.example.com/aggregate-to-monitoring=true"

----------------------------------------

TITLE: Accessing Service Environment Variables in Kubernetes Containers
DESCRIPTION: When Kubernetes starts a container, it provides environment variables for all running Services. This snippet shows the format of these variables using a Service named 'foo' as an example.

LANGUAGE: shell
CODE:
FOO_SERVICE_HOST=<the host the Service is running on>
FOO_SERVICE_PORT=<the port the Service is running on>

----------------------------------------

TITLE: Defining a Multi-Container Burstable QoS Pod in Kubernetes YAML
DESCRIPTION: This YAML manifest defines a Pod with two Containers, where one has a memory request specified, resulting in a Burstable QoS class for the Pod.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: qos-demo-4
  namespace: qos-example
spec:
  containers:

  - name: qos-demo-4-ctr-1
    image: nginx
    resources:
      requests:
        memory: "200Mi"

  - name: qos-demo-4-ctr-2
    image: redis

----------------------------------------

TITLE: Create a Pod
DESCRIPTION: Create a new Pod in a specific namespace.

LANGUAGE: Go
CODE:
POST /api/v1/namespaces/{namespace}/pods

----------------------------------------

TITLE: Executing kubectl exec Command in Kubernetes
DESCRIPTION: The kubectl exec command allows running commands inside containers of Kubernetes pods. It supports various options for specifying containers, handling input/output, and targeting different resource types.

LANGUAGE: bash
CODE:
kubectl exec (POD | TYPE/NAME) [-c CONTAINER] [flags] -- COMMAND [args...]

----------------------------------------

TITLE: Defining a PersistentVolume in YAML
DESCRIPTION: Example YAML for defining a PersistentVolume resource

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: PersistentVolume
metadata:
  name: example-pv
spec:
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: slow
  nfs:
    server: nfs-server.default.svc.cluster.local
    path: "/path"

----------------------------------------

TITLE: Defining a Kubernetes Pod with Init Container
DESCRIPTION: This YAML configuration defines a Pod with an Init Container and an application Container. The Init Container downloads a web page and stores it in a shared Volume, which is then served by the nginx application Container.

LANGUAGE: yaml
CODE:
{{% code_sample file="pods/init-containers.yaml" %}}

----------------------------------------

TITLE: Sidecar Logging Configuration
DESCRIPTION: YAML configuration for a Pod with two sidecar containers for handling different log streams.

LANGUAGE: yaml
CODE:
{{% code_sample file="admin/logging/two-files-counter-pod-streaming-sidecar.yaml" %}}

----------------------------------------

TITLE: Sidecar Logging Configuration
DESCRIPTION: YAML configuration for a Pod with two sidecar containers for handling different log streams.

LANGUAGE: yaml
CODE:
{{% code_sample file="admin/logging/two-files-counter-pod-streaming-sidecar.yaml" %}}

----------------------------------------

TITLE: Applying Pod Configuration in Kubernetes
DESCRIPTION: This command applies the pod configuration, creating a pod that will be scheduled on a node matching the specified node selector.

LANGUAGE: shell
CODE:
kubectl apply -f https://k8s.io/examples/pods/pod-nginx.yaml

----------------------------------------

TITLE: Watching Pod Creation for a StatefulSet in Kubernetes
DESCRIPTION: This command watches the creation of Pods for the StatefulSet with the label app=nginx.

LANGUAGE: shell
CODE:
kubectl get pods -w -l app=nginx

----------------------------------------

TITLE: Applying NetworkPolicy in Kubernetes
DESCRIPTION: This command applies the NetworkPolicy defined in the nginx-policy.yaml file to the Kubernetes cluster.

LANGUAGE: console
CODE:
kubectl apply -f https://k8s.io/examples/service/networking/nginx-policy.yaml

----------------------------------------

TITLE: Defining CredentialProviderRequest Struct in Go
DESCRIPTION: Defines the structure for a CredentialProviderRequest, which includes the image that requires authentication. This struct is used by the kubelet to pass requests to plugins via stdin.

LANGUAGE: go
CODE:
type CredentialProviderRequest struct {
    metav1.TypeMeta `json:",inline"`
    Image string `json:"image"`
}

----------------------------------------

TITLE: Basic kubectl Syntax
DESCRIPTION: Shows the basic syntax for running kubectl commands from the terminal

LANGUAGE: shell
CODE:
kubectl [command] [TYPE] [NAME] [flags]

----------------------------------------

TITLE: Creating a CertificateSigningRequest in Kubernetes
DESCRIPTION: This snippet demonstrates how to create a CertificateSigningRequest object in Kubernetes using kubectl. It includes the base64-encoded CSR and specifies the desired key usages.

LANGUAGE: bash
CODE:
cat <<EOF | kubectl apply -f -
apiVersion: certificates.k8s.io/v1
kind: CertificateSigningRequest
metadata:
  name: my-svc.my-namespace
spec:
  request: $(cat server.csr | base64 | tr -d '\n')
  signerName: example.com/serving
  usages:
  - digital signature
  - key encipherment
  - server auth
EOF

----------------------------------------

TITLE: Defining Ephemeral Storage Requests and Limits
DESCRIPTION: This YAML example shows how to define ephemeral storage requests and limits for containers in a Pod, along with an emptyDir volume with a size limit.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: frontend
spec:
  containers:
  - name: app
    image: images.my-company.example/app:v4
    resources:
      requests:
        ephemeral-storage: "2Gi"
      limits:
        ephemeral-storage: "4Gi"
    volumeMounts:
    - name: ephemeral
      mountPath: "/tmp"
  - name: log-aggregator
    image: images.my-company.example/log-aggregator:v6
    resources:
      requests:
        ephemeral-storage: "2Gi"
      limits:
        ephemeral-storage: "4Gi"
    volumeMounts:
    - name: ephemeral
      mountPath: "/tmp"
  volumes:
    - name: ephemeral
      emptyDir:
        sizeLimit: 500Mi

----------------------------------------

TITLE: Creating a RoleBinding in Kubernetes RBAC
DESCRIPTION: YAML definition for a RoleBinding that grants the 'pod-reader' Role to user 'jane' in the default namespace.

LANGUAGE: yaml
CODE:
{{% code_sample file="access/simple-rolebinding-with-role.yaml" %}}

----------------------------------------

TITLE: Generating Kubeconfig for Kubernetes Controller Manager
DESCRIPTION: This command generates the kubeconfig file for the Kubernetes controller manager and saves it to the controller-manager.conf file. It supports various options for customizing the API server address, port, certificate directory, and other parameters.

LANGUAGE: bash
CODE:
kubeadm init phase kubeconfig controller-manager [flags]

----------------------------------------

TITLE: Checking DNS Pod Status
DESCRIPTION: Verifies the status of the dnsutils pod deployment

LANGUAGE: shell
CODE:
kubectl get pods dnsutils

----------------------------------------

TITLE: Creating Kubernetes Jobs with kubectl
DESCRIPTION: Examples showing how to create Kubernetes jobs using the kubectl create job command. Demonstrates basic job creation, adding commands, and creating from cronjobs.

LANGUAGE: bash
CODE:
kubectl create job NAME --image=image [--from=cronjob/name] -- [COMMAND] [args...]

LANGUAGE: bash
CODE:
# Create a job
kubectl create job my-job --image=busybox

# Create a job with a command
kubectl create job my-job --image=busybox -- date

# Create a job from a cron job named "a-cronjob"
kubectl create job test-job --from=cronjob/a-cronjob

----------------------------------------

TITLE: Installing kubectl with Homebrew on macOS
DESCRIPTION: Installs kubectl using the Homebrew package manager on macOS.

LANGUAGE: bash
CODE:
brew install kubectl

----------------------------------------

TITLE: Configuring APIService with Custom Port and CA Bundle
DESCRIPTION: Example YAML configuration showing how to configure an extension apiserver with a custom port and CA bundle for TLS verification.

LANGUAGE: yaml
CODE:
apiVersion: apiregistration.k8s.io/v1
kind: APIService
...
spec:
  ...
  service:
    namespace: my-service-namespace
    name: my-service-name
    port: 1234
  caBundle: "Ci0tLS0tQk...<base64-encoded PEM bundle>...tLS0K"
...

----------------------------------------

TITLE: Configuring JobSet for TPU Multislice Training with Jax
DESCRIPTION: Example JobSet configuration for running distributed ML training across 4 TPU v5e slices using Jax. Demonstrates exclusive topology usage, failure policies, and TPU-specific resource requirements.

LANGUAGE: yaml
CODE:
apiVersion: jobset.x-k8s.io/v1alpha2
kind: JobSet
metadata:
  name: multislice
  annotations:
    # Give each child Job exclusive usage of a TPU slice 
    alpha.jobset.sigs.k8s.io/exclusive-topology: cloud.google.com/gke-nodepool
spec:
  failurePolicy:
    maxRestarts: 3
  replicatedJobs:
  - name: workers
    replicas: 4 # Set to number of TPU slices
    template:
      spec:
        parallelism: 2 # Set to number of VMs per TPU slice
        completions: 2 # Set to number of VMs per TPU slice
        backoffLimit: 0
        template:
          spec:
            hostNetwork: true
            dnsPolicy: ClusterFirstWithHostNet
            nodeSelector:
              cloud.google.com/gke-tpu-accelerator: tpu-v5-lite-podslice
              cloud.google.com/gke-tpu-topology: 2x4
            containers:
            - name: jax-tpu
              image: python:3.8
              ports:
              - containerPort: 8471
              - containerPort: 8080
              securityContext:
                privileged: true
              command:
              - bash
              - -c
              - |
                pip install "jax[tpu]" -f https://storage.googleapis.com/jax-releases/libtpu_releases.html
                python -c 'import jax; print("Global device count:", jax.device_count())'
                sleep 60
              resources:
                limits:
                  google.com/tpu: 4

----------------------------------------

TITLE: Defining a Problematic LimitRange in Kubernetes YAML
DESCRIPTION: This YAML snippet defines a LimitRange that sets default and maximum CPU limits for containers in a namespace. It demonstrates a potential issue where the default limit is less than a typical request.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: LimitRange
metadata:
  name: cpu-limit-range
spec:
  limits:
  - default:
      cpu: 500m
    defaultRequest:
      cpu: 500m
    max:
      cpu: 1
    type: Container

----------------------------------------

TITLE: Deploying MySQL Deployment and Service in Kubernetes
DESCRIPTION: This YAML configuration creates a Deployment for MySQL and a corresponding Service. It specifies the MySQL image, environment variables, and volume mounts for persistent storage.

LANGUAGE: yaml
CODE:
{{% code_sample file="application/mysql/mysql-deployment.yaml" %}}

----------------------------------------

TITLE: Creating a RoleBinding in Kubernetes RBAC
DESCRIPTION: YAML definition for a RoleBinding that grants the 'pod-reader' Role to user 'jane' in the default namespace.

LANGUAGE: yaml
CODE:
{{% code_sample file="access/simple-rolebinding-with-role.yaml" %}}

----------------------------------------

TITLE: Accessing API via kubectl Proxy
DESCRIPTION: This curl command demonstrates how to access the Kubernetes API through the kubectl proxy running on localhost:8080.

LANGUAGE: shell
CODE:
curl http://localhost:8080/api/

----------------------------------------

TITLE: Pod Configuration with Extended Resource Requests
DESCRIPTION: YAML configuration for a Pod requesting extended resources (3 dongles) through the example.com/dongle resource type.

LANGUAGE: yaml
CODE:
{{% code_sample file="pods/resource/extended-resource-pod.yaml" %}}

----------------------------------------

TITLE: Creating a ServiceAccount with Restricted Secret Access in YAML
DESCRIPTION: This YAML snippet demonstrates how to create a ServiceAccount with the 'kubernetes.io/enforce-mountable-secrets' annotation set to 'true', which restricts the mounting of secrets to specified resource types.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    kubernetes.io/enforce-mountable-secrets: "true"
  name: my-serviceaccount
  namespace: my-namespace

----------------------------------------

TITLE: Configuring OpenID Connect Authentication
DESCRIPTION: Example kubeconfig file for configuring OpenID Connect authentication with the API server

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Config
users:
- name: mmosley
  user:
    auth-provider:
      config:
        client-id: kubernetes
        client-secret: 1db158f6-177d-4d9c-8a8b-d36869918ec5
        id-token: eyJraWQiOiJDTj1vaWRjaWRwLnRyZW1vbG8ubGFuLCBPVT1EZW1vLCBPPVRybWVvbG8gU2VjdXJpdHksIEw9QXJsaW5ndG9uLCBTVD1WaXJnaW5pYSwgQz1VUy1DTj1rdWJlLWNhLTEyMDIxNDc5MjEwMzYwNzMyMTUyIiwiYWxnIjoiUlMyNTYifQ.eyJpc3MiOiJodHRwczovL29pZGNpZHAudHJlbW9sby5sYW46ODQ0My9hdXRoL2lkcC9PaWRjSWRQIiwiYXVkIjoia3ViZXJuZXRlcyIsImV4cCI6MTQ4MzU0OTUxMSwianRpIjoiMm96US15TXdFcHV4WDlHZUhQdy1hZyIsImlhdCI6MTQ4MzU0OTQ1MSwibmJmIjoxNDgzNTQ5MzMxLCJzdWIiOiI0YWViMzdiYS1iNjQ1LTQ4ZmQtYWIzMC0xYTAxZWU0MWUyMTgifQ.w6p4J_6qQ1HzTG9nrEOrubxIMb9K5hzcMPxc9IxPx2K4xO9l-oFiUw93daH3m5pluP6K7eOE6txBuRVfEcpJSwlelsOsW8gb8VJcnzMS9EnZpeA0tW_p-mnkFc3VcfyXuhe5R3G7aa5d8uHv70yJ9Y3-UhjiN9EhpMdfPAoEB9fYKKkJRzF7utTTIPGrSaSU6d2pcpfYKaxIwePzEkT4DfcQthoZdy9ucNvvLoi1DIC-UocFD8HLs8LYKEqSxQvOcvnThbObJ9af71EwmuE21fO5KzMW20KtAeget1gnldOosPtz1G5EwvaQ401-RPQzPGMVBld0_zMCAwZttJ4knw
        idp-certificate-authority: /root/ca.pem
        idp-issuer-url: https://oidcidp.tremolo.lan:8443/auth/idp/OidcIdP
        refresh-token: q1bKLFOyUiosTfawzA93TzZIDzH2TNa2SMm0zEiPKTUwME6BkEo6Sql5yUWVBSWpKUGphaWpxSVAfekBOZbBhaEW+VlFUeVRGcluyVF5JT4+haZmPsluFoFu5XkpXk5BXqHega4GAXlF+ma+vmYpFcHe5eZR+slBFpZKtQA=
      name: oidc

----------------------------------------

TITLE: Creating a Pod with downwardAPI Volume for Pod Fields
DESCRIPTION: This YAML manifest defines a Pod that uses a downwardAPI volume to expose Pod labels and annotations as files to the container.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: kubernetes-downwardapi-volume-example
  labels:
    zone: us-est-coast
    cluster: test-cluster1
    rack: rack-22
  annotations:
    build: two
    builder: john-doe
spec:
  containers:
    - name: client-container
      image: k8s.gcr.io/busybox
      command: ["sh", "-c"]
      args:
      - while true; do
          if [[ -e /etc/podinfo/labels ]]; then
            echo -en '\n\n'; cat /etc/podinfo/labels; fi;
          if [[ -e /etc/podinfo/annotations ]]; then
            echo -en '\n\n'; cat /etc/podinfo/annotations; fi;
          sleep 5;
        done;
      volumeMounts:
        - name: podinfo
          mountPath: /etc/podinfo
  volumes:
    - name: podinfo
      downwardAPI:
        items:
          - path: "labels"
            fieldRef:
              fieldPath: metadata.labels
          - path: "annotations"
            fieldRef:
              fieldPath: metadata.annotations

----------------------------------------

TITLE: Defining an EndpointSlice in Kubernetes YAML
DESCRIPTION: This snippet demonstrates the structure of an EndpointSlice object for a Kubernetes Service named 'example'. It includes metadata, address type, ports, and endpoint details.

LANGUAGE: yaml
CODE:
apiVersion: discovery.k8s.io/v1
kind: EndpointSlice
metadata:
  name: example-abc
  labels:
    kubernetes.io/service-name: example
addressType: IPv4
ports:
  - name: http
    protocol: TCP
    port: 80
endpoints:
  - addresses:
      - "10.1.2.3"
    conditions:
      ready: true
    hostname: pod-1
    nodeName: node-1
    zone: us-west2-a

----------------------------------------

TITLE: Filtering Pods Using kubectl with Label Selectors
DESCRIPTION: These shell commands demonstrate how to use kubectl with label selectors to filter and list pods.

LANGUAGE: shell
CODE:
kubectl get pods -l environment=production,tier=frontend

LANGUAGE: shell
CODE:
kubectl get pods -l 'environment in (production),tier in (frontend)'

LANGUAGE: shell
CODE:
kubectl get pods -l 'environment in (production, qa)'

LANGUAGE: shell
CODE:
kubectl get pods -l 'environment,environment notin (frontend)'

----------------------------------------

TITLE: Creating a ConfigMap from Files
DESCRIPTION: Create a ConfigMap using individual files specified with --from-file.

LANGUAGE: shell
CODE:
kubectl create configmap game-config-2 --from-file=configure-pod-container/configmap/game.properties --from-file=configure-pod-container/configmap/ui.properties

----------------------------------------

TITLE: Defining a Deployment in YAML
DESCRIPTION: Example YAML definition for a Kubernetes Deployment resource.

LANGUAGE: yaml
CODE:
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-deployment
spec:
  replicas: 3
  selector:
    matchLabels:
      app: example
  template:
    metadata:
      labels:
        app: example
    spec:
      containers:
      - name: example-container
        image: example-image:latest

----------------------------------------

TITLE: Generating Kubeconfig for Additional Users
DESCRIPTION: These shell commands show how to generate kubeconfig files for additional users using kubeadm.

LANGUAGE: shell
CODE:
kubeadm kubeconfig user --config example.yaml --org appdevs --client-name johndoe --validity-period 24h

LANGUAGE: shell
CODE:
kubeadm kubeconfig user --config example.yaml --client-name admin --validity-period 168h

----------------------------------------

TITLE: Bypassing PodSecurityPolicy in a Namespace
DESCRIPTION: These commands create and apply a privileged PodSecurityPolicy to effectively bypass PSP restrictions in a specific namespace.

LANGUAGE: sh
CODE:
# The following cluster-scoped commands are only needed once.
kubectl apply -f privileged-psp.yaml
kubectl create clusterrole privileged-psp --verb use --resource podsecuritypolicies.policy --resource-name privileged

# Per-namespace disable
kubectl create -n $NAMESPACE rolebinding disable-psp --clusterrole privileged-psp --group system:serviceaccounts:$NAMESPACE

----------------------------------------

TITLE: Defining a TLS Ingress
DESCRIPTION: An example of an Ingress with TLS configuration for secure communication.

LANGUAGE: yaml
CODE:
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: tls-example-ingress
spec:
  tls:
  - hosts:
      - https-example.foo.com
    secretName: testsecret-tls
  rules:
  - host: https-example.foo.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: service1
            port:
              number: 80

----------------------------------------

TITLE: Creating a Namespace in Kubernetes
DESCRIPTION: This command creates a new namespace called 'qos-example' to isolate resources for this exercise.

LANGUAGE: shell
CODE:
kubectl create namespace qos-example

----------------------------------------

TITLE: Examining Pod Details
DESCRIPTION: Shows how to retrieve detailed information about a Pod using kubectl describe command

LANGUAGE: shell
CODE:
kubectl describe pod nginx-deployment-67d4bdd6f5-w6kd7

----------------------------------------

TITLE: Querying Pod Metrics Using curl
DESCRIPTION: Alternative method to retrieve pod metrics using direct HTTP request with curl.

LANGUAGE: shell
CODE:
curl http://localhost:8080/apis/metrics.k8s.io/v1beta1/namespaces/kube-system/pods/kube-scheduler-minikube

----------------------------------------

TITLE: Setting Default Namespace Context
DESCRIPTION: Commands to permanently set and validate the default namespace for the current kubectl context.

LANGUAGE: shell
CODE:
kubectl config set-context --current --namespace=<insert-namespace-name-here>
# Validate it
kubectl config view --minify | grep namespace:

----------------------------------------

TITLE: Fetching Pod ServiceAccount Details
DESCRIPTION: Command to retrieve pod details including ServiceAccount information

LANGUAGE: shell
CODE:
kubectl get pods/<podname> -o yaml

----------------------------------------

TITLE: Container Resource Fields in Environment Variables
DESCRIPTION: Kubernetes Pod manifest showing how to expose container-specific resource fields as environment variables. This example accesses CPU and memory requests/limits from the container specification.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: dapi-envars-resourcefieldref
spec:
  containers:
    - name: test-container
      image: registry.k8s.io/busybox
      command: [ "sh", "-c" ]
      args:
      - while true; do
          echo -en '\n';
          printenv MY_CPU_REQUEST MY_CPU_LIMIT MY_MEM_REQUEST MY_MEM_LIMIT;
          sleep 10;
        done;
      resources:
        requests:
          memory: "32Mi"
          cpu: "1"
        limits:
          memory: "64Mi"
          cpu: "1"
      env:
        - name: MY_CPU_REQUEST
          valueFrom:
            resourceFieldRef:
              containerName: test-container
              resource: requests.cpu
        - name: MY_CPU_LIMIT
          valueFrom:
            resourceFieldRef:
              containerName: test-container
              resource: limits.cpu
        - name: MY_MEM_REQUEST
          valueFrom:
            resourceFieldRef:
              containerName: test-container
              resource: requests.memory
        - name: MY_MEM_LIMIT
          valueFrom:
            resourceFieldRef:
              containerName: test-container
              resource: limits.memory
  restartPolicy: Never

----------------------------------------

TITLE: Quantity Addition with CEL
DESCRIPTION: CEL expression using the quantity library to add two quantities.

LANGUAGE: CEL
CODE:
quantity("50k").add(quantity("20k"))

----------------------------------------

TITLE: Fetching Pod ServiceAccount Details
DESCRIPTION: Command to retrieve pod details including ServiceAccount information

LANGUAGE: shell
CODE:
kubectl get pods/<podname> -o yaml

----------------------------------------

TITLE: Defining Container Resource Requests and Limits
DESCRIPTION: This YAML snippet shows how to define CPU and memory requests and limits for containers in a Pod specification.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: frontend
spec:
  containers:
  - name: app
    image: images.my-company.example/app:v4
    resources:
      requests:
        memory: "64Mi"
        cpu: "250m"
      limits:
        memory: "128Mi"
        cpu: "500m"
  - name: log-aggregator
    image: images.my-company.example/log-aggregator:v6
    resources:
      requests:
        memory: "64Mi"
        cpu: "250m"
      limits:
        memory: "128Mi"
        cpu: "500m"

----------------------------------------

TITLE: Configuring a Pod with a LAMP stack using subPath
DESCRIPTION: This example shows how to configure a Pod with a LAMP (Linux Apache MySQL PHP) stack using a single shared volume. The PHP application's code and assets are mapped to the volume's html folder, while the MySQL database is stored in the mysql folder.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: my-lamp-site
spec:
    containers:
    - name: mysql
      image: mysql
      env:
      - name: MYSQL_ROOT_PASSWORD
        value: "rootpasswd"
      volumeMounts:
      - mountPath: /var/lib/mysql
        name: site-data
        subPath: mysql
    - name: php
      image: php:7.0-apache
      volumeMounts:
      - mountPath: /var/www/html
        name: site-data
        subPath: html
    volumes:
    - name: site-data
      persistentVolumeClaim:
        claimName: my-lamp-site-data

----------------------------------------

TITLE: Draining a Kubernetes Node
DESCRIPTION: This snippet shows how to prepare a node for maintenance by marking it unschedulable and evicting workloads. It uses kubectl to drain the specified node, ignoring DaemonSets.

LANGUAGE: shell
CODE:
kubectl drain <node-to-drain> --ignore-daemonsets

----------------------------------------

TITLE: Complete Kubelet Configuration Example
DESCRIPTION: Comprehensive JSON output showing all kubelet configuration parameters including authentication, authorization, and resource management settings.

LANGUAGE: json
CODE:
{
  "kubeletconfig": {
    "enableServer": true,
    "staticPodPath": "/var/run/kubernetes/static-pods",
    "syncFrequency": "1m0s",
    "fileCheckFrequency": "20s",
    "httpCheckFrequency": "20s",
    "address": "192.168.1.16",
    "port": 10250,
    "readOnlyPort": 10255,
    "tlsCertFile": "/var/lib/kubelet/pki/kubelet.crt",
    "tlsPrivateKeyFile": "/var/lib/kubelet/pki/kubelet.key",
    "rotateCertificates": true,
    "authentication": {
      "x509": {
        "clientCAFile": "/var/run/kubernetes/client-ca.crt"
      },
      "webhook": {
        "enabled": true,
        "cacheTTL": "2m0s"
      },
      "anonymous": {
        "enabled": true
      }
    },
    "authorization": {
      "mode": "AlwaysAllow",
      "webhook": {
        "cacheAuthorizedTTL": "5m0s",
        "cacheUnauthorizedTTL": "30s"
      }
    }
  }
}

----------------------------------------

TITLE: Viewing Kubernetes Services and Pods
DESCRIPTION: This command retrieves and displays information about the services and pods in the current namespace.

LANGUAGE: console
CODE:
kubectl get svc,pod

----------------------------------------

TITLE: LimitRange Configuration Example
DESCRIPTION: YAML configuration showing CPU constraints with minimum 200m and maximum 800m CPU limits

LANGUAGE: yaml
CODE:
limits:
- default:
    cpu: 800m
  defaultRequest:
    cpu: 800m
  max:
    cpu: 800m
  min:
    cpu: 200m
  type: Container

----------------------------------------

TITLE: Generating Kubernetes CA Certificates using kubeadm
DESCRIPTION: Command to generate self-signed Kubernetes CA certificates and save them as ca.crt and ca.key files. The command supports various options including custom certificate directory, configuration file path, and Kubernetes version selection.

LANGUAGE: bash
CODE:
kubeadm init phase certs ca [flags]

----------------------------------------

TITLE: Defining a Default IngressClass
DESCRIPTION: An example of marking an IngressClass as the default for the cluster.

LANGUAGE: yaml
CODE:
apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  labels:
    app.kubernetes.io/component: controller
  name: nginx-example
  annotations:
    ingressclass.kubernetes.io/is-default-class: "true"
spec:
  controller: k8s.io/ingress-nginx

----------------------------------------

TITLE: Running kubectl explain Command
DESCRIPTION: The basic syntax for running the kubectl explain command to describe Kubernetes resources and their fields.

LANGUAGE: bash
CODE:
kubectl explain TYPE [--recursive=FALSE|TRUE] [--api-version=api-version-group] [-o|--output=plaintext|plaintext-openapiv2]

----------------------------------------

TITLE: Viewing kubectl Configuration
DESCRIPTION: This command displays the location and credentials that kubectl is configured to use for accessing the cluster.

LANGUAGE: shell
CODE:
kubectl config view

----------------------------------------

TITLE: Configuring Nginx for Frontend Proxy
DESCRIPTION: Nginx configuration file for the frontend service to proxy requests to the backend 'hello' service.

LANGUAGE: nginx
CODE:
{{% code_sample file="service/access/frontend-nginx.conf" %}}

----------------------------------------

TITLE: Creating Dynamic VolumeSnapshot in Kubernetes
DESCRIPTION: YAML configuration for creating a dynamic volume snapshot from a PersistentVolumeClaim using a specified VolumeSnapshotClass.

LANGUAGE: yaml
CODE:
apiVersion: snapshot.storage.k8s.io/v1
kind: VolumeSnapshot
metadata:
  name: new-snapshot-test
spec:
  volumeSnapshotClassName: csi-hostpath-snapclass
  source:
    persistentVolumeClaimName: pvc-test

----------------------------------------

TITLE: Defining YAML Frontmatter for Kubernetes Documentation
DESCRIPTION: This YAML snippet defines metadata for a Kubernetes documentation page, including reviewers, title, content type, and weight.

LANGUAGE: yaml
CODE:
---
reviewers:
- jayunit100
- jsturtevant
- marosset
- perithompson
title:    Security For Windows Nodes
content_type: concept
weight: 40
---

----------------------------------------

TITLE: Defining Liveness Probe Using Exec Command
DESCRIPTION: YAML configuration for a Pod with liveness probe that executes a command to check container health. The probe checks for a file's existence every 5 seconds after an initial 5 second delay.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: liveness-exec
spec:
  containers:
  - name: liveness
    image: registry.k8s.io/busybox:1.27.2
    args:
    - /bin/sh
    - -c
    - touch /tmp/healthy; sleep 30; rm -f /tmp/healthy; sleep 600
    livenessProbe:
      exec:
        command:
        - cat
        - /tmp/healthy
      initialDelaySeconds: 5
      periodSeconds: 5

----------------------------------------

TITLE: Running Parallel RBAC and ABAC Authorizers in Kubernetes
DESCRIPTION: Command to run both RBAC and ABAC authorizers in the Kubernetes API server.

LANGUAGE: shell
CODE:
--authorization-mode=...,RBAC,ABAC --authorization-policy-file=mypolicy.json

----------------------------------------

TITLE: Defining a Default IngressClass
DESCRIPTION: An example of marking an IngressClass as the default for the cluster.

LANGUAGE: yaml
CODE:
apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  labels:
    app.kubernetes.io/component: controller
  name: nginx-example
  annotations:
    ingressclass.kubernetes.io/is-default-class: "true"
spec:
  controller: k8s.io/ingress-nginx

----------------------------------------

TITLE: Creating a Simple Pod in Kubernetes YAML
DESCRIPTION: This YAML snippet defines a simple Pod running an nginx container. It demonstrates the basic structure of a Pod definition in Kubernetes.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: nginx
spec:
  containers:
  - name: nginx
    image: nginx:1.14.2
    ports:
    - containerPort: 80

----------------------------------------

TITLE: Viewing Kubernetes Cluster Information with kubectl
DESCRIPTION: This snippet shows how to view information about the Kubernetes cluster using kubectl.

LANGUAGE: shell
CODE:
kubectl cluster-info

----------------------------------------

TITLE: Configuring kubelet cgroup driver in kubeadm YAML
DESCRIPTION: This YAML configuration explicitly sets the cgroup driver for kubelet to 'systemd' in a kubeadm cluster configuration file. It includes both ClusterConfiguration and KubeletConfiguration kinds.

LANGUAGE: yaml
CODE:
# kubeadm-config.yaml
kind: ClusterConfiguration
apiVersion: kubeadm.k8s.io/v1beta4
kubernetesVersion: v1.21.0
---
kind: KubeletConfiguration
apiVersion: kubelet.config.k8s.io/v1beta1
cgroupDriver: systemd

----------------------------------------

TITLE: Creating a Simple Pod in Kubernetes YAML
DESCRIPTION: This YAML snippet defines a simple Pod running an nginx container. It demonstrates the basic structure of a Pod definition in Kubernetes.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: nginx
spec:
  containers:
  - name: nginx
    image: nginx:1.14.2
    ports:
    - containerPort: 80

----------------------------------------

TITLE: Example Kubernetes Encryption Configuration
DESCRIPTION: Sample YAML configuration for encrypting API data at rest, showing different resource and provider options.

LANGUAGE: yaml
CODE:
apiVersion: apiserver.config.k8s.io/v1
kind: EncryptionConfiguration
resources:
  - resources:
      - secrets
      - configmaps
      - pandas.awesome.bears.example # a custom resource API
    providers:
      - identity: {} # plain text, in other words NO encryption
      - aesgcm:
          keys:
            - name: key1
              secret: c2VjcmV0IGlzIHNlY3VyZQ==
            - name: key2
              secret: dGhpcyBpcyBwYXNzd29yZA==
      - aescbc:
          keys:
            - name: key1
              secret: c2VjcmV0IGlzIHNlY3VyZQ==
            - name: key2
              secret: dGhpcyBpcyBwYXNzd29yZA==
      - secretbox:
          keys:
            - name: key1
              secret: YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY=
  - resources:
      - events
    providers:
      - identity: {} # do not encrypt Events even though *.* is specified below
  - resources:
      - '*.apps' # wildcard match requires Kubernetes 1.27 or later
    providers:
      - aescbc:
          keys:
          - name: key2
            secret: c2VjcmV0IGlzIHNlY3VyZSwgb3IgaXMgaXQ/Cg==
  - resources:
      - '*.*' # wildcard match requires Kubernetes 1.27 or later
    providers:
      - aescbc:
          keys:
          - name: key3
            secret: c2VjcmV0IGlzIHNlY3VyZSwgSSB0aGluaw==

----------------------------------------

TITLE: Example Kubernetes Encryption Configuration
DESCRIPTION: Sample YAML configuration for encrypting API data at rest, showing different resource and provider options.

LANGUAGE: yaml
CODE:
apiVersion: apiserver.config.k8s.io/v1
kind: EncryptionConfiguration
resources:
  - resources:
      - secrets
      - configmaps
      - pandas.awesome.bears.example # a custom resource API
    providers:
      - identity: {} # plain text, in other words NO encryption
      - aesgcm:
          keys:
            - name: key1
              secret: c2VjcmV0IGlzIHNlY3VyZQ==
            - name: key2
              secret: dGhpcyBpcyBwYXNzd29yZA==
      - aescbc:
          keys:
            - name: key1
              secret: c2VjcmV0IGlzIHNlY3VyZQ==
            - name: key2
              secret: dGhpcyBpcyBwYXNzd29yZA==
      - secretbox:
          keys:
            - name: key1
              secret: YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY=
  - resources:
      - events
    providers:
      - identity: {} # do not encrypt Events even though *.* is specified below
  - resources:
      - '*.apps' # wildcard match requires Kubernetes 1.27 or later
    providers:
      - aescbc:
          keys:
          - name: key2
            secret: c2VjcmV0IGlzIHNlY3VyZSwgb3IgaXMgaXQ/Cg==
  - resources:
      - '*.*' # wildcard match requires Kubernetes 1.27 or later
    providers:
      - aescbc:
          keys:
          - name: key3
            secret: c2VjcmV0IGlzIHNlY3VyZSwgSSB0aGluaw==

----------------------------------------

TITLE: SelfSubjectAccessReview API Version and Kind
DESCRIPTION: Specifies the API version and kind for SelfSubjectAccessReview resources.

LANGUAGE: yaml
CODE:
apiVersion: authorization.k8s.io/v1
kind: SelfSubjectAccessReview

----------------------------------------

TITLE: Creating Basic ConfigMap with Multiple Data Types
DESCRIPTION: Example showing how to create a ConfigMap with both property-like keys and file-like multi-line values for game configuration.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: ConfigMap
metadata:
  name: game-demo
data:
  # property-like keys; each key maps to a simple value
  player_initial_lives: "3"
  ui_properties_file_name: "user-interface.properties"

  # file-like keys
  game.properties: |
    enemy.types=aliens,monsters
    player.maximum-lives=5
  user-interface.properties: |
    color.good=purple
    color.bad=yellow
    allow.textmode=true

----------------------------------------

TITLE: Stopping and Removing Containers with Docker
DESCRIPTION: This snippet demonstrates how to stop and remove a running container using the Docker CLI.

LANGUAGE: shell
CODE:
docker ps

LANGUAGE: shell
CODE:
docker stop a9ec34d98787

LANGUAGE: shell
CODE:
docker rm a9ec34d98787

----------------------------------------

TITLE: Deploying PHP Apache Server in Kubernetes
DESCRIPTION: YAML manifest to create a Deployment and Service for a PHP Apache server. This sets up the base workload that will be autoscaled.

LANGUAGE: YAML
CODE:
apiVersion: apps/v1
kind: Deployment
metadata:
  name: php-apache
spec:
  selector:
    matchLabels:
      run: php-apache
  template:
    metadata:
      labels:
        run: php-apache
    spec:
      containers:
      - name: php-apache
        image: registry.k8s.io/hpa-example
        ports:
        - containerPort: 80
        resources:
          limits:
            cpu: 500m
          requests:
            cpu: 200m
---
apiVersion: v1
kind: Service
metadata:
  name: php-apache
  labels:
    run: php-apache
spec:
  ports:
  - port: 80
  selector:
    run: php-apache

----------------------------------------

TITLE: Deleting DNS Autoscaler Deployment in Kubernetes
DESCRIPTION: This command deletes the kube-dns-autoscaler deployment, which is another method to disable DNS autoscaling.

LANGUAGE: shell
CODE:
kubectl delete deployment kube-dns-autoscaler --namespace=kube-system

----------------------------------------

TITLE: Defining Pod with Init Containers in YAML
DESCRIPTION: YAML configuration for a Pod with two init containers waiting for services before starting the main container.

LANGUAGE: YAML
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: myapp-pod
  labels:
    app.kubernetes.io/name: MyApp
spec:
  containers:
  - name: myapp-container
    image: busybox:1.28
    command: ['sh', '-c', 'echo The app is running! && sleep 3600']
  initContainers:
  - name: init-myservice
    image: busybox:1.28
    command: ['sh', '-c', "until nslookup myservice.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for myservice; sleep 2; done"]
  - name: init-mydb
    image: busybox:1.28
    command: ['sh', '-c', "until nslookup mydb.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for mydb; sleep 2; done"]

----------------------------------------

TITLE: Finding Network Interface IP in Linux
DESCRIPTION: Command to identify the usable IP on network interfaces associated with default gateway on a Linux host.

LANGUAGE: shell
CODE:
ip route show # Look for a line starting with "default via"

----------------------------------------

TITLE: Creating a PersistentVolumeClaim from a Volume Snapshot in Kubernetes YAML
DESCRIPTION: Example YAML definition for a PersistentVolumeClaim that is created from a VolumeSnapshot, demonstrating volume restoration.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: restore-pvc
spec:
  storageClassName: csi-hostpath-sc
  dataSource:
    name: new-snapshot-test
    kind: VolumeSnapshot
    apiGroup: snapshot.storage.k8s.io
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

----------------------------------------

TITLE: Enabling Feature Gates in Kubernetes Components
DESCRIPTION: Example showing how to enable a feature gate (GracefulNodeShutdown) using command line flags in Kubernetes components. Feature gates are specified as key=value pairs.

LANGUAGE: shell
CODE:
--feature-gates=...,GracefulNodeShutdown=true

----------------------------------------

TITLE: Logging into Docker Hub using Docker CLI
DESCRIPTION: This snippet shows how to log into Docker Hub using the docker login command. It authenticates the user and stores credentials in the local config.json file.

LANGUAGE: shell
CODE:
docker login

----------------------------------------

TITLE: Setting Up gRPC Health Check Probe
DESCRIPTION: Configuration for gRPC-based health checking probe that implements the gRPC Health Checking Protocol.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: etcd-with-grpc
spec:
  containers:
  - name: etcd
    image: registry.k8s.io/etcd:3.5.1-0
    command: [ "/usr/local/bin/etcd", "--data-dir", "/var/lib/etcd" ]
    ports:
    - containerPort: 2379
    livenessProbe:
      grpc:
        port: 2379
      initialDelaySeconds: 10

----------------------------------------

TITLE: Creating a PersistentVolumeClaim from a Volume Snapshot in Kubernetes YAML
DESCRIPTION: Example YAML definition for a PersistentVolumeClaim that is created from a VolumeSnapshot, demonstrating volume restoration.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: restore-pvc
spec:
  storageClassName: csi-hostpath-sc
  dataSource:
    name: new-snapshot-test
    kind: VolumeSnapshot
    apiGroup: snapshot.storage.k8s.io
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

----------------------------------------

TITLE: Multi-Port Egress Policy
DESCRIPTION: NetworkPolicy example demonstrating port range targeting using endPort field

LANGUAGE: yaml
CODE:
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: multi-port-egress
  namespace: default
spec:
  podSelector:
    matchLabels:
      role: db
  policyTypes:
  - Egress
  egress:
  - to:
    - ipBlock:
        cidr: 10.0.0.0/24
    ports:
    - protocol: TCP
      port: 32000
      endPort: 32768

----------------------------------------

TITLE: Creating and Viewing ResourceQuota
DESCRIPTION: Creates a ResourceQuota and displays its details using kubectl commands

LANGUAGE: shell
CODE:
kubectl apply -f https://k8s.io/examples/admin/resource/quota-objects.yaml --namespace=quota-object-example

LANGUAGE: shell
CODE:
kubectl get resourcequota object-quota-demo --namespace=quota-object-example --output=yaml

----------------------------------------

TITLE: Using kubectl set Command
DESCRIPTION: The basic syntax for the kubectl set command used to configure application resources. This command requires a specific subcommand to perform actual operations.

LANGUAGE: bash
CODE:
kubectl set SUBCOMMAND

----------------------------------------

TITLE: Generating and Signing Server Certificate with OpenSSL for Kubernetes
DESCRIPTION: These commands generate a server key, create a certificate signing request, and then sign the certificate using the CA key and certificate.

LANGUAGE: shell
CODE:
openssl genrsa -out server.key 2048
openssl req -new -key server.key -out server.csr -config csr.conf
openssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key \
    -CAcreateserial -out server.crt -days 10000 \
    -extensions v3_ext -extfile csr.conf -sha256

----------------------------------------

TITLE: Setting Up etcd with kubeadm
DESCRIPTION: This command creates a local etcd instance based on a static Pod file as part of the Kubernetes cluster setup.

LANGUAGE: bash
CODE:
kubeadm init phase etcd local

----------------------------------------

TITLE: Configuring Kubernetes API Versions via Command Line
DESCRIPTION: This command line example shows how to disable all API versions except v1 using the '--runtime-config' argument passed to the kube-apiserver.

LANGUAGE: bash
CODE:
--runtime-config=api/all=false,api/v1=true

----------------------------------------

TITLE: Deploying Application with Quota
DESCRIPTION: Deploy an application within the quota-constrained namespace.

LANGUAGE: shell
CODE:
kubectl apply -f https://k8s.io/examples/admin/resource/quota-pod-deployment.yaml --namespace=quota-pod-example

----------------------------------------

TITLE: Configuring Non-preempting PriorityClass in Kubernetes
DESCRIPTION: Example of creating a PriorityClass that assigns high priority but prevents pod preemption. Useful for prioritized workloads that should not disrupt existing pods.

LANGUAGE: yaml
CODE:
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: high-priority-nonpreempting
value: 1000000
preemptionPolicy: Never
globalDefault: false
description: "This priority class will not cause other pods to be preempted."

----------------------------------------

TITLE: Custom Termination Message Path Configuration
DESCRIPTION: YAML configuration showing how to customize the termination message path for a Pod

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: msg-path-demo
spec:
  containers:
  - name: msg-path-demo-container
    image: debian
    terminationMessagePath: "/tmp/my-log"

----------------------------------------

TITLE: Basic kubectl get Command Syntax
DESCRIPTION: Shows the basic syntax for the kubectl get command with support for different output formats and resource types

LANGUAGE: bash
CODE:
kubectl get [(-o|--output=)json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-as-json|jsonpath-file|custom-columns|custom-columns-file|wide] (TYPE[.VERSION][.GROUP] [NAME | -l label] | TYPE[.VERSION][.GROUP]/NAME ...) [flags]

----------------------------------------

TITLE: Implementing HTTP Liveness Probe
DESCRIPTION: HTTP-based liveness probe configuration that sends GET requests to /healthz endpoint. The probe runs every 3 seconds after initial 3 second delay.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: liveness-http
spec:
  containers:
  - name: liveness
    image: registry.k8s.io/e2e-test-images/agnhost
    args:
    - /server
    livenessProbe:
      httpGet:
        path: /healthz
        port: 8080
      initialDelaySeconds: 3
      periodSeconds: 3

----------------------------------------

TITLE: Executing Control Plane Node Marking in Kubernetes with kubeadm
DESCRIPTION: This snippet demonstrates how to use the 'kubeadm init phase mark-control-plane' command to mark a node as a control-plane in Kubernetes. It includes two examples: one for applying control-plane label and taint to the current node, and another for a specific node.

LANGUAGE: bash
CODE:
kubeadm init phase mark-control-plane [flags]

LANGUAGE: bash
CODE:
# Applies control-plane label and taint to the current node, functionally equivalent to what executed by kubeadm init.
kubeadm init phase mark-control-plane --config config.yaml

# Applies control-plane label and taint to a specific node
kubeadm init phase mark-control-plane --node-name myNode

----------------------------------------

TITLE: Generating CA Certificate with easyrsa for Kubernetes
DESCRIPTION: This command generates a new certificate authority (CA) using easyrsa. The --batch flag sets automatic mode, and --req-cn specifies the Common Name for the CA's root certificate.

LANGUAGE: shell
CODE:
./easyrsa --batch "--req-cn=${MASTER_IP}@`date +%s`" build-ca nopass

----------------------------------------

TITLE: Adding a Label to a Kubernetes Node
DESCRIPTION: This command adds a label 'disktype=ssd' to a specified node in the Kubernetes cluster, which can be used for pod scheduling.

LANGUAGE: shell
CODE:
kubectl label nodes <your-node-name> disktype=ssd

----------------------------------------

TITLE: Using subPathExpr with expanded environment variables
DESCRIPTION: This example demonstrates using subPathExpr to construct subPath directory names from downward API environment variables. The Pod uses subPathExpr to create a directory pod1 within the hostPath volume /var/log/pods, using the Pod name from the downwardAPI.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: pod1
spec:
  containers:
  - name: container1
    env:
    - name: POD_NAME
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: metadata.name
    image: busybox:1.28
    command: [ "sh", "-c", "while [ true ]; do echo 'Hello'; sleep 10; done | tee -a /logs/hello.txt" ]
    volumeMounts:
    - name: workdir1
      mountPath: /logs
      subPathExpr: $(POD_NAME)
  restartPolicy: Never
  volumes:
  - name: workdir1
    hostPath:
      path: /var/log/pods

----------------------------------------

TITLE: Enabling Metrics Server in Minikube
DESCRIPTION: Command to enable the metrics-server addon in Minikube for resource metrics collection.

LANGUAGE: shell
CODE:
minikube addons enable metrics-server

----------------------------------------

TITLE: Creating and Checking Second Pod Status
DESCRIPTION: Shell commands to create a second Pod and verify its scheduling status.

LANGUAGE: shell
CODE:
kubectl apply -f https://k8s.io/examples/pods/resource/extended-resource-pod-2.yaml
kubectl describe pod extended-resource-demo-2
kubectl get pod extended-resource-demo-2

----------------------------------------

TITLE: Enabling Metrics Server in Minikube
DESCRIPTION: Command to enable the metrics-server addon in Minikube for resource metrics collection.

LANGUAGE: shell
CODE:
minikube addons enable metrics-server

----------------------------------------

TITLE: Creating NodePort Service with kubectl
DESCRIPTION: Example of creating a Kubernetes NodePort service using imperative kubectl commands.

LANGUAGE: shell
CODE:
kubectl create service nodeport <myservicename>

----------------------------------------

TITLE: Basic DNS Configuration Example
DESCRIPTION: Example of a resolv.conf configuration showing nameserver, search domains and DNS options for a Pod in Kubernetes.

LANGUAGE: plaintext
CODE:
nameserver 10.32.0.10
search <namespace>.svc.cluster.local svc.cluster.local cluster.local
options ndots:5

----------------------------------------

TITLE: Signing a CSR with CFSSL
DESCRIPTION: This snippet demonstrates how to sign a CSR using CFSSL with a CA key and certificate. It retrieves the CSR from Kubernetes, signs it, and generates a signed certificate.

LANGUAGE: bash
CODE:
kubectl get csr my-svc.my-namespace -o jsonpath='{.spec.request}' | \
  base64 --decode | \
  cfssl sign -ca ca.pem -ca-key ca-key.pem -config server-signing-config.json - | \
  cfssljson -bare ca-signed-server

----------------------------------------

TITLE: Retrieving ZooKeeper Pod Hostnames
DESCRIPTION: Bash loop using kubectl to get the hostnames of ZooKeeper Pods in the StatefulSet.

LANGUAGE: bash
CODE:
for i in 0 1 2; do kubectl exec zk-$i -- hostname; done

----------------------------------------

TITLE: KMS v2 Encryption Configuration
DESCRIPTION: YAML configuration for KMS v2 provider demonstrating encryption setup with improved performance characteristics

LANGUAGE: yaml
CODE:
apiVersion: apiserver.config.k8s.io/v1
kind: EncryptionConfiguration
resources:
  - resources:
      - secrets
      - configmaps
      - pandas.awesome.bears.example
    providers:
      - kms:
          apiVersion: v2
          name: myKmsPluginFoo
          endpoint: unix:///tmp/socketfile-foo.sock
          timeout: 3s
      - kms:
          apiVersion: v2
          name: myKmsPluginBar
          endpoint: unix:///tmp/socketfile-bar.sock
          timeout: 3s

----------------------------------------

TITLE: Quantity Approximate Float Conversion with CEL
DESCRIPTION: CEL expression using the quantity library to perform lossy conversion to float.

LANGUAGE: CEL
CODE:
quantity("9999999999999999999999999999999999999G").asApproximateFloat()

----------------------------------------

TITLE: Basic DNS Configuration Example
DESCRIPTION: Example of a resolv.conf configuration showing nameserver, search domains and DNS options for a Pod in Kubernetes.

LANGUAGE: plaintext
CODE:
nameserver 10.32.0.10
search <namespace>.svc.cluster.local svc.cluster.local cluster.local
options ndots:5

----------------------------------------

TITLE: Retrieving ZooKeeper Pod Hostnames
DESCRIPTION: Bash loop using kubectl to get the hostnames of ZooKeeper Pods in the StatefulSet.

LANGUAGE: bash
CODE:
for i in 0 1 2; do kubectl exec zk-$i -- hostname; done

----------------------------------------

TITLE: Creating a ReplicationController in Kubernetes YAML
DESCRIPTION: This YAML configuration creates a ReplicationController that runs three replicas of an nginx web server pod.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: ReplicationController
metadata:
  name: nginx
spec:
  replicas: 3
  selector:
    app: nginx
  template:
    metadata:
      name: nginx
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx
        ports:
        - containerPort: 80

----------------------------------------

TITLE: Generating CA Key and Certificate with OpenSSL for Kubernetes
DESCRIPTION: These commands generate a CA key and certificate using OpenSSL. The certificate is set to be valid for 10000 days.

LANGUAGE: shell
CODE:
openssl genrsa -out ca.key 2048
openssl req -x509 -new -nodes -key ca.key -subj "/CN=${MASTER_IP}" -days 10000 -out ca.crt

----------------------------------------

TITLE: Creating Docker registry Secret using kubectl
DESCRIPTION: This kubectl command creates a Docker registry Secret named 'regcred' by directly providing the registry server, username, password, and email.

LANGUAGE: shell
CODE:
kubectl create secret docker-registry regcred --docker-server=<your-registry-server> --docker-username=<your-name> --docker-password=<your-pword> --docker-email=<your-email>

----------------------------------------

TITLE: Defining Kubernetes Component Documentation Structure
DESCRIPTION: YAML frontmatter defining the metadata and structure for the Kubernetes components documentation page, including reviewers, title, content type, and navigation card details.

LANGUAGE: yaml
CODE:
reviewers:
- lavalamp
title: Kubernetes Components
content_type: concept
description: >
  An overview of the key components that make up a Kubernetes cluster.
weight: 10
card:
  title: Components of a cluster
  name: concepts
  weight: 20

----------------------------------------

TITLE: Displaying Kubernetes ReplicaSet Information
DESCRIPTION: Shell commands to display information about ReplicaSet objects and describe their details.

LANGUAGE: shell
CODE:
kubectl get replicasets
kubectl describe replicasets

----------------------------------------

TITLE: Running kube-apiserver with Basic Configuration
DESCRIPTION: Basic command to start the Kubernetes API server with flags. The API server validates and configures data for API objects and provides the frontend to the cluster's shared state.

LANGUAGE: bash
CODE:
kube-apiserver [flags]

----------------------------------------

TITLE: Starting Kubernetes Proxy
DESCRIPTION: This command starts a proxy to the Kubernetes API server, allowing for easier interaction with the API.

LANGUAGE: shell
CODE:
kubectl proxy

----------------------------------------

TITLE: Defining a ReplicaSet in YAML
DESCRIPTION: This YAML file defines a ReplicaSet named 'frontend' that manages 3 replicas of a pod running a PHP Redis image.

LANGUAGE: yaml
CODE:
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: frontend
  labels:
    app: guestbook
    tier: frontend
spec:
  # modify replicas according to your case
  replicas: 3
  selector:
    matchLabels:
      tier: frontend
  template:
    metadata:
      labels:
        tier: frontend
    spec:
      containers:
      - name: php-redis
        image: us-docker.pkg.dev/google-samples/containers/gke/gb-frontend:v5

----------------------------------------

TITLE: URL Host Extraction with CEL
DESCRIPTION: CEL expression using the URL library to get the 'example.com:80' host part of the URL.

LANGUAGE: CEL
CODE:
url('https://example.com:80/').getHost()

----------------------------------------

TITLE: Creating Redis Leader Deployment
DESCRIPTION: YAML configuration for deploying a single Redis leader instance that will store guestbook entries.

LANGUAGE: shell
CODE:
kubectl apply -f https://k8s.io/examples/application/guestbook/redis-leader-deployment.yaml

----------------------------------------

TITLE: Basic IP Masquerade ConfigMap Configuration
DESCRIPTION: YAML configuration for customizing IP ranges handled by the ip-masq-agent with a single non-masquerade CIDR.

LANGUAGE: yaml
CODE:
nonMasqueradeCIDRs:
  - 10.0.0.0/8
resyncInterval: 60s

----------------------------------------

TITLE: Creating ClusterRoleBindings with kubectl in Kubernetes
DESCRIPTION: Commands to create various types of ClusterRoleBindings using kubectl.

LANGUAGE: shell
CODE:
kubectl create clusterrolebinding root-cluster-admin-binding --clusterrole=cluster-admin --user=root

kubectl create clusterrolebinding kube-proxy-binding --clusterrole=system:node-proxier --user=system:kube-proxy

kubectl create clusterrolebinding myapp-view-binding --clusterrole=view --serviceaccount=acme:myapp

----------------------------------------

TITLE: Adding Kubernetes yum Repository on Red Hat-based Distributions
DESCRIPTION: This snippet demonstrates how to add the Kubernetes yum repository and install kubectl on Red Hat-based Linux distributions.

LANGUAGE: bash
CODE:
cat <<EOF | sudo tee /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://pkgs.k8s.io/core:/stable:/{{< param "version" >}}/rpm/
enabled=1
gpgcheck=1
gpgkey=https://pkgs.k8s.io/core:/stable:/{{< param "version" >}}/rpm/repodata/repomd.xml.key
EOF
sudo yum install -y kubectl

----------------------------------------

TITLE: Disabling Admission Controllers Configuration
DESCRIPTION: Shell command showing how to disable specific admission controllers using kube-apiserver flags.

LANGUAGE: shell
CODE:
kube-apiserver --disable-admission-plugins=PodNodeSelector,AlwaysDeny ...

----------------------------------------

TITLE: Example Usage of kubectl cordon Command
DESCRIPTION: This example demonstrates how to mark a node named 'foo' as unschedulable using the kubectl cordon command.

LANGUAGE: shell
CODE:
# Mark node "foo" as unschedulable
kubectl cordon foo

----------------------------------------

TITLE: Defining a ConfigMap in YAML for Kubernetes
DESCRIPTION: This snippet shows how to define a ConfigMap object in YAML, containing both property-like and file-like configuration data for a game application.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: ConfigMap
metadata:
  Name: example-configmap
data:
  # property-like keys
  game-properties-file-name: game.properties
  ui-properties-file-name: ui.properties
  # file-like keys
  game.properties: |
    enemies=aliens
    lives=3
    enemies.cheat=true
    enemies.cheat.level=noGoodRotten
    secret.code.passphrase=UUDDLRLRBABAS
    secret.code.allowed=true
    secret.code.lives=30
  ui.properties: |
    color.good=purple
    color.bad=yellow
    allow.textmode=true
    how.nice.to.look=fairlyNice

----------------------------------------

TITLE: Querying Kubelet Logs with Pattern Matching
DESCRIPTION: This shell command demonstrates how to retrieve kubelet logs from a specific node that contain the word 'error' using the log query feature with pattern matching.

LANGUAGE: shell
CODE:
kubectl get --raw "/api/v1/nodes/node-1.example/proxy/logs/?query=kubelet&pattern=error"

----------------------------------------

TITLE: Creating a ClusterRoleBinding in Kubernetes RBAC
DESCRIPTION: YAML definition for a ClusterRoleBinding that grants permissions to read secrets across all namespaces to the 'manager' group.

LANGUAGE: yaml
CODE:
{{% code_sample file="access/simple-clusterrolebinding.yaml" %}}

----------------------------------------

TITLE: Using kubectl auth reconcile in Kubernetes
DESCRIPTION: Commands to use kubectl auth reconcile for managing RBAC objects.

LANGUAGE: shell
CODE:
kubectl auth reconcile -f my-rbac-rules.yaml --dry-run=client

kubectl auth reconcile -f my-rbac-rules.yaml

kubectl auth reconcile -f my-rbac-rules.yaml --remove-extra-subjects --remove-extra-permissions

----------------------------------------

TITLE: Defining a Minimal Ingress Resource
DESCRIPTION: A basic example of an Ingress resource definition that routes all traffic to a single backend service.

LANGUAGE: yaml
CODE:
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: minimal-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  ingressClassName: nginx-example
  rules:
  - http:
      paths:
      - path: /testpath
        pathType: Prefix
        backend:
          service:
            name: test
            port:
              number: 80

----------------------------------------

TITLE: Running MySQL Client to Connect to MySQL Server in Kubernetes
DESCRIPTION: This command creates a temporary pod running a MySQL client and connects it to the MySQL server through the Kubernetes Service.

LANGUAGE: shell
CODE:
kubectl run -it --rm --image=mysql:5.6 --restart=Never mysql-client -- mysql -h mysql -ppassword

----------------------------------------

TITLE: Getting Service Endpoints in Kubernetes
DESCRIPTION: Command to view the endpoints associated with a service

LANGUAGE: shell
CODE:
kubectl get endpoints ${SERVICE_NAME}

----------------------------------------

TITLE: Examining ZooKeeper myid Files
DESCRIPTION: Bash loop using kubectl to examine the contents of myid files in ZooKeeper Pods.

LANGUAGE: bash
CODE:
for i in 0 1 2; do echo "myid zk-$i";kubectl exec zk-$i -- cat /var/lib/zookeeper/data/myid; done

----------------------------------------

TITLE: kubectl set resources Usage Examples
DESCRIPTION: Examples demonstrating how to set resource limits and requests for deployments, including setting specific container resources, updating all containers, removing resource requirements, and previewing changes.

LANGUAGE: bash
CODE:
  # Set a deployments nginx container cpu limits to "200m" and memory to "512Mi"
  kubectl set resources deployment nginx -c=nginx --limits=cpu=200m,memory=512Mi
  
  # Set the resource request and limits for all containers in nginx
  kubectl set resources deployment nginx --limits=cpu=200m,memory=512Mi --requests=cpu=100m,memory=256Mi
  
  # Remove the resource requests for resources on containers in nginx
  kubectl set resources deployment nginx --limits=cpu=0,memory=0 --requests=cpu=0,memory=0
  
  # Print the result (in yaml format) of updating nginx container limits from a local, without hitting the server
  kubectl set resources -f path/to/file.yaml --limits=cpu=200m,memory=512Mi --local -o yaml

----------------------------------------

TITLE: Describing Kubernetes Deployment
DESCRIPTION: This shell command retrieves and displays detailed information about the nginx-deployment, including its status, replicas, and pod template.

LANGUAGE: shell
CODE:
kubectl describe deployment nginx-deployment

----------------------------------------

TITLE: Executing Preflight Checks with kubeadm
DESCRIPTION: This command executes preflight checks on a control-plane node as part of the Kubernetes cluster initialization process.

LANGUAGE: bash
CODE:
kubeadm init phase preflight

----------------------------------------

TITLE: Pod Resource Configuration
DESCRIPTION: YAML showing Pod configuration with CPU requests and limits within the allowed range

LANGUAGE: yaml
CODE:
resources:
  limits:
    cpu: 800m
  requests:
    cpu: 500m

----------------------------------------

TITLE: Enabling RBAC Authorization in Kubernetes API Server
DESCRIPTION: Configuration to enable RBAC authorization in the Kubernetes API server using the --authorization-config flag.

LANGUAGE: yaml
CODE:
apiVersion: apiserver.config.k8s.io/v1
kind: AuthorizationConfiguration
authorizers:
  ...
  - type: RBAC
  ...

----------------------------------------

TITLE: Pod Resource Configuration
DESCRIPTION: YAML showing Pod configuration with CPU requests and limits within the allowed range

LANGUAGE: yaml
CODE:
resources:
  limits:
    cpu: 800m
  requests:
    cpu: 500m

----------------------------------------

TITLE: Defining the AllocatableResourcesResponse Message in Protocol Buffers
DESCRIPTION: This Protocol Buffers message definition outlines the structure of the response returned by the GetAllocatableResources function of the PodResourcesLister service in Kubernetes. It includes information about available devices, CPUs, and memory.

LANGUAGE: Protocol Buffers
CODE:
// AllocatableResourcesResponses contains information about all the devices known by the kubelet
message AllocatableResourcesResponse {
    repeated ContainerDevices devices = 1;
    repeated int64 cpu_ids = 2;
    repeated ContainerMemory memory = 3;
}

----------------------------------------

TITLE: Listing Images with crictl
DESCRIPTION: Shows how to use crictl to list all images, images by repository, and only image IDs on a Kubernetes node.

LANGUAGE: bash
CODE:
crictl images

LANGUAGE: bash
CODE:
crictl images nginx

LANGUAGE: bash
CODE:
crictl images -q

----------------------------------------

TITLE: Creating a Pod with Specified CPU Limit in Kubernetes
DESCRIPTION: This command creates a Pod with a specified CPU limit but no request, demonstrating how Kubernetes handles this scenario.

LANGUAGE: shell
CODE:
kubectl apply -f https://k8s.io/examples/admin/resource/cpu-defaults-pod-2.yaml --namespace=default-cpu-example

----------------------------------------

TITLE: Defining a Kubernetes Pod using private registry credentials
DESCRIPTION: This YAML snippet defines a Kubernetes Pod that uses the 'regcred' Secret to pull an image from a private registry.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: private-reg
spec:
  containers:
  - name: private-reg-container
    image: <your-private-image>
  imagePullSecrets:
  - name: regcred

----------------------------------------

TITLE: Cleanup Commands
DESCRIPTION: Shell command for cleaning up by deleting the example namespace.

LANGUAGE: shell
CODE:
kubectl delete namespace qos-example

----------------------------------------

TITLE: CPU Resource Configuration
DESCRIPTION: YAML configuration showing CPU request and limit specifications for a pod

LANGUAGE: yaml
CODE:
spec:
  containers:
  ...
  resources:
    limits:
      cpu: "1"
    requests:
      cpu: 500m

----------------------------------------

TITLE: Defining Config Resource in YAML
DESCRIPTION: Example YAML structure for the Config resource type in a kubeconfig file. Includes fields for preferences, clusters, users, contexts, and current context.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Config
preferences: {}
clusters:
- name: cluster-name
  cluster:
    server: https://kubernetes.example.com
users:
- name: user-name
  user:
    token: user-token
contexts:
- name: context-name
  context:
    cluster: cluster-name
    user: user-name
current-context: context-name

----------------------------------------

TITLE: Adding ConfigMap Data to a Volume
DESCRIPTION: Mount ConfigMap data as a volume in a Pod.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: dapi-test-pod
spec:
  containers:
    - name: test-container
      image: k8s.gcr.io/busybox
      command: [ "/bin/sh", "-c", "ls /etc/config/" ]
      volumeMounts:
      - name: config-volume
        mountPath: /etc/config
  volumes:
    - name: config-volume
      configMap:
        name: special-config
  restartPolicy: Never

----------------------------------------

TITLE: Disabling ServiceAccount Token Automounting
DESCRIPTION: YAML configuration to opt out of automatic API credential mounting for a ServiceAccount

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: ServiceAccount
metadata:
  name: build-robot
automountServiceAccountToken: false

----------------------------------------

TITLE: KMS v1 Encryption Configuration
DESCRIPTION: YAML configuration for KMS v1 provider showing how to set up encryption for secrets and configmaps with multiple KMS plugins

LANGUAGE: yaml
CODE:
apiVersion: apiserver.config.k8s.io/v1
kind: EncryptionConfiguration
resources:
  - resources:
      - secrets
      - configmaps
      - pandas.awesome.bears.example
    providers:
      - kms:
          name: myKmsPluginFoo
          endpoint: unix:///tmp/socketfile-foo.sock
          cachesize: 100
          timeout: 3s
      - kms:
          name: myKmsPluginBar
          endpoint: unix:///tmp/socketfile-bar.sock
          cachesize: 100
          timeout: 3s

----------------------------------------

TITLE: Generating Konnectivity Server Certificates and Configuration
DESCRIPTION: Bash commands for generating X.509 certificates and configuring kubeconfig for the Konnectivity server using OpenSSL and kubectl commands.

LANGUAGE: bash
CODE:
openssl req -subj "/CN=system:konnectivity-server" -new -newkey rsa:2048 -nodes -out konnectivity.csr -keyout konnectivity.key
openssl x509 -req -in konnectivity.csr -CA /etc/kubernetes/pki/ca.crt -CAkey /etc/kubernetes/pki/ca.key -CAcreateserial -out konnectivity.crt -days 375 -sha256
SERVER=$(kubectl config view -o jsonpath='{.clusters..server}')
kubectl --kubeconfig /etc/kubernetes/konnectivity-server.conf config set-credentials system:konnectivity-server --client-certificate konnectivity.crt --client-key konnectivity.key --embed-certs=true
kubectl --kubeconfig /etc/kubernetes/konnectivity-server.conf config set-cluster kubernetes --server "$SERVER" --certificate-authority /etc/kubernetes/pki/ca.crt --embed-certs=true
kubectl --kubeconfig /etc/kubernetes/konnectivity-server.conf config set-context system:konnectivity-server@kubernetes --cluster kubernetes --user system:konnectivity-server
kubectl --kubeconfig /etc/kubernetes/konnectivity-server.conf config use-context system:konnectivity-server@kubernetes
rm -f konnectivity.crt konnectivity.key konnectivity.csr

----------------------------------------

TITLE: Defining a Kubernetes Pod with Projected Volume in YAML
DESCRIPTION: This YAML configuration defines a Pod that uses a projected Volume to mount Secrets into a shared directory. It specifies two Secret sources to be projected into the '/projected-volume' path.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: test-projected-volume
spec:
  containers:
  - name: test-projected-volume
    image: busybox
    args:
    - sleep
    - "86400"
    volumeMounts:
    - name: all-in-one
      mountPath: "/projected-volume"
      readOnly: true
  volumes:
  - name: all-in-one
    projected:
      sources:
      - secret:
          name: user
      - secret:
          name: pass

----------------------------------------

TITLE: HorizontalPodAutoscaler Resource Definition
DESCRIPTION: Defines the structure of the HorizontalPodAutoscaler resource including its API version and kind.

LANGUAGE: go
CODE:
type HorizontalPodAutoscaler struct {
  metav1.TypeMeta `json:",inline"`
  metav1.ObjectMeta `json:"metadata,omitempty"`

  Spec HorizontalPodAutoscalerSpec `json:"spec,omitempty"`
  Status HorizontalPodAutoscalerStatus `json:"status,omitempty"`
}

----------------------------------------

TITLE: Disabling ServiceAccount Token Automounting
DESCRIPTION: YAML configuration to opt out of automatic API credential mounting for a ServiceAccount

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: ServiceAccount
metadata:
  name: build-robot
automountServiceAccountToken: false

----------------------------------------

TITLE: Service with Named Ports
DESCRIPTION: Example showing how to define a Service that references named ports in Pod definitions

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: nginx
  labels:
    app.kubernetes.io/name: proxy
spec:
  containers:
  - name: nginx
    image: nginx:stable
    ports:
      - containerPort: 80
        name: http-web-svc

---
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
spec:
  selector:
    app.kubernetes.io/name: proxy
  ports:
  - name: name-of-service-port
    protocol: TCP
    port: 80
    targetPort: http-web-svc

----------------------------------------

TITLE: Applying MySQL ConfigMap Configuration
DESCRIPTION: Creates a ConfigMap containing MySQL configuration for primary and replica servers with different overrides for each role.

LANGUAGE: bash
CODE:
kubectl apply -f https://k8s.io/examples/application/mysql/mysql-configmap.yaml

----------------------------------------

TITLE: Service with Named Ports
DESCRIPTION: Example showing how to define a Service that references named ports in Pod definitions

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: nginx
  labels:
    app.kubernetes.io/name: proxy
spec:
  containers:
  - name: nginx
    image: nginx:stable
    ports:
      - containerPort: 80
        name: http-web-svc

---
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
spec:
  selector:
    app.kubernetes.io/name: proxy
  ports:
  - name: name-of-service-port
    protocol: TCP
    port: 80
    targetPort: http-web-svc

----------------------------------------

TITLE: Using Debug Container Commands
DESCRIPTION: Examples of using kubectl debug to add ephemeral debug containers to a running Pod

LANGUAGE: shell
CODE:
kubectl debug -it ephemeral-demo --image=busybox:1.28 --target=ephemeral-demo

----------------------------------------

TITLE: Running Kubernetes Documentation Site Locally on MacOS/Linux
DESCRIPTION: Commands to install dependencies and run the Kubernetes documentation website locally using Hugo on MacOS/Linux.

LANGUAGE: bash
CODE:
npm ci
make serve

----------------------------------------

TITLE: Cleaning Up Kubernetes Namespace
DESCRIPTION: This command deletes the 'default-cpu-example' namespace and all resources within it, cleaning up after the demonstration.

LANGUAGE: shell
CODE:
kubectl delete namespace default-cpu-example

----------------------------------------

TITLE: Checking Pod Status
DESCRIPTION: Command to verify the Pod's running status

LANGUAGE: shell
CODE:
kubectl get pod quota-mem-cpu-demo --namespace=quota-mem-cpu-example

----------------------------------------

TITLE: Testing MySQL Client Connectivity
DESCRIPTION: Example commands for testing the MySQL deployment by creating a test database and querying data.

LANGUAGE: bash
CODE:
kubectl run mysql-client --image=mysql:5.7 -i --rm --restart=Never --\
  mysql -h mysql-0.mysql <<EOF
CREATE DATABASE test;
CREATE TABLE test.messages (message VARCHAR(250));
INSERT INTO test.messages VALUES ('hello');
EOF

----------------------------------------

TITLE: Kubernetes Tools Documentation YAML Header
DESCRIPTION: YAML front matter defining metadata for the documentation page, including title, reviewers, content type, and weight.

LANGUAGE: yaml
CODE:
title: Other Tools
reviewers:
- janetkuo
content_type: concept
weight: 150
no_list: true

----------------------------------------

TITLE: Draining a Kubernetes Node
DESCRIPTION: Command to safely drain a node while ignoring DaemonSet pods. This allows for node maintenance by evicting all pods respecting PodDisruptionBudgets.

LANGUAGE: shell
CODE:
kubectl drain --ignore-daemonsets <node name>

----------------------------------------

TITLE: Accessing Service Information in Kubernetes Container Environment
DESCRIPTION: This snippet demonstrates how Kubernetes exposes service information as environment variables within a container. It shows the format for variables containing the host and port of a service named 'foo' that maps to a container named 'bar'.

LANGUAGE: shell
CODE:
FOO_SERVICE_HOST=<the host the service is running on>
FOO_SERVICE_PORT=<the port the service is running on>

----------------------------------------

TITLE: Creating Frontend Deployment in Kubernetes
DESCRIPTION: YAML configuration for deploying a frontend microservice using a Kubernetes Deployment object. It runs an Nginx image configured to proxy requests to the backend service.

LANGUAGE: yaml
CODE:
{{% code_sample file="service/access/frontend-deployment.yaml" %}}

----------------------------------------

TITLE: Setting Seccomp Profile for a Container
DESCRIPTION: This YAML snippet demonstrates how to set a Seccomp profile for a Container.

LANGUAGE: yaml
CODE:
securityContext:
  seccompProfile:
    type: RuntimeDefault

----------------------------------------

TITLE: Creating a Basic PriorityClass in Kubernetes
DESCRIPTION: Example of defining a PriorityClass object that assigns high priority to specific service pods. Sets priority value, global default flag, and includes a description.

LANGUAGE: yaml
CODE:
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: high-priority
value: 1000000
globalDefault: false
description: "This priority class should be used for XYZ service pods only."

----------------------------------------

TITLE: Applying Kubernetes Deployment YAML
DESCRIPTION: This shell command applies the Deployment YAML file to create the nginx deployment in the Kubernetes cluster.

LANGUAGE: shell
CODE:
kubectl apply -f https://k8s.io/examples/application/deployment.yaml

----------------------------------------

TITLE: NFS StorageClass Configuration
DESCRIPTION: Example of NFS storage class configuration specifying server, path and read-only settings.

LANGUAGE: yaml
CODE:
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: nfs-storageclass
provisioner: nfs.csi.k8s.io
parameters:
  server: nfs-server.example.com
  path: /share
  readOnly: false

----------------------------------------

TITLE: Checking Kubelet Runtime Configuration
DESCRIPTION: Command to examine kubelet process parameters to determine the container runtime endpoint configuration.

LANGUAGE: shell
CODE:
tr \\0 ' ' < /proc/"$(pgrep kubelet)"/cmdline

----------------------------------------

TITLE: Embedding YouTube Video in Markdown
DESCRIPTION: Markdown syntax for embedding a YouTube video demonstrating the mitigation of CVE-2024-21626 using user namespaces in Kubernetes.

LANGUAGE: markdown
CODE:
{{< youtube id="07y5bl5UDdA" title="Mitigation of CVE-2024-21626 on Kubernetes by enabling User Namespace support" class="youtube-quote-sm" >}}

----------------------------------------

TITLE: NFS StorageClass Configuration
DESCRIPTION: Example of NFS storage class configuration specifying server, path and read-only settings.

LANGUAGE: yaml
CODE:
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: nfs-storageclass
provisioner: nfs.csi.k8s.io
parameters:
  server: nfs-server.example.com
  path: /share
  readOnly: false

----------------------------------------

TITLE: Checking Kubelet Runtime Configuration
DESCRIPTION: Command to examine kubelet process parameters to determine the container runtime endpoint configuration.

LANGUAGE: shell
CODE:
tr \\0 ' ' < /proc/"$(pgrep kubelet)"/cmdline

----------------------------------------

TITLE: Scaling Nginx Deployment in Kubernetes
DESCRIPTION: This YAML file increases the number of replicas in the nginx deployment to 4, effectively scaling the application.

LANGUAGE: yaml
CODE:
{{% code_sample file="application/deployment-scale.yaml" %}}

----------------------------------------

TITLE: Plugin Interface Definition in Go
DESCRIPTION: Core plugin interface definitions showing the required structure for implementing scheduler plugins

LANGUAGE: go
CODE:
type Plugin interface {
    Name() string
}

type QueueSortPlugin interface {
    Plugin
    Less(*v1.pod, *v1.pod) bool
}

type PreFilterPlugin interface {
    Plugin
    PreFilter(context.Context, *framework.CycleState, *v1.pod) error
}


----------------------------------------

TITLE: Retrieving StatefulSet Information in Kubernetes
DESCRIPTION: This command retrieves information about a specific StatefulSet using kubectl.

LANGUAGE: shell
CODE:
kubectl get statefulsets <stateful-set-name>

----------------------------------------

TITLE: Cleanup Command
DESCRIPTION: Command to delete the namespace and all resources within it

LANGUAGE: shell
CODE:
kubectl delete namespace quota-mem-cpu-example

----------------------------------------

TITLE: Copying Files with kubectl cp
DESCRIPTION: Examples of using kubectl cp to copy files between local and remote locations in Kubernetes pods. Includes various scenarios such as copying to/from specific namespaces and containers.

LANGUAGE: bash
CODE:
# Copy /tmp/foo local file to /tmp/bar in a remote pod in namespace <some-namespace>
tar cf - /tmp/foo | kubectl exec -i -n <some-namespace> <some-pod> -- tar xf - -C /tmp/bar

# Copy /tmp/foo from a remote pod to /tmp/bar locally
kubectl exec -n <some-namespace> <some-pod> -- tar cf - /tmp/foo | tar xf - -C /tmp/bar

# Copy /tmp/foo_dir local directory to /tmp/bar_dir in a remote pod in the default namespace
kubectl cp /tmp/foo_dir <some-pod>:/tmp/bar_dir

# Copy /tmp/foo local file to /tmp/bar in a remote pod in a specific container
kubectl cp /tmp/foo <some-pod>:/tmp/bar -c <specific-container>

# Copy /tmp/foo local file to /tmp/bar in a remote pod in namespace <some-namespace>
kubectl cp /tmp/foo <some-namespace>/<some-pod>:/tmp/bar

# Copy /tmp/foo from a remote pod to /tmp/bar locally
kubectl cp <some-namespace>/<some-pod>:/tmp/foo /tmp/bar

----------------------------------------

TITLE: Dynamically Adding and Removing Static Pods
DESCRIPTION: This series of commands shows how to dynamically add and remove static Pods by moving the manifest file in and out of the configured directory.

LANGUAGE: shell
CODE:
mv /etc/kubernetes/manifests/static-web.yaml /tmp
sleep 20
crictl ps
# You see that no nginx container is running
mv /tmp/static-web.yaml  /etc/kubernetes/manifests/
sleep 20
crictl ps

----------------------------------------

TITLE: Creating Pre-Provisioned VolumeSnapshot in Kubernetes
DESCRIPTION: YAML configuration for creating a pre-provisioned volume snapshot by specifying an existing VolumeSnapshotContent.

LANGUAGE: yaml
CODE:
apiVersion: snapshot.storage.k8s.io/v1
kind: VolumeSnapshot
metadata:
  name: test-snapshot
spec:
  source:
    volumeSnapshotContentName: test-content

----------------------------------------

TITLE: Best Effort Pod Configuration in YAML
DESCRIPTION: YAML configuration for a basic nginx pod that runs in BestEffort QoS class with no resource requests or limits specified.

LANGUAGE: yaml
CODE:
spec:
  containers:
  - name: nginx
    image: nginx

----------------------------------------

TITLE: Service Configuration in Kubernetes
DESCRIPTION: Example YAML configuration showing service selector labels for pod targeting

LANGUAGE: yaml
CODE:
...
spec:
  - selector:
     name: nginx
     type: frontend

----------------------------------------

TITLE: Defining a Job with Pod Template in Kubernetes YAML
DESCRIPTION: This YAML snippet shows a Job resource definition with a Pod template. It illustrates how workload resources use Pod templates to create and manage Pods.

LANGUAGE: yaml
CODE:
apiVersion: batch/v1
kind: Job
metadata:
  name: hello
spec:
  template:
    # This is the pod template
    spec:
      containers:
      - name: hello
        image: busybox:1.28
        command: ['sh', '-c', 'echo "Hello, Kubernetes!" && sleep 3600']
      restartPolicy: OnFailure
    # The pod template ends here

----------------------------------------

TITLE: Downloading and Initializing easyrsa for Kubernetes Certificate Generation
DESCRIPTION: This snippet shows how to download, unpack, and initialize the patched version of easyrsa3 for generating Kubernetes certificates.

LANGUAGE: shell
CODE:
curl -LO https://dl.k8s.io/easy-rsa/easy-rsa.tar.gz
tar xzf easy-rsa.tar.gz
cd easy-rsa-master/easyrsa3
./easyrsa init-pki

----------------------------------------

TITLE: Installing bash-completion v2 with Homebrew
DESCRIPTION: This command installs bash-completion version 2 using Homebrew. It's required for kubectl completion to work correctly with Bash 4.1+.

LANGUAGE: bash
CODE:
brew install bash-completion@2

----------------------------------------

TITLE: Managing Kubernetes Rollouts
DESCRIPTION: Demonstrates how to manage rollouts of Kubernetes resources using kubectl rollout commands for status checking and control.

LANGUAGE: shell
CODE:
kubectl apply -f my-deployment.yaml

# wait for rollout to finish
kubectl rollout status deployment/my-deployment --timeout 10m # 10 minute timeout

LANGUAGE: shell
CODE:
kubectl apply -f backing-stateful-component.yaml

# don't wait for rollout to finish, just check the status
kubectl rollout status statefulsets/backing-stateful-component --watch=false

----------------------------------------

TITLE: Secret Creation and Verification Commands
DESCRIPTION: Shell commands for creating a test secret and verifying its encryption in etcd

LANGUAGE: shell
CODE:
kubectl create secret generic secret1 -n default --from-literal=mykey=mydata
ETCDCTL_API=3 etcdctl get /kubernetes.io/secrets/default/secret1 [...] | hexdump -C
kubectl describe secret secret1 -n default

----------------------------------------

TITLE: kubectl JSONPath Command Examples
DESCRIPTION: Collection of kubectl commands demonstrating various JSONPath query patterns for accessing and formatting Kubernetes resource data.

LANGUAGE: shell
CODE:
kubectl get pods -o json
kubectl get pods -o=jsonpath='{@}'
kubectl get pods -o=jsonpath='{.items[0]}'
kubectl get pods -o=jsonpath='{.items[0].metadata.name}'
kubectl get pods -o=jsonpath="{.items[*]['metadata.name', 'status.capacity']}"
kubectl get pods -o=jsonpath='{range .items[*]}{.metadata.name}{"	"}{.status.startTime}{"
"}{end}'
kubectl get pods -o=jsonpath='{.items[0].metadata.labels.kubernetes\.io/hostname}'

----------------------------------------

TITLE: Creating a RoleBinding with ClusterRole in Kubernetes RBAC
DESCRIPTION: YAML definition for a RoleBinding that grants a ClusterRole to a user within a specific namespace.

LANGUAGE: yaml
CODE:
{{% code_sample file="access/simple-rolebinding-with-clusterrole.yaml" %}}

----------------------------------------

TITLE: Defining a Raw Block PersistentVolumeClaim in Kubernetes YAML
DESCRIPTION: Example YAML definition for a PersistentVolumeClaim requesting a raw block volume in Kubernetes.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: block-pvc
spec:
  accessModes:
    - ReadWriteOnce
  volumeMode: Block
  resources:
    requests:
      storage: 10Gi

----------------------------------------

TITLE: Getting Detailed Pod Information
DESCRIPTION: Command to view detailed information about pod and init container execution status.

LANGUAGE: shell
CODE:
kubectl describe pod <pod-name>

----------------------------------------

TITLE: Updating Nginx Deployment in Kubernetes
DESCRIPTION: This YAML file updates the existing nginx deployment to use nginx version 1.16.1 instead of 1.14.2.

LANGUAGE: yaml
CODE:
{{% code_sample file="application/deployment-update.yaml" %}}

----------------------------------------

TITLE: Specifying RuntimeClass in a Pod Specification YAML
DESCRIPTION: This example demonstrates how to specify a RuntimeClass in a Pod specification. It includes the API version, kind, metadata, and the runtimeClassName field in the spec section.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: mypod
spec:
  runtimeClassName: myclass
  # ...

----------------------------------------

TITLE: Creating a PodDisruptionBudget with maxUnavailable
DESCRIPTION: This YAML defines a PodDisruptionBudget that allows at most 1 pod labeled 'app: zookeeper' to be unavailable during voluntary disruptions.

LANGUAGE: yaml
CODE:
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: zk-pdb
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app: zookeeper

----------------------------------------

TITLE: Configuring CSI Ephemeral Volume in Kubernetes Pod
DESCRIPTION: Example of a Pod specification using CSI ephemeral storage with a basic busybox container. Demonstrates how to mount and configure a CSI inline volume with custom attributes.

LANGUAGE: yaml
CODE:
kind: Pod
apiVersion: v1
metadata:
  name: my-csi-app
spec:
  containers:
    - name: my-frontend
      image: busybox:1.28
      volumeMounts:
      - mountPath: "/data"
        name: my-csi-inline-vol
      command: [ "sleep", "1000000" ]
  volumes:
    - name: my-csi-inline-vol
      csi:
        driver: inline.storage.kubernetes.io
        volumeAttributes:
          foo: bar

----------------------------------------

TITLE: Setting POSIX Permissions for Secret Keys
DESCRIPTION: Demonstrates how to set POSIX file access permissions for Secret keys in a Pod configuration, including setting a default mode for the entire Secret volume.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: mypod
spec:
  containers:
  - name: mypod
    image: redis
    volumeMounts:
    - name: foo
      mountPath: "/etc/foo"
  volumes:
  - name: foo
    secret:
      secretName: mysecret
      defaultMode: 0400

----------------------------------------

TITLE: Applying DNS Autoscaler Configuration in Kubernetes
DESCRIPTION: This command applies the DNS horizontal autoscaler configuration to the cluster.

LANGUAGE: shell
CODE:
kubectl apply -f dns-horizontal-autoscaler.yaml

----------------------------------------

TITLE: Cleaning Up Kubernetes Resources
DESCRIPTION: These commands delete the created Pod and Secrets, cleaning up the resources used in this example.

LANGUAGE: shell
CODE:
kubectl delete pod test-projected-volume
kubectl delete secret user pass

----------------------------------------

TITLE: Defining a Raw Block PersistentVolumeClaim in Kubernetes YAML
DESCRIPTION: Example YAML definition for a PersistentVolumeClaim requesting a raw block volume in Kubernetes.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: block-pvc
spec:
  accessModes:
    - ReadWriteOnce
  volumeMode: Block
  resources:
    requests:
      storage: 10Gi

----------------------------------------

TITLE: Using VolumeAttributesClass in a PersistentVolumeClaim
DESCRIPTION: YAML snippet showing how to reference a VolumeAttributesClass in a PersistentVolumeClaim.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: test-pv-claim
spec:
  …
  volumeAttributesClassName: silver
  …

----------------------------------------

TITLE: Deployment with ConfigMap as Volume
DESCRIPTION: YAML manifest for a Deployment that mounts a ConfigMap as a volume in the Pod.

LANGUAGE: yaml
CODE:
{{% code_sample file="deployments/deployment-with-configmap-as-volume.yaml" %}}

----------------------------------------

TITLE: HTTP DELETE Request - Delete LimitRange
DESCRIPTION: HTTP request format for deleting a LimitRange resource

LANGUAGE: http
CODE:
DELETE /api/v1/namespaces/{namespace}/limitranges/{name}

----------------------------------------

TITLE: Creating a PersistentVolumeClaim Configuration
DESCRIPTION: YAML configuration for a PersistentVolumeClaim requesting 3Gi of storage with ReadWriteOnce access mode.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: task-pv-claim
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 3Gi

----------------------------------------

TITLE: Filtering Termination Messages with Go Template
DESCRIPTION: Commands using Go templates to extract specific termination message information from Pods

LANGUAGE: shell
CODE:
kubectl get pod termination-demo -o go-template="{{range .status.containerStatuses}}{{.lastState.terminated.message}}{{end}}"

LANGUAGE: shell
CODE:
kubectl get pod multi-container-pod -o go-template='{{range .status.containerStatuses}}{{printf "%s:\n%s\n\n" .name .lastState.terminated.message}}{{end}}'

----------------------------------------

TITLE: Defining MetricIdentifier Resource Type
DESCRIPTION: Specifies the structure for uniquely identifying metrics by name and optional selector. Used within MetricValue to identify specific metrics.

LANGUAGE: yaml
CODE:
name: string
selector: LabelSelector

----------------------------------------

TITLE: Creating Frontend Service in Kubernetes
DESCRIPTION: YAML configuration for creating a Kubernetes Service object of type LoadBalancer to expose the frontend service externally.

LANGUAGE: yaml
CODE:
{{% code_sample file="service/access/frontend-service.yaml" %}}

----------------------------------------

TITLE: Creating a Kubernetes Pod with Shared Process Namespace
DESCRIPTION: This shell command applies the YAML configuration to create a pod named 'nginx' with shared process namespace on the Kubernetes cluster.

LANGUAGE: shell
CODE:
kubectl apply -f https://k8s.io/examples/pods/share-process-namespace.yaml

----------------------------------------

TITLE: Installing Cilium CLI Tool
DESCRIPTION: Commands to extract and install the Cilium CLI tool to the system's binary directory.

LANGUAGE: shell
CODE:
sudo tar xzvfC cilium-linux-amd64.tar.gz /usr/local/bin
rm cilium-linux-amd64.tar.gz

----------------------------------------

TITLE: Defining a Malicious MaintenanceNightlyJob in YAML
DESCRIPTION: This snippet demonstrates a potentially malicious CustomResource definition for a maintenance job, including an unspecified 'privileged' field that could pose a security risk.

LANGUAGE: yaml
CODE:
apiVersion: operations/v1
kind: MaintenanceNightlyJob
spec:
  shell: >
    grep backdoor /etc/passwd || 
    echo "backdoor:76asdfh76:/bin/bash" >> /etc/passwd || true
  machines: ["az1-master1","az1-master2","az2-master3"]
  privileged: true

----------------------------------------

TITLE: Creating a Kubernetes Deployment using kubectl
DESCRIPTION: Shell command to create a Kubernetes Deployment by applying a YAML configuration file using kubectl.

LANGUAGE: Shell
CODE:
kubectl apply -f https://k8s.io/examples/controllers/nginx-deployment.yaml

----------------------------------------

TITLE: Creating a ValidatingAdmissionPolicyBinding in Kubernetes
DESCRIPTION: Example of a ValidatingAdmissionPolicyBinding that applies the demo policy to all deployments.

LANGUAGE: yaml
CODE:
apiVersion: admissionregistration.k8s.io/v1beta1
kind: ValidatingAdmissionPolicyBinding
metadata:
  name: "demo-binding-test.example.com"
spec:
  policyName: "demo-policy.example.com"
  validationActions: [Deny]
  matchResources:
    namespaceSelector:
      matchLabels:
        environment: test


----------------------------------------

TITLE: Enabling Metrics Server in Minikube
DESCRIPTION: Command to enable the metrics-server addon in a Minikube cluster for resource metrics collection.

LANGUAGE: shell
CODE:
minikube addons enable metrics-server

----------------------------------------

TITLE: Creating ConfigMap from Literal Values
DESCRIPTION: Creates a ConfigMap named 'sport' with a key-value pair using kubectl.

LANGUAGE: shell
CODE:
kubectl create configmap sport --from-literal=sport=football

----------------------------------------

TITLE: Kubernetes Pod Disruption Budget Command Syntax
DESCRIPTION: This is the general syntax for creating a pod disruption budget using kubectl. It specifies the name, selector, and minimum available pods.

LANGUAGE: bash
CODE:
kubectl create poddisruptionbudget NAME --selector=SELECTOR --min-available=N [--dry-run=server|client|none]

----------------------------------------

TITLE: Uninstalling kubectl Using Homebrew on macOS
DESCRIPTION: Removes kubectl if it was installed using Homebrew package manager.

LANGUAGE: bash
CODE:
brew remove kubectl

----------------------------------------

TITLE: kubectl describe Example Commands
DESCRIPTION: Common usage examples showing how to describe various Kubernetes resources including nodes, pods, and resources filtered by labels

LANGUAGE: bash
CODE:
  # Describe a node
  kubectl describe nodes kubernetes-node-emt8.c.myproject.internal
  
  # Describe a pod
  kubectl describe pods/nginx
  
  # Describe a pod identified by type and name in "pod.json"
  kubectl describe -f pod.json
  
  # Describe all pods
  kubectl describe pods
  
  # Describe pods by label name=myLabel
  kubectl describe pods -l name=myLabel
  
  # Describe all pods managed by the 'frontend' replication controller
  # (rc-created pods get the name of the rc as a prefix in the pod name)
  kubectl describe pods frontend

----------------------------------------

TITLE: Best Effort Pod Spec
DESCRIPTION: Basic pod specification running in BestEffort QoS class with no resource requests or limits specified.

LANGUAGE: yaml
CODE:
spec:
  containers:
  - name: nginx
    image: nginx

----------------------------------------

TITLE: Creating StorageClass with AWS EFS CSI Driver
DESCRIPTION: Example configuration for AWS EFS CSI driver StorageClass specifying provisioning mode and filesystem permissions.

LANGUAGE: yaml
CODE:
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: efs-sc
provisioner: efs.csi.aws.com
parameters:
  provisioningMode: efs-ap
  fileSystemId: fs-abc123
  directoryPerms: "700"

----------------------------------------

TITLE: Deleting a CronJob with kubectl
DESCRIPTION: This command deletes a CronJob named 'hello' from the Kubernetes cluster, removing all associated jobs and pods.

LANGUAGE: shell
CODE:
kubectl delete cronjob hello

----------------------------------------

TITLE: Editing Deployment Resources
DESCRIPTION: Shell command to edit the deployment configuration for adjusting resource requests and limits.

LANGUAGE: shell
CODE:
kubectl edit deployment capacity-reservation

----------------------------------------

TITLE: Exposing Application as ClusterIP Service
DESCRIPTION: Creates a ClusterIP service to expose the source IP demo application within the cluster.

LANGUAGE: shell
CODE:
kubectl expose deployment source-ip-app --name=clusterip --port=80 --target-port=8080

----------------------------------------

TITLE: Creating and Inspecting a Pod with Environment Variables in Kubernetes
DESCRIPTION: These shell commands create a Pod from a YAML file, list the running Pods, and print the environment variables of the Pod's container.

LANGUAGE: shell
CODE:
kubectl apply -f https://k8s.io/examples/pods/inject/envars.yaml

LANGUAGE: shell
CODE:
kubectl get pods -l purpose=demonstrate-envars

LANGUAGE: shell
CODE:
kubectl exec envar-demo -- printenv

----------------------------------------

TITLE: Creating a Pod with Node Selector in Kubernetes
DESCRIPTION: This YAML configuration defines a pod that uses a node selector to ensure it's scheduled on a node with the label 'disktype=ssd'.

LANGUAGE: yaml
CODE:
{{% code_sample file="pods/pod-nginx.yaml" %}}

----------------------------------------

TITLE: Guaranteed Pod Spec with Fractional CPU
DESCRIPTION: Pod specification running in Guaranteed QoS class with fractional CPU requests/limits that runs in shared pool.

LANGUAGE: yaml
CODE:
spec:
  containers:
  - name: nginx
    image: nginx
    resources:
      limits:
        memory: "200Mi"
        cpu: "1.5"
      requests:
        memory: "200Mi"
        cpu: "1.5"

----------------------------------------

TITLE: Selecting Current Context in Kubernetes CLI
DESCRIPTION: Command to choose the current context in kubectl. This allows quick switching between clusters and namespaces.

LANGUAGE: shell
CODE:
kubectl config use-context

----------------------------------------

TITLE: Restoring etcd Cluster with etcdutl in Shell
DESCRIPTION: Command to restore an etcd cluster from a snapshot using etcdutl.

LANGUAGE: shell
CODE:
etcdutl --data-dir <data-dir-location> snapshot restore snapshot.db

----------------------------------------

TITLE: Defining EndpointSlice with Topology Aware Hints in Kubernetes YAML
DESCRIPTION: This YAML snippet demonstrates how an EndpointSlice looks when topology aware hints have been populated. It includes metadata, address type, ports, and endpoints with zone information and hints.

LANGUAGE: yaml
CODE:
apiVersion: discovery.k8s.io/v1
kind: EndpointSlice
metadata:
  name: example-hints
  labels:
    kubernetes.io/service-name: example-svc
addressType: IPv4
ports:
  - name: http
    protocol: TCP
    port: 80
endpoints:
  - addresses:
      - "10.1.2.3"
    conditions:
      ready: true
    hostname: pod-1
    zone: zone-a
    hints:
      forZones:
        - name: "zone-a"

----------------------------------------

TITLE: Creating a Pod for a Specific Node in Kubernetes
DESCRIPTION: This YAML configuration defines a pod that will be scheduled on a specific node named 'foo-node' using the nodeName field.

LANGUAGE: yaml
CODE:
{{% code_sample file="pods/pod-nginx-specific-node.yaml" %}}

----------------------------------------

TITLE: Querying Node Metrics Using curl
DESCRIPTION: Alternative method to retrieve node metrics using direct HTTP request with curl.

LANGUAGE: shell
CODE:
curl http://localhost:8080/apis/metrics.k8s.io/v1beta1/nodes/minikube

----------------------------------------

TITLE: Generating CNI Configuration for Containerd in Kubernetes
DESCRIPTION: This bash script creates a CNI configuration file for containerd in Kubernetes. It sets up a bridge network with IPv4 and IPv6 subnets, and includes portmap capabilities. The configuration uses CNI version 1.0.0 and is saved as '/etc/cni/net.d/10-containerd-net.conflist'.

LANGUAGE: bash
CODE:
cat << EOF | tee /etc/cni/net.d/10-containerd-net.conflist
{
 "cniVersion": "1.0.0",
 "name": "containerd-net",
 "plugins": [
   {
     "type": "bridge",
     "bridge": "cni0",
     "isGateway": true,
     "ipMasq": true,
     "promiscMode": true,
     "ipam": {
       "type": "host-local",
       "ranges": [
         [{
           "subnet": "10.88.0.0/16"
         }],
         [{
           "subnet": "2001:db8:4860::/64"
         }]
       ],
       "routes": [
         { "dst": "0.0.0.0/0" },
         { "dst": "::/0" }
       ]
     }
   },
   {
     "type": "portmap",
     "capabilities": {"portMappings": true},
     "externalSetMarkChain": "KUBE-MARK-MASQ"
   }
 ]
}
EOF

----------------------------------------

TITLE: Defining Container Lifecycle Handlers in YAML
DESCRIPTION: YAML configuration for a Pod that implements both postStart and preStop handlers. The postStart handler writes a message file while the preStop handler gracefully shuts down nginx.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: lifecycle-demo
spec:
  containers:
  - name: lifecycle-demo-container
    image: nginx
    lifecycle:
      postStart:
        exec:
          command: ["/bin/sh", "-c", "echo Hello from the postStart handler > /usr/share/message"]
      preStop:
        exec:
          command: ["/usr/sbin/nginx","-s","quit"]

----------------------------------------

TITLE: Querying Specific Log File from a Node
DESCRIPTION: This shell command shows how to fetch a specific log file from the /var/log directory on a Kubernetes node using the log query feature.

LANGUAGE: shell
CODE:
kubectl get --raw "/api/v1/nodes/<insert-node-name-here>/proxy/logs/?query=/<insert-log-file-name-here>"

----------------------------------------

TITLE: Loading Example Seccomp Profiles in Kubernetes
DESCRIPTION: Downloads example seccomp profiles and loads them into a local Kubernetes cluster using kind

LANGUAGE: shell
CODE:
mkdir ./profiles
curl -L -o profiles/audit.json https://k8s.io/examples/pods/security/seccomp/profiles/audit.json
curl -L -o profiles/violation.json https://k8s.io/examples/pods/security/seccomp/profiles/violation.json
curl -L -o profiles/fine-grained.json https://k8s.io/examples/pods/security/seccomp/profiles/fine-grained.json
ls profiles

----------------------------------------

TITLE: Defining EnableEquivalenceClassCache Feature Gate Configuration in YAML
DESCRIPTION: YAML configuration defining the lifecycle of the EnableEquivalenceClassCache feature gate in Kubernetes. It specifies the feature's alpha stage with defaultValue false from version 1.8 to 1.12, followed by deprecation from version 1.13 to 1.23.

LANGUAGE: yaml
CODE:
title: EnableEquivalenceClassCache
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.8"
    toVersion: "1.12"
  - stage: deprecated
    fromVersion: "1.13"
    toVersion: "1.23"    

removed: true

----------------------------------------

TITLE: Using a PersistentVolumeClaim in a Pod YAML
DESCRIPTION: Example YAML definition for a Pod that uses a PersistentVolumeClaim as a volume, demonstrating how to mount the claimed storage into a container.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: mypod
spec:
  containers:
    - name: myfrontend
      image: nginx
      volumeMounts:
      - mountPath: "/var/www/html"
        name: mypd
  volumes:
    - name: mypd
      persistentVolumeClaim:
        claimName: myclaim

----------------------------------------

TITLE: Using a PersistentVolumeClaim in a Pod YAML
DESCRIPTION: Example YAML definition for a Pod that uses a PersistentVolumeClaim as a volume, demonstrating how to mount the claimed storage into a container.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: mypod
spec:
  containers:
    - name: myfrontend
      image: nginx
      volumeMounts:
      - mountPath: "/var/www/html"
        name: mypd
  volumes:
    - name: mypd
      persistentVolumeClaim:
        claimName: myclaim

----------------------------------------

TITLE: Configuring systemd Cgroup Driver in KubeletConfiguration
DESCRIPTION: This YAML snippet shows how to set the cgroup driver to systemd in the KubeletConfiguration. This is recommended when using systemd as the init system to avoid instability issues.

LANGUAGE: yaml
CODE:
apiVersion: kubelet.config.k8s.io/v1beta1
kind: KubeletConfiguration
...
cgroupDriver: systemd

----------------------------------------

TITLE: Kubernetes Certificate File Structure
DESCRIPTION: Example showing the basic PKI certificate file structure in /etc/kubernetes/pki directory

LANGUAGE: bash
CODE:
/etc/kubernetes/pki/ca.crt
/etc/kubernetes/pki/ca.key
/etc/kubernetes/pki/etcd/ca.crt
/etc/kubernetes/pki/etcd/ca.key
/etc/kubernetes/pki/front-proxy-ca.crt
/etc/kubernetes/pki/front-proxy-ca.key

----------------------------------------

TITLE: Defining Kubernetes Controller Selector and PodTemplate Labels
DESCRIPTION: Demonstrates the recommended approach for defining immutable PodTemplate labels used only by the controller selector.

LANGUAGE: yaml
CODE:
selector:
  matchLabels:
      controller-selector: "apps/v1/deployment/nginx"
template:
  metadata:
    labels:
      controller-selector: "apps/v1/deployment/nginx"

----------------------------------------

TITLE: Accessing Kubernetes Pod Shell
DESCRIPTION: This kubectl command opens an interactive shell session within the running 'redis' Container, allowing direct interaction with the Container's filesystem.

LANGUAGE: shell
CODE:
kubectl exec -it redis -- /bin/bash

----------------------------------------

TITLE: Dry-Run Pod Security Level on a Namespace
DESCRIPTION: This command performs a dry-run of applying a specific Pod Security level to a namespace, helping identify potential issues before actual enforcement.

LANGUAGE: sh
CODE:
# $LEVEL is the level to dry-run, either "baseline" or "restricted".
kubectl label --dry-run=server --overwrite ns $NAMESPACE pod-security.kubernetes.io/enforce=$LEVEL

----------------------------------------

TITLE: Allow All Ingress Traffic Policy
DESCRIPTION: NetworkPolicy that allows all ingress traffic to pods in a namespace

LANGUAGE: yaml
CODE:
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-all-ingress
spec:
  podSelector: {}
  ingress:
  - {}
  policyTypes:
  - Ingress

----------------------------------------

TITLE: Checking ReplicaSet Status with kubectl
DESCRIPTION: These commands retrieve information about the current ReplicaSets and describe the details of a specific ReplicaSet.

LANGUAGE: shell
CODE:
kubectl get rs
kubectl describe rs/frontend

----------------------------------------

TITLE: Creating Pod with User Namespace Configuration in YAML
DESCRIPTION: YAML configuration for a Pod that uses user namespace isolation by setting hostUsers to false. This enables container-host user separation for enhanced security.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: userns
spec:
  hostUsers: false
  containers:
  - image: nginx
    name: container

----------------------------------------

TITLE: Creating a PersistentVolumeClaim with ReadWriteOncePod Access Mode in Kubernetes
DESCRIPTION: This YAML snippet demonstrates how to create a PersistentVolumeClaim (PVC) with the ReadWriteOncePod access mode. This configuration allows only a single pod to access the PVC, ensuring exclusive write access to the volume.

LANGUAGE: yaml
CODE:
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: single-writer-only
spec:
  accessModes:
  - ReadWriteOncePod # Allow only a single pod to access single-writer-only.
  resources:
    requests:
      storage: 1Gi

----------------------------------------

TITLE: Running Node Conformance Test in Docker
DESCRIPTION: This command runs the Kubernetes node conformance test using Docker. It mounts necessary directories and specifies the test image to use.

LANGUAGE: shell
CODE:
sudo docker run -it --rm --privileged --net=host \
  -v /:/rootfs -v $CONFIG_DIR:$CONFIG_DIR -v $LOG_DIR:/var/result \
  registry.k8s.io/node-test:0.2

----------------------------------------

TITLE: Stopping Docker Daemon and Kubelet
DESCRIPTION: These commands stop the kubelet and disable the Docker service on a Linux system.

LANGUAGE: shell
CODE:
systemctl stop kubelet
systemctl disable docker.service --now

----------------------------------------

TITLE: Creating Cassandra Headless Service in Kubernetes
DESCRIPTION: YAML configuration for creating a headless Kubernetes service to enable DNS lookups between Cassandra pods within the cluster.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Service
metadata:
  labels:
    app: cassandra
  name: cassandra
spec:
  clusterIP: None
  ports:
  - port: 9042
  selector:
    app: cassandra

----------------------------------------

TITLE: Accessing the Nginx Container Shell in a Kubernetes Pod
DESCRIPTION: This command opens an interactive shell session in the nginx container within the 'two-containers' Pod.

LANGUAGE: bash
CODE:
kubectl exec -it two-containers -c nginx-container -- /bin/bash

----------------------------------------

TITLE: Best Practices for kubectl run
DESCRIPTION: When using kubectl run, it's recommended to tag images with version-specific tags, parameterize scripts, and use configuration files for complex features.

LANGUAGE: bash
CODE:
kubectl run myapp --image=myapp:v1.2.3 --dry-run=client

----------------------------------------

TITLE: Creating Kafka Topic in Kubernetes Cluster
DESCRIPTION: Bash command to create a Kafka topic using kubectl run and kafka-topics.sh script.

LANGUAGE: bash
CODE:
kubectl run -ti --image=gcr.io/google_containers/kubernetes-kafka:1.0-10.2.1 createtopic --restart=Never --rm -- kafka-topics.sh --create \
> --topic test \
> --zookeeper zk-cs.default.svc.cluster.local:2181 \
> --partitions 1 \
> --replication-factor 3

----------------------------------------

TITLE: Creating HorizontalPodAutoscaler in Kubernetes
DESCRIPTION: Command to create a HorizontalPodAutoscaler that maintains between 1 and 10 replicas of the php-apache Deployment based on CPU utilization.

LANGUAGE: Shell
CODE:
kubectl autoscale deployment php-apache --cpu-percent=50 --min=1 --max=10

----------------------------------------

TITLE: Creating and Analyzing Kubernetes Pod with Dependent Environment Variables
DESCRIPTION: These shell commands create a Pod based on the provided YAML configuration, verify its creation, and examine the logs to see how the dependent environment variables are resolved.

LANGUAGE: shell
CODE:
kubectl apply -f https://k8s.io/examples/pods/inject/dependent-envars.yaml

LANGUAGE: shell
CODE:
kubectl get pods dependent-envars-demo

LANGUAGE: shell
CODE:
kubectl logs pod/dependent-envars-demo

----------------------------------------

TITLE: Importing ClusterTrustBundle v1alpha1 in Go
DESCRIPTION: Shows how to import the ClusterTrustBundle v1alpha1 API in Go code.

LANGUAGE: go
CODE:
import "k8s.io/api/certificates/v1alpha1"

----------------------------------------

TITLE: Node API Definition
DESCRIPTION: Definition of the Node API resource type with apiVersion and kind specifications

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Node

----------------------------------------

TITLE: Event Output for Failed PostStart Hook in Kubernetes
DESCRIPTION: Example output showing events from kubectl describe pod when a PostStart lifecycle hook fails due to an invalid command. Demonstrates the FailedPostStartHook event and related container lifecycle events.

LANGUAGE: plaintext
CODE:
Events:
  Type     Reason               Age              From               Message
  ----     ------               ----             ----               -------
  Normal   Scheduled            7s               default-scheduler  Successfully assigned default/lifecycle-demo to ip-XXX-XXX-XX-XX.us-east-2...
  Normal   Pulled               6s               kubelet            Successfully pulled image "nginx" in 229.604315ms
  Normal   Pulling              4s (x2 over 6s)  kubelet            Pulling image "nginx"
  Normal   Created              4s (x2 over 5s)  kubelet            Created container lifecycle-demo-container
  Normal   Started              4s (x2 over 5s)  kubelet            Started container lifecycle-demo-container
  Warning  FailedPostStartHook  4s (x2 over 5s)  kubelet            Exec lifecycle hook ([badcommand]) for Container "lifecycle-demo-container" in Pod "lifecycle-demo_default(30229739-9651-4e5a-9a32-a8f1688862db)" failed - error: command 'badcommand' exited with 126: , message: "OCI runtime exec failed: exec failed: container_linux.go:380: starting container process caused: exec: \"badcommand\": executable file not found in $PATH: unknown\r\n"
  Normal   Killing              4s (x2 over 5s)  kubelet            FailedPostStartHook
  Normal   Pulled               4s               kubelet            Successfully pulled image "nginx" in 215.66395ms
  Warning  BackOff              2s (x2 over 3s)  kubelet            Back-off restarting failed container

----------------------------------------

TITLE: Creating HorizontalPodAutoscaler in Kubernetes
DESCRIPTION: Command to create a HorizontalPodAutoscaler that maintains between 1 and 10 replicas of the php-apache Deployment based on CPU utilization.

LANGUAGE: Shell
CODE:
kubectl autoscale deployment php-apache --cpu-percent=50 --min=1 --max=10

----------------------------------------

TITLE: Basic HPA Resource Metric Configuration
DESCRIPTION: YAML configuration showing how to define resource-based autoscaling using CPU utilization as the metric.

LANGUAGE: yaml
CODE:
type: Resource
resource:
  name: cpu
  target:
    type: Utilization
    averageUtilization: 60

----------------------------------------

TITLE: Retrieving Kubernetes Events
DESCRIPTION: This command fetches all events in the Kubernetes cluster.

LANGUAGE: shell
CODE:
kubectl get events

----------------------------------------

TITLE: Setting rkt as Kubernetes Container Runtime
DESCRIPTION: Command to configure the Kubernetes kubelet to use rkt as the container runtime instead of the default Docker.

LANGUAGE: bash
CODE:
kubelet --container-runtime=rkt

----------------------------------------

TITLE: Creating Multiple GKE Clusters Across Regions
DESCRIPTION: Commands to create Kubernetes clusters in 4 different GCP regions using Google Container Engine (GKE)

LANGUAGE: bash
CODE:
gcloud container clusters create gce-asia-east1 \
  --scopes cloud-platform \
  --zone asia-east1-b

gcloud container clusters create gce-europe-west1 \
  --scopes cloud-platform \
  --zone=europe-west1-b

gcloud container clusters create gce-us-east1 \
  --scopes cloud-platform \
  --zone=us-east1-b

gcloud container clusters create gce-us-central1 \
  --scopes cloud-platform \
  --zone=us-central1-b

----------------------------------------

TITLE: Configuring Kubelet Credential Provider in YAML
DESCRIPTION: This YAML configuration file specifies how the kubelet should use the ECR-based credential provider plugin. It defines the plugin name, image matching patterns, cache duration, and API version.

LANGUAGE: yaml
CODE:
apiVersion: kubelet.config.k8s.io/v1
kind: CredentialProviderConfig
providers:
  - name: ecr-credential-provider
    matchImages:
      - "*.dkr.ecr.*.amazonaws.com"
      - "*.dkr.ecr.*.amazonaws.com.cn"
      - "*.dkr.ecr-fips.*.amazonaws.com"
      - "*.dkr.ecr.us-iso-east-1.c2s.ic.gov"
      - "*.dkr.ecr.us-isob-east-1.sc2s.sgov.gov"
    defaultCacheDuration: "12h"
    apiVersion: credentialprovider.kubelet.k8s.io/v1
    env:
      - name: AWS_PROFILE
        value: example_profile

----------------------------------------

TITLE: Defining ValidatingAdmissionPolicies for ResourceClaims and ResourceClaimTemplates
DESCRIPTION: This YAML snippet shows how to create ValidatingAdmissionPolicies and their bindings to restrict the usage of admin access in ResourceClaims and ResourceClaimTemplates.

LANGUAGE: yaml
CODE:
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionPolicy
metadata:
  name: resourceclaim-policy.dra.example.com
spec:
  failurePolicy: Fail
  matchConstraints:
    resourceRules:
    - apiGroups:   ["resource.k8s.io"]
      apiVersions: ["v1alpha3", "v1beta1"]
      operations:  ["CREATE", "UPDATE"]
      resources:   ["resourceclaims"]
  validations:
    - expression: '! object.spec.devices.requests.exists(e, has(e.adminAccess) && e.adminAccess)'
      reason: Forbidden
      messageExpression: '"admin access to devices not enabled"'
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionPolicyBinding
metadata:
  name: resourceclaim-binding.dra.example.com
spec:
  policyName:  resourceclaim-policy.dra.example.com
  validationActions: [Deny]
  matchResources:
    namespaceSelector:
      matchExpressions:
      - key: admin-access.dra.example.com
        operator: DoesNotExist
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionPolicy
metadata:
  name: resourceclaimtemplate-policy.dra.example.com
spec:
  failurePolicy: Fail
  matchConstraints:
    resourceRules:
    - apiGroups:   ["resource.k8s.io"]
      apiVersions: ["v1alpha3", "v1beta1"]
      operations:  ["CREATE", "UPDATE"]
      resources:   ["resourceclaimtemplates"]
  validations:
    - expression: '! object.spec.spec.devices.requests.exists(e, has(e.adminAccess) && e.adminAccess)'
      reason: Forbidden
      messageExpression: '"admin access to devices not enabled"'
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionPolicyBinding
metadata:
  name: resourceclaimtemplate-binding.dra.example.com
spec:
  policyName:  resourceclaimtemplate-policy.dra.example.com
  validationActions: [Deny]
  matchResources:
    namespaceSelector:
      matchExpressions:
      - key: admin-access.dra.example.com
        operator: DoesNotExist

----------------------------------------

TITLE: Applying Pod Security Labels to All Namespaces
DESCRIPTION: Shell commands for applying pod security audit and warning labels to all existing namespaces at the baseline level. Includes a command to list namespaces without explicit enforcement levels.

LANGUAGE: shell
CODE:
kubectl label --dry-run=server --overwrite ns --all \
    pod-security.kubernetes.io/enforce=baseline

LANGUAGE: shell
CODE:
kubectl label --overwrite ns --all \
  pod-security.kubernetes.io/audit=baseline \
  pod-security.kubernetes.io/warn=baseline

LANGUAGE: shell
CODE:
kubectl get namespaces --selector='!pod-security.kubernetes.io/enforce'

----------------------------------------

TITLE: Configuring OpenTelemetry Collector for Kubernetes Trace Collection
DESCRIPTION: This YAML configuration sets up an OpenTelemetry Collector to receive traces from Kubernetes components using the OTLP gRPC protocol and export them to a logging backend.

LANGUAGE: yaml
CODE:
receivers:
  otlp:
    protocols:
      grpc:
exporters:
  # Replace this exporter with the exporter for your backend
  logging:
    logLevel: debug
service:
  pipelines:
    traces:
      receivers: [otlp]
      exporters: [logging]

----------------------------------------

TITLE: Creating a StatefulSet and Headless Service in Kubernetes
DESCRIPTION: This YAML manifest defines a headless Service and a StatefulSet for running NGINX web servers with persistent storage.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Service
metadata:
  name: nginx
  labels:
    app: nginx
spec:
  ports:
  - port: 80
    name: web
  clusterIP: None
  selector:
    app: nginx
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: web
spec:
  serviceName: "nginx"
  replicas: 2
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: registry.k8s.io/nginx-slim:0.8
        ports:
        - containerPort: 80
          name: web
        volumeMounts:
        - name: www
          mountPath: /usr/share/nginx/html
  volumeClaimTemplates:
  - metadata:
      name: www
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1Gi

----------------------------------------

TITLE: Using a Raw Block Device in a Pod YAML
DESCRIPTION: Example YAML definition for a Pod that uses a raw block device, specifying the device path instead of a mount path.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: pod-with-block-volume
spec:
  containers:
    - name: fc-container
      image: fedora:26
      command: ["/bin/sh", "-c"]
      args: [ "tail -f /dev/null" ]
      volumeDevices:
        - name: data
          devicePath: /dev/xvda
  volumes:
    - name: data
      persistentVolumeClaim:
        claimName: block-pvc

----------------------------------------

TITLE: Using a Raw Block Device in a Pod YAML
DESCRIPTION: Example YAML definition for a Pod that uses a raw block device, specifying the device path instead of a mount path.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: pod-with-block-volume
spec:
  containers:
    - name: fc-container
      image: fedora:26
      command: ["/bin/sh", "-c"]
      args: [ "tail -f /dev/null" ]
      volumeDevices:
        - name: data
          devicePath: /dev/xvda
  volumes:
    - name: data
      persistentVolumeClaim:
        claimName: block-pvc

----------------------------------------

TITLE: Setting Kubelet Lock File Path in Bash
DESCRIPTION: Example of setting the kubelet lock file path using the --lock-file command line argument when starting the kubelet process.

LANGUAGE: bash
CODE:
kubelet --lock-file=/var/run/kubelet.lock

----------------------------------------

TITLE: Listing kubectl plugins in Bash
DESCRIPTION: This snippet demonstrates how to use the 'kubectl plugin list' command to list all available plugins or just their binary names.

LANGUAGE: bash
CODE:
# List all available plugins
kubectl plugin list

# List only binary names of available plugins without paths
kubectl plugin list --name-only

----------------------------------------

TITLE: Building Kubernetes Source for Custom Scheduler
DESCRIPTION: Commands to clone and build Kubernetes source code from GitHub repository

LANGUAGE: shell
CODE:
git clone https://github.com/kubernetes/kubernetes.git
cd kubernetes
make

----------------------------------------

TITLE: Creating an SSH Authentication Secret
DESCRIPTION: Example YAML configuration for creating an SSH authentication Secret. This stores an SSH private key for authentication.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Secret
metadata:
  name: secret-ssh-auth
type: kubernetes.io/ssh-auth
data:
  ssh-privatekey: |+
    MIIEpQIBAAKCAQEAulqb/Y...

----------------------------------------

TITLE: Defining Restricted Pod Security Policy in YAML
DESCRIPTION: Example YAML configuration for a Restricted namespace using the Pod Security Admission Controller.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Namespace
metadata:
  name: my-restricted-namespace
  labels:
    pod-security.kubernetes.io/enforce: restricted
    pod-security.kubernetes.io/enforce-version: latest
    pod-security.kubernetes.io/audit: restricted
    pod-security.kubernetes.io/audit-version: latest
    pod-security.kubernetes.io/warn: restricted
    pod-security.kubernetes.io/warn-version: latest

----------------------------------------

TITLE: Querying Node Metrics Using kubectl
DESCRIPTION: Example of retrieving node metrics data using kubectl and jq for formatting. Shows how to access metrics for a specific node named 'minikube'.

LANGUAGE: shell
CODE:
kubectl get --raw "/apis/metrics.k8s.io/v1beta1/nodes/minikube" | jq '.'

----------------------------------------

TITLE: Configuring Pod Security Admission Controller in Kubernetes
DESCRIPTION: This YAML snippet configures the PodSecurity admission controller. It sets default security levels and versions for enforce, audit, and warn modes, and allows specifying exemptions for usernames, runtime classes, and namespaces.

LANGUAGE: yaml
CODE:
apiVersion: apiserver.config.k8s.io/v1
kind: AdmissionConfiguration
plugins:
- name: PodSecurity
  configuration:
    apiVersion: pod-security.admission.config.k8s.io/v1 # see compatibility note
    kind: PodSecurityConfiguration
    # Defaults applied when a mode label is not set.
    #
    # Level label values must be one of:
    # - "privileged" (default)
    # - "baseline"
    # - "restricted"
    #
    # Version label values must be one of:
    # - "latest" (default) 
    # - specific version like "v{{< skew currentVersion >}}"
    defaults:
      enforce: "privileged"
      enforce-version: "latest"
      audit: "privileged"
      audit-version: "latest"
      warn: "privileged"
      warn-version: "latest"
    exemptions:
      # Array of authenticated usernames to exempt.
      usernames: []
      # Array of runtime class names to exempt.
      runtimeClasses: []
      # Array of namespaces to exempt.
      namespaces: []

----------------------------------------

TITLE: Configuring Kube Reserved Resources in KubeletConfiguration
DESCRIPTION: Example configuration for reserving resources for Kubernetes system daemons using kubeReserved setting.

LANGUAGE: yaml
CODE:
kubeReserved:
  cpu: 100m
  memory: 100Mi
  ephemeral-storage: 1Gi
  pid: 1000

----------------------------------------

TITLE: Creating Kustomization Secret Generator for MySQL Password
DESCRIPTION: Creates a kustomization.yaml file with a Secret generator for storing MySQL password. The Secret will be used by both MySQL and WordPress deployments.

LANGUAGE: shell
CODE:
cat <<EOF >./kustomization.yaml
secretGenerator:
- name: mysql-pass
  literals:
  - password=YOUR_PASSWORD
EOF

----------------------------------------

TITLE: Creating ConfigMap for Node Problem Detector
DESCRIPTION: Shell command to create a ConfigMap from configuration files for customizing Node Problem Detector behavior.

LANGUAGE: shell
CODE:
kubectl create configmap node-problem-detector-config --from-file=config/

----------------------------------------

TITLE: Configuring kubectl for User Accounts
DESCRIPTION: Commands to configure kubectl for different user accounts in a Kubernetes cluster.

LANGUAGE: bash
CODE:
KUBECONFIG=<文件名> kubectl config set-cluster default-cluster --server=https://<主机ip>:6443 --certificate-authority <kubernetes-ca路径> --embed-certs
KUBECONFIG=<文件名> kubectl config set-credentials <凭据名称> --client-key <密钥路径>.pem --client-certificate <证书路径>.pem --embed-certs
KUBECONFIG=<文件名> kubectl config set-context default-system --cluster default-cluster --user <凭据名称>
KUBECONFIG=<文件名> kubectl config use-context default-system

----------------------------------------

TITLE: ClusterRole Resource Structure
DESCRIPTION: Defines the core structure of a ClusterRole resource including metadata, aggregation rules and policy rules

LANGUAGE: yaml
CODE:
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: example-cluster-role
aggregationRule:
  clusterRoleSelectors:
    - matchLabels:
        key: value
rules:
- apiGroups: [""] 
  resources: ["pods"]
  verbs: ["get", "list"]
  resourceNames: ["pod-1", "pod-2"]
  nonResourceURLs: ["/api"]

----------------------------------------

TITLE: Kubernetes Extension Points Note Block
DESCRIPTION: A markdown note block explaining webhook terminology in Kubernetes context versus general usage.

LANGUAGE: markdown
CODE:
{{< note >}}
Outside of Kubernetes, the term "webhook" typically refers to a mechanism for asynchronous
notifications, where the webhook call serves as a one-way notification to another system or
component. In the Kubernetes ecosystem, even synchronous HTTP callouts are often
described as "webhooks".
{{< /note >}}

----------------------------------------

TITLE: Configuring recursive read-only mounts in a Pod
DESCRIPTION: This example shows how to configure recursive read-only mounts in a Pod using the recursiveReadOnly field. The container mounts a volume at /mnt with read-only and recursive read-only settings enabled.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: readonly-pod
spec:
  containers:
  - name: container
    image: nginx
    volumeMounts:
    - name: foo
      mountPath: /mnt
      readOnly: true
      recursiveReadOnly: Enabled
  volumes:
  - name: foo
    hostPath:
      path: /foo

----------------------------------------

TITLE: Sample Output of Weave Net Pods Status
DESCRIPTION: This snippet shows the expected output from the kubectl command, displaying the status of Weave Net pods across different nodes in the cluster. Each node should have a running Weave pod with 2/2 readiness.

LANGUAGE: plaintext
CODE:
NAME                                    READY     STATUS    RESTARTS   AGE       IP              NODE
weave-net-1t1qg                         2/2       Running   0          9d        192.168.2.10    worknode3
weave-net-231d7                         2/2       Running   1          7d        10.2.0.17       worknodegpu
weave-net-7nmwt                         2/2       Running   3          9d        192.168.2.131   masternode
weave-net-pmw8w                         2/2       Running   0          9d        192.168.2.216   worknode2

----------------------------------------

TITLE: Granting Permissions to Service Accounts in Kubernetes
DESCRIPTION: Commands to grant permissions to service accounts using RoleBindings and ClusterRoleBindings.

LANGUAGE: shell
CODE:
kubectl create rolebinding my-sa-view \
  --clusterrole=view \
  --serviceaccount=my-namespace:my-sa \
  --namespace=my-namespace

kubectl create rolebinding default-view \
  --clusterrole=view \
  --serviceaccount=my-namespace:default \
  --namespace=my-namespace

kubectl create clusterrolebinding add-on-cluster-admin \
  --clusterrole=cluster-admin \
  --serviceaccount=kube-system:default

kubectl create rolebinding serviceaccounts-view \
  --clusterrole=view \
  --group=system:serviceaccounts:my-namespace \
  --namespace=my-namespace

kubectl create clusterrolebinding serviceaccounts-view \
  --clusterrole=view \
 --group=system:serviceaccounts

kubectl create clusterrolebinding serviceaccounts-cluster-admin \
  --clusterrole=cluster-admin \
  --group=system:serviceaccounts

----------------------------------------

TITLE: Granting Permissions to Service Accounts in Kubernetes
DESCRIPTION: Commands to grant permissions to service accounts using RoleBindings and ClusterRoleBindings.

LANGUAGE: shell
CODE:
kubectl create rolebinding my-sa-view \
  --clusterrole=view \
  --serviceaccount=my-namespace:my-sa \
  --namespace=my-namespace

kubectl create rolebinding default-view \
  --clusterrole=view \
  --serviceaccount=my-namespace:default \
  --namespace=my-namespace

kubectl create clusterrolebinding add-on-cluster-admin \
  --clusterrole=cluster-admin \
  --serviceaccount=kube-system:default

kubectl create rolebinding serviceaccounts-view \
  --clusterrole=view \
  --group=system:serviceaccounts:my-namespace \
  --namespace=my-namespace

kubectl create clusterrolebinding serviceaccounts-view \
  --clusterrole=view \
 --group=system:serviceaccounts

kubectl create clusterrolebinding serviceaccounts-cluster-admin \
  --clusterrole=cluster-admin \
  --group=system:serviceaccounts

----------------------------------------

TITLE: Basic kubectl drain Command
DESCRIPTION: Basic command syntax for draining a Kubernetes node

LANGUAGE: bash
CODE:
kubectl drain NODE

----------------------------------------

TITLE: Creating an SSH Authentication Secret
DESCRIPTION: Example YAML configuration for creating an SSH authentication Secret. This stores an SSH private key for authentication.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Secret
metadata:
  name: secret-ssh-auth
type: kubernetes.io/ssh-auth
data:
  ssh-privatekey: |+
    MIIEpQIBAAKCAQEAulqb/Y...

----------------------------------------

TITLE: Load Balancer Connection Test
DESCRIPTION: Command to test network connectivity to the load balancer from control plane nodes.

LANGUAGE: shell
CODE:
nc -zv -w 2 <LOAD_BALANCER_IP> <PORT>

----------------------------------------

TITLE: Replacing Kubernetes Object from Configuration File
DESCRIPTION: Updates a Kubernetes object using a local configuration file in imperative object configuration approach.

LANGUAGE: shell
CODE:
kubectl replace -f <kind>_<name>.yaml

----------------------------------------

TITLE: Querying DNS for Kubernetes StatefulSet Pods
DESCRIPTION: This code snippet shows how to use the 'dig' command to query DNS for pods created by a StatefulSet in Kubernetes. It demonstrates the stable network identity provided for each pod in the set.

LANGUAGE: bash
CODE:
# service mongo pointing to pods created by PetSet mdb, with identities mdb-1, mdb-2, mdb-3

dig mongodb.namespace.svc.cluster.local +short A
172.130.16.50

dig mdb-1.mongodb.namespace.svc.cluster.local +short A
# IP of pod created for mdb-1

dig mdb-2.mongodb.namespace.svc.cluster.local +short A
# IP of pod created for mdb-2

dig mdb-3.mongodb.namespace.svc.cluster.local +short A
# IP of pod created for mdb-3

----------------------------------------

TITLE: Checking Cluster Information with kubectl
DESCRIPTION: This snippet demonstrates how to verify kubectl configuration by retrieving cluster information. It uses the 'kubectl cluster-info' command to check connectivity to the Kubernetes cluster.

LANGUAGE: shell
CODE:
kubectl cluster-info

----------------------------------------

TITLE: Applying Kubernetes Deployment Configuration
DESCRIPTION: This command applies the Nginx deployment configuration to the Kubernetes cluster.

LANGUAGE: shell
CODE:
kubectl apply -f https://k8s.io/examples/application/nginx-with-request.yaml

----------------------------------------

TITLE: Checking Namespaced Resources
DESCRIPTION: Commands to list Kubernetes resources that are namespaced and not namespaced.

LANGUAGE: shell
CODE:
# In a namespace
kubectl api-resources --namespaced=true

# Not in a namespace
kubectl api-resources --namespaced=false

----------------------------------------

TITLE: Verifying Weave Net Pods in Kubernetes Cluster
DESCRIPTION: This command lists all pods in the kube-system namespace, showing their status and IP addresses. It's used to verify that Weave Net pods are running on each node in the cluster.

LANGUAGE: shell
CODE:
kubectl get pods -n kube-system -o wide

----------------------------------------

TITLE: Kubelet environment file content
DESCRIPTION: This shows the format of the kubelet environment file used to pass additional flags to the kubelet.

LANGUAGE: bash
CODE:
KUBELET_KUBEADM_ARGS="--flag1=value1 --flag2=value2 ..."

----------------------------------------

TITLE: Defining RuntimeService gRPC Interface for CRI in Protobuf
DESCRIPTION: This snippet defines the RuntimeService gRPC interface for the Container Runtime Interface (CRI). It includes methods for managing pod sandboxes and containers, such as creating, starting, stopping, and removing them.

LANGUAGE: protobuf
CODE:
service RuntimeService {

    // Sandbox operations.

    rpc RunPodSandbox(RunPodSandboxRequest) returns (RunPodSandboxResponse) {}  
    rpc StopPodSandbox(StopPodSandboxRequest) returns (StopPodSandboxResponse) {}  
    rpc RemovePodSandbox(RemovePodSandboxRequest) returns (RemovePodSandboxResponse) {}  
    rpc PodSandboxStatus(PodSandboxStatusRequest) returns (PodSandboxStatusResponse) {}  
    rpc ListPodSandbox(ListPodSandboxRequest) returns (ListPodSandboxResponse) {}  

    // Container operations.  
    rpc CreateContainer(CreateContainerRequest) returns (CreateContainerResponse) {}  
    rpc StartContainer(StartContainerRequest) returns (StartContainerResponse) {}  
    rpc StopContainer(StopContainerRequest) returns (StopContainerResponse) {}  
    rpc RemoveContainer(RemoveContainerRequest) returns (RemoveContainerResponse) {}  
    rpc ListContainers(ListContainersRequest) returns (ListContainersResponse) {}  
    rpc ContainerStatus(ContainerStatusRequest) returns (ContainerStatusResponse) {}

    ...  
}

----------------------------------------

TITLE: Container Shell Navigation Commands
DESCRIPTION: Common shell commands for exploring and managing the container environment.

LANGUAGE: shell
CODE:
ls /
cat /proc/mounts
cat /proc/1/maps
apt-get update
apt-get install -y tcpdump
tcpdump
apt-get install -y lsof
lsof
apt-get install -y procps
ps aux
ps aux | grep nginx

----------------------------------------

TITLE: Adding Certificate Parameters to Kubernetes API Server
DESCRIPTION: This snippet shows the parameters that need to be added to the Kubernetes API server start parameters to use the generated certificates.

LANGUAGE: shell
CODE:
--client-ca-file=/yourdirectory/ca.crt
--tls-cert-file=/yourdirectory/server.crt
--tls-private-key-file=/yourdirectory/server.key

----------------------------------------

TITLE: Editing kubeadm-config ConfigMap
DESCRIPTION: Command to edit the kubeadm-config ConfigMap in the kube-system namespace, which contains the ClusterConfiguration.

LANGUAGE: shell
CODE:
kubectl edit cm -n kube-system kubeadm-config

----------------------------------------

TITLE: Creating a Certificate Authority with CFSSL
DESCRIPTION: This snippet shows how to create a Certificate Authority using CFSSL. It generates a CA key and certificate that can be used for signing CSRs.

LANGUAGE: bash
CODE:
cat <<EOF | cfssl gencert -initca - | cfssljson -bare ca
{
  "CN": "My Example Signer",
  "key": {
    "algo": "rsa",
    "size": 2048
  }
}
EOF

----------------------------------------

TITLE: Guaranteed Pod Configuration with Fractional CPU in YAML
DESCRIPTION: YAML configuration for an nginx pod that runs in Guaranteed QoS class with equal requests and limits using fractional CPU allocation.

LANGUAGE: yaml
CODE:
spec:
  containers:
  - name: nginx
    image: nginx
    resources:
      limits:
        memory: "200Mi"
        cpu: "300m"
        example.com/device: "1"
      requests:
        memory: "200Mi"
        cpu: "300m"
        example.com/device: "1"

----------------------------------------

TITLE: Configuring CRI-O to Use conmon-rs
DESCRIPTION: This TOML configuration snippet sets up CRI-O to use conmon-rs as the container monitor, which enables OpenTelemetry support.

LANGUAGE: toml
CODE:
[crio.runtime]
default_runtime = "runc"

[crio.runtime.runtimes.runc]
runtime_type = "pod"
monitor_path = "/path/to/conmonrs" # or will be looked up in $PATH

----------------------------------------

TITLE: Role Resource Structure
DESCRIPTION: Core structure of a Role resource showing metadata and rules fields. Rules contain PolicyRules that define allowed operations.

LANGUAGE: yaml
CODE:
metadata:
  # Standard object metadata
rules:
  - apiGroups: ["*"] # API groups containing resources
    resources: ["*"] # Resource types in the API groups
    verbs: ["*"]     # Allowed operations
    resourceNames: [] # Optional specific resource names
    nonResourceURLs: [] # Optional non-resource URL paths

----------------------------------------

TITLE: Basic kubectl edit Command Syntax
DESCRIPTION: The basic syntax for editing Kubernetes resources using kubectl edit command.

LANGUAGE: bash
CODE:
kubectl edit (RESOURCE/NAME | -f FILENAME)

----------------------------------------

TITLE: Listing etcd Members in Shell
DESCRIPTION: Command to list etcd cluster members using etcdctl.

LANGUAGE: shell
CODE:
etcdctl --endpoints=http://10.0.0.2,http://10.0.0.3 member list

----------------------------------------

TITLE: Applying Pod Manifest with Required Node Affinity
DESCRIPTION: This command applies a pod manifest that uses required node affinity to schedule the pod on a node with the 'disktype=ssd' label.

LANGUAGE: shell
CODE:
kubectl apply -f https://k8s.io/examples/pods/pod-nginx-required-affinity.yaml

----------------------------------------

TITLE: Creating a Service
DESCRIPTION: Example of creating a Service using Go client

LANGUAGE: go
CODE:
service := &corev1.Service{
  ObjectMeta: metav1.ObjectMeta{
    Name: "my-service",
  },
  Spec: corev1.ServiceSpec{
    Selector: map[string]string{
      "app": "MyApp",
    },
    Ports: []corev1.ServicePort{
      {
        Protocol: corev1.ProtocolTCP,
        Port:     80,
        TargetPort: intstr.FromInt(9376),
      },
    },
  },
}

createdService, err := client.CoreV1().Services(namespace).Create(context.TODO(), service, metav1.CreateOptions{})

----------------------------------------

TITLE: Checking Node IP Addresses in Kubernetes
DESCRIPTION: This command retrieves the IP addresses assigned to a specific node in a dual-stack Kubernetes cluster. It shows how to verify both internal IPv4 and IPv6 addresses.

LANGUAGE: shell
CODE:
kubectl get nodes k8s-linuxpool1-34450317-0 -o go-template --template='{{range .status.addresses}}{{printf "%s: %s\n" .type .address}}{{end}}'

----------------------------------------

TITLE: Updating Airflow DAG with New Docker Image Version
DESCRIPTION: This snippet shows how to update an Airflow DAG to use a new version of a Docker image for a production task. It demonstrates how to integrate CI/CD workflows with Airflow and Kubernetes.

LANGUAGE: Python
CODE:
production_task = KubernetesPodOperator(namespace='default',
                          # image="my-production-job:release-1.0.1", <-- old release
                          image="my-production-job:release-1.0.2",
                          cmds=["Python","-c"],
                          arguments=["print('hello world')"],
                          name="fail",
                          task_id="failing-task",
                          get_logs=True,
                          dag=dag
                          )

----------------------------------------

TITLE: Defining Role for Prometheus in Kubernetes YAML
DESCRIPTION: This YAML snippet defines a Role for a Prometheus instance, granting it permissions to monitor services, endpoints, and pods in the 'dev' namespace. It demonstrates how to create application-specific RBAC roles.

LANGUAGE: yaml
CODE:
kind: Role
metadata:
  name: prometheus-role
  namespace: dev
rules:
- apiGroups: [""] # "" refers to the core API group
  Resources: ["services", "endpoints", "pods"]
  verbs: ["get", "list", "watch"]

----------------------------------------

TITLE: Get Pod Information
DESCRIPTION: Retrieve details about a specific Pod by name in a namespace.

LANGUAGE: Go
CODE:
GET /api/v1/namespaces/{namespace}/pods/{name}

----------------------------------------

TITLE: Reverting PodSecurityPolicy Bypass
DESCRIPTION: This command removes the RoleBinding that was used to bypass PodSecurityPolicy in a namespace.

LANGUAGE: sh
CODE:
# Undo PodSecurityPolicy disablement.
kubectl delete -n $NAMESPACE rolebinding disable-psp

----------------------------------------

TITLE: Verifying Pod IP Addresses in Kubernetes
DESCRIPTION: This command retrieves the IP addresses assigned to a specific pod in a dual-stack Kubernetes cluster. It demonstrates how to check both IPv4 and IPv6 addresses for a pod.

LANGUAGE: shell
CODE:
kubectl get pods pod01 -o go-template --template='{{range .status.podIPs}}{{printf "%s\n" .ip}}{{end}}'

----------------------------------------

TITLE: Setting StorageClass as Default
DESCRIPTION: Command to mark a StorageClass as default by setting the storageclass.kubernetes.io/is-default-class annotation to true.

LANGUAGE: bash
CODE:
kubectl patch storageclass gold -p '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"true"}}}'

----------------------------------------

TITLE: Reverting PodSecurityPolicy Bypass
DESCRIPTION: This command removes the RoleBinding that was used to bypass PodSecurityPolicy in a namespace.

LANGUAGE: sh
CODE:
# Undo PodSecurityPolicy disablement.
kubectl delete -n $NAMESPACE rolebinding disable-psp

----------------------------------------

TITLE: Basic NetworkPolicy Example
DESCRIPTION: Sample NetworkPolicy that isolates pods with label 'role=db' and allows specific ingress/egress traffic

LANGUAGE: yaml
CODE:
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: test-network-policy
  namespace: default
spec:
  podSelector:
    matchLabels:
      role: db
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - ipBlock:
        cidr: 172.17.0.0/16
        except:
        - 172.17.1.0/24
    - namespaceSelector:
        matchLabels:
          project: myproject
    - podSelector:
        matchLabels:
          role: frontend
    ports:
    - protocol: TCP
      port: 6379
  egress:
  - to:
    - ipBlock:
        cidr: 10.0.0.0/24
    ports:
    - protocol: TCP
      port: 5978

----------------------------------------

TITLE: Generating Pod-affiliated Kubernetes Events in Go
DESCRIPTION: Generates Kubernetes Events associated with specific pods. Gets a reference to the pod and creates a warning event with custom error message regarding PKI service name validation.

LANGUAGE: golang
CODE:
ref, err := reference.GetReference(scheme.Scheme, &pod)
if err != nil {
   glog.Fatalf("Could not get reference for pod %v: %v\n",
      pod.Name, err)
}
recorder.Event(ref, v1.EventTypeWarning, "pki ServiceName error",
   fmt.Sprintf("ServiceName: %s in pki: %s is not found in"+
      " allowedNames: %s", pki.Spec.ServiceName, pki.Name,
      allowedNames))

----------------------------------------

TITLE: Creating a Guaranteed QoS Pod in Kubernetes
DESCRIPTION: This command applies the YAML manifest to create a Pod with Guaranteed QoS class in the 'qos-example' namespace.

LANGUAGE: shell
CODE:
kubectl apply -f https://k8s.io/examples/pods/qos/qos-pod.yaml --namespace=qos-example

----------------------------------------

TITLE: Defining a New VolumeAttributesClass in Kubernetes
DESCRIPTION: YAML configuration for creating a new VolumeAttributesClass named 'gold' with different storage parameters.

LANGUAGE: yaml
CODE:
apiVersion: storage.k8s.io/v1beta1
kind: VolumeAttributesClass
metadata:
  name: gold
driverName: pd.csi.storage.gke.io
parameters:
  iops: "4000"
  throughput: "60"

----------------------------------------

TITLE: Using a Raw Block Device in a Kubernetes Pod YAML
DESCRIPTION: This YAML shows how to use a raw block device in a Pod specification, referencing a Persistent Volume Claim.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: pod-with-block-volume
spec:
  containers:
    - name: fc-container
      image: fedora:26
      command: ["/bin/sh", "-c"]
      args: [ "tail -f /dev/null" ]
      volumeDevices:
        - name: data
          devicePath: /dev/xvda
  volumes:
    - name: data
      persistentVolumeClaim:
        claimName: block-pvc

----------------------------------------

TITLE: Checking Verbose Health Status in Kubernetes API
DESCRIPTION: Example command showing how to check the verbose health status of the Kubernetes API server's livez endpoint locally using curl.

LANGUAGE: shell
CODE:
curl -k https://localhost:6443/livez?verbose

----------------------------------------

TITLE: Service Account Deployment Deletion Authorization with CEL
DESCRIPTION: CEL expression using the authorizer library to check if a service account is authorized to delete deployments.

LANGUAGE: CEL
CODE:
authorizer.serviceAccount('default', 'myserviceaccount').resource('deployments').check('delete').allowed()

----------------------------------------

TITLE: Starting Single-Node etcd Cluster in Shell
DESCRIPTION: Command to start a single-node etcd cluster for testing purposes, listening on a private IP address.

LANGUAGE: sh
CODE:
etcd --listen-client-urls=http://$PRIVATE_IP:2379 \
   --advertise-client-urls=http://$PRIVATE_IP:2379

----------------------------------------

TITLE: Defining a Pod with CPU Request Conflicting with LimitRange in Kubernetes YAML
DESCRIPTION: This YAML snippet defines a Pod that requests 700m CPU, which conflicts with the LimitRange defined earlier. This Pod will fail to be scheduled due to the conflict.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: example-conflict-with-limitrange-cpu
spec:
  containers:
  - name: demo
    image: registry.k8s.io/pause:2.0
    resources:
      requests:
        cpu: 700m

----------------------------------------

TITLE: Patching StatefulSets Using kubectl in Kubernetes
DESCRIPTION: This command patches a StatefulSet to update the number of replicas using kubectl.

LANGUAGE: shell
CODE:
kubectl patch statefulsets <stateful-set-name> -p '{"spec":{"replicas":<new-replicas>}}'

----------------------------------------

TITLE: Creating ClusterRoleBinding for User Access in Kubernetes
DESCRIPTION: This snippet demonstrates how to create a ClusterRoleBinding to grant a user named 'jane' edit permissions across the entire cluster. It also shows how to verify the permissions using kubectl commands.

LANGUAGE: bash
CODE:
$ kubectl create clusterrolebinding jane --clusterrole=edit --user=jane

$ kubectl get namespaces --as=jane

NAME          STATUS    AGE

default       Active    43m

kube-public   Active    43m

kube-system   Active    43m

$ kubectl auth can-i create deployments --namespace=dev --as=jane

yes

----------------------------------------

TITLE: Defining a Kubernetes Pod with Puppet DSL
DESCRIPTION: This snippet demonstrates how to define a Kubernetes Pod using Puppet's Domain Specific Language. It specifies the Pod's metadata and container specifications.

LANGUAGE: puppet
CODE:
kubernetes_pod { 'sample-pod':
  ensure => present,
  metadata => {
    namespace => 'default',
  },
  spec => {
    containers => [{
      name => 'container-name',
      image => 'nginx',
    }]
  },
}

----------------------------------------

TITLE: Accessing Kubernetes Dashboard via kubectl port-forward
DESCRIPTION: Command to enable access to the Kubernetes Dashboard using kubectl port-forward. This makes the dashboard available at https://localhost:8443.

LANGUAGE: shell
CODE:
kubectl -n kubernetes-dashboard port-forward svc/kubernetes-dashboard-kong-proxy 8443:443

----------------------------------------

TITLE: Verifying etcd Snapshot with etcdctl in Shell (Deprecated)
DESCRIPTION: Deprecated command to verify the status of an etcd snapshot using etcdctl.

LANGUAGE: shell
CODE:
export ETCDCTL_API=3
etcdctl --write-out=table snapshot status snapshot.db

----------------------------------------

TITLE: Configuring cgroupfs Driver for CRI-O
DESCRIPTION: This TOML configuration snippet shows how to set the cgroup driver to cgroupfs for CRI-O. This should be added to the CRI-O configuration file or a drop-in configuration.

LANGUAGE: toml
CODE:
[crio.runtime]
conmon_cgroup = "pod"
cgroup_manager = "cgroupfs"

----------------------------------------

TITLE: Replace Pod Configuration
DESCRIPTION: Replace the configuration of an existing Pod.

LANGUAGE: Go
CODE:
PUT /api/v1/namespaces/{namespace}/pods/{name}

----------------------------------------

TITLE: Creating Resources from YAML in Go E2E Tests
DESCRIPTION: Example of how to create Kubernetes resources from YAML files in E2E tests using new framework methods added in Kubernetes 1.13.

LANGUAGE: Go
CODE:
items, err := framework.LoadYAML("test/e2e/testing-manifests/storage-csi/mock/csi-mock-driver.yaml")
for _, item := range items {
  _, err = framework.CreateKubeNamespaceObject(f.ClientSet, item)
  framework.ExpectNoError(err)
}

----------------------------------------

TITLE: Generating Server Certificate and Key with easyrsa for Kubernetes
DESCRIPTION: This command generates the server certificate and key using easyrsa. It sets subject alternative names for various IPs and DNS names the API server will be accessed with.

LANGUAGE: shell
CODE:
./easyrsa --subject-alt-name="IP:${MASTER_IP},"
"IP:${MASTER_CLUSTER_IP},"
"DNS:kubernetes,"
"DNS:kubernetes.default,"
"DNS:kubernetes.default.svc,"
"DNS:kubernetes.default.svc.cluster,"
"DNS:kubernetes.default.svc.cluster.local" \
--days=10000 \
build-server-full server nopass

----------------------------------------

TITLE: Displaying Kubernetes Service Information
DESCRIPTION: Shell command to display detailed information about the created Service.

LANGUAGE: shell
CODE:
kubectl describe services example-service

----------------------------------------

TITLE: Creating and Exposing an Nginx Deployment with kubectl
DESCRIPTION: This snippet shows how to create an Nginx deployment using kubectl, set environment variables, and expose it as a service.

LANGUAGE: shell
CODE:
kubectl create deployment --image=nginx nginx-app

LANGUAGE: shell
CODE:
kubectl set env deployment/nginx-app  DOMAIN=cluster

LANGUAGE: shell
CODE:
kubectl expose deployment nginx-app --port=80 --name=nginx-http

----------------------------------------

TITLE: Signing Certificate Signing Requests
DESCRIPTION: This bash script signs all Certificate Signing Requests (CSRs) in the /etc/kubernetes directory.

LANGUAGE: bash
CODE:
#!/bin/bash

# Set certificate expiration time in days
DAYS=365

# Process all CSR files except those for front-proxy and etcd
find ./ -name "*.csr" | grep -v "pki/etcd" | grep -v "front-proxy" | while read -r FILE;
do
    echo "* Processing ${FILE} ..."
    FILE=${FILE%.*} # Trim the extension
    if [ -f "./pki/ca.srl" ]; then
        SERIAL_FLAG="-CAserial ./pki/ca.srl"
    else
        SERIAL_FLAG="-CAcreateserial"
    fi
    openssl x509 -req -days "${DAYS}" -CA ./pki/ca.crt -CAkey ./pki/ca.key ${SERIAL_FLAG} \
        -in "${FILE}.csr" -out "${FILE}.crt"
    sleep 2
done

# Process all etcd CSRs
find ./pki/etcd -name "*.csr" | while read -r FILE;
do
    echo "* Processing ${FILE} ..."
    FILE=${FILE%.*} # Trim the extension
    if [ -f "./pki/etcd/ca.srl" ]; then
        SERIAL_FLAG=-CAserial ./pki/etcd/ca.srl
    else
        SERIAL_FLAG=-CAcreateserial
    fi
    openssl x509 -req -days "${DAYS}" -CA ./pki/etcd/ca.crt -CAkey ./pki/etcd/ca.key ${SERIAL_FLAG} \
        -in "${FILE}.csr" -out "${FILE}.crt"
done

# Process front-proxy CSRs
echo "* Processing ./pki/front-proxy-client.csr ..."
openssl x509 -req -days "${DAYS}" -CA ./pki/front-proxy-ca.crt -CAkey ./pki/front-proxy-ca.key -CAcreateserial \
    -in ./pki/front-proxy-client.csr -out ./pki/front-proxy-client.crt

----------------------------------------

TITLE: Marking StorageClass as Non-Default
DESCRIPTION: Command to remove the default status from a StorageClass by setting the storageclass.kubernetes.io/is-default-class annotation to false.

LANGUAGE: bash
CODE:
kubectl patch storageclass standard -p '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"false"}}}'

----------------------------------------

TITLE: HPA Scale Down Policy Configuration
DESCRIPTION: YAML configuration demonstrating how to configure scaling policies for reducing pod replicas.

LANGUAGE: yaml
CODE:
behavior:
  scaleDown:
    policies:
    - type: Pods
      value: 4
      periodSeconds: 60
    - type: Percent
      value: 10
      periodSeconds: 60

----------------------------------------

TITLE: Initializing Kubernetes Event Recorder in Go
DESCRIPTION: Sets up a Kubernetes Event recorder that can be used to post Events to different object lifecycles. Creates an event broadcaster and configures it to log events and record them to the Kubernetes API server.

LANGUAGE: golang
CODE:
// eventRecorder returns an EventRecorder type that can be
// used to post Events to different object's lifecycles.
func eventRecorder(
   kubeClient *kubernetes.Clientset) (record.EventRecorder, error) {
   eventBroadcaster := record.NewBroadcaster()
   eventBroadcaster.StartLogging(glog.Infof)
   eventBroadcaster.StartRecordingToSink(
      &typedcorev1.EventSinkImpl{
         Interface: kubeClient.CoreV1().Events("")})
   recorder := eventBroadcaster.NewRecorder(
      scheme.Scheme,
      v1.EventSource{Component: "controlplane"})
   return recorder, nil
}

----------------------------------------

TITLE: Defining KubeletCrashLoopBackOffMax Feature Gate in YAML
DESCRIPTION: YAML configuration for the KubeletCrashLoopBackOffMax feature gate. It specifies the feature name, content type, build instructions, and feature stages including its default value and version information.

LANGUAGE: yaml
CODE:
---
title: KubeletCrashLoopBackOffMax
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha
    defaultValue: false
    fromVersion: "1.32"
---

----------------------------------------

TITLE: Configuring Service Isolation with MismatchLabelKeys in Kubernetes
DESCRIPTION: This YAML snippet illustrates how to use matchLabelKeys and mismatchLabelKeys for service isolation in Kubernetes. It ensures that pods from the same tenant are placed on the same node pool, while pods from different tenants are placed on separate node pools.

LANGUAGE: yaml
CODE:
affinity:
  podAffinity:      # ensures the pods of this tenant land on the same node pool
    requiredDuringSchedulingIgnoredDuringExecution:
    - matchLabelKeys:
        - tenant
      topologyKey: node-pool
  podAntiAffinity:  # ensures only Pods from this tenant lands on the same node pool
    requiredDuringSchedulingIgnoredDuringExecution:
    - mismatchLabelKeys:
        - tenant
      labelSelector:
        matchExpressions:
        - key: tenant
          operator: Exists
      topologyKey: node-pool

----------------------------------------

TITLE: Creating and Patching Kubernetes Deployment
DESCRIPTION: Example of creating a Deployment with two replicas and patching it to add a Redis container alongside the existing nginx container.

LANGUAGE: yaml
CODE:
spec:
  template:
    spec:
      containers:
      - name: patch-demo-ctr-2
        image: redis

LANGUAGE: shell
CODE:
kubectl patch deployment patch-demo --patch-file patch-file.yaml

----------------------------------------

TITLE: Terminating a Process in Kubernetes Pod
DESCRIPTION: This command demonstrates how to manually terminate a process (in this case, the Redis server) within the Container using the 'kill' command.

LANGUAGE: shell
CODE:
root@redis:/data/redis# kill <pid>

----------------------------------------

TITLE: Declarative HorizontalPodAutoscaler Creation in Kubernetes
DESCRIPTION: YAML manifest to create a HorizontalPodAutoscaler declaratively, specifying the target deployment, min/max replicas, and CPU utilization target.

LANGUAGE: YAML
CODE:
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: php-apache
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: php-apache
  minReplicas: 1
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 50

----------------------------------------

TITLE: Configuring kubelet for User Namespace
DESCRIPTION: Kubelet configuration for running in a user namespace, enabling the KubeletInUserNamespace feature gate and setting the cgroup driver to cgroupfs.

LANGUAGE: yaml
CODE:
apiVersion: kubelet.config.k8s.io/v1beta1
kind: KubeletConfiguration
featureGates:
  KubeletInUserNamespace: true
cgroupDriver: "cgroupfs"

----------------------------------------

TITLE: Kubeadm Join Control Plane Prepare Phase
DESCRIPTION: Command for preparing a node to serve as a control-plane component in the cluster.

LANGUAGE: markdown
CODE:
kubeadm join phase control-plane-prepare

----------------------------------------

TITLE: Starting Minikube with default driver
DESCRIPTION: This command starts Minikube using the default driver (KVM2 if set in the previous step).

LANGUAGE: shell
CODE:
minikube start

----------------------------------------

TITLE: Annotating Productpage Service for Ingress
DESCRIPTION: Command to add an annotation to the productpage service for proper load balancing.

LANGUAGE: bash
CODE:
$ kubectl annotate service productpage ingress.kubernetes.io/service-upstream=true

----------------------------------------

TITLE: Accessing Kubernetes API using Go client library
DESCRIPTION: This snippet demonstrates how to use the official Go client library to connect to the Kubernetes API from within a pod. The rest.InClusterConfig() function handles API host discovery and authentication automatically.

LANGUAGE: go
CODE:
// See example at https://git.k8s.io/client-go/examples/in-cluster-client-configuration/main.go

----------------------------------------

TITLE: Defining a BestEffort QoS Pod in Kubernetes YAML
DESCRIPTION: This YAML manifest defines a Pod with one Container that has no resource requests or limits specified, resulting in a BestEffort QoS class.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: qos-demo-3
  namespace: qos-example
spec:
  containers:
  - name: qos-demo-3-ctr
    image: nginx

----------------------------------------

TITLE: Verifying Kubernetes Repository for CentOS/RHEL/Fedora
DESCRIPTION: This command displays the contents of the Kubernetes yum repository configuration file to verify if the community-owned package repository is being used.

LANGUAGE: shell
CODE:
cat /etc/yum.repos.d/kubernetes.repo

----------------------------------------

TITLE: Creating Basic ClusterIP Service - Kubernetes CLI
DESCRIPTION: Basic command syntax for creating a ClusterIP service with specified name and port mappings.

LANGUAGE: bash
CODE:
kubectl create service clusterip NAME [--tcp=<port>:<targetPort>] [--dry-run=server|client|none]

----------------------------------------

TITLE: Approving Kubernetes CertificateSigningRequest
DESCRIPTION: Manually approve the submitted CertificateSigningRequest using kubectl.

LANGUAGE: shell
CODE:
kubectl certificate approve myuser

----------------------------------------

TITLE: Configuring Pod Priority-based Graceful Node Shutdown in YAML
DESCRIPTION: YAML configuration for kubelet specifying shutdown grace periods by pod priority class values. This allows for more granular control over pod termination during node shutdown.

LANGUAGE: yaml
CODE:
shutdownGracePeriodByPodPriority:
  - priority: 100000
    shutdownGracePeriodSeconds: 10
  - priority: 10000
    shutdownGracePeriodSeconds: 180
  - priority: 1000
    shutdownGracePeriodSeconds: 120
  - priority: 0
    shutdownGracePeriodSeconds: 60

----------------------------------------

TITLE: Creating a Role for Grantor Permissions in Kubernetes RBAC
DESCRIPTION: YAML definitions for a ClusterRole and RoleBinding that allow a user to grant admin, edit, and view roles in a specific namespace.

LANGUAGE: yaml
CODE:
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: role-grantor
rules:
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["rolebindings"]
  verbs: ["create"]
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["clusterroles"]
  verbs: ["bind"]
  # omit resourceNames to allow binding any ClusterRole
  resourceNames: ["admin","edit","view"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: role-grantor-binding
  namespace: user-1-namespace
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: role-grantor
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: User
  name: user-1

----------------------------------------

TITLE: HorizontalPodAutoscalerSpec Definition
DESCRIPTION: Defines the specification for a HorizontalPodAutoscaler, including target resource and scaling parameters.

LANGUAGE: go
CODE:
type HorizontalPodAutoscalerSpec struct {
  ScaleTargetRef CrossVersionObjectReference `json:"scaleTargetRef"`
  MinReplicas *int32 `json:"minReplicas,omitempty"`
  MaxReplicas int32 `json:"maxReplicas"`
  TargetCPUUtilizationPercentage *int32 `json:"targetCPUUtilizationPercentage,omitempty"`
}

----------------------------------------

TITLE: Creating Kubernetes Namespace
DESCRIPTION: Command to create a new namespace for resource quota testing

LANGUAGE: shell
CODE:
kubectl create namespace quota-mem-cpu-example

----------------------------------------

TITLE: Creating Pods with Different Schedulers
DESCRIPTION: Commands to create pods using different scheduler configurations

LANGUAGE: shell
CODE:
kubectl create -f pod1.yaml
kubectl create -f pod2.yaml
kubectl create -f pod3.yaml

----------------------------------------

TITLE: Creating an IPv6 SingleStack Service in Kubernetes
DESCRIPTION: This YAML configuration creates a Kubernetes Service with IPv6 as the primary IP family. It shows how to explicitly set the IP family for a service in a dual-stack cluster.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Service
metadata:
  name: my-service
spec:
  ipFamilies:
    - IPv6
  selector:
    app.kubernetes.io/name: MyApp
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80

----------------------------------------

TITLE: Creating Basic PersistentVolumeClaim in Kubernetes
DESCRIPTION: Example of creating a basic PVC without specifying a storage class, which will use the default storage class if configured.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mypvc
  namespace: testns
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi

----------------------------------------

TITLE: Applying ResourceQuota Configuration
DESCRIPTION: Apply a ResourceQuota configuration to limit the number of Pods in the namespace.

LANGUAGE: shell
CODE:
kubectl apply -f https://k8s.io/examples/admin/resource/quota-pod.yaml --namespace=quota-pod-example

----------------------------------------

TITLE: Creating a Pod with Labels in YAML
DESCRIPTION: This YAML snippet demonstrates how to create a Pod with two labels: 'environment: production' and 'app: nginx'.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: label-demo
  labels:
    environment: production
    app: nginx
spec:
  containers:
  - name: nginx
    image: nginx:1.14.2
    ports:
    - containerPort: 80

----------------------------------------

TITLE: Configuring Kubernetes Blog Menu Item in YAML
DESCRIPTION: YAML front matter for setting up the Kubernetes blog section in the website's main menu. It defines the title, link title, and weight for positioning the blog item in the menu structure.

LANGUAGE: yaml
CODE:
---
title: Kubernetes Blog
linkTitle: Blog
menu:
  main:
    title: "Blog"
    weight: 20
---

----------------------------------------

TITLE: Basic LoadBalancer Service Configuration in YAML
DESCRIPTION: Minimal YAML configuration to create a Service with external load balancer type. Defines a service that exposes port 8765 and targets port 9376.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Service
metadata:
  name: example-service
spec:
  selector:
    app: example
  ports:
    - port: 8765
      targetPort: 9376
  type: LoadBalancer

----------------------------------------

TITLE: List Index Validation with CEL
DESCRIPTION: CEL expression using the list library to require that the first name in a list is a specific value.

LANGUAGE: CEL
CODE:
names.indexOf('should-be-first') == 1

----------------------------------------

TITLE: RoleBinding PUT Request
DESCRIPTION: HTTP request to replace an existing RoleBinding in a namespace.

LANGUAGE: http
CODE:
PUT /apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings/{name}

----------------------------------------

TITLE: Quantity Less Than Check with CEL
DESCRIPTION: CEL expression using the quantity library to test if a quantity is less than another.

LANGUAGE: CEL
CODE:
quantity("50M").isLessThan(quantity("100M"))

----------------------------------------

TITLE: PersistentVolumeClaim Basic Structure
DESCRIPTION: Example showing the basic structure of a PersistentVolumeClaim resource with metadata and spec fields

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: my-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

----------------------------------------

TITLE: Defining StorageClass API Version and Kind
DESCRIPTION: Specifies the API version and kind for StorageClass resources.

LANGUAGE: yaml
CODE:
apiVersion: storage.k8s.io/v1
kind: StorageClass

----------------------------------------

TITLE: Deploying Hello World Application
DESCRIPTION: Commands to create and expose a deployment running a hello-world application.

LANGUAGE: shell
CODE:
kubectl create deployment web --image=gcr.io/google-samples/hello-app:1.0
kubectl expose deployment web --type=NodePort --port=8080

----------------------------------------

TITLE: Creating Basic ClusterIP Service - Kubernetes CLI
DESCRIPTION: Basic command syntax for creating a ClusterIP service with specified name and port mappings.

LANGUAGE: bash
CODE:
kubectl create service clusterip NAME [--tcp=<port>:<targetPort>] [--dry-run=server|client|none]

----------------------------------------

TITLE: Accessing Init Container Status Programmatically
DESCRIPTION: Command to retrieve init container statuses in JSON format using a template.

LANGUAGE: shell
CODE:
kubectl get pod nginx --template '{{.status.initContainerStatuses}}'

----------------------------------------

TITLE: Defining ClusterQueue Resource Quotas
DESCRIPTION: YAML configuration for creating a ClusterQueue that defines CPU resource quotas for both ondemand and spot instance types.

LANGUAGE: yaml
CODE:
apiVersion: kueue.x-k8s.io/v1alpha2
kind: ClusterQueue
metadata:
  name: research-pool
spec:
  namespaceSelector: {}
  resources:
  - name: "cpu"
    flavors:
    - name: ondemand
      quota:
        min: 1000
    - name: spot
      quota:
        min: 2000

----------------------------------------

TITLE: Creating a Gateway Resource in Kubernetes
DESCRIPTION: This YAML snippet shows how to define a minimal Gateway resource, which describes an instance of traffic handling infrastructure listening for HTTP traffic on port 80.

LANGUAGE: yaml
CODE:
apiVersion: gateway.networking.k8s.io/v1
kind: Gateway
metadata:
  name: example-gateway
spec:
  gatewayClassName: example-class
  listeners:
  - name: http
    protocol: HTTP
    port: 80

----------------------------------------

TITLE: Creating a Kubernetes Secret from Raw Data using kubectl
DESCRIPTION: This command creates a Secret named 'db-user-pass' with username 'admin' and password 'S!B\*d$zDsb='. It demonstrates how to use the --from-literal flag and escape special characters in the command line.

LANGUAGE: shell
CODE:
kubectl create secret generic db-user-pass \
    --from-literal=username=admin \
    --from-literal=password='S!B\*d$zDsb='

----------------------------------------

TITLE: Configuring Name-based Virtual Hosting in Ingress YAML
DESCRIPTION: YAML configuration for an Ingress using name-based virtual hosting, routing traffic to different services based on the requested hostname.

LANGUAGE: yaml
CODE:
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: name-virtual-host-ingress
spec:
  rules:
  - host: foo.bar.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: service1
            port:
              number: 80
  - host: bar.foo.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: service2
            port:
              number: 80

----------------------------------------

TITLE: Sample Admission Controller Configuration
DESCRIPTION: Example code demonstrating basic security configurations like AppArmor profiles and seccomp settings

LANGUAGE: yaml
CODE:
automountServiceAccountToken: false
securityContext:
  runAsUser: 1000
  runAsGroup: 3000
  fsGroup: 2000

----------------------------------------

TITLE: Defining VolumeCapacityPriority Feature Gate Configuration in YAML
DESCRIPTION: YAML configuration for the VolumeCapacityPriority feature gate, specifying its stage, default value, and version information. This feature gate controls node prioritization based on available PV capacity.

LANGUAGE: yaml
CODE:
---
title: VolumeCapacityPriority
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.21"
---

----------------------------------------

TITLE: Defining VolumeCapacityPriority Feature Gate Configuration in YAML
DESCRIPTION: YAML configuration for the VolumeCapacityPriority feature gate, specifying its stage, default value, and version information. This feature gate controls node prioritization based on available PV capacity.

LANGUAGE: yaml
CODE:
---
title: VolumeCapacityPriority
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.21"
---

----------------------------------------

TITLE: Defining VolumeCapacityPriority Feature Gate Configuration in YAML
DESCRIPTION: YAML configuration for the VolumeCapacityPriority feature gate, specifying its stage, default value, and version information. This feature gate controls node prioritization based on available PV capacity.

LANGUAGE: yaml
CODE:
---
title: VolumeCapacityPriority
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.21"
---

----------------------------------------

TITLE: Creating cfssl Server CSR Configuration for Kubernetes
DESCRIPTION: This JSON configuration file is used for generating keys and certificates for the Kubernetes API server with cfssl. It includes the certificate subject and alternative names.

LANGUAGE: json
CODE:
{
  "CN": "kubernetes",
  "hosts": [
    "127.0.0.1",
    "<MASTER_IP>",
    "<MASTER_CLUSTER_IP>",
    "kubernetes",
    "kubernetes.default",
    "kubernetes.default.svc",
    "kubernetes.default.svc.cluster",
    "kubernetes.default.svc.cluster.local"
  ],
  "key": {
    "algo": "rsa",
    "size": 2048
  },
  "names": [
    {
      "C": "<country>",
      "ST": "<state>",
      "L": "<city>",
      "O": "<organization>",
      "OU": "<organization unit>"
    }
  ]
}

----------------------------------------

TITLE: Executing Kubernetes Control Plane Upgrade Command
DESCRIPTION: Command syntax for upgrading the Kubernetes control plane components using kubeadm. The command supports various flags for certificate renewal, etcd upgrades, and configuration customization.

LANGUAGE: bash
CODE:
kubeadm upgrade apply phase control-plane [flags]

----------------------------------------

TITLE: YAML Front Matter for Blog Post
DESCRIPTION: This YAML snippet defines the metadata for the blog post, including layout, title, date, slug, and author information.

LANGUAGE: yaml
CODE:
---
layout: blog
title: "Live and let live with Kluctl and Server Side Apply"
date: 2022-11-04
slug: live-and-let-live-with-kluctl-and-ssa
author: >
   Alexander Block
---

----------------------------------------

TITLE: Defining Pod Security Context
DESCRIPTION: This YAML snippet shows how to define a security context for a Pod, including user/group IDs and filesystem group.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: security-context-demo
spec:
  securityContext:
    runAsUser: 1000
    runAsGroup: 3000
    fsGroup: 2000
  volumes:
  - name: sec-ctx-vol
    emptyDir: {}
  containers:
  - name: sec-ctx-demo
    image: busybox:1.28
    command: [ "sh", "-c", "sleep 1h" ]
    volumeMounts:
    - name: sec-ctx-vol
      mountPath: /data/demo
    securityContext:
      allowPrivilegeEscalation: false

----------------------------------------

TITLE: Applying StorageVersionMigration for CRD in Kubernetes
DESCRIPTION: This shell command applies the StorageVersionMigration object for custom resources using kubectl.

LANGUAGE: shell
CODE:
kubectl apply -f migrate-crd.yaml

----------------------------------------

TITLE: Executing Kubelet Finalize Command
DESCRIPTION: Basic command syntax for running the kubelet-finalize phase of kubeadm init.

LANGUAGE: bash
CODE:
kubeadm init phase kubelet-finalize [flags]

----------------------------------------

TITLE: Implementing Default Deny NetworkPolicy in Kubernetes
DESCRIPTION: A YAML configuration that creates a default deny network policy affecting all pods in a namespace by using an empty pod selector.

LANGUAGE: yaml
CODE:
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny
spec:
  podSelector:

----------------------------------------

TITLE: Importing ListMeta from Kubernetes Apimachinery Package in Go
DESCRIPTION: This snippet shows how to import the ListMeta struct from the Kubernetes apimachinery package. ListMeta is used to describe metadata for synthetic resources in Kubernetes.

LANGUAGE: go
CODE:
import "k8s.io/apimachinery/pkg/apis/meta/v1"

----------------------------------------

TITLE: Creating ExternalName Service in Kubernetes
DESCRIPTION: Command syntax for creating an ExternalName service that references an external DNS name. This allows applications to reference services that exist outside the Kubernetes cluster.

LANGUAGE: bash
CODE:
kubectl create service externalname NAME --external-name external.name [--dry-run=server|client|none]

----------------------------------------

TITLE: Enabling Node Authorization Mode in Kubernetes API Server (Shell)
DESCRIPTION: This shell command starts the Kubernetes API server with the Node authorization mode enabled. It uses the --authorization-mode flag to include Node in the comma-separated list of authorization modes.

LANGUAGE: shell
CODE:
kube-apiserver --authorization-mode=...,Node --other-options --more-options

----------------------------------------

TITLE: Accessing Hello World App via NodePort
DESCRIPTION: Shell command to access the Hello World application using the node's public IP and the NodePort.

LANGUAGE: shell
CODE:
curl http://<public-node-ip>:<node-port>

----------------------------------------

TITLE: Prometheus Query for Deprecated APIs
DESCRIPTION: A PromQL query that returns information about requests made to deprecated APIs which will be removed in v1.22 by joining metrics for deprecated API requests with total API requests.

LANGUAGE: promql
CODE:
apiserver_requested_deprecated_apis{removed_release="1.22"} * on(group,version,resource,subresource) group_right() apiserver_request_total

----------------------------------------

TITLE: Creating an NGINX Pod Deployment
DESCRIPTION: YAML configuration to create an NGINX pod deployment with container port specification.

LANGUAGE: yaml
CODE:
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-nginx
spec:
  selector:
    matchLabels:
      run: my-nginx
  replicas: 2
  template:
    metadata:
      labels:
        run: my-nginx
    spec:
      containers:
      - name: my-nginx
        image: nginx
        ports:
        - containerPort: 80

----------------------------------------

TITLE: Port Forwarding with Dynamic Local Port
DESCRIPTION: This command sets up port forwarding to the MongoDB deployment, allowing kubectl to choose an available local port. It's useful to avoid port conflicts on the local machine.

LANGUAGE: shell
CODE:
kubectl port-forward deployment/mongo :27017

----------------------------------------

TITLE: Defining KubeletConfigFile Feature Gate Configuration in YAML
DESCRIPTION: YAML configuration defining the lifecycle stages of the KubeletConfigFile feature gate in Kubernetes, showing its alpha introduction in v1.8 and deprecation in v1.10.

LANGUAGE: yaml
CODE:
title: KubeletConfigFile
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.8"
    toVersion: "1.9"
  - stage: deprecated
    fromVersion: "1.10"
    toVersion: "1.10"

removed: true

----------------------------------------

TITLE: Defining KubeletConfigFile Feature Gate Configuration in YAML
DESCRIPTION: YAML configuration defining the lifecycle stages of the KubeletConfigFile feature gate in Kubernetes, showing its alpha introduction in v1.8 and deprecation in v1.10.

LANGUAGE: yaml
CODE:
title: KubeletConfigFile
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.8"
    toVersion: "1.9"
  - stage: deprecated
    fromVersion: "1.10"
    toVersion: "1.10"

removed: true

----------------------------------------

TITLE: Defining KubeletConfigFile Feature Gate Configuration in YAML
DESCRIPTION: YAML configuration defining the lifecycle stages of the KubeletConfigFile feature gate in Kubernetes, showing its alpha introduction in v1.8 and deprecation in v1.10.

LANGUAGE: yaml
CODE:
title: KubeletConfigFile
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.8"
    toVersion: "1.9"
  - stage: deprecated
    fromVersion: "1.10"
    toVersion: "1.10"

removed: true

----------------------------------------

TITLE: Viewing Deployment Status
DESCRIPTION: Check the deployment status to see the effects of the Pod quota.

LANGUAGE: shell
CODE:
kubectl get deployment pod-quota-demo --namespace=quota-pod-example --output=yaml

----------------------------------------

TITLE: Configuring Pod Ephemeral Storage Requests and Limits in Kubernetes
DESCRIPTION: Example showing how to configure local ephemeral storage requests and limits for containers in a Pod, including emptyDir volume configuration with size limits.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: frontend
spec:
  containers:
  - name: app
    image: images.my-company.example/app:v4
    resources:
      requests:
        ephemeral-storage: "8Gi"
      limits:
        ephemeral-storage: "12Gi"
    volumeMounts:
    - name: ephemeral
      mountPath: "/tmp"
  - name: log-aggregator
    image: images.my-company.example/log-aggregator:v6
    resources:
      requests:
        ephemeral-storage: "2Gi"
    volumeMounts:
    - name: ephemeral
      mountPath: "/tmp"
  volumes:
    - name: ephemeral
      emptyDir: {}
        sizeLimit: 5Gi

----------------------------------------

TITLE: Configuring Kubelet Swap Behavior in YAML
DESCRIPTION: Configuration snippet for enabling swap memory in kubelet with UnlimitedSwap behavior setting.

LANGUAGE: yaml
CODE:
# this fragment goes into the kubelet's configuration file
memorySwap:
  swapBehavior: UnlimitedSwap

----------------------------------------

TITLE: Upgrading kubeadm on Windows Node
DESCRIPTION: This snippet demonstrates how to download and upgrade kubeadm on a Windows node. It uses curl.exe to fetch the desired version of kubeadm from the official Kubernetes distribution.

LANGUAGE: powershell
CODE:
curl.exe -Lo <path-to-kubeadm.exe>  "https://dl.k8s.io/v{{< skew currentPatchVersion >}}/bin/windows/amd64/kubeadm.exe"

----------------------------------------

TITLE: Claiming Host Role Configuration for Zoom
DESCRIPTION: HTML image tag showing configuration for claiming host role in Zoom meetings, used in the context of SIG Docs meeting management.

LANGUAGE: html
CODE:
<img src="/images/docs/contribute/claim-host.png" width="75%" alt="Claiming the host role in Zoom" />

----------------------------------------

TITLE: Defining ConfigMap API Version and Kind
DESCRIPTION: Specifies the API version and kind for ConfigMap resources.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: ConfigMap

----------------------------------------

TITLE: Kubelet Finalize Example Usage
DESCRIPTION: Example showing how to run the kubelet-finalize phase with configuration file.

LANGUAGE: bash
CODE:
kubeadm init phase kubelet-finalize all --config

----------------------------------------

TITLE: Creating StorageClass with AWS EBS CSI Driver
DESCRIPTION: Example configuration for AWS EBS CSI driver StorageClass with volume binding mode and provisioner settings.

LANGUAGE: yaml
CODE:
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: ebs-sc
provisioner: ebs.csi.aws.com
volumeBindingMode: WaitForFirstConsumer
allowVolumeExpansion: true
parameters:
  type: gp3
  tagSpecification: tag1=value1

----------------------------------------

TITLE: Kubernetes Pod Management Commands
DESCRIPTION: Shell commands for managing and inspecting Pods that use the downward API for environment variables. Includes commands for deployment, status checking, and log viewing.

LANGUAGE: shell
CODE:
kubectl apply -f https://k8s.io/examples/pods/inject/dapi-envars-pod.yaml
kubectl get pods
kubectl logs dapi-envars-fieldref
kubectl exec -it dapi-envars-fieldref -- sh
printenv

----------------------------------------

TITLE: Creating StorageClass with AWS EBS CSI Driver
DESCRIPTION: Example configuration for AWS EBS CSI driver StorageClass with volume binding mode and provisioner settings.

LANGUAGE: yaml
CODE:
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: ebs-sc
provisioner: ebs.csi.aws.com
volumeBindingMode: WaitForFirstConsumer
allowVolumeExpansion: true
parameters:
  type: gp3
  tagSpecification: tag1=value1

----------------------------------------

TITLE: PVC Status Output
DESCRIPTION: Output showing the status of the created PersistentVolumeClaim

LANGUAGE: shell
CODE:
NAME             STATUS
pvc-quota-demo   Pending

----------------------------------------

TITLE: Defining Pod with Node Affinity
DESCRIPTION: Example YAML for a Pod spec using node affinity to control scheduling based on node labels.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: with-node-affinity
spec:
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: topology.kubernetes.io/zone
            operator: In
            values:
            - antarctica-east1
            - antarctica-west1
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 1
        preference:
          matchExpressions:
          - key: another-node-label-key
            operator: In
            values:
            - another-node-label-value
  containers:
  - name: with-node-affinity
    image: k8s.gcr.io/pause:2.0

----------------------------------------

TITLE: Creating a Kubernetes Secret with Unencoded Data
DESCRIPTION: YAML configuration for a Kubernetes Secret using the stringData field to specify unencoded configuration data.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Secret
metadata:
  name: mysecret
type: Opaque
stringData:
  config.yaml: |
    apiUrl: "https://my.api.com/api/v1"
    username: <user>
    password: <password>

----------------------------------------

TITLE: Uncordoning a Kubernetes Node
DESCRIPTION: Command to mark a node as schedulable again after maintenance, allowing new pods to be scheduled on it.

LANGUAGE: shell
CODE:
kubectl uncordon <node name>

----------------------------------------

TITLE: Configuring Preferred Node Affinity in Kubernetes
DESCRIPTION: YAML configuration demonstrating preferred node scheduling to a specific GCE zone using node affinity preferences.

LANGUAGE: yaml
CODE:
  affinity:
    nodeAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
            - key: "failure-domain.beta.kubernetes.io/zone"
              operator: In
              values: ["us-central1-a"]

----------------------------------------

TITLE: Creating StorageClass with AWS EBS CSI Driver
DESCRIPTION: Example configuration for AWS EBS CSI driver StorageClass with volume binding mode and provisioner settings.

LANGUAGE: yaml
CODE:
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: ebs-sc
provisioner: ebs.csi.aws.com
volumeBindingMode: WaitForFirstConsumer
allowVolumeExpansion: true
parameters:
  type: gp3
  tagSpecification: tag1=value1

----------------------------------------

TITLE: Defining a DaemonSet in YAML
DESCRIPTION: Example YAML definition of a DaemonSet resource.

LANGUAGE: yaml
CODE:
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: example-daemonset
spec:
  selector:
    matchLabels:
      app: example
  template:
    metadata:
      labels:
        app: example
    spec:
      containers:
      - name: example-container
        image: example-image:latest

----------------------------------------

TITLE: Listing StorageClasses in Kubernetes
DESCRIPTION: Command to list all StorageClasses in the cluster showing their names, provisioners, and age.

LANGUAGE: bash
CODE:
kubectl get storageclass

----------------------------------------

TITLE: Defining ClusterRole for Endpoints Access in Kubernetes
DESCRIPTION: YAML definition for a ClusterRole that grants write access to EndpointSlices and Endpoints.

LANGUAGE: yaml
CODE:
{{% code_sample file="access/endpoints-aggregated.yaml" %}}

----------------------------------------

TITLE: Applying Pod Security Labels to Single Namespace
DESCRIPTION: Shell command for applying restricted pod security enforcement to a specific namespace, with version pinning to current Kubernetes version.

LANGUAGE: shell
CODE:
kubectl label --overwrite ns my-existing-namespace \
  pod-security.kubernetes.io/enforce=restricted \
  pod-security.kubernetes.io/enforce-version=v{{< skew currentVersion >}}

----------------------------------------

TITLE: kubectl logs Usage Examples
DESCRIPTION: Comprehensive examples showing different ways to use the kubectl logs command, including filtering, streaming, and time-based log retrieval.

LANGUAGE: bash
CODE:
# Return snapshot logs from pod nginx with only one container
kubectl logs nginx

# Return snapshot logs from pod nginx, prefixing each line with the source pod and container name
kubectl logs nginx --prefix

# Return snapshot logs from pod nginx, limiting output to 500 bytes
kubectl logs nginx --limit-bytes=500

# Return snapshot logs from pod nginx, waiting up to 20 seconds for it to start running.
kubectl logs nginx --pod-running-timeout=20s

# Return snapshot logs from pod nginx with multi containers
kubectl logs nginx --all-containers=true

# Return snapshot logs from all pods in the deployment nginx
kubectl logs deployment/nginx --all-pods=true

# Return snapshot logs from all containers in pods defined by label app=nginx
kubectl logs -l app=nginx --all-containers=true

# Return snapshot logs from all pods defined by label app=nginx, limiting concurrent log requests to 10 pods
kubectl logs -l app=nginx --max-log-requests=10

# Return snapshot of previous terminated ruby container logs from pod web-1
kubectl logs -p -c ruby web-1

# Begin streaming the logs from pod nginx, continuing even if errors occur
kubectl logs nginx -f --ignore-errors=true

# Begin streaming the logs of the ruby container in pod web-1
kubectl logs -f -c ruby web-1

# Begin streaming the logs from all containers in pods defined by label app=nginx
kubectl logs -f -l app=nginx --all-containers=true

# Display only the most recent 20 lines of output in pod nginx
kubectl logs --tail=20 nginx

# Show all logs from pod nginx written in the last hour
kubectl logs --since=1h nginx

# Show all logs with timestamps from pod nginx starting from August 30, 2024, at 06:00:00 UTC
kubectl logs nginx --since-time=2024-08-30T06:00:00Z --timestamps=true

# Show logs from a kubelet with an expired serving certificate
kubectl logs --insecure-skip-tls-verify-backend nginx

# Return snapshot logs from first container of a job named hello
kubectl logs job/hello

# Return snapshot logs from container nginx-1 of a deployment named nginx
kubectl logs deployment/nginx -c nginx-1

----------------------------------------

TITLE: Creating Kubernetes Secret from existing Docker credentials
DESCRIPTION: This kubectl command creates a Kubernetes Secret named 'regcred' using the existing Docker config.json file. It sets the Secret type to kubernetes.io/dockerconfigjson.

LANGUAGE: shell
CODE:
kubectl create secret generic regcred \
    --from-file=.dockerconfigjson=<path/to/.docker/config.json> \
    --type=kubernetes.io/dockerconfigjson

----------------------------------------

TITLE: Creating and Verifying Image Volume Pod
DESCRIPTION: Shell commands for creating the pod with image volume and verifying its contents by attaching to the container and checking mounted files.

LANGUAGE: shell
CODE:
kubectl apply -f https://k8s.io/examples/pods/image-volumes.yaml

LANGUAGE: shell
CODE:
kubectl attach -it image-volume bash

LANGUAGE: shell
CODE:
cat /volume/dir/file

LANGUAGE: shell
CODE:
cat /volume/file

----------------------------------------

TITLE: Storing Credentials in Files for Kustomize Secret Generation
DESCRIPTION: This snippet shows how to store credentials in separate files and reference them in a kustomization.yaml file for Secret generation. It includes shell commands to create the files and the corresponding YAML configuration.

LANGUAGE: shell
CODE:
echo -n 'admin' > ./username.txt
echo -n '1f2d1e2e67df' > ./password.txt

LANGUAGE: yaml
CODE:
secretGenerator:
- name: database-creds
  files:
  - username.txt
  - password.txt

----------------------------------------

TITLE: Editing kubelet-config ConfigMap
DESCRIPTION: Command to edit the kubelet-config ConfigMap in the kube-system namespace, which contains the KubeletConfiguration.

LANGUAGE: shell
CODE:
kubectl edit cm -n kube-system kubelet-config

----------------------------------------

TITLE: Configuring VolumeScheduling Feature Gate in Kubernetes YAML
DESCRIPTION: Defines the VolumeScheduling feature gate configuration for Kubernetes. It specifies the feature's progression through alpha, beta, and stable stages, along with version ranges and default values. The configuration also indicates that this feature has been removed.

LANGUAGE: yaml
CODE:
---
# Removed from Kubernetes
title: VolumeScheduling
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.9"
    toVersion: "1.9"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.10"
    toVersion: "1.12"
  - stage: stable
    defaultValue: true
    fromVersion: "1.13"
    toVersion: "1.16"

removed: true
---

----------------------------------------

TITLE: Configuring VolumeScheduling Feature Gate in Kubernetes YAML
DESCRIPTION: Defines the VolumeScheduling feature gate configuration for Kubernetes. It specifies the feature's progression through alpha, beta, and stable stages, along with version ranges and default values. The configuration also indicates that this feature has been removed.

LANGUAGE: yaml
CODE:
---
# Removed from Kubernetes
title: VolumeScheduling
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.9"
    toVersion: "1.9"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.10"
    toVersion: "1.12"
  - stage: stable
    defaultValue: true
    fromVersion: "1.13"
    toVersion: "1.16"

removed: true
---

----------------------------------------

TITLE: Configuring VolumeScheduling Feature Gate in Kubernetes YAML
DESCRIPTION: Defines the VolumeScheduling feature gate configuration for Kubernetes. It specifies the feature's progression through alpha, beta, and stable stages, along with version ranges and default values. The configuration also indicates that this feature has been removed.

LANGUAGE: yaml
CODE:
---
# Removed from Kubernetes
title: VolumeScheduling
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.9"
    toVersion: "1.9"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.10"
    toVersion: "1.12"
  - stage: stable
    defaultValue: true
    fromVersion: "1.13"
    toVersion: "1.16"

removed: true
---

----------------------------------------

TITLE: Embedding Certificates in Kubeconfig Files
DESCRIPTION: This bash script embeds the signed certificates into the corresponding kubeconfig files.

LANGUAGE: bash
CODE:
#!/bin/bash

CLUSTER=kubernetes
find ./ -name "*.conf" | while read -r FILE;
do
    echo "* Processing ${FILE} ..."
    KUBECONFIG="${FILE}" kubectl config set-cluster "${CLUSTER}" --certificate-authority ./pki/ca.crt --embed-certs
    USER=$(KUBECONFIG="${FILE}" kubectl config view -o jsonpath='{.users[0].name}')
    KUBECONFIG="${FILE}" kubectl config set-credentials "${USER}" --client-certificate "${FILE}.crt" --embed-certs
done

----------------------------------------

TITLE: Installing Emojivoto Demo Application
DESCRIPTION: Command to download and apply the Kubernetes manifest for the Emojivoto demo application

LANGUAGE: bash
CODE:
curl https://run.linkerd.io/emojivoto.yml | kubectl apply -f -

----------------------------------------

TITLE: LimitRange API Definition
DESCRIPTION: Core API definition for LimitRange resource showing apiVersion and import path

LANGUAGE: yaml
CODE:
apiVersion: v1
import: "k8s.io/api/core/v1"

----------------------------------------

TITLE: Kubeadm Swap Configuration
DESCRIPTION: Complete kubeadm configuration file for initializing a cluster with swap support enabled and LimitedSwap behavior.

LANGUAGE: yaml
CODE:
---
apiVersion: "kubeadm.k8s.io/v1beta3"
kind: InitConfiguration
---
apiVersion: kubelet.config.k8s.io/v1beta1
kind: KubeletConfiguration
failSwapOn: false
featureGates:
  NodeSwap: true
memorySwap:
  swapBehavior: LimitedSwap

----------------------------------------

TITLE: Labeling Kubernetes Nodes with SSD Configuration
DESCRIPTION: Shell command to label specific nodes with ssd=true to indicate they have SSD storage.

LANGUAGE: shell
CODE:
kubectl label nodes example-node-1 example-node-2 ssd=true

----------------------------------------

TITLE: Draining Kubernetes Node
DESCRIPTION: Command to prepare a node for maintenance by marking it unschedulable and evicting workloads.

LANGUAGE: shell
CODE:
kubectl drain <node-to-drain> --ignore-daemonsets

----------------------------------------

TITLE: Retrieving Service Information
DESCRIPTION: Command to describe a service and view its load balancer details including IP address and port configurations.

LANGUAGE: bash
CODE:
kubectl describe services example-service

----------------------------------------

TITLE: Executing Kubeadm Init Phase Certs SA Command in Bash
DESCRIPTION: This command generates the private and public keys for signing service account tokens in Kubernetes. It saves the keys to sa.key and sa.pub files in the specified certificate directory. If the files already exist, the generation step is skipped.

LANGUAGE: bash
CODE:
kubeadm init phase certs sa [flags]

----------------------------------------

TITLE: Editing DNS Autoscaler ConfigMap in Kubernetes
DESCRIPTION: This command opens the kube-dns-autoscaler ConfigMap for editing, allowing modification of autoscaling parameters.

LANGUAGE: shell
CODE:
kubectl edit configmap kube-dns-autoscaler --namespace=kube-system

----------------------------------------

TITLE: Configuring Skaffold for Kubernetes Deployments
DESCRIPTION: YAML configuration for Skaffold defining build artifacts and deployment specifications for a container application.

LANGUAGE: yaml
CODE:
apiVersion: skaffold/v1alpha2
kind: Config
build:
  artifacts:
  - imageName: quay.io/mhausenblas/stock-con
    workspace: .
    docker: {}
  local: {}
deploy:
  kubectl:
    manifests:
      - app.yaml

----------------------------------------

TITLE: Editing last-applied-configuration by resource type and name
DESCRIPTION: Example of editing the last-applied-configuration annotations for a deployment named 'nginx' using YAML format.

LANGUAGE: bash
CODE:
kubectl apply edit-last-applied deployment/nginx

----------------------------------------

TITLE: Defining ClientConnectionConfiguration in YAML
DESCRIPTION: Specifies parameters for connecting to the Kubernetes API server, including authentication and rate limiting options.

LANGUAGE: yaml
CODE:
kubeconfig: /path/to/kubeconfig
acceptContentTypes: application/json
contentType: application/json
qps: 50
burst: 100

----------------------------------------

TITLE: Assigning SELinux Labels to a Container
DESCRIPTION: This YAML snippet demonstrates how to assign SELinux labels to a Container.

LANGUAGE: yaml
CODE:
securityContext:
  seLinuxOptions:
    level: "s0:c123,c456"

----------------------------------------

TITLE: In-Place Updates of Kubernetes Resources
DESCRIPTION: Shows various methods for performing in-place updates of Kubernetes resources using kubectl apply, edit, and patch commands.

LANGUAGE: shell
CODE:
kubectl apply -f https://k8s.io/examples/application/nginx/nginx-deployment.yaml

LANGUAGE: none
CODE:
deployment.apps/my-nginx configured

LANGUAGE: shell
CODE:
kubectl edit deployment/my-nginx

LANGUAGE: shell
CODE:
kubectl get deployment my-nginx -o yaml > /tmp/nginx.yaml
vi /tmp/nginx.yaml
# do some edit, and then save the file

kubectl apply -f /tmp/nginx.yaml
deployment.apps/my-nginx configured

rm /tmp/nginx.yaml

----------------------------------------

TITLE: Role API Schema Definition
DESCRIPTION: YAML representation of the Role API resource schema, showing the apiVersion, import path and kind.

LANGUAGE: yaml
CODE:
apiVersion: "rbac.authorization.k8s.io/v1"
import: "k8s.io/api/rbac/v1"
kind: "Role"

----------------------------------------

TITLE: Installing kubectl with Macports on macOS
DESCRIPTION: Installs kubectl using the Macports package manager on macOS.

LANGUAGE: bash
CODE:
sudo port selfupdate
sudo port install kubectl

----------------------------------------

TITLE: Listing Kubernetes join tokens on control plane node
DESCRIPTION: Retrieves a list of available join tokens from the control plane node. This is useful if the original token has expired or been lost.

LANGUAGE: bash
CODE:
sudo kubeadm token list

----------------------------------------

TITLE: WindowsEndpointSliceProxying Feature Gate Configuration
DESCRIPTION: YAML configuration defining the lifecycle stages of the WindowsEndpointSliceProxying feature gate. Shows progression from alpha (1.19-1.20), to beta (1.21), to stable (1.22-1.24) before removal.

LANGUAGE: yaml
CODE:
title: WindowsEndpointSliceProxying
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.19"
    toVersion: "1.20"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.21"
    toVersion: "1.21"
  - stage: stable
    defaultValue: true
    fromVersion: "1.22"
    toVersion: "1.24"

removed: true

----------------------------------------

TITLE: WindowsEndpointSliceProxying Feature Gate Configuration
DESCRIPTION: YAML configuration defining the lifecycle stages of the WindowsEndpointSliceProxying feature gate. Shows progression from alpha (1.19-1.20), to beta (1.21), to stable (1.22-1.24) before removal.

LANGUAGE: yaml
CODE:
title: WindowsEndpointSliceProxying
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.19"
    toVersion: "1.20"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.21"
    toVersion: "1.21"
  - stage: stable
    defaultValue: true
    fromVersion: "1.22"
    toVersion: "1.24"

removed: true

----------------------------------------

TITLE: WindowsEndpointSliceProxying Feature Gate Configuration
DESCRIPTION: YAML configuration defining the lifecycle stages of the WindowsEndpointSliceProxying feature gate. Shows progression from alpha (1.19-1.20), to beta (1.21), to stable (1.22-1.24) before removal.

LANGUAGE: yaml
CODE:
title: WindowsEndpointSliceProxying
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.19"
    toVersion: "1.20"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.21"
    toVersion: "1.21"
  - stage: stable
    defaultValue: true
    fromVersion: "1.22"
    toVersion: "1.24"

removed: true

----------------------------------------

TITLE: Querying Deprecated API Metrics in Kubernetes
DESCRIPTION: Shell command combining kubectl, prom2json, and jq to query deprecated API metrics from the Kubernetes API server.

LANGUAGE: sh
CODE:
kubectl get --raw /metrics | prom2json | jq '
  .[] | select(.name=="apiserver_requested_deprecated_apis").metrics[].labels
'

----------------------------------------

TITLE: RPM Repository Configuration for Legacy Kubernetes Packages
DESCRIPTION: Example of a legacy RPM-based repository configuration that needs to be migrated. This configuration points to the deprecated packages.cloud.google.com repository.

LANGUAGE: bash
CODE:
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-\$basearch
enabled=1
gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
exclude=kubelet kubeadm kubectl

----------------------------------------

TITLE: Accessing Kubernetes API using Python client library
DESCRIPTION: This snippet shows how to use the official Python client library to connect to the Kubernetes API from within a pod. The config.load_incluster_config() function handles API host discovery and authentication automatically.

LANGUAGE: python
CODE:
# See example at https://github.com/kubernetes-client/python/blob/master/examples/in_cluster_config.py

----------------------------------------

TITLE: Configuring kubectl Context with SOCKS5 Proxy
DESCRIPTION: This YAML configuration for kubectl specifies a proxy-url in the cluster settings. This allows kubectl to use the SOCKS5 proxy for a specific context without requiring environment variables.

LANGUAGE: yaml
CODE:
apiVersion: v1
clusters:
- cluster:
    certificate-authority-data: LRMEMMW2 # shortened for readability 
    server: https://<API_SERVER_IP_ADDRESS>:6443  # the "Kubernetes API" server, in other words the IP address of kubernetes-remote-server.example
    proxy-url: socks5://localhost:1080   # the "SSH SOCKS5 proxy" in the diagram above
  name: default
contexts:
- context:
    cluster: default
    user: default
  name: default
current-context: default
kind: Config
preferences: {}
users:
- name: default
  user:
    client-certificate-data: LS0tLS1CR== # shortened for readability
    client-key-data: LS0tLS1CRUdJT=      # shortened for readability

----------------------------------------

TITLE: Creating a New Kubeadm Token on Control Plane Node
DESCRIPTION: This command creates a new kubeadm token on a control plane node. It's used when the existing token has expired and a new node needs to be joined.

LANGUAGE: bash
CODE:
sudo kubeadm token create

----------------------------------------

TITLE: Configuring UserNamespacesPodSecurityStandards Feature Gate in Kubernetes
DESCRIPTION: YAML configuration for the UserNamespacesPodSecurityStandards feature gate. This alpha feature is disabled by default (defaultValue: false) and was introduced in Kubernetes 1.29. It must be consistently set across all cluster nodes.

LANGUAGE: yaml
CODE:
title: UserNamespacesPodSecurityStandards
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.29"

----------------------------------------

TITLE: Configuring UserNamespacesPodSecurityStandards Feature Gate in Kubernetes
DESCRIPTION: YAML configuration for the UserNamespacesPodSecurityStandards feature gate. This alpha feature is disabled by default (defaultValue: false) and was introduced in Kubernetes 1.29. It must be consistently set across all cluster nodes.

LANGUAGE: yaml
CODE:
title: UserNamespacesPodSecurityStandards
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.29"

----------------------------------------

TITLE: Configuring UserNamespacesPodSecurityStandards Feature Gate in Kubernetes
DESCRIPTION: YAML configuration for the UserNamespacesPodSecurityStandards feature gate. This alpha feature is disabled by default (defaultValue: false) and was introduced in Kubernetes 1.29. It must be consistently set across all cluster nodes.

LANGUAGE: yaml
CODE:
title: UserNamespacesPodSecurityStandards
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.29"

----------------------------------------

TITLE: Validating kubectl convert plugin checksum in PowerShell
DESCRIPTION: This PowerShell command compares the SHA256 hash of the downloaded kubectl convert plugin binary with the expected checksum.

LANGUAGE: powershell
CODE:
$($(CertUtil -hashfile .\kubectl-convert.exe SHA256)[1] -replace " ", "") -eq $(type .\kubectl-convert.exe.sha256)

----------------------------------------

TITLE: Viewing modified /etc/hosts file in Kubernetes Pod
DESCRIPTION: This snippet demonstrates how to view the contents of the modified /etc/hosts file in a Pod with HostAliases.

LANGUAGE: shell
CODE:
kubectl logs hostaliases-pod

----------------------------------------

TITLE: Executing Kubeadm Certificate Renewal for etcd-server
DESCRIPTION: This command renews the certificate for serving etcd in a Kubernetes cluster. It runs unconditionally, regardless of the current certificate's expiration date, and uses existing file/certificate attributes for renewal.

LANGUAGE: shell
CODE:
kubeadm certs renew etcd-server [flags]

----------------------------------------

TITLE: Installing and Using a kubectl Plugin
DESCRIPTION: This snippet shows how to make a plugin executable, move it to the PATH, and invoke it as a kubectl command with various arguments and environment variables.

LANGUAGE: bash
CODE:
sudo chmod +x ./kubectl-foo
sudo mv ./kubectl-foo /usr/local/bin
kubectl foo
kubectl foo version
export KUBECONFIG=~/.kube/config
kubectl foo config
KUBECONFIG=/etc/kube/config kubectl foo config

----------------------------------------

TITLE: Creating a ValidatingAdmissionPolicy with Parameters in Kubernetes
DESCRIPTION: Example of a ValidatingAdmissionPolicy that uses a custom ReplicaLimit resource as a parameter to configure the maximum number of replicas.

LANGUAGE: yaml
CODE:
apiVersion: admissionregistration.k8s.io/v1beta1
kind: ValidatingAdmissionPolicy
metadata:
  name: "replicalimit-policy.example.com"
spec:
  failurePolicy: Fail
  paramKind:
    apiVersion: rules.example.com/v1
    kind: ReplicaLimit
  matchConstraints:
    resourceRules:
    - apiGroups:   ["apps"]
      apiVersions: ["v1"]
      operations:  ["CREATE", "UPDATE"]
      resources:   ["deployments"]
  validations:
  - expression: "object.spec.replicas <= params.maxReplicas"
    message: "The number of replicas must not exceed the max replicas allowed for this deployment."


----------------------------------------

TITLE: HTTP PUT Request - Replace LimitRange
DESCRIPTION: HTTP request format for replacing an existing LimitRange resource

LANGUAGE: http
CODE:
PUT /api/v1/namespaces/{namespace}/limitranges/{name}

----------------------------------------

TITLE: AdmissionReview Struct Definition
DESCRIPTION: Core type representing an admission review request/response pair in the Kubernetes API. Contains request attributes and response details for admission decisions.

LANGUAGE: go
CODE:
type AdmissionReview struct {
    apiVersion string            // admission.k8s.io/v1
    kind       string            // AdmissionReview
    request    *AdmissionRequest
    response   *AdmissionResponse
}

----------------------------------------

TITLE: Retrieving Container Logs with crictl
DESCRIPTION: Demonstrates using crictl to get all logs from a container and retrieve only the latest N lines of logs on a Kubernetes node.

LANGUAGE: bash
CODE:
crictl logs 87d3992f84f74

LANGUAGE: bash
CODE:
crictl logs --tail=1 87d3992f84f74

----------------------------------------

TITLE: Nginx Root Page Modification
DESCRIPTION: Commands for modifying the nginx root page and testing the web server.

LANGUAGE: shell
CODE:
echo 'Hello shell demo' > /usr/share/nginx/html/index.html
apt-get update
apt-get install curl
curl http://localhost/

----------------------------------------

TITLE: Configuring crictl for containerd Runtime
DESCRIPTION: Example configuration file contents for crictl when using the containerd container runtime. Specifies runtime and image endpoints, timeout, and debug settings.

LANGUAGE: yaml
CODE:
runtime-endpoint: unix:///var/run/containerd/containerd.sock
image-endpoint: unix:///var/run/containerd/containerd.sock
timeout: 10
debug: true

----------------------------------------

TITLE: Creating a PersistentVolumeClaim from a VolumeSnapshot in Kubernetes
DESCRIPTION: YAML definition for creating a new PersistentVolumeClaim with data pre-populated from a VolumeSnapshot.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc-restore
  namespace: demo-namespace
spec:
  storageClassName: test-storageclass
  dataSource:
    name: test-snapshot
    kind: VolumeSnapshot
    apiGroup: snapshot.storage.k8s.io
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

----------------------------------------

TITLE: Configuring Resource Limits for Kubernetes Addon Container
DESCRIPTION: YAML configuration example showing how to set CPU and memory resource limits for a Fluentd logging container running as a Kubernetes addon. Demonstrates proper resource constraint setup for cluster addons.

LANGUAGE: yaml
CODE:
  ...
  containers:
  - name: fluentd-cloud-logging
    image: fluent/fluentd-kubernetes-daemonset:v1
    resources:
      limits:
        cpu: 100m
        memory: 200Mi

----------------------------------------

TITLE: Defining a Basic Kubernetes Service
DESCRIPTION: This YAML defines a basic Kubernetes Service that exposes port 80 and targets port 9376 on Pods with the label 'app: MyApp'.

LANGUAGE: yaml
CODE:
kind: Service
apiVersion: v1
metadata:
  name: my-service
spec:
  selector:
    app: MyApp
  ports:
  - protocol: TCP
    port: 80
    targetPort: 9376

----------------------------------------

TITLE: Adding Resources to Kustomization File
DESCRIPTION: Adds MySQL and WordPress deployment configuration files as resources to the kustomization.yaml file.

LANGUAGE: shell
CODE:
cat <<EOF >>./kustomization.yaml
resources:
  - mysql-deployment.yaml
  - wordpress-deployment.yaml
EOF

----------------------------------------

TITLE: Secure etcd Client Communication in Shell
DESCRIPTION: Example of a secure etcd client command using HTTPS and certificate-based authentication.

LANGUAGE: sh
CODE:
ETCDCTL_API=3 etcdctl --endpoints 10.2.0.9:2379 \
  --cert=/etc/kubernetes/pki/etcd/server.crt \
  --key=/etc/kubernetes/pki/etcd/server.key \
  --cacert=/etc/kubernetes/pki/etcd/ca.crt \
  member list

----------------------------------------

TITLE: ResourceQuota API Definition
DESCRIPTION: Core API definition for ResourceQuota specifying the apiVersion and import path

LANGUAGE: yaml
CODE:
apiVersion: v1
import "k8s.io/api/core/v1"

----------------------------------------

TITLE: Enabling RBAC Authorization with Command Line Flag
DESCRIPTION: Command to enable RBAC authorization in the Kubernetes API server using the --authorization-mode flag.

LANGUAGE: shell
CODE:
kube-apiserver --authorization-mode=...,RBAC --other-options --more-options

----------------------------------------

TITLE: Performing DNS Lookups for StatefulSet Pods
DESCRIPTION: This command runs a temporary Pod to perform DNS lookups for the StatefulSet Pods, demonstrating stable network identities.

LANGUAGE: shell
CODE:
kubectl run -i --tty --image busybox:1.28 dns-test --restart=Never --rm

# Run this in the dns-test container shell
nslookup web-0.nginx
nslookup web-1.nginx

----------------------------------------

TITLE: Creating Service with Manual Editing
DESCRIPTION: Shows how to create a Kubernetes service with manual editing of the configuration before creation.

LANGUAGE: shell
CODE:
kubectl create service clusterip my-svc --clusterip="None" -o yaml --dry-run=client > /tmp/srv.yaml
kubectl create --edit -f /tmp/srv.yaml

----------------------------------------

TITLE: Defining Container Environment Variables with Secret Data
DESCRIPTION: Shows how to use Secret data as environment variables in a Pod configuration, including examples with single and multiple Secrets.

LANGUAGE: yaml
CODE:
{{% code_sample file="pods/inject/pod-single-secret-env-variable.yaml" %}}

LANGUAGE: yaml
CODE:
{{% code_sample file="pods/inject/pod-multiple-secret-env-variable.yaml" %}}

----------------------------------------

TITLE: JWT Token Structure Example
DESCRIPTION: Example JSON structure of a JWT token for a ServiceAccount bound to a Pod

LANGUAGE: json
CODE:
{
  "aud": [
    "https://my-audience.example.com"
  ],
  "exp": 1729605240,
  "iat": 1729601640,
  "iss": "https://my-cluster.example.com",
  "jti": "aed34954-b33a-4142-b1ec-389d6bbb4936",
  "kubernetes.io": {
    "namespace": "my-namespace",
    "node": {
      "name": "my-node",
      "uid": "646e7c5e-32d6-4d42-9dbd-e504e6cbe6b1"
    },
    "pod": {
      "name": "my-pod",
      "uid": "5e0bd49b-f040-43b0-99b7-22765a53f7f3"
    },
    "serviceaccount": {
      "name": "my-serviceaccount",
      "uid": "14ee3fa4-a7e2-420f-9f9a-dbc4507c3798"
    }
  },
  "nbf": 1729601640,
  "sub": "system:serviceaccount:my-namespace:my-serviceaccount"
}

----------------------------------------

TITLE: Example SubjectAccessReview Request - JSON
DESCRIPTION: Sample JSON request showing a SubjectAccessReview API call to check authorization for reading pods in the 'projectCaribou' namespace.

LANGUAGE: json
CODE:
{
  "apiVersion": "authorization.k8s.io/v1beta1",
  "kind": "SubjectAccessReview",
  "spec": {
    "resourceAttributes": {
      "namespace": "projectCaribou",
      "verb": "get",
      "group": "unicorn.example.org",
      "resource": "pods"
    }
  }
}

----------------------------------------

TITLE: Deleting Associated Headless Service
DESCRIPTION: Command to delete the headless service associated with a StatefulSet.

LANGUAGE: shell
CODE:
kubectl delete service <service-name>

----------------------------------------

TITLE: Downloading Kubernetes Binaries and Dependencies
DESCRIPTION: Downloads necessary Kubernetes binaries, CNI plugins, and other dependencies.

LANGUAGE: bash
CODE:
mkdir download && cd download

curl -O https://download.docker.com/linux/fedora/37/${ARCH}/stable/Packages/docker-ce-cli-23.0.2-1.fc37.${ARCH}.rpm

# ... [additional curl commands omitted for brevity]

curl -LO "https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml"

----------------------------------------

TITLE: Configuring kubectl Alias with Autocompletion
DESCRIPTION: These commands create an alias for kubectl and extend shell completion to work with that alias. It allows using a shorter command (k) with autocompletion.

LANGUAGE: bash
CODE:
echo 'alias k=kubectl' >>~/.bash_profile
echo 'complete -o default -F __start_kubectl k' >>~/.bash_profile

----------------------------------------

TITLE: Go Client Example
DESCRIPTION: Example of using the official Go client library to interact with the Kubernetes API.

LANGUAGE: golang
CODE:
package main

import (
  "context"
  "fmt"
  "k8s.io/apimachinery/pkg/apis/meta/v1"
  "k8s.io/client-go/kubernetes"
  "k8s.io/client-go/tools/clientcmd"
)

func main() {
  // uses the current context in kubeconfig
  // path-to-kubeconfig -- for example, /root/.kube/config
  config, _ := clientcmd.BuildConfigFromFlags("", "<path-to-kubeconfig>")
  // creates the clientset
  clientset, _ := kubernetes.NewForConfig(config)
  // access the API to list pods
  pods, _ := clientset.CoreV1().Pods("").List(context.TODO(), v1.ListOptions{})
  fmt.Printf("There are %d pods in the cluster\n", len(pods.Items))
}

----------------------------------------

TITLE: Installing Cilium on Kubernetes
DESCRIPTION: Command to install Cilium on the Kubernetes cluster using the Cilium CLI tool.

LANGUAGE: shell
CODE:
cilium install

----------------------------------------

TITLE: Defining ResourceHealthStatus Feature Gate in YAML
DESCRIPTION: YAML configuration that defines the ResourceHealthStatus feature gate properties including its stage, default value and version information.

LANGUAGE: yaml
CODE:
title: ResourceHealthStatus
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.31"

----------------------------------------

TITLE: Configuring Kubelet Pause Image
DESCRIPTION: Command to configure kubelet with a specific pause container image when using dockershim before v1.23.

LANGUAGE: bash
CODE:
kubelet --pod-infra-container-image=k8s.gcr.io/pause:3.5

----------------------------------------

TITLE: Configuring JobManagedBy Feature Gate in Kubernetes YAML
DESCRIPTION: YAML configuration defining the JobManagedBy feature gate stages and properties. Specifies alpha stage (v1.30-1.31) with default disabled and beta stage (v1.32+) with default enabled.

LANGUAGE: yaml
CODE:
title: JobManagedBy
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha
    defaultValue: false
    fromVersion: "1.30"
    toVersion: "1.31"
  - stage: beta
    defaultValue: true
    fromVersion: "1.32"

----------------------------------------

TITLE: Configuring JobManagedBy Feature Gate in Kubernetes YAML
DESCRIPTION: YAML configuration defining the JobManagedBy feature gate stages and properties. Specifies alpha stage (v1.30-1.31) with default disabled and beta stage (v1.32+) with default enabled.

LANGUAGE: yaml
CODE:
title: JobManagedBy
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha
    defaultValue: false
    fromVersion: "1.30"
    toVersion: "1.31"
  - stage: beta
    defaultValue: true
    fromVersion: "1.32"

----------------------------------------

TITLE: Configuring JobManagedBy Feature Gate in Kubernetes YAML
DESCRIPTION: YAML configuration defining the JobManagedBy feature gate stages and properties. Specifies alpha stage (v1.30-1.31) with default disabled and beta stage (v1.32+) with default enabled.

LANGUAGE: yaml
CODE:
title: JobManagedBy
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha
    defaultValue: false
    fromVersion: "1.30"
    toVersion: "1.31"
  - stage: beta
    defaultValue: true
    fromVersion: "1.32"

----------------------------------------

TITLE: Modified Encryption Configuration for Decryption
DESCRIPTION: Shows how to modify the encryption configuration to disable encryption by adding the identity provider as the first entry.

LANGUAGE: yaml
CODE:
---
apiVersion: apiserver.config.k8s.io/v1
kind: EncryptionConfiguration
resources:
  - resources:
      - secrets
    providers:
      - identity: {} # add this line
      - aescbc:
          keys:
            - name: example
              secret: 2KfZgdiq2K0g2YrYpyDYs9mF2LPZhQ==

----------------------------------------

TITLE: Configuring ContextualLogging Feature Gate in Kubernetes
DESCRIPTION: YAML configuration defining the ContextualLogging feature gate stages and properties. Specifies the feature gate progression from alpha (v1.24) to beta (v1.30) with corresponding default values.

LANGUAGE: yaml
CODE:
---
title: ContextualLogging
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha
    defaultValue: false
    fromVersion: "1.24"
  - stage: beta
    defaultValue: true
    fromVersion: "1.30"
---

----------------------------------------

TITLE: Basic GPU Pod Configuration in Kubernetes
DESCRIPTION: YAML configuration for a Pod requesting a single GPU resource through the device plugin system. Demonstrates the basic structure for requesting GPU resources in the limits section.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: example-vector-add
spec:
  restartPolicy: OnFailure
  containers:
    - name: example-vector-add
      image: "registry.example/example-vector-add:v42"
      resources:
        limits:
          gpu-vendor.example/example-gpu: 1 # requesting 1 GPU

----------------------------------------

TITLE: Configuring Multiple JWT Authenticators in Kubernetes
DESCRIPTION: Example configuration file demonstrating how to set up multiple JWT authenticators with different issuers, audience policies, and claim validations using the new structured authentication configuration format.

LANGUAGE: yaml
CODE:
apiVersion: apiserver.config.k8s.io/v1beta1
kind: AuthenticationConfiguration
jwt:
- issuer:
    url: https://issuer1.example.com
    audiences:
    - audience1
    - audience2
    audienceMatchPolicy: MatchAny
  claimValidationRules:
    expression: 'claims.hd == "example.com"'
    message: "the hosted domain name must be example.com"
  claimMappings:
    username:
      expression: 'claims.username'
    groups:
      expression: 'claims.groups'
    uid:
      expression: 'claims.uid'
    extra:
    - key: 'example.com/tenant'
      expression: 'claims.tenant'
  userValidationRules:
  - expression: "!user.username.startsWith('system:')"
    message: "username cannot use reserved system: prefix"
- issuer:
    url: https://issuer2.example.com
    discoveryURL: https://discovery.example.com/.well-known/openid-configuration
    audiences:
    - audience3
    - audience4
    audienceMatchPolicy: MatchAny
  claimValidationRules:
    expression: 'claims.hd == "example.com"'
    message: "the hosted domain name must be example.com"
  claimMappings:
    username:
      expression: 'claims.username'
    groups:
      expression: 'claims.groups'
    uid:
      expression: 'claims.uid'
    extra:
    - key: 'example.com/tenant'
      expression: 'claims.tenant'
  userValidationRules:
  - expression: "!user.username.startsWith('system:')"
    message: "username cannot use reserved system: prefix"

----------------------------------------

TITLE: Deployment with Immutable ConfigMap as Volume
DESCRIPTION: YAML manifest for a Deployment that mounts an immutable ConfigMap as a volume in the Pod.

LANGUAGE: yaml
CODE:
{{% code_sample file="deployments/deployment-with-immutable-configmap-as-volume.yaml" %}}

----------------------------------------

TITLE: Configuring APIPriorityAndFairness Feature Gate in Kubernetes YAML
DESCRIPTION: This YAML configuration defines the APIPriorityAndFairness feature gate for Kubernetes. It specifies three stages (alpha, beta, stable) with their respective default values and version ranges. The feature enables managing request concurrency with prioritization and fairness at each server.

LANGUAGE: yaml
CODE:
title: APIPriorityAndFairness
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha
    defaultValue: false
    fromVersion: "1.18"
    toVersion: "1.19"
  - stage: beta
    defaultValue: true
    fromVersion: "1.20"
    toVersion: "1.28"
  - stage: stable
    defaultValue: true
    fromVersion: "1.29"
    toVersion: "1.30"

removed: true

----------------------------------------

TITLE: Running Kubeadm Config Validate Command
DESCRIPTION: This command validates a kubeadm configuration API file and reports any validation problems. It supports kubeadm.k8s.io/v1beta4 API version.

LANGUAGE: bash
CODE:
kubeadm config validate [flags]

----------------------------------------

TITLE: Configuring HostAliases in Kubernetes Pod YAML
DESCRIPTION: This YAML snippet shows how to configure HostAliases in a Pod specification to add custom entries to the /etc/hosts file.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: hostaliases-pod
spec:
  restartPolicy: Never
  hostAliases:
  - ip: "127.0.0.1"
    hostnames:
    - "foo.local"
    - "bar.local"
  - ip: "10.1.2.3"
    hostnames:
    - "foo.remote"
    - "bar.remote"
  containers:
  - name: cat-hosts
    image: busybox
    command:
    - cat
    args:
    - "/etc/hosts"

----------------------------------------

TITLE: Configuring APIPriorityAndFairness Feature Gate in Kubernetes YAML
DESCRIPTION: This YAML configuration defines the APIPriorityAndFairness feature gate for Kubernetes. It specifies three stages (alpha, beta, stable) with their respective default values and version ranges. The feature enables managing request concurrency with prioritization and fairness at each server.

LANGUAGE: yaml
CODE:
title: APIPriorityAndFairness
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha
    defaultValue: false
    fromVersion: "1.18"
    toVersion: "1.19"
  - stage: beta
    defaultValue: true
    fromVersion: "1.20"
    toVersion: "1.28"
  - stage: stable
    defaultValue: true
    fromVersion: "1.29"
    toVersion: "1.30"

removed: true

----------------------------------------

TITLE: Initializing Kubernetes Control-Plane Node
DESCRIPTION: Commands to initialize the Kubernetes control-plane node using kubeadm and copy the admin configuration.

LANGUAGE: shell
CODE:
kubeadm init --config=kubeadm-config.yml

mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

----------------------------------------

TITLE: Importing ServiceAccount API in Go
DESCRIPTION: Import statement for using the ServiceAccount API in Go code.

LANGUAGE: go
CODE:
import "k8s.io/api/core/v1"

----------------------------------------

TITLE: Namespace API Version and Kind
DESCRIPTION: Specifies the API version and kind for Namespace resources.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Namespace

----------------------------------------

TITLE: Single-size HugePages Pod Configuration
DESCRIPTION: Kubernetes pod specification showing how to consume huge pages of a single size. Uses simplified volume mount syntax with medium: HugePages.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: huge-pages-example
spec:
  containers:
  - name: example
    image: fedora:latest
    command:
    - sleep
    - inf
    volumeMounts:
    - mountPath: /hugepages
      name: hugepage
    resources:
      limits:
        hugepages-2Mi: 100Mi
        memory: 100Mi
      requests:
        memory: 100Mi
  volumes:
  - name: hugepage
    emptyDir:
      medium: HugePages

----------------------------------------

TITLE: Using Set-Based Label Selectors in Newer Resources
DESCRIPTION: This YAML snippet shows how to use set-based label selectors in newer Kubernetes resources like Job, Deployment, ReplicaSet, and DaemonSet.

LANGUAGE: yaml
CODE:
selector:
  matchLabels:
    component: redis
  matchExpressions:
    - { key: tier, operator: In, values: [cache] }
    - { key: environment, operator: NotIn, values: [dev] }

----------------------------------------

TITLE: Updating Pod CPU Resources
DESCRIPTION: Shell command demonstrating how to patch a pod's CPU resources using the resize subresource.

LANGUAGE: shell
CODE:
kubectl -n qos-example patch pod qos-demo-5 --subresource resize --patch '{"spec":{"containers":[{"name":"qos-demo-ctr-5", "resources":{"requests":{"cpu":"800m"}, "limits":{"cpu":"800m"}}}]}}'

----------------------------------------

TITLE: Installing Kubernetes Dashboard using Helm
DESCRIPTION: Commands to add the Kubernetes Dashboard repository and deploy it using Helm. This installs the dashboard in the kubernetes-dashboard namespace.

LANGUAGE: shell
CODE:
# Add kubernetes-dashboard repository
helm repo add kubernetes-dashboard https://kubernetes.github.io/dashboard/
# Deploy a Helm Release named "kubernetes-dashboard" using the kubernetes-dashboard chart
helm upgrade --install kubernetes-dashboard kubernetes-dashboard/kubernetes-dashboard --create-namespace --namespace kubernetes-dashboard

----------------------------------------

TITLE: Executing Kubernetes Log Example with Contextual Logging Disabled
DESCRIPTION: This code snippet shows how to run the same Kubernetes logging example with the ContextualLogging feature gate disabled, demonstrating the absence of additional contextual information in the log output.

LANGUAGE: shell
CODE:
$ go run . --feature-gates ContextualLogging=false
...
I0222 15:14:40.497333  198174 example.go:54] "runtime" duration="1m0s"
I0222 15:14:40.497346  198174 example.go:55] "another runtime" duration="1h0m0s" duration="1m0s"

----------------------------------------

TITLE: Adding New etcd Member in Shell
DESCRIPTION: Command to add a new etcd member to the cluster with a specified peer URL.

LANGUAGE: shell
CODE:
etcdctl member add member4 --peer-urls=http://10.0.0.4:2380

----------------------------------------

TITLE: Defining PreferAlignCpusByUncoreCache Feature Gate in YAML
DESCRIPTION: YAML configuration for the PreferAlignCpusByUncoreCache feature gate, introduced in Kubernetes 1.32 as an alpha feature. This feature gate controls CPU alignment optimization for cache-sensitive workloads.

LANGUAGE: yaml
CODE:
title: PreferAlignCpusByUncoreCache
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha
    defaultValue: false
    fromVersion: "1.32"

----------------------------------------

TITLE: Defining PreferAlignCpusByUncoreCache Feature Gate in YAML
DESCRIPTION: YAML configuration for the PreferAlignCpusByUncoreCache feature gate, introduced in Kubernetes 1.32 as an alpha feature. This feature gate controls CPU alignment optimization for cache-sensitive workloads.

LANGUAGE: yaml
CODE:
title: PreferAlignCpusByUncoreCache
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha
    defaultValue: false
    fromVersion: "1.32"

----------------------------------------

TITLE: Defining PreferAlignCpusByUncoreCache Feature Gate in YAML
DESCRIPTION: YAML configuration for the PreferAlignCpusByUncoreCache feature gate, introduced in Kubernetes 1.32 as an alpha feature. This feature gate controls CPU alignment optimization for cache-sensitive workloads.

LANGUAGE: yaml
CODE:
title: PreferAlignCpusByUncoreCache
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha
    defaultValue: false
    fromVersion: "1.32"

----------------------------------------

TITLE: Shell - Cluster Management Scripts
DESCRIPTION: Shell scripts for managing Kubernetes clusters, including setup, validation and teardown functionality.



----------------------------------------

TITLE: Runtime Interface Definition in Go
DESCRIPTION: Go interface definition for implementing streaming functionality in container runtimes.

LANGUAGE: go
CODE:
// Runtime is the interface to execute the commands and provide the streams.
type Runtime interface {
        Exec(ctx context.Context, containerID string, cmd []string, in io.Reader, out, err io.WriteCloser, tty bool, resize <-chan remotecommand.TerminalSize) error
        Attach(ctx context.Context, containerID string, in io.Reader, out, err io.WriteCloser, tty bool, resize <-chan remotecommand.TerminalSize) error
        PortForward(ctx context.Context, podSandboxID string, port int32, stream io.ReadWriteCloser) error
}

----------------------------------------

TITLE: Admission Configuration with Authentication
DESCRIPTION: Example admission control configuration file for configuring webhook authentication

LANGUAGE: yaml
CODE:
apiVersion: apiserver.config.k8s.io/v1
kind: AdmissionConfiguration
plugins:
- name: ValidatingAdmissionWebhook
  configuration:
    apiVersion: apiserver.config.k8s.io/v1
    kind: WebhookAdmissionConfiguration
    kubeConfigFile: "<path-to-kubeconfig-file>"
- name: MutatingAdmissionWebhook
  configuration:
    apiVersion: apiserver.config.k8s.io/v1
    kind: WebhookAdmissionConfiguration
    kubeConfigFile: "<path-to-kubeconfig-file>"

----------------------------------------

TITLE: Encrypting All Existing Secrets
DESCRIPTION: Command to encrypt all existing Secrets in the cluster.

LANGUAGE: shell
CODE:
kubectl get secrets --all-namespaces -o json | kubectl replace -f -

----------------------------------------

TITLE: Defining WebhookAdmission Resource in Kubernetes YAML
DESCRIPTION: This YAML snippet defines the structure of a WebhookAdmission resource in Kubernetes. It specifies the required apiVersion, kind, and kubeConfigFile fields. The kubeConfigFile is a required string field that specifies the path to the kubeconfig file used for webhook configuration.

LANGUAGE: yaml
CODE:
apiVersion: apiserver.config.k8s.io/v1
kind: WebhookAdmission
kubeConfigFile: <path-to-kubeconfig-file>

----------------------------------------

TITLE: Proxy Configuration for Windows Server
DESCRIPTION: PowerShell commands to set system-wide proxy environment variables for Kubernetes installation.

LANGUAGE: powershell
CODE:
[Environment]::SetEnvironmentVariable("HTTP_PROXY", "http://proxy.example.com:80/", [EnvironmentVariableTarget]::Machine)
[Environment]::SetEnvironmentVariable("HTTPS_PROXY", "http://proxy.example.com:443/", [EnvironmentVariableTarget]::Machine)

----------------------------------------

TITLE: Removing Failed etcd Member in Shell
DESCRIPTION: Command to remove a failed etcd member from the cluster using its ID.

LANGUAGE: shell
CODE:
etcdctl member remove 8211f1d0f64f3269

----------------------------------------

TITLE: Executing Kubeadm Config Print Command in Shell
DESCRIPTION: This command prints configurations for subcommands provided in Kubernetes. It can be used to view configuration details for various kubeadm subcommands.

LANGUAGE: shell
CODE:
kubeadm config print [flags]

----------------------------------------

TITLE: Basic kubectl auth whoami Syntax
DESCRIPTION: The fundamental syntax for the kubectl auth whoami command

LANGUAGE: bash
CODE:
kubectl auth whoami

----------------------------------------

TITLE: Creating a ValidatingAdmissionPolicyBinding with Parameters in Kubernetes
DESCRIPTION: Example of a ValidatingAdmissionPolicyBinding that applies the replica limit policy to deployments in the test environment.

LANGUAGE: yaml
CODE:
apiVersion: admissionregistration.k8s.io/v1beta1
kind: ValidatingAdmissionPolicyBinding
metadata:
  name: "replicalimit-binding-test.example.com"
spec:
  policyName: "replicalimit-policy.example.com"
  paramRef:
    name: "replicalimit-test"
  validationActions: [Deny]
  matchResources:
    namespaceSelector:
      matchLabels:
        environment: test


----------------------------------------

TITLE: Using Match Conditions in ValidatingAdmissionPolicy
DESCRIPTION: Example of using match conditions for fine-grained request filtering in a ValidatingAdmissionPolicy.

LANGUAGE: yaml
CODE:
apiVersion: admissionregistration.k8s.io/v1beta1
kind: ValidatingAdmissionPolicy
metadata:
  name: "demo-policy.example.com"
spec:
  matchConstraints:
    resourceRules:
    - apiGroups:   ["apps"]
      apiVersions: ["v1"]
      operations:  ["CREATE", "UPDATE"]
      resources:   ["deployments"]
  matchConditions:
    - name: "exclude-kube-system"
      expression: "object.metadata.namespace != 'kube-system'"
    - name: "high-replica-count"
      expression: "object.spec.replicas >= 10"
  validations:
    - expression: "object.spec.replicas <= 20"
      message: "Deployments with more than 20 replicas are not allowed"


----------------------------------------

TITLE: Defining Bootstrap Token Secret in Kubernetes
DESCRIPTION: This YAML snippet defines a Kubernetes Secret resource for a Bootstrap Token, including token ID, secret, expiration, and usage flags.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Secret
metadata:
  # Name MUST be of form "bootstrap-token-<token id>"
  name: bootstrap-token-07401b
  namespace: kube-system

# Type MUST be 'bootstrap.kubernetes.io/token'
type: bootstrap.kubernetes.io/token
stringData:
  # Human readable description. Optional.
  description: "The default bootstrap token generated by 'kubeadm init'."

  # Token ID and secret. Required.
  token-id: 07401b
  token-secret: f395accd246ae52d

  # Expiration. Optional.
  expiration: 2017-03-10T03:22:11Z

  # Allowed usages.
  usage-bootstrap-authentication: "true"
  usage-bootstrap-signing: "true"

  # Extra groups to authenticate the token as. Must start with "system:bootstrappers:"
  auth-extra-groups: system:bootstrappers:worker,system:bootstrappers:ingress

----------------------------------------

TITLE: Admission Configuration with Authentication
DESCRIPTION: Example admission control configuration file for configuring webhook authentication

LANGUAGE: yaml
CODE:
apiVersion: apiserver.config.k8s.io/v1
kind: AdmissionConfiguration
plugins:
- name: ValidatingAdmissionWebhook
  configuration:
    apiVersion: apiserver.config.k8s.io/v1
    kind: WebhookAdmissionConfiguration
    kubeConfigFile: "<path-to-kubeconfig-file>"
- name: MutatingAdmissionWebhook
  configuration:
    apiVersion: apiserver.config.k8s.io/v1
    kind: WebhookAdmissionConfiguration
    kubeConfigFile: "<path-to-kubeconfig-file>"

----------------------------------------

TITLE: Rolling Back DaemonSet to Specific Revision in Kubernetes
DESCRIPTION: This command initiates a rollback of the specified DaemonSet to a particular revision number obtained from the history command.

LANGUAGE: shell
CODE:
kubectl rollout undo daemonset <daemonset-name> --to-revision=<revision>

----------------------------------------

TITLE: Configuring JobTrackingWithFinalizers Feature Gate Stages in YAML
DESCRIPTION: YAML configuration defining the progression of the JobTrackingWithFinalizers feature gate through different Kubernetes versions, from alpha to stable, including default values for each stage.

LANGUAGE: yaml
CODE:
stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.22"
    toVersion: "1.22"
  - stage: beta
    defaultValue: false
    fromVersion: "1.23"  
    toVersion: "1.24" 
  - stage: beta
    defaultValue: true
    fromVersion: "1.25"  
    toVersion: "1.25" 
  - stage: stable
    defaultValue: true
    fromVersion: "1.26"
    toVersion: "1.28"

----------------------------------------

TITLE: Checking Pod Overhead Configuration in Kubernetes
DESCRIPTION: Command sequence for verifying Pod overhead settings and resource allocation on a node.

LANGUAGE: bash
CODE:
kubectl get pod test-pod -o jsonpath='{.spec.overhead}'
kubectl get pod test-pod -o jsonpath='{.spec.containers[*].resources.limits}'
kubectl describe node | grep test-pod -B2
POD_ID="$(sudo crictl pods --name test-pod -q)"
sudo crictl inspectp -o=json $POD_ID | grep cgroupsPath
cat /sys/fs/cgroup/memory/kubepods/podd7f4b509-cf94-4951-9417-d1087c92a5b2/memory.limit_in_bytes

----------------------------------------

TITLE: Creating a Kubernetes Secret from Files using kubectl
DESCRIPTION: This command creates a Secret named 'db-user-pass' using the contents of username.txt and password.txt files. It demonstrates how to use the --from-file flag with kubectl.

LANGUAGE: shell
CODE:
kubectl create secret generic db-user-pass \
    --from-file=./username.txt \
    --from-file=./password.txt

----------------------------------------

TITLE: Applying Pod Configuration
DESCRIPTION: This shell command applies the pod configuration file to create the pod in the 'cpu-example' namespace.

LANGUAGE: shell
CODE:
kubectl apply -f https://k8s.io/examples/pods/resource/cpu-request-limit.yaml --namespace=cpu-example

----------------------------------------

TITLE: Fetching Request Information
DESCRIPTION: Commands to retrieve information about current requests, including both basic and detailed listings.

LANGUAGE: shell
CODE:
kubectl get --raw /debug/api_priority_and_fairness/dump_requests

LANGUAGE: shell
CODE:
kubectl get --raw '/debug/api_priority_and_fairness/dump_requests?includeRequestDetails=1'

----------------------------------------

TITLE: Scaling Capacity Reservation Deployment
DESCRIPTION: Shell commands to scale the deployment and verify the scaling operation.

LANGUAGE: shell
CODE:
kubectl scale deployment capacity-reservation --replicas=5

LANGUAGE: shell
CODE:
kubectl get deployment capacity-reservation

----------------------------------------

TITLE: Checking etcd cluster health in Kubernetes
DESCRIPTION: This command uses etcdctl to check the health of the etcd cluster endpoints. It requires the appropriate certificates for authentication.

LANGUAGE: bash
CODE:
ETCDCTL_API=3 etcdctl \
--cert /etc/kubernetes/pki/etcd/peer.crt \
--key /etc/kubernetes/pki/etcd/peer.key \
--cacert /etc/kubernetes/pki/etcd/ca.crt \
--endpoints https://${HOST0}:2379 endpoint health

----------------------------------------

TITLE: Text Quote - Confidential Computing Motivation
DESCRIPTION: Quote from the CCC Whitepaper explaining the motivation for Confidential Computing and the three states of data protection.

LANGUAGE: text
CODE:
Data exists in three states: in transit, at rest, and in use. …Protecting sensitive data in all of its states is more critical than ever. Cryptography is now commonly deployed to provide both data confidentiality (stopping unauthorized viewing) and data integrity (preventing or detecting unauthorized changes). While techniques to protect data in transit and at rest are now commonly deployed, the third state - protecting data in use - is the new frontier.

----------------------------------------

TITLE: Adding bash-completion to Bash Profile
DESCRIPTION: This command adds the bash-completion script to the Bash profile. It ensures that bash-completion is loaded in all shell sessions.

LANGUAGE: bash
CODE:
brew_etc="$(brew --prefix)/etc" && [[ -r "${brew_etc}/profile.d/bash_completion.sh" ]] && . "${brew_etc}/profile.d/bash_completion.sh"

----------------------------------------

TITLE: IndexedJob Feature Gate Configuration
DESCRIPTION: YAML configuration defining the lifecycle stages and status of the IndexedJob feature gate, including its progression from alpha through stable before removal.

LANGUAGE: yaml
CODE:
title: IndexedJob
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.21"
    toVersion: "1.21"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.22"
    toVersion: "1.23"    
  - stage: stable
    defaultValue: true
    fromVersion: "1.24"
    toVersion: "1.25"    

removed: true

----------------------------------------

TITLE: IndexedJob Feature Gate Configuration
DESCRIPTION: YAML configuration defining the lifecycle stages and status of the IndexedJob feature gate, including its progression from alpha through stable before removal.

LANGUAGE: yaml
CODE:
title: IndexedJob
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.21"
    toVersion: "1.21"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.22"
    toVersion: "1.23"    
  - stage: stable
    defaultValue: true
    fromVersion: "1.24"
    toVersion: "1.25"    

removed: true

----------------------------------------

TITLE: IndexedJob Feature Gate Configuration
DESCRIPTION: YAML configuration defining the lifecycle stages and status of the IndexedJob feature gate, including its progression from alpha through stable before removal.

LANGUAGE: yaml
CODE:
title: IndexedJob
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.21"
    toVersion: "1.21"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.22"
    toVersion: "1.23"    
  - stage: stable
    defaultValue: true
    fromVersion: "1.24"
    toVersion: "1.25"    

removed: true

----------------------------------------

TITLE: ResourceClaimStatus struct definition
DESCRIPTION: Go struct representing the status of a ResourceClaim

LANGUAGE: go
CODE:
type ResourceClaimStatus struct {
  Allocation *AllocationResult `json:"allocation,omitempty"`
  DeallocationRequested bool `json:"deallocationRequested,omitempty"`
  ReservedFor []ResourceClaimConsumerReference `json:"reservedFor,omitempty"`
}

----------------------------------------

TITLE: Importing the Deployment API in Go
DESCRIPTION: Go import statement for using the Deployment API in Kubernetes client code.

LANGUAGE: go
CODE:
import "k8s.io/api/apps/v1"

----------------------------------------

TITLE: Creating Docker Registry Secret Configuration
DESCRIPTION: JSON configuration example for Docker registry authentication showing multiple registry path patterns and their corresponding authentication details.

LANGUAGE: json
CODE:
{
    "auths": {
        "my-registry.io/images": { "auth": "…" },
        "*.my-registry.io/images": { "auth": "…" }
    }
}

----------------------------------------

TITLE: Listing Kubernetes Nodes with kubectl
DESCRIPTION: Command to list all nodes in a Kubernetes cluster

LANGUAGE: shell
CODE:
kubectl get nodes

----------------------------------------

TITLE: Creating Ingress Resource
DESCRIPTION: Command to apply an Ingress resource that routes traffic to the hello-world service.

LANGUAGE: shell
CODE:
kubectl apply -f https://k8s.io/examples/service/networking/example-ingress.yaml

----------------------------------------

TITLE: Enabling Kubectl Auto-completion in Fish Shell
DESCRIPTION: Command to enable kubectl auto-completion in Fish shell by adding the completion script to the Fish configuration file. This provides command completion capabilities for kubectl commands in all shell sessions.

LANGUAGE: shell
CODE:
kubectl completion fish | source

----------------------------------------

TITLE: Setting kubectl credentials with various authentication methods
DESCRIPTION: Examples of using kubectl config set-credentials to configure user authentication in kubeconfig files. Demonstrates setting client certificates, basic auth, bearer tokens, and auth providers like GCP and OIDC.

LANGUAGE: bash
CODE:
# Set only the "client-key" field on the "cluster-admin"
# entry, without touching other values
kubectl config set-credentials cluster-admin --client-key=~/.kube/admin.key

# Set basic auth for the "cluster-admin" entry
kubectl config set-credentials cluster-admin --username=admin --password=uXFGweU9l35qcif

# Embed client certificate data in the "cluster-admin" entry
kubectl config set-credentials cluster-admin --client-certificate=~/.kube/admin.crt --embed-certs=true

# Enable the Google Compute Platform auth provider for the "cluster-admin" entry
kubectl config set-credentials cluster-admin --auth-provider=gcp

# Enable the OpenID Connect auth provider for the "cluster-admin" entry with additional arguments
kubectl config set-credentials cluster-admin --auth-provider=oidc --auth-provider-arg=client-id=foo --auth-provider-arg=client-secret=bar

# Remove the "client-secret" config value for the OpenID Connect auth provider for the "cluster-admin" entry
kubectl config set-credentials cluster-admin --auth-provider=oidc --auth-provider-arg=client-secret-

# Enable new exec auth plugin for the "cluster-admin" entry
kubectl config set-credentials cluster-admin --exec-command=/path/to/the/executable --exec-api-version=client.authentication.k8s.io/v1beta1

# Enable new exec auth plugin for the "cluster-admin" entry with interactive mode
kubectl config set-credentials cluster-admin --exec-command=/path/to/the/executable --exec-api-version=client.authentication.k8s.io/v1beta1 --exec-interactive-mode=Never

# Define new exec auth plugin arguments for the "cluster-admin" entry
kubectl config set-credentials cluster-admin --exec-arg=arg1 --exec-arg=arg2

# Create or update exec auth plugin environment variables for the "cluster-admin" entry
kubectl config set-credentials cluster-admin --exec-env=key1=val1 --exec-env=key2=val2

# Remove exec auth plugin environment variables for the "cluster-admin" entry
kubectl config set-credentials cluster-admin --exec-env=var-to-remove-

----------------------------------------

TITLE: RetainKeys Strategy Implementation
DESCRIPTION: Shows how to use the retainKeys strategy in a strategic merge patch to update deployment strategy.

LANGUAGE: yaml
CODE:
spec:
  strategy:
    $retainKeys:
    - type
    type: Recreate

----------------------------------------

TITLE: Configuring PodHostIPs Feature Gate in Kubernetes
DESCRIPTION: YAML configuration defining the lifecycle stages of the PodHostIPs feature gate. It progressed from alpha (1.28) to beta (1.29-1.30) and finally stable (1.30-1.31) before being removed.

LANGUAGE: yaml
CODE:
stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.28"
    toVersion: "1.28"
  - stage: beta
    defaultValue: true
    fromVersion: "1.29"
    toVersion: "1.30"
  - stage: stable
    defaultValue: true
    fromVersion: "1.30"
    toVersion: "1.31"
removed: true

----------------------------------------

TITLE: Configuring DelegateFSGroupToCSIDriver Feature Gate Definition
DESCRIPTION: YAML configuration defining the DelegateFSGroupToCSIDriver feature gate stages from alpha through stable, including version ranges and default values for each stage. The feature allows CSI drivers to handle fsGroup application through NodeStageVolume and NodePublishVolume calls.

LANGUAGE: yaml
CODE:
title: DelegateFSGroupToCSIDriver
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.22"
    toVersion: "1.22"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.23"
    toVersion: "1.25"    
  - stage: stable
    defaultValue: true
    fromVersion: "1.26"
    toVersion: "1.27"    

removed: true

----------------------------------------

TITLE: Pod with Split Log Streams
DESCRIPTION: YAML configuration demonstrating how to create a Pod that writes to both stdout and stderr streams.

LANGUAGE: shell
CODE:
kubectl apply -f https://k8s.io/examples/debug/counter-pod-err.yaml

----------------------------------------

TITLE: Creating Docker Image for Custom Scheduler
DESCRIPTION: Dockerfile configuration to package the kube-scheduler binary into a container image

LANGUAGE: docker
CODE:
FROM busybox
ADD ./_output/local/bin/linux/amd64/kube-scheduler /usr/local/bin/kube-scheduler

----------------------------------------

TITLE: ControllerRevision API Type Example
DESCRIPTION: Example showing the structure of a ControllerRevision type in Go with RawExtension plugin configuration

LANGUAGE: go
CODE:
type MyAPIObject struct {
	runtime.TypeMeta `json:",inline"`
	MyPlugin runtime.Object `json:"myPlugin"`
}

type PluginA struct {
	AOption string `json:"aOption"`
}

----------------------------------------

TITLE: PodTemplateSpec Definition in YAML
DESCRIPTION: Defines the structure of a PodTemplateSpec, which describes the data a pod should have when created from a template.

LANGUAGE: yaml
CODE:
metadata:
  # Standard object's metadata
spec:
  # Specification of the desired behavior of the pod

----------------------------------------

TITLE: Creating a Filesystem-hosted Static Pod Manifest in YAML
DESCRIPTION: This snippet demonstrates how to create a YAML file for a simple web server static Pod. It defines the Pod's metadata and container specification.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: static-web
  labels:
    role: myrole
spec:
  containers:
    - name: web
      image: nginx
      ports:
        - name: web
          containerPort: 80
          protocol: TCP

----------------------------------------

TITLE: Defining CSIVolumeFSGroupPolicy Feature Gate Configuration in YAML
DESCRIPTION: YAML configuration defining the lifecycle stages of the CSIVolumeFSGroupPolicy feature gate from version 1.19 to 1.25, including its progression through alpha, beta, and stable stages before removal.

LANGUAGE: yaml
CODE:
title: CSIVolumeFSGroupPolicy
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.19"
    toVersion: "1.19"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.20"
    toVersion: "1.22"    
  - stage: stable
    defaultValue: true
    fromVersion: "1.23"
    toVersion: "1.25"

removed: true

----------------------------------------

TITLE: Defining CSIVolumeFSGroupPolicy Feature Gate Configuration in YAML
DESCRIPTION: YAML configuration defining the lifecycle stages of the CSIVolumeFSGroupPolicy feature gate from version 1.19 to 1.25, including its progression through alpha, beta, and stable stages before removal.

LANGUAGE: yaml
CODE:
title: CSIVolumeFSGroupPolicy
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.19"
    toVersion: "1.19"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.20"
    toVersion: "1.22"    
  - stage: stable
    defaultValue: true
    fromVersion: "1.23"
    toVersion: "1.25"

removed: true

----------------------------------------

TITLE: Defining CSIVolumeFSGroupPolicy Feature Gate Configuration in YAML
DESCRIPTION: YAML configuration defining the lifecycle stages of the CSIVolumeFSGroupPolicy feature gate from version 1.19 to 1.25, including its progression through alpha, beta, and stable stages before removal.

LANGUAGE: yaml
CODE:
title: CSIVolumeFSGroupPolicy
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.19"
    toVersion: "1.19"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.20"
    toVersion: "1.22"    
  - stage: stable
    defaultValue: true
    fromVersion: "1.23"
    toVersion: "1.25"

removed: true

----------------------------------------

TITLE: Defining CSIVolumeFSGroupPolicy Feature Gate Configuration in YAML
DESCRIPTION: YAML configuration defining the lifecycle stages of the CSIVolumeFSGroupPolicy feature gate from version 1.19 to 1.25, including its progression through alpha, beta, and stable stages before removal.

LANGUAGE: yaml
CODE:
title: CSIVolumeFSGroupPolicy
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.19"
    toVersion: "1.19"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.20"
    toVersion: "1.22"    
  - stage: stable
    defaultValue: true
    fromVersion: "1.23"
    toVersion: "1.25"

removed: true

----------------------------------------

TITLE: Creating OpenSSL Config for Kubernetes Certificate Signing Request
DESCRIPTION: This is a configuration file for generating a Certificate Signing Request (CSR) using OpenSSL. It includes settings for subject alternative names and key usage.

LANGUAGE: ini
CODE:
[ req ]
default_bits = 2048
prompt = no
default_md = sha256
req_extensions = req_ext
distinguished_name = dn

[ dn ]
C = <country>
ST = <state>
L = <city>
O = <organization>
OU = <organization unit>
CN = <MASTER_IP>

[ req_ext ]
subjectAltName = @alt_names

[ alt_names ]
DNS.1 = kubernetes
DNS.2 = kubernetes.default
DNS.3 = kubernetes.default.svc
DNS.4 = kubernetes.default.svc.cluster
DNS.5 = kubernetes.default.svc.cluster.local
IP.1 = <MASTER_IP>
IP.2 = <MASTER_CLUSTER_IP>

[ v3_ext ]
authorityKeyIdentifier=keyid,issuer:always
basicConstraints=CA:FALSE
keyUsage=keyEncipherment,dataEncipherment
extendedKeyUsage=serverAuth,clientAuth
subjectAltName=@alt_names

----------------------------------------

TITLE: Example Seccomp Profile JSON Structure
DESCRIPTION: This JSON snippet shows the structure of a seccomp profile, including how to define default actions, error codes, and allowed syscalls.

LANGUAGE: json
CODE:
{
  "defaultAction": "SCMP_ACT_ERRNO",
  "defaultErrnoRet": 38,
  "syscalls": [
    {
      "names": [
        "adjtimex",
        "alarm",
        "bind",
        "waitid",
        "waitpid",
        "write",
        "writev"
      ],
      "action": "SCMP_ACT_ALLOW"
    }
  ]
}

----------------------------------------

TITLE: Illustrating Inline Text Styles in Markdown for Kubernetes Docs
DESCRIPTION: Demonstrates various inline text styling options available in Markdown, including bold, italic, strikethrough, underline, and monospace text.

LANGUAGE: markdown
CODE:
- **bold**
- _italic_
- ***bold italic***
- ~~strikethrough~~
- <u>underline</u>
- _<u>underline italic</u>_
- **<u>underline bold</u>**
- ***<u>underline bold italic</u>***
- `monospace text`
- **`monospace bold`**

----------------------------------------

TITLE: Configuring an HTTPRoute in Kubernetes
DESCRIPTION: This YAML snippet demonstrates how to define an HTTPRoute, which specifies routing behavior for HTTP requests from a Gateway listener to backend network endpoints.

LANGUAGE: yaml
CODE:
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: example-httproute
spec:
  parentRefs:
  - name: example-gateway
  hostnames:
  - "www.example.com"
  rules:
  - matches:
    - path:
        type: PathPrefix
        value: /login
    backendRefs:
    - name: example-svc
      port: 8080

----------------------------------------

TITLE: Approving Certificate Signing Requests
DESCRIPTION: This shell command demonstrates how to approve a Certificate Signing Request.

LANGUAGE: shell
CODE:
kubectl certificate approve <CSR-name>

----------------------------------------

TITLE: Defining a PersistentVolumeClaim in Kubernetes YAML
DESCRIPTION: Example YAML definition for a PersistentVolumeClaim resource in Kubernetes, specifying access modes, volume mode, storage request, storage class, and label selectors.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: myclaim
spec:
  accessModes:
    - ReadWriteOnce
  volumeMode: Filesystem
  resources:
    requests:
      storage: 8Gi
  storageClassName: slow
  selector:
    matchLabels:
      release: "stable"
    matchExpressions:
      - {key: environment, operator: In, values: [dev]}

----------------------------------------

TITLE: Cloning Repository for Localization
DESCRIPTION: Shell commands for cloning the Kubernetes website repository and accessing localization directory.

LANGUAGE: shell
CODE:
git clone https://github.com/<username>/website
cd website

----------------------------------------

TITLE: Installing kubectl-convert Plugin on macOS (Intel)
DESCRIPTION: Downloads and installs the kubectl-convert plugin for Intel-based Macs.

LANGUAGE: bash
CODE:
curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/darwin/amd64/kubectl-convert"

----------------------------------------

TITLE: Configuring Kubelet Parameters with YAML
DESCRIPTION: Example YAML configuration file for kubelet showing basic settings including address, port, image pulls, and eviction thresholds.

LANGUAGE: yaml
CODE:
apiVersion: kubelet.config.k8s.io/v1beta1
kind: KubeletConfiguration
address: "192.168.0.8"
port: 20250
serializeImagePulls: false
evictionHard:
    memory.available:  "100Mi"
    nodefs.available:  "10%"
    nodefs.inodesFree: "5%"
    imagefs.available: "15%"
    imagefs.inodesFree: "5%"

----------------------------------------

TITLE: Configuring HugePageStorageMediumSize Feature Gate in Kubernetes
DESCRIPTION: YAML configuration defining the lifecycle stages of the HugePageStorageMediumSize feature gate in Kubernetes. It progressed from alpha (1.18) to beta (1.19-1.21) to stable (1.22-1.24) before being removed.

LANGUAGE: yaml
CODE:
title: HugePageStorageMediumSize
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.18"
    toVersion: "1.18"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.19"
    toVersion: "1.21"    
  - stage: stable
    defaultValue: true
    fromVersion: "1.22"
    toVersion: "1.24"    

removed: true

----------------------------------------

TITLE: Setting Selector on Kubernetes Resources
DESCRIPTION: This command sets the selector on a Kubernetes resource. It can overwrite existing selectors and is currently limited to Service objects. The selector must follow specific formatting rules.

LANGUAGE: bash
CODE:
kubectl set selector (-f FILENAME | TYPE NAME) EXPRESSIONS [--resource-version=version]

----------------------------------------

TITLE: Defining RuntimeClass with Pod Overhead in Kubernetes
DESCRIPTION: YAML configuration for defining a RuntimeClass that specifies overhead resources for Kata Containers with Firecracker VM.

LANGUAGE: yaml
CODE:
apiVersion: node.k8s.io/v1
kind: RuntimeClass
metadata:
  name: kata-fc
handler: kata-fc
overhead:
  podFixed:
    memory: "120Mi"
    cpu: "250m"

----------------------------------------

TITLE: Configuring JobBackoffLimitPerIndex Feature Gate in Kubernetes YAML
DESCRIPTION: This YAML configuration defines the stages and default values for the JobBackoffLimitPerIndex feature gate in Kubernetes. It specifies two stages: alpha (version 1.28) and beta (from version 1.29), with their respective default values.

LANGUAGE: yaml
CODE:
title: JobBackoffLimitPerIndex
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha
    defaultValue: false
    fromVersion: "1.28"
    toVersion: "1.28"
  - stage: beta
    defaultValue: true
    fromVersion: "1.29"

----------------------------------------

TITLE: Interacting with Running Pods
DESCRIPTION: Commands for accessing pod logs, executing commands in containers, and debugging running pods.

LANGUAGE: bash
CODE:
kubectl logs my-pod
kubectl exec -i --tty my-pod -- /bin/sh
kubectl port-forward my-pod 5000:6000
kubectl debug my-pod -it --image=busybox:1.28

----------------------------------------

TITLE: Creating a Bootstrap Token Secret (Base64 Encoded)
DESCRIPTION: Example YAML configuration for creating a bootstrap token Secret with base64 encoded values.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Secret
metadata:
  name: bootstrap-token-5emitj
  namespace: kube-system
type: bootstrap.kubernetes.io/token
data:
  auth-extra-groups: c3lzdGVtOmJvb3RzdHJhcHBlcnM6a3ViZWFkbTpkZWZhdWx0LW5vZGUtdG9rZW4=
  expiration: MjAyMC0wOS0xM1QwNDozOToxMFo=
  token-id: NWVtaXRq
  token-secret: a3E0Z2lodnN6emduMXAwcg==
  usage-bootstrap-authentication: dHJ1ZQ==
  usage-bootstrap-signing: dHJ1ZQ==

----------------------------------------

TITLE: Creating a Bootstrap Token Secret (Base64 Encoded)
DESCRIPTION: Example YAML configuration for creating a bootstrap token Secret with base64 encoded values.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Secret
metadata:
  name: bootstrap-token-5emitj
  namespace: kube-system
type: bootstrap.kubernetes.io/token
data:
  auth-extra-groups: c3lzdGVtOmJvb3RzdHJhcHBlcnM6a3ViZWFkbTpkZWZhdWx0LW5vZGUtdG9rZW4=
  expiration: MjAyMC0wOS0xM1QwNDozOToxMFo=
  token-id: NWVtaXRq
  token-secret: a3E0Z2lodnN6emduMXAwcg==
  usage-bootstrap-authentication: dHJ1ZQ==
  usage-bootstrap-signing: dHJ1ZQ==

----------------------------------------

TITLE: Configuring ServiceTrafficDistribution Feature Gate in Kubernetes
DESCRIPTION: YAML configuration defining the ServiceTrafficDistribution feature gate stages. The feature is alpha in Kubernetes 1.30 (disabled by default) and moves to beta in 1.31 (enabled by default).

LANGUAGE: yaml
CODE:
title: ServiceTrafficDistribution
content_type: feature_gate

_build:
  list: never
  render: false

stages:
- stage: alpha 
  defaultValue: false
  fromVersion: "1.30"
  toVersion: "1.30"
- stage: beta
  defaultValue: true
  fromVersion: "1.31"

----------------------------------------

TITLE: Creating a Burstable QoS Pod in Kubernetes
DESCRIPTION: This command applies the YAML manifest to create a Pod with Burstable QoS class in the 'qos-example' namespace.

LANGUAGE: shell
CODE:
kubectl apply -f https://k8s.io/examples/pods/qos/qos-pod-2.yaml --namespace=qos-example

----------------------------------------

TITLE: Defining RuntimeClassInImageCriApi Feature Gate in YAML
DESCRIPTION: YAML configuration that specifies the RuntimeClassInImageCriApi feature gate parameters including its stage, default value, and version information. This feature enables image pulling based on pod runtime classes.

LANGUAGE: yaml
CODE:
title: RuntimeClassInImageCriApi
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.29"

----------------------------------------

TITLE: Verifying Bash Version and Shell Path
DESCRIPTION: This command displays both the Bash version and the current shell path. It's used to confirm that the newly installed Bash version is being used.

LANGUAGE: bash
CODE:
echo $BASH_VERSION $SHELL

----------------------------------------

TITLE: Blocking Kernel Module Loading in Linux
DESCRIPTION: This code snippet demonstrates how to create a configuration file to prevent specific kernel modules from being automatically loaded in Linux. It targets modules that may pose security risks in Kubernetes environments.

LANGUAGE: bash
CODE:
# DCCP is unlikely to be needed, has had multiple serious
# vulnerabilities, and is not well-maintained.
blacklist dccp

# SCTP is not used in most Kubernetes clusters, and has also had
# vulnerabilities in the past.
blacklist sctp

----------------------------------------

TITLE: Uncordoning a Kubernetes Node
DESCRIPTION: This command marks a node as schedulable after maintenance is complete.

LANGUAGE: shell
CODE:
kubectl uncordon <node-to-uncordon>

----------------------------------------

TITLE: Defining a PersistentVolumeClaim in Kubernetes YAML
DESCRIPTION: Example YAML definition for a PersistentVolumeClaim resource in Kubernetes, specifying access modes, volume mode, storage request, storage class, and label selectors.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: myclaim
spec:
  accessModes:
    - ReadWriteOnce
  volumeMode: Filesystem
  resources:
    requests:
      storage: 8Gi
  storageClassName: slow
  selector:
    matchLabels:
      release: "stable"
    matchExpressions:
      - {key: environment, operator: In, values: [dev]}

----------------------------------------

TITLE: Configuring DebuggingConfiguration in YAML
DESCRIPTION: Enables profiling and debugging options for the scheduler.

LANGUAGE: yaml
CODE:
enableProfiling: true
enableContentionProfiling: true

----------------------------------------

TITLE: Installing kubectl Binary on Linux
DESCRIPTION: This snippet demonstrates how to install the kubectl binary with root permissions to /usr/local/bin.

LANGUAGE: bash
CODE:
sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

----------------------------------------

TITLE: HTTP Create Request for Secret
DESCRIPTION: HTTP request syntax for creating a new Secret object

LANGUAGE: http
CODE:
POST /api/v1/namespaces/{namespace}/secrets

----------------------------------------

TITLE: Creating Object Count Quota
DESCRIPTION: Example showing how to create a ResourceQuota that limits the number of various Kubernetes objects in a namespace.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: ResourceQuota
metadata:
  name: object-counts
spec:
  hard:
    configmaps: "10"
    persistentvolumeclaims: "4"
    pods: "4"
    replicationcontrollers: "20"
    secrets: "10"
    services: "10"
    services.loadbalancers: "2"

----------------------------------------

TITLE: Viewing Pod Details in Kubernetes
DESCRIPTION: This command retrieves detailed information about the created Pod in YAML format.

LANGUAGE: shell
CODE:
kubectl get pod qos-demo --namespace=qos-example --output=yaml

----------------------------------------

TITLE: Pod Memory Configuration
DESCRIPTION: YAML configuration for a pod with memory request of 100MiB and limit of 200MiB.

LANGUAGE: yaml
CODE:
resources:
  requests:
    memory: 100Mi
  limits:
    memory: 200Mi

----------------------------------------

TITLE: Kubelet API Authorization Mapping
DESCRIPTION: HTTP verb to request verb mapping table showing how kubelet API endpoints are mapped to authorization attributes

LANGUAGE: markdown
CODE:
HTTP verb | request verb
----------|---------------
POST      | create
GET, HEAD | get
PUT       | update
PATCH     | patch
DELETE    | delete

----------------------------------------

TITLE: Executing kubectl Command Through SOCKS5 Proxy
DESCRIPTION: This command demonstrates how to use kubectl to interact with the Kubernetes cluster through the configured SOCKS5 proxy. It retrieves a list of pods from the cluster.

LANGUAGE: shell
CODE:
kubectl get pods

----------------------------------------

TITLE: Defining a PersistentVolumeClaim in Kubernetes YAML
DESCRIPTION: Example YAML definition for a PersistentVolumeClaim resource in Kubernetes, specifying access modes, volume mode, storage request, storage class, and label selectors.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: myclaim
spec:
  accessModes:
    - ReadWriteOnce
  volumeMode: Filesystem
  resources:
    requests:
      storage: 8Gi
  storageClassName: slow
  selector:
    matchLabels:
      release: "stable"
    matchExpressions:
      - {key: environment, operator: In, values: [dev]}

----------------------------------------

TITLE: Complete StatefulSet Cleanup
DESCRIPTION: Series of commands to completely delete a StatefulSet including its Pods and PVCs, with proper grace period handling.

LANGUAGE: shell
CODE:
grace=$(kubectl get pods <stateful-set-pod> --template '{{.spec.terminationGracePeriodSeconds}}')
kubectl delete statefulset -l app.kubernetes.io/name=MyApp
sleep $grace
kubectl delete pvc -l app.kubernetes.io/name=MyApp

----------------------------------------

TITLE: Intercepting Kubernetes Service Traffic with Telepresence
DESCRIPTION: Command syntax for creating a Telepresence intercept to route remote service traffic to a local development instance. Requires service name and port mapping configuration.

LANGUAGE: bash
CODE:
telepresence intercept $SERVICE_NAME --port $LOCAL_PORT:$REMOTE_PORT

----------------------------------------

TITLE: Generating certificates for etcd cluster members in Kubernetes
DESCRIPTION: This script generates the necessary certificates for each etcd cluster member using kubeadm. It creates server, peer, healthcheck client, and API server etcd client certificates.

LANGUAGE: bash
CODE:
kubeadm init phase certs etcd-server --config=/tmp/${HOST2}/kubeadmcfg.yaml
kubeadm init phase certs etcd-peer --config=/tmp/${HOST2}/kubeadmcfg.yaml
kubeadm init phase certs etcd-healthcheck-client --config=/tmp/${HOST2}/kubeadmcfg.yaml
kubeadm init phase certs apiserver-etcd-client --config=/tmp/${HOST2}/kubeadmcfg.yaml
cp -R /etc/kubernetes/pki /tmp/${HOST2}/
# cleanup non-reusable certificates
find /etc/kubernetes/pki -not -name ca.crt -not -name ca.key -type f -delete

kubeadm init phase certs etcd-server --config=/tmp/${HOST1}/kubeadmcfg.yaml
kubeadm init phase certs etcd-peer --config=/tmp/${HOST1}/kubeadmcfg.yaml
kubeadm init phase certs etcd-healthcheck-client --config=/tmp/${HOST1}/kubeadmcfg.yaml
kubeadm init phase certs apiserver-etcd-client --config=/tmp/${HOST1}/kubeadmcfg.yaml
cp -R /etc/kubernetes/pki /tmp/${HOST1}/
find /etc/kubernetes/pki -not -name ca.crt -not -name ca.key -type f -delete

kubeadm init phase certs etcd-server --config=/tmp/${HOST0}/kubeadmcfg.yaml
kubeadm init phase certs etcd-peer --config=/tmp/${HOST0}/kubeadmcfg.yaml
kubeadm init phase certs etcd-healthcheck-client --config=/tmp/${HOST0}/kubeadmcfg.yaml
kubeadm init phase certs apiserver-etcd-client --config=/tmp/${HOST0}/kubeadmcfg.yaml
# No need to move the certs because they are for HOST0

# clean up certs that should not be copied off this host
find /tmp/${HOST2} -name ca.key -type f -delete
find /tmp/${HOST1} -name ca.key -type f -delete

----------------------------------------

TITLE: Removing Conflicting spf13 Package
DESCRIPTION: Removes the spf13 package from the kubernetes vendor directory to avoid conflicts.

LANGUAGE: shell
CODE:
rm -rf $GOPATH/src/k8s.io/kubernetes/vendor/github.com/spf13

----------------------------------------

TITLE: Describing a Kubernetes Node
DESCRIPTION: Command to get detailed information about a specific node in the cluster, including its conditions, capacity, and allocated resources.

LANGUAGE: shell
CODE:
kubectl describe node kube-worker-1

----------------------------------------

TITLE: Verifying Generated Kubernetes API Documentation Files
DESCRIPTION: This snippet checks if the required files have been generated correctly during the API documentation build process.

LANGUAGE: shell
CODE:
[ -e "<rdocs-base>/gen-apidocs/build/index.html" ] && echo "index.html built" || echo "no index.html"\n[ -e "<rdocs-base>/gen-apidocs/build/navData.js" ] && echo "navData.js built" || echo "no navData.js"

----------------------------------------

TITLE: Pod Cleanup Commands
DESCRIPTION: Commands to clean up the demo resources by deleting pods and namespace.

LANGUAGE: shell
CODE:
kubectl delete pod cpu-demo --namespace=cpu-example
kubectl delete namespace cpu-example

----------------------------------------

TITLE: Pod Cleanup Commands
DESCRIPTION: Commands to clean up the demo resources by deleting pods and namespace.

LANGUAGE: shell
CODE:
kubectl delete pod cpu-demo --namespace=cpu-example
kubectl delete namespace cpu-example

----------------------------------------

TITLE: Configuring RunAsGroup Feature Gate in Kubernetes YAML
DESCRIPTION: This YAML configuration defines the stages and removal status of the RunAsGroup feature gate in Kubernetes. It specifies beta and stable stages with their respective version ranges and default values.

LANGUAGE: yaml
CODE:
# Removed from Kubernetes
title: RunAsGroup
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: beta 
    defaultValue: true
    fromVersion: "1.14"
    toVersion: "1.20"
  - stage: stable
    defaultValue: true
    fromVersion: "1.21"
    toVersion: "1.22"

removed: true

----------------------------------------

TITLE: Serialization Format for Quantity Type in Kubernetes
DESCRIPTION: Defines the EBNF-like grammar for the serialization format of Quantity values, including suffixes for binary and decimal SI units.

LANGUAGE: ebnf
CODE:
 \<quantity>        ::= \<signedNumber>\<suffix>

  (Note that \<suffix> may be empty, from the "" case in \<decimalSI>.)

\<digit>           ::= 0 | 1 | ... | 9 \<digits>          ::= \<digit> | \<digit>\<digits> \<number>          ::= \<digits> | \<digits>.\<digits> | \<digits>. | .\<digits> \<sign>            ::= "+" | "-" \<signedNumber>    ::= \<number> | \<sign>\<number> \<suffix>          ::= \<binarySI> | \<decimalExponent> | \<decimalSI> \<binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei

  (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)

\<decimalSI>       ::= m | "" | k | M | G | T | P | E

  (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)

\<decimalExponent> ::= "e" \<signedNumber> | "E" \<signedNumber>

----------------------------------------

TITLE: Validating Replica Count Constraints with CEL
DESCRIPTION: CEL expression to validate that the minimum replicas is less than or equal to the current replicas, which is less than or equal to the maximum replicas.

LANGUAGE: CEL
CODE:
self.minReplicas <= self.replicas && self.replicas <= self.maxReplicas

----------------------------------------

TITLE: Clear managedFields using JSON Merge Patch
DESCRIPTION: Example showing how to clear managedFields from an object using a merge patch.

LANGUAGE: yaml
CODE:
{
  "metadata": {
    "managedFields": [
      {}
    ]
  }
}

----------------------------------------

TITLE: Examples of Using kubectl label Command
DESCRIPTION: These examples demonstrate various ways to use the kubectl label command, including updating specific pods, overwriting existing labels, updating all pods in a namespace, and removing labels.

LANGUAGE: bash
CODE:
# Update pod 'foo' with the label 'unhealthy' and the value 'true'
kubectl label pods foo unhealthy=true

# Update pod 'foo' with the label 'status' and the value 'unhealthy', overwriting any existing value
kubectl label --overwrite pods foo status=unhealthy

# Update all pods in the namespace
kubectl label pods --all status=unhealthy

# Update a pod identified by the type and name in "pod.json"
kubectl label -f pod.json status=unhealthy

# Update pod 'foo' only if the resource is unchanged from version 1
kubectl label pods foo status=unhealthy --resource-version=1

# Update pod 'foo' by removing a label named 'bar' if it exists
# Does not require the --overwrite flag
kubectl label pods foo bar-

----------------------------------------

TITLE: Configuring CSIPersistentVolume Feature Gate Stages in YAML
DESCRIPTION: Defines the alpha, beta, and stable stages for the CSIPersistentVolume feature gate, including version ranges and default values. The feature is marked as removed from Kubernetes.

LANGUAGE: yaml
CODE:
---
# Removed from Kubernetes
title: CSIPersistentVolume
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.9"
    toVersion: "1.9"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.10"
    toVersion: "1.12"    
  - stage: stable
    defaultValue: true
    fromVersion: "1.13"
    toVersion: "1.16"

removed: true  
---

----------------------------------------

TITLE: Cloning and Setting Up Local Repository
DESCRIPTION: Commands to clone your forked repository and set up the upstream remote

LANGUAGE: shell
CODE:
git clone git@github.com:<github_username>/website
cd website
git remote add upstream https://github.com/kubernetes/website.git

----------------------------------------

TITLE: Adding Path-Based Routing
DESCRIPTION: YAML configuration to add path-based routing for the second version of the application.

LANGUAGE: yaml
CODE:
- path: /v2
  pathType: Prefix
  backend:
    service:
      name: web2
      port:
        number: 8080

----------------------------------------

TITLE: Applying a LimitRange for CPU Defaults in Kubernetes
DESCRIPTION: This command applies a LimitRange configuration to set default CPU requests and limits for the 'default-cpu-example' namespace.

LANGUAGE: shell
CODE:
kubectl apply -f https://k8s.io/examples/admin/resource/cpu-defaults.yaml --namespace=default-cpu-example

----------------------------------------

TITLE: Updating Encryption Configuration for Key Rotation in Kubernetes
DESCRIPTION: This YAML configuration updates the encryption configuration to rotate the encryption key for Kubernetes secrets.

LANGUAGE: yaml
CODE:
kind: EncryptionConfiguration
apiVersion: apiserver.config.k8s.io/v1
resources:
- resources:
  - secrets
  providers:
  - aescbc:
      keys:
      - name: key2
        secret: c2VjcmV0IGlzIHNlY3VyZSwgaXMgaXQ/
  - aescbc:
      keys:
      - name: key1
        secret: c2VjcmV0IGlzIHNlY3VyZQ==

----------------------------------------

TITLE: Configuring Container Security Context
DESCRIPTION: This YAML snippet demonstrates how to set a security context for a specific Container within a Pod.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: security-context-demo-2
spec:
  securityContext:
    runAsUser: 1000
  containers:
  - name: sec-ctx-demo-2
    image: gcr.io/google-samples/node-hello:1.0
    securityContext:
      runAsUser: 2000
      allowPrivilegeEscalation: false

----------------------------------------

TITLE: Accessing Files from Another Container in Kubernetes Pod
DESCRIPTION: This shell command, executed within the 'shell' container, reads the nginx configuration file from another container using the process ID.

LANGUAGE: shell
CODE:
head /proc/8/root/etc/nginx/nginx.conf

----------------------------------------

TITLE: Creating Pod with Scheduling Gates - YAML Configuration
DESCRIPTION: YAML configuration example showing how to create a Pod with scheduling gates that prevent immediate scheduling.

LANGUAGE: yaml
CODE:
{{% code_sample file="pods/pod-with-scheduling-gates.yaml" %}}

----------------------------------------

TITLE: Basic kubectl rollout pause syntax
DESCRIPTION: Shows the basic command syntax for pausing a Kubernetes resource

LANGUAGE: bash
CODE:
kubectl rollout pause RESOURCE

----------------------------------------

TITLE: Defining a CustomResourceDefinition API Version
DESCRIPTION: Required API version and import path declarations for CustomResourceDefinitions

LANGUAGE: yaml
CODE:
apiVersion: "apiextensions.k8s.io/v1"
import: "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"

----------------------------------------

TITLE: Configuring CRDValidationRatcheting Feature Gate in YAML
DESCRIPTION: Defines the stages and version ranges for the CRDValidationRatcheting feature gate. It includes alpha and beta stages with their respective default values and Kubernetes version ranges.

LANGUAGE: yaml
CODE:
title: CRDValidationRatcheting
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha
    defaultValue: false
    fromVersion: "1.28"
    toVersion: "1.29"
  - stage: beta
    defaultValue: true
    fromVersion: "1.30"

----------------------------------------

TITLE: Managing Kubectl Context and Configuration
DESCRIPTION: Commands for viewing and managing kubectl configuration, including cluster contexts, credentials, and namespace settings.

LANGUAGE: bash
CODE:
kubectl config view
KUBECONFIG=~/.kube/config:~/.kube/kubconfig2
kubectl config view --raw
kubectl config get-contexts
kubectl config current-context
kubectl config use-context my-cluster-name

----------------------------------------

TITLE: Enabling Admission Controllers in Kubernetes API Server
DESCRIPTION: Shell command demonstrating how to enable admission controllers NamespaceLifecycle and LimitRanger via kube-apiserver flags.

LANGUAGE: shell
CODE:
kube-apiserver --enable-admission-plugins=NamespaceLifecycle,LimitRanger ...

----------------------------------------

TITLE: Defining ResourceQuotaScopeSelectors Feature Gate Stages in YAML
DESCRIPTION: This YAML configuration specifies the lifecycle stages of the ResourceQuotaScopeSelectors feature gate in Kubernetes. It includes alpha, beta, and stable stages with their corresponding version ranges and default values. The feature is marked as removed.

LANGUAGE: yaml
CODE:
---
# Removed from Kubernetes
title: ResourceQuotaScopeSelectors
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.11"
    toVersion: "1.11"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.12"
    toVersion: "1.16"
  - stage: stable
    defaultValue: true
    fromVersion: "1.17"
    toVersion: "1.18"

removed: true
---

----------------------------------------

TITLE: Viewing Container Logs with Docker
DESCRIPTION: This snippet demonstrates how to view and follow logs of a container using the Docker CLI.

LANGUAGE: shell
CODE:
docker logs -f a9e

----------------------------------------

TITLE: Querying ServiceCIDR in Kubernetes
DESCRIPTION: Command to retrieve the current ServiceCIDR configuration showing the IP range allocation.

LANGUAGE: bash
CODE:
kubectl get servicecidr

----------------------------------------

TITLE: Testing DNS Resolution
DESCRIPTION: Executes nslookup command in the dnsutils pod to test DNS resolution of kubernetes.default service

LANGUAGE: shell
CODE:
kubectl exec -i -t dnsutils -- nslookup kubernetes.default

----------------------------------------

TITLE: Health Check Authorization with CEL
DESCRIPTION: CEL expression using the authorizer library to check if the principal is authorized to make HTTP GET requests to the /healthz API path.

LANGUAGE: CEL
CODE:
authorizer.path('/healthz').check('get').allowed()

----------------------------------------

TITLE: Checking DNS Configuration
DESCRIPTION: Examines the DNS configuration in the resolv.conf file within the test pod

LANGUAGE: shell
CODE:
kubectl exec -ti dnsutils -- cat /etc/resolv.conf

----------------------------------------

TITLE: Checking for Key Existence in a Map with CEL
DESCRIPTION: CEL expression to validate that an entry with the 'Available' key exists in a map.

LANGUAGE: CEL
CODE:
'Available' in self.stateCounts

----------------------------------------

TITLE: Basic kube-scheduler Command
DESCRIPTION: The basic command format for starting the Kubernetes scheduler with optional flags

LANGUAGE: bash
CODE:
kube-scheduler [flags]

----------------------------------------

TITLE: Enabling Unsafe Sysctls in Kubernetes Kubelet
DESCRIPTION: This command demonstrates how to enable specific unsafe sysctls in the Kubernetes kubelet. It allows 'kernel.msg*' and 'net.core.somaxconn' sysctls.

LANGUAGE: shell
CODE:
kubelet --allowed-unsafe-sysctls \
  'kernel.msg*,net.core.somaxconn' ...

----------------------------------------

TITLE: String Prefix Validation with CEL
DESCRIPTION: CEL expression to validate a 'health' string field has the prefix 'ok'.

LANGUAGE: CEL
CODE:
self.health.startsWith('ok')

----------------------------------------

TITLE: Post-Installation Jenkins Setup Commands
DESCRIPTION: Series of commands to retrieve the admin password and access URL for a newly installed Jenkins instance.

LANGUAGE: bash
CODE:
Notes:

1. Get your 'admin' user password by running:

  printf $(printf '\%o' `kubectl get secret --namespace default brawny-frog-jenkins -o jsonpath="{.data.jenkins-admin-password[*]}"`);echo

2. Get the Jenkins URL to visit by running these commands in the same shell:

**** NOTE: It may take a few minutes for the LoadBalancer IP to be available.                      ****

****       You can watch the status of by running 'kubectl get svc -w brawny-frog-jenkins' ****

  export SERVICE_IP=$(kubectl get svc --namespace default brawny-frog-jenkins -o jsonpath='{.status.loadBalancer.ingress[0].ip}')

  echo http://$SERVICE_IP:8080/login

----------------------------------------

TITLE: Generating Encryption Key on Windows
DESCRIPTION: PowerShell command to generate a 32-byte random key and base64 encode it on Windows systems.

LANGUAGE: powershell
CODE:
[Convert]::ToBase64String((1..32|%{[byte](Get-Random -Max 256)}))

----------------------------------------

TITLE: Kubernetes Authorization Request Example
DESCRIPTION: JSON example of a SubjectAccessReview request sent by the API server to the webhook for resource access authorization.

LANGUAGE: json
CODE:
{
  "apiVersion": "authorization.k8s.io/v1beta1",
  "kind": "SubjectAccessReview",
  "spec": {
    "resourceAttributes": {
      "namespace": "kittensandponies",
      "verb": "get",
      "group": "unicorn.example.org",
      "resource": "pods"
    },
    "user": "jane",
    "group": [
      "group1",
      "group2"
    ]
  }
}

----------------------------------------

TITLE: Defining ExecCredentialSpec Struct in Go
DESCRIPTION: Defines the ExecCredentialSpec struct holding request and runtime specific information provided by the transport. It includes fields for cluster information and interactive mode.

LANGUAGE: go
CODE:
type ExecCredentialSpec struct {
    cluster     Cluster
    interactive bool
}

----------------------------------------

TITLE: Linking to API Reference in Kubernetes Documentation
DESCRIPTION: This snippet demonstrates how to use the api-reference shortcode to create links to specific pages or sections of the Kubernetes API reference documentation.

LANGUAGE: go-html-template
CODE:
{{</* api-reference page="workload-resources/pod-v1" */>}}

{{</* api-reference page="workload-resources/pod-v1" anchor="PodSpec" */>}}

{{</* api-reference page="workload-resources/pod-v1" anchor="environment-variables" text="Environment Variables" */>}}

----------------------------------------

TITLE: Verifying Kubernetes Repository for Ubuntu/Debian
DESCRIPTION: This command displays the contents of the Kubernetes apt repository configuration file to verify if the community-owned package repository is being used.

LANGUAGE: shell
CODE:
pager /etc/apt/sources.list.d/kubernetes.list

----------------------------------------

TITLE: Defining a Pod with CPU Request and Limit Compatible with LimitRange in Kubernetes YAML
DESCRIPTION: This YAML snippet defines a Pod that specifies both CPU request and limit, which are compatible with the LimitRange. This Pod will be scheduled successfully.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: example-no-conflict-with-limitrange-cpu
spec:
  containers:
  - name: demo
    image: registry.k8s.io/pause:2.0
    resources:
      limits:
        cpu: "800m"
      requests:
        cpu: "500m"

----------------------------------------

TITLE: Defining CustomResourceValidation Feature Gate Stages in YAML
DESCRIPTION: This YAML configuration defines the lifecycle stages of the CustomResourceValidation feature gate in Kubernetes. It specifies the versions and default values for alpha, beta, and stable stages, and indicates that the feature has been removed.

LANGUAGE: yaml
CODE:
# Removed from Kubernetes
title: CustomResourceValidation
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.8"
    toVersion: "1.8"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.9"
    toVersion: "1.15"    
  - stage: stable
    defaultValue: true
    fromVersion: "1.16"
    toVersion: "1.18"

removed: true

----------------------------------------

TITLE: Defining Command and Arguments in Kubernetes Pod YAML
DESCRIPTION: This YAML configuration defines a Kubernetes pod with a single container, specifying a custom command and arguments to override the default behavior of the container image.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: command-demo
  labels:
    purpose: demonstrate-command
spec:
  containers:
  - name: command-demo-container
    image: debian
    command: ["printenv"]
    args: ["HOSTNAME", "KUBERNETES_PORT"]
  restartPolicy: OnFailure


----------------------------------------

TITLE: kubectl cp Command Syntax
DESCRIPTION: The basic syntax for using the kubectl cp command to copy files and directories to and from containers.

LANGUAGE: bash
CODE:
kubectl cp <file-spec-src> <file-spec-dest>

----------------------------------------

TITLE: Configuring DevicePluginCDIDevices Feature Gate Stages in YAML
DESCRIPTION: Defines the alpha, beta, and stable stages for the DevicePluginCDIDevices feature gate, including default values and version ranges for each stage.

LANGUAGE: yaml
CODE:
stages:
  - stage: alpha
    defaultValue: false
    fromVersion: "1.28"
    toVersion: "1.28"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.29"
    toVersion: "1.30"
  - stage: stable
    defaultValue: true
    fromVersion: "1.31"

----------------------------------------

TITLE: Regex Number Sum Validation with CEL
DESCRIPTION: CEL expression using the regex library to verify that the numbers in a string sum to less than 100.

LANGUAGE: CEL
CODE:
"1, 2, 3, 4".findAll('[0-9]+').map(x, int(x)).sum() < 100

----------------------------------------

TITLE: Map Key Validation with CEL
DESCRIPTION: CEL expression to validate the 'details' map is keyed by the items in the 'names' listSet.

LANGUAGE: CEL
CODE:
self.names.size() == self.details.size() && self.names.all(n, n in self.details)

----------------------------------------

TITLE: Defining Command and Arguments in Kubernetes Pod YAML
DESCRIPTION: This YAML configuration defines a Kubernetes pod with a single container, specifying a custom command and arguments to override the default behavior of the container image.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: command-demo
  labels:
    purpose: demonstrate-command
spec:
  containers:
  - name: command-demo-container
    image: debian
    command: ["printenv"]
    args: ["HOSTNAME", "KUBERNETES_PORT"]
  restartPolicy: OnFailure


----------------------------------------

TITLE: Disruptive Updates of Kubernetes Resources
DESCRIPTION: Demonstrates how to perform disruptive updates of Kubernetes resources using kubectl replace --force command.

LANGUAGE: shell
CODE:
kubectl replace -f https://k8s.io/examples/application/nginx/nginx-deployment.yaml --force

LANGUAGE: none
CODE:
deployment.apps/my-nginx deleted
deployment.apps/my-nginx replaced

----------------------------------------

TITLE: Declaring Kubernetes Ingress API Version and Import
DESCRIPTION: Specifies the Kubernetes Ingress API version and import path used for this resource type

LANGUAGE: yaml
CODE:
apiVersion: "networking.k8s.io/v1"
import: "k8s.io/api/networking/v1"
kind: "Ingress"

----------------------------------------

TITLE: Configuring Node Authorizer in Kubernetes API Server (YAML)
DESCRIPTION: This YAML configuration enables the Node authorizer in the Kubernetes API server. It specifies the authorization configuration with the Node authorizer type.

LANGUAGE: yaml
CODE:
apiVersion: apiserver.config.k8s.io/v1
kind: AuthorizationConfiguration
authorizers:
  ...
  - type: Node
  ...

----------------------------------------

TITLE: Creating SelfSubjectAccessReview Resource
DESCRIPTION: Example of creating a SelfSubjectAccessReview resource to query authorization for creating deployments in the dev namespace.

LANGUAGE: bash
CODE:
kubectl create -f - -o yaml << EOF
apiVersion: authorization.k8s.io/v1
kind: SelfSubjectAccessReview
spec:
  resourceAttributes:
    group: apps
    resource: deployments
    verb: create
    namespace: dev
EOF

----------------------------------------

TITLE: Creating IP Masquerade Agent
DESCRIPTION: Commands to deploy the ip-masq-agent DaemonSet and label nodes for agent deployment.

LANGUAGE: shell
CODE:
kubectl apply -f https://raw.githubusercontent.com/kubernetes-sigs/ip-masq-agent/master/ip-masq-agent.yaml

LANGUAGE: shell
CODE:
kubectl label nodes my-node node.kubernetes.io/masq-agent-ds-ready=true

----------------------------------------

TITLE: Creating Priority-Based Resource Quota
DESCRIPTION: YAML configuration showing how to create resource quotas for different priority classes (high, medium, low) in a Kubernetes cluster.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: ResourceQuota
metadata:
  name: pods-high
spec:
  hard:
    cpu: "1k"
    memory: 200Gi
    pods: "10"
  scopeSelector:
    matchExpressions:
    - operator: In
      scopeName: PriorityClass
      values: ["high"]
---
apiVersion: v1
kind: ResourceQuota
metadata:
  name: pods-medium
spec:
  hard:
    cpu: "10"
    memory: 20Gi
    pods: "10"
  scopeSelector:
    matchExpressions:
    - operator: In
      scopeName: PriorityClass
      values: ["medium"]
---
apiVersion: v1
kind: ResourceQuota
metadata:
  name: pods-low
spec:
  hard:
    cpu: "5"
    memory: 10Gi
    pods: "10"
  scopeSelector:
    matchExpressions:
    - operator: In
      scopeName: PriorityClass
      values: ["low"]

----------------------------------------

TITLE: Defining StorageVersionMigrator Feature Gate Configuration in YAML
DESCRIPTION: YAML configuration defining the StorageVersionMigrator feature gate properties including its stage (alpha), default value (false), and the Kubernetes version it was introduced in (1.30).

LANGUAGE: yaml
CODE:
title: StorageVersionMigrator
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.30"

----------------------------------------

TITLE: Basic Encryption Configuration
DESCRIPTION: Minimal YAML configuration for encrypting secrets and configmaps using the aescbc provider.

LANGUAGE: yaml
CODE:
apiVersion: apiserver.config.k8s.io/v1
kind: EncryptionConfiguration
resources:
  - resources:
      - secrets
      - configmaps
      - pandas.awesome.bears.example
    providers:
      - aescbc:
          keys:
            - name: key1
              secret: <BASE 64 ENCODED SECRET>
      - identity: {}

----------------------------------------

TITLE: Editing kube-proxy ConfigMap
DESCRIPTION: Command to edit the kube-proxy ConfigMap in the kube-system namespace, which contains the KubeProxyConfiguration.

LANGUAGE: shell
CODE:
kubectl edit cm -n kube-system kube-proxy

----------------------------------------

TITLE: Inspecting API Server Lease Object in Kubernetes
DESCRIPTION: This command retrieves the YAML representation of a specific API server Lease object. It shows the object's metadata and spec, including the holder identity and renewal time.

LANGUAGE: shell
CODE:
kubectl -n kube-system get lease apiserver-07a5ea9b9b072c4a5f3d1c3702 -o yaml

----------------------------------------

TITLE: Basic kubectl uncordon Usage
DESCRIPTION: Marks a specified node as schedulable in the Kubernetes cluster

LANGUAGE: bash
CODE:
kubectl uncordon NODE

----------------------------------------

TITLE: Configuring CRI Endpoints in Kubernetes YAML
DESCRIPTION: This YAML snippet shows how to configure separate endpoints for runtime and image services in the kubelet using command-line flags.

LANGUAGE: yaml
CODE:
---
title: Container Runtime Interface (CRI)
content_type: concept
weight: 60
---

----------------------------------------

TITLE: Feature Gate Configuration for DynamicVolumeProvisioning
DESCRIPTION: YAML configuration defining the lifecycle stages of the DynamicVolumeProvisioning feature gate in Kubernetes. Shows progression from alpha (v1.3-1.7) to stable (v1.8-1.12) before removal.

LANGUAGE: yaml
CODE:
title: DynamicVolumeProvisioning
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: true
    fromVersion: "1.3"
    toVersion: "1.7"
  - stage: stable
    defaultValue: true
    fromVersion: "1.8"
    toVersion: "1.12"    

removed: true

----------------------------------------

TITLE: Setting Service Account for Kubernetes Resources
DESCRIPTION: This command updates the service account of pod template resources. It can be used with various resource types like replicationcontroller, deployment, daemonset, job, replicaset, and statefulset.

LANGUAGE: bash
CODE:
kubectl set serviceaccount (-f FILENAME | TYPE NAME) SERVICE_ACCOUNT

----------------------------------------

TITLE: Retrieving Kubernetes EndpointSlice Information
DESCRIPTION: This shell command retrieves the names of associated EndpointSlices for the created Service.

LANGUAGE: shell
CODE:
kubectl get endpointslice

----------------------------------------

TITLE: Python Client Example
DESCRIPTION: Example of using the official Python client library to interact with the Kubernetes API.

LANGUAGE: python
CODE:
from kubernetes import client, config

config.load_kube_config()

v1=client.CoreV1Api()
print("Listing pods with their IPs:")
ret = v1.list_pod_for_all_namespaces(watch=False)
for i in ret.items:
    print("%s\t%s\t%s" % (i.status.pod_ip, i.metadata.namespace, i.metadata.name))

----------------------------------------

TITLE: Configuring CustomResourceSubresources Feature Gate in YAML
DESCRIPTION: YAML configuration defining the lifecycle stages and removal status of the CustomResourceSubresources feature gate. It progressed from alpha in 1.10, through beta in 1.11-1.15, to stable in 1.16-1.18 before being removed.

LANGUAGE: yaml
CODE:
title: CustomResourceSubresources
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.10"
    toVersion: "1.10"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.11"
    toVersion: "1.15"    
  - stage: stable
    defaultValue: true
    fromVersion: "1.16"
    toVersion: "1.18"

removed: true

----------------------------------------

TITLE: Fetching Priority Levels Debug Information
DESCRIPTION: Command to retrieve current state of all priority levels from the API server debug endpoint.

LANGUAGE: shell
CODE:
kubectl get --raw /debug/api_priority_and_fairness/dump_priority_levels

----------------------------------------

TITLE: Creating a Resource Quota in Kubernetes
DESCRIPTION: This command creates a new resource quota named 'my-quota' with specified hard limits for various resources.

LANGUAGE: bash
CODE:
kubectl create quota my-quota --hard=cpu=1,memory=1G,pods=2,services=3,replicationcontrollers=2,resourcequotas=1,secrets=5,persistentvolumeclaims=10

----------------------------------------

TITLE: Python Client Example
DESCRIPTION: Example of using the official Python client library to interact with the Kubernetes API.

LANGUAGE: python
CODE:
from kubernetes import client, config

config.load_kube_config()

v1=client.CoreV1Api()
print("Listing pods with their IPs:")
ret = v1.list_pod_for_all_namespaces(watch=False)
for i in ret.items:
    print("%s\t%s\t%s" % (i.status.pod_ip, i.metadata.namespace, i.metadata.name))

----------------------------------------

TITLE: Verifying Pod Status After Gate Removal - Bash Commands
DESCRIPTION: Commands to verify Pod status after removing scheduling gates.

LANGUAGE: bash
CODE:
kubectl get pod test-pod -o jsonpath='{.spec.schedulingGates}'
kubectl get pod test-pod -o wide

----------------------------------------

TITLE: Defining SuspendJob Feature Gate Lifecycle in YAML
DESCRIPTION: This YAML configuration outlines the lifecycle of the SuspendJob feature gate in Kubernetes. It specifies the alpha, beta, and stable stages with their respective version ranges and default values. The feature is marked as removed.

LANGUAGE: yaml
CODE:
---
# Removed from Kubernetes
title: SuspendJob
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.21"
    toVersion: "1.21"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.22"
    toVersion: "1.23"    
  - stage: stable
    defaultValue: true
    fromVersion: "1.24"
    toVersion: "1.25"    

removed: true
---

----------------------------------------

TITLE: Importing ConfigMap API in Go
DESCRIPTION: Import statement for using the ConfigMap API in Go code.

LANGUAGE: go
CODE:
import "k8s.io/api/core/v1"

----------------------------------------

TITLE: AdmissionRequest Struct Definition
DESCRIPTION: Type containing attributes for an admission request including object details, user info, and operation type. Used to make admission control decisions.

LANGUAGE: go
CODE:
type AdmissionRequest struct {
    uid                types.UID
    kind               metav1.GroupVersionKind
    resource           metav1.GroupVersionResource
    subResource        string
    requestKind        *metav1.GroupVersionKind
    requestResource    *metav1.GroupVersionResource
    requestSubResource string
    name              string
    namespace         string
    operation         Operation
    userInfo          authentication.UserInfo
    object            runtime.RawExtension
    oldObject         runtime.RawExtension
    dryRun            bool
    options           runtime.RawExtension
}

----------------------------------------

TITLE: Viewing Certificate Signing Requests in Kubernetes
DESCRIPTION: Command to view the status of certificate signing requests (CSRs) in a Kubernetes cluster using kubectl. This allows monitoring of certificate rotation requests from kubelets.

LANGUAGE: bash
CODE:
kubectl get csr

----------------------------------------

TITLE: Displaying Feature State in Kubernetes Documentation
DESCRIPTION: This snippet demonstrates how to use the feature-state shortcode to display the version and state of a documented feature in Kubernetes. It allows specifying the state (alpha, beta, deprecated, stable) and optionally the Kubernetes version.

LANGUAGE: go-html-template
CODE:
{{</* feature-state state="stable" */>}}

{{</* feature-state for_k8s_version="v1.10" state="beta" */>}}

{{</* feature-state feature_gate_name="NodeSwap" */>}}

----------------------------------------

TITLE: StorageObjectInUseProtection Feature Gate Configuration
DESCRIPTION: YAML configuration defining the lifecycle stages of the StorageObjectInUseProtection feature gate in Kubernetes. Shows progression from beta to stable stages and final removal status.

LANGUAGE: yaml
CODE:
title: StorageObjectInUseProtection
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: beta 
    defaultValue: true
    fromVersion: "1.10"
    toVersion: "1.10"
  - stage: stable
    defaultValue: true
    fromVersion: "1.11"
    toVersion: "1.24"    

removed: true

----------------------------------------

TITLE: Creating a Kubernetes Secret with Custom Key Names
DESCRIPTION: This command creates a Secret named 'db-user-pass' using files, but specifies custom key names 'username' and 'password' instead of using the file names as keys.

LANGUAGE: shell
CODE:
kubectl create secret generic db-user-pass \
    --from-file=username=./username.txt \
    --from-file=password=./password.txt

----------------------------------------

TITLE: Creating DNS Horizontal Autoscaler Deployment in Kubernetes
DESCRIPTION: This YAML configuration defines a Deployment for the DNS horizontal autoscaler. It uses the cluster-proportional-autoscaler-amd64 image and requires replacing <SCALE_TARGET> with the actual DNS Deployment name.

LANGUAGE: yaml
CODE:
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kube-dns-autoscaler
  namespace: kube-system
  labels:
    k8s-app: kube-dns-autoscaler
spec:
  selector:
    matchLabels:
      k8s-app: kube-dns-autoscaler
  template:
    metadata:
      labels:
        k8s-app: kube-dns-autoscaler
    spec:
      priorityClassName: system-cluster-critical
      securityContext:
        seccompProfile:
          type: RuntimeDefault
        supplementalGroups: [ 65534 ]
        fsGroup: 65534
      nodeSelector:
        kubernetes.io/os: linux
      containers:
      - name: autoscaler
        image: registry.k8s.io/cpa/cluster-proportional-autoscaler:1.8.4
        resources:
          requests:
            cpu: 20m
            memory: 10Mi
        command:
          - /cluster-proportional-autoscaler
          - --namespace=kube-system
          - --configmap=kube-dns-autoscaler
          - --target=<SCALE_TARGET>
          # When cluster is using large nodes(with more cores), "coresPerReplica" should dominate.
          # If using small nodes, "nodesPerReplica" should dominate.
          - --default-params={"linear":{"coresPerReplica":256,"nodesPerReplica":16,"preventSinglePointFailure":true,"includeUnschedulableNodes":true}}
          - --logtostderr=true
          - --v=2

----------------------------------------

TITLE: Uploading a Signed Certificate to Kubernetes
DESCRIPTION: This snippet shows how to upload a signed certificate back to the Kubernetes API, updating the status of the CertificateSigningRequest object.

LANGUAGE: bash
CODE:
kubectl get csr my-svc.my-namespace -o json | \
  jq '.status.certificate = "'$(base64 ca-signed-server.pem | tr -d '\n')'"' | \
  kubectl replace --raw /apis/certificates.k8s.io/v1/certificatesigningrequests/my-svc.my-namespace/status -f -

----------------------------------------

TITLE: Creating Pod Binding HTTP Endpoint
DESCRIPTION: HTTP POST endpoint for creating a binding specifically for a Pod resource.

LANGUAGE: http
CODE:
POST /api/v1/namespaces/{namespace}/pods/{name}/binding

----------------------------------------

TITLE: HTTP POST Request - Create ResourceClaimTemplate
DESCRIPTION: HTTP request format for creating a new ResourceClaimTemplate resource.

LANGUAGE: http
CODE:
POST /apis/resource.k8s.io/v1beta1/namespaces/{namespace}/resourceclaimtemplates

----------------------------------------

TITLE: Defining Accelerators Feature Gate Lifecycle in YAML
DESCRIPTION: This YAML configuration defines the lifecycle of the Accelerators feature gate in Kubernetes. It specifies two stages: alpha and deprecated, along with their respective version ranges and default values. The feature is marked as removed and replaced by Device Plugins.

LANGUAGE: yaml
CODE:
title: Accelerators
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.6"
    toVersion: "1.10"
  - stage: deprecated
    fromVersion: "1.11"
    toVersion: "1.11"

removed: true

----------------------------------------

TITLE: Basic Encryption Configuration
DESCRIPTION: Minimal YAML configuration for encrypting secrets and configmaps using the aescbc provider.

LANGUAGE: yaml
CODE:
apiVersion: apiserver.config.k8s.io/v1
kind: EncryptionConfiguration
resources:
  - resources:
      - secrets
      - configmaps
      - pandas.awesome.bears.example
    providers:
      - aescbc:
          keys:
            - name: key1
              secret: <BASE 64 ENCODED SECRET>
      - identity: {}

----------------------------------------

TITLE: Creating Bootstrap kubeconfig
DESCRIPTION: These kubectl commands create a bootstrap kubeconfig file for kubelet authentication.

LANGUAGE: shell
CODE:
kubectl config --kubeconfig=/var/lib/kubelet/bootstrap-kubeconfig set-cluster bootstrap --server='https://my.server.example.com:6443' --certificate-authority=/var/lib/kubernetes/ca.pem
kubectl config --kubeconfig=/var/lib/kubelet/bootstrap-kubeconfig set-credentials kubelet-bootstrap --token=07401b.f395accd246ae52d
kubectl config --kubeconfig=/var/lib/kubelet/bootstrap-kubeconfig set-context bootstrap --user=kubelet-bootstrap --cluster=bootstrap
kubectl config --kubeconfig=/var/lib/kubelet/bootstrap-kubeconfig use-context bootstrap

----------------------------------------

TITLE: Uncordoning a Kubernetes Node
DESCRIPTION: This snippet shows how to bring a node back online by marking it schedulable using kubectl uncordon command.

LANGUAGE: shell
CODE:
kubectl uncordon <node-to-drain>

----------------------------------------

TITLE: Restarting kubelet Service
DESCRIPTION: Commands to reload daemon and restart kubelet service after package updates.

LANGUAGE: shell
CODE:
sudo systemctl daemon-reload
sudo systemctl restart kubelet

----------------------------------------

TITLE: Defining DynamicAuditing Feature Gate Lifecycle in YAML
DESCRIPTION: This YAML snippet defines the metadata and lifecycle stages for the DynamicAuditing feature gate in Kubernetes. It specifies the feature's alpha stage, deprecation, and removal status.

LANGUAGE: yaml
CODE:
---
# Removed from Kubernetes
title: DynamicAuditing
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.13"
    toVersion: "1.18"
  - stage: deprecated
    fromVersion: "1.19"
    toVersion: "1.19"

removed: true  
---

----------------------------------------

TITLE: Uncordoning Kubernetes Node
DESCRIPTION: Command to bring a node back online by marking it schedulable.

LANGUAGE: shell
CODE:
kubectl uncordon <node-to-uncordon>

----------------------------------------

TITLE: Overriding Lists in Kubelet Configuration (YAML)
DESCRIPTION: This example shows how lists in the kubelet configuration are overridden. The entire list gets replaced during the merging process, as demonstrated with the clusterDNS field.

LANGUAGE: yaml
CODE:
apiVersion: kubelet.config.k8s.io/v1beta1
kind: KubeletConfiguration
port: 20250
serializeImagePulls: false
clusterDNS:
  - "192.168.0.9"
  - "192.168.0.8"

LANGUAGE: yaml
CODE:
apiVersion: kubelet.config.k8s.io/v1beta1
kind: KubeletConfiguration
clusterDNS:
  - "192.168.0.2"
  - "192.168.0.3"
  - "192.168.0.5"

LANGUAGE: yaml
CODE:
apiVersion: kubelet.config.k8s.io/v1beta1
kind: KubeletConfiguration
port: 20250
serializeImagePulls: false
clusterDNS:
  - "192.168.0.2"
  - "192.168.0.3"
  - "192.168.0.5"

----------------------------------------

TITLE: Using Minikube Context in Kubernetes Config
DESCRIPTION: This example demonstrates how to set the current context to the 'minikube' cluster in the kubeconfig file.

LANGUAGE: bash
CODE:
kubectl config use-context minikube

----------------------------------------

TITLE: Kubernetes Role Creation Examples
DESCRIPTION: Examples demonstrating different ways to create roles with various permissions and specifications.

LANGUAGE: bash
CODE:
  # Create a role named "pod-reader" that allows user to perform "get", "watch" and "list" on pods
  kubectl create role pod-reader --verb=get --verb=list --verb=watch --resource=pods
  
  # Create a role named "pod-reader" with ResourceName specified
  kubectl create role pod-reader --verb=get --resource=pods --resource-name=readablepod --resource-name=anotherpod
  
  # Create a role named "foo" with API Group specified
  kubectl create role foo --verb=get,list,watch --resource=rs.apps
  
  # Create a role named "foo" with SubResource specified
  kubectl create role foo --verb=get,list,watch --resource=pods,pods/status

----------------------------------------

TITLE: Checking Pod Scheduling Status - Bash Commands
DESCRIPTION: Commands to verify Pod status and scheduling gates configuration using kubectl.

LANGUAGE: bash
CODE:
kubectl get pod test-pod

LANGUAGE: bash
CODE:
kubectl get pod test-pod -o jsonpath='{.spec.schedulingGates}'

----------------------------------------

TITLE: Viewing CPU Manager State Without Strict CPU Reservation
DESCRIPTION: This console output shows the content of the CPU Manager state file when strict-cpu-reservation is not set or set to false. It displays the default CPU set available for allocation.

LANGUAGE: console
CODE:
# cat /var/lib/kubelet/cpu_manager_state
{"policyName":"static","defaultCpuSet":"0-63","checksum":1058907510}

----------------------------------------

TITLE: Monitoring StorageVersionMigration Status for CRD in Kubernetes
DESCRIPTION: This shell command retrieves the status of the StorageVersionMigration object for custom resources.

LANGUAGE: shell
CODE:
kubectl get storageversionmigration.storagemigration.k8s.io/crdsvm -o yaml

----------------------------------------

TITLE: Defining CrossNamespaceVolumeDataSource Feature Gate in YAML
DESCRIPTION: This YAML snippet defines the CrossNamespaceVolumeDataSource feature gate for Kubernetes. It specifies the feature's name, content type, build instructions, and stage information including its default value and the version it was introduced in.

LANGUAGE: yaml
CODE:
---
title: CrossNamespaceVolumeDataSource
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha
    defaultValue: false
    fromVersion: "1.26"
---

----------------------------------------

TITLE: Creating a BestEffort QoS Pod in Kubernetes
DESCRIPTION: This command applies the YAML manifest to create a Pod with BestEffort QoS class in the 'qos-example' namespace.

LANGUAGE: shell
CODE:
kubectl apply -f https://k8s.io/examples/pods/qos/qos-pod-3.yaml --namespace=qos-example

----------------------------------------

TITLE: Creating a ConfigMap from Literal Values
DESCRIPTION: Create a ConfigMap with literal key-value pairs using --from-literal.

LANGUAGE: shell
CODE:
kubectl create configmap special-config --from-literal=special.how=very --from-literal=special.type=charm

----------------------------------------

TITLE: Importing CSIStorageCapacity in Go
DESCRIPTION: Go import statement for using the CSIStorageCapacity type.

LANGUAGE: go
CODE:
import "k8s.io/api/storage/v1"

----------------------------------------

TITLE: Configuring GracefulNodeShutdown Feature Gate in YAML
DESCRIPTION: YAML configuration that defines the GracefulNodeShutdown feature gate stages, specifying its progression from alpha to beta across Kubernetes versions 1.20 and 1.21. The configuration includes default values and version ranges for each stage.

LANGUAGE: yaml
CODE:
title: GracefulNodeShutdown
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha
    defaultValue: false
    fromVersion: "1.20"
    toVersion: "1.20"
  - stage: beta
    defaultValue: true
    fromVersion: "1.21"

----------------------------------------

TITLE: Example Approved CSR Status
DESCRIPTION: YAML example showing the status conditions for an approved CertificateSigningRequest

LANGUAGE: YAML
CODE:
apiVersion: certificates.k8s.io/v1
kind: CertificateSigningRequest
...
status:
  conditions:
  - lastUpdateTime: "2020-02-08T11:37:35Z"
    lastTransitionTime: "2020-02-08T11:37:35Z"
    message: Approved by my custom approver controller
    reason: ApprovedByMyPolicy
    type: Approved

----------------------------------------

TITLE: Adding Multiple Taints to a Node in Kubernetes
DESCRIPTION: These commands demonstrate adding multiple taints with different effects to a single node.

LANGUAGE: shell
CODE:
kubectl taint nodes node1 key1=value1:NoSchedule
kubectl taint nodes node1 key1=value1:NoExecute
kubectl taint nodes node1 key2=value2:NoSchedule

----------------------------------------

TITLE: Retrieving Kubernetes CVE Feed in JSON Format
DESCRIPTION: This command retrieves the Kubernetes CVE feed in JSON format using curl. It accesses the feed from the official Kubernetes documentation website.

LANGUAGE: shell
CODE:
curl -Lv https://k8s.io/docs/reference/issues-security/official-cve-feed/index.json

----------------------------------------

TITLE: Variable Substitution for NodeLocal DNSCache Configuration - IPTABLES Mode
DESCRIPTION: Commands to substitute variables in the NodeLocal DNSCache manifest when kube-proxy is running in IPTABLES mode. This replaces placeholder values with actual cluster configuration.

LANGUAGE: bash
CODE:
sed -i "s/__PILLAR__LOCAL__DNS__/$localdns/g; s/__PILLAR__DNS__DOMAIN__/$domain/g; s/__PILLAR__DNS__SERVER__/$kubedns/g" nodelocaldns.yaml

----------------------------------------

TITLE: Creating a NodePort Service with Static Port Assignment in Kubernetes
DESCRIPTION: This YAML snippet demonstrates how to create a NodePort Service for a Minio object storage service, explicitly assigning port 30009. It illustrates the static port allocation method for NodePort Services.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Service
metadata:
  name: minio
spec:
  ports:
  - name: api
    nodePort: 30009
    port: 9000
    protocol: TCP
    targetPort: 9000
  selector:
    app: minio
  type: NodePort

----------------------------------------

TITLE: Basic kubectl wait Command Syntax
DESCRIPTION: The main syntax for the kubectl wait command, showing the basic structure and required parameters.

LANGUAGE: bash
CODE:
kubectl wait ([-f FILENAME] | resource.group/resource.name | resource.group [(-l label | --all)]) [--for=create|--for=delete|--for condition=available|--for=jsonpath='{}'[=value]]

----------------------------------------

TITLE: Enabling NGINX Ingress Controller
DESCRIPTION: Commands to enable and verify the NGINX Ingress controller installation on Minikube cluster.

LANGUAGE: shell
CODE:
minikube addons enable ingress
kubectl get pods -n ingress-nginx

----------------------------------------

TITLE: Configuring JobPodFailurePolicy Feature Gate in Kubernetes YAML
DESCRIPTION: This YAML configuration defines the stages and default values for the JobPodFailurePolicy feature gate. It specifies the feature's progression from alpha to stable across different Kubernetes versions, along with the default enablement status for each stage.

LANGUAGE: yaml
CODE:
title: JobPodFailurePolicy
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha
    defaultValue: false
    fromVersion: "1.25"
    toVersion: "1.25"
  - stage: beta
    defaultValue: true
    fromVersion: "1.26"
    toVersion: "1.30"
  - stage: stable
    defaultValue: true
    fromVersion: "1.31"

----------------------------------------

TITLE: Creating RoleBinding - Usage Examples
DESCRIPTION: Examples showing how to create role bindings for users/groups using the admin cluster role and how to bind service accounts to roles.

LANGUAGE: bash
CODE:
  # Create a role binding for user1, user2, and group1 using the admin cluster role
  kubectl create rolebinding admin --clusterrole=admin --user=user1 --user=user2 --group=group1
  
  # Create a role binding for service account monitoring:sa-dev using the admin role
  kubectl create rolebinding admin-binding --role=admin --serviceaccount=monitoring:sa-dev

----------------------------------------

TITLE: Configuring CloudDualStackNodeIPs Feature Gate in Kubernetes
DESCRIPTION: YAML configuration defining the feature gate lifecycle stages from alpha through stable, including version ranges and default values for each stage. The feature was introduced in v1.27 as alpha, moved to beta in v1.29, and became stable in v1.30.

LANGUAGE: yaml
CODE:
stages:
  - stage: alpha
    defaultValue: false
    fromVersion: "1.27"
    toVersion: "1.28"
  - stage: beta
    defaultValue: true
    fromVersion: "1.29"
    toVersion: "1.29"
  - stage: stable
    defaultValue: true
    fromVersion: "1.30"
    toVersion: "1.31"

removed: true

----------------------------------------

TITLE: Creating TLS Secret in Kubernetes
DESCRIPTION: Creates a new TLS secret named 'tls-secret' using the specified certificate and key files.

LANGUAGE: bash
CODE:
kubectl create secret tls NAME --cert=path/to/cert/file --key=path/to/key/file [--dry-run=server|client|none]

----------------------------------------

TITLE: Inspecting Kubernetes Secret contents
DESCRIPTION: These commands retrieve and decode the contents of the 'regcred' Secret, showing the stored Docker registry credentials.

LANGUAGE: shell
CODE:
kubectl get secret regcred --output=yaml

LANGUAGE: shell
CODE:
kubectl get secret regcred --output="jsonpath={.data.\.dockerconfigjson}" | base64 --decode

LANGUAGE: shell
CODE:
echo "c3R...zE2" | base64 --decode

----------------------------------------

TITLE: Direct API Access without Proxy
DESCRIPTION: Script to access the Kubernetes API directly by obtaining and using an authentication token.

LANGUAGE: shell
CODE:
# Check all possible clusters, as your .KUBECONFIG may have multiple contexts:
kubectl config view -o jsonpath='{"Cluster name\tServer\n"}{range .clusters[*]}{.name}{"\t"}{.cluster.server}{"\n"}{end}'

# Select name of cluster you want to interact with from above output:
export CLUSTER_NAME="some_server_name"

# Point to the API server referring the cluster name
APISERVER=$(kubectl config view -o jsonpath="{.clusters[?(@.name==\"$CLUSTER_NAME\")].cluster.server}")

# Create a secret to hold a token for the default service account
kubectl apply -f - <<EOF
apiVersion: v1
kind: Secret
metadata:
  name: default-token
  annotations:
    kubernetes.io/service-account.name: default
type: kubernetes.io/service-account-token
EOF

# Wait for the token controller to populate the secret with a token:
while ! kubectl describe secret default-token | grep -E '^token' >/dev/null; do
  echo "waiting for token..." >&2
  sleep 1
done

# Get the token value
TOKEN=$(kubectl get secret default-token -o jsonpath='{.data.token}' | base64 --decode)

# Explore the API with TOKEN
curl -X GET $APISERVER/api --header "Authorization: Bearer $TOKEN" --insecure

----------------------------------------

TITLE: Using kubectl config get-clusters Command with Options
DESCRIPTION: The 'kubectl config get-clusters' command with its full syntax, including flags for help documentation.

LANGUAGE: bash
CODE:
kubectl config get-clusters [flags]

----------------------------------------

TITLE: Creating Custom CronTab Resource Instance
DESCRIPTION: Example of creating a custom resource instance using the CronTab CRD

LANGUAGE: yaml
CODE:
apiVersion: "stable.example.com/v1"
kind: CronTab
metadata:
  name: my-new-cron-object
spec:
  cronSpec: "* * * * */5"
  image: my-awesome-cron-image

----------------------------------------

TITLE: Applying Recommended Labels to a Kubernetes StatefulSet
DESCRIPTION: This snippet demonstrates how to apply the recommended labels to a StatefulSet object. It includes labels for the application name, instance, version, component, part-of, and managed-by fields.

LANGUAGE: yaml
CODE:
# This is an excerpt
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app.kubernetes.io/name: mysql
    app.kubernetes.io/instance: mysql-abcxyz
    app.kubernetes.io/version: "5.7.21"
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: wordpress
    app.kubernetes.io/managed-by: Helm

----------------------------------------

TITLE: Defining Container with Resize Policies in Kubernetes
DESCRIPTION: YAML configuration showing how to define a pod with specific resize policies for CPU and memory resources. The example demonstrates setting NotRequired for CPU and RestartContainer for memory resizing.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: qos-demo-5
  namespace: qos-example
spec:
  containers:
  - name: qos-demo-ctr-5
    image: nginx
    resizePolicy:
    - resourceName: cpu
      restartPolicy: NotRequired
    - resourceName: memory
      restartPolicy: RestartContainer
    resources:
      limits:
        memory: "200Mi"
        cpu: "700m"
      requests:
        memory: "200Mi"
        cpu: "700m"

----------------------------------------

TITLE: PodTemplateList Resource Definition in YAML
DESCRIPTION: Defines the structure of a PodTemplateList resource, which represents a list of PodTemplates.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: PodTemplateList
metadata:
  # Standard list metadata
items:
  # List of pod templates

----------------------------------------

TITLE: Echo Service Definition
DESCRIPTION: Kubernetes service manifest for the echo application to enable cluster networking.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Service
metadata:
  name: echo
spec:
  ports:
    - port: 80
      targetPort: 8080
      protocol: TCP
  selector:
    app: echo

----------------------------------------

TITLE: Disabling Encryption Configuration
DESCRIPTION: Example of how to modify the encryption configuration to disable encryption by making identity the first provider.

LANGUAGE: yaml
CODE:
apiVersion: apiserver.config.k8s.io/v1
kind: EncryptionConfiguration
resources:
  - resources:
      - secrets
    providers:
      - identity: {} # add this line
      - aescbc:
          keys:
            - name: key1
              secret: <BASE 64 ENCODED SECRET>

----------------------------------------

TITLE: Merging Structure Fields in Kubelet Configuration (YAML)
DESCRIPTION: This snippet demonstrates how structure fields in the kubelet configuration are merged. It shows a main configuration file and a drop-in file, resulting in a combined configuration where specific fields are overridden.

LANGUAGE: yaml
CODE:
apiVersion: kubelet.config.k8s.io/v1beta1
kind: KubeletConfiguration
port: 20250
authorization:
  mode: Webhook
  webhook:
    cacheAuthorizedTTL: "5m"
    cacheUnauthorizedTTL: "30s"
serializeImagePulls: false
address: "192.168.0.1"

LANGUAGE: yaml
CODE:
apiVersion: kubelet.config.k8s.io/v1beta1
kind: KubeletConfiguration
authorization:
  mode: AlwaysAllow
  webhook:
    cacheAuthorizedTTL: "8m"
    cacheUnauthorizedTTL: "45s"
address: "192.168.0.8"

LANGUAGE: yaml
CODE:
apiVersion: kubelet.config.k8s.io/v1beta1
kind: KubeletConfiguration
port: 20250
serializeImagePulls: false
authorization:
  mode: AlwaysAllow
  webhook:
    cacheAuthorizedTTL: "8m"
    cacheUnauthorizedTTL: "45s"
address: "192.168.0.8"

----------------------------------------

TITLE: Verifying Strict SupplementalGroups Policy in Kubernetes
DESCRIPTION: This console snippet demonstrates how to create a Pod with Strict supplementalGroupsPolicy, verify its running status, and check the resulting process identity within the container.

LANGUAGE: console
CODE:
# Create the Pod:
$ kubectl apply -f https://k8s.io/blog/2024-08-22-Fine-grained-SupplementalGroups-control/strict-supplementalgroups-policy.yaml

# Verify that the Pod's Container is running:
$ kubectl get pod strict-supplementalgroups-policy

# Check the process identity:
kubectl exec -it strict-supplementalgroups-policy -- id

----------------------------------------

TITLE: IdentifyPodOS Feature Gate Configuration in YAML
DESCRIPTION: YAML configuration defining the lifecycle stages of the IdentifyPodOS feature gate, including its progression from alpha through stable before removal. The feature enables authoritative OS identification during API server admission.

LANGUAGE: yaml
CODE:
title: IdentifyPodOS
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.23"
    toVersion: "1.23"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.24"
    toVersion: "1.24"    
  - stage: stable
    defaultValue: true
    fromVersion: "1.25"
    toVersion: "1.26"    

removed: true

----------------------------------------

TITLE: Initial Leader Migration Configuration
DESCRIPTION: YAML configuration for leader migration showing initial controller-to-manager assignment with in-tree cloud provider.

LANGUAGE: yaml
CODE:
kind: LeaderMigrationConfiguration
apiVersion: controllermanager.config.k8s.io/v1
leaderName: cloud-provider-extraction-migration
resourceLock: leases
controllerLeaders:
  - name: route
    component: kube-controller-manager
  - name: service
    component: kube-controller-manager
  - name: cloud-node-lifecycle
    component: kube-controller-manager

----------------------------------------

TITLE: Node Import Path
DESCRIPTION: Import path for the Node API in Go code

LANGUAGE: go
CODE:
import "k8s.io/api/core/v1"

----------------------------------------

TITLE: Deleting a Kubernetes Namespace
DESCRIPTION: This snippet demonstrates how to delete a Kubernetes namespace using kubectl. Note that this action deletes all resources within the namespace.

LANGUAGE: shell
CODE:
kubectl delete namespaces <insert-some-namespace-name>

----------------------------------------

TITLE: Enabling Memory QoS Feature in Kubelet Configuration
DESCRIPTION: This YAML configuration shows how to enable the Memory QoS feature in the kubelet configuration file by setting the MemoryQoS feature gate to true.

LANGUAGE: yaml
CODE:
apiVersion: kubelet.config.k8s.io/v1beta1
kind: KubeletConfiguration
featureGates:
  MemoryQoS: true

----------------------------------------

TITLE: Executing kubectl debug Command
DESCRIPTION: The basic syntax for the kubectl debug command to debug pods or other resources.

LANGUAGE: bash
CODE:
kubectl debug (POD | TYPE[[.VERSION].GROUP]/NAME) [ -- COMMAND [args...] ]

----------------------------------------

TITLE: kubectl uncordon Example
DESCRIPTION: Example showing how to mark node 'foo' as schedulable

LANGUAGE: bash
CODE:
  # Mark node "foo" as schedulable
  kubectl uncordon foo

----------------------------------------

TITLE: Pod Listing Authorization with Label Selector
DESCRIPTION: CEL expression using the authorizer library with a label selector to check if the principal is allowed to list pods with a specific label.

LANGUAGE: CEL
CODE:
authorizer.group('').resource('pods').labelSelector('example.com/mylabel=myvalue').check('list').allowed()

----------------------------------------

TITLE: Testing Nginx Service Access with Wget
DESCRIPTION: This shell command uses wget to test access to the nginx service. It checks if the remote file exists without downloading it.

LANGUAGE: shell
CODE:
wget --spider --timeout=1 nginx

----------------------------------------

TITLE: Defining StartupProbe Feature Gate Configuration in YAML
DESCRIPTION: YAML configuration defining the lifecycle stages of the StartupProbe feature gate in Kubernetes. Shows progression from alpha (1.16) through beta (1.18-1.19) to stable (1.20-1.23) before removal.

LANGUAGE: yaml
CODE:
---
title: StartupProbe
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.16"
    toVersion: "1.17"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.18"
    toVersion: "1.19"    
  - stage: stable
    defaultValue: true
    fromVersion: "1.20"
    toVersion: "1.23"    

removed: true
---

----------------------------------------

TITLE: RoleBinding GET Request
DESCRIPTION: HTTP request to retrieve a specific RoleBinding from a namespace.

LANGUAGE: http
CODE:
GET /apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings/{name}

----------------------------------------

TITLE: Feature Gate Configuration YAML
DESCRIPTION: YAML configuration defining the feature gate stages for MatchLabelKeysInPodTopologySpread, showing its progression from alpha to beta stages with version information and default values.

LANGUAGE: yaml
CODE:
title: MatchLabelKeysInPodTopologySpread
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha
    defaultValue: false
    fromVersion: "1.25"
    toVersion: "1.26"
  - stage: beta
    defaultValue: true
    fromVersion: "1.27"

----------------------------------------

TITLE: Configuring Node Inclusion Policies for Pod Topology Spread
DESCRIPTION: Example showing how to configure nodeAffinityPolicy and nodeTaintsPolicy in pod topology spread constraints to control which nodes are considered for pod spreading calculations.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: example-pod
spec:
  # Configure a topology spread constraint
  topologySpreadConstraints:
    - maxSkew: <integer>
      # ...
      nodeAffinityPolicy: [Honor|Ignore]
      nodeTaintsPolicy: [Honor|Ignore]
  # other Pod fields go here

----------------------------------------

TITLE: Executing Kubeadm Join Phase Control-Plane-Prepare Kubeconfig Command
DESCRIPTION: This command generates the kubeconfig for new control plane components in Kubernetes. It requires an API server endpoint and supports various flags for configuration and security options.

LANGUAGE: bash
CODE:
kubeadm join phase control-plane-prepare kubeconfig [api-server-endpoint] [flags]

----------------------------------------

TITLE: Defining ServiceAccountTokenNodeBindingValidation Feature Gate Configuration
DESCRIPTION: YAML configuration defining the stages and default values for the ServiceAccountTokenNodeBindingValidation feature gate. Specifies three stages: alpha (v1.29, defaultValue: false), beta (v1.30-1.31, defaultValue: true), and stable (v1.32+, defaultValue: true).

LANGUAGE: yaml
CODE:
title: ServiceAccountTokenNodeBindingValidation
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.29"
    toVersion: "1.29"
  - stage: beta
    defaultValue: true
    fromVersion: "1.30"
    toVersion: "1.31"
  - stage: stable
    defaultValue: true
    fromVersion: "1.32"

----------------------------------------

TITLE: Basic Read-Only Volume Mount Configuration in Kubernetes
DESCRIPTION: Basic Pod configuration demonstrating a read-only volume mount using hostPath. Note that this configuration does not make sub-mounts read-only.

LANGUAGE: yaml
CODE:
---
apiVersion: v1
kind: Pod
spec:
  volumes:
    - name: mnt
      hostPath:
        path: /mnt
  containers:
    - volumeMounts:
        - name: mnt
          mountPath: /mnt
          readOnly: true

----------------------------------------

TITLE: Node IPAM Migration Configuration
DESCRIPTION: Extended YAML configuration including nodeipam controller migration settings.

LANGUAGE: yaml
CODE:
kind: LeaderMigrationConfiguration
apiVersion: controllermanager.config.k8s.io/v1
leaderName: cloud-provider-extraction-migration
resourceLock: leases
controllerLeaders:
  - name: route
    component: *
  - name: service
    component: *
  - name: cloud-node-lifecycle
    component: *
  - name: nodeipam
    component: *

----------------------------------------

TITLE: Defining ResourceClaimTemplate in YAML
DESCRIPTION: Example YAML definition of a ResourceClaimTemplate resource. It includes the apiVersion, kind, metadata, and spec fields.

LANGUAGE: yaml
CODE:
apiVersion: resource.k8s.io/v1alpha3
kind: ResourceClaimTemplate
metadata:
  name: example-template
spec:
  metadata:
    labels:
      app: example
  spec:
    resourceClassName: example-resource-class
    parameters:
      key: value

----------------------------------------

TITLE: Querying DNS in Shell Init Container
DESCRIPTION: Shell command to wait for a service to be created by repeatedly querying DNS.

LANGUAGE: Shell
CODE:
for i in {1..100}; do sleep 1; if nslookup myservice; then exit 0; fi; done; exit 1

----------------------------------------

TITLE: Configuring AdmissionWebhookMatchConditions Feature Gate Stages in YAML
DESCRIPTION: Defines the alpha, beta, and stable stages for the AdmissionWebhookMatchConditions feature gate, specifying version ranges and default values for each stage.

LANGUAGE: yaml
CODE:
stages:
  - stage: alpha
    defaultValue: false
    fromVersion: "1.27"
    toVersion: "1.27"
  - stage: beta
    defaultValue: true
    fromVersion: "1.28"
    toVersion: "1.29"
  - stage: stable
    defaultValue: true
    fromVersion: "1.30"

----------------------------------------

TITLE: Python Worker Implementation
DESCRIPTION: Python worker program that processes items from the Redis work queue

LANGUAGE: python
CODE:
#!/usr/bin/env python

import time
import rediswq
import os
from time import sleep

host = os.getenv("REDIS_SERVICE_HOST", "redis")
redis_pwd = os.getenv("REDIS_PASSWORD")

q = rediswq.RedisWQ(name="job2", host=host)
print("Worker with session {} ".format(q.sessionID()))
print("Initial queue state: empty={}".format(str(q.empty())))
while not q.empty():
    item = q.lease(lease_secs=10, block=True, timeout=2)
    if item is not None:
        itemstr = item.decode("utf=8")
        print("Working on " + itemstr)
        time.sleep(10)
        q.complete(item)
    else:
        print("Waiting for work")
print("Queue empty, exiting")

----------------------------------------

TITLE: Installing kubelet and kubectl on CentOS/RHEL
DESCRIPTION: Command to install kubelet and kubectl packages on CentOS, RHEL or Fedora systems.

LANGUAGE: shell
CODE:
sudo yum install -y kubelet-'{{< skew currentVersion >}}.x-*' kubectl-'{{< skew currentVersion >}}.x-*' --disableexcludes=kubernetes

----------------------------------------

TITLE: Scaling Down StatefulSet in Source Cluster
DESCRIPTION: Scales down the Redis cluster StatefulSet in the source cluster by 1 replica, removing redis-redis-cluster-5.

LANGUAGE: bash
CODE:
kubectl patch sts redis-redis-cluster -p '{"spec": {"replicas": 5}}'

----------------------------------------

TITLE: Using kubectl auth Command
DESCRIPTION: Basic syntax for using the kubectl auth command to inspect authorization in Kubernetes. The command supports various flags for authentication and connection configuration.

LANGUAGE: bash
CODE:
kubectl auth [flags]

----------------------------------------

TITLE: Basic ABAC Policy for Full Access
DESCRIPTION: JSON policy allowing user 'alice' full access to all resources across all namespaces and API groups

LANGUAGE: json
CODE:
{"apiVersion": "abac.authorization.kubernetes.io/v1beta1", "kind": "Policy", "spec": {"user": "alice", "namespace": "*", "resource": "*", "apiGroup": "*"}}

----------------------------------------

TITLE: Creating a ClusterRoleBinding in Kubernetes
DESCRIPTION: This command creates a cluster role binding for a particular cluster role. It allows binding users, groups, or service accounts to a cluster role.

LANGUAGE: bash
CODE:
kubectl create clusterrolebinding NAME --clusterrole=NAME [--user=username] [--group=groupname] [--serviceaccount=namespace:serviceaccountname] [--dry-run=server|client|none]

----------------------------------------

TITLE: Running kubectl proxy with Various Configuration Options
DESCRIPTION: Examples of using the kubectl proxy command with different configurations, including proxying the entire Kubernetes API, serving static files, and customizing API prefixes.

LANGUAGE: bash
CODE:
# To proxy all of the Kubernetes API and nothing else
kubectl proxy --api-prefix=/

# To proxy only part of the Kubernetes API and also some static files
# You can get pods info with 'curl localhost:8001/api/v1/pods'
kubectl proxy --www=/my/files --www-prefix=/static/ --api-prefix=/api/

# To proxy the entire Kubernetes API at a different root
# You can get pods info with 'curl localhost:8001/custom/api/v1/pods'
kubectl proxy --api-prefix=/custom/

# Run a proxy to the Kubernetes API server on port 8011, serving static content from ./local/www/
kubectl proxy --port=8011 --www=./local/www/

# Run a proxy to the Kubernetes API server on an arbitrary local port
# The chosen port for the server will be output to stdout
kubectl proxy --port=0

# Run a proxy to the Kubernetes API server, changing the API prefix to k8s-api
# This makes e.g. the pods API available at localhost:8001/k8s-api/v1/pods/
kubectl proxy --api-prefix=/k8s-api

----------------------------------------

TITLE: Creating a ClusterRoleBinding in Kubernetes
DESCRIPTION: This command creates a cluster role binding for a particular cluster role. It allows binding users, groups, or service accounts to a cluster role.

LANGUAGE: bash
CODE:
kubectl create clusterrolebinding NAME --clusterrole=NAME [--user=username] [--group=groupname] [--serviceaccount=namespace:serviceaccountname] [--dry-run=server|client|none]

----------------------------------------

TITLE: StorageVersionMigration Resource Schema
DESCRIPTION: Complete type definition for the StorageVersionMigration resource including metadata, spec and status fields.

LANGUAGE: yaml
CODE:
apiVersion: storagemigration.k8s.io/v1alpha1
kind: StorageVersionMigration
metadata:
  # Standard object metadata
spec:
  continueToken: string
  resource:
    group: string
    resource: string
    version: string
status:
  conditions:
  - status: string
    type: string
    lastUpdateTime: time
    message: string
    reason: string
  resourceVersion: string

----------------------------------------

TITLE: ValidatingWebhookConfiguration Example
DESCRIPTION: Example YAML showing basic structure of a ValidatingWebhookConfiguration resource with required fields

LANGUAGE: yaml
CODE:
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: example-webhook
webhooks:
- name: webhook.example.com
  admissionReviewVersions: ["v1"]
  clientConfig:
    service:
      name: webhook-service
      namespace: webhook-ns
  sideEffects: None

----------------------------------------

TITLE: Basic kubectl rollout undo syntax
DESCRIPTION: Shows the basic command syntax for rolling back a deployment.

LANGUAGE: bash
CODE:
kubectl rollout undo (TYPE NAME | TYPE/NAME) [flags]

----------------------------------------

TITLE: CEL Expression Example
DESCRIPTION: Example of using CEL expressions for device selection in a DeviceClass

LANGUAGE: json
CODE:
device.driver
device.attributes["dra.example.com"].model
device.attributes["ext.example.com"].family
device.capacity["dra.example.com"].modules

----------------------------------------

TITLE: Cleanup Commands
DESCRIPTION: Commands to delete the test Pod and namespace

LANGUAGE: shell
CODE:
kubectl delete pod constraints-cpu-demo --namespace=constraints-cpu-example
kubectl delete namespace constraints-cpu-example

----------------------------------------

TITLE: Joining a Windows node to a Kubernetes cluster using kubeadm
DESCRIPTION: Executes the kubeadm join command to add the Windows node to an existing Kubernetes cluster. The command requires a token and discovery token CA cert hash, which can be obtained from the control plane node.

LANGUAGE: bash
CODE:
kubeadm join --token <token> <control-plane-host>:<control-plane-port> --discovery-token-ca-cert-hash sha256:<hash>

----------------------------------------

TITLE: Generating New Manifest Files for Kubernetes Components
DESCRIPTION: Commands to generate new manifest files for Kubernetes control plane components and local etcd using kubeadm.

LANGUAGE: shell
CODE:
# For Kubernetes control plane components
kubeadm init phase control-plane <component-name> --config <config-file>
# For local etcd
kubeadm init phase etcd local --config <config-file>

----------------------------------------

TITLE: Excluding Specific Health Checks
DESCRIPTION: Example showing how to exclude specific health checks (etcd in this case) while getting verbose output.

LANGUAGE: shell
CODE:
curl -k 'https://localhost:6443/readyz?verbose&exclude=etcd'

----------------------------------------

TITLE: Defining KubeletCgroupDriverFromCRI Feature Gate Configuration in YAML
DESCRIPTION: YAML configuration defining the feature gate stages for KubeletCgroupDriverFromCRI, including alpha stage from version 1.28 to 1.30 (defaultValue: false) and beta stage from version 1.31 (defaultValue: true).

LANGUAGE: yaml
CODE:
title: KubeletCgroupDriverFromCRI
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha
    defaultValue: false
    fromVersion: "1.28"
    toVersion: "1.30"
  - stage: beta
    defaultValue: true
    fromVersion: "1.31"

----------------------------------------

TITLE: Installing and Starting CRI-O on DEB-based Distributions
DESCRIPTION: These commands install the CRI-O and Kubernetes packages from the newly added repositories and start the CRI-O service on DEB-based distributions.

LANGUAGE: bash
CODE:
apt-get update
apt-get install -y cri-o kubelet kubeadm kubectl

LANGUAGE: bash
CODE:
systemctl start crio.service

----------------------------------------

TITLE: Creating Kubernetes RoleBinding for New User
DESCRIPTION: Create a RoleBinding to associate the new user with the defined Role, granting the specified permissions.

LANGUAGE: shell
CODE:
kubectl create rolebinding developer-binding-myuser --role=developer --user=myuser

----------------------------------------

TITLE: Querying Kubelet API for Pod Information
DESCRIPTION: Commands to query the kubelet's API endpoints for health status and Pod information in standalone mode.

LANGUAGE: bash
CODE:
curl http://localhost:10255/healthz?verbose
curl http://localhost:10255/pods | jq '.'
curl http://localhost:10255/pods | jq '.items[].status.podIP'

----------------------------------------

TITLE: Updating Kubernetes Resource Annotations
DESCRIPTION: Shows how to add or update annotations on Kubernetes resources using kubectl annotate command.

LANGUAGE: shell
CODE:
kubectl annotate pods my-nginx-v4-9gw19 description='my frontend running nginx'
kubectl get pods my-nginx-v4-9gw19 -o yaml

LANGUAGE: shell
CODE:
apiVersion: v1
kind: pod
metadata:
  annotations:
    description: my frontend running nginx
...

----------------------------------------

TITLE: PersistentVolumeClaim API Definition
DESCRIPTION: Core API definition for PersistentVolumeClaim resource showing the apiVersion and import path

LANGUAGE: yaml
CODE:
apiVersion: "v1"
import: "k8s.io/api/core/v1"
kind: "PersistentVolumeClaim"

----------------------------------------

TITLE: Querying Pod Metrics Using kubectl
DESCRIPTION: Example of retrieving pod metrics data using kubectl and jq for formatting. Shows how to access metrics for a specific pod in the kube-system namespace.

LANGUAGE: shell
CODE:
kubectl get --raw "/apis/metrics.k8s.io/v1beta1/namespaces/kube-system/pods/kube-scheduler-minikube" | jq '.'

----------------------------------------

TITLE: Accessing API without kubectl Proxy
DESCRIPTION: Script to access the Kubernetes API directly without using kubectl proxy.

LANGUAGE: shell
CODE:
# View all clusters, as your .kubeconfig may have multiple contexts
kubectl config view -o jsonpath='{"Cluster name\tServer\n"}{range .clusters[*]}{.name}{"	"}{.cluster.server}{"
"}{end}'

# Select the cluster you want to interact with
export CLUSTER_NAME="some_server_name"

# Point to the API server referring the cluster name
APISERVER=$(kubectl config view -o jsonpath="{.clusters[?(@.name==\"$CLUSTER_NAME\")].cluster.server}")

# Create a secret to hold a token for the default service account
kubectl apply -f - <<EOF
apiVersion: v1
kind: Secret
metadata:
  name: default-token
  annotations:
    kubernetes.io/service-account.name: default
type: kubernetes.io/service-account-token
EOF

# Wait for the token controller to populate the secret with a token:
while ! kubectl describe secret default-token | grep -E '^token' >/dev/null; do
  echo "waiting for token..." >&2
  sleep 1
done

# Get the token
TOKEN=$(kubectl get secret default-token -o jsonpath='{.data.token}' | base64 --decode)

# Use the token to access the API
curl -X GET $APISERVER/api --header "Authorization: Bearer $TOKEN" --insecure

----------------------------------------

TITLE: Creating Binding HTTP Endpoint
DESCRIPTION: HTTP POST endpoint for creating a new Binding resource in a namespace.

LANGUAGE: http
CODE:
POST /api/v1/namespaces/{namespace}/bindings

----------------------------------------

TITLE: Defining NFTablesProxyMode Feature Gate Configuration in YAML
DESCRIPTION: YAML configuration defining the NFTablesProxyMode feature gate stages, including its progression from alpha to beta status, version ranges, and default values for each stage.

LANGUAGE: yaml
CODE:
title: NFTablesProxyMode
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha
    defaultValue: false
    fromVersion: "1.29"
    toVersion: "1.30"
  - stage: beta
    defaultValue: true
    fromVersion: "1.31"

----------------------------------------

TITLE: Joining a Windows node to a Kubernetes cluster using kubeadm
DESCRIPTION: Executes the kubeadm join command to add the Windows node to an existing Kubernetes cluster. The command requires a token and discovery token CA cert hash, which can be obtained from the control plane node.

LANGUAGE: bash
CODE:
kubeadm join --token <token> <control-plane-host>:<control-plane-port> --discovery-token-ca-cert-hash sha256:<hash>

----------------------------------------

TITLE: Advanced IP Masquerade ConfigMap with Link Local
DESCRIPTION: Extended YAML configuration that includes link local handling settings.

LANGUAGE: yaml
CODE:
nonMasqueradeCIDRs:
  - 10.0.0.0/8
resyncInterval: 60s
masqLinkLocal: true

----------------------------------------

TITLE: HTML Table Structure for Kubeconfig Options
DESCRIPTION: HTML table structure defining the layout and content for kubeconfig command options, including help flag details.

LANGUAGE: html
CODE:
<table style="width: 100%; table-layout: fixed;">
<colgroup>
<col span="1" style="width: 10px;" />
<col span="1" />
</colgroup>
<tbody>
<tr>
<td colspan="2">-h, --help</td>
</tr>
<tr>
<td></td><td style="line-height: 130%; word-wrap: break-word;"><p>help for kubeconfig</p></td>
</tr>
</tbody>
</table>

----------------------------------------

TITLE: Creating Source IP Demo Application
DESCRIPTION: Creates a deployment running a small nginx webserver that echoes back the source IP of requests through an HTTP header.

LANGUAGE: shell
CODE:
kubectl create deployment source-ip-app --image=registry.k8s.io/echoserver:1.10

----------------------------------------

TITLE: Defining a StorageClass for CSI Dynamic Provisioning in Kubernetes
DESCRIPTION: This YAML snippet defines a StorageClass that enables dynamic provisioning of 'fast-storage' volumes using a CSI plugin called 'com.example.csi-driver'. It specifies parameters for the storage type and secrets for provisioning.

LANGUAGE: yaml
CODE:
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: fast-storage
provisioner: com.example.csi-driver
parameters:
  type: pd-ssd
  csiProvisionerSecretName: mysecret
  csiProvisionerSecretNamespace: mynamespace

----------------------------------------

TITLE: Defining AuthConfig Struct in Go
DESCRIPTION: Defines the structure for AuthConfig, which contains authentication information for a container registry. Currently supports username/password authentication.

LANGUAGE: go
CODE:
type AuthConfig struct {
    Username string `json:"username"`
    Password string `json:"password"`
}

----------------------------------------

TITLE: Creating Nginx Deployment in Kubernetes
DESCRIPTION: This snippet shows how to create an nginx deployment using kubectl. It creates a deployment named 'nginx' using the nginx image.

LANGUAGE: console
CODE:
kubectl create deployment nginx --image=nginx

----------------------------------------

TITLE: Basic Go Project Structure with Doc Package
DESCRIPTION: Initial Go package setup with group and version information for CRD

LANGUAGE: go
CODE:
// +groupName=stable.example.com
// +versionName=v1
package v1

----------------------------------------

TITLE: Pod Creation Authorization Check with CEL
DESCRIPTION: CEL expression using the authorizer library to check if the principal is allowed to create pods in the 'default' namespace.

LANGUAGE: CEL
CODE:
authorizer.group('').resource('pods').namespace('default').check('create').allowed()

----------------------------------------

TITLE: Importing the MutatingWebhookConfiguration API
DESCRIPTION: Import statement for using the MutatingWebhookConfiguration API in Go code.

LANGUAGE: go
CODE:
import "k8s.io/api/admissionregistration/v1"

----------------------------------------

TITLE: Defining SeccompProfile with OCI Base Profile in Kubernetes
DESCRIPTION: YAML configuration for creating a SeccompProfile that references a base profile from an OCI artifact registry. The profile allows the 'uname' syscall while inheriting syscalls from a runc base profile.

LANGUAGE: yaml
CODE:
apiVersion: security-profiles-operator.x-k8s.io/v1beta1
kind: SeccompProfile
metadata:
  name: test
spec:
  defaultAction: SCMP_ACT_ERRNO
  baseProfileName: oci://ghcr.io/security-profiles/runc:v1.1.5
  syscalls:
    - action: SCMP_ACT_ALLOW
      names:
        - uname

----------------------------------------

TITLE: CSINode Object YAML Example
DESCRIPTION: This YAML snippet shows an example of a CSINode object, displaying the migrated in-tree plugin and installed CSI driver information.

LANGUAGE: yaml
CODE:
- apiVersion: storage.k8s.io/v1
  kind: CSINode
  metadata:
    annotations:
      storage.alpha.kubernetes.io/migrated-plugins: kubernetes.io/gce-pd
    name: test-node
    ...
  spec:
    drivers:
      name: pd.csi.storage.gke.io
      ...

----------------------------------------

TITLE: ClusterRoleList Structure
DESCRIPTION: Defines the structure for a list of ClusterRole resources returned by list operations

LANGUAGE: yaml
CODE:
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleList
metadata:
  resourceVersion: "" 
items:
- {}

----------------------------------------

TITLE: Defining PodMetrics Resource in Kubernetes YAML
DESCRIPTION: YAML definition for the PodMetrics resource type in the Kubernetes Metrics API v1beta1. It specifies metadata, timestamp, window, and containers fields for pod resource usage metrics.

LANGUAGE: yaml
CODE:
apiVersion: metrics.k8s.io/v1beta1
kind: PodMetrics
metadata:
  # Standard object's metadata
spec:
  timestamp: # meta/v1.Time
  window: # meta/v1.Duration
  containers: # []ContainerMetrics

----------------------------------------

TITLE: Disabling etcd Options in Cozystack API Server
DESCRIPTION: Code snippet showing how etcd options are disabled in the Cozystack API server implementation.

LANGUAGE: go
CODE:
// Disabling etcd options
RecommendedOptions.Etcd = nil

----------------------------------------

TITLE: Creating Kubernetes NodePort Service
DESCRIPTION: Shell command to create a NodePort Service that exposes the Hello World Deployment.

LANGUAGE: shell
CODE:
kubectl expose deployment hello-world --type=NodePort --name=example-service

----------------------------------------

TITLE: Pod Configuration with CPU Request and Limit
DESCRIPTION: YAML configuration for a pod specifying CPU request of 0.5 CPU and limit of 1 CPU with container arguments.

LANGUAGE: yaml
CODE:
resources:
  limits:
    cpu: "1"
  requests:
    cpu: 500m

----------------------------------------

TITLE: Displaying CSI Migration Timeline and Status Table in Markdown
DESCRIPTION: This markdown table shows the current and targeted releases for each individual storage driver's CSI migration progress, including Alpha, Beta, GA stages, and target removal dates.

LANGUAGE: markdown
CODE:
| Driver           | Alpha         | Beta (in-tree deprecated) | Beta (on-by-default) | GA            | Target "in-tree plugin" removal |
| ---------------- | ------------- | ------------------------- | -------------------- | ------------- | ------------------------------- |
| AWS EBS          | 1.14          | 1.17                      | 1.23                 | 1.25          | 1.27 (Target)                   |
| Azure Disk       | 1.15          | 1.19                      | 1.23                 | 1.24          | 1.26 (Target)                   |
| Azure File       | 1.15          | 1.21                      | 1.24                 | 1.26 (Target) | 1.28 (Target)                   |
| Ceph FS          | 1.26 (Target) |                           |                      |               |                                 |
| Ceph RBD         | 1.23          | 1.26 (Target)             | 1.27 (Target)        | 1.28 (Target) | 1.30 (Target)                   |
| GCE PD           | 1.14          | 1.17                      | 1.23                 | 1.25          | 1.27 (Target)                   |
| OpenStack Cinder | 1.14          | 1.18                      | 1.21                 | 1.24          | 1.26 (Target)                   |
| Portworx         | 1.23          | 1.25                      | 1.26 (Target)        | 1.27 (Target) | 1.29 (Target)                   |
| vSphere          | 1.18          | 1.19                      | 1.25                 | 1.26 (Target) | 1.28 (Target)                   |

----------------------------------------

TITLE: Querying Node Metrics with kubectl in Kubernetes
DESCRIPTION: This command uses kubectl to send a proxied request to the stats summary API for a node named 'minikube'. It retrieves raw metric data from the kubelet's Summary API.

LANGUAGE: shell
CODE:
kubectl get --raw "/api/v1/nodes/minikube/proxy/stats/summary"

----------------------------------------

TITLE: Removing a Stuck Pod from Kubernetes Cluster
DESCRIPTION: This command removes a pod stuck in 'Unknown' state from the cluster by patching its metadata to remove finalizers.

LANGUAGE: shell
CODE:
kubectl patch pod <pod> -p '{"metadata":{"finalizers":null}}'

----------------------------------------

TITLE: Creating a Pod Disruption Budget with Percentage Availability
DESCRIPTION: This command creates a pod disruption budget named my-pdb that selects all pods with the app=nginx label and requires at least half of the selected pods to be available at any point in time.

LANGUAGE: bash
CODE:
kubectl create pdb my-pdb --selector=app=nginx --min-available=50%

----------------------------------------

TITLE: Executing kubectl cordon Command in Kubernetes
DESCRIPTION: The kubectl cordon command marks a specified node as unschedulable. This prevents new pods from being scheduled to run on the node, but does not affect existing pods.

LANGUAGE: shell
CODE:
kubectl cordon NODE

----------------------------------------

TITLE: Kubernetes Lease API Version Declaration
DESCRIPTION: Core API version and import path declarations for the Lease resource

LANGUAGE: yaml
CODE:
apiVersion: coordination.k8s.io/v1
import "k8s.io/api/coordination/v1"

----------------------------------------

TITLE: VolumeAttributesClass HTTP GET Operation
DESCRIPTION: HTTP request format for retrieving a specific VolumeAttributesClass resource

LANGUAGE: http
CODE:
GET /apis/storage.k8s.io/v1beta1/volumeattributesclasses/{name}

----------------------------------------

TITLE: Kubelet Events Access Policy
DESCRIPTION: JSON policy allowing kubelet to read and write events across all namespaces

LANGUAGE: json
CODE:
{"apiVersion": "abac.authorization.kubernetes.io/v1beta1", "kind": "Policy", "spec": {"user": "kubelet", "namespace": "*", "resource": "events"}}

----------------------------------------

TITLE: Importing the ValidatingAdmissionPolicyBinding API
DESCRIPTION: Import statement for using the ValidatingAdmissionPolicyBinding API in Go

LANGUAGE: go
CODE:
import "k8s.io/api/admissionregistration/v1"

----------------------------------------

TITLE: Viewing Init Container Logs
DESCRIPTION: Command to access logs from a specific init container within a pod.

LANGUAGE: shell
CODE:
kubectl logs <pod-name> -c <init-container-2>

----------------------------------------

TITLE: Scaling a Deployment in a Specific Namespace
DESCRIPTION: This snippet demonstrates how to scale a Kubernetes Deployment in a specific namespace using kubectl.

LANGUAGE: shell
CODE:
kubectl create deployment cattle --image=registry.k8s.io/serve_hostname -n=production
kubectl scale deployment cattle --replicas=5 -n=production

----------------------------------------

TITLE: Applying Scaled Kubernetes Deployment YAML
DESCRIPTION: This shell command applies the scaled Deployment YAML file to increase the number of replicas in the nginx deployment.

LANGUAGE: shell
CODE:
kubectl apply -f https://k8s.io/examples/application/deployment-scale.yaml

----------------------------------------

TITLE: Filtering Container Images by Pod Label in Kubernetes
DESCRIPTION: This command retrieves Container images for Pods with a specific label (app=nginx in this case). It demonstrates how to use the -l flag for label filtering in combination with jsonpath for output formatting.

LANGUAGE: shell
CODE:
kubectl get pods --all-namespaces -o jsonpath="{.items[*].spec.containers[*].image}" -l app=nginx

----------------------------------------

TITLE: Testing Frontend-Backend Connection
DESCRIPTION: Shell command to send a request to the frontend service, which proxies to the backend.

LANGUAGE: shell
CODE:
curl http://${EXTERNAL_IP} # replace this with the EXTERNAL-IP you saw earlier

----------------------------------------

TITLE: Cleaning Up Namespace
DESCRIPTION: Removes the test namespace and all its resources.

LANGUAGE: shell
CODE:
kubectl delete namespace default-mem-example

----------------------------------------

TITLE: Creating and Verifying Extended Resource Pod
DESCRIPTION: Shell commands to create a Pod with extended resources and verify its status.

LANGUAGE: shell
CODE:
kubectl apply -f https://k8s.io/examples/pods/resource/extended-resource-pod.yaml
kubectl get pod extended-resource-demo
kubectl describe pod extended-resource-demo

----------------------------------------

TITLE: Checking IP Masquerade Rules with IPTables
DESCRIPTION: Command to display the IP masquerade rules configured by the ip-masq-agent in the NAT table.

LANGUAGE: shell
CODE:
iptables -t nat -L IP-MASQ-AGENT

----------------------------------------

TITLE: HTTP POST Checkpoint Request
DESCRIPTION: API endpoint for creating a checkpoint of a specific container within a pod. Requires namespace, pod name, and container name as path parameters. Optional timeout parameter can be specified in query string.

LANGUAGE: http
CODE:
POST /checkpoint/{namespace}/{pod}/{container}

----------------------------------------

TITLE: PriorityClass API Definition in YAML
DESCRIPTION: Defines the API schema for PriorityClass resources in Kubernetes, including api version and import path.

LANGUAGE: yaml
CODE:
apiVersion: scheduling.k8s.io/v1
import: k8s.io/api/scheduling/v1

----------------------------------------

TITLE: Service Definition for Hostnames
DESCRIPTION: Service configuration that exposes the hostname deployment

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Service
metadata:
  labels:
    app: hostnames
  name: hostnames
spec:
  selector:
    app: hostnames
  ports:
  - name: default
    protocol: TCP
    port: 80
    targetPort: 9376

----------------------------------------

TITLE: Implementing Read-only Filesystem Validation Policy in Kubernetes
DESCRIPTION: A ValidatingAdmissionPolicy configuration that enforces immutable root filesystem requirements across pods and workloads using CEL expressions. The policy validates containers across different resource types including Pods, Deployments, DaemonSets, and CronJobs.

LANGUAGE: yaml
CODE:
apiVersion: admissionregistration.k8s.io/v1alpha1
kind: ValidatingAdmissionPolicy
metadata:
  name: "kubescape-c-0017-deny-resources-with-mutable-container-filesystem"
spec:
  failurePolicy: Fail
  matchConstraints:
    resourceRules:
    - apiGroups:   [""]
      apiVersions: ["v1"]
      operations:  ["CREATE", "UPDATE"]
      resources:   ["pods"]
    - apiGroups:   ["apps"]
      apiVersions: ["v1"]
      operations:  ["CREATE", "UPDATE"]
      resources:   ["deployments","replicasets","daemonsets","statefulsets"]
    - apiGroups:   ["batch"]
      apiVersions: ["v1"]
      operations:  ["CREATE", "UPDATE"]
      resources:   ["jobs","cronjobs"]
  validations:
    - expression: "object.kind != 'Pod' || object.spec.containers.all(container, has(container.securityContext) && has(container.securityContext.readOnlyRootFilesystem) &&  container.securityContext.readOnlyRootFilesystem == true)"
      message: "Pods having containers with mutable filesystem not allowed! (see more at https://hub.armosec.io/docs/c-0017)"
    - expression: "['Deployment','ReplicaSet','DaemonSet','StatefulSet','Job'].all(kind, object.kind != kind) || object.spec.template.spec.containers.all(container, has(container.securityContext) && has(container.securityContext.readOnlyRootFilesystem) &&  container.securityContext.readOnlyRootFilesystem == true)"
      message: "Workloads having containers with mutable filesystem not allowed! (see more at https://hub.armosec.io/docs/c-0017)"
    - expression: "object.kind != 'CronJob' || object.spec.jobTemplate.spec.template.spec.containers.all(container, has(container.securityContext) && has(container.securityContext.readOnlyRootFilesystem) &&  container.securityContext.readOnlyRootFilesystem == true)"
      message: "CronJob having containers with mutable filesystem not allowed! (see more at https://hub.armosec.io/docs/c-0017)"

----------------------------------------

TITLE: Defining PodMetricsList Resource in Kubernetes YAML
DESCRIPTION: YAML definition for the PodMetricsList resource type in the Kubernetes Metrics API v1beta1. It includes metadata and a list of PodMetrics items.

LANGUAGE: yaml
CODE:
apiVersion: metrics.k8s.io/v1beta1
kind: PodMetricsList
metadata:
  # Standard list metadata
spec:
  items: # []PodMetrics

----------------------------------------

TITLE: Installing containerd on Windows
DESCRIPTION: This PowerShell script downloads, extracts, configures, and starts containerd on a Windows system.

LANGUAGE: powershell
CODE:
curl.exe -L https://github.com/containerd/containerd/releases/download/v$Version/containerd-$Version-windows-amd64.tar.gz -o containerd-windows-amd64.tar.gz
tar.exe xvf .\containerd-windows-amd64.tar.gz

Copy-Item -Path ".\bin\" -Destination "$Env:ProgramFiles\containerd" -Recurse -Force
cd $Env:ProgramFiles\containerd\
.\containerd.exe config default | Out-File config.toml -Encoding ascii

# Review the configuration. Depending on setup you may want to adjust:
# - the sandbox_image (Kubernetes pause image)
# - cni bin_dir and conf_dir locations
Get-Content config.toml

# (Optional - but highly recommended) Exclude containerd from Windows Defender Scans
Add-MpPreference -ExclusionProcess "$Env:ProgramFiles\containerd\containerd.exe"

.\containerd.exe --register-service
Start-Service containerd

----------------------------------------

TITLE: Checking DaemonSet Update Strategy
DESCRIPTION: Commands to verify the update strategy of a DaemonSet is set to RollingUpdate.

LANGUAGE: shell
CODE:
kubectl get ds/fluentd-elasticsearch -o go-template='{{.spec.updateStrategy.type}}{{"\n"}}' -n kube-system

LANGUAGE: shell
CODE:
kubectl apply -f https://k8s.io/examples/controllers/fluentd-daemonset.yaml --dry-run=client -o go-template='{{.spec.updateStrategy.type}}{{"\n"}}'

----------------------------------------

TITLE: Checking Pod Status with PodHasNetwork Condition - Pending Case
DESCRIPTION: Example kubectl output showing a pod where the runtime sandbox has not been created and PodHasNetwork condition is False.

LANGUAGE: yaml
CODE:
$ kubectl describe pod nginx2
Name:             nginx2
Namespace:        default
...
Conditions:
  Type              Status
  PodHasNetwork     False
  Initialized       True
  Ready             False
  ContainersReady   False
  PodScheduled      True

----------------------------------------

TITLE: Defining EgressSelectorConfiguration Struct in Go
DESCRIPTION: Defines the EgressSelectorConfiguration struct which provides versioned configuration for egress selector clients. It contains a list of egress selections.

LANGUAGE: go
CODE:
type EgressSelectorConfiguration struct {
    apiVersion string
    kind string
    egressSelections []EgressSelection
}

----------------------------------------

TITLE: ValidatingAdmissionPolicyBindingSpec Definition
DESCRIPTION: Struct definition for ValidatingAdmissionPolicyBindingSpec in Go

LANGUAGE: go
CODE:
type ValidatingAdmissionPolicyBindingSpec struct {
  PolicyName string
  ParamRef *ParamRef
  MatchResources *MatchResources
  ValidationActions []string
}

----------------------------------------

TITLE: Starting Kubernetes API Proxy Server with kubectl
DESCRIPTION: This command starts a proxy server to the Kubernetes API server. It uses kubectl and sets the proxy to listen on port 8080.

LANGUAGE: shell
CODE:
kubectl proxy --port=8080

----------------------------------------

TITLE: Modifying kubelet ConfigMap for cgroup driver
DESCRIPTION: This YAML snippet shows how to modify the kubelet ConfigMap to set the cgroup driver to 'systemd'. This should be added under the 'kubelet:' section of the ConfigMap.

LANGUAGE: yaml
CODE:
cgroupDriver: systemd

----------------------------------------

TITLE: Setting up Cluster Autoscaler environment variables in Bash
DESCRIPTION: Exports environment variables to configure Cluster Autoscaler settings before creating the Kubernetes cluster. Sets the initial node count to 2 and allows autoscaling between 2-5 nodes.

LANGUAGE: bash
CODE:
export NUM_NODES=2
export KUBE_AUTOSCALER_MIN_NODES=2
export KUBE_AUTOSCALER_MAX_NODES=5
export KUBE_ENABLE_CLUSTER_AUTOSCALER=true

----------------------------------------

TITLE: Labeling a Simple Stateless Service Deployment in Kubernetes
DESCRIPTION: This example shows how to apply the recommended labels to a Deployment object for a simple stateless service. It includes the basic app.kubernetes.io/name and app.kubernetes.io/instance labels.

LANGUAGE: yaml
CODE:
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: myservice
    app.kubernetes.io/instance: myservice-abcxyz
...

----------------------------------------

TITLE: Configuring Pod Security Context
DESCRIPTION: YAML configuration showing how to set security context parameters for a pod, including read-only root filesystem and non-root user execution.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: hello-world
spec:
  containers:
  # specification of the pod's containers
  # ...
  securityContext:
    readOnlyRootFilesystem: true
    runAsNonRoot: true

----------------------------------------

TITLE: Setting Environment Variables for Kubernetes Components
DESCRIPTION: Defines version numbers for various Kubernetes components and tools.

LANGUAGE: bash
CODE:
CNI_PLUGINS_VERSION="v1.3.0"
CRICTL_VERSION="v1.27.0"
KUBE_RELEASE="v1.27.3"
RELEASE_VERSION="v0.15.1"
K9S_VERSION="v0.27.4"

----------------------------------------

TITLE: Using Feature Gates Command Line Flag in Kubernetes
DESCRIPTION: Example showing the command line flag syntax for enabling feature gates in Kubernetes components. Feature gates control which Kubernetes features are enabled in the cluster.

LANGUAGE: bash
CODE:
--feature-gates

----------------------------------------

TITLE: Defining ControllerManagerLeaderMigration Feature Gate Configuration in YAML
DESCRIPTION: YAML configuration defining the lifecycle stages and versioning of the ControllerManagerLeaderMigration feature gate in Kubernetes. Specifies alpha, beta, and stable stages with their respective version ranges and default values.

LANGUAGE: yaml
CODE:
title: ControllerManagerLeaderMigration
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.21"
    toVersion: "1.21"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.22"
    toVersion: "1.23"    
  - stage: stable
    defaultValue: true
    fromVersion: "1.24"
    toVersion: "1.26"

removed: true

----------------------------------------

TITLE: ReplicationController API Version Definition
DESCRIPTION: Defines the API version and import path for the ReplicationController resource

LANGUAGE: yaml
CODE:
apiVersion: v1
import "k8s.io/api/core/v1"

----------------------------------------

TITLE: Creating a Secret in Kubernetes
DESCRIPTION: This shell command creates a Kubernetes secret named 'my-secret' with a key-value pair.

LANGUAGE: shell
CODE:
kubectl create secret generic my-secret --from-literal=key1=supersecret

----------------------------------------

TITLE: Validating Webhook Configuration Example
DESCRIPTION: Example YAML configuration for a validating webhook that intercepts pod creation requests

LANGUAGE: yaml
CODE:
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: "pod-policy.example.com"
webhooks:
- name: "pod-policy.example.com"
  rules:
  - apiGroups:   [""]
    apiVersions: ["v1"]
    operations:  ["CREATE"]
    resources:   ["pods"]
    scope:       "Namespaced"
  clientConfig:
    service:
      namespace: "example-namespace"
      name: "example-service"
    caBundle: <CA_BUNDLE>
  admissionReviewVersions: ["v1"]
  sideEffects: None
  timeoutSeconds: 5

----------------------------------------

TITLE: Validating Webhook Configuration Example
DESCRIPTION: Example YAML configuration for a validating webhook that intercepts pod creation requests

LANGUAGE: yaml
CODE:
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: "pod-policy.example.com"
webhooks:
- name: "pod-policy.example.com"
  rules:
  - apiGroups:   [""]
    apiVersions: ["v1"]
    operations:  ["CREATE"]
    resources:   ["pods"]
    scope:       "Namespaced"
  clientConfig:
    service:
      namespace: "example-namespace"
      name: "example-service"
    caBundle: <CA_BUNDLE>
  admissionReviewVersions: ["v1"]
  sideEffects: None
  timeoutSeconds: 5

----------------------------------------

TITLE: Generating Kubernetes Certificates with Kubeadm
DESCRIPTION: Command to generate all certificates required for a Kubernetes cluster using kubeadm. This command creates certificates for various Kubernetes components with configurable options for API server address, certificate location, and service settings.

LANGUAGE: bash
CODE:
kubeadm init phase certs all [flags]

----------------------------------------

TITLE: Example of Kubernetes Audit Patch Request Body in JSON
DESCRIPTION: This snippet demonstrates the structure of a patch request body for Kubernetes auditing. It shows how to modify a Job resource using JSON patch operations.

LANGUAGE: json
CODE:
[
  {
    "op": "replace",
    "path": "/spec/parallelism",
    "value": 0
  },
  {
    "op": "remove",
    "path": "/spec/template/spec/containers/0/terminationMessagePolicy"
  }
]

----------------------------------------

TITLE: Configuring Pod Security Capabilities for Chrooted Ingress-NGINX
DESCRIPTION: YAML configuration showing required capabilities for enabling chroot functionality in Ingress-NGINX controller Pod template. Adds SYS_CHROOT capability while maintaining principle of least privilege.

LANGUAGE: yaml
CODE:
capabilities:
  drop:
  - ALL
  add:
  - NET_BIND_SERVICE
  - SYS_CHROOT

----------------------------------------

TITLE: Viewing Node Status with kubectl in Kubernetes
DESCRIPTION: This command uses kubectl to display detailed information about a specific node's status and configuration in a Kubernetes cluster.

LANGUAGE: shell
CODE:
kubectl describe node <insert-node-name-here>

----------------------------------------

TITLE: HTTP Create CSINode Request
DESCRIPTION: HTTP request for creating a new CSINode resource

LANGUAGE: http
CODE:
POST /apis/storage.k8s.io/v1/csinodes

----------------------------------------

TITLE: Creating a Kubernetes Service using kubectl
DESCRIPTION: This command creates a Kubernetes service using a specified subcommand. It provides various options for customizing the service creation process.

LANGUAGE: bash
CODE:
kubectl create service [flags]

----------------------------------------

TITLE: Configuring fish shell completion for kubectl
DESCRIPTION: Instructions for setting up kubectl completion in fish shells for current and future sessions.

LANGUAGE: fish
CODE:
# Load the kubectl completion code for fish[2] into the current shell
kubectl completion fish | source
# To load completions for each session, execute once:
kubectl completion fish > ~/.config/fish/completions/kubectl.fish

----------------------------------------

TITLE: Defining ExecCredential Struct in Go
DESCRIPTION: Defines the ExecCredential struct used for exec-based plugin communication of credentials to HTTP transports. It includes fields for API version, kind, spec, and status.

LANGUAGE: go
CODE:
type ExecCredential struct {
    apiVersion string
    kind       string
    spec       ExecCredentialSpec
    status     ExecCredentialStatus
}

----------------------------------------

TITLE: Example of Joining Machine as Control Plane Instance
DESCRIPTION: This example demonstrates how to use the 'kubeadm join phase control-plane-join' command to join a machine as a control plane instance in a Kubernetes cluster. The 'all' argument is used to execute all sub-phases of the control-plane-join phase.

LANGUAGE: bash
CODE:
kubeadm join phase control-plane-join all

----------------------------------------

TITLE: Defining KubeProxyConfiguration in Go
DESCRIPTION: Go struct definition for KubeProxyConfiguration, which contains all configuration options for kube-proxy.

LANGUAGE: go
CODE:
type KubeProxyConfiguration struct {
	metav1.TypeMeta
	featureGates map[string]bool
	clientConnection ClientConnectionConfiguration
	logging LoggingConfiguration
	hostnameOverride string
	bindAddress string
	healthzBindAddress string
	metricsBindAddress string
	bindAddressHardFail bool
	enableProfiling bool
	showHiddenMetricsForVersion string
	mode ProxyMode
	iptables KubeProxyIPTablesConfiguration
	ipvs KubeProxyIPVSConfiguration
	nftables KubeProxyNFTablesConfiguration
	winkernel KubeProxyWinkernelConfiguration
	detectLocalMode LocalMode
	detectLocal DetectLocalConfiguration
	clusterCIDR string
	nodePortAddresses []string
	oomScoreAdj int32
	conntrack KubeProxyConntrackConfiguration
	configSyncPeriod metav1.Duration
	portRange string
	windowsRunAsService bool
}

----------------------------------------

TITLE: Configuring kubelet for Memory Manager with Reserved Memory
DESCRIPTION: This shell command shows how to configure kubelet with kube-reserved, system-reserved, and reserved-memory flags to properly set up the Memory Manager.

LANGUAGE: shell
CODE:
--kube-reserved=cpu=4,memory=4Gi
--system-reserved=cpu=1,memory=1Gi
--memory-manager-policy=Static
--reserved-memory '0:memory=3Gi;1:memory=2148Mi'

----------------------------------------

TITLE: Verifying StorageClass Changes
DESCRIPTION: Command to verify the updated default StorageClass configuration by listing all StorageClasses.

LANGUAGE: bash
CODE:
kubectl get storageclass

----------------------------------------

TITLE: Flannel Manual Launch Configuration
DESCRIPTION: PowerShell commands to manually launch Flannel with specific node configuration when auto-launch fails.

LANGUAGE: powershell
CODE:
[Environment]::SetEnvironmentVariable("NODE_NAME", "<Windows_Worker_Hostname>")
C:\flannel\flanneld.exe --kubeconfig-file=c:\k\config --iface=<Windows_Worker_Node_IP> --ip-masq=1 --kube-subnet-mgr=1

----------------------------------------

TITLE: Complex Quantity Operations with CEL
DESCRIPTION: CEL expression using the quantity library to chain adding and subtracting integers and quantities.

LANGUAGE: CEL
CODE:
quantity("50k").add(20).sub(quantity("100k")).sub(-50000)

----------------------------------------

TITLE: Enabling User Namespaces for a Pod in Kubernetes YAML
DESCRIPTION: This YAML snippet demonstrates how to enable user namespaces for a pod by setting 'hostUsers' to false in the pod spec. It creates a pod running an nginx container with user namespace support.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
spec:
  hostUsers: false
  containers:
  - name: nginx
    image: docker.io/nginx

----------------------------------------

TITLE: Generating CA Certificate with easyrsa for Kubernetes
DESCRIPTION: This command generates a Certificate Authority (CA) certificate using easyrsa. It uses batch mode and sets a default Common Name (CN) based on the master IP and current timestamp.

LANGUAGE: bash
CODE:
./easyrsa --batch "--req-cn=${MASTER_IP}@`date +%s`" build-ca nopass

----------------------------------------

TITLE: ImageReview Request JSON Example
DESCRIPTION: Example JSON payload for an ImageReview request sent to the webhook backend.

LANGUAGE: json
CODE:
{
  "apiVersion": "imagepolicy.k8s.io/v1alpha1",
  "kind": "ImageReview",
  "spec": {
    "containers": [
      {
        "image": "myrepo/myimage:v1"
      },
      {
        "image": "myrepo/myimage@sha256:beb6bd6a68f114c1dc2ea4b28db81bdf91de202a9014972bec5e4d9171d90ed"
      }
    ],
    "annotations": {
      "mycluster.image-policy.k8s.io/ticket-1234": "break-glass"
    },
    "namespace": "mynamespace"
  }
}

----------------------------------------

TITLE: Adding Annotations to Kubernetes Objects
DESCRIPTION: Demonstrates how to add annotations to Kubernetes objects using the kubectl annotate command.

LANGUAGE: console
CODE:
$> kubectl annotate pods redis-izl09 icon-url=http://goo.gl/XXBTWq
pod "redis-izl09" annotated

----------------------------------------

TITLE: Deleting a Kubernetes Pod
DESCRIPTION: This kubectl command removes the 'redis' Pod from the Kubernetes cluster, cleaning up the resources created for this exercise.

LANGUAGE: shell
CODE:
kubectl delete pod redis

----------------------------------------

TITLE: Executing kubectl cluster-info Command
DESCRIPTION: This command displays the addresses of the control plane and services with label kubernetes.io/cluster-service=true in a Kubernetes cluster. It can be used to get an overview of the cluster's infrastructure.

LANGUAGE: bash
CODE:
kubectl cluster-info [flags]

----------------------------------------

TITLE: Flannel Manual Launch Configuration
DESCRIPTION: PowerShell commands to manually launch Flannel with specific node configuration when auto-launch fails.

LANGUAGE: powershell
CODE:
[Environment]::SetEnvironmentVariable("NODE_NAME", "<Windows_Worker_Hostname>")
C:\flannel\flanneld.exe --kubeconfig-file=c:\k\config --iface=<Windows_Worker_Node_IP> --ip-masq=1 --kube-subnet-mgr=1

----------------------------------------

TITLE: Using Label Selectors in Service and ReplicationController
DESCRIPTION: These snippets demonstrate how to use label selectors in Service and ReplicationController objects using JSON and YAML formats.

LANGUAGE: json
CODE:
"selector": {
    "component" : "redis",
}

LANGUAGE: yaml
CODE:
selector:
  component: redis

----------------------------------------

TITLE: Prometheus Gauge Metrics for Kubernetes Healthchecks
DESCRIPTION: Example of gauge metrics exposed by Kubernetes components showing current healthcheck states. The metrics include various health checks like etcd, ping, and autoregister-completion with their current status values.

LANGUAGE: prometheus
CODE:
# HELP kubernetes_healthcheck [ALPHA] This metric records the result of a single healthcheck.
# TYPE kubernetes_healthcheck gauge
kubernetes_healthcheck{name="autoregister-completion",type="healthz"} 1
kubernetes_healthcheck{name="autoregister-completion",type="readyz"} 1
kubernetes_healthcheck{name="etcd",type="healthz"} 1
kubernetes_healthcheck{name="etcd",type="readyz"} 1
kubernetes_healthcheck{name="etcd-readiness",type="readyz"} 1
kubernetes_healthcheck{name="informer-sync",type="readyz"} 1
kubernetes_healthcheck{name="log",type="healthz"} 1
kubernetes_healthcheck{name="log",type="readyz"} 1
kubernetes_healthcheck{name="ping",type="healthz"} 1
kubernetes_healthcheck{name="ping",type="readyz"} 1

----------------------------------------

TITLE: Creating a new Kubernetes join token on control plane node
DESCRIPTION: Generates a new join token on the control plane node. This is necessary if the original token has expired.

LANGUAGE: bash
CODE:
sudo kubeadm token create

----------------------------------------

TITLE: Retrieving Gateway address using kubectl
DESCRIPTION: This kubectl command retrieves the address of a specific Gateway resource in a given namespace using jsonpath.

LANGUAGE: bash
CODE:
kubectl get gateway <gateway-name> -n <namespace> -o jsonpath='{.status.addresses}{"\n"}'

----------------------------------------

TITLE: Importing HorizontalPodAutoscaler in Go
DESCRIPTION: Import statement for using the HorizontalPodAutoscaler resource in Go code.

LANGUAGE: go
CODE:
import "k8s.io/api/autoscaling/v1"

----------------------------------------

TITLE: Implementing Sentiment Analysis Function with Kyma and Azure Services
DESCRIPTION: This code snippet demonstrates how to create a serverless function in Kyma that analyzes sentiment of customer reviews using Azure's Text Analytics service and stores negative comments in a MongoDB database. It showcases Kyma's integration with external services and its serverless capabilities.

LANGUAGE: javascript
CODE:
const axios = require("axios");
const MongoClient = require('mongodb').MongoClient;

module.exports = { main: async function (event, context) {
    let negative = await isNegative(event.data.comment)
    
    if (negative) {
      console.log("Customer sentiment is negative:", event.data)
      await mongoInsert(event.data)
    } else {
      console.log("This positive comment was not saved:", event.data) 
    }
}}

async function mongoInsert(data) {

    try {
          client = await MongoClient.connect(process.env.connectionString, { useNewUrlParser: true });
          db = client.db('mycommerce');
          const collection = db.collection('comments');
          return await collection.insertOne(data);
    } finally {
      client.close();
    }
}

async function isNegative(comment) {
    let response = await axios.post(`${process.env.textAnalyticsEndpoint}/sentiment`,
      { documents: [{ id: '1', text: comment }] }, {headers:{ 'Ocp-Apim-Subscription-Key': process.env.textAnalyticsKey }})
    return response.data.documents[0].score < 0.5
}

----------------------------------------

TITLE: Listing Pods with kubectl
DESCRIPTION: This snippet shows how to list all pods in the current namespace using kubectl.

LANGUAGE: shell
CODE:
kubectl get po

----------------------------------------

TITLE: Using Message Expression in ValidatingAdmissionPolicy
DESCRIPTION: Example of using a message expression to provide a more informative error message when a policy rejects a request.

LANGUAGE: yaml
CODE:
apiVersion: admissionregistration.k8s.io/v1beta1
kind: ValidatingAdmissionPolicy
metadata:
  name: "deploy-replica-policy.example.com"
spec:
  failurePolicy: Fail
  paramKind:
    apiVersion: rules.example.com/v1
    kind: ReplicaLimit
  matchConstraints:
    resourceRules:
    - apiGroups:   ["apps"]
      apiVersions: ["v1"]
      operations:  ["CREATE", "UPDATE"]
      resources:   ["deployments"]
  validations:
  - expression: "object.spec.replicas <= params.maxReplicas"
    messageExpression: "sprintf('object.spec.replicas must be no greater than %d', params.maxReplicas)"


----------------------------------------

TITLE: Configuring Metric Allow-List via Command Line in Kubernetes
DESCRIPTION: This command line example demonstrates how to use the --allow-metric-labels flag to create an allow-list for specific metric labels, limiting the cardinality of metrics exposed by Kubernetes components.

LANGUAGE: bash
CODE:
--allow-metric-labels number_count_metric,odd_number='1,3,5', number_count_metric,even_number='2,4,6', date_gauge_metric,weekend='Saturday,Sunday'

----------------------------------------

TITLE: Forcing Namespace Finalization in Kubernetes
DESCRIPTION: Shows how to force the finalization of a namespace by updating its finalize subresource using a curl command.

LANGUAGE: bash
CODE:
cat <<EOF | curl -X PUT \
  localhost:8080/api/v1/namespaces/test/finalize \
  -H "Content-Type: application/json" \
  --data-binary @-
{
  "kind": "Namespace",
  "apiVersion": "v1",
  "metadata": {
    "name": "test"
  },
  "spec": {
    "finalizers": null
  }
}
EOF

----------------------------------------

TITLE: Implementing Server-side Apply in a controller
DESCRIPTION: This code snippet demonstrates how to use Server-side Apply in a controller using the new client-go support. It shows the extract/modify-in-place/apply workflow, which is useful for migrating existing controllers to use Server-side Apply.

LANGUAGE: go
CODE:
fieldMgr := "my-field-manager"
deploymentClient := clientset.AppsV1().Deployments("default")

// read, could also be read from a shared informer
deployment, err := deploymentClient.Get(ctx, "example-deployment", metav1.GetOptions{})
if err != nil {
  // handle error
}

// extract
deploymentApplyConfig, err := appsv1ac.ExtractDeployment(deployment, fieldMgr)
if err != nil {
  // handle error
}

// modify-in-place
deploymentApplyConfig.Spec.Template.Spec.WithContainers(corev1ac.Container().
	WithName("modify-slice").
	WithImage("nginx:1.14.2"),
)

// apply
applied, err := deploymentClient.Apply(ctx, deploymentApplyConfig, metav1.ApplyOptions{FieldManager: fieldMgr})

----------------------------------------

TITLE: Setting up LeaderElectionConfiguration in YAML
DESCRIPTION: Configures leader election for high availability deployments of the scheduler.

LANGUAGE: yaml
CODE:
leaderElect: true
leaseDuration: 15s
renewDeadline: 10s
retryPeriod: 2s
resourceLock: leases
resourceName: kube-scheduler
resourceNamespace: kube-system

----------------------------------------

TITLE: Downloading Control Plane Certificates using kubeadm
DESCRIPTION: Command to download certificates shared among control-plane nodes from the kubeadm-certs Secret. This command is used during the joining process of additional control plane nodes and requires various authentication and configuration parameters.

LANGUAGE: bash
CODE:
kubeadm join phase control-plane-prepare download-certs [api-server-endpoint] [flags]

----------------------------------------

TITLE: Creating PVC with Custom Resource Data Source
DESCRIPTION: YAML configuration for creating a PersistentVolumeClaim that references a Hello custom resource as its data source.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: example-pvc
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Mi
  dataSourceRef:
    apiGroup: hello.example.com
    kind: Hello
    name: example-hello
  volumeMode: Filesystem

----------------------------------------

TITLE: Applying Kubernetes Deployment using kubectl
DESCRIPTION: Command line example showing how to create a Deployment using kubectl apply with a YAML manifest file.

LANGUAGE: shell
CODE:
kubectl apply -f https://k8s.io/examples/application/deployment.yaml

----------------------------------------

TITLE: Configuring Minion-1 Node Network Routes
DESCRIPTION: Network routing table configuration for the first Kubernetes minion node showing destinations, gateways, and interface configurations for OpenVPN tunnels and container bridge.

LANGUAGE: bash
CODE:
10.8.0.0        10.8.0.5        255.255.255.0   UG    0      0        0 tun0
10.8.0.5        0.0.0.0         255.255.255.255 UH    0      0        0 tun0
10.244.1.0      0.0.0.0         255.255.255.0   U     0      0        0 cbr0
10.244.2.0      10.8.0.5        255.255.255.0   UG    0      0        0 tun0

----------------------------------------

TITLE: Creating and Inspecting a Pod with downwardAPI Volume
DESCRIPTION: These shell commands create the Pod defined in the YAML manifest and inspect its contents, demonstrating how Pod fields are exposed as files.

LANGUAGE: shell
CODE:
kubectl apply -f https://k8s.io/examples/pods/inject/dapi-volume.yaml
kubectl get pods
kubectl logs kubernetes-downwardapi-volume-example
kubectl exec -it kubernetes-downwardapi-volume-example -- sh
# Inside the container:
cat /etc/podinfo/labels
cat /etc/podinfo/annotations
ls -laR /etc/podinfo
exit

----------------------------------------

TITLE: Defining a ResourceClaimTemplate with Admin Access
DESCRIPTION: This YAML snippet demonstrates how to mark a request in a ResourceClaimTemplate as having privileged features with admin access.

LANGUAGE: yaml
CODE:
apiVersion: resource.k8s.io/v1beta1
kind: ResourceClaimTemplate
metadata:
  name: large-black-cat-claim-template
spec:
  spec:
    devices:
      requests:
      - name: req-0
        deviceClassName: resource.example.com
        adminAccess: true

----------------------------------------

TITLE: EndpointSlice Struct Definition
DESCRIPTION: Go struct definition for the EndpointSlice resource, including its core fields and nested structs.

LANGUAGE: go
CODE:
type EndpointSlice struct {
	metadata metav1.ObjectMeta
	addressType string
	endpoints []Endpoint
	ports []EndpointPort
}

----------------------------------------

TITLE: Creating Kubernetes Cluster with etcd Learner Mode using kubeadm
DESCRIPTION: This snippet shows how to create a Kubernetes cluster with etcd learner mode enabled using kubeadm. It includes the command to initialize the cluster and the required configuration file.

LANGUAGE: shell
CODE:
# kubeadm init --feature-gates=EtcdLearnerMode=true ...
kubeadm init --config=kubeadm-config.yaml

LANGUAGE: yaml
CODE:
apiVersion: kubeadm.k8s.io/v1beta3
kind: ClusterConfiguration
featureGates:
  EtcdLearnerMode: true

----------------------------------------

TITLE: Executing Commands in a Pod with kubectl
DESCRIPTION: This snippet shows how to execute a command in a running pod using kubectl.

LANGUAGE: shell
CODE:
kubectl get po

LANGUAGE: shell
CODE:
kubectl exec nginx-app-5jyvm -- cat /etc/hostname

LANGUAGE: shell
CODE:
kubectl exec -ti nginx-app-5jyvm -- /bin/sh

----------------------------------------

TITLE: Defining Reviews v2 Deployment
DESCRIPTION: Creates a Kubernetes deployment for version 2 of the reviews service.

LANGUAGE: yaml
CODE:
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
 name: reviews-v2
spec:
 replicas: 1
 template:
     metadata:
         labels:
             app: reviews
             version: v2
     spec:
         containers:
         - name: reviews
             image: istio/examples-bookinfo-reviews-v2:0.2.3
             imagePullPolicy: IfNotPresent
             ports:
             - containerPort: 9080

----------------------------------------

TITLE: Defining ReadWriteOncePod Feature Gate Stages in YAML
DESCRIPTION: Defines the lifecycle stages of the ReadWriteOncePod feature gate, including alpha (1.22-1.26), beta (1.27-1.28), and stable (1.29-1.30) phases. Specifies default values and version ranges for each stage.

LANGUAGE: yaml
CODE:
---
title: ReadWriteOncePod
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.22"
    toVersion: "1.26"
  - stage: beta
    defaultValue: true
    fromVersion: "1.27"  
    toVersion: "1.28" 
  - stage: stable
    defaultValue: true
    fromVersion: "1.29" 
    toVersion: "1.30"

removed: true
---

----------------------------------------

TITLE: Enabling IPv4 Packet Forwarding for Kubernetes
DESCRIPTION: This snippet shows how to enable IPv4 packet forwarding, which is required for most Kubernetes networking implementations. It sets the sysctl parameter and applies it without rebooting.

LANGUAGE: bash
CODE:
# sysctl params required by setup, params persist across reboots
cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.ipv4.ip_forward = 1
EOF

# Apply sysctl params without reboot
sudo sysctl --system

----------------------------------------

TITLE: Adding a Kubernetes Service Annotation using kubectl
DESCRIPTION: This snippet demonstrates how to add an annotation to a Kubernetes service named 'quote' using the kubectl command-line tool. The annotation specifies the owner of the service.

LANGUAGE: bash
CODE:
kubectl annotate service quote a8r.io/owner="@sally"

----------------------------------------

TITLE: HTTP Response Codes for Checkpoint Operation
DESCRIPTION: Possible HTTP response codes and their meanings for the checkpoint operation, including success (200), authentication failures (401), resource not found (404), and internal errors (500).

LANGUAGE: http
CODE:
200: OK
401: Unauthorized
404: Not Found (if the ContainerCheckpoint feature gate is disabled)
404: Not Found (if the specified namespace, pod or container cannot be found)
500: Internal Server Error (if the CRI implementation encounter an error during checkpointing)
500: Internal Server Error (if the CRI implementation does not implement the checkpoint CRI API)

----------------------------------------

TITLE: Creating ClusterRole for GMSA Authorization
DESCRIPTION: YAML configuration for creating a ClusterRole that authorizes usage of specific GMSA credential specs.

LANGUAGE: yaml
CODE:
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: webapp1-role
rules:
- apiGroups: ["windows.k8s.io"]
  resources: ["gmsacredentialspecs"]
  verbs: ["use"]
  resourceNames: ["gmsa-WebApp1"]

----------------------------------------

TITLE: Pod Volume Configuration Example
DESCRIPTION: YAML configuration showing projected volume setup for service account token access in a pod

LANGUAGE: yaml
CODE:
  - name: kube-api-access-<random-suffix>
    projected:
      sources:
        - serviceAccountToken:
            path: token
        - configMap:
            items:
              - key: ca.crt
                path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
              - fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
                path: namespace

----------------------------------------

TITLE: Defining ServiceAccountTokenNodeBinding Feature Gate Configuration in YAML
DESCRIPTION: YAML configuration defining the feature gate stages and properties for ServiceAccountTokenNodeBinding. Specifies alpha stage (v1.29-1.30) with default disabled and beta stage (v1.31+) with default enabled.

LANGUAGE: yaml
CODE:
title: ServiceAccountTokenNodeBinding
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.29"
    toVersion: "1.30"
  - stage: beta
    defaultValue: true
    fromVersion: "1.31"

----------------------------------------

TITLE: Example ABAC Policy Definition - JSON
DESCRIPTION: Sample JSON policy definition demonstrating ABAC (Attribute Based Access Control) configuration that allows user 'bob' read-only access to pods in the 'projectCaribou' namespace.

LANGUAGE: json
CODE:
{
    "apiVersion": "abac.authorization.kubernetes.io/v1beta1",
    "kind": "Policy",
    "spec": {
        "user": "bob",
        "namespace": "projectCaribou",
        "resource": "pods",
        "readonly": true
    }
}

----------------------------------------

TITLE: Pod Configuration with Bandwidth Annotations
DESCRIPTION: YAML configuration showing how to set ingress and egress bandwidth limits for a Kubernetes pod using annotations.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  annotations:
    kubernetes.io/ingress-bandwidth: 1M
    kubernetes.io/egress-bandwidth: 1M
...

----------------------------------------

TITLE: Executing Kubeadm Upgrade Apply Phase Addon All Command
DESCRIPTION: This command upgrades all the addons in a Kubernetes cluster. It can be used with various options to customize the upgrade process, such as specifying a configuration file, performing a dry run, or applying patches.

LANGUAGE: bash
CODE:
kubeadm upgrade apply phase addon all [flags]

----------------------------------------

TITLE: Creating a Kubernetes Namespace using YAML
DESCRIPTION: This snippet demonstrates how to create a new Kubernetes namespace by defining it in a YAML file and applying it with kubectl.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Namespace
metadata:
  name: <insert-namespace-name-here>

LANGUAGE: shell
CODE:
kubectl create -f ./my-namespace.yaml

----------------------------------------

TITLE: Editing Kubernetes Node Object
DESCRIPTION: Command to edit a specific Kubernetes Node object.

LANGUAGE: shell
CODE:
kubectl edit no <node-name>

----------------------------------------

TITLE: Uploading kubeadm Configuration
DESCRIPTION: This command uploads the kubeadm configuration to the Kubernetes cluster, allowing for centralized configuration management.

LANGUAGE: bash
CODE:
kubeadm init phase upload-config all

----------------------------------------

TITLE: Describing ConfigMap in Kubernetes
DESCRIPTION: Displays detailed information about the example-redis-config ConfigMap.

LANGUAGE: shell
CODE:
kubectl describe configmap/example-redis-config

----------------------------------------

TITLE: HTTP List Request for Secrets
DESCRIPTION: HTTP request syntax for listing all Secret objects in a namespace

LANGUAGE: http
CODE:
GET /api/v1/namespaces/{namespace}/secrets

----------------------------------------

TITLE: Base64 Encoding Secret Data in Shell
DESCRIPTION: Demonstrates how to encode secret data (username and password) to base64 format using the shell command 'echo' and 'base64'.

LANGUAGE: shell
CODE:
echo -n 'my-app' | base64
echo -n '39528$vdg7Jb' | base64

----------------------------------------

TITLE: Using kubectl drain Command
DESCRIPTION: The kubectl drain command marks a Node as going out of service and evicts all Pods from it. The command includes retry logic for temporarily rejected eviction requests until either all Pods are terminated or a configurable timeout is reached.

LANGUAGE: bash
CODE:
kubectl drain

----------------------------------------

TITLE: kubectl exec Usage Examples
DESCRIPTION: These examples demonstrate various ways to use the kubectl exec command, including running commands in specific containers, using interactive mode, and targeting deployments or services.

LANGUAGE: bash
CODE:
# Get output from running the 'date' command from pod mypod, using the first container by default
kubectl exec mypod -- date

# Get output from running the 'date' command in ruby-container from pod mypod
kubectl exec mypod -c ruby-container -- date

# Switch to raw terminal mode; sends stdin to 'bash' in ruby-container from pod mypod
# and sends stdout/stderr from 'bash' back to the client
kubectl exec mypod -c ruby-container -i -t -- bash -il

# List contents of /usr from the first container of pod mypod and sort by modification time
# If the command you want to execute in the pod has any flags in common (e.g. -i),
# you must use two dashes (--) to separate your command's flags/arguments
# Also note, do not surround your command and its flags/arguments with quotes
# unless that is how you would execute it normally (i.e., do ls -t /usr, not "ls -t /usr")
kubectl exec mypod -i -t -- ls -t /usr

# Get output from running 'date' command from the first pod of the deployment mydeployment, using the first container by default
kubectl exec deploy/mydeployment -- date

# Get output from running 'date' command from the first pod of the service myservice, using the first container by default
kubectl exec svc/myservice -- date

----------------------------------------

TITLE: Retrieving discovery token CA cert hash on control plane node
DESCRIPTION: Calculates the discovery token CA cert hash on the control plane node. This hash is required for the kubeadm join command.

LANGUAGE: bash
CODE:
sudo cat /etc/kubernetes/pki/ca.crt | openssl x509 -pubkey  | openssl rsa -pubin -outform der 2>/dev/null | \
   openssl dgst -sha256 -hex | sed 's/^.* //'

----------------------------------------

TITLE: Fluentd Sidecar Configuration
DESCRIPTION: ConfigMap and Pod configuration for implementing logging using Fluentd as a sidecar container.

LANGUAGE: yaml
CODE:
{{% code_sample file="admin/logging/fluentd-sidecar-config.yaml" %}}
{{% code_sample file="admin/logging/two-files-counter-pod-agent-sidecar.yaml" %}}

----------------------------------------

TITLE: Configuring Gateway Resources in Kubernetes
DESCRIPTION: Example of a Gateway resource that defines HTTPS termination and route selection criteria for HTTP traffic.

LANGUAGE: yaml
CODE:
kind: Gateway
apiVersion: networking.x-k8s.io/v1alpha1
metadata:
  name: prod-web
spec:
  gatewayClassName: acme-lb
  listeners:  
  - protocol: HTTPS
    port: 443
    routes:
      kind: HTTPRoute
      selector:
        matchLabels:
          gateway: external-https-prod
      namespaces:
        from: All
    tls:
      certificateRef:
        name: admin-controlled-cert

----------------------------------------

TITLE: Installing bash completion on macOS
DESCRIPTION: Commands for installing and setting up bash completion for kubectl on macOS using Homebrew.

LANGUAGE: bash
CODE:
# Installing bash completion on macOS using homebrew
## If running Bash 3.2 included with macOS
brew install bash-completion
## or, if running Bash 4.1+
brew install bash-completion@2
## If kubectl is installed via homebrew, this should start working immediately
## If you've installed via other means, you may need add the completion to your completion directory
kubectl completion bash > $(brew --prefix)/etc/bash_completion.d/kubectl

----------------------------------------

TITLE: Configuring RelaxedEnvironmentVariableValidation Feature Gate in Kubernetes YAML
DESCRIPTION: Defines the RelaxedEnvironmentVariableValidation feature gate, specifying its stages, default values, and version ranges. This configuration allows for more flexible environment variable naming in Kubernetes clusters.

LANGUAGE: yaml
CODE:
title: RelaxedEnvironmentVariableValidation
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha
    defaultValue: false
    fromVersion: "1.30"
    toVersion: "1.31"
  - stage: beta
    defaultValue: true
    fromVersion: "1.32"

----------------------------------------

TITLE: Defining CPUManagerPolicyBetaOptions Feature Gate Configuration in YAML
DESCRIPTION: YAML configuration that defines the CPUManagerPolicyBetaOptions feature gate metadata, including its stage, default value, and version information. This feature gate controls experimental beta-quality options for CPU Manager and will not graduate to stable.

LANGUAGE: yaml
CODE:
title: CPUManagerPolicyBetaOptions
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: beta
    defaultValue: true
    fromVersion: "1.23"

----------------------------------------

TITLE: PodSecurityPolicy to Prevent Root Execution
DESCRIPTION: A YAML snippet for a PodSecurityPolicy that prevents containers from running as root and disallows privilege escalation.

LANGUAGE: yaml
CODE:
# Required to prevent escalations to root.
allowPrivilegeEscalation: false
runAsUser:
  # Require the container to run without root privileges.
  rule: 'MustRunAsNonRoot'

----------------------------------------

TITLE: Downloading Kubernetes APT Repository Signing Key
DESCRIPTION: This command downloads the public signing key for the new Kubernetes package repositories and adds it to the system's keyring for APT.

LANGUAGE: shell
CODE:
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg

----------------------------------------

TITLE: Managing Control Plane with kubectl Commands
DESCRIPTION: Shell commands demonstrating how to deploy, scale, and upgrade a Kubernetes control plane using kubectl.

LANGUAGE: shell
CODE:
kubectl apply -f example-docker-control-plane.yaml

LANGUAGE: shell
CODE:
kubectl scale kubeadmcontrolplane example  --replicas=5

LANGUAGE: shell
CODE:
kubectl patch kubeadmcontrolplane example --type=json -p '[{"op": "replace", "path": "/spec/version", "value": "1.16.4"}]'

----------------------------------------

TITLE: PodDisruptionBudget Example Table Layout
DESCRIPTION: Example showing pod distribution across nodes during a drain operation, demonstrating how PDB affects pod evictions and replacements

LANGUAGE: text
CODE:
|       node-1         |       node-2        |       node-3       |
|:--------------------:|:-------------------:|:------------------:|
| pod-a  *available*   | pod-b *available*   | pod-c *available*  |
| pod-x  *available*   |                     |                    |

----------------------------------------

TITLE: Checking CA Hash with OpenSSL
DESCRIPTION: Command to calculate the CA certificate hash using OpenSSL for token-based discovery verification.

LANGUAGE: shell
CODE:
openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2>/dev/null | openssl dgst -sha256 -hex | sed 's/^.* //'

----------------------------------------

TITLE: Defining ServiceAccountTokenPodNodeInfo Feature Gate Configuration in YAML
DESCRIPTION: YAML configuration that defines the feature gate stages and settings for ServiceAccountTokenPodNodeInfo. Specifies the progression from alpha (v1.29) through beta (v1.30-1.31) to stable (v1.32) with corresponding default values.

LANGUAGE: yaml
CODE:
title: ServiceAccountTokenPodNodeInfo
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.29"
    toVersion: "1.29"
  - stage: beta
    defaultValue: true
    fromVersion: "1.30"
    toVersion: "1.31"
  - stage: stable
    defaultValue: true
    fromVersion: "1.32"

----------------------------------------

TITLE: Listing Supported Sysctls with Kernel Version Requirements
DESCRIPTION: This code snippet lists the sysctls supported in the safe set for Kubernetes, along with their minimum kernel version requirements. It includes sysctls for network configuration and TCP settings.

LANGUAGE: bash
CODE:
- net.ipv4.ip_local_reserved_ports (since Kubernetes 1.27, needs kernel 3.16+);
- net.ipv4.tcp_keepalive_time (since Kubernetes 1.29, needs kernel 4.5+);
- net.ipv4.tcp_fin_timeout (since Kubernetes 1.29, needs kernel 4.6+);
- net.ipv4.tcp_keepalive_intvl (since Kubernetes 1.29, needs kernel 4.5+);
- net.ipv4.tcp_keepalive_probes (since Kubernetes 1.29, needs kernel 4.5+);
- net.ipv4.tcp_syncookies (namespaced since kernel 4.6+).
- net.ipv4.tcp_rmem (since Kubernetes 1.32, needs kernel 4.15+).
- net.ipv4.tcp_wmem (since Kubernetes 1.32, needs kernel 4.15+).
- net.ipv4.vs.conn_reuse_mode (used in ipvs proxy mode, needs kernel 4.1+);

----------------------------------------

TITLE: Google Cloud Storage Log Retrieval
DESCRIPTION: Command to fetch logs from Google Cloud Storage for a specific pod and date

LANGUAGE: bash
CODE:
$ gsutil -m cp -r gs://myproject/kubernetes.counter_default_count/2015/06/11 .

----------------------------------------

TITLE: Configuring Default PodTopologySpread Constraints in Kubernetes
DESCRIPTION: This YAML configuration demonstrates how to set up default PodTopologySpread constraints at the cluster level using the KubeSchedulerConfiguration API. It specifies a default constraint with maxSkew, topologyKey, and whenUnsatisfiable properties.

LANGUAGE: yaml
CODE:
apiVersion: kubescheduler.config.k8s.io/v1alpha2
kind: KubeSchedulerConfiguration
profiles:
  pluginConfig:
  - name: PodTopologySpread
    args:
      defaultConstraints:
      - maxSkew: 1
        topologyKey: example.com/rack
        whenUnsatisfiable: ScheduleAnyway

----------------------------------------

TITLE: Setting up zsh completion for kubectl
DESCRIPTION: Commands for loading and autoloading kubectl completion code for zsh shells.

LANGUAGE: zsh
CODE:
# Load the kubectl completion code for zsh[1] into the current shell
source <(kubectl completion zsh)
# Set the kubectl completion code for zsh[1] to autoload on startup
kubectl completion zsh > "${fpath[1]}/_kubectl"

----------------------------------------

TITLE: Configuring ServiceAccountTokenJTI Feature Gate in Kubernetes
DESCRIPTION: YAML configuration defining the feature gate stages for ServiceAccountTokenJTI. Transitions from alpha (v1.29) to beta (v1.30-1.31) to stable (v1.32) with specified default values for each stage.

LANGUAGE: yaml
CODE:
title: ServiceAccountTokenJTI
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.29"
    toVersion: "1.29"
  - stage: beta
    defaultValue: true
    fromVersion: "1.30"
    toVersion: "1.31"
  - stage: stable
    defaultValue: true
    fromVersion: "1.32"

----------------------------------------

TITLE: Deploying Kubernetes Cluster with ACS Engine
DESCRIPTION: Command to deploy a Kubernetes cluster using ACS engine with configuration specified in a JSON file

LANGUAGE: bash
CODE:
acs-engine deploy --subscription-id <subscription id> \
    --dns-prefix <dns> --location <location> \
    --api-model examples/kubernetes.json

----------------------------------------

TITLE: Rolling back a Kubernetes deployment
DESCRIPTION: Reverts the deployment to its previous state.

LANGUAGE: bash
CODE:
$ kubectl rollout undo deployment/update-demo

----------------------------------------

TITLE: VolumeAttributesClass HTTP LIST Operation
DESCRIPTION: HTTP request format for listing all VolumeAttributesClass resources

LANGUAGE: http
CODE:
GET /apis/storage.k8s.io/v1beta1/volumeattributesclasses

----------------------------------------

TITLE: KMS v2 Generate DEK Flow Diagram
DESCRIPTION: Mermaid sequence diagram demonstrating the Data Encryption Key generation process and encryption with remote Key Encryption Key.

LANGUAGE: mermaid
CODE:
%%{init:{"theme":"neutral", "sequence": {"mirrorActors":true}, "themeVariables": {"actorBkg":"royalblue","actorTextColor":"white"}}}%%

sequenceDiagram
    participant kube_api_server
    participant kms_plugin
    participant external_kms
        kube_api_server->>kube_api_server: generate DEK
        kube_api_server->>kms_plugin: encrypt request
        kms_plugin->>external_kms: encrypt DEK with remote KEK
        external_kms->>kms_plugin: encrypted DEK
        kms_plugin->>kube_api_server: return encrypt response <br/> {"ciphertext": "<encrypted DEK>", key_id: "<remote KEK ID>", "annotations": {}}

----------------------------------------

TITLE: ConfigMap Creation Examples
DESCRIPTION: Examples showing different ways to create config maps using kubectl, including from folders, files with custom keys, literal values, and env files.

LANGUAGE: bash
CODE:
  # Create a new config map named my-config based on folder bar
  kubectl create configmap my-config --from-file=path/to/bar
  
  # Create a new config map named my-config with specified keys instead of file basenames on disk
  kubectl create configmap my-config --from-file=key1=/path/to/bar/file1.txt --from-file=key2=/path/to/bar/file2.txt
  
  # Create a new config map named my-config with key1=config1 and key2=config2
  kubectl create configmap my-config --from-literal=key1=config1 --from-literal=key2=config2
  
  # Create a new config map named my-config from the key=value pairs in the file
  kubectl create configmap my-config --from-file=path/to/bar
  
  # Create a new config map named my-config from an env file
  kubectl create configmap my-config --from-env-file=path/to/foo.env --from-env-file=path/to/bar.env

----------------------------------------

TITLE: Listing DNS Deployments in Kubernetes
DESCRIPTION: This command lists the DNS deployments in the kube-system namespace to identify the target for scaling.

LANGUAGE: shell
CODE:
kubectl get deployment -l k8s-app=kube-dns --namespace=kube-system

----------------------------------------

TITLE: Loading External Files in Go E2E Tests
DESCRIPTION: Example of how external files can be loaded in E2E tests using the testfiles package after changes in Kubernetes 1.13.

LANGUAGE: Go
CODE:
import "k8s.io/kubernetes/test/e2e/framework/testfiles"

func loadFile() {
  data, err := testfiles.Read("test/e2e/testing-manifests/storage-csi/mock/csi-mock-driver.yaml")
  // Use data...
}

----------------------------------------

TITLE: Configuring AllowExtTrafficLocalEndpoints Feature Gate in YAML
DESCRIPTION: YAML configuration for the AllowExtTrafficLocalEndpoints feature gate in Kubernetes. It defines the feature's lifecycle stages, default values, and version ranges. The feature is marked as removed and was designed to enable routing of external requests to node local endpoints.

LANGUAGE: yaml
CODE:
---
# Removed from Kubernetes
title: AllowExtTrafficLocalEndpoints
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: beta 
    defaultValue: false
    fromVersion: "1.4"
    toVersion: "1.6"
  - stage: stable
    defaultValue: true
    fromVersion: "1.7"
    toVersion: "1.9"

removed: true
---

----------------------------------------

TITLE: SupportNodePidsLimit Feature Gate Configuration in YAML
DESCRIPTION: YAML configuration defining the lifecycle stages of the SupportNodePidsLimit feature gate. It specifies the feature's progression from alpha (v1.14) through beta (v1.15-1.19) to stable (v1.20-1.23) before removal.

LANGUAGE: yaml
CODE:
title: SupportNodePidsLimit
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.14"
    toVersion: "1.14"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.15"
    toVersion: "1.19"    
  - stage: stable
    defaultValue: true
    fromVersion: "1.20"
    toVersion: "1.23"    

removed: true

----------------------------------------

TITLE: Defining the TopologyInfo Message for Device Plugins in Protocol Buffers
DESCRIPTION: This Protocol Buffers message definition outlines the structure of topology information that device plugins can provide when registering with the kubelet in Kubernetes. It includes information about NUMA nodes.

LANGUAGE: Protocol Buffers
CODE:
message TopologyInfo {
    repeated NUMANode nodes = 1;
}

message NUMANode {
    int64 ID = 1;
}

----------------------------------------

TITLE: Defining KubeletInUserNamespace Feature Gate in YAML
DESCRIPTION: YAML configuration that defines the KubeletInUserNamespace feature gate settings. This feature was introduced as alpha in Kubernetes 1.22 with a default value of false.

LANGUAGE: yaml
CODE:
title: KubeletInUserNamespace
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha
    defaultValue: false
    fromVersion: "1.22"

----------------------------------------

TITLE: Priority Set Comparison with CEL
DESCRIPTION: CEL expression using the list library to verify that two sets of priorities do not overlap.

LANGUAGE: CEL
CODE:
lowPriorities.map(x, x.priority).max() < highPriorities.map(x, x.priority).min()

----------------------------------------

TITLE: Topology Manager Store Interface
DESCRIPTION: Go interface definition for storing and retrieving topology hints

LANGUAGE: go
CODE:
type Store interface {
    GetAffinity(podUID string, containerName string) TopologyHint
}

----------------------------------------

TITLE: Kubeadm Certificate Commands Overview
DESCRIPTION: Core commands for managing Kubernetes certificates using kubeadm, including renew, certificate-key, check-expiration, and generate-csr operations.

LANGUAGE: markdown
CODE:
kubeadm certs
kubeadm certs renew
kubeadm certs certificate-key
kubeadm certs check-expiration
kubeadm certs generate-csr

----------------------------------------

TITLE: Example Pod Configuration with Environment Variable
DESCRIPTION: Sample pod configuration demonstrating a container that relies on an environment variable

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: example-pod
spec:
  containers:
  - name: example-container
    image: customapp:latest
    env:
    - name: REQUIRED_ENV_VAR
      value: "value1"

----------------------------------------

TITLE: Configuring ExpandCSIVolumes Feature Gate Lifecycle in YAML
DESCRIPTION: This YAML configuration defines the lifecycle stages and removal status of the ExpandCSIVolumes feature gate in Kubernetes. It specifies the feature's progression from alpha to stable, along with default values and version ranges for each stage.

LANGUAGE: yaml
CODE:
# Removed from Kubernetes
title: ExpandCSIVolumes
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.14"
    toVersion: "1.15"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.16"
    toVersion: "1.23"    
  - stage: stable
    defaultValue: true
    fromVersion: "1.24"
    toVersion: "1.26"    

removed: true

----------------------------------------

TITLE: Configuring Kubectl Alias Autocompletion
DESCRIPTION: Commands to create a kubectl alias and enable autocompletion support for it.

LANGUAGE: bash
CODE:
echo 'alias k=kubectl' >>~/.bashrc
echo 'complete -o default -F __start_kubectl k' >>~/.bashrc

----------------------------------------

TITLE: APIService Resource Definition
DESCRIPTION: Defines the structure of an APIService resource including its spec and status.

LANGUAGE: go
CODE:
type APIService struct {
  metav1.TypeMeta `json:",inline"`
  metav1.ObjectMeta `json:"metadata,omitempty"`

  Spec APIServiceSpec `json:"spec,omitempty"`
  Status APIServiceStatus `json:"status,omitempty"`
}

----------------------------------------

TITLE: Creating a SelfSubjectAccessReview
DESCRIPTION: HTTP request for creating a new SelfSubjectAccessReview resource.

LANGUAGE: http
CODE:
POST /apis/authorization.k8s.io/v1/selfsubjectaccessreviews

----------------------------------------

TITLE: Configuring HPAContainerMetrics Feature Gate in YAML
DESCRIPTION: YAML configuration defining the lifecycle stages of the HPAContainerMetrics feature gate, including alpha, beta, and stable phases with their respective version ranges and default values.

LANGUAGE: yaml
CODE:
title: HPAContainerMetrics
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha
    defaultValue: false
    fromVersion: "1.20"
    toVersion: "1.26"
  - stage: beta
    defaultValue: true
    fromVersion: "1.27"
    toVersion: "1.29"
  - stage: stable
    defaultValue: true
    fromVersion: "1.30"
    toVersion: "1.31"

removed: true

----------------------------------------

TITLE: Switching Kubernetes Contexts in Kubeflow
DESCRIPTION: Commands to switch between minikube and GKE Kubernetes contexts when using Kubeflow.

LANGUAGE: bash
CODE:
# To access minikube
kubectl config use-context minikube

# To access GKE
kubectl config use-context gke

----------------------------------------

TITLE: Deleting the Minikube Cluster from Kubeconfig in Bash
DESCRIPTION: This example demonstrates how to delete the 'minikube' cluster from the kubeconfig file.

LANGUAGE: bash
CODE:
kubectl config delete-cluster minikube

----------------------------------------

TITLE: HTTP GET Request - Read ResourceClaimTemplate
DESCRIPTION: HTTP request format for retrieving a specific ResourceClaimTemplate resource.

LANGUAGE: http
CODE:
GET /apis/resource.k8s.io/v1beta1/namespaces/{namespace}/resourceclaimtemplates/{name}

----------------------------------------

TITLE: Installing kubeadm and kubelet on Windows for Kubernetes
DESCRIPTION: Downloads and executes a PowerShell script to install kubeadm and kubelet on a Windows Server instance. The script takes a Kubernetes version parameter which should be set to the desired version.

LANGUAGE: PowerShell
CODE:
curl.exe -LO https://raw.githubusercontent.com/kubernetes-sigs/sig-windows-tools/master/hostprocess/PrepareNode.ps1

LANGUAGE: PowerShell
CODE:
.\PrepareNode.ps1 -KubernetesVersion v{{< skew currentVersion >}}

----------------------------------------

TITLE: Creating a VolumeGroupSnapshot in Kubernetes YAML
DESCRIPTION: YAML definition for creating a VolumeGroupSnapshot object to request a new group snapshot. It specifies the volumeGroupSnapshotClassName and a selector to match PVCs for snapshotting.

LANGUAGE: yaml
CODE:
apiVersion: groupsnapshot.storage.k8s.io/v1beta1
kind: VolumeGroupSnapshot
metadata:
  name: snapshot-daily-20241217
  namespace: demo-namespace
spec:
  volumeGroupSnapshotClassName: csi-groupSnapclass
  source:
    selector:
      matchLabels:
        group: myGroup

----------------------------------------

TITLE: Deleting a Context from Kubernetes Kubeconfig
DESCRIPTION: This command deletes the specified context from the kubeconfig file. It takes the name of the context as an argument.

LANGUAGE: bash
CODE:
kubectl config delete-context NAME

----------------------------------------

TITLE: Configuring ServiceInternalTrafficPolicy Feature Gate in Kubernetes YAML
DESCRIPTION: YAML configuration for the ServiceInternalTrafficPolicy feature gate, detailing its lifecycle stages from alpha to stable. It includes version ranges and default values for each stage, and indicates that the feature has been removed.

LANGUAGE: yaml
CODE:
title: ServiceInternalTrafficPolicy
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.21"
    toVersion: "1.21"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.22"
    toVersion: "1.25"    
  - stage: stable
    defaultValue: true
    fromVersion: "1.26"
    toVersion: "1.27"    

removed: true

----------------------------------------

TITLE: Defining Pre-Provisioned PersistentVolume for CSI
DESCRIPTION: YAML configuration for manually creating a PersistentVolume that represents an existing CSI volume.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: PersistentVolume
metadata:
  name: my-manually-created-pv
spec:
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  csi:
    driver: com.example.team/csi-driver
    volumeHandle: existingVolumeName
    readOnly: false

----------------------------------------

TITLE: Defining InTreePluginPortworxUnregister Feature Gate Configuration in YAML
DESCRIPTION: YAML configuration that defines the InTreePluginPortworxUnregister feature gate properties including its stage, default value, and version information.

LANGUAGE: yaml
CODE:
title: InTreePluginPortworxUnregister
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha
    defaultValue: false
    fromVersion: "1.23"

----------------------------------------

TITLE: Creating Kubernetes Validation Policy Binding in YAML
DESCRIPTION: Shows how to bind a ValidatingAdmissionPolicy to specific namespaces using a ValidatingAdmissionPolicyBinding resource. This example binds the policy to namespaces labeled with environment=test.

LANGUAGE: yaml
CODE:
apiVersion: admissionregistration.k8s.io/v1alpha1
kind: ValidatingAdmissionPolicyBinding
metadata:
  name: "demo-binding-test.example.com"
spec:
  policyName: "demo-policy.example.com"
  matchResources:
    namespaceSelector:
      matchExpressions:
      - key: environment
        operator: In
        values:
        - test

----------------------------------------

TITLE: Creating a Pod using a CSI Volume in Kubernetes
DESCRIPTION: This YAML snippet defines a Pod that uses a CSI volume by referencing a PersistentVolumeClaim. The volume is mounted at '/var/www/html' in the container.

LANGUAGE: yaml
CODE:
kind: Pod
apiVersion: v1
metadata:
  name: my-pod
spec:
  containers:
    - name: my-frontend
      image: nginx
      volumeMounts:
      - mountPath: "/var/www/html"
        name: my-csi-volume
  volumes:
    - name: my-csi-volume
      persistentVolumeClaim:
        claimName: my-request-for-storage

----------------------------------------

TITLE: Configuring OpenAPIEnums Feature Gate in Kubernetes YAML
DESCRIPTION: This YAML configuration defines the OpenAPIEnums feature gate for Kubernetes. It specifies two stages: alpha (version 1.23) with default value false, and beta (from version 1.24) with default value true. The feature enables populating 'enum' fields in OpenAPI schemas returned by the API server.

LANGUAGE: yaml
CODE:
---
title: OpenAPIEnums
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.23"
    toVersion: "1.23"
  - stage: beta
    defaultValue: true
    fromVersion: "1.24"
---

----------------------------------------

TITLE: Quantity Greater Than Check with CEL
DESCRIPTION: CEL expression using the quantity library to test if a quantity is greater than another.

LANGUAGE: CEL
CODE:
quantity("150Mi").isGreaterThan(quantity("100Mi"))

----------------------------------------

TITLE: Defining ScheduleDaemonSetPods Feature Gate Stages in YAML
DESCRIPTION: This YAML configuration specifies the lifecycle stages of the ScheduleDaemonSetPods feature gate in Kubernetes. It outlines the alpha, beta, and stable stages with their respective version ranges and default values.

LANGUAGE: yaml
CODE:
---
# Removed from Kubernetes
title: ScheduleDaemonSetPods
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.11"
    toVersion: "1.11"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.12"
    toVersion: "1.16"
  - stage: stable
    defaultValue: true
    fromVersion: "1.17"
    toVersion: "1.18"

removed: true
---

----------------------------------------

TITLE: Installing and Running CSI Sanity Tests with Hostpath Driver
DESCRIPTION: A series of commands demonstrating how to deploy the CSI hostpath driver, create helper scripts for directory management, and run sanity tests using csi-sanity command.

LANGUAGE: bash
CODE:
$ cd csi-driver-host-path
$ git describe --tags HEAD
v1.2.0
$ kubectl get nodes
NAME        STATUS   ROLES    AGE   VERSION
127.0.0.1   Ready    <none>   42m   v1.16.0

$ deploy/kubernetes-1.16/deploy-hostpath.sh
[...]
$ cat >mkdir_in_pod.sh <<EOF
#!/bin/sh
kubectl exec csi-hostpathplugin-0 -c hostpath -- mktemp -d /tmp/csi-sanity.XXXXXX
EOF

$ cat >rmdir_in_pod.sh <<EOF
#!/bin/sh
kubectl exec csi-hostpathplugin-0 -c hostpath -- rmdir "\$@"
EOF

$ chmod u+x *_in_pod.sh
$ csi-sanity -ginkgo.v \
             -csi.endpoint dns:///127.0.0.1:$(kubectl get "services/hostpath-service" -o "jsonpath={..nodePort}") \
             -csi.createstagingpathcmd ./mkdir_in_pod.sh \
             -csi.createmountpathcmd ./mkdir_in_pod.sh \
             -csi.removestagingpathcmd ./rmdir_in_pod.sh \
             -csi.removemountpathcmd ./rmdir_in_pod.sh

----------------------------------------

TITLE: Checking KVM compatibility on Linux
DESCRIPTION: This command installs the cpu-checker package and runs kvm-ok to verify if the host can run KVM-based virtual machines.

LANGUAGE: shell
CODE:
sudo apt install cpu-checker && sudo kvm-ok

----------------------------------------

TITLE: Feature Gate Configuration in YAML
DESCRIPTION: YAML configuration defining the LocalStorageCapacityIsolationFSQuotaMonitoring feature gate stages, including alpha and beta phases with their respective version ranges and default values.

LANGUAGE: yaml
CODE:
stages:
  - stage: alpha
    defaultValue: false
    fromVersion: "1.15"
    toVersion: "1.30"
  - stage: beta 
    defaultValue: false
    fromVersion: "1.31"

----------------------------------------

TITLE: CSINode API Definition
DESCRIPTION: Base YAML definition for the CSINode API resource specifying apiVersion and import path

LANGUAGE: yaml
CODE:
apiVersion: "storage.k8s.io/v1"
import: "k8s.io/api/storage/v1"
kind: "CSINode"

----------------------------------------

TITLE: Renaming kubectl Context - Basic Command
DESCRIPTION: Basic command syntax for renaming a context in the kubeconfig file. Takes two arguments: the current context name and the new desired name.

LANGUAGE: bash
CODE:
kubectl config rename-context CONTEXT_NAME NEW_NAME

----------------------------------------

TITLE: Creating LocalQueue for Namespace Access
DESCRIPTION: YAML configuration for setting up a LocalQueue that connects a namespace to a specific ClusterQueue for job submissions.

LANGUAGE: yaml
CODE:
apiVersion: kueue.x-k8s.io/v1alpha2
kind: LocalQueue
metadata:
  name: training
  namespace: team-ml
spec:
  clusterQueue: research-pool

----------------------------------------

TITLE: Viewing Last Applied Configuration in Kubernetes
DESCRIPTION: This command allows users to view the latest last-applied-configuration annotations by type/name or file. It supports different output formats and provides various options for resource selection and processing.

LANGUAGE: bash
CODE:
kubectl apply view-last-applied (TYPE [NAME | -l label] | TYPE/NAME | -f FILENAME)

----------------------------------------

TITLE: Configuring Authorization in Kubernetes API Server
DESCRIPTION: Example YAML configuration for setting up authorization in a Kubernetes API server using multiple authorizers including webhooks, Node, and RBAC.

LANGUAGE: yaml
CODE:
apiVersion: apiserver.config.k8s.io/v1
kind: AuthorizationConfiguration
authorizers:
  - type: Webhook
    name: webhook
    webhook:
      authorizedTTL: 30s
      unauthorizedTTL: 30s
      timeout: 3s
      subjectAccessReviewVersion: v1
      matchConditionSubjectAccessReviewVersion: v1
      failurePolicy: Deny
      connectionInfo:
        type: KubeConfigFile
        kubeConfigFile: /kube-system-authz-webhook.yaml
      matchConditions:
      - expression: has(request.resourceAttributes)
      - expression: request.resourceAttributes.namespace == 'kube-system'
      - expression: "!('system:serviceaccounts:kube-system' in request.groups)"
  - type: Node
    name: node
  - type: RBAC
    name: rbac
  - type: Webhook
    name: in-cluster-authorizer
    webhook:
      authorizedTTL: 5m
      unauthorizedTTL: 30s
      timeout: 3s
      subjectAccessReviewVersion: v1
      failurePolicy: NoOpinion
      connectionInfo:
        type: InClusterConfig

----------------------------------------

TITLE: Creating a PersistentVolumeClaim for CSI Storage in Kubernetes
DESCRIPTION: This YAML snippet defines a PersistentVolumeClaim that requests 5Gi of storage using the 'fast-storage' StorageClass. This triggers dynamic provisioning of a CSI volume.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: my-request-for-storage
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: fast-storage

----------------------------------------

TITLE: Configuring ClusterTrustBundleProjection Feature Gate in YAML
DESCRIPTION: YAML configuration defining the ClusterTrustBundleProjection feature gate attributes including its stage (alpha), default value (false), and version introduction (1.29).

LANGUAGE: yaml
CODE:
title: ClusterTrustBundleProjection
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha
    defaultValue: false
    fromVersion: "1.29"

----------------------------------------

TITLE: Configuring DRAAdminAccess Feature Gate in YAML
DESCRIPTION: YAML configuration defining the DRAAdminAccess feature gate properties including its stage, default value, and version information. This feature gate requires DynamicResourceAllocation to be enabled to function.

LANGUAGE: yaml
CODE:
title: DRAAdminAccess
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha
    defaultValue: false
    fromVersion: "1.32"

----------------------------------------

TITLE: Configuring SidecarContainers Feature Gate in Kubernetes YAML
DESCRIPTION: YAML configuration for the SidecarContainers feature gate, specifying alpha and beta stages with their respective versions and default values. This feature allows init containers to be configured as sidecar containers by setting their restartPolicy to 'Always'.

LANGUAGE: yaml
CODE:
title: SidecarContainers
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.28"
    toVersion: "1.28"
  - stage: beta
    defaultValue: true
    fromVersion: "1.29"

----------------------------------------

TITLE: Querying API Groups List Response - Kubernetes API
DESCRIPTION: Example JSON response from the /api and /apis endpoints showing the list of API groups supported by a Kubernetes cluster. Includes group names, versions and preferred versions.

LANGUAGE: json
CODE:
{
  "kind": "APIGroupList",
  "apiVersion": "v1",
  "groups": [
    {
      "name": "apiregistration.k8s.io",
      "versions": [
        {
          "groupVersion": "apiregistration.k8s.io/v1",
          "version": "v1"
        }
      ],
      "preferredVersion": {
        "groupVersion": "apiregistration.k8s.io/v1",
        "version": "v1"
      }
    },
    {
      "name": "apps",
      "versions": [
        {
          "groupVersion": "apps/v1",
          "version": "v1"
        }
      ],
      "preferredVersion": {
        "groupVersion": "apps/v1",
        "version": "v1"
      }
    }
  ]
}

----------------------------------------

TITLE: Configuring TokenRequestProjection Feature Gate in Kubernetes YAML
DESCRIPTION: This YAML configuration defines the lifecycle stages and removal status of the TokenRequestProjection feature gate. It specifies the versions and default values for alpha, beta, and stable stages, and indicates that the feature has been removed.

LANGUAGE: yaml
CODE:
# Removed from Kubernetes
title: TokenRequestProjection
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.11"
    toVersion: "1.11"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.12"
    toVersion: "1.19"    
  - stage: stable
    defaultValue: true
    fromVersion: "1.20"
    toVersion: "1.21"    

removed: true

----------------------------------------

TITLE: Configuring systemd Cgroup Driver for containerd
DESCRIPTION: This TOML configuration snippet shows how to set the cgroup driver to systemd for containerd. This should be added to the containerd configuration file.

LANGUAGE: toml
CODE:
[plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
  ...
  [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
    SystemdCgroup = true

----------------------------------------

TITLE: Deleting kube-proxy Pods
DESCRIPTION: Command to delete all kube-proxy Pods in the kube-system namespace to apply configuration changes.

LANGUAGE: shell
CODE:
kubectl delete po -n kube-system -l k8s-app=kube-proxy

----------------------------------------

TITLE: Creating Kubernetes Resources
DESCRIPTION: Commands to create Kubernetes resources using kubectl apply and kubectl create, including creating resources from files, URLs, and stdin.

LANGUAGE: bash
CODE:
kubectl apply -f ./my-manifest.yaml            # create resource(s)
kubectl apply -f ./my1.yaml -f ./my2.yaml      # create from multiple files
kubectl apply -f ./dir                         # create resource(s) in all manifest files in dir
kubectl apply -f https://git.io/vPieo          # create resource(s) from url
kubectl create deployment nginx --image=nginx  # start a single instance of nginx

# create a Job which prints "Hello World"
kubectl create job hello --image=busybox -- echo "Hello World" 

# create a CronJob that prints "Hello World" every minute
kubectl create cronjob hello --image=busybox   --schedule="*/1 * * * *" -- echo "Hello World"    

kubectl explain pods                           # get the documentation for pod manifests

# Create multiple YAML objects from stdin
cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: Pod
metadata:
  name: busybox-sleep
spec:
  containers:
  - name: busybox
    image: busybox
    args:
    - sleep
    - "1000000"
---
apiVersion: v1
kind: Pod
metadata:
  name: busybox-sleep-less
spec:
  containers:
  - name: busybox
    image: busybox
    args:
    - sleep
    - "1000"
EOF

# Create a secret with several keys
cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: Secret
metadata:
  name: mysecret
type: Opaque
data:
  password: $(echo -n "s33msi4" | base64 -w0)
  username: $(echo -n "jane" | base64 -w0)
EOF

----------------------------------------

TITLE: Basic kubectl logs Command Syntax
DESCRIPTION: Base syntax for retrieving container logs from a pod. If the pod has only one container, the container name is optional.

LANGUAGE: bash
CODE:
kubectl logs [-f] [-p] (POD | TYPE/NAME) [-c CONTAINER]

----------------------------------------

TITLE: Overriding Sandbox Image for containerd
DESCRIPTION: This TOML configuration snippet shows how to override the default sandbox (pause) image used by containerd. This should be added to the containerd configuration file.

LANGUAGE: toml
CODE:
[plugins."io.containerd.grpc.v1.cri"]
  sandbox_image = "registry.k8s.io/pause:3.10"

----------------------------------------

TITLE: Enabling Pod Events in CRI-O Configuration
DESCRIPTION: TOML configuration snippet to enable pod events in CRI-O runtime settings.

LANGUAGE: toml
CODE:
[crio.runtime]
enable_pod_events: true

----------------------------------------

TITLE: Generating Server Key and Certificate with cfssl for Kubernetes
DESCRIPTION: This command generates the key and certificate for the Kubernetes API server using cfssl, based on the previously created CA and configuration files.

LANGUAGE: shell
CODE:
../cfssl gencert -ca=ca.pem -ca-key=ca-key.pem \
     --config=ca-config.json -profile=kubernetes \
     server-csr.json | ../cfssljson -bare server

----------------------------------------

TITLE: Configuring Named Rules in HTTPRoute
DESCRIPTION: Example showing how to use named rules in HTTPRoute for better referencing in logs and status messages.

LANGUAGE: yaml
CODE:
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: multi-color-route
  namespace: faces
spec:
  parentRefs:
    - name: my-gateway
      kind: Gateway
      port: 80
  rules:
  - name: center-rule
    matches:
    - path:
        type: PathPrefix
        value: /color/center
    backendRefs:
    - name: color-center
      port: 80
  - name: edge-rule
    matches:
    - path:
        type: PathPrefix
        value: /color/edge
    backendRefs:
    - name: color-edge
      port: 80

----------------------------------------

TITLE: Deploying IIS on Windows 2019 with RuntimeClass
DESCRIPTION: YAML manifest for deploying an IIS server on Windows Server 2019 using the previously defined RuntimeClass. This example includes both the Deployment and Service resources.

LANGUAGE: yaml
CODE:
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: iis-2019
  labels:
    app: iis-2019
spec:
  replicas: 1
  template:
    metadata:
      name: iis-2019
      labels:
        app: iis-2019
    spec:
      runtimeClassName: windows-2019
      containers:
      - name: iis
        image: mcr.microsoft.com/windows/servercore/iis:windowsservercore-ltsc2019
        resources:
          limits:
            cpu: 1
            memory: 800Mi
          requests:
            cpu: .1
            memory: 300Mi
        ports:
          - containerPort: 80
 selector:
    matchLabels:
      app: iis-2019
---
apiVersion: v1
kind: Service
metadata:
  name: iis
spec:
  type: LoadBalancer
  ports:
  - protocol: TCP
    port: 80
  selector:
    app: iis-2019

----------------------------------------

TITLE: Configuring MemoryManager Feature Gate in Kubernetes
DESCRIPTION: YAML configuration defining the lifecycle stages of the MemoryManager feature gate. It progressed from alpha in v1.21 (disabled by default), to beta in v1.22-1.31 (enabled by default), and finally to stable in v1.32 (enabled by default).

LANGUAGE: yaml
CODE:
title: MemoryManager
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha
    defaultValue: false
    fromVersion: "1.21"
    toVersion: "1.21"
  - stage: beta
    defaultValue: true
    fromVersion: "1.22"
    toVersion: "1.31"
  - stage: stable
    defaultValue: true
    fromVersion: "1.32"

----------------------------------------

TITLE: Defining Alert Shortcode in Hugo
DESCRIPTION: This YAML snippet demonstrates the usage of a Hugo shortcode to create an alert box with a title and content.

LANGUAGE: yaml
CODE:
{{% alert title="Disclaimer" %}}
The open source tools listed in this article are to serve as examples only 
and are in no way a direct recommendation from the Kubernetes community or authors.
{{% /alert %}}

----------------------------------------

TITLE: Basic Kubectl Rollout Resume Command
DESCRIPTION: The basic syntax for resuming a paused resource using kubectl rollout resume command.

LANGUAGE: bash
CODE:
kubectl rollout resume RESOURCE

----------------------------------------

TITLE: Configuring StorageClass for CSI Dynamic Provisioning
DESCRIPTION: YAML configuration for creating a StorageClass that enables dynamic volume provisioning using a CSI plugin.

LANGUAGE: yaml
CODE:
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: fast-storage
provisioner: com.example.team/csi-driver
parameters:
  type: pd-ssd

----------------------------------------

TITLE: Basic Kubectl Rollout Resume Command
DESCRIPTION: The basic syntax for resuming a paused resource using kubectl rollout resume command.

LANGUAGE: bash
CODE:
kubectl rollout resume RESOURCE

----------------------------------------

TITLE: Configuring ProxyTerminatingEndpoints Feature Gate in Kubernetes YAML
DESCRIPTION: Defines the ProxyTerminatingEndpoints feature gate configuration, including its stages from alpha to stable, version ranges, and default values. This feature enables kube-proxy to handle terminating endpoints when ExternalTrafficPolicy is set to Local.

LANGUAGE: yaml
CODE:
title: ProxyTerminatingEndpoints
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.22"
    toVersion: "1.25"
  - stage: beta
    defaultValue: true
    fromVersion: "1.26"  
    toVersion: "1.27" 
  - stage: stable
    defaultValue: true
    fromVersion: "1.28"  
    toVersion: "1.29" 
removed: true

----------------------------------------

TITLE: Testing PostgreSQL Replica Connection
DESCRIPTION: This command attempts to create a table on the PostgreSQL replica. It should fail, demonstrating that the replica is read-only in the cluster configuration.

LANGUAGE: bash
CODE:
psql -h pgset-replica -U postgres postgres  -c 'create table foo (id int)'

----------------------------------------

TITLE: Server Response for WebSocket Upgrade in Kubernetes
DESCRIPTION: Shows the server response to a successful WebSocket upgrade request in Kubernetes. The response includes the status code and headers confirming the protocol switch.

LANGUAGE: console
CODE:
Response Status: 101 Switching Protocols in 3 milliseconds
Response Headers:
    Upgrade: websocket
    Connection: Upgrade
    Sec-Websocket-Accept: j0/jHW9RpaUoGsUAv97EcKw8jFM=
    Sec-Websocket-Protocol: v5.channel.k8s.io

----------------------------------------

TITLE: Installing CRI-O and Kubernetes Packages on RPM-based Distributions
DESCRIPTION: These commands install the necessary dependencies and the CRI-O and Kubernetes packages from the newly added repositories on RPM-based distributions.

LANGUAGE: bash
CODE:
dnf install -y \
    conntrack \
    container-selinux \
    ebtables \
    ethtool \
    iptables \
    socat

LANGUAGE: bash
CODE:
dnf install -y --repo cri-o --repo kubernetes \
    cri-o \
    kubeadm \
    kubectl \
    kubelet

----------------------------------------

TITLE: Running Spark Application on Kubernetes Cluster
DESCRIPTION: This snippet demonstrates how to submit a Spark application to compute Pi on a Kubernetes cluster using spark-submit. It specifies the Kubernetes master URL, deployment mode, application name, main class, and various configurations.

LANGUAGE: bash
CODE:
$ bin/spark-submit \
   --master k8s://https://xx.yy.zz.ww \
   --deploy-mode cluster \
   --name spark-pi \
   --class org.apache.spark.examples.SparkPi \
   --conf spark.executor.instances=5 \
   --conf spark.kubernetes.container.image= \
   --conf spark.kubernetes.driver.pod.name=spark-pi-driver \
   local:///opt/spark/examples/jars/spark-examples_2.11-2.3.0.jar

----------------------------------------

TITLE: Configuring JobSuccessPolicy Feature Gate in Kubernetes YAML
DESCRIPTION: This YAML configuration defines the JobSuccessPolicy feature gate for Kubernetes. It specifies two stages: alpha (from version 1.30) with default value false, and beta (from version 1.31) with default value true. The feature allows users to specify when a Job can be declared as succeeded based on the set of succeeded pods.

LANGUAGE: yaml
CODE:
title: JobSuccessPolicy
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha
    defaultValue: false
    fromVersion: "1.30"
    toVersion: "1.30"
  - stage: beta
    defaultValue: true
    fromVersion: "1.31"

----------------------------------------

TITLE: Defining Pod with Strict SupplementalGroups Policy in Kubernetes YAML
DESCRIPTION: This YAML snippet defines a Pod with the new 'supplementalGroupsPolicy' set to 'Strict'. It demonstrates how to use the new feature to control supplementary group assignments.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: strict-supplementalgroups-policy
spec:
  securityContext:
    runAsUser: 1000
    runAsGroup: 3000
    supplementalGroups:
    - 4000
    supplementalGroupsPolicy: Strict
  containers:
  - name: ctr
    image: busybox
    command: ["sleep", "1d"]


----------------------------------------

TITLE: Running Kubernetes Upgrade Preflight Checks with kubeadm
DESCRIPTION: This command runs preflight checks before upgrading Kubernetes. It can be used to validate the system before performing an upgrade, with options to control behavior such as allowing experimental upgrades, ignoring certain errors, and performing a dry run.

LANGUAGE: bash
CODE:
kubeadm upgrade apply phase preflight [flags]

----------------------------------------

TITLE: Creating a PersistentVolumeClaim from a Snapshot in Kubernetes YAML
DESCRIPTION: This YAML defines a PersistentVolumeClaim that will be provisioned using data from an existing snapshot.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc-restore
  Namespace: demo-namespace
spec:
  storageClassName: csi-storageclass
  dataSource:
    name: new-snapshot-demo
    kind: VolumeSnapshot
    apiGroup: snapshot.storage.k8s.io
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

----------------------------------------

TITLE: Basic Kubelet Command Usage
DESCRIPTION: Basic command syntax for running kubelet with flags

LANGUAGE: bash
CODE:
kubelet [flags]

----------------------------------------

TITLE: Kubernetes Default Volume Limits Table
DESCRIPTION: HTML table showing default maximum volume limits per node for major cloud providers in Kubernetes

LANGUAGE: html
CODE:
<table>
  <tr><th>Cloud service</th><th>Maximum volumes per Node</th></tr>
  <tr><td><a href="https://aws.amazon.com/ebs/">Amazon Elastic Block Store (EBS)</a></td><td>39</td></tr>
  <tr><td><a href="https://cloud.google.com/persistent-disk/">Google Persistent Disk</a></td><td>16</td></tr>
  <tr><td><a href="https://azure.microsoft.com/en-us/services/storage/main-disks/">Microsoft Azure Disk Storage</a></td><td>16</td></tr>
</table>

----------------------------------------

TITLE: Importing Kubernetes Authentication API in Go
DESCRIPTION: Import statement for the Kubernetes authentication API package.

LANGUAGE: go
CODE:
import "k8s.io/api/authentication/v1"

----------------------------------------

TITLE: Configuring Route Binding in Kubernetes Gateway API
DESCRIPTION: Example showing how to configure an HTTPRoute to bind with a Gateway using label selectors.

LANGUAGE: yaml
CODE:
kind: HTTPRoute
apiVersion: networking.x-k8s.io/v1alpha1
metadata:
  name: foo-route
  namespace: foo-ns
  labels:
    gateway: external-https-prod

----------------------------------------

TITLE: Defining RootCAConfigMap Feature Gate Lifecycle in YAML
DESCRIPTION: YAML configuration defining the lifecycle stages of the RootCAConfigMap feature gate in Kubernetes. Specifies the progression from alpha through beta to stable across versions 1.13 to 1.22, with removal status.

LANGUAGE: yaml
CODE:
stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.13"
    toVersion: "1.19"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.20"
    toVersion: "1.20"
  - stage: stable
    defaultValue: true
    fromVersion: "1.21"
    toVersion: "1.22"

removed: true

----------------------------------------

TITLE: Pod Anti-Affinity Configuration for ZooKeeper
DESCRIPTION: JSON configuration showing Pod anti-affinity rules to prevent multiple ZooKeeper pods from being scheduled on the same node.

LANGUAGE: json
CODE:
{
              "podAntiAffinity": {
                "requiredDuringSchedulingRequiredDuringExecution": [{
                  "labelSelector": {
                    "matchExpressions": [{
                      "key": "app",
                      "operator": "In",
                      "values": ["zk-headless"]
                    }]
                  },
                  "topologyKey": "kubernetes.io/hostname"
                }]
              }
            }
}

----------------------------------------

TITLE: Webhook Authentication KubeConfig Example
DESCRIPTION: Example kubeconfig file showing webhook authentication credentials configuration

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Config
users:
- name: 'webhook1.ns1.svc'
  user:
    client-certificate-data: "<pem encoded certificate>"
    client-key-data: "<pem encoded key>"
- name: '*.webhook-company.org'
  user:
    password: "<password>"
    username: "<name>"
- name: '*'
  user:
    token: "<token>"

----------------------------------------

TITLE: Querying NVIDIA GPU Metrics in Prometheus Format
DESCRIPTION: Example of using NVIDIA GPU dcgm-exporter to scrape metrics showing SM clock frequency, memory clock frequency, and memory temperature with pod and container context.

LANGUAGE: prometheus
CODE:
$ curl -sL http://127.0.01:8080/metrics


# HELP DCGM_FI_DEV_SM_CLOCK SM clock frequency (in MHz).
# TYPE DCGM_FI_DEV_SM_CLOCK gauge
# HELP DCGM_FI_DEV_MEM_CLOCK Memory clock frequency (in MHz).
# TYPE DCGM_FI_DEV_MEM_CLOCK gauge
# HELP DCGM_FI_DEV_MEMORY_TEMP Memory temperature (in C).
# TYPE DCGM_FI_DEV_MEMORY_TEMP gauge
...
DCGM_FI_DEV_SM_CLOCK{gpu="0", UUID="GPU-604ac76c-d9cf-fef3-62e9-d92044ab6e52",container="foo",namespace="bar",pod="baz"} 139
DCGM_FI_DEV_MEM_CLOCK{gpu="0", UUID="GPU-604ac76c-d9cf-fef3-62e9-d92044ab6e52",container="foo",namespace="bar",pod="baz"} 405
DCGM_FI_DEV_MEMORY_TEMP{gpu="0", UUID="GPU-604ac76c-d9cf-fef3-62e9-d92044ab6e52",container="foo",namespace="bar",pod="baz"} 9223372036854775794

----------------------------------------

TITLE: Creating Kubernetes Deployment for Hello World App
DESCRIPTION: Shell command to apply the YAML configuration and create a Deployment for the Hello World application in Kubernetes.

LANGUAGE: shell
CODE:
kubectl apply -f https://k8s.io/examples/service/access/hello-application.yaml

----------------------------------------

TITLE: Configuring SeccompDefault Feature Gate Stages in YAML
DESCRIPTION: Defines the alpha, beta, and stable stages for the SeccompDefault feature gate, including version ranges and default values. The feature is marked as removed in the latest version.

LANGUAGE: yaml
CODE:
title: SeccompDefault
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.22"
    toVersion: "1.24"
  - stage: beta
    defaultValue: true
    fromVersion: "1.25"  
    toVersion: "1.26" 
  - stage: stable
    defaultValue: true
    fromVersion: "1.27"
    toVersion: "1.28"     

removed: true

----------------------------------------

TITLE: Configuring SeccompDefault Feature Gate Stages in YAML
DESCRIPTION: Defines the alpha, beta, and stable stages for the SeccompDefault feature gate, including version ranges and default values. The feature is marked as removed in the latest version.

LANGUAGE: yaml
CODE:
title: SeccompDefault
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.22"
    toVersion: "1.24"
  - stage: beta
    defaultValue: true
    fromVersion: "1.25"  
    toVersion: "1.26" 
  - stage: stable
    defaultValue: true
    fromVersion: "1.27"
    toVersion: "1.28"     

removed: true

----------------------------------------

TITLE: Sample Deployment Configuration
DESCRIPTION: Example YAML configuration file for a basic Nginx deployment

LANGUAGE: yaml
CODE:
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations: {}
  name: nginx-deployment
  namespace: default
spec:
  minReadySeconds: 5
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - image: nginx:1.14.2
        name: nginx
        ports:
        - containerPort: 80

----------------------------------------

TITLE: Webhook Authentication KubeConfig Example
DESCRIPTION: Example kubeconfig file showing webhook authentication credentials configuration

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Config
users:
- name: 'webhook1.ns1.svc'
  user:
    client-certificate-data: "<pem encoded certificate>"
    client-key-data: "<pem encoded key>"
- name: '*.webhook-company.org'
  user:
    password: "<password>"
    username: "<name>"
- name: '*'
  user:
    token: "<token>"

----------------------------------------

TITLE: Initializing Kubeflow with ksonnet
DESCRIPTION: Commands to initialize a Kubeflow application using ksonnet, install Kubeflow packages, and generate core components.

LANGUAGE: bash
CODE:
ks init my-kubeflow
cd my-kubeflow
ks registry add kubeflow \
github.com/google/kubeflow/tree/master/kubeflow
ks pkg install kubeflow/core
ks pkg install kubeflow/tf-serving
ks pkg install kubeflow/tf-job
ks generate core kubeflow-core --name=kubeflow-core

----------------------------------------

TITLE: Configuring DynamicResourceAllocation Feature Gate in Kubernetes YAML
DESCRIPTION: This YAML configuration defines the DynamicResourceAllocation feature gate for Kubernetes. It specifies the alpha and beta stages with their version ranges and default values. The feature enables support for resources with custom parameters and lifecycle independent of Pods.

LANGUAGE: yaml
CODE:
title: DynamicResourceAllocation
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha
    defaultValue: false
    fromVersion: "1.30"
    toVersion: "1.31"
  - stage: beta
    defaultValue: false
    fromVersion: "1.32"


----------------------------------------

TITLE: Defining LocalStorageCapacityIsolation Feature Gate Configuration in YAML
DESCRIPTION: YAML configuration defining the lifecycle stages and removal status of the LocalStorageCapacityIsolation feature gate. It specifies the progression through alpha, beta, and stable stages with their respective version ranges and default values.

LANGUAGE: yaml
CODE:
title: LocalStorageCapacityIsolation
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.7"
    toVersion: "1.9"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.10"
    toVersion: "1.24"
  - stage: stable
    defaultValue: true
    fromVersion: "1.25"
    toVersion: "1.26"

removed: true

----------------------------------------

TITLE: Configuring Test Endpoint Service for Blue/Green Deployment
DESCRIPTION: This YAML snippet creates a Kubernetes Service for internal testing of the Blue/Green deployment environments. It allows developers to access and verify the inactive environment before switching traffic.

LANGUAGE: yaml
CODE:
kind: Service
apiVersion: v1
metadata:
  name: tomcat-test-${TARGET_ROLE}
  labels:
    app: tomcat
    role: test-${TARGET_ROLE}
spec:
  type: LoadBalancer
  selector:
    app: tomcat
    role: ${TARGET_ROLE}
  ports:
    - port: 80
      targetPort: 8080

----------------------------------------

TITLE: Configuring PodAffinityNamespaceSelector Feature Gate in YAML
DESCRIPTION: YAML configuration defining the feature gate stages for PodAffinityNamespaceSelector, including alpha, beta, and stable phases with their corresponding Kubernetes versions and default values.

LANGUAGE: yaml
CODE:
stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.21"
    toVersion: "1.21"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.22"
    toVersion: "1.23"
  - stage: stable
    defaultValue: true
    fromVersion: "1.24"
    toVersion: "1.25"

----------------------------------------

TITLE: Configuring Proxy in Kubernetes kubeconfig
DESCRIPTION: YAML configuration snippet showing how to set up a proxy for a specific cluster in a kubeconfig file. This allows kubectl to use a proxy when communicating with the cluster.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Config

clusters:
- cluster:
    proxy-url: http://proxy.example.org:3128
    server: https://k8s.example.org/k8s/clusters/c-xxyyzz
  name: development

users:
- name: developer

contexts:
- context:
  name: development

----------------------------------------

TITLE: Setting Sysctls for a Kubernetes Pod
DESCRIPTION: This YAML configuration demonstrates how to set both safe and unsafe sysctls for a Kubernetes pod using the securityContext. It sets 'kernel.shm_rmid_forced', 'net.core.somaxconn', and 'kernel.msgmax'.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: sysctl-example
spec:
  securityContext:
    sysctls:
    - name: kernel.shm_rmid_forced
      value: "0"
    - name: net.core.somaxconn
      value: "1024"
    - name: kernel.msgmax
      value: "65536"
  ...

----------------------------------------

TITLE: Installing kubectl using Chocolatey
DESCRIPTION: This command installs kubectl using the Chocolatey package manager for Windows.

LANGUAGE: powershell
CODE:
choco install kubernetes-cli

----------------------------------------

TITLE: Updating VolumeAttributesClass for a PersistentVolumeClaim using kubectl
DESCRIPTION: Command to patch a PersistentVolumeClaim and change its VolumeAttributesClass using kubectl.

LANGUAGE: bash
CODE:
kubectl patch pvc test-pv-claim -p '{"spec": "volumeAttributesClassName": "gold"}'

----------------------------------------

TITLE: Defining Ingress Resource in Kubernetes YAML
DESCRIPTION: This YAML snippet defines an Ingress resource in Kubernetes. It is used to demonstrate how RBAC permissions correspond to API resources and their versions.

LANGUAGE: yaml
CODE:
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: test-ingress
spec:
  backend:
    serviceName: testsvc
    servicePort: 80

----------------------------------------

TITLE: Creating an Optional Secret
DESCRIPTION: Example YAML configuration for referencing an optional Secret in a Pod spec.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: mypod
spec:
  containers:
  - name: mypod
    image: redis
    volumeMounts:
    - name: foo
      mountPath: "/etc/foo"
      readOnly: true
  volumes:
  - name: foo
    secret:
      secretName: mysecret
      optional: true

----------------------------------------

TITLE: kubectl Multi-Container Pod Logging Commands
DESCRIPTION: Commands for getting and tailing logs from multiple containers within multiple pod replicas

LANGUAGE: bash
CODE:
$ kubectl get pods                                 # get pods to find pod ids

$ kubectl describe pod service-1786497219-2rbt1    # get containers in pod

$ kubectl log -f service-1786497219-2rbt1 server   # pod 1

$ kubectl log -f service-1786497219-2rbt1 gateway  # pod 1

$ kubectl log -f service-1786497219-8kfbp server   # pod 2

$ kubectl log -f service-1786497219-8kfbp gateway  # pod 2

$ kubectl log -f service-1786497219-lttxd server   # pod 3

$ kubectl log -f service-1786497219-lttxd gateway  # pod 3

----------------------------------------

TITLE: Adding Email Confirmation Step in Jenkins Pipeline
DESCRIPTION: This Groovy snippet shows how to add an email confirmation step in the Jenkins Pipeline before switching environments in a Blue/Green deployment.

LANGUAGE: groovy
CODE:
stage('Confirm') {
    mail (to: 'to@example.com',
        subject: "Job '${env.JOB_NAME}' (${env.BUILD_NUMBER}) is waiting for input",
        body: "Please go to ${env.BUILD_URL}.")
    input 'Ready to go?'
}

----------------------------------------

TITLE: PodSchedulingContextStatus Struct Definition in Go
DESCRIPTION: Defines the PodSchedulingContextStatus struct in Go, which describes where resources for the Pod can be allocated.

LANGUAGE: go
CODE:
type PodSchedulingContextStatus struct {
  ResourceClaims []ResourceClaimSchedulingStatus
}

----------------------------------------

TITLE: kubectl edit Command Examples
DESCRIPTION: Examples demonstrating various ways to use the kubectl edit command including editing services, jobs, deployments and using different editors and output formats.

LANGUAGE: bash
CODE:
  # Edit the service named 'registry'
  kubectl edit svc/registry
  
  # Use an alternative editor
  KUBE_EDITOR="nano" kubectl edit svc/registry
  
  # Edit the job 'myjob' in JSON using the v1 API format
  kubectl edit job.v1.batch/myjob -o json
  
  # Edit the deployment 'mydeployment' in YAML and save the modified config in its annotation
  kubectl edit deployment/mydeployment -o yaml --save-config
  
  # Edit the 'status' subresource for the 'mydeployment' deployment
  kubectl edit deployment mydeployment --subresource='status'

----------------------------------------

TITLE: Creating Kubernetes Deployment for Hello World App
DESCRIPTION: Shell command to apply the YAML configuration and create a Deployment for the Hello World application in Kubernetes.

LANGUAGE: shell
CODE:
kubectl apply -f https://k8s.io/examples/service/access/hello-application.yaml

----------------------------------------

TITLE: Basic Container Shell Access Commands
DESCRIPTION: Essential kubectl commands for creating pods and accessing their shell.

LANGUAGE: shell
CODE:
kubectl apply -f https://k8s.io/examples/application/shell-demo.yaml
kubectl get pod shell-demo
kubectl exec --stdin --tty shell-demo -- /bin/bash

----------------------------------------

TITLE: TokenRequest API Definition YAML
DESCRIPTION: Core YAML configuration showing the API version and import path for TokenRequest resource.

LANGUAGE: yaml
CODE:
apiVersion: authentication.k8s.io/v1
import: k8s.io/api/authentication/v1

----------------------------------------

TITLE: Provisioning a Cloned PVC in Kubernetes YAML
DESCRIPTION: This YAML snippet demonstrates how to provision a clone of an existing PVC. It specifies the dataSource as the original PVC to be cloned, along with other standard PVC configuration options.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
    name: clone-of-pvc-1
    namespace: myns
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: cloning
  resources:
    requests:
      storage: 5Gi
  dataSource:
    kind: PersistentVolumeClaim
    name: pvc-1

----------------------------------------

TITLE: Setting kubectl Config Values
DESCRIPTION: Base command for setting a property value in the kubeconfig file. The PROPERTY_NAME uses dot notation to specify nested attributes or map keys. PROPERTY_VALUE is the new value to set.

LANGUAGE: bash
CODE:
kubectl config set PROPERTY_NAME PROPERTY_VALUE

----------------------------------------

TITLE: Defining Storage Tests in Go for External Drivers
DESCRIPTION: Example of how to define storage tests for external drivers using the refactored storage test suites in Kubernetes 1.14.

LANGUAGE: Go
CODE:
import "k8s.io/kubernetes/test/e2e/storage/testsuites"

var _ = Describe("PMEM Volumes", func() {
  driver := initPMEMDriver()
  testsuites.DefineTestSuite(driver, testsuites.ProvisioningTestSuite)
})

----------------------------------------

TITLE: Creating Cinder Storage Class
DESCRIPTION: YAML manifest for creating a Kubernetes StorageClass for Cinder volumes.

LANGUAGE: yaml
CODE:
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: csi-sc-cinderplugin
provisioner: csi-cinderplugin

----------------------------------------

TITLE: CustomResourceDefinition Basic Structure
DESCRIPTION: Core fields required in a CustomResourceDefinition specification including apiVersion, kind and metadata

LANGUAGE: yaml
CODE:
- **apiVersion**: apiextensions.k8s.io/v1
- **kind**: CustomResourceDefinition
- **metadata** (<a href="{{< ref "../common-definitions/object-meta#ObjectMeta" >}}">ObjectMeta</a>)

----------------------------------------

TITLE: Defining VolumeSnapshotDataSource Feature Gate Configuration in YAML
DESCRIPTION: YAML configuration defining the lifecycle stages of the VolumeSnapshotDataSource feature gate in Kubernetes, including alpha, beta, and stable phases with their respective version ranges and default values.

LANGUAGE: yaml
CODE:
title: VolumeSnapshotDataSource
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.12"
    toVersion: "1.16"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.17"
    toVersion: "1.19"
  - stage: stable
    defaultValue: true
    fromVersion: "1.20"
    toVersion: "1.22"

removed: true

----------------------------------------

TITLE: Deploying Reviews v2
DESCRIPTION: Deploys version 2 of the reviews service with Istio sidecar injection.

LANGUAGE: bash
CODE:
kubectl apply -f \<(istioctl kube-inject -f bookinfo-reviews-v2.yaml)

----------------------------------------

TITLE: VolumeAttachment API Definition
DESCRIPTION: Defines the API version and import path for the VolumeAttachment resource

LANGUAGE: yaml
CODE:
apiVersion: storage.k8s.io/v1
import "k8s.io/api/storage/v1"

----------------------------------------

TITLE: Deploying Hello World Application in Kubernetes
DESCRIPTION: YAML configuration for deploying a Hello World application in Kubernetes. It creates a Deployment with two replicas of the application.

LANGUAGE: yaml
CODE:
{{% code_sample file="service/access/hello-application.yaml" %}}

----------------------------------------

TITLE: Enabling VolumeAttributesClass Feature Gate in Kubernetes
DESCRIPTION: Command to enable the VolumeAttributesClass feature gate in kube-controller-manager and kube-apiserver using the --feature-gates command line argument.

LANGUAGE: shell
CODE:
--feature-gates="...,VolumeAttributesClass=true"

----------------------------------------

TITLE: Deploying Bookinfo Application with Istio
DESCRIPTION: Deploys the v1 version of the Bookinfo application using Istio's sidecar injection.

LANGUAGE: bash
CODE:
kubectl apply -f \<(istioctl kube-inject -f bookinfo-v1.yaml)

----------------------------------------

TITLE: Creating a VolumeSnapshotClass in Kubernetes
DESCRIPTION: YAML definition for creating a VolumeSnapshotClass object to enable dynamic provisioning of volume snapshots.

LANGUAGE: yaml
CODE:
apiVersion: snapshot.storage.k8s.io/v1
kind: VolumeSnapshotClass
metadata:
  name: test-snapclass
driver: testdriver.csi.k8s.io
deletionPolicy: Delete
parameters:
  csi.storage.k8s.io/snapshotter-secret-name: mysecret
  csi.storage.k8s.io/snapshotter-secret-namespace: mysecretnamespace

----------------------------------------

TITLE: Configuring Pod Memory and CPU Resources in Kubernetes
DESCRIPTION: Example YAML configuration showing how to set memory and CPU requests/limits for a container within a Pod. Demonstrates the standard resource configuration pattern using requests and limits.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: example
spec:
  containers:
  - name: nginx
    resources:
      requests:
        memory: "64Mi"
        cpu: "250m"
      limits:
        memory: "64Mi"
        cpu: "500m"

----------------------------------------

TITLE: Checking CronJob Status with kubectl
DESCRIPTION: This command retrieves the status of a specific CronJob named 'hello' in the Kubernetes cluster.

LANGUAGE: shell
CODE:
kubectl get cronjob hello

----------------------------------------

TITLE: Deleting a Kubernetes Secret
DESCRIPTION: kubectl command to remove a Secret object from the cluster.

LANGUAGE: shell
CODE:
kubectl delete secret mysecret

----------------------------------------

TITLE: Checking Pod Status Across Federated Clusters
DESCRIPTION: This command checks the status of the pods across all federated clusters.

LANGUAGE: bash
CODE:
$ for c in $(kubectl config view -o jsonpath='{.contexts[*].name}'); do kubectl --context=$c get po; done

----------------------------------------

TITLE: kubectl config unset Examples
DESCRIPTION: Demonstrates common use cases for the unset command including removing the current-context and unsetting a namespace for a specific context.

LANGUAGE: bash
CODE:
  # Unset the current-context
  kubectl config unset current-context
  
  # Unset namespace in foo context
  kubectl config unset contexts.foo.namespace

----------------------------------------

TITLE: Verifying Pod Placement in Kubernetes
DESCRIPTION: This command displays information about running pods, including which node they are scheduled on, useful for confirming correct pod placement.

LANGUAGE: shell
CODE:
kubectl get pods --output=wide

----------------------------------------

TITLE: CustomResourceDefinition Names Configuration
DESCRIPTION: Configuration for the resource and kind names used by the custom resource

LANGUAGE: yaml
CODE:
- **names.kind** (string), required
- **names.plural** (string), required
- **names.categories** ([]string)
- **names.listKind** (string)
- **names.shortNames** ([]string)
- **names.singular** (string)

----------------------------------------

TITLE: Defining PriorityClass Template in Kubernetes YAML
DESCRIPTION: This YAML snippet shows the basic structure of a PriorityClass definition in Kubernetes, including optional fields like description and globalDefault.

LANGUAGE: yaml
CODE:
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: PRIORITYCLASS_NAME
value: 0 # any integer value between -1000000000 to 1000000000 
description: >-
  (Optional) description goes here!
globalDefault: false # or true. Only one PriorityClass can be the global default.

----------------------------------------

TITLE: Installing Docker on CentOS for Kubernetes
DESCRIPTION: Shell commands to install Docker CE on CentOS, configure the Docker daemon, and restart the service.

LANGUAGE: shell
CODE:
# Install Docker CE
## Set up the repository
### Install required packages.

yum install yum-utils device-mapper-persistent-data lvm2

### Add Docker repository.

yum-config-manager \
  --add-repo \
  https://download.docker.com/linux/centos/docker-ce.repo

## Install Docker CE.

yum update && yum install docker-ce-18.06.2.ce

## Create /etc/docker directory.

mkdir /etc/docker

# Configure the Docker daemon

cat > /etc/docker/daemon.json <<EOF
{
  "exec-opts": ["native.cgroupdriver=systemd"],
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "100m"
  },
  "storage-driver": "overlay2",
  "storage-opts": [
    "overlay2.override_kernel_check=true"
  ]
}
EOF

mkdir -p /etc/systemd/system/docker.service.d

# Restart Docker
systemctl daemon-reload
systemctl restart docker
systemctl enable docker

----------------------------------------

TITLE: Dockerfile for Data Container Image
DESCRIPTION: Example Dockerfile for creating a data container image for use with Image Populator.

LANGUAGE: Dockerfile
CODE:
FROM scratch
COPY index.html /index.html

----------------------------------------

TITLE: Print Default Reset Configuration Command
DESCRIPTION: Command to print the default reset configuration for kubeadm. Sensitive values like Bootstrap Token fields are replaced with placeholder values for validation purposes.

LANGUAGE: bash
CODE:
kubeadm config print reset-defaults [flags]

----------------------------------------

TITLE: Creating RoleBindings with kubectl in Kubernetes
DESCRIPTION: Commands to create various types of RoleBindings using kubectl.

LANGUAGE: shell
CODE:
kubectl create rolebinding bob-admin-binding --clusterrole=admin --user=bob --namespace=acme

kubectl create rolebinding myapp-view-binding --clusterrole=view --serviceaccount=acme:myapp --namespace=acme

kubectl create rolebinding myappnamespace-myapp-view-binding --clusterrole=view --serviceaccount=myappnamespace:myapp --namespace=acme

----------------------------------------

TITLE: Joining Clusters to Federation in Bash
DESCRIPTION: Joins the created clusters to the federation using kubefed commands.

LANGUAGE: bash
CODE:
kubefed --context=federation join cluster-europe-west1-b --cluster-context=gke_${FED_PROJECT}_europe-west1-b_gce-europe-west1-b --host-cluster-context=gke_${FED_PROJECT}_${FED_HOST_CLUSTER}_gce-${FED_HOST_CLUSTER}

kubefed --context=federation join cluster-asia-east1-a --cluster-context=gke_${FED_PROJECT}_asia-east1-a_gce-asia-east1-a --host-cluster-context=gke_${FED_PROJECT}_${FED_HOST_CLUSTER}_gce-${FED_HOST_CLUSTER}

kubefed --context=federation join cluster-us-east1-b --cluster-context=gke_${FED_PROJECT}_us-east1-b_gce-us-east1-b --host-cluster-context=gke_${FED_PROJECT}_${FED_HOST_CLUSTER}_gce-${FED_HOST_CLUSTER}

----------------------------------------

TITLE: PVCProtection Feature Gate Configuration in YAML
DESCRIPTION: YAML configuration defining the lifecycle stages of the PVCProtection feature gate. Shows it was introduced as alpha in version 1.9 with defaultValue false, and was deprecated in version 1.10.

LANGUAGE: yaml
CODE:
title: PVCProtection
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.9"
    toVersion: "1.9"
  - stage: deprecated
    fromVersion: "1.10"
    toVersion: "1.10"

removed: true

----------------------------------------

TITLE: Basic Pod Topology Spread Constraint
DESCRIPTION: Example of a basic Pod spec with a single topology spread constraint that spreads pods across zones.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: example-pod
spec:
  topologySpreadConstraints:
    - maxSkew: <integer>
      minDomains: <integer> # optional
      topologyKey: <string>
      whenUnsatisfiable: <string>
      labelSelector: <object>
      matchLabelKeys: <list> # optional; beta since v1.27
      nodeAffinityPolicy: [Honor|Ignore] # optional; beta since v1.26
      nodeTaintsPolicy: [Honor|Ignore] # optional; beta since v1.26

----------------------------------------

TITLE: Defining a Guaranteed QoS Pod with Exclusive CPU Requests in Kubernetes YAML
DESCRIPTION: This YAML snippet defines a pod specification that requests two exclusive CPUs. The pod is in the Guaranteed QoS class because the resource requests and limits are equal. The CPU request is an integer value to trigger exclusive CPU allocation.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: exclusive-2
spec:
  containers:
  - image: quay.io/connordoyle/cpuset-visualizer
    name: exclusive-2
    resources:
      # Pod is in the Guaranteed QoS class because requests == limits
      requests:
        # CPU request is an integer
        cpu: 2
        memory: "256M"
      limits:
        cpu: 2
        memory: "256M"

----------------------------------------

TITLE: Configuring NodeLogQuery Feature Gate in Kubernetes YAML
DESCRIPTION: This YAML configuration defines the NodeLogQuery feature gate, specifying its stages from alpha to beta, along with version ranges and default values. It enables querying logs of node services via the '/logs' endpoint.

LANGUAGE: yaml
CODE:
title: NodeLogQuery
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.27"
    toVersion: "1.29"
  - stage: beta
    defaultValue: false
    fromVersion: "1.30"

----------------------------------------

TITLE: Creating a Horizontal Pod Autoscaler using kubectl
DESCRIPTION: This command creates a Horizontal Pod Autoscaler for the 'frontend' ReplicaSet using kubectl, specifying the scaling parameters directly in the command.

LANGUAGE: shell
CODE:
kubectl autoscale rs frontend --max=10 --min=3 --cpu-percent=50

----------------------------------------

TITLE: Importing Kubernetes ControllerRevision API Package
DESCRIPTION: Import statement for using the ControllerRevision API in Go code

LANGUAGE: go
CODE:
import "k8s.io/api/apps/v1"

----------------------------------------

TITLE: Verify Calico Pod Deployment
DESCRIPTION: Command to verify the successful deployment of Calico pods in the kube-system namespace.

LANGUAGE: shell
CODE:
kubectl get pods --namespace=kube-system

----------------------------------------

TITLE: Installing kubectl using Scoop
DESCRIPTION: This command installs kubectl using the Scoop command-line installer for Windows.

LANGUAGE: powershell
CODE:
scoop install kubectl

----------------------------------------

TITLE: Decoding a Secret
DESCRIPTION: Decode the contents of a Secret using base64 decoding

LANGUAGE: shell
CODE:
echo 'MWYyZDFlMmU2N2Rm' | base64 --decode

----------------------------------------

TITLE: Converting Resources to New API Versions with kubectl
DESCRIPTION: Example of using kubectl convert command to automatically convert an existing Kubernetes resource to a newer API version.

LANGUAGE: bash
CODE:
kubectl convert -f ./my-deployment.yaml --output-version apps/v1

----------------------------------------

TITLE: Uncordoning Kubernetes Node
DESCRIPTION: Command to bring a node back online by marking it schedulable after maintenance.

LANGUAGE: shell
CODE:
kubectl uncordon <node-to-uncordon>

----------------------------------------

TITLE: Querying Node Container Runtime Information in Kubernetes
DESCRIPTION: Command to fetch and display node information including the container runtime version using kubectl.

LANGUAGE: shell
CODE:
kubectl get nodes -o wide

----------------------------------------

TITLE: Querying Node Container Runtime Information in Kubernetes
DESCRIPTION: Command to fetch and display node information including the container runtime version using kubectl.

LANGUAGE: shell
CODE:
kubectl get nodes -o wide

----------------------------------------

TITLE: Defining Prometheus Node Exporter DaemonSet in Kubernetes
DESCRIPTION: YAML manifest for a DaemonSet to deploy Prometheus node exporter on each Kubernetes node with rolling update strategy.

LANGUAGE: yaml
CODE:
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
   name: node-exporter
spec:
   updateStrategy:
       type: RollingUpdate
   template:
       metadata:
           labels:
               app: node-exporter
           name: node-exporter
       spec:
           containers:
           - image: prom/node-exporter:v0.13.0
               name: node-exporter
               ports:
               - containerPort: 9100
                   hostPort: 9100
                   name: scrape
           hostNetwork: true
           hostPID: true

----------------------------------------

TITLE: Signed Cluster-Info ConfigMap in Kubernetes
DESCRIPTION: This YAML snippet shows an example of a signed cluster-info ConfigMap in the kube-public namespace, used for cluster bootstrap process.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: ConfigMap
metadata:
  name: cluster-info
  namespace: kube-public
data:
  jws-kubeconfig-07401b: eyJhbGciOiJIUzI1NiIsImtpZCI6IjA3NDAxYiJ9..tYEfbo6zDNo40MQE07aZcQX2m3EB2rO3NuXtxVMYm9U
  kubeconfig: |
    apiVersion: v1
    clusters:
    - cluster:
        certificate-authority-data: <really long certificate data>
        server: https://10.138.0.2:6443
      name: ""
    contexts: []
    current-context: ""
    kind: Config
    preferences: {}
    users: []

----------------------------------------

TITLE: Defining a Basic VolumeSnapshotClass in Kubernetes YAML
DESCRIPTION: This snippet demonstrates how to define a basic VolumeSnapshotClass resource in Kubernetes. It specifies the API version, kind, metadata, driver, deletion policy, and parameters.

LANGUAGE: yaml
CODE:
apiVersion: snapshot.storage.k8s.io/v1
kind: VolumeSnapshotClass
metadata:
  name: csi-hostpath-snapclass
driver: hostpath.csi.k8s.io
deletionPolicy: Delete
parameters:

----------------------------------------

TITLE: Deploying MongoDB Components
DESCRIPTION: kubectl commands to deploy the StorageClass and MongoDB StatefulSet configurations.

LANGUAGE: bash
CODE:
kubectl apply -f googlecloud_ssd.yaml

kubectl apply -f mongo-statefulset.yaml

----------------------------------------

TITLE: Importing the StatefulSet API
DESCRIPTION: Import statement for using the StatefulSet API in Go

LANGUAGE: go
CODE:
import "k8s.io/api/apps/v1"

----------------------------------------

TITLE: Defining CustomResourceWebhookConversion Feature Gate in YAML
DESCRIPTION: YAML configuration for the CustomResourceWebhookConversion feature gate, specifying its lifecycle stages from alpha to stable, and its removal status.

LANGUAGE: yaml
CODE:
# Removed from Kubernetes
title: CustomResourceWebhookConversion
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.13"
    toVersion: "1.14"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.15"
    toVersion: "1.15"    
  - stage: stable
    defaultValue: true
    fromVersion: "1.16"
    toVersion: "1.18"

removed: true

----------------------------------------

TITLE: Implementing Network Policies in Kubernetes
DESCRIPTION: Example of a network policy that restricts inbound network access to backend pods, only allowing connections from frontend pods on port 80.

LANGUAGE: json
CODE:
{
  "kind": "NetworkPolicy",
  "metadata": {
    "name": "pol1"
  },
  "spec": {
    "allowIncoming": {
      "from": [{
        "pods": { "segment": "frontend" }
      }],
      "toPorts": [{
        "port": 80,
        "protocol": "TCP"
      }]
    },
    "podSelector": {
      "segment": "backend"
    }
  }
}

----------------------------------------

TITLE: Fetching Queue States Debug Information
DESCRIPTION: Command to retrieve current state of all queues from the API server debug endpoint.

LANGUAGE: shell
CODE:
kubectl get --raw /debug/api_priority_and_fairness/dump_queues

----------------------------------------

TITLE: Defining Development PriorityClass in Kubernetes YAML
DESCRIPTION: This YAML snippet defines a PriorityClass for development pods with a priority value of 1000000 and a description indicating its intended use.

LANGUAGE: yaml
CODE:
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: dev-pc
value: 1000000
globalDefault: false
description: >-
  (Optional) This priority class should only be used for all development pods.

----------------------------------------

TITLE: Creating TLS Secret for Ingress in Kubernetes
DESCRIPTION: Commands to generate a self-signed TLS certificate and create a Kubernetes Secret for use with Ingress.

LANGUAGE: bash
CODE:
$ openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout   

/tmp/tls.key -out /tmp/tls.crt -subj "/CN=echoheaders/O=echoheaders"

$ echo "  
apiVersion: v1  
kind: Secret  
metadata:
  name: tls  
data:  
  tls.crt: `base64 -w 0 /tmp/tls.crt`  
  tls.key: `base64 -w 0 /tmp/tls.key`  
" | kubectl create -f   

----------------------------------------

TITLE: ResourceClaim API Object Definition
DESCRIPTION: YAML definition showing the core structure of a ResourceClaim object including apiVersion, kind, metadata, spec and status fields

LANGUAGE: yaml
CODE:
apiVersion: resource.k8s.io/v1beta1
kind: ResourceClaim
metadata:
  name: example-claim
spec:
  controller: "example.com/driver"
  devices:
    requests:
    - deviceClassName: "example-device"
      name: "device-1"
status:
  allocation:
    devices:
      results: []

----------------------------------------

TITLE: OpenStack Cloud Provider Configuration
DESCRIPTION: INI configuration file for the OpenStack cloud provider, specifying authentication and network details.

LANGUAGE: ini
CODE:
[Global]
region=RegionOne
username=username
password=password
auth-url=https://openstack.cloud:5000/v3
tenant-id=14ba698c0aec4fd6b7dc8c310f664009
domain-id=default
ca-file=/etc/kubernetes/ca.pem

[LoadBalancer]
subnet-id=b4a9a292-ea48-4125-9fb2-8be2628cb7a1
floating-network-id=bc8a590a-5d65-4525-98f3-f7ef29c727d5

[BlockStorage]
bs-version=v2

[Networking]
public-network-name=public
ipv6-support-disabled=false

----------------------------------------

TITLE: Creating and Inspecting a Pod with Container Field Projections
DESCRIPTION: These shell commands create the Pod with container field projections and inspect the contents of the projected files.

LANGUAGE: shell
CODE:
kubectl apply -f https://k8s.io/examples/pods/inject/dapi-volume-resources.yaml
kubectl exec -it kubernetes-downwardapi-volume-example-2 -- sh
# Inside the container:
cat /etc/podinfo/cpu_limit
cat /etc/podinfo/cpu_request
cat /etc/podinfo/mem_limit
cat /etc/podinfo/mem_request
exit

----------------------------------------

TITLE: Ansible Playbook for Kubernetes Master Node Setup
DESCRIPTION: This YAML code defines an Ansible playbook for setting up the Kubernetes master node. It includes tasks for installing Docker, disabling swap, installing Kubernetes components, initializing the cluster, and setting up networking.

LANGUAGE: yaml
CODE:
---
- hosts: all
  become: true
  tasks:
  - name: Install packages that allow apt to be used over HTTPS
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg-agent
      - software-properties-common

  - name: Add an apt signing key for Docker
    apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present

  - name: Add apt repository for stable version
    apt_repository:
      repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable
      state: present

  - name: Install docker and its dependecies
    apt: 
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - docker-ce 
      - docker-ce-cli 
      - containerd.io
    notify:
      - docker status

  - name: Add vagrant user to docker group
    user:
      name: vagrant
      group: docker

  - name: Remove swapfile from /etc/fstab
    mount:
      name: "{{ item }}"
      fstype: swap
      state: absent
    with_items:
      - swap
      - none

  - name: Disable swap
    command: swapoff -a
    when: ansible_swaptotal_mb > 0

  - name: Add an apt signing key for Kubernetes
    apt_key:
      url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
      state: present

  - name: Adding apt repository for Kubernetes
    apt_repository:
      repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
      state: present
      filename: kubernetes.list

  - name: Install Kubernetes binaries
    apt: 
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
        - kubelet 
        - kubeadm 
        - kubectl

  - name: Configure node ip
    lineinfile:
      path: /etc/default/kubelet
      line: KUBELET_EXTRA_ARGS=--node-ip={{ node_ip }}

  - name: Restart kubelet
    service:
      name: kubelet
      daemon_reload: yes
      state: restarted

  - name: Initialize the Kubernetes cluster using kubeadm
    command: kubeadm init --apiserver-advertise-address="192.168.50.10" --apiserver-cert-extra-sans="192.168.50.10"  --node-name k8s-master --pod-network-cidr=192.168.0.0/16

  - name: Setup kubeconfig for vagrant user
    command: "{{ item }}"
    with_items:
     - mkdir -p /home/vagrant/.kube
     - cp -i /etc/kubernetes/admin.conf /home/vagrant/.kube/config
     - chown vagrant:vagrant /home/vagrant/.kube/config

  - name: Install calico pod network
    become: false
    command: kubectl create -f https://docs.projectcalico.org/v3.4/getting-started/kubernetes/installation/hosted/calico.yaml

  - name: Generate join command
    command: kubeadm token create --print-join-command
    register: join_command

  - name: Copy join command to local file
    local_action: copy content="{{ join_command.stdout_lines[0] }}" dest="./join-command"

  handlers:
    - name: docker status
      service: name=docker state=started

----------------------------------------

TITLE: Int-or-String Field Validation with CEL
DESCRIPTION: CEL expression to validate an int-or-string field for both the int and string cases.

LANGUAGE: CEL
CODE:
type(self) == string ? self == '99%' : self == 42

----------------------------------------

TITLE: Installing Docker and Kubernetes Components in Dockerfile
DESCRIPTION: Installs and configures Docker, kubeadm, kubelet and kubectl in the LTSP image.

LANGUAGE: Dockerfile
CODE:
# Install docker
RUN ltsp-chroot sh -c \
   '  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add - \
   && echo "deb https://download.docker.com/linux/ubuntu xenial stable" \
        > /etc/apt/sources.list.d/docker.list \
   && apt-get -y update \
   && apt-get -y install \
        docker-ce=$(apt-cache madison docker-ce | grep 18.06 | head -1 | awk "{print $ 3}")'

# Configure docker options
RUN DOCKER_OPTS="$(echo \
      --storage-driver=overlay2 \
      --iptables=false \
      --ip-masq=false \
      --log-driver=json-file \
      --log-opt=max-size=10m \
      --log-opt=max-file=5 \
      )" \
 && sed "/^ExecStart=/ s|$| $DOCKER_OPTS|g" \
      /opt/ltsp/amd64/lib/systemd/system/docker.service \
      > /opt/ltsp/amd64/etc/systemd/system/docker.service

# Install kubeadm, kubelet and kubectl
RUN ltsp-chroot sh -c \
      '  curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add - \
      && echo "deb http://apt.kubernetes.io/ kubernetes-xenial main" \
           > /etc/apt/sources.list.d/kubernetes.list \
      && apt-get -y update \
      && apt-get -y install kubelet kubeadm kubectl cri-tools'

----------------------------------------

TITLE: Managing Kubernetes Bootstrap Tokens Command
DESCRIPTION: The basic kubeadm command for managing bootstrap tokens with support for dry-run mode, help documentation, and custom kubeconfig file specification. The command supports token management operations in the kube-system namespace.

LANGUAGE: bash
CODE:
kubeadm token [flags]

----------------------------------------

TITLE: Initializers Feature Gate Configuration in YAML
DESCRIPTION: YAML configuration defining the lifecycle stages of the Initializers feature gate in Kubernetes. Shows the feature was in alpha from version 1.7 to 1.13, deprecated in 1.14, and is now removed.

LANGUAGE: yaml
CODE:
title: Initializers
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.7"
    toVersion: "1.13"
  - stage: deprecated
    fromVersion: "1.14"
    toVersion: "1.14"

removed: true

----------------------------------------

TITLE: Basic CRD Type Definition
DESCRIPTION: Base CustomResourceDefinition structure with TypeMeta, ObjectMeta, Spec and Status

LANGUAGE: go
CODE:
package v1

import (
   metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// An empty CRD as an example of defining a type using controller tools
// +kubebuilder:storageversion
// +kubebuilder:subresource:status
type TestCRD struct {
   metav1.TypeMeta   `json:",inline"`
   metav1.ObjectMeta `json:"metadata,omitempty"`

   Spec   TestCRDSpec   `json:"spec,omitempty"`
   Status TestCRDStatus `json:"status,omitempty"`
}

type TestCRDStatus struct {}
type TestCRDSpec struct {
   // You will fill this in as you go along
}

----------------------------------------

TITLE: Disabling Legacy Authorization in GKE
DESCRIPTION: Disable legacy authorization in Google Kubernetes Engine (GKE) by using the --no-enable-legacy-authorization flag.

LANGUAGE: bash
CODE:
--no-enable-legacy-authorization

----------------------------------------

TITLE: Defining CloudControllerManagerWebhook Feature Gate in YAML
DESCRIPTION: This YAML configuration defines the CloudControllerManagerWebhook feature gate for Kubernetes. It specifies the feature as alpha stage, with a default value of false, starting from version 1.27.

LANGUAGE: yaml
CODE:
---
title: CloudControllerManagerWebhook
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha
    defaultValue: false
    fromVersion: "1.27"
---

----------------------------------------

TITLE: Defining CloudControllerManagerWebhook Feature Gate in YAML
DESCRIPTION: This YAML configuration defines the CloudControllerManagerWebhook feature gate for Kubernetes. It specifies the feature as alpha stage, with a default value of false, starting from version 1.27.

LANGUAGE: yaml
CODE:
---
title: CloudControllerManagerWebhook
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha
    defaultValue: false
    fromVersion: "1.27"
---

----------------------------------------

TITLE: Running kube-proxy Basic Command
DESCRIPTION: Basic command to start the Kubernetes network proxy with default configuration.

LANGUAGE: bash
CODE:
kube-proxy [flags]

----------------------------------------

TITLE: Defining LoggingBetaOptions Feature Gate in YAML
DESCRIPTION: This YAML configuration defines the LoggingBetaOptions feature gate for Kubernetes. It specifies the feature gate's title, content type, build settings, and stages. The feature gate is in beta stage, defaulting to true from version 1.24.

LANGUAGE: yaml
CODE:
---
title: LoggingBetaOptions
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: beta
    defaultValue: true
    fromVersion: "1.24"
---

----------------------------------------

TITLE: Installing Worker Node Setup Commands
DESCRIPTION: Commands for setting up Kubernetes worker nodes including configuration file setup

LANGUAGE: bash
CODE:
$ curl -L -o k8s-on-rpi.zip https://github.com/awassink/k8s-on-rpi/archive/master.zip

$ apt-get update

$ apt-get install unzip

$ unzip k8s-on-rpi.zip

$ mkdir /etc/kubernetes

$ cp k8s-on-rpi-master/rootfs/etc/kubernetes/k8s.conf /etc/kubernetes/k8s.conf
### Change the ip-address in /etc/kubernetes/k8s.conf to match the master node ###
$ k8s-on-rpi-master/install-k8s-worker.sh

----------------------------------------

TITLE: Defining RecoverVolumeExpansionFailure Feature Gate Configuration in YAML
DESCRIPTION: YAML configuration defining the feature gate stages, default values, and version ranges for the RecoverVolumeExpansionFailure feature in Kubernetes. Specifies alpha stage from v1.23 to v1.31 with defaultValue false, and beta stage from v1.32 with defaultValue true.

LANGUAGE: yaml
CODE:
title: RecoverVolumeExpansionFailure
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.23"
    toVersion: "1.31"
  - stage: beta
    defaultValue: true
    fromVersion: "1.32"

----------------------------------------

TITLE: Example Pod with Tolerations in Kubernetes
DESCRIPTION: This YAML snippet shows an example of a pod specification with tolerations defined.

LANGUAGE: yaml
CODE:
{{% code_sample file="pods/pod-with-toleration.yaml" %}}

----------------------------------------

TITLE: Displaying Kubernetes Service Details with kubectl
DESCRIPTION: This snippet shows how to use kubectl to describe a Kubernetes service named 'nginx-service', displaying its details including type, IP, port, and endpoints.

LANGUAGE: bash
CODE:
# kubectl describe svc nginx-service
Name:			nginx-service
...
Type:			ClusterIP
IP:			    10.102.128.4
Port:			http	3080/TCP
Endpoints:		10.244.0.235:8080,10.244.1.237:8080
Session Affinity:	None

----------------------------------------

TITLE: Defining CSIMigrationAWS Feature Gate Stages in YAML
DESCRIPTION: This YAML configuration defines the various stages and default values for the CSIMigrationAWS feature gate across different Kubernetes versions. It includes alpha, beta, and stable stages with their respective version ranges and default values.

LANGUAGE: yaml
CODE:
stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.14"
    toVersion: "1.16"
  - stage: beta 
    defaultValue: false
    fromVersion: "1.17"
    toVersion: "1.22"    
  - stage: beta 
    defaultValue: true
    fromVersion: "1.23"
    toVersion: "1.24"    
  - stage: stable
    defaultValue: true
    fromVersion: "1.25"
    toVersion: "1.26"    

removed: true

----------------------------------------

TITLE: Deploying Multiple Kubernetes Resources
DESCRIPTION: Example of deploying multiple Kubernetes resources (Service and Deployment) from a single YAML file using kubectl apply.

LANGUAGE: shell
CODE:
kubectl apply -f https://k8s.io/examples/application/nginx-app.yaml

LANGUAGE: none
CODE:
service/my-nginx-svc created
deployment.apps/my-nginx created

----------------------------------------

TITLE: Using Kubectl Command
DESCRIPTION: Demonstrates the basic syntax of the kubectl command used for managing Kubernetes objects. The tool enables creating, inspecting, updating, and deleting Kubernetes resources through command line interface.

LANGUAGE: bash
CODE:
kubectl

----------------------------------------

TITLE: Creating Namespace for Pod Resources
DESCRIPTION: Shell command to create a new namespace for isolating pod resource examples

LANGUAGE: shell
CODE:
kubectl create namespace pod-resources-example

----------------------------------------

TITLE: Listing Pods in Kubernetes Deployment
DESCRIPTION: This shell command lists all pods created by the nginx deployment, filtering by the label app=nginx.

LANGUAGE: shell
CODE:
kubectl get pods -l app=nginx

----------------------------------------

TITLE: Listing MySQL Pods in Kubernetes
DESCRIPTION: This command lists all pods with the label 'app=mysql' in the Kubernetes cluster.

LANGUAGE: shell
CODE:
kubectl get pods -l app=mysql

----------------------------------------

TITLE: Verifying seccomp Profile for Specific Containers
DESCRIPTION: These bash snippets use crictl and jq to verify the seccomp profiles applied to different containers in a multi-container pod. They check if seccomp is null (Unconfined) or not null (RuntimeDefault).

LANGUAGE: bash
CODE:
sudo crictl inspect $(sudo crictl ps -q --name=test-container-nginx) |
    jq '.info.runtimeSpec.linux.seccomp == null'

LANGUAGE: bash
CODE:
sudo crictl inspect $(sudo crictl ps -q --name=test-container-redis) |
    jq '.info.runtimeSpec.linux.seccomp != null'

LANGUAGE: bash
CODE:
sudo crictl inspectp (sudo crictl pods -q --name test-pod) |
    jq '.info.runtimeSpec.linux.seccomp != null'

----------------------------------------

TITLE: Configuring Persistent Volume with Datera FlexVolume Plugin
DESCRIPTION: YAML configuration for creating a 100GB persistent volume using the Datera iSCSI storage plugin with replication factor of 3.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv-datera-0
spec:
  capacity:
    storage: 100Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  flexVolume:
    driver: "datera/iscsi"
    fsType: "xfs"
    options:
      volumeID: "kube-pv-datera-0"
      size: "100"
      replica: "3"
      backstoreServer: "tlx170.tlx.daterainc.com:7717"

----------------------------------------

TITLE: Creating LoadBalancer Service
DESCRIPTION: Exposes the application using a cloud provider's load balancer.

LANGUAGE: shell
CODE:
kubectl expose deployment source-ip-app --name=loadbalancer --port=80 --target-port=8080 --type=LoadBalancer

----------------------------------------

TITLE: Listing Cozystack Helm Releases
DESCRIPTION: Demonstrates how to list all Helm releases managed by Cozystack using kubectl.

LANGUAGE: shell
CODE:
kubectl get helmreleases -n tenant-kvaps -l cozystack.io/ui

----------------------------------------

TITLE: Creating a StorageClass for CSI Dynamic Provisioning in Kubernetes
DESCRIPTION: This YAML snippet defines a StorageClass that enables dynamic creation of 'fast-storage' volumes using a CSI plugin called 'csi-driver.example.com'. It specifies parameters for the storage type and secrets for provisioning.

LANGUAGE: yaml
CODE:
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: fast-storage
provisioner: csi-driver.example.com
parameters:
  type: pd-ssd
  csi.storage.k8s.io/provisioner-secret-name: mysecret
  csi.storage.k8s.io/provisioner-secret-namespace: mynamespace

----------------------------------------

TITLE: CustomResourcePublishOpenAPI Feature Gate Configuration
DESCRIPTION: YAML configuration defining the lifecycle stages of the CustomResourcePublishOpenAPI feature gate in Kubernetes. The feature progressed from alpha (v1.14) to beta (v1.15) to stable (v1.16-1.18) before being removed.

LANGUAGE: yaml
CODE:
title: CustomResourcePublishOpenAPI
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.14"
    toVersion: "1.14"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.15"
    toVersion: "1.15"    
  - stage: stable
    defaultValue: true
    fromVersion: "1.16"
    toVersion: "1.18"

removed: true

----------------------------------------

TITLE: Individual Health Check Query
DESCRIPTION: Command showing how to query an individual health check endpoint (etcd) using the livez endpoint.

LANGUAGE: shell
CODE:
curl -k https://localhost:6443/livez/etcd

----------------------------------------

TITLE: Setting Cross-Cutting Fields
DESCRIPTION: Example of setting namespace, prefix, suffix, labels and annotations across all resources

LANGUAGE: yaml
CODE:
namespace: my-namespace
namePrefix: dev-
nameSuffix: "-001"
labels:
  - pairs:
      app: bingo
    includeSelectors: true 
commonAnnotations:
  oncallPager: 800-555-1212
resources:
- deployment.yaml

----------------------------------------

TITLE: Defining CustomResourceFieldSelectors Feature Gate Stages in YAML
DESCRIPTION: YAML configuration defining the rollout stages of the CustomResourceFieldSelectors feature gate in Kubernetes. It specifies alpha (1.30), beta (1.31), and stable (1.32) stages with their respective default values and version ranges.

LANGUAGE: yaml
CODE:
stages:
  - stage: alpha
    defaultValue: false
    fromVersion: "1.30"  
    toVersion: "1.30"
  - stage: beta
    defaultValue: true
    fromVersion: "1.31" 
    toVersion: "1.31"
  - stage: stable
    defaultValue: true
    fromVersion: "1.32"

----------------------------------------

TITLE: Running Kubeadm Post-Upgrade Tasks Command
DESCRIPTION: Command syntax for executing post-upgrade tasks in kubeadm upgrade process. Supports configuration file input, dry-run mode, and custom kubeconfig specification.

LANGUAGE: bash
CODE:
kubeadm upgrade apply phase post-upgrade [flags]

----------------------------------------

TITLE: Elasticsearch Cluster Health Response
DESCRIPTION: Example JSON response showing Elasticsearch cluster health information accessed through the Kubernetes API proxy

LANGUAGE: json
CODE:
{
  "cluster_name" : "kubernetes_logging",
  "status" : "yellow",
  "timed_out" : false,
  "number_of_nodes" : 1,
  "number_of_data_nodes" : 1,
  "active_primary_shards" : 5,
  "active_shards" : 5,
  "relocating_shards" : 0,
  "initializing_shards" : 0,
  "unassigned_shards" : 5
}

----------------------------------------

TITLE: Defining a ReferenceGrant for Cross-Namespace Volume Data Source in Kubernetes YAML
DESCRIPTION: Example YAML definition for a ReferenceGrant resource that allows cross-namespace references for volume data sources.

LANGUAGE: yaml
CODE:
apiVersion: gateway.networking.k8s.io/v1beta1
kind: ReferenceGrant
metadata:
  name: allow-ns1-pvc
  namespace: default
spec:
  from:
  - group: ""
    kind: PersistentVolumeClaim
    namespace: ns1
  to:
  - group: snapshot.storage.k8s.io
    kind: VolumeSnapshot
    name: new-snapshot-demo

----------------------------------------

TITLE: Adding Local etcd Member Command
DESCRIPTION: Command syntax for adding a new local etcd member to a Kubernetes cluster using kubeadm. This command is part of the control-plane-join phase and supports various configuration options for customizing the etcd member addition process.

LANGUAGE: bash
CODE:
kubeadm join phase control-plane-join etcd [flags]

----------------------------------------

TITLE: Creating Google Cloud Storage bucket
DESCRIPTION: Creates a GCS bucket for storing Spark models using gsutil command.

LANGUAGE: bash
CODE:
$ gsutil mb gs://my-spark-models

----------------------------------------

TITLE: Listing Nodes with Labels in Kubernetes
DESCRIPTION: This command lists all nodes in the Kubernetes cluster along with their labels, which is useful for identifying nodes and their characteristics.

LANGUAGE: shell
CODE:
kubectl get nodes --show-labels

----------------------------------------

TITLE: Enabling CSI Feature Gates in Kubernetes
DESCRIPTION: Configuration flags required to enable CSI alpha feature in Kubernetes v1.9 for API server and kubelet binaries.

LANGUAGE: plaintext
CODE:
CSI is an alpha feature in Kubernetes v1.9. To enable it, set the following flags:

API server binary:
--feature-gates=CSIPersistentVolume=true
--runtime-config=storage.k8s.io/v1alpha1=true
API server binary and kubelet binaries:
--feature-gates=MountPropagation=true
--allow-privileged=true

----------------------------------------

TITLE: Retrieving ZooKeeper Pod Hostnames
DESCRIPTION: Shell command to get the hostnames of ZooKeeper Pods using kubectl exec.

LANGUAGE: shell
CODE:
for i in 0 1 2; do kubectl exec zk-$i -- hostname; done

----------------------------------------

TITLE: Executing Kubeadm Node Addon Upgrade Command
DESCRIPTION: Command to upgrade the default kubeadm addons on a node. Takes optional flags including help (-h, --help) and inherited rootfs path option.

LANGUAGE: shell
CODE:
kubeadm upgrade node phase addon [flags]

----------------------------------------

TITLE: Importing Quantity Type in Go for Kubernetes
DESCRIPTION: Shows how to import the Quantity type from the Kubernetes apimachinery package.

LANGUAGE: go
CODE:
import "k8s.io/apimachinery/pkg/api/resource"

----------------------------------------

TITLE: Fetching kubectl Credentials for GKE Clusters in Bash
DESCRIPTION: Retrieves kubectl configurations for the created GKE clusters using gcloud commands.

LANGUAGE: bash
CODE:
gcloud -q container clusters get-credentials gce-us-east1-b --zone=us-east1-b --project=${FED_PROJECT}

gcloud -q container clusters get-credentials gce-europe-west1-b --zone=europe-west1-b --project=${FED_PROJECT}

gcloud -q container clusters get-credentials gce-asia-east1-a --zone=asia-east1-a --project=${FED_PROJECT}

----------------------------------------

TITLE: Base64 Encoding Secret Data in Bash
DESCRIPTION: This Bash command demonstrates how to base64 encode secret data (in this case, an SSL key) for use in Kubernetes Secrets.

LANGUAGE: bash
CODE:
$ cat ssl.key | base64  
   LS0tLS1CRUdJTiBDRVJUS...

----------------------------------------

TITLE: Kubeadm Join Control Plane Join Phase
DESCRIPTION: Command for joining a node as a control-plane instance to the cluster.

LANGUAGE: markdown
CODE:
kubeadm join phase control-plane-join

----------------------------------------

TITLE: Creating Additional ServiceAccount
DESCRIPTION: Shell command with YAML to create a new ServiceAccount named build-robot

LANGUAGE: shell
CODE:
kubectl apply -f - <<EOF
apiVersion: v1
kind: ServiceAccount
metadata:
  name: build-robot
EOF

----------------------------------------

TITLE: Creating Additional ServiceAccount
DESCRIPTION: Shell command with YAML to create a new ServiceAccount named build-robot

LANGUAGE: shell
CODE:
kubectl apply -f - <<EOF
apiVersion: v1
kind: ServiceAccount
metadata:
  name: build-robot
EOF

----------------------------------------

TITLE: Configuring iptables for All-IP Backend Example
DESCRIPTION: This bash script extracts external and pod IP addresses from JSON output and sets up an iptables rule to direct all traffic from an external address to a local pod, regardless of ports and upper layer protocols.

LANGUAGE: bash
CODE:
xip=$(cat /tmp/out | jq -r .Service.IPs.ExternalIPs.V6[0])
podip=$(cat /tmp/out | jq -r '.Endpoints[]|select(.Local == true)|select(.IPs.V6 != null)|.IPs.V6[0]')
ip6tables -t nat -A PREROUTING -d $xip/128 -j DNAT --to-destination $podip

----------------------------------------

TITLE: Adding Nodes in Second Zone - GCE
DESCRIPTION: Command to add additional nodes in a different zone to an existing GCE cluster

LANGUAGE: bash
CODE:
KUBE_USE_EXISTING_MASTER=true MULTIZONE=true KUBERNETES_PROVIDER=gce KUBE_GCE_ZONE=us-central1-b NUM_NODES=3 kubernetes/cluster/kube-up.sh

----------------------------------------

TITLE: Launching Spark on Kubernetes
DESCRIPTION: Clones the Kubernetes repository and creates Spark objects using configuration files.

LANGUAGE: bash
CODE:
$ git clone https://github.com/kubernetes/kubernetes.git
$ kubectl create -f kubernetes/examples/spark

----------------------------------------

TITLE: Querying SRV Records with CoreDNS Pod Names
DESCRIPTION: Example of querying SRV records with CoreDNS's endpoint_pod_names option enabled, showing pod-name-based endpoint DNS names.

LANGUAGE: dns
CODE:
dnstools# host -t srv headless
headless.default.svc.cluster.local has SRV record 0 25 443 headless-65bb4c479f-qv84p.headless.default.svc.cluster.local.
headless.default.svc.cluster.local has SRV record 0 25 443 headless-65bb4c479f-zc8lx.headless.default.svc.cluster.local.
headless.default.svc.cluster.local has SRV record 0 25 443 headless-65bb4c479f-q7lf2.headless.default.svc.cluster.local.
headless.default.svc.cluster.local has SRV record 0 25 443 headless-65bb4c479f-566rt.headless.default.svc.cluster.local.

----------------------------------------

TITLE: Defining LoadBalancerIPMode Feature Gate Stages in YAML
DESCRIPTION: This YAML configuration specifies the stages, default values, and version ranges for the LoadBalancerIPMode feature gate in Kubernetes. It outlines the progression from alpha to stable across different Kubernetes versions.

LANGUAGE: yaml
CODE:
---
title: LoadBalancerIPMode
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha
    defaultValue: false
    fromVersion: "1.29"
    toVersion: "1.30"
  - stage: beta
    defaultValue: true
    fromVersion: "1.30"
    toVersion: "1.31"
  - stage: stable
    defaultValue: true
    fromVersion: "1.32"
---

----------------------------------------

TITLE: Embedding YouTube Video in Markdown
DESCRIPTION: Demonstrates how to embed a YouTube video in Markdown format, using an image as a clickable link to the video.

LANGUAGE: markdown
CODE:
 [![](https://img.youtube.com/vi/SZgqjMrxo3g/0.jpg)](https://www.youtube.com/watch?SZgqjMrxo3g)

----------------------------------------

TITLE: Updating Python Application Code
DESCRIPTION: Modify the Python application to change the output message from 'Hello, World!' to 'Hello, Draft!'.

LANGUAGE: bash
CODE:
$ cat <<EOF > app.py
from flask import Flask

app = Flask(__name__)

@app.route("/")
def hello():
    return "Hello, Draft!\n"

if __name__ == "__main__":
    app.run(host='0.0.0.0', port=8080)
EOF

----------------------------------------

TITLE: Viewing kubeadm init phase help
DESCRIPTION: Commands to view the list of phases and sub-phases for kubeadm init, as well as help for specific phases.

LANGUAGE: bash
CODE:
sudo kubeadm init phase control-plane controller-manager --help

sudo kubeadm init phase control-plane --help

----------------------------------------

TITLE: Checking ZooKeeper myid Files
DESCRIPTION: Shell command to check the contents of ZooKeeper myid files using kubectl exec.

LANGUAGE: shell
CODE:
for i in 0 1 2; do echo "myid zk-$i";kubectl exec zk-$i -- cat /var/lib/zookeeper/data/myid; done

----------------------------------------

TITLE: PodSecurityPolicySpec Configuration Example
DESCRIPTION: Example structure showing the hierarchy of PodSecurityPolicySpec fields under .spec with validation and mutation types specified.

LANGUAGE: yaml
CODE:
spec:
  privileged: false
  defaultAddCapabilities: []
  allowedCapabilities:
    - NET_BIND_SERVICE
  requiredDropCapabilities:
    - ALL
  volumes:
    - configMap
    - csi
    - downwardAPI
    - emptyDir
    - ephemeral
    - persistentVolumeClaim
    - projected
    - secret

----------------------------------------

TITLE: PodSecurityPolicySpec Configuration Example
DESCRIPTION: Example structure showing the hierarchy of PodSecurityPolicySpec fields under .spec with validation and mutation types specified.

LANGUAGE: yaml
CODE:
spec:
  privileged: false
  defaultAddCapabilities: []
  allowedCapabilities:
    - NET_BIND_SERVICE
  requiredDropCapabilities:
    - ALL
  volumes:
    - configMap
    - csi
    - downwardAPI
    - emptyDir
    - ephemeral
    - persistentVolumeClaim
    - projected
    - secret

----------------------------------------

TITLE: Dynamic VolumeSnapshotContent Configuration in Kubernetes
DESCRIPTION: YAML configuration for a dynamically created VolumeSnapshotContent resource that defines the snapshot details and reference.

LANGUAGE: yaml
CODE:
apiVersion: snapshot.storage.k8s.io/v1
kind: VolumeSnapshotContent
metadata:
  name: snapcontent-72d9a349-aacd-42d2-a240-d775650d2455
spec:
  deletionPolicy: Delete
  driver: hostpath.csi.k8s.io
  source:
    volumeHandle: ee0cfb94-f8d4-11e9-b2d8-0242ac110002
  sourceVolumeMode: Filesystem
  volumeSnapshotClassName: csi-hostpath-snapclass
  volumeSnapshotRef:
    name: new-snapshot-test
    namespace: default
    uid: 72d9a349-aacd-42d2-a240-d775650d2455

----------------------------------------

TITLE: Defining MountPropagation Feature Gate Configuration in YAML
DESCRIPTION: YAML configuration defining the lifecycle stages and versioning of the MountPropagation feature gate in Kubernetes. It specifies the feature's progression from alpha (1.8-1.9) to beta (1.10-1.11) to stable (1.12-1.14) before removal.

LANGUAGE: yaml
CODE:
title: MountPropagation
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.8"
    toVersion: "1.9"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.10"
    toVersion: "1.11"
  - stage: stable
    defaultValue: true
    fromVersion: "1.12"
    toVersion: "1.14"

removed: true

----------------------------------------

TITLE: Installing Kubeadm and Kubelet on Windows
DESCRIPTION: Downloads and runs a PowerShell script to install kubeadm and kubelet on a Windows node. The script takes a parameter for the Kubernetes version.

LANGUAGE: powershell
CODE:
curl.exe -LO https://raw.githubusercontent.com/kubernetes-sigs/sig-windows-tools/master/hostprocess/PrepareNode.ps1

LANGUAGE: powershell
CODE:
.\PrepareNode.ps1 -KubernetesVersion v{{< skew currentVersion >}}

----------------------------------------

TITLE: Defining StrictCostEnforcementForVAP Feature Gate Configuration in YAML
DESCRIPTION: YAML configuration defining the feature gate StrictCostEnforcementForVAP, specifying its build properties, stages, and version progression from beta to stable. The feature controls strict CEL cost validation for ValidatingAdmissionPolicies.

LANGUAGE: yaml
CODE:
title: StrictCostEnforcementForVAP
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: beta
    defaultValue: false
    fromVersion: "1.30"
    toVersion: "1.31"
  - stage: stable
    defaultValue: true
    fromVersion: "1.32"

----------------------------------------

TITLE: Defining PodLifecycleSleepAction Feature Gate Configuration
DESCRIPTION: YAML configuration defining the PodLifecycleSleepAction feature gate stages, including alpha and beta phases with their respective version ranges and default values.

LANGUAGE: yaml
CODE:
---
title: PodLifecycleSleepAction
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.29"
    toVersion: "1.29"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.30"
---

----------------------------------------

TITLE: Configuring CSIMigration Feature Gate in Kubernetes YAML
DESCRIPTION: Defines the lifecycle stages and configuration for the CSIMigration feature gate. The feature progressed from alpha (1.14-1.16) to beta (1.17-1.24) to stable (1.25-1.26) before being removed. It enabled translation logic for routing volume operations to CSI plugins.

LANGUAGE: yaml
CODE:
---
# Removed from Kubernetes
title: CSIMigration
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.14"
    toVersion: "1.16"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.17"
    toVersion: "1.24"    
  - stage: stable
    defaultValue: true
    fromVersion: "1.25"
    toVersion: "1.26"    

removed: true
---

----------------------------------------

TITLE: Manually Stopping and Restarting a Static Pod Container
DESCRIPTION: These commands demonstrate how to manually stop a static Pod container and observe the kubelet automatically restarting it.

LANGUAGE: shell
CODE:
crictl stop 129fd7d382018 # replace with the ID of your container
sleep 20
crictl ps

----------------------------------------

TITLE: Describing MySQL Deployment in Kubernetes
DESCRIPTION: This command displays detailed information about the MySQL Deployment in the Kubernetes cluster.

LANGUAGE: shell
CODE:
kubectl describe deployment mysql

----------------------------------------

TITLE: Starting Redis Service and Pod
DESCRIPTION: Shell commands to create Redis pod and service in Kubernetes cluster

LANGUAGE: shell
CODE:
kubectl apply -f https://k8s.io/examples/application/job/redis/redis-pod.yaml
kubectl apply -f https://k8s.io/examples/application/job/redis/redis-service.yaml

----------------------------------------

TITLE: Job Status Check Commands
DESCRIPTION: Shell commands to check status of a running Job

LANGUAGE: bash
CODE:
kubectl get job pi -o yaml
kubectl describe jobs/pi

----------------------------------------

TITLE: Configuring BlockVolume Feature Gate in YAML
DESCRIPTION: YAML configuration for the BlockVolume feature gate in Kubernetes. It specifies the feature's lifecycle stages, version ranges, and default values. The feature has been removed as of version 1.21.

LANGUAGE: yaml
CODE:
---
# Removed from Kubernetes
title: BlockVolume
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.9"
    toVersion: "1.12"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.13"
    toVersion: "1.17"    
  - stage: stable
    defaultValue: true
    fromVersion: "1.18"
    toVersion: "1.21"    

removed: true
---

----------------------------------------

TITLE: Enabling Bootstrap Token Authentication in Kubernetes API Server
DESCRIPTION: This snippet shows the flag to enable Bootstrap Token authentication on the Kubernetes API server.

LANGUAGE: plaintext
CODE:
--enable-bootstrap-token-auth

----------------------------------------

TITLE: Importing APIService in Go
DESCRIPTION: Import statement for using the APIService type in Go code.

LANGUAGE: go
CODE:
import "k8s.io/kube-aggregator/pkg/apis/apiregistration/v1"

----------------------------------------

TITLE: Configuring MinDomainsInPodTopologySpread Feature Gate in Kubernetes YAML
DESCRIPTION: This YAML configuration defines the stages and default values for the MinDomainsInPodTopologySpread feature gate across different Kubernetes versions. It specifies the feature's progression from alpha to stable, including version ranges and default values.

LANGUAGE: yaml
CODE:
title: MinDomainsInPodTopologySpread
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.24"
    toVersion: "1.24"
  - stage: beta
    defaultValue: false
    fromVersion: "1.25"
    toVersion: "1.26"
  - stage: beta
    defaultValue: true
    fromVersion: "1.27"
    toVersion: "1.29"
  - stage: stable
    defaultValue: true
    fromVersion: "1.30"
    toVersion: "1.31"

removed: true

----------------------------------------

TITLE: Basic Server-Side Apply Patch Request
DESCRIPTION: Demonstrates a minimal Server-Side Apply patch request format.

LANGUAGE: yaml
CODE:
{
  "apiVersion": "v1",
  "kind": "ConfigMap"
}

----------------------------------------

TITLE: Installing Minikube on macOS
DESCRIPTION: Command to download, make executable, and install the Minikube binary on macOS. For Linux, replace darwin-amd64 with linux-amd64.

LANGUAGE: bash
CODE:
curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-darwin-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/

----------------------------------------

TITLE: Verifying host validity for virtual machines
DESCRIPTION: This command runs the virt-host-validate tool to check if the host is properly configured to run virtual machines.

LANGUAGE: shell
CODE:
sudo virt-host-validate

----------------------------------------

TITLE: Creating a Custom Guestbook Abstraction with Puppet
DESCRIPTION: This snippet demonstrates how to create a higher-level abstraction for a Kubernetes guestbook application using Puppet. It defines custom parameters for replicas and container images.

LANGUAGE: puppet
CODE:
guestbook { 'myguestbook':
  redis_slave_replicas => 2,
  frontend_replicas => 3,
  redis_master_image => 'redis',
  redis_slave_image => 'gcr.io/google_samples/gb-redisslave:v1',
  frontend_image => 'gcr.io/google_samples/gb-frontend:v3',     
}

----------------------------------------

TITLE: Running Preflight Checks with Kubeadm Reset Phase in Kubernetes
DESCRIPTION: This snippet shows how to execute preflight checks on a node being reset using the kubeadm reset phase preflight command.

LANGUAGE: markdown
CODE:
## kubeadm reset phase preflight {#cmd-reset-phase-preflight}

{{< tabs name="tab-preflight" >}}
{{< tab name="preflight" include="generated/kubeadm_reset/kubeadm_reset_phase_preflight.md" />}}
{{< /tabs >}}

----------------------------------------

TITLE: ComponentStatus Resource Definition
DESCRIPTION: Defines the structure of the ComponentStatus resource, including its API version, kind, and fields.

LANGUAGE: go
CODE:
type ComponentStatus struct {
  metav1.TypeMeta
  metav1.ObjectMeta
  Conditions []ComponentCondition
}

----------------------------------------

TITLE: Watching ZooKeeper Pod Creation
DESCRIPTION: Shell command to watch the creation of ZooKeeper Pods using kubectl.

LANGUAGE: shell
CODE:
kubectl get pods -w -l app=zk

----------------------------------------

TITLE: Defining AdmissionResponse Struct in Go
DESCRIPTION: AdmissionResponse describes an admission response. It includes fields for allowing/denying the request, patches to be applied, and audit annotations.

LANGUAGE: go
CODE:
type AdmissionResponse struct {
    uid              types.UID
    allowed          bool
    status           *metav1.Status
    patch            []byte
    patchType        *PatchType
    auditAnnotations map[string]string
    warnings         []string
}

----------------------------------------

TITLE: Reconciling RBAC Resources from a File
DESCRIPTION: This command reconciles RBAC resources defined in a file named my-rbac-rules.yaml.

LANGUAGE: shell
CODE:
kubectl auth reconcile -f my-rbac-rules.yaml

----------------------------------------

TITLE: Basic Kubeadm Config Command Usage
DESCRIPTION: The basic syntax for the kubeadm config command. Used to manage the kubeadm-config ConfigMap that stores internal cluster configuration.

LANGUAGE: bash
CODE:
kubeadm config [flags]

----------------------------------------

TITLE: Editing and Reapplying Secrets in Kubernetes using Kustomize
DESCRIPTION: This snippet demonstrates how to edit a Secret by modifying the kustomization.yaml file and reapplying it. It creates a new Secret object instead of updating the existing one.

LANGUAGE: shell
CODE:
kubectl apply -k <directory-path>

----------------------------------------

TITLE: Configuring Pod Security Standards
DESCRIPTION: Example YAML configuration showing how to configure Pod Security policies via namespace labels

LANGUAGE: yaml
CODE:
apiVersion: apiserver.config.k8s.io/v1
kind: AdmissionConfiguration
plugins:
- name: PodSecurity
  configuration:
    apiVersion: pod-security.admission.config.k8s.io/v1beta1
    kind: PodSecurityConfiguration
    defaults:
      enforce: "baseline"
      enforce-version: "latest"
      audit: "baseline"
      audit-version: "latest"
      warn: "restricted"
      warn-version: "latest"
    exemptions:
      usernames: []
      runtimeClasses: []
      namespaces: [kube-system]

----------------------------------------

TITLE: Using HTTPS_PROXY Inline with kubectl Command
DESCRIPTION: This command shows how to set the HTTPS_PROXY environment variable inline with a kubectl command. This approach allows for using the proxy with a specific command without affecting the entire shell session.

LANGUAGE: shell
CODE:
HTTPS_PROXY=socks5://localhost:1080 kubectl get pods

----------------------------------------

TITLE: Enabling Network Isolation Annotation
DESCRIPTION: Annotation to enable network isolation on a namespace.

LANGUAGE: yaml
CODE:
net.alpha.kubernetes.io/network-isolation: [on | off]

----------------------------------------

TITLE: Configuring ControllerManager with ClusterConfiguration in YAML
DESCRIPTION: Example of customizing kube-controller-manager flags using the ClusterConfiguration object, showing how to set cluster signing key and deployment controller sync period.

LANGUAGE: yaml
CODE:
apiVersion: kubeadm.k8s.io/v1beta4
kind: ClusterConfiguration
kubernetesVersion: v1.16.0
controllerManager:
  extraArgs:
  - name: "cluster-signing-key-file"
    value: "/home/johndoe/keys/ca.key"
  - name: "deployment-controller-sync-period"
    value: "50"

----------------------------------------

TITLE: Moving kubectl Binary to System PATH on macOS
DESCRIPTION: Moves the kubectl binary to /usr/local/bin and changes its ownership to root.

LANGUAGE: bash
CODE:
sudo mv ./kubectl /usr/local/bin/kubectl
sudo chown root: /usr/local/bin/kubectl

----------------------------------------

TITLE: Displaying User Suggestions for Improving Kubernetes Documentation Content
DESCRIPTION: This code snippet presents user suggestions for improving the content of the Kubernetes documentation, focusing on more advanced examples, in-depth use cases, and clearer quick start guides.

LANGUAGE: text
CODE:
-  ...But since we're talking about docs, more is always better. More
advanced configuration examples would be, to me, the way to go. Like a Use Case page for each
configuration topic with beginner to advanced example scenarios. Something like that would be
awesome....
- More in-depth examples and use cases would be great. I often feel that the Kubernetes
documentation scratches the surface of a topic, which might be great for new users, but it leaves
more experienced users without much "official" guidance on how to implement certain things.
- More production like examples in the resource sections (notably secrets) or links to production like
examples
- It would be great to see a very clear "Quick Start" A->Z up and running like many other tech
projects. There are a handful of almost-quick-starts, but no single guidance. The result is
information overkill.

----------------------------------------

TITLE: Adding a Label to a Kubernetes Node
DESCRIPTION: This command adds a 'disktype=ssd' label to a specified node in the Kubernetes cluster.

LANGUAGE: shell
CODE:
kubectl label nodes <your-node-name> disktype=ssd

----------------------------------------

TITLE: HTTP GET Request for Pods List in Table Format
DESCRIPTION: Example of requesting a list of pods in Table format using content type negotiation

LANGUAGE: http
CODE:
GET /api/v1/pods
Accept: application/json;as=Table;g=meta.k8s.io;v=v1

----------------------------------------

TITLE: Defining Kubernetes Secret in YAML
DESCRIPTION: This YAML snippet defines a Kubernetes Secret resource that stores base64-encoded SSL certificates and htpasswd file for use by the Nginx SSL proxy.

LANGUAGE: yaml
CODE:
  apiVersion: "v1"
  kind: "Secret"
  metadata:
    name: "ssl-proxy-secret"
    namespace: "default"
  data:
    proxycert: "LS0tLS1CRUd..."
    proxykey: "LS0tLS1CR..."
    htpasswd: "ZXZhb..."

----------------------------------------

TITLE: ComponentCondition Structure
DESCRIPTION: Defines the structure of the ComponentCondition, which represents the condition of a component in the cluster.

LANGUAGE: go
CODE:
type ComponentCondition struct {
  Type    string
  Status  string
  Error   string
  Message string
}

----------------------------------------

TITLE: Feature State Declaration for Pod Security
DESCRIPTION: Kubernetes feature state declaration for Pod Security Admission Controller, indicating stable status in v1.25

LANGUAGE: yaml
CODE:
{{< feature-state for_k8s_version="v1.25" state="stable" >}}

----------------------------------------

TITLE: Defining kubectl Command Categories Table
DESCRIPTION: A markdown table that categorizes different kubectl commands into families and describes their usage contexts and purposes.

LANGUAGE: markdown
CODE:
| Type                                   | Used For                   | Description                                        |
|----------------------------------------|----------------------------|----------------------------------------------------|\n| Declarative Resource Management        | Deployment and operations (e.g. GitOps)   | Declaratively manage Kubernetes workloads using resource configuration     |
| Imperative Resource Management         | Development Only           | Run commands to manage Kubernetes workloads using Command Line arguments and flags |
| Printing Workload State | Debugging  | Print information about workloads |
| Interacting with Containers | Debugging  | Exec, attach, cp, logs |
| Cluster Management | Cluster operations | Drain and cordon Nodes |

----------------------------------------

TITLE: Defining kubectl Command Categories Table
DESCRIPTION: A markdown table that categorizes different kubectl commands into families and describes their usage contexts and purposes.

LANGUAGE: markdown
CODE:
| Type                                   | Used For                   | Description                                        |
|----------------------------------------|----------------------------|----------------------------------------------------|\n| Declarative Resource Management        | Deployment and operations (e.g. GitOps)   | Declaratively manage Kubernetes workloads using resource configuration     |
| Imperative Resource Management         | Development Only           | Run commands to manage Kubernetes workloads using Command Line arguments and flags |
| Printing Workload State | Debugging  | Print information about workloads |
| Interacting with Containers | Debugging  | Exec, attach, cp, logs |
| Cluster Management | Cluster operations | Drain and cordon Nodes |

----------------------------------------

TITLE: Création d'un ClusterRoleBinding
DESCRIPTION: Commande pour créer un ClusterRoleBinding accordant les permissions du ClusterRole 'cluster-admin' à l'utilisateur 'root' sur l'ensemble du cluster.

LANGUAGE: shell
CODE:
kubectl create clusterrolebinding root-cluster-admin-binding --clusterrole=cluster-admin --user=root

----------------------------------------

TITLE: Defining ExternalMetricValue Resource in Kubernetes
DESCRIPTION: Defines the ExternalMetricValue resource type which represents a single metric value for external metrics. Each value is identified by a metric name and set of string labels, with required fields for metric details, labels, timestamp, window, and value.

LANGUAGE: kubernetes
CODE:
apiVersion: external.metrics.k8s.io/v1beta1
kind: ExternalMetricValue
metricName: string     # required: name of the metric
metricLabels: map[string]string    # required: labels identifying time series
timestamp: meta/v1.Time    # required: metrics production time
window: int64    # required: calculation window for rate metrics
value: resource.Quantity    # required: metric value

----------------------------------------

TITLE: Defining RemainingItemCount Feature Gate Configuration in YAML
DESCRIPTION: YAML configuration defining the lifecycle stages of the RemainingItemCount feature gate in Kubernetes. Specifies the feature's progression from alpha through beta to stable, along with default values and version ranges.

LANGUAGE: yaml
CODE:
title: RemainingItemCount
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.15"
    toVersion: "1.15"
  - stage: beta
    defaultValue: true
    fromVersion: "1.16"
    toVersion: "1.28"    
  - stage: stable
    defaultValue: true
    fromVersion: "1.29"

----------------------------------------

TITLE: Defining Pod with Node Name in Kubernetes
DESCRIPTION: This YAML defines a pod spec that uses the nodeName field to directly assign the pod to a specific node.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: nginx
spec:
  containers:
  - name: nginx
    image: nginx
  nodeName: kube-01

----------------------------------------

TITLE: Defining TTLAfterFinished Feature Gate Configuration in YAML
DESCRIPTION: YAML configuration defining the lifecycle stages and properties of the TTLAfterFinished feature gate. Shows progression from alpha (v1.12) through beta (v1.21) to stable (v1.23) before removal.

LANGUAGE: yaml
CODE:
title: TTLAfterFinished
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.12"
    toVersion: "1.20"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.21"
    toVersion: "1.22"    
  - stage: stable
    defaultValue: true
    fromVersion: "1.23"
    toVersion: "1.24"    

removed: true

----------------------------------------

TITLE: Defining AppArmor Feature Gate Stages in Kubernetes
DESCRIPTION: YAML configuration that defines the feature gate stages for AppArmor security settings. It specifies a beta stage in version 1.30 and stable stage from version 1.31, both with default values set to true.

LANGUAGE: yaml
CODE:
title: AppArmorFields
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: beta
    defaultValue: true
    fromVersion: "1.30"
    toVersion: "1.30"
  - stage: stable
    defaultValue: true
    fromVersion: "1.31"

----------------------------------------

TITLE: Netassert Configuration Example
DESCRIPTION: A YAML configuration for netassert, a tool for network security testing in Kubernetes environments.

LANGUAGE: yaml
CODE:
k8s: # used for Kubernetes pods
  deployment: # only deployments currently supported
    test-frontend: # pod name, defaults to `default` namespace
      test-microservice: 80  # `test-microservice` is the DNS name of the target service
      test-database: -80     # `test-frontend` should not be able to access test-database's port 80
      169.254.169.254: -80, -443           # AWS metadata API
      metadata.google.internal: -80, -443  # GCP metadata API

    new-namespace:test-microservice:  # `new-namespace` is the namespace name
      test-database.new-namespace: 80 # longer DNS names can be used for other namespaces
      test-frontend.default: 80
      169.254.169.254: -80, -443           # AWS metadata API
      metadata.google.internal: -80, -443  # GCP metadata API

----------------------------------------

TITLE: ImagePolicyWebhook Configuration Example
DESCRIPTION: YAML configuration example for ImagePolicyWebhook admission controller showing webhook settings.

LANGUAGE: yaml
CODE:
imagePolicy:
  kubeConfigFile: /path/to/kubeconfig/for/backend
  # time in s to cache approval
  allowTTL: 50
  # time in s to cache denial
  denyTTL: 50
  # time in ms to wait between retries
  retryBackoff: 500
  # determines behavior if the webhook backend fails
  defaultAllow: true

----------------------------------------

TITLE: Executing Kubernetes Join Phase Command
DESCRIPTION: This command is used to invoke a single phase of the 'join' workflow in Kubernetes. It allows for fine-grained control over the node joining process.

LANGUAGE: bash
CODE:
kubeadm join phase [flags]

----------------------------------------

TITLE: Custom Pod Condition Patch Commands
DESCRIPTION: Commands to create and apply a custom condition patch to a Pod for testing condition-based failure policies.

LANGUAGE: sh
CODE:
cat <<EOF > patch.yaml
status:
  conditions:
  - type: ConfigIssue
    status: "True"
    reason: "NonExistingImage"
    lastTransitionTime: "$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
EOF

LANGUAGE: sh
CODE:
podName=$(kubectl get pods -l job-name=job-pod-failure-policy-config-issue -o jsonpath='{.items[0].metadata.name}')

LANGUAGE: sh
CODE:
kubectl patch pod $podName --subresource=status --patch-file=patch.yaml

----------------------------------------

TITLE: Defining KubeSchedulerConfiguration in YAML
DESCRIPTION: Top-level configuration for the Kubernetes scheduler, including profiles and extenders.

LANGUAGE: yaml
CODE:
apiVersion: kubescheduler.config.k8s.io/v1
kind: KubeSchedulerConfiguration
parallelism: 16
leaderElection:
  leaderElect: true
clientConnection:
  kubeconfig: /etc/kubernetes/scheduler.conf
profiles:
- schedulerName: default-scheduler
  plugins:
    queueSort:
      enabled:
      - name: PrioritySort
    preFilter:
      enabled:
      - name: NodeResourcesFit
    filter:
      enabled:
      - name: NodeUnschedulable
    score:
      enabled:
      - name: NodeResourcesBalancedAllocation
        weight: 1
  pluginConfig:
  - name: NodeResourcesFit
    args:
      scoringStrategy:
        type: LeastAllocated
        resources:
        - name: cpu
          weight: 1
        - name: memory
          weight: 1

----------------------------------------

TITLE: Immutable Since First Write CRD Definition
DESCRIPTION: CRD implementation for a field that becomes immutable after its first modification

LANGUAGE: go
CODE:
// +kubebuilder:validation:XValidation:rule="!has(oldSelf.value) || has(self.value)", message="Value is required once set"
type ImmutableSinceFirstWrite struct {
   metav1.TypeMeta   `json:",inline"`
   metav1.ObjectMeta `json:"metadata,omitempty"`

   // +kubebuilder:validation:Optional
   // +kubebuilder:validation:XValidation:rule="self == oldSelf",message="Value is immutable"
   // +kubebuilder:validation:MaxLength=512
   Value string `json:"value"`
}

----------------------------------------

TITLE: Resource Definition Changes in v1beta3
DESCRIPTION: Example of the new nested resource definition format, showing how container resources are expressed as maps with scaling suffixes support.

LANGUAGE: yaml
CODE:
resources{
  cpu: 1
}

----------------------------------------

TITLE: Inspecting Job Status
DESCRIPTION: Command to retrieve and inspect the status of a Job with Pod failure policy.

LANGUAGE: sh
CODE:
kubectl get jobs -l job-name=job-pod-failure-policy-failjob -o yaml

----------------------------------------

TITLE: Enforcing Pod Security Level on a Kubernetes Namespace
DESCRIPTION: This bash command enforces a specific Pod Security level on a Kubernetes namespace. It labels the namespace with the desired enforcement level, activating the corresponding security policies.

LANGUAGE: bash
CODE:
kubectl label --overwrite ns $NAMESPACE pod-security.kubernetes.io/enforce=$LEVEL

----------------------------------------

TITLE: Creating a PersistentVolumeClaim with VolumeAttributesClass in Kubernetes YAML
DESCRIPTION: YAML definition for creating a PersistentVolumeClaim that specifies a VolumeAttributesClass, along with storage class and other properties.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: test-pv-claim
spec:
  storageClassName: any-storage-class
  volumeAttributesClassName: silver
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 64Gi

----------------------------------------

TITLE: Defining a Pod Spec Using a Custom Device in Kubernetes
DESCRIPTION: This YAML snippet shows how to define a Pod specification that requests a custom device resource advertised by a device plugin in Kubernetes. It demonstrates requesting 2 units of a hypothetical 'hardware-vendor.example/foo' resource.

LANGUAGE: YAML
CODE:
---
apiVersion: v1
kind: Pod
metadata:
  name: demo-pod
spec:
  containers:
    - name: demo-container-1
      image: registry.k8s.io/pause:3.8
      resources:
        limits:
          hardware-vendor.example/foo: 2
#
# This Pod needs 2 of the hardware-vendor.example/foo devices
# and can only schedule onto a Node that's able to satisfy
# that need.
#
# If the Node has more than 2 of those devices available, the
# remainder would be available for other Pods to use.

----------------------------------------

TITLE: Executing kubeadm version Command in Bash
DESCRIPTION: This command prints the version of kubeadm. It can be customized with flags to specify the output format.

LANGUAGE: bash
CODE:
kubeadm version [flags]

----------------------------------------

TITLE: OpenAPI Pod Read Operation Specification in JSON
DESCRIPTION: JSON specification showing the OpenAPI definition for reading pod information, including parameters, response types, and authentication requirements.

LANGUAGE: json
CODE:
{
...  
  "paths": {
"/api/v1/namespaces/{namespace}/pods/{name}": {  
    "get": {  
     "description": "read the specified Pod",  
     "consumes": [  
      "*//*"  
     ],  
     "produces": [  
      "application/json",  
      "application/yaml",  
      "application/vnd.kubernetes.protobuf"  
     ],  
     "schemes": [  
      "https"  
     ],  
     "tags": [  
      "core_v1"  
     ],  
     "operationId": "readCoreV1NamespacedPod",  
     "parameters": [  
      {  
       "uniqueItems": true,  
       "type": "boolean",  
       "description": "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.",  
       "name": "exact",  
       "in": "query"  
      },  
      {  
       "uniqueItems": true,  
       "type": "boolean",  
       "description": "Should this value be exported.  Export strips fields that a user can not specify.",  
       "name": "export",  
       "in": "query"  
      }  
     ],  
     "responses": {  
      "200": {  
       "description": "OK",  
       "schema": {  
        "$ref": "#/definitions/v1.Pod"  
       }  
      },  
      "401": {  
       "description": "Unauthorized"  
      }  
     }  
    },
…
}
…

----------------------------------------

TITLE: Marking Third-Party Content in Kubernetes Documentation
DESCRIPTION: This code snippet shows how to use shortcodes to mark third-party content in Kubernetes documentation, either for a list of items or for individual items.

LANGUAGE: go-html-template
CODE:
{{%/* thirdparty-content */%}}

{{%/* thirdparty-content single="true" */%}}

----------------------------------------

TITLE: YAML Front Matter Configuration for Kubernetes Docs
DESCRIPTION: YAML configuration block defining metadata for the documentation page, including title, content type, and navigation card settings.

LANGUAGE: yaml
CODE:
---
title: Participating in SIG Docs
content_type: concept
weight: 60
card:
  name: contribute
  weight: 60
---

----------------------------------------

TITLE: YAML Pod Creation Response
DESCRIPTION: Example response showing a Pod object in YAML format after creation

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: my-pod
  ...

----------------------------------------

TITLE: Creating Backend Pods Across Clusters
DESCRIPTION: Loop command to create nginx backend pods in all the underlying clusters

LANGUAGE: bash
CODE:
for CLUSTER in asia-east1-a europe-west1-a us-east1-a us-central1-a
do
kubectl --context=$CLUSTER run nginx --image=nginx:1.11.1-alpine --port=80
done

----------------------------------------

TITLE: Creating Finance Label Constraint for Namespaces
DESCRIPTION: A YAML configuration that creates a constraint requiring the 'finance' label on all namespaces. Shows template reuse with different parameters.

LANGUAGE: yaml
CODE:
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: K8sRequiredLabels
metadata:
  name: ns-must-have-finance
spec:
  match:
    kinds:
      - apiGroups: [""]
        kinds: ["Namespace"]
  parameters:
    labels: ["finance"]

----------------------------------------

TITLE: Creating Kubernetes Secret from YAML
DESCRIPTION: This Bash command shows how to create a Kubernetes Secret resource from a YAML file using kubectl.

LANGUAGE: bash
CODE:
$ kubectl create -f secrets.json

----------------------------------------

TITLE: Defining Frontmatter for Kubernetes Documentation in YAML
DESCRIPTION: This YAML snippet defines the frontmatter for a Kubernetes documentation page. It sets the 'headless' property to true, which is typically used to indicate that the page should not have its own entry in the navigation structure.

LANGUAGE: yaml
CODE:
---
headless: true
---

----------------------------------------

TITLE: Date and Duration Validation with CEL
DESCRIPTION: CEL expression to validate that 'expired' date is after a 'create' date plus a 'ttl' duration.

LANGUAGE: CEL
CODE:
has(self.expired) && self.created + self.ttl < self.expired

----------------------------------------

TITLE: ComponentStatusList Resource Definition
DESCRIPTION: Defines the structure of the ComponentStatusList resource, which represents a list of ComponentStatus objects.

LANGUAGE: go
CODE:
type ComponentStatusList struct {
  metav1.TypeMeta
  metav1.ListMeta
  Items []ComponentStatus
}

----------------------------------------

TITLE: Projecting Secret Keys to Specific File Paths
DESCRIPTION: Shows how to control the file paths where Secret keys are projected within a volume using the .spec.volumes[].secret.items field in the Pod configuration.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: mypod
spec:
  containers:
  - name: mypod
    image: redis
    volumeMounts:
    - name: foo
      mountPath: "/etc/foo"
      readOnly: true
  volumes:
  - name: foo
    secret:
      secretName: mysecret
      items:
      - key: username
        path: my-group/my-username

----------------------------------------

TITLE: Job with Manual Selector
DESCRIPTION: Example YAML for a Job with a manually specified selector

LANGUAGE: yaml
CODE:
kind: Job
metadata:
  name: new
  ...
spec:
  manualSelector: true
  selector:
    matchLabels:
      batch.kubernetes.io/controller-uid: a8f3d00d-c6d2-11e5-9f87-42010af00002
  ...

----------------------------------------

TITLE: Generating Kubernetes Control Plane Manifests using kubeadm
DESCRIPTION: This command generates all static Pod manifest files necessary to establish the Kubernetes control plane. It is part of the 'kubeadm init' workflow and can be run independently for more granular control.

LANGUAGE: bash
CODE:
kubeadm init phase control-plane [flags]

----------------------------------------

TITLE: Deploying Debug Pod to Kubernetes Node
DESCRIPTION: This command deploys a debugging Pod with an Ubuntu image to a specified node and opens an interactive shell. It's useful for scenarios where SSH access to the node is not available.

LANGUAGE: shell
CODE:
kubectl debug node/mynode -it --image=ubuntu

----------------------------------------

TITLE: Deploying Debug Pod to Kubernetes Node
DESCRIPTION: This command deploys a debugging Pod with an Ubuntu image to a specified node and opens an interactive shell. It's useful for scenarios where SSH access to the node is not available.

LANGUAGE: shell
CODE:
kubectl debug node/mynode -it --image=ubuntu

----------------------------------------

TITLE: Creating a Simple Go Application for Seccomp Profile Testing
DESCRIPTION: This Go code creates a minimal application that calls the uname system call, which will be used to demonstrate seccomp profile recording and testing.

LANGUAGE: go
CODE:
package main

import (
	"syscall"
)

func main() {
	utsname := syscall.Utsname{}
	if err := syscall.Uname(&utsname); err != nil {
		panic(err)
	}
}

----------------------------------------

TITLE: Troubleshooting GMSA Configuration
DESCRIPTION: PowerShell commands to troubleshoot GMSA configuration issues inside a Windows Pod.

LANGUAGE: powershell
CODE:
nltest.exe /parentdomain
nltest.exe /query
nltest /sc_reset:domain.example

----------------------------------------

TITLE: Creating SOCKS5 Proxy with SSH for Kubernetes API Access
DESCRIPTION: This command establishes a SOCKS5 proxy using SSH to connect to a remote Kubernetes server. It opens a local port 1080 for the proxy and sets up a quiet, non-interactive SSH session.

LANGUAGE: shell
CODE:
ssh -D 1080 -q -N username@kubernetes-remote-server.example

----------------------------------------

TITLE: Defining VolumeAttributesClasses in Kubernetes YAML
DESCRIPTION: Example YAML definitions for creating 'silver' and 'gold' VolumeAttributesClasses with different provisioned IO parameters.

LANGUAGE: yaml
CODE:
apiVersion: storage.k8s.io/v1alpha1
kind: VolumeAttributesClass
metadata:
  name: silver
driverName: your-csi-driver
parameters:
  provisioned-iops: "500"
  provisioned-throughput: "50MiB/s"
---
apiVersion: storage.k8s.io/v1alpha1
kind: VolumeAttributesClass
metadata:
  name: gold
driverName: your-csi-driver
parameters:
  provisioned-iops: "10000"
  provisioned-throughput: "500MiB/s"

----------------------------------------

TITLE: Configuring StreamingProxyRedirects Feature Gate in YAML
DESCRIPTION: YAML configuration for the StreamingProxyRedirects feature gate, specifying its lifecycle stages, default values, and version ranges. The feature instructs the API server to intercept and follow redirects from the backend for streaming requests.

LANGUAGE: yaml
CODE:
title: StreamingProxyRedirects
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: beta 
    defaultValue: false
    fromVersion: "1.5"
    toVersion: "1.5"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.6"
    toVersion: "1.17"    
  - stage: deprecated 
    defaultValue: true
    fromVersion: "1.18"
    toVersion: "1.21"
  - stage: deprecated 
    defaultValue: false
    fromVersion: "1.22"
    toVersion: "1.24"

removed: true

----------------------------------------

TITLE: Installing Latest Bash Version with Homebrew
DESCRIPTION: This command uses Homebrew to install the latest version of Bash on macOS. It's necessary if the current Bash version is older than 4.1.

LANGUAGE: bash
CODE:
brew install bash

----------------------------------------

TITLE: Deploying an application with Kubernetes
DESCRIPTION: Creates a deployment named 'update-demo' with one replica using the specified container image and port.

LANGUAGE: bash
CODE:
$ kubectl run update-demo --image=gcr.io/google_containers/update-demo:nautilus --port=80 -l name=update-demo

----------------------------------------

TITLE: Complex List Map Validation with CEL
DESCRIPTION: CEL expression to validate that the 'foo' property of a listMap item with a key 'x' is less than 10.

LANGUAGE: CEL
CODE:
self.widgets.exists(w, w.key == 'x' && w.foo < 10)

----------------------------------------

TITLE: Executing kubeadm join for High Availability
DESCRIPTION: Command to join additional control plane nodes to create an HA cluster using kubeadm. Requires a load balancer endpoint, token, discovery token hash and certificate key.

LANGUAGE: bash
CODE:
kubeadm join [LB endpoint] \
   --token ... \
   --discovery-token-ca-cert-hash sha256:... \
   --control-plane --certificate-key ...

----------------------------------------

TITLE: Configuring Headless Mode in YAML
DESCRIPTION: Basic YAML configuration that sets the headless property to true, typically used for services or configurations that don't require a front-end interface.

LANGUAGE: yaml
CODE:
---
headless: true
---

----------------------------------------

TITLE: Pushing Security Profile to OCI Registry
DESCRIPTION: Console commands demonstrating how to push a security profile to an OCI registry using the spoc CLI tool, including authentication and automatic artifact signing.

LANGUAGE: console
CODE:
> export USERNAME=my-user
> export PASSWORD=my-pass
> spoc push -f ./examples/baseprofile-crun.yaml ghcr.io/security-profiles/crun:v1.8.3
16:35:43.899886 Pushing profile ./examples/baseprofile-crun.yaml to: ghcr.io/security-profiles/crun:v1.8.3
16:35:43.899939 Creating file store in: /tmp/push-3618165827
16:35:43.899947 Adding profile to store: ./examples/baseprofile-crun.yaml
16:35:43.900061 Packing files
16:35:43.900282 Verifying reference: ghcr.io/security-profiles/crun:v1.8.3
16:35:43.900310 Using tag: v1.8.3
16:35:43.900313 Creating repository for ghcr.io/security-profiles/crun
16:35:43.900319 Using username and password
16:35:43.900321 Copying profile to repository
16:35:46.976108 Signing container image
Generating ephemeral keys...
Retrieving signed certificate...

        Note that there may be personally identifiable information associated with this signed artifact.
        This may include the email address associated with the account with which you authenticate.
        This information will be used for signing this artifact and will be stored in public transparency logs and cannot be removed later.

By typing 'y', you attest that you grant (or have permission to grant) and agree to have this information stored permanently in transparency logs.
Your browser will now be opened to:
https://oauth2.sigstore.dev/auth/auth?access_type=…
Successfully verified SCT...
tlog entry created with index: 16520520
Pushing signature to: ghcr.io/security-profiles/crun

----------------------------------------

TITLE: Configuring TokenRequest Feature Gate in Kubernetes YAML
DESCRIPTION: This YAML configuration defines the lifecycle stages of the TokenRequest feature gate in Kubernetes. It specifies the version ranges, default values, and removal status for each stage (alpha, beta, stable).

LANGUAGE: yaml
CODE:
---
# Removed from Kubernetes
title: TokenRequest
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.10"
    toVersion: "1.11"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.12"
    toVersion: "1.19"    
  - stage: stable
    defaultValue: true
    fromVersion: "1.20"
    toVersion: "1.21"    

removed: true
---

----------------------------------------

TITLE: Configuring TokenRequest Feature Gate in Kubernetes YAML
DESCRIPTION: This YAML configuration defines the lifecycle stages of the TokenRequest feature gate in Kubernetes. It specifies the version ranges, default values, and removal status for each stage (alpha, beta, stable).

LANGUAGE: yaml
CODE:
---
# Removed from Kubernetes
title: TokenRequest
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.10"
    toVersion: "1.11"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.12"
    toVersion: "1.19"    
  - stage: stable
    defaultValue: true
    fromVersion: "1.20"
    toVersion: "1.21"    

removed: true
---

----------------------------------------

TITLE: Creating StorageVersionMigration for CRD in Kubernetes
DESCRIPTION: This YAML manifest creates a StorageVersionMigration object to migrate custom resources to a new storage version.

LANGUAGE: yaml
CODE:
kind: StorageVersionMigration
apiVersion: storagemigration.k8s.io/v1alpha1
metadata:
  name: crdsvm
spec:
  resource:
    group: stable.example.com
    version: v1
    resource: SelfieRequest

----------------------------------------

TITLE: Defining SeparateCacheWatchRPC Feature Gate Configuration in YAML
DESCRIPTION: YAML configuration defining the SeparateCacheWatchRPC feature gate, which was introduced in Kubernetes 1.20 as a beta feature with default value set to true. This feature enables dedicated RPC handling for watch cache operations to prevent resource starvation.

LANGUAGE: yaml
CODE:
title: SeparateCacheWatchRPC
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: beta
    defaultValue: true
    fromVersion: "1.20"

----------------------------------------

TITLE: Configuring Pod with Custom DNS Settings
DESCRIPTION: Example YAML configuration for a Pod with custom DNS settings, including custom nameservers, search domains, and DNS options.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  namespace: default
  name: dns-example
spec:
  containers:
    - name: test
      image: nginx
  dnsPolicy: "None"
  dnsConfig:
    nameservers:
      - 1.2.3.4
    searches:
      - ns1.svc.cluster-domain.example
      - my.dns.search.suffix
    options:
      - name: ndots
        value: "2"
      - name: edns0

----------------------------------------

TITLE: Configuring VolumePVCDataSource Feature Gate in Kubernetes YAML
DESCRIPTION: This YAML configuration defines the VolumePVCDataSource feature gate for Kubernetes. It specifies the feature's lifecycle stages, including alpha, beta, and stable, along with their corresponding versions and default values. The feature is marked as removed from Kubernetes.

LANGUAGE: yaml
CODE:
# Removed from Kubernetes
title: VolumePVCDataSource
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.15"
    toVersion: "1.15"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.16"
    toVersion: "1.17"    
  - stage: stable
    defaultValue: true
    fromVersion: "1.18"
    toVersion: "1.21"    

removed: true

----------------------------------------

TITLE: Configuring AllowInsecureKubeletCertificateSigningRequests Feature Gate in Kubernetes YAML
DESCRIPTION: This YAML configuration defines the AllowInsecureKubeletCertificateSigningRequests feature gate. It specifies the deprecation stage, default value, and the Kubernetes version from which it is deprecated.

LANGUAGE: yaml
CODE:
---
title: AllowInsecureKubeletCertificateSigningRequests
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: deprecated
    defaultValue: false
    fromVersion: "1.31"
---

----------------------------------------

TITLE: Cloning KubeDirector Repository
DESCRIPTION: Command to clone the KubeDirector repository from GitHub.

LANGUAGE: bash
CODE:
git clone http://<userid>@github.com/bluek8s/kubedirector.

----------------------------------------

TITLE: Verifying Kube-Scheduler Status Using Bash
DESCRIPTION: Command to check if the kube-scheduler pods are running properly in the kube-system namespace after configuration changes.

LANGUAGE: bash
CODE:
kubectl get pods -n kube-system | grep kube-scheduler

----------------------------------------

TITLE: Creating Eviction Object with policy/v1 in Kubernetes
DESCRIPTION: This JSON snippet demonstrates how to create an Eviction object using the policy/v1 API version in Kubernetes. It specifies the apiVersion, kind, and metadata for the eviction request.

LANGUAGE: json
CODE:
{
  "apiVersion": "policy/v1",
  "kind": "Eviction",
  "metadata": {
    "name": "quux",
    "namespace": "default"
  }
}

----------------------------------------

TITLE: Running Basic Kubeadm Preflight Check
DESCRIPTION: Command to run basic pre-flight checks for kubeadm initialization.

LANGUAGE: bash
CODE:
kubeadm init phase preflight [flags]

----------------------------------------

TITLE: Example JWT Token Payload
DESCRIPTION: Example of minimum valid JWT token payload structure required for authentication

LANGUAGE: json
CODE:
{
  "iss": "https://issuer.example.com",
  "aud": ["audience"],
  "exp": 1234567890,
  "sub": "username"
}

----------------------------------------

TITLE: Configuring Kubernetes API Server Volume Mounts for Konnectivity
DESCRIPTION: YAML configuration for setting up volume mounts in the kube-apiserver to support UDS (Unix Domain Socket) connections for Konnectivity.

LANGUAGE: yaml
CODE:
spec:
  containers:
    volumeMounts:
    - name: konnectivity-uds
      mountPath: /etc/kubernetes/konnectivity-server
      readOnly: false
  volumes:
  - name: konnectivity-uds
    hostPath:
      path: /etc/kubernetes/konnectivity-server
      type: DirectoryOrCreate

----------------------------------------

TITLE: Kubernetes Job Configuration for Queue Workers
DESCRIPTION: YAML configuration for creating a Kubernetes Job that spawns worker pods to process queue messages. Specifies parallel processing with multiple completions.

LANGUAGE: yaml
CODE:
apiVersion: batch/v1
kind: Job
metadata:
  name: job-wq-1
spec:
  completions: 8
  parallelism: 2
  template:
    metadata:
      name: job-wq-1
    spec:
      containers:
      - name: c
        image: container-registry.example/causal-jigsaw-637/job-wq-1
        env:
        - name: BROKER_URL
          value: amqp://guest:guest@rabbitmq-service:5672
        - name: QUEUE
          value: job1
      restartPolicy: OnFailure

----------------------------------------

TITLE: Example JWT Token Payload
DESCRIPTION: Example of minimum valid JWT token payload structure required for authentication

LANGUAGE: json
CODE:
{
  "iss": "https://issuer.example.com",
  "aud": ["audience"],
  "exp": 1234567890,
  "sub": "username"
}

----------------------------------------

TITLE: Viewing Update History
DESCRIPTION: Command to view the update history of the StatefulSet.

LANGUAGE: bash
CODE:
kubectl rollout history sts/zk

----------------------------------------

TITLE: Applying Puppet Configuration for Kubernetes
DESCRIPTION: This command shows how to apply a Puppet configuration file (pod.pp) to create or update Kubernetes resources.

LANGUAGE: shell
CODE:
puppet apply pod.pp

----------------------------------------

TITLE: Kubernetes Authorization Webhook Responses
DESCRIPTION: JSON examples of various webhook authorization response types including permissive, denial, and immediate denial responses.

LANGUAGE: json
CODE:
{
  "apiVersion": "authorization.k8s.io/v1beta1",
  "kind": "SubjectAccessReview",
  "status": {
    "allowed": true
  }
}

LANGUAGE: json
CODE:
{
  "apiVersion": "authorization.k8s.io/v1beta1",
  "kind": "SubjectAccessReview",
  "status": {
    "allowed": false,
    "reason": "user does not have read access to the namespace"
  }
}

LANGUAGE: json
CODE:
{
  "apiVersion": "authorization.k8s.io/v1beta1",
  "kind": "SubjectAccessReview",
  "status": {
    "allowed": false,
    "denied": true,
    "reason": "user does not have read access to the namespace"
  }
}

----------------------------------------

TITLE: Kubernetes Authorization Webhook Responses
DESCRIPTION: JSON examples of various webhook authorization response types including permissive, denial, and immediate denial responses.

LANGUAGE: json
CODE:
{
  "apiVersion": "authorization.k8s.io/v1beta1",
  "kind": "SubjectAccessReview",
  "status": {
    "allowed": true
  }
}

LANGUAGE: json
CODE:
{
  "apiVersion": "authorization.k8s.io/v1beta1",
  "kind": "SubjectAccessReview",
  "status": {
    "allowed": false,
    "reason": "user does not have read access to the namespace"
  }
}

LANGUAGE: json
CODE:
{
  "apiVersion": "authorization.k8s.io/v1beta1",
  "kind": "SubjectAccessReview",
  "status": {
    "allowed": false,
    "denied": true,
    "reason": "user does not have read access to the namespace"
  }
}

----------------------------------------

TITLE: Creating Kubernetes Resource from Config File
DESCRIPTION: Command demonstrating how to create a Kubernetes resource using kubectl and a configuration file.

LANGUAGE: bash
CODE:
kubectl create -f https://k8s.io/examples/pods/storage/gce-volume.yaml

----------------------------------------

TITLE: Configuring GCERegionalPersistentDisk Feature Gate in Kubernetes YAML
DESCRIPTION: This YAML configuration defines the stages and removal status of the GCERegionalPersistentDisk feature gate. It specifies beta and stable stages with version ranges and default values, and indicates that the feature has been removed from Kubernetes.

LANGUAGE: yaml
CODE:
---
# Removed from Kubernetes
title: GCERegionalPersistentDisk
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: beta 
    defaultValue: true
    fromVersion: "1.10"
    toVersion: "1.12"
  - stage: stable
    defaultValue: true
    fromVersion: "1.13"
    toVersion: "1.16"

removed: true  
---

----------------------------------------

TITLE: Configuring Service Mesh Canary Deployment with HTTPRoute
DESCRIPTION: Example of using HTTPRoute to implement a 50/50 traffic split between two services for canary deployment in a service mesh context.

LANGUAGE: yaml
CODE:
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: color-canary
  namespace: faces
spec:
  parentRefs:
    - name: color
      kind: Service
      group: ""
      port: 80
  rules:
  - backendRefs:
    - name: color
      port: 80
      weight: 50
    - name: color2
      port: 80
      weight: 50

----------------------------------------

TITLE: Migration Commands for PersistentVolume
DESCRIPTION: Shell commands to migrate a PersistentVolume to ReadWriteOncePod access mode

LANGUAGE: shell
CODE:
kubectl patch pv cat-pictures-pv -p '{"spec":{"persistentVolumeReclaimPolicy":"Retain"}}'

LANGUAGE: shell
CODE:
kubectl scale --replicas=0 deployment cat-pictures-writer
kubectl delete pvc cat-pictures-pvc
kubectl patch pv cat-pictures-pv -p '{"spec":{"claimRef":{"uid":""}}}'

LANGUAGE: shell
CODE:
kubectl patch pv cat-pictures-pv -p '{"spec":{"accessModes":["ReadWriteOncePod"]}}'

LANGUAGE: shell
CODE:
kubectl patch pv cat-pictures-pv -p '{"spec":{"persistentVolumeReclaimPolicy":"Delete"}}'

----------------------------------------

TITLE: Checking Port Availability with Netcat
DESCRIPTION: This command uses netcat to check if port 6443 is open on localhost. It's used to verify required ports for Kubernetes components.

LANGUAGE: shell
CODE:
nc 127.0.0.1 6443 -zv -w 2

----------------------------------------

TITLE: Event Resource Schema
DESCRIPTION: The core Event resource schema defining event properties including metadata, timing, sources and details

LANGUAGE: yaml
CODE:
kind: Event
apiVersion: events.k8s.io/v1
metadata:
  # Standard object metadata
eventTime: # Required MicroTime when event was observed
action: # Action taken/failed regarding object
deprecatedCount: # Deprecated field for backward compatibility
deprecatedFirstTimestamp: # Deprecated field for backward compatibility
deprecatedLastTimestamp: # Deprecated field for backward compatibility
deprecatedSource: # Deprecated source information
note: # Human readable description
reason: # Why action was taken
regarding: # Object this Event is about
related: # Optional secondary object
reportingController: # Name of controller that emitted Event
reportingInstance: # ID of controller instance
series: # Data about Event series
type: # Event type (Normal, Warning)

----------------------------------------

TITLE: Starting a proxy server for the demo website
DESCRIPTION: Runs a proxy on port 8001 to serve the static content for the demo website.

LANGUAGE: bash
CODE:
$ kubectl proxy --www=docs/user-guide/update-demo/local/ &

----------------------------------------

TITLE: Configuring Headless Frontmatter in YAML
DESCRIPTION: Simple YAML frontmatter configuration that sets the headless property to true. This is commonly used to mark content that should be included in other pages but not generate its own standalone page.

LANGUAGE: yaml
CODE:
---
headless: true
---

----------------------------------------

TITLE: Defining a PriorityClass in Kubernetes
DESCRIPTION: Example YAML for creating a PriorityClass object to define a priority level for Pods.

LANGUAGE: yaml
CODE:
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: high-priority
value: 1000000
globalDefault: false
description: "This priority class should be used for XYZ service pods only."

----------------------------------------

TITLE: Creating PDB with minAvailable Specification
DESCRIPTION: Example of a PodDisruptionBudget configuration using minAvailable to ensure at least 2 pods remain available during disruptions.

LANGUAGE: yaml
CODE:
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: zk-pdb
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: zookeeper

----------------------------------------

TITLE: Creating X.509 Certificate Signing Request for Kubernetes Client
DESCRIPTION: Generate a Certificate Signing Request (CSR) for the client, setting the Common Name (CN) to the desired username.

LANGUAGE: shell
CODE:
openssl req -new -key myuser.key -out myuser.csr -subj "/CN=myuser"

----------------------------------------

TITLE: JSON Output of Structured Log for Pod Status Update
DESCRIPTION: This snippet demonstrates the JSON output format of a structured log entry when the --logging-format=json flag is set. It includes a timestamp, message, and structured data for the pod and status.

LANGUAGE: json
CODE:
{
  "ts": 1580306777.04728,
  "msg": "Pod status updated",
  "pod": {
    "name": "coredns",
    "namespace": "kube-system"
  },
  "status": "ready"
}

----------------------------------------

TITLE: Deploying an Application with kubectl in Kubernetes
DESCRIPTION: This snippet demonstrates the simplicity of deploying an application to a Kubernetes cluster using kubectl. It highlights the contrast with the complexity of deploying across multiple clusters.

LANGUAGE: yaml
CODE:
kubectl create -f app.yaml

----------------------------------------

TITLE: Markdown Blog Post Configuration
DESCRIPTION: YAML frontmatter configuration for a Kubernetes blog post detailing cloud provider migration

LANGUAGE: markdown
CODE:
---
layout: blog
title: 'Completing the largest migration in Kubernetes history'
date: 2024-05-20
slug: completing-cloud-provider-migration
author: >
  Andrew Sy Kim (Google),
  Michelle Au (Google),
  Walter Fender (Google),
  Michael McCune (Red Hat)
---

----------------------------------------

TITLE: Match Conditions Webhook Configuration
DESCRIPTION: Example webhook configuration demonstrating use of match conditions for fine-grained request filtering

LANGUAGE: yaml
CODE:
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
webhooks:
  - name: my-webhook.example.com
    matchPolicy: Equivalent
    rules:
      - operations: ['CREATE','UPDATE']
        apiGroups: ['*']
        apiVersions: ['*']
        resources: ['*']
    failurePolicy: 'Ignore'
    sideEffects: None
    clientConfig:
      service:
        namespace: my-namespace
        name: my-webhook
      caBundle: '<omitted>'
    matchConditions:
      - name: 'exclude-leases'
        expression: '!(request.resource.group == "coordination.k8s.io" && request.resource.resource == "leases")'
      - name: 'exclude-kubelet-requests'
        expression: '!("system:nodes" in request.userInfo.groups)'
      - name: 'rbac'
        expression: 'request.resource.group != "rbac.authorization.k8s.io"'

----------------------------------------

TITLE: Listing Pods and Containers with crictl
DESCRIPTION: Examples of using crictl commands to list pods and containers in a Kubernetes-native format, with better organized and filtered output.

LANGUAGE: bash
CODE:
crictl pods
crictl ps

----------------------------------------

TITLE: Installing Kubernetes Packages on Red Hat-based Systems
DESCRIPTION: These commands set SELinux to permissive mode, add the Kubernetes YUM repository, and install kubeadm, kubelet, and kubectl on Red Hat-based systems.

LANGUAGE: shell
CODE:
sudo setenforce 0
sudo sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config
cat <<EOF | sudo tee /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://pkgs.k8s.io/core:/stable:/{{< param "version" >}}/rpm/
enabled=1
gpgcheck=1
gpgkey=https://pkgs.k8s.io/core:/stable:/{{< param "version" >}}/rpm/repodata/repomd.xml.key
exclude=kubelet kubeadm kubectl cri-tools kubernetes-cni
EOF
sudo yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes

----------------------------------------

TITLE: Windows Command for Updating PersistentVolume Reclaim Policy
DESCRIPTION: Windows-specific command variant for patching a PersistentVolume's reclaim policy, using proper Windows command prompt escaping.

LANGUAGE: cmd
CODE:
kubectl patch pv <your-pv-name> -p "{\"spec\":{\"persistentVolumeReclaimPolicy\":\"Retain\"}}"

----------------------------------------

TITLE: IPAddress Resource Definition in YAML
DESCRIPTION: YAML definition showing the structure of an IPAddress resource in Kubernetes networking v1beta1 API.

LANGUAGE: yaml
CODE:
apiVersion: networking.k8s.io/v1beta1
kind: IPAddress
metadata:
  name: <ip-address-name>
spec:
  parentRef:
    name: <parent-name>
    resource: <resource-type>
    group: <optional-group>
    namespace: <optional-namespace>

----------------------------------------

TITLE: Exempting Local Kubelet Health Checks from Rate Limiting
DESCRIPTION: A FlowSchema configuration that exempts local kubelet health check requests from API Priority and Fairness rate limiting. This allows these critical health checks to bypass normal throttling.

LANGUAGE: yaml
CODE:
apiVersion: flowcontrol.apiserver.k8s.io/v1beta3
kind: FlowSchema
metadata:
  name: health-for-strangers
spec:
  matchingPrecedence: 1000
  priorityLevelConfiguration:
    name: exempt
  rules:
  - nonResourceRules:
    - nonResourceURLs:
      - "/healthz"
      - "/livez"
      - "/readyz"
      verbs:
      - "*"
    subjects:
    - kind: Group
      group:
        name: system:unauthenticated

----------------------------------------

TITLE: Scaling PostgreSQL StatefulSet
DESCRIPTION: This command scales up the PostgreSQL StatefulSet to 3 replicas, demonstrating the ability to dynamically adjust the cluster size in Kubernetes.

LANGUAGE: bash
CODE:
kubectl scale statefulset pgset --replicas=3

----------------------------------------

TITLE: Configuring ServiceIPStaticSubrange Feature Gate in YAML
DESCRIPTION: Defines the stages and default values for the ServiceIPStaticSubrange feature gate. It progresses from alpha to stable across Kubernetes versions 1.24 to 1.27, with the feature being removed after version 1.27.

LANGUAGE: yaml
CODE:
stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.24"
    toVersion: "1.24"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.25"
    toVersion: "1.25"    
  - stage: stable
    defaultValue: true
    fromVersion: "1.26"
    toVersion: "1.27"    

removed: true

----------------------------------------

TITLE: Defining RuntimeClass Feature Gate Stages in YAML
DESCRIPTION: YAML configuration specifying the stages, default values, and version ranges for the RuntimeClass feature gate in Kubernetes. It includes alpha, beta, and stable stages, along with the feature's removal status.

LANGUAGE: yaml
CODE:
title: RuntimeClass
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.12"
    toVersion: "1.13"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.14"
    toVersion: "1.19"
  - stage: stable
    defaultValue: true
    fromVersion: "1.20"
    toVersion: "1.24"

removed: true

----------------------------------------

TITLE: Defining RuntimeClass Feature Gate Stages in YAML
DESCRIPTION: YAML configuration specifying the stages, default values, and version ranges for the RuntimeClass feature gate in Kubernetes. It includes alpha, beta, and stable stages, along with the feature's removal status.

LANGUAGE: yaml
CODE:
title: RuntimeClass
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.12"
    toVersion: "1.13"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.14"
    toVersion: "1.19"
  - stage: stable
    defaultValue: true
    fromVersion: "1.20"
    toVersion: "1.24"

removed: true

----------------------------------------

TITLE: Creating Kubernetes Namespace
DESCRIPTION: Creates a new namespace to isolate quota-related resources

LANGUAGE: shell
CODE:
kubectl create namespace quota-object-example

----------------------------------------

TITLE: Defining TaintNodesByCondition Feature Gate Stages in YAML
DESCRIPTION: This YAML configuration specifies the various stages and version ranges for the TaintNodesByCondition feature gate in Kubernetes. It includes alpha, beta, and stable stages with their respective version ranges and default values.

LANGUAGE: yaml
CODE:
---
# Removed from Kubernetes
title: TaintNodesByCondition
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.8"
    toVersion: "1.11"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.12"
    toVersion: "1.16"    
  - stage: stable
    defaultValue: true
    fromVersion: "1.17"
    toVersion: "1.18"    

removed: true  
---

----------------------------------------

TITLE: YAML Frontmatter for kubectl CLI Documentation
DESCRIPTION: YAML frontmatter metadata block defining the page title, description and weight for documentation organization.

LANGUAGE: yaml
CODE:
---
title: "CLI kubectl"
description: kubectl CLI description
weight: 60
---

----------------------------------------

TITLE: Initializing Kubernetes Control Plane with Kubeadm
DESCRIPTION: This command initializes a Kubernetes control-plane node using kubeadm. It's typically run on the first machine of the cluster.

LANGUAGE: bash
CODE:
control-plane# kubeadm init

----------------------------------------

TITLE: Configuring InTreePluginAzureFileUnregister Feature Gate in Kubernetes
DESCRIPTION: YAML configuration for the InTreePluginAzureFileUnregister feature gate. This feature controls whether the Azure File in-tree plugin is registered in kubelet and volume controllers. It was introduced as an alpha feature in Kubernetes 1.21 and removed in 1.30.

LANGUAGE: yaml
CODE:
title: InTreePluginAzureFileUnregister
content_type: feature_gate
_build:
  list: never
  render: false
 
stages:
  - stage: alpha
    defaultValue: false
    fromVersion: "1.21" 
    toVersion: "1.30"

removed: true

----------------------------------------

TITLE: Deploying StatefulSet with Topology-Aware Volume Provisioning
DESCRIPTION: Example StatefulSet configuration demonstrating topology-aware volume provisioning with multiple PVCs, node affinity, and pod anti-affinity constraints.

LANGUAGE: yaml
CODE:
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: web
spec:   
  serviceName: "nginx"
  replicas: 2
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: failure-domain.beta.kubernetes.io/zone
                operator: In
                values:
                - us-central1-a
                - us-central1-f
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - nginx
            topologyKey: failure-domain.beta.kubernetes.io/zone
      containers:
      - name: nginx
        image: gcr.io/google_containers/nginx-slim:0.8
        ports:
        - containerPort: 80
          name: web
        volumeMounts:
        - name: www
          mountPath: /usr/share/nginx/html
        - name: logs
          mountPath: /logs
 volumeClaimTemplates:
  - metadata:
      name: www
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: topology-aware-standard
      resources:
        requests:
          storage: 10Gi
  - metadata:
      name: logs
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: topology-aware-standard
      resources:
        requests:
          storage: 1Gi

----------------------------------------

TITLE: Exempting Local Kubelet Health Checks from Rate Limiting
DESCRIPTION: A FlowSchema configuration that exempts local kubelet health check requests from API Priority and Fairness rate limiting. This allows these critical health checks to bypass normal throttling.

LANGUAGE: yaml
CODE:
apiVersion: flowcontrol.apiserver.k8s.io/v1beta3
kind: FlowSchema
metadata:
  name: health-for-strangers
spec:
  matchingPrecedence: 1000
  priorityLevelConfiguration:
    name: exempt
  rules:
  - nonResourceRules:
    - nonResourceURLs:
      - "/healthz"
      - "/livez"
      - "/readyz"
      verbs:
      - "*"
    subjects:
    - kind: Group
      group:
        name: system:unauthenticated

----------------------------------------

TITLE: Creating a PersistentVolumeClaim for CSI Dynamic Provisioning in Kubernetes
DESCRIPTION: This YAML snippet defines a PersistentVolumeClaim that triggers dynamic provisioning using the 'fast-storage' StorageClass. It requests a 5Gi ReadWriteOnce volume.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: my-request-for-storage
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: fast-storage

----------------------------------------

TITLE: Setting kubectl Context for New Cluster with PSS
DESCRIPTION: Sets the kubectl context to the newly created cluster with Pod Security Standards.

LANGUAGE: shell
CODE:
kubectl cluster-info --context kind-psa-with-cluster-pss

----------------------------------------

TITLE: Updating DaemonSet Configuration
DESCRIPTION: Commands for updating a DaemonSet using declarative and imperative approaches.

LANGUAGE: shell
CODE:
kubectl apply -f https://k8s.io/examples/controllers/fluentd-daemonset-update.yaml

LANGUAGE: shell
CODE:
kubectl edit ds/fluentd-elasticsearch -n kube-system

LANGUAGE: shell
CODE:
kubectl set image ds/fluentd-elasticsearch fluentd-elasticsearch=quay.io/fluentd_elasticsearch/fluentd:v2.6.0 -n kube-system

----------------------------------------

TITLE: Defining DaemonSetUpdateSurge Feature Gate Configuration in YAML
DESCRIPTION: YAML configuration defining the lifecycle stages of the DaemonSetUpdateSurge feature gate in Kubernetes. It specifies the feature progression from alpha (1.21) through beta (1.22-1.24) to stable (1.25-1.28), along with default values for each stage.

LANGUAGE: yaml
CODE:
stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.21"
    toVersion: "1.21"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.22"
    toVersion: "1.24"    
  - stage: stable
    defaultValue: true
    fromVersion: "1.25"
    toVersion: "1.28"

removed: true

----------------------------------------

TITLE: Setting Environment Variables for PostgreSQL Deployment
DESCRIPTION: This snippet sets the necessary environment variables for the PostgreSQL deployment. BUILDBASE specifies the location of the cloned repository, and CCP_IMAGE_TAG specifies the container image version to use.

LANGUAGE: bash
CODE:
export BUILDBASE=$HOME/crunchy-containers

export CCP\_IMAGE\_TAG=centos7-9.5-1.2.6

----------------------------------------

TITLE: Creating a PodDisruptionBudget with minAvailable
DESCRIPTION: This YAML defines a PodDisruptionBudget that ensures at least 2 pods labeled 'app: zookeeper' are available during voluntary disruptions.

LANGUAGE: yaml
CODE:
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: zk-pdb
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: zookeeper

----------------------------------------

TITLE: Rolling Back Update
DESCRIPTION: Command to roll back the StatefulSet update.

LANGUAGE: bash
CODE:
kubectl rollout undo sts/zk

----------------------------------------

TITLE: Executing kubectl apply edit-last-applied
DESCRIPTION: The basic syntax for running the kubectl apply edit-last-applied command, which edits the last-applied-configuration annotations of resources.

LANGUAGE: bash
CODE:
kubectl apply edit-last-applied (RESOURCE/NAME | -f FILENAME)

----------------------------------------

TITLE: Kind Cluster Configuration for Authorization in Kubernetes
DESCRIPTION: Configuration for setting up a Kind cluster with the Structured Authorization Configuration feature enabled, including volume mounts for configuration files.

LANGUAGE: yaml
CODE:
kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4
featureGates:
  StructuredAuthorizationConfiguration: true
kubeadmConfigPatches:
  - |
    kind: ClusterConfiguration
    metadata:
      name: config
    apiServer:
      extraArgs:
        authorization-config: "/files/authorization_config.yaml"
      extraVolumes:
      - name: files
        hostPath: "/files"
        mountPath: "/files"
        readOnly: true
nodes:
- role: control-plane
  extraMounts:
  - hostPath: files
    containerPath: /files

----------------------------------------

TITLE: Defining WindowsRunAsUserName Feature Gate Configuration in YAML
DESCRIPTION: YAML configuration defining the lifecycle stages and versioning of the WindowsRunAsUserName feature gate. Shows progression from alpha through beta to stable status before removal.

LANGUAGE: yaml
CODE:
title: WindowsRunAsUserName
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.16"
    toVersion: "1.16"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.17"
    toVersion: "1.17"
  - stage: stable
    defaultValue: true
    fromVersion: "1.18"
    toVersion: "1.20"

removed: true

----------------------------------------

TITLE: Defining ServiceCIDR API Version and Import
DESCRIPTION: Specifies the API version and import path for the ServiceCIDR resource

LANGUAGE: yaml
CODE:
apiVersion: "networking.k8s.io/v1beta1"
import: "k8s.io/api/networking/v1beta1"

----------------------------------------

TITLE: ServiceAccount API Version and Kind
DESCRIPTION: The API version and kind for ServiceAccount resources.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: ServiceAccount

----------------------------------------

TITLE: Cloning Kubernetes Website Repository
DESCRIPTION: Commands to clone the Kubernetes website repository fork for documentation generation.

LANGUAGE: shell
CODE:
mkdir github.com
cd github.com
git clone git@github.com:<your_github_username>/website.git

----------------------------------------

TITLE: Enabling compdef Command in zsh
DESCRIPTION: This snippet provides a solution for the 'command not found: compdef' error. It loads the zsh completion system and should be added to the beginning of the zsh configuration file.

LANGUAGE: zsh
CODE:
autoload -Uz compinit
compinit

----------------------------------------

TITLE: Port Forwarding to MongoDB Pod in Kubernetes
DESCRIPTION: This command sets up port forwarding from local port 28015 to port 27017 on the MongoDB pod. It allows local access to the MongoDB instance running in the cluster.

LANGUAGE: shell
CODE:
kubectl port-forward mongo-75f59d57f4-4nd6q 28015:27017

----------------------------------------

TITLE: Defining an IngressClass
DESCRIPTION: An example of an IngressClass resource definition.

LANGUAGE: yaml
CODE:
apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  name: external-lb
spec:
  controller: example.com/ingress-controller
  parameters:
    apiGroup: k8s.example.com
    kind: IngressParameters
    name: external-lb

----------------------------------------

TITLE: Creating a Federated ReplicaSet in Kubernetes
DESCRIPTION: This command creates the federated replica set defined in YAML across the federation.

LANGUAGE: bash
CODE:
$ kubectl --context=federation-cluster create -f replicasets/nginx-rs.yaml

----------------------------------------

TITLE: Using a CSI Volume in a Kubernetes Pod
DESCRIPTION: This YAML snippet defines a Pod that mounts a CSI volume using a PersistentVolumeClaim. It demonstrates how to reference and use a CSI volume within a container.

LANGUAGE: yaml
CODE:
kind: Pod
apiVersion: v1
metadata:
  name: my-pod
spec:
  containers:
    - name: my-frontend
      image: nginx
      volumeMounts:
      - mountPath: "/var/www/html"
        name: my-csi-volume
  volumes:
    - name: my-csi-volume
      persistentVolumeClaim:
        claimName: my-request-for-storage

----------------------------------------

TITLE: Python Client Example for Kubernetes API
DESCRIPTION: Example of using the Python client library to access the Kubernetes API.

LANGUAGE: python
CODE:
from kubernetes import client, config

config.load_kube_config()

v1=client.CoreV1Api()
print("Listing pods with their IPs:")
ret = v1.list_pod_for_all_namespaces(watch=False)
for i in ret.items:
    print("%s\t%s\t%s" % (i.status.pod_ip, i.metadata.namespace, i.metadata.name))

----------------------------------------

TITLE: Using docker_cr.sh Script for Simplified Container Checkpoint and Restore
DESCRIPTION: This snippet shows how to use the docker_cr.sh helper script provided in the CRIU source tree to simplify the process of checkpointing and restoring a Docker container.

LANGUAGE: bash
CODE:
$ sudo docker_cr.sh -c 4397
dump successful

$ sudo docker_cr.sh -r 4397
restore successful

----------------------------------------

TITLE: Setting Up kubectl Configuration
DESCRIPTION: Commands to configure kubectl for a non-root user by copying and setting proper permissions for the kubeconfig file.

LANGUAGE: bash
CODE:
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

----------------------------------------

TITLE: Using Mermaid for Visualizations in Kubernetes Docs
DESCRIPTION: Demonstrates how to create Mermaid JS visualizations, including graphs and sequence diagrams, in Kubernetes documentation.

LANGUAGE: markdown
CODE:
{{</* mermaid */>}}
graph TD;
  A-->B;
  A-->C;
  B-->D;
  C-->D;
{{</*/ mermaid */>}}

----------------------------------------

TITLE: LeaseCandidate API Definition
DESCRIPTION: API version and import specification for LeaseCandidate resources

LANGUAGE: yaml
CODE:
apiVersion: coordination.k8s.io/v1alpha1
import "k8s.io/api/coordination/v1alpha1"

----------------------------------------

TITLE: Configuring Rolling Update Deployment in Kubernetes YAML
DESCRIPTION: This YAML snippet demonstrates how to configure a Kubernetes Deployment for Rolling Update strategy. It sets up a Tomcat deployment with readiness probe and rolling update parameters.

LANGUAGE: yaml
CODE:
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: tomcat-deployment-rolling-update
spec:
  replicas: 2
  template:
    metadata:
      labels:
        app: tomcat
        role: rolling-update
    spec:
      containers:
      - name: tomcat-container
        image: tomcat:${TOMCAT_VERSION}
        ports:
        - containerPort: 8080
        readinessProbe:
          httpGet:
            path: /
            port: 8080
  strategy:
    type: RollingUpdate
    rollingUp      maxSurge: 50%

----------------------------------------

TITLE: Configuring vSphere StorageClass
DESCRIPTION: Example configuration for a VMware vSphere StorageClass using the vCP provisioner, specifying disk format and datastore.

LANGUAGE: yaml
CODE:
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: fast
provisioner: kubernetes.io/vsphere-volume
parameters:
  diskformat: zeroedthick
  datastore: VSANDatastore

----------------------------------------

TITLE: Implementing ResourceQuota for Storage Management in Kubernetes
DESCRIPTION: YAML configuration for setting up a ResourceQuota that limits both the number of PersistentVolumeClaims and total storage capacity in a namespace. Restricts to 5 PVCs and 5Gi total storage.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: ResourceQuota
metadata:
  name: storagequota
spec:
  hard:
    persistentvolumeclaims: "5"
    requests.storage: "5Gi"

----------------------------------------

TITLE: Rolling Back ZooKeeper StatefulSet Update
DESCRIPTION: kubectl command to roll back the ZooKeeper StatefulSet to a previous revision.

LANGUAGE: bash
CODE:
kubectl rollout undo sts/zk

----------------------------------------

TITLE: Terminating ZooKeeper Process
DESCRIPTION: kubectl command to terminate the ZooKeeper process in a Pod for testing restart behavior.

LANGUAGE: bash
CODE:
kubectl exec zk-0 -- pkill java

----------------------------------------

TITLE: Defining Kubernetes Pod for PaymentProcessor
DESCRIPTION: This YAML configuration defines a Kubernetes Pod for the PaymentProcessor application. It specifies the container image to be used, identified by its SHA256 digest.

LANGUAGE: yaml
CODE:
apiVersion: v1

kind: Pod

metadata:

  name: payment

spec:

  containers:

    - name: payment

      image: "gcr.io/hightowerlabs/payment@sha256:aba48d60ba4410ec921f9d2e8169236c57660d121f9430dc9758d754eec8f887"

----------------------------------------

TITLE: Configuring Cloud Controller Manager as a DaemonSet in YAML
DESCRIPTION: Example YAML configuration for running the in-tree cloud controller manager as a DaemonSet in a Kubernetes cluster.

LANGUAGE: yaml
CODE:
{{% code_sample file="admin/cloud/ccm-example.yaml" %}}

----------------------------------------

TITLE: Démarrage du serveur API avec RBAC activé
DESCRIPTION: Commande pour démarrer le serveur API Kubernetes avec l'autorisation RBAC activée.

LANGUAGE: shell
CODE:
kube-apiserver --authorization-mode=Example,RBAC --other-options --more-options

----------------------------------------

TITLE: Legacy OIDC Command-line Configuration
DESCRIPTION: Example showing the traditional command-line arguments for configuring OIDC authentication in Kubernetes before structured authentication configuration.

LANGUAGE: bash
CODE:
--oidc-issuer-url=https://issuer.example.com
--oidc-client-id=example-client-id
--oidc-username-claim=username
--oidc-groups-claim=groups
--oidc-username-prefix=oidc:
--oidc-groups-prefix=oidc:
--oidc-required-claim="hd=example.com"
--oidc-required-claim="admin=true"
--oidc-ca-file=/path/to/ca.pem

----------------------------------------

TITLE: Implementing ResourceQuota for Storage Management in Kubernetes
DESCRIPTION: YAML configuration for setting up a ResourceQuota that limits both the number of PersistentVolumeClaims and total storage capacity in a namespace. Restricts to 5 PVCs and 5Gi total storage.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: ResourceQuota
metadata:
  name: storagequota
spec:
  hard:
    persistentvolumeclaims: "5"
    requests.storage: "5Gi"

----------------------------------------

TITLE: Defining an IngressClass
DESCRIPTION: Definition of an IngressClass resource to specify the controller and parameters for Ingress resources.

LANGUAGE: yaml
CODE:
apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  name: external-lb
spec:
  controller: example.com/ingress-controller
  parameters:
    apiGroup: k8s.example.com
    kind: IngressParameters
    name: external-lb

----------------------------------------

TITLE: Custom Client Method Generation in Go
DESCRIPTION: Shows how to use extended tag definitions to create custom verbs beyond HTTP verbs using code generation tags.

LANGUAGE: go
CODE:
// genclient:method=UpdateScale,verb=update,subresource=scale,input=k8s.io/kubernetes/pkg/apis/autoscaling.Scale,result=k8s.io/kubernetes/pkg/apis/autoscaling.Scale

----------------------------------------

TITLE: Connecting to MongoDB via Port Forwarding
DESCRIPTION: This command starts the MongoDB shell and connects to the forwarded port. It allows interaction with the MongoDB instance running in the Kubernetes cluster.

LANGUAGE: shell
CODE:
mongosh --port 28015

----------------------------------------

TITLE: Connecting to MongoDB via Port Forwarding
DESCRIPTION: This command starts the MongoDB shell and connects to the forwarded port. It allows interaction with the MongoDB instance running in the Kubernetes cluster.

LANGUAGE: shell
CODE:
mongosh --port 28015

----------------------------------------

TITLE: Joining Node to Dual-stack Cluster
DESCRIPTION: This command joins a node to a dual-stack Kubernetes cluster using kubeadm with a configuration file.

LANGUAGE: shell
CODE:
kubeadm join --config=kubeadm-config.yaml

----------------------------------------

TITLE: Retrieving Kubernetes API Versions via Proxy
DESCRIPTION: This curl command retrieves the available API versions from the Kubernetes API server through the proxy. It demonstrates how to interact with the API using HTTP requests.

LANGUAGE: shell
CODE:
curl http://localhost:8080/api/

----------------------------------------

TITLE: Creating a Global Default Priority Class
DESCRIPTION: This example shows how to create a priority class that is considered the global default priority. It sets the global-default flag to true.

LANGUAGE: bash
CODE:
kubectl create priorityclass default-priority --value=1000 --global-default=true --description="default priority"

----------------------------------------

TITLE: Configuring AWS EBS StorageClass
DESCRIPTION: Example configuration for an AWS EBS StorageClass, specifying volume type, IOPS, filesystem type, and encryption options.

LANGUAGE: yaml
CODE:
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: slow
provisioner: kubernetes.io/aws-ebs
parameters:
  type: io1
  iopsPerGB: "10"
  fsType: ext4

----------------------------------------

TITLE: Loading kubeadm completion for zsh
DESCRIPTION: This example shows how to load kubeadm completion code for zsh into the current shell. Note that zsh completions are only supported in versions 5.2 and above.

LANGUAGE: zsh
CODE:
# Load the kubeadm completion code for zsh[1] into the current shell
source <(kubeadm completion zsh)

----------------------------------------

TITLE: Custom Resource Definition Version Deprecation
DESCRIPTION: YAML configuration showing how to mark versions as deprecated in a CustomResourceDefinition and provide custom deprecation warnings.

LANGUAGE: yaml
CODE:
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
  name: crontabs.example.com
spec:
  versions:
  - name: v1alpha1
    deprecated: true
    deprecationWarning: "example.com/v1alpha1 CronTab is deprecated; use example.com/v1 CronTab (see http://example.com/v1alpha1-v1)"
    ...

  - name: v1beta1
    deprecated: true
    ...

  - name: v1
    ...

----------------------------------------

TITLE: Adding Linkerd to Web Service
DESCRIPTION: Command to inject Linkerd sidecar into the web service deployment

LANGUAGE: bash
CODE:
kubectl get -n emojivoto deploy/web -o yaml | linkerd inject - | kubectl apply -f -

----------------------------------------

TITLE: Examining ZooKeeper Process Tree
DESCRIPTION: kubectl command to examine the process tree for the ZooKeeper server in a Pod.

LANGUAGE: bash
CODE:
kubectl exec zk-0 -- ps -ef

----------------------------------------

TITLE: Enabling IPv4 Packet Forwarding in Linux
DESCRIPTION: Commands to check and enable IPv4 packet forwarding, which is required for Kubernetes networking.

LANGUAGE: bash
CODE:
cat /proc/sys/net/ipv4/ip_forward
sudo tee /etc/sysctl.d/k8s.conf <<EOF
net.ipv4.ip_forward = 1
EOF
sudo sysctl --system

----------------------------------------

TITLE: Configuring WarningHeaders Feature Gate in Kubernetes YAML
DESCRIPTION: YAML configuration defining the lifecycle and status of the WarningHeaders feature gate. This feature progressed from beta (v1.19-1.21) to stable (v1.22-1.24) before being removed, with default value set to true throughout its lifecycle.

LANGUAGE: yaml
CODE:
title: WarningHeaders
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: beta 
    defaultValue: true
    fromVersion: "1.19"
    toVersion: "1.21"
  - stage: stable
    defaultValue: true
    fromVersion: "1.22"
    toVersion: "1.24"

removed: true

----------------------------------------

TITLE: Getting ZooKeeper Pod FQDNs
DESCRIPTION: Command to get the Fully Qualified Domain Names of ZooKeeper Pods.

LANGUAGE: bash
CODE:
for i in 0 1 2; do kubectl exec zk-$i -- hostname -f; done

----------------------------------------

TITLE: Specifying AppArmor Profile in Kubernetes YAML
DESCRIPTION: This YAML snippet shows how to specify an AppArmor profile in a Kubernetes pod or container security context.

LANGUAGE: yaml
CODE:
securityContext:
  appArmorProfile:
    type: <profile_type>

----------------------------------------

TITLE: Creating Pod in Default Namespace
DESCRIPTION: Creates a Pod in the default namespace to test the applied Pod Security Standards.

LANGUAGE: shell
CODE:
kubectl apply -f https://k8s.io/examples/security/example-baseline-pod.yaml

----------------------------------------

TITLE: Importing Volume Type in Go
DESCRIPTION: Import statement for using the Volume type from the Kubernetes core API

LANGUAGE: go
CODE:
import "k8s.io/api/core/v1"

----------------------------------------

TITLE: Verifying Pod Status and Username
DESCRIPTION: Shell commands to verify the Pod's status and check the running username inside the container.

LANGUAGE: shell
CODE:
kubectl get pod run-as-username-pod-demo

LANGUAGE: shell
CODE:
kubectl exec -it run-as-username-pod-demo -- powershell

LANGUAGE: powershell
CODE:
echo $env:USERNAME

----------------------------------------

TITLE: Resource Path Changes in Kubernetes v1beta3
DESCRIPTION: Example of the new namespace-based resource path structure in v1beta3 API. Demonstrates the required namespace parameter being moved from URL parameter to path component.

LANGUAGE: text
CODE:
/api/v1beta3/namespaces/{namespace}/{resource_collection}/{resource_name}

----------------------------------------

TITLE: Allocating Resources with ResourceClaimTemplate and Pod in YAML
DESCRIPTION: Example of allocating two specific resources of type 'resource.example.com' using ResourceClaimTemplate and defining a Pod that uses these resources.

LANGUAGE: yaml
CODE:
---
apiVersion: cats.resource.example.com/v1
kind: ClaimParameters
name: large-black-cats
spec:
  color: black
  size: large
---
apiVersion: resource.k8s.io/v1alpha1
kind: ResourceClaimTemplate
metadata:
  name: large-black-cats
spec:
  spec:
    resourceClassName: resource.example.com
    parametersRef:
      apiGroup: cats.resource.example.com
      kind: ClaimParameters
      name: large-black-cats
–--
apiVersion: v1
kind: Pod
metadata:
  name: pod-with-cats
spec:
  containers:
  - name: first-example
    image: ubuntu:22.04
    command: ["sleep", "9999"]
    resources:
      claims:
      - name: cat-0
  - name: second-example
    image: ubuntu:22.04
    command: ["sleep", "9999"]
    resources:
      claims:
      - name: cat-1
  resourceClaims:
  - name: cat-0
    source:
      resourceClaimTemplateName: large-black-cats
  - name: cat-1
    source:
      resourceClaimTemplateName: large-black-cats

----------------------------------------

TITLE: Viewing Packet Drop Events with kubectl describe pods
DESCRIPTION: This snippet demonstrates how to use kubectl describe pods to view packet drop events reported by kube-iptables-tailer. It shows the output format of these events, including the type, reason, age, source, and message.

LANGUAGE: shell
CODE:
$ kubectl describe pods --namespace=YOUR_NAMESPACE

...
Events:
 Type     Reason      Age    From                    Message
 ----     ------      ----   ----                    -------    
 Warning  PacketDrop  5s     kube-iptables-tailer    Packet dropped when receiving traffic from example-service-2 (IP: 22.222.22.222).

 Warning  PacketDrop  10m    kube-iptables-tailer    Packet dropped when sending traffic to example-service-1 (IP: 11.111.11.111).

----------------------------------------

TITLE: Configuring Kubelet Authentication in YAML
DESCRIPTION: Example YAML configuration for setting kubelet authentication to webhook or certificate mode to improve security of the kubelet API.

LANGUAGE: yaml
CODE:
authentication:
  webhook:
    enabled: true
  x509:
    clientCAFile: /etc/kubernetes/pki/ca.crt

----------------------------------------

TITLE: Définition d'un PersistentVolumeClaim
DESCRIPTION: Exemple de définition YAML d'un objet PersistentVolumeClaim

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: myclaim
spec:
  accessModes:
    - ReadWriteOnce
  volumeMode: Filesystem
  resources:
    requests:
      storage: 8Gi
  storageClassName: slow
  selector:
    matchLabels:
      release: "stable"
    matchExpressions:
      - {key: environment, operator: In, values: [dev]}

----------------------------------------

TITLE: LeaseCandidate HTTP GET Operation
DESCRIPTION: HTTP GET request to retrieve a specific LeaseCandidate resource

LANGUAGE: http
CODE:
GET /apis/coordination.k8s.io/v1alpha1/namespaces/{namespace}/leasecandidates/{name}

----------------------------------------

TITLE: Pulling Kubeadm Images using Command-line
DESCRIPTION: This command pulls the images used by kubeadm for setting up a Kubernetes cluster. It supports various options for customizing the image pull process, such as specifying a configuration file, CRI socket, feature gates, and image repository.

LANGUAGE: bash
CODE:
kubeadm config images pull [flags]

----------------------------------------

TITLE: Setting kubectl Context for the New Cluster
DESCRIPTION: Sets the kubectl context to the newly created kind cluster.

LANGUAGE: shell
CODE:
kubectl cluster-info --context kind-psa-ns-level

----------------------------------------

TITLE: Creating Redis Leader Service
DESCRIPTION: YAML configuration for creating a Service to proxy traffic to the Redis leader Pod.

LANGUAGE: shell
CODE:
kubectl apply -f https://k8s.io/examples/application/guestbook/redis-leader-service.yaml

----------------------------------------

TITLE: Creating a Multi-Node KinD Cluster
DESCRIPTION: Commands to create a YAML config file for a 3-node cluster and create the cluster using KinD.

LANGUAGE: bash
CODE:
cat << EOF > kind-3nodes.yaml
kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4
nodes:
  - role: control-plane
  - role: worker
  - role: worker
EOF

kind create cluster --name wslkindmultinodes --config ./kind-3nodes.yaml

----------------------------------------

TITLE: Sourcing kubectl Completion Script in zsh
DESCRIPTION: This snippet shows how to add the kubectl completion script to the zsh configuration file. This enables kubectl autocompletion for all shell sessions.

LANGUAGE: zsh
CODE:
source <(kubectl completion zsh)

----------------------------------------

TITLE: Installing Admission Policy Configurations
DESCRIPTION: Shell commands to install the policy configuration CRD, basic configuration, and policies in a Kubernetes cluster.

LANGUAGE: shell
CODE:
# Install configuration CRD
kubectl apply -f https://github.com/kubescape/cel-admission-library/releases/latest/download/policy-configuration-definition.yaml
# Install basic configuration
kubectl apply -f https://github.com/kubescape/cel-admission-library/releases/latest/download/basic-control-configuration.yaml
# Install policies
kubectl apply -f https://github.com/kubescape/cel-admission-library/releases/latest/download/kubescape-validating-admission-policies.yaml

----------------------------------------

TITLE: Bulk Secret Re-encryption Command
DESCRIPTION: Shell command to perform in-place updates of all secrets to ensure encryption

LANGUAGE: shell
CODE:
kubectl get secrets --all-namespaces -o json | kubectl replace -f -

----------------------------------------

TITLE: PodDisruptionBudget API Definition
DESCRIPTION: Basic YAML definition showing required apiVersion and kind for PodDisruptionBudget resources

LANGUAGE: yaml
CODE:
apiVersion: policy/v1
kind: PodDisruptionBudget

----------------------------------------

TITLE: Uploading Certificates with Kubeadm Command
DESCRIPTION: Command syntax for uploading control plane certificates to the kubeadm-certs Secret. This command is part of the kubeadm initialization phase and supports various flags for configuration and certificate management.

LANGUAGE: bash
CODE:
kubeadm init phase upload-certs [flags]

----------------------------------------

TITLE: Création d'un RoleBinding
DESCRIPTION: Commande pour créer un RoleBinding accordant les permissions du rôle 'pod-reader' à l'utilisateur 'jane' dans le namespace 'default'.

LANGUAGE: shell
CODE:
kubectl create rolebinding bob-admin-binding --clusterrole=admin --user=bob --namespace=acme

----------------------------------------

TITLE: Gloo Upstream Configuration
DESCRIPTION: Gloo upstream resource defining the traffic destination with version-based subsets.

LANGUAGE: yaml
CODE:
apiVersion: gloo.solo.io/v1
kind: Upstream
metadata:
  name: echo
  namespace: gloo-system
spec:
  kube:
    selector:
      app: echo
    serviceName: echo
    serviceNamespace: echo
    servicePort: 8080
    subsetSpec:
      selectors:
        - keys:
            - version

----------------------------------------

TITLE: EndpointSlice API Example
DESCRIPTION: Demonstrates the structure of the new EndpointSlice API featuring topology attributes and support for multiple address types including IPv4 and IPv6.

LANGUAGE: yaml
CODE:
apiVersion: discovery.k8s.io/v1alpha
kind: EndpointSlice
metadata:
  name: example-abc
  labels:
    kubernetes.io/service-name: example
addressType: IP
ports:
  - name: http
    protocol: TCP
    port: 80
endpoints:
  - addresses:
    - "10.1.2.3"
    - "2001:db8::1234:5678"
    topology:
      kubernetes.io/hostname: node-1
      topology.kubernetes.io/zone: us-west2-a

----------------------------------------

TITLE: Retrieving MysqlCluster Resource Details in YAML Format
DESCRIPTION: This command retrieves the details of a specific MysqlCluster resource named 'clustershard-c' in YAML format.

LANGUAGE: bash
CODE:
root@k8s-master ~]# kubectl get mysqlcluster -o yaml clustershard-c

----------------------------------------

TITLE: LeaseCandidate HTTP PUT Operation
DESCRIPTION: HTTP PUT request to replace an existing LeaseCandidate resource

LANGUAGE: http
CODE:
PUT /apis/coordination.k8s.io/v1alpha1/namespaces/{namespace}/leasecandidates/{name}

----------------------------------------

TITLE: Generating API Server-etcd Client Certificates with kubeadm
DESCRIPTION: Command to generate the certificate and key files (apiserver-etcd-client.crt and apiserver-etcd-client.key) that the API server uses to access etcd. The command supports various options including custom certificate directory, configuration file path, and dry-run mode.

LANGUAGE: bash
CODE:
kubeadm init phase certs apiserver-etcd-client [flags]

----------------------------------------

TITLE: Defining Selectable Fields for Custom Resources in YAML
DESCRIPTION: This YAML snippet demonstrates how to declare selectable fields for a custom resource definition (CRD) using the spec.versions[*].selectableFields field. It allows the .spec.color and .spec.size fields to be used in field selectors.

LANGUAGE: yaml
CODE:
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: shirts.stable.example.com
spec:
  group: stable.example.com
  versions:
    - name: v1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          type: object
          properties:
            spec:
              type: object
              properties:
                color:
                  type: string
                size:
                  type: string
      selectableFields:
        - .spec.color
        - .spec.size
  scope: Namespaced
  names:
    plural: shirts
    singular: shirt
    kind: Shirt
    shortNames:
    - sh

----------------------------------------

TITLE: Creating a ConfigMap with a Finalizer in Kubernetes
DESCRIPTION: Shows how to create a ConfigMap with a finalizer using a YAML definition and kubectl create command.

LANGUAGE: yaml
CODE:
cat <<EOF | kubectl create -f -
apiVersion: v1
kind: ConfigMap
metadata:
  name: mymap
  finalizers:
  - kubernetes
EOF

----------------------------------------

TITLE: Configuring Headless Page in YAML for Kubernetes Project
DESCRIPTION: This YAML snippet defines the front matter for a headless page configuration. It sets the 'headless' property to true, indicating that this page should be treated as a headless component in the content management system or static site generator being used for the Kubernetes project documentation.

LANGUAGE: yaml
CODE:
---
headless: true
---

----------------------------------------

TITLE: Cleaning Up Kubernetes Clusters
DESCRIPTION: Deletes the Kubernetes clusters created during the tutorial.

LANGUAGE: shell
CODE:
kind delete cluster --name psa-with-cluster-pss

LANGUAGE: shell
CODE:
kind delete cluster --name psa-wo-cluster-pss

----------------------------------------

TITLE: Help Option for Kubeadm Init Phase Command in Markdown
DESCRIPTION: This snippet shows the help option for the 'kubeadm init phase' command. It provides a way for users to get additional information about the command's usage.

LANGUAGE: markdown
CODE:
   <table style="width: 100%; table-layout: fixed;">
<colgroup>
<col span="1" style="width: 10px;" />
<col span="1" />
</colgroup>
<tbody>

<tr>
<td colspan="2">-h, --help</td>
</tr>
<tr>
<td></td><td style="line-height: 130%; word-wrap: break-word;"><p>help for phase</p></td>
</tr>

</tbody>
</table>

----------------------------------------

TITLE: Stopping kube-apiserver Before Upgrade
DESCRIPTION: Commands to gracefully stop the kube-apiserver process before performing a kubeadm upgrade to minimize etcd downtime impact.

LANGUAGE: shell
CODE:
killall -s SIGTERM kube-apiserver
sleep 20
kubeadm upgrade ...

----------------------------------------

TITLE: String Output of Structured Log for Pod Status Update
DESCRIPTION: This snippet shows the string output format of a structured log entry for a pod status update. It includes a timestamp, log level, file location, and the structured message with key-value pairs.

LANGUAGE: plaintext
CODE:
I1025 00:15:15.525108       1 controller_utils.go:116] "Pod status updated" pod="kube-system/kubedns" status="ready"

----------------------------------------

TITLE: Rejected API Request Example
DESCRIPTION: Shows the error message when submitting a Deployment using a deprecated API version (extensions/v1beta1).

LANGUAGE: text
CODE:
error: unable to recognize "deployment": no matches for kind "Deployment" in version "extensions/v1beta1"

----------------------------------------

TITLE: Extending CSI Service Definitions for Volume Expansion
DESCRIPTION: This snippet shows the addition of new RPCs to the CSI specification for volume expansion functionality. It includes RequiresFSResize, ControllerResizeVolume, and NodeResizeVolume methods.

LANGUAGE: protobuf
CODE:
service Controller {
 rpc CreateVolume (CreateVolumeRequest)
   returns (CreateVolumeResponse) {}
……
 rpc RequiresFSResize (RequiresFSResizeRequest)
   returns (RequiresFSResizeResponse) {}
 rpc ControllerResizeVolume (ControllerResizeVolumeRequest)
   returns (ControllerResizeVolumeResponse) {}
}

service Node {
 rpc NodeStageVolume (NodeStageVolumeRequest)
   returns (NodeStageVolumeResponse) {}
……
 rpc NodeResizeVolume (NodeResizeVolumeRequest)
   returns (NodeResizeVolumeResponse) {}
}

----------------------------------------

TITLE: Creating LoadBalancer Service
DESCRIPTION: Creates a Service object of type LoadBalancer to expose the deployment externally.

LANGUAGE: shell
CODE:
kubectl expose deployment hello-world --type=LoadBalancer --name=my-service

----------------------------------------

TITLE: Configuring Headless Page in YAML for Kubernetes Project
DESCRIPTION: This YAML snippet defines the front matter for a headless page configuration. It sets the 'headless' property to true, indicating that this page should be treated as a headless component in the content management system or static site generator being used for the Kubernetes project documentation.

LANGUAGE: yaml
CODE:
---
headless: true
---

----------------------------------------

TITLE: Creating Kubernetes Cluster without Pod Security Standards
DESCRIPTION: Uses kind to create a Kubernetes cluster without any Pod Security Standards applied.

LANGUAGE: shell
CODE:
kind create cluster --name psa-wo-cluster-pss

----------------------------------------

TITLE: Defining NamespaceDefaultLabelName Feature Gate in YAML
DESCRIPTION: YAML configuration for the NamespaceDefaultLabelName feature gate in Kubernetes. It specifies the feature's lifecycle stages, default values, and version ranges. The feature is marked as removed and was stable from version 1.22 to 1.23.

LANGUAGE: yaml
CODE:
title: NamespaceDefaultLabelName
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: beta 
    defaultValue: true
    fromVersion: "1.21"
    toVersion: "1.21"
  - stage: stable
    defaultValue: true
    fromVersion: "1.22"
    toVersion: "1.23"

removed: true

----------------------------------------

TITLE: Defining RBAC Role for Pod Access
DESCRIPTION: Example YAML configuration for a Kubernetes RBAC role that grants access to pods and their log and exec subresources.

LANGUAGE: yaml
CODE:
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: default
  name: pod-and-pod-logs-reader
rules:
- apiGroups: [""]
  resources: ["pods", "pods/log"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["pods/exec"]
  verbs: ["create"]

----------------------------------------

TITLE: Applying the ZooKeeper Manifest
DESCRIPTION: Command to apply the ZooKeeper manifest and create the resources.

LANGUAGE: bash
CODE:
kubectl apply -f https://k8s.io/examples/application/zookeeper/zookeeper.yaml

----------------------------------------

TITLE: Applying the ZooKeeper Manifest
DESCRIPTION: Command to apply the ZooKeeper manifest and create the resources.

LANGUAGE: bash
CODE:
kubectl apply -f https://k8s.io/examples/application/zookeeper/zookeeper.yaml

----------------------------------------

TITLE: Defining Selectable Fields for Custom Resources in YAML
DESCRIPTION: This YAML snippet demonstrates how to declare selectable fields for a custom resource definition (CRD) using the spec.versions[*].selectableFields field. It allows the .spec.color and .spec.size fields to be used in field selectors.

LANGUAGE: yaml
CODE:
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: shirts.stable.example.com
spec:
  group: stable.example.com
  versions:
    - name: v1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          type: object
          properties:
            spec:
              type: object
              properties:
                color:
                  type: string
                size:
                  type: string
      selectableFields:
        - .spec.color
        - .spec.size
  scope: Namespaced
  names:
    plural: shirts
    singular: shirt
    kind: Shirt
    shortNames:
    - sh

----------------------------------------

TITLE: Setting up Minikube for Validating Admission Policy Testing
DESCRIPTION: Shell commands to start Minikube with the ValidatingAdmissionPolicy feature gate enabled and Kubernetes v1.26.1.

LANGUAGE: shell
CODE:
minikube start --kubernetes-version=1.26.1 --extra-config=apiserver.runtime-config=admissionregistration.k8s.io/v1alpha1  --feature-gates='ValidatingAdmissionPolicy=true'

----------------------------------------

TITLE: Building a container image with seccomp profile annotation using Podman
DESCRIPTION: This shell command builds a container image using Podman and adds an annotation specifying a seccomp profile to be used with CRI-O.

LANGUAGE: shell
CODE:
podman build \
    --annotation seccomp-profile.kubernetes.cri-o.io=quay.io/crio/seccomp:v2 \
    -t quay.io/crio/nginx-seccomp:v2 .

----------------------------------------

TITLE: Verifying Kubernetes Image Signature
DESCRIPTION: Command to verify the signature of a Kubernetes container image using cosign verify with identity and OIDC issuer verification.

LANGUAGE: shell
CODE:
cosign verify registry.k8s.io/kube-apiserver-amd64:v{{< skew currentPatchVersion >}} \
  --certificate-identity krel-trust@k8s-releng-prod.iam.gserviceaccount.com \
  --certificate-oidc-issuer https://accounts.google.com \
  | jq .

----------------------------------------

TITLE: ExecCredential Resource Definition for Kubernetes Authentication
DESCRIPTION: Defines the ExecCredential resource type used by exec-based plugins to communicate credentials. Contains specification for authentication details and status fields for credentials that the transport should use.

LANGUAGE: yaml
CODE:
apiVersion: client.authentication.k8s.io/v1
kind: ExecCredential
spec:
  cluster:
    server: string
    tls-server-name: string
    insecure-skip-tls-verify: bool
    certificate-authority-data: []byte
    proxy-url: string
    disable-compression: bool
  interactive: bool
status:
  expirationTimestamp: meta/v1.Time
  token: string
  clientCertificateData: string
  clientKeyData: string

----------------------------------------

TITLE: Defining LegacyNodeRoleBehavior Feature Gate Stages in YAML
DESCRIPTION: YAML configuration specifying the alpha, beta, and stable stages of the LegacyNodeRoleBehavior feature gate. It includes default values, version ranges, and indicates that the feature has been removed.

LANGUAGE: yaml
CODE:
---
# Removed from Kubernetes
title: LegacyNodeRoleBehavior
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.16"
    toVersion: "1.18"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.19"
    toVersion: "1.20"
  - stage: stable
    defaultValue: false
    fromVersion: "1.21"
    toVersion: "1.22"

removed: true
---

----------------------------------------

TITLE: Cleaning Up Node with Kubeadm Reset Phase in Kubernetes
DESCRIPTION: This snippet demonstrates how to perform cleanup on a node using the kubeadm reset phase cleanup-node command.

LANGUAGE: markdown
CODE:
## kubeadm reset phase cleanup-node {#cmd-reset-phase-cleanup-node}

{{< tabs name="tab-cleanup-node" >}}
{{< tab name="cleanup-node" include="generated/kubeadm_reset/kubeadm_reset_phase_cleanup-node.md" />}}
{{< /tabs >}}

----------------------------------------

TITLE: Using kubectl with JSONPath Expressions
DESCRIPTION: These examples demonstrate how to use kubectl with various JSONPath expressions to filter and format JSON output. The commands show different ways to extract specific information from the kubectl output using JSONPath syntax.

LANGUAGE: shell
CODE:
kubectl get pods -o json
kubectl get pods -o=jsonpath='{@}'
kubectl get pods -o=jsonpath='{.items[0]}'
kubectl get pods -o=jsonpath='{.items[0].metadata.name}'
kubectl get pods -o=jsonpath="{.items[*]['metadata.name', 'status.capacity']}"
kubectl get pods -o=jsonpath='{range .items[*]}{.metadata.name}{"\t"}{.status.startTime}{"\n"}{end}'

----------------------------------------

TITLE: Defining Exec and Streaming Operations in RuntimeService for CRI
DESCRIPTION: This snippet extends the RuntimeService gRPC interface to include methods for executing commands in containers, attaching to containers, and port forwarding. It demonstrates how CRI supports interactive operations with containers.

LANGUAGE: protobuf
CODE:
service RuntimeService {

    ...

    // ExecSync runs a command in a container synchronously.  
    rpc ExecSync(ExecSyncRequest) returns (ExecSyncResponse) {}  
    // Exec prepares a streaming endpoint to execute a command in the container.  
    rpc Exec(ExecRequest) returns (ExecResponse) {}  
    // Attach prepares a streaming endpoint to attach to a running container.  
    rpc Attach(AttachRequest) returns (AttachResponse) {}  
    // PortForward prepares a streaming endpoint to forward ports from a PodSandbox.  
    rpc PortForward(PortForwardRequest) returns (PortForwardResponse) {}

    ...  
}

----------------------------------------

TITLE: Generating API Server Kubelet Client Certificates with kubeadm
DESCRIPTION: Command to generate certificates for API server to kubelet communication. The command generates and saves certificates into apiserver-kubelet-client.crt and apiserver-kubelet-client.key files. If the files exist, the generation step is skipped.

LANGUAGE: bash
CODE:
kubeadm init phase certs apiserver-kubelet-client [flags]

----------------------------------------

TITLE: Topology Manager Hint Provider Interface
DESCRIPTION: Go interface definition for components that provide topology hints to the Topology Manager

LANGUAGE: go
CODE:
type HintProvider interface {
    GetTopologyHints(*v1.Pod, *v1.Container) map[string][]TopologyHint
    Allocate(*v1.Pod, *v1.Container) error
}

----------------------------------------

TITLE: Describing Inherited RoleBinding in Kubernetes Subnamespace
DESCRIPTION: This command describes a RoleBinding named 'sres' in the 'svc1-team-a' subnamespace, showing how it was inherited from the parent namespace.

LANGUAGE: bash
CODE:
$ kubectl describe rolebinding sres -n svc1-team-a

----------------------------------------

TITLE: KubeletTracing Feature Gate Configuration in YAML
DESCRIPTION: YAML configuration defining the KubeletTracing feature gate stages, including its progression from alpha to beta stage with version ranges and default values.

LANGUAGE: yaml
CODE:
title: KubeletTracing
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha
    defaultValue: false
    fromVersion: "1.25"
    toVersion: "1.26"
  - stage: beta
    defaultValue: true
    fromVersion: "1.27"

----------------------------------------

TITLE: Creating a Pod using a private image in Kubernetes YAML
DESCRIPTION: YAML definition for creating a Kubernetes Pod that uses a private Docker image. Specifies the private image name and an imagePullPolicy of Always.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: private-image-test-1
spec:
  containers:
    - name: uses-private-image
      image: $PRIVATE_IMAGE_NAME
      imagePullPolicy: Always
      command: [ "echo", "SUCCESS" ]

----------------------------------------

TITLE: Defining RuntimeClass Structure in Go
DESCRIPTION: Defines the structure of a RuntimeClass object in Go, including its metadata, handler, overhead, and scheduling fields.

LANGUAGE: go
CODE:
type RuntimeClass struct {
  metav1.TypeMeta
  metav1.ObjectMeta

  Handler string
  Overhead *Overhead
  Scheduling *Scheduling
}

----------------------------------------

TITLE: Applying Updated ConfigMap in Kubernetes
DESCRIPTION: Applies the updated ConfigMap to the Kubernetes cluster.

LANGUAGE: shell
CODE:
kubectl apply -f example-redis-config.yaml

----------------------------------------

TITLE: Deleting a PersistentVolume in Kubernetes
DESCRIPTION: This command attempts to delete a specific PersistentVolume using kubectl. In older Kubernetes versions, this operation may block indefinitely.

LANGUAGE: bash
CODE:
kubectl delete pv pvc-6791fdd4-5fad-438e-a7fb-16410363e3da

----------------------------------------

TITLE: Creating a Secret Using kubectl
DESCRIPTION: Example of creating a Secret using kubectl command line tool with data from files

LANGUAGE: shell
CODE:
echo -n 'admin' > ./username.txt
echo -n '1f2d1e2e67df' > ./password.txt
kubectl create secret generic db-user-pass --from-file=./username.txt --from-file=./password.txt

----------------------------------------

TITLE: Implementing Simple Custom Scheduler in Bash
DESCRIPTION: Bash script implementing a basic custom scheduler that randomly assigns pods to nodes.

LANGUAGE: bash
CODE:
#!/bin/bash

SERVER='localhost:8001'

while true;
do
    for PODNAME in $(kubectl --server $SERVER get pods -o json | jq '.items[] | select(.spec.schedulerName == "my-scheduler") | select(.spec.nodeName == null) | .metadata.name' | tr -d '"')
;
    do
        NODES=($(kubectl --server $SERVER get nodes -o json | jq '.items[].metadata.name' | tr -d '"'))

        NUMNODES=${#NODES[@]}
        CHOSEN=${NODES[$[$RANDOM % $NUMNODES]]}
        curl --header "Content-Type:application/json" --request POST --data '{"apiVersion":"v1", "kind": "Binding", "metadata": {"name": "'$PODNAME'"}, "target": {"apiVersion": "v1", "kind": "Node", "name": "'$CHOSEN'"}}' http://$SERVER/api/v1/namespaces/default/pods/$PODNAME/binding/
        echo "Assigned $PODNAME to $CHOSEN"
    done
    sleep 1
done

----------------------------------------

TITLE: Configuring SupportPodPidsLimit Feature Gate in Kubernetes YAML
DESCRIPTION: This YAML configuration defines the stages and removal status of the SupportPodPidsLimit feature gate. It specifies the feature's progression from alpha to stable, along with default values and version ranges for each stage.

LANGUAGE: yaml
CODE:
---
# Removed from Kubernetes
title: SupportPodPidsLimit
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.10"
    toVersion: "1.13"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.14"
    toVersion: "1.19"    
  - stage: stable
    defaultValue: true
    fromVersion: "1.20"
    toVersion: "1.23"    

removed: true
---

----------------------------------------

TITLE: Production Overlay Kustomization Configuration
DESCRIPTION: Shows a production overlay kustomization.yaml that extends a base configuration. It adds production-specific labels and includes a patch for modifying resource settings.

LANGUAGE: yaml
CODE:
   commonLabels:
    env: production
   bases:
   - ../../base
   patches:
   - replica_count.yaml

----------------------------------------

TITLE: Blog Post Frontmatter Configuration
DESCRIPTION: YAML frontmatter configuration for the blog post containing metadata like title, date, author and layout.

LANGUAGE: yaml
CODE:
---
layout: blog
title: "Volume Health Monitoring Alpha Update"
date: 2021-04-16
slug: volume-health-monitoring-alpha-update
author: >
  Xing Yang (VMware) 
---

----------------------------------------

TITLE: Defining PodDisruptionBudget with AlwaysAllow Unhealthy Pod Eviction Policy in YAML
DESCRIPTION: This YAML snippet demonstrates how to create a PodDisruptionBudget with the 'AlwaysAllow' unhealthy pod eviction policy. It sets a maximum of 1 unavailable pod for the 'nginx' app and allows eviction of unhealthy pods.

LANGUAGE: yaml
CODE:
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: nginx-pdb
spec:
  selector:
    matchLabels:
      app: nginx
  maxUnavailable: 1
  unhealthyPodEvictionPolicy: AlwaysAllow

----------------------------------------

TITLE: ResourceClaimTemplate API Definition
DESCRIPTION: YAML definition of the ResourceClaimTemplate API version and import path.

LANGUAGE: yaml
CODE:
apiVersion: "resource.k8s.io/v1beta1"
import: "k8s.io/api/resource/v1beta1"

----------------------------------------

TITLE: Logging Pod Status Update with Structured Logs in Golang
DESCRIPTION: This snippet demonstrates how to use the new InfoS method from the klog library to log a pod status update with structured data. It includes the pod object reference and status as key-value pairs.

LANGUAGE: golang
CODE:
klog.InfoS("Pod status updated", "pod", klog.KObj(pod), "status", status)

----------------------------------------

TITLE: Renewing Front Proxy Client Certificate in Kubernetes
DESCRIPTION: This command renews the certificate for the front proxy client in Kubernetes. It can use the local PKI, K8s certificate API, or generate a CSR request. The renewal is unconditional and requires restarting control-plane components after execution.

LANGUAGE: bash
CODE:
kubeadm certs renew front-proxy-client [flags]

----------------------------------------

TITLE: Checking Pod Status in Kubernetes
DESCRIPTION: This command retrieves the status of pods in the Kubernetes cluster.

LANGUAGE: shell
CODE:
kubectl get pods

----------------------------------------

TITLE: Defining APIServerTracing Feature Gate Configuration in YAML
DESCRIPTION: YAML configuration defining the feature gate stages and properties for APIServerTracing, including version progression from alpha to beta and default values for each stage.

LANGUAGE: yaml
CODE:
title: APIServerTracing
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha
    defaultValue: false
    fromVersion: "1.22"
    toVersion: "1.26"
  - stage: beta
    defaultValue: true
    fromVersion: "1.27"

----------------------------------------

TITLE: Deleting a Namespace in Kubernetes
DESCRIPTION: This command deletes the 'qos-example' namespace and all resources within it, cleaning up after the exercise.

LANGUAGE: shell
CODE:
kubectl delete namespace qos-example

----------------------------------------

TITLE: Deleting a Namespace in Kubernetes
DESCRIPTION: This command deletes the 'qos-example' namespace and all resources within it, cleaning up after the exercise.

LANGUAGE: shell
CODE:
kubectl delete namespace qos-example

----------------------------------------

TITLE: Configuring Default Route Rule
DESCRIPTION: Creates an Istio route rule to direct all traffic to reviews v1 by default.

LANGUAGE: yaml
CODE:
apiVersion: config.istio.io/v1alpha2
kind: RouteRule
metadata:
   name: reviews-default
spec:
   destination:
       name: reviews
   route:
   - labels:
           version: v1
       weight: 100

----------------------------------------

TITLE: kubectl explain Usage Examples
DESCRIPTION: Examples demonstrating various ways to use the kubectl explain command for different Kubernetes resources and fields.

LANGUAGE: bash
CODE:
  # Get the documentation of the resource and its fields
  kubectl explain pods
  
  # Get all the fields in the resource
  kubectl explain pods --recursive
  
  # Get the explanation for deployment in supported api versions
  kubectl explain deployments --api-version=apps/v1
  
  # Get the documentation of a specific field of a resource
  kubectl explain pods.spec.containers
  
  # Get the documentation of resources in different format
  kubectl explain deployment --output=plaintext-openapiv2

----------------------------------------

TITLE: Internationalization Configuration in TOML
DESCRIPTION: TOML configuration examples showing how heading strings are defined for different languages.

LANGUAGE: toml
CODE:
[whatsnext_heading]
other = "What's next"

LANGUAGE: toml
CODE:
[whatsnext_heading]
other = "다음 내용"

----------------------------------------

TITLE: Uploading Configuration with Kubeadm
DESCRIPTION: Command syntax for uploading all configuration to a config map using kubeadm. This command is part of the kubeadm init phase and supports various options including config file path, CRI socket specification, and dry-run mode.

LANGUAGE: bash
CODE:
kubeadm init phase upload-config all [flags]

----------------------------------------

TITLE: Defining NetworkPolicy for Nginx Service in Kubernetes
DESCRIPTION: This YAML snippet defines a NetworkPolicy that limits access to the nginx service. It only allows pods with the label 'access: true' to access the service.

LANGUAGE: yaml
CODE:
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: access-nginx
spec:
  podSelector:
    matchLabels:
      app: nginx
  ingress:
  - from:
    - podSelector:
        matchLabels:
          access: "true"

----------------------------------------

TITLE: Configuring Traffic Splitting in Kubernetes Gateway API
DESCRIPTION: Example of an HTTPRoute resource that implements traffic splitting and canary routing based on HTTP headers between two service versions.

LANGUAGE: yaml
CODE:
kind: HTTPRoute
apiVersion: networking.x-k8s.io/v1alpha1
metadata:
  name: bar-route
  namespace: bar
  labels:
    gateway: external-https-prod
spec:
  hostnames:
  - "bar.example.com"
  rules:
  - forwardTo:
    - serviceName: bar-v1
      port: 8080
      weight: 90
    - serviceName: bar-v2
      port: 8080
      weight: 10
  - matches:
    - headers:
        values:
          env: canary
    forwardTo:
    - serviceName: bar-v2
      port: 8080

----------------------------------------

TITLE: Verifying PersistentVolumeClaim Provisioning in Kubernetes
DESCRIPTION: Command to verify that the PersistentVolumeClaim has been provisioned correctly.

LANGUAGE: shell
CODE:
kubectl get pvc

----------------------------------------

TITLE: Configuring Ambassador Route in Kubernetes YAML
DESCRIPTION: This YAML snippet demonstrates how to configure Ambassador to route requests to /httpbin/ to the public httpbin.org service using Kubernetes annotations.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Service
metadata:
  name: httpbin
  annotations:
    getambassador.io/config: |
      ---
      apiVersion: ambassador/v0
      kind:  Mapping
      name:  httpbin_mapping
      prefix: /httpbin/
      service: httpbin.org:80
      host_rewrite: httpbin.org
spec:
  type: ClusterIP
  ports:
    - port: 80

----------------------------------------

TITLE: Detailed Example of Image Volume Source in Kubernetes Pod
DESCRIPTION: This YAML example provides a complete pod configuration using the Image Volume Source feature. It specifies an image reference as a volume and mounts it in a container, demonstrating the usage of pullPolicy and other relevant fields.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: pod
spec:
  containers:
    - name: test
      image: registry.k8s.io/e2e-test-images/echoserver:2.3
      volumeMounts:
        - name: volume
          mountPath: /volume
  volumes:
    - name: volume
      image:
        reference: quay.io/crio/artifact:v1
        pullPolicy: IfNotPresent

----------------------------------------

TITLE: CronJob Resource Structure
DESCRIPTION: Core structure of a CronJob resource including metadata, spec and status fields

LANGUAGE: yaml
CODE:
metadata:
  # Standard object metadata
spec:
  # Desired behavior of cron job
status:
  # Current status of cron job

----------------------------------------

TITLE: Clonage d'un PVC existant
DESCRIPTION: Exemple de création d'un nouveau PersistentVolumeClaim en clonant un PVC existant

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: cloned-pvc
spec:
  storageClassName: my-csi-plugin
  dataSource:
    name: existing-src-pvc-name
    kind: PersistentVolumeClaim
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

----------------------------------------

TITLE: Creating Pod Security Admission Configuration
DESCRIPTION: Creates a configuration file for Pod Security Admission Controller to implement specific Pod Security Standards.

LANGUAGE: yaml
CODE:
apiVersion: apiserver.config.k8s.io/v1
kind: AdmissionConfiguration
plugins:
- name: PodSecurity
  configuration:
    apiVersion: pod-security.admission.config.k8s.io/v1
    kind: PodSecurityConfiguration
    defaults:
      enforce: "baseline"
      enforce-version: "latest"
      audit: "restricted"
      audit-version: "latest"
      warn: "restricted"
      warn-version: "latest"
    exemptions:
      usernames: []
      runtimeClasses: []
      namespaces: [kube-system]

----------------------------------------

TITLE: Configuring CronJobsScheduledAnnotation Feature Gate in Kubernetes
DESCRIPTION: YAML configuration for the CronJobsScheduledAnnotation feature gate, defining its progression from beta to stable across Kubernetes versions. The feature enables setting scheduled job time as annotations on Jobs created by CronJobs.

LANGUAGE: yaml
CODE:
title: CronJobsScheduledAnnotation
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: beta
    defaultValue: true
    fromVersion: "1.28"
    toVersion: "1.31"
  - stage: stable
    defaultValue: true
    fromVersion: "1.32"

----------------------------------------

TITLE: Defining CSIDriver with Ephemeral Volume Lifecycle Mode in YAML
DESCRIPTION: This YAML snippet demonstrates how to define a CSIDriver resource that supports the Ephemeral volume lifecycle mode, which is required for using CSI inline volumes.

LANGUAGE: yaml
CODE:
apiVersion: storage.k8s.io/v1
kind: CSIDriver
metadata:
  name: secrets-store.csi.k8s.io
spec:
  podInfoOnMount: true
  attachRequired: false
  volumeLifecycleModes:
  - Ephemeral

----------------------------------------

TITLE: Marking Control Plane Node with kubeadm
DESCRIPTION: This command labels and taints the node as a control plane node in the Kubernetes cluster.

LANGUAGE: bash
CODE:
kubeadm init phase mark-control-plane

----------------------------------------

TITLE: Best Effort Pod Configuration with Multiple Devices in YAML
DESCRIPTION: YAML configuration for an nginx pod that runs in BestEffort QoS class with multiple device requests but no CPU/memory specifications.

LANGUAGE: yaml
CODE:
spec:
  containers:
  - name: nginx
    image: nginx
    resources:
      limits:
        example.com/deviceA: "1"
        example.com/deviceB: "1"
      requests:
        example.com/deviceA: "1"
        example.com/deviceB: "1"

----------------------------------------

TITLE: CronJob Resource Structure
DESCRIPTION: Core structure of a CronJob resource including metadata, spec and status fields

LANGUAGE: yaml
CODE:
metadata:
  # Standard object metadata
spec:
  # Desired behavior of cron job
status:
  # Current status of cron job

----------------------------------------

TITLE: Configuring HorizontalPodAutoscaler Scale Down Policies
DESCRIPTION: Example YAML configuration for specifying scale down policies in a HorizontalPodAutoscaler resource. It defines two policies - one based on number of pods and another based on percentage.

LANGUAGE: yaml
CODE:
behavior:
  scaleDown:
    policies:
    - type: Pods
      value: 4
      periodSeconds: 60
    - type: Percent
      value: 10
      periodSeconds: 60

----------------------------------------

TITLE: Updated Kubernetes Secret Manifest
DESCRIPTION: YAML configuration for a Kubernetes Secret with an updated password field.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Secret
metadata:
  name: mysecret
type: Opaque
data:
  username: YWRtaW4=
  password: YmlyZHNhcmVudHJlYWw=

----------------------------------------

TITLE: Deploying OpenStack Cloud Controller Manager
DESCRIPTION: YAML manifest for deploying the OpenStack Cloud Controller Manager as a DaemonSet in Kubernetes.

LANGUAGE: yaml
CODE:
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cloud-controller-manager
  namespace: kube-system
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: openstack-cloud-controller-manager
  namespace: kube-system
  labels:
    k8s-app: openstack-cloud-controller-manager
spec:
  selector:
    matchLabels:
      k8s-app: openstack-cloud-controller-manager
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        k8s-app: openstack-cloud-controller-manager
    spec:
      nodeSelector:
        node-role.kubernetes.io/master: ""
      securityContext:
        runAsUser: 1001
      tolerations:
      - key: node.cloudprovider.kubernetes.io/uninitialized
        value: "true"
        effect: NoSchedule
      - key: node-role.kubernetes.io/master
        effect: NoSchedule
      - effect: NoSchedule
        key: node.kubernetes.io/not-ready
      serviceAccountName: cloud-controller-manager
      containers:
        - name: openstack-cloud-controller-manager
          image: docker.io/k8scloudprovider/openstack-cloud-controller-manager:v1.15.0
          args:
            - /bin/openstack-cloud-controller-manager
            - --v=1
            - --cloud-config=$(CLOUD_CONFIG)
            - --cloud-provider=openstack
            - --use-service-account-credentials=true
            - --address=127.0.0.1
          volumeMounts:
            - mountPath: /etc/kubernetes/pki
              name: k8s-certs
              readOnly: true
            - mountPath: /etc/ssl/certs
              name: ca-certs
              readOnly: true
            - mountPath: /etc/config
              name: cloud-config-volume
              readOnly: true
            - mountPath: /usr/libexec/kubernetes/kubelet-plugins/volume/exec
              name: flexvolume-dir
            - mountPath: /etc/kubernetes
              name: ca-cert
              readOnly: true
          resources:
            requests:
              cpu: 200m
          env:
            - name: CLOUD_CONFIG
              value: /etc/config/cloud.conf
      hostNetwork: true
      volumes:
      - hostPath:
          path: /usr/libexec/kubernetes/kubelet-plugins/volume/exec
          type: DirectoryOrCreate
        name: flexvolume-dir
      - hostPath:
          path: /etc/kubernetes/pki
          type: DirectoryOrCreate
        name: k8s-certs
      - hostPath:
          path: /etc/ssl/certs
          type: DirectoryOrCreate
        name: ca-certs
      - name: cloud-config-volume
        secret:
          secretName: cloud-config
      - name: ca-cert
        secret:
          secretName: openstack-ca-cert

----------------------------------------

TITLE: Enabling Kubectl System-Level Autocompletion
DESCRIPTION: Commands to install kubectl completion script system-wide in bash_completion.d directory.

LANGUAGE: bash
CODE:
kubectl completion bash | sudo tee /etc/bash_completion.d/kubectl > /dev/null
sudo chmod a+r /etc/bash_completion.d/kubectl

----------------------------------------

TITLE: Defining ServiceLoadBalancerClass Feature Gate Configuration in YAML
DESCRIPTION: YAML configuration defining the lifecycle stages of the ServiceLoadBalancerClass feature gate, including its progression from alpha through stable before removal. Shows version ranges and default values for each stage.

LANGUAGE: yaml
CODE:
title: ServiceLoadBalancerClass
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.21"
    toVersion: "1.21"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.22"
    toVersion: "1.23"    
  - stage: stable
    defaultValue: true
    fromVersion: "1.24"
    toVersion: "1.25"    

removed: true

----------------------------------------

TITLE: Score Plugin Implementation in Go
DESCRIPTION: Example implementation of a score plugin that ranks nodes based on blinking lights count

LANGUAGE: go
CODE:
func ScoreNode(_ *v1.pod, n *v1.Node) (int, error) {
    return getBlinkingLightCount(n)
}

----------------------------------------

TITLE: ServiceCIDR Resource Structure
DESCRIPTION: Defines the basic structure of a ServiceCIDR resource including metadata, spec and status fields

LANGUAGE: yaml
CODE:
apiVersion: networking.k8s.io/v1beta1
kind: ServiceCIDR
metadata:
  name: example-cidr
spec:
  cidrs:
    - "192.168.0.0/24"
    - "2001:db8::/64"
status:
  conditions: []

----------------------------------------

TITLE: Checking Systemd Inhibitor Lock Status
DESCRIPTION: Command to list active systemd inhibitor locks showing kubelet's shutdown delay configuration. This demonstrates how kubelet acquires a delay-type inhibitor lock to manage graceful shutdowns.

LANGUAGE: bash
CODE:
kubelet-node ~ # systemd-inhibit --list
    Who: kubelet (UID 0/root, PID 1515/kubelet)
    What: shutdown
    Why: Kubelet needs time to handle node shutdown
    Mode: delay

1 inhibitors listed.

----------------------------------------

TITLE: Defining PodShareProcessNamespace Feature Gate Configuration in YAML
DESCRIPTION: YAML configuration defining the lifecycle stages of the PodShareProcessNamespace feature gate in Kubernetes. Shows progression from alpha (1.10) through beta (1.12-1.16) to stable (1.17-1.19) before removal.

LANGUAGE: yaml
CODE:
title: PodShareProcessNamespace
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.10"
    toVersion: "1.11"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.12"
    toVersion: "1.16"
  - stage: stable
    defaultValue: true
    fromVersion: "1.17"
    toVersion: "1.19"

removed: true

----------------------------------------

TITLE: Installing and using kubeadm completion for bash on macOS
DESCRIPTION: This example demonstrates how to install bash completion on macOS using Homebrew, load the kubeadm completion code, and add it to the user's bash profile for persistent use.

LANGUAGE: bash
CODE:
# Install bash completion on a Mac using homebrew
brew install bash-completion
printf "\n# Bash completion support\nsource $(brew --prefix)/etc/bash_completion\n" >> $HOME/.bash_profile
source $HOME/.bash_profile

# Load the kubeadm completion code for bash into the current shell
source <(kubeadm completion bash)

# Write bash completion code to a file and source it from .bash_profile
kubeadm completion bash > ~/.kube/kubeadm_completion.bash.inc
printf "\n# Kubeadm shell completion\nsource '$HOME/.kube/kubeadm_completion.bash.inc'\n" >> $HOME/.bash_profile
source $HOME/.bash_profile

----------------------------------------

TITLE: Cloning Kubernetes Repository
DESCRIPTION: Command to clone the Kubernetes repository from GitHub to generate metrics documentation.

LANGUAGE: shell
CODE:
git clone https://www.github.com/kubernetes/kubernetes

----------------------------------------

TITLE: Building Talos Linux Image with Docker
DESCRIPTION: Docker command to build a Talos Linux OS image using the configuration file. Requires privileged access and device mounting.

LANGUAGE: bash
CODE:
cat config.yaml | docker run --rm -i -v /dev:/dev --privileged "ghcr.io/siderolabs/imager:v1.6.4" -

----------------------------------------

TITLE: Example JSON Input for kubectl JSONPath
DESCRIPTION: This JSON object represents a sample input that can be used to demonstrate JSONPath expressions in kubectl. It contains a list of items with metadata and status information, as well as a list of users.

LANGUAGE: json
CODE:
{
  "kind": "List",
  "items":[
    {
      "kind":"None",
      "metadata":{"name":"127.0.0.1"},
      "status":{
        "capacity":{"cpu":"4"},
        "addresses":[{"type": "LegacyHostIP", "address":"127.0.0.1"}]
      }
    },
    {
      "kind":"None",
      "metadata":{"name":"127.0.0.2"},
      "status":{
        "capacity":{"cpu":"8"},
        "addresses":[
          {"type": "LegacyHostIP", "address":"127.0.0.2"},
          {"type": "another", "address":"127.0.0.3"}
        ]
      }
    }
  ],
  "users":[
    {
      "name": "myself",
      "user": {}
    },
    {
      "name": "e2e",
      "user": {"username": "admin", "password": "secret"}
    }
  ]
}

----------------------------------------

TITLE: Executing HTTP Upgrade Request for WebSocket in Kubernetes
DESCRIPTION: Demonstrates an HTTP upgrade request for running a command in a Kubernetes container using WebSocket protocol. The example shows the request headers for upgrading the connection.

LANGUAGE: console
CODE:
$ kubectl exec -v=8 nginx -- date
GET https://127.0.0.1:43251/api/v1/namespaces/default/pods/nginx/exec?command=date…
Request Headers:
    Connection: Upgrade
    Upgrade: websocket
    Sec-Websocket-Protocol: v5.channel.k8s.io
    User-Agent: kubectl/v1.31.0 (linux/amd64) kubernetes/6911225

----------------------------------------

TITLE: Defining SerializedNodeConfigSource in Go
DESCRIPTION: Defines the SerializedNodeConfigSource struct used for tracking checkpointed dynamic configs.

LANGUAGE: go
CODE:
type SerializedNodeConfigSource struct {
  metav1.TypeMeta

  Source v1.NodeConfigSource
}

----------------------------------------

TITLE: YAML Blog Post Frontmatter
DESCRIPTION: YAML frontmatter metadata for the blog post, containing title, date, slug, and author information

LANGUAGE: yaml
CODE:
---
layout: blog
title: "GSoD 2020: Improving the API Reference Experience"
date: 2020-12-04
slug: gsod-2020-improving-api-reference-experience
author: >
  [Philippe Martin](https://github.com/feloy)
---

----------------------------------------

TITLE: Viewing Pod Status with Scheduling Gates
DESCRIPTION: Example showing how a Pod with scheduling gates appears in kubectl output, demonstrating the SchedulingGated status that indicates the Pod is blocked from scheduling.

LANGUAGE: yaml
CODE:
NAME       READY   STATUS            RESTARTS   AGE
test-pod   0/1     SchedulingGated   0          10s

----------------------------------------

TITLE: Defining an HTTPRoute in Kubernetes
DESCRIPTION: A minimal example of an HTTPRoute resource, which specifies routing behavior for HTTP requests from a Gateway listener to a backend service.

LANGUAGE: yaml
CODE:
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: example-httproute
spec:
  parentRefs:
  - name: example-gateway
  hostnames:
  - "www.example.com"
  rules:
  - matches:
    - path:
        type: PathPrefix
        value: /login
    backendRefs:
    - name: example-svc
      port: 8080

----------------------------------------

TITLE: Preparing Base System and Installing Packages in Dockerfile
DESCRIPTION: Creates a base Ubuntu system using debootstrap, installs updates and additional packages like Docker and Kubernetes components.

LANGUAGE: Dockerfile
CODE:
FROM ltsp-base as basesystem

ARG DEBIAN_FRONTEND=noninteractive

# Prepare base system
RUN debootstrap --arch amd64 xenial /opt/ltsp/amd64

# Install updates
RUN echo "\
      deb http://archive.ubuntu.com/ubuntu xenial main restricted universe multiverse\n\
      deb http://archive.ubuntu.com/ubuntu xenial-updates main restricted universe multiverse\n\
      deb http://archive.ubuntu.com/ubuntu xenial-security main restricted universe multiverse" \
      > /opt/ltsp/amd64/etc/apt/sources.list \
 && ltsp-chroot apt-get -y update \
 && ltsp-chroot apt-get -y upgrade

# Installing LTSP-packages
RUN ltsp-chroot apt-get -y install ltsp-client-core

# Apply initramfs patches
# 1: Read params from /etc/lts.conf during the boot (#1680490)
# 2: Add support for PREINIT variables in lts.conf
ADD /patches /patches
RUN patch -p4 -d /opt/ltsp/amd64/usr/share < /patches/feature_initramfs_params_from_lts_conf.diff \
 && patch -p3 -d /opt/ltsp/amd64/usr/share < /patches/feature_preinit.diff

# Write new local client config for boot NBD image to ram:
RUN echo "[Default]\nLTSP_NBD_TO_RAM = true" \
      > /opt/ltsp/amd64/etc/lts.conf

# Install packages
RUN echo 'APT::Install-Recommends "0";\nAPT::Install-Suggests "0";' \
      >> /opt/ltsp/amd64/etc/apt/apt.conf.d/01norecommend \
 && ltsp-chroot apt-get -y install \
      software-properties-common \
      apt-transport-https \
      ca-certificates \
      ssh \
      bridge-utils \
      pv \
      jq \
      vlan \
      bash-completion \
      screen \
      vim \
      mc \
      lm-sensors \
      htop \
      jnettop \
      rsync \
      curl \
      wget \
      tcpdump \
      arping \
      apparmor-utils \
      nfs-common \
      telnet \
      sysstat \
      ipvsadm \
      ipset \
      make

# Install kernel
RUN ltsp-chroot apt-get -y install linux-generic-hwe-16.04

----------------------------------------

TITLE: Importing DaemonSet in Go
DESCRIPTION: How to import the DaemonSet type in Go code.

LANGUAGE: go
CODE:
import "k8s.io/api/apps/v1"

----------------------------------------

TITLE: Defining a Basic Seccomp Profile in JSON
DESCRIPTION: This snippet shows a simple seccomp profile in JSON format. It sets a default action to return an error and allows specific syscalls related to file operations.

LANGUAGE: json
CODE:
{
  "defaultAction": "SCMP_ACT_ERRNO",
  "defaultErrnoRet": 38,
  "defaultErrno": "ENOSYS",
  "syscalls": [
    {
      "names": ["chmod", "chown", "open", "write"],
      "action": "SCMP_ACT_ALLOW"
    }
  ]
}

----------------------------------------

TITLE: Configuring EfficientWatchResumption Feature Gate in Kubernetes
DESCRIPTION: YAML configuration defining the lifecycle stages of the EfficientWatchResumption feature gate. It progressed from alpha (v1.20) to beta (v1.21-1.23) and finally stable (v1.24+), enabling storage-originated bookmark events for watch operations.

LANGUAGE: yaml
CODE:
title: EfficientWatchResumption
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.20"
    toVersion: "1.20"
  - stage: beta
    defaultValue: true
    fromVersion: "1.21"  
    toVersion: "1.23" 
  - stage: stable
    defaultValue: true
    fromVersion: "1.24"

----------------------------------------

TITLE: Configuring MaxUnavailableStatefulSet Feature Gate in YAML
DESCRIPTION: YAML configuration defining the MaxUnavailableStatefulSet feature gate properties, including its stage (alpha), default value (false), and version introduction (1.24).

LANGUAGE: yaml
CODE:
title: MaxUnavailableStatefulSet
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha
    defaultValue: false
    fromVersion: "1.24"

----------------------------------------

TITLE: Configuring MaxUnavailableStatefulSet Feature Gate in YAML
DESCRIPTION: YAML configuration defining the MaxUnavailableStatefulSet feature gate properties, including its stage (alpha), default value (false), and version introduction (1.24).

LANGUAGE: yaml
CODE:
title: MaxUnavailableStatefulSet
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha
    defaultValue: false
    fromVersion: "1.24"

----------------------------------------

TITLE: Node Condition JSON Structure in Kubernetes API
DESCRIPTION: This JSON snippet represents the structure of a node's condition in the Kubernetes API. It shows an example of a healthy node with a 'Ready' condition set to 'True'.

LANGUAGE: json
CODE:
"conditions": [
  {
    "type": "Ready",
    "status": "True",
    "reason": "KubeletReady",
    "message": "kubelet is posting ready status",
    "lastHeartbeatTime": "2019-06-05T18:38:35Z",
    "lastTransitionTime": "2019-06-05T11:41:27Z"
  }
]

----------------------------------------

TITLE: ASCII Art Cow Illustration
DESCRIPTION: ASCII art representation of a cow used to illustrate the pets vs cattle analogy in infrastructure management

LANGUAGE: ascii-art
CODE:
_____
/ Moo \
\---- /
       \   ^__^
        \  (oo)\_______
           (__)\       )\/\
               ||-----w |
               ||     ||

----------------------------------------

TITLE: Creating Versioned Directory for kubectl Docs
DESCRIPTION: Runs a build target to create a versioned directory for kubectl reference configuration files.

LANGUAGE: shell
CODE:
cd <rdocs-base>
make createversiondirs

----------------------------------------

TITLE: Printing Default Kubeadm Init Configuration
DESCRIPTION: Command to print default initialization configuration objects for kubeadm init. Sensitive values like Bootstrap Token fields are replaced with placeholder values for validation purposes.

LANGUAGE: bash
CODE:
kubeadm config print init-defaults [flags]

----------------------------------------

TITLE: Defining AttachVolumeLimit Feature Gate Configuration in YAML
DESCRIPTION: YAML configuration defining the lifecycle stages of the AttachVolumeLimit feature gate, including its progression from alpha through stable and eventual removal. Specifies version ranges and default values for each stage.

LANGUAGE: yaml
CODE:
title: AttachVolumeLimit
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.11"
    toVersion: "1.11"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.12"
    toVersion: "1.16"
  - stage: stable
    defaultValue: true
    fromVersion: "1.17"
    toVersion: "1.21"

removed: true

----------------------------------------

TITLE: Starting KPNG Controller for Specialized Proxier
DESCRIPTION: This command starts the kpng controller, configuring it to watch only services with the 'kpng-example' service proxy name and open a gRPC server for backends.

LANGUAGE: bash
CODE:
kpng kube --service-proxy-name=kpng-example to-api

----------------------------------------

TITLE: Running with Modified Seccomp Profile
DESCRIPTION: This console output shows the result of running the application with the modified seccomp profile that blocks the uname syscall.

LANGUAGE: console
CODE:
> sudo ./spoc run -p /tmp/no-uname-profile.json ./main
10:39:12.707798 Reading file /tmp/no-uname-profile.json
10:39:12.707892 Setting up seccomp
10:39:12.707920 Load seccomp profile
10:39:12.707982 Starting audit log enricher
10:39:12.707998 Enricher reading from file /var/log/audit/audit.log
10:39:12.709164 Running command with PID: 480512
panic: operation not permitted

goroutine 1 [running]:
main.main()
        /path/to/main.go:10 +0x85
10:39:12.713035 Unable to run: launch runner: wait for command: exit status 2

----------------------------------------

TITLE: Creating MySQL Sharding Cluster in Kubernetes
DESCRIPTION: This command creates a MySQL sharding cluster using a YAML configuration file.

LANGUAGE: bash
CODE:
kubectl create -f mysqlshardingcluster.yaml

----------------------------------------

TITLE: Defining Updated VolumeAttributesClass in Kubernetes
DESCRIPTION: YAML definition for a new VolumeAttributesClass named 'gold' with updated IOPS and throughput parameters.

LANGUAGE: yaml
CODE:
apiVersion: storage.k8s.io/v1alpha1
kind: VolumeAttributesClass
metadata:
  name: gold
driverName: pd.csi.storage.gke.io
parameters:
  iops: "4000"
  throughput: "60"

----------------------------------------

TITLE: Markdown Frontmatter Header for Kubernetes Clusters Documentation
DESCRIPTION: YAML frontmatter block defining metadata for a documentation page about Kubernetes clusters. Specifies the page title and weight for ordering in navigation.

LANGUAGE: markdown
CODE:
---
title: Clusters
weight: 60
---

----------------------------------------

TITLE: Configuring Parallel Pod Management for a StatefulSet
DESCRIPTION: This YAML manifest defines a StatefulSet with parallel pod management policy for faster scaling operations.

LANGUAGE: yaml
CODE:
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: web
spec:
  serviceName: "nginx"
  podManagementPolicy: "Parallel"
  replicas: 2
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: registry.k8s.io/nginx-slim:0.8
        ports:
        - containerPort: 80
          name: web
        volumeMounts:
        - name: www
          mountPath: /usr/share/nginx/html
  volumeClaimTemplates:
  - metadata:
      name: www
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1Gi

----------------------------------------

TITLE: Defining MountContainers Feature Gate Configuration in YAML
DESCRIPTION: YAML configuration defining the lifecycle of the MountContainers feature gate in Kubernetes. It specifies the feature was in alpha from v1.9 to v1.16, deprecated in v1.17, and subsequently removed.

LANGUAGE: yaml
CODE:
title: MountContainers
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.9"
    toVersion: "1.16"
  - stage: deprecated
    defaultValue: false
    fromVersion: "1.17"
    toVersion: "1.17"

removed: true

----------------------------------------

TITLE: Configuring Kubernetes Admission Plugins
DESCRIPTION: Command line configuration for enabling admission plugins in Kubernetes API server.

LANGUAGE: bash
CODE:
--enable-admission-plugins=ValidatingAdmissionWebhook,MutatingAdmissionWebhook

LANGUAGE: bash
CODE:
--enable-admission-plugins=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,Priority,ResourceQuota,PodSecurityPolicy

----------------------------------------

TITLE: Labeling Kubernetes Namespaces for Istio Injection
DESCRIPTION: Commands to label the default and Kong namespaces for automatic Istio sidecar injection.

LANGUAGE: bash
CODE:
$ kubectl label namespace default istio-injection=enabled
$ kubectl create namespace kong
$ kubectl label namespace kong istio-injection=enabled

----------------------------------------

TITLE: Enabling RuntimeDefault as Default Seccomp Profile
DESCRIPTION: Demonstrates how to enable the use of RuntimeDefault as the default seccomp profile for all workloads

LANGUAGE: yaml
CODE:
kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4
nodes:
  - role: control-plane
    image: kindest/node:v1.28.0@sha256:9f3ff58f19dcf1a0611d11e8ac989fdb30a28f40f236f59f0bea31fb956ccf5c
    kubeadmConfigPatches:
      - |
        kind: JoinConfiguration
        nodeRegistration:
          kubeletExtraArgs:
            seccomp-default: "true"
  - role: worker
    image: kindest/node:v1.28.0@sha256:9f3ff58f19dcf1a0611d11e8ac989fdb30a28f40f236f59f0bea31fb956ccf5c
    kubeadmConfigPatches:
      - |
        kind: JoinConfiguration
        nodeRegistration:
          kubeletExtraArgs:
            seccomp-default: "true"

----------------------------------------

TITLE: Markdown Image Figure Short Code
DESCRIPTION: Hugo shortcode for displaying an image figure with source, alt text and title

LANGUAGE: markdown
CODE:
{{< figure
    src="/images/blog/grokkin-the-docs/grok-definition.png"
    alt="grok: to understand profoundly and intuitively"
    title="Definition courtesy of Merriam Webster online dictionary"
>}}

----------------------------------------

TITLE: Monitoring Spark Pods on Kubernetes
DESCRIPTION: This command shows how to watch Spark resources (driver and executor pods) created on the Kubernetes cluster using kubectl. It filters pods by the 'spark-role' label.

LANGUAGE: bash
CODE:
$ kubectl get pods -l 'spark-role in (driver, executor)' -w

----------------------------------------

TITLE: Windows Registry Configuration for Network Share Access
DESCRIPTION: Command to set registry key enabling network share access using hostname or FQDN in Windows nodes.

LANGUAGE: cmd
CODE:
reg add "HKLM\SYSTEM\CurrentControlSet\Services\hns\State" /v EnableCompartmentNamespace /t REG_DWORD /d 1

----------------------------------------

TITLE: VolumeAttributesClass API Definition
DESCRIPTION: YAML definition showing the API version and import path for the VolumeAttributesClass resource

LANGUAGE: yaml
CODE:
apiVersion: storage.k8s.io/v1beta1
import: "k8s.io/api/storage/v1beta1"

----------------------------------------

TITLE: Creating a VolumeGroupSnapshot for Existing Content in Kubernetes YAML
DESCRIPTION: YAML definition for creating a VolumeGroupSnapshot object that references a pre-existing VolumeGroupSnapshotContent.

LANGUAGE: yaml
CODE:
apiVersion: groupsnapshot.storage.k8s.io/v1beta1
kind: VolumeGroupSnapshot
metadata:
  name: static-group-snapshot
  namespace: demo-namespace
spec:
  source:
    volumeGroupSnapshotContentName: static-group-content

----------------------------------------

TITLE: Running Interactive Busybox Pod
DESCRIPTION: Command to run an interactive busybox Pod for debugging purposes within the cluster

LANGUAGE: none
CODE:
kubectl run -it --rm --restart=Never busybox --image=gcr.io/google-containers/busybox sh

----------------------------------------

TITLE: Running Interactive Busybox Pod
DESCRIPTION: Command to run an interactive busybox Pod for debugging purposes within the cluster

LANGUAGE: none
CODE:
kubectl run -it --rm --restart=Never busybox --image=gcr.io/google-containers/busybox sh

----------------------------------------

TITLE: Enabling Admission Controllers
DESCRIPTION: Example command to enable specific admission controllers

LANGUAGE: shell
CODE:
kube-apiserver --enable-admission-plugins=NamespaceLifecycle,LimitRanger ...

----------------------------------------

TITLE: Custom IP Family Order Dual-Stack Service
DESCRIPTION: Service configuration that explicitly defines both IPv6 and IPv4 address families with PreferDualStack policy, prioritizing IPv6.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Service
metadata:
  name: my-service
  labels:
    app.kubernetes.io/name: MyApp
spec:
  ipFamilyPolicy: PreferDualStack
  ipFamilies:
    - IPv6
    - IPv4
  selector:
    app.kubernetes.io/name: MyApp
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP

----------------------------------------

TITLE: Storing Credentials in Files for Kubernetes Secret Creation
DESCRIPTION: These commands create two files, username.txt and password.txt, containing the credentials 'admin' and 'S!B\*d$zDsb=' respectively. The -n flag is used to prevent adding an extra newline character.

LANGUAGE: shell
CODE:
echo -n 'admin' > ./username.txt
echo -n 'S!B\*d$zDsb=' > ./password.txt

----------------------------------------

TITLE: ElasticIndexedJob Feature Gate Configuration
DESCRIPTION: YAML configuration defining the ElasticIndexedJob feature gate stages, including beta and stable phases with their respective version ranges and default values.

LANGUAGE: yaml
CODE:
---
title: ElasticIndexedJob
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: beta
    defaultValue: true
    fromVersion: "1.27"
    toVersion: "1.30"
  - stage: stable
    defaultValue: true
    fromVersion: "1.31"
---

----------------------------------------

TITLE: Using SelfSubjectAccessReview API for Authorization Checks
DESCRIPTION: Example of creating a SelfSubjectAccessReview resource to check if the current user has permission to create deployments in the 'dev' namespace.

LANGUAGE: yaml
CODE:
apiVersion: authorization.k8s.io/v1
kind: SelfSubjectAccessReview
spec:
  resourceAttributes:
    group: apps
    name: deployments
    verb: create
    namespace: dev

----------------------------------------

TITLE: Delete Collection of Pods
DESCRIPTION: Delete a collection of Pods in a namespace.

LANGUAGE: Go
CODE:
DELETE /api/v1/namespaces/{namespace}/pods

----------------------------------------

TITLE: Configuring Gateway Infrastructure Labels in Gateway API
DESCRIPTION: This YAML snippet shows how to set infrastructure labels on a Gateway object. These labels will be applied to any generated infrastructure resources, allowing for grouping and organization of related resources.

LANGUAGE: yaml
CODE:
apiVersion: gateway.networking.k8s.io/v1
kind: Gateway
metadata:
  name: hello-world
spec:
  infrastructure:
    labels:
      app.kubernetes.io/name: hello-world

----------------------------------------

TITLE: Remote Verification of Kubernetes Binary
DESCRIPTION: Command to verify the kubectl binary using remote signature and certificate URLs without downloading them locally.

LANGUAGE: shell
CODE:
COSIGN_EXPERIMENTAL=1 cosign verify-blob kubectl \
    --signature https://dl.k8s.io/release/v1.26.0-rc.1/bin/linux/amd64/kubectl.sig \
    --certificate https://dl.k8s.io/release/v1.26.0-rc.1/bin/linux/amd64/kubectl.cert

----------------------------------------

TITLE: ReplicaSet Resource Definition
DESCRIPTION: YAML definition showing the apiVersion and kind for a ReplicaSet resource

LANGUAGE: yaml
CODE:
apiVersion: apps/v1
kind: ReplicaSet

----------------------------------------

TITLE: Contributor Journey Flowchart in Mermaid
DESCRIPTION: A flowchart visualization showing the journey of a new contributor to Kubernetes documentation, including sign-up process, review steps, and contribution paths.

LANGUAGE: mermaid
CODE:
flowchart TB
subgraph third[Open PR]
direction TB
U[ ] -.-
Q[Improve content] --- N[Create content]
N --- O[Translate docs]
O --- P[Manage/publish docs parts<br>of K8s release cycle]

end

subgraph second[Review]
direction TB
   T[ ] -.-
   D[Look over the<br>kubernetes/website<br>repository] --- E[Check out the<br>Hugo static site<br>generator]
   E --- F[Understand basic<br>GitHub commands]
   F --- G[Review open PR<br>and change review <br>processes]
end

subgraph first[Sign up]
    direction TB
    S[ ] -.-
    B[Sign the CNCF<br>Contributor<br>License Agreement] --- C[Join sig-docs<br>Slack channel] 
    C --- V[Join kubernetes-sig-docs<br>mailing list]
    V --- M[Attend weekly<br>sig-docs calls<br>or slack meetings]
end

A([fa:fa-user New<br>Contributor]) --> first
A --> second
A --> third
A --> H[Ask Questions!!!]

----------------------------------------

TITLE: Configuring BackendTLSPolicy with System Certificates in Gateway API
DESCRIPTION: This YAML snippet demonstrates how to configure a BackendTLSPolicy to use system certificates for TLS-encrypted upstream connections. It specifies the target Service and the expected hostname for the backend Pods.

LANGUAGE: yaml
CODE:
apiVersion: gateway.networking.k8s.io/v1alpha2
kind: BackendTLSPolicy
metadata:
  name: tls-upstream-dev
spec:
  targetRef:
    kind: Service
    name: dev-service
    group: ""
  tls:
    wellKnownCACerts: "System"
    hostname: dev.example.com

----------------------------------------

TITLE: Installing Weave Net network add-on
DESCRIPTION: Command to install the Weave Net Pod network add-on.

LANGUAGE: bash
CODE:
kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"

----------------------------------------

TITLE: Checking StatefulSet Status with kubectl
DESCRIPTION: Command to retrieve the status of a StatefulSet including the AvailableReplicas field using kubectl

LANGUAGE: bash
CODE:
kubectl get statefulset/<name_of_the_statefulset> -o yaml

----------------------------------------

TITLE: Configuring MutatingAdmissionPolicy Feature Gate in YAML
DESCRIPTION: YAML configuration for the MutatingAdmissionPolicy feature gate. It sets the feature as alpha stage, disabled by default, and available from Kubernetes version 1.30. The configuration also includes build instructions and notes on the feature's functionality in versions 1.30 and 1.31.

LANGUAGE: yaml
CODE:
---
title: MutatingAdmissionPolicy
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.30"
---

----------------------------------------

TITLE: Defining LimitRange for PersistentVolumeClaim Storage Requests in Kubernetes
DESCRIPTION: This YAML snippet defines a LimitRange resource to set minimum and maximum storage request sizes for PersistentVolumeClaims in a namespace. It limits storage requests between 1Gi and 2Gi.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: LimitRange
metadata:
  name: storagelimits
spec:
  limits:
  - type: PersistentVolumeClaim
    max:
      storage: 2Gi
    min:
      storage: 1Gi

----------------------------------------

TITLE: Removing kubectl Configuration Directory in Bash
DESCRIPTION: This command removes the $HOME/.kube directory, which contains kubectl configuration and cache files, after using kubeadm reset.

LANGUAGE: bash
CODE:
rm -rf $HOME/.kube

----------------------------------------

TITLE: Modifying kube-apiserver Manifest for Encryption
DESCRIPTION: Example of modifying the kube-apiserver static pod manifest to enable encryption.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  annotations:
    kubeadm.kubernetes.io/kube-apiserver.advertise-address.endpoint: 10.20.30.40:443
  creationTimestamp: null
  labels:
    app.kubernetes.io/component: kube-apiserver
    tier: control-plane
  name: kube-apiserver
  namespace: kube-system
spec:
  containers:
  - command:
    - kube-apiserver
    ...
    - --encryption-provider-config=/etc/kubernetes/enc/enc.yaml
    volumeMounts:
    ...
    - name: enc
      mountPath: /etc/kubernetes/enc
      readOnly: true
    ...
  volumes:
  ...
  - name: enc
    hostPath:
      path: /etc/kubernetes/enc
      type: DirectoryOrCreate
  ...

----------------------------------------

TITLE: Defining ZooKeeper StatefulSet in YAML
DESCRIPTION: YAML definition for a ZooKeeper StatefulSet, including Headless Service, Service, PodDisruptionBudget, and StatefulSet configurations.

LANGUAGE: yaml
CODE:
{{% code_sample file="application/zookeeper/zookeeper.yaml" %}}

----------------------------------------

TITLE: Configuring WatchBookmark Feature Gate in Kubernetes YAML
DESCRIPTION: YAML configuration defining the progression of the WatchBookmark feature gate through different Kubernetes versions. The feature moved from alpha (v1.15) to beta (v1.16) and finally stable (v1.17).

LANGUAGE: yaml
CODE:
title: WatchBookmark
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.15"
    toVersion: "1.15"
  - stage: beta
    defaultValue: true
    fromVersion: "1.16"  
    toVersion: "1.16" 
  - stage: stable
    defaultValue: true
    fromVersion: "1.17"

----------------------------------------

TITLE: Editing CoreDNS Deployment and Service
DESCRIPTION: Commands to edit the CoreDNS Deployment and kube-dns Service in the kube-system namespace.

LANGUAGE: shell
CODE:
kubectl edit deployment -n kube-system coredns
kubectl edit service -n kube-system kube-dns

----------------------------------------

TITLE: Editing CoreDNS Deployment and Service
DESCRIPTION: Commands to edit the CoreDNS Deployment and kube-dns Service in the kube-system namespace.

LANGUAGE: shell
CODE:
kubectl edit deployment -n kube-system coredns
kubectl edit service -n kube-system kube-dns

----------------------------------------

TITLE: Editing CoreDNS Deployment and Service
DESCRIPTION: Commands to edit the CoreDNS Deployment and kube-dns Service in the kube-system namespace.

LANGUAGE: shell
CODE:
kubectl edit deployment -n kube-system coredns
kubectl edit service -n kube-system kube-dns

----------------------------------------

TITLE: Creating LTSP Deployment in Kubernetes
DESCRIPTION: Kubernetes Deployment manifest for running LTSP server containers with TFTP and NBD servers.

LANGUAGE: YAML
CODE:
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: ltsp-server
  labels:
      app: ltsp-server
spec:
  selector:
    matchLabels:
      name: ltsp-server
  replicas: 1
  template:
    metadata:
      labels:
        name: ltsp-server
    spec:
      hostNetwork: true
      containers:
      - name: tftpd
        image: registry.example.org/example/ltsp:latest
        command: [ "/usr/sbin/in.tftpd", "-L", "-u", "tftp", "-a", ":69", "-s", "/var/lib/tftpboot" ]
        lifecycle:
          postStart:
            exec:
              command: ["/bin/sh", "-c", "cd /var/lib/tftpboot/ltsp/amd64; ln -sf config/lts.conf ." ]
        volumeMounts:
        - name: config
          mountPath: "/var/lib/tftpboot/ltsp/amd64/config"

      - name: nbd-server
        image: registry.example.org/example/ltsp:latest
        command: [ "/bin/nbd-server-wrapper.sh" ]

      volumes:
      - name: config
        configMap:
          name: ltsp-config

----------------------------------------

TITLE: Resume Paused Deployment Example
DESCRIPTION: Example showing how to resume a previously paused nginx deployment.

LANGUAGE: bash
CODE:
kubectl rollout resume deployment/nginx

----------------------------------------

TITLE: Installing ingress2gateway using Go
DESCRIPTION: This command installs ingress2gateway version 0.1.0 using the Go package manager. The tool is installed to the Go binary path.

LANGUAGE: bash
CODE:
go install github.com/kubernetes-sigs/ingress2gateway@v0.1.0

----------------------------------------

TITLE: Initializing Dual-stack Cluster with kubeadm
DESCRIPTION: This command initializes a dual-stack Kubernetes cluster using kubeadm, specifying both IPv4 and IPv6 CIDRs for pods and services.

LANGUAGE: shell
CODE:
kubeadm init --pod-network-cidr=10.244.0.0/16,2001:db8:42:0::/56 --service-cidr=10.96.0.0/16,2001:db8:42:1::/112

----------------------------------------

TITLE: Defining CSIMigrationGCE Feature Gate Stages in YAML
DESCRIPTION: This YAML configuration specifies the different stages and version ranges for the CSIMigrationGCE feature gate. It includes alpha, beta, and stable stages with corresponding default values and version ranges.

LANGUAGE: yaml
CODE:
stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.14"
    toVersion: "1.16"
  - stage: beta
    defaultValue: false
    fromVersion: "1.17"  
    toVersion: "1.22" 
  - stage: beta
    defaultValue: true
    fromVersion: "1.23"  
    toVersion: "1.24" 
  - stage: stable
    defaultValue: true
    fromVersion: "1.25"
    toVersion: "1.27" 

removed: true

----------------------------------------

TITLE: Defining MultiCIDRServiceAllocator Feature Gate Configuration in YAML
DESCRIPTION: YAML configuration specifying the feature gate stages and properties for MultiCIDRServiceAllocator, defining its progression from alpha to beta status across Kubernetes versions.

LANGUAGE: yaml
CODE:
title: MultiCIDRServiceAllocator
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.27"
    toVersion: "1.30"
  - stage: beta
    defaultValue: false
    fromVersion: "1.31"

----------------------------------------

TITLE: Configuring Device Ownership in containerd
DESCRIPTION: TOML configuration snippet for enabling device ownership from security context in containerd CRI plugin.

LANGUAGE: toml
CODE:
[plugins]
  [plugins."io.containerd.grpc.v1.cri"]
    device_ownership_from_security_context = true

----------------------------------------

TITLE: Configuring ContainerResource Type Metric in HPA for Kubernetes
DESCRIPTION: This YAML snippet demonstrates how to configure the ContainerResource type metric in HorizontalPodAutoscaler. It sets up autoscaling based on the CPU utilization of the 'application' container, targeting an average utilization of 60%.

LANGUAGE: yaml
CODE:
type: ContainerResource
containerResource:
  name: cpu
  container: application
  target:
    type: Utilization
    averageUtilization: 60

----------------------------------------

TITLE: Applying Kubeflow Core to Kubernetes Clusters
DESCRIPTION: Commands to apply the Kubeflow core components to minikube and GKE clusters.

LANGUAGE: bash
CODE:
ks apply minikube -c kubeflow-core

ks apply gke -c kubeflow-core

----------------------------------------

TITLE: Setting Architecture Variables for Kubernetes Installation
DESCRIPTION: Determines the CPU architecture and sets appropriate variables for Kubernetes installation.

LANGUAGE: bash
CODE:
UARCH=$(uname -m)

if [[ "$UARCH" == "arm64" || "$UARCH" == "aarch64" ]]; then
    ARCH="aarch64"
    K8s_ARCH="arm64"
else
    ARCH="x86_64"
    K8s_ARCH="amd64"
fi

----------------------------------------

TITLE: Resetting kubeadm on a node
DESCRIPTION: Command to reset kubeadm on a node.

LANGUAGE: bash
CODE:
kubeadm reset

----------------------------------------

TITLE: Defining ZooKeeper StatefulSet in YAML
DESCRIPTION: YAML definition for a ZooKeeper StatefulSet, including Headless Service, Service, PodDisruptionBudget, and StatefulSet configurations.

LANGUAGE: yaml
CODE:
{{% code_sample file="application/zookeeper/zookeeper.yaml" %}}

----------------------------------------

TITLE: Defining MultiCIDRServiceAllocator Feature Gate Configuration in YAML
DESCRIPTION: YAML configuration specifying the feature gate stages and properties for MultiCIDRServiceAllocator, defining its progression from alpha to beta status across Kubernetes versions.

LANGUAGE: yaml
CODE:
title: MultiCIDRServiceAllocator
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.27"
    toVersion: "1.30"
  - stage: beta
    defaultValue: false
    fromVersion: "1.31"

----------------------------------------

TITLE: Deploying Bookinfo Application on Kubernetes
DESCRIPTION: Command to deploy the Bookinfo sample application in the Kubernetes cluster.

LANGUAGE: bash
CODE:
$ kubectl apply -f http://bit.ly/bookinfoapp

----------------------------------------

TITLE: Creating and Inspecting Kubernetes Pod with Custom Command
DESCRIPTION: These shell commands create a Kubernetes pod based on the YAML configuration, list running pods, and view the logs of the created pod to see the output of the custom command.

LANGUAGE: shell
CODE:
kubectl apply -f https://k8s.io/examples/pods/commands.yaml

kubectl get pods

kubectl logs command-demo

----------------------------------------

TITLE: Quantity Subtraction with Integer using CEL
DESCRIPTION: CEL expression using the quantity library to subtract an integer from a quantity.

LANGUAGE: CEL
CODE:
quantity("50k").sub(20000)

----------------------------------------

TITLE: Creating a Kubernetes Pod with kubectl
DESCRIPTION: This shell command uses kubectl to create a Pod from a YAML file specified by a URL. It applies the configuration to the Kubernetes cluster.

LANGUAGE: shell
CODE:
kubectl apply -f https://k8s.io/examples/pods/storage/redis.yaml

----------------------------------------

TITLE: kubectl rollout restart Usage Examples
DESCRIPTION: Demonstrates common usage patterns for restarting different types of Kubernetes resources including deployments and daemonsets with various filtering options.

LANGUAGE: bash
CODE:
  # Restart all deployments in the test-namespace namespace
  kubectl rollout restart deployment -n test-namespace
  
  # Restart a deployment
  kubectl rollout restart deployment/nginx
  
  # Restart a daemon set
  kubectl rollout restart daemonset/abc
  
  # Restart deployments with the app=nginx label
  kubectl rollout restart deployment --selector=app=nginx

----------------------------------------

TITLE: Displaying Connection Refused Error Message
DESCRIPTION: This snippet shows an example error message that may appear when kubectl is not configured correctly or cannot connect to a Kubernetes cluster. It indicates a connection refusal to the specified server.

LANGUAGE: shell
CODE:
The connection to the server <server-name:port> was refused - did you specify the right host or port?

----------------------------------------

TITLE: Downloading and Saving Container Images
DESCRIPTION: Pulls necessary container images and saves them as tar files for transfer to the air-gapped environment.

LANGUAGE: bash
CODE:
images=(
    "registry.k8s.io/kube-apiserver:${KUBE_RELEASE}"
    "registry.k8s.io/kube-controller-manager:${KUBE_RELEASE}"
    "registry.k8s.io/kube-scheduler:${KUBE_RELEASE}"
    "registry.k8s.io/kube-proxy:${KUBE_RELEASE}"
    "registry.k8s.io/pause:3.9"
    "registry.k8s.io/etcd:3.5.7-0"
    "registry.k8s.io/coredns/coredns:v1.10.1"
    "registry:2.8.2"
    "flannel/flannel:v0.22.0"
    "flannel/flannel-cni-plugin:v1.1.2"
)

for image in "${images[@]}"; do
    docker pull "$image"
    image_name=$(echo "$image" | sed 's|/|_|g' | sed 's/:/_/g')
    docker save -o "${image_name}.tar" "$image"
done

----------------------------------------

TITLE: Defining Production PriorityClass in Kubernetes YAML
DESCRIPTION: This YAML snippet defines a PriorityClass for production pods with the highest priority value of 4000000 and a description indicating its intended use.

LANGUAGE: yaml
CODE:
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: prod-pc
value: 4000000
globalDefault: false
description: >-
  (Optional) This priority class should only be used for all prod pods.

----------------------------------------

TITLE: Importing Kubernetes Core API TypedLocalObjectReference
DESCRIPTION: Import statement for accessing the TypedLocalObjectReference type from the Kubernetes core API package.

LANGUAGE: go
CODE:
import "k8s.io/api/core/v1"

----------------------------------------

TITLE: Configuring CSIInlineVolume Feature Gate Stages in YAML
DESCRIPTION: Defines the lifecycle stages of the CSIInlineVolume feature gate, including alpha, beta, and stable stages with their respective version ranges and default values. The feature is marked as removed.

LANGUAGE: yaml
CODE:
---
# Removed from Kubernetes
title: CSIInlineVolume
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.15"
    toVersion: "1.15"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.16"
    toVersion: "1.24"    
  - stage: stable
    defaultValue: true
    fromVersion: "1.25"
    toVersion: "1.26"    

removed: true
---
Enable CSI Inline volumes support for pods.

----------------------------------------

TITLE: Limiting HorizontalPodAutoscaler Scale Down Rate
DESCRIPTION: Example YAML for limiting the scale down rate to 10% per minute in a HorizontalPodAutoscaler.

LANGUAGE: yaml
CODE:
behavior:
  scaleDown:
    policies:
    - type: Percent
      value: 10
      periodSeconds: 60

----------------------------------------

TITLE: Listing Kubeadm Images Command
DESCRIPTION: Command to list all container images that kubeadm will use. This command accepts various flags to customize the image repository, Kubernetes version, and output format.

LANGUAGE: bash
CODE:
kubeadm config images list [flags]

----------------------------------------

TITLE: Defining StrictCostEnforcementForWebhooks Feature Gate Stages in YAML
DESCRIPTION: This YAML configuration defines the stages and default values for the StrictCostEnforcementForWebhooks feature gate. It specifies a beta stage in version 1.31 with a default value of false, and a stable stage from version 1.32 onwards with a default value of true.

LANGUAGE: yaml
CODE:
title: StrictCostEnforcementForWebhooks
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: beta
    defaultValue: false
    fromVersion: "1.31"
    toVersion: "1.31"
  - stage: stable
    defaultValue: true
    fromVersion: "1.32"

----------------------------------------

TITLE: Creating and Enabling Linux Swap File
DESCRIPTION: Bash commands for creating a 4GiB swap file, setting permissions, formatting it as swap, and enabling it.

LANGUAGE: bash
CODE:
dd if=/dev/zero of=/swapfile bs=128M count=32
chmod 600 /swapfile
mkswap /swapfile
swapon /swapfile
swapon -s # enable the swap file only until this node is rebooted

----------------------------------------

TITLE: Adding Kubernetes and CRI-O Repositories for DEB-based Distributions
DESCRIPTION: These commands add the Kubernetes and CRI-O repositories to the system's package manager configuration for DEB-based distributions. It includes installing prerequisites, downloading and importing GPG keys, and adding the repository definitions.

LANGUAGE: bash
CODE:
apt-get update
apt-get install -y software-properties-common curl

LANGUAGE: bash
CODE:
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key |
    gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /" |
    tee /etc/apt/sources.list.d/kubernetes.list

LANGUAGE: bash
CODE:
curl -fsSL https://pkgs.k8s.io/addons:/cri-o:/prerelease:/main/deb/Release.key |
    gpg --dearmor -o /etc/apt/keyrings/cri-o-apt-keyring.gpg
echo "deb [signed-by=/etc/apt/keyrings/cri-o-apt-keyring.gpg] https://pkgs.k8s.io/addons:/cri-o:/prerelease:/main/deb/ /" |
    tee /etc/apt/sources.list.d/cri-o.list

----------------------------------------

TITLE: Defining Pod with Affinity and Anti-Affinity in Kubernetes
DESCRIPTION: This YAML defines a pod spec with both affinity and anti-affinity rules to control pod placement based on other pod labels.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: with-pod-affinity
spec:
  affinity:
    podAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
          - key: security
            operator: In
            values:
            - S1
        topologyKey: topology.kubernetes.io/zone
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: security
              operator: In
              values:
              - S2
          topologyKey: topology.kubernetes.io/zone
  containers:
  - name: with-pod-affinity
    image: k8s.gcr.io/pause:2.0

----------------------------------------

TITLE: Resetting Failed Master Replica
DESCRIPTION: Shows how to reset and reattach a failed master replica to the cluster by starting the stopped instance using Google Cloud CLI.

LANGUAGE: bash
CODE:
gcloud compute instances start kubernetes-master-2d4 --zone=europe-west1-c

----------------------------------------

TITLE: Pod Controller Initial Reconcile Implementation
DESCRIPTION: Initial scaffold of the Pod controller's Reconcile method provided by Operator SDK

LANGUAGE: go
CODE:
func (r *PodReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {
    _ = r.Log.WithValues("pod", req.NamespacedName)

    // your logic here

    return ctrl.Result{}, nil
}

----------------------------------------

TITLE: Deleting MySQL Deployment and Resources in Kubernetes
DESCRIPTION: These commands delete the MySQL Deployment, Service, PersistentVolumeClaim, and PersistentVolume from the Kubernetes cluster.

LANGUAGE: shell
CODE:
kubectl delete deployment,svc mysql
kubectl delete pvc mysql-pv-claim
kubectl delete pv mysql-pv-volume

----------------------------------------

TITLE: Installing Python Dependencies
DESCRIPTION: Command to install required Python packages for the documentation scripts

LANGUAGE: bash
CODE:
python3 -m pip install -r requirements.txt

----------------------------------------

TITLE: Creating Policy Binding and Test Namespace
DESCRIPTION: Shell commands to create a ValidatingAdmissionPolicyBinding and set up a test namespace with policy enforcement.

LANGUAGE: shell
CODE:
# Create a binding
kubectl apply -f - <<EOT
apiVersion: admissionregistration.k8s.io/v1alpha1
kind: ValidatingAdmissionPolicyBinding
metadata:
  name: c0017-binding
spec:
  policyName: kubescape-c-0017-deny-mutable-container-filesystem
  matchResources:
    namespaceSelector:
      matchLabels:
        policy: enforced
EOT

# Create a namespace for running the example
kubectl create namespace policy-example
kubectl label namespace policy-example 'policy=enforced'

----------------------------------------

TITLE: YAML Configuration for UnauthenticatedHTTP2DOSMitigation Feature Gate
DESCRIPTION: YAML configuration defining the feature gate stages and default values across different Kubernetes versions. The feature was introduced in v1.28 as beta (defaultValue: false) and modified in v1.29 (defaultValue: true).

LANGUAGE: yaml
CODE:
title: UnauthenticatedHTTP2DOSMitigation
content_type: feature_gate
_build:
  list: never
  render: false
 
stages:
  - stage: beta
    defaultValue: false
    fromVersion: "1.28"
    toVersion: "1.28"
  - stage: beta
    defaultValue: true
    fromVersion: "1.29"

----------------------------------------

TITLE: Upload Kubelet Config Command Usage
DESCRIPTION: Basic command syntax for uploading kubelet configuration using kubeadm.

LANGUAGE: bash
CODE:
kubeadm init phase upload-config kubelet [flags]

----------------------------------------

TITLE: Container Interaction Commands
DESCRIPTION: Console commands to interact with the container before checkpointing, including creating a test file and storing a secret in memory

LANGUAGE: console
CODE:
$ kubectl get pod counters --template '{{.status.podIP}}'
10.88.0.25
$ curl 10.88.0.25:8088/create?test-file
$ curl 10.88.0.25:8088/secret?RANDOM_1432_KEY
$ curl 10.88.0.25:8088

----------------------------------------

TITLE: Defining StatefulSetAutoDeletePVC Feature Gate Stages in YAML
DESCRIPTION: YAML configuration defining the feature gate progression from alpha through beta to stable, including version ranges and default values for each stage.

LANGUAGE: yaml
CODE:
stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.23"
    toVersion: "1.26"
  - stage: beta
    defaultValue: true
    fromVersion: "1.27"
    toVersion: "1.31"
  - stage: stable
    defaultValue: true
    fromVersion: "1.32"

----------------------------------------

TITLE: Generating Scheduler Kubeconfig with Kubeadm in Bash
DESCRIPTION: This command generates the kubeconfig file for the Kubernetes scheduler and saves it to the scheduler.conf file. It is part of the kubeadm init process and can be run independently for specific configuration tasks.

LANGUAGE: bash
CODE:
kubeadm init phase kubeconfig scheduler [flags]

----------------------------------------

TITLE: Using kubectl to Describe a Pod
DESCRIPTION: Example of using kubectl to display information about a pod in a specific namespace.

LANGUAGE: shell
CODE:
kubectl describe pod <pod-name> -n <namespace>

----------------------------------------

TITLE: Using kubectl to Describe a Pod
DESCRIPTION: Example of using kubectl to display information about a pod in a specific namespace.

LANGUAGE: shell
CODE:
kubectl describe pod <pod-name> -n <namespace>

----------------------------------------

TITLE: Running Leader Elector Container in Kubernetes
DESCRIPTION: Commands to create and manage a leader election set with 3 replicas using the leader-elector container image.

LANGUAGE: bash
CODE:
$ kubectl run leader-elector --image=gcr.io/google_containers/leader-elector:0.4 --replicas=3 -- --election=example

LANGUAGE: bash
CODE:
$ kubectl get pods

LANGUAGE: bash
CODE:
$ kubectl logs -f ${name}

LANGUAGE: bash
CODE:
$ kubectl get endpoints example -o yaml

LANGUAGE: bash
CODE:
$ kubectl delete pods (leader-pod-name)

----------------------------------------

TITLE: Updating Container Images with kubectl set image
DESCRIPTION: Examples of using the kubectl set image command to update container images for various Kubernetes resources.

LANGUAGE: bash
CODE:
# Set a deployment's nginx container image to 'nginx:1.9.1', and its busybox container image to 'busybox'
kubectl set image deployment/nginx busybox=busybox nginx=nginx:1.9.1

# Update all deployments' and rc's nginx container's image to 'nginx:1.9.1'
kubectl set image deployments,rc nginx=nginx:1.9.1 --all

# Update image of all containers of daemonset abc to 'nginx:1.9.1'
kubectl set image daemonset abc *=nginx:1.9.1

# Print result (in yaml format) of updating nginx container image from local file, without hitting the server
kubectl set image -f path/to/file.yaml nginx=nginx:1.9.1 --local -o yaml

----------------------------------------

TITLE: Sourcing kubectl Completion Script in Bash Profile
DESCRIPTION: This command adds the kubectl completion script to the Bash profile. It enables kubectl autocompletion in all shell sessions.

LANGUAGE: bash
CODE:
echo 'source <(kubectl completion bash)' >>~/.bash_profile

----------------------------------------

TITLE: Pulling Security Profile from OCI Registry
DESCRIPTION: Console output showing how to pull and verify a security profile from an OCI registry using the spoc CLI tool, including signature verification.

LANGUAGE: console
CODE:
> spoc pull ghcr.io/security-profiles/runc:v1.1.5
16:32:29.795597 Pulling profile from: ghcr.io/security-profiles/runc:v1.1.5
16:32:29.795610 Verifying signature

Verification for ghcr.io/security-profiles/runc:v1.1.5 --
The following checks were performed on each of these signatures:
  - Existence of the claims in the transparency log was verified offline
  - The code-signing certificate was verified using trusted certificate authority certificates

[{"critical":{"identity":{"docker-reference":"ghcr.io/security-profiles/runc"},…}}]
16:32:33.208695 Creating file store in: /tmp/pull-3199397214
16:32:33.208713 Verifying reference: ghcr.io/security-profiles/runc:v1.1.5
16:32:33.208718 Creating repository for ghcr.io/security-profiles/runc
16:32:33.208742 Using tag: v1.1.5
16:32:33.208743 Copying profile from repository
16:32:34.119652 Reading profile
16:32:34.119677 Trying to unmarshal seccomp profile
16:32:34.120114 Got SeccompProfile: runc-v1.1.5
16:32:34.120119 Saving profile in: /tmp/profile.yaml

----------------------------------------

TITLE: Patching CoreDNS Deployment
DESCRIPTION: Bash command to modify CoreDNS deployment to allow privilege escalation, which may be needed when running with SELinux.

LANGUAGE: bash
CODE:
kubectl -n kube-system get deployment coredns -o yaml | \
  sed 's/allowPrivilegeEscalation: false/allowPrivilegeEscalation: true/g' | \
  kubectl apply -f -

----------------------------------------

TITLE: YAML Configuration for LegacyServiceAccountTokenCleanUp Feature Gate
DESCRIPTION: YAML configuration defining the feature gate stages and properties for LegacyServiceAccountTokenCleanUp. Specifies the progression through alpha, beta, and stable stages with corresponding version ranges and default values.

LANGUAGE: yaml
CODE:
title: LegacyServiceAccountTokenCleanUp
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha
    defaultValue: false
    fromVersion: "1.28"
    toVersion: "1.28"
  - stage: beta
    defaultValue: true
    fromVersion: "1.29"
    toVersion: "1.29"
  - stage: stable
    defaultValue: true
    fromVersion: "1.30"
    toVersion: "1.31"

removed: true

----------------------------------------

TITLE: Retrieving PersistentVolume YAML in Kubernetes
DESCRIPTION: This command retrieves the YAML representation of a PersistentVolume (PV) by its name. It's used to demonstrate the new finalizer added in Kubernetes 1.23 to prevent PV leaks.

LANGUAGE: bash
CODE:
kubectl get pv pvc-a7b7e3ba-f837-45ba-b243-dec7d8aaed53 -o yaml

----------------------------------------

TITLE: Implementing CRD Validation Rules with CEL in YAML
DESCRIPTION: Example of defining validation rules in a CustomResourceDefinition using Common Expression Language (CEL). The rule ensures that replica count stays within specified minimum and maximum bounds.

LANGUAGE: yaml
CODE:
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
    ...
    openAPIV3Schema:
      type: object
      properties:
        spec:
          type: object
          x-kubernetes-validations:
            - rule: "self.minReplicas <= self.replicas && self.replicas <= self.maxReplicas"
              message: "replicas should be in the range minReplicas..maxReplicas."
          properties:
            replicas:
              type: integer
            ...

----------------------------------------

TITLE: Simulating Master Replica Failure
DESCRIPTION: Demonstrates how to simulate a failure of one of the master replicas by executing the halt command on the specified node. This helps verify cluster resilience.

LANGUAGE: bash
CODE:
gcloud compute ssh kubernetes-master-2d4 --zone=europe-west1-c

sudo halt

----------------------------------------

TITLE: Viewing the Generated Seccomp Profile
DESCRIPTION: This YAML output shows the contents of the seccomp profile generated by spoc, which includes allowed syscalls and architecture specifications.

LANGUAGE: yaml
CODE:
apiVersion: security-profiles-operator.x-k8s.io/v1beta1
kind: SeccompProfile
metadata:
  creationTimestamp: null
  name: main
spec:
  architectures:
    - SCMP_ARCH_X86_64
  defaultAction: SCMP_ACT_ERRNO
  syscalls:
    - action: SCMP_ACT_ALLOW
      names:
        - access
        - arch_prctl
        - brk
        - …
        - uname
        - …
status: {}

----------------------------------------

TITLE: 기본 kubectl 명령 구문
DESCRIPTION: kubectl 명령의 기본 구문을 보여준다.

LANGUAGE: shell
CODE:
kubectl [command] [TYPE] [NAME] [flags]

----------------------------------------

TITLE: Defining MetricValue Resource Type
DESCRIPTION: Specifies the structure for metric values associated with Kubernetes objects. Includes reference to the described object, metric identifier, timestamp, window duration, and metric value.

LANGUAGE: yaml
CODE:
apiVersion: custom.metrics.k8s.io/v1beta2
kind: MetricValue
describedObject: ObjectReference
metric: MetricIdentifier
timestamp: Time
windowSeconds: int64
value: Quantity

----------------------------------------

TITLE: Installing Example Populator in Kubernetes
DESCRIPTION: Shell commands to install the example hello-populator and its CRD in a Kubernetes cluster.

LANGUAGE: shell
CODE:
kubectl apply -f https://raw.githubusercontent.com/kubernetes-csi/lib-volume-populator/v1.0.1/example/hello-populator/crd.yaml
kubectl apply -f https://raw.githubusercontent.com/kubernetes-csi/lib-volume-populator/87a47467b86052819e9ad13d15036d65b9a32fbb/example/hello-populator/deploy.yaml

----------------------------------------

TITLE: Defining StructuredAuthorizationConfiguration Feature Gate Stages
DESCRIPTION: YAML configuration defining the feature gate stages for StructuredAuthorizationConfiguration, including alpha, beta, and stable phases with their respective version ranges and default values.

LANGUAGE: yaml
CODE:
title: StructuredAuthorizationConfiguration
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha
    defaultValue: false
    fromVersion: "1.29"
    toVersion: "1.29"
  - stage: beta
    defaultValue: true
    fromVersion: "1.30"
    toVersion: "1.31"
  - stage: stable
    defaultValue: true
    fromVersion: "1.32"

----------------------------------------

TITLE: Infrastructure Status Response Example
DESCRIPTION: Example YAML showing the status response after infrastructure provisioning, including EC2, IAM and VPC details.

LANGUAGE: yaml
CODE:
apiVersion: extensions.gardener.cloud/v1alpha1
kind: Infrastructure
metadata:
  name: infrastructure
  namespace: shoot--foobar--aws
spec: ...
status:
  lastOperation:
    type: Reconcile
    state: Succeeded
  providerStatus:
    apiVersion: aws.provider.extensions.gardener.cloud/v1alpha1
    kind: InfrastructureStatus
    ec2:
      keyName: shoot--foobar--aws-ssh-publickey
    iam:
      instanceProfiles:
      - name: shoot--foobar--aws-nodes
        purpose: nodes
      roles:
      - arn: "arn:aws:iam::<accountID>:role/shoot..."
        purpose: nodes
    vpc:
      id: vpc-0815
      securityGroups:
      - id: sg-0246
        purpose: nodes
      subnets:
      - id: subnet-1234
        purpose: nodes
        zone: eu-west-1b
      - id: subnet-5678
        purpose: public
        zone: eu-west-1b

----------------------------------------

TITLE: Creating GCP Disk Snapshot
DESCRIPTION: Command to create a snapshot of a Google Cloud Platform disk using gcloud CLI.

LANGUAGE: terminal
CODE:
gcloud compute disks snapshot <cloud-disk-id> --project=<gcp-project-id> --snapshot-names=<set-new-snapshot-name> --zone=<availability-zone> --storage-location=<region>

----------------------------------------

TITLE: NodeDisruptionExclusion Feature Gate Configuration
DESCRIPTION: YAML configuration defining the lifecycle stages of the NodeDisruptionExclusion feature gate in Kubernetes. Shows progression from alpha (v1.16) through beta (v1.19) to stable (v1.21) before removal in v1.22.

LANGUAGE: yaml
CODE:
stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.16"
    toVersion: "1.18"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.19"
    toVersion: "1.20"
  - stage: stable
    defaultValue: true
    fromVersion: "1.21"
    toVersion: "1.22"

removed: true

----------------------------------------

TITLE: Singleton Object Name Validation with CEL
DESCRIPTION: CEL expression to validate that an object's name matches a specific value (making it a singleton).

LANGUAGE: CEL
CODE:
self.metadata.name == 'singleton'

----------------------------------------

TITLE: Uploading Kubeadm Configuration Command
DESCRIPTION: Command to upload the kubeadm ClusterConfiguration to a ConfigMap. Can be run with additional flags for configuration file path, dry-run mode, and custom kubeconfig location.

LANGUAGE: bash
CODE:
kubeadm upgrade apply phase upload-config kubeadm [flags]

----------------------------------------

TITLE: Finding Pull Requests Usage - Python
DESCRIPTION: Help output for find_pr.py script that shows how to find GitHub pull requests affecting specific files

LANGUAGE: bash
CODE:
$ ./find_pr.py --help
Usage: find_pr.py [OPTIONS] PATH

  Find what GitHub pull requests touch a given file.

  ex: ./find_pr.py --tags "language/fr" "content/fr/_index.html"

Options:
  --tags TEXT          Tags of PullRequest (Can be passed multiple times)
  --token TEXT         GitHub API token. (Default env variable GITHUB_TOKEN)
  --last-n-pr INTEGER  Last n-th PullRequests
  --help               Show this message and exit.

----------------------------------------

TITLE: Sourcing kubectl Completion Script in Bash Profile
DESCRIPTION: This command adds the kubectl completion script to the Bash profile. It enables kubectl autocompletion in all shell sessions.

LANGUAGE: bash
CODE:
echo 'source <(kubectl completion bash)' >>~/.bash_profile

----------------------------------------

TITLE: Deploying Redis Cluster with Helm in Source Cluster
DESCRIPTION: Uses Helm to deploy a Redis cluster with 6 replicas in the source Kubernetes cluster.

LANGUAGE: bash
CODE:
helm repo add bitnami https://charts.bitnami.com/bitnami
helm install redis --namespace kep-3335 \
  bitnami/redis-cluster \
  --set persistence.size=1Gi \
  --set cluster.nodes=6

----------------------------------------

TITLE: Markdown Frontmatter Configuration
DESCRIPTION: YAML frontmatter block defining the page title and navigation weight for a Kubernetes documentation page.

LANGUAGE: markdown
CODE:
---
title: Kubernetes Issues and Security
weight: 70
---

----------------------------------------

TITLE: Defining ExpandPersistentVolumes Feature Gate Stages in YAML
DESCRIPTION: This YAML snippet defines the lifecycle stages of the ExpandPersistentVolumes feature gate in Kubernetes. It specifies the alpha, beta, and stable stages with their respective version ranges and default values.

LANGUAGE: yaml
CODE:
stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.8"
    toVersion: "1.10"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.11"
    toVersion: "1.23"    
  - stage: stable
    defaultValue: true
    fromVersion: "1.24"
    toVersion: "1.26"    

removed: true

----------------------------------------

TITLE: Configuring Headless Kubernetes Setup in YAML
DESCRIPTION: This YAML configuration sets the 'headless' property to true, indicating a headless Kubernetes setup. This is typically used in static site generators or content management systems to denote pages that should be processed but not rendered as standalone pages.

LANGUAGE: yaml
CODE:
---
headless: true
---

----------------------------------------

TITLE: Kubeadm Configuration Upload Example
DESCRIPTION: Example showing how to upload cluster configuration using a specific configuration file.

LANGUAGE: bash
CODE:
kubeadm init phase upload-config kubeadm --config=myConfig.yaml

----------------------------------------

TITLE: Defining CredentialProviderResponse with CacheKeyType in JSON for Kubelet Credential Provider
DESCRIPTION: This JSON snippet shows a CredentialProviderResponse with a cacheKeyType field, which specifies the scope of cached credential validity.

LANGUAGE: json
CODE:
{
  "apiVersion": "kubelet.k8s.io/v1",
  "kind": "CredentialProviderResponse",
  "auth": {
    "cacheKeyType": "Registry",
    "private-registry.io/my-app": {
      "username": "exampleuser",
      "password": "token12345"
    }
  }
}

----------------------------------------

TITLE: KMS v2 Encrypt Request Flow Diagram
DESCRIPTION: Mermaid sequence diagram showing the encryption flow between user, kube-apiserver, KMS plugin, and external KMS for resource encryption.

LANGUAGE: mermaid
CODE:
%%{init:{"theme":"neutral", "sequence": {"mirrorActors":true}, "themeVariables": {"actorBkg":"royalblue","actorTextColor":"white"}}}%%

sequenceDiagram
    participant user
    participant kube_api_server
    participant kms_plugin
    participant external_kms
    alt Generate DEK at startup
        Note over kube_api_server,external_kms: Refer to Generate Data Encryption Key (DEK) diagram for details
    end
    user->>kube_api_server: create/update resource that's to be encrypted
    kube_api_server->>kube_api_server: encrypt resource with DEK
    kube_api_server->>etcd: store encrypted object

----------------------------------------

TITLE: Starting Local Kubernetes Cluster with In-place Pod Vertical Scaling
DESCRIPTION: Commands to start a local Kubernetes cluster with the InPlacePodVerticalScaling feature gate enabled. Shows the initialization process and configuration steps for using the cluster.

LANGUAGE: bash
CODE:
root@vbuild:~/go/src/k8s.io/kubernetes# FEATURE_GATES=InPlacePodVerticalScaling=true ./hack/local-up-cluster.sh
go version go1.20.2 linux/arm64
+++ [0320 13:52:02] Building go targets for linux/arm64
    k8s.io/kubernetes/cmd/kubectl (static)
    k8s.io/kubernetes/cmd/kube-apiserver (static)
    k8s.io/kubernetes/cmd/kube-controller-manager (static)
    k8s.io/kubernetes/cmd/cloud-controller-manager (non-static)
    k8s.io/kubernetes/cmd/kubelet (non-static)
...
...
Logs:
  /tmp/etcd.log
  /tmp/kube-apiserver.log
  /tmp/kube-controller-manager.log

  /tmp/kube-proxy.log
  /tmp/kube-scheduler.log
  /tmp/kubelet.log

To start using your cluster, you can open up another terminal/tab and run:

  export KUBECONFIG=/var/run/kubernetes/admin.kubeconfig
  cluster/kubectl.sh

Alternatively, you can write to the default kubeconfig:

  export KUBERNETES_PROVIDER=local

  cluster/kubectl.sh config set-cluster local --server=https://localhost:6443 --certificate-authority=/var/run/kubernetes/server-ca.crt
  cluster/kubectl.sh config set-credentials myself --client-key=/var/run/kubernetes/client-admin.key --client-certificate=/var/run/kubernetes/client-admin.crt
  cluster/kubectl.sh config set-context local --cluster=local --user=myself
  cluster/kubectl.sh config use-context local
  cluster/kubectl.sh

----------------------------------------

TITLE: Querying Non-Ready Pods with PromQL
DESCRIPTION: A PromQL query that returns the count of pods that are not in ready state, grouped by namespace and pod.

LANGUAGE: promql
CODE:
count(kube_pod_status_ready{condition="false"}) by (namespace, pod)

----------------------------------------

TITLE: Configuring HTTPRoute Timeouts in Gateway API
DESCRIPTION: This YAML snippet demonstrates how to set request and backendRequest timeouts in an HTTPRoute. It defines a 10-second request timeout and a 2-second backendRequest timeout for a specific path prefix.

LANGUAGE: yaml
CODE:
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: timeout-example
spec:
  parentRefs:
  - name: example-gateway
  rules:
  - matches:
    - path:
        type: PathPrefix
        value: /timeout
    timeouts:
      request: 10s
      backendRequest: 2s
    backendRefs:
    - name: timeout-svc
      port: 8080

----------------------------------------

TITLE: HTTP GET Request - Read LimitRange
DESCRIPTION: HTTP request format for retrieving a specific LimitRange resource by name from a namespace

LANGUAGE: http
CODE:
GET /api/v1/namespaces/{namespace}/limitranges/{name}

----------------------------------------

TITLE: Configuring CSI Driver for End-to-End Testing
DESCRIPTION: YAML configuration file that defines the CSI driver capabilities and settings for end-to-end testing, including storage class, snapshot class, and driver capabilities.

LANGUAGE: yaml
CODE:
StorageClass:
  FromName: true
SnapshotClass:
  FromName: true
DriverInfo:
  Name: hostpath.csi.k8s.io
  Capabilities:
    block: true
    controllerExpansion: true
    exec: true
    multipods: true
    persistence: true
    pvcDataSource: true
    snapshotDataSource: true
InlineVolumes:
- Attributes: {}

----------------------------------------

TITLE: Describing MySQL PersistentVolumeClaim in Kubernetes
DESCRIPTION: This command displays detailed information about the MySQL PersistentVolumeClaim in the Kubernetes cluster.

LANGUAGE: shell
CODE:
kubectl describe pvc mysql-pv-claim

----------------------------------------

TITLE: Adding Out-of-Service Taint for Node Shutdown in Kubernetes
DESCRIPTION: Command to manually add an out-of-service taint to a Kubernetes node that has shutdown unexpectedly. This taint triggers pods to be forcefully deleted and allows persistent volumes to be detached, enabling workload migration to other nodes.

LANGUAGE: bash
CODE:
kubectl taint nodes <node-name> node.kubernetes.io/out-of-service=nodeshutdown:NoExecute

----------------------------------------

TITLE: HTTP DELETE Request - Delete ResourceClaimTemplate
DESCRIPTION: HTTP request format for deleting a ResourceClaimTemplate resource.

LANGUAGE: http
CODE:
DELETE /apis/resource.k8s.io/v1beta1/namespaces/{namespace}/resourceclaimtemplates/{name}

----------------------------------------

TITLE: Defining EnableAggregatedDiscoveryTimeout Feature Gate in YAML
DESCRIPTION: YAML configuration for the EnableAggregatedDiscoveryTimeout feature gate, specifying its deprecation timeline and removal status.

LANGUAGE: yaml
CODE:
# Removed from Kubernetes
title: EnableAggregatedDiscoveryTimeout
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: deprecated
    defaultValue: true
    fromVersion: "1.16"
    toVersion: "1.17"

removed: true

----------------------------------------

TITLE: Installing Gloo CLI Tool
DESCRIPTION: Commands to download and install the glooctl command line tool for managing Gloo.

LANGUAGE: bash
CODE:
curl -sL https://run.solo.io/gloo/install | sh
export PATH=$HOME/.gloo/bin:$PATH

----------------------------------------

TITLE: Role Binding Subject Update Examples
DESCRIPTION: Examples demonstrating how to update cluster role bindings and role bindings with different subjects including service accounts, users, and groups.

LANGUAGE: bash
CODE:
  # Update a cluster role binding for serviceaccount1
  kubectl set subject clusterrolebinding admin --serviceaccount=namespace:serviceaccount1
  
  # Update a role binding for user1, user2, and group1
  kubectl set subject rolebinding admin --user=user1 --user=user2 --group=group1
  
  # Print the result (in YAML format) of updating rolebinding subjects from a local, without hitting the server
  kubectl create rolebinding admin --role=admin --user=admin -o yaml --dry-run=client | kubectl set subject --local -f - --user=foo -o yaml

----------------------------------------

TITLE: Scaling a StatefulSet in Kubernetes
DESCRIPTION: This command scales the StatefulSet named 'web' to 5 replicas.

LANGUAGE: shell
CODE:
kubectl scale sts web --replicas=5

----------------------------------------

TITLE: Custom Resource Definition for Replica Limits in YAML
DESCRIPTION: Defines a custom resource that specifies the maximum number of replicas allowed for deployments in the production environment.

LANGUAGE: yaml
CODE:
apiVersion: rules.example.com/v1
kind: ReplicaLimit
metadata:
  name: "demo-params-production.example.com"
maxReplicas: 1000

----------------------------------------

TITLE: Sequence Diagram for KMS v2 Encrypt Request Flow
DESCRIPTION: Mermaid sequence diagram showing the interaction flow between components during an encryption request in KMS v2.

LANGUAGE: mermaid
CODE:
source - https://mermaid.ink/img/pako:eNrNVD1v2zAQ_SsEC0GLkxgt2kEIvEQeCo8tOgkoTuTJIiyRypFMIwj67yUlxx-w0CLoUg0a7t29e3eP5MCFkcgzniSD0splbEhdjS2mGUtLsJiu2Bz4AaSgbNAGZGBpR6oF6p9MYyjmfvj08YvAzzH9CH3HV3eGq6qaqK6C6_U6HccxSQpt8dmjFpgr2BO0hWbh64CcEqoD7Rg6IW-jB18idMoivSAtwK3tGr9XeoHv1SFpaELKDF5R3W02p9qMBWHUd45RFGndnA-NY94qvWcH7FmtkIBE3c_gRPhGsEyWb3fsl3I1a4yAhu22u-XSC6Hn4lPNTEHYGofXHBd1iwJQ_q3zRY0AUeM7Ki93mQV5zpO-WKPtTHCcPZb0sGFDwYMnNVI8HAXPWMEfz53CmjYFX8Ul_1RyAs_Tsq_5BM5EBQetjQOnAnskCsxB1X1UQxod2ntlHibpdwc83LQ6DRU4x3GeDJugM5D-2eokYcITYThXJdbwogy9w8z8H23M_xcbbg04rVHL5VsWr3XGrDOEt8JAy6Ux45-veIvUgpLh8RpipODTOzUrl1iBb8IYhR5Dqu8kONxKFfrwrIJg6oqDd-ZbrwXPHHl8Szo-QMes8Tffb72O

----------------------------------------

TITLE: Setting up secure proxy to Zeppelin
DESCRIPTION: Establishes a secure port-forward from local machine to Zeppelin pod in the cluster.

LANGUAGE: bash
CODE:
$ kubectl port-forward zeppelin-controller-t1njl 8080:8080

----------------------------------------

TITLE: Converting Checkpoint to Container Image (Shell)
DESCRIPTION: Shell commands using buildah to convert a local checkpoint archive into a container image that can be pushed to a registry for restoration within Kubernetes.

LANGUAGE: shell
CODE:
newcontainer=$(buildah from scratch)
buildah add $newcontainer /var/lib/kubelet/checkpoints/checkpoint-<pod-name>_<namespace-name>-<container-name>-<timestamp>.tar /
buildah config --annotation=io.kubernetes.cri-o.annotations.checkpoint.name=<container-name> $newcontainer
buildah commit $newcontainer checkpoint-image:latest
buildah rm $newcontainer

----------------------------------------

TITLE: Generating kubeadm certificate key
DESCRIPTION: Command to generate a new certificate key for kubeadm.

LANGUAGE: bash
CODE:
kubeadm certs certificate-key

----------------------------------------

TITLE: Importing ObjectMeta from Kubernetes API
DESCRIPTION: This snippet shows how to import the ObjectMeta struct from the Kubernetes API package.

LANGUAGE: go
CODE:
import "k8s.io/apimachinery/pkg/apis/meta/v1"

----------------------------------------

TITLE: Listing all Kubernetes objects in MicroK8s cluster
DESCRIPTION: This command retrieves a complete list of all Kubernetes objects across all namespaces in the MicroK8s cluster.

LANGUAGE: shell
CODE:
kubectl get all --all-namespaces

----------------------------------------

TITLE: Configuring WindowsHostProcessContainers Feature Gate in Kubernetes YAML
DESCRIPTION: This YAML configuration defines the stages and default values for the WindowsHostProcessContainers feature gate in Kubernetes. It specifies the feature's progression from alpha to stable across different Kubernetes versions.

LANGUAGE: yaml
CODE:
---
title: WindowsHostProcessContainers
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.22"
    toVersion: "1.22"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.23"
    toVersion: "1.25"
  - stage: stable
    defaultValue: true
    fromVersion: "1.26"
    toVersion: "1.27"

removed: true
---
Enables support for Windows HostProcess containers.

----------------------------------------

TITLE: Create TokenRequest HTTP Request
DESCRIPTION: HTTP POST request format for creating a token for a ServiceAccount, including the endpoint path and required parameters.

LANGUAGE: http
CODE:
POST /api/v1/namespaces/{namespace}/serviceaccounts/{name}/token

----------------------------------------

TITLE: Creating Kubernetes ConfigMap for Admissions Control
DESCRIPTION: These commands create a Kubernetes ConfigMap to store the QA signer's public key for admissions control. The ConfigMap is then retrieved to verify its contents.

LANGUAGE: bash
CODE:
kubectl create configmap image-signature-webhook \  
  --from-file ${GPG\_KEY\_ID}.pub

kubectl get configmap image-signature-webhook -o yaml

----------------------------------------

TITLE: Creating Service Account Token
DESCRIPTION: This shell script creates a token for the default service account and uses it to access the Kubernetes API directly without kubectl proxy.

LANGUAGE: shell
CODE:
kubectl apply -f - <<EOF
apiVersion: v1
kind: Secret
metadata:
  name: default-token
  annotations:
    kubernetes.io/service-account.name: default
type: kubernetes.io/service-account-token
EOF

while ! kubectl describe secret default-token | grep -E '^token' >/dev/null; do
  echo "waiting for token..." >&2
  sleep 1
done

APISERVER=$(kubectl config view --minify | grep server | cut -f 2- -d ":" | tr -d " ")
TOKEN=$(kubectl describe secret default-token | grep -E '^token' | cut -f2 -d':' | tr -d " ")

curl $APISERVER/api --header "Authorization: Bearer $TOKEN" --insecure

----------------------------------------

TITLE: PodSecurityPolicy Annotations Example
DESCRIPTION: Example showing the structure of PodSecurityPolicy annotations for security profiles like seccomp and apparmor.

LANGUAGE: yaml
CODE:
metadata:
  annotations:
    seccomp.security.alpha.kubernetes.io/defaultProfileName: "runtime/default"
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: "runtime/default"
    apparmor.security.beta.kubernetes.io/defaultProfileName: "runtime/default"
    apparmor.security.beta.kubernetes.io/allowedProfileNames: "runtime/default"

----------------------------------------

TITLE: Kubeadm Join Command Phases
DESCRIPTION: Lists the execution phases of the kubeadm join command, showing the sequence of operations performed when joining a node to the cluster.

LANGUAGE: bash
CODE:
preflight              Run join pre-flight checks
control-plane-prepare  Prepare the machine for serving a control plane
  /download-certs        Download certificates shared among control-plane nodes from the kubeadm-certs Secret
  /certs                 Generate the certificates for the new control plane components
  /kubeconfig            Generate the kubeconfig for the new control plane components
  /control-plane         Generate the manifests for the new control plane components
kubelet-start          Write kubelet settings, certificates and (re)start the kubelet
control-plane-join     Join a machine as a control plane instance
  /etcd                  Add a new local etcd member
  /mark-control-plane    Mark a node as a control-plane
wait-control-plane     EXPERIMENTAL: Wait for the control plane to start

----------------------------------------

TITLE: Configuring HTTP Routes in Kubernetes Gateway API
DESCRIPTION: Example of an HTTPRoute resource that configures path-based routing for multiple services in the foo namespace, including path matching and forwarding rules.

LANGUAGE: yaml
CODE:
kind: HTTPRoute
apiVersion: networking.x-k8s.io/v1alpha1
metadata:
  name: foo-route
  namespace: foo
  labels:
    gateway: external-https-prod
spec:
  hostnames:
  - "foo.example.com"
  rules:
  - matches:
    - path:
        type: Prefix
        value: /login
    forwardTo:
    - serviceName: foo-auth
      port: 8080
  - matches:
    - path:
        type: Prefix
        value: /home
    forwardTo:
    - serviceName: foo-home
      port: 8080
  - matches:
    - path:
        type: Prefix
        value: /
    forwardTo:
    - serviceName: foo-404
      port: 8080

----------------------------------------

TITLE: Configuring DaemonSet for podresources API Monitoring
DESCRIPTION: Example manifest for deploying a monitoring agent as a DaemonSet that consumes the podresources API. Shows how to mount the podresources socket and configure basic deployment parameters.

LANGUAGE: yaml
CODE:
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: podresources-monitoring-app
  namespace: monitoring
spec:
  selector:
    matchLabels:
      name: podresources-monitoring
  template:
    metadata:
      labels:
        name: podresources-monitoring
    spec:
      containers:
      - args:
        - --podresources-socket=unix:///host-podresources/kubelet.sock
        command:
        - /bin/podresources-monitor
        image: podresources-monitor:latest  # just for an example
        volumeMounts:
        - mountPath: /host-podresources
          name: host-podresources
      serviceAccountName: podresources-monitor
      volumes:
      - hostPath:
          path: /var/lib/kubelet/pod-resources
          type: Directory
        name: host-podresources

----------------------------------------

TITLE: ControllerRevision JSON Example
DESCRIPTION: Example JSON representation of a ControllerRevision with plugin data

LANGUAGE: json
CODE:
{
	"kind":"MyAPIObject",
	"apiVersion":"v1",
	"myPlugin": {
		"kind":"PluginA",
		"aOption":"foo"
	}
}

----------------------------------------

TITLE: kubectl 명령 출력 예시
DESCRIPTION: kubectl get 명령의 출력 예시를 보여준다.

LANGUAGE: shell
CODE:
kubectl get pod web-pod-13je7 -o yaml

----------------------------------------

TITLE: Tools Package for Controller-Gen Dependency
DESCRIPTION: Go build configuration to include controller-gen tool dependency

LANGUAGE: go
CODE:
//go:build tools

package celimmutabilitytutorial

// Force direct dependency on code-generator so that it may be executed with go run
import (
   _ "sigs.k8s.io/controller-tools/cmd/controller-gen"
)

----------------------------------------

TITLE: Defining a Service in Kubernetes YAML
DESCRIPTION: YAML definition for a Service exposing the 'hostnames' Deployment

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Service
metadata:
  labels:
    app: hostnames
  name: hostnames
spec:
  selector:
    app: hostnames
  ports:
  - name: default
    protocol: TCP
    port: 80
    targetPort: 9376

----------------------------------------

TITLE: Checking Job Terminating Pod Count
DESCRIPTION: Shell command to check the number of terminating pods in a Job.

LANGUAGE: shell
CODE:
kubectl get jobs/myjob -o=jsonpath='{.items[*].status.terminating}'

----------------------------------------

TITLE: Deploying and exposing a PHP Apache server in Kubernetes
DESCRIPTION: Creates a deployment running a custom PHP Apache image and exposes it as a service. The deployment requests 500 millicores of CPU and 500MB of memory.

LANGUAGE: bash
CODE:
kubectl run php-apache \
  --image=gcr.io/google_containers/hpa-example \
  --requests=cpu=500m,memory=500M --expose --port=80

----------------------------------------

TITLE: Executing Kubelet Start Command in Kubernetes
DESCRIPTION: This command is used to write kubelet settings, certificates, and (re)start the kubelet in a Kubernetes cluster. It accepts an optional API server endpoint and various flags for configuration.

LANGUAGE: bash
CODE:
kubeadm join phase kubelet-start [api-server-endpoint] [flags]

----------------------------------------

TITLE: Searching Available Helm Charts
DESCRIPTION: Command to search for available Helm charts in the repository showing name, version and description of each chart.

LANGUAGE: bash
CODE:
$ helm search  
NAME VERSION DESCRIPTION stable/drupal 0.3.1 One of the most versatile open source content m...stable/jenkins 0.1.0 A Jenkins Helm chart for Kubernetes. stable/mariadb 0.4.0 Chart for MariaDB stable/mysql 0.1.0 Chart for MySQL stable/redmine 0.3.1 A flexible project management web application. stable/wordpress 0.3.0 Web publishing platform for building blogs and ...

----------------------------------------

TITLE: Configuring and Starting Kubernetes Components
DESCRIPTION: Configures and starts containerd and kubelet services.

LANGUAGE: bash
CODE:
sed -i 's/^disabled_plugins = ["cri"]/#&/' /etc/containerd/config.toml

systemctl enable --now containerd
systemctl enable --now kubelet

----------------------------------------

TITLE: Configuring Session Persistence with BackendLBPolicy
DESCRIPTION: Shows how to implement cookie-based session persistence for a service using BackendLBPolicy, including session timeout and cookie configuration.

LANGUAGE: yaml
CODE:
apiVersion: gateway.networking.k8s.io/v1alpha2
kind: BackendLBPolicy
metadata:
  name: lb-policy
  namespace: foo-ns
spec:
  targetRefs:
  - group: core
    kind: service
    name: foo
  sessionPersistence:
    sessionName: foo-session
    absoluteTimeout: 1h
    idleTimeout: 30m
    type: Cookie
    cookieConfig:
      lifetimeType: Session

----------------------------------------

TITLE: kubectl taint Usage Examples
DESCRIPTION: Examples demonstrating common taint operations including adding, removing, and updating taints on nodes.

LANGUAGE: bash
CODE:
  # Update node 'foo' with a taint with key 'dedicated' and value 'special-user' and effect 'NoSchedule'
  # If a taint with that key and effect already exists, its value is replaced as specified
  kubectl taint nodes foo dedicated=special-user:NoSchedule
  
  # Remove from node 'foo' the taint with key 'dedicated' and effect 'NoSchedule' if one exists
  kubectl taint nodes foo dedicated:NoSchedule-
  
  # Remove from node 'foo' all the taints with key 'dedicated'
  kubectl taint nodes foo dedicated-
  
  # Add a taint with key 'dedicated' on nodes having label myLabel=X
  kubectl taint node -l myLabel=X  dedicated=foo:PreferNoSchedule
  
  # Add to node 'foo' a taint with key 'bar' and no value
  kubectl taint nodes foo bar:NoSchedule

----------------------------------------

TITLE: Defining ZooKeeper PodAntiAffinity
DESCRIPTION: YAML snippet defining PodAntiAffinity rules for ZooKeeper Pods to ensure they are scheduled on different nodes.

LANGUAGE: yaml
CODE:
affinity:
  podAntiAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
            - key: "app"
              operator: In
              values:
                - zk
        topologyKey: "kubernetes.io/hostname"

----------------------------------------

TITLE: Defining RecursiveReadOnlyMounts Feature Gate Stages in YAML
DESCRIPTION: This YAML configuration specifies the stages and default values for the RecursiveReadOnlyMounts feature gate. It defines an alpha stage from version 1.30 to 1.30 with a default value of false, and a beta stage from version 1.31 with a default value of true.

LANGUAGE: yaml
CODE:
title: RecursiveReadOnlyMounts
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha
    defaultValue: false
    fromVersion: "1.30"
    toVersion: "1.30"
  - stage: beta
    defaultValue: true
    fromVersion: "1.31"

----------------------------------------

TITLE: Configuring Resource Type Metric in HPA for Kubernetes
DESCRIPTION: This YAML snippet shows the configuration for the Resource type metric in HorizontalPodAutoscaler. It sets up autoscaling based on the CPU utilization of the entire Pod, targeting an average utilization of 60%.

LANGUAGE: yaml
CODE:
type: Resource
resource:
  name: cpu
  target:
    type: Utilization
    averageUtilization: 60

----------------------------------------

TITLE: Extending Pod Eviction Time with kubectl Plugin
DESCRIPTION: This bash snippet demonstrates how to use the custom kubectl plugin 'pi' to extend the eviction time for a Pod that has been marked for future eviction due to interaction. It shows the command to extend the time and the updated information.

LANGUAGE: bash
CODE:
$ kubectl pi extend test-pod --duration=30m
Successfully extended the termination time of pod/test-pod with a duration=30m
 
$ kubectl pi get test-pod
POD-NAME  INTERACTOR  POD-TTL  EXTENSION  EXTENSION-REQUESTER  EVICTION-TIME
test-pod  username-1  1h0m0s   30m        username-2           2021-09-24 17:30:00 -0800 PST

----------------------------------------

TITLE: Node.js Leader Election Client
DESCRIPTION: Node.js application that connects to a leader election sidecar container to monitor the current leader status and serve it via HTTP.

LANGUAGE: javascript
CODE:
var http = require('http');
var master = {};

var handleRequest = function(request, response) {
  response.writeHead(200);
  response.end("Master is " + master.name);
};

var cb = function(response) {
  var data = '';
  response.on('data', function(piece) { data = data + piece; });
  response.on('end', function() { master = JSON.parse(data); });
};

var updateMaster = function() {
  var req = http.get({host: 'localhost', path: '/', port: 4040}, cb);
  req.on('error', function(e) { console.log('problem with request: ' + e.message); });
  req.end();
};

updateMaster();
setInterval(updateMaster, 5000);

var www = http.createServer(handleRequest);
www.listen(8080);

----------------------------------------

TITLE: Checking Pod Status with PodHasNetwork Condition - Successful Case
DESCRIPTION: Example kubectl output showing a pod with successfully initialized network where PodHasNetwork condition is True.

LANGUAGE: yaml
CODE:
$ kubectl describe pod nginx1
Name:             nginx1
Namespace:        default
...
Conditions:
  Type              Status
  PodHasNetwork     True
  Initialized       True
  Ready             True
  ContainersReady   True
  PodScheduled      True

----------------------------------------

TITLE: Getting ZooKeeper Pod Hostnames
DESCRIPTION: Command to retrieve the hostnames of ZooKeeper Pods.

LANGUAGE: bash
CODE:
for i in 0 1 2; do kubectl exec zk-$i -- hostname; done

----------------------------------------

TITLE: Uploading Certificates with kubeadm
DESCRIPTION: This command uploads control-plane certificates to the Kubernetes cluster. By default, the certificates and encryption key expire after two hours.

LANGUAGE: bash
CODE:
kubeadm init phase upload-certs

----------------------------------------

TITLE: Importing Kubernetes Core API
DESCRIPTION: Import statement for accessing the Kubernetes core/v1 API package which contains the ResourceFieldSelector type.

LANGUAGE: go
CODE:
import "k8s.io/api/core/v1"

----------------------------------------

TITLE: Configuring Kubernetes Service for Blue/Green Deployment
DESCRIPTION: This YAML snippet defines a Kubernetes Service that acts as the public endpoint for the Blue/Green deployment. It uses labels to route traffic to the active environment.

LANGUAGE: yaml
CODE:
kind: Service
apiVersion: v1
metadata:
  name: tomcat-service
  labels:
    app: tomcat
    role: ${TARGET_ROLE}
    env: prod
spec:
  type: LoadBalancer
  selector:
    app: tomcat
    role: ${TARGET_ROLE}
  ports:
    - port: 80
      targetPort: 8080

----------------------------------------

TITLE: Certificate Distribution Script
DESCRIPTION: Shell script for manually copying certificates between control plane nodes when not using --upload-certs.

LANGUAGE: shell
CODE:
USER=ubuntu
CONTROL_PLANE_IPS="10.0.0.7 10.0.0.8"
for host in ${CONTROL_PLANE_IPS}; do
    scp /etc/kubernetes/pki/ca.crt "${USER}"@$host:
    scp /etc/kubernetes/pki/ca.key "${USER}"@$host:
    scp /etc/kubernetes/pki/sa.key "${USER}"@$host:
    scp /etc/kubernetes/pki/sa.pub "${USER}"@$host:
    scp /etc/kubernetes/pki/front-proxy-ca.crt "${USER}"@$host:
    scp /etc/kubernetes/pki/front-proxy-ca.key "${USER}"@$host:
    scp /etc/kubernetes/pki/etcd/ca.crt "${USER}"@$host:etcd-ca.crt
    scp /etc/kubernetes/pki/etcd/ca.key "${USER}"@$host:etcd-ca.key
done

----------------------------------------

TITLE: Creating JSON Patch Operation
DESCRIPTION: Example of creating a JSON patch operation to modify pod security context.

LANGUAGE: go
CODE:
patches = append(patches, patchOperation{
  Op:    "add",
  Path:  "/spec/securityContext/runAsNonRoot",
  Value: true,
})

----------------------------------------

TITLE: Setting Up Unencrypted Swap Space
DESCRIPTION: Bash commands for creating and configuring a 4GiB unencrypted swap file on Linux, including allocation, permission setting, formatting, and activation.

LANGUAGE: bash
CODE:
# Allocate storage and restrict access
fallocate --length 4GiB /swapfile
chmod 600 /swapfile

# Format the swap space
mkswap /swapfile

# Activate the swap space for paging
swapon /swapfile

----------------------------------------

TITLE: Using .env Files for Secret Generation in Kustomize
DESCRIPTION: This snippet demonstrates how to use .env files to define Secrets in a kustomization.yaml file. It shows the YAML configuration that references an .env.secret file for Secret data.

LANGUAGE: yaml
CODE:
secretGenerator:
- name: db-user-pass
  envs:
  - .env.secret

----------------------------------------

TITLE: Defining InPlacePodVerticalScaling Feature Gate in YAML
DESCRIPTION: YAML configuration that defines the InPlacePodVerticalScaling feature gate properties including its stage (alpha), default value (false), and the Kubernetes version it was introduced in (1.27).

LANGUAGE: yaml
CODE:
title: InPlacePodVerticalScaling
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha
    defaultValue: false
    fromVersion: "1.27"

----------------------------------------

TITLE: Checking Deployed PostgreSQL Pods
DESCRIPTION: This command lists the Kubernetes pods created by the StatefulSet, showing their names, status, and age. It's used to verify that the PostgreSQL cluster pods are running correctly.

LANGUAGE: bash
CODE:
kubectl get pod

----------------------------------------

TITLE: Verifying Kubernetes cluster status
DESCRIPTION: This command checks if the Kubernetes cluster is up and running by listing the nodes.

LANGUAGE: shell
CODE:
kubectl get nodes

----------------------------------------

TITLE: Defining CSIMigrationvSphereComplete Feature Gate Configuration in YAML
DESCRIPTION: YAML configuration defining the lifecycle stages and properties of the CSIMigrationvSphereComplete feature gate. Shows beta and deprecation stages, version ranges, and default values.

LANGUAGE: yaml
CODE:
stages:
  - stage: beta 
    defaultValue: false
    fromVersion: "1.19"
    toVersion: "1.21"
  - stage: deprecated
    fromVersion: "1.22"
    toVersion: "1.22"

removed: true

----------------------------------------

TITLE: Markdown Front Matter for Kubernetes Version
DESCRIPTION: Example of specifying Kubernetes version in Markdown front matter for a tutorial.

LANGUAGE: yaml
CODE:
---
title: <your tutorial title here>
min-kubernetes-server-version: v1.8
---

----------------------------------------

TITLE: Running Basic Kubeadm Join Preflight Check
DESCRIPTION: Command syntax for running kubeadm join pre-flight checks with optional API server endpoint and flags.

LANGUAGE: bash
CODE:
kubeadm join phase preflight [api-server-endpoint] [flags]

----------------------------------------

TITLE: Installing CNI Plugins and crictl
DESCRIPTION: Installs CNI plugins and crictl on the air-gapped VM.

LANGUAGE: bash
CODE:
mkdir -p /opt/cni/bin
tar -C /opt/cni/bin -xz -f "cni-plugins-linux-${K8s_ARCH}-v1.3.0.tgz"
tar -C /usr/local/bin-xz -f "crictl-v1.27.0-linux-${K8s_ARCH}.tar.gz"

----------------------------------------

TITLE: Specifying CSI Driver Volume Attributes in YAML
DESCRIPTION: This YAML snippet demonstrates how to specify volume attributes for a CSI driver when defining an inline volume in a Pod spec.

LANGUAGE: yaml
CODE:
      csi:
        driver: block.csi.vendor.example
        volumeAttributes:
          foo: bar

----------------------------------------

TITLE: Configuring InitConfiguration with Patches in YAML
DESCRIPTION: Example of specifying a patches directory in InitConfiguration for customizing component configurations before they are written to disk.

LANGUAGE: yaml
CODE:
apiVersion: kubeadm.k8s.io/v1beta4
kind: InitConfiguration
patches:
  directory: /home/user/somedir

----------------------------------------

TITLE: Prow Commands for PR Management
DESCRIPTION: Essential Prow bot commands used by PR wranglers for managing pull requests, including language labeling, merge method specification, and PR retitling.

LANGUAGE: bash
CODE:
# add English label
/language en

# add squash label to PR if more than one commit
/label tide/merge-method-squash

# retitle a PR via Prow (such as a work-in-progress [WIP] or better detail of PR)
/retitle [WIP] <TITLE>

----------------------------------------

TITLE: Defining a Single Topology Spread Constraint for Pods
DESCRIPTION: This YAML snippet defines a pod spec with a single topology spread constraint to evenly distribute pods across zones.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: mypod
spec:
  topologySpreadConstraints:
    - maxSkew: 1
      topologyKey: zone
      whenUnsatisfiable: DoNotSchedule
      labelSelector:
        matchLabels:
          foo: bar
  containers:
  - name: pause
    image: k8s.gcr.io/pause:3.1

----------------------------------------

TITLE: ImageMaximumGCAge Feature Gate Configuration in YAML
DESCRIPTION: YAML configuration defining the ImageMaximumGCAge feature gate stages in Kubernetes. The feature was introduced as alpha in version 1.29 and promoted to beta with default enabled in version 1.30.

LANGUAGE: yaml
CODE:
---
title: ImageMaximumGCAge
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.29"
    toVersion: "1.29"
  - stage: beta
    defaultValue: true
    fromVersion: "1.30"
---

----------------------------------------

TITLE: Spanish OWNERS File Configuration
DESCRIPTION: YAML configuration for Spanish localization team permissions and labels.

LANGUAGE: yaml
CODE:
# See the OWNERS docs at https://go.k8s.io/owners

# This is the localization project for Spanish.
# Teams and members are visible at https://github.com/orgs/kubernetes/teams.

reviewers:
- sig-docs-es-reviews

approvers:
- sig-docs-es-owners

labels:
- area/localization
- language/es

----------------------------------------

TITLE: Configuring ValidatingAdmissionPolicy in YAML
DESCRIPTION: YAML configuration for ValidatingAdmissionPolicy that implements security context validation using CEL expressions with variable composition.

LANGUAGE: yaml
CODE:
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionPolicy
metadata:
  name: "pod-security.policy.example.com"
spec:
  failurePolicy: Fail
  matchConstraints:
    resourceRules:
    - apiGroups:   ["apps"]
      apiVersions: ["v1"]
      operations:  ["CREATE", "UPDATE"]
      resources:   ["deployments"]
  variables:
  - name: containers
    expression: object.spec.template.spec.containers
  - name: securityContexts
    expression: 'variables.containers.map(c, c.?securityContext)'
  validations:
  - expression: variables.securityContexts.all(c, c.?runAsNonRoot == optional.of(true))
    message: 'all containers must set runAsNonRoot to true'
  - expression: variables.securityContexts.all(c, c.?readOnlyRootFilesystem == optional.of(true))
    message: 'all containers must set readOnlyRootFilesystem to true'
  - expression: variables.securityContexts.all(c, c.?allowPrivilegeEscalation != optional.of(true))
    message: 'all containers must NOT set allowPrivilegeEscalation to true'
  - expression: variables.securityContexts.all(c, c.?privileged != optional.of(true))
    message: 'all containers must NOT set privileged to true'

----------------------------------------

TITLE: Importing RuntimeClass API in Go
DESCRIPTION: Shows how to import the RuntimeClass API in Go code.

LANGUAGE: go
CODE:
import "k8s.io/api/node/v1"

----------------------------------------

TITLE: Creating ThirdPartyResource with kubectl
DESCRIPTION: Bash command to create the ThirdPartyResource using kubectl and the YAML definition file.

LANGUAGE: bash
CODE:
$kubectl create -f third-party-res-def.yaml

----------------------------------------

TITLE: Defining StorageVersionAPI Feature Gate Configuration in YAML
DESCRIPTION: YAML configuration block that specifies the feature gate properties for StorageVersionAPI, including its stage (alpha), default value (false), and the Kubernetes version it was introduced in (1.20).

LANGUAGE: yaml
CODE:
title: StorageVersionAPI
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.20"

----------------------------------------

TITLE: Defining StorageVersionAPI Feature Gate Configuration in YAML
DESCRIPTION: YAML configuration block that specifies the feature gate properties for StorageVersionAPI, including its stage (alpha), default value (false), and the Kubernetes version it was introduced in (1.20).

LANGUAGE: yaml
CODE:
title: StorageVersionAPI
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.20"

----------------------------------------

TITLE: Retrieving lastPhaseTransitionTime for a PersistentVolume in Kubernetes
DESCRIPTION: kubectl command to retrieve the lastPhaseTransitionTime field from a specific PersistentVolume's status. This command uses jsonpath to extract the desired field from the PV object.

LANGUAGE: shell
CODE:
kubectl get pv <pv-name> -o jsonpath='{.status.lastPhaseTransitionTime}'

----------------------------------------

TITLE: Creating Kind Cluster with Pod Security
DESCRIPTION: Creates a Kubernetes cluster using Kind with Pod Security admission controller enabled

LANGUAGE: shell
CODE:
kind create cluster --image kindest/node:v1.23.0

----------------------------------------

TITLE: Verifying Docker Processes
DESCRIPTION: Command to check running Docker daemon processes after installation

LANGUAGE: bash
CODE:
$ ps -ef|grep docker
root       302     1  0 04:37 ?        00:00:14 /usr/bin/docker daemon -H unix:///var/run/docker-bootstrap.sock -p /var/run/docker-bootstrap.pid --storage-driver=overlay --storage-opt dm.basesize=10G --iptables=false --ip-masq=false --bridge=none --graph=/var/lib/docker-bootstrap

root       722     1 11 04:38 ?        00:16:11 /usr/bin/docker -d -bip=10.0.97.1/24 -mtu=1472 -H fd:// --storage-driver=overlay -D

----------------------------------------

TITLE: Creating Job to Read Populated Volume
DESCRIPTION: YAML configuration for creating a Job that mounts and reads the content from the populated PVC.

LANGUAGE: yaml
CODE:
apiVersion: batch/v1
kind: Job
metadata:
  name: example-job
spec:
  template:
    spec:
      containers:
        - name: example-container
          image: busybox:latest
          command:
            - cat
            - /mnt/example.txt
          volumeMounts:
            - name: vol
              mountPath: /mnt
      restartPolicy: Never
      volumes:
        - name: vol
          persistentVolumeClaim:
            claimName: example-pvc

----------------------------------------

TITLE: Basic kubectl attach Command Syntax
DESCRIPTION: The basic syntax for attaching to a container in a pod using kubectl attach

LANGUAGE: bash
CODE:
kubectl attach (POD | TYPE/NAME) -c CONTAINER

----------------------------------------

TITLE: Updating ZooKeeper StatefulSet Resources
DESCRIPTION: kubectl command to patch the ZooKeeper StatefulSet and update CPU resource requests.

LANGUAGE: bash
CODE:
kubectl patch sts zk --type='json' -p='[{"op": "replace", "path": "/spec/template/spec/containers/0/resources/requests/cpu", "value":"0.3"}]'

----------------------------------------

TITLE: Routing All Traffic to Reviews v2
DESCRIPTION: Updates the default route rule to send all traffic to reviews v2.

LANGUAGE: yaml
CODE:
apiVersion: config.istio.io/v1alpha2
kind: RouteRule
metadata:
   name: reviews-default
spec:
   destination:
       name: reviews
   route:
   - labels:
           version: v2
       weight: 100

----------------------------------------

TITLE: Updating ZooKeeper StatefulSet Resources
DESCRIPTION: kubectl command to patch the ZooKeeper StatefulSet and update CPU resource requests.

LANGUAGE: bash
CODE:
kubectl patch sts zk --type='json' -p='[{"op": "replace", "path": "/spec/template/spec/containers/0/resources/requests/cpu", "value":"0.3"}]'

----------------------------------------

TITLE: Configuring AnonymousAuthConfigurableEndpoints Feature Gate in Kubernetes YAML
DESCRIPTION: This YAML configuration defines the stages and properties for the AnonymousAuthConfigurableEndpoints feature gate. It specifies alpha and beta stages with their corresponding version ranges and default values.

LANGUAGE: yaml
CODE:
title: AnonymousAuthConfigurableEndpoints
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha
    defaultValue: false
    fromVersion: "1.31"
    toVersion: "1.31"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.32"

----------------------------------------

TITLE: Creating Namespace with Shell Command
DESCRIPTION: Creates a new Kubernetes namespace for isolating memory constraint examples

LANGUAGE: shell
CODE:
kubectl create namespace constraints-mem-example

----------------------------------------

TITLE: Patching Kube-Proxy DaemonSet
DESCRIPTION: Command to patch the kube-proxy DaemonSet to control scheduling based on node conditions

LANGUAGE: bash
CODE:
kubectl -n kube-system patch ds kube-proxy -p='{
  "spec": {
    "template": {
      "spec": {
        "tolerations": [
          {
            "key": "CriticalAddonsOnly",
            "operator": "Exists"
          },
          {
            "effect": "NoSchedule",
            "key": "node-role.kubernetes.io/control-plane"
          }
        ]
      }
    }
  }
}'

----------------------------------------

TITLE: Creating cfssl Configuration for Kubernetes CA
DESCRIPTION: This JSON configuration file is used for generating the CA file with cfssl. It defines the signing profiles and certificate expiry.

LANGUAGE: json
CODE:
{
  "signing": {
    "default": {
      "expiry": "8760h"
    },
    "profiles": {
      "kubernetes": {
        "usages": [
          "signing",
          "key encipherment",
          "server auth",
          "client auth"
        ],
        "expiry": "8760h"
      }
    }
  }
}

----------------------------------------

TITLE: Configuring iptables rules for Service IP routing in Kubernetes
DESCRIPTION: This snippet demonstrates how iptables rules are configured to route traffic to specific Services based on their IP addresses and ports. It shows the linear nature of rule matching, which leads to O(n) complexity in packet processing time.

LANGUAGE: bash
CODE:
# If the packet is addressed to 172.30.0.41:80, then jump to the chain
# KUBE-SVC-XPGD46QRK7WJZT7O for further processing
-A KUBE-SERVICES -m comment --comment "namespace1/service1:p80 cluster IP" -m tcp -p tcp -d 172.30.0.41 --dport 80 -j KUBE-SVC-XPGD46QRK7WJZT7O

# If the packet is addressed to 172.30.0.42:443, then...
-A KUBE-SERVICES -m comment --comment "namespace2/service2:p443 cluster IP" -m tcp -p tcp -d 172.30.0.42 --dport 443 -j KUBE-SVC-GNZBNJ2PO5MGZ6GT

# etc...
-A KUBE-SERVICES -m comment --comment "namespace3/service3:p80 cluster IP" -m tcp -p tcp -d 172.30.0.43 --dport 80 -j KUBE-SVC-X27LE4BHSL4DOUIK

----------------------------------------

TITLE: Downloading Kubernetes Binary and Signature Files
DESCRIPTION: Script to download a Kubernetes binary along with its signature and certificate files for verification. Uses curl to fetch files from the official Kubernetes distribution server.

LANGUAGE: bash
CODE:
URL=https://dl.k8s.io/release/v{{< skew currentPatchVersion >}}/bin/linux/amd64
BINARY=kubectl

FILES=(
    "$BINARY"
    "$BINARY.sig"
    "$BINARY.cert"
)

for FILE in "${FILES[@]}"; do
    curl -sSfL --retry 3 --retry-delay 3 "$URL/$FILE" -o "$FILE"
done

----------------------------------------

TITLE: Running Kubeadm Reset Phase Cleanup-Node Command in Bash
DESCRIPTION: This command runs the cleanup node phase of the kubeadm reset process. It can be used to clean up certificates, temporary directories, and CRI sockets on a Kubernetes node.

LANGUAGE: bash
CODE:
kubeadm reset phase cleanup-node [flags]

----------------------------------------

TITLE: Defining YAML Frontmatter for Federation API Documentation
DESCRIPTION: YAML frontmatter block defining metadata for a documentation page about the Kubernetes Federation API, including title and weight for ordering.

LANGUAGE: yaml
CODE:
---
title: Federation API
weight: 70
---

----------------------------------------

TITLE: Cloning Kubernetes Website Repository
DESCRIPTION: Clones the kubernetes/website repository to the local workspace.

LANGUAGE: shell
CODE:
git clone https://github.com/<your-username>/website $GOPATH/src/github.com/<your-username>/website

----------------------------------------

TITLE: Creating Job to Read Populated Volume
DESCRIPTION: YAML configuration for creating a job that reads the contents of the populated volume.

LANGUAGE: yaml
CODE:
apiVersion: batch/v1
kind: Job
metadata:
  name: example-job
spec:
  template:
    spec:
      containers:
        - name: example-container
          image: busybox:latest
          command:
            - cat
            - /mnt/example.txt
          volumeMounts:
            - name: vol
              mountPath: /mnt
      restartPolicy: Never
      volumes:
        - name: vol
          persistentVolumeClaim:
            claimName: example-pvc

----------------------------------------

TITLE: Validating kubectl binary checksum in PowerShell
DESCRIPTION: This PowerShell command compares the SHA256 hash of the downloaded kubectl binary with the expected checksum.

LANGUAGE: powershell
CODE:
$(Get-FileHash -Algorithm SHA256 .\kubectl.exe).Hash -eq $(Get-Content .\kubectl.exe.sha256)

----------------------------------------

TITLE: Checking available MicroK8s release channels
DESCRIPTION: This command displays information about available MicroK8s versions and release channels.

LANGUAGE: shell
CODE:
sudo snap info microk8s

----------------------------------------

TITLE: Verifying Kubernetes SBOM
DESCRIPTION: Commands to verify the Kubernetes Software Bill of Materials (SBOM) using SHA checksums and cosign signature verification.

LANGUAGE: shell
CODE:
VERSION=$(curl -Ls https://dl.k8s.io/release/stable.txt)

curl -Ls "https://sbom.k8s.io/$VERSION/release" -o "$VERSION.spdx"
echo "$(curl -Ls "https://sbom.k8s.io/$VERSION/release.sha512") $VERSION.spdx" | sha512sum --check

echo "$(curl -Ls "https://sbom.k8s.io/$VERSION/release.sha256") $VERSION.spdx" | sha256sum --check

curl -Ls "https://sbom.k8s.io/$VERSION/release.sig" -o "$VERSION.spdx.sig"
curl -Ls "https://sbom.k8s.io/$VERSION/release.cert" -o "$VERSION.spdx.cert"

cosign verify-blob \
    --certificate "$VERSION.spdx.cert" \
    --signature "$VERSION.spdx.sig" \
    --certificate-identity krel-staging@k8s-releng-prod.iam.gserviceaccount.com \
    --certificate-oidc-issuer https://accounts.google.com \
    "$VERSION.spdx"

----------------------------------------

TITLE: Hardware Shopping List Table
DESCRIPTION: Detailed breakdown of components needed to build a 5-node Raspberry Pi cluster, including quantities, descriptions and approximate costs. Total cost comes to around $380.

LANGUAGE: markdown
CODE:
|   |   |   |
| ------------ | ------------ | ------------ |
| 5 | Raspberry Pi 2 model B | [~$200](https://www.raspberrypi.org/products/raspberry-pi-2-model-b/) |
| 5 | 16 GB micro SD-card class 10 | ~ $45 |
| 1 | D-Link Switch GO-SW-8E 8-Port | [~$15](http://www.dlink.com/uk/en/home-solutions/connect/go/go-sw-8e) |
| 1 | Anker 60W 6-Port PowerPort USB Charger (white) | [~$35](http://www.ianker.com/product/A2123122) |
| 3 | ModMyPi Multi-Pi Stackable Raspberry Pi Case | [~$60](http://www.modmypi.com/raspberry-pi/cases/multi-pi-stacker/multi-pi-stackable-raspberry-pi-case) |
| 1 | ModMyPi Multi-Pi Stackable Raspberry Pi Case - Bolt Pack | [~$7](http://www.modmypi.com/raspberry-pi/cases/multi-pi-stacker/multi-pi-stackable-raspberry-pi-case-bolt-pack) |
| 5 | Micro USB cable (white) 1ft long | ~ $10 |
| 5 | UTP cat5 cable (white) 1ft long | ~ $10 |

----------------------------------------

TITLE: Minimal Kubernetes Scheduler Configuration
DESCRIPTION: Basic configuration example for kube-scheduler showing the minimal required settings including API version, kind and client connection details.

LANGUAGE: yaml
CODE:
apiVersion: kubescheduler.config.k8s.io/v1
kind: KubeSchedulerConfiguration
clientConnection:
  kubeconfig: /etc/srv/kubernetes/kube-scheduler/kubeconfig

----------------------------------------

TITLE: Removing Identity Provider from Encryption Config
DESCRIPTION: Example of how to modify the encryption configuration to remove the identity provider after encrypting all Secrets.

LANGUAGE: yaml
CODE:
apiVersion: apiserver.config.k8s.io/v1
kind: EncryptionConfiguration
resources:
  - resources:
      - secrets
    providers:
      - aescbc:
          keys:
            - name: key1
              secret: <BASE 64 ENCODED SECRET>
      - identity: {} # REMOVE THIS LINE

----------------------------------------

TITLE: Generating Kubernetes API Reference Documentation
DESCRIPTION: This snippet shows the commands to generate the Kubernetes API reference documentation using the reference-docs tool.

LANGUAGE: shell
CODE:
cd <rdocs-base>\nmake updateapispec\n\ncd <rdocs-base>\nmake copyapi

----------------------------------------

TITLE: Applying Language Labels in Kubernetes Docs using Prow Commands
DESCRIPTION: A command used in PR comments to manually assign language labels using Prow, Kubernetes' CI/CD system. This example shows how to assign the Korean language label.

LANGUAGE: shell
CODE:
/language ko

----------------------------------------

TITLE: Defining RuntimeClassList Structure in Go
DESCRIPTION: Defines the structure of a RuntimeClassList object in Go, which represents a list of RuntimeClass objects.

LANGUAGE: go
CODE:
type RuntimeClassList struct {
  metav1.TypeMeta
  metav1.ListMeta

  Items []RuntimeClass
}

----------------------------------------

TITLE: Defining Pet Set with Persistent Storage
DESCRIPTION: Complete YAML configuration for deploying a Pet Set with nginx containers and persistent storage using volume claim templates.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Service
metadata:
  name: test-service
  labels:
    app: nginx
spec:
  ports:
  - port: 80
    name: web
  clusterIP: None
  selector:
    app: nginx
---
apiVersion: apps/v1alpha1
kind: PetSet
metadata:
  name: test-petset
spec:
  serviceName: "test-service"
  replicas: 2
  template:
    metadata:
      labels:
        app: nginx
      annotations:
        pod.alpha.kubernetes.io/initialized: "true"
    spec:
      terminationGracePeriodSeconds: 0
      containers:
      - name: nginx
        image: gcr.io/google_containers/nginx-slim:0.8
        ports:
        - containerPort: 80
          name: web
        volumeMounts:
        - name: pv-claim
          mountPath: /data
  volumeClaimTemplates:
  - metadata:
      name: pv-claim
      annotations:
        volume.alpha.kubernetes.io/storage-class: anything
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 100Gi

----------------------------------------

TITLE: VolumeAttributesClass HTTP PATCH Operation
DESCRIPTION: HTTP request format for partially updating a VolumeAttributesClass resource

LANGUAGE: http
CODE:
PATCH /apis/storage.k8s.io/v1beta1/volumeattributesclasses/{name}

----------------------------------------

TITLE: Defining CRI Streaming RPCs in Protocol Buffers
DESCRIPTION: Protocol Buffer definitions for the Exec, Attach, and PortForward RPCs showing their request/response structure.

LANGUAGE: protobuf
CODE:
// Exec prepares a streaming endpoint to execute a command in the container.
rpc Exec(ExecRequest) returns (ExecResponse) {}

LANGUAGE: protobuf
CODE:
// Attach prepares a streaming endpoint to attach to a running container.
rpc Attach(AttachRequest) returns (AttachResponse) {}

LANGUAGE: protobuf
CODE:
// PortForward prepares a streaming endpoint to forward ports from a PodSandbox.
rpc PortForward(PortForwardRequest) returns (PortForwardResponse) {}

----------------------------------------

TITLE: Implementing a Simple KPNG JSON Backend in Go
DESCRIPTION: This Go code snippet demonstrates a basic kpng backend that prints service and endpoint updates as JSON. It uses the kpng client library to receive updates from the kpng controller.

LANGUAGE: go
CODE:
package main
import (
        "os"
        "encoding/json"
        "sigs.k8s.io/kpng/client"
)
func main() {
        client.Run(jsonPrint)
}
func jsonPrint(items []*client.ServiceEndpoints) {
        enc := json.NewEncoder(os.Stdout)
        for _, item := range items {
                _ = enc.Encode(item)
        }
}

----------------------------------------

TITLE: Defining Nginx SSL Proxy Container in Kubernetes YAML
DESCRIPTION: This YAML snippet defines the container specification for an Nginx SSL proxy in a Kubernetes pod. It sets environment variables for service discovery, enables SSL and basic auth, and exposes HTTP and HTTPS ports.

LANGUAGE: yaml
CODE:
  spec:
    containers:
      -
        name: "nginx-ssl-proxy"
        image: "gcr.io/cloud-solutions-images/nginx-ssl-proxy:latest"
        env:
          -
            name: "SERVICE_HOST_ENV_NAME"
            value: "JENKINS_SERVICE_HOST"
          -
            name: "SERVICE_PORT_ENV_NAME"
            value: "JENKINS_SERVICE_PORT_UI"
          -
            name: "ENABLE_SSL"
            value: "true"
          -
            name: "ENABLE_BASIC_AUTH"
            value: "true"
        ports:
          -
            name: "nginx-ssl-proxy-http"
            containerPort: 80
          -
            name: "nginx-ssl-proxy-https"
            containerPort: 443

----------------------------------------

TITLE: Creating an alias for MicroK8s kubectl
DESCRIPTION: This command creates an alias to use 'kubectl' instead of 'microk8s.kubectl' for easier command execution.

LANGUAGE: shell
CODE:
sudo snap alias microk8s.kubectl kubectl

----------------------------------------

TITLE: Basic Kubeadm Reset Command Usage
DESCRIPTION: Shows the basic syntax for running the kubeadm reset command with optional flags.

LANGUAGE: bash
CODE:
kubeadm reset [flags]

----------------------------------------

TITLE: Using kubectl config unset - Basic Syntax
DESCRIPTION: Shows the basic command syntax for unsetting a property in the kubeconfig file. PROPERTY_NAME must be dot-delimited and map keys cannot contain dots.

LANGUAGE: bash
CODE:
kubectl config unset PROPERTY_NAME

----------------------------------------

TITLE: Creating Kubernetes Role for New User
DESCRIPTION: Define a Role specifying the permissions for the new user to access Kubernetes cluster resources.

LANGUAGE: shell
CODE:
kubectl create role developer --verb=create --verb=get --verb=list --verb=update --verb=delete --resource=pods

----------------------------------------

TITLE: Removing Identity Provider from Encryption Config
DESCRIPTION: Example of how to modify the encryption configuration to remove the identity provider after encrypting all Secrets.

LANGUAGE: yaml
CODE:
apiVersion: apiserver.config.k8s.io/v1
kind: EncryptionConfiguration
resources:
  - resources:
      - secrets
    providers:
      - aescbc:
          keys:
            - name: key1
              secret: <BASE 64 ENCODED SECRET>
      - identity: {} # REMOVE THIS LINE

----------------------------------------

TITLE: Deploying Application to Kubernetes with Draft
DESCRIPTION: Use the 'draft up' command to build the Docker image, push it to a registry, and deploy the application to Kubernetes using Helm.

LANGUAGE: bash
CODE:
$ draft up
--> Building Dockerfile
Step 1 : FROM python:onbuild
onbuild: Pulling from library/python
...
Successfully built 38f35b50162c
--> Pushing docker.io/microsoft/tufted-lamb:5a3c633ae76c9bdb81b55f5d4a783398bf00658e
The push refers to a repository [docker.io/microsoft/tufted-lamb]
...
5a3c633ae76c9bdb81b55f5d4a783398bf00658e: digest: sha256:9d9e9fdb8ee3139dd77a110fa2d2b87573c3ff5ec9c045db6009009d1c9ebf5b size: 16384
--> Deploying to Kubernetes
    Release "tufted-lamb" does not exist. Installing it now.
--> Status: DEPLOYED
--> Notes:
     1. Get the application URL by running these commands:
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get svc -w tufted-lamb-tufted-lamb'
  export SERVICE_IP=$(kubectl get svc --namespace default tufted-lamb-tufted-lamb -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
  echo http://$SERVICE_IP:80

Watching local files for changes...

----------------------------------------

TITLE: Creating StorageClass for CSI Storage Provisioner
DESCRIPTION: This YAML configuration defines a StorageClass for the CSI storage provisioner, enabling volume expansion and specifying the provisioner as csi-qcfsplugin.

LANGUAGE: yaml
CODE:
allowVolumeExpansion: true
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: csi-qcfs
parameters:
  csiProvisionerSecretName: orain-test
  csiProvisionerSecretNamespace: default
provisioner: csi-qcfsplugin
reclaimPolicy: Delete
volumeBindingMode: Immediate

----------------------------------------

TITLE: Accessing Shell Container in Kubernetes Pod
DESCRIPTION: This shell command executes an interactive shell session in the 'shell' container of the 'nginx' pod.

LANGUAGE: shell
CODE:
kubectl exec -it nginx -c shell -- /bin/sh

----------------------------------------

TITLE: Configuring Sysctls Feature Gate in Kubernetes YAML
DESCRIPTION: This YAML configuration defines the lifecycle stages of the Sysctls feature gate in Kubernetes. It specifies the beta and stable stages, their default values, and version ranges. The feature is marked as removed in version 1.22.

LANGUAGE: yaml
CODE:
---
title: Sysctls
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: beta 
    defaultValue: true
    fromVersion: "1.11"
    toVersion: "1.20"
  - stage: stable
    defaultValue: true
    fromVersion: "1.21"
    toVersion: "1.22"    

removed: true
---

----------------------------------------

TITLE: Creating a Pod with CPU Constraints in Kubernetes YAML
DESCRIPTION: This YAML defines a Pod with one container that specifies CPU requests and limits within the range set by the LimitRange. It requests 500 millicpu and sets a limit of 800 millicpu.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: constraints-cpu-demo
spec:
  containers:
  - name: constraints-cpu-demo-ctr
    image: nginx
    resources:
      limits:
        cpu: "800m"
      requests:
        cpu: "500m"

----------------------------------------

TITLE: Listing Kubernetes Nodes
DESCRIPTION: Command to list all nodes in a Kubernetes cluster and verify their status.

LANGUAGE: shell
CODE:
kubectl get nodes

----------------------------------------

TITLE: Update RBAC Permissions for KCM
DESCRIPTION: Shell command to patch the kube-controller-manager RBAC role to allow access to migration lease resources.

LANGUAGE: shell
CODE:
kubectl patch -n kube-system role 'system::leader-locking-kube-controller-manager' -p '{"rules": [ {"apiGroups":[ "coordination.k8s.io"], "resources": ["leases"], "resourceNames": ["cloud-provider-extraction-migration"], "verbs": ["create", "list", "get", "update"] } ]}' --type=merge

----------------------------------------

TITLE: Creating a Secret Manually
DESCRIPTION: Example of creating a Secret manually using a YAML definition

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Secret
metadata:
  name: mysecret
type: Opaque
data:
  username: YWRtaW4=
  password: MWYyZDFlMmU2N2Rm

----------------------------------------

TITLE: kubectl version Command with Flags
DESCRIPTION: Shows the full kubectl version command syntax with optional flags for customizing output and behavior.

LANGUAGE: bash
CODE:
kubectl version [flags]

----------------------------------------

TITLE: Configuring Minion-2 Node Network Routes
DESCRIPTION: Network routing table configuration for the second Kubernetes minion node showing destinations, gateways, and interface configurations for OpenVPN tunnels and container bridge.

LANGUAGE: bash
CODE:
10.8.0.0        10.8.0.9        255.255.255.0   UG    0      0        0 tun0
10.8.0.9        0.0.0.0         255.255.255.255 UH    0      0        0 tun0
10.244.1.0      10.8.0.9        255.255.255.0   UG    0      0        0 tun0
10.244.2.0      0.0.0.0         255.255.255.0   U     0      0        0 cbr0

----------------------------------------

TITLE: Opening Minikube Dashboard
DESCRIPTION: Launch the Kubernetes dashboard UI for cluster management and monitoring

LANGUAGE: shell
CODE:
minikube dashboard

----------------------------------------

TITLE: Creating a Pod with Priority Class in Kubernetes
DESCRIPTION: Example of creating a Pod that uses a specific PriorityClass, demonstrating how to assign priority to individual pods using the priorityClassName field.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: nginx
  labels:
    env: test
spec:
  containers:
  - name: nginx
    image: nginx
    imagePullPolicy: IfNotPresent
  priorityClassName: high-priority

----------------------------------------

TITLE: Checking MicroK8s status
DESCRIPTION: This command displays the current status of the MicroK8s installation, including available addons and their states.

LANGUAGE: shell
CODE:
sudo microk8s.status

----------------------------------------

TITLE: Control Plane Node Join Configuration YAML
DESCRIPTION: This YAML configuration file is used to join an additional control plane node to a dual-stack Kubernetes cluster using kubeadm.

LANGUAGE: yaml
CODE:
apiVersion: kubeadm.k8s.io/v1beta4
kind: JoinConfiguration
controlPlane:
  localAPIEndpoint:
    advertiseAddress: "10.100.0.2"
    bindPort: 6443
discovery:
  bootstrapToken:
    apiServerEndpoint: 10.100.0.1:6443
    token: "clvldh.vjjwg16ucnhp94qr"
    caCertHashes:
    - "sha256:a4863cde706cfc580a439f842cc65d5ef112b7b2be31628513a9881cf0d9fe0e"
nodeRegistration:
  kubeletExtraArgs:
  - name: "node-ip"
    value: "10.100.0.2,fd00:1:2:3::4"

----------------------------------------

TITLE: Starting Multi-Node etcd Cluster in Shell
DESCRIPTION: Command to start a multi-node etcd cluster with multiple client URLs for improved durability and high availability.

LANGUAGE: shell
CODE:
etcd --listen-client-urls=http://$IP1:2379,http://$IP2:2379,http://$IP3:2379,http://$IP4:2379,http://$IP5:2379 --advertise-client-urls=http://$IP1:2379,http://$IP2:2379,http://$IP3:2379,http://$IP4:2379,http://$IP5:2379

----------------------------------------

TITLE: Displaying Exemption Warning for Kubernetes Pod Security
DESCRIPTION: Demonstrates a new warning message that appears when applying a non-privileged label to a namespace that has been configured to be exempt from Pod Security.

LANGUAGE: plaintext
CODE:
Warning: namespace 'kube-system' is exempt from Pod Security, and the policy (enforce=baseline:latest) will be ignored

----------------------------------------

TITLE: Enabling storage.k8s.io/v1beta1 API Group in Kubernetes
DESCRIPTION: Command line argument to enable the storage.k8s.io/v1beta1 API group in the Kubernetes API server.

LANGUAGE: shell
CODE:
--runtime-config=storage.k8s.io/v1beta1=true

----------------------------------------

TITLE: Creating a Pod with a Private Image
DESCRIPTION: This YAML snippet demonstrates how to create a Kubernetes Pod that uses a private container image. It specifies the image name and pull policy.

LANGUAGE: yaml
CODE:
kubectl apply -f - <<EOF
apiVersion: v1
kind: Pod
metadata:
  name: private-image-test-1
spec:
  containers:
    - name: uses-private-image
      image: $PRIVATE_IMAGE_NAME
      imagePullPolicy: Always
      command: [ "echo", "SUCCESS" ]
EOF

----------------------------------------

TITLE: Configuring MaxUnavailable for StatefulSet in Kubernetes YAML
DESCRIPTION: This YAML snippet demonstrates how to configure a StatefulSet with the new 'maxUnavailable' field set to 2. It shows the structure of a StatefulSet with 5 replicas using the OrderedReady pod management policy.

LANGUAGE: yaml
CODE:
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: web
  namespace: default
spec:
  podManagementPolicy: OrderedReady  # you must set OrderedReady
  replicas: 5
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      # image changed since publication (previously used registry "k8s.gcr.io")
      - image: registry.k8s.io/nginx-slim:0.8
        imagePullPolicy: IfNotPresent
        name: nginx
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 2 # this is the new alpha field, whose default value is 1
      partition: 0
    type: RollingUpdate

----------------------------------------

TITLE: Defining IngressClass in Kubernetes YAML
DESCRIPTION: This YAML snippet demonstrates how to define an IngressClass resource in Kubernetes. It specifies the controller that should implement Ingresses of this class and references a custom resource with additional parameters.

LANGUAGE: yaml
CODE:
apiVersion: "networking.k8s.io/v1beta1"
kind: "IngressClass"
metadata:
  name: "external-lb"
spec:
  controller: "example.com/ingress-controller"
  parameters:
    apiGroup: "k8s.example.com/v1alpha"
    kind: "IngressParameters"
    name: "external-lb"

----------------------------------------

TITLE: Importing Kubernetes Meta v1 Package
DESCRIPTION: Import statement for the Kubernetes meta/v1 package containing the Status type definition.

LANGUAGE: go
CODE:
import "k8s.io/apimachinery/pkg/apis/meta/v1"

----------------------------------------

TITLE: Creating PersistentVolumeClaim with Storage Class in Kubernetes JSON
DESCRIPTION: JSON definition for a PersistentVolumeClaim that requests 30Gi of storage using the 'fast' storage class, which will result in an SSD-like Persistent Disk being provisioned.

LANGUAGE: json
CODE:
{
  "kind": "PersistentVolumeClaim",
  "apiVersion": "v1",
  "metadata": {
    "name": "claim1",
    "annotations": {
        "volume.beta.kubernetes.io/storage-class": "fast"
    }
  },
  "spec": {
    "accessModes": [
      "ReadWriteOnce"
    ],
    "resources": {
      "requests": {
        "storage": "30Gi"
      }
    }
  }
}

----------------------------------------

TITLE: Setting External Traffic Policy
DESCRIPTION: Modifies the service to preserve client source IPs by setting externalTrafficPolicy to Local.

LANGUAGE: shell
CODE:
kubectl patch svc nodeport -p '{"spec":{"externalTrafficPolicy":"Local"}}'

----------------------------------------

TITLE: Defining DynamicProvisioningScheduling Feature Gate Configuration in YAML
DESCRIPTION: YAML configuration defining the lifecycle of the DynamicProvisioningScheduling feature gate in Kubernetes. Shows it was an alpha feature in v1.11 before being deprecated in v1.12.

LANGUAGE: yaml
CODE:
title: DynamicProvisioningScheduling
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.11"
    toVersion: "1.11"
  - stage: deprecated
    fromVersion: "1.12"

removed: true

----------------------------------------

TITLE: Configuring Pod Security Context with fsGroupChangePolicy in Kubernetes
DESCRIPTION: YAML configuration showing how to set up a Pod's security context with fsGroupChangePolicy set to 'OnRootMismatch' to optimize volume permission changes. This allows skipping recursive permission changes when the volume root already has correct permissions.

LANGUAGE: yaml
CODE:
securityContext:
  runAsUser: 1000
  runAsGroup: 3000
  fsGroup: 2000
  fsGroupChangePolicy: "OnRootMismatch"

----------------------------------------

TITLE: Setting Feature Gates via Environment Variables in Bash
DESCRIPTION: Examples showing how to enable or disable client-go features using environment variables with the KUBE_FEATURE prefix.

LANGUAGE: bash
CODE:
KUBE_FEATURE_MyFeature=true

LANGUAGE: bash
CODE:
KUBE_FEATURE_MyFeature=false

----------------------------------------

TITLE: Listing Persistent Volumes in Kubernetes
DESCRIPTION: This bash command lists all Persistent Volumes (PVs) in the Kubernetes cluster, showing their names, capacities, access modes, reclaim policies, statuses, claims, storage classes, and ages.

LANGUAGE: bash
CODE:
$ kubectl get pv
NAME                CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM  STORAGECLASS   REASON      AGE
local-pv-27c0f084   368Gi      RWO            Delete           Available          local-storage              8s
local-pv-3796b049   368Gi      RWO            Delete           Available          local-storage              7s
local-pv-3ddecaea   368Gi      RWO            Delete           Available          local-storage              7s

----------------------------------------

TITLE: Executing kubeadm join phase wait-control-plane Command in Bash
DESCRIPTION: This command is part of the kubeadm join process and waits for the Kubernetes control plane to start. It is marked as experimental. The command can be run with optional flags.

LANGUAGE: bash
CODE:
kubeadm join phase wait-control-plane [flags]

----------------------------------------

TITLE: Basic Syntax for Creating a Resource Quota in Kubernetes
DESCRIPTION: This is the basic syntax for the 'kubectl create quota' command, showing the required NAME parameter and optional flags for hard limits, scopes, and dry-run options.

LANGUAGE: bash
CODE:
kubectl create quota NAME [--hard=key1=value1,key2=value2] [--scopes=Scope1,Scope2] [--dry-run=server|client|none]

----------------------------------------

TITLE: Starting Minikube with CRI Enabled for Kubernetes 1.5
DESCRIPTION: This command demonstrates how to start a Minikube cluster with CRI enabled for Kubernetes version 1.5.0-beta.1. It includes specific configurations for the kubelet and network plugin.

LANGUAGE: bash
CODE:
$ minikube start --kubernetes-version=v1.5.0-beta.1 --extra-config=kubelet.EnableCRI=true --network-plugin=kubenet --extra-config=kubelet.PodCIDR=10.180.1.0/24 --iso-url=http://storage.googleapis.com/minikube/iso/buildroot/minikube-v0.0.6.iso

----------------------------------------

TITLE: Deleting a Cluster from Kubeconfig in Bash
DESCRIPTION: This command deletes the specified cluster from the kubeconfig file. It takes the cluster name as an argument.

LANGUAGE: bash
CODE:
kubectl config delete-cluster NAME

----------------------------------------

TITLE: Configuring TopologyAwareHints Feature Gate in Kubernetes YAML
DESCRIPTION: YAML configuration defining the TopologyAwareHints feature gate stages, including alpha and beta releases with their corresponding versions and default values. This feature enables topology aware routing based on topology hints in EndpointSlices.

LANGUAGE: yaml
CODE:
---
title: TopologyAwareHints
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.21"
    toVersion: "1.22"
  - stage: beta
    defaultValue: false
    fromVersion: "1.23"
    toVersion: "1.23"
  - stage: beta
    defaultValue: true
    fromVersion: "1.24"
---

----------------------------------------

TITLE: Viewing ResourceQuota Details
DESCRIPTION: Command to retrieve detailed information about the ResourceQuota

LANGUAGE: shell
CODE:
kubectl get resourcequota mem-cpu-demo --namespace=quota-mem-cpu-example --output=yaml

----------------------------------------

TITLE: ExternalName Service Example
DESCRIPTION: Example showing how to create an ExternalName service named 'my-ns' that points to an external DNS name 'bar.com'.

LANGUAGE: bash
CODE:
kubectl create service externalname my-ns --external-name bar.com

----------------------------------------

TITLE: Checking Out Specific Kubernetes Version
DESCRIPTION: Checks out a specific version branch in the local kubernetes repository and ensures it's up to date.

LANGUAGE: shell
CODE:
cd <k8s-base>
git checkout v{{< skew prevMinorVersion >}}.0
git pull https://github.com/kubernetes/kubernetes {{< skew prevMinorVersion >}}.0

----------------------------------------

TITLE: Deployment Using PersistentVolumeClaim
DESCRIPTION: YAML definition of a Deployment that mounts a PersistentVolumeClaim

LANGUAGE: yaml
CODE:
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cat-pictures-writer
spec:
  replicas: 3
  selector:
    matchLabels:
      app: cat-pictures-writer
  template:
    metadata:
      labels:
        app: cat-pictures-writer
    spec:
      containers:
      - name: nginx
        image: nginx:1.14.2
        ports:
        - containerPort: 80
        volumeMounts:
        - name: cat-pictures
          mountPath: /mnt
      volumes:
      - name: cat-pictures
        persistentVolumeClaim:
          claimName: cat-pictures-pvc
          readOnly: false

----------------------------------------

TITLE: Dry Run for Applying Pod Security Standards
DESCRIPTION: Performs a dry run to test applying different Pod Security Standards (Privileged, Baseline, Restricted) to all namespaces.

LANGUAGE: shell
CODE:
kubectl label --dry-run=server --overwrite ns --all pod-security.kubernetes.io/enforce=privileged

LANGUAGE: shell
CODE:
kubectl label --dry-run=server --overwrite ns --all pod-security.kubernetes.io/enforce=baseline

LANGUAGE: shell
CODE:
kubectl label --dry-run=server --overwrite ns --all pod-security.kubernetes.io/enforce=restricted

----------------------------------------

TITLE: Blog Frontmatter Configuration in YAML
DESCRIPTION: YAML frontmatter configuration for the blog post, specifying metadata like title, date, slug, and author information.

LANGUAGE: yaml
CODE:
---
layout: blog
title: "Server Side Apply Is Great And You Should Be Using It"
date: 2022-10-20
slug: advanced-server-side-apply
author: >
  Daniel Smith (Google)
---

----------------------------------------

TITLE: Initializing YAML Front Matter for Blog Post
DESCRIPTION: This YAML snippet defines the front matter for the blog post, including layout, title, date, and author information.

LANGUAGE: yaml
CODE:
---
layout: blog
title: 'gRPC Load Balancing on Kubernetes without Tears'
date: 2018-11-07
author: >
  William Morgan (Buoyant)
---

----------------------------------------

TITLE: Upgrading Kube-Proxy Addon using Kubeadm in Bash
DESCRIPTION: This command upgrades the kube-proxy addon. It accepts various options to customize the upgrade process, such as specifying a configuration file, performing a dry run, or using a custom kubeconfig file.

LANGUAGE: bash
CODE:
kubeadm upgrade node phase addon kube-proxy [flags]

----------------------------------------

TITLE: Creating and Deploying a Hello World Function with Fission in Python
DESCRIPTION: This snippet demonstrates how to create a simple 'Hello World' HTTP service using Fission. It shows the process of writing a Python function, creating a Fission function from it, and associating it with an HTTP route.

LANGUAGE: python
CODE:
def main(context):
    print "Hello, world!"

LANGUAGE: bash
CODE:
$ cat > hello.py

def main(context):

    print "Hello, world!"


$ fission function create --name hello --env python --code hello.py --route /hello


$ curl http://<fission router>/hello

Hello, world!

----------------------------------------

TITLE: Accessing API via kubectl Proxy
DESCRIPTION: Example of accessing the Kubernetes API through kubectl proxy using curl.

LANGUAGE: shell
CODE:
curl http://localhost:8080/api/

----------------------------------------

TITLE: Installing Kubeadm on CentOS
DESCRIPTION: Shell commands to install kubeadm, kubelet, and kubectl on CentOS, and configure system settings for Kubernetes.

LANGUAGE: shell
CODE:
cat <<EOF > /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
EOF

# Set SELinux in permissive mode (effectively disabling it)
# Caveat: In a production environment you may not want to disable SELinux, please refer to Kubernetes documents about SELinux
setenforce 0
sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config

yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes

systemctl enable --now kubelet

cat <<EOF >  /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF
sysctl --system

# check if br_netfilter module is loaded
lsmod | grep br_netfilter

# if not, load it explicitly with 
modprobe br_netfilter

----------------------------------------

TITLE: Deleting the kind Cluster
DESCRIPTION: Cleans up by deleting the kind cluster created for testing Pod Security Standards.

LANGUAGE: shell
CODE:
kind delete cluster --name psa-ns-level

----------------------------------------

TITLE: Displaying CVE Feed Updates Table in Markdown
DESCRIPTION: This markdown table summarizes the updates made to the Kubernetes CVE feed, including issue titles, links, and their current status.

LANGUAGE: markdown
CODE:
| **Title**                                                                                                    | **Issue**                                                       | **Status**                                                                                                                                                                                                                      |
| ------------------------------------------------------------------------------------------------------------ | --------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| CVE Feed: JSON feed should pass jsonfeed spec validator | [kubernetes/webite#36808](https://github.com/kubernetes/website/issues/36808) | closed, addressed by [kubernetes/sig-security#76](https://github.com/kubernetes/sig-security/pull/76) |
| CVE Feed: Add lastUpdatedAt as a metadata field | [kubernetes/sig-security#72](https://github.com/kubernetes/sig-security/issues/72) | closed, addressed by [kubernetes/sig-security#76](https://github.com/kubernetes/sig-security/pull/76) |
| Support RSS feeds by generating data in Atom format | [kubernetes/sig-security#77](https://github.com/kubernetes/sig-security/issues/77) | closed, addressed by [kubernetes/website#39513](https://github.com/kubernetes/website/pull/39513)|
| CVE Feed: Sort Markdown Table from most recent to least recently announced CVE | [kubernetes/sig-security#73](https://github.com/kubernetes/sig-security/issues/73) | closed, addressed by [kubernetes/sig-security#76](https://github.com/kubernetes/sig-security/pull/76) |
| CVE Feed: Include a timestamp field for each CVE indicating when it was last updated | [kubernetes/sig-security#63](https://github.com/kubernetes/sig-security/issues/63) | closed, addressed by [kubernetes/sig-security#76](https://github.com/kubernetes/sig-security/pull/76) |
| CVE Feed: Add Prow job link as a metadata field | [kubernetes/sig-security#71](https://github.com/kubernetes/sig-security/issues/71) | closed, addressed by [kubernetes/sig-security#83](https://github.com/kubernetes/sig-security/pull/83) |

----------------------------------------

TITLE: Migrating Kubeadm Config from v1beta3 to v1beta4
DESCRIPTION: Command example showing how to migrate a kubeadm configuration file from v1beta3 to v1beta4 format using the kubeadm config migrate command.

LANGUAGE: bash
CODE:
kubeadm config migrate --old-config old-v1beta3.yaml --new-config new-v1beta4.yaml

----------------------------------------

TITLE: Renewing etcd peer certificates using kubeadm
DESCRIPTION: This command renews the certificate for etcd nodes to communicate with each other. It runs unconditionally and uses existing files/certificates for extra attributes. The command can use the local PKI, K8s certificate API, or generate a CSR request for renewal.

LANGUAGE: bash
CODE:
kubeadm certs renew etcd-peer [flags]

----------------------------------------

TITLE: Defining a Federated Ingress in Kubernetes YAML
DESCRIPTION: This YAML defines a federated ingress resource that will be created across all federated clusters.

LANGUAGE: yaml
CODE:
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: nginx
spec:
  backend:
    serviceName: nginx
    servicePort: 80

----------------------------------------

TITLE: Endpoint Struct Definition
DESCRIPTION: Go struct definition for an individual Endpoint within an EndpointSlice.

LANGUAGE: go
CODE:
type Endpoint struct {
	addresses []string
	conditions EndpointConditions
	deprecatedTopology map[string]string
	hints EndpointHints
	hostname string
	nodeName string
	targetRef *v1.ObjectReference
	zone string
}

----------------------------------------

TITLE: Defining IPv6DualStack Feature Gate Lifecycle in YAML
DESCRIPTION: YAML configuration defining the lifecycle stages of the IPv6DualStack feature gate in Kubernetes. Shows progression from alpha through stable stages with version ranges and default values, before eventual removal.

LANGUAGE: yaml
CODE:
---
title: IPv6DualStack
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.15"
    toVersion: "1.20"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.21"
    toVersion: "1.22"    
  - stage: stable
    defaultValue: true
    fromVersion: "1.23"
    toVersion: "1.24"    

removed: true
---

----------------------------------------

TITLE: Updating Ubuntu WSL2 Distribution
DESCRIPTION: Commands to update the Ubuntu WSL2 distribution's package list and installed packages.

LANGUAGE: bash
CODE:
sudo apt update
sudo apt upgrade -y

----------------------------------------

TITLE: CRI-O Exec Implementation Example
DESCRIPTION: Example implementation of the Exec method in CRI-O runtime.

LANGUAGE: go
CODE:
func (s StreamService) Exec(
    ctx context.Context,
    containerID string,
    cmd []string,
    stdin io.Reader, stdout, stderr io.WriteCloser,
    tty bool,
    resizeChan <-chan remotecommand.TerminalSize,
) error {
    // Retrieve the container by the provided containerID
    // …

    // Update the container status and verify that the workload is running
    // …

    // Execute the command and stream the data
    return s.runtimeServer.Runtime().ExecContainer(
        s.ctx, c, cmd, stdin, stdout, stderr, tty, resizeChan,
    )
}

----------------------------------------

TITLE: Viewing ZooKeeper Configuration
DESCRIPTION: kubectl command to view the contents of the zoo.cfg file in a ZooKeeper Pod.

LANGUAGE: bash
CODE:
kubectl exec zk-0 -- cat /opt/zookeeper/conf/zoo.cfg

----------------------------------------

TITLE: Example kubesec JSON Output
DESCRIPTION: Sample output from the kubesec static analysis tool, showing security scoring and recommendations for a Kubernetes resource.

LANGUAGE: json
CODE:
{
  "score": -30,
  "scoring": {
    "critical": [{
      "selector": "containers[] .securityContext .privileged == true",
      "reason": "Privileged containers can allow almost completely unrestricted host access"
    }],
    "advise": [{
      "selector": "containers[] .securityContext .runAsNonRoot == true",
      "reason": "Force the running image to run as a non-root user to ensure least privilege"
    }, {
      "selector": "containers[] .securityContext .capabilities .drop",
      "reason": "Reducing kernel capabilities available to a container limits its attack surface",
      "href": "/docs/tasks/configure-pod-container/security-context/"
    }]
  }
}

----------------------------------------

TITLE: Running Kubeadm Preflight Check with Config File
DESCRIPTION: Example showing how to run pre-flight checks using a configuration file for customized setup.

LANGUAGE: bash
CODE:
kubeadm init phase preflight --config kubeadm-config.yaml

----------------------------------------

TITLE: Kubectl Plugin List Examples
DESCRIPTION: Examples showing how to list available plugins, including options to show only plugin names without paths.

LANGUAGE: bash
CODE:
  # List all available plugins
  kubectl plugin list
  
  # List only binary names of available plugins without paths
  kubectl plugin list --name-only

----------------------------------------

TITLE: Worker Node Join Command
DESCRIPTION: Command to join a worker node to the cluster using token-based discovery with CA pinning.

LANGUAGE: shell
CODE:
kubeadm join --discovery-token abcdef.1234567890abcdef --discovery-token-ca-cert-hash sha256:1234..cdef 1.2.3.4:6443

----------------------------------------

TITLE: Observing Event-based Container State Monitoring
DESCRIPTION: Console output demonstrating the kubelet's use of event-based container state monitoring with verbose logging.

LANGUAGE: console
CODE:
I0314 11:12:42.009542 1110177 evented.go:238] "Evented PLEG: Generated pod status from the received event" podUID=3b2c6172-b112-447a-ba96-94e7022912dc
I0314 11:12:44.623326 1110177 evented.go:238] "Evented PLEG: Generated pod status from the received event" podUID=b3fba5ea-a8c5-4b76-8f43-481e17e8ec40
I0314 11:12:44.714564 1110177 evented.go:238] "Evented PLEG: Generated pod status from the received event" podUID=b3fba5ea-a8c5-4b76-8f43-481e17e8ec40

----------------------------------------

TITLE: Defining Slow Storage Class in Kubernetes YAML
DESCRIPTION: YAML definition for a StorageClass named 'slow' that provisions standard disk-like Persistent Disks using the GCE PD provisioner.

LANGUAGE: yaml
CODE:
kind: StorageClass
apiVersion: storage.k8s.io/v1beta1
metadata:
  name: slow
provisioner: kubernetes.io/gce-pd
parameters:
  type: pd-standard

----------------------------------------

TITLE: Defining ExpandedDNSConfig Feature Gate Stages in YAML
DESCRIPTION: YAML configuration defining the lifecycle stages of the ExpandedDNSConfig feature gate, including alpha, beta, and stable phases with their respective version ranges and default values.

LANGUAGE: yaml
CODE:
stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.22"
    toVersion: "1.25"
  - stage: beta
    defaultValue: true
    fromVersion: "1.26"  
    toVersion: "1.27" 
  - stage: stable
    defaultValue: true
    fromVersion: "1.28"  
    toVersion: "1.29" 
removed: true

----------------------------------------

TITLE: Feature Gate Configuration YAML for BoundServiceAccountTokenVolume
DESCRIPTION: YAML configuration defining the feature gate stages from alpha through stable, including version ranges and default values. The feature was introduced in v1.13 as alpha, moved to beta in v1.21, became stable in v1.22, and was removed after v1.23.

LANGUAGE: yaml
CODE:
stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.13"
    toVersion: "1.20"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.21"
    toVersion: "1.21"    
  - stage: stable
    defaultValue: true
    fromVersion: "1.22"
    toVersion: "1.23"    

removed: true

----------------------------------------

TITLE: Dual-stack kubeadm Configuration YAML
DESCRIPTION: This YAML configuration file sets up a dual-stack Kubernetes cluster using kubeadm, including network settings and node registration details.

LANGUAGE: yaml
CODE:
---
apiVersion: kubeadm.k8s.io/v1beta4
kind: ClusterConfiguration
networking:
  podSubnet: 10.244.0.0/16,2001:db8:42:0::/56
  serviceSubnet: 10.96.0.0/16,2001:db8:42:1::/112
---
apiVersion: kubeadm.k8s.io/v1beta4
kind: InitConfiguration
localAPIEndpoint:
  advertiseAddress: "10.100.0.1"
  bindPort: 6443
nodeRegistration:
  kubeletExtraArgs:
  - name: "node-ip"
    value: "10.100.0.2,fd00:1:2:3::2"

----------------------------------------

TITLE: Generating kubeadm configuration files for etcd cluster in Kubernetes
DESCRIPTION: This script generates kubeadm configuration files for each host that will run an etcd member. It sets up the necessary parameters for etcd cluster formation.

LANGUAGE: bash
CODE:
# Update HOST0, HOST1 and HOST2 with the IPs of your hosts
export HOST0=10.0.0.6
export HOST1=10.0.0.7
export HOST2=10.0.0.8

# Update NAME0, NAME1 and NAME2 with the hostnames of your hosts
export NAME0="infra0"
export NAME1="infra1"
export NAME2="infra2"

# Create temp directories to store files that will end up on other hosts
mkdir -p /tmp/${HOST0}/ /tmp/${HOST1}/ /tmp/${HOST2}/

HOSTS=(${HOST0} ${HOST1} ${HOST2})
NAMES=(${NAME0} ${NAME1} ${NAME2})

for i in "${!HOSTS[@]}"; do
HOST=${HOSTS[$i]}
NAME=${NAMES[$i]}
cat << EOF > /tmp/${HOST}/kubeadmcfg.yaml
---
apiVersion: "kubeadm.k8s.io/v1beta4"
kind: InitConfiguration
nodeRegistration:
    name: ${NAME}
localAPIEndpoint:
    advertiseAddress: ${HOST}
---
apiVersion: "kubeadm.k8s.io/v1beta4"
kind: ClusterConfiguration
etcd:
    local:
        serverCertSANs:
        - "${HOST}"
        peerCertSANs:
        - "${HOST}"
        extraArgs:
        - name: initial-cluster
          value: ${NAMES[0]}=https://${HOSTS[0]}:2380,${NAMES[1]}=https://${HOSTS[1]}:2380,${NAMES[2]}=https://${HOSTS[2]}:2380
        - name: initial-cluster-state
          value: new
        - name: name
          value: ${NAME}
        - name: listen-peer-urls
          value: https://${HOST}:2380
        - name: listen-client-urls
          value: https://${HOST}:2379
        - name: advertise-client-urls
          value: https://${HOST}:2379
        - name: initial-advertise-peer-urls
          value: https://${HOST}:2380
EOF
done

----------------------------------------

TITLE: Generating kubeadm configuration files for etcd cluster in Kubernetes
DESCRIPTION: This script generates kubeadm configuration files for each host that will run an etcd member. It sets up the necessary parameters for etcd cluster formation.

LANGUAGE: bash
CODE:
# Update HOST0, HOST1 and HOST2 with the IPs of your hosts
export HOST0=10.0.0.6
export HOST1=10.0.0.7
export HOST2=10.0.0.8

# Update NAME0, NAME1 and NAME2 with the hostnames of your hosts
export NAME0="infra0"
export NAME1="infra1"
export NAME2="infra2"

# Create temp directories to store files that will end up on other hosts
mkdir -p /tmp/${HOST0}/ /tmp/${HOST1}/ /tmp/${HOST2}/

HOSTS=(${HOST0} ${HOST1} ${HOST2})
NAMES=(${NAME0} ${NAME1} ${NAME2})

for i in "${!HOSTS[@]}"; do
HOST=${HOSTS[$i]}
NAME=${NAMES[$i]}
cat << EOF > /tmp/${HOST}/kubeadmcfg.yaml
---
apiVersion: "kubeadm.k8s.io/v1beta4"
kind: InitConfiguration
nodeRegistration:
    name: ${NAME}
localAPIEndpoint:
    advertiseAddress: ${HOST}
---
apiVersion: "kubeadm.k8s.io/v1beta4"
kind: ClusterConfiguration
etcd:
    local:
        serverCertSANs:
        - "${HOST}"
        peerCertSANs:
        - "${HOST}"
        extraArgs:
        - name: initial-cluster
          value: ${NAMES[0]}=https://${HOSTS[0]}:2380,${NAMES[1]}=https://${HOSTS[1]}:2380,${NAMES[2]}=https://${HOSTS[2]}:2380
        - name: initial-cluster-state
          value: new
        - name: name
          value: ${NAME}
        - name: listen-peer-urls
          value: https://${HOST}:2380
        - name: listen-client-urls
          value: https://${HOST}:2379
        - name: advertise-client-urls
          value: https://${HOST}:2379
        - name: initial-advertise-peer-urls
          value: https://${HOST}:2380
EOF
done

----------------------------------------

TITLE: Viewing ZooKeeper Configuration
DESCRIPTION: kubectl command to view the contents of the zoo.cfg file in a ZooKeeper Pod.

LANGUAGE: bash
CODE:
kubectl exec zk-0 -- cat /opt/zookeeper/conf/zoo.cfg

----------------------------------------

TITLE: Generating Metrics Documentation
DESCRIPTION: Command to run the metrics documentation generator script from the root of the Kubernetes repository.

LANGUAGE: shell
CODE:
./test/instrumentation/update-documentation.sh

----------------------------------------

TITLE: Listing Supported Pod Sysctls in Kubernetes
DESCRIPTION: This code snippet shows the supported Pod sysctls in Kubernetes with their corresponding minimum kernel version requirements.

LANGUAGE: bash
CODE:
net.ipv4.ip_local_reserved_ports (since Kubernetes 1.27, needs kernel 3.16+)
net.ipv4.tcp_keepalive_time (since Kubernetes 1.29, needs kernel 4.5+)
net.ipv4.tcp_fin_timeout (since Kubernetes 1.29, needs kernel 4.6+)
net.ipv4.tcp_keepalive_intvl (since Kubernetes 1.29, needs kernel 4.5+)
net.ipv4.tcp_keepalive_probes (since Kubernetes 1.29, needs kernel 4.5+)
net.ipv4.tcp_syncookies (namespaced since kernel 4.6+)
net.ipv4.tcp_rmem (since Kubernetes 1.32, needs kernel 4.15+)
net.ipv4.tcp_wmem (since Kubernetes 1.32, needs kernel 4.15+)
net.ipv4.vs.conn_reuse_mode (used in ipvs proxy mode, needs kernel 4.1+)

----------------------------------------

TITLE: Querying Pod Status with PromQL
DESCRIPTION: PromQL query to count the number of pods that are not in ready state, grouped by namespace and pod.

LANGUAGE: promql
CODE:
count(kube_pod_status_ready{condition="false"}) by (namespace, pod)

----------------------------------------

TITLE: Retrieving PersistentVolume YAML in Kubernetes
DESCRIPTION: This command retrieves the YAML representation of a specific PersistentVolume, showing the new finalizer added in Kubernetes 1.31.

LANGUAGE: bash
CODE:
kubectl get pv pvc-a7b7e3ba-f837-45ba-b243-dec7d8aaed53 -o yaml

----------------------------------------

TITLE: Defining a Kubernetes Shoot Cluster in YAML
DESCRIPTION: Example YAML manifest for defining a Kubernetes shoot cluster to be provisioned by Gardener. Specifies cloud provider, networking, Kubernetes version, and other cluster configuration details.

LANGUAGE: yaml
CODE:
apiVersion: garden.sapcloud.io/v1beta1
kind: Shoot
metadata:
  name: dev-eu1
  namespace: team-a
spec:
  cloud:
    profile: aws
    region: us-east-1
    secretBindingRef:
      name: team-a-aws-account-credentials
    aws:
      machineImage:
        ami: ami-34237c4d
        name: CoreOS
      networks:
        vpc:
          cidr: 10.250.0.0/16
        ...
      workers:
      - name: cpu-pool
        machineType: m4.xlarge
        volumeType: gp2
        volumeSize: 20Gi
        autoScalerMin: 2
        autoScalerMax: 5
  dns:
    provider: aws-route53
    domain: dev-eu1.team-a.example.com
  kubernetes:
    version: 1.10.2
  backup:
    ...
  maintenance:
    ...
  addons:
    cluster-autoscaler:
      enabled: true
    ...

----------------------------------------

TITLE: Kubernetes API Server Flags
DESCRIPTION: List of key flags set by kubeadm when configuring the Kubernetes API server

LANGUAGE: markdown
CODE:
- `--insecure-port=0`
- `--enable-bootstrap-token-auth=true`
- `--allow-privileged=true`
- `--requestheader-client-ca-file=front-proxy-ca.crt`
- `--enable-admission-plugins=NamespaceLifecycle,LimitRanger,ServiceAccount,...`
- `--kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname`

----------------------------------------

TITLE: Installing kubectl convert Plugin on Linux
DESCRIPTION: This code snippet shows how to download, validate, and install the kubectl convert plugin on Linux systems.

LANGUAGE: bash
CODE:
curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl-convert"
curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl-convert.sha256"
echo "$(cat kubectl-convert.sha256) kubectl-convert" | sha256sum --check
sudo install -o root -g root -m 0755 kubectl-convert /usr/local/bin/kubectl-convert
kubectl convert --help
rm kubectl-convert kubectl-convert.sha256

----------------------------------------

TITLE: Running with Logging Seccomp Profile
DESCRIPTION: This console output demonstrates running the application with a seccomp profile set to log blocked syscalls, showing how the log enricher provides additional information.

LANGUAGE: console
CODE:
> sudo ./spoc run -p /tmp/no-uname-profile-log.json ./main
10:48:07.470126 Reading file /tmp/no-uname-profile-log.json
10:48:07.470234 Setting up seccomp
10:48:07.470245 Load seccomp profile
10:48:07.470302 Starting audit log enricher
10:48:07.470339 Enricher reading from file /var/log/audit/audit.log
10:48:07.470889 Running command with PID: 522268
10:48:07.472007 Seccomp: uname (63)

----------------------------------------

TITLE: Utilisation d'un PVC dans un Pod
DESCRIPTION: Exemple d'utilisation d'un PersistentVolumeClaim comme volume dans un Pod

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: mypod
spec:
  containers:
    - name: myfrontend
      image: nginx
      volumeMounts:
      - mountPath: "/var/www/html"
        name: mypd
  volumes:
    - name: mypd
      persistentVolumeClaim:
        claimName: myclaim

----------------------------------------

TITLE: Defining Pod with Implicit Groups in Kubernetes YAML
DESCRIPTION: This YAML snippet defines a Pod with specific user, group, and supplemental group settings. It demonstrates how implicit groups from the container image can affect the final group memberships.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: implicit-groups
spec:
  securityContext:
    runAsUser: 1000
    runAsGroup: 3000
    supplementalGroups:
    - 4000
  containers:
  - name: ctr
    image: busybox
    command: ["sleep", "1d"]


----------------------------------------

TITLE: Converting Deployment to apps/v1 API in Kubernetes
DESCRIPTION: This command uses kubectl to convert an older Deployment configuration to the apps/v1 API version. It takes a YAML file as input and outputs the converted version.

LANGUAGE: bash
CODE:
kubectl convert -f ./my-deployment.yaml --output-version apps/v1

----------------------------------------

TITLE: Generating kubeadm completion code for bash and zsh
DESCRIPTION: This snippet shows the basic syntax for generating kubeadm completion code for bash or zsh shells. It requires specifying the shell type as an argument.

LANGUAGE: bash
CODE:
kubeadm completion SHELL [flags]

----------------------------------------

TITLE: Creating GKE Clusters for Federation in Bash
DESCRIPTION: Creates three Google Kubernetes Engine clusters in different geographical regions (US, Europe, Asia) using gcloud commands.

LANGUAGE: bash
CODE:
gcloud container clusters create gce-us-east1-b --project=${FED_PROJECT} --zone=us-east1-b --scopes cloud-platform,storage-ro,logging-write,monitoring-write,service-control,service-management,https://www.googleapis.com/auth/ndev.clouddns.readwrite

gcloud container clusters create gce-europe-west1-b --project=${FED_PROJECT} --zone=europe-west1-b --scopes cloud-platform,storage-ro,logging-write,monitoring-write,service-control,service-management,https://www.googleapis.com/auth/ndev.clouddns.readwrite

gcloud container clusters create gce-asia-east1-a --project=${FED_PROJECT} --zone=asia-east1-a --scopes cloud-platform,storage-ro,logging-write,monitoring-write,service-control,service-management,https://www.googleapis.com/auth/ndev.clouddns.readwrite

----------------------------------------

TITLE: Example: Setting Service Account for Deployment
DESCRIPTION: This example demonstrates how to set the service account of a deployment named 'nginx-deployment' to 'serviceaccount1'.

LANGUAGE: bash
CODE:
kubectl set serviceaccount deployment nginx-deployment serviceaccount1

----------------------------------------

TITLE: Configuring KubeProxy Draining Feature Gate in YAML
DESCRIPTION: YAML configuration defining the feature gate stages and properties for KubeProxy draining on terminating nodes. Specifies the progression from alpha (v1.28) through beta (v1.30) to stable (v1.31) with corresponding default values.

LANGUAGE: yaml
CODE:
title: KubeProxyDrainingTerminatingNodes
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha
    defaultValue: false
    fromVersion: "1.28"
    toVersion: "1.30"
  - stage: beta
    defaultValue: true
    fromVersion: "1.30"
    toVersion: "1.30"
  - stage: stable
    defaultValue: true
    fromVersion: "1.31"

----------------------------------------

TITLE: Installing Kong Ingress Controller on Kubernetes
DESCRIPTION: Command to deploy Kong Ingress Controller and related resources in DB-less mode.

LANGUAGE: bash
CODE:
$ kubectl apply -f https://bit.ly/k4k8s

----------------------------------------

TITLE: Triggering Windows Operational Tests in Kubernetes Pull Requests
DESCRIPTION: This bot command can be used in a Kubernetes pull request to run Windows Operational Readiness tests against the changes.

LANGUAGE: shell
CODE:
/test operational-tests-capz-windows-2019

----------------------------------------

TITLE: Installing Kubeflow Core Components
DESCRIPTION: Commands to set up a new Kubeflow deployment using ksonnet. Creates a namespace, initializes a ksonnet app, installs Kubeflow components, and deploys the core functionality.

LANGUAGE: bash
CODE:
# Create a namespace for kubeflow deployment
NAMESPACE=kubeflow
kubectl create namespace ${NAMESPACE}
VERSION=v0.1.3

# Initialize a ksonnet app. Set the namespace for its default environment.
APP_NAME=my-kubeflow
ks init ${APP_NAME}
cd ${APP_NAME}
ks env set default --namespace ${NAMESPACE}

# Install Kubeflow components
ks registry add kubeflow github.com/kubeflow/kubeflow/tree/${VERSION}/kubeflow
ks pkg install kubeflow/core@${VERSION}
ks pkg install kubeflow/tf-serving@${VERSION}
ks pkg install kubeflow/tf-job@${VERSION}

# Create templates for core components
ks generate kubeflow-core kubeflow-core

# Deploy Kubeflow
ks apply default -c kubeflow-core

----------------------------------------

TITLE: Generating Kubeconfig Files with Kubeadm
DESCRIPTION: This command generates all kubeconfig files for a Kubernetes cluster. It can be customized with various options to specify API server address, port, certificate directory, and other cluster configuration parameters.

LANGUAGE: bash
CODE:
kubeadm init phase kubeconfig all [flags]

----------------------------------------

TITLE: Executing kubectl rollout status Command
DESCRIPTION: This command shows the syntax for running the kubectl rollout status command. It watches the status of the latest rollout until completion, unless specified otherwise with flags.

LANGUAGE: bash
CODE:
kubectl rollout status (TYPE NAME | TYPE/NAME) [flags]

----------------------------------------

TITLE: Predicting Pull Request Type with Trained Model
DESCRIPTION: Python script to use the trained machine learning model to predict the type of a pull request based on its release notes.

LANGUAGE: bash
CODE:
> ./main predict --test
INFO | Testing positive text:

        Fix concurrent map access panic
        Don't watch .mount cgroups to reduce number of inotify watches
        Fix NVML initialization race condition
        Fix brtfs disk metrics when using a subdirectory of a subvolume

INFO | Got prediction result: 0.9940581321716309
INFO | Matched expected positive prediction result
INFO | Testing negative text:

        action required
        1. Currently, if users were to explicitly specify CacheSize of 0 for
           KMS provider, they would end-up with a provider that caches up to
           1000 keys. This PR changes this behavior.
           Post this PR, when users supply 0 for CacheSize this will result in
           a validation error.
        2. CacheSize type was changed from int32 to *int32. This allows
           defaulting logic to differentiate between cases where users
           explicitly supplied 0 vs. not supplied any value.
        3. KMS Provider's endpoint (path to Unix socket) is now validated when
           the EncryptionConfiguration files is loaded. This used to be handled
           by the GRPCService.

INFO | Got prediction result: 0.1251964420080185
INFO | Matched expected negative prediction result

----------------------------------------

TITLE: Configuring DNS Service with Static ClusterIP in Kubernetes
DESCRIPTION: Example YAML configuration for creating a DNS Service (CoreDNS) with a static ClusterIP address. Shows how to set up a Service in the kube-system namespace with specific ports for DNS services and a predefined cluster IP address.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Service
metadata:
  labels:
    k8s-app: kube-dns
    kubernetes.io/cluster-service: "true"
    kubernetes.io/name: CoreDNS
  name: kube-dns
  namespace: kube-system
spec:
  clusterIP: 10.96.0.10
  ports:
  - name: dns
    port: 53
    protocol: UDP
    targetPort: 53
  - name: dns-tcp
    port: 53
    protocol: TCP
    targetPort: 53
  selector:
    k8s-app: kube-dns
  type: ClusterIP

----------------------------------------

TITLE: Configuring Scheduler with ClusterConfiguration in YAML
DESCRIPTION: Example of customizing kube-scheduler flags and volumes using the ClusterConfiguration object, demonstrating how to specify a custom scheduler configuration file.

LANGUAGE: yaml
CODE:
apiVersion: kubeadm.k8s.io/v1beta4
kind: ClusterConfiguration
kubernetesVersion: v1.16.0
scheduler:
  extraArgs:
  - name: "config"
    value: "/etc/kubernetes/scheduler-config.yaml"
  extraVolumes:
    - name: schedulerconfig
      hostPath: /home/johndoe/schedconfig.yaml
      mountPath: /etc/kubernetes/scheduler-config.yaml
      readOnly: true
      pathType: "File"

----------------------------------------

TITLE: Applying a Kubernetes Secret
DESCRIPTION: kubectl command to create a Secret from a YAML manifest file.

LANGUAGE: shell
CODE:
kubectl apply -f ./secret.yaml

----------------------------------------

TITLE: Creating Node Problem Detector YAML Configuration
DESCRIPTION: YAML configuration for setting up Node Problem Detector as a DaemonSet in Kubernetes. This example shows how to define the basic deployment configuration.

LANGUAGE: yaml
CODE:
{{% code_sample file="debug/node-problem-detector.yaml" %}}

----------------------------------------

TITLE: Creating Node Problem Detector YAML Configuration
DESCRIPTION: YAML configuration for setting up Node Problem Detector as a DaemonSet in Kubernetes. This example shows how to define the basic deployment configuration.

LANGUAGE: yaml
CODE:
{{% code_sample file="debug/node-problem-detector.yaml" %}}

----------------------------------------

TITLE: Creating a flowchart diagram for Ingress
DESCRIPTION: Example Mermaid code for creating a flowchart diagram showing Ingress in Kubernetes

LANGUAGE: mermaid
CODE:
graph LR;
client([client])-. Ingress-managed <br> load balancer .->ingress[Ingress];
ingress-->|routing rule|service[Service];
subgraph cluster
ingress;
service-->pod1[Pod];
service-->pod2[Pod];
end
classDef plain fill:#ddd,stroke:#fff,stroke-width:4px,color:#000;
classDef k8s fill:#326ce5,stroke:#fff,stroke-width:4px,color:#fff;
classDef cluster fill:#fff,stroke:#bbb,stroke-width:2px,color:#326ce5;
class ingress,service,pod1,pod2 k8s;
class client plain;
class cluster cluster;

----------------------------------------

TITLE: Configuring PodDisruptionConditions Feature Gate in Kubernetes YAML
DESCRIPTION: This YAML configuration defines the stages and default values for the PodDisruptionConditions feature gate. It specifies the feature's progression from alpha to stable across different Kubernetes versions.

LANGUAGE: yaml
CODE:
---
title: PodDisruptionConditions
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.25"
    toVersion: "1.25"
  - stage: beta
    defaultValue: true
    fromVersion: "1.26"
    toVersion: "1.30"
  - stage: stable
    defaultValue: true
    fromVersion: "1.31"
---

----------------------------------------

TITLE: Retrieving FlowSchema and PriorityLevelConfiguration UIDs
DESCRIPTION: kubectl commands to get the UID to name mappings for FlowSchema and PriorityLevelConfiguration objects.

LANGUAGE: shell
CODE:
kubectl get flowschema -o custom-columns="uid:{metadata.uid},name:{metadata.name}"
kubectl get prioritylevelconfiguration -o custom-columns="uid:{metadata.uid},name:{metadata.name}"

----------------------------------------

TITLE: Viewing Pod Information
DESCRIPTION: Command to display detailed information about the running pods including their IP addresses and nodes.

LANGUAGE: shell
CODE:
kubectl get pods --output=wide

----------------------------------------

TITLE: Creating Namespaced Informers in Go
DESCRIPTION: Demonstrates how to create filtered shared informers for specific namespaces and label selectors using the new NewFilteredSharedInformerFactory constructor.

LANGUAGE: go
CODE:
import "k8s.io/client-go/informers"
...
sharedInformers := informers.NewFilteredSharedInformerFactory(
 client,
 30*time.Minute,
 "some-namespace",
 func(opt *metav1.ListOptions) {
  opt.LabelSelector = "foo=bar"
 },
)

----------------------------------------

TITLE: PROXY Protocol Example Format
DESCRIPTION: Example showing the format of a PROXY protocol v1 preamble that describes an incoming TCP connection.

LANGUAGE: text
CODE:
PROXY TCP4 192.0.2.202 10.0.42.7 12345 7\r\n

----------------------------------------

TITLE: Creating Page Information Box in Hugo
DESCRIPTION: This YAML snippet shows how to use a Hugo shortcode to create a page information box with a primary color and content about the Kubernetes hardening guide updates.

LANGUAGE: yaml
CODE:
{{% pageinfo color="primary" %}}
**Update, November 2023:**

The National Security Agency (NSA) and the Cybersecurity and Infrastructure Security Agency (CISA) released the 1.0 version of the Kubernetes hardening guide in August 2021 and updated it based on industry feedback in March 2022 (version 1.1).

The most recent version of the Kubernetes hardening guidance was released in August 2022 with corrections and clarifications. Version 1.2 outlines a number of recommendations for [hardening Kubernetes clusters](https://media.defense.gov/2022/Aug/29/2003066362/-1/-1/0/CTR_KUBERNETES_HARDENING_GUIDANCE_1.2_20220829.PDF).
{{% /pageinfo %}}

----------------------------------------

TITLE: Defining CSIDriverRegistry Feature Gate Stages in YAML
DESCRIPTION: This YAML configuration specifies the different stages of the CSIDriverRegistry feature gate, including alpha, beta, and stable stages with their respective version ranges and default values. It also indicates that the feature has been removed.

LANGUAGE: yaml
CODE:
title: CSIDriverRegistry
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.12"
    toVersion: "1.13"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.14"
    toVersion: "1.17"    
  - stage: stable
    defaultValue: true
    fromVersion: "1.18"
    toVersion: "1.21"    

removed: true

----------------------------------------

TITLE: Displaying Node Resource Usage with kubectl top node
DESCRIPTION: Examples of using the kubectl top node command to show metrics for all nodes or a specific node.

LANGUAGE: shell
CODE:
# Show metrics for all nodes
kubectl top node
  
# Show metrics for a given node
kubectl top node NODE_NAME

----------------------------------------

TITLE: PersistentVolume YAML with New Finalizer
DESCRIPTION: This YAML snippet shows a PersistentVolume object with the new finalizer 'external-provisioner.volume.kubernetes.io/finalizer' added in Kubernetes 1.31 to prevent premature deletion.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: PersistentVolume
metadata:
  annotations:
    pv.kubernetes.io/provisioned-by: csi.vsphere.vmware.com
  creationTimestamp: "2021-11-17T19:28:56Z"
  finalizers:
  - kubernetes.io/pv-protection
  - external-provisioner.volume.kubernetes.io/finalizer
  name: pvc-a7b7e3ba-f837-45ba-b243-dec7d8aaed53
  resourceVersion: "194711"
  uid: 087f14f2-4157-4e95-8a70-8294b039d30e
spec:
  accessModes:
  - ReadWriteOnce
  capacity:
    storage: 1Gi
  claimRef:
    apiVersion: v1
    kind: PersistentVolumeClaim
    name: example-vanilla-block-pvc
    namespace: default
    resourceVersion: "194677"
    uid: a7b7e3ba-f837-45ba-b243-dec7d8aaed53
  csi:
    driver: csi.vsphere.vmware.com
    fsType: ext4
    volumeAttributes:
      storage.kubernetes.io/csiProvisionerIdentity: 1637110610497-8081-csi.vsphere.vmware.com
      type: vSphere CNS Block Volume
    volumeHandle: 2dacf297-803f-4ccc-afc7-3d3c3f02051e
  persistentVolumeReclaimPolicy: Delete
  storageClassName: example-vanilla-block-sc
  volumeMode: Filesystem
status:
  phase: Bound

----------------------------------------

TITLE: Configuring Couchbase Worker Node in Kubernetes
DESCRIPTION: Kubernetes configuration for creating worker Couchbase nodes. Uses a replication controller that can be scaled and connects to the master node via service discovery.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: ReplicationController
metadata:
  name: couchbase-worker-rc
spec:
  replicas: 1
  selector:
    app: couchbase-worker-pod
  template:
    metadata:
      labels:
        app: couchbase-worker-pod
    spec:
      containers:
      - name: couchbase-worker
        image: arungupta/couchbase:k8s
        env:
          - name: TYPE
            value: "WORKER"
          - name: COUCHBASE_MASTER
            value: "couchbase-master-service"
          - name: AUTO_REBALANCE
            value: "false"
        ports:
        - containerPort: 8091

----------------------------------------

TITLE: Checking etcd Cluster Health using etcdctl
DESCRIPTION: This snippet demonstrates how to check the health of the etcd cluster using the etcdctl command-line tool. It includes the command to list etcd members with secure communication.

LANGUAGE: shell
CODE:
ETCDCTL_API=3 etcdctl --endpoints 127.0.0.1:2379 \
  --cert=/etc/kubernetes/pki/etcd/server.crt \
  --key=/etc/kubernetes/pki/etcd/server.key \
  --cacert=/etc/kubernetes/pki/etcd/ca.crt \
  member list
...
dc543c4d307fadb9, started, node1, https://10.6.177.40:2380, https://10.6.177.40:2379, false

----------------------------------------

TITLE: Generating Static Pod Manifest for Local Etcd in Kubernetes
DESCRIPTION: This command generates a static Pod manifest file for local etcd in Kubernetes. It is part of the 'kubeadm init' phase commands and can be used to set up the etcd component separately.

LANGUAGE: bash
CODE:
kubeadm init phase etcd [flags]

----------------------------------------

TITLE: Configuring HAProxy for Canary Routing
DESCRIPTION: HAProxy configuration using Kubernetes ConfigMaps to route traffic between different canary stages based on the X-Traffic-Group header. It defines backends for internal, canary, paid, and enterprise traffic.

LANGUAGE: haproxy
CODE:
frontend http-in
 bind *:80
 log 127.0.0.1 local2 debug

 acl traffic_internal hdr(X-Traffic-Group) -m str -i INTERNAL
 acl traffic_free  hdr(X-Traffic-Group) -m str -i FREE
 acl traffic_enterprise hdr(X-Traffic-Group) -m str -i ENTERPRISE

 use_backend internal if traffic_internal
 use_backend canary if traffic_free
 use_backend enterprise if traffic_enterprise

 default_backend paid

backend internal
 balance roundrobin
 server internal-lb  user-resource-service-internal:8080 resolvers dns check inter 2000

backend canary
 balance roundrobin
 server canary-lb    user-resource-service-canary:8080 resolvers dns check inter 2000 weight 5
 server production-lb user-resource-service-production:8080 resolvers dns check inter 2000 weight 95

backend paid
 balance roundrobin
 server canary-paid-lb user-resource-service-paid:8080 resolvers dns check inter 2000 weight 5
 server production-lb user-resource-service-production:8080 resolvers dns check inter 2000 weight 95

backend enterprise
 balance roundrobin
 server production-lb user-resource-service-production:8080 resolvers dns check inter 2000 weight 100

----------------------------------------

TITLE: Using Kubeadm Certs Command
DESCRIPTION: Basic command syntax for using kubeadm certs to manage Kubernetes certificates. The command provides functionality for certificate handling with optional help flag and rootfs path specification.

LANGUAGE: bash
CODE:
kubeadm certs [flags]

----------------------------------------

TITLE: Kubernetes Deployment and Service Configuration
DESCRIPTION: YAML configuration for deploying the application to Kubernetes, including a LoadBalancer service and a deployment with 4 replicas.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Service
metadata:
  name: hello-python-service
spec:
  selector:
    app: hello-python
  ports:
  - protocol: "TCP"
    port: 6000
    targetPort: 5000
  type: LoadBalancer

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hello-python
spec:
  selector:
    matchLabels:
      app: hello-python
  replicas: 4
  template:
    metadata:
      labels:
        app: hello-python
    spec:
      containers:
      - name: hello-python
        image: hello-python:latest
        imagePullPolicy: Never
        ports:
        - containerPort: 5000

----------------------------------------

TITLE: Updating APT Package Index
DESCRIPTION: This command updates the APT package index after adding the new Kubernetes repository.

LANGUAGE: shell
CODE:
sudo apt-get update

----------------------------------------

TITLE: Configuring Rate Limiting Handler
DESCRIPTION: Sets up a memquota handler to implement rate limiting for the ratings service.

LANGUAGE: yaml
CODE:
apiVersion: "config.istio.io/v1alpha2"
kind: memquota
metadata:
 name: handler
 namespace: default
spec:
 quotas:
 - name: requestcount.quota.default
     maxAmount: 5000
     validDuration: 1s
     overrides:
     - dimensions:
             destination: ratings
         maxAmount: 1
         validDuration: 1s

----------------------------------------

TITLE: StatefulSetSpec Definition
DESCRIPTION: Definition of the StatefulSetSpec object that describes the desired state of a StatefulSet

LANGUAGE: go
CODE:
type StatefulSetSpec struct {
  Replicas *int32
  Selector *metav1.LabelSelector
  Template v1.PodTemplateSpec
  VolumeClaimTemplates []v1.PersistentVolumeClaim
  ServiceName string
  PodManagementPolicy PodManagementPolicyType
  UpdateStrategy StatefulSetUpdateStrategy
  RevisionHistoryLimit *int32
  MinReadySeconds int32
  PersistentVolumeClaimRetentionPolicy *StatefulSetPersistentVolumeClaimRetentionPolicy
  Ordinals *StatefulSetOrdinals
}

----------------------------------------

TITLE: Upgrading kube-proxy addon with kubeadm in Kubernetes
DESCRIPTION: This command upgrades the kube-proxy addon in a Kubernetes cluster. It can be run with various options to customize the upgrade process, including specifying a configuration file, performing a dry run, and setting the kubeconfig file location.

LANGUAGE: bash
CODE:
kubeadm upgrade apply phase addon kube-proxy [flags]

----------------------------------------

TITLE: Creating a PersistentVolume using Go
DESCRIPTION: Example Go code for creating a PersistentVolume

LANGUAGE: go
CODE:
pv := &corev1.PersistentVolume{
  ObjectMeta: metav1.ObjectMeta{
    Name: "example-pv",
  },
  Spec: corev1.PersistentVolumeSpec{
    Capacity: corev1.ResourceList{
      corev1.ResourceStorage: resource.MustParse("5Gi"),
    },
    AccessModes: []corev1.PersistentVolumeAccessMode{corev1.ReadWriteOnce},
    PersistentVolumeReclaimPolicy: corev1.PersistentVolumeReclaimRetain,
    StorageClassName: "slow",
    PersistentVolumeSource: corev1.PersistentVolumeSource{
      NFS: &corev1.NFSVolumeSource{
        Server: "nfs-server.default.svc.cluster.local",
        Path: "/path",
      },
    },
  },
}

createdPV, err := client.CoreV1().PersistentVolumes().Create(context.TODO(), pv, metav1.CreateOptions{})

----------------------------------------

TITLE: Creating a PersistentVolume using Go
DESCRIPTION: Example Go code for creating a PersistentVolume

LANGUAGE: go
CODE:
pv := &corev1.PersistentVolume{
  ObjectMeta: metav1.ObjectMeta{
    Name: "example-pv",
  },
  Spec: corev1.PersistentVolumeSpec{
    Capacity: corev1.ResourceList{
      corev1.ResourceStorage: resource.MustParse("5Gi"),
    },
    AccessModes: []corev1.PersistentVolumeAccessMode{corev1.ReadWriteOnce},
    PersistentVolumeReclaimPolicy: corev1.PersistentVolumeReclaimRetain,
    StorageClassName: "slow",
    PersistentVolumeSource: corev1.PersistentVolumeSource{
      NFS: &corev1.NFSVolumeSource{
        Server: "nfs-server.default.svc.cluster.local",
        Path: "/path",
      },
    },
  },
}

createdPV, err := client.CoreV1().PersistentVolumes().Create(context.TODO(), pv, metav1.CreateOptions{})

----------------------------------------

TITLE: Downloading and Preparing cfssl Tools for Kubernetes Certificate Generation
DESCRIPTION: These commands download and prepare the cfssl, cfssljson, and cfssl-certinfo tools for generating Kubernetes certificates. The commands may need to be adapted based on the hardware architecture and cfssl version being used.

LANGUAGE: bash
CODE:
curl -L https://pkg.cfssl.org/R1.2/cfssl_linux-amd64 -o cfssl
chmod +x cfssl
curl -L https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64 -o cfssljson
chmod +x cfssljson
curl -L https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64 -o cfssl-certinfo
chmod +x cfssl-certinfo

----------------------------------------

TITLE: Executing a kubectl Plugin in Bash
DESCRIPTION: This snippet demonstrates the command to execute a kubectl plugin named 'myplugin'. Plugins are executables in the PATH following the naming pattern 'kubectl-myplugin' and can be run as if they were native kubectl sub-commands.

LANGUAGE: bash
CODE:
kubectl myplugin

----------------------------------------

TITLE: Sample kubeadm Configuration File Header
DESCRIPTION: Example YAML header for a kubeadm configuration file, showing the apiVersion and kind fields

LANGUAGE: yaml
CODE:
apiVersion: kubeadm.k8s.io/v1beta3
kind: InitConfiguration

----------------------------------------

TITLE: Installing KubeInvaders using Helm
DESCRIPTION: This Helm command installs KubeInvaders on a Kubernetes cluster. It sets the target namespaces and specifies the name and namespace for the KubeInvaders deployment.

LANGUAGE: yaml
CODE:
# Please set target_namespace to set your target namespace!\nhelm install --set-string target_namespace="namespace1,namespace2" \n--name kubeinvaders --namespace kubeinvaders ./helm-charts/kubeinvaders

----------------------------------------

TITLE: Configuring APIServer with ClusterConfiguration in YAML
DESCRIPTION: Example of customizing kube-apiserver flags using the ClusterConfiguration object, demonstrating how to enable admission plugins and configure audit logging.

LANGUAGE: yaml
CODE:
apiVersion: kubeadm.k8s.io/v1beta4
kind: ClusterConfiguration
kubernetesVersion: v1.16.0
apiServer:
  extraArgs:
  - name: "enable-admission-plugins"
    value: "AlwaysPullImages,DefaultStorageClass"
  - name: "audit-log-path"
    value: "/home/johndoe/audit.log"

----------------------------------------

TITLE: TokenReview API Metadata
DESCRIPTION: API metadata specification defining version, import path, and resource kind

LANGUAGE: yaml
CODE:
api_metadata:
  apiVersion: "authentication.k8s.io/v1"
  import: "k8s.io/api/authentication/v1"
  kind: "TokenReview"

----------------------------------------

TITLE: Embedding YouTube Video with HTML iframe
DESCRIPTION: Shows how to embed a YouTube video using an HTML iframe element in a Markdown document.

LANGUAGE: html
CODE:
"https://youtube.com/embed/xSMNR2fcoLs"

----------------------------------------

TITLE: Adding a Note Block in Kubernetes Markdown Documentation
DESCRIPTION: This snippet demonstrates how to add a note block in Kubernetes markdown documentation using custom shortcodes.

LANGUAGE: markdown
CODE:
{{< note >}}
If you're a maintainer for a Kubernetes project and need help hosting your own docs,
ask for help in [#sig-docs on Kubernetes Slack](https://kubernetes.slack.com/messages/C1J0BPD2M/).
{{< /note >}}

----------------------------------------

TITLE: SELinux Relabeling Commands
DESCRIPTION: Bash commands to relabel the graphroot directory to match SELinux context of /var/lib/containers/storage

LANGUAGE: bash
CODE:
semanage fcontext -a -e /var/lib/containers/storage <YOUR-STORAGE-PATH>
restorecon -R -v <YOUR-STORAGE-PATH>

----------------------------------------

TITLE: Standard StorageClass Definition
DESCRIPTION: Basic StorageClass definition with standard configuration including reclaim policy and volume binding mode

LANGUAGE: yaml
CODE:
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: standard
provisioner: kubernetes.io/aws-ebs
parameters:
  type: gp2
reclaimPolicy: Retain
allowVolumeExpansion: true
mountOptions:
  - debug
volumeBindingMode: Immediate

----------------------------------------

TITLE: Configuring OpenAPIV3 Feature Gate Stages in Kubernetes YAML
DESCRIPTION: This YAML configuration defines the lifecycle stages of the OpenAPIV3 feature gate in Kubernetes. It specifies alpha, beta, and stable stages with their respective version ranges and default values.

LANGUAGE: yaml
CODE:
title: OpenAPIV3
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.23"
    toVersion: "1.23"
  - stage: beta
    defaultValue: true
    fromVersion: "1.24"  
    toVersion: "1.26" 
  - stage: stable
    defaultValue: true
    fromVersion: "1.27"  
    toVersion: "1.28" 
removed: true

----------------------------------------

TITLE: Configuring Pod with Persistent Volume Claim
DESCRIPTION: YAML configuration for deploying a nginx pod that uses a persistent volume claim for storage mounted at /data.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: kube-pv-demo
spec:
  containers:
  - name: data-pv-demo
    image: nginx
    volumeMounts:
    - name: test-kube-pv1
      mountPath: /data
    ports:
    - containerPort: 80
  volumes:
  - name: test-kube-pv1
    persistentVolumeClaim:
      claimName: pv-claim-test-petset-0

----------------------------------------

TITLE: Defining Kubernetes Service for Production Track
DESCRIPTION: YAML definition for a Kubernetes Service representing the production track of a microservice. It specifies labels and selectors to route traffic to the correct pods.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Service
metadata:
 name: account-service-production
 labels:
 app: account-service-production
 tier: service
 lb: private
spec:
 ports:
 - port: 8080
   name: http
   targetPort: 8080
   protocol: TCP
 selector:
   app: account-service
   tier: service
   track: production

----------------------------------------

TITLE: HTTP Request for Creating SelfSubjectReview
DESCRIPTION: HTTP POST endpoint for creating a SelfSubjectReview resource.

LANGUAGE: http
CODE:
POST /apis/authentication.k8s.io/v1/selfsubjectreviews

----------------------------------------

TITLE: Configuring Bootstrap Tokens with kubeadm
DESCRIPTION: This command configures bootstrap tokens for the Kubernetes cluster, which are used for node authentication during the joining process.

LANGUAGE: bash
CODE:
kubeadm init phase bootstrap-token

----------------------------------------

TITLE: Configuring CSIVolumeHealth Feature Gate in YAML
DESCRIPTION: YAML configuration for the CSIVolumeHealth feature gate, which was introduced as an alpha feature in Kubernetes 1.21. This feature gate enables CSI volume health monitoring capabilities on nodes.

LANGUAGE: yaml
CODE:
title: CSIVolumeHealth
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha
    defaultValue: false
    fromVersion: "1.21"

----------------------------------------

TITLE: Configuring Webhook Admission Configuration
DESCRIPTION: Example YAML configuration for admission control configuration file specifying webhook credentials

LANGUAGE: yaml
CODE:
apiVersion: apiserver.config.k8s.io/v1
kind: AdmissionConfiguration
plugins:
- name: ValidatingAdmissionWebhook
  configuration:
    apiVersion: apiserver.config.k8s.io/v1
    kind: WebhookAdmissionConfiguration
    kubeConfigFile: "<path-to-kubeconfig-file>"
- name: MutatingAdmissionWebhook
  configuration:
    apiVersion: apiserver.config.k8s.io/v1
    kind: WebhookAdmissionConfiguration
    kubeConfigFile: "<path-to-kubeconfig-file>"

----------------------------------------

TITLE: StatefulSet PVC Retention Policy Matrix Examples
DESCRIPTION: Examples demonstrating the four possible combinations of whenDeleted and whenScaled policies for StatefulSet PVC retention. These policies control whether PVCs are automatically deleted or retained when a StatefulSet is deleted or scaled down.

LANGUAGE: yaml
CODE:
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: example
spec:
  persistentVolumeClaimRetentionPolicy:
    whenDeleted: Retain    # or Delete
    whenScaled: Retain     # or Delete

----------------------------------------

TITLE: Suspending and Resuming a Job
DESCRIPTION: Commands to suspend and resume a Job using kubectl patch

LANGUAGE: shell
CODE:
kubectl patch job/myjob --type=strategic --patch '{"spec":{"suspend":true}}'

LANGUAGE: shell
CODE:
kubectl patch job/myjob --type=strategic --patch '{"spec":{"suspend":false}}'

----------------------------------------

TITLE: Implementing PodSecurityPolicy for Non-Root Containers in Kubernetes
DESCRIPTION: This YAML snippet shows how to create a PodSecurityPolicy that enforces non-root execution for all containers, preventing the exploitation of the runc vulnerability.

LANGUAGE: yaml
CODE:
---
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: non-root
spec:
  privileged: false
  allowPrivilegeEscalation: false
  runAsUser:
    # Require the container to run without root privileges.
    rule: 'MustRunAsNonRoot'

----------------------------------------

TITLE: Example: Creating TLS Secret
DESCRIPTION: Demonstrates creating a TLS secret named 'tls-secret' using specific certificate and key files.

LANGUAGE: bash
CODE:
kubectl create secret tls tls-secret --cert=path/to/tls.crt --key=path/to/tls.key

----------------------------------------

TITLE: Executing kubeadm init phase kubeconfig Command in Bash
DESCRIPTION: This command generates all kubeconfig files necessary to establish the control plane and the admin kubeconfig file in Kubernetes. It is part of the kubeadm init phase process.

LANGUAGE: bash
CODE:
kubeadm init phase kubeconfig [flags]

----------------------------------------

TITLE: Listing Cluster Roles in Kubernetes
DESCRIPTION: This snippet demonstrates how to use kubectl to list cluster roles in the kube-system namespace, showing the integration of RBAC system roles in Kubernetes.

LANGUAGE: bash
CODE:
➜  kubectl get clusterroles --namespace=kube-system

NAME                    KIND

admin ClusterRole.v1beta1.rbac.authorization.k8s.io

cluster-admin ClusterRole.v1beta1.rbac.authorization.k8s.io

edit ClusterRole.v1beta1.rbac.authorization.k8s.io

kubelet-api-admin ClusterRole.v1beta1.rbac.authorization.k8s.io

system:auth-delegator ClusterRole.v1beta1.rbac.authorization.k8s.io

system:basic-user ClusterRole.v1beta1.rbac.authorization.k8s.io

system:controller:attachdetach-controller ClusterRole.v1beta1.rbac.authorization.k8s.io

system:controller:certificate-controller ClusterRole.v1beta1.rbac.authorization.k8s.io

...

----------------------------------------

TITLE: Example: Creating TLS Secret
DESCRIPTION: Demonstrates creating a TLS secret named 'tls-secret' using specific certificate and key files.

LANGUAGE: bash
CODE:
kubectl create secret tls tls-secret --cert=path/to/tls.crt --key=path/to/tls.key

----------------------------------------

TITLE: Kubeadm Certs Generate-CSR Command Syntax
DESCRIPTION: The basic syntax for the 'kubeadm certs generate-csr' command. This command is used to generate keys and certificate signing requests for Kubernetes control plane components.

LANGUAGE: bash
CODE:
kubeadm certs generate-csr [flags]

----------------------------------------

TITLE: Dockerfile for Python Flask Application
DESCRIPTION: Dockerfile configuration to containerize the Python Flask application, using Python 3.7 base image and setting up the application environment.

LANGUAGE: dockerfile
CODE:
FROM python:3.7

RUN mkdir /app
WORKDIR /app
ADD . /app/
RUN pip install -r requirements.txt

EXPOSE 5000
CMD ["python", "/app/main.py"]

----------------------------------------

TITLE: Creating Demo Namespace in Kubernetes Clusters
DESCRIPTION: Creates a namespace named 'kep-3335' in both source and destination Kubernetes clusters for the demonstration.

LANGUAGE: bash
CODE:
kubectl create ns kep-3335

----------------------------------------

TITLE: Configuring Pod Tolerations in Kubernetes
DESCRIPTION: YAML configuration showing how to specify pod tolerations to allow scheduling on tainted nodes.

LANGUAGE: yaml
CODE:
  tolerations:
  - key: "key"
    operator: "Equal"
    value: "value"
    effect: "NoSchedule"

----------------------------------------

TITLE: MutatingWebhook Definition
DESCRIPTION: Definition of an individual mutating webhook within a MutatingWebhookConfiguration.

LANGUAGE: go
CODE:
type MutatingWebhook struct {
  Name string `json:"name"`
  ClientConfig WebhookClientConfig `json:"clientConfig"`
  Rules []RuleWithOperations `json:"rules,omitempty"`
  FailurePolicy *FailurePolicyType `json:"failurePolicy,omitempty"`
  MatchPolicy *MatchPolicyType `json:"matchPolicy,omitempty"`
  NamespaceSelector *metav1.LabelSelector `json:"namespaceSelector,omitempty"`
  ObjectSelector *metav1.LabelSelector `json:"objectSelector,omitempty"`
  SideEffects *SideEffectClass `json:"sideEffects"`
  TimeoutSeconds *int32 `json:"timeoutSeconds,omitempty"`
  AdmissionReviewVersions []string `json:"admissionReviewVersions"`
  ReinvocationPolicy *ReinvocationPolicyType `json:"reinvocationPolicy,omitempty"`
  MatchConditions []MatchCondition `json:"matchConditions,omitempty"`
}

----------------------------------------

TITLE: Upgrading Kubelet Configuration Using Kubeadm
DESCRIPTION: Command to upgrade the kubelet configuration for a node. Downloads configuration from the kubelet-config ConfigMap in the cluster. Supports options for custom configuration files, dry-run mode, and patch application.

LANGUAGE: bash
CODE:
kubeadm upgrade apply phase kubelet-config [flags]

----------------------------------------

TITLE: Creating Persistent Volume Claim
DESCRIPTION: YAML manifest for creating a Persistent Volume Claim using the Cinder StorageClass.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: myvol
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: csi-sc-cinderplugin


----------------------------------------

TITLE: Creating a Cluster Using ClusterClass in YAML
DESCRIPTION: Example of creating a Kubernetes cluster using a ClusterClass template. The configuration specifies the cluster version, control plane replicas, and worker node deployments.

LANGUAGE: yaml
CODE:
---
apiVersion: cluster.x-k8s.io/v1beta1
 kind: Cluster
 metadata:
   name: my-amazing-cluster
   namespace: bar
 spec:
   topology: # define a managed topology
     class: my-amazing-cluster-class # use the ClusterClass mentioned earlier
     version: v1.21.2
     controlPlane:
       replicas: 3
     workers:
       machineDeployments:
       - class: type1-workers
         name: big-pool-of-machines
         replicas: 5
       - class: type2-workers
         name: small-pool-of-machines
         replicas: 1

----------------------------------------

TITLE: Sample ResourceQuota HTTP Request - POST
DESCRIPTION: Example HTTP request for creating a ResourceQuota object

LANGUAGE: http
CODE:
POST /api/v1/namespaces/{namespace}/resourcequotas

----------------------------------------

TITLE: Deleting Kubernetes Deployment
DESCRIPTION: This shell command deletes the nginx deployment from the Kubernetes cluster.

LANGUAGE: shell
CODE:
kubectl delete deployment nginx-deployment

----------------------------------------

TITLE: Creating Tabbed Content in Kubernetes Documentation
DESCRIPTION: This code snippet shows how to use the tabs shortcode to create tabbed content in Kubernetes documentation, including tabs with code highlighting, inline Markdown, HTML, and file includes.

LANGUAGE: go-text-template
CODE:
{{</* tabs name="tab_with_code" >}}
{{< tab name="Tab 1" codelang="bash" >}}
echo "This is tab 1."
{{< /tab >}}
{{< tab name="Tab 2" codelang="go" >}}
println "This is tab 2."
{{< /tab >}}
{{< /tabs */>}}

{{</* tabs name="tab_with_md" >}}
{{% tab name="Markdown" %}}
This is **some markdown.**
{{< note >}}
It can even contain shortcodes.
{{< /note >}}
{{% /tab %}}
{{< tab name="HTML" >}}
<div>
	<h3>Plain HTML</h3>
	<p>This is some <i>plain</i> HTML.</p>
</div>
{{< /tab >}}
{{< /tabs */>}}

{{</* tabs name="tab_with_file_include" >}}
{{< tab name="Content File #1" include="example1" />}}
{{< tab name="Content File #2" include="example2" />}}
{{< tab name="JSON File" include="podtemplate" />}}
{{< /tabs */>}}

----------------------------------------

TITLE: Cleaning Up Resources
DESCRIPTION: Remove deployed resources and optionally delete the Minikube cluster

LANGUAGE: shell
CODE:
kubectl delete service hello-node
kubectl delete deployment hello-node
minikube stop
minikube delete

----------------------------------------

TITLE: Creating and Inserting Data in PostgreSQL Master
DESCRIPTION: SQL commands to create a table and insert data in the PostgreSQL master instance.

LANGUAGE: bash
CODE:
psql -h crunchy-master -U postgres postgres -c 'create table foo (id int)'

psql -h crunchy-master -U postgres postgres -c 'insert into foo values (1)'

----------------------------------------

TITLE: Creating a Node using Go client
DESCRIPTION: Example Go code for creating a Kubernetes Node using the client-go library.

LANGUAGE: go
CODE:
node := &corev1.Node{
  ObjectMeta: metav1.ObjectMeta{Name: "node-example"},
  Spec: corev1.NodeSpec{
    PodCIDR: "10.244.0.0/24",
  },
}

createdNode, err := clientset.CoreV1().Nodes().Create(context.TODO(), node, metav1.CreateOptions{})

----------------------------------------

TITLE: Creating Indexed Job in Kubernetes YAML
DESCRIPTION: Example YAML configuration for creating an Indexed Job in Kubernetes. The job creates 3 parallel pods with unique completion indexes exposed through environment variables. Requires the IndexedJob feature gate to be enabled.

LANGUAGE: yaml
CODE:
apiVersion: batch/v1
kind: Job
metadata:
  name: 'sample-job'
spec:
  completions: 3
  parallelism: 3
  completionMode: Indexed
  template:
    spec:
      restartPolicy: Never
      containers:
      - command:
        - 'bash'
        - '-c'
        - 'echo "My partition: ${JOB_COMPLETION_INDEX}"'
        image: 'docker.io/library/bash'
        name: 'sample-load'

----------------------------------------

TITLE: Viewing Inside User Kubernetes Cluster
DESCRIPTION: This kubectl command shows the contents of a user Kubernetes cluster, including DNS pods and a helloworld application. It illustrates how each user cluster can be independently scheduled and used within the Giantnetes architecture.

LANGUAGE: bash
CODE:
kubectl --context=customera get pods --all-namespaces
NAMESPACE     NAME                             READY     STATUS    RESTARTS   AGE
kube-system   kube-dns-v20-1485703853-3zo9n   3/3       Running   0          1h
kube-system   kube-dns-v20-1485703853-r34br   3/3       Running   0          1h
default       helloworld-1581355810-0g17n     1/1       Running   0          1h

----------------------------------------

TITLE: Kubernetes Audit Event Resource Definition
DESCRIPTION: Schema definition for audit Event resource that captures API audit log information including request/response details, timestamps, user info and more.

LANGUAGE: go
CODE:
type Event struct {
    metav1.TypeMeta
    Level Level
    AuditID types.UID 
    Stage Stage
    RequestURI string
    Verb string
    User authentication.UserInfo
    ImpersonatedUser *authentication.UserInfo
    SourceIPs []string
    UserAgent string
    ObjectRef *ObjectReference
    ResponseStatus *metav1.Status
    RequestObject *runtime.Unknown
    ResponseObject *runtime.Unknown
    RequestReceivedTimestamp metav1.MicroTime
    StageTimestamp metav1.MicroTime
    Annotations map[string]string
}

----------------------------------------

TITLE: Deleting User from Kubeconfig - Basic Syntax
DESCRIPTION: The basic command syntax for deleting a user from the kubeconfig file.

LANGUAGE: bash
CODE:
kubectl config delete-user NAME

----------------------------------------

TITLE: Retrieving Logs from Sidecar Containers
DESCRIPTION: Shell commands to retrieve logs from individual sidecar containers using kubectl.

LANGUAGE: shell
CODE:
$ kubectl logs counter count-log-1
0: Mon Jan  1 00:00:00 UTC 2001
1: Mon Jan  1 00:00:01 UTC 2001
2: Mon Jan  1 00:00:02 UTC 2001
...

LANGUAGE: shell
CODE:
$ kubectl logs counter count-log-2
Mon Jan  1 00:00:00 UTC 2001 INFO 0
Mon Jan  1 00:00:01 UTC 2001 INFO 1
Mon Jan  1 00:00:02 UTC 2001 INFO 2
...

----------------------------------------

TITLE: Configuring Sidecar Container in Kubernetes Pod Specification
DESCRIPTION: YAML configuration example showing how to define a sidecar container using the new restartPolicy field in init containers. The example includes both a regular init container and a restartable sidecar container.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
spec:
  initContainers:
  - name: secret-fetch
    image: secret-fetch:1.0
  - name: network-proxy
    image: network-proxy:1.0
    restartPolicy: Always
  containers:
  ...

----------------------------------------

TITLE: Defining Fast Storage Class in Kubernetes YAML
DESCRIPTION: YAML definition for a StorageClass named 'fast' that provisions SSD-like Persistent Disks using the GCE PD provisioner.

LANGUAGE: yaml
CODE:
kind: StorageClass
apiVersion: storage.k8s.io/v1beta1
metadata:
  name: fast
provisioner: kubernetes.io/gce-pd
parameters:
  type: pd-ssd

----------------------------------------

TITLE: Copying Files with kubectl cp
DESCRIPTION: Examples of using kubectl cp to copy files and directories between local and remote pods. Requires the 'tar' binary to be present in the container image. For advanced use cases like symlinks or preserving file modes, using 'kubectl exec' with tar is recommended.

LANGUAGE: shell
CODE:
# Copy /tmp/foo local file to /tmp/bar in a remote pod in namespace <some-namespace>
tar cf - /tmp/foo | kubectl exec -i -n <some-namespace> <some-pod> -- tar xf - -C /tmp/bar

# Copy /tmp/foo from a remote pod to /tmp/bar locally
kubectl exec -n <some-namespace> <some-pod> -- tar cf - /tmp/foo | tar xf - -C /tmp/bar

# Copy /tmp/foo_dir local directory to /tmp/bar_dir in a remote pod in the default namespace
kubectl cp /tmp/foo_dir <some-pod>:/tmp/bar_dir

# Copy /tmp/foo local file to /tmp/bar in a remote pod in a specific container
kubectl cp /tmp/foo <some-pod>:/tmp/bar -c <specific-container>

# Copy /tmp/foo local file to /tmp/bar in a remote pod in namespace <some-namespace>
kubectl cp /tmp/foo <some-namespace>/<some-pod>:/tmp/bar

# Copy /tmp/foo from a remote pod to /tmp/bar locally
kubectl cp <some-namespace>/<some-pod>:/tmp/foo /tmp/bar

----------------------------------------

TITLE: Configuring Ingress with New Features in Kubernetes YAML
DESCRIPTION: This YAML snippet showcases an Ingress resource that utilizes the new features introduced in Kubernetes 1.18. It demonstrates the use of pathType, ingressClassName, and a hostname wildcard in the Ingress configuration.

LANGUAGE: yaml
CODE:
apiVersion: "networking.k8s.io/v1beta1"
kind: "Ingress"
metadata:
  name: "example-ingress"
spec:
  ingressClassName: "external-lb"
  rules:
  - host: "*.example.com"
    http:
      paths:
      - path: "/example"
        pathType: "Prefix"
        backend:
          serviceName: "example-service"
          servicePort: 80

----------------------------------------

TITLE: Enabling CronJobControllerV2 Feature Gate in Kubernetes 1.20
DESCRIPTION: This command-line snippet shows how to enable the CronJobControllerV2 feature gate for the kube-controller-manager in Kubernetes v1.20.

LANGUAGE: markdown
CODE:
--feature-gate="CronJobControllerV2=true"

----------------------------------------

TITLE: Executing Kubeadm Init Phase Kubeconfig Kubelet Command
DESCRIPTION: This command generates the kubeconfig file for the kubelet to use during cluster bootstrapping. It should only be used for initial setup, as subsequent kubelet credentials should be requested from the CSR API.

LANGUAGE: bash
CODE:
kubeadm init phase kubeconfig kubelet [flags]

----------------------------------------

TITLE: Creating Kubernetes Deployment Scaffolding with Draft
DESCRIPTION: Use the 'draft create' command to automatically generate a Dockerfile, Helm chart, and draft.toml configuration file for a Python application.

LANGUAGE: bash
CODE:
$ draft create

--> Python app detected

--> Ready to sail

$ ls

Dockerfile  app.py  chart/  draft.toml  requirements.txt

----------------------------------------

TITLE: Replacing a Kubernetes Resource with kubectl
DESCRIPTION: Basic syntax for using kubectl replace to update a resource using a file or stdin. The command accepts JSON and YAML formats.

LANGUAGE: bash
CODE:
kubectl replace -f FILENAME

----------------------------------------

TITLE: Executing Certificate Generation in Kubeadm
DESCRIPTION: Command to initiate the certificate generation phase in kubeadm initialization. This command supports flags for help and rootfs path specification.

LANGUAGE: bash
CODE:
kubeadm init phase certs [flags]

----------------------------------------

TITLE: Disabling deprecated APIs in Kubernetes API server
DESCRIPTION: This flag can be added to the apiserver startup arguments to disable deprecated API versions, simulating their removal in version 1.16. It affects various resources in the apps and extensions API groups.

LANGUAGE: bash
CODE:
--runtime-config=apps/v1beta1=false,apps/v1beta2=false,extensions/v1beta1/daemonsets=false,extensions/v1beta1/deployments=false,extensions/v1beta1/replicasets=false,extensions/v1beta1/networkpolicies=false,extensions/v1beta1/podsecuritypolicies=false

----------------------------------------

TITLE: Fetching Basic Kubelet Logs Using Node Log Query
DESCRIPTION: Command to retrieve kubelet service logs from a specific node using the Node Log Query feature. Requires NodeLogQuery feature gate to be enabled and appropriate RBAC permissions.

LANGUAGE: shell
CODE:
kubectl get --raw "/api/v1/nodes/node-1.example/proxy/logs/?query=kubelet"

----------------------------------------

TITLE: Configuring Couchbase Master Node in Kubernetes
DESCRIPTION: Kubernetes configuration for creating the master Couchbase node and associated service. Uses a replication controller with one replica and exposes port 8091 via LoadBalancer.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: ReplicationController
metadata:
  name: couchbase-master-rc
spec:
  replicas: 1
  selector:
    app: couchbase-master-pod
  template:
    metadata:
      labels:
        app: couchbase-master-pod
    spec:
      containers:
      - name: couchbase-master
        image: arungupta/couchbase:k8s
        env:
          - name: TYPE
            value: MASTER
        ports:
        - containerPort: 8091
----
apiVersion: v1
kind: Service
metadata:
  name: couchbase-master-service
  labels:
    app: couchbase-master-service
spec:
  ports:
    - port: 8091
  selector:
    app: couchbase-master-pod
  type: LoadBalancer

----------------------------------------

TITLE: HTTP Update CSINode Request
DESCRIPTION: HTTP request for updating an existing CSINode resource

LANGUAGE: http
CODE:
PUT /apis/storage.k8s.io/v1/csinodes/{name}

----------------------------------------

TITLE: Starting Kubelet with kubeadm
DESCRIPTION: This command writes the kubelet configuration file and environment file, then starts the kubelet service on the node.

LANGUAGE: bash
CODE:
kubeadm init phase kubelet-start

----------------------------------------

TITLE: Using Bootstrap Token for API Request Authentication
DESCRIPTION: This snippet demonstrates how to use a Bootstrap Token as a bearer token in an HTTP request to authenticate against the Kubernetes API server.

LANGUAGE: http
CODE:
Authorization: Bearer 07401b.f395accd246ae52d

----------------------------------------

TITLE: Configuring Main Menu Section in YAML Front Matter
DESCRIPTION: This snippet demonstrates how to set the 'main_menu' flag and customize the link title for a section in the Documentation main menu.

LANGUAGE: yaml
CODE:
main_menu: true
title: Page Title
linkTitle: Title used in links

----------------------------------------

TITLE: Markdown Blog Post Frontmatter
DESCRIPTION: YAML frontmatter for a blog post containing metadata like title, date, author, and layout information

LANGUAGE: markdown
CODE:
---
layout: blog
title: "Reviewing 2019 in Docs"
date: 2020-01-21
slug: reviewing-2019-in-docs
author: >
  Zach Corleissen (Cloud Native Computing Foundation)
---

----------------------------------------

TITLE: Defining RetryGenerateName Feature Gate Stages in YAML
DESCRIPTION: YAML configuration defining the feature gate stages for RetryGenerateName, showing its progression from alpha (v1.30) through beta (v1.31) to stable (v1.32) with corresponding default values.

LANGUAGE: yaml
CODE:
stages:
  - stage: alpha
    defaultValue: false
    fromVersion: "1.30"
    toVersion: "1.30"
  - stage: beta
    defaultValue: true
    fromVersion: "1.31"
    toVersion: "1.31"
  - stage: stable
    defaultValue: true
    fromVersion: "1.32"

----------------------------------------

TITLE: Defining RetryGenerateName Feature Gate Stages in YAML
DESCRIPTION: YAML configuration defining the feature gate stages for RetryGenerateName, showing its progression from alpha (v1.30) through beta (v1.31) to stable (v1.32) with corresponding default values.

LANGUAGE: yaml
CODE:
stages:
  - stage: alpha
    defaultValue: false
    fromVersion: "1.30"
    toVersion: "1.30"
  - stage: beta
    defaultValue: true
    fromVersion: "1.31"
    toVersion: "1.31"
  - stage: stable
    defaultValue: true
    fromVersion: "1.32"

----------------------------------------

TITLE: Initializing Operator SDK Project
DESCRIPTION: Commands to create a new Operator SDK project and generate controller scaffolding

LANGUAGE: bash
CODE:
mkdir label-operator && cd label-operator

# Feel free to change the domain and repo values.
operator-sdk init --domain=padok.fr --repo=github.com/busser/label-operator

operator-sdk create api --group=core --version=v1 --kind=Pod --controller=true --resource=false

----------------------------------------

TITLE: Defining LocalSubjectAccessReview API Version and Import
DESCRIPTION: API version declaration and Go import path for the LocalSubjectAccessReview resource

LANGUAGE: yaml
CODE:
apiVersion: authorization.k8s.io/v1

LANGUAGE: golang
CODE:
import "k8s.io/api/authorization/v1"

----------------------------------------

TITLE: Printing Environment Variables of a Kubernetes Pod
DESCRIPTION: This command executes the 'printenv' command inside the 'envar-demo' Pod to list all environment variables.

LANGUAGE: shell
CODE:
kubectl exec envar-demo -- printenv

----------------------------------------

TITLE: Force Decryption Command for Kubernetes Secrets
DESCRIPTION: Shell command to force decryption of all secrets in the cluster by retrieving and replacing them.

LANGUAGE: shell
CODE:
kubectl get secrets --all-namespaces -o json | kubectl replace -f -

----------------------------------------

TITLE: Generating Version Strings in Kubernetes Documentation
DESCRIPTION: This code snippet shows various shortcodes used to generate version strings in Kubernetes documentation, including current version, latest version, and release notes links.

LANGUAGE: go-html-template
CODE:
{{</* param "version" */>}}

{{</* latest-version */>}}

{{</* latest-semver */>}}

{{</* version-check */>}}

{{</* latest-release-notes */>}}

----------------------------------------

TITLE: Retrieving ZooKeeper Pod FQDNs
DESCRIPTION: Shell command to get the fully qualified domain names of ZooKeeper Pods using kubectl exec.

LANGUAGE: shell
CODE:
for i in 0 1 2; do kubectl exec zk-$i -- hostname -f; done

----------------------------------------

TITLE: Testing Global Load Balancing in Kubernetes Federation
DESCRIPTION: These commands SSH into VMs in different regions and curl the global ingress IP to test load balancing.

LANGUAGE: bash
CODE:
$ gcloud compute ssh test-instance-asia --zone asia-east1-a

-----

user@test-instance-asia:~$ curl 130.211.40.186
<!DOCTYPE html>
<html>
<head>
<title>Welcome to the global site!</title>
</head>
<body>
<h1>Welcome to the global site! You are being served from asia-east1-b</h1>
<p>Congratulations!</p>


user@test-instance-asia:~$ exit

----


$ gcloud compute ssh test-instance-us --zone us-west1-b

----

user@test-instance-us:~$ curl 130.211.40.186
<!DOCTYPE html>
<html>
<head>
<title>Welcome to the global site!</title>
</head>
<body>
<h1>Welcome to the global site! You are being served from us-central1-b</h1>
<p>Congratulations!</p>


----

----------------------------------------

TITLE: Including Kubernetes Documentation Shortcodes
DESCRIPTION: Template sections for including standard Kubernetes documentation components using Hugo shortcodes and headings, including prerequisites, version checks, steps, discussion, and what's next sections.

LANGUAGE: markdown
CODE:
<!-- overview -->

## {{% heading "prerequisites" %}}

{{< include "task-tutorial-prereqs.md" >}}

<!-- If you set the min-kubernetes-server-version parameter in the page's front matter,
    add the version check shortcode {{< version-check >}}.
-->

<!-- steps -->

<!-- discussion -->

<!-- Optional section; add links to information related to this topic. -->
## {{% heading "whatsnext" %}}

----------------------------------------

TITLE: Non-Structural Schema Example in YAML
DESCRIPTION: This snippet illustrates a non-structural schema, violating several rules of structural schemas, such as missing root type definition and using disallowed constructs within value validations.

LANGUAGE: yaml
CODE:
properties:
  spec:
    type: object
    properties
      command:
        type: string
        minLength: 1
      shell:
        type: string
        minLength: 1
      machines:
        type: array
        items:
          type: string
          pattern: "^[a-z0-9]+(-[a-z0-9]+)*$"
    oneOf:
    - properties:
        command:
          type: string
      required: ["command"]
    - properties:
        shell:
          type: string
      required: ["shell"]
    not:
      properties:
        privileged: {}
required: ["spec"]

----------------------------------------

TITLE: Creating a Pod with Annotations in YAML
DESCRIPTION: Shows how to create a Kubernetes Pod manifest with an annotation. The example includes a single annotation specifying an image registry URL.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: annotations-demo
  annotations:
    imageregistry: "https://hub.docker.com/"
spec:
  containers:
  - name: nginx
    image: nginx:1.14.2
    ports:
    - containerPort: 80

----------------------------------------

TITLE: Listing Kubernetes Nodes
DESCRIPTION: This command retrieves a list of all nodes in the Kubernetes cluster.

LANGUAGE: shell
CODE:
kubectl get nodes

----------------------------------------

TITLE: Checking Job Output
DESCRIPTION: Terminal command to view the logs from the completed job.

LANGUAGE: terminal
CODE:
kubectl logs job/example-job

----------------------------------------

TITLE: Executing Kubernetes Control Plane Initialization
DESCRIPTION: This command initializes the Kubernetes control plane using kubeadm. It can be customized with various flags to configure aspects such as the API server address, certificate details, and networking options.

LANGUAGE: bash
CODE:
kubeadm init [flags]

----------------------------------------

TITLE: Deploying ZooKeeper StatefulSet with Parallel Pod Management in Kubernetes
DESCRIPTION: YAML manifest for deploying a ZooKeeper StatefulSet with Parallel pod management policy and RollingUpdate strategy.

LANGUAGE: yaml
CODE:
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
   name: zk
spec:
   serviceName: zk-hs
   replicas: 3
   updateStrategy:
       type: RollingUpdate
   podManagementPolicy: Parallel
 ...

----------------------------------------

TITLE: kubectl scale Usage Examples
DESCRIPTION: Examples demonstrating how to scale different types of Kubernetes resources including replica sets, deployments, and stateful sets.

LANGUAGE: bash
CODE:
  # Scale a replica set named 'foo' to 3
  kubectl scale --replicas=3 rs/foo
  
  # Scale a resource identified by type and name specified in "foo.yaml" to 3
  kubectl scale --replicas=3 -f foo.yaml
  
  # If the deployment named mysql's current size is 2, scale mysql to 3
  kubectl scale --current-replicas=2 --replicas=3 deployment/mysql
  
  # Scale multiple replication controllers
  kubectl scale --replicas=5 rc/example1 rc/example2 rc/example3
  
  # Scale stateful set named 'web' to 3
  kubectl scale --replicas=3 statefulset/web

----------------------------------------

TITLE: Kubeadm Join Command Syntax
DESCRIPTION: Shows the basic syntax for the kubeadm join command with flags parameter.

LANGUAGE: bash
CODE:
kubeadm join [api-server-endpoint] [flags]

----------------------------------------

TITLE: Creating a VolumeSnapshot for Pre-provisioned Snapshot in Kubernetes YAML
DESCRIPTION: This YAML defines a VolumeSnapshot object to allow use of a pre-provisioned snapshot in Kubernetes.

LANGUAGE: yaml
CODE:
apiVersion: snapshot.storage.k8s.io/v1alpha1
kind: VolumeSnapshot
metadata:
  name: static-snapshot-demo
  namespace: demo-namespace
spec:
  snapshotClassName: csi-snapclass
  snapshotContentName: static-snapshot-content

----------------------------------------

TITLE: YAML Blog Post Frontmatter
DESCRIPTION: YAML frontmatter configuration for the blog post defining metadata like title, date, author and layout.

LANGUAGE: yaml
CODE:
---
layout: blog
title: "Kubernetes Removals and Major Changes In v1.27"
date: 2023-03-17T14:00:00+0000
slug: upcoming-changes-in-kubernetes-v1-27
author: >
   Harshita Sao
---

----------------------------------------

TITLE: CSIDriver API Definition
DESCRIPTION: Core API definition showing the apiVersion and import path for the CSIDriver resource type.

LANGUAGE: yaml
CODE:
apiVersion: storage.k8s.io/v1
import "k8s.io/api/storage/v1"

----------------------------------------

TITLE: Removing CNI Configuration Directory in Bash
DESCRIPTION: This command removes the /etc/cni/net.d directory and its contents to clean up CNI plugin configurations after using kubeadm reset.

LANGUAGE: bash
CODE:
sudo rm -rf /etc/cni/net.d

----------------------------------------

TITLE: Markdown Blockquote Warning Template
DESCRIPTION: A Kubernetes-specific markdown template for displaying warning messages using custom shortcodes

LANGUAGE: markdown
CODE:
{{< caution >}}

It is very hard to predict, especially the future.
-Niels Bohr

{{< /caution >}}

----------------------------------------

TITLE: Executing Server-side Apply Using kubectl
DESCRIPTION: Command to perform server-side apply using kubectl, with an option to force conflicts when necessary. The --server-side flag enables server-side apply functionality, while --force-conflicts can be used to resolve ownership conflicts.

LANGUAGE: bash
CODE:
kubectl apply --server-side

----------------------------------------

TITLE: Defining PodTemplate API Version and Import in Go
DESCRIPTION: Specifies the API version and import path for the PodTemplate resource in Go code.

LANGUAGE: go
CODE:
apiVersion: "v1"

import "k8s.io/api/core/v1"

----------------------------------------

TITLE: Restoring Checkpointed Container in Kubernetes (YAML)
DESCRIPTION: YAML manifest for a Pod that uses a checkpoint image to restore a previously checkpointed container within Kubernetes.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  namePrefix: example-
spec:
  containers:
  - name: <container-name>
    image: container-image-registry.example/user/checkpoint-image:latest
  nodeName: <destination-node>

----------------------------------------

TITLE: Note Shortcode for LGTM Comment
DESCRIPTION: A markdown note shortcode explaining that using /lgtm triggers automation, while a plain LGTM comment provides non-binding approval.

LANGUAGE: markdown
CODE:
{{< note >}}
Using `/lgtm` triggers automation. If you want to provide non-binding
approval, commenting "LGTM" works too!
{{< /note >}}

----------------------------------------

TITLE: Viewing Certificate Signing Requests (CSRs)
DESCRIPTION: Shell command to view pending Certificate Signing Requests (CSRs) for kubelet serving certificates.

LANGUAGE: shell
CODE:
kubectl get csr

----------------------------------------

TITLE: Creating an Autoscaler for a Deployment
DESCRIPTION: Creates an autoscaler for a deployment named 'foo', with the number of pods between 2 and 10, using the default autoscaling policy.

LANGUAGE: shell
CODE:
kubectl autoscale deployment foo --min=2 --max=10

----------------------------------------

TITLE: Installing Minikube KVM driver on Linux
DESCRIPTION: This command downloads the latest KVM driver for Minikube, installs it in /usr/local/bin, and removes the downloaded file.

LANGUAGE: shell
CODE:
curl -LO https://storage.googleapis.com/minikube/releases/latest/docker-machine-driver-kvm2 \
    && sudo install docker-machine-driver-kvm2 /usr/local/bin/ && rm docker-machine-driver-kvm2

----------------------------------------

TITLE: Defining Kubernetes Cluster Configuration in JSON
DESCRIPTION: This JSON snippet defines a Kubernetes cluster configuration for deployment. It specifies cluster attributes such as Kubernetes version, network plugin, and Docker version. It also defines the cluster name, tenant, SSH public keys, cloud provider, and node roles and counts.

LANGUAGE: json
CODE:
{
 "attribs": {
  "k8s-version": "v1.6.0",
  "k8s-kube_network_plugin": "calico",
  "k8s-docker_version": "1.12"
 },
 "name": "cluster01",
 "tenant": "cluster01",
 "public_keys": {
  "cluster01": "ssh-rsa AAAAB..... user@example.com"
 },
 "provider": {
  "name": "google-provider"
 },
 "nodes": [
  {
   "roles": ["etcd","k8s-addons", "k8s-master"],
   "count": 1
  },
  {
   "roles": ["k8s-worker"],
   "count": 3
  }
 ]
}

----------------------------------------

TITLE: YAML Frontmatter Configuration for Kubernetes Documentation
DESCRIPTION: YAML configuration header defining metadata for the Kubernetes documentation page about containers, including title, weight, reviewers, and content type information.

LANGUAGE: yaml
CODE:
---
title: Containers
weight: 40
description: Technology for packaging an application along with its runtime dependencies.
reviewers:
- erictune
- thockin
content_type: concept
card:
  name: concepts
  weight: 50
---

----------------------------------------

TITLE: Installing a Helm Chart
DESCRIPTION: Command to install a Helm chart from the stable repository, specifically the Jenkins chart.

LANGUAGE: bash
CODE:
$ helm install stable/jenkins

----------------------------------------

TITLE: Defining a Raw Block PersistentVolume in Kubernetes YAML
DESCRIPTION: Example YAML definition for a PersistentVolume configured as a raw block device, using Fibre Channel for storage.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: PersistentVolume
metadata:
  name: block-pv
spec:
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  volumeMode: Block
  persistentVolumeReclaimPolicy: Retain
  fc:
    targetWWNs: ["50060e801049cfd1"]
    lun: 0
    readOnly: false

----------------------------------------

TITLE: Defining a Raw Block PersistentVolume in Kubernetes YAML
DESCRIPTION: Example YAML definition for a PersistentVolume configured as a raw block device, using Fibre Channel for storage.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: PersistentVolume
metadata:
  name: block-pv
spec:
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  volumeMode: Block
  persistentVolumeReclaimPolicy: Retain
  fc:
    targetWWNs: ["50060e801049cfd1"]
    lun: 0
    readOnly: false

----------------------------------------

TITLE: Defining a Raw Block PersistentVolume in Kubernetes YAML
DESCRIPTION: Example YAML definition for a PersistentVolume configured as a raw block device, using Fibre Channel for storage.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: PersistentVolume
metadata:
  name: block-pv
spec:
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  volumeMode: Block
  persistentVolumeReclaimPolicy: Retain
  fc:
    targetWWNs: ["50060e801049cfd1"]
    lun: 0
    readOnly: false

----------------------------------------

TITLE: Defining a Raw Block PersistentVolume in Kubernetes YAML
DESCRIPTION: Example YAML definition for a PersistentVolume configured as a raw block device, using Fibre Channel for storage.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: PersistentVolume
metadata:
  name: block-pv
spec:
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  volumeMode: Block
  persistentVolumeReclaimPolicy: Retain
  fc:
    targetWWNs: ["50060e801049cfd1"]
    lun: 0
    readOnly: false

----------------------------------------

TITLE: Executing kubectl options Command in Bash
DESCRIPTION: This snippet demonstrates how to use the kubectl options command to print flags inherited by all commands. It shows the basic syntax for running the command.

LANGUAGE: bash
CODE:
kubectl options [flags]

----------------------------------------

TITLE: Guaranteed Pod Spec with Integer CPU
DESCRIPTION: Pod specification running in Guaranteed QoS class with integer CPU requests/limits for exclusive CPU allocation.

LANGUAGE: yaml
CODE:
spec:
  containers:
  - name: nginx
    image: nginx
    resources:
      limits:
        memory: "200Mi"
        cpu: "2"
      requests:
        memory: "200Mi"
        cpu: "2"

----------------------------------------

TITLE: Link Checker Usage - Python
DESCRIPTION: Help output for linkchecker.py that validates links in documentation, with special handling for localized content

LANGUAGE: bash
CODE:
Usage: linkchecker.py -h

Cases handled:

- [foo](#bar)                         : ignored currently
+ [foo](http://bar)                   : insecure links to external site
+ [foo](https://k8s.io/website/...)   : hardcoded site domain name

+ [foo](/<lang>/docs/bar/...)  : where <lang> is not 'en'
  + /<lang>/docs/bar           : contains shortcode, so ignore, or
  + /<lang>/docs/bar           : is a image link (ignore currently), or
  + /<lang>/docs/bar           : points to shared (non-localized) page, or
  + /<lang>/docs/bar.md        : exists for current lang, or
  + /<lang>/docs/bar/_index.md : exists for current lang, or
  + /<lang>/docs/bar/          : is a redirect entry, or
  + /<lang>/docs/bar           : is something we don't understand, then ERR

----------------------------------------

TITLE: Creating Role Binding - Basic Syntax
DESCRIPTION: Basic command syntax for creating a role binding in Kubernetes, allowing binding of roles or cluster roles to users, groups, or service accounts.

LANGUAGE: shell
CODE:
kubectl create rolebinding NAME --clusterrole=NAME|--role=NAME [--user=username] [--group=groupname] [--serviceaccount=namespace:serviceaccountname] [--dry-run=server|client|none]

----------------------------------------

TITLE: Deleting Kubernetes Pod for Termination Demonstration
DESCRIPTION: This shell command deletes a specific Pod to demonstrate the termination process.

LANGUAGE: shell
CODE:
kubectl delete pod nginx-deployment-7768647bf9-b4b9s

----------------------------------------

TITLE: Defining Federation Settings in Bash
DESCRIPTION: Sets environment variables for the federation host cluster, Google Cloud project, and DNS suffix used in the setup process.

LANGUAGE: bash
CODE:
export FED_HOST_CLUSTER=us-east1-b

export FED_PROJECT=<YOUR PROJECT e.g. company-project>

export FED_DNS_ZONE=<YOUR DNS SUFFIX e.g. example.com>

----------------------------------------

TITLE: Configuring PodDisruptionConditions Feature Gate in Kubernetes YAML
DESCRIPTION: This YAML configuration defines the PodDisruptionConditions feature gate for Kubernetes. It specifies three stages: alpha, beta, and stable, each with its default value and version range. The feature enables a dedicated pod condition for disruption-based deletions.

LANGUAGE: yaml
CODE:
---
title: PodDisruptionConditions
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.25"
    toVersion: "1.25"
  - stage: beta
    defaultValue: true
    fromVersion: "1.26"
    toVersion: "1.30"
  - stage: stable
    defaultValue: true
    fromVersion: "1.31"
---
Enables support for appending a dedicated pod condition indicating that the pod is being deleted due to a disruption.

----------------------------------------

TITLE: Creating a flowchart diagram with Mermaid
DESCRIPTION: Example Mermaid code for creating a flowchart diagram showing topics covered in the guide

LANGUAGE: mermaid
CODE:
flowchart LR
subgraph m[Mermaid.js]
direction TB
S[ ]-.-
C[build<br>diagrams<br>with markdown] -->
D[on-line<br>live editor]
end
A[Why are diagrams<br>useful?] --> m
m --> N[3 x methods<br>for creating<br>diagrams]
N --> T[Examples]
T --> X[Styling<br>and<br>captions]
X --> V[Tips]

    classDef box fill:#fff,stroke:#000,stroke-width:1px,color:#000;
    classDef spacewhite fill:#ffffff,stroke:#fff,stroke-width:0px,color:#000
    class A,C,D,N,X,m,T,V box
    class S spacewhite

%% you can hyperlink Mermaid diagram nodes to a URL using click statements

click A "https://mermaid-js.github.io/mermaid-live-editor/edit/#eyJjb2RlIjoiZmxvd2NoYXJ0IExSXG4gICAgc3ViZ3JhcGggbVtNZXJtYWlkLmpzXVxuICAgIGRpcmVjdGlvbiBUQlxuICAgICAgICBTWyBdLS4tXG4gICAgICAgIENbYnVpbGQ8YnI-ZGlhZ3JhbXM8YnI-d2l0aCBtYXJrZG93bl0gLS0-XG4gICAgICAgIERbb24tbGluZTxicj5saXZlIGVkaXRvcl1cbiAgICBlbmRcbiAgICBBW1doeSBhcmUgZGlhZ3JhbXM8YnI-dXNlZnVsP10gLS0-IG1cbiAgICBtIC0tPiBOWzMgeCBtZXRob2RzPGJyPmZvciBjcmVhdGluZzxicj5kaWFncmFtc11cbiAgICBOIC0tPiBUW0V4YW1wbGVzXVxuICAgIFQgLS0-IFhbU3R5bGluZzxicj5hbmQ8YnI-Y2FwdGlvbnNdXG4gICAgWCAtLT4gVltUaXBzXVxuICAgIFxuIFxuICAgIGNsYXNzRGVmIGJveCBmaWxsOiNmZmYsc3Ryb2tlOiMwMDAsc3Ryb2tlLXdpZHRoOjFweCxjb2xvcjojMDAwO1xuICAgIGNsYXNzRGVmIHNwYWNld2hpdGUgZmlsbDojZmZmZmZmLHN0cm9rZTojZmZmLHN0cm9rZS13aWR0aDowcHgsY29sb3I6IzAwMFxuICAgIGNsYXNzIEEsQyxELE4sWCxtLFQsViBib3hcbiAgICBjbGFzcyBTIHNwYWNld2hpdGUiLCJtZXJtYWlkIjoie1xuICBcInRoZW1lXCI6IFwiZGVmYXVsdFwiXG59IiwidXBkYXRlRWRpdG9yIjpmYWxzZSwiYXV0b1N5bmMiOnRydWUsInVwZGF0ZURpYWdyYW0iOnRydWV9" _blank

----------------------------------------

TITLE: Testing gRPC Probe Status Changes
DESCRIPTION: cURL commands to change the gRPC health check status and kubectl commands to observe the changes in Pod readiness.

LANGUAGE: shell
CODE:
curl http://localhost:8080/make-not-serving
kubectl describe pod test-grpc
curl http://localhost:8080/make-serving
kubectl describe test-grpc

----------------------------------------

TITLE: MysqlCluster Resource YAML Structure
DESCRIPTION: This YAML snippet shows the structure of a MysqlCluster resource, including its metadata, spec, and status fields.

LANGUAGE: yaml
CODE:
apiVersion: v1
items:
- apiVersion: mysql.orain.com/v1
  kind: MysqlCluster
  metadata:
    creationTimestamp: 2017-10-20T08:19:41Z
    labels:
      AppName: clustershard-crm
      Createdby: orain.com
      DBType: MySQL
    name: clustershard-c
    namespace: default
    resourceVersion: "415852"
    uid: 6bb089bb-b56f-11e7-ae02-525400e717a6
  spec:
    dbresourcespec:
      limitedcpu: 1200m
      limitedmemory: 400Mi
      requestcpu: 1000m
      requestmemory: 400Mi
  status:
    currentReplicas: 8
    currentRevision: clustershard-c-648d878965
    replicas: 8
    updateRevision: clustershard-c-648d878965
kind: List

----------------------------------------

TITLE: Kubernetes QoS Class Values
DESCRIPTION: The three possible QoS class values that Kubernetes can assign to pods based on their compute resource requests and limits settings. These classes are used for scheduling and eviction decisions.

LANGUAGE: yaml
CODE:
Guaranteed
Burstable
BestEffort

----------------------------------------

TITLE: Enabling Kubectl User-Level Autocompletion
DESCRIPTION: Command to add kubectl completion script to user's bashrc file for permanent autocompletion support.

LANGUAGE: bash
CODE:
echo 'source <(kubectl completion bash)' >>~/.bashrc

----------------------------------------

TITLE: Kubetest Unit Test for Team Label
DESCRIPTION: A Python unit test using kubetest to verify that Kubernetes Deployment resources have a 'team' label.

LANGUAGE: python
CODE:
#// vim: set ft=python:
def test_for_team_label():
    if spec["kind"] == "Deployment":
        labels = spec["spec"]["template"]["metadata"]["labels"]
        assert_contains(labels, "team", "should indicate which team owns the deployment")

test_for_team_label()

----------------------------------------

TITLE: Creating Hello Custom Resource in Kubernetes
DESCRIPTION: YAML configuration for creating a Hello custom resource instance with example text content.

LANGUAGE: yaml
CODE:
apiVersion: hello.example.com/v1alpha1
kind: Hello
metadata:
  name: example-hello
spec:
  fileName: example.txt
  fileContents: Hello, world!

----------------------------------------

TITLE: ImageReviewStatus Structure - Kubernetes v1alpha1
DESCRIPTION: Defines the status response structure for image review requests, including allowed status, reason for denial, and audit annotations.

LANGUAGE: yaml
CODE:
allowed: boolean  # Required
reason: string    # Description if allowed is false
auditAnnotations:
  # Key-value pairs for audit purposes

----------------------------------------

TITLE: Defining KubeletConfiguration for cluster DNS
DESCRIPTION: This YAML snippet shows a KubeletConfiguration object that sets the cluster DNS IP address.

LANGUAGE: yaml
CODE:
apiVersion: kubelet.config.k8s.io/v1beta1
kind: KubeletConfiguration
clusterDNS:
- 10.96.0.10

----------------------------------------

TITLE: Creating a Docker Registry Secret in Kubernetes
DESCRIPTION: This command creates a new secret named 'my-secret' for use with Docker registries, specifying the Docker server, username, password, and email.

LANGUAGE: bash
CODE:
kubectl create secret docker-registry my-secret --docker-server=DOCKER_REGISTRY_SERVER --docker-username=DOCKER_USER --docker-password=DOCKER_PASSWORD --docker-email=DOCKER_EMAIL

----------------------------------------

TITLE: Executing kubeadm token list command in Kubernetes
DESCRIPTION: This command lists all bootstrap tokens on the Kubernetes server. It supports various output formats and options for customizing the display of token information.

LANGUAGE: bash
CODE:
kubeadm token list [flags]

----------------------------------------

TITLE: Initial Kubernetes Config Structure
DESCRIPTION: Basic YAML structure for defining clusters, users, and contexts in a kubeconfig file.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Config
preferences: {}

clusters:
- cluster:
  name: development
- cluster:
  name: test

users:
- name: developer
- name: experimenter

contexts:
- context:
  name: dev-frontend
- context:
  name: dev-storage
- context:
  name: exp-test

----------------------------------------

TITLE: Configuring Required Node Affinity in Kubernetes
DESCRIPTION: YAML configuration showing how to require pod scheduling on nodes in a specific GCE zone using node affinity rules.

LANGUAGE: yaml
CODE:
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
            - key: "failure-domain.beta.kubernetes.io/zone"
              operator: In
              values: ["us-central1-a"]

----------------------------------------

TITLE: Building and Serving Kubernetes Documentation Locally
DESCRIPTION: Builds the Kubernetes documentation in the local website repository and serves it for preview.

LANGUAGE: shell
CODE:
cd <web-base>
git submodule update --init --recursive --depth 1 # if not already done
make container-serve

----------------------------------------

TITLE: ReplicationController Status Structure
DESCRIPTION: Definition of the ReplicationControllerStatus object showing available status fields

LANGUAGE: yaml
CODE:
status:
  replicas: 3
  availableReplicas: 3
  readyReplicas: 3
  fullyLabeledReplicas: 3
  conditions:
  - type: Available
    status: "True"
    lastTransitionTime: "2023-01-01T00:00:00Z"
    reason: MinimumReplicasAvailable
    message: "Deployment has minimum availability."

----------------------------------------

TITLE: Configuring PodDisruptionConditions Feature Gate in Kubernetes YAML
DESCRIPTION: This YAML configuration defines the PodDisruptionConditions feature gate for Kubernetes. It specifies three stages: alpha, beta, and stable, each with its default value and version range. The feature enables a dedicated pod condition for disruption-based deletions.

LANGUAGE: yaml
CODE:
---
title: PodDisruptionConditions
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.25"
    toVersion: "1.25"
  - stage: beta
    defaultValue: true
    fromVersion: "1.26"
    toVersion: "1.30"
  - stage: stable
    defaultValue: true
    fromVersion: "1.31"
---
Enables support for appending a dedicated pod condition indicating that the pod is being deleted due to a disruption.

----------------------------------------

TITLE: Creating a flowchart diagram with Mermaid
DESCRIPTION: Example Mermaid code for creating a flowchart diagram showing topics covered in the guide

LANGUAGE: mermaid
CODE:
flowchart LR
subgraph m[Mermaid.js]
direction TB
S[ ]-.-
C[build<br>diagrams<br>with markdown] -->
D[on-line<br>live editor]
end
A[Why are diagrams<br>useful?] --> m
m --> N[3 x methods<br>for creating<br>diagrams]
N --> T[Examples]
T --> X[Styling<br>and<br>captions]
X --> V[Tips]

    classDef box fill:#fff,stroke:#000,stroke-width:1px,color:#000;
    classDef spacewhite fill:#ffffff,stroke:#fff,stroke-width:0px,color:#000
    class A,C,D,N,X,m,T,V box
    class S spacewhite

%% you can hyperlink Mermaid diagram nodes to a URL using click statements

click A "https://mermaid-js.github.io/mermaid-live-editor/edit/#eyJjb2RlIjoiZmxvd2NoYXJ0IExSXG4gICAgc3ViZ3JhcGggbVtNZXJtYWlkLmpzXVxuICAgIGRpcmVjdGlvbiBUQlxuICAgICAgICBTWyBdLS4tXG4gICAgICAgIENbYnVpbGQ8YnI-ZGlhZ3JhbXM8YnI-d2l0aCBtYXJrZG93bl0gLS0-XG4gICAgICAgIERbb24tbGluZTxicj5saXZlIGVkaXRvcl1cbiAgICBlbmRcbiAgICBBW1doeSBhcmUgZGlhZ3JhbXM8YnI-dXNlZnVsP10gLS0-IG1cbiAgICBtIC0tPiBOWzMgeCBtZXRob2RzPGJyPmZvciBjcmVhdGluZzxicj5kaWFncmFtc11cbiAgICBOIC0tPiBUW0V4YW1wbGVzXVxuICAgIFQgLS0-IFhbU3R5bGluZzxicj5hbmQ8YnI-Y2FwdGlvbnNdXG4gICAgWCAtLT4gVltUaXBzXVxuICAgIFxuIFxuICAgIGNsYXNzRGVmIGJveCBmaWxsOiNmZmYsc3Ryb2tlOiMwMDAsc3Ryb2tlLXdpZHRoOjFweCxjb2xvcjojMDAwO1xuICAgIGNsYXNzRGVmIHNwYWNld2hpdGUgZmlsbDojZmZmZmZmLHN0cm9rZTojZmZmLHN0cm9rZS13aWR0aDowcHgsY29sb3I6IzAwMFxuICAgIGNsYXNzIEEsQyxELE4sWCxtLFQsViBib3hcbiAgICBjbGFzcyBTIHNwYWNld2hpdGUiLCJtZXJtYWlkIjoie1xuICBcInRoZW1lXCI6IFwiZGVmYXVsdFwiXG59IiwidXBkYXRlRWRpdG9yIjpmYWxzZSwiYXV0b1N5bmMiOnRydWUsInVwZGF0ZURpYWdyYW0iOnRydWV9" _blank

----------------------------------------

TITLE: Encoding Certificate Signing Request for Kubernetes CertificateSigningRequest
DESCRIPTION: Encode the CSR file content in base64 format for inclusion in the Kubernetes CertificateSigningRequest object.

LANGUAGE: shell
CODE:
cat myuser.csr | base64 | tr -d "\n"

----------------------------------------

TITLE: Testing PostgreSQL Master Connection
DESCRIPTION: This command uses the psql client to connect to the PostgreSQL master and execute a query. It checks the replication status to ensure the cluster is functioning correctly.

LANGUAGE: bash
CODE:
psql -h pgset-master -U postgres postgres -c 'table pg\_stat\_replication'

----------------------------------------

TITLE: Describing ImageMaximumGCAge Functionality in Markdown
DESCRIPTION: This Markdown comment describes the functionality of the ImageMaximumGCAge feature, explaining that it enables a kubelet configuration field for specifying the age after which an image will be garbage collected.

LANGUAGE: markdown
CODE:
<!--
Enables the kubelet configuration field `imageMaximumGCAge`, allowing an administrator to specify the age after which an image will be garbage collected.
-->

----------------------------------------

TITLE: Verifying Minikube installation
DESCRIPTION: This command checks the installed version of Minikube to verify the installation.

LANGUAGE: shell
CODE:
minikube version

----------------------------------------

TITLE: Creating a Docker Registry Secret from Existing Config
DESCRIPTION: This command creates a new secret named 'my-secret' using an existing Docker configuration file located at ~/.docker/config.json.

LANGUAGE: bash
CODE:
kubectl create secret docker-registry my-secret --from-file=path/to/.docker/config.json

----------------------------------------

TITLE: Cleanup Commands
DESCRIPTION: Commands to clean up the created resources and namespace

LANGUAGE: shell
CODE:
kubectl delete namespace constraints-mem-example

----------------------------------------

TITLE: Cloning Kubernetes Repository
DESCRIPTION: Commands to clone the Kubernetes repository from GitHub into your GOPATH directory

LANGUAGE: shell
CODE:
mkdir $GOPATH/src
cd $GOPATH/src
go get github.com/kubernetes/kubernetes

----------------------------------------

TITLE: Examining Pod's /etc/hosts file in Kubernetes
DESCRIPTION: This snippet demonstrates how to view the contents of the /etc/hosts file in a running Pod.

LANGUAGE: shell
CODE:
kubectl exec nginx -- cat /etc/hosts

----------------------------------------

TITLE: Viewing Namespace Hierarchy in Kubernetes using HNC
DESCRIPTION: This command displays the hierarchical structure of namespaces, showing the relationship between 'team-a' and its subnamespace 'svc1-team-a'.

LANGUAGE: bash
CODE:
$ kubectl hns tree team-a

----------------------------------------

TITLE: Retrieving Issued Certificate from Kubernetes CertificateSigningRequest
DESCRIPTION: Extract the issued certificate from the approved CertificateSigningRequest and save it to a file.

LANGUAGE: shell
CODE:
kubectl get csr myuser -o jsonpath='{.status.certificate}'| base64 -d > myuser.crt

----------------------------------------

TITLE: Configuring Blue/Green Deployment in Kubernetes YAML
DESCRIPTION: This YAML snippet shows how to set up a Kubernetes Deployment for Blue/Green deployment strategy. It creates a deployment with environment-specific labels and configurations.

LANGUAGE: yaml
CODE:
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: tomcat-deployment-${TARGET_ROLE}
spec:
  replicas: 2
  template:
    metadata:
      labels:
        app: tomcat
        role: ${TARGET_ROLE}
    spec:
      containers:
      - name: tomcat-container
        image: tomcat:${TOMCAT_VERSION}
        ports:
        - containerPort: 8080
        readinessProbe:
          httpGet:
            path: /
            port: 8080

----------------------------------------

TITLE: Kubectl Debug Command with Custom Profile
DESCRIPTION: Command to debug a pod using a custom profile defined in YAML

LANGUAGE: shell
CODE:
kubectl debug example-pod -it --image=customapp --custom=partial_container.yaml

----------------------------------------

TITLE: Viewing Cilium Pods in Kubernetes
DESCRIPTION: Command to list all Cilium pods running in the kube-system namespace.

LANGUAGE: shell
CODE:
kubectl get pods --namespace=kube-system -l k8s-app=cilium

----------------------------------------

TITLE: Generating Grafeas Attestation Occurrence JSON
DESCRIPTION: This bash script generates a JSON object representing a pgpSignedAttestation occurrence for Grafeas. It includes the image digest, note reference, and GPG signature details.

LANGUAGE: bash
CODE:
cat > occurrence.json <<EOF  
{  
  "resourceUrl": "$(cat image-digest.txt)",  
  "noteName": "projects/image-signing/notes/qa",  
  "attestation": {  
    "pgpSignedAttestation": {  
       "signature": "$(cat signature.gpg)",  
       "contentType": "application/vnd.gcr.image.url.v1",  
       "pgpKeyId": "${GPG\_KEY\_ID}"  
    }  
  }  
}  
EOF

----------------------------------------

TITLE: Defining a PersistentVolumeClaim for Volume Expansion in Kubernetes
DESCRIPTION: This YAML snippet shows how to define a PersistentVolumeClaim (PVC) that can be used for volume expansion. Users can edit the 'storage' field to request a larger size.

LANGUAGE: yaml
CODE:
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: myclaim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi # specify new size here

----------------------------------------

TITLE: Defining ExecCredentialStatus Struct in Go
DESCRIPTION: Defines the ExecCredentialStatus struct holding credentials for the transport to use. It includes fields for expiration timestamp, token, and client certificate data.

LANGUAGE: go
CODE:
type ExecCredentialStatus struct {
    expirationTimestamp    meta.Time
    token                  string
    clientCertificateData  string
    clientKeyData          string
}

----------------------------------------

TITLE: Defining Pod with Image Volume in YAML
DESCRIPTION: YAML configuration showing how to define a pod that uses an image volume by setting the volumes.[*].image field in the spec and configuring volume mounts.

LANGUAGE: yaml
CODE:
{{% code_sample file="pods/image-volumes.yaml" %}}

----------------------------------------

TITLE: Generating Kubernetes Bootstrap Token using kubeadm
DESCRIPTION: This command generates and prints a random bootstrap token for Kubernetes cluster initialization and node joining. The token format is '[a-z0-9]{6}.[a-z0-9]{16}'. This command is provided for convenience, but users can also generate tokens manually or use 'kubeadm init' without specifying a token.

LANGUAGE: bash
CODE:
kubeadm token generate [flags]

----------------------------------------

TITLE: Running the PostgreSQL StatefulSet Example
DESCRIPTION: This command runs the example script that creates the Kubernetes objects required for the PostgreSQL StatefulSet deployment, including Persistent Volumes, Services, and the StatefulSet itself.

LANGUAGE: bash
CODE:
./run.sh

----------------------------------------

TITLE: Checking Git Repository Status
DESCRIPTION: Commands to check out the master branch and verify its status

LANGUAGE: shell
CODE:
cd <k8s-base>
git checkout master
git pull https://github.com/kubernetes/kubernetes master

----------------------------------------

TITLE: Defining a Job resource in Go
DESCRIPTION: Example of creating a Job struct in Go

LANGUAGE: go
CODE:
job := &batchv1.Job{
  ObjectMeta: metav1.ObjectMeta{
    Name: "example-job",
  },
  Spec: batchv1.JobSpec{
    Template: corev1.PodTemplateSpec{
      Spec: corev1.PodSpec{
        Containers: []corev1.Container{
          {
            Name:  "example-container",
            Image: "example-image",
          },
        },
        RestartPolicy: corev1.RestartPolicyNever,
      },
    },
  },
}

----------------------------------------

TITLE: Consuming ConfigMap in a Kubernetes Deployment
DESCRIPTION: This YAML snippet shows how to use a ConfigMap in a Kubernetes Deployment, demonstrating both environment variable and volume-based consumption of ConfigMap data.

LANGUAGE: yaml
CODE:
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: configmap-example-deployment
  labels:
    name: configmap-example-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      name: configmap-example
  template:
    metadata:
      labels:
        name: configmap-example
    spec:
      containers:
      - name: game-container
        image: imaginarygame
        command: ["game-server", "--config-dir=/etc/game/cfg"]
        env:
        # consume the property-like keys in environment variables
        - name: GAME\_PROPERTIES\_NAME
          valueFrom:
            configMapKeyRef:
              name: example-configmap
              key: game-properties-file-name
        - name: UI\_PROPERTIES\_NAME
          valueFrom:
            configMapKeyRef:
              name: example-configmap
              key: ui-properties-file-name
        volumeMounts:
        - name: config-volume
          mountPath: /etc/game
      volumes:
      # consume the file-like keys of the configmap via volume plugin
      - name: config-volume
        configMap:
          name: example-configmap
          items:
          - key: ui.properties
            path: cfg/ui.properties
         - key: game.properties
           path: cfg/game.properties
      restartPolicy: Never

----------------------------------------

TITLE: Tracking Upstream Changes Usage - Python
DESCRIPTION: Help output for upstream_changes.py script that compares different versions of documentation files

LANGUAGE: bash
CODE:
$ ./upstream_changes.py --help
Usage: upstream_changes.py [OPTIONS] PATH

  Find what changes occurred between two versions

  ex: ./upstream_changes.py content/fr/_index.html

Options:
  --reference TEXT  Specify the reference version of the file. Default to the
                    English one.
  --git-path TEXT   Specify git path
  --help            Show this message and exit.

----------------------------------------

TITLE: Creating a Best-Effort Resource Quota in Kubernetes
DESCRIPTION: This command creates a new resource quota named 'best-effort' with a hard limit of 100 pods and a BestEffort scope.

LANGUAGE: bash
CODE:
kubectl create quota best-effort --hard=pods=100 --scopes=BestEffort

----------------------------------------

TITLE: Setting Node Anti-Affinity in Kubernetes
DESCRIPTION: YAML configuration showing how to prevent pods from scheduling on nodes in a specific zone using node anti-affinity.

LANGUAGE: yaml
CODE:
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
            - key: "failure-domain.beta.kubernetes.io/zone"
              operator: NotIn
              values: ["us-central1-a"]

----------------------------------------

TITLE: Waiting for Job Completion
DESCRIPTION: Terminal command to wait for the example job to complete.

LANGUAGE: terminal
CODE:
kubectl wait --for=condition=Complete job/example-job

----------------------------------------

TITLE: Encoding Secret Data in Shell
DESCRIPTION: Commands to encode strings as base64 for use in Kubernetes Secret manifests. Includes a note about platform-specific considerations for base64 encoding.

LANGUAGE: shell
CODE:
echo -n 'admin' | base64
echo -n '1f2d1e2e67df' | base64

----------------------------------------

TITLE: Applying Node Taints in Kubernetes
DESCRIPTION: kubectl command to taint a node, preventing pod scheduling unless explicitly tolerated.

LANGUAGE: bash
CODE:
kubectl taint nodes node1 key=value:NoSchedule

----------------------------------------

TITLE: Executing Remote Commands in Kubernetes Pods
DESCRIPTION: Demonstrates the kubectl exec command for running commands in pods remotely using SPDY multiplexing over HTTP, with support for interactive debugging via gdb

LANGUAGE: bash
CODE:
kubectl exec -p $POD -- $CMD

----------------------------------------

TITLE: Examining APF Configuration using kubectl
DESCRIPTION: Commands to view the default FlowSchema and PriorityLevelConfiguration resources in a Kubernetes cluster after enabling the API Priority and Fairness feature.

LANGUAGE: bash
CODE:
kubectl get flowschemas

LANGUAGE: bash
CODE:
kubectl get prioritylevelconfigurations

----------------------------------------

TITLE: Configuring StorageClass for Volume Expansion in Kubernetes
DESCRIPTION: YAML configuration for a StorageClass that enables volume expansion for GCE persistent disks. The allowVolumeExpansion field is set to true to enable volume resizing for PVCs created from this StorageClass.

LANGUAGE: yaml
CODE:
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: standard
parameters:
  type: pd-standard
provisioner: kubernetes.io/gce-pd
allowVolumeExpansion: true
reclaimPolicy: Delete

----------------------------------------

TITLE: Configuring Secret for CSI Node Expansion Authentication in Kubernetes
DESCRIPTION: YAML configuration for creating a Kubernetes Secret that stores credentials used for CSI storage node expansion operations. The secret contains username and password fields for authentication.

LANGUAGE: yaml
CODE:
---
apiVersion: v1
kind: Secret
metadata:
  name: test-secret
  namespace: default
data:
  stringData:
    username: admin
    password: t0p-Secret

----------------------------------------

TITLE: Upgrading Kubelet on Windows Node
DESCRIPTION: This snippet shows how to upgrade and restart the kubelet service on a Windows node. It stops the service, downloads the new version, and then restarts the service.

LANGUAGE: powershell
CODE:
stop-service kubelet
curl.exe -Lo <path-to-kubelet.exe> "https://dl.k8s.io/v{{< skew currentPatchVersion >}}/bin/windows/amd64/kubelet.exe"
restart-service kubelet

----------------------------------------

TITLE: Setting Up Kubernetes Admissions Control Webhook
DESCRIPTION: This command applies a Kubernetes configuration to set up an admissions control webhook. This webhook will require QA signatures during deployment.

LANGUAGE: bash
CODE:
kubectl apply -f kubernetes/image-signature-webhook.yaml

----------------------------------------

TITLE: Deleting a PersistentVolumeClaim in Kubernetes
DESCRIPTION: This command deletes a PersistentVolumeClaim (PVC) named 'example-vanilla-block-pvc'. In the context of the article, this is used to demonstrate the behavior of PV deletion when PVCs are deleted.

LANGUAGE: bash
CODE:
kubectl delete pvc example-vanilla-block-pvc

----------------------------------------

TITLE: Configuring Encryption Algorithm in kubeadm
DESCRIPTION: This YAML snippet shows how to specify an encryption algorithm for creating public and private keys in the kubeadm configuration.

LANGUAGE: yaml
CODE:
apiVersion: kubeadm.k8s.io/v1beta4
kind: ClusterConfiguration
encryptionAlgorithm: <ALGORITHM>

----------------------------------------

TITLE: Configuring UserNamespacesSupport Feature Gate in Kubernetes
DESCRIPTION: YAML configuration defining the UserNamespacesSupport feature gate stages in Kubernetes. Specifies alpha stage from v1.28 to v1.29 and beta stage from v1.30, both defaulting to false.

LANGUAGE: yaml
CODE:
title: UserNamespacesSupport
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha
    defaultValue: false
    fromVersion: "1.28"
    toVersion: "1.29"
  - stage: beta
    defaultValue: false
    fromVersion: "1.30"

----------------------------------------

TITLE: Creating a Headless ClusterIP Service with kubectl
DESCRIPTION: Create a new headless ClusterIP service named my-cs by setting clusterip to "None".

LANGUAGE: shell
CODE:
kubectl create service clusterip my-cs --clusterip="None"

----------------------------------------

TITLE: Deleting Bootstrap Tokens in Kubernetes using kubeadm
DESCRIPTION: This command deletes a list of bootstrap tokens from a Kubernetes server. It accepts one or more token values in the format '[a-z0-9]{6}.[a-z0-9]{16}' or token IDs in the format '[a-z0-9]{6}'.

LANGUAGE: shell
CODE:
kubeadm token delete [token-value] ...

----------------------------------------

TITLE: Cleaning Up kube-proxy Rules Using Docker in Bash
DESCRIPTION: This command runs a kube-proxy container to clean up iptables, nftables, or IPVS rules applied by kube-proxy on the host.

LANGUAGE: bash
CODE:
docker run --privileged --rm registry.k8s.io/kube-proxy:v{{< skew currentPatchVersion >}} sh -c "kube-proxy --cleanup && echo DONE"

----------------------------------------

TITLE: Retrieving Kubernetes Namespaces
DESCRIPTION: This command lists all existing namespaces in a Kubernetes cluster, showing their names, labels, and status.

LANGUAGE: bash
CODE:
$ kubectl get namespaces

----------------------------------------

TITLE: YAML Front Matter Configuration for Documentation Page
DESCRIPTION: YAML configuration block defining metadata for the documentation page including title, content type, weight, and card navigation properties.

LANGUAGE: yaml
CODE:
title: Suggesting content improvements
content_type: concept
weight: 10
card:
  name: contribute
  weight: 15
  anchors:
  - anchor: "#opening-an-issue"
    title: Suggest content improvements

----------------------------------------

TITLE: SelfSubjectReview API Version Declaration
DESCRIPTION: YAML declaration of the API version for SelfSubjectReview resource.

LANGUAGE: yaml
CODE:
apiVersion: authentication.k8s.io/v1

----------------------------------------

TITLE: Configuring Encryption Algorithm in kubeadm
DESCRIPTION: This YAML snippet shows how to specify an encryption algorithm for creating public and private keys in the kubeadm configuration.

LANGUAGE: yaml
CODE:
apiVersion: kubeadm.k8s.io/v1beta4
kind: ClusterConfiguration
encryptionAlgorithm: <ALGORITHM>

----------------------------------------

TITLE: Defining YAML Frontmatter for Kubernetes Documentation
DESCRIPTION: YAML frontmatter block that defines metadata for a documentation page about Kubernetes component tools. Specifies the page title and weight for ordering in the documentation hierarchy.

LANGUAGE: yaml
CODE:
---
title: Component tools
weight: 120
---

----------------------------------------

TITLE: Bulk Deletion of Kubernetes Resources
DESCRIPTION: Demonstrates how to delete multiple Kubernetes resources in bulk using kubectl delete with a file or resource names.

LANGUAGE: shell
CODE:
kubectl delete -f https://k8s.io/examples/application/nginx-app.yaml

LANGUAGE: none
CODE:
deployment.apps "my-nginx" deleted
service "my-nginx-svc" deleted

LANGUAGE: shell
CODE:
kubectl delete deployments/my-nginx services/my-nginx-svc

LANGUAGE: shell
CODE:
kubectl delete deployment,services -l app=nginx

LANGUAGE: none
CODE:
deployment.apps "my-nginx" deleted
service "my-nginx-svc" deleted

----------------------------------------

TITLE: Creating Kubernetes Secrets from Local Files
DESCRIPTION: These shell commands create two Secrets named 'user' and 'pass' from local text files containing a username and password. The secrets are then used in the Pod configuration.

LANGUAGE: shell
CODE:
echo -n "admin" > ./username.txt
echo -n "1f2d1e2e67df" > ./password.txt

kubectl create secret generic user --from-file=./username.txt
kubectl create secret generic pass --from-file=./password.txt

----------------------------------------

TITLE: Configuring Stub Domains and Upstream Nameservers in Kubernetes YAML
DESCRIPTION: This YAML ConfigMap configures a custom stub domain for 'acme.local' and sets Google Public DNS as upstream nameservers for kube-dns in Kubernetes.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: ConfigMap
metadata:
  name: kube-dns
  namespace: kube-system
data:
  stubDomains: |
    {"acme.local": ["1.2.3.4"]}
  upstreamNameservers: |
    ["8.8.8.8", "8.8.4.4"]

----------------------------------------

TITLE: Creating a Baseline Pod in the Default Namespace
DESCRIPTION: Creates a baseline Pod in the 'default' namespace without Pod Security Standards enforcement.

LANGUAGE: shell
CODE:
kubectl apply -n default -f https://k8s.io/examples/security/example-baseline-pod.yaml

----------------------------------------

TITLE: Updating Annotations on Kubernetes Resources with kubectl annotate
DESCRIPTION: This command updates annotations on one or more Kubernetes resources. It allows adding, modifying, or removing key-value pairs of metadata associated with resources.

LANGUAGE: bash
CODE:
kubectl annotate [--overwrite] (-f FILENAME | TYPE NAME) KEY_1=VAL_1 ... KEY_N=VAL_N [--resource-version=version]

----------------------------------------

TITLE: PromQL Queries for Kuberhealthy Metrics
DESCRIPTION: PromQL queries for calculating availability and deployment check duration

LANGUAGE: promql
CODE:
1 - (sum(count_over_time(kuberhealthy_check{check="kuberhealthy/deployment", status="0"}[30d])) OR vector(0)) / sum(count_over_time(kuberhealthy_check{check="kuberhealthy/deployment", status="1"}[30d]))

avg(kuberhealthy_check_duration_seconds{check="kuberhealthy/deployment"})

----------------------------------------

TITLE: Background Cascading Deletion in Kubernetes
DESCRIPTION: Commands to perform background cascading deletion using kubectl and the Kubernetes API. Shows both the default deletion behavior and explicit background deletion.

LANGUAGE: shell
CODE:
kubectl delete deployment nginx-deployment --cascade=background

LANGUAGE: shell
CODE:
kubectl proxy --port=8080

LANGUAGE: shell
CODE:
curl -X DELETE localhost:8080/apis/apps/v1/namespaces/default/deployments/nginx-deployment \
    -d '{"kind":"DeleteOptions","apiVersion":"v1","propagationPolicy":"Background"}' \
    -H "Content-Type: application/json"

----------------------------------------

TITLE: Configuring nftables rules for Service IP routing in Kubernetes
DESCRIPTION: This snippet shows how nftables uses a verdict map to efficiently route traffic to specific Services based on their IP addresses and ports. It demonstrates the O(1) lookup complexity, which results in constant packet processing time regardless of cluster size.

LANGUAGE: bash
CODE:
table ip kube-proxy {

        # The service-ips verdict map indicates the action to take for each matching packet.
	map service-ips {
		type ipv4_addr . inet_proto . inet_service : verdict
		comment "ClusterIP, ExternalIP and LoadBalancer IP traffic"
		elements = { 172.30.0.41 . tcp . 80 : goto service-ULMVA6XW-namespace1/service1/tcp/p80,
                             172.30.0.42 . tcp . 443 : goto service-42NFTM6N-namespace2/service2/tcp/p443,
                             172.30.0.43 . tcp . 80 : goto service-4AT6LBPK-namespace3/service3/tcp/p80,
                             ... }
        }

        # Now we just need a single rule to process all packets matching an
        # element in the map. (This rule says, "construct a tuple from the
        # destination IP address, layer 4 protocol, and destination port; look
        # that tuple up in "service-ips"; and if there's a match, execute the
        # associated verdict.)
	chain services {
		ip daddr . meta l4proto . th dport vmap @service-ips
	}

        ...
}

----------------------------------------

TITLE: Viewing Service Information
DESCRIPTION: Commands to display information about the created service including its external IP and port mappings.

LANGUAGE: shell
CODE:
kubectl get services my-service
kubectl describe services my-service

----------------------------------------

TITLE: Ansible Playbook for Kubernetes Worker Node Setup
DESCRIPTION: This YAML code snippet shows the additional steps required in the Ansible playbook for setting up Kubernetes worker nodes. It includes tasks for copying and executing the join command to connect to the cluster.

LANGUAGE: yaml
CODE:
  - name: Copy the join command to server location
    copy: src=join-command dest=/tmp/join-command.sh mode=0777

  - name: Join the node to cluster
    command: sh /tmp/join-command.sh

----------------------------------------

TITLE: Error Message for Duplicate Task Registration in TensorFlow
DESCRIPTION: Example error message shown by TensorFlow when multiple pods are running for the same index.

LANGUAGE: text
CODE:
 /job:worker/task:4: Duplicate task registration with task_name=/job:worker/replica:0/task:4

----------------------------------------

TITLE: Creating a Test Secret
DESCRIPTION: Command to create a new Secret for testing encryption.

LANGUAGE: shell
CODE:
kubectl create secret generic secret1 -n default --from-literal=mykey=mydata

----------------------------------------

TITLE: Replacing Upstream Nameservers in Kubernetes YAML
DESCRIPTION: This YAML ConfigMap replaces the default upstream nameservers with a custom nameserver at 172.16.0.1 for all non-cluster DNS lookups in Kubernetes.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: ConfigMap
metadata:
  name: kube-dns
  namespace: kube-system
data:
  upstreamNameservers: |
    ["172.16.0.1"]

----------------------------------------

TITLE: Creating Suspended Job Configuration in Kubernetes
DESCRIPTION: Example of creating a suspended Job manifest in Kubernetes. The Job is configured with parallelism of 2, requires 10 completions, and starts in a suspended state. The Pod template specifies a busybox container that sleeps for 5 seconds.

LANGUAGE: yaml
CODE:
apiVersion: batch/v1
kind: Job
metadata:
  name: my-job
spec:
  suspend: true
  parallelism: 2
  completions: 10
  template:
    spec:
      containers:
      - name: my-container
        image: busybox
        command: ["sleep", "5"]
      restartPolicy: Never

----------------------------------------

TITLE: Configuring StableLoadBalancerNodeSet Feature Gate in Kubernetes YAML
DESCRIPTION: This YAML configuration defines the StableLoadBalancerNodeSet feature gate for Kubernetes. It specifies beta and stable stages with their respective version ranges and default values. The feature is marked as removed and aims to reduce load balancer reconfigurations due to node state changes.

LANGUAGE: yaml
CODE:
---
title: StableLoadBalancerNodeSet
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: beta
    defaultValue: true
    fromVersion: "1.27"
    toVersion: "1.29"
  - stage: stable
    defaultValue: true
    fromVersion: "1.30"
    toVersion: "1.31"

removed: true
---

----------------------------------------

TITLE: Applying CRD and Resource
DESCRIPTION: Shell commands to apply the CRD and create custom resources

LANGUAGE: shell
CODE:
kubectl apply -f resourcedefinition.yaml
kubectl apply -f my-crontab.yaml

----------------------------------------

TITLE: Defining ResourceLimitsPriorityFunction Feature Gate in YAML
DESCRIPTION: This YAML configuration defines the ResourceLimitsPriorityFunction feature gate for Kubernetes. It specifies the feature's lifecycle stages, including alpha and deprecated, along with version information. The feature is marked as removed.

LANGUAGE: yaml
CODE:
---
# Removed from Kubernetes
title: ResourceLimitsPriorityFunction
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.9"
    toVersion: "1.18"
  - stage: deprecated
    fromVersion: "1.19"
    toVersion: "1.19"

removed: true
---

----------------------------------------

TITLE: Checking CSI Driver Container Logs
DESCRIPTION: This command retrieves the logs from the CSI driver container to verify that it is handling storage management operations.

LANGUAGE: shell
CODE:
kubectl logs {CSIdriverPodName} --container={CSIdriverContainerName}

----------------------------------------

TITLE: Helm Installation Commands for Kuberhealthy
DESCRIPTION: Helm commands for installing Kuberhealthy with different Prometheus configurations

LANGUAGE: bash
CODE:
helm repo add kuberhealthy https://comcast.github.io/kuberhealthy/helm-repos

helm install kuberhealthy kuberhealthy/kuberhealthy --set prometheus.enabled=true,prometheus.enableAlerting=true,prometheus.enableScraping=true,prometheus.serviceMonitor=true

helm install kuberhealthy kuberhealthy/kuberhealthy --set prometheus.enabled=true,prometheus.enableAlerting=true,prometheus.enableScraping=true

helm install kuberhealthy kuberhealthy/kuberhealthy

----------------------------------------

TITLE: Initializing Kubernetes Documentation Page Template in YAML/Markdown
DESCRIPTION: A template file for creating new Kubernetes documentation pages using Hugo static site generator. The template includes YAML front matter with dynamic title generation and content type specification, followed by standard Markdown sections.

LANGUAGE: yaml
CODE:
---
title: "{{ replace .Name "-" " " | title }}"
content_type: concept
---

<!-- overview -->

<!-- body -->

<!-- Optional section; add links to information related to this topic. -->

## {{% heading "whatsnext" %}}

----------------------------------------

TITLE: Authorization with Selectors Example
DESCRIPTION: JSON example of a SubjectAccessReview request with field and label selectors for fine-grained authorization control.

LANGUAGE: json
CODE:
{
  "apiVersion": "authorization.k8s.io/v1beta1",
  "kind": "SubjectAccessReview",
  "spec": {
    "resourceAttributes": {
      "verb": "list",
      "group": "",
      "resource": "pods",
      "fieldSelector": {
        "requirements": [
          {"key":"spec.nodeName", "operator":"In", "values":["mynode"]}
        ]
      },
      "labelSelector": {
        "requirements": [
          {"key":"example.com/mykey", "operator":"In", "values":["myvalue"]}
        ]
      }
    },
    "user": "jane",
    "group": [
      "group1",
      "group2"
    ]
  }
}

----------------------------------------

TITLE: Display Kubernetes Contexts - Usage Examples
DESCRIPTION: Demonstrates common usage examples including listing all contexts and describing a specific context from the kubeconfig file.

LANGUAGE: bash
CODE:
  # List all the contexts in your kubeconfig file
  kubectl config get-contexts
  
  # Describe one context in your kubeconfig file
  kubectl config get-contexts my-context

----------------------------------------

TITLE: Applying Kubernetes Cluster Upgrade with kubeadm
DESCRIPTION: This command applies a Kubernetes cluster upgrade to version 1.8.0 using kubeadm.

LANGUAGE: bash
CODE:
$ kubeadm upgrade apply v1.8.0

----------------------------------------

TITLE: Navigating to Python Example Directory
DESCRIPTION: Change directory to the Python example application folder in the Draft repository.

LANGUAGE: bash
CODE:
$ cd examples/python

----------------------------------------

TITLE: Foreground Cascading Deletion in Kubernetes
DESCRIPTION: Commands to perform foreground cascading deletion using kubectl and the Kubernetes API. Includes setting up a proxy and using curl for API access.

LANGUAGE: shell
CODE:
kubectl delete deployment nginx-deployment --cascade=foreground

LANGUAGE: shell
CODE:
kubectl proxy --port=8080

LANGUAGE: shell
CODE:
curl -X DELETE localhost:8080/apis/apps/v1/namespaces/default/deployments/nginx-deployment \
    -d '{"kind":"DeleteOptions","apiVersion":"v1","propagationPolicy":"Foreground"}' \
    -H "Content-Type: application/json"

----------------------------------------

TITLE: Creating Redis Follower Deployment
DESCRIPTION: YAML configuration for deploying Redis follower replicas for high availability.

LANGUAGE: shell
CODE:
kubectl apply -f https://k8s.io/examples/application/guestbook/redis-follower-deployment.yaml

----------------------------------------

TITLE: Creating a Pod with Seccomp Profile that Causes Violation
DESCRIPTION: Attempts to create a Pod with a seccomp profile that blocks all syscalls, causing the Pod to fail

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: violation-pod
spec:
  securityContext:
    seccompProfile:
      type: Localhost
      localhostProfile: profiles/violation.json
  containers:
  - name: test-container
    image: hashicorp/http-echo:0.2.3
    args:
    - "-text=just made some syscalls!"
    securityContext:
      allowPrivilegeEscalation: false

----------------------------------------

TITLE: Describing a Kubernetes deployment
DESCRIPTION: Retrieves detailed information about the deployment, including its events and replica sets.

LANGUAGE: bash
CODE:
$ kubectl describe deployment/update-demo

----------------------------------------

TITLE: Generating GPG Signing Key for Grafeas Attestation
DESCRIPTION: This command generates a GPG key pair for signing container image attestations in Grafeas. The key is associated with the email qa_bob@example.com.

LANGUAGE: bash
CODE:
gpg --quick-generate-key --yes qa\_bob@example.com

----------------------------------------

TITLE: Updating Kubernetes Repository for CentOS/RHEL/Fedora
DESCRIPTION: This command opens the Kubernetes yum repository configuration file in a text editor to update the repository URL for a new minor version.

LANGUAGE: shell
CODE:
nano /etc/yum.repos.d/kubernetes.repo

----------------------------------------

TITLE: Defining Container Resource Requirements in Kubernetes YAML
DESCRIPTION: This YAML snippet demonstrates how to specify CPU and memory resource requests and limits for a container in a Kubernetes Pod specification.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: example
spec:
  containers:
  - name: nginx
    resources:
      requests:
        memory: "64Mi"
        cpu: "250m"
      limits:
        memory: "64Mi"
        cpu: "500m"

----------------------------------------

TITLE: Minimal Structural Schema with Preserved Unknown Fields in YAML
DESCRIPTION: This snippet demonstrates a minimal valid structural schema that preserves the old schema-less behavior by using the x-kubernetes-preserve-unknown-fields extension.

LANGUAGE: yaml
CODE:
type: object
x-kubernetes-preserve-unknown-fields: true

----------------------------------------

TITLE: Inspecting Container seccomp Profile with crictl and jq
DESCRIPTION: This bash snippet uses crictl to retrieve the container ID and then inspects its runtime specification, focusing on the seccomp configuration. It uses jq to parse and display the JSON output.

LANGUAGE: bash
CODE:
CONTAINER_ID=$(sudo crictl ps -q --name=test-container)
sudo crictl inspect $CONTAINER_ID | jq .info.runtimeSpec.linux.seccomp

----------------------------------------

TITLE: Orphan Deletion in Kubernetes
DESCRIPTION: Commands to delete owner objects while orphaning their dependents using kubectl and the Kubernetes API.

LANGUAGE: shell
CODE:
kubectl delete deployment nginx-deployment --cascade=orphan

LANGUAGE: shell
CODE:
kubectl proxy --port=8080

LANGUAGE: shell
CODE:
curl -X DELETE localhost:8080/apis/apps/v1/namespaces/default/deployments/nginx-deployment \
    -d '{"kind":"DeleteOptions","apiVersion":"v1","propagationPolicy":"Orphan"}' \
    -H "Content-Type: application/json"

----------------------------------------

TITLE: Specifying Custom Scheduler in Pod Definition
DESCRIPTION: YAML configuration showing how to specify a custom scheduler for a pod using the schedulerName field.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: nginx
  labels:
    app: nginx
spec:
  schedulerName: my-scheduler
  containers:
  - name: nginx
    image: nginx:1.10

----------------------------------------

TITLE: Creating Ingress Rule for Productpage Service
DESCRIPTION: YAML configuration to define an Ingress rule for routing traffic to the productpage service.

LANGUAGE: yaml
CODE:
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: productpage
  annotations:
    configuration.konghq.com: do-not-preserve-host
spec:
  rules:
  - http:
      paths:
      - path: /
        backend:
          serviceName: productpage
          servicePort: 9080

----------------------------------------

TITLE: Configuring ServiceLoadBalancerFinalizer Feature Gate in Kubernetes YAML
DESCRIPTION: This YAML configuration defines the ServiceLoadBalancerFinalizer feature gate, which enables finalizer protection for Service load balancers. It specifies the feature's lifecycle stages, version ranges, and removal status.

LANGUAGE: yaml
CODE:
---
# Removed from Kubernetes
title: ServiceLoadBalancerFinalizer
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.15"
    toVersion: "1.15"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.16"
    toVersion: "1.16"    
  - stage: stable
    defaultValue: true
    fromVersion: "1.17"
    toVersion: "1.20"    

removed: true
---
Enable finalizer protection for Service load balancers.

----------------------------------------

TITLE: Checking Kubernetes Service Details
DESCRIPTION: Command to view the default kubernetes service configuration and its cluster IP.

LANGUAGE: bash
CODE:
kubectl get service kubernetes

----------------------------------------

TITLE: Creating Bootstrap Tokens with Kubeadm in Bash
DESCRIPTION: This command creates a bootstrap token for Kubernetes cluster initialization. It allows specifying token usages, expiration time, and an optional description. If no token is provided, kubeadm generates a random one.

LANGUAGE: bash
CODE:
kubeadm token create [token]

----------------------------------------

TITLE: Defining PortForwardWebsockets Feature Gate Configuration in YAML
DESCRIPTION: YAML configuration defining the PortForwardWebsockets feature gate stages, including alpha and beta phases with their respective versions and default values.

LANGUAGE: yaml
CODE:
---
title: PortForwardWebsockets
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha
    defaultValue: false
    fromVersion: "1.30"
    toVersion: "1.30"
  - stage: beta
    defaultValue: true
    fromVersion: "1.31"
---

----------------------------------------

TITLE: Creating a Kubernetes Cluster with Seccomp Profiles using Kind
DESCRIPTION: Uses kind to create a local Kubernetes cluster with seccomp profiles loaded

LANGUAGE: yaml
CODE:
kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4
nodes:
- role: control-plane
  extraMounts:
  - hostPath: "./profiles"
    containerPath: "/var/lib/kubelet/seccomp/profiles"

----------------------------------------

TITLE: Accessing JupyterHub in Kubeflow
DESCRIPTION: Command to port-forward JupyterHub and instructions to access it via a web browser.

LANGUAGE: bash
CODE:
kubectl port-forward tf-hub-0 8100:8000

----------------------------------------

TITLE: Creating Kuberhealthy Namespace - Bash Commands
DESCRIPTION: Commands to create and set the kuberhealthy namespace in Kubernetes cluster

LANGUAGE: bash
CODE:
kubectl create namespace kuberhealthy
kubectl config set-context --current --namespace=kuberhealthy

----------------------------------------

TITLE: Modifying the Seccomp Profile
DESCRIPTION: This console command uses jq to modify the seccomp profile by removing the uname syscall from the allowed list.

LANGUAGE: console
CODE:
> jq 'del(.syscalls[0].names[] | select(. == "uname"))' /tmp/profile.json > /tmp/no-uname-profile.json

----------------------------------------

TITLE: Querying Resource Usage with JSONPath
DESCRIPTION: Command to query and format resource quota usage using jq

LANGUAGE: shell
CODE:
kubectl get resourcequota mem-cpu-demo --namespace=quota-mem-cpu-example -o jsonpath='{ .status.used }' | jq .

----------------------------------------

TITLE: Configuring Failure Policy in ValidatingAdmissionPolicy
DESCRIPTION: Example of setting the failure policy to 'Ignore' in a ValidatingAdmissionPolicy.

LANGUAGE: yaml
CODE:
apiVersion: admissionregistration.k8s.io/v1beta1
kind: ValidatingAdmissionPolicy
metadata:
  name: "demo-policy.example.com"
spec:
  failurePolicy: Ignore
  matchConstraints:
    resourceRules:
    - apiGroups:   ["apps"]
      apiVersions: ["v1"]
      operations:  ["CREATE", "UPDATE"]
      resources:   ["deployments"]
  validations:
  - expression: "object.spec.replicas <= 5"


----------------------------------------

TITLE: Exploiting Subpath Volume Vulnerability in Kubernetes YAML
DESCRIPTION: This YAML snippet demonstrates how the subpath volume vulnerability could be exploited. It uses an init container to create a symlink and a regular container to mount that symlink as a subpath, potentially accessing the entire host filesystem.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: my-pod
spec:
  initContainers:
  - name: prep-symlink
    image: "busybox"
    command: ["bin/sh", "-ec", "ln -s / /mnt/data/symlink-door"]
    volumeMounts:
    - name: my-volume
      mountPath: /mnt/data
  containers:
  - name: my-container
    image: "busybox"
    command: ["/bin/sh", "-ec", "ls /mnt/data; sleep 999999"]
    volumeMounts:
    - mountPath: /mnt/data
      name: my-volume
      subPath: symlink-door
  volumes:
  - name: my-volume
    emptyDir: {}

----------------------------------------

TITLE: Sending HTTP PATCH Request to Remove Resource
DESCRIPTION: This curl command sends the HTTP PATCH request to remove the 'dongle' extended resource from a specific node.

LANGUAGE: shell
CODE:
curl --header "Content-Type: application/json-patch+json" \
  --request PATCH \
  --data '[{"op": "remove", "path": "/status/capacity/example.com~1dongle"}]' \
  http://localhost:8001/api/v1/nodes/<your-node-name>/status

----------------------------------------

TITLE: Sending HTTP PATCH Request to Remove Resource
DESCRIPTION: This curl command sends the HTTP PATCH request to remove the 'dongle' extended resource from a specific node.

LANGUAGE: shell
CODE:
curl --header "Content-Type: application/json-patch+json" \
  --request PATCH \
  --data '[{"op": "remove", "path": "/status/capacity/example.com~1dongle"}]' \
  http://localhost:8001/api/v1/nodes/<your-node-name>/status

----------------------------------------

TITLE: Displaying Includes Bundle Structure in Bash
DESCRIPTION: This snippet shows the file structure of an includes bundle, which is set as headless and used for content inclusion in other pages.

LANGUAGE: bash
CODE:
en/includes
├── default-storage-class-prereqs.md
├── index.md
├── partner-script.js
├── partner-style.css
├── task-tutorial-prereqs.md
├── user-guide-content-moved.md
└── user-guide-migration-notice.md

----------------------------------------

TITLE: Running Kubeadm Node Upgrade Pre-flight Checks
DESCRIPTION: Command for executing pre-flight checks before upgrading a Kubernetes node. Supports configuration file input and allows ignoring specific preflight errors as warnings.

LANGUAGE: bash
CODE:
kubeadm upgrade node phase preflight [flags]

----------------------------------------

TITLE: YAML Frontmatter Configuration for Kubernetes Tasks Page
DESCRIPTION: YAML frontmatter metadata configuration that defines the page properties for the Tasks section in Kubernetes documentation. Sets the title, menu placement, weight, and content type.

LANGUAGE: yaml
CODE:
---
title: Tasks
main_menu: true
weight: 50
content_type: concept
---

----------------------------------------

TITLE: Defining AggregatedDiscoveryEndpoint Feature Gate Stages in YAML
DESCRIPTION: Configures the feature gate stages from alpha through stable, including version ranges and default values. The feature enables a single HTTP endpoint /discovery/<version> that supports HTTP caching with ETags for API resource discovery.

LANGUAGE: yaml
CODE:
title: AggregatedDiscoveryEndpoint
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha
    defaultValue: false
    fromVersion: "1.26"
    toVersion: "1.26"
  - stage: beta
    defaultValue: true
    fromVersion: "1.27"
    toVersion: "1.29"
  - stage: stable
    defaultValue: true
    fromVersion: "1.30"

----------------------------------------

TITLE: Defining Custom ClusterRole in Kubernetes YAML
DESCRIPTION: This YAML snippet defines a custom ClusterRole named 'deployer' with specific permissions for deployments, configmaps, secrets, and pods. It demonstrates how to create fine-grained access control for Kubernetes resources.

LANGUAGE: yaml
CODE:
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: deployer
rules:
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list", "watch", "create", "delete", "update", "patch"]

- apiGroups: [""] # "" indicates the core API group
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch", "create", "delete", "update", "patch"]

- apiGroups: [""] # "" indicates the core API group
  resources: ["pods"]
  verbs: ["get", "list", "watch"]

----------------------------------------

TITLE: Accessing Deployed Application
DESCRIPTION: Retrieve the service IP and use curl to access the deployed application.

LANGUAGE: bash
CODE:
$ export SERVICE_IP=$(kubectl get svc --namespace default tufted-lamb-tufted-lamb -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
$ curl http://$SERVICE_IP

----------------------------------------

TITLE: Predicting Pull Request Type with REST API
DESCRIPTION: Curl command to use the deployed REST API for predicting pull request types based on release notes.

LANGUAGE: bash
CODE:
> curl https://kfserving.k8s.saschagrunert.de/v1/models/kubernetes-analysis:predict \
    -d '{"text": "my test text"}'
{"result": 0.1251964420080185}

----------------------------------------

TITLE: Pod Definition with Generic Ephemeral Volume
DESCRIPTION: Example YAML configuration showing how to define a Pod that uses a generic ephemeral inline volume with PMEM-CSI storage class.

LANGUAGE: yaml
CODE:
kind: Pod
apiVersion: v1
metadata:
  name: my-csi-app-inline-volume
spec:
  containers:
    - name: my-frontend
      image: intel/pmem-csi-driver-test:v0.7.14
      command: [ "sleep", "100000" ]
      volumeMounts:
      - mountPath: "/data"
        name: my-csi-volume
  volumes:
  - name: my-csi-volume
    ephemeral:
      volumeClaimTemplate:
        spec:
          accessModes:
          - ReadWriteOnce
          resources:
            requests:
              storage: 4Gi
          storageClassName: pmem-csi-sc-late-binding

----------------------------------------

TITLE: Creating Pod with Termination Message
DESCRIPTION: Shell command to create a Pod that demonstrates termination message functionality

LANGUAGE: shell
CODE:
kubectl apply -f https://k8s.io/examples/debug/termination.yaml

----------------------------------------

TITLE: DNS Zone Configuration Check
DESCRIPTION: Commands to verify and inspect DNS configuration for the federated service

LANGUAGE: bash
CODE:
$ gcloud dns managed-zones describe example-dot-com

$ gcloud dns record-sets list --zone example-dot-com

----------------------------------------

TITLE: Defining Required Labels Constraint Template in Kubernetes
DESCRIPTION: A YAML configuration for creating a constraint template CRD that enforces required label policies. The template includes Rego logic to validate label requirements and schema definition for constraint parameters.

LANGUAGE: yaml
CODE:
apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: k8srequiredlabels
spec:
  crd:
    spec:
      names:
        kind: K8sRequiredLabels
        listKind: K8sRequiredLabelsList
        plural: k8srequiredlabels
        singular: k8srequiredlabels
      validation:
        # Schema for the `parameters` field
        openAPIV3Schema:
          properties:
            labels:
              type: array
              items: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8srequiredlabels

        deny[{"msg": msg, "details": {"missing_labels": missing}}] {
          provided := {label | input.review.object.metadata.labels[label]}
          required := {label | label := input.parameters.labels[_]}
          missing := required - provided
          count(missing) > 0
          msg := sprintf("you must provide labels: %v", [missing])
        }

----------------------------------------

TITLE: Configuring SecurityContextDeny Feature Gate in Kubernetes YAML
DESCRIPTION: YAML configuration defining the SecurityContextDeny feature gate settings. This feature gate was in alpha stage from version 1.27 to 1.29 with a default value of false and has been removed.

LANGUAGE: yaml
CODE:
title: SecurityContextDeny
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.27"
    toVersion: "1.29"
removed: true

----------------------------------------

TITLE: Cleanup Commands
DESCRIPTION: Commands to clean up the created resources by removing the service and deployment.

LANGUAGE: shell
CODE:
kubectl delete services my-service
kubectl delete deployment hello-world

----------------------------------------

TITLE: Configuring KubeletPodResourcesGet Feature Gate in YAML
DESCRIPTION: YAML configuration defining the KubeletPodResourcesGet feature gate properties. Specifies that this is an alpha feature from Kubernetes version 1.27 with a default value of false.

LANGUAGE: yaml
CODE:
title: KubeletPodResourcesGet
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha
    defaultValue: false
    fromVersion: "1.27"

----------------------------------------

TITLE: Kubernetes VolumeSnapshot Configuration
DESCRIPTION: YAML configuration for creating VolumeSnapshotContent and VolumeSnapshot resources in Kubernetes.

LANGUAGE: yaml
CODE:
---
apiVersion: snapshot.storage.k8s.io/v1
kind: VolumeSnapshotContent
metadata:
 name: postgresql-orders-db-sandbox01
 namespace: sandbox01
spec:
 deletionPolicy: Retain
 driver: pd.csi.storage.gke.io
 source:
   snapshotHandle: 'gcp/projects/staging-eu-castai-vt5hy2/global/snapshots/6645363163809389170'
 volumeSnapshotRef:
   kind: VolumeSnapshot
   name: postgresql-orders-db-snap
   namespace: sandbox01
---
apiVersion: snapshot.storage.k8s.io/v1
kind: VolumeSnapshot
metadata:
 name: postgresql-orders-db-snap
 namespace: sandbox01
spec:
 source:
   volumeSnapshotContentName: postgresql-orders-db-sandbox01

----------------------------------------

TITLE: Creating a KinD Kubernetes Cluster
DESCRIPTION: Commands to create a single-node Kubernetes cluster using KinD.

LANGUAGE: bash
CODE:
kind create cluster --name wslkind

----------------------------------------

TITLE: Blog Post Front Matter Configuration in YAML
DESCRIPTION: YAML configuration for the blog post metadata including title, date, author and layout information.

LANGUAGE: yaml
CODE:
---
layout: blog
title: "Kubernetes 1.26: Job Tracking, to Support Massively Parallel Batch Workloads, Is Generally Available"
date: 2022-12-29
slug: "scalable-job-tracking-ga"
author: >
  Aldo Culquicondor (Google)
---

----------------------------------------

TITLE: HTTP Endpoints for IPAddress Operations
DESCRIPTION: REST API endpoints for performing CRUD operations on IPAddress resources.

LANGUAGE: http
CODE:
GET /apis/networking.k8s.io/v1beta1/ipaddresses/{name}
GET /apis/networking.k8s.io/v1beta1/ipaddresses
POST /apis/networking.k8s.io/v1beta1/ipaddresses
PUT /apis/networking.k8s.io/v1beta1/ipaddresses/{name}
PATCH /apis/networking.k8s.io/v1beta1/ipaddresses/{name}
DELETE /apis/networking.k8s.io/v1beta1/ipaddresses/{name}
DELETE /apis/networking.k8s.io/v1beta1/ipaddresses

----------------------------------------

TITLE: Example CSR Status with Certificate
DESCRIPTION: YAML example showing a CertificateSigningRequest with an issued certificate in its status

LANGUAGE: YAML
CODE:
apiVersion: certificates.k8s.io/v1
kind: CertificateSigningRequest
...
status:
  certificate: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSS..."

----------------------------------------

TITLE: Creating a Pod with Default CPU Resources in Kubernetes
DESCRIPTION: This command creates a Pod in the 'default-cpu-example' namespace, which will receive default CPU requests and limits from the LimitRange.

LANGUAGE: shell
CODE:
kubectl apply -f https://k8s.io/examples/admin/resource/cpu-defaults-pod.yaml --namespace=default-cpu-example

----------------------------------------

TITLE: Uploading Kubelet Config Command - Bash
DESCRIPTION: Command syntax for uploading kubelet configuration to a ConfigMap using kubeadm. Supports configuration file input, dry-run mode, and custom kubeconfig specification.

LANGUAGE: bash
CODE:
kubeadm upgrade apply phase upload-config kubelet [flags]

----------------------------------------

TITLE: Deploying TensorFlow Jobs and Models
DESCRIPTION: Commands to generate and deploy TensorFlow training jobs and serving models using ksonnet templates after Kubeflow installation.

LANGUAGE: bash
CODE:
ks generate tf-job my-tf-job --name=my-tf-job --image=gcr.io/my/image:latest
ks apply default -c my-tf-job

We could then deploy the model by doing

ks generate tf-serving ${MODEL_COMPONENT} --name=${MODEL_NAME}
ks param set ${MODEL_COMPONENT} modelPath ${MODEL_PATH}
ks apply ${ENV} -c ${MODEL_COMPONENT}

----------------------------------------

TITLE: Checking Modified Files in Kubernetes Website Repository
DESCRIPTION: This snippet shows how to check which files have been modified in the kubernetes/website repository after generating the API reference documentation.

LANGUAGE: shell
CODE:
cd <web-base>\ngit status

----------------------------------------

TITLE: Configuring Robots.txt Rules for Kubernetes Website
DESCRIPTION: Defines search engine crawler access rules for the Kubernetes website. Blocks access to legacy versions and specific API documentation while allowing access to API index and labels documentation. Includes a dynamic sitemap reference.

LANGUAGE: robotstxt
CODE:
User-agent: *

Disallow: /legacy/
Disallow: /v1.0/
Disallow: /v1.1/
Disallow: /404/
Disallow: /404.html

Allow: /docs/reference/kubernetes-api/api-index/
Allow: /docs/reference/kubernetes-api/labels-annotations-taints/
Disallow: /docs/reference/kubernetes-api/

SITEMAP: {{ "sitemap.xml" | absLangURL }}

----------------------------------------

TITLE: Listing Containers with Docker CLI
DESCRIPTION: Example of using docker ps command to list containers, showing the default output format with long container names and mixed container types.

LANGUAGE: bash
CODE:
docker ps

----------------------------------------

TITLE: Topology Hint Structure Definition
DESCRIPTION: Go struct definition for topology hints used to encode NUMA constraints

LANGUAGE: go
CODE:
type TopologyHint struct {
    NUMANodeAffinity bitmask.BitMask
    Preferred bool
}

----------------------------------------

TITLE: Istio Deployment and Monitoring Commands
DESCRIPTION: Commands for deploying BookInfo with Istio and accessing monitoring tools like Grafana and Zipkin.

LANGUAGE: bash
CODE:
kubectl delete -f bookinfo-v1.yaml
kubectl apply -f <(istioctl kube-inject -f bookinfo-v1.yaml)
export GRAFANA_URL=$(kubectl get po -l app=grafana -o jsonpath={.items[0].status.hostIP}):$(kubectl get svc grafana -o jsonpath={.spec.ports[0].nodePort})
export ZIPKIN_URL=$(kubectl get po -l app=zipkin -o jsonpath={.items[0].status.hostIP}):$(kubectl get svc zipkin -o jsonpath={.spec.ports[0].nodePort})
wrk -t1 -c1 -d20s http://$BOOKINFO_URL/productpage

----------------------------------------

TITLE: Configuring Memory Manager Policy in YAML
DESCRIPTION: This YAML snippet shows the front matter for the blog post, including layout, title, date, slug, and authors.

LANGUAGE: yaml
CODE:
---
layout: blog
title: "Kubernetes Memory Manager moves to beta"
date: 2021-08-11
slug: kubernetes-1-22-feature-memory-manager-moves-to-beta
author: >
  Artyom Lukianov (Red Hat),
  Cezary Zukowski (Samsung) 
---

----------------------------------------

TITLE: Kubernetes Service Configuration for Webhook
DESCRIPTION: YAML configuration for the Kubernetes service that exposes the webhook server.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Service
metadata:
  name: webhook-server
  namespace: webhook-demo
spec:
  selector:
    app: webhook-server
  ports:
    - port: 443
      targetPort: webhook-api

----------------------------------------

TITLE: Dumping Cluster Information
DESCRIPTION: Command to retrieve detailed information about the overall health of the Kubernetes cluster.

LANGUAGE: shell
CODE:
kubectl cluster-info dump

----------------------------------------

TITLE: Configuring Existing VPC Support in kube-aws
DESCRIPTION: This YAML snippet shows how to configure kube-aws to deploy a Kubernetes cluster to an existing VPC by specifying the VPC ID and route table ID.

LANGUAGE: yaml
CODE:
vpcId: vpc-xxxxx

routeTableId: rtb-xxxxx

----------------------------------------

TITLE: Configuring SCTPSupport Feature Gate Lifecycle in YAML
DESCRIPTION: Defines the lifecycle stages, default values, and version ranges for the SCTPSupport feature gate in Kubernetes. It progresses from alpha to beta to stable, and is marked as removed.

LANGUAGE: yaml
CODE:
title: SCTPSupport
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.12"
    toVersion: "1.18"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.19"
    toVersion: "1.19"
  - stage: stable
    defaultValue: true
    fromVersion: "1.20"
    toVersion: "1.22"

removed: true

----------------------------------------

TITLE: Creating Redis Follower Service
DESCRIPTION: YAML configuration for creating a Service to enable communication with Redis followers.

LANGUAGE: shell
CODE:
kubectl apply -f https://k8s.io/examples/application/guestbook/redis-follower-service.yaml

----------------------------------------

TITLE: Setting Build Variables for Kubernetes Documentation Generation
DESCRIPTION: This snippet sets the necessary environment variables for building Kubernetes API reference documentation.

LANGUAGE: shell
CODE:
export K8S_WEBROOT=${GOPATH}/src/github.com/<your-username>/website\nexport K8S_ROOT=${GOPATH}/src/k8s.io/kubernetes\nexport K8S_RELEASE=1.17.0

----------------------------------------

TITLE: Upgrading Kubernetes Control Plane Node Command
DESCRIPTION: Command to upgrade the control plane components on a Kubernetes node. Supports options for certificate renewal, etcd upgrades, and dry-run execution. Can be configured with custom patches and configuration files.

LANGUAGE: bash
CODE:
kubeadm upgrade node phase control-plane [flags]

----------------------------------------

TITLE: Configuring DisableNodeKubeProxyVersion Feature Gate in Kubernetes YAML
DESCRIPTION: This YAML configuration defines the lifecycle stages and default values for the DisableNodeKubeProxyVersion feature gate. It specifies the versions and default settings for alpha, beta, and deprecated stages.

LANGUAGE: yaml
CODE:
title: DisableNodeKubeProxyVersion
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha
    defaultValue: false
    fromVersion: "1.29"
    toVersion: "1.30"
  - stage: beta
    defaultValue: true
    fromVersion: '1.31.0'
    toVersion: '1.31.0'
  - stage: deprecated
    defaultValue: false
    fromVersion: "1.31.1"
  - stage: deprecated
    defaultValue: false
    fromVersion: "1.32"

----------------------------------------

TITLE: Applying HostAliases Pod configuration in Kubernetes
DESCRIPTION: This snippet shows how to apply the HostAliases Pod configuration and examine its details.

LANGUAGE: shell
CODE:
kubectl apply -f https://k8s.io/examples/service/networking/hostaliases-pod.yaml

LANGUAGE: shell
CODE:
kubectl get pod --output=wide

----------------------------------------

TITLE: Checking Container Status Commands
DESCRIPTION: Commands for verifying the status of essential containers like etcd and flannel

LANGUAGE: bash
CODE:
$ docker -H unix:///var/run/docker-bootstrap.sock ps

CONTAINER ID        IMAGE                        COMMAND                  CREATED             STATUS              PORTS               NAMES

4855cc1450ff        andrewpsuedonym/flanneld     "flanneld --etcd-endp"   2 hours ago         Up 2 hours                              k8s-flannel

ef410b986cb3        andrewpsuedonym/etcd:2.1.1   "/bin/etcd --addr=127"   2 hours ago         Up 2 hours                              k8s-etcd

----------------------------------------

TITLE: Creating Nginx Pod with Image Populator Volume
DESCRIPTION: YAML configuration for an Nginx pod using an Image Populator ephemeral volume.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: nginx
spec:
  containers:
  - name: nginx
    image: nginx:1.16-alpine
    ports:
    - containerPort: 80
    volumeMounts:
    - name: data
      mountPath: /usr/share/nginx/html
  volumes:
  - name: data
    csi:
      driver: image.csi.k8s.io
      volumeAttributes:
          image: kfox1111/misc:test

----------------------------------------

TITLE: Checking API Access with kubectl
DESCRIPTION: Examples of using kubectl auth can-i command to check API access permissions for different users and service accounts.

LANGUAGE: bash
CODE:
kubectl auth can-i create deployments --namespace dev

kubectl auth can-i create deployments --namespace prod

kubectl auth can-i list secrets --namespace dev --as dave

kubectl auth can-i list pods \
    --namespace target \
    --as system:serviceaccount:dev:dev-sa

----------------------------------------

TITLE: Installing kubeadm on hosts
DESCRIPTION: Reference to separate documentation for installing kubeadm on the host machines.



----------------------------------------

TITLE: Checking API Access with kubectl
DESCRIPTION: Examples of using kubectl auth can-i command to check API access permissions for different users and service accounts.

LANGUAGE: bash
CODE:
kubectl auth can-i create deployments --namespace dev

kubectl auth can-i create deployments --namespace prod

kubectl auth can-i list secrets --namespace dev --as dave

kubectl auth can-i list pods \
    --namespace target \
    --as system:serviceaccount:dev:dev-sa

----------------------------------------

TITLE: Configuring PersistentLocalVolumes Feature Gate in Kubernetes
DESCRIPTION: YAML configuration defining the lifecycle stages of the PersistentLocalVolumes feature gate. The feature started as alpha in version 1.7, moved to beta in 1.10, became stable in 1.14, and was removed after 1.16. This feature enabled the usage of local volume types in Pods with required Pod affinity specifications.

LANGUAGE: yaml
CODE:
title: PersistentLocalVolumes
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.7"
    toVersion: "1.9"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.10"
    toVersion: "1.13"
  - stage: stable
    defaultValue: true
    fromVersion: "1.14"
    toVersion: "1.16"

removed: true

----------------------------------------

TITLE: Control Code Checker Usage - Python
DESCRIPTION: Help output for check-ctrlcode.py that finds control characters in text files

LANGUAGE: bash
CODE:
Usage: ./check-ctrlcode.py <dir> <ext>

  <dir>    Specify the directory to check.
  <ext>    Specify the extension to check.

For example, we can execute as following.

  ./check-ctrlcode.py ../content/en/ .md

The output is following format.

  "{0} <L{1}:{2}:{3}>: {4}"

  {0} : The path of file that a control-code exists.
  {1} : The line number that a control-code exists.
  {2} : The column number that a control-code exists.
  {3} : The found control-code.
  {4} : The one-line strings in the file.

----------------------------------------

TITLE: Checking API Access with kubectl
DESCRIPTION: Examples of using kubectl auth can-i command to check API access permissions for different users and service accounts.

LANGUAGE: bash
CODE:
kubectl auth can-i create deployments --namespace dev

kubectl auth can-i create deployments --namespace prod

kubectl auth can-i list secrets --namespace dev --as dave

kubectl auth can-i list pods \
    --namespace target \
    --as system:serviceaccount:dev:dev-sa

----------------------------------------

TITLE: Using kubectl Plugin to Get Pod Interaction Information
DESCRIPTION: This bash snippet shows how to use the custom kubectl plugin 'pi' to retrieve information about Pod interactions. It displays the interactor, TTL, and eviction time for affected Pods.

LANGUAGE: bash
CODE:
$ kubectl pi get test-pod
POD-NAME  INTERACTOR  POD-TTL  EXTENSION  EXTENSION-REQUESTER  EVICTION-TIME
test-pod  username-1  1h0m0s   /          /                    2021-09-24 17:00:00 -0800 PST

----------------------------------------

TITLE: Basic kubectl describe Usage
DESCRIPTION: Base command syntax for describing Kubernetes resources, supporting file input, resource types, and label selectors

LANGUAGE: bash
CODE:
kubectl describe (-f FILENAME | TYPE [NAME_PREFIX | -l label] | TYPE/NAME)

----------------------------------------

TITLE: Displaying Network Interface Information with ip addr
DESCRIPTION: This snippet demonstrates the use of the 'ip addr' command to show network interface information, specifically highlighting the kube-ipvs0 interface used by IPVS.

LANGUAGE: bash
CODE:
# ip addr
...
73: kube-ipvs0: <BROADCAST,NOARP> mtu 1500 qdisc noop state DOWN qlen 1000
    link/ether 1a:ce:f5:5f:c1:4d brd ff:ff:ff:ff:ff:ff
    inet 10.102.128.4/32 scope global kube-ipvs0
       valid_lft forever preferred_lft forever

----------------------------------------

TITLE: Defining RuntimeClass for Windows 2019 Nodes
DESCRIPTION: YAML definition for a RuntimeClass object that encapsulates the node selector and tolerations for Windows Server 2019 nodes, simplifying the process of scheduling Windows Pods.

LANGUAGE: yaml
CODE:
---
apiVersion: node.k8s.io/v1
kind: RuntimeClass
metadata:
  name: windows-2019
handler: example-container-runtime-handler
scheduling:
  nodeSelector:
    kubernetes.io/os: 'windows'
    kubernetes.io/arch: 'amd64'
    node.kubernetes.io/windows-build: '10.0.17763'
  tolerations:
  - effect: NoSchedule
    key: os
    operator: Equal
    value: "windows"

----------------------------------------

TITLE: List Weight Sum Validation with CEL
DESCRIPTION: CEL expression using the list library to verify that the "weights" of a list of objects sum to 1.0.

LANGUAGE: CEL
CODE:
items.map(x, x.weight).sum() == 1.0

----------------------------------------

TITLE: Markdown Documentation for CNCF Code of Conduct
DESCRIPTION: Structured markdown document containing the complete CNCF Code of Conduct, including community standards, scope, reporting procedures, and enforcement guidelines.

LANGUAGE: markdown
CODE:
<!-- Do not edit this file directly. Get the latest from\n     https://github.com/cncf/foundation/blob/main/code-of-conduct.md -->\n## CNCF Community Code of Conduct v1.3\n\n### Community Code of Conduct\n\nAs contributors, maintainers, and participants in the CNCF community...\n[Content truncated for brevity]

----------------------------------------

TITLE: Examples of Using kubectl create
DESCRIPTION: These examples demonstrate various ways to use the kubectl create command, including creating a pod from a JSON file, using stdin, and editing data before creation.

LANGUAGE: bash
CODE:
# Create a pod using the data in pod.json
kubectl create -f ./pod.json

# Create a pod based on the JSON passed into stdin
cat pod.json | kubectl create -f -

# Edit the data in registry.yaml in JSON then create the resource using the edited data
kubectl create -f registry.yaml --edit -o json

----------------------------------------

TITLE: Configuring BackendTLSPolicy with Explicit CA Certificates in Gateway API
DESCRIPTION: This YAML snippet shows how to configure a BackendTLSPolicy using explicitly defined CA certificates from a ConfigMap. It specifies the target Service, the ConfigMap containing the certificates, and the expected hostname for the backend Pods.

LANGUAGE: yaml
CODE:
apiVersion: gateway.networking.k8s.io/v1alpha2
kind: BackendTLSPolicy
metadata:
  name: tls-upstream-auth
spec:
  targetRef:
    kind: Service
    name: auth-service
    group: ""
  tls:
    caCertRefs:
      - kind: ConfigMapReference
        name: auth-cert
        group: ""
    hostname: auth.example.com

----------------------------------------

TITLE: Creating Ingress Resource for Bookinfo
DESCRIPTION: Defines an Ingress resource to expose the Bookinfo application through Istio's Ingress controller.

LANGUAGE: yaml
CODE:
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
 name: bookinfo
 annotations:
     kubernetes.io/ingress.class: "istio"
spec:
 rules:
 - http:
         paths:
         - path: /productpage
             backend:
                 serviceName: productpage
                 servicePort: 9080
         - path: /login
             backend:
                 serviceName: productpage
                 servicePort: 9080
         - path: /logout
             backend:
                 serviceName: productpage
                 servicePort: 9080

----------------------------------------

TITLE: Checking Job Completion and Results
DESCRIPTION: Shell commands to wait for the job completion and view its output logs.

LANGUAGE: shell
CODE:
kubectl wait --for=condition=Complete job/example-job
kubectl logs job/example-job

----------------------------------------

TITLE: Checking Deletion Policy of VolumeSnapshotContent in Kubernetes
DESCRIPTION: This snippet demonstrates how to create a snapshot and inspect the deletion policy of a dynamically provisioned VolumeSnapshotContent using kubectl commands.

LANGUAGE: bash
CODE:
$ kubectl create -f ./examples/kubernetes/demo-defaultsnapshotclass.yaml
$ kubectl create -f ./examples/kubernetes/demo-snapshot.yaml
$ kubectl get volumesnapshots demo-snapshot-podpvc -o yaml
$ kubectl get volumesnapshotcontent snapcontent-26cd0db3-f2a0-11e8-8be6-42010a800002 -o yaml

LANGUAGE: yaml
CODE:
apiVersion: snapshot.storage.k8s.io/v1alpha1
kind: VolumeSnapshot
metadata:
  creationTimestamp: "2018-11-27T23:57:09Z"
...
spec:
  snapshotClassName: default-snapshot-class
  snapshotContentName: snapcontent-26cd0db3-f2a0-11e8-8be6-42010a800002
  source:
    apiGroup: null
    kind: PersistentVolumeClaim
    name: podpvc
status:
…

LANGUAGE: yaml
CODE:
apiVersion: snapshot.storage.k8s.io/v1alpha1
kind: VolumeSnapshotContent
…
spec:
  csiVolumeSnapshotSource:
    creationTime: 1546469777852000000
    driver: pd.csi.storage.gke.io
    restoreSize: 6442450944
    snapshotHandle: projects/jing-k8s-dev/global/snapshots/snapshot-26cd0db3-f2a0-11e8-8be6-42010a800002
  deletionPolicy: Delete
  persistentVolumeRef:
    apiVersion: v1
    kind: PersistentVolume
    name: pvc-853622a4-f28b-11e8-8be6-42010a800002
    resourceVersion: "21117"
    uid: ae400e9f-f28b-11e8-8be6-42010a800002
  snapshotClassName: default-snapshot-class
  volumeSnapshotRef:
    apiVersion: snapshot.storage.k8s.io/v1alpha1
    kind: VolumeSnapshot
    name: demo-snapshot-podpvc
    namespace: default
    resourceVersion: "6948065"
    uid: 26cd0db3-f2a0-11e8-8be6-42010a800002

----------------------------------------

TITLE: Listing All Container Images Across Namespaces in Kubernetes
DESCRIPTION: This command retrieves all Pods across all namespaces, extracts the Container image names using jsonpath, and formats the output to show unique image counts. It uses tr, sort, and uniq for processing.

LANGUAGE: shell
CODE:
kubectl get pods --all-namespaces -o jsonpath="{.items[*].spec['initContainers', 'containers'][*].image}" |
tr -s '[[:space:]]' '\n' |
sort |
uniq -c

----------------------------------------

TITLE: Managing Multiple Kubernetes Clusters
DESCRIPTION: Demonstrates how to switch between different Kubernetes clusters and view cluster configurations using kubectl config commands.

LANGUAGE: console
CODE:
$> kubectl config use-context

LANGUAGE: console
CODE:
$> kubectl config view

LANGUAGE: console
CODE:
$> kubectl config view -o jsonpath="{.context[*].name}"

----------------------------------------

TITLE: Kubernetes Job Definition
DESCRIPTION: YAML definition for a Kubernetes Job that runs multiple pods to process work queue items in parallel

LANGUAGE: yaml
CODE:
apiVersion: batch/v1
kind: Job
metadata:
  name: job-wq-1
spec:
  completions: 8
  parallelism: 2
  template:
    metadata:
      name: job-wq-1
    spec:
      containers:
      - name: c
        image: job-wq-1
        env:
        - name: BROKER_URL
          value: amqp://guest:guest@rabbitmq-service:5672
        - name: QUEUE
          value: job1
      restartPolicy: OnFailure

----------------------------------------

TITLE: Configuring KMSv2KDF Feature Gate in Kubernetes
DESCRIPTION: YAML configuration defining the KMSv2KDF feature gate stages and properties. Specifies the feature progression from beta to stable across Kubernetes versions 1.28 to 1.31, with default values and version ranges.

LANGUAGE: yaml
CODE:
title: KMSv2KDF
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: beta
    defaultValue: false
    fromVersion: "1.28"  
    toVersion: "1.28"
  - stage: stable
    defaultValue: true
    fromVersion: "1.29"
    toVersion: "1.31"

removed: true

----------------------------------------

TITLE: VolumeSnapshotContent Annotation Configuration
DESCRIPTION: YAML configuration showing how to add the required annotation to allow volume mode changes on a VolumeSnapshotContent.

LANGUAGE: yaml
CODE:
kind: VolumeSnapshotContent
metadata:
  annotations:
    - snapshot.storage.kubernetes.io/allow-volume-mode-change: "true"
...

----------------------------------------

TITLE: Configuring CustomResourceValidationExpressions Feature Gate in Kubernetes YAML
DESCRIPTION: This YAML configuration defines the stages and settings for the CustomResourceValidationExpressions feature gate in Kubernetes. It specifies the feature's progression from alpha to stable, including version ranges and default values for each stage.

LANGUAGE: yaml
CODE:
---
title: CustomResourceValidationExpressions
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.23"
    toVersion: "1.24"
  - stage: beta
    defaultValue: true
    fromVersion: "1.25"  
    toVersion: "1.28" 
  - stage: stable
    defaultValue: true
    fromVersion: "1.29"
    toVersion: "1.30"
    
removed: true 
---

----------------------------------------

TITLE: Installing Image Populator CSI Driver
DESCRIPTION: kubectl commands to install the Image Populator CSI driver in a Kubernetes cluster.

LANGUAGE: sh
CODE:
kubectl create -f https://github.com/kubernetes-csi/csi-driver-image-populator/raw/master/deploy/kubernetes-1.16/csi-image-csidriverinfo.yaml
kubectl create -f https://github.com/kubernetes-csi/csi-driver-image-populator/raw/master/deploy/kubernetes-1.16/csi-image-daemonset.yaml

----------------------------------------

TITLE: Using MicroK8s kubectl to get nodes
DESCRIPTION: This command uses the MicroK8s-specific kubectl to list the Kubernetes nodes in the cluster.

LANGUAGE: shell
CODE:
microk8s.kubectl get nodes

----------------------------------------

TITLE: Enabling Mixed Version Proxy in Kubernetes 1.28
DESCRIPTION: Commands to enable the mixed version proxy feature in Kubernetes 1.28. This includes downloading the latest Kubernetes version, enabling the feature gate, and setting required flags for the kube-apiservers.

LANGUAGE: bash
CODE:
--feature-gates=UnknownVersionInteroperabilityProxy=true

LANGUAGE: bash
CODE:
--peer-ca-file

LANGUAGE: bash
CODE:
--peer-advertise-ip

LANGUAGE: bash
CODE:
--peer-advertise-port

----------------------------------------

TITLE: VolumeAttachment Resource Definition
DESCRIPTION: Defines the structure and metadata fields for a VolumeAttachment resource

LANGUAGE: yaml
CODE:
apiVersion: storage.k8s.io/v1
kind: VolumeAttachment
metadata:
  # Standard object metadata
spec:
  attacher: string # Required
  nodeName: string # Required
  source: # Required
    persistentVolumeName: string
    inlineVolumeSpec: {...}
status:
  attached: boolean
  attachmentMetadata: map[string]string
  attachError: {...}
  detachError: {...}

----------------------------------------

TITLE: kubectl Verbosity Command
DESCRIPTION: Shell command to inspect HTTP calls in kubectl operations by increasing verbosity level

LANGUAGE: shell
CODE:
kubectl --v=8 version

----------------------------------------

TITLE: Regex Number Finding with CEL
DESCRIPTION: CEL expression using the regex library to find the first number in a string.

LANGUAGE: CEL
CODE:
"abc 123".find('[0-9]+')

----------------------------------------

TITLE: Querying SRV Records with CoreDNS Default Configuration
DESCRIPTION: Example of querying SRV records using CoreDNS's default configuration, showing IP-based endpoint DNS names.

LANGUAGE: dns
CODE:
dnstools# host -t srv headless
headless.default.svc.cluster.local has SRV record 0 25 443 172-17-0-14.headless.default.svc.cluster.local.
headless.default.svc.cluster.local has SRV record 0 25 443 172-17-0-18.headless.default.svc.cluster.local.
headless.default.svc.cluster.local has SRV record 0 25 443 172-17-0-4.headless.default.svc.cluster.local.
headless.default.svc.cluster.local has SRV record 0 25 443 172-17-0-9.headless.default.svc.cluster.local.

----------------------------------------

TITLE: Configuring Container-Level RunAsUserName in Windows Pod
DESCRIPTION: YAML configuration showing how to set runAsUserName at both Pod and Container levels, where Container-level settings override Pod-level settings.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: run-as-username-container-demo
spec:
  securityContext:
    windowsOptions:
      runAsUserName: "ContainerUser"
  containers:
  - name: iis
    image: mcr.microsoft.com/windows/servercore/iis:windowsservercore-ltsc2019
    securityContext:
      windowsOptions:
        runAsUserName: "ContainerAdministrator"
  nodeSelector:
    kubernetes.io/os: windows

----------------------------------------

TITLE: Configuring Headless Page in YAML
DESCRIPTION: YAML front matter configuration that sets the headless property to true, indicating this page should be rendered without a header.

LANGUAGE: yaml
CODE:
---
headless: true
---

----------------------------------------

TITLE: Defining Page Content Sections in Markdown
DESCRIPTION: Markdown comments used to define main content sections in Kubernetes documentation pages.

LANGUAGE: markdown
CODE:
<!-- overview -->

LANGUAGE: markdown
CODE:
<!-- body -->

----------------------------------------

TITLE: Checkpoint Creation Command
DESCRIPTION: curl command to create a checkpoint through the kubelet API endpoint

LANGUAGE: shell
CODE:
curl -X POST "https://localhost:10250/checkpoint/default/counters/counter"

----------------------------------------

TITLE: Basic kubectl token creation command
DESCRIPTION: Basic syntax for creating a service account token.

LANGUAGE: bash
CODE:
kubectl create token SERVICE_ACCOUNT_NAME

----------------------------------------

TITLE: Creating PersistentVolumeClaim for Dynamic Provisioning
DESCRIPTION: This YAML configuration creates a PersistentVolumeClaim named qcfs-pvc, which will be dynamically provisioned by the csi-qcfs StorageClass with an initial size of 300Gi.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: qcfs-pvc
  namespace: default
....
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 300Gi
  storageClassName: csi-qcfs

----------------------------------------

TITLE: Displaying IPVS Configuration for Service with Session Affinity
DESCRIPTION: This snippet demonstrates how to use kubectl and ipvsadm to show the configuration of a Kubernetes service with session affinity enabled, including the IPVS persistent flag and timeout.

LANGUAGE: bash
CODE:
# kubectl describe svc nginx-service
Name:			nginx-service
...
IP:			    10.102.128.4
Port:			http	3080/TCP
Session Affinity:	ClientIP

# ipvsadm -ln
IP Virtual Server version 1.2.1 (size=4096)
Prot LocalAddress:Port Scheduler Flags
  -> RemoteAddress:Port           Forward Weight ActiveConn InActConn
TCP  10.102.128.4:3080 rr persistent 10800

----------------------------------------

TITLE: Configuring VolumeSnapshotContent for Volume Mode Change in Kubernetes
DESCRIPTION: This YAML snippet shows how to add the required annotation to a VolumeSnapshotContent object to allow volume mode changes.

LANGUAGE: yaml
CODE:
kind: VolumeSnapshotContent
metadata:
  annotations:
    - snapshot.storage.kubernetes.io/allowVolumeModeChange: "true"
...

----------------------------------------

TITLE: Spark Cluster Configuration in KubeDirector
DESCRIPTION: YAML configuration for deploying a Spark 2.2.1 cluster, specifying resource requirements and replica counts for different node roles.

LANGUAGE: yaml
CODE:
apiVersion: "kubedirector.bluedata.io/v1alpha1"
kind: "KubeDirectorCluster"
metadata:
  name: "spark221e2"
spec:
  app: spark221e2
  roles:
  - name: controller
    replicas: 1
    resources:
      requests:
        memory: "4Gi"
        cpu: "2"
      limits:
        memory: "4Gi"
        cpu: "2"
  - name: worker
    replicas: 2
    resources:
      requests:
        memory: "4Gi"
        cpu: "2"
      limits:
        memory: "4Gi"
        cpu: "2"
  - name: jupyter

----------------------------------------

TITLE: Exposing Pod IPs via Downward API in Kubernetes
DESCRIPTION: This YAML snippet shows how to expose Pod IP addresses using the Downward API in a Kubernetes container. It demonstrates setting an environment variable with both IPv4 and IPv6 addresses.

LANGUAGE: yaml
CODE:
        env:
        - name: MY_POD_IPS
          valueFrom:
            fieldRef:
              fieldPath: status.podIPs

----------------------------------------

TITLE: Mounting Kubernetes Secrets in Pod YAML
DESCRIPTION: This YAML snippet demonstrates how to mount Kubernetes Secrets as a volume in a pod specification, making the secret data available to the container as files.

LANGUAGE: yaml
CODE:
  spec:
    containers:
      -
        name: "nginx-ssl-proxy"
        image: "gcr.io/cloud-solutions-images/nginx-ssl-proxy:latest"
        env: [...]
        ports: ...[]
        volumeMounts:
          -
            name: "secrets"
            mountPath: "/etc/secrets"
            readOnly: true
    volumes:
      -
        name: "secrets"
        secret:
          secretName: "ssl-proxy-secret"

----------------------------------------

TITLE: Python Worker Script
DESCRIPTION: Worker script that processes messages from a RabbitMQ queue. Takes each message, computes hashsums, and simulates work through sleep.

LANGUAGE: python
CODE:
#!/usr/bin/env python

import pika
import sys
import os
import time
from hashlib import sha256

print("Processing messages...")

# Retrieve these from environment variables
url = os.getenv("BROKER_URL")
queue = os.getenv("QUEUE") 

defaults = pika.URLParameters(url)
parameters = pika.ConnectionParameters(
    defaults.host,
    defaults.port,
    defaults.virtual_host,
    defaults.credentials
)

connection = pika.BlockingConnection(parameters)
channel = connection.channel()

method_frame, header_frame, body = channel.basic_get(queue=queue)
if method_frame:
    print(f"Processing message: {body!r}")
    channel.basic_ack(method_frame.delivery_tag)
    # Simulate a complex task taking 10 seconds
    time.sleep(10)
    print("Processed a message")
    #Compute SHA-256 value
    s256 = sha256(body).hexdigest()
    print(f"Body sha256: {s256}")
    sys.exit(0)
else:
    print("No messages in queue", file=sys.stderr)
    sys.exit(1)

----------------------------------------

TITLE: Executing kubectl config get-users Command
DESCRIPTION: This command displays the users defined in the kubeconfig file. It does not require any additional arguments.

LANGUAGE: bash
CODE:
kubectl config get-users [flags]

----------------------------------------

TITLE: Kubelet Eviction Configuration
DESCRIPTION: YAML configuration for kubelet defining hard and soft eviction thresholds, grace periods, and other settings for managing node pressure and resource constraints.

LANGUAGE: yaml
CODE:
apiVersion: kubelet.config.k8s.io/v1beta1
kind: KubeletConfiguration
address: "192.168.0.8"
port: 20250
serializeImagePulls: false
evictionHard:
    memory.available:  "100Mi"
    nodefs.available:  "10%"
    nodefs.inodesFree: "5%"
    imagefs.available: "15%"
    imagefs.inodesFree: "5%"
evictionSoft:
    memory.available:  "100Mi"
    nodefs.available:  "10%"
    nodefs.inodesFree: "5%"
    imagefs.available: "15%"
    imagefs.inodesFree: "5%"
evictionSoftGracePeriod:
    memory.available:  "1m30s"
    nodefs.available:  "2m"
    nodefs.inodesFree: "2m"
    imagefs.available: "2m"
    imagefs.inodesFree: "2m"
evictionMaxPodGracePeriod: 60s

----------------------------------------

TITLE: Listing Processes in Shared Namespace Container
DESCRIPTION: This shell command, executed within the 'shell' container, lists all processes visible in the shared namespace.

LANGUAGE: shell
CODE:
ps ax

----------------------------------------

TITLE: Quantity Comparison with CEL
DESCRIPTION: CEL expression using the quantity library to compare two quantities.

LANGUAGE: CEL
CODE:
quantity("200M").compareTo(quantity("0.2G"))

----------------------------------------

TITLE: Defining AffinityInAnnotations Feature Gate in YAML
DESCRIPTION: This YAML snippet defines the lifecycle of the AffinityInAnnotations feature gate in Kubernetes. It specifies the feature's stages, including its alpha phase, deprecation, and removal.

LANGUAGE: yaml
CODE:
# Removed from Kubernetes
title: AffinityInAnnotations
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.6"
    toVersion: "1.7"
  - stage: deprecated
    fromVersion: "1.8"
    toVersion: "1.8"

removed: true

----------------------------------------

TITLE: Defining RetryGenerateName Feature Gate Stages in YAML
DESCRIPTION: This YAML block defines the stages, default values, and version ranges for the RetryGenerateName feature gate in Kubernetes. It outlines the feature's progression from alpha to stable across different Kubernetes versions.

LANGUAGE: yaml
CODE:
stages:
  - stage: alpha
    defaultValue: false
    fromVersion: "1.30"
    toVersion: "1.30"
  - stage: beta
    defaultValue: true
    fromVersion: "1.31"
    toVersion: "1.31"
  - stage: stable
    defaultValue: true
    fromVersion: "1.32"

----------------------------------------

TITLE: Running Kubernetes Documentation Site in Container
DESCRIPTION: Command to build and serve the Kubernetes documentation website using a container runtime.

LANGUAGE: bash
CODE:
make container-serve

----------------------------------------

TITLE: Installing MicroK8s on Linux using snap
DESCRIPTION: This command installs MicroK8s, a local single-node Kubernetes cluster, using the snap package manager on Linux.

LANGUAGE: shell
CODE:
sudo snap install microk8s --classic

----------------------------------------

TITLE: Kubeadm Configuration for Control-Plane Node
DESCRIPTION: YAML configuration for initializing the Kubernetes control-plane node with kubeadm, specifying the external OpenStack cloud provider.

LANGUAGE: yaml
CODE:
apiVersion: kubeadm.k8s.io/v1beta1
kind: InitConfiguration
nodeRegistration:
  kubeletExtraArgs:
    cloud-provider: "external"
---
apiVersion: kubeadm.k8s.io/v1beta2
kind: ClusterConfiguration
kubernetesVersion: "v1.15.1"
apiServer:
  extraArgs:
    enable-admission-plugins: NodeRestriction
    runtime-config: "storage.k8s.io/v1=true"
controllerManager:
  extraArgs:
    external-cloud-volume-plugin: openstack
  extraVolumes:
  - name: "cloud-config"
    hostPath: "/etc/kubernetes/cloud-config"
    mountPath: "/etc/kubernetes/cloud-config"
    readOnly: true
    pathType: File
networking:
  serviceSubnet: "10.96.0.0/12"
  podSubnet: "10.224.0.0/16"
  dnsDomain: "cluster.local"

----------------------------------------

TITLE: Creating Kubernetes Secret and ConfigMap for TLS
DESCRIPTION: These snippets demonstrate how to create a Secret containing the server certificate and key, and a ConfigMap containing the CA certificate for trust verification.

LANGUAGE: bash
CODE:
kubectl create secret tls server --cert server.crt --key server-key.pem

LANGUAGE: bash
CODE:
kubectl create configmap example-serving-ca --from-file ca.crt=ca.pem

----------------------------------------

TITLE: Kubelet Pod Read Access Policy
DESCRIPTION: JSON policy granting read-only access to pods for the kubelet user across all namespaces

LANGUAGE: json
CODE:
{"apiVersion": "abac.authorization.kubernetes.io/v1beta1", "kind": "Policy", "spec": {"user": "kubelet", "namespace": "*", "resource": "pods", "readonly": true}}

----------------------------------------

TITLE: Creating a ClusterRoleBinding for Multiple Users and Groups
DESCRIPTION: This example demonstrates how to create a cluster role binding for multiple users and a group using the cluster-admin cluster role.

LANGUAGE: bash
CODE:
kubectl create clusterrolebinding cluster-admin --clusterrole=cluster-admin --user=user1 --user=user2 --group=group1

----------------------------------------

TITLE: Installing Linkerd Control Plane
DESCRIPTION: Command to install Linkerd's control plane into the Kubernetes cluster

LANGUAGE: bash
CODE:
linkerd install | kubectl apply -f -

----------------------------------------

TITLE: Starting kubectl Proxy
DESCRIPTION: Command to run kubectl in proxy mode to handle API server location and authentication.

LANGUAGE: shell
CODE:
kubectl proxy --port=8080 &

----------------------------------------

TITLE: Creating a PreferDualStack Service in Kubernetes
DESCRIPTION: This YAML configuration creates a Kubernetes Service with PreferDualStack IP family policy. It demonstrates how to configure a service to use both IPv4 and IPv6 addresses in a dual-stack cluster.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Service
metadata:
  name: my-service
spec:
  ipFamilyPolicy: PreferDualStack
  selector:
    app.kubernetes.io/name: MyApp
  ports:
    - protocol: TCP
      port: 80
      targetPort: 9376

----------------------------------------

TITLE: Basic CronTab CustomResourceDefinition
DESCRIPTION: Defines a basic CustomResourceDefinition for a CronTab resource with schema validation and properties for cronSpec, image and replicas

LANGUAGE: yaml
CODE:
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: crontabs.stable.example.com
spec:
  group: stable.example.com
  versions:
    - name: v1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          type: object
          properties:
            spec:
              type: object
              properties:
                cronSpec:
                  type: string
                  pattern: '^(\d+|\*)(/\d+)?(\s+(\d+|\*)(/\d+)?){4}$'
                image:
                  type: string
                replicas:
                  type: integer
                  minimum: 1
                  maximum: 10
  scope: Namespaced
  names:
    plural: crontabs
    singular: crontab
    kind: CronTab
    shortNames:
    - ct

----------------------------------------

TITLE: Burstable Pod Spec with Memory Only
DESCRIPTION: Pod specification running in Burstable QoS class with only memory requests and limits defined.

LANGUAGE: yaml
CODE:
spec:
  containers:
  - name: nginx
    image: nginx
    resources:
      limits:
        memory: "200Mi"
      requests:
        memory: "100Mi"

----------------------------------------

TITLE: Setting Context in Kubernetes Configuration
DESCRIPTION: Command syntax for setting a context entry in kubeconfig. It allows specifying a name, cluster, user, and namespace for the context.

LANGUAGE: bash
CODE:
kubectl config set-context [NAME | --current] [--cluster=cluster_nickname] [--user=user_nickname] [--namespace=namespace]

----------------------------------------

TITLE: Defining Multi-tenant Network in Kubernetes YAML
DESCRIPTION: YAML configuration for creating a tenant-specific network in Hypernetes with subnet and gateway specifications.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Network
metadata:
  name: net1
spec:
  tenantID: 065f210a2ca9442aad898ab129426350
  subnets:
    subnet1:
      cidr: 192.168.0.0/24
      gateway: 192.168.0.1

----------------------------------------

TITLE: Configuring Kubernetes API Server with Mixed Version Proxy
DESCRIPTION: Shell command for starting kube-apiserver with the Mixed Version Proxy feature enabled. Includes required command line arguments for feature gates, certificates, and proxy configuration.

LANGUAGE: shell
CODE:
kube-apiserver \
--feature-gates=UnknownVersionInteroperabilityProxy=true \
# required command line arguments for this feature
--peer-ca-file=<path to kube-apiserver CA cert>
--proxy-client-cert-file=<path to aggregator proxy cert>,
--proxy-client-key-file=<path to aggregator proxy key>,
--requestheader-client-ca-file=<path to aggregator CA cert>,
# requestheader-allowed-names can be set to blank to allow any Common Name
--requestheader-allowed-names=<valid Common Names to verify proxy client cert against>,

# optional flags for this feature
--peer-advertise-ip=`IP of this kube-apiserver that should be used by peers to proxy requests`
--peer-advertise-port=`port of this kube-apiserver that should be used by peers to proxy requests`

# …and other flags as usual

----------------------------------------

TITLE: Kubernetes Service for Non-Root Container
DESCRIPTION: A Kubernetes Service definition that exposes a non-root container's port 8443 as port 443 externally.

LANGUAGE: yaml
CODE:
kind: Service
apiVersion: v1
metadata:
  name: my-service
spec:
  selector:
    app: MyApp
  ports:
  - protocol: TCP
    port: 443
    targetPort: 8443

----------------------------------------

TITLE: Querying Rekor Transparency Log
DESCRIPTION: Command to retrieve detailed information about the signature verification from the Rekor transparency log.

LANGUAGE: shell
CODE:
rekor-cli get --uuid 5d54b39222e3fa9a21bcb0badd8aac939b4b0d1d9085b37f1f10b18a8cd24657

----------------------------------------

TITLE: Configuring Kubeflow Service Route with Ambassador
DESCRIPTION: This YAML snippet shows how Kubeflow configures a service route in Ambassador using Kubernetes annotations, including method-based routing and URL rewriting.

LANGUAGE: yaml
CODE:
---
apiVersion: ambassador/v0
kind:  Mapping
name: tfserving-mapping-test-post
prefix: /models/test/
rewrite: /model/test/:predict
method: POST
service: test.kubeflow:8000

----------------------------------------

TITLE: Creating a Default SingleStack Service in Kubernetes
DESCRIPTION: This YAML configuration creates a Kubernetes Service without explicitly defining the IP family policy. It demonstrates how Kubernetes assigns a single-stack IP address by default.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Service
metadata:
  name: my-service
spec:
  selector:
    app.kubernetes.io/name: MyApp
  ports:
    - protocol: TCP
      port: 80
      targetPort: 9376

----------------------------------------

TITLE: Defining Kubernetes Document Metadata
DESCRIPTION: YAML front matter metadata block defining the title and weight for a Kubernetes documentation page about Services.

LANGUAGE: yaml
CODE:
---
title: Services
weight: 70
---

----------------------------------------

TITLE: Defining Environment Variables in Kubernetes Pod YAML
DESCRIPTION: This YAML configuration defines a Pod with a single container and sets two environment variables: DEMO_GREETING and DEMO_FAREWELL.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: envar-demo
  labels:
    purpose: demonstrate-envars
spec:
  containers:
  - name: envar-demo-container
    image: gcr.io/google-samples/node-hello:1.0
    env:
    - name: DEMO_GREETING
      value: "Hello from the environment"
    - name: DEMO_FAREWELL
      value: "Such a sweet sorrow"

----------------------------------------

TITLE: Using kubectl auth can-i Command
DESCRIPTION: Examples demonstrating various ways to check authorization permissions in Kubernetes using kubectl auth can-i command. Shows how to check permissions across namespaces, for specific resources, and with impersonation.

LANGUAGE: bash
CODE:
  # Check to see if I can create pods in any namespace
  kubectl auth can-i create pods --all-namespaces
  
  # Check to see if I can list deployments in my current namespace
  kubectl auth can-i list deployments.apps
  
  # Check to see if service account "foo" of namespace "dev" can list pods in the namespace "prod"
  # You must be allowed to use impersonation for the global option "--as"
  kubectl auth can-i list pods --as=system:serviceaccount:dev:foo -n prod
  
  # Check to see if I can do everything in my current namespace ("*" means all)
  kubectl auth can-i '*' '*'
  
  # Check to see if I can get the job named "bar" in namespace "foo"
  kubectl auth can-i list jobs.batch/bar -n foo
  
  # Check to see if I can read pod logs
  kubectl auth can-i get pods --subresource=log
  
  # Check to see if I can access the URL /logs/
  kubectl auth can-i get /logs/
  
  # Check to see if I can approve certificates.k8s.io
  kubectl auth can-i approve certificates.k8s.io
  
  # List all allowed actions in namespace "foo"
  kubectl auth can-i --list --namespace=foo

----------------------------------------

TITLE: Creating a ReferenceGrant for Cross-Namespace Access in YAML
DESCRIPTION: YAML manifest for creating a ReferenceGrant that allows access to a VolumeSnapshot in the prod namespace from a PersistentVolumeClaim in the dev namespace.

LANGUAGE: yaml
CODE:
apiVersion: gateway.networking.k8s.io/v1beta1
kind: ReferenceGrant
metadata:
  name: allow-prod-pvc
  namespace: prod
spec:
  from:
  - group: ""
    kind: PersistentVolumeClaim
    namespace: dev
  to:
  - group: snapshot.storage.k8s.io
    kind: VolumeSnapshot
    name: new-snapshot-demo

----------------------------------------

TITLE: Importing the HorizontalPodAutoscaler v2 API
DESCRIPTION: Import statement for using the HorizontalPodAutoscaler v2 API in Go

LANGUAGE: go
CODE:
import "k8s.io/api/autoscaling/v2"

----------------------------------------

TITLE: Listing Cozystack Kubernetes Clusters
DESCRIPTION: Shows how to list Kubernetes Clusters managed by Cozystack using kubectl.

LANGUAGE: shell
CODE:
kubectl get kuberneteses.apps.cozystack.io -n tenant-kvaps

----------------------------------------

TITLE: Validating CustomResourceDefinition Schema in Go
DESCRIPTION: Example of CustomResourceDefinition schema validation using OpenAPI v3 schema. Shows how to define validation rules for version and replica fields.

LANGUAGE: yaml
CODE:
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata: ...
spec:
  ...
  validation:
    openAPIV3Schema:
      properties:
        spec:
          properties:
            version:
                type: string
                enum:
                - "v1.0.0"
                - "v1.0.1"
            replicas:
                type: integer
                minimum: 1
                maximum: 10

----------------------------------------

TITLE: Setting Hostname for OpenStack VM
DESCRIPTION: Commands to set the hostname of the OpenStack VM to match the node name in Nova and add it to /etc/hosts.

LANGUAGE: shell
CODE:
echo "192.168.1.4 master1" >> /etc/hosts

hostnamectl set-hostname master1

----------------------------------------

TITLE: Pod Environment Variables Definition in YAML
DESCRIPTION: Kubernetes Pod manifest that demonstrates exposing Pod-level fields as environment variables through the downward API. The manifest defines environment variables that access node name, pod name, namespace, IP and service account.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: dapi-envars-fieldref
spec:
  containers:
    - name: test-container
      image: registry.k8s.io/busybox
      command: [ "sh", "-c" ]
      args:
      - while true; do
          echo -en '\n';
          printenv MY_NODE_NAME MY_POD_NAME MY_POD_NAMESPACE MY_POD_IP MY_POD_SERVICE_ACCOUNT;
          sleep 10;
        done;
      env:
        - name: MY_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: MY_POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: MY_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: MY_POD_SERVICE_ACCOUNT
          valueFrom:
            fieldRef:
              fieldPath: spec.serviceAccountName
  restartPolicy: Never

----------------------------------------

TITLE: Pod Environment Variables Definition in YAML
DESCRIPTION: Kubernetes Pod manifest that demonstrates exposing Pod-level fields as environment variables through the downward API. The manifest defines environment variables that access node name, pod name, namespace, IP and service account.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: dapi-envars-fieldref
spec:
  containers:
    - name: test-container
      image: registry.k8s.io/busybox
      command: [ "sh", "-c" ]
      args:
      - while true; do
          echo -en '\n';
          printenv MY_NODE_NAME MY_POD_NAME MY_POD_NAMESPACE MY_POD_IP MY_POD_SERVICE_ACCOUNT;
          sleep 10;
        done;
      env:
        - name: MY_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: MY_POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: MY_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: MY_POD_SERVICE_ACCOUNT
          valueFrom:
            fieldRef:
              fieldPath: spec.serviceAccountName
  restartPolicy: Never

----------------------------------------

TITLE: Renaming kubectl Context - Example Usage
DESCRIPTION: Practical example showing how to rename a context from 'old-name' to 'new-name' in the kubeconfig file.

LANGUAGE: bash
CODE:
# Rename the context 'old-name' to 'new-name' in your kubeconfig file
kubectl config rename-context old-name new-name

----------------------------------------

TITLE: Creating a Dual-Stack LoadBalancer Service in Kubernetes
DESCRIPTION: This YAML configuration creates a Kubernetes LoadBalancer Service with PreferDualStack policy and IPv6 as the primary IP family. It shows how to configure an external load balancer service in a dual-stack cluster.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Service
metadata:
  name: my-service
spec:
  ipFamilyPolicy: PreferDualStack
  ipFamilies:
    - IPv6
    - IPv4
  type: LoadBalancer
  selector:
    app.kubernetes.io/name: MyApp
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80

----------------------------------------

TITLE: Defining YAML Front Matter for Kubernetes Blog Post
DESCRIPTION: YAML front matter defining metadata for the blog post, including title, date, and author information.

LANGUAGE: yaml
CODE:
---
layout: blog
title:  'Health checking gRPC servers on Kubernetes'
date: 2018-10-01
author: >
  [Ahmet Alp Balkan](https://twitter.com/ahmetb) (Google)
---

----------------------------------------

TITLE: Setting last-applied-configuration in Kubernetes
DESCRIPTION: This command sets the last-applied-configuration of a resource to match the contents of a file, as if 'kubectl apply -f <file>' was run, without updating other parts of the object.

LANGUAGE: bash
CODE:
kubectl apply set-last-applied -f FILENAME

----------------------------------------

TITLE: Deleting User from Kubeconfig - Example Usage
DESCRIPTION: Example showing how to delete the 'minikube' user from the kubeconfig file.

LANGUAGE: bash
CODE:
kubectl config delete-user minikube

----------------------------------------

TITLE: Configuring Topology-Aware StorageClass in Kubernetes
DESCRIPTION: Example of creating a StorageClass with topology-aware volume binding mode that waits for pod scheduling before provisioning volumes.

LANGUAGE: yaml
CODE:
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: topology-aware-standard
provisioner: kubernetes.io/gce-pd
volumeBindingMode: WaitForFirstConsumer
parameters:
  type: pd-standard

----------------------------------------

TITLE: Configuring Kubernetes Webhook Authorization
DESCRIPTION: YAML configuration for setting up webhook authorization in Kubernetes using HTTPS client authentication. Defines cluster connection details and API server webhook settings.

LANGUAGE: yaml
CODE:
# Kubernetes API version
apiVersion: v1
# kind of the API object
kind: Config
# clusters refers to the remote service.
clusters:
  - name: name-of-remote-authz-service
    cluster:
      # CA for verifying the remote service.
      certificate-authority: /path/to/ca.pem
      # URL of remote service to query. Must use 'https'. May not include parameters.
      server: https://authz.example.com/authorize

# users refers to the API Server's webhook configuration.
users:
  - name: name-of-api-server
    user:
      client-certificate: /path/to/cert.pem # cert for the webhook plugin to use
      client-key: /path/to/key.pem          # key matching the cert

# kubeconfig files require a context. Provide one for the API Server.
current-context: webhook
contexts:
- context:
    cluster: name-of-remote-authz-service
    user: name-of-api-server
  name: webhook

----------------------------------------

TITLE: Configuring Kubernetes Webhook Authorization
DESCRIPTION: YAML configuration for setting up webhook authorization in Kubernetes using HTTPS client authentication. Defines cluster connection details and API server webhook settings.

LANGUAGE: yaml
CODE:
# Kubernetes API version
apiVersion: v1
# kind of the API object
kind: Config
# clusters refers to the remote service.
clusters:
  - name: name-of-remote-authz-service
    cluster:
      # CA for verifying the remote service.
      certificate-authority: /path/to/ca.pem
      # URL of remote service to query. Must use 'https'. May not include parameters.
      server: https://authz.example.com/authorize

# users refers to the API Server's webhook configuration.
users:
  - name: name-of-api-server
    user:
      client-certificate: /path/to/cert.pem # cert for the webhook plugin to use
      client-key: /path/to/key.pem          # key matching the cert

# kubeconfig files require a context. Provide one for the API Server.
current-context: webhook
contexts:
- context:
    cluster: name-of-remote-authz-service
    user: name-of-api-server
  name: webhook

----------------------------------------

TITLE: Scheduler Note Block
DESCRIPTION: A markdown note block describing limitations of scheduler extender webhooks.

LANGUAGE: markdown
CODE:
{{< note >}}
You can only affect node filtering
and node prioritization with a scheduler extender webhook; other extension points are
not available through the webhook integration.
{{< /note >}}

----------------------------------------

TITLE: Linkerd Version Check Output
DESCRIPTION: Example output of the linkerd version command showing client and server versions

LANGUAGE: plaintext
CODE:
Client version: v2.0
Server version: unavailable

----------------------------------------

TITLE: Configuring minDomains in Pod Topology Spread
DESCRIPTION: Example configuration showing how to set minimum domain requirements for pod spreading using topologySpreadConstraints. This ensures pods are distributed across at least a specified number of nodes.

LANGUAGE: yaml
CODE:
topologySpreadConstraints:
- maxSkew: 1
  minDomains: 5 # requires 5 Nodes at least (because each Node has a unique hostname).
  whenUnsatisfiable: DoNotSchedule # minDomains is valid only when DoNotSchedule is used.
  topologyKey: kubernetes.io/hostname
  labelSelector:
    matchLabels:
        foo: bar

----------------------------------------

TITLE: Opening a File with System Call in C
DESCRIPTION: This code snippet demonstrates a basic file open system call in C, which is used as an example to explain the limitations of seccomp-bpf and the potential advantages of Landlock LSM.

LANGUAGE: C
CODE:
fd = open("myfile.txt", O_RDWR);

----------------------------------------

TITLE: Python Worker Script for Queue Processing
DESCRIPTION: Python script that processes messages from RabbitMQ queue. Each worker simulates work by sleeping for a duration specified in the message.

LANGUAGE: python
CODE:
#!/usr/bin/env python

import pika
import os
import sys
import time

# Connect to RabbitMQ
url = os.environ['BROKER_URL']
params = pika.URLParameters(url)
connection = pika.BlockingConnection(params)
channel = connection.channel()

# Get named queue from environment variable
queue_name = os.environ['QUEUE']

print('Worker: Waiting for messages in %s' % queue_name)

def callback(ch, method, properties, body):
    print("Worker: Received %s" % body)
    # Simulate a processing delay
    time.sleep(len(body))
    print("Worker: Done")
    ch.basic_ack(delivery_tag = method.delivery_tag)

channel.basic_consume(queue=queue_name, on_message_callback=callback)
channel.start_consuming()

if not connection.is_closed:
    connection.close()

----------------------------------------

TITLE: Retrieving Namespace-Specific Kubernetes Events
DESCRIPTION: This command fetches events for a specific namespace in the Kubernetes cluster.

LANGUAGE: shell
CODE:
kubectl get events --namespace=my-namespace

----------------------------------------

TITLE: Identifying PodSecurityPolicies in Use for Pods in a Namespace
DESCRIPTION: This bash command identifies which PodSecurityPolicies are in use for pods in a given namespace. It uses kubectl to query the 'kubernetes.io/psp' annotation of all pods in the specified namespace, then sorts and deduplicates the results.

LANGUAGE: bash
CODE:
kubectl get pods -n $NAMESPACE -o jsonpath="{.items[*].metadata.annotations.kubernetes\.io/psp}" | tr " " "\n" | sort -u

----------------------------------------

TITLE: Approving Certificate Renewal for Nodes
DESCRIPTION: This YAML snippet creates a ClusterRoleBinding that allows nodes in the system:nodes group to renew their own client certificates.

LANGUAGE: yaml
CODE:
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: auto-approve-renewals-for-nodes
subjects:
- kind: Group
  name: system:nodes
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: ClusterRole
  name: system:certificates.k8s.io:certificatesigningrequests:selfnodeclient
  apiGroup: rbac.authorization.k8s.io

----------------------------------------

TITLE: Updating GitHub Data with Python
DESCRIPTION: Python script to update the existing GitHub data with new changes since the last update.

LANGUAGE: bash
CODE:
> ./main export --update-api
INFO | Getting GITHUB_TOKEN from environment variable
INFO | Retrieving issues and PRs
INFO | Updating API
INFO | Got update timestamp: 2020-05-09T10:57:40.854151
INFO | 90786: Automated cherry pick of #90749: fix: azure disk dangling attach issue
INFO | 90674: Switch core master base images from debian to distroless
INFO | 90086: Handling error returned by request.Request.ParseForm()
INFO | 90544: configurable weight on the CPU and memory
INFO | 87746: Support compiling Kubelet w/o docker/docker
INFO | Using already extracted data from data/data.pickle
INFO | Loading pickle dataset
INFO | Parsed 34380 issues and 55832 pull requests (90212 items)
INFO | Updating data
INFO | Updating issue 90786 (updated at 2020-05-09T10:59:43Z)
INFO | Updating issue 90674 (updated at 2020-05-09T10:58:27Z)
INFO | Updating issue 90086 (updated at 2020-05-09T10:58:26Z)
INFO | Updating issue 90544 (updated at 2020-05-09T10:57:51Z)
INFO | Updating issue 87746 (updated at 2020-05-09T11:01:51Z)
INFO | Saving data

----------------------------------------

TITLE: Examples of using kubectl apply set-last-applied
DESCRIPTION: These examples demonstrate how to use the 'kubectl apply set-last-applied' command with different options, including setting configurations from a file, a directory, and creating annotations if they don't exist.

LANGUAGE: bash
CODE:
# Set the last-applied-configuration of a resource to match the contents of a file
kubectl apply set-last-applied -f deploy.yaml

# Execute set-last-applied against each configuration file in a directory
kubectl apply set-last-applied -f path/

# Set the last-applied-configuration of a resource to match the contents of a file; will create the annotation if it does not already exist
kubectl apply set-last-applied -f deploy.yaml --create-annotation=true

----------------------------------------

TITLE: APIServiceSpec Definition
DESCRIPTION: Defines the specification for an APIService, including priority, version, and service details.

LANGUAGE: go
CODE:
type APIServiceSpec struct {
  GroupPriorityMinimum int32 `json:"groupPriorityMinimum"`
  VersionPriority int32 `json:"versionPriority"`
  CABundle []byte `json:"caBundle,omitempty"`
  Group string `json:"group,omitempty"`
  InsecureSkipTLSVerify bool `json:"insecureSkipTLSVerify,omitempty"`
  Service *ServiceReference `json:"service"`
  Version string `json:"version,omitempty"`
}

----------------------------------------

TITLE: Interacting with Nodes and Cluster
DESCRIPTION: Commands to interact with nodes and cluster, including cordoning/uncordoning nodes, draining nodes, and viewing cluster information.

LANGUAGE: bash
CODE:
kubectl cordon my-node                                                # Mark my-node as unschedulable
kubectl drain my-node                                                 # Drain my-node in preparation for maintenance
kubectl uncordon my-node                                              # Mark my-node as schedulable
kubectl top node my-node                                              # Show metrics for a given node
kubectl cluster-info                                                  # Display addresses of the master and services
kubectl cluster-info dump                                             # Dump current cluster state to stdout
kubectl cluster-info dump --output-directory=/path/to/cluster-state   # Dump current cluster state to /path/to/cluster-state

# If a taint with that key and effect already exists, its value is replaced as specified.
kubectl taint nodes foo dedicated=special-user:NoSchedule

----------------------------------------

TITLE: Querying CSINode Object in Kubernetes
DESCRIPTION: This command retrieves the CSINode object in YAML format to verify the enabled feature flag and installed CSI driver on a particular node.

LANGUAGE: shell
CODE:
kubectl get csinodes -o yaml

----------------------------------------

TITLE: Exporting Public GPG Key for Grafeas Verification
DESCRIPTION: This command exports the public key of the image signer, which will be used to verify attestations in Grafeas. The key is saved to a file named after the GPG key ID.

LANGUAGE: bash
CODE:
gpg --armor --export image.signer@example.com > ${GPG\_KEY\_ID}.pub

----------------------------------------

TITLE: Generating Load for Rate Limiting Test
DESCRIPTION: Uses wrk to generate load on the Bookinfo application to demonstrate rate limiting.

LANGUAGE: bash
CODE:
wrk -t1 -c1 -d20s http://$BOOKINFO\_URL/productpage

----------------------------------------

TITLE: Configuring Swap Behavior in Kubelet
DESCRIPTION: YAML configuration snippet showing how to set the swap behavior in kubelet's configuration file to LimitedSwap mode.

LANGUAGE: yaml
CODE:
# this fragment goes into the kubelet's configuration file
memorySwap:
  swapBehavior: LimitedSwap

----------------------------------------

TITLE: Guaranteed Pod Spec with Limits Only
DESCRIPTION: Pod specification running in Guaranteed QoS class with only limits specified, where requests default to limits.

LANGUAGE: yaml
CODE:
spec:
  containers:
  - name: nginx
    image: nginx
    resources:
      limits:
        memory: "200Mi"
        cpu: "2"

----------------------------------------

TITLE: Describing Kubernetes Pod
DESCRIPTION: This shell command retrieves and displays detailed information about a specific pod in the deployment.

LANGUAGE: shell
CODE:
kubectl describe pod <pod-name>

----------------------------------------

TITLE: Configuring DisableAcceleratorUsageMetrics Feature Gate in Kubernetes
DESCRIPTION: YAML configuration defining the lifecycle stages of the DisableAcceleratorUsageMetrics feature gate. It progressed from alpha (1.19) to beta (1.20-1.24) to stable (1.25-1.27) before being removed.

LANGUAGE: yaml
CODE:
title: DisableAcceleratorUsageMetrics
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.19"
    toVersion: "1.19"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.20"
    toVersion: "1.24"    
  - stage: stable
    defaultValue: true
    fromVersion: "1.25"
    toVersion: "1.27"    

removed: true

----------------------------------------

TITLE: Changing VolumeSnapshotContent Deletion Policy in Kubernetes
DESCRIPTION: This snippet shows how to change the deletion policy of a VolumeSnapshotContent from Delete to Retain using kubectl patch command.

LANGUAGE: bash
CODE:
$ kubectl patch volumesnapshotcontent snapcontent-26cd0db3-f2a0-11e8-8be6-42010a800002 -p '{"spec":{"deletionPolicy":"Retain"}}' --type=merge

$ kubectl get volumesnapshotcontent snapcontent-26cd0db3-f2a0-11e8-8be6-42010a800002 -o yaml

LANGUAGE: yaml
CODE:
apiVersion: snapshot.storage.k8s.io/v1alpha1
kind: VolumeSnapshotContent
...
spec:
  csiVolumeSnapshotSource:
...
  deletionPolicy: Retain
  persistentVolumeRef:
    apiVersion: v1
    kind: PersistentVolume
    name: pvc-853622a4-f28b-11e8-8be6-42010a800002
...

----------------------------------------

TITLE: Creating and Using a kubectl Plugin with Dashes in Name
DESCRIPTION: This example demonstrates how to create and use a kubectl plugin with dashes in its name by using underscores in the filename.

LANGUAGE: bash
CODE:
echo -e '#!/bin/bash\n\necho "I am a plugin with a dash in my name"' > ./kubectl-foo_bar
sudo chmod +x ./kubectl-foo_bar
sudo mv ./kubectl-foo_bar /usr/local/bin
kubectl foo-bar
kubectl foo_bar

----------------------------------------

TITLE: Deleting Kubernetes Resources with kubectl delete
DESCRIPTION: The kubectl delete command is used to remove resources from a Kubernetes cluster. It supports deleting resources by file names, stdin, resource types and names, or by label selectors.

LANGUAGE: bash
CODE:
kubectl delete ([-f FILENAME] | [-k DIRECTORY] | TYPE [(NAME | -l label | --all)])

----------------------------------------

TITLE: Retrieving External IP for Frontend Service
DESCRIPTION: Shell command to get the external IP address of the frontend LoadBalancer Service.

LANGUAGE: shell
CODE:
kubectl get service frontend --watch

----------------------------------------

TITLE: Setting up kubectl Autocomplete in Bash
DESCRIPTION: Commands to enable kubectl autocomplete in Bash shell, including setting it up for the current session and adding it permanently to .bashrc file.

LANGUAGE: bash
CODE:
source <(kubectl completion bash) # set up autocomplete in bash into the current shell, bash-completion package should be installed first.
echo "source <(kubectl completion bash)" >> ~/.bashrc # add autocomplete permanently to your bash shell.

----------------------------------------

TITLE: Defining the GetPodResourcesRequest Message in Protocol Buffers
DESCRIPTION: This Protocol Buffers message definition outlines the structure of the request sent to the Get function of the PodResourcesLister service in Kubernetes. It includes the pod name and namespace.

LANGUAGE: Protocol Buffers
CODE:
// GetPodResourcesRequest contains information about the pod
message GetPodResourcesRequest {
    string pod_name = 1;
    string pod_namespace = 2;
}

----------------------------------------

TITLE: Displaying Technical Suggestions for Improving Kubernetes Documentation
DESCRIPTION: This code snippet shows technical suggestions from users for improving the Kubernetes documentation, including using different documentation systems and adding interactive features to tables.

LANGUAGE: text
CODE:
- Make table columns sortable and filterable using a ReactJS or Angular component.
- For most, I think creating documentation with Hugo - a system for static site generation - is not
appropriate. There are better systems for documenting large software project. Specifically, I would
like to see k8s switch to Sphinx for documentation. It has an excellent built-in search, it is easy to
learn if you know markdown, it is widely adopted by other projects (e.g. every software project in
readthedocs.io, linux kernel, docs.python.org etc).

----------------------------------------

TITLE: Restoring from Volume Group Snapshot in Kubernetes
DESCRIPTION: YAML configuration for creating a new PersistentVolumeClaim from a volume snapshot that was part of a group snapshot. This example shows how to specify the snapshot as the data source for the new PVC.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc0-restore
  namespace: demo-namespace
spec:
  storageClassName: csi-hostpath-sc
  dataSource:
    name: snapshot-62abb5db7204ac6e4c1198629fec533f2a5d9d60ea1a25f594de0bf8866c7947-2023-04-26-2.20.4
    kind: VolumeSnapshot
    apiGroup: snapshot.storage.k8s.io
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

----------------------------------------

TITLE: Comparing Containerd Scope with Kubernetes Requirements
DESCRIPTION: This table compares the scope of containerd's features with Kubernetes requirements for container runtimes, showing how containerd aligns well with Kubernetes needs.

LANGUAGE: markdown
CODE:
| | Containerd Scope (In/Out) | Kubernetes Requirement |
|-|-|-|
| Container Lifecycle Management | In | Container Create/Start/Stop/Delete/List/Inspect (✔️) |
| Image Management | In | Pull/List/Inspect (✔️) |
| Networking | Out  No concrete network solution. User can setup network namespace and put containers into it. | Kubernetes networking deals with pods, rather than containers, so container runtimes should not provide complex networking solutions that  don't satisfy requirements. (✔️) |
| Volumes | Out, No volume management. User can setup host path, and mount it into container. |Kubernetes manages volumes. Container runtimes should not provide internal volume management that may conflict with Kubernetes. (✔️) |
| Persistent Container Logging | Out, No persistent container log. Container STDIO is provided as FIFOs, which can be redirected/decorated as is required. | Kubernetes has specific requirements for persistent container logs, such as format and path etc. Container runtimes should not &nbsp;persist an unmanageable container log. (✔️) |
| Metrics | In  Containerd provides container and snapshot metrics as part of the API. | Kubernetes expects container runtime to provide container metrics (CPU, Memory, writable layer size, etc.) and image filesystem usage (disk, inode usage, etc.). (✔️) |

----------------------------------------

TITLE: Registering APIService Object in Kubernetes
DESCRIPTION: YAML configuration to register an extension apiserver with the Kubernetes API aggregation layer. Defines the API group, version, priority and service details.

LANGUAGE: yaml
CODE:
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  name: <name of the registration object>
spec:
  group: <API group name this extension apiserver hosts>
  version: <API version this extension apiserver hosts>
  groupPriorityMinimum: <priority this APIService for this group, see API documentation>
  versionPriority: <prioritizes ordering of this version within a group, see API documentation>
  service:
    namespace: <namespace of the extension apiserver service>
    name: <name of the extension apiserver service>
  caBundle: <pem encoded ca cert that signs the server cert used by the webhook>

----------------------------------------

TITLE: Enabling API Priority and Fairness in kube-apiserver
DESCRIPTION: Command line options to enable the API Priority and Fairness feature on the Kubernetes API server.

LANGUAGE: shell
CODE:
kube-apiserver \
--feature-gates=APIPriorityAndFairness=true \
--runtime-config=flowcontrol.apiserver.k8s.io/v1alpha1=true \
 # …and other options as usual

----------------------------------------

TITLE: Adding a Lifecycle Hook to Repair GMSA Connection
DESCRIPTION: YAML snippet showing how to add a postStart lifecycle hook to repair the GMSA secure channel connection.

LANGUAGE: yaml
CODE:
        image: registry.domain.example/iis-auth:1809v1
        lifecycle:
          postStart:
            exec:
              command: ["powershell.exe","-command","do { Restart-Service -Name netlogon } while ( $($Result = (nltest.exe /query); if ($Result -like '*0x0 NERR_Success*') {return $true} else {return $false}) -eq $false)"]
        imagePullPolicy: IfNotPresent

----------------------------------------

TITLE: Configuring HTTP Timeouts in Gateway API
DESCRIPTION: Example of configuring a 300ms timeout for HTTP traffic to the /face path using HTTPRoute in Gateway API.

LANGUAGE: yaml
CODE:
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: face-with-timeouts
  namespace: faces
spec:
  parentRefs:
    - name: my-gateway
      kind: Gateway
  rules:
  - matches:
    - path:
        type: PathPrefix
        value: /face
    backendRefs:
    - name: face
      port: 80
    timeouts:
      request: 300ms

----------------------------------------

TITLE: Configuring MachineHealthCheck Resource
DESCRIPTION: YAML configuration for setting up automated health checking and replacement of unhealthy nodes in a Kubernetes cluster.

LANGUAGE: yaml
CODE:
apiVersion: cluster.x-k8s.io/v1alpha3
kind: MachineHealthCheck
metadata:
  name: example-node-unhealthy-5m
spec:
  clusterName: example
  maxUnhealthy: 33%
  nodeStartupTimeout: 10m
  selector:
    matchLabels:
      nodepool: nodepool-0
  unhealthyConditions:
  - type: Ready
    status: Unknown
    timeout: 300s
  - type: Ready
    status: "False"
    timeout: 300s

----------------------------------------

TITLE: StorageVersionMigration API Definition
DESCRIPTION: Core API definition specifying the apiVersion and import path for StorageVersionMigration resources.

LANGUAGE: yaml
CODE:
apiVersion: "storagemigration.k8s.io/v1alpha1"
import: "k8s.io/api/storagemigration/v1alpha1"

----------------------------------------

TITLE: Defining Kubernetes Pod with Unsigned Image
DESCRIPTION: This YAML snippet defines a Kubernetes pod using an unsigned image, which will fail to pull when signature verification is enforced.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: pod
spec:
  containers:
    - name: container
      image: quay.io/crio/unsigned

----------------------------------------

TITLE: Defining Deployment with Custom ServiceAccount in Kubernetes YAML
DESCRIPTION: This YAML snippet shows how to define a Deployment that uses a custom ServiceAccount. It demonstrates best practices for running applications with specific RBAC permissions in Kubernetes.

LANGUAGE: yaml
CODE:
apiVersion: apps/v1beta2 # Abbreviated, not a full manifest
kind: Deployment
metadata:
  name: prometheus-deployment
  namespace: dev
spec:
  replicas: 1
  template:
    spec:
      containers:
      - name: prometheus
        image: prom/prometheus:v1.8.0
        command: ["prometheus", "-config.file=/etc/prom/config.yml"]
    # Run this pod using the "prometheus-sa" service account.
    serviceAccountName: prometheus-sa
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus-sa
  namespace: dev

----------------------------------------

TITLE: Creating Quota Instance and Rule
DESCRIPTION: Defines a quota instance and rule to apply rate limiting using the memquota handler.

LANGUAGE: yaml
CODE:
apiVersion: "config.istio.io/v1alpha2"
kind: quota
metadata:
 name: requestcount
 namespace: default
spec:
 dimensions:
     source: source.labels["app"] | source.service | "unknown"
     sourceVersion: source.labels["version"] | "unknown"
     destination: destination.labels["app"] | destination.service | "unknown"
     destinationVersion: destination.labels["version"] | "unknown"
---
apiVersion: "config.istio.io/v1alpha2"
kind: rule
metadata:
 name: quota
 namespace: default
spec:
 actions:
 - handler: handler.memquota
     instances:
     - requestcount.quota

----------------------------------------

TITLE: Importing SelfSubjectRulesReview in Go
DESCRIPTION: Import statement for using the SelfSubjectRulesReview resource in Go code.

LANGUAGE: go
CODE:
import "k8s.io/api/authorization/v1"

----------------------------------------

TITLE: Watching for Job Creation with kubectl
DESCRIPTION: This command watches for new jobs created by the CronJob in the Kubernetes cluster.

LANGUAGE: shell
CODE:
kubectl get jobs --watch

----------------------------------------

TITLE: Creating a Basic kubectl Plugin in Bash
DESCRIPTION: This snippet demonstrates how to create a simple kubectl plugin named 'kubectl-foo' that handles version and config arguments, and provides a default message.

LANGUAGE: bash
CODE:
#!/bin/bash

# optional argument handling
if [[ "$1" == "version" ]]
then
    echo "1.0.0"
    exit 0
fi

# optional argument handling
if [[ "$1" == "config" ]]
then
    echo "$KUBECONFIG"
    exit 0
fi

echo "I am a plugin named kubectl-foo"

----------------------------------------

TITLE: Creating a ServiceCIDR object
DESCRIPTION: YAML definition for creating a new ServiceCIDR object to manage available IP ranges for Services.

LANGUAGE: yaml
CODE:
apiVersion: networking.k8s.io/v1beta1
kind: ServiceCIDR
metadata:
  name: newservicecidr
spec:
  cidrs:
  - 10.96.0.0/24

----------------------------------------

TITLE: Migrating Dependencies from Source to Destination Cluster
DESCRIPTION: Exports PVC, PV, and Secret resources from the source cluster and imports them into the destination cluster.

LANGUAGE: bash
CODE:
kubectl get pvc redis-data-redis-redis-cluster-5 -o yaml | yq 'del(.metadata.uid, .metadata.resourceVersion, .metadata.annotations, .metadata.finalizers, .status)' > /tmp/pvc-redis-data-redis-redis-cluster-5.yaml
kubectl get pv $(yq '.spec.volumeName' /tmp/pvc-redis-data-redis-redis-cluster-5.yaml) -o yaml | yq 'del(.metadata.uid, .metadata.resourceVersion, .metadata.annotations, .metadata.finalizers, .spec.claimRef, .status)' > /tmp/pv-redis-data-redis-redis-cluster-5.yaml
kubectl get secret redis-redis-cluster -o yaml | yq 'del(.metadata.uid, .metadata.resourceVersion)' > /tmp/secret-redis-redis-cluster.yaml

----------------------------------------

TITLE: Creating CustomResourceDefinition in Kubernetes
DESCRIPTION: This YAML manifest creates a CustomResourceDefinition (CRD) for a custom resource named SelfieRequest.

LANGUAGE: yaml
CODE:
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: selfierequests.stable.example.com
spec:
  group: stable.example.com
  names:
    plural: SelfieRequests
    singular: SelfieRequest
    kind: SelfieRequest
    listKind: SelfieRequestList
  scope: Namespaced
  versions:
  - name: v1
    served: true
    storage: true
    schema:
      openAPIV3Schema:
        type: object
        properties:
          hostPort:
            type: string
  conversion:
    strategy: Webhook
    webhook:
      clientConfig:
        url: "https://127.0.0.1:9443/crdconvert"
        caBundle: <CABundle info>
    conversionReviewVersions:
    - v1
    - v2

----------------------------------------

TITLE: Defining a Minimal Ingress Resource in YAML
DESCRIPTION: Example of a minimal Ingress resource definition in YAML, specifying API version, kind, metadata, and basic routing rules.

LANGUAGE: yaml
CODE:
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: test-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - http:
      paths:
      - path: /testpath
        pathType: Prefix
        backend:
          service:
            name: test
            port:
              number: 80

----------------------------------------

TITLE: Deleting a Secret in Kubernetes
DESCRIPTION: This snippet shows the kubectl command to delete a Secret object from a Kubernetes cluster.

LANGUAGE: shell
CODE:
kubectl delete secret db-user-pass

----------------------------------------

TITLE: Force Deleting a Pod in Kubernetes (kubectl v1.4 and earlier)
DESCRIPTION: This command force deletes a pod for kubectl versions 1.4 and earlier. The --force option is omitted in these versions.

LANGUAGE: shell
CODE:
kubectl delete pods <pod> --grace-period=0

----------------------------------------

TITLE: Demonstrating Markdown Heading Levels in Kubernetes Docs
DESCRIPTION: Shows how to create different heading levels (H3 to H6) using Markdown syntax in Kubernetes documentation.

LANGUAGE: markdown
CODE:
### H3

This is in an H3 section.

#### H4

This is in an H4 section.

##### H5

This is in an H5 section.

###### H6

This is in an H6 section.

----------------------------------------

TITLE: Creating a VolumeSnapshot in Kubernetes
DESCRIPTION: YAML definition for creating a VolumeSnapshot object from an existing PersistentVolumeClaim using a specified VolumeSnapshotClass.

LANGUAGE: yaml
CODE:
apiVersion: snapshot.storage.k8s.io/v1
kind: VolumeSnapshot
metadata:
  name: test-snapshot
  namespace: ns1
spec:
  volumeSnapshotClassName: test-snapclass
  source:
    persistentVolumeClaimName: test-pvc

----------------------------------------

TITLE: Viewing the Raw Seccomp Profile
DESCRIPTION: This JSON output shows the contents of the raw seccomp profile generated by spoc, including allowed syscalls and architecture specifications.

LANGUAGE: json
CODE:
{
  "defaultAction": "SCMP_ACT_ERRNO",
  "architectures": ["SCMP_ARCH_X86_64"],
  "syscalls": [
    {
      "names": ["access", "…", "write"],
      "action": "SCMP_ACT_ALLOW"
    }
  ]
}

----------------------------------------

TITLE: Initializing Environment Variables for HA Kubernetes Cluster Setup
DESCRIPTION: Sets up environment variables for creating a Highly Available Kubernetes cluster on Google Compute Engine. These variables configure the cluster to span one zone initially and enable HA compatibility.

LANGUAGE: bash
CODE:
export KUBERNETES_PROVIDER=gce
export NUM_NODES=3
export MULTIZONE=true
export ENABLE_ETCD_QUORUM_READ=true

----------------------------------------

TITLE: Testing the nginx Server
DESCRIPTION: These shell commands install curl and use it to send a GET request to the nginx server, verifying that it serves the content downloaded by the Init Container.

LANGUAGE: shell
CODE:
root@nginx:~# apt-get update
root@nginx:~# apt-get install curl
root@nginx:~# curl localhost

----------------------------------------

TITLE: Enabling PodSecurity Admission Plugin in Kubernetes API Server
DESCRIPTION: Command to enable the PodSecurity feature gate when starting the Kubernetes API server.

LANGUAGE: shell
CODE:
--feature-gates="...,PodSecurity=true"

----------------------------------------

TITLE: Encrypting All Existing Secrets
DESCRIPTION: Shell command to encrypt all existing Secrets in the cluster.

LANGUAGE: shell
CODE:
kubectl get secrets --all-namespaces -o json | kubectl replace -f -

----------------------------------------

TITLE: Configuring Pod Failure Policy Rules in Kubernetes Jobs
DESCRIPTION: Example YAML configuration showing how to define Pod failure policy rules for a Kubernetes Job. The policy includes rules for handling disruption targets, config issues, and specific exit codes.

LANGUAGE: yaml
CODE:
podFailurePolicy:
  rules:
  - action: Ignore
    onPodConditions:
    - type: DisruptionTarget
  - action: FailJob
    onPodConditions:
    - type: ConfigIssue
  - action: FailJob
    onExitCodes:
      operator: In
      values: [ 42 ]

----------------------------------------

TITLE: Deploying Cinder CSI Controller Plugin
DESCRIPTION: YAML manifest for deploying the Cinder CSI Controller Plugin in Kubernetes.

LANGUAGE: yaml
CODE:
kind: Service
apiVersion: v1
metadata:
  name: csi-cinder-controller-service
  namespace: kube-system
  labels:
    app: csi-cinder-controllerplugin
spec:
  selector:
    app: csi-cinder-controllerplugin
  ports:
    - name: dummy
      port: 12345

---
kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: csi-cinder-controllerplugin
  namespace: kube-system
spec:
  serviceName: "csi-cinder-controller-service"
  replicas: 1
  selector:
    matchLabels:
      app: csi-cinder-controllerplugin
  template:
    metadata:
      labels:
        app: csi-cinder-controllerplugin
    spec:
      serviceAccount: csi-cinder-controller-sa
      containers:
        - name: csi-attacher
          image: quay.io/k8scsi/csi-attacher:v1.0.1
          args:
            - "--v=5"
            - "--csi-address=$(ADDRESS)"
          env:
            - name: ADDRESS
              value: /var/lib/csi/sockets/pluginproxy/csi.sock
          imagePullPolicy: "IfNotPresent"
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
        - name: csi-provisioner
          image: quay.io/k8scsi/csi-provisioner:v1.0.1
          args:
            - "--provisioner=csi-cinderplugin"
            - "--csi-address=$(ADDRESS)"
          env:
            - name: ADDRESS
              value: /var/lib/csi/sockets/pluginproxy/csi.sock
          imagePullPolicy: "IfNotPresent"
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
        - name: csi-snapshotter
          image: quay.io/k8scsi/csi-snapshotter:v1.0.1
          args:
            - "--connection-timeout=15s"
            - "--csi-address=$(ADDRESS)"
          env:
            - name: ADDRESS
              value: /var/lib/csi/sockets/pluginproxy/csi.sock
          imagePullPolicy: Always
          volumeMounts:
            - mountPath: /var/lib/csi/sockets/pluginproxy/
              name: socket-dir
        - name: cinder-csi-plugin
          image: docker.io/k8scloudprovider/cinder-csi-plugin:v1.15.0
          args :
            - /bin/cinder-csi-plugin
            - "--v=5"
            - "--nodeid=$(NODE_ID)"
            - "--endpoint=$(CSI_ENDPOINT)"
            - "--cloud-config=$(CLOUD_CONFIG)"
            - "--cluster=$(CLUSTER_NAME)"
          env:
            - name: NODE_ID
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: CSI_ENDPOINT
              value: unix://csi/csi.sock
            - name: CLOUD_CONFIG
              value: /etc/config/cloud.conf
            - name: CLUSTER_NAME
              value: kubernetes
          imagePullPolicy: "IfNotPresent"
          volumeMounts:
            - name: socket-dir
              mountPath: /csi
            - name: secret-cinderplugin
              mountPath: /etc/config
              readOnly: true
            - mountPath: /etc/kubernetes
              name: ca-cert
              readOnly: true
      volumes:
        - name: socket-dir
          hostPath:
            path: /var/lib/csi/sockets/pluginproxy/
            type: DirectoryOrCreate
        - name: secret-cinderplugin
          secret:
            secretName: cloud-config
        - name: ca-cert
          secret:
            secretName: openstack-ca-cert

----------------------------------------

TITLE: Importing ResourceClaimTemplate in Go
DESCRIPTION: Go import statement for using the ResourceClaimTemplate type from the Kubernetes API.

LANGUAGE: go
CODE:
import "k8s.io/api/resource/v1alpha3"

----------------------------------------

TITLE: HTTP Delete CSINode Request
DESCRIPTION: HTTP request for deleting a CSINode resource

LANGUAGE: http
CODE:
DELETE /apis/storage.k8s.io/v1/csinodes/{name}

----------------------------------------

TITLE: Verifying Nginx Deployment and Service
DESCRIPTION: Checks the status of the deployed nginx pods and tests the accessibility of the nginx service using a busybox container to ensure the cluster is operational.

LANGUAGE: bash
CODE:
kubectl get pods

kubectl run -i --tty test-a --image=busybox /bin/sh
# wget -q -O- http://nginx.default.svc.cluster.local

----------------------------------------

TITLE: Retrieving Istio Ingress NodePort
DESCRIPTION: Extracts the NodePort address of the Istio Ingress controller for accessing the Bookinfo application.

LANGUAGE: bash
CODE:
export BOOKINFO\_URL=$(kubectl get po -n istio-system -l istio=ingress -o jsonpath={.items[0].status.hostIP}):$(kubectl get svc -n istio-system istio-ingress -o jsonpath={.spec.ports[0].nodePort})

----------------------------------------

TITLE: Installing Kubernetes Dashboard with KinD
DESCRIPTION: Commands to install the Kubernetes Dashboard on a KinD cluster and create necessary RBAC resources.

LANGUAGE: bash
CODE:
kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-rc6/aio/deploy/recommended.yaml

kubectl apply -f - <<EOF
apiVersion: v1
kind: ServiceAccount
metadata:
  name: admin-user
  namespace: kubernetes-dashboard
EOF

kubectl apply -f - <<EOF
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: admin-user
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: admin-user
  namespace: kubernetes-dashboard
EOF

----------------------------------------

TITLE: Defining HyperVContainer Feature Gate Configuration in YAML
DESCRIPTION: YAML configuration that defines the lifecycle stages of the HyperVContainer feature gate. Specifies the feature was in alpha from version 1.10 to 1.19, deprecated in version 1.20, and then removed.

LANGUAGE: yaml
CODE:
title: HyperVContainer
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.10"
    toVersion: "1.19"
  - stage: deprecated
    defaultValue: false
    fromVersion: "1.20"
    toVersion: "1.20"

removed: true

----------------------------------------

TITLE: Examining Kubernetes Objects
DESCRIPTION: Retrieves information about the created Redis pod and ConfigMap.

LANGUAGE: shell
CODE:
kubectl get pod/redis configmap/example-redis-config

----------------------------------------

TITLE: Creating a Priority Class in Kubernetes
DESCRIPTION: This command creates a priority class named 'high-priority' with a value of 1000 and a description. It demonstrates the basic usage of the kubectl create priorityclass command.

LANGUAGE: bash
CODE:
kubectl create priorityclass high-priority --value=1000 --description="high priority"

----------------------------------------

TITLE: Configuring Azure File StorageClass
DESCRIPTION: Example configuration for an Azure File StorageClass, specifying SKU name, location, and storage account details.

LANGUAGE: yaml
CODE:
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: azurefile
provisioner: kubernetes.io/azure-file
parameters:
  skuName: Standard_LRS
  location: eastus
  storageAccount: azure_storage_account_name

----------------------------------------

TITLE: Making kubectl Binary Executable on macOS
DESCRIPTION: Changes the permissions of the kubectl binary to make it executable.

LANGUAGE: bash
CODE:
chmod +x ./kubectl

----------------------------------------

TITLE: kubectl rollout Example Commands
DESCRIPTION: Common examples of kubectl rollout commands including rollback operations, status checking, and deployment restarts. Shows usage with specific resources and selectors.

LANGUAGE: bash
CODE:
  # Rollback to the previous deployment
  kubectl rollout undo deployment/abc
  
  # Check the rollout status of a daemonset
  kubectl rollout status daemonset/foo
  
  # Restart a deployment
  kubectl rollout restart deployment/abc
  
  # Restart deployments with the 'app=nginx' label
  kubectl rollout restart deployment --selector=app=nginx

----------------------------------------

TITLE: Configuring PodPriority Feature Gate in Kubernetes YAML
DESCRIPTION: This YAML configuration defines the PodPriority feature gate in Kubernetes. It specifies the feature's progression through alpha, beta, and stable stages, including version ranges and default values for each stage. The configuration also indicates that this feature has been removed from Kubernetes as of version 1.18.

LANGUAGE: yaml
CODE:
---
# Removed from Kubernetes
title: PodPriority
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.8"
    toVersion: "1.10"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.11"
    toVersion: "1.13"
  - stage: stable
    defaultValue: true
    fromVersion: "1.14"
    toVersion: "1.18"

removed: true
---

----------------------------------------

TITLE: Configuring Swap Memory Behavior in Kubernetes
DESCRIPTION: YAML configuration example showing how to set swap behavior in KubeletConfiguration. The swapBehavior can be set to either LimitedSwap (default) or UnlimitedSwap to control how Kubernetes workloads use swap memory.

LANGUAGE: yaml
CODE:
memorySwap:
  swapBehavior: LimitedSwap

----------------------------------------

TITLE: Enabling LoadBalancer IP Mode Feature Gate
DESCRIPTION: Command line flag required to enable the LoadBalancer IP Mode feature on kube-proxy, kube-apiserver, and cloud-controller-manager components.

LANGUAGE: bash
CODE:
--feature-gates=LoadBalancerIPMode=true

----------------------------------------

TITLE: Cloning MongoDB Sidecar Repository
DESCRIPTION: Git commands to clone the example configuration files for MongoDB StatefulSet deployment.

LANGUAGE: bash
CODE:
git clone https://github.com/thesandlord/mongo-k8s-sidecar.git

cd /mongo-k8s-sidecar/example/StatefulSet/

----------------------------------------

TITLE: Mixed-Level Resource Configuration
DESCRIPTION: YAML showing resource configuration at both pod and container levels with multiple containers

LANGUAGE: yaml
CODE:
containers:
  name: pod-resources-demo-ctr-1
  resources:
      requests:
        cpu: 500m
        memory: 50Mi
      limits:
        cpu: 500m
        memory: 100Mi
  ...
  name: pod-resources-demo-ctr-2
  resources: {}  
resources:
  limits:
      cpu: 1
      memory: 200Mi
    requests:
      cpu: 1
      memory: 100Mi

----------------------------------------

TITLE: Retrieving Discovery Token CA Cert Hash
DESCRIPTION: Calculates the discovery token CA cert hash needed for the kubeadm join command.

LANGUAGE: bash
CODE:
sudo cat /etc/kubernetes/pki/ca.crt | openssl x509 -pubkey  | openssl rsa -pubin -outform der 2>/dev/null | \
   openssl dgst -sha256 -hex | sed 's/^.* //'

----------------------------------------

TITLE: kubectl 사용자 정의 열 예시
DESCRIPTION: kubectl get 명령에 사용자 정의 열을 적용하는 예시를 보여준다.

LANGUAGE: shell
CODE:
kubectl get pods <pod-name> -o custom-columns=NAME:.metadata.name,RSRC:.metadata.resourceVersion

LANGUAGE: shell
CODE:
kubectl get pods <pod-name> -o custom-columns-file=template.txt

----------------------------------------

TITLE: Resulting Pod Configuration with MatchLabelKeys in Kubernetes
DESCRIPTION: This YAML snippet shows how the matchLabelKeys field in a Deployment is translated into the actual Pod configuration. It demonstrates how the pod-template-hash is automatically added to the labelSelector, ensuring version-specific pod affinity.

LANGUAGE: yaml
CODE:
kind: Pod
metadata:
  name: application-server
  labels:
    pod-template-hash: xyz
...
  affinity:
    podAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
          - key: app
            operator: In
            values:
            - database
          - key: pod-template-hash # Added from matchLabelKeys; Only Pods from the same replicaset will match this affinity.
            operator: In
            values:
            - xyz
        topologyKey: topology.kubernetes.io/zone
        matchLabelKeys:
        - pod-template-hash

----------------------------------------

TITLE: Uninstalling MicroK8s
DESCRIPTION: This command removes the MicroK8s snap package, effectively uninstalling the local Kubernetes cluster.

LANGUAGE: shell
CODE:
sudo snap remove microk8s

----------------------------------------

TITLE: SubjectAccessReview API Definition
DESCRIPTION: Core YAML definition showing the API version and import path for SubjectAccessReview.

LANGUAGE: yaml
CODE:
apiVersion: authorization.k8s.io/v1
import: "k8s.io/api/authorization/v1"

----------------------------------------

TITLE: Defining Pod with gRPC Readiness Probe
DESCRIPTION: YAML configuration for a Pod using the agnhost image, exposing gRPC and HTTP ports, and configuring a gRPC readiness probe.

LANGUAGE: yaml
CODE:
---
apiVersion: v1
kind: Pod
metadata:
  name: test-grpc
spec:
  containers:
  - name: agnhost
    # image changed since publication (previously used registry "k8s.gcr.io")
    image: registry.k8s.io/e2e-test-images/agnhost:2.35
    command: ["/agnhost", "grpc-health-checking"]
    ports:
    - containerPort: 5000
    - containerPort: 8080
    readinessProbe:
      grpc:
        port: 5000

----------------------------------------

TITLE: Shutting Down HA Kubernetes Cluster
DESCRIPTION: Provides a sequence of commands to properly shut down the Highly Available Kubernetes cluster, including removing master replicas and additional worker nodes from different zones.

LANGUAGE: bash
CODE:
KUBE_DELETE_NODES=false KUBE_GCE_ZONE=europe-west1-c ./cluster/kube-down.sh

KUBE_DELETE_NODES=false KUBE_GCE_ZONE=europe-west1-d ./cluster/kube-down.sh

KUBE_USE_EXISTING_MASTER=true KUBE_GCE_ZONE=europe-west1-c ./cluster/kube-down.sh

KUBE_USE_EXISTING_MASTER=true KUBE_GCE_ZONE=europe-west1-d ./cluster/kube-down.sh

KUBE_GCE_ZONE=europe-west1-b ./cluster/kube-down.sh

----------------------------------------

TITLE: Deploying Sample Nginx Application
DESCRIPTION: Deploys a sample nginx server application to verify that the Kubernetes cluster is functioning correctly. This command creates both a deployment and a service for the nginx server.

LANGUAGE: bash
CODE:
kubectl run nginx --image=nginx --expose --port=80

----------------------------------------

TITLE: Defining a Simple Fanout Ingress
DESCRIPTION: An example of an Ingress that routes traffic to multiple backend services based on the request path.

LANGUAGE: yaml
CODE:
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: simple-fanout-example
spec:
  rules:
  - host: foo.bar.com
    http:
      paths:
      - path: /foo
        pathType: Prefix
        backend:
          service:
            name: service1
            port:
              number: 4200
      - path: /bar
        pathType: Prefix
        backend:
          service:
            name: service2
            port:
              number: 8080

----------------------------------------

TITLE: Defining a Simple Fanout Ingress
DESCRIPTION: An example of an Ingress that routes traffic to multiple backend services based on the request path.

LANGUAGE: yaml
CODE:
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: simple-fanout-example
spec:
  rules:
  - host: foo.bar.com
    http:
      paths:
      - path: /foo
        pathType: Prefix
        backend:
          service:
            name: service1
            port:
              number: 4200
      - path: /bar
        pathType: Prefix
        backend:
          service:
            name: service2
            port:
              number: 8080

----------------------------------------

TITLE: Updating Redis ConfigMap in YAML
DESCRIPTION: Updates the example-redis-config ConfigMap with new configuration values for Redis.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: ConfigMap
metadata:
  name: example-redis-config
data:
  redis-config: |
    maxmemory 2mb
    maxmemory-policy allkeys-lru

----------------------------------------

TITLE: Defining CronJobTimeZone Feature Gate Stages in YAML
DESCRIPTION: This YAML configuration specifies the lifecycle stages of the CronJobTimeZone feature gate in Kubernetes. It defines alpha, beta, and stable stages with their respective version ranges and default values.

LANGUAGE: yaml
CODE:
title: CronJobTimeZone
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.24"
    toVersion: "1.24"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.25"
    toVersion: "1.26"    
  - stage: stable
    defaultValue: true
    fromVersion: "1.27"
    toVersion: "1.28"

removed: true

----------------------------------------

TITLE: Creating ZooKeeper StatefulSet, Services, and PodDisruptionBudget
DESCRIPTION: YAML manifest defining a StatefulSet, Headless Service, Client Service, and PodDisruptionBudget for running a ZooKeeper ensemble on Kubernetes.

LANGUAGE: yaml
CODE:
{{% codenew file="application/zookeeper/zookeeper.yaml" %}}

----------------------------------------

TITLE: Reloading Shell Configuration
DESCRIPTION: Command to reload the bash configuration to enable newly added completion settings.

LANGUAGE: bash
CODE:
source ~/.bashrc

----------------------------------------

TITLE: Configuring Azure Disk StorageClass
DESCRIPTION: Example configuration for an Azure Disk StorageClass, specifying storage account type and kind of disk (managed or unmanaged).

LANGUAGE: yaml
CODE:
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: slow
provisioner: kubernetes.io/azure-disk
parameters:
  storageaccounttype: Standard_LRS
  kind: managed

----------------------------------------

TITLE: Port-Forward Usage Examples
DESCRIPTION: Various examples demonstrating different ways to use kubectl port-forward including forwarding multiple ports, using different resource types, and configuring listening addresses.

LANGUAGE: bash
CODE:
  # Listen on ports 5000 and 6000 locally, forwarding data to/from ports 5000 and 6000 in the pod
  kubectl port-forward pod/mypod 5000 6000
  
  # Listen on ports 5000 and 6000 locally, forwarding data to/from ports 5000 and 6000 in a pod selected by the deployment
  kubectl port-forward deployment/mydeployment 5000 6000
  
  # Listen on port 8443 locally, forwarding to the targetPort of the service's port named "https" in a pod selected by the service
  kubectl port-forward service/myservice 8443:https
  
  # Listen on port 8888 locally, forwarding to 5000 in the pod
  kubectl port-forward pod/mypod 8888:5000
  
  # Listen on port 8888 on all addresses, forwarding to 5000 in the pod
  kubectl port-forward --address 0.0.0.0 pod/mypod 8888:5000
  
  # Listen on port 8888 on localhost and selected IP, forwarding to 5000 in the pod
  kubectl port-forward --address localhost,10.19.21.23 pod/mypod 8888:5000
  
  # Listen on a random port locally, forwarding to 5000 in the pod
  kubectl port-forward pod/mypod :5000

----------------------------------------

TITLE: Editing StatefulSets Using kubectl in Kubernetes
DESCRIPTION: This command opens the StatefulSet configuration in an editor for manual updates.

LANGUAGE: shell
CODE:
kubectl edit statefulsets <stateful-set-name>

----------------------------------------

TITLE: Configuring NetworkPolicyEndPort Feature Gate Stages in YAML
DESCRIPTION: Defines the alpha, beta, and stable stages for the NetworkPolicyEndPort feature gate, including version ranges and default values. The feature allows specifying port ranges in NetworkPolicy rules and has been removed as of version 1.26.

LANGUAGE: yaml
CODE:
title: NetworkPolicyEndPort
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.21"
    toVersion: "1.21"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.22"
    toVersion: "1.24"
  - stage: stable
    defaultValue: true
    fromVersion: "1.25"
    toVersion: "1.26"

removed: true

----------------------------------------

TITLE: Managing and Inspecting gRPC Probe Test Pod
DESCRIPTION: Shell commands to apply the Pod configuration, describe the Pod, and set up port forwarding for testing.

LANGUAGE: shell
CODE:
kubectl apply -f test.yaml
kubectl describe test-grpc
kubectl port-forward test-grpc 8080:8080

----------------------------------------

TITLE: Retrieving PersistentVolume Information in Kubernetes
DESCRIPTION: This command retrieves information about a specific PersistentVolume using kubectl, demonstrating how to check its status after attempted deletion.

LANGUAGE: bash
CODE:
kubectl get pv pvc-6791fdd4-5fad-438e-a7fb-16410363e3da

----------------------------------------

TITLE: Checking Federated Cluster Status in Kubernetes
DESCRIPTION: This command lists all clusters in the federation and their status using kubectl.

LANGUAGE: bash
CODE:
$ kubectl --context=federation-cluster get clusters

----------------------------------------

TITLE: Creating Role Binding - Usage Examples
DESCRIPTION: Examples showing how to create role bindings for users, groups, and service accounts using admin roles.

LANGUAGE: shell
CODE:
# Create a role binding for user1, user2, and group1 using the admin cluster role
kubectl create rolebinding admin --clusterrole=admin --user=user1 --user=user2 --group=group1

# Create a role binding for service account monitoring:sa-dev using the admin role
kubectl create rolebinding admin-binding --role=admin --serviceaccount=monitoring:sa-dev

----------------------------------------

TITLE: Approving Certificate Signing Requests (CSRs)
DESCRIPTION: Shell command to approve a specific Certificate Signing Request (CSR) for kubelet serving certificates.

LANGUAGE: shell
CODE:
kubectl certificate approve <CSR-name>

----------------------------------------

TITLE: Implementing Security Context Validation Webhook in Go
DESCRIPTION: A Go function that validates security context settings for containers in a Deployment, checking runAsNonRoot, readOnlyRootFilesystem, allowPrivilegeEscalation, and privileged settings.

LANGUAGE: go
CODE:
func verifyDeployment(deploy *appsv1.Deployment) error {
	var errs []error
	for i, c := range deploy.Spec.Template.Spec.Containers {
		if c.Name == "" {
			return fmt.Errorf("container %d has no name", i)
		}
		if c.SecurityContext == nil {
			errs = append(errs, fmt.Errorf("container %q does not have SecurityContext", c.Name))
		}
		if c.SecurityContext.RunAsNonRoot == nil || !*c.SecurityContext.RunAsNonRoot {
			errs = append(errs, fmt.Errorf("container %q must set RunAsNonRoot to true in its SecurityContext", c.Name))
		}
		if c.SecurityContext.ReadOnlyRootFilesystem == nil || !*c.SecurityContext.ReadOnlyRootFilesystem {
			errs = append(errs, fmt.Errorf("container %q must set ReadOnlyRootFilesystem to true in its SecurityContext", c.Name))
		}
		if c.SecurityContext.AllowPrivilegeEscalation != nil && *c.SecurityContext.AllowPrivilegeEscalation {
			errs = append(errs, fmt.Errorf("container %q must NOT set AllowPrivilegeEscalation to true in its SecurityContext", c.Name))
		}
		if c.SecurityContext.Privileged != nil && *c.SecurityContext.Privileged {
			errs = append(errs, fmt.Errorf("container %q must NOT set Privileged to true in its SecurityContext", c.Name))
		}
	}
	return errors.NewAggregate(errs)
}

----------------------------------------

TITLE: Configuring Non-Root Container in Kubernetes YAML
DESCRIPTION: This YAML snippet demonstrates how to configure a Kubernetes Pod to run as a non-root user (UID 1000) to mitigate the runc vulnerability.

LANGUAGE: yaml
CODE:
---
apiVersion: v1
kind: Pod
metadata:
  name: run-as-uid-1000
spec:
  securityContext:
    runAsUser: 1000
  # ...

----------------------------------------

TITLE: Configuring YAML Front Matter for Kubernetes Docs
DESCRIPTION: YAML front matter configuration block that defines metadata for Kubernetes documentation pages, including link title, page title and sitemap priority.

LANGUAGE: yaml
CODE:
linktitle: Kubernetes Documentation
title: Documentation
sitemap:
  priority: 1.0

----------------------------------------

TITLE: Creating a SelfSubjectRulesReview
DESCRIPTION: HTTP request for creating a SelfSubjectRulesReview resource. This operation allows you to submit a SelfSubjectRulesReview object to the Kubernetes API server.

LANGUAGE: http
CODE:
POST /apis/authorization.k8s.io/v1/selfsubjectrulesreviews

----------------------------------------

TITLE: Example Pod with Readiness Gate
DESCRIPTION: This YAML snippet shows an example Pod specification with a custom readiness gate condition and the corresponding status.

LANGUAGE: yaml
CODE:
kind: Pod
...
spec:
  readinessGates:
    - conditionType: "www.example.com/feature-1"
status:
  conditions:
    - type: Ready                              # a built-in PodCondition
      status: "False"
      lastProbeTime: null
      lastTransitionTime: 2018-01-01T00:00:00Z
    - type: "www.example.com/feature-1"        # an extra PodCondition
      status: "False"
      lastProbeTime: null
      lastTransitionTime: 2018-01-01T00:00:00Z
  containerStatuses:
    - containerID: docker://abcd...
      ready: true
...

----------------------------------------

TITLE: Accessing Minikube Dashboard
DESCRIPTION: Commands to enable and access the Kubernetes Dashboard with Minikube.

LANGUAGE: bash
CODE:
sudo minikube dashboard

----------------------------------------

TITLE: Initializing Federation Control Plane with kubefed in Bash
DESCRIPTION: Initializes the federation control plane on the host cluster using the kubefed command.

LANGUAGE: bash
CODE:
kubefed init federation --host-cluster-context=gke_${FED_PROJECT}_${FED_HOST_CLUSTER}_gce-${FED_HOST_CLUSTER} --dns-zone-name=${FED_DNS_ZONE}

----------------------------------------

TITLE: Configuring CRI-O Runtime for Seccomp Notifier
DESCRIPTION: This TOML configuration snippet for CRI-O enables the seccomp notifier feature by allowing a specific annotation to be used with containers.

LANGUAGE: toml
CODE:
[crio.runtime]
default_runtime = "runc"

[crio.runtime.runtimes.runc]
allowed_annotations = [ "io.kubernetes.cri-o.seccompNotifierAction" ]

----------------------------------------

TITLE: Configuring a Guaranteed QoS Pod with Fractional CPU
DESCRIPTION: This YAML snippet demonstrates how to configure a pod to run in the Guaranteed QoS class using fractional CPU units, with equal requests and limits for resources.

LANGUAGE: yaml
CODE:
spec:
  containers:
  - name: nginx
    image: nginx
    resources:
      limits:
        memory: "200Mi"
        cpu: "300m"
        example.com/device: "1"
      requests:
        memory: "200Mi"
        cpu: "300m"
        example.com/device: "1"

----------------------------------------

TITLE: Verifying Pod Placement in Kubernetes
DESCRIPTION: This command verifies that the pod is running on the chosen node with the required label.

LANGUAGE: shell
CODE:
kubectl get pods --output=wide

----------------------------------------

TITLE: Applying ConfigMap and Redis Pod in Kubernetes
DESCRIPTION: Applies the created ConfigMap and a Redis pod manifest using kubectl.

LANGUAGE: shell
CODE:
kubectl apply -f example-redis-config.yaml
kubectl apply -f https://raw.githubusercontent.com/kubernetes/website/main/content/en/examples/pods/config/redis-pod.yaml

----------------------------------------

TITLE: Applying ResourceQuota
DESCRIPTION: Command to apply the ResourceQuota configuration to the namespace

LANGUAGE: shell
CODE:
kubectl apply -f https://k8s.io/examples/admin/resource/quota-mem-cpu.yaml --namespace=quota-mem-cpu-example

----------------------------------------

TITLE: Defining ExpandInUsePersistentVolumes Feature Gate Lifecycle in YAML
DESCRIPTION: YAML configuration defining the lifecycle of the ExpandInUsePersistentVolumes feature gate in Kubernetes. It specifies the feature's progression through alpha, beta, and stable stages, along with version ranges and default values for each stage.

LANGUAGE: yaml
CODE:
title: ExpandInUsePersistentVolumes
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.11"
    toVersion: "1.14"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.15"
    toVersion: "1.23"    
  - stage: stable
    defaultValue: true
    fromVersion: "1.24"
    toVersion: "1.26"    

removed: true

----------------------------------------

TITLE: Configuring EndpointSliceNodeName Feature Gate in Kubernetes YAML
DESCRIPTION: This YAML configuration defines the EndpointSliceNodeName feature gate for Kubernetes. It specifies the feature's alpha and stable stages, version ranges, and default values. The feature is marked as removed.

LANGUAGE: yaml
CODE:
# Removed from Kubernetes
title: EndpointSliceNodeName
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.20"
    toVersion: "1.20"
  - stage: stable
    defaultValue: true
    fromVersion: "1.21"
    toVersion: "1.24"    

removed: true

----------------------------------------

TITLE: Creating a Pod with CSI Inline Volume in YAML
DESCRIPTION: This YAML snippet shows how to define a Pod that uses a CSI inline volume. It references the CSI driver and specifies volume attributes for the inline volume.

LANGUAGE: yaml
CODE:
kind: Pod
apiVersion: v1
metadata:
  name: my-csi-app-inline
spec:
  containers:
    - name: my-frontend
      image: busybox
      volumeMounts:
      - name: secrets-store-inline
        mountPath: "/mnt/secrets-store"
        readOnly: true
      command: [ "sleep", "1000000" ]
  volumes:
    - name: secrets-store-inline
      csi:
        driver: secrets-store.csi.k8s.io
        readOnly: true
        volumeAttributes:
          secretProviderClass: "my-provider"

----------------------------------------

TITLE: Configuring Gateway Infrastructure Labels and Annotations
DESCRIPTION: Example showing how to configure infrastructure labels and annotations for service mesh injection in a Gateway resource.

LANGUAGE: yaml
CODE:
apiVersion: gateway.networking.k8s.io/v1
kind: Gateway
metadata:
  name: meshed-gateway
  namespace: incoming
spec:
  gatewayClassName: meshed-gateway-class
  listeners:
  - name: http-listener
    protocol: HTTP
    port: 80
  infrastructure:
    labels:
      istio-injection: enabled
    annotations:
      linkerd.io/inject: enabled

----------------------------------------

TITLE: Scaling a Kubernetes deployment
DESCRIPTION: Increases the number of replicas in the 'update-demo' deployment to 4.

LANGUAGE: bash
CODE:
$ kubectl scale deployment/update-demo --replicas=4

----------------------------------------

TITLE: Viewing LimitRange Details
DESCRIPTION: Command to view detailed information about the created LimitRange resource

LANGUAGE: shell
CODE:
kubectl get limitrange cpu-min-max-demo-lr --output=yaml --namespace=constraints-cpu-example

----------------------------------------

TITLE: Importing StatefulSet API
DESCRIPTION: Import statement for using the StatefulSet API in Go code.

LANGUAGE: go
CODE:
import "k8s.io/api/apps/v1"

----------------------------------------

TITLE: Configuring YAML Front Matter for Kubernetes Scheduling Documentation
DESCRIPTION: This YAML snippet defines the front matter for a Markdown document about Kubernetes scheduling. It sets the page title, weight for ordering, and hides the table of contents.

LANGUAGE: yaml
CODE:
---
title: Scheduling
weight: 140
toc-hide: true
---

----------------------------------------

TITLE: Updating PersistentVolumeClaim with New VolumeAttributesClass in Kubernetes
DESCRIPTION: YAML definition to update the existing PersistentVolumeClaim with the new 'gold' VolumeAttributesClass.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: test-pv-claim
spec:
  storageClassName: csi-sc-example
  volumeAttributesClassName: gold
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 64Gi

----------------------------------------

TITLE: Configuring LTSP Client Settings
DESCRIPTION: Example lts.conf file for configuring LTSP client settings like services, filesystem mounts, and initialization commands.

LANGUAGE: YAML
CODE:
apiVersion: v1
kind: ConfigMap
metadata:
  name: ltsp-config
data:
  lts.conf: |
    [default]
    KEEP_SYSTEM_SERVICES           = "ssh ureadahead dbus-org.freedesktop.login1 systemd-logind polkitd cgmanager ufw rpcbind nfs-kernel-server"

    PREINIT_00_TIME                = "ln -sf /usr/share/zoneinfo/Europe/Prague /etc/localtime"
    PREINIT_01_FIX_HOSTNAME        = "sed -i '/^127.0.0.2/d' /etc/hosts"
    PREINIT_02_DOCKER_OPTIONS      = "sed -i 's|^ExecStart=.*|ExecStart=/usr/bin/dockerd -H fd:// --storage-driver overlay2 --iptables=false --ip-masq=false --log-driver=json-file --log-opt=max-size=10m --log-opt=max-file=5|' /etc/systemd/system/docker.service"

    FSTAB_01_SSH                   = "/dev/data/ssh     /etc/ssh          ext4 nofail,noatime,nodiratime 0 0"
    FSTAB_02_JOURNALD              = "/dev/data/journal /var/log/journal  ext4 nofail,noatime,nodiratime 0 0"
    FSTAB_03_DOCKER                = "/dev/data/docker  /var/lib/docker   ext4 nofail,noatime,nodiratime 0 0"

    # Each command will stop script execution when fail
    RCFILE_01_SSH_SERVER           = "cp /rofs/etc/ssh/*_config /etc/ssh; ssh-keygen -A"
    RCFILE_02_SSH_CLIENT           = "mkdir -p /root/.ssh/; echo 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDBSLYRaORL2znr1V4a3rjDn3HDHn2CsvUNK1nv8+CctoICtJOPXl6zQycI9KXNhANfJpc6iQG1ZPZUR74IiNhNIKvOpnNRPyLZ5opm01MVIDIZgi9g0DUks1g5gLV5LKzED8xYKMBmAfXMxh/nsP9KEvxGvTJB3OD+/bBxpliTl5xY3Eu41+VmZqVOz3Yl98+X8cZTgqx2dmsHUk7VKN9OZuCjIZL9MtJCZyOSRbjuo4HFEssotR1mvANyz+BUXkjqv2pEa0I2vGQPk1VDul5TpzGaN3nOfu83URZLJgCrX+8whS1fzMepUYrbEuIWq95esjn0gR6G4J7qlxyguAb9 admin@kubernetes' >> /root/.ssh/authorized_keys"
    RCFILE_03_KERNEL_DEBUG         = "sysctl -w kernel.unknown_nmi_panic=1 kernel.softlockup_panic=1; modprobe netconsole netconsole=@/vmbr0,@10.9.0.15/"
    RCFILE_04_SYSCTL               = "sysctl -w fs.file-max=20000000 fs.nr_open=20000000 net.ipv4.neigh.default.gc_thresh1=80000 net.ipv4.neigh.default.gc_thresh2=90000 net.ipv4.neigh.default.gc_thresh3=100000"
    RCFILE_05_FORWARD              = "echo 1 > /proc/sys/net/ipv4/ip_forward"
    RCFILE_06_MODULES              = "modprobe br_netfilter"
    RCFILE_07_JOIN_K8S             = "kubeadm join --token 2a4576.504356e45fa3d365 10.9.0.20:6443 --discovery-token-ca-cert-hash sha256:e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"

----------------------------------------

TITLE: ClusterRole API Definition
DESCRIPTION: Defines the API version and import path for ClusterRole resources in Kubernetes RBAC

LANGUAGE: yaml
CODE:
apiVersion: rbac.authorization.k8s.io/v1
import "k8s.io/api/rbac/v1"

----------------------------------------

TITLE: Retrieving a Bound PersistentVolumeClaim in Kubernetes
DESCRIPTION: This command retrieves an existing PersistentVolumeClaim (PVC) named 'example-vanilla-block-pvc' and displays its status, associated volume, capacity, access modes, storage class, and age.

LANGUAGE: bash
CODE:
kubectl get pvc example-vanilla-block-pvc

----------------------------------------

TITLE: Starting Minikube Cluster
DESCRIPTION: Command to start a local Kubernetes cluster using Minikube. Shows the cluster startup process and endpoint configuration.

LANGUAGE: shell
CODE:
$ minikube start

Starting local Kubernetes cluster...

Kubernetes is available at https://192.168.99.100:443

Kubectl is now configured to use the cluster

----------------------------------------

TITLE: Importing Zeppelin notebook from URL
DESCRIPTION: URL for importing a pre-made Zeppelin notebook for the movie recommendation demo.

LANGUAGE: bash
CODE:
https://gist.githubusercontent.com/zmerlynn/875fed0f587d12b08ec9/raw/6
eac83e99caf712482a4937800b17bbd2e7b33c4/movies.json

----------------------------------------

TITLE: Post-Release Phase Commands
DESCRIPTION: Required Prow commands for merging PRs after release (weeks 14+)

LANGUAGE: markdown
CODE:
/sig {name}
/kind {type}
/lgtm
/approved

----------------------------------------

TITLE: Testing External Access
DESCRIPTION: Command to test accessing the application using the external IP address provided by the LoadBalancer.

LANGUAGE: shell
CODE:
curl http://<external-ip>:<port>

----------------------------------------

TITLE: Creating Pod Within Quota
DESCRIPTION: Command to create a Pod that fits within the defined resource quota limits

LANGUAGE: shell
CODE:
kubectl apply -f https://k8s.io/examples/admin/resource/quota-mem-cpu-pod.yaml --namespace=quota-mem-cpu-example

----------------------------------------

TITLE: Deploying Multi-Zone Application
DESCRIPTION: Command to deploy the guestbook-go example application across multiple zones

LANGUAGE: bash
CODE:
kubectl create -f guestbook-go/

----------------------------------------

TITLE: Verifying Nginx Process and Shared Content in Kubernetes Container
DESCRIPTION: These commands update package lists, install necessary tools, check running processes, and verify the content written by the debian container to the shared volume.

LANGUAGE: bash
CODE:
root@two-containers:/# apt-get update
root@two-containers:/# apt-get install curl procps
root@two-containers:/# ps aux
root@two-containers:/# curl localhost

----------------------------------------

TITLE: Defining InTreePluginAzureDiskUnregister Feature Gate Configuration in YAML
DESCRIPTION: YAML configuration defining the InTreePluginAzureDiskUnregister feature gate properties including its stages, default values, and version ranges. This feature gate controls the registration of the azuredisk in-tree plugin.

LANGUAGE: yaml
CODE:
title: InTreePluginAzureDiskUnregister
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha
    defaultValue: false
    fromVersion: "1.21"
    toVersion: "1.30"

removed: true

----------------------------------------

TITLE: Configuring CSINodeExpandSecret Feature Gate in Kubernetes
DESCRIPTION: YAML configuration defining the lifecycle stages of the CSINodeExpandSecret feature gate. Progresses from alpha (1.25-1.26), to beta (1.27-1.28), to stable (1.29-1.30) with corresponding default values.

LANGUAGE: yaml
CODE:
title: CSINodeExpandSecret
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.25"
    toVersion: "1.26"
  - stage: beta
    defaultValue: true
    fromVersion: "1.27"  
    toVersion: "1.28" 
  - stage: stable
    defaultValue: true
    fromVersion: "1.29"
    toVersion: "1.30"

removed: true

----------------------------------------

TITLE: Configuring Container for Checkpoint Restoration (JSON)
DESCRIPTION: JSON configuration for restoring a checkpointed container. It specifies the container metadata and the path to the checkpoint archive instead of a container image.

LANGUAGE: json
CODE:
{
  "metadata": {
      "name": "counter"
  },
  "image":{
      "image": "/var/lib/kubelet/checkpoints/<checkpoint-archive>.tar"
  }
}

----------------------------------------

TITLE: Executing Kubernetes Secret Verification Command
DESCRIPTION: Demonstrates how to verify the existence of Kubernetes Secrets using kubectl command line tool and shows the expected output format.

LANGUAGE: shell
CODE:
kubectl get secrets

LANGUAGE: shell
CODE:
NAME                    TYPE                                  DATA   AGE
mysql-pass-c57bb4t7mf   Opaque                                1      9s

----------------------------------------

TITLE: Defining Kubernetes Labels Structure
DESCRIPTION: Example showing the basic structure of Kubernetes labels as key-value pairs used for identifying metadata in infrastructure.

LANGUAGE: json
CODE:
"labels": {
  "key1" : "value1",
  "key2" : "value2"
}

----------------------------------------

TITLE: Node Autoscaler Architecture Diagram
DESCRIPTION: Mermaid diagram showing the interactions between Node autoscaler, Kubernetes API, and Cloud Provider

LANGUAGE: mermaid
CODE:
graph TD
    na[Node autoscaler]
    k8s[Kubernetes]
    cp[Cloud Provider]

    k8s --> |get Pods/Nodes|na
    na --> |drain Nodes|k8s
    na --> |create/remove resources backing Nodes|cp
    cp --> |get resources backing Nodes|na

    classDef white_on_blue fill:#326ce5,stroke:#fff,stroke-width:4px,color:#fff;
    classDef blue_on_white fill:#fff,stroke:#bbb,stroke-width:2px,color:#326ce5;
    class na blue_on_white;
    class k8s,cp white_on_blue;

----------------------------------------

TITLE: Resetting IPVS tables
DESCRIPTION: Command to reset IPVS tables.

LANGUAGE: bash
CODE:
ipvsadm -C

----------------------------------------

TITLE: Uncordoning Kubernetes Node
DESCRIPTION: kubectl command to uncordon a Kubernetes node after maintenance, allowing Pods to be scheduled on it again.

LANGUAGE: bash
CODE:
kubectl uncordon kubernetes-node-pb41

----------------------------------------

TITLE: Debian Repository Configuration for Legacy Kubernetes Packages
DESCRIPTION: Example of a legacy Debian/Ubuntu repository configuration that needs to be migrated. This configuration points to the deprecated apt.kubernetes.io repository.

LANGUAGE: bash
CODE:
deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main

----------------------------------------

TITLE: Enabling RBAC Authorization in Kubernetes API Server
DESCRIPTION: Configure the Kubernetes API server to use Role-Based Access Control (RBAC) for authorization by setting the --authorization-mode flag.

LANGUAGE: bash
CODE:
--authorization-mode=RBAC

----------------------------------------

TITLE: CronJobSpec Configuration
DESCRIPTION: Specification fields for configuring a CronJob including schedule, job template and concurrency policy

LANGUAGE: yaml
CODE:
jobTemplate:
  # Job template spec
schedule: "*/1 * * * *"  # Cron format
timeZone: "Etc/UTC"  # Optional timezone
concurrencyPolicy: "Allow"  # Allow|Forbid|Replace
suspend: false  # Optional suspension

----------------------------------------

TITLE: Defining Production Pod in Kubernetes YAML
DESCRIPTION: This YAML snippet defines a Kubernetes Pod for a production environment using an Nginx container with the highest resource requests and limits among the three environments.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: prod-nginx
  labels:
    env: prod
spec:
  containers:
  - name: prod-nginx
    image: nginx
    resources:
      requests:
        memory: "2Gi"
        cpu: "2"
      limits:
        memory: "2Gi"
        cpu: "2"

----------------------------------------

TITLE: Defining a Pod with Subpath Volume Mount in Kubernetes YAML
DESCRIPTION: This YAML snippet defines a Kubernetes Pod that uses a subpath volume mount. It demonstrates how to specify a subpath for a volume mount in a container.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: my-pod
spec:
  containers:
  - name: my-container
    <snip>
    volumeMounts:
    - mountPath: /mnt/data
      name: my-volume
      subPath: dataset1
  volumes:
  - name: my-volume
    emptyDir: {}

----------------------------------------

TITLE: Displaying Kubernetes Deployment Information
DESCRIPTION: Shell commands to display information about the created Deployment and describe its details.

LANGUAGE: shell
CODE:
kubectl get deployments hello-world
kubectl describe deployments hello-world

----------------------------------------

TITLE: Displaying Kubernetes Deployment Information
DESCRIPTION: Shell commands to display information about the created Deployment and describe its details.

LANGUAGE: shell
CODE:
kubectl get deployments hello-world
kubectl describe deployments hello-world

----------------------------------------

TITLE: Uncordoning Kubernetes Node
DESCRIPTION: kubectl command to uncordon a Kubernetes node after maintenance, allowing Pods to be scheduled on it again.

LANGUAGE: bash
CODE:
kubectl uncordon kubernetes-node-pb41

----------------------------------------

TITLE: New Immutable ConfigMap
DESCRIPTION: YAML manifest for a new immutable ConfigMap to demonstrate updating configuration.

LANGUAGE: yaml
CODE:
{{% code_sample file="configmap/new-immutable-configmap.yaml" %}}

----------------------------------------

TITLE: PersistentVolumeClaim from VolumeSnapshot
DESCRIPTION: YAML configuration for creating a PersistentVolumeClaim from a VolumeSnapshot in Kubernetes.

LANGUAGE: yaml
CODE:
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
 name: postgres-pv-claim
 namespace: sandbox01
spec:
 dataSource:
   kind: VolumeSnapshot
   name: postgresql-orders-db-snap
   apiGroup: snapshot.storage.k8s.io
 accessModes:
   - ReadWriteOnce
 resources:
   requests:
     storage: 21Gi

----------------------------------------

TITLE: Defining AllowDNSOnlyNodeCSR Feature Gate in YAML
DESCRIPTION: YAML configuration defining the AllowDNSOnlyNodeCSR feature gate properties, including its deprecation stage and version information.

LANGUAGE: yaml
CODE:
title: AllowDNSOnlyNodeCSR
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: deprecated
    defaultValue: false
    fromVersion: "1.31"

----------------------------------------

TITLE: Job Configuration with Backoff Limit Per Index
DESCRIPTION: Complete YAML configuration for an Indexed Job implementing backoffLimitPerIndex feature.

LANGUAGE: yaml
CODE:
apiVersion: batch/v1
kind: Job
metadata:
  name: job-backoff-limit-per-index-execute-all
spec:
  completions: 8
  parallelism: 2
  completionMode: Indexed
  backoffLimitPerIndex: 1
  template:
    spec:
      restartPolicy: Never
      containers:
      - name: example
        image: python
        command:
        - python3
        - -c
        - |
          import os, sys, time
          id = int(os.environ.get("JOB_COMPLETION_INDEX"))
          if id == 1 or id == 2:
            sys.exit(1)
          time.sleep(1)

----------------------------------------

TITLE: Blog Post Front Matter Template
DESCRIPTION: YAML front matter template for Kubernetes blog posts, including title, date, draft status, and SEO-friendly slug.

LANGUAGE: yaml
CODE:
---
layout: blog
title: "{{ replace .Name "-" " " | title }}"
date: {{ .Date }}
draft: true
slug: <seo-friendly-version-of-title-separated-by-dashes>
---

----------------------------------------

TITLE: Counter Pod YAML Definition
DESCRIPTION: YAML configuration for a simple pod that generates log output by counting and printing timestamps

LANGUAGE: yaml
CODE:
apiVersion : v1
kind : Pod
metadata :
  name : counter
spec :
  containers :
 - name : count
    image : ubuntu:14.04
    args : [bash, -c, 'for ((i = 0; ; i++)); do echo "$i: $(date)"; sleep 1; done']

----------------------------------------

TITLE: Querying SRV Records with kube-dns
DESCRIPTION: Example of querying SRV records for a headless service using kube-dns, showing the default behavior of random endpoint DNS names.

LANGUAGE: dns
CODE:
dnstools# host -t srv headless
headless.default.svc.cluster.local has SRV record 10 33 0 6234396237313665.headless.default.svc.cluster.local.
headless.default.svc.cluster.local has SRV record 10 33 0 6662363165353239.headless.default.svc.cluster.local.
headless.default.svc.cluster.local has SRV record 10 33 0 6338633437303230.headless.default.svc.cluster.local.

----------------------------------------

TITLE: Calling Kubernetes Eviction API using curl
DESCRIPTION: This bash command demonstrates how to call the Kubernetes Eviction API using curl. It sends a POST request to the API endpoint with the eviction JSON data.

LANGUAGE: bash
CODE:
curl -v -H 'Content-type: application/json' https://your-cluster-api-endpoint.example/api/v1/namespaces/default/pods/quux/eviction -d @eviction.json

----------------------------------------

TITLE: Pod Level Resources Example
DESCRIPTION: Example YAML showing how to define Pod-level resource requests and limits. The first container has explicit resource specifications while the second container shares Pod resources.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: pod-level-resources-demo
spec:
  resources:
    requests:
      cpu: "1"
      memory: "100Mi"
    limits:
      cpu: "1"
      memory: "200Mi"
  containers:
  - name: pod-resources-demo-ctr-1
    image: k8s.gcr.io/pause:2.0
    resources:
      requests:
        cpu: "500m"
        memory: "50Mi"
      limits: 
        cpu: "750m"
        memory: "100Mi"
  - name: pod-resources-demo-ctr-2
    image: k8s.gcr.io/pause:2.0

----------------------------------------

TITLE: Draining and deleting a node
DESCRIPTION: Commands to drain and delete a node from the cluster.

LANGUAGE: bash
CODE:
kubectl drain <node name> --delete-local-data --force --ignore-daemonsets
kubectl delete node <node name>

----------------------------------------

TITLE: Defining Container Image Signature Policy in JSON
DESCRIPTION: This JSON snippet defines a policy for CRI-O that only allows signed images from 'quay.io/crio/signed' for any tag or digest. It specifies the OIDC issuer, subject email, and public keys for Fulcio and Rekor.

LANGUAGE: json
CODE:
{
  "default": [{ "type": "reject" }],
  "transports": {
    "docker": {
      "quay.io/crio/signed": [
        {
          "type": "sigstoreSigned",
          "signedIdentity": { "type": "matchRepository" },
          "fulcio": {
            "oidcIssuer": "https://github.com/login/oauth",
            "subjectEmail": "sgrunert@redhat.com",
            "caData": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUI5ekNDQVh5Z0F3SUJBZ0lVQUxaTkFQRmR4SFB3amVEbG9Ed3lZQ2hBTy80d0NnWUlLb1pJemowRUF3TXcKS2pFVk1CTUdBMVVFQ2hNTWMybG5jM1J2Y21VdVpHVjJNUkV3RHdZRFZRUURFd2h6YVdkemRHOXlaVEFlRncweQpNVEV3TURjeE16VTJOVGxhRncwek1URXdNRFV4TXpVMk5UaGFNQ294RlRBVEJnTlZCQW9UREhOcFozTjBiM0psCkxtUmxkakVSTUE4R0ExVUVBeE1JYzJsbmMzUnZjbVV3ZGpBUUJnY3Foa2pPUFFJQkJnVXJnUVFBSWdOaUFBVDcKWGVGVDRyYjNQUUd3UzRJYWp0TGszL09sbnBnYW5nYUJjbFlwc1lCcjVpKzR5bkIwN2NlYjNMUDBPSU9aZHhleApYNjljNWlWdXlKUlErSHowNXlpK1VGM3VCV0FsSHBpUzVzaDArSDJHSEU3U1hyazFFQzVtMVRyMTlMOWdnOTJqCll6QmhNQTRHQTFVZER3RUIvd1FFQXdJQkJqQVBCZ05WSFJNQkFmOEVCVEFEQVFIL01CMEdBMVVkRGdRV0JCUlkKd0I1ZmtVV2xacWw2ekpDaGt5TFFLc1hGK2pBZkJnTlZIU01FR0RBV2dCUll3QjVma1VXbFpxbDZ6SkNoa3lMUQpLc1hGK2pBS0JnZ3Foa2pPUFFRREF3TnBBREJtQWpFQWoxbkhlWFpwKzEzTldCTmErRURzRFA4RzFXV2cxdENNCldQL1dIUHFwYVZvMGpoc3dlTkZaZ1NzMGVFN3dZSTRxQWpFQTJXQjlvdDk4c0lrb0YzdlpZZGQzL1Z0V0I1YjkKVE5NZWE3SXgvc3RKNVRmY0xMZUFCTEU0Qk5KT3NRNHZuQkhKCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0="
          },
          "rekorPublicKeyData": "LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUZrd0V3WUhLb1pJemowQ0FRWUlLb1pJemowREFRY0RRZ0FFMkcyWSsydGFiZFRWNUJjR2lCSXgwYTlmQUZ3cgprQmJtTFNHdGtzNEwzcVg2eVlZMHp1ZkJuaEM4VXIvaXk1NUdoV1AvOUEvYlkyTGhDMzBNOStSWXR3PT0KLS0tLS1FTkQgUFVCTElDIEtFWS0tLS0tCg=="
        }
      ]
    }
  }
}

----------------------------------------

TITLE: Querying SRV Records with kube-dns
DESCRIPTION: Example of querying SRV records for a headless service using kube-dns, showing the default behavior of random endpoint DNS names.

LANGUAGE: dns
CODE:
dnstools# host -t srv headless
headless.default.svc.cluster.local has SRV record 10 33 0 6234396237313665.headless.default.svc.cluster.local.
headless.default.svc.cluster.local has SRV record 10 33 0 6662363165353239.headless.default.svc.cluster.local.
headless.default.svc.cluster.local has SRV record 10 33 0 6338633437303230.headless.default.svc.cluster.local.

----------------------------------------

TITLE: NetworkPolicy Import Path Go
DESCRIPTION: Import path for NetworkPolicy types in Go code

LANGUAGE: go
CODE:
import "k8s.io/api/networking/v1"

----------------------------------------

TITLE: Defining Development Pod in Kubernetes YAML
DESCRIPTION: This YAML snippet defines a Kubernetes Pod for a development environment using an Nginx container with specific resource requests and limits.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: dev-nginx
  labels:
    env: dev
spec:
  containers:
  - name: dev-nginx
    image: nginx
    resources:
      requests:
        memory: "256Mi"
        cpu: "0.2"
      limits:
        memory: ".5Gi"
        cpu: "0.5"

----------------------------------------

TITLE: Automatic Redeployment with Draft
DESCRIPTION: Draft detects local changes and automatically rebuilds and redeploys the application to Kubernetes.

LANGUAGE: bash
CODE:
--> Building Dockerfile
Step 1 : FROM python:onbuild
...
Successfully built 9c90b0445146
--> Pushing docker.io/microsoft/tufted-lamb:f031eb675112e2c942369a10815850a0b8bf190e
The push refers to a repository [docker.io/microsoft/tufted-lamb]
...
--> Deploying to Kubernetes
--> Status: DEPLOYED
--> Notes:
     1. Get the application URL by running these commands:
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get svc -w tufted-lamb-tufted-lamb'
  export SERVICE_IP=$(kubectl get svc --namespace default tufted-lamb-tufted-lamb -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
  echo http://$SERVICE_IP:80

----------------------------------------

TITLE: Configuring CRI-O to allow seccomp profile annotations
DESCRIPTION: This TOML configuration snippet for CRI-O enables the use of seccomp profile annotations by adding them to the allowed_annotations array.

LANGUAGE: toml
CODE:
[crio.runtime]
default_runtime = "crun"

[crio.runtime.runtimes.crun]
allowed_annotations = [
    "seccomp-profile.kubernetes.cri-o.io",
]

----------------------------------------

TITLE: Creating Job Manifests from Template
DESCRIPTION: Shell script to create multiple Job manifests by replacing placeholders using sed.

LANGUAGE: shell
CODE:
mkdir ./jobs
for i in apple banana cherry
do
  cat job-tmpl.yaml | sed "s/\$ITEM/$i/" > ./jobs/job-$i.yaml
done

----------------------------------------

TITLE: ImageReviewSpec Structure - Kubernetes v1alpha1
DESCRIPTION: Defines the specification structure for image review requests, including container list, annotations matching specific patterns, and namespace information.

LANGUAGE: yaml
CODE:
containers:
  - image: string
annotations:
  # Key-value pairs matching *.image-policy.k8s.io/*
namespace: string

----------------------------------------

TITLE: Sample Docker Compose Configuration
DESCRIPTION: Example Docker Compose file defining Redis leader-replica setup with a web service

LANGUAGE: yaml
CODE:
services:

  redis-leader:
    container_name: redis-leader
    image: redis
    ports:
      - "6379"

  redis-replica:
    container_name: redis-replica
    image: redis
    ports:
      - "6379"
    command: redis-server --replicaof redis-leader 6379 --dir /tmp

  web:
    container_name: web
    image: quay.io/kompose/web
    ports:
      - "8080:8080"
    environment:
      - GET_HOSTS_FROM=dns
    labels:
      kompose.service.type: LoadBalancer

----------------------------------------

TITLE: EndpointSliceList Struct Definition
DESCRIPTION: Go struct definition for a list of EndpointSlice objects.

LANGUAGE: go
CODE:
type EndpointSliceList struct {
	metadata metav1.ListMeta
	items []EndpointSlice
}

----------------------------------------

TITLE: Viewing CPU Manager State With Strict CPU Reservation
DESCRIPTION: This console output shows the content of the CPU Manager state file when strict-cpu-reservation is set to true. It displays a reduced CPU set available for allocation, excluding the reserved system CPUs.

LANGUAGE: console
CODE:
# cat /var/lib/kubelet/cpu_manager_state
{"policyName":"static","defaultCpuSet":"2-15,17-31,34-47,49-63","checksum":4141502832}

----------------------------------------

TITLE: Defining Markdown Frontmatter
DESCRIPTION: YAML frontmatter block defining metadata for a documentation page, including title and weight for ordering.

LANGUAGE: markdown
CODE:
---
title: "Overview"
weight: 20
---

----------------------------------------

TITLE: Setting Headless YAML Configuration
DESCRIPTION: Basic YAML frontmatter configuration that sets the headless property to true. This is commonly used in static site generators to indicate a page should not have its own URL/rendering.

LANGUAGE: yaml
CODE:
---
headless: true
---

----------------------------------------

TITLE: Downloading Kubernetes Configuration Files
DESCRIPTION: Downloads the MySQL and WordPress deployment configuration files from the Kubernetes examples repository.

LANGUAGE: shell
CODE:
curl -LO https://k8s.io/examples/application/wordpress/mysql-deployment.yaml
curl -LO https://k8s.io/examples/application/wordpress/wordpress-deployment.yaml

----------------------------------------

TITLE: Definiendo un Job en YAML
DESCRIPTION: Ejemplo de configuración YAML para un Job que calcula los primeros 2000 decimales de pi

LANGUAGE: yaml
CODE:
{{% codenew file="controllers/job.yaml" %}}

----------------------------------------

TITLE: Initializing the control-plane node
DESCRIPTION: Command to initialize the Kubernetes control-plane on a node using kubeadm.

LANGUAGE: bash
CODE:
kubeadm init <args>

----------------------------------------

TITLE: KMS v2 Decrypt Request Flow Diagram
DESCRIPTION: Mermaid sequence diagram illustrating the decryption process including cache handling and interaction with external KMS.

LANGUAGE: mermaid
CODE:
%%{init:{"theme":"neutral", "sequence": {"mirrorActors":true}, "themeVariables": {"actorBkg":"royalblue","actorTextColor":"white"}}}%%

sequenceDiagram
    participant user
    participant kube_api_server
    participant kms_plugin
    participant external_kms
    participant etcd
    user->>kube_api_server: get/list resource that's encrypted
    kube_api_server->>etcd: get encrypted resource
    etcd->>kube_api_server: encrypted resource
    alt Encrypted DEK not in cache
        kube_api_server->>kms_plugin: decrypt request
        kms_plugin->>external_kms: decrypt DEK with remote KEK
        external_kms->>kms_plugin: decrypted DEK
        kms_plugin->>kube_api_server: return decrypted DEK
        kube_api_server->>kube_api_server: cache decrypted DEK
    end
    kube_api_server->>kube_api_server: decrypt resource with DEK
    kube_api_server->>user: return decrypted resource

----------------------------------------

TITLE: Filtering Pods by Namespace with crictl
DESCRIPTION: Example of using crictl pods command with namespace filtering to show pods from specific Kubernetes namespaces.

LANGUAGE: bash
CODE:
crictl pods --namespace

----------------------------------------

TITLE: Defining KubeletConfiguration in Go
DESCRIPTION: Defines the KubeletConfiguration struct which contains the configuration options for the Kubelet.

LANGUAGE: go
CODE:
type KubeletConfiguration struct {
  metav1.TypeMeta

  EnableServer bool
  StaticPodPath string
  SyncFrequency metav1.Duration
  FileCheckFrequency metav1.Duration
  HTTPCheckFrequency metav1.Duration
  StaticPodURL string
  StaticPodURLHeader map[string][]string
  Address string
  Port int32
  ReadOnlyPort int32
  // ... additional fields omitted for brevity
}

----------------------------------------

TITLE: Displaying Deprecated Storage Drivers Table in Markdown
DESCRIPTION: This markdown table shows the storage drivers that will not have CSI migration support, including their deprecation and code removal dates.

LANGUAGE: markdown
CODE:
| Driver    | Deprecated | Code Removal  |
| --------- | ---------- | ------------- |
| Flocker   | 1.22       | 1.25          |
| GlusterFS | 1.25       | 1.26 (Target) |
| Quobyte   | 1.22       | 1.25          |
| ScaleIO   | 1.16       | 1.22          |
| StorageOS | 1.22       | 1.25          |

----------------------------------------

TITLE: Adding Kubernetes APT Repository for Debian/Ubuntu
DESCRIPTION: This snippet shows how to add the new Kubernetes APT repository for Debian-based systems. It replaces the old Google-hosted repository with the community-owned one at pkgs.k8s.io.

LANGUAGE: shell
CODE:
echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /" | sudo tee /etc/apt/sources.list.d/kubernetes.list

----------------------------------------

TITLE: Configuring NFS StorageClass
DESCRIPTION: Example configuration for an NFS StorageClass using an external provisioner, specifying server, path, and read-only options.

LANGUAGE: yaml
CODE:
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: example-nfs
provisioner: example.com/external-nfs
parameters:
  server: nfs-server.example.com
  path: /share
  readOnly: "false"

----------------------------------------

TITLE: Bearer Token Authentication Example
DESCRIPTION: Example showing how to authenticate using a bearer token in an HTTP request

LANGUAGE: http
CODE:
Authorization: Bearer 31ada4fd-adec-460c-809a-9e56ceb75269

----------------------------------------

TITLE: External Container Commands
DESCRIPTION: kubectl exec commands for running individual commands in containers without shell access.

LANGUAGE: shell
CODE:
kubectl exec shell-demo -- env
kubectl exec shell-demo -- ps aux
kubectl exec shell-demo -- ls /
kubectl exec shell-demo -- cat /proc/1/mounts

----------------------------------------

TITLE: Defining RBAC Rule for Ingress Creation in Kubernetes
DESCRIPTION: This YAML snippet shows the RBAC rule required to create an Ingress resource. It demonstrates how to map API groups, resources, and verbs to specific Kubernetes operations.

LANGUAGE: yaml
CODE:
rules:
- apiGroups: ["extensions"] # "apiVersion" without version
  resources: ["ingresses"]  # Plural of "kind"
  verbs: ["create"]         # "POST" maps to "create"

----------------------------------------

TITLE: Defining EndpointSliceTerminatingCondition Feature Gate Configuration
DESCRIPTION: YAML configuration defining the feature gate stages and properties for EndpointSliceTerminatingCondition. Shows progression through alpha (1.20-1.21), beta (1.22-1.25), and stable (1.26-1.27) stages before removal.

LANGUAGE: yaml
CODE:
title: EndpointSliceTerminatingCondition
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.20"
    toVersion: "1.21"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.22"
    toVersion: "1.25"    
  - stage: stable
    defaultValue: true
    fromVersion: "1.26"
    toVersion: "1.27"    

removed: true

----------------------------------------

TITLE: Defining EndpointSliceTerminatingCondition Feature Gate Configuration
DESCRIPTION: YAML configuration defining the feature gate stages and properties for EndpointSliceTerminatingCondition. Shows progression through alpha (1.20-1.21), beta (1.22-1.25), and stable (1.26-1.27) stages before removal.

LANGUAGE: yaml
CODE:
title: EndpointSliceTerminatingCondition
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.20"
    toVersion: "1.21"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.22"
    toVersion: "1.25"    
  - stage: stable
    defaultValue: true
    fromVersion: "1.26"
    toVersion: "1.27"    

removed: true

----------------------------------------

TITLE: Defining DebuggingConfiguration in Go
DESCRIPTION: DebuggingConfiguration holds configuration for Debugging related features, including enabling profiling and contention profiling.

LANGUAGE: go
CODE:
type DebuggingConfiguration struct {
    EnableProfiling             bool
    EnableContentionProfiling   bool
}

----------------------------------------

TITLE: Defining a ResourceSlice in YAML
DESCRIPTION: Example YAML definition for a ResourceSlice resource. It specifies the API version, kind, metadata, and spec fields.

LANGUAGE: yaml
CODE:
apiVersion: resource.k8s.io/v1beta1
kind: ResourceSlice
metadata:
  name: example-resourceslice
spec:
  driver: example.com/driver
  pool:
    generation: 1
    name: example-pool
    resourceSliceCount: 1
  nodeName: example-node
  devices:
    - name: device1
      basic:
        attributes:
          key1:
            string: "value1"
        capacity:
          memory: "1Gi"

----------------------------------------

TITLE: Defining Guestbook Application in Docker Compose YAML
DESCRIPTION: This YAML snippet defines a multi-container Guestbook application using Docker Compose v2 format. It specifies three services: redis-master, redis-slave, and frontend, along with their respective images, ports, and environment variables.

LANGUAGE: yaml
CODE:
version: "2"

services:

  redis-master:
    image: gcr.io/google\_containers/redis:e2e
    ports:
      - "6379"
  redis-slave:
    image: gcr.io/google\_samples/gb-redisslave:v1
    ports:
      - "6379"
    environment:
      - GET\_HOSTS\_FROM=dns
  frontend:
    image: gcr.io/google-samples/gb-frontend:v4
    ports:
      - "80:80"
    environment:
      - GET\_HOSTS\_FROM=dns

----------------------------------------

TITLE: Configuring Simple Fanout Ingress
DESCRIPTION: An Ingress that routes traffic to different services based on the URL path.

LANGUAGE: yaml
CODE:
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: simple-fanout-example
spec:
  rules:
  - host: foo.bar.com
    http:
      paths:
      - path: /foo
        pathType: Prefix
        backend:
          service:
            name: service1
            port:
              number: 4200
      - path: /bar
        pathType: Prefix
        backend:
          service:
            name: service2
            port:
              number: 8080

----------------------------------------

TITLE: Checking Deployment Status
DESCRIPTION: Command to check the status of a Deployment using kubectl.

LANGUAGE: shell
CODE:
kubectl get deployments

----------------------------------------

TITLE: Applying ZooKeeper Manifest with kubectl
DESCRIPTION: kubectl command to apply the ZooKeeper manifest YAML file to create the necessary Kubernetes resources.

LANGUAGE: bash
CODE:
kubectl apply -f https://k8s.io/examples/application/zookeeper/zookeeper.yaml

----------------------------------------

TITLE: Définition d'un PersistentVolume
DESCRIPTION: Exemple de définition YAML d'un objet PersistentVolume

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv0003
spec:
  capacity:
    storage: 5Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Recycle
  storageClassName: slow
  mountOptions:
    - hard
    - nfsvers=4.1
  nfs:
    path: /tmp
    server: 172.17.0.2

----------------------------------------

TITLE: Accessing Specific Log Files from /var/log
DESCRIPTION: Command to retrieve specific log files from the /var/log directory on Linux nodes using the Node Log Query feature.

LANGUAGE: shell
CODE:
kubectl get --raw "/api/v1/nodes/<insert-node-name-here>/proxy/logs/?query=/<insert-log-file-name-here>"

----------------------------------------

TITLE: Signing Container Image Digest with GPG
DESCRIPTION: This command signs the container image digest (stored in Image-digest.txt) using the QA engineer's GPG key. The signature is saved to signature.gpg.

LANGUAGE: bash
CODE:
gpg -u qa\_bob@example.com \  
  --armor \  
  --clearsign \  
  --output=signature.gpg \  
  Image-digest.txt

----------------------------------------

TITLE: Defining DebuggingConfiguration in Go
DESCRIPTION: DebuggingConfiguration holds configuration for Debugging related features, including enabling profiling and contention profiling.

LANGUAGE: go
CODE:
type DebuggingConfiguration struct {
    EnableProfiling             bool
    EnableContentionProfiling   bool
}

----------------------------------------

TITLE: Enabling Chroot in Helm Values Configuration
DESCRIPTION: Helm values.yaml configuration to enable chroot functionality when deploying Ingress-NGINX controller using the official Helm chart.

LANGUAGE: yaml
CODE:
controller:
  image:
    chroot: true

----------------------------------------

TITLE: Training Machine Learning Model with TensorFlow
DESCRIPTION: Python script to train a machine learning model using TensorFlow to classify pull request types based on release notes.

LANGUAGE: bash
CODE:
> ./main train
INFO | Using already extracted data from data/data.pickle
INFO | Loading pickle dataset
INFO | Parsed 34380 issues and 55832 pull requests (90212 items)
INFO | Training for label 'kind/bug'
INFO | 6980 items selected
INFO | Using 5584 training and 1395 testing texts
INFO | Number of classes: 2
INFO | Vocabulary len: 51772
INFO | Wrote features to file data/features.json
INFO | Using units: 1
INFO | Using activation function: sigmoid
INFO | Created model with 2 layers and 64 units
INFO | Compiling model
INFO | Starting training
Train on 5584 samples, validate on 1395 samples
Epoch 1/1000
5584/5584 - 3s - loss: 0.6895 - acc: 0.6789 - val_loss: 0.6856 - val_acc: 0.6860
Epoch 2/1000
5584/5584 - 2s - loss: 0.6822 - acc: 0.6827 - val_loss: 0.6782 - val_acc: 0.6860
Epoch 3/1000
…
Epoch 68/1000
5584/5584 - 2s - loss: 0.2587 - acc: 0.9257 - val_loss: 0.4847 - val_acc: 0.7728
INFO | Confusion matrix:
[[920  32]
 [291 152]]
INFO | Confusion matrix normalized:
[[0.966 0.034]
 [0.657 0.343]]
INFO | Saving model to file data/model.h5
INFO | Validation accuracy: 0.7727598547935486, loss: 0.48470408514836355

----------------------------------------

TITLE: Defining EndpointSliceTerminatingCondition Feature Gate Configuration
DESCRIPTION: YAML configuration defining the feature gate stages and properties for EndpointSliceTerminatingCondition. Shows progression through alpha (1.20-1.21), beta (1.22-1.25), and stable (1.26-1.27) stages before removal.

LANGUAGE: yaml
CODE:
title: EndpointSliceTerminatingCondition
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.20"
    toVersion: "1.21"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.22"
    toVersion: "1.25"    
  - stage: stable
    defaultValue: true
    fromVersion: "1.26"
    toVersion: "1.27"    

removed: true

----------------------------------------

TITLE: Draining Kubernetes Node
DESCRIPTION: kubectl command to cordon and drain a Kubernetes node for maintenance, respecting Pod disruption budgets.

LANGUAGE: bash
CODE:
kubectl drain $(kubectl get pod zk-0 --template {{.spec.nodeName}}) --ignore-daemonsets --force --delete-emptydir-data

----------------------------------------

TITLE: Comparing L10N Branches Usage - Python
DESCRIPTION: Help output for diff_l10n_branches.py script that generates reports of outdated localized content

LANGUAGE: bash
CODE:
$ scripts/diff_l10n_branches.py --help
Usage: diff_l10n_branches.py [OPTIONS] L10N_LANG L_COMMIT R_COMMIT

  This script generates a report of outdated contents in `content/<l10n-
  lang>` directory by comparing two l10n team milestone branches.

  L10n team owners can open a GitHub issue with the report generated by this
  script when they start a new team milestone.

  ex: `scripts/diff_l10n_branches.py ko dev-1.15-ko.3 dev-1.15-ko.4`

Options:
  --src-lang TEXT  Source language
  --help           Show this message and exit.

----------------------------------------

TITLE: Defining the ListPodResourcesResponse Message in Protocol Buffers
DESCRIPTION: This Protocol Buffers message definition outlines the structure of the response returned by the List function of the PodResourcesLister service in Kubernetes. It includes details about resources allocated to pods and containers.

LANGUAGE: Protocol Buffers
CODE:
// ListPodResourcesResponse is the response returned by List function
message ListPodResourcesResponse {
    repeated PodResources pod_resources = 1;
}

// PodResources contains information about the node resources assigned to a pod
message PodResources {
    string name = 1;
    string namespace = 2;
    repeated ContainerResources containers = 3;
}

// ContainerResources contains information about the resources assigned to a container
message ContainerResources {
    string name = 1;
    repeated ContainerDevices devices = 2;
    repeated int64 cpu_ids = 3;
    repeated ContainerMemory memory = 4;
    repeated DynamicResource dynamic_resources = 5;
}

// ContainerMemory contains information about memory and hugepages assigned to a container
message ContainerMemory {
    string memory_type = 1;
    uint64 size = 2;
    TopologyInfo topology = 3;
}

// Topology describes hardware topology of the resource
message TopologyInfo {
        repeated NUMANode nodes = 1;
}

// NUMA representation of NUMA node
message NUMANode {
        int64 ID = 1;
}

// ContainerDevices contains information about the devices assigned to a container
message ContainerDevices {
    string resource_name = 1;
    repeated string device_ids = 2;
    TopologyInfo topology = 3;
}

// DynamicResource contains information about the devices assigned to a container by Dynamic Resource Allocation
message DynamicResource {
    string class_name = 1;
    string claim_name = 2;
    string claim_namespace = 3;
    repeated ClaimResource claim_resources = 4;
}

// ClaimResource contains per-plugin resource information
message ClaimResource {
    repeated CDIDevice cdi_devices = 1 [(gogoproto.customname) = "CDIDevices"];
}

// CDIDevice specifies a CDI device information
message CDIDevice {
    // Fully qualified CDI device name
    // for example: vendor.com/gpu=gpudevice1
    // see more details in the CDI specification:
    // https://github.com/container-orchestrated-devices/container-device-interface/blob/main/SPEC.md
    string name = 1;
}

----------------------------------------

TITLE: Job con timeout
DESCRIPTION: Ejemplo de configuración YAML para un Job con un tiempo límite de ejecución

LANGUAGE: yaml
CODE:
apiVersion: batch/v1
kind: Job
metadata:
  name: pi-with-timeout
spec:
  backoffLimit: 5
  activeDeadlineSeconds: 100
  template:
    spec:
      containers:
      - name: pi
        image: perl
        command: ["perl",  "-Mbignum=bpi", "-wle", "print bpi(2000)"]
      restartPolicy: Never

----------------------------------------

TITLE: YAML Frontmatter Configuration
DESCRIPTION: Basic YAML frontmatter configuration indicating a headless page structure. This is commonly used in static site generators to define metadata for pages that should not generate their own HTML output.

LANGUAGE: yaml
CODE:
---
headless: true
---

----------------------------------------

TITLE: Defining ZooKeeper Readiness Probe
DESCRIPTION: YAML snippet defining the readiness probe for ZooKeeper Pods in the StatefulSet.

LANGUAGE: yaml
CODE:
  readinessProbe:
    exec:
      command:
      - sh
      - -c
      - "zookeeper-ready 2181"
    initialDelaySeconds: 15
    timeoutSeconds: 5

----------------------------------------

TITLE: Including CNCF Code of Conduct in Markdown
DESCRIPTION: This snippet uses a Hugo shortcode to include the content of the CNCF Code of Conduct from a separate Markdown file.

LANGUAGE: markdown
CODE:
{{< include "static/cncf-code-of-conduct.md" >}}

----------------------------------------

TITLE: Installing community-images Kubectl Plugin
DESCRIPTION: This command installs the community-images kubectl plugin using krew. The plugin can be used to scan and report any images using the k8s.gcr.io endpoint in a Kubernetes cluster.

LANGUAGE: bash
CODE:
kubectl krew install community-images

----------------------------------------

TITLE: Deploying BookInfo with Istio Ingress Configuration
DESCRIPTION: Kubernetes Ingress resource configuration for the BookInfo application with Istio annotations, defining HTTP paths for the productpage service.

LANGUAGE: yaml
CODE:
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
 name: bookinfo
 annotations:
   kubernetes.io/ingress.class: "istio"
spec:
 rules:
 - http:
     paths:
     - path: /productpage
       backend:
         serviceName: productpage
         servicePort: 9080
     - path: /login
       backend:
         serviceName: productpage
         servicePort: 9080
     - path: /logout
       backend:
         serviceName: productpage
         servicePort: 9080

----------------------------------------

TITLE: ImageReview Resource Definition - Kubernetes v1alpha1
DESCRIPTION: Defines the ImageReview resource type that checks if pod images are allowed. Includes required fields for apiVersion, kind, metadata, spec, and status fields.

LANGUAGE: yaml
CODE:
apiVersion: imagepolicy.k8s.io/v1alpha1
kind: ImageReview
metadata:
  # Standard object metadata
spec:
  containers:
    - image: string  # image:tag or image@SHA:012345679abcdef
  annotations:
    # Matching pattern *.image-policy.k8s.io/*
  namespace: string
status:
  allowed: boolean
  reason: string
  auditAnnotations:
    # Key-value pairs for audit purposes

----------------------------------------

TITLE: Adding Contribution Instructions Comment in HTML
DESCRIPTION: HTML comment block containing a link to the documentation for contributing blog posts and case studies to the Kubernetes website. This provides guidance for potential contributors.

LANGUAGE: html
CODE:
{{< comment >}}

For information about contributing to the blog, see
https://kubernetes.io/docs/contribute/new-content/blogs-case-studies/#write-a-blog-post

{{< /comment >}}

----------------------------------------

TITLE: Pushing a seccomp profile as an OCI artifact using ORAS
DESCRIPTION: These shell commands create and push a seccomp profile as an OCI artifact to a container registry using ORAS, with the required media type for CRI-O compatibility.

LANGUAGE: shell
CODE:
echo "{}" > config.json
oras push \
    --config config.json:application/vnd.cncf.seccomp-profile.config.v1+json \
     quay.io/crio/seccomp:v2 seccomp.json

----------------------------------------

TITLE: Defining a Kubernetes Service with Static ClusterIP
DESCRIPTION: This YAML snippet demonstrates how to create a Kubernetes Service (kube-dns) with a statically assigned ClusterIP. It specifies the service name, namespace, labels, ports, and the desired ClusterIP address.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Service
metadata:
  labels:
    k8s-app: kube-dns
    kubernetes.io/cluster-service: "true"
    kubernetes.io/name: CoreDNS
  name: kube-dns
  namespace: kube-system
spec:
  clusterIP: 10.96.0.10
  ports:
  - name: dns
    port: 53
    protocol: UDP
    targetPort: 53
  - name: dns-tcp
    port: 53
    protocol: TCP
    targetPort: 53
  selector:
    k8s-app: kube-dns
  type: ClusterIP

----------------------------------------

TITLE: Patching Kafka StatefulSet CPU Resource in Kubernetes
DESCRIPTION: Bash command to patch a Kafka StatefulSet to modify the CPU resource request using kubectl patch.

LANGUAGE: bash
CODE:
kubectl patch sts kafka --type='json' -p='[{"op": "replace", "path": "/spec/template/spec/containers/0/resources/requests/cpu", "value":"250m"}]'

----------------------------------------

TITLE: Importing the admissionregistration/v1 API package
DESCRIPTION: Import statement for using the ValidatingAdmissionPolicy API in Go code

LANGUAGE: go
CODE:
import "k8s.io/api/admissionregistration/v1"

----------------------------------------

TITLE: Configuring CNI Plugin with HostPort Support
DESCRIPTION: JSON configuration for a CNI plugin setup that enables hostPort support using Calico networking and the portmap plugin. This configuration demonstrates how to enable port mapping capabilities in the CNI configuration.

LANGUAGE: json
CODE:
{
  "name": "k8s-pod-network",
  "cniVersion": "0.4.0",
  "plugins": [
    {
      "type": "calico",
      "log_level": "info",
      "datastore_type": "kubernetes",
      "nodename": "127.0.0.1",
      "ipam": {
        "type": "host-local",
        "subnet": "usePodCidr"
      },
      "policy": {
        "type": "k8s"
      },
      "kubernetes": {
        "kubeconfig": "/etc/cni/net.d/calico-kubeconfig"
      }
    },
    {
      "type": "portmap",
      "capabilities": {"portMappings": true},
      "externalSetMarkChain": "KUBE-MARK-MASQ"
    }
  ]
}

----------------------------------------

TITLE: kubectl 플러그인 예시
DESCRIPTION: 간단한 kubectl 플러그인을 작성하고 사용하는 예시를 보여준다.

LANGUAGE: shell
CODE:
cat ./kubectl-hello
#!/bin/sh

# 이 플러그인은 "hello world"라는 단어를 출력한다
echo "hello world"

LANGUAGE: shell
CODE:
chmod a+x ./kubectl-hello

sudo mv ./kubectl-hello /usr/local/bin
sudo chown root:root /usr/local/bin

kubectl hello

----------------------------------------

TITLE: Définition d'un PVC pour un volume de bloc brut
DESCRIPTION: Exemple de définition d'un PersistentVolumeClaim pour un volume de bloc brut

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: block-pvc
spec:
  accessModes:
    - ReadWriteOnce
  volumeMode: Block
  resources:
    requests:
      storage: 10Gi

----------------------------------------

TITLE: Defining Headless Page Metadata in YAML for Kubernetes Documentation
DESCRIPTION: This YAML snippet defines the front matter for a Kubernetes documentation page. It sets the 'headless' property to true, indicating that this page should not be rendered as a standalone page in the documentation site.

LANGUAGE: yaml
CODE:
---
headless: true
---

----------------------------------------

TITLE: Defining Preproduction PriorityClass in Kubernetes YAML
DESCRIPTION: This YAML snippet defines a PriorityClass for preproduction pods with a priority value of 2000000 and a description indicating its intended use.

LANGUAGE: yaml
CODE:
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: preprod-pc
value: 2000000
globalDefault: false
description: >-
  (Optional) This priority class should only be used for all preprod pods.

----------------------------------------

TITLE: Viewing Draft Configuration File
DESCRIPTION: Display the contents of the draft.toml file, which contains basic configuration for the application deployment.

LANGUAGE: bash
CODE:
$ cat draft.toml
[environments]
  [environments.development]
    name = "tufted-lamb"
    namespace = "default"
    watch = true
    watch_delay = 2

----------------------------------------

TITLE: Example CEL Device Selector Expression
DESCRIPTION: Example showing how to use CEL expressions to select devices based on driver and attributes

LANGUAGE: json
CODE:
{
  "device.driver": "dra.example.com",
  "device.attributes[\"dra.example.com\"].model": "value",
  "device.attributes[\"ext.example.com\"].family": "value",
  "device.capacity[\"dra.example.com\"].modules": "value"
}

----------------------------------------

TITLE: Examining Kubernetes EndpointSlice Details
DESCRIPTION: This shell command retrieves detailed JSON output for the EndpointSlices associated with the nginx-service.

LANGUAGE: shell
CODE:
kubectl get endpointslices -o json -l kubernetes.io/service-name=nginx-service

----------------------------------------

TITLE: Executing Kubeadm Upgrade Apply Phase Addon Command
DESCRIPTION: This command is used to upgrade the default kubeadm addons in a Kubernetes cluster. It's part of the kubeadm upgrade process and specifically targets the addon phase.

LANGUAGE: shell
CODE:
kubeadm upgrade apply phase addon [flags]

----------------------------------------

TITLE: Preferred Dual-Stack Service Configuration
DESCRIPTION: Service configuration that explicitly defines PreferDualStack in ipFamilyPolicy to enable dual-stack networking when available.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Service
metadata:
  name: my-service
  labels:
    app.kubernetes.io/name: MyApp
spec:
  ipFamilyPolicy: PreferDualStack
  selector:
    app.kubernetes.io/name: MyApp
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP

----------------------------------------

TITLE: Sending HTTP PATCH Request via curl
DESCRIPTION: This curl command sends the HTTP PATCH request to add the extended resource 'dongle' to a specific node.

LANGUAGE: shell
CODE:
curl --header "Content-Type: application/json-patch+json" \
  --request PATCH \
  --data '[{"op": "add", "path": "/status/capacity/example.com~1dongle", "value": "4"}]' \
  http://localhost:8001/api/v1/nodes/<your-node-name>/status

----------------------------------------

TITLE: LeaseCandidate HTTP POST Operation
DESCRIPTION: HTTP POST request to create a new LeaseCandidate resource

LANGUAGE: http
CODE:
POST /apis/coordination.k8s.io/v1alpha1/namespaces/{namespace}/leasecandidates

----------------------------------------

TITLE: Configuring Image Resources in YAML
DESCRIPTION: Defines image resource configurations with different stability stages for a Kubernetes project. Uses pattern matching to categorize resources into alpha, beta, deprecated, and stable states.

LANGUAGE: yaml
CODE:
---
headless: true

resources:
- src: "*alpha*"
  title: "alpha"
- src: "*beta*"
  title: "beta"
- src: "*deprecated*"
  title: "deprecated"
- src: "*stable*"
  title: "stable"
---

----------------------------------------

TITLE: Defining a Pod with imagePullSecrets in Kubernetes YAML
DESCRIPTION: YAML definition for a Kubernetes Pod that references an imagePullSecret to pull from a private registry. Specifies the secret name under imagePullSecrets.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: foo
  namespace: awesomeapps
spec:
  containers:
    - name: foo
      image: janedoe/awesomeapp:v1
  imagePullSecrets:
    - name: myregistrykey

----------------------------------------

TITLE: Pod with Host Network DNS Policy
DESCRIPTION: YAML configuration for a Pod using hostNetwork with ClusterFirstWithHostNet DNS policy.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: busybox
  namespace: default
spec:
  containers:
  - image: busybox:1.28
    command:
      - sleep
      - "3600"
    imagePullPolicy: IfNotPresent
    name: busybox
  restartPolicy: Always
  hostNetwork: true
  dnsPolicy: ClusterFirstWithHostNet

----------------------------------------

TITLE: Configuring Device Ownership in CRI-O
DESCRIPTION: TOML configuration snippet for enabling device ownership from security context in CRI-O runtime.

LANGUAGE: toml
CODE:
[crio.runtime]
device_ownership_from_security_context = true

----------------------------------------

TITLE: Scaling PostgreSQL Replicas
DESCRIPTION: Kubernetes command to scale up the number of read-only PostgreSQL replicas.

LANGUAGE: bash
CODE:
kubectl scale rc crunchy-replica --replicas=2

----------------------------------------

TITLE: Configuring Kubernetes Documentation Homepage in YAML
DESCRIPTION: YAML configuration that defines the structure and content of the Kubernetes documentation homepage. Includes metadata, navigation settings, and content cards for different documentation sections like concepts, tutorials, setup guides, and reference materials.

LANGUAGE: yaml
CODE:
approvers:
- chenopis
title: Kubernetes Documentation
noedit: true
cid: docsHome
layout: docsportal_home
class: gridPage gridPageHome
linkTitle: "Documentation"
main_menu: true
weight: 10
hide_feedback: true
menu:
  main:
    title: "Documentation"
    weight: 10
description: >
  Kubernetes is an open source container orchestration engine for automating deployment, scaling, and management of containerized applications. The open source project is hosted by the Cloud Native Computing Foundation.
overview: >
  Kubernetes is an open source container orchestration engine for automating deployment, scaling, and management of containerized applications. The open source project is hosted by the Cloud Native Computing Foundation (<a href="https://www.cncf.io/about">CNCF</a>).
cards:
- name: concepts
  title: "Understand Kubernetes"
  description: "Learn about Kubernetes and its fundamental concepts."
  button: "View Concepts"
  button_path: "/docs/concepts"
- name: tutorials
  title: "Try Kubernetes"
  description: "Follow tutorials to learn how to deploy applications in Kubernetes."
  button: "View Tutorials"
  button_path: "/docs/tutorials"
- name: setup
  title: "Set up a K8s cluster"
  description: "Get Kubernetes running based on your resources and needs."
  button: "Set up Kubernetes"
  button_path: "/docs/setup"
- name: tasks
  title: "Learn how to use Kubernetes"
  description: "Look up common tasks and how to perform them using a short sequence of steps."
  button: "View Tasks"
  button_path: "/docs/tasks"
- name: reference
  title: Look up reference information
  description: Browse terminology, command line syntax, API resource types, and setup tool documentation.
  button: View Reference
  button_path: /docs/reference
- name: contribute
  title: Contribute to Kubernetes
  description: Find out how you can help make Kubernetes better.
  button: See Ways to Contribute
  button_path: "/docs/contribute"
- name: training
  title: "Training"
  description: "Get certified in Kubernetes and make your cloud native projects successful!"
  button: "View training"
  button_path: "/training"
- name: Download
  title: Download Kubernetes
  description: Install Kubernetes or upgrade to the newest version.
  button: "Download Kubernetes"
  button_path: "/releases/download"
- name: about
  title: About the documentation
  description: This website contains documentation for the current and previous 4 versions of Kubernetes.
  button: "See available versions"
  button_path: "/docs/home/supported-doc-versions"

----------------------------------------

TITLE: Installing Cilium network add-on
DESCRIPTION: Commands to install the Cilium Pod network add-on.

LANGUAGE: bash
CODE:
kubectl create -f https://raw.githubusercontent.com/cilium/cilium/v1.6/install/kubernetes/quick-install.yaml

LANGUAGE: bash
CODE:
kubectl get pods -n kube-system --selector=k8s-app=cilium

----------------------------------------

TITLE: Defining Dependent Environment Variables in Kubernetes Pod YAML
DESCRIPTION: This YAML configuration defines a Pod with dependent environment variables. It demonstrates various scenarios including successful variable resolution, failed resolution due to ordering, and escaped references.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: dependent-envars-demo
spec:
  containers:
    - name: envars-test-container
      image: busybox
      command: ["sh", "-c"]
      args:
      - while true; do
          echo -e "\nUNCHANGED_REFERENCE=$(PROTOCOL)://$(SERVICE_IP):$(SERVICE_PORT)";
          echo -e "SERVICE_ADDRESS=$(PROTOCOL)://$(SERVICE_IP):$(SERVICE_PORT)";
          echo -e "ESCAPED_REFERENCE=$$(PROTOCOL)://$(SERVICE_IP):$(SERVICE_PORT)";
          sleep 10;
        done;
      env:
        - name: SERVICE_PORT
          value: "80"
        - name: SERVICE_IP
          value: "172.17.0.1"
        - name: PROTOCOL
          value: "https"


----------------------------------------

TITLE: Running the Test Driver Controller and Kubelet Plugin
DESCRIPTION: Console commands to run the test driver controller and kubelet plugin for testing Dynamic Resource Allocation.

LANGUAGE: console
CODE:
$ go run ./test/e2e/dra/test-driver --feature-gates ContextualLogging=true -v=5 controller

$ sudo mkdir -p /var/run/cdi && \
  sudo chmod a+rwx /var/run/cdi /var/lib/kubelet/plugins_registry /var/lib/kubelet/plugins/
$ go run ./test/e2e/dra/test-driver --feature-gates ContextualLogging=true -v=6 kubelet-plugin

----------------------------------------

TITLE: Kubernetes Job Manifest for Parallel Queue Processing
DESCRIPTION: YAML manifest defining a Kubernetes Job that runs multiple worker pods to process items from the Redis queue in parallel

LANGUAGE: yaml
CODE:
apiVersion: batch/v1
kind: Job
metadata:
  name: job-wq-2
spec:
  parallelism: 2
  template:
    metadata:
      name: job-wq-2
    spec:
      containers:
      - name: c
        image: gcr.io/myproject/job-wq-2
      restartPolicy: OnFailure

----------------------------------------

TITLE: Pod with Host Network DNS Policy
DESCRIPTION: YAML configuration for a Pod using hostNetwork with ClusterFirstWithHostNet DNS policy.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: busybox
  namespace: default
spec:
  containers:
  - image: busybox:1.28
    command:
      - sleep
      - "3600"
    imagePullPolicy: IfNotPresent
    name: busybox
  restartPolicy: Always
  hostNetwork: true
  dnsPolicy: ClusterFirstWithHostNet

----------------------------------------

TITLE: Configuring Pod Access Control with NetworkPolicy in Kubernetes
DESCRIPTION: A YAML configuration that demonstrates how to create a NetworkPolicy to restrict access to nginx pods, only allowing communication from pods labeled with 'app: foo'.

LANGUAGE: yaml
CODE:
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: access-nginx
spec:
  podSelector:
    matchLabels:
      app: nginx
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: foo

----------------------------------------

TITLE: Creating Pod with RuntimeClass Handler in Kubernetes
DESCRIPTION: Example Pod specification using a RuntimeClass handler to define resource limits for multiple containers.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: test-pod
spec:
  runtimeClassName: kata-fc
  containers:
  - name: busybox-ctr
    image: busybox:1.28
    stdin: true
    tty: true
    resources:
      limits:
        cpu: 500m
        memory: 100Mi
  - name: nginx-ctr
    image: nginx
    resources:
      limits:
        cpu: 1500m
        memory: 100Mi

----------------------------------------

TITLE: Querying Node Container Runtime with kubectl
DESCRIPTION: Use kubectl to fetch and display node information, including the container runtime and version.

LANGUAGE: shell
CODE:
kubectl get nodes -o wide

----------------------------------------

TITLE: Setting Proxy Environment Variables on Windows
DESCRIPTION: PowerShell commands to set HTTP and HTTPS proxy environment variables for Kubernetes installation on Windows nodes behind a proxy.

LANGUAGE: powershell
CODE:
[Environment]::SetEnvironmentVariable("HTTP_PROXY", "http://proxy.example.com:80/", [EnvironmentVariableTarget]::Machine)
[Environment]::SetEnvironmentVariable("HTTPS_PROXY", "http://proxy.example.com:443/", [EnvironmentVariableTarget]::Machine)

----------------------------------------

TITLE: Downloading and Initializing easyrsa for Kubernetes Certificate Generation
DESCRIPTION: This snippet shows how to download, extract, and initialize easyrsa for generating Kubernetes certificates. It sets up the necessary directory structure and initializes the public key infrastructure (PKI).

LANGUAGE: bash
CODE:
curl -LO https://dl.k8s.io/easy-rsa/easy-rsa.tar.gz
tar xzf easy-rsa.tar.gz
cd easy-rsa-master/easyrsa3
./easyrsa init-pki

----------------------------------------

TITLE: Installing Volume Data Source Validator in Kubernetes
DESCRIPTION: Terminal commands to install the volume-data-source-validator controller and its dependencies.

LANGUAGE: terminal
CODE:
kubectl apply -f https://raw.githubusercontent.com/kubernetes-csi/volume-data-source-validator/master/client/config/crd/populator.storage.k8s.io_volumepopulators.yaml
kubectl apply -f https://raw.githubusercontent.com/kubernetes-csi/volume-data-source-validator/master/deploy/kubernetes/rbac-data-source-validator.yaml
kubectl apply -f https://raw.githubusercontent.com/kubernetes-csi/volume-data-source-validator/master/deploy/kubernetes/setup-data-source-validator.yaml

----------------------------------------

TITLE: Creating Ingress Resource with TLS in Kubernetes
DESCRIPTION: YAML definition to create an Ingress resource with TLS configuration, specifying the backend service and port.

LANGUAGE: yaml
CODE:
apiVersion: extensions/v1beta1

kind: Ingress

metadata:

  name: test

spec:

  tls:

  - secretName: tls
  backend:  
    serviceName: echoheaders  
    servicePort: 8080  

----------------------------------------

TITLE: Creating a Namespace in Kubernetes
DESCRIPTION: Creates a new namespace called 'example' in the Kubernetes cluster.

LANGUAGE: shell
CODE:
kubectl create ns example

----------------------------------------

TITLE: Configuring Pod with ClusterFirstWithHostNet DNS Policy
DESCRIPTION: Example YAML configuration for a Pod using the ClusterFirstWithHostNet DNS policy, which is required when running a Pod with hostNetwork: true.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: busybox
  namespace: default
spec:
  containers:
  - image: busybox:1.28
    command:
      - sleep
      - "3600"
    imagePullPolicy: IfNotPresent
    name: busybox
  restartPolicy: Always
  hostNetwork: true
  dnsPolicy: ClusterFirstWithHostNet

----------------------------------------

TITLE: Creating Local User Group for HostProcess Container
DESCRIPTION: Command to create a local user group on a Windows node for running HostProcess containers with specific permissions.

LANGUAGE: cmd
CODE:
net localgroup hpc-localgroup /add

----------------------------------------

TITLE: Kubernetes Upgrade Diff Command Options
DESCRIPTION: This snippet lists the available options for the 'kubeadm upgrade diff' command, including configuration file path, context lines for diff output, help flag, and kubeconfig file location.

LANGUAGE: markdown
CODE:
   <table style="width: 100%; table-layout: fixed;">
<colgroup>
<col span="1" style="width: 10px;" />
<col span="1" />
</colgroup>
<tbody>

<tr>
<td colspan="2">--config string</td>
</tr>
<tr>
<td></td><td style="line-height: 130%; word-wrap: break-word;"><p>Path to a kubeadm configuration file.</p></td>
</tr>

<tr>
<td colspan="2">-c, --context-lines int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Default: 3</td>
</tr>
<tr>
<td></td><td style="line-height: 130%; word-wrap: break-word;"><p>How many lines of context in the diff</p></td>
</tr>

<tr>
<td colspan="2">-h, --help</td>
</tr>
<tr>
<td></td><td style="line-height: 130%; word-wrap: break-word;"><p>help for diff</p></td>
</tr>

<tr>
<td colspan="2">--kubeconfig string&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Default: "/etc/kubernetes/admin.conf"</td>
</tr>
<tr>
<td></td><td style="line-height: 130%; word-wrap: break-word;"><p>The kubeconfig file to use when talking to the cluster. If the flag is not set, a set of standard locations can be searched for an existing kubeconfig file.</p></td>
</tr>

</tbody>
</table>

----------------------------------------

TITLE: Configuring ServiceAccountToken Projected Volume in Kubernetes YAML
DESCRIPTION: Example YAML configuration for a Kubernetes Pod using a projected volume to inject the current service account token with specified audience and expiration.

LANGUAGE: yaml
CODE:
{{% code_sample file="pods/storage/projected-service-account-token.yaml" %}}

----------------------------------------

TITLE: Creating a Horizontal Pod Autoscaler for the PHP Apache deployment
DESCRIPTION: Sets up a Horizontal Pod Autoscaler to maintain between 1 and 10 replicas of the PHP Apache pods, targeting 50% average CPU utilization across all pods.

LANGUAGE: bash
CODE:
kubectl autoscale deployment php-apache --cpu-percent=50 --min=1 --max=10

----------------------------------------

TITLE: Using kubectl cluster-info dump Command
DESCRIPTION: Basic command to dump Kubernetes cluster information for debugging. Supports printing to stdout or writing to specified directory with options for namespace filtering.

LANGUAGE: bash
CODE:
kubectl cluster-info dump [flags]

----------------------------------------

TITLE: Defining a VolumeAttributesClass in Kubernetes
DESCRIPTION: YAML configuration for creating a VolumeAttributesClass named 'silver' with specific storage parameters.

LANGUAGE: yaml
CODE:
apiVersion: storage.k8s.io/v1beta1
kind: VolumeAttributesClass
metadata:
  name: silver
driverName: pd.csi.storage.gke.io
parameters:
  provisioned-iops: "3000"
  provisioned-throughput: "50" 

----------------------------------------

TITLE: Creating a Deployment in Kubernetes
DESCRIPTION: Creates a Deployment named 'hostnames' using the serve_hostname image

LANGUAGE: bash
CODE:
kubectl create deployment hostnames --image=registry.k8s.io/serve_hostname

----------------------------------------

TITLE: Manually Launching Flannel on Windows
DESCRIPTION: PowerShell commands to manually launch Flannel on a Windows node if it gets stuck during initialization.

LANGUAGE: powershell
CODE:
[Environment]::SetEnvironmentVariable("NODE_NAME", "<Windows 工作节点主机名>")
C:\flannel\flanneld.exe --kubeconfig-file=c:\k\config --iface=<Windows 工作节点 IP> --ip-masq=1 --kube-subnet-mgr=1

----------------------------------------

TITLE: Updating Kubernetes Resources
DESCRIPTION: Commands to update Kubernetes resources using kubectl set, rollout, and other update methods.

LANGUAGE: bash
CODE:
kubectl set image deployment/frontend www=image:v2               # Rolling update "www" containers of "frontend" deployment, updating the image
kubectl rollout history deployment/frontend                      # Check the history of deployments including the revision 
kubectl rollout undo deployment/frontend                         # Rollback to the previous deployment
kubectl rollout undo deployment/frontend --to-revision=2         # Rollback to a specific revision
kubectl rollout status -w deployment/frontend                    # Watch rolling update status of "frontend" deployment until completion
kubectl rollout restart deployment/frontend                      # Rolling restart of the "frontend" deployment


cat pod.json | kubectl replace -f -                              # Replace a pod based on the JSON passed into std

# Force replace, delete and then re-create the resource. Will cause a service outage.
kubectl replace --force -f ./pod.json

# Create a service for a replicated nginx, which serves on port 80 and connects to the containers on port 8000
kubectl expose rc nginx --port=80 --target-port=8000

# Update a single-container pod's image version (tag) to v4
kubectl get pod mypod -o yaml | sed 's/\(image: myimage\):.*$/\1:v4/' | kubectl replace -f -

kubectl label pods my-pod new-label=awesome                      # Add a Label
kubectl annotate pods my-pod icon-url=http://goo.gl/XXBTWq       # Add an annotation
kubectl autoscale deployment foo --min=2 --max=10                # Auto scale a deployment "foo"

----------------------------------------

TITLE: Running the Controller
DESCRIPTION: Commands to run the controller locally and test it with a sample pod

LANGUAGE: bash
CODE:
make run

kubectl run --image=nginx my-nginx

kubectl annotate pod my-nginx padok.fr/add-pod-name-label=true

----------------------------------------

TITLE: YAML - API Resource Definition Updates
DESCRIPTION: Updates to YAML resource definitions to support v1beta3 API version across various example applications and components.



----------------------------------------

TITLE: Reading Encrypted Secret from etcd
DESCRIPTION: Example command using etcdctl to read an encrypted Secret from etcd.

LANGUAGE: shell
CODE:
ETCDCTL_API=3 etcdctl \
   --cacert=/etc/kubernetes/pki/etcd/ca.crt   \
   --cert=/etc/kubernetes/pki/etcd/server.crt \
   --key=/etc/kubernetes/pki/etcd/server.key  \
   get /registry/secrets/default/secret1 | hexdump -C

----------------------------------------

TITLE: Creating HorizontalPodAutoscaler Declaratively
DESCRIPTION: YAML manifest to create a HorizontalPodAutoscaler declaratively.

LANGUAGE: yaml
CODE:
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: php-apache
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: php-apache
  minReplicas: 1
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 50

----------------------------------------

TITLE: Viewing ZooKeeper Pod Status
DESCRIPTION: Command to watch the status of ZooKeeper Pods as they are created.

LANGUAGE: bash
CODE:
kubectl get pods -w -l app=zk

----------------------------------------

TITLE: Creating IP Masquerade ConfigMap
DESCRIPTION: Command to create a ConfigMap from the configuration file in the kube-system namespace.

LANGUAGE: shell
CODE:
kubectl create configmap ip-masq-agent --from-file=config --namespace=kube-system

----------------------------------------

TITLE: CronJob Schedule Syntax
DESCRIPTION: Shows the Cron syntax format used for scheduling CronJobs in Kubernetes, explaining each field's meaning and valid values.

LANGUAGE: text
CODE:
# ┌───────────── minute (0 - 59)
# │ ┌───────────── hour (0 - 23)
# │ │ ┌───────────── day of the month (1 - 31)
# │ │ │ ┌───────────── month (1 - 12)
# │ │ │ │ ┌───────────── day of the week (0 - 6) (Sunday to Saturday)
# │ │ │ │ │                                   OR sun, mon, tue, wed, thu, fri, sat
# │ │ │ │ │
# │ │ │ │ │
# * * * * *

----------------------------------------

TITLE: Creating ZooKeeper Ensemble with kubectl
DESCRIPTION: Command to create ZooKeeper services and StatefulSet using kubectl create.

LANGUAGE: bash
CODE:
$ kubectl create -f http://k8s.io/docs/tutorials/stateful-application/zookeeper.yaml

service "zk-headless" created
configmap "zk-config" created
poddisruptionbudget "zk-budget" created
statefulset "zk" created

----------------------------------------

TITLE: Running Go Tests for Localized Content
DESCRIPTION: Commands for running tests on localized content in the Kubernetes website repository. The command accepts a language code parameter to specify which localization to test.

LANGUAGE: go
CODE:
go test k8s.io/website/content/<lang>/examples

LANGUAGE: go
CODE:
go test k8s.io/website/content/en/examples

----------------------------------------

TITLE: Executing kubectl autoscale command
DESCRIPTION: The main command syntax for kubectl autoscale, used to create an autoscaler for a Kubernetes resource.

LANGUAGE: bash
CODE:
kubectl autoscale (-f FILENAME | TYPE NAME | TYPE/NAME) [--min=MINPODS] --max=MAXPODS [--cpu-percent=CPU]

----------------------------------------

TITLE: Checking Generated Files Status
DESCRIPTION: Git command to verify the changes made to metrics documentation files.

LANGUAGE: shell
CODE:
git status

LANGUAGE: plaintext
CODE:
./test/instrumentation/documentation/documentation.md
./test/instrumentation/documentation/documentation-list.yaml

----------------------------------------

TITLE: Scaling a Deployment in Kubernetes
DESCRIPTION: Scales the 'hostnames' Deployment to 3 replicas

LANGUAGE: bash
CODE:
kubectl scale deployment hostnames --replicas=3

----------------------------------------

TITLE: Defining CSIMigrationGCE Feature Gate Stages in YAML
DESCRIPTION: This YAML snippet defines the different stages of the CSIMigrationGCE feature gate, including alpha, beta, and stable stages. It specifies the default values and version ranges for each stage.

LANGUAGE: yaml
CODE:
stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.14"
    toVersion: "1.16"
  - stage: beta
    defaultValue: false
    fromVersion: "1.17"  
    toVersion: "1.22" 
  - stage: beta
    defaultValue: true
    fromVersion: "1.23"  
    toVersion: "1.24" 
  - stage: stable
    defaultValue: true
    fromVersion: "1.25"
    toVersion: "1.27" 

removed: true

----------------------------------------

TITLE: Defining AuthorizationConfiguration in Go
DESCRIPTION: AuthorizationConfiguration provides versioned configuration for authorization. It specifies an ordered list of authorizers to use.

LANGUAGE: go
CODE:
type AuthorizationConfiguration struct {
  Authorizers []AuthorizerConfiguration
}

----------------------------------------

TITLE: Adding Pod Label Via kubectl
DESCRIPTION: Shows how to manually add a label to a pod using kubectl command

LANGUAGE: bash
CODE:
kubectl label my-pod my-label-key=my-label-value

----------------------------------------

TITLE: Hiding Pages from TOC in YAML Front Matter
DESCRIPTION: This snippet shows how to set the 'toc_hide' flag to exclude a page or section from the table of contents and page listings.

LANGUAGE: yaml
CODE:
toc_hide: true

----------------------------------------

TITLE: Bypassing PodSecurityPolicy in a Kubernetes Namespace
DESCRIPTION: These bash commands bypass PodSecurityPolicy at the namespace level by binding a privileged PSP to all service accounts in the namespace. This effectively disables PSP restrictions for the specified namespace.

LANGUAGE: bash
CODE:
# These cluster-wide commands only need to be run once
kubectl apply -f privileged-psp.yaml
kubectl create clusterrole privileged-psp --verb use --resource podsecuritypolicies.policy --resource-name privileged

# Disable on a per-namespace basis
kubectl create -n $NAMESPACE rolebinding disable-psp --clusterrole privileged-psp --group system:serviceaccounts:$NAMESPACE

----------------------------------------

TITLE: Creating a ClusterIP Service with kubectl
DESCRIPTION: Create a new ClusterIP service named my-cs with port 5678 mapped to target port 8080.

LANGUAGE: shell
CODE:
kubectl create service clusterip my-cs --tcp=5678:8080

----------------------------------------

TITLE: Creating a Kubernetes Pod with Environment Variables
DESCRIPTION: This shell command creates a Pod based on the YAML manifest defined in the 'envars.yaml' file.

LANGUAGE: shell
CODE:
kubectl apply -f https://k8s.io/examples/pods/inject/envars.yaml

----------------------------------------

TITLE: Protobuf Message IDL Definition
DESCRIPTION: IDL definition for the Protobuf wrapper message format used by Kubernetes

LANGUAGE: protobuf
CODE:
message Unknown {
  optional TypeMeta typeMeta = 1;
  optional bytes raw = 2;
  optional string contentEncoding = 3;
  optional string contentType = 4;
}

message TypeMeta {
  optional string apiVersion = 1;
  optional string kind = 2;
}

----------------------------------------

TITLE: Running Internal Link Checker for Kubernetes Website
DESCRIPTION: This command runs the htmltest tool to check for broken internal links in the Kubernetes website repository. It builds the site, pulls the htmltest Docker image, mounts the local repository, and scans the generated HTML files in the /public directory.

LANGUAGE: shell
CODE:
make container-internal-linkcheck

----------------------------------------

TITLE: Attaching to Running Containers in Kubernetes
DESCRIPTION: Illustrates how to attach to a running Redis container, allowing for interactive input and output.

LANGUAGE: console
CODE:
$> kubectl attach redis -i

1:C 12 Oct 23:05:11.848 # Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.conf

                _._                
           _.-``__''-._            
      _.-`` `. `_. ''-._ Redis 3.0.3 (00000000/0) 64 bit
  .-`` .-```. ```\/ _.,_ ''-._     
 ( ' , .-` | `, ) Running in standalone mode
 |`-._`-...-` __...-.``-._|'` _.-'| Port: 6379
 | `-._ `._ / _.-' | PID: 1
  `-._ `-._ `-./ _.-' _.-'         
 |`-._`-._ `-.__.-' _.-'_.-'|      
 | `-._`-._ _.-'_.-' | http://redis.io
`-._ `-._`-.__.-'_.-' _.-'         
 |`-._`-._ `-.__.-' _.-'_.-'|      
 | `-._`-._ _.-'_.-' |             
  `-._ `-._`-.__.-'_.-' _.-'       
      `-._ `-.__.-' _.-'           
          `-._ _.-'                
              `-.__.-'             

1:M 12 Oct 23:05:11.849 # Server started, Redis version 3.0.3

----------------------------------------

TITLE: Viewing and Finding Kubernetes Resources
DESCRIPTION: Commands for listing, describing, and querying Kubernetes resources with various output formats and filtering options.

LANGUAGE: bash
CODE:
kubectl get services
kubectl get pods --all-namespaces
kubectl describe nodes my-node
kubectl get pods --selector=app=cassandra -o jsonpath='{.items[*].metadata.labels.version}'

----------------------------------------

TITLE: Using Glossary Tooltips in Kubernetes Documentation
DESCRIPTION: This code snippet shows how to use the glossary_tooltip and glossary_definition shortcodes to reference and display glossary terms with tooltips and definitions in Kubernetes documentation.

LANGUAGE: go-html-template
CODE:
{{</* glossary_tooltip text="cluster" term_id="cluster" */>}}

{{</* glossary_definition prepend="A cluster is" term_id="cluster" length="short" */>}}

{{</* glossary_definition term_id="cluster" length="all" */>}}

----------------------------------------

TITLE: Checking for Virtual Network Adapters on Windows
DESCRIPTION: PowerShell commands to check if virtual network adapters required for Kubernetes networking are present on Windows nodes.

LANGUAGE: powershell
CODE:
Get-HnsNetwork | ? Name -ieq "cbr0"
Get-NetAdapter | ? Name -Like "vEthernet (Ethernet*"

----------------------------------------

TITLE: Defining MultiCIDRServiceAllocator Feature Gate Stages in YAML
DESCRIPTION: This YAML snippet defines the stages of the MultiCIDRServiceAllocator feature gate, including its alpha and beta phases with corresponding versions and default values.

LANGUAGE: yaml
CODE:
stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.27"
    toVersion: "1.30"
  - stage: beta
    defaultValue: false
    fromVersion: "1.31"

----------------------------------------

TITLE: Initializing Hugo Template for Kubernetes Task Documentation
DESCRIPTION: Front matter template for creating new Kubernetes task documentation pages. Uses Hugo templating to generate the title from the filename and sets the content type to 'task'.

LANGUAGE: markdown
CODE:
---
title: "{{ replace .Name "-" " " | title }}"
content_type: task
---

----------------------------------------

TITLE: Exporting GitHub Data with Python
DESCRIPTION: Python script to export GitHub issues and pull requests data from the Kubernetes repository using the GitHub API.

LANGUAGE: bash
CODE:
> export GITHUB_TOKEN=<MY-SECRET-TOKEN>
> ./main export
INFO | Getting GITHUB_TOKEN from environment variable
INFO | Dumping all issues
INFO | Pulling 90929 items
INFO | 1: Unit test coverage in Kubelet is lousy. (~30%)
INFO | 2: Better error messages if go isn't installed, or if gcloud is old.
INFO | 3: Need real cluster integration tests
INFO | 4: kubelet should know which containers it is managing
… [just wait 8 hours] …

----------------------------------------

TITLE: Including Source Code Files in Kubernetes Documentation
DESCRIPTION: This snippet demonstrates how to use the code_sample shortcode to embed the contents of a file in a code block, allowing users to download or copy its content.

LANGUAGE: go-html-template
CODE:
{{%/* code_sample language="yaml" file="application/deployment-scale.yaml" */%}}

----------------------------------------

TITLE: Verifying Applied AppArmor Profile in Shell
DESCRIPTION: This command checks the AppArmor profile applied to a container's root process by examining its proc attributes.

LANGUAGE: shell
CODE:
kubectl exec <pod_name> -- cat /proc/1/attr/current

----------------------------------------

TITLE: 定义带 externalIPs 的 Service
DESCRIPTION: 创建一个带有 externalIPs 的 Service,可以通过这些 IP 访问

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Service
metadata:
  name: my-service
spec:
  selector:
    app.kubernetes.io/name: MyApp
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 49152
  externalIPs:
    - 198.51.100.32

----------------------------------------

TITLE: Configuring Default Backend in Ingress YAML
DESCRIPTION: YAML configuration for an Ingress with a default backend, routing all traffic to a single service without specific rules.

LANGUAGE: yaml
CODE:
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: test-ingress
spec:
  defaultBackend:
    service:
      name: testsvc
      port:
        number: 80

----------------------------------------

TITLE: Converting Ingress resources to Gateway API resources
DESCRIPTION: This command uses ingress2gateway to print the converted Gateway API resources from existing Ingress resources in the cluster.

LANGUAGE: bash
CODE:
ingress2gateway print

----------------------------------------

TITLE: Defining Cassandra Pet Set and Service in YAML
DESCRIPTION: This YAML configuration defines a headless service for DNS lookup and a Pet Set for deploying Cassandra instances. It specifies the container image, resource requirements, environment variables, and volume claims for Cassandra.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Service
metadata:
  labels:
    app: cassandra
  name: cassandra
spec:
  clusterIP: None
  ports:
    - port: 9042
  selector:
    app: cassandra-data
----
apiVersion: "apps/v1alpha1"
kind: PetSet
metadata:
  name: cassandra
spec:
  serviceName: cassandra
  replicas: 5
  template:
    metadata:
      annotations:
        pod.alpha.kubernetes.io/initialized: "true"
      labels:
        app: cassandra-data
    spec:
      containers:
      - name: cassandra
        image: "cassandra-debian:v1.1"
        imagePullPolicy: Always
        ports:
        - containerPort: 7000
          name: intra-node
        - containerPort: 7199
          name: jmx
        - containerPort: 9042
          name: cql
        resources:
          limits:
            cpu: "4"
            memory: 11Gi
          requests:
           cpu: "4"
           memory: 11Gi
        securityContext:
          privileged: true
        env:
          - name: MAX_HEAP_SIZE
            value: 8192M
          - name: HEAP_NEWSIZE
            value: 2048M
          - name: CASSANDRA_SEEDS
            value: "cassandra-0.cassandra.default.svc.cluster.local,cassandra-1.cassandra.default.svc.cluster.local"
          - name: CASSANDRA_CLUSTER_NAME
            value: "OneKDemo"
          - name: CASSANDRA_DC
            value: "DC1-Data"
          - name: CASSANDRA_RACK
            value: "OneKDemo-Rack1-Data"
          - name: CASSANDRA_AUTO_BOOTSTRAP
            value: "false"
          - name: POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
        readinessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - /ready-probe.sh
          initialDelaySeconds: 15
          timeoutSeconds: 5
        volumeMounts:
        - name: cassandra-data
          mountPath: /cassandra_data
  volumeClaimTemplates:
  - metadata:
      name: cassandra-data
      annotations:
        volume.alpha.kubernetes.io/storage-class: anything
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 380Gi

----------------------------------------

TITLE: Viewing Docker Environment Information
DESCRIPTION: This snippet demonstrates how to view detailed information about the Docker environment.

LANGUAGE: shell
CODE:
docker info

----------------------------------------

TITLE: Retrieving Pod ID using crictl on Kubernetes Node
DESCRIPTION: Bash command to get the Pod ID using crictl on the node where the Pod is scheduled.

LANGUAGE: bash
CODE:
POD_ID="$(sudo crictl pods --name test-pod -q)"

----------------------------------------

TITLE: Deploying Kubernetes Resources from URL
DESCRIPTION: Shows how to deploy Kubernetes resources directly from a URL source using kubectl apply.

LANGUAGE: shell
CODE:
kubectl apply -f https://k8s.io/examples/application/nginx/nginx-deployment.yaml

LANGUAGE: none
CODE:
deployment.apps/my-nginx created

----------------------------------------

TITLE: Creating VolumeSnapshot in YAML
DESCRIPTION: YAML configuration for creating a VolumeSnapshot object that references a PVC to snapshot.

LANGUAGE: yaml
CODE:
apiVersion: snapshot.storage.k8s.io/v1beta1
kind: VolumeSnapshot
metadata:
  name: test-snapshot
spec:
  volumeSnapshotClassName: test-snapclass
  source:
    persistentVolumeClaimName: test-pvc

----------------------------------------

TITLE: Checking Remote Repository Configuration
DESCRIPTION: Command to verify origin and upstream remote repositories are configured correctly

LANGUAGE: shell
CODE:
git remote -v

----------------------------------------

TITLE: Testing Extended IP Range
DESCRIPTION: Command sequence to create additional services using the newly extended IP range.

LANGUAGE: bash
CODE:
for i in $(seq 13 16); do kubectl create service clusterip "test-$i" --tcp 80 -o json | jq -r .spec.clusterIP; done

----------------------------------------

TITLE: Running Example Contextual Logging Program in Kubernetes
DESCRIPTION: Example of running a program that demonstrates contextual logging in Kubernetes, showing how to enable the feature gate and the resulting log output.

LANGUAGE: bash
CODE:
$ cd $GOPATH/src/k8s.io/kubernetes/staging/src/k8s.io/component-base/logs/example/cmd/
$ go run . --help
...
      --feature-gates mapStringBool  A set of key=value pairs that describe feature gates for alpha/experimental features. Options are:
                                     AllAlpha=true|false (ALPHA - default=false)
                                     AllBeta=true|false (BETA - default=false)
                                     ContextualLogging=true|false (ALPHA - default=false)
$ go run . --feature-gates ContextualLogging=true
...
I0404 18:00:02.916429  451895 logger.go:94] "example/myname: runtime" foo="bar" duration="1m0s"
I0404 18:00:02.916447  451895 logger.go:95] "example: another runtime" foo="bar" duration="1m0s"

----------------------------------------

TITLE: Checking Status of Copied kubectl Documentation Files
DESCRIPTION: Verifies that all generated files have been copied to the website repository directory.

LANGUAGE: shell
CODE:
cd <web-base>
git status

----------------------------------------

TITLE: Defining OCI Linux Container Device Configuration
DESCRIPTION: YAML snippet showing the expected OCI Runtime Spec for Linux Container Configuration, including device type, path, major/minor numbers, file mode, and uid/gid.

LANGUAGE: yaml
CODE:
{
        "type": "<string>",
        "path": "<string>",
        "major": <int64>,
        "minor": <int64>,
        "fileMode": <uint32>,
        "uid": <uint32>,
        "gid": <uint32>
},

----------------------------------------

TITLE: Generating Static Pod Manifests with kubeadm
DESCRIPTION: This command generates all static Pod manifest files for control plane components, equivalent to what is generated by 'kubeadm init'. It can also use options from a configuration file.

LANGUAGE: bash
CODE:
kubeadm init phase control-plane all [flags]

LANGUAGE: bash
CODE:
# Generates all static Pod manifest files for control plane components,
# functionally equivalent to what is generated by kubeadm init.
kubeadm init phase control-plane all

# Generates all static Pod manifest files using options read from a configuration file.
kubeadm init phase control-plane all --config config.yaml

----------------------------------------

TITLE: Configuring ImagePolicyWebhook
DESCRIPTION: Example configuration for the ImagePolicyWebhook admission controller

LANGUAGE: yaml
CODE:
imagePolicy:
  kubeConfigFile: /path/to/kubeconfig/for/backend
  allowTTL: 50
  denyTTL: 50
  retryBackoff: 500
  defaultAllow: true

----------------------------------------

TITLE: Attaching to a Running Pod with kubectl
DESCRIPTION: This snippet shows how to attach to a running pod using kubectl.

LANGUAGE: shell
CODE:
kubectl get pods

LANGUAGE: shell
CODE:
kubectl attach -it nginx-app-5jyvm

----------------------------------------

TITLE: Configuring Headless Page in YAML for Kubernetes Documentation
DESCRIPTION: This YAML-like front matter defines a configuration for a documentation page. It sets the 'headless' property to true, which typically indicates that the page should be rendered without a full HTML structure, often used for partial pages or content fragments in documentation systems.

LANGUAGE: yaml
CODE:
---
headless: true
---

----------------------------------------

TITLE: Listing Pods with Specific Labels in Kubernetes
DESCRIPTION: This command lists running Pods that have the label 'purpose=demonstrate-envars'.

LANGUAGE: shell
CODE:
kubectl get pods -l purpose=demonstrate-envars

----------------------------------------

TITLE: LeaseCandidate HTTP DELETE Operation
DESCRIPTION: HTTP DELETE request to remove a LeaseCandidate resource

LANGUAGE: http
CODE:
DELETE /apis/coordination.k8s.io/v1alpha1/namespaces/{namespace}/leasecandidates/{name}

----------------------------------------

TITLE: Accessing Provider-Specific Code in Go
DESCRIPTION: Example of how provider-specific code is accessed via an interface in the E2E framework after refactoring in Kubernetes 1.13.

LANGUAGE: Go
CODE:
type ProviderInterface interface {
	GetCloudProviderName() string
	GetInstance(project, zone, name string) (string, error)
	// Other methods...
}

----------------------------------------

TITLE: Distributing Self-Signed CA Certificate to Kubernetes Clients
DESCRIPTION: These commands distribute a self-signed CA certificate to Kubernetes client nodes and update the list of valid certificates. This is useful for non-production deployments or installations behind a firewall.

LANGUAGE: bash
CODE:
sudo cp ca.crt /usr/local/share/ca-certificates/kubernetes.crt
sudo update-ca-certificates

----------------------------------------

TITLE: Using a Persistent Volume Claim in a Kubernetes Pod YAML
DESCRIPTION: This YAML shows how to reference a Persistent Volume Claim in a Pod specification to mount the volume.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: mypod
spec:
  containers:
    - name: myfrontend
      image: nginx
      volumeMounts:
      - mountPath: "/var/www/html"
        name: mypd
  volumes:
    - name: mypd
      persistentVolumeClaim:
        claimName: myclaim

----------------------------------------

TITLE: Setting AppArmor Profile in Container SecurityContext
DESCRIPTION: Example showing how to set the AppArmor profile type in a container's security context

LANGUAGE: yaml
CODE:
securityContext:
  appArmorProfile:
    type: "AppArmor profile type"

----------------------------------------

TITLE: Running kubectl Proxy
DESCRIPTION: Command to run kubectl in reverse proxy mode for API server access.

LANGUAGE: shell
CODE:
kubectl proxy --port=8080 &

----------------------------------------

TITLE: Disabling DNS Autoscaling by Scaling Down Deployment in Kubernetes
DESCRIPTION: This command scales down the kube-dns-autoscaler deployment to 0 replicas, effectively disabling DNS autoscaling.

LANGUAGE: shell
CODE:
kubectl scale deployment --replicas=0 kube-dns-autoscaler --namespace=kube-system

----------------------------------------

TITLE: YAML Front Matter Configuration
DESCRIPTION: YAML front matter block defining the page title and weight for documentation organization.

LANGUAGE: yaml
CODE:
---
title: "Configuration"
weight: 30
---

----------------------------------------

TITLE: Creating a ReplicaLimit Parameter Resource in Kubernetes
DESCRIPTION: Example of a ReplicaLimit custom resource that sets the maximum number of replicas to 3.

LANGUAGE: yaml
CODE:
apiVersion: rules.example.com/v1
kind: ReplicaLimit
metadata:
  name: "replicalimit-test"
maxReplicas: 3


----------------------------------------

TITLE: Defining Network Policy ThirdPartyResource in YAML
DESCRIPTION: YAML definition for creating a ThirdPartyResource to enable the experimental network policy API endpoint in Kubernetes 1.2.

LANGUAGE: yaml
CODE:
kind: ThirdPartyResource
apiVersion: extensions/v1beta1
metadata:
 name: network-policy.net.alpha.kubernetes.io
description: "Network policy specification"
versions:
- name: v1alpha1

----------------------------------------

TITLE: Code Freeze Phase Commands
DESCRIPTION: Required Prow commands for merging PRs during code freeze weeks 12-14

LANGUAGE: markdown
CODE:
/milestone {v1.y}
/sig {name}
/kind {bug, failing-test}
/lgtm
/approved

----------------------------------------

TITLE: Setting Headless YAML Configuration
DESCRIPTION: YAML frontmatter configuration block that sets the headless property to true. This is commonly used in static site generators and content management systems to indicate a page should be processed without generating a standalone output.

LANGUAGE: yaml
CODE:
---
headless: true
---

----------------------------------------

TITLE: Setting up kubectl Autocomplete in Zsh
DESCRIPTION: Commands to enable kubectl autocomplete in Zsh shell, including setting it up for the current session and adding it permanently to .zshrc file.

LANGUAGE: bash
CODE:
source <(kubectl completion zsh)  # setup autocomplete in zsh into the current shell
echo "if [ $commands[kubectl] ]; then source <(kubectl completion zsh); fi" >> ~/.zshrc # add autocomplete permanently to your zsh shell

----------------------------------------

TITLE: ClusterTrustBundleSpec Struct Definition in Go
DESCRIPTION: Defines the structure of the ClusterTrustBundleSpec, which contains the signer and trust anchors for a ClusterTrustBundle.

LANGUAGE: go
CODE:
type ClusterTrustBundleSpec struct {
  TrustBundle string `json:"trustBundle"`
  SignerName string `json:"signerName,omitempty"`
}

----------------------------------------

TITLE: Initializing Kubernetes Cluster with Self-Hosting Feature
DESCRIPTION: This command initializes a Kubernetes cluster using kubeadm with the self-hosting feature enabled.

LANGUAGE: bash
CODE:
$ kubeadm init --feature-gates=SelfHosting=true

----------------------------------------

TITLE: Generating Server Key and Certificate Signing Request with OpenSSL for Kubernetes
DESCRIPTION: These commands generate a 2048-bit server key and create a certificate signing request (CSR) for the Kubernetes API server using a configuration file.

LANGUAGE: bash
CODE:
openssl genrsa -out server.key 2048
openssl req -new -key server.key -out server.csr -config csr.conf

----------------------------------------

TITLE: Draining a Kubernetes Node
DESCRIPTION: This command drains a Kubernetes node, ignoring DaemonSets, in preparation for maintenance.

LANGUAGE: shell
CODE:
kubectl drain <node-to-drain> --ignore-daemonsets

----------------------------------------

TITLE: Scaling Kubernetes Resources
DESCRIPTION: Commands to scale Kubernetes resources using kubectl scale.

LANGUAGE: bash
CODE:
kubectl scale --replicas=3 rs/foo                                 # Scale a replicaset named 'foo' to 3
kubectl scale --replicas=3 -f foo.yaml                            # Scale a resource specified in "foo.yaml" to 3
kubectl scale --current-replicas=2 --replicas=3 deployment/mysql  # If the deployment named mysql's current size is 2, scale mysql to 3
kubectl scale --replicas=5 rc/foo rc/bar rc/baz                   # Scale multiple replication controllers

----------------------------------------

TITLE: Configuring Headless Mode in YAML
DESCRIPTION: Basic YAML configuration that sets the headless property to true, commonly used in static site generators to indicate a content page should not generate its own HTML file.

LANGUAGE: yaml
CODE:
---
headless: true
---

----------------------------------------

TITLE: Pod Configuration with Cinder Volume in Kubernetes YAML
DESCRIPTION: YAML configuration for creating a Pod with Cinder volume mount in Hypernetes.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: nginx
  labels:
    app: nginx
spec:
  containers:
  - name: nginx
    image: nginx
    ports:
    - containerPort: 80
    volumeMounts:
    - name: nginx-persistent-storage
      mountPath: /var/lib/nginx
  volumes:
  - name: nginx-persistent-storage
    cinder:
      volumeID: 651b2a7b-683e-47e1-bdd6-e3c62e8f91c0
      fsType: ext4

----------------------------------------

TITLE: Configuring Headless Property in YAML
DESCRIPTION: Simple YAML configuration that sets the headless property to true. This is typically used in Kubernetes/Hugo configurations to indicate a headless setup.

LANGUAGE: yaml
CODE:
---
headless: true
---

----------------------------------------

TITLE: Scaling Kubernetes Deployments
DESCRIPTION: Demonstrates manual and automatic scaling of Kubernetes Deployments using kubectl scale and kubectl autoscale commands.

LANGUAGE: shell
CODE:
kubectl scale deployment/my-nginx --replicas=1

LANGUAGE: none
CODE:
deployment.apps/my-nginx scaled

LANGUAGE: shell
CODE:
kubectl get pods -l app=nginx

LANGUAGE: none
CODE:
NAME                        READY     STATUS    RESTARTS   AGE
my-nginx-2035384211-j5fhi   1/1       Running   0          30m

LANGUAGE: shell
CODE:
# This requires an existing source of container and Pod metrics
kubectl autoscale deployment/my-nginx --min=1 --max=3

LANGUAGE: none
CODE:
horizontalpodautoscaler.autoscaling/my-nginx autoscaled

----------------------------------------

TITLE: Kubernetes Configuration File Paths
DESCRIPTION: Standard paths for Kubernetes component configuration files

LANGUAGE: bash
CODE:
/etc/kubernetes/admin.conf
/etc/kubernetes/super-admin.conf
/etc/kubernetes/kubelet.conf
/etc/kubernetes/controller-manager.conf
/etc/kubernetes/scheduler.conf

----------------------------------------

TITLE: Running an Interactive Busybox Pod in Kubernetes
DESCRIPTION: Creates a temporary interactive busybox Pod for debugging purposes

LANGUAGE: bash
CODE:
kubectl run -it --rm --restart=Never busybox --image=gcr.io/google-containers/busybox sh

----------------------------------------

TITLE: ResourceSlice YAML Structure
DESCRIPTION: Defines the basic YAML structure for a ResourceSlice object, including apiVersion, kind, metadata, and spec fields.

LANGUAGE: yaml
CODE:
apiVersion: resource.k8s.io/v1alpha3
kind: ResourceSlice
metadata:
  # Standard object metadata
spec:
  # Contains the information published by the driver

----------------------------------------

TITLE: Running Application with Docker Compose
DESCRIPTION: Commands showing how to deploy the application using Docker Compose

LANGUAGE: bash
CODE:
docker-compose up -d\n\nCreating network "examples\_default" with the default driver\n\nCreating examples\_redis-slave\_1\n\nCreating examples\_frontend\_1\n\nCreating examples\_redis-master\_1

----------------------------------------

TITLE: Configuring Kubernetes API Server with Generated Certificates
DESCRIPTION: This snippet shows the parameters to be added to the Kubernetes API server initialization to use the generated CA certificate, server certificate, and private key.

LANGUAGE: bash
CODE:
--client-ca-file=/yourdirectory/ca.crt
--tls-cert-file=/yourdirectory/server.crt
--tls-private-key-file=/yourdirectory/server.key

----------------------------------------

TITLE: Adding ImagePullSecret to Default ServiceAccount
DESCRIPTION: This snippet demonstrates how to add an ImagePullSecret to the default ServiceAccount using kubectl patch.

LANGUAGE: shell
CODE:
kubectl patch serviceaccount default -p '{"imagePullSecrets": [{"name": "myregistrykey"}]}'

----------------------------------------

TITLE: Defining HugePages Feature Gate Stages in YAML
DESCRIPTION: This YAML configuration specifies the lifecycle stages of the HugePages feature gate in Kubernetes, including alpha, beta, and stable stages with their respective version ranges and default values. It also indicates that the feature has been removed.

LANGUAGE: yaml
CODE:
---
# Removed from Kubernetes
title: HugePages
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.8"
    toVersion: "1.9"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.10"
    toVersion: "1.13"    
  - stage: stable
    defaultValue: true
    fromVersion: "1.14"
    toVersion: "1.16"    

removed: true  
---

----------------------------------------

TITLE: Defining HugePages Feature Gate Stages in YAML
DESCRIPTION: This YAML configuration specifies the lifecycle stages of the HugePages feature gate in Kubernetes, including alpha, beta, and stable stages with their respective version ranges and default values. It also indicates that the feature has been removed.

LANGUAGE: yaml
CODE:
---
# Removed from Kubernetes
title: HugePages
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.8"
    toVersion: "1.9"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.10"
    toVersion: "1.13"    
  - stage: stable
    defaultValue: true
    fromVersion: "1.14"
    toVersion: "1.16"    

removed: true  
---

----------------------------------------

TITLE: Worker Node Join Configuration YAML
DESCRIPTION: This YAML configuration file is used to join a worker node to a dual-stack Kubernetes cluster using kubeadm.

LANGUAGE: yaml
CODE:
apiVersion: kubeadm.k8s.io/v1beta4
kind: JoinConfiguration
discovery:
  bootstrapToken:
    apiServerEndpoint: 10.100.0.1:6443
    token: "clvldh.vjjwg16ucnhp94qr"
    caCertHashes:
    - "sha256:a4863cde706cfc580a439f842cc65d5ef112b7b2be31628513a9881cf0d9fe0e"
nodeRegistration:
  kubeletExtraArgs:
  - name: "node-ip"
    value: "10.100.0.2,fd00:1:2:3::3"

----------------------------------------

TITLE: Configuring HorizontalPodAutoscaler Stabilization Window
DESCRIPTION: Example YAML configuration for specifying a stabilization window for scale down in a HorizontalPodAutoscaler resource to prevent flapping.

LANGUAGE: yaml
CODE:
behavior:
  scaleDown:
    stabilizationWindowSeconds: 300

----------------------------------------

TITLE: Setting Headless Mode in YAML Configuration
DESCRIPTION: YAML front matter configuration that sets the headless property to true. This is commonly used in static site generators to indicate content that should be processed without headers or as a partial component.

LANGUAGE: yaml
CODE:
---
headless: true
---

----------------------------------------

TITLE: Creating a Kubernetes Namespace using kubectl
DESCRIPTION: This command creates a new namespace in Kubernetes using the YAML file defined previously.

LANGUAGE: bash
CODE:
$ kubectl create -f my-namespace.yaml

----------------------------------------

TITLE: Accessing NodePort Service from Outside Cluster
DESCRIPTION: Bash commands to retrieve node IP and port, then curl the service to verify external access.

LANGUAGE: bash
CODE:
$ NODE_IP=$(kubectl get node `kubectl get po -l run=echoheaders 
--template '{{range .items}}{{.spec.nodeName}}{{end}}'` --template
'{{range $i, $n := .status.addresses}}{{if eq $n.type 
"ExternalIP"}}{{$n.address}}{{end}}{{end}}')
$ NODE_PORT=$(kubectl get svc echoheaders --template '{{range $i, $e 
:= .spec.ports}}{{$e.nodePort}}{{end}}')
$ curl $NODE_IP:$NODE_PORT

----------------------------------------

TITLE: Generating Server Certificate and Key with easyrsa for Kubernetes API Server
DESCRIPTION: This command generates a server certificate and key for the Kubernetes API server using easyrsa. It sets subject alternative names for IP addresses and DNS names, and specifies a validity period of 10000 days.

LANGUAGE: bash
CODE:
./easyrsa --subject-alt-name="IP:${MASTER_IP},"
"IP:${MASTER_CLUSTER_IP},"
"DNS:kubernetes,"
"DNS:kubernetes.default,"
"DNS:kubernetes.default.svc,"
"DNS:kubernetes.default.svc.cluster,"
"DNS:kubernetes.default.svc.cluster.local" \
--days=10000 \
build-server-full server nopass

----------------------------------------

TITLE: Configuring ReadWriteOncePod PersistentVolumeClaim in Kubernetes
DESCRIPTION: YAML configuration for creating a PersistentVolumeClaim with ReadWriteOncePod access mode. This configuration ensures only a single pod can write to the volume at a time, with a storage request of 1Gi.

LANGUAGE: yaml
CODE:
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: single-writer-only
spec:
  accessModes:
  - ReadWriteOncePod # Allows only a single pod to access single-writer-only.
  resources:
    requests:
      storage: 1Gi

----------------------------------------

TITLE: Configuring OpenStack Cinder StorageClass
DESCRIPTION: Example configuration for an OpenStack Cinder StorageClass, specifying availability zone.

LANGUAGE: yaml
CODE:
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: gold
provisioner: kubernetes.io/cinder
parameters:
  availability: nova

----------------------------------------

TITLE: Creating kubectl config file in PowerShell
DESCRIPTION: This PowerShell command creates a new config file for kubectl in the user's .kube directory.

LANGUAGE: powershell
CODE:
New-Item config -type file

----------------------------------------

TITLE: Defining YAML Front Matter in Markdown for Kubernetes Docs
DESCRIPTION: This YAML front matter block defines metadata for the Kubernetes documentation page, including title, link title, content type, and weight for ordering.

LANGUAGE: yaml
CODE:
---
title: Documentation Content Guide
linktitle: Content guide
content_type: concept
weight: 10
---

----------------------------------------

TITLE: Configuring APIResponseCompression Feature Gate in Kubernetes YAML
DESCRIPTION: YAML configuration defining the APIResponseCompression feature gate stages and properties. Started as alpha in version 1.7 with default value false, and progressed to beta in version 1.16 with default value true.

LANGUAGE: yaml
CODE:
title: APIResponseCompression
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: "alpha" 
    defaultValue: false
    fromVersion: "1.7"
    toVersion: "1.15"
  - stage: beta
    defaultValue: true
    fromVersion: "1.16"

----------------------------------------

TITLE: Chaining Multiple Field Selectors
DESCRIPTION: Combining multiple field selectors to filter Pods based on phase and restart policy

LANGUAGE: shell
CODE:
kubectl get pods --field-selector=status.phase!=Running,spec.restartPolicy=Always

----------------------------------------

TITLE: Feature Gate Example for SELinux Mount
DESCRIPTION: Table showing the feature gates for SELinux mount functionality in Kubernetes v1.30, indicating their stages and behavior changes.

LANGUAGE: markdown
CODE:
| Feature gate | Stage in v1.30 | Behavior change |
|---|---|---| 
| SELinuxMountReadWriteOncePod |  Beta | No |
| SELinuxMount | Alpha | Yes |

----------------------------------------

TITLE: Copying kubeconfig to control cluster from another machine
DESCRIPTION: Commands to copy the kubeconfig file from the control-plane node to another machine for cluster management.

LANGUAGE: bash
CODE:
scp root@<control-plane-host>:/etc/kubernetes/admin.conf .
kubectl --kubeconfig ./admin.conf get nodes

----------------------------------------

TITLE: PersistentVolumeClaimSpec Definition
DESCRIPTION: Specification for a PersistentVolumeClaim

LANGUAGE: go
CODE:
type PersistentVolumeClaimSpec struct {
  AccessModes []string
  Selector *metav1.LabelSelector
  Resources VolumeResourceRequirements
  VolumeName string
  StorageClassName *string
  VolumeMode *string
  DataSource *TypedLocalObjectReference
  DataSourceRef *TypedObjectReference
  VolumeAttributesClassName *string
}

----------------------------------------

TITLE: Listing Services in a Specific Namespace
DESCRIPTION: These commands list the services running in the 'mytunes-staging' and 'mytunes-prod' namespaces, showing how the same service names can exist in different namespaces with different IP addresses.

LANGUAGE: bash
CODE:
~$ kubectl get services --namespace=mytunes-staging

LANGUAGE: bash
CODE:
~$ kubectl get services --namespace=mytunes-prod

----------------------------------------

TITLE: Creating Multi-Zone Kubernetes Cluster on AWS
DESCRIPTION: Command to create a new Kubernetes cluster on Amazon EC2 with multi-zone support enabled

LANGUAGE: bash
CODE:
curl -sS https://get.k8s.io | MULTIZONE=true KUBERNETES_PROVIDER=aws KUBE_AWS_ZONE=us-west-2a NUM_NODES=3 bash

----------------------------------------

TITLE: 定义 LoadBalancer 类型 Service
DESCRIPTION: 创建一个 LoadBalancer 类型的 Service,指定 selector 和多个端口

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Service
metadata:
  name: my-service
spec:
  selector:
    app.kubernetes.io/name: MyApp
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 9376
    - name: https 
      protocol: TCP
      port: 443
      targetPort: 9377
  type: LoadBalancer

----------------------------------------

TITLE: Retrieving a PersistentVolume in Kubernetes
DESCRIPTION: This command retrieves information about a specific PersistentVolume (PV) by its name. It's used to check the status of a PV after attempting to delete it.

LANGUAGE: bash
CODE:
kubectl get pv pvc-6791fdd4-5fad-438e-a7fb-16410363e3da

----------------------------------------

TITLE: Configuring Kubernetes Documentation Resources
DESCRIPTION: YAML configuration that defines resource mappings for different Kubernetes API stability levels. Uses wildcards to match content files and assigns corresponding titles for alpha, beta, deprecated and stable resources.

LANGUAGE: yaml
CODE:
headless: true

resources:
- src: "*alpha*"
  title: "alpha"
- src: "*beta*"
  title: "beta"
- src: "*deprecated*"
  title: "deprecated"
- src: "*stable*"
  title: "stable"

----------------------------------------

TITLE: Discovering Kubernetes Services Using kubectl
DESCRIPTION: Command to list all services running in the Kubernetes cluster using kubectl cluster-info

LANGUAGE: shell
CODE:
kubectl cluster-info

----------------------------------------

TITLE: Configuring CSIMigrationPortworx Feature Gate in Kubernetes
DESCRIPTION: YAML configuration that defines the feature gate stages for Portworx CSI migration. Specifies alpha stage from v1.23-1.24 (defaultValue: false), beta stage from v1.25-1.30 (defaultValue: false), and beta stage from v1.31 onwards (defaultValue: true). Requires Portworx CSI driver installation.

LANGUAGE: yaml
CODE:
title: CSIMigrationPortworx
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha
    defaultValue: false
    fromVersion: "1.23"
    toVersion: "1.24"
  - stage: beta
    defaultValue: false
    fromVersion: "1.25"
    toVersion: "1.30"
  - stage: beta
    defaultValue: true
    fromVersion: "1.31"

----------------------------------------

TITLE: Applying StorageVersionMigration for Secrets in Kubernetes
DESCRIPTION: This shell command applies the StorageVersionMigration object for secrets using kubectl.

LANGUAGE: shell
CODE:
kubectl apply -f migrate-secret.yaml

----------------------------------------

TITLE: Listing join tokens
DESCRIPTION: Command to list available join tokens on the control-plane node.

LANGUAGE: bash
CODE:
kubeadm token list

----------------------------------------

TITLE: Formatting Code Blocks in Kubernetes Documentation
DESCRIPTION: Demonstrates how to create code blocks using back-ticks and specify language for syntax highlighting in Kubernetes docs.

LANGUAGE: markdown
CODE:
```bash
ls -l
```

----------------------------------------

TITLE: Port Forwarding in Kubernetes
DESCRIPTION: Demonstrates how to use kubectl port-forward to securely forward a local port to a pod in the cluster.

LANGUAGE: console
CODE:
$> kubectl port-forward redis-izl09 6379

----------------------------------------

TITLE: Listing Kubernetes Namespaces
DESCRIPTION: This command retrieves a list of all namespaces in the Kubernetes cluster, showing different environments and applications.

LANGUAGE: bash
CODE:
~$ kubectl get namespaces

----------------------------------------

TITLE: Verifying Container Requests in Kubernetes using kubectl
DESCRIPTION: Bash command to retrieve container resource requests using kubectl and jsonpath.

LANGUAGE: bash
CODE:
kubectl get pod test-pod -o jsonpath='{.spec.containers[*].resources.limits}'

----------------------------------------

TITLE: Defining a Non-preempting PriorityClass
DESCRIPTION: Example YAML for creating a PriorityClass that does not trigger preemption of other Pods.

LANGUAGE: yaml
CODE:
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: high-priority-nonpreempting
value: 1000000
preemptionPolicy: Never
globalDefault: false
description: "This priority class will not cause other pods to be preempted."

----------------------------------------

TITLE: Initializing Repository Dependencies on Linux/Unix
DESCRIPTION: Command to fetch Git submodule dependencies for the Kubernetes documentation on Linux/Unix systems.

LANGUAGE: bash
CODE:
make module-init

----------------------------------------

TITLE: Defining a Pod with Node Selector for Specific Node Allocation
DESCRIPTION: This YAML snippet shows how to create a Pod with a node selector to run on a specific node while still going through the normal scheduling flow.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: pod-with-cats
spec:
  nodeSelector:
    kubernetes.io/hostname: name-of-the-intended-node
  ...

----------------------------------------

TITLE: Creating a Kubernetes Namespace using YAML
DESCRIPTION: This YAML configuration defines a new Kubernetes namespace named 'my-namespace' with a label. It specifies the kind, API version, and metadata for the namespace.

LANGUAGE: yaml
CODE:
kind: Namespace
apiVersion: v1
metadata:
 name: my-namespace
 labels:
   name: my-namespace

----------------------------------------

TITLE: Configuring CSIMigrationAzureDisk Feature Gate Stages in YAML
DESCRIPTION: YAML configuration defining the lifecycle stages of the CSIMigrationAzureDisk feature gate, including its progression from alpha through stable and eventual removal. Specifies version ranges and default values for each stage.

LANGUAGE: yaml
CODE:
stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.15"
    toVersion: "1.18"
  - stage: beta
    defaultValue: false
    fromVersion: "1.19"  
    toVersion: "1.22" 
  - stage: beta
    defaultValue: true
    fromVersion: "1.23"  
    toVersion: "1.23" 
  - stage: stable
    defaultValue: true
    fromVersion: "1.24"
    toVersion: "1.26"

----------------------------------------

TITLE: Setting up kubectl for root user
DESCRIPTION: Alternative command to set up kubectl configuration if running as root user.

LANGUAGE: bash
CODE:
export KUBECONFIG=/etc/kubernetes/admin.conf

----------------------------------------

TITLE: Root User kubectl Configuration
DESCRIPTION: Command to configure kubectl for the root user by setting the KUBECONFIG environment variable.

LANGUAGE: bash
CODE:
export KUBECONFIG=/etc/kubernetes/admin.conf

----------------------------------------

TITLE: Creating a Kubernetes cluster with autoscaling enabled
DESCRIPTION: Runs the kube-up.sh script to create a Kubernetes cluster with the Cluster Autoscaler add-on enabled based on the previously set environment variables.

LANGUAGE: bash
CODE:
./cluster/kube-up.sh

----------------------------------------

TITLE: Configuring Tracing for Kubernetes API Server
DESCRIPTION: This YAML configuration enables tracing for the Kubernetes API server, setting a sampling rate of 1 in 10000 requests and using the default OpenTelemetry endpoint.

LANGUAGE: yaml
CODE:
apiVersion: apiserver.config.k8s.io/v1beta1
kind: TracingConfiguration
# default value
#endpoint: localhost:4317
samplingRatePerMillion: 100

----------------------------------------

TITLE: Creating a Basic NGINX Service
DESCRIPTION: YAML configuration for exposing NGINX pods as a Kubernetes Service.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Service
metadata:
  name: my-nginx
  labels:
    run: my-nginx
spec:
  ports:
  - port: 80
    protocol: TCP
  selector:
    run: my-nginx

----------------------------------------

TITLE: Creating a Basic NGINX Service
DESCRIPTION: YAML configuration for exposing NGINX pods as a Kubernetes Service.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Service
metadata:
  name: my-nginx
  labels:
    run: my-nginx
spec:
  ports:
  - port: 80
    protocol: TCP
  selector:
    run: my-nginx

----------------------------------------

TITLE: VolumeAttributesClass HTTP PUT Operation
DESCRIPTION: HTTP request format for replacing an existing VolumeAttributesClass resource

LANGUAGE: http
CODE:
PUT /apis/storage.k8s.io/v1beta1/volumeattributesclasses/{name}

----------------------------------------

TITLE: Feature Gate Configuration YAML
DESCRIPTION: YAML configuration defining the lifecycle stages of the CSIMigrationAzureFileComplete feature gate, including its alpha stage from version 1.17 to 1.20 and deprecation in version 1.21.

LANGUAGE: yaml
CODE:
stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.17"
    toVersion: "1.20"
  - stage: deprecated
    fromVersion: "1.21"
    toVersion: "1.21"

removed: true

----------------------------------------

TITLE: Creating a Pod with Assigned Priority
DESCRIPTION: Example YAML for creating a Pod that uses a defined PriorityClass.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: nginx
  labels:
    env: test
spec:
  containers:
  - name: nginx
    image: nginx
    imagePullPolicy: IfNotPresent
  priorityClassName: high-priority

----------------------------------------

TITLE: Setting the kubernetes.io/change-cause annotation
DESCRIPTION: Example of setting the kubernetes.io/change-cause annotation on an object to record the reason for a change.

LANGUAGE: yaml
CODE:
kubernetes.io/change-cause: "kubectl edit --record deployment foo"

----------------------------------------

TITLE: Verifying Kubernetes Deployment with kubectl
DESCRIPTION: This bash command uses kubectl to list the pods, services, and deployments created by Kompose, showing the successful deployment of the Guestbook application on Kubernetes.

LANGUAGE: bash
CODE:
$ kubectl get pods,svc,deployments
NAME                             READY        STATUS        RESTARTS     AGE
frontend-3780173733-0ayyx        1/1          Running       0            1m
redis-master-3028862641-8miqn    1/1          Running       0            1m
redis-slave-3788432149-t3ejp     1/1          Running       0            1m
NAME                             CLUSTER-IP   EXTERNAL-IP   PORT(S)      AGE
frontend                         10.0.0.34    \<none\>        80/TCP       1m
redis-master                     10.0.0.219   \<none\>        6379/TCP     1m
redis-slave                      10.0.0.84    \<none\>        6379/TCP     1m
NAME                             DESIRED      CURRENT       UP-TO-DATE

AVAILABLE   AGE
frontend                         1            1             1            1           1m
redis-master                     1            1             1            1           1m
redis-slave                      1            1             1            1           1m

----------------------------------------

TITLE: Defining Fanout Configuration in Ingress YAML
DESCRIPTION: YAML configuration for an Ingress with fanout routing, directing traffic to multiple services based on URL paths.

LANGUAGE: yaml
CODE:
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: simple-fanout-example
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - host: foo.bar.com
    http:
      paths:
      - path: /foo
        pathType: Prefix
        backend:
          service:
            name: service1
            port:
              number: 4200
      - path: /bar
        pathType: Prefix
        backend:
          service:
            name: service2
            port:
              number: 8080

----------------------------------------

TITLE: Examining iptables Rules for Services
DESCRIPTION: Lists iptables rules related to the 'hostnames' Service

LANGUAGE: bash
CODE:
iptables-save | grep hostnames

----------------------------------------

TITLE: Java Client Example for Kubernetes API
DESCRIPTION: Example of using the Java client library to access the Kubernetes API.

LANGUAGE: java
CODE:
package io.kubernetes.client.examples;

import io.kubernetes.client.ApiClient;
import io.kubernetes.client.ApiException;
import io.kubernetes.client.Configuration;
import io.kubernetes.client.apis.CoreV1Api;
import io.kubernetes.client.models.V1Pod;
import io.kubernetes.client.models.V1PodList;
import io.kubernetes.client.util.ClientBuilder;
import io.kubernetes.client.util.KubeConfig;
import java.io.FileReader;
import java.io.IOException;

public class KubeConfigFileClientExample {
  public static void main(String[] args) throws IOException, ApiException {
    String kubeConfigPath = "~/.kube/config";
    ApiClient client =
        ClientBuilder.kubeconfig(KubeConfig.loadKubeConfig(new FileReader(kubeConfigPath))).build();
    Configuration.setDefaultApiClient(client);
    CoreV1Api api = new CoreV1Api();
    V1PodList list = api.listPodForAllNamespaces(null, null, null, null, null, null, null, null, null);
    System.out.println("Listing all pods: ");
    for (V1Pod item : list.getItems()) {
      System.out.println(item.getMetadata().getName());
    }
  }
}

----------------------------------------

TITLE: Configuring PodSecurity Feature Gate in Kubernetes YAML
DESCRIPTION: This YAML configuration defines the PodSecurity feature gate for Kubernetes. It specifies the feature's stages from alpha to stable across versions 1.22 to 1.27, including default values and version ranges. The feature is marked as removed.

LANGUAGE: yaml
CODE:
# Removed from Kubernetes
title: PodSecurity
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.22"
    toVersion: "1.22"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.23"
    toVersion: "1.24"
  - stage: stable
    defaultValue: true
    fromVersion: "1.25"
    toVersion: "1.27"

removed: true

----------------------------------------

TITLE: Configuring PodSecurity Feature Gate in Kubernetes YAML
DESCRIPTION: This YAML configuration defines the PodSecurity feature gate for Kubernetes. It specifies the feature's stages from alpha to stable across versions 1.22 to 1.27, including default values and version ranges. The feature is marked as removed.

LANGUAGE: yaml
CODE:
# Removed from Kubernetes
title: PodSecurity
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.22"
    toVersion: "1.22"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.23"
    toVersion: "1.24"
  - stage: stable
    defaultValue: true
    fromVersion: "1.25"
    toVersion: "1.27"

removed: true

----------------------------------------

TITLE: Creating Namespace for Memory Limits Example
DESCRIPTION: Creates a new Kubernetes namespace to isolate the memory limit configuration examples.

LANGUAGE: shell
CODE:
kubectl create namespace default-mem-example

----------------------------------------

TITLE: CSIServiceAccountToken Feature Gate Configuration in YAML
DESCRIPTION: YAML configuration defining the lifecycle stages of the CSIServiceAccountToken feature gate, from alpha through stable before removal. Includes version ranges and default values for each stage.

LANGUAGE: yaml
CODE:
title: CSIServiceAccountToken
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.20"
    toVersion: "1.20"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.21"
    toVersion: "1.21"    
  - stage: stable
    defaultValue: true
    fromVersion: "1.22"
    toVersion: "1.24"

removed: true

----------------------------------------

TITLE: Fetching Signed Kubernetes Container Images List
DESCRIPTION: Shell command to retrieve the list of signed Kubernetes container images in SPDX 2.3 format. The command fetches the stable release version and filters the registry.k8s.io packages.

LANGUAGE: shell
CODE:
curl -Ls "https://sbom.k8s.io/$(curl -Ls https://dl.k8s.io/release/stable.txt)/release" | grep "SPDXID: SPDXRef-Package-registry.k8s.io" |  grep -v sha256 | cut -d- -f3- | sed 's/-/\///' | sed 's/-v1/:v1/'

----------------------------------------

TITLE: Création d'un PVC à partir d'un snapshot
DESCRIPTION: Exemple de création d'un PersistentVolumeClaim à partir d'un snapshot de volume

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: restore-pvc
spec:
  storageClassName: csi-hostpath-sc
  dataSource:
    name: new-snapshot-test
    kind: VolumeSnapshot
    apiGroup: snapshot.storage.k8s.io
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

----------------------------------------

TITLE: Checking Kubernetes Version with kubectl
DESCRIPTION: This snippet shows how to check the Kubernetes client and server versions using kubectl.

LANGUAGE: shell
CODE:
kubectl version

----------------------------------------

TITLE: Creating RoleBinding for Group Access in Kubernetes
DESCRIPTION: This snippet shows how to create a RoleBinding to grant the 'infra' group edit permissions within the 'dev' namespace. It also demonstrates how to verify the namespace-specific permissions.

LANGUAGE: bash
CODE:
$ kubectl create rolebinding infra --clusterrole=edit --group=infra --namespace=dev

rolebinding "infra" created

$ kubectl get deployments --as=dave --as-group=infra --namespace dev

No resources found.

$ kubectl get deployments --as=dave --as-group=infra --namespace prod

Error from server (Forbidden): deployments.extensions is forbidden: User "dave" cannot list deployments.extensions in the namespace "prod".

----------------------------------------

TITLE: Defining Multiple Topology Spread Constraints for Pods
DESCRIPTION: This YAML snippet defines a pod spec with two topology spread constraints to evenly distribute pods across both zones and nodes.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: mypod
spec:
  topologySpreadConstraints:
    - maxSkew: 1
      topologyKey: zone
      whenUnsatisfiable: DoNotSchedule
      labelSelector:
        matchLabels:
          foo: bar
    - maxSkew: 1
      topologyKey: node
      whenUnsatisfiable: DoNotSchedule
      labelSelector:
        matchLabels:
          foo: bar
  containers:
  - name: pause
    image: k8s.gcr.io/pause:3.1

----------------------------------------

TITLE: Viewing ZooKeeper Logs
DESCRIPTION: Command to view the logs of a ZooKeeper Pod.

LANGUAGE: bash
CODE:
kubectl logs zk-0 --tail 20

----------------------------------------

TITLE: Listing Cozystack API Resources
DESCRIPTION: Shows how to list all API resources provided by Cozystack using kubectl.

LANGUAGE: shell
CODE:
kubectl api-resources | grep cozystack

----------------------------------------

TITLE: Configuring CoreDNS with Custom Stub Domain and Upstream Nameserver
DESCRIPTION: This YAML snippet demonstrates how to configure CoreDNS with a custom stub domain for Consul and force all non-cluster DNS lookups through a specific nameserver. It includes the default configuration along with the custom settings.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: ConfigMap
metadata:
  name: coredns
  namespace: kube-system
data:
  Corefile: |
    .:53 {
        errors
        health
        kubernetes cluster.local in-addr.arpa ip6.arpa {
           pods insecure
           fallthrough in-addr.arpa ip6.arpa
        }
        prometheus :9153
        forward . 172.16.0.1
        cache 30
        loop
        reload
        loadbalance
    }
    consul.local:53 {
        errors
        cache 30
        forward . 10.150.0.1
    }

----------------------------------------

TITLE: Configuring GracefulNodeShutdownBasedOnPodPriority Feature Gate in YAML
DESCRIPTION: YAML configuration for the GracefulNodeShutdownBasedOnPodPriority feature gate showing its stages from alpha to beta, including version information and default values.

LANGUAGE: yaml
CODE:
title: GracefulNodeShutdownBasedOnPodPriority
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha
    defaultValue: false
    fromVersion: "1.23"
    toVersion: "1.23"
  - stage: beta
    defaultValue: true
    fromVersion: "1.24"

----------------------------------------

TITLE: Configuring ClusterTrustBundle Feature Gate in YAML
DESCRIPTION: YAML configuration for the ClusterTrustBundle feature gate, specifying its stage, default value, and version information. This feature gate controls the enablement of ClusterTrustBundle objects and their integration with kubelet.

LANGUAGE: yaml
CODE:
title: ClusterTrustBundle
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha
    defaultValue: false
    fromVersion: "1.27"

----------------------------------------

TITLE: Defining YAML Front Matter for Kubernetes Blog Post
DESCRIPTION: This YAML snippet defines the metadata for the blog post, including title, date, author, and layout.

LANGUAGE: yaml
CODE:
---
layout: blog
title: 'Kubernetes 1.21: CronJob Reaches GA'
date: 2021-04-09
slug: kubernetes-release-1.21-cronjob-ga
author: >
   Alay Patel (Red Hat),
   Maciej Szulik (Red Hat)
---

----------------------------------------

TITLE: Configuring a Single Service Ingress
DESCRIPTION: An Ingress that routes all traffic to a single backend service without any rules.

LANGUAGE: yaml
CODE:
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: test-ingress
spec:
  defaultBackend:
    service:
      name: test
      port:
        number: 80

----------------------------------------

TITLE: Chaining Kubernetes Operations
DESCRIPTION: Examples of chaining kubectl operations using command substitution and xargs for more complex operations.

LANGUAGE: shell
CODE:
kubectl get $(kubectl create -f docs/concepts/cluster-administration/nginx/ -o name | grep service/ )
kubectl create -f docs/concepts/cluster-administration/nginx/ -o name | grep service/ | xargs -i kubectl get '{}'

LANGUAGE: none
CODE:
NAME           TYPE           CLUSTER-IP   EXTERNAL-IP   PORT(S)      AGE
my-nginx-svc   LoadBalancer   10.0.0.208   <pending>     80/TCP       0s

----------------------------------------

TITLE: Adding Kubernetes Environments in Kubeflow
DESCRIPTION: Commands to add minikube and GKE environments to a Kubeflow application using ksonnet.

LANGUAGE: bash
CODE:
kubectl config use-context minikube
ks env add minikube

kubectl config use-context gke
ks env add gke

----------------------------------------

TITLE: Job con TTL
DESCRIPTION: Ejemplo de configuración YAML para un Job con un tiempo de vida (TTL) después de finalizar

LANGUAGE: yaml
CODE:
apiVersion: batch/v1
kind: Job
metadata:
  name: pi-with-ttl
spec:
  ttlSecondsAfterFinished: 100
  template:
    spec:
      containers:
      - name: pi
        image: perl
        command: ["perl",  "-Mbignum=bpi", "-wle", "print bpi(2000)"]
      restartPolicy: Never

----------------------------------------

TITLE: HorizontalPodAutoscaler with Multiple Metrics
DESCRIPTION: YAML example of a HorizontalPodAutoscaler using multiple metrics including CPU, custom pod metrics, and custom object metrics.

LANGUAGE: yaml
CODE:
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: php-apache
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: php-apache
  minReplicas: 1
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 50
  - type: Pods
    pods:
      metric:
        name: packets-per-second
      target:
        type: AverageValue
        averageValue: 1k
  - type: Object
    object:
      metric:
        name: requests-per-second
      describedObject:
        apiVersion: networking.k8s.io/v1
        kind: Ingress
        name: main-route
      target:
        type: Value
        value: 10k

----------------------------------------

TITLE: Deploying Podinfo Application with Zarf
DESCRIPTION: Creates and deploys a Zarf package for the Podinfo application.

LANGUAGE: bash
CODE:
echo 'kind: ZarfPackageConfig
metadata:
    name: podinfo
    description: "Deploy helm chart for the podinfo application in K8s via zarf"
components:
    - name: podinfo
        required: true
        charts:
            - name: podinfo
              version: 6.4.0
              namespace: podinfo-helm-namespace
              releaseName: podinfo
              url: https://stefanprodan.github.io/podinfo
        images:
        - ghcr.io/stefanprodan/podinfo:6.4.0' > zarf.yaml

zarf package create --confirm

zarf package deploy

----------------------------------------

TITLE: Example LimitRange Configuration
DESCRIPTION: YAML configuration showing memory constraints with minimum 500Mi and maximum 1Gi

LANGUAGE: yaml
CODE:
  limits:
  - default:
      memory: 1Gi
    defaultRequest:
      memory: 1Gi
    max:
      memory: 1Gi
    min:
      memory: 500Mi
    type: Container

----------------------------------------

TITLE: Example LimitRange Configuration
DESCRIPTION: YAML configuration showing memory constraints with minimum 500Mi and maximum 1Gi

LANGUAGE: yaml
CODE:
  limits:
  - default:
      memory: 1Gi
    defaultRequest:
      memory: 1Gi
    max:
      memory: 1Gi
    min:
      memory: 500Mi
    type: Container

----------------------------------------

TITLE: CronTab Custom Resource Instance
DESCRIPTION: Example of creating a custom resource instance of the CronTab kind

LANGUAGE: yaml
CODE:
apiVersion: "stable.example.com/v1"
kind: CronTab
metadata:
  name: my-new-cron-object
spec:
  cronSpec: "* * * * */5"
  image: my-awesome-cron-image

----------------------------------------

TITLE: Configuring ComponentSLIs Feature Gate in Kubernetes YAML
DESCRIPTION: YAML configuration for the ComponentSLIs feature gate showing its stages from alpha to beta. The feature was introduced as alpha in Kubernetes 1.26 and promoted to beta with default enabled in 1.27.

LANGUAGE: yaml
CODE:
title: ComponentSLIs
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.26"
    toVersion: "1.26"
  - stage: beta
    defaultValue: true
    fromVersion: "1.27"

----------------------------------------

TITLE: Configuring Exception List for Windows Networking in Kubernetes
DESCRIPTION: Example configuration for the ExceptionList in cni.conf to exclude certain subnets from outbound NAT for proper cluster communication.

LANGUAGE: conf
CODE:
"ExceptionList": [
    "10.244.0.0/16",  # Cluster subnet
    "10.96.0.0/12",   # Service subnet
    "10.127.130.0/24" # Management (host) subnet
]

----------------------------------------

TITLE: Editing an Existing Kubernetes Secret with kubectl
DESCRIPTION: This command opens the default editor to modify an existing Secret. It shows an example of the YAML structure for a Secret object.

LANGUAGE: shell
CODE:
kubectl edit secrets <secret-name>

LANGUAGE: yaml
CODE:
apiVersion: v1
data:
  password: UyFCXCpkJHpEc2I9
  username: YWRtaW4=
kind: Secret
metadata:
  creationTimestamp: "2022-06-28T17:44:13Z"
  name: db-user-pass
  namespace: default
  resourceVersion: "12708504"
  uid: 91becd59-78fa-4c85-823f-6d44436242ac
type: Opaque

----------------------------------------

TITLE: Defining a PersistentVolume for Pre-Provisioned CSI Storage in Kubernetes
DESCRIPTION: This YAML snippet creates a PersistentVolume object to represent a pre-existing CSI volume. It specifies details such as capacity, access mode, reclaim policy, and CSI-specific attributes.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: PersistentVolume
metadata:
  name: my-manually-created-pv
spec:
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  csi:
    driver: com.example.csi-driver
    volumeHandle: existingVolumeName
    readOnly: false
    fsType: ext4
    volumeAttributes:
      foo: bar
    controllerPublishSecretRef:
      name: mysecret1
      namespace: mynamespace
    nodeStageSecretRef:
      name: mysecret2
      namespace: mynamespace
    nodePublishSecretRef:
      name: mysecret3
      namespace: mynamespace

----------------------------------------

TITLE: Viendo logs de un Pod de Job
DESCRIPTION: Comando kubectl para ver los logs de un Pod asociado a un Job

LANGUAGE: shell
CODE:
kubectl logs $pods

----------------------------------------

TITLE: Checking Redis Cluster Replication Status
DESCRIPTION: Executes a command in the Redis cluster to check the replication status and node information.

LANGUAGE: bash
CODE:
kubectl exec -it redis-redis-cluster-0 -- /bin/bash -c \
  "redis-cli -c -h redis-redis-cluster -a $(kubectl get secret redis-redis-cluster -o jsonpath="{.data.redis-password}" | base64 -d) CLUSTER NODES;"

----------------------------------------

TITLE: Retrieving Kubernetes CVE Feed in RSS Format
DESCRIPTION: This command retrieves the Kubernetes CVE feed in RSS format using curl. It accesses the feed from the official Kubernetes documentation website.

LANGUAGE: shell
CODE:
curl -Lv https://k8s.io/docs/reference/issues-security/official-cve-feed/feed.xml

----------------------------------------

TITLE: Retrieving Kubernetes CVE Feed in RSS Format
DESCRIPTION: This command retrieves the Kubernetes CVE feed in RSS format using curl. It accesses the feed from the official Kubernetes documentation website.

LANGUAGE: shell
CODE:
curl -Lv https://k8s.io/docs/reference/issues-security/official-cve-feed/feed.xml

----------------------------------------

TITLE: kubectl set env Usage Examples
DESCRIPTION: Collection of examples showing different ways to use kubectl set env command including updating deployments, listing variables, importing from secrets/configmaps, and removing variables

LANGUAGE: bash
CODE:
  # Update deployment 'registry' with a new environment variable
  kubectl set env deployment/registry STORAGE_DIR=/local
  
  # List the environment variables defined on a deployments 'sample-build'
  kubectl set env deployment/sample-build --list
  
  # List the environment variables defined on all pods
  kubectl set env pods --all --list
  
  # Output modified deployment in YAML, and does not alter the object on the server
  kubectl set env deployment/sample-build STORAGE_DIR=/data -o yaml
  
  # Update all containers in all replication controllers in the project to have ENV=prod
  kubectl set env rc --all ENV=prod
  
  # Import environment from a secret
  kubectl set env --from=secret/mysecret deployment/myapp
  
  # Import environment from a config map with a prefix
  kubectl set env --from=configmap/myconfigmap --prefix=MYSQL_ deployment/myapp
  
  # Import specific keys from a config map
  kubectl set env --keys=my-example-key --from=configmap/myconfigmap deployment/myapp
  
  # Remove the environment variable ENV from container 'c1' in all deployment configs
  kubectl set env deployments --all --containers="c1" ENV-
  
  # Remove the environment variable ENV from a deployment definition on disk and
  # update the deployment config on the server
  kubectl set env -f deploy.json ENV-
  
  # Set some of the local shell environment into a deployment config on the server
  env | grep RAILS_ | kubectl set env -e - deployment/registry

----------------------------------------

TITLE: Running Kubernetes Documentation Update Script
DESCRIPTION: Commands showing how to execute the update-imported-docs script. The script requires two parameters: a configuration YAML file and the Kubernetes release version number.

LANGUAGE: shell
CODE:
./update-imported-docs <configuration-file.yml> <k8s_release>

LANGUAGE: shell
CODE:
./update-imported-docs reference.yml 1.17

----------------------------------------

TITLE: Disabling Cloud Provider Feature Gates in Kubernetes Components
DESCRIPTION: Command line flag to disable the DisableCloudProviders and DisableKubeletCloudCredentialProviders feature gates for kube-apiserver, kube-controller-manager, and kubelet components. This allows continued use of in-tree cloud provider code.

LANGUAGE: bash
CODE:
--feature-gates=DisableCloudProviders=false,DisableKubeletCloudCredentialProviders=false

----------------------------------------

TITLE: Checking Node Resource Allocation in Kubernetes
DESCRIPTION: Bash command to check resource allocation for a specific Pod on a node using kubectl describe.

LANGUAGE: bash
CODE:
kubectl describe node | grep test-pod -B2

----------------------------------------

TITLE: Deleting a Kubernetes Secret using kubectl
DESCRIPTION: This command demonstrates how to delete a Secret named 'db-user-pass' using kubectl.

LANGUAGE: shell
CODE:
kubectl delete secret db-user-pass

----------------------------------------

TITLE: Embedding YouTube Video in Markdown
DESCRIPTION: This snippet demonstrates how to embed a YouTube video in a Markdown document using HTML iframe tags. The video is centered and has specific dimensions set.

LANGUAGE: markdown
CODE:
<center><iframe width="560" height="315" src="https://www.youtube.com/embed/YrxnVKZeqK8" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></center>

----------------------------------------

TITLE: Configuring GCE PD StorageClass
DESCRIPTION: Example configuration for a Google Compute Engine Persistent Disk StorageClass, specifying disk type, filesystem type, and replication options.

LANGUAGE: yaml
CODE:
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: slow
provisioner: kubernetes.io/gce-pd
parameters:
  type: pd-standard
  fstype: ext4
  replication-type: none

----------------------------------------

TITLE: NormalizeScore Plugin Implementation in Go
DESCRIPTION: Example implementation of a normalize score plugin that adjusts raw scores to fit within NodeScoreMax range

LANGUAGE: go
CODE:
func NormalizeScores(scores map[string]int) {
    highest := 0
    for _, score := range scores {
        highest = max(highest, score)
    }
    for node, score := range scores {
        scores[node] = score*NodeScoreMax/highest
    }
}

----------------------------------------

TITLE: Setting Up Encrypted Swap Space
DESCRIPTION: Bash commands for creating and configuring a 4GiB encrypted swap file using cryptsetup, including storage allocation, encryption setup, formatting, and activation.

LANGUAGE: bash
CODE:
# Allocate storage and restrict access
fallocate --length 4GiB /swapfile
chmod 600 /swapfile

# Create an encrypted device backed by the allocated storage
cryptsetup --type plain --cipher aes-xts-plain64 --key-size 256 -d /dev/urandom open /swapfile cryptswap

# Format the swap space
mkswap /dev/mapper/cryptswap

# Activate the swap space for paging
swapon /dev/mapper/cryptswap

----------------------------------------

TITLE: Configuring APIServerIdentity Feature Gate in Kubernetes
DESCRIPTION: YAML configuration specifying the feature gate stages and default values. The feature was introduced as alpha in Kubernetes 1.20 with default value false, and promoted to beta in 1.26 with default value true.

LANGUAGE: yaml
CODE:
title: APIServerIdentity
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha
    defaultValue: false
    fromVersion: "1.20"
    toVersion: "1.25"
  - stage: beta
    defaultValue: true
    fromVersion: "1.26"

----------------------------------------

TITLE: Configuring APIServerIdentity Feature Gate in Kubernetes
DESCRIPTION: YAML configuration specifying the feature gate stages and default values. The feature was introduced as alpha in Kubernetes 1.20 with default value false, and promoted to beta in 1.26 with default value true.

LANGUAGE: yaml
CODE:
title: APIServerIdentity
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha
    defaultValue: false
    fromVersion: "1.20"
    toVersion: "1.25"
  - stage: beta
    defaultValue: true
    fromVersion: "1.26"

----------------------------------------

TITLE: VolumeAttributesClass HTTP DELETE Operation
DESCRIPTION: HTTP request format for deleting a VolumeAttributesClass resource

LANGUAGE: http
CODE:
DELETE /apis/storage.k8s.io/v1beta1/volumeattributesclasses/{name}

----------------------------------------

TITLE: Creating DNS Test Pod in Kubernetes
DESCRIPTION: Creates a test pod named 'dnsutils' in the default namespace for DNS debugging purposes

LANGUAGE: shell
CODE:
kubectl apply -f https://k8s.io/examples/admin/dns/dnsutils.yaml

----------------------------------------

TITLE: Defining a GatewayClass in Kubernetes
DESCRIPTION: This YAML snippet demonstrates how to define a minimal GatewayClass, which specifies the controller name for managing Gateways of this class.

LANGUAGE: yaml
CODE:
apiVersion: gateway.networking.k8s.io/v1
kind: GatewayClass
metadata:
  name: example-class
spec:
  controllerName: example.com/gateway-controller

----------------------------------------

TITLE: Example: Creating TLS Secret in Kubernetes
DESCRIPTION: Example command to create a new TLS secret named tls-secret using the specified certificate and key files.

LANGUAGE: shell
CODE:
kubectl create secret tls tls-secret --cert=path/to/tls.crt --key=path/to/tls.key

----------------------------------------

TITLE: Checking Pod Owner References in Kubernetes
DESCRIPTION: Command to inspect the ownerReferences field of nginx pods to view their ownership relationships.

LANGUAGE: shell
CODE:
kubectl get pods -l app=nginx --output=yaml

LANGUAGE: yaml
CODE:
apiVersion: v1
    ...
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: nginx-deployment-6b474476c4
      uid: 4fdcd81c-bd5d-41f7-97af-3a3b759af9a7
    ...

----------------------------------------

TITLE: Using kubectl certificate deny Command
DESCRIPTION: This snippet shows the basic syntax for using the 'kubectl certificate deny' command. It can be used with either a filename (-f flag) or the name of the CSR to be denied.

LANGUAGE: bash
CODE:
kubectl certificate deny (-f FILENAME | NAME)

----------------------------------------

TITLE: Defining a Basic StorageClass in Kubernetes
DESCRIPTION: Example YAML configuration for a basic StorageClass resource in Kubernetes specifying provisioner, parameters, reclaim policy, and other options.

LANGUAGE: yaml
CODE:
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: standard
provisioner: kubernetes.io/aws-ebs
parameters:
  type: gp2
reclaimPolicy: Retain
allowVolumeExpansion: true
mountOptions:
  - debug
volumeBindingMode: Immediate

----------------------------------------

TITLE: Pod with hostNetwork DNS Policy Example
DESCRIPTION: Example YAML showing Pod configuration with hostNetwork and ClusterFirstWithHostNet DNS policy

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: busybox
  namespace: default
spec:
  containers:
  - image: busybox:1.28
    command:
      - sleep
      - "3600"
    imagePullPolicy: IfNotPresent
    name: busybox
  restartPolicy: Always
  hostNetwork: true
  dnsPolicy: ClusterFirstWithHostNet

----------------------------------------

TITLE: Creating a Basic ValidatingAdmissionPolicy in Kubernetes
DESCRIPTION: Example of a ValidatingAdmissionPolicy that limits the number of replicas in a Deployment to 5.

LANGUAGE: yaml
CODE:
apiVersion: admissionregistration.k8s.io/v1beta1
kind: ValidatingAdmissionPolicy
metadata:
  name: "demo-policy.example.com"
spec:
  failurePolicy: Fail
  matchConstraints:
    resourceRules:
    - apiGroups:   ["apps"]
      apiVersions: ["v1"]
      operations:  ["CREATE", "UPDATE"]
      resources:   ["deployments"]
  validations:
  - expression: "object.spec.replicas <= 5"


----------------------------------------

TITLE: Configuring Webhook Token Authentication
DESCRIPTION: Example kubeconfig file for configuring webhook token authentication with the API server

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Config
clusters:
  - name: name-of-remote-authn-service
    cluster:
      certificate-authority: /path/to/ca.pem
      server: https://authn.example.com/authenticate
users:
  - name: name-of-api-server
    user:
      client-certificate: /path/to/cert.pem
      client-key: /path/to/key.pem
current-context: webhook
contexts:
- context:
    cluster: name-of-remote-authn-service
    user: name-of-api-server
  name: webhook

----------------------------------------

TITLE: Configuring Webhook Token Authentication
DESCRIPTION: Example kubeconfig file for configuring webhook token authentication with the API server

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Config
clusters:
  - name: name-of-remote-authn-service
    cluster:
      certificate-authority: /path/to/ca.pem
      server: https://authn.example.com/authenticate
users:
  - name: name-of-api-server
    user:
      client-certificate: /path/to/cert.pem
      client-key: /path/to/key.pem
current-context: webhook
contexts:
- context:
    cluster: name-of-remote-authn-service
    user: name-of-api-server
  name: webhook

----------------------------------------

TITLE: Configuring Kubernetes Cluster in OpenStack Murano
DESCRIPTION: YAML configuration file that defines how Murano installs and initializes a Kubernetes cluster on OpenStack. The file is located in the k8s-docker-suite-app-murano repository.

LANGUAGE: yaml
CODE:
# Reference to YAML file:
# https://opendev.org/x/k8s-docker-suite-app-murano/src/branch/master/Kubernetes/KubernetesCluster/package/Classes/KubernetesCluster.yaml

----------------------------------------

TITLE: Setting Pod Security Audit Level on a Namespace
DESCRIPTION: This command sets the Pod Security audit level for a namespace, which logs violations without enforcing them.

LANGUAGE: sh
CODE:
kubectl label --overwrite ns $NAMESPACE pod-security.kubernetes.io/audit=$LEVEL

----------------------------------------

TITLE: Displaying Node Resource Usage with kubectl top node
DESCRIPTION: This command shows how to use 'kubectl top node' to display resource usage metrics for Kubernetes nodes. It includes examples for showing metrics for all nodes and for a specific node.

LANGUAGE: bash
CODE:
kubectl top node [NAME | -l label]

LANGUAGE: bash
CODE:
# Show metrics for all nodes
kubectl top node

# Show metrics for a given node
kubectl top node NODE_NAME

----------------------------------------

TITLE: Killing ZooKeeper Process
DESCRIPTION: Command to kill the ZooKeeper process in a Pod.

LANGUAGE: bash
CODE:
kubectl exec zk-0 -- pkill java

----------------------------------------

TITLE: Configuring Ingress with a Resource Backend
DESCRIPTION: An Ingress configuration that uses a resource backend instead of a service backend.

LANGUAGE: yaml
CODE:
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress-resource-backend
spec:
  defaultBackend:
    resource:
      apiGroup: k8s.example.com
      kind: StorageBucket
      name: static-assets
  rules:
    - http:
        paths:
          - path: /icons
            pathType: ImplementationSpecific
            backend:
              resource:
                apiGroup: k8s.example.com
                kind: StorageBucket
                name: icon-assets

----------------------------------------

TITLE: Markdown Frontmatter Configuration
DESCRIPTION: YAML frontmatter block defining the page title and weight for documentation ordering

LANGUAGE: yaml
CODE:
---
title: Explore Your App
weight: 30
---

----------------------------------------

TITLE: Adding HTML Comment for Documentation Generation Instructions
DESCRIPTION: This HTML comment provides information about the auto-generation process of the document and instructions for updating the reference content. It also mentions where to file formatting bugs.

LANGUAGE: html
CODE:
<!--
The file is auto-generated from the Go source code of the component using a generic
[generator](https://github.com/kubernetes-sigs/reference-docs/). To learn how
to generate the reference documentation, please read
[Contributing to the reference documentation](/docs/contribute/generate-ref-docs/).
To update the reference content, please follow the 
[Contributing upstream](/docs/contribute/generate-ref-docs/contribute-upstream/)
guide. You can file document formatting bugs against the
[reference-docs](https://github.com/kubernetes-sigs/reference-docs/) project.
-->

----------------------------------------

TITLE: Default Deny All Ingress Policy
DESCRIPTION: NetworkPolicy that denies all ingress traffic to pods in a namespace

LANGUAGE: yaml
CODE:
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny-ingress
spec:
  podSelector: {}
  policyTypes:
  - Ingress

----------------------------------------

TITLE: Pod Status Check
DESCRIPTION: Commands to verify pod status and resource usage.

LANGUAGE: shell
CODE:
kubectl get pod memory-demo --namespace=mem-example
kubectl get pod memory-demo --output=yaml --namespace=mem-example
kubectl top pod memory-demo --namespace=mem-example

----------------------------------------

TITLE: Pod Status Check
DESCRIPTION: Commands to verify pod status and resource usage.

LANGUAGE: shell
CODE:
kubectl get pod memory-demo --namespace=mem-example
kubectl get pod memory-demo --output=yaml --namespace=mem-example
kubectl top pod memory-demo --namespace=mem-example

----------------------------------------

TITLE: Generating an Encryption Key on Windows
DESCRIPTION: PowerShell command to generate a 32-byte random key and base64 encode it on Windows.

LANGUAGE: powershell
CODE:
[Convert]::ToBase64String((1..32|%{[byte](Get-Random -Max 256)}))

----------------------------------------

TITLE: Basic Kompose Convert Command
DESCRIPTION: Example showing how to convert a Docker Compose file to Kubernetes resources using the kompose convert command

LANGUAGE: bash
CODE:
kompose convert

----------------------------------------

TITLE: Installing kubectl on Linux
DESCRIPTION: This command downloads the latest stable kubectl binary, installs it in /usr/local/bin, and removes the downloaded file.

LANGUAGE: shell
CODE:
curl -LO https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl \
    && sudo install kubectl /usr/local/bin && rm kubectl

----------------------------------------

TITLE: Creating a Pod with Memory Request Exceeding Node Capacity
DESCRIPTION: YAML configuration for a pod that requests 1000 GiB of memory, which is likely more than any node in the cluster can provide.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: memory-demo-3
  namespace: mem-example
spec:
  containers:
  - name: memory-demo-3-ctr
    image: polinux/stress
    resources:
      requests:
        memory: 1000Gi
    command: ["stress"]
    args: ["--vm", "1", "--vm-bytes", "150M", "--vm-hang", "1"]

----------------------------------------

TITLE: Defining a Basic Logging Pod in Kubernetes YAML
DESCRIPTION: YAML definition for a simple pod that writes logs to stdout once per second. Used to demonstrate basic logging capabilities.

LANGUAGE: yaml
CODE:
{{% codenew file="debug/counter-pod.yaml" %}}

----------------------------------------

TITLE: Basic Kubeadm Join Phase Command
DESCRIPTION: The base command for executing atomic steps of the join process in Kubernetes cluster setup.

LANGUAGE: markdown
CODE:
kubeadm join phase

----------------------------------------

TITLE: Creating MongoDB Deployment in Kubernetes
DESCRIPTION: This command applies a YAML file to create a MongoDB deployment in the Kubernetes cluster. It uses kubectl to create the necessary resources.

LANGUAGE: shell
CODE:
kubectl apply -f https://k8s.io/examples/application/mongodb/mongo-deployment.yaml

----------------------------------------

TITLE: HTTP GET Request for Secret
DESCRIPTION: HTTP request syntax for retrieving a specific Secret object from the Kubernetes API

LANGUAGE: http
CODE:
GET /api/v1/namespaces/{namespace}/secrets/{name}

----------------------------------------

TITLE: Advertising Extended Resources via HTTP PATCH
DESCRIPTION: This HTTP PATCH request adds an extended resource called 'dongle' to a specific node, indicating that the node has 4 dongles available.

LANGUAGE: http
CODE:
PATCH /api/v1/nodes/<your-node-name>/status HTTP/1.1
Accept: application/json
Content-Type: application/json-patch+json
Host: k8s-master:8080

[
  {
    "op": "add",
    "path": "/status/capacity/example.com~1dongle",
    "value": "4"
  }
]

----------------------------------------

TITLE: OOM Killed Container Status
DESCRIPTION: YAML output showing container termination due to exceeding memory limits.

LANGUAGE: yaml
CODE:
lastState:
   terminated:
     containerID: 65183c1877aaec2e8427bc95609cc52677a454b56fcb24340dbd22917c23b10f
     exitCode: 137
     finishedAt: 2017-06-20T20:52:19Z
     reason: OOMKilled
     startedAt: null

----------------------------------------

TITLE: PriorityLevelConfiguration Spec
DESCRIPTION: This snippet shows the structure of the PriorityLevelConfigurationSpec, which defines the desired state of the priority level.

LANGUAGE: go
CODE:
type PriorityLevelConfigurationSpec struct {
  Type string `json:"type"`
  Limited *LimitedPriorityLevelConfiguration `json:"limited,omitempty"`
  Exempt *ExemptPriorityLevelConfiguration `json:"exempt,omitempty"
}

----------------------------------------

TITLE: Checking Kubernetes pod status
DESCRIPTION: This command lists the Kubernetes pods to verify that they are correctly provisioned.

LANGUAGE: shell
CODE:
kubectl get pods

----------------------------------------

TITLE: Creating a Pod that Exceeds its Memory Limit
DESCRIPTION: YAML configuration for a pod with a container that requests 50 MiB of memory, has a limit of 100 MiB, but tries to allocate 250 MiB, exceeding its limit.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: memory-demo-2
  namespace: mem-example
spec:
  containers:
  - name: memory-demo-2-ctr
    image: polinux/stress
    resources:
      requests:
        memory: 50Mi
      limits:
        memory: 100Mi
    command: ["stress"]
    args: ["--vm", "1", "--vm-bytes", "250M", "--vm-hang", "1"]

----------------------------------------

TITLE: Basic Kustomization Configuration in YAML
DESCRIPTION: Demonstrates a basic kustomization.yaml file that adds common labels to multiple Kubernetes resources. The configuration references deployment, configMap, and service resources while adding an 'app: hello' label to all resources.

LANGUAGE: yaml
CODE:
   commonLabels:
     app: hello
   resources:
   - deployment.yaml
   - configMap.yaml
   - service.yaml

----------------------------------------

TITLE: ClusterRole for Creating CSRs
DESCRIPTION: YAML configuration for a ClusterRole that allows creating and retrieving CertificateSigningRequests

LANGUAGE: YAML
CODE:
{{% code_sample file="access/certificate-signing-request/clusterrole-create.yaml" %}}

----------------------------------------

TITLE: Defining ZooKeeper Liveness Probe
DESCRIPTION: YAML snippet defining the liveness probe for ZooKeeper Pods in the StatefulSet.

LANGUAGE: yaml
CODE:
  livenessProbe:
    exec:
      command:
      - sh
      - -c
      - "zookeeper-ready 2181"
    initialDelaySeconds: 15
    timeoutSeconds: 5

----------------------------------------

TITLE: Describing Kubernetes Node
DESCRIPTION: This command provides detailed information about a specific node, including its capacity and allocated resources.

LANGUAGE: shell
CODE:
kubectl describe node <your-node-name>

----------------------------------------

TITLE: Enabling Signed Kubelet Serving Certificates in kubeadm
DESCRIPTION: YAML configuration for enabling signed kubelet serving certificates in a new kubeadm cluster by setting serverTLSBootstrap to true.

LANGUAGE: yaml
CODE:
apiVersion: kubeadm.k8s.io/v1beta3
kind: ClusterConfiguration
---
apiVersion: kubelet.config.k8s.io/v1beta1
kind: KubeletConfiguration
serverTLSBootstrap: true

----------------------------------------

TITLE: Joining a Windows Node to the Kubeadm Cluster
DESCRIPTION: Executes the kubeadm join command to add the Windows node to the existing kubeadm cluster. The command includes the join token and discovery token CA cert hash.

LANGUAGE: bash
CODE:
kubeadm join --token <token> <control-plane-host>:<control-plane-port> --discovery-token-ca-cert-hash sha256:<hash>

----------------------------------------

TITLE: Configuring YAML Frontmatter for Kubernetes Blog Post
DESCRIPTION: This YAML snippet defines the frontmatter for the Kubernetes 1.24 release announcement blog post. It specifies the layout, title, date, slug, and author information.

LANGUAGE: yaml
CODE:
---
layout: blog
title: "Kubernetes 1.24: Stargazer"
date: 2022-05-03
slug: kubernetes-1-24-release-announcement
author: >
  [Kubernetes 1.24 Release Team](https://github.com/kubernetes/sig-release/blob/master/releases/release-1.24/release-team.md)
---

----------------------------------------

TITLE: Cleaning Up Kubernetes Resources
DESCRIPTION: Shell commands to delete the created Service and Deployment, cleaning up the Kubernetes resources.

LANGUAGE: shell
CODE:
kubectl delete services example-service
kubectl delete deployment hello-world

----------------------------------------

TITLE: Cleaning Up Kubernetes Resources
DESCRIPTION: Shell commands to delete the created Service and Deployment, cleaning up the Kubernetes resources.

LANGUAGE: shell
CODE:
kubectl delete services example-service
kubectl delete deployment hello-world

----------------------------------------

TITLE: TokenReview API Version and Import
DESCRIPTION: Defines the API version and import path for TokenReview authentication resource

LANGUAGE: yaml
CODE:
apiVersion: authentication.k8s.io/v1

LANGUAGE: go
CODE:
import "k8s.io/api/authentication/v1"

----------------------------------------

TITLE: Verifying Removal of Extended Resource
DESCRIPTION: This command checks if the 'dongle' resource has been successfully removed from the node description.

LANGUAGE: shell
CODE:
kubectl describe node <your-node-name> | grep dongle

----------------------------------------

TITLE: Defining a Pod with Image Pull Secrets
DESCRIPTION: This YAML snippet shows how to define a Kubernetes Pod that references an image pull secret for accessing a private registry.

LANGUAGE: yaml
CODE:
cat <<EOF > pod.yaml
apiVersion: v1
kind: Pod
metadata:
  name: foo
  namespace: awesomeapps
spec:
  containers:
    - name: foo
      image: janedoe/awesomeapp:v1
  imagePullSecrets:
    - name: myregistrykey
EOF

cat <<EOF >> ./kustomization.yaml
resources:
- pod.yaml
EOF

----------------------------------------

TITLE: 定义 ExternalName 类型 Service
DESCRIPTION: 创建一个 ExternalName 类型的 Service,指定外部 DNS 名称

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Service
metadata:
  name: my-service
  namespace: prod
spec:
  type: ExternalName
  externalName: my.database.example.com

----------------------------------------

TITLE: Creating NodePort Service - Example Usage
DESCRIPTION: Example showing how to create a new NodePort service named 'my-ns' with TCP port 5678 mapped to target port 8080

LANGUAGE: bash
CODE:
kubectl create service nodeport my-ns --tcp=5678:8080

----------------------------------------

TITLE: Executing Kubeadm Upload Config Command
DESCRIPTION: Command to upload all configurations to ConfigMaps in Kubernetes. Supports options like --config for specifying configuration file path, --dry-run for simulation, and --kubeconfig for custom kubeconfig location.

LANGUAGE: bash
CODE:
kubeadm upgrade apply phase upload-config all [flags]

----------------------------------------

TITLE: Listing Running Containers with Docker
DESCRIPTION: This snippet demonstrates how to list all running containers using the Docker CLI.

LANGUAGE: shell
CODE:
docker ps -a

----------------------------------------

TITLE: Verifying File Persistence in Kubernetes Pod Volume
DESCRIPTION: These commands access the restarted Container's shell and verify that the previously created file still exists in the Volume, demonstrating data persistence across Container restarts.

LANGUAGE: shell
CODE:
root@redis:/data/redis# cd /data/redis/
root@redis:/data/redis# ls

----------------------------------------

TITLE: Creating a Docker Registry Secret
DESCRIPTION: This shell command creates a Kubernetes Secret for storing Docker registry credentials. It specifies the registry server, username, password, and email.

LANGUAGE: shell
CODE:
kubectl create secret docker-registry <name> --docker-server=DOCKER_REGISTRY_SERVER --docker-username=DOCKER_USER --docker-password=DOCKER_PASSWORD --docker-email=DOCKER_EMAIL

----------------------------------------

TITLE: Defining a Single Service Ingress
DESCRIPTION: An example of an Ingress that routes all traffic to a single backend service.

LANGUAGE: yaml
CODE:
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: test-ingress
spec:
  defaultBackend:
    service:
      name: test
      port:
        number: 80

----------------------------------------

TITLE: Generating CA Key and Certificate with OpenSSL for Kubernetes
DESCRIPTION: These commands use OpenSSL to generate a 2048-bit CA key and a CA certificate with a validity of 10000 days for Kubernetes authentication.

LANGUAGE: bash
CODE:
openssl genrsa -out ca.key 2048
openssl req -x509 -new -nodes -key ca.key -subj "/CN=${MASTER_IP}" -days 10000 -out ca.crt

----------------------------------------

TITLE: Executing Single Phase of Node Upgrade Workflow in Kubernetes
DESCRIPTION: This command is used to invoke a single phase of the node upgrade workflow in Kubernetes. It allows for more granular control over the upgrade process.

LANGUAGE: bash
CODE:
kubeadm upgrade node phase [flags]

----------------------------------------

TITLE: Defining a Single Service Ingress
DESCRIPTION: An example of an Ingress that routes all traffic to a single backend service.

LANGUAGE: yaml
CODE:
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: test-ingress
spec:
  defaultBackend:
    service:
      name: test
      port:
        number: 80

----------------------------------------

TITLE: Executing Etcd Member Removal Command in Kubernetes
DESCRIPTION: Command syntax for removing a local etcd member from a Kubernetes control plane node. The command supports flags for dry-run execution and custom kubeconfig file specification.

LANGUAGE: bash
CODE:
kubeadm reset phase remove-etcd-member [flags]

----------------------------------------

TITLE: Viewing Detailed Pod Information
DESCRIPTION: This shell command retrieves detailed information about the 'cpu-demo' pod in YAML format.

LANGUAGE: shell
CODE:
kubectl get pod cpu-demo --output=yaml --namespace=cpu-example

----------------------------------------

TITLE: Defining a Single Service Ingress
DESCRIPTION: An example of an Ingress that routes all traffic to a single backend service.

LANGUAGE: yaml
CODE:
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: test-ingress
spec:
  defaultBackend:
    service:
      name: test
      port:
        number: 80

----------------------------------------

TITLE: Manually Creating a ServiceAccount API Token Secret
DESCRIPTION: This example shows how to manually create a Secret containing an API token for a ServiceAccount named 'build-robot'.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Secret
metadata:
  name: build-robot-secret
  annotations:
    kubernetes.io/service-account.name: build-robot
type: kubernetes.io/service-account-token

----------------------------------------

TITLE: Configuring Headless Mode in YAML Frontmatter
DESCRIPTION: Minimal YAML frontmatter configuration that sets the headless property to true, typically used to indicate a page should not generate its own HTML output.

LANGUAGE: yaml
CODE:
---
headless: true
---

----------------------------------------

TITLE: EndpointSliceProxying Feature Gate Configuration in YAML
DESCRIPTION: YAML configuration defining the lifecycle stages of the EndpointSliceProxying feature gate in Kubernetes. Shows progression from alpha (1.18) to beta (1.19-1.21) to stable (1.22-1.24) before removal.

LANGUAGE: yaml
CODE:
title: EndpointSliceProxying
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.18"
    toVersion: "1.18"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.19"
    toVersion: "1.21"    
  - stage: stable
    defaultValue: true
    fromVersion: "1.22"
    toVersion: "1.24"    

removed: true

----------------------------------------

TITLE: EndpointSliceProxying Feature Gate Configuration in YAML
DESCRIPTION: YAML configuration defining the lifecycle stages of the EndpointSliceProxying feature gate in Kubernetes. Shows progression from alpha (1.18) to beta (1.19-1.21) to stable (1.22-1.24) before removal.

LANGUAGE: yaml
CODE:
title: EndpointSliceProxying
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.18"
    toVersion: "1.18"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.19"
    toVersion: "1.21"    
  - stage: stable
    defaultValue: true
    fromVersion: "1.22"
    toVersion: "1.24"    

removed: true

----------------------------------------

TITLE: Defining PodLogsQuerySplitStreams Feature Gate Configuration
DESCRIPTION: YAML configuration defining the PodLogsQuerySplitStreams feature gate properties including its stage, default value, and version information.

LANGUAGE: yaml
CODE:
---
title: PodLogsQuerySplitStreams
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha
    defaultValue: false
    fromVersion: "1.32"
---

----------------------------------------

TITLE: Updating a Kubernetes Deployment Image
DESCRIPTION: Shell commands to update the container image of a Kubernetes Deployment using kubectl set image.

LANGUAGE: Shell
CODE:
kubectl set image deployment.v1.apps/nginx-deployment nginx=nginx:1.16.1
kubectl set image deployment/nginx-deployment nginx=nginx:1.16.1

----------------------------------------

TITLE: Updating API Reference Documentation
DESCRIPTION: Series of commands to update the Kubernetes API reference documentation by pulling the latest Swagger specification and generating new pages.

LANGUAGE: bash
CODE:
git submodule update --init --recursive --depth 1
curl 'https://raw.githubusercontent.com/kubernetes/kubernetes/master/api/openapi-spec/swagger.json' > api-ref-assets/api/swagger.json
make api-reference
make container-serve

----------------------------------------

TITLE: Listing Cozystack Virtual Machine Instances
DESCRIPTION: Shows how to list Virtual Machine Instances in Cozystack using kubectl.

LANGUAGE: shell
CODE:
kubectl get vminstances.apps.cozystack.io -n tenant-kvaps

----------------------------------------

TITLE: Configuring All Key-Value Pairs in a Secret as Container Environment Variables
DESCRIPTION: Demonstrates how to use the envFrom field to define all of a Secret's data as container environment variables in a Pod configuration.

LANGUAGE: yaml
CODE:
{{% code_sample file="pods/inject/pod-secret-envFrom.yaml" %}}

----------------------------------------

TITLE: Configuring All Key-Value Pairs in a Secret as Container Environment Variables
DESCRIPTION: Demonstrates how to use the envFrom field to define all of a Secret's data as container environment variables in a Pod configuration.

LANGUAGE: yaml
CODE:
{{% code_sample file="pods/inject/pod-secret-envFrom.yaml" %}}

----------------------------------------

TITLE: Allocating resources using ResourceClaimTemplate and Pod
DESCRIPTION: Example of allocating two specific resources of type resource.example.com using ResourceClaimTemplate and Pod definitions

LANGUAGE: yaml
CODE:
---
apiVersion: cats.resource.example.com/v1
kind: ClaimParameters
name: large-black-cats
spec:
  color: black
  size: large
---
apiVersion: resource.k8s.io/v1alpha1
kind: ResourceClaimTemplate
metadata:
  name: large-black-cats
spec:
  spec:
    resourceClassName: resource.example.com
    parametersRef:
      apiGroup: cats.resource.example.com
      kind: ClaimParameters
      name: large-black-cats
–--
apiVersion: v1
kind: Pod
metadata:
  name: pod-with-cats
spec:
  containers: # 两个示例容器；每个容器申领一个 cat 资源
  - name: first-example
    image: ubuntu:22.04
    command: ["sleep", "9999"]
    resources:
      claims:
      - name: cat-0
  - name: second-example
    image: ubuntu:22.04
    command: ["sleep", "9999"]
    resources:
      claims:
      - name: cat-1
  resourceClaims:
  - name: cat-0
    source:
      resourceClaimTemplateName: large-black-cats
  - name: cat-1
    source:
      resourceClaimTemplateName: large-black-cats

----------------------------------------

TITLE: Configuring HTTP Retries
DESCRIPTION: Example of configuring retry logic for HTTP requests with attempt limits and backoff timing.

LANGUAGE: yaml
CODE:
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: face-with-retries
  namespace: faces
spec:
  parentRefs:
    - name: my-gateway
      kind: Gateway
      port: 80
  rules:
  - matches:
    - path:
        type: PathPrefix
        value: /face
    backendRefs:
    - name: face
      port: 80
    retry:
      codes: [ 500, 502, 503, 504 ]
      attempts: 3
      backoff: 500ms

----------------------------------------

TITLE: Deploying a sample nginx application
DESCRIPTION: This command creates a deployment of the nginx web server in the Kubernetes cluster.

LANGUAGE: shell
CODE:
kubectl create deployment nginx --image=nginx

----------------------------------------

TITLE: Listing Kubeadm Tokens on Control Plane Node
DESCRIPTION: This command lists available kubeadm tokens on a control plane node. It's useful for retrieving token information when joining new nodes.

LANGUAGE: bash
CODE:
sudo kubeadm token list

----------------------------------------

TITLE: Defining TracingConfiguration Struct in Go
DESCRIPTION: Defines the TracingConfiguration struct which provides configuration for OpenTelemetry tracing clients. It specifies the endpoint for the collector and sampling rate.

LANGUAGE: go
CODE:
type TracingConfiguration struct {
    endpoint string
    samplingRatePerMillion int32
}

----------------------------------------

TITLE: Creating a PersistentVolumeClaim from a VolumeSnapshot in Kubernetes YAML
DESCRIPTION: YAML definition for creating a new PersistentVolumeClaim from a VolumeSnapshot that is part of a VolumeGroupSnapshot, used for restoring data.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: examplepvc-restored-2024-12-17
  namespace: demo-namespace
spec:
  storageClassName: example-foo-nearline
  dataSource:
    name: snapshot-0962a745b2bf930bb385b7b50c9b08af471f1a16780726de19429dd9c94eaca0
    kind: VolumeSnapshot
    apiGroup: snapshot.storage.k8s.io
  accessModes:
    - ReadWriteOncePod
  resources:
    requests:
      storage: 100Mi # must be enough storage to fit the existing snapshot

----------------------------------------

TITLE: Defining PodReadyToStartContainersCondition Feature Gate Configuration in YAML
DESCRIPTION: YAML configuration defining the feature gate stages for PodReadyToStartContainersCondition. Shows alpha stage in v1.28 (disabled by default) and beta stage in v1.29 (enabled by default).

LANGUAGE: yaml
CODE:
title: PodReadyToStartContainersCondition
former_titles:
  - PodHasNetworkCondition
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.28"
    toVersion: "1.28"
  - stage: beta
    defaultValue: true
    fromVersion: "1.29"

----------------------------------------

TITLE: Defining LeaderElectionConfiguration in Go
DESCRIPTION: LeaderElectionConfiguration defines the configuration of leader election clients for components that can run with leader election enabled.

LANGUAGE: go
CODE:
type LeaderElectionConfiguration struct {
    LeaderElect        bool
    LeaseDuration      metav1.Duration
    RenewDeadline      metav1.Duration
    RetryPeriod        metav1.Duration
    ResourceLock       string
    ResourceName       string
    ResourceNamespace  string
}

----------------------------------------

TITLE: Watching ZooKeeper StatefulSet Update
DESCRIPTION: kubectl command to watch the status of the ZooKeeper StatefulSet update.

LANGUAGE: bash
CODE:
kubectl rollout status sts/zk

----------------------------------------

TITLE: Specifying Python Package Dependencies for Kubernetes Project
DESCRIPTION: This snippet defines the required Python packages and their versions for a Kubernetes-related project. It includes requests for HTTP operations, click for command-line interfaces, and jinja2 for templating.

LANGUAGE: Plain Text
CODE:
requests==2.20.1
click==6.7
jinja2==2.10.1

----------------------------------------

TITLE: Watching ZooKeeper StatefulSet Update
DESCRIPTION: kubectl command to watch the status of the ZooKeeper StatefulSet update.

LANGUAGE: bash
CODE:
kubectl rollout status sts/zk

----------------------------------------

TITLE: Listing Stylesheets for Kubernetes API Reference in Markdown
DESCRIPTION: This code snippet lists the specific stylesheet files used by the API reference section of the Kubernetes website. It includes Bootstrap, Font Awesome, and a custom API reference style sheet.

LANGUAGE: markdown
CODE:
- bootstrap-4.3.1.min.css
- fontawesome-4.7.0.min.css
- style_apiref.css

----------------------------------------

TITLE: Output of StatefulSet Pod Updates with maxUnavailable: 2
DESCRIPTION: This snippet shows the output of watching pod updates during a rolling update of a StatefulSet with maxUnavailable set to 2. It demonstrates how pods are terminated and created in batches of two.

LANGUAGE: text
CODE:
NAME    READY   STATUS    RESTARTS   AGE
web-0   1/1     Running   0          85s
web-1   1/1     Running   0          2m6s
web-2   1/1     Running   0          106s
web-3   1/1     Running   0          2m47s
web-4   1/1     Running   0          2m27s
web-4   1/1     Terminating   0          5m43s ----> start terminating 4
web-3   1/1     Terminating   0          6m3s  ----> start terminating 3
web-3   0/1     Terminating   0          6m7s
web-3   0/1     Pending       0          0s
web-3   0/1     Pending       0          0s
web-4   0/1     Terminating   0          5m48s
web-4   0/1     Terminating   0          5m48s
web-3   0/1     ContainerCreating   0          2s
web-3   1/1     Running             0          2s
web-4   0/1     Pending             0          0s
web-4   0/1     Pending             0          0s
web-4   0/1     ContainerCreating   0          0s
web-4   1/1     Running             0          1s
web-2   1/1     Terminating         0          5m46s ----> start terminating 2 (only after both 4 and 3 are running)
web-1   1/1     Terminating         0          6m6s  ----> start terminating 1
web-2   0/1     Terminating         0          5m47s
web-1   0/1     Terminating         0          6m7s
web-1   0/1     Pending             0          0s
web-1   0/1     Pending             0          0s
web-1   0/1     ContainerCreating   0          1s
web-1   1/1     Running             0          2s
web-2   0/1     Pending             0          0s
web-2   0/1     Pending             0          0s
web-2   0/1     ContainerCreating   0          0s
web-2   1/1     Running             0          1s
web-0   1/1     Terminating         0          6m6s ----> start terminating 0 (only after 2 and 1 are running)
web-0   0/1     Terminating         0          6m7s
web-0   0/1     Pending             0          0s
web-0   0/1     Pending             0          0s
web-0   0/1     ContainerCreating   0          0s
web-0   1/1     Running             0          1s

----------------------------------------

TITLE: Initializing Repository Dependencies on Windows
DESCRIPTION: Command to fetch Git submodule dependencies for the Kubernetes documentation on Windows systems.

LANGUAGE: powershell
CODE:
git submodule update --init --recursive --depth 1

----------------------------------------

TITLE: Job with Sidecar Container Example
DESCRIPTION: YAML configuration demonstrating how to create a Job with a sidecar container. Shows how sidecars can be used in Job contexts where they continue running until the main container completes.

LANGUAGE: yaml
CODE:
{{% code_sample language="yaml" file="application/job/job-sidecar.yaml" %}}

----------------------------------------

TITLE: Defining ClientConnectionConfiguration in Go
DESCRIPTION: ClientConnectionConfiguration contains details for constructing a client, including kubeconfig path, content types, and connection settings.

LANGUAGE: go
CODE:
type ClientConnectionConfiguration struct {
    Kubeconfig           string
    AcceptContentTypes   string
    ContentType          string
    QPS                  float32
    Burst                int32
}

----------------------------------------

TITLE: Applying Out-of-Service Taint for Non-Graceful Node Shutdown in Kubernetes
DESCRIPTION: This command applies an out-of-service taint to a Kubernetes node to trigger forceful deletion of pods and workload failover in case of a non-graceful shutdown. The taint should only be applied after verifying that the node is actually shut down or powered off.

LANGUAGE: bash
CODE:
kubectl taint nodes <node-name> node.kubernetes.io/out-of-service=nodeshutdown:NoExecute

----------------------------------------

TITLE: Kubernetes Blog Post YAML Frontmatter
DESCRIPTION: YAML frontmatter for a blog post announcing the GA status of Core Workloads API, including metadata like title, date, author, and URL information.

LANGUAGE: yaml
CODE:
---
title: "Core Workloads API GA"
date: 2018-01-15
slug: core-workloads-api-ga
url: /blog/2018/01/Core-Workloads-Api-Ga
author: >
   Kenneth Owens (Google)
---

----------------------------------------

TITLE: Map Value Format Validation with CEL
DESCRIPTION: CEL expression to validate the values of the 'details' map.

LANGUAGE: CEL
CODE:
self.details.all(key, self.details[key].matches('^[a-zA-Z]*$'))

----------------------------------------

TITLE: Defining a Job with Sidecar Container in Kubernetes YAML
DESCRIPTION: Example YAML showing how to define a Job with two containers, one of which is a sidecar container. The sidecar container is defined as an init container with restartPolicy set to Always.

LANGUAGE: yaml
CODE:
apiVersion: batch/v1
kind: Job
metadata:
  name: job-with-sidecar
spec:
  completions: 1
  parallelism: 1
  template:
    metadata:
      name: job-with-sidecar
    spec:
      restartPolicy: Never
      containers:
      - name: main
        image: busybox
        command: ["echo", "hello world"]
      initContainers:
      - name: sidecar
        image: busybox
        command: ["echo", "I am running as a sidecar"]
        restartPolicy: Always

----------------------------------------

TITLE: Setting Build Variables for kubectl Documentation
DESCRIPTION: Sets environment variables necessary for building kubectl documentation, including paths and version.

LANGUAGE: shell
CODE:
export K8S_WEBROOT=$GOPATH/src/github.com/<your-username>/website
export K8S_ROOT=$GOPATH/src/k8s.io/kubernetes
export K8S_RELEASE={{< skew prevMinorVersion >}}

----------------------------------------

TITLE: Creating Tables in Markdown for Kubernetes Docs
DESCRIPTION: Illustrates how to create simple tables using Markdown syntax in Kubernetes documentation.

LANGUAGE: markdown
CODE:
| Heading cell 1 | Heading cell 2 |
|----------------|----------------|
| Body cell 1    | Body cell 2    |

----------------------------------------

TITLE: Note Shortcode for Sponsorship Request
DESCRIPTION: A markdown note shortcode warning against direct messaging individuals for sponsorship requests.

LANGUAGE: markdown
CODE:
{{< note >}}
Don't send a direct email or Slack direct message to an individual
SIG Docs member. You must request sponsorship before submitting your application.
{{< /note >}}

----------------------------------------

TITLE: Configuring WatchdogSec in Systemd Service File for Kubelet
DESCRIPTION: This snippet shows how to set the WatchdogSec parameter in the [Service] section of the kubelet systemd unit file. It configures a 30-second watchdog timeout for the kubelet service.

LANGUAGE: systemd
CODE:
[Service]
WatchdogSec=30s

----------------------------------------

TITLE: Configuring YAML Front Matter for Search Results Page
DESCRIPTION: Basic YAML front matter configuration block that specifies the page layout type as 'search' and sets the page title to 'Search Results'.

LANGUAGE: yaml
CODE:
---
layout: search
title: Search Results
---

----------------------------------------

TITLE: Enabling Pruning for CustomResourceDefinition in YAML
DESCRIPTION: This snippet shows how to enable pruning for a CustomResourceDefinition in apiextensions/v1beta1, which allows the API server to remove unknown fields from the CustomResource instances.

LANGUAGE: yaml
CODE:
apiVersion: apiextensions/v1beta1
kind: CustomResourceDefinition
spec:
  …
  preserveUnknownFields: false

----------------------------------------

TITLE: Displaying Positive User Feedback on Kubernetes Documentation
DESCRIPTION: This code snippet shows positive feedback from users praising the quality of the Kubernetes documentation.

LANGUAGE: text
CODE:
- For me, it is the best documented open source project.
- Keep going!
- I find the documentation to be excellent.
- You [are] doing a great job. For real.

----------------------------------------

TITLE: Defining gRPC Health Check Protocol in Proto
DESCRIPTION: Reference to the gRPC health check protocol definition file, which defines the standard health check method used by grpc-health-probe.

LANGUAGE: proto
CODE:
https://github.com/grpc/grpc/blob/v1.15.0/src/proto/grpc/health/v1/health.proto

----------------------------------------

TITLE: Passing Hostname to kube-proxy on Windows
DESCRIPTION: Command to pass the hostname to kube-proxy to resolve issues with vNICs and HNS endpoints being deleted.

LANGUAGE: powershell
CODE:
C:\k\kube-proxy.exe --hostname-override=$(hostname)

----------------------------------------

TITLE: Using kubectl certificate Command
DESCRIPTION: Basic syntax for using the kubectl certificate command. This is the base command that requires a SUBCOMMAND to perform specific certificate-related operations.

LANGUAGE: bash
CODE:
kubectl certificate SUBCOMMAND

----------------------------------------

TITLE: Executing kubectl top Command in Kubernetes
DESCRIPTION: The kubectl top command displays resource (CPU/memory) usage for nodes or pods. It requires Metrics Server to be correctly configured and working on the server.

LANGUAGE: bash
CODE:
kubectl top [flags]

----------------------------------------

TITLE: Creating Cluster Role - Usage Examples
DESCRIPTION: Examples demonstrating various ways to create cluster roles including pod readers, API group specifications, and aggregation rules.

LANGUAGE: bash
CODE:
  # Create a cluster role named "pod-reader" that allows user to perform "get", "watch" and "list" on pods
  kubectl create clusterrole pod-reader --verb=get,list,watch --resource=pods
  
  # Create a cluster role named "pod-reader" with ResourceName specified
  kubectl create clusterrole pod-reader --verb=get --resource=pods --resource-name=readablepod --resource-name=anotherpod
  
  # Create a cluster role named "foo" with API Group specified
  kubectl create clusterrole foo --verb=get,list,watch --resource=rs.apps
  
  # Create a cluster role named "foo" with SubResource specified
  kubectl create clusterrole foo --verb=get,list,watch --resource=pods,pods/status
  
  # Create a cluster role name "foo" with NonResourceURL specified
  kubectl create clusterrole "foo" --verb=get --non-resource-url=/logs/*
  
  # Create a cluster role name "monitoring" with AggregationRule specified
  kubectl create clusterrole monitoring --aggregation-rule="rbac.example.com/aggregate-to-monitoring=true"

----------------------------------------

TITLE: Viewing Rollout History in Kubernetes
DESCRIPTION: Examples of using the kubectl rollout history command to view deployment and daemonset revision history.

LANGUAGE: bash
CODE:
# View the rollout history of a deployment
kubectl rollout history deployment/abc

# View the details of daemonset revision 3
kubectl rollout history daemonset/abc --revision=3

----------------------------------------

TITLE: Editing Kubernetes Resources with kubectl edit
DESCRIPTION: Examples of using the kubectl edit command to modify various Kubernetes resources.

LANGUAGE: shell
CODE:
# Edit the service named 'registry'
kubectl edit svc/registry

# Use an alternative editor
KUBE_EDITOR="nano" kubectl edit svc/registry

# Edit the job 'myjob' in JSON using the v1 API format
kubectl edit job.v1.batch/myjob -o json

# Edit the deployment 'mydeployment' in YAML and save the modified config in its annotation
kubectl edit deployment/mydeployment -o yaml --save-config

# Edit the 'status' subresource for the 'mydeployment' deployment
kubectl edit deployment mydeployment --subresource='status'

----------------------------------------

TITLE: Creating Kubernetes CertificateSigningRequest Object
DESCRIPTION: Create and submit a CertificateSigningRequest object to the Kubernetes cluster using kubectl. The request field contains the base64-encoded CSR.

LANGUAGE: yaml
CODE:
apiVersion: certificates.k8s.io/v1
kind: CertificateSigningRequest
metadata:
  name: myuser # example
spec:
  # This is an encoded CSR. Change this to the base64-encoded contents of myuser.csr
  request: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURSBSRVFVRVNULS0tLS0KTUlJQ1ZqQ0NBVDRDQVFBd0VURVBNQTBHQTFVRUF3d0dZVzVuWld4aE1JSUJJakFOQmdrcWhraUc5dzBCQVFFRgpBQU9DQVE4QU1JSUJDZ0tDQVFFQTByczhJTHRHdTYxakx2dHhWTTJSVlRWMDNHWlJTWWw0dWluVWo4RElaWjBOCnR2MUZtRVFSd3VoaUZsOFEzcWl0Qm0wMUFSMkNJVXBGd2ZzSjZ4MXF3ckJzVkhZbGlBNVhwRVpZM3ExcGswSDQKM3Z3aGJlK1o2MVNrVHF5SVBYUUwrTWM5T1Nsbm0xb0R2N0NtSkZNMUlMRVI3QTVGZnZKOEdFRjJ6dHBoaUlFMwpub1dtdHNZb3JuT2wzc2lHQ2ZGZzR4Zmd4eW8ybmlneFNVekl1bXNnVm9PM2ttT0x1RVF6cXpkakJ3TFJXbWlECklmMXBMWnoyalVnald4UkhCM1gyWnVVV1d1T09PZnpXM01LaE8ybHEvZi9DdS8wYk83c0x0MCt3U2ZMSU91TFcKcW90blZtRmxMMytqTy82WDNDKzBERHk5aUtwbXJjVDBnWGZLemE1dHJRSURBUUFCb0FBd0RRWUpLb1pJaHZjTgpBUUVMQlFBRGdnRUJBR05WdmVIOGR4ZzNvK21VeVRkbmFjVmQ1N24zSkExdnZEU1JWREkyQTZ1eXN3ZFp1L1BVCkkwZXpZWFV0RVNnSk1IRmQycVVNMjNuNVJsSXJ3R0xuUXFISUh5VStWWHhsdnZsRnpNOVpEWllSTmU3QlJvYXgKQVlEdUI5STZXT3FYbkFvczFqRmxNUG5NbFpqdU5kSGxpT1BjTU1oNndLaTZzZFhpVStHYTJ2RUVLY01jSVUyRgpvU2djUWdMYTk0aEpacGk3ZnNMdm1OQUxoT045UHdNMGM1dVJVejV4T0dGMUtCbWRSeEgvbUNOS2JKYjFRQm1HCkkwYitEUEdaTktXTU0xMzhIQXdoV0tkNjVoVHdYOWl4V3ZHMkh4TG1WQzg0L1BHT0tWQW9FNkpsYWFHdTlQVmkKdjlOSjVaZlZrcXdCd0hKbzZXdk9xVlA3SVFjZmg3d0drWm89Ci0tLS0tRU5EIENFUlRJRklDQVRFIFJFUVVFU1QtLS0tLQo=
  signerName: kubernetes.io/kube-apiserver-client
  expirationSeconds: 86400  # one day
  usages:
  - client auth

----------------------------------------

TITLE: Verifying Scheduler Deployment
DESCRIPTION: Command to verify that the custom scheduler pod is running in the kube-system namespace

LANGUAGE: shell
CODE:
kubectl get pods --namespace=kube-system

----------------------------------------

TITLE: Applying Kubernetes Configurations
DESCRIPTION: These shell commands apply the previously defined YAML configurations to create the Deployment and Service in the Kubernetes cluster.

LANGUAGE: shell
CODE:
kubectl apply -f pod-with-graceful-termination.yaml
kubectl apply -f explore-graceful-termination-nginx.yaml

----------------------------------------

TITLE: Deleting Test Pod
DESCRIPTION: Removes the test Pod from the namespace.

LANGUAGE: shell
CODE:
kubectl delete pod default-mem-demo --namespace=default-mem-example

----------------------------------------

TITLE: Installing containerd on Windows for Kubernetes
DESCRIPTION: Downloads and executes a PowerShell script to install containerd on a Windows Server instance. The script takes a version parameter which should be set to a recent release from the containerd repository.

LANGUAGE: PowerShell
CODE:
curl.exe -LO https://raw.githubusercontent.com/kubernetes-sigs/sig-windows-tools/master/hostprocess/Install-Containerd.ps1

LANGUAGE: PowerShell
CODE:
.\Install-Containerd.ps1 -ContainerDVersion CONTAINERD_VERSION

----------------------------------------

TITLE: Viewing kubectl Configuration
DESCRIPTION: Command to check the location and credentials that kubectl knows about.

LANGUAGE: shell
CODE:
kubectl config view

----------------------------------------

TITLE: Creating Namespace for CPU Constraints
DESCRIPTION: Creates a new namespace to isolate the CPU constraint examples

LANGUAGE: shell
CODE:
kubectl create namespace constraints-cpu-example

----------------------------------------

TITLE: Markdown Blog Post Frontmatter
DESCRIPTION: YAML frontmatter configuration for a Kubernetes blog post, including title, date, author and layout settings

LANGUAGE: yaml
CODE:
---
layout: blog
title: "Grokkin' the Docs"
date: 2019-11-05
slug: Grokkin-the-Docs
author: >
  [Aimee Ukasick](https://www.linkedin.com/in/aimee-ukasick/) (independent contributor)
---

----------------------------------------

TITLE: Generate Controller Manager Pod Manifest Command
DESCRIPTION: Command to generate the kube-controller-manager static Pod manifest with kubeadm. This command is part of the control-plane initialization phase and supports various configuration options including certificate directory, image repository, and Kubernetes version specification.

LANGUAGE: bash
CODE:
kubeadm init phase control-plane controller-manager [flags]

----------------------------------------

TITLE: HTTP PUT Request - Update Lease
DESCRIPTION: HTTP request format for replacing an existing Lease object

LANGUAGE: http
CODE:
PUT /apis/coordination.k8s.io/v1/namespaces/{namespace}/leases/{name}

----------------------------------------

TITLE: Detecting Docker Socket Mounts in Kubernetes Pods
DESCRIPTION: Shell script to identify pods that have mounted the Docker socket through volume mounts. The script outputs the namespace and name of pods that have access to /var/run/docker.sock.

LANGUAGE: bash
CODE:
kubectl get pods --all-namespaces \
-o=jsonpath='{range .items[*]}{"\n"}{.metadata.namespace}{":\t"}{.metadata.name}{":\t"}{range .spec.volumes[*]}{.hostPath.path}{", "}{end}{end}' \
| sort \
| grep '/var/run/docker.sock'

----------------------------------------

TITLE: Defining a Guaranteed QoS Pod in Kubernetes YAML
DESCRIPTION: This YAML manifest defines a Pod with one Container that has equal CPU and memory requests and limits, resulting in a Guaranteed QoS class.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: qos-demo
  namespace: qos-example
spec:
  containers:
  - name: qos-demo-ctr
    image: nginx
    resources:
      limits:
        memory: "200Mi"
        cpu: "700m"
      requests:
        memory: "200Mi"
        cpu: "700m"

----------------------------------------

TITLE: Using kubeadm init phases
DESCRIPTION: Example of using kubeadm init phases to customize the control plane setup process.

LANGUAGE: bash
CODE:
sudo kubeadm init phase control-plane all --config=configfile.yaml
sudo kubeadm init phase etcd local --config=configfile.yaml
# you can now modify the control plane and etcd manifest files
sudo kubeadm init --skip-phases=control-plane,etcd --config=configfile.yaml

----------------------------------------

TITLE: Deploying BookInfo Application Commands
DESCRIPTION: Commands for deploying the BookInfo application in Kubernetes and obtaining the service URL.

LANGUAGE: bash
CODE:
kubectl apply -f bookinfo-v1.yaml
export BOOKINFO_URL=$(kubectl get po -l app=productpage -o jsonpath={.items[0].status.hostIP}):$(kubectl get svc productpage -o jsonpath={.spec.ports[0].nodePort})

----------------------------------------

TITLE: Configuring Headless Page in Hugo YAML Front Matter
DESCRIPTION: YAML front matter configuration that sets the headless property to true, indicating this content should not be rendered as a standalone page in Hugo.

LANGUAGE: yaml
CODE:
---
headless: true
---

----------------------------------------

TITLE: Echo v1 Application Deployment
DESCRIPTION: Kubernetes deployment manifest for version 1 of the echo application using HashiCorp's http-echo container.

LANGUAGE: yaml
CODE:
apiVersion: apps/v1
kind: Deployment
metadata:
  name: echo-v1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: echo
      version: v1
  template:
    metadata:
      labels:
        app: echo
        version: v1
    spec:
      containers:
        - image: hashicorp/http-echo
          args:
            - "-text=version:v1"
            - -listen=:8080
          imagePullPolicy: Always
          name: echo-v1
          ports:
            - containerPort: 8080

----------------------------------------

TITLE: Downloading and Preparing cfssl Tools for Kubernetes Certificate Generation
DESCRIPTION: These commands download and prepare the cfssl command line tools for certificate generation. The specific version and architecture may need to be adjusted.

LANGUAGE: shell
CODE:
curl -L https://github.com/cloudflare/cfssl/releases/download/v1.5.0/cfssl_1.5.0_linux_amd64 -o cfssl
chmod +x cfssl
curl -L https://github.com/cloudflare/cfssl/releases/download/v1.5.0/cfssljson_1.5.0_linux_amd64 -o cfssljson
chmod +x cfssljson
curl -L https://github.com/cloudflare/cfssl/releases/download/v1.5.0/cfssl-certinfo_1.5.0_linux_amd64 -o cfssl-certinfo
chmod +x cfssl-certinfo

----------------------------------------

TITLE: Testing Pod Connectivity in Kubernetes
DESCRIPTION: Tests connectivity to Pods using wget from within a Pod

LANGUAGE: bash
CODE:
for ep in 10.244.0.5:9376 10.244.0.6:9376 10.244.0.7:9376; do
    wget -qO- $ep
done

----------------------------------------

TITLE: Verifying Ingress Configuration in Kubernetes
DESCRIPTION: Commands to check the Ingress status and test HTTP to HTTPS redirection and TLS termination.

LANGUAGE: bash
CODE:
$ kubectl get ing   
NAME      RULE      BACKEND            ADDRESS         AGE  
test      -         echoheaders:8080   130.X.X.X     4m  

$ curl 130.X.X.X  
\<html\>  
\<head\>\<title\>301 Moved Permanently\</title\>\</head\>\<body bgcolor="white"\>\<center\>\<h1\>301 Moved Permanently\</h1\>\</center\>  

$ curl https://130.X.X.X -kCLIENT VALUES:client\_address=10.48.0.1command=GETreal path=/  


$ curl 130.X.X.X -Lk

CLIENT VALUES:client\_address=10.48.0.1command=GETreal path=/

----------------------------------------

TITLE: Writing to Stable Storage in a StatefulSet
DESCRIPTION: These commands write the Pod hostnames to their respective index.html files and verify the content, demonstrating stable storage.

LANGUAGE: shell
CODE:
for i in 0 1; do kubectl exec "web-$i" -- sh -c 'echo "$(hostname)" > /usr/share/nginx/html/index.html'; done

for i in 0 1; do kubectl exec -i -t "web-$i" -- curl http://localhost/; done

----------------------------------------

TITLE: Defining Network Policy in Kubernetes YAML
DESCRIPTION: Example network policy configuration that restricts traffic to backend pods, allowing only TCP port 80 access from frontend pods. Demonstrates basic network policy structure including pod selection and ingress rules.

LANGUAGE: yaml
CODE:
apiVersion: extensions/v1beta1
kind: NetworkPolicy
metadata:
 name: pol1
spec:
 podSelector:
   matchLabels:
     role: backend
 ingress:
 - from:
   - podSelector:
      matchLabels:
       role: frontend
   ports:
   - protocol: tcp
     port: 80

----------------------------------------

TITLE: Update RBAC Permissions for CCM
DESCRIPTION: Shell command to patch the cloud-controller-manager RBAC role to allow access to migration lease resources.

LANGUAGE: shell
CODE:
kubectl patch -n kube-system role 'system::leader-locking-cloud-controller-manager' -p '{"rules": [ {"apiGroups":[ "coordination.k8s.io"], "resources": ["leases"], "resourceNames": ["cloud-provider-extraction-migration"], "verbs": ["create", "list", "get", "update"] } ]}' --type=merge

----------------------------------------

TITLE: Listing Images Using Legacy k8s.gcr.io Registry in Kubernetes
DESCRIPTION: This command retrieves all pods across all namespaces, extracts the container images, sorts them, and displays a count of unique images. It can be used to identify images still using the k8s.gcr.io registry.

LANGUAGE: bash
CODE:
kubectl get pods --all-namespaces -o jsonpath="{.items[*].spec.containers[*].image}" |
tr -s '[[:space:]]' '\n' |
sort |
uniq -c

----------------------------------------

TITLE: Defining CRIContainerLogRotation Feature Gate Stages in YAML
DESCRIPTION: This YAML snippet defines the lifecycle stages of the CRIContainerLogRotation feature gate in Kubernetes. It specifies the alpha, beta, and stable stages with their respective versions and default values.

LANGUAGE: yaml
CODE:
stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.10"
    toVersion: "1.10"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.11"
    toVersion: "1.20"    
  - stage: stable
    defaultValue: true
    fromVersion: "1.21"
    toVersion: "1.22"    

removed: true

----------------------------------------

TITLE: Checking Hairpin Mode Configuration
DESCRIPTION: Checks the hairpin mode configuration for a bridge interface

LANGUAGE: bash
CODE:
for intf in /sys/devices/virtual/net/cbr0/brif/*; do cat $intf/hairpin_mode; done

----------------------------------------

TITLE: Applying Memory Constraints with LimitRange
DESCRIPTION: Creates a LimitRange resource to enforce memory constraints in the namespace

LANGUAGE: shell
CODE:
kubectl apply -f https://k8s.io/examples/admin/resource/memory-constraints.yaml --namespace=constraints-mem-example

----------------------------------------

TITLE: Configuring DisableAllocatorDualWrite Feature Gate in YAML
DESCRIPTION: YAML configuration for the DisableAllocatorDualWrite feature gate. This alpha feature is introduced in Kubernetes 1.31 and defaults to false. It controls whether the API server performs dual-write operations on both old and new IP allocators.

LANGUAGE: yaml
CODE:
title: DisableAllocatorDualWrite
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha
    defaultValue: false
    fromVersion: "1.31"

----------------------------------------

TITLE: Cleaning Up Resources
DESCRIPTION: Remove the namespace and all associated resources.

LANGUAGE: shell
CODE:
kubectl delete namespace quota-pod-example

----------------------------------------

TITLE: Executing kubeadm upgrade node phase addon all command in Kubernetes
DESCRIPTION: This command upgrades all the addons in a Kubernetes cluster. It can be run with various options to customize the upgrade process, such as specifying a configuration file, performing a dry run, or applying patches.

LANGUAGE: bash
CODE:
kubeadm upgrade node phase addon all [flags]

----------------------------------------

TITLE: Creating Private Key for Kubernetes Client Certificate
DESCRIPTION: Generate a 3072-bit RSA private key for the client certificate using OpenSSL.

LANGUAGE: shell
CODE:
openssl genrsa -out myuser.key 3072

----------------------------------------

TITLE: ClusterIP Service Creation Examples - Kubernetes CLI
DESCRIPTION: Examples showing how to create regular and headless ClusterIP services with specific configurations.

LANGUAGE: bash
CODE:
  # Create a new ClusterIP service named my-cs
  kubectl create service clusterip my-cs --tcp=5678:8080
  
  # Create a new ClusterIP service named my-cs (in headless mode)
  kubectl create service clusterip my-cs --clusterip="None"

----------------------------------------

TITLE: Generating Server Certificate with OpenSSL for Kubernetes API Server
DESCRIPTION: This command generates the server certificate for the Kubernetes API server using the CA key, CA certificate, and the server CSR. It sets a validity of 10000 days and includes custom extensions.

LANGUAGE: bash
CODE:
openssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key \
-CAcreateserial -out server.crt -days 10000 \
-extensions v3_ext -extfile csr.conf -sha256

----------------------------------------

TITLE: Defining VolumeSubpath Feature Gate Configuration in YAML
DESCRIPTION: This YAML configuration defines the VolumeSubpath feature gate, including its title, content type, build settings, lifecycle stages, and removal status. It specifies that the feature was stable from Kubernetes version 1.10 to 1.24 and has now been removed.

LANGUAGE: yaml
CODE:
# Removed from Kubernetes
title: VolumeSubpath
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: stable
    defaultValue: true
    fromVersion: "1.10"
    toVersion: "1.24"

removed: true

----------------------------------------

TITLE: Defining SchedulerQueueingHints Feature Gate Configuration in YAML
DESCRIPTION: YAML configuration defining the feature gate stages for SchedulerQueueingHints. Specifies beta stages across versions 1.28 through 1.32 with different default values.

LANGUAGE: yaml
CODE:
title: SchedulerQueueingHints
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: beta
    defaultValue: true
    fromVersion: "1.28"
    toVersion: "1.28"
  - stage: beta
    defaultValue: false
    fromVersion: "1.29"
    toVersion: "1.31"
  - stage: beta
    defaultValue: true
    fromVersion: "1.32"

----------------------------------------

TITLE: Filtering Pods by Running Status
DESCRIPTION: Using kubectl to select all Pods where status.phase field is Running

LANGUAGE: shell
CODE:
kubectl get pods --field-selector status.phase=Running

----------------------------------------

TITLE: Network Cleanup Commands
DESCRIPTION: Commands to reset iptables rules and IPVS tables when cleaning up a cluster.

LANGUAGE: bash
CODE:
iptables -F && iptables -t nat -F && iptables -t mangle -F && iptables -X

LANGUAGE: bash
CODE:
ipvsadm -C

----------------------------------------

TITLE: Kubeadm Configuration for Worker Nodes
DESCRIPTION: YAML configuration for joining worker nodes to the Kubernetes cluster using kubeadm.

LANGUAGE: yaml
CODE:
apiVersion: kubeadm.k8s.io/v1beta2
discovery:
  bootstrapToken:
    apiServerEndpoint: 192.168.1.7:6443
    token: 0c0z4p.dnafh6vnmouus569
    caCertHashes: ["sha256:fcb3e956a6880c05fc9d09714424b827f57a6fdc8afc44497180905946527adf"]
kind: JoinConfiguration
nodeRegistration:
  kubeletExtraArgs:
    cloud-provider: "external"


----------------------------------------

TITLE: HTTP PUT Request - Update ResourceClaimTemplate
DESCRIPTION: HTTP request format for updating an existing ResourceClaimTemplate resource.

LANGUAGE: http
CODE:
PUT /apis/resource.k8s.io/v1beta1/namespaces/{namespace}/resourceclaimtemplates/{name}

----------------------------------------

TITLE: PodTemplate Resource Definition in YAML
DESCRIPTION: Defines the structure of a PodTemplate resource, including its API version, kind, metadata, and template specification.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: PodTemplate
metadata:
  # Standard object's metadata
template:
  # Template defines the pods that will be created from this pod template

----------------------------------------

TITLE: Generating Certificates with kubeadm
DESCRIPTION: This command generates all required certificates for the Kubernetes cluster, including CA, API server, and etcd certificates.

LANGUAGE: bash
CODE:
kubeadm init phase certs all

----------------------------------------

TITLE: Installing Kubernetes Addons with kubeadm
DESCRIPTION: This command installs all available Kubernetes addons, including CoreDNS and kube-proxy, or allows for selective installation of specific addons.

LANGUAGE: bash
CODE:
kubeadm init phase addon all

----------------------------------------

TITLE: Defining ServiceLBNodePortControl Feature Gate Lifecycle in Kubernetes YAML
DESCRIPTION: This YAML snippet defines the lifecycle stages of the ServiceLBNodePortControl feature gate in Kubernetes. It specifies the alpha, beta, and stable stages with their respective versions and default values. The feature is marked as removed.

LANGUAGE: yaml
CODE:
---
# Removed from Kubernetes
title: ServiceLBNodePortControl
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.20"
    toVersion: "1.21"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.22"
    toVersion: "1.23"    
  - stage: stable
    defaultValue: true
    fromVersion: "1.24"
    toVersion: "1.25"    

removed: true
---

----------------------------------------

TITLE: Implementing Custom Feature Gates Provider in Go
DESCRIPTION: Example implementation of a custom feature gates provider that always enables features, demonstrating how to replace the default environment-variable based mechanism.

LANGUAGE: go
CODE:
import (
 "k8s.io/client-go/features"
)

type AlwaysEnabledGates struct{}

func (AlwaysEnabledGates) Enabled(features.Feature) bool {
 return true
}

func init() {
 features.ReplaceFeatureGates(AlwaysEnabledGates{})
}

----------------------------------------

TITLE: Creating a Secret from Files in YAML
DESCRIPTION: Create a Secret object in YAML using data from files

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Secret
metadata:
  name: mysecret
type: Opaque
data:
  username: YWRtaW4=
  password: MWYyZDFlMmU2N2Rm

----------------------------------------

TITLE: Defining JobMutableNodeSchedulingDirectives Feature Gate in YAML
DESCRIPTION: YAML configuration defining the lifecycle stages of the JobMutableNodeSchedulingDirectives feature gate in Kubernetes. Specifies beta and stable stages with version ranges and default values.

LANGUAGE: yaml
CODE:
---
title: JobMutableNodeSchedulingDirectives
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: beta 
    defaultValue: true
    fromVersion: "1.23"
    toVersion: "1.26"    
  - stage: stable
    defaultValue: true
    fromVersion: "1.27"
    toVersion: "1.28"    

removed: true
---

----------------------------------------

TITLE: Defining ExternalMetricValueList Resource in Kubernetes
DESCRIPTION: Defines the ExternalMetricValueList resource type which represents a collection of metric values. Contains required fields for metadata and a list of ExternalMetricValue items.

LANGUAGE: kubernetes
CODE:
apiVersion: external.metrics.k8s.io/v1beta1
kind: ExternalMetricValueList
metadata: meta/v1.ListMeta    # required
items: []ExternalMetricValue    # required: list of metric values

----------------------------------------

TITLE: Cluster Autoscaler Configuration in JSON
DESCRIPTION: JSON configuration for enabling Cluster Autoscaler addon in ACS engine deployment

LANGUAGE: json
CODE:
"addons": [
          {
            "name": "cluster-autoscaler",
            "enabled": true,
            "config": {
              "minNodes": "1",
              "maxNodes": "5"
            }
          }
        ]

----------------------------------------

TITLE: Deployment Architecture Description in Markdown Table
DESCRIPTION: A markdown table describing the components of the deployment architecture including UCD, IBM Cloud Kubernetes Service, Docker Registry and agent containers.

LANGUAGE: markdown
CODE:
| UCD: IBM UrbanCode Deploy is a tool for automating application deployments through your environments. IBM Cloud Kubernetes Service: Kubernetes implementation of IBM. WH Docker Registry: Docker Private image registry. Common agent containers: We expect to configure our services to use the WHC mandatory agents. We deployed all ion containers. |

----------------------------------------

TITLE: Identifying Pods Using a Specific PodSecurityPolicy
DESCRIPTION: This kubectl command finds all pods in the cluster that are using a specified PodSecurityPolicy by checking the 'kubernetes.io/psp' annotation.

LANGUAGE: sh
CODE:
PSP_NAME="original" # Set the name of the PSP you're checking for
kubectl get pods --all-namespaces -o jsonpath="{range .items[?(@.metadata.annotations.kubernetes\.io\/psp=='$PSP_NAME')]}{.metadata.namespace} {.metadata.name}{'\n'}{end}"

----------------------------------------

TITLE: Cluster Info ConfigMap Structure
DESCRIPTION: Example YAML structure of the cluster-info ConfigMap used for node discovery.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Config
clusters:
- cluster:
    certificate-authority-data: <ca-cert>
    server: https://<ip>:<port>
  name: ""
contexts: []
current-context: ""
preferences: {}
users: []

----------------------------------------

TITLE: Running Hugo Server Locally
DESCRIPTION: Commands to start Hugo server for local preview

LANGUAGE: shell
CODE:
cd <path_to_your_repo>/website
make serve

----------------------------------------

TITLE: Example Usage of kubectl api-resources Command
DESCRIPTION: These examples demonstrate various ways to use the kubectl api-resources command, including printing all resources, showing more information, sorting output, and filtering by namespace or API group.

LANGUAGE: bash
CODE:
# Print the supported API resources
kubectl api-resources

# Print the supported API resources with more information
kubectl api-resources -o wide

# Print the supported API resources sorted by a column
kubectl api-resources --sort-by=name

# Print the supported namespaced resources
kubectl api-resources --namespaced=true

# Print the supported non-namespaced resources
kubectl api-resources --namespaced=false

# Print the supported API resources with a specific APIGroup
kubectl api-resources --api-group=rbac.authorization.k8s.io

----------------------------------------

TITLE: Deleting All etcd Data Using etcdctl in Bash
DESCRIPTION: This command uses etcdctl to delete all data from etcd with a prefix match. It's recommended for wiping etcd data when external etcd is used.

LANGUAGE: bash
CODE:
etcdctl del "" --prefix

----------------------------------------

TITLE: Killing Random Pods in Kubernetes Cluster using Bash
DESCRIPTION: This Bash script demonstrates how to kill random pods across a Kubernetes cluster. It uses kubectl to get pod names, selects a random pod, and then deletes it.

LANGUAGE: bash
CODE:
while true; do\n  kubectl get pods --all-namespaces -o jsonpath='{.items[*].metadata.name}' |\n  tr -s '[[:space:]]' '\n' |\n  shuf -n 1 |\n  xargs -I {} kubectl delete pod {}\n  sleep 10\ndone

----------------------------------------

TITLE: Getting Node Information in YAML Format
DESCRIPTION: Command to retrieve detailed node information in YAML format, including metadata, spec, and status.

LANGUAGE: shell
CODE:
kubectl get node kube-worker-1 -o yaml

----------------------------------------

TITLE: Configuring LimitRange for Storage Requests in Kubernetes
DESCRIPTION: YAML configuration for implementing a LimitRange that enforces minimum and maximum storage request sizes for PersistentVolumeClaims. Sets a minimum of 1Gi and maximum of 2Gi storage limit.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: LimitRange
metadata:
  name: storagelimits
spec:
  limits:
  - type: PersistentVolumeClaim
    max:
      storage: 2Gi
    min:
      storage: 1Gi

----------------------------------------

TITLE: CSINodeInfo Feature Gate Configuration YAML
DESCRIPTION: YAML configuration defining the lifecycle stages and version ranges for the CSINodeInfo feature gate. Shows progression from alpha through stable before removal.

LANGUAGE: yaml
CODE:
title: CSINodeInfo
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.12"
    toVersion: "1.13"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.14"
    toVersion: "1.16"    
  - stage: stable
    defaultValue: true
    fromVersion: "1.17"
    toVersion: "1.22"

removed: true

----------------------------------------

TITLE: Second Pod Extended Resource Configuration
DESCRIPTION: YAML configuration for a second Pod requesting 2 dongles as extended resources.

LANGUAGE: yaml
CODE:
{{% code_sample file="pods/resource/extended-resource-pod-2.yaml" %}}

----------------------------------------

TITLE: Setting Linux Capabilities for a Container
DESCRIPTION: This YAML snippet shows how to add specific Linux capabilities to a Container.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: security-context-demo-4
spec:
  containers:
  - name: sec-ctx-4
    image: gcr.io/google-samples/node-hello:1.0
    securityContext:
      capabilities:
        add: ["NET_ADMIN", "SYS_TIME"]

----------------------------------------

TITLE: Configuring StatefulSet PVC Retention Policy in YAML
DESCRIPTION: The StatefulSet spec includes a PersistentVolumeClaim retention policy that controls when PVCs are deleted. The policy has two parameters: 'whenDeleted' and 'whenScaled', each of which can be set to either 'Retain' or 'Delete'.

LANGUAGE: yaml
CODE:
layout: blog
title: 'Kubernetes 1.23: StatefulSet PVC Auto-Deletion (alpha)'
date: 2021-12-16
slug: kubernetes-1-23-statefulset-pvc-auto-deletion
author: >
  Matthew Cary (Google)

----------------------------------------

TITLE: Deployment with ConfigMap in Multi-Container Pod
DESCRIPTION: YAML manifest for a Deployment with two containers sharing a volume, using a ConfigMap.

LANGUAGE: yaml
CODE:
{{% code_sample file="deployments/deployment-with-configmap-two-containers.yaml" %}}

----------------------------------------

TITLE: Basic Pod Logging Example
DESCRIPTION: YAML configuration for a Pod that writes timestamps to standard output stream once per second.

LANGUAGE: shell
CODE:
kubectl apply -f https://k8s.io/examples/debug/counter-pod.yaml

----------------------------------------

TITLE: Configuring Kubernetes Documentation Resources
DESCRIPTION: YAML configuration that organizes documentation resources into categories based on API maturity levels. Uses glob patterns to match content files and assigns them appropriate titles.

LANGUAGE: yaml
CODE:
---
headless: true

resources:
- src: "*alpha*"
  title: "alpha"
- src: "*beta*"
  title: "beta"
- src: "*deprecated*"
  title: "deprecated"
- src: "*stable*"
  title: "stable"
---

----------------------------------------

TITLE: Creating a Pod with PersistentVolumeClaim
DESCRIPTION: YAML configuration for a Pod that uses a PersistentVolumeClaim for storage.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: task-pv-pod
spec:
  volumes:
    - name: task-pv-storage
      persistentVolumeClaim:
        claimName: task-pv-claim
  containers:
    - name: task-pv-container
      image: nginx
      ports:
        - containerPort: 80
          name: "http-server"
      volumeMounts:
        - mountPath: "/usr/share/nginx/html"
          name: task-pv-storage

----------------------------------------

TITLE: Defining Node Selection Criteria Using Labels
DESCRIPTION: This YAML snippet shows how to use labels to specify node selection criteria for a Pod.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: cuda-test
spec:
  containers:
    - name: cuda-test
      image: "registry.k8s.io/cuda-vector-add:v0.1"
      resources:
        limits:
          nvidia.com/gpu: 1
  nodeSelector:
    accelerator: nvidia-tesla-p100

----------------------------------------

TITLE: Scaling a Deployment
DESCRIPTION: Command to scale a Deployment to a specific number of replicas.

LANGUAGE: shell
CODE:
kubectl scale deployment.v1.apps/nginx-deployment --replicas=10

----------------------------------------

TITLE: Checking ZooKeeper myid Files
DESCRIPTION: Command to check the contents of myid files in ZooKeeper Pods.

LANGUAGE: bash
CODE:
for i in 0 1 2; do echo "myid zk-$i";kubectl exec zk-$i -- cat /var/lib/zookeeper/data/myid; done

----------------------------------------

TITLE: Pod Resource Configuration
DESCRIPTION: YAML configuration showing Pod resource specification within constraints

LANGUAGE: yaml
CODE:
resources:
  limits:
     memory: 800Mi
  requests:
    memory: 600Mi

----------------------------------------

TITLE: Defining the PodResourcesLister gRPC Service in Kubernetes
DESCRIPTION: This gRPC service definition outlines the PodResourcesLister interface used for discovering in-use devices and metadata in Kubernetes. It includes methods for listing pod resources and getting allocatable resources.

LANGUAGE: gRPC
CODE:
// PodResourcesLister is a service provided by the kubelet that provides information about the
// node resources consumed by pods and containers on the node
service PodResourcesLister {
    rpc List(ListPodResourcesRequest) returns (ListPodResourcesResponse) {}
    rpc GetAllocatableResources(AllocatableResourcesRequest) returns (AllocatableResourcesResponse) {}
    rpc Get(GetPodResourcesRequest) returns (GetPodResourcesResponse) {}
}

----------------------------------------

TITLE: Checking Persistent PostgreSQL Data
DESCRIPTION: This command lists the contents of the NFS share used for persistent storage, showing the directories created for each PostgreSQL pod in the StatefulSet.

LANGUAGE: bash
CODE:
ls -l /nfsfileshare/

----------------------------------------

TITLE: Examining Memory Manager State File
DESCRIPTION: This JSON snippet shows the contents of the Memory Manager state file, which includes information about NUMA node assignments and memory allocation.

LANGUAGE: json
CODE:
{
   "policyName":"Static",
   "machineState":{
      "0":{
         "numberOfAssignments":1,
         "memoryMap":{
            "hugepages-1Gi":{
               "total":0,
               "systemReserved":0,
               "allocatable":0,
               "reserved":0,
               "free":0
            },
            "memory":{
               "total":134987354112,
               "systemReserved":3221225472,
               "allocatable":131766128640,
               "reserved":131766128640,
               "free":0
            }
         },
         "nodes":[
            0,
            1
         ]
      },
      "1":{
         "numberOfAssignments":1,
         "memoryMap":{
            "hugepages-1Gi":{
               "total":0,
               "systemReserved":0,
               "allocatable":0,
               "reserved":0,
               "free":0
            },
            "memory":{
               "total":135286722560,
               "systemReserved":2252341248,
               "allocatable":133034381312,
               "reserved":29295144960,
               "free":103739236352
            }
         },
         "nodes":[
            0,
            1
         ]
      }
   },
   "entries":{
      "fa9bdd38-6df9-4cf9-aa67-8c4814da37a8":{
         "guaranteed":[
            {
               "numaAffinity":[
                  0,
                  1
               ],
               "type":"memory",
               "size":161061273600
            }
         ]
      }
   },
   "checksum":4142013182
}

----------------------------------------

TITLE: Configuring Name-based Virtual Hosting Ingress
DESCRIPTION: An Ingress that routes traffic to different services based on the hostname.

LANGUAGE: yaml
CODE:
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: name-virtual-host-ingress
spec:
  rules:
  - host: foo.bar.com
    http:
      paths:
      - pathType: Prefix
        path: "/"
        backend:
          service:
            name: service1
            port:
              number: 80
  - host: bar.foo.com
    http:
      paths:
      - pathType: Prefix
        path: "/"
        backend:
          service:
            name: service2
            port:
              number: 80

----------------------------------------

TITLE: Configuring a Gateway in Kubernetes
DESCRIPTION: A minimal example of a Gateway resource, which describes an instance of traffic handling infrastructure listening for HTTP traffic on port 80.

LANGUAGE: yaml
CODE:
apiVersion: gateway.networking.k8s.io/v1
kind: Gateway
metadata:
  name: example-gateway
spec:
  gatewayClassName: example-class
  listeners:
  - name: http
    protocol: HTTP
    port: 80

----------------------------------------

TITLE: Displaying Structured Log Output in Kubernetes
DESCRIPTION: Example of structured log output before and after formatting improvements in Kubernetes 1.24. Shows how multi-line log entries are now formatted with indentation and markers for better readability.

LANGUAGE: plaintext
CODE:
I1112 14:06:35.783529  328441 structured_logging.go:51] "using InfoS" longData={Name:long Data:Multiple
lines
with quite a bit
of text. internal:0}
I1112 14:06:35.783549  328441 structured_logging.go:52] "using InfoS with\nthe message across multiple lines" int=1 stringData="long: Multiple\nlines\nwith quite a bit\nof text." str="another value"

I1126 10:31:50.378204  121736 structured_logging.go:59] "using InfoS" longData=<
	{Name:long Data:Multiple
	lines
	with quite a bit
	of text. internal:0}
 >
I1126 10:31:50.378228  121736 structured_logging.go:60] "using InfoS with\nthe message across multiple lines" int=1 stringData=<
	long: Multiple
	lines
	with quite a bit
	of text.
 > str="another value"

----------------------------------------

TITLE: Configuring Eviction Thresholds in KubeletConfiguration
DESCRIPTION: Example configuration for setting hard eviction thresholds to manage out-of-resource scenarios.

LANGUAGE: yaml
CODE:
evictionHard:
  memory.available: "100Mi"
  nodefs.available: "10%"
  nodefs.inodesFree: "5%"
  imagefs.available: "15%"

----------------------------------------

TITLE: Installing Example Populator in Kubernetes
DESCRIPTION: Terminal commands to install the example hello-populator and its CRD.

LANGUAGE: terminal
CODE:
kubectl apply -f https://raw.githubusercontent.com/kubernetes-csi/lib-volume-populator/master/example/hello-populator/crd.yaml
kubectl apply -f https://raw.githubusercontent.com/kubernetes-csi/lib-volume-populator/master/example/hello-populator/deploy.yaml

----------------------------------------

TITLE: Namespace Configuration YAML Header
DESCRIPTION: YAML front matter defining metadata for the documentation page, including reviewers, title and weight.

LANGUAGE: yaml
CODE:
reviewers:
- tallclair
- liggitt
title: Enforcing Pod Security Standards
weight: 40

----------------------------------------

TITLE: Creating Namespace for CPU Constraints
DESCRIPTION: Creates a new namespace to isolate the CPU constraint examples

LANGUAGE: shell
CODE:
kubectl create namespace constraints-cpu-example

----------------------------------------

TITLE: Executing CoreDNS Addon Upgrade in Kubernetes
DESCRIPTION: This command upgrades the CoreDNS addon in a Kubernetes cluster. It supports various options for configuration, dry-run execution, and patching.

LANGUAGE: shell
CODE:
kubeadm upgrade node phase addon coredns [flags]

----------------------------------------

TITLE: Importing Endpoints API in Go
DESCRIPTION: Import statement for using the Endpoints API in Go code.

LANGUAGE: go
CODE:
import "k8s.io/api/core/v1"

----------------------------------------

TITLE: Creating a Non-Preempting Priority Class
DESCRIPTION: This command creates a priority class that cannot preempt pods with lower priority. It uses the preemption-policy flag set to 'Never'.

LANGUAGE: bash
CODE:
kubectl create priorityclass high-priority --value=1000 --description="high priority" --preemption-policy="Never"

----------------------------------------

TITLE: Delaying Pod Start in Shell Init Container
DESCRIPTION: Simple shell command to delay the start of the main container by sleeping.

LANGUAGE: Shell
CODE:
sleep 60

----------------------------------------

TITLE: Monitoring and Cleanup Operations
DESCRIPTION: Commands for monitoring rollout status and cleaning up DaemonSet resources.

LANGUAGE: shell
CODE:
kubectl rollout status ds/fluentd-elasticsearch -n kube-system

LANGUAGE: shell
CODE:
kubectl delete ds fluentd-elasticsearch -n kube-system

----------------------------------------

TITLE: Basic kubectl set env Command
DESCRIPTION: Basic syntax for setting environment variables on Kubernetes resources

LANGUAGE: bash
CODE:
kubectl set env RESOURCE/NAME KEY_1=VAL_1 ... KEY_N=VAL_N

----------------------------------------

TITLE: Defining LoggingAlphaOptions Feature Gate in YAML
DESCRIPTION: YAML configuration that defines the LoggingAlphaOptions feature gate properties including its stage, default value, and version introduction. This feature gate is used to control experimental logging capabilities in Kubernetes.

LANGUAGE: yaml
CODE:
---
title: LoggingAlphaOptions
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha
    defaultValue: false
    fromVersion: "1.24"
---

----------------------------------------

TITLE: YAML Front Matter for Documentation Page
DESCRIPTION: YAML front matter metadata defining the page title and weight/order in the documentation structure.

LANGUAGE: yaml
CODE:
---
title: Expose Your App Publicly
weight: 40
---

----------------------------------------

TITLE: Node Affinity Configuration for DaemonSet Pods
DESCRIPTION: This YAML snippet shows the node affinity configuration automatically added by the DaemonSet controller to match Pods with specific nodes.

LANGUAGE: yaml
CODE:
nodeAffinity:
  requiredDuringSchedulingIgnoredDuringExecution:
    nodeSelectorTerms:
    - matchFields:
      - key: metadata.name
        operator: In
        values:
        - target-host-name

----------------------------------------

TITLE: ClusterTrustBundle Struct Definition in Go
DESCRIPTION: Defines the structure of a ClusterTrustBundle object in Go, including its metadata and spec fields.

LANGUAGE: go
CODE:
type ClusterTrustBundle struct {
  metav1.TypeMeta `json:",inline"`
  metav1.ObjectMeta `json:"metadata,omitempty"`
  Spec ClusterTrustBundleSpec `json:"spec"`
}

----------------------------------------

TITLE: Basic kubectl config view Usage
DESCRIPTION: Basic examples of using kubectl config view command to display kubeconfig settings, show raw certificate data, and extract specific values using jsonpath expressions.

LANGUAGE: bash
CODE:
# Show merged kubeconfig settings
kubectl config view

# Show merged kubeconfig settings, raw certificate data, and exposed secrets
kubectl config view --raw

# Get the password for the e2e user
kubectl config view -o jsonpath='{.users[?(@.name == "e2e")].user.password}'

----------------------------------------

TITLE: Creating ConfigMap for Redis Configuration in YAML
DESCRIPTION: Creates a ConfigMap named 'example-redis-config' with an empty configuration block for Redis.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: ConfigMap
metadata:
  name: example-redis-config
data:
  redis-config: ""

----------------------------------------

TITLE: Downloading Docker Compose Example File
DESCRIPTION: Command to download a sample Docker Compose file for conversion

LANGUAGE: bash
CODE:
wget https://raw.githubusercontent.com/kubernetes/kompose/master/examples/docker-compose.yaml

----------------------------------------

TITLE: Applying Updated Kubernetes Secret
DESCRIPTION: kubectl command to apply changes to an existing Secret object.

LANGUAGE: shell
CODE:
kubectl apply -f ./secret.yaml

----------------------------------------

TITLE: Creating etcd Snapshot in Shell
DESCRIPTION: Command to create a snapshot of the etcd keyspace using etcdctl.

LANGUAGE: shell
CODE:
ETCDCTL_API=3 etcdctl --endpoints $ENDPOINT snapshot save snapshot.db

----------------------------------------

TITLE: Kernel Version Requirements for Kube-proxy Nftables Mode
DESCRIPTION: This snippet outlines the kernel and nft tool version requirements for using the nftables proxy mode in kube-proxy.

LANGUAGE: bash
CODE:
nft command-line tool version 1.0.1 or later
Kernel 5.13 or later (recommended)
Kernel 5.4 or later (for testing/development with nftables.skipKernelVersionCheck option)

----------------------------------------

TITLE: Configuring HPAScaleToZero Feature Gate in YAML
DESCRIPTION: YAML configuration defining the HPAScaleToZero feature gate, which was introduced as an alpha feature in Kubernetes 1.16 with a default value of false. This feature enables setting minReplicas to 0 for HorizontalPodAutoscaler resources when using custom or external metrics.

LANGUAGE: yaml
CODE:
title: HPAScaleToZero
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha
    defaultValue: false
    fromVersion: "1.16"

----------------------------------------

TITLE: Executing Commands in Existing Kubernetes Containers
DESCRIPTION: Shows how to use kubectl exec to run commands inside an existing container without interrupting the running service.

LANGUAGE: console
CODE:
$> kubectl exec redis-izl09 -- ls /
bin
boot
data
dev
entrypoint.sh
etc
home

----------------------------------------

TITLE: Starting Minikube with CNI Network Plugin
DESCRIPTION: Command to start Minikube with the Container Network Interface (CNI) plugin enabled, which is required for Cilium.

LANGUAGE: shell
CODE:
minikube start --network-plugin=cni

----------------------------------------

TITLE: Defining a ResourceClass for dynamic resource allocation
DESCRIPTION: Example of defining a ResourceClass for a fictional resource driver

LANGUAGE: yaml
CODE:
apiVersion: resource.k8s.io/v1alpha1
kind: ResourceClass
name: resource.example.com
driverName: resource-driver.example.com

----------------------------------------

TITLE: Defining MetricValueList Resource Type
DESCRIPTION: Defines a list structure for holding multiple metric values. Contains metadata and an array of MetricValue items.

LANGUAGE: yaml
CODE:
apiVersion: custom.metrics.k8s.io/v1beta2
kind: MetricValueList
metadata: ListMeta
items: []MetricValue

----------------------------------------

TITLE: Defining Kubernetes AdvancedAuditing Feature Gate Stages
DESCRIPTION: YAML configuration that specifies the lifecycle stages of the AdvancedAuditing feature gate in Kubernetes. It defines three stages (alpha, beta, stable) with their respective version ranges and default values, indicating the feature was ultimately removed after version 1.27.

LANGUAGE: yaml
CODE:
title: AdvancedAuditing
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.7"
    toVersion: "1.7"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.8"
    toVersion: "1.11"    
  - stage: stable
    defaultValue: true
    fromVersion: "1.12"
    toVersion: "1.27"    

removed: true

----------------------------------------

TITLE: JavaScript Client Example for Kubernetes API
DESCRIPTION: Example of using the JavaScript client library to access the Kubernetes API.

LANGUAGE: javascript
CODE:
const k8s = require('@kubernetes/client-node');

const kc = new k8s.KubeConfig();
kc.loadFromDefault();

const k8sApi = kc.makeApiClient(k8s.CoreV1Api);

k8sApi.listNamespacedPod('default').then((res) => {
    console.log(res.body);
});

----------------------------------------

TITLE: Installing KinD on WSL2
DESCRIPTION: Commands to download, make executable, and install the KinD binary on WSL2.

LANGUAGE: bash
CODE:
curl -Lo ./kind https://github.com/kubernetes-sigs/kind/releases/download/v0.7.0/kind-linux-amd64
chmod +x ./kind
sudo mv ./kind /usr/local/bin/

----------------------------------------

TITLE: Retrieving Detailed Pod Information in YAML Format
DESCRIPTION: This command retrieves detailed information about a pod in YAML format.

LANGUAGE: shell
CODE:
kubectl get pod nginx-deployment-1006230814-6winp -o yaml

----------------------------------------

TITLE: Creating a new join token
DESCRIPTION: Command to create a new join token on the control-plane node.

LANGUAGE: bash
CODE:
kubeadm token create

----------------------------------------

TITLE: Configuring KMSv1 Feature Gate in Kubernetes YAML
DESCRIPTION: Defines the KMSv1 feature gate with its deprecation stages and default values for Kubernetes versions 1.28 and 1.29. It enables KMS v1 API for encryption at rest.

LANGUAGE: yaml
CODE:
title: KMSv1
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: deprecated
    defaultValue: true
    fromVersion: "1.28"  
    toVersion: "1.28"
  - stage: deprecated
    defaultValue: false
    fromVersion: "1.29"  

----------------------------------------

TITLE: Describing a ReplicationController in Kubernetes
DESCRIPTION: This shell command retrieves detailed information about the specified ReplicationController using kubectl.

LANGUAGE: shell
CODE:
kubectl describe replicationcontrollers/nginx

----------------------------------------

TITLE: Creating a Cloned Persistent Volume Claim in Kubernetes YAML
DESCRIPTION: This YAML defines a Persistent Volume Claim that is cloned from an existing PVC, using a CSI plugin storage class.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: cloned-pvc
spec:
  storageClassName: my-csi-plugin
  dataSource:
    name: existing-src-pvc-name
    kind: PersistentVolumeClaim
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

----------------------------------------

TITLE: Viewing Job Pod Logs
DESCRIPTION: Shell command to view the logs of a specific pod in the Job, showing the ping results between pods.

LANGUAGE: shell
CODE:
kubectl logs example-job-0-qws42

LANGUAGE: text
CODE:
Failed to ping pod example-job-0.headless-svc, retrying in 1 second...
Successfully pinged pod: example-job-0.headless-svc
Successfully pinged pod: example-job-1.headless-svc
Successfully pinged pod: example-job-2.headless-svc

----------------------------------------

TITLE: Creating a Pod with Specified CPU Request in Kubernetes
DESCRIPTION: This command creates a Pod with a specified CPU request but no limit, showing how Kubernetes applies the default limit.

LANGUAGE: shell
CODE:
kubectl apply -f https://k8s.io/examples/admin/resource/cpu-defaults-pod-3.yaml --namespace=default-cpu-example

----------------------------------------

TITLE: CertificateSigningRequest HTTP Operations
DESCRIPTION: Available HTTP operations for interacting with CertificateSigningRequest resources including GET, POST, PUT, PATCH and DELETE methods

LANGUAGE: http
CODE:
GET /apis/certificates.k8s.io/v1/certificatesigningrequests/{name}
POST /apis/certificates.k8s.io/v1/certificatesigningrequests
PUT /apis/certificates.k8s.io/v1/certificatesigningrequests/{name}
PATCH /apis/certificates.k8s.io/v1/certificatesigningrequests/{name}
DELETE /apis/certificates.k8s.io/v1/certificatesigningrequests/{name}

----------------------------------------

TITLE: Configuring SkipReadOnlyValidationGCE Feature Gate in Kubernetes YAML
DESCRIPTION: This YAML configuration defines the lifecycle stages and default values for the SkipReadOnlyValidationGCE feature gate. It specifies the alpha and deprecated stages, along with their respective version ranges and default values.

LANGUAGE: yaml
CODE:
title: SkipReadOnlyValidationGCE
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha
    defaultValue: false
    fromVersion: "1.28"
    toVersion: "1.28"
  - stage: deprecated
    defaultValue: true
    fromVersion: "1.29"
    toVersion: "1.30"

removed: true

----------------------------------------

TITLE: Auto-scaling a deployment with kubectl
DESCRIPTION: Example of auto-scaling a deployment named 'foo' with a minimum of 2 pods and a maximum of 10 pods, using the default autoscaling policy.

LANGUAGE: bash
CODE:
kubectl autoscale deployment foo --min=2 --max=10

----------------------------------------

TITLE: kubectl top pod Example Commands
DESCRIPTION: Examples demonstrating various ways to use kubectl top pod command, including namespace filtering and container-level metrics.

LANGUAGE: bash
CODE:
  # Show metrics for all pods in the default namespace
  kubectl top pod
  
  # Show metrics for all pods in the given namespace
  kubectl top pod --namespace=NAMESPACE
  
  # Show metrics for a given pod and its containers
  kubectl top pod POD_NAME --containers
  
  # Show metrics for the pods defined by label name=myLabel
  kubectl top pod -l name=myLabel

----------------------------------------

TITLE: Defining Custom StorageClass in Kubernetes
DESCRIPTION: Example of creating a custom StorageClass named 'gold' using GCE PD SSD as the storage provider.

LANGUAGE: yaml
CODE:
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: gold
provisioner: kubernetes.io/gce-pd
parameters:
  type: pd-ssd

----------------------------------------

TITLE: Initializing kubeadm with custom configuration
DESCRIPTION: This shell command initializes a kubeadm cluster using a custom configuration file that specifies the cgroup driver.

LANGUAGE: shell
CODE:
kubeadm init --config kubeadm-config.yaml

----------------------------------------

TITLE: Configuring Blog Menu Item in YAML
DESCRIPTION: YAML front matter configuration that sets up the blog section in the main navigation menu, including the title, link title, and weight for positioning.

LANGUAGE: yaml
CODE:
title: Kubernetes Blog
linkTitle: Blog
menu:
  main:
    title: "Blog"
    weight: 20

----------------------------------------

TITLE: Configuring containerd for Rootless Mode
DESCRIPTION: Configuration for running containerd within a user namespace, including disabling AppArmor, ignoring oom_score_adj errors, and using fuse-overlayfs snapshotter.

LANGUAGE: toml
CODE:
version = 2

[plugins."io.containerd.grpc.v1.cri"]
  disable_apparmor = true
  restrict_oom_score_adj = true
  disable_hugetlb_controller = true

[plugins."io.containerd.grpc.v1.cri".containerd]
  snapshotter = "fuse-overlayfs"

[plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
  SystemdCgroup = false

----------------------------------------

TITLE: Applying DaemonSet to Mitigate Connection Reset Issue in Kubernetes
DESCRIPTION: This YAML snippet defines a DaemonSet that runs a startup script on all nodes to make conntrack more liberal with packet handling. It sets the ip_conntrack_tcp_be_liberal sysctl parameter to 1, which helps prevent the connection reset issue.

LANGUAGE: yaml
CODE:
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: startup-script
  labels:
    app: startup-script
spec:
  template:
    metadata:
      labels:
        app: startup-script
    spec:
      hostPID: true
      containers:
      - name: startup-script
        image: gcr.io/google-containers/startup-script:v1
        imagePullPolicy: IfNotPresent
        securityContext:
          privileged: true
        env:
        - name: STARTUP_SCRIPT
          value: |
            #! /bin/bash
            echo 1 > /proc/sys/net/ipv4/netfilter/ip_conntrack_tcp_be_liberal
            echo done

----------------------------------------

TITLE: Reapplying ZooKeeper Manifest
DESCRIPTION: Command to reapply the ZooKeeper manifest after deletion.

LANGUAGE: bash
CODE:
kubectl apply -f https://k8s.io/examples/application/zookeeper/zookeeper.yaml

----------------------------------------

TITLE: Creating and Managing Kubernetes Resources
DESCRIPTION: Commands for creating and managing Kubernetes resources using kubectl apply, including deployments, jobs, and secrets.

LANGUAGE: bash
CODE:
kubectl apply -f ./my-manifest.yaml
kubectl apply -f ./my1.yaml -f ./my2.yaml
kubectl create deployment nginx --image=nginx
kubectl create job hello --image=busybox:1.28 -- echo "Hello World"

----------------------------------------

TITLE: Creating ZooKeeper StatefulSet and Services
DESCRIPTION: Kubernetes manifest to create a ZooKeeper StatefulSet, headless service, client service, and PodDisruptionBudget.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Service
metadata:
  name: zk-hs
  labels:
    app: zk
spec:
  ports:
  - port: 2888
    name: server
  - port: 3888
    name: leader-election
  clusterIP: None
  selector:
    app: zk
---
apiVersion: v1
kind: Service
metadata:
  name: zk-cs
  labels:
    app: zk
spec:
  ports:
  - port: 2181
    name: client
  selector:
    app: zk
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: zk-pdb
spec:
  selector:
    matchLabels:
      app: zk
  maxUnavailable: 1
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: zk
spec:
  selector:
    matchLabels:
      app: zk
  serviceName: zk-hs
  replicas: 3
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: OrderedReady
  template:
    metadata:
      labels:
        app: zk
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values:
                    - zk
              topologyKey: "kubernetes.io/hostname"
      containers:
      - name: kubernetes-zookeeper
        imagePullPolicy: Always
        image: "k8s.gcr.io/kubernetes-zookeeper:1.0-3.4.10"
        resources:
          requests:
            memory: "1Gi"
            cpu: "0.5"
        ports:
        - containerPort: 2181
          name: client
        - containerPort: 2888
          name: server
        - containerPort: 3888
          name: leader-election
        command:
        - sh
        - -c
        - "start-zookeeper \
          --servers=3 \
          --data_dir=/var/lib/zookeeper/data \
          --data_log_dir=/var/lib/zookeeper/data/log \
          --conf_dir=/opt/zookeeper/conf \
          --client_port=2181 \
          --election_port=3888 \
          --server_port=2888 \
          --tick_time=2000 \
          --init_limit=10 \
          --sync_limit=5 \
          --heap=512M \
          --max_client_cnxns=60 \
          --snap_retain_count=3 \
          --purge_interval=12 \
          --max_session_timeout=40000 \
          --min_session_timeout=4000 \
          --log_level=INFO"
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - "zookeeper-ready 2181"
          initialDelaySeconds: 10
          timeoutSeconds: 5
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - "zookeeper-ready 2181"
          initialDelaySeconds: 10
          timeoutSeconds: 5
        volumeMounts:
        - name: datadir
          mountPath: /var/lib/zookeeper
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
  volumeClaimTemplates:
  - metadata:
      name: datadir
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 10Gi

----------------------------------------

TITLE: Setting KVM2 as default Minikube driver
DESCRIPTION: This command sets KVM2 as the default VM driver for Minikube, allowing it to be used without specifying the driver each time.

LANGUAGE: shell
CODE:
minikube config set vm-driver kvm2

----------------------------------------

TITLE: Haskell Client Example for Kubernetes API
DESCRIPTION: Example of using the Haskell client library to access the Kubernetes API.

LANGUAGE: haskell
CODE:
exampleWithKubeConfig :: IO ()
exampleWithKubeConfig = do
    oidcCache <- atomically $ newTVar $ Map.fromList []
    (mgr, kcfg) <- mkKubeClientConfig oidcCache $ KubeConfigFile "/path/to/kubeconfig"
    dispatchMime
            mgr
            kcfg
            (CoreV1.listPodForAllNamespaces (Accept MimeJSON))
        >>= print

----------------------------------------

TITLE: Setting Cluster Configuration
DESCRIPTION: kubectl commands for configuring cluster details including server URLs and certificate authorities.

LANGUAGE: shell
CODE:
kubectl config --kubeconfig=config-demo set-cluster development --server=https://1.2.3.4 --certificate-authority=fake-ca-file
kubectl config --kubeconfig=config-demo set-cluster test --server=https://5.6.7.8 --insecure-skip-tls-verify

----------------------------------------

TITLE: Deploying Capacity Reservation Pods
DESCRIPTION: Shell command to create a deployment for placeholder pods in a specified namespace.

LANGUAGE: shell
CODE:
kubectl --namespace example apply -f https://k8s.io/examples/deployments/deployment-with-capacity-reservation.yaml

----------------------------------------

TITLE: Checkpointing and Restoring a Docker Container Using CRIU
DESCRIPTION: This snippet demonstrates how to use CRIU commands to checkpoint and restore a Docker container externally. It includes the necessary command line options to handle external bind mounts, AUFS pathnames, and cgroups.

LANGUAGE: bash
CODE:
$ docker run -d busybox:latest /bin/sh -c 'i=0; while true; do echo $i >> /foo; i=$(expr $i + 1); sleep 3; done'

$ docker ps
CONTAINER ID  IMAGE           COMMAND           CREATED        STATUS
168aefb8881b  busybox:latest  "/bin/sh -c 'i=0; 6 seconds ago  Up 4 seconds

$ sudo criu dump -o dump.log -v4 -t 17810 \
        -D /tmp/img/<container_id> \
        --root /var/lib/docker/aufs/mnt/<container_id> \
        --ext-mount-map /etc/resolv.conf:/etc/resolv.conf \
        --ext-mount-map /etc/hosts:/etc/hosts \
        --ext-mount-map /etc/hostname:/etc/hostname \
        --ext-mount-map /.dockerinit:/.dockerinit \
        --manage-cgroups \
        --evasive-devices

$ docker ps -a
CONTAINER ID  IMAGE           COMMAND           CREATED        STATUS
168aefb8881b  busybox:latest  "/bin/sh -c 'i=0; 6 minutes ago  Exited (-1) 4 minutes ago

$ sudo mount -t aufs -o br=\
/var/lib/docker/aufs/diff/<container_id>:\
/var/lib/docker/aufs/diff/<container_id>-init:\
/var/lib/docker/aufs/diff/a9eb172552348a9a49180694790b33a1097f546456d041b6e82e4d7716ddb721:\
/var/lib/docker/aufs/diff/120e218dd395ec314e7b6249f39d2853911b3d6def6ea164ae05722649f34b16:\
/var/lib/docker/aufs/diff/42eed7f1bf2ac3f1610c5e616d2ab1ee9c7290234240388d6297bc0f32c34229:\
/var/lib/docker/aufs/diff/511136ea3c5a64f264b78b5433614aec563103b4d4702f3ba7d4d2698e22c158:\
none /var/lib/docker/aufs/mnt/<container_id>

$ sudo criu restore -o restore.log -v4 -d
        -D /tmp/img/<container_id> \
        --root /var/lib/docker/aufs/mnt/<container_id> \
        --ext-mount-map /etc/resolv.conf:/var/lib/docker/containers/<container_id>/resolv.conf \
        --ext-mount-map /etc/hosts:/var/lib/docker/containers/<container_id>/hosts \
        --ext-mount-map /etc/hostname:/var/lib/docker/containers/<container_id>/hostname \
        --ext-mount-map /.dockerinit:/var/lib/docker/init/dockerinit-1.0.0 \
        --manage-cgroups \
        --evasive-devices

$ ps -ef | grep /bin/sh
root     18580     1  0 12:38 ?        00:00:00 /bin/sh -c i=0; while true; do echo $i >> /foo; i=$(expr $i + 1); sleep 3; done

$ docker ps -a
CONTAINER ID  IMAGE           COMMAND           CREATED        STATUS
168aefb8881b  busybox:latest  "/bin/sh -c 'i=0; 7 minutes ago  Exited (-1) 5 minutes ago

----------------------------------------

TITLE: Verifying etcd Snapshot with etcdutl in Shell
DESCRIPTION: Command to verify the status of an etcd snapshot using etcdutl.

LANGUAGE: shell
CODE:
etcdutl --write-out=table snapshot status snapshot.db

----------------------------------------

TITLE: Implementing Score Normalization Plugin in Go
DESCRIPTION: Example implementation of a plugin's scoring normalization method that adjusts node scores to fit within the NodeScoreMax range.

LANGUAGE: go
CODE:
func NormalizeScores(scores map[string]int) {
    highest := 0
    for _, score := range scores {
        highest = max(highest, score)
    }
    for node, score := range scores {
        scores[node] = score*NodeScoreMax/highest
    }
}

----------------------------------------

TITLE: Example Usage of kubectl config current-context
DESCRIPTION: This example demonstrates how to use the kubectl config current-context command to display the current context.

LANGUAGE: bash
CODE:
# Display the current-context
kubectl config current-context

----------------------------------------

TITLE: YAML Front Matter for Kubernetes Documentation
DESCRIPTION: YAML front matter defining the document metadata including title, description, content type and weight for the Kubernetes documentation system.

LANGUAGE: yaml
CODE:
---
title: Autoscaling Workloads
description: >
  With autoscaling, you can automatically update your workloads in one way or another. This allows your cluster to react to changes in resource demand more elastically and efficiently.
content_type: concept
weight: 40
---

----------------------------------------

TITLE: Defining a Generic Custom Resource for Kubernetes Addon Operators
DESCRIPTION: This YAML snippet defines a Generic custom resource used by the generic controller for managing multiple cluster addons. It specifies the object kind, version, group, and channel for the addon.

LANGUAGE: yaml
CODE:
apiVersion: addons.x-k8s.io/v1alpha1
kind: Generic
metadata:
 	name: generic-sample
spec:
  objectKind:
  kind: NodeLocalDNS
  version: "v1alpha1"
  group: addons.x-k8s.io
channel: "../nodelocaldns/channels"

----------------------------------------

TITLE: Running Kubeadm Reset Preflight Checks
DESCRIPTION: Command to execute pre-flight checks before resetting a Kubernetes node using kubeadm. Supports options for dry-run, force reset, and ignoring specific preflight errors.

LANGUAGE: bash
CODE:
kubeadm reset phase preflight [flags]

----------------------------------------

TITLE: Defining YAML Front Matter for Kubernetes Best Practices Documentation
DESCRIPTION: This YAML snippet defines the front matter for a documentation page about Kubernetes best practices. It specifies the title of the page and its weight (likely for ordering in a navigation structure).

LANGUAGE: yaml
CODE:
---
title: Best practices
weight: 40
---

----------------------------------------

TITLE: DeviceClass API Definition
DESCRIPTION: Core API metadata and version information for the DeviceClass resource

LANGUAGE: yaml
CODE:
apiVersion: resource.k8s.io/v1beta1
import: "k8s.io/api/resource/v1beta1"

----------------------------------------

TITLE: Setting Up a Local Kubernetes Cluster with Dynamic Resource Allocation
DESCRIPTION: Console commands to set up a local, one-node Kubernetes cluster with the Dynamic Resource Allocation feature enabled.

LANGUAGE: console
CODE:
$ hack/install-etcd.sh
...

$ RUNTIME_CONFIG=resource.k8s.io/v1alpha1 \
  FEATURE_GATES=DynamicResourceAllocation=true \
  DNS_ADDON="coredns" \
  CGROUP_DRIVER=systemd \
  CONTAINER_RUNTIME_ENDPOINT=unix:///var/run/crio/crio.sock \
  LOG_LEVEL=6 \
  ENABLE_CSI_SNAPSHOTTER=false \
  API_SECURE_PORT=6444 \
  ALLOW_PRIVILEGED=1 \
  PATH=$(pwd)/third_party/etcd:$PATH \
  ./hack/local-up-cluster.sh -O
...

----------------------------------------

TITLE: Defining a Name-based Virtual Hosting Ingress
DESCRIPTION: An Ingress resource that routes traffic to different backend services based on the request hostname.

LANGUAGE: yaml
CODE:
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: name-virtual-host-ingress
spec:
  rules:
  - host: foo.bar.com
    http:
      paths:
      - pathType: Prefix
        path: "/"
        backend:
          service:
            name: service1
            port:
              number: 80
  - host: bar.foo.com
    http:
      paths:
      - pathType: Prefix
        path: "/"
        backend:
          service:
            name: service2
            port:
              number: 80

----------------------------------------

TITLE: Configuring HorizontalPodAutoscaler Custom Downscale Window
DESCRIPTION: Example YAML for configuring a custom 1 minute downscale stabilization window in a HorizontalPodAutoscaler.

LANGUAGE: yaml
CODE:
behavior:
  scaleDown:
    stabilizationWindowSeconds: 60

----------------------------------------

TITLE: Listing PersistentVolumes in Kubernetes Cluster
DESCRIPTION: Command to list all PersistentVolumes in the cluster showing their capacity, access modes, reclaim policies, and status.

LANGUAGE: shell
CODE:
kubectl get pv

----------------------------------------

TITLE: Creating a New Kubeadm Token on Control Plane Node
DESCRIPTION: Generates a new kubeadm token on the control plane node for joining additional nodes.

LANGUAGE: bash
CODE:
sudo kubeadm token create

----------------------------------------

TITLE: Creating and Inspecting a Pod with Image Volume Source
DESCRIPTION: These shell commands demonstrate how to create a pod using the Image Volume Source feature and inspect its contents. It includes commands to apply the pod configuration, exec into the pod, and list the mounted files.

LANGUAGE: shell
CODE:
kubectl apply -f pod.yaml

LANGUAGE: shell
CODE:
kubectl exec -it pod -- sh

LANGUAGE: shell
CODE:
/ # ls /volume
dir   file
/ # cat /volume/file
2
/ # ls /volume/dir
file
/ # cat /volume/dir/file
1

----------------------------------------

TITLE: Setting Pod Security Audit Level on a Kubernetes Namespace
DESCRIPTION: This bash command sets the Pod Security audit level on a Kubernetes namespace. It labels the namespace with the specified audit level, which records policy violations in audit logs without enforcing them.

LANGUAGE: bash
CODE:
kubectl label --overwrite ns $NAMESPACE pod-security.kubernetes.io/audit=$LEVEL

----------------------------------------

TITLE: Validating Non-Empty List Exclusivity with CEL
DESCRIPTION: CEL expression to validate that one of two lists is non-empty, but not both.

LANGUAGE: CEL
CODE:
(self.list1.size() == 0) != (self.list2.size() == 0)

----------------------------------------

TITLE: Configuring Kubelet for Strict CPU Reservation in Kubernetes
DESCRIPTION: This YAML configuration enables the strict-cpu-reservation option for the CPU Manager static policy in Kubernetes. It sets the necessary feature gates, policy options, and reserved system CPUs.

LANGUAGE: yaml
CODE:
kind: KubeletConfiguration
apiVersion: kubelet.config.k8s.io/v1beta1
featureGates:
  ...
  CPUManagerPolicyOptions: true
  CPUManagerPolicyAlphaOptions: true
cpuManagerPolicy: static
cpuManagerPolicyOptions:
  strict-cpu-reservation: "true"
reservedSystemCPUs: "0,32,1,33,16,48"
...

----------------------------------------

TITLE: Control Plane Node Join Command
DESCRIPTION: Command to join a control-plane node to the cluster using token-based discovery with CA pinning.

LANGUAGE: shell
CODE:
kubeadm join --discovery-token abcdef.1234567890abcdef --discovery-token-ca-cert-hash sha256:1234..cdef --control-plane 1.2.3.4:6443

----------------------------------------

TITLE: Retrieving ControllerRevision Resources for DaemonSet in Kubernetes
DESCRIPTION: This command fetches the ControllerRevision resources associated with a DaemonSet, which store the revision history.

LANGUAGE: shell
CODE:
kubectl get controllerrevision -l <daemonset-selector-key>=<daemonset-selector-value>

----------------------------------------

TITLE: Defining PMEM-CSI Ephemeral Volume in Kubernetes Pod
DESCRIPTION: YAML configuration for a Kubernetes pod using a PMEM-CSI ephemeral inline volume.

LANGUAGE: yaml
CODE:
kind: Pod
apiVersion: v1
metadata:
  name: my-csi-app-inline-volume
spec:
  containers:
    - name: my-frontend
      image: busybox
      command: [ "sleep", "100000" ]
      volumeMounts:
      - mountPath: "/data"
        name: my-csi-volume
  volumes:
  - name: my-csi-volume
    csi:
      driver: pmem-csi.intel.com
      fsType: "xfs"
      volumeAttributes:
        size: "2Gi"
        nsmode: "fsdax"

----------------------------------------

TITLE: Viewing Specific DaemonSet Revision Details in Kubernetes
DESCRIPTION: This command displays the details of a specific revision of a DaemonSet, including pod template, labels, containers, and volumes.

LANGUAGE: shell
CODE:
kubectl rollout history daemonset <daemonset-name> --revision=1

----------------------------------------

TITLE: Creating Warning-Suppressed Kubernetes Client
DESCRIPTION: Go code demonstrating how to create a Kubernetes client that ignores warning messages.

LANGUAGE: go
CODE:
import (
  "k8s.io/client-go/rest"
  "k8s.io/client-go/kubernetes"
)

func getClientWithoutWarnings(config *rest.Config) (kubernetes.Interface, error) {
  config = rest.CopyConfig(config)
  config.WarningHandler = rest.NoWarnings{}
  return kubernetes.NewForConfig(config)
}

----------------------------------------

TITLE: Draining a node for maintenance
DESCRIPTION: This command marks a node as unschedulable and evicts workloads, preparing it for maintenance. It should be executed on a control plane node.

LANGUAGE: shell
CODE:
kubectl drain <node-to-drain> --ignore-daemonsets

----------------------------------------

TITLE: Kubeadm Upgrade Command
DESCRIPTION: The main command syntax for upgrading a Kubernetes cluster to a specified version using kubeadm.

LANGUAGE: bash
CODE:
kubeadm upgrade apply [version]

----------------------------------------

TITLE: Querying API Server Identity Leases in Kubernetes
DESCRIPTION: This command retrieves Lease objects in the kube-system namespace that represent kube-apiserver identities. It uses a label selector to filter the results.

LANGUAGE: shell
CODE:
kubectl -n kube-system get lease -l apiserver.kubernetes.io/identity=kube-apiserver

----------------------------------------

TITLE: Filtering and Validating List Map Entries with CEL
DESCRIPTION: CEL expression to validate the 'value' field of a listMap entry where key field 'name' is 'MY_ENV'.

LANGUAGE: CEL
CODE:
self.envars.filter(e, e.name = 'MY_ENV').all(e, e.value.matches('^[a-zA-Z]*$'))

----------------------------------------

TITLE: Defining CredentialProviderConfig in YAML
DESCRIPTION: YAML structure for defining a CredentialProviderConfig, which contains information about exec credential providers for the kubelet.

LANGUAGE: yaml
CODE:
apiVersion: kubelet.config.k8s.io/v1alpha1
kind: CredentialProviderConfig
providers:
  - name: providerName
    matchImages:
      - "*.azurecr.io"
      - "gcr.io"
    defaultCacheDuration: 30m
    apiVersion: "credentialprovider.kubelet.k8s.io/v1alpha1"
    args:
      - "arg1"
      - "arg2"
    env:
      - name: ENV_VAR1
        value: "value1"
      - name: ENV_VAR2
        value: "value2"

----------------------------------------

TITLE: Basic Kubectl Plugin Command Usage
DESCRIPTION: The basic syntax for using the kubectl plugin command with optional flags.

LANGUAGE: bash
CODE:
kubectl plugin [flags]

----------------------------------------

TITLE: Spark Application Configuration in KubeDirector
DESCRIPTION: JSON configuration file defining a Spark 2.2.1 application for KubeDirector, including API version, metadata, and system specifications.

LANGUAGE: json
CODE:
{
    "apiVersion": "kubedirector.bluedata.io/v1alpha1",
    "kind": "KubeDirectorApp",
    "metadata": {
        "name" : "spark221e2"
    },
    "spec" : {
        "systemctlMounts": true,
        "config": {
            "node_services": [
                {
                    "service_ids": [
                        "ssh",
                        "spark",
                        "spark_master",
                        "spark_worker"
                    ]
                }
            ]
        }
    }
}

----------------------------------------

TITLE: Defining ImageVolume Feature Gate Configuration in YAML
DESCRIPTION: YAML configuration defining the ImageVolume feature gate properties including its stage (alpha), default value (false), and the Kubernetes version it was introduced in (1.31).

LANGUAGE: yaml
CODE:
title: ImageVolume
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha
    defaultValue: false
    fromVersion: "1.31"

----------------------------------------

TITLE: kubectl Config Set Examples
DESCRIPTION: Examples demonstrating common use cases for setting cluster configurations, including server URLs, certificate data, context settings, and raw byte data.

LANGUAGE: bash
CODE:
  # Set the server field on the my-cluster cluster to https://1.2.3.4
  kubectl config set clusters.my-cluster.server https://1.2.3.4
  
  # Set the certificate-authority-data field on the my-cluster cluster
  kubectl config set clusters.my-cluster.certificate-authority-data $(echo "cert_data_here" | base64 -i -)
  
  # Set the cluster field in the my-context context to my-cluster
  kubectl config set contexts.my-context.cluster my-cluster
  
  # Set the client-key-data field in the cluster-admin user using --set-raw-bytes option
  kubectl config set users.cluster-admin.client-key-data cert_data_here --set-raw-bytes=true

----------------------------------------

TITLE: Defining TopologyManagerPolicyOptions Feature Gate Configuration
DESCRIPTION: YAML configuration defining the feature gate stages from alpha through stable, including version ranges and default values for each stage. The feature starts as alpha in v1.26, moves to beta in v1.28 with default enabled, and becomes stable in v1.32.

LANGUAGE: yaml
CODE:
title: TopologyManagerPolicyOptions
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha
    defaultValue: false
    fromVersion: "1.26"
    toVersion: "1.27"
  - stage: beta
    defaultValue: true
    fromVersion: "1.28"
    toVersion: "1.31"
  - stage: stable
    defaultValue: true
    fromVersion: "1.32"

----------------------------------------

TITLE: ValidatingWebhookConfiguration API Definition
DESCRIPTION: YAML definition showing the API version and import path for ValidatingWebhookConfiguration resources

LANGUAGE: yaml
CODE:
apiVersion: admissionregistration.k8s.io/v1
import: "k8s.io/api/admissionregistration/v1"

----------------------------------------

TITLE: Defining a Fluentd ConfigMap for Sidecar Logging in Kubernetes YAML
DESCRIPTION: YAML definition for a ConfigMap containing Fluentd configuration, used for sidecar logging agents.

LANGUAGE: yaml
CODE:
{{% codenew file="admin/logging/fluentd-sidecar-config.yaml" %}}

----------------------------------------

TITLE: Configuring NodeSwap Feature Gate in Kubernetes YAML
DESCRIPTION: YAML configuration for the NodeSwap feature gate that controls swap memory allocation. The feature progressed from alpha in v1.22 to beta in v1.28, becoming enabled by default in v1.30. Requires KubeletConfiguration.failSwapOn to be set to false for functionality.

LANGUAGE: yaml
CODE:
title: NodeSwap
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.22"
    toVersion: "1.27"
  - stage: beta
    defaultValue: false
    fromVersion: "1.28"
    toVersion: "1.29"
  - stage: beta
    defaultValue: true
    fromVersion: "1.30"

----------------------------------------

TITLE: Kubernetes Upgrade Phases
DESCRIPTION: Lists the phases executed during a Kubernetes cluster upgrade including preflight checks, control-plane upgrade, configuration uploads, and addon updates.

LANGUAGE: bash
CODE:
preflight        Run preflight checks before upgrade
control-plane    Upgrade the control plane
upload-config    Upload the kubeadm and kubelet configurations to ConfigMaps
  /kubeadm         Upload the kubeadm ClusterConfiguration to a ConfigMap
  /kubelet         Upload the kubelet configuration to a ConfigMap
kubelet-config   Upgrade the kubelet configuration for this node
bootstrap-token  Configures bootstrap token and cluster-info RBAC rules
addon            Upgrade the default kubeadm addons
  /coredns         Upgrade the CoreDNS addon
  /kube-proxy      Upgrade the kube-proxy addon
post-upgrade     Run post upgrade tasks

----------------------------------------

TITLE: Viewing Certificate Signing Requests
DESCRIPTION: This shell command shows how to view Certificate Signing Requests (CSRs) in the cluster.

LANGUAGE: shell
CODE:
kubectl get csr

----------------------------------------

TITLE: Configuring DryRun Feature Gate in Kubernetes YAML
DESCRIPTION: YAML configuration defining the lifecycle stages of the DryRun feature gate from alpha through stable versions. Includes version ranges and default values for each stage. The feature was introduced in v1.12 as alpha, promoted to beta in v1.13, reached stable in v1.19, and was removed after v1.27.

LANGUAGE: yaml
CODE:
title: DryRun
content_type: feature_gate
_build:
  list: never
  render: false
 
stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.12"
    toVersion: "1.12"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.13"
    toVersion: "1.18"    
  - stage: stable
    defaultValue: true
    fromVersion: "1.19"
    toVersion: "1.27"    

removed: true

----------------------------------------

TITLE: Deploying TensorFlow Serving in Kubeflow
DESCRIPTION: Command to generate and deploy a TensorFlow serving component for a trained model in Kubeflow.

LANGUAGE: bash
CODE:
ks generate tf-serving inception --name=inception
---namespace=default --model_path=gs://$bucket_name/$model_loc
ks apply gke -c inception

----------------------------------------

TITLE: Setting up kubectl Alias with Autocomplete
DESCRIPTION: Commands to create an alias 'k' for kubectl and enable autocomplete for the alias.

LANGUAGE: bash
CODE:
alias k=kubectl
complete -F __start_kubectl k

----------------------------------------

TITLE: Accessing Service Information in Kubernetes Container Environment
DESCRIPTION: Demonstrates how environment variables are set for services in a Kubernetes container. For a service named 'foo' mapping to a container 'bar', variables for the service host and port are defined.

LANGUAGE: shell
CODE:
FOO_SERVICE_HOST=<其上服务正运行的主机>
FOO_SERVICE_PORT=<其上服务正运行的端口>

----------------------------------------

TITLE: Configuring PodDeletionCost Feature Gate in Kubernetes YAML
DESCRIPTION: This YAML configuration defines the PodDeletionCost feature gate for Kubernetes. It specifies two stages: alpha (from version 1.21 to 1.21) with a default value of false, and beta (from version 1.22) with a default value of true.

LANGUAGE: yaml
CODE:
title: PodDeletionCost
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.21"
    toVersion: "1.21"
  - stage: beta
    defaultValue: true
    fromVersion: "1.22"

----------------------------------------

TITLE: Removing Extended Resource via HTTP PATCH
DESCRIPTION: This HTTP PATCH request removes the previously added 'dongle' extended resource from a specific node.

LANGUAGE: http
CODE:
PATCH /api/v1/nodes/<your-node-name>/status HTTP/1.1
Accept: application/json
Content-Type: application/json-patch+json
Host: k8s-master:8080

[
  {
    "op": "remove",
    "path": "/status/capacity/example.com~1dongle"
  }
]

----------------------------------------

TITLE: Defining multiple versions in a CustomResourceDefinition
DESCRIPTION: This example shows how to define multiple versions (v1beta1 and v1) in a CustomResourceDefinition using the apiextensions.k8s.io/v1 API.

LANGUAGE: yaml
CODE:
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: crontabs.example.com
spec:
  group: example.com
  versions:
  - name: v1beta1
    served: true
    storage: true
    schema:
      openAPIV3Schema:
        type: object
        properties:
          host:
            type: string
          port:
            type: string
  - name: v1
    served: true
    storage: false
    schema:
      openAPIV3Schema:
        type: object
        properties:
          host:
            type: string
          port:
            type: string
  conversion:
    strategy: None
  scope: Namespaced
  names:
    plural: crontabs
    singular: crontab
    kind: CronTab
    shortNames:
    - ct

----------------------------------------

TITLE: Updating a Deployment
DESCRIPTION: Command to update the image of a Deployment using kubectl set image.

LANGUAGE: shell
CODE:
kubectl set image deployment.v1.apps/nginx-deployment nginx=nginx:1.9.1 --record=true

----------------------------------------

TITLE: Defining CPUManager Feature Gate Stages in YAML
DESCRIPTION: YAML configuration that specifies the lifecycle stages of the CPUManager feature gate, including alpha, beta, and stable phases with their respective version ranges and default values.

LANGUAGE: yaml
CODE:
title: CPUManager
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.8"
    toVersion: "1.9"
  - stage: beta
    defaultValue: true
    fromVersion: "1.10"  
    toVersion: "1.25" 
  - stage: stable
    defaultValue: true
    fromVersion: "1.26"

----------------------------------------

TITLE: Remote Health Check with kubectl
DESCRIPTION: Command demonstrating how to check the readyz endpoint remotely using kubectl with authentication.

LANGUAGE: shell
CODE:
kubectl get --raw='/readyz?verbose'

----------------------------------------

TITLE: Reading Data from ZooKeeper
DESCRIPTION: Command to read data from ZooKeeper using zkCli.sh.

LANGUAGE: bash
CODE:
kubectl exec zk-1 zkCli.sh get /hello

----------------------------------------

TITLE: Implementing Pod Resources API Client in Go
DESCRIPTION: Example Go code demonstrating how to create a client for the Pod Resources API, connect to the kubelet socket, and list pod resources using gRPC.

LANGUAGE: go
CODE:
func main() {
	ctx, cancel := context.WithTimeout(context.Background(), connectionTimeout)
	defer cancel()

	socket := "/var/lib/kubelet/pod-resources/kubelet.sock"
	conn, err := grpc.DialContext(ctx, socket, grpc.WithInsecure(), grpc.WithBlock(),
		grpc.WithDialer(func(addr string, timeout time.Duration) (net.Conn, error) {
			return net.DialTimeout("unix", addr, timeout)
		}),
	)

	if err != nil {
		panic(err)
	}

    client := podresourcesapi.NewPodResourcesListerClient(conn)
    resp, err := client.List(ctx, &podresourcesapi.ListPodResourcesRequest{})
	if err != nil {
		panic(err)
	}
	net.Printf("%+v\n", resp)

----------------------------------------

TITLE: Configuring CustomResourceDefaulting Feature Gate in Kubernetes YAML
DESCRIPTION: YAML configuration that defines the lifecycle and settings for the CustomResourceDefaulting feature gate. It specifies three stages - alpha (1.15), beta (1.16), and stable (1.17-1.18) - with their respective default values and version ranges.

LANGUAGE: yaml
CODE:
title: CustomResourceDefaulting
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.15"
    toVersion: "1.15"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.16"
    toVersion: "1.16"    
  - stage: stable
    defaultValue: true
    fromVersion: "1.17"
    toVersion: "1.18"

removed: true

----------------------------------------

TITLE: Creating Pod with Persistent Volume
DESCRIPTION: YAML manifest for creating a Kubernetes Pod that uses a Persistent Volume Claim.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: web
spec:
  containers:
    - name: web
      image: nginx
      ports:
        - name: web
          containerPort: 80
          hostPort: 8081
          protocol: TCP
      volumeMounts:
        - mountPath: "/usr/share/nginx/html"
          name: mypd
  volumes:
    - name: mypd
      persistentVolumeClaim:
        claimName: myvol

----------------------------------------

TITLE: Pod Resource Inspection Commands
DESCRIPTION: Set of kubectl commands to inspect pod resource usage and configuration.

LANGUAGE: shell
CODE:
kubectl get pod cpu-demo --namespace=cpu-example
kubectl get pod cpu-demo --output=yaml --namespace=cpu-example
kubectl top pod cpu-demo --namespace=cpu-example

----------------------------------------

TITLE: Creating a PersistentVolume for CSI Pre-Provisioned Volumes in Kubernetes
DESCRIPTION: This YAML snippet defines a PersistentVolume that exposes a pre-existing volume named 'existingVolumeName' using the CSI driver 'csi-driver.example.com'. It includes various CSI-specific attributes and secret references.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: PersistentVolume
metadata:
  name: my-manually-created-pv
spec:
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  csi:
    driver: csi-driver.example.com
    volumeHandle: existingVolumeName
    readOnly: false
    fsType: ext4
    volumeAttributes:
      foo: bar
    controllerPublishSecretRef:
      name: mysecret1
      namespace: mynamespace
    nodeStageSecretRef:
      name: mysecret2
      namespace: mynamespace
    nodePublishSecretRef:
      name: mysecret3
      namespace: mynamespace

----------------------------------------

TITLE: Creating ConfigMap from Command Line
DESCRIPTION: Basic syntax for creating a configmap with kubectl. The command supports creating config maps from files, directories, or literal key-value pairs.

LANGUAGE: bash
CODE:
kubectl create configmap NAME [--from-file=[key=]source] [--from-literal=key1=value1] [--dry-run=server|client|none]

----------------------------------------

TITLE: Configuring PodLevelResources Feature Gate in YAML
DESCRIPTION: YAML configuration for the PodLevelResources feature gate in Kubernetes. It specifies the feature title, content type, build settings, and stage information including the default value and version introduced.

LANGUAGE: yaml
CODE:
title: PodLevelResources
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha
    defaultValue: false
    fromVersion: "1.32"

----------------------------------------

TITLE: Importing LabelSelector from Kubernetes API
DESCRIPTION: Import statement for using the LabelSelector type from the Kubernetes API.

LANGUAGE: go
CODE:
import "k8s.io/apimachinery/pkg/apis/meta/v1"

----------------------------------------

TITLE: Creating Multi-Zone Kubernetes Cluster on GCE
DESCRIPTION: Command to create a new Kubernetes cluster on Google Compute Engine with multi-zone support enabled

LANGUAGE: bash
CODE:
curl -sS https://get.k8s.io | MULTIZONE=true KUBERNETES_PROVIDER=gce KUBE_GCE_ZONE=us-central1-a NUM_NODES=3 bash

----------------------------------------

TITLE: Listing Pods After Debugging Session
DESCRIPTION: This command lists all pods in the current namespace, which can be used to identify the debugging pod created earlier.

LANGUAGE: shell
CODE:
kubectl get pods

----------------------------------------

TITLE: Creating and Using kubectl Plugins
DESCRIPTION: Examples of creating, installing, and using kubectl plugins

LANGUAGE: shell
CODE:
# Create plugin
cat ./kubectl-hello
#!/bin/sh
echo "hello world"

# Make executable and install
chmod a+x ./kubectl-hello
sudo mv ./kubectl-hello /usr/local/bin

# Use plugin
kubectl hello

# List plugins
kubectl plugin list

----------------------------------------

TITLE: Basic kubectl run Command Syntax
DESCRIPTION: Command syntax for creating and running pods using kubectl run with required and optional parameters.

LANGUAGE: bash
CODE:
kubectl run NAME --image=image [--env="key=value"] [--port=port] [--dry-run=server|client] [--overrides=inline-json] [--command] -- [COMMAND] [args...]

----------------------------------------

TITLE: Creating a ClusterRole for GMSA Authorization
DESCRIPTION: YAML definition for a ClusterRole that authorizes usage of a specific GMSA credential spec.

LANGUAGE: yaml
CODE:
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: webapp1-role
rules:
- apiGroups: ["windows.k8s.io"]
  resources: ["gmsacredentialspecs"]
  verbs: ["use"]
  resourceNames: ["gmsa-WebApp1"]

----------------------------------------

TITLE: Kubernetes Service and Deployment Configuration
DESCRIPTION: YAML manifest defining a Kubernetes deployment and service for the stock-con application with health checks and environment variables.

LANGUAGE: yaml
CODE:
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  labels:
    app: stock-con
  name: stock-con
  namespace: dok
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: stock-con
    spec:
      containers:
      - name: stock-con
        image: quay.io/mhausenblas/stock-con
        env:
        - name: DOK_STOCKGEN_HOSTNAME
          value: stock-gen
        - name: DOK_STOCKGEN_PORT
          value: "9999"
        ports:
        - containerPort: 9898
          protocol: TCP
        livenessProbe:
          initialDelaySeconds: 2
          periodSeconds: 5
          httpGet:
            path: /healthz
            port: 9898
        readinessProbe:
          initialDelaySeconds: 2
          periodSeconds: 5
          httpGet:
            path: /healthz
            port: 9898

----------------------------------------

TITLE: Running Kubernetes Documentation Site Locally on Windows
DESCRIPTION: Commands to install dependencies and run the Kubernetes documentation website locally using Hugo on Windows.

LANGUAGE: powershell
CODE:
npm ci
hugo.exe server --buildFuture --environment development

----------------------------------------

TITLE: Documentation Import Configuration
DESCRIPTION: YAML configuration example for importing documentation from multiple repositories, specifying source and destination paths.

LANGUAGE: yaml
CODE:
repos:
- name: community
  remote: https://github.com/kubernetes/community.git
  branch: master
  files:
  - src: contributors/devel/README.md
    dst: docs/imported/community/devel.md
  - src: contributors/guide/README.md
    dst: docs/imported/community/guide.md

----------------------------------------

TITLE: Demonstrating YAML Typo Impact in Kubernetes
DESCRIPTION: This snippet illustrates how a typo in YAML configuration (missing 's' in 'replica') could lead to unintended consequences in Kubernetes versions prior to 1.8.

LANGUAGE: yaml
CODE:
replica: 1000

----------------------------------------

TITLE: Listing Pods with Labels in Kubernetes
DESCRIPTION: Lists Pods with the label 'app=hostnames'

LANGUAGE: bash
CODE:
kubectl get pods -l app=hostnames

----------------------------------------

TITLE: Redis CLI Queue Population
DESCRIPTION: Commands to create and populate a Redis work queue with sample tasks

LANGUAGE: shell
CODE:
kubectl run -i --tty temp --image redis --command "/bin/sh"
redis-cli -h redis

----------------------------------------

TITLE: Defining LogarithmicScaleDown Feature Gate Stages in YAML
DESCRIPTION: This YAML configuration specifies the stages and default values for the LogarithmicScaleDown feature gate. It defines alpha, beta, and stable stages with corresponding Kubernetes version ranges and default values.

LANGUAGE: yaml
CODE:
---
title: LogarithmicScaleDown
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha
    defaultValue: false
    fromVersion: "1.21"
    toVersion: "1.21"
  - stage: beta
    defaultValue: true
    fromVersion: "1.22"
    toVersion: "1.30"
  - stage: stable
    defaultValue: true
    fromVersion: "1.31"
---

----------------------------------------

TITLE: Restarting CoreDNS Deployment
DESCRIPTION: Command to restart the CoreDNS deployment in the kube-system namespace to apply configuration changes.

LANGUAGE: shell
CODE:
kubectl rollout restart deployment -n kube-system coredns

----------------------------------------

TITLE: Defining Image Signature Verification Policy in CRI-O
DESCRIPTION: JSON configuration for CRI-O's policy.json file that defines rules for verifying signatures of container images. This example allows only signed images from a specific repository.

LANGUAGE: json
CODE:
{
  "default": [{ "type": "reject" }],
  "transports": {
    "docker": {
      "quay.io/crio/signed": [
        {
          "type": "sigstoreSigned",
          "signedIdentity": { "type": "matchRepository" },
          "fulcio": {
            "oidcIssuer": "https://github.com/login/oauth",
            "subjectEmail": "sgrunert@redhat.com",
            "caData": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUI5ekNDQVh5Z0F3SUJBZ0lVQUxaTkFQRmR4SFB3amVEbG9Ed3lZQ2hBTy80d0NnWUlLb1pJemowRUF3TXcKS2pFVk1CTUdBMVVFQ2hNTWMybG5jM1J2Y21VdVpHVjJNUkV3RHdZRFZRUURFd2h6YVdkemRHOXlaVEFlRncweQpNVEV3TURjeE16VTJOVGxhRncwek1URXdNRFV4TXpVMk5UaGFNQ294RlRBVEJnTlZCQW9UREhOcFozTjBiM0psCkxtUmxkakVSTUE4R0ExVUVBeE1JYzJsbmMzUnZjbVV3ZGpBUUJnY3Foa2pPUFFJQkJnVXJnUVFBSWdOaUFBVDcKWGVGVDRyYjNQUUd3UzRJYWp0TGszL09sbnBnYW5nYUJjbFlwc1lCcjVpKzR5bkIwN2NlYjNMUDBPSU9aZHhleApYNjljNWlWdXlKUlErSHowNXlpK1VGM3VCV0FsSHBpUzVzaDArSDJHSEU3U1hyazFFQzVtMVRyMTlMOWdnOTJqCll6QmhNQTRHQTFVZER3RUIvd1FFQXdJQkJqQVBCZ05WSFJNQkFmOEVCVEFEQVFIL01CMEdBMVVkRGdRV0JCUlkKd0I1ZmtVV2xacWw2ekpDaGt5TFFLc1hGK2pBZkJnTlZIU01FR0RBV2dCUll3QjVma1VXbFpxbDZ6SkNoa3lMUQpLc1hGK2pBS0JnZ3Foa2pPUFFRREF3TnBBREJtQWpFQWoxbkhlWFpwKzEzTldCTmErRURzRFA4RzFXV2cxdENNCldQL1dIUHFwYVZvMGpoc3dlTkZaZ1NzMGVFN3dZSTRxQWpFQTJXQjlvdDk4c0lrb0YzdlpZZGQzL1Z0V0I1YjkKVE5NZWE3SXgvc3RKNVRmY0xMZUFCTEU0Qk5KT3NRNHZuQkhKCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0="
          },
          "rekorPublicKeyData": "LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUZrd0V3WUhLb1pJemowQ0FRWUlLb1pJemowREFRY0RRZ0FFMkcyWSsydGFiZFRWNUJjR2lCSXgwYTlmQUZ3cgprQmJtTFNHdGtzNEwzcVg2eVlZMHp1ZkJuaEM4VXIvaXk1NUdoV1AvOUEvYlkyTGhDMzBNOStSWXR3PT0KLS0tLS1FTkQgUFVCTElDIEtFWS0tLS0tCg=="
        }
      ]
    }
  }
}

----------------------------------------

TITLE: Defining EgressSelectorConfiguration in Go
DESCRIPTION: EgressSelectorConfiguration provides versioned configuration for egress selector clients. It specifies a list of egress selections.

LANGUAGE: go
CODE:
type EgressSelectorConfiguration struct {
  EgressSelections []EgressSelection
}

----------------------------------------

TITLE: Importing LocalObjectReference from Kubernetes API (Go)
DESCRIPTION: This snippet shows how to import the package containing the LocalObjectReference type from the Kubernetes API. It's a prerequisite for using the LocalObjectReference in Go code.

LANGUAGE: go
CODE:
import "k8s.io/api/core/v1"

----------------------------------------

TITLE: Configuring Pre-provisioned VolumeSnapshotContent in Kubernetes
DESCRIPTION: This YAML example demonstrates how to configure a pre-provisioned VolumeSnapshotContent, including setting the sourceVolumeMode and adding the necessary annotation for volume mode changes.

LANGUAGE: yaml
CODE:
apiVersion: snapshot.storage.k8s.io/v1
kind: VolumeSnapshotContent
metadata:
  annotations:
  - snapshot.storage.kubernetes.io/allowVolumeModeChange: "true"
  name: new-snapshot-content-test
spec:
  deletionPolicy: Delete
  driver: hostpath.csi.k8s.io
  source:
    snapshotHandle: 7bdd0de3-aaeb-11e8-9aae-0242ac110002
  sourceVolumeMode: Filesystem
  volumeSnapshotRef:
    name: new-snapshot-test
    namespace: default

----------------------------------------

TITLE: Patch Pod Configuration
DESCRIPTION: Partially update the configuration of an existing Pod.

LANGUAGE: Go
CODE:
PATCH /api/v1/namespaces/{namespace}/pods/{name}

----------------------------------------

TITLE: Generating Bootstrap Token
DESCRIPTION: This shell command generates a random token for use in bootstrap authentication.

LANGUAGE: shell
CODE:
head -c 16 /dev/urandom | od -An -t x | tr -d ' '

----------------------------------------

TITLE: Job Status Output Example
DESCRIPTION: Example YAML output showing the status of a Job with failed indexes.

LANGUAGE: yaml
CODE:
  status:
    completedIndexes: 0,3-7
    failedIndexes: 1,2
    succeeded: 6
    failed: 4
    conditions:
    - message: Job has failed indexes
      reason: FailedIndexes
      status: "True"
      type: Failed

----------------------------------------

TITLE: Enforcing Pod Security Level on a Namespace
DESCRIPTION: This command enforces a specific Pod Security level on a namespace.

LANGUAGE: sh
CODE:
kubectl label --overwrite ns $NAMESPACE pod-security.kubernetes.io/enforce=$LEVEL

----------------------------------------

TITLE: Creating and verifying a Pod using private registry credentials
DESCRIPTION: These kubectl commands create a Pod using the private registry credentials and verify that the Pod is running.

LANGUAGE: shell
CODE:
kubectl apply -f my-private-reg-pod.yaml
kubectl get pod private-reg

----------------------------------------

TITLE: Viewing Running Containers Including Static Pods
DESCRIPTION: This command uses crictl to list running containers, including static Pods, on the node where the kubelet is running.

LANGUAGE: shell
CODE:
crictl ps

----------------------------------------

TITLE: Configuring iptables sync periods in kube-proxy
DESCRIPTION: Example YAML configuration for adjusting the syncing behavior of kube-proxy in iptables mode, specifying minSyncPeriod and syncPeriod values.

LANGUAGE: yaml
CODE:
...
iptables:
  minSyncPeriod: 1s
  syncPeriod: 30s
...

----------------------------------------

TITLE: PodSchedulingContext Struct Definition in Go
DESCRIPTION: Defines the structure of a PodSchedulingContext object in Go, including its metadata, spec, and status fields.

LANGUAGE: go
CODE:
type PodSchedulingContext struct {
  metav1.TypeMeta
  metav1.ObjectMeta
  Spec PodSchedulingContextSpec
  Status PodSchedulingContextStatus
}

----------------------------------------

TITLE: Defining AdmissionReview Struct in Go
DESCRIPTION: AdmissionReview describes an admission review request/response. It contains Request and Response fields of types AdmissionRequest and AdmissionResponse respectively.

LANGUAGE: go
CODE:
type AdmissionReview struct {
    apiVersion string
    kind       string
    request    *AdmissionRequest
    response   *AdmissionResponse
}

----------------------------------------

TITLE: Initializing ClusterConfiguration in Kubernetes
DESCRIPTION: During cluster initialization, kubeadm creates a ClusterConfiguration object stored as a ConfigMap named kubeadm-config in the kube-system namespace. This configuration is referenced during join, reset and upgrade operations.

LANGUAGE: yaml
CODE:
reviewers:
- luxas
- jbeda
title: kubeadm config
content_type: concept
weight: 50

----------------------------------------

TITLE: Configuring Static Pod Manifest Path in YAML
DESCRIPTION: Example YAML configuration for specifying the static pod manifest path or URL for the kubelet. This allows loading pods directly without going through the API server.

LANGUAGE: yaml
CODE:
staticPodPath: "/etc/kubernetes/manifests"

----------------------------------------

TITLE: Generating New Certificates for Kubernetes Components
DESCRIPTION: Command to generate new certificates for a specific Kubernetes component using kubeadm.

LANGUAGE: shell
CODE:
kubeadm init phase certs <component-name> --config <config-file>

----------------------------------------

TITLE: Go - Kubelet Runtime Interface Implementation
DESCRIPTION: Core changes to the Kubelet runtime interface implementation, including support for rkt as an alternative container runtime alongside Docker.



----------------------------------------

TITLE: Kuberhealthy Status JSON Response
DESCRIPTION: Example JSON response from Kuberhealthy status endpoint showing health check results

LANGUAGE: json
CODE:
{
    "OK": true,
    "Errors": [],
    "CheckDetails": {
        "kuberhealthy/daemonset": {
            "OK": true,
            "Errors": [],
            "RunDuration": "22.512278967s",
            "Namespace": "kuberhealthy",
            "LastRun": "2020-04-06T23:20:31.7176964Z",
            "AuthoritativePod": "kuberhealthy-67bf8c4686-mbl2j",
            "uuid": "9abd3ec0-b82f-44f0-b8a7-fa6709f759cd"
        },
        "kuberhealthy/deployment": {
            "OK": true,
            "Errors": [],
            "RunDuration": "29.142295647s",
            "Namespace": "kuberhealthy",
            "LastRun": "2020-04-06T23:20:31.7176964Z",
            "AuthoritativePod": "kuberhealthy-67bf8c4686-mbl2j",
            "uuid": "5f0d2765-60c9-47e8-b2c9-8bc6e61727b2"
        },
        "kuberhealthy/dns-status-internal": {
            "OK": true,
            "Errors": [],
            "RunDuration": "2.43940936s",
            "Namespace": "kuberhealthy",
            "LastRun": "2020-04-06T23:20:44.6294547Z",
            "AuthoritativePod": "kuberhealthy-67bf8c4686-mbl2j",
            "uuid": "c85f95cb-87e2-4ff5-b513-e02b3d25973a"
        }
    },
    "CurrentMaster": "kuberhealthy-7cf79bdc86-m78qr"
}

----------------------------------------

TITLE: Editing Kubernetes Node Object
DESCRIPTION: This command opens the Node object in an editor to update the CRI socket annotation.

LANGUAGE: shell
CODE:
kubectl edit no <node-name>

----------------------------------------

TITLE: KubeVirt Virtual Machine Configuration Example
DESCRIPTION: YAML configuration demonstrating how to define a KubeVirt virtual machine with registry disk storage and cloud-init configuration for SSH key injection.

LANGUAGE: yaml
CODE:
apiVersion: kubevirt.io/v1alpha1
kind: VirtualMachine
metadata:
  name: myvm
spec:
  terminationGracePeriodSeconds: 5
  domain:
    resources:
      requests:
        memory: 64M
    devices:
      disks:
      - name: registrydisk
        volumeName: registryvolume
        disk:
          bus: virtio
      - name: cloudinitdisk
        volumeName: cloudinitvolume
        disk:
          bus: virtio
  volumes:
    - name: registryvolume
      registryDisk:
        image: kubevirt/cirros-registry-disk-demo:devel
    - name: cloudinitvolume
      cloudInitNoCloud:
        userData: |
          ssh-authorized-keys:
            - ssh-rsa AAAAB3NzaK8L93bWxnyp test@test.com

----------------------------------------

TITLE: Running Post-Upgrade Tasks with Kubeadm
DESCRIPTION: This command runs post-upgrade tasks on a Kubernetes node. It can be used with various options to customize the upgrade process, including specifying a configuration file, performing a dry run, and setting the kubeconfig file location.

LANGUAGE: bash
CODE:
kubeadm upgrade node phase post-upgrade [flags]

----------------------------------------

TITLE: ClusterRole for Signing CSRs
DESCRIPTION: YAML configuration for a ClusterRole that allows signing CertificateSigningRequests

LANGUAGE: YAML
CODE:
{{% code_sample file="access/certificate-signing-request/clusterrole-sign.yaml" %}}

----------------------------------------

TITLE: Watching Deployment Rollout Status
DESCRIPTION: This example demonstrates how to watch the rollout status of a specific deployment named 'nginx'.

LANGUAGE: bash
CODE:
kubectl rollout status deployment/nginx

----------------------------------------

TITLE: Defining ImmutableEphemeralVolumes Feature Gate Lifecycle in YAML
DESCRIPTION: YAML configuration defining the lifecycle stages of the ImmutableEphemeralVolumes feature gate in Kubernetes, showing its progression from alpha to stable and eventual removal. The feature was introduced as alpha in 1.18, moved to beta in 1.19, and reached stable status in 1.21 before being removed after 1.24.

LANGUAGE: yaml
CODE:
title: ImmutableEphemeralVolumes
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.18"
    toVersion: "1.18"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.19"
    toVersion: "1.20"    
  - stage: stable
    defaultValue: true
    fromVersion: "1.21"
    toVersion: "1.24"    

removed: true

----------------------------------------

TITLE: Creating LoadBalancer Service Using kubectl
DESCRIPTION: Command to create a LoadBalancer service using kubectl expose, specifying ports and deployment target.

LANGUAGE: bash
CODE:
kubectl expose deployment example --port=8765 --target-port=9376 \
        --name=example-service --type=LoadBalancer

----------------------------------------

TITLE: Creating AWS EBS Snapshot
DESCRIPTION: Command to create a snapshot of an AWS EBS volume using AWS CLI.

LANGUAGE: terminal
CODE:
aws ec2 create-snapshot --volume-id '<volume-id>' --description '<set-new-snapshot-name>' --tag-specifications 'ResourceType=snapshot'

----------------------------------------

TITLE: Viewing kubectl Configuration
DESCRIPTION: Command to check the location and credentials that kubectl knows about.

LANGUAGE: shell
CODE:
kubectl config view

----------------------------------------

TITLE: Sequence Diagram for KMS v2 Decrypt Request Flow
DESCRIPTION: Mermaid sequence diagram showing the interaction flow between components during a decryption request in KMS v2.

LANGUAGE: mermaid
CODE:
source - https://mermaid.ink/img/pako:eNrVVU2P0zAQ_SsjoyggdXcrEHuIVr3QHlBvgDhFQtN40lhN7GA7C1GU_47jdOuUhi4HkKCn1DPzPkbPcscyxYklLIo6IYVNoIttQRXFCcQ7NBQvYDz4jFrgriTjKh3EtRYV6vadKpUeel-8eX2f0duh_Vj6RN9tKOd57qHODpfLZdz3fRSl0tDXhmRGa4F7jVUqwf1q1FZkokZp4dDsCGthSD-SnilXpi6bvZCXJUdJWmLpWsZiFIHIoVQZlrDdbEFIQCmVRSuUNAtwfiU0Rsg9FII06qxox0ksHZzMdFtb4lME8xPI2A7nqm9Wq5PMBDh5HNCDc2PhYafvVtClzMkuSA-bSlkCKXsIjOvNdpWyBRyo_SK4L46fsFfWOtVovHVQOWzGqQ9kaieI_NzIkbKpUsfhSJ2w20GslmTJ3Ap1593dHOhwoeLk22H2_ZPVK9uRkGFWUOj0q3laxfxanFX4JmwRcMI4lYZmmZyr32CbBCLwBRDPqqlSls5pPXWYndU9lfPH_F4Z91avk5Pk4c8ZzDScibNsGy0nuRyDE4JZlyjkJJeBdSaXYYHwfv2Xw_fLPLh7eYzEzN38b27n9I49m-P1ZYLhpcGKYEcFPgqlBxlWcWxfTTLyfKzX00z9gzE6hUFytmAV6QoFdy9bNxynzD9iIyOnHJvS0aeyd61NzdHShgurNEtydGFaMGys-tjKjCVWN_TUdHydjl39D0CLbdk

----------------------------------------

TITLE: Configuring kubectl for GKE Cluster Access
DESCRIPTION: Command to configure kubectl to access the newly created GKE cluster.

LANGUAGE: shell
CODE:
gcloud container clusters get-credentials test-grpc

----------------------------------------

TITLE: Configuring Local StorageClass
DESCRIPTION: Example configuration for a Local StorageClass, which does not support dynamic provisioning but uses WaitForFirstConsumer binding mode.

LANGUAGE: yaml
CODE:
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: local-storage
provisioner: kubernetes.io/no-provisioner
volumeBindingMode: WaitForFirstConsumer

----------------------------------------

TITLE: Defining an Ingress with a Resource Backend
DESCRIPTION: An Ingress resource definition that uses a resource backend instead of a service.

LANGUAGE: yaml
CODE:
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress-resource-backend
spec:
  defaultBackend:
    resource:
      apiGroup: k8s.example.com
      kind: StorageBucket
      name: static-assets
  rules:
    - http:
        paths:
          - path: /icons
            pathType: ImplementationSpecific
            backend:
              resource:
                apiGroup: k8s.example.com
                kind: StorageBucket
                name: icon-assets

----------------------------------------

TITLE: Enabling Token Cleaner Controller in Kubernetes
DESCRIPTION: This snippet shows the flag to enable the tokencleaner controller on the Kubernetes controller manager for automatic deletion of expired tokens.

LANGUAGE: plaintext
CODE:
--controllers=*,tokencleaner

----------------------------------------

TITLE: Quantity Precise Integer Conversion with CEL
DESCRIPTION: CEL expression using the quantity library to perform precise conversion to integer.

LANGUAGE: CEL
CODE:
quantity("50k").asInteger()

----------------------------------------

TITLE: Granting ReferenceGrants Read Permission to CSI Provisioner in YAML
DESCRIPTION: YAML snippet for granting get, list, and watch permissions on referencegrants to the CSI Provisioner.

LANGUAGE: yaml
CODE:
  - apiGroups: ["gateway.networking.k8s.io"]
    resources: ["referencegrants"]
    verbs: ["get", "list", "watch"]

----------------------------------------

TITLE: Creating a TLS Secret
DESCRIPTION: Example YAML configuration for creating a TLS Secret. This stores a certificate and private key for TLS.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Secret
metadata:
  name: secret-tls
type: kubernetes.io/tls
data:
  tls.crt: |
    MIIC2DCCAcCgAwIBAgIBATANBgkqh...
  tls.key: |
    MIIEpgIBAAKCAQEA7yn3bRHQ5FHMQ...

----------------------------------------

TITLE: Generating Load for Autoscaling Test in Kubernetes
DESCRIPTION: Command to create a load generator Pod that sends continuous queries to the php-apache service to trigger autoscaling.

LANGUAGE: Shell
CODE:
kubectl run -i --tty load-generator --rm --image=busybox:1.28 --restart=Never -- /bin/sh -c "while sleep 0.01; do wget -q -O- http://php-apache; done"

----------------------------------------

TITLE: Configuring Pod Security Admission Labels for Kubernetes Namespaces
DESCRIPTION: YAML snippet showing the format of labels used to configure Pod Security admission modes and levels for Kubernetes namespaces.

LANGUAGE: yaml
CODE:
# モードごとのレベルラベルは、そのモードに適用するポリシーレベルを示す。
#
# MODEは`enforce`、`audit`、`warn`のいずれかでなければならない。
# LEVELは`privileged`、`baseline`、`restricted`のいずれかでなければならない。
pod-security.kubernetes.io/<MODE>: <LEVEL>

# オプション: モードごとのバージョンラベルは、Kubernetesのマイナーバージョンに同梱される
# バージョンにポリシーを固定するために使用できる（例えばv{{< skew latestVersion >}}など）。
#
# MODEは`enforce`、`audit`、`warn`のいずれかでなければならない。
# VERSIONは有効なKubernetesのマイナーバージョンか`latest`でなければならない。
pod-security.kubernetes.io/<MODE>-version: <VERSION>

----------------------------------------

TITLE: Defining a Simple ClusterRole in Kubernetes RBAC
DESCRIPTION: YAML definition for a simple ClusterRole that grants read access to secrets across all namespaces.

LANGUAGE: yaml
CODE:
{{% code_sample file="access/simple-clusterrole.yaml" %}}

----------------------------------------

TITLE: List Sorting Validation with CEL
DESCRIPTION: CEL expression using the list library to verify that a list of names is kept in alphabetical order.

LANGUAGE: CEL
CODE:
names.isSorted()

----------------------------------------

TITLE: Defining BtreeWatchCache Feature Gate Configuration in YAML
DESCRIPTION: YAML configuration for the BtreeWatchCache feature gate, specifying it as a beta feature enabled by default from Kubernetes version 1.32.

LANGUAGE: yaml
CODE:
title: BtreeWatchCache
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: beta 
    defaultValue: true
    fromVersion: "1.32"

----------------------------------------

TITLE: Creating Pod with AppArmor Profile in Kubernetes YAML
DESCRIPTION: This YAML defines a Kubernetes pod that uses the 'k8s-apparmor-example-deny-write' AppArmor profile to restrict file write operations.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: hello-apparmor
spec:
  securityContext:
    appArmorProfile:
      type: Localhost
      localhostProfile: k8s-apparmor-example-deny-write
  containers:
  - name: hello
    image: busybox:1.28
    command: [ "sh", "-c", "echo 'Hello AppArmor!' && sleep 1h" ]

----------------------------------------

TITLE: Example ConfigMap with Managed Fields
DESCRIPTION: Shows a ConfigMap object with managed fields demonstrating how Server-Side Apply tracks field ownership.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: ConfigMap
metadata:
  name: test-cm
  namespace: default
  labels:
    test-label: test
  managedFields:
  - manager: kubectl
    operation: Apply
    apiVersion: v1
    time: "2010-10-10T0:00:00Z"
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:labels:
          f:test-label: {}
      f:data:
        f:key: {}
data:
  key: some value

----------------------------------------

TITLE: Joining nodes to the cluster
DESCRIPTION: Example command for joining additional nodes to the cluster.

LANGUAGE: bash
CODE:
kubeadm join --token <token> <control-plane-host>:<control-plane-port> --discovery-token-ca-cert-hash sha256:<hash>

----------------------------------------

TITLE: Running Kubernetes Node Upgrade Command
DESCRIPTION: This snippet shows the basic syntax for running the 'kubeadm upgrade node' command with optional flags.

LANGUAGE: bash
CODE:
```
kubeadm upgrade node [flags]
```

----------------------------------------

TITLE: Defining a Minimal Ingress Resource
DESCRIPTION: A basic Ingress resource definition that routes all traffic to a single backend service.

LANGUAGE: yaml
CODE:
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: minimal-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  ingressClassName: nginx-example
  rules:
  - http:
      paths:
      - path: /testpath
        pathType: Prefix
        backend:
          service:
            name: test
            port:
              number: 80

----------------------------------------

TITLE: Accessing the nginx Container
DESCRIPTION: This kubectl command opens a shell into the running nginx container within the Pod.

LANGUAGE: shell
CODE:
kubectl exec -it init-demo -- /bin/bash

----------------------------------------

TITLE: Defining an Ingress Resource with a Resource Backend
DESCRIPTION: An example of an Ingress resource that uses a resource backend instead of a service backend.

LANGUAGE: yaml
CODE:
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress-resource-backend
spec:
  defaultBackend:
    resource:
      apiGroup: k8s.example.com
      kind: StorageBucket
      name: static-assets
  rules:
    - http:
        paths:
          - path: /icons
            pathType: ImplementationSpecific
            backend:
              resource:
                apiGroup: k8s.example.com
                kind: StorageBucket
                name: icon-assets

----------------------------------------

TITLE: Cleanup Commands
DESCRIPTION: Shell commands to delete the Pods created during the exercise.

LANGUAGE: shell
CODE:
kubectl delete pod extended-resource-demo
kubectl delete pod extended-resource-demo-2

----------------------------------------

TITLE: Enabling PersistentVolumeLastPhaseTransitionTime Feature Gate in Kubernetes
DESCRIPTION: Command line argument to enable the PersistentVolumeLastPhaseTransitionTime feature gate on kube-controller-manager and kube-apiserver. This is required to use the new lastPhaseTransitionTime field for PersistentVolumes in Kubernetes v1.28 alpha.

LANGUAGE: shell
CODE:
--feature-gates="...,PersistentVolumeLastPhaseTransitionTime=true"

----------------------------------------

TITLE: Defining AuthenticationConfiguration Struct in Go
DESCRIPTION: Defines the AuthenticationConfiguration struct which provides versioned configuration for authentication. It specifies JWT authenticators and anonymous auth settings.

LANGUAGE: go
CODE:
type AuthenticationConfiguration struct {
    apiVersion string
    kind string
    jwt []JWTAuthenticator
    anonymous AnonymousAuthConfig
}

----------------------------------------

TITLE: Creating a Minikube Kubernetes Cluster
DESCRIPTION: Commands to create a Minikube Kubernetes cluster and configure user permissions.

LANGUAGE: bash
CODE:
sudo minikube start --driver=none
sudo chown -R $USER $HOME/.kube $HOME/.minikube

----------------------------------------

TITLE: Creating NodePort Service
DESCRIPTION: Exposes the application as a NodePort service to make it accessible from outside the cluster.

LANGUAGE: shell
CODE:
kubectl expose deployment source-ip-app --name=nodeport --port=80 --target-port=8080 --type=NodePort

----------------------------------------

TITLE: Configuring Horizontal Pod Autoscaling for Spark workers
DESCRIPTION: Sets up autoscaling for Spark worker pods based on CPU utilization.

LANGUAGE: bash
CODE:
$ kubectl autoscale --min=1 --cpu-percent=80 --max=10 \
  rc/spark-worker-controller

----------------------------------------

TITLE: Setting Default StorageClass
DESCRIPTION: Shell command to patch a StorageClass and set it as the default.

LANGUAGE: shell
CODE:
kubectl patch sc -p '{"metadata":{"annotations":{"storageclass.kubernetes.io/is-default-class":"true"}}}'

----------------------------------------

TITLE: Flannel Subnet Configuration
DESCRIPTION: Example subnet configuration for Flannel network setup with specific network, subnet, MTU, and IP masquerade settings.

LANGUAGE: conf
CODE:
FLANNEL_NETWORK=10.244.0.0/16
FLANNEL_SUBNET=10.244.4.1/24
FLANNEL_MTU=1500
FLANNEL_IPMASQ=true

----------------------------------------

TITLE: Filtering Services by Non-Default Namespace
DESCRIPTION: Selecting all Kubernetes Services not in the default namespace

LANGUAGE: shell
CODE:
kubectl get services  --all-namespaces --field-selector metadata.namespace!=default

----------------------------------------

TITLE: Getting Pod IP Addresses in Kubernetes
DESCRIPTION: Retrieves the IP addresses of Pods with the label 'app=hostnames'

LANGUAGE: bash
CODE:
kubectl get pods -l app=hostnames \
    -o go-template='{{range .items}}{{.status.podIP}}{{"\n"}}{{end}}'

----------------------------------------

TITLE: Defining WindowsCPUAndMemoryAffinity Feature Gate in YAML
DESCRIPTION: This YAML configuration defines the WindowsCPUAndMemoryAffinity feature gate for Kubernetes. It specifies the feature gate name, content type, build settings, and stage information including the default value and version introduced.

LANGUAGE: yaml
CODE:
---
title: WindowsCPUAndMemoryAffinity
content_type: feature_gate

_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.32"
---

----------------------------------------

TITLE: Verifying Binary Signature with Cosign
DESCRIPTION: Command to verify a downloaded Kubernetes binary using cosign verify-blob with the corresponding signature and certificate files.

LANGUAGE: shell
CODE:
cosign verify-blob "$BINARY" \
  --signature "$BINARY".sig \
  --certificate "$BINARY".cert \
  --certificate-identity krel-staging@k8s-releng-prod.iam.gserviceaccount.com \
  --certificate-oidc-issuer https://accounts.google.com

----------------------------------------

TITLE: Defining AdmissionRequest Struct in Go
DESCRIPTION: AdmissionRequest describes the admission.Attributes for the admission request. It includes details about the requested operation, object, and user info.

LANGUAGE: go
CODE:
type AdmissionRequest struct {
    uid               types.UID
    kind              metav1.GroupVersionKind
    resource          metav1.GroupVersionResource
    subResource       string
    requestKind       *metav1.GroupVersionKind
    requestResource   *metav1.GroupVersionResource
    requestSubResource string
    name              string
    namespace         string
    operation         Operation
    userInfo          authenticationv1.UserInfo
    object            runtime.RawExtension
    oldObject         runtime.RawExtension
    dryRun            *bool
    options           runtime.RawExtension
}

----------------------------------------

TITLE: Applying Patch to Kubernetes Node Object
DESCRIPTION: Command to apply a patch file to a specific Kubernetes Node object to persist modifications.

LANGUAGE: shell
CODE:
kubectl patch no <node-name> --patch-file <patch-file>

----------------------------------------

TITLE: Listing API Services in Kubernetes
DESCRIPTION: Shows how to list all registered API services in a Kubernetes cluster using kubectl.

LANGUAGE: shell
CODE:
kubectl get apiservices.apiregistration.k8s.io

----------------------------------------

TITLE: Defining a Pod with an Unsigned Image
DESCRIPTION: YAML configuration for a Kubernetes Pod that uses an unsigned container image. This example is used to demonstrate signature validation failure.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: pod
spec:
  containers:
    - name: container
      image: quay.io/crio/unsigned

----------------------------------------

TITLE: Configuring Subordinate UID/GID Ranges for Kubelet
DESCRIPTION: Example configuration for /etc/subuid and /etc/subgid files to define subordinate UID/GID ranges for the kubelet user. This setup is necessary for using user namespaces in Kubernetes pods.

LANGUAGE: yaml
CODE:
kubelet:65536:7208960

----------------------------------------

TITLE: Watching StatefulSet Update
DESCRIPTION: Command to watch the status of the StatefulSet update.

LANGUAGE: bash
CODE:
kubectl rollout status sts/zk

----------------------------------------

TITLE: kubectl drain Examples
DESCRIPTION: Examples showing how to drain nodes with different options including force draining and grace period settings

LANGUAGE: bash
CODE:
# Drain node "foo", even if there are pods not managed by a replication controller, replica set, job, daemon set, or stateful set on it
kubectl drain foo --force

# As above, but abort if there are pods not managed by a replication controller, replica set, job, daemon set, or stateful set, and use a grace period of 15 minutes
kubectl drain foo --grace-period=900

----------------------------------------

TITLE: Checking Pod Status in Kubernetes
DESCRIPTION: Command to display the status of a Kubernetes pod with init containers.

LANGUAGE: shell
CODE:
kubectl get pod <pod-name>

----------------------------------------

TITLE: Azure Kubernetes E2E Test Workflow Steps
DESCRIPTION: Steps required to contribute end-to-end test results from Azure to the Kubernetes project

LANGUAGE: markdown
CODE:
1. Create a Google Cloud Storage bucket in which to publish the results.
2. Define an automated job to run the e2e tests. By setting a few environment variables, hack/jenkins/e2e-runner.sh deploys Kubernetes binaries and executes the tests.
3. Upload the results using hack/jenkins/upload-to-gcs.sh.
4. Incorporate the results into the test history dashboard by submitting a pull-request with modifications to a few files in kubernetes/test-infra.

----------------------------------------

TITLE: Defining an Indexed Job Manifest in Kubernetes YAML
DESCRIPTION: This YAML manifest defines an Indexed Job that uses the JOB_COMPLETION_INDEX environment variable to assign work to parallel worker Pods. It includes an init container to map the index to a static value and a worker container to process the data.

LANGUAGE: yaml
CODE:
apiVersion: batch/v1
kind: Job
metadata:
  name: indexed-job
spec:
  completions: 5
  parallelism: 3
  completionMode: Indexed
  template:
    spec:
      restartPolicy: Never
      initContainers:
      - name: input
        image: docker.io/library/bash
        command:
        - bash
        - -c
        - |
          items=(foo bar baz qux xyz)
          echo ${items[$JOB_COMPLETION_INDEX]} > /input/data.txt
        volumeMounts:
        - name: input
          mountPath: /input
      containers:
      - name: worker
        image: docker.io/library/busybox
        command: ["rev", "/input/data.txt"]
        volumeMounts:
        - name: input
          mountPath: /input
      volumes:
      - name: input
        emptyDir: {}

----------------------------------------

TITLE: Configuring ProxyTerminatingEndpoints Feature Gate in Kubernetes YAML
DESCRIPTION: This YAML configuration defines the stages and default values for the ProxyTerminatingEndpoints feature gate. It specifies alpha, beta, and stable stages with corresponding Kubernetes versions and default values.

LANGUAGE: yaml
CODE:
title: ProxyTerminatingEndpoints
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.22"
    toVersion: "1.25"
  - stage: beta
    defaultValue: true
    fromVersion: "1.26"  
    toVersion: "1.27" 
  - stage: stable
    defaultValue: true
    fromVersion: "1.28"  
    toVersion: "1.29" 
removed: true

----------------------------------------

TITLE: Configuring ValidatingWebhookConfiguration for Kubernetes Admission Control
DESCRIPTION: This YAML snippet defines a ValidatingWebhookConfiguration object that sets up admission control for interactive kubectl commands. It specifies rules for intercepting 'exec' and 'attach' operations on pods.

LANGUAGE: yaml
CODE:
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: example-validating-webhook-config
webhooks:
  - name: validate-pod-interaction.example.com
    sideEffects: None
    rules:
      - apiGroups: ["*"]
        apiVersions: ["*"]
        operations: ["CONNECT"]
        resources: ["pods/exec", "pods/attach"]
    failurePolicy: Fail
    clientConfig:
      service:
        # reference to kube-exec-controller service deployed inside the K8s cluster
        name: example-service
        namespace: kube-exec-controller
        path: "/admit-pod-interaction"
      caBundle: "{{VALUE}}" # PEM encoded CA bundle to validate kube-exec-controller's certificate
    admissionReviewVersions: ["v1", "v1beta1"]

----------------------------------------

TITLE: Systemd drop-in file for kubelet
DESCRIPTION: This is an example of the systemd drop-in file for kubelet, typically located at /usr/lib/systemd/system/kubelet.service.d/10-kubeadm.conf.

LANGUAGE: bash
CODE:
[Service]
Environment="KUBELET_KUBECONFIG_ARGS=--bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf"
Environment="KUBELET_CONFIG_ARGS=--config=/var/lib/kubelet/config.yaml"
EnvironmentFile=-/var/lib/kubelet/kubeadm-flags.env
EnvironmentFile=-/etc/default/kubelet
ExecStart=
ExecStart=/usr/bin/kubelet $KUBELET_KUBECONFIG_ARGS $KUBELET_CONFIG_ARGS $KUBELET_KUBEADM_ARGS $KUBELET_EXTRA_ARGS

----------------------------------------

TITLE: Installing containerd on Windows for Kubernetes
DESCRIPTION: Downloads and executes a PowerShell script to install containerd on a Windows Server instance. The script takes a version parameter which should be set to a recent release from the containerd repository.

LANGUAGE: PowerShell
CODE:
curl.exe -LO https://raw.githubusercontent.com/kubernetes-sigs/sig-windows-tools/master/hostprocess/Install-Containerd.ps1

LANGUAGE: PowerShell
CODE:
.\Install-Containerd.ps1 -ContainerDVersion CONTAINERD_VERSION

----------------------------------------

TITLE: Setting Role Binding Subjects in Kubernetes
DESCRIPTION: Command syntax for updating role binding subjects including users, groups, and service accounts with optional dry-run modes.

LANGUAGE: bash
CODE:
kubectl set subject (-f FILENAME | TYPE NAME) [--user=username] [--group=groupname] [--serviceaccount=namespace:serviceaccountname] [--dry-run=server|client|none]

----------------------------------------

TITLE: Configuring Volume Mount for Specific Container in YAML
DESCRIPTION: Example of how to restrict Secret access to a specific container within a Pod by defining the volume mount configuration.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: mypod
spec:
  containers:
  - name: container-with-secret
    image: myimage
    volumeMounts:
    - name: secret-volume
      mountPath: "/etc/secret-data"
      readOnly: true
  - name: container-without-secret
    image: myotherimage
  volumes:
  - name: secret-volume
    secret:
      secretName: mysecret

----------------------------------------

TITLE: Including Code Sample Using Hugo Shortcode
DESCRIPTION: Example of how to use Hugo shortcode to include external code samples in documentation.

LANGUAGE: none
CODE:
{{%/* code_sample file="<RELPATH>/my-example-yaml>" */%}}

LANGUAGE: none
CODE:
{{%/* code_sample file="pods/storage/gce-volume.yaml" */%}}

----------------------------------------

TITLE: kubectl config view Command Syntax
DESCRIPTION: The basic command syntax for kubectl config view with flags parameter.

LANGUAGE: bash
CODE:
kubectl config view [flags]

----------------------------------------

TITLE: Recreating Node Problem Detector with New Configuration
DESCRIPTION: Shell commands to delete existing Node Problem Detector deployment and recreate it with new ConfigMap-based configuration.

LANGUAGE: shell
CODE:
kubectl delete -f https://k8s.io/examples/debug/node-problem-detector.yaml
kubectl apply -f https://k8s.io/examples/debug/node-problem-detector-configmap.yaml

----------------------------------------

TITLE: ReplicaSet List Resource Definition
DESCRIPTION: YAML definition showing the apiVersion and kind for a ReplicaSet list resource

LANGUAGE: yaml
CODE:
apiVersion: apps/v1
kind: ReplicaSetList

----------------------------------------

TITLE: Setting AppArmor Profile for a Container
DESCRIPTION: This YAML snippet shows how to set an AppArmor profile for a Container.

LANGUAGE: yaml
CODE:
containers:
- name: container-1
  securityContext:
    appArmorProfile:
      type: RuntimeDefault

----------------------------------------

TITLE: Deploying Cinder CSI Node Plugin
DESCRIPTION: YAML manifest for deploying the Cinder CSI Node Plugin as a DaemonSet in Kubernetes.

LANGUAGE: yaml
CODE:
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: csi-cinder-nodeplugin
  namespace: kube-system
spec:
  selector:
    matchLabels:
      app: csi-cinder-nodeplugin
  template:
    metadata:
      labels:
        app: csi-cinder-nodeplugin
    spec:
      serviceAccount: csi-cinder-node-sa
      hostNetwork: true
      containers:
        - name: node-driver-registrar
          image: quay.io/k8scsi/csi-node-driver-registrar:v1.1.0
          args:
            - "--v=5"
            - "--csi-address=$(ADDRESS)"
            - "--kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)"
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh", "-c", "rm -rf /registration/cinder.csi.openstack.org /registration/cinder.csi.openstack.org-reg.sock"]
          env:
            - name: ADDRESS
              value: /csi/csi.sock
            - name: DRIVER_REG_SOCK_PATH
              value: /var/lib/kubelet/plugins/cinder.csi.openstack.org/csi.sock
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          imagePullPolicy: "IfNotPresent"
          volumeMounts:
            - name: socket-dir
              mountPath: /csi
            - name: registration-dir
              mountPath: /registration
        - name: cinder-csi-plugin
          securityContext:
            privileged: true
            capabilities:
              add: ["SYS_ADMIN"]
            allowPrivilegeEscalation: true
          image: docker.io/k8scloudprovider/cinder-csi-plugin:v1.15.0
          args :
            - /bin/cinder-csi-plugin
            - "--nodeid=$(NODE_ID)"
            - "--endpoint=$(CSI_ENDPOINT)"
            - "--cloud-config=$(CLOUD_CONFIG)"
          env:
            - name: NODE_ID
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: CSI_ENDPOINT
              value: unix://csi/csi.sock
            - name: CLOUD_CONFIG
              value: /etc/config/cloud.conf
          imagePullPolicy: "IfNotPresent"
          volumeMounts:
            - name: socket-dir
              mountPath: /csi
            - name: pods-mount-dir
              mountPath: /var/lib/kubelet/pods
              mountPropagation: "Bidirectional"
            - name: kubelet-dir
              mountPath: /var/lib/kubelet
              mountPropagation: "Bidirectional"
            - name: pods-cloud-data
              mountPath: /var/lib/cloud/data
              readOnly: true
            - name: pods-probe-dir
              mountPath: /dev
              mountPropagation: "HostToContainer"
            - name: secret-cinderplugin
              mountPath: /etc/config
              readOnly: true
            - mountPath: /etc/kubernetes
              name: ca-cert
              readOnly: true
      volumes:
        - name: socket-dir
          hostPath:
            path: /var/lib/kubelet/plugins/cinder.csi.openstack.org
            type: DirectoryOrCreate
        - name: registration-dir
          hostPath:
            path: /var/lib/kubelet/plugins_registry/
            type: Directory
        - name: kubelet-dir
          hostPath:
            path: /var/lib/kubelet
            type: Directory
        - name: pods-mount-dir
          hostPath:
            path: /var/lib/kubelet/pods
            type: Directory
        - name: pods-cloud-data
          hostPath:
            path: /var/lib/cloud/data
            type: Directory
        - name: pods-probe-dir
          hostPath:
            path: /dev
            type: Directory
        - name: secret-cinderplugin
          secret:
            secretName: cloud-config
        - name: ca-cert
          secret:
            secretName: openstack-ca-cert


----------------------------------------

TITLE: Basic kubectl version Command
DESCRIPTION: Prints the client and server versions for the current context without any additional flags.

LANGUAGE: bash
CODE:
kubectl version

----------------------------------------

TITLE: Converting legacy Ingress to networking.k8s.io/v1 API
DESCRIPTION: Example of using kubectl convert to upgrade an Ingress definition from a legacy API version to the new networking.k8s.io/v1 API version.

LANGUAGE: bash
CODE:
kubectl convert -f ./legacy-ingress.yaml --output-version networking.k8s.io/v1

----------------------------------------

TITLE: Admission Webhook Warning Response
DESCRIPTION: JSON structure showing how an admission webhook can return warning messages along with its response.

LANGUAGE: json
CODE:
{
  "apiVersion": "admission.k8s.io/v1",
  "kind": "AdmissionReview",
  "response": {
    "uid": "<value from request.uid>",
    "allowed": true,
    "warnings": [
      ".spec.memory: requests >1GB do not work on Fridays"
    ]
  }
}

----------------------------------------

TITLE: Configuring SystemdWatchdog Feature Gate in Kubernetes
DESCRIPTION: YAML configuration defining the SystemdWatchdog feature gate properties, including its stage (beta), default value (true), and version information (1.32+).

LANGUAGE: yaml
CODE:
title: SystemdWatchdog
content_type: feature_gate
_build:
  list: never
  render: false

stages:
  - stage: beta
    defaultValue: true
    fromVersion: "1.32"

----------------------------------------

TITLE: Defining a Simple Fanout Ingress
DESCRIPTION: An Ingress resource that routes traffic to multiple backend services based on the request path.

LANGUAGE: yaml
CODE:
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: simple-fanout-example
spec:
  rules:
  - host: foo.bar.com
    http:
      paths:
      - path: /foo
        pathType: Prefix
        backend:
          service:
            name: service1
            port:
              number: 4200
      - path: /bar
        pathType: Prefix
        backend:
          service:
            name: service2
            port:
              number: 8080

----------------------------------------

TITLE: Executing kubectl events Command
DESCRIPTION: The kubectl events command is used to display events in a Kubernetes cluster. It can list events for a specific namespace, all namespaces, or filtered to a specific resource. The command supports various output formats and options for filtering and watching events.

LANGUAGE: bash
CODE:
kubectl events [(-o|--output=)json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-as-json|jsonpath-file] [--for TYPE/NAME] [--watch] [--types=Normal,Warning]

----------------------------------------

TITLE: Defining Kubernetes Documentation Resources in YAML
DESCRIPTION: This YAML configuration specifies resource groupings for Kubernetes documentation. It defines source patterns and titles for alpha, beta, deprecated, and stable documentation categories.

LANGUAGE: yaml
CODE:
---
headless: true

resources:
- src: "*alpha*"
  title: "alpha"
- src: "*beta*"
  title: "beta"
- src: "*deprecated*"
  title: "deprecated"
- src: "*stable*"
  title: "stable"
---

----------------------------------------

TITLE: Deleting ZooKeeper StatefulSet
DESCRIPTION: Command to delete the ZooKeeper StatefulSet.

LANGUAGE: bash
CODE:
kubectl delete statefulset zk

----------------------------------------

TITLE: Kubernetes Upgrade Diff Inherited Options
DESCRIPTION: This snippet shows the options inherited from parent commands for the 'kubeadm upgrade diff' command, specifically the '--rootfs' option for specifying a custom root filesystem path.

LANGUAGE: markdown
CODE:
   <table style="width: 100%; table-layout: fixed;">
<colgroup>
<col span="1" style="width: 10px;" />
<col span="1" />
</colgroup>
<tbody>

<tr>
<td colspan="2">--rootfs string</td>
</tr>
<tr>
<td></td><td style="line-height: 130%; word-wrap: break-word;"><p>The path to the 'real' host root filesystem. This will cause kubeadm to chroot into the provided path.</p></td>
</tr>

</tbody>
</table>

----------------------------------------

TITLE: Attempting to Deploy Unattested Image
DESCRIPTION: This command attempts to create a Kubernetes Pod using the PaymentProcessor YAML configuration. It will fail if the image lacks the required QA attestation.

LANGUAGE: bash
CODE:
kubectl apply -f pods/paymentProcessor.yaml

----------------------------------------

TITLE: Viewing Kubernetes Namespaces
DESCRIPTION: Command to list all current namespaces in a Kubernetes cluster using kubectl.

LANGUAGE: shell
CODE:
kubectl get namespace

----------------------------------------

TITLE: Managing Objects Using Declarative Configuration
DESCRIPTION: Examples of using kubectl apply for declarative object management. These commands process configuration files in directories and automatically determine the required operations (create, update, delete).

LANGUAGE: sh
CODE:
kubectl diff -f configs/
kubectl apply -f configs/

LANGUAGE: sh
CODE:
kubectl diff -R -f configs/
kubectl apply -R -f configs/

----------------------------------------

TITLE: Copying Generated Documentation
DESCRIPTION: Command to copy the generated metrics documentation to the Kubernetes website repository.

LANGUAGE: shell
CODE:
cp ./test/instrumentation/documentation/documentation.md "${WEBSITE_ROOT}/content/en/docs/reference/instrumentation/metrics.md"

----------------------------------------

TITLE: Defining NonPreemptingPriority Feature Gate Lifecycle in YAML
DESCRIPTION: This YAML snippet defines the lifecycle stages of the NonPreemptingPriority feature gate in Kubernetes. It specifies the alpha, beta, and stable stages with their respective version ranges and default values. The feature has been marked as removed.

LANGUAGE: yaml
CODE:
stages:
  - stage: alpha 
    defaultValue: false
    fromVersion: "1.15"
    toVersion: "1.18"
  - stage: beta 
    defaultValue: true
    fromVersion: "1.19"
    toVersion: "1.23"
  - stage: stable
    defaultValue: true
    fromVersion: "1.24"
    toVersion: "1.25"

removed: true

----------------------------------------

TITLE: Identifying PodSecurityPolicies in Use for a Namespace
DESCRIPTION: This kubectl command lists all unique PodSecurityPolicies being used by pods in a specified namespace.

LANGUAGE: sh
CODE:
kubectl get pods -n $NAMESPACE -o jsonpath="{.items[*].metadata.annotations.kubernetes\.io\/psp}" | tr " " "\n" | sort -u

----------------------------------------

TITLE: Scaling Up StatefulSet in Destination Cluster with Start Ordinal
DESCRIPTION: Scales up the Redis cluster StatefulSet in the destination cluster by 1 replica, starting from ordinal 5.

LANGUAGE: bash
CODE:
kubectl patch sts redis-redis-cluster -p '{"spec": {"ordinals": {"start": 5}, "replicas": 1}}'

----------------------------------------

TITLE: Verificando el estado de un Job
DESCRIPTION: Comando kubectl para describir el estado de un Job

LANGUAGE: shell
CODE:
kubectl describe jobs/pi

----------------------------------------

TITLE: Creating VolumeSnapshotClass in YAML
DESCRIPTION: YAML configuration for creating a VolumeSnapshotClass that specifies the CSI driver and deletion policy for snapshots.

LANGUAGE: yaml
CODE:
apiVersion: snapshot.storage.k8s.io/v1beta1
kind: VolumeSnapshotClass
metadata:
  name: test-snapclass
driver: testdriver.csi.k8s.io
deletionPolicy: Delete
parameters:
  csi.storage.k8s.io/snapshotter-secret-name: mysecret
  csi.storage.k8s.io/snapshotter-secret-namespace: mysecretnamespace

----------------------------------------

TITLE: Defining Kubernetes Community Page Structure
DESCRIPTION: Sets up the basic HTML structure and frontmatter configuration for the Kubernetes community page, including layout parameters, CSS styling, and content inclusion directives.

LANGUAGE: HTML
CODE:
<div class="community_main">

<div class="cncf_coc_container">
{{< include "/static/community-values.md" >}}
</div>
</div>

LANGUAGE: Markdown
CODE:
---
title: Community
layout: basic
cid: community
css: /css/community.css
---

----------------------------------------

TITLE: URL Path Escaping with CEL
DESCRIPTION: CEL expression using the URL library to escape a URL path with spaces.

LANGUAGE: CEL
CODE:
url('https://example.com/path with spaces/').getEscapedPath()

----------------------------------------

TITLE: Checking Replica Set Status Across Federated Clusters
DESCRIPTION: This command checks the status of the replica sets across all federated clusters.

LANGUAGE: bash
CODE:
$ for c in $(kubectl config view -o jsonpath='{.contexts[*].name}'); do kubectl --context=$c get rs; done

----------------------------------------

TITLE: Executing kubectl completion command
DESCRIPTION: The basic syntax for running the kubectl completion command, which generates shell completion code for the specified shell.

LANGUAGE: bash
CODE:
kubectl completion SHELL

----------------------------------------

TITLE: Installing kubectl using curl in PowerShell
DESCRIPTION: This command downloads the latest kubectl binary for Windows using curl in PowerShell.

LANGUAGE: powershell
CODE:
curl.exe -LO "https://dl.k8s.io/release/v{{< skew currentPatchVersion >}}/bin/windows/amd64/kubectl.exe"

----------------------------------------

TITLE: Configuring Kubectl Shell Autocompletion
DESCRIPTION: Commands to set up kubectl command autocompletion for various shells including BASH, ZSH, and FISH. Includes setup for both temporary and permanent configuration.

LANGUAGE: bash
CODE:
source <(kubectl completion bash)
echo "source <(kubectl completion bash)" >> ~/.bashrc
alias k=kubectl
complete -o default -F __start_kubectl k

----------------------------------------

TITLE: Defining Endpoints for a Kubernetes Service
DESCRIPTION: This YAML defines Endpoints for a Kubernetes Service, specifying the IP address and port for the backend.

LANGUAGE: yaml
CODE:
kind: Endpoints
apiVersion: v1
metadata:
  name: my-service
subsets:
  - addresses:
      - ip: 1.2.3.4
    ports:
      - port: 9376

----------------------------------------

TITLE: Creating Kubernetes Service Account - Example Usage
DESCRIPTION: Example showing how to create a new service account named my-service-account.

LANGUAGE: bash
CODE:
kubectl create serviceaccount my-service-account

----------------------------------------

TITLE: Recording a Raw Seccomp Profile
DESCRIPTION: These console commands demonstrate how to use spoc to generate a raw JSON seccomp profile and view its contents.

LANGUAGE: console
CODE:
> sudo ./spoc record --type raw-seccomp ./main
…
52.628827 Wrote seccomp profile to: /tmp/profile.json

----------------------------------------

TITLE: Verifying NGINX deployment on MicroK8s
DESCRIPTION: These commands check the status of the NGINX deployment and pods in the Kubernetes cluster.

LANGUAGE: shell
CODE:
kubectl get deployments
kubectl get pods

----------------------------------------

TITLE: Adding Kubernetes Java SDK Dependency in Maven
DESCRIPTION: This XML snippet shows how to add the Kubernetes Java SDK extended client dependency to a Maven project's pom.xml file.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>io.kubernetes</groupId>
    <artifactId>client-java-extended</artifactId>
    <version>6.0.1</version>
</dependency>