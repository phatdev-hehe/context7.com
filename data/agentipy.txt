TITLE: Transferring SOL/SPL Tokens with AgentiPy
DESCRIPTION: Demonstrates how to transfer SOL tokens on Solana mainnet using AgentiPy's TokenTransferManager. Includes security considerations for private key handling.

LANGUAGE: python
CODE:
from agentipy.agent import SolanaAgentKit
from agentipy.tools.transfer import TokenTransferManager
import asyncio

async def main():
    PRIVATE_KEY = ""  
    RECIPIENT_WALLET_ADDRESS = ""

    agent = SolanaAgentKit(
        private_key=PRIVATE_KEY,
        rpc_url="https://api.mainnet-beta.solana.com"
    )

    TRANSFER_AMOUNT_SOL = 0.0001

    try:
        transfer_signature = await TokenTransferManager.transfer(
            agent=agent,
            to=RECIPIENT_WALLET_ADDRESS,
            amount=TRANSFER_AMOUNT_SOL
        )
        print(f"Transfer successful!")
        print(f"Transaction Signature: https://explorer.solana.com/tx/{transfer_signature}")

    except RuntimeError as e:
        print(f"Error: Transfer failed: {e}")

if __name__ == "__main__":
    asyncio.run(main())

----------------------------------------

TITLE: Using CoinGecko API for Market Data and Trending Tokens
DESCRIPTION: Demonstrates fetching trending tokens and market metrics from CoinGecko using AgentiPy's CoingeckoManager.

LANGUAGE: python
CODE:
from agentipy.agent import SolanaAgentKit
from agentipy.tools.use_coingecko import CoingeckoManager
from agentipy.tools.get_token_data import TokenDataManager
from solders.pubkey import Pubkey
import asyncio

async def main():
    agent = SolanaAgentKit(
        private_key="",
        rpc_url="https://api.mainnet-beta.solana.com"
    )

    try:
        trending_tokens_data = await CoingeckoManager.get_trending_tokens(agent)
        if trending_tokens_data and 'coins' in trending_tokens_data:
            print("Trending Tokens on CoinGecko:")
            for token in trending_tokens_data['coins']:
                print(f"- {token['item']['symbol']} ({token['item']['name']})")
        else:
            print("No trending tokens data received.")
    except Exception as e:
        print(f"Error fetching trending tokens: {e}")

if __name__ == "__main__":
    asyncio.run(main())

----------------------------------------

TITLE: Checking SOL Balance with AgentiPy
DESCRIPTION: Shows how to check SOL balance for a wallet address using AgentiPy's BalanceFetcher tool.

LANGUAGE: python
CODE:
from agentipy.agent import SolanaAgentKit
from agentipy.tools.get_balance import BalanceFetcher
import asyncio

async def main():
    PRIVATE_KEY = "YOUR_PRIVATE_KEY_HERE"
    WALLET_ADDRESS = "YOUR_WALLET_ADDRESS_HERE"

    agent = SolanaAgentKit(
        private_key=PRIVATE_KEY,
        rpc_url="https://api.mainnet-beta.solana.com"
    )

    try:
        balance_sol = await BalanceFetcher.get_balance(agent)
        print(f"Wallet Balance for {WALLET_ADDRESS}: {balance_sol:.4f} SOL")
        print("Successfully retrieved SOL balance!")

    except Exception as e:
        print(f"Error: Could not retrieve SOL balance: {e}")

if __name__ == "__main__":
    asyncio.run(main())

----------------------------------------

TITLE: Example Interaction with CoinGecko Chatbot
DESCRIPTION: This code snippet demonstrates a sample interaction with the CoinGecko Chatbot, including fetching top gainers and token prices, and exporting data.

LANGUAGE: text
CODE:
Enter your CoinGecko API key: YOUR_API_KEY
Welcome to the CoinGecko Chatbot! Type 'exit' to quit.

What would you like to know? What are the top gainers?
ðŸ”¼ Top Gainers (1h):
{
    "top_gainers": [...],
    "message": "Success"
}
Export this data? (yes/no): yes
Data exported to top_gainers.json

What would you like to know? Get token prices.
Enter token addresses (comma-separated): So11111111111111111111111111111111111111112,EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v
ðŸ’² Token Prices:
{
    "price_data": [...],
    "message": "Success"
}
Export this data? (yes/no): no

What would you like to know? exit
Goodbye!

----------------------------------------

TITLE: Example Output of Agentipy CoinGecko Explorer
DESCRIPTION: Sample output showing trending tokens, price data, token info, LLM analysis, and memory history from the Agentipy CoinGecko Explorer.

LANGUAGE: plaintext
CODE:
Trending Tokens:
- ID: pi-network, Name: Pi Network, Symbol: PI
- ID: ondo-finance, Name: Ondo, Symbol: ONDO
- ID: bitcoin, Name: Bitcoin, Symbol: BTC
- ID: solana, Name: Solana, Symbol: SOL
- ID: ancient8, Name: Ancient8, Symbol: A8

Price Data for 5 Tokens:
null

Minimal Final Token Info:
{
  "id": "pi-network",
  "name": "Pi Network",
  "symbol": "PI",
  "price": 1.3927342821443367,
  "market_cap": "$9,818,605,388"
}

LLM Analysis:
None

Memory History:
- Fetched trending tokens
- Fetched price data for 5 tokens
- Token address 'pi-network' is not a valid Solana address. Using token item data instead.
- Fetched top 24h gainers

----------------------------------------

TITLE: Example Token Contract Addresses for RugCheck CLI Tool
DESCRIPTION: Sample contract addresses for different tokens (Wrapped SOL, USDC, and Raydium) that can be used as input for the RugCheck CLI Tool.

LANGUAGE: python
CODE:
So11111111111111111111111111111111111111112
EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v
4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R

----------------------------------------

TITLE: Running Python Tests with pytest
DESCRIPTION: This command runs the test suite for AgentiPy using pytest to ensure changes don't break existing functionality.

LANGUAGE: bash
CODE:
pytest

----------------------------------------

TITLE: Linting and Formatting Python Code
DESCRIPTION: These commands use flake8 for linting and black for formatting to ensure code adheres to project style guidelines.

LANGUAGE: bash
CODE:
flake8 agentipy tests
black agentipy tests

----------------------------------------

TITLE: Installing AgentiPy Dependencies with pip
DESCRIPTION: This command installs AgentiPy in editable mode with development dependencies using pip.

LANGUAGE: bash
CODE:
pip install -e .[dev]  # Installs agentipy in editable mode with development dependencies

----------------------------------------

TITLE: Setting Up a Python Virtual Environment
DESCRIPTION: These commands create and activate a Python virtual environment for isolating project dependencies.

LANGUAGE: bash
CODE:
python3 -m venv venv
source venv/bin/activate  # Linux/macOS
venv\Scripts\activate  # Windows

----------------------------------------

TITLE: Installing Required Packages for Agentipy CoinGecko Explorer
DESCRIPTION: Command to install the necessary Python packages (agentipy, langgraph, and openai) using pip.

LANGUAGE: bash
CODE:
pip install agentipy langgraph openai

----------------------------------------

TITLE: Installing Required Libraries for CoinGecko Chatbot in Python
DESCRIPTION: This command installs the necessary Python library (agentipy) for running the CoinGecko Chatbot.

LANGUAGE: bash
CODE:
pip install agentipy

----------------------------------------

TITLE: Committing Changes with Git
DESCRIPTION: These Git commands stage and commit changes with a descriptive commit message following the Conventional Commits specification.

LANGUAGE: bash
CODE:
git add .
git commit -m "feat: Add new Jupiter swap action"

----------------------------------------

TITLE: Creating a Git Branch for Contributions
DESCRIPTION: This Git command creates a new branch for implementing changes or new features in AgentiPy.

LANGUAGE: bash
CODE:
git checkout -b <your_branch_name>

----------------------------------------

TITLE: Pushing Changes to GitHub
DESCRIPTION: This Git command pushes the local branch with changes to the forked repository on GitHub.

LANGUAGE: bash
CODE:
git push origin <your_branch_name>

----------------------------------------

TITLE: Cloning the AgentiPy Repository in Bash
DESCRIPTION: This snippet shows how to clone the forked AgentiPy repository to the local machine using Git.

LANGUAGE: bash
CODE:
git clone https://github.com/<your_username>/agentipy.git
cd agentipy

----------------------------------------

TITLE: Setting OpenAI API Key as Environment Variable
DESCRIPTION: Bash command to export the OpenAI API key as an environment variable for use in the Agentipy CoinGecko Explorer.

LANGUAGE: bash
CODE:
export OPENAI_API_KEY="your_openai_api_key"

----------------------------------------

TITLE: Cloning and Setting Up CoinGecko Chatbot Repository
DESCRIPTION: These commands clone the CoinGecko Chatbot repository from GitHub and navigate to the project directory.

LANGUAGE: bash
CODE:
git clone https://github.com/your-username/coingecko-chatbot.git
cd coingecko-chatbot

----------------------------------------

TITLE: Cloning and Setting Up RugCheck CLI Tool Repository
DESCRIPTION: Commands for cloning the RugCheck CLI Tool repository and installing the required dependency (aiohttp).

LANGUAGE: bash
CODE:
git clone https://github.com/yourusername/rugcheck-cli.git
cd rugcheck-cli
pip install aiohttp

----------------------------------------

TITLE: Running Agentipy CoinGecko Explorer
DESCRIPTION: Command to execute the Agentipy CoinGecko Explorer Python script.

LANGUAGE: bash
CODE:
python coingecko_explorer.py

----------------------------------------

TITLE: Running CoinGecko Chatbot in Python
DESCRIPTION: This command executes the main Python script to start the CoinGecko Chatbot.

LANGUAGE: bash
CODE:
python coingecko_chatbot.py

----------------------------------------

TITLE: Running the RugCheck CLI Tool
DESCRIPTION: Command to execute the RugCheck CLI Tool script from the command line.

LANGUAGE: bash
CODE:
python rugcheck_cli.py