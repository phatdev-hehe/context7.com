TITLE: Implementing RAG with Document Processing, Embedding, and Vector Storage in TypeScript
DESCRIPTION: This code snippet demonstrates the complete process of implementing RAG in Mastra. It includes initializing a document, creating chunks, generating embeddings, storing them in a vector database, and querying for similar content.

LANGUAGE: typescript
CODE:
import { embedMany } from "ai";
import { openai } from "@ai-sdk/openai";
import { PgVector } from "@mastra/pg";
import { MDocument } from "@mastra/rag";
import { z } from "zod";

// 1. Initialize document
const doc = MDocument.fromText(`Your document text here...`);

// 2. Create chunks
const chunks = await doc.chunk({
  strategy: "recursive",
  size: 512,
  overlap: 50,
});

// 3. Generate embeddings
const { embeddings } = await embedMany({
  values: chunks,
  model: openai.embedding("text-embedding-3-small"),
});

// 4. Store in vector database
const pgVector = new PgVector(process.env.POSTGRES_CONNECTION_STRING);
await pgVector.upsert({
  indexName: "embeddings",
  vectors: embeddings,
}); // using an index name of 'embeddings'

// 5. Query similar chunks
const results = await pgVector.query({
  indexName: "embeddings",
  queryVector: queryVector,
  topK: 3,
}); // queryVector is the embedding of the query

console.log("Similar chunks:", results);

----------------------------------------

TITLE: Adding Evals to an Agent in TypeScript
DESCRIPTION: This snippet demonstrates how to create an agent with Mastra and add multiple evaluation metrics including faithfulness, content similarity, and hallucination detection. It imports necessary components, sets up the agent with instructions and a model, and configures the evals with specific settings.

LANGUAGE: typescript
CODE:
import { Agent } from "@mastra/core/agent";
import { openai } from "@ai-sdk/openai";
import { 
  FaithfulnessMetric,
  ContentSimilarityMetric,
  HallucinationMetric 
} from "@mastra/evals/nlp";
 
export const myAgent = new Agent({
  name: "ContentWriter",
  instructions: "You are a content writer that creates accurate summaries",
  model: openai("gpt-4o"),
  evals: [
    new FaithfulnessMetric(),     // Checks if output matches source material
    new ContentSimilarityMetric({
      threshold: 0.8              // Require 80% similarity with expected output
    }),
    new HallucinationMetric()
  ]
});

----------------------------------------

TITLE: Streaming Agent Response in TypeScript
DESCRIPTION: This snippet demonstrates how to stream a response from a Mastra AI agent for real-time interactions, including reading from the response body using a TextDecoder.

LANGUAGE: typescript
CODE:
const response = await agent.stream({
  messages: [
    {
      role: "user",
      content: "Tell me a story",
    },
  ],
});

// Read from response body
const reader = response.body.getReader();
while (true) {
  const { done, value } = await reader.read();
  if (done) break;
  console.log(new TextDecoder().decode(value));
}

----------------------------------------

TITLE: Reranking Search Results with Cohere in TypeScript
DESCRIPTION: This snippet demonstrates how to use the rerank function from Mastra's RAG module to improve search result relevance using Cohere's reranking service. It includes options for specifying the number of top results and weighting different scoring factors.

LANGUAGE: typescript
CODE:
import { rerank } from "@mastra/rag";

const results = rerank(
  searchResults,
  "deployment configuration",
  cohere("rerank-v3.5"),
  {
    topK: 5,
    weights: {
      semantic: 0.4,
      vector: 0.4,
      position: 0.2
    }
  }
);

----------------------------------------

TITLE: Initializing Mastra Class in TypeScript
DESCRIPTION: Demonstrates how to initialize the Mastra class with both basic and full options. This includes setting up agents, workflows, integrations, logger, storage, tools, and vectors.

LANGUAGE: typescript
CODE:
import { Mastra } from "@mastra/core";
import { createLogger } from "@mastra/core/logger";

// Basic initialization
export const mastra = new Mastra({});

// Full initialization with all options
export const mastra = new Mastra({
  agents: {},
  workflows: [],
  integrations: [],
  logger: createLogger({
    name: "My Project",
    level: "info",
  }),
  storage: {},
  tools: {},
  vectors: {},
});

----------------------------------------

TITLE: Generating Responses Using RAG Workflow
DESCRIPTION: Defines a function to generate responses using the configured RAG workflow, processing user queries through the chain-of-thought steps.

LANGUAGE: typescript
CODE:
async function generateResponse(query: string) {
  const prompt = `
    Please answer the following question:
    ${query}

    Please base your answer only on the context provided in the tool. If the context doesn't contain enough information to fully answer the question, please state that explicitly.
    `;

  const { runId, start } = ragWorkflow.createRun();

  const workflowResult = await start({
    triggerData: {
      query: prompt,
    },
  });

  return workflowResult;
}

----------------------------------------

TITLE: Implementing Re-ranking for Search Results in TypeScript
DESCRIPTION: Shows how to apply re-ranking to initial vector search results to improve relevance by considering word order, exact matches, and using cross-attention between query and documents.

LANGUAGE: typescript
CODE:
import { openai } from "@ai-sdk/openai";
import { rerank } from "@mastra/rag";

// Get initial results from vector search
const initialResults = await pgVector.query({
  indexName: "embeddings",
  queryVector: queryEmbedding,
  topK: 10,
});

// Re-rank the results
const rerankedResults = await rerank(initialResults, query, openai('gpt-4o-mini'));

----------------------------------------

TITLE: Complete Document Processing and Embedding Pipeline in TypeScript
DESCRIPTION: This comprehensive example demonstrates the entire process of document processing and embedding generation. It includes initializing a document, chunking it, and generating embeddings using both OpenAI and Cohere providers.

LANGUAGE: typescript
CODE:
import { embedMany } from "ai";
import { openai } from "@ai-sdk/openai";
import { cohere } from "@ai-sdk/cohere";

import { MDocument } from "@mastra/rag";

// Initialize document
const doc = MDocument.fromText(`
  Climate change poses significant challenges to global agriculture.
  Rising temperatures and changing precipitation patterns affect crop yields.
`);

// Create chunks
const chunks = await doc.chunk({
  strategy: "recursive",
  size: 256,
  overlap: 50,
});

// Generate embeddings with OpenAI
const { embeddings: openAIEmbeddings } = await embedMany({
  model: openai.embedding('text-embedding-3-small'),
  values: chunks.map(chunk => chunk.text),
});

// OR

// Generate embeddings with Cohere
const { embeddings: cohereEmbeddings } = await embedMany({
  model: cohere.embedding('embed-english-v3.0'),
  values: chunks.map(chunk => chunk.text),
});

// Store embeddings in your vector database
await vectorStore.upsert({
  indexName: "embeddings",
  vectors: embeddings,
});

----------------------------------------

TITLE: Example Usage of RAG System with Metadata Filtering
DESCRIPTION: Demonstrates how to use the implemented RAG system with example queries that utilize metadata filtering.

LANGUAGE: typescript
CODE:
const queries = [
  "What adaptation strategies are mentioned? Use regex to search for the word 'adaptation' in the 'nested.keywords' field.",
  "Show me recent sections. Check the 'nested.id' field and return values that are greater than 2.",
  "Search the 'text' field using regex operator to find sections containing 'temperature'.",
];

async function answerQueries() {
  for (const query of queries) {
    try {
      // Generate and log the response
      const answer = await generateResponse(query);
      console.log('\nQuery:', query);
      console.log('Response:', answer);
    } catch (error) {
      console.error(`Error processing query "${query}":`, error);
    }
  }
}

await answerQueries();

----------------------------------------

TITLE: Chunking Documents Using Recursive Strategy in TypeScript
DESCRIPTION: This code snippet shows how to use the recursive chunking strategy to split documents into manageable pieces. It includes options for chunk size, overlap, separator, and metadata extraction.

LANGUAGE: typescript
CODE:
const chunks = await doc.chunk({
  strategy: "recursive",
  size: 512,
  overlap: 50,
  separator: "\n",
  extract: {
    metadata: true, // Optionally extract metadata
  },
});

----------------------------------------

TITLE: Basic FaithfulnessMetric Usage in TypeScript
DESCRIPTION: Demonstrates basic setup and usage of the FaithfulnessMetric class to evaluate LLM output accuracy. Shows initialization with OpenAI model and context, followed by measuring faithfulness of a response.

LANGUAGE: typescript
CODE:
import { openai } from "@ai-sdk/openai";
import { FaithfulnessMetric } from "@mastra/evals/llm";

// Configure the model for evaluation
const model = openai("gpt-4o-mini");

const metric = new FaithfulnessMetric(model, {
  context: [
    "The company was established in 1995.",
    "Currently employs around 450-550 people.",
  ],
});

const result = await metric.measure(
  "Tell me about the company.",
  "The company was founded in 1995 and has 500 employees.",
);

console.log(result.score); // 1.0
console.log(result.info.reason); // "All claims are supported by the context."

----------------------------------------

TITLE: Structured Output with JSON Schema in Mastra Agent
DESCRIPTION: This snippet shows how to use a JSON Schema to get structured data output from a Mastra agent, including defining the schema and using it in the generate method.

LANGUAGE: typescript
CODE:
const schema = {
  type: "object",
  properties: {
    summary: { type: "string" },
    keywords: { type: "array", items: { type: "string" } },
  },
  additionalProperties: false,
  required: ["summary", "keywords"],
};

const response = await myAgent.generate(
  [
    {
      role: "user",
      content:
        "Please provide a summary and keywords for the following text: ...",
    },
  ],
  {
    output: schema,
  },
);

console.log("Structured Output:", response.object);

----------------------------------------

TITLE: Implementing Cat Expert AI Agent with System Prompt in TypeScript
DESCRIPTION: Creates an AI agent specialized in cat-related information using Mastra. The agent uses a system prompt to define its personality and responsibilities, and includes a custom tool for fetching verified cat facts from an external API. The implementation demonstrates agent configuration, tool creation, and basic interaction.

LANGUAGE: typescript
CODE:
import { openai } from "@ai-sdk/openai";
import { Agent } from "@mastra/core/agent";
import { createTool } from "@mastra/core/tools";

import { z } from "zod";

const instructions = `You are a helpful cat expert assistant. When discussing cats, you should always include an interesting cat fact.

  Your main responsibilities:
  1. Answer questions about cats
  2. Use the catFact tool to provide verified cat facts
  3. Incorporate the cat facts naturally into your responses

  Always use the catFact tool at least once in your responses to ensure accuracy.`;

const getCatFact = async () => {
  const { fact } = (await fetch("https://catfact.ninja/fact").then((res) =>
    res.json(),
  )) as {
    fact: string;
  };

  return fact;
};

const catFact = createTool({
  id: "Get cat facts",
  inputSchema: z.object({}),
  description: "Fetches cat facts",
  execute: async () => {
    console.log("using tool to fetch cat fact");
    return {
      catFact: await getCatFact(),
    };
  },
});

const catOne = new Agent({
  name: "cat-one",
  instructions: instructions,
  model: openai("gpt-4o-mini"),
  tools: {
    catFact,
  },
});

const result = await catOne.generate("Tell me a cat fact");

console.log(result.text);

----------------------------------------

TITLE: Using Memory in Agents in TypeScript
DESCRIPTION: This code shows how to initialize an agent with memory and use it in interactions, demonstrating automatic context management.

LANGUAGE: typescript
CODE:
// Initialize Agent with memory
const myAgent = new Agent({
  memory,
  // other agent options
});
// Add agent to mastra
const mastra = new Mastra({
  agents: { myAgent },
});

// Memory is automatically used in agent interactions when resourceId and threadId are added
const response = await myAgent.generate(
  "What were we discussing earlier about performance?",
  {
    resourceId: "user_123",
    threadId: "thread_456",
  },
);

----------------------------------------

TITLE: Implementing Stock Price and Thread Info Tools with createTool in TypeScript
DESCRIPTION: Demonstrates creating two custom tools using createTool(): one for fetching stock prices and another for retrieving thread information. Uses Zod for input validation and includes async execution functions with proper typing.

LANGUAGE: typescript
CODE:
import { createTool } from "@mastra/core/logger";
import { z } from "zod";

const getStockPrice = async (symbol: string) => {
  const data = await fetch(
    `https://mastra-stock-data.vercel.app/api/stock-data?symbol=${symbol}`,
  ).then((r) => r.json());
  return data.prices["4. close"];
};

export const stockPrices = createTool({
  id: "Get Stock Price",
  inputSchema: z.object({
    symbol: z.string(),
  }),
  description: `Fetches the last day's closing stock price for a given symbol`,
  execute: async ({ context }) => {
    console.log("Using tool to fetch stock price for", context.symbol);
    return {
      symbol: context.symbol,
      currentPrice: await getStockPrice(context.symbol),
    };
  },
});

export const threadInfo = createTool({
  id: "Get Thread Info",
  inputSchema: z.object({
    includeResource: z.boolean().optional(),
  }),
  description: `Gets information about the current conversation thread`,
  execute: async ({ context, threadId, resourceId }) => {
    console.log("Current thread:", threadId);
    console.log("Current resource:", resourceId);

    return {
      threadId,
      resourceId: context.includeResource ? resourceId : undefined,
    };
  },
});

----------------------------------------

TITLE: Generating and Inserting Embeddings into PgVector using Mastra and OpenAI
DESCRIPTION: This code snippet demonstrates the process of generating embeddings from text chunks using OpenAI's embedding model, creating an index in PostgreSQL using PgVector, and inserting the embeddings into the database. It utilizes the Mastra library for document processing and the OpenAI SDK for embedding generation.

LANGUAGE: tsx
CODE:
import { openai } from "@ai-sdk/openai";
import { PgVector } from "@mastra/pg";
import { MDocument } from "@mastra/rag";
import { embedMany } from "ai";

const doc = MDocument.fromText("Your text content...");

const chunks = await doc.chunk();

const { embeddings } = await embedMany({
  values: chunks.map(chunk => chunk.text),
  model: openai.embedding("text-embedding-3-small"),
 });

const pgVector = new PgVector(process.env.POSTGRES_CONNECTION_STRING!);

await pgVector.createIndex({
  indexName: "test_index",
  dimension: 1536,
});

await pgVector.upsert({
  indexName: "test_index",
  vectors: embeddings,
  metadata: chunks?.map((chunk: any) => ({ text: chunk.text })),
});

----------------------------------------

TITLE: Initializing and Using ContentSimilarityMetric in TypeScript
DESCRIPTION: Demonstrates how to import, initialize, and use the ContentSimilarityMetric class to measure similarity between two strings. It includes configuring options and interpreting the result.

LANGUAGE: typescript
CODE:
import { ContentSimilarityMetric } from "@mastra/evals/nlp";

const metric = new ContentSimilarityMetric({
  ignoreCase: true,
  ignoreWhitespace: true
});

const result = await metric.measure(
  "Hello, world!",
  "hello world"
);

console.log(result.score); // Similarity score from 0-1
console.log(result.info); // Detailed similarity metrics

----------------------------------------

TITLE: Initializing and Using ToxicityMetric in TypeScript
DESCRIPTION: This snippet demonstrates how to import, configure, and use the ToxicityMetric class to evaluate the toxicity of an LLM's output. It shows the basic setup, measurement, and result logging.

LANGUAGE: typescript
CODE:
import { openai } from "@ai-sdk/openai";
import { ToxicityMetric } from "@mastra/evals/llm";

// Configure the model for evaluation
const model = openai("gpt-4o-mini");

const metric = new ToxicityMetric(model, {
  scale: 1, // Default scale is 0-1
});

const result = await metric.measure(
  "How is Sarah as a person?",
  "Sarah is a dedicated team member who always delivers quality work.",
);

console.log(result.score); // Score from 0-1 (0 = not toxic, 1 = toxic)
console.log(result.info.reason); // Explanation of the toxicity assessment

----------------------------------------

TITLE: Initializing and Using CompletenessMetric in TypeScript
DESCRIPTION: This snippet demonstrates how to import, instantiate, and use the CompletenessMetric class to measure the completeness of an LLM's output compared to the input. It shows the basic usage pattern and how to access the result.

LANGUAGE: typescript
CODE:
import { CompletenessMetric } from "@mastra/evals/nlp";

const metric = new CompletenessMetric();

const result = await metric.measure(
  "Explain how photosynthesis works in plants using sunlight, water, and carbon dioxide.",
  "Plants use sunlight to convert water and carbon dioxide into glucose through photosynthesis."
);

console.log(result.score); // Coverage score from 0-1
console.log(result.info); // Object containing detailed metrics about element coverage

----------------------------------------

TITLE: Configuring Environment Variables for RAG System
DESCRIPTION: Sets up required environment variables for OpenAI API key and Postgres connection string.

LANGUAGE: bash
CODE:
OPENAI_API_KEY=your_openai_api_key_here
POSTGRES_CONNECTION_STRING=your_connection_string_here

----------------------------------------

TITLE: Creating Custom Vector Store
DESCRIPTION: Template for implementing a custom vector store for managing embeddings and vector operations.

LANGUAGE: typescript
CODE:
import { MastraVector } from '@mastra/core';

class CustomVectorStore extends MastraVector {
  // Vector store implementation
}

----------------------------------------

TITLE: Initializing and Using QdrantVector Store
DESCRIPTION: Complete example showing initialization of QdrantVector client, creating an index, upserting vectors, and querying vectors. Demonstrates core functionality including vector operations with metadata and filtering.

LANGUAGE: typescript
CODE:
import { QdrantVector } from '@mastra/qdrant';

const vectorStore = new QdrantVector(
  'http://localhost:6333', // url
  'optional-api-key',      // optional
  false                    // https (optional)
);

// Create a new collection
await vectorStore.createIndex({ indexName: 'my-collection', dimension: 1536, metric: 'cosine' });

// Add vectors
const vectors = [[0.1, 0.2, ...], [0.3, 0.4, ...]];
const metadata = [{ text: 'doc1' }, { text: 'doc2' }];
const ids = await vectorStore.upsert({ indexName: 'my-collection', vectors, metadata });

// Query vectors
const results = await vectorStore.query({
  indexName: 'my-collection',
  queryVector: [0.1, 0.2, ...],
  topK: 10, // topK
  filter: { text: { $eq: 'doc1' } }, // optional filter
  includeVector: false // includeVector
});

----------------------------------------

TITLE: Generating and Storing Embeddings in Chroma using Mastra and OpenAI
DESCRIPTION: This code snippet demonstrates the process of generating text embeddings using OpenAI, chunking the text, and storing the embeddings along with metadata in a Chroma vector database. It utilizes Mastra's ChromaVector class for database operations and MDocument for text processing.

LANGUAGE: tsx
CODE:
import { openai } from '@ai-sdk/openai';
import { ChromaVector } from '@mastra/chroma';
import { MDocument } from '@mastra/rag';
import { embedMany } from 'ai';

const doc = MDocument.fromText('Your text content...');

const chunks = await doc.chunk();

const { embeddings } = await embedMany({
  values: chunks.map(chunk => chunk.text),
  model: openai.embedding('text-embedding-3-small'),
});

const chroma = new ChromaVector({
  path: "path/to/chroma/db",
});

await chroma.createIndex({
  indexName: 'test_collection',
  dimension: 1536,
});

// Store both metadata and original documents in Chroma
await chroma.upsert({
  indexName: 'test_collection',
  vectors: embeddings,
  metadata: chunks.map(chunk => ({ text: chunk.text })), // metadata
  documents: chunks.map(chunk => chunk.text), // store original documents
});

----------------------------------------

TITLE: Chunking JSON Data with Mastra RAG Module in TypeScript
DESCRIPTION: This code snippet shows how to use the MDocument class from the @mastra/rag package to semantically chunk JSON data. It creates a sample JSON object, converts it to an MDocument, and then chunks it with a maximum size of 100 characters. The resulting chunks maintain the relationships between keys and values.

LANGUAGE: tsx
CODE:
import { MDocument } from "@mastra/rag";

const testJson = {
  name: "John Doe",
  age: 30,
  email: "john.doe@example.com",
};

const doc = MDocument.fromJSON(JSON.stringify(testJson));

const chunks = await doc.chunk({
  maxSize: 100,
});

console.log(chunks);

----------------------------------------

TITLE: Registering an Agent with Mastra in TypeScript
DESCRIPTION: This snippet demonstrates how to register a created agent with Mastra, enabling logging and access to configured tools and integrations.

LANGUAGE: typescript
CODE:
import { Mastra } from "@mastra/core";
import { myAgent } from "./agents";

export const mastra = new Mastra({
  agents: { myAgent },
});

----------------------------------------

TITLE: Using MDocument for Document Processing in TypeScript
DESCRIPTION: Example demonstrating how to create an MDocument from text, chunk it with metadata extraction, and retrieve processed data.

LANGUAGE: typescript
CODE:
import { MDocument } from '@mastra/rag';

// Create document from text
const doc = MDocument.fromText('Your content here');

// Split into chunks with metadata extraction
const chunks = await doc.chunk({
  strategy: 'markdown',
  headers: [['#', 'title'], ['##', 'section']],
  extract: {
    fields: [
      { name: 'summary', description: 'A brief summary' },
      { name: 'keywords', description: 'Key terms' }
    ]
  }
});

// Get processed chunks
const docs = doc.getDocs();
const texts = doc.getText();
const metadata = doc.getMetadata();

----------------------------------------

TITLE: Implementing Weather Agent with External API Integration in TypeScript
DESCRIPTION: Complete implementation of a weather-enabled AI agent using Mastra framework. The code includes a custom weather tool that fetches data from Open-Meteo API, weather condition mapping, and agent configuration with OpenAI integration. It handles location geocoding and detailed weather information retrieval.

LANGUAGE: typescript
CODE:
import { Mastra } from "@mastra/core";
import { Agent } from "@mastra/core/agent";
import { createTool } from "@mastra/core/tools";
import { openai } from "@ai-sdk/openai";
import { z } from "zod";

interface WeatherResponse {
  current: {
    time: string;
    temperature_2m: number;
    apparent_temperature: number;
    relative_humidity_2m: number;
    wind_speed_10m: number;
    wind_gusts_10m: number;
    weather_code: number;
  };
}

const weatherTool = createTool({
  id: "get-weather",
  description: "Get current weather for a location",
  inputSchema: z.object({
    location: z.string().describe("City name"),
  }),
  outputSchema: z.object({
    temperature: z.number(),
    feelsLike: z.number(),
    humidity: z.number(),
    windSpeed: z.number(),
    windGust: z.number(),
    conditions: z.string(),
    location: z.string(),
  }),
  execute: async ({ context }) => {
    return await getWeather(context.location);
  },
});

const getWeather = async (location: string) => {
  const geocodingUrl = `https://geocoding-api.open-meteo.com/v1/search?name=${encodeURIComponent(location)}&count=1`;
  const geocodingResponse = await fetch(geocodingUrl);
  const geocodingData = await geocodingResponse.json();

  if (!geocodingData.results?.[0]) {
    throw new Error(`Location '${location}' not found`);
  }

  const { latitude, longitude, name } = geocodingData.results[0];

  const weatherUrl = `https://api.open-meteo.com/v1/forecast?latitude=${latitude}&longitude=${longitude}&current=temperature_2m,apparent_temperature,relative_humidity_2m,wind_speed_10m,wind_gusts_10m,weather_code`;

  const response = await fetch(weatherUrl);
  const data: WeatherResponse = await response.json();

  return {
    temperature: data.current.temperature_2m,
    feelsLike: data.current.apparent_temperature,
    humidity: data.current.relative_humidity_2m,
    windSpeed: data.current.wind_speed_10m,
    windGust: data.current.wind_gusts_10m,
    conditions: getWeatherCondition(data.current.weather_code),
    location: name,
  };
};

function getWeatherCondition(code: number): string {
  const conditions: Record<number, string> = {
    0: "Clear sky",
    1: "Mainly clear",
    2: "Partly cloudy",
    3: "Overcast",
    45: "Foggy",
    48: "Depositing rime fog",
    51: "Light drizzle",
    53: "Moderate drizzle",
    55: "Dense drizzle",
    56: "Light freezing drizzle",
    57: "Dense freezing drizzle",
    61: "Slight rain",
    63: "Moderate rain",
    65: "Heavy rain",
    66: "Light freezing rain",
    67: "Heavy freezing rain",
    71: "Slight snow fall",
    73: "Moderate snow fall",
    75: "Heavy snow fall",
    77: "Snow grains",
    80: "Slight rain showers",
    81: "Moderate rain showers",
    82: "Violent rain showers",
    85: "Slight snow showers",
    86: "Heavy snow showers",
    95: "Thunderstorm",
    96: "Thunderstorm with slight hail",
    99: "Thunderstorm with heavy hail",
  };
  return conditions[code] || "Unknown";
}

const weatherAgent = new Agent({
  name: "Weather Agent",
  instructions: `You are a helpful weather assistant that provides accurate weather information.
Your primary function is to help users get weather details for specific locations. When responding:
- Always ask for a location if none is provided
- Include relevant details like humidity, wind conditions, and precipitation
- Keep responses concise but informative
Use the weatherTool to fetch current weather data.`,
  model: openai("gpt-4o-mini"),
  tools: { weatherTool },
});

const mastra = new Mastra({
  agents: { weatherAgent },
});

async function main() {
  const agent = await mastra.getAgent("weatherAgent");
  const result = await agent.generate("What is the weather in London?");
  console.log(result.text);
}

main();

----------------------------------------

TITLE: Configuring Memory Class with Custom Options in Mastra (TypeScript)
DESCRIPTION: Shows how to create a Memory instance with custom configuration options, including storage, vector database, and various memory-related settings. This example demonstrates advanced usage with LibSQLStore and LibSQLVector.

LANGUAGE: typescript
CODE:
import { Memory } from "@mastra/memory";
import { LibSQLStore } from "@mastra/core/storage/libsql";
import { LibSQLVector } from "@mastra/core/vector/libsql";
import { Agent } from "@mastra/core/agent";

const memory = new Memory({
  // Optional storage configuration - libsql will be used by default
  storage: new LibSQLStore({
    url: "file:memory.db",
  }),

  // Optional vector database for semantic search - libsql will be used by default
  vector: new LibSQLVector({
    url: "file:vector.db",
  }),

  // Memory configuration options
  options: {
    // Number of recent messages to include
    lastMessages: 20,

    // Semantic search configuration
    semanticRecall: {
      topK: 3, // Number of similar messages to retrieve
      messageRange: {
        // Messages to include around each result
        before: 2,
        after: 1,
      },
    },

    // Working memory configuration
    workingMemory: {
      enabled: true,
      template: "<user><first_name></first_name><last_name></last_name></user>",
    },
  },
});

const agent = new Agent({
  memory,
  ...otherOptions,
});

----------------------------------------

TITLE: Basic Context Precision Metric Usage in TypeScript
DESCRIPTION: Demonstrates basic initialization and usage of the ContextPrecisionMetric class to evaluate context relevance for a simple photosynthesis query.

LANGUAGE: typescript
CODE:
import { openai } from "@ai-sdk/openai";
import { ContextPrecisionMetric } from "@mastra/evals/llm";

// Configure the model for evaluation
const model = openai("gpt-4o-mini");

const metric = new ContextPrecisionMetric(model, {
  context: [
    "Photosynthesis is a biological process used by plants to create energy from sunlight.",
    "Plants need water and nutrients from the soil to grow.",
    "The process of photosynthesis produces oxygen as a byproduct.",
  ],
});

const result = await metric.measure(
  "What is photosynthesis?",
  "Photosynthesis is the process by which plants convert sunlight into energy.",
);

console.log(result.score); // Precision score from 0-1
console.log(result.info.reason); // Explanation of the score

----------------------------------------

TITLE: Example Query Processing
DESCRIPTION: Implementation of query processing function with error handling and example usage with sample queries.

LANGUAGE: typescript
CODE:
async function answerQueries(queries: string[]) {
  for (const query of queries) {
    try {
      const answer = await generateResponse(query);
      console.log("\nQuery:", query);
      console.log("Response:", answer);
    } catch (error) {
      console.error(`Error processing query "${query}":`, error);
    }
  }
}

const queries = [
  "explain technical trading analysis",
  "explain trading card valuation",
  "how do you analyze market resistance",
];

await answerQueries(queries);

----------------------------------------

TITLE: Implementing Conditional Workflow with Reference-Based Conditions in TypeScript
DESCRIPTION: This snippet shows how to use reference-based conditions with comparison operators in a Mastra workflow. It demonstrates an alternative approach to conditional branching, using a query object to specify the condition instead of a function.

LANGUAGE: typescript
CODE:
// Using reference-based conditions instead of functions
conditionalWorkflow
  .step(startStep)
  .if({
    ref: { step: startStep, path: 'value' },
    query: { $gte: 10 }, // Condition: value is 10 or greater
  })
  .then(highValueStep)
  .then(finalStep)
  .else()
  .then(lowValueStep)
  .then(finalStep)
  .commit();

----------------------------------------

TITLE: Creating a Vector Query Tool in TypeScript
DESCRIPTION: Shows how to create a Vector Query Tool that allows an agent to directly query a vector database, combining semantic search with optional filtering and reranking.

LANGUAGE: typescript
CODE:
const vectorQueryTool = createVectorQueryTool({
  vectorStoreName: 'pgVector',
  indexName: 'embeddings',
  model: openai.embedding('text-embedding-3-small'),
});

----------------------------------------

TITLE: Chain of Thought Response Generation
DESCRIPTION: Implements response generation with chain-of-thought reasoning using the configured agent.

LANGUAGE: typescript
CODE:
async function generateResponse(query: string) {
  const prompt = `
    Please answer the following question using chain-of-thought reasoning:
    ${query}

    Please base your answer only on the context provided in the tool. If the context doesn't 
    contain enough information to fully answer the question, please state that explicitly.
    Remember: Explain how you're using the retrieved information to reach your conclusions.
    `;

  const completion = await agent.generate(prompt);
  return completion.text;
}

----------------------------------------

TITLE: Initializing Agent Configuration in TypeScript
DESCRIPTION: An async function that takes connection details, agent configuration, API mappings, and a logger to initialize and return an agent function. The returned agent function accepts a prompt and returns a response.

LANGUAGE: typescript
CODE:
async function getAgent({
  connectionId,
  agent,
  apis,
  logger,
}: {
  connectionId: string;
  agent: Record<string, any>;
  apis: Record<string, IntegrationApi>;
  logger: any;
}): Promise<(props: { prompt: string }) => Promise<any>> {
  return async (props: { prompt: string }) => {
    return { message: "Hello, world!" };
  };
}

----------------------------------------

TITLE: Initializing Sequential Workflow Steps in TypeScript
DESCRIPTION: Creates three workflow steps using Mastra's Step class and initializes a workflow with Zod schema validation. Each step processes data from previous steps and performs calculations, demonstrating sequential data flow.

LANGUAGE: typescript
CODE:
import { Step, Workflow } from "@mastra/core/workflows";
import { z } from "zod";

const stepOne = new Step({
  id: "stepOne",
  execute: async ({ context }) => ({
    doubledValue: context.triggerData.inputValue * 2,
  }),
});

const stepTwo = new Step({
  id: "stepTwo",
  execute: async ({ context }) => {
    if (context.steps.stepOne.status !== "success") {
      return { incrementedValue: 0 }
    }

    return { incrementedValue: context.steps.stepOne.output.doubledValue + 1 }
  },
});

const stepThree = new Step({
  id: "stepThree",
  execute: async ({ context }) => {
    if (context.steps.stepTwo.status !== "success") {
      return { tripledValue: 0 }
    }

    return { tripledValue: context.steps.stepTwo.output.incrementedValue * 3 }
  },
});

// Build the workflow
const myWorkflow = new Workflow({
  name: "my-workflow",
  triggerSchema: z.object({
    inputValue: z.number(),
  }),
});

----------------------------------------

TITLE: Initializing and Using ContextRelevancyMetric in TypeScript
DESCRIPTION: This snippet demonstrates how to import, configure, and use the ContextRelevancyMetric class to measure the relevance of retrieved context in a RAG pipeline. It includes setting up the model, creating the metric instance, and measuring the context relevancy.

LANGUAGE: typescript
CODE:
import { openai } from "@ai-sdk/openai";
import { ContextRelevancyMetric } from "@mastra/evals/llm";

// Configure the model for evaluation
const model = openai("gpt-4o-mini");

const metric = new ContextRelevancyMetric(model, {
  context: [
    "All data is encrypted at rest and in transit",
    "Two-factor authentication is mandatory",
    "The platform supports multiple languages",
    "Our offices are located in San Francisco"
  ]
});

const result = await metric.measure(
  "What are our product's security features?",
  "Our product uses encryption and requires 2FA.",
  );

console.log(result.score); // Score from 0-1
console.log(result.info.reason); // Explanation of the relevancy assessment

----------------------------------------

TITLE: Customizing Document Chunking with MDocument in Mastra RAG
DESCRIPTION: This code snippet shows how to use the MDocument class from the @mastra/rag package to create a document from plain text and chunk it using a custom separator. It demonstrates the flexibility of Mastra in handling document processing for RAG applications.

LANGUAGE: tsx
CODE:
import { MDocument } from "@mastra/rag";

const doc = MDocument.fromText("Your plain text content...");

const chunks = await doc.chunk({
  separator: "\n",
});

----------------------------------------

TITLE: Initializing AI Agent with OpenAI
DESCRIPTION: Creates a new AI agent with specific instructions and model configuration using OpenAI integration.

LANGUAGE: typescript
CODE:
import { openai } from '@ai-sdk/openai';
import { Agent } from '@mastra/core/agent';

const agent = new Agent({
  name: 'my-agent',
  instructions: 'Your task-specific instructions',
  model: openai('gpt-4o-mini'),
  tools: {}, // Optional tools
});

----------------------------------------

TITLE: Implementing Agent-Workflow Integration in TypeScript with Mastra
DESCRIPTION: A complete example showing how to create an AI agent, define a workflow with a step that calls the agent, and execute the workflow. The code uses OpenAI's GPT model and Zod for schema validation. The agent is configured to respond as the character Skipper from Penguins of Madagascar.

LANGUAGE: typescript
CODE:
import { openai } from "@ai-sdk/openai";
import { Mastra } from "@mastra/core";
import { Agent } from "@mastra/core/agent";
import { Step, Workflow } from "@mastra/core/workflows";
import { z } from "zod";

const penguin = new Agent({
  name: "agent skipper",
  instructions: `You are skipper from penguin of madagascar, reply as that`,
  model: openai("gpt-4o-mini"),
});

const newWorkflow = new Workflow({
  name: "pass message to the workflow",
  triggerSchema: z.object({
    message: z.string(),
  }),
});

const replyAsSkipper = new Step({
  id: "reply",
  outputSchema: z.object({
    reply: z.string(),
  }),
  execute: async ({ context, mastra }) => {
    const skipper = mastra?.getAgent('penguin');

    const res = await skipper?.generate(
      context?.triggerData?.message,
    );
    return { reply: res?.text || "" };
  },
});

newWorkflow.step(replyAsSkipper);
newWorkflow.commit();

const mastra = new Mastra({
  agents: { penguin },
  workflows: { newWorkflow },
});

const { runId, start } = await mastra.getWorkflow("newWorkflow").createRun();

const runResult = await start({
  triggerData: { message: "Give me a run down of the mission to save private" },
});

console.log(runResult.results);

----------------------------------------

TITLE: Comparing Search Results in Mastra RAG System
DESCRIPTION: Displays and compares initial vector search results with re-ranked results, showing scores for different ranking factors.

LANGUAGE: typescript
CODE:
console.log('Initial Results:');
initialResults.forEach((result, index) => {
  console.log(`Result ${index + 1}:`, {
    text: result.metadata.text,
    score: result.score,
  });
});

console.log('Re-ranked Results:');
rerankedResults.forEach(({ result, score, details }, index) => {
  console.log(`Result ${index + 1}:`, {
    text: result.metadata.text,
    score: score,
    semantic: details.semantic,
    vector: details.vector,
    position: details.position,
  });
});

----------------------------------------

TITLE: Chunking Text with Mastra MDocument
DESCRIPTION: Demonstrates how to split a text document into smaller chunks using the Mastra MDocument class. The example shows importing the MDocument class, creating a document from plain text, and using the chunk method to split the content into smaller segments.

LANGUAGE: tsx
CODE:
import { MDocument } from "@mastra/rag";

const doc = MDocument.fromText("Your plain text content...");

const chunks = await doc.chunk();

----------------------------------------

TITLE: Processing Documents into Chunks in Mastra
DESCRIPTION: Creates a document from text and chunks it using recursive strategy with specified size and overlap parameters.

LANGUAGE: typescript
CODE:
const doc1 = MDocument.fromText(`
market data shows price resistance levels.
technical charts display moving averages.
support levels guide trading decisions.
breakout patterns signal entry points.
price action determines trade timing.
`);

const chunks = await doc1.chunk({
  strategy: 'recursive',
  size: 150,
  overlap: 20,
  separator: '\n',
});

----------------------------------------

TITLE: Defining Editor Agent and Tool in TypeScript
DESCRIPTION: This snippet defines an Editor agent and its associated tool function. The agent uses the OpenAI GPT-4 model to edit and refine the blog post copy provided by the Copywriter agent.

LANGUAGE: typescript
CODE:
const editorAgent = new Agent({
  name: "Editor",
  instructions: "You are an editor agent that edits blog post copy.",
  model: openai("gpt-4o-mini"),
});

const editorTool = createTool({
  id: "editor-agent",
  description: "Calls the editor agent to edit blog post copy.",
  inputSchema: z.object({
    copy: z.string().describe("Blog post copy"),
  }),
  outputSchema: z.object({
    copy: z.string().describe("Edited blog post copy"),
  }),
  execute: async ({ context }) => {
    const result = await editorAgent.generate(
      `Edit the following blog post only returning the edited copy: ${context.copy}`,
    );
    return { copy: result.text };
  },
});

----------------------------------------

TITLE: Creating Weather Information Tool in TypeScript
DESCRIPTION: This snippet demonstrates how to create a tool that fetches weather information for a given city using the Mastra framework. It defines the tool's input schema, description, and execution function.

LANGUAGE: typescript
CODE:
import { createTool } from "@mastra/core/tools";
import { z } from "zod";

const getWeatherInfo = async (city: string) => {
  // Replace with an actual API call to a weather service
  const data = await fetch(`https://api.example.com/weather?city=${city}`).then(
    (r) => r.json(),
  );
  return data;
};

export const weatherInfo = createTool({
  id: "Get Weather Information",
  inputSchema: z.object({
    city: z.string(),
  }),
  description: `Fetches the current weather information for a given city`,
  execute: async ({ context: { city } }) => {
    console.log("Using tool to fetch weather information for", city);
    return await getWeatherInfo(city);
  },
});

----------------------------------------

TITLE: Advanced Usage of createDocumentChunkerTool with Custom Parameters
DESCRIPTION: Illustrates a more complex example of using createDocumentChunkerTool with custom parameters. It demonstrates creating a larger technical document, configuring the chunker with different settings, and processing the resulting chunks.

LANGUAGE: typescript
CODE:
const technicalDoc = new MDocument({
  text: longDocumentContent,
  metadata: {
    type: "technical",
    version: "1.0"
  }
});

const chunker = createDocumentChunkerTool({
  doc: technicalDoc,
  params: {
    strategy: "recursive",
    size: 1024,      // Larger chunks
    overlap: 100,    // More overlap
    separator: "\n\n" // Split on double newlines
  }
});

const { chunks } = await chunker.execute();

// Process the chunks
chunks.forEach((chunk, index) => {
  console.log(`Chunk ${index + 1} length: ${chunk.content.length}`);
});

----------------------------------------

TITLE: Generating Structured Recipe Data with Chef Agent in TypeScript
DESCRIPTION: Demonstrates how to use Zod schema to generate structured recipe data from the Chef Assistant agent, including ingredients and steps.

LANGUAGE: typescript
CODE:
import { z } from "zod";

async function main() {
  const query =
    "I want to make lasagna, can you generate a lasagna recipe for me?";
  console.log(`Query: ${query}`);

  // Define the Zod schema
  const schema = z.object({
    ingredients: z.array(
      z.object({
        name: z.string(),
        amount: z.string(),
      }),
    ),
    steps: z.array(z.string()),
  });

  const response = await chefAgent.generate(
    [{ role: "user", content: query }],
    { output: schema },
  );
  console.log("\n👨‍🍳 Chef Michel:", response.object);
}

main();

----------------------------------------

TITLE: Chunking Markdown Documents with Mastra RAG in TypeScript
DESCRIPTION: Demonstrates how to initialize an MDocument instance from markdown content and split it into chunks. The code shows the basic usage of the Mastra RAG library for processing markdown documents, which preserves headers, lists, and code blocks during chunking.

LANGUAGE: tsx
CODE:
import { MDocument } from "@mastra/rag";

const doc = MDocument.fromMarkdown("# Your markdown content...");

const chunks = await doc.chunk();

----------------------------------------

TITLE: Integrating Mastra MCP Server in a Mastra Agent
DESCRIPTION: TypeScript code demonstrating how to configure and use the Mastra MCP server within a Mastra Agent. This snippet shows the setup of MCPConfiguration, creation of an Agent with access to documentation tools, and example usage of toolsets in agent interactions.

LANGUAGE: typescript
CODE:
import { MCPConfiguration } from '@mastra/mcp';
import { Agent } from '@mastra/core/agent';
import { openai } from '@ai-sdk/openai';

// Configure MCP with the docs server
const mcp = new MCPConfiguration({
  servers: {
    mastra: {
      command: 'npx',
      args: ['-y', '@mastra/mcp-docs-server@latest'],
    },
  },
});

// Create an agent with access to all documentation tools
const agent = new Agent({
  name: 'Documentation Assistant',
  instructions: 'You help users find and understand Mastra.ai documentation.',
  model: openai('gpt-4'),
  tools: await mcp.getTools(),
});

// Or use toolsets dynamically in generate/stream
const response = await agent.stream('Show me the quick start example', {
  toolsets: await mcp.getToolsets(),
});

----------------------------------------

TITLE: Initializing and Using HallucinationMetric in TypeScript
DESCRIPTION: This snippet demonstrates how to import, configure, and use the HallucinationMetric class to evaluate LLM outputs for factual correctness against provided context.

LANGUAGE: typescript
CODE:
import { openai } from "@ai-sdk/openai";
import { HallucinationMetric } from "@mastra/evals/llm";

// Configure the model for evaluation
const model = openai("gpt-4o-mini");

const metric = new HallucinationMetric(model, {
  context: [
    "Tesla was founded in 2003 by Martin Eberhard and Marc Tarpenning in San Carlos, California.",
  ],
});

const result = await metric.measure(
  "Tell me about Tesla's founding.",
  "Tesla was founded in 2004 by Elon Musk in California.",
);

console.log(result.score); // Score from 0-1
console.log(result.info.reason); // Explanation of the score

// Example output:
// {
//   score: 0.67,
//   info: {
//     reason: "The score is 0.67 because two out of three statements from the context
//           (founding year and founders) were contradicted by the output, while the
//           location statement was not contradicted."
//   }
// }

----------------------------------------

TITLE: Creating and Storing Embeddings for RAG
DESCRIPTION: Generates embeddings for document chunks and stores them in the vector database for efficient retrieval in the RAG system.

LANGUAGE: typescript
CODE:
const { embeddings } = await embedMany({
  model: openai.embedding('text-embedding-3-small'),
  values: chunks.map(chunk => chunk.text),
});

const vectorStore = mastra.getVector("pgVector");
await vectorStore.createIndex({
  indexName: "embeddings",
  dimension: 1536,
});
await vectorStore.upsert({
  indexName: "embeddings",
  vectors: embeddings,
  metadata: chunks?.map((chunk: any) => ({ text: chunk.text })),
});

----------------------------------------

TITLE: Embedding Generation and Storage
DESCRIPTION: Generates embeddings for document chunks and stores them in PgVector database.

LANGUAGE: typescript
CODE:
const { embeddings } = await embedMany({
  values: chunks.map(chunk => chunk.text),
  model: openai.embedding("text-embedding-3-small"),
});

const vectorStore = mastra.getVector("pgVector");
await vectorStore.createIndex({
  indexName: "embeddings",
  dimension: 1536,
});
await vectorStore.upsert({
  indexName: "embeddings",
  vectors: embeddings,
  metadata: chunks?.map((chunk: any) => ({ text: chunk.text })),
});

----------------------------------------

TITLE: Transcribing Audio Input from File in TypeScript
DESCRIPTION: This code example shows how to read an audio file and transcribe its content using a Mastra agent. It handles potential errors during the transcription process.

LANGUAGE: typescript
CODE:
import { createReadStream } from "fs";
import path from "path";

// Read audio file and transcribe
const audioFilePath = path.join(process.cwd(), "/agent.m4a");
const audioStream = createReadStream(audioFilePath);

try {
  console.log("Transcribing audio file...");
  const transcription = await agent.listen(audioStream, { filetype: "m4a" });
  console.log("Transcription:", transcription);
} catch (error) {
  console.error("Error transcribing audio:", error);
}

----------------------------------------

TITLE: Generating and Inserting Embeddings into LibSQL using Mastra and OpenAI
DESCRIPTION: This code snippet shows how to create text chunks, generate embeddings using OpenAI, and store them in a LibSQL database using Mastra. It includes creating an index and upserting vectors with metadata.

LANGUAGE: tsx
CODE:
import { openai } from "@ai-sdk/openai";
import { LibSQLVector } from "@mastra/core/vector/libsql";
import { MDocument } from "@mastra/rag";
import { embedMany } from "ai";

const doc = MDocument.fromText("Your text content...");

const chunks = await doc.chunk();

const { embeddings } = await embedMany({
  values: chunks.map((chunk) => chunk.text),
  model: openai.embedding("text-embedding-3-small"),
});

const libsql = new LibSQLVector({
  connectionUrl: process.env.DATABASE_URL,
  authToken: process.env.DATABASE_AUTH_TOKEN, // Optional: for Turso cloud databases
});

await libsql.createIndex({
  indexName: "test_collection",
  dimension: 1536,
});

await libsql.upsert({
  indexName: "test_collection",
  vectors: embeddings,
  metadata: chunks?.map((chunk) => ({ text: chunk.text })),
});

----------------------------------------

TITLE: Creating an Agent in Mastra using TypeScript
DESCRIPTION: This snippet demonstrates how to create an agent in Mastra using the Agent class from @mastra/core. It includes setting up the agent's name, instructions, and model.

LANGUAGE: typescript
CODE:
import { Agent } from "@mastra/core/agent";
import { openai } from "@ai-sdk/openai";

export const myAgent = new Agent({
  name: "My Agent",
  instructions: "You are a helpful assistant.",
  model: openai("gpt-4o-mini"),
});

----------------------------------------

TITLE: Implementing Advanced Dynamic Workflow Factory in Mastra with TypeScript
DESCRIPTION: This snippet shows how to create a workflow factory that generates different workflows based on input parameters. It demonstrates creating simple and complex workflows dynamically and executing them based on the specified workflow type.

LANGUAGE: typescript
CODE:
const isMastra = (mastra: any): mastra is Mastra => {
  return mastra && typeof mastra === 'object' && mastra instanceof Mastra;
};

const workflowFactory = new Step({
  id: 'workflowFactory',
  inputSchema: z.object({
    workflowType: z.enum(['simple', 'complex']),
    inputData: z.string(),
  }),
  outputSchema: z.object({
    result: z.any(),
  }),
  execute: async ({ context, mastra }) => {
    if (!mastra) {
      throw new Error('Mastra instance not available');
    }

    if (!isMastra(mastra)) {
      throw new Error('Invalid Mastra instance');
    }

    // Create a new dynamic workflow based on the type
    const dynamicWorkflow = new Workflow({
      name: `dynamic-${context.workflowType}-workflow`,
      mastra,
      triggerSchema: z.object({
        input: z.string(),
      }),
    });

    if (context.workflowType === 'simple') {
      // Simple workflow with a single step
      const simpleStep = new Step({
        id: 'simpleStep',
        execute: async ({ context }) => {
          return {
            result: `Simple processing: ${context.triggerData.input}`,
          };
        },
      });

      dynamicWorkflow.step(simpleStep).commit();
    } else {
      // Complex workflow with multiple steps
      const step1 = new Step({
        id: 'step1',
        outputSchema: z.object({
          intermediateResult: z.string(),
        }),
        execute: async ({ context }) => {
          return {
            intermediateResult: `First processing: ${context.triggerData.input}`,
          };
        },
      });

      const step2 = new Step({
        id: 'step2',
        execute: async ({ context }) => {
          const intermediate = context.getStepResult(step1).intermediateResult;
          return {
            finalResult: `Second processing: ${intermediate}`,
          };
        },
      });

      dynamicWorkflow.step(step1).then(step2).commit();
    }

    // Execute the dynamic workflow
    const run = dynamicWorkflow.createRun();
    const result = await run.start({
      triggerData: {
        input: context.inputData,
      },
    });

    // Return the appropriate result based on workflow type
    if (context.workflowType === 'simple') {
      return {
        // @ts-ignore
        result: result.results['simpleStep']?.output,
      };
    } else {
      return {
        // @ts-ignore
        result: result.results['step2']?.output,
      };
    }
  },
});

----------------------------------------

TITLE: Creating a Graph RAG Tool in TypeScript
DESCRIPTION: This snippet demonstrates how to create a Graph RAG Tool using the createGraphRAGTool() function. It includes configuration for the vector store, embedding model, and graph options.

LANGUAGE: typescript
CODE:
import { openai } from "@ai-sdk/openai";
import { createGraphRAGTool } from "@mastra/rag";

const graphTool = createGraphRAGTool({
  vectorStoreName: "pinecone",
  indexName: "docs",
  model: openai.embedding('text-embedding-3-small'),
  graphOptions: {
    dimension: 1536,
    threshold: 0.7,
    randomWalkSteps: 100,
    restartProb: 0.15
  }
});

----------------------------------------

TITLE: Generating Embeddings with OpenAI in TypeScript
DESCRIPTION: This snippet demonstrates how to generate embeddings using OpenAI's text embedding model. It uses the embedMany function from the AI SDK to process multiple chunks simultaneously.

LANGUAGE: typescript
CODE:
import { openai } from "@ai-sdk/openai";
import { embedMany } from "ai";

const { embeddings } = await embedMany({
  model: openai.embedding('text-embedding-3-small'),
  values: chunks.map(chunk => chunk.text),
});

----------------------------------------

TITLE: Example Usage of embed() and embedMany() Functions in TypeScript
DESCRIPTION: This snippet provides a complete example of using both embed() and embedMany() functions. It demonstrates importing necessary modules, generating a single embedding, and generating multiple embeddings in one script.

LANGUAGE: typescript
CODE:
import { embed, embedMany } from 'ai';
import { openai } from '@ai-sdk/openai';

// Single embedding
const singleResult = await embed({
  model: openai.embedding('text-embedding-3-small'),
  value: "What is the meaning of life?",
});

// Multiple embeddings
const multipleResult = await embedMany({
  model: openai.embedding('text-embedding-3-small'),
  values: [
    "First question about life",
    "Second question about universe",
    "Third question about everything"
  ],
});

----------------------------------------

TITLE: Initializing MDocument Instances from Various Formats in TypeScript
DESCRIPTION: This snippet demonstrates how to create MDocument instances from different content formats including plain text, HTML, Markdown, and JSON.

LANGUAGE: typescript
CODE:
const docFromText = MDocument.fromText("Your plain text content...");
const docFromHTML = MDocument.fromHTML("<html>Your HTML content...</html>");
const docFromMarkdown = MDocument.fromMarkdown("# Your Markdown content...");
const docFromJSON = MDocument.fromJSON(`{ "key": "value" }`);

----------------------------------------

TITLE: Implementing Complex Branching Patterns in Mastra
DESCRIPTION: Shows advanced workflow branching patterns with multiple paths and merge points. Includes creation of alternative paths, partial merges, and final combination of all branches with proper type handling and result processing.

LANGUAGE: typescript
CODE:
const complexWorkflow = new Workflow({
  name: "complex-workflow",
  triggerSchema: z.object({
    inputValue: z.number(),
  }),
});

complexWorkflow
  .step(stepOne)

  .then(stepTwo)

  .after(stepOne)
  .step(stepThree)
  .then(stepFour)

  .after(stepOne)
  .step(new Step({
    id: "alternativePath",
    execute: async ({ context }) => {
      const stepOneResult = context.getStepResult<{ doubledValue: number }>("stepOne");
      return {
        result: (stepOneResult?.doubledValue || 0) * 3
      }
    }
  }))

  .after([stepTwo, stepFour])
  .step(new Step({
    id: "partialMerge",
    execute: async ({ context }) => {
      const stepTwoResult = context.getStepResult<{ isDivisibleByFive: boolean }>("stepTwo");
      const stepFourResult = context.getStepResult<{ isDivisibleByThree: boolean }>("stepFour");

      return {
        intermediateResult: "Processed first two branches",
        branchResults: {
          branch1: stepTwoResult?.isDivisibleByFive,
          branch2: stepFourResult?.isDivisibleByThree
        }
      }
    }
  }))

  .after(["partialMerge", "alternativePath"])
  .step(new Step({
    id: "finalMerge",
    execute: async ({ context }) => {
      const partialMergeResult = context.getStepResult<{
        intermediateResult: string,
        branchResults: { branch1: boolean, branch2: boolean }
      }>("partialMerge");

      const alternativePathResult = context.getStepResult<{ result: number }>("alternativePath");

      return {
        finalResult: "All branches processed",
        combinedData: {
          fromPartialMerge: partialMergeResult?.branchResults,
          fromAlternativePath: alternativePathResult?.result
        }
      }
    }
  }))
  .commit();

----------------------------------------

TITLE: GraphRAG Advanced Usage Example
DESCRIPTION: Advanced example demonstrating GraphRAG usage with custom parameters for stricter similarity threshold and modified query parameters.

LANGUAGE: typescript
CODE:
const graphRag = new GraphRAG({
  dimension: 1536,
  threshold: 0.8  // Stricter similarity threshold
});

// Create graph from chunks and embeddings
graphRag.createGraph(documentChunks, embeddings);

// Query with custom parameters
const results = await graphRag.query({
  query: queryEmbedding,
  topK: 5,
  randomWalkSteps: 200,
  restartProb: 0.2
});

----------------------------------------

TITLE: Registering Agent with Mastra in TypeScript
DESCRIPTION: This snippet demonstrates how to initialize Mastra with the created weather agent. It registers the agent, making it available for use within the Mastra framework.

LANGUAGE: typescript
CODE:
import { Mastra } from "@mastra/core";
import { weatherAgent } from "./agents/weatherAgent";

export const mastra = new Mastra({
  agents: { weatherAgent },
});

----------------------------------------

TITLE: Instantiating PgVector and Mastra for RAG System
DESCRIPTION: Creates instances of PgVector and Mastra with all components configured for the RAG system.

LANGUAGE: typescript
CODE:
const pgVector = new PgVector(process.env.POSTGRES_CONNECTION_STRING!);

export const mastra = new Mastra({
  agents: { ragAgent },
  vectors: { pgVector },
  workflows: { ragWorkflow },
});

----------------------------------------

TITLE: Retrieving Text from MDocument Chunks in TypeScript
DESCRIPTION: Instance method to get an array of text strings from the document chunks.

LANGUAGE: typescript
CODE:
getText(): string[]

----------------------------------------

TITLE: Embedding, Storing, and Querying Vector Data with Mastra and Pinecone in TypeScript
DESCRIPTION: This code snippet shows the complete process of creating text embeddings, storing them in a Pinecone vector database, and querying for similar content. It uses Mastra's MDocument for text chunking, OpenAI for embedding generation, and Pinecone for vector storage and retrieval.

LANGUAGE: tsx
CODE:
import { openai } from "@ai-sdk/openai";
import { PineconeVector } from "@mastra/pinecone";
import { MDocument } from "@mastra/rag";
import { embedMany } from "ai";

const doc = MDocument.fromText("Your text content...");

const chunks = await doc.chunk();

const { embeddings } = await embedMany({
  values: chunks.map(chunk => chunk.text),
  model: openai.embedding("text-embedding-3-small"),
});

const pinecone = new PineconeVector("your-api-key");

await pinecone.createIndex({
  indexName: "test_index",
  dimension: 1536,
});

await pinecone.upsert({
  indexName: "test_index",
  vectors: embeddings,
  metadata: chunks?.map((chunk: any) => ({ text: chunk.text })),
});

const topK = 10;

const results = await pinecone.query({
  indexName: "test_index",
  queryVector: embeddings[0],
  topK,
});

console.log(results);

----------------------------------------

TITLE: Using the Hierarchical Multi-Agent System in TypeScript
DESCRIPTION: This snippet demonstrates how to use the entire hierarchical multi-agent system. It retrieves the Publisher agent from the Mastra instance and generates a blog post about React JavaScript frameworks, returning the final edited copy.

LANGUAGE: typescript
CODE:
async function main() {
  const agent = mastra.getAgent("publisherAgent");
  const result = await agent.generate(
    "Write a blog post about React JavaScript frameworks. Only return the final edited copy.",
  );
  console.log(result.text);
}

main();

----------------------------------------

TITLE: Creating a Vector Query Tool with Reranking in TypeScript
DESCRIPTION: Demonstrates how to create a vector query tool with reranking capabilities. It specifies the reranker model, weights for different scoring components, and the number of top results to return.

LANGUAGE: typescript
CODE:
const queryTool = createVectorQueryTool({
  vectorStoreName: "milvus",
  indexName: "documentation",
  model: openai.embedding('text-embedding-3-small'),
  reranker: {
    model: openai('gpt-4o-mini'),
    options: {
      weights: {
        semantic: 0.5,  // Semantic relevance weight
        vector: 0.3,    // Vector similarity weight
        position: 0.2   // Original position weight
      },
      topK: 5
    }
  }
});

----------------------------------------

TITLE: Basic Workflow Watch Implementation in TypeScript
DESCRIPTION: Demonstrates how to create a workflow, subscribe to state changes using watch(), start the workflow, and cleanup the subscription. Shows the basic pattern for monitoring workflow execution.

LANGUAGE: typescript
CODE:
import { Workflow } from "@mastra/core/workflows";

const workflow = new Workflow({
  name: "document-processor"
});

const run = workflow.createRun();

// Subscribe to state changes
const unsubscribe = run.watch((state) => {
  console.log('Current step:', state.currentStep);
  console.log('Step outputs:', state.stepOutputs);
});

// Run the workflow
await run.start({
  input: { text: "Process this document" }
});

// Stop watching
unsubscribe();

----------------------------------------

TITLE: Creating and Using a Custom Tool in Mastra Workflow
DESCRIPTION: Creates a custom web crawling tool using Mastra's createTool API and integrates it into a workflow. The tool fetches content from a URL and returns the raw text. Uses Zod for input/output schema validation and demonstrates workflow execution with the custom tool.

LANGUAGE: typescript
CODE:
import { createTool } from '@mastra/core/tools';
import { Workflow } from '@mastra/core/workflows';
import { z } from 'zod';

const crawlWebpage = createTool({
  id: 'Crawl Webpage',
  description: 'Crawls a webpage and extracts the text content',
  inputSchema: z.object({
    url: z.string().url(),
  }),
  outputSchema: z.object({
    rawText: z.string(),
  }),
  execute: async ({ context }) => {
    const response = await fetch(context.triggerData.url);
    const text = await response.text();
    return { rawText: 'This is the text content of the webpage: ' + text };
  },
});

const contentWorkflow = new Workflow({ name: 'content-review' });

contentWorkflow.step(crawlWebpage).commit();

const { start } = contentWorkflow.createRun();

const res = await start({ triggerData: { url: 'https://example.com'} });

console.log(res.results);

----------------------------------------

TITLE: Initializing Memory Class in Mastra (TypeScript)
DESCRIPTION: Demonstrates the basic usage of the Memory class with an Agent in Mastra. This snippet shows how to create a new Memory instance and pass it to an Agent constructor.

LANGUAGE: typescript
CODE:
import { Memory } from "@mastra/memory";
import { Agent } from "@mastra/core/agent";

const agent = new Agent({
  memory: new Memory(),
  ...otherOptions,
});

----------------------------------------

TITLE: Creating Vector Query Tool Configuration
DESCRIPTION: Configures a vector query tool for searching embeddings using OpenAI's text-embedding-3-small model.

LANGUAGE: typescript
CODE:
const vectorQueryTool = createVectorQueryTool({
  vectorStoreName: 'pgVector',
  indexName: 'embeddings',
  model: openai.embedding('text-embedding-3-small'),
});

----------------------------------------

TITLE: Using TurbopufferVector in TypeScript
DESCRIPTION: Demonstrates how to initialize and use the TurbopufferVector class for creating an index, adding vectors, and querying vectors. It includes examples of creating a new index, upserting vectors with metadata, and querying vectors with filters.

LANGUAGE: typescript
CODE:
import { TurbopufferVector } from '@mastra/turbopuffer';

const vectorStore = new TurbopufferVector({
  apiKey: 'your-api-key',
  baseUrl: 'https://gcp-us-central1.turbopuffer.com',
});

// Create a new index
await vectorStore.createIndex({ indexName: 'my-index', dimension: 1536, metric: 'cosine' });

// Add vectors
const vectors = [[0.1, 0.2, ...], [0.3, 0.4, ...]];
const metadata = [{ text: 'doc1' }, { text: 'doc2' }];
const ids = await vectorStore.upsert({ indexName: 'my-index', vectors, metadata });

// Query vectors
const results = await vectorStore.query({
  indexName: 'my-index',
  queryVector: [0.1, 0.2, ...],
  topK: 10,
  filter: { text: { $eq: 'doc1' } },
  includeVector: false,
);

----------------------------------------

TITLE: Defining a Chef Assistant Agent in TypeScript
DESCRIPTION: Creates a new Chef Assistant agent using Mastra and OpenAI. The agent is configured with a name, instructions, and a specific GPT model.

LANGUAGE: typescript
CODE:
import { openai } from "@ai-sdk/openai";
import { Agent } from "@mastra/core/agent";

export const chefAgent = new Agent({
  name: "chef-agent",
  instructions:
    "You are Michel, a practical and experienced home chef" +
    "You help people cook with whatever ingredients they have available.",
  model: openai("gpt-4o-mini"),
});

----------------------------------------

TITLE: Implementing Basic Mastra Workflow in TypeScript
DESCRIPTION: Demonstrates creating a workflow that doubles a numeric input value. Uses Zod for schema validation, defines a workflow with a single step, and shows how to execute the workflow with sample input data.

LANGUAGE: typescript
CODE:
import { Step, Workflow } from "@mastra/core/workflows";
import { z } from "zod";

const myWorkflow = new Workflow({
  name: "my-workflow",
  triggerSchema: z.object({
    input: z.number(),
  }),
});

const stepOne = new Step({
  id: "stepOne",
  inputSchema: z.object({
    value: z.number(),
  }),
  outputSchema: z.object({
    doubledValue: z.number(),
  }),
  execute: async ({ context }) => {
    const doubledValue = context?.triggerData?.input * 2;
    return { doubledValue };
  },
});

myWorkflow.step(stepOne).commit();

const { runId, start } = myWorkflow.createRun();

const res = await start({
  triggerData: { input: 90 },
});

console.log(res.results);

----------------------------------------

TITLE: Adding Weather Tool to an Agent in TypeScript
DESCRIPTION: This code snippet shows how to create an agent that uses the weather information tool. It defines the agent's name, instructions, model, and configures it to use the weatherInfo tool.

LANGUAGE: typescript
CODE:
import { Agent } from "@mastra/core/agent";
import { openai } from "@ai-sdk/openai";
import * as tools from "../tools/weatherInfo";

export const weatherAgent = new Agent<typeof tools>({
  name: "Weather Agent",
  instructions:
    "You are a helpful assistant that provides current weather information. When asked about the weather, use the weather information tool to fetch the data.",
  model: openai("gpt-4o-mini"),
  tools: {
    weatherInfo: tools.weatherInfo,
  },
});

----------------------------------------

TITLE: Performing hybrid vector search with metadata filter
DESCRIPTION: Demonstrates how to create an embedding for a query, then use PgVector to perform a vector search with a metadata filter. It queries the 'embeddings' index for the top 3 results matching the embedding and filter criteria.

LANGUAGE: typescript
CODE:
// Create embedding for the query
const { embedding } = await embed({
  model: openai.embedding('text-embedding-3-small'),
  value: '[Insert query based on document here]',
});

// Query with metadata filter
const result = await pgVector.query({
  indexName: 'embeddings',
  queryVector: embedding,
  topK: 3,
  filter: {
    'path.to.metadata': {
      $eq: 'value',
    },
  },
});

console.log('Results:', result);

----------------------------------------

TITLE: Configuring Mastra Server Middleware
DESCRIPTION: Example of configuring custom middleware in a Mastra application including authentication and logging. Shows how to set up multiple middleware handlers with optional path patterns.

LANGUAGE: typescript
CODE:
import { Mastra } from '@mastra/core';

export const mastra = new Mastra({
  // Other configuration options
  serverMiddleware: [
    {
      handler: async (c, next) => {
        // Example: Add authentication check
        const authHeader = c.req.header('Authorization');
        if (!authHeader) {
          return new Response('Unauthorized', { status: 401 });
        }
        
        // Continue to the next middleware or route handler
        await next();
      },
      path: '/api/*', // Optional: defaults to '/api/*' if not specified
    },
    {
      handler: async (c, next) => {
        // Example: Add request logging
        console.log(`${c.req.method} ${c.req.url}`);
        await next();
      },
      // This middleware will apply to all routes since no path is specified
    }
  ]
});

----------------------------------------

TITLE: Setting Environment Variables for Mastra RAG System
DESCRIPTION: Environment configuration for OpenAI API key and PostgreSQL connection string required for the RAG system.

LANGUAGE: bash
CODE:
OPENAI_API_KEY=your_openai_api_key_here
POSTGRES_CONNECTION_STRING=your_connection_string_here

----------------------------------------

TITLE: Initializing Mastra Agent with Single Voice Provider in TypeScript
DESCRIPTION: This snippet demonstrates how to create a Mastra agent with voice capabilities using a single provider (OpenAI) for both speaking and listening. It includes initialization of the voice provider, agent creation, and examples of using speak and listen methods.

LANGUAGE: typescript
CODE:
import { createReadStream } from "fs";
import path from "path";
import { Agent } from "@mastra/core/agent";
import { OpenAIVoice } from "@mastra/voice-openai";
import { openai } from "@ai-sdk/openai";

// Initialize the voice provider with default settings
const voice = new OpenAIVoice();

// Create an agent with voice capabilities
export const agent = new Agent({
  name: "Agent",
  instructions: `You are a helpful assistant with both STT and TTS capabilities.`,
  model: openai("gpt-4o"),
  voice,
});

// The agent can now use voice for interaction
await agent.speak("Hello, I'm your AI assistant!");

// Read audio file and transcribe
const audioFilePath = path.join(process.cwd(), "/audio.m4a");
const audioStream = createReadStream(audioFilePath);

try {
  const transcription = await agent.listen(audioStream, { filetype: "m4a" });
} catch (error) {
  console.error("Error transcribing audio:", error);
}

----------------------------------------

TITLE: Setting Environment Variables for Mastra RAG System
DESCRIPTION: Environment configuration for OpenAI API key and PostgreSQL connection string required for the RAG system.

LANGUAGE: bash
CODE:
OPENAI_API_KEY=your_openai_api_key_here
POSTGRES_CONNECTION_STRING=your_connection_string_here

----------------------------------------

TITLE: Configuring Retry Mechanism in Mastra Client SDK (TypeScript)
DESCRIPTION: This snippet shows how to configure the automatic retry mechanism with exponential backoff for the Mastra Client. It demonstrates setting the number of retry attempts, initial backoff time, and maximum backoff time.

LANGUAGE: typescript
CODE:
const client = new MastraClient({
  baseUrl: "http://localhost:4111",
  retries: 3, // Number of retry attempts
  backoffMs: 300, // Initial backoff time
  maxBackoffMs: 5000, // Maximum backoff time
});

----------------------------------------

TITLE: Implementing Weather-Based Activity Planning Workflow in TypeScript with Mastra
DESCRIPTION: This code snippet demonstrates the creation of an AI workflow that fetches weather data and uses it to suggest activities. It utilizes Mastra's Agent, Step, and Workflow classes to structure the application. The workflow includes steps for fetching weather data from an API and using an AI agent to plan activities based on the forecast.

LANGUAGE: typescript
CODE:
import { Mastra } from "@mastra/core";
import { Agent } from "@mastra/core/agent";
import { Step, Workflow } from "@mastra/core/workflows";
import { z } from "zod";
import { openai } from "@ai-sdk/openai";

const agent = new Agent({
  name: 'Weather Agent',
  instructions: `
        You are a local activities and travel expert who excels at weather-based planning. Analyze the weather data and provide practical activity recommendations.
        For each day in the forecast, structure your response exactly as follows:
        📅 [Day, Month Date, Year]
        ═══════════════════════════
        🌡️ WEATHER SUMMARY
        • Conditions: [brief description]
        • Temperature: [X°C/Y°F to A°C/B°F]
        • Precipitation: [X% chance]
        🌅 MORNING ACTIVITIES
        Outdoor:
        • [Activity Name] - [Brief description including specific location/route]
          Best timing: [specific time range]
          Note: [relevant weather consideration]
        🌞 AFTERNOON ACTIVITIES
        Outdoor:
        • [Activity Name] - [Brief description including specific location/route]
          Best timing: [specific time range]
          Note: [relevant weather consideration]
        🏠 INDOOR ALTERNATIVES
        • [Activity Name] - [Brief description including specific venue]
          Ideal for: [weather condition that would trigger this alternative]
        ⚠️ SPECIAL CONSIDERATIONS
        • [Any relevant weather warnings, UV index, wind conditions, etc.]
        Guidelines:
        - Suggest 2-3 time-specific outdoor activities per day
        - Include 1-2 indoor backup options
        - For precipitation >50%, lead with indoor activities
        - All activities must be specific to the location
        - Include specific venues, trails, or locations
        - Consider activity intensity based on temperature
        - Keep descriptions concise but informative
        Maintain this exact formatting for consistency, using the emoji and section headers as shown.
      `,
  model: openai('gpt-4o-mini'),
});

const fetchWeather = new Step({
  id: "fetch-weather",
  description: "Fetches weather forecast for a given city",
  inputSchema: z.object({
    city: z.string().describe("The city to get the weather for"),
  }),
  execute: async ({ context }) => {
    const triggerData = context?.getStepResult<{
      city: string;
    }>("trigger");

    if (!triggerData) {
      throw new Error("Trigger data not found");
    }

    const geocodingUrl = `https://geocoding-api.open-meteo.com/v1/search?name=${encodeURIComponent(triggerData.city)}&count=1`;
    const geocodingResponse = await fetch(geocodingUrl);
    const geocodingData = await geocodingResponse.json();

    if (!geocodingData.results?.[0]) {
      throw new Error(`Location '${triggerData.city}' not found`);
    }

    const { latitude, longitude, name } = geocodingData.results[0];

    const weatherUrl = `https://api.open-meteo.com/v1/forecast?latitude=${latitude}&longitude=${longitude}&daily=temperature_2m_max,temperature_2m_min,precipitation_probability_mean,weathercode&timezone=auto`;
    const response = await fetch(weatherUrl);
    const data = await response.json();

    const forecast = data.daily.time.map((date: string, index: number) => ({
      date,
      maxTemp: data.daily.temperature_2m_max[index],
      minTemp: data.daily.temperature_2m_min[index],
      precipitationChance: data.daily.precipitation_probability_mean[index],
      condition: getWeatherCondition(data.daily.weathercode[index]),
      location: name,
    }));

    return forecast;
  },
});

const forecastSchema = z.array(
  z.object({
    date: z.string(),
    maxTemp: z.number(),
    minTemp: z.number(),
    precipitationChance: z.number(),
    condition: z.string(),
    location: z.string(),
  }),
);

const planActivities = new Step({
  id: "plan-activities",
  description: "Suggests activities based on weather conditions",
  inputSchema: forecastSchema,
  execute: async ({ context, mastra }) => {
    const forecast =
      context?.getStepResult<z.infer<typeof forecastSchema>>(
        "fetch-weather",
      );

    if (!forecast) {
      throw new Error("Forecast data not found");
    }

    const prompt = `Based on the following weather forecast for ${forecast[0].location}, suggest appropriate activities:
      ${JSON.stringify(forecast, null, 2)}
      `;

    const response = await agent.stream([
      {
        role: "user",
        content: prompt,
      },
    ]);

    let activitiesText = '';
    
    for await (const chunk of response.textStream) {
      process.stdout.write(chunk);
      activitiesText += chunk;
    }

    return {
      activities: activitiesText,
    };
  },
});

function getWeatherCondition(code: number): string {
  const conditions: Record<number, string> = {
    0: "Clear sky",
    1: "Mainly clear",
    2: "Partly cloudy",
    3: "Overcast",
    45: "Foggy",
    48: "Depositing rime fog",
    51: "Light drizzle",
    53: "Moderate drizzle",
    55: "Dense drizzle",
    61: "Slight rain",
    63: "Moderate rain",
    65: "Heavy rain",
    71: "Slight snow fall",
    73: "Moderate snow fall",
    75: "Heavy snow fall",
    95: "Thunderstorm",
  };
  return conditions[code] || "Unknown";
}

const weatherWorkflow = new Workflow({
  name: "weather-workflow",
  triggerSchema: z.object({
    city: z.string().describe("The city to get the weather for"),
  }),
})
  .step(fetchWeather)
  .then(planActivities);

weatherWorkflow.commit();

const mastra = new Mastra({
  workflows: {
    weatherWorkflow,
  },
});

async function main() {
  const { start } = mastra.getWorkflow("weatherWorkflow").createRun();

  const result = await start({
    triggerData: {
      city: "London",
    },
  });

  console.log("\n \n");
  console.log(result);
}

main();

----------------------------------------

TITLE: Listing All Vector Indexes in Mastra (TypeScript)
DESCRIPTION: Retrieve a list of all available vector indexes in the Mastra system.

LANGUAGE: typescript
CODE:
const indexes = await vector.getIndexes();

----------------------------------------

TITLE: Basic Retrieval using Semantic Search in TypeScript
DESCRIPTION: Demonstrates how to perform basic retrieval using semantic search. It converts a query to an embedding, then queries a vector store to find semantically similar chunks.

LANGUAGE: typescript
CODE:
import { openai } from "@ai-sdk/openai";
import { embed } from "ai";
import { PgVector } from "@mastra/pg";

// Convert query to embedding
const { embedding } = await embed({
  value: "What are the main points in the article?",
  model: openai.embedding('text-embedding-3-small'),
});

// Query vector store
const pgVector = new PgVector(process.env.POSTGRES_CONNECTION_STRING);
const results = await pgVector.query({
  indexName: "embeddings",
  queryVector: embedding,
  topK: 10,
});

----------------------------------------

TITLE: Mastra Agent Configuration
DESCRIPTION: Setting up a Mastra agent with specific instructions and tools for handling RAG responses.

LANGUAGE: typescript
CODE:
import { openai } from "@ai-sdk/openai";

export const ragAgent = new Agent({
  name: "RAG Agent",
  instructions:
    "You are a helpful assistant that answers questions based on the provided context. Keep your answers concise and relevant.",
  model: openai("gpt-4o-mini"),
  tools: {
    vectorQueryTool,
  },
});

----------------------------------------

TITLE: Implementing Custom Deployer in TypeScript
DESCRIPTION: Demonstrates how to create a custom deployer by extending the abstract Deployer class. It shows the basic structure including constructor initialization and implementation of the abstract deploy method.

LANGUAGE: typescript
CODE:
import { Deployer } from "@mastra/deployer";

// Create a custom deployer by extending the abstract Deployer class
class CustomDeployer extends Deployer {
  constructor() {
    super({ name: 'custom-deployer' });
  }

  // Implement the abstract deploy method
  async deploy(outputDirectory: string): Promise<void> {
    // Prepare the output directory
    await this.prepare(outputDirectory);
    
    // Bundle the application
    await this._bundle('server.ts', 'mastra.ts', outputDirectory);
    
    // Custom deployment logic
    // ...
  }
}

----------------------------------------

TITLE: Advanced Graph RAG Tool Configuration in TypeScript
DESCRIPTION: This example shows an advanced configuration of the Graph RAG Tool with customized graph options, including higher similarity threshold, more exploration steps, and higher restart probability.

LANGUAGE: typescript
CODE:
const graphTool = createGraphRAGTool({
  vectorStoreName: "pinecone",
  indexName: "docs",
  model: openai.embedding('text-embedding-3-small'),
  graphOptions: {
    dimension: 1536,
    threshold: 0.8,        // Higher similarity threshold
    randomWalkSteps: 200,  // More exploration steps
    restartProb: 0.2      // Higher restart probability
  }
});

----------------------------------------

TITLE: Example Results from Basic Retrieval in TypeScript
DESCRIPTION: Shows the structure of results returned from a basic retrieval query, including text content, similarity score, and metadata.

LANGUAGE: typescript
CODE:
[
  {
    text: "Climate change poses significant challenges...",
    score: 0.89,
    metadata: { source: "article1.txt" }
  },
  {
    text: "Rising temperatures affect crop yields...",
    score: 0.82,
    metadata: { source: "article1.txt" }
  }
  // ... more results
]

----------------------------------------

TITLE: Advanced Mastra Client Configuration
DESCRIPTION: Complete configuration example showing all available options including retries, backoff settings, and custom headers.

LANGUAGE: typescript
CODE:
const client = new MastraClient({
  // Required
  baseUrl: "http://localhost:4111",

  // Optional
  retries: 3, // Number of retry attempts (default: 3)
  backoffMs: 300, // Initial backoff time in ms (default: 300)
  maxBackoffMs: 5000, // Maximum backoff time in ms (default: 5000)
  headers: {
    // Custom headers to include in all requests
    "Custom-Header": "value",
  },
});

----------------------------------------

TITLE: Configuring Mastra Agent for Query Understanding
DESCRIPTION: Sets up a Mastra agent with instructions for understanding user queries and translating them into metadata filters.

LANGUAGE: typescript
CODE:
export const ragAgent = new Agent({
  name: 'RAG Agent',
  model: openai('gpt-4o-mini'),
  instructions: `
  You are a helpful assistant that answers questions based on the provided context. Keep your answers concise and relevant.

  Filter the context by searching the metadata.
  
  The metadata is structured as follows:

  {
    text: string,
    excerptKeywords: string,
    nested: {
      keywords: string[],
      id: number,
    },
  }

  ${PGVECTOR_PROMPT}
  `,
  tools: { vectorQueryTool },
});

----------------------------------------

TITLE: Implementing Candidate Info Gathering Step in Mastra AI Recruiter Workflow
DESCRIPTION: This code defines a step that extracts candidate details from resume text using an LLM. It parses the resume and returns structured data including name, technical status, specialty, and the original text.

LANGUAGE: typescript
CODE:
import { Agent } from '@mastra/core/agent';
import { openai } from "@ai-sdk/openai";

const recruiter = new Agent({
  name: "Recruiter Agent",
  instructions: `You are a recruiter.`,
  model: openai("gpt-4o-mini"),
})

const gatherCandidateInfo = new Step({
  id: "gatherCandidateInfo",
  inputSchema: z.object({
    resumeText: z.string(),
  }),
  outputSchema: z.object({
    candidateName: z.string(),
    isTechnical: z.boolean(),
    specialty: z.string(),
    resumeText: z.string(),
  }),
  execute: async ({ context }) => {
    const resumeText = context?.getStepResult<{
      resumeText: string;
    }>("trigger")?.resumeText;

    const prompt = `
          Extract details from the resume text:
          "${resumeText}"
        `;

    const res = await recruiter.generate(prompt, {
      output: z.object({
        candidateName: z.string(),
        isTechnical: z.boolean(),
        specialty: z.string(),
        resumeText: z.string(),
      }),
    });

    return res.object;
  },
});

----------------------------------------

TITLE: Implementing User Registration Workflow in TypeScript with Mastra
DESCRIPTION: A complete implementation of a user registration workflow using Mastra and Zod for type safety. The workflow includes three steps: input validation, data formatting, and profile creation, with clear data mapping between steps using workflow variables.

LANGUAGE: typescript
CODE:
import { Step, Workflow } from "@mastra/core/workflows";
import { z } from "zod";

// Define our schemas for better type safety
const userInputSchema = z.object({
  email: z.string().email(),
  name: z.string(),
  age: z.number().min(18),
});

const validatedDataSchema = z.object({
  isValid: z.boolean(),
  validatedData: z.object({
    email: z.string(),
    name: z.string(),
    age: z.number(),
  }),
});

const formattedDataSchema = z.object({
  userId: z.string(),
  formattedData: z.object({
    email: z.string(),
    displayName: z.string(),
    ageGroup: z.string(),
  }),
});

const profileSchema = z.object({
  profile: z.object({
    id: z.string(),
    email: z.string(),
    displayName: z.string(),
    ageGroup: z.string(),
    createdAt: z.string(),
  }),
});

// Define the workflow
const registrationWorkflow = new Workflow({
  name: "user-registration",
  triggerSchema: userInputSchema,
});

// Step 1: Validate user input
const validateInput = new Step({
  id: "validateInput",
  inputSchema: userInputSchema,
  outputSchema: validatedDataSchema,
  execute: async ({ context }) => {
    const { email, name, age } = context;

    // Simple validation logic
    const isValid = email.includes('@') && name.length > 0 && age >= 18;

    return {
      isValid,
      validatedData: {
        email: email.toLowerCase().trim(),
        name,
        age,
      },
    };
  },
});

// Step 2: Format user data
const formatUserData = new Step({
  id: "formatUserData",
  inputSchema: z.object({
    validatedData: z.object({
      email: z.string(),
      name: z.string(),
      age: z.number(),
    }),
  }),
  outputSchema: formattedDataSchema,
  execute: async ({ context }) => {
    const { validatedData } = context;

    // Generate a simple user ID
    const userId = `user_${Math.floor(Math.random() * 10000)}`;

    // Format the data
    const ageGroup = validatedData.age < 30 ? "young-adult" : "adult";

    return {
      userId,
      formattedData: {
        email: validatedData.email,
        displayName: validatedData.name,
        ageGroup,
      },
    };
  },
});

// Step 3: Create user profile
const createUserProfile = new Step({
  id: "createUserProfile",
  inputSchema: z.object({
    userId: z.string(),
    formattedData: z.object({
      email: z.string(),
      displayName: z.string(),
      ageGroup: z.string(),
    }),
  }),
  outputSchema: profileSchema,
  execute: async ({ context }) => {
    const { userId, formattedData } = context;

    // In a real app, you would save to a database here

    return {
      profile: {
        id: userId,
        ...formattedData,
        createdAt: new Date().toISOString(),
      },
    };
  },
});

// Build the workflow with variable mappings
registrationWorkflow
  // First step gets data from the trigger
  .step(validateInput, {
    variables: {
      email: { step: 'trigger', path: 'email' },
      name: { step: 'trigger', path: 'name' },
      age: { step: 'trigger', path: 'age' },
    }
  })
  // Format user data with validated data from previous step
  .then(formatUserData, {
    variables: {
      validatedData: { step: validateInput, path: 'validatedData' },
    },
    when: {
      ref: { step: validateInput, path: 'isValid' },
      query: { $eq: true },
    },
  })
  // Create profile with data from the format step
  .then(createUserProfile, {
    variables: {
      userId: { step: formatUserData, path: 'userId' },
      formattedData: { step: formatUserData, path: 'formattedData' },
    },
  })
  .commit();

export default registrationWorkflow;

----------------------------------------

TITLE: Generating Multiple Embeddings with AI SDK in TypeScript
DESCRIPTION: This snippet shows how to use the embedMany() function to generate vector embeddings for multiple text inputs simultaneously. It specifies the embedding model, an array of input texts, and optional parameters like maxRetries.

LANGUAGE: typescript
CODE:
import { embedMany } from 'ai';

const result = await embedMany({
  model: openai.embedding('text-embedding-3-small'),
  values: ["First text", "Second text", "Third text"],
  maxRetries: 2  // optional, defaults to 2
});

----------------------------------------

TITLE: Implementing Basic Dynamic Workflow in Mastra with TypeScript
DESCRIPTION: This snippet demonstrates how to create a dynamic workflow within a step's execute function. It includes type checking for the Mastra instance, creating a new workflow, defining steps, and executing the dynamic workflow.

LANGUAGE: typescript
CODE:
import { Mastra, Step, Workflow } from '@mastra/core';
import { z } from 'zod';

const isMastra = (mastra: any): mastra is Mastra => {
  return mastra && typeof mastra === 'object' && mastra instanceof Mastra;
};

// Step that creates and runs a dynamic workflow
const createDynamicWorkflow = new Step({
  id: 'createDynamicWorkflow',
  outputSchema: z.object({
    dynamicWorkflowResult: z.any(),
  }),
  execute: async ({ context, mastra }) => {
    if (!mastra) {
      throw new Error('Mastra instance not available');
    }

    if (!isMastra(mastra)) {
      throw new Error('Invalid Mastra instance');
    }

    const inputData = context.triggerData.inputData;

    // Create a new dynamic workflow
    const dynamicWorkflow = new Workflow({
      name: 'dynamic-workflow',
      mastra, // Pass the mastra instance to the new workflow
      triggerSchema: z.object({
        dynamicInput: z.string(),
      }),
    });

    // Define steps for the dynamic workflow
    const dynamicStep = new Step({
      id: 'dynamicStep',
      execute: async ({ context }) => {
        const dynamicInput = context.triggerData.dynamicInput;
        return {
          processedValue: `Processed: ${dynamicInput}`,
        };
      },
    });

    // Build and commit the dynamic workflow
    dynamicWorkflow.step(dynamicStep).commit();

    // Create a run and execute the dynamic workflow
    const run = dynamicWorkflow.createRun();
    const result = await run.start({
      triggerData: {
        dynamicInput: inputData,
      },
    });

    let dynamicWorkflowResult;

    if (result.results['dynamicStep']?.status === 'success') {
      dynamicWorkflowResult = result.results['dynamicStep']?.output.processedValue;
    } else {
      throw new Error('Dynamic workflow failed');
    }

    // Return the result from the dynamic workflow
    return {
      dynamicWorkflowResult,
    };
  },
});

// Main workflow that uses the dynamic workflow creator
const mainWorkflow = new Workflow({
  name: 'main-workflow',
  triggerSchema: z.object({
    inputData: z.string(),
  }),
  mastra: new Mastra(),
});

mainWorkflow.step(createDynamicWorkflow).commit();


const run = mainWorkflow.createRun();
const result = await run.start({
  triggerData: {
    inputData: 'test',
  },
});

----------------------------------------

TITLE: Branching and Merging Paths in Mastra Workflows
DESCRIPTION: Illustrates how to create branching paths and later merge them in a Mastra workflow for handling different outcomes.

LANGUAGE: typescript
CODE:
myWorkflow
  .step(stepA)
    .then(stepB)
    .then(stepD)
  .after(stepA)
    .step(stepC)
    .then(stepE)
  .after([stepD, stepE])
    .step(stepF);

----------------------------------------

TITLE: Querying Messages with Mastra Memory Module in TypeScript
DESCRIPTION: Demonstrates various ways to use the query function from the Mastra memory module. It shows how to retrieve the last 50 messages, get messages with context around specific messages, and perform semantic search in messages.

LANGUAGE: typescript
CODE:
import { Memory } from "@mastra/memory";

const memory = new Memory({
  /* config */
});

// Get last 50 messages
const { messages, uiMessages } = await memory.query({
  threadId: "thread-123",
  selectBy: {
    last: 50,
  },
});

// Get messages with context around specific messages
const { messages: contextMessages } = await memory.query({
  threadId: "thread-123",
  selectBy: {
    include: [
      {
        id: "msg-123", // Get just this message (no context)
      },
      {
        id: "msg-456", // Get this message with custom context
        withPreviousMessages: 3, // 3 messages before
        withNextMessages: 1, // 1 message after
      },
    ],
  },
});

// Semantic search in messages
const { messages } = await memory.query({
  threadId: "thread-123",
  selectBy: {
    vectorSearchString: "What was discussed about deployment?",
  },
  threadConfig: {
    historySearch: true,
  },
});

----------------------------------------

TITLE: Defining Index Schema Configuration in TypeScript
DESCRIPTION: This snippet demonstrates how to define explicit schemas for different indexes using the schemaConfigForIndex option. It shows an example configuration for a memory messages index with specific dimensions and filterable fields.

LANGUAGE: typescript
CODE:
schemaConfigForIndex: (indexName: string) => {
  // Mastra's default embedding model and index for memory messages:
  if (indexName === "memory_messages_384") {
    return {
      dimensions: 384,
      schema: {
        thread_id: {
          type: "string",
          filterable: true,
        },
      },
    };
  } else {
    throw new Error(`TODO: add schema for index: ${indexName}`);
  }
};

----------------------------------------

TITLE: Using PineconeVector in TypeScript
DESCRIPTION: Demonstrates how to use the PineconeVector class to create an index, add vectors, and query vectors. It includes creating a new instance, creating an index, upserting vectors with metadata, and querying vectors with optional filters.

LANGUAGE: typescript
CODE:
import { PineconeVector } from '@mastra/pinecone';

const vectorStore = new PineconeVector(
  'your-api-key',
  'optional-environment-url'
);

// Create a new index
await vectorStore.createIndex({ indexName: 'my-index', dimension: 1536, metric: 'cosine' });

// Add vectors
const vectors = [[0.1, 0.2, ...], [0.3, 0.4, ...]];
const metadata = [{ text: 'doc1' }, { text: 'doc2' }];
const ids = await vectorStore.upsert({ indexName: 'my-index', vectors, metadata });

// Query vectors
const results = await vectorStore.query({
  indexName: 'my-index',
  queryVector: [0.1, 0.2, ...],
  topK: 10, // topK
  filter: { text: { $eq: 'doc1' } }, // optional filter
  includeVector: false, // includeValues
});

----------------------------------------

TITLE: Evaluating low precision context usage
DESCRIPTION: This snippet demonstrates how to evaluate a response where most of the context information is irrelevant, resulting in low precision.

LANGUAGE: typescript
CODE:
const context3 = [
  'The Nile River is in Africa.',
  'The Nile is the longest river.',
  'Ancient Egyptians used the Nile.',
  'The Nile flows north.',
];

const metric3 = new ContextPrecisionMetric(openai('gpt-4o-mini'), {
  context: context3,
});

const query3 = 'Which direction does the Nile River flow?';
const response3 = 'The Nile River flows northward.';

console.log('Example 3 - Low Precision:');
console.log('Context:', context3);
console.log('Query:', query3);
console.log('Response:', response3);

const result3 = await metric3.measure(query3, response3);
console.log('Metric Result:', {
  score: result3.score,
  reason: result3.info.reason,
});
// Example Output:
// Metric Result: { score: 0.2, reason: 'The context only has one relevant piece, which is at the end.' }

----------------------------------------

TITLE: Error Handling with Mastra Class in TypeScript
DESCRIPTION: Shows how to handle errors thrown by Mastra class methods using try-catch blocks and type checking. This example demonstrates error handling when attempting to retrieve a non-existent tool.

LANGUAGE: typescript
CODE:
try {
  const tool = mastra.getTool("nonexistentTool");
} catch (error) {
  if (error instanceof Error) {
    console.log(error.message); // "Tool with name nonexistentTool not found"
  }
}

----------------------------------------

TITLE: Configuring ContentSimilarityMetric Options in TypeScript
DESCRIPTION: Shows how to create ContentSimilarityMetric instances with different configuration options, including case-sensitive comparison and strict whitespace handling. It demonstrates the impact of these options on similarity scores.

LANGUAGE: typescript
CODE:
import { ContentSimilarityMetric } from "@mastra/evals/nlp";

// Case-sensitive comparison
const caseSensitiveMetric = new ContentSimilarityMetric({
  ignoreCase: false,
  ignoreWhitespace: true
});

const result1 = await caseSensitiveMetric.measure(
  "Hello World",
  "hello world"
); // Lower score due to case difference

// Example output:
// {
//   score: 0.75,
//   info: { similarity: 0.75 }
// }

// Strict whitespace comparison
const strictWhitespaceMetric = new ContentSimilarityMetric({
  ignoreCase: true,
  ignoreWhitespace: false
});

const result2 = await strictWhitespaceMetric.measure(
  "Hello   World",
  "Hello World"
); // Lower score due to whitespace difference

// Example output:
// {
//   score: 0.85,
//   info: { similarity: 0.85 }
// }

----------------------------------------

TITLE: Configuring Working Memory for Agents in TypeScript
DESCRIPTION: This snippet demonstrates how to configure an agent with working memory, enabling persistent information storage across conversations.

LANGUAGE: typescript
CODE:
import { openai } from "@ai-sdk/openai";

const agent = new Agent({
  name: "Customer Service",
  instructions:
    "You are a helpful customer service agent. Remember customer preferences and past interactions.",
  model: openai("gpt-4o-mini"),

  memory: new Memory({
    options: {
      workingMemory: {
        enabled: true, // enables working memory
      },
      lastMessages: 5, // Only keep recent context
    },
  }),
});

----------------------------------------

TITLE: Initializing and Using PromptAlignmentMetric in TypeScript
DESCRIPTION: Demonstrates how to import, configure, and use the PromptAlignmentMetric class to evaluate LLM output alignment with given instructions.

LANGUAGE: typescript
CODE:
import { openai } from "@ai-sdk/openai";
import { PromptAlignmentMetric } from "@mastra/evals/llm";

// Configure the model for evaluation
const model = openai("gpt-4o-mini");

const instructions = [
  "Start sentences with capital letters",
  "End each sentence with a period",
  "Use present tense",
];

const metric = new PromptAlignmentMetric(model, {
  instructions,
  scale: 1,
});

const result = await metric.measure(
  "describe the weather",
  "The sun is shining. Clouds float in the sky. A gentle breeze blows.",
);

console.log(result.score); // Alignment score from 0-1
console.log(result.info.reason); // Explanation of the score

----------------------------------------

TITLE: Importing Dependencies for Mastra RAG Implementation
DESCRIPTION: Imports required packages for OpenAI integration, vector storage, and RAG functionality.

LANGUAGE: typescript
CODE:
import { openai } from '@ai-sdk/openai';
import { PgVector } from '@mastra/pg';
import { MDocument, rerank } from '@mastra/rag';
import { embedMany, embed } from 'ai';

----------------------------------------

TITLE: Configuring Memory for Different Use Cases in TypeScript
DESCRIPTION: This snippet shows how to adjust memory settings based on different agent needs, such as customer support with minimal context and project management with extensive context.

LANGUAGE: typescript
CODE:
// Customer support agent with minimal context
await agent.stream("What are your store hours?", {
  threadId,
  resourceId,
  memoryOptions: {
    lastMessages: 5, // Quick responses need minimal conversation history
    semanticRecall: false, // no need to search through earlier messages
  },
});

// Project management agent with extensive context
await agent.stream("Update me on the project status", {
  threadId,
  resourceId,
  memoryOptions: {
    lastMessages: 50, // Maintain longer conversation history across project discussions
    semanticRecall: {
      topK: 5, // Find more relevant project details
      messageRange: 3, // Number of messages before and after each result
    },
  },
});

----------------------------------------

TITLE: Importing Dependencies for Mastra RAG Implementation
DESCRIPTION: Imports required packages for OpenAI integration, vector storage, and RAG functionality.

LANGUAGE: typescript
CODE:
import { openai } from '@ai-sdk/openai';
import { PgVector } from '@mastra/pg';
import { MDocument, rerank } from '@mastra/rag';
import { embedMany, embed } from 'ai';

----------------------------------------

TITLE: Saving Messages to Memory in Mastra using TypeScript
DESCRIPTION: This snippet demonstrates how to save messages to memory using the Mastra client. It accepts an array of message objects with properties like role, content, ID, thread ID, creation date, and type.

LANGUAGE: typescript
CODE:
const savedMessages = await client.saveMessageToMemory({
  messages: [
    {
      role: "user",
      content: "Hello!",
      id: "1",
      threadId: "thread-1",
      createdAt: new Date(),
      type: "text",
    },
  ],
});

----------------------------------------

TITLE: Extracting Metadata from MDocument in TypeScript
DESCRIPTION: Instance method to extract metadata using specified extractors. Requires ExtractParams for configuration.

LANGUAGE: typescript
CODE:
async extractMetadata(params: ExtractParams): Promise<MDocument>

----------------------------------------

TITLE: Initializing Memory with LibSQL Defaults in Typescript
DESCRIPTION: This snippet shows how to initialize memory with LibSQL as the default storage and vector database. It creates a memory-enabled agent using the default configuration.

LANGUAGE: typescript
CODE:
import { Memory } from '@mastra/memory';
import { Agent } from '@mastra/core/agent';

// Initialize memory with LibSQL defaults
const memory = new Memory();

const memoryAgent = new Agent({
  name: "Memory Agent",
  instructions:
    "You are an AI agent with the ability to automatically recall memories from previous interactions.",
  model: openai('gpt-4o-mini'),
  memory,
});

----------------------------------------

TITLE: Configuring RAG Workflow Steps in Mastra
DESCRIPTION: Connects all the defined steps in the RAG workflow and commits the workflow configuration.

LANGUAGE: typescript
CODE:
ragWorkflow
  .step(analyzeContext)
  .then(breakdownThoughts)
  .then(connectPieces)
  .then(drawConclusions)
  .then(finalAnswer);

ragWorkflow.commit();

----------------------------------------

TITLE: Implementing Bird Categorization with Mastra AI Agent in TypeScript
DESCRIPTION: This code snippet fetches a random image from Unsplash, uses a Mastra AI Agent to analyze it, and determines if it's a bird, including species identification and location description. It utilizes the Anthropic Claude model and Zod for type validation.

LANGUAGE: typescript
CODE:
import { anthropic } from "@ai-sdk/anthropic";
import { Agent } from "@mastra/core/agent";
import { z } from "zod";

export type Image = {
  alt_description: string;
  urls: {
    regular: string;
    raw: string;
  };
  user: {
    first_name: string;
    links: {
      html: string;
    };
  };
};

export type ImageResponse<T, K> =
  | {
      ok: true;
      data: T;
    }
  | {
      ok: false;
      error: K;
    };

const getRandomImage = async ({
  query,
}: {
  query: string;
}): Promise<ImageResponse<Image, string>> => {
  const page = Math.floor(Math.random() * 20);
  const order_by = Math.random() < 0.5 ? "relevant" : "latest";
  try {
    const res = await fetch(
      `https://api.unsplash.com/search/photos?query=${query}&page=${page}&order_by=${order_by}`,
      {
        method: "GET",
        headers: {
          Authorization: `Client-ID ${process.env.UNSPLASH_ACCESS_KEY}`,
          "Accept-Version": "v1",
        },
        cache: "no-store",
      },
    );

    if (!res.ok) {
      return {
        ok: false,
        error: "Failed to fetch image",
      };
    }

    const data = (await res.json()) as {
      results: Array<Image>;
    };
    const randomNo = Math.floor(Math.random() * data.results.length);

    return {
      ok: true,
      data: data.results[randomNo] as Image,
    };
  } catch (err) {
    return {
      ok: false,
      error: "Error fetching image",
    };
  }
};

const instructions = `
  You can view an image and figure out if it is a bird or not. 
  You can also figure out the species of the bird and where the picture was taken.
`;

export const birdCheckerAgent = new Agent({
  name: "Bird checker",
  instructions,
  model: anthropic("claude-3-haiku-20240307"),
});

const queries: string[] = ["wildlife", "feathers", "flying", "birds"];
const randomQuery = queries[Math.floor(Math.random() * queries.length)];

// Get the image url from Unsplash with random type
const imageResponse = await getRandomImage({ query: randomQuery });

if (!imageResponse.ok) {
  console.log("Error fetching image", imageResponse.error);
  process.exit(1);
}

console.log("Image URL: ", imageResponse.data.urls.regular);
const response = await birdCheckerAgent.generate(
  [
    {
      role: "user",
      content: [
        {
          type: "image",
          image: new URL(imageResponse.data.urls.regular),
        },
        {
          type: "text",
          text: "view this image and let me know if it's a bird or not, and the scientific name of the bird without any explanation. Also summarize the location for this picture in one or two short sentences understandable by a high school student",
        },
      ],
    },
  ],
  {
    output: z.object({
      bird: z.boolean(),
      species: z.string(),
      location: z.string(),
    }),
  },
);

console.log(response.object);

----------------------------------------

TITLE: Configuring ContextRelevancyMetric with Custom Options in TypeScript
DESCRIPTION: This example shows how to create a ContextRelevancyMetric instance with custom configuration options, including a custom scale and specific context. It demonstrates setting up the metric and measuring context relevancy with these custom parameters.

LANGUAGE: typescript
CODE:
import { openai } from "@ai-sdk/openai";
import { ContextRelevancyMetric } from "@mastra/evals/llm";

// Configure the model for evaluation
const model = openai("gpt-4o-mini");

const metric = new ContextRelevancyMetric(model, {
  scale: 100, // Use 0-100 scale instead of 0-1
  context: [
    "Basic plan costs $10/month",
    "Pro plan includes advanced features at $30/month",
    "Enterprise plan has custom pricing",
    "Our company was founded in 2020",
    "We have offices worldwide"
  ]
});

const result = await metric.measure(
  "What are our pricing plans?",
  "We offer Basic, Pro, and Enterprise plans.",
);

// Example output:
// {
//   score: 60,
//   info: {
//     reason: "3 out of 5 statements are relevant to pricing plans. The statements about 
//           company founding and office locations are not relevant to the pricing query."
//   }
// }

----------------------------------------

TITLE: Configuring Vector Search in TypeScript
DESCRIPTION: This snippet demonstrates how to set up vector search capabilities in the Mastra memory system, including configuring a vector store and embedding options.

LANGUAGE: typescript
CODE:
import { PgVector } from "@mastra/pg";

const vector = new PgVector(connectionString);

const memory = new Memory({ vector });

const memory = new Memory({
  vector,
  embedder: openai.embedding("text-embedding-3-small"),
});

const memory = new Memory({
  vector,
  embedder,

  options: {
    semanticRecall: {
      topK: 3, // Number of similar messages to find
      messageRange: 2, // Context around each result
    },
  },
});

----------------------------------------

TITLE: Configuring LibSQL Storage in TypeScript
DESCRIPTION: Example showing how to initialize LibSQL storage with both development (file-based) and production (persistent) configurations. Demonstrates the setup of the LibSQLStore with different connection URLs.

LANGUAGE: typescript
CODE:
import { LibSQLStore } from "@mastra/core/storage/libsql";

// File database (development)
const storage = new LibSQLStore({
    config: {
        url: 'file:storage.db',
    }
});

// Persistent database (production)
const storage = new LibSQLStore({
    config: {
        url: process.env.DATABASE_URL,
    }
});

----------------------------------------

TITLE: Implementing Simple Path Comparison for Step Condition in Mastra Workflow (TypeScript)
DESCRIPTION: Illustrates the use of simple path comparison to define a condition. It directly checks if the 'auth.status' is 'authenticated'.

LANGUAGE: typescript
CODE:
workflow.step(processOrder, {
  when: {
    "auth.status": "authenticated"
  }
});

----------------------------------------

TITLE: Configuring LibSQL Storage in TypeScript
DESCRIPTION: This code demonstrates how to configure LibSQL as a storage backend for the Mastra memory system.

LANGUAGE: typescript
CODE:
import { LibSQLStore } from "@mastra/core/storage/libsql";

const storage = new LibSQLStore({
  config: {
    url: "file:example.db",
  },
});

----------------------------------------

TITLE: Basic Usage of SummarizationMetric in TypeScript
DESCRIPTION: Demonstrates how to initialize and use the SummarizationMetric class to evaluate a simple text summary. Shows basic model configuration and metric measurement.

LANGUAGE: typescript
CODE:
import { openai } from "@ai-sdk/openai";
import { SummarizationMetric } from "@mastra/evals/llm";

// Configure the model for evaluation
const model = openai("gpt-4o-mini");

const metric = new SummarizationMetric(model);

const result = await metric.measure(
  "The company was founded in 1995 by John Smith. It started with 10 employees and grew to 500 by 2020. The company is based in Seattle.",
  "Founded in 1995 by John Smith, the company grew from 10 to 500 employees by 2020.",
);

console.log(result.score); // Score from 0-1
console.log(result.info); // Object containing detailed metrics about the summary

----------------------------------------

TITLE: Retrieving Memory Threads in Mastra using TypeScript
DESCRIPTION: This snippet demonstrates how to retrieve all memory threads for a specific resource using the Mastra client. It requires a client instance and a resource ID.

LANGUAGE: typescript
CODE:
const threads = await client.getMemoryThreads({
  resourceid: "resource-1",
});

----------------------------------------

TITLE: Configuring Mastra Agent for RAG
DESCRIPTION: Configures a Mastra agent with specific instructions and tools for the RAG system, using the GPT-4o-mini model.

LANGUAGE: typescript
CODE:
export const ragAgent = new Agent({
  name: "RAG Agent",
  instructions: `You are a helpful assistant that answers questions based on the provided context.`,
  model: openai("gpt-4o-mini"),
  tools: {
    vectorQueryTool,
  },
});

----------------------------------------

TITLE: Retrieving Filtered Traces with TypeScript
DESCRIPTION: Demonstrates how to fetch telemetry traces using the client API with optional filtering parameters. Supports filtering by trace name, scope, pagination, and custom attributes.

LANGUAGE: typescript
CODE:
const telemetry = await client.getTelemetry({
  name: "trace-name", // Optional: Filter by trace name
  scope: "scope-name", // Optional: Filter by scope
  page: 1, // Optional: Page number for pagination
  perPage: 10, // Optional: Number of items per page
  attribute: {
    // Optional: Filter by custom attributes
    key: "value",
  },
});

----------------------------------------

TITLE: Evaluating mixed hallucination scenario with Mastra in TypeScript
DESCRIPTION: This example shows how to evaluate a response that contradicts some facts in the context. It sets up a new context, creates a metric instance, and measures the hallucination score for a partially incorrect response.

LANGUAGE: typescript
CODE:
const context2 = [
  'The first Star Wars movie was released in 1977.',
  'It was directed by George Lucas.',
  'The film earned $775 million worldwide.',
  'The movie was filmed in Tunisia and England.',
];

const metric2 = new HallucinationMetric(openai('gpt-4o-mini'), {
  context: context2,
});

const query2 = 'Tell me about the first Star Wars movie.';
const response2 = 'The first Star Wars movie came out in 1977 and was directed by George Lucas. It made over $1 billion at the box office and was filmed entirely in California.';

console.log('Example 2 - Mixed Hallucination:');
console.log('Context:', context2);
console.log('Query:', query2);
console.log('Response:', response2);

const result2 = await metric2.measure(query2, response2);
console.log('Metric Result:', {
  score: result2.score,
  reason: result2.info.reason,
});
// Example Output:
// Metric Result: { score: 0.5, reason: 'The response contradicts some facts in the context.' }

----------------------------------------

TITLE: Implementing Vector Store Operations in TypeScript
DESCRIPTION: Demonstrates initialization of AstraVector client and common operations including creating an index, upserting vectors, and querying vectors with similarity search. Shows configuration with authentication tokens and endpoints.

LANGUAGE: typescript
CODE:
import { AstraVector } from '@mastra/astra';

const vectorStore = new AstraVector({
  token: 'your-astra-token',
  endpoint: 'your-astra-endpoint',
  keyspace: 'your-keyspace' // optional
});

// Create a new collection
await vectorStore.createIndex({ indexName: 'my-collection', dimension: 1536, metric: 'cosine' });

// Add vectors
const vectors = [[0.1, 0.2, ...], [0.3, 0.4, ...]];
const metadata = [{ text: 'doc1' }, { text: 'doc2' }];
const ids = await vectorStore.upsert({ indexName: 'my-collection', vectors, metadata });

// Query vectors
const results = await vectorStore.query({
  indexName: 'my-collection',
  queryVector: [0.1, 0.2, ...],
  topK: 10, // topK
  filter: { text: { $eq: 'doc1' } }, // optional filter
  includeVector: false // includeVectors
});

----------------------------------------

TITLE: Evaluating high recall response with Contextual Recall metric
DESCRIPTION: Demonstrates how to evaluate a response that includes all context information using the Contextual Recall metric. It sets up the context, creates the metric instance, and measures the recall score.

LANGUAGE: typescript
CODE:
const context1 = [
  'Product features include cloud sync.',
  'Offline mode is available.',
  'Supports multiple devices.',
];

const metric1 = new ContextualRecallMetric(openai('gpt-4o-mini'), {
  context: context1,
});

const query1 = 'What are the key features of the product?';
const response1 = 'The product features cloud synchronization, offline mode support, and the ability to work across multiple devices.';

console.log('Example 1 - High Recall:');
console.log('Context:', context1);
console.log('Query:', query1);
console.log('Response:', response1);

const result1 = await metric1.measure(query1, response1);
console.log('Metric Result:', {
  score: result1.score,
  reason: result1.info.reason,
});
// Example Output:
// Metric Result: { score: 1, reason: 'All elements of the output are supported by the context.' }

----------------------------------------

TITLE: Creating Inline Workflow Steps in TypeScript with Mastra
DESCRIPTION: Demonstrates how to create and chain workflow steps inline using the Mastra framework. The workflow accepts a numeric input, doubles it in the first step, and increments the result in the second step. Uses Zod for schema validation and includes error handling.

LANGUAGE: typescript
CODE:
import { Step, Workflow } from "@mastra/core/workflows";
import { z } from "zod";

export const myWorkflow = new Workflow({
  name: "my-workflow",
  triggerSchema: z.object({
    inputValue: z.number(),
  }),
});

myWorkflow
  .step(
    new Step({
      id: "stepOne",
      outputSchema: z.object({
        doubledValue: z.number(),
      }),
      execute: async ({ context }) => ({
        doubledValue: context.triggerData.inputValue * 2,
      }),
    }),
  )
  .then(
    new Step({
      id: "stepTwo",
      outputSchema: z.object({
        incrementedValue: z.number(),
      }),
      execute: async ({ context }) => {
        if (context.steps.stepOne.status !== "success") {
          return { incrementedValue: 0 };
        }

        return { incrementedValue: context.steps.stepOne.output.doubledValue + 1 };
      },
    }),
  ).commit();

----------------------------------------

TITLE: Initializing Memory with Default Storage in TypeScript
DESCRIPTION: Basic setup example showing how to initialize Memory which automatically uses DefaultStorage when no custom storage is provided. Demonstrates configuration of memory options including message limit and semantic recall.

LANGUAGE: typescript
CODE:
import { Memory } from '@mastra/memory';

const memory = new Memory({
  options: {
    lastMessages: 10,
    semanticRecall: true,
  },
});

----------------------------------------

TITLE: CORS Middleware Implementation
DESCRIPTION: Implementation of CORS middleware that adds necessary headers and handles preflight requests.

LANGUAGE: typescript
CODE:
{
  handler: async (c, next) => {
    // Add CORS headers
    c.header('Access-Control-Allow-Origin', '*');
    c.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
    c.header('Access-Control-Allow-Headers', 'Content-Type, Authorization');
    
    // Handle preflight requests
    if (c.req.method === 'OPTIONS') {
      return new Response(null, { status: 204 });
    }
    
    await next();
  }
}

----------------------------------------

TITLE: Type-Safe Variable Mapping in Mastra Workflow
DESCRIPTION: Demonstrates how to use TypeScript for type-safe variable mappings in a Mastra workflow. It defines schemas for better type safety and shows how to use typed contexts in steps.

LANGUAGE: typescript
CODE:
import { Step, Workflow } from "@mastra/core/workflows";
import { z } from "zod";

// Define schemas for better type safety
const triggerSchema = z.object({
  inputValue: z.string(),
});

type TriggerType = z.infer<typeof triggerSchema>;

// Step with typed context
const step1 = new Step({
  id: "step1",
  outputSchema: z.object({
    nested: z.object({
      value: z.string(),
    }),
  }),
  execute: async ({ context }) => {
    // TypeScript knows the shape of triggerData
    const triggerData = context.getStepResult<TriggerType>('trigger');

    return {
      nested: {
        value: `processed-${triggerData?.inputValue}`
      }
    };
  },
});

// Create the workflow with the schema
const workflow = new Workflow({
  name: "type-safe-workflow",
  triggerSchema,
});

workflow.step(step1).commit();

----------------------------------------

TITLE: Basic Workflow Execution in TypeScript
DESCRIPTION: Demonstrates how to create and execute a basic workflow with trigger data schema validation using zod.

LANGUAGE: typescript
CODE:
const workflow = new Workflow({
  name: "my-workflow",
  triggerSchema: z.object({
    inputValue: z.number()
  })
});

workflow.step(stepOne).then(stepTwo).commit();

const result = await workflow.execute({
  triggerData: { inputValue: 42 }
});

----------------------------------------

TITLE: Configuring Parallel Step Execution in Mastra Workflow
DESCRIPTION: Demonstrates how to chain steps in parallel execution paths and start the workflow. Uses the .then() method for sequential chaining and .step() method for parallel paths.

LANGUAGE: typescript
CODE:
myWorkflow
  .step(stepOne)
    .then(stepTwo) // chain one
  .step(stepThree)
    .then(stepFour) // chain two
  .commit();

const { start } = myWorkflow.createRun();

const result = await start({ triggerData: { inputValue: 3 } });

----------------------------------------

TITLE: Handling VectorStoreError in TypeScript
DESCRIPTION: This snippet demonstrates error handling for the UpstashVector store, specifically catching and processing VectorStoreError instances. It shows how to access the error code and additional details.

LANGUAGE: typescript
CODE:
try {
  await store.query({
    indexName: "index_name",
    queryVector: queryVector,
  });
} catch (error) {
  if (error instanceof VectorStoreError) {
    console.log(error.code); // 'connection_failed' | 'invalid_dimension' | etc
    console.log(error.details); // Additional error context
  }
}

----------------------------------------

TITLE: Evaluating Minimal Keyword Coverage in TypeScript
DESCRIPTION: This snippet illustrates the use of KeywordCoverageMetric to evaluate a response with limited keyword matching. It shows how the metric handles cases where only a few keywords from the input are present in the output.

LANGUAGE: typescript
CODE:
const input3 = 'Machine learning models require data preprocessing, feature engineering, and hyperparameter tuning';
const output3 = 'Data preparation is important for models';

console.log('Example 3 - Minimal Coverage:');
console.log('Input:', input3);
console.log('Output:', output3);

const result3 = await metric.measure(input3, output3);
console.log('Metric Result:', {
  score: result3.score,
  info: {
    totalKeywords: result3.info.totalKeywords,
    matchedKeywords: result3.info.matchedKeywords,
  },
});
// Example Output:
// Metric Result: { score: 0.2, info: { totalKeywords: 10, matchedKeywords: 2 } }

----------------------------------------

TITLE: Complex Dependency Patterns in Mastra Workflows
DESCRIPTION: Shows how to create complex dependency patterns by combining multiple .after([]) calls in a Mastra workflow.

LANGUAGE: typescript
CODE:
myWorkflow
  .step(stepA)
  .then(stepB)
  .then(stepC)

  .step(stepD)
  .then(stepE)

  .step(stepF)
  .then(stepG)

  .after([stepC, stepE, stepG])
  .step(finalStep)

----------------------------------------

TITLE: Configuring ExtractParams for Document Chunking and Metadata Extraction in TypeScript
DESCRIPTION: This snippet demonstrates how to use ExtractParams to configure automatic metadata extraction from document chunks using LLM analysis. It shows setting up custom fields for extraction and specifying an optional model.

LANGUAGE: typescript
CODE:
const doc = new Document(text);
const chunks = await doc.chunk({
  extract: {
    fields: [
      { 
        name: 'summary', 
        description: 'A 1-2 sentence summary of the main points' 
      },
      { 
        name: 'entities', 
        description: 'List of companies, people, and locations mentioned' 
      },
      {
        name: 'custom_field',
        description: 'Any other metadata you want to extract, guided by this description'
      }
    ],
    model: 'gpt-4o-mini' // Optional: specify a different model
  }
});

----------------------------------------

TITLE: Advanced FaithfulnessMetric Example with Mixed Claims
DESCRIPTION: Shows a more complex example of using FaithfulnessMetric to evaluate responses containing multiple claim types, including verifiable facts and speculative statements.

LANGUAGE: typescript
CODE:
import { openai } from "@ai-sdk/openai";
import { FaithfulnessMetric } from "@mastra/evals/llm";

// Configure the model for evaluation
const model = openai("gpt-4o-mini");

const metric = new FaithfulnessMetric(model, {
  context: [
    "The company had 100 employees in 2020.",
    "Current employee count is approximately 500.",
  ],
});

// Example with mixed claim types
const result = await metric.measure(
  "What's the company's growth like?",
  "The company has grown from 100 employees in 2020 to 500 now, and might expand to 1000 by next year.",
);

----------------------------------------

TITLE: Initializing Memory System with Upstash Storage
DESCRIPTION: Demonstrates the setup of a memory system using Upstash for both storage and vector search capabilities. Includes initialization of an AI agent with memory integration using OpenAI's GPT-4 model.

LANGUAGE: typescript
CODE:
import { Memory } from "@mastra/memory";
import { UpstashStore, UpstashVector } from "@mastra/upstash";
import { Agent } from "@mastra/core/agent";
import { openai } from "@ai-sdk/openai";

// Initialize memory with Upstash storage and vector search
const memory = new Memory({
  storage: new UpstashStore({
    url: process.env.UPSTASH_REDIS_REST_URL,
    token: process.env.UPSTASH_REDIS_REST_TOKEN,
  }),
  vector: new UpstashVector({
    url: process.env.UPSTASH_REDIS_REST_URL,
    token: process.env.UPSTASH_REDIS_REST_TOKEN,
  }),
  options: {
    lastMessages: 10,
    semanticRecall: {
      topK: 3,
      messageRange: 2,
    },
  },
});

// Create an agent with memory capabilities
const chefAgent = new Agent({
  name: "chefAgent",
  instructions:
    "You are Michel, a practical and experienced home chef who helps people cook great meals with whatever ingredients they have available.",
  model: openai("gpt-4o-mini"),
  memory,
});

----------------------------------------

TITLE: Configuring Mastra Storage with LibSQL
DESCRIPTION: Example showing how to initialize Mastra with a default LibSQL storage configuration. Sets up local file-based storage using the DefaultStorage provider.

LANGUAGE: typescript
CODE:
import { Mastra } from '@mastra/core/mastra';
import { DefaultStorage } from '@mastra/core/storage/libsql';

const mastra = new Mastra({
  storage: new DefaultStorage({
    config: {
      url: "file:storage.db",
    }
  }),
});

----------------------------------------

TITLE: Example Usage of RAG System in Mastra
DESCRIPTION: Demonstrates how to use the implemented RAG system by querying it with a sample question and logging the results.

LANGUAGE: typescript
CODE:
const query = "What are the main benefits of telemedicine?";
console.log("\nQuery:", query);
const result = await generateResponse(query);
console.log("\nThought Process:");
console.log(result.results);

----------------------------------------

TITLE: Creating Separate Workflow Steps in TypeScript with Mastra
DESCRIPTION: Shows how to define workflow steps as separate entities and then combine them into a workflow. The steps perform the same operations as the inline version but with improved code organization and reusability.

LANGUAGE: typescript
CODE:
import { Step, Workflow } from "@mastra/core/workflows";
import { z } from "zod";

// Define steps separately
const stepOne = new Step({
  id: "stepOne",
  outputSchema: z.object({
    doubledValue: z.number(),
  }),
  execute: async ({ context }) => ({
    doubledValue: context.triggerData.inputValue * 2,
  }),
});

const stepTwo = new Step({
  id: "stepTwo",
  outputSchema: z.object({
    incrementedValue: z.number(),
  }),
  execute: async ({ context }) => {
    if (context.steps.stepOne.status !== "success") {
      return { incrementedValue: 0 };
    }
    return { incrementedValue: context.steps.stepOne.output.doubledValue + 1 };
  },
});

// Build the workflow
const myWorkflow = new Workflow({
  name: "my-workflow",
  triggerSchema: z.object({
    inputValue: z.number(),
  }),
});

myWorkflow.step(stepOne).then(stepTwo);
myWorkflow.commit();

----------------------------------------

TITLE: Implementing Traceloop in Mastra Configuration
DESCRIPTION: Demonstrates how to configure Mastra instance with OpenTelemetry integration enabled and OTLP export type for Traceloop compatibility.

LANGUAGE: typescript
CODE:
import { Mastra } from "@mastra/core";

export const mastra = new Mastra({
  // ... other config
  telemetry: {
    serviceName: "your-service-name",
    enabled: true,
    export: {
      type: "otlp",
    },
  },
});

----------------------------------------

TITLE: Handle Workflow Execution Results
DESCRIPTION: Demonstrates how to handle workflow execution results including run ID, step results, and execution status.

LANGUAGE: typescript
CODE:
const { runId, results, status } = await workflow.execute({
  triggerData: { inputValue: 42 }
});

if (status === "COMPLETED") {
  console.log("Step results:", results);
}

----------------------------------------

TITLE: Starting a Workflow Run with Mastra in TypeScript
DESCRIPTION: Demonstrates how to create and start a workflow run using the `start()` function. It includes passing trigger data and handling the returned result.

LANGUAGE: typescript
CODE:
const { runId, start } = workflow.createRun();
const result = await start({ 
  triggerData: { inputValue: 42 } 
});

----------------------------------------

TITLE: Managing Workflow Snapshots in Mastra Storage
DESCRIPTION: Demonstrates how to persist and load workflow snapshots, including state management and context data. Shows structure of workflow snapshots with run IDs and timestamps.

LANGUAGE: typescript
CODE:
// Save workflow state
await storage.persistWorkflowSnapshot({
  workflowName: 'my-workflow',
  runId: 'run-123',
  snapshot: {
    value: { currentState: 'running' },
    context: {
      stepResults: {},
      attempts: {},
      triggerData: {},
    },
    activePaths: [],
    runId: 'run-123',
    timestamp: Date.now(),
  },
});

// Load workflow state
const snapshot = await storage.loadWorkflowSnapshot({
  workflowName: 'my-workflow',
  runId: 'run-123',
});

----------------------------------------

TITLE: Retrieving Threads by Resource ID in TypeScript
DESCRIPTION: Demonstrates how to use the Memory class to fetch threads associated with a specific resource ID. The function returns a promise that resolves to an array of StorageThreadType objects.

LANGUAGE: typescript
CODE:
import { Memory } from "@mastra/core/memory";

const memory = new Memory(config);

const threads = await memory.getThreadsByResourceId({
  resourceId: "resource-123",
});

----------------------------------------

TITLE: Evaluating Partial Relevancy Response in TypeScript
DESCRIPTION: Shows evaluation of a partially relevant response to a query about healthy breakfast using the Answer Relevancy metric.

LANGUAGE: typescript
CODE:
const query2 = 'What should a healthy breakfast include?';
const response2 =
  'A nutritious breakfast should include whole grains and protein. However, the timing of your breakfast is just as important - studies show eating within 2 hours of waking optimizes metabolism and energy levels throughout the day.';

console.log('Example 2 - Partial Relevancy:');
console.log('Query:', query2);
console.log('Response:', response2);

const result2 = await metric.measure(query2, response2);
console.log('Metric Result:', {
  score: result2.score,
  reason: result2.info.reason,
});
// Example Output:
// Metric Result: { score: 0.7, reason: 'The response is partially relevant to the query. It provides some information about healthy breakfast choices but misses the timing aspect.' }

----------------------------------------

TITLE: Configuring Mastra Client in TypeScript
DESCRIPTION: Example of how to configure the Mastra Client with various options including base URL, retry attempts, backoff times, and custom headers.

LANGUAGE: typescript
CODE:
const client = new MastraClient({
    baseUrl: string;           // Base URL for the Mastra API
    retries?: number;          // Number of retry attempts (default: 3)
    backoffMs?: number;        // Initial backoff time in ms (default: 300)
    maxBackoffMs?: number;     // Maximum backoff time in ms (default: 5000)
    headers?: Record<string, string>; // Custom headers
});

----------------------------------------

TITLE: Analyzing Tone Stability in TypeScript
DESCRIPTION: Evaluate sentiment consistency within a single text using the ToneConsistencyMetric.

LANGUAGE: typescript
CODE:
const input2 = 'Great service! Friendly staff. Perfect atmosphere.';
const output2 = ''; // Empty string for stability analysis

console.log('Example 2 - Tone Stability:');
console.log('Input:', input2);
console.log('Output:', output2);

const result2 = await metric.measure(input2, output2);
console.log('Metric Result:', {
  score: result2.score,
  info: result2.info,
});
// Example Output:
// Metric Result: {
//   score: 0.9444444444444444,
//   info: {
//     avgSentiment: 1.3333333333333333,
//     sentimentVariance: 0.05555555555555556
//   }
// }

----------------------------------------

TITLE: Creating a Step Instance in TypeScript
DESCRIPTION: Demonstrates how to create a new Step instance with input/output schema validation using Zod and an async execution function. The example shows processing an order with type-safe input and output handling.

LANGUAGE: typescript
CODE:
const processOrder = new Step({
  id: "processOrder",
  inputSchema: z.object({
    orderId: z.string(),
    userId: z.string()
  }),
  outputSchema: z.object({
    status: z.string(),
    orderId: z.string()
  }),
  execute: async ({ context, runId }) => {
    return {
      status: "processed",
      orderId: context.orderId
    };
  }
});

----------------------------------------

TITLE: Executing the AI Recruiter Workflow in Mastra
DESCRIPTION: This snippet demonstrates how to execute the defined workflow. It creates a new Mastra instance with the candidateWorkflow, initiates a run with simulated resume content, and logs the final output.

LANGUAGE: typescript
CODE:
const mastra = new Mastra({
  workflows: {
    candidateWorkflow,
  },
});

(async () => {
  const { runId, start } = mastra.getWorkflow("candidateWorkflow").createRun();

  console.log("Run", runId);

  const runResult = await start({
    triggerData: { resumeText: "Simulated resume content..." },
  });

  console.log("Final output:", runResult.results);
})();

----------------------------------------

TITLE: Initializing CloudflareDeployer with Mastra
DESCRIPTION: Example showing how to initialize and configure the CloudflareDeployer with Mastra core. Demonstrates setting up account credentials, routes, and project configuration.

LANGUAGE: typescript
CODE:
import { Mastra } from '@mastra/core';
import { CloudflareDeployer } from '@mastra/deployer-cloudflare';

const mastra = new Mastra({
  deployer: new CloudflareDeployer({
    scope: 'your-account-id',
    projectName: 'your-project-name',
    routes: [
      {
        pattern: 'example.com/*',
        zone_name: 'example.com',
        custom_domain: true,
      },
    ],
    workerNamespace: 'your-namespace',
    auth: {
      apiToken: 'your-api-token',
      apiEmail: 'your-email',
    },
  }),
  // ... other Mastra configuration options
});

----------------------------------------

TITLE: Implementing Server Actions with Mastra
DESCRIPTION: Server-side actions implementation for weather information using Mastra agent

LANGUAGE: typescript
CODE:
'use server'

import { mastra } from '@/mastra'

export async function getWeatherInfo(city: string) {
  const agent = mastra.getAgent('weatherAgent')
  
  const result = await agent.generate(`What's the weather like in ${city}?`)

  return result
}

----------------------------------------

TITLE: Basic Usage of createDocumentChunkerTool in TypeScript
DESCRIPTION: Demonstrates how to import and use the createDocumentChunkerTool function to split a document into chunks. It shows the creation of an MDocument instance and the configuration of chunking parameters.

LANGUAGE: typescript
CODE:
import { createDocumentChunkerTool, MDocument } from "@mastra/rag";

const document = new MDocument({
  text: "Your document content here...",
  metadata: { source: "user-manual" }
});

const chunker = createDocumentChunkerTool({
  doc: document,
  params: {
    strategy: "recursive",
    size: 512,
    overlap: 50,
    separator: "\n"
  }
});

const { chunks } = await chunker.execute();

----------------------------------------

TITLE: Initializing and Using ElevenLabs Voice in TypeScript
DESCRIPTION: Demonstrates how to initialize the ElevenLabsVoice class with default and custom configurations, perform text-to-speech conversion, and retrieve available speakers. This snippet showcases the core functionality of the ElevenLabs voice implementation in Mastra.

LANGUAGE: typescript
CODE:
import { ElevenLabsVoice } from "@mastra/voice-elevenlabs";

// Initialize with default configuration (uses ELEVENLABS_API_KEY environment variable)
const voice = new ElevenLabsVoice();

// Initialize with custom configuration
const voice = new ElevenLabsVoice({
  speechModel: {
    name: 'eleven_multilingual_v2',
    apiKey: 'your-api-key',
  },
  speaker: 'custom-speaker-id',
});

// Text-to-Speech
const audioStream = await voice.speak("Hello, world!");

// Get available speakers
const speakers = await voice.getSpeakers();

----------------------------------------

TITLE: Creating Weather Agent in Mastra
DESCRIPTION: Implementation of a weather agent using OpenAI's GPT model and the previously created weather tool.

LANGUAGE: typescript
CODE:
import { openai } from "@ai-sdk/openai";
import { Agent } from "@mastra/core/agent";
import { weatherTool } from "../tools/weather-tool";

export const weatherAgent = new Agent({
  name: "Weather Agent",
  instructions: `You are a helpful weather assistant that provides accurate weather information.

Your primary function is to help users get weather details for specific locations. When responding:
- Always ask for a location if none is provided
- Include relevant details like humidity, wind conditions, and precipitation
- Keep responses concise but informative

Use the weatherTool to fetch current weather data.`,
  model: openai("gpt-4o-mini"),
  tools: { weatherTool },
});

----------------------------------------

TITLE: Monitoring Suspended Workflow State in Typescript using Mastra
DESCRIPTION: Illustrates how to use the watch function to monitor the state of a suspended workflow. This example notifies reviewers when the workflow enters a suspended state.

LANGUAGE: typescript
CODE:
run.watch((state) => {
  if (state.status === "SUSPENDED") {
    notifyReviewers(state.metadata);
  }
});

----------------------------------------

TITLE: Evaluating High-quality Summary with Summarization Metric in TypeScript
DESCRIPTION: Demonstrates evaluation of a summary that maintains both factual accuracy and complete coverage using the Summarization metric.

LANGUAGE: typescript
CODE:
const input1 = `The electric car company Tesla was founded in 2003 by Martin Eberhard and Marc Tarpenning. 
Elon Musk joined in 2004 as the largest investor and became CEO in 2008. The company's first car, 
the Roadster, was launched in 2008.`;

const output1 = `Tesla, founded by Martin Eberhard and Marc Tarpenning in 2003, launched its first car, 
the Roadster, in 2008. Elon Musk joined as the largest investor in 2004 and became CEO in 2008.`;

console.log('Example 1 - High-quality Summary:');
console.log('Input:', input1);
console.log('Output:', output1);

const result1 = await metric.measure(input1, output1);
console.log('Metric Result:', {
  score: result1.score,
  info: {
    reason: result1.info.reason,
    alignmentScore: result1.info.alignmentScore,
    coverageScore: result1.info.coverageScore,
  },
});

----------------------------------------

TITLE: Registering the Chef Agent with Mastra in TypeScript
DESCRIPTION: Imports the Mastra framework and registers the previously defined Chef Assistant agent for use in the application.

LANGUAGE: typescript
CODE:
import { Mastra } from "@mastra/core";

import { chefAgent } from "./agents/chefAgent";

export const mastra = new Mastra({
  agents: { chefAgent },
});

----------------------------------------

TITLE: Implementing Real-time Voice Interactions in TypeScript
DESCRIPTION: This snippet illustrates how to set up real-time voice interactions using a Mastra agent. It includes initializing a realtime voice provider, establishing a WebSocket connection, and handling speech-to-speech capabilities.

LANGUAGE: typescript
CODE:
import { Agent } from "@mastra/core/agent";
import { OpenAIRealtimeVoice } from "@mastra/voice-openai-realtime";
import { search, calculate } from "../tools";

// Initialize the realtime voice provider
const voice = new OpenAIRealtimeVoice({
  chatModel: {
    apiKey: process.env.OPENAI_API_KEY,
    model: 'gpt-4o-mini-realtime',
  },
  speaker: 'alloy'
});

// Create an agent with speech-to-speech voice capabilities
export const agent = new Agent({
  name: 'Agent',
  instructions: `You are a helpful assistant with speech-to-speech capabilities.`,
  model: openai('gpt-4o'),
  tools: { // Tools configured on Agent are passed to voice provider
    search,
    calculate
  },
  voice
});

// Establish a WebSocket connection
await voice.connect();

// Start a conversation
await voice.speak("Hello, I'm your AI assistant!");

// Stream audio from a microphone
const microphoneStream = getMicrophoneStream();
await voice.send(microphoneStream);

// When done with the conversation
voice.close();

----------------------------------------

TITLE: Creating a Vector Query Tool with Filters in TypeScript
DESCRIPTION: Shows how to create a vector query tool with filtering enabled. This allows for processing queries to construct metadata filters that combine with semantic search.

LANGUAGE: typescript
CODE:
const queryTool = createVectorQueryTool({
  vectorStoreName: "pinecone",
  indexName: "docs",
  model: openai.embedding('text-embedding-3-small'),
  enableFilters: true,
});

----------------------------------------

TITLE: Initializing Memory System with Working Memory
DESCRIPTION: Configures a Memory instance with working memory enabled and a short context window of 1 message.

LANGUAGE: typescript
CODE:
import { Memory } from "@mastra/memory";

const memory = new Memory({
  options: {
    lastMessages: 1, // working memory means we can have a shorter context window and still maintain conversational coherence
    workingMemory: {
      enabled: true,
    },
  },
});

----------------------------------------

TITLE: Basic Usage of MCPConfiguration with Agent in TypeScript
DESCRIPTION: This example demonstrates how to create an MCPConfiguration instance with multiple servers and use it to initialize an Agent with access to all tools.

LANGUAGE: typescript
CODE:
import { MCPConfiguration } from "@mastra/mcp";
import { Agent } from "@mastra/core/agent";
import { openai } from "@ai-sdk/openai";

const mcp = new MCPConfiguration({
  servers: {
    stockPrice: {
      command: "npx",
      args: ["tsx", "stock-price.ts"],
      env: {
        API_KEY: "your-api-key",
      },
    },
    weather: {
      url: new URL("http://localhost:8080/sse"),
    },
  },
});

// Create an agent with access to all tools
const agent = new Agent({
  name: "Multi-tool Agent",
  instructions: "You have access to multiple tool servers.",
  model: openai("gpt-4"),
  tools: await mcp.getTools(),
});

----------------------------------------

TITLE: Customizing Vector Database and Embedder in TypeScript
DESCRIPTION: This code shows how to customize the vector database and embedder used for semantic search in the memory system.

LANGUAGE: typescript
CODE:
import { openai } from "@ai-sdk/openai";
import { PgVector } from "@mastra/pg";

const memory = new Memory({
  // Use a different vector database (libsql is default)
  vector: new PgVector("postgresql://user:pass@localhost:5432/db"),
  // Or a different embedder (fastembed is default)
  embedder: openai.embedding("text-embedding-3-small"),
});

----------------------------------------

TITLE: Initializing and Using OpenAIVoice for Text-to-Speech and Speech-to-Text in TypeScript
DESCRIPTION: This snippet demonstrates how to initialize the OpenAIVoice class with default and custom configurations, and how to use it for text-to-speech and speech-to-text operations. It includes examples of specifying API keys, model names, and voice options.

LANGUAGE: typescript
CODE:
import { OpenAIVoice } from '@mastra/voice-openai';

// Initialize with default configuration using environment variables
const voice = new OpenAIVoice();

// Or initialize with specific configuration
const voiceWithConfig = new OpenAIVoice({
  speechModel: {
    name: 'tts-1-hd',
    apiKey: 'your-openai-api-key'
  },
  listeningModel: {
    name: 'whisper-1',
    apiKey: 'your-openai-api-key'
  },
  speaker: 'alloy'  // Default voice
});

// Convert text to speech
const audioStream = await voice.speak('Hello, how can I help you?', {
  speaker: 'nova',  // Override default voice
  speed: 1.2  // Adjust speech speed
});

// Convert speech to text
const text = await voice.listen(audioStream, {
  filetype: 'mp3'
});

----------------------------------------

TITLE: Mixed Position Adherence Evaluation
DESCRIPTION: Shows evaluation of a response where relevant information is scattered throughout the context, using facts about elephants.

LANGUAGE: typescript
CODE:
const context2 = [
  'Elephants are herbivores.',
  'Adult elephants can weigh up to 13,000 pounds.',
  'Elephants are the largest land animals.',
  'Elephants eat plants and grass.',
];

const metric2 = new ContextPositionMetric(openai('gpt-4o-mini'), {
  context: context2,
});

const query2 = 'How much do elephants weigh?';
const response2 = 'Adult elephants can weigh up to 13,000 pounds, making them the largest land animals.';

console.log('Example 2 - Mixed Position Adherence:');
console.log('Context:', context2);
console.log('Query:', query2);
console.log('Response:', response2);

const result2 = await metric2.measure(query2, response2);
console.log('Metric Result:', {
  score: result2.score,
  reason: result2.info.reason,
});

----------------------------------------

TITLE: Advanced Usage of PromptAlignmentMetric with Analysis in TypeScript
DESCRIPTION: Illustrates a more complex example of using PromptAlignmentMetric, including different instruction sets and analyzing the results for different outputs.

LANGUAGE: typescript
CODE:
import { openai } from "@ai-sdk/openai";
import { PromptAlignmentMetric } from "@mastra/evals/llm";

// Configure the model for evaluation
const model = openai("gpt-4o-mini");

const metric = new PromptAlignmentMetric(model, {
  instructions: [
    "Use bullet points for each item",
    "Include exactly three examples",
    "End each point with a semicolon"
  ],
  scale: 1
});

const result = await metric.measure(
  "List three fruits",
  "• Apple is red and sweet;
• Banana is yellow and curved;
• Orange is citrus and round."
);

// Example output:
// {
//   score: 1.0,
//   info: {
//     reason: "The score is 1.0 because all instructions were followed exactly:
//           bullet points were used, exactly three examples were provided, and
//           each point ends with a semicolon."
//   }
// }

const result2 = await metric.measure(
  "List three fruits",
  "1. Apple
2. Banana
3. Orange and Grape"
);

// Example output:
// {
//   score: 0.33,
//   info: {
//     reason: "The score is 0.33 because: numbered lists were used instead of bullet points,
//           no semicolons were used, and four fruits were listed instead of exactly three."
//   }
// }

----------------------------------------

TITLE: Creating a New Memory Thread in Mastra using TypeScript
DESCRIPTION: This code shows how to create a new memory thread with a title, metadata, and resource ID using the Mastra client. It returns the newly created thread object.

LANGUAGE: typescript
CODE:
const thread = await client.createMemoryThread({
  title: "New Conversation",
  metadata: { category: "support" },
  resourceid: "resource-1",
});

----------------------------------------

TITLE: Generating Embeddings for Text Chunks using Mastra and OpenAI
DESCRIPTION: This code snippet demonstrates how to create a document from text, chunk it, and then generate embeddings for the chunks using OpenAI's embedding model. It utilizes the Mastra library for document handling and chunking, and the OpenAI SDK for embedding generation.

LANGUAGE: tsx
CODE:
import { openai } from '@ai-sdk/openai';
import { MDocument } from '@mastra/rag';
import { embed } from 'ai';

const doc = MDocument.fromText("Your text content...");

const chunks = await doc.chunk();

const { embeddings } = await embed({
  model: openai.embedding('text-embedding-3-small'),
  values: chunks.map(chunk => chunk.text),
});

----------------------------------------

TITLE: Initializing and Using OpenAIRealtimeVoice in TypeScript
DESCRIPTION: This snippet demonstrates how to import, initialize, and use the OpenAIRealtimeVoice class for real-time voice interactions. It includes examples of connecting, setting up event listeners, converting text to speech, and processing audio input.

LANGUAGE: typescript
CODE:
import { OpenAIRealtimeVoice } from '@mastra/voice-openai-realtime-api';

// Initialize with default configuration using environment variables
const voice = new OpenAIRealtimeVoice();

// Or initialize with specific configuration
const voiceWithConfig = new OpenAIRealtimeVoice({
  chatModel: {
    apiKey: 'your-openai-api-key',
    model: 'gpt-4o-mini-realtime-preview-2024-12-17',
    options: {
      sessionConfig: {
        turn_detection: {
          type: 'server_vad',
          threshold: 0.6,
          silence_duration_ms: 1200
        }
      }
    }
  },
  speaker: 'alloy'  // Default voice
});

// Establish connection
await voice.connect();

// Set up event listeners
voice.on('speaking', ({ audio }) => {
  // Handle audio data (Int16Array) pcm format by default
  playAudio(audio);
});

voice.on('writing', ({ text, role }) => {
  // Handle transcribed text
  console.log(`${role}: ${text}`);
});

// Convert text to speech
await voice.speak('Hello, how can I help you today?', {
  speaker: 'echo'  // Override default voice
});

// Process audio input
const microphoneStream = getMicrophoneStream();
await voice.send(microphoneStream);

// When done, disconnect
voice.connect();

----------------------------------------

TITLE: Managing Threads in Mastra Storage
DESCRIPTION: Demonstrates thread management operations including creation, retrieval, and updating of threads with metadata. Shows how to work with thread IDs and custom metadata.

LANGUAGE: typescript
CODE:
// Create a new thread
const thread = await storage.createThread({
  resourceId: 'resource-123',
  title: 'My Thread',
  metadata: { key: 'value' },
});

// Get thread by ID
const retrievedThread = await storage.getThreadById({
  threadId: thread.id,
});

// Update thread
await storage.updateThread({
  id: thread.id,
  title: 'Updated Title',
  metadata: { newKey: 'newValue' },
});

----------------------------------------

TITLE: Using Vercel AI SDK Tools with Mastra Agent
DESCRIPTION: This code demonstrates how to use Vercel AI SDK tools alongside Mastra tools in an agent. It shows the integration of both tool formats within the agent's configuration.

LANGUAGE: typescript
CODE:
import { Agent } from "@mastra/core/agent";
import { openai } from "@ai-sdk/openai";
import { weatherInfo } from "../tools/vercelTool";
import * as mastraTools from "../tools/mastraTools";

export const weatherAgent = new Agent({
  name: "Weather Agent",
  instructions: "You are a helpful assistant that provides weather information.",
  model: openai("gpt-4"),
  tools: {
    weatherInfo,  // Vercel tool
    ...mastraTools  // Mastra tools
  },
});

----------------------------------------

TITLE: Copying Environment Variables File in Bash
DESCRIPTION: Command to create a copy of the example environment variables file.

LANGUAGE: bash
CODE:
cp .env.example .env

----------------------------------------

TITLE: Implementing MastraVoice Base Class in TypeScript
DESCRIPTION: Example implementation of a voice provider extending the MastraVoice abstract base class. Shows the basic structure and required method implementations including constructor, speak, listen, and getSpeakers methods, along with optional real-time communication methods.

LANGUAGE: typescript
CODE:
import { MastraVoice } from "@mastra/core/voice";

// Create a voice provider implementation
class MyVoiceProvider extends MastraVoice {
  constructor(config: { 
    speechModel?: BuiltInModelConfig; 
    listeningModel?: BuiltInModelConfig; 
    speaker?: string;
    realtimeConfig?: {
      model?: string;
      apiKey?: string;
      options?: unknown;
    };
  }) {
    super({
      speechModel: config.speechModel,
      listeningModel: config.listeningModel,
      speaker: config.speaker,
      realtimeConfig: config.realtimeConfig
    });
  }

  // Implement required abstract methods
  async speak(input: string | NodeJS.ReadableStream, options?: { speaker?: string }): Promise<NodeJS.ReadableStream | void> {
    // Implement text-to-speech conversion
  }

  async listen(audioStream: NodeJS.ReadableStream, options?: unknown): Promise<string | NodeJS.ReadableStream | void> {
    // Implement speech-to-text conversion
  }

  async getSpeakers(): Promise<Array<{ voiceId: string; [key: string]: unknown }>> {
    // Return list of available voices
  }
  
  // Optional speech-to-speech methods
  async connect(): Promise<void> {
    // Establish WebSocket connection for speech-to-speech communication
  }
  
  async send(audioData: NodeJS.ReadableStream | Int16Array): Promise<void> {
    // Stream audio data in speech-to-speech
  }
  
  async answer(): Promise<void> {
    // Trigger voice provider to respond
  }
  
  addTools(tools: Array<unknown>): void {
    // Add tools for the voice provider to use
  }
  
  close(): void {
    // Close WebSocket connection
  }
  
  on(event: string, callback: (data: unknown) => void): void {
    // Register event listener
  }
  
  off(event: string, callback: (data: unknown) => void): void {
    // Remove event listener
  }
}

----------------------------------------

TITLE: Generating and Inserting Embeddings into Astra DB using Mastra and OpenAI in TypeScript
DESCRIPTION: This code snippet shows the process of creating text embeddings using OpenAI, chunking the text, and then storing the embeddings in Astra DB using Mastra's AstraVector class. It includes steps for creating an index and upserting the vectors with associated metadata.

LANGUAGE: tsx
CODE:
import { openai } from '@ai-sdk/openai';
import { AstraVector } from '@mastra/astra';
import { MDocument } from '@mastra/rag';
import { embedMany } from 'ai';

const doc = MDocument.fromText('Your text content...');

const chunks = await doc.chunk();

const { embeddings } = await embedMany({
  model: openai.embedding('text-embedding-3-small'),
  values: chunks.map(chunk => chunk.text),
});

const astra = new AstraVector({
  token: process.env.ASTRA_DB_TOKEN,
  endpoint: process.env.ASTRA_DB_ENDPOINT,
  keyspace: process.env.ASTRA_DB_KEYSPACE,
});

await astra.createIndex({
  indexName: 'test_collection',
  dimension: 1536,
});

await astra.upsert({
  indexName: 'test_collection',
  vectors: embeddings,
  metadata: chunks?.map(chunk => ({ text: chunk.text })),
});

----------------------------------------

TITLE: Example Usage of CompletenessMetric with Analysis in TypeScript
DESCRIPTION: This snippet provides a more detailed example of using the CompletenessMetric, including the input and output texts, and shows the structure of the returned result object with analysis information.

LANGUAGE: typescript
CODE:
import { CompletenessMetric } from "@mastra/evals/nlp";

const metric = new CompletenessMetric();

const result = await metric.measure(
  "The quick brown fox jumps over the lazy dog",
  "A brown fox jumped over a dog"
);

// Example output:
// {
//   score: 0.75,
//   info: {
//     inputElements: ["quick", "brown", "fox", "jump", "lazy", "dog"],
//     outputElements: ["brown", "fox", "jump", "dog"],
//     missingElements: ["quick", "lazy"],
//     elementCounts: { input: 6, output: 4 }
//   }
// }

----------------------------------------

TITLE: Initializing Upstash Storage in TypeScript
DESCRIPTION: Example showing how to initialize and configure the UpstashStore with required environment variables for URL and authentication token. Demonstrates the basic setup for connecting to Upstash's Redis-compatible storage.

LANGUAGE: typescript
CODE:
import { UpstashStore } from "@mastra/upstash";

const storage = new UpstashStore({
  url: process.env.UPSTASH_URL,
  token: process.env.UPSTASH_TOKEN,
});

----------------------------------------

TITLE: Basic Usage of TextualDifferenceMetric in TypeScript
DESCRIPTION: Demonstrates how to import and use the TextualDifferenceMetric class to compare two strings and get a similarity score with detailed metrics.

LANGUAGE: typescript
CODE:
import { TextualDifferenceMetric } from "@mastra/evals/nlp";

const metric = new TextualDifferenceMetric();

const result = await metric.measure(
  "The quick brown fox",
  "The fast brown fox"
);

console.log(result.score); // Similarity ratio from 0-1
console.log(result.info); // Detailed change metrics

----------------------------------------

TITLE: Evaluating Partial Coverage Summary with Summarization Metric in TypeScript
DESCRIPTION: Shows evaluation of a summary that is factually accurate but omits important information using the Summarization metric.

LANGUAGE: typescript
CODE:
const input2 = `The Python programming language was created by Guido van Rossum and was first released 
in 1991. It emphasizes code readability with its notable use of significant whitespace. Python is 
dynamically typed and garbage-collected. It supports multiple programming paradigms, including 
structured, object-oriented, and functional programming.`;

const output2 = `Python, created by Guido van Rossum, is a programming language known for its readable 
code and use of whitespace. It was released in 1991.`;

console.log('Example 2 - Partial Coverage:');
console.log('Input:', input2);
console.log('Output:', output2);

const result2 = await metric.measure(input2, output2);
console.log('Metric Result:', {
  score: result2.score,
  info: {
    reason: result2.info.reason,
    alignmentScore: result2.info.alignmentScore,
    coverageScore: result2.info.coverageScore,
  },
});

----------------------------------------

TITLE: Workflow Validation and Commit
DESCRIPTION: Demonstrates workflow validation during the commit phase after configuring steps.

LANGUAGE: typescript
CODE:
workflow
  .step('step1', {...})
  .step('step2', {...})
  .commit(); // Validates workflow structure

----------------------------------------

TITLE: Implementing Error Handling in Mastra Client SDK (TypeScript)
DESCRIPTION: This snippet demonstrates how to implement error handling using try-catch blocks when working with the Mastra Client SDK. It shows how to catch and log errors that may occur during API method calls.

LANGUAGE: typescript
CODE:
try {
  const agent = client.getAgent("agent-id");
  const response = await agent.generate({
    messages: [{ role: "user", content: "Hello" }],
  });
} catch (error) {
  console.error("An error occurred:", error.message);
}

----------------------------------------

TITLE: Installing Project Dependencies
DESCRIPTION: Command to install required project dependencies using pnpm package manager.

LANGUAGE: bash
CODE:
pnpm install

----------------------------------------

TITLE: Configuring Model Routing with AI SDK in Mastra
DESCRIPTION: Demonstrates how to create a Mastra agent using AI SDK-supported models. Shows integration with OpenAI's GPT-4 model through AI SDK's model routing capabilities.

LANGUAGE: typescript
CODE:
import { openai } from "@ai-sdk/openai";
import { Agent } from "@mastra/core/agent";

const agent = new Agent({
  name: "WeatherAgent",
  instructions: "Instructions for the agent...",
  model: openai("gpt-4-turbo"), // Model comes directly from AI SDK
});

const result = await agent.generate("What is the weather like?");

----------------------------------------

TITLE: Masking Working Memory Tags in Stream Response
DESCRIPTION: This snippet demonstrates how to use the maskStreamTags utility to hide working memory XML tags from the user while still processing them in the system.

LANGUAGE: typescript
CODE:
import { maskStreamTags } from "@mastra/core/utils";

// Basic usage - just mask the working_memory tags
for await (const chunk of maskStreamTags(
  response.textStream,
  "working_memory",
)) {
  process.stdout.write(chunk);
}

// Without masking: "Let me help you! <working_memory>...</working_memory> Based on..."
// With masking: "Let me help you! Based on..."

----------------------------------------

TITLE: Evaluating Mixed Faithfulness Response in TypeScript
DESCRIPTION: Shows how to evaluate a response with some unsupported claims using the Faithfulness metric.

LANGUAGE: typescript
CODE:
const context2 = [
  'Python was created by Guido van Rossum.',
  'The first version was released in 1991.',
  'Python emphasizes code readability.',
];

const metric2 = new FaithfulnessMetric(openai('gpt-4o-mini'), {
  context: context2,
});

const query2 = 'What can you tell me about Python?';
const response2 = 'Python was created by Guido van Rossum and released in 1991. It is the most popular programming language today and is used by millions of developers worldwide.';

console.log('Example 2 - Mixed Faithfulness:');
console.log('Context:', context2);
console.log('Query:', query2);
console.log('Response:', response2);

const result2 = await metric2.measure(query2, response2);
console.log('Metric Result:', {
  score: result2.score,
  reason: result2.info.reason,
});
// Example Output:
// Metric Result: { score: 0.5, reason: 'Only half of the claims are supported by the context.' }

----------------------------------------

TITLE: Examples of KeywordCoverageMetric Usage with Different Scenarios
DESCRIPTION: This snippet provides multiple examples of using KeywordCoverageMetric, including perfect coverage, partial coverage, and handling of technical terms. It demonstrates how the metric behaves in various scenarios.

LANGUAGE: typescript
CODE:
import { KeywordCoverageMetric } from "@mastra/evals/nlp";

const metric = new KeywordCoverageMetric();

// Perfect coverage example
const result1 = await metric.measure(
  "The quick brown fox jumps over the lazy dog",
  "A quick brown fox jumped over a lazy dog"
);
// {
//   score: 1.0,
//   info: {
//     matchedKeywords: 6,
//     totalKeywords: 6
//   }
// }

// Partial coverage example
const result2 = await metric.measure(
  "Python features include easy syntax, dynamic typing, and extensive libraries",
  "Python has simple syntax and many libraries"
);
// {
//   score: 0.67,
//   info: {
//     matchedKeywords: 4,
//     totalKeywords: 6
//   }
// }

// Technical terms example
const result3 = await metric.measure(
  "Discuss React.js component lifecycle and state management",
  "React components have lifecycle methods and manage state"
);
// {
//   score: 1.0,
//   info: {
//     matchedKeywords: 4,
//     totalKeywords: 4
//   }
// }

----------------------------------------

TITLE: Configuring Custom OpenTelemetry Exporter in Next.js (TypeScript)
DESCRIPTION: Sets up a custom OpenTelemetry exporter (Langfuse) in a Next.js project. This configuration allows for more flexible tracing options and integration with specific observability tools.

LANGUAGE: typescript
CODE:
import {
  NodeSDK,
  ATTR_SERVICE_NAME,
  Resource,
} from '@mastra/core/telemetry/otel-vendor';
import { LangfuseExporter } from 'langfuse-vercel';

export function register() {
  const exporter = new LangfuseExporter({
    // ... Langfuse config
  })

  const sdk = new NodeSDK({
    resource: new Resource({
      [ATTR_SERVICE_NAME]: 'ai',
    }),
    traceExporter: exporter,
  });
 
  sdk.start();
}

----------------------------------------

TITLE: Configuring ToxicityMetric with Custom Scale in TypeScript
DESCRIPTION: This example shows how to create a ToxicityMetric instance with a custom scale of 0-10 instead of the default 0-1. It demonstrates the flexibility in configuring the metric for different scoring ranges.

LANGUAGE: typescript
CODE:
import { openai } from "@ai-sdk/openai";

const model = openai("gpt-4o-mini");

const metric = new ToxicityMetric(model, {
  scale: 10, // Use 0-10 scale instead of 0-1
});

const result = await metric.measure(
  "What do you think about the new team member?",
  "The new team member shows promise but needs significant improvement in basic skills.",
);

----------------------------------------

TITLE: Authentication Middleware Implementation
DESCRIPTION: Implementation of authentication middleware that checks for a valid Bearer token in the Authorization header.

LANGUAGE: typescript
CODE:
{
  handler: async (c, next) => {
    const authHeader = c.req.header('Authorization');
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return new Response('Unauthorized', { status: 401 });
    }
    
    const token = authHeader.split(' ')[1];
    // Validate token here
    
    await next();
  },
  path: '/api/*',
}

----------------------------------------

TITLE: Using PlayAI Voice Integration
DESCRIPTION: Example demonstrating initialization and usage of PlayAI Voice including text-to-speech synthesis and speaker management

LANGUAGE: typescript
CODE:
import { PlayAIVoice } from '@mastra/voice-playai';

// Initialize with configuration
const voice = new PlayAIVoice({
  speechModel: {
    name: 'PlayDialog', // Optional, defaults to 'PlayDialog'
    apiKey: 'your-api-key', // Optional, can use PLAYAI_API_KEY env var
    userId: 'your-user-id', // Optional, can use PLAYAI_USER_ID env var
  },
  speaker: 's3://voice-cloning-zero-shot/baf1ef41-36b6-428c-9bdf-50ba54682bd8/original/manifest.json', // Optional, defaults to first available voice
});

// Or use with defaults (using env vars)
const defaultVoice = new PlayAIVoice();

// List available speakers
const speakers = await voice.getSpeakers();

// Generate speech from text
const stream = await voice.speak('Hello from Mastra!');

// Or generate speech from a text stream
const textStream = getTextStream(); // Your text stream source
const audioStream = await voice.speak(textStream);

// The stream can be piped to a destination
stream.pipe(destination);

----------------------------------------

TITLE: Initializing VercelDeployer in TypeScript
DESCRIPTION: Demonstrates how to import and initialize the VercelDeployer class within a Mastra application. It shows the required parameters for the deployer configuration.

LANGUAGE: typescript
CODE:
import { Mastra } from '@mastra/core';
import { VercelDeployer } from '@mastra/deployer-vercel';

const mastra = new Mastra({
  deployer: new VercelDeployer({
    teamId: 'your-team-id',
    projectName: 'your-project-name',
    token: 'your-vercel-token'
  }),
  // ... other Mastra configuration options
});

----------------------------------------

TITLE: Configuring OtelConfig for Mastra in TypeScript
DESCRIPTION: This snippet demonstrates how to create an OtelConfig object to configure OpenTelemetry settings for Mastra. It includes settings for service name, enabling telemetry, sampling strategy, and export configuration.

LANGUAGE: typescript
CODE:
import { Mastra } from 'mastra';

const otelConfig: OtelConfig = {
  serviceName: 'my-awesome-service',
  enabled: true,
  sampling: {
    type: 'ratio',
    probability: 0.5,
  },
  export: {
    type: 'otlp',
    endpoint: 'https://otel-collector.example.com/v1/traces',
    headers: {
      Authorization: 'Bearer YOUR_TOKEN_HERE',
    },
  },
};

----------------------------------------

TITLE: Implementing Vector Search and Re-ranking in Mastra
DESCRIPTION: Performs vector similarity search and re-ranks results using semantic relevance, vector similarity, and position scores.

LANGUAGE: typescript
CODE:
const query = 'explain technical trading analysis';

// Get query embedding
const { embedding: queryEmbedding } = await embed({
  value: query,
  model: openai.embedding('text-embedding-3-small'),
});

// Get initial results
const initialResults = await pgVector.query({
  indexName: 'embeddings',
  queryVector: queryEmbedding,
  topK: 3,
});

// Re-rank results
const rerankedResults = await rerank(initialResults, query, openai('gpt-4o-mini'), {
  weights: {
    semantic: 0.5,  // How well the content matches the query semantically
    vector: 0.3,    // Original vector similarity score
    position: 0.2   // Preserves original result ordering
  },
  topK: 3,
});

----------------------------------------

TITLE: Initializing PlayAI Voice Provider in TypeScript
DESCRIPTION: Examples showing different ways to initialize the PlayAI voice provider, including default configuration and custom configuration with specific speech model and speaker settings.

LANGUAGE: typescript
CODE:
import { PlayAIVoice } from "@mastra/voice-playai";

// Initialize with default configuration (uses PLAYAI_API_KEY environment variable and PLAYAI_USER_ID environment variable)
const voice = new PlayAIVoice();

// Initialize with default configuration
const voice = new PlayAIVoice({
  speechModel: {
    name: 'PlayDialog',
    apiKey: process.env.PLAYAI_API_KEY,
    userId: process.env.PLAYAI_USER_ID
  },
  speaker: 'Angelo'  // Default voice
});

// Convert text to speech with a specific voice
const audioStream = await voice.speak("Hello, world!", {
  speaker: 's3://voice-cloning-zero-shot/b27bc13e-996f-4841-b584-4d35801aea98/original/manifest.json' // Dexter voice
});

----------------------------------------

TITLE: Vector Index Update Operations
DESCRIPTION: Examples of updating vector data and metadata using updateIndexById method with different parameter combinations.

LANGUAGE: typescript
CODE:
// Update just the vector
await pgVector.updateIndexById("my_vectors", "vector123", {
  vector: [0.1, 0.2, 0.3],
});

// Update just the metadata
await pgVector.updateIndexById("my_vectors", "vector123", {
  metadata: { label: "updated" },
});

// Update both vector and metadata
await pgVector.updateIndexById("my_vectors", "vector123", {
  vector: [0.1, 0.2, 0.3],
  metadata: { label: "updated" },
});

----------------------------------------

TITLE: Generating Embeddings with Cohere in TypeScript
DESCRIPTION: This code shows how to generate embeddings using Cohere's embedding model. It utilizes the embedMany function from the AI SDK to process multiple chunks at once.

LANGUAGE: typescript
CODE:
import { embedMany } from 'ai';
import { cohere } from '@ai-sdk/cohere';

const { embeddings } = await embedMany({
  model: cohere.embedding('embed-english-v3.0'),
  values: chunks.map(chunk => chunk.text),
});

----------------------------------------

TITLE: Starting Asynchronous Workflow Run
DESCRIPTION: Initiates an asynchronous workflow run with trigger data and waits for results.

LANGUAGE: typescript
CODE:
const {runId} = workflow.createRun()

const result = await workflow.startAsync({
  runId,
  triggerData: {
    param1: "value1",
    param2: "value2",
  },
});

----------------------------------------

TITLE: Retrieving All Agents in TypeScript
DESCRIPTION: This snippet demonstrates how to retrieve a list of all available Mastra AI agents using the client object.

LANGUAGE: typescript
CODE:
const agents = await client.getAgents();

----------------------------------------

TITLE: Handling Abort Signals in Tool Execution
DESCRIPTION: This code shows how to use abort signals in tool execution. It demonstrates forwarding the abort signal to the tool's execute function and using it in a fetch call inside the tool.

LANGUAGE: typescript
CODE:
import { Agent } from "@mastra/core/agent";
import { createTool } from "@mastra/core/tools";
import { z } from "zod";

const agent = new Agent({
  name: "Weather agent",
  tools: {
    weather: createTool({
      id: "Get Weather Information",
      description: 'Get the weather in a location',
      inputSchema: z.object({ location: z.string() }),
      execute: async ({ context: { location } }, { abortSignal }) => {
        return fetch(
          `https://api.weatherapi.com/v1/current.json?q=${location}`,
          { signal: abortSignal }, // forward the abort signal to fetch
        );
      },
    }),
  }
})

const result = await agent.generate('What is the weather in San Francisco?', {
  abortSignal: myAbortSignal, // signal that will be forwarded to tools
});

----------------------------------------

TITLE: Configuring Upstash KV Storage in TypeScript
DESCRIPTION: This code demonstrates how to configure Upstash KV as a storage backend for the Mastra memory system.

LANGUAGE: typescript
CODE:
import { UpstashStore } from "@mastra/upstash";

const storage = new UpstashStore({
  url: "http://localhost:8089",
  token: "your_token",
});

----------------------------------------

TITLE: Initializing MCPConfiguration with Server Definitions in TypeScript
DESCRIPTION: Constructor for creating a new instance of the MCPConfiguration class. It takes an object with an optional id and a servers object containing server configurations.

LANGUAGE: typescript
CODE:
constructor({
    id?: string;
    servers: Record<string, MastraMCPServerDefinition>
}: {
    servers: {
        [serverName: string]: {
            // For stdio-based servers
            command?: string;
            args?: string[];
            env?: Record<string, string>;
            // For SSE-based servers
            url?: URL;
            requestInit?: RequestInit;
        }
    }
})

----------------------------------------

TITLE: Configuring Environment Variables for LangSmith
DESCRIPTION: Required environment variables to set up LangSmith integration with Mastra. Includes tracing settings, API endpoint, authentication, and project configuration.

LANGUAGE: env
CODE:
LANGSMITH_TRACING=true
LANGSMITH_ENDPOINT=https://api.smith.langchain.com
LANGSMITH_API_KEY=your-api-key
LANGSMITH_PROJECT=your-project-name

----------------------------------------

TITLE: Using Query Object for Step Condition in Mastra Workflow (TypeScript)
DESCRIPTION: Shows how to use a query object to define a condition. It checks if the 'auth' step's status is equal to 'authenticated' using the $eq operator.

LANGUAGE: typescript
CODE:
workflow.step(processOrder, {
  when: {
    ref: { step: 'auth', path: 'status' },
    query: { $eq: 'authenticated' }
  }
});

----------------------------------------

TITLE: Merging Multiple Branches with .after() in Mastra Workflows (TypeScript)
DESCRIPTION: Shows how to create a step that depends on multiple previous steps, effectively merging branches in the workflow.

LANGUAGE: typescript
CODE:
workflow
  .step(stepA)
    .then(stepB)
  .step(stepC)
    .then(stepD)
  .after([stepB, stepD])  // Create a step that depends on multiple steps
    .step(stepE);

----------------------------------------

TITLE: Defining QueryResult Interface in TypeScript
DESCRIPTION: Specifies the structure of the QueryResult interface, which represents the result of a vector query in Qdrant, including id, score, metadata, and optional vector.

LANGUAGE: typescript
CODE:
interface QueryResult {
  id: string;
  score: number;
  metadata: Record<string, any>;
  vector?: number[]; // Only included if includeVector is true
}

----------------------------------------

TITLE: Vector Query Tool Setup
DESCRIPTION: Configuration of vector query tools for both raw and cleaned embeddings using PgVector storage.

LANGUAGE: typescript
CODE:
const vectorQueryTool = createVectorQueryTool({
  vectorStoreName: "pgVector",
  indexName: "embeddings",
  model: openai.embedding('text-embedding-3-small'),
});

const cleanedVectorQueryTool = createVectorQueryTool({
  vectorStoreName: "pgVector",
  indexName: "cleanedEmbeddings",
  model: openai.embedding('text-embedding-3-small'),
});

----------------------------------------

TITLE: Initializing and Using MurfVoice for Text-to-Speech
DESCRIPTION: Demonstrates initialization and usage of the MurfVoice class for text-to-speech conversion, including both default and custom configurations. Shows how to generate audio streams and retrieve available voices.

LANGUAGE: typescript
CODE:
import { MurfVoice } from "@mastra/voice-murf";

// Initialize with default configuration (uses MURF_API_KEY environment variable)
const voice = new MurfVoice();

// Initialize with custom configuration
const voice = new MurfVoice({
  speechModel: {
    name: 'GEN2',
    apiKey: 'your-api-key',
    properties: {
      format: 'MP3',
      rate: 1.0,
      pitch: 1.0,
      sampleRate: 48000,
      channelType: 'STEREO',
    },
  },
  speaker: 'en-US-cooper',
});

// Text-to-Speech with default settings
const audioStream = await voice.speak("Hello, world!");

// Text-to-Speech with custom properties
const audioStream = await voice.speak("Hello, world!", {
  speaker: 'en-UK-hazel',
  properties: {
    format: 'WAV',
    rate: 1.2,
    style: 'casual',
  },
});

// Get available voices
const voices = await voice.getSpeakers();

----------------------------------------

TITLE: Manually Managing Threads in TypeScript
DESCRIPTION: This comprehensive snippet demonstrates how to manually manage threads using the memory API, including creating, updating, querying, and deleting threads.

LANGUAGE: typescript
CODE:
import { Memory } from "@mastra/memory";
import { PostgresStore } from "@mastra/pg";

// Initialize memory
const memory = new Memory({
  storage: new PostgresStore({
    host: "localhost",
    port: 5432,
    user: "postgres",
    database: "postgres",
    password: "postgres",
  }),
});

// Create a new thread
const thread = await memory.createThread({
  resourceId: "user_123",
  title: "Project Discussion",
  metadata: {
    project: "mastra",
    topic: "architecture",
  },
});

// Manually save messages to a thread
await memory.saveMessages({
  messages: [
    {
      id: "msg_1",
      threadId: thread.id,
      role: "user",
      content: "What's the project status?",
      createdAt: new Date(),
      type: "text",
    },
  ],
});

// Get messages from a thread with various filters
const messages = await memory.query({
  threadId: thread.id,
  selectBy: {
    last: 10, // Get last 10 messages
    vectorSearchString: "performance", // Find messages about performance
  },
});

// Get thread by ID
const existingThread = await memory.getThreadById({
  threadId: "thread_123",
});

// Get all threads for a resource
const threads = await memory.getThreadsByResourceId({
  resourceId: "user_123",
});

// Update thread metadata
await memory.updateThread({
  id: thread.id,
  title: "Updated Project Discussion",
  metadata: {
    status: "completed",
  },
});

// Delete a thread and all its messages
await memory.deleteThread(thread.id);

----------------------------------------

TITLE: Running the Application
DESCRIPTION: Command to start the example application using pnpm.

LANGUAGE: bash
CODE:
pnpm start

----------------------------------------

TITLE: Mapping from Trigger Data in Mastra Workflow
DESCRIPTION: This example demonstrates how to map data from the workflow trigger to a step in a Mastra workflow. It defines a step that processes user input and maps the trigger data to the step's input.

LANGUAGE: typescript
CODE:
import { Step, Workflow } from "@mastra/core/workflows";
import { z } from "zod";

// Define a step that needs user input
const processUserInput = new Step({
  id: "processUserInput",
  execute: async ({ context }) => {
    // The inputData will be available in context because of the variable mapping
    const { inputData } = context.inputData;

    return {
      processedData: `Processed: ${inputData}`
    };
  },
});

// Create the workflow
const workflow = new Workflow({
  name: "trigger-mapping",
  triggerSchema: z.object({
    inputData: z.string(),
  }),
});

// Map the trigger data to the step
workflow
  .step(processUserInput, {
    variables: {
      inputData: { step: 'trigger', path: 'inputData' },
    }
  })
  .commit();

----------------------------------------

TITLE: Evaluating mixed alignment with Prompt Alignment metric
DESCRIPTION: This snippet shows how to evaluate a response that misses some of the given instructions using the Prompt Alignment metric.

LANGUAGE: typescript
CODE:
const instructions2 = [
  'Use bullet points',
  'Include prices in USD',
  'Show stock status',
  'Add product descriptions'
];

const metric2 = new PromptAlignmentMetric(openai('gpt-4o-mini'), {
  instructions: instructions2,
});

const query2 = 'List the available products';
const response2 = '• Coffee - $4.99 (In Stock)\n• Tea - $3.99\n• Water - $1.99 (Out of Stock)';

console.log('Example 2 - Mixed Alignment:');
console.log('Instructions:', instructions2);
console.log('Query:', query2);
console.log('Response:', response2);

const result2 = await metric2.measure(query2, response2);
console.log('Metric Result:', {
  score: result2.score,
  reason: result2.info.reason,
  details: result2.info.scoreDetails,
});
// Example Output:
// Metric Result: { score: 0.5, reason: 'The response misses some instructions.' }

----------------------------------------

TITLE: Passing Context Between Workflow Steps
DESCRIPTION: Shows how to access and share data between workflow steps using the context object.

LANGUAGE: typescript
CODE:
workflow
  .step({
    id: 'getData',
    execute: async ({ context }) => {
      return {
        data: { id: '123', value: 'example' }
      };
    }
  })
  .step({
    id: 'processData',
    execute: async ({ context }) => {
      // Access data from previous step through context.steps
      const previousData = context.steps.getData.output.data;
      // Process previousData.id and previousData.value
    }
  });

----------------------------------------

TITLE: Initializing and Using OpenAIVoice in TypeScript
DESCRIPTION: Comprehensive example demonstrating how to import, configure, and use the OpenAIVoice class. It covers creating voices with different capabilities, listing available speakers, generating speech, and converting speech to text.

LANGUAGE: typescript
CODE:
import { OpenAIVoice } from '@mastra/voice-openai';

// Create voice with both speech and listening capabilities
const voice = new OpenAIVoice({
  speechModel: {
    name: 'tts-1', // or 'tts-1-hd' for higher quality
    apiKey: 'your-api-key', // Optional, can use OPENAI_API_KEY env var
  },
  listeningModel: {
    name: 'whisper-1',
    apiKey: 'your-api-key', // Optional, can use OPENAI_API_KEY env var
  },
  speaker: 'alloy', // Default voice
});

// Or create speech-only voice
const speechVoice = new OpenAIVoice({
  speechModel: {
    name: 'tts-1',
    apiKey: 'your-api-key',
  },
  speaker: 'nova',
});

// Or create listening-only voice
const listeningVoice = new OpenAIVoice({
  listeningModel: {
    name: 'whisper-1',
    apiKey: 'your-api-key',
  },
});

// List available voices
const speakers = await voice.getSpeakers();

// Generate speech
const audioStream = await voice.speak('Hello from Mastra!', {
  speaker: 'nova', // Optional: override default speaker
  speed: 1.0, // Optional: adjust speech speed
});

// Convert speech to text
const text = await voice.listen(audioStream, {
  filetype: 'wav',
});

----------------------------------------

TITLE: Basic Branching with .after() in Mastra Workflows (TypeScript)
DESCRIPTION: Demonstrates how to create a new branch after a specific step completes using the .after() method.

LANGUAGE: typescript
CODE:
workflow
  .step(stepA)
    .then(stepB)
  .after(stepA)  // Create new branch after stepA completes
    .step(stepC);

----------------------------------------

TITLE: Custom Configuration of Memory with LibSQL in Typescript
DESCRIPTION: This snippet demonstrates how to explicitly configure storage, vector database, and embedder for memory. It allows for more control and the option to use different providers for storage or vector search if needed.

LANGUAGE: typescript
CODE:
import { openai } from '@ai-sdk/openai';
import { LibSQLStore } from "@mastra/core/storage/libsql";
import { LibSQLVector } from "@mastra/core/vector/libsql";

const customMemory = new Memory({
  storage: new LibSQLStore({
    url: process.env.DATABASE_URL || "file:local.db",
  }),
  vector: new LibSQLVector({
    connectionUrl: process.env.DATABASE_URL || "file:local.db",
  }),
  options: {
    lastMessages: 10,
    semanticRecall: {
      topK: 3,
      messageRange: 2,
    },
  },
});

const memoryAgent = new Agent({
  name: "Memory Agent",
  instructions:
    "You are an AI agent with the ability to automatically recall memories from previous interactions. You may have conversations that last hours, days, months, or years. If you don't know it already you should ask for the users name and some info about them.",
  model: openai('gpt-4o-mini'),
  memory,
});

----------------------------------------

TITLE: Configuring PostgreSQL Storage in TypeScript
DESCRIPTION: This snippet shows how to set up PostgreSQL as a storage backend for the Mastra memory system.

LANGUAGE: typescript
CODE:
import { PostgresStore } from "@mastra/pg";

const storage = new PostgresStore({
  host: "localhost",
  port: 5432,
  user: "postgres",
  database: "postgres",
  password: "postgres",
});

----------------------------------------

TITLE: Basic Variable Mapping in Mastra Workflow
DESCRIPTION: Demonstrates how to map data between steps using the variables property in a Mastra workflow. It shows mapping from trigger data to step input and from one step's output to another step's input.

LANGUAGE: typescript
CODE:
const workflow = new Workflow({
  name: 'data-mapping-workflow',
  triggerSchema: z.object({
    inputData: z.string(),
  }),
});

workflow
  .step(step1, {
    variables: {
      // Map trigger data to step input
      inputData: { step: 'trigger', path: 'inputData' }
    }
  })
  .then(step2, {
    variables: {
      // Map output from step1 to input for step2
      previousValue: { step: step1, path: 'outputField' }
    }
  })
  .commit();

----------------------------------------

TITLE: Suspending Workflow with Metadata in Typescript using Mastra
DESCRIPTION: Shows how to suspend a workflow while including metadata. This example suspends the workflow and includes a reason and the requesting user in the metadata.

LANGUAGE: typescript
CODE:
const reviewStep = new Step({
  id: "review",
  execute: async ({ context, suspend }) => {
    await suspend({
      reason: "Needs manager approval",
      requestedBy: context.user
    });
    return { reviewed: true };
  }
});

----------------------------------------

TITLE: Defining Query Result Interface in TypeScript
DESCRIPTION: This snippet defines the TypeScript interface for query results returned by the Turbopuffer vector store. It includes fields for id, score, metadata, and an optional vector field.

LANGUAGE: typescript
CODE:
interface QueryResult {
  id: string;
  score: number;
  metadata: Record<string, any>;
  vector?: number[]; // Only included if includeVector is true
}

----------------------------------------

TITLE: Setting Up AI Workflow
DESCRIPTION: Initializes a workflow for orchestrating complex AI tasks with multiple steps.

LANGUAGE: typescript
CODE:
import { Workflow } from '@mastra/core';

const workflow = new Workflow({
  name: 'my-workflow',
  steps: [
    // Workflow steps
  ],
});

----------------------------------------

TITLE: Version Update Entry
DESCRIPTION: Example changelog entry showing version bump and dependency updates

LANGUAGE: markdown
CODE:
## 0.1.10

### Patch Changes

- Updated dependencies [fc2f89c]
- Updated dependencies [dfbb131]
- Updated dependencies [f4854ee]
- Updated dependencies [afaf73f]
- Updated dependencies [0850b4c]
- Updated dependencies [7bcfaee]
- Updated dependencies [44631b1]
- Updated dependencies [9116d70]
- Updated dependencies [6e559a0]
- Updated dependencies [5f43505]
  - @mastra/core@0.6.1

----------------------------------------

TITLE: Retrieving Thread Details in Mastra using TypeScript
DESCRIPTION: This code shows how to retrieve details about a specific thread using the thread instance. It returns the thread's details.

LANGUAGE: typescript
CODE:
const details = await thread.get();

----------------------------------------

TITLE: Structured Output Streaming with Thread Context
DESCRIPTION: Shows advanced usage of stream() with JSON schema validation, thread context, and handling both text and structured output streams.

LANGUAGE: typescript
CODE:
const schema = {
  type: 'object',
  properties: {
    summary: { type: 'string' },
    nextSteps: { type: 'array', items: { type: 'string' } }
  },
  required: ['summary', 'nextSteps']
};

const response = await myAgent.stream(
  "What should we do next?",
  {
    output: schema,
    threadId: "project-123",
    onFinish: text => console.log("Finished:", text)
  }
);

for await (const chunk of response.textStream) {
  console.log(chunk);
}

const result = await response.object;
console.log("Final structured result:", result);

----------------------------------------

TITLE: Configuring Mastra with Cloudflare Deployer
DESCRIPTION: Example of configuring a Mastra instance with the Cloudflare deployer, including logger setup and agent configuration.

LANGUAGE: typescript
CODE:
import { Mastra, createLogger } from '@mastra/core';
import { CloudflareDeployer } from '@mastra/deployer-cloudflare';

export const mastra = new Mastra({
  agents: { /* your agents here */ },
  logger: createLogger({ name: 'MyApp', level: 'debug' }),
  deployer: new CloudflareDeployer({
    scope: 'your-cloudflare-scope',
    projectName: 'your-project-name',
    // See complete configuration options in the reference docs
  }),
});

----------------------------------------

TITLE: Implementing Mastra Telemetry Configuration for New Relic
DESCRIPTION: TypeScript code example showing how to configure Mastra instance with telemetry settings for New Relic integration. Demonstrates setting up service name, enabling telemetry, and configuring OTLP export.

LANGUAGE: typescript
CODE:
import { Mastra } from "@mastra/core";

export const mastra = new Mastra({
  // ... other config
  telemetry: {
    serviceName: "your-service-name",
    enabled: true,
    export: {
      type: "otlp",
    },
  },
});

----------------------------------------

TITLE: Configuring useChat with Experimental PrepareRequestBody
DESCRIPTION: This snippet demonstrates how to configure the useChat hook to send only the latest message, preventing message ordering issues.

LANGUAGE: typescript
CODE:
const { messages } = useChat({
  api: "api/chat",
  experimental_prepareRequestBody({ messages, id }) {
    return { message: messages.at(-1), id };
  },
});

----------------------------------------

TITLE: Error Handling Implementation
DESCRIPTION: Example showing how to handle vector store errors using try-catch blocks and the VectorStoreError type.

LANGUAGE: typescript
CODE:
try {
  await store.query({
    indexName: "index_name",
    queryVector: queryVector,
  });
} catch (error) {
  if (error instanceof VectorStoreError) {
    console.log(error.code);
    console.log(error.details);
  }
}

----------------------------------------

TITLE: Implementing Technical Question Step in Mastra AI Recruiter Workflow
DESCRIPTION: This step generates a follow-up question for technical candidates about their specialty. It uses the candidate's resume text to craft a relevant question using an LLM.

LANGUAGE: typescript
CODE:
interface CandidateInfo {
  candidateName: string;
  isTechnical: boolean;
  specialty: string;
  resumeText: string;
}

const askAboutSpecialty = new Step({
  id: "askAboutSpecialty",
  outputSchema: z.object({
    question: z.string(),
  }),
  execute: async ({ context }) => {
    const candidateInfo = context?.getStepResult<CandidateInfo>(
      "gatherCandidateInfo",
    );

    const prompt = `
          You are a recruiter. Given the resume below, craft a short question
          for ${candidateInfo?.candidateName} about how they got into "${candidateInfo?.specialty}".
          Resume: ${candidateInfo?.resumeText}
        `;
    const res = await recruiter.generate(prompt);

    return { question: res?.text?.trim() || "" };
  },
});

----------------------------------------

TITLE: Mastra Project Structure
DESCRIPTION: Example directory structure created by the Mastra init command, showing the organization of project files and agents.

LANGUAGE: text
CODE:
project-root/
├── src/
   ├── app/
   └── mastra/
       ├── agents/
       │   └── agents.ts
       └── index.ts

----------------------------------------

TITLE: Installing @mastra/astra Package
DESCRIPTION: Command to install the @mastra/astra package using npm package manager.

LANGUAGE: bash
CODE:
npm install @mastra/astra

----------------------------------------

TITLE: Configuring TODO List Manager with Working Memory
DESCRIPTION: This code shows how to create a TODO list manager agent that maintains state using working memory, even with minimal context.

LANGUAGE: typescript
CODE:
const todoAgent = new Agent({
  name: "TODO Manager",
  instructions:
    "You are a TODO list manager. Update the todo list in working memory whenever tasks are added, completed, or modified.",
  model: openai("gpt-4o-mini"),
  memory: new Memory({
    options: {
      workingMemory: {
        enabled: true,

        // optional XML-like template to encourage agent to store specific kinds of info.
        // if you leave this out a default template will be used
        template: `<todos>
  <in-progress></in-progress>
  <pending></pending>
  <completed></completed>
</todos>`,
      },
      lastMessages: 1, // Only keep the last message in context
    },
  }),
});

----------------------------------------

TITLE: Adding a Step to a Workflow in TypeScript
DESCRIPTION: This snippet demonstrates how to use the `.step()` method to add a new step to a workflow. It includes defining the step ID, output schema, and execution function.

LANGUAGE: typescript
CODE:
workflow.step({
  id: "stepTwo",
  outputSchema: z.object({
    result: z.number()
  }),
  execute: async ({ context }) => {
    return { result: 42 };
  }
});

----------------------------------------

TITLE: Environment File Management in TypeScript
DESCRIPTION: Illustrates the getEnvFiles method implementation in the Deployer class. This method manages environment file detection for deployment, prioritizing .env.production and .env files.

LANGUAGE: typescript
CODE:
getEnvFiles(): Promise<string[]> {
  const possibleFiles = ['.env.production', '.env.local', '.env'];

  try {
    const fileService = new FileService();
    const envFile = fileService.getFirstExistingFile(possibleFiles);

    return Promise.resolve([envFile]);
  } catch {}

  return Promise.resolve([]);
}

----------------------------------------

TITLE: Retrieving System Logs with Filtering in Mastra using TypeScript
DESCRIPTION: This snippet demonstrates how to retrieve system logs using the Mastra client, with optional filtering based on transport ID. It uses the getLogs method to fetch the logs.

LANGUAGE: typescript
CODE:
const logs = await client.getLogs({
  transportId: "transport-1",
});

----------------------------------------

TITLE: Using VectorizeStore in TypeScript
DESCRIPTION: This snippet demonstrates how to use the VectorizeStore class from the @mastra/vectorize package. It shows how to initialize the store, create an index, add vectors, and query vectors. The code requires Vectorize API key and project ID as environment variables.

LANGUAGE: typescript
CODE:
import { VectorizeStore } from '@mastra/vectorize';

const vectorStore = new VectorizeStore({
  apiKey: process.env.VECTORIZE_API_KEY,
  projectId: process.env.VECTORIZE_PROJECT_ID
});

// Create a new index
await vectorStore.createIndex({
  indexName: 'my-index',
  dimension: 1536,
  metric: 'cosine'
});

// Add vectors
const vectors = [[0.1, 0.2, ...], [0.3, 0.4, ...]];
const metadata = [{ text: 'doc1' }, { text: 'doc2' }];
const ids = await vectorStore.upsert({
  indexName: 'my-index',
  vectors,
  metadata
});

// Query vectors
const results = await vectorStore.query({
  indexName: 'my-index',
  queryVector: [0.1, 0.2, ...],
  topK: 10,
  filter: { text: { $eq: 'doc1' } },
  includeVector: false
});

----------------------------------------

TITLE: Sequential Execution in Mastra Workflows
DESCRIPTION: Shows how to chain steps sequentially in a Mastra workflow when outputs from one step become inputs for the next.

LANGUAGE: typescript
CODE:
myWorkflow.step(fetchOrderData).then(validateData).then(processOrder);

----------------------------------------

TITLE: Configuring Memory Options in TypeScript
DESCRIPTION: This code shows how to configure memory options, including the number of recent messages to keep and settings for semantic recall using vector search.

LANGUAGE: typescript
CODE:
const memory = new Memory({
  options: {
    lastMessages: 5, // Keep 5 most recent messages
  },
});

// When user asks this question, the agent will see the last 10 messages,
await agent.stream("Can you summarize the search feature requirements?", {
  memoryOptions: {
    lastMessages: 10,
  },
});

----------------------------------------

TITLE: Installing @mastra/core Package
DESCRIPTION: This bash command installs the @mastra/core package, which is required for creating and using agents in Mastra.

LANGUAGE: bash
CODE:
npm install @mastra/core

----------------------------------------

TITLE: Single Dependency Branching Example in Mastra Workflows (TypeScript)
DESCRIPTION: Illustrates a practical example of branching after a single step (fetchData) in a workflow.

LANGUAGE: typescript
CODE:
workflow
  .step(fetchData)
  .then(processData)
  .after(fetchData)  // Branch after fetchData
  .step(logData);

----------------------------------------

TITLE: Execute Workflow with Custom Run ID
DESCRIPTION: Shows how to execute a workflow while specifying a custom run ID for tracking purposes.

LANGUAGE: typescript
CODE:
const result = await workflow.execute({
  runId: "custom-run-id",
  triggerData: { inputValue: 42 }
});

----------------------------------------

TITLE: Configuring Mastra Agent with Multiple Voice Providers in TypeScript
DESCRIPTION: This code snippet shows how to set up a Mastra agent using multiple voice providers for different operations. It uses the CompositeVoice class to combine OpenAI for listening and PlayAI for speaking.

LANGUAGE: typescript
CODE:
import { Agent } from "@mastra/core/agent";
import { CompositeVoice } from "@mastra/core/voice";
import { OpenAIVoice } from "@mastra/voice-openai";
import { PlayAIVoice } from "@mastra/voice-playai";
import { openai } from "@ai-sdk/openai";

export const agent = new Agent({
  name: "Agent",
  instructions: `You are a helpful assistant with both STT and TTS capabilities.`,
  model: openai("gpt-4o"),

  // Create a composite voice using OpenAI for listening and PlayAI for speaking
  voice: new CompositeVoice({
    listenProvider: new OpenAIVoice(),
    speakProvider: new PlayAIVoice(),
  }),
});

----------------------------------------

TITLE: Setting up environment variables for OpenAI API
DESCRIPTION: Demonstrates how to set up the OPENAI_API_KEY environment variable for use with the OpenAI API.

LANGUAGE: bash
CODE:
OPENAI_API_KEY=your_api_key_here

----------------------------------------

TITLE: Core MastraMCPClient Methods
DESCRIPTION: Essential methods for managing MCP server connections and retrieving resources and tools.

LANGUAGE: typescript
CODE:
async connect(): Promise<void>

LANGUAGE: typescript
CODE:
async disconnect(): Promise<void>

LANGUAGE: typescript
CODE:
async resources(): Promise<ListResourcesResult>

LANGUAGE: typescript
CODE:
async tools(): Promise<Record<string, Tool>>

----------------------------------------

TITLE: Installing Mastra Framework using NPX
DESCRIPTION: Command to create a new Mastra project using the create-mastra CLI tool, which sets up all necessary configurations automatically.

LANGUAGE: bash
CODE:
npx create-mastra@latest

----------------------------------------

TITLE: Basic Conditional Branching in Typescript Workflows
DESCRIPTION: Demonstrates the basic usage of .if() method in a workflow to create conditional branches based on context values.

LANGUAGE: typescript
CODE:
workflow
  .step(startStep)
  .if(async ({ context }) => {
    const value = context.getStepResult<{ value: number }>('start')?.value;
    return value < 10; // If true, execute the "if" branch
  })
  .then(ifBranchStep)
  .else()
  .then(elseBranchStep)
  .commit();

----------------------------------------

TITLE: Installing Mastra Project
DESCRIPTION: Commands for cloning the Mastra repository and navigating to the completeness example directory.

LANGUAGE: bash
CODE:
git clone https://github.com/mastra-ai/mastra
cd examples/basics/evals/completeness

----------------------------------------

TITLE: Executing Workflow via API
DESCRIPTION: Demonstrates how to execute a workflow using the HTTP API endpoint

LANGUAGE: bash
CODE:
curl --location 'http://localhost:4111/api/workflows/myWorkflow/execute' \
     --header 'Content-Type: application/json' \
     --data '{
       "inputValue": 45
     }'

----------------------------------------

TITLE: Running the Example
DESCRIPTION: Command to start the example project for inserting embeddings in pgvector.

LANGUAGE: bash
CODE:
pnpm start

----------------------------------------

TITLE: Multiple Dependencies (Merging Branches) Example in Mastra Workflows (TypeScript)
DESCRIPTION: Demonstrates a more complex scenario where a step (processOrder) waits for multiple previous steps to complete before executing.

LANGUAGE: typescript
CODE:
workflow
  .step(fetchUserData)
  .then(validateUserData)
  .step(fetchProductData)
  .then(validateProductData)
  .after([validateUserData, validateProductData])  // Wait for both validations to complete
  .step(processOrder);

----------------------------------------

TITLE: Implementing Sarvam Voice with TypeScript
DESCRIPTION: Complete example showing voice initialization, agent creation, and speech generation including file handling and streaming capabilities

LANGUAGE: typescript
CODE:
import { SarvamVoice } from '@mastra/voice-sarvam';

const voice = new CompositeVoice({
  speakProvider: new SarvamVoice({
    speechModel: { apiKey: 'YOUR-API-KEY' },
    speaker: 'meera',
  }),
});

// Create an agent with voice capabilities
export const agent = new Agent({
  name: 'Agent',
  instructions: `You are a helpful assistant with voice capabilities.`,
  model: google('gemini-1.5-pro-latest'),
  voice: voice,
});

// List available speakers
const speakers = await voice.getSpeakers();

// Generate speech and save to file
const audio = await agent.speak("Hello, I'm your AI assistant!");
const filePath = path.join(process.cwd(), 'agent.mp3');
const writer = createWriteStream(filePath);

audio.pipe(writer);

await new Promise<void>((resolve, reject) => {
  writer.on('finish', () => resolve());
  writer.on('error', reject);
});

// Generate speech from a text stream
const textStream = getTextStream(); // Your text stream source
const audioStream = await voice.speak(textStream);

// The stream can be piped to a destination
const streamFilePath = path.join(process.cwd(), 'stream.mp3');
const streamWriter = createWriteStream(streamFilePath);

audioStream.pipe(streamWriter);

console.log(`Speech saved to ${filePath} and ${streamFilePath}`);

----------------------------------------

TITLE: Configuring Tone Consistency Metric in TypeScript
DESCRIPTION: Initialize the ToneConsistencyMetric object for use in sentiment analysis.

LANGUAGE: typescript
CODE:
const metric = new ToneConsistencyMetric();

----------------------------------------

TITLE: Configuring Next.js for Mastra
DESCRIPTION: Next.js configuration setup to support Mastra external packages

LANGUAGE: javascript
CODE:
/** @type {import('next').NextConfig} */
const nextConfig = {
  serverExternalPackages: ["@mastra/*"],
  // ... your other Next.js config
}

module.exports = nextConfig

----------------------------------------

TITLE: Configuring Tone Consistency Metric in TypeScript
DESCRIPTION: Initialize the ToneConsistencyMetric object for use in sentiment analysis.

LANGUAGE: typescript
CODE:
const metric = new ToneConsistencyMetric();

----------------------------------------

TITLE: Retrieving Tools from MCPConfiguration in TypeScript
DESCRIPTION: The getTools() method retrieves all tools from all configured servers, with tool names namespaced by their server name. It's intended to be used when creating an Agent instance.

LANGUAGE: typescript
CODE:
new Agent({ tools: await mcp.getTools() });

----------------------------------------

TITLE: Message Interface Definition in TypeScript
DESCRIPTION: TypeScript interface defining the structure of message objects that can be passed to the generate() method. Messages have a role (system, user, or assistant) and content properties.

LANGUAGE: typescript
CODE:
interface Message {
  role: 'system' | 'user' | 'assistant';
  content: string;
}

----------------------------------------

TITLE: Running the Mastra Server
DESCRIPTION: Command to start the built Mastra HTTP server from the output directory.

LANGUAGE: bash
CODE:
node .mastra/index.js

----------------------------------------

TITLE: Testing Multiple Bias Types with BiasMetric
DESCRIPTION: Advanced example showing how to test for different types of bias including political bias and workplace dynamics using Promise.all for concurrent evaluation.

LANGUAGE: typescript
CODE:
import { openai } from "@ai-sdk/openai";
import { BiasMetric } from "@mastra/evals/llm";

// Configure the model for evaluation
const model = openai("gpt-4o-mini");

const metric = new BiasMetric(model);

// Testing for different types of bias
const results = await Promise.all([
  metric.measure(
    "Describe voting patterns",
    "These radical right-wing voters consistently vote against their interests..."
  ),
  metric.measure(
    "Describe workplace dynamics",
    "Modern offices have diverse teams working together based on merit..."
  )
]);

// Example outputs:
// Political bias example: { score: 1.0 }
// Unbiased example: { score: 0.0 }

----------------------------------------

TITLE: Initializing Workflow Steps in TypeScript using Mastra
DESCRIPTION: Creates four workflow steps with different data processing logic and initializes a workflow with a trigger schema. Steps include operations for doubling, incrementing, tripling values and checking even numbers.

LANGUAGE: typescript
CODE:
import { Step, Workflow } from "@mastra/core/workflows";
import { z } from "zod";

const stepOne = new Step({
  id: "stepOne",
  execute: async ({ context }) => ({
    doubledValue: context.triggerData.inputValue * 2,
  }),
});

const stepTwo = new Step({
  id: "stepTwo",
  execute: async ({ context }) => {
    if (context.steps.stepOne.status !== "success") {
      return { incrementedValue: 0 }
    }

    return { incrementedValue: context.steps.stepOne.output.doubledValue + 1 }
  },
});

const stepThree = new Step({
  id: "stepThree",
  execute: async ({ context }) => ({
    tripledValue: context.triggerData.inputValue * 3,
  }),
});

const stepFour = new Step({
  id: "stepFour",
  execute: async ({ context }) => {
    if (context.steps.stepThree.status !== "success") {
      return { isEven: false }
    }

    return { isEven: context.steps.stepThree.output.tripledValue % 2 === 0 }
  },
});

const myWorkflow = new Workflow({
  name: "my-workflow",
  triggerSchema: z.object({
    inputValue: z.number(),
  }),
});

----------------------------------------

TITLE: Initializing and Using KeywordCoverageMetric in TypeScript
DESCRIPTION: This snippet demonstrates how to import, initialize, and use the KeywordCoverageMetric class to measure keyword coverage between input and output texts.

LANGUAGE: typescript
CODE:
import { KeywordCoverageMetric } from "@mastra/evals/nlp";

const metric = new KeywordCoverageMetric();

const result = await metric.measure(
  "What are the key features of Python programming language?",
  "Python is a high-level programming language known for its simple syntax and extensive libraries."
);

console.log(result.score); // Coverage score from 0-1
console.log(result.info); // Object containing detailed metrics about keyword coverage

----------------------------------------

TITLE: Function Condition Implementation in Typescript
DESCRIPTION: Shows how to implement a function-based condition that evaluates step results to determine workflow branching.

LANGUAGE: typescript
CODE:
workflow
  .step(startStep)
  .if(async ({ context }) => {
    const result = context.getStepResult<{ status: string }>('start');
    return result?.status === 'success'; // Execute "if" branch when status is "success"
  })
  .then(successStep)
  .else()
  .then(failureStep);

----------------------------------------

TITLE: Configuring Mastra for Next.js Integration (TypeScript)
DESCRIPTION: Sets up the Mastra instance with telemetry enabled for integration with a Next.js application. This configuration enables OpenTelemetry tracing for both Next.js and Mastra operations.

LANGUAGE: typescript
CODE:
import { Mastra } from "@mastra/core";

export const mastra = new Mastra({
  // ... other config
  telemetry: {
    serviceName: "your-project-name",
    enabled: true
  }
});

----------------------------------------

TITLE: Creating a Conversation Thread in Typescript using Mastra Memory
DESCRIPTION: This snippet demonstrates how to create a new conversation thread using the Memory class from the @mastra/memory package. It includes setting a resource ID, title, and metadata for the thread.

LANGUAGE: typescript
CODE:
import { Memory } from "@mastra/memory";

const memory = new Memory({ /* config */ });
const thread = await memory.createThread({
  resourceId: "user-123",
  title: "Support Conversation",
  metadata: {
    category: "support",
    priority: "high"
  }
});

----------------------------------------

TITLE: Full Word Inclusion Example in TypeScript
DESCRIPTION: Demonstrates the usage of WordInclusionMetric when all specified words are present in the output. It initializes the metric with a set of words, provides input and output, and logs the result.

LANGUAGE: typescript
CODE:
const words1 = ['apple', 'banana', 'orange'];
const metric1 = new WordInclusionMetric(words1);

const input1 = 'List some fruits';
const output1 = 'Here are some fruits: apple, banana, and orange.';

const result1 = await metric1.measure(input1, output1);
console.log('Metric Result:', {
  score: result1.score,
  info: result1.info,
});
// Example Output:
// Metric Result: { score: 1, info: { totalWords: 3, matchedWords: 3 } }

----------------------------------------

TITLE: Retrieving Metadata from MDocument Chunks in TypeScript
DESCRIPTION: Instance method to get an array of metadata objects from the document chunks.

LANGUAGE: typescript
CODE:
getMetadata(): Record<string, any>[]

----------------------------------------

TITLE: Accessing Workflow Results in Mastra
DESCRIPTION: Demonstrates how to get typed access to the results of a Mastra workflow by injecting step types into the Workflow type parameters.

LANGUAGE: typescript
CODE:
import { Workflow } from "@mastra/core/workflows";

const fetchUserStep = new Step({
  id: "fetchUser",
  outputSchema: z.object({
    userId: z.string(),
    name: z.string(),
    email: z.string(),
  }),
  execute: async () => {
    return {
      userId: "user123",
      name: "John Doe",
      email: "john@example.com"
    };
  },
});

const processOrderStep = new Step({
  id: "processOrder",
  outputSchema: z.object({
    orderId: z.string(),
    status: z.string(),
  }),
  execute: async ({ context }) => {
    const userData = context.getStepResult(fetchUserStep);
    return {
      orderId: "order123",
      status: "processing"
    };
  },
});

const workflow = new Workflow<[typeof fetchUserStep, typeof processOrderStep]>({
  name: "typed-workflow",
});

workflow
  .step(fetchUserStep)
  .then(processOrderStep)
  .commit();

const run = workflow.createRun();
const result = await run.start();

if (result.results.processOrder.status === 'success') {
  const orderId = result.results.processOrder.output.orderId;
  console.log({orderId});
}

if (result.results.fetchUser.status === 'success') {
  const userId = result.results.fetchUser.output.userId;
  console.log({userId});
}

----------------------------------------

TITLE: Configuring Bias metric with OpenAI model
DESCRIPTION: Initializes the BiasMetric instance using the OpenAI GPT-4 mini model.

LANGUAGE: typescript
CODE:
const metric = new BiasMetric(openai('gpt-4o-mini'));

----------------------------------------

TITLE: Querying Vectors in Mastra (TypeScript)
DESCRIPTION: Search for similar vectors with optional metadata filtering and vector inclusion in results.

LANGUAGE: typescript
CODE:
const results = await vector.query({
  indexName: "my-index",
  queryVector: [0.1, 0.2, 0.3],
  topK: 10,
  filter: { label: "first" }, // Optional: Metadata filter
  includeVector: true, // Optional: Include vectors in results
});

----------------------------------------

TITLE: Creating Chat Component with AI SDK useChat Hook
DESCRIPTION: Implements a React chat component using AI SDK's useChat hook. Handles message display, input management, and form submission.

LANGUAGE: typescript
CODE:
import { useChat } from '@ai-sdk/react';

export function ChatComponent() {
  const { messages, input, handleInputChange, handleSubmit } = useChat({
    api: '/path-to-your-agent-stream-api-endpoint'
  });

  return (
    <div>
      {messages.map(m => (
        <div key={m.id}>
          {m.role}: {m.content}
        </div>
      ))}
      <form onSubmit={handleSubmit}>
        <input
          value={input}
          onChange={handleInputChange}
          placeholder="Say something..."
        />
      </form>
    </div>
  );
}

----------------------------------------

TITLE: Configuring Vitest Test Setup for Mastra
DESCRIPTION: Test setup configuration to attach Mastra eval listeners before running tests.

LANGUAGE: typescript
CODE:
import { beforeAll } from 'vitest';
import { attachListeners } from '@mastra/evals';

beforeAll(async () => {
  await attachListeners();
});

----------------------------------------

TITLE: Cloning Repository and Navigation
DESCRIPTION: Commands to clone the mastra repository and navigate to the workflow example directory.

LANGUAGE: bash
CODE:
git clone https://github.com/mastra-ai/mastra
cd examples/basics/agents/using-a-workflow

----------------------------------------

TITLE: Fetching Tool Details in TypeScript
DESCRIPTION: Retrieves detailed information about a specific tool instance.

LANGUAGE: typescript
CODE:
const details = await tool.details();

----------------------------------------

TITLE: Configuring OpenAI API Key
DESCRIPTION: Environment variable configuration for OpenAI API authentication.

LANGUAGE: env
CODE:
OPENAI_API_KEY=sk-your-api-key-here

----------------------------------------

TITLE: Mastra CLI Command Arguments
DESCRIPTION: List of available arguments for Mastra CLI commands. These arguments allow specifying components, LLM provider, example inclusion, and API key during project setup.

LANGUAGE: bash
CODE:
Arguments:
  --components     Specify components: agents, memory, storage
  --llm-provider   LLM provider: openai, anthropic
  --add-example   Include example implementation
  --llm-api-key   Provider API key

----------------------------------------

TITLE: Setting up File-based Logger in TypeScript
DESCRIPTION: Instantiates a file-based logger for structured logging with a specified file path and warning level. Requires the FileTransport from @mastra/loggers/file.

LANGUAGE: typescript
CODE:
import { FileTransport } from "@mastra/loggers/file";

const fileLogger = createLogger({
  name: "Mastra",
  transports: { file: new FileTransport({ path: "test-dir/test.log" }) },
  level: "warn",
});
fileLogger.warn("Low disk space", {
  destinationPath: "system",
  type: "WORKFLOW",
});

----------------------------------------

TITLE: Query Object-Based Condition in Mastra Workflows
DESCRIPTION: Shows how to use a query object to specify a condition for step execution in a Mastra workflow.

LANGUAGE: typescript
CODE:
myWorkflow.step(
  new Step({
    id: "processData",
    execute: async ({ context }) => {
      // Action logic
    },
  }),
  {
    when: {
      ref: {
        step: {
          id: "fetchData",
        },
        path: "status",
      },
      query: { $eq: "success" },
    },
  },
);

----------------------------------------

TITLE: Creating Todo List Agent with OpenAI Integration
DESCRIPTION: Instantiates an Agent with todo list management instructions and configured memory system.

LANGUAGE: typescript
CODE:
import { openai } from "@ai-sdk/openai";

const todoAgent = new Agent({
  name: "TODO Agent",
  instructions:
    "You are a helpful todolist AI agent. Help the user manage their todolist. If there is no list yet ask them what to add! If there is a list always print it out when the chat starts. For each item add emojis, dates, titles (with an index number starting at 1), descriptions, and statuses. For each piece of info add an emoji to the left of it. Also support subtask lists with bullet points inside a box. Help the user timebox each task by asking them how long it will take.",
  model: openai("gpt-4o-mini"),
  memory,
});

----------------------------------------

TITLE: Upserting Vectors in Mastra (TypeScript)
DESCRIPTION: Add or update vectors in an index, including optional metadata and custom IDs.

LANGUAGE: typescript
CODE:
const ids = await vector.upsert({
  indexName: "my-index",
  vectors: [
    [0.1, 0.2, 0.3], // First vector
    [0.4, 0.5, 0.6], // Second vector
  ],
  metadata: [{ label: "first" }, { label: "second" }],
  ids: ["id1", "id2"], // Optional: Custom IDs
});

----------------------------------------

TITLE: Using Mastra Build Command in Bash
DESCRIPTION: Demonstrates how to use the 'mastra build' command to compile a Mastra project. It shows the basic usage and an example with a custom directory option.

LANGUAGE: bash
CODE:
mastra build [options]

LANGUAGE: bash
CODE:
# Build from current directory
mastra build

# Build from specific directory
mastra build --dir ./my-mastra-project

----------------------------------------

TITLE: Running the Example
DESCRIPTION: Command to start the chunk delimiters example application.

LANGUAGE: bash
CODE:
pnpm start

----------------------------------------

TITLE: Wrangler Configuration Example
DESCRIPTION: Sample wrangler.json configuration that is automatically generated by CloudflareDeployer. Includes project settings, compatibility flags, and observability options.

LANGUAGE: json
CODE:
{
  "name": "your-project-name",
  "main": "./output/index.mjs",
  "compatibility_date": "2024-12-02",
  "compatibility_flags": ["nodejs_compat"],
  "observability": {
    "logs": {
      "enabled": true
    }
  },
  "vars": {
    // Environment variables from .env files and configuration
  },
  "routes": [
    // Route configurations if specified
  ]
}

----------------------------------------

TITLE: Initializing and Using Mastra Client in TypeScript
DESCRIPTION: Example of how to initialize the Mastra Client and use it to interact with an agent. It demonstrates client initialization and generating a response from an agent.

LANGUAGE: typescript
CODE:
import { MastraClient } from '@mastra/client';

// Initialize the client
const client = new MastraClient({
  baseUrl: 'http://localhost:4111', // Your Mastra API endpoint
});

// Example: Working with an Agent
async function main() {
  // Get an agent instance
  const agent = client.getAgent('your-agent-id');

  // Generate a response
  const response = await agent.generate({
    messages: [{ role: 'user', content: "What's the weather like today?" }],
  });

  console.log(response);
}

----------------------------------------

TITLE: Installing Project Dependencies
DESCRIPTION: Command to install required project dependencies using pnpm package manager.

LANGUAGE: bash
CODE:
pnpm install

----------------------------------------

TITLE: Retrieving Agent Tool Information in TypeScript
DESCRIPTION: This code shows how to retrieve information about a specific tool available to a Mastra AI agent using its tool ID.

LANGUAGE: typescript
CODE:
const tool = await agent.getTool("tool-id");

----------------------------------------

TITLE: Installing Mastra Project
DESCRIPTION: Commands for cloning the Mastra repository and navigating to the contextual recall example directory.

LANGUAGE: bash
CODE:
git clone https://github.com/mastra-ai/mastra
cd examples/basics/evals/contextual-recall

----------------------------------------

TITLE: Initializing Mastra Project
DESCRIPTION: Commands to initialize a Mastra project after setup. This includes installing dependencies, starting the development server, and accessing the playground.

LANGUAGE: bash
CODE:
# Install dependencies
npm install

# Start development server on port 4111
mastra dev

# Access playground at http://localhost:4111

----------------------------------------

TITLE: Merging Multiple Branches in Mastra Workflows
DESCRIPTION: Demonstrates how to use the compound .after([]) syntax to specify multiple dependencies for a step in a Mastra workflow.

LANGUAGE: typescript
CODE:
myWorkflow
  .step(fetchUserData)
  .then(validateUserData)
  .step(fetchProductData)
  .then(validateProductData)
  .after([validateUserData, validateProductData])
  .step(processOrder)

----------------------------------------

TITLE: Importing Textual Difference Metric in TypeScript
DESCRIPTION: Import statement for the TextualDifferenceMetric from Mastra's evals/nlp package.

LANGUAGE: typescript
CODE:
import { TextualDifferenceMetric } from '@mastra/evals/nlp';

----------------------------------------

TITLE: MastraMCPClient with Stdio Server Example
DESCRIPTION: Complete example demonstrating how to use MastraMCPClient with a Stdio server implementation and Mastra Agent integration.

LANGUAGE: typescript
CODE:
import { Agent } from "@mastra/core/agent";
import { MastraMCPClient } from "@mastra/mcp";
import { openai } from "@ai-sdk/openai";

// Initialize the MCP client using mcp/fetch as an example https://hub.docker.com/r/mcp/fetch
// Visit https://github.com/docker/mcp-servers for other reference docker mcp servers
const fetchClient = new MastraMCPClient({
  name: "fetch",
  server: {
    command: "docker",
    args: ["run", "-i", "--rm", "mcp/fetch"],
  },
});

// Create a Mastra Agent
const agent = new Agent({
  name: "Fetch agent",
  instructions:
    "You are able to fetch data from URLs on demand and discuss the response data with the user.",
  model: openai("gpt-4o-mini"),
});

try {
  // Connect to the MCP server
  await fetchClient.connect();

  // Gracefully handle process exits so the docker subprocess is cleaned up
  process.on("exit", () => {
    fetchClient.disconnect();
  });

  // Get available tools
  const tools = await fetchClient.tools();

  // Use the agent with the MCP tools
  const response = await agent.generate(
    "Tell me about mastra.ai/docs. Tell me generally what this page is and the content it includes.",
    {
      toolsets: {
        fetch: tools,
      },
    },
  );

  console.log("\n\n" + response.text);
} catch (error) {
  console.error("Error:", error);
} finally {
  // Always disconnect when done
  await fetchClient.disconnect();
}

----------------------------------------

TITLE: Retrieving Processed Chunks from MDocument in TypeScript
DESCRIPTION: Instance method to get the array of processed document chunks.

LANGUAGE: typescript
CODE:
getDocs(): Chunk[]

----------------------------------------

TITLE: Using Step References in Mastra Workflows
DESCRIPTION: Shows how to use step references for the most type-safe approach to accessing step results in a Mastra workflow.

LANGUAGE: typescript
CODE:
import { Step, Workflow } from "@mastra/core/workflows";
import { z } from "zod";

const fetchUserStep = new Step({
  id: "fetchUser",
  outputSchema: z.object({
    userId: z.string(),
    name: z.string(),
    email: z.string(),
  }),
  execute: async () => {
    return {
      userId: "user123",
      name: "John Doe",
      email: "john@example.com"
    };
  },
});

const processUserStep = new Step({
  id: "processUser",
  execute: async ({ context }) => {
    // TypeScript will infer the correct type from fetchUserStep's outputSchema
    const userData = context.getStepResult(fetchUserStep);

    return {
      processed: true,
      userName: userData?.name
    };
  },
});

const workflow = new Workflow({
  name: "user-workflow",
});

workflow
  .step(fetchUserStep)
  .then(processUserStep)
  .commit();

----------------------------------------

TITLE: Generated Mastra Project Structure
DESCRIPTION: The directory structure of a newly created Mastra project. It includes a src folder with a mastra subfolder containing the entry point, along with package.json and tsconfig.json files.

LANGUAGE: plaintext
CODE:
my-project/
├── src/
│   └── mastra/
│       └── index.ts    # Mastra entry point
├── package.json
└── tsconfig.json

----------------------------------------

TITLE: Initializing Telemetry
DESCRIPTION: Configures OpenTelemetry integration for monitoring AI system performance.

LANGUAGE: typescript
CODE:
import { Telemetry } from '@mastra/core';

const telemetry = Telemetry.init({
  serviceName: 'my-service',
});

----------------------------------------

TITLE: Configuring Netlify Deployment Settings
DESCRIPTION: Default Netlify configuration setup using netlify.toml, specifying function settings and redirect rules for the API endpoint.

LANGUAGE: toml
CODE:
[functions]
node_bundler = "esbuild"            
directory = "netlify/functions"

[[redirects]]
force = true
from = "/*"
status = 200
to = "/.netlify/functions/api/:splat"

----------------------------------------

TITLE: Evaluating Inaccurate Summary with Summarization Metric in TypeScript
DESCRIPTION: Illustrates evaluation of a summary that contains factual errors and misrepresentations using the Summarization metric.

LANGUAGE: typescript
CODE:
const input3 = `The World Wide Web was invented by Tim Berners-Lee in 1989 while working at CERN. 
He published the first website in 1991. Berners-Lee made the Web freely available, with no patent 
and no royalties due.`;

const output3 = `The Internet was created by Tim Berners-Lee at MIT in the early 1990s, and he went 
on to commercialize the technology through patents.`;

console.log('Example 3 - Inaccurate Summary:');
console.log('Input:', input3);
console.log('Output:', output3);

const result3 = await metric.measure(input3, output3);
console.log('Metric Result:', {
  score: result3.score,
  info: {
    reason: result3.info.reason,
    alignmentScore: result3.info.alignmentScore,
    coverageScore: result3.info.coverageScore,
  },
});

----------------------------------------

TITLE: Retrieving All Workflows in TypeScript
DESCRIPTION: Fetches a list of all available workflows using the client instance.

LANGUAGE: typescript
CODE:
const workflows = await client.getWorkflows();

----------------------------------------

TITLE: Copying Environment Variables File
DESCRIPTION: Command to create a copy of the example environment variables file for configuration.

LANGUAGE: bash
CODE:
cp .env.example .env

----------------------------------------

TITLE: Configuring Agent with GitHub Tool
DESCRIPTION: Example of setting up an agent with the GitHub integration tool.

LANGUAGE: typescript
CODE:
import { openai } from '@ai-sdk/openai';
import { Agent } from '@mastra/core';
import { getMainBranchRef } from '../tools';

export const codeReviewAgent = new Agent({
  name: 'Code Review Agent',
  instructions: 'An agent that reviews code repositories and provides feedback.',
  model: openai('gpt-4o-mini'),
  tools: {
    getMainBranchRef,
    // other tools...
  },
});

----------------------------------------

TITLE: Basic Document Chunking with Mastra
DESCRIPTION: Demonstrates basic document chunking using default settings and markdown-specific chunking with header extraction and metadata fields.

LANGUAGE: typescript
CODE:
import { Document } from '@mastra/core';

const doc = new Document(`
# Introduction
This is a sample document that we want to split into chunks.

## Section 1
Here is the first section with some content.

## Section 2 
Here is another section with different content.
`);

// Basic chunking with defaults
const chunks = await doc.chunk();

// Markdown-specific chunking with header extraction
const chunksWithMetadata = await doc.chunk({
  strategy: 'markdown',
  headers: [['#', 'title'], ['##', 'section']],
  extract: {
    fields: [
      { name: 'summary', description: 'A brief summary of the chunk content' },
      { name: 'keywords', description: 'Key terms found in the chunk' }
    ]
  }
});

----------------------------------------

TITLE: Using 'until' for Condition-Based Loops in Mastra Workflows
DESCRIPTION: Demonstrates how to use the 'until' method to repeat a step until a specified condition becomes true in a Mastra workflow.

LANGUAGE: typescript
CODE:
workflow
  .step(incrementStep)
  .until(async ({ context }) => {
    const result = context.getStepResult(incrementStep);
    return (result?.value ?? 0) >= 10;
  }, incrementStep)
  .then(finalStep);

----------------------------------------

TITLE: Setting Speechify API Key
DESCRIPTION: Sets the Speechify API key as an environment variable for authentication

LANGUAGE: bash
CODE:
export SPEECHIFY_API_KEY=your_api_key_here

----------------------------------------

TITLE: Creating New Mastra Project with npm
DESCRIPTION: Use npm to create a new Mastra project. This command initializes a new project with the latest version of Mastra.

LANGUAGE: bash
CODE:
npm create mastra@latest

----------------------------------------

TITLE: Configuring Basic Console Logger in Mastra (TypeScript)
DESCRIPTION: Sets up a console logger at the INFO level in Mastra. This configuration prints informational messages and above to the console, grouping logs under the 'Mastra' name.

LANGUAGE: typescript
CODE:
import { Mastra } from "@mastra/core";
import { createLogger } from "@mastra/core/logger";

export const mastra = new Mastra({
  // Other Mastra configuration...
  logger: createLogger({
    name: "Mastra",
    level: "info",
  }),
});

----------------------------------------

TITLE: Configuring Routes for Cloudflare Workers
DESCRIPTION: Example of configuring multiple routes for a Cloudflare Worker, including custom domain and API endpoint patterns.

LANGUAGE: typescript
CODE:
const routes = [
  {
    pattern: 'api.example.com/*',
    zone_name: 'example.com',
    custom_domain: true,
  },
  {
    pattern: 'example.com/api/*',
    zone_name: 'example.com',
  },
];

----------------------------------------

TITLE: Using AzureTTS for Text-to-Speech in TypeScript
DESCRIPTION: This code snippet illustrates how to initialize and use the AzureTTS class for generating speech and streaming audio in TypeScript.

LANGUAGE: typescript
CODE:
import { AzureTTS } from '@mastra/speech-azure';

// Initialize with configuration
const tts = new AzureTTS({
  model: {
    name: 'en-US-AriaNeural', // Default voice
    apiKey: 'your-api-key', // Optional, can use AZURE_API_KEY env var
    region: 'your-region', // Optional, can use AZURE_REGION env var
  },
});

// List available voices
const voices = await tts.voices();

// Generate speech
const result = await tts.generate({
  voice: 'en-US-AriaNeural',
  text: 'Hello from Mastra!',
});

// Stream speech
const stream = await tts.stream({
  voice: 'en-US-AriaNeural',
  text: 'Hello from Mastra!',
});

----------------------------------------

TITLE: Using LibSQLVector Store in TypeScript
DESCRIPTION: Example of creating a LibSQLVector instance, creating an index, adding vectors with metadata, and querying similar vectors with optional filtering.

LANGUAGE: typescript
CODE:
import { LibSQLVector } from "@mastra/core/vector/libsql";

// Create a new vector store instance
const store = new LibSQLVector({
  connectionUrl: process.env.DATABASE_URL,
  // Optional: for Turso cloud databases
  authToken: process.env.DATABASE_AUTH_TOKEN,
});

// Create an index
await store.createIndex({
  indexName: "my-collection",
  dimension: 1536,
});

// Add vectors with metadata
const vectors = [[0.1, 0.2, ...], [0.3, 0.4, ...]];
const metadata = [
  { text: "first document", category: "A" },
  { text: "second document", category: "B" }
];
await store.upsert({
  indexName: "my-collection",
  vectors,
  metadata,
});

// Query similar vectors
const queryVector = [0.1, 0.2, ...];
const results = await store.query({
  indexName: "my-collection",
  queryVector,
  topK: 10, // top K results
  filter: { category: "A" } // optional metadata filter
});

----------------------------------------

TITLE: Initializing and Using BiasMetric with OpenAI Model
DESCRIPTION: Basic example demonstrating how to initialize and use the BiasMetric class with an OpenAI model to evaluate bias in LLM responses.

LANGUAGE: typescript
CODE:
import { openai } from "@ai-sdk/openai";
import { BiasMetric } from "@mastra/evals/llm";

// Configure the model for evaluation
const model = openai("gpt-4o-mini");

const metric = new BiasMetric(model, {
  scale: 1
});

const result = await metric.measure(
  "Describe leadership qualities in the workplace",
  "Strong leaders are typically men who can make tough decisions..."
);

console.log(result.score); // Score from 0-1, higher means more biased

----------------------------------------

TITLE: Configuring Local Development Client
DESCRIPTION: Basic setup for local development with the Mastra client pointing to a local server.

LANGUAGE: typescript
CODE:
const client = new MastraClient({
  baseUrl: "http://localhost:4111", // Default Mastra server port
});

----------------------------------------

TITLE: Configuring Environment Variables
DESCRIPTION: This snippet shows the structure of the .env file and where to add the OpenAI API key and Postgres connection string.

LANGUAGE: env
CODE:
OPENAI_API_KEY=sk-your-api-key-here
POSTGRES_CONNECTION_STRING=your-postgres-connection-string-here

----------------------------------------

TITLE: Creating Mastra Project with Specific Components and LLM Provider
DESCRIPTION: Example command to create a Mastra project with specific components (agents and tools) and using Anthropic as the LLM provider.

LANGUAGE: bash
CODE:
npx create-mastra@latest -c agents,tools -l anthropic

----------------------------------------

TITLE: Importing dependencies for Contextual Recall evaluation
DESCRIPTION: Shows how to import the necessary dependencies from OpenAI and Mastra for implementing the Contextual Recall metric.

LANGUAGE: typescript
CODE:
import { openai } from '@ai-sdk/openai';
import { ContextualRecallMetric } from '@mastra/evals/llm';

----------------------------------------

TITLE: Copying Environment Variables File
DESCRIPTION: Command to create a copy of the example environment variables file.

LANGUAGE: bash
CODE:
cp .env.example .env

----------------------------------------

TITLE: Retrieving Toolsets from MCPConfiguration in TypeScript
DESCRIPTION: The getToolsets() method returns an object mapping namespaced tool names to their implementations. It's intended to be passed dynamically into the generate or stream method of an agent.

LANGUAGE: typescript
CODE:
const res = await agent.stream(prompt, {
  toolsets: await mcp.getToolsets(),
});

----------------------------------------

TITLE: Demonstrating Clear Intent in TypeScript Prompts
DESCRIPTION: This snippet shows the difference between vague and clear intent in prompt creation. It emphasizes the importance of specificity in instructing the AI model.

LANGUAGE: typescript
CODE:
// ❌ Vague intent
createPrompt('fix this');

// ✅ Clear intent
createPrompt('Add type checking to this function');

----------------------------------------

TITLE: Comparing Texts with Major Differences
DESCRIPTION: Example of comparing two significantly different text strings, showing low similarity scores and higher change counts.

LANGUAGE: typescript
CODE:
const input3 = 'Python is a high-level programming language';
const output3 = 'JavaScript is used for web development';

console.log('Example 3 - Major Differences:');
console.log('Input:', input3);
console.log('Output:', output3);

const result3 = await metric.measure(input3, output3);
console.log('Metric Result:', {
  score: result3.score,
  info: {
    confidence: result3.info.confidence,
    ratio: result3.info.ratio,
    changes: result3.info.changes,
    lengthDiff: result3.info.lengthDiff,
  },
});

----------------------------------------

TITLE: Creating MDocument from JSON in TypeScript
DESCRIPTION: Static method to create an MDocument instance from JSON content.

LANGUAGE: typescript
CODE:
static fromJSON(json: string, metadata?: Record<string, any>): MDocument

----------------------------------------

TITLE: Implementing LangSmith Integration in TypeScript
DESCRIPTION: TypeScript code showing how to configure Mastra with LangSmith integration using the AISDKExporter. Sets up telemetry with custom export configuration.

LANGUAGE: typescript
CODE:
import { Mastra } from "@mastra/core";
import { AISDKExporter } from "langsmith/vercel";

export const mastra = new Mastra({
  // ... other config
  telemetry: {
    serviceName: "your-service-name",
    enabled: true,
    export: {
      type: "custom",
      exporter: new AISDKExporter(),
    },
  },
});

----------------------------------------

TITLE: Initializing and Using Google Voice in TypeScript
DESCRIPTION: This snippet demonstrates how to initialize the GoogleVoice class with default and custom configurations, and how to use its speak, listen, and getSpeakers methods. It covers text-to-speech, speech-to-text, and retrieving available voices.

LANGUAGE: typescript
CODE:
import { GoogleVoice } from "@mastra/voice-google";

// Initialize with default configuration (uses GOOGLE_API_KEY environment variable)
const voice = new GoogleVoice();

// Initialize with custom configuration
const voice = new GoogleVoice({
  speechModel: {
    apiKey: 'your-speech-api-key',
  },
  listeningModel: {
    apiKey: 'your-listening-api-key',
  },
  speaker: 'en-US-Casual-K',
});

// Text-to-Speech
const audioStream = await voice.speak("Hello, world!", {
  languageCode: 'en-US',
  audioConfig: {
    audioEncoding: 'LINEAR16',
  },
});

// Speech-to-Text
const transcript = await voice.listen(audioStream, {
  config: {
    encoding: 'LINEAR16',
    languageCode: 'en-US',
  },
});

// Get available voices for a specific language
const voices = await voice.getSpeakers({ languageCode: 'en-US' });

----------------------------------------

TITLE: Configuring and Executing the Workflow
DESCRIPTION: Set up the complete workflow with trigger schema, chain the steps together, and execute the workflow with sample input data.

LANGUAGE: typescript
CODE:
const myWorkflow = new Workflow({
  name: "my-workflow",
  triggerSchema: z.object({
    topic: z.string(),
  }),
});

// Run steps sequentially.
myWorkflow.step(copywriterStep).then(editorStep).commit();

const { runId, start } = myWorkflow.createRun();

const res = await start({
  triggerData: { topic: "React JavaScript frameworks" },
});
console.log("Results: ", res.results);

----------------------------------------

TITLE: Implementing Tool Integration in TypeScript
DESCRIPTION: Demonstrates how to create and add a custom tool to extend the voice instance's capabilities.

LANGUAGE: typescript
CODE:
export const menuTool = createTool({
  id: 'menuTool',
  description: 'Get menu items',
  inputSchema: z
    .object({
      query: z.string(),
    })
    .required(),
  execute: async ({ context }) => {
    // Implement menu search functionality
  },
});

voice.addTools(menuTool);

----------------------------------------

TITLE: Enhancing Mastra Create Command
DESCRIPTION: Adds a new flag to the 'mastra create' command for specifying project names and updates the playground UI.

LANGUAGE: markdown
CODE:
- 5052613: Added a new `mastra create --project-name <string>` flag so coder agents can create new Mastra projects with a one line command.
- 1291e89: Add resizable-panel to playground-ui and use in agent and workflow sidebars
- 9ba1e97: update playground ui for mastra and create-mastra

----------------------------------------

TITLE: Initializing Mastra Project with yarn
DESCRIPTION: Command to create a new Mastra project using Yarn's create command.

LANGUAGE: bash
CODE:
yarn create mastra

----------------------------------------

TITLE: Workflow-Level Type Safety in Mastra
DESCRIPTION: Demonstrates how to achieve comprehensive type safety across an entire Mastra workflow by defining types for all steps.

LANGUAGE: typescript
CODE:
import { Step, Workflow } from "@mastra/core/workflows";
import { z } from "zod";

const fetchUserStep = new Step({
  id: "fetchUser",
  outputSchema: z.object({
    userId: z.string(),
    name: z.string(),
    email: z.string(),
  }),
  execute: async () => {
    return {
      userId: "user123",
      name: "John Doe",
      email: "john@example.com"
    };
  },
});

const processOrderStep = new Step({
  id: "processOrder",
  execute: async ({ context }) => {
    // TypeScript knows the shape of userData
    const userData = context.getStepResult(fetchUserStep);

    return {
      orderId: "order123",
      status: "processing"
    };
  },
});

const workflow = new Workflow<[typeof fetchUserStep, typeof processOrderStep]>({
  name: "typed-workflow",
});

workflow
  .step(fetchUserStep)
  .then(processOrderStep)
  .until(async ({ context }) => {
    // TypeScript knows the shape of userData here
    const res = context.getStepResult('fetchUser');
    return res?.userId === '123';
  }, processOrderStep)
  .commit();

----------------------------------------

TITLE: PlayAI Voice Constructor Reference
DESCRIPTION: Constructor signature and configuration options for initializing PlayAI Voice instance

LANGUAGE: typescript
CODE:
new PlayAIVoice({
  speechModel?: {
    name?: 'PlayDialog' | 'Play3.0-mini', // Default: 'PlayDialog'
    apiKey?: string,                      // Optional, can use PLAYAI_API_KEY env var
    userId?: string,                      // Optional, can use PLAYAI_USER_ID env var
  },
  speaker?: string                        // Optional, defaults to first available voice ID
})

----------------------------------------

TITLE: Evaluating mixed recall response with Contextual Recall metric
DESCRIPTION: Shows how to evaluate a response that includes some context information using the Contextual Recall metric. It sets up a different context, creates a new metric instance, and measures the recall score for a partially correct response.

LANGUAGE: typescript
CODE:
const context2 = [
  'Python is a high-level programming language.',
  'Python emphasizes code readability.',
  'Python supports multiple programming paradigms.',
  'Python is widely used in data science.',
];

const metric2 = new ContextualRecallMetric(openai('gpt-4o-mini'), {
  context: context2,
});

const query2 = 'What are Python\'s key characteristics?';
const response2 = 'Python is a high-level programming language. It is also a type of snake.';

console.log('Example 2 - Mixed Recall:');
console.log('Context:', context2);
console.log('Query:', query2);
console.log('Response:', response2);

const result2 = await metric2.measure(query2, response2);
console.log('Metric Result:', {
  score: result2.score,
  reason: result2.info.reason,
});
// Example Output:
// Metric Result: { score: 0.5, reason: 'Only half of the output is supported by the context.' }

----------------------------------------

TITLE: PlayAI Voice Constructor Reference
DESCRIPTION: Constructor signature and configuration options for initializing PlayAI Voice instance

LANGUAGE: typescript
CODE:
new PlayAIVoice({
  speechModel?: {
    name?: 'PlayDialog' | 'Play3.0-mini', // Default: 'PlayDialog'
    apiKey?: string,                      // Optional, can use PLAYAI_API_KEY env var
    userId?: string,                      // Optional, can use PLAYAI_USER_ID env var
  },
  speaker?: string                        // Optional, defaults to first available voice ID
})

----------------------------------------

TITLE: Creating MDocument from Text in TypeScript
DESCRIPTION: Static method to create an MDocument instance from plain text content.

LANGUAGE: typescript
CODE:
static fromText(text: string, metadata?: Record<string, any>): MDocument

----------------------------------------

TITLE: Implementing LangWatch Integration in Mastra
DESCRIPTION: TypeScript implementation showing how to configure Mastra to use LangWatch as a telemetry exporter. This includes setting up the telemetry service name, enabling it, and configuring the LangWatch exporter with the required credentials.

LANGUAGE: typescript
CODE:
import { Mastra } from "@mastra/core";
import { LangWatchExporter } from "langwatch";

export const mastra = new Mastra({
  // ... other config
  telemetry: {
    serviceName: "your-service-name",
    enabled: true,
    export: {
      type: "custom",
      exporter: new LangWatchExporter({
        apiKey: process.env.LANGWATCH_API_KEY,
        projectId: process.env.LANGWATCH_PROJECT_ID,
      }),
    },
  },
});

----------------------------------------

TITLE: Streaming Agent Responses with Text Stream Working Memory in Mastra
DESCRIPTION: Shows how to interact with an agent using text stream mode for working memory, including masking memory update tags in the response stream.

LANGUAGE: typescript
CODE:
import { randomUUID } from "crypto";
import { maskStreamTags } from "@mastra/core/utils";

const threadId = randomUUID();
const resourceId = "SOME_USER_ID";

const response = await agent.stream("Hello, my name is Jane", {
  threadId,
  resourceId,
});

// Process response stream, hiding working memory tags
for await (const chunk of maskStreamTags(response.textStream, "working_memory")) {
  process.stdout.write(chunk);
}

----------------------------------------

TITLE: Deleting Vector Index in Mastra (TypeScript)
DESCRIPTION: Remove a specific vector index from the Mastra system using its name.

LANGUAGE: typescript
CODE:
const result = await vector.delete("index-name");

----------------------------------------

TITLE: Configuring Custom Memory Storage in TypeScript
DESCRIPTION: This snippet demonstrates how to configure custom storage, vector database, and memory options for the Mastra memory system.

LANGUAGE: typescript
CODE:
import { Memory } from "@mastra/memory";
import { PostgresStore, PgVector } from "@mastra/pg";

const memory = new Memory({
  storage: new PostgresStore({
    host: "localhost",
    port: 5432,
    user: "postgres",
    database: "postgres",
    password: "postgres",
  }),
  vector: new PgVector("postgresql://user:pass@localhost:5432/db"),
  options: {
    // Number of recent messages to include (false to disable)
    lastMessages: 10,
    // Configure vector-based semantic search (false to disable)
    semanticRecall: {
      topK: 3, // Number of semantic search results
      messageRange: 2, // Messages before and after each result
    },
  },
});

----------------------------------------

TITLE: Running the Example
DESCRIPTION: Command for starting the completeness metric example using pnpm.

LANGUAGE: bash
CODE:
pnpm start

----------------------------------------

TITLE: Using SpeechifyVoice Class
DESCRIPTION: Example showing how to initialize and use the SpeechifyVoice class for text-to-speech conversion, including speaker selection and stream handling

LANGUAGE: typescript
CODE:
import { SpeechifyVoice } from '@mastra/voice-speechify';

const voice = new SpeechifyVoice({
  speechModel: {
    name: 'simba-english', // Optional, defaults to 'simba-english'
    apiKey: 'your-api-key', // Optional, can use SPEECHIFY_API_KEY env var
  },
  speaker: 'george', // Optional, defaults to 'george'
});

// List available speakers
const speakers = await voice.getSpeakers();

// Generate speech
const stream = await voice.speak('Hello world', {
  speaker: 'george', // Optional, defaults to constructor speaker
  // Additional Speechify options
  audioFormat: 'mp3',
});

// The stream can be piped to a destination
stream.pipe(destination);

----------------------------------------

TITLE: Installing Dependencies using pnpm
DESCRIPTION: Command to install project dependencies using pnpm package manager.

LANGUAGE: bash
CODE:
pnpm install

----------------------------------------

TITLE: Dependencies Installation
DESCRIPTION: Command to install project dependencies using pnpm.

LANGUAGE: bash
CODE:
pnpm install

----------------------------------------

TITLE: Example Usage of Gluten Checker
DESCRIPTION: Demonstration of how to use the gluten checker metric with the chef agent to evaluate recipes

LANGUAGE: typescript
CODE:
import { mastra } from './mastra';

const chefAgent = mastra.getAgent('chefAgent');
const metric = chefAgent.evals.glutenChecker;

// Example: Evaluate a recipe
const input = 'What is a quick way to make rice and beans?';
const response = await chefAgent.generate(input);
const result = await metric.measure(input, response.text);

console.log('Metric Result:', {
  score: result.score,
  glutenSources: result.info.glutenSources,
  reason: result.info.reason,
});

// Example Output:
// Metric Result: { score: 1, glutenSources: [], reason: 'The recipe is gluten-free as it does not contain any gluten-containing ingredients.' }

----------------------------------------

TITLE: Configuring Voice Activity Detection in TypeScript
DESCRIPTION: Shows how to update the configuration for Voice Activity Detection (VAD) with customizable parameters.

LANGUAGE: typescript
CODE:
voice.updateConfig({
  voice: 'echo',
  turn_detection: {
    type: 'server_vad',
    threshold: 0.5, // Speech detection sensitivity
    silence_duration_ms: 1000, // Wait time before ending turn
    prefix_padding_ms: 1000, // Audio padding before speech
  },
});

----------------------------------------

TITLE: Implementing API Route for Weather Chat
DESCRIPTION: Next.js API route implementation for streaming weather information using Mastra agent

LANGUAGE: typescript
CODE:
import { mastra } from '@/mastra'
import { NextResponse } from 'next/server'

export async function POST(req: Request) {
  const { city } = await req.json()
  const agent = mastra.getAgent('weatherAgent')

  const result = await agent.stream(`What's the weather like in ${city}?`)

  return result.toDataStreamResponse()
}

----------------------------------------

TITLE: Evaluating low bias response for objective hiring practices
DESCRIPTION: Demonstrates evaluation of an objective response about hiring practices without biases.

LANGUAGE: typescript
CODE:
const query3 = 'What is the best hiring practice?';
const response3 =
  'Effective hiring practices focus on objective criteria such as skills, experience, and demonstrated abilities. Using structured interviews and standardized assessments helps ensure fair evaluation of all candidates based on merit.';

console.log('Example 3 - Low Bias:');
console.log('Query:', query3);
console.log('Response:', response3);

const result3 = await metric.measure(query3, response3);
console.log('Metric Result:', {
  score: result3.score,
  reason: result3.info.reason,
});
// Example Output:
// Metric Result: { score: 0, reason: 'The response does not contain any gender or age-related stereotypes or assumptions.' }

----------------------------------------

TITLE: Importing Content Similarity Metric in TypeScript
DESCRIPTION: Imports the ContentSimilarityMetric from the Mastra evals NLP package. This is a prerequisite for using the content similarity functionality.

LANGUAGE: typescript
CODE:
import { ContentSimilarityMetric } from '@mastra/evals/nlp';

----------------------------------------

TITLE: GraphRAG Query Method Signature
DESCRIPTION: Detailed method signature for the query function showing all available parameters and their types.

LANGUAGE: typescript
CODE:
query({
  query,
  topK = 10,
  randomWalkSteps = 100,
  restartProb = 0.15
}: {
  query: number[];
  topK?: number;
  randomWalkSteps?: number;
  restartProb?: number;
}): RankedNode[]

----------------------------------------

TITLE: Initializing Workflow Class in TypeScript
DESCRIPTION: Basic initialization of a Workflow instance with a name parameter.

LANGUAGE: typescript
CODE:
import { Workflow } from "@mastra/core/workflows";

const workflow = new Workflow({ name: "my-workflow" });

----------------------------------------

TITLE: Retrieving Agent Details in TypeScript
DESCRIPTION: This snippet demonstrates how to retrieve detailed information about a specific Mastra AI agent.

LANGUAGE: typescript
CODE:
const details = await agent.details();

----------------------------------------

TITLE: Creating and Storing Embeddings in PgVector
DESCRIPTION: Generates embeddings for document chunks and stores them along with metadata in the PgVector database.

LANGUAGE: typescript
CODE:
const { embeddings } = await embedMany({
  model: openai.embedding('text-embedding-3-small'),
  values: chunks.map(chunk => chunk.text),
});

const vectorStore = mastra.getVector('pgVector');
await vectorStore.createIndex({
  indexName: 'embeddings',
  dimension: 1536,
});

// Store both embeddings and metadata together
await vectorStore.upsert({
  indexName: 'embeddings',
  vectors: embeddings,
  metadata: chunkMetadata,
});

----------------------------------------

TITLE: Using ElevenLabsVoice in TypeScript
DESCRIPTION: This code demonstrates how to import, initialize, and use the ElevenLabsVoice class for text-to-speech conversion and retrieving available speakers.

LANGUAGE: typescript
CODE:
import { ElevenLabsVoice } from '@mastra/voice-elevenlabs';

// Initialize with configuration
const voice = new ElevenLabsVoice({
  speechModel: {
    name: 'eleven_multilingual_v2',
    apiKey: 'your-api-key', // Optional, can use ELEVENLABS_API_KEY env var
  },
  speaker: 'Adam', // Default speaker
});

// List available speakers
const speakers = await voice.getSpeakers();

// Generate speech
const stream = await voice.speak('Hello from Mastra!', {
  speaker: 'Adam', // Optional, defaults to constructor speaker
});

----------------------------------------

TITLE: Setting OpenAI API Key in Environment File
DESCRIPTION: Example of how to set the OpenAI API key in the .env file.

LANGUAGE: env
CODE:
OPENAI_API_KEY=sk-your-api-key-here

----------------------------------------

TITLE: Installing Dependencies for Mastra Text Chunking Example
DESCRIPTION: This command installs the necessary dependencies for the Mastra text chunking example using pnpm.

LANGUAGE: bash
CODE:
pnpm install

----------------------------------------

TITLE: Setting up useObject Hook with Schema Validation
DESCRIPTION: Demonstrates using AI SDK's useObject hook for handling structured JSON responses with schema validation using Zod.

LANGUAGE: typescript
CODE:
import { experimental_useObject as useObject } from '@ai-sdk/react';

export default function Page() {
  const { object, submit } = useObject({
    api: '/api/use-object',
    schema: z.object({
      weather: z.string(),
    }),
  });

  return (
    <div>
      <button onClick={() => submit('example input')}>Generate</button>
      {object?.content && <p>{object.content}</p>}
    </div>
  );
}

----------------------------------------

TITLE: Configuring Textual Difference Metric
DESCRIPTION: Instantiation of the TextualDifferenceMetric class for text comparison.

LANGUAGE: typescript
CODE:
const metric = new TextualDifferenceMetric();

----------------------------------------

TITLE: Installing LibSQL Storage Package
DESCRIPTION: Command to install the LibSQL storage package via npm

LANGUAGE: bash
CODE:
npm install @mastra/storage-libsql

----------------------------------------

TITLE: Initializing Vector Store in Mastra (TypeScript)
DESCRIPTION: Get an instance of a vector store in Mastra. This is the starting point for working with vectors.

LANGUAGE: typescript
CODE:
const vector = client.getVector("vector-name");

----------------------------------------

TITLE: Starting and Resuming Mastra Workflow with Multiple Suspension Points
DESCRIPTION: This snippet demonstrates how to start a workflow with multiple suspension points and resume it at different steps. It includes checking for suspended steps and resuming them with new context data.

LANGUAGE: typescript
CODE:
const wf = mastra.getWorkflow('multi-suspend-workflow');
const run = wf.createRun();

const initialResult = await run.start({ triggerData: { input: 'initial input' } });

let promptAgentStepResult = initialResult.activePaths.get('promptAgent');
let promptAgentResumeResult = undefined;

if (promptAgentStepResult?.status === 'suspended') {
  console.log('Workflow suspended at promptAgent step');

  const resumeResult = await run.resume({
    stepId: 'promptAgent',
    context: { userInput: 'Human provided input' }
  });

  promptAgentResumeResult = resumeResult;
}

const improveResponseStepResult = promptAgentResumeResult?.activePaths.get('improveResponse');

if (improveResponseStepResult?.status === 'suspended') {
  console.log('Workflow suspended at improveResponse step');

  const finalResult = await run.resume({
    stepId: 'improveResponse',
    context: { refinedOutput: 'Human refined output' }
  });

  console.log('Workflow completed:', finalResult?.results);
}

----------------------------------------

TITLE: Basic Usage of Workflow.until() in TypeScript
DESCRIPTION: Demonstrates the basic syntax for using the `.until()` method in a Mastra workflow. It shows how to repeat a step until a condition is met.

LANGUAGE: typescript
CODE:
workflow
  .step(incrementStep)
  .until(condition, incrementStep)
  .then(finalStep);

----------------------------------------

TITLE: Generating Agent Response in TypeScript
DESCRIPTION: This code example shows how to generate a response from a Mastra AI agent, including optional parameters for thread ID, resource ID, and output configuration.

LANGUAGE: typescript
CODE:
const response = await agent.generate({
  messages: [
    {
      role: "user",
      content: "Hello, how are you?",
    },
  ],
  threadId: "thread-1", // Optional: Thread ID for conversation context
  resourceid: "resource-1", // Optional: Resource ID
  output: {}, // Optional: Output configuration
});

----------------------------------------

TITLE: Basic Answer Relevancy Metric Implementation in TypeScript
DESCRIPTION: Demonstrates basic usage of AnswerRelevancyMetric to evaluate LLM response relevance. Shows configuration, instantiation, and measurement of answer relevancy with default settings.

LANGUAGE: typescript
CODE:
import { openai } from "@ai-sdk/openai";
import { AnswerRelevancyMetric } from "@mastra/evals/llm";

// Configure the model for evaluation
const model = openai("gpt-4o-mini");

const metric = new AnswerRelevancyMetric(model, {
  uncertaintyWeight: 0.3,
  scale: 1,
});

const result = await metric.measure(
  "What is the capital of France?",
  "Paris is the capital of France.",
);

console.log(result.score); // Score from 0-1
console.log(result.info.reason); // Explanation of the score

----------------------------------------

TITLE: Installing @mastra/pg Package
DESCRIPTION: Command to install the @mastra/pg package using npm.

LANGUAGE: bash
CODE:
npm install @mastra/pg

----------------------------------------

TITLE: Initializing and Using OpenAIRealtimeVoice in TypeScript
DESCRIPTION: Demonstrates how to import, configure, and use the OpenAIRealtimeVoice class, including event handling, speech generation, and audio processing.

LANGUAGE: typescript
CODE:
import { OpenAIRealtimeVoice } from '@mastra/voice-openai-realtime';

// Create a voice instance with default configuration
const voice = new OpenAIRealtimeVoice();

// Create a voice instance with configuration
const voice = new OpenAIRealtimeVoice({
  chatModel: {
    apiKey: 'your-api-key', // Optional, can use OPENAI_API_KEY env var
    model: 'gpt-4o-mini-realtime', // Optional, uses latest model by default
    options: {
      sessionConfig: {
        voice: 'alloy', // Default voice
        turn_detection: {
          type: 'server_vad',
          threshold: 0.5,
          silence_duration_ms: 1000,
        },
      },
    },
  },
});

// Connect to the realtime service
await voice.open();

// Audio data from voice provider
voice.on('speaking', (audioData: Int16Array) => {
  // Handle audio data
});

// Text data from voice provider
voice.on('writing', (text: string) => {
  // Handle transcribed text
});

// Error from voice provider
voice.on('error', (error: Error) => {
  console.error('Voice error:', error);
});

// Generate speech
await voice.speak('Hello from Mastra!', {
  speaker: 'echo', // Optional: override default speaker
});

// Listen to audio input
await voice.listen(audioData);

// Process audio input
const microphoneStream = getMicrophoneStream();
await voice.send(microphoneStream);

// Clean up
voice.close();

----------------------------------------

TITLE: Cloning and Navigating to Project Directory in Bash
DESCRIPTION: Commands to clone the Mastra repository and navigate to the hallucination example directory.

LANGUAGE: bash
CODE:
git clone https://github.com/mastra-ai/mastra
cd examples/basics/evals/hallucination

----------------------------------------

TITLE: Installing Dependencies with pnpm
DESCRIPTION: This command installs the necessary dependencies for the JSON chunking example using pnpm.

LANGUAGE: bash
CODE:
pnpm install

----------------------------------------

TITLE: Generating Responses Based on Retrieved Context
DESCRIPTION: Defines a function to generate responses using the Mastra agent based on retrieved context from user queries.

LANGUAGE: typescript
CODE:
async function generateResponse(query: string) {
  const prompt = `
      Please answer the following question:
      ${query}

    Please base your answer only on the context provided.
    If the context doesn't contain enough information to fully answer the question, please state that explicitly.
      `;

  // Call the agent to generate a response
  const completion = await agent.generate(prompt);

  return completion.text;
}

----------------------------------------

TITLE: Importing Dependencies for Mastra RAG System
DESCRIPTION: Import statements for required packages including OpenAI, Mastra core components, PgVector, and RAG tools.

LANGUAGE: typescript
CODE:
import { openai } from "@ai-sdk/openai";
import { Mastra } from "@mastra/core";
import { Agent } from "@mastra/core/agent";
import { PgVector } from "@mastra/pg";
import { MDocument, createGraphRAGTool } from "@mastra/rag";
import { embedMany } from "ai";

----------------------------------------

TITLE: Initializing Project and Installing Dependencies
DESCRIPTION: Commands to create a new project directory, initialize a Node.js project, and install required dependencies for the stock agent.

LANGUAGE: bash
CODE:
mkdir stock-price-agent
cd stock-price-agent
npm init -y
npm install @mastra/core zod @ai-sdk/openai

----------------------------------------

TITLE: Importing dependencies for Prompt Alignment evaluation
DESCRIPTION: This code imports the necessary dependencies from OpenAI and Mastra for performing Prompt Alignment evaluation.

LANGUAGE: typescript
CODE:
import { openai } from '@ai-sdk/openai';
import { PromptAlignmentMetric } from '@mastra/evals/llm';

----------------------------------------

TITLE: Evaluating High Toxicity Content
DESCRIPTION: Demonstrates evaluation of content containing explicit personal attacks and harmful language.

LANGUAGE: typescript
CODE:
const query1 = 'What do you think about the new team member?';
const response1 =
  'That incompetent fool is a complete waste of space. They clearly bought their degree and have no business being here. Everyone hates working with them.';

console.log('Example 1 - High Toxicity:');
console.log('Query:', query1);
console.log('Response:', response1);

const result1 = await metric.measure(query1, response1);
console.log('Metric Result:', {
  score: result1.score,
  reason: result1.info.reason,
});

----------------------------------------

TITLE: Implementing Pinecone Error Handling
DESCRIPTION: Example showing how to implement error handling for Pinecone vector store operations using try-catch blocks and typed errors.

LANGUAGE: typescript
CODE:
try {
  await store.query({
    indexName: "index_name",
    queryVector: queryVector,
  });
} catch (error) {
  if (error instanceof VectorStoreError) {
    console.log(error.code); // 'connection_failed' | 'invalid_dimension' | etc
    console.log(error.details); // Additional error context
  }
}

----------------------------------------

TITLE: Implementing a Counter Workflow with while() Loop
DESCRIPTION: Comprehensive example of creating a counter workflow using the `.while()` method, including step definitions, workflow configuration, and execution.

LANGUAGE: typescript
CODE:
import { Workflow, Step } from '@mastra/core';
import { z } from 'zod';

// Create a step that increments a counter
const incrementStep = new Step({
  id: 'increment',
  description: 'Increments the counter by 1',
  outputSchema: z.object({
    value: z.number(),
  }),
  execute: async ({ context }) => {
    // Get current value from previous execution or start at 0
    const currentValue =
      context.getStepResult<{ value: number }>('increment')?.value ||
      context.getStepResult<{ startValue: number }>('trigger')?.startValue ||
      0;

    // Increment the value
    const value = currentValue + 1;
    console.log(`Incrementing to ${value}`);

    return { value };
  },
});

// Create a final step
const finalStep = new Step({
  id: 'final',
  description: 'Final step after loop completes',
  execute: async ({ context }) => {
    const finalValue = context.getStepResult<{ value: number }>('increment')?.value;
    console.log(`Loop completed with final value: ${finalValue}`);
    return { finalValue };
  },
});

// Create the workflow
const counterWorkflow = new Workflow({
  name: 'counter-workflow',
  triggerSchema: z.object({
    startValue: z.number(),
    targetValue: z.number(),
  }),
});

// Configure the workflow with a while loop
counterWorkflow
  .step(incrementStep)
  .while(
    async ({ context }) => {
      const targetValue = context.triggerData.targetValue;
      const currentValue = context.getStepResult<{ value: number }>('increment')?.value ?? 0;
      return currentValue < targetValue;
    },
    incrementStep
  )
  .then(finalStep)
  .commit();

// Execute the workflow
const run = counterWorkflow.createRun();
const result = await run.start({ triggerData: { startValue: 0, targetValue: 5 } });
// Will increment from 0 to 4, then stop and execute finalStep

----------------------------------------

TITLE: Executing Tool Operations in TypeScript
DESCRIPTION: Executes a tool with specified arguments, optional thread context, and resource identifier. Allows passing multiple parameters and contextual information for tool execution.

LANGUAGE: typescript
CODE:
const result = await tool.execute({
  args: {
    param1: "value1",
    param2: "value2",
  },
  threadId: "thread-1", // Optional: Thread context
  resourceid: "resource-1", // Optional: Resource identifier
});

----------------------------------------

TITLE: Comparing Identical Texts Example
DESCRIPTION: Demonstration of comparing two identical text strings using the TextualDifferenceMetric, showing perfect similarity scores.

LANGUAGE: typescript
CODE:
const input1 = 'The quick brown fox jumps over the lazy dog';
const output1 = 'The quick brown fox jumps over the lazy dog';

console.log('Example 1 - Identical Texts:');
console.log('Input:', input1);
console.log('Output:', output1);

const result1 = await metric.measure(input1, output1);
console.log('Metric Result:', {
  score: result1.score,
  info: {
    confidence: result1.info.confidence,
    ratio: result1.info.ratio,
    changes: result1.info.changes,
    lengthDiff: result1.info.lengthDiff,
  },
});

----------------------------------------

TITLE: Package Import Examples
DESCRIPTION: Shows different ways to import functionality from the package including main exports and specific metrics.

LANGUAGE: typescript
CODE:
// Main package exports
import { evaluate } from '@mastra/evals';
// NLP-specific metrics
import { ContentSimilarityMetric } from '@mastra/evals/nlp';

----------------------------------------

TITLE: Installing Dependencies with pnpm in Bash
DESCRIPTION: Command to install project dependencies using pnpm package manager.

LANGUAGE: bash
CODE:
pnpm install

----------------------------------------

TITLE: Installing Dependencies with pnpm
DESCRIPTION: Command to install the necessary dependencies for the Mastra HTML chunking example using pnpm.

LANGUAGE: bash
CODE:
pnpm install

----------------------------------------

TITLE: Executing Workflow Programmatically
DESCRIPTION: Shows how to execute a workflow programmatically with trigger data

LANGUAGE: typescript
CODE:
import { mastra } from "./index";

// Get the workflow
const myWorkflow = mastra.getWorkflow('myWorkflow');
const { runId, start } = myWorkflow.createRun();

// Start the workflow execution
await start({ triggerData: { inputValue: 45 } });

----------------------------------------

TITLE: Transforming Chunks into Metadata for Filtering
DESCRIPTION: Transforms chunked document data into metadata structure suitable for filtering in the vector database.

LANGUAGE: typescript
CODE:
const chunkMetadata = chunks?.map((chunk: any, index: number) => ({
  text: chunk.text,
  ...chunk.metadata,
  nested: {
    keywords: chunk.metadata.excerptKeywords
      .replace('KEYWORDS:', '')
      .split(',')
      .map(k => k.trim()),
    id: index,
  },
}));

----------------------------------------

TITLE: Processing and Chunking Documents for RAG
DESCRIPTION: Processes and chunks a document for use in the RAG system, preparing it for embedding and storage.

LANGUAGE: typescript
CODE:
const doc = MDocument.fromText(`Your document text here...`);

const chunks = await doc.chunk({
  strategy: "recursive",
  size: 512,
  overlap: 50,
  separator: "\n",
});

----------------------------------------

TITLE: Retrieving All Tools in TypeScript
DESCRIPTION: Fetches a list of all available tools from the Mastra platform using the client instance.

LANGUAGE: typescript
CODE:
const tools = await client.getTools();

----------------------------------------

TITLE: Reference Condition in while() Loop
DESCRIPTION: Demonstration of using a reference-based condition with comparison operators in a `.while()` loop for a Mastra workflow.

LANGUAGE: typescript
CODE:
workflow
  .step(incrementStep)
  .while(
    {
      ref: { step: incrementStep, path: 'value' },
      query: { $lt: 10 }, // Continue as long as value is less than 10
    },
    incrementStep
  )
  .then(finalStep);

----------------------------------------

TITLE: Implementing IBM Watson TTS in TypeScript
DESCRIPTION: Complete example showing initialization and usage of the IBMTTS class, including voice listing, speech generation, and streaming capabilities.

LANGUAGE: typescript
CODE:
import { IBMTTS } from '@mastra/speech-ibm';

// Initialize with configuration
const tts = new IBMTTS({
  model: {
    name: 'en-US_AllisonV3Voice', // Default voice
    apiKey: 'your-api-key', // Optional, can use IBM_API_KEY env var
    url: 'your-service-url', // Optional, can use IBM_URL env var
  },
});

// List available voices
const voices = await tts.voices();

// Generate speech
const result = await tts.generate({
  voice: 'en-US_AllisonV3Voice',
  text: 'Hello from Mastra!',
});

// Stream speech
const stream = await tts.stream({
  voice: 'en-US_AllisonV3Voice',
  text: 'Hello from Mastra!',
});

----------------------------------------

TITLE: Watching Workflow Transitions
DESCRIPTION: Sets up a watcher for workflow transitions and handles workflow run execution.

LANGUAGE: typescript
CODE:
try{
  // Get workflow instance
  const workflow = client.getWorkflow("workflow-id");

  // Create a workflow run
  const {runId} = workflow.createRun()

  // Watch workflow run 
     workflow.watch({runId},(record)=>{
       // Every new record is the latest transition state of the workflow run

        console.log({
          activePaths: record.activePaths,
          context: record.context,
          timestamp: record.timestamp,
          runId: record.runId
        });
     });

  // Start workflow run
     workflow.start({
      runId,
      triggerData: {
        city: 'New York',
      },
    });
}catch(e){
  console.error(e);
}

----------------------------------------

TITLE: Initializing PostgreSQL Storage in TypeScript
DESCRIPTION: Example showing how to initialize a PostgreSQL storage instance using connection string from environment variables. Creates a new storage instance with database connection configuration.

LANGUAGE: typescript
CODE:
import { PostgresStore } from "@mastra/pg";

const storage = new PostgresStorage({
  connectionString: process.env.DATABASE_URL,
});

----------------------------------------

TITLE: Cloning Project Repository
DESCRIPTION: Commands to clone the mastra repository and navigate to the project directory.

LANGUAGE: bash
CODE:
git clone https://github.com/mastra-ai/mastra
cd examples/basics/agents/agents-as-tools

----------------------------------------

TITLE: Initializing and Using Deployer in TypeScript
DESCRIPTION: Example of how to import, initialize, and use the Deployer class from @mastra/deployer. It demonstrates creating a deployer instance, installing dependencies, writing package.json, and getting the Mastra instance.

LANGUAGE: typescript
CODE:
import { Deployer } from '@mastra/deployer';

// Create a deployer instance
const deployer = new Deployer({
  dir: '/path/to/project',
  type: 'Deploy', // or 'Dev' for development mode
});

// Install dependencies
await deployer.install();

// Write package.json
await deployer.writePackageJson();

// Get Mastra instance
const { mastra } = await deployer.getMastra();

----------------------------------------

TITLE: Changelog Version Headers
DESCRIPTION: Version headers showing version numbers and change types in markdown format

LANGUAGE: markdown
CODE:
## 0.1.10

### Patch Changes

## 0.1.10-alpha.2

### Patch Changes

----------------------------------------

TITLE: Installing Project Dependencies
DESCRIPTION: Command to install the required project dependencies using pnpm package manager.

LANGUAGE: bash
CODE:
pnpm install

----------------------------------------

TITLE: Vector Query Tool Configuration
DESCRIPTION: Creates a vector query tool for interacting with the vector database using OpenAI embeddings.

LANGUAGE: typescript
CODE:
const vectorQueryTool = createVectorQueryTool({
  vectorStoreName: "pgVector",
  indexName: "embeddings",
  model: openai.embedding('text-embedding-3-small'),
});

----------------------------------------

TITLE: Importing Dependencies for Metadata Extraction in Mastra
DESCRIPTION: This snippet shows how to import the necessary dependency (MDocument) from the Mastra RAG package.

LANGUAGE: typescript
CODE:
import { MDocument } from '@mastra/rag';

----------------------------------------

TITLE: Query Result Interface Definition in TypeScript
DESCRIPTION: Defines the interface for query results returned by the vector store, including ID, score, metadata, and optional vector data.

LANGUAGE: typescript
CODE:
interface QueryResult {
  id: string;
  score: number;
  metadata: Record<string, any>;
  vector?: number[];
}

----------------------------------------

TITLE: RAG Agent Configuration with Chain of Thought
DESCRIPTION: Configures the Mastra agent with detailed instructions for chain-of-thought reasoning and response generation.

LANGUAGE: typescript
CODE:
export const ragAgent = new Agent({
  name: "RAG Agent",
  instructions: `You are a helpful assistant that answers questions based on the provided context.
Follow these steps for each response:

1. First, carefully analyze the retrieved context chunks and identify key information.
2. Break down your thinking process about how the retrieved information relates to the query.
3. Explain how you're connecting different pieces from the retrieved chunks.
4. Draw conclusions based only on the evidence in the retrieved context.
5. If the retrieved chunks don't contain enough information, explicitly state what's missing.

Format your response as:
THOUGHT PROCESS:
- Step 1: [Initial analysis of retrieved chunks]
- Step 2: [Connections between chunks]
- Step 3: [Reasoning based on chunks]

FINAL ANSWER:
[Your concise answer based on the retrieved context]`,
  model: openai("gpt-4o-mini"),
  tools: { contextTool },
});

----------------------------------------

TITLE: Defining IndexStats Interface in TypeScript
DESCRIPTION: This snippet defines the IndexStats interface, which represents the structure of index statistics returned by the describeIndex method. It includes the dimension, count, and metric of the index.

LANGUAGE: typescript
CODE:
interface IndexStats {
  dimension: number;
  count: number;
  metric: "cosine" | "euclidean" | "dotproduct";
}

----------------------------------------

TITLE: Fetching Workflow Details
DESCRIPTION: Retrieves detailed information about a specific workflow instance.

LANGUAGE: typescript
CODE:
const details = await workflow.details();

----------------------------------------

TITLE: Function Condition in while() Loop
DESCRIPTION: Example of using a function that returns a boolean as the condition for a `.while()` loop in a Mastra workflow.

LANGUAGE: typescript
CODE:
workflow
  .step(incrementStep)
  .while(async ({ context }) => {
    const result = context.getStepResult<{ value: number }>('increment');
    return (result?.value ?? 0) < 10; // Continue as long as value is less than 10
  }, incrementStep)
  .then(finalStep);

----------------------------------------

TITLE: Quick Start Mastra Project Initialization
DESCRIPTION: Initializes a Mastra project with default settings including src/ directory, all components (agents, tools, workflows), OpenAI provider, and no example code.

LANGUAGE: bash
CODE:
mastra init --default

----------------------------------------

TITLE: Cloning Mastra Repository - Bash
DESCRIPTION: Commands to clone the Mastra repository and navigate to the parallel workflow example directory.

LANGUAGE: bash
CODE:
git clone https://github.com/mastra-ai/mastra
cd examples/basics/workflows/workflow-with-parallel-steps

----------------------------------------

TITLE: Creating AI Tool Action
DESCRIPTION: Defines a tool action that can be used by AI agents to perform specific tasks.

LANGUAGE: typescript
CODE:
import { ToolAction } from '@mastra/core';

const tool = new ToolAction({
  name: 'tool-name',
  description: 'Tool description',
  execute: async context => {
    // Tool implementation
  },
});

----------------------------------------

TITLE: Cloning Mastra Repository and Navigating to Example Directory
DESCRIPTION: Commands to clone the Mastra repository and navigate to the specific example directory for the sequential workflow.

LANGUAGE: bash
CODE:
git clone https://github.com/mastra-ai/mastra
cd examples/basics/workflows/workflow-with-sequential-steps

----------------------------------------

TITLE: Cloning Mastra Repository
DESCRIPTION: Commands to clone the Mastra repository and navigate to the example directory for chunk array embedding.

LANGUAGE: bash
CODE:
git clone https://github.com/mastra-ai/mastra
cd examples/basics/rag/embed-chunk-array

----------------------------------------

TITLE: Setting OpenAI API Key Environment Variable
DESCRIPTION: Example of setting the OpenAI API key as an environment variable. This is required for authentication with OpenAI services.

LANGUAGE: bash
CODE:
OPENAI_API_KEY=your_api_key

----------------------------------------

TITLE: PgVector and Mastra Instance Setup
DESCRIPTION: Initializes PgVector and Mastra instances with configured components.

LANGUAGE: typescript
CODE:
const pgVector = new PgVector(process.env.POSTGRES_CONNECTION_STRING!);

export const mastra = new Mastra({
  agents: { ragAgent },
  vectors: { pgVector },
});
const agent = mastra.getAgent("ragAgent");

----------------------------------------

TITLE: Importing Mastra and Zod modules for AI Recruiter workflow in TypeScript
DESCRIPTION: This snippet shows the necessary imports for building a Mastra workflow, including core Mastra components and Zod for data validation.

LANGUAGE: typescript
CODE:
import { Mastra } from "@mastra/core";
import { Step, Workflow } from "@mastra/core/workflows";
import { z } from "zod";

----------------------------------------

TITLE: Adding Rich Metadata to Vector Store in TypeScript
DESCRIPTION: Shows how to add rich metadata to vector embeddings for advanced filtering and organization.

LANGUAGE: typescript
CODE:
// Store embeddings with rich metadata for better organization and filtering
await vectorStore.upsert({
  indexName: "embeddings",
  vectors: embeddings,
  metadata: chunks.map((chunk) => ({
    // Basic content
    text: chunk.text,
    id: chunk.id,
    
    // Document organization
    source: chunk.source,
    category: chunk.category,
    
    // Temporal metadata
    createdAt: new Date().toISOString(),
    version: "1.0",
    
    // Custom fields
    language: chunk.language,
    author: chunk.author,
    confidenceScore: chunk.score,
  })),
});

----------------------------------------

TITLE: Basic Sequential Workflow with Then Method in TypeScript
DESCRIPTION: Demonstrates how to chain multiple steps in sequence using the .then() method.

LANGUAGE: typescript
CODE:
workflow
  .step(stepOne)
  .then(stepTwo)
  .then(stepThree);

----------------------------------------

TITLE: Registering OpenTelemetry in Next.js (TypeScript)
DESCRIPTION: Creates an instrumentation file to register OpenTelemetry in a Next.js project using Vercel's OTEL setup. This enables tracing for the Next.js application.

LANGUAGE: typescript
CODE:
import { registerOTel } from '@vercel/otel'

export function register() {
  registerOTel({ serviceName: 'your-project-name' })
}

----------------------------------------

TITLE: Custom Configuration of ContextualRecallMetric in TypeScript
DESCRIPTION: Shows advanced configuration of ContextualRecallMetric with custom scale and security-focused context. Includes example output structure and detailed scoring interpretation.

LANGUAGE: typescript
CODE:
import { openai } from "@ai-sdk/openai";
import { ContextualRecallMetric } from "@mastra/evals/llm";

// Configure the model for evaluation
const model = openai("gpt-4o-mini");

const metric = new ContextualRecallMetric(
  model,
  {
    scale: 100, // Use 0-100 scale instead of 0-1
    context: [
      "All data is encrypted at rest and in transit",
      "Two-factor authentication (2FA) is mandatory",
      "Regular security audits are performed",
      "Incident response team available 24/7"
    ]
  }
);

const result = await metric.measure(
  "Summarize the company's security measures",
  "The company implements encryption for data protection and requires 2FA for all users.",
);

// Example output:
// {
//   score: 50, // Only half of the security measures were mentioned
//   info: {
//     reason: "The score is 50 because only half of the security measures were mentioned 
//           in the response. The response missed the regular security audits and incident 
//           response team information."
//   }
// }

----------------------------------------

TITLE: Usage Example of Memory-Enabled Agent with LibSQL in Typescript
DESCRIPTION: This snippet illustrates how to use a memory-enabled agent in a conversation. It demonstrates starting a conversation, sending messages, and using semantic search to find relevant messages in the conversation history.

LANGUAGE: typescript
CODE:
import { randomUUID } from "crypto";

// Start a conversation
const threadId = randomUUID();
const resourceId = "SOME_USER_ID";

// Start with a system message
const response1 = await memoryAgent.stream(
  [
    {
      role: "system",
      content: `Chat with user started now ${new Date().toISOString()}. Don't mention this message.`,
    },
  ],
  {
    resourceId,
    threadId,
  },
);

// Send user message
const response2 = await memoryAgent.stream("What can you help me with?", {
  threadId,
  resourceId,
});

// Use semantic search to find relevant messages
const response3 = await memoryAgent.stream("What did we discuss earlier?", {
  threadId,
  resourceId,
  memoryOptions: {
    lastMessages: false,
    semanticRecall: {
      topK: 3, // Get top 3 most relevant messages
      messageRange: 2, // Include context around each match
    },
  },
});

----------------------------------------

TITLE: Cloning Repository and Navigating to Project Directory
DESCRIPTION: Commands to clone the Mastra repository and navigate to the specific example directory for calling an agent from a workflow.

LANGUAGE: bash
CODE:
git clone https://github.com/mastra-ai/mastra
cd examples/basics/workflows/calling-agent-from-workflow

----------------------------------------

TITLE: Creating Mastra Project with Example Code
DESCRIPTION: Example command to create a Mastra project that includes example code for reference.

LANGUAGE: bash
CODE:
npx create-mastra@latest --example

----------------------------------------

TITLE: Cloning Mastra Repository and Navigating to Example Directory
DESCRIPTION: Commands to clone the Mastra repository from GitHub and navigate to the specific example directory for HTML chunking.

LANGUAGE: bash
CODE:
git clone https://github.com/mastra-ai/mastra
cd examples/basics/rag/chunk-html

----------------------------------------

TITLE: Configuring OpenAI API Key in Environment File
DESCRIPTION: Example of how to set the OpenAI API key in the .env file. Replace 'sk-your-api-key-here' with your actual API key.

LANGUAGE: env
CODE:
OPENAI_API_KEY=sk-your-api-key-here

----------------------------------------

TITLE: Configuring Mastra RAG Agent
DESCRIPTION: Setup for the Mastra agent with specific instructions for handling RAG responses using GPT-4o-mini model.

LANGUAGE: typescript
CODE:
import { openai } from "@ai-sdk/openai";

export const ragAgent = new Agent({
  name: "GraphRAG Agent",
  instructions: `You are a helpful assistant that answers questions based on the provided context. Format your answers as follows:

1. DIRECT FACTS: List only the directly stated facts from the text relevant to the question (2-3 bullet points)
2. CONNECTIONS MADE: List the relationships you found between different parts of the text (2-3 bullet points)
3. CONCLUSION: One sentence summary that ties everything together

Keep each section brief and focus on the most important points.`,
  model: openai("gpt-4o-mini"),
  tools: {
    graphRagTool,
  },
});

----------------------------------------

TITLE: Creating and Using Logger Instance in TypeScript
DESCRIPTION: Demonstrates how to create and use a logger instance with different severity levels. The example shows creating a console logger with INFO level and logging messages at different severity levels. It showcases both simple string messages and structured log objects.

LANGUAGE: typescript
CODE:
// Using a console logger
const logger = createLogger({ name: 'Mastra', level: 'info' });

logger.debug('Debug message'); // Won't be logged because level is INFO
logger.info({ message: 'User action occurred', destinationPath: 'user-actions', type: 'AGENT' }); // Logged
logger.error('An error occurred'); // Logged as ERROR

----------------------------------------

TITLE: Setting ELEVENLABS_API_KEY environment variable
DESCRIPTION: This snippet shows how to set the required ELEVENLABS_API_KEY environment variable for authentication.

LANGUAGE: bash
CODE:
ELEVENLABS_API_KEY=your_api_key

----------------------------------------

TITLE: Generating and Storing Embeddings
DESCRIPTION: Process for creating embeddings from document chunks and storing them in PgVector database with metadata.

LANGUAGE: typescript
CODE:
const { embeddings } = await embedMany({
  values: chunks.map(chunk => chunk.text),
  model: openai.embedding("text-embedding-3-small"),
});

const vectorStore = mastra.getVector("pgVector");
await vectorStore.createIndex({
  indexName: "embeddings",
  dimension: 1536,
});
await vectorStore.upsert({
  indexName: "embeddings",
  vectors: embeddings,
  metadata: chunks?.map((chunk: any) => ({ text: chunk.text })),
});

----------------------------------------

TITLE: Implementing Response Generation Logic
DESCRIPTION: Function to generate context-aware responses using the configured RAG agent and retrieved context.

LANGUAGE: typescript
CODE:
async function generateResponse(query: string) {
  const prompt = `
    Please answer the following question using both semantic and graph-based context:
    ${query}

    Please base your answer only on the context provided in the tool. If the context doesn't contain enough information to fully answer the question, please state that explicitly.
    `;

  const completion = await agent.generate(prompt);
  return completion.text;
}

----------------------------------------

TITLE: Function-Based Condition in Mastra Workflows
DESCRIPTION: Demonstrates how to use a function to specify a condition for step execution in a Mastra workflow.

LANGUAGE: typescript
CODE:
myWorkflow.step(
  new Step({
    id: "processData",
    execute: async ({ context }) => {
      // Action logic
    },
  }),
  {
    when: async ({ context }) => {
      const fetchData = context?.getStepResult<{ status: string }>("fetchData");
      return fetchData?.status === "success";
    },
  },
);

----------------------------------------

TITLE: Interacting with Chef Agent API via cURL
DESCRIPTION: Demonstrates how to send a POST request to the Chef Assistant agent's API endpoint using cURL, providing a user query and receiving a recipe suggestion.

LANGUAGE: bash
CODE:
curl -X POST http://localhost:4111/api/agents/chefAgent/generate \
  -H "Content-Type: application/json" \
  -d '{
    "messages": [
      {
        "role": "user",
        "content": "I have eggs, flour, and milk. What can I make?"
      }
    ]
  }'

----------------------------------------

TITLE: Error Handling for LibSQLVector Operations
DESCRIPTION: Example of error handling for LibSQLVector operations, demonstrating how to catch and handle specific error cases.

LANGUAGE: typescript
CODE:
try {
  await store.query({
    indexName: "my-collection",
    queryVector: queryVector,
  });
} catch (error) {
  // Handle specific error cases
  if (error.message.includes("Invalid index name format")) {
    console.error(
      "Index name must start with a letter/underscore and contain only alphanumeric characters",
    );
  } else if (error.message.includes("Table not found")) {
    console.error("The specified index does not exist");
  } else {
    console.error("Vector store error:", error.message);
  }
}

----------------------------------------

TITLE: Evaluating perfect alignment with Prompt Alignment metric
DESCRIPTION: This snippet demonstrates how to evaluate a response that follows all given instructions using the Prompt Alignment metric.

LANGUAGE: typescript
CODE:
const instructions1 = [
  'Use complete sentences',
  'Include temperature in Celsius',
  'Mention wind conditions',
  'State precipitation chance',
];

const metric1 = new PromptAlignmentMetric(openai('gpt-4o-mini'), {
  instructions: instructions1,
});

const query1 = 'What is the weather like?';
const response1 =
  'The temperature is 22 degrees Celsius with moderate winds from the northwest. There is a 30% chance of rain.';

console.log('Example 1 - Perfect Alignment:');
console.log('Instructions:', instructions1);
console.log('Query:', query1);
console.log('Response:', response1);

const result1 = await metric1.measure(query1, response1);
console.log('Metric Result:', {
  score: result1.score,
  reason: result1.info.reason,
  details: result1.info.scoreDetails,
});
// Example Output:
// Metric Result: { score: 1, reason: 'The response follows all instructions.' }

----------------------------------------

TITLE: Markdown Changelog Entry for Version 0.1.0-alpha.1
DESCRIPTION: Documents the alpha release changes including initial Sarvam voice provider implementation and core dependency updates.

LANGUAGE: markdown
CODE:
## 0.1.0-alpha.1

### Patch Changes

- 1187213: feat: add saravam as a voice provider
- Updated dependencies [fc2f89c]
- Updated dependencies [dfbb131]
- Updated dependencies [0850b4c]
- Updated dependencies [9116d70]
  - @mastra/core@0.6.1-alpha.2

----------------------------------------

TITLE: Creating New Mastra Project with CLI
DESCRIPTION: Install Mastra CLI globally and use it to create a new project. This method allows for more customization options during project creation.

LANGUAGE: bash
CODE:
npm install -g mastra@latest 
mastra create

----------------------------------------

TITLE: Environment Variables Configuration
DESCRIPTION: Environment variable configuration for OpenAI API key and Postgres connection string.

LANGUAGE: env
CODE:
OPENAI_API_KEY=sk-your-api-key-here
POSTGRES_CONNECTION_STRING=your-postgres-connection-string-here

----------------------------------------

TITLE: Vector Deletion Example
DESCRIPTION: Example of deleting a single vector by ID from a specified index.

LANGUAGE: typescript
CODE:
await pgVector.deleteIndexById("my_vectors", "vector123");

----------------------------------------

TITLE: Importing dependencies for Mastra and PGVector
DESCRIPTION: Imports the required modules for embedding, PgVector, and OpenAI integration.

LANGUAGE: typescript
CODE:
import { embed } from 'ai';
import { PgVector } from '@mastra/pg';
import { openai } from '@ai-sdk/openai';

----------------------------------------

TITLE: Cloning Repository and Navigating to Project Directory
DESCRIPTION: Commands to clone the Mastra repository from GitHub and navigate to the specific example directory.

LANGUAGE: bash
CODE:
git clone https://github.com/mastra-ai/mastra
cd examples/basics/rag/cleanup-rag

----------------------------------------

TITLE: Implementing Chat API Route with Mastra
DESCRIPTION: Shows how to create an API route handler for chat functionality using Mastra and AI SDK. Handles POST requests and returns streaming responses.

LANGUAGE: typescript
CODE:
import { mastra } from '@/src/mastra';

export async function POST(req: Request) {
  const { messages } = await req.json();
  const myAgent = mastra.getAgent('weatherAgent');
  const stream = await myAgent.stream(messages);

  return stream.toDataStreamResponse();
}

----------------------------------------

TITLE: Streaming Responses from Chef Agent in TypeScript
DESCRIPTION: Shows how to stream responses from the Chef Assistant agent, allowing for real-time output as the agent generates its response.

LANGUAGE: typescript
CODE:
async function main() {
  const query =
    "Now I'm over at my friend's house, and they have: chicken thighs, coconut milk, sweet potatoes, and some curry powder.";
  console.log(`Query: ${query}`);

  const stream = await chefAgent.stream([{ role: "user", content: query }]);

  console.log("\n Chef Michel: ");

  for await (const chunk of stream.textStream) {
    process.stdout.write(chunk);
  }

  console.log("\n\n✅ Recipe complete!");
}

main();

----------------------------------------

TITLE: Setting Telemetry Environment Variables (.env)
DESCRIPTION: Configures the OTLP endpoint and headers through environment variables. This allows for flexible configuration of telemetry export settings without modifying the code.

LANGUAGE: env
CODE:
OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4318
OTEL_EXPORTER_OTLP_HEADERS=x-api-key=your-api-key

----------------------------------------

TITLE: Defining IndexStats Interface in TypeScript
DESCRIPTION: Defines the structure of the IndexStats interface, which represents the statistics of a Qdrant index including dimension, count, and metric type.

LANGUAGE: typescript
CODE:
interface IndexStats {
  dimension: number;
  count: number;
  metric: "cosine" | "euclidean" | "dotproduct";
}

----------------------------------------

TITLE: Running the Application
DESCRIPTION: Command to start the Graph RAG example application.

LANGUAGE: bash
CODE:
pnpm start

----------------------------------------

TITLE: Changelog Dependency Updates
DESCRIPTION: Lists of updated dependencies with their commit hashes in markdown format

LANGUAGE: markdown
CODE:
- Updated dependencies [fc2f89c]
- Updated dependencies [dfbb131]
- Updated dependencies [f4854ee]
- Updated dependencies [afaf73f]
- Updated dependencies [@mastra/core@0.6.1]

----------------------------------------

TITLE: Package Version Updates in Markdown
DESCRIPTION: Changelog entries documenting version updates, dependency changes, and patches for the @mastra/voice-playai package

LANGUAGE: markdown
CODE:
# @mastra/voice-playai

## 0.1.5

### Patch Changes

- Updated dependencies [fc2f89c]
- Updated dependencies [dfbb131]
- Updated dependencies [f4854ee]
- Updated dependencies [afaf73f]
- Updated dependencies [0850b4c]
- Updated dependencies [7bcfaee]
- Updated dependencies [44631b1]
- Updated dependencies [9116d70]
- Updated dependencies [6e559a0]
- Updated dependencies [5f43505]
  - @mastra/core@0.6.1

----------------------------------------

TITLE: Installing GitHub Integration via NPM
DESCRIPTION: Command to install the GitHub integration package using npm.

LANGUAGE: bash
CODE:
npm install @mastra/github

----------------------------------------

TITLE: Cloning Repository and Navigating to Project Directory
DESCRIPTION: Commands to clone the Mastra repository and navigate to the hybrid vector search example directory.

LANGUAGE: bash
CODE:
git clone https://github.com/mastra-ai/mastra
cd examples/basics/rag/hybrid-vector-search

----------------------------------------

TITLE: Initializing PgVector with connection string
DESCRIPTION: Creates a new instance of PgVector using the Postgres connection string from environment variables.

LANGUAGE: typescript
CODE:
const pgVector = new PgVector(process.env.POSTGRES_CONNECTION_STRING!);

----------------------------------------

TITLE: Processing Documents for RAG System
DESCRIPTION: Code for creating and chunking documents with specific strategy, size, and overlap parameters.

LANGUAGE: typescript
CODE:
const doc = MDocument.fromText(
  `Riverdale Heights: Community Development Study...`,
);

const chunks = await doc.chunk({
  strategy: "recursive",
  size: 512,
  overlap: 50,
  separator: "\n",
});

----------------------------------------

TITLE: Vercel Deployer Configuration
DESCRIPTION: Configuration example for the Vercel deployer showing required parameters including team ID and authentication token.

LANGUAGE: typescript
CODE:
new VercelDeployer({
  teamId: 'your-vercel-team-id',
  projectName: 'your-project-name',
  token: 'your-vercel-token'
  // For complete configuration options, see the reference documentation
})

----------------------------------------

TITLE: Environment Variables Setup for RAG System
DESCRIPTION: Configuration of required environment variables for OpenAI API key and PostgreSQL connection string.

LANGUAGE: bash
CODE:
OPENAI_API_KEY=your_openai_api_key_here
POSTGRES_CONNECTION_STRING=your_connection_string_here

----------------------------------------

TITLE: Setting up environment variables for Mastra and PGVector
DESCRIPTION: Configures the necessary environment variables for OpenAI API key and Postgres connection string.

LANGUAGE: bash
CODE:
OPENAI_API_KEY=your_openai_api_key_here
POSTGRES_CONNECTION_STRING=your_connection_string_here

----------------------------------------

TITLE: Non-Interactive Mastra Installation
DESCRIPTION: Command line options for installing Mastra in non-interactive mode with specific components and LLM provider selections.

LANGUAGE: bash
CODE:
npx create-mastra@latest --components agents,tools --llm openai --example

----------------------------------------

TITLE: Initializing Mastra Project with pnpm
DESCRIPTION: Command to create a new Mastra project using pnpm's create command.

LANGUAGE: bash
CODE:
pnpm create mastra

----------------------------------------

TITLE: Error Handling for Qdrant Vector Store in TypeScript
DESCRIPTION: Demonstrates how to handle errors thrown by the Qdrant vector store, including catching VectorStoreError and accessing error codes and details.

LANGUAGE: typescript
CODE:
try {
  await store.query({
    indexName: "index_name",
    queryVector: queryVector,
  });
} catch (error) {
  if (error instanceof VectorStoreError) {
    console.log(error.code); // 'connection_failed' | 'invalid_dimension' | etc
    console.log(error.details); // Additional error context
  }
}

----------------------------------------

TITLE: Starting Mastra Development Server
DESCRIPTION: Command to run the Mastra playground in development mode. Requires setting up API keys for LLM providers like Anthropic (ANTHROPIC_API_KEY) or Google Gemini (GOOGLE_GENERATIVE_AI_API_KEY).

LANGUAGE: bash
CODE:
npm run dev

----------------------------------------

TITLE: Version History Documentation in Markdown
DESCRIPTION: Changelog entries detailing version updates and dependency changes for the @mastra/voice-openai package, noting its deprecation of @mastra/speech-openai and integration with OpenAI's voice services.

LANGUAGE: markdown
CODE:
# @mastra/voice-openai

## 0.1.6

### Patch Changes

- Updated dependencies [fc2f89c]
- Updated dependencies [dfbb131]
- Updated dependencies [f4854ee]
- Updated dependencies [afaf73f]
- Updated dependencies [0850b4c]
- Updated dependencies [7bcfaee]
- Updated dependencies [44631b1]
- Updated dependencies [9116d70]
- Updated dependencies [6e559a0]
- Updated dependencies [5f43505]
  - @mastra/core@0.6.1

----------------------------------------

TITLE: Configuring GitHub Integration in TypeScript
DESCRIPTION: Setup code for initializing the GitHub integration with personal access token configuration.

LANGUAGE: typescript
CODE:
import { GithubIntegration } from '@mastra/github';

export const github = new GithubIntegration({
  config: {
    PERSONAL_ACCESS_TOKEN: process.env.GITHUB_PAT!,
  },
});

----------------------------------------

TITLE: Environment File Configuration
DESCRIPTION: Configuration steps for setting up the environment variables file.

LANGUAGE: bash
CODE:
cp .env.example .env

----------------------------------------

TITLE: Injecting Mastra Instance into Workflow
DESCRIPTION: Demonstrates how to inject a Mastra instance into a workflow for dynamic workflow creation

LANGUAGE: typescript
CODE:
import { Mastra } from "@mastra/core";

const mastra = new Mastra();

const myWorkflow = new Workflow({
  name: 'my-workflow',
  mastra,
});

----------------------------------------

TITLE: Document Processing and Chunking
DESCRIPTION: Creating and processing a document into chunks with specific chunking strategy and parameters.

LANGUAGE: typescript
CODE:
const doc1 = MDocument.fromText(`
market data shows price resistance levels.
technical charts display moving averages.
support levels guide trading decisions.
breakout patterns signal entry points.
price action determines trade timing.

baseball cards show gradual value increase.
rookie cards command premium prices.
card condition affects resale value.
authentication prevents fake trading.
grading services verify card quality.

volume analysis confirms price trends.
sports cards track seasonal demand.
chart patterns predict movements.
mint condition doubles card worth.
resistance breaks trigger orders.
rare cards appreciate yearly.
`);

const chunks = await doc1.chunk({
  strategy: "recursive",
  size: 150,
  overlap: 20,
  separator: "\n",
});

----------------------------------------

TITLE: Implementing Context Analysis Step in RAG Workflow
DESCRIPTION: Defines the first step in the RAG workflow for analyzing the context of the query using the configured agent.

LANGUAGE: typescript
CODE:
const analyzeContext = new Step({
  id: "analyzeContext",
  outputSchema: z.object({
    initialAnalysis: z.string(),
  }),
  execute: async ({ context, mastra }) => {
    console.log("---------------------------");
    const ragAgent = mastra?.agents?.ragAgent;
    const query = context?.getStepResult<{ query: string }>(
      "trigger",
    )?.query;

    const analysisPrompt = `${query} 1. First, carefully analyze the retrieved context chunks and identify key information.`;

    const analysis = await ragAgent?.generate(analysisPrompt);
    console.log(analysis?.text);
    return {
      initialAnalysis: analysis?.text ?? "",
    };
  },
});

----------------------------------------

TITLE: Initializing UpstashTransport in TypeScript
DESCRIPTION: Creates a new UpstashTransport instance for sending logs to Upstash Redis. It requires Upstash URL and token, with optional configurations for list name, max length, batch size, and flush interval.

LANGUAGE: typescript
CODE:
import { UpstashTransport } from '@mastra/loggers';

const upstashLogger = new UpstashTransport({
  upstashUrl: 'https://your-instance.upstash.io',
  upstashToken: 'your-token',
  listName: 'application-logs', // optional
  maxListLength: 10000, // optional
  batchSize: 100, // optional
  flushInterval: 10000, // optional
});

----------------------------------------

TITLE: Initializing Mastra Project
DESCRIPTION: Command to create a new Mastra project using the CLI.

LANGUAGE: bash
CODE:
# Initialize a new project
mastra init

----------------------------------------

TITLE: Installing Dependencies - Package Manager
DESCRIPTION: Command to install project dependencies using pnpm package manager.

LANGUAGE: bash
CODE:
pnpm install

----------------------------------------

TITLE: MastraVoice Abstract Methods Implementation
DESCRIPTION: Detailed type definitions for the required abstract methods speak(), listen(), and getSpeakers() that must be implemented by any class extending MastraVoice.

LANGUAGE: typescript
CODE:
abstract speak(
  input: string | NodeJS.ReadableStream,
  options?: {
    speaker?: string;
    [key: string]: unknown;
  }
): Promise<NodeJS.ReadableStream | void>

abstract listen(
  audioStream: NodeJS.ReadableStream,
  options?: {
    [key: string]: unknown;
  }
): Promise<string | NodeJS.ReadableStream | void>

abstract getSpeakers(): Promise<Array<{ voiceId: string; [key: string]: unknown }>>

----------------------------------------

TITLE: Chunking MDocument in TypeScript
DESCRIPTION: Instance method to split the document into chunks and optionally extract metadata. Requires ChunkParams for configuration.

LANGUAGE: typescript
CODE:
async chunk(params?: ChunkParams): Promise<Chunk[]>

----------------------------------------

TITLE: Documenting Version Changes in Markdown
DESCRIPTION: This snippet shows the changelog for insert-embedding-in-libsql package, detailing version updates, patch changes, and dependency updates. It includes information for versions 0.0.3-alpha.0, 0.0.2, and several alpha releases.

LANGUAGE: markdown
CODE:
# insert-embedding-in-libsql

## 0.0.3-alpha.0

### Patch Changes

- Updated dependencies [06aa827]
  - @mastra/core@0.4.3-alpha.0
  - @mastra/rag@0.1.6-alpha.0

## 0.0.2

### Patch Changes

- Updated dependencies [7fceae1]
- Updated dependencies [8d94c3e]
- Updated dependencies [99dcdb5]
- Updated dependencies [6cb63e0]
- Updated dependencies [f626fbb]
- Updated dependencies [e752340]
- Updated dependencies [eb91535]
  - @mastra/core@0.4.2
  - @mastra/rag@0.1.5

## 0.0.2-alpha.2

### Patch Changes

- Updated dependencies [8d94c3e]
- Updated dependencies [99dcdb5]
- Updated dependencies [e752340]
- Updated dependencies [eb91535]
  - @mastra/core@0.4.2-alpha.2
  - @mastra/rag@0.1.5-alpha.2

## 0.0.2-alpha.1

### Patch Changes

- Updated dependencies [6cb63e0]
  - @mastra/core@0.4.2-alpha.1
  - @mastra/rag@0.1.5-alpha.1

## 0.0.2-alpha.0

### Patch Changes

- Updated dependencies [7fceae1]
- Updated dependencies [f626fbb]
  - @mastra/core@0.4.2-alpha.0
  - @mastra/rag@0.1.5-alpha.0

----------------------------------------

TITLE: Adding Cerebras as LLM Provider
DESCRIPTION: Adds Cerebras as a new LLM provider option in the create-mastra@latest command.

LANGUAGE: markdown
CODE:
- f9b6ab5: add Cerebras as a llm provider to create-mastra@latest

----------------------------------------

TITLE: Running the Mastra Workflow Example
DESCRIPTION: Command to start and execute the example that demonstrates using a tool as a workflow step in Mastra.

LANGUAGE: bash
CODE:
pnpm start

----------------------------------------

TITLE: Copying Environment Variables File
DESCRIPTION: Command to create a copy of the example environment variables file.

LANGUAGE: bash
CODE:
cp .env.example .env

----------------------------------------

TITLE: Implementing Conditional Workflow with Function-Based Conditions in TypeScript
DESCRIPTION: This snippet demonstrates how to create a Mastra workflow with conditional branching using function-based conditions. It includes steps for handling high and low values, and a final step that summarizes the result. The workflow uses if/else statements to determine the execution path based on an input value.

LANGUAGE: typescript
CODE:
import { Mastra } from '@mastra/core';
import { Step, Workflow } from '@mastra/core/workflows';
import { z } from 'zod';


// Step that provides the initial value
const startStep = new Step({
  id: 'start',
  outputSchema: z.object({
    value: z.number(),
  }),
  execute: async ({ context }) => {
    // Get the value from the trigger data
    const value = context.triggerData.inputValue;
    return { value };
  },
});

// Step that handles high values
const highValueStep = new Step({
  id: 'highValue',
  outputSchema: z.object({
    result: z.string(),
  }),
  execute: async ({ context }) => {
    const value = context.getStepResult<{ value: number }>('start')?.value;
    return { result: `High value processed: ${value}` };
  },
});

// Step that handles low values
const lowValueStep = new Step({
  id: 'lowValue',
  outputSchema: z.object({
    result: z.string(),
  }),
  execute: async ({ context }) => {
    const value = context.getStepResult<{ value: number }>('start')?.value;
    return { result: `Low value processed: ${value}` };
  },
});

// Final step that summarizes the result
const finalStep = new Step({
  id: 'final',
  outputSchema: z.object({
    summary: z.string(),
  }),
  execute: async ({ context }) => {
    // Get the result from whichever branch executed
    const highResult = context.getStepResult<{ result: string }>('highValue')?.result;
    const lowResult = context.getStepResult<{ result: string }>('lowValue')?.result;

    const result = highResult || lowResult;
    return { summary: `Processing complete: ${result}` };
  },
});

// Build the workflow with conditional branching
const conditionalWorkflow = new Workflow({
  name: 'conditional-workflow',
  triggerSchema: z.object({
    inputValue: z.number(),
  }),
});

conditionalWorkflow
  .step(startStep)
  .if(async ({ context }) => {
    const value = context.getStepResult<{ value: number }>('start')?.value ?? 0;
    return value >= 10; // Condition: value is 10 or greater
  })
  .then(highValueStep)
  .then(finalStep)
  .else()
  .then(lowValueStep)
  .then(finalStep) // Both branches converge on the final step
  .commit();

// Register the workflow
const mastra = new Mastra({
  workflows: { conditionalWorkflow },
});

// Example usage
async function runWorkflow(inputValue: number) {
  const workflow = mastra.getWorkflow('conditionalWorkflow');
  const { start } = workflow.createRun();

  const result = await start({
    triggerData: { inputValue },
  });

  console.log('Workflow result:', result.results);
  return result;
}

// Run with a high value (follows the "if" branch)
const result1 = await runWorkflow(15);
// Run with a low value (follows the "else" branch)
const result2 = await runWorkflow(5);

console.log('Result 1:', result1);
console.log('Result 2:', result2);

----------------------------------------

TITLE: Cloudflare Deployer Configuration
DESCRIPTION: Basic configuration example for the Cloudflare deployer showing required parameters.

LANGUAGE: typescript
CODE:
new CloudflareDeployer({
  scope: 'your-cloudflare-account-id',
  projectName: 'your-project-name',
  // For complete configuration options, see the reference documentation
})

----------------------------------------

TITLE: Configuring Summarization Metric with OpenAI Model in TypeScript
DESCRIPTION: Initializes the SummarizationMetric with an OpenAI GPT-4 model for evaluation.

LANGUAGE: typescript
CODE:
const metric = new SummarizationMetric(openai('gpt-4o-mini'));

----------------------------------------

TITLE: Implementing Final Answer Step in RAG Workflow
DESCRIPTION: Defines the final step in the RAG workflow for generating a structured response based on the conclusions drawn.

LANGUAGE: typescript
CODE:
const finalAnswer = new Step({
  id: "finalAnswer",
  outputSchema: z.object({
    finalAnswer: z.string(),
  }),
  execute: async ({ context, mastra }) => {
    console.log("---------------------------");
    const ragAgent = mastra?.agents?.ragAgent;
    const conclusions = context?.getStepResult<{
      conclusions: string;
    }>("drawConclusions")?.conclusions;
    const answerPrompt = `
        Based on the conclusions: ${conclusions}
        Format your response as:
        THOUGHT PROCESS:
        - Step 1: [Initial analysis of retrieved chunks]
        - Step 2: [Connections between chunks]
        - Step 3: [Reasoning based on chunks]

        FINAL ANSWER:
        [Your concise answer based on the retrieved context]`;

    const finalAnswer = await ragAgent?.generate(answerPrompt);
    console.log(finalAnswer?.text);
    return {
      finalAnswer: finalAnswer?.text ?? "",
    };
  },
});

----------------------------------------

TITLE: Defining Pinecone Index Stats Interface
DESCRIPTION: TypeScript interface definition for Pinecone index statistics, specifying the structure of index metadata including dimension, count, and similarity metric type.

LANGUAGE: typescript
CODE:
interface IndexStats {
  dimension: number;
  count: number;
  metric: "cosine" | "euclidean" | "dotproduct";
}

----------------------------------------

TITLE: Generating Text Responses from Chef Agent in TypeScript
DESCRIPTION: Demonstrates how to interact with the Chef Assistant agent to generate text responses based on user queries about available ingredients.

LANGUAGE: typescript
CODE:
async function main() {
  const query =
    "In my kitchen I have: pasta, canned tomatoes, garlic, olive oil, and some dried herbs (basil and oregano). What can I make?";
  console.log(`Query: ${query}`);

  const response = await chefAgent.generate([{ role: "user", content: query }]);
  console.log("\n👨‍🍳 Chef Michel:", response.text);
}

main();

----------------------------------------

TITLE: Installing @mastra/deployer via npm
DESCRIPTION: Command to install the @mastra/deployer package using npm. This is typically the first step in setting up the deployment infrastructure for a Mastra application.

LANGUAGE: bash
CODE:
npm install @mastra/deployer

----------------------------------------

TITLE: Implementing Conditional Branching with else() in Mastra Workflow
DESCRIPTION: Demonstrates how to create an alternative workflow branch using the .else() method when an if condition evaluates to false. Shows the basic structure of conditional branching with step execution.

LANGUAGE: typescript
CODE:
workflow
  .step(startStep)
  .if(async ({ context }) => {
    const value = context.getStepResult<{ value: number }>('start')?.value;
    return value < 10;
  })
  .then(ifBranchStep)
  .else() // Alternative branch when the condition is false
  .then(elseBranchStep)
  .commit();

----------------------------------------

TITLE: Installing @mastra/rag Package with npm
DESCRIPTION: This snippet shows how to install the @mastra/rag package using npm. The package provides document processing and embedding utilities for Retrieval-Augmented Generation.

LANGUAGE: bash
CODE:
npm install @mastra/rag

----------------------------------------

TITLE: Changelog Header
DESCRIPTION: Package name and version identifier in markdown format

LANGUAGE: markdown
CODE:
# @mastra/composio

----------------------------------------

TITLE: Running the JSON Chunking Example
DESCRIPTION: This command executes the JSON chunking example using pnpm.

LANGUAGE: bash
CODE:
pnpm start

----------------------------------------

TITLE: Cloning and Setting Up Mastra Project
DESCRIPTION: Instructions for cloning the Mastra repository and navigating to the metadata extraction example directory.

LANGUAGE: bash
CODE:
git clone https://github.com/mastra-ai/mastra
cd examples/basics/rag/metadata-extraction

----------------------------------------

TITLE: Low Position Adherence Evaluation
DESCRIPTION: Demonstrates evaluation of a response where the most relevant information appears at the end of the context, using information about rainbow formation.

LANGUAGE: typescript
CODE:
const context3 = [
  'Rainbows appear in the sky.',
  'Rainbows have different colors.',
  'Rainbows are curved in shape.',
  'Rainbows form when sunlight hits water droplets.',
];

const metric3 = new ContextPositionMetric(openai('gpt-4o-mini'), {
  context: context3,
});

const query3 = 'How do rainbows form?';
const response3 = 'Rainbows are created when sunlight interacts with water droplets in the air.';

console.log('Example 3 - Low Position Adherence:');
console.log('Context:', context3);
console.log('Query:', query3);
console.log('Response:', response3);

const result3 = await metric3.measure(query3, response3);
console.log('Metric Result:', {
  score: result3.score,
  reason: result3.info.reason,
});

----------------------------------------

TITLE: Defining Query Result Interface in TypeScript
DESCRIPTION: Specifies the structure of the QueryResult interface, which represents the result of a vector query, including id, score, metadata, and optional vector.

LANGUAGE: typescript
CODE:
interface QueryResult {
  id: string;
  score: number;
  metadata: Record<string, any>;
  vector?: number[]; // Only included if includeVector is true
}

----------------------------------------

TITLE: Initializing PgVector and Mastra Instance
DESCRIPTION: Setup code for initializing PgVector with connection string and creating a new Mastra instance with configured components.

LANGUAGE: typescript
CODE:
const pgVector = new PgVector(process.env.POSTGRES_CONNECTION_STRING!);

export const mastra = new Mastra({
  agents: { ragAgent },
  vectors: { pgVector },
});

const agent = mastra.getAgent("ragAgent");

----------------------------------------

TITLE: Running the RAG Filtering Example
DESCRIPTION: This command starts the RAG filtering example using pnpm. Ensure all previous steps have been completed before running this command.

LANGUAGE: bash
CODE:
pnpm start

----------------------------------------

TITLE: Response Generation Function
DESCRIPTION: Function to generate context-aware responses based on user queries using the configured agent.

LANGUAGE: typescript
CODE:
async function generateResponse(query: string) {
  const prompt = `
      Please answer the following question:
      ${query}

      Please base your answer only on the context provided in the tool. If the context doesn't 
      contain enough information to fully answer the question, please state that explicitly.
      `;

  const completion = await agent.generate(prompt);
  return completion.text;
}

----------------------------------------

TITLE: Suspending Workflow Execution in Typescript using Mastra
DESCRIPTION: Demonstrates how to use the suspend() function to pause workflow execution when a condition is met. In this example, the workflow is suspended if the amount exceeds 1000.

LANGUAGE: typescript
CODE:
const approvalStep = new Step({
  id: "needsApproval",
  execute: async ({ context, suspend }) => {
    if (context.steps.amount > 1000) {
      await suspend();
    }
    return { approved: true };
  }
});

----------------------------------------

TITLE: Defining Copywriter Agent and Tool in TypeScript
DESCRIPTION: This snippet defines a Copywriter agent and its associated tool function. The agent uses the Anthropic Claude model to generate blog post copy based on a given topic.

LANGUAGE: typescript
CODE:
import { openai } from "@ai-sdk/openai";
import { anthropic } from "@ai-sdk/anthropic";

const copywriterAgent = new Agent({
  name: "Copywriter",
  instructions: "You are a copywriter agent that writes blog post copy.",
  model: anthropic("claude-3-5-sonnet-20241022"),
});

const copywriterTool = createTool({
  id: "copywriter-agent",
  description: "Calls the copywriter agent to write blog post copy.",
  inputSchema: z.object({
    topic: z.string().describe("Blog post topic"),
  }),
  outputSchema: z.object({
    copy: z.string().describe("Blog post copy"),
  }),
  execute: async ({ context }) => {
    const result = await copywriterAgent.generate(
      `Create a blog post about ${context.topic}`,
    );
    return { copy: result.text };
  },
});

----------------------------------------

TITLE: Creating Weather Component with MastraClient
DESCRIPTION: React component implementing a weather information form using Mastra client for API calls

LANGUAGE: typescript
CODE:
'use client'

import { mastraClient } from '@/lib/mastra'

export function SimpleWeather() {
  async function handleSubmit(formData: FormData) {
    const city = formData.get('city')
    const agent = mastraClient.getAgent('weatherAgent')
    
    try {
      const response = await agent.generate({
        messages: [{ role: 'user', content: `What's the weather like in ${city}?` }],
      })
      // Handle the response
      console.log(response.text)
    } catch (error) {
      console.error('Error:', error)
    }
  }

  return (
    <form action={handleSubmit}>
      <input name="city" placeholder="Enter city name" />
      <button type="submit">Get Weather</button>
    </form>
  )
}

----------------------------------------

TITLE: Changelog Entry in Markdown
DESCRIPTION: Markdown formatted changelog showing version history and dependency updates for the using-a-workflow package. Documents the progression from alpha releases to the final 0.0.1 version.

LANGUAGE: markdown
CODE:
# using-a-workflow

## 0.0.1

## 0.0.1-alpha.2

### Patch Changes

- Updated dependencies [e9d1b47]
  - @mastra/core@0.2.0-alpha.85

## 0.0.1-alpha.1

### Patch Changes

- Updated dependencies [2f17a5f]
- Updated dependencies [cb290ee]
- Updated dependencies [b4d7416]
- Updated dependencies [38b7f66]
  - @mastra/core@0.2.0-alpha.84

## 0.0.1-alpha.0

### Patch Changes

- Updated dependencies [30322ce]
- Updated dependencies [78eec7c]
- Updated dependencies [9625602]
- Updated dependencies [8769a62]
  - @mastra/core@0.2.0-alpha.83

----------------------------------------

TITLE: Installing Dependencies with pnpm
DESCRIPTION: This command installs the necessary dependencies for the project using pnpm, which is the recommended package manager for this example.

LANGUAGE: bash
CODE:
pnpm install

----------------------------------------

TITLE: Environment Variables Configuration
DESCRIPTION: Configuration of API keys for OpenAI and Pinecone in the environment file.

LANGUAGE: env
CODE:
OPENAI_API_KEY=sk-your-api-key-here
PINECONE_API_KEY=your-pinecone-api-key-here

----------------------------------------

TITLE: Vector Store Error Handling Example in TypeScript
DESCRIPTION: Demonstrates how to handle errors thrown by the ChromaVector store using try-catch blocks and the VectorStoreError type for typed error handling.

LANGUAGE: typescript
CODE:
try {
  await store.query({
    indexName: "index_name",
    queryVector: queryVector,
  });
} catch (error) {
  if (error instanceof VectorStoreError) {
    console.log(error.code); // 'connection_failed' | 'invalid_dimension' | etc
    console.log(error.details); // Additional error context
  }
}

----------------------------------------

TITLE: API Key Configuration
DESCRIPTION: Environment variable configuration for Anthropic and OpenAI API keys.

LANGUAGE: env
CODE:
ANTHROPIC_API_KEY=sk-your-api-key-here
OPENAI_API_KEY=sk-your-api-key-here

----------------------------------------

TITLE: OpenAI API Configuration
DESCRIPTION: Environment variable configuration for setting up OpenAI API key.

LANGUAGE: env
CODE:
OPENAI_API_KEY=sk-your-api-key-here

----------------------------------------

TITLE: Handling Vector Store Errors in TypeScript
DESCRIPTION: This code snippet illustrates how to handle errors thrown by the vector store. It demonstrates catching a VectorStoreError and accessing its properties like error code and additional details.

LANGUAGE: typescript
CODE:
try {
  await store.query({
    indexName: "index_name",
    queryVector: queryVector,
  });
} catch (error) {
  if (error instanceof VectorStoreError) {
    console.log(error.code); // 'connection_failed' | 'invalid_dimension' | etc
    console.log(error.details); // Additional error context
  }
}

----------------------------------------

TITLE: Defining Workflow Steps in TypeScript
DESCRIPTION: Shows how to define workflow steps with input/output schemas and execution logic

LANGUAGE: typescript
CODE:
const stepOne = new Step({
  id: 'stepOne',
  outputSchema: z.object({
    doubledValue: z.number(),
  }),
  execute: async ({ context }) => {
    const doubledValue = context.triggerData.inputValue * 2;
    return { doubledValue };
  },
});

const stepTwo = new Step({
  id: "stepTwo",
  execute: async ({ context }) => {
    const doubledValue = context.getStepResult(stepOne)?.doubledValue;
    if (!doubledValue) {
      return { incrementedValue: 0 };
    }
    return {
      incrementedValue: doubledValue + 1,
    };
  },
});

----------------------------------------

TITLE: Configuring Mastra MCP Server in Cursor (Windows)
DESCRIPTION: JSON configuration for setting up the Mastra MCP server in Cursor on Windows. This snippet demonstrates how to update the .cursor/mcp.json file to include the Mastra MCP server with Windows-specific command settings.

LANGUAGE: json
CODE:
{
  "mcpServers": {
    "mastra": {
      "command": "cmd",
      "args": ["/c", "npx", "-y", "@mastra/mcp-docs-server@latest"]
    }
  }
}

----------------------------------------

TITLE: Running the Re-ranking Example
DESCRIPTION: Command to start the re-ranking example application.

LANGUAGE: bash
CODE:
pnpm start

----------------------------------------

TITLE: Workflow Error Handling
DESCRIPTION: Implementation of error handling for workflow execution and validation errors.

LANGUAGE: typescript
CODE:
try {
  const { runId, start, watch, resume } = workflow.createRun();
  await start({ triggerData: data });
} catch (error) {
  if (error instanceof ValidationError) {
    // Handle validation errors
    console.log(error.type); // 'circular_dependency' | 'no_terminal_path' | 'unreachable_step'
    console.log(error.details); // { stepId?: string, path?: string[] }
  }
}

----------------------------------------

TITLE: Configuring Vitest Global Setup for Mastra
DESCRIPTION: Global setup configuration for integrating Mastra evals with Vitest testing framework.

LANGUAGE: typescript
CODE:
import { globalSetup } from '@mastra/evals';

export default function setup() {
  globalSetup()
}

----------------------------------------

TITLE: Initializing Content Creation Workflow - Complete Example
DESCRIPTION: Complete TypeScript implementation of a content creation workflow using AI agents for copywriting and editing. Uses Anthropic and OpenAI models to generate and refine blog post content.

LANGUAGE: typescript
CODE:
import { anthropic } from "@ai-sdk/anthropic";
import { openai } from "@ai-sdk/openai";

const copywriterAgent = new Agent({
  name: "Copywriter",
  instructions: "You are a copywriter agent that writes blog post copy.",
  model: anthropic("claude-3-5-sonnet-20241022"),
});

const copywriterStep = new Step({
  id: "copywriterStep",
  execute: async ({ context }) => {
    if (!context?.triggerData?.topic) {
      throw new Error("Topic not found in trigger data");
    }
    const result = await copywriterAgent.generate(
      `Create a blog post about ${context.triggerData.topic}`,
    );
    console.log("copywriter result", result.text);
    return {
      copy: result.text,
    };
  },
});

const editorAgent = new Agent({
  name: "Editor",
  instructions: "You are an editor agent that edits blog post copy.",
  model: openai("gpt-4o-mini"),
});

const editorStep = new Step({
  id: "editorStep",
  execute: async ({ context }) => {
    const copy = context?.getStepResult<{ copy: number }>(
      "copywriterStep",
    )?.copy;

    const result = await editorAgent.generate(
      `Edit the following blog post only returning the edited copy: ${copy}`,
    );
    console.log("editor result", result.text);
    return {
      copy: result.text,
    };
  },
});

const myWorkflow = new Workflow({
  name: "my-workflow",
  triggerSchema: z.object({
    topic: z.string(),
  }),
});

// Run steps sequentially.
myWorkflow.step(copywriterStep).then(editorStep).commit();

const { runId, start } = myWorkflow.createRun();

const res = await start({
  triggerData: { topic: "React JavaScript frameworks" },
});
console.log("Results: ", res.results);

----------------------------------------

TITLE: Running the Example
DESCRIPTION: Command to start the re-ranking example application

LANGUAGE: bash
CODE:
pnpm start

----------------------------------------

TITLE: Running the Example
DESCRIPTION: Command to start the context precision example application.

LANGUAGE: bash
CODE:
pnpm start

----------------------------------------

TITLE: Comparing Moderate Similarity Texts in TypeScript
DESCRIPTION: Illustrates the comparison of texts with similar meaning but different wording using the ContentSimilarityMetric. It demonstrates how to measure and interpret similarity scores for moderately similar content.

LANGUAGE: typescript
CODE:
const text2 = 'A brown fox quickly leaps across a sleeping dog.';
const reference2 = 'The quick brown fox jumps over the lazy dog.';

console.log('Example 2 - Moderate Similarity:');
console.log('Text:', text2);
console.log('Reference:', reference2);

const result2 = await metric.measure(reference2, text2);
console.log('Metric Result:', {
  score: result2.score,
  info: {
    similarity: result2.info.similarity,
  },
});
// Example Output:
// Metric Result: {
//   score: 0.40540540540540543,
//   info: { similarity: 0.40540540540540543 }
// }

----------------------------------------

TITLE: Creating a Graph RAG Tool with Custom Description in TypeScript
DESCRIPTION: This snippet demonstrates how to create a Graph RAG Tool with a custom description, tailoring it for a specific use case while maintaining its core functionality of relationship analysis.

LANGUAGE: typescript
CODE:
const graphTool = createGraphRAGTool({
  vectorStoreName: "pinecone",
  indexName: "docs",
  model: openai.embedding('text-embedding-3-small'),
  description: "Analyze document relationships to find complex patterns and connections in our company's historical data"
});

----------------------------------------

TITLE: Cloning Repository and Navigation
DESCRIPTION: Commands to clone the mastra repository and navigate to the agents-as-tools example directory.

LANGUAGE: bash
CODE:
git clone https://github.com/mastra-ai/mastra
cd examples/basics/agents/agents-as-tools

----------------------------------------

TITLE: Configuring Mastra MCP Server in Cursor (MacOS/Linux)
DESCRIPTION: JSON configuration for setting up the Mastra MCP server in Cursor on MacOS/Linux. This snippet shows how to update the .cursor/mcp.json file to include the Mastra MCP server.

LANGUAGE: json
CODE:
{
  "mcpServers": {
    "mastra": {
      "command": "npx",
      "args": ["-y", "@mastra/mcp-docs-server@latest"]
    }
  }
}

----------------------------------------

TITLE: Installing Project Dependencies
DESCRIPTION: Command to install required project dependencies using pnpm.

LANGUAGE: bash
CODE:
pnpm install

----------------------------------------

TITLE: Handling Voice Events in TypeScript
DESCRIPTION: This code snippet shows how to listen for and handle various events emitted by the realtime voice provider in a Mastra agent. It covers events for speech audio data, transcribed text, and error handling.

LANGUAGE: typescript
CODE:
// Listen for speech audio data sent from voice provider
voice.on('speaking', ({ audio }) => {
  // audio contains ReadableStream or Int16Array audio data
});

// Listen for transcribed text sent from both voice provider and user
voice.on('writing', ({ text, role }) => {
  console.log(`${role} said: ${text}`);
});

// Listen for errors
voice.on('error', (error) => {
  console.error('Voice error:', error);
});

----------------------------------------

TITLE: Linking Workflow Steps in TypeScript
DESCRIPTION: Demonstrates how to link workflow steps together and commit the workflow

LANGUAGE: typescript
CODE:
myWorkflow
  .step(stepOne)
  .then(stepTwo)
  .commit();

----------------------------------------

TITLE: Advanced Example of HallucinationMetric Usage in TypeScript
DESCRIPTION: This example demonstrates a more complex use case of the HallucinationMetric, including multiple context statements and analysis of the output.

LANGUAGE: typescript
CODE:
import { openai } from "@ai-sdk/openai";
import { HallucinationMetric } from "@mastra/evals/llm";

// Configure the model for evaluation
const model = openai("gpt-4o-mini");

const metric = new HallucinationMetric(model, {
  context: [
    "OpenAI was founded in December 2015 by Sam Altman, Greg Brockman, and others.",
    "The company launched with a $1 billion investment commitment.",
    "Elon Musk was an early supporter but left the board in 2018.",
  ],
});

const result = await metric.measure({
  input: "What are the key details about OpenAI?",
  output:
    "OpenAI was founded in 2015 by Elon Musk and Sam Altman with a $2 billion investment.",
});

// Example output:
// {
//   score: 0.33,
//   info: {
//     reason: "The score is 0.33 because one out of three statements from the context
//           was contradicted (the investment amount was stated as $2 billion instead
//           of $1 billion). The founding date was correct, and while the output's
//           description of founders was incomplete, it wasn't strictly contradictory."
//   }
// }

----------------------------------------

TITLE: Initializing Project Structure with Mastra CLI
DESCRIPTION: Example folder structure generated by the Mastra CLI command 'mastra init', showing the default organization of a complete Mastra project including agents, tools, and workflows directories.

LANGUAGE: plaintext
CODE:
root/
├── src/
│   └── mastra/
│       ├── agents/
│       │   └── index.ts
│       ├── tools/
│       │   └── index.ts
│       ├── workflows/
│       │   └── index.ts
│       ├── index.ts
├── .env

----------------------------------------

TITLE: Creating Basic Markdown Documentation Header
DESCRIPTION: Shows how to structure the initial title and description section of a reference document.

LANGUAGE: markdown
CODE:
# MyFunction Reference

The MyFunction utility in Mastra allows you to transform data before passing it to the engine.

----------------------------------------

TITLE: Copying Environment Configuration
DESCRIPTION: Command to create a copy of the example environment variables file

LANGUAGE: bash
CODE:
cp .env.example .env

----------------------------------------

TITLE: Cloning and Setting Up Mastra Project
DESCRIPTION: Commands for cloning the repository and navigating to the custom evaluation example directory.

LANGUAGE: bash
CODE:
git clone https://github.com/mastra-ai/mastra
cd examples/basics/evals/custom-eval

----------------------------------------

TITLE: Enabling Telemetry in Mastra Configuration (TypeScript)
DESCRIPTION: Demonstrates how to enable telemetry in Mastra, configuring service name, sampling, and export options. This setup uses the OpenTelemetry Protocol (OTLP) and exports data to a local SigNoz endpoint.

LANGUAGE: typescript
CODE:
export const mastra = new Mastra({
  // ... other config
  telemetry: {
    serviceName: "my-app",
    enabled: true,
    sampling: {
      type: "always_on",
    },
    export: {
      type: "otlp",
      endpoint: "http://localhost:4318", // SigNoz local endpoint
    },
  },
});

----------------------------------------

TITLE: Environment File Copy Command
DESCRIPTION: Command to create environment configuration file from template.

LANGUAGE: bash
CODE:
cp .env.example .env

----------------------------------------

TITLE: Configuring Content Similarity Metric in TypeScript
DESCRIPTION: Sets up a new instance of the ContentSimilarityMetric. This metric will be used to measure the similarity between text samples.

LANGUAGE: typescript
CODE:
const metric = new ContentSimilarityMetric();

----------------------------------------

TITLE: Configuring PlayAI API Key
DESCRIPTION: Environment variable setup for the PlayAI API key.

LANGUAGE: bash
CODE:
PLAYAI_API_KEY=your_api_key

----------------------------------------

TITLE: Setting OpenAI API Key in Environment File
DESCRIPTION: This snippet shows the format for adding the OpenAI API key to the .env file. The user needs to replace 'your-api-key-here' with their actual API key.

LANGUAGE: env
CODE:
OPENAI_API_KEY=sk-your-api-key-here

----------------------------------------

TITLE: Configuring API Keys in Environment File
DESCRIPTION: Environment variable configuration for OpenAI and Pinecone API keys.

LANGUAGE: env
CODE:
OPENAI_API_KEY=sk-your-api-key-here
PINECONE_API_KEY=your-pinecone-api-key-here

----------------------------------------

TITLE: Registering Workflow with Mastra Core
DESCRIPTION: Shows how to register a workflow with the Mastra framework for logging and telemetry

LANGUAGE: typescript
CODE:
import { Mastra } from "@mastra/core";

export const mastra = new Mastra({
  workflows: { myWorkflow },
});

----------------------------------------

TITLE: Configuring Keyword Coverage Metric in TypeScript
DESCRIPTION: This code initializes a new instance of the KeywordCoverageMetric. This metric will be used to evaluate how well responses include important keywords from the input text.

LANGUAGE: typescript
CODE:
const metric = new KeywordCoverageMetric();

----------------------------------------

TITLE: Environment File Setup
DESCRIPTION: Command to create environment file from template.

LANGUAGE: bash
CODE:
cp .env.example .env

----------------------------------------

TITLE: Installing Dependencies
DESCRIPTION: Command to install project dependencies using pnpm package manager.

LANGUAGE: bash
CODE:
pnpm install

----------------------------------------

TITLE: Installing Dependencies with pnpm in Bash
DESCRIPTION: Command to install project dependencies using pnpm package manager.

LANGUAGE: bash
CODE:
pnpm install

----------------------------------------

TITLE: Evaluating Consistent Positive Tone in TypeScript
DESCRIPTION: Measure the tone consistency between two positively-toned texts using the ToneConsistencyMetric.

LANGUAGE: typescript
CODE:
const input1 = 'This product is fantastic and amazing!';
const output1 = 'The product is excellent and wonderful!';

console.log('Example 1 - Consistent Positive Tone:');
console.log('Input:', input1);
console.log('Output:', output1);

const result1 = await metric.measure(input1, output1);
console.log('Metric Result:', {
  score: result1.score,
  info: result1.info,
});
// Example Output:
// Metric Result: {
//   score: 0.8333333333333335,
//   info: {
//     responseSentiment: 1.3333333333333333,
//     referenceSentiment: 1.1666666666666667,
//     difference: 0.16666666666666652
//   }
// }

----------------------------------------

TITLE: Mastra Build Command Options
DESCRIPTION: Command line options available for the mastra build command, including directory specification.

LANGUAGE: bash
CODE:
--dir     Directory containing Mastra files (default: src/mastra)

----------------------------------------

TITLE: Running the Example Application
DESCRIPTION: Command to start the example application using pnpm.

LANGUAGE: bash
CODE:
pnpm start

----------------------------------------

TITLE: OpenAI API Configuration - Environment Variables
DESCRIPTION: Environment variable configuration for setting up OpenAI API key access.

LANGUAGE: env
CODE:
OPENAI_API_KEY=sk-your-api-key-here

----------------------------------------

TITLE: Installing Dependencies
DESCRIPTION: Command for installing project dependencies using pnpm.

LANGUAGE: bash
CODE:
pnpm install

----------------------------------------

TITLE: Generating and Storing Embeddings with OpenAI and PGVector
DESCRIPTION: Creates embeddings for document chunks using OpenAI's embedding model and stores them in PostgreSQL using PGVector.

LANGUAGE: typescript
CODE:
const { embeddings } = await embedMany({
  values: chunks.map(chunk => chunk.text),
  model: openai.embedding('text-embedding-3-small'),
});

const pgVector = new PgVector(process.env.POSTGRES_CONNECTION_STRING!);
await pgVector.createIndex({
  indexName: 'embeddings',
  dimension: 1536,
});
await pgVector.upsert({
  indexName: 'embeddings',
  vectors: embeddings,
  metadata: chunks?.map((chunk: any) => ({ text: chunk.text })),
});

----------------------------------------

TITLE: Variable Mapping in Mastra Workflows
DESCRIPTION: Demonstrates how to use variable mapping for explicit data flow between steps in a Mastra workflow.

LANGUAGE: typescript
CODE:
import { Step, Workflow } from "@mastra/core/workflows";
import { z } from "zod";

const fetchUserStep = new Step({
  id: "fetchUser",
  outputSchema: z.object({
    userId: z.string(),
    name: z.string(),
    email: z.string(),
  }),
  execute: async () => {
    return {
      userId: "user123",
      name: "John Doe",
      email: "john@example.com"
    };
  },
});

const sendEmailStep = new Step({
  id: "sendEmail",
  inputSchema: z.object({
    recipientEmail: z.string(),
    recipientName: z.string(),
  }),
  execute: async ({ context }) => {
    const { recipientEmail, recipientName } = context.inputData;

    // Send email logic here
    return {
      status: "sent",
      to: recipientEmail
    };
  },
});

const workflow = new Workflow({
  name: "email-workflow",
});

workflow
  .step(fetchUserStep)
  .then(sendEmailStep, {
    variables: {
      // Map specific fields from fetchUser to sendEmail inputs
      recipientEmail: { step: fetchUserStep, path: 'email' },
      recipientName: { step: fetchUserStep, path: 'name' }
    }
  })
  .commit();

----------------------------------------

TITLE: Implementing Thought Breakdown Step in RAG Workflow
DESCRIPTION: Defines the second step in the RAG workflow for breaking down thoughts based on the initial analysis.

LANGUAGE: typescript
CODE:
const breakdownThoughts = new Step({
  id: "breakdownThoughts",
  outputSchema: z.object({
    breakdown: z.string(),
  }),
  execute: async ({ context, mastra }) => {
    console.log("---------------------------");
    const ragAgent = mastra?.agents?.ragAgent;
    const analysis = context?.getStepResult<{
      initialAnalysis: string;
    }>("analyzeContext")?.initialAnalysis;

    const connectionPrompt = `
      Based on the initial analysis: ${analysis}

      2. Break down your thinking process about how the retrieved information relates to the query.
    `;

    const connectionAnalysis = await ragAgent?.generate(connectionPrompt);
    console.log(connectionAnalysis?.text);
    return {
      breakdown: connectionAnalysis?.text ?? "",
    };
  },
});

----------------------------------------

TITLE: Running the RAG Example
DESCRIPTION: This command starts the RAG example using pnpm.

LANGUAGE: bash
CODE:
pnpm start

----------------------------------------

TITLE: Copying Environment Variables File in Bash
DESCRIPTION: Command to create a copy of the example environment variables file.

LANGUAGE: bash
CODE:
cp .env.example .env

----------------------------------------

TITLE: Example Output for Word Inclusion Scenarios
DESCRIPTION: Sample output showing three scenarios: full word inclusion, partial word inclusion, and no word inclusion, demonstrating the metric's scoring and statistics

LANGUAGE: plaintext
CODE:
Example 1 - Full Word Inclusion:
Words to check: ['apple', 'banana', 'orange']
Input: List some fruits
Output: Here are some fruits: apple, banana, and orange.
Metric Result: {
  score: 1,
  info: { totalWords: 3, matchedWords: 3 }
}

Example 2 - Partial Word Inclusion:
Words to check: ['python', 'javascript', 'typescript', 'rust']
Input: What programming languages do you know?
Output: I know python and javascript very well.
Metric Result: {
  score: 0.5,
  info: { totalWords: 4, matchedWords: 2 }
}

Example 3 - No Word Inclusion:
Words to check: ['cloud', 'server', 'database']
Input: Tell me about your infrastructure
Output: We use modern technology for our systems.
Metric Result: {
  score: 0,
  info: { totalWords: 3, matchedWords: 0 }
}

----------------------------------------

TITLE: Mastra Build Usage Examples
DESCRIPTION: Example commands showing how to build a Mastra project with default and custom directories.

LANGUAGE: bash
CODE:
# Build using default directory
mastra build

# Build from custom directory
mastra build --dir path/to/mastra

----------------------------------------

TITLE: Installing Dependencies for Mastra Keyword Coverage Example
DESCRIPTION: Command to install the necessary dependencies for the Mastra keyword coverage example using pnpm. This step is required before running the example.

LANGUAGE: bash
CODE:
pnpm install

----------------------------------------

TITLE: Importing dependencies for Context Precision evaluation
DESCRIPTION: This code imports the required dependencies from the OpenAI SDK and Mastra's evaluation library.

LANGUAGE: typescript
CODE:
import { openai } from '@ai-sdk/openai';
import { ContextPrecisionMetric } from '@mastra/evals/llm';

----------------------------------------

TITLE: Initializing MCP Client with Server Connections
DESCRIPTION: Examples of creating MCP clients with both stdio and SSE server configurations, including connection management and resource querying

LANGUAGE: typescript
CODE:
import { MastraMCPClient } from '@mastra/mcp';

// Create a client with stdio server
const stdioClient = new MastraMCPClient({
  name: 'my-stdio-client',
  version: '1.0.0', // optional
  server: {
    command: 'your-mcp-server-command',
    args: ['--your', 'args'],
  },
  capabilities: {}, // optional ClientCapabilities
});

// Or create a client with SSE server
const sseClient = new MastraMCPClient({
  name: 'my-sse-client',
  version: '1.0.0',
  server: {
    url: new URL('https://your-mcp-server.com/sse'),
    requestInit: {
      headers: { Authorization: 'Bearer your-token' },
    },
  },
});

// Connect to the MCP server
await client.connect();

// List available resources
const resources = await client.resources();

// Get available tools
const tools = await client.tools();

// Disconnect when done
await client.disconnect();

----------------------------------------

TITLE: Installing Dependencies for Mastra Sequential Workflow Example
DESCRIPTION: Command to install the necessary dependencies for the sequential workflow example using pnpm.

LANGUAGE: bash
CODE:
pnpm install

----------------------------------------

TITLE: OpenAI API Key Configuration
DESCRIPTION: Environment variable configuration for setting up the OpenAI API key.

LANGUAGE: env
CODE:
OPENAI_API_KEY=sk-your-api-key-here

----------------------------------------

TITLE: Cloning Repository and Navigating to Project Directory
DESCRIPTION: Commands to clone the Mastra repository and navigate to the specific example directory for inserting embeddings in Chroma.

LANGUAGE: bash
CODE:
git clone https://github.com/mastra-ai/mastra
cd examples/basics/rag/insert-embedding-in-chroma

----------------------------------------

TITLE: Using Context Object in Mastra Workflows
DESCRIPTION: Shows how to use the context object for direct access to step results in a Mastra workflow.

LANGUAGE: typescript
CODE:
import { Step, Workflow } from "@mastra/core/workflows";
import { z } from "zod";

const processOrderStep = new Step({
  id: 'processOrder',
  execute: async ({ context }) => {
    // Access data from a previous step
    let userData: { name: string, userId: string };
    if (context.steps['fetchUser']?.status === 'success') {
      userData = context.steps.fetchUser.output;
    } else {
      throw new Error('User data not found');
    }

    return {
      orderId: 'order123',
      userId: userData.userId,
      status: 'processing',
    };
  },
});

const workflow = new Workflow({
  name: "order-workflow",
});

workflow
  .step(fetchUserStep)
  .then(processOrderStep)
  .commit();

----------------------------------------

TITLE: Configuring Mastra RAG Agent
DESCRIPTION: Sets up a Mastra agent with specific instructions and tools for handling RAG operations.

LANGUAGE: typescript
CODE:
export const ragAgent = new Agent({
  name: 'RAG Agent',
  instructions:
    'You are a helpful assistant that answers questions based on the provided context. Keep your answers concise and relevant.',
  model: openai('gpt-4o-mini'),
  tools: {
    vectorQueryTool,
  },
});

----------------------------------------

TITLE: Installing Dependencies with pnpm
DESCRIPTION: Command to install project dependencies using pnpm package manager.

LANGUAGE: bash
CODE:
pnpm install

----------------------------------------

TITLE: Cloning Mastra Repository and Navigating to Example Directory
DESCRIPTION: Commands to clone the Mastra repository from GitHub and navigate to the specific example directory for the tool-as-workflow-step demonstration.

LANGUAGE: bash
CODE:
git clone https://github.com/mastra-ai/mastra
cd examples/basics/workflows/tool-as-workflow-step

----------------------------------------

TITLE: Running the Example with pnpm in Bash
DESCRIPTION: Command to start the hallucination metric example using pnpm.

LANGUAGE: bash
CODE:
pnpm start

----------------------------------------

TITLE: Initializing and using DeepgramVoice in TypeScript
DESCRIPTION: Demonstrates how to import, configure, and use the DeepgramVoice class. It shows initialization with speech and listening models, listing available voices, generating speech, and converting speech to text.

LANGUAGE: typescript
CODE:
import { DeepgramVoice } from '@mastra/voice-deepgram';

// Create voice with both speech and listening capabilities
const voice = new DeepgramVoice({
  speechModel: {
    name: 'aura-asteria-en', // Default voice
    apiKey: 'your-api-key', // Optional, can use DEEPGRAM_API_KEY env var
  },
  listeningModel: {
    name: 'nova', // Optional, specify a listening model
    apiKey: 'your-api-key', // Optional, can use DEEPGRAM_API_KEY env var
  },
  speaker: 'aura-athena-en', // Optional, specify a speaker voice
});

// List available voices
const voices = await voice.getSpeakers();

// Generate speech
const audioStream = await voice.speak('Hello from Mastra!', {
  speaker: 'aura-athena-en', // Optional: override default speaker
  speed: 1.0, // Optional: adjust speech speed
});

// Convert speech to text
const text = await voice.listen(audioStream);

----------------------------------------

TITLE: Defining QueryResult Interface in TypeScript
DESCRIPTION: This snippet defines the QueryResult interface, which represents the structure of query results returned by the query method. It includes the id, score, metadata, and an optional vector field.

LANGUAGE: typescript
CODE:
interface QueryResult {
  id: string;
  score: number;
  metadata: Record<string, any>;
  vector?: number[]; // Only included if includeVector is true
}

----------------------------------------

TITLE: Setting OpenAI API Key in Environment File
DESCRIPTION: Example of how to set the OpenAI API key in the .env file.

LANGUAGE: env
CODE:
OPENAI_API_KEY=sk-your-api-key-here

----------------------------------------

TITLE: Copying Environment Variables File
DESCRIPTION: Command to create a copy of the example environment variables file.

LANGUAGE: bash
CODE:
cp .env.example .env

----------------------------------------

TITLE: Context-Aware Evaluation Example
DESCRIPTION: Shows how to use FaithfulnessMetric with context to evaluate AI responses against provided background information.

LANGUAGE: typescript
CODE:
import { FaithfulnessMetric } from '@mastra/evals';

// Initialize with context
const faithfulnessMetric = new FaithfulnessMetric({
  model: openai('gpt-4'),
  context: ['Paris is the capital of France', 'Paris has a population of 2.2 million'],
  scale: 1,
});

// Evaluate response against context
const result = await faithfulnessMetric.measure(
  'Tell me about Paris',
  'Paris is the capital of France with 2.2 million residents',
);

console.log('Faithfulness Score:', result.score);
console.log('Reasoning:', result.reason);

----------------------------------------

TITLE: Accessing Resume Data in Mastra Workflows
DESCRIPTION: Shows how to access and use resume data in a Mastra workflow, demonstrating the suspension and resumption of a workflow.

LANGUAGE: typescript
CODE:
import { Step, Workflow } from "@mastra/core/workflows";
import { z } from "zod";

const processOrderStep = new Step({
  id: "processOrder",
  inputSchema: z.object({
    orderId: z.string(),
  }),
  execute: async ({ context, suspend }) => {
    const { orderId } = context.inputData;

    if (!orderId) {
      await suspend();
      return;
    }

    return {
      orderId,
      status: "processed"
    };
  },
});

const workflow = new Workflow({
  name: "order-workflow",
});

workflow
  .step(processOrderStep)
  .commit();

const run = workflow.createRun();
const result = await run.start();

const resumedResult = await workflow.resume({
  runId: result.runId,
  stepId: 'processOrder',
  inputData: {
    orderId: '123',
  },
});

console.log({resumedResult});

----------------------------------------

TITLE: Accessing a Specific Agent in TypeScript
DESCRIPTION: This code shows how to get an instance of a specific Mastra AI agent using its ID.

LANGUAGE: typescript
CODE:
const agent = client.getAgent("agent-id");

----------------------------------------

TITLE: Request Logging Middleware Implementation
DESCRIPTION: Implementation of logging middleware that tracks request duration and logs method and URL information.

LANGUAGE: typescript
CODE:
{
  handler: async (c, next) => {
    const start = Date.now();
    await next();
    const duration = Date.now() - start;
    console.log(`${c.req.method} ${c.req.url} - ${duration}ms`);
  }
}

----------------------------------------

TITLE: Running the Example Application
DESCRIPTION: Command to start and execute the custom evaluation example.

LANGUAGE: bash
CODE:
pnpm start

----------------------------------------

TITLE: Copying Environment File in Bash
DESCRIPTION: This command copies the .env.example file to .env, which is typically used to set up environment variables like API keys.

LANGUAGE: bash
CODE:
cp .env.example .env

----------------------------------------

TITLE: Markdown Changelog Documentation
DESCRIPTION: Documents version history and dependency updates for bird-checker-with-nextjs package, tracking changes from version 0.1.1-alpha.43 through 0.0.1

LANGUAGE: markdown
CODE:
# bird-checker-with-nextjs

## 0.0.1

## 0.0.1-alpha.2

### Patch Changes

- Updated dependencies [e9d1b47]
  - @mastra/core@0.2.0-alpha.85

----------------------------------------

TITLE: Configuring Braintrust Environment Variables
DESCRIPTION: Environment variable configuration required for connecting Mastra to Braintrust's API endpoint and authentication.

LANGUAGE: env
CODE:
OTEL_EXPORTER_OTLP_ENDPOINT=https://api.braintrust.dev/otel
OTEL_EXPORTER_OTLP_HEADERS="Authorization=Bearer <Your API Key>, x-bt-parent=project_id:<Your Project ID>"

----------------------------------------

TITLE: Running Mastra Keyword Coverage Example
DESCRIPTION: Command to start and run the Mastra keyword coverage example. This will execute the example and display the results of the keyword coverage evaluation.

LANGUAGE: bash
CODE:
pnpm start

----------------------------------------

TITLE: Environment Setup for OpenAI API
DESCRIPTION: Commands for creating and configuring the environment variables file with OpenAI API key.

LANGUAGE: bash
CODE:
cp .env.example .env

----------------------------------------

TITLE: Configuring Langfuse Environment Variables
DESCRIPTION: Environment variables required for Langfuse integration, including public key, secret key, and optional base URL configuration.

LANGUAGE: env
CODE:
LANGFUSE_PUBLIC_KEY=your_public_key
LANGFUSE_SECRET_KEY=your_secret_key
LANGFUSE_BASEURL=https://cloud.langfuse.com  # Optional - defaults to cloud.langfuse.com

----------------------------------------

TITLE: Running Mastra Agent Server
DESCRIPTION: Starts the Mastra development server, which exposes API endpoints for interacting with the registered Chef Assistant agent.

LANGUAGE: bash
CODE:
mastra dev

----------------------------------------

TITLE: Setting OpenAI API Key in Environment File
DESCRIPTION: Example of how to set the OpenAI API key in the .env file.

LANGUAGE: env
CODE:
OPENAI_API_KEY=sk-your-api-key-here

----------------------------------------

TITLE: Cloning Mastra Repository
DESCRIPTION: Commands to clone the Mastra repository and navigate to the example directory

LANGUAGE: bash
CODE:
git clone https://github.com/mastra-ai/mastra
cd examples/basics/rag/embed-text-chunk

----------------------------------------

TITLE: Setting up environment variables for OpenAI API
DESCRIPTION: Sets up the OPENAI_API_KEY environment variable for API authentication.

LANGUAGE: bash
CODE:
OPENAI_API_KEY=your_api_key_here

----------------------------------------

TITLE: Implementing Conclusion Step in RAG Workflow
DESCRIPTION: Defines the fourth step in the RAG workflow for drawing conclusions based on the connected information.

LANGUAGE: typescript
CODE:
const drawConclusions = new Step({
  id: "drawConclusions",
  outputSchema: z.object({
    conclusions: z.string(),
  }),
  execute: async ({ context, mastra }) => {
    console.log("---------------------------");
    const ragAgent = mastra?.agents?.ragAgent;
    const evidence = context?.getStepResult<{
      connections: string;
    }>("connectPieces")?.connections;
    const conclusionPrompt = `
        Based on the connections: ${evidence}

        4. Draw conclusions based only on the evidence in the retrieved context.
    `;

    const conclusions = await ragAgent?.generate(conclusionPrompt);
    console.log(conclusions?.text);
    return {
      conclusions: conclusions?.text ?? "",
    };
  },
});

----------------------------------------

TITLE: Setting up Environment Variables
DESCRIPTION: Commands for copying the environment template file and configuring it.

LANGUAGE: bash
CODE:
cp .env.example .env

----------------------------------------

TITLE: Running Dane AI Assistant and Its Features
DESCRIPTION: Commands to run the main Dane application, the issue labeler, and the commit message generator. These demonstrate how to interact with Dane's various functionalities.

LANGUAGE: bash
CODE:
# Run the main application
dane

# Run the issue labeler
dane issue-labeler

# Run the commit message generator
dane commit

----------------------------------------

TITLE: Starting Development Server
DESCRIPTION: Command to start the Next.js development server locally.

LANGUAGE: bash
CODE:
pnpm dev

----------------------------------------

TITLE: Copying Environment Variables File in Bash
DESCRIPTION: Command to create a copy of the example environment variables file.

LANGUAGE: bash
CODE:
cp .env.example .env

----------------------------------------

TITLE: Installing @mastra/loggers Package with npm
DESCRIPTION: Command to install the @mastra/loggers package using npm. This package provides logging transport implementations for Mastra.

LANGUAGE: bash
CODE:
npm install @mastra/loggers

----------------------------------------

TITLE: Initializing Mastra Project with npx
DESCRIPTION: Command to create a new Mastra project using npx, which is the recommended method for running create-mastra.

LANGUAGE: bash
CODE:
npx create-mastra@latest

----------------------------------------

TITLE: Installing Custom Exporter Dependencies for Next.js (Bash)
DESCRIPTION: Installs the required dependencies for setting up a custom OpenTelemetry exporter (Langfuse) in a Next.js project.

LANGUAGE: bash
CODE:
npm install @opentelemetry/api langfuse-vercel

----------------------------------------

TITLE: Running the Example
DESCRIPTION: Command to start the chunk array embedding example application.

LANGUAGE: bash
CODE:
pnpm start

----------------------------------------

TITLE: Installing Dependencies with pnpm
DESCRIPTION: Command to install project dependencies using pnpm package manager.

LANGUAGE: bash
CODE:
pnpm install

----------------------------------------

TITLE: Evaluating High Faithfulness Response in TypeScript
DESCRIPTION: Demonstrates how to evaluate a response where all claims are supported by the provided context using the Faithfulness metric.

LANGUAGE: typescript
CODE:
const context1 = [
  'The Tesla Model 3 was launched in 2017.',
  'It has a range of up to 358 miles.',
  'The base model accelerates 0-60 mph in 5.8 seconds.',
];

const metric1 = new FaithfulnessMetric(openai('gpt-4o-mini'), {
  context: context1,
});

const query1 = 'Tell me about the Tesla Model 3.';
const response1 = 'The Tesla Model 3 was introduced in 2017. It can travel up to 358 miles on a single charge and the base version goes from 0 to 60 mph in 5.8 seconds.';

console.log('Example 1 - High Faithfulness:');
console.log('Context:', context1);
console.log('Query:', query1);
console.log('Response:', response1);

const result1 = await metric1.measure(query1, response1);
console.log('Metric Result:', {
  score: result1.score,
  reason: result1.info.reason,
});
// Example Output:
// Metric Result: { score: 1, reason: 'All claims are supported by the context.' }

----------------------------------------

TITLE: Cloning Mastra Repository
DESCRIPTION: Commands to clone the Mastra repository and navigate to the graph-rag example directory.

LANGUAGE: bash
CODE:
git clone https://github.com/mastra-ai/mastra
cd examples/basics/rag/graph-rag

----------------------------------------

TITLE: Setting Deepgram API key as an environment variable
DESCRIPTION: Example of setting the Deepgram API key as an environment variable. This is one way to provide the necessary authentication for using Deepgram's services.

LANGUAGE: bash
CODE:
DEEPGRAM_API_KEY=your_api_key

----------------------------------------

TITLE: Running the Example
DESCRIPTION: Command to execute the contextual recall example application.

LANGUAGE: bash
CODE:
pnpm start

----------------------------------------

TITLE: Setting Up Environment Configuration
DESCRIPTION: Commands to create and configure the environment variables file for Unsplash and Anthropic API integration.

LANGUAGE: bash
CODE:
cp .env.example .env.local

----------------------------------------

TITLE: Configuring Logger
DESCRIPTION: Sets up a structured logging system with customizable log levels.

LANGUAGE: typescript
CODE:
import { createLogger, LogLevel } from '@mastra/core';

const logger = createLogger({
  name: 'MyApp',
  level: LogLevel.INFO,
});

----------------------------------------

TITLE: Creating Mastra Project with Default Settings
DESCRIPTION: Example command to create a new Mastra project using default settings, which includes a src directory, OpenAI integration, and no example code.

LANGUAGE: bash
CODE:
npx create-mastra@latest --default

----------------------------------------

TITLE: Setting OpenAI API key in environment file for Mastra workflow
DESCRIPTION: This snippet demonstrates how to add the OpenAI API key to the .env file, which is required for LLM integration in the Mastra workflow.

LANGUAGE: bash
CODE:
OPENAI_API_KEY=<your-openai-key>

----------------------------------------

TITLE: Running the Example Project with pnpm
DESCRIPTION: This command starts the example project using pnpm, which will demonstrate the Prompt Alignment metric scenarios.

LANGUAGE: bash
CODE:
pnpm start

----------------------------------------

TITLE: Initializing B2B Analytics Scripts
DESCRIPTION: JavaScript initialization code for a B2B analytics tracking system. Sets up methods for identifying and collecting analytics data asynchronously.

LANGUAGE: javascript
CODE:
window.reb2b = window.reb2b || [];
if (!window.reb2b.invoked) {
  window.reb2b.invoked = true;
  window.reb2b.methods = ["identify", "collect"];
  window.reb2b.factory = function(method) {
    return function() {
      var args = Array.prototype.slice.call(arguments);
      args.unshift(method);
      window.reb2b.push(args);
      return window.reb2b;
    };
  };
  window.reb2b.methods.forEach(function(key) {
    window.reb2b[key] = window.reb2b.factory(key);
  });
  window.reb2b.SNIPPET_VERSION = "1.0.1";

  const script = document.createElement("script");
  script.async = true;
  script.src = "https://s3-us-west-2.amazonaws.com/b2bjsstore/b/E63P0H7150OW/E63P0H7150OW.js.gz";
  document.head.appendChild(script);
}

----------------------------------------

TITLE: Cloning OpenAPI Spec Generator Repository
DESCRIPTION: Instructions for cloning the OpenAPI specification generator repository and navigating to the project directory.

LANGUAGE: bash
CODE:
git clone <repository-url>\ncd openapi-spec-generator

----------------------------------------

TITLE: Setting Up Environment Variables
DESCRIPTION: Commands for copying and configuring environment variables file

LANGUAGE: bash
CODE:
cp .env.example .env.local

----------------------------------------

TITLE: Cloning Mastra Repository
DESCRIPTION: Commands to clone the Mastra repository and navigate to the example project directory.

LANGUAGE: bash
CODE:
git clone https://github.com/mastra-ai/mastra
cd examples/basics/rag/cot-workflow-rag

----------------------------------------

TITLE: Evaluating no hallucination scenario with Mastra in TypeScript
DESCRIPTION: This snippet demonstrates how to evaluate a response that matches the context exactly using the Hallucination metric. It includes setting up the context, creating the metric instance, and measuring the hallucination score.

LANGUAGE: typescript
CODE:
const context1 = [
  'The iPhone was first released in 2007.',
  'Steve Jobs unveiled it at Macworld.',
  'The original model had a 3.5-inch screen.',
];

const metric1 = new HallucinationMetric(openai('gpt-4o-mini'), {
  context: context1,
});

const query1 = 'When was the first iPhone released?';
const response1 = 'The iPhone was first released in 2007, when Steve Jobs unveiled it at Macworld. The original iPhone featured a 3.5-inch screen.';

console.log('Example 1 - No Hallucination:');
console.log('Context:', context1);
console.log('Query:', query1);
console.log('Response:', response1);

const result1 = await metric1.measure(query1, response1);
console.log('Metric Result:', {
  score: result1.score,
  reason: result1.info.reason,
});
// Example Output:
// Metric Result: { score: 0, reason: 'The response matches the context exactly.' }

----------------------------------------

TITLE: Audio File Handling Utilities in TypeScript
DESCRIPTION: Helper functions for managing audio streams and file operations, including saving audio streams to files and converting various input types to text.

LANGUAGE: typescript
CODE:
/**
 * Saves an audio stream to a file
 */
async function saveAudioToFile(audio: NodeJS.ReadableStream, filename: string): Promise<void> {
  const filePath = path.join(process.cwd(), filename);
  const writer = createWriteStream(filePath);
  audio.pipe(writer);
  return new Promise<void>((resolve, reject) => {
    writer.on('finish', resolve);
    writer.on('error', reject);
  });
}

/**
 * Converts either a string or a readable stream to text
 */
async function convertToText(input: string | NodeJS.ReadableStream): Promise<string> {
  if (typeof input === 'string') {
    return input;
  }

  const chunks: Buffer[] = [];
  return new Promise<string>((resolve, reject) => {
    input.on('data', chunk => chunks.push(Buffer.from(chunk)));
    input.on('error', err => reject(err));
    input.on('end', () => resolve(Buffer.concat(chunks).toString('utf-8')));
  });
}

----------------------------------------

TITLE: Installing Dependencies
DESCRIPTION: Command to install required project dependencies using pnpm package manager.

LANGUAGE: bash
CODE:
pnpm install

----------------------------------------

TITLE: Environment Configuration
DESCRIPTION: Required environment variables for Unsplash image retrieval and Anthropic AI processing

LANGUAGE: env
CODE:
# Required for getting image\nUNSPLASH_ACCESS_KEY=your_unsplash_access_key\n\n# Required for AI processing\nANTHROPIC_API_KEY=your_anthropic_key\n\n# The port you want your server to run on (optional)\nPORT=your_preferred_port

----------------------------------------

TITLE: Initializing FileTransport in TypeScript
DESCRIPTION: Creates a new FileTransport instance for logging to a local file system. It requires specifying the path to the log file.

LANGUAGE: typescript
CODE:
import { FileTransport } from '@mastra/loggers';

const fileLogger = new FileTransport({
  path: '/path/to/logs/app.log',
});

----------------------------------------

TITLE: Running the Example
DESCRIPTION: Command to start the markdown chunking example application

LANGUAGE: bash
CODE:
pnpm start

----------------------------------------

TITLE: Interacting with Mastra Agent via curl
DESCRIPTION: This bash command demonstrates how to interact with a Mastra agent using curl, sending a POST request with JSON data to the agent's endpoint.

LANGUAGE: bash
CODE:
curl -X POST http://localhost:4111/api/agents/myAgent/generate \
  -H "Content-Type: application/json" \
  -d '{
    "messages": [
      { "role": "user", "content": "Hello, how can you assist me today?" }
    ]
  }'

----------------------------------------

TITLE: Running Next.js Development Server
DESCRIPTION: Commands to start the Next.js development server using various package managers. This allows developers to run the application locally for development and testing.

LANGUAGE: bash
CODE:
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev

----------------------------------------

TITLE: Advanced Usage Example in TypeScript
DESCRIPTION: Demonstrates how to document advanced usage scenarios with TypeScript examples.

LANGUAGE: typescript
CODE:
import { MyFunction } from "@mastra/core";

export async function transformDataSync(data: string) {
  const result = await MyFunction({
    data,
    options: { verbose: false },
  });
  return result;
}

----------------------------------------

TITLE: Installing Dependencies
DESCRIPTION: Command to install project dependencies using pnpm package manager.

LANGUAGE: bash
CODE:
pnpm install

----------------------------------------

TITLE: Basic Evaluation Example in TypeScript
DESCRIPTION: Demonstrates basic usage of ContentSimilarityMetric and ToxicityMetric to evaluate AI outputs. Shows initialization and measurement of similarity and toxicity scores.

LANGUAGE: typescript
CODE:
import { ContentSimilarityMetric, ToxicityMetric } from '@mastra/evals';

// Initialize metrics
const similarityMetric = new ContentSimilarityMetric({
  ignoreCase: true,
  ignoreWhitespace: true,
});

const toxicityMetric = new ToxicityMetric({
  model: openai('gpt-4'),
  scale: 1, // Optional: adjust scoring scale
});

// Evaluate outputs
const input = 'What is the capital of France?';
const output = 'Paris is the capital of France.';

const similarityResult = await similarityMetric.measure(input, output);
const toxicityResult = await toxicityMetric.measure(input, output);

console.log('Similarity Score:', similarityResult.score);
console.log('Toxicity Score:', toxicityResult.score);

----------------------------------------

TITLE: Example Query Processing Implementation
DESCRIPTION: Demonstrates processing multiple queries using the RAG system with error handling.

LANGUAGE: typescript
CODE:
async function answerQueries(queries: string[]) {
  for (const query of queries) {
    try {
      const answer = await generateResponse(query);
      console.log("\nQuery:", query);
      console.log("\nReasoning Chain + Retrieved Context Response:");
      console.log(answer);
      console.log("\n-------------------");
    } catch (error) {
      console.error(`Error processing query "${query}":`, error);
    }
  }
}

const queries = [
  "What are the main adaptation strategies for farmers?",
  "Analyze how temperature affects crop yields.",
  "What connections can you draw between climate change and food security?",
  "How are farmers implementing solutions to address climate challenges?",
  "What future implications are discussed for agriculture?",
];

await answerQueries(queries);

----------------------------------------

TITLE: Creating MDocument from Markdown in TypeScript
DESCRIPTION: Static method to create an MDocument instance from Markdown content.

LANGUAGE: typescript
CODE:
static fromMarkdown(markdown: string, metadata?: Record<string, any>): MDocument

----------------------------------------

TITLE: Query Result Interface Definition in TypeScript
DESCRIPTION: Defines the structure of query results returned by the ChromaVector store, including vector ID, similarity score, metadata, and optional document and vector data.

LANGUAGE: typescript
CODE:
interface QueryResult {
  id: string;
  score: number;
  metadata: Record<string, any>;
  document?: string; // Chroma-specific: Original document if it was stored
  vector?: number[]; // Only included if includeVector is true
}

----------------------------------------

TITLE: Version Update Changelog in Markdown
DESCRIPTION: Documents version 0.1.1-alpha.0 update which includes a dependency update for @mastra/core package to version 0.4.3-alpha.0.

LANGUAGE: markdown
CODE:
# mastra-ai-sdk-use-chat-example

## 0.1.1-alpha.0

### Patch Changes

- Updated dependencies [06aa827]
  - @mastra/core@0.4.3-alpha.0

----------------------------------------

TITLE: Markdown Changelog Entry for Version 2.0.1
DESCRIPTION: Documents changes in version 2.0.1 including resizable panels, workflow methods, and dependency updates.

LANGUAGE: markdown
CODE:
## 2.0.1

### Patch Changes

- 1291e89: Add resizable-panel to playground-ui and use in agent and workflow sidebars
- 0850b4c: Watch and resume per run
- 5baf1ec: animate new traces
- 9116d70: Handle the different workflow methods in workflow graph
- 0709d99: add prop for dynamic empty text
- 9ba1e97: fix loading state for evals page

----------------------------------------

TITLE: Running the Example
DESCRIPTION: Command to start the multi-agent example.

LANGUAGE: bash
CODE:
pnpm start

----------------------------------------

TITLE: Configuring Environment Variables
DESCRIPTION: Example of how to set up the .env file with OpenAI API key and Chroma database path.

LANGUAGE: env
CODE:
OPENAI_API_KEY=sk-your-api-key-here
CHROMA_DB_PATH=path/to/your/chroma/db

----------------------------------------

TITLE: Configuring Environment Variables
DESCRIPTION: Example of how to set up the OpenAI API key and Postgres connection string in the .env file.

LANGUAGE: env
CODE:
OPENAI_API_KEY=sk-your-api-key-here
POSTGRES_CONNECTION_STRING=your-postgres-connection-string-here

----------------------------------------

TITLE: Installing Dependencies
DESCRIPTION: Command to install project dependencies using pnpm.

LANGUAGE: bash
CODE:
pnpm install

----------------------------------------

TITLE: Configuring Environment Variables
DESCRIPTION: Environment variable configuration template including API keys for crawling, AI processing, and optional database URL.

LANGUAGE: env
CODE:
# Required for API crawling\nFIRECRAWL_API_KEY=your_firecrawl_api_key\nGITHUB_API_KEY=your_github_token\n\n# Required for AI processing (at least one)\nANTHROPIC_API_KEY=your_anthropic_key\nOPENAI_API_KEY=your_openai_key\n\n# Optional: Database URL if using one\nDB_URL=your_database_url

----------------------------------------

TITLE: Index Stats Interface Definition in TypeScript
DESCRIPTION: Defines the interface for index statistics returned by the describeIndex method.

LANGUAGE: typescript
CODE:
interface IndexStats {
  dimension: number;
  count: number;
  metric: "cosine" | "euclidean" | "dotproduct";
}

----------------------------------------

TITLE: Copying Environment Variables File
DESCRIPTION: Command to create a copy of the example environment variables file.

LANGUAGE: bash
CODE:
cp .env.example .env

----------------------------------------

TITLE: Creating Vector Query Tool for PGVector
DESCRIPTION: Sets up a vector query tool with filtering capabilities for querying the PGVector database.

LANGUAGE: typescript
CODE:
const vectorQueryTool = createVectorQueryTool({
  id: 'vectorQueryTool',
  vectorStoreName: "pgVector",
  indexName: "embeddings",
  model: openai.embedding('text-embedding-3-small'),
  enableFilter: true,
});

----------------------------------------

TITLE: Implementing Recipe Completeness Judge Class
DESCRIPTION: Implementation of a judge class that evaluates recipe gluten content using LLM and provides detailed explanations

LANGUAGE: typescript
CODE:
import { type LanguageModel } from '@mastra/core/llm';
import { MastraAgentJudge } from '@mastra/evals/judge';
import { z } from 'zod';
import { GLUTEN_INSTRUCTIONS, generateGlutenPrompt, generateReasonPrompt } from './prompts';

export class RecipeCompletenessJudge extends MastraAgentJudge {
  constructor(model: LanguageModel) {
    super('Gluten Checker', GLUTEN_INSTRUCTIONS, model);
  }

  async evaluate(output: string): Promise<{
    isGlutenFree: boolean;
    glutenSources: string[];
  }> {
    const glutenPrompt = generateGlutenPrompt({ output });
    const result = await this.agent.generate(glutenPrompt, {
      output: z.object({
        isGlutenFree: z.boolean(),
        glutenSources: z.array(z.string()),
      }),
    });

    return result.object;
  }

  async getReason(args: { isGlutenFree: boolean; glutenSources: string[] }): Promise<string> {
    const prompt = generateReasonPrompt(args);
    const result = await this.agent.generate(prompt, {
      output: z.object({
        reason: z.string(),
      }),
    });

    return result.object.reason;
  }
}

----------------------------------------

TITLE: Installing Dependencies with pnpm
DESCRIPTION: This command uses pnpm to install the project dependencies as defined in the package.json file.

LANGUAGE: bash
CODE:
pnpm install

----------------------------------------

TITLE: Initializing Mastra Project with npm
DESCRIPTION: Command to create a new Mastra project using npm's create command.

LANGUAGE: bash
CODE:
npm create mastra@latest

----------------------------------------

TITLE: Updating initialization of Google Voice in TypeScript
DESCRIPTION: Example of how to update the initialization code for Google Voice. This change demonstrates the difference in structure between the old GoogleTTS and the new GoogleVoice classes, including changes in parameter names and structure.

LANGUAGE: typescript
CODE:
// Old
const tts = new GoogleTTS({
  model: {
    name: 'en-US-Standard-C',
    apiKey: 'your-api-key',
  },
});

// New
const voice = new GoogleVoice({
  speechModel: {
    apiKey: 'your-api-key',
  },
  speaker: 'en-US-Standard-C',
});

----------------------------------------

TITLE: OpenAI API Configuration
DESCRIPTION: Environment variable configuration for OpenAI API key authentication.

LANGUAGE: env
CODE:
OPENAI_API_KEY=sk-your-api-key-here

----------------------------------------

TITLE: OpenAI API Configuration
DESCRIPTION: Environment variable configuration for OpenAI API key.

LANGUAGE: env
CODE:
OPENAI_API_KEY=sk-your-api-key-here

----------------------------------------

TITLE: Cloning Mastra Repository and Navigating to Example Directory
DESCRIPTION: This snippet shows how to clone the Mastra repository from GitHub and navigate to the specific example directory for text chunking.

LANGUAGE: bash
CODE:
git clone https://github.com/mastra-ai/mastra
cd examples/basics/rag/chunk-text

----------------------------------------

TITLE: Installing Mastra Core Package
DESCRIPTION: Command to install the @mastra/core package which includes the default vector store.

LANGUAGE: bash
CODE:
npm install @mastra/core

----------------------------------------

TITLE: Running the Tone Consistency Example
DESCRIPTION: Command to start and run the tone consistency example using pnpm.

LANGUAGE: bash
CODE:
pnpm start

----------------------------------------

TITLE: Importing Dependencies for RAG System
DESCRIPTION: Imports necessary packages and modules for implementing the RAG system with Mastra.

LANGUAGE: typescript
CODE:
import { openai } from "@ai-sdk/openai";
import { Mastra } from "@mastra/core";
import { Agent } from "@mastra/core/agent";
import { PgVector } from "@mastra/pg";
import { createVectorQueryTool, MDocument } from "@mastra/rag";
import { embedMany } from "ai";

----------------------------------------

TITLE: Processing Documents into Chunks with Metadata
DESCRIPTION: Creates a document, chunks it, and extracts metadata including keywords for each chunk.

LANGUAGE: typescript
CODE:
const doc = MDocument.fromText(
  `The Impact of Climate Change on Global Agriculture...`
);

const chunks = await doc.chunk({
  strategy: 'recursive',
  size: 512,
  overlap: 50,
  separator: '\n',
  extract: {
    keywords: true,  // Extracts keywords from each chunk
  },
});

----------------------------------------

TITLE: Importing Dependencies for RAG System
DESCRIPTION: Import statements for required libraries including Mastra core, OpenAI, PgVector, and RAG-specific tools.

LANGUAGE: typescript
CODE:
import { openai } from '@ai-sdk/openai';
import { Mastra } from "@mastra/core";
import { Agent } from "@mastra/core/agent";
import { PgVector } from "@mastra/pg";
import {
  MDocument,
  createVectorQueryTool,
  createDocumentChunkerTool,
} from "@mastra/rag";
import { embedMany } from "ai";

----------------------------------------

TITLE: Installing Dependencies - Package Management
DESCRIPTION: Command to install project dependencies using pnpm package manager.

LANGUAGE: bash
CODE:
pnpm install

----------------------------------------

TITLE: Cloning and Navigating to Mastra Project Directory
DESCRIPTION: Commands to clone the Mastra repository and navigate to the keyword coverage example directory. This is the first step in setting up the project locally.

LANGUAGE: bash
CODE:
git clone https://github.com/mastra-ai/mastra
cd examples/basics/evals/keyword-coverage

----------------------------------------

TITLE: Creating Text Embeddings
DESCRIPTION: Demonstrates how to generate vector embeddings from text using supported AI providers.

LANGUAGE: typescript
CODE:
import { openai } from '@ai-sdk/openai';
import { embed } from 'ai';

const embeddings = await embed({
  model: openai.embedding('text-embedding-3-small'),
  value: 'text to embed',
});

----------------------------------------

TITLE: Migrating PlayAI Voice Configuration and Usage
DESCRIPTION: Diff demonstrating how to update the code from using PlayAITTS to PlayAIVoice, including initialization, fetching voices, and generating speech.

LANGUAGE: typescript
CODE:
- const tts = new PlayAITTS({
-   model: {
-     name: 'PlayDialog',
-     voice: 'angelo',
-   }
- });
+ const voice = new PlayAIVoice({
+   speechModel: {
+     name: 'PlayDialog',
+   },
+   speaker: 's3://voice-cloning-zero-shot/baf1ef41-36b6-428c-9bdf-50ba54682bd8/original/manifest.json'
+ });

- const voices = await tts.voices();
+ const speakers = await voice.getSpeakers();

- const { audioResult } = await tts.generate({ text: 'Hello' });
+ const stream = await voice.speak('Hello');

----------------------------------------

TITLE: Environment Setup
DESCRIPTION: Command for creating environment configuration file from template.

LANGUAGE: bash
CODE:
cp .env.example .env

----------------------------------------

TITLE: Cloning Mastra Repository
DESCRIPTION: Commands to clone the Mastra repository and navigate to the workflow example directory.

LANGUAGE: bash
CODE:
git clone https://github.com/mastra-ai/mastra
cd examples/basics/workflows/workflow-with-branching-paths

----------------------------------------

TITLE: Environment File Setup
DESCRIPTION: Command to copy the example environment file to create a new .env configuration.

LANGUAGE: bash
CODE:
cp .env.example .env

----------------------------------------

TITLE: Installing Mastra Project
DESCRIPTION: Commands for cloning the Mastra repository and navigating to the textual difference example directory.

LANGUAGE: bash
CODE:
git clone https://github.com/mastra-ai/mastra
cd examples/basics/evals/textual-difference

----------------------------------------

TITLE: Running the Example - Bash
DESCRIPTION: Command to start the parallel workflow example application.

LANGUAGE: bash
CODE:
pnpm start

----------------------------------------

TITLE: Version History in Markdown
DESCRIPTION: Markdown changelog showing version progression from alpha releases to stable 0.0.1, capturing @mastra/core dependency updates across versions.

LANGUAGE: markdown
CODE:
# system-prompt

## 0.0.1

## 0.0.1-alpha.2

### Patch Changes

- Updated dependencies [e9d1b47]
  - @mastra/core@0.2.0-alpha.85

## 0.0.1-alpha.1

### Patch Changes

- Updated dependencies [2f17a5f]
- Updated dependencies [cb290ee]
- Updated dependencies [b4d7416]
- Updated dependencies [38b7f66]
  - @mastra/core@0.2.0-alpha.84

## 0.0.1-alpha.0

### Patch Changes

- Updated dependencies [30322ce]
- Updated dependencies [78eec7c]
- Updated dependencies [9625602]
- Updated dependencies [8769a62]
  - @mastra/core@0.2.0-alpha.83

----------------------------------------

TITLE: Installing Mastra Repository
DESCRIPTION: Commands for cloning the Mastra repository and navigating to the context precision example directory.

LANGUAGE: bash
CODE:
git clone https://github.com/mastra-ai/mastra
cd examples/basics/evals/context-precision

----------------------------------------

TITLE: Instantiating PgVector and Mastra
DESCRIPTION: Creates instances of PgVector and Mastra with the configured components.

LANGUAGE: typescript
CODE:
const pgVector = new PgVector(process.env.POSTGRES_CONNECTION_STRING!);

export const mastra = new Mastra({
  agents: { ragAgent },
  vectors: { pgVector },
});

const agent = mastra.getAgent('ragAgent');

----------------------------------------

TITLE: Copying Environment Variables File
DESCRIPTION: Command to create a copy of the example environment variables file.

LANGUAGE: bash
CODE:
cp .env.example .env

----------------------------------------

TITLE: Running the Example Application
DESCRIPTION: Command to start the context relevancy example application.

LANGUAGE: bash
CODE:
pnpm start

----------------------------------------

TITLE: Auto-generated package.json for Mastra Deployment
DESCRIPTION: Example of the package.json file automatically managed by the deployer in the .mastra directory. It includes dependencies required for Mastra deployment.

LANGUAGE: json
CODE:
{
  "name": "server",
  "version": "1.0.0",
  "type": "module",
  "dependencies": {
    "@mastra/loggers": "latest",
    "hono": "4.6.17",
    "@hono/node-server": "^1.13.7",
    "superjson": "^2.2.2",
    "zod-to-json-schema": "^3.24.1"
  }
}

----------------------------------------

TITLE: Using PostgresStore for General Storage Operations in TypeScript
DESCRIPTION: Shows how to use PostgresStore class for general storage operations including saving threads, saving messages, and querying threads and messages.

LANGUAGE: typescript
CODE:
import { PostgresStore } from '@mastra/pg';

const store = new PostgresStore({
  host: 'localhost',
  port: 5432,
  database: 'mastra',
  user: 'postgres',
  password: 'postgres',
});

// Create a thread
await store.saveThread({
  id: 'thread-123',
  resourceId: 'resource-456',
  title: 'My Thread',
  metadata: { key: 'value' },
});

// Add messages to thread
await store.saveMessages([
  {
    id: 'msg-789',
    threadId: 'thread-123',
    role: 'user',
    type: 'text',
    content: [{ type: 'text', text: 'Hello' }],
  },
]);

// Query threads and messages
const savedThread = await store.getThread('thread-123');
const messages = await store.getMessages('thread-123');

----------------------------------------

TITLE: Cloning Repository and Navigating to Project Directory
DESCRIPTION: Commands to clone the Mastra repository and navigate to the specific example directory for embedding text chunks.

LANGUAGE: bash
CODE:
git clone https://github.com/mastra-ai/mastra
cd examples/basics/rag/embed-text-chunk

----------------------------------------

TITLE: Installing Node Dependencies
DESCRIPTION: Command for installing project dependencies using pnpm

LANGUAGE: bash
CODE:
pnpm install

----------------------------------------

TITLE: Running the Example
DESCRIPTION: Command to execute the text embedding example

LANGUAGE: bash
CODE:
pnpm start

----------------------------------------

TITLE: Changelog Entry in Markdown
DESCRIPTION: Records version updates and changes for voice-agent package and its dependencies including @mastra/core, mastra, voice-elevenlabs, voice-openai, and voice-playai packages.

LANGUAGE: markdown
CODE:
# voice-agent

## 1.0.1-alpha.0

### Patch Changes

- ca4aedd: Add documentation and examples for voice api
- Updated dependencies [06aa827]
- Updated dependencies [b24970d]
- Updated dependencies [7a0866e]
  - @mastra/core@0.4.3-alpha.0
  - mastra@0.2.7-alpha.0
  - @mastra/voice-elevenlabs@0.1.1-alpha.0
  - @mastra/voice-openai@0.1.2-alpha.0
  - @mastra/voice-playai@0.1.1-alpha.0

----------------------------------------

TITLE: Cloning and Navigating to Project Directory
DESCRIPTION: Commands to clone the Mastra repository and navigate to the content similarity example directory.

LANGUAGE: bash
CODE:
git clone https://github.com/mastra-ai/mastra
cd examples/basics/evals/content-similarity

----------------------------------------

TITLE: Installing Mastra Upstash Package
DESCRIPTION: Command to install the Mastra Upstash package using npm package manager

LANGUAGE: bash
CODE:
npm install @mastra/upstash

----------------------------------------

TITLE: Cloning and Setting Up Mastra Project
DESCRIPTION: Commands for cloning the Mastra repository and navigating to the bias evaluation example directory.

LANGUAGE: bash
CODE:
git clone https://github.com/mastra-ai/mastra
cd examples/basics/evals/bias

----------------------------------------

TITLE: Query Result Interface in TypeScript
DESCRIPTION: TypeScript interface defining the structure of query results returned by the LibSQLVector store.

LANGUAGE: typescript
CODE:
interface QueryResult {
  id: string;
  score: number;
  metadata: Record<string, any>;
  vector?: number[]; // Only included if includeVector is true
}

----------------------------------------

TITLE: Evaluating mixed bias response for age-related stereotypes
DESCRIPTION: Shows evaluation of a response with subtle age-related biases in workplace performance context.

LANGUAGE: typescript
CODE:
const query2 = 'How do different age groups perform at work?';
const response2 =
  'Younger workers tend to be more innovative and quick to adapt, though they can be somewhat unreliable and job-hop frequently. Older employees are generally more stable and experienced, but sometimes struggle to keep up with rapid changes in technology. Middle-aged workers often provide the best balance of skills and reliability.';

console.log('Example 2 - Mixed Bias:');
console.log('Query:', query2);
console.log('Response:', response2);

const result2 = await metric.measure(query2, response2);
console.log('Metric Result:', {
  score: result2.score,
  reason: result2.info.reason,
});
// Example Output:
// Metric Result: { score: 0.7, reason: 'The response contains subtle age-related stereotypes and assumptions about work performance.' }

----------------------------------------

TITLE: Running the Metadata Extraction Example
DESCRIPTION: Command to start the metadata extraction example application.

LANGUAGE: bash
CODE:
pnpm start

----------------------------------------

TITLE: Installing @mastra/qdrant Package
DESCRIPTION: Command to install the @mastra/qdrant package using pnpm package manager.

LANGUAGE: bash
CODE:
pnpm add @mastra/qdrant

----------------------------------------

TITLE: Installing Mastra Upstash Package
DESCRIPTION: Command to install the @mastra/upstash package via npm

LANGUAGE: bash
CODE:
npm install @mastra/upstash

----------------------------------------

TITLE: Cloning Repository and Navigating to Project Directory
DESCRIPTION: Commands to clone the Mastra repository and navigate to the specific example directory for adjusting chunk size.

LANGUAGE: bash
CODE:
git clone https://github.com/mastra-ai/mastra
cd examples/basics/rag/chunk-text

----------------------------------------

TITLE: Installing Dependencies
DESCRIPTION: Command to install project dependencies using pnpm package manager.

LANGUAGE: bash
CODE:
pnpm install

----------------------------------------

TITLE: Running the Example Script
DESCRIPTION: Command to execute the example script for inserting embeddings into Chroma.

LANGUAGE: bash
CODE:
pnpm start

----------------------------------------

TITLE: Running the Mastra Chunk Size Adjustment Example
DESCRIPTION: Command to start and run the Mastra example for adjusting chunk size.

LANGUAGE: bash
CODE:
pnpm start

----------------------------------------

TITLE: Loading REB2B Analytics Library
DESCRIPTION: This script loads the REB2B analytics library, setting up methods for identification and data collection. It creates and inserts a script tag to load the REB2B library from an Amazon S3 bucket.

LANGUAGE: JavaScript
CODE:
!function () {
  var reb2b = window.reb2b = window.reb2b || [];
  if (reb2b.invoked) return;
  reb2b.invoked = true;
  reb2b.methods = ["identify", "collect"];
  reb2b.factory = function (method) {
    return function () {
      var args = Array.prototype.slice.call(arguments);
      args.unshift(method); reb2b.push(args);
      return reb2b;
    };
  };
  for (var i = 0; i < reb2b.methods.length; i++) {
    var key = reb2b.methods[i];
    reb2b[key] = reb2b.factory(key);
  }
  reb2b.load = function (key) {
    var script = document.createElement("script");
    script.type = "text/javascript";
    script.async = true;
    script.src = "https://s3-us-west-2.amazonaws.com/b2bjsstore/b/" + key + "/reb2b.js.gz";
    var first = document.getElementsByTagName("script")[0];
    first.parentNode.insertBefore(script, first);
  };
  reb2b.SNIPPET_VERSION = "1.0.1";
  reb2b.load("4N210HEJYQ6Z");
}();

----------------------------------------

TITLE: Running the Application
DESCRIPTION: Command to start the multi-agent workflow application.

LANGUAGE: bash
CODE:
pnpm start

----------------------------------------

TITLE: Installing Mastra Repository - Bash Commands
DESCRIPTION: Commands for cloning the Mastra repository and navigating to the answer relevancy example directory.

LANGUAGE: bash
CODE:
git clone https://github.com/mastra-ai/mastra
cd examples/basics/evals/answer-relevancy

----------------------------------------

TITLE: OpenAI API Key Configuration
DESCRIPTION: Environment variable configuration for OpenAI API authentication.

LANGUAGE: env
CODE:
OPENAI_API_KEY=sk-your-api-key-here

----------------------------------------

TITLE: Starting the Application
DESCRIPTION: Command to run the example workflow application.

LANGUAGE: bash
CODE:
pnpm start

----------------------------------------

TITLE: Copying Environment Variables File
DESCRIPTION: This command creates a copy of the example environment variables file, which will be used to store the OpenAI API key and Postgres connection string.

LANGUAGE: bash
CODE:
cp .env.example .env

----------------------------------------

TITLE: Getting Available Speakers
DESCRIPTION: Code example showing how to retrieve the list of available text-to-speech speakers

LANGUAGE: typescript
CODE:
const speakers = await voice.getSpeakers();

----------------------------------------

TITLE: Installing @mastra/voice-deepgram package with npm
DESCRIPTION: Command to install the @mastra/voice-deepgram package using npm. This is a prerequisite step for using the Deepgram voice integration in a Mastra project.

LANGUAGE: bash
CODE:
npm install @mastra/voice-deepgram

----------------------------------------

TITLE: Versioning Documentation in Markdown
DESCRIPTION: Changelog documenting version history from 0.0.1-alpha.0 through 0.0.1, tracking patch changes and dependency updates with @mastra/core.

LANGUAGE: markdown
CODE:
# tool-as-workflow-step

## 0.0.1

## 0.0.1-alpha.2

### Patch Changes

- Updated dependencies [e9d1b47]
  - @mastra/core@0.2.0-alpha.85

## 0.0.1-alpha.1

### Patch Changes

- Updated dependencies [2f17a5f]
- Updated dependencies [cb290ee]
- Updated dependencies [b4d7416]
- Updated dependencies [38b7f66]
  - @mastra/core@0.2.0-alpha.84

## 0.0.1-alpha.0

### Patch Changes

- Updated dependencies [30322ce]
- Updated dependencies [78eec7c]
- Updated dependencies [9625602]
- Updated dependencies [8769a62]
  - @mastra/core@0.2.0-alpha.83

----------------------------------------

TITLE: Running the Mastra HTML Chunking Example
DESCRIPTION: Command to start and execute the Mastra HTML chunking example after installation.

LANGUAGE: bash
CODE:
pnpm start

----------------------------------------

TITLE: Cloning Repository and Navigating to Project Directory
DESCRIPTION: These commands clone the Mastra repository from GitHub and navigate to the specific example directory for the RAG filtering project.

LANGUAGE: bash
CODE:
git clone https://github.com/mastra-ai/mastra
cd examples/basics/rag/filter-rag

----------------------------------------

TITLE: Installing Dependencies
DESCRIPTION: Command to install project dependencies using pnpm package manager.

LANGUAGE: bash
CODE:
pnpm install

----------------------------------------

TITLE: Cloning Mastra Repository
DESCRIPTION: Commands to clone the Mastra repository and navigate to the tool example directory

LANGUAGE: bash
CODE:
git clone https://github.com/mastra-ai/mastra
cd examples/basics/agents/using-a-tool

----------------------------------------

TITLE: Getting Specific Workflow Instance
DESCRIPTION: Retrieves an instance of a specific workflow using its ID.

LANGUAGE: typescript
CODE:
const workflow = client.getWorkflow("workflow-id");

----------------------------------------

TITLE: Cloning Mastra Repository and Navigating to Example Directory
DESCRIPTION: Commands to clone the Mastra repository and navigate to the faithfulness example directory.

LANGUAGE: bash
CODE:
git clone https://github.com/mastra-ai/mastra
cd examples/basics/evals/faithfulness

----------------------------------------

TITLE: Evaluating complete hallucination scenario with Mastra in TypeScript
DESCRIPTION: This snippet demonstrates how to evaluate a response that completely contradicts the given context. It sets up a new context about the Wright brothers' first flight and measures the hallucination score for an entirely incorrect response.

LANGUAGE: typescript
CODE:
const context3 = [
  'The Wright brothers made their first flight in 1903.',
  'The flight lasted 12 seconds.',
  'It covered a distance of 120 feet.',
];

const metric3 = new HallucinationMetric(openai('gpt-4o-mini'), {
  context: context3,
});

const query3 = 'When did the Wright brothers first fly?';
const response3 = 'The Wright brothers achieved their historic first flight in 1908. The flight lasted about 2 minutes and covered nearly a mile.';

console.log('Example 3 - Complete Hallucination:');
console.log('Context:', context3);
console.log('Query:', query3);
console.log('Response:', response3);

const result3 = await metric3.measure(query3, response3);
console.log('Metric Result:', {
  score: result3.score,
  reason: result3.info.reason,
});
// Example Output:
// Metric Result: { score: 1, reason: 'The response completely contradicts the context.' }

----------------------------------------

TITLE: Running the Example
DESCRIPTION: Command to start the example application.

LANGUAGE: bash
CODE:
pnpm start

----------------------------------------

TITLE: Running the Hybrid Vector Search Example
DESCRIPTION: Command to start and run the hybrid vector search example using pnpm.

LANGUAGE: bash
CODE:
pnpm start

----------------------------------------

TITLE: Using MurfVoice TTS Integration - TypeScript
DESCRIPTION: Comprehensive example showing MurfVoice initialization, configuration options, speaker listing, and text-to-speech conversion with both direct text and streams. Includes error handling for unsupported features.

LANGUAGE: typescript
CODE:
import { MurfVoice } from '@mastra/voice-murf';
// Or generate speech from a text stream
import { Readable } from 'stream';

// Initialize with configuration
const voice = new MurfVoice({
  speechModel: {
    name: 'GEN2', // Optional, defaults to 'GEN2'
    apiKey: 'your-api-key', // Optional, can use MURF_API_KEY env var
  },
  speaker: 'en-US-natalie', // Optional, defaults to first available voice
});

// Or use with defaults (using env vars)
const defaultVoice = new MurfVoice();

// List available speakers
const speakers = await voice.getSpeakers();

// Generate speech from text
const stream = await voice.speak('Hello from Mastra!');

const textStream = Readable.from(['Hello', ' from', ' stream', ' input!']);
const audioStream = await voice.speak(textStream);

// Speech recognition is not supported
try {
  await voice.listen(audioStream);
} catch (error) {
  console.error(error); // "Murf does not support speech recognition"
}

----------------------------------------

TITLE: Package Migration Details in Markdown
DESCRIPTION: Documents the migration from @mastra/speech-elevenlabs to @mastra/voice-elevenlabs, including API changes and renamed methods.

LANGUAGE: markdown
CODE:
### Changes from @mastra/speech-elevenlabs

- Package renamed from @mastra/speech-elevenlabs to @mastra/voice-elevenlabs
- API changes:
  - `ElevenLabsTTS` class renamed to `ElevenLabsVoice`
  - `generate()` method renamed to `speak()`
  - `voices()` method renamed to `getSpeakers()`
  - Constructor configuration simplified
- All core functionality remains the same
- Import paths should be updated from '@mastra/speech-elevenlabs' to '@mastra/voice-elevenlabs'

----------------------------------------

TITLE: Cloning Mastra Repository
DESCRIPTION: Commands to clone the Mastra repository and navigate to the example project directory.

LANGUAGE: bash
CODE:
git clone https://github.com/mastra-ai/mastra
cd examples/basics/rag/cot-rag

----------------------------------------

TITLE: Configuring OpenAI API Key
DESCRIPTION: Example of how to set the OpenAI API key in the .env file. Users need to replace the placeholder with their actual API key.

LANGUAGE: env
CODE:
OPENAI_API_KEY=sk-your-api-key-here

----------------------------------------

TITLE: Running the Example
DESCRIPTION: Command to start and run the example project that demonstrates calling an agent from a workflow.

LANGUAGE: bash
CODE:
pnpm start

----------------------------------------

TITLE: Environment Setup
DESCRIPTION: Command to create environment file from template.

LANGUAGE: bash
CODE:
cp .env.example .env

----------------------------------------

TITLE: Updating Code for New Mastra Voice API
DESCRIPTION: Diff demonstrating how to modify existing code to use the new MurfVoice API, including changes to initialization, voice listing, and speech generation.

LANGUAGE: diff
CODE:
- const tts = new MurfTTS({
-   model: {
-     name: 'GEN2',
-     voice: 'en-US-natalie',
-   }
- });
+ const voice = new MurfVoice({
+   speechModel: {
+     name: 'GEN2',
+   },
+   speaker: 'en-US-natalie'
+ });

- const voices = await tts.voices();
+ const speakers = await voice.getSpeakers();

- const { audioResult } = await tts.generate({ text: 'Hello' });
+ const stream = await voice.speak('Hello');

----------------------------------------

TITLE: API Key Configuration
DESCRIPTION: Environment variable configuration for Anthropic and OpenAI API keys.

LANGUAGE: env
CODE:
ANTHROPIC_API_KEY=sk-your-api-key-here
OPENAI_API_KEY=sk-your-api-key-here

----------------------------------------

TITLE: Cloning Repository and Navigating to Project Directory in Bash
DESCRIPTION: These commands clone the mastra repository from GitHub and navigate to the specific example directory for the system prompt agent.

LANGUAGE: bash
CODE:
git clone https://github.com/mastra-ai/mastra
cd examples/basics/agents/system-prompt

----------------------------------------

TITLE: Running the Summarization Example with pnpm in Bash
DESCRIPTION: Command to start the summarization example using pnpm.

LANGUAGE: bash
CODE:
pnpm start

----------------------------------------

TITLE: Creating MDocument from HTML in TypeScript
DESCRIPTION: Static method to create an MDocument instance from HTML content.

LANGUAGE: typescript
CODE:
static fromHTML(html: string, metadata?: Record<string, any>): MDocument

----------------------------------------

TITLE: Running the Embedding Example
DESCRIPTION: Command to start and run the text chunk embedding example using pnpm.

LANGUAGE: bash
CODE:
pnpm start

----------------------------------------

TITLE: Updating Imports for @mastra/voice-openai in TypeScript
DESCRIPTION: Example of how to update import statements from the old package to the new one in TypeScript code.

LANGUAGE: typescript
CODE:
// Old
import { OpenAITTS } from '@mastra/speech-openai';
// New
import { OpenAIVoice } from '@mastra/voice-openai';

----------------------------------------

TITLE: Installing Murf Voice Package - NPM
DESCRIPTION: Command to install the @mastra/voice-murf package using npm package manager.

LANGUAGE: bash
CODE:
npm install @mastra/voice-murf

----------------------------------------

TITLE: Running the Bird Checker Example
DESCRIPTION: Command to start the Bird Checker example using pnpm.

LANGUAGE: bash
CODE:
pnpm start

----------------------------------------

TITLE: Installing Dependencies
DESCRIPTION: Command to install project dependencies using pnpm.

LANGUAGE: bash
CODE:
pnpm install

----------------------------------------

TITLE: Installing Sarvam Voice Package
DESCRIPTION: Command to install the @mastra/voice-sarvam package using npm

LANGUAGE: bash
CODE:
npm install @mastra/voice-sarvam

----------------------------------------

TITLE: Installing Dependencies with pnpm in Bash
DESCRIPTION: This command installs the project dependencies using pnpm, which is the recommended package manager for this project.

LANGUAGE: bash
CODE:
pnpm install

----------------------------------------

TITLE: Environment File Setup
DESCRIPTION: Command to create environment configuration file from template.

LANGUAGE: bash
CODE:
cp .env.example .env

----------------------------------------

TITLE: Implementing Stock Price Tool in TypeScript
DESCRIPTION: Creates a tool that fetches the last day's closing stock price for a given symbol using the Mastra core library and Zod for input validation.

LANGUAGE: typescript
CODE:
import { createTool } from "@mastra/core/tools";
import { z } from "zod";

const getStockPrice = async (symbol: string) => {
  const data = await fetch(
    `https://mastra-stock-data.vercel.app/api/stock-data?symbol=${symbol}`,
  ).then((r) => r.json());
  return data.prices["4. close"];
};

export const stockPrices = createTool({
  id: "Get Stock Price",
  inputSchema: z.object({
    symbol: z.string(),
  }),
  description: `Fetches the last day's closing stock price for a given symbol`,
  execute: async ({ context: { symbol } }) => {
    console.log("Using tool to fetch stock price for", symbol);
    return {
      symbol,
      currentPrice: await getStockPrice(symbol),
    };
  },
});

----------------------------------------

TITLE: Cloning Repository and Navigating to Project Directory
DESCRIPTION: These commands clone the Mastra repository and navigate to the specific example directory for the RAG project.

LANGUAGE: bash
CODE:
git clone https://github.com/mastra-ai/mastra
cd examples/basics/rag/basic-rag

----------------------------------------

TITLE: Installing Mastra Core Package
DESCRIPTION: Command to install the @mastra/core package using npm package manager.

LANGUAGE: bash
CODE:
npm install @mastra/core

----------------------------------------

TITLE: Watching and Resuming Suspended Mastra Workflows
DESCRIPTION: This example shows how to use the watch method to monitor workflow status and automatically resume suspended steps. It demonstrates creating a run, setting up a watch callback, and starting the workflow execution.

LANGUAGE: typescript
CODE:
import { mastra } from "./index";

const myWorkflow = mastra.getWorkflow('myWorkflow');
const { start, watch, resume } = myWorkflow.createRun();

watch(async ({ context, activePaths }) => {
  for (const _path of activePaths) {
    const stepTwoStatus = context.steps?.stepTwo?.status;
    if (stepTwoStatus === 'suspended') {
      console.log("Workflow suspended, resuming with new value");

      await resume({
        stepId: 'stepTwo',
        context: { secondValue: 100 },
      });
    }
  }
})

await start({ triggerData: { inputValue: 45 } });

----------------------------------------

TITLE: Cloning Repository and Project Setup
DESCRIPTION: Commands for cloning the Mastra repository and navigating to the example project directory.

LANGUAGE: bash
CODE:
git clone https://github.com/mastra-ai/mastra
cd examples/basics/rag/insert-embedding-in-libsql

----------------------------------------

TITLE: Markdown Changelog Documentation
DESCRIPTION: Detailed version history showing dependency updates and patch changes across multiple alpha releases of the Mastra memory module and related packages.

LANGUAGE: markdown
CODE:
# memory

## 0.0.1

## 0.0.1-alpha.2

### Patch Changes

- Updated dependencies [e9d1b47]
  - @mastra/memory@0.1.0-alpha.67
  - @mastra/core@0.2.0-alpha.85
  - @mastra/vector-libsql@0.0.1-alpha.20

----------------------------------------

TITLE: Configuring Murf API Key - Environment Variable
DESCRIPTION: Required environment variable setup for Murf API authentication.

LANGUAGE: bash
CODE:
MURF_API_KEY=your_api_key

----------------------------------------

TITLE: Running the Example
DESCRIPTION: Command to execute the example application.

LANGUAGE: bash
CODE:
pnpm start

----------------------------------------

TITLE: Installing Voice Deepgram Package in NPM
DESCRIPTION: Commands to uninstall the deprecated package and install the new voice package using npm.

LANGUAGE: bash
CODE:
npm uninstall @mastra/speech-deepgram
npm install @mastra/voice-deepgram

----------------------------------------

TITLE: Cloning Repository and Navigating to Project Directory in Bash
DESCRIPTION: Commands to clone the mastra repository and navigate to the bird-checker example directory.

LANGUAGE: bash
CODE:
git clone https://github.com/mastra-ai/mastra
cd examples/basics/agents/bird-checker

----------------------------------------

TITLE: Environment Variables Configuration
DESCRIPTION: Configuration template for OpenAI API key and Postgres connection string in the .env file

LANGUAGE: env
CODE:
OPENAI_API_KEY=sk-your-api-key-here
POSTGRES_CONNECTION_STRING=your-postgres-connection-string-here

----------------------------------------

TITLE: Environment Variables Configuration
DESCRIPTION: Required environment variables for Unsplash image access, Anthropic AI processing, and Braintrust evaluation.

LANGUAGE: env
CODE:
# Required for getting image
NEXT_PUBLIC_UNSPLASH_ACCESS_KEY=your_unsplash_access_key

# Required for AI processing
ANTHROPIC_API_KEY=your_anthropic_key

# Required for evalutating the llm prompt
BRAINTRUST_API_KEY=your_braintrust_key

----------------------------------------

TITLE: Copying Environment Configuration
DESCRIPTION: Command to create environment configuration file from template

LANGUAGE: bash
CODE:
cp .env.example .env

----------------------------------------

TITLE: Setting GitHub Environment Variables
DESCRIPTION: Example of setting the required GitHub Personal Access Token environment variable.

LANGUAGE: bash
CODE:
GITHUB_PAT=your_personal_access_token

----------------------------------------

TITLE: Environment Variables Configuration
DESCRIPTION: Configuration of OpenAI API key and Postgres connection string in environment file.

LANGUAGE: env
CODE:
OPENAI_API_KEY=sk-your-api-key-here
POSTGRES_CONNECTION_STRING=your-postgres-connection-string-here

----------------------------------------

TITLE: Managing Multiple MCP Servers
DESCRIPTION: Implementation of MCPConfiguration class for managing multiple server connections and their tools, including examples of both stdio and SSE-based servers

LANGUAGE: typescript
CODE:
import { MCPConfiguration } from '@mastra/mcp';

const mcp = new MCPConfiguration({
  servers: {
    // Stdio-based server
    stockPrice: {
      command: 'npx',
      args: ['tsx', 'stock-price.ts'],
      env: {
        API_KEY: 'your-api-key',
      },
    },
    // SSE-based server
    weather: {
      url: new URL('http://localhost:8080/sse'),
    },
  },
});

// Get all tools from all configured servers namespaced with the server name
const tools = await mcp.getTools();

// Get tools grouped into a toolset object per-server
const toolsets = await mcp.getToolsets();

----------------------------------------

TITLE: Running the Mastra Sequential Workflow Example
DESCRIPTION: Command to start and execute the sequential workflow example in the Mastra framework.

LANGUAGE: bash
CODE:
pnpm start

----------------------------------------

TITLE: Setting OpenAI API Key Environment Variable
DESCRIPTION: Example of setting the OpenAI API key as an environment variable for use with the package.

LANGUAGE: bash
CODE:
OPENAI_API_KEY=your_api_key

----------------------------------------

TITLE: Environment File Setup
DESCRIPTION: Command to create environment configuration file from template.

LANGUAGE: bash
CODE:
cp .env.example .env

----------------------------------------

TITLE: Installing Dependencies with pnpm
DESCRIPTION: Command to install the necessary dependencies for the example using pnpm package manager.

LANGUAGE: bash
CODE:
pnpm install

----------------------------------------

TITLE: Initializing REB2B Analytics Script
DESCRIPTION: This script initializes the REB2B analytics library, setting up methods for identification and data collection. It asynchronously loads the REB2B script from an Amazon S3 bucket.

LANGUAGE: JavaScript
CODE:
window.reb2b = window.reb2b || [];
if (!window.reb2b.invoked) {
  window.reb2b.invoked = true;
  window.reb2b.methods = ["identify", "collect"];
  window.reb2b.factory = function(method) {
    return function() {
      var args = Array.prototype.slice.call(arguments);
      args.unshift(method);
      window.reb2b.push(args);
      return window.reb2b;
    };
  };
  window.reb2b.methods.forEach(function(key) {
    window.reb2b[key] = window.reb2b.factory(key);
  });
  window.reb2b.SNIPPET_VERSION = "1.0.1";

  const script = document.createElement("script");
  script.async = true;
  script.src = "https://s3-us-west-2.amazonaws.com/b2bjsstore/b/E63P0H7150OW/E63P0H7150OW.js.gz";
  document.head.appendChild(script);
}

----------------------------------------

TITLE: Running the Example - TypeScript Execution
DESCRIPTION: Command to execute the TypeScript example using pnpm and tsx.

LANGUAGE: bash
CODE:
pnpm tsx index.ts

----------------------------------------

TITLE: Documenting Parameters with PropertiesTable
DESCRIPTION: Shows how to use the PropertiesTable component to document function parameters and their properties.

LANGUAGE: mdx
CODE:
## Parameters

<PropertiesTable
  content={[
    {
      name: "data",
      type: "string",
      description: "The input data to be transformed.",
      isOptional: false,
    },
    {
      name: "options",
      type: "object",
      description: "Additional options that modify the behavior of MyFunction.",
      isOptional: true,
      defaultValue: "{}",
    },
  ]}
/>

----------------------------------------

TITLE: High Position Adherence Evaluation
DESCRIPTION: Demonstrates evaluation of a response that follows sequential steps perfectly, using context about Paris as the capital of France.

LANGUAGE: typescript
CODE:
const context1 = [
  'The capital of France is Paris.',
  'Paris has been the capital since 508 CE.',
  'Paris serves as France\'s political center.',
  'The capital city hosts the French government.',
];

const metric1 = new ContextPositionMetric(openai('gpt-4o-mini'), {
  context: context1,
});

const query1 = 'What is the capital of France?';
const response1 = 'The capital of France is Paris.';

console.log('Example 1 - High Position Adherence:');
console.log('Context:', context1);
console.log('Query:', query1);
console.log('Response:', response1);

const result1 = await metric1.measure(query1, response1);
console.log('Metric Result:', {
  score: result1.score,
  reason: result1.info.reason,
});

----------------------------------------

TITLE: Markdown Changelog Entries
DESCRIPTION: A series of version entries documenting changes and dependency updates for the embed-text-chunk package, with particular focus on @mastra/rag dependency version changes.

LANGUAGE: markdown
CODE:
# embed-text-chunk

## 0.0.1

## 0.0.1-alpha.3

### Patch Changes

- @mastra/rag@0.0.2-alpha.77

## 0.0.1-alpha.2

### Patch Changes

- Updated dependencies [f646a8b]
  - @mastra/rag@0.0.2-alpha.76

## 0.0.1-alpha.1

### Patch Changes

- @mastra/rag@0.0.2-alpha.75

## 0.0.1-alpha.0

### Patch Changes

- Updated dependencies [9625602]
  - @mastra/rag@0.0.2-alpha.74

----------------------------------------

TITLE: Configuring Semantic Search in Memory
DESCRIPTION: This snippet demonstrates how to configure semantic search options in the memory system, including the number of relevant messages to retrieve and the context range.

LANGUAGE: typescript
CODE:
const memory = new Memory({
  options: {
    semanticRecall: {
      topK: 10, // Include 10 most relevant past messages
      messageRange: 2, // Messages before and after each result
    },
  },
});

// Example: User asks about a past feature discussion
await agent.stream("What did we decide about the search feature last week?", {
  memoryOptions: {
    lastMessages: 10,
    semanticRecall: {
      topK: 3,
      messageRange: 2,
    },
  },
});

----------------------------------------

TITLE: Version Update Entry
DESCRIPTION: A changelog entry for a version update showing version number, changes, and dependency updates

LANGUAGE: markdown
CODE:
## 0.1.10

### Patch Changes

- Updated dependencies [cc7f392]
- Updated dependencies [fc2f89c]
- Updated dependencies [dfbb131]
- Updated dependencies [f4854ee]
- Updated dependencies [afaf73f]
- Updated dependencies [0850b4c]
- Updated dependencies [7bcfaee]
- Updated dependencies [da8d9bb]
- Updated dependencies [44631b1]
- Updated dependencies [9116d70]
- Updated dependencies [6e559a0]
- Updated dependencies [5f43505]
- Updated dependencies [61ad5a4]
  - @mastra/deployer@0.2.1
  - @mastra/core@0.6.1

----------------------------------------

TITLE: Configuring Netlify Deployer in Mastra Application
DESCRIPTION: TypeScript code snippet demonstrating how to set up and use the NetlifyDeployer within a Mastra application. It shows the import statements and configuration options for the deployer.

LANGUAGE: typescript
CODE:
import { Mastra } from '@mastra/core';
import { NetlifyDeployer } from '@mastra/deployer-netlify';

const deployer = new NetlifyDeployer({
  scope: 'your-team-id',
  projectName: 'your-project-name',
  token: 'your-netlify-token',
});

const mastra = new Mastra({
  deployer,
  // ... other Mastra configuration options
});

----------------------------------------

TITLE: Configuring Environment Variables
DESCRIPTION: Required environment variables for PlayAI integration including API key and user ID

LANGUAGE: bash
CODE:
PLAYAI_API_KEY=your_api_key
PLAYAI_USER_ID=your_user_id

----------------------------------------

TITLE: Installing Project Dependencies
DESCRIPTION: Command to install required project dependencies using pnpm package manager.

LANGUAGE: bash
CODE:
pnpm install

----------------------------------------

TITLE: Markdown Changelog Entry for Version 0.1.0
DESCRIPTION: Documents the stable release 0.1.0 changes including the addition of Sarvam voice provider and multiple core dependency updates.

LANGUAGE: markdown
CODE:
## 0.1.0

### Patch Changes

- 1187213: feat: add saravam as a voice provider
- Updated dependencies [fc2f89c]
- Updated dependencies [dfbb131]
- Updated dependencies [f4854ee]
- Updated dependencies [afaf73f]
- Updated dependencies [0850b4c]
- Updated dependencies [7bcfaee]
- Updated dependencies [44631b1]
- Updated dependencies [9116d70]
- Updated dependencies [6e559a0]
- Updated dependencies [5f43505]
  - @mastra/core@0.6.1

----------------------------------------

TITLE: Cloning and Setting Up Bird Checker Repository
DESCRIPTION: Commands to clone the repository and install project dependencies using pnpm.

LANGUAGE: bash
CODE:
git clone <repository-url>
cd bird-checker-with-nextjs-and-eval

----------------------------------------

TITLE: Configuring Environment Variables
DESCRIPTION: Required environment variables for Unsplash image fetching and AI processing functionality.

LANGUAGE: env
CODE:
# Required for getting image
NEXT_PUBLIC_UNSPLASH_ACCESS_KEY=your_unsplash_access_key

# Required for AI processing
ANTHROPIC_API_KEY=your_anthropic_key

----------------------------------------

TITLE: Documenting Package Migration Changes
DESCRIPTION: Documents the key changes and API updates when migrating from @mastra/speech-speechify to @mastra/voice-speechify, including class renames and method consolidation.

LANGUAGE: markdown
CODE:
### Changes from @mastra/speech-speechify

- Package renamed from @mastra/speech-speechify to @mastra/voice-speechify
- API changes:
  - `SpeechifyTTS` class renamed to `SpeechifyVoice`
  - `generate()` and `stream()` methods combined into `speak()`
  - `voices()` method renamed to `getSpeakers()`
  - Constructor configuration simplified
  - Added support for text stream input
- All core functionality remains the same
- Import paths should be updated from '@mastra/speech-speechify' to '@mastra/voice-speechify'

----------------------------------------

TITLE: Environment Setup - Bash Command
DESCRIPTION: Command to create environment configuration file from template.

LANGUAGE: bash
CODE:
cp .env.example .env

----------------------------------------

TITLE: Implementing TypeScript Function Example
DESCRIPTION: Demonstrates how to write a basic usage example showing function import and implementation.

LANGUAGE: typescript
CODE:
import { MyFunction } from "@mastra/core";

const result = MyFunction({
  data: "some data",
  options: {
    verbose: true,
  },
});

----------------------------------------

TITLE: Environment Variables Setup
DESCRIPTION: Required environment variables for OpenAI API key and LibSQL database configuration.

LANGUAGE: env
CODE:
OPENAI_API_KEY=sk-your-api-key-here
DATABASE_URL=libsql://your-database-url
DATABASE_AUTH_TOKEN=your-database-auth-token (optional)

----------------------------------------

TITLE: Adding New Integration Object in TypeScript
DESCRIPTION: This snippet demonstrates how to add a new integration object to the 'sources' array in the integration-generator/source.ts file. It includes the required properties and structure for defining a new integration.

LANGUAGE: typescript
CODE:
{
  name: 'myIntegration',
  logoDomain: 'myintegration.com',
  authType: 'API_KEY',
  openapiSpec: 'https://myintegration.com/openapi.yaml',
  serverUrl: 'https://api.myintegration.com',
  apiKeys: ['API_KEY'],
  authorization: {
    type: 'Bearer',
    tokenKey: 'API_KEY',
  },
  categories: ['myCategory'],
  description: 'An optional but helpful description.',
}

----------------------------------------

TITLE: Default Netlify Configuration File (netlify.toml)
DESCRIPTION: TOML configuration for Netlify, automatically created by the deployer. It specifies the functions directory, node bundler, and redirect rules for the Netlify deployment.

LANGUAGE: toml
CODE:
[functions]
node_bundler = "esbuild"
directory = "/netlify/functions"

[[redirects]]
force = true
from = "/*"
status = 200
to = "/.netlify/functions/api/:splat"

----------------------------------------

TITLE: Configuring Upstash Environment Variables
DESCRIPTION: Shows the required environment variables setup for Upstash Redis connection credentials.

LANGUAGE: bash
CODE:
UPSTASH_REDIS_REST_URL=your-redis-url
UPSTASH_REDIS_REST_TOKEN=your-redis-token

----------------------------------------

TITLE: Installing Mastra Voice-Speechify Package
DESCRIPTION: Instructions for installing the @mastra/voice-speechify package using npm

LANGUAGE: bash
CODE:
npm install @mastra/voice-speechify

----------------------------------------

TITLE: Copying Environment Variables File
DESCRIPTION: Command to copy the example environment variables file to create a local .env file.

LANGUAGE: bash
CODE:
cp .env.example .env

----------------------------------------

TITLE: Starting Development Server
DESCRIPTION: Command to start the Next.js development server locally.

LANGUAGE: bash
CODE:
pnpm dev

----------------------------------------

TITLE: Cloning Repository and Navigation
DESCRIPTION: Commands to clone the Mastra repository and navigate to the retrieve-results example directory.

LANGUAGE: bash
CODE:
git clone https://github.com/mastra-ai/mastra
cd examples/basics/rag/retrieve-results

----------------------------------------

TITLE: Installing Project Dependencies
DESCRIPTION: Command for installing project dependencies using pnpm package manager.

LANGUAGE: bash
CODE:
pnpm install

----------------------------------------

TITLE: Starting Next.js Development Server
DESCRIPTION: Commands to start the Next.js development server using various package managers including npm, yarn, pnpm, and bun. The server will run on localhost:3000 with hot-reload enabled.

LANGUAGE: bash
CODE:
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev

----------------------------------------

TITLE: Initializing Mastra Instance in TypeScript
DESCRIPTION: Sets up the main Mastra instance with the stock agent, preparing it for use in the application.

LANGUAGE: typescript
CODE:
import { Mastra } from "@mastra/core";

import { stockAgent } from "./agents/stockAgent";

export const mastra = new Mastra({
  agents: { stockAgent },
});

----------------------------------------

TITLE: Configuring Environment Variables
DESCRIPTION: Example of how to set up the environment variables file with OpenAI API key and PostgreSQL connection string.

LANGUAGE: env
CODE:
OPENAI_API_KEY=sk-your-api-key-here
POSTGRES_CONNECTION_STRING=postgresql://your-username:your-password@your-host:your-port/your-database

----------------------------------------

TITLE: Setting Custom Chunk Size in Mastra RAG with TypeScript
DESCRIPTION: This code snippet shows how to create a document from text and split it into chunks with a custom size using Mastra RAG. It imports the MDocument class, creates a document from plain text, and then chunks it with a specified size of 512 characters.

LANGUAGE: tsx
CODE:
import { MDocument } from "@mastra/rag";

const doc = MDocument.fromText("Your plain text content...");

const chunks = await doc.chunk({
  size: 512,
});

----------------------------------------

TITLE: Entering Alpha Release Mode with Changeset in Bash
DESCRIPTION: This command prepares the project for an alpha release using the changeset tool. It should be run before creating a changeset for alpha releases.

LANGUAGE: bash
CODE:
pnpm changeset pre enter alpha

----------------------------------------

TITLE: Installing @mastra/voice-openai Package with npm
DESCRIPTION: Command to install the @mastra/voice-openai package using npm. This is the first step to integrate OpenAI voice capabilities into a Mastra project.

LANGUAGE: bash
CODE:
npm install @mastra/voice-openai

----------------------------------------

TITLE: Setting up environment variables for OpenAI API
DESCRIPTION: This snippet shows how to set up the necessary environment variable for the OpenAI API key.

LANGUAGE: bash
CODE:
OPENAI_API_KEY=your_api_key_here

----------------------------------------

TITLE: Cloning Mastra Repository
DESCRIPTION: Commands to clone the Mastra repository and navigate to the markdown chunking example directory

LANGUAGE: bash
CODE:
git clone https://github.com/mastra-ai/mastra
cd examples/basics/rag/chunk-markdown

----------------------------------------

TITLE: Updating Imports for PlayAI Voice Integration
DESCRIPTION: Diff showing how to update imports from the old package to the new package.

LANGUAGE: typescript
CODE:
- import { PlayAITTS } from '@mastra/speech-playai'
+ import { PlayAIVoice } from '@mastra/voice-playai'

----------------------------------------

TITLE: Cloning Repository and Navigating to Project Directory in Bash
DESCRIPTION: Commands to clone the Mastra repository and navigate to the summarization example directory.

LANGUAGE: bash
CODE:
git clone https://github.com/mastra-ai/mastra
cd examples/basics/evals/summarization

----------------------------------------

TITLE: Installing Dependencies with pnpm
DESCRIPTION: Command to install project dependencies using pnpm package manager.

LANGUAGE: bash
CODE:
pnpm install

----------------------------------------

TITLE: Creating a Changeset in Bash
DESCRIPTION: This command creates a new changeset, which is used to document changes for release. It should be run after making changes and before opening a pull request.

LANGUAGE: bash
CODE:
pnpm changeset

----------------------------------------

TITLE: Running the Workflow Example
DESCRIPTION: Command to execute the workflow example application

LANGUAGE: bash
CODE:
pnpm start

----------------------------------------

TITLE: Installing Dependencies
DESCRIPTION: Command to install project dependencies using pnpm

LANGUAGE: bash
CODE:
pnpm install

----------------------------------------

TITLE: Creating Copywriter Agent Configuration
DESCRIPTION: Initialize a copywriter agent using the Anthropic Claude model with specific instructions for blog post generation.

LANGUAGE: typescript
CODE:
const copywriterAgent = new Agent({
  name: "Copywriter",
  instructions: "You are a copywriter agent that writes blog post copy.",
  model: anthropic("claude-3-5-sonnet-20241022"),
});

----------------------------------------

TITLE: Installing Dependencies with pnpm
DESCRIPTION: Command to install the necessary dependencies for the Mastra chunk size adjustment example using pnpm.

LANGUAGE: bash
CODE:
pnpm install

----------------------------------------

TITLE: Running the Example with pnpm in Bash
DESCRIPTION: Command to start and run the Context Position metric example using pnpm.

LANGUAGE: bash
CODE:
pnpm start

----------------------------------------

TITLE: Implementing Braintrust in Mastra Configuration
DESCRIPTION: TypeScript code showing how to configure Mastra instance with telemetry settings for Braintrust integration using OTLP export.

LANGUAGE: typescript
CODE:
import { Mastra } from "@mastra/core";

export const mastra = new Mastra({
  // ... other config
  telemetry: {
    serviceName: "your-service-name",
    enabled: true,
    export: {
      type: "otlp",
    },
  },
});

----------------------------------------

TITLE: Markdown Changelog Documentation
DESCRIPTION: Tracks version history from 0.0.1-alpha.0 through 0.0.1, documenting patch changes and dependency updates to @mastra/core package across multiple alpha releases.

LANGUAGE: markdown
CODE:
# workflow-with-sequential-steps

## 0.0.1

## 0.0.1-alpha.2

### Patch Changes

- Updated dependencies [e9d1b47]
  - @mastra/core@0.2.0-alpha.85

## 0.0.1-alpha.1

### Patch Changes

- Updated dependencies [2f17a5f]
- Updated dependencies [cb290ee]
- Updated dependencies [b4d7416]
- Updated dependencies [38b7f66]
  - @mastra/core@0.2.0-alpha.84

## 0.0.1-alpha.0

### Patch Changes

- Updated dependencies [30322ce]
- Updated dependencies [78eec7c]
- Updated dependencies [9625602]
- Updated dependencies [8769a62]
  - @mastra/core@0.2.0-alpha.83

----------------------------------------

TITLE: Configuring Mastra with Environment Variables for Telemetry (TypeScript)
DESCRIPTION: Demonstrates how to configure Mastra to use telemetry settings from environment variables. This approach allows for flexible configuration across different environments.

LANGUAGE: typescript
CODE:
export const mastra = new Mastra({
  // ... other config
  telemetry: {
    serviceName: "my-app",
    enabled: true,
    export: {
      type: "otlp",
      // endpoint and headers will be picked up from env vars
    },
  },
});

----------------------------------------

TITLE: Cloning Repository and Navigating to Project Directory
DESCRIPTION: Commands to clone the Mastra repository and navigate to the tone consistency example directory.

LANGUAGE: bash
CODE:
git clone https://github.com/mastra-ai/mastra
cd examples/basics/evals/tone-consistency

----------------------------------------

TITLE: Configuring Editor Agent
DESCRIPTION: Initializes an AI agent for editing using the OpenAI GPT-4 model. Sets up the agent with editing-specific instructions and configuration.

LANGUAGE: typescript
CODE:
const editorAgent = new Agent({
  name: "Editor",
  instructions: "You are an editor agent that edits blog post copy.",
  model: openai("gpt-4o-mini"),
});

----------------------------------------

TITLE: Changelog Entry in Markdown
DESCRIPTION: A changelog entry written in markdown format documenting version changes and dependency updates for the weather-agent package. The file tracks changes from version 1.0.1-alpha.8 through 0.0.1.

LANGUAGE: markdown
CODE:
# weather-agent\n\n## 0.0.1\n\n## 0.0.1-alpha.2\n\n### Patch Changes\n\n- Updated dependencies [e9d1b47]\n  - @mastra/core@0.2.0-alpha.85

----------------------------------------

TITLE: Running the Application
DESCRIPTION: Command to start the example application.

LANGUAGE: bash
CODE:
pnpm start

----------------------------------------

TITLE: Updating Deepgram Import Statements in TypeScript
DESCRIPTION: Example showing how to update import statements from the old speech package to the new voice package.

LANGUAGE: typescript
CODE:
// Old
import { DeepgramTTS } from '@mastra/speech-deepgram';
// New
import { DeepgramVoice } from '@mastra/voice-deepgram';

----------------------------------------

TITLE: Copying Environment Variables File in Bash
DESCRIPTION: Command to create a copy of the example environment variables file for local configuration.

LANGUAGE: bash
CODE:
cp .env.example .env

----------------------------------------

TITLE: SpeechifyVoice Configuration Interface
DESCRIPTION: TypeScript interface definition and example for configuring the SpeechifyVoice constructor

LANGUAGE: typescript
CODE:
interface SpeechifyConfig {
  name?: string; // Optional Speechify model name (default: 'simba-english')
  apiKey?: string; // Optional API key (can also use env var)
}

new SpeechifyVoice({
  speechModel?: SpeechifyConfig,
  speaker?: string // Optional default speaker ID
})

----------------------------------------

TITLE: Installing Project Dependencies
DESCRIPTION: Commands for cloning the repository and installing required dependencies using pnpm

LANGUAGE: bash
CODE:
git clone <repository-url>\ncd bird-checker-with-express

LANGUAGE: bash
CODE:
pnpm install

----------------------------------------

TITLE: Initializing Agent with Memory in TypeScript
DESCRIPTION: This snippet demonstrates how to create an Agent instance with memory configuration, including thread and resource IDs for context management.

LANGUAGE: typescript
CODE:
import { Agent } from "@mastra/core/agent";
import { openai } from "@ai-sdk/openai";

const agent = new Agent({
  name: "Project Manager",
  instructions:
    "You are a project manager. You are responsible for managing the project and the team.",
  model: openai("gpt-4o-mini"),
});

await agent.stream("When will the project be completed?", {
  threadId: "project_123",
  resourceId: "user_123",
});

----------------------------------------

TITLE: Installing MCP Client Package
DESCRIPTION: NPM installation command for the @mastra/mcp package

LANGUAGE: bash
CODE:
npm install @mastra/mcp

----------------------------------------

TITLE: Configuring Copywriter Agent
DESCRIPTION: Initializes an AI agent for copywriting using the Anthropic Claude model. Configures the agent with a name and instructions for generating blog post content.

LANGUAGE: typescript
CODE:
const copywriterAgent = new Agent({
  name: "Copywriter",
  instructions: "You are a copywriter agent that writes blog post copy.",
  model: anthropic("claude-3-5-sonnet-20241022"),
});

----------------------------------------

TITLE: Installing @mastra/voice-openai Package with npm
DESCRIPTION: Commands to uninstall the deprecated package and install the new one using npm.

LANGUAGE: bash
CODE:
npm uninstall @mastra/speech-openai
npm install @mastra/voice-openai

----------------------------------------

TITLE: Cloning Repository and Navigating to Project Directory in Bash
DESCRIPTION: Commands to clone the Mastra repository and navigate to the specific example directory for the Context Position metric.

LANGUAGE: bash
CODE:
git clone https://github.com/mastra-ai/mastra
cd examples/basics/evals/context-position

----------------------------------------

TITLE: Installing Mastra Google Voice Package
DESCRIPTION: Command to install the @mastra/voice-google package using npm package manager.

LANGUAGE: bash
CODE:
npm install @mastra/voice-google

----------------------------------------

TITLE: Code of Conduct Content in Markdown
DESCRIPTION: The complete Code of Conduct document written in Markdown format, including sections for pledge, standards, enforcement, and attribution.

LANGUAGE: markdown
CODE:
# MastraAI Code of Conduct

tl;dr: Be excellent to each other!

## Our Pledge

We as members, contributors, and leaders pledge to make participation in our
community a harassment-free experience for everyone, regardless of age, body
size, visible or invisible disability, ethnicity, sex characteristics, gender
identity and expression, level of experience, education, socio-economic status,
nationality, personal appearance, race, religion, or sexual identity
and orientation.

We pledge to act and interact in ways that contribute to an open, welcoming,
diverse, inclusive, and healthy community.

----------------------------------------

TITLE: Copying Environment Variables Template
DESCRIPTION: Command to create a local environment variables file from the example template.

LANGUAGE: bash
CODE:
cp .env.example .env.local

----------------------------------------

TITLE: Resuming a Suspended Workflow Step in TypeScript
DESCRIPTION: Demonstrates how to use the run.resume() method to continue execution of a suspended workflow step, optionally providing new context data.

LANGUAGE: typescript
CODE:
await run.resume({
  runId: "abc-123",
  stepId: "stepTwo",
  context: {
    secondValue: 100
  }
});

----------------------------------------

TITLE: Evaluating non-applicable instructions with Prompt Alignment metric
DESCRIPTION: This snippet demonstrates how to evaluate a response where the given instructions don't apply to the query using the Prompt Alignment metric.

LANGUAGE: typescript
CODE:
const instructions3 = [
  'Show account balance',
  'List recent transactions',
  'Display payment history'
];

const metric3 = new PromptAlignmentMetric(openai('gpt-4o-mini'), {
  instructions: instructions3,
});

const query3 = 'What is the weather like?';
const response3 = 'It is sunny and warm outside.';

console.log('Example 3 - N/A Instructions:');
console.log('Instructions:', instructions3);
console.log('Query:', query3);
console.log('Response:', response3);

const result3 = await metric3.measure(query3, response3);
console.log('Metric Result:', {
  score: result3.score,
  reason: result3.info.reason,
  details: result3.info.scoreDetails,
});
// Example Output:
// Metric Result: { score: 0, reason: 'No instructions are followed or are applicable to the query.' }

----------------------------------------

TITLE: Documenting Options Properties
DESCRIPTION: Demonstrates how to document nested properties within an options object using PropertiesTable.

LANGUAGE: mdx
CODE:
### options

<PropertiesTable
  content={[
    {
      name: "verbose",
      type: "boolean",
      description: "Enables detailed logging when 'true'.",
      isOptional: true,
      defaultValue: "false",
    },
  ]}
/>

----------------------------------------

TITLE: Changelog Entries in Markdown
DESCRIPTION: Version history entries showing patch changes and dependency updates for the insert-embedding-in-pinecone package and its dependencies.

LANGUAGE: markdown
CODE:
# insert-embedding-in-pinecone

## 0.0.1

## 0.0.1-alpha.4

### Patch Changes

- @mastra/rag@0.0.2-alpha.77
- @mastra/vector-pinecone@0.0.1-alpha.20

## 0.0.1-alpha.3

### Patch Changes

- Updated dependencies [f646a8b]
  - @mastra/rag@0.0.2-alpha.76

## 0.0.1-alpha.2

### Patch Changes

- @mastra/rag@0.0.2-alpha.75
- @mastra/vector-pinecone@0.0.1-alpha.19

## 0.0.1-alpha.1

### Patch Changes

- Updated dependencies [cf4c02c]
  - @mastra/vector-pinecone@0.0.1-alpha.18

## 0.0.1-alpha.0

### Patch Changes

- Updated dependencies [78eec7c]
- Updated dependencies [9625602]
  - @mastra/vector-pinecone@0.0.1-alpha.17
  - @mastra/rag@0.0.2-alpha.74

----------------------------------------

TITLE: Configuring OpenAI API Key for assistant-ui
DESCRIPTION: Add the OpenAI API key to the .env.local file for authentication.

LANGUAGE: plaintext
CODE:
OPENAI_API_KEY=sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

----------------------------------------

TITLE: Installing Dependencies with pnpm
DESCRIPTION: Command to install the required dependencies using pnpm package manager.

LANGUAGE: bash
CODE:
pnpm install

----------------------------------------

TITLE: ElevenLabsVoice Constructor in TypeScript
DESCRIPTION: This snippet shows the constructor signature for the ElevenLabsVoice class, including optional configuration for the speech model and default speaker.

LANGUAGE: typescript
CODE:
new ElevenLabsVoice({
  speechModel?: {
    name?: ElevenLabsModel, // Default: 'eleven_multilingual_v2'
    apiKey?: string,        // Optional, can use ELEVENLABS_API_KEY env var
  },
  speaker?: string         // Default speaker ID
})

----------------------------------------

TITLE: Starting Development Server
DESCRIPTION: Command to start the Next.js development server locally.

LANGUAGE: bash
CODE:
pnpm dev

----------------------------------------

TITLE: Running the Example
DESCRIPTION: Command to execute the textual difference metric example.

LANGUAGE: bash
CODE:
pnpm start

----------------------------------------

TITLE: Mapping Entire Objects in Mastra Workflow Variables
DESCRIPTION: Demonstrates how to map an entire object by using '.' as the path in Mastra workflow variable mapping.

LANGUAGE: typescript
CODE:
workflow
  .step(step1, {
    variables: {
      // Map the entire trigger data object
      triggerData: { step: 'trigger', path: '.' }
    }
  })
  .commit();

----------------------------------------

TITLE: Changelog Entry Format - Markdown
DESCRIPTION: Standard format for documenting version changes and dependency updates in the changelog

LANGUAGE: markdown
CODE:
## 0.0.1-alpha.3

### Patch Changes

- Updated dependencies [e9d1b47]
  - @mastra/core@0.2.0-alpha.85
  - @mastra/composio@0.0.1-alpha.51
  - @mastra/firecrawl@1.0.4-alpha.79

----------------------------------------

TITLE: Updating Mastra CLI Dependencies
DESCRIPTION: Updates the dependencies for the Mastra CLI package, including @mastra/core and @mastra/deployer.

LANGUAGE: markdown
CODE:
- Updated dependencies [cc7f392]
- Updated dependencies [fc2f89c]
- Updated dependencies [dfbb131]
- Updated dependencies [f4854ee]
- Updated dependencies [afaf73f]
- Updated dependencies [0850b4c]
- Updated dependencies [7bcfaee]
- Updated dependencies [da8d9bb]
- Updated dependencies [44631b1]
- Updated dependencies [9116d70]
- Updated dependencies [6e559a0]
- Updated dependencies [5f43505]
- Updated dependencies [61ad5a4]
  - @mastra/deployer@0.2.1
  - @mastra/core@0.6.1

----------------------------------------

TITLE: Installing Dependencies
DESCRIPTION: Command to install project dependencies using pnpm

LANGUAGE: bash
CODE:
pnpm install

----------------------------------------

TITLE: Installing @mastra/turbopuffer Package with pnpm
DESCRIPTION: Command to install the @mastra/turbopuffer package using pnpm package manager.

LANGUAGE: bash
CODE:
pnpm add @mastra/turbopuffer

----------------------------------------

TITLE: Adding Mastra to Existing Project
DESCRIPTION: Use the Mastra CLI to add Mastra to an existing project. This command initializes Mastra in the current directory, creating necessary files and updating configurations.

LANGUAGE: bash
CODE:
mastra init

----------------------------------------

TITLE: Setting Configuration Keys for Dane AI Assistant
DESCRIPTION: Command to set the ANTHROPIC_API_KEY configuration for Dane. This is a one-time setup process required before using the assistant.

LANGUAGE: bash
CODE:
dane config --set ANTHROPIC_API_KEY=<your-key>

----------------------------------------

TITLE: Running the Toxicity Metric Example
DESCRIPTION: Command to start the Toxicity metric example using pnpm.

LANGUAGE: bash
CODE:
pnpm start

----------------------------------------

TITLE: Installing Project Dependencies
DESCRIPTION: Command for installing required project dependencies using pnpm package manager.

LANGUAGE: bash
CODE:
pnpm install

----------------------------------------

TITLE: Using while() in Mastra Workflows
DESCRIPTION: Basic usage of the `.while()` method in a Mastra workflow, demonstrating how to create a loop that repeats a step based on a condition.

LANGUAGE: typescript
CODE:
workflow
  .step(incrementStep)
  .while(condition, incrementStep)
  .then(finalStep);

----------------------------------------

TITLE: Changelog Entry Markdown
DESCRIPTION: Markdown formatted changelog entries tracking version updates and dependency changes for the Mastra memory package and its dependencies.

LANGUAGE: markdown
CODE:
# memory

## 1.0.1

## 1.0.1-alpha.47

### Patch Changes

- Updated dependencies [e9d1b47]
  - @mastra/memory@0.1.0-alpha.67
  - @mastra/core@0.2.0-alpha.85
  - @mastra/store-upstash@0.0.0-alpha.3
  - @mastra/vector-pg@0.0.1-alpha.19

----------------------------------------

TITLE: Setting Environment Variables
DESCRIPTION: Example of setting up the Cohere API key in the environment file

LANGUAGE: env
CODE:
COHERE_API_KEY=sk-your-api-key-here

----------------------------------------

TITLE: Initializing and Using ReplicateTTS in TypeScript
DESCRIPTION: Example of how to import, initialize, and use the ReplicateTTS class. It demonstrates initialization with a configuration object, listing available voices, generating speech, and streaming audio output.

LANGUAGE: typescript
CODE:
import { ReplicateTTS } from '@mastra/speech-replicate';

// Initialize with configuration
const tts = new ReplicateTTS({
  model: {
    name: 'default', // Default model
    apiToken: 'your-api-token', // Optional, can use REPLICATE_API_TOKEN env var
  },
});

// List available models
const voices = await tts.voices();

// Generate speech
const result = await tts.generate({
  voice: 'model-id',
  text: 'Hello from Mastra!',
});

// Stream speech
const stream = await tts.stream({
  voice: 'model-id',
  text: 'Hello from Mastra!',
});

----------------------------------------

TITLE: Installing Project Dependencies
DESCRIPTION: Command to install project dependencies using pnpm package manager.

LANGUAGE: bash
CODE:
pnpm install

----------------------------------------

TITLE: Managing Messages in Mastra Storage
DESCRIPTION: Shows how to save and retrieve messages associated with threads. Includes example of message structure with role, content, and timestamp handling.

LANGUAGE: typescript
CODE:
// Save messages
await storage.saveMessages({
  messages: [
    {
      id: 'msg-1',
      threadId: thread.id,
      role: 'user',
      content: [{ type: 'text', text: 'Hello' }],
      createdAt: new Date(),
    },
  ],
});

// Get thread messages
const messages = await storage.getMessages({
  threadId: thread.id,
});

----------------------------------------

TITLE: Error Handling for Workflow Then Method in TypeScript
DESCRIPTION: Shows how to handle validation errors when using the .then() method, specifically for circular dependency detection.

LANGUAGE: typescript
CODE:
try {
  workflow
    .step(stepA)
    .then(stepB)
    .then(stepA) // Will throw error - circular dependency
    .commit();
} catch (error) {
  if (error instanceof ValidationError) {
    console.log(error.type); // 'circular_dependency'
    console.log(error.details);
  }
}

----------------------------------------

TITLE: Markdown Changelog Entry
DESCRIPTION: Changelog entries showing version updates and dependency changes for the Mastra memory package

LANGUAGE: markdown
CODE:
# memory

## 1.0.1

## 1.0.1-alpha.65

### Patch Changes

- Updated dependencies [e9d1b47]
  - @mastra/memory@0.1.0-alpha.67
  - @mastra/core@0.2.0-alpha.85
  - @mastra/store-pg@0.0.0-alpha.3
  - @mastra/vector-pg@0.0.1-alpha.19

----------------------------------------

TITLE: Installing Dependencies
DESCRIPTION: Command to install project dependencies using pnpm.

LANGUAGE: bash
CODE:
pnpm install

----------------------------------------

TITLE: Using PlayAI TTS in TypeScript
DESCRIPTION: Example of initializing PlayAITTS, listing available voices, generating speech, and streaming speech using the deprecated package.

LANGUAGE: typescript
CODE:
import { PlayAITTS } from '@mastra/speech-playai';

// Initialize with configuration
const tts = new PlayAITTS({
  model: {
    name: 'en-US-1', // Default voice
    apiKey: 'your-api-key', // Optional, can use PLAYAI_API_KEY env var
  },
});

// List available voices
const voices = await tts.voices();

// Generate speech
const result = await tts.generate({
  voice: 'en-US-1',
  text: 'Hello from Mastra!',
});

// Stream speech
const stream = await tts.stream({
  voice: 'en-US-1',
  text: 'Hello from Mastra!',
});

----------------------------------------

TITLE: Environment Setup and Key Configuration
DESCRIPTION: Commands for copying the environment file and adding OpenAI API credentials.

LANGUAGE: bash
CODE:
cp .env.example .env

----------------------------------------

TITLE: Markdown Changelog Entry
DESCRIPTION: Changelog entry format showing version numbers, patch changes, and dependency updates for the Mastra quick-start package.

LANGUAGE: markdown
CODE:
# quick-start

## 0.0.1

## 0.0.1-alpha.2

### Patch Changes

- Updated dependencies [e9d1b47]
  - @mastra/core@0.2.0-alpha.85

----------------------------------------

TITLE: Running the Content Similarity Example
DESCRIPTION: Command to start the content similarity example using pnpm.

LANGUAGE: bash
CODE:
pnpm start

----------------------------------------

TITLE: Defining Function Condition in Mastra Workflow Step (TypeScript)
DESCRIPTION: Demonstrates how to use an async function to define a condition for a workflow step. The function checks if the 'auth' step's status is 'authenticated'.

LANGUAGE: typescript
CODE:
workflow.step(processOrder, {
  when: async ({ context }) => {
    const auth = context?.getStepResult<{status: string}>("auth");
    return auth?.status === "authenticated";
  }
});

----------------------------------------

TITLE: Error Handling for Incorrect else() Usage
DESCRIPTION: Shows error handling when attempting to use the .else() method without a preceding if() statement, which will throw an error indicating no active condition was found.

LANGUAGE: typescript
CODE:
try {
  // This will throw an error
  workflow
    .step(someStep)
    .else()
    .then(anotherStep)
    .commit();
} catch (error) {
  console.error(error); // "No active condition found"
}

----------------------------------------

TITLE: Changelog Entry Format
DESCRIPTION: Standard format used for documenting version changes and dependency updates in the package

LANGUAGE: markdown
CODE:
## [version]

### Patch Changes

- [commit] [description]
- Updated dependencies [commit]
  - @mastra/[package]@[version]

----------------------------------------

TITLE: Environment File Setup
DESCRIPTION: Command to create environment configuration file from template.

LANGUAGE: bash
CODE:
cp .env.example .env

----------------------------------------

TITLE: Using Mastra Core with Multiple Transports in TypeScript
DESCRIPTION: Demonstrates how to use multiple transports (FileTransport and UpstashTransport) with the Mastra Core Logger. It shows initialization of transports, creating a logger, logging messages, and querying logs.

LANGUAGE: typescript
CODE:
import { Logger } from '@mastra/core/logger';
import { FileTransport, UpstashTransport } from '@mastra/loggers';

// Create transports
const fileTransport = new FileTransport({
  path: '/var/log/app.log',
});

const upstashTransport = new UpstashTransport({
  upstashUrl: process.env.UPSTASH_URL!,
  upstashToken: process.env.UPSTASH_TOKEN!,
});

// Create logger with multiple transports
const logger = new Logger({
  transports: [fileTransport, upstashTransport],
});

// Log messages
logger.info('Hello world', { metadata: 'value' });

// Query logs
const allLogs = await fileTransport.getLogs();
const runLogs = await upstashTransport.getLogsByRunId({ runId: 'abc-123' });

----------------------------------------

TITLE: Initializing RegistryClient for MCP Server Discovery in TypeScript
DESCRIPTION: Creates a new RegistryClient instance to connect to an MCP registry. This client can access registry information and list available servers.

LANGUAGE: typescript
CODE:
import { RegistryClient } from "@mcp/registry"

const registry = new RegistryClient({
	url: "https://example-tools.com/.well-known/mcp.json",
})

----------------------------------------

TITLE: Example Usage with Analysis of ContextPositionMetric in TypeScript
DESCRIPTION: This snippet provides a more detailed example of using the ContextPositionMetric class, including a sample context, query, and output. It demonstrates how to interpret the results and includes a commented example of the expected output format.

LANGUAGE: typescript
CODE:
import { openai } from "@ai-sdk/openai";
import { ContextPositionMetric } from "@mastra/evals/llm";

// Configure the model for evaluation
const model = openai("gpt-4o-mini");

const metric = new ContextPositionMetric(model, {
  context: [
    "A balanced diet is important for health.",
    "Exercise strengthens the heart and improves blood circulation.",
    "Regular physical activity reduces stress and anxiety.",
    "Exercise equipment can be expensive.",
  ],
});

const result = await metric.measure(
  "What are the benefits of exercise?",
  "Regular exercise improves cardiovascular health and mental wellbeing.",
);

// Example output:
// {
//   score: 0.5,
//   info: {
//     reason: "The score is 0.5 because while the second and third contexts are highly
//           relevant to the benefits of exercise, they are not optimally positioned at
//           the beginning of the sequence. The first and last contexts are not relevant
//           to the query, which impacts the position-weighted scoring."
//   }
// }

----------------------------------------

TITLE: Using commit() in Mastra Workflow
DESCRIPTION: Demonstrates how to use the .commit() method to re-initialize a workflow state machine after configuring steps. The method is called after defining workflow steps in a chain.

LANGUAGE: typescript
CODE:
workflow
  .step(stepA)
  .then(stepB)
  .commit();

----------------------------------------

TITLE: Package Migration Documentation
DESCRIPTION: Details about the migration from @mastra/speech-playai to @mastra/voice-playai, including API changes and preserved features

LANGUAGE: markdown
CODE:
## 0.1.0 (2024-XX-XX)

This package replaces the deprecated @mastra/speech-playai package. All functionality has been migrated to this new package with a more consistent naming scheme.

### Changes from @mastra/speech-playai

- Package renamed from @mastra/speech-playai to @mastra/voice-playai
- API changes:
  - `PlayAITTS` class renamed to `PlayAIVoice`
  - `generate()` and `stream()` methods combined into `speak()`
  - `voices()` method renamed to `getSpeakers()`
  - Constructor configuration simplified
  - Added support for text stream input
  - Default speaker configuration added
- All core functionality remains the same
- Import paths should be updated from '@mastra/speech-playai' to '@mastra/voice-playai'

----------------------------------------

TITLE: Installing Dependencies with pnpm
DESCRIPTION: Command to install project dependencies using pnpm package manager.

LANGUAGE: bash
CODE:
pnpm install

----------------------------------------

TITLE: Installing Mastra Evals Package
DESCRIPTION: npm command to install the @mastra/evals package

LANGUAGE: bash
CODE:
npm install @mastra/evals

----------------------------------------

TITLE: Defining Pinecone Query Result Interface
DESCRIPTION: TypeScript interface defining the structure of query results from Pinecone, including vector ID, similarity score, metadata, and optional vector values.

LANGUAGE: typescript
CODE:
interface QueryResult {
  id: string;
  score: number;
  metadata: Record<string, any>;
  vector?: number[]; // Only included if includeVector is true
}

----------------------------------------

TITLE: Simplified MCPConfiguration Initialization in TypeScript
DESCRIPTION: Shows a more concise way to initialize MCPConfiguration with a registry endpoint and server configurations. This is how the API might be used in production.

LANGUAGE: typescript
CODE:
const mcp = new MCPConfiguration({
	registry: "https://mcp.run/.well-known/mcp.json",
	servers: {
		...serverConfigs,
	},
})

----------------------------------------

TITLE: Telemetry and Logging Configuration
DESCRIPTION: Example of configuring telemetry and logging capabilities for tracking evaluations.

LANGUAGE: typescript
CODE:
import { attachListeners } from '@mastra/evals';

// Enable basic evaluation tracking
await attachListeners();

// Store evals in Mastra Storage (if storage is enabled)
await attachListeners(mastra);
// Note: When using in-memory storage, evaluations are isolated to the test process.
// When using file storage, evaluations are persisted and can be queried later.

----------------------------------------

TITLE: Running the Bias Metric Example
DESCRIPTION: Command to execute the bias metric evaluation example.

LANGUAGE: bash
CODE:
pnpm start

----------------------------------------

TITLE: Initializing and Using SpeechifyVoice in TypeScript
DESCRIPTION: This snippet demonstrates how to initialize the SpeechifyVoice class with default and custom configurations, and how to use it to convert text to speech.

LANGUAGE: typescript
CODE:
import { SpeechifyVoice } from "@mastra/voice-speechify";

// Initialize with default configuration (uses SPEECHIFY_API_KEY environment variable)
const voice = new SpeechifyVoice();

// Initialize with custom configuration
const voice = new SpeechifyVoice({
  speechModel: {
    name: 'simba-english',
    apiKey: 'your-api-key'
  },
  speaker: 'george'  // Default voice
});

// Convert text to speech
const audioStream = await voice.speak("Hello, world!", {
  speaker: 'henry',  // Override default voice
});

----------------------------------------

TITLE: Installing PlayAI Voice Package
DESCRIPTION: NPM installation command for the @mastra/voice-playai package

LANGUAGE: bash
CODE:
npm install @mastra/voice-playai

----------------------------------------

TITLE: Copying Environment Variables File
DESCRIPTION: Command to create a copy of the example environment variables file for configuration.

LANGUAGE: bash
CODE:
cp .env.example .env

----------------------------------------

TITLE: Memory Configuration Example - TypeScript
DESCRIPTION: Example showing the updated memory configuration pattern using the new embedder-based approach.

LANGUAGE: typescript
CODE:
embedder: new OpenAIEmbedder()

----------------------------------------

TITLE: Implementing Few-Shot Sentiment Analysis in TypeScript
DESCRIPTION: Demonstrates few-shot learning for sentiment analysis using example inputs and outputs. Includes structured output format and confidence scoring.

LANGUAGE: typescript
CODE:
type SentimentVars = {
  text: string;
  language: string;
};

const sentimentPrompt = createPrompt<SentimentVars>('Analyze sentiment', {
  persona: 'Language Analyst',
  outputFormat: 'json',
})
  .text('Analyze the sentiment of this {{language}} text:\n\n{{text}}')
  .examples([
    {
      input: {
        text: 'The product exceeded my expectations, highly recommend!',
        language: 'English',
      },
      output: {
        sentiment: 'positive',
        confidence: 0.95,
        aspects: ['product quality', 'recommendation'],
      },
    },
    {
      input: {
        text: 'Service was okay, but the wait time was too long',
        language: 'English',
      },
      output: {
        sentiment: 'mixed',
        confidence: 0.8,
        aspects: ['service quality', 'wait time'],
      },
    },
  ])
  .constraints([
    'Follow the exact output format from examples',
    'Include confidence score',
    'Identify key aspects mentioned',
  ]);

----------------------------------------

TITLE: Initializing and Starting a Workflow Run with TypeScript
DESCRIPTION: This snippet demonstrates how to use the `.createRun()` method to initialize a new workflow run and start its execution. It shows the basic usage pattern for creating a run, obtaining the run ID, and starting the workflow.

LANGUAGE: typescript
CODE:
const { runId, start, watch } = workflow.createRun();

const result = await start();

----------------------------------------

TITLE: Managing Multiple MCPConfiguration Instances in TypeScript
DESCRIPTION: This example demonstrates how to properly manage multiple MCPConfiguration instances to prevent memory leaks, including using unique IDs and disconnecting before recreating instances.

LANGUAGE: typescript
CODE:
// First instance - OK
const mcp1 = new MCPConfiguration({
  servers: {
    /* ... */
  },
});

// Second instance with same config - Will throw an error
const mcp2 = new MCPConfiguration({
  servers: {
    /* ... */
  },
});

// To fix, either:
// 1. Add unique IDs
const mcp3 = new MCPConfiguration({
  id: "instance-1",
  servers: {
    /* ... */
  },
});

// 2. Or disconnect before recreating
await mcp1.disconnect();
const mcp4 = new MCPConfiguration({
  servers: {
    /* ... */
  },
});

----------------------------------------

TITLE: Installing @mastra/voice-openai-realtime Package
DESCRIPTION: Command to install the @mastra/voice-openai-realtime package using npm.

LANGUAGE: bash
CODE:
npm install @mastra/voice-openai-realtime

----------------------------------------

TITLE: Copying Environment Variables File
DESCRIPTION: Command to create a copy of the example environment variables file for configuration.

LANGUAGE: bash
CODE:
cp .env.example .env

----------------------------------------

TITLE: Installing Dane AI Assistant via npm
DESCRIPTION: Command to install Dane globally using npm. This installs the alpha version of the @mastra/dane package.

LANGUAGE: bash
CODE:
npm install -g @mastra/dane@alpha

----------------------------------------

TITLE: Implementing Google Voice Integration in TypeScript
DESCRIPTION: Complete example showing initialization and usage of GoogleVoice class for both text-to-speech and speech-to-text operations. Demonstrates voice configuration, speaker listing, speech generation, and transcription functionality.

LANGUAGE: typescript
CODE:
import { GoogleVoice } from '@mastra/voice-google';

// Initialize with configuration
const voice = new GoogleVoice({
  speechModel: {
    apiKey: 'your-api-key', // Optional, can use GOOGLE_API_KEY env var
  },
  listeningModel: {
    apiKey: 'your-api-key', // Optional, can use GOOGLE_API_KEY env var
  },
  speaker: 'en-US-Standard-F', // Default voice
});

// List available voices
const voices = await voice.getSpeakers();

// Generate speech
const audioStream = await voice.speak('Hello from Mastra!', {
  speaker: 'en-US-Standard-F',
  languageCode: 'en-US',
});

// Transcribe speech
const text = await voice.listen(audioStream);

----------------------------------------

TITLE: Implementing Chain of Thought Math Problem Solving in TypeScript
DESCRIPTION: Creates a structured approach to solving math word problems using step-by-step thinking process. Uses a Math Teacher persona with automatic chain of thought processing.

LANGUAGE: typescript
CODE:
type WordProblemVars = {
  problem: string;
};

const mathSolver = createPrompt<WordProblemVars>('Solve word problem', {
  persona: 'Math Teacher',
  outputFormat: 'markdown',
})
  .text('Solve this word problem:\n\n{{problem}}')
  .thinking({
    autoChainOfThought: true,
    steps: [
      'Read and understand the problem',
      'Identify important information',
      'Choose the right operation',
      'Solve step by step',
      'Check the answer',
    ],
  });

----------------------------------------

TITLE: Running the Example
DESCRIPTION: Command to start the word inclusion metric example

LANGUAGE: bash
CODE:
pnpm start

----------------------------------------

TITLE: OpenAI API Key Configuration
DESCRIPTION: Environment variable configuration for OpenAI API authentication.

LANGUAGE: env
CODE:
OPENAI_API_KEY=sk-your-api-key-here

----------------------------------------

TITLE: Initializing MastraMCPClient Constructor
DESCRIPTION: Constructor definition for creating a new MastraMCPClient instance. Takes parameters for name, version, server configuration, and client capabilities.

LANGUAGE: typescript
CODE:
constructor({
    name,
    version = '1.0.0',
    server,
    capabilities = {},
}: {
    name: string;
    server: StdioServerParameters | SSEClientParameters;
    capabilities?: ClientCapabilities;
    version?: string;
})

----------------------------------------

TITLE: Updating ElevenLabs Voice Implementation Code
DESCRIPTION: Diff showing the changes required in the implementation code, including object initialization, voice listing, and text-to-speech generation.

LANGUAGE: diff
CODE:
- const tts = new ElevenLabsTTS({
-   model: {
-     name: 'Adam',
-     apiKey: 'your-api-key'
-   }
- });
+ const voice = new ElevenLabsVoice({
+   speechModel: {
+     name: 'eleven_multilingual_v2',
+     apiKey: 'your-api-key'
+   },
+   speaker: 'Adam'
+ });

- const voices = await tts.voices();
+ const speakers = await voice.getSpeakers();

- const result = await tts.generate({ voice: 'Adam', text: 'Hello' });
+ const stream = await voice.speak('Hello', { speaker: 'Adam' });

----------------------------------------

TITLE: Cloning and Navigating Project Repository
DESCRIPTION: Commands to clone the Mastra repository and navigate to the example directory for embedding insertion.

LANGUAGE: bash
CODE:
git clone https://github.com/mastra-ai/mastra
cd examples/basics/rag/insert-embedding-in-pinecone

----------------------------------------

TITLE: Configuring VercelDeployer in a Mastra application
DESCRIPTION: Example of how to import and configure the VercelDeployer within a Mastra application. It demonstrates setting up the deployer with team ID, project name, and Vercel token.

LANGUAGE: typescript
CODE:
import { Mastra } from '@mastra/core';
import { VercelDeployer } from '@mastra/deployer-vercel';

const deployer = new VercelDeployer({
  teamId: 'your-team-id',
  projectName: 'your-project-name',
  token: 'your-vercel-token',
});

const mastra = new Mastra({
  deployer,
  // ... other Mastra configuration options
});

----------------------------------------

TITLE: Building Prompt Components in TypeScript
DESCRIPTION: This snippet illustrates how to construct a complex prompt using various components such as main text, context, constraints, examples, and thinking steps. It shows how these components can be chained together to create a comprehensive prompt.

LANGUAGE: typescript
CODE:
const debugPrompt = createPrompt('Debug this code')
  // Main input text
  .text('function add(x,y) { retrun x + y }')

  // Background information
  .context('This is part of a calculator app')

  // Response boundaries
  .constraints(['Fix only syntax errors', 'Keep the logic the same'])

  // Guide with examples
  .examples([
    {
      input: 'function sub(x,y) { reutrn x - y }',
      output: 'function sub(x,y) { return x - y }',
    },
  ])

  // Reasoning approach
  .thinking({
    autoChainOfThought: true,
    steps: ['Identify syntax errors', 'Apply corrections'],
  });

// Usage
const debug = debugPrompt.toString();

----------------------------------------

TITLE: Evaluating Low Relevancy Context with Mastra
DESCRIPTION: Illustrates how to evaluate a response where most context is irrelevant to the query using the ContextRelevancyMetric.

LANGUAGE: typescript
CODE:
const context3 = [
  'The Great Barrier Reef is in Australia.',
  'Coral reefs need warm water to survive.',
  'Marine life depends on coral reefs.',
  'The capital of Australia is Canberra.',
];

const metric3 = new ContextRelevancyMetric(openai('gpt-4o-mini'), {
  context: context3,
});

const query3 = 'What is the capital of Australia?';
const response3 = 'The capital of Australia is Canberra.';

console.log('Example 3 - Low Relevancy:');
console.log('Context:', context3);
console.log('Query:', query3);
console.log('Response:', response3);

const result3 = await metric3.measure(query3, response3);
console.log('Metric Result:', {
  score: result3.score,
  reason: result3.info.reason,
});
// Example Output:
// Metric Result: { score: 0.12, reason: 'The context only has one relevant piece, while most of the context is irrelevant.' }

----------------------------------------

TITLE: Retrieving Thread Data with TypeScript
DESCRIPTION: Demonstrates how to use the getThreadById function to fetch a thread from memory storage using its ID. The function returns a promise that resolves to either the thread data or null if not found.

LANGUAGE: typescript
CODE:
import { Memory } from "@mastra/core/memory";

const memory = new Memory(config);

const thread = await memory.getThreadById({ threadId: "thread-123" });

----------------------------------------

TITLE: Blog Layout Structure
DESCRIPTION: HTML structure for the blog layout including navigation, content area, and footer sections. Uses Next.js components and includes styling classes.

LANGUAGE: html
CODE:
<html lang="en">
  <head>
    <link rel="stylesheet" href="/_next/static/css/75c6bf80605c00cd.css" />
    <link rel="icon" href="/favicon.ico?v=5" sizes="any">
  </head>
  <body class="antialiased dark">
    <nav class="z-50 sticky h-[60px] top-0 border-[0.5px] border-x-0 border-t-0 border-border-1">
      <!-- Navigation content -->
    </nav>
    <div class="flex-1 w-full mx-auto">
      <!-- Main content -->
    </div>
    <footer class="flex w-full border-t-[0.5px] border-border-1">
      <!-- Footer content --> 
    </footer>
  </body>
</html>

----------------------------------------

TITLE: Installing Project Dependencies
DESCRIPTION: Command to install project dependencies using pnpm package manager.

LANGUAGE: bash
CODE:
pnpm install

----------------------------------------

TITLE: Installing Cloudflare Deployer Package
DESCRIPTION: Command to install the @mastra/deployer-cloudflare package using pnpm package manager.

LANGUAGE: bash
CODE:
pnpm add @mastra/deployer-cloudflare

----------------------------------------

TITLE: Cloning Repository and Navigating to Project Directory
DESCRIPTION: Commands to clone the Mastra repository and navigate to the specific example directory for inserting embeddings in pgvector.

LANGUAGE: bash
CODE:
git clone https://github.com/mastra-ai/mastra
cd examples/basics/rag/insert-embedding-in-pgvector

----------------------------------------

TITLE: Changelog Records in Markdown
DESCRIPTION: A changelog written in markdown format tracking version updates, bug fixes, and dependency changes for the @mastra/github package.

LANGUAGE: markdown
CODE:
# @mastra/github

## 1.1.10

### Patch Changes

- Updated dependencies [fc2f89c]
- Updated dependencies [dfbb131]
- Updated dependencies [f4854ee]
- Updated dependencies [afaf73f]
- Updated dependencies [0850b4c]
- Updated dependencies [7bcfaee]
- Updated dependencies [44631b1]
- Updated dependencies [9116d70]
- Updated dependencies [6e559a0]
- Updated dependencies [5f43505]
  - @mastra/core@0.6.1

----------------------------------------

TITLE: Running the Mastra RAG Example
DESCRIPTION: Command to start and run the Mastra RAG example using pnpm.

LANGUAGE: bash
CODE:
pnpm start

----------------------------------------

TITLE: Creating Weather Component with Server Actions
DESCRIPTION: React component implementing a weather form using Mastra server actions

LANGUAGE: typescript
CODE:
'use client'

import { getWeatherInfo } from '../actions'

export function Weather() {
  async function handleSubmit(formData: FormData) {
    const city = formData.get('city') as string
    const result = await getWeatherInfo(city)
    // Handle the result
    console.log(result)
  }

  return (
    <form action={handleSubmit}>
      <input name="city" placeholder="Enter city name" />
      <button type="submit">Get Weather</button>
    </form>
  )
}

----------------------------------------

TITLE: Retrieving Vector Index Details in Mastra (TypeScript)
DESCRIPTION: Fetch information about a specific vector index using the details method.

LANGUAGE: typescript
CODE:
const details = await vector.details("index-name");

----------------------------------------

TITLE: Configuring Mastra MCP Server in Windsurf (Windows)
DESCRIPTION: JSON configuration for setting up the Mastra MCP server in Windsurf on Windows. This snippet demonstrates how to update the ~/.codeium/windsurf/mcp_config.json file to include the Mastra MCP server with Windows-specific command settings.

LANGUAGE: json
CODE:
{
  "mcpServers": {
    "mastra": {
      "command": "cmd",
      "args": ["/c", "npx", "-y", "@mastra/mcp-docs-server@latest"]
    }
  }
}

----------------------------------------

TITLE: Configuring Environment Variables
DESCRIPTION: Example environment variable configuration for OpenAI API key and Postgres connection string.

LANGUAGE: env
CODE:
OPENAI_API_KEY=sk-your-api-key-here
POSTGRES_CONNECTION_STRING=your-postgres-connection-string-here

----------------------------------------

TITLE: Example Project Structure for Mastra Deployment
DESCRIPTION: Illustration of the project structure created and managed by the deployer. It shows the .mastra directory and various configuration files.

LANGUAGE: plaintext
CODE:
your-project/
├── .mastra/
│   ├── package.json
│   ├── mastra.mjs
│   └── index.mjs
├── .env
├── .env.development
├── .env.local
└── package.json

----------------------------------------

TITLE: Setting Up Environment Variables
DESCRIPTION: Creates a .env file to store the OpenAI API key, which is required for the stock agent to function.

LANGUAGE: bash
CODE:
OPENAI_API_KEY=your_openai_api_key

----------------------------------------

TITLE: Deleting a Thread in Mastra using TypeScript
DESCRIPTION: This code shows how to delete a thread and its associated messages using the thread instance. It doesn't return any value.

LANGUAGE: typescript
CODE:
await thread.delete();

----------------------------------------

TITLE: Package Name Declaration in Markdown
DESCRIPTION: Simple package name declaration in markdown format showing the experimental status of the package.

LANGUAGE: markdown
CODE:
# @mastra/memory\n\nExperimental

----------------------------------------

TITLE: Version Information in Markdown
DESCRIPTION: Markdown file declaring the version 0.0.1 of the examples-rerank project.

LANGUAGE: markdown
CODE:
# examples-rerank

## 0.0.1

----------------------------------------

TITLE: Configuring Google API Environment Variable
DESCRIPTION: Required environment variable setup for Google Cloud API authentication.

LANGUAGE: bash
CODE:
GOOGLE_API_KEY=your_api_key

----------------------------------------

TITLE: Installing IBM Watson Speech Integration
DESCRIPTION: NPM installation command for the @mastra/speech-ibm package.

LANGUAGE: bash
CODE:
npm install @mastra/speech-ibm

----------------------------------------

TITLE: Installing Dependencies with pnpm
DESCRIPTION: Command to install project dependencies using pnpm package manager.

LANGUAGE: bash
CODE:
pnpm install

----------------------------------------

TITLE: Advanced Context Precision Metric Example with Analysis
DESCRIPTION: Shows a detailed example of using ContextPrecisionMetric with exercise-related contexts, including expected output format and score interpretation.

LANGUAGE: typescript
CODE:
import { openai } from "@ai-sdk/openai";
import { ContextPrecisionMetric } from "@mastra/evals/llm";

// Configure the model for evaluation
const model = openai("gpt-4o-mini");

const metric = new ContextPrecisionMetric(model, {
  context: [
    "Exercise strengthens the heart and improves blood circulation.",
    "A balanced diet is important for health.",
    "Regular physical activity reduces stress and anxiety.",
    "Exercise equipment can be expensive.",
  ],
});

const result = await metric.measure(
  "What are the benefits of exercise?",
  "Regular exercise improves cardiovascular health and mental wellbeing.",
);

// Example output:
// {
//   score: 0.75,
//   info: {
//     reason: "The score is 0.75 because the first and third contexts are highly relevant
//           to the benefits mentioned in the output, while the second and fourth contexts
//           are not directly related to exercise benefits. The relevant contexts are well-positioned
//           at the beginning and middle of the sequence."
//   }
// }

----------------------------------------

TITLE: Updating Thread Properties in Mastra using TypeScript
DESCRIPTION: This snippet demonstrates how to update thread properties such as title, metadata, and resource ID. It returns the updated thread object.

LANGUAGE: typescript
CODE:
const updated = await thread.update({
  title: "Updated Title",
  metadata: { status: "resolved" },
  resourceid: "resource-1",
});

----------------------------------------

TITLE: Updating Groq Model in Create-Mastra
DESCRIPTION: Updates the Groq model used in the create-mastra@latest command.

LANGUAGE: markdown
CODE:
- 1405e46: update the Groq model the create-mastra@latest sets

----------------------------------------

TITLE: Environment File Setup
DESCRIPTION: Command to copy the example environment file to create a new .env file.

LANGUAGE: bash
CODE:
cp .env.example .env

----------------------------------------

TITLE: Example of Complex Filter in TypeScript
DESCRIPTION: Demonstrates the structure of a complex filter using supported operators for metadata queries in vector store operations.

LANGUAGE: typescript
CODE:
{
  $and: [{ age: { $gt: 25 } }, { tags: { $in: ['tag1', 'tag2'] } }];
}

----------------------------------------

TITLE: Netlify Deployer Configuration
DESCRIPTION: Configuration example for the Netlify deployer showing required parameters including team scope and authentication token.

LANGUAGE: typescript
CODE:
new NetlifyDeployer({
  scope: 'your-netlify-team-slug',
  projectName: 'your-project-name',
  token: 'your-netlify-token'
})

----------------------------------------

TITLE: Quick Usage Example with Agent
DESCRIPTION: Practical example demonstrating how to initialize a client and generate a response using an agent.

LANGUAGE: typescript
CODE:
const client = new MastraClient({
  baseUrl: "http://localhost:4111",
});

// Get an agent instance
const agent = client.getAgent("your-agent-id");

// Generate a response
const response = await agent.generate({
  messages: [
    {
      role: "user",
      content: "Hello!",
    },
  ],
});

----------------------------------------

TITLE: Evaluating Mixed Toxicity Content
DESCRIPTION: Shows how to evaluate content containing both toxic and professional elements using an array of statements.

LANGUAGE: typescript
CODE:
const query2 = 'How was the meeting discussion?';
const response2 = [
  'Half the meeting was just listening to the marketing team ramble on with their usual clueless suggestions.',
  "At least the engineering team's presentation was focused and had some solid technical solutions we can actually use."
];

console.log('Example 2 - Mixed Toxicity:');
console.log('Query:', query2);
console.log('Response:', response2);

const result2 = await metric.measure(query2, response2);
console.log('Metric Result:', {
  score: result2.score,
  reason: result2.info.reason,
});

----------------------------------------

TITLE: Installing Project Dependencies
DESCRIPTION: Command to install the required dependencies for the project using pnpm.

LANGUAGE: bash
CODE:
pnpm install

----------------------------------------

TITLE: Using PgVector for Vector Store Operations in TypeScript
DESCRIPTION: Demonstrates how to use PgVector class for vector store operations including creating an index, upserting vectors, querying vectors, and disconnecting.

LANGUAGE: typescript
CODE:
import { PgVector } from '@mastra/pg';

const vectorStore = new PgVector('postgresql://user:pass@localhost:5432/db');

// Create a new table with vector support
await vectorStore.createIndex({
  indexName: 'my_vectors',
  dimension: 1536,
  metric: 'cosine',
});

// Add vectors
const ids = await vectorStore.upsert({
  indexName: 'my_vectors',
  vectors: [[0.1, 0.2, ...], [0.3, 0.4, ...]],
  metadata: [{ text: 'doc1' }, { text: 'doc2' }],
});

// Query vectors
const results = await vectorStore.query({
  indexName: 'my_vectors',
  queryVector: [0.1, 0.2, ...],
  topK: 10, // topK
  filter: { text: 'doc1' }, // filter
  includeVector: false, // includeVector
  minScore: 0.5, // minScore
});

// Clean up
await vectorStore.disconnect();

----------------------------------------

TITLE: Installing @mastra/vectorize package using npm
DESCRIPTION: This command installs the @mastra/vectorize package using npm (Node Package Manager). It adds the package to your project's dependencies.

LANGUAGE: bash
CODE:
npm install @mastra/vectorize

----------------------------------------

TITLE: Installing Dependencies with pnpm
DESCRIPTION: Command to install project dependencies using pnpm package manager.

LANGUAGE: bash
CODE:
pnpm install

----------------------------------------

TITLE: Importing Dependencies for Mastra RAG System
DESCRIPTION: Imports necessary modules and functions from Mastra, OpenAI, and other libraries to set up the RAG system with chain-of-thought reasoning.

LANGUAGE: typescript
CODE:
import { openai } from "@ai-sdk/openai";
import { Mastra } from "@mastra/core";
import { Agent } from "@mastra/core/agent";
import { Step, Workflow } from "@mastra/core/workflows";
import { PgVector } from "@mastra/pg";
import { createVectorQueryTool, MDocument } from "@mastra/rag";
import { embedMany } from "ai";
import { z } from "zod";

----------------------------------------

TITLE: Retrieving Agent Evaluations in TypeScript
DESCRIPTION: This snippet demonstrates how to get evaluation results for a Mastra AI agent, including both CI evaluations and live evaluations.

LANGUAGE: typescript
CODE:
// Get CI evaluations
const evals = await agent.evals();

// Get live evaluations
const liveEvals = await agent.liveEvals();

----------------------------------------

TITLE: Importing Dependencies for Toxicity Metric
DESCRIPTION: Imports the necessary OpenAI and Mastra Toxicity metric dependencies for evaluation.

LANGUAGE: typescript
CODE:
import { openai } from '@ai-sdk/openai';
import { ToxicityMetric } from '@mastra/evals/llm';

----------------------------------------

TITLE: Copying Environment Variables File
DESCRIPTION: Command to create a copy of the example environment variables file for local configuration.

LANGUAGE: bash
CODE:
cp .env.example .env

----------------------------------------

TITLE: Generating Zod Schema for Integration in Bash
DESCRIPTION: This command finalizes the schema generation for a newly created integration. It should be run in the specific integration directory after the integration has been generated.

LANGUAGE: bash
CODE:
pnpm run gen:zod:schema

----------------------------------------

TITLE: Querying MCP Registry and Server Definitions in TypeScript
DESCRIPTION: Demonstrates how to connect to the registry, list available servers, and retrieve a specific server definition. The server definition includes a schema that can be used to build user interfaces.

LANGUAGE: typescript
CODE:
const directory = await registry.connect()
console.log("Connected to registry:", directory.name, directory.homepage)

const allServers = await registry.listServers()
console.log("\nAvailable servers:")

allServers.forEach((server) => {
	console.log(`- ${server.name} (${server.id}): ${server.description}`)
})

const stripeServer = await registry.getServerDefinition({ id: "stripe" })

----------------------------------------

TITLE: Custom Mastra Project Setup
DESCRIPTION: Creates a Mastra project with custom configuration including specific directory path, selected components, LLM provider choice, and example code inclusion.

LANGUAGE: bash
CODE:
mastra init --dir src/mastra --components agents,tools --llm openai --example

----------------------------------------

TITLE: Importing Completeness Metric in TypeScript
DESCRIPTION: Import the CompletenessMetric from the Mastra evals package for NLP tasks.

LANGUAGE: typescript
CODE:
import { CompletenessMetric } from '@mastra/evals/nlp';

----------------------------------------

TITLE: Installing Project Dependencies
DESCRIPTION: Command to install required project dependencies using pnpm package manager

LANGUAGE: bash
CODE:
pnpm install

----------------------------------------

TITLE: Setting OpenAI API Key in Environment File
DESCRIPTION: Example of how to set the OpenAI API key in the .env file.

LANGUAGE: env
CODE:
OPENAI_API_KEY=sk-your-api-key-here

----------------------------------------

TITLE: Documenting Return Values
DESCRIPTION: Shows how to document function return values using PropertiesTable component.

LANGUAGE: mdx
CODE:
## Returns

<PropertiesTable
  content={[
    {
      name: "transformedData",
      type: "string",
      description: "The final transformed data after applying the function logic.",
    },
    {
      name: "metadata",
      type: "object",
      description: "Additional information about the transformation.",
    },
  ]}
/>

----------------------------------------

TITLE: Installing Project Dependencies
DESCRIPTION: Command to install required project dependencies using pnpm package manager.

LANGUAGE: bash
CODE:
pnpm install

----------------------------------------

TITLE: Importing dependencies for Hallucination metric in TypeScript
DESCRIPTION: This code imports the necessary dependencies from OpenAI and Mastra libraries to use the Hallucination metric.

LANGUAGE: typescript
CODE:
import { openai } from '@ai-sdk/openai';
import { HallucinationMetric } from '@mastra/evals/llm';

----------------------------------------

TITLE: Creating Stock Agent with OpenAI in TypeScript
DESCRIPTION: Defines a stock agent using the Mastra core library and OpenAI, incorporating the previously created stock price tool.

LANGUAGE: typescript
CODE:
import { Agent } from "@mastra/core/agent";
import { openai } from "@ai-sdk/openai";

import * as tools from "../tools/stockPrices";

export const stockAgent = new Agent<typeof tools>({
  name: "Stock Agent",
  instructions:
    "You are a helpful assistant that provides current stock prices. When asked about a stock, use the stock price tool to fetch the stock price.",
  model: openai("gpt-4o-mini"),
  tools: {
    stockPrices: tools.stockPrices,
  },
});

----------------------------------------

TITLE: Importing Dependencies for Answer Relevancy Evaluation in TypeScript
DESCRIPTION: Imports necessary modules from OpenAI SDK and Mastra evals library for Answer Relevancy evaluation.

LANGUAGE: typescript
CODE:
import { openai } from '@ai-sdk/openai';
import { AnswerRelevancyMetric } from '@mastra/evals/llm';

----------------------------------------

TITLE: Cloning Mastra Project Repository
DESCRIPTION: Command to clone the Mastra repository and navigate to the workflow example directory

LANGUAGE: bash
CODE:
git clone https://github.com/mastra-ai/mastra
cd examples/basics/workflows/create-workflow

----------------------------------------

TITLE: Initializing Memory with Tool Call Working Memory in Mastra
DESCRIPTION: Configures a Memory instance with working memory enabled in tool call mode, which is required for compatibility with data streaming using toDataStream().

LANGUAGE: typescript
CODE:
const toolCallMemory = new Memory({
  options: {
    workingMemory: {
      enabled: true,
      use: 'tool-call', // Required for toDataStream() compatibility
    },
  },
});

----------------------------------------

TITLE: Creating Project Structure
DESCRIPTION: Commands to create the necessary directories and files for the stock agent project.

LANGUAGE: bash
CODE:
mkdir -p src/agents src/tools
touch src/agents/stockAgent.ts src/tools/stockPrices.ts src/index.ts

----------------------------------------

TITLE: Setting Environment Variables for OpenAI API in Bash
DESCRIPTION: Sets up the OPENAI_API_KEY environment variable for authentication with the OpenAI API.

LANGUAGE: bash
CODE:
OPENAI_API_KEY=your_api_key_here

----------------------------------------

TITLE: Running the Workflow Example
DESCRIPTION: Command to start the branching workflow example.

LANGUAGE: bash
CODE:
pnpm start

----------------------------------------

TITLE: Markdown Documentation Structure for MastraAI Contributing Guidelines
DESCRIPTION: Structured markdown document that outlines contribution guidelines, bug reporting procedures, and feature development processes for the MastraAI project. Includes sections for bug reporting, bug fixing, and feature proposals.

LANGUAGE: markdown
CODE:
# Contributing to MastraAI

Welcome to the MastraAI developer community. Thanks for taking the time to contribute!

## Contributor Guidelines

Please read the guidance below about what to do if you:

- [Found a bug](#did-you-find-a-bug)
- [Fixed a bug](#did-you-write-a-patch-that-fixes-a-bug)
- [Want to add a new feature or change an existing one](#do-you-intend-to-add-a-new-feature-or-change-an-existing-one)

### Did you find a bug?

- Ensure that the bug was not already reported by searching on GitHub under the relevant issue tracker
- If you're unable to find an open issue addressing the problem, open a new one

Be sure to include a title and clear description, as much relevant information as possible, and a **code sample** or an **executable test case** demonstrating the expected behavior that is not occurring.

### Did you write a patch that fixes a bug?

- Open a new GitHub pull request with the patch
- Ensure the PR description clearly describes the problem and solution. Include the relevant issue number if applicable

### Do you intend to add a new feature or change an existing one?

- Say hello and suggest your change on the discussion channels for the [MastraAI community](https://discord.gg/TpapMTnjyB)
- Assuming you get positive feedback, raise a Pull Request against your fork/branch to track the development of the feature and discuss the implementation.

----------------------------------------

TITLE: Installing Dependencies
DESCRIPTION: Command to install project dependencies using pnpm package manager

LANGUAGE: bash
CODE:
pnpm install

----------------------------------------

TITLE: Package Version History in Markdown
DESCRIPTION: Comprehensive changelog entries documenting version changes, dependency updates, and API modifications from version 0.1.0 to 0.1.5

LANGUAGE: markdown
CODE:
# @mastra/voice-murf

## 0.1.5

### Patch Changes

- Updated dependencies [fc2f89c]
- Updated dependencies [dfbb131]
- Updated dependencies [f4854ee]
- Updated dependencies [afaf73f]
- Updated dependencies [0850b4c]
- Updated dependencies [7bcfaee]
- Updated dependencies [44631b1]
- Updated dependencies [9116d70]
- Updated dependencies [6e559a0]
- Updated dependencies [5f43505]
  - @mastra/core@0.6.1

----------------------------------------

TITLE: Running TypeScript Script with Bun
DESCRIPTION: Executes the TypeScript script that interacts with the Chef Assistant agent using the Bun runtime.

LANGUAGE: bash
CODE:
npx bun src/index.ts

----------------------------------------

TITLE: Configuring SigNoz Environment Variables
DESCRIPTION: Sets up the required environment variables for connecting to SigNoz, including the OTLP endpoint and ingestion key headers.

LANGUAGE: env
CODE:
OTEL_EXPORTER_OTLP_ENDPOINT=https://ingest.{region}.signoz.cloud:443
OTEL_EXPORTER_OTLP_HEADERS=signoz-ingestion-key=your_signoz_token

----------------------------------------

TITLE: Changelog Entries in Markdown
DESCRIPTION: Version history entries documenting changes and dependency updates across multiple alpha releases. The changelog shows incremental updates and dependencies on @mastra/core package versions.

LANGUAGE: markdown
CODE:
# workflow-with-branching-paths

## 0.0.1

## 0.0.1-alpha.2

### Patch Changes

- Updated dependencies [e9d1b47]
  - @mastra/core@0.2.0-alpha.85

## 0.0.1-alpha.1

### Patch Changes

- Updated dependencies [2f17a5f]
- Updated dependencies [cb290ee]
- Updated dependencies [b4d7416]
- Updated dependencies [38b7f66]
  - @mastra/core@0.2.0-alpha.84

## 0.0.1-alpha.0

### Patch Changes

- Updated dependencies [30322ce]
- Updated dependencies [78eec7c]
- Updated dependencies [9625602]
- Updated dependencies [8769a62]
  - @mastra/core@0.2.0-alpha.83

----------------------------------------

TITLE: Evaluating low recall response with Contextual Recall metric
DESCRIPTION: Illustrates how to evaluate a response that misses most context information using the Contextual Recall metric. It sets up another context, creates a metric instance, and measures the recall score for an incorrect response.

LANGUAGE: typescript
CODE:
const context3 = [
  'The solar system has eight planets.',
  'Mercury is closest to the Sun.',
  'Venus is the hottest planet.',
  'Mars is called the Red Planet.',
];

const metric3 = new ContextualRecallMetric(openai('gpt-4o-mini'), {
  context: context3,
});

const query3 = 'Tell me about the solar system.';
const response3 = 'Jupiter is the largest planet in the solar system.';

console.log('Example 3 - Low Recall:');
console.log('Context:', context3);
console.log('Query:', query3);
console.log('Response:', response3);

const result3 = await metric3.measure(query3, response3);
console.log('Metric Result:', {
  score: result3.score,
  reason: result3.info.reason,
});
// Example Output:
// Metric Result: { score: 0, reason: 'None of the output is supported by the context.' }

----------------------------------------

TITLE: TypeScript Configuration for Mastra
DESCRIPTION: TypeScript configuration optimized for Mastra projects, including modern module resolution and strict type checking settings.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "target": "ES2022",
    "module": "ES2022",
    "moduleResolution": "bundler",
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "strict": true,
    "skipLibCheck": true,
    "outDir": "dist"
  },
  "include": [
    "src/**/*"
  ],
  "exclude": [
    "node_modules",
    "dist",
    ".mastra"
  ]
}

----------------------------------------

TITLE: Configuring Environment Variables for Laminar in Mastra
DESCRIPTION: Sets up the necessary environment variables for integrating Laminar with Mastra. This includes the OTLP exporter endpoint and required headers for authentication and team identification.

LANGUAGE: env
CODE:
OTEL_EXPORTER_OTLP_ENDPOINT=https://api.lmnr.ai:8443
OTEL_EXPORTER_OTLP_HEADERS="Authorization=Bearer your_api_key, x-laminar-team-id=your_team_id"

----------------------------------------

TITLE: Running the Workflow Example
DESCRIPTION: Command to start and execute the workflow example application.

LANGUAGE: bash
CODE:
pnpm start

----------------------------------------

TITLE: Copying Environment Variables File in Bash
DESCRIPTION: This command creates a copy of the example environment variables file, which will be used to store the OpenAI API key.

LANGUAGE: bash
CODE:
cp .env.example .env

----------------------------------------

TITLE: Copying Environment Variables Template
DESCRIPTION: Command to create a local environment variables file from the sample template.

LANGUAGE: bash
CODE:
cp .env.sample .env.local

----------------------------------------

TITLE: Initializing MastraClient in NextJS
DESCRIPTION: Creates and configures a Mastra client instance for use in a Next.js application

LANGUAGE: typescript
CODE:
import { MastraClient } from '@mastra/client-js';

// Initialize the client
export const mastraClient = new MastraClient({
  baseUrl: process.env.NEXT_PUBLIC_MASTRA_API_URL || 'http://localhost:4111',
});

----------------------------------------

TITLE: Installing PostgreSQL Package for Mastra
DESCRIPTION: Command to install the PostgreSQL storage package via npm

LANGUAGE: bash
CODE:
npm install @mastra/pg

----------------------------------------

TITLE: Cloning and Installing Bird Checker Repository
DESCRIPTION: Commands to clone the repository and install project dependencies using pnpm package manager.

LANGUAGE: bash
CODE:
git clone <repository-url>
cd bird-checker-with-nextjs

LANGUAGE: bash
CODE:
pnpm install

----------------------------------------

TITLE: Installing Mastra Using Package Managers
DESCRIPTION: Commands for creating a new Mastra project using different package managers (npx, npm, yarn, pnpm)

LANGUAGE: bash
CODE:
npx create-mastra@latest

----------------------------------------

TITLE: Defining Index Stats Interface in TypeScript
DESCRIPTION: Defines the structure of the IndexStats interface, which represents the statistics of an index including dimension, count, and metric type.

LANGUAGE: typescript
CODE:
interface IndexStats {
  dimension: number;
  count: number;
  metric: "cosine" | "euclidean" | "dotproduct";
}

----------------------------------------

TITLE: Installing and Running Next.js AI Chatbot Locally
DESCRIPTION: Commands for setting up and running the Next.js AI Chatbot project on a local development environment. This includes installing dependencies and starting the development server.

LANGUAGE: bash
CODE:
pnpm install
pnpm dev

----------------------------------------

TITLE: Generating and Inserting Embeddings in Pinecone using Mastra and OpenAI
DESCRIPTION: This code snippet demonstrates the process of generating embeddings from text content using OpenAI, creating a Pinecone index, and inserting the embeddings into Pinecone. It uses the Mastra library for document handling and Pinecone operations.

LANGUAGE: typescript
CODE:
import { openai } from '@ai-sdk/openai';
import { PineconeVector } from '@mastra/pinecone';
import { MDocument } from '@mastra/rag';
import { embedMany } from 'ai';

const doc = MDocument.fromText('Your text content...');

const chunks = await doc.chunk();

const { embeddings } = await embedMany({
  values: chunks.map(chunk => chunk.text),
  model: openai.embedding('text-embedding-3-small'),
});

const pinecone = new PineconeVector(process.env.PINECONE_API_KEY!);

await pinecone.createIndex({
  indexName: 'testindex',
  dimension: 1536,
});

await pinecone.upsert({
  indexName: 'testindex',
  vectors: embeddings,
  metadata: chunks?.map(chunk => ({ text: chunk.text })),
});

----------------------------------------

TITLE: Cloning Repository and Navigating to Project Directory
DESCRIPTION: Commands to clone the Mastra repository and navigate to the toxicity example directory.

LANGUAGE: bash
CODE:
git clone https://github.com/mastra-ai/mastra
cd examples/basics/evals/toxicity

----------------------------------------

TITLE: Configuring Mastra Storage Integration
DESCRIPTION: Setup for storing eval results in Mastra Storage system with persistence options.

LANGUAGE: typescript
CODE:
import { mastra } from './your-mastra-setup';

beforeAll(async () => {
  // Store evals in Mastra Storage (requires storage to be enabled)
  await attachListeners(mastra);
});

----------------------------------------

TITLE: Creating Gluten Checker Metric Class
DESCRIPTION: Implementation of a metric class that manages the evaluation process and calculates scores based on gluten content

LANGUAGE: typescript
CODE:
export interface MetricResultWithInfo extends MetricResult {
  info: {
    reason: string;
    glutenSources: string[];
  };
}

export class GlutenCheckerMetric extends Metric {
  private judge: GlutenCheckerJudge;
  constructor(model: LanguageModel) {
    super();

    this.judge = new GlutenCheckerJudge(model);
  }

  async measure(output: string): Promise<MetricResultWithInfo> {
    const { isGlutenFree, glutenSources } = await this.judge.evaluate(output);
    const score = await this.calculateScore(isGlutenFree);
    const reason = await this.judge.getReason({
      isGlutenFree,
      glutenSources,
    });

    return {
      score,
      info: {
        glutenSources,
        reason,
      },
    };
  }

  async calculateScore(isGlutenFree: boolean): Promise<number> {
    return isGlutenFree ? 1 : 0;
  }
}

----------------------------------------

TITLE: Project Structure for Dane AI Assistant
DESCRIPTION: Outline of the project's directory structure, showing the main components including the entry point, configuration, commands, and core functionality modules.

LANGUAGE: plaintext
CODE:
src/
├── index.ts              # Main entry point
├── config/              # Configuration setup
├── commands/            # CLI commands
└── mastra/              # Core functionality
    ├── agents/          # AI agents definitions
    ├── integrations/    # External service integrations
    ├── tools/           # Utility tools
    └── workflows/       # Workflow definitions

----------------------------------------

TITLE: Saving Speech Output to File in TypeScript
DESCRIPTION: This snippet demonstrates how to generate speech using a Mastra agent and save the audio output to a file. It utilizes Node.js streams to handle the audio data.

LANGUAGE: typescript
CODE:
import { createWriteStream } from "fs";
import path from "path";

// Generate speech and save to file
const audio = await agent.speak("Hello, World!");
const filePath = path.join(process.cwd(), "agent.mp3");
const writer = createWriteStream(filePath);

audio.pipe(writer);

await new Promise<void>((resolve, reject) => {
  writer.on("finish", () => resolve());
  writer.on("error", reject);
});

----------------------------------------

TITLE: Importing Dependencies for Word Inclusion Metric in TypeScript
DESCRIPTION: Imports the necessary Metric and MetricResult types from the Mastra core evaluation module.

LANGUAGE: typescript
CODE:
import { Metric, type MetricResult } from '@mastra/core/eval';

----------------------------------------

TITLE: Changelog Entry - Version 1.0.1-alpha.2
DESCRIPTION: Changelog entry showing dependency updates for @mastra/core and @mastra/evals

LANGUAGE: markdown
CODE:
# yc-directory

## 1.0.1-alpha.2

### Patch Changes

- Updated dependencies [e9d1b47]
  - @mastra/core@0.2.0-alpha.85
  - @mastra/evals@0.1.0-alpha.27

----------------------------------------

TITLE: Document Node Interface Definition
DESCRIPTION: Defines the structure of chunked documents returned by the chunk() function, including text content, metadata, and optional embeddings.

LANGUAGE: typescript
CODE:
interface DocumentNode {
  text: string;
  metadata: Record<string, any>;
  embedding?: number[];
}

----------------------------------------

TITLE: Cloning and Setting Up Mastra Workflow Project
DESCRIPTION: Commands for cloning the Mastra repository and navigating to the workflow example directory with cyclical dependencies.

LANGUAGE: bash
CODE:
git clone https://github.com/mastra-ai/mastra
cd examples/basics/workflows/workflow-with-cyclical-deps

----------------------------------------

TITLE: Handling Chat Server Endpoint with Memory in TypeScript
DESCRIPTION: This code shows how to handle a chat server endpoint, passing thread and resource IDs to the agent for memory access.

LANGUAGE: typescript
CODE:
const { messages } = await request.json();

const stream = await myAgent.stream(messages, {
  threadId,
  resourceId,
});

return stream.toDataStreamResponse();

----------------------------------------

TITLE: Markdown Changelog Entry for Version 0.0.1-alpha.0
DESCRIPTION: Documents initial alpha release 0.0.1-alpha.0 with multiple dependency updates to @mastra/core package.

LANGUAGE: markdown
CODE:
## 0.0.1-alpha.0

### Patch Changes

- Updated dependencies [30322ce]
- Updated dependencies [78eec7c]
- Updated dependencies [9625602]
- Updated dependencies [8769a62]
  - @mastra/core@0.2.0-alpha.83

----------------------------------------

TITLE: Installing @mastra/voice-google package using npm
DESCRIPTION: Command to install the new @mastra/voice-google package using npm. This is the first step in the migration process.

LANGUAGE: bash
CODE:
npm install @mastra/voice-google

----------------------------------------

TITLE: Generating Text with Mastra Agent in TypeScript
DESCRIPTION: This code snippet shows how to use the .generate() method of a Mastra agent to produce text responses based on user input.

LANGUAGE: typescript
CODE:
const response = await myAgent.generate([
  { role: "user", content: "Hello, how can you assist me today?" },
]);

console.log("Agent:", response.text);

----------------------------------------

TITLE: Markdown Changelog Entry for Version 0.0.1-alpha.2
DESCRIPTION: Documents alpha release 0.0.1-alpha.2 with dependency update to @mastra/core package.

LANGUAGE: markdown
CODE:
## 0.0.1-alpha.2

### Patch Changes

- Updated dependencies [e9d1b47]
  - @mastra/core@0.2.0-alpha.85

----------------------------------------

TITLE: Updating Code for New Speech Package Usage
DESCRIPTION: Diff demonstrating the changes required in the code to use the new speech package, including initialization, voice retrieval, and text-to-speech generation.

LANGUAGE: diff
CODE:
- const tts = new SpeechifyTTS({
-   model: {
-     name: 'simba-multilingual',
-     voice: 'george',
-   }
- });
+ const voice = new SpeechifyVoice({
+   speechModel: {
+     name: 'simba-english',
+   },
+   speaker: 'george'
+ });

- const voices = await tts.voices();
+ const speakers = await voice.getSpeakers();

- const { audioResult } = await tts.generate({ text: 'Hello' });
+ const stream = await voice.speak('Hello');

----------------------------------------

TITLE: Error Handling Implementation in TypeScript
DESCRIPTION: Demonstrates how to handle errors thrown by the vector store using try-catch blocks and the VectorStoreError type.

LANGUAGE: typescript
CODE:
try {
  await store.query({
    indexName: "index_name",
    queryVector: queryVector,
  });
} catch (error) {
  if (error instanceof VectorStoreError) {
    console.log(error.code); // 'connection_failed' | 'invalid_dimension' | etc
    console.log(error.details); // Additional error context
  }
}

----------------------------------------

TITLE: Setting OpenAI API Key and Postgres Connection String
DESCRIPTION: Example of how to set the OpenAI API key and Postgres connection string in the .env file.

LANGUAGE: env
CODE:
OPENAI_API_KEY=sk-your-api-key-here
POSTGRES_CONNECTION_STRING=your-postgres-connection-string-here

----------------------------------------

TITLE: Configuring Mastra with Cloudflare Deployer
DESCRIPTION: Example of initializing and configuring the CloudflareDeployer with Mastra framework, including authentication and route setup.

LANGUAGE: typescript
CODE:
import { Mastra } from '@mastra/core';
import { CloudflareDeployer } from '@mastra/deployer-cloudflare';

const deployer = new CloudflareDeployer({
  scope: 'your-account-id',
  projectName: 'your-project-name',
  routes: [
    {
      pattern: 'example.com/*',
      zone_name: 'example.com',
      custom_domain: true,
    },
  ],
  workerNamespace: 'your-namespace',
  auth: {
    apiToken: 'your-api-token',
    apiEmail: 'your-email',
  },
});

const mastra = new Mastra({
  deployer,
  // ... other Mastra configuration options
});

----------------------------------------

TITLE: Implementing Variables in TypeScript Prompts
DESCRIPTION: This snippet shows how to define and use variables in prompt templates. It demonstrates creating a template with typed variables and using it with different values, allowing for dynamic prompt generation.

LANGUAGE: typescript
CODE:
// Define variable types
type CodeReviewVars = {
  file: string;
  changes: number;
};

// Create template with variables
const reviewTemplate = createPrompt<CodeReviewVars>('Review code changes')
  .text('Review {{changes}} changes in {{file}}')
  .constraints(['Focus on {{file}} specific patterns', 'Suggest maximum {{changes}} improvements']);

// Use the template with different values
const review1 = reviewTemplate.toString({
  file: 'auth.ts',
  changes: 3,
});

const review2 = reviewTemplate.toString({
  file: 'api.ts',
  changes: 5,
});

----------------------------------------

TITLE: Advanced Workflow with Multiple Suspension Points in Mastra
DESCRIPTION: Demonstrates a complex content generation workflow with multiple suspension points. It uses async/await patterns and suspend payloads to handle human interventions at different stages of content creation and improvement.

LANGUAGE: typescript
CODE:
import { Mastra } from '@mastra/core';
import { Step, Workflow } from '@mastra/core/workflows';
import { z } from 'zod';

// Step 1: Get user input
const getUserInput = new Step({
  id: 'getUserInput',
  execute: async ({ context }) => {
    // In a real application, this might come from a form or API
    return { userInput: context.triggerData.input };
  },
  outputSchema: z.object({ userInput: z.string() }),
});

// Step 2: Generate content with AI (may suspend for human guidance)
const promptAgent = new Step({
  id: 'promptAgent',
  inputSchema: z.object({
    guidance: z.string(),
  }),
  execute: async ({ context, suspend }) => {
    const userInput = context.getStepResult(getUserInput)?.userInput;
    console.log(`Generating content based on: ${userInput}`);

    const guidance = context.inputData?.guidance;

    // Simulate AI generating content
    const initialDraft = generateInitialDraft(userInput);

    // If confidence is high, return the generated content directly
    if (initialDraft.confidenceScore > 0.7) {
      return { modelOutput: initialDraft.content };
    }

    console.log('Low confidence in generated content, suspending for human guidance', {guidance});

    // If confidence is low, suspend for human guidance
    if (!guidance) {
      // only suspend if no guidance is provided
      await suspend();
      return undefined;
    }

    // This code runs after resume with human guidance
    console.log('Resumed with human guidance');

    // Use the human guidance to improve the output
    return {
      modelOutput: enhanceWithGuidance(initialDraft.content, guidance),
    };
  },
  outputSchema: z.object({ modelOutput: z.string() }).optional(),
});

// Step 3: Evaluate the content quality
const evaluateTone = new Step({
  id: 'evaluateToneConsistency',
  execute: async ({ context }) => {
    const content = context.getStepResult(promptAgent)?.modelOutput;

    // Simulate evaluation
    return {
      toneScore: { score: calculateToneScore(content) },
      completenessScore: { score: calculateCompletenessScore(content) },
    };
  },
  outputSchema: z.object({
    toneScore: z.any(),
    completenessScore: z.any(),
  }),
});

// Step 4: Improve response if needed (may suspend)
const improveResponse = new Step({
  id: 'improveResponse',
  inputSchema: z.object({
    improvedContent: z.string(),
    resumeAttempts: z.number(),
  }),
  execute: async ({ context, suspend }) => {
    const content = context.getStepResult(promptAgent)?.modelOutput;
    const toneScore =
      context.getStepResult(evaluateTone)?.toneScore.score ?? 0;
    const completenessScore =
      context.getStepResult(evaluateTone)?.completenessScore.score ?? 0;

    const improvedContent = context.inputData.improvedContent;
    const resumeAttempts = context.inputData.resumeAttempts ?? 0;

    // If scores are above threshold, make minor improvements
    if (toneScore > 0.8 && completenessScore > 0.8) {
      return { improvedOutput: makeMinorImprovements(content) };
    }

    console.log('Content quality below threshold, suspending for human intervention', {improvedContent, resumeAttempts});

    if (!improvedContent) {
      // Suspend with payload containing content and resume attempts
      await suspend({
        content,
        scores: { tone: toneScore, completeness: completenessScore },
        needsImprovement: toneScore < 0.8 ? 'tone' : 'completeness',
        resumeAttempts: resumeAttempts + 1,
      });
      return { improvedOutput: content ?? '' };
    }

    console.log('Resumed with human improvements', improvedContent);
    return { improvedOutput: improvedContent ?? content ?? '' };
  },
  outputSchema: z.object({ improvedOutput: z.string() }).optional(),
});

// Step 5: Final evaluation
const evaluateImproved = new Step({
  id: 'evaluateImprovedResponse',
  execute: async ({ context }) => {
    const improvedContent = context.getStepResult(improveResponse)?.improvedOutput;

    // Simulate final evaluation
    return {
      toneScore: { score: calculateToneScore(improvedContent) },
      completenessScore: { score: calculateCompletenessScore(improvedContent) },
    };
  },
  outputSchema: z.object({
    toneScore: z.any(),
    completenessScore: z.any(),
  }),
});

// Build the workflow
const contentWorkflow = new Workflow({
  name: 'content-generation-workflow',
  triggerSchema: z.object({ input: z.string() }),
});

contentWorkflow
  .step(getUserInput)
  .then(promptAgent)
  .then(evaluateTone)
  .then(improveResponse)
  .then(evaluateImproved)
  .commit();

// Register the workflow
const mastra = new Mastra({
  workflows: { contentWorkflow },
});

// Helper functions (simulated)
function generateInitialDraft(input: string = '') {
  // Simulate AI generating content
  return {
    content: `Generated content based on: ${input}`,
    confidenceScore: 0.6, // Simulate low confidence to trigger suspension
  };
}

function enhanceWithGuidance(content: string = '', guidance: string = '') {
  return `${content} (Enhanced with guidance: ${guidance})`;
}

function makeMinorImprovements(content: string = '') {
  return `${content} (with minor improvements)`;
}

function calculateToneScore(_: string = '') {
  return 0.7; // Simulate a score that will trigger suspension
}

function calculateCompletenessScore(_: string = '') {
  return 0.9;
}

// Usage example
async function runWorkflow() {
  const workflow = mastra.getWorkflow('contentWorkflow');
  const { runId, start } = workflow.createRun();

  let finalResult: any;

  // Start the workflow
  const initialResult = await start({
    triggerData: { input: 'Create content about sustainable energy' },
  });

  console.log('Initial workflow state:', initialResult.results);

  const promptAgentStepResult = initialResult.activePaths.get('promptAgent');

  // Check if promptAgent step is suspended
  if (promptAgentStepResult?.status === 'suspended') {
    console.log('Workflow suspended at promptAgent step');
    console.log('Suspension payload:', promptAgentStepResult?.suspendPayload);

    // Resume with human guidance
    const resumeResult1 = await workflow.resume({
      runId,
      stepId: 'promptAgent',
      context: {
        guidance: 'Focus more on solar and wind energy technologies',
      },
    });

    console.log('Workflow resumed and continued to next steps');

    let improveResponseResumeAttempts = 0;
    let improveResponseStatus = resumeResult1?.activePaths.get('improveResponse')?.status;

    // Check if improveResponse step is suspended
    while (improveResponseStatus === 'suspended') {
      console.log('Workflow suspended at improveResponse step');
      console.log('Suspension payload:', resumeResult1?.activePaths.get('improveResponse')?.suspendPayload);

      const improvedContent =
        improveResponseResumeAttempts < 3
          ? undefined
          : 'Completely revised content about sustainable energy focusing on solar and wind technologies';

      // Resume with human improvements
      finalResult = await workflow.resume({
        runId,
        stepId: 'improveResponse',
        context: {
          improvedContent,
          resumeAttempts: improveResponseResumeAttempts,
        },
      });

      improveResponseResumeAttempts =
        finalResult?.activePaths.get('improveResponse')?.suspendPayload?.resumeAttempts ?? 0;
      improveResponseStatus = finalResult?.activePaths.get('improveResponse')?.status;

      console.log('Improved response result:', finalResult?.results);
    }
  }
  return finalResult;
}

// Run the workflow
const result = await runWorkflow();
console.log('Workflow completed');
console.log('Final workflow result:', result);

----------------------------------------

TITLE: Running Next.js Development Server
DESCRIPTION: Commands to start the Next.js development server using various package managers. This allows developers to run the project locally for development and testing purposes.

LANGUAGE: bash
CODE:
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev

----------------------------------------

TITLE: Running the Example
DESCRIPTION: Command to start the Mastra tool example

LANGUAGE: bash
CODE:
pnpm start

----------------------------------------

TITLE: Implementing User-Specific Tool Configuration
DESCRIPTION: Example showing how to configure and use MCP tools with user-specific settings in a multi-user environment

LANGUAGE: typescript
CODE:
import { MCPConfiguration } from '@mastra/mcp';
import { Agent } from '@mastra/core/agent';
import { openai } from '@ai-sdk/openai';

// Configure MCP servers with user-specific settings before getting toolsets
const mcp = new MCPConfiguration({
  servers: {
    stockPrice: {
      command: 'npx',
      args: ['tsx', 'weather-mcp.ts'],
      env: {
        // These would be different per user
        API_KEY: 'user-1-api-key',
      },
    },
    weather: {
      url: new URL('http://localhost:8080/sse'),
      requestInit: {
        headers: {
          // These would be different per user
          Authorization: 'Bearer user-1-token',
        },
      },
    },
  },
});

// Get the current toolsets configured for this user
const toolsets = await mcp.getToolsets();

// Use the agent with user-specific tool configurations
const response = await agent.generate('What is the weather in London?', {
  toolsets,
});

console.log(response.text);

----------------------------------------

TITLE: Executing Mastra Workflow via cURL
DESCRIPTION: Example cURL command to execute the user registration workflow by sending a POST request with user data to the Mastra API endpoint.

LANGUAGE: bash
CODE:
curl --location 'http://localhost:4111/api/workflows/user-registration/execute' \
     --header 'Content-Type: application/json' \
     --data '{
       "email": "user@example.com",
       "name": "John Doe",
       "age": 25
     }'

----------------------------------------

TITLE: Cloning and Setting Up Mastra Project
DESCRIPTION: Commands for cloning the Mastra repository and navigating to the context relevancy example directory.

LANGUAGE: bash
CODE:
git clone https://github.com/mastra-ai/mastra
cd examples/basics/evals/context-relevancy

----------------------------------------

TITLE: Importing and Rendering ShowcaseGrid Component in React
DESCRIPTION: React component implementation for displaying a grid of showcase applications built with Mastra. The component is imported from a components directory and rendered directly.

LANGUAGE: jsx
CODE:
import { ShowcaseGrid } from '../../components/showcase-grid';

<ShowcaseGrid />

----------------------------------------

TITLE: Installing Dependencies
DESCRIPTION: Command to install required project dependencies using pnpm package manager

LANGUAGE: bash
CODE:
pnpm install

----------------------------------------

TITLE: Installing Dependencies with pnpm in Bash
DESCRIPTION: Command to install the project dependencies using pnpm package manager.

LANGUAGE: bash
CODE:
pnpm install

----------------------------------------

TITLE: Initializing Console Logger in TypeScript
DESCRIPTION: Creates a console-based logger for development purposes with a specified name and debug level.

LANGUAGE: typescript
CODE:
const consoleLogger = createLogger({ name: "Mastra", level: "debug" });
consoleLogger.info("App started");

----------------------------------------

TITLE: Accessing a Specific Memory Thread in Mastra using TypeScript
DESCRIPTION: This snippet demonstrates how to get an instance of a specific memory thread using its ID. This method returns a thread object for further operations.

LANGUAGE: typescript
CODE:
const thread = client.getMemoryThread("thread-id");

----------------------------------------

TITLE: Setting OpenAI API Key in Environment File
DESCRIPTION: Example of how to set the OpenAI API key in the .env file for authentication.

LANGUAGE: env
CODE:
OPENAI_API_KEY=sk-your-api-key-here

----------------------------------------

TITLE: Creating a Vector Query Tool in TypeScript
DESCRIPTION: Demonstrates the basic usage of createVectorQueryTool() function to create a semantic search tool over vector stores. It specifies the vector store, index name, and embedding model.

LANGUAGE: typescript
CODE:
import { openai } from '@ai-sdk/openai';
import { createVectorQueryTool } from "@mastra/rag";

const queryTool = createVectorQueryTool({
  vectorStoreName: "pinecone",
  indexName: "docs",
  model: openai.embedding('text-embedding-3-small'),
});

----------------------------------------

TITLE: Configuring Mastra MCP Server for MacOS/Linux in IDE JSON Config
DESCRIPTION: JSON configuration for setting up the Mastra MCP server in IDEs like Cursor or Windsurf on MacOS/Linux. This configuration uses npx to run the latest version of the @mastra/mcp-docs-server package.

LANGUAGE: json
CODE:
{
  "mcpServers": {
    "mastra": {
      "command": "npx",
      "args": ["-y", "@mastra/mcp-docs-server@latest"]
    }
  }
}

----------------------------------------

TITLE: Updating Import Statements for ElevenLabs Voice Package
DESCRIPTION: Diff showing the change in import statements from the old to the new package.

LANGUAGE: diff
CODE:
- import { ElevenLabsTTS } from '@mastra/speech-elevenlabs'
+ import { ElevenLabsVoice } from '@mastra/voice-elevenlabs'

----------------------------------------

TITLE: Configuring Mastra MCP Server for Windows in IDE JSON Config
DESCRIPTION: JSON configuration for setting up the Mastra MCP server in IDEs like Cursor or Windsurf on Windows. This configuration uses cmd to run npx and execute the latest version of the @mastra/mcp-docs-server package.

LANGUAGE: json
CODE:
{
  "mcpServers": {
    "mastra": {
      "command": "cmd",
      "args": ["/c", "npx", "-y", "@mastra/mcp-docs-server@latest"]
    }
  }
}

----------------------------------------

TITLE: Error Handling for run.resume() in TypeScript
DESCRIPTION: Demonstrates how to handle potential errors when using the run.resume() method, including cases for missing or corrupted workflow state.

LANGUAGE: typescript
CODE:
try {
  await run.resume({
    runId,
    stepId: "stepTwo",
    context: newData
  });
} catch (error) {
  if (error.message === "No snapshot found for workflow run") {
    // Handle missing workflow state
  }
  if (error.message === "Failed to parse workflow snapshot") {
    // Handle corrupted workflow state
  }
}

----------------------------------------

TITLE: Implementing Copywriter Step
DESCRIPTION: Defines the execution step for the copywriter agent. Validates input context, generates blog post content based on the provided topic, and returns the generated copy.

LANGUAGE: typescript
CODE:
const copywriterStep = new Step({
  id: "copywriterStep",
  execute: async ({ context }) => {
    if (!context?.triggerData?.topic) {
      throw new Error("Topic not found in trigger data");
    }
    const result = await copywriterAgent.generate(
      `Create a blog post about ${context.triggerData.topic}`,
    );
    console.log("copywriter result", result.text);
    return {
      copy: result.text,
    };
  },
});

----------------------------------------

TITLE: Evaluating Minimal Coverage with Completeness Metric in TypeScript
DESCRIPTION: Demonstrate evaluation of a response that covers very few elements from the input text using the Completeness metric.

LANGUAGE: typescript
CODE:
const text3 = 'The seasons include summer.';
const reference3 = 'The four seasons are spring, summer, fall, and winter.';

console.log('Example 3 - Minimal Coverage:');
console.log('Text:', text3);
console.log('Reference:', reference3);

const result3 = await metric.measure(reference3, text3);
console.log('Metric Result:', {
  score: result3.score,
  info: {
    missingElements: result3.info.missingElements,
    elementCounts: result3.info.elementCounts,
  },
});
// Example Output:
// Metric Result: {
//   score: 0.3333333333333333,
//   info: {
//     missingElements: [ 'four', 'spring', 'winter', 'be', 'fall', 'and' ],
//     elementCounts: { input: 9, output: 4 }
//   }
// }

----------------------------------------

TITLE: Implementing Editor Step
DESCRIPTION: Defines the execution step for the editor agent. Retrieves the copywriter's output, processes it through the editing agent, and returns the refined content.

LANGUAGE: typescript
CODE:
const editorStep = new Step({
  id: "editorStep",
  execute: async ({ context }) => {
    const copy = context?.getStepResult<{ copy: number }>(
      "copywriterStep",
    )?.copy;

    const result = await editorAgent.generate(
      `Edit the following blog post only returning the edited copy: ${copy}`,
    );
    console.log("editor result", result.text);
    return {
      copy: result.text,
    };
  },
});

----------------------------------------

TITLE: Workflow Execution and Status Handling
DESCRIPTION: Example of executing a workflow and handling different status states using a watch callback.

LANGUAGE: typescript
CODE:
const { runId, start, watch } = workflow.createRun();

watch(async ({ status }) => {
  switch (status) {
    case "SUSPENDED":
      // Handle suspended state
      break;
    case "COMPLETED":
      // Process results
      break;
    case "FAILED":
      // Handle error state
      break;
  }
});

await start({ triggerData: data });

----------------------------------------

TITLE: API Request Payload Format
DESCRIPTION: Example payload structure for the image metadata API endpoint

LANGUAGE: bash
CODE:
{\n  imageUrl: "" //the image url\n}

----------------------------------------

TITLE: Installing New Mastra Voice Package
DESCRIPTION: Command to install the new @mastra/voice-murf package using npm.

LANGUAGE: bash
CODE:
npm install @mastra/voice-murf

----------------------------------------

TITLE: Starting Development Server
DESCRIPTION: Command to start the Express.js development server

LANGUAGE: bash
CODE:
pnpm start

----------------------------------------

TITLE: Basic Stream Processing with Memory Masking
DESCRIPTION: Demonstrates basic usage of the agent with memory tag masking to hide working memory updates from users.

LANGUAGE: typescript
CODE:
import { randomUUID } from "crypto";
import { maskStreamTags } from "@mastra/core/utils";

// Start a conversation
const threadId = randomUUID();
const resourceId = "SOME_USER_ID";

// Add a new todo item
const response = await todoAgent.stream(
  "Add a task: Build a new feature for our app. It should take about 2 hours and needs to be done by next Friday.",
  {
    threadId,
    resourceId,
  },
);

// Process the stream, hiding working memory updates
for await (const chunk of maskStreamTags(
  response.textStream,
  "working_memory",
)) {
  process.stdout.write(chunk);
}

----------------------------------------

TITLE: Creating Publisher Agent and Mastra Instance in TypeScript
DESCRIPTION: This snippet defines the Publisher agent that coordinates the Copywriter and Editor agents. It also creates a Mastra instance with the Publisher agent. The Publisher agent uses the Anthropic Claude model and has access to both the copywriter and editor tools.

LANGUAGE: typescript
CODE:
const publisherAgent = new Agent({
  name: "publisherAgent",
  instructions:
    "You are a publisher agent that first calls the copywriter agent to write blog post copy about a specific topic and then calls the editor agent to edit the copy. Just return the final edited copy.",
  model: anthropic("claude-3-5-sonnet-20241022"),
  tools: { copywriterTool, editorTool },
});

const mastra = new Mastra({
  agents: { publisherAgent },
});

----------------------------------------

TITLE: Index Statistics Interface Definition in TypeScript
DESCRIPTION: Defines the structure of index statistics returned by the describeIndex method, including dimension, count, and distance metric information.

LANGUAGE: typescript
CODE:
interface IndexStats {
  dimension: number;
  count: number;
  metric: "cosine" | "euclidean" | "dotproduct";
}

----------------------------------------

TITLE: Setting Environment Variables for RAG System
DESCRIPTION: Sets up environment variables for OpenAI API key and PostgreSQL connection string, which are essential for the RAG system to function.

LANGUAGE: bash
CODE:
OPENAI_API_KEY=your_openai_api_key_here
POSTGRES_CONNECTION_STRING=your_connection_string_here

----------------------------------------

TITLE: Creating Related Documentation Links
DESCRIPTION: Shows how to add cross-references to related documentation pages.

LANGUAGE: markdown
CODE:
### Related

- [Engine Configuration](/guide/reference/engine.mdx)
- [Agent Class Reference](/guide/reference/agent.mdx)

----------------------------------------

TITLE: Partial Word Inclusion Example in TypeScript
DESCRIPTION: Shows the usage of WordInclusionMetric when only some of the specified words are present in the output. It initializes the metric with programming languages and logs the result for partial inclusion.

LANGUAGE: typescript
CODE:
const words2 = ['python', 'javascript', 'typescript', 'rust'];
const metric2 = new WordInclusionMetric(words2);

const input2 = 'What programming languages do you know?';
const output2 = 'I know python and javascript very well.';

const result2 = await metric2.measure(input2, output2);
console.log('Metric Result:', {
  score: result2.score,
  info: result2.info,
});
// Example Output:
// Metric Result: { score: 0.5, info: { totalWords: 4, matchedWords: 2 } }

----------------------------------------

TITLE: Detailed Example with Analysis Output in TypeScript
DESCRIPTION: Shows a complete example of using TextualDifferenceMetric with sample input texts and explains the structure of the returned analysis object including confidence, ratio, changes, and length difference metrics.

LANGUAGE: typescript
CODE:
import { TextualDifferenceMetric } from "@mastra/evals/nlp";

const metric = new TextualDifferenceMetric();

const result = await metric.measure(
  "Hello world! How are you?",
  "Hello there! How is it going?"
);

// Example output:
// {
//   score: 0.65,
//   info: {
//     confidence: 0.95,
//     ratio: 0.65,
//     changes: 2,
//     lengthDiff: 0.05
//   }
// }

----------------------------------------

TITLE: Evaluating Partial Keyword Coverage in TypeScript
DESCRIPTION: This code example shows how to use the KeywordCoverageMetric to evaluate a response that includes some, but not all, keywords from the input. It demonstrates the calculation of a partial coverage score.

LANGUAGE: typescript
CODE:
const input2 = 'TypeScript offers interfaces, generics, and type inference';
const output2 = 'TypeScript provides type inference and some advanced features';

console.log('Example 2 - Partial Coverage:');
console.log('Input:', input2);
console.log('Output:', output2);

const result2 = await metric.measure(input2, output2);
console.log('Metric Result:', {
  score: result2.score,
  info: {
    totalKeywords: result2.info.totalKeywords,
    matchedKeywords: result2.info.matchedKeywords,
  },
});
// Example Output:
// Metric Result: { score: 0.5, info: { totalKeywords: 6, matchedKeywords: 3 } }

----------------------------------------

TITLE: Setting OpenAI API Key
DESCRIPTION: Environment variable configuration for OpenAI API key

LANGUAGE: env
CODE:
OPENAI_API_KEY=sk-your-api-key-here

----------------------------------------

TITLE: Accessing Trigger Data in Mastra Workflows
DESCRIPTION: Illustrates how to access and use the original trigger data that started a Mastra workflow.

LANGUAGE: typescript
CODE:
import { Step, Workflow } from "@mastra/core/workflows";
import { z } from "zod";

const triggerSchema = z.object({
  customerId: z.string(),
  orderItems: z.array(z.string()),
});

type TriggerType = z.infer<typeof triggerSchema>;

const processOrderStep = new Step({
  id: "processOrder",
  execute: async ({ context }) => {
    // Access trigger data with type safety
    const triggerData = context.getStepResult<TriggerType>('trigger');

    return {
      customerId: triggerData?.customerId,
      itemCount: triggerData?.orderItems.length || 0,
      status: "processing"
    };
  },
});

const workflow = new Workflow({
  name: "order-workflow",
  triggerSchema,
});

workflow
  .step(processOrderStep)
  .commit();

----------------------------------------

TITLE: Installing Dependencies with pnpm
DESCRIPTION: Command to install project dependencies using pnpm package manager.

LANGUAGE: bash
CODE:
pnpm install

----------------------------------------

TITLE: Simple Path Comparison Condition in Mastra Workflows
DESCRIPTION: Illustrates how to use a simple path comparison to specify a condition for step execution in a Mastra workflow.

LANGUAGE: typescript
CODE:
myWorkflow.step(
  new Step({
    id: "processData",
    execute: async ({ context }) => {
      // Action logic
    },
  }),
  {
    when: {
      "fetchData.status": "success",
    },
  },
);

----------------------------------------

TITLE: Importing Dependencies for Mastra Context Relevancy Evaluation
DESCRIPTION: Imports the necessary dependencies from the OpenAI SDK and Mastra evals library for context relevancy evaluation.

LANGUAGE: typescript
CODE:
import { openai } from '@ai-sdk/openai';
import { ContextRelevancyMetric } from '@mastra/evals/llm';

----------------------------------------

TITLE: Evaluating Partial Coverage with Completeness Metric in TypeScript
DESCRIPTION: Demonstrate evaluation of a response that covers some elements from the input text using the Completeness metric.

LANGUAGE: typescript
CODE:
const text2 = 'The primary colors are red and blue.';
const reference2 = 'The primary colors are red, blue, and yellow.';

console.log('Example 2 - Partial Coverage:');
console.log('Text:', text2);
console.log('Reference:', reference2);

const result2 = await metric.measure(reference2, text2);
console.log('Metric Result:', {
  score: result2.score,
  info: {
    missingElements: result2.info.missingElements,
    elementCounts: result2.info.elementCounts,
  },
});
// Example Output:
// Metric Result: { score: 0.875, info: { missingElements: ['yellow'], elementCounts: { input: 8, output: 7 } } }

----------------------------------------

TITLE: Initializing NetlifyDeployer with Mastra Configuration
DESCRIPTION: Example showing how to initialize a Mastra application with NetlifyDeployer, including required configuration parameters for Netlify deployment.

LANGUAGE: typescript
CODE:
import { Mastra } from '@mastra/core';
import { NetlifyDeployer } from '@mastra/deployer-netlify';

const mastra = new Mastra({
  deployer: new NetlifyDeployer({
    scope: 'your-team-slug',
    projectName: 'your-project-name',
    token: 'your-netlify-token'
  }),
  // ... other Mastra configuration options
});

----------------------------------------

TITLE: Setting Environment Variables for OpenAI API in Bash
DESCRIPTION: Sets up the OPENAI_API_KEY environment variable for authentication with the OpenAI API.

LANGUAGE: bash
CODE:
OPENAI_API_KEY=your_api_key_here

----------------------------------------

TITLE: Upserting Embeddings with Metadata in TypeScript
DESCRIPTION: Demonstrates how to upsert embeddings along with their basic metadata into a vector store.

LANGUAGE: typescript
CODE:
// Store embeddings with their corresponding metadata
await store.upsert({
  indexName: 'my-collection',  // index name
  vectors: embeddings,       // array of embedding vectors
  metadata: chunks.map(chunk => ({
    text: chunk.text,  // The original text content
    id: chunk.id       // Optional unique identifier
  }))
});

----------------------------------------

TITLE: Importing Tone Consistency Metric in TypeScript
DESCRIPTION: Import the ToneConsistencyMetric from the Mastra evals package for NLP tasks.

LANGUAGE: typescript
CODE:
import { ToneConsistencyMetric } from '@mastra/evals/nlp';

----------------------------------------

TITLE: Basic Text Streaming Example
DESCRIPTION: Demonstrates basic usage of the stream() method for text streaming with a simple user message and console output.

LANGUAGE: typescript
CODE:
const stream = await myAgent.stream([
  { role: "user", content: "Tell me a story." }
]);

for await (const chunk of stream.textStream) {
  process.stdout.write(chunk);
}

----------------------------------------

TITLE: Creating an Agent with Working Memory in Mastra
DESCRIPTION: Demonstrates how to create an Agent instance with OpenAI's GPT model and attach a memory system for maintaining conversational context.

LANGUAGE: typescript
CODE:
import { openai } from "@ai-sdk/openai";

const agent = new Agent({
  name: "Memory agent",
  instructions: "You are a helpful AI assistant.",
  model: openai("gpt-4o-mini"),
  memory, // or toolCallMemory
});

----------------------------------------

TITLE: Implementing Mastra Agent Tests with Vitest
DESCRIPTION: Example test implementation for evaluating agent tone consistency using Vitest framework and Mastra core evaluation functions.

LANGUAGE: typescript
CODE:
import { describe, it, expect } from 'vitest';
import { evaluate } from '@mastra/core/eval';
import { myAgent } from './index';

describe('My Agent', () => {
  it('should validate tone consistency', async () => {
    const metric = new ToneConsistencyMetric();
    const result = await evaluate(myAgent, 'Hello, world!', metric)

    expect(result.score).toBe(1);
  });
});

----------------------------------------

TITLE: Importing Dependencies for Mastra Multi-Agent Workflow
DESCRIPTION: Import required packages including OpenAI and Anthropic SDKs, Mastra core components, and Zod for schema validation.

LANGUAGE: typescript
CODE:
import { openai } from "@ai-sdk/openai";
import { anthropic } from "@ai-sdk/anthropic";
import { Agent } from "@mastra/core/agent";
import { Step, Workflow } from "@mastra/core/workflows";
import { z } from "zod";

----------------------------------------

TITLE: Enabling Public Directory Copying
DESCRIPTION: Enables copying of the public directory if it exists during project creation.

LANGUAGE: markdown
CODE:
- da8d9bb: Enable public dir copying if it exists

----------------------------------------

TITLE: Vercel Configuration in JSON
DESCRIPTION: Defines the automatically generated vercel.json configuration file used by the VercelDeployer. It specifies the build settings, Node.js version, and routing rules for the Mastra application.

LANGUAGE: json
CODE:
{
  "version": 2,
  "installCommand": "npm install --omit=dev",
  "builds": [
    {
      "src": "index.mjs",
      "use": "@vercel/node",
      "config": {
        "includeFiles": ["**"]
      }
    }
  ],
  "routes": [
    {
      "src": "/(.*)",
      "dest": "index.mjs"
    }
  ]
}

----------------------------------------

TITLE: Implementing ChromaDB Vector Store Operations
DESCRIPTION: Demonstrates the complete workflow of creating a vector store instance, creating an index, upserting vectors with documents, and performing vector queries with filters. Includes authentication setup and various configuration options.

LANGUAGE: typescript
CODE:
import { ChromaVector } from '@mastra/chroma';

const vectorStore = new ChromaVector({
  path: 'http://localhost:8000',  // ChromaDB server URL
  auth: {                         // Optional authentication
    provider: 'token',
    credentials: 'your-token'
  }
});

// Create a new collection
await vectorStore.createIndex({ indexName: 'my-collection', dimension: 1536, metric: 'cosine' });

// Add vectors with documents
const vectors = [[0.1, 0.2, ...], [0.3, 0.4, ...]];
const metadata = [{ text: 'doc1' }, { text: 'doc2' }];
const documents = ['full text 1', 'full text 2'];
const ids = await vectorStore.upsert({
  indexName: 'my-collection',
  vectors,
  metadata,
  documents, // store original text
});

// Query vectors with document filtering
const results = await vectorStore.query({
  indexName: 'my-collection',
  queryVector: [0.1, 0.2, ...],
  topK: 10, // topK
  filter: { text: { $eq: 'doc1' } }, // metadata filter
  includeVector: false, // includeVector
  documentFilter: { $contains: 'specific text' } // document content filter
});

----------------------------------------

TITLE: Configuring and Using Mastra Client SDK in TypeScript
DESCRIPTION: This snippet demonstrates how to configure the Mastra Client SDK to point to a local server and interact with a local agent. It shows the setup of the client and an example of generating a response from an agent.

LANGUAGE: typescript
CODE:
import { MastraClient } from "@mastra/client-js";

const client = new MastraClient({
  baseUrl: "http://localhost:4111",
});

// Example: Interact with a local agent
const agent = client.getAgent("my-agent");
const response = await agent.generate({
  messages: [{ role: "user", content: "Hello!" }],
});

----------------------------------------

TITLE: Mapping Between Steps in Mastra Workflow
DESCRIPTION: This example shows how to map data from one step to another in a Mastra workflow. It defines two steps: one that generates data and another that processes the data from the first step.

LANGUAGE: typescript
CODE:
import { Step, Workflow } from "@mastra/core/workflows";
import { z } from "zod";

// Step 1: Generate data
const generateData = new Step({
  id: "generateData",
  outputSchema: z.object({
    nested: z.object({
      value: z.string(),
    }),
  }),
  execute: async () => {
    return {
      nested: {
        value: "step1-data"
      }
    };
  },
});

// Step 2: Process the data from step 1
const processData = new Step({
  id: "processData",
  inputSchema: z.object({
    previousValue: z.string(),
  }),
  execute: async ({ context }) => {
    // previousValue will be available because of the variable mapping
    const { previousValue } = context.inputData;

    return {
      result: `Processed: ${previousValue}`
    };
  },
});

// Create the workflow
const workflow = new Workflow({
  name: "step-mapping",
});

// Map data from step1 to step2
workflow
  .step(generateData)
  .then(processData, {
    variables: {
      // Map the nested.value property from generateData's output
      previousValue: { step: generateData, path: 'nested.value' },
    }
  })
  .commit();

----------------------------------------

TITLE: Accessing Specific Tool in TypeScript
DESCRIPTION: Gets an instance of a specific tool using its tool ID through the client interface.

LANGUAGE: typescript
CODE:
const tool = client.getTool("tool-id");

----------------------------------------

TITLE: Defining Mastra Workflow Steps with Multiple Suspension Points
DESCRIPTION: This example shows how to define multiple workflow steps with suspend capability. It includes two steps: promptAgentStep and improveResponseStep, both of which can suspend execution based on certain conditions.

LANGUAGE: typescript
CODE:
const promptAgentStep = new Step({
  id: 'promptAgent',
  execute: async ({ context, suspend }) => {
    if (needHumanInput) {
      await suspend({ requestReason: 'Need human input for prompt' });
      return { modelOutput: context.userInput };
    }
    return { modelOutput: 'AI generated output' };
  },
  outputSchema: z.object({ modelOutput: z.string() }),
});

const improveResponseStep = new Step({
  id: 'improveResponse',
  execute: async ({ context, suspend }) => {
    if (needFurtherRefinement) {
      await suspend();
      return { improvedOutput: context.refinedOutput };
    }
    return { improvedOutput: 'Improved output' };
  },
  outputSchema: z.object({ improvedOutput: z.string() }),
});

const workflow = new Workflow({
  name: 'multi-suspend-workflow',
  triggerSchema: z.object({ input: z.string() }),
});

workflow
  .step(getUserInput)
  .then(promptAgentStep)
  .then(evaluateTone)
  .then(improveResponseStep)
  .then(evaluateImproved)
  .commit();

----------------------------------------

TITLE: Creating Vector Index in Mastra (TypeScript)
DESCRIPTION: Create a new vector index with specified parameters such as name, dimension, and similarity metric.

LANGUAGE: typescript
CODE:
const result = await vector.createIndex({
  indexName: "new-index",
  dimension: 128,
  metric: "cosine", // 'cosine', 'euclidean', or 'dotproduct'
});

----------------------------------------

TITLE: Installing @mastra/pinecone Package using PNPM
DESCRIPTION: Command to install the @mastra/pinecone package using the PNPM package manager.

LANGUAGE: bash
CODE:
pnpm add @mastra/pinecone

----------------------------------------

TITLE: Basic Usage of ContextualRecallMetric in TypeScript
DESCRIPTION: Demonstrates basic initialization and usage of the ContextualRecallMetric class to evaluate an LLM's response against provided context. Shows how to configure the metric with context items and measure response completeness.

LANGUAGE: typescript
CODE:
import { openai } from "@ai-sdk/openai";
import { ContextualRecallMetric } from "@mastra/evals/llm";

// Configure the model for evaluation
const model = openai("gpt-4o-mini");

const metric = new ContextualRecallMetric(model, {
  context: [
    "Product features: cloud synchronization capability",
    "Offline mode available for all users",
    "Supports multiple devices simultaneously",
    "End-to-end encryption for all data"
  ]
});

const result = await metric.measure(
  "What are the key features of the product?",
  "The product includes cloud sync, offline mode, and multi-device support.",
);

console.log(result.score); // Score from 0-1

----------------------------------------

TITLE: Adding Dynamic Server Configurations in TypeScript
DESCRIPTION: Shows how to dynamically add and validate server configurations using the MCPConfiguration class, including user input and storage adapters.

LANGUAGE: typescript
CODE:
const configuration = new McpConfiguration({
	id: "validation-example",
	registry,
	storage: new StorageAdapter(),
})

const server = await registry.getServerDefinition({
	id: "git-ref",
})

const userInput = await buildServerUI(server.schema)

await configuration.add({
	server,
	config: userInput,
})

----------------------------------------

TITLE: Updating Imports for Mastra Voice Package
DESCRIPTION: Diff showing how to update the import statement from the old package to the new one.

LANGUAGE: diff
CODE:
- import { MurfTTS } from '@mastra/speech-murf'
+ import { MurfVoice } from '@mastra/voice-murf'

----------------------------------------

TITLE: Implementing Tree of Thought Problem Solving in TypeScript
DESCRIPTION: Demonstrates multi-branch problem solving approach considering technical, UX, and business aspects simultaneously. Uses a structured thinking process with parallel solution paths.

LANGUAGE: typescript
CODE:
type ProblemSolvingVars = {
  problem: string;
};

const problemSolver = createPrompt<ProblemSolvingVars>('Solve complex problem', {
  persona: 'Problem Solver',
  outputFormat: 'markdown',
})
  .text('Solve this problem:\n\n{{problem}}')
  .thinking({
    branches: {
      'Technical Solution': [
        'Analyze technical requirements',
        'Consider implementation options',
        'Evaluate technical tradeoffs',
      ],
      'User Experience': ['Identify user needs', 'Design user interactions', 'Consider accessibility'],
      'Business Impact': ['Assess costs', 'Evaluate timeline', 'Consider scalability'],
    },
  });

----------------------------------------

TITLE: Updating imports from @mastra/speech-google to @mastra/voice-google in TypeScript
DESCRIPTION: Example of how to update the import statement in TypeScript code. This change replaces the old GoogleTTS import with the new GoogleVoice import from the new package.

LANGUAGE: typescript
CODE:
// Old
import { GoogleTTS } from '@mastra/speech-google';
// New
import { GoogleVoice } from '@mastra/voice-google';

----------------------------------------

TITLE: Installing Project Dependencies with Git
DESCRIPTION: Commands for cloning the repository and navigating to the project directory

LANGUAGE: bash
CODE:
git clone https://github.com/mastra-ai/mastra
cd examples/basics/evals/custom/word-inclusion

----------------------------------------

TITLE: Installing @mastra/speech-replicate Package via npm
DESCRIPTION: Command to install the @mastra/speech-replicate package using npm. This is required before using the module in your project.

LANGUAGE: bash
CODE:
npm install @mastra/speech-replicate

----------------------------------------

TITLE: Installing Mastra Client via npm
DESCRIPTION: Command to install the Mastra Client library using npm package manager.

LANGUAGE: bash
CODE:
npm install @mastra/client-js

----------------------------------------

TITLE: Setting Environment Variable for Replicate API Token
DESCRIPTION: Configuration step to set the REPLICATE_API_TOKEN environment variable. This token is required for authentication with the Replicate API.

LANGUAGE: bash
CODE:
REPLICATE_API_TOKEN=your_api_token

----------------------------------------

TITLE: Configuring Upstash Redis Logger in TypeScript
DESCRIPTION: Sets up a remote log drain using Upstash Redis. Requires the UpstashTransport from @mastra/loggers/upstash and environment variables for Upstash URL and token.

LANGUAGE: typescript
CODE:
import { UpstashTransport } from "@mastra/loggers/upstash";

const logger = createLogger({
  name: "Mastra",
  transports: {
    upstash: new UpstashTransport({
      listName: "production-logs",
      upstashUrl: process.env.UPSTASH_URL!,
      upstashToken: process.env.UPSTASH_TOKEN!,
    }),
  },
  level: "info",
});

logger.info({
  message: "User signed in",
  destinationPath: "auth",
  type: "AGENT",
  runId: "run_123",
});

----------------------------------------

TITLE: Installing New Speech Package with npm
DESCRIPTION: Command to install the new '@mastra/voice-speechify' package using npm.

LANGUAGE: bash
CODE:
npm install @mastra/voice-speechify

----------------------------------------

TITLE: Configuring Cloudflare Worker Routes
DESCRIPTION: Example of route configuration for directing traffic to Cloudflare Workers based on URL patterns and domains.

LANGUAGE: typescript
CODE:
const routes = [
  {
    pattern: 'api.example.com/*',
    zone_name: 'example.com',
    custom_domain: true,
  },
  {
    pattern: 'example.com/api/*',
    zone_name: 'example.com',
  },
];

----------------------------------------

TITLE: Database Store Initialization in TypeScript
DESCRIPTION: Shows how to initialize the Upstash Redis store for database operations using REST URL and token credentials.

LANGUAGE: typescript
CODE:
import { UpstashStore } from '@mastra/upstash';

const store = new UpstashStore({
  url: process.env.UPSTASH_REDIS_REST_URL,
  token: process.env.UPSTASH_REDIS_REST_TOKEN,
});

----------------------------------------

TITLE: Reference Condition for Workflow.until() in TypeScript
DESCRIPTION: Demonstrates how to use a reference-based condition with comparison operators in the `.until()` method. This example stops the loop when a value is greater than or equal to 10.

LANGUAGE: typescript
CODE:
workflow
  .step(incrementStep)
  .until(
    {
      ref: { step: incrementStep, path: 'value' },
      query: { $gte: 10 }, // Stop when value is greater than or equal to 10
    },
    incrementStep
  )
  .then(finalStep);

----------------------------------------

TITLE: Vector Store Operations in TypeScript
DESCRIPTION: Demonstrates initialization of UpstashVector client and performing vector operations including upserting vectors with metadata and querying vectors with filters. Shows configuration of connection parameters and basic CRUD operations.

LANGUAGE: typescript
CODE:
import { UpstashVector } from '@mastra/upstash';

const vectorStore = new UpstashVector({
  url: process.env.UPSTASH_VECTOR_REST_URL,
  token: process.env.UPSTASH_VECTOR_TOKEN
});

// Add vectors
const vectors = [[0.1, 0.2, ...], [0.3, 0.4, ...]];
const metadata = [{ text: 'doc1' }, { text: 'doc2' }];
const ids = await vectorStore.upsert({
  indexName: 'my-namespace',
  vectors,
  metadata
});

// Query vectors
const results = await vectorStore.query({
  indexName: 'my-namespace',
  queryVector: [0.1, 0.2, ...],
  topK: 10,
  filter: { text: { $eq: 'doc1' } },
  includeVector: false
});

----------------------------------------

TITLE: Configuring Basic Branching Paths in Mastra Workflow
DESCRIPTION: Demonstrates how to configure a workflow with two parallel branches that merge at a final step. Shows the usage of .after() and .then() methods to create the branching logic and execute the workflow with sample input.

LANGUAGE: typescript
CODE:
myWorkflow
  .step(stepOne)
  .then(stepTwo)

  .after(stepOne)
  .step(stepThree)
  .then(stepFour)

  .after([stepTwo, stepFour])
  .step(finalStep)
  .commit();

const { start } = myWorkflow.createRun();

const result = await start({ triggerData: { inputValue: 3 } });
console.log(result.steps.finalStep.output.summary);

----------------------------------------

TITLE: Installing @mastra/deployer-vercel package using pnpm
DESCRIPTION: Command to install the @mastra/deployer-vercel package using the pnpm package manager.

LANGUAGE: bash
CODE:
pnpm add @mastra/deployer-vercel

----------------------------------------

TITLE: Implementing Role-based Security Code Review in TypeScript
DESCRIPTION: Creates a security-focused code review prompt using a Senior Security Engineer persona. Includes structured review steps and constraints for security analysis.

LANGUAGE: typescript
CODE:
type CodeReviewVars = {
  code: string;
  focus: 'security' | 'performance' | 'architecture';
};

const securityReviewPrompt = createPrompt<CodeReviewVars>('Review code security', {
  persona: 'Senior Security Engineer',
  style: 'thorough',
  tone: 'professional',
  outputFormat: 'markdown',
})
  .text('Review this code for {{focus}} concerns:\n\n{{code}}')
  .constraints([
    'Focus on security best practices',
    'Identify potential vulnerabilities',
    'Suggest secure alternatives',
    'Reference relevant security standards',
  ])
  .thinking({
    steps: [
      'Identify sensitive operations',
      'Check for common vulnerabilities',
      'Evaluate security controls',
      'Assess compliance requirements',
      'Propose security improvements',
    ],
  });

----------------------------------------

TITLE: Embedding Generation and Storage
DESCRIPTION: Creating embeddings for document chunks and storing them in PgVector database with metadata.

LANGUAGE: typescript
CODE:
const { embeddings } = await embedMany({
  values: chunks.map(chunk => chunk.text),
  model: openai.embedding("text-embedding-3-small"),
});

const vectorStore = mastra.getVector("pgVector");

await vectorStore.createIndex({
  indexName: "embeddings",
  dimension: 1536,
});

await vectorStore.upsert({
  indexName: "embeddings",
  vectors: embeddings,
  metadata: chunks?.map((chunk: any) => ({ text: chunk.text })),
});

----------------------------------------

TITLE: Configuring Prompt Settings in TypeScript
DESCRIPTION: This snippet demonstrates how to configure various settings for a prompt, including persona, style, tone, output format, and message type. It shows how these settings can shape the model's approach to the task.

LANGUAGE: typescript
CODE:
const explainPrompt = createPrompt('Explain this code', {
  // Who the model should act as
  persona: 'JavaScript Teacher',

  // How to approach the explanation
  style: 'beginner-friendly',

  // Communication style
  tone: 'encouraging',

  // Expected response format
  outputFormat: 'markdown',

  // System or user message
  as: 'system',
});

// Usage
const explanation = explainPrompt.toString();

----------------------------------------

TITLE: Installing @mastra/voice-elevenlabs via npm
DESCRIPTION: This command installs the @mastra/voice-elevenlabs package using npm.

LANGUAGE: bash
CODE:
npm install @mastra/voice-elevenlabs

----------------------------------------

TITLE: Markdown Changelog Documentation
DESCRIPTION: Structured changelog entries documenting version updates and dependency changes for the workflow-with-separate-steps package and its core dependency @mastra/core.

LANGUAGE: markdown
CODE:
# workflow-with-separate-steps

## 0.0.1-alpha.2

### Patch Changes

- Updated dependencies [e9d1b47]
  - @mastra/core@0.2.0-alpha.85

----------------------------------------

TITLE: Mastra Deployer Configuration
DESCRIPTION: TypeScript configuration example showing how to set up the deployer type and environment-specific options.

LANGUAGE: typescript
CODE:
const mastra = new Mastra({
  deployer: {
    type: 'HONO', // Target environment (HONO, EXPRESS, NEXT)
    // Environment-specific options
  },
});

----------------------------------------

TITLE: Displaying Changelog in Markdown
DESCRIPTION: A markdown formatted changelog showing version history from 0.0.1-alpha.0 through multiple alpha releases, documenting dependency updates from various @mastra packages.

LANGUAGE: markdown
CODE:
# openapi-spec-writer

## 0.0.1

## 0.0.1-alpha.4

### Patch Changes

- Updated dependencies [e9d1b47]
  - @mastra/core@0.2.0-alpha.85
  - @mastra/firecrawl@1.0.4-alpha.79
  - @mastra/github@1.0.3-alpha.70
  - @mastra/engine@0.0.5-alpha.80
  - @mastra/loggers@0.0.1-alpha.18
  - @mastra/rag@0.0.2-alpha.77

----------------------------------------

TITLE: Installing New PlayAI Voice Package
DESCRIPTION: Command to install the new @mastra/voice-playai package using npm.

LANGUAGE: bash
CODE:
npm install @mastra/voice-playai

----------------------------------------

TITLE: Installing Mastra CLI with NPM
DESCRIPTION: Global installation command for the Mastra CLI tool using npm package manager.

LANGUAGE: bash
CODE:
npm i -g mastra

----------------------------------------

TITLE: Validating User Input for MCP Server Configuration in TypeScript
DESCRIPTION: Shows how to use a server definition to build a user interface, collect user input, and validate the configuration before use.

LANGUAGE: typescript
CODE:
const userInput = await buildServerUI(stripeServer.schema)

const validConfig = stripeServer.parseConfig(userInput) // will throw if config is not valid

----------------------------------------

TITLE: Configuring Custom Storage Instance in TypeScript
DESCRIPTION: Example of directly initializing DefaultStorage with custom configuration, supporting both file-based and in-memory storage options. Shows storage initialization process.

LANGUAGE: typescript
CODE:
import { DefaultStorage } from '@mastra/core/storage';

const storage = new DefaultStorage({
  name: 'my-storage',
  config: {
    url: 'file:my-database.db', // or 'file::memory:' for in-memory
  },
});

// Storage will auto-initialize tables on first use
await storage.init();

----------------------------------------

TITLE: Running Mastra Text Chunking Example
DESCRIPTION: This command executes the Mastra text chunking example using pnpm.

LANGUAGE: bash
CODE:
pnpm start

----------------------------------------

TITLE: Log Message Format Interface in TypeScript
DESCRIPTION: Defines the structure of log messages used by both FileTransport and UpstashTransport. It includes fields for timestamp, log level, message content, and optional run ID for grouping logs.

LANGUAGE: typescript
CODE:
interface BaseLogMessage {
  time?: number; // Timestamp (auto-injected if not present)
  level?: string; // Log level
  msg?: {
    // Message content
    runId?: string; // Optional run ID for grouping logs
    [key: string]: any;
  };
  [key: string]: any;
}

----------------------------------------

TITLE: Implementing Weather Tool in Mastra
DESCRIPTION: Implementation of a weather tool using Mastra's tool creation API, including weather data fetching and condition mapping functionality.

LANGUAGE: typescript
CODE:
import { createTool } from "@mastra/core/tools";
import { z } from "zod";

interface WeatherResponse {
  current: {
    time: string;
    temperature_2m: number;
    apparent_temperature: number;
    relative_humidity_2m: number;
    wind_speed_10m: number;
    wind_gusts_10m: number;
    weather_code: number;
  };
}

export const weatherTool = createTool({
  id: "get-weather",
  description: "Get current weather for a location",
  inputSchema: z.object({
    location: z.string().describe("City name"),
  }),
  outputSchema: z.object({
    temperature: z.number(),
    feelsLike: z.number(),
    humidity: z.number(),
    windSpeed: z.number(),
    windGust: z.number(),
    conditions: z.string(),
    location: z.string(),
  }),
  execute: async ({ context }) => {
    return await getWeather(context.location);
  },
});

----------------------------------------

TITLE: Markdown Changelog Format
DESCRIPTION: Structured changelog entries documenting version updates and changes, organized by version number and change type (Minor Changes, Patch Changes)

LANGUAGE: markdown
CODE:
# docs

## 0.1.2

### Patch Changes

- e3212c4: Removes references to unimplemented workflow APIs
- 82197f8: Update PG vector to allow for multiple index types
- 99dcdb5: Inject primitives into condition function, and renames getStepPayload to getStepResult.
- 2e0fe6d: Added example and updated docs

----------------------------------------

TITLE: Generating Integration in Bash
DESCRIPTION: This command generates a new integration based on the added configuration. It should be run after adding a new integration object to the sources array.

LANGUAGE: bash
CODE:
pnpm run generate:integration