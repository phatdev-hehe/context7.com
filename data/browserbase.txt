TITLE: Initializing Playwright Session with TypeScript
DESCRIPTION: Creates and manages a browser session using Playwright with TypeScript. Connects to browserbase via CDP, navigates to a page, and properly closes the session.

LANGUAGE: typescript
CODE:
import { chromium } from "playwright-core";
(async () => {
  const browser = await chromium.connectOverCDP(
    `wss://connect.browserbase.com?apiKey=${process.env.BROWSERBASE_API_KEY}`,
  );
  const defaultContext = browser.contexts()[0];
  const page = defaultContext.pages()[0];

  await page.goto("https://www.browserbase.com");

  await page.close();
  await browser.close();
})().catch((error) => console.error(error.message));

----------------------------------------

TITLE: Initializing Playwright Browser Session in TypeScript
DESCRIPTION: Establishes a CDP connection to Browserbase using Playwright in TypeScript. Creates a browser instance, retrieves the default context and page, performs a sample navigation, and properly closes the session.

LANGUAGE: typescript
CODE:
import { chromium } from "playwright-core";

(async () => {
  const browser = await chromium.connectOverCDP(
    `wss://connect.browserbase.com?apiKey=${process.env.BROWSERBASE_API_KEY}`
  );

  //Getting the default context to ensure the sessions are recorded.
  const defaultContext = browser.contexts()[0];
  const page = defaultContext.pages()[0];

  await page.goto("https://browserbase.com/");
  await page.close();
  await browser.close();
})().catch((error) => console.error(error.message));

----------------------------------------

TITLE: Initializing Browserbase Client in Python
DESCRIPTION: Creates a Browserbase client instance using an API key. The API key is retrieved from an environment variable if not provided directly.

LANGUAGE: python
CODE:
from browserbase import Browserbase

# Init the SDK
browserbase = Browserbase(os.environ["BROWSERBASE_API_KEY"])

----------------------------------------

TITLE: Initializing Browserbase Client in TypeScript
DESCRIPTION: Creates a Browserbase client instance using the SDK.

LANGUAGE: typescript
CODE:
import { Browserbase } from "@browserbasehq/sdk";

// Init the SDK
const browserbase = new Browserbase();

----------------------------------------

TITLE: Connecting to BrowserBase with Playwright (TypeScript)
DESCRIPTION: This snippet demonstrates how to connect to a BrowserBase session using Playwright in TypeScript. It uses the WebSocket API with authentication via the apiKey query parameter.

LANGUAGE: javascript
CODE:
import { chromium } from "playwright-core";

(async () => {
  const browser = await chromium.connectOverCDP(
    `wss://connect.browserbase.com?apiKey=${process.env.BROWSERBASE_API_KEY}`,
  );

  // ...
})();

----------------------------------------

TITLE: Remote Controlling Browser Session with Playwright (TypeScript)
DESCRIPTION: This code snippet demonstrates how to create a Browserbase session, connect to it using Playwright, and verify if a custom Chrome extension is loaded. It navigates to the Chrome extensions page and checks for a specific heading.

LANGUAGE: typescript
CODE:
import { chromium } from "playwright-core";
(async () => {
  const session = await createSession();
  // Specify the URL and expected title for the test
  const url = "chrome://extensions";

  // Launch a browser instance
  const browser = await chromium.connectOverCDP(
    `wss://connect.browserbase.com?apiKey=${process.env.BROWSERBASE_API_KEY}&sessionId=${session.id}`,
  );

  // Create a new page
  const page = await browser.newPage();
  // Navigate to the URL
  await page.goto(url);
  const element = await page
    .getByRole("heading", { name: "My custom chrome extension" })
    .textContent();

  // Ensure the browser is closed after the test
  await browser.close();
})().catch((error) => console.error(error.message));

----------------------------------------

TITLE: Creating Selenium WebDriver Session in TypeScript
DESCRIPTION: TypeScript implementation for creating and managing a Selenium WebDriver session with Browserbase. Includes session creation, HTTP agent configuration, and Chrome WebDriver setup.

LANGUAGE: typescript
CODE:
import http from "http";
import webdriver from "selenium-webdriver";
import chrome from "selenium-webdriver/chrome";

async function createSession() {
  const response = await fetch(`https://www.browserbase.com/v1/sessions`, {
    method: 'POST',
    headers: {
      "x-bb-api-key": process.env.BROWSERBASE_API_KEY,
      "Content-Type": "application/json"
    },
    body: JSON.stringify({ projectId: process.env.BROWSERBASE_PROJECT_ID })
  });
  return await response.json();
}


(async () => {
  const session = await createSession();

  const customHttpAgent = new http.Agent({});
  (customHttpAgent as any).addRequest = (req: any, options: any) => {
    // Session ID needs to be set here
    req.setHeader("session-id", session.id);
    req.setHeader("x-bb-api-key", process.env.BROWSERBASE_API_KEY);
    (http.Agent.prototype as any).addRequest.call(customHttpAgent, req, options);
  };

  // We set a debuggerAddress so the server-side WebDriver can connect.
  const options = new chrome.Options();
  options.debuggerAddress("localhost:9223");

  const driver = new webdriver.Builder()
    .forBrowser("chrome")
    .setChromeOptions(options)
    .usingHttpAgent(customHttpAgent)
    .usingServer(
      `http://connect.browserbase.com/webdriver` // Selenium only supports HTTP
    )
    .build();

  await driver.get("https://www.browserbase.com");

  // Make sure to quit the driver so your session is ended!
  await driver.quit();
})().catch((error) => console.error(error.message));

----------------------------------------

TITLE: Connecting Puppeteer to Browserbase
DESCRIPTION: Demonstrates how to establish a connection to Browserbase using Puppeteer, create a new page, navigate to a URL, and properly close the browser session. Requires puppeteer-core package and a valid BROWSERBASE_API_KEY environment variable.

LANGUAGE: typescript
CODE:
import puppeteer from "puppeteer-core";

(async () => {
  const browser = await puppeteer.connect({
    browserWSEndpoint:
    `wss://connect.browserbase.com?apiKey=${process.env.BROWSERBASE_API_KEY}`
  });

  const page = await browser.newPage();

  await page.goto("https://www.browserbase.com");
  await page.close();
  await browser.close();
})().catch((error) => console.error(error.message));

----------------------------------------

TITLE: Configuring Proxies with Browser Automation
DESCRIPTION: Examples showing how to enable proxy functionality across different automation frameworks. Demonstrates connecting to Browserbase with proxy enabled using the enableProxy parameter.

LANGUAGE: typescript
CODE:
import { chromium } from "playwright-core";

(async () => {
  const browser = await chromium.connectOverCDP(
    `wss://connect.browserbase.com?apiKey=${process.env.BROWSERBASE_API_KEY}&enableProxy=true`,
  );

  // Getting the default context to ensure the sessions are recorded.
  const defaultContext = browser.contexts()[0];
  const page = defaultContext.pages()[0];

  await page.goto("https://browserbase.com/");
  await page.close();
  await browser.close();
})().catch((error) => console.error(error.message));

LANGUAGE: python
CODE:
from playwright.sync_api import sync_playwright, Playwright

def run(playwright: Playwright):
    chromium = playwright.chromium
    browser = chromium.connect_over_cdp('wss://connect.browserbase.com?apiKey=${process.env.BROWSERBASE_API_KEY}&enableProxy=true')
    context = browser.contexts[0]
    page = context.pages[0]

with sync_playwright() as playwright:
    run(playwright)

----------------------------------------

TITLE: Implementing Stealth Mode Authentication with Playwright TypeScript
DESCRIPTION: Example of connecting to Browserbase with Playwright in TypeScript to handle authentication flows with enabled proxy and stealth mode features. Uses ChromeDriver CDP connection with automatic session recording.

LANGUAGE: typescript
CODE:
import { chromium } from "playwright-core";

(async () => {
  const browser = await chromium.connectOverCDP(
    `wss://connect.browserbase.com?apiKey=${process.env.BROWSERBASE_API_KEY}&enableProxy=true`,
  );

  // Getting the default context to ensure the sessions are recorded.
  const defaultContext = browser.contexts()[0];
  const page = defaultContext.pages()[0];

  await page.goto("https://browserbase.com/sign-in");
  await page.close();
  await browser.close();
})().catch((error) => console.error(error.message));

----------------------------------------

TITLE: Managing Sessions with Browserbase Client in TypeScript
DESCRIPTION: Shows how to list, create, and update sessions using the Browserbase client.

LANGUAGE: typescript
CODE:
import { Browserbase } from "@browserbasehq/sdk";

const browserbase = new Browserbase();
const sessions = await browserbase.listSessions();

const { id: sessionId } = await browserbase.createSession({
  fingerprint: { devices: ["mobile"] },
});

const { status } = await browserbase.updateSession("1234", {
  projectId: "1234",
  status: "REQUEST_RELEASE",
});

----------------------------------------

TITLE: Loading Web Content with Browserbase Python SDK
DESCRIPTION: Demonstrates various ways to load web content using the Browserbase client, including single URL, multiple URLs, and text-only mode.

LANGUAGE: python
CODE:
from browserbase import Browserbase

# Init the SDK
browserbase = Browserbase(os.environ["BROWSERBASE_API_KEY"])

# Load a webpage
result = browserbase.load("https://example.com")

# Load multiple webpages (returns iterator)
result = browserbase.load(["https://example.com"])

# Text-only mode
result = browserbase.load("https://example.com", text_content=True)

----------------------------------------

TITLE: Taking Screenshots with Playwright TypeScript
DESCRIPTION: Demonstrates how to connect to a Browserbase session, navigate to a webpage, and capture a full-page screenshot using Playwright with TypeScript. The screenshot is saved locally as a JPEG file.

LANGUAGE: typescript
CODE:
import { writeFileSync } from "fs";
import { chromium } from "playwright-core";

(async () => {
  console.log("Starting remote browser...")
  const browser = await chromium.connectOverCDP(
      `wss://connect.browserbase.com?apiKey=${process.env.BROWSERBASE_API_KEY}&sessionId=${sessionId}`,
  );
  const defaultContext = browser.contexts()[0];
  const page = defaultContext.pages()[0];

  await page.goto("https://www.browserbase.com", {
      waitUntil: "domcontentloaded",
  });

  console.log("Taking a screenshot!")

  const buf = await page.screenshot({ fullPage: true })
  writeFileSync('screenshot.jpeg', buf)

  console.log("Shutting down...")
  await page.close();
  await browser.close();
})().catch((error) => {
    console.error(error)
})

----------------------------------------

TITLE: Configuring Browser Fingerprinting
DESCRIPTION: Examples demonstrating how to configure browser fingerprinting options including locales, operating systems, and other parameters when creating a new session.

LANGUAGE: typescript
CODE:
import { chromium } from "playwright-core";

async function createSession() {
  const response = await fetch(`https://www.browserbase.com/v1/sessions`, {
    method: "POST",
    headers: {
      "x-bb-api-key": `${process.env.BROWSERBASE_API_KEY}`,
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      projectId: process.env.BROWSERBASE_PROJECT_ID,
      fingerprint: {
        locales: ["en", "en-US", "de"],
        operatingSystems: ["android"],
      },
    }),
  });
  const json = await response.json();
  return json;
}

LANGUAGE: python
CODE:
def create_session():
    url = 'https://www.browserbase.com/v1/sessions'
    headers = {'Content-Type': 'application/json', 'x-bb-api-key': os.environ["BROWSERBASE_API_KEY"]}
    json = {
        "projectId": os.environ["BROWSERBASE_PROJECT_ID"],
        # Fingerprint options
        "fingerprint": {
            "locales": ["en", "en-US", "de"],
            "operatingSystems": ["android"]
        }
    }
    response = requests.post(url, json=json, headers=headers)
    return response.json()['id']

----------------------------------------

TITLE: Connecting to Browserbase with Playwright TypeScript
DESCRIPTION: Demonstrates how to connect to Browserbase using Playwright, accessing browser context and page objects.

LANGUAGE: typescript
CODE:
import { chromium } from "playwright-core";

(async () => {
  // 1. Get a Browser instance
  const browser = await chromium.connectOverCDP(
    `wss://connect.browserbase.com?apiKey=${process.env.BROWSERBASE_API_KEY}`
  );

  // 2. Get a BrowserContext
  const defaultContext = browser.contexts()[0];
  // 3. Get a Page
  const page = defaultContext.pages()[0];

  // 4. Act on Page
  await page.goto("https://browserbase.com/");
  await page.close();
  await browser.close();
})().catch((error) => console.error(error.message));

----------------------------------------

TITLE: Loading Web Pages with Browserbase Client in TypeScript
DESCRIPTION: Demonstrates how to load single or multiple web pages and retrieve their content using the Browserbase client.

LANGUAGE: typescript
CODE:
import { Browserbase } from "@browserbasehq/sdk";

// Init the SDK
const browserbase = new Browserbase();

// Load a webpage
const rawHtml = await browserbase.load("https://www.browserbase.com");

// Load multiple webpages (returns iterator)
const rawHtmls = browserbase.load([
  "https://www.browserbase.com",
  "https://docs.browserbase.com",
]);

for await (let rawHtml of rawHtmls) {
  // ...
}

// Text-only mode
const text = await browserbase.load("https://www.browserbase.com", {
  textContent: true,
});

----------------------------------------

TITLE: Taking Screenshots with Browserbase Python SDK
DESCRIPTION: Shows how to take a screenshot of a webpage using the Browserbase client. The method returns the screenshot as bytes, with an option for full-page screenshots.

LANGUAGE: python
CODE:
from browserbase import Browserbase

# Init the SDK
browserbase = Browserbase(os.environ["BROWSERBASE_API_KEY"])

# Screenshot (returns bytes)
result = browserbase.screenshot("https://example.com", full_page=True)

----------------------------------------

TITLE: Initializing Puppeteer Session with TypeScript
DESCRIPTION: Establishes a browser session using Puppeteer with TypeScript. Connects to browserbase, creates a new page, navigates, and handles cleanup.

LANGUAGE: typescript
CODE:
import puppeteer from "puppeteer-core";

(async () => {
  const browser = await puppeteer.connect({
    browserWSEndpoint: `wss://connect.browserbase.com?apiKey=${process.env.BROWSERBASE_API_KEY}`,
  });
  const page = await browser.newPage();

  await page.goto("https://www.browserbase.com");
  await page.close();
  await browser.close();
})().catch((error) => console.error(error.message));

----------------------------------------

TITLE: Initializing Playwright Session with Python
DESCRIPTION: Creates a browser session using Playwright with Python. Demonstrates connection and basic page management using sync API.

LANGUAGE: python
CODE:
from playwright.sync_api import sync_playwright, Playwright

def run(playwright: Playwright):
    chromium = playwright.chromium
    browser = chromium.connect_over_cdp('wss://connect.browserbase.com?apiKey=${process.env.BROWSERBASE_API_KEY}')
    context = browser.contexts[0]
    page = context.pages[0]

with sync_playwright() as playwright:
    run(playwright)

----------------------------------------

TITLE: Initializing Selenium Session with Python
DESCRIPTION: Implements a custom Selenium session with Python, including session creation, custom connection handling, and WebDriver management with proper cleanup.

LANGUAGE: python
CODE:
from selenium import webdriver
from selenium.webdriver.remote.remote_connection import RemoteConnection
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
import requests
import os

def create_session():
    url = 'https://www.browserbase.com/v1/sessions'
    headers = {'Content-Type': 'application/json', 'x-bb-api-key': os.environ["BROWSERBASE_API_KEY"]}
    json = {
        "projectId": os.environ["BROWSERBASE_PROJECT_ID"],
        # Fingerprint options
        "fingerprint": {
            "locales": ["en", "en-US", "de"],
            "operatingSystems": ["android"]
        }
    }
    response = requests.post(url, json=json, headers=headers)
    return response.json()['id']


class CustomRemoteConnection(RemoteConnection):
    _session_id = None

    def __init__(self, remote_server_addr: str, session_id: str):
        super().__init__(remote_server_addr)
        self._session_id = session_id

    def get_remote_connection_headers(self, parsed_url, keep_alive=False):
        headers = super().get_remote_connection_headers(parsed_url, keep_alive)
        headers.update({'x-bb-api-key': os.environ["BROWSERBASE_API_KEY"]})
        headers.update({'session-id': self._session_id})
        return headers


def run():
    session_id = create_session()
    custom_conn = CustomRemoteConnection('http://connect.browserbase.com/webdriver', session_id)
    options = webdriver.ChromeOptions()
    options.debugger_address = "localhost:9223"
    driver = webdriver.Remote(custom_conn, options=options)
    driver.get("https://www.browserbase.com")
    get_title = driver.title
    print(get_title)
    # Make sure to quit the driver so your session is ended!
    driver.quit()

run()

----------------------------------------

TITLE: Connecting to BrowserBase with Playwright (Python)
DESCRIPTION: This snippet shows how to connect to a BrowserBase session using Playwright in Python. It uses the WebSocket API with authentication via the apiKey query parameter.

LANGUAGE: python
CODE:
from playwright.sync_api import sync_playwright, Playwright

def run(playwright: Playwright):
    chromium = playwright.chromium
    browser = chromium.connect_over_cdp('wss://connect.browserbase.com?apiKey='+ os.environ["BROWSERBASE_API_KEY"])
    context = browser.contexts[0]
    page = context.pages[0]

with sync_playwright() as playwright:
    run(playwright)

----------------------------------------

TITLE: Connecting to BrowserBase with Puppeteer (TypeScript)
DESCRIPTION: This snippet illustrates how to connect to a BrowserBase session using Puppeteer in TypeScript. It uses the WebSocket API with authentication via the apiKey query parameter.

LANGUAGE: javascript
CODE:
import puppeteer from "puppeteer-core";

(async () => {
  const browser = await puppeteer.connect({
    browserWSEndpoint: `wss://connect.browserbase.com?apiKey=${process.env.BROWSERBASE_API_KEY}`,
  });

  // ...
})();

----------------------------------------

TITLE: Connecting to BrowserBase with Selenium (TypeScript)
DESCRIPTION: This snippet demonstrates how to connect to a BrowserBase session using Selenium in TypeScript. It uses the HTTP API with a custom HTTP agent for authentication and session management.

LANGUAGE: typescript
CODE:
import http from "http";
import webdriver from "selenium-webdriver";
import chrome from "selenium-webdriver/chrome";

async function createSession() {
  const response = await fetch(`https://www.browserbase.com/v1/sessions`, {
    method: "POST",
    headers: {
      "x-bb-api-key": process.env.BROWSERBASE_API_KEY,
      "Content-Type": "application/json",
    },
    body: JSON.stringify({ projectId: process.env.BROWSERBASE_PROJECT_ID }),
  });
  return await response.json();
}

(async () => {
  const session = await createSession();

  const customHttpAgent = new http.Agent({});
  (customHttpAgent as any).addRequest = (req: any, options: any) => {
    // Session ID needs to be set here
    req.setHeader("session-id", session.id);
    req.setHeader("x-bb-api-key", process.env.BROWSERBASE_API_KEY);
    (http.Agent.prototype as any).addRequest.call(
      customHttpAgent,
      req,
      options,
    );
  };

  // We set a debuggerAddress so the server-side WebDriver can connect.
  const options = new chrome.Options();
  options.debuggerAddress("localhost:9223");

  const driver = new webdriver.Builder()
    .forBrowser("chrome")
    .setChromeOptions(options)
    .usingHttpAgent(customHttpAgent)
    .usingServer(
      `http://connect.browserbase.com/webdriver`, // Selenium only supports HTTP
    )
    .build();

  await driver.get("https://www.browserbase.com");

  // Make sure to quit the driver so your session is ended!
  await driver.quit();
})().catch((error) => console.error(error.message));

----------------------------------------

TITLE: Connecting to BrowserBase with Selenium (Python)
DESCRIPTION: This snippet shows how to connect to a BrowserBase session using Selenium in Python. It uses the HTTP API with a custom RemoteConnection class for authentication and session management.

LANGUAGE: python
CODE:
from selenium import webdriver
from selenium.webdriver.remote.remote_connection import RemoteConnection
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
import requests
import os

def create_session():
    url = 'https://www.browserbase.com/v1/sessions'
    headers = {'Content-Type': 'application/json', 'x-bb-api-key': os.environ["BROWSERBASE_API_KEY"]}
    response = requests.post(url, json={ "projectId": os.environ["BROWSERBASE_PROJECT_ID"] }, headers=headers)
    return response.json()['id']


class CustomRemoteConnection(RemoteConnection):
    _session_id = None

    def __init__(self, remote_server_addr: str, session_id: str):
        super().__init__(remote_server_addr)
        self._session_id = session_id

    def get_remote_connection_headers(self, parsed_url, keep_alive=False):
        headers = super().get_remote_connection_headers(parsed_url, keep_alive)
        headers.update({'x-bb-api-key': os.environ["BROWSERBASE_API_KEY"]})
        headers.update({'session-id': self._session_id})
        return headers


def run():
    session_id = create_session()
    custom_conn = CustomRemoteConnection('http://connect.browserbase.com/webdriver', session_id)
    options = webdriver.ChromeOptions()
    options.debugger_address = "localhost:9223"
    driver = webdriver.Remote(custom_conn, options=options)
    driver.get("https://www.browserbase.com")
    get_title = driver.title
    print(get_title)
    # Make sure to quit the driver so your session is ended!
    driver.quit()

run()

----------------------------------------

TITLE: Installing Browserbase SDK using npm, pnpm, or yarn
DESCRIPTION: Commands to install the Browserbase SDK using different package managers.

LANGUAGE: bash
CODE:
npm install -S @browserbasehq/sdk

LANGUAGE: bash
CODE:
pnpm install -S @browserbasehq/sdk

LANGUAGE: bash
CODE:
yarn add @browserbasehq/sdk

----------------------------------------

TITLE: Installing Browserbase Python SDK via pip
DESCRIPTION: Installs the Browserbase Python SDK using pip package manager.

LANGUAGE: bash
CODE:
pip install browserbase

----------------------------------------

TITLE: Taking Screenshots with Puppeteer TypeScript
DESCRIPTION: Shows how to connect to a Browserbase session, navigate to a webpage, and capture a full-page screenshot using Puppeteer with TypeScript. The screenshot is saved locally as a JPEG file.

LANGUAGE: typescript
CODE:
const puppeteer = require("puppeteer");
const fs = require("fs");

(async () => {
  console.log("Starting remote browser...");
  const browser = await puppeteer.connect({
    browserWSEndpoint: `wss://connect.browserbase.com?apiKey=${process.env.BROWSERBASE_API_KEY}&sessionId=${sessionId}`,
  });
  const pages = await browser.pages();
  const page = pages[0];

  await page.goto("https://www.browserbase.com", {
    waitUntil: "domcontentloaded",
  });

  console.log("Taking a screenshot!");

  const screenshot = await page.screenshot({ fullPage: true });
  fs.writeFileSync("screenshot.jpeg", screenshot);

  console.log("Shutting down...");
  await browser.close();
})().catch((error) => {
  console.error(error);
});

----------------------------------------

TITLE: Taking Screenshots with Playwright Python
DESCRIPTION: Demonstrates screenshot capture functionality using Playwright with Python. Connects to a Browserbase session, navigates to a webpage, and saves a full-page screenshot locally.

LANGUAGE: python
CODE:
from playwright.sync_api import sync_playwright, Playwright
import os

def main(p: Playwright):
    print("Starting remote browser...")
        browser = await p.chromium.connect_over_cdp(
            f"wss://connect.browserbase.com?apiKey={os.environ['BROWSERBASE_API_KEY']}&sessionId={sessionId}"
        )
        context = await browser.new_context()
        page = await context.new_page()

        await page.goto("https://www.browserbase.com", wait_until="domcontentloaded")

        print("Taking a screenshot!")

        await page.screenshot(path='screenshot.jpeg', full_page=True)

        print("Shutting down...")
        await browser.close()

with sync_playwright() as playwright:
    run(playwright)

----------------------------------------

TITLE: Taking Screenshots with Selenium Python
DESCRIPTION: Shows how to capture screenshots using Selenium with Python. Connects to a Browserbase session and saves the screenshot locally as a PNG file.

LANGUAGE: python
CODE:
from selenium import webdriver
from selenium.webdriver.remote.remote_connection import RemoteConnection
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
import requests
import os

def run():
    session_id = create_session()
    custom_conn = CustomRemoteConnection('http://connect.browserbase.com/webdriver', session_id)
    options = webdriver.ChromeOptions()
    options.debugger_address = "localhost:9223"
    driver = webdriver.Remote(custom_conn, options=options)
    driver.get("https://www.browserbase.com")

    driver.save_screenshot('screenshot.png')

    driver.quit()

run()

----------------------------------------

TITLE: File Downloads with Playwright TypeScript
DESCRIPTION: Implements file download functionality using Playwright with TypeScript. Includes connection to Browserbase, download configuration, and file saving with retry logic.

LANGUAGE: typescript
CODE:
import { chromium } from "playwright-core";
import { writeFileSync } from "node:fs";

async function saveDownloadsOnDisk(sessionId: string, retryForSeconds: number) {
  return new Promise<void>((resolve, reject) => {
    let pooler;
    const timeout = setTimeout(() => {
      if (pooler) {
        clearInterval(pooler);
      }
    }, retryForSeconds);
    async function fetchDownloads() {
      try {
        const response = await fetch(
          `https://www.browserbase.com/v1/sessions/${sessionId}/downloads`,
          {
            method: "GET",
            headers: {
              "x-bb-api-key": process.env.BROWSERBASE_API_KEY!,
            },
          },
        );
        const arrayBuffer = await response.arrayBuffer();
        if (arrayBuffer.byteLength > 0) {
          const buffer = Buffer.from(arrayBuffer);
          writeFileSync("downloads.zip", buffer);
          clearInterval(pooler);
          clearTimeout(timeout);
          resolve();
        }
      } catch (e) {
        clearInterval(pooler);
        clearTimeout(timeout);
        reject(e);
      }
    }
    pooler = setInterval(fetchDownloads, 2000);
  });
}

(async () => {
  const { id: sessionId } = await createSession();
  const browser = await chromium.connectOverCDP(
    `wss://connect.browserbase.com?apiKey=${process.env.BROWSERBASE_API_KEY}&sessionId=${sessionId}`,
  );
  const defaultContext = browser.contexts()[0];
  const page = defaultContext.pages()[0];

  const client = await defaultContext.newCDPSession(page);
  await client.send("Page.setDownloadBehavior", {
    behavior: "allow",
    downloadPath: "downloads",
    eventsEnabled: true,
  });

  await page.goto("https://browser-tests-alpha.vercel.app/api/download-test");

  const [download] = await Promise.all([
    page.waitForEvent("download"),
    page.locator("#download").click(),
  ]);

  let downloadError = await download.failure();
  if (downloadError !== null) {
    console.log("Error happened on download:", downloadError);
    throw new Error(downloadError);
  }

  await page.close();
  await browser.close();

  if (!downloadError) {
    await saveDownloadsOnDisk(sessionId, 20000);
  }
})().catch((error) => console.error(error.message));

----------------------------------------

TITLE: File Downloads with Puppeteer TypeScript
DESCRIPTION: Implements file download functionality using Puppeteer with TypeScript. Includes connection to Browserbase, download configuration, and file saving with retry logic.

LANGUAGE: typescript
CODE:
import puppeteer from "puppeteer-core";
import { writeFileSync } from "node:fs";

async function saveDownloadsOnDisk(sessionId: string, retryForSeconds: number) {
  return new Promise<void>((resolve, reject) => {
    let pooler;
    const timeout = setTimeout(() => {
      if (pooler) {
        clearInterval(pooler);
      }
    }, retryForSeconds);
    async function fetchDownloads() {
      try {
        const response = await fetch(
          `https://www.browserbase.com/v1/sessions/${sessionId}/downloads`,
          {
            method: "GET",
            headers: {
              "x-bb-api-key": process.env.BROWSERBASE_API_KEY!,
            },
          },
        );
        const arrayBuffer = await response.arrayBuffer();
        if (arrayBuffer.byteLength > 0) {
          const buffer = Buffer.from(arrayBuffer);
          writeFileSync("downloads.zip", buffer);
          clearInterval(pooler);
          clearTimeout(timeout);
          resolve();
        }
      } catch (e) {
        clearInterval(pooler);
        clearTimeout(timeout);
        reject(e);
      }
    }
    pooler = setInterval(fetchDownloads, 2000);
  });
}

(async () => {
  const { id: sessionId } = await createSession();
  const browser = await puppeteer.connect({
    browserWSEndpoint: `wss://connect.browserbase.com?apiKey=${process.env.BROWSERBASE_API_KEY}&sessionId=${sessionId}`,
  });
  const page = await browser.newPage();

  const client = await page.createCDPSession();
  await client.send("Page.setDownloadBehavior", {
    behavior: "allow",
    downloadPath: "downloads",
    eventsEnabled: true,
  });

  await page.goto("https://www.browserbase.com");
  await page.close();
  await browser.close();

  await saveDownloadsOnDisk(sessionId, 20000);
})().catch((error) => console.error(error.message));

----------------------------------------

TITLE: Taking Screenshots with Browserbase Client in TypeScript
DESCRIPTION: Shows how to capture screenshots of web pages using the Browserbase client, including full-page screenshots.

LANGUAGE: typescript
CODE:
import { Browserbase } from "@browserbasehq/sdk";

// Init the SDK
const browserbase = new Browserbase();

const blob = await browserbase.screenshot("https://www.browserbase.com");

// Full page screenshot
const blob2 = await browserbase.screenshot("https://www.browserbase.com", {
  fullPage: true,
});

----------------------------------------

TITLE: Connecting to Browserbase with Playwright in TypeScript
DESCRIPTION: Demonstrates how to use the Browserbase client to create a connection URL for Playwright.

LANGUAGE: typescript
CODE:
import { Browserbase } from "@browserbasehq/sdk";
import { chromium } from "playwright-core";

(async () => {
  const browserbase = new Browserbase();
  const browser = await chromium.connectOverCDP(browserbase.connectUrl());

  // ...
})();

----------------------------------------

TITLE: Handling Downloads with Browserbase Client in TypeScript
DESCRIPTION: Demonstrates how to retrieve and save a session's downloads using the Browserbase client.

LANGUAGE: typescript
CODE:
import { Browserbase } from "@browserbasehq/sdk";
import { chromium } from "playwright-core";

(async () => {
  const browserbase = new Browserbase();
  const { id: sessionId } = await browserbase.createSession();
  const browser = await chromium.connectOverCDP(
    browserbase.connectUrl({ sessionId }),
  );

  // ...navigate the page and take actions...

  await browserbase.getSessionDownloads(sessionId, "downloads.zip");
})();

----------------------------------------

TITLE: Installing Browserbase SDK via pip
DESCRIPTION: Command to install the Browserbase SDK using pip package manager.

LANGUAGE: bash
CODE:
pip install browserbase

----------------------------------------

TITLE: Loading Documents with BrowserbaseLoader in Python
DESCRIPTION: Python code snippet demonstrating how to use BrowserbaseLoader from langchain_community to load documents from specified URLs. It requires a Browserbase API token and can load multiple pages, returning either HTML or text content.

LANGUAGE: python
CODE:
from langchain_community.document_loaders import BrowserbaseLoader

BROWSERBASE_API_TOKEN = "<Your Browserbase API Key goes here>"

loader = BrowserbaseLoader(
    api_token=BROWSERBASE_API_TOKEN,
    urls=[
        # load multiple pages
        "https://www.espn.com",
        "https://lilianweng.github.io/posts/2023-06-23-agent/"
    ],
    text_content=True,
)

documents = loader.load()

----------------------------------------

TITLE: Loading and Analyzing Images with Browserbase and GPT-4 Vision in Python
DESCRIPTION: Python code snippet showing how to use Browserbase to take a screenshot of a webpage and then analyze it using OpenAI's GPT-4 Vision model. It demonstrates screenshot capture and image analysis capabilities.

LANGUAGE: python
CODE:
from browserbase import Browserbase
from browserbase.helpers.gpt4 import GPT4VImage, GPT4VImageDetail
from langchain_core.messages import HumanMessage
from langchain_openai import ChatOpenAI

chat = ChatOpenAI(model="gpt-4-vision-preview", max_tokens=256)
browser = Browserbase()

screenshot = browser.screenshot("https://browserbase.com")

result = chat.invoke(
    [
        HumanMessage(
            content=[
                {"type": "text", "text": "What color is the logo?"},
                GPT4VImage(screenshot, GPT4VImageDetail.auto),
            ]
        )
    ]
)

print(result.content)

----------------------------------------

TITLE: Installing Browserbase SDK
DESCRIPTION: Command to install the Browserbase SDK using pip package manager.

LANGUAGE: bash
CODE:
pip install browserbase

----------------------------------------

TITLE: Loading Web Documents with Browserbase for LlamaIndex
DESCRIPTION: Python code to load web documents using BrowserbaseWebReader from LlamaIndex. It demonstrates how to create a reader instance and load data from specified URLs, with an option to extract text content.

LANGUAGE: python
CODE:
from llama_index.readers.web import BrowserbaseWebReader

reader = BrowserbaseWebReader()
docs = reader.load_data(
    urls=[
        "https://example.com",
    ],
    # Text mode
    text_content=True,
)

----------------------------------------

TITLE: Capturing Screenshots with Browserbase for GPT-4 Vision
DESCRIPTION: Python code to capture screenshots using Browserbase and prepare them for use with GPT-4 Vision. It shows how to initialize the Browserbase client, take a screenshot, and create a GPT4VImage object.

LANGUAGE: python
CODE:
from browserbase import Browserbase, GPT4VImage

browser = Browserbase()
screenshot = browser.screenshot("https://browserbase.com")

# Ready to use image object for Multi-Modal GPT4 use case
gpt4_img = GPT4VImage(screenshot)

----------------------------------------

TITLE: Installing Browserbase SDK and CrewAI Tools
DESCRIPTION: This command installs the Browserbase SDK and CrewAI tools using pip. It's a prerequisite for using Browserbase with CrewAI Agents.

LANGUAGE: bash
CODE:
pip install browserbase 'crewai[tools]'

----------------------------------------

TITLE: Configuring BrowserbaseLoadTool for CrewAI Agent
DESCRIPTION: This Python code demonstrates how to import and configure the BrowserbaseLoadTool, extract text from a website, and integrate it into a CrewAI Agent for travel planning. It showcases the setup of an agent with specific roles and tools, including web browsing capabilities.

LANGUAGE: python
CODE:
from crewai_tools import BrowserbaseLoadTool
from crewai import Agent

# See https://github.com/joaomdmoura/crewAI-examples/blob/main/instagram_post/tools/search_tools.py
from tools.search_tools import SearchTools


browserbase_tool = BrowserbaseLoadTool()

# Extract the text from the site
text = browserbase_tool.run()
print(text)


# Use the BrowserbaseLoadTool for travel planning
agent = Agent(
    role='Local Expert at this city',
    goal='Provide the BEST insights about the selected city',
    backstory="""A knowledgeable local guide with extensive information
    about the city, it's attractions and customs""",
    tools=[
        SearchTools.search_internet,
        browserbase_tool,
    ],
    verbose=True
)

----------------------------------------

TITLE: Installing Browserbase Haystack Integration Package
DESCRIPTION: This command installs the Browserbase Haystack integration package using pip. It's a prerequisite for using Browserbase with Haystack.

LANGUAGE: bash
CODE:
pip install browserbase-haystack

----------------------------------------

TITLE: Configuring BrowserbaseFetcher in Haystack Pipeline
DESCRIPTION: This Python code demonstrates how to import and configure the BrowserbaseFetcher component within a Haystack pipeline. It sets up a pipeline that fetches web page content, builds a prompt, and uses an OpenAI generator to process the data.

LANGUAGE: python
CODE:
from haystack import Pipeline
from haystack.components.generators import OpenAIGenerator
from haystack.components.builders import PromptBuilder
from browserbase_haystack import BrowserbaseFetcher

prompt_template = (
    "Tell me the titles of the given pages. Pages: {{ documents }}"
)
prompt_builder = PromptBuilder(template=prompt_template)
llm = OpenAIGenerator()

browserbase_fetcher = BrowserbaseFetcher()

pipe = Pipeline()
pipe.add_component("fetcher", browserbase_fetcher)
pipe.add_component("prompt_builder", prompt_builder)
pipe.add_component("llm", llm)

pipe.connect("fetcher.documents", "prompt_builder.documents")
pipe.connect("prompt_builder.prompt", "llm.prompt")
result = pipe.run(data={"fetcher": {"urls": ["https://example.com"]}})

----------------------------------------

TITLE: Implementing Parallel Task Processing Utility in TypeScript
DESCRIPTION: A utility function that creates and manages multiple Browserbase sessions to process tasks in parallel. It creates 5 browser instances and distributes tasks among them for concurrent execution.

LANGUAGE: typescript
CODE:
import { Page, chromium } from "playwright-core";

export async function processBrowserbaseTasks<R>(
  tasks: ((page: Page) => Promise<R>)[]
): Promise<R[]> {
  const tasksQueue = tasks.slice();
  const resultsQueue: R[] = [];

  const createBrowserSession = async (browserWSEndpoint: string) => {
    const browser = await chromium.connectOverCDP(browserWSEndpoint);
    const page = await browser.newPage(); // Create a single page for this session

    while (true) {
      if (tasksQueue.length > 0) {
        const task = tasksQueue.shift();
        if (task) {
          const result = await task(page);
          resultsQueue.push(result);
        }
      } else {
        break;
      }
    }

    await page.close();
    await browser.close();
  };

  const browserWSEndpoint = `wss://api.browserbase.com?apiKey=${process.env.BROWSERBASE_API_KEY}&enableProxy=true`;
  const sessions = Array.from({ length: 5 }, () =>
    createBrowserSession(browserWSEndpoint)
  );

  await Promise.all(sessions);

  return resultsQueue;
}

----------------------------------------

TITLE: Creating Wikipedia Page Processing Tasks in TypeScript
DESCRIPTION: Function that creates tasks for processing Wikipedia pages, where each task navigates to a URL and extracts the page content.

LANGUAGE: typescript
CODE:
const tasks = loadUrlsFromFile("wikipedia_urls.txt").map(
  (url) => async (page: Page) => {
    console.log(`Processing ${url}...`);
    await page.goto(url);
    const content = await page.content();
    return [url, content];
  }
);

----------------------------------------

TITLE: Executing Parallel Tasks and Processing Results in TypeScript
DESCRIPTION: Code that executes the parallel processing tasks and handles the results by printing URLs and content snippets.

LANGUAGE: typescript
CODE:
const result = await processBrowserbaseTasks(tasks);
result.map(([url, content]) => {
  console.log(url, content.substring(0, 200) + "...");
});

----------------------------------------

TITLE: Running the Parallel Processing Script via Command Line
DESCRIPTION: Command line execution of the parallel processing script with required environment variables for Browserbase authentication.

LANGUAGE: bash
CODE:
$ BROWSERBASE_PROJECT_ID=xxxxxxxxx BROWSERBASE_API_KEY=xxxxxxxxx node dist/index.js

----------------------------------------

TITLE: Visualizing Browserbase Architecture with Mermaid Flowchart
DESCRIPTION: Flowchart showing the architecture of Browserbase platform including load balancer, k8s cluster, maintenance components, and observability system. The diagram illustrates how user code interacts with various platform services.

LANGUAGE: mermaid
CODE:
  flowchart
    code["Your code"]
    code<-->lb

    subgraph A ["Browserbase"]
        style A padding-top:100px;

        dash["Dashboard (Playground)"]
        dash-->lb
        lb[Load Balancer + Auth]
        webhooks[Webhooks Service]
        %% hack to fix bad rendering of node label from mermaid
        subgraph AA ["&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;k8s cluster"]
          chromium[Chromium]
        end
        lb<-->chromium

        subgraph B [Maintenance pain]
          style B stroke:#f66,stroke-width:2px,stroke-dasharray: 5 5

          proxy[Proxy Service]
          proxyV[Proxy Vendors]
          proxy-->proxyV
          captcha[Captcha Bypass]
          captchaV[Captcha Vendors]
          captcha-->captchaV
        end

        chromium-->captcha
        chromium-->proxy
        obs[Observability Monitor]-->events[(Events DB)]
        chromium-->obs
        obs-->webhooks
    end

----------------------------------------

TITLE: Implementing Stealth Mode Authentication with Puppeteer TypeScript
DESCRIPTION: Example of connecting to Browserbase with Puppeteer in TypeScript to handle authentication flows with enabled proxy and stealth mode features.

LANGUAGE: typescript
CODE:
const puppeteer = require("puppeteer");

(async () => {
  const browser = await puppeteer.connect({
    browserWSEndpoint: `wss://connect.browserbase.com?apiKey=${process.env.BROWSERBASE_API_KEY}&enableProxy=true`,
  });

  const pages = await browser.pages();
  const page = pages[0];

  await page.goto("https://browserbase.com/sign-in");
  await page.close();
  await browser.close();
})().catch((error) => console.error(error.message));

----------------------------------------

TITLE: Implementing Stealth Mode Authentication with Playwright Python
DESCRIPTION: Example of connecting to Browserbase with Playwright in Python to handle authentication flows with enabled proxy and stealth mode features.

LANGUAGE: python
CODE:
from playwright.sync_api import sync_playwright

def main():
    with sync_playwright() as p:
        browser = p.chromium.connect_over_cdp(
            f'wss://connect.browserbase.com?apiKey={os.environ["BROWSERBASE_API_KEY"]}&enableProxy=true'
        )

        # Getting the default context to ensure the sessions are recorded.
        default_context = browser.contexts()[0]
        page = default_context.pages()[0]

        page.goto("https://browserbase.com/sign-in")
        page.close()
        browser.close()

if __name__ == "__main__":
    main()

----------------------------------------

TITLE: Implementing Stealth Mode Authentication with Selenium Python
DESCRIPTION: Example of connecting to Browserbase with Selenium in Python, including custom session handling and proxy enablement for authentication flows.

LANGUAGE: python
CODE:
from selenium import webdriver
from selenium.webdriver.remote.remote_connection import RemoteConnection
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
import requests
import os

def create_session():
    url = 'https://www.browserbase.com/v1/sessions'
    headers = {'Content-Type': 'application/json', 'x-bb-api-key': os.environ["BROWSERBASE_API_KEY"]}
    json = {
        "projectId": os.environ["BROWSERBASE_PROJECT_ID"],
    }
    response = requests.post(url, json=json, headers=headers)
    return response.json()['id']


class CustomRemoteConnection(RemoteConnection):
    _session_id = None

    def __init__(self, remote_server_addr: str, session_id: str):
        super().__init__(remote_server_addr)
        self._session_id = session_id

    def get_remote_connection_headers(self, parsed_url, keep_alive=False):
        headers = super().get_remote_connection_headers(parsed_url, keep_alive)
        headers.update({'x-bb-api-key': os.environ["BROWSERBASE_API_KEY"]})
        headers.update({'session-id': self._session_id})
        # enable proxy here
        headers.update({'enable-proxy': "true"})
        return headers


def run():
    session_id = create_session()
    custom_conn = CustomRemoteConnection('http://connect.browserbase.com/webdriver', session_id)
    options = webdriver.ChromeOptions()
    options.debugger_address = "localhost:9223"
    driver = webdriver.Remote(custom_conn, options=options)
    driver.get("https://www.browserbase.com")
    get_title = driver.title
    print(get_title)
    # Make sure to quit the driver so your session is ended!
    driver.quit()

run()

----------------------------------------

TITLE: Defining OpenAPI Specification for POST /v1/sessions in YAML
DESCRIPTION: This YAML snippet specifies the OpenAPI definition for the POST /v1/sessions endpoint. It defines the structure and requirements for creating a new session in the browserbase project.

LANGUAGE: yaml
CODE:
openapi: post /v1/sessions

----------------------------------------

TITLE: OpenAPI GET Sessions Endpoint Definition
DESCRIPTION: YAML definition for an OpenAPI endpoint that handles session retrieval via GET /v1/sessions.

LANGUAGE: yaml
CODE:
openapi: get /v1/sessions

----------------------------------------

TITLE: Defining GET Endpoint for Session Retrieval in OpenAPI
DESCRIPTION: This snippet defines the OpenAPI specification for a GET endpoint to retrieve session information. It specifies the path '/v1/sessions/{session-id}' where {session-id} is a path parameter representing the unique identifier of the session to be retrieved.

LANGUAGE: yaml
CODE:
openapi: get /v1/sessions/{session-id}

----------------------------------------

TITLE: Defining OpenAPI POST Endpoint for Session Management in YAML
DESCRIPTION: This YAML snippet specifies the OpenAPI structure for a POST request to the /v1/sessions/{session-id} endpoint. It defines the path and HTTP method for session-related operations.

LANGUAGE: yaml
CODE:
openapi: post /v1/sessions/{session-id}

----------------------------------------

TITLE: OpenAPI POST Session Endpoint Definition
DESCRIPTION: API endpoint specification for managing browser sessions through POST requests. The endpoint path includes a session-id parameter.

LANGUAGE: yaml
CODE:
openapi: post /v1/sessions/{session-id}

----------------------------------------

TITLE: Defining GET Endpoint for Session Retrieval in OpenAPI
DESCRIPTION: This YAML snippet specifies the OpenAPI path for retrieving session information by session ID. It defines the HTTP method (GET) and the endpoint path structure.

LANGUAGE: yaml
CODE:
openapi: get /v1/sessions/{session-id}

----------------------------------------

TITLE: OpenAPI Session Logs GET Endpoint Definition
DESCRIPTION: OpenAPI/Swagger definition for the GET endpoint to retrieve session logs by session ID. The endpoint pattern is /v1/sessions/{session-id}/logs.

LANGUAGE: yaml
CODE:
openapi: get /v1/sessions/{session-id}/logs

----------------------------------------

TITLE: Defining OpenAPI GET Endpoint for Session Downloads
DESCRIPTION: Specifies the OpenAPI endpoint for retrieving downloads for a specific session. The endpoint is a GET request to '/v1/sessions/{session-id}/downloads' and returns a .zip file.

LANGUAGE: yaml
CODE:
openapi: get /v1/sessions/{session-id}/downloads

----------------------------------------

TITLE: Defining OpenAPI GET Endpoint for Session Debugging in YAML
DESCRIPTION: This YAML snippet defines the OpenAPI specification for a GET endpoint used to debug a specific session. The endpoint path includes a session-id parameter.

LANGUAGE: yaml
CODE:
openapi: get /v1/sessions/{session-id}/debug

----------------------------------------

TITLE: OpenAPI GET Sessions Recording Endpoint Definition
DESCRIPTION: OpenAPI specification for retrieving session recording data via GET request. The endpoint requires a session-id parameter and may return large amounts of data that could impact browser performance.

LANGUAGE: openapi
CODE:
openapi: get /v1/sessions/{session-id}/recording

----------------------------------------

TITLE: OpenAPI Extension Endpoint Definition
DESCRIPTION: OpenAPI specification defining the POST endpoint for extensions at /v1/extensions.

LANGUAGE: yaml
CODE:
openapi: post /v1/extensions

----------------------------------------

TITLE: Defining OpenAPI POST Sessions Endpoint
DESCRIPTION: YAML OpenAPI specification declaring the /v1/sessions POST endpoint path.

LANGUAGE: yaml
CODE:
openapi: post /v1/sessions

----------------------------------------

TITLE: Installing Browserbase SDK with NPM
DESCRIPTION: Command to install the Browserbase SDK package using npm package manager.

LANGUAGE: bash
CODE:
npm i @browserbasehq/sdk

----------------------------------------

TITLE: Loading Documents with Browserbase Loader in TypeScript
DESCRIPTION: Example of using BrowserbaseLoader to load documents from URLs. The loader can be configured to return either HTML content or plain text using the textContent option.

LANGUAGE: typescript
CODE:
import {
  BrowserbaseLoader
} from "langchain/document_loaders/web/browserbase.js";

const loader = new BrowserbaseLoader(
  ["https://example.com"],
  { textContent: true }
);
const docs = await loader.load();

----------------------------------------

TITLE: Retrieving Debug URL and Handling User Credentials in Amazon Wishlist Scraper
DESCRIPTION: This snippet demonstrates how to retrieve a debug connection URL for a Browserbase session and pause automation to allow user input for credentials in an Amazon wishlist scraping scenario.

LANGUAGE: javascript
CODE:
async function retrieveDebugConnectionURL(sessionId) {
  const response = await fetch(
    `https://www.browserbase.com/v1/sessions/${sessionId}/debug`,
    {
      method: "GET",
      headers: {
        'x-bb-api-key': `${process.env.BROWSERBASE_API_KEY}`,
      },
    }
  );
  const json = await response.json();
  return json.debuggerFullscreenUrl;
}

async function retrieveAmazonWishlistItems(sessionId, page) {
  await page.goto(
    `https://www.amazon.com/ap/signin?openid.pape.max_auth_age=0&openid.return_to=https%3A%2F%2Fwww.amazon.com%2F%3Fref_%3Dnav_signin&openid.identity=http%3A%2F%2Fspecs.openid.net%2Fauth%2F2.0%2Fidentifier_select&openid.assoc_handle=usflex&openid.mode=checkid_setup&openid.claimed_id=http%3A%2F%2Fspecs.openid.net%2Fauth%2F2.0%2Fidentifier_select&openid.ns=http%3A%2F%2Fspecs.openid.net%2Fauth%2F2.0`,
    {
      // let's make sure the page is fully loaded before asking for the live debug URL
      waitUntil: "domcontentloaded",
    }
  );

  const debugRemoteURL = await retrieveDebugConnectionURL(sessionId)

  await sendCredentialsPageUrlToUser(debugRemoteURL)

  // now, let's wait for the user to complete the credential flow

  await page.waitForSelector('#nav-flyout-wl-items > div > a:nth-child(2) > span', {
    timeout: 300000 // give 5 minutes,
    visible: false
  })

  // Once we are here:
  // 1. navigate to https://www.amazon.com/hz/wishlist/ls
  // 2. collect items and navigates pagination
}

----------------------------------------

TITLE: Flowchart for Local Development Workflow with Remote Debugging
DESCRIPTION: This Mermaid flowchart illustrates the process of running automation, handling errors, and using live debugging or Session Debugger for faster development iterations.

LANGUAGE: mermaid
CODE:
flowchart LR

   run["Run your automation"]
   error["An error is raised by the page"]
   stuck["A selector mismatches"]
   debug["Live inspect and debug the Session"]
   failed["An error occurred and the Session closed"]
   replay["Inspect on Session Debugger"]
   worksout["The automation works as intented"]

   run-->error
   run-->stuck
   run-->failed
   run-->worksout

   stuck--Request the debug connection URL-->debug
   error--Request the debug connection URL-->debug
   failed--Look at logs and events played-->replay
   worksout--Analyze the Session steps-->replay

   replay--fix your code-->run
   debug--fix your code-->run

----------------------------------------

TITLE: Implementing Local Development Workflow with Browserbase Session Debugging
DESCRIPTION: This code snippet demonstrates how to create a Browserbase session, connect to it using Playwright, retrieve a debug URL for live inspection, and handle session failures with links to the Session Debugger.

LANGUAGE: javascript
CODE:
import { chromium } from "playwright-core";

let sessionId;

async function createSession() {
  const response = await fetch(`https://www.browserbase.com/v1/sessions`, {
    method: "POST",
    headers: {
      "x-bb-api-key": `${process.env.BROWSERBASE_API_KEY}`,
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      projectId: process.env.BROWSERBASE_PROJECT_ID,
    }),
  });
  const json = await response.json();
  return json;
}

async function retrieveDebugConnectionURL(sessionId) {
  const response = await fetch(
    `https://www.browserbase.com/v1/sessions/${sessionId}/debug`,
    {
      method: "GET",
      headers: {
        "x-bb-api-key": `${process.env.BROWSERBASE_API_KEY}`,
      },
    },
  );
  const json = await response.json();
  return json.debuggerFullscreenUrl;
}

(async () => {
  const { id } = await createSession();
  sessionId = id;
  const browser = await chromium.connectOverCDP(
    // we connect to a Session created via the API
    `wss://connect.browserbase.com?apiKey=${process.env.BROWSERBASE_API_KEY}&sessionId=${sessionId}`,
  );
  const defaultContext = browser.contexts()[0];
  const page = defaultContext.pages()[0];

  await page.goto("https://www.browserbase.com", {
    // let's make sure the page is fully loaded before asking for the live debug URL
    waitUntil: "domcontentloaded",
  });

  const debugUrl = await retrieveDebugConnectionURL(sessionId);
  console.log(`Session started, live debug accessible here: ${debugUrl}.`);

  await page.close();
  await browser.close();
})().catch((error) => {
  console.log(
    `Session failed, replay is accessible here: https://www.browserbase.com/sessions/${sessionId}.`,
  );
  console.error(error.message);
});

----------------------------------------

TITLE: Creating Browser Session with Playwright
DESCRIPTION: Demonstrates how to create a new browser session using Playwright with TypeScript, including session creation via API and browser connection.

LANGUAGE: typescript
CODE:
import { chromium } from "playwright-core";

async function createSession() {
  const response = await fetch(`https://www.browserbase.com/v1/sessions`, {
    method: "POST",
    headers: {
      'x-bb-api-key': `${process.env.BROWSERBASE_API_KEY}`,
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      projectId: process.env.BROWSERBASE_PROJECT_ID,
    }),
  });
  const json = await response.json();
  return json;
}

(async () => {
  const { id } = await createSession();

  // TODO:  store the Session `id` to database

  const browser = await chromium.connectOverCDP(
    // we connect to the Session created via the API
    `wss://connect.browserbase.com?apiKey=${process.env.BROWSERBASE_API_KEY}&sessionId=${sessionId}`,
  );

  // ...
})()

----------------------------------------

TITLE: Creating Browser Session with Puppeteer
DESCRIPTION: Shows how to create a new browser session using Puppeteer with TypeScript, including session creation via API and browser connection.

LANGUAGE: typescript
CODE:
import puppeteer from 'puppeteer';
const fetch = require('node-fetch');

async function createSession() {
  const response = await fetch(`https://www.browserbase.com/v1/sessions`, {
    method: "POST",
    headers: {
      'x-bb-api-key': `${process.env.BROWSERBASE_API_KEY}`,
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      projectId: process.env.BROWSERBASE_PROJECT_ID,
    }),
  });
  const json = await response.json();
  return json;
}

(async () => {
  const { id } = await createSession();

  // TODO:  store the Session `id` to database

  const browser = await puppeteer.connect({
    browserWSEndpoint: `wss://connect.browserbase.com?apiKey=${process.env.BROWSERBASE_API_KEY}&sessionId=${id}`,
  });

  // ...
})();

----------------------------------------

TITLE: Creating Browser Session with Python Playwright
DESCRIPTION: Demonstrates session creation and browser connection using Python with Playwright and aiohttp for async operations.

LANGUAGE: python
CODE:
from playwright.async_api import async_playwright
import asyncio
import aiohttp

async def create_session():
    async with aiohttp.ClientSession() as session:
        async with session.post(
            'https://www.browserbase.com/v1/sessions',
            headers={
                'x-bb-api-key': f'{os.environ["BROWSERBASE_API_KEY"]}',
                'Content-Type': 'application/json'
            },
            json={'projectId': f'{os.environ["BROWSERBASE_PROJECT_ID"]}'}
        ) as response:
            json_data = await response.json()
            return json_data

async def main():
    async with async_playwright() as p:
        browser = await p.chromium.connect_over_cdp(
            f'wss://connect.browserbase.com?apiKey={os.environ["BROWSERBASE_API_KEY"]}&sessionId={session_id}'
        )

        # Your code using the browser goes here

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    session_id = loop.run_until_complete(create_session())
    loop.run_until_complete(main())

----------------------------------------

TITLE: Retrieving Debug Connection URL
DESCRIPTION: Shows how to retrieve debug connection URLs for a session in both TypeScript and Python implementations.

LANGUAGE: typescript
CODE:
async function retrieveDebugConnectionURL(sessionId: string) {
  const response = await fetch(
    `https://www.browserbase.com/v1/sessions/${sessionId}/debug`,
    {
      method: "GET",
      headers: {
        'x-bb-api-key': `${process.env.BROWSERBASE_API_KEY}`,
      },
    },
  );
  const json = await response.json();
  return json.debuggerFullscreenUrl;
}

const debugConnectionURL = await retrieveDebugConnectionURL()

// forward `debugConnectionURL` to the front-end

LANGUAGE: python
CODE:
import aiohttp
import os

async def retrieve_debug_connection_url(session_id):
    url = f"https://www.browserbase.com/v1/sessions/{session_id}/debug"
    headers = {
        'x-bb-api-key': os.environ.get('BROWSERBASE_API_KEY', '')
    }
    async with aiohttp.ClientSession() as session:
        async with session.get(url, headers=headers) as response:
            json_data = await response.json()
            return json_data.get('debuggerFullscreenUrl', None)

----------------------------------------

TITLE: Integrating Session iframe in Frontend
DESCRIPTION: Shows how to embed the debug connection URL in an HTML iframe for live session viewing, with optional interaction controls.

LANGUAGE: html
CODE:
<iframe
  src="{debugConnectionURL}"
  sandbox="allow-same-origin allow-scripts"
  style='pointer-events: none;'
/>

----------------------------------------

TITLE: Connecting to Browserbase with Puppeteer TypeScript
DESCRIPTION: Shows how to connect to Browserbase using Puppeteer and interact with page objects.

LANGUAGE: typescript
CODE:
import puppeteer from "puppeteer-core";

(async () => {
  // 1. Get a Browser instance
  const browser = await puppeteer.connect({
    browserWSEndpoint:
    `wss://connect.browserbase.com?apiKey=${process.env.BROWSERBASE_API_KEY}`
  });

  // 2. Get a Page
  const page = await browser.newPage();

  // 3. Act on Page
  await page.goto("https://www.browserbase.com");
  await page.close();
  await browser.close();
})().catch((error) => console.error(error.message));

----------------------------------------

TITLE: Connecting to Browserbase with Playwright Python
DESCRIPTION: Example of connecting to Browserbase using Playwright in Python, showing context and page handling.

LANGUAGE: python
CODE:
from playwright.sync_api import sync_playwright, Playwright

def run(playwright: Playwright):
    chromium = playwright.chromium
    # 1. Get a Browser instance
    browser = chromium.connect_over_cdp('wss://connect.browserbase.com?apiKey=${process.env.BROWSERBASE_API_KEY}')
    # 2. Get a BrowserContext
    context = browser.contexts[0]
    # 3. Get a Page
    page = context.pages[0]

    # 4. Act on Page

    # ...

with sync_playwright() as playwright:
    run(playwright)

----------------------------------------

TITLE: Remote Controlling Browser Session with Puppeteer (TypeScript)
DESCRIPTION: This code snippet shows how to connect to a Browserbase session using Puppeteer, navigate to the Chrome extensions page, and retrieve the text content of a specific element. It demonstrates the process of working with custom extensions in a Browserbase environment.

LANGUAGE: typescript
CODE:
const puppeteer = require("puppeteer");

(async () => {
  // Launch a browser instance
  const browser = await puppeteer.connect({
    browserWSEndpoint: `wss://connect.browserbase.com?apiKey=${process.env.BROWSERBASE_API_KEY}&sessionId=${session.id}`,
  });

  // Create a new page
  const page = await browser.newPage();

  // Specify the URL for the test
  const url = "chrome://extensions";

  // Navigate to the URL
  await page.goto(url);

  // Get the text content of the specified element
  const element = await page.$eval("h1", (heading) => heading.textContent);

  // Ensure the browser is closed after the test
  await browser.close();
})().catch((error) => console.error(error.message));

----------------------------------------

TITLE: Remote Controlling Browser Session with Playwright (Python)
DESCRIPTION: This Python script demonstrates how to create a Browserbase session, connect to it using Playwright, and verify if a custom Chrome extension is loaded. It navigates to the Chrome extensions page and retrieves the text content of a specific element.

LANGUAGE: python
CODE:
from playwright.sync_api import sync_playwright
import requests
import os

def create_session():
    url = 'https://www.browserbase.com/v1/sessions'
    headers = {'Content-Type': 'application/json', 'x-bb-api-key': os.environ["BROWSERBASE_API_KEY"]}
    json = {
        "projectId": os.environ["BROWSERBASE_PROJECT_ID"],
        # Provide your extensionId
        "extensionId": "..."
    }
    response = requests.post(url, json=json, headers=headers)
    return response.json()['id']

def run():
  with sync_playwright() as p:
        session_id = create_session()
        # Launch a browser instance
        browser = p.chromium.connect_over_cdp(
            f"wss://connect.browserbase.com?apiKey={os.environ['BROWSERBASE_API_KEY']}&sessionId={session.id}"
        )

        # Create a new page
        page = browser.new_page()

        # Specify the URL for the test
        url = "chrome://extensions"

        # Navigate to the URL
        page.goto(url)

        # Get the text content of the specified element
        element = page.locator('h1').inner_text()

        # Ensure the browser is closed after the test
        browser.close()


run()

----------------------------------------

TITLE: Remote Controlling Browser Session with Selenium (Python)
DESCRIPTION: This Python script demonstrates how to create a Browserbase session with custom fingerprint options, connect to it using Selenium WebDriver, and navigate to the Chrome extensions page. It uses a custom RemoteConnection class to handle session-specific headers.

LANGUAGE: python
CODE:
from selenium import webdriver
from selenium.webdriver.remote.remote_connection import RemoteConnection
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
import requests
import os

def create_session():
    url = 'https://www.browserbase.com/v1/sessions'
    headers = {'Content-Type': 'application/json', 'x-bb-api-key': os.environ["BROWSERBASE_API_KEY"]}
    json = {
        "projectId": os.environ["BROWSERBASE_PROJECT_ID"],
        # Fingerprint options
        "fingerprint": {
            "locales": ["en", "en-US", "de"],
            "operatingSystems": ["android"]
        }
    }
    response = requests.post(url, json=json, headers=headers)
    return response.json()['id']


class CustomRemoteConnection(RemoteConnection):
    _session_id = None

    def __init__(self, remote_server_addr: str, session_id: str):
        super().__init__(remote_server_addr)
        self._session_id = session_id

    def get_remote_connection_headers(self, parsed_url, keep_alive=False):
        headers = super().get_remote_connection_headers(parsed_url, keep_alive)
        headers.update({'x-bb-api-key': os.environ["BROWSERBASE_API_KEY"]})
        headers.update({'session-id': self._session_id})
        return headers


def run():
    session_id = create_session()
    custom_conn = CustomRemoteConnection('http://connect.browserbase.com/webdriver', session_id)
    options = webdriver.ChromeOptions()
    options.debugger_address = "localhost:9223"
    driver = webdriver.Remote(custom_conn, options=options)
    driver.get(url = "chrome://extensions")
    get_title = driver.title
    print(get_title)
    # Make sure to quit the driver so your session is ended!
    driver.quit()

run()

----------------------------------------

TITLE: Visualizing LlamaIndex Application Flow with Mermaid
DESCRIPTION: This Mermaid flowchart illustrates the data flow in a LlamaIndex application, showing how various document types are processed, indexed, and queried using LLM. It also demonstrates the interaction between a user and the application.

LANGUAGE: mermaid
CODE:
flowchart LR
  user["User"]
  user--"How to start a Session on Browserbase?"-->A
  A--"use the Session REST API"-->user

  subgraph A ["LlamaIndex application"]

    docx["*.docx"]-->dl
    pdf["*.pdf"]-->dl
    webpages["https://docs.browserbase.com/*"]-->dl

    dl["Document Loaders"]
    index["Indexers"]
    stores["Stores"]
    llm["LLM"]

    dl-->index
    index--embeddings-->stores
    llm<--retrieves-->stores
  end

----------------------------------------

TITLE: Visualizing CrewAI Agent Workflow with Mermaid
DESCRIPTION: A flowchart showing how CrewAI agents interact with users and perform tasks like retrieving meeting information, conducting research, and creating summaries.

LANGUAGE: mermaid
CODE:
flowchart BT

    u["User"]

    u--provides the objectives of the meeting-->c
    c--send meeting brief-->u

    subgraph c ["Crew"]
        subgraph tasks ["Tasks"]
            t1["Retrieve meeting information"]
            t2["Research on topic"]
            t3["Summarize meeting"]
        end

        subgraph agents ["Agents"]
            a1["Summary and briefing Agent"]
            a2["Industry Research Agent"]
        end
    end

----------------------------------------

TITLE: Visualizing Haystack Pipeline Architecture with Mermaid
DESCRIPTION: A flowchart showing the components and data flow within a Haystack pipeline, including document store, preprocessor, retriever, reader, and feedback mechanisms.

LANGUAGE: mermaid
CODE:
graph RL
    user["User"]
    user--"How to start a Session on Browserbase in TypeScript?"-->A
    A--"use createSession() method from the SDK"-->user

    subgraph A ["Haystack Pipeline"]
        DS[Document Store] -->|Stores data| P[Preprocessor]
        P -->|Cleans & segments documents| DR[Document Retriever]
        DR -->|Finds relevant documents| R[Reader]
        R -->|Extracts answers| O[Output]
        DS -->|Update/Delete documents| DS
        DS -->|Fetches documents| DR
        DR -->|Optional Re-ranking| RR[Re-ranker]
        RR --> R
        U[User] -->|Inputs queries| DR
        U -->|Provides feedback| F[Feedback Loop]
        F -->|Improves model| R
        O -->|Delivers final answers| U
    end

----------------------------------------

TITLE: Visualizing Langchain.js Components and Interactions
DESCRIPTION: This mermaid flowchart illustrates the structure and interactions within a Langchain.js application. It shows how Chains interact with Model I/O and Agents & Tools, and how Retrieval supplies data to Model I/O. It also depicts the connection to various LLMs and external APIs.

LANGUAGE: mermaid
CODE:
flowchart LR
    a["Application"]


    subgraph A ["Langchain.js"]
      c["Chain"]--interacts with-->m
      c["Chain"]--interacts with-->at


      r["Retrieval"]
      at["Agents & Tools"]
      m["Model I/O"]

      r<--supply and store data-->m

      openai["OpenAI"]
      gemini["Gemini"]
      llama["Llama"]

      at<-->serp["Google Search API"]

      m<-->openai
      m<-->gemini
      m<-->llama
    end

    a--runs-->c

----------------------------------------

TITLE: Frontmatter Configuration in Markdown
DESCRIPTION: Page metadata configuration using YAML frontmatter defining the title, description and layout mode.

LANGUAGE: markdown
CODE:
---
title: "Overview"
description: "Faster development for Python and TypeScript"
mode: "wide"
---

----------------------------------------

TITLE: React Card Component Implementation
DESCRIPTION: JSX implementation of a card-based navigation interface with SVG icons for TypeScript and Python SDK documentation links.

LANGUAGE: jsx
CODE:
<CardGroup cols={2}>
  <Card
    title="TypeScript SDK"
    icon={<svg>...</svg>}
    iconType="light"
    href="/api-reference/typescript-sdk"
  >
    Browserbase for JavaScript and TypeScript
  </Card>
  <Card
    title="Python SDK"
    icon={<svg>...</svg>}
    iconType="light"
    href="/api-reference/python-sdk"
  >
    Quickly load pages and take screenshots with Python > 3.x
  </Card>
</CardGroup>