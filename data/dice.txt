TITLE: SET Command Syntax
DESCRIPTION: The basic syntax and structure of the Redis SET command with its optional parameters for expiration and conditional execution.

LANGUAGE: redis
CODE:
SET key value [EX seconds] [PX milliseconds] [EXAT timestamp] [PXAT timestamp] [XX] [NX] [KEEPTTL]

----------------------------------------

TITLE: URL Shortener Implementation
DESCRIPTION: Complete Go implementation of the URL shortener service using DiceDB and Gin framework. Includes URL structure, DiceDB client initialization, and HTTP endpoint handlers.

LANGUAGE: go
CODE:
package main

import (
    "context"
    "encoding/json"
    "log"
    "net/http"

    "github.com/gin-gonic/gin"
    "github.com/google/uuid"
    "github.com/dicedb/dicedb-go" // DiceDB Go SDK
)

type URL struct {
    ID       string `json:"id"`
    LongURL  string `json:"long_url"`
    ShortURL string `json:"short_url"`
}

var db *dicedb.Client

// Initialize DiceDB connection
func init() {
    db = dicedb.NewClient(&dicedb.Options{
        Addr: "localhost:7379",
    })
}

// Creates a short URL from a given long URL
func CreateShortURL(c *gin.Context) {
    var requestBody URL
    if err := c.ShouldBindJSON(&requestBody); err != nil {
        c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid request"})
        return
    }

    // Generate unique short ID and construct the short URL
    shortID := uuid.New().String()[:8]
    requestBody.ID = shortID
    requestBody.ShortURL = "http://localhost:8080/" + shortID

    // Serialize URL struct to JSON and store it in DiceDB
    urlData, err := json.Marshal(requestBody)
    if err != nil {
        c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to save URL"})
        return
    }

    if err := db.Set(context.Background(), shortID, urlData, 0).Err(); err != nil {
        c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to save URL"})
        return
    }

    c.JSON(http.StatusCreated, gin.H{"short_url": requestBody.ShortURL})
}

// Redirects to the original URL based on the short URL ID
func RedirectURL(c *gin.Context) {
    id := c.Param("id")

    // Retrieve stored URL data from DiceDB
    urlData, err := db.Get(context.Background(), id).Result()
    if err != nil {
        c.JSON(http.StatusNotFound, gin.H{"error": "URL not found"})
        return
    }

    // Deserialize JSON data back into URL struct
    var url URL
    if err := json.Unmarshal([]byte(urlData), &url); err != nil {
        c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to decode URL data"})
        return
    }

    // Redirect user to the original long URL
    c.Redirect(http.StatusFound, url.LongURL)
}

func main() {
    router := gin.Default()

    // Define endpoints for creating short URLs and redirecting
    router.POST("/shorten", CreateShortURL)
    router.GET("/:id", RedirectURL)

    // Start the server on port 8080
    if err := router.Run(":8080"); err != nil {
        log.Fatal("Failed to start server:", err)
    }
}

----------------------------------------

TITLE: SET Command Examples
DESCRIPTION: Practical examples demonstrating various use cases of the SET command including basic setting, expiration times, conditional operations, and TTL management.

LANGUAGE: redis
CODE:
localhost:7379> SET k 43
OK OK
localhost:7379> SET k 43 EX 10
OK OK
localhost:7379> SET k 43 PX 10000
OK OK
localhost:7379> SET k 43 EXAT 1772377267
OK OK
localhost:7379> SET k 43 PXAT 1772377267000
OK OK
localhost:7379> SET k 43 XX
OK OK
localhost:7379> SET k 43 NX
OK (nil)
localhost:7379> SET k 43 KEEPTTL
OK OK
localhost:7379> SET k 43 GET
OK 43

----------------------------------------

TITLE: Real-time Watch Loop Implementation in Go
DESCRIPTION: Core function implementing real-time updates using DiceDB's ZRANGEWATCH command and broadcasting changes to connected clients via WebSocket.

LANGUAGE: go
CODE:
func watchLoop() {
    ctx := context.Background()

    watchConn = client.WatchConn(ctx)
    if watchConn == nil {
        log.Fatal("failed to create watch connection")
        return
    }

    res, err := watchConn.ZRangeWatch(ctx, "leaderboard", "0", "5", "REV", "WITHSCORES")
    if err != nil {
        log.Println("failed to create watch connection:", err)
        return
    }
    watchTopics[res.Fingerprint] = "global_leaderboard"

    watchCh = watchConn.Channel()

    for {
        select {
        case msg := <-watchCh:
            switch watchTopics[msg.Fingerprint] {
            case "global_leaderboard":
                var scores []Score
                for _, z := range msg.Data.([]dicedb.Z) {
                    scores = append(scores, Score{
                        Name:  z.Member.(string),
                        Score: int(z.Score),
                    })
                }

                for _, conn := range connectedUsers {
                    if err := conn.WriteJSON(scores); err != nil {
                        log.Println("websocket write error:", err)
                    }
                }
            }
        case <-ctx.Done():
            return
        }
    }
}

----------------------------------------

TITLE: GET Command Syntax
DESCRIPTION: Shows the basic syntax for the GET command which requires a single key parameter.

LANGUAGE: plaintext
CODE:
GET key

----------------------------------------

TITLE: Starting DiceDB Server with Watch Mode
DESCRIPTION: Docker command to start DiceDB server with watch mode enabled for real-time updates.

LANGUAGE: bash
CODE:
docker run -p 7379:7379 dicedb/dicedb --enable-watch

----------------------------------------

TITLE: Setting Key-Value Pairs in DiceDB using SET Command
DESCRIPTION: The SET command syntax allows for setting a key-value pair with optional expiration and existence conditions. It supports various parameters for customizing the operation, including expiration time in seconds or milliseconds, and options to set the key only if it does or doesn't already exist.

LANGUAGE: bash
CODE:
SET key value [EX seconds | PX milliseconds | EXAT unix-time-seconds | PXAT unix-time-milliseconds | KEEPTTL] [NX | XX]

----------------------------------------

TITLE: Basic Usage of SET Command in DiceDB
DESCRIPTION: This example demonstrates setting a key 'foo' with the value 'bar' using the SET command in DiceDB. The command returns 'OK' upon successful execution.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET foo bar
OK

----------------------------------------

TITLE: Watch Command Output with Value Update
DESCRIPTION: Demonstrates the complete output sequence when watching a key that receives multiple value updates, showing how the reactive notification system works.

LANGUAGE: bash
CODE:
localhost:7379> GET.WATCH k1
entered the watch mode for GET.WATCH k1
OK [fingerprint=2356444921] v1
OK [fingerprint=2356444921] v2

----------------------------------------

TITLE: GET Command Usage Examples
DESCRIPTION: Demonstrates the GET command usage in a Redis-like interface, showing successful value retrieval and handling of non-existent keys.

LANGUAGE: plaintext
CODE:
localhost:7379> SET k1 v1
OK OK
localhost:7379> GET k1
OK v1
localhost:7379> GET k2
(nil)

----------------------------------------

TITLE: Score Update Handler in Go
DESCRIPTION: HTTP handler function to process score updates and add them to the DiceDB leaderboard using ZADD command.

LANGUAGE: go
CODE:
func handleUpdate(w http.ResponseWriter, r *http.Request) {
     var score Score
     if err := json.NewDecoder(r.Body).Decode(&score); err != nil {
         http.Error(w, err.Error(), http.StatusBadRequest)
         return
     }

     err := client.ZAdd(r.Context(), "leaderboard", dicedb.Z{
         Score:  float64(score.Score),
         Member: score.Name,
     }).Err()

     if err != nil {
         http.Error(w, err.Error(), http.StatusInternalServerError)
         return
     }

     w.WriteHeader(http.StatusOK)
}

----------------------------------------

TITLE: Interacting with DiceDB WebSocket Server in JavaScript
DESCRIPTION: Demonstrates how to connect to the DiceDB WebSocket server, send commands, and handle responses using JavaScript. Includes error handling and connection lifecycle events.

LANGUAGE: javascript
CODE:
const ws = new WebSocket('ws://your-server-address:port/ws');

ws.onopen = function() {
    console.log('Connected to WebSocket server');

    // Set a key
    ws.send('SET mykey "Hello, WebSocket!');
};

ws.onmessage = function(event) {
    console.log('Received:', event.data);
};

ws.onerror = function(error) {
    console.error('WebSocket Error:', error);
};

ws.onclose = function(event) {
    console.log('WebSocket connection closed:', event.code, event.reason);
};

----------------------------------------

TITLE: WebSocket Connection Handler in Go
DESCRIPTION: Function to handle WebSocket connections from clients and maintain a list of connected users.

LANGUAGE: go
CODE:
func handleWebSocket(w http.ResponseWriter, r *http.Request) {
    conn, err := upgrader.Upgrade(w, r, nil)
    if err != nil {
        log.Println(err)
        return
    }

    connectedUsers = append(connectedUsers, conn)
}

----------------------------------------

TITLE: Setting Key Value in DiceDB CLI
DESCRIPTION: Shows how to set a value for key 'k1' in DiceDB CLI, which will trigger notifications in the watching terminals.

LANGUAGE: bash
CODE:
localhost:7379> SET k1 v1
OK OK

----------------------------------------

TITLE: Real-time Leaderboard Example Using Q.WATCH
DESCRIPTION: Practical example of using Q.WATCH to create a real-time leaderboard for a game match, including filtering with a WHERE clause and ordering results.

LANGUAGE: bash
CODE:
127.0.0.1:7379> Q.WATCH "SELECT $key, $value WHERE $key like 'match:100:*' AND $value > 10 ORDER BY $value DESC LIMIT 3"
q.watch    from SELECT $key, $value WHERE $key like 'match:100:*' AND $value > 10 ORDER BY $value asc: []

----------------------------------------

TITLE: Querying Data with DiceDB Watch Commands
DESCRIPTION: Examples showing the difference between standard GET commands and their .WATCH variants in DiceDB for implementing reactive queries. The .WATCH variant establishes a subscription that automatically pushes updates when data changes.

LANGUAGE: redis
CODE:
GET k1
GET.WATCH k1

----------------------------------------

TITLE: Basic Key-Value Operations in DiceDB
DESCRIPTION: Demonstrates basic SET and GET operations in DiceDB using the CLI, showing how to store and retrieve a simple key-value pair.

LANGUAGE: bash
CODE:
localhost:7379> SET k1 v1
OK OK
localhost:7379> GET k1
OK v1

----------------------------------------

TITLE: Watching Key Changes with DiceDB CLI
DESCRIPTION: Demonstrates how to watch a key 'k1' for changes using the GET.WATCH command in DiceDB CLI. This needs to be run in two separate terminal sessions to observe the reactive behavior.

LANGUAGE: bash
CODE:
localhost:7379> GET.WATCH k1

----------------------------------------

TITLE: DiceDB CLI Connection Example
DESCRIPTION: Shows the CLI prompt when successfully connected to a local DiceDB instance on the default port.

LANGUAGE: bash
CODE:
localhost:7379>

----------------------------------------

TITLE: Building DiceDB from Source
DESCRIPTION: Steps to clone the DiceDB repository, build the project, and run the server. Requires Golang and a supported platform environment.

LANGUAGE: sh
CODE:
$ git clone https://github.com/dicedb/dice
$ cd dice
$ make build

----------------------------------------

TITLE: GET.WATCH Interactive Example
DESCRIPTION: Interactive example showing GET.WATCH usage across multiple clients, demonstrating real-time value updates and notifications when a watched key is modified.

LANGUAGE: plaintext
CODE:
client1:7379> SET k1 v1
OK OK
client1:7379> GET.WATCH k1
entered the watch mode for GET.WATCH k1


client2:7379> SET k1 v2
OK OK


client1:7379> ...
entered the watch mode for GET.WATCH k1
OK [fingerprint=2356444921] v2

----------------------------------------

TITLE: Getting Hash Field from DiceDB via HTTP
DESCRIPTION: Example of retrieving a hash field using the HGET command over HTTP. Demonstrates both HTTP request format and cURL equivalent.

LANGUAGE: http
CODE:
POST /HGET HTTP/1.1
Host: your-server-address
Content-Type: application/json

{
"key": "test",
"field": "test"
}

LANGUAGE: bash
CODE:
curl --location 'http://your-server-address:PORT/HGET' \
--header 'Content-Type: application/json' \
--data '{
  "key": "test",
  "field": "test"
}'

LANGUAGE: json
CODE:
{
  "status": "success",
  "data": "test"
}

----------------------------------------

TITLE: Setting Key-Value Pair in DiceDB via HTTP
DESCRIPTION: Example of setting a key-value pair using the SET command over HTTP. Shows both HTTP request format and cURL equivalent with JSON payload.

LANGUAGE: http
CODE:
POST /SET HTTP/1.1
Host: your-server-address
Content-Type: application/json

{
"key": "mykey",
"value": "Hello, World!"
}

LANGUAGE: bash
CODE:
curl --location 'http://your-server-address:PORT/SET' \
--header 'Content-Type: application/json' \
--data '{
  "key": "mykey",
  "value": "Hello, World!"
}'

LANGUAGE: json
CODE:
{
  "status": "success",
  "data": "OK"
}

----------------------------------------

TITLE: Watch Command Output in DiceDB CLI
DESCRIPTION: Shows the output received in terminals watching the key 'k1' when its value is set. Includes the watch mode entry message and value update notification.

LANGUAGE: bash
CODE:
localhost:7379> GET.WATCH k1
entered the watch mode for GET.WATCH k1
OK [fingerprint=2356444921] v1

----------------------------------------

TITLE: Getting Value from DiceDB via HTTP
DESCRIPTION: Example of retrieving a value using the GET command over HTTP. Demonstrates both HTTP request format and cURL equivalent.

LANGUAGE: http
CODE:
POST /GET HTTP/1.1
Host: your-server-address
Content-Type: application/json

{
"key": "mykey"
}

LANGUAGE: bash
CODE:
curl --location 'http://your-server-address:PORT/GET' \
--header 'Content-Type: application/json' \
--data '{
  "key": "mykey"
}'

LANGUAGE: json
CODE:
{
  "status": "success",
  "data": "Hello, World!"
}

----------------------------------------

TITLE: EXPIRETIME Usage Example
DESCRIPTION: Demonstrates practical usage of EXPIRETIME command with setting a key, applying expiration, and checking its expiration timestamp. Returns -1 for keys without expiration and -2 for non-existent keys.

LANGUAGE: redis
CODE:
locahost:7379> SET k1 v1
OK OK
locahost:7379> EXPIRE k1 10
OK 1
locahost:7379> EXPIRETIME k1
OK 1740829178

----------------------------------------

TITLE: GET.WATCH Command Syntax
DESCRIPTION: Basic syntax for the GET.WATCH command that creates a subscription to monitor changes on a specific key.

LANGUAGE: plaintext
CODE:
GET.WATCH key

----------------------------------------

TITLE: Executing DEL Command in Redis
DESCRIPTION: The DEL command deletes all specified keys and returns the number of keys deleted. It accepts one or more key names as arguments.

LANGUAGE: redis
CODE:
DEL key [key ...]

----------------------------------------

TITLE: Setting Key with Expiration Time in Seconds
DESCRIPTION: This example shows how to set a key 'foo' with value 'bar' and an expiration time of 10 seconds using the EX option of the SET command in DiceDB.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET foo bar EX 10
OK

----------------------------------------

TITLE: Running DiceDB Server
DESCRIPTION: Command to run the DiceDB server as a Go program after building from source.

LANGUAGE: sh
CODE:
$ go run main.go

----------------------------------------

TITLE: TTL Command Usage Examples
DESCRIPTION: Examples demonstrating TTL command usage including checking keys with no expiration, with expiration, and non-existent keys. Shows return values of -1 (no expiration), positive seconds (remaining TTL), and -2 (key doesn't exist).

LANGUAGE: redis
CODE:
localhost:7379> SET k 43
OK OK
localhost:7379> TTL k
OK -1
localhost:7379> SET k 43 EX 10
OK OK
localhost:7379> TTL k
OK 9
localhost:7379> TTL kn
OK -2

----------------------------------------

TITLE: Using DiceDB WebSocket Server via CLI
DESCRIPTION: Shows how to interact with the DiceDB WebSocket server using the wscat command-line tool. Demonstrates setting and getting a key-value pair.

LANGUAGE: bash
CODE:
wscat -c ws://localhost:8379
127.0.0.1:8379> SET foo bar
127.0.0.1:8379< "OK"
127.0.0.1:8379> GET foo
127.0.0.1:8379< "bar"

----------------------------------------

TITLE: Running DiceDB with Docker
DESCRIPTION: Command to start DiceDB server using Docker, exposing port 7379 for connections.

LANGUAGE: bash
CODE:
$ docker run -p 7379:7379 dicedb/dicedb:latest

----------------------------------------

TITLE: Starting DiceDB Server - Startup Log Example
DESCRIPTION: Shows the server startup output including version information, configuration details, and system parameters.

LANGUAGE: bash
CODE:
        ██████╗ ██╗ ██████╗███████╗██████╗ ██████╗
        ██╔══██╗██║██╔════╝██╔════╝██╔══██╗██╔══██╗
        ██║  ██║██║██║     █████╗  ██║  ██║██████╔╝
        ██║  ██║██║██║     ██╔══╝  ██║  ██║██╔══██╗
        ██████╔╝██║╚██████╗███████╗██████╔╝██████╔╝
        ╚═════╝ ╚═╝ ╚═════╝╚══════╝╚═════╝ ╚═════╝

2025-02-17T07:15:33Z INF starting DiceDB version=0.1.0
2025-02-17T07:15:33Z INF running with total_commands=21
2025-02-17T07:15:33Z INF running with engine=ironhawk
2025-02-17T07:15:33Z INF running with port=7379
2025-02-17T07:15:33Z INF running on cores=16
2025-02-17T07:15:33Z INF running with shards=16

----------------------------------------

TITLE: Setting Key with Expiration Time in Milliseconds
DESCRIPTION: This example demonstrates setting a key 'foo' with value 'bar' and an expiration time of 10000 milliseconds (10 seconds) using the PX option of the SET command in DiceDB.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET foo bar PX 10000
OK

----------------------------------------

TITLE: Executing Q.WATCH Command in DiceDB
DESCRIPTION: Basic syntax for using the Q.WATCH command to monitor data changes based on a DSQL query.

LANGUAGE: bash
CODE:
Q.WATCH <dsql-query>

----------------------------------------

TITLE: Building DiceDB CLI from Source
DESCRIPTION: Steps to clone the DiceDB CLI repository, build the project, and create the CLI binary.

LANGUAGE: sh
CODE:
$ git clone https://github.com/DiceDB/dicedb-cli
$ cd dicedb-cli
$ make build

----------------------------------------

TITLE: Executing PING Command in Redis-like Database
DESCRIPTION: The PING command returns PONG if no argument is provided, otherwise it returns PONG followed by the given message. It's commonly used to test the connection to the server.

LANGUAGE: plaintext
CODE:
localhost:7379> PING
PONG
localhost:7379> PING Hello
PONG Hello

----------------------------------------

TITLE: Redis EXPIRE Command Examples
DESCRIPTION: Shows practical examples of using the EXPIRE command including basic expiration setting, using NX flag to set expiration only if none exists, and XX flag to set expiration only if one already exists.

LANGUAGE: redis
CODE:
locahost:7379> SET k1 v1
OK OK
locahost:7379> EXPIRE k1 10
OK 1
locahost:7379> SET k2 v2
OK OK
locahost:7379> EXPIRE k2 10 NX
OK 1
locahost:7379> EXPIRE k2 20 XX
OK 1
locahost:7379> EXPIRE k2 20 NX
OK 0

----------------------------------------

TITLE: Installing DiceDB CLI using cURL
DESCRIPTION: Command to install DiceDB CLI using a shell script. Requires root privileges.

LANGUAGE: bash
CODE:
$ sudo su
$ curl -sL https://raw.githubusercontent.com/DiceDB/dicedb-cli/refs/heads/master/install.sh | sh

----------------------------------------

TITLE: Demonstrating INCR Command Usage in Redis
DESCRIPTION: Shows an example of using the INCR command to increment a key's value. It first sets a key 'k' to 43, then increments it to 44.

LANGUAGE: redis
CODE:
localhost:7379> SET k 43
OK OK
localhost:7379> INCR k
OK 44

----------------------------------------

TITLE: GETEX Command Usage Examples in Redis
DESCRIPTION: A series of Redis commands demonstrating the usage of GETEX with various expiration options. It shows setting a key, retrieving it with different expiration times, checking the TTL, and persisting the key.

LANGUAGE: redis
CODE:
localhost:7379> SET k v
OK OK
localhsost:7379> GETEX k EX 1000
OK v
localhsost:7379> TTL k
OK 996
localhsost:7379> GETEX k PX 200000
OK v
localhsost:7379> GETEX k EXAT 1772377267
OK v
localhsost:7379> GETEX k PXAT 1772377267000
OK v
localhsost:7379> GETEX k PERSIST
OK v
localhsost:7379> GET k
(nil)

----------------------------------------

TITLE: Redis Protocol Commands for Dice Database
DESCRIPTION: Examples of Redis protocol commands for PING, SET, and GET operations in the Dice database. These commands demonstrate the raw protocol format used for communication.

LANGUAGE: redis
CODE:
PING:       *1\r\n$4\r\nPING\r\n
SET k v:    *3\r\n$3\r\nSET\r\n$1\r\nk\r\n$1\r\nv\r\n
GET k:      *2\r\n$3\r\nGET\r\n$1\r\nk\r\n

----------------------------------------

TITLE: Using SCAN as an Alternative to KEYS in DiceDB
DESCRIPTION: Illustrates the use of the SCAN command as a more efficient alternative to KEYS for large datasets. SCAN uses a cursor-based approach to iterate over the keyspace.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SCAN 0 MATCH key*
1) "0"
2) 1) "key1"
   2) "key2"

----------------------------------------

TITLE: Executing INCRBY Command in Redis
DESCRIPTION: The INCRBY command increments the integer value stored at the specified key by a given delta. If the key doesn't exist, it is created with an initial value of the delta. The command returns the new value of the key after the increment operation.

LANGUAGE: redis
CODE:
INCRBY key delta

----------------------------------------

TITLE: Go Project Initialization
DESCRIPTION: Commands to create and initialize a new Go project with required dependencies.

LANGUAGE: bash
CODE:
mkdir url-shortener
cd url-shortener
go mod init url-shortener

----------------------------------------

TITLE: TYPE Command Usage Examples
DESCRIPTION: Demonstrates practical usage of the TYPE command, showing how it returns 'int' for numeric values and 'none' for non-existent keys.

LANGUAGE: text
CODE:
localhost:7379> SET k 43
OK OK
localhost:7379> TYPE k
int
localhost:7379> TYPE kn
none

----------------------------------------

TITLE: Defining HANDSHAKE Command Syntax
DESCRIPTION: Shows the basic syntax for the HANDSHAKE command which requires a client_id and execution_mode as parameters.

LANGUAGE: plaintext
CODE:
HANDSHAKE client_id execution_mode

----------------------------------------

TITLE: Example Usage of Redis EXISTS Command
DESCRIPTION: An example demonstrating the use of EXISTS command in Redis to check for the existence of multiple keys.

LANGUAGE: redis
CODE:
localhost:7379> SET k1 v1
OK
localhost:7379> SET k2 v2
OK
localhost:7379> EXISTS k1 k2 k3
OK 2

----------------------------------------

TITLE: Using DEL Command with Multiple Keys in Redis
DESCRIPTION: This example demonstrates setting two keys, then deleting them along with a non-existent key. The command returns the number of keys successfully deleted.

LANGUAGE: redis
CODE:
localhost:7379> SET k1 v1
OK OK
localhost:7379> SET k2 v2
OK OK
localhost:7379> DEL k1 k2 k3
OK 2

----------------------------------------

TITLE: DECR Command Example Usage
DESCRIPTION: Example showing how to use DECR command to decrement a value in Redis, demonstrating initial value setting and subsequent decrement operation.

LANGUAGE: redis
CODE:
localhost:7379> SET k 43
OK OK
localhost:7379> DECR k
OK 42

----------------------------------------

TITLE: Installing DiceDB Go SDK
DESCRIPTION: Command to install the DiceDB Go SDK using go get package manager. Installs version 1.0.3 of the SDK.

LANGUAGE: bash
CODE:
go get github.com/dicedb/dicedb-go@v1.0.3

----------------------------------------

TITLE: Basic Usage of HSCAN Command in DiceDB
DESCRIPTION: Illustrates the basic usage of the HSCAN command in DiceDB. It shows how to create a hash, perform HSCAN operations with different cursors, and use the MATCH and COUNT options for filtering and limiting results.

LANGUAGE: bash
CODE:
127.0.0.1:7379> HSET myhash field1 "value1" field2 "value2"
1) (integer) 2

127.0.0.1:7379> HSCAN myhash 0
1) "2"
2) 1) "field1"
   2) "value1"
   3) "field2"
   4) "value2"

127.0.0.1:7379> HSCAN myhash 0 MATCH field* COUNT 1
1) "1"
2) 1) "field1"
   2) "value1"

127.0.0.1:7379> HSCAN myhash 1 MATCH field* COUNT 1
1) "0"
2) 1) "field2"
   2) "value2"

----------------------------------------

TITLE: Basic JSON.GET Command Syntax
DESCRIPTION: Shows the basic syntax for the JSON.GET command in DiceDB.

LANGUAGE: bash
CODE:
JSON.GET <key> [path]

----------------------------------------

TITLE: Setting Multiple Key-Value Pairs with MSET in DiceDB
DESCRIPTION: This snippet demonstrates the basic syntax of the MSET command in DiceDB. It sets multiple key-value pairs in a single atomic operation.

LANGUAGE: bash
CODE:
MSET key1 value1 [key2 value2 ...]

----------------------------------------

TITLE: Syntax for Redis EXISTS Command
DESCRIPTION: The syntax for the EXISTS command in Redis, which checks for the existence of one or more keys.

LANGUAGE: redis
CODE:
EXISTS key [key ...]

----------------------------------------

TITLE: Verb-like Function Names for Actions in Go
DESCRIPTION: Functions that perform actions should use verb-like names to clearly indicate their behavior. Example shows writing details to an io.Writer.

LANGUAGE: go
CODE:
func (c *Config) WriteDetail(w io.Writer) (int64, error)  // okay

----------------------------------------

TITLE: Retrieving Specific JSON Field
DESCRIPTION: Example showing how to retrieve a specific field from a JSON document using JSONPath.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.SET user:1001 $ '{"name": "John Doe", "age": 30, "email": "john.doe@example.com"}'
OK
127.0.0.1:7379> JSON.GET user:1001 $.name
"\"John Doe\""

----------------------------------------

TITLE: Syntax for HSET Command in DiceDB
DESCRIPTION: The basic syntax for the HSET command in DiceDB. It allows setting one or more field-value pairs in a hash.

LANGUAGE: bash
CODE:
HSET key field value [field value ...]

----------------------------------------

TITLE: Primary Version Function Naming in Go
DESCRIPTION: When there are multiple versions of a function and one is considered primary, the type can be omitted from the primary version's name while including it in variants.

LANGUAGE: go
CODE:
func (c *Config) Marshal() ([]byte, error)  // okay
func (c *Config) MarshalText() (string, error)  // okay

----------------------------------------

TITLE: Project Dependencies List
DESCRIPTION: Lists required dependencies including Pulumi AWS providers and Python's boto3 SDK. The dependencies focus on AWS infrastructure management through Pulumi and direct AWS access through boto3.

LANGUAGE: txt
CODE:
pulumi
pulumi-aws
pulumi-aws-native
pulumi-command
boto3

----------------------------------------

TITLE: Testing URL Shortener API
DESCRIPTION: curl commands to test the URL shortener API endpoints for creating short URLs and testing redirection.

LANGUAGE: bash
CODE:
curl -X POST -H "Content-Type: application/json" -d '{"long_url": "https://example.com"}' http://localhost:8080/shorten

----------------------------------------

TITLE: Setting Basic HMSET Command Syntax
DESCRIPTION: Basic syntax demonstration for the HMSET command showing the key, field, and value parameter structure.

LANGUAGE: bash
CODE:
HMSET key field value [field value ...]

----------------------------------------

TITLE: Retrieving Nested JSON Field
DESCRIPTION: Example demonstrating how to retrieve a nested field from a JSON document using dot notation.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.SET user:1002 $ '{"name": "Jane Doe", "address": {"city": "New York", "zip": "10001"}}'
OK
127.0.0.1:7379> JSON.GET user:1002 $.address.city
"\"New York\""

----------------------------------------

TITLE: Retrieving Name Fields Using JSON.MGET in DiceDB
DESCRIPTION: This snippet demonstrates how to use JSON.MGET to retrieve the 'name' field from multiple JSON documents stored in DiceDB. It shows the command and its output.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.MGET user:1 user:2 user:3 $.name
1) "\"Alice\""
2) "\"Bob\""
3) "\"Charlie\""

----------------------------------------

TITLE: Structured Logging with Key-Value Pairs in Go
DESCRIPTION: Illustrates the proper use of structured logging by using key-value pairs instead of concatenating values in the message string.

LANGUAGE: go
CODE:
slog.Info("running on port", config.Port)  // not okay
slog.Info("running with", slog.Int("port", config.Port))  // okay

----------------------------------------

TITLE: Defining HGETALL Command Syntax in DiceDB
DESCRIPTION: Demonstrates the basic syntax for the HGETALL command in DiceDB, which retrieves all fields and values of a hash stored at a specified key.

LANGUAGE: bash
CODE:
HGETALL key

----------------------------------------

TITLE: Creating a New Hash with HSET in DiceDB
DESCRIPTION: Example of using HSET to create a new hash 'product:2000' with multiple fields.

LANGUAGE: bash
CODE:
127.0.0.1:7379> HSET product:2000 name "Laptop" price 999.99 stock 50
3

----------------------------------------

TITLE: Using Lowercase Log Messages in Go
DESCRIPTION: Demonstrates proper case usage in log messages where lowercase is preferred except for proper nouns like 'DiceDB'.

LANGUAGE: go
CODE:
slog.Info("Starting DiceDB", slog.String("version", config.DiceDBVersion))  // not okay
slog.Info("starting DiceDB", slog.String("version", config.DiceDBVersion))  // okay

----------------------------------------

TITLE: Retrieving All Fields and Values from an Existing Hash in DiceDB
DESCRIPTION: Illustrates how to use the HGETALL command to retrieve all fields and values from an existing hash in DiceDB. It first sets a hash using HSET and then retrieves all its contents.

LANGUAGE: bash
CODE:
127.0.0.1:7379> HSET user:1000 name "John Doe" age "30" country "USA"
(integer) 3
127.0.0.1:7379> HGETALL user:1000
1) "name"
2) "John Doe"
3) "age"
4) "30"
5) "country"
6) "USA"

----------------------------------------

TITLE: Setting Multiple JSON Values with JSON.MSET in DiceDB
DESCRIPTION: This example demonstrates how to use the JSON.MSET command to set multiple JSON values atomically. It sets two user profiles with their respective JSON data.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.MSET user:1 '{"name": "Alice", "age": 30}' user:2 '{"name": "Bob", "age": 25}'
OK

----------------------------------------

TITLE: Creating a Branch for Changes in Git
DESCRIPTION: This snippet demonstrates how to create a new branch for your changes, ensuring you're working with the latest codebase from the upstream repository.

LANGUAGE: text
CODE:
$ cd dice
#
# ensure you are starting from the latest code base
# the following steps, ensure your fork's (origin's) master is up-to-date
#
$ git fetch upstream
$ git checkout master
$ git merge upstream/master
# create a branch for your issue
$ git checkout -b <your issue branch>

----------------------------------------

TITLE: Executing JSON.MGET Command in DiceDB
DESCRIPTION: This snippet demonstrates the basic syntax for the JSON.MGET command in DiceDB. It retrieves values from multiple JSON documents stored at different keys using a specified JSON path.

LANGUAGE: bash
CODE:
JSON.MGET key [key ...] path

----------------------------------------

TITLE: Adding New Member to Geospatial Set in DiceDB
DESCRIPTION: Demonstrates adding a new geospatial item 'Palermo' to the 'locations' set.

LANGUAGE: bash
CODE:
127.0.0.1:7379> GEOADD locations 13.361389 38.115556 "Palermo"
1

----------------------------------------

TITLE: Basic ZRANGE Command Syntax
DESCRIPTION: Shows the basic syntax structure for the ZRANGE command with optional parameters WITHSCORES and REV.

LANGUAGE: bash
CODE:
ZRANGE key start stop [WITHSCORES] [REV]

----------------------------------------

TITLE: Successful Authentication Example
DESCRIPTION: Example of successful authentication using the AUTH command with correct password

LANGUAGE: bash
CODE:
127.0.0.1:7379> AUTH your_secret_password
OK

----------------------------------------

TITLE: Setting JSON at Specific Path in DiceDB
DESCRIPTION: This example demonstrates setting a JSON value at a specific path within an existing JSON document using JSON.SET in DiceDB.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.SET user:1001 $.address '{"city": "New York", "zip": "10001"}'
OK

----------------------------------------

TITLE: Basic Usage of ZREM Command in DiceDB
DESCRIPTION: Shows how to create a sorted set, add members with scores, and then remove members using the ZREM command. Demonstrates single and multiple member removal.

LANGUAGE: bash
CODE:
127.0.0.1:7379> ZADD myzset 1 "one" 2 "two" 3 "three" 4 "four" 5 "five"
(integer) 5
127.0.0.1:7379> ZREM myzset one
(integer) 1
127.0.0.1:7379> ZREM myzset two six
(integer) 1
127.0.0.1:7379> ZREM myzset three four
(integer) 2

----------------------------------------

TITLE: Setting Redis Key Expiration Syntax
DESCRIPTION: Demonstrates the basic syntax for the EXPIRE command which sets a timeout on keys. The command accepts a key name, duration in seconds, and optional NX or XX flags.

LANGUAGE: redis
CODE:
EXPIRE key seconds [NX | XX]

----------------------------------------

TITLE: Inserting Multiple Values with LPUSH in DiceDB
DESCRIPTION: An example of inserting multiple values 'hello' and 'world' at the head of the list 'mylist'. The values are inserted in the order given.

LANGUAGE: bash
CODE:
127.0.0.1:7379> LPUSH mylist "hello" "world"
(integer) 2

----------------------------------------

TITLE: ZRANGE with WITHSCORES Option
DESCRIPTION: Shows how to retrieve elements with their scores using the WITHSCORES option.

LANGUAGE: bash
CODE:
127.0.0.1:7379> ZRANGE leaderboard 0 2 WITHSCORES
1) "Alice"
2) "50"
3) "Charlie"
4) "60"
5) "Bob"
6) "70"

----------------------------------------

TITLE: Creating and Updating Git Branch
DESCRIPTION: Commands for creating a new branch from updated master and ensuring the local repository is in sync with upstream.

LANGUAGE: text
CODE:
$ cd docs
#
# ensure you are starting from the latest code base
# the following steps, ensure your fork's (origin's) master is up-to-date
#
$ git fetch upstream
$ git checkout master
$ git merge upstream/master
# create a branch for your issue
$ git checkout -b <your issue branch>

----------------------------------------

TITLE: Basic Usage of BITFIELD Command
DESCRIPTION: Demonstrates basic usage of the BITFIELD command, incrementing a 5-bit signed integer and retrieving a 4-bit unsigned integer.

LANGUAGE: bash
CODE:
127.0.0.1:7379> BITFIELD mykey INCRBY i5 100 1 GET u4 0
1) "1"
2) "0"

----------------------------------------

TITLE: Basic Usage of LRANGE in DiceDB
DESCRIPTION: This example demonstrates creating a list with two elements using RPUSH, then retrieving all elements using LRANGE. It also shows how to use negative indices to retrieve elements from the end of the list.

LANGUAGE: bash
CODE:
127.0.0.1:7379> RPUSH mylist "one"
(integer) 1
127.0.0.1:7379> RPUSH mylist "two"
(integer) 2
127.0.0.1:7379> LRANGE mylist 0 100
1) "one"
2) "two"
127.0.0.1:7379> LRANGE mylist -1 10
1) "two"

----------------------------------------

TITLE: Extracting Keys from MSET Command in DiceDB
DESCRIPTION: This snippet demonstrates how to use the COMMAND GETKEYS command to extract keys from an MSET operation in DiceDB. It shows that the command correctly identifies 'key1' and 'key2' as the keys involved in the MSET operation.

LANGUAGE: bash
CODE:
127.0.0.1:7379> COMMAND GETKEYS MSET key1 value1 key2 value2
1) "key1"
2) "key2"

----------------------------------------

TITLE: TTL Command Syntax
DESCRIPTION: Basic syntax for the Redis TTL command that checks a key's remaining time to live.

LANGUAGE: redis
CODE:
TTL key

----------------------------------------

TITLE: Listing Connected Clients in DiceDB
DESCRIPTION: The CLIENT LIST command returns information and statistics about the client connections server in a human-readable format.

LANGUAGE: sh
CODE:
127.0.0.1:7379> CLIENT LIST
id=3 addr=127.0.0.1:6379 fd=6 name= age=3 idle=0 flags=N db=0 sub=0 psub=0 multi=-1 qbuf=0 qbuf-free=0 obl=0 oll=0 omem=0 events=r cmd=client

----------------------------------------

TITLE: GETSET Command with Non-Existent Key in DiceDB (Bash)
DESCRIPTION: Demonstrates using GETSET with a key that doesn't exist. The command sets the new value and returns nil since there was no previous value.

LANGUAGE: bash
CODE:
127.0.0.1:7379> GETSET newkey "NewValue"
(nil)

----------------------------------------

TITLE: Basic Usage of JSON.OBJLEN in DiceDB
DESCRIPTION: Shows how to use JSON.OBJLEN to count the number of keys in the root JSON object. It demonstrates setting a JSON object and then querying its length.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.SET a $ '{"name": "Alice", "age": 30, "address": {"city": "Wonderland", "zipcode": "12345"}}'
"OK"
127.0.0.1:7379> JSON.OBJLEN a $
1) 3

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.OBJLEN a
3

----------------------------------------

TITLE: Basic HLEN Usage Example
DESCRIPTION: Demonstrates creating a hash with two fields and retrieving its length using HLEN.

LANGUAGE: bash
CODE:
127.0.0.1:7379> HSET myhash field1 "value1" field2 "value2"
(integer) 2

127.0.0.1:7379> HLEN myhash
(integer) 2

----------------------------------------

TITLE: Creating and Pushing a Pull Request
DESCRIPTION: This snippet shows the git commands to commit changes, push them to your fork, and create a pull request for review.

LANGUAGE: text
CODE:
$ git add <files required for the change>
$ git commit -m "Meaningful oneliner for the change"
$ git push origin <your issue branch>

After this, create a PullRequest in `github <https://github.com/dicedb/docs/pulls>`_. Make sure you have linked the relevant Issue in the description with "Closes #number" or "Fixes #number".

----------------------------------------

TITLE: COMMAND Example Output
DESCRIPTION: Practical example showing actual command output with metadata for multiple DiceDB commands

LANGUAGE: bash
CODE:
127.0.0.1:7379> COMMAND
  1) 1) "AUTH"
     2) (integer) 0
     3) (integer) 0
     4) (integer) 0
     5) (integer) 0
  2) 1) "HSCAN"
     2) (integer) -3
     3) (integer) 1
     4) (integer) 0
     5) (integer) 0
  3) 1) "PERSIST"
     2) (integer) 0
     3) (integer) 0
     4) (integer) 0
     5) (integer) 0
  4) 1) "PING"
     2) (integer) -1
     3) (integer) 0
     4) (integer) 0
     5) (integer) 0
   .
   .
   .

----------------------------------------

TITLE: MGET Command Basic Syntax
DESCRIPTION: Basic syntax for the MGET command to retrieve multiple key values

LANGUAGE: bash
CODE:
MGET key [key ...]

----------------------------------------

TITLE: Basic JSON.TYPE Command Usage in DiceDB
DESCRIPTION: Demonstrates basic usage of JSON.TYPE command to retrieve data types of different JSON values including strings, numbers, and objects.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.SET user:1001 $ '{"name": "John", "age": 30, "address": {"city": "New York", "zip": "10001"}}'
OK
127.0.0.1:7379> JSON.TYPE user:1001 $.name
"string"
127.0.0.1:7379> JSON.TYPE user:1001 $.age
"number"
127.0.0.1:7379> JSON.TYPE user:1001 $.address
"object"
127.0.0.1:7379> JSON.TYPE user:1001 $.address.city
"string"

----------------------------------------

TITLE: Using INCRBY Command with Redis CLI
DESCRIPTION: This example demonstrates the usage of the INCRBY command in Redis CLI. It first sets a key 'k' with value 43, then increments it by 10 using INCRBY, resulting in a new value of 53.

LANGUAGE: redis
CODE:
localhost:7379> SET k 43
OK OK
locahost:7379> INCRBY k 10
OK 53

----------------------------------------

TITLE: Overwriting Existing Key with RENAME in DiceDB
DESCRIPTION: This example shows how renaming a key to an existing key name overwrites the existing key's value. It sets two keys, renames one to overwrite the other, and checks the result.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET key1 "Value1"
OK
127.0.0.1:7379> SET key2 "Value2"
OK
127.0.0.1:7379> RENAME key1 key2
OK
127.0.0.1:7379> GET key2
"Value1"

----------------------------------------

TITLE: Retrieving Multiple Fields with HMGET in DiceDB
DESCRIPTION: This snippet demonstrates how to use the HMGET command to retrieve multiple fields from a hash in DiceDB. It shows the command syntax and expected output format.

LANGUAGE: bash
CODE:
127.0.0.1:7379> HMGET product:2000 name price stock
1) "Laptop"
2) "999.99"
3) "50"

----------------------------------------

TITLE: Basic HINCRBY Usage - Non-existing Hash Key
DESCRIPTION: Example showing how to use HINCRBY command on a non-existing hash key, which creates the hash and field with the specified increment value.

LANGUAGE: bash
CODE:
127.0.0.1:7379> HINCRBY keys field1 10
(integer) 10

----------------------------------------

TITLE: Using PTTL Command with Key Having Expiration in DiceDB
DESCRIPTION: Illustrates setting a key with expiration and using PTTL to check its remaining time to live in milliseconds.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET mykey "Hello"
127.0.0.1:7379> EXPIRE mykey 10
127.0.0.1:7379> PTTL mykey
(integer) 10000

----------------------------------------

TITLE: Adding Geospatial Points and Calculating Distances in DiceDB
DESCRIPTION: This example shows how to add geospatial points to a set using GEOADD and then calculate distances between them using GEODIST. It demonstrates adding New York and Toronto coordinates, then calculating the distance between them in different units.

LANGUAGE: bash
CODE:
127.0.0.1:7379> GEOADD cities -74.0060 40.7128 "New York"
1
127.0.0.1:7379> GEOADD cities -79.3470 43.6510 "Toronto"
1
127.0.0.1:7379> GEODIST cities "New York" "Toronto"
"548064.1868"
127.0.0.1:7379> GEODIST cities "New York" "Toronto km"
"548.0642"
127.0.0.1:7379> GEODIST cities "New York" "Toronto mi"
"340.5521"

----------------------------------------

TITLE: Rebasing Changes on Updated Master
DESCRIPTION: This snippet demonstrates how to rebase your changes on top of the latest master branch, resolving any conflicts that may arise.

LANGUAGE: text
CODE:
# commit your changes
$ git add <updated files>
$ git commit -m "Meaningful message for the update"
# pull new changes
$ git checkout master
$ git fetch upstream
$ git merge upstream/master
$ git checkout <your issue branch>
$ git rebase master

At this time, if rebase flags any conflicts, resolve the conflicts and follow the instructions provided by the rebase command.

Run additional tests/validations for the new changes and update the PR by pushing your changes:

----------------------------------------

TITLE: Redis Command Implementation Changes
DESCRIPTION: New Redis-compatible commands added to DiceDB including JSON.ARRLEN, HGET, and COMMAND support.

LANGUAGE: redis
CODE:
JSON.ARRLEN
HGET
COMMAND

----------------------------------------

TITLE: Executing KEYS Command in DiceDB
DESCRIPTION: Demonstrates the basic syntax and usage of the KEYS command in DiceDB. The command is used to find all keys matching a given pattern in the database.

LANGUAGE: bash
CODE:
KEYS pattern

----------------------------------------

TITLE: Printing Help Information for COMMAND in DiceDB
DESCRIPTION: This example shows the output of the COMMAND HELP command in DiceDB. It lists all available subcommands for the COMMAND command, including their descriptions and usage instructions.

LANGUAGE: bash
CODE:
127.0.0.1:7379> COMMAND HELP
 1) "COMMAND <subcommand> [<arg> [value] [opt] ...]. Subcommands are:"
 2) "(no subcommand)"
 3) "     Return details about all DiceDB commands."
 4) "COUNT"
 5) "     Return the total number of commands in this DiceDB server."
 6) "LIST"
 7) "     Return a list of all commands in this DiceDB server."
 8) "INFO [<command-name> ...]"
 9) "     Returns details about the specified DiceDB commands. If no command names are given, documentation details for all commands are returned"
 10) "GETKEYS <full-command>"
 11) "     Return the keys from a full DiceDB command."
 12) "HELP"
 13) "     Print this help."

----------------------------------------

TITLE: HINCRBY Usage - Existing Hash and Field
DESCRIPTION: Shows how HINCRBY increments the value of an existing field in an existing hash.

LANGUAGE: bash
CODE:
127.0.0.1:7379> HINCRBY keys field2 10
(integer) 20

----------------------------------------

TITLE: Checking Field Existence in DiceDB Hash
DESCRIPTION: Example of using HEXISTS to check if the 'name' field exists in the hash stored at key 'user:1001'. Returns 1 if the field exists.

LANGUAGE: bash
CODE:
127.0.0.1:7379> HEXISTS user:1001 name
1

----------------------------------------

TITLE: Executing RPUSH Command in DiceDB
DESCRIPTION: The RPUSH command syntax for inserting one or multiple values at the tail of a list in DiceDB. It includes the key parameter and one or more value parameters.

LANGUAGE: bash
CODE:
RPUSH key value [value ...]

----------------------------------------

TITLE: Basic HINCRBYFLOAT Usage Example
DESCRIPTION: Demonstrates using HINCRBYFLOAT on a non-existing hash key to create and increment a value.

LANGUAGE: bash
CODE:
127.0.0.1:7379> HINCRBYFLOAT keys field1 10.2
"10.2"

----------------------------------------

TITLE: Retrieving Values from Hash in DiceDB using HVALS
DESCRIPTION: Example of using the HVALS command to retrieve all values in the hash stored at key 'user:1001'. The command returns an array of values without their associated field names.

LANGUAGE: bash
CODE:
127.0.0.1:7379> HVALS user:1001
1) "John Doe"
2) "30"
3) "john@example.com"

----------------------------------------

TITLE: Counting Keys in Nested JSON Objects with JSON.OBJLEN in DiceDB
DESCRIPTION: Illustrates how to use JSON.OBJLEN with a specific JSON path to count keys in a nested object within the JSON structure.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.SET b $ '{"name": "Alice", "address": {"city": "Wonderland", "state": "Fantasy", "zipcode": "12345"}}'
"OK"
127.0.0.1:7379> JSON.OBJLEN b $.address
1) 3

----------------------------------------

TITLE: Setting JSON Value with JSON.SET in DiceDB
DESCRIPTION: This snippet demonstrates the basic syntax for using the JSON.SET command in DiceDB. It sets a JSON value at the root of a new key.

LANGUAGE: bash
CODE:
JSON.SET <key> <path> <json> [NX | XX]

----------------------------------------

TITLE: HSCAN Command Syntax in DiceDB
DESCRIPTION: Demonstrates the syntax for the HSCAN command in DiceDB, used to incrementally iterate over hash fields. It includes optional parameters for pattern matching and count limitation.

LANGUAGE: bash
CODE:
HSCAN key cursor [MATCH pattern] [COUNT count]

----------------------------------------

TITLE: Executing PFCOUNT Command in DiceDB
DESCRIPTION: Demonstrates the basic syntax for using the PFCOUNT command in DiceDB to estimate the cardinality of HyperLogLog data structures.

LANGUAGE: bash
CODE:
PFCOUNT key [key ...]

----------------------------------------

TITLE: Debugging Memory Usage of Specific JSON Path in DiceDB
DESCRIPTION: This example shows how to use the JSON.DEBUG MEMORY command to get the memory usage of a specific JSON value at a given path within the JSON data stored in DiceDB.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.SET myjson $ '{"a":1,"b":2}',
OK
127.0.0.1:7379> JSON.DEBUG MEMORY myjson $.a
1) (integer) 16

----------------------------------------

TITLE: HINCRBYFLOAT with Existing Field
DESCRIPTION: Demonstrates incrementing an existing field in a hash with a floating-point value.

LANGUAGE: bash
CODE:
127.0.0.1:7379> HINCRBYFLOAT keys field2 1.2
"1.4"

----------------------------------------

TITLE: Basic ZCARD Usage Example
DESCRIPTION: Demonstrates creating a sorted set, checking its cardinality, adding elements, and rechecking cardinality

LANGUAGE: bash
CODE:
127.0.0.1:7379> ZADD myzset 1 "one" 2 "two"
(integer) 2

127.0.0.1:7379> ZCARD myzset
(integer) 2

127.0.0.1:7379> ZADD myzset 3 "three"
(integer) 1

127.0.0.1:7379> ZCARD myzset
(integer) 3

----------------------------------------

TITLE: Executing HKEYS Command in DiceDB
DESCRIPTION: The HKEYS command syntax for retrieving all fields in a hash stored at a given key. It takes a single parameter 'key' which is the name of the key holding the hash.

LANGUAGE: bash
CODE:
HKEYS key

----------------------------------------

TITLE: Basic HLEN Command Syntax
DESCRIPTION: Shows the basic syntax for the HLEN command in DiceDB.

LANGUAGE: bash
CODE:
HLEN key

----------------------------------------

TITLE: Basic Usage of GETSET Command in DiceDB (Bash)
DESCRIPTION: Shows a basic example of using the GETSET command. It first sets a key 'mykey' to 'Hello', then uses GETSET to retrieve the old value and set a new value 'World'.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET mykey "Hello"
127.0.0.1:7379> GETSET mykey "World"
"Hello"

----------------------------------------

TITLE: Basic Usage of SDIFF Command in DiceDB
DESCRIPTION: Shows a basic example of using the SDIFF command to compute the difference between three sets. The element "b" is unique to set1.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SADD set1 "a" "b" "c"
127.0.0.1:7379> SADD set2 "c" "d" "e"
127.0.0.1:7379> SADD set3 "a" "f"
127.0.0.1:7379> SDIFF set1 set2 set3

"b"

----------------------------------------

TITLE: Retrieving Entire JSON Document
DESCRIPTION: Example demonstrating how to retrieve a complete JSON document using JSON.GET command.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.SET user:1001 $ '{"name": "John Doe", "age": 30, "email": "john.doe@example.com"}'
OK
127.0.0.1:7379> JSON.GET user:1001
"{\"name\":\"John Doe\",\"age\":30,\"email\":\"john.doe@example.com\"}"

----------------------------------------

TITLE: Executing GETSET Command in DiceDB (Bash)
DESCRIPTION: Demonstrates the basic syntax for the GETSET command in DiceDB. This command retrieves the current value of a key and simultaneously sets a new value for that key in a single atomic operation.

LANGUAGE: bash
CODE:
GETSET key value

----------------------------------------

TITLE: Basic PERSIST Command Syntax
DESCRIPTION: Shows the basic syntax for using the PERSIST command in DiceDB.

LANGUAGE: bash
CODE:
PERSIST key

----------------------------------------

TITLE: Basic LINSERT Usage Example
DESCRIPTION: Demonstrates basic usage of LINSERT command by creating a list and inserting elements before and after existing values.

LANGUAGE: bash
CODE:
127.0.0.1:7379> RPUSH mylist "one"
(integer) 1
127.0.0.1:7379> RPUSH mylist "two"
(integer) 2
127.0.0.1:7379> LINSERT mylist after "two" "four"
(integer) 3
127.0.0.1:7379> LRANGE mylist 0 100
1) "one"
2) "two"
3) "four"
127.0.0.1:7379> LINSERT mylist before "four" "three"
(integer) 4
127.0.0.1:7379> LRANGE mylist 0 100
1) "one"
2) "two"
3) "three"
4) "four"

----------------------------------------

TITLE: HSTRLEN Command Syntax - DiceDB
DESCRIPTION: Basic syntax for the HSTRLEN command that accepts a key and field parameter to return the string length of a hash field value.

LANGUAGE: bash
CODE:
HSTRLEN key field

----------------------------------------

TITLE: Basic GETBIT Usage Example
DESCRIPTION: Demonstrates setting a key 'foo' with value 'a' and retrieving the bit value at index 1.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET foo "a"
OK
127.0.0.1:7379> GETBIT foo 1
1

----------------------------------------

TITLE: PERSIST on Non-Existent Key
DESCRIPTION: Shows the behavior when attempting to persist a key that doesn't exist in the database.

LANGUAGE: bash
CODE:
127.0.0.1:7379> PERSIST mykey
(integer) 0

----------------------------------------

TITLE: Basic HSTRLEN Usage Example - DiceDB
DESCRIPTION: Example showing how to create a hash with HSET and use HSTRLEN to get the length of a field value.

LANGUAGE: bash
CODE:
127.0.0.1:7379> HSET myhash field1 "helloworld" field2 "value2"
(integer) 1

127.0.0.1:7379> HSTRLEN myhash field1
(integer) 10

----------------------------------------

TITLE: Incrementing Non-Existent Key
DESCRIPTION: Shows how INCRBYFLOAT handles incrementing a key that doesn't exist, treating it as 0 initially.

LANGUAGE: bash
CODE:
127.0.0.1:7379>INCRBYFLOAT newcounter 5.3
"5.3"

----------------------------------------

TITLE: Basic Usage of JSON.ARRLEN Command
DESCRIPTION: Demonstrates setting a JSON document with an array and retrieving its length using JSON.ARRLEN command.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.SET user:1001 $ '{"name":"John Doe","emails":["john.doe@example.com","johndoe@gmail.com"],"age":30}'
OK
127.0.0.1:7379> JSON.ARRLEN user:1001 $.emails
(integer) 2

----------------------------------------

TITLE: Setting Multiple Field-Value Pairs with HSET in DiceDB
DESCRIPTION: Example of using HSET to set multiple fields in a 'user:1000' hash.

LANGUAGE: bash
CODE:
127.0.0.1:7379> HSET user:1000 name "John Doe" age 30 email "john.doe@example.com"

----------------------------------------

TITLE: Retrieving Set Members with SMEMBERS in DiceDB
DESCRIPTION: This snippet demonstrates the basic syntax and usage of the SMEMBERS command in DiceDB. It shows how to retrieve all members from a set, handle empty sets, and potential errors.

LANGUAGE: bash
CODE:
SMEMBERS key

LANGUAGE: bash
CODE:
127.0.0.1:7379> SADD myset "apple" "banana" "cherry"
(integer) 3
127.0.0.1:7379> SMEMBERS myset
1) "apple"
2) "banana"
3) "cherry"

LANGUAGE: bash
CODE:
127.0.0.1:7379> SMEMBERS nonexistentset
(empty array)

LANGUAGE: bash
CODE:
127.0.0.1:7379> SMEMBERS
(error) ERR wrong number of arguments for 'smembers' command

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET mystring "hello"
OK
127.0.0.1:7379> SMEMBERS mystring
(error) WRONGTYPE Operation against a key holding the wrong kind of value

----------------------------------------

TITLE: Basic JSON.FORGET Syntax
DESCRIPTION: Shows the basic syntax for the JSON.FORGET command in DiceDB.

LANGUAGE: bash
CODE:
JSON.FORGET key path

----------------------------------------

TITLE: Generating Latency Doctor Report in DiceDB
DESCRIPTION: Example usage of the LATENCY DOCTOR subcommand in DiceDB. It provides a human-readable report of latency issues, including potential causes and suggestions for mitigation.

LANGUAGE: bash
CODE:
127.0.0.1:7379> LATENCY DOCTOR
Latency Doctor Report:
- Command latency spikes detected. Consider optimizing your commands.
- Fork latency spikes detected. Check your system's I/O performance.

----------------------------------------

TITLE: HSTRLEN Non-existent Key Example - DiceDB
DESCRIPTION: Example demonstrating HSTRLEN behavior when accessing a non-existent hash key.

LANGUAGE: bash
CODE:
127.0.0.1:7379> HSTRLEN nonExistentHash field1
(integer) 0

----------------------------------------

TITLE: Error Handling - Invalid Value Type
DESCRIPTION: Demonstrates error handling when attempting to increment a non-numeric string value.

LANGUAGE: bash
CODE:
127.0.0.1:7379>SET mystring "hello"
OK
127.0.0.1:7379>INCRBYFLOAT mystring 2.3
(error) ERR value is not a valid float

----------------------------------------

TITLE: Deleting JSON Field Example
DESCRIPTION: Example showing how to delete an 'age' field from a JSON document stored at key 'user:1001'.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.FORGET user:1001 $.age
(integer) 1

----------------------------------------

TITLE: Updating Existing Hash Fields
DESCRIPTION: Example demonstrating how to update multiple fields in an existing hash simultaneously.

LANGUAGE: bash
CODE:
127.0.0.1:7379> HMSET product:4000 price 279.99 stock 25
OK

----------------------------------------

TITLE: Basic APPEND Usage Example
DESCRIPTION: Demonstrates setting a key 'foo' with value 'bar' using APPEND command.

LANGUAGE: bash
CODE:
127.0.0.1:7379> APPEND foo bar
(integer) 3

----------------------------------------

TITLE: Basic Usage of LPUSH Command in DiceDB
DESCRIPTION: An example of inserting a single value 'world' at the head of the list 'mylist'. If the list doesn't exist, it will be created.

LANGUAGE: bash
CODE:
127.0.0.1:7379> LPUSH mylist "world"
(integer) 1

----------------------------------------

TITLE: Updating a Single Field in Existing Hash with HSET in DiceDB
DESCRIPTION: Shows how to update a single field in an existing 'user:1000' hash.

LANGUAGE: bash
CODE:
127.0.0.1:7379> HSET user:1000 age 31

----------------------------------------

TITLE: COMMAND Response Format
DESCRIPTION: Example of the structured response format returned by the COMMAND command, showing command metadata including name, arity, flags, and key positions

LANGUAGE: bash
CODE:
127.0.0.1:7379> COMMAND
  1)  1) "command-name"
      2) (integer) arity
      3) 1) "flag1"       # Optional
         2) "flag2"      # Optional
         ...
      4) (integer) first-key
      5) (integer) last-key
      6) (integer) key-step
  .
  .
  .

----------------------------------------

TITLE: Deleting Array Element Example
DESCRIPTION: Example demonstrating how to delete an element from a JSON array in the document.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.FORGET user:1002 $.hobbies[1]
(integer) 1

----------------------------------------

TITLE: Basic Usage of PFMERGE Command
DESCRIPTION: Demonstrates merging three HyperLogLogs with different values and checking the count of unique elements.

LANGUAGE: bash
CODE:
127.0.0.1:7379> PFADD hll1 "a" "b" "c"
(integer) 1
127.0.0.1:7379> PFADD hll2 "c" "d" "e"
(integer) 1
127.0.0.1:7379> PFADD hll3 "e" "f" "g"
(integer) 1
127.0.0.1:7379> PFMERGE hll_merged hll1 hll2 hll3
OK
127.0.0.1:7379> PFCOUNT hll_merged
(integer) 7

----------------------------------------

TITLE: Invalid HMSET Usage with Wrong Key Type
DESCRIPTION: Example showing error when attempting to use HMSET on a non-hash key type.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET product:4000 "This is a string"
OK
127.0.0.1:7379> HMSET product:4000 name "Tablet"
(error) WRONGTYPE Operation against a key holding the wrong kind of value

----------------------------------------

TITLE: Appending Single Value to JSON Array
DESCRIPTION: Example of appending a single numeric value to an existing JSON array

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.SET myjson . '{"numbers": [1, 2, 3]}'
OK
127.0.0.1:7379> JSON.ARRAPPEND myjson .numbers 4
(integer) 4
127.0.0.1:7379> JSON.GET myjson
"{\"numbers\":[1,2,3,4]}"

----------------------------------------

TITLE: Debugging Memory Usage of Entire JSON Data in DiceDB
DESCRIPTION: This snippet demonstrates how to use the JSON.DEBUG MEMORY command to get the memory usage of the entire JSON data stored under a specific key in DiceDB.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.SET myjson $ '{"a":1}',
OK
127.0.0.1:7379> JSON.DEBUG MEMORY myjson
(integer) 89

----------------------------------------

TITLE: Deleting Single Field from Hash
DESCRIPTION: Demonstrates deleting a single field from a hash and verifying its removal.

LANGUAGE: bash
CODE:
127.0.0.1:7379> HSET user:1000 name "John Doe"
(integer) 1
127.0.0.1:7379> HDEL user:1000 name
(integer) 1
127.0.0.1:7379> HGET user:1000 name
(nil)

----------------------------------------

TITLE: Error Handling: Non-existent Key
DESCRIPTION: Shows error response when attempting to append to a non-existent key

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.ARRAPPEND nonexistingkey .array 1
(error) ERR key does not exist

----------------------------------------

TITLE: Syntax for LLEN Command in DiceDB
DESCRIPTION: The basic syntax for the LLEN command in DiceDB, used to retrieve the length of a list stored at a specified key.

LANGUAGE: bash
CODE:
LLEN key

----------------------------------------

TITLE: Retrieving from a Non-Existing Key in DiceDB
DESCRIPTION: Shows the behavior of the HGETALL command when attempting to retrieve data from a non-existing key in DiceDB. It returns an empty array.

LANGUAGE: bash
CODE:
127.0.0.1:7379> HGETALL user:2000
(empty array)

----------------------------------------

TITLE: Syntax for ZREM Command in DiceDB
DESCRIPTION: Demonstrates the basic syntax for the ZREM command, which removes specified members from a sorted set stored at a given key.

LANGUAGE: bash
CODE:
ZREM key member [member ...]

----------------------------------------

TITLE: Installing GoLangCI-Lint
DESCRIPTION: Commands to install GoLangCI-Lint, a linting tool for Go projects. Requires root privileges.

LANGUAGE: bash
CODE:
$ sudo su
$ sudo curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sudo sh -s -- -b /bin v1.64.6

----------------------------------------

TITLE: Basic OBJECT Command Syntax
DESCRIPTION: The basic syntax for using the OBJECT command in DiceDB with its subcommand and key parameter.

LANGUAGE: bash
CODE:
OBJECT <subcommand> <key>

----------------------------------------

TITLE: HGET Non-Existent Key Example
DESCRIPTION: Shows the behavior when trying to retrieve a field from a non-existent key.

LANGUAGE: bash
CODE:
127.0.0.1:7379> HGET user:2000 name
(nil)

----------------------------------------

TITLE: Error Handling: Non-Array Path
DESCRIPTION: Shows error when attempting to append to a path that doesn't contain an array

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.SET myjson . '{"object": {"key": "value"}}'
OK
127.0.0.1:7379> JSON.ARRAPPEND myjson .object 4
(error) ERR path is not an array

----------------------------------------

TITLE: Logging Specific Details in Go
DESCRIPTION: Illustrates how to log specific, actionable details instead of general statements that provide little value.

LANGUAGE: go
CODE:
slog.Info("server is running")  // not okay
slog.Info("running with", slog.Int("port", config.Port))  // okay

----------------------------------------

TITLE: Invalid Usage of HMGET with Non-Hash Key in DiceDB
DESCRIPTION: This snippet illustrates the error that occurs when trying to use HMGET on a key that doesn't contain a hash. It shows the WRONGTYPE error message.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET product:2000 "This is a string"
OK
127.0.0.1:7379> HMGET product:2000 name price
(error) WRONGTYPE Operation against a key holding the wrong kind of value

----------------------------------------

TITLE: Basic PFADD Command Syntax
DESCRIPTION: Demonstrates the basic syntax for the PFADD command to add elements to a HyperLogLog structure.

LANGUAGE: bash
CODE:
PFADD key element [element ...]

----------------------------------------

TITLE: Querying List Elements with LRANGE in DiceDB
DESCRIPTION: The LRANGE command retrieves specified elements from a list stored at a given key. It takes three parameters: the key, start offset, and stop offset. The command returns an array of elements within the specified range.

LANGUAGE: bash
CODE:
LRANGE key start stop

----------------------------------------

TITLE: ZADD Basic Syntax
DESCRIPTION: The basic syntax for the ZADD command showing all possible parameters and options.

LANGUAGE: bash
CODE:
ZADD key [NX|XX] [GT|LT] [CH] [INCR] score member [score member ...]

----------------------------------------

TITLE: BITFIELD Command Syntax
DESCRIPTION: The syntax for the BITFIELD command in DiceDB, showing the structure and available options for bitwise operations.

LANGUAGE: bash
CODE:
BITFIELD key [GET type offset | [OVERFLOW <WRAP | SAT | FAIL>]
  <SET type offset value | INCRBY type offset increment>
  [GET type offset | [OVERFLOW <WRAP | SAT | FAIL>]
  <SET type offset value | INCRBY type offset increment>
  ...]]

----------------------------------------

TITLE: Pausing Clients in DiceDB
DESCRIPTION: The CLIENT PAUSE command suspends all the DiceDB clients for the specified amount of time (in milliseconds).

LANGUAGE: sh
CODE:
127.0.0.1:7379> CLIENT PAUSE 5000
OK

----------------------------------------

TITLE: Overwriting Existing Key Example
DESCRIPTION: Example of overwriting an existing key with a new value and expiration time.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SETEX foo 20 new_value
OK

----------------------------------------

TITLE: Handling Error: Key is Not a Hash in DiceDB
DESCRIPTION: Demonstrates the error that occurs when trying to use HGETALL on a key that doesn't contain a hash in DiceDB. It first sets a string value and then attempts to use HGETALL on it.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET user:3000 "This is a string"
OK
127.0.0.1:7379> HGETALL user:3000
(error) ERROR WRONGTYPE Operation against a key holding the wrong kind of value

----------------------------------------

TITLE: Basic PFMERGE Command Syntax
DESCRIPTION: Shows the basic syntax for the PFMERGE command used to merge multiple HyperLogLog data structures.

LANGUAGE: bash
CODE:
PFMERGE destkey sourcekey [sourcekey ...]

----------------------------------------

TITLE: Handling Existing Destination Key in DiceDB COPY Command
DESCRIPTION: Demonstrates the COPY command's behavior when attempting to copy to an existing destination key without the REPLACE option.

LANGUAGE: bash
CODE:
127.0.0.1:7379> COPY key1 key2
(integer) 1
127.0.0.1:7379> COPY key1 key2
(integer) 0

----------------------------------------

TITLE: PFCOUNT Error: Wrong Type of Key in DiceDB
DESCRIPTION: Illustrates the error message when PFCOUNT is used on a key that doesn't contain a HyperLogLog data structure.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET mykey "value"
OK
127.0.0.1:7379> PFCOUNT mykey
(error) WRONGTYPE Operation against a key holding the wrong kind of value

----------------------------------------

TITLE: Executing COMMAND INFO in DiceDB
DESCRIPTION: This snippet demonstrates the basic syntax for using the COMMAND INFO command in DiceDB. It allows retrieving detailed information about one or more specified commands.

LANGUAGE: bash
CODE:
COMMAND INFO command-name [command-name ...]

----------------------------------------

TITLE: Basic Usage of ZADD
DESCRIPTION: Examples showing basic usage of ZADD command to add multiple members with scores.

LANGUAGE: bash
CODE:
127.0.0.1:7379> ZADD myzset 1 "one" 2 "two" 3 "three"
(integer) 3
127.0.0.1:7379> ZADD myzset 4 "four"
(integer) 1

----------------------------------------

TITLE: Executing SCARD Command in DiceDB
DESCRIPTION: Demonstrates the syntax for using the SCARD command in DiceDB to get the cardinality of a set.

LANGUAGE: bash
CODE:
SCARD key

----------------------------------------

TITLE: Basic HRANDFIELD Usage Example
DESCRIPTION: Shows how to use HRANDFIELD to retrieve a single random field from a hash

LANGUAGE: bash
CODE:
127.0.0.1:7379> HSET keys field1 value1 field2 value2 field3 value3
(integer) 3
127.0.0.1:7379> HRANDFIELD keys
"field1"

----------------------------------------

TITLE: Creating New Set with SADD
DESCRIPTION: Example of creating a new set named 'fruits' with multiple members

LANGUAGE: bash
CODE:
127.0.0.1:7379> SADD fruits "apple" "banana" "cherry"
(integer) 3

----------------------------------------

TITLE: PFCOUNT Error: Invalid Arguments in DiceDB
DESCRIPTION: Demonstrates the error message when PFCOUNT is called without any arguments in DiceDB.

LANGUAGE: bash
CODE:
127.0.0.1:7379> PFCOUNT
(error) ERR wrong number of arguments for 'pfcount' command

----------------------------------------

TITLE: Executing GEODIST Command in DiceDB
DESCRIPTION: Demonstrates the syntax for the GEODIST command, which calculates the distance between two geospatial points stored in a sorted set. The command allows specifying the unit of measurement (meters, kilometers, feet, or miles).

LANGUAGE: bash
CODE:
GEODIST key member1 member2 [m | km | ft | mi]

----------------------------------------

TITLE: HyperLogLog Update Operations
DESCRIPTION: Series of commands demonstrating how to update a HyperLogLog and trigger cardinality changes.

LANGUAGE: bash
CODE:
127.0.0.1:7379> PFADD users:hll "user1"
OK
127.0.0.1:7379> PFADD users:hll "user2" "user3"
OK
127.0.0.1:7379> PFADD users:hll "user4"
OK
127.0.0.1:7379> PFADD other:hll "user5"
OK
127.0.0.1:7379> PFMERGE users:hll users:hll other:hll
OK

----------------------------------------

TITLE: Syntax for JSON.ARRINDEX Command in DiceDB
DESCRIPTION: The basic syntax for the JSON.ARRINDEX command, specifying the key, path, value, and optional start and stop indices.

LANGUAGE: bash
CODE:
JSON.ARRINDEX key path value [start [stop]]

----------------------------------------

TITLE: ZADD with NX Option
DESCRIPTION: Using the NX option to only add new elements without updating existing ones.

LANGUAGE: bash
CODE:
127.0.0.1:7379> ZADD myzset NX 6 "six" 7 "two"
(integer) 1

----------------------------------------

TITLE: Executing COMMAND COUNT in DiceDB
DESCRIPTION: The COMMAND COUNT command retrieves the total number of commands supported by the DiceDB server. It returns an integer value representing the current command count. This operation has a time complexity of O(1).

LANGUAGE: bash
CODE:
COMMAND COUNT

----------------------------------------

TITLE: Retrieving Root Object Keys
DESCRIPTION: Example showing how to retrieve keys from the root level of a JSON object using JSON.OBJKEYS.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.SET a $ '{"name": "Alice", "age": 30, "address": {"city": "Wonderland", "zipcode": "12345"}}'
"OK"
127.0.0.1:7379> JSON.OBJKEYS a $
1) "name"
2) "age"
3) "address"

----------------------------------------

TITLE: Executing SDIFF Command in DiceDB
DESCRIPTION: Demonstrates the syntax for the SDIFF command in DiceDB. It computes the difference between multiple sets, returning members unique to the first set.

LANGUAGE: bash
CODE:
SDIFF key1 [key2 ... keyN]

----------------------------------------

TITLE: Unwatch Command Example
DESCRIPTION: Demonstrates how to stop receiving updates using the GET.UNWATCH command.

LANGUAGE: bash
CODE:
127.0.0.1:7379> GET.UNWATCH 4016579015
OK

----------------------------------------

TITLE: BITPOS Error: Non-String Key in DiceDB
DESCRIPTION: Shows the error message when attempting to use BITPOS on a key that holds a non-string value. This example tries to use BITPOS on a list, resulting in a WRONGTYPE error.

LANGUAGE: bash
CODE:
127.0.0.1:7379> LPUSH mylist "item"
(integer) 1
127.0.0.1:7379> BITPOS mylist 1
(error) WRONGTYPE Operation against a key holding the wrong kind of value

----------------------------------------

TITLE: EXPIRETIME Basic Syntax
DESCRIPTION: Shows the basic syntax for the EXPIRETIME command which takes a key as its only parameter.

LANGUAGE: redis
CODE:
EXPIRETIME key

----------------------------------------

TITLE: No Keys Error Handling
DESCRIPTION: Example showing error handling when no keys are provided to the SINTER command.

LANGUAGE: bash
CODE:
# Attempt to compute intersection without providing any keys
127.0.0.1:7379> SINTER
(error) ERR wrong number of arguments for 'sinter' command

----------------------------------------

TITLE: Defining COPY Command Syntax in DiceDB
DESCRIPTION: Specifies the syntax for the COPY command in DiceDB, including optional parameters for destination database and replace functionality.

LANGUAGE: bash
CODE:
COPY <source> <destination> [DB destination-db] [REPLACE]

----------------------------------------

TITLE: ZADD with INCR Option
DESCRIPTION: Using the INCR option to increment the score of an existing member.

LANGUAGE: bash
CODE:
127.0.0.1:7379> ZADD myzset INCR 1 "two"
(integer) 12

----------------------------------------

TITLE: Executing LPOP Command in DiceDB
DESCRIPTION: The basic syntax for the LPOP command in DiceDB. It takes a single parameter 'key' which specifies the list from which to remove and return the first element.

LANGUAGE: bash
CODE:
LPOP key

----------------------------------------

TITLE: HINCRBY Invalid Increment Type
DESCRIPTION: Shows error handling when passing a non-integer increment value.

LANGUAGE: bash
CODE:
127.0.0.1:7379> HINCRBY user:3000 field new
(error) ERROR value is not an integer or out of range

----------------------------------------

TITLE: Updating Existing Members with ZADD
DESCRIPTION: Example demonstrating how to update scores of existing members in a sorted set.

LANGUAGE: bash
CODE:
127.0.0.1:7379> ZADD myzset 5 "two"
(integer) 0

----------------------------------------

TITLE: GETDEL Command Usage Example
DESCRIPTION: Example demonstrating the GETDEL command workflow: setting a value, retrieving and deleting it with GETDEL, and confirming the deletion.

LANGUAGE: redis
CODE:
localhost:7379> SET k v
OK OK
localhost:7379> GETDEL k
OK v
localhost:7379> GET k
(nil)

----------------------------------------

TITLE: Updating Existing Hash Fields with HSET in DiceDB
DESCRIPTION: Demonstrates updating existing fields in the 'product:2000' hash.

LANGUAGE: bash
CODE:
127.0.0.1:7379> HSET product:2000 price 899.99 stock 45

----------------------------------------

TITLE: Using Wildcards with KEYS Command in DiceDB
DESCRIPTION: Demonstrates the use of wildcards in the KEYS command pattern. The '?' wildcard is used to match any single character in the key names.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET key1 "value1"
OK
127.0.0.1:7379> SET key2 "value2"
OK
127.0.0.1:7379> SET key3 "value3"
OK
127.0.0.1:7379> KEYS key?
1) "key3"
2) "key1"
3) "key2"

----------------------------------------

TITLE: Defining INCR Command Syntax in Markdown
DESCRIPTION: Specifies the syntax for the INCR command, which takes a single key argument.

LANGUAGE: markdown
CODE:
```
INCR key
```

----------------------------------------

TITLE: Invalid Usage of HSETNX on Non-Hash Key in DiceDB
DESCRIPTION: An example demonstrating the error that occurs when trying to use HSETNX on a key that doesn't contain a hash.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET product:3000 "This is a string"
OK
127.0.0.1:7379> HSETNX product:3000 name "Smartphone"
(error) WRONGTYPE Operation against a key holding the wrong kind of value

----------------------------------------

TITLE: Basic INCRBYFLOAT Command Syntax
DESCRIPTION: Shows the basic syntax structure for the INCRBYFLOAT command in DiceDB.

LANGUAGE: bash
CODE:
INCRBYFLOAT key delta

----------------------------------------

TITLE: Setting and Retrieving Substrings with GETRANGE in DiceDB
DESCRIPTION: Shows how to set a string value and then use GETRANGE to retrieve various substrings, including examples with negative indices.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET foo apple
OK
127.0.0.1:7379> GETRANGE foo 1 3
"ppl"
127.0.0.1:7379> GETRANGE foo 0 -1
"apple"
127.0.0.1:7379> GETRANGE foo 0 -10
""
127.0.0.1:7379> GETRANGE foo 0 -2
"appl"
127.0.0.1:7379> GETRANGE foo 0 1001
"apple"

----------------------------------------

TITLE: Executing GETRANGE Command in DiceDB
DESCRIPTION: Demonstrates the basic syntax of the GETRANGE command, which retrieves a substring from a string value stored at a specific key.

LANGUAGE: bash
CODE:
GETRANGE key start end

----------------------------------------

TITLE: Basic JSON.OBJKEYS Syntax
DESCRIPTION: Demonstrates the basic syntax of the JSON.OBJKEYS command for retrieving keys from a JSON object's root level.

LANGUAGE: bash
CODE:
JSON.OBJKEYS key [path]

----------------------------------------

TITLE: Retrieving TTL for a Key with PTTL Command in DiceDB
DESCRIPTION: Demonstrates the syntax for using the PTTL command in DiceDB to retrieve the remaining time to live for a key in milliseconds.

LANGUAGE: bash
CODE:
PTTL key

----------------------------------------

TITLE: Basic COMMAND Syntax
DESCRIPTION: Basic syntax for executing the COMMAND command without any parameters

LANGUAGE: bash
CODE:
COMMAND

----------------------------------------

TITLE: Wrong Number of Arguments for HSETNX Command in DiceDB
DESCRIPTION: Examples showing the errors that occur when providing an incorrect number of arguments to the HSETNX command.

LANGUAGE: bash
CODE:
127.0.0.1:7379> HSETNX product:3000
(error) ERR wrong number of arguments for 'hsetnx' command

127.0.0.1:7379> HSETNX product:3000 name
(error) ERR wrong number of arguments for 'hsetnx' command

----------------------------------------

TITLE: Handling Non-Existent Key Error in DiceDB RENAME
DESCRIPTION: This example demonstrates the error returned when attempting to rename a non-existing key in DiceDB.

LANGUAGE: bash
CODE:
127.0.0.1:7379> RENAME nonexistingkey newkey
(error) ERR no such key

----------------------------------------

TITLE: Killing a Client Connection in DiceDB
DESCRIPTION: The CLIENT KILL command closes a client connection identified by ip:port.

LANGUAGE: sh
CODE:
127.0.0.1:7379> CLIENT KILL 127.0.0.1:6379
OK

----------------------------------------

TITLE: HLEN with Wrong Key Type
DESCRIPTION: Demonstrates error handling when using HLEN on a non-hash key type.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET mystring "This is a string"
OK

127.0.0.1:7379> HLEN mystring
(error) WRONGTYPE Operation against a key holding the wrong kind of value

----------------------------------------

TITLE: Syntax for HSETNX Command in DiceDB
DESCRIPTION: The basic syntax for using the HSETNX command in DiceDB. It requires a key, field, and value as parameters.

LANGUAGE: bash
CODE:
HSETNX key field value

----------------------------------------

TITLE: Removing Expiration from a Key Example
DESCRIPTION: Demonstrates setting a key, adding expiration, removing it with PERSIST, and checking the TTL.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET mykey "Hello"
OK

LANGUAGE: bash
CODE:
127.0.0.1:7379> EXPIRE mykey 10
(integer) 1

LANGUAGE: bash
CODE:
127.0.0.1:7379> PERSIST mykey
(integer) 1

LANGUAGE: bash
CODE:
127.0.0.1:7379> TTL mykey
(integer) -1

----------------------------------------

TITLE: Basic GEOHASH Command Syntax
DESCRIPTION: Shows the basic syntax structure for the GEOHASH command in DiceDB.

LANGUAGE: bash
CODE:
GEOHASH key member [member ...]

----------------------------------------

TITLE: Retrieving Command Info for SET and MGET
DESCRIPTION: This example shows how to use COMMAND INFO to get detailed information about the SET and MGET commands in DiceDB. It demonstrates the structure of the returned data.

LANGUAGE: bash
CODE:
127.0.0.1:7379> COMMAND INFO SET MGET
1) 1) "SET"
   2) (integer) -3
   3) (integer) 1
   4) (integer) 0
   5) (integer) 0
2) 1) "MGET"
   2) (integer) -2
   3) (integer) 1
   4) (integer) -1
   5) (integer) 1

----------------------------------------

TITLE: Basic APPEND Command Syntax
DESCRIPTION: Shows the basic syntax for the APPEND command in DiceDB.

LANGUAGE: bash
CODE:
APPEND key value

----------------------------------------

TITLE: Getting Client ID in DiceDB
DESCRIPTION: The CLIENT ID command returns the ID of the current connection.

LANGUAGE: sh
CODE:
127.0.0.1:7379> CLIENT ID
3

----------------------------------------

TITLE: Handling Non-existent Key
DESCRIPTION: Demonstrates the behavior when attempting to delete a field from a non-existent key.

LANGUAGE: bash
CODE:
127.0.0.1:7379> HDEL user:2000 name
(integer) 0

----------------------------------------

TITLE: Non-Existent Path Example
DESCRIPTION: Example showing the response when accessing a non-existent path in the JSON document.

LANGUAGE: bash
CODE:
JSON.STRLEN user:1001 $.phone
(empty array)

----------------------------------------

TITLE: Basic GETBIT Command Syntax
DESCRIPTION: Shows the basic syntax for the GETBIT command which requires a key and offset parameter.

LANGUAGE: bash
CODE:
GETBIT key offset

----------------------------------------

TITLE: Setting and Popping List Elements in DiceDB
DESCRIPTION: This example demonstrates setting a list with multiple elements using RPUSH and then removing the first element using LPOP. It shows how LPOP affects the list contents.

LANGUAGE: bash
CODE:
RPUSH mylist "one" "two" "three"
LPOP mylist
"one"
LPOP mylist
"two"

----------------------------------------

TITLE: Basic HGET Command Syntax
DESCRIPTION: Shows the basic syntax for the HGET command in DiceDB.

LANGUAGE: bash
CODE:
HGET key field

----------------------------------------

TITLE: Basic HDEL Command Syntax
DESCRIPTION: Shows the basic syntax for the HDEL command in DiceDB.

LANGUAGE: bash
CODE:
HDEL key field [field ...]

----------------------------------------

TITLE: Basic DBSIZE Command Syntax
DESCRIPTION: The basic syntax for using the DBSIZE command in DiceDB.

LANGUAGE: bash
CODE:
DBSIZE

----------------------------------------

TITLE: Handling Non-Existent Path
DESCRIPTION: Example showing the error response when attempting to retrieve a non-existent path in a JSON document.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.SET user:1001 $ '{"name": "John Doe", "age": 30, "email": "john.doe@example.com"}'
OK
127.0.0.1:7379> JSON.GET user:1001 $.nonexistent
(error) ERR Path '$.nonexistent' does not exist

----------------------------------------

TITLE: Basic ZCARD Command Syntax
DESCRIPTION: Shows the basic syntax for the ZCARD command in DiceDB

LANGUAGE: bash
CODE:
ZCARD key

----------------------------------------

TITLE: GETBIT with Non-string Value
DESCRIPTION: Demonstrates error handling when attempting to use GETBIT on a non-string value.

LANGUAGE: bash
CODE:
127.0.0.1:7379> LPUSH baz "item"
127.0.0.1:7379> GETBIT baz 0
(error) WRONGTYPE Operation against a key holding the wrong kind of value

----------------------------------------

TITLE: LPOP on Wrong Data Type in DiceDB
DESCRIPTION: This example demonstrates the error that occurs when trying to use LPOP on a key that holds a string instead of a list.

LANGUAGE: bash
CODE:
SET mystring "hello"
OK
LPOP mystring
(error) WRONGTYPE Operation against a key holding the wrong kind of value

----------------------------------------

TITLE: Effective Boolean Value Logging in Go
DESCRIPTION: Shows the proper way to log boolean values using structured logging, avoiding redundant information in the message text.

LANGUAGE: go
CODE:
slog.Info("enable-watch is set to true", slog.Bool("enable-watch", true))  // not okay
slog.Info("running with", slog.Bool("enable-watch", config.EnableWatch))  // okay

----------------------------------------

TITLE: Setting a Bit Example
DESCRIPTION: Demonstrates setting a bit at offset 7 to value 1.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SETBIT mykey 7 1
(integer) 0

----------------------------------------

TITLE: LPOP with Incorrect Number of Arguments in DiceDB
DESCRIPTION: This example shows the error that occurs when LPOP is called with more than one key, which is not allowed.

LANGUAGE: bash
CODE:
LPOP mylist secondlist
(error) ERR wrong number of arguments for 'lpop' command

----------------------------------------

TITLE: Retrieving Values from Hash Example
DESCRIPTION: Demonstrates setting and retrieving values from a hash using HSET and HGET commands.

LANGUAGE: bash
CODE:
127.0.0.1:7379> HSET user:1000 name "John Doe"
(integer) 1
127.0.0.1:7379> HSET user:1000 age "30"
(integer) 1
127.0.0.1:7379> HGET user:1000 name
"John Doe"

----------------------------------------

TITLE: Deleting Multiple Fields from Hash
DESCRIPTION: Shows how to delete multiple fields from a hash in a single command.

LANGUAGE: bash
CODE:
127.0.0.1:7379> HSET user:1000 name "John Doe"
(integer) 1
127.0.0.1:7379> HSET user:1000 age "30"
(integer) 1
127.0.0.1:7379> HDEL user:1000 name age
(integer) 2

----------------------------------------

TITLE: Syntax for JSON.CLEAR Command in DiceDB
DESCRIPTION: Demonstrates the basic syntax for the JSON.CLEAR command in DiceDB. The command takes a key and an optional path parameter to clear JSON data.

LANGUAGE: bash
CODE:
JSON.CLEAR key [path]

----------------------------------------

TITLE: Running Chatroom Application in Go
DESCRIPTION: This command runs the main.go file of a chatroom application implemented in Go. It requires a username to be provided as a command-line argument.

LANGUAGE: sh
CODE:
$ go run main.go <username>

----------------------------------------

TITLE: Basic Usage of BITPOS in DiceDB
DESCRIPTION: Shows how to use the BITPOS command to find the position of the first bit set to 1 in a string stored at the key 'mykey'. The command returns the position of the first occurrence of the specified bit.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET mykey "foobar"
OK
127.0.0.1:7379> BITPOS mykey 1
(integer) 1

----------------------------------------

TITLE: Invalid Value Error Example
DESCRIPTION: Shows error handling when using an invalid bit value.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SETBIT mykey 7 2
(error) ERR bit is not an integer or out of range

----------------------------------------

TITLE: LRANGE with Invalid Offset in DiceDB
DESCRIPTION: This example demonstrates the error returned when using an invalid stop offset with the LRANGE command.

LANGUAGE: bash
CODE:
127.0.0.1:7379> LRANGE mylist 0 10ff
(error) ERR value is not an integer or out of range

----------------------------------------

TITLE: Handling Wrong Key Type Error
DESCRIPTION: Shows error handling when attempting to use BF.EXISTS on a non-Bloom Filter key.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET myString "hello"
OK
127.0.0.1:7379> BF.EXISTS myString "apple"
(error) WRONGTYPE Operation against a key holding the wrong kind of value

----------------------------------------

TITLE: BITPOS with Range Specification in DiceDB
DESCRIPTION: Demonstrates how to use the BITPOS command with a specified range. It searches for the first bit set to 0 in the string stored at 'mykey', starting from byte position 2 and ending at byte position 4.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET mykey "foobar"
OK
127.0.0.1:7379> BITPOS mykey 0 2 4
(integer) 16

----------------------------------------

TITLE: LRANGE on Wrong Data Type in DiceDB
DESCRIPTION: This example shows the error returned when attempting to use LRANGE on a key that doesn't hold a list data type.

LANGUAGE: bash
CODE:
127.0.0.1:7379> HMSET myhash field1 "value1"
OK
127.0.0.1:7379> HGET myhash field1
"value1"
127.0.0.1:7379> LRANGE myhash 0 100
(error) WRONGTYPE Operation against a key holding the wrong kind of value

----------------------------------------

TITLE: Basic MGET Usage Example
DESCRIPTION: Demonstrates setting and retrieving multiple key-value pairs using MGET

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET key1 "value1"
OK

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET key2 "value2"
OK

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET key3 "value3"
OK

LANGUAGE: bash
CODE:
127.0.0.1:7379> MGET key1 key2 key3
1) "value1"
2) "value2"
3) "value3"

----------------------------------------

TITLE: Handling Non-existent Field
DESCRIPTION: Shows the behavior when attempting to delete a non-existent field.

LANGUAGE: bash
CODE:
127.0.0.1:7379> HDEL user:1000 email
(integer) 0

----------------------------------------

TITLE: Basic JSON.ARRPOP Command Syntax
DESCRIPTION: Demonstrates the basic syntax structure for the JSON.ARRPOP command.

LANGUAGE: bash
CODE:
JSON.ARRPOP key [path [index]]

----------------------------------------

TITLE: Handling Incorrect Arguments Error
DESCRIPTION: Demonstrates error handling when providing incorrect number of arguments to BF.EXISTS.

LANGUAGE: bash
CODE:
127.0.0.1:7379> BF.EXISTS myBloomFilter
(error) ERR wrong number of arguments for 'bf.exists' command

----------------------------------------

TITLE: Basic Usage of LLEN Command in DiceDB
DESCRIPTION: Example demonstrating the basic usage of the LLEN command on a list 'mylist' containing three elements.

LANGUAGE: bash
CODE:
127.0.0.1:7379> RPUSH mylist "one"
(integer) 1
127.0.0.1:7379> RPUSH mylist "two"
(integer) 2
127.0.0.1:7379> RPUSH mylist "three"
(integer) 3
127.0.0.1:7379> LLEN mylist
(integer) 3

----------------------------------------

TITLE: SETEX Command Basic Syntax
DESCRIPTION: Basic syntax for the SETEX command showing the required parameters: key, seconds, and value.

LANGUAGE: bash
CODE:
SETEX key seconds value

----------------------------------------

TITLE: COMMAND Subcommand Syntax
DESCRIPTION: Syntax for executing COMMAND with subcommands

LANGUAGE: bash
CODE:
COMMAND <subcommand>

----------------------------------------

TITLE: ZPOPMIN with Negative Count
DESCRIPTION: Demonstrates behavior when using a negative count argument.

LANGUAGE: bash
CODE:
127.0.0.1:7379> ZADD myzset 1 member1 2 member2 3 member3
(integer) 3
127.0.0.1:7379> ZPOPMIN myzset -1
(empty array)

----------------------------------------

TITLE: Renaming a Key in DiceDB
DESCRIPTION: This example demonstrates renaming a key from 'mykey' to 'mynewkey' in DiceDB. It shows setting the initial value, renaming the key, and retrieving the value with the new key name.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET mykey "Hello"
OK
127.0.0.1:7379> RENAME mykey mynewkey
OK
127.0.0.1:7379> GET mynewkey
"Hello"

----------------------------------------

TITLE: Basic COMMAND LIST Syntax
DESCRIPTION: Shows the basic syntax for retrieving the list of available commands from DiceDB server.

LANGUAGE: bash
CODE:
COMMAND LIST

----------------------------------------

TITLE: Creating a New Hash with HSETNX in DiceDB
DESCRIPTION: An example of using HSETNX to create a new hash and set a field. The command returns 1 indicating success.

LANGUAGE: bash
CODE:
127.0.0.1:7379> HSETNX product:3000 name "Smartphone"
1

----------------------------------------

TITLE: Wrong Data Type Error
DESCRIPTION: Shows the error when attempting to use HDEL on a non-hash data type.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET user:3000 "Not a hash"
OK
127.0.0.1:7379> HDEL user:3000 name
(error) WRONGTYPE Operation against a key holding the wrong kind of value

----------------------------------------

TITLE: AUTH Command Basic Syntax
DESCRIPTION: Basic syntax demonstration of the AUTH command in DiceDB

LANGUAGE: bash
CODE:
AUTH password

----------------------------------------

TITLE: Syntax for JSON.ARRTRIM Command in DiceDB
DESCRIPTION: The basic syntax for using the JSON.ARRTRIM command in DiceDB, showing the required parameters.

LANGUAGE: bash
CODE:
JSON.ARRTRIM <key> <path> <start> <stop>

----------------------------------------

TITLE: JSON.DEL Command Syntax
DESCRIPTION: Basic syntax for the JSON.DEL command showing required and optional parameters.

LANGUAGE: bash
CODE:
JSON.DEL key [path]

----------------------------------------

TITLE: Invalid GETRANGE Usage in DiceDB
DESCRIPTION: Illustrates error cases when using GETRANGE, including incorrect number of arguments, wrong data type, and invalid index types.

LANGUAGE: bash
CODE:
127.0.0.1:7379> GETRANGE foo
(error) ERROR wrong number of arguments for 'getrange' command
127.0.0.1:7379> LPUSH foo apple
127.0.0.1:7379> GETRANGE foo 0 5
(error) ERROR WRONGTYPE Operation against a key holding the wrong kind of value
127.0.0.1:7379> GETRANGE foo s e
(error) ERROR value is not an integer or out of range

----------------------------------------

TITLE: COMMAND INFO with Unknown Command
DESCRIPTION: This example shows the behavior of COMMAND INFO when given only an unknown command name. It demonstrates that nil is returned for unsupported commands.

LANGUAGE: bash
CODE:
127.0.0.1:7379> COMMAND INFO UNKNOWNCOMMAND
1) (nil)

----------------------------------------

TITLE: Trimming JSON Array to Single Element in DiceDB
DESCRIPTION: Shows how to use JSON.ARRTRIM to reduce a JSON array to a single element.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.SET a $ '[0,1,2]'
"OK"
127.0.0.1:7379> JSON.ARRTRIM a $ 1 1
"1"
127.0.0.1:7379> JSON.GET a
"[1]"
127.0.0.1:7379>

----------------------------------------

TITLE: Executing TOUCH Command in DiceDB
DESCRIPTION: The TOUCH command syntax for updating the last access time of one or more keys in DiceDB. It accepts one or more key names as parameters.

LANGUAGE: bash
CODE:
TOUCH key [key ...]

----------------------------------------

TITLE: Handling Arity Error in COMMAND COUNT
DESCRIPTION: This example shows the error thrown when extra arguments are passed to the COMMAND COUNT command, which does not accept any additional arguments.

LANGUAGE: bash
CODE:
127.0.0.1:7379> COMMAND COUNT EXTRA ARGS
(error) ERR wrong number of arguments for 'command|count' command

----------------------------------------

TITLE: Removing multiple members from a set using SREM in DiceDB
DESCRIPTION: This example shows how to remove multiple members from a set in a single SREM command. It first adds members to a set using SADD, then removes two members simultaneously using SREM.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SADD myset "one" "two" "three"
127.0.0.1:7379> SREM myset "two" "three"
(integer) 2

----------------------------------------

TITLE: Syntax for HEXISTS Command in DiceDB
DESCRIPTION: The basic syntax for the HEXISTS command in DiceDB. It takes two parameters: the key holding the hash and the field to check within the hash.

LANGUAGE: bash
CODE:
HEXISTS key field

----------------------------------------

TITLE: Basic JSON.NUMINCRBY Syntax
DESCRIPTION: Shows the basic command syntax for JSON.NUMINCRBY operation.

LANGUAGE: bash
CODE:
JSON.NUMINCRBY <key> <path> <increment>

----------------------------------------

TITLE: Deleting Specific JSON Path Example
DESCRIPTION: Example demonstrating how to delete a specific path ($.age) from a JSON document using JSON.DEL.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.SET myjson $ '{"name": "John", "age": 30, "city": "New York"}'
OK
127.0.0.1:7379> JSON.DEL myjson $.age
(integer) 1
127.0.0.1:7379> JSON.GET myjson
"{\"name\":\"John\",\"city\":\"New York\"}"

----------------------------------------

TITLE: LPOP on Non-Existent Key in DiceDB
DESCRIPTION: This example shows the behavior of LPOP when used on a non-existent key. It returns (nil) as there are no elements to pop.

LANGUAGE: bash
CODE:
LPOP emptylist
(nil)

----------------------------------------

TITLE: Invalid Usage of TOUCH Command on List in DiceDB
DESCRIPTION: An example demonstrating invalid usage of the TOUCH command on a list type in DiceDB, which results in a WRONGTYPE error.

LANGUAGE: bash
CODE:
LPUSH mylist "element"
TOUCH mylist

----------------------------------------

TITLE: Invalid AUTH Command Usage
DESCRIPTION: Example showing error when using incorrect number of arguments with AUTH command

LANGUAGE: bash
CODE:
127.0.0.1:7379> AUTH your_secret_password foo bar
(error) ERR wrong number of arguments for 'auth' command

----------------------------------------

TITLE: Basic HINCRBYFLOAT Command Syntax
DESCRIPTION: Shows the basic syntax structure for the HINCRBYFLOAT command in DiceDB.

LANGUAGE: bash
CODE:
HINCRBYFLOAT key field increment

----------------------------------------

TITLE: Basic Usage of SLEEP Command in DiceDB
DESCRIPTION: An example of using the SLEEP command to pause the client for 5 seconds. After the specified duration, the command returns 'OK'.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SLEEP 5
OK

----------------------------------------

TITLE: Invalid Syntax Error Handling with BITCOUNT in DiceDB
DESCRIPTION: Shows error messages for invalid syntax when using BITCOUNT, including non-integer parameters and incorrect use of the BIT option.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET mykey "foobar"
OK
127.0.0.1:7379> BITCOUNT mykey start end
(error) ERR value is not an integer or out of range

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET mykey "foobar"
OK
127.0.0.1:7379> BITCOUNT mykey BIT
(error) ERR value is not an integer or out of range

----------------------------------------

TITLE: HGET Non-Existent Field Example
DESCRIPTION: Shows the behavior when trying to retrieve a non-existent field from a hash.

LANGUAGE: bash
CODE:
127.0.0.1:7379> HGET user:1000 email
(nil)

----------------------------------------

TITLE: Checking Non-existent Field in DiceDB Hash
DESCRIPTION: Example of using HEXISTS to check for a non-existent field 'age' in the hash stored at key 'user:1001'. Returns 0 if the field does not exist.

LANGUAGE: bash
CODE:
127.0.0.1:7379> HEXISTS user:1001 age
0

----------------------------------------

TITLE: Redis EXPIREAT Command Syntax
DESCRIPTION: Shows the basic syntax for the EXPIREAT command with optional modifiers NX, XX, GT, and LT.

LANGUAGE: redis
CODE:
EXPIREAT key timestamp [NX | XX | GT | LT]

----------------------------------------

TITLE: Basic DBSIZE Usage Example
DESCRIPTION: Example showing how to use DBSIZE command to get the number of keys in the current database.

LANGUAGE: bash
CODE:
127.0.0.1:7379> DBSIZE
(integer) 42

----------------------------------------

TITLE: Counting Bits in Entire String with BITCOUNT in DiceDB
DESCRIPTION: Example usage of BITCOUNT to count set bits in the entire string.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET mykey "foobar"
OK
127.0.0.1:7379> BITCOUNT mykey
(integer) 26

----------------------------------------

TITLE: Retrieving Field Names from a Hash in DiceDB
DESCRIPTION: Example of using the HKEYS command to retrieve all field names in the hash stored at key 'user:1001'. The command returns an array of field names.

LANGUAGE: bash
CODE:
127.0.0.1:7379> HKEYS user:1001
1) "name"
2) "age"
3) "email"

----------------------------------------

TITLE: Watch Update Notifications Example
DESCRIPTION: Shows the notifications received by a watching client when the key is updated.

LANGUAGE: bash
CODE:
Command: GET
Fingerprint: 4016579015
Data: Hello World, I am user 0 of dice db
Command: GET
Fingerprint: 4016579015
Data: Hello World, I am user 0 of dice db, and i am going to demonstrate the use of watch commands
Command: GET
Fingerprint: 4016579015
Data: Hello World, I am user 0 of dice db, and i am going to demonstrate the use of watch and unwatch commands.

----------------------------------------

TITLE: Clearing a Bit Example
DESCRIPTION: Shows how to clear a bit by setting it to 0.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SETBIT mykey 7 0
(integer) 1

----------------------------------------

TITLE: Sample JSON Document Structure
DESCRIPTION: Example JSON document stored in DiceDB under key 'user:1001' used for demonstration.

LANGUAGE: json
CODE:
{
  "name": "John Doe",
  "email": "john.doe@example.com",
  "address": {
    "city": "New York",
    "zipcode": "10001"
  }
}

----------------------------------------

TITLE: Checking Field in Non-existent Hash in DiceDB
DESCRIPTION: Example of using HEXISTS to check for a field in a non-existent hash. Returns 0 if the hash key does not exist.

LANGUAGE: bash
CODE:
127.0.0.1:7379> HEXISTS user:1002 name
0

----------------------------------------

TITLE: DECR Command Syntax
DESCRIPTION: Basic syntax for the Redis DECR command that decrements a key's value.

LANGUAGE: redis
CODE:
DECR key

----------------------------------------

TITLE: HMGET Command with Missing Arguments in DiceDB
DESCRIPTION: These examples demonstrate the errors that occur when the HMGET command is used with insufficient arguments. It shows the error messages for missing key and field arguments.

LANGUAGE: bash
CODE:
127.0.0.1:7379> HMGET
(error) ERR wrong number of arguments for 'hmget' command

127.0.0.1:7379> HMGET product:2000
(error) ERR wrong number of arguments for 'hmget' command

----------------------------------------

TITLE: Updating Multiple Keys Access Time with TOUCH in DiceDB
DESCRIPTION: An example of using the TOUCH command to update the last access time of multiple keys in DiceDB. It sets two key-value pairs and attempts to touch three keys, including a non-existent one.

LANGUAGE: bash
CODE:
SET key1 "value1"
SET key2 "value2"
TOUCH key1 key2 key3

----------------------------------------

TITLE: Basic Example of KEYS Command in DiceDB
DESCRIPTION: Shows a basic example of using the KEYS command to retrieve keys matching a specific pattern. In this case, it retrieves all keys starting with 'key'.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET key1 "value1"
OK
127.0.0.1:7379> SET key2 "value2"
OK
127.0.0.1:7379> SET anotherkey "value3"
OK
127.0.0.1:7379> KEYS key*
1) "key1"
2) "key2"

----------------------------------------

TITLE: Extending String with SETBIT
DESCRIPTION: Shows how SETBIT automatically extends the string when using a large offset.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SETBIT mykey 100 1
(integer) 0

----------------------------------------

TITLE: Pipelining Commands to Dice Database using Netcat
DESCRIPTION: Bash commands demonstrating how to pipeline multiple Redis protocol commands to the Dice database using netcat. This allows sending multiple commands in a single network connection.

LANGUAGE: bash
CODE:
$ (printf 'CMD1CMD2CMD3';) | nc localhost 7379
$ (printf '*1\r\n$4\r\nPING\r\n*3\r\n$3\r\nSET\r\n$1\r\nk\r\n$1\r\nv\r\n*2\r\n$3\r\nGET\r\n$1\r\nk\r\n';) | nc localhost 7379

----------------------------------------

TITLE: Invalid Usage of LPUSH with Wrong Number of Arguments in DiceDB
DESCRIPTION: An example showing an error when calling LPUSH without providing any values to insert.

LANGUAGE: bash
CODE:
LPUSH mylist
(error) ERR wrong number of arguments for 'lpush' command

----------------------------------------

TITLE: Invalid Offset Error Example
DESCRIPTION: Demonstrates error handling for invalid negative offset.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SETBIT mykey -1 1
(error) ERR bit is not an integer or out of range

----------------------------------------

TITLE: Toggling Top-Level Boolean Value
DESCRIPTION: Example showing how to toggle a boolean value at the top level of the JSON document using JSON.TOGGLE command.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.TOGGLE user:1001 $.active
(integer) 1

----------------------------------------

TITLE: Handling Error: Invalid Number of Arguments in DiceDB
DESCRIPTION: Shows the error that occurs when an invalid number of arguments is passed to the HGETALL command in DiceDB.

LANGUAGE: bash
CODE:
127.0.0.1:7379> HGETALL user:3000 helloworld
(error) ERROR wrong number of arguments for 'hgetall' command

----------------------------------------

TITLE: Executing FLUSHDB Command in Redis
DESCRIPTION: The FLUSHDB command deletes all keys present in the current database. This example demonstrates setting key-value pairs, executing FLUSHDB, and verifying that the keys have been deleted.

LANGUAGE: redis
CODE:
locahost:7379> SET k1 v1
OK OK
locahost:7379> SET k2 v2
OK OK
locahost:7379> FLUSHDB
OK OK
localhost:7379> GET k1
OK (nil)
localhost:7379> GET k2
OK (nil)

----------------------------------------

TITLE: ZPOPMIN Invalid Count Argument
DESCRIPTION: Demonstrates the error when using an invalid count argument.

LANGUAGE: bash
CODE:
127.0.0.1:7379> ZADD myzset 1 member1
(integer) 1
127.0.0.1:7379> ZPOPMIN myzset INCORRECT_COUNT_ARGUMENT
(error) ERR value is not an integer or out of range

----------------------------------------

TITLE: Inserting Multiple Values with RPUSH in DiceDB
DESCRIPTION: An example of using RPUSH to insert multiple values 'world', 'foo', and 'bar' into a list named 'mylist'. The command returns the new length of the list.

LANGUAGE: bash
CODE:
127.0.0.1:7379> RPUSH mylist "world" "foo" "bar"
(integer) 3

----------------------------------------

TITLE: Updating Existing Member in Geospatial Set in DiceDB
DESCRIPTION: Shows an attempt to update the coordinates of an existing member 'Palermo' in the 'locations' set.

LANGUAGE: bash
CODE:
127.0.0.1:7379> GEOADD locations 13.361389 39.115556 "Palermo"
0

----------------------------------------

TITLE: Writing Concise Log Messages in Go
DESCRIPTION: Shows how to write concise yet informative log messages by avoiding unnecessary verbosity while maintaining clarity.

LANGUAGE: go
CODE:
slog.Info("DiceDB is starting, initialization in progress", slog.String("version", config.DiceDBVersion))  // not okay
slog.Info("starting DiceDB", slog.String("version", config.DiceDBVersion))  // okay

----------------------------------------

TITLE: Basic RPOP Command Usage in DiceDB
DESCRIPTION: Demonstrates basic usage of RPOP command by pushing elements to a list and then removing the last element.

LANGUAGE: bash
CODE:
127.0.0.1:7379> LPUSH mylist "one" "two" "three"
(integer) 3
127.0.0.1:7379> RPOP mylist
"one"

----------------------------------------

TITLE: Error Handling: Invalid Longitude in GEOADD Command
DESCRIPTION: Illustrates the error message when attempting to add a member with an invalid longitude value.

LANGUAGE: bash
CODE:
127.0.0.1:7379> GEOADD locations 181.120332 39.115556 "Jamaica"
(error) ERROR invalid longitude

----------------------------------------

TITLE: Retrieving Geohash for Existing Members
DESCRIPTION: Demonstrates adding locations using GEOADD and retrieving their Geohash representations using the GEOHASH command.

LANGUAGE: bash
CODE:
127.0.0.1:7379> GEOADD locations 13.361389 38.115556 "Palermo" 15.087269 37.502669 "Catania"
2
127.0.0.1:7379> GEOHASH locations Palermo Catania
1) "sqc8b49rny"
2) "sq9sm17147"

----------------------------------------

TITLE: BITFIELD Command with Overflow Control
DESCRIPTION: Shows how to use the BITFIELD command with overflow control, demonstrating saturation behavior for unsigned 2-bit integers.

LANGUAGE: bash
CODE:
127.0.0.1:7379> BITFIELD mykey incrby u2 100 1 OVERFLOW SAT incrby u2 102 1
1) "1"
2) "1"
127.0.0.1:7379> BITFIELD mykey incrby u2 100 1 OVERFLOW SAT incrby u2 102 1
1) "2"
2) "2"
127.0.0.1:7379> BITFIELD mykey incrby u2 100 1 OVERFLOW SAT incrby u2 102 1
1) "3"
2) "3"
127.0.0.1:7379> BITFIELD mykey incrby u2 100 1 OVERFLOW SAT incrby u2 102 1
1) "0"
2) "3"

----------------------------------------

TITLE: Type-Specific Function Naming in Go
DESCRIPTION: Functions with identical behavior but different types should include the type name at the end of the function name. This applies to parsing and appending operations for different integer types.

LANGUAGE: go
CODE:
func ParseInt(input string) (int, error)  // okay
func ParseInt64(input string) (int64, error)  // okay
func AppendInt(buf []byte, value int) []byte  // okay
func AppendInt64(buf []byte, value int64) []byte  // okay

----------------------------------------

TITLE: HINCRBYFLOAT with Non-existing Field
DESCRIPTION: Shows how HINCRBYFLOAT handles incrementing a non-existing field in an existing hash.

LANGUAGE: bash
CODE:
127.0.0.1:7379> HINCRBYFLOAT keys field2 0.2
"0.2"

----------------------------------------

TITLE: ZRANGE Error Cases
DESCRIPTION: Shows error scenarios when using ZRANGE with wrong key types and invalid syntax.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET foo bar
OK
127.0.0.1:7379> ZRANGE foo 0 2
(error) WRONGTYPE Operation against a key holding the wrong kind of value

127.0.0.1:7379> ZRANGE leaderboard 0
(error) ERR syntax error

----------------------------------------

TITLE: RPOP with Non-Existent Key in DiceDB
DESCRIPTION: Shows RPOP behavior when attempting to pop from a non-existent list.

LANGUAGE: bash
CODE:
127.0.0.1:7379> RPOP emptylist
(nil)

----------------------------------------

TITLE: JSON.STRLEN Basic Syntax
DESCRIPTION: Basic command syntax for JSON.STRLEN showing required parameters.

LANGUAGE: bash
CODE:
JSON.STRLEN <key> <path>

----------------------------------------

TITLE: Error Handling: Invalid Parameter Type in SLEEP Command
DESCRIPTION: Shows the error message returned when the SLEEP command is called with a non-integer parameter, violating the expected input type.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SLEEP abc
(error) ERR value is not an integer or out of range

----------------------------------------

TITLE: Removing a single member from a set using SREM in DiceDB
DESCRIPTION: This example demonstrates how to remove a single member from a set using the SREM command in DiceDB. It first adds members to a set using SADD, then removes one member using SREM.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SADD myset "one" "two" "three"
127.0.0.1:7379> SREM myset "two"
(integer) 1

----------------------------------------

TITLE: Retrieving Nested JSON in RESP Format using DiceDB
DESCRIPTION: Example demonstrating how to use JSON.RESP with a JSONPath expression to retrieve nested JSON data. The command accesses a specific path ($.b) within a complex JSON structure and returns the data in RESP format.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.SET myjson $ '{"a":100,"b":["dice",10,10.5,true,null]}'
OK
127.0.0.1:7379> JSON.RESP myjson $.b
1) 1) [
   2) "dice"
   3) (integer) 10
   4) "10.5"
   5) true
   6) (nil)

----------------------------------------

TITLE: Retrieving Geohash for Non-Existent Member
DESCRIPTION: Shows the response when attempting to get a Geohash for a member that doesn't exist in the dataset.

LANGUAGE: bash
CODE:
127.0.0.1:7379> GEOHASH locations Venice
(nil)

----------------------------------------

TITLE: BITFIELD Command with OVERFLOW FAIL
DESCRIPTION: Illustrates the use of OVERFLOW FAIL option in the BITFIELD command, which returns nil on overflow.

LANGUAGE: bash
CODE:
127.0.0.1:7379> BITFIELD mykey OVERFLOW FAIL incrby u2 102 1
(nil)

----------------------------------------

TITLE: Retrieving Fields with Missing Values using HMGET in DiceDB
DESCRIPTION: This example shows how HMGET handles retrieving fields where some values may be missing. It demonstrates that nil is returned for non-existent fields.

LANGUAGE: bash
CODE:
127.0.0.1:7379> HMGET product:2000 name description
1) "Laptop"
2) (nil)

----------------------------------------

TITLE: HKEYS Command on Non-existent Key in DiceDB
DESCRIPTION: Example of using HKEYS on a non-existent key 'user:1003'. The command returns nil, indicating the key does not exist.

LANGUAGE: bash
CODE:
127.0.0.1:7379> HKEYS user:1003
(nil)

----------------------------------------

TITLE: ZADD with XX Option
DESCRIPTION: Using the XX option to only update existing elements without adding new ones.

LANGUAGE: bash
CODE:
127.0.0.1:7379> ZADD myzset XX 8 "eight" 9 "two"
(integer) 0

----------------------------------------

TITLE: Adding Elements to Set and Retrieving Cardinality in DiceDB
DESCRIPTION: Shows how to add three members to a set named 'myset' using SADD, then retrieves the cardinality using SCARD.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SADD myset "apple"
(integer) 1
127.0.0.1:7379> SADD myset "banana"
(integer) 1
127.0.0.1:7379> SADD myset "cherry"
(integer) 1
127.0.0.1:7379> SCARD myset
(integer) 3

----------------------------------------

TITLE: Fetching Nested Object Keys
DESCRIPTION: Example demonstrating how to retrieve keys from a nested JSON object using a specific path.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.SET b $ '{"name": "Alice", "partner": {"name": "Bob", "age": 28}}'
"OK"
127.0.0.1:7379> JSON.OBJKEYS b $.partner
1) "name"
2) "age"

----------------------------------------

TITLE: Clearing a JSON Object in DiceDB
DESCRIPTION: Shows how to clear a nested object within a JSON document using the JSON.CLEAR command. The example clears the 'address' field of a user object.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.SET user:1001 $ '{"name": "John Doe", "age": 30, "address": {"street": "123 Main St", "city": "Anytown"}}'
OK
127.0.0.1:7379> JSON.CLEAR user:1001 $.address
(integer) 1
127.0.0.1:7379> JSON.GET user:1001
"{\"name\":\"John Doe\",\"age\":30,\"address\":{}}"

----------------------------------------

TITLE: Adding Multiple Members at Once
DESCRIPTION: Example of adding multiple members to a new set in a single command

LANGUAGE: bash
CODE:
127.0.0.1:7379> SADD vegetables "carrot" "broccoli" "spinach" "carrot"
(integer) 3

----------------------------------------

TITLE: Non-Existent Path Handling
DESCRIPTION: Example demonstrating the behavior when accessing a path that doesn't exist in the JSON object.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.SET d $ '{"name": "Alice", "address": {"city": "Wonderland"}}'
"OK"
127.0.0.1:7379> JSON.OBJKEYS d $.nonexistentPath
(empty list or set)

----------------------------------------

TITLE: Using PTTL Command with Key Having No Expiration in DiceDB
DESCRIPTION: Shows the behavior of PTTL command when used with a key that has no expiration set.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET mykey "Hello"
127.0.0.1:7379> PTTL mykey
(integer) -1

----------------------------------------

TITLE: Invalid BITFIELD Command Usage Examples
DESCRIPTION: Provides examples of invalid usage of the BITFIELD command, demonstrating various error scenarios and their corresponding error messages.

LANGUAGE: bash
CODE:
127.0.0.1:7379> BITFIELD
(error) ERR wrong number of arguments for 'bitfield' command

127.0.0.1:7379> SADD bits a b c
(integer) 3
127.0.0.1:7379> BITFIELD bits
(error) ERR WRONGTYPE Operation against a key holding the wrong kind of value

127.0.0.1:7379> BITFIELD bits SET u8 0 255 INCRBY u8 0 100 GET u8
(error) ERR syntax error

127.0.0.1:7379> bitfield bits set a8 0 255 incrby u8 0 100 get u8
(error) ERR Invalid bitfield type. Use something like i16 u8. Note that u64 is not supported but i64 is

127.0.0.1:7379> bitfield bits set u8 a 255 incrby u8 0 100 get u8
(error) ERR bit offset is not an integer or out of range

127.0.0.1:7379> bitfield bits set u8 0 255 incrby u8 0 100 overflow wraap
(error) ERR Invalid OVERFLOW type specified

127.0.0.1:7379> bitfield bits set u8 0 incrby u8 0 100 get u8 288
(error) ERR value is not an integer or out of range

----------------------------------------

TITLE: Basic Example of MSET Command in DiceDB
DESCRIPTION: This example shows how to use the MSET command to set multiple key-value pairs in DiceDB. It sets three key-value pairs in a single operation.

LANGUAGE: bash
CODE:
127.0.0.1:7379> MSET key1 "value1" key2 "value2" key3 "value3"
OK

----------------------------------------

TITLE: Handling Non-Existent Key with PFCOUNT in DiceDB
DESCRIPTION: Shows how DiceDB handles a PFCOUNT command for a non-existent key, returning a cardinality of 0.

LANGUAGE: bash
CODE:
127.0.0.1:7379> PFCOUNT non_existent_key
(integer) 0

----------------------------------------

TITLE: Checking Set Contents
DESCRIPTION: Shows how to verify set contents using the SMEMBERS command

LANGUAGE: bash
CODE:
127.0.0.1:7379> SMEMBERS fruits
1) "apple"
2) "banana"
3) "cherry"
4) "date"
5) "elderberry"
6) "fig"

----------------------------------------

TITLE: Non-Existent Key Error Handling
DESCRIPTION: Example showing the error returned when attempting to access a non-existent key.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.OBJKEYS nonexistent_key $
(error) ERROR could not perform this operation on a key that doesn't exist

----------------------------------------

TITLE: Fetching Coordinates of Existing Member with GEOPOS in DiceDB
DESCRIPTION: Demonstrates how to use the GEOPOS command to retrieve the latitude and longitude of an existing member in a sorted set. The example first adds two locations to the 'Sicily' set using GEOADD, then retrieves the coordinates for 'Palermo'.

LANGUAGE: bash
CODE:
127.0.0.1:7379> GEOADD Sicily 13.361389 38.115556 "Palermo" 15.087269 37.502669 "Catania"
2
127.0.0.1:7379> GEOPOS Sicily "Palermo"
1) 1) 13.361387
2) 38.115556

----------------------------------------

TITLE: SINTER Basic Syntax
DESCRIPTION: Basic syntax demonstration of the SINTER command in DiceDB.

LANGUAGE: bash
CODE:
SINTER key [key ...]

----------------------------------------

TITLE: Creating Initial JSON Document
DESCRIPTION: Example of setting up a JSON document with numeric values for demonstration.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.SET user:1001 $ '{"name": "John Doe", "age": 30, "balance": 100.50, "account": {"id": 0, "lien": 0, "balance": 100.50}}'
"OK"

----------------------------------------

TITLE: Appending to Existing Key
DESCRIPTION: Shows how to append 'baz' to an existing key containing 'bar'.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET foo bar
OK
127.0.0.1:7379> APPEND foo baz
(integer) 6
127.0.0.1:7379> GET foo
"barbaz"

----------------------------------------

TITLE: Basic SADD Command Syntax
DESCRIPTION: Shows the basic syntax for the SADD command in DiceDB

LANGUAGE: bash
CODE:
SADD key member [member ...]

----------------------------------------

TITLE: Counting Bits in Specified Byte Range with BITCOUNT in DiceDB
DESCRIPTION: Example usage of BITCOUNT to count set bits in a specified byte range of the string.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET mykey "foobar"
OK
127.0.0.1:7379> BITCOUNT mykey 1 3
(integer) 15

----------------------------------------

TITLE: DBSIZE Authentication Error Example
DESCRIPTION: Example showing the error message when attempting to use DBSIZE without proper authentication.

LANGUAGE: bash
CODE:
127.0.0.1:7379> DBSIZE
(error) NOAUTH Authentication required

----------------------------------------

TITLE: OBJECT IDLETIME Example
DESCRIPTION: Example demonstrating how to check the idle time of a key in seconds using the IDLETIME subcommand.

LANGUAGE: bash
CODE:
OBJECT IDLETIME mykey
(integer) 120

----------------------------------------

TITLE: SDIFF Command with Wrong Type Error in DiceDB
DESCRIPTION: Illustrates the error returned when SDIFF is used with a key that doesn't hold a set.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET not_a_set "value"
127.0.0.1:7379> SDIFF not_a_set
(error) WRONGTYPE Operation against a key holding the wrong kind of value

----------------------------------------

TITLE: Handling Non-Existent Keys and Paths with JSON.MGET in DiceDB
DESCRIPTION: This snippet illustrates how JSON.MGET handles non-existent keys and paths. It attempts to retrieve an 'address' field that doesn't exist in any of the documents, including a non-existent key.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.MGET user:1 user:2 user:3 $.address
1) (nil)
2) (nil)
3) (nil)

----------------------------------------

TITLE: Creating New Hash with Multiple Fields
DESCRIPTION: Example showing how to create a new product hash with multiple fields including name, price, and stock information.

LANGUAGE: bash
CODE:
127.0.0.1:7379> HMSET product:4000 name "Tablet" price 299.99 stock 30
OK

----------------------------------------

TITLE: Creating New Hash with Multiple Fields
DESCRIPTION: Example showing how to create a new product hash with multiple fields including name, price, and stock information.

LANGUAGE: bash
CODE:
127.0.0.1:7379> HMSET product:4000 name "Tablet" price 299.99 stock 30
OK

----------------------------------------

TITLE: ZPOPMIN with Floating-Point Scores
DESCRIPTION: Shows ZPOPMIN usage with floating-point scores in the sorted set.

LANGUAGE: bash
CODE:
127.0.0.1:7379> ZADD myzset 1.5 member1 2.7 member2 3.8 member3
(integer) 3
127.0.0.1:7379> ZPOPMIN myzset
1) 1.5 "member1"

----------------------------------------

TITLE: Negative Index Array Insertion
DESCRIPTION: Shows how to insert values using negative indices to count from the end of the array.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.SET a $ '[1,2]'
OK
127.0.0.1:7379> JSON.ARRINSERT a $ -2 3 4 5
(integer) 5
127.0.0.1:7379> JSON.GET a
[3,4,5,1,2]

----------------------------------------

TITLE: Appending to Bitmap Value
DESCRIPTION: Complex example showing how to append '1' to a key containing a bitmap value of '42'.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SETBIT bmkey 2 1
(integer) 0
127.0.0.1:7379> SETBIT bmkey 3 1
(integer) 0
127.0.0.1:7379> SETBIT bmkey 5 1
(integer) 0
127.0.0.1:7379> SETBIT bmkey 10 1
(integer) 0
127.0.0.1:7379> SETBIT bmkey 11 1
(integer) 0
127.0.0.1:7379> SETBIT bmkey 14 1
(integer) 0
127.0.0.1:7379> GET bmkey
"42"
127.0.0.1:7379> APPEND bmkey 1
(integer) 3
127.0.0.1:7379> GET bmkey
"421"

----------------------------------------

TITLE: Adding to Existing Set
DESCRIPTION: Demonstrates adding new members to an existing set while handling duplicates

LANGUAGE: bash
CODE:
127.0.0.1:7379> SADD fruits "banana" "date" "elderberry"
(integer) 2

----------------------------------------

TITLE: Setting Key with Expiration Example
DESCRIPTION: Example of setting a key 'foo' with value 'bar' to expire in 10 seconds.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SETEX foo 10 bar
OK

----------------------------------------

TITLE: Clearing a Number in JSON using DiceDB
DESCRIPTION: Demonstrates clearing a numeric value in a JSON document. The example sets the 'age' field to 0 using JSON.CLEAR.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.SET user:1001 $ '{"name": "John Doe", "age": 30, "address": {"street": "123 Main St", "city": "Anytown"}}'
OK
127.0.0.1:7379> JSON.CLEAR user:1001 $.age
(integer) 1
127.0.0.1:7379> JSON.GET user:1001
"{\"name\":\"John Doe\",\"age\":0,\"address\":{\"street\":\"123 Main St\",\"city\":\"Anytown\"}}"

----------------------------------------

TITLE: Clearing a Number in JSON using DiceDB
DESCRIPTION: Demonstrates clearing a numeric value in a JSON document. The example sets the 'age' field to 0 using JSON.CLEAR.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.SET user:1001 $ '{"name": "John Doe", "age": 30, "address": {"street": "123 Main St", "city": "Anytown"}}'
OK
127.0.0.1:7379> JSON.CLEAR user:1001 $.age
(integer) 1
127.0.0.1:7379> JSON.GET user:1001
"{\"name\":\"John Doe\",\"age\":0,\"address\":{\"street\":\"123 Main St\",\"city\":\"Anytown\"}}"

----------------------------------------

TITLE: ZPOPMIN with Count Argument
DESCRIPTION: Demonstrates using ZPOPMIN with a count parameter to remove multiple members.

LANGUAGE: bash
CODE:
127.0.0.1:7379> ZADD myzset 1 member1 2 member2 3 member3
(integer) 3
127.0.0.1:7379> ZPOPMIN myzset 2
1) 1 "member1"
2) 2 "member2"

----------------------------------------

TITLE: ZPOPMAX with Existing Key
DESCRIPTION: Example demonstrating ZPOPMAX usage with an existing sorted set.

LANGUAGE: bash
CODE:
127.0.0.1:7379> ZADD myzset 1 member1 2 member2 3 member3
(integer) 3
127.0.0.1:7379> ZPOPMAX myzset
1) 1 "member1"

----------------------------------------

TITLE: Invalid Index Type Error Handling
DESCRIPTION: Demonstrates error handling when providing an invalid index type.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.SET a $ '[1,2]'
OK
127.0.0.1:7379> JSON.ARRINSERT a $ ss 3
ERR value is not an integer or out of range
127.0.0.1:7379> JSON.GET a
[1,2]

----------------------------------------

TITLE: Clearing an Array in JSON using DiceDB
DESCRIPTION: Shows how to clear an array within a JSON document using JSON.CLEAR. The example clears the 'hobbies' array of a user object.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.SET user:1002 $ '{"name": "Jane Doe", "hobbies": ["reading", "swimming", "hiking"]}'
OK
127.0.0.1:7379> JSON.CLEAR user:1002 $.hobbies
(integer) 1
127.0.0.1:7379> JSON.GET user:1002
"{\"name\":\"Jane Doe\",\"hobbies\":[]}"

----------------------------------------

TITLE: ZRANGE.WATCH Output Example
DESCRIPTION: Example showing the real-time output received by the watching client as the sorted set is updated.

LANGUAGE: bash
CODE:
127.0.0.1:7379> ZRANGE.WATCH match:100 0 1 REV WITHSCORES
Press Ctrl+C to exit watch mode.
[{1 player1}]
[{2 player2} {1 player1}]
[{2 player2} {1 player3}]
[{4 player4} {2 player2}]

----------------------------------------

TITLE: Updated JSON After Top-Level Toggle
DESCRIPTION: The resulting JSON document after toggling the top-level boolean value.

LANGUAGE: json
CODE:
{
  "name": "John Doe",
  "active": false,
  "settings": {
    "notifications": true
  }
}

----------------------------------------

TITLE: HGET Wrong Data Type Example
DESCRIPTION: Demonstrates the error when attempting to use HGET on a non-hash data type.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET user:3000 "Not a hash"
OK
127.0.0.1:7379> HGET user:3000 name
(error) WRONGTYPE Operation against a key holding the wrong kind of value

----------------------------------------

TITLE: Basic Set Intersection Example
DESCRIPTION: Example showing how to perform basic set intersection operations with three sets.

LANGUAGE: bash
CODE:
# Add elements to sets
127.0.0.1:7379> SADD set1 "a" "b" "c"
(integer) 3
127.0.0.1:7379> SADD set2 "b" "c" "d"
(integer) 3
127.0.0.1:7379> SADD set3 "c" "d" "e"
(integer) 3

# Compute intersection
127.0.0.1:7379> SINTER set1 set2 set3
1) "c"

----------------------------------------

TITLE: Basic ZPOPMIN Usage Example
DESCRIPTION: Demonstrates basic usage of ZPOPMIN to remove the lowest scoring member from a sorted set.

LANGUAGE: bash
CODE:
127.0.0.1:7379> ZADD myzset 1 member1 2 member2 3 member3
(integer) 3
127.0.0.1:7379> ZPOPMIN myzset
1) 1 "member1"

----------------------------------------

TITLE: Running DiceDB Container
DESCRIPTION: Docker command to start a DiceDB server instance locally on port 7379.

LANGUAGE: bash
CODE:
docker run -d -p 7379:7379 dicedb/dicedb

----------------------------------------

TITLE: Retrieving Cardinality of Non-Existent Set in DiceDB
DESCRIPTION: Demonstrates using SCARD on a non-existent set, which returns 0.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SCARD nonexistingset
(integer) 0

----------------------------------------

TITLE: Syntax for GEOADD Command in DiceDB
DESCRIPTION: Defines the syntax for the GEOADD command, including optional parameters for controlling addition behavior.

LANGUAGE: bash
CODE:
GEOADD key [NX | XX] [CH] longitude latitude member [longitude latitude member ...]

----------------------------------------

TITLE: Fetching Latest Latency Spikes in DiceDB
DESCRIPTION: Example usage of the LATENCY LATEST subcommand in DiceDB. It retrieves the most recent latency spikes recorded by the server.

LANGUAGE: bash
CODE:
127.0.0.1:7379> LATENCY LATEST
1) 1) "command"
   2) (integer) 1633024800
   3) (integer) 15
2) 1) "fork"
   2) (integer) 1633024805
   3) (integer) 25

----------------------------------------

TITLE: Using WITHSCORE Option with ZRANK Command in DiceDB
DESCRIPTION: Shows how to use the WITHSCORE option to retrieve both rank and score of a member in a sorted set.

LANGUAGE: bash
CODE:
127.0.0.1:7379> ZADD myzset 1 member1 2 member2
(integer) 2
127.0.0.1:7379> ZRANK myzset member2 WITHSCORE
(integer) [1, 2]

----------------------------------------

TITLE: Retrieving Geohash with Missing Arguments
DESCRIPTION: Shows the error response when executing the GEOHASH command without required arguments.

LANGUAGE: bash
CODE:
127.0.0.1:7379> GEOHASH
(error) ERR wrong number of arguments for 'geohash' command

----------------------------------------

TITLE: Retrieving Latency History in DiceDB
DESCRIPTION: Example usage of the LATENCY HISTORY subcommand in DiceDB. It fetches the historical latency data for a specific event (in this case, the 'command' event).

LANGUAGE: bash
CODE:
127.0.0.1:7379> LATENCY HISTORY command
1) 1) (integer) 1633024800
   2) (integer) 15
2) 1) (integer) 1633024805
   2) (integer) 25

----------------------------------------

TITLE: Attempting to Set an Existing Field with HSETNX in DiceDB
DESCRIPTION: An example showing HSETNX attempting to set a field that already exists. The command returns 0, indicating no change was made.

LANGUAGE: bash
CODE:
127.0.0.1:7379> HSETNX product:3000 name "Tablet"
0

----------------------------------------

TITLE: Wrong Type Error Handling
DESCRIPTION: Example showing error handling when attempting to intersect with a non-set type.

LANGUAGE: bash
CODE:
# Add elements to sets
127.0.0.1:7379> SADD set1 "a" "b" "c"
(integer) 3
# Create a string key
127.0.0.1:7379> SET stringKey "value"
OK

# Attempt to compute intersection with a non-set key
SINTER set1 stringKey
(error) WRONGTYPE Operation against a key holding the wrong kind of value

----------------------------------------

TITLE: Inserting a Single Value with RPUSH in DiceDB
DESCRIPTION: An example of using RPUSH to insert a single value 'hello' into a list named 'mylist'. The command returns the length of the list after insertion.

LANGUAGE: bash
CODE:
127.0.0.1:7379> RPUSH mylist "hello"
(integer) 1

----------------------------------------

TITLE: Unauthorized Command Access Example
DESCRIPTION: Example showing error when attempting to execute a command without authentication

LANGUAGE: bash
CODE:
127.0.0.1:7379> GET x
(error) NOAUTH Authentication required

----------------------------------------

TITLE: Overwriting Existing HyperLogLog with PFMERGE
DESCRIPTION: Shows how PFMERGE overwrites an existing destination key with merged HyperLogLog data.

LANGUAGE: bash
CODE:
127.0.0.1:7379> PFADD hll_merged "x" "y" "z"
(integer) 1
127.0.0.1:7379> PFMERGE hll_merged hll1 hll2 hll3
OK
127.0.0.1:7379> PFCOUNT hll_merged
(integer) 7

----------------------------------------

TITLE: Initial JSON Document Structure Example
DESCRIPTION: Example JSON document structure showing boolean values that can be toggled using the JSON.TOGGLE command.

LANGUAGE: json
CODE:
{
  "name": "John Doe",
  "active": true,
  "settings": {
    "notifications": true
  }
}

----------------------------------------

TITLE: Generating Latency Graph in DiceDB
DESCRIPTION: Example usage of the LATENCY GRAPH subcommand in DiceDB. It generates a visual representation of the latency data for a specific event (in this case, the 'command' event).

LANGUAGE: bash
CODE:
127.0.0.1:7379> LATENCY GRAPH command
| 15 | 25 |

----------------------------------------

TITLE: DSQL Query Syntax for Q.WATCH Command
DESCRIPTION: SQL-like query syntax for specifying data to monitor and operations to perform, including SELECT, WHERE, ORDER BY, and LIMIT clauses.

LANGUAGE: sql
CODE:
SELECT $key, $value
WHERE condition
ORDER BY field [ASC | DESC] LIMIT n

----------------------------------------

TITLE: Updated JSON After Nested Toggle
DESCRIPTION: The resulting JSON document after toggling the nested boolean value.

LANGUAGE: json
CODE:
{
  "name": "John Doe",
  "active": false,
  "settings": {
    "notifications": false
  }
}

----------------------------------------

TITLE: MGET with Different Data Types
DESCRIPTION: Demonstrates MGET behavior with keys of different data types and error handling

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET key1 "value1"
OK

LANGUAGE: bash
CODE:
127.0.0.1:7379> LPUSH key2 "value2"
(integer) 1

LANGUAGE: bash
CODE:
127.0.0.1:7379> MGET key1 key2
1) "value1"
2) (nil)

----------------------------------------

TITLE: RPOP with Invalid Number of Arguments in DiceDB
DESCRIPTION: Shows error handling when using RPOP with incorrect number of arguments.

LANGUAGE: bash
CODE:
RPOP mylist secondlist
(error) ERR wrong number of arguments for 'lpop' command

----------------------------------------

TITLE: Attempting to remove members from a non-existing set using SREM in DiceDB
DESCRIPTION: This example illustrates the behavior of SREM when trying to remove a member from a set that doesn't exist. The command returns 0 as no members were removed.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SREM myset "one"
(integer) 0

----------------------------------------

TITLE: Executing Basic Copy Operation in DiceDB
DESCRIPTION: Demonstrates a basic usage of the COPY command to duplicate a key's value within the same database.

LANGUAGE: bash
CODE:
127.0.0.1:7379> COPY key1 key2
(integer) 1

----------------------------------------

TITLE: Basic Usage of BF.RESERVE Command in DiceDB (Bash)
DESCRIPTION: This example demonstrates the basic usage of BF.RESERVE command, initializing a Bloom Filter named 'my_bloom_filter' with an error rate of 0.005 (0.5%) and an initial capacity of 5000 elements.

LANGUAGE: bash
CODE:
127.0.0.1:7379> BF.RESERVE my_bloom_filter 0.005 5000
OK

----------------------------------------

TITLE: LINSERT with Non-Existent Key Example
DESCRIPTION: Shows the behavior of LINSERT command when used with a non-existent key.

LANGUAGE: bash
CODE:
127.0.0.1:7379> LINSERT nonExistentList before "two" "one"
(integer) 0

----------------------------------------

TITLE: Incrementing Integer Value
DESCRIPTION: Shows how to increment an integer value (age) by 1.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.NUMINCRBY user:1001 $.age 1
"[31]"

----------------------------------------

TITLE: ZRANGE with REV Option
DESCRIPTION: Demonstrates retrieving elements in reverse order using the REV option.

LANGUAGE: bash
CODE:
127.0.0.1:7379> ZRANGE leaderboard 0 2 REV
1) "Bob"
2) "Charlie"
3) "Alice"

----------------------------------------

TITLE: Wildcard Path Array Length Query
DESCRIPTION: Demonstrates using wildcards to get array lengths from multiple paths in a complex JSON document.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.SET user:1005 $ '{"age": 13,"high": 1.60,"pet": null,"language": ["python", "golang"],"partner": {"name": "tom"}}'
OK
127.0.0.1:7379> JSON.ARRLEN user:1005 $.*
1) (nil)
1) (nil)
1) (nil)
4) (integer) 2
5) (nil)

----------------------------------------

TITLE: Handling Invalid JSON Error in JSON.MSET
DESCRIPTION: This example demonstrates the error returned when JSON.MSET is called with an invalid JSON string as one of the values.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.MSET user:1 '{"name": "Alice", "age": 30}' user:2 '{name: "Bob", age: 25}'
(error) ERR invalid JSON string

----------------------------------------

TITLE: Basic ZPOPMAX Command Syntax
DESCRIPTION: Shows the basic syntax format for the ZPOPMAX command.

LANGUAGE: bash
CODE:
ZPOPMAX key [count]

----------------------------------------

TITLE: Basic JSON.STRLEN Usage Example
DESCRIPTION: Example showing how to get the length of the 'name' field from a JSON document.

LANGUAGE: bash
CODE:
JSON.STRLEN user:1001 $.name
(integer) 8

----------------------------------------

TITLE: Creating a New List with LPUSH in DiceDB
DESCRIPTION: An example of creating a new list 'newlist' and inserting the value 'first' at its head.

LANGUAGE: bash
CODE:
127.0.0.1:7379> LPUSH newlist "first"
(integer) 1

----------------------------------------

TITLE: Popping Value from JSON Array Example
DESCRIPTION: Shows how to pop a value from a JSON array at a specific index and view the modified result.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.SET myjson . '{"numbers": [1, 2, 3]}'
OK
127.0.0.1:7379> JSON.ARRPOP myjson .numbers 1
(integer) 2
127.0.0.1:7379> JSON.GET myjson
"{\"numbers\":[1,3]}"

----------------------------------------

TITLE: Missing Arguments Example
DESCRIPTION: Example showing error when required arguments are missing.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SETEX foo 10
(error) ERROR wrong number of arguments for 'setex' command

----------------------------------------

TITLE: ZCOUNT Invalid Usage Examples
DESCRIPTION: Shows error cases when using ZCOUNT with incorrect argument count or invalid score values

LANGUAGE: bash
CODE:
127.0.0.1:7379> ZCOUNT myzset
(error) ERROR wrong number of arguments for 'zcount' command

127.0.0.1:7379> ZCOUNT myzset "invalid" 100
(integer) 0

----------------------------------------

TITLE: JSON.TYPE Non-JSON Data Error Handling
DESCRIPTION: Illustrates the error returned when attempting to use JSON.TYPE on non-JSON data.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET mykey "This is a string"
OK
127.0.0.1:7379> JSON.TYPE mykey $
(error) ERROR Existing key has wrong Dice type

----------------------------------------

TITLE: ZPOPMAX Wrong Type Error
DESCRIPTION: Shows error handling when using ZPOPMAX on wrong key type.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET stringkey "string_value"
OK
127.0.0.1:7379> ZPOPMAX stringkey
(error) WRONGTYPE Operation against a key holding the wrong kind of value

----------------------------------------

TITLE: Watch Update Notifications
DESCRIPTION: Shows the notifications received by the watching client when the sorted set is updated.

LANGUAGE: bash
CODE:
Command: ZRANGE
Fingerprint: 4016579015
Data: [{1 player1}]
Command: ZRANGE
Fingerprint: 4016579015
Data: [{2 player2}]
Command: ZRANGE
Fingerprint: 4016579015
Data: [{2 player2}]
Command: ZRANGE
Fingerprint: 4016579015
Data: [{4 player4}]

----------------------------------------

TITLE: Non-Object Path Error Handling
DESCRIPTION: Example showing the behavior when accessing a path that points to a non-object value.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.SET c $ '{"name": "Alice", "age": 30}'
"OK"
127.0.0.1:7379> JSON.OBJKEYS c $.age
(nil)

----------------------------------------

TITLE: Syntax for ZRANK Command in DiceDB
DESCRIPTION: Shows the basic syntax for the ZRANK command, including optional WITHSCORE parameter.

LANGUAGE: bash
CODE:
ZRANK key member [WITHSCORE]

----------------------------------------

TITLE: Nested JSON.STRLEN Example
DESCRIPTION: Example demonstrating how to get the length of a nested string field 'city' within the address object.

LANGUAGE: bash
CODE:
JSON.STRLEN user:1001 $.address.city
(integer) 8

----------------------------------------

TITLE: RPOP with Invalid Data Type in DiceDB
DESCRIPTION: Demonstrates error handling when attempting to use RPOP on a key that contains a string instead of a list.

LANGUAGE: bash
CODE:
SET mystring "hello"
OK
LPOP mystring
(error) WRONGTYPE Operation against a key holding the wrong kind of value

----------------------------------------

TITLE: HINCRBY Usage - Non-existing Field
DESCRIPTION: Demonstrates using HINCRBY on an existing hash with a non-existing field, creating the new field with the increment value.

LANGUAGE: bash
CODE:
127.0.0.1:7379> HINCRBY keys field2 10
(integer) 10

----------------------------------------

TITLE: LLEN Command with Non-Existent Key in DiceDB
DESCRIPTION: Example showing the behavior of the LLEN command when used with a non-existent key in DiceDB.

LANGUAGE: bash
CODE:
127.0.0.1:7379> LLEN nonExistentList
(integer) 0

----------------------------------------

TITLE: Handling Incorrect Argument Count Error in DiceDB RENAME
DESCRIPTION: This example shows the error returned when the RENAME command is used with an incorrect number of arguments in DiceDB.

LANGUAGE: bash
CODE:
127.0.0.1:7379> RENAME key1
(error) ERR wrong number of arguments for 'rename' command

----------------------------------------

TITLE: Executing JSON.OBJLEN Command in DiceDB
DESCRIPTION: Demonstrates the basic syntax for the JSON.OBJLEN command, which retrieves the number of keys in a JSON object stored at a specified key.

LANGUAGE: bash
CODE:
JSON.OBJLEN key [path]

----------------------------------------

TITLE: HVALS Command with Empty Hash in DiceDB
DESCRIPTION: Example showing the result of the HVALS command when used on an empty hash. It returns (nil) to indicate no values are present.

LANGUAGE: bash
CODE:
127.0.0.1:7379> HVALS user:1002
(nil)

----------------------------------------

TITLE: Setting and Retrieving Multiple Key-Value Pairs in DiceDB
DESCRIPTION: This example demonstrates how to use the MSET command to set multiple key-value pairs and then retrieve them using the GET command in DiceDB.

LANGUAGE: bash
CODE:
127.0.0.1:7379> MSET name "Alice" age "30" city "Wonderland"
OK
127.0.0.1:7379> GET name
"Alice"
127.0.0.1:7379> GET age
"30"
127.0.0.1:7379> GET city
"Wonderland"

----------------------------------------

TITLE: Root Path Array Length Query
DESCRIPTION: Shows how to get the length of a JSON array at the root level of a document.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.SET user:1002 $ '["item1", "item2", "item3"]'
OK
127.0.0.1:7379> JSON.ARRLEN user:1002
(integer) 3

----------------------------------------

TITLE: HVALS Command with Non-existent Key in DiceDB
DESCRIPTION: Example demonstrating the use of HVALS command with a non-existent key. The command returns (nil) when the specified hash does not exist.

LANGUAGE: bash
CODE:
127.0.0.1:7379> HVALS user:1003
(nil)

----------------------------------------

TITLE: Intersection with Non-Existent Set
DESCRIPTION: Example demonstrating intersection behavior with non-existent sets.

LANGUAGE: bash
CODE:
# Add elements to sets
127.0.0.1:7379> SADD set1 "a" "b" "c"
(integer) 3
127.0.0.1:7379> SADD set2 "b" "c" "d"
(integer) 3

# Compute intersection with a non-existent set
127.0.0.1:7379> SINTER set1 set2 set3
(empty array)

----------------------------------------

TITLE: Adding Single Element to HyperLogLog
DESCRIPTION: Example showing how to add a single element to a HyperLogLog data structure.

LANGUAGE: bash
CODE:
127.0.0.1:7379> PFADD myhyperloglog "element1"
(integer) 1

----------------------------------------

TITLE: Using GETRANGE with Bitmap in DiceDB
DESCRIPTION: Demonstrates how GETRANGE returns the string representation of a byte array stored in a bitmap.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SETBIT bitmapkey 2 1
(integer) 0
127.0.0.1:7379> SETBIT bitmapkey 3 1
(integer) 0
127.0.0.1:7379> SETBIT bitmapkey 5 1
(integer) 0
127.0.0.1:7379> SETBIT bitmapkey 10 1
(integer) 0
127.0.0.1:7379> SETBIT bitmapkey 11 1
(integer) 0
127.0.0.1:7379> SETBIT bitmapkey 14 1
(integer) 0
127.0.0.1:7379> GETRANGE bitmapkey 0 -1
"42"

----------------------------------------

TITLE: Extracting Keys from DEL Command in DiceDB
DESCRIPTION: This example shows how COMMAND GETKEYS is used to identify the keys involved in a DEL operation. It correctly extracts 'key1', 'key2', and 'key3' as the keys to be deleted.

LANGUAGE: bash
CODE:
127.0.0.1:7379> COMMAND GETKEYS DEL key1 key2 key3
1) "key1"
2) "key2"
3) "key3"

----------------------------------------

TITLE: OBJECT REFCOUNT Example
DESCRIPTION: Example showing how to retrieve the reference count of a key using the REFCOUNT subcommand.

LANGUAGE: bash
CODE:
OBJECT REFCOUNT mykey
(integer) 1

----------------------------------------

TITLE: JSON.ARRINDEX with Start Index in DiceDB
DESCRIPTION: Shows how to use JSON.ARRINDEX with a start index to search for a value from a specific position in the array.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.SET b $ '{"name": "Alice", "mobile": [1902, 1903, 1904]}'
"OK"
127.0.0.1:7379> JSON.ARRINDEX a $.mobile 1902 0
1) (integer) 0
127.0.0.1:7379> JSON.ARRINDEX a $.mobile 1902 1
1) (integer) -1

----------------------------------------

TITLE: Executing SLEEP Command in DiceDB
DESCRIPTION: The SLEEP command syntax in DiceDB, used to pause the client execution for a specified number of seconds. It takes an integer parameter representing the sleep duration.

LANGUAGE: bash
CODE:
SLEEP seconds

----------------------------------------

TITLE: HMSET Command with Invalid Arguments
DESCRIPTION: Examples showing errors when HMSET is called with incorrect number of arguments.

LANGUAGE: bash
CODE:
127.0.0.1:7379> HMSET product:4000
(error) ERR wrong number of arguments for 'hmset' command

127.0.0.1:7379> HMSET product:4000 name
(error) ERR wrong number of arguments for 'hmset' command

----------------------------------------

TITLE: JSON.ARRINDEX with Start and Stop Indices in DiceDB
DESCRIPTION: Illustrates the use of JSON.ARRINDEX with both start and stop indices to search within a specific range of the array.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.SET b $ '{"name": "Alice", "mobile": [1902, 1903, 1904]}'
"OK"
127.0.0.1:7379> JSON.ARRINDEX a $.mobile 1902 0 2
1) (integer) 0
127.0.0.1:7379> JSON.ARRINDEX a $.mobile 1902 1 2
1) (integer) -1
127.0.0.1:7379> JSON.ARRINDEX a $.mobile 1904 0 1
1) (integer) -1
127.0.0.1:7379> JSON.ARRINDEX a $.mobile 1904 0 2
1) (integer) -1
127.0.0.1:7379> JSON.ARRINDEX a $.mobile 1904 0 3
1) (integer) 2

----------------------------------------

TITLE: Error Handling: Missing Parameter in SLEEP Command
DESCRIPTION: Demonstrates the error message returned when the SLEEP command is called without specifying the required 'seconds' parameter.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SLEEP
(error) ERR wrong number of arguments for 'sleep' command

----------------------------------------

TITLE: ZREM Command on Non-existent Sorted Set in DiceDB
DESCRIPTION: Illustrates the behavior of ZREM when attempting to remove an element from a non-existent sorted set. Returns 0 as no elements were removed.

LANGUAGE: bash
CODE:
127.0.0.1:7379> ZREM nonExistentZSet one
(integer) 0

----------------------------------------

TITLE: PFCOUNT Usage: Single Key in DiceDB
DESCRIPTION: Shows an example of using PFCOUNT with a single HyperLogLog key in DiceDB, after adding elements with PFADD.

LANGUAGE: bash
CODE:
127.0.0.1:7379> PFADD hll1 "foo" "bar" "baz"
(integer) 1
127.0.0.1:7379> PFCOUNT hll1
(integer) 3

----------------------------------------

TITLE: Copying with REPLACE Option in DiceDB
DESCRIPTION: Shows how to use the COPY command with the REPLACE option to overwrite an existing destination key.

LANGUAGE: bash
CODE:
127.0.0.1:7379> COPY key1 key2 REPLACE
(integer) 1

----------------------------------------

TITLE: Pushing Updated Changes
DESCRIPTION: This command pushes your updated changes to your fork after rebasing and resolving conflicts.

LANGUAGE: text
CODE:
git push origin <your issue branch>

----------------------------------------

TITLE: Error Handling: Non-existent Path in JSON.ARRTRIM in DiceDB
DESCRIPTION: Demonstrates the error returned when attempting to use JSON.ARRTRIM with a non-existent path.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.SET d $ '[1, 2, 3, 4, 5]'
"OK"
127.0.0.1:7379> JSON.ARRTRIM d . -10 10
(error) ERROR Path '.' does not exist

----------------------------------------

TITLE: BITFIELD_RO Command Syntax
DESCRIPTION: Basic syntax pattern for the BITFIELD_RO command showing the required key parameter and optional GET operations.

LANGUAGE: bash
CODE:
BITFIELD_RO key [GET type offset [GET type offset ...]]

----------------------------------------

TITLE: PFCOUNT Usage: Multiple Keys in DiceDB
DESCRIPTION: Demonstrates using PFCOUNT with multiple HyperLogLog keys in DiceDB, showing the union cardinality estimation.

LANGUAGE: bash
CODE:
127.0.0.1:7379> PFADD hll1 "foo" "bar"
(integer) 1
127.0.0.1:7379> PFADD hll2 "baz" "qux"
(integer) 1
127.0.0.1:7379> PFCOUNT hll1 hll2
(integer) 4

----------------------------------------

TITLE: Wrong Data Type Error with BF.RESERVE in DiceDB (Bash)
DESCRIPTION: This example shows the error that occurs when trying to use BF.RESERVE on a key that already exists with a different data type. It first sets a string value to the key and then attempts to create a Bloom Filter with the same key.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET my_bloom_filter "value"
OK
127.0.0.1:7379> BF.RESERVE my_bloom_filter 0.01 1000
(error) WRONGTYPE Operation against a key holding the wrong kind of value

----------------------------------------

TITLE: Initializing Bloom Filter with BF.RESERVE in DiceDB (Bash)
DESCRIPTION: The BF.RESERVE command is used to create a new Bloom Filter with specified key, error rate, and initial capacity. It returns 'OK' on success and raises errors for invalid inputs or existing keys of different types.

LANGUAGE: bash
CODE:
BF.RESERVE key [options]

----------------------------------------

TITLE: Handling Non-Existent Source Key in DiceDB COPY Command
DESCRIPTION: Illustrates the behavior of the COPY command when attempting to copy from a non-existent source key.

LANGUAGE: bash
CODE:
127.0.0.1:7379> COPY nonexistent key2
(integer) 0

----------------------------------------

TITLE: Invalid PFMERGE Usage with Wrong Type
DESCRIPTION: Shows the error returned when attempting to merge with a key that is not a valid HyperLogLog.

LANGUAGE: bash
CODE:
127.0.0.1:7379> PFMERGE hll_merged not_hyperLogLog
(error) WRONGTYPE Key is not a valid HyperLogLog string value

----------------------------------------

TITLE: ZADD Commands for Updating Sorted Set
DESCRIPTION: Series of ZADD commands demonstrating how to update the sorted set being watched.

LANGUAGE: bash
CODE:
127.0.0.1:7379> ZADD match:100 1 "player1"
OK
127.0.0.1:7379> ZADD match:100 2 "player2"
OK
127.0.0.1:7379> ZADD match:100 1 "player3"
OK
127.0.0.1:7379> ZADD match:100 4 "player4"
OK

----------------------------------------

TITLE: Executing COMMAND HELP in DiceDB
DESCRIPTION: This snippet demonstrates the basic syntax for using the COMMAND HELP command in DiceDB. It doesn't accept any parameters and returns help text for all available subcommands of the COMMAND command.

LANGUAGE: bash
CODE:
COMMAND HELP

----------------------------------------

TITLE: SDIFF Command with Syntax Error in DiceDB
DESCRIPTION: Shows the error returned when SDIFF is called without any arguments.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SDIFF
(error) ERR wrong number of arguments for 'sdiff' command

----------------------------------------

TITLE: Adding an Item to a Bloom Filter using BF.ADD in DiceDB
DESCRIPTION: This snippet demonstrates how to add an item to a Bloom Filter using the BF.ADD command. It shows the syntax and expected return value when adding a new item.

LANGUAGE: bash
CODE:
127.0.0.1:7379> BF.ADD mybloomfilter "apple"
(integer) 1

----------------------------------------

TITLE: ZCOUNT Command Usage Examples
DESCRIPTION: Demonstrates various usage scenarios of the ZCOUNT command including empty sets, valid ranges, and out-of-range queries

LANGUAGE: bash
CODE:
127.0.0.1:7379> ZCOUNT NON_EXISTENT_KEY 0 100
0

127.0.0.1:7379> ZADD myzset 10 member1 20 member2 30 member3
(integer) 3
127.0.0.1:7379> ZCOUNT myzset 15 25
1

127.0.0.1:7379> ZCOUNT myzset 50 100
0

127.0.0.1:7379> ZCOUNT myzset 30 10
0

----------------------------------------

TITLE: SDIFF Command with Single Set in DiceDB
DESCRIPTION: Demonstrates using SDIFF with a single set, which returns all elements of that set.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SADD set1 "a" "b" "c"
127.0.0.1:7379> SDIFF set1
1) "a"
2) "b"
3) "c"

----------------------------------------

TITLE: Adding an Existing Item to a Bloom Filter using BF.ADD in DiceDB
DESCRIPTION: This example shows the behavior of BF.ADD when attempting to add an item that is already present in the Bloom Filter. The command returns 0 to indicate the item was likely already present.

LANGUAGE: bash
CODE:
127.0.0.1:7379> BF.ADD mybloomfilter "apple"
(integer) 0

----------------------------------------

TITLE: GETDEL Command Syntax
DESCRIPTION: The basic syntax for the Redis GETDEL command that takes a single key parameter.

LANGUAGE: redis
CODE:
GETDEL key

----------------------------------------

TITLE: Fetching Coordinates of Non-existent Member with GEOPOS in DiceDB
DESCRIPTION: Shows the behavior of the GEOPOS command when trying to retrieve coordinates for a member that doesn't exist in the sorted set. The command returns (nil) for non-existent members.

LANGUAGE: bash
CODE:
127.0.0.1:7379> GEOPOS Sicily "Agrigento"
1) (nil)

----------------------------------------

TITLE: Basic JSON.ARRAPPEND Command Syntax
DESCRIPTION: Shows the basic syntax structure for the JSON.ARRAPPEND command in DiceDB

LANGUAGE: bash
CODE:
JSON.ARRAPPEND <key> <path> <json_value> [<json_value> ...]

----------------------------------------

TITLE: Leaderboard Update Commands
DESCRIPTION: Shows a series of ZADD commands updating the watched sorted set with player scores.

LANGUAGE: bash
CODE:
127.0.0.1:7379> ZADD match:100 1 "player1"
OK
127.0.0.1:7379> ZADD match:100 2 "player2"
OK
127.0.0.1:7379> ZADD match:100 1 "player3"
OK
127.0.0.1:7379> ZADD match:100 4 "player4"
OK

----------------------------------------

TITLE: Basic PFCOUNT.WATCH Usage Example
DESCRIPTION: Example showing how to monitor the approximate cardinality of a HyperLogLog in real-time.

LANGUAGE: bash
CODE:
127.0.0.1:7379> PFCOUNT.WATCH users:hll
Press Ctrl+C to exit watch mode.
0

----------------------------------------

TITLE: Wrong Type Error Example
DESCRIPTION: Demonstrates error handling when attempting to use SADD on a non-set key

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET mykey "value"
OK
127.0.0.1:7379> SADD mykey "member1"
(error) WRONGTYPE Operation against a key holding the wrong kind of value

----------------------------------------

TITLE: Counting Bits in Specified Bit Range with BITCOUNT in DiceDB
DESCRIPTION: Example usage of BITCOUNT to count set bits in a specified bit range of the string using the BIT option.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET mykey "foobar"
OK
127.0.0.1:7379> BITCOUNT mykey 8 31 BIT
(integer) 15

----------------------------------------

TITLE: Redis EXPIREAT Command Examples
DESCRIPTION: Demonstrates various uses of the EXPIREAT command including setting initial expiration and using different modifiers (NX, XX, GT, LT) to control when expiration times can be set or updated.

LANGUAGE: redis
CODE:
locahost:7379> SET k1 v1
OK OK
locahost:7379> EXPIREAT k1 1740829942
OK 1
locahost:7379> EXPIREAT k1 1740829942 NX
OK 0
locahost:7379> EXPIREAT k1 1740829942 XX
OK 0
locahost:7379> EXPIREAT k1 1740829943 GT
OK 0
locahost:7379> EXPIREAT k1 1740829942 LT
OK 1

----------------------------------------

TITLE: PFCOUNT.WATCH and PFADD Usage Example
DESCRIPTION: Demonstrates the workflow of watching a HyperLogLog key and adding elements to it before unwatching.

LANGUAGE: bash
CODE:
127.0.0.1:7379> PFCOUNT.WATCH users:hll
Press Ctrl+C to exit watch mode.


LANGUAGE: bash
CODE:
127.0.0.1:7379> PFADD users:hll "user1"
OK
127.0.0.1:7379> PFADD users:hll "user2"
OK
127.0.0.1:7379> PFADD users:hll "user3"
OK

LANGUAGE: bash
CODE:
127.0.0.1:7379> PFCOUNT.WATCH users:hll
Press Ctrl+C to exit watch mode.
1
2
3

LANGUAGE: bash
CODE:
127.0.0.1:7379> PFCOUNT.UNWATCH 1298365423
OK

----------------------------------------

TITLE: BITFIELD_RO Basic Usage Example
DESCRIPTION: Demonstrates basic usage of BITFIELD_RO command by first setting a string value and then reading an 8-bit integer starting at offset 16.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET hello "Hello World"
OK
127.0.0.1:7379> BITFIELD_RO hello GET i8 16
1) "108"

----------------------------------------

TITLE: UNWATCH Command Example
DESCRIPTION: Demonstrates practical usage of the UNWATCH command by removing a subscription with a specific fingerprint in the DiceDB CLI.

LANGUAGE: plaintext
CODE:
localhost:7379> UNWATCH 2356444921

----------------------------------------

TITLE: JSON.TYPE Non-Existent Path Handling
DESCRIPTION: Shows how JSON.TYPE handles requests for non-existent paths in the JSON document.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.TYPE user:1001 $.nonexistent
(empty array)

----------------------------------------

TITLE: Appending Multiple Values to JSON Array
DESCRIPTION: Demonstrates how to append multiple string values to a JSON array simultaneously

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.SET myjson . '{"fruits": ["apple", "banana"]}'
OK
127.0.0.1:7379> JSON.ARRAPPEND myjson .fruits "cherry" "date"
(integer) 4
127.0.0.1:7379> JSON.GET myjson
"{\"fruits\":[\"apple\",\"banana\",\"cherry\",\"date\"]}"

----------------------------------------

TITLE: HLEN with Non-existent Key
DESCRIPTION: Shows HLEN behavior when accessing a non-existent hash key.

LANGUAGE: bash
CODE:
127.0.0.1:7379> HLEN nonExistentHash
(integer) 0

----------------------------------------

TITLE: Invalid Usage of PTTL Command in DiceDB
DESCRIPTION: Shows the error message when PTTL command is used incorrectly with extra arguments.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET newkey "value"
127.0.0.1:7379> PTTL newkey value
(error) ERR wrong number of arguments for 'pttl' command

----------------------------------------

TITLE: PFMERGE with Non-Existent Source Keys
DESCRIPTION: Demonstrates how PFMERGE handles non-existent source keys by treating them as empty HyperLogLogs.

LANGUAGE: bash
CODE:
127.0.0.1:7379> PFMERGE hll_merged hll1 hll2 non_existent_key
OK
127.0.0.1:7379> PFCOUNT hll_merged
(integer) 5

----------------------------------------

TITLE: Basic HRANDFIELD Command Syntax
DESCRIPTION: Demonstrates the basic syntax structure for the HRANDFIELD command

LANGUAGE: bash
CODE:
HRANDFIELD key [count [WITHVALUES]]

----------------------------------------

TITLE: Setting Hash Field in DiceDB via HTTP
DESCRIPTION: Example of setting a hash field using the HSET command over HTTP. Shows both HTTP request format and cURL equivalent.

LANGUAGE: http
CODE:
POST /HSET HTTP/1.1
Host: your-server-address
Content-Type: application/json

{
"key": "test",
"field": "test",
"value": "test"
}

LANGUAGE: bash
CODE:
curl --location 'http://your-server-address:PORT/HSET' \
--header 'Content-Type: application/json' \
--data '{
  "key": "test",
  "field": "test",
  "value": "test"
}'

LANGUAGE: json
CODE:
{
  "status": "success",
  "data": 1
}

----------------------------------------

TITLE: Basic LINSERT Command Syntax
DESCRIPTION: Shows the basic syntax for the LINSERT command in DiceDB.

LANGUAGE: bash
CODE:
LINSERT key <BEFORE | AFTER> pivot element

----------------------------------------

TITLE: HRANDFIELD Invalid Key Usage
DESCRIPTION: Shows the error when using HRANDFIELD on a non-hash key

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET key "not a hash"
OK
127.0.0.1:7379> HRANDFIELD key
(error) WRONGTYPE Operation against a key holding the wrong kind of value

----------------------------------------

TITLE: Connecting to DiceDB WebSocket Server
DESCRIPTION: Shows the URL format for connecting to the DiceDB WebSocket server. Replace the placeholders with your actual server address and port.

LANGUAGE: plaintext
CODE:
ws://your-server-address:port/

----------------------------------------

TITLE: ZPOPMIN with Non-Existing Key
DESCRIPTION: Shows the behavior when using ZPOPMIN on a non-existent key.

LANGUAGE: bash
CODE:
127.0.0.1:7379> ZPOPMIN NON_EXISTENT_KEY
(empty array)

----------------------------------------

TITLE: Handling Non-Existent Path Error
DESCRIPTION: Shows the error response when attempting to pop from a non-existing path in a JSON document.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.SET myjson . '{"numbers": [1, 2, 3]}'
OK
127.0.0.1:7379> JSON.ARRPOP myjson .nonexistingpath 4
(error) ERR path .nonexistingpath does not exist

----------------------------------------

TITLE: Checking Non-Existing Item in Bloom Filter
DESCRIPTION: Shows checking for an item that doesn't exist in the Bloom Filter.

LANGUAGE: bash
CODE:
127.0.0.1:7379> BF.EXISTS myBloomFilter "banana"
(integer) 0

----------------------------------------

TITLE: Syntax for LPUSH Command in DiceDB
DESCRIPTION: The basic syntax for the LPUSH command, showing how to specify the key and one or more values to be inserted at the head of the list.

LANGUAGE: bash
CODE:
LPUSH key value [value ...]

----------------------------------------

TITLE: ZPOPMIN Wrong Type Error
DESCRIPTION: Shows the error when using ZPOPMIN on a key with wrong type.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET stringkey "string_value"
OK
127.0.0.1:7379> ZPOPMIN stringkey
(error) WRONGTYPE Operation against a key holding the wrong kind of value

----------------------------------------

TITLE: Defining Web Crawler Access Rules in robots.txt
DESCRIPTION: Configuration that allows all web crawlers (*) to access the entire site and provides the sitemap location for better crawling efficiency.

LANGUAGE: robots.txt
CODE:
User-agent: *
Allow: /

Sitemap: https://arpitbhayani.me/sitemap-index.xml

----------------------------------------

TITLE: Installing Dependencies
DESCRIPTION: Commands to install the required Go packages including DiceDB SDK, Gin framework, and UUID generator.

LANGUAGE: bash
CODE:
go get github.com/dicedb/dicedb-go@v1.0.3
go get github.com/gin-gonic/gin
go get github.com/google/uuid

----------------------------------------

TITLE: HRANDFIELD Invalid Count Parameter
DESCRIPTION: Demonstrates the error when using an invalid count parameter

LANGUAGE: bash
CODE:
127.0.0.1:7379> HRANDFIELD keys hello
(error) ERROR value is not an integer or out of range

----------------------------------------

TITLE: Running membench Benchmark Tool
DESCRIPTION: Command to execute membench benchmark utility with specified parameters including database type, host, port, number of requests and concurrent clients.

LANGUAGE: bash
CODE:
$ ./membench benchmark \
    --database dicedb \
    --host xx.xx.xx.xx \
    --port 7379 \
    --num-requests 100000 \
    --num-clients 4

----------------------------------------

TITLE: Starting DiceDB Server Configuration
DESCRIPTION: Command to start DiceDB server with default configuration showing version info, command count, engine type, port, cores and shards.

LANGUAGE: bash
CODE:
$ ./dicedb

        ██████╗ ██╗ ██████╗███████╗██████╗ ██████╗
        ██╔══██╗██║██╔════╝██╔════╝██╔══██╗██╔══██╗
        ██║  ██║██║██║     █████╗  ██║  ██║██████╔╝
        ██║  ██║██║██║     ██╔══╝  ██║  ██║██╔══██╗
        ██████╔╝██║╚██████╗███████╗██████╔╝██████╔╝
        ╚═════╝ ╚═╝ ╚═════╝╚══════╝╚═════╝ ╚═════╝

2025-03-09T16:46:03+05:30 INF starting DiceDB version=0.1.0
2025-03-09T16:46:03+05:30 INF running with total_commands=21
2025-03-09T16:46:03+05:30 INF running with engine=ironhawk
2025-03-09T16:46:03+05:30 INF running with port=7379
2025-03-09T16:46:03+05:30 INF running on cores=4
2025-03-09T16:46:03+05:30 INF running with shards=4

----------------------------------------

TITLE: ZPOPMAX with Non-Existing Key
DESCRIPTION: Example showing ZPOPMAX behavior with a non-existent key.

LANGUAGE: bash
CODE:
127.0.0.1:7379> ZPOPMAX NON_EXISTENT_KEY
(empty array)

----------------------------------------

TITLE: Clearing the Root Path in JSON using DiceDB
DESCRIPTION: Demonstrates clearing the entire JSON document by using JSON.CLEAR without specifying a path. This results in an empty JSON object.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.SET user:1003 $ '{"name": "Alice", "age": 25}'
OK
127.0.0.1:7379> JSON.CLEAR user:1003
(integer) 1
127.0.0.1:7379> JSON.GET user:1003
"{}"

----------------------------------------

TITLE: Using PTTL Command with Non-existent Key in DiceDB
DESCRIPTION: Demonstrates the return value of PTTL command when used with a key that does not exist in the database.

LANGUAGE: bash
CODE:
127.0.0.1:7379> PTTL nonExistentKey
(integer) -2

----------------------------------------

TITLE: Non-Array Path Error Handling
DESCRIPTION: Shows error handling when attempting to get array length from a path that doesn't point to an array.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.SET user:1004 $ '{"name": "Alice","age": 25}'
OK
127.0.0.1:7379> JSON.ARRLEN user:1004 $.age
(error) ERROR Path '$.age' does not exist or not array

----------------------------------------

TITLE: OBJECT FREQ Example
DESCRIPTION: Example showing how to get the access frequency of a key when using LFU eviction policy.

LANGUAGE: bash
CODE:
OBJECT FREQ mykey
(integer) 5

----------------------------------------

TITLE: Setting Key Only if It Doesn't Exist
DESCRIPTION: This example shows how to use the NX option with the SET command to set a key 'foo' only if it doesn't already exist in DiceDB. The command returns 'OK' if successful, or 'nil' if the key already exists.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET foo bar NX

----------------------------------------

TITLE: Basic Usage Example
DESCRIPTION: Demonstrates a basic command usage example using SET command.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET foo bar
OK

----------------------------------------

TITLE: Handling Invalid Array Index Error
DESCRIPTION: Demonstrates the error response when attempting to pop from an invalid array index.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.SET myjson . '{"numbers": [1, 2, 3]}'
OK
127.0.0.1:7379> JSON.ARRPOP myjson .numbers 4
(error) ERR path is not an array

----------------------------------------

TITLE: Invalid Usage of SET Command with Conflicting Options
DESCRIPTION: This example demonstrates an invalid usage of the SET command where conflicting options (EX and KEEPTTL) are used together, resulting in a syntax error in DiceDB.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET foo bar EX 10 KEEPTTL
(error) ERR syntax error

----------------------------------------

TITLE: Rebasing Changes
DESCRIPTION: Commands for rebasing local changes with updates from the master branch.

LANGUAGE: text
CODE:
# commit your changes
$ git add <updated files>
$ git commit -m "Meaningful message for the update"
# pull new changes
$ git checkout master
$ git fetch upstream
$ git merge upstream/master
$ git checkout <your issue branch>
$ git rebase master

----------------------------------------

TITLE: ZPOPMAX with Count Argument
DESCRIPTION: Shows how to use ZPOPMAX with a count argument to pop multiple members.

LANGUAGE: bash
CODE:
127.0.0.1:7379> ZADD myzset 1 member1 2 member2 3 member3
(integer) 3
127.0.0.1:7379> ZPOPMAX myzset 2
1) 1 "member1"
2) 2 "member2"

----------------------------------------

TITLE: Deleting Entire JSON Document Example
DESCRIPTION: Example showing how to delete a complete JSON document from DiceDB using JSON.DEL without specifying a path.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.SET myjson $ '{"name": "John", "age": 30, "city": "New York"}'
OK
127.0.0.1:7379> JSON.DEL myjson
(integer) 1
127.0.0.1:7379> JSON.GET myjson
(nil)

----------------------------------------

TITLE: PERSIST on Key Without Expiration
DESCRIPTION: Demonstrates using PERSIST on a key that doesn't have an expiration time set.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET mykey "Hello"
OK

LANGUAGE: bash
CODE:
127.0.0.1:7379> PERSIST mykey
(integer) 0

----------------------------------------

TITLE: Retrieving Geohash with Non-Existent Key
DESCRIPTION: Demonstrates the error response when attempting to use GEOHASH with a key that doesn't exist.

LANGUAGE: bash
CODE:
127.0.0.1:7379> GEOHASH points Palermo
(error) WRONGTYPE Operation against a key holding the wrong kind of value

----------------------------------------

TITLE: Noun-like Function Names for Return Values in Go
DESCRIPTION: Functions that return values should use noun-like names without verbs like 'Get'. This improves code readability and follows Go idioms.

LANGUAGE: go
CODE:
func (c *Config) GetJobName(key string) (value string, ok bool)  // not okay
func (c *Config) JobName(key string) (value string, ok bool)  // okay

----------------------------------------

TITLE: Running Single Unit Test in DiceDB
DESCRIPTION: Command to run a specific unit test in DiceDB using the TEST_FUNC environment variable.

LANGUAGE: bash
CODE:
TEST_FUNC=<name of the test function> make unittest-one
TEST_FUNC=TestByteList make unittest-one

----------------------------------------

TITLE: HKEYS Command on Empty Hash in DiceDB
DESCRIPTION: Demonstration of using HKEYS on an empty hash stored at key 'user:1002'. The command returns nil, indicating no fields are present.

LANGUAGE: bash
CODE:
127.0.0.1:7379> HKEYS user:1002
(nil)

----------------------------------------

TITLE: Pointing to Local dicedb-go Repository
DESCRIPTION: Instructions for adding a replace directive in go.mod to use a local copy of dicedb-go during development.

LANGUAGE: go
CODE:
replace github.com/dicedb/dicedb-go => ../dicedb-go

----------------------------------------

TITLE: Running All Integration Tests in DiceDB
DESCRIPTION: Command to run all integration tests in the DiceDB project.

LANGUAGE: bash
CODE:
$ make test

----------------------------------------

TITLE: ZPOPMAX with Floating-Point Scores
DESCRIPTION: Demonstrates ZPOPMAX usage with floating-point scores.

LANGUAGE: bash
CODE:
127.0.0.1:7379> ZADD myzset 1.5 member1 2.7 member2 3.8 member3
(integer) 3
127.0.0.1:7379> ZPOPMAX myzset
1) 1.5 "member1"

----------------------------------------

TITLE: Deleting Non-Existent JSON Path Example
DESCRIPTION: Example showing the behavior when attempting to delete a non-existent path from a JSON document.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.SET myjson $ '{"name": "John", "age": 30, "city": "New York"}'
OK
127.0.0.1:7379> JSON.DEL myjson $.address
(integer) 0

----------------------------------------

TITLE: Escaping Special Characters in KEYS Command Pattern
DESCRIPTION: Demonstrates how to use the backslash (\) to escape special characters in the KEYS command pattern, allowing for literal matching of those characters.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET key1 "value1"
OK
127.0.0.1:7379> SET key2 "value2"
OK
127.0.0.1:7379> SET key3 "value3"
OK
127.0.0.1:7379> KEYS key?
1) "key3"
2) "key*"
3) "key?"
127.0.0.1:7379> KEYS key\?
1) "key?"

----------------------------------------

TITLE: Error Handling: Non-existent Key in JSON.ARRTRIM in DiceDB
DESCRIPTION: Shows the error returned when using JSON.ARRTRIM with a key that doesn't exist in the database.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.SET a $ '[1, 2, 3, 4, 5]'
"OK"
127.0.0.1:7379> JSON.ARRTRIM aa . -10 10
(error) ERROR key does not exist

----------------------------------------

TITLE: Non-Existent Key Error Example
DESCRIPTION: Shows the error when attempting to increment a non-existent key.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.NUMINCRBY user:1002 . 5
(error) ERROR could not perform this operation on a key that doesn't exist

----------------------------------------

TITLE: Running Storm Utility for Bulk SET Operations in Go
DESCRIPTION: Command to run the Storm utility's SET operation, which allows for bulk SET requests to be sent to the Dice database. This tool is part of a series of utilities for interacting with Dice.

LANGUAGE: bash
CODE:
$ go run storm/set/set.go

----------------------------------------

TITLE: SQL Feature Enhancements
DESCRIPTION: SQL parser improvements including enhanced ORDER BY handling and addition of LIKE/NOT LIKE operators in SQL Executor.

LANGUAGE: sql
CODE:
ORDER BY
LIKE
NOT LIKE

----------------------------------------

TITLE: ZPOPMAX with Negative Count
DESCRIPTION: Shows ZPOPMAX behavior with a negative count argument.

LANGUAGE: bash
CODE:
127.0.0.1:7379> ZADD myzset 1 member1 2 member2 3 member3
(integer) 3
127.0.0.1:7379> ZPOPMAX myzset -1
(empty array)

----------------------------------------

TITLE: Installing golangci-lint via Go
DESCRIPTION: This command installs golangci-lint using Go's package management system.

LANGUAGE: sh
CODE:
go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest

----------------------------------------

TITLE: HGET Invalid Usage Examples
DESCRIPTION: Shows various error cases when using HGET command incorrectly.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET product:2000 "This is a string"
OK
127.0.0.1:7379> HGET product:2000 name
(error) WRONGTYPE Operation against a key holding the wrong kind of value

----------------------------------------

TITLE: Updated JSON Document Structure
DESCRIPTION: Shows the resulting JSON structure after deleting an array element.

LANGUAGE: json
CODE:
{
  "name": "Jane Doe",
  "hobbies": ["reading", "hiking"]
}

----------------------------------------

TITLE: ZCARD Invalid Type Example
DESCRIPTION: Demonstrates error handling when using ZCARD on a non-sorted set type

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET mystring "This is a string"
OK

127.0.0.1:7379> ZCARD mystring
(error) WRONGTYPE Operation against a key holding the wrong kind of value

----------------------------------------

TITLE: Handling Wrong Type Error with SCARD in DiceDB
DESCRIPTION: Shows the error that occurs when trying to use SCARD on a key that holds a string value instead of a set.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET mystring "hello"
OK
127.0.0.1:7379> SCARD mystring
(error) ERROR WRONGTYPE Operation against a key holding the wrong kind of value

----------------------------------------

TITLE: HGET Wrong Argument Count Examples
DESCRIPTION: Demonstrates errors when providing incorrect number of arguments to HGET command.

LANGUAGE: bash
CODE:
127.0.0.1:7379> HGET product:2000
(error) ERR wrong number of arguments for 'hget' command

127.0.0.1:7379> HGET product:2000 name name2
(error) ERR wrong number of arguments for 'hget' command

----------------------------------------

TITLE: Non-Existent Path Example
DESCRIPTION: Example showing the response when attempting to delete a non-existent path.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.FORGET user:1001 $.nonexistent
(integer) 0

----------------------------------------

TITLE: Handling Wrong Argument Error with SCARD in DiceDB
DESCRIPTION: Demonstrates the error that occurs when using SCARD with incorrect number of arguments.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SCARD
(error) ERROR wrong number of arguments for 'scard' command
127.0.0.1:7379> SCARD myset1 myset2
(error) ERROR wrong number of arguments for 'scard' command

----------------------------------------

TITLE: Invalid Usage of LPUSH with Non-List Key in DiceDB
DESCRIPTION: An example showing an error when attempting to use LPUSH on a key that stores a string instead of a list.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET mystring "not a list"
OK
127.0.0.1:7379> LPUSH mystring "value"
(error) WRONGTYPE Operation against a key holding the wrong kind of value

----------------------------------------

TITLE: HINCRBY with Negative Increment
DESCRIPTION: Example of using HINCRBY with a negative value to decrement a field's value.

LANGUAGE: bash
CODE:
127.0.0.1:7379> HINCRBY keys field -20
(integer) 0

----------------------------------------

TITLE: Incrementing Floating-Point Value
DESCRIPTION: Demonstrates incrementing a floating-point value (balance) by 25.75.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.NUMINCRBY user:1001 $.balance 25.75
"[126.25]"

----------------------------------------

TITLE: Handling Non-Existent Key
DESCRIPTION: Example showing the response when attempting to retrieve a non-existent key.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.GET user:9999
(nil)

----------------------------------------

TITLE: Invalid HyperLogLog Usage Error
DESCRIPTION: Example showing the error when attempting to use PFADD on a key that isn't a HyperLogLog.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET mykey "notahyperloglog"
OK
127.0.0.1:7379> PFADD mykey "element1"
(error) WRONGTYPE Key is not a valid HyperLogLog string value

----------------------------------------

TITLE: HINCRBY Invalid Key Usage
DESCRIPTION: Demonstrates error handling when attempting to use HINCRBY on a non-hash key.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET user:3000 "This is a string"
OK
127.0.0.1:7379> HINCRBY user:3000 field1 10
(error) ERROR WRONGTYPE Operation against a key holding the wrong kind of value

----------------------------------------

TITLE: Handling Non-Object Paths with JSON.OBJLEN in DiceDB
DESCRIPTION: Demonstrates the behavior of JSON.OBJLEN when the specified path points to a non-object element in the JSON structure.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.SET c $ '{"name": "Alice", "age": 30}'
"OK"
127.0.0.1:7379> JSON.OBJLEN c $.age
1) (nil)

----------------------------------------

TITLE: SDIFF Command with Non-Existent Sets in DiceDB
DESCRIPTION: Shows the behavior of SDIFF when used with non-existent sets, resulting in an empty array.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SDIFF set1 set2
(empty array)

----------------------------------------

TITLE: HINCRBY Integer Overflow
DESCRIPTION: Example showing error handling when incrementing results in an integer overflow.

LANGUAGE: bash
CODE:
127.0.0.1:7379> HSET new-key field 9000000000000000000
(integer) 1
127.0.0.1:7379> HINCRBY new-key field 1000000000000000000
(error) ERROR increment or decrement would overflow

----------------------------------------

TITLE: Basic Usage of JSON.ARRINDEX in DiceDB
DESCRIPTION: Demonstrates how to use JSON.ARRINDEX to search for the first occurrence of a value in a JSON array.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.SET a $ '{"name": "Alice", "age": 30, "mobile": [1902, 1903, 1904]}'
"OK"
127.0.0.1:7379> JSON.ARRINDEX a $.mobile 1903
1) (integer) 1
127.0.0.1:7379> JSON.ARRINDEX a $.mobile 1904
1) (integer) 2

----------------------------------------

TITLE: Non-String Path Example
DESCRIPTION: Example showing the response when the path points to a non-string value.

LANGUAGE: bash
CODE:
JSON.STRLEN user:1001 $.address
(nil)

----------------------------------------

TITLE: JSON.OBJLEN Behavior with Non-Existent Paths in DiceDB
DESCRIPTION: Shows how JSON.OBJLEN responds when given a path that doesn't exist within the JSON structure.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.SET d $ '{"name": "Alice", "address": {"city": "Wonderland"}}'
"OK"
127.0.0.1:7379> JSON.OBJLEN d $.nonexistentPath
(empty list or set)

----------------------------------------

TITLE: Error Scenario: Non-string Key or Item for BF.ADD in DiceDB
DESCRIPTION: This example demonstrates the error that occurs when attempting to use BF.ADD with non-string values for the key or item. The command expects both arguments to be strings.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET k 67890
OK
127.0.0.1:7379> BFADD 12345 67890
(error) WRONGTYPE Operation against a key holding the wrong kind of value

----------------------------------------

TITLE: Error Handling for Non-Array JSON Path in JSON.ARRINDEX
DESCRIPTION: Shows the error returned when the JSON path does not point to an array object.

LANGUAGE: bash
CODE:
127.0.0.1:7379> set b '{"name":"Alice","mobile":[1902,1903,1904]}'
"OK"
127.0.0.1:7379> JSON.ARRINDEX b $.mobile 1902
(error) Existing key has wrong type

----------------------------------------

TITLE: Toggling Nested Boolean Value
DESCRIPTION: Example demonstrating how to toggle a nested boolean value using JSON.TOGGLE command.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.TOGGLE user:1001 $.settings.notifications
(integer) 1

----------------------------------------

TITLE: Recursive Value Increment
DESCRIPTION: Shows how to increment all matching values recursively using JSONPath.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.NUMINCRBY user:1001 $..balance 25.75
"[126.25,126.25]"

----------------------------------------

TITLE: GETBIT with Invalid Offset
DESCRIPTION: Shows error handling when using invalid offset values (negative or non-integer).

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET foo "a"
127.0.0.1:7379> GETBIT foo -1
(error) ERR bit offset is not an integer or out of range
127.0.0.1:7379> GETBIT foo "abc"
(error) ERR bit offset is not an integer or out of range

----------------------------------------

TITLE: Error Handling for Invalid JSON Path in JSON.ARRINDEX
DESCRIPTION: Illustrates the error returned when an invalid JSON path is provided to JSON.ARRINDEX.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.SET b $ '{"name": "Alice", "mobile": [1902, 1903, 1904]}'
"OK"
127.0.0.1:7379> JSON.ARRINDEX b $invalid_path 3
(error) ERR Path '$invalid_path' does not exist

----------------------------------------

TITLE: GETBIT with Insufficient Parameters
DESCRIPTION: Demonstrates error handling when GETBIT is called with missing parameters.

LANGUAGE: bash
CODE:
127.0.0.1:7379> GETBIT foo
(error) wrong number of arguments for 'GETBIT' command

----------------------------------------

TITLE: ZREM Command on Non-Sorted Set Key in DiceDB
DESCRIPTION: Demonstrates the error that occurs when trying to use ZREM on a key that is not associated with a sorted set. Returns a WRONGTYPE error.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET mystring "This is a string"
OK
127.0.0.1:7379> ZREM mystring
(error) WRONGTYPE Operation against a key holding the wrong kind of value

----------------------------------------

TITLE: DECRBY Command Syntax
DESCRIPTION: Shows the basic syntax for the DECRBY command that takes a key and delta value as parameters.

LANGUAGE: redis
CODE:
DECRBY key delta

----------------------------------------

TITLE: Basic JSON Array Insertion
DESCRIPTION: Demonstrates inserting multiple values at a specific index in a root array.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.SET a $ '[1,2]'
OK
127.0.0.1:7379> JSON.ARRINSERT a $ 2 3 4 5
(integer) 5
127.0.0.1:7379> JSON.GET a
[1,2,3,4,5]

----------------------------------------

TITLE: HSTRLEN Invalid Key Type Example - DiceDB
DESCRIPTION: Example showing error handling when using HSTRLEN on a non-hash key type.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET mystring "This is a string"
OK

127.0.0.1:7379> HSTRLEN mystring field1
(error) WRONGTYPE Operation against a key holding the wrong kind of value

----------------------------------------

TITLE: JSON.TYPE Invalid JSONPath Handling
DESCRIPTION: Shows how JSON.TYPE processes invalid JSONPath expressions.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.TYPE user:1001 $..name
"string"

----------------------------------------

TITLE: Setting Key While Retaining Existing TTL
DESCRIPTION: This example shows how to use the KEEPTTL option with the SET command to set a key 'foo' with value 'bar' while retaining any existing Time-To-Live (TTL) associated with the key in DiceDB.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET foo bar KEEPTTL
OK

----------------------------------------

TITLE: Nested Array Insertion
DESCRIPTION: Illustrates inserting values into nested arrays using JSONPath notation.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.SET b $ '{"name":"tom","score":[10,20],"partner2":{"score":[10,20]}}'
OK
127.0.0.1:7379> JSON.ARRINSERT b $..score 1 5 6 true
(integer) 5
127.0.0.1:7379> JSON.GET b
{"name":"tom","score":[10,5,6,true,20],"partner2":{"score":[10,5,6,true,20]}}

----------------------------------------

TITLE: Basic SETBIT Command Syntax
DESCRIPTION: Shows the basic syntax for the SETBIT command in DiceDB.

LANGUAGE: bash
CODE:
SETBIT key offset value

----------------------------------------

TITLE: HyperLogLog Unchanged Response
DESCRIPTION: Example showing the response when adding elements that don't modify the HyperLogLog's internal registers.

LANGUAGE: bash
CODE:
127.0.0.1:7379> PFADD myhyperloglog "element1"
(integer) 0

----------------------------------------

TITLE: Running All Unit Tests in DiceDB
DESCRIPTION: Command to run all unit tests in the DiceDB project.

LANGUAGE: bash
CODE:
make unittest

----------------------------------------

TITLE: Out of Bounds Index Error Handling
DESCRIPTION: Shows error handling when attempting to insert at an invalid array index.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.SET a $ '[1,2]'
OK
127.0.0.1:7379> JSON.ARRINSERT a $ 4 3
ERR index out of bounds
127.0.0.1:7379> JSON.GET a
[1,2]

----------------------------------------

TITLE: Wrong Type Error Example
DESCRIPTION: Demonstrates error handling when using SETBIT on wrong value type.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET mykey "Hello"
OK
127.0.0.1:7379> SETBIT mykey 7 1
(error) WRONGTYPE Operation against a key holding the wrong kind of value

----------------------------------------

TITLE: Handling Non-Existing Key in Bloom Filter
DESCRIPTION: Demonstrates behavior when checking an item in a non-existing Bloom Filter key.

LANGUAGE: bash
CODE:
127.0.0.1:7379> BF.EXISTS nonExistingKey "apple"
(integer) 0

----------------------------------------

TITLE: Creating Pull Request
DESCRIPTION: Git commands for committing changes and creating a pull request for review.

LANGUAGE: text
CODE:
$ git add <files required for the change>
$ git commit -m "Meaningful oneliner for the change"
$ git push origin <your issue branch>

After this, create a PullRequest in `github <https://github.com/dicedb/docs/pulls>`_. Make sure you have linked the relevant Issue in the description with "Closes #number" or "Fixes #number".

----------------------------------------

TITLE: Handling Non-Numeric Value
DESCRIPTION: Example of attempting to increment a non-numeric value.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.NUMINCRBY user:1001 $.name 5
"[null]"

----------------------------------------

TITLE: Invalid APPEND Usage - Missing Value
DESCRIPTION: Shows error when APPEND command is used without providing a value parameter.

LANGUAGE: bash
CODE:
127.0.0.1:7379> APPEND foo
(error) ERROR wrong number of arguments for 'append' command

----------------------------------------

TITLE: Handling Out-of-Bounds Indices in JSON.ARRTRIM in DiceDB
DESCRIPTION: Illustrates how JSON.ARRTRIM handles out-of-bounds indices when trimming a JSON array.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.SET c $ '[1, 2, 3, 4, 5]'
"OK"
127.0.0.1:7379> JSON.ARRTRIM c $ -10 10
1) "5"
127.0.0.1:7379> JSON.GET c
"[1,2,3,4,5]"

----------------------------------------

TITLE: Invalid Path Error Example
DESCRIPTION: Demonstrates the error when using an invalid JSONPath.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.NUMINCRBY user:1001 . 5
(error) ERROR invalid JSONPath

----------------------------------------

TITLE: Basic BF.EXISTS Command Syntax
DESCRIPTION: Shows the basic syntax for the BF.EXISTS command which takes a key and item parameter.

LANGUAGE: bash
CODE:
BF.EXISTS key item

----------------------------------------

TITLE: ZPOPMAX with Same Scores
DESCRIPTION: Example showing ZPOPMAX behavior when multiple members have the same score.

LANGUAGE: bash
CODE:
127.0.0.1:7379> ZADD myzset 1 member1 1 member2 1 member3
(integer) 3
127.0.0.1:7379> ZPOPMAX myzset 2
1) 1 "member1"
2) 1 "member2"

----------------------------------------

TITLE: Error Handling for Non-Existent Keys with JSON.OBJLEN in DiceDB
DESCRIPTION: Illustrates the error message returned by JSON.OBJLEN when attempting to operate on a key that doesn't exist in the database.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.OBJLEN nonexistent_key $
(error) ERR could not perform this operation on a key that doesn't exist

----------------------------------------

TITLE: Invalid Error Rate Range with BF.RESERVE in DiceDB (Bash)
DESCRIPTION: This example demonstrates the error that occurs when an invalid error rate (outside the range of 0 to 1) is provided to the BF.RESERVE command.

LANGUAGE: bash
CODE:
127.0.0.1:7379> BF.RESERVE my_bloom_filter error_rate -1.5
(error) Err (0 < error rate range < 1)

----------------------------------------

TITLE: JSON.DEL Error Example
DESCRIPTION: Example showing the error when attempting to use JSON.DEL on a key that doesn't contain JSON data.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET mystring "Hello, World!"
OK
127.0.0.1:7379> JSON.DEL mystring
(error) ERROR Existing key has wrong Dice type

----------------------------------------

TITLE: Handling Non-Existent Path
DESCRIPTION: Example showing the behavior when attempting to toggle a non-existent path.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.TOGGLE user:1001 $.nonexistent
(integer) 0

----------------------------------------

TITLE: Syntax for BITCOUNT Command in DiceDB
DESCRIPTION: Demonstrates the basic syntax of the BITCOUNT command, including optional parameters for specifying byte or bit ranges.

LANGUAGE: bash
CODE:
BITCOUNT key [start end [BYTE | BIT]]

----------------------------------------

TITLE: Error Handling: Invalid Latitude in GEOADD Command
DESCRIPTION: Demonstrates the error message when trying to add a member with an invalid latitude value.

LANGUAGE: bash
CODE:
127.0.0.1:7379> GEOADD locations 13.361389 91.115556 "Venice"
(error) ERROR invalid latitude

----------------------------------------

TITLE: Adding Duplicate Members
DESCRIPTION: Shows behavior when adding duplicate members to a set

LANGUAGE: bash
CODE:
127.0.0.1:7379> SADD fruits "apple" "fig" "apple"
(integer) 1

----------------------------------------

TITLE: Controlling Client Replies in DiceDB
DESCRIPTION: The CLIENT REPLY command controls the replies sent to the client.

LANGUAGE: sh
CODE:
127.0.0.1:7379> CLIENT REPLY ON
OK

----------------------------------------

TITLE: HINCRBYFLOAT Invalid Key Usage
DESCRIPTION: Shows error handling when attempting to use HINCRBYFLOAT on a non-hash key type.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET user:3000 "This is a string"
OK
127.0.0.1:7379> HINCRBYFLOAT user:3000 field1 10
(error) ERROR WRONGTYPE Operation against a key holding the wrong kind of value

----------------------------------------

TITLE: Handling errors when using SREM on a non-set key in DiceDB
DESCRIPTION: This example demonstrates the error handling of SREM when attempting to use it on a key that exists but is not a set. It first sets a string value, then tries to use SREM on it, resulting in a WRONGTYPE error.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET mykey "value"
127.0.0.1:7379> SREM mykey "one"
(error) WRONGTYPE Operation against a key holding the wrong kind of value

----------------------------------------

TITLE: Enabling Client Tracking in DiceDB
DESCRIPTION: The CLIENT TRACKING command enables or disables server-assisted client-side caching.

LANGUAGE: sh
CODE:
127.0.0.1:7379> CLIENT TRACKING ON
OK

----------------------------------------

TITLE: HINCRBYFLOAT Invalid Arguments
DESCRIPTION: Demonstrates error handling when incorrect number of arguments are provided.

LANGUAGE: bash
CODE:
127.0.0.1:7379> HINCRBYFLOAT user:3000 field
(error) ERROR wrong number of arguments for 'hincrbyfloat' command

----------------------------------------

TITLE: Invalid Expiration Time Example
DESCRIPTION: Example showing error when using an invalid negative expiration time.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SETEX foo -10 bar
(error) ERROR invalid expire time in 'setex' command

----------------------------------------

TITLE: Retrieving Command Count in DiceDB
DESCRIPTION: This example demonstrates successful usage of the COMMAND COUNT command, which returns the total number of commands supported by the DiceDB server as an integer.

LANGUAGE: bash
CODE:
127.0.0.1:7379> COMMAND COUNT
(integer) 117

----------------------------------------

TITLE: BITPOS Error: Invalid Bit Value in DiceDB
DESCRIPTION: Demonstrates the error that occurs when using a bit value other than 0 or 1 with the BITPOS command. This example attempts to use 2 as the bit value, resulting in an error.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET mykey "foobar"
OK
127.0.0.1:7379> BITPOS mykey 2
(error) ERR bit is not an integer or out of range

----------------------------------------

TITLE: Using Character Ranges with KEYS Command in DiceDB
DESCRIPTION: Shows how to use character ranges in the KEYS command pattern. The pattern 'key[1-2]' matches keys ending with either 1 or 2.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET key1 "value1"
OK
127.0.0.1:7379> SET key2 "value2"
OK
127.0.0.1:7379> SET key3 "value3"
OK
127.0.0.1:7379> KEYS key[1-2]
1) "key1"
2) "key2"

----------------------------------------

TITLE: Handling Unknown Command Error in COMMAND GETKEYS for DiceDB
DESCRIPTION: This snippet illustrates the error returned when COMMAND GETKEYS is used with an unknown or unsupported command. It shows how DiceDB handles attempts to extract keys from invalid commands.

LANGUAGE: bash
CODE:
127.0.0.1:7379> COMMAND GETKEYS UNKNOWNCOMMAND key1
(error) ERR invalid command specified

----------------------------------------

TITLE: BITPOS Error: Invalid Range in DiceDB
DESCRIPTION: Shows the error that occurs when using non-integer values for the 'start' or 'end' parameters in the BITPOS command. This example attempts to use string values for the range, resulting in an error.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET mykey "foobar"
OK
127.0.0.1:7379> BITPOS mykey 1 "a" "b"
(error) ERR value is not an integer or out of range

----------------------------------------

TITLE: ZADD with CH Option
DESCRIPTION: Using the CH option to get the total number of changed elements.

LANGUAGE: bash
CODE:
127.0.0.1:7379> ZADD myzset CH 10 "ten" 11 "two"
(integer) 2

----------------------------------------

TITLE: COMMAND Error Example
DESCRIPTION: Example showing error response when using an invalid subcommand

LANGUAGE: bash
CODE:
127.0.0.1:7379> COMMAND UNKNOWNSUBCOMMAND
(error) ERR unknown subcommand 'UNKNOWNSUBCOMMAND'. Try COMMAND HELP.

----------------------------------------

TITLE: HINCRBYFLOAT Invalid Increment Type
DESCRIPTION: Demonstrates error handling when an invalid increment value type is provided.

LANGUAGE: bash
CODE:
127.0.0.1:7379> HINCRBYFLOAT user:3000 field new
(error) ERROR value is not an integer or a float

----------------------------------------

TITLE: ZPOPMAX Invalid Count Argument
DESCRIPTION: Demonstrates error handling with invalid count argument.

LANGUAGE: bash
CODE:
127.0.0.1:7379> ZADD myzset 1 member1
(integer) 1
127.0.0.1:7379> ZPOPMAX myzset INCORRECT_COUNT_ARGUMENT
(error) ERR value is not an integer or out of range

----------------------------------------

TITLE: DBSIZE Usage with Multiple Databases
DESCRIPTION: Example demonstrating DBSIZE usage across different database selections (note: currently operates on single database space).

LANGUAGE: bash
CODE:
127.0.0.1:7379> SELECT 0
OK
127.0.0.1:7379> DBSIZE
(integer) 42

127.0.0.1:7379> SELECT 1
OK
127.0.0.1:7379> DBSIZE
(integer) 42

----------------------------------------

TITLE: HINCRBY Invalid Value Type
DESCRIPTION: Demonstrates error handling when attempting to increment a non-integer hash value.

LANGUAGE: bash
CODE:
127.0.0.1:7379> HSET user:3000 field "hello"
(integer) 1
127.0.0.1:7379> HINCRBY user:3000 field 2
(error) ERROR hash value is not an integer

----------------------------------------

TITLE: Invalid Usage of HSET Command in DiceDB
DESCRIPTION: Demonstrates error scenarios when using HSET on a non-hash key or with incorrect arguments.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET product:2000 "This is a string"
OK
127.0.0.1:7379> HSET product:2000 name "Laptop"
(error) WRONGTYPE Operation against a key holding the wrong kind of value

127.0.0.1:7379> HSET product:2000
(error) ERR wrong number of arguments for 'hset' command

127.0.0.1:7379> HSET product:2000 name
(error) ERR wrong number of arguments for 'hset' command

----------------------------------------

TITLE: Syntax for GEOPOS Command in DiceDB
DESCRIPTION: Defines the syntax for using the GEOPOS command to retrieve longitude and latitude coordinates for specified members in a sorted set.

LANGUAGE: bash
CODE:
GEOPOS key [member [member ...]]

----------------------------------------

TITLE: Handling Odd Number of Arguments Error in JSON.MSET
DESCRIPTION: This example shows the error returned when JSON.MSET is called with an odd number of arguments, violating the key-value pair requirement.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.MSET user:1 '{"name": "Alice", "age": 30}' user:2
(error) ERR wrong number of arguments for 'JSON.MSET' command

----------------------------------------

TITLE: Wrong Number of Arguments Error
DESCRIPTION: Demonstrates error handling when incorrect number of arguments are provided.

LANGUAGE: bash
CODE:
127.0.0.1:7379> HDEL
(error) ERR wrong number of arguments for 'hdel' command

127.0.0.1:7379> HDEL user:5000
(error) ERR wrong number of arguments for 'hdel' command

----------------------------------------

TITLE: Handling Non-Existent Path
DESCRIPTION: Shows the result of attempting to increment a non-existent path.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.NUMINCRBY user:1001 $.nonexistent 10
"[]"

----------------------------------------

TITLE: COMMAND LIST Error Example
DESCRIPTION: Shows error handling when incorrect arguments are provided to the COMMAND LIST command.

LANGUAGE: bash
CODE:
127.0.0.1:7379> COMMAND LIST EXTRA ARGS
(error) ERR wrong number of arguments for 'command|list' command

----------------------------------------

TITLE: HRANDFIELD Invalid Arguments
DESCRIPTION: Shows the error when using incorrect number of arguments

LANGUAGE: bash
CODE:
127.0.0.1:7379> HRANDFIELD
(error) ERR wrong number of arguments for 'hrandfield' command

----------------------------------------

TITLE: Handling Arity Error for COMMAND GETKEYS in DiceDB
DESCRIPTION: This snippet demonstrates the error returned when COMMAND GETKEYS is called without any arguments. It shows how DiceDB handles incorrect usage of the command.

LANGUAGE: bash
CODE:
127.0.0.1:7379> COMMAND GETKEYS
(error) ERR wrong number of arguments for 'command|getkeys' command

----------------------------------------

TITLE: GETSET Command Wrong Type Error in DiceDB (Bash)
DESCRIPTION: Shows the error returned when trying to use GETSET on a key that holds a non-string value (in this case, a list).

LANGUAGE: bash
CODE:
127.0.0.1:7379> LPUSH mylist "item"
127.0.0.1:7379> GETSET mylist "NewValue"
(error) ERROR WRONGTYPE Operation against a key holding the wrong kind of value

----------------------------------------

TITLE: Handling Non-Existent Key in JSON.DEBUG MEMORY Command
DESCRIPTION: This snippet illustrates how DiceDB responds when using the JSON.DEBUG MEMORY command on a non-existent key, returning 0 to indicate that the key does not exist.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.DEBUG MEMORY nonExistentKey
(integer) 0

----------------------------------------

TITLE: Handling Error for Commands Without Key Arguments in DiceDB
DESCRIPTION: This example demonstrates the error returned when attempting to use COMMAND GETKEYS with a command that doesn't accept key arguments, such as FLUSHDB. It shows how DiceDB handles commands that don't operate on specific keys.

LANGUAGE: bash
CODE:
127.0.0.1:7379> COMMAND GETKEYS FLUSHDB
(error) ERR The command has no key arguments

----------------------------------------

TITLE: GETSET Command Syntax Error in DiceDB (Bash)
DESCRIPTION: Demonstrates the syntax error returned when the GETSET command is not provided with the correct number of arguments.

LANGUAGE: bash
CODE:
127.0.0.1:7379> GETSET mykey
(error) ERROR wrong number of arguments for 'getset' command

----------------------------------------

TITLE: Handling Invalid Path in JSON.DEBUG MEMORY Command
DESCRIPTION: This example shows how DiceDB handles an invalid path when using the JSON.DEBUG MEMORY command, returning an error indicating that the specified path does not exist.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.DEBUG MEMORY myjson $.nonExistentPath
(error) ERR Path '$.nonExistentPath' does not exist

----------------------------------------

TITLE: Handling Arity Error in COMMAND HELP
DESCRIPTION: This example demonstrates the error thrown when extra arguments are passed to the COMMAND HELP command. It shows that the command does not accept any additional arguments.

LANGUAGE: bash
CODE:
127.0.0.1:7379> COMMAND HELP EXTRA ARGS
(error) ERR wrong number of arguments for 'command|help' command

----------------------------------------

TITLE: Basic Protocol Version Switch in DiceDB
DESCRIPTION: Demonstrates how to use the HELLO command to switch to protocol version 3.

LANGUAGE: bash
CODE:
127.0.0.1:7379> HELLO 3

----------------------------------------

TITLE: Handling Non-Boolean Value
DESCRIPTION: Example showing the error when attempting to toggle a non-boolean value.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.TOGGLE user:1001 $.name
(error) ERR value at path is not a boolean

----------------------------------------

TITLE: Error Handling - Invalid Increment Value
DESCRIPTION: Shows error handling when providing an invalid increment value.

LANGUAGE: bash
CODE:
127.0.0.1:7379>INCRBYFLOAT mycounter "two"
(error) ERR value is not a valid float

----------------------------------------

TITLE: Authentication with Protocol Version in DiceDB
DESCRIPTION: Shows how to combine protocol version switch with authentication using username and password.

LANGUAGE: bash
CODE:
127.0.0.1:7379> HELLO 3 AUTH myusername mypassword

----------------------------------------

TITLE: Checking Original Bit Value
DESCRIPTION: Example showing the return value of the original bit before setting.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SETBIT mykey 7 1
(integer) 0

----------------------------------------

TITLE: Invalid APPEND Usage - Wrong Data Type
DESCRIPTION: Demonstrates error when attempting to use APPEND on an invalid data type.

LANGUAGE: bash
CODE:
127.0.0.1:7379> LPUSH foo bar
127.0.0.1:7379> APPEND foo baz
(error) ERROR WRONGTYPE Operation against a key holding the wrong kind of value

----------------------------------------

TITLE: Combined Protocol Version, Auth, and Client Name in DiceDB
DESCRIPTION: Shows how to use all HELLO command features together: protocol version, authentication, and client name setting.

LANGUAGE: bash
CODE:
127.0.0.1:7379> HELLO 3 AUTH myusername mypassword SETNAME myclientname

----------------------------------------

TITLE: Error Handling for Wrong Key Type with BITCOUNT in DiceDB
DESCRIPTION: Demonstrates the error message when BITCOUNT is used on a key holding the wrong kind of value.

LANGUAGE: bash
CODE:
127.0.0.1:7379> LPUSH mylist "element"
(integer) 1
127.0.0.1:7379> BITCOUNT mylist
(error) WRONGTYPE Operation against a key holding the wrong kind of value

----------------------------------------

TITLE: Error Handling: Invalid Path
DESCRIPTION: Demonstrates error when attempting to append to a non-existent path

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.SET myjson . '{"numbers": [1, 2, 3]}'
OK
127.0.0.1:7379> JSON.ARRAPPEND myjson .nonexistingpath 4
(error) ERR path .nonexistingpath does not exist

----------------------------------------

TITLE: Incrementing Existing Key Value
DESCRIPTION: Demonstrates incrementing a numeric value stored in an existing key by a floating-point number.

LANGUAGE: bash
CODE:
127.0.0.1:7379>SET mycounter 10
OK
127.0.0.1:7379>INCRBYFLOAT mycounter 3.4
"13.4"

----------------------------------------

TITLE: Handling Out of Range Indices with BITCOUNT in DiceDB
DESCRIPTION: Demonstrates how BITCOUNT handles out of range indices by considering only the valid range within the string.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET mykey "foobar"
OK
127.0.0.1:7379> BITCOUNT mykey 5 6
(integer) 4
127.0.0.1:7379> BITCOUNT mykey 5 10
(integer) 4

----------------------------------------

TITLE: Error Handling: Invalid JSON
DESCRIPTION: Demonstrates error when providing invalid JSON as input

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.SET myjson . '{"numbers": [1, 2, 3]}'
OK
127.0.0.1:7379> JSON.ARRAPPEND myjson .numbers invalidjson
(error) ERR invalid JSON

----------------------------------------

TITLE: Executing LATENCY Command in DiceDB
DESCRIPTION: The LATENCY command syntax in DiceDB. It includes a subcommand and optional arguments to perform various latency-related operations.

LANGUAGE: bash
CODE:
LATENCY [SUBCOMMAND] [ARGUMENTS]

----------------------------------------

TITLE: Getting Client Name in DiceDB
DESCRIPTION: The CLIENT GETNAME command returns the name of the current connection as set by CLIENT SETNAME.

LANGUAGE: sh
CODE:
127.0.0.1:7379> CLIENT GETNAME
"my-client"

----------------------------------------

TITLE: Error Scenario: Wrong Number of Arguments for BF.ADD in DiceDB
DESCRIPTION: This snippet illustrates the error that occurs when BF.ADD is called with an incorrect number of arguments. The command requires exactly two arguments: the key and the item to be added.

LANGUAGE: bash
CODE:
127.0.0.1:7379> BF.ADD mybloomfilter
(error) ERR wrong number of arguments for 'bf.add' command

----------------------------------------

TITLE: MGET Error Handling Example
DESCRIPTION: Shows error handling when attempting operations with wrong data types

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET key1 "value1"
OK

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET key2 "value2"
OK

LANGUAGE: bash
CODE:
127.0.0.1:7379> LPUSH key2 "value3"
(error) ERROR WRONGTYPE Operation against a key holding the wrong kind of value

LANGUAGE: bash
CODE:
127.0.0.1:7379> MGET key1 key2
1) "value1"
2) "value2"

----------------------------------------

TITLE: Unpausing Clients in DiceDB
DESCRIPTION: The CLIENT UNPAUSE command resumes the clients that were paused by CLIENT PAUSE.

LANGUAGE: sh
CODE:
127.0.0.1:7379> CLIENT UNPAUSE
OK

----------------------------------------

TITLE: Checking Existing Item in Bloom Filter
DESCRIPTION: Demonstrates adding an item to a Bloom Filter and checking its existence.

LANGUAGE: bash
CODE:
127.0.0.1:7379> BF.ADD myBloomFilter "apple"
(integer) 1
127.0.0.1:7379> BF.EXISTS myBloomFilter "apple"
(integer) 1

----------------------------------------

TITLE: Error Example for MSET Command in DiceDB
DESCRIPTION: This example shows the error that occurs when attempting to use the MSET command with an odd number of arguments in DiceDB.

LANGUAGE: bash
CODE:
127.0.0.1:7379> MSET key1 "value1" key2
(error) ERROR wrong number of arguments for 'mset' command

----------------------------------------

TITLE: Failed Authentication Example
DESCRIPTION: Example of failed authentication attempt with incorrect password

LANGUAGE: bash
CODE:
127.0.0.1:7379> AUTH incorrect_password
(error) WRONGPASS invalid username-password pair or user is disabled

----------------------------------------

TITLE: Invalid Initial Capacity with BF.RESERVE in DiceDB (Bash)
DESCRIPTION: This example shows the error that occurs when an invalid initial capacity (non-positive integer) is provided to the BF.RESERVE command.

LANGUAGE: bash
CODE:
127.0.0.1:7379> BF.RESERVE my_bloom_filter 0.01 initial_capacity -100
(error) ERR (capacity should be larger than 0)

----------------------------------------

TITLE: LRANGE on Non-Existent Key in DiceDB
DESCRIPTION: This example shows the behavior of LRANGE when querying a non-existent key. The command returns an empty array in this case.

LANGUAGE: bash
CODE:
127.0.0.1:7379> LRANGE nonexistentlist 0 100
(empty array)

----------------------------------------

TITLE: BITPOS with Bit Not Found in DiceDB
DESCRIPTION: Illustrates the behavior of BITPOS when the specified bit is not found within the given range. In this case, the command returns -1 to indicate that the bit was not found.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET mykey "foobar"
OK
127.0.0.1:7379> BITPOS mykey 1 2 4
(integer) -1

----------------------------------------

TITLE: Executing RENAME Command in DiceDB
DESCRIPTION: The basic syntax for the RENAME command in DiceDB. It takes two parameters: the old key name and the new key name.

LANGUAGE: bash
CODE:
RENAME oldkey newkey

----------------------------------------

TITLE: HSCAN Command Usage on Non-existent Key in DiceDB
DESCRIPTION: Shows the behavior of the HSCAN command when used on a non-existent key in DiceDB. It demonstrates that an empty array is returned when the specified hash does not exist.

LANGUAGE: bash
CODE:
127.0.0.1:7379> HSCAN nonExistentHash 0
1) "0"
2) (empty array)

----------------------------------------

TITLE: Handling Non-existent Key with BITCOUNT in DiceDB
DESCRIPTION: Shows how BITCOUNT handles a non-existent key by treating it as an empty string and returning 0.

LANGUAGE: bash
CODE:
127.0.0.1:7379> BITCOUNT non_existent_key
(integer) 0

----------------------------------------

TITLE: MGET with Non-Existent Keys
DESCRIPTION: Shows MGET behavior when some keys don't exist, returning nil for missing keys

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET key1 "value1"
OK

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET key2 "value2"
OK

LANGUAGE: bash
CODE:
127.0.0.1:7379> MGET key1 key2 key3
1) "value1"
2) "value2"
3) (nil)

----------------------------------------

TITLE: GETBIT with Non-existent Key
DESCRIPTION: Shows behavior when attempting to retrieve a bit value from a non-existent key.

LANGUAGE: bash
CODE:
127.0.0.1:7379> GETBIT bar 5
0

----------------------------------------

TITLE: ZCARD Non-existent Set Example
DESCRIPTION: Shows ZCARD behavior when querying a non-existent sorted set

LANGUAGE: bash
CODE:
127.0.0.1:7379> ZCARD nonExistentZSet
(integer) 0

----------------------------------------

TITLE: HRANDFIELD with Count Parameter
DESCRIPTION: Demonstrates using HRANDFIELD to retrieve multiple random fields

LANGUAGE: bash
CODE:
127.0.0.1:7379> HRANDFIELD keys 2
1) "field2"
2) "field1"

----------------------------------------

TITLE: GETSET Command with TTL in DiceDB (Bash)
DESCRIPTION: Illustrates how GETSET interacts with keys that have a TTL (Time To Live). The command resets the TTL when setting the new value.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET newkey "test"
OK
127.0.0.1:7379> EXPIRE newkey 60
1
127.0.0.1:7379> TTL newkey
55
127.0.0.1:7379> GETSET newkey "new value"
"test"
127.0.0.1:7379> TTL newkey
(integer) -1

----------------------------------------

TITLE: Basic ZCOUNT Command Syntax
DESCRIPTION: Shows the basic syntax for the ZCOUNT command which takes a key and score range parameters

LANGUAGE: bash
CODE:
ZCOUNT key min max

----------------------------------------

TITLE: HRANDFIELD with WITHVALUES Parameter
DESCRIPTION: Shows how to retrieve random fields along with their associated values

LANGUAGE: bash
CODE:
127.0.0.1:7379> HRANDFIELD keys 2 WITHVALUES
1) "field2"
2) "value2"
3) "field1"
4) "value1"

----------------------------------------

TITLE: Setting Client Name with Protocol Version in DiceDB
DESCRIPTION: Illustrates setting a client name while switching protocol version.

LANGUAGE: bash
CODE:
127.0.0.1:7379> HELLO 3 SETNAME myclientname

----------------------------------------

TITLE: ZPOPMIN with Same Scores
DESCRIPTION: Shows how ZPOPMIN handles multiple members with identical scores.

LANGUAGE: bash
CODE:
127.0.0.1:7379> ZADD myzset 1 member1 1 member2 1 member3
(integer) 3
127.0.0.1:7379> ZPOPMIN myzset 2
1) 1 "member1"
2) 1 "member2"

----------------------------------------

TITLE: Handling Non-Existent Key Error
DESCRIPTION: Demonstrates the error response when attempting to pop from a non-existing key.

LANGUAGE: bash
CODE:
127.0.0.1:7379> JSON.ARRPOP nonexistingkey .array 1
(error) ERR key does not exist

----------------------------------------

TITLE: Setting Client Name in DiceDB
DESCRIPTION: The CLIENT SETNAME command sets the name of the current connection.

LANGUAGE: sh
CODE:
127.0.0.1:7379> CLIENT SETNAME my-client
OK

----------------------------------------

TITLE: Command References in Markdown
DESCRIPTION: Code-styled command references in the changelog using markdown backticks, including database commands like PFCOUNT.UNWATCH, APPEND, TOUCH, DBSIZE, KEYS, GEOADD, GEODIST, and ZADD.

LANGUAGE: markdown
CODE:
`PFCOUNT.UNWATCH`
`APPEND`
`TOUCH`
`DBSIZE`
`KEYS`
`GEOADD`
`GEODIST`
`PING`
`WATCH`
`ZADD`

----------------------------------------

TITLE: Real-time Leaderboard Watch Setup
DESCRIPTION: Demonstrates setting up a watch on a game match leaderboard sorted set.

LANGUAGE: bash
CODE:
127.0.0.1:7379> ZRANGE.WATCH match:100 0 1 REV WITHSCORES
ZRANGE.WATCH
Command: ZRANGE
Fingerprint: 4016579015
Data:

----------------------------------------

TITLE: Installing golangci-lint via Homebrew
DESCRIPTION: This command installs golangci-lint, a linter aggregator for Go, using Homebrew on macOS.

LANGUAGE: sh
CODE:
brew install golangci/tap/golangci-lint

----------------------------------------

TITLE: Adding Multiple Elements to HyperLogLog
DESCRIPTION: Example demonstrating how to add multiple elements to a HyperLogLog simultaneously.

LANGUAGE: bash
CODE:
127.0.0.1:7379> PFADD myhyperloglog "element1" "element2" "element3"
(integer) 1

----------------------------------------

TITLE: DECRBY Command Example
DESCRIPTION: Demonstrates the usage of DECRBY command by first setting a key to 43 and then decrementing it by 10 to get 33.

LANGUAGE: redis
CODE:
localhost:7379> SET k 43
OK OK
localhost:7379> DECRBY k 10
OK 33

----------------------------------------

TITLE: Running golangci-lint
DESCRIPTION: This command runs golangci-lint to check your code for issues based on the preconfigured .golangci.yml file in the repository.

LANGUAGE: sh
CODE:
golangci-lint run

----------------------------------------

TITLE: Resetting Latency Data in DiceDB
DESCRIPTION: Example usage of the LATENCY RESET subcommand in DiceDB. It resets the latency data for a specific event (in this case, the 'command' event).

LANGUAGE: bash
CODE:
127.0.0.1:7379> LATENCY RESET command
(integer) 1

----------------------------------------

TITLE: FLUSHDB Command Syntax in Redis
DESCRIPTION: The syntax for the FLUSHDB command in Redis. This command takes no arguments and is used to delete all keys in the current database.

LANGUAGE: redis
CODE:
FLUSHDB

----------------------------------------

TITLE: Generating DiceDB Configuration
DESCRIPTION: Command to generate a default configuration file for DiceDB in the appropriate metadata directory.

LANGUAGE: bash
CODE:
$ go run main.go config-init

----------------------------------------

TITLE: Invalid RPUSH Usage: Non-List Key in DiceDB
DESCRIPTION: An example demonstrating an error when trying to use RPUSH on a key that doesn't contain a list. It first sets a string value and then attempts to use RPUSH on it.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET mystring "not a list"
OK
127.0.0.1:7379> RPUSH mystring "value"
(error) WRONGTYPE Operation against a key holding the wrong kind of value

----------------------------------------

TITLE: GETEX Command Syntax in Redis
DESCRIPTION: The syntax for the GETEX command, which retrieves a key's value and optionally sets its expiration. It supports various options for specifying the expiration time.

LANGUAGE: redis
CODE:
GETEX key [EX seconds] [PX milliseconds] [EXAT timestamp-seconds] [PXAT timestamp-milliseconds] [PERSIST]

----------------------------------------

TITLE: Running Single Integration Test in DiceDB
DESCRIPTION: Command to run a specific integration test in DiceDB using the TEST_FUNC environment variable.

LANGUAGE: bash
CODE:
TEST_FUNC=<name of the test function> make test-one
TEST_FUNC=^TestSet$ make test-one

----------------------------------------

TITLE: Invalid RPUSH Usage: Insufficient Arguments in DiceDB
DESCRIPTION: An example showing the error returned when RPUSH is called without providing any values to insert, which is an invalid usage of the command.

LANGUAGE: bash
CODE:
RPUSH mylist
(error) ERR wrong number of arguments for 'rpush' command

----------------------------------------

TITLE: Avoiding Redundant Information in Go Logs
DESCRIPTION: Demonstrates how to avoid redundancy in log messages by not repeating information that's already present in the structured fields.

LANGUAGE: go
CODE:
slog.Info("running in multi-threaded mode with", slog.String("mode", "multi-threaded"), slog.Int("num-shards", numShards))  // not okay
slog.Info("running with", slog.String("mode", "multi-threaded"), slog.Int("num-shards", numShards))  // okay

----------------------------------------

TITLE: Invalid Usage Example
DESCRIPTION: Shows an example of incorrect command usage resulting in a syntax error.

LANGUAGE: bash
CODE:
127.0.0.1:7379> <CMD syntax here>
(error) ERR syntax error

----------------------------------------

TITLE: Invalid Usage of LLEN Command in DiceDB
DESCRIPTION: Example demonstrating the error that occurs when trying to use LLEN on a key that holds a non-list value in DiceDB.

LANGUAGE: bash
CODE:
127.0.0.1:7379> SET mystring "Hello, World!"
OK
127.0.0.1:7379> LLEN mystring
(error) WRONGTYPE Operation against a key holding the wrong kind of value

----------------------------------------

TITLE: Basic Command Syntax
DESCRIPTION: Shows the basic syntax structure for the command.

LANGUAGE: bash
CODE:
# command syntax here

----------------------------------------

TITLE: Unconfigured Password Example
DESCRIPTION: Example showing error when using AUTH command without configuring a password in DiceDB

LANGUAGE: bash
CODE:
127.0.0.1:7379> AUTH incorrect_password
(error) ERR AUTH <password> called without any password configured for the default user. Are you sure your configuration is correct?

----------------------------------------

TITLE: WebSocket Message Format for DiceDB Commands
DESCRIPTION: Illustrates the format for sending commands to DiceDB over WebSocket. Commands should be uppercase, with arguments separated by spaces.

LANGUAGE: plaintext
CODE:
COMMAND arg1 arg2 arg3 ...

----------------------------------------

TITLE: Running Go DiceDB Example
DESCRIPTION: Command to execute the DiceDB hello world example from the project directory.

LANGUAGE: bash
CODE:
$ go run main.go

----------------------------------------

TITLE: Setting Up DiceDB Documentation Website
DESCRIPTION: Commands to set up and run the local version of the DiceDB documentation website using Astro and Starlight.

LANGUAGE: bash
CODE:
$ cd docs
$ npm install
$ npm run dev

----------------------------------------

TITLE: Pushing Updated Changes
DESCRIPTION: Command for pushing updated changes after addressing review comments and rebasing.

LANGUAGE: text
CODE:
git push origin <your issue branch>