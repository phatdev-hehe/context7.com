TITLE: Creating Links with Dub API
DESCRIPTION: Demonstrates how to create a new link using Dub's API across different programming languages. Requires a DUB_API_KEY environment variable and only needs a URL parameter.

LANGUAGE: javascript
CODE:
import { Dub } from "dub";

export const dub = new Dub({
  token: process.env.DUB_API_KEY,
});

const link = await dub.links.create({
  url: "https://google.com",
});

LANGUAGE: go
CODE:
package main

import(
  "context"
  dubgo "github.com/dubinc/dub-go"
  "github.com/dubinc/dub-go/models/operations"
  "log"
  "os"
)

func main() {
  ctx := context.Background()

  s := dubgo.New(
    dubgo.WithSecurity(os.Getenv("DUB_API_KEY")),
  )

  res, err := s.Links.Create(ctx, &operations.CreateLinkRequestBody{
    URL: "https://google.com",
  })

  if err != nil {
    log.Fatal(err)
  }

  if res != nil {
    // handle response
  }
}

----------------------------------------

TITLE: Installing Dub SDK with npm
DESCRIPTION: Install the Dub SDK package using npm package manager.

LANGUAGE: bash
CODE:
npm install dub

----------------------------------------

TITLE: Upserting a Link using dub.links.upsert in TypeScript
DESCRIPTION: This snippet demonstrates how to use the dub.links.upsert method to create or update a link. It takes a URL as an argument and returns the shortLink property from the response.

LANGUAGE: typescript
CODE:
const { shortLink } = await dub.links.upsert({
  url: "https://www.google.com",
});

console.log(shortLink); // will always be https://dub.sh/xnjk23d

----------------------------------------

TITLE: Creating a Short Link with Dub TypeScript SDK
DESCRIPTION: This snippet demonstrates how to create a short link using the Dub TypeScript SDK. It uses the links.create method to generate a short link for a given URL.

LANGUAGE: typescript
CODE:
const { shortLink } = await dub.links.create({
  url: "https://google.com",
});

console.log(shortLink); // e.g. https://dub.sh/abc123

----------------------------------------

TITLE: Updating a Link using dub.links.update in TypeScript
DESCRIPTION: This snippet demonstrates how to update a link using the dub.links.update method. It shows two examples: updating a link by its linkId and by its externalId. The method allows for partial updates of link properties.

LANGUAGE: typescript
CODE:
// Update a link by its linkId
await dub.links.update("link_rWOKByP0bRMrstK8e4HPjprJ", {
  url: "https://www.google.com",
});

// Update a link by its externalId
await dub.links.update("ext_123", {
  url: "https://www.google.com",
});

----------------------------------------

TITLE: Creating Link with dub.links.create
DESCRIPTION: Creates a new shortened link using the dub API by providing a target URL. Returns a detailed response object containing the generated short link and associated metadata.

LANGUAGE: typescript
CODE:
await dub.links.create({
  url: "https://www.google.com",
});

LANGUAGE: typescript
CODE:
{
  id: 'clv3o9p9q000au1h0mc7r6l63',
  domain: 'dub.sh',
  key: 'e7qzMuI',
  externalId: "123",
  url: 'https://www.google.com',
  archived: false,
  expiresAt: null,
  expiredUrl: null,
  password: null,
  proxy: false,
  title: null,
  description: null,
  image: null,
  rewrite: false,
  ios: null,
  android: null,
  geo: null,
  publicStats: false,
  tagId: null,
  tags: [],
  comments: null,
  shortLink: 'https://dub.sh/e7qzMuI',
  qrCode: 'https://api.dub.co/qr?url=https://dub.sh/e7qzMuI?qr=1',
  utmSource: null,
  utmMedium: null,
  utmCampaign: null,
  utmTerm: null,
  utmContent: null,
  userId: 'cludszk1h0000wmd2e0ea2b0p',
  workspaceId: 'ws_clugls3tn000lwfotbpy30304',
  clicks: 0,
  lastClicked: null,
  createdAt: '2024-04-17T10:31:00.398Z',
  updatedAt: '2024-04-17T10:31:00.398Z',
  projectId: 'clugls3tn000lwfotbpy30304'
}

----------------------------------------

TITLE: Bulk Creating Links with Dub API
DESCRIPTION: This snippet demonstrates how to create multiple links at once using the Dub API. It supports creating up to 100 links in a single request. Note that custom link previews are not supported, and webhook events are not triggered for bulk creation.

LANGUAGE: javascript
CODE:
import { Dub } from "dub";

export const dub = new Dub({
  token: process.env.DUB_API_KEY,
});

const result = await dub.links.createMany([
  {
    url: "https://google.com",
  },
  {
    url: "https://google.uk",
  },
]);

LANGUAGE: go
CODE:
package main

import(
  "context"
  dubgo "github.com/dubinc/dub-go"
  "github.com/dubinc/dub-go/models/operations"
  "log"
  "os"
)

func main() {
  ctx := context.Background()

  s := dubgo.New(
    dubgo.WithSecurity(os.Getenv("DUB_API_KEY")),
  )
}

res, err := s.Links.CreateMany(ctx, []operations.RequestBody{
  operations.RequestBody{
    URL: "https://google.com",
  },
  operations.RequestBody{
    URL: "https://google.uk",
  },
})

LANGUAGE: python
CODE:
import os
import dub
from dub.models import operations

d = dub.Dub(
  token=os.environ['DUB_API_KEY'],
)

res = dub.links.create_many(request=[
  {
     "url": "https://google.com",
  },
  {
    "url": "https://google.uk",
  },
])

LANGUAGE: ruby
CODE:
require 'dub'

s = ::OpenApiSDK::Dub.new
s.config_security(
  ::OpenApiSDK::Shared::Security.new(
    token: "DUB_API_KEY",
  )
)

req = [
  ::OpenApiSDK::Operations::RequestBody.new(
    url: "https://google.com",
  ),
  ::OpenApiSDK::Operations::RequestBody.new(
    url: "https://example.uk"
  ),
]

res = s.links.create_many(req)

LANGUAGE: php
CODE:
declare(strict_types=1);

require 'vendor/autoload.php';

use Dub;
use Dub\Models\Operations;

$sdk = Dub\Dub::builder()->setSecurity('DUB_API_KEY')->build();

$request = [
  new Operations\RequestBody(
    url: 'https://google.com',
  ),
  new Operations\RequestBody(
    url: 'https://google.uk',
  ),
];

$response = $sdk->links->createMany(
  request: $request
);

LANGUAGE: bash
CODE:
curl --request POST \
  --url https://api.dub.co/links/bulk \
  --header 'Authorization: Bearer <token>' \
  --header 'Content-Type: application/json'
  --data '[
    {
      "url": "https://google.com"
    },
    {
      "url": "https://google.uk"
    }
  ]'

----------------------------------------

TITLE: Authenticating Dub API Requests with Bearer Token in Bash
DESCRIPTION: Example of how to include the Authorization header with a Bearer token for authenticating API requests to Dub.

LANGUAGE: bash
CODE:
Authorization: Bearer <Your-Token>

----------------------------------------

TITLE: Upserting a Link with Dub TypeScript SDK in Next.js
DESCRIPTION: This snippet demonstrates how to upsert a link using the Dub TypeScript SDK. The upsert operation updates an existing link if it exists, or creates a new one if it doesn't, simplifying link management.

LANGUAGE: typescript
CODE:
export async function PATCH() {
  try {
    const { shortLink } = await dub.links.upsert({
      url: "https://google.com",
    });

    return Response.json({ shortLink }); // will always be the same short link
  } catch (error) {
    return Response.json({ error }, { status: 500 });
  }
}

----------------------------------------

TITLE: Implementing Cross-Domain Tracking with Dub Analytics in React
DESCRIPTION: This snippet demonstrates how to set up cross-domain tracking using the Dub Analytics script in a React application. It shows how to configure the cookieOptions to ensure the cookie is accessible on the apex domain.

LANGUAGE: typescript
CODE:
<DubAnalytics
  cookieOptions={{
    domain: ".example.com",
  }}
/>

----------------------------------------

TITLE: Querying Links by Domain in Dub TypeScript SDK
DESCRIPTION: Example of using dub.links.list to find links associated with a specific domain. This snippet demonstrates how to filter links by domain using the Dub TypeScript SDK.

LANGUAGE: typescript
CODE:
// Find links by domain
const { result } = await dub.links.list({
  domain: "dub.sh",
});

----------------------------------------

TITLE: Creating a Domain with dub.domains.create in TypeScript
DESCRIPTION: This snippet demonstrates how to create a domain using the dub.domains.create method. It shows the basic usage with a required 'slug' parameter to specify the domain name.

LANGUAGE: typescript
CODE:
await dub.domains.create({
  slug: "acme.com",
});

----------------------------------------

TITLE: Dub Link Response Structure - TypeScript
DESCRIPTION: Example response structure when retrieving a link. Shows all possible fields in the response including metadata, statistics, and configuration options.

LANGUAGE: typescript
CODE:
{
  id: 'clv3o9p9q000au1h0mc7r6l63',
  domain: 'dub.sh',
  key: 'e7qzMuI',
  externalId: "123",
  url: 'https://www.google.com',
  archived: false,
  expiresAt: null,
  expiredUrl: null,
  password: null,
  proxy: false,
  title: null,
  description: null,
  image: null,
  rewrite: false,
  ios: null,
  android: null,
  geo: null,
  publicStats: false,
  tagId: null,
  tags: [],
  comments: null,
  shortLink: 'https://dub.sh/e7qzMuI',
  qrCode: 'https://api.dub.co/qr?url=https://dub.sh/e7qzMuI?qr=1',
  utmSource: null,
  utmMedium: null,
  utmCampaign: null,
  utmTerm: null,
  utmContent: null,
  userId: 'cludszk1h0000wmd2e0ea2b0p',
  workspaceId: 'ws_clugls3tn000lwfotbpy30304',
  clicks: 0,
  lastClicked: null,
  createdAt: '2024-04-17T10:31:00.398Z',
  updatedAt: '2024-04-17T10:31:00.398Z',
  projectId: 'clugls3tn000lwfotbpy30304'
}

----------------------------------------

TITLE: Including Dub Analytics Script with Reverse Proxy in HTML
DESCRIPTION: This snippet shows how to include the Dub Analytics script with a reverse proxy in a standard HTML implementation. It demonstrates the script tag to be included in the HTML head, pointing to the proxy URL.

LANGUAGE: html
CODE:
<!-- include this script tag in your HTML Head tag -->
<script
  src="/_proxy/dub/script.js" // pointing to your reverse proxy
  defer
/>

----------------------------------------

TITLE: Verifying Webhook Requests in Go
DESCRIPTION: This code snippet illustrates how to verify a webhook request from Dub using Go. It extracts the signature from the header, calculates the HMAC using SHA-256, and compares it with the provided signature.

LANGUAGE: go
CODE:
import (
	"crypto/hmac"
	"crypto/sha256"
	"encoding/hex"
	"io/ioutil"
	"net/http"
	"os"
)

func webhookHandler(w http.ResponseWriter, r *http.Request) {
	// Get the signature from the header
	webhookSignature := r.Header.Get("Dub-Signature")
	if webhookSignature == "" {
		http.Error(w, "No signature provided.", http.StatusUnauthorized)
		return
	}

	// Copy this from the webhook details page
	secret := os.Getenv("DUB_WEBHOOK_SECRET")
	if secret == "" {
		http.Error(w, "No secret provided.", http.StatusUnauthorized)
		return
	}

	// Read the raw body
	body, err := ioutil.ReadAll(r.Body)
	if err != nil {
		http.Error(w, "Error reading request body", http.StatusInternalServerError)
		return
	}

	// Calculate the HMAC
	h := hmac.New(sha256.New, []byte(secret))
	h.Write(body)
	computedSignature := hex.EncodeToString(h.Sum(nil))

	if webhookSignature != computedSignature {
		http.Error(w, "Invalid signature", http.StatusBadRequest)
		return
	}

	// Handle the webhook event
	// ...

	w.WriteHeader(http.StatusOK)
	w.Write([]byte("OK"))
}

----------------------------------------

TITLE: Creating a Short Link with Dub TypeScript SDK in Next.js
DESCRIPTION: This snippet demonstrates how to create a short link using the Dub TypeScript SDK in a Next.js API route. It shows the basic usage of the dub.links.create() method with error handling.

LANGUAGE: typescript
CODE:
export async function POST() {
  try {
    const link = await dub.links.create({
      url: "https://google.com",
    });

    return Response.json(link);
  } catch (error) {
    return Response.json({ error }, { status: 500 });
  }
}

----------------------------------------

TITLE: Retrieving Dub Analytics Data with TypeScript
DESCRIPTION: Examples of using the Dub analytics API to retrieve click analytics with different parameters and grouping options. Shows how to fetch total clicks, timeseries data, and analytics by external ID with various filtering options.

LANGUAGE: typescript
CODE:
// Retrieve total clicks for a link
await dub.analytics.retrieve({
  event: "clicks",
  domain: "dub.sh",
  key: "dummy",
  groupBy: "count",
});

// Retrieve timeseries analytics for a link
await dub.analytics.retrieve({
  event: "clicks",
  linkId: "abc123",
  start: "30 days ago", // we support natural language for start and end dates
  end: "now",
  groupBy: "timeseries",
});

// Retrieve analytics by external ID
await dub.analytics.retrieve({
  event: "clicks",
  externalId: "ext_123", // ID of the link in your database – must be prefixed with 'ext_'
  groupBy: "referer_urls", // we support grouping by the top referer URLs
});

----------------------------------------

TITLE: Tracking Lead Events with Python SDK
DESCRIPTION: Implementation of lead event tracking using Dub's Python SDK. Shows how to access the dub_id cookie, track a lead event, and remove the cookie after successful tracking.

LANGUAGE: python
CODE:
from dub import Dub
import os

dub = Dub(token=os.environ['DUB_API_KEY'])

dub_id = request.cookies.get('dub_id')
if dub_id:
    dub.track.lead({
        'click_id': dub_id,
        'event_name': 'Sign Up',
        'external_id': customer.id,
        'customer_name': customer.name,
        'customer_email': customer.email,
        'customer_avatar': customer.avatar
    })
    # delete the dub_id cookie
    response.delete_cookie('dub_id')

----------------------------------------

TITLE: Response Structure for dub.domains.create in TypeScript
DESCRIPTION: This snippet shows the expected response structure when creating a domain with dub.domains.create. It includes various properties of the created domain such as id, slug, verification status, and usage statistics.

LANGUAGE: typescript
CODE:
{
  id: "clvcep2sn87jh8nf808x00005",
  slug: "acme.com",
  verified: false,
  primary: true,
  archived: false,
  placeholder: "https://dub.co/help/article/what-is-dub",
  expiredUrl: null,
  target: null,
  type: "redirect",
  clicks: 0
}

----------------------------------------

TITLE: Fetching Timeseries Click Data with Dub API in Node.js
DESCRIPTION: This code snippet shows how to use the Dub API to retrieve timeseries click data for a specific link over a 30-day interval. It requires the Dub API key and a Pro plan subscription or higher.

LANGUAGE: javascript
CODE:
import { Dub } from "dub";

export const dub = new Dub({
  token: process.env.DUB_API_KEY,
});

const result = await dub.analytics.retrieve({
  event: "clicks",
  groupBy: "timeseries",
  linkId: "clux0rgak00011...",
  interval: "30d",
});

----------------------------------------

TITLE: Using Dub API Key as Bearer Token
DESCRIPTION: This snippet shows how to use the Dub API key as a bearer token in API requests. The key is included in the Authorization header of the request.

LANGUAGE: text
CODE:
Authorization: Bearer dub_xxxx

----------------------------------------

TITLE: Initializing Dub Python SDK
DESCRIPTION: Initialize the Dub SDK by creating a new instance of the Dub class with an API key from environment variables.

LANGUAGE: python
CODE:
import os
import dub
from dub.models import operations

d = dub.Dub(
  token=os.environ['DUB_API_KEY'],
)

----------------------------------------

TITLE: Retrieving Total Click Count with Dub API in Node.js
DESCRIPTION: This snippet demonstrates how to use the Dub API to retrieve the total click count for a specific link over a 30-day interval. It requires the Dub API key and a Pro plan subscription or higher.

LANGUAGE: javascript
CODE:
import { Dub } from "dub";

export const dub = new Dub({
  token: process.env.DUB_API_KEY,
});

const result = await dub.analytics.retrieve({
  event: "clicks",
  groupBy: "count",
  linkId: "clux0rgak00011...",
  interval: "30d",
});

----------------------------------------

TITLE: Sample Response from dub.links.upsert in TypeScript
DESCRIPTION: This snippet shows the structure of the response object returned by the dub.links.upsert method. It includes various properties of the created or updated link, such as id, domain, key, url, and other metadata.

LANGUAGE: typescript
CODE:
{
  id: 'clv3o9p9q000au1h0mc7r6l63',
  domain: 'dub.sh',
  key: 'e7qzMuI',
  externalId: "123",
  url: 'https://www.google.com',
  archived: false,
  expiresAt: null,
  expiredUrl: null,
  password: null,
  proxy: false,
  title: null,
  description: null,
  image: null,
  rewrite: false,
  ios: null,
  android: null,
  geo: null,
  publicStats: false,
  tagId: null,
  tags: [],
  comments: null,
  shortLink: 'https://dub.sh/e7qzMuI',
  qrCode: 'https://api.dub.co/qr?url=https://dub.sh/e7qzMuI?qr=1',
  utmSource: null,
  utmMedium: null,
  utmCampaign: null,
  utmTerm: null,
  utmContent: null,
  userId: 'cludszk1h0000wmd2e0ea2b0p',
  workspaceId: 'ws_clugls3tn000lwfotbpy30304',
  clicks: 0,
  lastClicked: null,
  createdAt: '2024-04-17T10:31:00.398Z',
  updatedAt: '2024-04-17T10:31:00.398Z',
  projectId: 'clugls3tn000lwfotbpy30304'
}

----------------------------------------

TITLE: Upserting Short Link
DESCRIPTION: Upsert a link to either update existing or create new if it doesn't exist.

LANGUAGE: python
CODE:
res = d.links.upsert(request={
  "url": "https://google.com",
})

print(res.short_link)

----------------------------------------

TITLE: Creating a Link with Dub TypeScript SDK in Remix
DESCRIPTION: This snippet demonstrates how to create a short link using the Dub TypeScript SDK in a Remix loader function. It handles both successful link creation and error cases.

LANGUAGE: typescript
CODE:
export const loader = async () => {
  try {
    const result = await dub.links.create({
      url: "https://www.google.com",
    });

    return json(result, 200);
  } catch (error: any) {
    console.error(error);
    return json(error, 400);
  }
};

----------------------------------------

TITLE: Deleting a Domain using dub.domains API in TypeScript
DESCRIPTION: This snippet demonstrates how to delete a domain from a workspace using the dub.domains API. The operation requires the domain slug as an argument and returns the deleted domain's slug. Note that this action is irreversible and will also delete all associated links.

LANGUAGE: typescript
CODE:
await dub.domains.delete("acme.com");

LANGUAGE: typescript
CODE:
{
  slug: "acme.com";
}

----------------------------------------

TITLE: Customizing Cookie Expiration with Dub Analytics in React
DESCRIPTION: This code example shows how to customize the cookie expiration time using the Dub Analytics script in a React application. It demonstrates setting the cookie to expire in 60 days using the cookieOptions prop.

LANGUAGE: typescript
CODE:
<DubAnalytics
  cookieOptions={{
    expiresInDays: 60, // setting the cookie to expire in 60 days
  }}
/>

----------------------------------------

TITLE: Initializing Dub SDK
DESCRIPTION: Initialize the Dub Python SDK by creating a new instance with API key authentication.

LANGUAGE: python
CODE:
import os
import dub
from dub.models import operations

d = dub.Dub(
  token=os.environ['DUB_API_KEY'],
)

----------------------------------------

TITLE: URL and Domain Configuration Parameters
DESCRIPTION: Core parameters for specifying the destination URL, domain, and key for short links. Includes configuration for external IDs and tenant management.

LANGUAGE: markdown
CODE:
<ParamField body="url" type="string" required>
  The destination URL of the short link.
</ParamField>

<ParamField body="domain" type="string">
  The domain of the short link. If not provided, the primary domain for the workspace will be used (or `dub.sh` if the workspace has no domains).
</ParamField>

----------------------------------------

TITLE: Configuring Outbound Domain Tracking with Dub Analytics in HTML
DESCRIPTION: This snippet demonstrates how to set up outbound domain tracking using the Dub Analytics script in a standard HTML implementation. It shows how to use the data-domains attribute to specify outbound domains.

LANGUAGE: html
CODE:
<script
  src="https://www.dubcdn.com/analytics/script.outbound-domains.js"
  data-domains='{"outbound": ["example.com", "example.sh"]}'
/>

----------------------------------------

TITLE: Creating Basic Short Link
DESCRIPTION: Create a basic short link using the Dub SDK create method.

LANGUAGE: python
CODE:
res = d.links.create(request={
  "url": "https://google.com",
})

print(res.short_link)

----------------------------------------

TITLE: Creating a Link with External ID in Dub
DESCRIPTION: This snippet demonstrates how to create a link with an external ID in Dub. The external ID serves as a unique identifier within your database, allowing you to associate it with a corresponding link in Dub's system.

LANGUAGE: javascript
CODE:
import { Dub } from "dub";

export const dub = new Dub({
  token: process.env.DUB_API_KEY,
});

const link = await dub.links.create({
  url: "https://google.com",
  externalId: "12345",
});

LANGUAGE: go
CODE:
package main

import(
  "context"
  dubgo "github.com/dubinc/dub-go"
  "github.com/dubinc/dub-go/models/operations"
  "log"
  "os"
)

func main() {
  ctx := context.Background()

  s := dubgo.New(
    dubgo.WithSecurity(os.Getenv("DUB_API_KEY")),
  )

  res, err := s.Links.Create(ctx, &operations.CreateLinkRequestBody{
    URL: "https://google.com",
    ExternalId: "12345",
  })

  if err != nil {
    log.Fatal(err)
  }

  if res != nil {
    // handle response
  }
}

LANGUAGE: python
CODE:
import os
import dub
from dub.models import operations

d = dub.Dub(
  token=os.environ['DUB_API_KEY'],
)

res = d.links.create(request={
  "url": "https://google.com",
  "external_id": "12345",
})

LANGUAGE: ruby
CODE:
require 'dub'

s = ::OpenApiSDK::Dub.new
s.config_security(
  ::OpenApiSDK::Shared::Security.new(
    token: "DUB_API_KEY",
  )
)

req = ::OpenApiSDK::Operations::CreateLinkRequestBody.new(
  url: "https://google.com",
  external_id: "12345",
)

LANGUAGE: php
CODE:
declare(strict_types=1);

require 'vendor/autoload.php';

use Dub;
use Dub\Models\Operations;

$sdk = Dub\Dub::builder()->setSecurity('DUB_API_KEY')->build();

$request = new Operations\CreateLinkRequestBody(
  url: 'https://google.com',
  externalId: '12345',
);

$response = $sdk->links->create(
  request: $request
);

LANGUAGE: bash
CODE:
curl --request POST \
  --url https://api.dub.co/links \
  --header 'Authorization: Bearer <token>' \
  --header 'Content-Type: application/json' \
  --data '{
    "url": "https://google.com",
    "external_id": "12345"
  }'

----------------------------------------

TITLE: Creating Links with External ID
DESCRIPTION: Creating a short link with an external ID for database association. The external ID allows for easier link management and analytics retrieval.

LANGUAGE: typescript
CODE:
app.post("/create-link", async (req: Request, res: Response) => {
  try {
    const result = await dub.links.create({
      url: "https://www.google.com",
      externalId: "12345",
    });

    res.status(200).json(result);
  } catch (error: any) {
    res.status(400).json(error);
  }
});

----------------------------------------

TITLE: Setting Up Outbound Domain Tracking with Dub Analytics in React
DESCRIPTION: This code example illustrates how to configure outbound domain tracking using the Dub Analytics script in a React application. It shows how to use the domainsConfig prop to specify outbound domains.

LANGUAGE: typescript
CODE:
<DubAnalytics
  domainsConfig={{
    outbound: ["example.com", "example.sh"],
  }}
/>

----------------------------------------

TITLE: Creating a Basic Link
DESCRIPTION: Create a short link using the Dub Ruby SDK with basic URL parameter.

LANGUAGE: ruby
CODE:
req = ::OpenApiSDK::Operations::CreateLinkRequest.new(
  request_body: ::OpenApiSDK::Operations::CreateLinkRequestBody.new(
    url: "https://google.com"
  )
)

res = dub.links.create(req)

puts res.raw_response.body

----------------------------------------

TITLE: Creating a Link with External ID using Dub TypeScript SDK
DESCRIPTION: This snippet shows how to create a link with an external ID using the Dub TypeScript SDK. The external ID is a unique identifier in your own database to associate with the link in Dub's system.

LANGUAGE: typescript
CODE:
await dub.links.create({
  url: "https://google.com",
  externalId: "12345",
});

----------------------------------------

TITLE: Updating Existing Links
DESCRIPTION: Update existing links using either linkId or externalId.

LANGUAGE: python
CODE:
# Update a link by its linkId
res = d.links.update(link_id="clx1gvi9o0005hf5momm6f7hj", request_body={
  "url": "https://google.uk",
})

print(res.short_link)

# Update a link by its externalId
res = d.links.update(external_id="ext_12345", request_body={
  "url": "https://google.uk",
})

print(res.short_link)

----------------------------------------

TITLE: Creating a Tag with dub.tags.create in TypeScript
DESCRIPTION: This snippet demonstrates how to create a new tag using the dub.tags.create method. It requires a 'tag' parameter and optionally accepts a 'color' parameter. If color is not provided, a random color will be assigned from a predefined list.

LANGUAGE: typescript
CODE:
await dub.tags.create({
  tag: "news",
});

----------------------------------------

TITLE: Updating an Existing Link with Dub PHP SDK
DESCRIPTION: Shows how to update an existing link using either the linkId or externalId, including error handling.

LANGUAGE: php
CODE:
use Dub\Models\Operations;

try {
    $request = new Operations\UpdateLinkRequest();
    $request->linkId = 'cly2p8onm000cym8200nfay7l';
    $request->requestBody = new Operations\UpdateLinkRequestBody();
    $request->requestBody->url = 'https://google.us';

    $response = $dub->links->update($request);

    if ($response->linkSchema !== null) {
        echo $response->linkSchema->shortLink;
    }
} catch (Throwable $e) {
    // handle exception
}

----------------------------------------

TITLE: Upserting a Link with Dub TypeScript SDK
DESCRIPTION: This snippet demonstrates how to upsert a link using the Dub TypeScript SDK. The upsert method updates an existing link if it exists or creates a new one if it doesn't.

LANGUAGE: typescript
CODE:
const { shortLink } = await dub.links.upsert({
  url: "https://www.google.com",
});

console.log(shortLink); // will always be the same short link

----------------------------------------

TITLE: Ruby Pagination Implementation
DESCRIPTION: Ruby code example showing how to create and execute a paginated request using the OpenApiSDK. Demonstrates parameter initialization and request execution.

LANGUAGE: ruby
CODE:
req = ::OpenApiSDK::Operations::GetLinksRequest.new(
  page: 1,
  page_size: 10,
)

res = s.links.list(req)

----------------------------------------

TITLE: Creating a Link with Tags in Dub
DESCRIPTION: This snippet shows how to create a link with tags in Dub. Tags are useful for organizing links by campaigns, clients, or other categories.

LANGUAGE: javascript
CODE:
import { Dub } from "dub";

export const dub = new Dub({
  token: process.env.DUB_API_KEY,
});

const link = await dub.links.create({
  url: "https://example.com",
  tagIds: ["clux0rgak00011..."],
});

LANGUAGE: go
CODE:
package main

import(
  "context"
  dubgo "github.com/dubinc/dub-go"
  "github.com/dubinc/dub-go/models/operations"
  "log"
  "os"
)

func main() {
  ctx := context.Background()

  s := dubgo.New(
    dubgo.WithSecurity(os.Getenv("DUB_API_KEY")),
  )

  res, err := s.Links.Create(ctx, &operations.CreateLinkRequestBody{
    URL: "https://example.com",
    TagIds: []string{"clux0rgak00011..."},
  })

  if err != nil {
    log.Fatal(err)
  }

  if res != nil {
    // handle response
  }
}

LANGUAGE: python
CODE:
import os
import dub
from dub.models import operations

d = dub.Dub(
  token=os.environ['DUB_API_KEY'],
)

res = d.links.create(request={
  "url": "https://example.com",
  "tag_ids": ["clux0rgak00011..."],
})

LANGUAGE: ruby
CODE:
require 'dub'

s = ::OpenApiSDK::Dub.new
s.config_security(
  ::OpenApiSDK::Shared::Security.new(
    token: "DUB_API_KEY",
  )
)

req = ::OpenApiSDK::Operations::CreateLinkRequestBody.new(
  url: "https://example.com",
  tag_ids: ["clux0rgak00011..."],
)

LANGUAGE: php
CODE:
declare(strict_types=1);

require 'vendor/autoload.php';

use Dub;
use Dub\Models\Operations;

$sdk = Dub\Dub::builder()->setSecurity('DUB_API_KEY')->build();

$request = new Operations\CreateLinkRequestBody(
  url: 'https://example.com',
  tagIds: ['clux0rgak00011...'],
);

$response = $sdk->links->create(
  request: $request
);

LANGUAGE: bash
CODE:
curl --request POST \
  --url https://api.dub.co/links \
  --header 'Authorization: Bearer <token>' \
  --header 'Content-Type: application/json' \
  --data '{
    "url": "https://example.com",
    "tagIds": ["clux0rgak00011..."]
  }'

----------------------------------------

TITLE: Retrieving Link Analytics
DESCRIPTION: Method to retrieve analytics for a specific link with interval and grouping options.

LANGUAGE: ruby
CODE:
def analytics
  req = ::OpenApiSDK::Operations::RetrieveAnalyticsRequest.new(
    link_id: "clx1gvi9o0005hf5momm6f7hj",
    interval: ::OpenApiSDK::Operations::Interval::SEVEND,
    group_by: ::OpenApiSDK::Operations::GroupBy::TIMESERIES
  )

  res = @dub.analytics.retrieve(req)

  render json: res.raw_response.body
end

----------------------------------------

TITLE: Installing Dub SDK with yarn
DESCRIPTION: Install the Dub SDK package and its peer dependency (zod) using yarn package manager.

LANGUAGE: bash
CODE:
yarn add dub zod # zod is a peer dependency

----------------------------------------

TITLE: Filtering Links by Tag IDs in Dub TypeScript SDK
DESCRIPTION: Example of using dub.links.list to find links associated with specific tag IDs. This snippet shows how to filter links by tag IDs using the Dub TypeScript SDK.

LANGUAGE: typescript
CODE:
// Find links by tagIds
const { result } = await dub.links.list({
  tagIds: ["clv3mewk30001mq0rxl3j3frn"],
});

----------------------------------------

TITLE: Upserting a Link with Dub PHP SDK
DESCRIPTION: Demonstrates how to upsert a link, which updates an existing link or creates a new one if it doesn't exist.

LANGUAGE: php
CODE:
use Dub\Models\Operations;

try {
  $request = new Operations\UpsertLinkRequestBody(
    url: 'https://google.com',
  );

  $response = $dub->links->upsert($request);

  if ($response->linkSchema !== null) {
    // handle response
  }
} catch (Throwable $e) {
  // handle exception
}

----------------------------------------

TITLE: Retrieving Link Analytics
DESCRIPTION: Retrieve analytics data for links using either linkId or externalId.

LANGUAGE: python
CODE:
# Retrieve the timeseries analytics for the last 7 days for a link
res = d.analytics.retrieve(request={
  "link_id": "clx1gvi9o0005hf5momm6f7hj",
  "interval": "7d",
  "group_by": "timeseries",
})

print(res)

# Retrieve the timeseries analytics for the last 7 days for a link
res = d.analytics.retrieve(request={
  "external_id": "ext_12345",
  "interval": "7d",
  "group_by": "timeseries",
})

print(res)

----------------------------------------

TITLE: Installing Dub SDK with pnpm
DESCRIPTION: Install the Dub SDK package using pnpm package manager.

LANGUAGE: bash
CODE:
pnpm add dub

----------------------------------------

TITLE: Creating Links with Express and Dub SDK
DESCRIPTION: Example of creating a short link using Dub's TypeScript SDK in an Express route handler. Demonstrates basic link creation with error handling.

LANGUAGE: typescript
CODE:
app.post("/create-link", async (req: Request, res: Response) => {
  try {
    const result = await dub.links.create({
      url: "https://www.google.com",
    });

    res.status(200).json(result);
  } catch (error: any) {
    res.status(400).json(error);
  }
});

----------------------------------------

TITLE: Defining OpenAPI Specification for Domain Deletion in YAML
DESCRIPTION: This YAML snippet defines the OpenAPI specification for the DELETE /domains/{slug} endpoint. It specifies the operation to delete a domain from a workspace in the Dub API.

LANGUAGE: yaml
CODE:
openapi: delete /domains/{slug}

----------------------------------------

TITLE: Updating a Link with Dub Laravel SDK
DESCRIPTION: Example of updating an existing link using the Dub Laravel SDK with linkId.

LANGUAGE: php
CODE:
use Dub\Models\Operations;

class LinkController extends Controller
{
    public function updateLink()
    {
        $dub = new Dub();

        try {
            $request = new Operations\UpdateLinkRequest();
            $request->linkId = 'cly2p8onm000cym8200nfay7l';
            $request->requestBody = new Operations\UpdateLinkRequestBody();
            $request->requestBody->url = 'https://google.us';

            $response = $dub->links->update($request);

            if ($response->linkSchema !== null) {
                echo $response->linkSchema->shortLink;
            }
        } catch (Throwable $e) {
            // handle exception
        }
    }
}

----------------------------------------

TITLE: Retrieving Links Using Dub SDK - TypeScript
DESCRIPTION: Examples of retrieving link information using different identifiers with the Dub SDK. Shows three methods: using domain and key, using linkId, and using externalId.

LANGUAGE: typescript
CODE:
// Retrieve a link by domain and key
await dub.links.get({
  domain: "dub.sh",
  key: "e7qzMuI",
});

// Retrieve a link by linkId
await dub.links.get({
  linkId: "clv3o9p9q000au1h0mc7r6l63",
});

// Retrieve a link by externalId
await dub.links.get({
  externalId: "ext_123",
});

----------------------------------------

TITLE: Installing Dub Python SDK
DESCRIPTION: Command to install the Dub Python SDK package using pip package manager.

LANGUAGE: bash
CODE:
pip install dub

----------------------------------------

TITLE: Creating a Link with External ID in Dub Laravel SDK
DESCRIPTION: Example of creating a link with an external ID using the Dub Laravel SDK.

LANGUAGE: php
CODE:
use Dub\Models\Operations;

class LinkController extends Controller
{
    public function createLinkWithExternalId()
    {
        $dub = new Dub();

        try {
            $request = new Operations\CreateLinkRequestBody(
                url: 'https://google.com',
                externalId: '12345'
            );

            $response = $dub->links->create($request);

            if ($response->linkSchema !== null) {
                // handle response
            }
        } catch (Throwable $e) {
            // handle exception
        }
    }
}

----------------------------------------

TITLE: Verifying Webhook Requests in Next.js
DESCRIPTION: This code snippet demonstrates how to verify a webhook request from Dub using Next.js. It extracts the signature from the header, calculates the HMAC using SHA-256, and compares it with the provided signature.

LANGUAGE: javascript
CODE:
export const POST = async (req: Request) => {
  const webhookSignature = req.headers.get("Dub-Signature");
  if (!webhookSignature) {
    return new Response("No signature provided.", { status: 401 });
  }

  // Copy this from the webhook details page
  const secret = process.env.DUB_WEBHOOK_SECRET;
  if (!secret) {
    return new Response("No secret provided.", { status: 401 });
  }

  // Make sure to get the raw body from the request
  const rawBody = await req.text();

  const computedSignature = crypto
    .createHmac("sha256", secret)
    .update(rawBody)
    .digest("hex");

  if (webhookSignature !== computedSignature) {
    return new Response("Invalid signature", { status: 400 });
  }

  // Handle the webhook event
  // ...
};

----------------------------------------

TITLE: Installing Dub CLI using Package Managers
DESCRIPTION: Instructions for installing the Dub CLI tool using different Node.js package managers (npm, yarn, pnpm).

LANGUAGE: bash
CODE:
npm i -g dub-cli@latest

LANGUAGE: bash
CODE:
yarn global add dub-cli@latest

LANGUAGE: bash
CODE:
pnpm i -g dub-cli@latest

----------------------------------------

TITLE: Bulk Updating Links with Dub API
DESCRIPTION: This snippet shows how to update multiple links simultaneously with the same data using the Dub API. It supports modifying up to 100 links at once. Note that domain and key cannot be updated, and webhook events are not triggered for bulk updates.

LANGUAGE: javascript
CODE:
import { Dub } from "dub";

export const dub = new Dub({
  token: process.env.DUB_API_KEY,
});

const result = await dub.links.updateMany({
  linkIds: ["clux0rgak00011...", "clux0rgak00022..."],
  data: {
    utm_source: "facebook",
    utm_medium: "cpc",
  },
});

LANGUAGE: go
CODE:
package main

import(
  "context"
  dubgo "github.com/dubinc/dub-go"
  "github.com/dubinc/dub-go/models/operations"
  "log"
  "os"
)

func main() {
  ctx := context.Background()

  s := dubgo.New(
    dubgo.WithSecurity(os.Getenv("DUB_API_KEY")),
  )

  res, err := s.Links.UpdateMany(ctx, operations.BulkUpdateLinksRequestBody{
    LinkIds: []string{
      "clux0rgak00011...",
      "clux0rgak00022...",
    },
    Data: map[string]string{
      "utm_source": "facebook",
      "utm_medium": "cpc",
    },
  })
}

LANGUAGE: python
CODE:
import os
import dub
from dub.models import operations

d = dub.Dub(
  token=os.environ['DUB_API_KEY'],
)

res = dub.links.update_many(request={
  "link_ids": [
    "clux0rgak00011...",
    "clux0rgak00022...",
  ],
  "data": {
    "utm_source": "facebook",
    "utm_medium": "cpc",
  },
})

LANGUAGE: ruby
CODE:
require 'dub'

s = ::OpenApiSDK::Dub.new
s.config_security(
  ::OpenApiSDK::Shared::Security.new(
    token: "DUB_API_KEY",
  )
)

req = ::OpenApiSDK::Operations::BulkUpdateLinksRequestBody.new(
  link_ids: [
    "clux0rgak00011...",
    "clux0rgak00022...",
  ],
  data: {
    "utm_source": "facebook",
    "utm_medium": "cpc",
  },
)

res = s.links.update_many(req)

LANGUAGE: php
CODE:
declare(strict_types=1);

require 'vendor/autoload.php';

use Dub;
use Dub\Models\Operations;

$sdk = Dub\Dub::builder()->setSecurity('DUB_API_KEY')->build();

$response = $sdk->links->updateMany(
  linkIds: [
    'clux0rgak00011...',
    'clux0rgak00022...',
  ],
  data: {
    "utm_source": "facebook",
    "utm_medium": "cpc",
  },
);

LANGUAGE: bash
CODE:
curl --request PATCH \
  --url https://api.dub.co/links/bulk \
  --header 'Authorization: Bearer <token>' \
  --header 'Content-Type: application/json' \
  --data '{"link_ids": ["clux0rgak00011...", "clux0rgak00022..."], "data": {"utm_source": "facebook", "utm_medium": "cpc"}}'

----------------------------------------

TITLE: Upserting a Link with Dub TypeScript SDK in Nuxt
DESCRIPTION: This snippet shows how to upsert a link using the Dub TypeScript SDK in a Nuxt server API route. Upserting updates an existing link if it exists or creates a new one if it doesn't.

LANGUAGE: typescript
CODE:
export default defineEventHandler(async () => {
  try {
    const result = await dub.links.upsert({
      url: "https://www.google.com",
    });

    return result;
  } catch (error) {
    console.error(error);
    return error;
  }
});

----------------------------------------

TITLE: Creating a Short Link with Dub PHP SDK
DESCRIPTION: Demonstrates how to create a short link using the Dub PHP SDK, including error handling.

LANGUAGE: php
CODE:
use Dub\Models\Operations;

try {
  $request = new Operations\CreateLinkRequestBody(
    url: 'https://google.com',
  );

  $response = $dub->links->create($request);

  if ($response->linkSchema !== null) {
    // handle response
  }
} catch (Throwable $e) {
  // handle exception
}

----------------------------------------

TITLE: Configuring NextAuth.js Options for Lead Tracking with Dub (Pages Router)
DESCRIPTION: This snippet shows how to configure NextAuth.js options for lead tracking using the Dub TypeScript SDK in a Next.js Pages Router setup. It demonstrates handling new sign-ups, checking for the dub_id cookie, and sending a lead event to Dub.

LANGUAGE: typescript
CODE:
// pages/api/auth/[...nextauth]/options.ts
import type { NextApiRequest } from "next";
import type { NextAuthOptions } from "next-auth";
import { dub } from "@/lib/dub";

export const getOptions = (req: NextApiRequest): NextAuthOptions => ({
  ...otherAuthOptions, // your other NextAuth options
  events: {
    async signIn(message) {
      // if it's a new sign up
      if (message.isNewUser) {
        // check if dub_id cookie is present
        const { dub_id } = req.cookies;
        if (dub_id) {
          // send lead event to Dub
          await dub.track.lead({
            clickId: dub_id,
            eventName: "Sign Up",
            externalId: user.id,
            customerName: user.name,
            customerEmail: user.email,
            customerAvatar: user.image,
          });
        }
      }
    },
  },
});

----------------------------------------

TITLE: Verifying Webhook Requests in Python
DESCRIPTION: This code snippet shows how to verify a webhook request from Dub using Python. It extracts the signature from the header, calculates the HMAC using SHA-256, and compares it with the provided signature.

LANGUAGE: python
CODE:
import hmac
import hashlib

def webhook():
    # Get the signature from the header
    webhook_signature = request.headers.get('Dub-Signature')
    if not webhook_signature:
        abort(401, 'No signature provided.')

    # Copy this from the webhook details page
    secret = os.environ.get('DUB_WEBHOOK_SECRET')
    if not secret:
        abort(401, 'No secret provided.')

    # Get the raw body of the request
    raw_body = request.data

    # Calculate the HMAC
    computed_signature = hmac.new(
        secret.encode('utf-8'),
        raw_body,
        hashlib.sha256
    ).hexdigest()

    if webhook_signature != computed_signature:
        abort(400, 'Invalid signature')

    # Handle the webhook event
    # ...

    return 'OK', 200

----------------------------------------

TITLE: Updating Links
DESCRIPTION: Methods to update existing links using either linkId or externalId.

LANGUAGE: python
CODE:
# Update a link by its linkId
def update_link(request):
  res = d.links.update(link_id="clx1gvi9o0005hf5momm6f7hj", request_body={
    "url": "https://google.uk",
  })

  return res.short_link

# Update a link by its externalId
def update_link(request):
  res = d.links.update(external_id="ext_12345", request_body={
    "url": "https://google.uk",
  })

  return res.short_link

----------------------------------------

TITLE: Creating a Short Link with External ID using Dub PHP SDK
DESCRIPTION: Shows how to create a short link with an external ID for easier future reference and updates.

LANGUAGE: php
CODE:
use Dub\Models\Operations;

try {
  $request = new Operations\CreateLinkRequestBody(
    url: 'https://google.com',
    externalId: '12345',
  );

  $response = $dub->links->create($request);

  if ($response->linkSchema !== null) {
    // handle response
  }
} catch (Throwable $e) {
  // handle exception
}

----------------------------------------

TITLE: Defining OpenAPI Specification for POST /partners Endpoint
DESCRIPTION: This YAML snippet specifies the OpenAPI definition for the POST /partners endpoint. It defines the structure and properties of the API endpoint for creating or updating partner information.

LANGUAGE: yaml
CODE:
openapi: post /partners

----------------------------------------

TITLE: Creating Link with External ID
DESCRIPTION: Creating a short link with an external ID for database association.

LANGUAGE: ruby
CODE:
def create
  req = ::OpenApiSDK::Operations::CreateLinkRequest.new(
    request_body: ::OpenApiSDK::Operations::CreateLinkRequestBody.new(
      url: 'https://google.com',
      external_id: '12345'
    )
  )

  res = @dub.links.create(req)

  render json: res.raw_response.body
end

----------------------------------------

TITLE: Creating a Link with Dub SDK
DESCRIPTION: Example of creating a new short link using the Dub Go SDK.

LANGUAGE: go
CODE:
func main() {
	request := &operations.CreateLinkRequestBody{
		URL: "https://google.com",
	}

	ctx := context.Background()
	res, err := d.Links.Create(ctx, request)
	if err != nil {
		log.Fatal(err)
	}
	if res.LinkSchema != nil {
		fmt.Println(res.LinkSchema.ShortLink)
	}
}

----------------------------------------

TITLE: Initializing Dub PHP SDK
DESCRIPTION: Initialize the Dub PHP SDK by creating a new instance of the Dub class with the API key.

LANGUAGE: php
CODE:
declare(strict_types=1);

require 'vendor/autoload.php';

use Dub\Dub;
use Dub\Models\Components;

$dub = Dub::builder()->setSecurity("DUB_API_KEY")->build();

----------------------------------------

TITLE: Bulk Link Creation in Multiple Languages
DESCRIPTION: Demonstrates how to use the bulk link creation endpoint to create multiple links in a single API call, which helps comply with rate limits. The example shows creating three links to different websites.

LANGUAGE: typescript
CODE:
await dub.links.createMany([
  {
    url: "https://google.com",
  },
  {
    url: "https://twitter.com",
  },
  {
    url: "https://linkedin.com",
  },
]);

LANGUAGE: python
CODE:
res = d.links.create_many(request=[
  {
    url: "https://google.com",
  },
  {
    url: "https://twitter.com",
  },
  {
    url: "https://linkedin.com",
  },
]);

LANGUAGE: go
CODE:
var request []operations.RequestBody =
  []operations.RequestBody{
    operations.RequestBody{
        URL: "https://google.com",
    },
    operations.RequestBody{
      URL: "https://twitter.com",
    },
    operations.RequestBody{
      URL: "https://linkedin.com",
    },
  }
ctx := context.Background()
res, err := s.Links.CreateMany(ctx, request)

LANGUAGE: ruby
CODE:
s.links.create_many(
  ::OpenApiSDK::Operations::BulkCreateLinksRequest.new(
    request_body: [
      ::OpenApiSDK::Operations::RequestBody.new(
        url: "https://google.com",
      ),
      ::OpenApiSDK::Operations::RequestBody.new(
        url: "https://twitter.com",
      ),
      ::OpenApiSDK::Operations::RequestBody.new(
        url: "https://linkedin.com",
      ),
    ]
  )
)

----------------------------------------

TITLE: Updating Existing Links
DESCRIPTION: Examples of updating links using either linkId or externalId.

LANGUAGE: python
CODE:
# Update a link by its linkId
def update_link(request):
  res = d.links.update(link_id="clx1gvi9o0005hf5momm6f7hj", request_body={
    "url": "https://google.uk",
  })

  return JsonResponse({
    "short_link": res.short_link
  })

# Update a link by its externalId
def update_link(request):
  res = d.links.update(external_id="ext_12345", request_body={
    "url": "https://google.uk",
  })

  return JsonResponse({
    "short_link": res.short_link
  })

----------------------------------------

TITLE: Upserting Links with Dub SDK
DESCRIPTION: Implementation of link upsert functionality that either updates an existing link or creates a new one if it doesn't exist.

LANGUAGE: typescript
CODE:
app.post("/upsert-link", async (req: Request, res: Response) => {
  try {
    // Update the link if same URL already exists or create a new link
    const result = await dub.links.upsert({
      url: "https://www.google.com",
    });

    res.status(200).json(result);
  } catch (error: any) {
    res.status(400).json(error);
  }
});

----------------------------------------

TITLE: Upserting a Link with Dub Ruby SDK
DESCRIPTION: Demonstrates how to upsert a link using the Dub Ruby SDK, which creates a new link or updates an existing one.

LANGUAGE: ruby
CODE:
put "/links" do
  req = ::OpenApiSDK::Operations::UpsertLinkRequest.new(
    request_body: ::OpenApiSDK::Operations::UpsertLinkRequestBody.new(
      url: "https://google.com",
    ),
  )

  res = dub.links.upsert(req)

  content_type :json
  res.raw_response.body
end

----------------------------------------

TITLE: Configuring Cross-Domain Tracking with Dub Analytics in HTML
DESCRIPTION: This snippet shows how to set up cross-domain tracking using the Dub Analytics script in a standard HTML implementation. It demonstrates how to use the data-cookie-options attribute to configure the cookie domain.

LANGUAGE: html
CODE:
<script
  src="https://www.dubcdn.com/analytics/script.js"
  data-cookie-options='{"domain": ".example.com"}'
/>

----------------------------------------

TITLE: Creating a Link with External ID
DESCRIPTION: Creating a short link with an external ID for reference in your own database.

LANGUAGE: go
CODE:
func main() {
	request := &operations.CreateLinkRequestBody{
		URL: "https://google.com",
		ExternalId: "12345"
	}

	ctx := context.Background()
	res, err := d.Links.Create(ctx, request)
	if err != nil {
		log.Fatal(err)
	}
	if res.LinkSchema != nil {
		fmt.Println(res.LinkSchema.ShortLink)
	}
}

----------------------------------------

TITLE: Initializing Dub SDK in Django
DESCRIPTION: Setup code to initialize the Dub SDK client with API key in a Django application.

LANGUAGE: python
CODE:
import os
import dub
from dub.models import operations
from django.http import JsonResponse

d = dub.Dub(
  token=os.environ['DUB_API_KEY'],
)

----------------------------------------

TITLE: Installing Dub Python SDK
DESCRIPTION: Command to install the Dub Python SDK package using pip.

LANGUAGE: bash
CODE:
pip install dub

----------------------------------------

TITLE: Documenting Response Fields for Dub Short Link API
DESCRIPTION: API response field documentation using custom ResponseField components to define the structure and properties of a short link object returned by the Dub API. Includes field names, types, requirements, and descriptions.

LANGUAGE: markup
CODE:
<ResponseField name="id" type="string" required>
  The unique ID of the short link. Prefixed with `link_`.
</ResponseField>

<ResponseField name="domain" type="string" required>
  The domain of the short link. If not provided, the primary domain for the
  workspace will be used (or dub.sh if the workspace has no domains).
</ResponseField>

----------------------------------------

TITLE: Creating a Short Link with Dub Laravel SDK
DESCRIPTION: Example of creating a short link using the Dub Laravel SDK in a controller method.

LANGUAGE: php
CODE:
use Dub\Models\Operations;

class LinkController extends Controller {
  public function createLink() {
    $dub = new Dub();

    try {
      $request = new Operations\CreateLinkRequestBody(
        url: 'https://google.com'
      );

      $response = $dub->links->create($request);

      if ($response->linkSchema !== null) {
        // handle response
      }
  } catch (Throwable $e) {
    // handle exception
  }
  }
}

----------------------------------------

TITLE: Updating a Link with Dub TypeScript SDK
DESCRIPTION: This snippet shows how to update an existing link using the Dub TypeScript SDK. It demonstrates updating a link using both the linkId and externalId methods.

LANGUAGE: typescript
CODE:
// Update a link by its linkId
await dub.links.update("link_rWOKByP0bRMrstK8e4HPjprJ", {
  url: "https://www.google.uk", // new URL
});

// Update a link by its externalId
await dub.links.update("ext_12345", {
  url: "https://www.google.uk", // new URL
});

----------------------------------------

TITLE: Installing Dub Ruby SDK
DESCRIPTION: Command to install the Dub Ruby SDK using gem package manager.

LANGUAGE: bash
CODE:
gem install dub

----------------------------------------

TITLE: Retrieving Link Analytics
DESCRIPTION: Methods to retrieve analytics data for links using either linkId or externalId.

LANGUAGE: python
CODE:
# Retrieve the timeseries analytics for the last 7 days for a link
def analytics(request):
  res = d.analytics.retrieve(request={
    "link_id": "clx1gvi9o0005hf5momm6f7hj",
    "interval": "7d",
    "group_by": "timeseries",
  })

  return str(res)

----------------------------------------

TITLE: Enabling Conversion Tracking via Dub API in Python
DESCRIPTION: This snippet shows how to enable conversion tracking programmatically when creating a link using the Dub API in Python.

LANGUAGE: python
CODE:
link = d.links.create(url="https://dub.co", track_conversion=True)

----------------------------------------

TITLE: Upserting a Link with Dub TypeScript SDK in Remix
DESCRIPTION: This snippet demonstrates how to upsert a link using the Dub TypeScript SDK in a Remix loader function. Upserting creates a new link if it doesn't exist or updates an existing one.

LANGUAGE: typescript
CODE:
export const loader = async () => {
  try {
    const result = await dub.links.upsert({
      url: "https://www.google.com",
    });

    return json(result, 200);
  } catch (error: any) {
    console.error(error);
    return json(error, 400);
  }
};

----------------------------------------

TITLE: Displaying Lead Event Image in JSX
DESCRIPTION: React/JSX code snippet for rendering a lead event conversion diagram using the Frame component with an image element.

LANGUAGE: jsx
CODE:
<Frame>
  <img
    className="rounded-lg border border-gray-100"
    src="https://assets.dub.co/help/conversion-lead-event.png"
    alt="A diagram showing how lead events are tracked in the conversion funnel"
  />
</Frame>

----------------------------------------

TITLE: Enabling Conversion Tracking via Dub API in TypeScript
DESCRIPTION: This snippet demonstrates how to enable conversion tracking programmatically when creating a link using the Dub API in TypeScript.

LANGUAGE: typescript
CODE:
const link = await dub.links.create({
  url: "https://dub.co",
  trackConversion: true,
});

----------------------------------------

TITLE: Enabling Conversion Tracking via Dub API in Go
DESCRIPTION: This snippet illustrates how to enable conversion tracking programmatically when creating a link using the Dub API in Go.

LANGUAGE: go
CODE:
link, err := d.Links.Create(ctx, &dub.CreateLinkRequest{
    URL: "https://dub.co",
    TrackConversion: true,
})

----------------------------------------

TITLE: Installing Dub Analytics Script in WordPress Header
DESCRIPTION: Instructions for adding the @dub/analytics tracking script to a WordPress site's header.php file. The script should be placed in the header area to enable conversion tracking and campaign measurement functionality.

LANGUAGE: html
CODE:
<script src="https://www.dubcdn.com/analytics/script.js" defer></script>

----------------------------------------

TITLE: Workspace Response Structure in TypeScript
DESCRIPTION: This snippet shows the structure of the response returned by the dub.workspaces.get method. It includes details such as workspace ID, name, usage limits, and user information.

LANGUAGE: typescript
CODE:
{
  id: 'clv3mw4qb00008tvuw86c53db',
  name: 'Acme',
  slug: 'acme',
  logo: null,
  usage: 0,
  usageLimit: 1000,
  linksUsage: 0,
  linksLimit: 25,
  domainsLimit: 3,
  tagsLimit: 5,
  usersLimit: 1,
  plan: 'free',
  stripeId: null,
  billingCycleStart: 17,
  createdAt: '2024-04-17T09:52:27.635Z',
  users: [ { role: 'owner' } ],
  domains: []
}

----------------------------------------

TITLE: Enabling Conversion Tracking via Dub API in Ruby
DESCRIPTION: This snippet demonstrates how to enable conversion tracking programmatically when creating a link using the Dub API in Ruby.

LANGUAGE: ruby
CODE:
s.links.create_many(
  ::OpenApiSDK::Operations::CreateLinkRequest.new(
    url: "https://dub.co",
    track_conversion: true,
  )
)

----------------------------------------

TITLE: Installing Dub Analytics Script Tag
DESCRIPTION: Shows how to add the @dub/analytics tracking script to the HTML head section of a website. The script is loaded from the Dub CDN with defer attribute for optimal loading.

LANGUAGE: html
CODE:
<script src="https://www.dubcdn.com/analytics/script.js" defer />

----------------------------------------

TITLE: Defining PATCH endpoint for updating domains in Dub API (YAML)
DESCRIPTION: OpenAPI specification snippet defining the PATCH endpoint for updating domain details in the Dub API. It specifies the endpoint path with a slug parameter for the domain to be updated.

LANGUAGE: yaml
CODE:
openapi: patch /domains/{slug}

----------------------------------------

TITLE: Updating Workspace Properties with TypeScript SDK
DESCRIPTION: Examples of updating a workspace using either its slug or ID. The update method accepts an identifier and an object containing the properties to update, such as the workspace name.

LANGUAGE: typescript
CODE:
// Update a workspace by its slug
await dub.workspaces.update("acme", {
  name: "Acme Inc",
});

// Update a workspace by its ID
await dub.workspaces.update("ws_clv3mw4qb00008tvuw86c53db", {
  name: "Acme Inc",
});

LANGUAGE: typescript
CODE:
{
  id: 'clv3mw4qb00008tvuw86c53db',
  name: 'Acme',
  slug: 'acme',
  logo: null,
  usage: 0,
  usageLimit: 1000,
  linksUsage: 0,
  linksLimit: 25,
  domainsLimit: 3,
  tagsLimit: 5,
  usersLimit: 1,
  plan: 'free',
  stripeId: null,
  billingCycleStart: 17,
  createdAt: '2024-04-17T09:52:27.635Z',
  users: [ { role: 'owner' } ],
  domains: []
}

----------------------------------------

TITLE: Retrieving Link Analytics with Dub TypeScript SDK
DESCRIPTION: This snippet demonstrates how to retrieve analytics for a link using the Dub TypeScript SDK. It shows how to get timeseries analytics for the last 7 days for a specific link.

LANGUAGE: typescript
CODE:
import { ClicksTimeseries } from "dub/models/components";

// Retrieve the timeseries analytics for the last 7 days for a link
const response = await dub.analytics.retrieve({
  linkId: "clv3o9p9q000au1h0mc7r6l63",
  interval: "7d",
  groupBy: "timeseries",
});

const timeseries = response as ClicksTimeseries[];

----------------------------------------

TITLE: Response Structure for Tag Update in TypeScript
DESCRIPTION: This snippet shows the structure of the response returned by the dub.tags.update method. It includes the tag's ID, name, and color.

LANGUAGE: typescript
CODE:
{
  id: "clv3j1h7o00032u1ngo8luv84",
  name: "news",
  color: "blue"
}

----------------------------------------

TITLE: Injecting Dub Instance in Laravel Controller
DESCRIPTION: Example of injecting the Dub instance into a Laravel controller method.

LANGUAGE: php
CODE:
use Dub\Laravel\Dub;

class LinkController extends Controller {
  public function createLink(Dub $dub) {
    // Now you can use the SDK instance
    $dub->links->create(...);
  }
}

----------------------------------------

TITLE: Tracking Lead Events with TypeScript SDK
DESCRIPTION: Implementation of lead event tracking using Dub's TypeScript SDK. Demonstrates retrieving the dub_id cookie, sending a lead event with customer data, and cleaning up the cookie afterward.

LANGUAGE: typescript
CODE:
import { Dub } from "dub";

const dub = new Dub();

const dubId = req.cookies["dub_id"];
if (dubId) {
  await dub.track.lead({
    clickId: dubId,
    eventName: "Sign Up",
    externalId: customer.id,
    customerName: customer.name,
    customerEmail: customer.email,
    customerAvatar: customer.avatar,
  });
  // delete the dub_id cookie
  res.cookies.set("dub_id", "", {
    expires: new Date(0),
  });
}

----------------------------------------

TITLE: Retrieving Link Analytics by External ID with Dub TypeScript SDK
DESCRIPTION: This snippet shows how to retrieve analytics for a link using its external ID with the Dub TypeScript SDK. It demonstrates getting timeseries analytics for the last 7 days using the externalId field.

LANGUAGE: typescript
CODE:
import { ClicksTimeseries } from "dub/models/components";

// Retrieve the timeseries analytics for the last 7 days for a link
const response = await dub.analytics.retrieve({
  externalId: "ext_12345",
  interval: "7d",
  groupBy: "timeseries",
});

const timeseries = response as ClicksTimeseries[];

----------------------------------------

TITLE: Initializing Dub SDK in Laravel
DESCRIPTION: Create an instance of the Dub class with the configured API key.

LANGUAGE: php
CODE:
use Dub\Dub;
use Dub\Components\Security;

$dub = Dub::builder()->setSecurity(config('services.dub.api_key'))->build();

// create a link
$dub->links->create(...);

----------------------------------------

TITLE: Tracking Lead Events with Ruby SDK
DESCRIPTION: Implementation of lead event tracking using Dub's Ruby SDK. Shows configuration of the SDK with API key and handling of lead event tracking with cookie management.

LANGUAGE: ruby
CODE:
require 'dub'

dub = ::OpenApiSDK::Dub.new
dub.config_security(
  ::OpenApiSDK::Shared::Security.new(
    token: ENV['DUB_API_KEY']
  )
)

dub_id = cookies[:dub_id]
if dub_id
  req = ::OpenApiSDK::Operations::TrackLeadRequest.new(
    click_id: dub_id,
    event_name: 'Sign Up',
    external_id: customer.id,
    customer_name: customer.name,
    customer_email: customer.email,
    customer_avatar: customer.avatar
  )
  dub.track.lead(req)
  # delete the dub_id cookie
  cookies.delete(:dub_id)
end

----------------------------------------

TITLE: Retrieving Link Analytics by External ID with Dub TypeScript SDK
DESCRIPTION: This snippet shows how to retrieve analytics for a link using its external ID with the Dub TypeScript SDK. It demonstrates getting timeseries data for the last 7 days.

LANGUAGE: typescript
CODE:
// Retrieve the timeseries analytics for the last 7 days for a link
const response = await dub.analytics.retrieve({
  externalId: "ext_12345",
  interval: "7d",
  groupBy: "timeseries",
});

const timeseries = response as ClicksTimeseries[];

----------------------------------------

TITLE: Basic Dub CLI Commands
DESCRIPTION: Core commands for using Dub CLI including login, configuration, domain management, and link shortening.

LANGUAGE: bash
CODE:
dub login

LANGUAGE: bash
CODE:
dub config

LANGUAGE: bash
CODE:
dub domains

LANGUAGE: bash
CODE:
dub shorten

LANGUAGE: bash
CODE:
dub shorten [url] [key]

----------------------------------------

TITLE: Retrieving Link Analytics with Dub TypeScript SDK in Next.js
DESCRIPTION: This snippet demonstrates how to retrieve analytics for a link using the Dub TypeScript SDK. It shows how to get timeseries analytics for the last 7 days, using either the linkId or externalId.

LANGUAGE: typescript
CODE:
import { ClicksTimeseries } from "dub/models/components";

export async function GET() {
  try {
    // Retrieve the timeseries analytics for the last 7 days for a link
    const response = await dub.analytics.retrieve({
      linkId: "clv3o9p9q000au1h0mc7r6l63",
      interval: "7d",
      groupBy: "timeseries",
    });

    const timeseries = response as ClicksTimeseries[];

    return Response.json(timeseries);
  } catch (error) {
    return Response.json({ error }, { status: 500 });
  }
}

LANGUAGE: typescript
CODE:
// Retrieve the timeseries analytics for the last 7 days for a link
const response = await dub.analytics.retrieve({
  externalId: "ext_12345",
  interval: "7d",
  groupBy: "timeseries",
});

const timeseries = response as ClicksTimeseries[];

----------------------------------------

TITLE: OpenAPI YAML Specification for Link Update Endpoint
DESCRIPTION: YAML specification defining the PATCH endpoint for updating link details. Endpoint path includes a linkId parameter.

LANGUAGE: yaml
CODE:
openapi: patch /links/{linkId}

----------------------------------------

TITLE: Upserting a Link
DESCRIPTION: Example of upserting a link - updates if exists, creates if not.

LANGUAGE: go
CODE:
func main() {
	request := &operations.UpsertLinkRequestBody{
		URL: "https://google.com",
	}

	ctx := context.Background()
	res, err := d.Links.Upsert(ctx, request)
	if err != nil {
		log.Fatal(err)
	}
	if res.LinkSchema != nil {
		fmt.Println(res.LinkSchema.ShortLink)
	}
}

----------------------------------------

TITLE: Updating a Link with Dub TypeScript SDK in Next.js
DESCRIPTION: This snippet shows how to update an existing link using the Dub TypeScript SDK. It demonstrates two methods: updating by linkId and updating by externalId, allowing flexibility in link management.

LANGUAGE: typescript
CODE:
export async function PATCH() {
  try {
    // Update a link by its linkId
    const { shortLink } = await dub.links.update(
      "link_rWOKByP0bRMrstK8e4HPjprJ",
      {
        url: "https://www.google.uk", // new URL
      }
    );

    // Update a link by its externalId
    const { shortLink } = await dub.links.update("ext_12345", {
      url: "https://www.google.uk", // new URL
    });

    return Response.json({ shortLink });
  } catch (error) {
    return Response.json({ error }, { status: 500 });
  }
}

----------------------------------------

TITLE: Creating a Short Link with External ID in Next.js
DESCRIPTION: This snippet shows how to create a short link with an external ID using the Dub TypeScript SDK. The external ID is a unique identifier for the link in your own database, which can be used for later operations.

LANGUAGE: typescript
CODE:
export async function POST() {
  try {
    const link = await dub.links.create({
      url: "https://google.com",
      externalId: "12345",
    });

    return Response.json(link);
  } catch (error) {
    return Response.json({ error }, { status: 500 });
  }
}

----------------------------------------

TITLE: Deleting Customer with OpenAPI Specification for Dub API
DESCRIPTION: This OpenAPI specification defines the DELETE operation for removing a customer by their ID. It specifies the endpoint path /customers/{id} and the HTTP method DELETE.

LANGUAGE: openapi
CODE:
openapi: delete /customers/{id}

----------------------------------------

TITLE: Updating an Existing Link
DESCRIPTION: Example of updating an existing link using its linkId.

LANGUAGE: go
CODE:
func main() {
	request := &operations.UpdateLinkRequestBody{
		URL: "https://google.us",
	}

	ctx := context.Background()
	res, err := d.Links.Update(ctx, "clv3o9p9q000au1h0mc7r6l63", request)
	if err != nil {
		log.Fatal(err)
	}
	if res.LinkSchema != nil {
		fmt.Println(res.LinkSchema.ShortLink)
	}
}

----------------------------------------

TITLE: Implementing Site Visit Variant Analytics
DESCRIPTION: Implementation of the site visit tracking variant that includes first entry page tracking for SEO and Google Ads performance measurement.

LANGUAGE: typescript
CODE:
<DubAnalytics domainsConfig={{ site: "site.dub.co" }} />

LANGUAGE: html
CODE:
<script
  src="https://www.dubcdn.com/analytics/script.site-visit.js"
  data-domains='{"site": "site.dub.co"}'
/>

----------------------------------------

TITLE: Defining Workspace Response Fields using ResponseField and Expandable Components
DESCRIPTION: This code snippet defines the structure of a workspace response using custom components. It includes fields for workspace identification, usage metrics, plan details, and associated entities like users and domains.

LANGUAGE: markup
CODE:
<ResponseField name="id" type="string" required>
  The unique ID of the workspace.
</ResponseField>

<ResponseField name="name" type="string" required>
  The name of the workspace.
</ResponseField>

<ResponseField name="slug" type="string" required>
  The slug of the workspace.
</ResponseField>

<ResponseField name="logo" type="string | null" required>
  The logo of the workspace.
</ResponseField>

<ResponseField name="usage" type="number" required>
  The usage of the workspace.
</ResponseField>

<ResponseField name="usageLimit" type="number" required>
  The usage limit of the workspace.
</ResponseField>

<ResponseField name="linksUsage" type="number" required>
  The links usage of the workspace.
</ResponseField>

<ResponseField name="linksLimit" type="number" required>
  The links limit of the workspace.
</ResponseField>

<ResponseField name="domainsLimit" type="number" required>
  The domains limit of the workspace.
</ResponseField>

<ResponseField name="tagsLimit" type="number" required>
  The tags limit of the workspace.
</ResponseField>

<ResponseField name="usersLimit" type="number" required>
  The users limit of the workspace.
</ResponseField>

<ResponseField name="plan" type="string" required>
  The plan of the workspace.
</ResponseField>

<ResponseField name="stripeId" type="string | null" required>
  The Stripe ID of the workspace.
</ResponseField>

<ResponseField name="billingCycleStart" type="number" required>
  The date and time when the billing cycle starts for the workspace.
</ResponseField>

<ResponseField name="createdAt" type="string" required>
  The date and time when the workspace was created.
</ResponseField>

<ResponseField name="users" type="object[]" required>
The role of the authenticated user in the workspace.

  <Expandable title="properties">
    <ResponseField name="users.role" type="string" required>
      The role of the authenticated user in the workspace.
    </ResponseField>
  </Expandable>
</ResponseField>

<ResponseField name="domains" type="object[]" required>
The domains of the workspace.

  <Expandable title="properties">
    <ResponseField name="domains.slug" type="string">
      The domain of the workspace.
    </ResponseField>

    <ResponseField name="domains.primary" type="string">
      Indicates if the domain is the primary domain.
    </ResponseField>

  </Expandable>
</ResponseField>

----------------------------------------

TITLE: Retrieving Analytics for a Link with Dub PHP SDK
DESCRIPTION: Demonstrates how to retrieve analytics for a specific link, including setting interval and grouping options.

LANGUAGE: php
CODE:
use Dub\Models\Operations;

try {
    $request = new Operations\RetrieveAnalyticsRequest();
    $request->linkId = 'clmnr6jcc0005l308q9v56uz1';
    $request->interval = Operations\Interval::SevenD;
    $request->groupBy = Operations\GroupBy::Timeseries;

    $response = $dub->analytics->retrieve($request);

    if ($response->oneOf !== null) {
        // Handle the response
        print_r($response->oneOf);
    }
} catch (Throwable $e) {
    // handle exception
}

----------------------------------------

TITLE: Implementing Base Variant Analytics Script
DESCRIPTION: Basic implementation of Dub analytics with core features like dub_id detection and client-side click tracking. Available in both React and HTML implementations.

LANGUAGE: typescript
CODE:
<DubAnalytics />

LANGUAGE: html
CODE:
<script src="https://www.dubcdn.com/analytics/script.js"></script>

----------------------------------------

TITLE: Inserting Dub Analytics Script in HTML
DESCRIPTION: The script tag that needs to be added to the head section of a Framer site to enable Dub analytics tracking. The script is loaded with defer attribute to prevent blocking page rendering.

LANGUAGE: html
CODE:
<script src="https://www.dubcdn.com/analytics/script.js" defer></script>

----------------------------------------

TITLE: Installing Dub Ruby SDK
DESCRIPTION: Command to install the Dub Ruby SDK using gem package manager.

LANGUAGE: bash
CODE:
gem install dub

----------------------------------------

TITLE: Creating Links with External ID
DESCRIPTION: Creating a short link with an external ID for reference in your own database.

LANGUAGE: python
CODE:
def create_link(request):
  res = d.links.create(request={
    "url": "https://google.com",
    "external_id": "12345",
  })

  return JsonResponse({
    "short_link": res.short_link
  })

----------------------------------------

TITLE: Retrieving Link Analytics
DESCRIPTION: Example of retrieving analytics for a link with specified interval and grouping.

LANGUAGE: go
CODE:
func main() {
	request := operations.RetrieveAnalyticsRequest{
		LinkId: "clv3o9p9q000au1h0mc7r6l63",
		Interval: "7d",
		GroupBy: "timeseries"
	}

	ctx := context.Background()
	res, err := d.Analytics.Retrieve(ctx, request)
	if err != nil {
		log.Fatal(err)
	}
	if res.OneOf != nil {
		// handle response
	}
}

----------------------------------------

TITLE: Retrieving a Link by External ID in Dub
DESCRIPTION: This snippet shows how to retrieve a link by its external ID in Dub. This is useful when you need to fetch link information using your system's unique identifier.

LANGUAGE: javascript
CODE:
import { Dub } from "dub";

export const dub = new Dub({
  token: process.env.DUB_API_KEY,
});

const link = await dub.links.get({
  externalId: "12345",
});

LANGUAGE: go
CODE:
package main

import(
  "context"
  dubgo "github.com/dubinc/dub-go"
  "github.com/dubinc/dub-go/models/operations"
  "log"
  "os"
)

func main() {
  ctx := context.Background()

  s := dubgo.New(
    dubgo.WithSecurity(os.Getenv("DUB_API_KEY")),
  )

  res, err := s.Links.Get(ctx, operations.GetLinkInfoRequest{
    ExternalID: dubgo.String("12345"),
  })
}

LANGUAGE: python
CODE:
import os
import dub
from dub.models import operations

d = dub.Dub(
  token=os.environ['DUB_API_KEY'],
)

res = d.links.get(request={
  "external_id": "12345",
})

LANGUAGE: ruby
CODE:
require 'dub'

s = ::OpenApiSDK::Dub.new
s.config_security(
  ::OpenApiSDK::Shared::Security.new(
    token: "DUB_API_KEY",
  )
)

req = ::OpenApiSDK::Operations::GetLinkInfoRequest.new(
  external_id: "12345",
)

res = s.links.get(req)

LANGUAGE: php
CODE:
declare(strict_types=1);

require 'vendor/autoload.php';

use Dub;
use Dub\Models\Operations;

$sdk = Dub\Dub::builder()->setSecurity('DUB_API_KEY')->build();

$response = $sdk->links->get(
  externalId: '12345'
);

LANGUAGE: bash
CODE:
curl --request GET \
  --url https://api.dub.co/links/info?external_id=12345 \
  --header 'Authorization: Bearer <token>' \
  --header 'Content-Type: application/json'

----------------------------------------

TITLE: Configuring Cookie Expiration in Dub Analytics Script (HTML)
DESCRIPTION: This snippet demonstrates how to set a custom cookie expiration time of 60 days for the Dub analytics script using the data-cookie-options attribute.

LANGUAGE: html
CODE:
<script
  src="https://www.dubcdn.com/analytics/script.js"
  defer
  data-cookie-options='{"expiresInDays": 60}'
/>

----------------------------------------

TITLE: Upserting Links with Dub
DESCRIPTION: Django view function to upsert a link - creates new or updates existing.

LANGUAGE: python
CODE:
def upsert_link(request):
  res = d.links.upsert(request={
    "url": "https://google.com",
  })

  return JsonResponse({
    "short_link": res.short_link
  })

----------------------------------------

TITLE: Creating Short Links with Dub
DESCRIPTION: Django view function to create a new short link using the Dub SDK.

LANGUAGE: python
CODE:
def create_link(request):
  res = d.links.create(request={
    "url": "https://google.com",
  })

  return JsonResponse({
    "short_link": res.short_link
  })

----------------------------------------

TITLE: Tracking Sale Event with Dub SDK in TypeScript
DESCRIPTION: This snippet demonstrates how to track a sale event using the Dub SDK in TypeScript. It includes creating a Dub instance and calling the track.sale method with relevant sale information.

LANGUAGE: typescript
CODE:
import { Dub } from "dub";

const dub = new Dub();

await dub.track.sale({
  externalId: "cus_RBfbD57HDzPKpduI8elr5qHA",
  amount: 100,
  paymentProcessor: "stripe",
  eventName: "E-book purchase",
  invoiceId: "123456",
  currency: "usd",
});

----------------------------------------

TITLE: Creating a Link with External ID
DESCRIPTION: Create a short link with an external ID for database association.

LANGUAGE: ruby
CODE:
req = ::OpenApiSDK::Operations::CreateLinkRequest.new(
  request_body: ::OpenApiSDK::Operations::CreateLinkRequestBody.new(
    url: "https://google.com",
    external_id: "12345"
  )
)

res = dub.links.create(req)

puts res.raw_response.body

----------------------------------------

TITLE: Retrieving Link Analytics with Dub TypeScript SDK in Nuxt
DESCRIPTION: This snippet shows how to retrieve analytics for a link using the Dub TypeScript SDK in a Nuxt server API route. It demonstrates retrieving timeseries analytics for the last 7 days using both linkId and externalId.

LANGUAGE: typescript
CODE:
import { ClicksTimeseries } from "dub/models/components";

export default defineEventHandler(async () => {
  try {
    // Retrieve the timeseries analytics for the last 7 days for a link
    const response = await dub.analytics.retrieve({
      linkId: "clv3o9p9q000au1h0mc7r6l63",
      interval: "7d",
      groupBy: "timeseries",
    });

    const timeseries = response as ClicksTimeseries[];

    return timeseries;
  } catch (error) {
    console.error(error);
    return error;
  }
});

LANGUAGE: typescript
CODE:
// Retrieve the timeseries analytics for the last 7 days for a link
const response = await dub.analytics.retrieve({
  externalId: "ext_12345",
  interval: "7d",
  groupBy: "timeseries",
});

const timeseries = response as ClicksTimeseries[];

----------------------------------------

TITLE: Creating a Short Link with Dub TypeScript SDK in Nuxt
DESCRIPTION: This snippet demonstrates how to create a short link using the Dub TypeScript SDK in a Nuxt server API route. It includes an optional example of passing an externalId for link association.

LANGUAGE: typescript
CODE:
export default defineEventHandler(async () => {
  try {
    const result = await dub.links.create({
      url: "https://www.google.com",
    });

    return result;
  } catch (error) {
    console.error(error);
    return error;
  }
});

LANGUAGE: typescript
CODE:
export default defineEventHandler(async () => {
  try {
    const result = await dub.links.create({
      url: "https://www.google.com",
      externalId: "12345",
    });

    return result;
  } catch (error) {
    console.error(error);
    return error;
  }
});

----------------------------------------

TITLE: Sample Payload for link.clicked Event in JSON
DESCRIPTION: This snippet shows an example payload for the 'link.clicked' event, which is triggered when a user clicks on a link. It includes detailed information about the click event and the associated link.

LANGUAGE: json
CODE:
{
  "id": "evt_b9ywgxWqai2glUpCQjclB17kM",
  "event": "link.clicked",
  "createdAt": "2024-08-30T10:16:13.149Z",
  "data": {
    "click": {
      "timestamp": "2024-08-30T10:16:12.124Z",
      "clickId": "d0UtZqE0BZuBPrJS",
      "url": "https://github.com/dubinc/dub",
      "ip": "63.141.57.109",
      "continent": "NA",
      "country": "US",
      "city": "San Francisco",
      "device": "Desktop",
      "browser": "Chrome",
      "os": "Mac OS",
      "ua": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36",
      "bot": false,
      "qr": false,
      "referer": "(direct)"
    },
    "link": {
      "id": "cm0faqkyn0001txvfwjfeq7gl",
      "domain": "dub.sh",
      "key": "79ys3WA",
      "externalId": null,
      "url": "https://github.com/dubinc/dub",
      "trackConversion": true,
      "archived": false,
      "expiresAt": null,
      "expiredUrl": null,
      "password": null,
      "proxy": false,
      "title": null,
      "description": null,
      "image": null,
      "video": null,
      "rewrite": false,
      "doIndex": false,
      "ios": null,
      "android": null,
      "geo": null,
      "publicStats": false,
      "comments": null,
      "shortLink": "https://dub.sh/79ys3WA",
      "qrCode": "https://api.dub.co/qr?url=https://dub.sh/79ys3WA?qr=1",
      "utm_source": null,
      "utm_medium": null,
      "utm_campaign": null,
      "utm_term": null,
      "utm_content": null,
      "userId": "cm022rkcw0000ikt14mscg9sg",
      "workspaceId": "ws_cm022sis60003ikt1syy7kfhl",
      "clicks": 11,
      "lastClicked": "2024-08-30T07:45:09.000Z",
      "leads": 6,
      "sales": 10,
      "saleAmount": 200000,
      "createdAt": "2024-08-29T13:03:59.098Z",
      "updatedAt": "2024-08-30T10:16:12.126Z"
    }
  }
}

----------------------------------------

TITLE: Retrieving Link Analytics
DESCRIPTION: Retrieve analytics for a link with specified interval and grouping parameters.

LANGUAGE: ruby
CODE:
req = ::OpenApiSDK::Operations::RetrieveAnalyticsRequest.new(
  link_id: "clmnr6jcc0005l308q9v56uz1",
  interval: ::OpenApiSDK::Operations::Interval::SEVEND,
  group_by: ::OpenApiSDK::Operations::GroupBy::TIMESERIES
)

res = dub.analytics.retrieve(req)

puts res.raw_response.body

----------------------------------------

TITLE: Tracking Sale Event with Dub SDK in PHP
DESCRIPTION: This snippet demonstrates how to track a sale event using the Dub SDK in PHP. It includes requiring the autoloader, using the Dub namespace, creating a Dub instance with an API key, and calling the track->sale method with sale information.

LANGUAGE: php
CODE:
<?php

require 'vendor/autoload.php';

use Dub\Dub;
use Dub\Models\Operations;

$dub = Dub::builder()->setSecurity($_ENV["DUB_API_KEY"])->build();

$request = new Operations\TrackSaleRequest();
$request->externalId = 'cus_RBfbD57HDzPKpduI8elr5qHA';
$request->amount = 100;
$request->paymentProcessor = 'stripe';
$request->eventName = 'E-book purchase';
$request->invoiceId = '123456';
$request->currency = 'usd';

$dub->track->sale($request);

----------------------------------------

TITLE: Tracking Sale Event with Dub SDK in Go
DESCRIPTION: This snippet demonstrates tracking a sale event using the Dub SDK in Go. It includes importing the necessary packages, creating a Dub client with an API key, and calling the Track.Sale method with sale information.

LANGUAGE: go
CODE:
package main

import (
    "context"
    dub "github.com/dubinc/dub-go"
)

d := dub.New(
    dub.WithSecurity(os.Getenv("DUB_API_KEY")),
)

_, err := d.Track.Sale(context.Background(), &operations.TrackSaleRequest{
    ExternalId:       "cus_RBfbD57HDzPKpduI8elr5qHA",
    Amount:          100,
    PaymentProcessor: "stripe",
    EventName:       "E-book purchase",
    InvoiceId:       "123456",
    Currency:        "usd",
})

----------------------------------------

TITLE: Rendering Integration Cards in JSX
DESCRIPTION: This code snippet renders a group of cards using JSX, providing links and information about the Dub and Zapier integration. It includes logos and links to view the integration on both platforms.

LANGUAGE: jsx
CODE:
<CardGroup cols={2}>
  <Card
    title="View on Dub"
    icon={
      <div className="h-8 w-8">
        <img
          src="https://assets.dub.co/logo.png"
          alt="Dub logo"
          className="h-full w-full"
        />
      </div>
    }
    href="https://app.dub.co/integrations/zapier"
  >
    Opens the integration page on Dub
  </Card>
  <Card
    title="View on Zapier"
    icon={
      <div className="h-8 w-8">
        <img
          src="https://dubassets.com/integrations/clzlmz336000fjeqynwhfv8vo_S4yz4ak"
          alt="Zapier logo"
          className="h-full w-full rounded-full"
        />
      </div>
    }
    href="https://d.to/zapier"
  >
    Opens the integration page on Zapier
  </Card>
</CardGroup>

----------------------------------------

TITLE: Retrieving Link Analytics
DESCRIPTION: Implementation of analytics retrieval for links using the Dub SDK. Shows how to fetch timeseries analytics data with various parameters.

LANGUAGE: typescript
CODE:
import { ClicksTimeseries } from "dub/models/components";

app.get("/analytics", async (req: Request, res: Response) => {
  try {
    // Retrieve the timeseries analytics for the last 7 days for a link
    const response = await dub.analytics.retrieve({
      linkId: "clv3o9p9q000au1h0mc7r6l63",
      interval: "7d",
      groupBy: "timeseries",
    });

    const timeseries = response as ClicksTimeseries[];

    res.status(200).json(timeseries);
  } catch (error: any) {
    res.status(400).json(error);
  }
});

----------------------------------------

TITLE: OAuth Token Response Format
DESCRIPTION: JSON response structure received after successful token exchange, containing access_token, refresh_token, token_type, expires_in and scope.

LANGUAGE: json
CODE:
{
  "access_token": "dub_access_token_ae8ebf6f97e6200d886ef48a5...",
  "refresh_token": "7f5acfbe14bca0a20fe6e430ddb7bb494eed160bd...",
  "token_type": "Bearer",
  "expires_in": 7200,
  "scope": "links.write tags.write domains.read"
}

----------------------------------------

TITLE: Configuring Dub Service in Laravel config/services.php
DESCRIPTION: Add Dub configuration to the Laravel services configuration file.

LANGUAGE: php
CODE:
'dub' => [
  'api_key' => env('DUB_API_KEY'),
],

----------------------------------------

TITLE: Installing Dub Python SDK
DESCRIPTION: Command to install the Dub Python SDK package using pip package manager.

LANGUAGE: bash
CODE:
pip install dub

----------------------------------------

TITLE: OAuth Authorization URL Example
DESCRIPTION: Example URL format for initiating OAuth authorization flow with required parameters including client_id, redirect_uri, response_type, scope and state.

LANGUAGE: http
CODE:
GET https://app.dub.co/oauth/authorize?client_id=YOUR_CLIENT_ID&redirect_uri=YOUR_REDIRECT_URI&response_type=code&scope=SOME_SCOPE&state=SOME_STATE

----------------------------------------

TITLE: Retrieving Paginated Links with cURL
DESCRIPTION: Example of how to make a paginated API request using cURL to retrieve 10 links from the first page. Requires an authorization token.

LANGUAGE: bash
CODE:
curl --request GET \
  --url https://api.dub.co/links?page=1&pageSize=10 \
  --header 'Authorization: Bearer <token>'

----------------------------------------

TITLE: Setting Up Environment Variables
DESCRIPTION: Command to copy the example environment variables file to create a new .env file

LANGUAGE: bash
CODE:
cp ./apps/web/.env.example .env

----------------------------------------

TITLE: Creating Basic Short Link
DESCRIPTION: Basic implementation of creating a short link using the Dub SDK.

LANGUAGE: python
CODE:
def create_link():
  res = d.links.create(request={
    "url": "https://google.com",
  })

  return res.short_link

----------------------------------------

TITLE: Paginated API Request in TypeScript
DESCRIPTION: TypeScript implementation for retrieving paginated links using the Dub SDK. Demonstrates how to specify page number and page size.

LANGUAGE: typescript
CODE:
const res = await dub.links.list({
  page: 1,
  pageSize: 10,
});

----------------------------------------

TITLE: Sample Payload for link.deleted Event in JSON
DESCRIPTION: This snippet showcases an example payload for the 'link.deleted' event, which is triggered when a link is deleted in a Dub workspace. It includes details of the deleted link.

LANGUAGE: json
CODE:
{
  "id": "evt_KleiO4HBwZFbO1vZLWIPZ2AtX",
  "event": "link.deleted",
  "createdAt": "2024-08-26T16:41:52.346Z",
  "data": {
    "id": "cm0b87844000dismqhkviju54",
    "domain": "dub.sh",
    "key": "sOvvXDT",
    "externalId": null,
    "url": "https://github.com/stack-auth/stack",
    "trackConversion": false,
    "archived": false,
    "expiresAt": null,
    "expiredUrl": null,
    "password": null,
    "proxy": false,
    "title": null,
    "description": null,
    "image": null,
    "video": null,
    "rewrite": false,
    "doIndex": false,
    "ios": null,
    "android": null,
    "geo": null,
    "publicStats": false,
    "tagId": null,
    "tags": [],
    "comments": null,
    "shortLink": "https://dub.sh/sOvvXDT",
    "qrCode": "https://api.dub.co/qr?url=https://dub.sh/sOvvXDT?qr=1",
    "utm_source": null,
    "utm_medium": null,
    "utm_campaign": null,
    "utm_term": null,
    "utm_content": null,
    "userId": "cm022rkcw0000ikt14mscg9sg",
    "workspaceId": "ws_cm022sis60003ikt1syy7kfhl",
    "clicks": 0,
    "lastClicked": null,
    "leads": 0,
    "sales": 0,
    "saleAmount": 0,
    "createdAt": "2024-08-26T16:41:52.084Z",
    "updatedAt": "2024-08-26T16:41:52.084Z",
    "projectId": "cm022sis60003ikt1syy7kfhl"
  }
}

----------------------------------------

TITLE: Starting Ngrok Tunnel
DESCRIPTION: Command to start an Ngrok tunnel for exposing the local server to the internet, required for Qstash-powered background jobs

LANGUAGE: bash
CODE:
ngrok http 8888

----------------------------------------

TITLE: Creating Link with External ID
DESCRIPTION: Creating a short link with an external ID for database association.

LANGUAGE: python
CODE:
def create_link(request):
  res = d.links.create(request={
    "url": "https://google.com",
    "external_id": "12345",
  })

  return res.short_link

----------------------------------------

TITLE: Sample Payload for lead.created Event in JSON
DESCRIPTION: This snippet presents an example payload for the 'lead.created' event, triggered when a new lead is created via Dub Conversions. It includes details about the event, customer, click, and associated link.

LANGUAGE: json
CODE:
{
  "id": "evt_P343bmyae40ALQYr5HT4vRXRd",
  "event": "lead.created",
  "createdAt": "2024-08-30T09:53:50.343Z",
  "data": {
    "eventName": "Sign up",
    "customer": {
      "id": "oU5P0SqI8fpwx5bxw1",
      "name": "John",
      "email": "john@example.com",
      "avatar": "https://example.com/john.jpeg"
    },
    "click": {
      "id": "d0UtZqE0BZuBPrJS",
      "url": "https://github.com/dubinc/dub",
      "ip": "63.141.57.109",
      "continent": "NA",
      "country": "US",
      "city": "San Francisco",
      "device": "Desktop",
      "browser": "Chrome",
      "os": "Mac OS",
      "ua": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36",
      "bot": false,
      "qr": false,
      "referer": "(direct)"
    },
    "link": {
      "id": "cm0faqkyn0001txvfwjfeq7gl",
      "domain": "dub.sh",
      "key": "79ys3WA",
      "externalId": null,
      "url": "https://github.com/dubinc/dub",
      "trackConversion": true,
      "archived": false,
      "expiresAt": null,
      "expiredUrl": null,
      "password": null,
      "proxy": false,
      "title": null,
      "description": null,
      "image": null,
      "video": null,
      "rewrite": false,
      "doIndex": false,
      "ios": null,
      "android": null,
      "geo": null,
      "publicStats": false,
      "comments": null,
      "shortLink": "https://dub.sh/79ys3WA",
      "qrCode": "https://api.dub.co/qr?url=https://dub.sh/79ys3WA?qr=1",
      "utm_source": null,
      "utm_medium": null,
      "utm_campaign": null,
      "utm_term": null,
      "utm_content": null,
      "userId": "cm022rkcw0000ikt14mscg9sg",
      "workspaceId": "ws_cm022sis60003ikt1syy7kfhl",
      "clicks": 10,
      "lastClicked": "2024-08-30T07:45:09.000Z",
      "leads": 5,
      "sales": 0,
      "saleAmount": 0,
      "createdAt": "2024-08-29T13:03:59.098Z",
      "updatedAt": "2024-08-30T09:53:49.505Z"
    }
  }
}

----------------------------------------

TITLE: Database Setup Commands
DESCRIPTION: Commands for starting Docker Compose stack and setting up the Prisma database

LANGUAGE: bash
CODE:
docker-compose up
pnpm run prisma:generate
pnpm run prisma:push

----------------------------------------

TITLE: Initializing Dub SDK in Rails Controller
DESCRIPTION: Setup code to initialize the Dub Ruby SDK in a Rails controller with API key configuration.

LANGUAGE: ruby
CODE:
class LinksController < ApplicationController
  require 'dub'

  before_action :initialize_dub

  def initialize_dub
    @dub = ::OpenApiSDK::Dub.new
    @dub.config_security(
      ::OpenApiSDK::Shared::Security.new(
        token: ENV['DUB_API_KEY']
      )
    )
  end
end

----------------------------------------

TITLE: Sample Payload for link.updated Event in JSON
DESCRIPTION: This snippet illustrates an example payload for the 'link.updated' event, which is triggered when a link is updated in a Dub workspace. It contains the updated link's details.

LANGUAGE: json
CODE:
{
  "id": "event_KleiO4HBwZFbO1vZLWIPZ2AtX",
  "event": "link.updated",
  "createdAt": "2024-08-26T16:41:52.346Z",
  "data": {
    "id": "cm0b87844000dismqhkviju54",
    "domain": "dub.sh",
    "key": "sOvvXDT",
    "externalId": null,
    "url": "https://github.com/stack-auth/stack",
    "trackConversion": false,
    "archived": false,
    "expiresAt": null,
    "expiredUrl": null,
    "password": null,
    "proxy": false,
    "title": null,
    "description": null,
    "image": null,
    "video": null,
    "rewrite": false,
    "doIndex": false,
    "ios": null,
    "android": null,
    "geo": null,
    "publicStats": false,
    "tagId": null,
    "tags": [],
    "comments": null,
    "shortLink": "https://dub.sh/sOvvXDT",
    "qrCode": "https://api.dub.co/qr?url=https://dub.sh/sOvvXDT?qr=1",
    "utm_source": null,
    "utm_medium": null,
    "utm_campaign": null,
    "utm_term": null,
    "utm_content": null,
    "userId": "cm022rkcw0000ikt14mscg9sg",
    "workspaceId": "ws_cm022sis60003ikt1syy7kfhl",
    "clicks": 0,
    "lastClicked": null,
    "leads": 0,
    "sales": 0,
    "saleAmount": 0,
    "createdAt": "2024-08-26T16:41:52.084Z",
    "updatedAt": "2024-08-26T16:41:52.084Z",
    "projectId": "cm022sis60003ikt1syy7kfhl"
  }
}

----------------------------------------

TITLE: Sample Payload for link.created Event in JSON
DESCRIPTION: This snippet shows an example payload for the 'link.created' event, which is triggered when a new link is created in a Dub workspace. It includes detailed information about the created link.

LANGUAGE: json
CODE:
{
  "id": "evt_KleiO4HBwZFbO1vZLWIPZ2AtX",
  "event": "link.created",
  "createdAt": "2024-08-26T16:41:52.346Z",
  "data": {
    "id": "cm0b87844000dismqhkviju54",
    "domain": "dub.sh",
    "key": "sOvvXDT",
    "externalId": null,
    "url": "https://github.com/stack-auth/stack",
    "trackConversion": false,
    "archived": false,
    "expiresAt": null,
    "expiredUrl": null,
    "password": null,
    "proxy": false,
    "title": null,
    "description": null,
    "image": null,
    "video": null,
    "rewrite": false,
    "doIndex": false,
    "ios": null,
    "android": null,
    "geo": null,
    "publicStats": false,
    "tagId": null,
    "tags": [],
    "comments": null,
    "shortLink": "https://dub.sh/sOvvXDT",
    "qrCode": "https://api.dub.co/qr?url=https://dub.sh/sOvvXDT?qr=1",
    "utm_source": null,
    "utm_medium": null,
    "utm_campaign": null,
    "utm_term": null,
    "utm_content": null,
    "userId": "cm022rkcw0000ikt14mscg9sg",
    "workspaceId": "ws_cm022sis60003ikt1syy7kfhl",
    "clicks": 0,
    "lastClicked": null,
    "leads": 0,
    "sales": 0,
    "saleAmount": 0,
    "createdAt": "2024-08-26T16:41:52.084Z",
    "updatedAt": "2024-08-26T16:41:52.084Z",
    "projectId": "cm022sis60003ikt1syy7kfhl"
  }
}

----------------------------------------

TITLE: Updating a Tag with Dub in TypeScript
DESCRIPTION: This snippet demonstrates how to update a tag using the dub.tags.update method. It requires the tag ID, new name, and color as parameters. The method returns the updated tag object.

LANGUAGE: typescript
CODE:
await dub.tags.update("cluibmjj5000975qol4hnx0t7", {
  name: "Jobs",
  color: "red",
});

----------------------------------------

TITLE: Creating a Basic Link with Dub SDK
DESCRIPTION: Example of creating a basic short link using the Dub Ruby SDK.

LANGUAGE: ruby
CODE:
def create
  req = ::OpenApiSDK::Operations::CreateLinkRequest.new(
    request_body: ::OpenApiSDK::Operations::CreateLinkRequestBody.new(
      url: 'https://google.com'
    )
  )

  res = @dub.links.create(req)

  render json: res.raw_response.body
end

----------------------------------------

TITLE: Retrieving Top Links Data with Dub API in Node.js
DESCRIPTION: This example illustrates how to use the Dub API to fetch data for top-performing links over a 30-day interval. It requires the Dub API key and a Pro plan subscription or higher.

LANGUAGE: javascript
CODE:
import { Dub } from "dub";

export const dub = new Dub({
  token: process.env.DUB_API_KEY,
});

const result = await dub.analytics.retrieve({
  event: "clicks",
  groupBy: "top_links",
  linkId: "clux0rgak00011...",
  interval: "30d",
});

----------------------------------------

TITLE: Tracking Lead Events with Go SDK
DESCRIPTION: Implementation of lead event tracking using Dub's Go SDK. Demonstrates cookie handling, lead event tracking with the Dub API, and cookie cleanup in Go.

LANGUAGE: go
CODE:
package main

import (
    "context"
    dub "github.com/dubinc/dub-go"
    "net/http"
)

d := dub.New(
    dub.WithSecurity(os.Getenv("DUB_API_KEY")),
)

dubId, err := r.Cookie("dub_id")
if err == nil {
    _, err = d.Track.Lead(context.Background(), &operations.TrackLeadRequest{
        ClickId:         dubId.Value,
        EventName:       "Sign Up",
        ExternalId:      customer.ID,
        CustomerName:    customer.Name,
        CustomerEmail:   customer.Email,
        CustomerAvatar:  customer.Avatar,
    })
    // delete the dub_id cookie
    http.SetCookie(w, &http.Cookie{
        Name:    "dub_id",
        Value:   "",
        Expires: time.Unix(0, 0),
    })
}

----------------------------------------

TITLE: Retrieving Link Info with OpenAPI GET Endpoint
DESCRIPTION: OpenAPI endpoint specification for retrieving link information. Supports querying via domain+key pair, linkId, or externalId query parameters.

LANGUAGE: openapi
CODE:
openapi: get /links/info

----------------------------------------

TITLE: Upserting Links with Dub SDK
DESCRIPTION: Method to upsert a link, which either updates an existing link or creates a new one.

LANGUAGE: ruby
CODE:
def upsert
  req = ::OpenApiSDK::Operations::UpsertLinkRequest.new(
    request_body: ::OpenApiSDK::Operations::UpsertLinkRequestBody.new(
      url: "https://google.com",
    ),
  )

  res = @dub.links.upsert(req)

  render json: res.raw_response.body
end

----------------------------------------

TITLE: Displaying Error Response Structure in JSON
DESCRIPTION: This snippet shows the structure of an error response from the Dub API. It includes an error object with a code, message, and documentation URL.

LANGUAGE: json
CODE:
{
  "error": {
    "code": "not_found",
    "message": "The requested resource was not found.",
    "doc_url": "https://dub.co/docs/api-reference/errors#not-found"
  }
}

----------------------------------------

TITLE: Defining Tag Response Fields with JSX Components
DESCRIPTION: This snippet defines three response fields for a tag using custom ResponseField components. It includes the tag's unique ID, name, and color, all of which are required string fields.

LANGUAGE: jsx
CODE:
<ResponseField name="id" type="string" required>
  The unique ID of the tag.
</ResponseField>

<ResponseField name="name" type="string" required>
  The name of the tag.
</ResponseField>

<ResponseField name="color" type="string" required>
  The color of the tag.
</ResponseField>

----------------------------------------

TITLE: Configuring Dub API Key in Laravel .env File
DESCRIPTION: Add the Dub API key to the Laravel .env file for secure configuration.

LANGUAGE: bash
CODE:
DUB_API_KEY=your_api_key

----------------------------------------

TITLE: Delete Link OpenAPI Endpoint Definition
DESCRIPTION: OpenAPI specification defining the DELETE endpoint for removing a specific link by its ID from the Dub platform.

LANGUAGE: openapi
CODE:
openapi: delete /links/{linkId}

----------------------------------------

TITLE: OpenAPI PUT Endpoint for Partner Links Upsert
DESCRIPTION: OpenAPI specification defining the PUT endpoint for upserting partner links.

LANGUAGE: yaml
CODE:
openapi: put /partners/links/upsert

----------------------------------------

TITLE: Python Pagination Implementation
DESCRIPTION: Example showing how to retrieve paginated links using the Python SDK. Uses a request dictionary to specify pagination parameters.

LANGUAGE: python
CODE:
res = s.links.list(request={
  "page": 1,
  "page_size": 10,
})

----------------------------------------

TITLE: Registering Dub Service in Laravel Service Container
DESCRIPTION: Add Dub to the Laravel service container for dependency injection.

LANGUAGE: php
CODE:
$this->app->bind(Dub::class, function ($app) {
  return Dub::builder()->setSecurity($app['config']->get('services.dub.api_key'))->build();
});

----------------------------------------

TITLE: Configuring Supabase Lead Tracking in Next.js App Router
DESCRIPTION: This code snippet demonstrates how to configure Supabase to track lead conversion events in the auth callback function using Next.js App Router. It checks for new user sign-ups, sends lead events to Dub, and manages the dub_id cookie.

LANGUAGE: typescript
CODE:
// app/api/auth/callback/route.ts
import { cookies } from "next/headers";
import { NextResponse } from "next/server";
import { createClient } from "@/lib/supabase/server";
import { waitUntil } from "@vercel/functions";
import { dub } from "@/lib/dub";

export async function GET(request: Request) {
  const { searchParams, origin } = new URL(request.url);
  const code = searchParams.get("code");
  // if "next" is in param, use it as the redirect URL
  const next = searchParams.get("next") ?? "/";

  if (code) {
    const supabase = createClient(cookies());
    const { data, error } = await supabase.auth.exchangeCodeForSession(code);
    if (!error) {
      const { user } = data;
      const dub_id = cookies().get("dub_id")?.value;
      // if the user is created in the last 10 minutes, consider them new
      const isNewUser =
        new Date(user.created_at) > new Date(Date.now() - 10 * 60 * 1000);
      // if the user is new and has a dub_id cookie, track the lead
      if (dub_id && isNewUser) {
        waitUntil(
          dub.track.lead({
            clickId: dub_id,
            eventName: "Sign Up",
            externalId: user.id,
            customerName: user.user_metadata.name,
            customerEmail: user.email,
            customerAvatar: user.user_metadata.avatar_url,
          })
        );
        // delete the clickId cookie
        cookies().delete("dub_id");
      }
      return NextResponse.redirect(`${origin}${next}`);
    }
  }

  // return the user to an error page with instructions
  return NextResponse.redirect(`${origin}/auth/auth-code-error`);
}

----------------------------------------

TITLE: Implementing Auth0 Lead Tracking with Next.js
DESCRIPTION: Auth0 callback handler implementation that tracks new user sign-ups as lead conversion events in Dub. The code checks for new users, processes the dub_id cookie, sends lead tracking data, and manages cookie cleanup.

LANGUAGE: typescript
CODE:
import { handleAuth, handleCallback, type Session } from "@auth0/nextjs-auth0";
import { cookies } from "next/headers";
import { dub } from "@/lib/dub";

const afterCallback = async (req: Request, session: Session) => {
  const userExists = await getUser(session.user.email);

  if (!userExists) {
    createUser(session.user);
    // check if dub_id cookie is present
    const clickId = cookies().get("dub_id")?.value;
    if (clickId) {
      // send lead event to Dub
      await dub.track.lead({
        clickId,
        eventName: "Sign Up",
        externalId: session.user.id,
        customerName: session.user.name,
        customerEmail: session.user.email,
        customerAvatar: session.user.image,
      });
      // delete the dub_id cookie
      cookies().set("dub_id", "", {
        expires: new Date(0),
      });
    }
    return session;
  }
};

export default handleAuth({
  callback: handleCallback({ afterCallback }),
});

----------------------------------------

TITLE: Retrieving Analytics for a Link with Dub Laravel SDK
DESCRIPTION: Example of retrieving analytics for a link using the Dub Laravel SDK.

LANGUAGE: php
CODE:
use Dub\Models\Operations;

class LinkController extends Controller
{
    public function retrieveAnalytics()
    {
        $dub = new Dub();

        try {
            $request = new Operations\RetrieveAnalyticsRequest();
            $request->linkId = 'clmnr6jcc0005l308q9v56uz1';
            $request->interval = Operations\Interval::SevenD;
            $request->groupBy = Operations\GroupBy::Timeseries;

            $response = $dub->analytics->retrieve($request);

            if ($response->oneOf !== null) {
                // Handle the response
                print_r($response->oneOf);
            }
        } catch (Throwable $e) {
            // handle exception
        }
    }
}

----------------------------------------

TITLE: Upserting a Link with Dub Laravel SDK
DESCRIPTION: Example of upserting a link (create or update) using the Dub Laravel SDK.

LANGUAGE: php
CODE:
use Dub\Models\Operations;

class LinkController extends Controller
{
    public function upsertLink()
    {
        $dub = new Dub();

        try {
            $request = new Operations\UpsertLinkRequestBody(
                url: 'https://google.com'
            );

            $response = $dub->links->upsert($request);

            if ($response->linkSchema !== null) {
                // handle response
            }
        } catch (Throwable $e) {
            // handle exception
        }
    }
}

----------------------------------------

TITLE: Creating NextAuth.js Route Handler (Pages Router)
DESCRIPTION: This snippet shows how to create a NextAuth.js route handler for the Pages Router in Next.js. It imports the getOptions function and uses NextAuth to create a handler for NextAuth.js routes.

LANGUAGE: typescript
CODE:
// pages/api/auth/[...nextauth]/index.ts
import type { NextApiRequest, NextApiResponse } from "next";
import NextAuth from "next-auth";
import { getOptions } from "./options";

const handler = (req: NextApiRequest, res: NextApiResponse) =>
  NextAuth(req, res, getOptions(req));

export default handler;

----------------------------------------

TITLE: Retrieving Tags List using dub.tags.list in TypeScript
DESCRIPTION: This code snippet demonstrates how to use the 'dub.tags.list' function to retrieve a list of tags for the authenticated workspace. It returns an array of tag objects, each containing an id, name, and color.

LANGUAGE: typescript
CODE:
await dub.tags.list();

LANGUAGE: typescript
CODE:
[
  {
    id: "clv3j1h7o00032u1ngo8luv84",
    name: "news",
    color: "blue",
  },
  {
    id: "cluibmjj5000975qol4hnx0t7",
    name: "work",
    color: "red",
  },
];

----------------------------------------

TITLE: Updating a Link with Dub TypeScript SDK in Nuxt
DESCRIPTION: This snippet demonstrates how to update an existing link using the Dub TypeScript SDK in a Nuxt server API route. It shows two methods: updating by linkId and updating by externalId.

LANGUAGE: typescript
CODE:
export default defineEventHandler(async () => {
  try {
    // Update a link by its linkId
    const { shortLink } = await dub.links.update(
      "link_rWOKByP0bRMrstK8e4HPjprJ",
      {
        url: "https://www.google.uk", // new URL
      }
    );

    // Update a link by its externalId
    const { shortLink } = await dub.links.update("ext_12345", {
      url: "https://www.google.uk", // new URL
    });

    return { shortLink };
  } catch (error) {
    console.error(error);
    return error;
  }
});

----------------------------------------

TITLE: Defining Domain Properties Schema using ResponseField Components in JSX
DESCRIPTION: This code snippet defines the schema for domain properties in the Dub project. It uses custom ResponseField components to document various attributes of a domain, including its identifier, status flags, URLs, and timestamps. It also includes a nested object for registered domain information.

LANGUAGE: jsx
CODE:
<ResponseField name="id" type="string" required>
  The unique identifier of the domain.
</ResponseField>

<ResponseField name="slug" type="string" required>
  The domain name.
</ResponseField>

<ResponseField name="verified" type="boolean" default={false} required>
  Whether the domain is verified.
</ResponseField>

<ResponseField name="primary" type="boolean" default={false} required>
  Whether the domain is the primary domain for the workspace.
</ResponseField>

<ResponseField name="archived" type="boolean" default={false} required>
  Whether the domain is archived.
</ResponseField>

<ResponseField
  name="placeholder"
  type="string"
  default="https://dub.co/help/article/what-is-dub"
  required
>
  Provide context to your teammates in the link creation modal by showing them
  an example of a link to be shortened.
</ResponseField>

<ResponseField name="expiredUrl" type="string | null" required>
  The URL to redirect to when a link under this domain has expired.
</ResponseField>

<ResponseField name="notFoundUrl" type="string | null" required>
  The URL to redirect to when a link under this domain doesn't exist.
</ResponseField>

<ResponseField name="createdAt" type="string" required>
  The date the domain was created.
</ResponseField>

<ResponseField name="updatedAt" type="string" required>
  The date the domain was last updated.
</ResponseField>

<ResponseField name="registeredDomain" type="object | null" required>
  The registered domain record.
  <Expandable title="properties">
    <ResponseField name="id" type="string" required>
      The ID of the registered domain record.
    </ResponseField>
    <ResponseField name="createdAt" type="string" required>
      The date the domain was created.
    </ResponseField>
    <ResponseField name="expiresAt" type="string" required>
      The date the domain expires.
    </ResponseField>
  </Expandable>
</ResponseField>

----------------------------------------

TITLE: Creating a Short Link with Dub Ruby SDK
DESCRIPTION: Demonstrates how to create a short link using the Dub Ruby SDK within a Sinatra POST route.

LANGUAGE: ruby
CODE:
post "/links" do
  req = ::OpenApiSDK::Operations::CreateLinkRequest.new(
    request_body: ::OpenApiSDK::Operations::CreateLinkRequestBody.new(
      url: 'https://google.com'
    )
  )

  res = dub.links.create(req)

  content_type :json
  res.raw_response.body
end

----------------------------------------

TITLE: Filtering Analytics by Tags with Dub API in Node.js
DESCRIPTION: This snippet demonstrates how to use the Dub API to retrieve analytics data filtered by specific tags over a 30-day interval. It requires the Dub API key and a Pro plan subscription or higher.

LANGUAGE: javascript
CODE:
import { Dub } from "dub";

export const dub = new Dub({
  token: process.env.DUB_API_KEY,
});

const result = await dub.analytics.retrieve({
  event: "clicks",
  groupBy: "top_links",
  tagIds: ["tag_12345", "tag_67890"],
  interval: "30d",
});

----------------------------------------

TITLE: Initializing Dub Ruby SDK in Sinatra
DESCRIPTION: Sets up the Dub Ruby SDK by creating a new instance of the Dub struct and configuring security with an API key.

LANGUAGE: ruby
CODE:
require "sinatra"
require "dub"

dub = ::OpenApiSDK::Dub.new
dub.config_security(
  ::OpenApiSDK::Shared::Security.new(
    token: ENV['DUB_API_KEY'],
  )
)

----------------------------------------

TITLE: Specifying Dub API Base URL in Bash
DESCRIPTION: The base URL for all Dub API endpoints, served over HTTPS for data privacy.

LANGUAGE: bash
CODE:
https://api.dub.co

----------------------------------------

TITLE: Installing Dub PHP SDK with Composer
DESCRIPTION: Command to install the Dub PHP SDK using Composer package manager.

LANGUAGE: bash
CODE:
composer require dub/dub-php

----------------------------------------

TITLE: Updating a Domain with dub.domains.update in TypeScript
DESCRIPTION: This snippet demonstrates how to use the dub.domains.update method to modify properties of an existing domain. It updates the expired URL and target URL for the domain 'acme.com'.

LANGUAGE: typescript
CODE:
await dub.domains.update("acme.com", {
  expiredUrl: "https://acme.com/expired",
  target: "https://acme.com/home",
});

----------------------------------------

TITLE: Updating an Existing Link with Dub Ruby SDK
DESCRIPTION: Shows how to update an existing link using either the link's Dub ID or external ID within a Sinatra PATCH route.

LANGUAGE: ruby
CODE:
patch "/links" do
  req = ::OpenApiSDK::Operations::UpdateLinkRequest.new(
    link_id: "clyci5h0w000511sjmu0tyjv9",
    request_body: ::OpenApiSDK::Operations::UpdateLinkRequestBody.new(
      url: 'https://google.uk'
    )
  )

  res = dub.links.update(req)

  content_type :json
  res.raw_response.body
end

----------------------------------------

TITLE: Rendering Card Group for Dub and Raycast Integration Links in JSX
DESCRIPTION: This code snippet creates a card group with two cards, one for viewing the integration on Dub and another for viewing it on Raycast. Each card includes a title, icon, and link to the respective platform.

LANGUAGE: jsx
CODE:
<CardGroup cols={2}>
  <Card
    title="View on Dub"
    icon={
      <div className="h-8 w-8">
        <img
          src="https://assets.dub.co/logo.png"
          alt="Dub logo"
          className="h-full w-full"
        />
      </div>
    }
    href="https://app.dub.co/integrations/raycast"
  >
    Opens the integration page on Dub
  </Card>
  <Card
    title="View on Raycast"
    icon={
      <div className="h-8 w-8">
        <img
          src="https://dubassets.com/integrations/clzlmyzlx0005jeqy95pjrwbz_Yg767eU"
          alt="Raycast logo"
          className="h-full w-full rounded-full"
        />
      </div>
    }
    href="https://d.to/ray"
  >
    Opens the integration page on Raycast
  </Card>
</CardGroup>

----------------------------------------

TITLE: Accessing Dub ID Cookie in Remix Framework
DESCRIPTION: This snippet shows how to access the dub_id cookie in the Remix framework using the cookie library, which is a workaround for an issue where the cookie value might be empty or null.

LANGUAGE: typescript
CODE:
import cookie from "cookie";

const cookies = cookie.parse(request.headers.get("cookie") ?? "");
const dubId = cookies.dub_id;

----------------------------------------

TITLE: Setting Custom Cookie Expiration with Dub Analytics in HTML
DESCRIPTION: This snippet illustrates how to customize the cookie expiration time using the Dub Analytics script in a standard HTML implementation. It shows how to use the data-cookie-options attribute to set the cookie to expire in 60 days.

LANGUAGE: html
CODE:
<script
  src="https://www.dubcdn.com/analytics/script.js"
  data-cookie-options='{"expiresInDays": 60}'
/>

----------------------------------------

TITLE: Rendering Documentation Cards with JSX
DESCRIPTION: JSX components for displaying documentation and GitHub repository links for the Shopify integration.

LANGUAGE: jsx
CODE:
<Card
  title="Shopify + Dub Conversions"
  icon="shopify"
  href="/conversions/sales/shopify"
  horizontal
>
  Tracking sale conversion events with Shopify and the Dub SDK
</Card>

<Card
  title="Dub Shopify Integration"
  icon="github"
  href="https://git.new/dub-shopify"
  horizontal
>
  See the full example on GitHub.
</Card>

----------------------------------------

TITLE: Rendering Integration Navigation Cards in JSX
DESCRIPTION: Renders a group of two navigation cards that provide links to the Slack integration pages on both Dub and Slack platforms. Each card includes a title, icon image, and destination URL.

LANGUAGE: jsx
CODE:
<CardGroup cols={2}>
  <Card
    title="View on Dub"
    icon={
      <div className="h-8 w-8">
        <img
          src="https://assets.dub.co/logo.png"
          alt="Dub logo"
          className="h-full w-full"
        />
      </div>
    }
    href="https://app.dub.co/integrations/slack"
  >
    Opens the integration page on Dub
  </Card>
  <Card
    title="View on Slack"
    icon={
      <div className="h-8 w-8">
        <img
          src="https://dubassets.com/integrations/clzu59rx9000110bm5fnlzwuj_GigJCRt"
          alt="Slack logo"
          className="h-full w-full rounded-full"
        />
      </div>
    }
    href="https://d.to/slack"
  >
    Opens the integration page on Slack
  </Card>
</CardGroup>

----------------------------------------

TITLE: Cloning Dub Repository
DESCRIPTION: Clone the Dub repository from GitHub to your local machine.

LANGUAGE: bash
CODE:
git clone https://github.com/dubinc/dub.git

----------------------------------------

TITLE: Configuring Reverse Proxy for Dub Analytics in Next.js
DESCRIPTION: This code snippet demonstrates how to set up a reverse proxy for the Dub Analytics script in a Next.js application. It shows the configuration in the next.config.js file to rewrite the script URL.

LANGUAGE: javascript
CODE:
// next.config.js
module.exports = {
  async rewrites() {
    return [
      {
        source: "/_proxy/dub/script.js",
        destination: "https://www.dubcdn.com/analytics/script.js",
      },
    ];
  },
};

----------------------------------------

TITLE: Configuring Cookie Options in Dub API
DESCRIPTION: Configuration object for setting cookie attributes including domain, expiration, and path settings. Used to control cross-domain tracking and cookie persistence.

LANGUAGE: json
CODE:
{
  "domain": ".example.com",
  "expires": "new Date('2024-12-31')",
  "expiresInDays": 90,
  "path": "/"
}

----------------------------------------

TITLE: Initializing @dub/analytics in Next.js Root Layout
DESCRIPTION: This snippet demonstrates how to initialize the @dub/analytics package in a Next.js application by adding the Analytics component to the root layout. It imports the component and places it within the HTML structure to enable tracking conversions across the website.

LANGUAGE: jsx
CODE:
import { Analytics as DubAnalytics } from '@dub/analytics/react';

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body>{children}</body>
      <DubAnalytics />
    </html>
  );
}

----------------------------------------

TITLE: Implementing Dub Analytics in React/Next.js
DESCRIPTION: Example of initializing Dub Analytics component in a React/Next.js application with custom domain configuration and optional query parameter tracking.

LANGUAGE: typescript
CODE:
import { Analytics as DubAnalytics } from "@dub/analytics/react";

export default function App() {
  return (
    <Layout>
      <DubAnalytics
        domainsConfig={{
          refer: "go.example.com", // the custom domain you're using on Dub for your short links
        }}
        queryParam="via" // optional: query parameter to listen to for client-side click-tracking (default: "via")
      />
      {/* Your app code here */}
    </Layout>
  );
}

----------------------------------------

TITLE: Setting Up Reverse Proxy for Dub Analytics with Vercel
DESCRIPTION: This snippet shows how to configure a reverse proxy for the Dub Analytics script using Vercel. It demonstrates the required configuration in the vercel.json file to rewrite the script URL.

LANGUAGE: json
CODE:
// vercel.json
{
  "rewrites": [
    {
      "source": "/_proxy/dub/script.js",
      "destination": "https://www.dubcdn.com/analytics/script.js"
    }
  ]
}

----------------------------------------

TITLE: Link Tracking and Analytics Parameters
DESCRIPTION: Parameters for configuring link tracking, public statistics, and conversion tracking functionality.

LANGUAGE: markdown
CODE:
<ParamField body="trackConversion" type="boolean" default={false}>
  Whether to track conversions for the short link.
</ParamField>

<ParamField body="publicStats" type="boolean" default={false}>
  Whether the short link's stats are publicly accessible.
</ParamField>

----------------------------------------

TITLE: Installing @dub/analytics Script in Webflow Head
DESCRIPTION: Script tag for adding @dub/analytics tracking to a Webflow site's head section. The script is loaded with defer attribute to prevent blocking page rendering.

LANGUAGE: html
CODE:
<script src="https://www.dubcdn.com/analytics/script.js" defer />

----------------------------------------

TITLE: Implementing Dub Analytics with Reverse Proxy in React/Next.js
DESCRIPTION: This code example demonstrates how to implement the Dub Analytics script with a reverse proxy in a React or Next.js application. It shows how to use the Analytics component and configure the scriptProps to point to the proxy URL.

LANGUAGE: typescript
CODE:
import { Analytics as DubAnalytics } from "@dub/analytics/react";

export default function App() {
  return (
    <Layout>
      <DubAnalytics
        scriptProps={{
          src: "/_proxy/dub/script.js", // pointing to your reverse proxy
        }}
      />
      {/* Your app code here */}
    </Layout>
  );
}

----------------------------------------

TITLE: Social Media and SEO Parameters
DESCRIPTION: Configuration options for custom social media cards, metadata, and search engine indexing settings.

LANGUAGE: markdown
CODE:
<ParamField body="proxy" type="boolean" default={false}>
  Whether the short link uses Custom Social Media Cards feature.
</ParamField>

<ParamField body="doIndex" type="boolean" default={false}>
  Allow search engines to index your short link. Defaults to `false` if not provided.
</ParamField>

----------------------------------------

TITLE: Removing Unnecessary Files
DESCRIPTION: Delete the vercel.json file as cron jobs are not required for the self-hosted version.

LANGUAGE: bash
CODE:
rm apps/web/vercel.json

----------------------------------------

TITLE: Updating Links by ID
DESCRIPTION: Examples of updating existing links using either the Dub linkId or externalId. Shows both methods of link identification for updates.

LANGUAGE: typescript
CODE:
app.post("/update-link", async (req: Request, res: Response) => {
  try {
    // Update a link by its linkId
    const { shortLink } = await dub.links.update(
      "link_rWOKByP0bRMrstK8e4HPjprJ",
      {
        url: "https://www.google.uk", // new URL
      }
    );

    // Update a link by its externalId
    const { shortLink } = await dub.links.update("ext_12345", {
      url: "https://www.google.uk", // new URL
    });

    res.status(200).json({ shortLink });
  } catch (error: any) {
    res.status(400).json(error);
  }
});

----------------------------------------

TITLE: Link Management Commands
DESCRIPTION: Commands for searching and managing links in Dub workspace, including options for search and result limiting.

LANGUAGE: bash
CODE:
dub links

LANGUAGE: bash
CODE:
dub links [options]

LANGUAGE: bash
CODE:
dub help [command]

----------------------------------------

TITLE: Generating Prisma Client
DESCRIPTION: Generate the Prisma client for database operations.

LANGUAGE: bash
CODE:
pnpm run prisma:generate

----------------------------------------

TITLE: Modifying Prisma Schema for Custom Domain
DESCRIPTION: Update the DefaultDomains model in the Prisma schema to use the normalized version of your custom short domain.

LANGUAGE: prisma
CODE:
model DefaultDomains {
  id          String   @id @default(cuid())
  acme        Boolean  @default(true)
  projectId   String   @unique
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

----------------------------------------

TITLE: Creating Short Link with External ID
DESCRIPTION: Create a short link with an external ID for database association.

LANGUAGE: python
CODE:
res = d.links.create(request={
  "url": "https://google.com",
  "external_id": "12345",
})

print(res.short_link)

----------------------------------------

TITLE: Retrieving Domains List with dub SDK - TypeScript
DESCRIPTION: Example of how to fetch a list of domains using the dub TypeScript SDK. The request can be configured with optional parameters for archived status, search filtering, and pagination.

LANGUAGE: typescript
CODE:
const { result } = await dub.domains.list();

LANGUAGE: typescript
CODE:
[
  {
    id: "clvcep2sn87jh8nf808x00005",
    slug: "acme.com",
    verified: false,
    primary: true,
    archived: false,
    placeholder: "https://dub.co/help/article/what-is-dub",
    expiredUrl: "https://acme.com/expired",
    target: "https://acme.com/home",
    type: "redirect",
    clicks: 0,
  }
];

----------------------------------------

TITLE: Setting Up Environment Variables
DESCRIPTION: Configure initial environment variables for the Dub application.

LANGUAGE: bash
CODE:
# The domain that your app will be hosted on
NEXT_PUBLIC_APP_DOMAIN=acme.com
# The short domain that your app will be using (could be the same as the above)
NEXT_PUBLIC_APP_SHORT_DOMAIN=ac.me
# The ID of the Vercel team that your app will be deployed to: https://vercel.com/docs/accounts/create-a-team#find-your-team-id
TEAM_ID_VERCEL=
# The unique access token for your Vercel account: https://vercel.com/guides/how-do-i-use-a-vercel-api-access-token
AUTH_BEARER_TOKEN=

----------------------------------------

TITLE: Deleting Multiple Links with Dub API in TypeScript
DESCRIPTION: Example of how to delete multiple links by their IDs using the dub.links.deleteMany method. Accepts an array of link IDs (maximum 100) and returns the count of deleted links.

LANGUAGE: typescript
CODE:
await dub.links.deleteMany({
  linkIds: ["clux0rgak00011...", "clux0rgak00022..."]
});

LANGUAGE: typescript
CODE:
{
  deletedCount: 2;
}

----------------------------------------

TITLE: Response Structure for dub.domains.update in TypeScript
DESCRIPTION: This snippet shows the structure of the response object returned by the dub.domains.update method. It includes various properties of the updated domain such as ID, slug, verification status, and click count.

LANGUAGE: typescript
CODE:
{
  id: "clvcep2sn87jh8nf808x00005",
  slug: "acme.com",
  verified: false,
  primary: true,
  archived: false,
  placeholder: "https://dub.co/help/article/what-is-dub",
  expiredUrl: "https://acme.com/expired",
  target: "https://acme.com/home",
  type: "redirect",
  clicks: 0
}

----------------------------------------

TITLE: Configuring Environment Variables for Clerk and Dub
DESCRIPTION: Required environment variables setup for Clerk authentication and Dub API integration.

LANGUAGE: bash
CODE:
# get it here: https://dashboard.clerk.com/apps/new
NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=your_publishable_key
CLERK_SECRET_KEY=your_secret_key

# get it here: https://d.to/tokens
DUB_API_KEY=your_api_key

----------------------------------------

TITLE: Installing Appwrite SDK
DESCRIPTION: Command to install the Appwrite Node.js SDK in your project

LANGUAGE: bash
CODE:
npm i node-appwrite

----------------------------------------

TITLE: Defining Webhook Payload Structure in JSON
DESCRIPTION: This snippet demonstrates the general structure of a webhook payload in Dub. It includes the event ID, event type, creation timestamp, and a data object containing event-specific information.

LANGUAGE: json
CODE:
{
  "id": "evt_KleiO4HBwZFbO1vZLWIPZ2AtX", // The event ID
  "event": "link.created", // The event type
  "createdAt": "2024-08-26T16:41:52.346Z", // The timestamp of when the event was created
  "data": {
    // Event payload
  }
}

----------------------------------------

TITLE: Retrieving Workspace Information using dub API in TypeScript
DESCRIPTION: This snippet demonstrates how to retrieve workspace information using the dub.workspaces.get method. It shows examples of retrieving a workspace by ID and by slug.

LANGUAGE: typescript
CODE:
// Retrieve a workspace by ID
await dub.workspaces.get({
  idOrSlug: "clv3mw4qb00008tvuw86c53db,
});

// Retrieve a workspace by slug
await dub.workspaces.get({
  idOrSlug: "acme",
});

----------------------------------------

TITLE: Implementing Root Layout with Dub Analytics
DESCRIPTION: Setup of the root layout component with Dub Analytics integration

LANGUAGE: tsx
CODE:
import type { Metadata } from 'next';
import { Analytics as DubAnalytics } from '@dub/analytics/react';

export const metadata: Metadata = {
  title: 'Appwrite Dub Leads Example',
  description: 'Appwrite Dub Leads Tracking example app with Next.js'
};

export default function RootLayout({
  children
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body>{children}</body>
      <DubAnalytics />
    </html>
  );
}

----------------------------------------

TITLE: Running Dub Documentation Development Server
DESCRIPTION: Command to start the development server for the Dub documentation. This should be run in the root directory of the repository.

LANGUAGE: bash
CODE:
npm run dev

----------------------------------------

TITLE: Response Structure for dub.links.update in TypeScript
DESCRIPTION: This snippet shows the structure of the response object returned by the dub.links.update method. It includes various properties of the updated link, such as id, domain, key, url, and other metadata.

LANGUAGE: typescript
CODE:
{
  id: 'clv3o9p9q000au1h0mc7r6l63',
  domain: 'dub.sh',
  key: 'e7qzMuI',
  externalId: "123",
  url: 'https://www.google.com',
  archived: false,
  expiresAt: null,
  expiredUrl: null,
  password: null,
  proxy: false,
  title: null,
  description: null,
  image: null,
  rewrite: false,
  ios: null,
  android: null,
  geo: null,
  publicStats: false,
  tagId: 'clv3j1h7o00032u1ngo8luv84',
  tags: [
    {
      id: 'clv3j1h7o00032u1ngo8luv84',
      name: 'news',
      color: 'blue'
    }
  ],
  comments: null,
  shortLink: 'https://dub.sh/e7qzMuI',
  qrCode: 'https://api.dub.co/qr?url=https://dub.sh/e7qzMuI?qr=1',
  utmSource: null,
  utmMedium: null,
  utmCampaign: null,
  utmTerm: null,
  utmContent: null,
  userId: 'cludszk1h0000wmd2e0ea2b0p',
  workspaceId: 'ws_clugls3tn000lwfotbpy30304',
  clicks: 0,
  lastClicked: null,
  createdAt: '2024-04-17T10:31:00.398Z',
  updatedAt: '2024-04-17T10:31:00.398Z',
  projectId: 'clugls3tn000lwfotbpy30304'
}

----------------------------------------

TITLE: Installing @dub/analytics Package with Package Managers
DESCRIPTION: This snippet shows how to install the @dub/analytics package using different package managers including npm, pnpm, yarn, and bun.

LANGUAGE: bash
CODE:
npm install @dub/analytics

LANGUAGE: bash
CODE:
pnpm add @dub/analytics

LANGUAGE: bash
CODE:
yarn add @dub/analytics

LANGUAGE: bash
CODE:
bun add @dub/analytics

----------------------------------------

TITLE: Installing Mintlify for Dub Documentation
DESCRIPTION: Command to install Mintlify globally using npm. Mintlify is likely used as the documentation generation tool for the Dub project.

LANGUAGE: bash
CODE:
npm i -g mintlify

----------------------------------------

TITLE: Response Structure for Dub Link Update
DESCRIPTION: This code snippet shows the structure of the response object returned after updating a link in Dub. It includes various properties such as the link's ID, domain, key, URL, and associated metadata.

LANGUAGE: typescript
CODE:
{
  id: 'clv3o9p9q000au1h0mc7r6l63',
  domain: 'dub.sh',
  key: 'e7qzMuI',
  externalId: "123",
  url: 'https://www.google.com',
  archived: false,
  expiresAt: null,
  expiredUrl: null,
  password: null,
  proxy: false,
  title: null,
  description: null,
  image: null,
  rewrite: false,
  ios: null,
  android: null,
  geo: null,
  publicStats: false,
  tagId: 'clv3j1h7o00032u1ngo8luv84',
  tags: [
    {
      id: 'clv3j1h7o00032u1ngo8luv84',
      name: 'news',
      color: 'blue'
    }
  ],
  comments: null,
  shortLink: 'https://dub.sh/e7qzMuI',
  qrCode: 'https://api.dub.co/qr?url=https://dub.sh/e7qzMuI?qr=1',
  utmSource: null,
  utmMedium: null,
  utmCampaign: null,
  utmTerm: null,
  utmContent: null,
  userId: 'cludszk1h0000wmd2e0ea2b0p',
  workspaceId: 'ws_clugls3tn000lwfotbpy30304',
  clicks: 0,
  lastClicked: null,
  createdAt: '2024-04-17T10:31:00.398Z',
  updatedAt: '2024-04-17T10:31:00.398Z',
  projectId: 'clugls3tn000lwfotbpy30304'
}

----------------------------------------

TITLE: Configuring Domains for Dub Tracking
DESCRIPTION: JSON configuration for specifying tracking domains, including referral tracking, site visits, and cross-domain tracking settings.

LANGUAGE: json
CODE:
{
  "refer": "refer.dub.co",
  "site": "site.dub.co",
  "outbound": ["dub.sh", "git.new"]
}

----------------------------------------

TITLE: Updating an Existing Link
DESCRIPTION: Update an existing link using either its linkId or externalId.

LANGUAGE: ruby
CODE:
req = ::OpenApiSDK::Operations::UpdateLinkRequest.new(
  link_id: "cly2p8onm000cym8200nfay7l",
  request_body: ::OpenApiSDK::Operations::UpdateLinkRequestBody.new(
    url: "https://google.us",
  ),
)

res = dub.links.update(req)

puts res.raw_response.body

----------------------------------------

TITLE: Upserting a Link
DESCRIPTION: Upsert a link to either update an existing one or create a new one if it doesn't exist.

LANGUAGE: ruby
CODE:
req = ::OpenApiSDK::Operations::UpsertLinkRequest.new(
  request_body: ::OpenApiSDK::Operations::UpsertLinkRequestBody.new(
    url: "https://google.com",
  ),
)

res = dub.links.upsert(req)

puts res.raw_response.body

----------------------------------------

TITLE: Counting Links with Filtering in Dub SDK
DESCRIPTION: Examples of using the dub.links.count method to count links with different filtering options. Demonstrates counting by domain and by tag IDs.

LANGUAGE: typescript
CODE:
// Count links by domain
await dub.links.count({
  domain: "dub.sh",
});

// Count links by tagIds
await dub.links.count({
  tagIds: ["clv3mewk30001mq0rxl3j3frn"],
});

LANGUAGE: typescript
CODE:
2;

----------------------------------------

TITLE: Importing ViewConversions Component
DESCRIPTION: A React/MDX import statement for the ViewConversions component used to display conversion tracking data in the analytics dashboard.

LANGUAGE: javascript
CODE:
import ViewConversions from "/snippets/view-conversions.mdx";

----------------------------------------

TITLE: Installing Dub SDK with npm
DESCRIPTION: Installs the Dub TypeScript SDK using npm package manager.

LANGUAGE: bash
CODE:
npm install dub

----------------------------------------

TITLE: Tracking Sale Event with Dub SDK in Ruby
DESCRIPTION: This snippet shows how to track a sale event using the Dub SDK in Ruby. It includes requiring the Dub library, creating a Dub instance with an API key, and calling the track.sale method with sale details.

LANGUAGE: ruby
CODE:
require 'dub'

dub = ::OpenApiSDK::Dub.new
dub.config_security(
  ::OpenApiSDK::Shared::Security.new(
    token: ENV['DUB_API_KEY']
  )
)

req = ::OpenApiSDK::Operations::TrackSaleRequest.new(
  external_id: 'cus_RBfbD57HDzPKpduI8elr5qHA',
  amount: 100,
  payment_processor: 'stripe',
  event_name: 'E-book purchase',
  invoice_id: '123456',
  currency: 'usd'
)

dub.track.sale(req)

----------------------------------------

TITLE: Installing Dub SDK with pnpm
DESCRIPTION: Installs the Dub TypeScript SDK using pnpm package manager.

LANGUAGE: bash
CODE:
pnpm add dub

----------------------------------------

TITLE: Creating a Short Link with External ID
DESCRIPTION: Shows how to create a short link with an external ID for easier association with your own database.

LANGUAGE: ruby
CODE:
post "/links" do
  req = ::OpenApiSDK::Operations::CreateLinkRequest.new(
    request_body: ::OpenApiSDK::Operations::CreateLinkRequestBody.new(
      url: 'https://google.com',
      external_id: '12345'
    )
  )

  res = dub.links.create(req)

  content_type :json
  res.raw_response.body
end

----------------------------------------

TITLE: Mailhog Setup Commands
DESCRIPTION: Commands for setting up Mailhog email testing environment using Docker

LANGUAGE: bash
CODE:
docker pull mailhog/mailhog
docker run -d -p 8025:8025 -p 1025:1025 mailhog/mailhog

----------------------------------------

TITLE: Installing Dub Ruby SDK
DESCRIPTION: Installs the Dub Ruby SDK using the gem package manager.

LANGUAGE: bash
CODE:
gem install dub

----------------------------------------

TITLE: Starting Development Server
DESCRIPTION: Command to start the Dub development server

LANGUAGE: bash
CODE:
pnpm dev

----------------------------------------

TITLE: Rendering Documentation Card for Stripe Conversions
DESCRIPTION: JSX code that creates a card linking to Stripe conversion tracking documentation with an icon and descriptive text.

LANGUAGE: jsx
CODE:
<Card
  title="Stripe + Dub Conversions"
  icon="stripe"
  href="/conversions/sales/stripe"
  horizontal
>
  Tracking sale conversion events with Stripe and the Dub SDK
</Card>

----------------------------------------

TITLE: Installing Dependencies
DESCRIPTION: Install the necessary dependencies for the Dub project using pnpm.

LANGUAGE: bash
CODE:
pnpm i

----------------------------------------

TITLE: Root Layout Configuration with DubAnalytics
DESCRIPTION: Integration of DubAnalytics component into the Next.js root layout component.

LANGUAGE: tsx
CODE:
import { DubAnalytics } from "@/components/dub-analytics";

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <html>
      <body>
        <DubAnalytics />
        {children}
      </body>
    </html>
  );
}

----------------------------------------

TITLE: Setting R2 Base URL
DESCRIPTION: Set the base URL for accessing R2 storage assets.

LANGUAGE: bash
CODE:
STORAGE_BASE_URL={URL your assets as available at} # https://static.example.com

----------------------------------------

TITLE: Currency Conversion for Sale Tracking in TypeScript
DESCRIPTION: This snippet illustrates how to track a sale event with a different currency using the Dub SDK in TypeScript. It demonstrates automatic currency conversion to USD for reporting consistency.

LANGUAGE: typescript
CODE:
await dub.track.sale({
  externalId: "cus_RBfbD57HDzPKpduI8elr5qHA",
  amount: 15480, // this will be converted from PLN to USD
  currency: "pln",
  paymentProcessor: "stripe",
  eventName: "Purchase",
});

----------------------------------------

TITLE: Implementing Stripe Pricing Tables with Dub Tracking
DESCRIPTION: Code examples showing how to add Dub click ID tracking to Stripe Pricing Tables in both HTML and React implementations.

LANGUAGE: html
CODE:
<body>
  <h1>We offer plans that help any business!</h1>
  <!-- Paste your embed code script here. -->
  <script async src="https://js.stripe.com/v3/pricing-table.js"></script>
  <stripe-pricing-table
    pricing-table-id="{{PRICING_TABLE_ID}}"
    publishable-key="pk_test_51ODHJvFacAXKeDpJsgWLQJSzBIDtCUFN6MoB4IIXKJDfWdFmiEO4JuvAU1A0Y2Ri4m4q1egIfwYy3s72cUBRCwXC00GQhEZuXa"
    client-reference-id="dub_id_xxxxxxxxxxxxxx"
  >
  </stripe-pricing-table>
</body>

LANGUAGE: jsx
CODE:
import * as React from "react";

function PricingPage() {
  return (
    <stripe-pricing-table
      pricing-table-id="'{{PRICING_TABLE_ID}}'"
      publishable-key="pk_test_51ODHJvFacAXKeDpJsgWLQJSzBIDtCUFN6MoB4IIXKJDfWdFmiEO4JuvAU1A0Y2Ri4m4q1egIfwYy3s72cUBRCwXC00GQhEZuXa"
      client-reference-id="dub_id_xxxxxxxxxxxxxx"
    ></stripe-pricing-table>
  );
}

export default PricingPage;

----------------------------------------

TITLE: Implementing Stripe Pricing Tables with Dub Tracking
DESCRIPTION: Code examples showing how to add Dub click ID tracking to Stripe Pricing Tables in both HTML and React implementations.

LANGUAGE: html
CODE:
<body>
  <h1>We offer plans that help any business!</h1>
  <!-- Paste your embed code script here. -->
  <script async src="https://js.stripe.com/v3/pricing-table.js"></script>
  <stripe-pricing-table
    pricing-table-id="{{PRICING_TABLE_ID}}"
    publishable-key="pk_test_51ODHJvFacAXKeDpJsgWLQJSzBIDtCUFN6MoB4IIXKJDfWdFmiEO4JuvAU1A0Y2Ri4m4q1egIfwYy3s72cUBRCwXC00GQhEZuXa"
    client-reference-id="dub_id_xxxxxxxxxxxxxx"
  >
  </stripe-pricing-table>
</body>

LANGUAGE: jsx
CODE:
import * as React from "react";

function PricingPage() {
  return (
    <stripe-pricing-table
      pricing-table-id="'{{PRICING_TABLE_ID}}'"
      publishable-key="pk_test_51ODHJvFacAXKeDpJsgWLQJSzBIDtCUFN6MoB4IIXKJDfWdFmiEO4JuvAU1A0Y2Ri4m4q1egIfwYy3s72cUBRCwXC00GQhEZuXa"
      client-reference-id="dub_id_xxxxxxxxxxxxxx"
    ></stripe-pricing-table>
  );
}

export default PricingPage;

----------------------------------------

TITLE: Sample Response Structure for Dub Links List API
DESCRIPTION: Example of the response structure returned by the dub.links.list method. This snippet illustrates the format and properties of link objects in the API response.

LANGUAGE: typescript
CODE:
[
  {
    id: "clv3o9p9q000au1h0mc7r6l63",
    domain: "dub.sh",
    key: "e7qzMuI",
    externalId: "123",
    url: "https://www.google.com",
    archived: false,
    expiresAt: null,
    expiredUrl: null,
    password: null,
    proxy: false,
    title: null,
    description: null,
    image: null,
    rewrite: false,
    ios: null,
    android: null,
    geo: null,
    publicStats: false,
    tagId: null,
    tags: [],
    comments: null,
    shortLink: "https://dub.sh/e7qzMuI",
    qrCode: "https://api.dub.co/qr?url=https://dub.sh/e7qzMuI?qr=1",
    utmSource: null,
    utmMedium: null,
    utmCampaign: null,
    utmTerm: null,
    utmContent: null,
    userId: "cludszk1h0000wmd2e0ea2b0p",
    workspaceId: "ws_clugls3tn000lwfotbpy30304",
    clicks: 0,
    lastClicked: null,
    createdAt: "2024-04-17T10:31:00.398Z",
    updatedAt: "2024-04-17T10:31:00.398Z",
    projectId: "clugls3tn000lwfotbpy30304",
  },
];

----------------------------------------

TITLE: Creating Stripe Checkout Sessions with Dub Integration
DESCRIPTION: Examples of creating Stripe Checkout Sessions with Dub customer tracking in multiple programming languages.

LANGUAGE: typescript
CODE:
const session = await stripe.checkout.sessions.create({
  success_url: "https://example.com/success",
  line_items: [
    {
      price: "price_xxxxxxxxxxxxxxxx",
      quantity: 2,
    },
  ],
  mode: "payment",
  client_reference_id: "dub_id_xxxxxxxxxxxxxx",
});

LANGUAGE: python
CODE:
stripe.checkout.Session.create(
    success_url="https://example.com/success",
    line_items=[{"price": "price_xxxxxxxxxxxxxxxx", "quantity": 2}],
    mode="payment",
    client_reference_id="dub_id_xxxxxxxxxxxxxx",
  )

----------------------------------------

TITLE: Initializing and Using Dub SDK
DESCRIPTION: Example showing how to initialize the Dub client with an API token and create a shortened link using the SDK.

LANGUAGE: typescript
CODE:
import { Dub } from "dub";

const dub = new Dub({
  token: "DUB_API_KEY",
});

await dub.links.create({
  url: "https://google.com",
});

----------------------------------------

TITLE: Initializing and Using Dub SDK
DESCRIPTION: Example showing how to initialize the Dub client with an API token and create a shortened link using the SDK.

LANGUAGE: typescript
CODE:
import { Dub } from "dub";

const dub = new Dub({
  token: "DUB_API_KEY",
});

await dub.links.create({
  url: "https://google.com",
});

----------------------------------------

TITLE: Stripe Customer Creation with Dub Tracking
DESCRIPTION: Implementation example of creating and updating Stripe customers with Dub tracking metadata.

LANGUAGE: typescript
CODE:
import { stripe } from "@/lib/stripe";

const user = {
  id: "user_123",
  email: "user@example.com",
  teamId: "team_xxxxxxxxx",
};

const dub_id = req.headers.get("dub_id");

await stripe.customers.create({
  email: user.email,
  name: user.name,
  metadata: {
    dubCustomerId: user.id,
    dubClickId: dub_id,
  },
});

----------------------------------------

TITLE: Retrieving Analytics for a Link with Dub Ruby SDK
DESCRIPTION: Demonstrates how to retrieve analytics for a specific link using the Dub Ruby SDK within a Sinatra GET route.

LANGUAGE: ruby
CODE:
get "/analytics" do
  req = ::OpenApiSDK::Operations::RetrieveAnalyticsRequest.new(
    link_id: "clx1gvi9o0005hf5momm6f7hj",
    interval: ::OpenApiSDK::Operations::Interval::SEVEND,
    group_by: ::OpenApiSDK::Operations::GroupBy::TIMESERIES
  )

  res = dub.analytics.retrieve(req)

  content_type :json
  res.raw_response.body
end

----------------------------------------

TITLE: Tracking Sale Event with Dub SDK in Python
DESCRIPTION: This snippet shows how to track a sale event using the Dub SDK in Python. It includes importing the Dub class, creating an instance with an API key, and calling the track.sale method with sale details.

LANGUAGE: python
CODE:
from dub import Dub
import os

dub = Dub(token=os.environ['DUB_API_KEY'])

dub.track.sale({
    'external_id': 'cus_RBfbD57HDzPKpduI8elr5qHA',
    'amount': 100,
    'payment_processor': 'stripe',
    'event_name': 'E-book purchase',
    'invoice_id': '123456',
    'currency': 'usd'
})

----------------------------------------

TITLE: Installing Dub SDK with yarn
DESCRIPTION: Installs the Dub TypeScript SDK and its peer dependency (zod) using yarn package manager.

LANGUAGE: bash
CODE:
yarn add dub zod # zod is a peer dependency

----------------------------------------

TITLE: Implementing DubAnalytics Component with Clerk Integration
DESCRIPTION: React component that extends @dub/analytics package with Clerk's useUser hook for lead tracking.

LANGUAGE: tsx
CODE:
"use client";

import { trackLead } from "@/actions/track-lead";
import { useUser } from "@clerk/nextjs";
import { Analytics, AnalyticsProps } from "@dub/analytics/react";
import { useEffect } from "react";

export function DubAnalytics(props: AnalyticsProps) {
  const { user } = useUser();

  useEffect(() => {
    if (!user || user.publicMetadata.dubClickId) return;

    // if the user is loaded but hasn't been persisted to Dub yet, track the lead event
    trackLead({
      id: user.id,
      name: user.fullName!,
      email: user.primaryEmailAddress?.emailAddress,
      avatar: user.imageUrl,
    }).then(async (res) => {
      if (res.ok) await user.reload();
      else console.error(res.error);
    });
  }, [user]);

  return <Analytics {...props} />;
}

----------------------------------------

TITLE: Defining OpenAPI Specification for Tracking Leads with Dub API
DESCRIPTION: This YAML snippet specifies the OpenAPI configuration for the POST /track/lead endpoint. It includes the API path and the Open Graph title for the API reference documentation.

LANGUAGE: yaml
CODE:
openapi: post /track/lead
og:title: "Track a lead with the Dub API - API Reference"

----------------------------------------

TITLE: Implementing Track Lead Server Action
DESCRIPTION: Server-side implementation for tracking lead conversions with Dub and updating Clerk user metadata.

LANGUAGE: tsx
CODE:
"use server";

import { dub } from "@/lib/dub";
import { clerkClient } from "@clerk/nextjs/server";
import { cookies } from "next/headers";

export async function trackLead({
  id,
  name,
  email,
  avatar,
}: {
  id: string;
  name?: string | null;
  email?: string | null;
  avatar?: string | null;
}) {
  try {
    const cookieStore = await cookies();
    const dubId = cookieStore.get("dub_id")?.value;

    if (dubId) {
      await dub.track.lead({
        clickId: dubId,
        eventName: "Sign Up",
        externalId: id,
        customerName: name,
        customerEmail: email,
        customerAvatar: avatar,
      });

      cookieStore.set("dub_id", "", {
        expires: new Date(0),
      });
    }

    const clerk = await clerkClient();
    await clerk.users.updateUser(id, {
      publicMetadata: {
        dubClickId: dubId || "n/a",
      },
    });

    return { ok: true };
  } catch (error) {
    console.error("Error in trackLead:", error);
    return { ok: false, error: (error as Error).message };
  }
}

----------------------------------------

TITLE: Initializing Dub Go SDK
DESCRIPTION: Initialize the Dub SDK by creating a new instance with API key authentication.

LANGUAGE: go
CODE:
package main

import (
	"log"
	"os"
	"context"
	dub "github.com/dubinc/dub-go"
)

d := dub.New(
	dub.WithSecurity(os.Getenv("DUB_API_KEY")),
)

----------------------------------------

TITLE: Tracking Lead Events with PHP SDK
DESCRIPTION: Implementation of lead event tracking using Dub's PHP SDK. Demonstrates SDK initialization, lead event tracking, and cookie management in PHP.

LANGUAGE: php
CODE:
<?php

require 'vendor/autoload.php';

use Dub\Dub;
use Dub\Models\Operations;

$dub = Dub::builder()->setSecurity($_ENV["DUB_API_KEY"])->build();

$dubId = $_COOKIE['dub_id'] ?? null;
if ($dubId) {
    $request = new Operations\TrackLeadRequest();
    $request->clickId = $dubId;
    $request->eventName = 'Sign Up';
    $request->externalId = $customer->id;
    $request->customerName = $customer->name;
    $request->customerEmail = $customer->email;
    $request->customerAvatar = $customer->avatar;

    $dub->track->lead($request);
    // delete the dub_id cookie
    setcookie('dub_id', '', time() - 3600);
}

----------------------------------------

TITLE: Configuring Environment Variables
DESCRIPTION: Required environment variables for Appwrite and Dub integration

LANGUAGE: bash
CODE:
NEXT_PUBLIC_APPWRITE_ENDPOINT=https://cloud.appwrite.io/v1
NEXT_PUBLIC_APPWRITE_PROJECT=<APPWRITE_PROJECT_ID>
NEXT_APPWRITE_KEY=<APPWRITE_API_KEY>
NEXT_DUB_API_KEY=<DUB_API_KEY>

----------------------------------------

TITLE: Configuring NextAuth.js Options for Lead Tracking with Dub (App Router)
DESCRIPTION: This snippet demonstrates how to set up NextAuth.js configuration options to track lead conversion events using the Dub TypeScript SDK in a Next.js App Router setup. It shows how to detect new sign-ups, check for the dub_id cookie, send a lead event to Dub, and delete the cookie afterward.

LANGUAGE: typescript
CODE:
// app/api/auth/[...nextauth]/options.ts
import type { NextAuthOptions } from "next-auth";
import { cookies } from "next/headers";
import { dub } from "@/lib/dub";

export const authOptions: NextAuthOptions = {
  ...otherAuthOptions, // your other NextAuth options
  events: {
    async signIn(message) {
      // if it's a new sign up
      if (message.isNewUser) {
        // check if dub_id cookie is present
        const dub_id = cookies().get("dub_id")?.value;
        if (dub_id) {
          // send lead event to Dub
          await dub.track.lead({
            clickId: dub_id,
            eventName: "Sign Up",
            externalId: user.id,
            customerName: user.name,
            customerEmail: user.email,
            customerAvatar: user.image,
          });
          // delete the dub_id cookie
          cookies().set("dub_id", "", {
            expires: new Date(0),
          });
        }
      }
    },
  },
};

----------------------------------------

TITLE: Retrieving Link Analytics
DESCRIPTION: Examples of retrieving analytics for links using both linkId and externalId.

LANGUAGE: python
CODE:
# Retrieve the timeseries analytics for the last 7 days for a link
def analytics(request):
  res = d.analytics.retrieve(request={
    "link_id": "clx1gvi9o0005hf5momm6f7hj",
    "interval": "7d",
    "group_by": "timeseries",
  })

  return JsonResponse(res)

# Retrieve the timeseries analytics for the last 7 days for a link
def analytics(request):
  res = d.analytics.retrieve(request={
    "external_id": "ext_12345",
    "interval": "7d",
    "group_by": "timeseries",
  })

  return JsonResponse(res)

----------------------------------------

TITLE: Creating NextAuth.js Route Handler (App Router)
DESCRIPTION: This snippet demonstrates how to create a NextAuth.js route handler for the App Router in Next.js. It imports the authOptions and uses NextAuth to create a handler for NextAuth.js routes.

LANGUAGE: typescript
CODE:
// app/api/auth/[...nextauth]/index.ts
import { authOptions } from "./options";
import NextAuth from "next-auth";

const handler = NextAuth(authOptions);

export { handler as GET, handler as POST };

----------------------------------------

TITLE: Setting Up R2 Environment Variables
DESCRIPTION: Configure environment variables for Cloudflare R2 storage integration.

LANGUAGE: bash
CODE:
STORAGE_ACCESS_KEY_ID= // this is the Access Key ID value from Step 2
STORAGE_SECRET_ACCESS_KEY= // this is the Secret Access Key value from Step 2
STORAGE_ENDPOINT= // this is the S3 API value from Step 1

----------------------------------------

TITLE: Configuring Supabase Lead Tracking in Next.js Pages Router
DESCRIPTION: This code snippet shows how to configure Supabase to track lead conversion events in the auth callback function using Next.js Pages Router. It handles new user sign-ups, sends lead events to Dub, and manages the dub_id cookie.

LANGUAGE: typescript
CODE:
// pages/api/auth/callback.ts
import { NextApiRequest, NextApiResponse } from "next";
import { createClient } from "@supabase/supabase-js";
import { dub } from "@/lib/dub";

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  const { code, next = "/" } = req.query;
  const origin = `${req.headers["x-forwarded-proto"]}://${req.headers.host}`;

  if (typeof code === "string") {
    const supabase = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.SUPABASE_SERVICE_ROLE_KEY!
    );

    const { data, error } = await supabase.auth.exchangeCodeForSession(code);

    if (!error) {
      const { user } = data;
      const { dub_id } = req.cookies;

      // if the user is created in the last 10 minutes, consider them new
      const isNewUser =
        new Date(user.created_at) > new Date(Date.now() - 10 * 60 * 1000);

      // if the user is new and has a dub_id cookie, track the lead
      if (dub_id && isNewUser) {
        dub.track
          .lead({
            clickId: dub_id,
            eventName: "Sign Up",
            externalId: user.id,
            customerName: user.user_metadata.name,
            customerEmail: user.email,
            customerAvatar: user.user_metadata.avatar_url,
          })
          .catch(console.error); // Handle any errors in tracking

        // delete the clickId cookie
        res.setHeader(
          "Set-Cookie",
          `dub_id=; Path=/; Expires=Thu, 01 Jan 1970 00:00:00 GMT`
        );
      }

      return res.redirect(`${origin}${next}`);
    }
  }

  // return the user to an error page with instructions
  return res.redirect(`${origin}/auth/auth-code-error`);
}

----------------------------------------

TITLE: Sample Payload for sale.created Event in JSON
DESCRIPTION: This snippet demonstrates an example payload for the 'sale.created' event, triggered when a new sale is tracked via Dub Conversions. It includes details about the event, customer, click, associated link, and sale information.

LANGUAGE: json
CODE:
{
  "id": "evt_WHjyHhqsfYOrlJOOVJSoHXysD",
  "event": "sale.created",
  "createdAt": "2024-08-30T09:57:51.245Z",
  "data": {
    "eventName": "Purchased",
    "customer": {
      "id": "cm0gjdvr20001dkbha2n9gt2b",
      "name": "John",
      "email": "john@example.com",
      "avatar": "https://example.com/john.jpeg"
    },
    "click": {
      "id": "d0UtZqE0BZuBPrJS",
      "url": "https://github.com/dubinc/dub",
      "ip": "63.141.57.109",
      "continent": "NA",
      "country": "US",
      "city": "San Francisco",
      "device": "Desktop",
      "browser": "Chrome",
      "os": "Mac OS",
      "ua": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36",
      "bot": false,
      "qr": false,
      "referer": "(direct)"
    },
    "link": {
      "id": "cm0faqkyn0001txvfwjfeq7gl",
      "domain": "dub.sh",
      "key": "79ys3WA",
      "externalId": null,
      "url": "https://github.com/dubinc/dub",
      "trackConversion": true,
      "archived": false,
      "expiresAt": null,
      "expiredUrl": null,
      "password": null,
      "proxy": false,
      "title": null,
      "description": null,
      "image": null,
      "video": null,
      "rewrite": false,
      "doIndex": false,
      "ios": null,
      "android": null,
      "geo": null,
      "publicStats": false,
      "comments": null,
      "shortLink": "https://dub.sh/79ys3WA",
      "qrCode": "https://api.dub.co/qr?url=https://dub.sh/79ys3WA?qr=1",
      "utm_source": null,
      "utm_medium": null,
      "utm_campaign": null,
      "utm_term": null,
      "utm_content": null,
      "userId": "cm022rkcw0000ikt14mscg9sg",
      "workspaceId": "ws_cm022sis60003ikt1syy7kfhl",
      "clicks": 10,
      "lastClicked": "2024-08-30T07:45:09.000Z",
      "leads": 5,
      "sales": 1,
      "saleAmount": 20000,
      "createdAt": "2024-08-29T13:03:59.098Z",
      "updatedAt": "2024-08-30T09:57:50.891Z"
    },
    "sale": {
      "amount": 4500,
      "currency": "usd",
      "paymentProcessor": "stripe",
      "invoiceId": null
    }
  }
}

----------------------------------------

TITLE: Defining Dub API Key Format in Bash
DESCRIPTION: This snippet demonstrates the format of a Dub API key as it would appear in a .env file. The key follows a specific pattern with a prefix and a unique identifier.

LANGUAGE: bash
CODE:
DUB_API_KEY=dub_xxxxxxxx

----------------------------------------

TITLE: Updating Links with Dub SDK
DESCRIPTION: Example of updating an existing link using either linkId or externalId.

LANGUAGE: ruby
CODE:
def update
  req = ::OpenApiSDK::Operations::UpdateLinkRequest.new(
    link_id: 'clx1gvi9o0005hf5momm6f7hj',
    request_body: ::OpenApiSDK::Operations::UpdateLinkRequestBody.new(
      url: 'https://google.uk'
    )
  )

  res = @dub.links.update(req)

  render json: res.raw_response.body
end

----------------------------------------

TITLE: Fetching Workspace-Level Analytics in Multiple Languages
DESCRIPTION: Shows how to retrieve workspace-level click analytics instead of individual link analytics, which is more efficient for rate limit compliance. The example demonstrates fetching top links analytics for the last 4 hours.

LANGUAGE: typescript
CODE:
await dub.analytics.retrieve({
  groupBy: "top_links",
  start: "4 hours ago", // we support natural language for start/end params
});

LANGUAGE: python
CODE:
res = d.analytics.retrieve(request={
    "groupBy": "top_links",
    "start": "4 hours ago", // we support natural language for start/end params
})

LANGUAGE: go
CODE:
func main() {
	// Retrieve the timeseries analytics for the last 7 days for a link
	request := operations.RetrieveAnalyticsRequest{
        GroupBy: "top_links",
        Start: "4 hours ago", // we support natural language for start/end params
	}

	ctx := context.Background()
	res, err := d.Analytics.Retrieve(ctx, request)
	if err != nil {
		log.Fatal(err)
	}
	if res.OneOf != nil {
		// handle response
	}
}

LANGUAGE: ruby
CODE:
req = ::OpenApiSDK::Operations::RetrieveAnalyticsRequest.new(
  group_by: ::OpenApiSDK::Operations::GroupBy::TOP_LINKS,
  start: "4 hours ago", // we support natural language for start/end params
)

res = dub.analytics.retrieve(req)

puts res.raw_response.body

----------------------------------------

TITLE: Initializing Dub Ruby SDK
DESCRIPTION: Initialize the Dub SDK by creating a new instance and configuring security with an API key.

LANGUAGE: ruby
CODE:
require 'dub'

dub = ::OpenApiSDK::Dub.new
dub.config_security(
  ::OpenApiSDK::Shared::Security.new(
    token: ENV['DUB_API_KEY'],
  )
)

----------------------------------------

TITLE: Initializing Dub Ruby SDK
DESCRIPTION: Initialize the Dub SDK by creating a new instance and configuring security with an API key.

LANGUAGE: ruby
CODE:
require 'dub'

dub = ::OpenApiSDK::Dub.new
dub.config_security(
  ::OpenApiSDK::Shared::Security.new(
    token: ENV['DUB_API_KEY'],
  )
)

----------------------------------------

TITLE: Go Pagination Request Implementation
DESCRIPTION: Go implementation for making paginated API requests using the Dub SDK. Shows how to create and execute a paginated request in a Go context.

LANGUAGE: go
CODE:
request := operations.GetLinksRequest{
  Page: dubgo.Float64(1),
  PageSize: dubgo.Float64(10),
}

ctx := context.Background()
res, err := s.Links.List(ctx, request)

----------------------------------------

TITLE: Creating a Link with External ID in Dub TypeScript SDK
DESCRIPTION: This snippet shows how to create a short link with an external ID using the Dub TypeScript SDK in a Remix loader function. The external ID allows for easier link management and retrieval.

LANGUAGE: typescript
CODE:
export const loader = async () => {
  try {
    const result = await dub.links.create({
      url: "https://www.google.com",
      externalId: "12345",
    });

    return json(result, 200);
  } catch (error: any) {
    console.error(error);
    return json(error, 400);
  }
};

----------------------------------------

TITLE: OpenAPI Endpoint Definition for Bulk Link Updates
DESCRIPTION: Defines the PATCH /links/bulk endpoint for updating multiple links simultaneously. The endpoint allows modification of up to 100 links with the same data, but cannot modify domain or key properties and does not trigger webhook events.

LANGUAGE: openapi
CODE:
openapi: patch /links/bulk

----------------------------------------

TITLE: Bulk Deleting Links with Dub API
DESCRIPTION: This snippet demonstrates how to delete multiple links at once using the Dub API. It supports deleting up to 100 links in a single request. This is a destructive action that cannot be undone, and webhook events are not triggered for bulk deletions.

LANGUAGE: javascript
CODE:
import { Dub } from "dub";

export const dub = new Dub({
  token: process.env.DUB_API_KEY,
});

const result = await dub.links.deleteMany({
  linkIds: ["clux0rgak00011...", "clux0rgak00022..."],
});

LANGUAGE: go
CODE:
package main

import(
  "context"
  dubgo "github.com/dubinc/dub-go"
  "github.com/dubinc/dub-go/models/operations"
  "log"
  "os"
)

func main() {
  ctx := context.Background()

  s := dubgo.New(
    dubgo.WithSecurity(os.Getenv("DUB_API_KEY")),
  )

   res, err := s.Links.DeleteMany(ctx, operations.BulkDeleteLinksRequest{
    LinkIds: []string{
      "clux0rgak00011...",
      "clux0rgak00022...",
    },
  })
}

LANGUAGE: python
CODE:
import os
import dub
from dub.models import operations

d = dub.Dub(
  token=os.environ['DUB_API_KEY'],
)

 res = dub.links.delete_many(request={
  "link_ids": [
    "clux0rgak00011...",
    "clux0rgak00022...",
  ],
})

LANGUAGE: ruby
CODE:
require 'dub'

s = ::OpenApiSDK::Dub.new
s.config_security(
  ::OpenApiSDK::Shared::Security.new(
    token: "DUB_API_KEY",
  )
)

req = ::OpenApiSDK::Operations::BulkDeleteLinksRequest.new(
  link_ids: [
    "clux0rgak00011...",
    "clux0rgak00022...",
  ],
)

res = s.links.delete_many(req)

LANGUAGE: php
CODE:
declare(strict_types=1);

require 'vendor/autoload.php';

use Dub;
use Dub\Models\Operations;

$sdk = Dub\Dub::builder()->setSecurity('DUB_API_KEY')->build();


$response = $sdk->links->deleteMany(
  linkIds: [
    'clux0rgak00011...',
    'clux0rgak00022...',
  ]
);

LANGUAGE: bash
CODE:
curl --request DELETE \
  --url https://api.dub.co/links/bulk?linkIds=clux0rgak00011... \
  --header 'Authorization: Bearer <token>' \
  --header 'Content-Type: application/json'

----------------------------------------

TITLE: OpenAPI Specification Header for Dub Link Creation
DESCRIPTION: YAML configuration specifying the OpenAPI endpoint details for creating new links via POST /links

LANGUAGE: yaml
CODE:
openapi: post /links
og:title: "Create a new link with the Dub API - API Reference"

----------------------------------------

TITLE: Adding Custom Claims to Clerk Session Token
DESCRIPTION: Configuration for adding custom metadata to the Clerk session token for user tracking.

LANGUAGE: json
CODE:
{
  "metadata": "{{user.public_metadata}}"
}

----------------------------------------

TITLE: OpenAPI Partner Links POST Endpoint Definition
DESCRIPTION: YAML definition specifying the OpenAPI endpoint for creating partner links via POST method to /partners/links.

LANGUAGE: yaml
CODE:
openapi: post /partners/links

----------------------------------------

TITLE: Retrieving Link Analytics with Dub TypeScript SDK in Remix
DESCRIPTION: This snippet demonstrates how to retrieve analytics for a link using the Dub TypeScript SDK in a Remix loader function. It shows how to get timeseries data for the last 7 days.

LANGUAGE: typescript
CODE:
export const loader = async () => {
  try {
    // Retrieve the timeseries analytics for the last 7 days for a link
    const result = await dub.analytics.retrieve({
      linkId: "clv3o9p9q000au1h0mc7r6l63",
      interval: "7d",
      groupBy: "timeseries",
    });

    const timeseries = response as ClicksTimeseries[];

    return json(timeseries, 200);
  } catch (error: any) {
    console.error(error);
    return json(error, 400);
  }
};

----------------------------------------

TITLE: Retrieving Customer Data with Dub API using OpenAPI
DESCRIPTION: OpenAPI specification for a GET endpoint to retrieve customer information by ID. The endpoint is defined as '/customers/{id}', where {id} is a path parameter representing the unique identifier of the customer to be retrieved.

LANGUAGE: openapi
CODE:
openapi: get /customers/{id}

----------------------------------------

TITLE: Installing and Building Dub Repository
DESCRIPTION: Commands for cloning the Dub repository, installing dependencies, and building internal packages.

LANGUAGE: bash
CODE:
git clone https://github.com/dubinc/dub.git
pnpm i
pnpm -r --filter "./packages/**" build

----------------------------------------

TITLE: Defining OpenAPI GET Endpoint for Partner Analytics in YAML
DESCRIPTION: This YAML snippet specifies the OpenAPI definition for a GET endpoint to retrieve partner analytics. It includes the endpoint path and HTTP method.

LANGUAGE: yaml
CODE:
openapi: get /partners/analytics

----------------------------------------

TITLE: Deploying to GitHub
DESCRIPTION: Push the local repository changes to GitHub.

LANGUAGE: bash
CODE:
git add .
git commit -m "Initial commit"
git push origin main

----------------------------------------

TITLE: Defining OpenAPI Specification for Customer Tracking Endpoint in YAML
DESCRIPTION: This YAML snippet defines the OpenAPI specification for the POST /track/customer endpoint. It specifies the path and title for the API documentation.

LANGUAGE: yaml
CODE:
openapi: post /track/customer
og:title: "Track a customer with the Dub API - API Reference"

----------------------------------------

TITLE: OpenAPI Path Definition for Tag Update Endpoint
DESCRIPTION: OpenAPI specification defining the PATCH endpoint for updating tag properties in Dub API.

LANGUAGE: openapi
CODE:
openapi: patch /tags/{id}

----------------------------------------

TITLE: Updating a Link with Dub TypeScript SDK in Remix
DESCRIPTION: This snippet shows how to update an existing link using the Dub TypeScript SDK in a Remix loader function. It demonstrates updating by both linkId and externalId.

LANGUAGE: typescript
CODE:
export const loader = async () => {
  try {
    // Update a link by its linkId
    const { shortLink } = await dub.links.update(
      "link_rWOKByP0bRMrstK8e4HPjprJ",
      {
        url: "https://www.google.uk", // new URL
      }
    );

    // Update a link by its externalId
    const { shortLink } = await dub.links.update("ext_12345", {
      url: "https://www.google.uk", // new URL
    });

    return json({ shortLink }, 200);
  } catch (error: any) {
    console.error(error);
    return json(error, 400);
  }
};

----------------------------------------

TITLE: Defining OpenAPI Specification for Updating Workspace in Dub API
DESCRIPTION: This YAML snippet defines the OpenAPI specification for the PATCH endpoint to update a workspace in the Dub API. It specifies the path parameter and the HTTP method used for this operation.

LANGUAGE: yaml
CODE:
openapi: patch /workspaces/{idOrSlug}

----------------------------------------

TITLE: Defining OpenAPI Specification for Link Upsert Endpoint in YAML
DESCRIPTION: This YAML snippet defines the OpenAPI specification for the PUT /links/upsert endpoint of the Dub API. It specifies the operation for upserting links, including the endpoint path and the Open Graph title for the API reference documentation.

LANGUAGE: yaml
CODE:
openapi: put /links/upsert
og:title: "Upsert a link with the Dub API - API Reference"

----------------------------------------

TITLE: Implementing Combined Variant Analytics
DESCRIPTION: Implementation of combined site-visit and outbound-domains variants for comprehensive tracking capabilities.

LANGUAGE: typescript
CODE:
<DubAnalytics
  domainsConfig={{
    site: "site.dub.co",
    outbound: ["example.com", "example.sh"],
  }}
/>

LANGUAGE: html
CODE:
<script
  src="https://www.dubcdn.com/analytics/script.site-visit.outbound-domains.js"
  data-domains='{"site": "site.dub.co", "outbound": ["example.com", "example.sh"]}'
/>

----------------------------------------

TITLE: Rendering Integration Cards in JSX
DESCRIPTION: This code snippet renders a card group with two cards, one for viewing the integration on Dub and another for viewing it on Make.com. Each card includes a title, icon, and link to the respective platform.

LANGUAGE: JSX
CODE:
<CardGroup cols={2}>
  <Card
    title="View on Dub"
    icon={
      <div className="h-8 w-8">
        <img
          src="https://assets.dub.co/logo.png"
          alt="Dub logo"
          className="h-full w-full"
        />
      </div>
    }
    href="https://app.dub.co/integrations/make"
  >
    Opens the integration page on Dub
  </Card>
  <Card
    title="View on Make.com"
    icon={
      <div className="h-8 w-8">
        <img
          src="https://dubassets.com/integrations/clzlmyxup0001jeqyaka3dvdd_GSp2tii"
          alt="Make.com logo"
          className="h-full w-full rounded-full"
        />
      </div>
    }
    href="https://d.to/make"
  >
    Opens the integration page on Make.com
  </Card>
</CardGroup>

----------------------------------------

TITLE: Configuring Next.js Reverse Proxy for Dub Analytics
DESCRIPTION: Next.js configuration for setting up a reverse proxy to prevent ad-blockers from blocking analytics requests.

LANGUAGE: javascript
CODE:
module.exports = {
  async rewrites() {
    return [
      {
        source: "/_proxy/dub/track/:path",
        destination: "https://api.dub.co/track/:path",
      },
    ];
  },
};

----------------------------------------

TITLE: Rendering Integration Cards in JSX
DESCRIPTION: This code snippet creates a card group with two cards, one for Dub and one for Segment. Each card includes a title, icon, and link to the respective integration page.

LANGUAGE: jsx
CODE:
<CardGroup cols={2}>
  <Card
    title="View on Dub"
    icon={
      <div className="h-8 w-8">
        <img
          src="https://assets.dub.co/logo.png"
          alt="Dub logo"
          className="h-full w-full"
        />
      </div>
    }
    href="https://app.dub.co/integrations/segment"
  >
    Opens the integration page on Dub
  </Card>
  <Card
    title="View on Segment"
    icon={
      <div className="h-8 w-8">
        <img
          src="https://dubassets.com/integrations/int_zGnSElTzimbz20OWnXerPoKv_Noy3Xhk"
          alt="Segment logo"
          className="h-full w-full rounded-full"
        />
      </div>
    }
    href="https://d.to/segment"
  >
    Opens the integration page on Segment
  </Card>
</CardGroup>

----------------------------------------

TITLE: Installing Dub PHP SDK via Composer
DESCRIPTION: Command to install the Dub PHP SDK using Composer package manager.

LANGUAGE: bash
CODE:
composer require dub/dub-php

----------------------------------------

TITLE: Rendering Integration Cards with JSX
DESCRIPTION: JSX component structure for displaying integration cards with Dub and Shopify logos and links.

LANGUAGE: jsx
CODE:
<CardGroup cols={2}>
  <Card
    title="View on Dub"
    icon={
      <div className="h-8 w-8">
        <img
          src="https://assets.dub.co/logo.png"
          alt="Dub logo"
          className="h-full w-full"
        />
      </div>
    }
    href="https://app.dub.co/integrations/shopify"
  >
    Opens the integration page on Dub
  </Card>
  <Card
    title="View on Shopify"
    icon={
      <div className="h-8 w-8">
        <img
          src="https://dubassets.com/integrations/int_iWOtrZgmcyU6XDwKr4AYYqLN_jUmF77W"
          alt="Shopify logo"
          className="h-full w-full rounded-full"
        />
      </div>
    }
    href="https://d.to/shopify/app"
  >
    Opens the integration page on Shopify
  </Card>
</CardGroup>

----------------------------------------

TITLE: Creating a Link with Tenant ID in Dub
DESCRIPTION: This snippet demonstrates how to create a link with a tenant ID in Dub. The tenant ID is useful for grouping links created by a specific user or team in your system.

LANGUAGE: javascript
CODE:
import { Dub } from "dub";

export const dub = new Dub({
  token: process.env.DUB_API_KEY,
});

const link = await dub.links.create({
  url: "https://google.com",
  tenantId: "12345",
});

LANGUAGE: go
CODE:
package main

import(
  "context"
  dubgo "github.com/dubinc/dub-go"
  "github.com/dubinc/dub-go/models/operations"
  "log"
  "os"
)

func main() {
  ctx := context.Background()

  s := dubgo.New(
    dubgo.WithSecurity(os.Getenv("DUB_API_KEY")),
  )

  res, err := s.Links.Create(ctx, &operations.CreateLinkRequestBody{
    URL: "https://google.com",
    TenantId: "12345",
  })

  if err != nil {
    log.Fatal(err)
  }

  if res != nil {
    // handle response
  }
}

LANGUAGE: python
CODE:
import os
import dub
from dub.models import operations

d = dub.Dub(
  token=os.environ['DUB_API_KEY'],
)

res = d.links.create(request={
  "url": "https://google.com",
  "tenant_id": "12345",
})

LANGUAGE: ruby
CODE:
require 'dub'

s = ::OpenApiSDK::Dub.new
s.config_security(
  ::OpenApiSDK::Shared::Security.new(
    token: "DUB_API_KEY",
  )
)

req = ::OpenApiSDK::Operations::CreateLinkRequestBody.new(
  url: "https://google.com",
  tenant_id: "12345",
)

LANGUAGE: php
CODE:
declare(strict_types=1);

require 'vendor/autoload.php';

use Dub;
use Dub\Models\Operations;

$sdk = Dub\Dub::builder()->setSecurity('DUB_API_KEY')->build();

$request = new Operations\CreateLinkRequestBody(
  url: 'https://google.com',
  tenantId: '12345',
);

$response = $sdk->links->create(
  request: $request
);

LANGUAGE: bash
CODE:
curl --request POST \
  --url https://api.dub.co/links \
  --header 'Authorization: Bearer <token>' \
  --header 'Content-Type: application/json' \
  --data '{
    "url": "https://google.com",
    "external_id": "12345"
  }'

----------------------------------------

TITLE: Rendering Navigation Cards for Stripe Integration
DESCRIPTION: JSX code that creates a card group with two navigation cards - one linking to Dub's integration page and another to Stripe's integration page. Each card includes a logo image and descriptive text.

LANGUAGE: jsx
CODE:
<CardGroup cols={2}>
  <Card
    title="View on Dub"
    icon={
      <div className="h-8 w-8">
        <img
          src="https://assets.dub.co/logo.png"
          alt="Dub logo"
          className="h-full w-full"
        />
      </div>
    }
    href="https://app.dub.co/integrations/stripe"
  >
    Opens the integration page on Dub
  </Card>
  <Card
    title="View on Stripe"
    icon={
      <div className="h-8 w-8">
        <img
          src="https://dubassets.com/integrations/clzra1ya60001wnj4a89zcg9h_jtyaGa7"
          alt="Stripe logo"
          className="h-full w-full rounded-full"
        />
      </div>
    }
    href="https://d.to/stripe/app"
  >
    Opens the integration page on Stripe
  </Card>
</CardGroup>

----------------------------------------

TITLE: Installing Dub Analytics Script for Other Frameworks
DESCRIPTION: HTML script tag implementation for adding Dub Analytics to non-React frameworks.

LANGUAGE: javascript
CODE:
<script
  src="https://www.dubcdn.com/analytics/script.js"
  data-domains='{"refer": "go.example.com"}'
  defer
/>

----------------------------------------

TITLE: Configuring Vercel Reverse Proxy for Dub Analytics
DESCRIPTION: Vercel configuration for setting up a reverse proxy through vercel.json.

LANGUAGE: json
CODE:
{
  "rewrites": [
    {
      "source": "/_proxy/dub/track/:path",
      "destination": "https://api.dub.co/track/:path"
    }
  ]
}

----------------------------------------

TITLE: Dub SDK Link Creation Example
DESCRIPTION: JavaScript example using Dub TypeScript SDK to create a link using an OAuth access token.

LANGUAGE: javascript
CODE:
import { Dub } from "dub";

const dub = new Dub({
  token: <ACCESS_TOKEN>,
});

const link = await dub.links.create({
  url: "https://google.com",
});

----------------------------------------

TITLE: Upserting Links with Dub API
DESCRIPTION: Demonstrates link upsert functionality which creates a new link or updates an existing one based on URL. Provides a simplified way to manage links without checking existence first.

LANGUAGE: javascript
CODE:
import { Dub } from "dub";

export const dub = new Dub({
  token: process.env.DUB_API_KEY,
});

const link = await dub.links.upsert({
  url: "https://google.com", // will always be the same short link
});

LANGUAGE: bash
CODE:
curl --request POST \
  --url https://api.dub.co/links/upsert \
  --header 'Authorization: Bearer <token>' \
  --header 'Content-Type: application/json' \
  --data '{"url": "https://google.com"}'

----------------------------------------

TITLE: Upserting Link
DESCRIPTION: Implementation of link upsert functionality that creates or updates a link.

LANGUAGE: python
CODE:
def upsert_link(request):
  res = d.links.upsert(request={
    "url": "https://google.com",
  })

  return res.short_link

----------------------------------------

TITLE: Configuring Appwrite Client
DESCRIPTION: Server-side setup for Appwrite session and admin clients with authentication verification

LANGUAGE: typescript
CODE:
'use server';
import { Client, Account } from 'node-appwrite';
import { cookies } from 'next/headers';

export async function createSessionClient() {
  const client = new Client()
    .setEndpoint(process.env.NEXT_PUBLIC_APPWRITE_ENDPOINT as string)
    .setProject(process.env.NEXT_PUBLIC_APPWRITE_PROJECT as string);

  const session = (await cookies()).get('my-custom-session');
  if (!session || !session.value) {
    throw new Error('No session');
  }

  client.setSession(session.value);

  return {
    get account() {
      return new Account(client);
    }
  };
}

export async function createAdminClient() {
  const client = new Client()
    .setEndpoint(process.env.NEXT_PUBLIC_APPWRITE_ENDPOINT as string)
    .setProject(process.env.NEXT_PUBLIC_APPWRITE_PROJECT as string)
    .setKey(process.env.NEXT_APPWRITE_KEY as string);

  return {
    get account() {
      return new Account(client);
    }
  };
}

----------------------------------------

TITLE: API Request with Bearer Token
DESCRIPTION: cURL example showing how to make an API request using the OAuth access token in the Authorization header.

LANGUAGE: shell
CODE:
curl --request POST \
  --url https://api.dub.co/links \
  --header 'Authorization: Bearer <ACCESS_TOKEN>' \
  --header 'Content-Type: application/json'

----------------------------------------

TITLE: Retrieving Filtered Event List using dub.events.list in TypeScript
DESCRIPTION: This snippet demonstrates how to use the dub.events.list method to retrieve a filtered list of click events for a specific link, within a custom date range. It showcases the use of the event, linkId, start, and end parameters.

LANGUAGE: typescript
CODE:
await dub.events.list({
  event: "clicks",
  linkId: "abc123",
  start: "a week ago", // we support relative dates like "a week ago"
  end: "today", // we support relative dates like "today"
});

----------------------------------------

TITLE: Implementing Outbound Domains Variant
DESCRIPTION: Implementation of cross-domain tracking variant that supports appending dub_id cookie to configured outbound domain links.

LANGUAGE: typescript
CODE:
<DubAnalytics domainsConfig={{ outbound: ["example.com", "example.sh"] }} />

LANGUAGE: html
CODE:
<script
  src="https://www.dubcdn.com/analytics/script.outbound-domains.js"
  data-domains='{"outbound": ["example.com", "example.sh"]}'
/>

----------------------------------------

TITLE: Implementing User Signup with Lead Tracking
DESCRIPTION: Complete implementation of user signup page with Appwrite authentication and Dub lead tracking

LANGUAGE: tsx
CODE:
import { ID } from 'node-appwrite';
import { createAdminClient, getLoggedInUser } from '@/lib/server/appwrite';
import { cookies } from 'next/headers';
import { redirect } from 'next/navigation';
import { addDubLead } from '@/lib/server/dub';

async function signUpWithEmail(formData: any) {
  'use server';

  // Get sign up info from form
  const email = formData.get('email');
  const password = formData.get('password');
  const name = formData.get('name');

  // Create account and session using Appwrite
  const { account } = await createAdminClient();

  const user = await account.create(ID.unique(), email, password, name);
  const session = await account.createEmailPasswordSession(email, password);

  (await cookies()).set('my-custom-session', session.secret, {
    path: '/',
    httpOnly: true,
    sameSite: 'strict',
    secure: true
  });

  // Check if Dub ID is present in cookies and track lead if found
  const dub_id = (await cookies()).get('dub_id')?.value;
  if (dub_id) {
    addDubLead(user, dub_id);
    (await cookies()).delete('dub_id');
  }

  // Redirect to success page
  redirect('/auth/success');
}

export default async function SignUpPage() {

  // Verify active user session and redirect to success page if found
  const user = await getLoggedInUser();
  if (user) redirect('/auth/success');

  return (
    <>
      <form action={signUpWithEmail}>
        <input id="email" name="email" placeholder="Email" type="email" required />
        <input id="password" name="password" placeholder="Password" minLength={8} type="password" required />
        <input id="name" name="name" placeholder="Name" type="text" required />
        <button type="submit">Sign up</button>
      </form>
    </>
  );
}

----------------------------------------

TITLE: Implementing Dub Lead Tracking
DESCRIPTION: Setup of Dub client and lead tracking functionality

LANGUAGE: typescript
CODE:
import type { Models } from 'node-appwrite';
import { Dub } from 'dub';

const dub = new Dub({
  token: process.env.NEXT_DUB_API_KEY
});

export function addDubLead(user: Models.User<Models.Preferences>, dub_id: string) {
  dub.track.lead({
    clickId: dub_id,
    eventName: 'Sign Up',
    externalId: user.$id,
    customerName: user.name,
    customerEmail: user.email
  });
}

----------------------------------------

TITLE: Creating Database Tables
DESCRIPTION: Create the necessary database tables using Prisma.

LANGUAGE: bash
CODE:
pnpm run prisma:push

----------------------------------------

TITLE: Initializing Dub SDK
DESCRIPTION: Initializes the Dub TypeScript SDK with an API key. The token can be provided directly or through the DUB_API_KEY environment variable.

LANGUAGE: typescript
CODE:
import { Dub } from "dub";

export const dub = new Dub({
  token: process.env.DUB_API_KEY, // optional, defaults to DUB_API_KEY env variable
});

LANGUAGE: typescript
CODE:
import { dub } from "./lib/dub";

----------------------------------------

TITLE: Rendering Installation Cards Component in JSX
DESCRIPTION: JSX component code that displays a card group of different installation options for Dub Analytics. Each card represents a different platform or framework with its corresponding icon and link to specific installation instructions.

LANGUAGE: jsx
CODE:
<CardGroup>
  <Card
    title="React"
    icon="react"
    href="/sdks/client-side/installation-guides/react"
  >
    Add Dub Analytics to your React app.
  </Card>
  <Card
    title="Manual installation"
    icon="browser"
    href="/sdks/client-side/installation-guides/manual"
  >
    Add Dub Analytics to your website.
  </Card>
  <Card
    title="Framer"
    icon={
      <svg
        width="74"
        height="111"
        viewBox="0 0 74 111"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
        className="w-7 h-7"
      >
        <path d="M0 0H73.8374V36.9892H36.9187L0 0Z" fill="#eb5611" />
        <path d="M0 36.989H36.9187L73.8374 73.9796H0V36.989Z" fill="#eb5611" />
        <path d="M0 73.9797H36.9187V110.97L0 73.9797Z" fill="#eb5611" />
      </svg>
    }
    href="/sdks/client-side/installation-guides/framer"
  >
    Add Dub Analytics to your Framer site.
  </Card>
  <Card
    title="Shopify"
    icon="shopify"
    href="/sdks/client-side/installation-guides/shopify"
  >
    Add Dub Analytics to your Shopify store.
  </Card>
  <Card
    title="WordPress"
    icon="wordpress"
    href="/sdks/client-side/installation-guides/wordpress"
  >
    Add Dub Analytics to your WordPress site.
  </Card>
  <Card
    title="Webflow"
    icon="webflow"
    href="/sdks/client-side/installation-guides/webflow"
  >
    Add Dub Analytics to your Webflow site.
  </Card>
</CardGroup>

----------------------------------------

TITLE: Rendering Authentication Provider Cards in JSX
DESCRIPTION: This code snippet displays a group of cards for different authentication providers, including NextAuth.js, Clerk, Supabase, Auth0, and Appwrite. Each card contains a title, icon, and link to the respective documentation for tracking lead events.

LANGUAGE: jsx
CODE:
<CardGroup>
  <Card
    title="NextAuth.js"
    icon="shield-halved"
    iconType="solid"
    href="/conversions/leads/next-auth"
    horizontal
  >
    Tracking lead events with NextAuth.js
  </Card>
  <Card
    title="Clerk"
    icon="shield-halved"
    iconType="solid"
    href="/conversions/leads/clerk"
    horizontal
  >
    Tracking lead events with Clerk
  </Card>
  <Card
    title="Supabase"
    icon="shield-halved"
    iconType="solid"
    href="/conversions/leads/supabase"
    horizontal
  >
    Tracking lead events with Supabase
  </Card>
  <Card
    title="Auth0"
    icon="shield-halved"
    iconType="solid"
    href="/conversions/leads/auth0"
    horizontal
  >
    Tracking lead events with Auth0
  </Card>
  <Card
    title="Appwrite"
    icon="shield-halved"
    iconType="solid"
    href="/conversions/leads/appwrite"
    horizontal
  >
    Tracking lead events with Appwrite
  </Card>
</CardGroup>